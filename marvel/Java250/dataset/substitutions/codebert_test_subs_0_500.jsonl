{"code": "import java.util.PriorityQueue;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner std = new Scanner(System.in);\\n        int n = std.nextInt();\\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\\n        for (int i = 0; i < n; i++) {\\n            pq.add(std.nextInt());\\n        }\\n\\n        Integer first = pq.poll();\\n        double ans = first;\\n        while (!pq.isEmpty()) {\\n            Integer value = pq.poll();\\n            ans += value;\\n            ans /= 2.0;\\n        }\\n\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "232", "substitutes": {"std": ["id", "ast", "vd", "pd", "nd", "ird", "sys", "file", "st", "standard", "xx", "and", "dev", "util", "se", "d", "dd", "init", "Standard", "ss", "stress", "fd", "nl", "cr", "er", "stable", "cmd", "Reader", "db", "ld", "td", "func", "ds", "ad", "gd", "dc", "max", "src", "gc", "grad", "stan", "sd", "debug", "s", "sb", "rd", "cl", "da", "parse", "exec", "null", "rad", "parser", "g", "rt", "est", "reader", "St"], "n": ["j", "h", "conn", "len", "sn", "ns", "in", "d", "z", "c", "m", "norm", "en", "network", "nc", "t", "ln", "nb", "k", "nt", "e", "p", "f", "net", "o", "w", "s", "l", "N", "num", "x", "u", "b"], "pq": ["perque", " pg", " pqt", "perq", "perqueue", "paue", " pdq", "pque", "paq", "Pqueue", "pdq", "lpqt", "preload", " pload", "preg", "Pue", " pQ", "paqs", "PQ", "paqt", "padq", "psload", "lpqs", "Pq", "paque", "psg", "lpq", "pakg", "psque", " pqueue", "Pg", "preq", "Pdq", "Pkg", "perg", "lpQ", "pload", " pqs", " pue", "pkg", "pg", "pQ", "psq", " pkg", "pqs", "paQ", "pqt", "Pque", " pque", "pue", "pqueue", "preque"], "i": ["id", "inner", "j", "ri", "h", "pi", "d", "mi", "ii", "ip", "z", "v", "ix", "start", "io", "m", "gi", "index", "k", "phi", "uli", "e", "p", "fi", "f", "qi", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "oi", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "I"], "first": ["then", "small", "instance", "one", "single", "st", "First", "part", "starting", "only", "empty", "init", "count", "last", "default", "start", "split", "now", "second", "current", "this", "top", "index", "third", "prev", "alpha", "max", "result", "next", "average", "primary", "sort", "space", "self", "success", "size", "initial"], "ans": ["anas", "aces", "vals", "anus", "outs", "ats", "cons", "leans", "lan", "sk", "aning", "ns", "ons", "sa", "aus", "anks", "ions", "nas", "amps", "vers", "an", "ras", "ams", "ars", "ana", "ases", "os", "aned", "cas", "offs", "annels", "ents", "ares", "ads", "ks", "span", "arts", "missions", "anc", "ANS", "na", "as", "s", "ays", "acts", "cs", "ants", "vs", "eps", "ann", "ls", "ins"], "value": ["id", "change", "one", "object", "alt", "values", "function", "length", "part", "node", "VALUE", "count", "child", "type", "default", "v", "area", "iv", "start", "element", "feature", "data", "index", "key", "Value", "number", "ava", "age", "end", "result", "max", "next", "test", "s", "val", "parent", "num", "weight", "cost", "size", "done", "slave", "total", "entry"]}}
{"code": "import java.util.*;\\n \\npublic class Main\\n{\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint a=sc.nextInt();\\n\t\tint b=sc.nextInt();\\n\t\tint c=sc.nextInt();\\n\t\t\\n\t\tint d=0,e=0,f=0;\\n\t\t\\n\t\td=Math.abs(a-b);\\n\t\te=Math.abs(c-b);\\n\t\tf=Math.abs(a-c);\\n\t\tint aa=Math.max(d,e);\\n\t\tSystem.out.println(Math.max(aa,f));\\n\t}\\n}", "target": "247", "substitutes": {"sc": ["sw", "sr", "cont", "ch", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "com", "ss", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "ctx", "ser", "acc", "ocr", "rc", "system", "sche", "ca", "na", "cur", "coll", "sb", "cs", "cl", "pc", "ner", "asc", "cv", "sci"], "a": ["base", "ba", "ab", "h", "fa", "ma", "aaa", "sa", "am", "z", "an", "area", "m", "ac", "y", "A", "ga", "ada", "ad", "ea", "p", "n", "alpha", "aj", "la", "va", "ca", "na", "as", "w", "ama", "asa", "l", "da", "x", "ae", "af", "u", "ar"], "b": ["j", "ba", "h", "ab", "bf", "z", "v", "m", "r", "y", "t", "B", "k", "p", "n", "eb", "q", "o", "w", "s", "i", "sb", "l", "x", "ae", "u", "g", "rb"], "c": ["cu", "ch", "cf", "lc", "h", "ab", "bc", "uc", "z", "v", "m", "ac", "r", "y", "ec", "cc", "k", "ad", "p", "n", "q", "C", "ca", "o", "w", "i", "cs", "l", "x", "ae", "ci", "u", "g"], "d": ["j", "h", "dad", "cd", "in", "dd", "fd", "z", "m", "r", "y", "db", "ld", "t", "dt", "ds", "ad", "p", "n", "dn", "dc", "dat", "o", "D", "w", "s", "i", "l", "dx", "da", "x", "dh", "bd", "du", "u", "g", "dy"], "e": ["j", "h", "ed", "E", "se", "ef", "ace", "pe", "z", "v", "r", "ee", "y", "ec", "ce", "fe", "ea", "p", "n", "be", "end", "eb", "ev", "o", "w", "oe", "s", "i", "ey", "ie", "el", "ei", "l", "eff", "x", "ae", "eu", "u", "g", "de"], "f": ["j", "cf", "h", "fo", "fs", "F", "fa", "fx", "sf", "fen", "ef", "fc", "bf", "z", "v", "m", "r", "y", "fp", "t", "fe", "k", "p", "n", "df", "q", "inf", "o", "w", "s", "i", "ff", "l", "fb", "x", "af", "u", "g", "fi", "fl"], "aa": ["ba", "Va", "fa", "ma", "aaa", "sa", "AA", "abc", "area", "ac", "ee", "aaaa", "ga", "lambda", "Na", "beta", "ea", "ad", "ava", "alpha", "n", "pha", "dc", "la", "ca", "va", "afa", "na", "asa", "ya", "da", "au", "qa", "ae", "af", "xa", "ai", "lla"]}}
{"code": "\\nimport java.util.*;\\nimport java.io.*;\\n\\n/**\\n * @author AnonymousP\\n * @__WHEN YOU FEEL LIKE QUITTING, THINK ABOUT WHY YOU STARTED__@\\n */\\n//COMBINATON = nCr = n*(n-1)/2\\npublic class Main{\\n\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        PrintWriter out = new PrintWriter(System.out);\\n        String s = sc.next();\\n        int ans = 0;\\n        /*\\n         i=======j\\n         0 ----> 1,2,3 (3-0)\\n         1 ----> 2,3   (3-1)\\n         2 ----> 3     (3-2)\\n         (s.length()-i)\\n        \\n         s.length()==4\\n         i<3(s.length()-1)\\n         j<s.length()-i\\n        \\n        \\n         */\\n        for (int i = 0; i < s.length() - 1; i++) {\\n            for (int j = 1; j < s.length() - i; j++) {\\n                //    System.out.println(i+\" \"+(j));\\n                //HAVE A LOOK HERE COMMMENT LINE//\\n                //    System.out.println(i+\" \"+(i+j));\\n\\n                if (s.charAt(i) == s.charAt(i + j)) {\\n                    ans++;\\n                }\\n            }\\n        }\\n        if (ans == 2) {\\n            out.println(\"Yes\");\\n            out.flush();\\n        } else {\\n            out.println(\"No\");\\n            out.flush();\\n        }\\n    }\\n\\n    //************************************************************************//\\n//CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_//\\n//*******FAST IO*************FAST IO***************FAST IO****************//\\n    static class FastReader {\\n\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n   //*******FAST IO*************FAST IO***************FAST IO****************//\\n}\\n", "target": "33", "substitutes": {}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\\n    public static void main(String[] args){\\n\\n\tScanner sc = new Scanner(System.in);\\n\\n\tint N = sc.nextInt();\\n\\n\tint[] B = new int[N-1];\\n\\n\tfor(int i=0; i<N-1; i++){\\n\\n\tB[i] = sc.nextInt();\t\\n\\n  }\\n\\n\tint[] A = new int[N];\\n\\n\tfor(int i=0; i<N-2; i++){\\n\\n\tif(B[i]==B[i+1]){\t\\n\\n\tA[i+1] = B[i];\\n\\n  }\t\\n\\n\telse if(B[i]<B[i+1]){\\n\\n\tA[i+1] = B[i];\\n\\n  }  \\n\\n\telse if(B[i]>B[i+1]){\\n\\n\tA[i+1] = B[i+1];\\n\\n  }\\n\\n }\\n\\n\tA[0] = B[0];\\n\\n\tA[N-1] = B[N-2];\\n\\n\tint ans = 0;\\n\\n\tfor(int i=0; i<N; i++){\\n\\n\tans += A[i];\\n\\n   }\\n\\n\tSystem.out.println(ans);\\n\\n }\\n}", "target": "240", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "soc", " Sc", "sys", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "ss", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "ec", "search", "nc", "sch", "sec", "sh", "cc", "cor", "nt", "sp", "ser", "acc", "src", "rc", "system", "anc", "sche", "cur", "cs", "cl", "pc", "ner", "parser", "asc", "screen", "cv", "sci"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "E", "No", "Part", "Network", "Bi", " n", "OUT", "Num", "H", "Count", "Node", "Not", "T", "CNN", "NE", "Code", "Sn", "Y", "NT", "Na", "NS", "n", "ND", "L", "K", "IN", "W", "State", "Len", "C", "O", "NA", "D", "MN", "M", "KN", "II", "Z", "S", "Class", "X", "V", "NN", "P", "Size", "I", "G"], "B": ["Buffer", "Q", "BI", "Beta", "Big", "Tab", "J", "F", "BL", "E", "LB", "Block", "Br", "DB", "Ub", "Application", "Part", "AB", "File", "Bi", "NB", "Builder", "BF", "H", "UB", "MB", "Number", "T", "Book", "Bs", "TB", "Bu", "Y", "Code", "BB", "Job", "Base", "Both", "This", "Band", "R", "L", "WB", "QB", "Other", "BA", "W", "BC", "Location", "O", "Library", "C", "GB", "D", "b", "M", "BS", "U", "Z", "S", "OB", "X", "V", "BE", "P", "Business", "If", "BD", "Bar", "I", "G"], "i": ["id", "slice", "j", "api", "ri", "lc", "a", "ami", "pi", "mu", "site", "I", "in", "mi", "init", "my", "d", "ip", "ii", "cli", "ori", "io", "v", "ix", "z", "m", "is", "abi", "y", "gi", "data", "phi", "key", "e", "fi", "n", "anti", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "yi", "chi", "ei", "l", "si", "bi", "hi", "info", "x", "ci", "ni", "u", "uri", "ti", "ai", "mini", "b", "source", "vi"], "A": ["Am", "As", "An", "AR", "a", "F", "Address", "MA", "The", "AB", "Part", "AP", "Ab", "Area", "And", "AD", "AA", "IA", "Action", "H", "Ma", "You", "Input", "T", "Alpha", "App", "Y", "This", "alpha", "Array", "AM", "L", "API", "BA", "W", "C", "CA", "NA", "Ar", "At", "Az", "M", "Info", "O", "D", "U", "S", "Adam", "Java", "Australia", "Ca", "LA", "V", "AF", "New", "P", "If", "Average", "au", "AU", "Bar", "I", "G", "AC", "Auth"], "ans": [" scans", "can", "lines", "anas", "ats", "cons", "lan", "ons", "ns", "ens", "AN", "rs", "aus", "atan", "nas", "lang", "amps", "an", "reads", "scan", "ras", "ars", "ana", "con", "ases", "urs", "aned", "acs", "cas", "rows", "cus", "offs", "anon", "ds", "ents", "san", "ids", "ks", "span", "anc", "ANS", "na", "actions", "ants", "eps", "types", "nan", "ann", "ls", "annot", "ins"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tACGT acgt = new ACGT(s);\\n\t\tint ans = acgt.calcACGT();\\n\t\tSystem.out.println(ans);\\n\t}\\n\t\\n}\\n\\nclass ACGT {\\n\tString s;\\n\tpublic ACGT(String s) {\\n\t\tthis.s = s;\\n\t}\\n\tint calcACGT() {\\n\t\tint length = 0;\\n\t\tint longest = 0;\\n\t\tfor (int i = 0; i < s.length(); i++) {\\n\t\t\tif (isACGT(s.charAt(i))) {\\n\t\t\t\tlength++;\\n\t\t\t} else {\\n\t\t\t\tlongest = Math.max(length, longest);\\n\t\t\t\tlength = 0;\\n\t\t\t}\\n\t\t}\\n\t\treturn Math.max(length, longest);\\n\t}\\n\tboolean isACGT(char c) {\\n\t\tswitch (c) {\\n\t\tcase 'A':\\n\t\tcase 'C':\\n\t\tcase 'G':\\n\t\tcase 'T':\\n\t\t\treturn true;\\n\t\t}\\n\t\treturn false;\\n\t}\\n}\\n", "target": "100", "substitutes": {"sc": ["enc", "ch", " Sc", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "ss", "uc", "cr", "esc", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sec", "sh", "desc", "ctx", "sp", "dc", "acc", "rc", "anc", "cs", "cl", "pc", "ner", "sl", "ci", "asc", "mc", "sci"], "s": ["lines", "gs", "fs", "sys", "sg", "a", "ings", "str", "ns", "styles", "sf", "in", "d", "services", "ss", "server", "sets", "v", "sq", "is", "m", "south", "name", "r", "parts", "settings", "y", "os", "xs", "abs", "t", "strings", "es", "states", "ds", "e", "ses", "n", "p", "f", "ssl", "ments", "string", "bis", "ws", "bs", "as", "o", "b", "sb", "S", "l", "si", "types", "tests", "g", "u", "ing", "ls", "sv", "source", "ins"], "acgt": ["ocgt", "ACgt", "accgt", "ocgent", "ACgent", "ocnt", "accGT", "ACnt", "accnt", "ACGT", "iclt", "acclt", "accgent", "acGT", "icnt", "acgent", "AClt", "acnt", "aclt", "icgt", "icGT", "ocGT"], "ans": [" scans", "can", "anas", "man", "An", "ats", "cons", "leans", "lan", "ons", "aning", "AN", "aux", "aid", "aus", "atan", "asin", "amps", "an", "asts", "rans", "anan", "ras", "ros", "ars", "ases", "ana", "aned", "cas", "annels", "anon", "ents", "rors", "ks", "anc", "ANS", "les", "as", "na", "ays", "ran", "ants", "nan", "ann", "ant", "annot"], "length": ["id", "slice", "distance", "path", "base", "left", "right", "height", "len", "vector", "part", "build", "angle", "cross", "limit", "count", "child", "type", "character", "level", "ength", "start", "split", "live", "position", "style", "url", "point", "shape", "pull", "depth", "value", "Length", "index", "padding", "roll", "fall", "number", "integer", "duration", "end", "partial", "max", "string", "width", "full", "range", "yet", "sequence", "code", "l", "ll", "component", "weight", "text", "maximum", "letter", "load", "cost", "est", "size", "zip", "total"], "longest": ["longess", "greatess", "shortested", "greater", "longested", "shorter", " longess", "Longested", "Longiest", "Longest", "longength", "Longength", "largeest", "greatested", " longests", "longer", "longiest", "bigiest", "largeested", "lenest", "shortess", "greatests", " longer", " longester", " longested", "longests", "bigested", "largegest", "leniest", "Longgest", "shortest", "longgest", "greatest", "lenested", "Longests", " longength", "Longester", " longiest", "lenester", "longester", "biggest", "bigest", "largeiest", "greatength"], "i": ["id", "slice", "inner", "j", "ri", "pi", "mu", "I", "ip", "ii", "z", "v", "abi", "ix", "m", "gi", "index", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "multi", "o", "eni", "di", "ini", "oi", "l", "si", "bi", "hi", "info", "zi", "x", "ci", "ti", "u", "uri", "fi", "ai", "b"], "c": ["ch", "lc", "h", "a", "ct", "d", "fc", "z", "v", "character", "cr", "m", "ac", "r", "word", "ec", "ce", "t", "cc", "k", "e", "cy", "p", "xc", "f", "dc", "char", "C", "ic", "w", "code", "l", "ci", "g", "u", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n    \tScanner sn = new Scanner(System.in);\\n        Long a = sn.nextLong();\\n      \tLong b = sn.nextLong();\\n      \tLong c = sn.nextLong();\\n      \tLong d = sn.nextLong();\\n        Long max1 = (Long) a * c; \\n      \tLong max2 = (Long) a * d;\\n      \tLong max3 = (Long) b * c;\\n      \tLong max4 = (Long) b * d;\\n      \tLong max11 = Math.max(max1, max2);\\n      \tLong max22 = Math.max(max3, max4);\\n      \tSystem.out.println(Math.max(max11, max22));\\n    }\\n}\\n", "target": "244", "substitutes": {"sn": ["sw", "nn", "syn", "conn", "su", "st", "ns", "sk", "util", "se", "sf", "shell", "cli", "sm", "nl", "kn", "sq", "an", "sync", "r", "ln", "ski", "Sn", "oss", "cn", "n", " Sn", "ctx", "ssl", "pn", "bis", "inn", "na", "coll", "SN", "eni", "s", "sb", "i", "fn", "sol", "l", "si", "sam", "ner", "sl", "nw", "ann", "sv", "sci"], "a": ["ba", "ab", "oa", "aaa", "aa", "sa", "am", "bb", "count", "an", "area", "m", "ac", "r", "A", "ga", "ad", "ea", "p", "n", "alpha", "f", "aj", "ar", "na", "ca", "as", "s", "i", "l", "da", "au", "ae", "u", "all", "ai"], "b": ["j", "ib", "ab", "ba", "cb", "h", "bc", "aa", "bb", "bf", "v", "m", "r", "y", "db", "A", "B", "k", "ad", "e", "p", "n", "f", "eb", "sb", "i", "s", "l", "x", "bd", "g", "u", "dy"], "c": ["cf", "lc", "h", "cb", "cd", "count", "z", "m", "ac", "r", "y", "ce", "t", "k", "ad", "e", "p", "n", "f", "dc", "q", "cm", "C", "ca", "D", "col", "w", "i", "cs", "l", "cl", "x", "ci", "u", "g", "cent"], "d": ["j", "nd", "h", "cd", "in", "dd", "fd", "z", "m", "r", "y", "db", "ld", "t", "dt", "ds", "ad", "e", "p", "n", "f", "dat", "q", "D", "w", "i", "l", "da", "x", "bd", "u", "g", "dy"], "max1": ["parseA", "min1", "ax1", "ax11", "min01", "Max1", "axA", "MaxA", "ax01", "maxOne", "parse1", "maxA", "axOne", "parse2", "min11", "MaxOne", " max01", "parseOne", "max01", "ax2", "Max2", "min2"], "max2": ["exp11", "exp2", "ax4", "Max4", "Max11", "ax1", "exp4", "MAX2", "axB", "MAX1", "Max1", " maxB", "MAXB", "exp1", "ax2", "maxB", "MAX4", "Max2"], "max3": ["maxThree", "ax03", "Max03", "ax4", "Max4", "ax1", "max23", "max03", "ax3", " max03", "Max1", "axThree", " max23", "Max23", " maxThree", "MaxThree", "Max3", "ax23"], "max4": ["parentfour", "ax4", "parent2", "Max4", "parent3", " maxFour", "ax3", "maxFour", "axFour", " maxfour", "MaxFour", "ax2", "parent4", "maxfour", "Max2", "Max3", "axfour"], "max11": ["parse10", " max31", "parse31", "Max11", "max10", "max23", "ax11", "Max10", "ax10", "ax01", "parse11", " max23", "Max23", "Max31", " max01", "max01", "max31", "parse23", " max10", "parse01"], "max22": ["rest22", "rank4", "parse4", "rest29", "max29", "rest15", "parse22", "rank221", "rank2", "parse221", "max12", "load29", "load12", "max15", "rank22", "max221", "parse2", "load22", " max12", " max29", " max221", "load15", "rest12", " max15"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tFastReader sc = new FastReader();\\n\t\tint n = sc.nextInt();\\n\t\tint[] lengths = new int[n];\\n\t\tint maxLengths = 0;\\n\t\tint sumLengths = 0;\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint length = sc.nextInt();\\n\t\t\tmaxLengths = Math.max(maxLengths, length);\\n\t\t\tsumLengths += length;\\n\t\t}\\n\t\t\\n\t\tif ((sumLengths - maxLengths) > maxLengths) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n\t\\n\tstatic class FastReader { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() { \\n            br = new BufferedReader(new InputStreamReader(System.in)); \\n        } \\n  \\n        String next() { \\n            while (st == null || !st.hasMoreElements()) { \\n                try { \\n                    st = new StringTokenizer(br.readLine()); \\n                } catch (IOException  e) { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() { \\n            String str = \"\"; \\n            try{ \\n                str = br.readLine(); \\n            } catch (IOException e) { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n}\\n", "target": "25", "substitutes": {"sc": ["sw", "cont", "sr", "ch", "lc", " Sc", "cer", "ct", "Sc", " SC", "bc", "scope", "SC", "sem", "com", "ss", "uc", "cr", "esc", "sq", "c", "osc", "ec", "nc", "cc", "sh", "cus", "desc", "sp", "src", "cle", "acc", "rc", "system", "anc", "ca", "cur", "cs", "cl", "pc", "RC", "ci", "asc", "mc", "sci"], "n": ["j", "h", "conn", "len", "sn", "ns", "d", "no", "count", "nl", "z", "v", "c", "m", "r", "y", "en", "network", "nc", "t", "ln", "nb", "k", "e", "number", "p", "f", "net", "max", "o", "s", "N", "l", "num", "x", "ni", "u", "size", "b"], "lengths": ["engths", "Lengthds", "lengthds", "Lengthn", "engthl", " lengthds", "Lengthl", "Lengths", " lengthl", " lengthn", "lengthn", "engthds", "engthn", "lengthl"], "maxLengths": ["maxLengthes", "maxLongl", "maxlengthn", "maxlengthes", " maxLengthes", "maxlengthments", "sumLengthits", "maxLongls", " maxLengthments", "maxLevells", " maxLengthls", "maxLongabs", "maxLongments", "maxLenments", "sumLengthabs", "sumLenits", "maxLenits", " maxlengths", "maxlengths", " maxLongits", "maxlengthls", "maxLens", "maxLenabs", "maxPaths", "sumLengthes", "maxLenl", "maxLengthds", " maxLengthn", "maxPathabs", " maxLengthabs", "maxLengthabs", "maxLongs", "maxLevelds", " maxlengthments", "maxLenn", "maxLevelments", "maxLengthls", "maxPathes", " maxlengthabs", "maxLonges", " maxLengthds", " maxLengthl", " maxLongments", "maxLongits", "maxLevels", " maxLongls", " maxLengthits", " maxlengthn", " maxLongs", "maxLongds", "maxlengthits", "maxLengthits", " maxLongl", " maxlengthes", "maxLengthn", "maxPathments", "sumLenabs", "maxLongn", "maxLengthl", "sumLenes", " maxLongds", "maxLengthments", "maxLenes", "sumLens", "maxlengthds", "maxlengthabs"], "sumLengths": ["sumLits", "sumlengthes", "maxLengthes", "sumLenn", "sumengthments", "sumLeni", "maxlengthes", "totalLengthines", "sumlengthits", "sumLengthits", "sumengthes", "sumLongines", "sumLengthabs", "sumLengthn", "maxlengths", "sumLabs", "totalLengths", "sumLengthes", "SumLeni", "sumPathits", "SumLenn", "SumLengthn", "sumengths", "totalLongs", "maxLengthabs", "totalLengthments", "sumLengthines", "sumLs", "sumlengthabs", "totalLongines", "SumLengths", "sumLongments", "sumLengthments", "sumLengthi", "maxlengthits", "maxLengthits", "sumPaths", "totalLongments", "sumengthines", "SumLenes", "sumPathabs", "sumPathes", "totalLengthes", "sumlengthines", "sumLongs", "sumLes", "sumLonges", "sumLenes", "SumLens", "sumlengths", "sumLongn", "sumlengthn", "sumlengthi", "sumLongi", "totalLonges", "SumLengthi", "SumLengthes", "sumLens", "sumlengthments", "maxlengthabs"], "i": ["id", "j", "api", "ri", "h", "line", "pi", "I", "in", "d", "ii", "ip", "count", "v", "io", "c", "start", "m", "gi", "index", "k", "uli", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "multi", "o", "di", "ini", "oi", "ie", "l", "si", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "b"], "length": ["id", "slice", "distance", "j", "layer", "line", "len", "build", "angle", "limit", "count", "last", "type", "character", "level", "ength", "url", "position", "iter", "word", "point", "shape", "Length", "core", "available", "number", "p", "f", "duration", "partial", "string", "row", "li", "width", "ph", "full", "th", "gap", "l", "weight", "block", "cost", "size", "zip", "total", "work"], "br": ["sr", "ler", "ch", "yr", "ab", "form", "bro", "bc", "Br", "fore", "bb", "err", "bh", "oper", "ber", "BR", "cr", "r", "tr", "kr", "hr", "be", "ur", "p", "obj", "sp", "arr", "bar", "mr", "ctr", "ver", "src", "cro", "ocr", "bridge", "next", "browser", "cur", "pr", "sb", "ref", "bt", "ST", "rest", "lr", "fr", "sts", "brush", "pl", "sl", "dr", "bl", "rt", "rb", "b"], "st": ["sr", "ast", "nd", "sth", "inst", "ct", "ft", "sn", "se", "ust", "ut", "ss", " est", "std", "pe", "cr", "r", "pt", "sta", "ld", "STR", "t", "stri", "fe", "ste", "nt", "e", "be", "p", "sp", "src", "string", "ost", "contract", "stack", "pr", "sb", "ST", "rest", "bt", "rd", "l", "sts", "fr", "cl", "sl", "sv", "dr", "struct", "bl", "ist", "est", "rt", "b", "St"], "str": ["enc", "j", "Str", "doc", "h", "line", "err", "z", "v", "style", "c", "r", "pt", "STR", "tr", "t", "strings", "stri", "data", "e", "p", "sp", "f", "arr", "string", "char", "dict", "pr", "s", "div", "code", "fr", "l", "text", "sl", "print", "x", "dr", "struct", "bl", "name"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = Integer.parseInt(scanner.nextLine());\\n\\n        int tPrev = 0;\\n        int xPrev = 0;\\n        int yPrev = 0;\\n        for (int i = 0; i < n; i++) {\\n            String[] txy = scanner.nextLine().split(\" \", 3);\\n            int t = Integer.parseInt(txy[0]);\\n            int x = Integer.parseInt(txy[1]);\\n            int y = Integer.parseInt(txy[2]);\\n\\n            int tDiff = t - tPrev;\\n            int xDiff = Math.abs(x - xPrev);\\n            int yDiff = Math.abs(y - yPrev);\\n\\n            int remainingTime = tDiff - xDiff - yDiff;\\n            if (remainingTime < 0 || remainingTime % 2 != 0) {\\n                System.out.println(\"No\");\\n                return;\\n            }\\n\\n            tPrev = t;\\n            xPrev = x;\\n            yPrev = y;\\n        }\\n        System.out.println(\"Yes\");\\n    }\\n}\\n", "target": "221", "substitutes": {"scanner": ["annter", " Scanner", "scaner", "nerer", "Scanner", "annner", " Scanener", "scanener", "nerker", "Scanener", "serer", "canter", " Scaner", "caner", "serner", "annker", "Scaner", "serter", "Scanker", "nerner", "Scanter", "scanker", "anner", "canker", " scanener", "canner", " Scanter", "nerter", "scanter", "serker", " scaner", " scanter"], "n": ["j", "nn", "h", "sn", "ns", "d", "count", "z", "v", "c", "m", "en", "network", "nc", "nb", "k", "e", "number", "p", "f", "net", "q", "o", "w", "s", "N", "l", "num", "u", "b"], "tPrev": ["pprev", "xprev", "yPrevious", "tLast", "yprev", "tprev", "Tprev", "yNext", "xLast", "pNext", "TPrev", "tPrevious", "tNext", "yLast", "TNext", "pPrev", "TPrevious", "TLast", "xPrevious", "pPrevious"], "xPrev": ["pprev", "fPrev", "xprev", "yPrevious", "yprev", "xyprev", "pOrig", "xyDiff", "xyPrevious", "yFirst", " xPrevious", "XOrig", "yOrig", "xOrig", "XFirst", "XPrevious", "fDiff", " xFirst", "Xprev", "fprev", "XPrev", "xFirst", "fPrevious", "pPrev", "xPrevious", "xyPrev", "pPrevious"], "yPrev": ["xprev", "zPrev", "yPrevious", "xNext", "yprev", "zOriginal", " yprev", "tprev", "zprev", "yNext", "iNext", "yOriginal", "zPrevious", "tRev", "yRev", "YPrev", "tPrevious", "zRev", "iPrev", "xOriginal", "xRev", "iPrevious", " yPrevious", " yOriginal", "iprev", "Yprev", "xPrevious", "YPrevious", "YNext"], "i": ["id", "slice", "inner", "j", "pi", "I", "mi", "ip", "ii", "z", "ori", "v", "c", "io", "m", "gi", "index", "phi", "e", "p", "qi", "ui", "xi", "li", "iu", "multi", "di", "ini", "oi", "yi", "chi", "si", "zi", "ci", "ni", "u", "fi", "ai", "ti"], "txy": ["itxy", " tplus", "pxb", "toxy", "tquad", " tquad", " tcoord", "Tpy", "txx", "Tcoord", " tfo", "intxy", "xxy", "xplus", "zquad", "tXY", "intcho", "intfo", "intoxy", " tcho", " toxy", " tpy", "itxxxxxxxx", "latcho", "zXY", "itplus", "zxy", "latoxy", "txxxxxxxx", "dquad", "xxxxxxxxx", "xpy", "tcoord", "Txb", " txb", "dxx", "dxy", "Txy", "ppy", "latfo", " txxxxxxxx", "zxx", " txx", "itpy", "txb", "tplus", "dXY", " tXY", "pcoord", "tpy", "latxy", "tcho", "pxy", "tfo"], "t": ["j", "h", "a", "tp", "d", "the", "type", "z", "v", "at", "c", "ta", "m", "out", "qt", "T", "tt", "dt", "e", "ty", "p", "f", "te", "ot", "test", "w", "s", "l", "time", "tz", "u", "g", "b", "ts"], "x": ["id", "px", "h", "yx", "xx", "rx", "in", "d", "xy", "z", "v", "ix", "c", "en", "tx", "xs", "index", "data", "k", "e", "p", "ex", "on", "f", "xi", "o", "w", "ax", "s", "lat", "l", "dx", "X", "time", "u", "b"], "y": ["py", "j", "yt", "h", "d", "xy", "ry", "z", "v", "ny", "c", "m", "yy", "ay", "Y", "cy", "ty", "p", "oy", "f", "q", "o", "vy", "w", "ey", "sky", "yi", "ya", "l", "time", "u", "dy", "ye", "b", "sy"], "tDiff": [" tdiff", " tiff", "yDifferent", "yDelta", "tDelta", "zShift", "Tiff", "zDelta", "zDiff", "xHalf", "tShift", " tDelta", " tHalf", "tDifferent", "tiff", "zDifferent", " tDifferent", "yShift", "TDiff", "xiff", "tHalf", "Tdiff", "xdiff", "tdiff", " tShift", "THalf"], "xDiff": ["XSame", "Xdiff", "XDir", "yDelta", " xDef", "xHalf", "XDelta", " xDelta", " xdiff", "xSame", "yDir", "xDelta", "XDef", " xDir", " xSame", "yHalf", " xHalf", "xDir", "XDiff", "ydiff", "yDef", "ySame", "xdiff", "xDef", "XHalf"], "yDiff": ["iChanged", "syDelta", " yDelta", "xChanged", "yDelta", "YChanged", "syLess", "syDev", "syDiff", "YDiff", "idiff", "Ydiff", "xDev", "xDelta", "YDelta", "xLess", "yChanged", "yLess", "ydiff", "xdiff", "iDiff", " yDev", "yDev", " yLess", "iDelta"], "remainingTime": ["RemainingClock", "remainingtime", "RemainTimes", "RemainingCount", "remainingY", "RemangingTime", "RemainingTime", "RemainingLength", "remangingLength", "removingtime", "remieldingtime", "remieldingY", "RemainCount", "remangingTime", "remangingY", "Remainingtime", "RemainingTimes", "remainedTime", "remainTimes", "Remaintime", "Remangingtime", "remainedTimes", "RemainingY", "remangingClock", "remangingtime", "RemainTime", "remieldingTime", "remainClock", "removingCount", "remainingCount", "remainedtime", "remangingTimes", "remainingLength", "remainingTimes", "remieldingTimes", "RemangingClock", "RemangingLength", "remainedY", "RemangingY", "removingTimes", "removingTime", "remainTime", "remaintime", "remainCount", "remainLength", "remainedLength", "remangingCount", "RemangingTimes", "remainedClock", "remainingClock"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String arg[]) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint C = sc.nextInt();\\n\t\tint D = sc.nextInt();\t\\n\t\tsc.close();\\n\t\t\\n\t\tSystem.out.println(subAbs(A, B, C, D));\\n\t}\\n\t\\n\tpublic static int subAbs(int A, int B, int C, int D){\\n\t\tint sub = Math.min(B, D) - Math.max(A, C);\\n\t\tif( sub > 0) {\\n\t\t\treturn sub;\\n\t\t}else {\\n\t\t\treturn 0;\\n\t\t}\\n\t}\\n}", "target": "47", "substitutes": {"arg": ["object", "Str", "Arg", "file", "param", "str", "Args", "method", "v", "name", "word", "gi", "value", "argument", "char", "string", "class", "i", "val", " argument", "self", "pattern", "V", "I", "entry"], "sc": ["sw", "sr", "cont", "ch", "can", "console", "lc", "soc", "cb", "cer", "str", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "cli", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "search", "nc", "sch", "cc", "sh", "cor", "cus", "core", "ctx", "sp", "ser", "src", "rc", "sche", "ca", "ws", "cm", "coll", "class", "sb", "cs", "cl", "pc", "parse", "ner", "sl", "ci", "asc", "cv", "mc", "sv", "co", "sci"], "A": ["Am", "As", "AR", "a", "F", "MA", "AB", "Area", "Ab", "AD", "AP", "AS", "AA", "IA", "Ma", "T", "Alpha", "Ac", "Y", "mA", "BB", "Na", "Array", "L", "AM", "API", "BA", "K", "CA", "Ar", "AW", "Ang", "At", "M", "HA", "Az", "AH", "U", "S", "Java", "Ca", "LA", "AF", "P", "Average", "AU", "I", "AC"], "B": ["BI", "F", "E", "LB", "DB", "CB", "AB", "Part", "Ab", "File", "Bi", "H", "UB", "T", "Bs", "Bu", "Y", "BB", "R", "L", "WB", "BA", "W", "BC", "O", "GB", "b", "M", "U", "S", "N", "OB", "X", "V", "BE", "P", "BD", "I", "G"], "C": ["Cs", "F", "E", "Sc", "SC", "CD", "CB", "CU", "Con", "c", "H", "Count", "T", "Y", "CE", "Col", "R", "L", "CM", "K", "W", "CR", "BC", "O", "CA", "CP", "M", "CC", "U", "S", "Cr", "N", "X", "V", "P", "DC", "I", "G", "AC"], "D": ["Q", "DA", "DM", "Di", "DD", "F", "Dou", "Ds", "E", "JD", "d", "DB", "CD", "Dist", "Part", "AD", "DH", "H", "DP", "Do", "T", "Diff", "Y", "Dir", "R", "Def", "L", "Dim", "W", "O", "M", " d", "U", "S", "Z", "N", "V", "X", "P", "DF", "DC", "BD", "DS", "I", "G"], "sub": ["id", "small", "mid", "change", "error", "loc", "ab", "bad", "SU", "section", "length", "Sub", "offset", "ai", "job", "bc", "lab", "sing", "summary", "uc", "count", "child", "type", "sq", "ub", "is", "abs", "start", "sim", "r", "UB", "search", "min", "core", "rub", "desc", "number", "add", "end", "rc", "next", "seq", "i", "div", "val", "sum", "sup", "hide", "diff", "size", "um", "b"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nclass Main {\\n\tpublic static void main(String[] args) throws IOException {\\n \\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringBuffer sb = new StringBuffer();\\n \\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\\n        char[] mojiList = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\\n        \\n        for(char key : mojiList) {\\n           map.put(key, 0);\\n        }\\n        \\n        String input;\\n        \\n        while((input = br.readLine()) != null) {\\n            char[] strList = input.toLowerCase().toCharArray();\\n            for(char moji : strList) {\\n                if(map.containsKey(moji)) {\\n                    map.put(moji, map.get(moji) + 1);\\n                }\\n            }\\n        }\\n \\n        for(char moji : mojiList) {\\n            System.out.println(moji + \" : \" + map.get(moji));\\n        }\\n    }\\n}", "target": "242", "substitutes": {"br": ["ler", "Buffer", "sr", "ch", "Stream", "yr", "body", "str", "bro", "Br", "BR", "cr", "io", "er", "Reader", "r", "out", "gr", "tr", "img", "data", "hr", "p", "obj", "sp", "arr", "shr", "mr", "bar", "ctr", "result", "ocr", "string", "browser", "wr", "pr", "buf", "lr", "fr", "reader", "dr", "bl", "stream", "rb", "buffer", "b", "res"], "sb": ["sc", " bio", "sg", "su", "st", "bc", "sf", "bb", " scr", " kb", "gb", " sm", "SB", " ss", "db", "B", "nb", "sp", "src", "result", "tmp", "buf", " SB", "text", "output", "rb", "buffer", "b", "source"], "map": ["hash", "change", "where", "open", "app", "address", "place", "file", "model", "move", "build", "create", "scope", "pose", "array", "table", "group", "master", "MAP", "type", "down", "pair", "m", "match", "maps", "apper", "shape", "min", "pack", "data", "index", "save", "pre", "batch", "age", "lock", "cache", "max", "cap", "ge", "module", "dict", "ap", "pad", "use", "up", "comb", "code", "replace", "set", "parse", "block", "meta", "copy", "list", "get", "state", "config", "work"], "mojiList": ["moziSt", "mojiString", "mojaSt", "mojaStr", "ojiArray", "oobiArray", "mojiL", "ojiStr", "noojiString", "noojiList", "oobiList", "moojiStr", "ojiList", "mojaCont", "mojiArray", "ojiL", "nojiL", "pojiL", "moojiList", "moobiCont", "moojiSt", "pojaCont", "mojaArray", "pojaL", "moziList", "pojaCode", "moziString", "nojiList", "mojaString", "moojiString", "pojiList", "mojiCode", "moobiStr", "moobiL", "moojiCont", "mojaCode", "moojiL", "pojiCode", "moojiCode", "nojiString", "oobiL", "oobiStr", "mojiStr", "pojaList", "moziL", "noojiSt", "mojaList", "moojiArray", "pojiCont", "moobiArray", "moobiList", "nojiSt", "mojiCont", "mojiSt", "moobiCode", "noojiL", "mojaL"], "key": ["id", "path", "base", "str", "keys", "rule", "ry", "child", "box", "type", "prefix", "start", "match", "word", "KEY", "value", "pid", "index", "data", "k", "nice", "entry", "win", "Key", "char", "string", "row", "feed", "connection", "ie", "field", "code", "val", "text", "x", "block", "select", "link", "list", "source", "name"], "input": ["enc", "path", "again", "address", "form", "buffer", "media", "str", "comment", "audio", "in", "empty", "inc", "ip", "child", "type", "area", "inside", "plus", "element", "Input", "search", "out", "read", "json", "request", "pull", "value", "data", "xml", "alpha", "accept", "result", "include", "string", "but", "next", "inf", "feed", "image", "radio", "work", "parent", "keep", "pattern", "text", "initial", "qa", "hello", "stream", "output", "null", "background", "reader", "list", "source", "enter"], "strList": [" strEx", "striArray", "strArray", "strSt", "brList", "StrList", "brArray", " strSt", "brlist", "Strlist", "striName", " strArray", "stringList", "strName", "strlist", "stringSt", "strilist", "StrSt", "striList", "stringEx", " strlist", "brName", "stringlist", "strEx", "StrEx", " strName"], "moji": ["mojo", "moobi", "foji", "groiji", " mooji", "labja", "labji", "mozilla", " moobi", "moissa", "foiji", "boobi", "pojo", " moja", "loissa", "bojo", "poja", "koobi", "boji", "fooji", "bozilla", "poissa", "gooji", "moja", "pooji", "mooji", "goja", "groji", "goissa", "grooji", "poiji", "looji", "booji", "boja", "goji", "foja", "loji", "koji", "koja", "labiji", "groja", "koiji", "pozilla", "kooji", "laboji", "poobi", " mozilla", "lojo", "moiji", "loja", "poji"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String args[]){\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint k = sc.nextInt();\\n\t\tint x = sc.nextInt();\\n\\n\t\tStringBuffer sb = new StringBuffer();\\n\t\tfor(int i = (x - k + 1);i <= (x + k - 1); i++) {\\n\t\t\tsb.append(i).append(\" \");\\n\t\t}\\n\t\tsb.setLength(sb.length()-1);\\n\\n\t\tSystem.out.println(sb.toString());\\n\t}\\n}\\n", "target": "207", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "sf", "SC", "scope", "sem", " scr", "com", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "sec", "sp", "ser", "src", "acc", "rc", "sche", "ca", "cur", "cs", "cl", "pc", "ner", "ci", "asc", "sci"], "k": ["j", "ch", "sk", "kick", "in", "d", "dk", "z", "v", "c", "m", "ok", "y", "key", "e", "p", "n", "f", "ks", "K", "q", "end", "max", "o", "w", "s", "kid", "l", "mk", "unk", "u", "b", "work"], "x": ["id", "j", "h", "xx", "ux", "fx", "in", "d", "z", "v", "ix", "c", "is", "m", "y", "tx", "xs", "t", "index", "e", "p", "n", "pos", "f", "ex", "q", "max", "w", "ax", "l", "sex", "X", "u", "b"], "sb": ["wb", "obb", "sth", "ib", "lp", "cb", "bg", "zb", "sg", "ab", "sk", "abb", "rob", "lab", "bc", "sf", "xb", "sa", "bb", "bh", "bj", "ss", "pb", "bsp", "bf", "usb", "gb", "ob", "SB", "stab", "db", "nb", "BB", "bps", "sp", "mb", "bp", "eb", "kb", "src", "bis", "ws", "bs", "b", "buff", "lb", "bt", "bm", "buf", "si", "fb", " SB", "bd", "sl", "ls", "rb", "buffer", "sv"], "i": ["id", "j", "ri", "pi", "init", "ip", "ii", "z", "ix", "io", "start", "y", "gi", "index", "phi", "e", "p", "pos", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "o", "b", "di", "ini", "oi", "chi", "l", "si", "bi", "hi", "info", "zi", "ci", "u", "ti", "uri", "fi", "ai", "I"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        System.out.println(n == 1 ? 0 : 1);\\n    }\\n}\\n", "target": "148", "substitutes": {"sc": ["sw", "enc", "lc", "soc", " Sc", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "spec", "ec", "sub", "nc", "cc", "sec", "desc", "sp", "src", "acc", "ocr", "rc", "ca", "na", "s", "cs", "cl", "pc", "ner", "ci", "asc", "sci"], "n": ["j", "nn", "nav", "h", "conn", "len", "sn", "ns", "d", "node", "count", "z", "c", "m", "nc", "t", "nb", "index", "ng", "k", "nt", "ne", "number", "p", "pos", "e", "net", "span", "na", "o", "s", "i", "N", "num", "l", "ni", "g", " N", "b", "name"]}}
{"code": "import java.io.*;\\nclass Main{\\n    public static void main(String[] args) throws NumberFormatException,IOException{\\n        BufferedReader r =\\n         new BufferedReader(new InputStreamReader(System.in), 1);\\n         \\n        String line = r.readLine();    \\n        String[] w = line.split(\" \",0); \\n        int a=Integer.parseInt(w[0]);\\n        int b=Integer.parseInt(w[1]);\\n        int c=Integer.parseInt(w[2]);\\n        System.out.println(a<b&&b<c?\"Yes\":\"No\");\\n        r.close();\\n    }\\n}", "target": "168", "substitutes": {"r": ["sr", "rx", "rs", "in", "err", "ir", "cr", "er", "rb", "Reader", "m", "iter", "tr", "t", "rr", "re", "nr", "hr", "e", "p", "R", "mr", "f", "rl", "result", "br", "rc", "rw", "rh", "as", "i", "lr", "fr", "l", "dr", "parser", "u", "rt", "g", "ar", "reader", "writer", "res", "rg"], "line": ["lines", "strip", "le", "file", "str", "page", "in", "Line", "shell", "nl", "v", "plus", "response", "word", "out", "input", "value", "data", "e", "p", "n", "f", "cell", "end", "LINE", "string", "row", "pass", "s", "i", "code", "l", "cl", "text", "sl", "block", "lin", "reader", "inline", "entry"], "w": ["fw", "sw", "tw", "aw", "wx", "h", "wl", "wal", "wh", "iw", "d", "hw", "z", "v", "now", "way", "m", "plus", "word", "y", "t", "value", "wp", "won", "k", "e", "ew", "p", "n", "ex", "f", "wave", "q", "W", "wa", "rw", "ws", "ow", "we", "s", "i", "kw", "l", "wt", "words", "text", "x", "g", "u", "work"], "a": ["ba", "ab", "oa", "fa", "aaa", "aa", "sa", "d", "an", "area", "ac", "A", "ad", "e", "p", "n", "alpha", "f", "ea", "pa", "aj", "va", "as", "s", "i", "ama", "asa", "l", "da", "au", "x", "ae", "af", "u", "sta"], "b": ["obb", "wb", "ba", "h", "ab", "cb", "ib", "abb", "xb", "aa", "bc", "d", "bb", "bf", "gb", "v", "ub", "ob", "y", "db", "B", "nb", "e", "be", "p", "n", "mb", "f", "obj", "bu", "eb", "bs", "o", "sb", "i", "lb", "l", "bi", "fb", "x", "bd", "rb"], "c": ["cu", "cf", "lc", "h", "d", "fc", "z", "v", "cr", "ac", "y", "ec", "cc", "k", "ad", "e", "cy", "p", "n", "xc", "f", "q", "C", "ca", "o", "i", "cs", "l", "pc", "x", "ci", "u", "g"]}}
{"code": "import java.util.*;\\n\\nimport static java.lang.Math.round;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int l = sc.nextInt();\\n        int r = sc.nextInt();\\n        int modl =   l% 2019;\\n        int modr = r%2019;\\n        long ans =2018;\\n\\n        if(modr<= r-l){\\n            System.out.println(0);\\n        }else{\\n            for(int p=modl; p < modr; p++){\\n                for(int q=p+1; q <= modr; q++){\\n                    ans = Math.min(ans, (p*q)%2019);\\n\\n                }\\n            }\\n            System.out.println(ans);\\n\\n        }\\n\\n\\n\\n\\n\\n\\n        }\\n    }", "target": "193", "substitutes": {"sc": ["sw", "enc", "ch", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "nc", "sch", "cc", "cus", "ctx", "sp", "ser", "src", "ocr", "rc", "system", "sche", "ca", "cur", "cs", "pc", "exec", "ner", "ci", "asc", "mc", "sci"], "l": ["j", "lc", "h", "lu", "lp", "len", "kl", "d", "nl", "z", "v", "c", "m", "ol", "t", "ln", "dl", "k", "n", "L", "f", "rl", "ar", "la", "li", "o", "w", "i", "lb", "el", "lr", "pl", "sl", "u", "lin", "ls", "ll", "fl", "b"], "r": ["sr", "j", "h", "a", "or", "rs", "d", "ir", "z", "er", "v", "c", "m", "rar", "rr", "re", "nr", "k", "e", "ur", "R", "n", "f", "rc", "rh", "o", "ra", "pr", "w", "i", "range", "lr", "fr", "ner", "x", "u", "rt", "ru", "g", "ar", "rb", "rf", "b"], "modl": ["macr", "modL", "intr", "macL", "Modl", "intL", "Modr", "macp", " modll", "mode", "intll", "modll", "Modll", "compl", "intl", "inte", "compr", " mode", "modp", "compL", "intp", "macl", "compp", "Mode"], "modr": ["modc", "modf", " modc", "minf", "compb", "intc", " modp", "indl", "minr", "modb", "intr", "inter", " modrt", "modrt", "minrt", "Modl", "modR", "Modr", " modf", "minp", "mode", "Moder", "moder", "Modc", " modb", "minb", "minl", "mine", "minR", "compl", "intl", "indrt", "indr", "compr", "modp", " mode", "indf", "mace", "macl", " modR", "compp", " moder", "macR", "macr"], "ans": [" scans", "aces", "vals", "ani", "anus", "ats", "oa", "cons", "errors", "len", "lan", "sk", "ons", "ns", "AN", "rs", "aus", "atan", "nas", "amps", "anges", "an", "ras", "anan", "ars", "scan", "ana", "os", "aned", "acs", "offs", "ds", "san", "ares", "ids", "ks", "span", "anc", "ANS", "na", "as", "gan", "ays", "cs", "ants", "eps", "nan", "ann", "ls", "annot", "ins"], "p": ["pp", "port", "j", "lp", "pu", "a", "po", "tp", "pi", "art", "part", "ip", "ps", "pe", "z", "v", "c", "m", "y", "pt", "point", "t", "pid", "pre", "k", "e", "pa", "n", "pos", "f", "bp", "it", "ap", "ph", "o", "pr", "i", "per", "pc", "patch", "qa", "P", "u", "cp", "jp", "b"], "q": ["id", "Q", "j", "ch", "h", "pu", "a", "query", "d", "ip", "iq", "z", "v", "sq", "c", "ac", "y", "point", "qt", "aq", "t", "sh", "qu", "qq", "qs", "k", "ad", "qi", "f", "age", "quant", "end", "ph", "o", "w", "i", "dq", "patch", "x", "qa", "P", "u", "g", "b"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n    public static void main(String[] args){\\n\tScanner inp = new Scanner(System.in);\\n\tint x = inp.nextInt();\\n\t\\n\tSystem.out.println( x/3600 + \":\" + x/60%60 + \":\" + x%60);\\n    }\\n}", "target": "84", "substitutes": {"inp": ["inch", " inpp", "incb", "Inf", "incp", " inb", " inproc", "INf", "inpp", "inpr", "Inh", "INp", "inb", "Inpp", "inproc", "incpr", "Inproc", " inf", " inh", "INpp", " inpr", "inf", "Inpr", "INproc", "inh", "Inb", "Inp"], "x": ["px", "wx", "h", "xx", "rx", "page", "fx", "d", "xy", "cross", "xt", "xxxxxxxx", "xxx", "z", "ix", "v", "c", "m", "y", "point", "tx", "xs", "t", "event", "index", "e", "number", "pos", "ex", "xc", "p", "max", "xp", "xi", "width", "w", "ax", "i", "code", "sex", "num", "xe", "dx", "exp", "lex", "X", "time", "patch", "ext", "hex", "xa", "step", "xes", "XX", "name", "work"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main\\n{\\n\tpublic static void main(String[] args)\\n\t{\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\twhile (true)\\n\t\t{\\n\t\t\tint n = sc.nextInt();\\n\t\t\tif (n == 0)\\n\t\t\t{\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tint[] scores = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t{\\n\t\t\t\tscores[i] = sc.nextInt();\\n\t\t\t}\\n\\n\t\t\tdouble sd = getStandardDeviation(scores);\\n\\n\t\t\tSystem.out.println(sd);\\n\t\t}\\n\t}\\n\\n\tstatic double getStandardDeviation(int[] data)\\n\t{\\n\t\tint sum = 0;\\n\t\tfor (int d :\\n\t\t\t\tdata)\\n\t\t{\\n\t\t\tsum += d;\\n\t\t}\\n\\n\t\tdouble ave = (double) sum / data.length;\\n\\n\t\tdouble sumSquareDeviation = 0.0;\\n\t\tfor (int d :\\n\t\t\t\tdata)\\n\t\t{\\n\t\t\tsumSquareDeviation += Math.pow(d - ave, 2);\\n\t\t}\\n\\n\t\tdouble variance = sumSquareDeviation / data.length;\\n\\n\t\tdouble standardDeviation = Math.sqrt(variance);\\n\\n\t\treturn standardDeviation;\\n\t}\\n}\\n\\n", "target": "203", "substitutes": {"sc": ["sr", "ch", " Sc", "cer", "st", "sk", "Sc", " SC", "squ", "bc", "se", "SC", "sf", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "nc", "sch", "cc", "sh", "sec", "cus", "core", "sp", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "si", "cl", "pc", "sl", "ci", "asc", "sci"], "n": ["j", "nd", "nn", "conn", "nor", "len", "sn", "ns", "nu", "no", "count", "nl", "z", "v", "c", "m", "sync", "r", "en", "y", "network", "nit", "nc", "t", "ln", "nb", "nr", "ng", "k", "nt", "ne", "number", "p", "dn", "e", "f", "net", "o", "w", "s", "fn", "N", "num", "l", "x", "don", "u", "ni", "b"], "scores": ["scopes", "contractourses", "sars", "scars", "accourses", "scales", "scards", "oscanners", "cales", "oscors", "scourses", "chore", "clors", "cores", "contractodes", "clores", "oscores", " scales", "copes", "scanners", "chores", "core", "oscars", "contractards", "escourses", "sores", "chales", "sanners", "accodes", "clars", "sors", "accards", " scopes", "escores", "score", "clanners", " score", "scodes", "escards", "escodes", "scors", "accores", "contractores", "chopes"], "i": ["id", "slice", "j", "ri", "pi", "in", "mi", "init", "ip", "ii", "ind", "z", "v", "ix", "c", "io", "abi", "r", "y", "gi", "index", "key", "e", "p", "f", "qi", "ui", "xi", "li", "iu", "it", "o", "b", "di", "ini", "eni", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "I"], "sd": ["vd", "nd", "su", "des", "ed", "dm", "sf", "dk", "dd", " td", "ss", "hd", "md", "fd", "std", " dd", "SD", "db", "ld", "td", "hed", "dist", "sh", "dl", "ds", "ded", "gd", "df", "di", "sb", "tan", "s", "si", "bd", "sl", "fee", "sv", "pd"], "data": ["id", "slice", "base", "error", "body", "model", "a", "length", "media", "database", "function", "step", "memory", "part", "device", "dd", "grade", "array", "DATA", "draw", "split", "area", "dist", "input", "size", "value", "index", "ad", "dim", "devices", "p", "key", "alpha", "missing", "dat", "result", "la", "window", "average", "image", "view", "da", "info", "weight", "results", "video", "diff", "series", "done", "list", "scale", "sample", "config"], "sum": ["ash", "dev", "sa", "Sum", "ss", "summary", "count", "an", "m", "ac", "miss", "ay", "ul", "min", "fee", "mean", "index", "save", "ad", "dim", "add", "alpha", " average", "cal", "na", "av", "average", "pass", "sort", "s", "sign", "up", "use", "us", "si", "weight", "au", "sam", "diff", "u", "cost", "depth", "size", "um", "scale", "total"], "d": ["id", "j", "dad", "a", "dm", "cd", "dd", "md", "z", "c", "m", "db", "ld", "t", "dt", "ds", "k", "ad", "e", "dim", "p", "dn", "f", "df", "dc", "dat", "dec", "dra", "D", "w", "rd", "l", "dx", "da", "x", "dh", "diff", "u", "dy", "b", "name"], "ave": ["are", "air", "aw", "ve", "ale", "anne", "rade", "aa", "ady", "al", "am", "AA", "adr", "ac", "avi", "ay", "save", "ad", "alpha", "age", "aved", " average", "aves", "av", "adjust", "average", "ax", "aving", "ade", "aver", "da", "au", "aed", "ae", "af", "ai", "slave", "scale", "rate"], "sumSquareDeviation": ["sumSquareVotation", "sumSquareDevelopmentiation", "sumStandardDivotation", "sumSquareVision", "sumSquareDivision", "sumSquareDefization", "sumSquareViation", "sumStandardDevotation", "sumSquareDivization", "sumSquareDevotation", "sumSquareDiviation", "sumSquareDevelopmentiate", "sumStandardDevision", "sumStandardDivision", "sumSquaredevication", "sumSquareDeviance", "sumSquaredevian", "sumSquaredeviance", "sumSquaredeviate", "sumStandardDevication", "sumSquareDevelopmentication", "sumSquareDiviance", "sumSquareVication", "sumSquareDivication", "sumStandardDeviation", "sumSquareDevian", "sumSquareDiviate", "sumStandardDivication", "sumSquareDevelopmentian", "sumStandardDiviation", "sumSquaredeviation", "sumSquaredevance", "sumSquareDivotation", "sumSquareDevization", "sumSquareDevision", "sumSquareDeviate", "sumSquareDefiance", "sumSquareDevance", "sumSquareDefiation", "sumSquareDivance", "sumSquareDefance", "sumSquareDevication", "sumSquaredevization", "sumSquareDivian"], "variance": ["gamant", "evant", "deviation", "sumance", "gamage", "gamiation", "variant", "sumage", "variation", "gamance", "evension", "evation", "Variance", "devage", "Variension", "Variant", "sumiation", "devant", "variension", "devance", "devation", "devension", "variiation", "Variation", "evance", "sumant", "variage"], "standardDeviation": ["StandardDivotation", "standardVarimation", "standardDevotation", "StandardDevication", "standardDevication", "standardVariiance", "StandardDevance", "standardDivication", "standardDeciation", "standardDeviance", "standardDevimation", "standardVariiation", "StandardDivication", "standardVariotation", "StandardDevotation", "standardVariication", "standardDiviation", "standardDecimation", "StandardDivance", "StandardDiviance", "StandardDeviation", "standardVariance", "standardVariation", "standardDevance", "StandardDeviance", "StandardDiviation", "standardDecance", "standardDivotation", "StandardDivimation", "StandardDevimation", "standardDivance", "standardDecication", "standardDecotation", "standardDivimation", "standardVarance", "standardDeciance", "standardDiviance"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\\n\tpublic static void main (String[] args) {\\n\t   InputReader in = new InputReader(System.in);\\n\t   int a = in.readInt();\\n\t   int b = in.readInt();\\n\t   if(a >= 13) System.out.println(b);\\n\t   else if(a >= 6)System.out.println(b/2);\\n\t   else System.out.println(0); \\n\t}\\n}\\n\\nclass InputReader {\\n\\n\tprivate InputStream stream;\\n\tprivate byte[] buf = new byte[1024];\\n\tprivate int curChar;\\n\tprivate int numChars;\\n\tprivate SpaceCharFilter filter;\\n\\n\tpublic InputReader(InputStream stream) {\\n\t\tthis.stream = stream;\\n\t}\\n\\n\tpublic int read() {\\n\t\tif (numChars == -1)\\n\t\t\tthrow new InputMismatchException();\\n\t\tif (curChar >= numChars) {\\n\t\t\tcurChar = 0;\\n\t\t\ttry {\\n\t\t\t\tnumChars = stream.read(buf);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tif (numChars <= 0)\\n\t\t\t\treturn -1;\\n\t\t}\\n\t\treturn buf[curChar++];\\n\t}\\n\\n\tpublic int readInt() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tint res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9')\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\\n\tpublic String readString() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tStringBuilder res = new StringBuilder();\\n\t\tdo {\\n\t\t\tres.appendCodePoint(c);\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res.toString();\\n\t}\\n\\n\tpublic long readLong() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c)) {\\n\t\t\tc = read();\\n\t\t}\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tlong res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9') {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\t\\n\tpublic boolean isSpaceChar(int c) {\\n\t\tif (filter != null)\\n\t\t\treturn filter.isSpaceChar(c);\\n\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n\t}\\n\\n\tpublic String next() {\\n\t\treturn readString();\\n\t}\\n\\n\tpublic interface SpaceCharFilter {\\n\t\tpublic boolean isSpaceChar(int ch);\\n\t}\\n}", "target": "249", "substitutes": {"in": ["path", "login", "again", "inner", "conn", "line", "bin", "resource", "d", "init", "din", "inc", "err", "user", "server", "client", "v", "is", "r", "this", "out", "con", "read", "input", "t", "min", "data", "e", "ex", "n", "win", "f", "IN", "rin", "inn", "inf", "as", "connection", "image", "In", "impl", "ini", "s", "i", "readable", "nin", "l", "log", "kin", "pin", "exec", "socket", "reader", "buffer", "source", "ins"], "a": ["ba", "h", "ab", "oa", "fa", "aa", "sa", "d", "aux", "array", "count", "z", "an", "area", "ac", "y", "A", "ga", "mA", "e", "p", "n", "alpha", "f", "pa", "aj", "la", "ca", "as", "va", "na", "s", "i", "l", "num", "au", "x", "qa", "af", "auto", "u"], "b": ["wb", "base", "ba", "h", "ab", "body", "buffer", "length", "aa", "d", "bb", "bf", "z", "v", "r", "y", "db", "B", "nb", "k", "e", "p", "n", "number", "f", "bound", "eb", "bot", "bs", "sb", "i", "s", "l", "num", "fb", "x", "bd", "rb", "bytes"], "stream": ["sw", "port", "path", "Stream", "object", "instance", "pool", "speed", "iterator", "file", "document", "body", "buffer", "form", "model", "resource", "forward", "user", "round", "engine", "server", "method", "client", "v", "transform", "plus", "host", "this", "out", "input", "through", "control", "data", "channel", "f", "context", "src", "track", "driver", "string", "row", "feed", "window", "stack", "trans", "w", "class", "per", "view", "self", "sl", "handler", "output", "raw", "loop", "reader", "ream", "socket", "source"], "buf": ["wb", "Buffer", "ab", "bag", "cb", "prop", "buffer", "orig", "vec", "bc", "conv", "bb", "bh", "pb", "uc", "fd", "bf", "box", "gb", "cmd", "mem", "db", "img", "Buff", "data", "func", "brace", "batch", "ctx", "queue", "map", "bu", "bp", "fab", "src", "arr", "br", "rc", "cap", "tmp", "seq", "blocks", "cur", "pad", "buff", "uf", "val", "ff", "fb", "bd", "cv", "rb", "bytes"], "curChar": ["curPos", "CurChar", "urCh", "urPos", "ctrByte", "CurCh", " curchar", "curVer", "curCor", "constCh", "CurCor", " curCharacter", "constCor", " curPos", "serChar", "CurPos", "curchar", "ctrChar", "serByte", "ctrVer", " curByte", "Curchar", "ctrCh", "curCh", "serVer", "constChar", "urchar", " curCor", "CurCharacter", "serCh", "constCharacter", " curVer", " curCh", "serchar", "CurByte", "curCharacter", "urChar", "curByte"], "numChars": ["numchashes", "curChards", "numChARS", " numChans", "numCarts", "numCats", "numCharts", "numCHarts", "numClashes", "curChars", "numColannels", "numChans", "numColarts", "curCharts", " numCHashes", "numQuARS", "numCHARS", " numchars", "numchapters", " numchARS", "numColapters", "curColARS", "numCans", "numCHans", "numClars", "numQuars", "numCannels", " numChapters", "numChannels", " numCans", " numChashes", "numCHards", "numQuannels", "numchars", " numCHards", "numchannels", "numQuans", "numchARS", " numchannels", "numClARS", "numCHannels", "curChARS", " numchapters", " numCHars", "curColarts", " numChARS", " numChards", "numCHashes", " numCHARS", " numCars", " numCannels", "curColards", "numcharts", "numCHapters", "numCHars", "numCHats", "numCars", "numChapters", "numChards", " numChannels", " numChats", "numChats", "numCARS", "numchards", "curColars", " numCharts", "numColars", "numClards", " numCARS", "numColARS", "numChashes", "numColards"], "filter": ["ler", "fil", "cb", "ters", "bc", "bb", "err", "sel", "ac", "fp", "Filter", "func", "chain", "reg", "p", "f", "map", " filters", "cache", "cher", "acl", "string", "fac", "pass", "col", " Filter", "cl", "handler"], "c": ["sc", "cu", "cf", "h", "count", "uc", "m", "r", "con", "cc", "vc", "unc", "dec", "col", "w", "i", "x", "ci", "lc", "cb", "ct", "d", "z", "esc", "tc", "e", "f", "dc", "char", "cur", "cs", "cl", "arc", "u", "cp", "cont", "conn", "abc", "ac", "y", "ce", "chain", "cy", "p", "n", "xc", "exc", "rc", "anc", "cm", "ic", "pc", "mc", "enc", "loc", "rec", "bc", "err", "fc", "cr", "v", "content", "ec", "nc", "t", "sec", "k", "cache", "q", "C", "ca", "coll", "code", "l", "oc", "g", "cent"], "sgn": ["sesgi", "csgen", "rsGN", "sng", "tsgn", "ssagn", "psGN", "sgin", "sGN", "sgi", " smn", "tsmn", "nsGN", " sGN", "ssgn", "psgn", "psgen", "Sgen", "csgn", " sgin", "rsgen", "ssgen", "csGN", "nsgn", "Sgn", "sesgen", " sagn", " sng", "sgen", " sgen", "SGN", "nsgin", "sesgn", "sesmn", "tsgen", "psgin", "psng", "nsng", "Smn", "Sagn", "rsgn", "smn", "tsgi", " sgi", "Sgin", "sagn", "csmn", "ssgin", "rsgin"], "res": ["vals", "ins", "values", "details", "right", "RE", "cons", "resolution", "str", "ons", "js", "ns", "rs", "rex", "err", "ps", "ress", "resh", "ras", "response", "is", "rus", "r", "ros", "out", "os", "gr", "es", "re", "data", "req", "reg", "rev", "nos", "ret", "p", "arr", "mr", "result", "cells", " Res", "rss", "css", "as", "bs", "reset", "s", "us", "i", "rest", "cs", "pres", "sol", "ris", "Res", "vs", "eps", "results", "resp", "RES", "RS", "rel", "ms", "Rs", "gen", "ces"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        char[] ch = sc.next().toCharArray();\\n        final int N = ch.length;\\n        int[] ar = new int['z' + 1]; // 'z' == 122\\n        String ans = \"Yes\";\\n        \\n        for (int i = 0; i < N; i++) {\\n            int ascii = ch[i];\\n            ar[ascii]++;\\n        }\\n        for (int i = 'a'; i <= 'z'; i++) { // 'a' == 97\\n           if (ar[i] % 2 != 0)  ans = \"No\";\\n        }\\n        \\n        out.println(ans);\\n        \\n        out.flush();\\n    }\\n}", "target": "103", "substitutes": {"sc": ["sw", "enc", " Sc", "cer", "Sc", " SC", "bc", "sf", "SC", "scope", "ss", "cr", "esc", "sq", "c", "scan", "osc", "spec", "sync", "ec", "nc", "sch", "cc", "sh", "sec", "desc", "sp", "src", "acc", "cle", "rc", "anc", "ca", "sb", "cs", "si", "pc", "exec", "ner", "ci", "mc", "sci"], "out": ["error", "outs", "conn", "a", "str", "bin", "in", "err", "report", "arg", "io", "c", "OUT", "m", "name", "cmd", "r", "this", "tx", "input", "nt", "p", "ex", "sp", "home", "cache", "result", "IN", "tmp", "op", "o", "w", "i", "log", "self", "info", "x", "Out", "output", "write", "temp", "b", "writer", "res"], "ch": ["ich", "chu", "CH", "h", "cha", "cho", "ach", "com", "che", "Ch", "v", "z", "c", "chn", "sch", "cor", "cht", "chan", "k", "p", "f", "q", "cher", "br", "rc", "char", "cur", "col", "ech", "zh", "buff", "i", "cs", "code", "chi", "l", "ches", "cl"], "N": ["Q", "J", "Ns", "E", " C", " n", "H", "A", "T", "B", "NT", "nb", "NS", "R", "n", "L", "K", "C", "O", "D", "M", " L", "S", "Z", "V", "P", " Ne", "I"], "ar": ["AR", "art", "or", "al", "aa", "array", "ir", "arg", "er", "at", "ars", "r", "A", "ear", "cat", "arin", "arr", "ara", "att", "Ar", "na", "par", "si", "da", "ner", "arc", "ai", "ag"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        if(a == 2){\\n            System.out.println(a);\\n            return;\\n        }\\n        ArrayList<Integer> list = getPrime(a);\\n        while(true){\\n            if(check(a,list)){\\n                System.out.println(a);\\n                return;\\n            }\\n            a++;\\n        }\\n    }\\n    \\n    static ArrayList<Integer> getPrime(int x){\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        list.add(2);\\n        int max = (int)Math.pow(x*2,0.5);\\n        for(int i = 3; i < max; i+=2){\\n            boolean chk = true;\\n            for(int j : list){\\n               if(i % j == 0){\\n                   chk = false;\\n                   break;\\n               }\\n            }\\n            if(chk){\\n                list.add(i);\\n            }\\n        }\\n        return list;\\n    }\\n    \\n    static boolean check(int x, List<Integer> list) {\\n        for(int j : list){\\n           if(x % j == 0){\\n               return false;\\n           }\\n        }\\n        return true;\\n    }\\n}\\n\\n", "target": "183", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "sub", "nc", "sch", "cc", "sh", "cus", "sp", "cle", "src", "rc", "system", "anc", "ca", "cs", "cl", "pc", "ner", "ci", "asc", "mc", "sci"], "a": ["aw", "access", "api", "ba", "ab", "address", "oa", "fa", "ma", "aaa", "aa", "sa", "d", "am", "array", "count", "an", "c", "area", "ac", "ia", "ana", "A", "aaaa", "ga", "data", "index", "ea", "p", "n", "alpha", "f", "pa", "aj", "ar", "ua", "la", "ca", "as", "na", "va", "ama", "za", "da", "au", "ae", "af", "ai", "b", "sta"], "list": ["base", "counter", "check", "table", "pair", "lists", "ul", "add", "map", "result", "la", "val", "diff", "bl", "ist", "entry", "lc", "cli", "group", "type", "now", "current", "see", "index", "data", "pre", "arr", "www", "string", "li", "stack", "full", "LIST", "rest", "keep", "cl", "load", "all", "loop", "name", "cont", "right", "and", "c", "sync", "out", "value", "chain", "nt", "lv", "batch", "p", "L", "large", "test", "low", "we", "view", "block", "null", "object", "pool", "left", "str", "part", "array", "v", "k", "obj", "queue", "lock", "cache", "coll", "range", "act", "parent", "code", "l", "ll", "set", "pl", "size"], "x": ["id", "xxxx", "php", "base", "wx", "px", "xx", "rx", "rex", "d", "xy", "xt", "xxxxxxxx", "xxx", "z", "ix", "v", "c", "m", "plus", "y", "tx", "xs", "index", "e", "number", "ex", "xc", "p", "n", "f", "xi", "xp", "ic", "b", "w", "ax", "code", "xe", "dx", "lex", "X", "u", "xa", "g", "size", "xes", "python", "work"], "max": ["id", "cu", "base", "right", "mod", "count", "Max", "last", "c", "now", "MAX", "size", "min", "index", "ng", "k", "key", "end", "q", "power", "conf", "ax", "w", "range", "parent", "cl", "auto", "step", "scale", "total", "co", "work"], "i": ["id", "uni", "inner", "ri", "pi", "part", "in", "init", "ip", "ii", "z", "ix", "io", "abi", "c", "start", "y", "gi", "index", "k", "e", "p", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "ie", "yi", "l", "si", "bi", "info", "zi", "ci", "u", "ni", "ti", "fi", "ai", "uri", "mini", "I"], "j": ["left", "ch", "vol", "ja", "J", "pi", "js", "d", "jj", "ii", "z", "v", "ix", "c", "m", "y", "k", "key", "e", "dj", "obj", "ion", "n", "f", "p", "ji", "aj", "ik", "dy", "q", "on", "xi", "next", "o", "eight", "ax", "ie", "adj", "el", "fr", "si", "uj", "bi", "l", "jo", "ni", "g", "u", "jp", "b"], "chk": ["chech", " chke", "chach", "quck", "quk", "check", "quch", "chak", "cheok", "clk", "chack", "clck", "chke", " chech", "chch", " chek", "prck", "kck", " chck", "prmk", "chok", " chch", "chmk", "clok", " check", "kkick", "chemk", " cheke", "chkick", "kk", "prk", "qumk", "chekick", "chck", "clkick", "prch", "chake", "kok", "chek"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\t\tchar[] a = sc.next().toCharArray();\\n\t\tint ans=0;\\n\t\tfor (int i=0;i<3;i++){\\n\t\t\tif (a[i]=='1'){\\n            \tans+=1;\\n            }\\n        }\\n        System.out.print(ans);\\n    }\\n}", "target": "165", "substitutes": {"sc": ["sw", "enc", "ch", "lc", "soc", "cer", "str", "Sc", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "ec", "sub", "nc", "sch", "sec", "sh", "cus", "desc", "sp", "src", "ocr", "rc", "ca", "s", "cs", "cl", "pc", "ner", "ci", "parser", "g", "asc", "sci"], "a": ["ab", "ma", "fa", "aaa", "aa", "sa", "ata", "am", "aux", "array", "an", "area", "c", "ac", "ars", "ana", "A", "input", "ga", "data", "index", "ea", "p", "pa", "alpha", "e", "n", "la", "ca", "as", "na", "va", "s", "something", "asa", "parser", "u", "b"], "ans": [" scans", "ats", "lan", "ons", "sk", "AN", "aus", "atan", "ions", "nas", "amps", "vers", "an", "scan", "ars", "ana", "os", "aned", "ln", "es", "cas", " chars", "offs", "annels", "anon", "ents", "ds", "ids", "ks", " spans", "span", "anc", "ANS", "na", "as", "s", "acts", "cs", "ants", "eps", "x", "nan", "anes", "ann", "ls", "ins"], "i": ["id", "slice", "j", "ri", "pi", "mu", "I", "in", "d", "init", "ii", "z", "v", "ix", "c", "io", "abi", "y", "gi", "data", "index", "k", "phi", "e", "p", "n", "f", "qi", "ui", "xi", "li", "multi", "o", "di", "ini", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "uri", "ni", "ai", "b"]}}
{"code": "\\n\\nimport java.io.*;\\nimport java.math.BigInteger;\\nimport java.util.*;\\nimport java.util.Stack;\\n\\npublic class Main{\\n\tpublic static class FastReader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer root;\\n\t\t\\n \\n\t\tpublic FastReader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n \\n\t\tString next() {\\n\t\t\twhile (root == null || !root.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\troot = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (Exception r) {\\n\t\t\t\t\tr.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn root.nextToken();\\n\t\t}\\n \\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n \\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n \\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n \\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (Exception r) {\\n\t\t\t\tr.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t}\\n\t\\n\tpublic static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));\\n\tstatic int mod = (int) (1e9+7);\\n\tstatic long cf = 998244353;\\n    static final int MAX = (int) 1e6;\\n    public static List<Integer>[] edges;\\n    public static int[][] parent;\\n    public static int col = 20;\\n    public static long[] Bit;\\n    public static long[] fac,inv;\\n    public  static int[] prime; \\n    public static long[] dp;\\n\tpublic static FastReader sc = new FastReader();\\n\tpublic static void main(String[] args) {\\n\t//\tScanner sc = new Scanner(System.in);\\n \\n\t\tint a = sc.nextInt();\\n\t\tint L=a/100;\\n\t\tint R=a%100;\\n\t\tif(1<=L&&L<=12){\\n\t\tif(1<=R&&R<=12) out.printf(\"AMBIGUOUS\\n\");\\n\t\telse out.printf(\"MMYY\\n\");\\n\t\t}else{\\n\t\tif(1<=R&&R<=12)out.printf(\"YYMM\\n\");\\n\t\telse out.printf(\"NA\\n\");\\n\t\t}\\n\t\tout.close();\\n\t}\\n\t\\n\t\\n}", "target": "5", "substitutes": {"br": ["sr", "ler", "ch", "yr", "plug", "orb", "bro", "ro", "rob", "bolt", "bc", "Br", "err", "report", "bb", "bh", "ber", "BR", "box", "cr", "io", "er", "boot", "r", "db", "gr", "tr", "bel", "runner", "jp", "nr", "hr", "be", "ur", "p", "obj", "bar", "arr", "mr", "vr", "result", "bot", "ocr", "bridge", "browser", "pr", "raf", "buf", "div", "lr", "fr", "reader", "dr", "rt", "bl", "rot", "rb", "b"], "root": ["id", "roots", "token", "inner", "iterator", "error", "loc", "wire", "right", "ro", "rec", "bc", "util", "node", "err", "array", "round", "server", "child", "box", "type", "er", "head", "rb", "url", "boot", "r", "db", "owner", "nr", "re", "ng", "loader", "p", "n", "obj", "arr", "prev", "ver", "mr", "result", "src", "rc", "string", "row", "av", "o", "raw", "pr", "buf", "div", "tree", "fr", "parser", "Root", "rt", "null", "reader", "ree", "b", "writer", "name"], "str": ["sr", "id", "inner", "j", "Str", "doc", "inst", "st", "line", "in", "err", "style", "c", "url", "r", "iter", "STR", "gr", "t", "tr", "stri", "kr", "strings", "hr", "rev", "p", "n", "sp", "f", "arr", "ctr", "result", "string", "char", "dict", "pr", "s", "div", "l", "fr", "cl", "exp", "text", "sl", "x", "status", "dr", "u", "raw", "b", "entry"], "out": ["error", "outs", "co", "file", "conn", "line", "bin", "in", "d", "err", " in", "report", "println", "io", "v", "c", "OUT", "name", "t", "input", "session", "data", "p", "obj", "sp", "f", "ex", "cache", "IN", "dump", "string", "o", "w", "i", "log", "info", "exec", "x", "Out", "output", "raw", "temp", "b", "writer", "write"], "mod": ["id", "base", "lib", "m", "mem", "tr", "sec", "reg", "ver", "mode", "dc", "ctr", " Mod", "dec", "cm", "module", "mult", "seq", "multipl", "comp", "MOD", "version", "code", "num", "exp", "mods", "Mod", "scale"], "cf": ["CF", "cb", "ef", " gcc", "fc", " CF", " CC", "cr", " cr", "ec", "const", " constant", "cc", " dc", " CP", "ctr", "dc", "CR", "cap", "gc", "cm", "CC", " cc", "var", " CR", "cp", "cv", "cal"], "MAX": ["CF", "CL", "base", " Max", "F", "count", "Max", "std", " max", "cr", "mem", "ctr", "dc", "max", "CR", "dec", "C", "seq", "CC", "MOD", "MIN", "N", "exp", "var", "X", "DC", "scale"], "edges": ["ledge", "Edges", "ledGES", "endedGES", "edGES", "endedged", "EdGES", "Edge", "ledged", "Edged", "edged", "edge", "endedges", "ledges", "endedge"], "parent": ["id", "port", "pool", "children", "init", "ip", "parents", "count", "child", "member", "level", "iter", "pid", "Parent", "key", "pos", "max", "next", "large", "seq", "class", "div", "num", "block", "all", "depth", "entry"], "col": ["pool", "loc", "ct", "page", "sel", "group", "child", "level", "dim", "cat", "Col", "pos", "ver", "grid", "row", "seq", "coll", "column", "ref", "act", "val", "COL", "keep", "num", " Col", "block", "rel", " num"], "Bit": ["enc", "nn", "bin", "free", "alloc", "util", "init", "Max", "abc", "abs", "mem", "norm", "bits", "nc", "cc", "Fac", "reg", "bit", "net", "acc", "gc", "mult", "adj", "num", "bi", "exp", "mask", "block", "flag"], "fac": ["lu", "ig", "abc", "inter", "ac", "con", "imag", "const", "circ", "gam", "pack", "Fac", "dim", "complex", "dat", "acc", "gu", "cap", "inf", "mult", "cur", "adj", "bi", "aug", "frac", "real", "nan", "fi"], "inv": ["len", "dev", "nu", "iq", "Inv", "adv", "v", "ov", "abs", "ln", "np", "vis", "nr", "quad", "rev", "net", "dec", "tmp", "av", "ev", "tri", "adj", "sum", "bi", "vs", "cl", "eff", "block"], "prime": ["none", "Prime", "fix", "se", "init", "pose", "pe", "square", "seed", "shift", "powers", "pack", "big", "dim", "pos", "Power", "power", "pad", "primary", "div", "sup", "sum", "exp", "real", "mask", "depth", "rand", "scale"], "dp": ["pp", "amp", "dep", "tp", "dm", "ip", "ep", "DP", "imp", "pid", "np", "gp", "dl", "dt", "dim", "sp", "df", "dc", "pm", "pkg", "pg", "di", "NP", "drop", "sup", "eps", "dq", "isp", "cp"], "sc": ["sw", "sr", " rc", "ch", " Sc", " ssh", "Sc", " SC", "rs", " ch", "SC", " scr", " mc", "cr", " cr", "c", " c", "gr", " sp", "sp", " scratch", "ctr", "ocr", "rc", " src", "cl", " res", "rb"]}}
{"code": "import static java.lang.Double.parseDouble;\\n\\npublic class Main {\\n    public static void main (String[] args ) {\\n        int i ;\\n        String number = new java.util.Scanner ( System.in ).nextLine();\\n        i = (int) xclubic (parseDouble(number));\\n        System.out.println(i);\\n    }\\n    public static double xclubic (double x) {\\n        double y;\\n        y = 3;\\n        return Math.pow(x , y);\\n    }\\n}", "target": "36", "substitutes": {"i": ["id", "j", "ri", "line", "length", "pi", "in", "d", "ip", "ii", "cli", "count", "v", "io", "abi", "c", "is", "r", "gi", "value", "index", "data", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "b", "di", "ini", "oi", "chi", "code", "l", "si", "bi", "hi", "info", "zi", "ci", "ni", "uri", "fi", "ai", "I"], "number": ["format", "object", "address", "line", "function", "length", "part", "numbered", "no", "type", "position", "Number", "ln", "value", "index", "data", "key", "n", "f", "integer", "expression", "result", "digit", "string", "next", "class", "umber", "num", "info", "phone", "print", "null", "parser", "letter", "output", "message", "b", "name"], "x": ["id", "px", "a", "yx", "xx", "rx", "fx", "d", "xy", "cross", "xxx", "z", "v", "ix", "c", "m", "tx", "xs", "t", "data", "e", "p", "n", "ex", "f", "xc", "xi", "w", "ax", "val", "l", "dx", "X", "xes", "b"], "y": ["j", "xx", "ye", "ady", "d", "xy", "ry", "gy", "type", "z", "ny", "c", "yy", "ay", "t", "yo", "Y", "yd", "cy", "ty", "p", "oy", "ym", "ly", "ys", "vy", "iy", "ey", "yi", "zy", "ya", "l", "dy", "ies", "b", "sy"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static final int BIG_NUM = 2000000000;\\n\tpublic static final int MOD = 1000000007;\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\ttry {\\n\t\t\tString input_str[] = br.readLine().split(\"\\\\s+\");\\n\t\t\tint N = Integer.parseInt(input_str[0]);\\n\t\t\tint LIMIT = Integer.parseInt(input_str[1]);\\n\\n\t\t\tQueue Q = new Queue(N);\\n\\n\t\t\tfor(int loop = 0; loop < N; loop++){\\n\\n\t\t\t\tinput_str = br.readLine().split(\"\\\\s+\");\\n\t\t\t\tQ.push(new Process(input_str[0],Integer.parseInt(input_str[1])));\\n\t\t\t}\\n\\n\t\t\tint current = 0;\\n\\n\t\t\tStringBuilder ans = new StringBuilder();\\n\\n\t\t\twhile(!Q.isEmpty()){\\n\\n\t\t\t\tProcess tmp = Q.pop();\\n\\n\t\t\t\tif(tmp.getTIME() <= LIMIT){\\n\\n\t\t\t\t\tcurrent += tmp.getTIME();\\n\t\t\t\t\tans.append(tmp.getName()).append(\" \").append(Integer.toString(current)).append(\"\\n\");\\n\\n\t\t\t\t}else{\\n\\n\t\t\t\t\tcurrent += LIMIT;\\n\t\t\t\t\ttmp.setTIME(tmp.getTIME()-LIMIT);\\n\t\t\t\t\tQ.push(tmp);\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tSystem.out.print(ans.toString());\\n\\n\t\t} catch (IOException e) {\\n\t\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f catch \u30d6\u30ed\u30c3\u30af\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t}\\n}\\n\\n\\nclass Process{\\n\\n\tprivate String name;\\n\tprivate int TIME;\\n\\n\tProcess(String arg_name,int arg_TIME){\\n\t\tname = arg_name;\\n\t\tTIME = arg_TIME;\\n\t}\\n\\n\tpublic String getName() {\\n\t\treturn name;\\n\t}\\n\\n\tpublic int getTIME() {\\n\t\treturn TIME;\\n\t}\\n\\n\tpublic void setTIME(int arg_TIME) {\\n\t\tTIME = arg_TIME;\\n\t}\\n}\\n\\nclass Queue{\\n\\n\tprivate Process[] table;\\n\tprivate int head;\\n\tprivate int tail;\\n\tprivate int size;\\n\tprivate int num_data;\\n\\n\tQueue(int arg_size){\\n\\n\t\tsize = arg_size;\\n\t\ttable = new Process[arg_size];\\n\t\thead = 0;\\n\t\ttail = 0;\\n\t\tnum_data = 0;\\n\t}\\n\\n\tboolean isEmpty(){\\n\\n\t\treturn num_data == 0;\\n\t}\\n\\n\tvoid push(Process process){\\n\\n\t\ttable[tail] = process;\\n\t\ttail = (tail+1)%size;\\n\t\tnum_data++;\\n\t}\\n\\n\tpublic Process pop(){\\n\\n\t\thead = (head+1)%size;\\n\t\tnum_data--;\\n\t\treturn table[(head-1+size)%size];\\n\t}\\n}\\n", "target": "231", "substitutes": {"BIG_NUM": ["BIGIDID", "BIGNUMLOG", "BIGAMNO", "BIGAMID", "BIGIDLOG", "BIGAMNUM", "BIGS_ID", "BIGSNUMNO", "BIG_NO", "BIGS_LOG", "BIGSNUMLOG", "BIGNUMNUM", "BIGIDNUM", "BIGAMLOG", "BIG_ID", "BIG_LOG", "BIGIDNO", "BIGS_NUM", "BIGNUMID", "BIGNUMNO", "BIGSNUMID", "BIGS_NO", "BIGSNUMNUM"], "MOD": ["PM", "GEN", "DIR", "FD", "mod", "ORT", " MEM", "REM", "VER", "UID", "NAME", "RT", "LOAD", "REG", " mod", "LIB", "RM", "ARM", "LOG", "PU", "CC", "MODE", "DEBUG", "RC", "Mod", "LOC", "MI", "SPEC"], "br": ["ler", "ch", "yr", "file", "orb", "nor", "str", "bro", "Br", "bb", "err", "bh", "ber", "ir", "BR", "cr", "io", "er", "rb", "Reader", "HR", "r", "out", "db", "gr", "tr", "img", "hr", "ur", "p", "sp", "arr", "mr", "bar", "ar", "bridge", "browser", "wr", "jar", "buf", "lr", "fr", "handle", "ner", "dr", "bl", "reader", "b", "res"], "input_str": ["input1dr", " input_stri", " input__st", "inputablestream", "input_line", "short_str", "inputlstr", "input_stri", "input__str", "input_br", "input_r", " input_st", "Input2line", " input__dr", " input__stream", "input_arr", "input_STR", "input__dr", " input__str", "input2stri", "input1arr", "inputlline", "short_dr", "short_arr", "input_st", "Input_line", " input_line", "input__stream", "input2STR", "input2stream", "Input_br", "input2br", "input_stream", "input2arr", "input_hr", "short_hr", "input2str", "inputlstream", "Input2fr", "input1hr", " input_stream", "inputlstri", "input2line", "inputabledr", "input__st", "input2st", "Input_arr", "inputablestr", "Input2str", "Input_fr", " input_r", "input1str", "input2fr", "input2dr", " input_arr", "Input_STR", " input_dr", "input_dr", "input_fr", "Input_str", "Input2br", "inputablest"], "N": ["Ne", "J", "Ns", "F", "SIZE", "NM", "RN", "Max", " n", "NB", "Num", "Count", "network", "Number", "T", "B", "NT", "NS", "n", "R", "L", "K", "C", "O", "NC", "D", "NA", "M", "S", "Z", "NUM", "X", "NN", "V", "P", "Size", "I", "G"], "LIMIT": ["LEMITS", "DLimIT", "ULIMite", "ELIMit", "SLIMIT", "LFINITED", "SLIMit", "SLEMITS", "LUNIT", "LEMIN", "DLimIN", "LFINIT", "LAMite", "LFININ", "ULEMITE", "ELimIT", "LEMit", "LEMite", "LIORit", "LIMITED", "SLIMITS", "DLIMIT", "LEMITED", "ELimit", "LIMite", "LFINITS", "LEMIT", "DLIMITED", "LIGITED", "LEMMIT", "LIGIT", "DLimITS", "LUNMIT", "LIMITY", "Limit", "ELIMITED", "DLIMIN", "LIMITS", "ULEMIT", "LIGit", "DLimITED", "LAMITE", "ULIMIT", "ELIMITY", "LIMit", "LimITS", "DLIMITS", "LIGite", "LimITY", "LIMMIT", "ELIMIT", "LimIT", "LUNITS", "LIGITY", "ULIMITE", "LEMITE", "LimITED", "SLEMIT", "LAMit", "LAMIT", "ULIMit", "LIGITE", "LIMIN", "LIORITED", "SLEMMIT", "ELimITED", "ULEMite", "ELimITY", "LimMIT", "LIMITE", "SLIMMIT", "LIORITY", "ULEMit", "LIORIT", "LUNit", "LimIN", "SLEMit"], "Q": ["Buffer", "CL", "NG", "SH", "CH", "J", "F", "HQ", "E", "DR", "UE", "Que", "QU", "Ch", "H", "UB", "Qu", "A", "GU", "T", "Flow", "Do", "TX", "Wait", "Cache", "View", "R", "Client", "L", "queue", "QB", "Stack", "K", "q", "API", "W", "C", "O", "D", "PU", "Once", "M", "CW", "U", "Z", "IP", "MQ", "X", "V", "P", "IQ", "que", "Query", "I", "G"], "loop": ["sleep", "counter", "oop", "layer", "round", "oper", " Loop", "child", "stop", "head", "level", "iter", "oll", "layout", "rolled", "Loop", "runner", "roll", "key", "loader", "hop", "cycle", " loops", "cpu", "row", "repeat", "li", "running", "feed", "test", "run", "skip", "coll", "flow", "rolling", "pass", "LO", "comb", "lo", "num", "log", "cl", "pl", "exp", "hello", "thread", "step", "zip"], "current": ["open", "base", "left", "api", "counter", "today", "length", "copy", "step", "other", "Current", "latest", "example", "count", "reported", "default", "style", "now", "complete", "future", "position", "this", "recent", "request", "session", "core", "index", "wait", "key", "result", "wa", "URRENT", "next", "currently", "active", "running", "cur", "temp", "existing", "sequence", "parent", "space", "actual", "num", "handle", "local", "valid", "capacity", "initial", "update", "total"], "ans": ["can", "anas", "vals", "ani", "outs", "ats", "a", "lan", "ons", "ns", "sk", "AN", "rs", "ens", "aus", "atan", "ANN", "ps", "ions", "nas", "asin", "amps", "iana", "an", "ras", "ams", "aos", "ars", "parts", "ana", "aned", "es", "anon", "ds", "ents", "san", "ks", "arts", "ANS", "na", "as", "s", "cs", "ants", "eps", "ann", "ls", "ins"], "tmp": ["cmp", "cpp", "pp", "amp", "app", "storage", "api", "po", "tp", "part", "job", "page", "term", "template", "bb", "tf", "pb", "process", "client", "ppa", "now", " proc", "txt", "timer", "fp", "db", "pty", "t", "img", "tt", "np", "pid", "data", "nb", "wp", "proc", "session", "pro", "p", "obj", "machine", "mmm", "bp", "result", "own", "pm", "src", "project", "processor", "next", "worker", "test", "pkg", "perm", "bt", "parent", "ff", "vm", "pc", "fb", "mp", "handler", "cp", "service", "temp", "inst", "source", "vt"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n\tint K = Integer.parseInt(sc.next());\\n\tint ans = 0;\\n\tfor(int i = 1; i<=K ;i++){\\n\t\tfor(int j = 1; j<=K ;j++){\\n\t\t\tfor(int l = 1; l<=K ;l++){\\n\t\t\t\tans +=gcd(gcd(i,j),l);\\n\t\t\t}\\n\t\t}\\n\t}\\n    System.out.print(ans);\\n    return;\\n  }\\n\\n  static int gcd(int a, int b){\\n    int max= Math.max(a,b);\\n    int min= Math.min(a,b);\\n    if(max%min==0){\\n      return min;\\n    }else{\\n      return gcd(max%min, min);\\n    }\\n  }  \\n  \\n}\\n\\n\\n", "target": "6", "substitutes": {"sc": [" rc", "soc", " Sc", "cb", "str", "or", "Sc", " SC", "bc", "se", "SC", " scr", "server", "uc", "cr", "esc", "c", "scan", "osc", "spec", "r", "ec", "search", "nc", "sch", "sub", "cc", " sp", "cus", "sp", "dc", "acc", "rc", "system", "anc", "cur", "cs", "Scan", "pc", "exec", "ner", "ci", "parser", "g", "sci"], "K": ["Context", "Q", "J", "F", "E", "KI", "KE", "Mask", "Max", "HK", "H", "T", "KR", "B", "Y", "Ka", "k", "L", "Power", "ks", " k", "W", "O", "C", "Ku", "D", "M", "U", "Z", "SK", "N", "S", "AK", "KS", "KB", "X", "V", "ID", "P", "Sk", "Size", "IK", "I", "G"], "ans": [" scans", "vals", "cons", "errors", "lan", "sk", "ns", "ens", "AN", "ons", "runs", "aus", "atan", "ions", "nas", "amps", "an", "asts", "scan", "ras", "ars", "ana", "os", "es", "cas", "anon", "ents", "ds", "ks", "span", "anc", "ANS", "na", "as", "unks", "s", "cs", "ches", "ants", "eps", "x", "ann", "ls", "annot", "ins"], "i": ["id", "ri", "pi", "in", "d", "ii", "ip", "ind", "ori", "v", "io", "c", "ix", "is", "z", "r", "y", "gi", "index", "k", "e", "p", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "iu", "o", "di", "ini", "ie", "si", "bi", "hi", "x", "ci", "u", "ni", "ai", "I"], "j": ["ch", "h", "ja", "J", "js", "ij", "d", "jj", "ii", "z", "v", "c", "is", "r", "y", "jl", "jc", "index", "k", "e", "p", "n", "f", "qi", "ji", "aj", "end", "q", "li", "it", "o", "ie", "si", "uj", "x", "jo", "u", "g", "jp"], "l": ["lc", "loc", "lp", "lu", "lf", "wl", "Lu", "length", "kl", "ii", "nl", "z", "v", "c", "ld", "ol", "ln", "ul", "jl", "dl", "il", "k", "e", "p", "n", "L", "f", "rl", "la", "li", "o", "lb", "el", "cl", "pl", "sl", "Li", "u", "lin", "bl", "ls", "ll", "fl"], "a": ["api", "app", "ba", "ab", "art", "aa", "sa", "d", "am", "an", "c", "ac", "ia", "y", "A", "ad", "e", "p", "f", "aj", "la", "na", "as", "ca", "va", "ax", "ie", "asa", "da", "au", "x", "ae", "ai"], "b": ["wb", "ib", "ab", "ba", "bc", "aa", "d", "bb", "pb", "z", "v", "c", "ub", "m", "r", "y", "db", "B", "nb", "e", "be", "p", "n", "f", "eb", "bot", "bs", "o", "sb", "lb", "bi", "fb", "x", "u", "rb"], "max": ["id", "none", "base", "az", "right", "part", "mod", "d", "init", "inc", "ace", "array", "count", "Max", "last", "default", "c", "now", "plus", "point", "MAX", "con", "value", "from", "mean", "index", "core", "k", "ad", "key", "age", "end", "cache", "power", "anc", "dec", "ca", "average", "ra", "w", "ax", "conf", "range", "div", "rest", "act", "version", "parent", "sum", "exp", "parse", "x", "patch", "diff", "est", "size", "rand", "rank", "total"], "min": ["mid", "len", "in", "iss", "start", "m", "r", "MAX", "mean", "dim", "pos", "dec", "na", "MIN", "val", "version", "sol", "x", "diff", "minus", "mini", "complete", "rand", "change", "Mini", "neg", "d", "emin", "default", "is", "index", "pre", "key", "e", "f", "span", "less", "next", "pass", "sort", "mins", "sign", "small", "sin", "section", "Min", "init", "ss", "ress", "ix", "c", "area", "sub", "lower", "value", "minimum", "p", "n", "partial", "skip", "ax", "sum", "block", "step", "scale", "id", "slice", "pri", "none", "part", "mod", "Max", "s", "amin", "range", "act", "cost", "size"]}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scanner=new Scanner(System.in);\\n\t\tlong ans = 1;\\n\t\tint N = scanner.nextInt();\\n\\n\t\tfor(int i = 0 ; i < N ; i++) {\\n\t\t\tlong A = scanner.nextLong();\\n\t\t\tif(A == 0) {\\n\t\t\t\tans = 0;\\n\t\t\t} else {\\n\t\t\t\tif(ans <= ((long)Math.pow(10, 18) / A) && ans >= 0) {\\n\t\t\t\t\tans = ans * A;\\n\t\t\t\t}else {\\n\t\t\t\t\tans = -1;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(ans);\\n\\n\t\tscanner.close();\\n\\n\t}\\n\\n}\\n", "target": "27", "substitutes": {"scanner": ["canener", "scaner", "annner", "Scanner", "scanener", "annener", "Scanener", "Scaninner", "anninner", "canter", " scanrator", "caninner", "Scanatter", "caner", "canoder", " scanoder", "Scaner", "canrator", "verner", " scanatter", "Scanter", "Scanoder", "anner", "Scanrator", "veratter", " scanener", "canner", "scanrator", "verener", "scaninner", "scanter", " scaner", "scanatter", "scanoder", " scanter", "verer"], "ans": ["man", "aid", "ions", "ars", "ana", "aned", "powers", "ents", "ks", " spans", "na", "acts", "ants", "x", "ann", "outs", "errors", "lan", "ANN", "atan", "ams", "os", "xs", "es", "alpha", "span", "cs", "works", "reads", " scans", "anas", "rules", "cons", "sk", "aning", "aus", "ss", " signs", "an", "scan", "ras", "ations", "ases", "olds", "cas", "rows", "ads", "anc", "ANS", "S", "eps", "nan", "ls", "annot", "can", "aces", "ips", "ats", "a", "ons", "ns", "ens", "AN", "amps", "vers", "offs", "ds", "ids", "arts", "as", "s", "ays", "ches", "types", "ops", "ins"], "N": ["Q", "Ni", "Ne", "Ns", "NM", "No", "NB", "Num", "H", "T", "B", "NI", "NE", "Y", "NT", "NS", "n", "R", "L", "K", "W", "Len", "C", "O", "NC", "MN", "D", "M", "U", "S", "Z", "V", "NN", "X", "P", "I"], "i": ["id", "j", "h", "a", "pi", "I", "in", "d", "mi", "ip", "ii", "at", "c", "start", "abi", "r", "gi", "index", "k", "e", "p", "n", "f", "qi", "ki", "end", "ui", "xi", "li", "it", "multi", "o", "di", "ini", "s", "oi", "chi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "ni", "uri", "ai", "b"], "A": ["As", "An", "AR", "a", "F", "AN", "MA", "AS", "AP", "AA", "IA", "an", "H", "ana", "Ma", "T", "Alpha", "B", "AI", "Y", "mA", "SA", "PA", "Na", "alpha", "L", "API", "C", "Ar", "CA", "NA", "D", "M", "HA", "U", "S", "Ca", "LA", "X", "V", "AF", "P", "au", "OA", "TA", "AU", "I", "G", "AC"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\npublic static void main(String[] args) {\\n\t\t\tScanner sc = new Scanner(System.in);\\n\t\t\tint n = Integer.parseInt(sc.nextLine());\\n\\n\t\t\tList<Integer> list = new ArrayList<Integer>();\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tint d = Integer.parseInt(sc.nextLine());\\n\t\t\t\tif (!list.contains(d)) {\\n\t\t\t\t\tlist.add(d);\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(list.size());\\n\\n\t\t\tsc.close();\\n\t\t}\\n}", "target": "105", "substitutes": {"sc": ["sw", "ch", "lc", "soc", " Sc", "cb", "cer", "st", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "sem", "ss", "fc", "uc", "cr", "esc", "c", "scan", "osc", "sync", "nc", "sch", "cc", "cor", "sh", "sec", "sp", "ser", "src", "rc", "system", "anc", "sche", "sb", "s", "cs", "cl", "pl", "pc", "parse", "ner", "ci", "asc", "parser", "cv", "mc", "sci"], "n": ["j", "nn", "h", "sn", "ns", "in", "z", "v", "c", "m", "en", "network", "nc", "t", "mn", "nb", "k", "nt", "e", "number", "p", "f", "net", "q", "o", "w", "s", "l", "num", "N", "x", "u", "b"], "list": ["id", "inner", "base", "pool", "left", "lc", "array", "table", "cli", "group", "server", "default", "live", "iter", "this", "out", "search", "size", "ul", "index", "chain", "batch", "p", "queue", "L", "cache", "la", "li", "test", "stack", "coll", "we", "LIST", "tree", "collection", "parent", "keep", "l", "view", "cl", "set", "loop", "bl", "all", "null", "sequence", "entry"], "i": ["id", "inner", "j", "ri", "pi", "mu", "I", "mi", "ip", "ii", "z", "v", "io", "c", "gi", "index", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "di", "ini", "oi", "ie", "chi", "si", "bi", "info", "zi", "ci", "ni", "fi", "ai", "ti"], "d": ["id", "j", "h", "a", "and", "dd", "ind", "md", "fd", "z", "c", "start", "element", "r", "ld", "dom", "t", "data", "dt", "ds", "ad", "dim", "e", "ded", "dn", "f", "p", "did", "dc", "dat", "digit", "sd", "D", "o", "di", "l", "dx", "da", "bd", "du", "dr", "g", "de"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.*;\\n\\nclass Main{\\n  public static void main(String[] args) throws java.lang.NumberFormatException{\\n    Scanner scan=new Scanner(System.in);\\n    StringBuilder input=new StringBuilder();\\n    do{\\n      input.append(scan.nextLine());\\n    }while(scan.hasNext());\\n\\n    for(char i='a';i<='z';i++){\\n      int count=0;\\n      for(int j=0;j<input.length();j++){\\n        if(input.toString().charAt(j)==i || Character.toUpperCase(input.toString().charAt(j))==Character.toUpperCase(i)){\\n          count++;\\n        }\\n      }\\n      System.out.println(i+\" : \"+count);\\n    }\\n  }\\n}\\n", "target": "242", "substitutes": {"scan": ["sc", "can", "sin", "look", "check", "or", "query", "spin", "se", "in", "err", "server", "connect", "er", "an", "start", "is", "sync", "iter", "see", "out", "search", "read", "con", "clean", "non", "stat", "san", "n", "walk", "ser", "span", "system", "feed", "run", "skip", "Scan", "log", "ignore", "parse", "exec", "ner", "parser", "ann", "sign", "reader", "get", "source"], "input": ["instance", "format", "inner", "api", "error", "address", "single", "form", "a", "str", "length", "audio", "query", "database", "in", "http", "inc", "array", "table", "inside", "url", "element", "current", "this", "Input", "out", "internal", "pull", "data", "index", "xml", "alpha", "context", "expression", "result", "string", "active", "next", "list", "inf", "feed", "binary", "connection", "image", "upload", "info", "parse", "exec", "text", "print", "qa", "initial", "output", "reader", "buffer", "temp", "source", "work"], "i": ["id", "api", "ri", "h", "a", "ami", "pi", "I", "ii", "ip", "type", "z", "v", "io", "c", "ix", "start", "ori", "is", "gi", "index", "k", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "eni", "di", "ini", "s", "ie", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "fi", "ai", "b", "name"], "count": ["id", "base", "counter", "check", "length", "len", "part", "ind", "child", "type", "z", "level", "c", "start", "style", "second", "Count", "tag", "index", "key", "e", "number", "p", "n", "add", "f", "age", "cache", "more", "char", "found", "seq", "low", "coll", "col", "allow", "parent", "code", "keep", "num", "sum", "common", "info", "weight", "size", "list", "b"], "j": ["ch", "h", "ja", "J", "str", "js", "ij", "d", "jj", "ii", "bj", "ju", "z", "v", "ix", "c", "je", "y", "r", "jc", "jl", "index", "k", "key", "e", "dj", "obj", "n", "p", "f", "qi", "ji", "aj", "ui", "br", "li", "it", "o", "pr", "ie", "el", "l", "uj", "x", "jo", "oj", "u", "g", "jp", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n    \tScanner parameter = new Scanner(System.in);\\n\\n        Integer input1 = parameter.nextInt();\\n\\n        if (input1 < 10) {\\n\\n        \tSystem.out.println(input1);\\n        } else if (input1 >= 10 && input1 < 100) {\\n\\n        \tSystem.out.println(9);\\n        } else if (input1 >= 100 && input1 < 1000) {\\n\\n        \tSystem.out.println(input1 - 90);\\n        } else if (input1 >= 1000 && input1 < 10000) {\\n\\n        \tSystem.out.println(909);\\n        } else if (input1 >= 10000 && input1 < 100000) {\\n\\n        \tSystem.out.println(input1 - 9090);\\n        } else {\\n\\n        \tSystem.out.println(90909);\\n        }\\n    }\\n}\\n", "target": "135", "substitutes": {"parameter": ["configeters", "paramumer", "configParameter", "prometer", " paramiser", "paramester", "arameter", " paramParameter", "Parametereters", "arameters", " paramumer", "prometers", "promiser", "paramiser", "Parameteriser", " paramester", "paramParameter", "promumer", "Parametereter", "configester", "configeter", "aramParameter", "aramester", "parameters", "Parameterumer", " parameters"], "input1": [" inputOnce", "Input11", "access2", "answer71", "form1", "outputOne", "imageone", "submitOne", "elemented", "form01", "input11", "submitone", "input01", "search551", "requestone", "inputed", "output11", "answer0", "output1", "enumOnce", "inputone", "imageOne", "answer81", " inputone", "submit1", "image71", "search1", " input01", "enumed", "search0", "input81", "Input2", "element0", "request01", " inputOne", "enum0", "wordOnce", " inputed", " input2", "submit71", " input11", "int2", "image0", "int1", "output2", "inputOnce", "input2", "InputOne", "Input01", "inputOne", "word0", "input71", "output551", "form0", "word1", "access1", "output0", "enum1", "answer1", " input81", "Input0", " input551", "int01", "form81", "accessonce", "image81", "image01", "Inputonce", "input551", " input71", "image1", "request0", "element1", "elementOnce", "request1", "InputOnce", "inputonce", "Input1", " input0", " inputonce", "input0"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\nimport java.math.BigInteger;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t// \u5165\u529b\\n\t\tint n = sc.nextInt();\\n\t\tint[] t = new int[n];\\n\t\tint[] x = new int[n];\\n\t\tint[] y = new int[n];\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t    t[i] = sc.nextInt();\\n\t\t    x[i] = sc.nextInt();\\n\t\t    y[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\t// \u8a08\u7b97\\n\t\tString result = \"Yes\";\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t    int dx = 0;\\n\t\t    int dy = 0;\\n\t\t    int dt = 0;\\n\t\t    \\n\t\t    if(i == 0){\\n\t\t        dx = x[i];\\n\t\t        dy = y[i];\\n\t\t        dt = t[i];\\n\t\t    }else{\\n\t\t        dx = x[i] - x[i-1];\\n\t\t        dy = y[i] - y[i-1];\\n\t\t        dt = t[i] - t[i-1];\\n\t\t    }\\n\t\t    \\n\t\t    int d = abs(dx) + abs(dy);\\n\t\t    if(d > dt || d%2 != dt%2) result = \"No\";\\n\t\t}\\n\t\t\\n\t\t\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(result);\\n\t}\\n}\\n\\n", "target": "221", "substitutes": {"sc": [" scans", " rc", " Sc", " ser", "Sc", " SC", "sf", "SC", "sa", " scr", "ss", "an", "sq", "scan", " sm", " sp", " sl", "sp", " ans", " ar", " subp", "sb", "gram", " pars", "ann", " res", " arr", "sci"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n    public static void main(String[] a){\\n\t\tint num1[] = new int[1000];\\n\t\tint num2[] = new int[1000];\\n\t\tint num3[] = new int[1000];\\n\t\tint num,i = 0;\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tnum = Integer.parseInt(scanner.next());\\n\t\tfor(i=0; i<num; i++) {\\n\t\t\tnum1[i] = Integer.parseInt(scanner.next());\\n\t\t\tnum2[i] = Integer.parseInt(scanner.next());\\n\t\t\tnum3[i] = Integer.parseInt(scanner.next());\\n\t\t\tif((Math.pow(num1[i], 2) + Math.pow(num2[i], 2) == Math.pow(num3[i], 2))\\n\t\t\t\t\t|| (Math.pow(num1[i], 2) + Math.pow(num3[i], 2) == Math.pow(num2[i], 2))\\n\t\t\t\t\t|| (Math.pow(num2[i], 2) + Math.pow(num3[i], 2) == Math.pow(num1[i], 2))){\\n\t\t\t\tSystem.out.println(\"YES\");\\n\t\t\t} else{\\n\t\t\t\tSystem.out.println(\"NO\");\t\\n\t\t\t} \\n\t\t}\\n\t\tscanner.close();\\n    }\\n}\\n", "target": "65", "substitutes": {"a": ["format", "address", "str", "audio", "sa", "ata", "aux", "array", "params", "Input", "A", "input", "data", "e", "n", "Array", "arr", "f", " A", "as", "buf", "code", "ai", "list", "b", "source", "config"], "num1": ["number1", "n2", "none", "nam3", "namone", "numV", "nomA", "sumV", "dim1", " num01", "umone", " num15", "um15", "dim01", "um3", " numb", "dimb", "um1", "numberA", "homone", "hom2", "sum2", "num15", "dimOne", " numA", "numOne", "numone", "hom1", "sum3", "nOne", "nb", " numV", "numA", "sum1", "um01", "num01", "n1", "nomb", "nam15", "n01", "hom01", "umV", "nom1", "numberb", "nam1", "um2", " numOne", " numone", "numb"], "num2": ["number1", "generB", " num4", "nam3", "gener62", "gener3", "dim1", "hom4", "gen2", "gen1", "numB", "um3", " numb", "dimb", "um1", " num256", "namB", "hom2", "hom02", "number62", "sum2", "num4", "um256", "gener2", " num62", "sum3", "umII", "um62", "miss02", "miss2", "genII", "sum256", "numII", "dim2", " num02", "homII", "sum1", "nam2", " numB", "num62", " numII", "num256", "miss1", "miss62", "um4", "genb", "um2", "number02", "dimII", "nam62", "numb", "num02", "number2", "um02"], "num3": ["number1", "numq", "namThree", " numq", "nam03", "rubThird", "rubThree", "rub3", " num53", "um73", "hom53", "um3", "num03", "um1", "numThird", "namThird", "number3", "um53", "num53", "hom2", " num0", "hom73", "num73", "numberThree", "hom1", " numThird", "number83", "nam0", " num73", " num83", "hom3", "um83", "numThree", "numberq", "homThree", "umq", "num0", "um03", " num03", " numThree", "nam1", "umThree", "um2", "num83", "nam3", "rub0"], "num": ["id", "uni", "loc", "len", "nu", "mu", "unit", "in", "mi", "init", "no", "inc", "om", "count", "four", "c", "split", "Num", "miss", "en", "con", "ul", "min", "circ", "index", "dim", "number", "n", "f", "end", "cm", "umi", "multi", "col", "gener", "div", "sum", "NUM", "nom", "x", "block", "ci", "nam", "lim", "gen", "um", "name"], "i": ["id", "j", "api", "ri", "lc", "ami", "pi", "mu", "I", "in", "mi", "ii", "ip", "cli", "ori", "io", "v", "ix", "is", "m", "iv", "y", "t", "gi", "index", "adi", "uli", "e", "p", "n", "qi", "f", "ji", "ki", "q", "ui", "xi", "li", "iu", "it", "multi", "ic", "eni", "b", "di", "ini", "isi", "yi", "oi", "ie", "chi", "ei", "us", "si", "hi", "bi", "info", "zi", "x", "ci", "u", "ni", "uri", "fi", "ai", "g", "ti", "vi"], "scanner": ["nerer", "scaner", "Scanner", "scanener", "rowker", "scker", "nerker", "scoder", "parseter", "Scanener", "Scaninner", "scheker", "Scanger", "parseinner", "nerger", "schecher", "analyner", "caninner", "parsener", "caner", "scheinner", "schener", "scanper", "nerener", "Scaner", "parseker", "Scanper", "scanoder", "Scanker", "nerner", "nerinner", "Scanter", "parseener", "analyter", "scanker", "canker", "canper", " scanener", "canner", "scner", "nerter", "Scancher", "analyoder", " scanper", "scaninner", "scanter", "cancher", "scter", "scanger", "rowter", " scaner", "parseger", "scancher", "canener", "rowner", "analyker", "rowoder"]}}
{"code": "public class Main {\\n    private static java.util.Scanner scanner = new java.util.Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n        int n = scanner.nextInt();\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            String str = Integer.toString(scanner.nextInt(), 2);\\n            ans += str.length() - str.lastIndexOf(\"1\") - 1;\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "39", "substitutes": {"scanner": ["schening", "scaner", "annner", "Scanner", "aner", "scheker", "analyner", "caner", "schener", "scanper", "annning", "Scaner", "canning", "Scanper", "analyer", "Scanker", " scanning", "analyning", "scanning", "anning", "scanker", "anner", "canker", "canner", " scanker", "scheer", "annper", " scanper", "Scanning", "anker", " scaner", "analyker"], "n": ["j", "nn", "conn", "len", "sn", "ns", "in", "d", "no", "nl", "v", "z", "c", "m", "en", "y", "nc", "t", "mn", "nb", "k", "number", "p", "f", "net", "pn", "o", "w", "s", "N", "l", "num", "x", "ni", "u", "b"], "ans": [" scans", "can", "anas", "aces", "nn", "outs", "ats", "a", "cons", "lan", "ons", "ns", "AN", "runs", "aus", "ss", "ions", "nas", "amps", "vers", "an", "reads", "ars", "ations", "ana", "os", "aned", "es", "rows", "ents", "ds", "except", "ids", "ks", "span", "anc", "ANS", "na", "as", "anners", "ians", "s", "ays", "cs", "ants", "eps", "x", "nan", "ann", "ls", "ai", "ins"], "i": ["id", "j", "ri", "h", "pi", "d", "mi", "init", "ii", "ip", "z", "v", "io", "ix", "ori", "m", "gi", "index", "k", "phi", "p", "f", "qi", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "oi", "si", "bi", "hi", "info", "x", "ci", "ni", "u", "ti", "uri", "ai", "I"], "str": ["sr", "id", "inner", "strip", "Str", "lc", "st", "line", "in", "err", "ss", "cr", "er", "style", "r", "iter", "out", "STR", "tr", "strings", "stri", "rr", "kr", "nr", "hr", "sp", "ctr", "ocr", "br", "string", "char", "dec", "wr", "pr", "s", "cs", "fr", "text", "x", "dr", "entry", "sta"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tint Q = sc.nextInt();\\n\t\tint[] A =new int[Q];\\n\t\tfor(int i = 0;i < Q;i++) {\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\tsc.close();\\n\t\tint[] point = new int[N];\\n\t\tfor(int i = 0;i < N;i++) {\\n\t\t\tpoint[i] = K - Q;\\n\t\t}\\n\t\tfor(int i = 0;i < Q;i++) {\\n\t\t\tpoint[A[i]-1]++;\\n\t\t}\\n\t\tfor(int i = 0;i < N;i++) {\\n\t\t\tSystem.out.println(point[i] > 0 ? \"Yes\" : \"No\");\\n\t\t}\\n\t}\\n}", "target": "102", "substitutes": {"sc": ["sw", "sr", "cont", "ch", "enc", "lc", "app", "soc", " Sc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "sa", "com", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "tc", "con", "nc", "sch", "cc", "sh", "ga", "ctx", "sp", "f", "ser", "src", "rc", "system", "anc", "row", "sche", "ca", "cam", "cur", "sb", "cs", "l", "cl", "pc", "exec", "ner", "parser", "asc", "g", "mc", "sci"], "N": ["Ni", "Ne", "Ns", "E", "NM", "NL", "No", "Network", "NB", "Num", "H", "Node", "T", "B", "Y", "NT", "Nat", "NS", "n", "L", "q", "W", "C", "O", "NC", "NA", "D", "M", "U", "Z", "S", "X", "V", "NN", "P", "Size", "I", "G"], "K": ["J", "F", "E", "H", "B", "NE", "Y", "k", "R", "n", "L", "q", "W", "C", "PK", "O", "Ku", "D", "M", "U", "Z", "S", "KK", "SK", "KS", "X", "V", "P", "I", "G"], "Q": ["J", "F", "E", "QU", "Ch", "H", "Qu", "Flow", "T", "B", "Y", "n", "R", "L", "QB", "q", "W", "QL", "Limit", "C", "O", "Point", "D", "M", "II", "U", "Z", "S", "IP", "MQ", "X", "V", "ID", "P", "IQ", "Query", "I", "G"], "A": ["a", "F", "array", "The", "AP", "Area", "AA", "area", "Offset", "Input", "T", "Alpha", "B", "Code", "Y", "Na", "p", "alpha", "Array", "AM", "L", "API", "Location", "C", "Point", "CA", "Ar", "NA", "At", "D", "M", "U", "S", "LA", "X", "P", "I"], "i": ["id", "j", "api", "ri", "lc", "h", "a", "pi", "mu", "mi", "d", "ii", "ip", "cli", "ori", "v", "ix", "c", "is", "m", "io", "abi", "z", "y", "gi", "index", "adi", "k", "phi", "e", "p", "n", "f", "qi", "ji", "ik", "q", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "eni", "ini", "di", "oi", "ie", "yi", "chi", "ei", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "fi", "ai", "ti", "I"], "point": ["id", "distance", "path", "one", "base", "object", "back", "address", "change", "line", "po", "art", "part", "offset", "move", "page", "gon", "PO", "points", "type", "down", "pointer", "level", "area", "start", "mark", "position", "pt", "data", "index", "k", "key", "number", "p", "pos", "zone", "end", "span", "q", "Point", "o", "pad", "gap", "parent", "code", "x", "patch", "P", "block", "step"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String args[]){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int count = 0;\\n    int[] ary = new int[n];\\n    for(int c = 0;c<n;c++){\\n      ary[c] = sc.nextInt();\\n    }\\n    for(int c = 1;c<n-1;c++){\\n      if(ary[c]>ary[c-1]&&ary[c+1]>ary[c]){\\n        count++;\\n      }else if(ary[c+1]<ary[c]&&ary[c]<ary[c-1]){\\n        count++;\\n      }\\n    }\\n    System.out.println(count);\\n  } \\n}", "target": "96", "substitutes": {"sc": ["sr", "ch", "lc", " Sc", "sys", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "server", "uc", "cr", "esc", "sq", "scan", "osc", "out", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "ser", "dc", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "pc", "ner", "ci", "asc", "screen", "mc", "sci"], "n": ["j", "len", "sn", "ns", "in", "d", "no", "z", "v", "m", "r", "en", "y", "network", "nc", "t", "nb", "k", "nt", "cn", "e", "number", "p", "ne", "f", "net", "q", "o", "coll", "w", "s", "i", "N", "num", "l", "x", "u", "all", "size", "b"], "count": ["id", "base", "left", "lc", "error", "h", "counter", "ct", "check", "length", "len", "offset", "d", "type", "call", "now", "ac", "current", "Count", "cc", "core", "index", "cat", "number", "p", "e", "f", "cond", "cache", "carry", "found", "C", "cur", "coll", "col", "conf", "comp", "i", "parent", "code", "l", "sum", "info", "loop", "all", "depth", "size", "list", "b", "total"], "ary": ["one", "counter", "or", "ory", "er", "pair", "ARY", "dim", "coord", "ray", "reference", "ari", "arry", "na", "aries", "primary", "hello", "ior", "list", "center", "bare", "ctor", "nor", "ror", "ery", "http", "cross", "type", "default", "pointer", "inter", "request", "early", "number", "arr", "mode", "ere", "next", "over", "ity", "maybe", "ref", "ner", "arc", "arity", "ar", "ordered", "air", "error", "aria", "arian", "ario", "area", "y", "re", "mm", "inf", "itary", "any", "ore", "null", "order", "are", "ter", "other", "also", "ry", "array", "secondary", "ard", "way", "ay", "ear", "iary", "bar", "system", "avier", "si", "arial", "aro"], "c": ["cu", "ch", "cf", "lc", "loc", "cb", "ct", "bc", "in", "d", "inc", "fc", "uc", "z", "v", "cr", "call", "ac", "r", "y", "ec", "nc", "t", "ce", "cc", "cor", "k", "chain", "vc", "e", "cn", "p", "cat", "f", "unc", "cy", "dc", "cache", "q", "rc", "cm", "C", "ca", "cur", "coll", "o", "col", "w", "s", "i", "cs", "code", "l", "cl", "pc", "oc", "x", "arc", "ci", "u", "g", "cp", "mc", "b", "co"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int a[] = new int[5];\\n        int b[] = new int[5];\\n        int c[] = new int[5];\\n        int min = 0;\\n        int minsize = 9;\\n        int sum = 0;\\n\\n        for (int i = 0; i < 5; i++) {\\n            a[i] = scan.nextInt();\\n            b[i] = a[i] % 10;\\n            c[i] = a[i] / 10;\\n            if((b[i] <= minsize) && (b[i] != 0)){\\n                min = i;\\n                minsize = b[i];\\n            }\\n        }\\n\\n        for(int x = 0; x < min ; x++){\\n\\n            if(b[x] != 0 ){\\n                c[x] = c[x] + 1;\\n            }\\n            sum = c[x]*10 + sum;\\n        }\\n\\n        for(int y = (min + 1) ; y < 5 ; y++){\\n\\n            if(b[y] != 0 ){\\n                c[y] = c[y] + 1;\\n            }\\n            sum = c[y]*10 + sum;\\n        }\\n\\n        sum = sum + c[min]*10 + b[min];\\n        System.out.println(sum);\\n\\n    }\\n}", "target": "63", "substitutes": {"scan": ["sc", "can", " scanner", "sys", "or", "util", "se", "in", "conv", "nl", "get", "er", "an", "io", "v", "sync", "r", "out", "search", "read", "con", "stat", "clean", "ln", "chan", "cat", "n", "win", "walk", "ans", "span", "na", "feed", "run", "pass", "skip", "conf", "use", "l", "Scan", "parse", "ner", "nan", "ann", "all", "gen"], "a": ["api", "ba", "ab", "oa", "fa", "audio", "aaa", "aa", "sa", "d", "am", "array", "v", "an", "area", "m", "ac", "r", "A", "ga", "ad", "e", "p", "n", "alpha", "f", "ea", "pa", "aj", "ca", "as", "va", "na", "o", "s", "ama", "l", "au", "af", "ae", "auto", "u", "ai"], "b": ["wb", "j", "base", "ch", "ib", "ab", "h", "cb", "ba", "body", "orb", "bin", "bc", "xb", "book", "d", "bb", "bh", "lib", "bf", "z", "v", "gb", "ob", "m", "r", "db", "t", "B", "nb", "k", "e", "be", "p", "n", "mb", "f", "br", "bis", "bs", "binary", "o", "w", "sb", "s", "lb", "l", "bi", "fb", "bas", "bd", "auto", "u", "g", "rb"], "c": ["sc", "cu", "ch", "cf", "lc", "h", "ct", "d", "uc", "z", "v", "cr", "m", "ac", "r", "ce", "t", "cc", "k", "e", "cat", "p", "n", "cy", "f", "dc", "cache", "q", "rc", "cm", "C", "ic", "ca", "o", "col", "w", "s", "cs", "code", "l", "cl", "pc", "ci", "u", "g", "cp", "mc", "config"], "min": ["man", "len", "in", "limit", "start", "m", "mon", "dim", "pos", "mine", "use", "MIN", "version", "sol", "minus", "mini", "minute", "d", "type", "z", "is", "index", "key", "e", "f", "arm", "span", "sort", "mins", "local", "sign", "name", "work", "small", "sin", "Min", "init", "ix", "area", "lower", "mn", "p", "n", "win", "partial", "max", "low", "skip", "any", "ain", "block", "ai", "scale", "state", "id", "pri", "j", "part", "v", "miss", "on", "lock", "s", "code", "size"], "minsize": ["worksization", "ssized", "yrsize", "mnense", "mnized", "partsized", "mnize", " minsite", " minsized", "minssize", "linsization", " minsense", "minsization", "yrsization", "worksense", "blocksized", "linsize", "worksize", "ssization", "ssite", " minsization", "worksized", "partsization", "blocksize", "partsize", "linssize", "ssize", "blockssize", "yrsized", "blocksization", "partsite", "minsite", "yrssize", "minsense", "minsized", "mnization", "linsized"], "sum": ["hash", "vol", "fill", "h", "su", "comment", "len", "bin", "cum", "unit", "sa", "Sum", "inc", "share", "cover", "ss", "summary", "count", "seed", "spread", "start", "match", "miss", "mem", "out", "ul", "sh", "pack", "gam", "mean", "index", "value", "key", "cat", "add", "alpha", "cache", "max", "acc", "fat", "cal", "skip", "average", "pass", "sort", "sign", "use", "up", "sol", "si", "weight", "parse", "num", "frac", "loss", "info", "diff", "u", "cost", "size", "um", "balance", "scale", "total"], "i": ["id", "j", "api", "ri", "pi", "d", "mi", "ip", "ii", "cli", "z", "v", "ix", "io", "m", "is", "ori", "gi", "index", "e", "p", "fi", "qi", "f", "ji", "ki", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "ie", "oi", "yi", "si", "bi", "hi", "info", "zi", "ci", "u", "ni", "ti", "uri", "ai", "I", "vi"], "x": ["id", "j", "px", "wx", "h", "yx", "xx", "rx", "ux", "fx", "ady", "in", "d", "xy", "cross", "xt", "xxx", "z", "v", "ix", "m", "tx", "xs", "index", "data", "k", "key", "e", "p", "n", "ex", "on", "f", "xi", "wa", "xp", "w", "ax", "any", "act", "code", "ya", "l", "num", "dx", "lex", "X", "time", "u", "dy"], "y": ["id", "py", "j", "yt", "yr", "h", "wy", "ady", "d", "xy", "ry", "gy", "hy", "z", "ny", "m", "yy", "year", "ay", "t", "iny", "yo", "Y", "k", "key", "cy", "ty", "p", "n", "oy", "f", "e", "ym", "dy", "bot", "ky", "o", "vy", "col", "ey", "w", "s", "iy", "zy", "ya", "yi", "l", "any", "hi", "u", "ye", "sy"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main { \\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int N = in.nextInt();\\n        int count = 0;\\n        \\n        boolean primes[] = new boolean [100000000];\\n        for(int n = 2; n < primes.length; n++){\\n            if(primes[n]) continue;\\n            for(int m = 2 * n; m < primes.length; m += n){\\n                primes[m] = true;\\n            }\\n        }\\n               \\n        while (N != 0) {\\n            int num = in.nextInt();\\n            if (!primes[num]) count++;\\n            N--;\\n        }\\n        \\n        System.out.println(count);\\n    }\\n}", "target": "226", "substitutes": {"in": ["token", "inner", "login", "again", "doc", "h", "conn", "file", "line", "str", "or", "bin", "fa", "query", "d", "init", "inc", "din", "err", "lib", "user", "c", "is", "r", "out", "con", "input", "ln", "min", "fe", "serv", "data", "session", "re", "loader", "p", "isin", "f", "on", "win", "IN", "inn", "ic", "as", "connection", "image", "In", "ini", "fin", "i", "readable", "l", "log", "kin", "exec", "x", "g", "lin", "socket", "reader", "buffer", "b", "source", "ins"], "N": ["Ni", "J", "Ns", "F", "NM", "sn", "NL", "no", "c", "Num", "Count", "Number", "T", "B", "NT", "nb", "nt", "NS", "number", "R", "L", "K", "NR", "Len", "C", "O", "D", "M", "S", "Z", "V", "X", "P", "Size", "I", "G"], "count": ["id", "h", "counter", "length", "len", "no", "err", "limit", "child", "last", "_", "z", "call", "c", "start", "Count", "out", "index", "nb", "nt", "key", "number", "p", "L", "cache", "found", "C", "test", "M", "i", "code", "keep", "sum", "depth", "size", "list", "b", "total", "name"], "primes": ["PRiques", "prime", "Procks", " prices", "pime", "triimes", " prpects", "porimes", "prutes", "ptimes", "prtimes", "prediques", "Prpects", "proppects", "rimes", " prtimes", "tricing", "rime", "porudes", "Prtimes", "priques", "PRimes", "Prims", "tritimes", "Primes", " prims", "predtimes", "porutes", "predicing", "propions", "pices", "portimes", "procks", "Prions", "triutes", "triques", "PRtimes", "proptimes", "propices", "propocks", "predimes", "propims", " prutes", "prims", "triudes", "prions", "propimes", "pims", "pricing", " prudes", "trimes", "rtimes", "PRicing", " prions", " prires", "pires", "prudes", "Prires", "pimes", " prime", "pocks", " procks", "prpects", "rims", "prires", "trtimes", "prices"], "n": ["j", "nn", "conn", "sn", "ns", "nu", "d", "no", "v", "an", "c", "z", "en", "y", "nc", "t", "ln", "mn", "nb", "ng", "k", "nt", "un", "ne", "e", "p", "cn", "f", "on", "dn", "net", "ym", "number", "o", "w", "s", "i", "fn", "rn", "l", "nm", "x", "ni", "u", "size", "b", "name"], "m": ["tm", "j", "mut", "h", "a", "mu", "dm", "fm", "mi", "d", "am", "om", "md", "sm", "v", "im", "c", "r", "y", "mon", "mn", "mand", "dim", "e", "gm", "p", "wm", "f", "ym", "pm", "mm", "cm", "module", "o", "km", "M", "i", "bm", "l", "nm", "vm", "nom", "x", "nam", "mad", "u", "ms", "mo", "mom", "um", "mc", "b"], "num": ["id", "uni", "nn", "loc", "conn", "bin", "nu", "unit", "node", "inc", "om", "c", "Num", "en", "out", "con", "uu", "nc", "ul", "mn", "bn", "nr", "nb", "un", "number", "on", "umi", "col", "i", "fn", "rn", "nm", "NUM", "nom", "block", "nam", "u", "ni", "mom", "um", "b"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Comparator;\\nimport java.util.List;\\nimport java.util.Scanner;\\nimport java.util.stream.Collectors;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    private void run() {\\n        Scanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n        List<Integer> p = new ArrayList<>();\\n        for (int i = 0; i < N; i++) {\\n            p.add(i, scanner.nextInt());\\n        }\\n        List<Integer> q = p.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList());\\n        int count = 0;\\n        for (int i = 0; i < N; i++) {\\n            if(p.get(i) != q.get(i)){\\n                count++;\\n            }\\n        }\\n        if(count == 2 || count == 0) {\\n            System.out.println(\"YES\");\\n        }else{\\n            System.out.println(\"NO\");\\n        }\\n\\n    }\\n\\n}", "target": "82", "substitutes": {"scanner": ["scaner", "Scanner", "aner", " scanf", "Scanf", "canter", "analyner", "caner", "Scaner", "canning", "analyer", "Scanker", "verner", "Scanter", "analyter", "analyning", "scanning", "anning", "scanker", "anner", "canner", "verter", "scanter", "Scanning", "anker", " scaner", "analyker", "scanf", " scanter", "verf", "verer"], "N": ["Q", "Ne", "J", "Ns", "F", "E", "Part", " n", "NB", "Num", "H", "Count", "Number", "T", "B", "OS", "Y", "NT", "Na", "NS", "n", "R", "L", "K", "W", "Len", "C", "O", "D", "M", "Z", "S", "X", "V", "NN", "P", "I", "G"], "p": ["pp", "py", "j", "lp", "a", "po", "tp", "pi", "array", "ip", "ps", "pe", "v", "c", "y", "fp", "t", "np", "pre", "wp", "e", "n", "sp", "queue", "pa", "cache", "ap", "o", "pr", "per", "l", "pl", "pc", "patch", "mp", "P", "u", "cp", "jp", "pins", "list"], "i": ["id", "slice", "inner", "j", "ri", "h", "pi", "mu", "part", "my", "in", "d", "init", "mi", "resource", "ip", "ii", "ori", "v", "io", "c", "ix", "m", "z", "abi", "y", "gi", "index", "data", "phi", "key", "e", "n", "qi", "f", "ji", "ui", "me", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "ie", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "I"], "q": ["pp", "Q", "ch", "j", "check", "query", "pe", "iq", "z", "v", "sq", "c", "m", "qt", "t", "sh", "qu", "qs", "qq", "k", "e", "n", "queue", "qi", "f", "quant", "requ", "w", "dq", "qa", "P", "u", "ue", "que"], "count": ["id", "base", "pool", "error", "counter", "check", "length", "len", "part", "other", "force", "err", "group", "process", "limit", "child", "type", "default", "level", "c", "now", "start", "match", "Count", "index", "key", "number", "n", "f", "age", "cache", "more", "found", "test", "coll", "col", "allow", "parent", "code", "keep", "sum", "num", "weight", "loop", "all", "depth", "size", "list", "total", "name"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        int startA = 0;\\n        boolean isA = false;\\n        int endZ = 0;\\n        for (int i=0; i<s.length();i++) {\\n            if (!isA && \"A\".equals(s.substring(i,i+1))) {\\n                startA = i;\\n                isA = true;\\n            } else if (\"Z\".equals(s.substring(i,i+1))) {\\n                endZ = i;\\n            }\\n        }\\n        System.out.println(endZ - startA +1);\\n    }\\n}", "target": "109", "substitutes": {"sc": ["sw", "enc", "ch", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sub", "ec", "nc", "sec", "sh", "cor", "cus", "desc", "proc", "sp", "src", "ocr", "rc", "system", "anc", "cur", "cs", "cl", "pc", "ner", "ci", "asc", "g", "mc", "sci"], "s": ["opens", "lines", "gs", "h", "fs", "sys", "su", "a", "str", "ns", "js", "in", "ss", "c", "is", "m", "abs", "south", "parts", "aws", "stat", "os", "xs", "t", "input", "es", "strings", "ds", "e", "ses", "p", "f", "ssl", "ans", "src", "string", "bis", "ws", "b", "sb", "S", "l", "si", "stats", "words", "sl", "u", "ls", "your", "sv", "source", "ins"], "startA": ["setAW", " startB", " startZ", " startAlpha", "startB", "startAlpha", "StartZ", "StartB", "stopCA", "startCA", "setI", "StartA", "setA", "stopZ", "artI", " startCA", "startAW", "endAlpha", "StartI", "StartAz", "stopA", "endAz", "startAz", "setZ", "endCA", "endA", "stopAlpha", "startZ", "endB", "artZ", " startAz", "startI", "StartAW", "artAW", "artA"], "endZ": ["endedZE", "pendA", "pendz", "endz", "startX", "endedZ", " endAz", " endz", "pendZA", "startZA", "endedAz", "endZE", "startZE", "endZA", "casez", "endAz", "startAz", " endX", " endZA", "endX", "endA", "pendZ", "startZ", " endA", "startz", "endedA", "caseZE", "caseX", " endZE", "caseZ"], "i": ["id", "slice", "j", "iii", "lc", "ri", "api", "a", "ami", "pi", "I", "in", "d", "ii", "ip", "z", "v", "ix", "start", "io", "abi", "ori", "t", "gi", "index", "k", "phi", "e", "p", "n", "f", "qi", "ji", "end", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "eni", "ini", "di", "oi", "ie", "isi", "chi", "yi", "si", "bi", "hi", "info", "zi", "x", "ci", "u", "uri", "fi", "ai", "ti"], "isA": [" isAs", "isAA", "bisA", "isa", " isAn", " isP", "isAs", "ISZ", "isaP", "isP", "ISAA", "hasZ", "isaAn", "isoZ", "isZ", "asArray", "hasAA", " isArray", " isa", "asA", "ISA", "isaA", "hasA", "bisP", "isArray", "isoAA", "startAs", "isoA", "asa", "bisa", "starta", "isaa", "bisAn", "isAn", "startArray", "asAs"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int K = sc.nextInt();\\n    int S = sc.nextInt();\\n    int ans = 0;\\n    int sum = 0;\\n    \\n    for(int i=0; i<=K; i++){\\n      for(int j=0; j<=K; j++){\\n        sum = S-(i+j);\\n        if(0 <= sum && sum <= K){\\n          ans++;\\n        }\\n      }\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "29", "substitutes": {"sc": ["sw", "ch", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "com", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "ser", "acc", "ocr", "rc", "system", "anc", "sche", "ca", "na", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "cv", "sci"], "K": ["Q", "J", "F", "E", "sk", "KI", "KE", "HK", "H", "T", "Y", "k", "Kin", "L", "ks", " k", "C", "O", "PK", "Ku", "D", "KA", "M", "KC", "KN", "KK", "Z", "N", "SK", "U", "KS", "KB", "Ak", "X", "V", "P", "Sk", "Size", "I", "G"], "S": ["SH", "Si", "SS", "SU", "J", "Su", "F", "Sum", "CS", "H", "A", "T", "B", "Y", "NS", "R", "L", "SE", "ISS", "C", "O", "D", "M", "s", "U", "SK", "N", "Z", "KS", "SI", "V", "X", "P", "MS", "I", "G"], "ans": [" scans", "can", "lines", "outs", "ats", " means", "cons", "errors", "len", "lan", "sk", "ns", "ons", "AN", "aus", "ss", "nas", "amps", "an", "asts", "scan", "reads", "ars", "ras", "os", "aned", "es", "anon", "ds", "ents", "oss", "plan", "nos", "ids", "ks", "anc", "ANS", "na", "as", "blocks", "unks", "s", "acts", "cs", "ants", "eps", "ops", "ann", "ls", "annot", "ins"], "sum": ["vol", "fill", "su", "a", "sk", "offset", "cos", "se", "in", "sa", "am", "Sum", "ss", "ind", "count", "an", "start", "spread", "match", "miss", "shape", "min", "sh", "mean", "index", "k", "ass", "key", "oss", "pos", "n", "alpha", "sp", "span", "acc", "zero", "fat", "na", "average", "s", "sign", "act", "num", "si", "weight", "parse", "mask", "total", "u", "ann", "size", "um", "scale", "cal"], "i": ["id", "ri", "ami", "pi", "mu", "in", "mi", "init", "ii", "ip", "ind", "z", "v", "io", "ix", "is", "y", "gi", "index", "k", "phi", "p", "f", "qi", "ji", "ki", "ui", "xi", "li", "iu", "o", "di", "ini", "ie", "chi", "si", "bi", "hi", "zi", "x", "ci", "u", "ni", "ai", "I"], "j": ["ch", "h", "ja", "J", "a", "part", "ij", "js", "d", "jj", "ii", "z", "v", "ix", "start", "m", "r", "y", "jl", "k", "key", "p", "n", "f", "qi", "ji", "aj", "end", "q", "ui", "li", "o", "ie", "l", "si", "uj", "x", "jo", "u", "oj", "ni", "jp", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\tStringBuilder sa = new StringBuilder(in.next());\\n\t\tStringBuilder sb = new StringBuilder(in.next());\\n\t\tStringBuilder sc = new StringBuilder(in.next());\\n\\n\t\tchar nextTurn = 'a';\\n\t\tint N = sa.length() + sb.length() + sc.length();\\n\t\twhile(true){\\n\t\t\tif (nextTurn == 'a') {\\n\t\t\t\tif (sa.length() == 0) {\\n\t\t\t\t\tSystem.out.println(\"A\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tnextTurn = sa.charAt(0);\\n\t\t\t\tsa.delete(0, 1);\\n\t\t\t} else if (nextTurn == 'b') {\\n\t\t\t\tif (sb.length() == 0) {\\n\t\t\t\t\tSystem.out.println(\"B\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tnextTurn = sb.charAt(0);\\n\t\t\t\tsb.delete(0, 1);\\n\t\t\t} else {\\n\t\t\t\tif (sc.length() == 0) {\\n\t\t\t\t\tSystem.out.println(\"C\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tnextTurn = sc.charAt(0);\\n\t\t\t\tsc.delete(0, 1);\\n\t\t\t}\\n\t\t}\\n\t\tin.close();\\n\t}\\n}", "target": "11", "substitutes": {"in": ["id", "inner", "login", "again", "conn", "gin", "a", "str", "bin", "inas", "spin", "resource", "init", "inc", "din", "user", "err", "the", "asin", "c", "scan", "is", "inside", "r", "out", "con", "input", "ln", "min", "serv", "home", "n", "isin", "win", "f", "arin", "ex", "IN", "rin", "inn", "running", "as", "connection", "binary", "image", "In", "ic", "ini", "s", "fin", "i", "nin", "version", "log", "kin", "pin", "exec", "config", "into", "lin", "socket", "ai", "reader", "b", "ins"], "sa": ["sea", "ba", "oa", "su", "a", "isa", "asha", "fa", "aa", "se", "sac", "ka", "apa", "ta", "an", "ac", "esa", "Sa", "sh", "ga", "SA", "sha", "pa", "osa", "la", "wa", "na", "as", "ca", "va", "s", "ama", "asa", "asu", "si", "za", "da", "sam", "au", "asi", "ae", "ai", "sta"], "sb": ["sr", "wb", "obb", "soc", "ib", "sg", "cb", "bg", "zb", "ba", "sn", "abb", "sk", "bc", "sf", "bb", "bh", "ruby", "pb", "bf", "usb", "gb", "sq", "ub", "ob", "SB", "sta", "stab", "sub", "sch", "sh", "nb", "sp", "mb", "bp", "ssl", "eb", "src", "bs", "sbm", "s", "lb", "si", "sup", "fb", "sl", "sv", "bl", "ls", "rb", "b", "source", "sci"], "sc": ["sw", "sea", "sr", "ch", "lc", "soc", "cb", "cer", "sk", "Sc", "bc", "scope", "SC", "sem", "sac", "uc", "cr", "sq", "c", "osc", "ac", "sync", "tc", "sub", "sch", "ce", "cc", "sh", "sec", "desc", "cat", "sp", "dc", "src", "acc", "rc", "anc", "sche", "ca", "cam", "cur", "coll", "s", "sign", "cs", "si", "sup", "cl", "pc", "asc", "cv", "b", "co", "sci"], "nextTurn": ["newWheel", "latestturn", "setTurn", " nextturn", "lastShape", "thisKick", "thisWan", "newPain", " nextKick", "NextPain", "lastLoop", " nextHand", "prevLoop", " nextLoop", "nextWheel", " nextShape", "frontTurn", "nextBrew", "frontturned", "nextturned", "nextShape", "frontturn", "nextWan", "nextPain", "extraBrew", "nextKick", "latestHand", "extraWan", "Nextturn", "openTurn", " nextPain", "thisBrew", "nextturn", " nextBrew", "thisPain", "NextTurn", " nextWheel", "prevTurn", "prevShape", "nextLoop", "setturn", "newTurn", "openKick", "setKick", "thisturn", "latestTurn", "openturn", "NextKick", "openHand", "newturn", "extraTurn", "lastturn", "extraturn", "prevturn", "frontKick", "setturned", "latestKick", "NextWheel", " nextturned", "nextHand", " nextWan", "thisTurn", "lastTurn"], "N": ["J", "Ns", "F", "NL", " n", "NB", "T", "B", "NI", "NT", "NS", "R", "n", "L", "ND", "K", "O", "NC", "C", "NA", "D", "SN", "M", "S", "Z", "V", "P", "I"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        long a = sc.nextLong();\\n        long b = sc.nextLong();\\n        long c = sc.nextLong();\\n        long d = sc.nextLong();\\n        long ans = 0, l = 0, as = 0, bs = 0;\\n\\n        if (c > d) {\\n            long f = c;\\n            c = d;\\n            d = f;\\n        }\\n\\n        l = lcm(c, d);\\n        as = (a - 1) - (((a - 1) / c) + ((a - 1) / d) - ((a - 1) / l));\\n        bs = b - ((b / c) + (b / d) - (b / l));\\n        ans = bs - as;\\n        System.out.println(ans);\\n        sc.close();\\n    }\\n    \\n    public static long lcm(long m, long n) {\\n        return m * (n / gcd(m, n));\\n    }\\n    \\n    public static long gcd(long a, long b) {\\n        if (b == 0) {\\n            return a;\\n        }\\n        return gcd(b, a % b);\\n    }\\n}\\n", "target": "9", "substitutes": {"sc": ["sw", "cont", "sr", "ch", "lc", "soc", " Sc", "loc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "cli", "fc", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "spec", "tc", "con", "sub", "nc", "sch", "cor", "sec", "sh", "cus", "cc", "ctx", "sp", "ser", "dc", "src", "rc", "system", "anc", "sche", "cam", "cur", "coll", "sb", "cs", "cl", "exp", "pc", "parse", "ner", "asc", "cv", "mc", "sci"], "a": ["api", "ba", "ab", "fa", "ma", "ai", "aaa", "aa", "sa", "am", "ah", "ha", "an", "area", "ac", "at", "ia", "r", "y", "ana", "A", "t", "ga", "mA", "ada", "ad", "e", "p", "alpha", "pa", "ea", "aj", "la", "wa", "ca", "na", "va", "o", "w", "s", "i", "ama", "da", "au", "x", "qa", "ae", "af", "u", "auto", "ar"], "b": ["wb", "one", "base", "j", "ib", "ab", "h", "ba", "body", "or", "aa", "bb", "bf", "z", "v", "ob", "r", "y", "db", "B", "big", "nb", "k", "ad", "e", "be", "p", "mb", "o", "w", "s", "sb", "i", "lb", "fb", "x", "bd", "u", "g", "bl", "rb"], "c": ["cu", "ch", "cf", "lc", "h", "ab", "cd", "uc", "z", "v", "ac", "r", "y", "ec", "con", "nc", "t", "ce", "cc", "k", "cn", "e", "cy", "p", "dc", "ca", "C", "o", "w", "s", "i", "cs", "x", "ci", "u", "g", "cp"], "d": ["j", "nd", "h", "cd", "in", "dd", "fd", "z", "v", "r", "y", "db", "ld", "t", "dt", "dl", "ds", "ad", "e", "p", "dn", "df", "dc", "sd", "D", "o", "di", "w", "s", "i", "da", "x", "bd", "u", "g", "dy", "pd"], "ans": ["lines", "vals", "gs", "ba", "mas", "ab", "ats", "outs", "cons", "errors", "fa", "lan", "ons", "ns", "bc", "sa", "bb", "aus", "ss", "an", "asts", "ras", "ations", "ars", "ases", "os", "tta", "es", "cas", "ds", "als", "ks", "span", "acl", "la", "na", "ca", "les", "s", "cs", "vs", "eps", "au", "ann", "ls", "ase", "ins"], "l": ["j", "lc", "lp", "lu", "h", "kl", "al", "nl", "z", "v", "an", "r", "t", "ln", "dl", "e", "p", "L", "la", "li", "los", "o", "w", "s", "lb", "i", "el", "log", "sl", "u", "g", "ls", "ll"], "as": ["aps", "ast", "aw", "As", "ab", "mas", "ai", "rs", "al", "aa", "sa", "am", "AS", "an", "ras", "is", "ac", "r", "ars", "os", "acs", "cas", "es", "ak", "p", "pa", "la", "av", "ca", "s", "ays", "cs", "asa", "au", "bas", "af", "g", "ar", "ase"], "bs": ["base", "gs", "ba", "ab", "fs", "mas", "ns", "bc", "bb", "ss", "ps", "pb", "abc", "bes", "abs", "bos", "ases", "bits", "os", "es", "cas", "ds", "als", "bp", "ks", "la", "bis", "na", "s", "BS", "lb", "us", "sb", "cs", "bi", "vs", "obs", "fb", "bl", "ls", "bps", "ins"], "f": ["cf", "h", "F", "fa", "fc", "fd", "bf", "z", "v", "r", "y", "t", "fe", "e", "p", "df", "o", "w", "s", "i", "x", "u", "g", "fl"], "m": ["j", "h", "ma", "mu", "dm", "mi", "am", "om", "md", "sm", "v", "an", "r", "y", "mn", "mean", "e", "gm", "p", "machine", "ym", "mm", "cm", "o", "M", "s", "i", "bm", "x", "g", "u", "ms", "um", "mc"], "n": ["j", "nn", "h", "nu", "ns", "no", "v", "an", "z", "r", "en", "nc", "t", "nb", "k", "un", "e", "ne", "p", "dn", "net", "o", "w", "s", "i", "N", "num", "x", "nan", "g", "ni", "u", "name"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner scanner = new Scanner(System.in);\\n    int n = scanner.nextInt();\\n    int m = n;\\n    \\n    int d = 1;\\n    while(m/10!=0){\\n      d++;\\n      m = m/10;\\n    }\\n    \\n    int count = 0;\\n    for(int i = 0; i < d - 1; i++){\\n      if(i%2==0){\\n        count += (int)Math.pow(10, (double)(i + 1)) - (int)Math.pow(10, (double)i);\\n      }\\n    }\\n    if(d%2==1){\\n      count += n - (int)Math.pow(10, (double)(d - 1)) + 1;\\n    }\\n    System.out.println(count);\\n  }\\n}\\n", "target": "135", "substitutes": {"scanner": ["canler", "scaner", "Scanner", "syner", "scanener", "Scanener", " scanler", "syncer", "canter", "caner", "scancer", "synner", "Scaner", "scanler", "Scanter", "canner", "synener", "scanter", "Scancer", "Scanler", " scaner", "cancer", "canener", " scanter"], "n": ["j", "nn", "a", "ns", "in", "z", "v", "c", "r", "en", "y", "nc", "t", "mn", "k", "nt", "cn", "e", "number", "p", "f", "o", "M", "s", "N", "l", "num", "x", "u", "b"], "m": ["j", "h", "a", "dm", "fm", "in", "mi", "md", "v", "z", "c", "im", "r", "y", "t", "mon", "mn", "k", "e", "p", "f", "cm", "hm", "o", "M", "w", "s", "l", "x", "u", "b"], "d": ["id", "j", "nd", "h", "dm", "in", "dd", "ind", "md", "z", "v", "c", "start", "r", "t", "dt", "dl", "k", "ds", "dim", "e", "p", "dn", "f", "dc", "dat", "end", "cm", "sd", "D", "o", "w", "s", "l", "da", "x", "du", "u", "dy", "b"], "count": ["id", "base", "error", "h", "counter", "check", "length", "part", "err", "report", "array", "group", "process", "child", "last", "z", "v", "c", "start", "now", "Count", "core", "data", "nt", "number", "p", "add", "f", "cond", "cache", "more", "carry", "found", "test", "use", "allow", "code", "sum", "num", "common", "weight", "info", "log", "handle", "diff", "depth", "size", "list", "b", "total", "work"], "i": ["id", "j", "ri", "pi", "mu", "I", "in", "mi", "ii", "ip", "ind", "z", "v", "ix", "c", "ori", "io", "r", "y", "t", "gi", "phi", "e", "p", "f", "qi", "ui", "xi", "li", "iu", "o", "di", "ini", "ie", "yi", "l", "si", "bi", "x", "zi", "ci", "u", "ti", "ai", "b"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint N = sc.nextInt();\\n\t\tint[] X = new int[N];\\n\t\tint min =0;\\n\t\tint answer = Integer.MAX_VALUE;\\n      \\n\t\tfor(int i=0; i<N; i++) {\\n\t\t\tX[i] = sc.nextInt();\\n\t\t}\\n      \t//\u6765\u308b\u305f\u3073\u306bmin\u3092\u521d\u671f\u5316\u3059\u308b\\n      \t//\u5236\u7d04\u4ee5\u5185\u3067\u7e70\u308a\u8fd4\u3059\\n\t\tfor(int j=1;  j<=100; j++) {\\n\t\t\tmin = 0;\\n          //\u4f53\u529b\u6d88\u8cbb(Xi-P)\u306e2\u4e57\u3092\u8a08\u7b97\u3057min\u306b\u52a0\u7b97\\n\t\t\tfor(int i=0; i<N; i++) {\\n\t\t\tmin += (X[i]-j)*(X[i]-j);\\n\t\t\t}\\n          //answer\u306bmin\u3068MAX_VALUE\u3092\u6bd4\u3079\u6700\u5c0f\u5024\u3092\u5165\u308c\u308b\\n\t\t\tanswer = Math.min(min,answer);\\n\t\t}\\n\t\tSystem.out.println(answer);\\n\t}\t\t\\n}", "target": "17", "substitutes": {"sc": ["sw", " Sc", "sys", "cer", "st", "str", "Sc", " SC", "bc", "se", "SC", "sf", "sem", " scr", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sh", "sp", "ser", "src", "rc", "system", "anc", "sche", "cur", "sb", "cs", "l", "cl", "pc", "exec", "ner", "asc", "sci"], "N": ["Q", "Ne", "Ni", "J", "Ns", "F", "NO", "E", "NM", "RN", " n", "NB", "H", "network", "T", "B", "NE", "NI", "Y", "NT", "NS", "n", "R", "L", "ND", "K", "NR", "C", "O", "NA", "D", "MN", "M", "KN", "Z", "S", "V", "NN", "P", "Size", "GN", "I"], "X": ["Q", "XM", "J", "F", "E", "ZX", "XP", "H", "XXX", "A", "T", "TX", "Y", "XL", "IV", "R", "L", "K", "C", "M", "U", "Z", "S", "IP", "x", "V", "P", "ID", "Extra", "Size", "IX", "XX", "I"], "min": ["id", "mid", "j", "Mini", "Min", "step", "in", "d", "init", "ind", "start", "m", "mean", "pre", "pos", "n", "p", "max", "skip", "MIN", "val", "mins", "all", "ai"], "answer": ["fix", "best", "inc", "med", "help", "last", "default", "abs", "current", "est", "mean", "nb", "ad", "pos", "prev", "aj", "cap", "inf", "ap", "log", "sum", "cl", "frac", "mad", "all", "null", "gen", "lim", "scale"], "i": ["id", "slice", "inner", "j", "ri", "pi", "mu", "my", "in", "mi", "init", "ip", "ii", "z", "v", "ix", "start", "abi", "io", "gi", "index", "uli", "e", "p", "n", "fi", "f", "qi", "ui", "xi", "li", "iu", "it", "multi", "b", "di", "ini", "oi", "chi", "si", "bi", "info", "x", "ci", "u", "ti", "mini", "uri", "ai", "I"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n    \ttry(Scanner sc = new Scanner(System.in)) {\\n\\n    \t\tint N = sc.nextInt();\\n    \t\tint T = sc.nextInt();\\n    \t\tint min = 10000000;\\n    \t\twhile(N-->0) {\\n    \t\t\tint c = sc.nextInt();\\n    \t\t\tint t = sc.nextInt();\\n    \t\t\tif(t<=T && c<min) {\\n    \t\t\t\tmin = c;\\n    \t\t\t}\\n    \t\t}\\n    \t\tSystem.out.println(min==10000000? \"TLE\" : min);\\n\\n    \t}\\n    }\\n}\\n", "target": "8", "substitutes": {"N": ["Ne", "F", "E", "NL", "No", "Max", " n", "Num", "H", "A", "NE", "NI", "B", "Sn", "Y", "NT", "NS", "n", "R", "L", "K", "Len", "C", "O", "NC", "D", "SN", "CN", "M", "U", "S", "Z", "X", "V", "P", "Size", "I", "G"], "T": ["Total", "J", "F", "length", "E", "Min", "TS", "H", "B", "Y", "NT", "n", "R", "L", "TC", "CT", "K", "max", "W", "C", "O", "D", "M", "i", "U", "Z", "S", "X", "V", "P", "I", "G"], "min": ["id", "pri", "small", "token", "none", "model", "section", "po", "len", "Mini", "Min", "unit", "in", "d", "init", "ind", "limit", "count", "type", "v", "start", "m", "area", "spec", "miss", "stat", "lower", "sec", "value", "pre", "index", "minimum", "dim", "un", "key", "pos", "n", "p", "f", "max", "partial", "span", "wa", "cm", "skip", "sort", "MIN", "act", "version", "sol", "cl", "x", "don", "diff", "mini", "size", "temp", "state"], "c": ["sc", "cu", "cf", "lc", "loc", "ct", "in", "d", " C", "count", "uc", "z", "v", "cr", "ac", "r", "y", "en", "ec", "tc", "nc", "ce", "k", "cy", "p", "n", "f", "dc", "max", "rc", "toc", "cm", "C", "ca", "o", "col", "i", "cs", "l", "pc", "x", "ci", "u", "cp", "size", "b"], "t": ["j", "h", "ct", "in", "d", "ta", "z", "v", "at", "start", "m", "y", "tc", "dt", "k", "nt", "e", "p", "n", "f", "C", "tu", "ot", "o", "i", "l", "x", "tz", "u", "ti", "b", "ts"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner s = new Scanner(System.in);\\n\t\t\\n\t\t\\n\t\tString ns = s.nextLine();\\n\t\tString str = s.nextLine();\\n\t\tint n = Integer.parseInt(ns);\\n//\t\tString str = \"2 3 1\";\\n\t\tint[] arr = new int[n+1]; \\n\t\tarr[0] = 0;\\n\t\tString sss[] = str.split(\"\\\\s\");\\n\t\tfor(int i=1;i<=n;i++) {\\n\\n\t\t\tarr[i] = Integer.parseInt(sss[i-1]);\\n\t\t\t\\n\t\t}\\n\t\t\\n\t\tint[] a = new int[n+1];\\n\t\t\\n\t\ta[0] = 0;\\n\t\t\\n\t\tfor(int i=1;i<=n;i++) {\\n\t\t\ta[(arr[i])] = i;\\n\t\t}\\n\t\tfor(int i=1;i<=n;i++) {\\n\t\t\tSystem.out.print(a[i]+\" \");\\n\t\t}\\n\t}\\n\\n}", "target": "227", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s=sc.nextLine();\\n\t\tchar c;\\n\t\tint i,length=s.length();\\n\t\tfor(i=0;i<length;i++){\\n\t\t\tc=s.charAt(i);\\n\t\t\tif(Character.isLowerCase(c))System.out.print(Character.toUpperCase(c));\\n\t\t\telse if(Character.isUpperCase(c))System.out.print(Character.toLowerCase(c));\\n\t\t\telse System.out.print(c);\\n\t\t}\\n\t\tSystem.out.print(\"\\n\");\\n\t}\\n}\\n\\n", "target": "192", "substitutes": {"sc": ["sw", "ch", "soc", " Sc", "cer", "str", "Sc", " SC", "bc", "se", "SC", "sf", "scope", " scr", "ss", "server", "cr", "esc", "scan", "osc", "sync", "out", "ec", "nc", "cc", "sec", "sh", "desc", "sp", "src", "acc", "ocr", "rc", "system", "anc", "cs", "cl", "pc", "ner", "sl", "ci", "asc", "sci"], "s": ["gs", "h", "fs", "su", "a", "ns", "styles", "rs", "se", "in", "sf", "ss", "sets", "is", "os", "t", "strings", "es", "qs", "ds", "e", "ses", "n", "p", "f", "ans", "string", "ws", "as", "o", "b", "sb", "its", "S", "l", "si", "sl", "u", "ls", "sv", "ins"], "c": ["cont", "cu", "enc", "ch", "cf", "lc", "loc", "ct", "line", "str", "bc", "d", "fc", "uc", "character", "v", "cr", "esc", "m", "ac", "current", "r", "word", "nc", "t", "ce", "cc", "k", "vc", "e", "cy", "p", "n", "f", "dc", "char", "string", "C", "ic", "cur", "o", "coll", "col", "cs", "code", "l", "cl", "x", "arc", "ci", "u", "cp", "mc", "b"], "i": ["id", "j", "ch", "lc", "ri", "h", "pi", "in", "d", "ii", "ip", "ori", "v", "io", "is", "ix", "y", "t", "gi", "index", "k", "phi", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "l", "si", "bi", "info", "x", "ci", "ti", "g", "uri", "ai", "I"], "length": ["id", "slice", "php", "path", "distance", "strip", "lines", "form", "section", "height", "len", "part", "angle", "println", "limit", "count", "type", "character", "level", "start", "position", "iter", "size", "shape", "sh", "Length", "index", "lv", "key", "number", "p", "n", "f", "duration", "end", "string", "width", "ph", "range", "l", "text", "print", "load", "letter", "depth", "sequence", "total", "work"]}}
{"code": "import java.util.*;\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    String t = sc.next();\\n    int length = s.length();\\n    String ans = \"No\";\\n    for (int i = 0; i < length - 1; i++) {\\n      if (s.equals(t)) {\\n        ans = \"Yes\";\\n        break;\\n      }\\n      String rotateS = s.substring(length - 1 - i, length) + s.substring(0, length - 1 - i);\\n      if (rotateS.equals(t)) {\\n        ans = \"Yes\";\\n        break;\\n      }\\n    }\\n    System.out.println(ans);\\n\\n  }\\n}", "target": "220", "substitutes": {"sc": ["sw", "sr", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "sub", "ec", "nc", "sch", "search", "cc", "cor", "sh", "cus", "sp", "ser", "cle", "rc", "anc", "sche", "ca", "cur", "cs", "cl", "pc", "ner", "ci", "asc", "mc", "sci"], "s": ["gs", "su", "a", "ns", "sf", "in", "fts", "services", "ss", "ps", "sets", "v", "sq", "c", "is", "south", "parts", "y", "os", "xs", "es", "strings", "qs", "ds", "e", "ses", "n", "p", "f", "ssl", "ks", "string", "as", "o", "hs", "b", "source", "sb", "w", "cs", "S", "l", "si", "x", "sl", "tests", "u", "ls", "sv", "ts", "ins"], "t": ["token", "j", "h", "st", "a", "str", "d", "template", "tf", "the", "ta", "type", "v", "at", "c", "python", "m", "txt", "stop", "r", "y", "this", "T", "tt", "e", "ty", "p", "n", "f", "tools", "string", "it", "test", "S", "l", "x", "text", "u", "g", "rt", "null", "ant", "b", "ts"], "length": ["slice", "id", "distance", "path", "strip", "base", "left", "form", "section", "line", "len", "pi", "part", "angle", "tail", "delay", "limit", "zip", "count", "square", "type", "character", "level", "style", "split", "start", "url", "position", "iter", "point", "upper", "size", "shape", "lower", "value", "Length", "index", "padding", "number", "p", "division", "f", "duration", "find", "string", "li", "width", "ph", "range", "rest", "l", "info", "pattern", "text", "time", "reverse", "append", "depth", "sequence", "list", "total"], "ans": ["aps", "anas", "aces", "man", "anus", "ats", "a", "leans", "lan", "sk", "ns", "ens", "AN", "aning", "ons", "aus", "atan", "ss", "nas", "type", "vers", "an", "ras", "ams", "ars", "ros", "ana", "os", "urs", "tta", "aned", "acs", "cas", "activation", "ds", "ents", "oss", "san", "acers", "ares", "ads", "ks", "arts", "anc", "ANS", "na", "as", "ays", "ants", "ours", "eps", "argo", "ann", "ls", "annot", "ts", "ins"], "i": ["id", "j", "one", "ri", "a", "ami", "pi", "mu", "I", "in", "ii", "z", "v", "ix", "c", "io", "abi", "gi", "index", "phi", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "di", "ini", "oi", "ie", "yi", "chi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "ni", "uri", "ai", "b"], "rotateS": ["rotats", "rotateString", "rotectT", "rotaseS", "rotectString", "rotectS", "rotateT", "rotatT", " rotates", "RotateString", "RotateS", "rotizeS", " rotateT", "rotates", "RotateSS", "rotectSS", "rotateSS", "rotaseString", "rotizeT", "rotizes", "rotatS", "RotateT", "rotaseT", "rotaseSS"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Here your code !\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        long sum = 0;\\n        while(true) {\\n            sum = 0;\\n            String line = br.readLine();\\n            if(line.length()==1)\\n                if(Integer.parseInt(line)==0)break;\\n            for(int i=0;i<line.length();i++){\\n                sum += Integer.parseInt(String.valueOf(line.charAt(i)));\\n            }\\n            System.out.println(sum);\\n        }\\n    }\\n}", "target": "144", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\tint S = stdIn.nextInt();\\n\t\tint W = stdIn.nextInt();\\n\t\tif(S <= W){\\n\t\t\tSystem.out.println(\"unsafe\");\\n\t\t}\\n\t\telse{\\n\t\t\tSystem.out.println(\"safe\");\\n\t\t}\\n\t\tstdIn.close();\\n\t}\\n}", "target": "177", "substitutes": {"stdIn": ["stdOut", " stdInt", "astin", "standardOut", " stdin", "ssIn", "stdIns", "astIN", "gradIn", "ssOut", "adOut", "gradInt", " stdBridge", " stdOut", "astInt", "astIn", "ssIns", "adin", "stdin", " stdIns", "standardIns", "stdIN", "adBridge", "stdBridge", "standardIn", " stdIN", "ssIN", "gradOut", "adIN", "gradIN", "stdInt", "standardin", "standardIN", "standardBridge", "adIn", "gradin"], "S": ["US", "Q", "SH", "Si", "SS", "SU", "Su", "F", "ESS", "SC", "AS", "TS", "CS", "SR", "OSS", "SAN", "SF", "T", "OS", "Y", "SA", "NS", "R", "L", "SIGN", "K", "ISS", "SE", "C", "SN", "s", "SK", "N", "SI", "X", "V", "P", "DS", "SIZE"], "W": ["MW", "Q", "F", "E", "H", "T", "VW", "We", "Y", "GW", "SW", "EW", "R", "L", "K", "NW", "C", "O", "AW", "D", "WS", "w", "M", "U", "Z", "N", "V", "WE", "X", "P", "Wh", "I", "G"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        char[] arr = in.next().toCharArray();\\n        int x = 0;\\n        for (char c : arr) {\\n            if (c == '+') ++x;\\n            else --x;\\n        }\\n\\n        System.out.println(x);\\n    }\\n}", "target": "54", "substitutes": {"in": ["inner", "login", "again", "conn", "line", "bin", "cin", "query", "resource", "d", "init", "inc", "din", "err", "user", "scan", "is", "r", "this", "out", "con", "input", "ln", "min", "data", "gen", "p", "n", "ex", "f", "isin", "IN", "rin", "bis", "inn", "inf", "as", "pass", "In", "ini", "s", "fin", "i", "nin", "readable", "l", "log", "config", "pin", "exec", "lin", "reader", "b", "ins"], "arr": ["ch", "ab", "a", "str", "aa", "ARR", "err", "array", "arg", "v", "ars", "iter", "r", "out", "rr", "data", "cat", "batch", "Array", "arm", "br", "ray", "att", "Ar", "stack", "coll", "s", "i", "val", "fr", "parse", "arc", "ann", "all", "bl", "ar", "list", "b", "order"], "x": ["id", "px", "wx", "h", "yx", "xx", "rx", "fx", "mx", "d", "xy", "cross", "array", "xt", "xxx", "z", "v", "ix", "m", "y", "tx", "xf", "xs", "t", "index", "k", "key", "cy", "e", "p", "pos", "n", "f", "ex", "xc", "ctx", "xd", "max", "xi", "xp", "ww", "w", "ax", "i", "val", "code", "num", "dx", "lex", "X", "u", "my", "xes", "b"], "c": ["cu", "enc", "ch", "a", "str", "d", " C", "uc", "z", "v", "pointer", "esc", "m", "ac", "r", "word", "t", "k", "cat", "e", "p", "n", "f", "char", "C", "cur", "o", "col", "w", "s", "i", "code", "l", "arc", "ci", "u", "g", "b"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.nextLine();\\n\t\tString[] sh = s.split(\" \");\\n\t\tint n = Integer.parseInt(sh[0]);\\n\t\tint x = Integer.parseInt(sh[1]);\\n\\n\t\tList<Integer> list = new ArrayList<Integer>();\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint m = Integer.parseInt(sc.next());\\n\t\t\tlist.add(m);\\n\t\t\tx -= m;\\n\t\t}\\n\t\tCollections.sort(list);\\n\\n\t\tSystem.out.println(n + (int) (x / list.get(0)));\\n\\n\t\tsc.close();\\n\t}\\n}", "target": "3", "substitutes": {"sc": ["sw", "cont", "sr", "ch", "console", "lc", "soc", "cer", "or", "Sc", "squ", "bc", "sf", "SC", "se", "scope", "sem", "cli", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "sub", "nc", "sch", "cc", "cus", "sp", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "cl", "pc", "ner", "ci", "asc", "cv", "mc", "sci"], "s": ["sample", "small", "h", "sg", "sys", "su", "str", "ns", "js", "sf", "se", "in", "shell", "ss", "ps", "v", "sq", "c", "is", "aws", "r", "strings", "ses", "sp", "f", "p", "string", "b", "w", "sb", "S", "l", "si", "sl", "services", "sv", "source"], "sh": ["Sh", "sw", "small", "ch", "SH", "ash", "sth", "loc", "h", "scl", "so", "sk", "squ", "wh", "se", "shi", "kh", "bh", "ss", "ps", "osh", "sq", "sch", "gh", "qu", "Sl", "sha", "ih", "ksh", "rh", "ph", "hs", "zh", "uh", "th", "ish", "si", "cl", "sl", "eth", "ssh", "ls", "bash", "sv"], "n": ["j", "nn", "h", "sn", "ns", "in", "d", "nl", "z", "v", "c", "r", "en", "y", "network", "nc", "t", "nb", "index", "k", "nt", "e", "number", "p", "f", "net", "o", "w", "N", "l", "num", "nw", "u", "ni", "size", "b", "name"], "x": ["id", "xxxx", "nz", "j", "wx", "axis", "h", "xx", "rx", "ns", "in", "d", "no", "xy", "xxx", "z", "v", "ix", "c", "y", "xs", "nex", "t", "size", "index", "k", "e", "number", "p", "ex", "f", "xc", "q", "xi", "xp", "w", "ax", "l", "dx", "exp", "X", "status", "u", "xa", "expl", "xes", "b"], "list": ["ler", "listed", "base", "left", "lc", "pool", "le", "lp", "counter", "part", "array", "table", "group", "pe", "ml", "pair", "live", "lists", "word", "out", "t", "ul", "chain", "lv", "batch", "p", "queue", "L", "lock", "result", "la", "li", "cm", "stack", "coll", "low", "LIST", "we", "tree", "collection", "l", "ll", "cl", "set", "pl", "bl", "all", "ls", "sequence", "ist"], "i": ["id", "j", "ri", "pi", "mu", "mi", "ip", "ii", "im", "v", "c", "y", "gi", "phi", "e", "p", "f", "qi", "ji", "q", "ui", "me", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "oi", "ie", "si", "bi", "ci", "u", "ti", "ai", "I"], "m": ["mu", "dm", "fm", "mx", "mod", "d", "mi", "am", "rem", "om", "sm", "z", "v", "im", "c", "r", "y", "mn", "k", "e", "gm", "p", "machine", "f", "mr", "wm", "ym", "pm", "me", "mm", "cm", "module", "hm", "o", "M", "mac", "bm", "l", "vm", "em", "ms", "mo", "mini", "um", "b"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner cin = new Scanner(System.in);\\n        String S = cin.next();\\n\\n        S = S.replaceAll(\"eraser\", \"0\");\\n        S = S.replaceAll(\"erase\", \"0\");\\n        S = S.replaceAll(\"dreamer\", \"0\");\\n        S = S.replaceAll(\"dream\", \"0\");\\n        S = S.replaceAll(\"0\", \"\");\\n\\n        if (S.isEmpty()) {\\n            System.out.println(\"YES\");\\n        } else {\\n            System.out.println(\"NO\");\\n        }\\n    }\\n}", "target": "50", "substitutes": {"cin": ["MC", "cu", "inner", "can", "sin", "sys", "cer", "cos", "roc", "in", "Kit", "cci", "init", "cit", "zin", "Cat", "c", "out", "Coll", "CNN", "circ", "Win", "cus", "Kin", "vc", "cy", "tin", "xc", "cat", "win", "Circ", "IN", "CI", "C", "Cass", "ic", "ini", "iris", "cs", "chi", "kin", "vin", "ci", "arc", "lin", "mc", "Lin", "Dar"], "S": ["US", "SH", "Site", "Si", "SS", "Os", "As", "SU", "LS", "Su", "F", "Ns", "DES", "Sample", "SC", "TEXT", "Single", "AS", "TS", "CS", "SO", "Session", "Service", "JS", "H", "STR", "A", "CSS", "T", "VS", "OS", "Y", "Sl", "FS", "PS", "INS", "NS", "R", "L", "SE", "C", "Source", "O", "JSON", "Us", "WS", "In", "D", "s", "BS", "U", "Default", "N", "IS", "SI", "RS", "Socket", "MS", "P", "GS", "Es", "DS", "ES", "I", "G", "None", "Contents"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.List;\\nimport java.util.StringTokenizer;\\nimport java.util.stream.Collectors;\\nimport java.util.stream.IntStream;\\n\\npublic class Main {\\n    public static void main(final String[] args) {\\n        final FastScanner scanner = new FastScanner(System.in);\\n        final int n = scanner.nextInt();\\n        final int[] array = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            array[i] = scanner.nextInt();\\n        }\\n\\n        long sum = 0;\\n        for (int i = 1; i < n; i++) {\\n            if (array[i] > array[i - 1]) {\\n                continue;\\n            }\\n\\n            sum += array[i - 1] - array[i];\\n            array[i] = array[i - 1];\\n        }\\n        System.out.println(sum);\\n    }\\n\\n    private static class FastScanner {\\n        private final BufferedReader reader;\\n        private StringTokenizer tokenizer;\\n\\n        FastScanner(final InputStream in) {\\n            reader = new BufferedReader(new InputStreamReader(in));\\n        }\\n\\n        String next() {\\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (final IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    return reader.readLine();\\n                } catch (final IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n\\n            return tokenizer.nextToken(\"\\n\");\\n        }\\n    }\\n}\\n", "target": "202", "substitutes": {"scanner": ["nerer", " Scanner", "scaner", "Scanner", "aner", " Scanfer", "Scanver", "Scanor", "scanener", "canver", " scanver", "Scanener", "Scaninner", " Scanor", "anor", "scanver", " scaninner", "Scanfer", "caninner", " Scaner", "caner", "nerener", "Scaner", "nerner", "anner", " scanener", "canner", "anfer", "nerfer", " scanfer", "scanfer", "scaninner", " scaner", "scanor"], "n": ["j", "nn", "conn", "len", "sn", "ns", "d", "no", "limit", "count", "nl", "z", "v", "c", "m", "y", "network", "nc", "t", "ln", "nb", "k", "nt", "e", "number", "p", "dn", "f", "net", "o", "w", "s", "l", "num", "N", "x", "u", "size", "b"], "array": ["instance", "answer", "object", "air", "error", "address", "app", "union", "section", "function", "length", "a", "vector", "database", "option", "angle", "book", "table", "arrow", "area", "pair", "element", "feature", "word", "shape", "value", "core", "index", "archive", "batch", "number", "alpha", "arr", "integer", "Array", "expression", "result", "ray", "row", "string", "multi", "image", "average", "range", "collection", "allow", "parent", "view", "align", "record", "auto", "null", "ar", "list", "sample", "entry"], "i": ["id", "slice", "j", "lc", "ri", "api", "a", "pi", "mu", "mi", "init", "ip", "ii", "cli", "z", "v", "io", "ix", "c", "abi", "start", "is", "iv", "y", "gi", "index", "phi", "e", "fi", "anti", "qi", "f", "ji", "p", "ik", "q", "ui", "xi", "li", "next", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "chi", "si", "bi", "info", "x", "ci", "u", "ti", "uri", "ni", "ai", "mini", "I"], "sum": ["hash", "vol", " sums", " total", "su", "cum", " Sum", "neg", "sa", "Sum", " count", "summary", "count", "spread", "mem", "norm", "miss", "sav", "out", "sh", "fee", "value", "mean", "index", " summ", "ass", "alpha", "f", "net", "max", "fat", "li", "cal", "av", "average", "coll", "conf", "gram", "up", "sign", "dot", "num", "loss", "weight", "si", "info", "diff", "u", "cost", "size", "um", "scale", "total"], "reader": ["ler", "slice", "inner", "instance", "ri", "layer", "h", "file", "right", "message", "line", "or", "service", "resource", "report", "ruby", "ry", "table", "server", "er", "io", "pointer", "manager", "Reader", "url", "iter", "r", "read", "reading", "out", "this", "input", "rar", "rr", "data", "loader", "e", "entry", "context", "lock", "driver", "rot", "worker", "rc", "row", "feed", "it", "connection", "image", "readable", "per", "l", "ner", "handler", "parser", "stream", "rer", "buffer", "writer", "source"], "tokenizer": ["serialiser", " tokenoser", "okenner", "authorizers", "okenizer", "tokenize", "tokener", "tokenner", " tokenizing", "serialiter", "Tokenizer", "normalizer", "Tokenize", "authorener", "okenization", " tokenization", "serialner", "normalize", " tokeniser", "serialize", "optimiter", "tokenator", "optimizer", "officializer", "tokenizable", "officializable", " tokenner", "okenize", "officialization", "Tokenator", "authorize", "Tokener", "officialize", "optimator", "serialer", "okenoser", "tokeniser", " tokeniter", "okenizers", "serializers", "Tokeniter", "authorizer", " tokenizable", "Tokenizing", "tokeniter", "okenener", "tokenizers", "tokenener", "okeniser", "okener", "authoriter", "tokenizing", "tokenoser", "tokenization", "Tokenoser", "optimize", "serialator", " tokener", "normalization", "serializer", "okeniter", " tokenize", "okenizable", "okenizing", "Tokenization", "normalner", " tokenener", "authoriser"], "in": ["id", "inner", "path", "login", "file", "a", "line", "str", "bin", "resource", "d", "user", "din", "err", "inc", "v", "c", "is", "m", "r", "this", "out", "read", "input", "from", "data", "p", "win", "f", "IN", "inn", "inf", "connection", "image", "In", "ini", "world", "s", "l", "log", "lin", "socket", "stream", "buffer", "b", "source", "ins"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t//List<String> list= new ArrayList<String>(Arrays.asList(s.split(\"\")));\\n\t\t//List<Integer> list=new ArrayList<Integer>();\\n\t\t//Integer[] array = new Integer[m];\\n        int n = sc.nextInt();\\n        int k = sc.nextInt();\\n        double answer=0;\\n        for(int i=1;n+1>i;i++) {\\n        \tint count=i;\\n        \tint j=0;\\n        \twhile(true) {\\n        \t\tif(count>=k)\\n        \t\t\tbreak;\\n        \t\tcount = count*2;\\n        \t\tj++;\\n        \t}\\n        \tanswer=answer+1/(double)n*Math.pow(0.5,j);\\n        \t//System.out.println(answer);\\n        }\\n        System.out.println(answer);\\n\t}\\n}", "target": "20", "substitutes": {"sc": [" rc", " scanner", " Sc", " app", " ser", "Sc", " SC", " sw", "bc", "se", "SC", " scr", "ss", "cr", "c", "scan", " cat", " cont", "nc", " sp", "rc", " ans", " inst", "sb", "gram", " src", " pars", " arr"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\npublic static void main(String[] args){\\nint a;\\nint b;\\nScanner sc=new Scanner(System.in);\\nwhile(sc.hasNextInt()){\\na=sc.nextInt();\\nb=sc.nextInt();\\nint d=(int)Math.log10(a+b)+1;\\nSystem.out.println(d);\\n}\\n}\\n}", "target": "176", "substitutes": {"a": ["api", "ba", "ab", "oa", "fa", "ma", "aa", "sa", "am", "an", "area", "c", "ia", "ac", "y", "A", "ga", "ada", "ad", "ea", "pa", "p", "alpha", "aj", "la", "ca", "as", "va", "na", "s", "ama", "asa", "da", "au", "x", "ae", "af", "u", "aka", "ai"], "b": ["wb", "obb", "bur", "ba", "ab", "cb", "ib", "bin", "abb", "ady", "aa", "bb", "pb", "gb", "c", "ob", "ub", "y", "db", "B", "nb", "beta", "be", "ad", "pa", "mb", "f", "eb", "emb", "br", "bs", "sb", "lb", "i", "l", "bi", "fb", "bd", "rb"], "sc": ["sw", "enc", "cont", "ch", "lc", "cer", "ct", "Sc", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "nc", "sch", "cc", "sh", "cor", "ga", "sp", "src", "rc", "sche", "ca", "cur", "coll", "sb", "cs", "cl", "pc", "ner", "sl", "ci", "asc", "cv", "mc", "sci"], "d": ["id", "pd", "nd", "cd", "dd", "md", "fd", " dd", "dB", "c", "db", "ld", "data", "dl", "ds", "ad", "e", "ded", "p", "dn", "gd", "f", "xd", "df", "dc", "dat", "did", "sd", "D", "di", "l", "dx", "da", "dh", "bd", "dy", "de"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[]args) {\\n\t\tint higth[] = new int[10];\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tfor(int i=0; i<10 ; i++)higth[i]=sc.nextInt();//\u5165\u529b\u309210\u56de\u7e70\u308a\u8fd4\u3059\\n\t\tArrays.sort(higth);\\n\t\tSystem.out.println(higth[9]);\\n\t\tSystem.out.println(higth[8]);\\n\t\tSystem.out.println(higth[7]);\\n\\n\t}\\n\\n}\\n", "target": "164", "substitutes": {"higth": ["hawths", "hubTh", "haweth", "himTh", "higtha", "iggth", "higeth", "himTH", "higTh", "hawTh", "hawth", "iggtha", "iggths", "himth", "hungth", "hubths", "higths", "hungeth", "hungths", "higTH", "iggeth", "hawTH", "hubth", "hungtha", "hubTH", "hawtha", "himths"], "sc": ["sw", "enc", "isc", "ch", "soc", "cer", "Sc", " SC", "squ", "bc", "sf", "SC", "se", "scope", "cr", "esc", "sq", "c", "scan", "osc", "spec", "sync", "ec", "sub", "nc", "cc", "sec", "sh", "sp", "src", "rc", "system", "anc", "sche", "ca", "s", "l", "si", "pc", "exec", "ner", "sl", "ci", "asc", "g", "mc", "sci"], "i": ["id", "slice", "inner", "j", "ri", "h", "pi", "part", "mu", "in", "mi", "ii", "ip", "z", "v", "abi", "c", "io", "y", "t", "gi", "index", "k", "phi", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "w", "ini", "oi", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "mini", "fi", "ai", "ni", "uri", "I"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int inputInt = scanner.nextInt();\\n        int oneMore = inputInt % 2;\\n        System.out.println(inputInt / 2 + oneMore);\\n    }\\n}\\n", "target": "233", "substitutes": {"scanner": ["canler", "scaner", "Scanner", "scanener", "Scanener", "Scaninner", "analyinner", "canpper", "scanpper", "Scanpper", "analyner", "caninner", "caner", "nerener", "Scaner", "analyer", "Scanker", "nerpper", "nerner", "scanler", "nerler", "scanker", "canker", "canner", "scaninner", "Scanler", "analyker", "canener"], "inputInt": ["imageString", "sourceint", "inputIn", "InputCount", "tempint", " inputIn", "tempString", "imageCount", "inputint", "InputIn", "InputInt", "imageInt", "inputPart", "imageint", "Inputint", "InputPart", "inputCount", " inputPart", "InputString", "inputString", "sourceIn", "sourceInt", " inputCount", "tempInt", " inputString", "sourcePart", " inputint", "tempCount"], "oneMore": ["onemore", " oneNum", "singleNum", "OneMore", "twoMore", "singleMore", "oneLess", "twoLess", " oneLess", "twomore", "Onemore", " onemore", "OneLess", "oneNum", "OneNum", "singlemore"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n        Scanner s = new Scanner(System.in);\\n        int k = s.nextInt(), a = s.nextInt(),b=s.nextInt();\\n        boolean flag= false;\\n        for(int i=a;i<=b;i++){\\n            if(i%k==0){\\n                flag = true;\\n                break;\\n            }\\n        }\\n        System.out.println(flag?\"OK\":\"NG\");\\n\\n\\n    }\\n\\n}\\n\\n\\n\\n\\nclass Scanner\\n{\\n    StringTokenizer st;\\n    BufferedReader br;\\n\\n    public Scanner(InputStream s){\tbr = new BufferedReader(new InputStreamReader(s));}\\n\\n    public String next() throws IOException\\n    {\\n        while (st == null || !st.hasMoreTokens())\\n            st = new StringTokenizer(br.readLine());\\n        return st.nextToken();\\n    }\\n\\n    public int nextInt() throws IOException {return Integer.parseInt(next());}\\n\\n    public long nextLong() throws IOException {return Long.parseLong(next());}\\n\\n    public String nextLine() throws IOException {return br.readLine();}\\n\\n    public double nextDouble() throws IOException\\n    {\\n        String x = next();\\n        StringBuilder sb = new StringBuilder(\"0\");\\n        double res = 0, f = 1;\\n        boolean dec = false, neg = false;\\n        int start = 0;\\n        if(x.charAt(0) == '-')\\n        {\\n            neg = true;\\n            start++;\\n        }\\n        for(int i = start; i < x.length(); i++)\\n            if(x.charAt(i) == '.')\\n            {\\n                res = Long.parseLong(sb.toString());\\n                sb = new StringBuilder(\"0\");\\n                dec = true;\\n            }\\n            else\\n            {\\n                sb.append(x.charAt(i));\\n                if(dec)\\n                    f *= 10;\\n            }\\n        res += Long.parseLong(sb.toString()) / f;\\n        return res * (neg?-1:1);\\n    }\\n\\n    public boolean ready() throws IOException {return br.ready();}\\n\\n\\n}", "target": "28", "substitutes": {"s": ["sc", "fs", "utils", "or", "Services", "in", "fts", "server", "Service", "m", "r", "Server", "qs", "ans", "ws", "w", "Socket", "sv", "ts", "storage", "sys", "sf", "http", "d", "is", "os", "es", "e", "less", "string", "u", "socket", "services", "bis", "opens", "gs", "Str", "features", "Storage", "ss", "c", "abs", "aws", "sync", "strings", "ses", "n", "p", "ssl", "ers", "its", "S", "ing", "ls", "ings", "str", "ns", "se", "t", "states", "as", " streams", "l", "si", "sl", "tests", "g", "service", "south", "ins"], "k": ["id", "ku", "j", "ch", "sk", "kick", "d", "dk", "ka", "ko", "ask", "z", "v", "c", "m", "ok", "y", "ck", "kind", "ack", "ak", "e", "key", "p", "n", "ks", "K", "q", "end", "ik", "o", "kid", "kw", "num", "ke", "mask", "kernel", "kg", "u", "g", "unk", "work"], "a": ["aw", "api", "ba", "ab", "oa", "fa", "aa", "sa", "d", "am", "ka", "an", "c", "area", "ac", "y", "A", "ga", "ad", "ea", "p", "n", "pa", "alpha", "aj", "wa", "la", "va", "ca", "as", "o", "w", "up", "l", "da", "ae", "u", "ai"], "b": ["wb", "j", "ba", "ab", "h", "cb", "length", "abb", "aa", "d", "limit", "v", "c", "boot", "r", "y", "B", "nb", "e", "be", "p", "n", "mb", "eb", "bis", "bs", "o", "lb", "l", "fb", "bd", "g", "u", "rb"], "i": ["slice", "id", "j", "ri", "pi", "mu", "I", "in", "d", "mi", "ii", "ip", "z", "v", "io", "c", "abi", "m", "ix", "y", "gi", "index", "phi", "e", "p", "fi", "n", "qi", "ji", "q", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "ish", "chi", "yi", "l", "si", "bi", "hi", "info", "zi", "ci", "u", "ni", "ti", "uri", "ai", "mini"], "flag": ["id", "lag", "file", "bool", "line", "and", "part", "free", "offset", "force", "group", "ask", "fd", "count", "last", "child", "type", "arg", "style", "sync", "tag", "sub", "kind", "func", "wait", "ret", "continue", "bit", "flags", "age", "wave", "bug", "leaf", "bot", "fun", "Flag", "char", "binary", "debug", "FLAG", "pad", "ish", "field", "code", "log", "sum", "set", "info", "status", "mask", "af", "valid", "year", "sign", "ag"], "st": ["sc", "sw", "ast", "nd", "sth", "ct", "str", "ft", "rs", "sf", "sa", "ust", "ut", "se", "ss", "stress", "std", "cr", "stable", "r", "pt", "sta", "ld", "t", "tr", "sh", "stri", "fe", "ste", "nt", "ur", "p", "sp", "src", "string", "ost", "contract", "pr", "th", "ST", "rest", "bt", "rd", "fr", "sts", "l", "sl", "struct", "bl", "ist", "est", "rt", "inst", "St"], "br": ["sr", "ib", " fr", "str", "bro", "rob", "or", "rs", "bc", "Br", "err", "bh", "ber", "BR", "cr", " tr", "r", "iter", "gr", "tr", "kr", "hr", "be", "ur", "p", "sp", "arr", "mr", "bar", "ver", "bp", "src", "result", "ar", "bridge", " str", "next", "browser", "bs", "pr", "bt", "rest", "lr", "fr", "sl", "dr", "bl", "rt", "stream", "rb", "ru", " sr"], "x": ["xxxx", "php", "px", "wx", "xx", "str", "rx", "rex", "fx", "xy", "cross", "abc", "xt", "xxx", "z", "ix", "v", "c", "python", "plus", "m", "r", "y", "tx", "xf", "xs", "sync", "nex", "t", "data", "index", "xml", "e", "ex", "xc", "n", "p", "string", "xi", "test", "full", "w", "any", "l", "sex", "xe", "exp", "lex", "X", "text", "u", "g", "expl", "work"], "sb": ["wb", "obb", "sth", "ib", "lp", "cb", "zb", "su", "sg", "bg", "orb", "rob", "abb", "lab", "bc", "xb", "sf", "sa", "bb", "bh", "bj", "pb", "bsp", "lib", "bf", "sm", "gb", "sq", "ob", "ub", "SB", "db", "nb", "mb", "bp", "eb", "kb", "src", "bs", "buff", "bt", "bm", "lb", "si", "fb", "ls", "rb", "sv"], "res": ["vals", "base", "features", "fs", "resolution", "des", "ns", "js", "rs", "err", "ps", "z", "cr", "resh", "ras", "abs", "r", "os", " r", "min", "powers", "rows", "re", "pre", "ret", "rev", "p", "reg", "nos", "arr", "df", "def", "result", "max", "q", " Res", "range", "val", "pres", "cs", "fr", "Res", "sum", "vs", "resp", "results", "RES", "rel", "ms", "Rs", "bytes"], "f": ["cf", "fs", "h", "F", "function", " F", "fx", "sf", "d", "fc", "fd", "bf", "z", "v", "c", "m", "r", "fp", "xf", "t", "fe", "re", "e", "p", "n", "df", "fun", "inf", "col", "fin", "field", "ff", "l", "fr", "info", "fb", "frac", "diff", "g", "u", "rf"], "start": ["id", "change", "j", "check", "art", "str", "part", "offset", "se", "in", "init", "no", "ind", "count", "stop", "Start", "y", "shift", "min", "from", "index", "ad", "pos", "p", "sp", "add", "end", "off", "next", "it", "cur", "skip", "begin", "pad", "use", "ie", "ish", "sum", "si", "set", "info", "first", "step", "get"], "dec": ["enc", "loc", "str", "dev", "rec", "mod", "inc", "err", "oct", "DEC", "eval", "negative", "draw", "c", "iter", "ec", "sub", "min", "sec", "pack", "big", "data", "desc", "decl", "Dec", "rev", "prev", "deg", "digit", "partial", "cur", "pad", "div", "disc", "comb", "dig", "da", "exec", "frac", "del", "reverse", "rel", "minus", "sign", " desc", "nov", "de"], "neg": ["sin", "loc", "flo", "dep", "dev", "cos", "unit", "empty", "no", "err", "negative", "not", "norm", "iter", "ok", "sub", "pull", "sec", "desc", "decl", "ne", "rev", "pos", "prev", "deg", "rot", "zero", "next", "Neg", "coll", "sort", "disc", "sum", "don", "del", "reverse", "rel", "minus", "dirty", "sign", "temp", "nov", "de"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\tchar[] s = br.readLine().toCharArray();\\n\t\tString p = br.readLine();\\n\t\tint point;\\n\t\tBoolean flag = false;\\n\\n\t\tfor(int i = 0; i < s.length; i++) {\\n\t\t\tpoint = i;\\n\t\t\tfor(int j = 0; j < p.length(); j++) {\\n\t\t\t\tif(point == s.length) {\\n\t\t\t\t\tpoint = 0;\\n\t\t\t\t}\\n\t\t\t\tsb.append(s[point]);\\n\t\t\t\tpoint++;\\n\t\t\t}\\n\\n\t\t\tif(sb.toString().equals(p)) {\\n\t\t\t\tflag = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tsb.setLength(0);\\n\t\t}\\n\\n\t\tif(flag) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "198", "substitutes": {"br": ["sr", "ler", "yr", "ab", "cb", "body", "str", "bro", "bc", "Br", "bb", "err", "bh", "bf", "ber", "BR", "cr", "io", "ob", "abs", "HR", "r", "iter", "erb", "tr", "img", "hr", "obj", "sp", "arr", "bar", "mr", "src", "bridge", "browser", "bs", "ref", "buf", "jar", "lr", "fr", "brush", "bd", "reader", "dr", "bl", "rb", "her", "b", "res"], "sb": ["wb", "obb", "sth", "ib", "ab", "cb", "sg", "zb", "bg", "lp", "rob", "abb", "sn", "bc", "sf", "sa", "xb", "bb", "bh", "bj", "pb", "bsp", "bf", "usb", "gb", "sq", "ob", "osc", "SB", "db", "erb", "nb", "BB", "mb", "sp", "bp", "eb", "kb", "src", "gc", "abl", "bs", "bt", "bm", "BP", "lb", "buff", "si", "fb", "bd", "sv", "rb", "b"], "s": ["gs", "a", "ns", "js", "d", "services", "ss", "ps", "sets", "v", "c", "south", "is", "r", "parts", "xs", "os", "es", "strings", "qs", "ds", "ses", "f", "ks", "ans", "cells", "string", "o", "b", "cs", "S", "l", "si", "obs", "sts", "eps", "g", "u", "ls", "sv", "ins"], "p": ["pp", "py", "vp", "api", "lp", "h", "tp", "ip", "pb", "ps", "pe", "v", "c", "m", "r", "y", "fp", "t", "post", "np", "wp", "pre", "padding", "e", "pa", "sp", "f", "n", "bp", "ap", "o", "pr", "per", "up", "l", "pc", "P", "u", "cp", "jp", "op", "b"], "point": ["slice", "id", "distance", "base", "press", "section", "po", "length", "line", "art", "part", "offset", "move", "page", "d", "ind", "points", "type", "mark", "pointer", "level", "start", "style", "inter", "position", "pt", "c", "element", "sync", "index", "key", "number", "pos", "sp", "f", "frame", "end", "span", "off", "string", "width", "Point", "column", "o", "flow", "pad", "pass", "gap", "val", "code", "parent", "sequence", "weight", "pc", "x", "patch", "block", "letter", "step"], "i": ["id", "ri", "pi", "in", "init", "ip", "ii", "ind", "z", "io", "v", "ix", "is", "ori", "pointer", "position", "start", "y", "c", "gi", "index", "e", "pos", "qi", "f", "ji", "ui", "xi", "li", "iu", "b", "di", "ini", "ie", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "fi", "ai", "I"], "j": ["h", "ja", "J", "length", "js", "ij", "jj", "ii", "ind", "z", "v", "ix", "m", "r", "y", "out", "pt", "index", "k", "key", "obj", "n", "f", "ji", "aj", "end", "q", "off", "li", "it", "o", "pr", "adj", "el", "l", "uj", "ang", "oj", "g", "u", "jp", "b"], "flag": [" flagged", "lag", "bag", "bool", " lag", "line", "force", "focus", " count", " status", " flags", "ind", "count", " use", "group", "type", " bit", "safety", "style", "start", "sync", "tag", "band", "kind", "year", " Flag", "like", "func", "wait", " error", "key", "bit", "f", "flags", "age", "wave", "bug", "leaf", "Flag", "string", "char", "fun", "car", "debug", "FLAG", "sort", "ish", "field", "code", "log", "weight", "info", "status", "die", "mask", " group", "cost", " bug"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int A = sc.nextInt();\\n    int B = sc.nextInt();\\n    int C = sc.nextInt();\\n    int D = sc.nextInt();\\n    int x = 0;\\n    int y = 0;\\n\\n    while(A > 0) {\\n      A = A - D;\\n      x++;\\n    }\\n    while(C > 0) {\\n      C = C - B;\\n      y++;\\n    }\\n    if (x >= y) {\\n      System.out.println(\"Yes\");\\n    } else {\\n      System.out.println(\"No\");\\n    }\\n  }\\n}", "target": "186", "substitutes": {"sc": ["sw", "cont", "sr", "ch", "lc", "soc", " Sc", "cer", "str", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "cli", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "search", "nc", "cc", "sh", "sec", "cus", "cor", "desc", "ctx", "sp", "ser", "acc", "src", "rc", "sche", "ca", "cur", "coll", "sb", "cs", "cl", "pc", "parse", "ner", "parser", "asc", "cv", "sci"], "A": ["Am", "As", "AR", "a", "F", "E", "Area", "AP", "AS", "AD", "AA", "H", "Ma", "T", "Alpha", "Y", "mA", "PA", "Ka", "Na", "alpha", "L", "AM", "API", "Wa", "CA", "Ar", "At", "Az", "M", "U", "S", "N", "Java", "Ca", "LA", "X", "AF", "P", "AAA", "I", "G", "AC"], "B": ["BI", "Q", "F", "E", "LB", "DB", "AB", "AD", "H", "UB", "T", "Bs", "Y", "BB", "R", "L", "BA", "W", "BC", "O", "GB", "b", "M", "U", "S", "N", "OB", "V", "X", "P", "BD", "I", "G"], "C": ["Q", "CL", "Cs", "F", "E", "Can", "CD", "CU", "CS", "Con", "Ch", "c", "T", "Y", "Col", "R", "L", "CM", "W", "CI", "CR", "BC", "Cu", "O", "NC", "CA", "EC", "CC", "M", "KC", "CP", "Cy", "JC", "U", "S", "Cr", "N", "Cl", "Ca", "X", "V", "P", "VC", "DC", "I", "G", "AC"], "D": ["Q", "DA", "DD", "F", "Da", "E", "Ds", "DB", "d", "CD", "AD", "DH", "H", "T", "Y", "R", "L", "W", "O", "M", "U", "Z", "N", "X", "V", "P", "I", "G"], "x": ["id", "h", "a", "xx", "rx", "in", "d", "xy", "z", "v", "ix", "c", "an", "m", "r", "Y", "index", "data", "e", "p", "n", "ex", "f", "xi", "width", "o", "w", "ax", "i", "ya", "l", "dx", "hi", "X", "u", "dy", "b"], "y": ["py", "j", "ch", "one", "h", "a", "xx", "ady", "d", "xy", "z", "v", "ny", "c", "m", "yy", "out", "year", "ay", "t", "yo", "Y", "cy", "ty", "p", "n", "oy", "f", "e", "cycle", "zero", "o", "vy", "col", "ey", "w", "i", "yi", "up", "zy", "ya", "l", "u", "dy", "ye", "b", "sy"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner scan=new Scanner(System.in);\\n    int num=scan.nextInt();\\n    int max=0, maxnum=0;\\n    int max2=0;\\n    for(int x=0; x<num; x++){\\n      int in=scan.nextInt();\\n      if(max<=in && max2<=in && max!=in){\\n        max=in;\\n        maxnum=x;\\n      }else if(max>=in && max2<=in){\\n        max2=in;\\n      }\\n    }\\n    for(int x=0; x<num; x++){\\n      if(maxnum!=x){\\n        System.out.println(max);\\n      }else{\\n        System.out.println(max2);\\n      }\\n    }\\n  }\\n}", "target": "142", "substitutes": {"scan": ["sc", "can", "sin", " scanner", "nn", "sys", "fan", "query", "util", "se", "ry", "server", "connect", "er", "an", "sync", "r", "iter", "out", "search", "see", "clean", "con", "read", "ln", "gen", "chan", "plan", "san", "n", "win", "watch", "ans", "ser", "span", "system", "na", "pan", "run", "skip", "Scan", "ignore", "parse", "ner", "parser", "ann", "sign", "reader", "serv"], "num": ["id", "loc", "len", "bin", "nu", "cum", "mu", "no", "inc", "init", "node", "count", "Num", "m", "en", "con", "out", "nc", "mon", "min", "mn", "nb", "index", "un", "dim", "number", "pos", "n", "win", "f", "end", "zero", "off", "inf", "multi", "col", "sum", "nom", "nam", "lim", "all", "um", "temp", "total"], "max": ["id", "can", "cu", "none", "az", "orig", "right", "scale", "height", "wrap", "form", "dev", "step", "only", "best", "mod", "init", "inc", "no", "limit", "count", "Max", "last", "master", "default", "std", "c", "start", "m", "res", "con", "MAX", "out", "min", "from", "chain", "k", "key", "cat", "n", "p", "end", "q", "cache", "dec", "w", "ax", "conf", "range", "rest", "div", "parent", "version", "code", "act", "sum", "parse", "block", "first", "diff", "est", "size", "rank", "total", "name", "work"], "maxnum": ["int1", "intnum", "modnumber", " max1", "intnumber", "maxnumber", "ax4", "minn", "defaultNum", "maxn", "defaultnum", "maxin", "defaultn", "mod1", " maxnumber", "modnum", "axnum", "minNum", "axNum", "modin", " maxn", " max4", "maxNum", " maxNum", " maxin", "max1", "minnum", "default4", "ax2", "axn", "min2", "max4", "intin"], "max2": ["min8", "key2", "maxtwo", " max1", "min1", "ax4", "Max4", "key3", "maxsecond", "ax1", "key1", "patch3", "patch2", "ax3", " max8", "max3", "Max1", "ax8", " maxtwo", "ax5", "max5", "Maxtwo", " max3", "patch5", "patch4", " max4", " maxsecond", "max1", "min4", "keysecond", "axsecond", "ax2", "max8", "Max2", " max5", "min2", "max4", "axtwo"], "x": ["id", "inner", "j", "px", "wx", "h", "check", "xx", "rx", "ux", "rex", "fx", "mx", "d", "ady", "xy", "inc", "pe", "xxx", "z", "ix", "v", "c", "plus", "inter", "y", "tx", "en", "xs", "t", "index", "data", "e", "ex", "n", "p", "on", "win", "f", "ctx", "xc", "q", "xi", "xp", "over", "inf", "ic", "wa", "w", "ax", "i", "code", "l", "inx", "dx", "exp", "lex", "X", "time", "ext", "u", "g", "xa", "name", "work"], "in": ["id", "inner", "login", "again", "none", "a", "line", "inate", "len", "bin", "inas", "cin", "d", "user", "din", "err", "inc", "init", "cli", "mi", "z", "inside", "c", "ino", "m", "ac", "r", "en", "out", "con", "is", "inter", "input", "min", "like", "ine", "re", "index", "by", "ex", "isin", "n", "win", "on", "f", "IN", "rin", "inn", "inf", "ic", "pass", "In", "ini", "readable", "i", "nin", "space", "between", "exec", "lin", "reader", "ins", "work"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main (String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int[] Pz = new int[N];\\n        for (int i = 0; i < N; i++) {\\n            Pz[i] = sc.nextInt();\\n        }\\n        int minVal = 1000000000;\\n        int cnt = 0;\\n        for (int i = 0; i < N; i++){\\n            if (Pz[i] < minVal){\\n                minVal = Pz[i];\\n                cnt++;\\n            }\\n\\n        }\\n        System.out.println(cnt);\\n\\n    }\\n}", "target": "229", "substitutes": {"sc": ["sw", "sr", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "search", "nc", "sch", "cc", "sh", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "screen", "cv", "mc", "sci"], "N": ["Q", "Ne", "Ni", "J", "Ns", "F", "No", "Part", " n", "NB", "Num", "H", "Number", "T", "B", "NE", "Y", "NT", "NS", "n", "R", "L", "K", "W", "Len", "C", "O", "NA", "D", "SN", "M", "KN", "MN", "Z", "S", "V", "X", "NN", "P", "Size", "GN", "I", "G"], "Pz": ["pp", "Px", "TZ", " Pp", "Kb", "Tc", "CPc", "Czi", "Cb", "Pzi", "Rx", "pxs", "Pc", "Mzi", "Rz", "Vx", "Fxs", "Rzi", "Cp", "pz", "pZ", "CPza", "MZ", "PZ", " Pb", "FZ", "Kp", "Fz", "pza", "Tza", "Tz", "CPZ", "RZ", "Mx", "Pxs", "Kz", "Pb", "Cz", "Vzi", "Fp", "VZ", "Kzi", " Pzi", "pc", "Pp", "Mz", "Vz", " Pxs", " PZ", "Pza", "CPz"], "i": ["id", "slice", "j", "lc", "ri", "length", "pi", "mu", "in", "mi", "init", "ii", "ip", "ind", "cli", "z", "v", "io", "ori", "ix", "m", "abi", "start", "r", "y", "gi", "index", "data", "phi", "key", "e", "p", "n", "fi", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "ie", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "diff", "u", "ni", "uri", "ti", "ai", "I", "source"], "minVal": [" minPos", "minEl", "minMax", "minValue", "maxValue", " minEl", "MINVol", "MinEl", " minMax", "smallValue", "MinPos", "MinVol", "minPos", " minval", "MinVal", "smallMax", "smallval", "minVol", "maxVal", "maxval", "maxMax", " minValue", " minVol", "MINval", "smallVal", "maxPos", "minval", "MINVal", "Minval", "MinValue", "MINEl"], "cnt": [" cNT", "pNT", "Cct", "ucNT", "scnt", " ccount", " cant", "COUNT", " cnn", " cov", "Cov", "cov", "Cnn", "cant", "Ccount", "Cant", "CNT", "pov", "scNT", "cOUNT", "cnn", "cct", "scant", "cNT", " cOUNT", "Cnt", "ccount", "uccount", "pnt", "pnn", "scct", "ucOUNT", " cct", "ucnt"]}}
{"code": "import java.io.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]) throws IOException{\\n\t\tBufferedReader buf = new  BufferedReader(new InputStreamReader(System.in));\\n\t\tString[] str = buf.readLine().split(\" \");\\n\t\tint r = Integer.parseInt(str[0]);\\n\t\tint c = Integer.parseInt(str[1]);\\n\t\tint[][] array = new int[r+1][c+1];\\n\t\t\\n\t\tfor(int i=0; i<r; i++){\\n\t\t\tstr = buf.readLine().split(\" \");\\n\t\t\tfor(int j=0; j<c; j++){\\n\t\t\t\tarray[i][j] = Integer.parseInt(str[j]);\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0; i<r; i++){\\n\t\t\tfor(int j=0; j<c; j++){\\n\t\t\t\tarray[i][c] += array[i][j];\\n\t\t\t}\\n\t\t}\\n\t\tfor(int j=0; j<=c; j++){\\n\t\t\tfor(int i=0; i<r; i++){\\n\t\t\t\tarray[r][j] += array[i][j];\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0; i<r+1; i++){\\n\t\t\tfor(int j=0; j<c+1; j++){\\n\t\t\t\tSystem.out.print(array[i][j]);\\n\t\t\t\tif(j!=c)\\n\t\t\t\t\tSystem.out.print(\" \");\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\t\t\\n\t}\\n}", "target": "23", "substitutes": {"buf": ["fw", "Buffer", "wb", "bur", "ab", "cb", "h", "bag", "fs", "utils", "abb", "bus", "aux", "bb", "ered", "conv", "bh", "fd", "bf", "box", "iter", "fp", "out", "img", "Buff", "nb", "runner", "proc", "loader", "home", "ctx", "f", "exc", "bu", "src", "br", "rw", "tmp", "bs", "pkg", "buff", "raf", "uf", "ff", "fb", "reader", "bed", "rb", "buffer", "b"], "str": ["sr", "id", "enc", "strip", "Str", "orig", "st", "line", "part", "err", "oct", "cr", "er", "style", "url", "name", "spec", "iter", "read", "STR", "gr", "tr", "input", "sec", "stri", "strings", "serv", "data", "key", "star", "sp", "arr", "br", "string", "char", "dict", "pass", "coll", "pr", "s", "w", "div", "fr", "parse", "text", "sl", "ner", "dr", "raw", "ar", "list", "entry"], "r": ["sr", "yr", "ri", "h", "right", "ro", "rs", "resource", "in", "d", "err", "ir", "z", "v", "cr", "er", "m", "tr", "rar", "rr", "kr", "nr", "re", "k", "hr", "e", "ur", "p", "n", "R", "f", "q", "rc", "row", "rh", "cur", "o", "w", "s", "pr", "range", "rn", "l", "fr", "x", "u", "rt", "ru", "ar", "rb", "rf", "b", "res", "rg"], "c": ["sc", "cu", "ch", "cf", "lc", "h", "right", "a", "cin", "d", "err", "count", "uc", "z", "v", "cr", "m", "ac", "con", "ec", "y", "ce", "t", "cor", "cc", "jc", "core", "nr", "k", "e", "p", "n", "f", "dc", "q", "cycle", "rc", "char", "row", "C", "ca", "rh", "cur", "o", "coll", "col", "w", "s", "cs", "code", "l", "cl", "pc", "x", "arc", "ci", "u", "g", "b", "center", "co"], "array": ["hash", "instance", "object", "ash", "api", "base", "error", "form", "section", "a", "function", "address", "database", "environment", "angle", "book", "share", "table", "the", "group", "throw", "arrow", "area", "pair", "element", "word", "shape", "value", "index", "data", "archive", "complex", "batch", "number", "alpha", "arr", "Array", "map", "expression", "cache", "result", "integer", "ray", "string", "system", "project", "row", "our", "image", "average", "coll", "range", "allow", "collection", "parent", "align", "shared", "auto", "analysis", "ar", "list", "center"], "i": ["id", "api", "ri", "a", "pi", "I", "mi", "ii", "ip", "cli", "ir", "z", "ori", "v", "ix", "io", "y", "gi", "phi", "e", "p", "n", "qi", "f", "ji", "ik", "ui", "ar", "xi", "li", "iu", "it", "o", "eni", "di", "ini", "yi", "oi", "ie", "l", "si", "bi", "hi", "x", "zi", "ci", "ni", "u", "uri", "fi", "ai", "b"], "j": ["py", "kj", "ch", "jet", "api", "h", "uni", "ja", "J", "a", "js", "ij", "job", "d", "err", "jj", "ii", "bj", "z", "v", "ix", "je", "y", "jit", "json", "jc", "jl", "k", "e", "dj", "obj", "p", "n", "f", "qi", "ji", "aj", "ik", "q", "ui", "br", "dy", "li", "iu", "it", "o", "col", "ie", "adj", "el", "l", "uj", "fr", "note", "si", "x", "em", "jo", "ci", "oj", "ni", "u", "jp", "b"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u5165\u529b\\n            int k = Integer.parseInt(in.next());\\n            int x = Integer.parseInt(in.next());\\n\\n            if (k == 1) {\\n                out.println(x);\\n                return;\\n            }\\n            for (int i = x - k + 1; i < x + k; i++) {\\n                out.printf(\"%d\", i);\\n                out.print(\" \");\\n            }\\n            out.println();\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "207", "substitutes": {"inputStream": ["outputChannel", "inputChannel", " inputstream", " inputSteam", "outputstream", "outputSteam", "inputCh", "inputstream", "Inputstream", "InputCh", "inputSteam", "InputSteam", " inputCh", "InputStream", "InputChannel", " inputChannel", "outputCh"], "outputStream": ["Outputstream", "outputChannel", "responseSteam", "inputChannel", "outputstream", "outputSteam", " outputChannel", "OutputStream", "OutputStreamer", "inputstream", "inputSteam", "inputStreamer", "OutputChannel", "responsestream", "OutputSteam", "responseStream", " outputstream", " outputSteam", "responseStreamer", "outputStreamer"], "in": ["id", "inner", "path", "sin", "login", "again", "conn", "gin", "bin", "cin", "init", "din", "inc", "err", "arg", "io", "inside", "is", "plus", "name", "r", "this", "con", "input", "request", "min", "data", "index", "gen", "isin", "n", "win", "on", "IN", "inn", "inf", "connection", "run", "image", "In", "ini", "s", "i", "nin", "kin", "pin", "config", "info", "vin", "lin", "reader", "source", "ins"], "out": ["inner", "again", "console", "error", "external", "outs", "file", "conn", "outside", "line", "bin", "page", "init", "inc", "err", "user", "no", "server", "process", "client", "arg", "io", "v", "outer", "OUT", "call", "password", "sync", "at", "this", "point", "to", "input", "session", "data", "loader", "ex", "n", "p", "problem", "net", "cache", "IN", "off", "string", "window", "connection", "o", "pass", "image", "w", "s", "i", "parent", "log", "exec", "x", "null", "Out", "analysis", "output", "write", "temp", "b", "writer", "name"], "solver": ["solution", "Sol", "ssolver", "ssolution", "ssolving", "unsolver", " sol", " solve", "Solve", "ssol", "unsolution", "solve", "solving", "ssolve", "Solution", " solution", "Solver", "sol", "Solving", "unsolve", "unsolving"], "testNumber": ["trialNum", "Testnumber", "TestNumber", "testnumber", " testnumber", "TestNumbers", "trialNumber", " testNum", "testNumbers", "TestNum", " testNumbers", "trialNumbers", "testNum", "trialnumber"]}}
{"code": "import java.io.*;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) throws IOException {\\n       Scanner in = new Scanner(System.in);\\n       int a, b;\\n       int idx = 0;\\n       while(true) {\\n\t       a = in.nextInt();\\n\t       b = in.nextInt();\\n\t       if(a == 0 && a == b) return;\\n\t       if(a<b) System.out.printf(\"%d %d\\n\", a, b);\\n\t       else System.out.printf(\"%d %d\\n\", b, a);\\n       }\\n    }\\n}", "target": "72", "substitutes": {"in": ["id", "token", "inner", "login", "again", "doc", "conn", "gin", "line", "bin", "query", "rec", "init", "din", "inc", "err", "client", "er", "c", "is", "url", "r", "out", "con", "input", "ln", "serv", "data", "gen", "ex", "isin", "f", "win", "IN", "inn", "as", "connection", "pass", "In", "image", "ini", "s", "fin", "i", "nin", "l", "kin", "pin", "exec", "config", "x", "diff", "g", "lin", "socket", "reader", "buffer", "source", "ins"], "a": ["base", "api", "ba", "ab", "oa", "fa", "ma", "aaa", "aa", "sa", "d", "am", "count", "an", "c", "area", "ac", "ia", "r", "y", "A", "ga", "index", "ad", "e", "p", "pa", "alpha", "f", "ea", "aj", "wa", "la", "ca", "as", "va", "na", "s", "i", "ama", "code", "da", "x", "qa", "ae", "af", "u", "ai"], "b": ["wb", "j", "base", "ba", "ab", "cb", "h", "bin", "abb", "bc", "aa", "d", "bb", "bh", "pb", "bf", "v", "c", "y", "db", "B", "index", "nb", "e", "be", "pa", "n", "p", "f", "bp", "eb", "bs", "o", "sb", "i", "lb", "l", "bi", "fb", "x", "bd", "rb"], "idx": [" idy", "idb", "idy", "ideb", "Idx", "idv", "Idb", "idex", " idv", " idb", "idev", "Idv", "Idy", "idey"]}}
{"code": "\\nimport java.util.*;\\nimport java.util.regex.Matcher;\\n\\n/**\\n * Created by Seiya on 2016/10/16.\\n */\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        long N = scanner.nextLong();\\n\\n        ArrayList<Long> list = new ArrayList<Long>();\\n        long i = 1;\\n        double last = Math.sqrt(N);\\n        while(true){\\n            if(N % i == 0){\\n                list.add(N / i);\\n            }\\n            if(i > last)break;\\n            i++;\\n        }\\n\\n        long ans = 99999999;\\n        for (int j = 0; j < list.size(); j++) {\\n            int temp = Math.max(log10(list.get(j)), log10(N / list.get(j)));\\n            ans = Math.min(ans, temp);\\n        }\\n        System.out.println(ans);\\n\\n\\n    } // mainMethod\\n\\n    public static int log10(long n){\\n        int ans = 0;\\n        while(n > 0){\\n            n /= 10;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n} // MainClass\\n", "target": "61", "substitutes": {"scanner": ["nerer", "scaner", "Scanner", "Scaninner", "canter", "caninner", "caner", "Scaner", "canning", "Scanker", "nerner", " scanning", "nerinner", "Scanter", "scanning", "scanker", "canker", "canner", " scanker", "nerter", "scaninner", "scanter", "Scanning", " scaner"], "N": ["NG", "Q", "Ne", "Ni", "J", "Ns", "F", "NO", "Next", "NL", "No", " n", "Num", "H", "NH", "A", "T", "NE", "NI", "Y", "NT", "NF", "Na", "NS", "number", "n", "R", "L", "K", "Len", "O", "C", "NC", "NA", "D", "SN", "M", "U", "S", "num", "X", "V", "NN", "P", "New", "Size", "I", "G"], "list": ["id", "listed", "base", "left", "lc", "and", "part", "array", "cli", "table", "server", "lists", "live", "this", "out", "ul", "data", "pre", "index", "chain", "key", "plan", "batch", "p", "n", "prev", "L", "queue", "entry", "cache", "result", "max", "la", "li", "test", "stack", "source", "full", "LIST", "lat", "parent", "l", "log", "cl", "set", "parse", "x", "null", "LI", "load", "all", "ls", "loop", "ist", "state", "flat"], "i": ["id", "slice", "uni", "ri", "length", "pi", "in", "ii", "cli", "count", "z", "io", "v", "ix", "start", "ori", "gi", "index", "k", "phi", "p", "n", "qi", "f", "ki", "ui", "xi", "li", "next", "multi", "o", "eni", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ni", "uri", "ai", "I"], "last": ["id", "small", "base", "nd", "left", "best", "init", "no", "latest", "count", "old", "start", "is", "current", "recent", "worst", "k", "nt", "Last", "ise", "p", "n", "prev", "end", "max", "next", "it", "full", "ish", "l", "first", "ci", "est", "size", "total"], "ans": [" scans", "can", "anas", "outs", "ats", " means", "a", "cons", "leans", "lan", "ons", "ns", "sk", "AN", "aus", "atan", "ss", "ions", "nas", "amps", "anges", "an", "vers", "asts", "ras", "ars", "ams", "ana", "os", "aned", "acs", "cas", "es", "ents", "san", "ares", "ids", "ks", "anc", "ANS", "na", "as", "ians", "s", "anned", "ays", "acts", "cs", "ants", "eps", "nan", "ann", "ls", "ins"], "j": ["ch", "jet", "syn", "ja", "J", "part", "js", "ij", "job", "d", "jj", "bj", "ii", "z", "v", "ix", "c", "jen", "m", "je", "y", "jit", "jc", "jl", "k", "key", "e", "dj", "p", "n", "obj", "f", "ji", "aj", "br", "li", "o", "pr", "adj", "ie", "el", "l", "fr", "uj", "x", "jo", "oj", "u", "g", "jp", "b"], "temp": ["id", "small", "base", "alt", "lc", "wrap", "str", "Temp", "stable", "extra", "fake", "current", "emp", "iter", "point", "tc", "clean", "tr", "min", "pre", "cut", " tmp", "p", "ex", "needed", "max", "partial", "tem", "tmp", "test", "full", "adj", "ie", " Temp", " temporary", "diff", "mini", "flat"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = Integer.parseInt(sc.next());\\n\t\tboolean aa = false;\\n\t\t// \u5947\u6570\u306e\u307f\u306e\u3068\u304dtrue\\n\t\tboolean bb = true;\\n\t\tfor(int i=0; i<N; i++) {\\n\t\t\tint a = Integer.parseInt(sc.next());\\n\t\t\tif(a % 2 == 0) {\\n\t\t\t\tbb = false;\\n\t\t\t\tif(a % 3 == 0 || a% 5==0) {\\n\t\t\t\t\taa = true;\\n\t\t\t\t} else {\\n\t\t\t\t\taa = false;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(aa || bb ? \"APPROVED\": \"DENIED\");\\n\\n\t}\\n}\\n", "target": "113", "substitutes": {"sc": ["isc", "lc", " Sc", "cb", "Sc", " SC", "bc", "se", "SC", "sf", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "ec", "nc", "cc", "sh", "sec", "nt", "sp", "dc", "acc", "rc", "system", "anc", "class", "sb", "cs", "l", "cl", "set", "pc", "sl", "ci", "cv", "reader", "sci"], "N": ["Q", "J", "Ns", "F", "NL", " C", " n", "H", "T", "B", "NS", "n", "R", "L", "K", "C", "O", "D", "SN", "M", "S", "Z", "V", "X", "NN", "P", "I", "G"]}}
{"code": "import java.util.*;\\nimport java.util.HashSet;\\nimport java.util.Map;\\nimport java.util.HashMap;\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int s = sc.nextInt();\\n        int s_front = s / 100;\\n        int s_back = s % 100;\\n\\n        if (0 < s_front && s_front < 13) {\\n            if (0 < s_back && s_back < 13) {\\n                System.out.println(\"AMBIGUOUS\");\\n            } else {\\n                System.out.println(\"MMYY\");\\n            }\\n        } else {\\n            if (0 < s_back && s_back < 13) {\\n                System.out.println(\"YYMM\");\\n            } else {\\n                System.out.println(\"NA\");\\n            }\\n        }\\n    }\\n}\\n\\n\\n\\n\\n", "target": "5", "substitutes": {"sc": ["sr", "sw", "ch", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "sub", "ec", "cc", "ctx", "sp", "src", "acc", "rc", "system", "ca", "cs", "si", "cl", "pc", "exec", "ner", "ci", "sci"], "s": ["sample", "lines", "fs", "su", "ns", "ens", "ages", "se", "in", "d", "services", "ss", "ps", "ions", "sets", "v", "sq", "c", "start", "is", "second", "xs", "t", "sec", "es", "strings", "states", "p", "ses", "n", "f", "ments", "ries", "ks", "src", "string", "bis", "inf", "b", "w", "sb", "i", "seconds", "us", "S", "space", "l", "si", "ches", "uploads", "stats", "sites", "tests", "u", "ls", "size", "your", "south", "ts", "ins"], "s_front": ["s___back", "i_back", "s_bottom", "p_back", " s_left", "i_front", " s_behind", "s_behind", "s___bottom", "s___fore", "s_next", "s___half", "s_left", "p_fore", "s___next", "p_front", "s_half", "i_next", "s___front", "s_fore", "p_bottom", "i_half"], "s_back": ["p_home", "i_ahead", "i_out", "p_ground", "s_round", "s_ground", "i_front", "sfback", "sffront", "i_round", "s_home", "p_behind", " s_behind", "s_def", "s_ahead", "p_front", "sfnext", "i_back", " s_reverse", "p_back", "s_behind", "s_next", "s_out", "sfout", "p_def", "s_reverse", "i_next"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\tif (s.charAt(i) == '1') {\\n\t\t\t\tSystem.out.print('9');\\n\t\t\t} else {\\n\t\t\t\tSystem.out.print('1');\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "111", "substitutes": {"sc": ["sw", " Sc", "st", "str", "Sc", " SC", "bc", "sf", "se", "SC", "scope", "ss", "sel", "server", "uc", "cr", "esc", "c", "scan", "osc", "spec", "ec", "search", "nc", "cc", "sec", "sh", "desc", "sp", "src", "acc", "rc", "anc", "ca", "cs", "pc", "exec", "ner", "sl", "ci", "asc", "sci"], "s": ["opens", "gs", "features", "h", "sg", "fs", "su", "ns", "js", "sf", "in", "services", "ss", "ps", "sets", "v", "c", "is", "params", "r", "os", "strings", "states", "ds", "e", "ses", "p", "comments", "f", "string", "ws", "b", "sb", "S", "l", "si", "sl", "letters", "tests", "u", "g", "ls", "sv", "ins"], "i": ["id", "slice", "j", "ri", "h", "pi", "mu", "in", "d", "ii", "type", "v", "io", "c", "ix", "y", "gi", "index", "k", "phi", "key", "e", "p", "n", "f", "qi", "ji", "end", "ui", "xi", "li", "it", "multi", "o", "b", "di", "eni", "oi", "chi", "l", "si", "bi", "hi", "x", "ci", "u", "ti", "uri", "ai", "I"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main{\\n\tpublic static void main(String args[]) throws IOException{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\toperateStack ost = new operateStack();\\n\t\tString[] str;\\n\t\tint len, top = 0;\\n\t\tlong op, cal;\\n\t\t\\n\t\tstr = br.readLine().split(\" \", 0);\\n\t\tlen = str.length;\\n\t\t\\n\t\tfor(int i = 0; i < len; i++){\\n\t\t\t\\n\t\t\tif(str[i].equals(\"+\")){\\n\t\t\t\tost.calc(1);\\n\t\t\t}\\n\t\t\telse if(str[i].equals(\"-\")){\\n\t\t\t\tost.calc(2);\\n\t\t\t}\\n\t\t\telse if(str[i].equals(\"*\")){\\n\t\t\t\tost.calc(3);\\n\t\t\t}\\n\t\t\telse{\\n\t\t\t\top = Long.parseLong(str[i]);\\n\t\t\t\tost.push(op);\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ost.pop());\\n\t}\\n}\\n\\nclass operateStack{\\n\tlong[] stack = new long[100];\\n\tint top;\\n\t\\n\toperateStack(){\\n\t\tfor(int i = 0; i < 100; i++){\\n\t\t\tstack[i] = 0;\\n\t\t}\\n\t\ttop = 0;\\n\t}\\n\t\\n\tvoid push(long op){\\n\t\tstack[top] = op;\\n\t\ttop ++;\\n\t}\\n\t\\n\tlong pop(){\\n\t\tlong op = stack[top - 1];\\n\t\tstack[top - 1] = 0;\\n\t\ttop --;\\n\t\t\\n\t\treturn op;\\n\t}\\n\t\\n\tvoid calc(int flag){\\n\t\tlong op, op2;\\n\t\tlong cal;\\n\t\t\\n\t\top = pop();\\n\t\top2 = pop();\\n\t\t\\n\t\tswitch(flag){\\n\t\tcase 1:\\n\t\t\tcal = op2 + op;\\n\t\t\tbreak;\\n\t\tcase 2:\\n\t\t\tcal = op2 - op;\\n\t\t\tbreak;\\n\t\tdefault:\\n\t\t\tcal = op2 * op;\\n\t\t\tbreak;\\n\t\t}\\n\t\t\\n\t\tpush(cal);\\n\t}\\n}", "target": "114", "substitutes": {"br": ["sr", "ler", "yr", "body", "nor", "bro", "bc", "Br", "err", "bh", "ber", "BR", "cr", "io", "er", "ob", "ibr", "HR", "r", "STR", "gr", "tr", "img", "hr", "obj", "sp", "arr", "bar", "mr", "vr", "ar", "ocr", "browser", "wr", "bs", "jar", "bm", "buf", "lr", "fr", "reader", "dr", "bl", "rb", "b"], "ost": ["ast", "oster", "opt", "oop", "ctor", "st", "orb", "or", "osta", "rob", "\u00f3", "util", "ust", "dd", "obo", "om", "oper", "bott", "oret", "ob", "boot", "host", "org", "oh", "os", "usr", "ld", "OST", "post", "oo", "tt", "oss", "obj", " nost", "hop", "osi", "ocr", "od", "rost", "tmp", "ot", "oid", "o", "ort", "ood", "iol", "obs", "tto", "omp", "ops", "ott", "ist", "otype", "to"], "str": ["sr", "id", "enc", "strip", "Str", "lc", "spr", "st", "line", "step", "rs", "in", "err", "oct", "cr", "er", "style", "split", "url", "spec", "r", "iter", "read", "STR", "war", "gr", "input", "tr", "usr", "strings", "stri", "kr", "data", "hr", "p", "n", "sp", "arr", "f", "star", "string", "char", "dec", "wr", "cur", "pass", "pr", "s", "div", "fr", "cl", "text", "sl", "status", "dr", "bl", "ar", "list", "name", "sta"], "len": ["base", "left", "lc", "loc", "lf", "line", "length", "lan", "part", "in", "limit", "z", "split", "lit", "name", "en", "lt", "ld", "ol", "ln", "fl", "dl", "il", "pos", "p", "n", "lock", "la", "li", "elt", "Len", "val", "el", "l", "lon", "log", "sl", "lim", "lin", "bl", "ls", "ll", "all", "list"], "top": ["path", "Top", "left", "fill", "opt", "file", "exit", "tp", "TOP", "part", "offset", "site", "scope", "best", "page", "hyp", "global", "peak", "root", "ps", "limit", "master", "last", "stop", "type", "level", "pop", "start", "bottom", "current", "pt", "upper", "ipop", "size", "non", "core", "index", "above", "pre", "push", "key", "p", "pos", "sp", "prev", "n", "hop", "max", "bot", "toc", "tip", "skip", "per", "parent", "dot", "lat", "platform", "x", "first", "success", "all", "null", "loop", "high", "tops", "name"], "op": ["operator", "app", "opt", "or", "oper", "start", "operation", "ope", "cat", "pos", "up", "val", "num", "x", "update", "co", " operation", "pp", "open", "prop", "option", "inc", "om", "root", "opp", "type", "upp", "pre", "key", "sp", "f", "ap", "cop", "opus", "vert", "init", "pop", "p", "hop", "ax", "dr", "jp", "post", "expr", "id", "slice", "cmp", "api", "loc", "oop", "al", "mod", "oct", "ip", "ind", "arg", "OP", "ipop", "oo", "Op", "push", "k", "obj", "bit", "prev", "it", "o", "image", "comp", "parent", "code", "l", "set", "oc", "ype", " pop"], "cal": ["can", "cf", "back", "ref", "opt", "loc", "gal", "other", "al", "aa", "bc", "inc", "rule", "ace", "oper", "cast", "las", "fc", "com", "play", "pe", "alias", "call", "broad", "Cal", "ac", "con", "ul", "oo", "event", "circ", "il", "cat", "update", "gl", "hop", "cache", "end", "acl", "ca", "bal", "coll", "col", "pg", "ax", "oe", "act", "val", "pal", "el", "keep", "num", "sum", "config", "align", "cl", "oc", "view", "real", "local", "valid", "all", "day", "ar", "list", "scale", "co"], "i": ["inner", "h", "in", "mi", "iv", "r", "gi", "phi", "qi", "me", "field", "x", "zi", "ci", "uri", "fi", "vi", "lc", "d", "ii", "cli", "io", "is", "index", "e", "f", "xi", "li", "multi", "eni", "isi", "hi", "u", "ti", "length", "pi", "mu", "ix", "abi", "c", "y", "uli", "p", "n", "ik", "ui", "iu", "oi", "bi", "ni", "ai", "I", "id", "j", "iii", "ri", "ip", "ind", "v", "t", "ji", "q", "it", "o", "di", "ini", "yi", "ie", "si", "info", "my", "b"], "stack": ["slice", "sc", "left", "pool", "look", "layer", "acks", "wrap", "file", "buffer", "st", "scope", "inc", "array", "table", "shell", "ps", "play", "pe", "box", "level", "pop", "ack", "ul", "pull", "index", "save", "roll", "chain", "push", "p", "sp", "Stack", "queue", "context", "hop", "cache", "cycle", "la", "window", "pad", "tree", "view", "cl", "set", "sl", "stage", "load", "struct", "stream", "que", "loop", "list", "fl", "scale", "source"], "flag": ["id", "lag", "cloud", "prop", "offset", "force", " flags", "group", "count", "type", "arg", "style", "start", "feature", "sync", "kind", "side", "key", "bit", "flags", "age", "wave", "bug", "mode", "leaf", "Flag", "fun", "char", "FLAG", "pad", "field", "code", "status", "mask", "ag", "state", "name", "sy"], "op2": ["hop2", "Op0", "oper1", "ip5", "optsecond", "opt2", "iptwo", " op5", "prop2", " op1", "oper5", "ip2", "op0", "Op1", "prop3", "opsecond", "opTwo", " op0", "propTwo", "propsecond", "prop1", "Op_", "hop4", "op_", " op3", "optwo", " optwo", "oper2", "oper_", " opTwo", " op4", "opt4", "optTwo", "prop4", "oper4", "opt3", "opertwo", "opt1", "op1", "op3", "op4", " op_", "ip4", "hop3", " opsecond", "Op2", "op5", "oper0"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String input;\\n        int m;\\n\\n        while (!(input = sc.next()).equals(\"-\")) {\\n            m = sc.nextInt();\\n            int[] h = new int[m];\\n            char[] output = new char[input.length()];\\n            for (int i = 0; i < m; i++) {\\n                h[i] = sc.nextInt();\\n            }\\n            for (int i = 0; i < input.length(); i++) {\\n                output[i] = input.charAt(i);\\n            }\\n\\n            for (int i = 0; i < m; i++) {\\n                output = change(output, input.length(), h[i]);\\n            }\\n            for (char c : output) System.out.print(c);\\n            System.out.println();\\n        }\\n    }\\n\\n    public static char[] change(char[] input, int length, int n) {\\n        char[] output = new char[length];\\n\\n        for (int i = 0; i < length - n; i++) {\\n            output[i] = input[i+n];\\n        }\\n        for (int i = length - n; i < length; i++) {\\n            output[i] = input[i + n - length];\\n        }\\n\\n        return output;\\n    }\\n}\\n", "target": "216", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "loc", " Sc", "cer", "ct", "sk", "Sc", " SC", "squ", "bc", "sf", "SC", "se", "scope", "sem", " scr", "com", "ss", "cli", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sec", "sh", "sp", "cle", "src", "rc", "anc", "sche", "cur", "coll", "sb", "cs", "cl", "pc", "ner", "sl", "ci", "asc", "screen", "mc", "sci"], "input": ["inner", "format", "base", "again", "back", "form", "in", "password", "url", "operation", "Input", "xml", "context", "ahead", "argument", "unknown", "insert", "entity", "field", "up", "qa", "list", "temp", "config", "path", "address", "http", "empty", "inc", "type", "plus", "element", "current", "this", "request", "data", "key", "alpha", "accept", "integer", "dc", "string", "next", "keep", "text", "select", "raw", "name", "enter", "error", "single", "comment", "audio", "resource", "out", "progress", "value", "batch", "inf", "connection", "view", "pattern", "null", "buffer", "source", "enc", "instance", "document", "str", "command", "prefix", "content", "session", "expression", "q", "image", "act", "div", "initial"], "m": ["id", "tm", "j", "man", "a", "mu", "dm", "fm", "in", "mi", "d", "am", "md", "sm", "z", "v", "im", "r", "y", "t", "k", "dim", "e", "machine", "p", "f", "mr", "pm", "mm", "cm", "hm", "module", "o", "M", "w", "l", "num", "x", "u", "g", "mini", "b"], "h": ["hh", "ch", "body", "ah", "d", "help", "bh", "hw", "ha", "header", "count", "z", "v", "H", "r", "oh", "host", "en", "ul", "he", "sh", "hr", "e", "p", "ih", "f", "end", "q", "hm", "rh", "ph", "o", "hs", "w", "uh", "l", "x", "u", "g", "hp", "b", "work"], "output": ["format", "external", "page", "help", "four", "character", "live", "r", "operation", "written", "office", "result", "reference", "version", "complete", "update", "temp", "config", "you", "change", "address", "function", "d", "global", "type", "default", "current", "data", "index", "key", "number", "f", "end", "string", "generation", "sort", "target", "text", "copy", "memory", "resource", "display", "bb", "generated", "position", "out", "progress", "value", "core", "cut", "p", "hidden", "contract", "dot", "letter", "object", "console", "body", "model", "str", "other", "unit", "Output", "foo", "v", "response", "network", "control", "expression", "module", "image", "o", "production", "l", "component", "voice", "initial", "b", "write"], "i": ["in", "mi", "strength", "start", "gi", "phi", "qi", "me", "w", "chi", "ei", "x", "zi", "ci", "uri", "fi", "mini", "ii", "cli", "z", "io", "data", "index", "e", "f", "xi", "li", "multi", "eni", "hi", "u", "ti", "name", "pi", "mu", "init", "ix", "abi", "y", "uli", "p", "ik", "ui", "iu", "oi", "bi", "ni", "ai", "I", "id", "slice", "j", "iii", "api", "ri", "a", "ip", "ori", "v", "ji", "q", "it", "o", "di", "ini", "yi", "ie", "l", "si", "info", "g", "b"], "c": ["id", "enc", "ch", "lc", "a", "str", "d", "count", "character", "v", "esc", "r", "out", "t", "k", "e", "p", "f", "cache", "string", "char", "C", "o", "col", "s", "cs", "code", "l", "x", "ci", "u", "g", "b", "name"], "length": ["base", "form", "len", "in", "limit", "count", "start", "url", "point", "sh", "pos", "frame", "duration", "w", "version", "num", "x", "list", "distance", "path", "line", "front", "d", "type", "z", "style", "H", "padding", "number", "f", "end", "string", "width", "full", "N", "text", "load", "name", "work", "section", "angle", "level", "split", "position", "core", "p", "L", "floor", "view", "block", "letter", "sequence", "slice", "id", "j", "body", "height", "part", "al", "v", "shape", "ln", "Length", "k", "q", "power", "o", "pad", "range", "code", "l", "cost", "size", "b", "total"], "n": ["j", "one", "a", "len", "sn", "ns", "d", "count", "v", "z", "an", "r", "en", "y", "nc", "t", "ln", "nb", "k", "e", "number", "p", "ne", "f", "q", "pn", "o", "w", "s", "code", "rn", "N", "l", "num", "x", "u", "size", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tString s = scan.next();\\n\t\tString t = scan.next();\\n\\n\t\tint ans = 0;\\n\t\tint i;\\n\t\tint length = s.length();\\n\t\tfor(i = 0; i < length; i++) {\\n\t\t\tif(s.substring(i, i + 1).equals(t.substring(i, i + 1)))\\n\t\t\t\tans++;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "243", "substitutes": {"scan": ["sc", "can", "open", "look", "nn", "fan", "query", "build", "se", "in", "server", "connect", "er", "an", "sync", "iter", "r", "out", "search", "sub", "clean", "match", "see", "ln", "network", "stat", "chan", "cat", "san", "n", "watch", "walk", "bug", "span", "system", "row", "next", "na", "feed", "filter", "skip", "dot", "l", "Scan", "ignore", "parse", "pin", "ner", "ann", "all", "sign", "reader", "b"], "s": ["gs", "fs", "sys", "su", "a", "ns", "sf", "in", "se", "services", "ss", "ps", "sets", "south", "is", "aws", "os", "xs", "es", "strings", "ds", "ses", "p", "ks", "string", "as", "o", "sb", "cs", "S", "l", "si", "sl", "u", "ls", "service", "sv", "ts", "ins"], "t": ["tm", "j", "h", "a", "d", "tf", "the", "ta", "v", "at", "c", "m", "txt", "r", "y", "pt", "qt", "T", "tr", "tt", "k", "p", "n", "f", "string", "att", "test", "o", "w", "l", "x", "u", "rt", "b", "ts"], "ans": ["lines", "aces", "outs", "ats", "a", "len", "errors", "lan", "ons", "aning", "runs", "AN", "aus", "ls", "ss", "ions", "nas", "amps", "ones", "an", "is", "ations", "ars", "os", "aned", "es", "rows", "cas", "offs", "ents", "ds", "plan", "n", "ids", "ks", "span", "anc", "ANS", "na", "as", "blocks", "ians", "faces", "anned", "acts", "cs", "ants", "eps", "x", "ops", "ann", "reads", "ai", "annot", "ins"], "i": ["id", "slice", "inner", "j", "api", "ri", "h", "a", "ami", "pi", "mu", "in", "d", "init", "ii", "ip", "strength", "z", "io", "v", "c", "ix", "m", "ori", "gi", "index", "k", "phi", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "isi", "oi", "ie", "yi", "chi", "iri", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "ti", "u", "uri", "fi", "ai", "ni", "mini", "I", "name", "vi"], "length": ["slice", "distance", "strip", "ql", "base", "form", "section", "pi", "len", "part", "angle", "ip", "limit", "count", "type", "level", "style", "split", "name", "match", "position", "shape", "Length", "index", "padding", "key", "number", "p", "division", "duration", "end", "string", "power", "width", "ph", "full", "th", "range", "quality", "code", "l", "pattern", "x", "time", "text", "block", "depth", "sequence", "zip", "total", "ith", "work"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint n = sc.nextInt();\\n\t\tint[] array = new int[n];\\n\t\tfor(int i = 0; i < array.length; i++)\\n\t\t\tarray[i] = sc.nextInt();\\n\t\t\\n\t\tint count = 1;\\n\t\tfor(int i = 1; i < array.length; i++) {\\n\t\t\tboolean flag = true;\\n\t\t\tfor(int j = 0; j < i; j++)\\n\t\t\t\tif(array[j] > array[i])\\n\t\t\t\t\tflag = false;\\n\t\t\tcount += flag ? 1 : 0;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n", "target": "7", "substitutes": {"sc": ["cont", "isc", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "ss", "fc", "uc", "cr", "esc", "c", "scan", "osc", "tc", "ec", "con", "nc", "sch", "cc", "sh", "sec", "cus", "cor", "sp", "src", "rc", "system", "anc", "sche", "ca", "class", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "screen", "sci"], "n": ["nn", "conn", "nor", "len", "ns", "in", "d", "no", "z", "c", "m", "sync", "en", "network", "nc", "t", "nb", "k", "nt", "e", "number", "p", "ne", "f", "nat", "na", "o", "N", "l", "num", "x", "ni", "size", "b"], "array": ["instance", "air", "object", "base", "api", "address", "app", "section", "function", "length", "a", "database", "option", "audio", "angle", "group", "v", "area", "pair", "element", "feature", "current", "shape", "size", "value", "data", "index", "archive", "complex", "number", "batch", "alpha", "arr", "Array", "expression", "integer", "result", "ray", "string", "system", "row", "image", "coll", "average", "answer", "range", "collection", "allow", "version", "field", "l", "align", "view", "ignore", "record", "shared", "auto", "ar", "list", "sample", "order"], "i": ["id", "ri", "h", "length", "pi", "ij", "I", "in", "mi", "init", "ip", "ii", "ind", "z", "v", "ix", "c", "io", "ori", "start", "is", "y", "gi", "index", "phi", "key", "e", "p", "f", "qi", "ji", "ik", "ui", "xi", "li", "iu", "it", "o", "di", "ini", "ie", "si", "bi", "info", "x", "ci", "u", "ni", "uri", "ai", "b"], "count": ["id", "lag", "base", "error", "counter", "check", "length", "len", "part", "offset", "ind", "group", "child", "last", "z", "c", "start", "Count", "stat", "index", "data", "number", "f", "cache", "max", "bug", "found", "val", "code", "sum", "info", "weight", "depth", "size", "list", "b", "total", "name"], "j": ["id", "ja", "J", "js", "ij", "job", "err", "jj", "ii", "bj", "ind", "z", "v", "ix", "je", "is", "y", "jit", " ii", "jc", "jl", "index", "k", "key", "e", "dj", "p", "obj", "qi", "f", "ji", "aj", "ik", "ui", "li", "next", "it", "o", "di", "ie", "l", "si", "uj", "fr", "x", "jo", "oj", " dj", "jp", "b"], "flag": ["id", "close", "lag", "back", "bool", "len", "part", "offset", "force", " flags", "group", " bit", "start", "feature", "sync", "wait", "key", "ret", "continue", "enable", "bit", "ancy", "f", "flags", "cat", "bug", "leaf", "Flag", "active", "binary", "debug", "FLAG", "use", "ish", "field", "code", "sum", "info", "status", "mask", "af", "ant", "all", "size", "ag"]}}
{"code": "import java.awt.geom.Point2D;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collection;\\nimport java.util.Collections;\\nimport java.util.Comparator;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.NoSuchElementException;\\nimport java.util.Scanner;\\nimport java.util.Map.Entry;\\nimport java.util.function.BiFunction;\\nimport java.util.function.Function;\\nimport java.util.function.Supplier;\\n\\npublic class Main {\\n    Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    void run() {\\n        int inp_num = Integer.parseInt(sc.next());\\n        HashMap<String, Integer> m = new HashMap<String, Integer>();\\n        for (int i = 0; i < inp_num; i++) {\\n            String s = sc.next();\\n            if (m.containsKey(s)) {\\n                m.put(s, m.get(s) + 1);\\n            } else {\\n                m.put(s, 1);\\n            }\\n        }\\n        int ma = -1;\\n        ArrayList<String> candidates = new ArrayList<>();\\n        for (Entry<String, Integer> ent : m.entrySet()) {\\n            if(ma == ent.getValue()){\\n                candidates.add(ent.getKey());\\n            }else if(ma < ent.getValue()){\\n                candidates.clear();\\n                ma = ent.getValue();\\n                candidates.add(ent.getKey());\\n            }\\n      }\\n      Collections.sort(candidates);\\n      for(String can : candidates){\\n        System.out.println(can);\\n      }\\n  }\\n}", "target": "235", "substitutes": {"sc": ["sw", "isc", "ch", "console", "lc", "cer", "Sc", "bc", "scope", "SC", "sem", " scr", "ss", "uc", "cr", "esc", "c", "scan", "osc", "spec", "sync", "tc", "ec", "nc", "cc", "sh", "sec", "cus", "desc", "sp", "dc", "cle", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "si", "cl", "pc", "parser", "ci", "asc", "screen", "cv", "mc", "sci"], "inp_num": ["inp_number", "inq_num", "inq_size", "inp_sum", "inP_orig", "inP_number", "inP_num", "inq_number", "inq_orig", "inP_sum", "inp_size", "inp_orig"], "m": ["tm", "man", "h", "mu", "dm", "imm", "fm", "d", "mi", "am", "om", "sm", "im", "manager", "c", "v", "menu", "mand", "mean", "dim", "e", "wm", "p", "n", "gm", "machine", "map", "mr", "ym", "pm", "mm", "cm", "hm", "module", "mos", "o", "M", "bm", "l", "nm", "vm", "rm", "em", "ms", "meta", "u", "um", "mc"], "i": ["j", "ri", "pi", "mu", "ii", "ip", "v", "abi", "gi", "uli", "fi", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "multi", "di", "oi", "yi", "chi", "si", "bi", "hi", "zi", "x", "ci", "u", "ni", "uri", "ti", "ai", "I", "vi"], "s": ["id", "gs", "features", "h", "str", "js", "ns", "rs", "site", "d", "services", "ss", "ps", "sets", "c", "is", "abs", "sync", "r", "settings", "spec", "os", "xs", "strings", "es", "rows", "ds", "ves", "names", "p", "n", "ses", "f", "ssl", "sym", "string", "ws", "as", "o", "hs", "its", "ges", "us", "S", "l", "si", "ches", "uses", "words", "tests", "u", "g", "ls", "b", "ts", "ins"], "ma": ["sea", " va", "mas", "a", " fa", "mar", "fa", "media", "sa", "mia", "MA", "no", "mma", "ha", " ra", " ta", "ta", "ia", "Ma", " sa", "ga", "data", "ada", " na", "ea", "sha", "pa", "alpha", "ima", " wa", "aga", "mm", "la", " da", "wa", "na", " ga", "va", "ca", "ra", "ama", "ya", "asa", "lia", "si", "da", " la", "qa", "ci", "mad", "auto", "meta", "ms", "mo", " rule"], "candidates": ["candases", "Candlines", "charases", " candases", "verores", "Candidation", "castases", "contractidate", "contractidated", "Candidated", " Candidates", "veridated", "veridates", "candidated", "Candores", "Candidates", "chidates", "chidation", "oridates", " Candidate", "candates", "contractidation", " Candles", "castates", " Candidated", "Candidate", " candores", "guores", "contractlines", "candles", "charidates", "chores", "guidates", "veridation", "charates", "chidate", "candidation", "guidation", "charidated", "orles", "candores", "antidates", "Candles", " candidated", "antidated", " candates", "antidate", "candlines", " candlines", "contractidates", " candidate", "antidation", " candidation", "castidates", "guidate", "oridated", "castores", "oridate", "charores", "candidate", "charidation"], "ent": ["enc", "loc", "ENT", "rent", "ct", "form", "art", "or", "vert", "Ent", "de", "inc", "node", "server", "et", "ment", "c", "ente", "en", "ec", "ident", "sett", "ce", "sent", "event", "from", "ento", "ents", "nt", "det", "e", "oss", "ew", "gent", "vent", "intent", "end", "od", "anc", "dec", "entity", "enter", "set", "exp", "pent", "ott", "ant", "inst", "entry", "cent"], "can": ["id", "token", "path", "ban", "co", "will", "lan", "AN", "in", "Can", "cross", "cand", "must", "CAN", "cover", "annot", "an", "c", "scan", "match", "word", "out", "con", "bean", "re", "k", "cn", "cat", "char", "anc", "car", "pan", "as", " Can", "ca", "kan", "class", "any", "kin", "valid", " cannot", "ann", "all", "null", "bank", "could", "card", "name"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        String text1 = sc.nextLine();\\n        String text2 = sc.nextLine();\\n\\n        int wordNum = text1.length();\\n        int diffCount=0;\\n\\n        for(int i=0;i<wordNum;i++){\\n            if(text1.charAt(i) != text2.charAt(i)){\\n                diffCount +=1;\\n            }\\n        }\\n        System.out.println(diffCount);\\n    }\\n}", "target": "40", "substitutes": {"sc": ["sw", "ch", "console", "lc", " Sc", "cer", "Sc", " SC", "bc", "sf", "se", "SC", "com", "ss", "server", "fc", "uc", "cr", "esc", "c", "scan", "osc", "sync", "this", "ec", "nc", "cc", "sh", "sec", "core", "ctx", "sp", "src", "ocr", "rc", "anc", "cur", "class", "cs", "cl", "pc", "parse", "ner", "text", "ci", "asc", "mc", "sci"], "text1": ["source1", "form2", " textone", "wordfirst", "shortone", "source3", "text3", "TextFirst", "form1", "formfirst", "wordA", "wordOne", "textOne", "TextA", "textone", "textFirst", "textA", "source2", "Text0", "word1", "word3", "text0", "sourceFirst", "wordFirst", "textfirst", "sourceOne", "sourcefirst", "shortOne", "short0", "TextOne", " textOne", "short1", "form3", "Text1", " text0", "sourceA", "word2", "Textone"], "text2": ["struct2", "textB", "structTwo", "TEXT2", "TEXTB", " textB", " textsecond", "structsecond", "stringB", "TEXTTwo", " textTwo", "structB", "string2", "text0", "TEXT0", "struct0", "textTwo", "stringsecond", "string0", " text0", "textsecond"], "wordNum": ["wordSum", "lineNum", "lineCount", " wordChan", "letterSum", " wordCount", " wordFlow", "WordCount", "WordNum", "letterConf", " wordSum", "letterNum", "lineFlow", " wordConf", "wordCount", "lineChan", "textCount", "wordFlow", "textSum", "letterCount", "WordChan", "textConf", "wordConf", "WordFlow", "wordChan", "textNum"], "diffCount": ["missingcount", "DiffSize", "diffTime", " differenceTime", "errorcount", "missingSize", "diffCounter", "differentSize", " diffCheck", "DiffCounter", " differenceCheck", "differentCount", "diffDist", "Diffcount", "DiffCheck", "DiffCount", "differentCounter", "diffLength", " diffLength", "missingDist", "diffcount", "missingCount", "differentcount", "iffSize", "diffCheck", "errorSize", " differenceLength", "iffcount", "errorCount", " diffTime", "diffSize", "iffCount", "iffDist", "errorDist", "DiffLength", "errorCounter", "DiffTime", " differenceCount"], "i": ["slice", "id", "j", "ri", "h", "pi", "I", "in", "d", "init", "ii", "ip", "ori", "v", "io", "c", "ix", "m", "z", "r", "gi", "index", "data", "k", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "eni", "oi", "ie", "chi", "l", "si", "hi", "info", "x", "ci", "u", "uri", "ai", "temp", "ti"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.List;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tArrayList<Double> list = new ArrayList<>();\\n\t\twhile (true) {\\n\t\t\ttry {\\n\t\t\t\tInteger.valueOf(br.readLine());\\n\t\t\t\tString aaa = br.readLine();\\n\t\t\t\tString[] bbb = aaa.split(\" \");\\n\t\t\t\tList<String> tmp = Arrays.asList(bbb);\\n\t\t\t\tArrayList<String> tmp2 = new ArrayList<String>(tmp);\\n\t\t\t\tfor (String t : tmp2) {\\n\t\t\t\t\tlist.add(Double.parseDouble(t));\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\tCollections.sort(list);\\n\t\t\t\tCollections.reverse(list);\\n\t\t\t\tdouble newValue = 0;\\n\t\t\t\twhile (list.size() != 1) {\\n\t\t\t\t\tnewValue = list.get(list.size() - 1) + list.get(list.size() - 2);\\n\t\t\t\t\tnewValue = newValue / 2.00;\\n\t\t\t\t\tlist.set(list.size() - 2,newValue);\\n\t\t\t\t\tlist.remove(list.size() - 1);\\n\t\t\t\t\tCollections.sort(list);\\n\t\t\t\t\tCollections.reverse(list);\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(list.get(0));\\n\t\t\t\t\\n\t\t\t} catch (NumberFormatException | IOException e) {\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\\n\t}\\n\\n}\\n", "target": "232", "substitutes": {"br": ["sr", "ch", "yr", "ab", "cb", "orb", "bro", "Br", "obl", "bb", "err", "bh", "ber", "BR", "cr", "ob", "r", "db", "tr", "img", "nr", "hr", "obj", "sp", "arr", "bar", "mr", "src", "cro", "bridge", "browser", "av", "wr", "bs", "cur", "ra", "jar", "buf", "raf", "ref", "lr", "fr", "handle", "reader", "dr", "bl", "rt", "rb", "b"], "list": ["base", "layer", "counter", "form", "table", "server", "pair", "live", "lists", "word", "like", "result", "la", "i", "collection", "record", "diff", "bl", "temp", "entry", "lc", "function", "user", "cli", "group", "type", "default", "now", "current", "see", "this", "search", "pull", "pre", "index", "data", "key", "e", "number", "string", "li", "next", "multi", "stack", "full", "LIST", "yet", "tree", "keep", "cl", "results", "later", "load", "all", "loop", "work", "cont", "right", "section", "and", "best", "the", "out", "json", "value", "chain", "batch", "item", "test", "low", "we", "view", "history", "null", "ls", "get", "source", "id", "listed", "object", "pool", "left", "str", "detail", "part", "array", "last", "queue", "cache", "module", "coll", "parent", "code", "l", "info", "set", "ll"], "aaa": ["api", "ani", "ba", "cb", "asha", "oa", "a", " fa", "anne", "abb", "abba", "aa", "sa", "afi", "array", "usa", "ampa", "foo", "aura", "xxx", "AA", "abc", "iana", "area", "aja", "aaaa", "data", "nb", "ava", "arr", "aj", "string", "la", "asa", "amba", "ora", "AAAA", "attr", "af", "aka", "anza", "b"], "bbb": ["BBp", "obb", "cba", "BBCa", "BBCn", "BBCB", "obl", "BBCb", "bbs", "BBB", "bbp", "BBl", "obp", "cbs", "BBn", "cbl", "bba", "cbB", "bbl", "bbn", "bbB", "cbp", "BBa", "obs", "cbn", "BBb", "cbb", "BBs"], "tmp": ["tab", "etc", "storage", "cb", "imm", "csv", "bb", "array", "zip", "foo", "area", "txt", "np", "nb", "data", "bps", "obj", "arr", "bp", "appy", "cro", "www", "stuff", "test", "pkg", "stack", "buf", "bt", "kk", "fb", "mp", "copy", "rb", "temp", "b"], "tmp2": ["tmp6", "tmpb", " tmp1", "temp6", "arrayb", "temp2", "temp1", " tmpb", "array6", "tmp1", "mp2", "array2", "array1", "tempb", " tmp6", "mpb", "mp1"], "t": ["token", "a", "str", "d", "template", "tf", "v", "c", "txt", "r", "out", "pt", "T", "tr", "unt", "tt", "dt", "k", "e", "p", "n", "f", "title", "te", "q", "string", "o", "w", "i", "target", "task", "bt", "l", "text", "x", "u", "ant", "rt", "b", "ts"], "newValue": ["getValue", " newAverage", "NewValues", "newAverage", "NewAverage", "getVALUE", "nowValue", "currentVal", "NewVALUE", "resourceVALUE", "newFunction", "getVal", "resourceVal", "newVal", " newVal", "nowVal", "expectedVal", "expectedVALUE", "resourceValues", "nextValues", "resourceValue", "newValues", "nowSize", " newvalue", "NewFunction", "currentvalue", "currentVALUE", " newSize", "newVALUE", "nextValue", " newFunction", " newVALUE", "nextFunction", "newSize", "nowAverage", "nextVal", "NewSize", "NewVal", "getvalue", "newvalue", "expectedValue", "NewValue", "currentValue", "expectedvalue", "Newvalue", " newValues"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\t\\n\tstatic long mod= (long) 1e9+7;\\n\t\\n\t\t\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t// TODO Auto-generated method stub\\n\t\tReader.init(System.in);\\n\t\tPrintWriter out=new PrintWriter(System.out);\\n\t\tlong a=Reader.nextInt();\\n\t\tout.println(a+a*a+a*a*a);\\n\t\t\\n\t\t\\n\t\tout.flush();\\n\t\t\\n\t}\\n\\n}\\n\\nclass Seg{\\n\t\\n\tint[] tree,arr;\\n\t\\n\tSeg(int n,int[] a){\\n\t\ttree=new int[4*n];arr=a;\\n\t}\\n\t\\n\tvoid build(int index, int left, int right) {\\n\t\tif(left==right) tree[index]=arr[left];\\n\t\telse {\\n\t\t\tint mid=(left+right)/2;\\n\t\t\tbuild(2*index+1,left,mid);\\n\t\t\tbuild(2*index+2,mid+1,right);\\n\t\t\ttree[index]=Math.max(tree[2*index+1],tree[2*index+2]);\\n\t\t}\\n\t}\\n\t\\n\tint query(int index, int ql, int qr, int left, int right) {\\n\t\tif(ql<=left && right<=qr) return tree[index];\\n\t\telse if(ql > right || qr<left) return 0;\\n\t\telse {\\n\t\t\tint mid=(left+right)/2;\\n\t\t\treturn Math.max(query(2*index+1,left,mid,ql,qr), query(2*index+2,mid+1,right,ql,qr));\\n\t\t}\\n\t}\\n\t\\n\tvoid update(int index, int left, int right, int pos, int val) {\\n\t\tif(left==right) {\\n\t\t\ttree[index]=val;\\n\t\t}\\n\t\telse {\\n\t\t\tint mid=(left+right)/2;\\n\t\t\tif(pos<=mid) {\\n\t\t\t\tupdate(2*index+1,left,mid,pos,val);\\n\t\t\t}\\n\t\t\telse update(2*index+2,mid+1,right,pos,val);\\n\t\t\ttree[index]=Math.max(tree[2*index+1],tree[2*index+2]);\\n\t\t}\\n\t}\\n}\\n\\n\\nclass Reader {\\n    static BufferedReader reader;\\n    static StringTokenizer tokenizer;\\n    /** call this method to initialize reader for InputStream */\\n    static void init() throws IOException {\\n        reader = new BufferedReader(\\n                new FileReader(\"C:\\\\Users\\\\samee\\\\Desktop\\\\GRE prep\\\\confusion.txt\"));\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n    static void init(InputStream input) {\\n        reader = new BufferedReader(\\n                new InputStreamReader(input) );\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n    /** get next word */\\n    static String nextLine() throws IOException{\\n        return reader.readLine();\\n    }\\n    static String next() throws IOException {\\n        while ( ! tokenizer.hasMoreTokens() ) {\\n            //TODO add check for eof if necessary\\n            tokenizer = new StringTokenizer(\\n                    reader.readLine() );\\n        }\\n        return tokenizer.nextToken();\\n    }\\n    static int nextInt() throws IOException {\\n        return Integer.parseInt( next() );\\n    }\\n    static long nextLong() throws IOException {\\n        return Long.parseLong( next() );\\n    }\\n    static double nextDouble() throws IOException {\\n        return Double.parseDouble( next() );\\n    }\\n}", "target": "162", "substitutes": {"mod": ["port", "base", "access", "amd", " access", "lib", "fd", "ix", " pow", "min", "add", "ver", "mode", "lock", "max", "fun", "module", " mods", "comp", "mac", "MOD", "num", "log", "exp", "x", "Mod", "scale", "name"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tlong k=sc.nextLong();\\n\t\tint q=Integer.parseInt(sc.next());\\n\t\tsc.nextLine();\\n\t\tlong[] score=new long[n];\\n\t\twhile(sc.hasNextLine()) {\\n\t\t\tscore[Integer.parseInt(sc.nextLine())-1]++;\\n\t\t}\\n\t\tfor(long l:score) {\\n\t\t\tif(k-q+l>0) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t}else {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "102", "substitutes": {"sc": ["sw", "cont", "sr", "ch", "cf", "enc", "lc", "soc", " Sc", "cb", "cer", "str", "sk", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "cli", "uc", "cr", "esc", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "cor", "sh", "cus", "core", "sec", "sp", "ser", "dc", "src", "rc", "system", "anc", "sche", "cur", "coll", "class", "sb", "cs", "cl", "exp", "pc", "parse", "ner", "sl", "exec", "ci", "asc", "cv", "mc", "sci"], "n": ["j", "nn", "h", "a", "sn", "ns", "in", "d", "init", "nl", "v", "z", "c", "ny", "m", "r", "en", "y", "nc", "t", "nt", "e", "number", "p", "f", "max", "o", "s", "i", "N", "num", "x", "u", "all", "b"], "k": ["j", "h", "sk", "d", "ko", "z", "v", "c", "_", "m", "r", "y", "ok", "e", "p", "f", "ks", "K", "ik", "o", "w", "i", "kid", "kw", "kk", "ke", "x", "u", "g", "b"], "q": ["id", "Q", "j", "ch", "h", "check", "length", "d", "count", "z", "v", "ix", "c", "sq", "m", "y", "t", "qu", "qs", "p", "f", "qi", "quant", "w", "i", "x", "u", "g", "eq", "b"], "score": ["id", "error", "Score", "check", "length", "or", "grade", "err", "winner", "kill", "count", "play", "goal", "z", "v", "level", "c", "scan", "board", "live", "match", "style", "er", "clean", "fee", "core", "index", "nice", "key", "p", "result", "sd", "test", "sort", "player", "code", "weight", "ignore", "ner", "scoring", "cost", "est", "size", "une", "vec", "rank", "rate", "order"], "parseInt": ["parserLong", "arseQ", "evalINT", "arseDouble", " parseINT", " parseLong", "packInteger", "arseLong", "parseDouble", "parserDouble", "evalLong", "evalInteger", "parserInt", "evalInt", "parseINT", " parseQ", "parseQ", "packInt", " parseDouble", "arseInt", "parseLong", "packINT", "packLong", "parseInteger", "parserQ", " parseInteger"], "nextLine": ["badLine", "currentRow", "NextLINE", " nextRow", "NextLin", "nextLINE", "nextline", "Nextline", "nextRow", "NextLine", "currentline", "NextRow", "currentLine", "badRow", " nextPage", "NextPage", "badLin", "currentPage", "nextLin", " nextLin", "badLINE", " nextline", " nextLINE", "nextPage"], "l": ["j", "lc", "le", "lp", "lu", "h", "kl", "nl", "z", "v", "c", "ol", "ln", "jl", "dl", "il", "lv", "p", "L", "ly", "rl", "li", "o", "i", "el", " L", "lr", "lo", "sl", "u", "ell", "ls", "ll", "b"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\n/**\\n * Built using CHelper plug-in Actual solution is at the top\\n */\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tInputStream inputStream = System.in;\\n\t\tOutputStream outputStream = System.out;\\n\t\tInputReader in = new InputReader(inputStream);\\n\t\tPrintWriter out = new PrintWriter(outputStream);\\n\t\tTask solver = new Task();\\n\t\tsolver.solve(1, in, out);\\n\t\tout.close();\\n\t}\\n\\n\tstatic class Task {\\n\t\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\\n\t\t\tint N = in.nextInt();\\n\t\t\tint[] H = new int[N];\\n\t\t\tint max = 0;\\n\t\t\tint count = 0;\\n\t\t\tfor(int i = 0; i < N; i++) {\\n\t\t\t\tH[i] = in.nextInt();\\n\t\t\t\tif(max <= H[i]) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t\tmax = H[i];\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tout.println(count);\\n\t\t}\\n\t}\\n\\n\tstatic class InputReader {\\n\t\tpublic BufferedReader reader;\\n\t\tpublic StringTokenizer tokenizer;\t\\n\\n\t\tpublic InputReader(InputStream stream) {\\n\t\t\treader = new BufferedReader(new InputStreamReader(stream), 32768);\\n\t\t\ttokenizer = null;\\n\t\t}\\n\\n\t\tpublic String next() {\\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn tokenizer.nextToken();\\n\t\t}\\n\\n\t\tpublic char nextChar() {\\n\t\t\treturn next().charAt(0);\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\\n\t\tpublic double nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tpublic long nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\\n\t}\\n}\\n", "target": "7", "substitutes": {"inputStream": ["inputHandler", " inputstream", " inputSteam", "outputstream", "outputSteam", " inputHandler", "inputstream", "Inputstream", "outputHandler", "inputSteam", "InputSteam", "InputHandler", "InputStream"], "outputStream": ["OutputForm", "Outputstream", "memoryForm", "inputForm", "outputstream", "memorySteam", " outputStreamer", "outputSteam", "OutputStream", "OutputStreamer", "inputstream", "outputForm", "inputSteam", "OutputSteam", "memoryStreamer", " outputForm", "memoryStream", " outputstream", " outputSteam", "outputStreamer"], "in": ["id", "slice", "inner", "path", "sin", "login", "again", "conn", "gin", "file", "bin", "cin", "init", "din", "err", "inc", "user", "client", "io", "er", "c", "inside", "url", "is", "r", "this", "read", "con", "input", "request", "min", "pull", "data", "index", "gen", "isin", "n", "win", "f", "IN", "inn", "inf", "ic", "connection", "image", "In", "ini", "s", "nin", "l", "log", "config", "info", "pin", "exec", "vin", "lin", "source", "ins"], "out": ["path", "again", "inner", "pool", "error", "outs", "writing", "file", "conn", "gin", "exit", "outside", "line", "bin", "part", "memory", "page", "timeout", "no", "err", "inc", "init", "user", "array", "server", "process", "client", "io", "v", "outer", "OUT", "call", "prefix", "sync", "r", "word", "this", "to", "session", "data", "ex", "net", "cache", "off", "string", "dump", "window", "connection", "o", "In", "raw", "w", "up", "work", "parent", "log", "exec", "x", "ext", "Out", "socket", "output", "write", "copy", "gen", "list", "temp", "b", "writer", "name"], "solver": ["solution", "Sol", "ssolver", "ssolution", "insolve", "ssolving", "insolution", "setsolving", "setsolution", "setsolve", "Solve", "insol", "ssol", "solve", "insolver", "solving", "ssolve", "Solution", "Solver", "sol", "Solving", "setsolver"], "testNumber": [" trialNum", " trialNumber", "Testnumber", " trialnumber", "TestNumber", "testnumber", " trialNumbers", " testnumber", "TestNumbers", " testNum", "testNumbers", "TestNum", " testNumbers", "testNum"], "N": ["Q", "Ne", "Ni", "Ns", "F", "NM", "NL", "Max", " n", "NB", "Num", "Count", "NH", "T", "NI", "Y", "NT", "NS", "n", "R", "L", "ND", "K", "NR", "W", "Limit", "C", "O", "NC", "NA", "D", "MN", "M", "KN", "U", "Z", "S", "X", "V", "NN", "P", "Size", "GN", "I"], "H": ["MH", "Q", "SH", "CL", "HD", "CH", "h", "J", "F", "HC", "OH", "GH", "HQ", "RH", "HM", "Max", "Ch", "HK", "Host", "HR", "DH", "NH", "WH", "HP", "T", "Y", "R", "L", "K", "W", "CR", "HI", "HTTP", "rh", "EH", "HT", "HA", "HS", "U", "HB", "X", "V", "FH", "P", "HE", "ID", "HH", "I"], "max": ["id", "h", "wrap", "always", "right", "height", "length", "orig", "init", "no", "force", "limit", "Max", "last", "default", "head", "MAX", "min", "chain", "key", "number", "n", "prev", "cache", "q", "end", "conf", "ax", "act", "parent", "sum", "cl", "X", "auto", "est", "size", "rank", "total", "work"], "count": ["id", "error", "h", "counter", "check", "length", "part", "limit", "child", "last", "default", "c", "start", "Count", "min", "index", "key", "cat", "number", "batch", "n", "p", "age", "cache", "more", "found", "coll", "col", "th", "allow", "code", "keep", "num", "sum", "info", "ignore", "weight", "depth", "size", "list", "total", "work"], "i": ["id", "slice", "inner", "j", "ri", "h", "pi", "part", "init", "ip", "ii", "cli", "v", "ix", "abi", "io", "y", "gi", "index", "phi", "e", "p", "n", "fi", "qi", "f", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "oi", "chi", "si", "bi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "I"], "reader": ["ler", "slice", "inner", "iterator", "ri", "file", "or", "resource", "report", "ry", "table", "server", "client", "er", "io", "manager", "pointer", "Reader", "url", "iter", "r", "read", "this", "reading", "holder", "input", "re", "loader", "e", "driver", "worker", "row", "feed", "it", "connection", "readable", "per", "container", "handler", "parser", "buffer", "writer", "source"], "tokenizer": ["okenner", "tokenize", "okenizer", "tokener", "Tokenize", "tokenner", "initialize", "Tokenizer", "normalizer", "optimner", " tokeniser", "okenization", " tokenization", "Tokenler", "serialize", "normalize", "optimiter", "optimizer", "initializer", "tokenizable", "tokeniner", " tokenner", "okenize", "okenized", "Tokener", "initialization", "serialer", "tokeniser", " tokeniter", "serialization", "Tokenized", "Tokeniner", "tokenler", "okeniner", " tokenizable", "tokeniter", "initialner", "okeniser", "Tokeniser", "tokenized", " tokenized", "optimization", "tokenization", "okenler", " tokeniner", " tokener", "normalization", "Tokenner", "serializer", "okenizable", " tokenize", "initialiter", "Tokenizable", " tokenler", "Tokenization", "normalner"], "stream": ["draft", "writer", "sw", "Stream", "file", "document", "body", "buffer", "form", "length", "message", "serial", "resource", "user", "server", "client", "response", "r", "read", "input", "request", "data", "channel", "loader", "f", "context", "lock", "driver", "string", "row", "system", "feed", "connection", "coll", "trans", "view", "null", "handler", "socket", "raw", "ream", "source"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String reg = \"\\\\d+\";\\n\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        String s = sc.next();\\n        boolean atrue = true;\\n        boolean btrue = true;\\n        boolean hi = true;\\n\\n        for(int i=0; i<s.length(); i++){\\n            if(i < a && !Character.isDigit(s.charAt(i))){\\n                atrue = false;\\n            }\\n\\n            if (i == a && !(s.charAt(i) == '-')){\\n                hi = false;\\n            }\\n\\n            if(!Character.isDigit(s.charAt(i)) && i > a){\\n                btrue = false;\\n            }\\n        }\\n\\n        if(atrue && btrue && hi){\\n            System.out.println(\"Yes\");\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n    }\\n\\n    public static void printListOneLine(List list){\\n        for(int i=0; i<list.size(); i++){\\n            System.out.println(list.get(i));\\n        }\\n    }\\n\\n    public static void printList(List list){\\n        for(int i=0; i<list.size(); i++){\\n            if(i == list.size()){\\n                System.out.println(list.get(i));\\n            } else {\\n                System.out.print(String.format(\"%d \", list.get(i)));\\n            }\\n        }\\n    }\\n\\n    public static void printArray(int[] array){\\n        for(int i=0; i<array.length; i++){\\n            if(i == array.length){\\n                System.out.println(array[i]);\\n            } else {\\n                System.out.print(String.format(\"%d \", array[i]));\\n            }\\n        }\\n    }\\n\\n    public static int gcd(int a, int b){\\n        if (b == 0) return a;\\n        return gcd(b, a % b);\\n    }\\n\\n    public static int lcm(int a, int b){\\n        return a * b / gcd(a, b);\\n    }\\n}\\n", "target": "78", "substitutes": {"sc": ["sw", "cont", "ch", "lc", " Sc", "ct", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "ec", "search", "nc", "sch", "tc", "cc", "sh", "sec", "cus", "sp", "ser", "acc", "rc", "system", "anc", "sche", "sb", "cs", "cl", "pc", "ner", "asc", "cv", "sci"], "reg": ["Pattern", "Format", " fa", " regex", " hex", " addr", " pat", "abc", "c", " Reg", "m", "r", "A", "re", " alphabet", " formats", " na", "p", "f", " Pattern", " A", " region", " rg", "x", "g", " rgb", "Reg"], "a": ["base", "ba", "ab", "oa", "isa", "fa", "ma", "pi", "aaa", "aa", "sa", "d", "am", "z", "an", "c", "area", "ia", "ac", "y", "ana", "A", "tta", "ga", "data", "ad", "ea", "p", "n", "alpha", "f", "sha", "pa", "e", "aj", "ar", "la", "wa", " A", "ca", "va", "as", "na", "o", "w", "ama", "asa", "da", "au", "x", "ae", "auto", "u", "xa", "ai", "sta"], "b": ["wb", "j", "base", "app", "ib", "h", "ab", "cb", "body", "or", "bin", "aa", "d", "bb", "bh", "count", "bf", "z", "v", "c", "m", "r", "y", "db", "A", "B", "ga", "nb", "beta", "e", "batch", "p", "n", "be", "f", "home", "bar", "end", "eb", "emb", "bs", "as", "o", "w", "sb", "lb", "code", "l", "num", "bi", "fb", "x", "u", "g", "null", "rb"], "s": ["lines", "gs", "fs", "ings", "sports", "ns", "js", "rs", "sf", "in", "services", "ss", "ps", "ions", "sets", "c", "is", "m", "abs", "parts", "xs", "os", "input", "es", "strings", "states", "data", "qs", "ds", "e", "ses", "p", "f", "ans", "string", "bis", "ws", "as", "blocks", "o", "sb", "its", "us", "S", "l", "si", "words", "sl", "g", "u", "ls", "series", "sv", "ins"], "i": ["uni", "mi", "strength", "m", "gi", "phi", "qi", "ali", "me", "chi", "ei", "zi", "x", "ci", "uri", "fi", "mini", "vi", "ii", "cli", "z", "io", "is", "index", "key", "e", "f", "xi", "li", "multi", "eni", "isi", "u", "ti", "name", "ami", "pi", "mu", "ix", "c", "y", "adi", "p", "anti", "n", "ui", "iu", "oi", "bi", "ni", "ai", "I", "id", "slice", "j", "api", "ri", "part", "idi", "ip", "ori", "v", "ji", "q", "it", "o", "di", "ini", "yi", "ie", "l", "si", "info", "g", "my"], "atrue": ["iatrave", "atrocal", "atru", " atru", "aratue", " atrust", "otrust", "natrust", " atue", "aturate", "iatrocal", "otrue", "natrue", "iaturate", "iatrue", "atue", " atrave", "aratrave", "araturate", "aratrue", "natru", "aratrocal", "atrave", "natrave", "otue", " atrocal", "otrocal", " aturate", "aratrust", "aratru", "atrust"], "btrue": [" bTrue", "cthere", "fthere", " bcomplete", " bflat", "sbcomplete", "ctrue", "bfalse", "Bfalse", " bthere", "bflat", "ftrue", "Bcomplete", "sbflat", "cTrue", "sbfalse", "bthere", "bTrue", "sbTrue", "BTrue", "fflat", "Btrue", "ffalse", "fTrue", "sbtrue", "bcomplete", " bfalse"], "hi": ["hh", "cu", "api", "hig", "h", "hit", "loc", "pi", "Hi", "mia", "mi", "shi", "hyp", "bh", "ii", "cli", "ha", "four", "hy", "lit", "c", "han", "ho", "quad", "phi", "sha", "hot", "fi", "alpha", "pha", "hist", "wa", "aii", "HI", "large", "la", "li", "it", "xi", "chi", "lo", "bi", "hide", "wi", "qa", "hello", "ci", "hei", "mini", "uri", "high"], "list": ["base", "table", "server", "old", "pair", "lists", "word", "like", "map", "result", "collection", "val", "x", "diff", "bl", "entry", "address", "user", "global", "cli", "group", "header", "z", "default", "now", "current", "see", "en", "data", "index", "key", "e", "number", "www", "string", "li", "multi", "stack", "LIST", "cl", "all", "name", "single", "and", "the", "json", "chain", "batch", "p", "test", "el", "view", "null", "get", "source", "listed", "none", "object", "left", "file", "st", "detail", "part", "member", "queue", "module", "coll", "parent", "code", "l", "set", "info"], "array": ["hash", "instance", "air", "object", "union", "error", "address", "app", "single", "file", "section", "function", "option", "vector", "database", "book", "the", "group", "type", "arrow", "area", "pair", "element", "current", "shape", "value", "index", "archive", "complex", "e", "number", "Array", "arr", "integer", "queue", "ray", "string", "repeat", "project", "image", "average", "range", "collection", "field", "view", "record", "null", "all", "action", "sample", "order"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        char[] w = sc.next().toCharArray();\\n        int n = w.length;\\n        int s0 = 0;\\n        int s1 = 0;\\n        for(int i = 0; i < n; i++){\\n            if(i % 2 == 0 && w[i] == '1' || i % 2 != 0 && w[i] == '0'){\\n                s0++;\\n            }\\n        }\\n        for(int i = 0; i < n; i++){\\n            if(i % 2 != 0 && w[i] == '1' || i % 2 == 0 && w[i] == '0'){\\n                s1++;\\n            }\\n        }\\n        System.out.println(Math.min(s0,s1));\\n    }\\n}\\n", "target": "146", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "spec", "ec", "nc", "sec", "sh", "cc", "cus", "ng", "desc", "nt", "sp", "src", "acc", "rc", "cs", "cl", "pc", "ner", "sl", "asc", "g", "mc", "sci"], "w": ["fw", "sw", "aw", "wx", "h", "a", "wal", "wl", "wh", "west", "iw", "d", "array", "z", "v", "c", "now", "way", "r", "word", "y", "t", "wp", "data", "k", "e", "ew", "p", "wd", "f", "win", "q", "W", "wa", "ws", "wr", "widget", "ww", "o", "ow", "window", "we", "s", "l", "wt", "x", "words", "u", "g", "wall", "work"], "n": ["j", "nn", "h", "a", "len", "sn", "ns", "in", "d", "init", "no", "ii", "z", "v", "c", "m", "y", "network", "t", "ln", "min", "nb", "k", "nt", "e", "ne", "p", "o", "s", "N", "l", "num", "x", "nan", "u", "all", "b"], "s0": ["dsi", "ses00", "s2", " s2", " s20", "ssi", "ss0", "s50", "ss2", " si", "seszero", "ds0", "ses20", " szero", " s180", "s180", "szero", "ds00", "ses180", "ds2", "ds1", "ses0", "s20", "si", "ds50", " s00", "s00", " s50", "ses50", "ss1", "dszero"], "s1": [" s121", "S0", "is121", "s2", " s2", "is01", "ss0", "sets100", "is81", "S01", "s81", "ss100", "S2", " sone", "S100", "S81", "s01", "s121", "S121", "S1", "sone", "s100", " s01", " s81", "Sone", "sets1", "sets0", "is1", "ss1"], "i": ["id", "j", "api", "ri", "a", "pi", "mu", "I", "in", "mi", "init", "ii", "cli", "z", "v", "ix", "ori", "is", "m", "io", "start", "r", "y", "iv", "gi", "phi", "e", "p", "fi", "f", "qi", "ji", "anti", "ui", "xi", "li", "iu", "multi", "o", "eni", "di", "ini", "s", "oi", "ie", "yi", "chi", "ei", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "ni", "uri", "ai", "mini", "b"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tfinal int N = scan.nextInt();\\n\t\tint allSum = 0;\\n\t\tList<Integer> list = new ArrayList<>();\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tint n = scan.nextInt();\\n\t\t\tlist.add(n);\\n\t\t\tallSum += n;\\n\t\t}\\n\t\t\\n\t\tint nowSum = 0;\\n\t\tint minSum = Integer.MAX_VALUE;\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tnowSum += list.get(i);\\n\t\t\tminSum = (int) Math.min(minSum, Math.abs(nowSum - (allSum - nowSum)));\\n\t\t}\\n\t\tSystem.out.println(minSum);\\n\t}\\n}", "target": "2", "substitutes": {"scan": ["sc", "can", "sr", "man", "look", "nn", "sys", "conn", "check", "or", "query", "se", "in", "err", "server", "connect", "er", "an", "sync", "iter", "r", "out", "search", "read", "clean", "ln", "chan", "cat", "san", "plan", "watch", "walk", "ans", "ser", "span", "system", "na", "run", "skip", "gram", "l", "Scan", "log", "parse", "ner", "parser", "ann", "reader", "get", "serv"], "N": ["Q", "Ni", "Ns", "F", "NL", "Part", "NB", "OUT", "Num", "Count", "H", "T", "Y", "NT", "Na", "NS", "number", "R", "L", "K", "W", "C", "O", "NC", "NA", "D", "SN", "M", "KN", "U", "Z", "S", "X", "V", "NN", "P", "Size", "I"], "allSum": ["ALLAverage", "ALLTotal", " allTotal", "alsum", "callsum", "Allum", "Allsum", " allSummary", "AllCount", "minMon", "alMon", "AllAverage", "allCount", "ALLSum", " allCount", "allsum", "alSum", "allum", "allAverage", " allAverage", "AllSummary", "callum", "minsum", "ALLSummary", "AllTotal", " allsum", " allWeight", "alWeight", "callSum", "callCount", "AllSum", "allSummary", " allum", "allWeight", "allTotal", " allMon", "allMon", "minWeight"], "list": ["cont", "light", "can", "pool", "lc", "left", "lp", "and", "part", "array", "cli", "table", "client", "live", "see", "this", "out", "ul", "index", "chain", "p", "L", "queue", "cache", "la", "li", "it", "stack", "coll", "full", "low", "LIST", "we", "collection", "lat", "parent", "l", "log", "cl", "set", "loop", "load", "wall", "all", "null", "sequence", "get", "state"], "i": ["id", "inner", "j", "ri", "h", "pi", "mu", "in", "mi", "init", "ip", "ii", "z", "v", "ix", "io", "abi", "m", "ori", "c", "y", "t", "gi", "index", "phi", "key", "e", "p", "f", "qi", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "ie", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "ni", "u", "ti", "uri", "ai", "I"], "n": ["id", "j", "none", "nn", "len", "sn", "ns", "in", "d", "no", "count", "z", "an", "c", "m", "r", "y", "en", "network", "nc", "t", "ln", "index", "k", "nt", "un", "e", "number", "p", "ne", "f", "on", "net", "cn", "pn", "na", "o", "w", "l", "num", "x", "u", "ni", "g", "size", "b", "name"], "nowSum": ["nowSummary", "minMax", "todaySum", "allsum", "minSummary", "NowSize", "nowsum", " nowMax", "minAverage", "todaysum", "minStyle", "NowSummary", " nowSize", "minsum", "nowSize", "NowStyle", " nowAverage", "NowCount", " nowsum", " nowStyle", "nowStyle", "todayAverage", "minCount", " nowCount", "todayMax", "minSize", "NowSum", "nowAverage", "nowMax", "allSummary", "nowCount", "Nowsum", " nowSummary"], "minSum": ["nowSummary", "minMax", "MinSum", "minValue", "Minsum", "minTotal", " minSummary", " minHash", " minMax", "smallsum", " minCount", "nowTotal", "nowValue", "allCount", "nowHash", "minSummary", "nowsum", " minTotal", "MinSpread", "minsum", " minSpread", "partialSummary", "MinTotal", "minSpread", "MinHash", "partialSum", "minCount", "allValue", "partialsum", " minValue", "minHash", "MinSummary", "nowMax", "nowCount", "allMax", " minsum", "nowSpread", "smallSummary", "smallSum"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long N = sc.nextLong();\\n\\n        String result = \"\";\\n        System.out.println(calc(result, N, 1));\\n        sc.close();\\n\\n    }\\n\\n    static String calc(String result, long N, int count) {\\n        if (N < 26) {\\n            return moji((int) N) + result;\\n        } else if (N == 26) {\\n            return moji(0) + result;\\n        }\\n\\n        result = (moji((int) (N % 26))) + result;\\n        if (N % 26 != 0) {\\n            return calc(result, ((N - N % 26) / 26), count++);\\n        } else {\\n            return calc(result, ((N - 26) / 26), count++);\\n        }\\n    }\\n\\n    static String moji(int N) {\\n        String moji = \"\";\\n        switch (N) {\\n            case 1:\\n                moji = \"a\";\\n                break;\\n            case 2:\\n                moji = \"b\";\\n                break;\\n            case 3:\\n                moji = \"c\";\\n                break;\\n            case 4:\\n                moji = \"d\";\\n                break;\\n            case 5:\\n                moji = \"e\";\\n                break;\\n            case 6:\\n                moji = \"f\";\\n                break;\\n            case 7:\\n                moji = \"g\";\\n                break;\\n            case 8:\\n                moji = \"h\";\\n                break;\\n            case 9:\\n                moji = \"i\";\\n                break;\\n            case 10:\\n                moji = \"j\";\\n                break;\\n            case 11:\\n                moji = \"k\";\\n                break;\\n            case 12:\\n                moji = \"l\";\\n                break;\\n            case 13:\\n                moji = \"m\";\\n                break;\\n            case 14:\\n                moji = \"n\";\\n                break;\\n            case 15:\\n                moji = \"o\";\\n                break;\\n            case 16:\\n                moji = \"p\";\\n                break;\\n            case 17:\\n                moji = \"q\";\\n                break;\\n            case 18:\\n                moji = \"r\";\\n                break;\\n            case 19:\\n                moji = \"s\";\\n                break;\\n            case 20:\\n                moji = \"t\";\\n                break;\\n            case 21:\\n                moji = \"u\";\\n                break;\\n            case 22:\\n                moji = \"v\";\\n                break;\\n            case 23:\\n                moji = \"w\";\\n                break;\\n            case 24:\\n                moji = \"x\";\\n                break;\\n            case 25:\\n                moji = \"y\";\\n                break;\\n            case 0:\\n                moji = \"z\";\\n                break;\\n        }\\n        return moji;\\n    }\\n}\\n", "target": "191", "substitutes": {"sc": ["sw", "sr", " rc", "ch", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "scope", "sa", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "ec", "nc", "sch", "cc", "sh", "sec", "cus", "nt", "sp", "acc", "rc", "cur", "class", "sb", "cs", "cl", "pc", "ner", "asc", "cv", "mc", "sci"], "N": ["NG", "Total", "Ni", "Ne", "IO", "J", "Ns", "F", "NO", "E", "No", "Part", "Max", " n", "NB", "Num", "H", "Count", "Node", "Number", "A", "T", "CNN", "NE", "B", "NI", "Sn", "Length", "Y", "NT", "Code", "G", "NS", "n", "R", "L", "K", "W", "Limit", "Len", "O", "C", "NC", "NA", "D", "SN", "CN", "M", "KN", "MN", "EC", "S", "Z", "V", "X", "NN", "P", "Size", "GN", "I", "SIZE"], "result": ["format", "math", "page", "term", "url", "r", "word", "runner", "ge", "use", "num", "attr", "output", "correct", "line", "function", "Result", "inc", "root", "draw", "master", "default", "feature", "match", "current", "search", "func", "data", "ret", "number", "end", "string", "next", "results", "text", "valid", "name", "res", "work", "error", "comment", "length", "memory", "winner", "value", "core", "test", "score", "replace", "sum", "status", "success", "null", "message", "buffer", "card", "source", "order", "answer", "grade", "report", "array", "err", "goal", "prefix", "response", "product", "obj", "ver", "cache", "compl", "code", "info"], "count": ["id", "ch", "base", "error", "counter", "a", "F", "length", "len", "part", "other", "no", "child", "z", "call", "c", "second", "Count", "B", "index", "key", "e", "number", "n", "f", "cond", "cache", "max", "W", "found", "C", "coll", "code", "num", "sum", "weight", "P", "depth", "size", "list", "b"], "moji": ["mojo", "nojo", "poichi", "bozi", "vooji", " mooji", "boaji", "mozi", " moana", " moilo", "poana", "coji", "meja", "noaji", "noji", "voja", "mosji", " mobi", "looji", "kojo", "mosowa", "moniji", "dooji", "loji", "banoji", "pozilla", "monji", " moiji", " moowa", "poji", "moaji", "moilo", "pozi", "boana", "banichi", "poaji", "noja", "foaji", "voiji", "moowa", "boji", " moaji", "pooji", "hoji", "doaji", "mosja", "coobi", "doana", "boja", "mosiji", "poowa", " mojo", "coja", "foja", "koja", " mozi", "doja", "kooji", "gojo", "monja", "moiji", "lojo", "cojo", "moobi", "bobi", "foobi", "fobi", "monoji", " moobi", "noiji", "voji", "mobi", "poja", "koobi", "meoji", "banji", "bozilla", "moja", "groilo", "grooji", "booji", "moana", "hoiji", "hooji", "banja", " moichi", "koiji", "doji", "groja", "mosoji", " mozilla", "cooji", "loja", "mozilla", "moichi", "foana", "boobi", "pojo", " moja", "fozi", "loobi", "fooji", "poilo", "gooji", "meiji", "mooji", "goja", "groji", "poiji", "fojo", "noana", "nooji", "hoja", "goji", "koji", "poobi", "meji", "foji"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try (Scanner in = new Scanner(System.in)) {\\n            int N = in.nextInt();\\n            int[] a = new int[N];\\n            for (int i = 0; i < N; i++) {\\n                a[i] = in.nextInt() - 1;\\n            }\\n\\n            int current = 0;\\n            for (int i = 1; i <= N; i++) {\\n                current = a[current];\\n                if (current == 1) {\\n                    System.out.println(i);\\n                    return;\\n                }\\n            }\\n\\n            System.out.println(-1);\\n        }\\n    }\\n}\\n", "target": "175", "substitutes": {"N": ["Q", "Ni", "Ne", "J", "Ns", "F", "NO", "E", "RN", "No", "Part", " n", "NB", "Num", "H", "A", "Number", "T", "B", "NI", "NE", "Y", "NT", "Na", "NS", "number", "n", "R", "L", "K", "NR", "Len", "O", "C", "NA", "D", "MN", "M", "KN", "S", "Z", "X", "V", "NN", "P", "Size", "I", "G"], "a": ["ba", "ab", "asha", "oa", "ma", "aaa", "aa", "sa", "ata", "am", "aux", "array", "an", "area", "c", "abs", "at", "ana", "A", "tta", "ga", "mA", "ea", "p", "n", "alpha", "prev", "aj", "span", "wa", "la", "next", "na", "as", "va", "ama", "asa", "da", "au", "qa", "ae", "u", "b", "sta"], "i": ["id", "j", "api", "ri", "counter", "pi", "mu", "in", "mi", "init", "Current", "ip", "ii", "v", "abi", "io", "ix", "start", "c", "position", "y", "min", "gi", "index", "data", "phi", "e", "p", "n", "fi", "f", "qi", "ji", "ui", "xi", "li", "next", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "mini", "ai", "ti", "I"], "current": ["draft", "open", "path", "counter", "correct", "vari", "today", "length", "comment", "other", "init", "global", "Current", "latest", "count", "last", "reported", "default", "c", "complete", "now", "future", "const", "recent", "progress", "core", "index", "number", "continue", "n", "prev", "p", "result", "partial", "URRENT", "next", "currently", "active", "running", "existing", "performance", "variable", "parent", "code", "num", "si", "weight", "local", "valid", "u", "sequence", "initial", "update", "temp", "total"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner s = new Scanner(System.in);\\n    System.out.println(s.nextLong()*Math.PI*2);\\n  }\\n}", "target": "167", "substitutes": {"s": ["gs", "fs", " app", "or", "js", "ns", "rs", "se", "in", "services", "ss", "lib", "ps", "sets", "v", "c", "sync", "r", "settings", "db", "os", "xs", " objects", "ds", "p", "n", "ses", "f", "ssl", "as", "css", "o", "sb", "i", "cs", "S", "l", "si", "stats", "sl", "parser", "g", "ms", "ls", "b", "ts", "ins"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static String Y = \"Yes\";\\n\tpublic static String N = \"No\";\\n\tpublic static long MOD = (long) (Math.pow(10, 9) + 7);\\n\tpublic static Scanner sc = new Scanner(System.in);\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tint kai = 0;\\n\t\tint n = ni();\\n\t\tboolean flg = false;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint na = ni();\\n\t\t\tint nb = ni();\\n\t\t\tif (na == nb) {\\n\t\t\t\tkai++;\\n\t\t\t\tif (kai == 3) {\\n\t\t\t\t\tflg = true;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t} else {\\n\t\t\t\tkai = 0;\\n\t\t\t}\\n\t\t}\\n\t\tif (flg) {\\n\t\t\tout(Y);\\n\t\t} else {\\n\t\t\tout(N);\\n\t\t}\\n\\n\t}\\n\\n\t/*\\n\t * \u4ee5\u4e0b\u30e1\u30bd\u30c3\u30c9\u96c6\\n\t */\\n\\n\tpublic static int[] kousokusoinnsuubunkaihairetsu(int a) {\\n\t\tint[] d = new int[a];\\n\t\tfor (int i = 0; i < a; i++) {\\n\t\t\td[i] = i;\\n\t\t}\\n\t\tfor (int i = 2; i * i < a; i++) {\\n\t\t\tfor (int j = i * i; j < a; j += i) {\\n\t\t\t\tif (d[j] == j)\\n\t\t\t\t\td[j] = i;\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\treturn d;\\n\t}\\n\\n\tpublic static void permutation(String q, String ans) {\\n\t\t// Base Case\\n\t\tif (q.length() <= 1) {\\n\t\t\tSystem.out.println(ans + q);\\n\t\t}\\n\t\t// General Case\\n\t\telse {\\n\t\t\tfor (int i = 0; i < q.length(); i++) {\\n\t\t\t\tpermutation(q.substring(0, i) + q.substring(i + 1),\\n\t\t\t\t\t\tans + q.charAt(i));\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tstatic char[][] same(char[][] c, int h, int w) {\\n\\n\t\tchar[][] a = new char[h][w];\\n\t\tfor (int i = 0; i < h; i++) {\\n\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\ta[i][j] = c[i][j];\\n\t\t\t}\\n\t\t}\\n\t\treturn a;\\n\\n\t}\\n\\n\tstatic int countkuro(char[][] c) {\\n\\n\t\tint count = 0;\\n\t\tfor (char[] cc : c) {\\n\t\t\tfor (char ccc : cc) {\\n\t\t\t\tif ('#' == ccc) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\treturn count;\\n\t}\\n\\n\tstatic void debug() {\\n\\n\t\tout(\"---\");\\n\t}\\n\\n\tstatic void debug(Object a) {\\n\\n\t\tout(\"-------\");\\n\t\tout(a);\\n\t\tout(\"-------\");\\n\t}\\n\\n\tstatic int ketasuu(int n) {\\n\\n\t\tString str = \"\" + n;\\n\t\treturn str.length();\\n\t}\\n\\n\tstatic int account(String str) {\\n\\n\t\tString target = \"2\";\\n\t\tint count = 0;\\n\t\tint len = str.length();\\n\t\tfor (int i = 0; i < len; i++) {\\n\t\t\tif (target.equals(str.substring(i, i + target.length()))) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\treturn count;\\n\t}\\n\\n\tstatic int ni() {\\n\\n\t\treturn sc.nextInt();\\n\t}\\n\\n\tstatic long nl() {\\n\\n\t\treturn sc.nextLong();\\n\t}\\n\\n\tstatic double nd() {\\n\\n\t\treturn sc.nextDouble();\\n\t}\\n\\n\tstatic String n() {\\n\\n\t\treturn sc.next();\\n\t}\\n\\n\tstatic char[] nc() {\\n\\n\t\treturn sc.next().toCharArray();\\n\t}\\n\\n\tstatic int kaijo(int n) {\\n\\n\t\tif (n == 0 || n == 1) {\\n\t\t\treturn 1;\\n\t\t} else {\\n\t\t\treturn n * kaijo(n - 1);\\n\t\t}\\n\t}\\n\\n\tstatic long kaijo(long n) {\\n\\n\t\tdebug(n);\\n\\n\t\tif (n == 0l || n == 1l) {\\n\t\t\treturn 1l;\\n\t\t} else {\\n\t\t\treturn n * kaijo(n - 1l);\\n\t\t}\\n\t}\\n\\n\tstatic int fib(int n) {\\n\\n\t\treturn (n == 1 || n == 0) ? n : fib(n - 2) + fib(n - 1);\\n\t}\\n\\n\tstatic long lcm(long m, long n) {\\n\\n\t\treturn m * n / gcd(m, n);\\n\t}\\n\\n\tstatic int lcm(int m, int n) {\\n\\n\t\treturn m * n / gcd(m, n);\\n\t}\\n\\n\tstatic long gcd(long a, long b) {\\n\\n\t\treturn (b == 0) ? a : gcd(b, a % b);\\n\t}\\n\\n\tstatic int gcd(int a, int b) {\\n\\n\t\treturn (b == 0) ? a : gcd(b, a % b);\\n\t}\\n\\n\tstatic void out(Object obj) {\\n\t\tSystem.out.println(obj);\\n\t}\\n\\n\tstatic void outn(Object obj) {\\n\t\tSystem.out.print(obj);\\n\t}\\n\\n\tstatic double max(double d, double e) {\\n\\n\t\treturn Math.max(d, e);\\n\t}\\n\\n\tstatic long max(long a, long b) {\\n\\n\t\treturn Math.max(a, b);\\n\t}\\n\\n\tstatic long min(long d, long e) {\\n\\n\t\treturn Math.min(d, e);\\n\t}\\n\\n\tstatic int min(int a, int b) {\\n\\n\t\treturn Math.min(a, b);\\n\t}\\n}\\n\\nclass XY {\\n\\n\tint h;\\n\tint w;\\n\tint d;\\n\\n\tXY(int h, int w, int d) {\\n\t\tthis.h = h;\\n\t\tthis.w = w;\\n\t\tthis.d = d;\\n\t}\\n}\\n", "target": "215", "substitutes": {"Y": ["YS", "Q", "YES", "E", "Py", "XY", "YY", "Yo", "H", "y", "MY", "A", "FY", "T", "B", "YA", "NY", "W", "C", "O", "Type", "KY", "D", "Ky", "M", "EY", "U", "S", "Z", "IP", "TY", "X", "ID", "YE", "P", "My", "I", "G"], "N": ["Q", "EN", "Ni", "J", "NO", "Ns", "NL", "No", "NB", "Name", "A", "CNN", "NE", "NI", "NT", "Na", "NS", "ND", "L", "R", "W", "NR", "O", "C", "NA", "D", "M", "U", "S", "Z", "X", "NN", "V", "P", "I", "G"], "MOD": [" Xi", " xx", " M", " F", " bits", " gn", " m", " C", " max", " K", " Z", " Pi", " W", " S", " mod", " D", " scale", " code", " B", " A", " X", " z", " L", " R", " Q", " PI", " U", " P", " Mi"], "sc": [" screen", " rc", "ch", " Sc", "sys", " ser", "Sc", " SC", "se", "SC", "in", " scr", "ss", "io", "c", "scan", "r", "out", "sb", "gram", "s", " gl", "S", "si", "Scan", "g", "ann", " res"], "kai": ["ku", "cu", "uni", "agi", "lc", "nn", " ni", "igi", "iti", "ami", "nu", "shi", "cci", "ii", "ka", "aki", "asin", "ta", "iji", " ii", "ski", "fee", "gi", "iki", "lambda", "oci", "kie", "qi", "pai", "ji", "ki", "una", "ui", "aii", "li", "la", "umi", "inski", "eni", "di", " ki", " chi", " li", "kee", "yi", "kid", "chi", "Wi", "info", "asi", "zi", "uci", "qa", "qua", "ci", "ni", "aka", "ai", "kok", " kin", "lla"], "n": ["nn", "nu", "ns", "in", "ii", "z", "ny", "c", "an", "m", "y", "en", "k", "e", "p", "f", "net", "o", "w", "s", "l", "x", "nan", "ni", "u", "g", "b"], "i": ["in", "mi", "m", "gi", "phi", "qi", "chi", "asi", "x", "zi", "ci", "uri", "fi", "vi", "ii", "z", "io", "is", "data", "e", "f", "xi", "li", "multi", "eni", "hi", "u", "ti", "ami", "pi", "mu", "init", "ix", "c", "y", "adi", "uli", "p", "anti", "ik", "ui", "iu", "oi", "bi", "ni", "ai", "I", "id", "iii", "api", "ri", "idi", "ip", "ori", "v", "k", "ji", "ki", "it", "o", "di", "ini", "yi", "ie", "l", "si", "info", "my", "b"], "na": ["nn", "ba", " ni", "ja", "nu", "ns", "sn", "aa", "sa", "no", "ii", "nas", "ny", "nc", "Na", "nt", "ne", "cn", "pa", "una", "aii", "la", "nat", "NA", "asa", "da", "qa", "ci", "nan", "ni", "aka"], "nb": ["nz", "uni", "nd", "ani", "nn", " ni", "nu", "sn", "ns", " nu", "bb", "ii", "nl", "ny", "NB", "nit", "nc", "bn", "np", "nr", "nt", "ne", "obj", "dn", "qi", "bp", "eb", "eni", "sb", "bm", "adj", "num", "bi", "nw", "nan", "ni", "b"], "flg": ["flk", " slgi", "slg", "blvg", " flvg", "Flg", "flgh", " slg", "flG", " flk", "flgs", " flgg", "blg", "Flgg", "blgs", "blgi", "slx", " flx", " slgs", "flgi", " slvg", "velgh", "velg", "blG", "flx", " flgi", " flgs", "Flk", "Flgh", "blx", "flgg", "flvg", " flgh", "velk", "slgs", "velgg", "slG", " flG"], "a": ["ba", "h", "ab", "oa", "pi", "fa", "aaa", "aa", "sa", "am", "count", "ta", "z", "an", "c", "area", "m", "ac", "at", "r", "en", "y", "A", "ga", "data", "index", "k", "e", "p", "alpha", "f", "ea", "aj", "span", "ca", "as", "window", "va", "o", "w", "s", "div", "da", "x", "ae", "u", "all", "ai", "b"], "d": ["id", "nd", "dd", "ind", "z", "v", "c", "m", "r", "y", "db", "ld", "t", "data", "dt", "dl", "ds", "k", "ded", "e", "ad", "p", "f", "df", "dc", "dat", "dict", "sd", "D", "o", "di", "w", "s", "l", "da", "x", "dos", "dh", "bd", "dr", "mad", "u", "g", "diff", "b", "pd"], "j": ["h", "ja", "J", "ij", "js", "job", "jj", "ii", "bj", "ind", "z", "v", "je", "is", "y", "jl", "k", "key", "e", "p", "obj", "qi", "f", "ji", "aj", "ui", "br", "li", "it", "o", "di", "ie", "adj", "el", "l", "si", "uj", "x", "jo", "u", "oj", "jp", "b", "vi"], "q": ["id", "Q", "ql", "h", "query", "iq", "z", "v", "sq", "c", "m", "r", "qt", "qu", "qs", "qq", "k", "p", "qi", "o", "w", "dq", "x", "qa", "g", "ue", "u", "Query"], "ans": ["nd", "ons", "ns", "in", "sa", "ss", "an", "r", "A", "ng", "ds", "p", "as", "o", "s", "l", "nan", "ann", "ant", "ai", " p", "ins"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args){\\n\\n        Scanner sc = new Scanner(System.in);\\n        int n=sc.nextInt(),x=sc.nextInt();\\n        int[] l = new int[n+1];\\n        int[] d = new int[n+2];\\n        for(int i=1;i<n+1;i++)l[i]=sc.nextInt();\\n\\n        d[1]=0;\\n        int i;\\n        for(i=2;i<n+2;i++){\\n            d[i]=d[i-1]+l[i-1];\\n            //System.out.println(d[i]);\\n            if(d[i]>x){\\n                System.out.println((i-1));\\n                return;\\n            }\\n        }\\n        System.out.println((n+1));\\n\\n\\n    }\\n\\n}\\n", "target": "130", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "soc", " Sc", "loc", "cer", "Sc", " SC", "squ", "bc", "se", "SC", "sf", "scope", "sem", "sa", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "nc", "sch", "sec", "cc", "sh", "cus", "cor", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "coll", "sb", "cs", "pc", "ner", "ci", "asc", "screen", "cv", "mc", "sci"], "n": ["j", "nn", "nor", "len", "sn", "ns", "nu", "part", "in", "no", "v", "z", "c", "not", "m", "norm", "r", "y", "en", "network", "nc", "t", "ln", "nb", "nr", "k", "nt", "e", "ne", "p", "dn", "f", "net", "span", "o", "w", "s", "N", "num", "g", "u", "ni", "b"], "x": ["id", "j", "wx", "xx", "rx", "xy", "xxx", "z", "ix", "v", "c", "m", "y", "xs", "t", "index", "e", "number", "xc", "ex", "p", "f", "q", "xp", "xi", "w", "dx", "X"], "l": ["j", "lc", "le", "lp", "kl", "ii", "nl", "z", "v", "c", "m", "y", "ld", "ol", "t", "ln", "ul", "dl", "e", "p", "L", "f", "la", "li", "o", "dL", "el", "lo", "pl", "sl", "g", "lin", "u", "ls", "ll", "fl", "b"], "d": ["id", "j", "a", "dd", "z", "v", "c", "m", "r", "y", "ld", "t", "data", "dl", "dt", "ds", "ded", "e", "dim", "p", "f", "dc", "dat", "q", "dict", "D", "o", "di", "dL", "s", "w", "da", "dh", "dos", "du", "dr", "u", "g", "dy", "b"], "i": ["id", "j", "api", "ri", "a", "pi", "mu", "I", "in", "mi", "init", "ii", "ip", "cli", "z", "v", "ix", "c", "io", "m", "r", "y", "t", "gi", "index", "phi", "e", "p", "f", "qi", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "ie", "yi", "oi", "si", "bi", "hi", "zi", "ci", "u", "ni", "ti", "fi", "ai", "uri", "mini", "b"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\n\\nclass Main {\\n\t/**\\n\t * ??\\?????????????????? / ????????????????????????\\n\t */\\n\tpublic static void main(String[] args) throws Exception {\\n\\n\t\t// ??\\???????????????\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tint verticalLineCount = Integer.parseInt(br.readLine());\\n\t\t// ???????????????????\u00a3??????\u00b0 ???????????????\\n\t\tString[] verticalLine = new String[verticalLineCount];\\n\t\tList<String> goalNumberList = Arrays.asList(verticalLine);\\n\\n\t\tList<List<String>> allSideLine = processAllSideLine(br);\\n\\n\t\tgoalNumberList = processGoalNumberList(goalNumberList, allSideLine);\\n\\n\t\t// ???????????????\\n\t\tfor (String string : goalNumberList) {\\n\\n\t\t\tSystem.out.println(string);\\n\t\t}\\n\t}\\n\\n\t/**\\n\t * ??\u00a8???????\u00a8??\u00a3?????????\u00a8??????????\u00b4??????????????\u00ac?????????????????????????\\n\t */\\n\tpublic static List<List<String>> processAllSideLine(BufferedReader br) throws IOException {\\n\\n\t\tint sideLineCount = Integer.parseInt(br.readLine());\\n\t\tList<List<String>> allSideLine = new ArrayList<>();\\n\\n\t\tfor (int i = 0; i < sideLineCount; i++) {\\n\\n\t\t\tString[] sideLine = br.readLine().split(\",\");\\n\t\t\tList<String> sideLineToList = Arrays.asList(sideLine);\\n\t\t\tallSideLine.add(sideLineToList);\\n\t\t}\\n\\n\t\treturn allSideLine;\\n\t}\\n\\n\t/**\\n\t * ????????????????????????????????????????????????????????\u00a7?????????????????????????????????????????\u00a7????????????\\n\t */\\n\tpublic static List<String> processGoalNumberList(List<String> goalNumberList, List<List<String>> allSideLine) {\\n\\n\t\tfor (int startNumber = 0; startNumber < goalNumberList.size(); startNumber++) {\\n\\n\t\t\tString goalNumber = String.valueOf(startNumber + 1);\\n\\n\t\t\tfor (int j = 0; j < allSideLine.size(); j++) {\\n\\n\t\t\t\tString sideNode_1 = allSideLine.get(j).get(0);\\n\t\t\t\tString sideNode_2 = allSideLine.get(j).get(1);\\n\\n\t\t\t\tif (sideNode_1.equals(goalNumber)) {\\n\\n\t\t\t\t\tgoalNumber = sideNode_2;\\n\t\t\t\t} else if (sideNode_2.equals(goalNumber)) {\\n\\n\t\t\t\t\tgoalNumber = sideNode_1;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tgoalNumberList.set(Integer.parseInt(goalNumber) - 1, String.valueOf(startNumber + 1));\\n\t\t}\\n\\n\t\treturn goalNumberList;\\n\t}\\n}", "target": "156", "substitutes": {}}
{"code": "import java.util.*;\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner scn = new Scanner(System.in);\\n        //\u7bb1A,B,C\u306b\u5165\u308b\u6574\u6570\\n        int boxA = scn.nextInt();\\n        int boxB = scn.nextInt();\\n        int boxC = scn.nextInt();\\n        int boxCopy = boxA;\\n        boxA = boxB;\\n        boxB = boxCopy;\\n        boxCopy = boxA;\\n        boxA = boxC;\\n        boxC = boxCopy;\\n        System.out.println(boxA +\" \" + boxB + \" \" + boxC);\\n    }\\n}", "target": "149", "substitutes": {"scn": ["Scn", " scb", "SCN", "SCr", "scr", "Scr", " scN", "scb", "SCb", "scN", "ScN", "Scb", " scr", "SCn"]}}
{"code": "//package atcoder.beginner_172;\\n\\nimport java.io.*;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n    public static void main (String[] args) throws Exception {\\n\\n        String s = \"2\";\\n\\n//        br = new BufferedReader(new StringReader(s));\\n        br = new BufferedReader(new InputStreamReader(System.in));\\n        bw = new BufferedWriter(new OutputStreamWriter(System.out));\\n\\n        rl(); int a=nin();\\n\\n\\n        bw.write(Integer.toString(a+a*a+a*a*a));\\n        bw.newLine();\\n        bw.flush();\\n\\n    }\\n\\n    static BufferedReader br;\\n    static BufferedWriter bw;\\n    static StringTokenizer st;\\n    static void rl() throws Exception{\\n        st = new StringTokenizer(br.readLine());\\n    }\\n    static long nlo(){\\n        return Long.parseLong(st.nextToken());\\n    }\\n    static int nin(){\\n        return Integer.parseInt(st.nextToken());\\n    }\\n    /*private static void te(){\\n      }*/\\n    static double ndo(){\\n        return Double.parseDouble(st.nextToken());\\n    }\\n    static char[] nca(){\\n        return st.nextToken().toCharArray();\\n    }\\n    static String nstr(){\\n        return st.nextToken();\\n    }\\n}", "target": "162", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString W = sc.nextLine();\\n\t\tW = W.toLowerCase();\\n\t\tint num = 0;\\n\t\tfor(;;){\\n\t\t\tString T = sc.next();\\n\t\t\tif(T.equals(\"END_OF_TEXT\"))break;\\n\t\t\tT = T.toLowerCase();\\n\t\t\tif(W.equals(T))num++;\\n\t\t}\\n\t\tSystem.out.println(num);\\n\t}\t\\n}", "target": "46", "substitutes": {}}
{"code": "import java.util.Scanner;\\nclass Main\\n{\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner sc=new Scanner(System.in);\\n        int h=sc.nextInt();\\n        int n=sc.nextInt();\\n        int a[]=new int[n];\\n\t\tfor(int i=0; i<n; i++){\\n            a[i]=sc.nextInt();\\n        }\\n        int sum=0;\\n        for(int j=0; j<n; j++){\\n            sum+=a[j];\\n        }\\n        if(h-sum<=0){\\n            System.out.println(\"Yes\");\\n        }\\n        else{\\n            System.out.println(\"No\");\\n        }\\n        sc.close();\\n    }\\n}", "target": "95", "substitutes": {"sc": ["sw", "cont", "sr", "ch", "lc", "soc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", "com", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "cor", "cus", "ctx", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cam", "cur", "sb", "cms", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "parser", "screen", "cv", "mc", "sci"], "h": ["id", "hash", "ch", "body", "in", "d", "bh", "count", "z", "v", "c", "m", "H", "y", "t", "sh", "k", "e", "p", "alpha", "f", "q", "hm", "rh", "o", "w", "s", "l", "num", "hi", "x", "u", "depth", "b"], "n": ["nn", "len", "sn", "ns", "in", "d", "count", "z", "v", "c", "m", "r", "y", "en", "network", "nc", "t", "ln", "nb", "k", "nt", "e", "ne", "p", "f", "net", "o", "w", "s", "N", "l", "num", "x", "u", "g", "ni", "size", "b"], "a": ["ba", "ab", "asha", "ma", "aaa", "aa", "sa", "d", "am", "array", "count", "z", "an", "c", "area", "m", "ac", "ana", "A", "ea", "p", "alpha", "f", "pa", "aj", "wa", "la", "va", "as", "na", "ca", "o", "ama", "da", "au", "qa", "u", "ai", "b"], "i": ["id", "ri", "pi", "in", "mi", "init", "ip", "ii", "ind", "z", "v", "ix", "io", "is", "m", "start", "c", "y", "index", "phi", "e", "p", "qi", "ji", "ui", "li", "iu", "o", "b", "di", "ini", "eni", "oi", "ie", "si", "bi", "hi", "x", "ci", "u", "ni", "fi", "ai", "I"], "sum": ["hash", "vol", "ash", "scale", "part", "offset", "unit", "sa", "d", "empty", "Sum", "err", "summary", "count", "v", "m", "plus", "sim", "miss", "mass", "out", "sav", "norm", "min", "sh", "mean", "k", "ass", "sp", "alpha", "net", "acc", "zero", "fat", "cal", "av", "average", "conf", "use", "div", "num", "si", "weight", "sam", "diff", "u", "g", "cost", "size", "um", "b", "total"], "j": ["ch", "ja", "J", "length", "str", "part", "js", "ij", "job", "d", "jj", "ii", "z", "v", "c", "m", "y", "pt", "out", "jc", "jl", "index", "k", "key", "e", "p", "obj", "f", "ji", "aj", "end", "q", "li", "ot", "it", "o", "pr", "ie", "adj", "l", "si", "uj", "bi", "fr", "x", "jo", "u", "g", "jp", "b"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] argst)throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        \\n        String str = br.readLine();\\n        \\n        while(str != null){\\n            String[] line = str.split(\"\\\\s\");\\n            int H = Integer.parseInt(line[0]);\\n            int W = Integer.parseInt(line[1]);\\n            //System.out.println(H);\\n            //System.out.println(W);\\n\\n            if(H !=0 && W != 0){\\n            String yoko = Wwrite(W);\\n            Hwrite(H,yoko);\\n            System.out.println(\"\");\\n            str = br.readLine();\\n            }else{\\n                break;\\n            }\\n        }\\n    }\\n\\n    public static String Wwrite(int W){\\n        StringBuilder buff = new StringBuilder();\\n        for(int i=0;i<W;i++){\\n            buff.append(\"#\");\\n        }\\n        return buff.toString();\\n    }\\n\\n    public static void Hwrite(int H,String yoko){\\n        for(int i=0;i<H;i++){\\n            System.out.println(yoko);\\n        }\\n    }\\n}", "target": "87", "substitutes": {"argst": ["argSt", "angstr", "igst", " argSt", "argsts", "angsts", " argsts", "argstr", "igSt", "angSt", "igstr", "igsts", "angst", " argstr"], "br": ["sr", "yr", "cb", "body", "orb", "bro", "bc", "Br", "bb", "err", "ber", "BR", "cr", "io", "er", "HR", "r", "org", "STR", "db", "gr", "tr", "img", "hr", "obj", "sp", "arr", "bar", "ocr", "bridge", "browser", "bs", "wr", "jar", "buf", "div", "fr", "bd", "reader", "dr", "bl", "rb", "b", "res"], "str": ["sr", "enc", "inner", "strip", "Str", "doc", "h", "st", "in", "err", "cr", "txt", "r", "iter", "out", "STR", "input", "tr", "stri", "data", "hr", "p", "obj", "sp", "f", "arr", "ocr", "string", "char", "wr", "cur", "pass", "coll", "w", "s", "pr", "i", "div", "fr", "l", "exp", "text", "sl", "ner", "dr", "output", "raw", "b", "res"], "line": ["lines", "object", "strip", "lc", "look", "le", "co", "file", "part", "page", "no", "Line", "rule", "group", "header", "nl", "style", "split", "word", "ine", "data", "nice", "key", "ne", "e", "f", "cell", "entry", "end", "cle", "LINE", "string", "row", "column", "pass", "col", "l", "lo", "parse", "ner", "sl", "block", "lin", "link", "write", "inline", "source", "name"], "H": ["HD", "MH", "SH", "Q", "CH", "h", " h", "F", "HC", "OH", "GH", "Hi", "E", "RH", "HK", "DH", "NH", "HP", "HI", "EH", "PH", "TH", "HB", "X", "FH", "V", "P", "HH"], "W": ["MW", "WP", "Q", "SH", "J", "F", "WC", "Sw", "Width", "WH", "VW", "WR", "Y", "SW", "EW", "R", "WB", "WS", "w", "M", "FW", "N", "V", "WE", "X", "P", "Wh", "G"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint p[]=new int[n];\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\tp[i]=scan.nextInt();\\n\t\t}\\n\t\tscan.close();\\n\t\tint cnt=0;\\n\t\tint check=-1;\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\tif(i+1!=p[i]) {\\n\t\t\t\tcnt++;\\n\t\t\t\tif(check==-1)check=p[i];\\n\t\t\t\telse {\\n\t\t\t\t\tp[i]=check;\\n\t\t\t\t}\\n\t\t\t\tif(cnt>2)break;\\n\t\t\t}\\n\t\t}\\n\t\tif(cnt==0||cnt==2)System.out.println(\"YES\");\\n\t\telse System.out.println(\"NO\");\\n\t}\\n}", "target": "82", "substitutes": {"scan": ["sc", "can", "slice", "sin", "look", "nn", "fan", "query", "spin", "se", "in", "server", "match", "connect", "er", "an", "start", "sync", "r", "en", "out", "search", "read", "clean", "con", "stat", "ln", "see", "gen", "chan", "cat", "san", "watch", "walk", "ans", "ser", "span", "cache", "system", "na", "pan", "feed", "run", "skip", "use", "l", "Scan", "ignore", "parse", "ner", "ann", "all", "sign", "reader", "get", "source"], "n": ["j", "nn", "h", "conn", "len", "sn", "ns", "in", "d", "count", "z", "v", "c", "m", "r", "y", "en", "network", "out", "nc", "t", "nb", "k", "nt", "e", "number", "pos", "f", "ne", "net", "o", "w", "s", "N", "l", "num", "x", "u", "size", "b"], "p": ["pp", "j", "api", "h", "a", "po", "tp", "pi", "part", "d", "array", "ip", "ps", "pe", "z", "v", "c", "python", "m", "params", "y", "point", "t", "pid", "np", "data", "e", "sp", "f", "pos", "q", "ap", "o", "s", "parent", "code", "l", "pc", "x", "mp", "P", "u", "cp", "b"], "i": ["id", "slice", "j", "ri", "pi", "mu", "in", "mi", "init", "ii", "ip", "z", "ix", "v", "c", "io", "start", "is", "y", "gi", "index", "phi", "e", "qi", "f", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "oi", "ie", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "fi", "ai", "I"], "cnt": ["cont", "ucno", "cno", "catnc", " cNT", "Cct", " cnc", "Cno", "lcnn", "pcnt", "lcannot", "catrt", "catpt", "catnn", "scnt", "catct", " cnn", "ucrt", "Crt", " cont", " crt", "crt", "lcct", "lcnt", "CNT", "lcnc", "pcrt", "lcont", "crannot", "crnt", "cnn", "cct", "cpt", "cnc", "scpt", "pcct", "crct", "cNT", "Cnt", "catnt", "cront", "pcNT", " cno", "scct", "ucct", " cannot", "Cpt", "scrt", " cct", "lcrt", "ucnt", "cannot"], "check": ["id", "checked", "error", "fix", "d", "err", "cross", "checks", "ind", "count", "call", "c", "start", "Check", "match", "ok", "ck", "out", "sync", "read", "y", "fail", "pull", "index", "wait", "k", "key", "add", "f", "max", "find", "test", "pass", "code", "keep", "num", "info", "ignore", "set", "x", "block", "valid", "load", "complete", "update", "name", "work"]}}
{"code": "import java.io.*;\\n\\npublic class Main{\\n\tpublic static void main (String[] args) {\\n\t    //long x;\\n\t    long x1 = 1;\\n\t    try{\\n\t\t//System.out.println(\"input number 1<x<100\");\\n\t\tInputStreamReader isr = new InputStreamReader(System.in);\\n\t\tBufferedReader br = new BufferedReader(isr);\\n\t\tlong x = Long.parseLong(br.readLine());\\n\t\tif(x <= 100 && 1 <= x){\\n\t\tfor(int i=0; i<3; i++){\\n\t\tx1 = (long)x1 * x;\\n\t\t}\\n\t\tSystem.out.println(x1);\\n\t\t}else{\\n\t\t//System.out.println(\"Input Error\");\\n\t\t}\\n\t    }catch(IOException e){\\n\t    //System.out.println(\"KUSO key bord\");\\n\t    }\\n\\n\t}\\n}", "target": "36", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner kb = new Scanner(System.in);\\n\t\tint x1 = kb.nextInt();\\n\t\tint x2 = kb.nextInt();\\n\t\tint x3 = kb.nextInt();\\n\t\tint x4 = kb.nextInt();\\n\t\tint x5 = kb.nextInt();\\n\t\tif (x1 == 0) {\\n\t\t\tSystem.out.println(1);\\n\t\t} else if (x2 == 0) {\\n\t\t\tSystem.out.println(2);\\n\t\t} else if (x3 == 0) {\\n\t\t\tSystem.out.println(3);\\n\t\t} else if (x4 == 0) {\\n\t\t\tSystem.out.println(4);\\n\t\t} else if (x5 == 0) {\\n\t\t\tSystem.out.println(5);\\n\t\t}\\n\t\tkb.close();\\n\t}\\n\\n}\\n", "target": "222", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String[] args){\\n        Scanner scan = new Scanner(System.in);\\n\\n        // input\\n        int woods = scan.nextInt();\\n        int peoples = scan.nextInt();\\n\\n        // answer\\n        System.out.println((int)Math.ceil((double)woods / (peoples * 2.0 + 1.0)));\\n\\n    }\\n}", "target": "238", "substitutes": {"scan": ["sc", "can", " scanner", "nn", "sys", "bin", " parse", "se", "v", "an", "search", "ln", "n", "win", "walk", "ans", "na", "run", "gram", "l", "Scan", "parse", "x", " Scan", "parser", "ann", "reader", "config"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] A = new int[N];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tif (A[i] % 2 == 0) {\\n\t\t\t\tif (!(A[i] % 3 == 0 || A[i] % 5 == 0)) {\\n\t\t\t\t\tSystem.out.println(\"DENIED\");\\n\t\t\t\t\treturn;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(\"APPROVED\");\\n\t}\\n}", "target": "113", "substitutes": {"sc": ["sw", "ch", " Sc", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "ec", "search", "nc", "sch", "cor", "sh", "cc", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "cs", "pc", "exec", "ner", "ci", "asc", "screen", "cv", "sci"], "N": ["Ne", "Ns", "F", "NO", "E", "NM", "No", "Part", " n", "NB", "Num", "H", "Count", "Number", "Node", "T", "B", "NE", "Y", "NT", "Na", "NS", "n", "R", "L", "ND", "K", "W", "NR", "Len", "C", "O", "NA", "D", "M", "Z", "S", "X", "V", "NN", "P", "Size", "I"], "A": ["Total", "As", "An", "AR", "a", "Args", "Result", "MA", "array", "The", "Act", "AP", "Pass", "Max", "AA", "Action", "H", "Count", "Input", "Upload", "Ma", "Alpha", "B", "Code", "Y", "SA", "This", "Ha", "alpha", "Array", "AM", "Access", "API", "BA", "FA", "W", "Entry", "CA", "Ar", "NA", "History", "At", "Info", "C", "Advanced", "S", "Z", "Adam", "Address", "LA", "X", "P", "Average", "None", "I", "Parts", "Auth"], "i": ["id", "uni", "j", "iii", "api", "ri", "lc", "h", "a", "pi", "I", "in", "d", "mi", "init", "ii", "ip", "cli", "ori", "v", "ix", "c", "io", "abi", "r", "y", "gi", "index", "adi", "k", "uli", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "o", "eni", "di", "w", "ini", "isi", "oi", "ie", "chi", "ei", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "fi", "ai", "uri", "b"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.util.regex.*;\\n\\n\\npublic class Main {\\n\\n\tfinal static long MOD = 1000000007;\\n\tpublic static String[] Ws = null;\\n\tpublic static int wsIndx = 0;\\n\tpublic static BufferedReader in = null;\\n\tpublic static long cnt=0;\\n\tpublic static PrintWriter pw = new PrintWriter(System.out);\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tsolutionA(args);\\n\t\tif(in!=null){\\n\t\t\tin.close();\\n\t\t}\\n\t\tpw.flush();\\n\t\tpw.close();\\n\t}\\n\\n\tpublic static void solutionA(String[] args) throws Exception{\\n\\n\t\tint N = nextInt();\\n\t\tint[] a = nextInts();\\n\\n\t\tint[] color = new int[9];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tif(a[i]>3199) {\\n\t\t\t\tcolor[8]++;\\n\t\t\t}else {\\n\t\t\t\tcolor[a[i]/400]++;\\n\t\t\t}\\n\t\t}\\n\t\tint min = 0;\\n\t\tfor(int i=0;i<8;i++) {\\n\t\t\tif(color[i]!=0) {\\n\t\t\t\tmin++;\\n\t\t\t}\\n\t\t}\\n\t\tint max;\\n\t\tif(color[8]==N) {\\n\t\t\tmin=1;\\n\t\t\tmax=N;\\n\t\t}else {\\n\t\t\tmax = min+color[8];\\n\t\t}\\n\t\tpw.println(min+\" \"+max);\\n\t}\\n\\n\tpublic static void check() throws Exception{\\n\t\tif(in == null){\\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tif(Ws==null || Ws.length<=wsIndx){\\n\t\t\tWs = in.readLine().split(\" \");\\n\t\t\twsIndx=0;\\n\t\t}\\n\t}\\n\tpublic static int nextInt()throws Exception{\\n\t\tcheck();\\n\t\treturn Integer.parseInt(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static long nextLong()throws Exception{\\n\t\tcheck();\\n\t\treturn Long.parseLong(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static String nextString()throws Exception{\\n\t\tcheck();\\n\t\treturn Ws[wsIndx++];\\n\t}\\n\\n\tpublic static int[] nextInts()throws Exception{\\n\t\tcheck();\\n\t\tint[] tmp = new int[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Integer.parseInt(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static long[] nextLongs()throws Exception{\\n\t\tcheck();\\n\t\tlong[] tmp = new long[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Long.parseLong(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static String[] nextStrings()throws Exception{\\n\t\tcheck();\\n\t\twsIndx=Ws.length;\\n\t\treturn Ws;\\n\t}\\n\\n}\\n\\n", "target": "94", "substitutes": {"MOD": ["id", " rc", " Max", " PID", " alpha", " ms", " seq", " C", "Max", " exp", " K", " Z", " MAX", " pid", " W", "L", " magic", " MS", " timeout", " ID", " X", " L", " weight", " R", " H", "ID", "MS", "Id", " base"], "Ws": ["Pages", "Items", "Vs", "wcs", "wy", "Services", "Input", "qs", "NS", "WB", "Words", "Wa", "NW", "ws", "Wars", "Maps", "w", "WI", "wt", "Socket", "Wo", "Word", "Es", "RW", "Ns", "Fs", "Bytes", "Writer", " WS", "Settings", "File", "Host", "WT", "Bs", "Win", "GW", "Stack", "Values", "arms", "Us", "Sys", "CW", "Ms", "WP", "wx", "Str", "Js", "Windows", "LCS", "Width", "War", "wa", "Wr", "Web", "ww", "Raw", "Tokens", "WN", "ls", "Rs", "wb", "Cs", "Kn", "WC", "Line", "Works", "Cas", "wd", "W", "rw", "WS", "s", "Wi", "WW", "AppData", "Wire", "Parts"], "wsIndx": ["Wsindy", "WSIndX", "wsIntx", "wsIdex", "wsINDg", "wsIdg", "wsIdx", "wsIndX", "wsINDX", "WSIdg", "wsDelindex", "WsIndn", "wsLenX", "Wsindx", "WSIdwork", "wsindex", "WsIndX", "wsIndy", "wsINDx", "WSIndb", "wsDelx", "wsindn", "wsIDg", "WSIdb", "wsIdX", "WSIdx", "WSIndex", "wsLeny", "wsIndb", "wsInX", "wsIny", "wsINDy", "WSIndy", "wsIDb", "WSIndx", "wsIndwork", "Wsindindex", "WSIndg", "wsIntg", "wsindindex", "WSIdex", "wsindX", "wsIndex", "wsInex", "wsIntwork", "WsIndex", "wsIndn", "wsIdy", "WSIndwork", "WsIndindex", "wsLenn", "wsIndg", "wsInx", "WSIdy", "wsINDex", "wsIdn", "wsIdwork", "wsindy", "wsIDx", "wsIdb", "WsindX", "wsIndindex", "wsINDb", "wsLenx", "WsIndx", "Wsindex", "WsIndy", "wsIdindex", "wsIDy", "Wsindn", "wsDelX", "wsIntX", "WSIdX", "wsindx", "wsDely"], "in": ["id", "token", "inner", "login", "again", "path", "gin", "str", "bin", "inas", "cin", "resource", "d", "init", "din", "inc", "err", "get", "c", "is", "m", "url", "inet", "r", "name", "out", "read", "ac", "input", "ln", "request", " IN", "data", "p", "n", "ex", "win", "isin", "ssl", "f", "IN", "rin", "inn", "ws", "as", "connection", "image", "In", "pass", "w", "ini", "nin", "l", "config", "pin", "kin", "cl", "socket", "lin", "reader", "b", "source", "ins"], "cnt": [" count", "CNT", "count", " cNT", "ncount", "Cnc", "ncnc", "Count", "ncNT", " cnc", "cnc", "cNT", "ncnt", "Cnt"], "pw": ["fw", "apwd", "spew", "pew", "ch", "npr", "apw", " pwa", "Pew", "pwa", "Pwd", " ph", "nph", "apv", " pW", "pws", "PW", "cr", "jpwa", "pwd", "spW", "jpv", "fws", "spwa", " pv", "Pws", "Pw", "npwd", " pew", "fwd", "cw", "cwd", "jpw", "Pwa", "pv", "fW", "ph", "pr", " pr", "spw", "jpwd", "apwa", "npw", " pwd", " pws", "pW"], "N": ["Q", "Ne", "Ni", "J", "Ns", "F", "NO", "E", "Max", " n", "Num", "H", "A", "Number", "T", "B", "NI", "Y", "NT", "NS", "n", "R", "L", "K", "C", "O", "NA", "D", "M", "U", "Z", "S", "V", "X", "P", "I", "G"], "a": ["access", "app", "ba", "oa", "ai", "aa", "sa", "d", "am", "array", "ha", "an", "area", "c", "ac", "ia", "ana", "y", "A", "ga", "ad", "ea", "p", "e", "alpha", "sha", "n", "f", "aj", "la", "ca", "as", "va", "na", "o", "image", "s", "ama", "da", "au", "ae", "u", "action", "ar", "b"], "color": ["id", "stroke", "token", "Color", "pixel", "format", "fill", "COLOR", "option", "length", "or", "comment", "offset", "resource", "gray", "count", "colour", "theme", "border", "type", "black", "chrom", "style", "c", "url", "ac", "position", "r", "y", "cor", "index", "white", "k", "with", "key", "channel", "number", "pos", "alpha", "gl", "bug", "cycle", "digit", "char", "width", "o", "col", "w", "use", "blue", "pal", "num", "sum", "shadow", "background", "size", "scale", "state", "source"], "i": ["id", "inner", "j", "ri", "pi", "I", "mi", "init", "ii", "ip", "z", "v", "ix", "io", "c", "y", "gi", "index", "k", "phi", "e", "p", "n", "f", "qi", "ji", "q", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "ie", "oi", "yi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "fi", "ai", "mini", "ti"], "min": ["id", "pri", "small", "mid", "none", "left", "part", "Mini", "Min", "d", "init", "no", "sa", "limit", "default", "start", "area", "m", "just", "shift", "from", "mean", "index", "ng", "pre", "minimum", "key", "dim", "p", "n", "pos", "f", "span", "partial", "na", "low", "skip", "sort", "sign", "MIN", "amin", "val", "version", "range", "div", "sum", "date", "mins", "x", "don", "block", "diff", "minus", "first", "mini", "size", "lim", "scale", "minute"], "max": ["id", "can", "then", "base", "nd", "az", "wrap", "right", "height", "length", "crop", "part", "mod", "d", "no", "count", "Max", "last", "default", "start", "c", "y", "out", "MAX", "size", "index", "ng", "k", "with", "ad", "key", "cat", "p", "n", "end", "cycle", "ca", "conf", "ax", "w", "range", "div", "rest", "parent", "sum", "patch", "x", "est", "step", "rand", "scale", "total", "res", "cent"], "tmp": ["su", "Temp", "vv", "params", "seed", "mem", "input", "ln", "np", "nb", "data", "proc", "phi", "map", "cache", "src", "mm", "Len", "stack", "sb", "buf", "vm", "mp", "output", "rb", "buffer", "temp", "source"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tstatic class Task {\\n        public void solve(InputReader in, PrintWriter out) {\\n        \tint n = in.nextInt();\\n        \tif(n==1) {\\n        \t\tout.println(in.nextInt());\\n        \t\treturn;\\n        \t}\\n        \tint ans = 0;\\n        \tint prev = in.nextInt();\\n        \tfor(int i=1; i<n; i++) {\\n        \t\tint curr = in.nextInt();\\n        \t\tif(prev > curr)\\n        \t\t\tans+=prev-curr;\\n        \t\tif(i==n-1)\\n        \t\t\tans+=curr;\\n        \t\tprev = curr;\\n        \t}\\n        \tout.println(ans);\\n        }\\n        \\n        public void solve_again(InputReader in, PrintWriter out) {\\n        \tint n = in.nextInt();\\n        \tint curr = in.nextInt();\\n        \tint ans = curr;\\n        \tfor(int i=1; i<n; i++) {\\n        \t\tint next = in.nextInt();\\n        \t\tif(next > curr)\\n        \t\t\tans+=next-curr;\\n        \t\tcurr = next;\\n        \t}\\n        \tout.println(ans);\\n        }\\n        \\n    }\\n\t\\n    public static void main(String argds[]) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        Task solver = new Task();\\n        solver.solve(in, out);\\n        out.close();\\n    }\\n\\n\tstatic class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n        \\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n \\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n \\n        public long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n    }\t\\n}", "target": "77", "substitutes": {"in": ["inner", "again", "inas", "query", "m", "url", "r", "con", "isin", "inn", "In", "nin", "up", "version", "between", "diff", "gen", "config", "path", "cin", "d", "user", "din", "inc", "cli", "is", "this", "read", "input", "request", "pull", "from", "data", "rin", "binary", "kin", "socket", "all", "name", "serv", "login", "sin", "conn", "resource", "init", "c", "by", "re", "win", "inf", "ic", "connection", "null", "get", "source", "id", "file", "gin", "a", "str", "bin", "part", "err", "arg", "min", "IN", "as", "image", "ini", "l", "pin", "vin", "lin", "ins"], "out": ["inner", "again", "doc", "png", "outside", "inas", "query", "page", "table", "server", "client", "OUT", "extra", "password", "r", "net", "w", "up", "exec", "output", "gen", "list", "temp", "outs", "line", "cin", "user", "inc", "group", "io", "this", "input", "data", "key", "dump", "string", "window", "pass", "exp", "self", "write", "raw", "copy", "name", "error", "conn", "comment", "init", "call", "cmd", "sync", "ng", "p", "off", "connection", "view", "ext", "Out", "null", "post", "buffer", "object", "pool", "console", "file", "bin", "part", "err", "prefix", "v", "session", "ex", "obj", "bar", "cache", "o", "s", "parent", "log", "b", "writer", "to"], "n": ["j", "nn", "syn", "nav", "conn", "len", "sn", "ns", "nu", "d", "no", "nl", "z", "v", "c", "m", "r", "en", "y", "network", "nc", "non", "t", "mn", "ln", "nb", "k", "nt", "un", "ne", "cn", "p", "dn", "f", "e", "net", "pn", "na", "o", "w", "s", "nin", "fn", "l", "num", "N", "x", "zn", "nan", "ni", "g", "u", "b"], "ans": ["aps", "anas", "lines", "outs", "ats", "a", "cons", "Ns", "lan", "ons", "ns", "ens", "rs", "errors", "aus", "ss", "nas", "amps", "an", "params", "reads", "ams", "ars", "ras", "asts", "ana", "parts", "xs", "os", "aned", "acs", "ln", "cas", "groups", "offs", "ds", "ents", "oss", "names", "nt", "p", "ads", "ares", "ids", "ks", "span", "arts", "anc", "ANS", "na", "as", "ians", "s", "actions", "ays", "cs", "ends", "ants", "vs", "eps", "results", "x", "nan", "ops", "ms", "ann", "anes", "ls", "ins"], "prev": ["id", "cmp", "original", "loc", "nav", "orig", "right", "h", "counter", "rec", "init", "ip", "winner", "root", "last", "old", "v", "prefix", "iv", "current", "r", "iter", "upper", "post", "above", "nr", "pre", "rev", "batch", "p", "anti", "Prev", "max", "na", "seq", "rh", "cur", "coll", "par", "vious", "s", "rest", "per", "adj", "pres", "sup", "before", "var", "first", "rel", "history", "pred", "initial", "b", "res"], "i": ["id", "uni", "inner", "j", "ri", "h", "pi", "mu", "mi", "init", "ip", "ii", "ori", "ix", "v", "io", "abi", "r", "gi", "index", "uli", "phi", "anti", "qi", "f", "ji", "p", "ui", "xi", "li", "multi", "b", "di", "ini", "ie", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "ni", "u", "uri", "fi", "ai", "ti", "vi"], "curr": [" currer", " curri", "corrator", "corrd", "cerre", " curro", "corrc", "interner", "surro", "curri", "currc", "urre", "cerr", "currator", "derner", " currator", "interr", "corrar", "interrs", "perre", "verR", "turn", "mirre", "mirr", "urro", "currer", "urrs", "perrs", "turro", "surre", " curn", " currs", "mirrator", "perrf", "urrer", "curn", "cerrs", "Currer", "verrd", "Curr", "currs", "corr", "derr", "derR", "currar", " curner", "derrs", "surr", "currf", "corrs", "turr", "corre", "mirR", " currd", "corrf", "surn", "curner", "verrar", "perri", "currd", "serro", "curro", " curre", "perr", "Curre", "urr", "serrf", "serre", "corR", "urR", "turre", "serR", "cerro", "perrc", "derrer", "verr", "mirri", "curre", "CurR", "mirrer", "curR", "interre", " currar", "serr", "derre", "serrc", "derri", "corri", " curR"], "next": ["mid", "page", "apply", "start", "second", "word", "frame", "net", "result", "me", "vious", "primary", "mini", "output", "gen", "entry", "then", "open", "iterator", "line", "Next", "quote", "default", "pointer", "current", "match", "read", "non", "data", "number", "good", "end", "digit", "string", "li", "multi", "eni", "readable", "later", "ner", "text", "valid", "bis", "name", "py", "error", "conn", "length", "aa", "latest", "ss", "c", "area", "sub", "value", "big", "nr", "ng", " Next", "reply", "p", "max", "more", "sup", "success", "ni", "message", "sequence", "step", "pri", "lines", "token", "j", "api", "err", "last", "follow", "content", "future", "shift", "min", "sec", "seq", "code", "log", "info", "random", "first", "done"], "argds": ["Argls", " argls", "gds", "Argss", "gd", "Argd", " argd", "gss", " Stringds", "gls", " Stringd", " Stringss", "Argds", " Stringls", " argss"], "inputStream": ["outputScreen", "inStream", "outputContext", "inputContext", " inputstream", " inputSteam", "outputstream", "instream", "outputSteam", "InputContext", "inputstream", "Inputstream", "inSteam", "inputSteam", "InputSteam", "inScreen", "InputStream", "inputScreen", " inputContext", "InputScreen"], "outputStream": ["protectedSteam", "Outputstream", "outputstream", " outputStreamer", "outputSteam", "OutputStream", "OutputStreamer", "protectedstream", "inputstream", "inputSteam", "inputStreamer", "OutputSteam", "protectedStreamer", " outputstream", " outputSteam", "protectedStream", "outputStreamer"], "solver": ["solution", "Solved", "ssolver", "ssolution", " solving", "insolution", "solved", "setsolution", "setsolve", "Solutions", "Solve", "insolutions", "solve", "ssolved", "insolver", " solutions", "ssolve", "solving", "Solution", " solution", "insolving", "solutions", "Solver", "Solving", "setsolver", "setsolved"], "reader": ["slice", "port", "inner", "h", "rer", "oder", "or", "rx", "resource", "report", "ruby", "server", "wrapper", "er", "io", "manager", "pointer", "Reader", "iter", "r", "read", "reading", "holder", "input", "rr", "re", "e", "loader", "lock", "driver", "worker", "row", "over", "feed", " Reader", "it", "connection", "per", "handler", "parser", "socket", "null", "buffer", "writer", "entry"], "tokenizer": ["initialener", "okenner", "tokenoder", "okenizer", "tokenize", "tokener", "tokenner", "Tokenize", "initialize", "Tokenizer", " tokenener", "okenoder", " tokeniser", "okenization", " tokenization", "serialize", "optimiter", "optimizer", "initializer", "tokenizable", " tokenner", "okenize", "Tokener", "initialization", " tokenizers", "tokeniser", " tokeniter", " tokenoder", "serializers", " tokenizable", "tokeniter", "okenener", "Tokenener", "initialner", "tokenizers", "tokenener", "okeniser", "okener", "Tokeniser", "Tokenoder", "tokenization", "optimization", "optimize", " tokener", "Tokenner", "serializer", " tokenize", "initialiter", "Tokenizable", "Tokenization", "serializable", "Tokenizers"], "stream": ["writer", "port", "path", "Stream", "inner", "pool", "console", "single", "open", "h", "body", "model", "form", "length", "serial", "resource", "user", "server", "client", "content", "down", "response", "read", "holder", "input", "data", "channel", "context", "ssl", "lock", "driver", "string", "row", "feed", "connection", "monitor", "trans", "per", "view", "log", "socket", "message", "buffer", "source"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try {\\n            // \u6a19\u6e96\u5165\u529b\\n            InputStreamReader isr = new InputStreamReader(System.in);\\n            BufferedReader br = new BufferedReader(isr);\\n            String a = br.readLine();\\n            int aCount = 0;\\n            String b = br.readLine();\\n            int bCount = 0;\\n            String c = br.readLine();\\n            int cCount = 0;;\\n            String now = \"a\";\\n            while (true) {\\n                if (\"a\".equals(now)) {\\n                    if (aCount >= a.length()) {\\n                        System.out.println(\"A\");\\n                        break;\\n                    }\\n                    now = a.substring(aCount, aCount + 1);\\n                    aCount++;\\n                } else if (\"b\".equals(now)) {\\n                    if (bCount >= b.length()) {\\n                        System.out.println(\"B\");\\n                        break;\\n                    }\\n                    now = b.substring(bCount, bCount + 1);\\n                    bCount++;\\n                } else if (\"c\".equals(now)) {\\n                    if (cCount >= c.length()) {\\n                        System.out.println(\"C\");\\n                        break;\\n                    }\\n                    now = c.substring(cCount, cCount + 1);\\n                    cCount++;\\n                }\\n            }\\n       } catch (IOException e) {\\n            e.printStackTrace();\\n       }\\n    }\\n}\\n", "target": "11", "substitutes": {}}
{"code": "import java.util.*;\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        String t = sc.next();\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        String u = sc.next();\\n        if(s.equals(u)){\\n            a += -1;\\n            String as = String.valueOf(a);\\n            String bs = String.valueOf(b);\\n            System.out.println(as+\" \"+bs);\\n        } else {\\n            b += -1;\\n            String as = String.valueOf(a);\\n            String bs = String.valueOf(b);\\n            System.out.println(as+\" \"+bs);\\n        }\\n    }\\n}", "target": "155", "substitutes": {"sc": ["sw", "sr", "cont", "ch", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "sf", "se", "SC", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "search", "ck", "nc", "sch", "cor", "sh", "cc", "cus", "core", "ctx", "sp", "ser", "cle", "src", "rc", "sche", "ca", "cur", "coll", "sb", "cs", "cl", "pc", "parse", "ner", "parser", "asc", "screen", "cv", "sci"], "s": ["gs", "h", "su", "ns", "in", "sa", "services", "aus", "ss", "ps", "v", "c", "south", "abs", "r", "strings", "e", "p", "n", "ses", "f", "uts", "string", "o", "w", "sb", "i", "cs", "S", "l", "si", "sl", "sv", "g", "ls", "ts"], "t": ["h", "ss", "ta", "_", "v", "at", "c", "r", "y", "out", "T", "e", "ur", "p", "n", "f", "q", "it", "o", "w", "l", "x", "g", "ts"], "a": ["ast", "aw", "ba", "ab", "fa", "art", "aaa", "aa", "sa", "am", "an", "at", "c", "area", "ac", "ia", "y", "this", "A", "ga", "ada", "ad", "ea", "p", "n", "alpha", "f", "pa", "aj", "la", "ca", "va", "na", "i", "ama", "asa", "da", "au", "x", "ae", "af", "ai", "sta"], "b": ["wb", "j", "base", "ib", "ab", "cb", "h", "ba", "body", "bg", "bc", "aa", "d", "bb", "bf", "z", "v", "c", "ob", "abs", "r", "y", "db", "B", "e", "p", "n", "bar", "f", "eb", "bot", "br", "o", "sb", "i", "lb", "l", "fb", "x", "bas", "bd", "bl", "rb"], "u": ["cu", "h", "su", "str", "nu", "uto", "d", "ut", "uc", "v", "c", "m", "r", "y", "uu", "T", "ul", "k", "e", "ur", "p", "n", "f", "uts", "bu", "q", "ui", "string", "tu", "o", "w", "i", "up", "uf", "U", "us", "l", "x", "g", "ue", "ou"], "as": ["ast", "base", "az", "mas", "As", "ab", "ats", "asha", "sa", "am", "aus", "las", "nas", "AS", "ask", "asts", "at", "ras", "abs", "aws", "ac", "ases", "ars", "aos", "os", "is", "acs", "cas", "ass", "pa", "alpha", "ans", "us", "asa", "was", "has", "au", "bas", "asc", "ar", "ase", "pas"], "bs": ["base", "ins", "outs", "ba", "ab", "cb", "bles", "ns", "bc", "bb", "las", "bh", "pb", "ss", "ps", "bf", "iss", "bes", "ras", "abs", "aos", "is", "bos", "ases", "Bs", "es", "bel", "ses", "bing", "als", "ubs", "bu", "eb", "les", "blocks", "css", "bal", "BS", "sb", "us", "lb", "cs", "bugs", "its", "bi", "vs", "fb", "bas", "bl", "ls", "bps", "bytes", "bis", "bars"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n        Scanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n        int[] dArr = new int[N];\\n\\n        for (int i=0; i< N; i++) {\\n            dArr[i] = scanner.nextInt();\\n        }\\n\\n        int sum = 0;\\n        for (int i=0; i< N; i++) {\\n            for (int k=i+1; k< N; k++) {\\n                sum += dArr[i] * dArr[k];\\n            }\\n        }\\n        System.out.println(sum);\\n    }\\n}", "target": "126", "substitutes": {"scanner": ["annter", "nerer", "scaner", "annner", "Scanner", "cank", "Scaninner", "anninner", "canter", "caninner", "caner", "Scaner", "canning", "nerner", "Scanter", "sck", "scanning", "anner", "canner", "scank", "scner", "Scank", "nerter", "scer", "nerning", "scaninner", "scter", "scanter", "Scanning"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "E", "NM", "Part", " n", "NB", "Num", "H", "network", "T", "B", "NE", "Y", "NT", "NS", "n", "R", "L", "K", "W", "NR", "Len", "C", "O", "NA", "D", "SN", "M", "KN", "Z", "S", "V", "X", "NN", "P", "Size", "I", "G"], "dArr": [" dArl", " dArp", "dAttb", "dArn", "dArl", " dArc", "dARd", "dErc", "dArrr", "dARc", "dUrc", "dArc", "dAttp", "dAvp", "dArrs", "dArd", " dArrr", " dErr", "dARn", " dArn", "dARrr", "dARrs", " dARrr", " dArb", "dARr", "dAttl", "dErn", "dAttr", "dUrrr", "dARb", " dARc", "dErp", " dErn", "dErb", "dArb", " dErb", "dAvl", "dErrr", "dAvn", "dErl", "dUrr", "dArp", "dARl", "dUrd", "dAvr", "dAttn", " dErl", "dAvb", " dARd", " dArrs", " dARr", "dErd", " dArd", "dARp", "dErr", " dErp", "dAvrs"], "i": ["id", "j", "api", "ri", "pi", "mu", "in", "mi", "init", "ip", "ii", "ori", "ix", "io", "start", "v", "r", "y", "min", "gi", "index", "phi", "e", "p", "n", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "iu", "it", "o", "eni", "di", "ini", "ie", "oi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "fi", "ai", "I"], "sum": ["vol", "error", "rank", "a", "cum", "offset", "d", "Sum", "err", "share", "summary", "count", "v", "spread", "match", "miss", "mass", "out", "amount", "shape", "min", "sh", "fee", "mean", "ass", "add", "alpha", "sp", "result", "carry", "fat", "cal", "cur", "average", "sort", "sign", "num", "loss", "weight", "parse", "sup", "si", "frac", "info", "real", "diff", "g", "cost", "all", "size", "um", "balance", "scale", "total"], "k": ["id", "ku", "j", "ijk", "sk", "kl", "ek", "kick", "d", "inc", "kh", "ko", "kn", "z", "v", "c", "ok", "y", "r", "kr", "key", "ak", "e", "p", "n", "kat", "f", "ki", "ik", "K", "q", "ks", "end", "ph", "o", "w", "kid", "kw", "kk", "mk", "ke", "x", "u", "b"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tstatic Scanner scanner;\\n\tpublic static void main(String[] args) {\\n\t    scanner = new Scanner(System.in);\\n\\n        int h=gi();\\n        int a=gi();\\n        \\n\t    \\n\t    \\n        System.out.println((int)Math.ceil((double)h/(double)a));\\n//        if (xo>w || yo>h) {\\n//        \tSystem.out.print(0);\\n//        }else {\\n//        \tSystem.out.print((h-yo)*(w-xo));\\n//        }\\n\\n\\n\t}\\n\\n\t// \u6587\u5b57\u5217\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static String gs() {\\n\t\treturn scanner.next();\\n\t}\\n\\n\t// int\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static int gi() {\\n\t\treturn Integer.parseInt(scanner.next());\\n\t}\\n\\n\t// long\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static long gl() {\\n\t\treturn Long.parseLong(scanner.next());\\n\t}\\n\t\\n\t// double\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static double gd() {\\n\t\treturn Double.parseDouble(scanner.next());\\n\t}\\n}", "target": "147", "substitutes": {"scanner": ["anler", "canler", "scaner", "Scanner", "aner", "analyler", " scanler", "canatter", "analyner", "penler", "caner", "Scaner", "analyer", "scanler", " scanatter", "analyning", "scanning", "anner", "canner", "anatter", "penning", "penner", "Scanning", " scaner", "Scanler", "scanatter", "pener"], "h": ["hh", "d", "ah", "bh", "hd", "ha", "ht", "v", "z", "c", "H", "oh", "han", "he", "gh", "sh", "hr", "phi", "igh", "p", "n", "ih", "f", "eh", "hm", "rh", "ph", "hs", "th", "uh", "i", "adh", "l", "hi", "x", "dh", "u", "hp", "b"], "a": ["ba", "ab", "asha", "ma", "aa", "sa", "d", "am", "z", "an", "c", "area", "ac", "y", "ana", "A", "ad", "p", "n", "alpha", "f", "pa", "aj", "ar", "va", "as", "o", "w", "i", "ama", "l", "da", "au", "qa", "ae", "u", "ai", "b"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        ArrayList<Integer> list=new ArrayList<>();\\n        for(int i=0;i<5;i++){\\n            list.add(sc.nextInt());\\n        }\\n        System.out.println(list.indexOf(0)+1);\\n    }\\n}", "target": "222", "substitutes": {"sc": ["sw", "lc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "uc", "esc", "sq", "c", "scan", "osc", "sub", "search", "nc", "sch", "sec", "cc", "sh", "sp", "src", "acc", "rc", "system", "anc", "sche", "ca", "cs", "l", "log", "cl", "pc", "exec", "ner", "ci", "asc", "config", "sci"], "list": ["id", "cont", "listed", "base", "left", "lc", "pool", "counter", "array", "table", "cli", "live", "lists", "iter", "see", "out", "ul", "index", "chain", "batch", "number", "queue", "L", "lock", "result", "la", "li", "test", "stack", "coll", "full", "LIST", "tree", "collection", "keep", "l", "log", "ll", "cl", "set", "loop", "bl", "all", "null", "sequence", "entry"], "i": ["id", "j", "ri", "h", "pi", "mu", "in", "init", "ii", "ip", "z", "v", "abi", "c", "start", "io", "m", "r", "gi", "index", "phi", "e", "p", "f", "ji", "end", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "s", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "uri", "ai", "I"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\ttry(Scanner sc = new Scanner(System.in)) {\\n\t\t\\n\t\t\tint[] ans = new int[3];\\n\t\t\t\\n\t\t\tans[sc.nextInt() - 1 ]  = 1;\\n\t\t\tans[sc.nextInt() - 1 ] = 1;\\n\t\t\t\\n\t\t\tfor(int i = 0 ; i < 3 ; i++ ) {\\n\t\t\t\tif ( ans[i] == 0 ) {\\n\t\t\t\t\tSystem.out.println(i+1);\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t}\\n\t}\\n\\n}", "target": "236", "substitutes": {"ans": ["can", "lines", "aces", "man", "ani", "ats", " means", "lan", "ons", "ns", "ens", "sk", "AN", "aning", "cross", "atan", "ps", "ions", "amps", "anges", "an", "scan", "ras", "ars", "ana", "xs", "os", "aned", "acs", "cas", "anon", "ents", "ds", "ads", "ids", "ks", "span", "idents", "ANS", "na", "as", "ians", "anned", "ays", "cs", "ants", "vs", "eps", "nan", "anes", "ann", "ins"], "sc": ["sw", "enc", "ch", "lc", "app", "soc", " Sc", "conn", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "com", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "con", "ec", "sub", "nc", "cc", "cus", "desc", "ctx", "sp", "src", "rc", "system", "anc", "sche", "ca", "na", "sb", "cs", "cl", "pc", "ner", "ci", "asc", "cv", "mc", "config", "sci"], "nextInt": ["randomInt", " nextShort", "randomExt", "NextExt", "NextShort", " nextINT", "randomint", "isShort", "nextint", "isLong", "randomFloat", "nextLong", "Nextint", "nextExt", "NextFloat", "isInt", " nextExt", "NextLong", "NextInt", "nextINT", "nextFloat", " nextFloat", "nextShort", "isINT", "NextINT", " nextLong", " nextint"], "i": ["id", "j", "ri", "pi", "mu", "in", "mi", "ii", "ip", "z", "v", "at", "c", "abi", "io", "ix", "r", "t", "gi", "ski", "disk", "index", "k", "p", "n", "anti", "f", "qi", "ji", "end", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "ni", "I"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        double r = scanner.nextDouble();\\n        System.out.println(r * 2 * 3.14);\\n    }\\n}\\n", "target": "167", "substitutes": {"scanner": ["annter", "annner", "scaner", "Scanner", "scanener", "Scanener", "Scaninner", "anninner", "canter", "caninner", "Scanwriter", "caner", "nerener", "Scaner", "scanwriter", "nerner", "nerwriter", "Scanter", "anner", "canner", "nerter", "canwriter", "scaninner", "scanter", "canener"], "r": ["sr", "rating", "or", "rs", "d", "err", "cr", "v", "c", "m", "rr", "kr", "re", "nr", "k", "e", "p", "R", "alpha", "mr", "f", "n", "result", "rl", "q", "rc", "br", "pr", "i", "rd", "radius", "l", " R", "u", "rt", "ar", "rb", "rat", "b", "rg"]}}
{"code": "import java.util.*;\\nimport java.util.Collections;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int K = sc.nextInt();\\n        int bigger = 0;\\n        \\n        ArrayList<Integer> list = new ArrayList<>();\\n        \\n        if(A < B){\\n            bigger = B;\\n        }else{\\n            bigger = A;\\n        }\\n        for(int i = 1;i <= bigger;i++){\\n            if(A % i == 0 && B % i == 0){\\n                list.add(i);\\n            }\\n        }\\n        Collections.sort(list,Collections.reverseOrder());\\n        System.out.println(list.get(K-1));\\n    }\\n}\\n", "target": "134", "substitutes": {}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint[] m=new int[4];\\n\t\tm[0]=sc.nextInt();\\n\t\tm[1]=sc.nextInt();\\n\t\tm[2]=sc.nextInt();\\n\t\tint work,a;\\n\t\tfor(int j=1;j<=2;j++){\\n\t\t\tfor(int i=j;i>0;i--){\\n\t\t\t\tif(m[i-1]<m[i]){\\n\t\t\t\t\tm[3]=m[i-1];\\n\t\t\t\t\tm[i-1]=m[i];\\n\t\t\t\t\tm[i]=m[3];\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\ta=3;\\n\t\twhile(a<10){\\n\t\t\tint i=2;\\n\t\t\twork=sc.nextInt();\\n\t\t\ta++;\\n\t\t\twhile(((i>=0) && work>m[i])){\\n\t\t\t\t\tm[i+1]=m[i];\\n\t\t\t\t\ti--;\\n\t\t\t}\\n\t\t\tif(i!=2){\\n\t\t\t\tm[i+1]=work;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\t\tSystem.out.println(m[0]+\"\\n\"+m[1] + \"\\n\"+m[2]);\\n\t\t\\n\\n\t}\\n\\n}", "target": "164", "substitutes": {"sc": ["cont", "sw", " rc", "ch", "enc", "lc", "soc", " Sc", "loc", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "ss", "lib", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "tc", "ec", "nc", "sch", "cc", "sec", "cor", "cus", "sh", "ctx", "sp", "cle", "src", "rc", "system", "anc", "sche", "cam", "cur", "coll", "class", "sb", "cs", "cl", "exp", "pc", "exec", "ner", "asc", "screen", "cv", "sci"], "m": ["tm", "man", "h", "media", "mu", "dm", "fm", "mod", "mi", "am", "d", "rem", "om", "md", "sm", "z", "v", "im", "c", "an", "r", "y", "t", "min", "mean", "dim", "e", "gm", "p", "n", "wm", "f", "machine", "ym", "pm", "mm", "cm", "hm", "module", "multi", "mos", "o", "M", "w", "s", "bm", "l", "nm", "rm", "x", "em", "ms", "mo", "u", "g", "um", "mc", "b"], "work": ["id", "change", "man", "h", "check", "part", "job", "in", "d", "what", "ask", "count", "c", "start", "ac", "y", "ack", "min", "worked", "index", "data", "k", "ak", "ad", "batch", "p", "n", "f", "age", "end", "max", "worker", "width", "na", "adjust", "working", "w", "use", "act", "works", "num", "Work", "da", "x", "g", "u", "rank"], "a": ["aw", "ba", "ab", "art", "part", "ai", "aaa", "aa", "sa", "am", "an", "area", "c", "ac", "ia", "y", "ana", "ack", "A", "ak", "ad", "p", "n", "alpha", "pa", "ea", "aj", "worker", "la", "wa", "ca", "as", "adjust", "working", "va", "na", "w", "da", "au", "qa", "ae", "u", "action", "ar", "b"], "j": ["h", "ja", "J", "part", "ij", "job", "d", "jj", "ii", "z", "v", "c", "start", "y", "t", "k", "e", "p", "n", "qi", "f", "ji", "aj", "dy", "q", "xi", "li", "o", "di", "ie", "l", "fr", "si", "x", "jo", "ci", "u", "ni", "jp", "b"], "i": ["id", "slice", "api", "ri", "ami", "pi", "mu", "part", "page", "I", "my", "mi", "d", "ii", "cli", "ip", "ori", "v", "ix", "c", "io", "is", "y", "gi", "index", "phi", "e", "p", "n", "f", "qi", "ji", "ik", "ui", "xi", "li", "iu", "it", "multi", "working", "o", "di", "ini", "s", "oi", "ie", "w", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "mini", "b"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args){\\n    \\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int T = sc.nextInt();\\n    int[]c = new int[n];\\n    int[]t = new int[n];\\n    ArrayList<Integer>ans  = new ArrayList<>();\\n    \\n    for(int i=0; i<n; i++){\\n        c[i] = sc.nextInt();\\n        t[i] = sc.nextInt();\\n}\\n    int cou = 0;\\n    for(int i=0; i<n; i++){\\n    \tif(t[i] <= T) {\\n    \t\tans.add(c[i]);\\n    \t\t\tcou++;\\n    \t}else if(cou == 0) {\\n    \t\tans.add(1001);\\n    \t}\\n    \t}\\n    Collections.sort(ans);\\n    if(cou != 0) {\\n    \tSystem.out.println(ans.get(0));\\n    }else {\\n    \tSystem.out.println(\"TLE\");\\n    }\\n}\\n}", "target": "8", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "loc", " Sc", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "sa", "com", "ss", "cli", "fc", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "sec", "cus", "ctx", "sp", "dc", "acc", "src", "rc", "system", "anc", "sche", "ca", "sb", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "cv", "mc", "sci"], "n": ["j", "nn", "h", "conn", "Ns", "sn", "ns", "in", "d", "no", "count", "nl", "v", "z", "m", "r", "y", "en", "network", "nc", "k", "nt", "cn", "e", "ne", "p", "number", "f", "net", "C", "o", "w", "s", "N", "l", "num", "x", "u", "g", "size", "b"], "T": ["Q", "Total", "TT", "F", "E", "d", "TN", "z", "Num", "WT", "H", "out", "A", "B", "Y", "NT", "p", "R", "L", "K", "W", "C", "O", "Type", "D", "M", "U", "S", "Z", "N", "V", "X", "P", " N", "I", "G"], "c": ["cu", "ch", "cf", "lc", "a", "ct", "in", "d", "uc", "z", "cr", "v", "at", "m", "r", "y", "ec", "nc", "ce", "cc", "cn", "cat", "e", "p", "xc", "f", "dc", "cm", "C", "ca", "o", "w", "cs", "l", "pc", "x", "ci", "u", "g", "cp", "b"], "t": ["j", "h", "vert", "tp", "d", "table", "type", "z", "v", "at", "ta", "m", "not", "r", "y", "pt", "unt", "tt", "dt", "k", "nt", "e", "p", "f", "ot", "it", "test", "o", "w", "target", "l", "x", "tz", "time", "total", "u", "g", "ant", "b", "ts"], "ans": ["opens", "can", "anas", "man", "ips", "ats", "a", "leans", "lan", "ons", "sk", "ns", "AN", "aning", "aus", "ions", "nas", "amps", "vers", "an", "asts", "ras", "ams", "aos", "ars", "ations", "ana", "olds", "artifacts", "os", "aned", "acs", "cas", "ils", "offs", "laws", "anon", "ents", "oss", "ctx", "ads", "ks", "arts", "ands", "angs", "anc", "idents", "ANS", "na", "anners", "as", "ys", "ians", "s", "ays", "cs", "books", "ants", "eps", "ann", "ls", "ins"], "i": ["id", "j", "ri", "pi", "mu", "I", "mi", "init", "ii", "ip", "cli", "v", "ix", "is", "io", "abi", "y", "gi", "uli", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "yi", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "fi", "ai", "ti"], "cou": ["coup", "lcao", "tou", "tola", "fou", "Coun", " couf", "acou", "acoul", "acoup", "Cour", "Cao", "lcou", "Coup", "tao", "acao", "lcour", " cour", "lcore", "Cou", "Cola", "foup", "fao", "acour", "cola", "core", "Coul", "coun", " core", "touf", " cao", " coun", "tour", "foul", "cao", " cola", "acore", "couf", "toun", "coul", "cour", "Couf"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main {\\n\tpublic static void main (String[] args){\\n\t\tScanner sc =  new Scanner(System.in);\\n\t\tfloat N = sc.nextInt();\\n\t\tint R = (int)Math.ceil(N/2);\\n\t\tSystem.out.println(R);\\n\t}\\n}", "target": "233", "substitutes": {"sc": ["sw", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sub", "search", "nc", "ec", "sch", "cc", "sec", "sh", "sp", "acc", "rc", "system", "anc", "ca", "cs", "pc", "ner", "ci", "asc", "g", "sci"], "N": ["NG", "CL", "Ne", "Ns", "F", "NO", "E", "NM", "NL", "RN", "No", " n", "NB", "Node", "Number", "T", "B", "NI", "NE", "NT", "NS", "n", "L", "K", "NR", "C", "O", "NC", "NA", "D", "M", "S", "Z", "V", "X", "NN", "P", "Size", "GN", "I", "G"], "R": ["Q", "RR", "AR", "RG", "RO", "F", "J", "RE", "E", "RN", "SR", "JR", "HR", "r", "T", " r", "B", "L", "K", "RM", "NR", "W", "C", "O", "D", "M", "U", "S", "Res", "X", "V", "GR", "P", "RC", "NER", "Rs", "G", "RA"]}}
{"code": "public class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tjava.util.Scanner sc = new java.util.Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\twhile (true) {\\n\\n\t\t\tchar[] cdata = sc.nextLine().toCharArray();\\n\t\t\tif ( cdata.length==1 && cdata[0]=='0' ) break;\\n\\n\t\t\tint sum =0;\\n\\n\t\t\tint[] idata = new int[cdata.length];\\n\t\t\tfor (int i=0; i < cdata.length; i++) {\\n\t\t\t\tidata[i] = Character.getNumericValue( cdata[i] );\\n\t\t\t\tsum += idata[i];\\n\t\t\t}\\n\\n\t\t\tsb.append(sum + \"\\n\");\\n\\n\t\t}\\n\\n\t\tSystem.out.print(sb);\\n\\n\t}\\n\\n}", "target": "144", "substitutes": {}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.NoSuchElementException;\\npublic class Main {\\n\tpublic static void main(String[] args)throws Exception{\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\t\tString S=next();\\n\t\tint N=S.length();\\n\t\tint one=0,two=0;\\n\t\tfor(int i=0;i<N;i+=2){\\n\t\t\tif(S.charAt(i)=='1')\\n\t\t\t\tone++;\\n\t\t\tif(i+1<N&&S.charAt(i+1)=='0')\\n\t\t\t\tone++;\\n\t\t}\\n\t\tfor(int i=0;i<N;i+=2){\\n\t\t\tif(S.charAt(i)=='0')\\n\t\t\t\ttwo++;\\n\t\t\tif(i+1<N&&S.charAt(i+1)=='1')\\n\t\t\t\ttwo++;\\n\t\t}\\n\t\tSystem.out.println(Math.min(two,one));\\n\t}\\n\tstatic boolean isOK(int index,String key,String[]a){\\n\t\tif (a[index].compareTo(key)>=0) return true;\\n\t    else return false;\\n\t}\\n\tstatic int binary_search(String key,String[] a) {\\n\t    int ng = -1; //\u300cindex = 0\u300d\u304c\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u521d\u671f\u5024\u306f -1\\n\t    int ok = (int)a.length; // \u300cindex = a.size()-1\u300d\u304c\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u521d\u671f\u5024\u306f a.size()\\n\t    while (Math.abs(ok - ng) > 1) {\\n\t        int mid = (ok + ng) / 2;\\n\t        if (isOK(mid,key,a)) ok = mid;\\n\t        else ng = mid;\\n\t    }\\n\t    return ok;\\n\t}\\n\t//FastScanner\\n\tstatic InputStream in = System.in;\\n\tstatic  byte[] buffer = new byte[1024];\\n\tstatic int length = 0, p = 0;\\n\tpublic static boolean hasNextByte () {\\n\t\tif (p < length) return true;\\n\t\telse {\\n\t\t\tp = 0;\\n\t\t\ttry {length = in.read(buffer);}\\n\t\t\tcatch (Exception e) {e.printStackTrace();}\\n\t\t\tif (length == 0) return false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n\tpublic static int readByte () {\\n\t\tif (hasNextByte() == true) return buffer[p++];\\n\t\treturn -1;\\n\t}\\n\tpublic static boolean isPrintable (int n) {return 33<=n&&n<=126;}\\n\tpublic static void skip () {\\n\t\twhile (hasNextByte() && !isPrintable(buffer[p])) p++;\\n\t}\\n\tpublic static boolean hasNext () {skip(); return hasNextByte();}\\n\tpublic static String next () {\\n\t\tif (!hasNext()) throw new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint temp = readByte();\\n\t\twhile (isPrintable(temp)) {\\n\t\t\tsb.appendCodePoint(temp);\\n\t\t\ttemp = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\tpublic static int nextInt () {return Math.toIntExact(nextLong());}\\n\tpublic static int[] nextInts (int n) {\\n\t\tint[] ar = new int[n];\\n\t\tfor (int i=0; i<n; i++) ar[i] = nextInt();\\n\t\treturn ar;\\n\t}\\n\tpublic static long nextLong () {\\n\t\tif (!hasNext()) throw new NoSuchElementException();\\n\t\tboolean minus = false;\\n\t\tint temp = readByte();\\n\t\tif (temp == '-') {\\n\t\t\tminus = true;\\n\t\t\ttemp = readByte();\\n\t\t}\\n\t\tif (temp<'0' || '9'<temp) throw new NumberFormatException();\\n\t\tlong n = 0;\\n\t\twhile (isPrintable(temp)) {\\n\t\t\tif ('0'<=temp && temp<='9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += temp - '0';\\n\t\t\t}\\n\t\t\ttemp = readByte();\\n\t\t}\\n\t\treturn minus? -n : n;\\n\t}\\n}\\n\\n", "target": "146", "substitutes": {"out": ["path", "error", "outs", "sys", "conn", "file", "line", "str", "page", "in", "Output", "user", "err", "report", "flush", "table", "println", "client", "io", "outer", "OUT", "m", "name", "r", "word", "point", "input", " Out", "p", "n", "ex", "f", "bar", "obj", "cache", "W", "dump", "string", "tmp", "window", "connection", "o", "In", "w", "s", "M", "log", "self", "exec", "x", "print", "Out", "screen", "output", "gen", "list", "temp", "writer", "write"], "S": ["Stream", "SH", "Site", "Str", "Si", "SS", "Os", "SU", "Su", "Ns", "Sin", "Sample", "Sync", "SC", "I", "Characters", "Standard", "Single", "Space", "TS", "SO", "Session", "Service", "JS", "Start", "Input", "STR", "A", "T", "VS", "OS", "Sl", "SA", "Less", "SAM", "PS", "NS", "L", "Text", "Prev", "SE", "string", "Sign", "C", "WS", "SN", "M", "s", "ST", "U", " s", "IS", "SI", "Socket", "V", "RS", "P", "GS", "Series", "DS", "Part", "Sing"], "N": ["Q", "EN", "Ne", "Ni", "J", "Ns", "F", "E", "Part", "Network", " n", "NB", "Num", "H", "T", "CNN", "B", "Y", "NT", "Na", "NS", "n", "R", "L", "K", "W", "Len", "O", "C", "NA", "D", "M", "II", "KN", "Z", "X", "V", "NN", "P", "Size", "GN", "I", "G"], "one": ["you", "ONE", "none", "great", "single", "thing", "another", "always", "nine", "six", "multiple", "so", "other", "same", "only", "three", "no", "cross", "many", "four", "square", "ones", "down", "yes", " four", "plus", "second", "this", "half", "value", " many", "once", "five", "with", "e", "number", "ion", "n", "p", "on", "missing", "quick", "zero", "off", "less", "One", "eight", "up", "version", "code", "common", "Two", "ide", "x", "first", "minus", " three", "null", "few"], "two": ["you", "small", "none", "left", "single", "another", "nine", "flo", "six", "there", "multiple", "numbered", "both", "three", "many", "negative", "four", "down", "wrong", "these", "done", "second", "rice", "half", " five", "mega", "five", "beta", "below", "problem", "generic", "division", "floor", "zero", "less", "more", "simple", "low", "eight", "them", "ten", "lo", "common", "Two", "seven", "later", "equal", "minus", "few", "sci"], "i": ["id", "slice", "j", "api", "ri", "h", "ami", "pi", "mu", "mi", "init", "d", "ip", "ii", "ori", "io", "ix", "v", "is", "c", "start", "abi", "y", "gi", "ski", "data", "uli", "phi", "e", "fi", "qi", "f", "ji", "ui", "xi", "li", "iu", "multi", "o", "eni", "di", "ini", "b", "isi", "oi", "ie", "yi", "chi", "ei", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "ni", "ti", "u", "uri", "ai", "mini", "I", "source", "name"], "index": ["id", "slice", "path", "address", "loc", "condition", "fix", "offset", "page", "ticket", "inc", "ind", "type", "level", "pointer", "start", "element", "Index", "position", "match", "search", "value", "e", "number", "entry", "f", "string", "connection", "image", "column", "primary", "num", "si", "weight", "info", "pattern", "x", "action", "size", "name"], "key": ["id", "hash", "path", "j", "base", "secret", "str", "other", "rule", "ace", "ip", "type", "pointer", "name", "element", "match", "y", "KEY", "search", "value", "data", "k", "e", "p", "cache", "Key", "char", "item", "string", "row", "ray", "o", "range", "ie", "parent", "code", "info", "text", "x", "hello", "link", "list", "entry"], "a": ["access", "address", "ba", "ab", "ma", "part", "aaa", "aa", "sa", "ata", "am", "aux", "array", "ha", "abc", "an", "area", "script", "c", "ac", "password", "y", "A", "aaaa", "ga", "ea", "p", "e", "alpha", "Array", "ray", "wa", "va", "as", "ca", "na", "image", "o", "w", "ama", "parent", "x", "auto", "u", "all", "list", "b", "name"], "ng": ["pri", "nz", "NG", "nd", "axis", "orig", "gin", "bc", "page", "ig", "ep", "Index", "eng", "nc", "reg", "win", "row", "test", "pg", "log", "nce", "loop", "success", "g", "sign", "rand"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner scan = new Scanner(System.in);\\n        String s = scan.next();\\n        int n = s.length();\\n        System.out.println(isPal(s) && isPal(s.substring(0, (n - 1) / 2)) && isPal(s.substring((n + 3) / 2 - 1)) ? \"Yes\" : \"No\");\\n        scan.close();\\n    }\\n    \\n    public static boolean isPal(String s){\\n        for(int i = 0; i < s.length(); i++){\\n            if(s.charAt(i) != s.charAt(s.length() - i - 1)) return false;\\n        }\\n        return true;\\n    }\\n}\\n", "target": "123", "substitutes": {"scan": ["sc", "can", "inner", "sin", "look", "nn", "send", "query", "se", "in", "err", "server", "nl", "get", "er", "an", "is", "inter", "match", "r", "see", "out", "search", "read", "clean", "sync", "stat", "ln", "network", "en", "chan", "cat", "san", "watch", "walk", "ans", "bug", "system", "row", "run", "skip", "l", "Scan", "pin", "parse", "ignore", "ner", "trace", "ann", "b"], "s": ["opens", "lines", "gs", "sin", "fs", "h", "su", "a", "ings", "str", "ns", "styles", "js", "se", "in", "d", "services", "sf", "ss", "ps", "sets", "c", "is", "m", "south", "sync", "r", "abs", "y", "os", "xs", "t", "input", "es", "strings", "ds", "e", "p", "ses", "f", "sp", "ssl", "ks", "ans", "less", "string", "ws", "as", "bs", "o", "b", "source", "sb", "its", "us", "cs", "S", "l", "si", "sl", "tests", "u", "g", "ls", "series", "sv", "ts", "ins"], "n": ["j", "nd", "nn", "h", "len", "sn", "ns", "nu", "d", "no", "count", "z", "v", "c", "m", "y", "nc", "t", "ln", "nb", "ng", "k", "nt", "ne", "e", "p", "f", "net", "pn", "o", "w", "N", "l", "num", "x", "g", "ni", " N", "u", "b", "name"], "i": ["id", "slice", "j", "ri", "length", "pi", "mu", "in", "d", "init", "ii", "ip", "ori", "v", "ix", "io", "c", "z", "gi", "index", "adi", "phi", "key", "e", "p", "f", "qi", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "I"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t    Scanner sc = new Scanner(System.in);\\n\t\tString[] x = sc.nextLine().split(\" \");\\n\t\tint s,g,d;\\n\t\tint answer = 0;\\n\t\td = Integer.parseInt(x[1]);\\n\t\tfor (int i =0;i < Integer.parseInt(x[0]);i++) {\\n\t\t\tString[] y = sc.nextLine().split(\" \");\\n\t\t\ts = Integer.parseInt(y[0]);\\n\t\t\tg = Integer.parseInt(y[1]);\\n\t\t\tif (Math.sqrt(Math.pow(s,2) + Math.pow(g,2)) <= d) {\\n\t\t\t\tanswer += 1;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.print(answer);\\n\t}\\n\\n}", "target": "42", "substitutes": {"sc": ["cont", "enc", "ch", "lc", " Sc", "cer", "st", "or", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "ss", "server", "uc", "cr", "esc", "c", "scan", "osc", "sync", "spec", "con", "ec", "sub", "nc", "sch", "cor", "sh", "desc", "sp", "src", "rc", "system", "anc", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "parser", "ci", "asc", "screen", "sci"], "x": ["id", "one", "a", "xx", "rx", "ux", "in", "xy", "z", "v", "ix", "c", "plus", "tx", "xs", "t", "data", "index", "xml", "e", "p", "n", "ex", "f", "q", "string", "b", "w", "ax", "l", "sex", "lex", "X", "u", "python", "name"], "s": ["id", "sin", "su", "a", "ns", "js", "se", "in", "sa", "ss", "ps", "z", "ix", "sq", "c", "is", "r", "xs", "os", "es", "ds", "e", "p", "n", "ses", "f", "ans", "sd", "o", "ys", "w", "sb", "cs", "S", "l", "si", "u", "ls", "ies", "b"], "g": ["j", "gs", "sg", "vg", "gin", "gn", "greg", "ig", "gy", "v", "c", "m", "eg", "gi", "gh", "gam", "ga", "gp", "ng", "mg", "yg", "e", "gm", "p", "n", "f", "gg", "gu", "gc", "ge", "pg", "w", "gas", "go", "l", "og", "cfg", "u", "gen", "ag", "gar", "b", "G", "rg"], "d": ["id", "j", "dad", "a", "dd", "dp", "md", "fd", "draw", "z", "v", "c", "m", "t", "dist", "data", "dt", "ds", "dim", "e", "ad", "p", "n", "dn", "f", "did", "dc", "sd", "D", "di", "w", "l", "dx", "da", "dq", "du", "diff", "dy", "done", "b"], "answer": ["distance", "knowledge", "address", "adder", "evidence", "answered", "su", " answered", "message", "audio", "dd", "grade", "err", "array", "swers", "draw", "square", "z", "now", "response", "search", "db", "size", "value", "support", "Answer", "een", "archive", "reply", "number", "question", "duration", " answers", "result", "string", "next", "ity", "average", "image", "ey", "score", "results", "ae", "ell", "dy", "complete", "done", "python", "order"], "i": ["j", "ri", "pi", "mu", "I", "mi", "ip", "ii", "v", "ix", "io", "m", "gi", "phi", "e", "p", "n", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "oi", "yi", "chi", "si", "bi", "zi", "ci", "u", "ni", "ai", "ti", "vi"], "y": ["yang", "py", "yr", "ry", "gy", "hy", "z", "ny", "c", "yy", "year", "ay", "yo", "Y", "cy", "e", "p", "n", "oy", "ym", "yer", "ky", "ys", "o", "vy", "iy", "ey", "yi", "ish", "zy", "ya", "sky", "zi", "dy", "ye", "b", "sy"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint D = scanner.nextInt();\\n\t\tint N = scanner.nextInt();\\n\t\tint x = N + 1;\\n\\n\t\t//N\u304c100\u306e\u3068\u304d\u3068\u305d\u308c\u4ee5\u5916\u3067\u5834\u5408\u5206\u3051\\n\t\tif (N != 100) {\\n\t\t\tSystem.out.println(N * determine(D));\\n\t\t} else {\\n\t\t\tSystem.out.println(x * determine(D));\\n\t\t}\\n\t}\\n\\n\t//D\u306e\u5024\u306b\u3088\u3063\u3066\u5834\u5408\u5206\u3051\\n\tpublic static int determine(int d) {\\n\t\tint result;\\n\t\tif (d == 0) {\\n\t\t\tresult = 1;\\n\t\t} else if (d == 1) {\\n\t\t\tresult = 100;\\n\t\t} else {\\n\t\t\tresult = 100 * 100;\\n\t\t}\\n\t\treturn result;\\n\t}\\n}", "target": "245", "substitutes": {"scanner": ["scaner", " scanser", "Scanner", "Scaninner", "analyinner", " scaninner", "analyner", "caninner", "caner", "Scaner", "analyer", "Scanker", "scanker", "canker", "Scanser", "canner", " scanker", "canser", "scaninner", " scaner", "analyker", "scanser"], "D": ["Q", "DD", "F", "E", "d", "DE", "A", "Do", "T", "B", "Y", "Depth", "R", "L", "K", "O", "C", "M", " d", "Z", "DI", "S", "V", "X", "P", "depth", "Id", "I"], "N": ["Q", "Ne", "J", "Ns", "F", "E", "NM", " n", "Num", "H", "A", "T", "B", "Y", "NT", "NS", "n", "R", "L", "K", "W", "C", "O", "M", "U", "Z", "S", "V", "X", "NN", "P", "I", "G"], "x": ["id", "j", "h", "xx", "d", "z", "ix", "c", "Index", "y", "xs", "index", "ng", "k", "e", "ex", "p", "xc", "n", "f", "q", "xp", "w", "ax", "i", "num", "X", "xes"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        final int N = Integer.parseInt(sc.next());\\n        String[] ss = new String[N];\\n        for (int i = 0; i < N; i++) {\\n            ss[i] = sc.next();\\n        }\\n        String ans = \"Yes\";\\n        \\n        for (int i = 0; i < N; i++) {\\n            for (int j = i + 1; j < N; j++) {\\n                if (ss[i].equals(ss[j])) {\\n                    ans = \"No\";\\n                    break;\\n                }    \\n            }\\n        }\\n        for (int i = 0; i < N - 1; i++) {\\n            char last = ss[i].charAt(ss[i].length() - 1);\\n            char first = ss[i+1].charAt(0);\\n            if (last != first) {\\n                ans = \"No\";\\n                break;\\n            } \\n        }\\n        \\n        out.println(ans);\\n        \\n        out.flush();\\n    }\\n}", "target": "70", "substitutes": {"sc": ["sw", "sr", "ch", "lc", " Sc", "cer", "scl", "Sc", " SC", "squ", "bc", "se", "SC", "scope", " scr", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "src", "rc", "system", "anc", "sche", "sb", "cs", "pc", "ner", "ci", "asc", "stream", "screen", "cv", "mc", "sci"], "out": ["path", "ch", "again", "pool", "png", "error", "outs", "file", "line", "str", "page", "in", "builder", "err", "flush", "report", "println", "client", "arg", "io", "v", "OUT", "name", "dest", "input", "pid", "p", "ex", "obj", "lock", "cache", "result", "IN", "string", "list", "o", "source", "pass", "w", "s", "up", "raw", "log", "sum", "self", "exec", "exp", "print", "Out", "screen", "output", "write", "gen", "buffer", "temp", "writer", "res"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "NM", "No", "Part", "Network", " n", "NB", "Num", "H", "network", "T", "CNN", "B", "NI", "NE", "Y", "NT", "NV", "Na", "NS", "n", "R", "L", "NY", "ND", "K", "W", "Len", "C", "O", "NC", "MN", "D", "NA", "M", "KN", "U", "S", "Z", "X", "V", "NN", "P", "Size", "I"], "ss": ["opens", "ips", "SS", "fs", "su", "cons", "ns", "styles", "rs", "se", "fts", "cross", "ls", "ps", "icks", "ress", "iss", "vers", "style", "is", "aws", "ars", "ros", "settings", "os", "xs", "ess", "strings", "uss", "ng", "ds", "ass", "oss", "ses", "pos", "sp", "ssl", "ks", "hess", "less", "string", "rss", "ws", "bs", "css", "na", "pass", "WS", "s", "its", "cs", "sites", "sts", "si", "vs", "tests", "ssh", "struct", "pps", "posts", "services", "sv", "ts", "ins"], "i": ["id", "slice", "uni", "api", "ri", "ami", "pi", "mu", "in", "mi", "init", "d", "jj", "ip", "ii", "ind", "cli", "ori", "io", "ix", "v", "is", "y", "gi", "index", "jp", "phi", "e", "p", "n", "anti", "qi", "f", "ji", "ik", "ui", "off", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "b", "ie", "oi", "yi", "chi", "l", "si", "bi", "hi", "info", "zi", "x", "ci", "ni", "u", "uri", "fi", "ai", "ti", "I", "source", "vi"], "ans": ["anas", "vals", "rules", "nn", "outs", "ats", "cons", "errors", "lan", "sk", "ns", "ons", "AN", "rs", "aning", "styles", "aus", "atan", "anks", "nas", "atts", "amps", "an", "reads", "ras", "ams", "ars", "asts", "scan", "ana", "olds", "params", "os", "aned", "acs", "cas", "ds", "oss", "ents", "ares", "ads", "ids", "ks", "arts", "forces", "ANS", "na", "as", "s", "ays", "acts", "cs", "ants", "eps", "results", "ann", "ant", "ls", "ins", "helps"], "j": ["jet", "h", "ja", "J", "a", "js", "ij", "d", "jj", "ii", "bj", "ind", "z", "v", "jen", "is", "r", "y", "jl", "k", "key", "e", "dj", "p", "n", "rev", "f", "qi", "ji", "aj", "li", "next", "it", "o", "di", "ie", "el", "l", "si", "uj", "bi", "x", "jo", "u", "ni", "g", "jp", "b"], "last": ["id", "nd", "ultimate", "st", "str", "First", "best", "tail", "latest", "old", "start", "pop", "bottom", "second", "lower", "from", "nt", "Last", "prev", "f", "end", "max", "cle", "string", "char", "next", "cur", "th", "code", "l", "later", "letter", "est", "name"], "first": ["id", "middle", "one", "left", "nd", "ultimate", "right", "st", "front", "art", "First", "part", "only", "empty", "latest", "head", "start", "second", "current", "top", "third", "Last", "star", "prev", "f", "max", "next", "primary", "th", "per", "l", "initial", "leading", "name"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint[] abc= {sc.nextInt(),sc.nextInt(),sc.nextInt()};\\n\t\tint k=sc.nextInt();\\n\t\tArrays.sort(abc);\\n\t\tfor(int i=0; i<k;i++) abc[2] *= 2;\\n\t\tSystem.out.println(abc[0]+abc[1]+abc[2]);\\n\t}\\n}\\n", "target": "201", "substitutes": {"sc": ["sw", "cont", "enc", "ch", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "con", "ec", "tc", "nc", "cc", "sec", "cus", "core", "auc", "ctx", "sp", "src", "rc", "system", "anc", "sche", "ca", "na", "contract", "cur", "sb", "cs", "cl", "exp", "pc", "parse", "ner", "asc", "cv", "sci"], "abc": ["enc", "etc", "lc", "loc", "ab", "cb", "ABC", "ba", "ib", "lab", "bc", "aa", "aux", "ah", "inc", "array", "com", "pb", "fc", "uc", "abi", "c", "icc", "abs", "ac", "cca", "ob", "org", "ec", "const", "irc", "circ", "auc", "big", "lambda", "xc", "alpha", "arr", "dc", "fab", "acc", "acl", " ABC", "rc", "la", "anc", "ahead", "seq", "abl", "conf", "lb", "ignore", "fb", "au", "pc", "oc", "arc", "asc", "af", "erc", "rb", "mc"], "k": ["ku", "j", "sk", "kick", "d", "ko", "z", "v", "c", "m", "ok", "ck", "ak", "key", "p", "n", "f", "ks", "K", "kb", "ik", "q", "dc", "km", "o", "kw", "l", "mk", "ke", "g", "u", "size", "b", "work"], "i": ["uni", "inner", "j", "ri", "h", "pi", "mu", "I", "in", "d", "ii", "ip", "z", "v", "io", "gi", "phi", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "di", "ini", "oi", "chi", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "ni", "fi", "ai", "uri", "b", "vi"]}}
{"code": "/*\\n * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_3_A&lang=jp\\n */\\nimport java.util.*;\\n\\npublic class Main {\\n\tvoid run() {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint[] stack = new int[200];\\n\t\tint sp = 0;\\n\t\twhile (scan.hasNext()) {\\n\t\t\tString tok = scan.next();\\n\t\t\tif (tok.equals(\"+\")) {\\n\t\t\t\tint b = stack[--sp];\\n\t\t\t\tint a = stack[--sp];\\n\t\t\t\tstack[sp++] = a + b;\\n\t\t\t} else if (tok.equals(\"-\")) {\\n\t\t\t\tint b = stack[--sp];\\n\t\t\t\tint a = stack[--sp];\\n\t\t\t\tstack[sp++] = a - b;\\n\t\t\t} else if (tok.equals(\"*\")) {\\n\t\t\t\tint b = stack[--sp];\\n\t\t\t\tint a = stack[--sp];\\n\t\t\t\tstack[sp++] = a * b;\\n\t\t\t} else {\\n\t\t\t\tint x = Integer.parseInt(tok);\\n\t\t\t\tstack[sp++] = x;\\n\t\t\t}\\n\t\t\t//System.out.println(sp);\\n\t\t}\\n\t\tSystem.out.println(stack[0]);\\n\t}\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().run();\\n\t}\\n}\\n\\n", "target": "114", "substitutes": {"scan": ["sc", "can", "inner", " scanner", "look", "nn", "fan", "or", "query", "se", "in", "ry", "ss", "server", "connect", "er", "an", "sync", "r", "read", "search", "see", "stat", "clean", "san", "n", "win", "watch", "walk", "ser", "span", "system", "feed", "run", "skip", "pass", "Scan", "ignore", "parse", "exec", "ner", "parser", "ann", "sign", "reader"], "stack": ["sc", "layer", "counter", "check", "in", "start", "ack", "which", "pack", "support", "add", "context", "cases", "list", "config", "change", "lc", "fill", "function", "line", "inc", "wrapper", "style", "tc", "pull", "index", "Stack", "tree", "space", "cl", "ignore", "load", "stream", "depth", "loop", "work", "scope", "level", "pop", "lower", "chain", "batch", "p", "cycle", "view", "parse", "history", "trace", "buffer", "scale", "state", "source", "slice", "left", "acks", "file", "scroll", "site", "forward", "array", "play", "make", "push", "queue", "cache", "module", "l", "sl", "reverse", "stage", "thread", "where", "ins"], "sp": ["sc", "app", "lp", "sg", "spe", "page", "process", "start", "spot", "spec", "sh", "fe", "pos", "context", "i", "osp", "Sp", "sci", "pp", "spl", "line", "sf", "inc", "ps", "ep", "std", "style", "prof", "f", "bp", "span", "tmp", "space", "exp", "isp", "pse", "cp", "amp", "sk", "scope", "ss", "bsp", "script", "ng", "p", "esp", "ph", "pg", "SP", "sup", "html", "pc", "yp", "status", "ext", "jp", "step", "inst", "source", "slice", "le", "model", "st", "tp", "str", "part", "ns", "site", "se", "ind", "pt", "session", "wp", "src", "si", "pl", "sl", "stage", "thread", "zip", "spring"], "tok": ["token", "taken", "intak", " token", "todo", "intook", " tensor", "ntaken", "stoken", "Took", "toks", " tod", "stoks", "podo", " troc", "stensor", "ttori", "ttroc", "ttak", " tang", "ttod", "ttok", "ttaken", " todo", "tooken", "Tak", " taken", "stalk", "toask", "tensor", "stori", "toensor", "ttodo", "ttoken", " task", "tak", "intok", "stook", "ntok", "poken", "ntang", "intoks", "tang", "ntroc", "task", "stask", "stok", "pod", "intori", "Toks", "Tok", "tod", "ttang", "troc", "stak", "intalk", "talk", "tori", "ttalk", "pok", "took"], "b": ["wb", "base", "app", "ba", "ab", "h", "cb", "bg", "body", "bad", "part", "abb", "bc", "aa", "d", "bh", "pb", "bf", "z", "v", "gb", "c", "ob", "m", "abc", "r", "y", "db", "B", "nb", "e", "be", "p", "n", "bar", "f", "mb", "bot", "binary", "bs", "o", "w", "sb", "lb", "i", "l", "fb", "g", "u", "rb"], "a": ["api", "access", "ba", "ab", "oa", "fa", "ma", "aa", "sa", "aux", "am", "about", "ach", "z", "an", "area", "c", "abs", "ac", "ia", "y", "A", "ga", "ad", "e", "p", "n", "alpha", "f", "pa", "ea", "aj", "la", "wa", "active", "va", "as", "na", "ca", "o", "w", "s", "i", "ama", "l", "za", "sup", "da", "qa", "ae", "auto", "ar"], "x": ["id", "xxxx", "base", "wx", "xx", "rx", "fx", "d", "xy", "xt", "xxx", "z", "ix", "v", "c", "y", "xs", "t", "index", "data", "ex", "pos", "xc", "p", "ctx", "max", "xi", "xp", "w", "ax", "i", "val", "num", "dx", "X", "ext", "g", "xa", "u", "work"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint A[] = new int[N];\\n\t\tfor(int i=0;i<N;i++){\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\tselectionSort(A,N);\\n\t}\\n\tpublic static void selectionSort(int[] A,int N){\\n\t\tint count=0;\\n\t\tfor(int i=0;i<N;i++){\\n\t\t\tint minj=i;\\n\t\t\tfor(int j=i;j<N;j++){\\n\t\t\t\tif(A[j]<A[minj])minj=j;\\n\t\t\t}\\n\t\t\tif(i!=minj){\\n\t\t\t\tint c = A[i];\\n\t\t\t\tA[i] = A[minj];\\n\t\t\t\tA[minj] = c;\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor(int i=0;i<N;i++){\\n\t\t\tSystem.out.print(A[i]);\\n\t\t\tif(i!=N-1)System.out.print(\" \");\\n\t\t}\\n\t\tSystem.out.printf(\"\\n%d\\n\",count);\\n\t}\\n}\\n", "target": "199", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "soc", " Sc", "syn", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "out", "nc", "sch", "sec", "sh", "cc", "nt", "sp", "ser", "src", "rc", "system", "anc", "sche", "class", "sb", "cs", "si", "cl", "pc", "ner", "screen", "cv", "sci"], "N": ["Q", "Ne", "Ni", "J", "Ns", "F", "E", "NM", "NL", "No", "Part", "Bi", " n", "NB", "Num", "H", "Count", "network", "Node", "Number", "T", "B", "NI", "NE", "Y", "NT", "Na", "NS", "number", "n", "R", "L", "K", "W", "Len", "C", "O", "NA", "D", "MN", "M", "Z", "S", "X", "V", "NN", "P", "Size", "I", "G"], "A": ["Q", "As", "An", "a", "F", "E", "Args", "All", "MA", "Each", "array", "The", "DATA", "And", "AP", "Area", "AA", "Action", "area", "H", "Count", "Input", "Ma", "T", "Alpha", "B", "App", "Y", "mA", "SA", "Na", "This", "Ha", "alpha", "L", "Array", "AM", "API", "K", "FA", "C", "O", "CA", "Ar", "D", "NA", "At", "M", "History", "In", "U", "S", "Z", "Adam", "Java", "Address", "LA", "X", "V", "au", "P", "Average", "AU", "I", "G", "Parts"], "i": ["id", "uni", "api", "ri", "a", "pi", "mu", "in", "mi", "init", "ip", "ii", "ind", "cli", "z", "ix", "io", "start", "m", "v", "ori", "y", "gi", "index", "phi", "key", "e", "p", "n", "qi", "f", "ji", "ki", "ik", "q", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "b", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "ni", "u", "uri", "fi", "ai", "ti", "mini", "I"], "count": ["id", "base", "counter", "check", "length", "len", "ind", "process", "child", "z", "call", "start", "second", "Count", "current", "index", "nt", "key", "e", "number", "p", "n", "cat", "f", "cache", "max", "C", "coll", "code", "num", "sum", "info", "weight", "depth", "size", "list", "b"], "minj": ["lockx", "Minj", "minJ", "minf", "MINf", "smalli", "Mini", "minx", "lockf", "smallch", " minx", " minch", "inc", "conj", " minf", " minu", " minc", "MinJ", "MINc", "smallJ", "minja", "conji", "locku", "Minc", "mainu", " minuj", " mini", "unji", "lockj", "Minl", "mainj", "Minch", "smallj", "inf", "minc", "mainx", "minl", "minu", "MINj", "minch", "ini", "MINJ", "unj", "conJ", "mainf", "conja", " minja", "unja", "Minuj", "unJ", " minl", "minuj", " minji", "inj", " minJ", "minji", "MINi", "mini", "MINuj"], "j": ["id", "py", "api", "ja", "J", "a", "ij", "js", "job", "d", "ah", "jj", "ii", "bj", "ind", "z", "v", "ix", "je", "start", "r", "y", "jc", "jl", "e", "dj", "obj", "n", "p", "f", "ji", "aj", "end", "ui", "br", "li", "it", "o", "obi", "adj", "ie", "l", "fr", "uj", "bi", "si", "x", "jo", "oj", "u", "ni", "jp", "g", "b"], "c": ["cu", "cf", "ch", "lc", "a", "d", "z", "v", "cr", "m", "r", "ce", "cc", "k", "cn", "e", "cat", "p", "n", "f", "end", "max", "C", "col", "s", "cs", "code", "l", "ci", "u", "b"]}}
{"code": "/**\\n\\n\u592a\u90ce\u304c\u82b1\u5b50\u3068\u4e00\u7dd2\u306b\u30c8\u30e9\u30f3\u30d7\u904a\u3073\u3092\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u3053\u308d\u300152\u679a\u3042\u308b\u306f\u305a\u306e\u30ab\u30fc\u30c9\u304c n \u679a\u306e\u30ab\u30fc\u30c9\u3057\u304b\u624b\u5143\u306b\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u3089\u306e n \u679a\u306e\u30ab\u30fc\u30c9\u3092\u5165\u529b\u3068\u3057\u3066\u3001\u8db3\u308a\u306a\u3044\u30ab\u30fc\u30c9\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u4e0b\u3055\u3044\u3002\\n\\n\u592a\u90ce\u304c\u6700\u521d\u306b\u6301\u3063\u3066\u3044\u305f\u30c8\u30e9\u30f3\u30d7\u306f\u30b8\u30e7\u30fc\u30ab\u30fc\u3092\u9664\u304f52\u679a\u306e\u30ab\u30fc\u30c9\u3067\u3059\u3002\\n\\n52\u679a\u306e\u30ab\u30fc\u30c9\u306f\u3001\u30b9\u30da\u30fc\u30c9\u3001\u30cf\u30fc\u30c8\u3001\u30af\u30e9\u30d6\u3001\u30c0\u30a4\u30e4\u306e\uff14\u3064\u306e\u7d75\u67c4\u306b\u5206\u304b\u308c\u3066\u304a\u308a\u3001\u5404\u7d75\u67c4\u306b\u306f13\u306e\u30e9\u30f3\u30af\u304c\u3042\u308a\u307e\u3059\u3002\\n\\n  */\\n//S,\u30b9\u30da\u30fc\u30c9\u3001H,\u30cf\u30fc\u30c8\u3001C,\u30af\u30e9\u30d6\u3001D,\u30c0\u30a4\u30e4\\n/*sucanner\u30af\u30e9\u30b9\u4f7f\u3046\u305f\u3081\u306b\u30a4\u30f3\u30dd\u30fc\u30c8*/\\nimport java.util.Scanner;\\n\\nclass Main {\\n\t// \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\\n\tpublic static void main(String[] args) {\\n\t\t// \u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u751f\u6210\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u73fe\u5728\u624b\u5143\u306b\u3042\u308b\u679a\u6570\u3092\u53d7\u3051\u53d6\u308b\\n\t\tint intKazu = sc.nextInt();\\n\t\t// \u30ab\u30fc\u30c9\u5168\uff15\uff12\u679a\u306e\u914d\u5217\u3092\u3064\u304f\u308b\\n\t\tint card[][] = new int[4][13];\\n\t\t// \u30ab\u30fc\u30c9\u306e\u7d75\u9762\u3068\u6570\u5b57\u3092\u53d7\u3051\u53d6\u308b\u5909\u6570\u3092\u5ba3\u8a00\\n\t\tString strEzura = \"\";\\n\t\tint intSuuji = 0;\\n\\n\t\t// \u624b\u5143\u306b\u3042\u308b\u679a\u6570\u306e\u6570\u3060\u3051\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\\n\t\tfor (int i = 0; i < intKazu; i++) {\\n\t\t\t// \u7d75\u9762\u3001\u6570\u5b57\u3092\u3046\u3051\u3068\u308b\\n\t\t\tstrEzura = sc.next();\\n\t\t\tintSuuji = sc.nextInt();\\n\t\t\t// \u53d7\u3051\u53d6\u3063\u305f\u7d75\u9762\u3001\u6570\u5b57\u306e\u914d\u5217\u306b\uff11\u3092\u5165\u529b\u3059\u308b\u3002\\n\t\t\t// equals : 2\u3064\u306e\u5909\u6570\u304c\u6301\u3063\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u540c\u4e00\u304b\u5224\u65ad\u3059\u308b\u30e1\u30bd\u30c3\u30c9\\n\t\t\tif (strEzura.equals(\"S\")) {\\n\t\t\t\tcard[0][intSuuji - 1] = 1;\\n\t\t\t} else if (strEzura.equals(\"H\")) {\\n\t\t\t\tcard[1][intSuuji - 1] = 1;\\n\t\t\t} else if (strEzura.equals(\"C\")) {\\n\t\t\t\tcard[2][intSuuji - 1] = 1;\\n\t\t\t} else if (strEzura.equals(\"D\")) {\\n\t\t\t\tcard[3][intSuuji - 1] = 1;\\n\t\t\t}\\n\t\t}\\n\\n\t\t//\u51e6\u7406\u3092\u7d75\u9762\u306e\u6570\uff14\u3001\u30ab\u30fc\u30c9\u306e\u6570\u5b57\uff11\uff13\u56de\u7e70\u308a\u8fd4\u3059\\n\t\tfor (int i = 0; i < 4; i++) {\\n\t\t\tfor (int j = 0; j < 13; j++) {\\n\t\t\t\t//\u914d\u5217\u306b\u5024\u304c\u5165\u3063\u3066\u306a\u3044\u5834\u5408\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\\n\t\t\t\tif (card[i][j] == 0){\\n\t\t\t\t\t//\u7d75\u9762\u306e\u6570\u5b57\u304c0,1,2,3\u3044\u305a\u308c\u304b\u306e\u3068\u304d\u306b\u8868\u793a\u3059\u308b\\n\t\t\t\t\t//\u6570\u5b57\u306e\u305a\u308c\u3092\u8abf\u6574\u3059\u308b\u305f\u3081\uff4a\u306b\uff0b\uff11\u3057\u3066\u8868\u793a\\n\t\t\t\t\tif(i == 0){\\n\t\t\t\t\t\tSystem.out.println(\"S \" + (j + 1));\\n\t\t\t\t\t}else if ( i == 1){\\n\t\t\t\t\t\tSystem.out.println(\"H \" + (j + 1 ));\\n\t\t\t\t\t}else if ( i == 2) {\\n\t\t\t\t\t\tSystem.out.println(\"C \" + (j + 1 ));\\n\t\t\t\t\t}else if ( i == 3) {\\n\t\t\t\t\t\tSystem.out.println(\"D \" + (j + 1 ));\\n\t\t\t\t\t}\\n\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "189", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n    static class FastReader\\n    {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader()\\n        {\\n            br = new BufferedReader(new\\n                    InputStreamReader(System.in));\\n        }\\n\\n        String next()\\n        {\\n            while (st == null || !st.hasMoreElements())\\n            {\\n                try\\n                {\\n                    st = new StringTokenizer(br.readLine());\\n                }\\n                catch (IOException e)\\n                {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt()\\n        {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong()\\n        {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble()\\n        {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine()\\n        {\\n            String str = \"\";\\n            try\\n            {\\n                str = br.readLine();\\n            }\\n            catch (IOException e)\\n            {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        int n = sc.nextInt();\\n        double res = 0;\\n        for(int i = 0 ;i<n;i++)\\n        {\\n            res += 1/ (double)sc.nextInt();\\n        }\\n        System.out.println(1/res);\\n\\n    }\\n}", "target": "120", "substitutes": {"br": ["sr", "ch", "bur", "ab", "body", "orb", "bro", "front", "bc", "Br", "bb", "err", "bh", "bf", "ber", "BR", "cr", "ob", "boot", "r", "db", "gr", "tr", "img", "hr", "be", "ur", "obj", "sp", "arr", "bar", "mr", "src", "cro", "ocr", "bridge", "browser", "bs", "pr", "sb", "raf", "buf", "bt", "lr", "fr", "pl", "fb", "dr", "bl", "rt", "bed", "rb", "b"], "st": ["sw", "ast", "strip", "Str", "sth", "nd", "ct", "art", "sn", "ft", "ust", "ut", "ace", " est", "stress", "ss", "std", "pe", "stop", "cr", "style", "stable", "r", "sta", "pt", "ld", "const", "t", "tr", "stri", "ste", "nt", "e", "be", "p", "sp", "src", "string", "ost", "stack", "pr", "s", "sb", "ST", "rest", "sign", "bt", "l", "sts", "store", "cl", "fr", "sty", "sl", "stage", "struct", "rt", "ist", "est", "bl", "inst", "St"], "str": ["sr", "id", "enc", "inner", "Str", "doc", "line", "err", "cr", "style", "c", "url", "r", "pt", "iter", "STR", "gr", "t", "tr", "stri", "kr", "data", "hr", "p", "sp", "f", "obj", "arr", "pos", "string", "char", "pr", "div", "val", "code", "fr", "cl", "exp", "text", "sl", "ner", "status", "dr", "bl", "b"], "sc": ["sr", "sw", "cont", "ch", "lc", "soc", " Sc", "cer", "ct", "scl", "Sc", " SC", "rs", "bc", "SC", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "osc", "scan", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "ctr", "ocr", "rc", "sche", "ca", "cur", "cs", "cl", "pc", "asc", "mc", "co", "sci"], "n": ["j", "nn", "h", "conn", "nor", "len", "sn", "ns", "d", "nl", "z", "v", "c", "m", "r", "en", "nc", "t", "ln", "mn", "nb", "k", "nt", "un", "e", "number", "p", "dn", "f", "net", "q", "o", "w", "N", "num", "l", "x", "ni", "g", "u", "b"], "res": ["rys", "vals", "cons", "resolution", "reed", "rs", "rem", "err", "ps", "rep", "ress", "resh", "ras", "rus", "r", "out", "gr", "powers", "rows", "re", "nr", "rez", "req", "ret", "rev", "nos", "reg", "ver", "mr", "arr", "result", " Res", "q", "max", "rss", "our", "hes", "val", "pres", "sol", "Res", "ours", "resp", "RES", "results", "x", "rel", "rt", "Rs", "rand"], "i": ["slice", "j", "ri", "pi", "my", "mi", "ip", "ii", "ind", "ix", "abi", "c", "io", "gi", "index", "data", "phi", "e", "p", "fi", "qi", "f", "ji", "q", "ui", "xi", "li", "iu", "it", "multi", "di", "ini", "oi", "ie", "chi", "si", "hi", "info", "ci", "u", "ni", "uri", "mini", "ai", "I"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        int n1 = in.nextInt();\\n        int n2 = in.nextInt();\\n        int sum = 0;\\n        while (n1 <= n2){\\n            if(isPalindrome(n1)){\\n                sum++;\\n            }\\n            n1++;\\n        }\\n        System.out.println(sum);\\n    }\\n\\n    private static boolean isPalindrome(int n1) {\\n        String str = Integer.toString(n1);\\n        StringBuilder sb = new StringBuilder();\\n        sb.append(str);\\n        return sb.reverse().toString().equals(str);\\n    }\\n}", "target": "104", "substitutes": {"in": ["id", "inner", "login", "again", "doc", "gin", "a", "line", "bin", "init", "din", "inc", "err", "cli", "er", "c", "is", "scan", "inside", "r", "out", "con", "input", "ln", "fe", "serv", "data", "p", "n", "ex", "f", "arin", "isin", "IN", "rin", "bis", "inn", "as", "connection", "In", "ini", "s", "fin", "i", "nin", "readable", "log", "kin", "pin", "exec", "ner", "lin", "reader", "buffer", "b", "source", "ins"], "n1": ["N2", "num2", "none", "d5", "sn8", "p2", "d1", "n0", "N1", "iOne", "N8", " none", "sn3", "numone", " n3", "num1", "nOne", "i1", "p1", "NOne", "N0", "sn2", "i2", "n5", " nOne", "i0", "d3", "d2", "num0", "n8", "i3", " n8", "p5", " n5", "N3", "p3", "sn1", "snone", "n3", "None", " n0"], "n2": ["N2", "p02", "n02", "p2", " n02", "n0", "N1", "ntwo", "NTwo", "N02", "v1", "vtwo", "Ntwo", "pTwo", " ntwo", "p1", "N0", "nTwo", "v2", " nTwo", "v0", " n0"], "sum": ["vol", "doc", "su", "len", "cum", "cos", "dev", "unit", "sa", "Sum", "summary", "count", "start", "mem", "match", "miss", "out", "min", "mean", "ass", "key", "cat", "pos", "n", "alpha", "add", "cache", "result", "acc", "zero", "fat", "cur", "average", "coll", "gram", "up", "num", "si", "info", "parse", "weight", "loss", "total", "who", "cost", "size", "um", "scale", "cal"], "str": ["id", "sr", "sc", "Str", "lc", "st", "part", "js", "cr", "stable", "url", "spec", "r", "iter", "sync", "STR", "input", "tr", "stri", "kr", "rev", "obj", "sp", "f", "prev", "br", "string", "char", "cur", "pr", "s", "i", "code", "sol", "fr", "cl", "text", "x", "sl", "dr", "step", "b", "name"], "sb": ["sc", "obb", "sr", "ib", "ab", "sg", "zb", "su", "bg", "cb", "lab", "xb", "sf", "bc", "sa", "builder", "bb", "bh", "ruby", "pb", "bsp", "bf", "usb", "gb", "ob", "ub", "SB", "db", "erb", "nb", "BB", "sp", "mb", "bp", "eb", "src", " eb", "string", "bs", "s", "lb", "bm", "bt", "si", "fb", " SB", "sv", "rb", "b"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tlong n = sc.nextLong();\\n\t\tlong a = sc.nextLong();\\n\t\tlong b = sc.nextLong();\\n\t\tlong count = n/(a+b);\\n\t\tlong rest = n%(a+b);\\n\t\tlong blue = 0;\\n\t\tif(rest < a){\\n\t\t\tblue = (a * count) + rest;\\n\t\t}else {\\n\t\t\tblue = a * (count + 1);\\n\t\t}\\n\t\tSystem.out.println(blue);\\n\t}\\n}", "target": "217", "substitutes": {"sc": ["sw", "enc", "sr", "ch", "cont", "lc", "soc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "sem", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "sub", "ec", "nc", "cc", "sh", "cor", "cus", "core", "cy", "ctx", "sp", "ocr", "rc", "anc", "sche", "cur", "coll", "sb", "cs", "cl", "pc", "sl", "ci", "asc", "cv", "mc", "sci"], "n": ["nn", "ns", "in", "d", "no", "z", "an", "c", "v", "m", "norm", "r", "en", "y", "t", "np", "nb", "k", "nt", "un", "e", "number", "p", "ne", "f", "na", "o", "w", "s", "i", "l", "N", "num", "x", "g", "u", "all", "size"], "a": ["base", "api", "app", "ba", "ab", "aaa", "aa", "sa", "d", "ah", "am", "array", "an", "c", "area", "now", "ac", "y", "ana", "A", "ga", "index", "nt", "ad", "ea", "p", "alpha", "f", "e", "aj", "span", "ca", "as", "na", "va", "w", "s", "i", "act", "gap", "asa", "l", "num", "da", "au", "x", "ae", "u", "all"], "b": ["j", "base", "ib", "h", "ab", "ba", "length", "aa", "d", "bb", "v", "c", "r", "y", "A", "B", "nb", "k", "e", "p", "f", "end", "eb", "br", "bs", "sb", "i", "lb", "l", "num", "x", "g", "u", "rb"], "count": ["id", "base", "loc", "h", "length", "part", "d", "inc", "array", "last", "child", "type", "old", "c", "start", "now", "ac", "current", "Count", "y", "big", "index", "e", "number", "p", "f", "bug", "q", "max", "ca", "code", "l", "num", "x", "patch", "depth", "size"], "rest": ["id", "ast", "base", "api", "app", "ab", "st", "length", "art", "Rest", "part", "rec", "resource", "array", "abc", "head", "start", "c", "feature", "r", "const", "dist", "core", "re", "index", "number", "p", "prev", "arr", "end", "max", "br", "next", "contract", "pad", "ref", "use", "i", "patch", "frac", "x", "bl", "res", "work"], "blue": ["lot", "id", "base", "console", "error", "ba", "ban", "bg", "orange", "check", "bin", "obl", "scope", "force", "yellow", "ruby", "root", "lib", "border", "play", "black", "type", "box", "ob", "ox", "feature", "out", "big", "cy", "bit", "bug", "green", "br", "carry", "large", "color", "fine", "allow", "log", "ignore", "shadow", "block", "bird", "mini", "lin", "Blue", "background", "label"]}}
{"code": "import java.util.*;\\npublic class Main {    \\n    public static void main(String[] args) {\\n        Scanner sc=new Scanner(System.in);\\n        int n=sc.nextInt();\\n        int[] nums=new int[n];\\n        for(int i=0;i<n;i++){\\n            nums[i]=sc.nextInt();\\n        \\n            \\n        }\\n        int output=0;\\n        flag2:while(true){\\n            for(int i=0;i<n;i++){\\n                if(nums[i]>0){\\n                    output++;\\n                    for(int j=0;j<n-i;j++){\\n                        if(nums[i+j]==0){\\n                            \\n                            continue flag2;\\n                        }\\n                        nums[i+j]-=1;\\n                        }\\n                    continue flag2;\\n                        \\n                        \\n                    }\\n                \\n            }\\n            break flag2;\\n            \\n            }\\n        System.out.println(output);\\n        }\\n    \\n            \\n            \\n        \\n        \\n        \\n\\n    }", "target": "77", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "ec", "nc", "sch", "cc", "sh", "cor", "cus", "sp", "ser", "cle", "src", "rc", "system", "anc", "sche", "ca", "cur", "cs", "cl", "pc", "ner", "ci", "asc", "screen", "cv", "mc", "sci"], "n": ["nn", "h", "conn", "len", "sn", "ns", "in", "d", "no", "nl", "z", "v", "c", "m", "norm", "r", "en", "y", "network", "out", "nc", "t", "ln", "nb", "k", "nt", "un", "e", "ne", "p", "number", "f", "dn", "net", "o", "w", "s", "fn", "N", "l", "num", "x", "nan", "u", "size", "b"], "nums": ["ynumpy", " numbers", "Nubs", "enumbers", " numer", "numbers", "cumpy", "cum", "Nems", " nims", "cubs", "nus", "nanumer", "cumbers", "cums", " nems", "Num", "ynims", "nanums", "numer", "rnus", "enums", "rnims", " numpy", "ynum", " nus", "cus", "rnum", "nubs", "nems", "nims", "cems", "cims", "rnums", "Numpy", "nanumpy", "ynumbers", "num", "ynumer", "Nums", "ynums", "enubs", "nanims", "numpy", " num", "Numbers"], "i": ["id", "inner", "api", "ri", "ami", "length", "pi", "I", "in", "mi", "init", "d", "ip", "ii", "ind", "cli", "ori", "v", "io", "ix", "is", "c", "z", "r", "y", "gi", "index", "phi", "e", "p", "anti", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "o", "eni", "di", "ini", "oi", "ie", "yi", "ei", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "fi", "ai", "mini", "b", "source"], "output": ["uni", "console", "left", "exit", "offset", "export", "job", "unit", "display", "Output", "init", "err", "generated", "example", "summary", "information", "child", "four", "stop", "outer", "response", "current", "operation", "out", "input", "progress", "control", "pre", "index", "cut", "number", "expression", "result", "width", "hidden", "module", "image", "sort", "generation", "version", "production", "sequence", "put", "text", "qa", "letter", "success", "complete", "update", "write"], "j": ["ch", "jet", "ja", "J", "part", "js", "ij", "job", "other", "d", "err", "jj", "ii", "bj", "ind", "z", "v", "ix", "c", "jen", "m", "je", "y", "out", "jit", "jl", "jc", "k", "key", "dj", "p", "obj", "qi", "ji", "aj", "ui", "br", "li", "it", "o", "di", "ie", "adj", "l", "si", "uj", "bi", "fr", "x", "jo", "oj", "u", "jp", "b"]}}
{"code": "import java.util.*;\\nimport java.math.BigDecimal;\\nimport java.math.MathContext;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc=new Scanner(System.in);\\n    int n=sc.nextInt();\\n    int d=sc.nextInt();\\n    int[][] x=new int[n][d];\\n    int ans=0;\\n    BigDecimal z=BigDecimal.valueOf(0);\\n    for(int i=0;i<n;i++){\\n      for(int k=0;k<d;k++){\\n        x[i][k]=sc.nextInt();\\n      }\\n      for(int j=0;j<i;j++){\\n        long a=0;\\n        for(int k=0;k<d;k++){\\n          a=a+(x[i][k]-x[j][k])*(x[i][k]-x[j][k]);\\n        }\\n        BigDecimal aa=BigDecimal.valueOf(a);\\n        aa=sqrt(aa,5);\\n        BigDecimal b=aa.setScale(0,BigDecimal.ROUND_DOWN);\\n        b=aa.subtract(b);\\n        if(b.compareTo(z)==0){\\n          ans++;\\n        }\\n      }\\n    }\\n    System.out.println(ans);\\n  }\\n\\n  public static BigDecimal sqrt(BigDecimal a, int scale){\\n    BigDecimal x = new BigDecimal(Math.sqrt(a.doubleValue()), MathContext.DECIMAL64);\\n    if(scale < 17) return x;\\n    BigDecimal b2 = new BigDecimal(2);\\n    for(int tempScale = 16; tempScale < scale; tempScale *= 2){\\n      x = x.subtract(x.multiply(x).subtract(a).divide(x.multiply(b2), scale, BigDecimal.ROUND_HALF_EVEN));\\n    }\\n    return x;\\n  }\\n}", "target": "59", "substitutes": {"sc": ["sw", "sr", "ch", "loc", " Sc", "sys", "sk", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ck", "nc", "sch", "cc", "sh", "cus", "sp", "ser", "cle", "src", "rc", "system", "anc", "sche", "ca", "na", "cur", "sb", "cs", "cl", "pc", "ner", "ci", "asc", "cv", "mc", "sv", "sci"], "n": ["nn", "h", "nor", "len", "sn", "ns", "in", "no", "an", "c", "ny", "m", "r", "y", "en", "network", "nc", "t", "ln", "nb", "nt", "cn", "e", "ne", "p", "dn", "f", "net", "o", "w", "s", "rn", "N", "l", "num", "ner", "u", "ni"], "d": ["id", "nd", "h", "cd", "in", "dd", "ind", "c", "m", "t", "dir", "dt", "ds", "dim", "e", "ad", "p", "dn", "f", "df", "dc", "dat", "q", "sd", "D", "o", "di", "w", "s", "l", "dx", "da", "dh", "du", "u", "dy"], "x": ["one", "h", "yx", "in", "xy", "m", "xml", "na", "w", "val", "sex", "X", "xa", "xes", "php", "cross", "pe", "is", "plus", "xf", "xs", "A", "index", "data", "e", "alpha", "f", "xi", "xp", "u", "work", "px", "wx", "xx", "rx", "ux", "xb", "ix", "abc", "c", "y", "value", "p", "xc", "max", "wa", "ax", "lex", "id", "fx", "array", "xt", "xxx", "v", "tx", "nex", "shape", "t", "ex", "ctx", "q", "as", "image", "o", "s", "code", "xe", "l", "dx", "g"], "ans": ["can", "aces", "ani", "ats", " means", "cons", "errors", "lan", "ons", "ns", "sk", "AN", "runs", "aus", "atan", "ss", "ions", " signs", "amps", "an", "asts", "scan", "ams", "ars", "ros", "ras", "ana", "xs", "os", "cas", "es", "offs", "ds", "flags", "ids", "ks", "span", "ANS", "na", "as", "ians", "s", "ays", "cs", "ends", " errors", "ches", "ants", "vs", "eps", "types", "ann", "ls", "ins"], "z": ["nz", "az", "xx", "gz", "sa", "ii", "iz", "xxx", "v", "c", "m", "y", "ez", "t", "e", "zone", "p", "alpha", "f", "q", "w", "s", "zz", "Z", "zen", "l", "za", "ze", "code", "zi", "X", "g", "u", "zip"], "i": ["id", "ri", "pi", "I", "in", "mi", "ii", "ip", "ind", "io", "ix", "c", "is", "v", "ori", "m", "y", "gi", "e", "p", "f", "qi", "ji", "ki", "ik", "q", "ui", "xi", "li", "iu", "it", "o", "di", "ini", "s", "ie", "oi", "yi", "l", "si", "bi", "info", "zi", "ci", "u", "ni", "uri", "fi", "ai"], "k": ["id", "ku", "pp", "ch", "ijk", "h", "sk", "ek", "kick", "dk", "kh", "jj", "tk", "ko", "kn", "v", "c", "ok", "y", "ck", "ack", "uk", "gh", "kr", "ak", "key", "kat", "p", "e", "ki", "ik", "q", "ks", "K", "ky", "it", "ph", "km", "o", "w", "kid", "kk", "kw", "kin", "mk", "ke", "kg", "u", "g", "unk", "isk", "work"], "j": ["ijk", "h", "ja", "J", "pi", "js", "ij", "jj", "ii", "v", "c", "m", "r", "y", "jl", "jc", "ak", "e", "key", "p", "f", "qi", "ji", "aj", "ik", "q", "li", "it", "o", "ie", "l", "uj", "jo", "u", "jp"], "a": ["aw", "ba", "ab", " fa", "fa", "ma", "aaa", "aba", "sa", "ata", "am", "array", "ao", "AA", "an", "area", "c", "m", "ac", "ia", "ana", "this", "y", "A", "aaaa", "value", "ga", "mA", "ad", "ea", "p", "e", "alpha", "f", "aj", "ar", "la", "wa", "ca", "va", "as", "na", "mac", "asa", "za", "l", "da", "au", "qa", "ae", "u", "xa", "ai", "to", "sta"], "aa": ["aw", "ba", "ab", "oa", "asha", "fa", "ma", "aaa", "aba", "sa", "ave", "bb", "apa", "ta", "AA", "ppa", "c", "area", "ac", "r", "A", "aaaa", "ga", "lambda", "Na", "ea", "pa", "alpha", "arr", "ava", "la", "wa", "ca", "va", "na", "ya", "za", "da", "au", "AAA", "qa", "ae", "af", "xa", "aka", "ai", "lla"], "b": ["base", "ba", "ab", "h", "cb", "aaa", "bc", "book", "bb", "bf", "v", "c", "ob", "r", "y", "db", "B", "nb", "beta", "e", "be", "p", "f", "ca", "o", "sb", "s", "l", "bi", "fb", "ae", "g", "u", "rb"], "scale": ["slice", "sample", "base", "axis", "co", "ale", "pi", "cos", "Scale", "unit", "cale", "scope", "se", "grade", "ales", "delay", "pe", "type", "area", "seed", "scan", "shift", "shape", "min", "mega", "fee", "value", "beta", "e", "p", "alpha", "mode", "zero", "row", "two", "adjust", "sort", "sign", "range", "radius", "version", " Scale", "si", "exp", "parse", "ape", "rot", "size", "transform", "rate", "order"], "b2": ["ab", "cb", "fball", " b1", "ctwo", "btwo", "bb", "atwo", "wb1", "c1", "f1", "a1", "f2", "wb2", "b1", " bball", "jobtwo", "bball", "a2", "job1", "job2", "c2", "jobb", "wbball"], "tempScale": [" temporaryScale", "tempSize", "porarySquare", "tempscale", " tempRound", "tempRoll", "empSize", "empScale", "TempScale", "tmpRoll", "empSquare", " tempZone", "TempSquare", " temporaryRound", " tempRoll", "tempServer", " temporaryscale", "tmpRound", "tempRound", "empServer", "poraryServer", "tempShift", "tempSquare", "tempZone", "TempShift", "empscale", "tmpZone", " temporaryZone", "tmpScale", "poraryScale", "porarySize", " temporarySquare", "TempSize", "poraryscale", "empShift", " temporaryRoll", " temporaryServer", "poraryShift"]}}
{"code": "import java.util.*;\\nimport java.io.BufferedReader; \\nimport java.io.IOException; \\nimport java.io.InputStreamReader; \\n\\npublic class Main{\\n\\n    static int comb(int m,int n)\\n    {\\n        int res=1;\\n\\n        if(n>m-n)\\n            n=m-n;\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            res*=(m-i);\\n            res/=(i+1);\\n        }\\n        return res;\\n    }\\n    public static void main(String[] args) {\\n        \\n        Scanner in = new Scanner(System.in);\\n\\n        int m= in.nextInt();\\n        int n = in.nextInt();\\n\\n        int total_ways=0;\\n\\n        if(m>=2)\\n            total_ways+=comb(m,2);\\n\\n        if(n>=2)\\n            total_ways+=comb(n,2);\\n\\n        System.out.println(total_ways);\\n    }\\n}\\n", "target": "49", "substitutes": {"m": ["j", "one", "h", "a", "mu", "dm", "fm", "mi", "d", "am", "om", "md", "sm", "v", "an", "c", "z", "im", "r", "y", "mn", "k", "e", "machine", "p", "wm", "f", "ym", "pm", "mm", "cm", "module", "hm", "multi", "o", "km", "M", "w", "s", "bm", "l", "num", "N", "x", "em", "ms", "u", "all", "mc", "b"], "n": ["j", "one", "nn", "sn", "ns", "d", "no", "nl", "v", "z", "c", "an", "ny", "r", "en", "y", "network", "out", "nit", "nc", "t", "ln", "mn", "nb", "k", "nt", "un", "ne", "e", "p", "dn", "f", "cn", "net", "number", "pn", "na", "o", "w", "M", "s", "N", "l", "num", "nm", "x", "ni", "u", "all", "b", "name"], "res": ["id", "vals", "details", "resolution", "ons", "js", "rs", "init", "err", "ps", "ress", "resh", "is", "ras", "r", "rates", "out", "os", "gr", "powers", "es", "rows", "ows", "re", "rez", "nr", "index", "req", "ret", "rev", "reg", "mr", "ries", "result", "max", "cells", " Res", "rc", "css", "blocks", "reset", "range", "acts", "cs", "pres", "ris", "works", "Res", "vs", "RES", "results", "eps", "resp", "ms", "Rs", "rand", "ins"], "i": ["id", "j", "one", "ri", "pi", "mu", "mi", "init", "d", "ip", "ii", "z", "v", "io", "c", "ix", "ori", "start", "r", "gi", "index", "phi", "e", "p", "fi", "qi", "f", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "eni", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "ti", "ai", "I", "vi"], "in": ["token", "inner", "login", "sin", "again", "conn", "a", "line", "or", "bin", "fa", "inas", "query", "d", "user", "inc", "din", "init", "cli", "er", "c", "scan", "is", "inside", "r", "out", "con", "input", "re", "data", "p", "ex", "f", "arin", "isin", "win", "IN", "rin", "inn", "inf", "as", "connection", "pass", "In", "image", "ini", "s", "world", "readable", "nin", "kin", "info", "pin", "x", "g", "lin", "socket", "raw", "reader", "b", "source", "ins"], "total_ways": [" total_roads", " total_thirds", " total_cross", "total_thirds", "total_how", " total_rooms", "total_way", "total_roads", " total_way", "total67roads", "total_rooms", "total67cross", "total67way", "total67ways", " total_flows", " total_how", "total_cross", "total_flows"]}}
{"code": "\\n\\nimport java.io.IOException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\\n\t\tint sumsum = 0;\\n\t\tfor(int i = 1; i <= n; i++){\\n\t\t\tString num = Integer.toString(i);\\n\\n\t\t\tint sum = 0;\\n\t\t\tfor(int j = 0; j < num.length(); j++){\\n\t\t\t\tsum += num.charAt(j) - '0';\\n\t\t\t}\\n\\n\t\t\tif(sum >= a && sum <= b){\\n\t\t\t\tsumsum += i;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sumsum);\\n\\n\t}\\n}\\n", "target": "212", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint a[] = new int[n];\\n\t\tfor(int j = 0; j < n; j++){\\n\t\t\ta[j] = scan.nextInt();\\n\t\t}\\n\t\tscan.close();\\n\t\tInsertionSort(a, n);\\n\t}\\n\\n\tstatic void InsertionSort(int A[], int N){\\n\t\tprint(A);\\n\t\tfor(int i = 1; i <= N - 1; i++){\\n\t\t\tint v = A[i];\\n\t\t\tint j = i - 1;\\n\t\t\twhile(j >= 0 && A[j] > v){\\n\t\t\t\tA[j + 1] = A[j];\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\tA[j + 1] = v;\\n\t\t\tprint(A);\\n\t\t}\\n\t}\\n\\n\tstatic void print(int A[]){\\n\t\tfor(int k = 0; k < A.length; k++){\\n\t\t\tif(k == A.length - 1){\\n\t\t\t\tSystem.out.println(A[k]);\\n\t\t\t}else{\\n\t\t\t\tSystem.out.print(A[k] + \" \");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "69", "substitutes": {"scan": ["sc", "can", "slice", "look", "nn", "conn", "check", "query", "se", "in", "err", "ry", "server", "nl", "connect", "an", "sync", "r", "en", "out", "search", "read", "clean", "con", "network", "ln", "stat", "gen", "chan", "cat", "san", "watch", "walk", "ans", "bug", "span", "ser", "system", "row", "na", "pan", "feed", "run", "skip", "filter", "l", "Scan", "store", "ignore", "parse", "ner", "ann", "all", "sign", "reader", "sci"], "n": ["nn", "h", "conn", "Ns", "len", "sn", "ns", "in", "d", "no", "count", "z", "c", "m", "r", "en", "y", "nc", "t", "mn", "nb", "nt", "ne", "number", "p", "e", "f", "net", "inn", "o", "w", "s", "fn", "l", "num", "x", "ni", "u", "all", "size", "b"], "a": ["ba", "ab", "ma", "aaa", "aa", "sa", "ata", "am", "array", "z", "an", "area", "c", "abs", "ac", "y", "ana", "ga", "data", "ea", "p", "alpha", "aj", "ans", "span", "ar", "la", "wa", "va", "as", "na", "o", "ama", "da", "au", "x", "qa", "ae", "auto", "u", "ai", "b"], "j": ["jet", "h", "ja", "J", "part", "js", "ij", "jan", "job", "d", "jj", "ii", "ind", "z", "ix", "je", "jen", "y", "pt", "jit", "jl", "jc", "key", "e", "dj", "ion", "obj", "on", "qi", "ji", "aj", "p", "q", "f", "li", "o", "pr", "ie", "adj", "l", "si", "uj", "x", "jo", "oj", "ni", "u", "jp", "size", "b"], "A": ["Action", "Input", "Ma", "AST", "T", "Array", "JA", "Points", "API", "D", "LA", "X", "P", "As", "An", "Args", "Each", "The", "And", "DATA", "Area", "AS", "File", "H", "App", "Abs", "Parts", "alpha", "AV", "O", "CA", "Ar", "NA", "AW", "M", "Something", "Address", "V", "Average", "Complete", "Function", "Files", "J", "F", "E", "First", "All", "MA", "Ab", "Y", "This", "L", "History", "S", "Adam", "au", "Bar", "I", "Auth", "array", "AP", "AA", "Alpha", "B", "Answer", "Ha", "K", "C", "Info", "At", "Product", "U", "Java", "There", "New", "If", "Content", "G", "None"], "N": ["Q", "Ni", "J", "Ns", "F", "E", "NL", "Num", "H", "Count", "T", "B", "NS", "R", "L", "K", "Len", "C", "O", "D", "M", "S", "Z", "V", "X", "P", "Size", "I", "G"], "i": ["id", "ri", "pi", "I", "mi", "init", "ip", "ii", "ind", "z", "ix", "io", "is", "start", "c", "y", "gi", "index", "e", "p", "f", "qi", "ji", "ik", "ui", "xi", "li", "iu", "di", "ini", "ie", "oi", "l", "si", "bi", "info", "x", "ci", "u", "ni", "ti", "ai", "b", "vi"], "v": ["vd", "vp", "vals", "ve", "uv", "h", "I", "d", "ii", "z", "c", "ov", "iv", "m", "r", "y", "lv", "e", "p", "f", "va", "o", "w", "val", "l", "vs", "V", "x", "sv", "u", "b", "vi"], "k": ["id", "ku", "ch", "ijk", "h", "sk", "kl", "ek", "kick", "kh", "ko", "group", "kn", "z", "c", "ok", "y", "ck", "uk", "key", "ak", "kat", "p", "e", "f", "ki", "K", "ik", "q", "ks", "ky", "ph", "km", "o", "th", "kid", "kw", "kk", "l", "mk", "ke", "u", "unk", "g", "b", "work"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    final Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    private void run() {\\n        long n = sc.nextLong();\\n\\n        long ans = Long.MAX_VALUE;\\n        for (long i = 1; i*i <= n; i++) {\\n            if (n % i == 0) {\\n                ans = Math.min(i-1 + n/i-1, ans);\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n\\n", "target": "157", "substitutes": {"sc": ["lc", "soc", " Sc", "or", "Sc", " SC", "bc", "se", "SC", "scope", "lib", "uc", "cr", "esc", "sq", "c", "scan", "ars", "sync", "this", "ec", "cc", "sec", "ctx", "sp", "acc", "src", "rc", "system", "ca", "sb", "cs", "si", "cl", "self", "pc", "exp", "ner", "parser", "ci", "asc", "mc", "config", "sci"], "n": ["j", "nn", "Ns", "a", "len", "nu", "ns", "d", "no", "nl", "z", "an", "c", "v", "m", "r", "en", "y", "nc", "ln", "mn", "min", "nb", "nr", "k", "nt", "un", "ne", "number", "p", "cn", "f", "e", "net", "pn", "o", "w", "s", "N", "num", "l", "x", "nan", "ci", "ni", "u", "size", "b"], "ans": ["can", "rules", "ani", "nn", "ats", "a", "cons", "errors", "len", "lan", "ons", "ns", "AN", "aus", "atan", "ss", "ions", "lang", "nas", "asin", "an", "ras", "ars", "ana", "os", "aned", "ln", "cas", "anon", "ents", "ds", "san", "ano", "span", "anc", "ANS", "na", "as", "ians", "s", "cs", "ants", "eps", "anes", "nan", "ni", "ann", "ls", "annot", "ins"], "i": ["id", "slice", "j", "ri", "line", "length", "pi", "mu", "in", "mi", "d", "ii", "count", "z", "v", "ix", "io", "start", "m", "c", "abi", "y", "min", "gi", "index", "k", "phi", "e", "number", "p", "fi", "f", "qi", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "ti", "uri", "ai", "mini", "I"]}}
{"code": "/*\\n\tsubmission # - User: herp_sy\\n\thttps://atcoder.jp/contests/\\n*/\\n\\nimport java.util.*;\\nimport java.util.Collections; // sorting use\\nimport java.io.*;\\nimport static java.lang.System.*;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tint a,b;\\n\t\tint k;\\n\t\tScanner sc = new Scanner(System.in);\\n\t\ta = sc.nextInt();\\n\t\tb = sc.nextInt();\\n\t\tk = (a + b) / 2;\\n\\n\t\tif(Math.abs(k - a) == Math.abs(k - b))\tout.println(k);\\n\t\telse out.println(\"IMPOSSIBLE\");\\n\t}\\n}\\n", "target": "31", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s;\\n        s = sc.next();\\n        char str[] = s.toCharArray();\\n        str[3] = '8';\\n        System.out.println(str);\\n        sc.close();\\n    }\\n}\\n", "target": "18", "substitutes": {"sc": ["sw", "sr", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sec", "sh", "cus", "core", "sp", "dc", "rc", "anc", "sche", "cur", "sb", "cs", "cl", "pc", "ner", "sl", "ssh", "ci", "asc", "cv", "sci"], "s": ["gs", "syn", "fs", "su", "ns", "rs", "se", "in", "d", "ss", "ps", "v", "sq", "c", "is", "sync", "r", "os", "t", "strings", "es", "ds", "e", "p", "n", "ses", "f", "ans", "string", "ws", "bs", "o", "w", "sb", "i", "cs", "S", "l", "si", "sl", "u", "ls", "sv", "ins"], "str": ["id", "sr", "enc", "ch", "strip", "Str", "st", "line", "rs", "in", "d", "err", "ss", "cr", "c", "spec", "r", "sync", "out", "iter", "STR", "input", "t", "tr", "stri", "data", "pos", "p", "sp", "arr", "f", "obj", "n", "br", "string", "char", "pr", "cs", "code", "l", "fr", "x", "sl", "text", "block", "dr", "letter", "list", " arr", "name"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main{\\n\\n\\n    public static void main(String[] args) {\\n        FastReader in = new FastReader();\\n\\n        String s = in.nextLine();\\n        int cnt[] = new int[2];\\n        for (int l = 0; l < s.length(); ++l){\\n            cnt[(int)s.charAt(l) - (int)'0'] ++;\\n        }\\n        System.out.println(Math.min(cnt[0], cnt[1])*2);\\n\\n\\n\\n\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n}", "target": "14", "substitutes": {"in": ["inner", "login", "doc", "conn", "line", "bin", "rec", "resource", "d", "init", "err", "din", "inc", "cli", "io", "c", "is", "ac", "r", "out", "read", "input", "ln", "min", "data", "isin", "n", "ex", "f", "win", "src", "IN", "rin", "inn", "inf", "as", "In", "ini", "fin", "i", "readable", "log", "cl", "lin", "bl", "stream", "reader", "b", "source", "ins"], "s": ["gs", "fs", "su", "ings", "ns", "rs", "d", "services", "fts", "ss", "ps", "sets", "c", "is", "m", "abs", "r", "os", "xs", "t", "strings", "es", "qs", "ds", "e", "p", "n", "ses", "f", "ssl", "ans", "string", "ws", "as", "o", "b", "hs", "w", "sb", "i", "its", "cs", "S", "si", "words", "sl", "u", "ls", "sv", "ts", "ins"], "cnt": ["pNT", " cNT", "lcNT", "Cct", "Cwd", "nNT", "lcnn", "ppt", " count", " cwd", "lcount", "pct", "count", " cant", " cnn", "Count", "Crt", "lcwd", "crt", "Cnn", "cant", "lcct", "Cant", "nnt", "lcnt", "CNT", "cwd", "knt", " cpt", "cnn", "cpt", "cct", "nant", "cNT", "Cnt", "kpt", "pnt", "kct", "nrt", "kNT", " cct", " crt"], "l": ["j", "lc", "h", "lp", "lf", "length", "len", "kl", "d", "nl", "z", "v", "c", "r", "ol", "t", "ln", "ul", "dl", "il", "lv", "e", "p", "n", "L", "f", "ly", "rl", "li", "o", "w", "i", "lb", "el", " L", "lr", "hl", "pl", "sl", "u", "lin", "bl", "ls", "ll", "ell", "fl", "b"], "charAt": ["characterBefore", "characterAt", "startat", "characterSet", "charSet", "letterBefore", "characterat", "letterAt", "startBefore", "charat", "startAt", "charBefore", "letterSet", "letterat", "startSet"], "br": ["sr", "ler", "cb", "plug", "bro", "bc", "Br", "bb", "err", "bh", "ber", "BR", "cr", "r", "db", "gr", "tr", "fe", "hr", "be", "ur", "obj", "p", "sp", "arr", "mr", "bar", "ver", "vr", "src", "result", "ctr", "bridge", "cro", "browser", "pr", "sb", "buf", "rest", "bt", "bm", "lr", "fr", "brush", "pl", "fb", "dr", "bl", "rt", "rb", "b"], "st": ["sc", "sw", "ast", "sr", "nd", "sth", "ct", "ft", "sn", "se", "ust", "ut", " est", "ss", "pe", "std", "cr", "style", "start", "r", "sta", "pt", "STR", "ld", "t", "tr", "stri", "sh", "fe", "ste", "nt", "e", "be", "p", "sp", "src", "string", "ost", "stack", "b", "pr", "sb", "ST", "rest", "bt", "sts", "fr", "cl", "store", "sl", "stage", "struct", "bl", "ist", "est", "rt", "inst", "St"], "str": ["sr", "enc", "j", "Str", "doc", "line", "part", "err", "z", "v", "c", "url", "r", "out", "pt", "STR", "iter", "t", "tr", "strings", "data", "pre", "hr", "obj", "n", "sp", "f", "arr", "pos", "p", "result", "string", "char", "pass", "pr", "div", "fr", "exp", "text", "sl", "dr", "bl", "b", "name"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        AChangingACharacter solver = new AChangingACharacter();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class AChangingACharacter {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int n = in.nextInt();\\n            int k = in.nextInt();\\n            String s = in.next();\\n\\n            String temp = \"\";\\n\\n            String a, b, c;\\n            if (k - 1 >= 1)\\n                a = s.substring(0, k - 1);\\n            else\\n                a = temp;\\n\\n            if (k + 1 <= n)\\n                b = s.substring(k, n);\\n            else\\n                b = temp;\\n\\n            c = s.substring(k - 1, k);\\n\\n            out.println(a + c.toLowerCase() + b);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public String nextString() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                if (Character.isValidCodePoint(c)) {\\n                    res.appendCodePoint(c);\\n                }\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public String next() {\\n            return nextString();\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void print(Object... objects) {\\n            for (int i = 0; i < objects.length; i++) {\\n                if (i != 0) {\\n                    writer.print(' ');\\n                }\\n                writer.print(objects[i]);\\n            }\\n        }\\n\\n        public void println(Object... objects) {\\n            print(objects);\\n            writer.println();\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n    }\\n}\\n\\n", "target": "71", "substitutes": {"inputStream": ["currentstream", " inputInterface", "currentStream", " inputstream", " inputSteam", "outputstream", "inputThread", "outputSteam", " inputThread", "inputstream", "Inputstream", "inputSteam", "currentSteam", "inputInterface", "InputSteam", "InputStream", "InputInterface", "outputThread", "currentInterface", "InputThread"], "outputStream": ["OutputForm", "outputWriter", "inputForm", "OutputWriter", "resourceWriter", "outputSteam", "resultStreamer", "resultSteam", "resourceSteam", "OutputStream", "outputForm", "inputSteam", "inputStreamer", "resultWriter", "resultStream", "OutputSteam", "resourceStream", " outputForm", "inputWriter", " outputWriter", " outputSteam", "resourceStreamer", "outputStreamer"], "in": ["id", "path", "inner", "sin", "again", "login", "conn", "gin", "line", "bin", "part", "cin", "resource", "init", "din", "inc", "err", "user", "arg", "io", "er", "inside", "scan", "url", "ac", "is", "r", "this", "read", "con", "request", "input", "min", "data", "gen", "isin", "win", "IN", "inn", "inf", "ic", "it", "connection", "image", "In", "ini", "up", "nin", "val", "version", "l", "log", "info", "pin", "exec", "x", "diff", "g", "lin", "reader", "source", "ins", "work"], "out": ["inner", "again", "outside", "page", "table", "server", "process", "client", "OUT", "word", "point", "net", "w", "up", "exec", "x", "output", "gen", "list", "path", "outs", "line", "user", "inc", "io", "data", "string", "window", "exp", "write", "copy", "name", "error", "conn", "comment", "job", "scope", "init", "at", "call", "sync", "p", "problem", "off", "connection", "Out", "buffer", "object", "console", "pool", "file", "exit", "bin", "err", "arg", "v", "outer", "clean", "session", "ex", "obj", "bar", "cache", "wr", "o", "image", "parent", "log", "to"], "solver": ["solution", "ssolver", "ssolution", "ssolving", "setsolving", "setsolution", "setsolve", "Solutions", "Solve", "ssolutions", "solve", "solving", "ssolve", "Solution", "solutions", "Solver", "Solving", "setsolver"], "testNumber": [" trialNum", " sequencenumber", " trialnumber", "testnumber", " testInteger", " testnumber", " sequenceNum", " testNum", "testInteger", " sequenceInteger", " trialInteger", "testNum"], "n": ["j", "nn", "Ns", "sn", "ns", "d", "no", "nl", "v", "z", "m", "y", "en", "nc", "mn", "nb", "nr", "ng", "nt", "e", "ne", "p", "f", "net", "q", "pn", "o", "w", "N", "num", "l", "x", "ni", "u", "g", "size"], "k": ["id", "ku", "j", "h", "length", "sk", "ek", "kick", "d", "dk", "ko", "kn", "z", "v", "m", "spec", "ok", "y", "ck", "ak", "key", "p", "f", "ks", "K", "q", "ik", "o", "km", "w", "kid", "kw", "N", "num", "cl", "l", "mk", "ke", "x", "g", "u", "size"], "s": ["gs", "fs", "sg", "su", "ings", "ns", "js", "services", "ss", "v", "is", "abs", "r", "parts", "y", "xs", "os", "t", "es", "strings", "qs", "ses", "p", "comments", "f", "ssl", "string", "bis", "ws", "times", "as", "sb", "S", "l", "si", "words", "sl", "tests", "g", "u", "ls", "your", "sv", "ts", "source"], "temp": ["cont", "enc", "path", "base", "lc", "single", "wrap", "str", "empty", "Temp", "template", "default", "v", "content", "style", "extra", "fake", "txt", "now", "emp", "tc", "current", "z", "clean", "iter", "input", "t", "data", "white", " tmp", "p", "porary", "cache", "tem", "tmp", "test", "cur", "w", " temporary", "stable", "hex", "output", "copy", "buffer", "source"], "a": ["api", "ba", "ab", "oa", "fa", "aaa", "aa", "sa", "ata", "am", "an", "area", "ac", "A", "ga", "ada", "data", "ad", "e", "p", "alpha", "f", "pa", "ea", "la", "wa", "va", "as", "ca", "na", "ama", "l", "da", "au", "qa", "ae", "auto", "u"], "b": ["wb", "base", "ba", "ab", "cb", "h", "bin", "abb", "bc", "aa", "xb", "d", "bb", "pb", "bf", "z", "v", "ob", "ac", "r", "y", "db", "B", "e", "be", "p", "f", "eb", "ca", "bs", "o", "sb", "lb", "l", "bi", "fb", "bd", "u", "g", "rb"], "c": ["sc", "cu", "enc", "cf", "lc", "ab", "cb", "h", "ct", "bc", "aa", "d", "count", "z", "v", "cr", "m", "ac", "r", "con", "ec", "y", "nc", "cc", "cn", "e", "cat", "p", "cy", "f", "unc", "xc", "dc", "rc", "cm", "ca", "C", "cur", "o", "col", "cs", "code", "l", "pc", "ci", "u", "cp", "mc", "co"], "stream": ["sw", "port", "open", "Stream", "object", "path", "pool", "speed", "file", "document", "body", "form", "message", "model", "resource", "forward", "http", "round", "engine", "mount", "server", "method", "client", "wrapper", "level", "response", "transform", "host", "this", "clean", "input", "control", "channel", "pipe", "f", "context", "ssl", "track", "string", "system", "feed", "window", "stack", "trans", "w", "per", "view", "put", "handler", "socket", "output", "loop", "reader", "buffer", "each", "source"], "buf": ["Buffer", "wb", "cf", "pool", "bag", "cb", "bg", "buffer", "bin", "bc", "conv", "flush", "array", "bh", "bb", " bu", "fd", "bf", "uc", " vec", "rb", " buff", "mem", " aux", "db", "img", "Buff", "data", " buffer", "cat", "batch", "ctx", "queue", "bp", "fab", "br", "cap", "rc", "la", "tmp", "seq", "blocks", "pad", "buff", "uf", "ff", "fb", "bd", "cv", "vec"], "curChar": ["CurChar", "perchar", "CurCh", " curchar", "surByte", "perCh", "surCh", "curCor", "perChar", " curCharacter", "CurCor", "perCharacter", "constCor", "surchar", "serChar", "curchar", "serByte", "constchar", " curByte", "Curchar", "curCh", "constChar", " curCor", "CurCharacter", "serCh", "constCharacter", "surChar", " curCh", "serchar", "CurByte", "surCharacter", "curCharacter", "curByte"], "numChars": ["numCharars", " numChats", "numColarts", " numCHars", "numChaks", "numchaks", "numChARS", "maxChards", "numChats", "numCaks", "numCarts", "numCats", "numCHARS", " numchases", " numchats", " numchars", "numchards", " numChARS", "numCARS", "numCards", " numChards", " numchARS", "numCharts", "numCHarts", "numchases", " numCharts", " numCHARS", "numColars", "numChases", "maxChars", " numCars", "numCHases", "numCharases", "maxchards", " numChases", "numColaks", "numCharARS", "maxchaks", "maxChARS", " numCats", "numColases", " numCHarts", "maxchARS", "numColats", "numcharts", "numColARS", " numcharts", "numCHards", " numCases", "numchats", " numCarts", "numCHars", "maxchars", "numCHats", "numchars", "numCars", " numCHards", "numChards", "numCases", "numCharats", "maxChaks", "numchARS", "numColards"], "filter": ["ler", "fil", "file", "ters", " pattern", "bb", " filtered", "sel", "ac", "this", "fp", "Filter", "func", "p", "f", " filtering", " filters", "acl", "fac", "pass", " Filter", "pattern", "mask", "handler", "null", "buffer", "fl", "bis"], "next": ["iterator", "Next", "send", "page", "last", "default", "head", "start", "pop", "now", "current", "iter", "read", "sub", "shift", "choice", "data", "prev", "end", "cur", "skip", "readable", "parse", "reverse", "random", "first", "get"]}}
{"code": "\\nimport java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[]args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tchar []ch = scan.next().toCharArray();\\n\t\tint count = 0 ;\\n\t\tfor(int i = 1 ; i<ch.length ; i++) {\\n\t\t\tif(ch[i]==ch[i-1]) {\\n\t\t\t\tcount++;\\n\t\t\t\tif(ch[i-1] == '0')\\n\t\t\t\t\tch[i] = '1';\\n\t\t\t\telse\\n\t\t\t\t\tch[i] = '0' ;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n", "target": "146", "substitutes": {"scan": ["sc", "can", "inner", "app", "nn", "check", "query", "util", "se", "in", "server", "connect", "an", "start", "sync", "iter", "en", "out", "search", "read", "stat", "clean", "con", "gen", "chan", "cat", "n", "win", "watch", "walk", "span", "car", "run", "skip", "conf", "l", "Scan", "ignore", "parse", "ner", "print", "g", "ann", "reader", "serv"], "ch": ["ich", "inch", "chu", "enc", "cmp", "unch", "cha", "CH", "loc", "form", "length", "cho", "wh", "array", "ach", "bh", "cand", "che", "Ch", "c", "chn", "cmd", "sch", "ce", "cor", "sh", "anch", "gh", "qu", "cht", "chan", "channel", "p", "arch", "ctx", "cher", "q", "rc", "char", "ky", "ph", "cur", "coll", "zh", "ech", "conf", "buff", "col", "th", "cs", "chi", "code", "ches", "el", "cl", "chart", "ci", "cp", "tch"], "count": ["id", "base", "counter", "check", "length", "len", "err", "ind", "limit", "child", "last", "type", "level", "c", "start", "match", "Count", "current", "core", "index", "key", "number", "p", "n", "f", "cache", "char", "found", "low", "coll", "cur", "col", "div", "parent", "code", "keep", "num", "sum", "log", "info", "weight", "depth", "size", "list", "b", "total"], "i": ["id", "slice", "j", "lc", "api", "h", "length", "pi", "part", "mu", "in", "d", "init", "mi", "ii", "z", "v", "io", "c", "ix", "start", "y", "t", "gi", "index", "data", "k", "phi", "key", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "b", "di", "ini", "oi", "ie", "l", "si", "bi", "info", "x", "ci", "diff", "u", "ti", "uri", "fi", "ai", "I", "name"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String args[]){\\n    \tScanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n      \\n        int[] A = new int[N];\\n        for(int i = 0; i < N; i++){\\n            A[i] = scanner.nextInt();\\n        }\\n\t\t\\n        int max_first = 0;\\n        int max_second = 0;\\n        int count_max_first = 0;\\n      \\n        for(int i = 0; i < N; i++){\\n            if(A[i] > max_first){\\n                max_first = A[i];\\n            }\\n        } \\n      \\n        for(int i = 0; i < N; i++){\\n            if(A[i] > max_second && A[i] != max_first){\\n                max_second = A[i];\\n            } else if(A[i] == max_first) {\\n                count_max_first++;\\n            }\\n        } \\n      \\n        if(count_max_first > 1){\\n            max_second = max_first;\\n        }\\n      \\n        for(int i = 0; i < N; i++){\\n            if(A[i] == max_first){\\n                System.out.println(max_second);\\n            } else {\\n                System.out.println(max_first);\\n            }\\n        } \\n    }\\n}", "target": "142", "substitutes": {"scanner": [" Scanner", "scaner", "nerer", "Scanner", "scanener", "nerker", "Scanener", "canter", "analyner", " Scaner", "caner", "nerener", "Scaner", "analyer", "Scanker", "nerner", "Scanter", "analyener", " Scann", "scanker", "Scann", "scann", "canker", "canner", " Scanter", "cann", "scanter", "analyker", "canener"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "E", "NM", "No", "Part", " n", "NB", "Num", "Count", "H", "network", "Node", "T", "CNN", "B", "Y", "NT", "Na", "Nat", "NS", "n", "R", "L", "K", "NR", "Len", "C", "O", "NA", "D", "MN", "M", "Z", "S", "X", "V", "NN", "P", "Size", "I"], "A": ["Action", "Ma", "Input", "T", "Array", "API", "D", "In", "LA", "X", "P", "As", "An", "Next", "Args", "Result", "Sum", "The", "Area", "Index", "H", "Path", "App", "Parts", "CA", "Ar", "NA", "M", "Address", "V", "Average", "J", "F", "E", "All", "MA", "Y", "This", "L", "AM", "History", "Advanced", "S", "Adam", "Bar", "I", "Auth", "Total", "AR", "a", "array", "AP", "AA", "Instance", "Alpha", "B", "Code", "Answer", "Ha", "Access", "K", "W", "Entry", "C", "Info", "At", "Java", "If", "None"], "i": ["id", "j", "lc", "ri", "api", "a", "pi", "mu", "in", "mi", "init", "d", "ip", "ii", "cli", "v", "ix", "io", "start", "c", "abi", "iv", "y", "gi", "index", "k", "phi", "key", "e", "p", "n", "fi", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "eni", "ini", "di", "s", "ie", "oi", "yi", "chi", "code", "l", "si", "bi", "hi", "info", "ei", "x", "ci", "u", "ni", "ti", "uri", "ai", "mini", "I", "name"], "max_first": ["min_second", "maxjthen", "min_initial", "min_then", "max_since", "max64first", "maxfthird", " max_initial", "max_only", "max64top", "min_third", "maxffirst", "maxjsecond", "maxffront", "max67last", "max64second", "min_before", "max_before", "maxfulllast", "max67second", "max_then", "maxenbefore", "maxentop", "min_top", "max_top", "min_fifth", "max_initial", " max_since", "maxfullbefore", "maxjthird", "min_last", "max_third", "maxfulltop", "max64only", "min_front", " max_last", "min_only", "maxfsecond", "maxjfirst", "maxftop", "maxfullfirst", "min_first", "maxenlast", "max_last", "maxenfirst", "max67first", "max67initial", "maxffifth", "max_front", "max_fifth"], "max_second": ["max67left", "min_second", "min_two", "max___size", "max64first", "max___first", "maxenleft", " max_front", "maximumofsecond", "max64second", "max64two", "maxoffirst", "max_size", "maximum_short", "max67second", "min_left", "maxofshort", "max67front", "maxentwo", "max___second", "max___last", "max_short", "max_seconds", "max64left", "maxofseconds", "maxensecond", "maximumofshort", "min_last", "maxofsecond", "maximum_seconds", "maximum_second", "maximum_first", "max_left", "max_two", "maximumoffirst", "maxenlast", "min_first", "min_size", "maxensize", "maxenfirst", "max_last", "max67first", " max_left", "max_front", "maximumofseconds"], "count_max_first": ["count_max_next", "count_maxalllast", "count_max_error", "count_min_last", "count_max_third", "count_maxallerror", "count_min_only", "count_maxallfirst", "count_min_first", "count_min_max", "count_min_third", "count_max_max", "count_min_error", "count_max_only", "count_maxallnext", "count_max_last", "count_min_next"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int L = sc.nextInt();\\n        int[] tastes = new int[N];\\n        int min = Integer.MAX_VALUE;\\n        int total = 0;\\n        int index = 0;\\n        for (int i = 0; i < N; i++) {\\n            int taste = L+i;\\n            total += taste;\\n            tastes[i] = taste;\\n            int moo = Math.min(min, Math.abs(taste));\\n            if (moo < min) {\\n                min = moo;\\n                index = i;\\n            }\\n        }\\n        System.out.println(total-tastes[index]);\\n    }\\n}", "target": "91", "substitutes": {"sc": ["sw", "cont", "ch", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", " scr", "com", "ss", "cli", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "search", "ec", "nc", "sch", "con", "cc", "sh", "sec", "cor", "cus", "ctx", "sp", "ser", "src", "rc", "system", "anc", "sche", "cur", "cms", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "mc", "sci"], "N": ["Q", "Ni", "Ne", "Ns", "F", "SIZE", "E", "NL", "NB", "T", "NE", "B", "NI", "Y", "NT", "NS", "n", "R", "ND", "K", "Len", "NC", "C", "O", "MN", "D", "SN", "NA", "M", "II", "S", "Z", "X", "NN", "V", "P", "Size", "I", "G"], "L": ["Q", "CL", "Total", "LT", "LS", "J", "LL", "BL", "Lu", "E", "length", "F", "LE", "NL", "IL", "limit", "SL", "Index", "H", "LM", "T", "B", "n", "K", "LU", "DL", "Limit", "O", "LO", "D", "EL", "M", "dL", "S", "l", "Z", "LA", "X", "V", "LI", "P", "Li", "I"], "tastes": ["itastinges", "tastures", "tastedes", "tastsedes", "untastsures", "testes", "trastions", "tested", "itastinged", "tastions", "trastedes", "untastsions", "atastedes", "tastsES", "trasts", "atastss", "itasted", "atastions", "tasterions", "trastes", "atastses", "itasts", "tostES", "tasted", "tastinged", "atastes", "itastes", "untastions", "atastsedes", "tastses", "itastings", "itastingES", "testES", "untastses", "tostes", "tasts", "tastsures", "untastsES", "atastsions", "tastsions", "tasterES", "tastings", "tastES", "tasterures", "tostions", "tastss", "tastingedes", "untastes", "tastsed", "itastES", "tastinges", "tastingions", "tests", "untastures", "atasts", "tostures", "tastingES", "untastES", "tasteres"], "min": ["id", "little", "small", "none", "sin", "left", "po", " minimum", "len", "part", "Mini", "Min", "unit", "in", "mod", "init", "round", "limit", "default", "call", "start", "is", "m", "name", "current", "miss", "area", "just", "MAX", "shift", "sub", "search", "lower", "value", "from", "mean", "pre", "minimum", "pos", "p", "n", "max", "zero", "partial", "less", "mine", "filter", "skip", "average", "sort", "ax", "sign", "MIN", "div", "version", "ini", "amin", "sum", "mins", "weight", "first", "diff", "all", "mini", "size", "rand", "scale", "to", "minute"], "total": ["token", "Total", "base", "left", "items", "length", "pi", "ma", "part", "offset", "normal", "in", "init", "no", "basic", "limit", "summary", "otal", "count", "last", "type", "down", "start", "complete", "now", "current", "iter", "t", "ski", "value", "nt", "gross", "pos", "n", "max", "partial", "li", "toc", "found", "multi", "skip", "percent", "sum", "si", "info", "all", "null", "size", "mini", "scale"], "index": ["id", "slice", "inner", "open", "base", "mix", "left", "axis", "condition", "section", "length", "part", "ai", "offset", "step", "page", "unit", "in", "init", "no", "ind", "count", "type", "ix", "level", "is", "start", "element", "Index", "position", "iter", "current", "search", "see", "input", "key", "pos", "join", "f", "partial", "find", "list", "connection", "full", "ini", "div", "si", "info", "weight", "x", "action", "loop", "update"], "i": ["id", "j", "pi", "in", "mi", "d", "ii", "ip", "ind", "z", "v", "ix", "io", "c", "start", "ori", "t", "gi", "phi", "e", "p", "n", "qi", "f", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "ie", "oi", "chi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "ni", "fi", "ai", "uri", "mini", "I"], "taste": ["intpose", "intose", "tose", "trite", "mpaste", "teste", "vaste", " tase", " teste", "tasting", "intape", "intrite", "intaste", "tase", "nasting", "testase", "vrite", "tpose", "Trite", " trite", "tast", "Teste", "ptrite", "maste", " tpaste", "Tose", "testaste", "testose", " tpose", "meste", "Tpose", "intase", "naste", "tpaste", "mase", "vast", "ptast", "Tape", "ptasting", "vasting", "ptaste", "Taste", "tape", "nast", "testape", "Tase", "Tpaste", "nrite"], "moo": ["dobe", "mosa", "mole", "tobe", "toda", "loo", "iooo", "dosa", "moda", " moda", " moe", "iole", "mmole", "mow", " mow", " mooo", " mosa", " mole", "mmooo", "ioe", "mmoe", "dooo", "mooo", "low", "ioo", "moe", " mobe", "mmobe", "tow", "lobe", "loda", "doo", "too", "mmoo", "mobe", "mmosa"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.*;\\n\\nclass Main {\\n    public static void main(String [] args){\\n        Scanner scan = new Scanner(System.in);\\n        \\n        while(true){\\n            String s = scan.next();\\n            \\n            if(s.equals(\"-\")){\\n                break;\\n            }\\n            \\n            int m = scan.nextInt();\\n            \\n            for(int i = 0; i < m; ++i){\\n                int h    = scan.nextInt();\\n                String t = s.substring(0, h);\\n                String b = s.substring(h);\\n                \\n                s = b + t;\\n            }\\n            \\n            System.out.println(s);\\n        }\\n    }\\n}\\n", "target": "216", "substitutes": {"scan": ["sc", "can", "slice", "open", "man", "look", "nn", "check", "fan", "query", "se", "in", "server", "match", "connect", "er", "v", "an", "sync", "r", "out", "search", "iter", "read", "con", "clean", "ln", "see", "chan", "cat", "san", "plan", "n", "f", "watch", "walk", "ser", "bug", "span", "system", "row", "feed", "na", "run", "skip", "pass", "Scan", "ignore", "parse", "ner", "parser", "ann", "reader"], "s": ["slice", "sql", "gs", "sin", "single", "sg", "su", "a", "str", "ns", "js", "in", "services", "ss", "sets", "v", "c", "is", "abs", "sync", "r", "aws", "spec", "parts", "xs", "strings", "sh", "ds", "e", "p", "n", "ses", "f", "ssl", "string", "ws", "bs", "o", "hs", "sb", "its", "S", "l", "si", "sup", "uses", "shared", "sv", "ops", "u", "ls", "your", "ts", "source"], "m": ["j", "mu", "dm", "mi", "d", "md", "sm", "z", "v", "c", "r", "y", "mn", "k", "e", "wm", "p", "n", "f", "pm", "mm", "cm", "hm", "M", "w", "l", "x", "u", "g", "mc"], "i": ["j", "api", "pi", "mu", "mi", "ii", "ip", "z", "v", "c", "r", "y", "gi", "sh", "e", "p", "n", "f", "qi", "ui", "xi", "li", "multi", "o", "di", "w", "ini", "oi", "yi", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "fi", "ai", "I"], "h": ["hh", "ch", "d", "ah", "bh", "hd", "ha", "ht", "v", "z", "c", "H", "oh", "y", "he", "sh", "gh", "hr", "phi", "k", "e", "p", "ih", "f", "end", "hm", "rh", "ph", "hs", "w", "th", "uh", "l", "hi", "u"], "t": ["id", "j", "kt", "a", "in", "d", "mt", "tf", "type", "z", "v", "ht", "c", "txt", "r", "y", "T", "tt", "dt", "e", "p", "n", "f", "te", "string", "o", "w", "th", "l", "x", "text", "u", "ts"], "b": ["id", "base", "ba", "cb", "bg", "ab", "a", "body", "abb", "bh", "pb", "v", "ob", "c", "abs", "r", "B", "sh", "p", "n", "f", "bp", "bot", "br", "bs", "o", "w", "sb", "th", "lb", "bt", "l", "bi", "fb", "bd", "u", "rb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] P = new int[N];\\n\t\tint[] Q = new int[N];\\n\t\tint a;\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tP[i] = sc.nextInt();\\n\t\t\ta = P[i];\\n\t\t\tQ[i] = a;\\n\t\t}\\n\\n\t\tint count = 0;\\n\t\tfor (int i = 0; i < N - 1; i++) {\\n\t\t\tfor (int j = N - 1; j > i; j--) {\\n\t\t\t\tif (P[j - 1] > P[j]) {\\n\t\t\t\t\tint tmpNum = P[j - 1];\\n\t\t\t\t\tP[j - 1] = P[j];\\n\t\t\t\t\tP[j] = tmpNum;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tif (Q[i] - P[i] != 0) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\tif(count <= 2) {\\n\t\t\tSystem.out.println(\"YES\");\\n\t\t}\\n\t\telse {\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\\n\t}\\n\\n}", "target": "82", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String args[]){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\\n\t\tboolean flag = true;\\n\t\twhile(flag){\\n\t\t\tString[] input=sc.nextLine().split(\" \");\\n\t\t\tint[] num= new int[input.length];\\n\t\t\tfor(int i=0;i<input.length;i++){\\n\t\t\t\tnum[i]=Integer.parseInt(input[i]);\\n\t\t\t}\\n\t\t\tif(num[0]==0 && num[1]==0){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tfor(int H=0;H<num[0];H++){\\n\t\t\t\tfor(int W=0;W<num[1];W++){\\n\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println();\t\t\t\t\\n\t\t\t}\\n\t\t\tSystem.out.println();\t\t\t\t\\n\t\t}\\n\t}\\n}", "target": "87", "substitutes": {"sc": ["sw", "isc", "ch", " Sc", "st", "Sc", " SC", "bc", "sf", "SC", "se", "scope", " scr", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "spec", "out", "nc", "sch", "irc", "sh", "sec", "desc", "sp", "src", "rc", "system", "anc", "sb", "s", "cs", "Scan", "si", "pc", "ner", "parser", "asc", "stream", "screen", "sci"], "flag": ["id", " bool", " flagged", "lag", " alt", "disabled", " arg", " sig", " win", " pig", "ig", " flags", "group", "count", "fd", "arg", " bit", "er", "half", "sub", "kind", " Flag", "event", "func", "wait", "ret", "star", "bit", "add", "f", "flags", "wave", "bug", "leaf", "Flag", "fun", "ic", "binary", "FLAG", "debug", "ish", "ait", "status", "af", "ext", "ar", " debug", "ag"], "input": ["id", "path", "format", "again", "amp", "error", "file", "form", "comment", "str", "bin", "unit", "in", "init", "inc", "ip", "arg", "split", "element", "iter", "word", "Input", "out", "img", "request", "value", "data", "index", "alpha", "result", "include", "argument", "string", "digit", "inf", "feed", "image", "up", "act", "field", "keep", "sum", "info", "exec", "parse", "text", "null", "qa", "output", "raw", "list", "source", "work"], "num": ["id", "none", "loc", "nn", "form", "comment", "bin", "part", "nu", "unit", "no", "inc", "init", "lang", "count", "type", "an", "split", "plus", "Num", "miss", "en", "con", "out", "dom", "mon", "mn", "non", "np", "data", "index", "nb", "dim", "cat", "number", "pos", "n", "home", "un", "missing", "net", "digit", "dec", "inf", "na", "umi", "multi", "begin", "tri", "parent", "comb", "sum", "note", "NUM", "info", "nom", "text", "null", "du", "nam", "valid", "u", "mom", "output", "block", "gen", "um", "name"], "i": ["id", "slice", "j", "ri", "h", "a", "pi", "I", "in", "mi", "d", "ii", "ip", "z", "v", "ix", "c", "start", "m", "is", "io", "r", "y", "t", "gi", "index", "k", "phi", "e", "p", "n", "f", "qi", "ji", "q", "ui", "xi", "li", "it", "multi", "o", "di", "w", "ini", "oi", "ie", "yi", "chi", "l", "si", "bi", "hi", "x", "ci", "u", "ti", "fi", "ai", "b"], "H": ["Q", "MH", "SH", "CH", "h", "J", "F", "E", "HC", "Hi", "HM", "WH", "A", "HP", "T", "B", "Y", "R", "L", "K", "HI", "C", "EH", "D", "M", "HS", "U", "Z", "S", "N", "X", "V", "ID", "P", "HE", "HH", "I", "G"], "W": ["Q", "WP", "Weight", "F", "E", "WC", "BW", "Sw", "Width", "TW", "WH", "A", "T", "B", "VW", "WR", "Y", "GW", "We", "R", "WA", "L", "WB", "K", "Wa", "C", "D", "WS", "w", "M", "FW", "CW", "U", "Z", "S", "N", "V", "WE", "X", "P", "Wh", "I", "G"]}}
{"code": "import java.util.*;import java.io.*;import java.math.*;\\npublic class Main\\n{\\n    public static void process()throws IOException\\n    {\\n        int n=ni();\\n        BigInteger prod=BigInteger.ONE;\\n        long[]A=nal(n);\\n        Arrays.sort(A);\\n        for(int i=0;i<n;i++)\\n        {\\n            String s=Long.toString(A[i]);\\n            prod=prod.multiply(new BigInteger(s));\\n            if(prod.compareTo(new BigInteger(Long.toString((long)1e18)))>0)\\n            {\\n                pn(\"-1\");\\n                return;\\n            }\\n        }\\n        pn(prod);\\n    }\\n\\n    static AnotherReader sc;\\n    static PrintWriter out;\\n    public static void main(String[]args)throws IOException\\n    {\\n        boolean oj =true;\\n        if(oj){sc=new AnotherReader();out=new PrintWriter(System.out);}\\n        else{sc=new AnotherReader(100);out=new PrintWriter(\"output.txt\");}\\n        int t=1;\\n        // t=ni();\\n        while(t-->0) {process();}\\n        out.flush();out.close();  \\n    }\\n\\n    static void pn(Object o){out.println(o);}\\n    static void p(Object o){out.print(o);}\\n    static void pni(Object o){out.println(o);out.flush();}\\n    static int ni()throws IOException{return sc.nextInt();}\\n    static long nl()throws IOException{return sc.nextLong();}\\n    static double nd()throws IOException{return sc.nextDouble();}\\n    static String nln()throws IOException{return sc.nextLine();}\\n    static int[] nai(int N)throws IOException{int[]A=new int[N];for(int i=0;i!=N;i++){A[i]=ni();}return A;}\\n    static long[] nal(int N)throws IOException{long[]A=new long[N];for(int i=0;i!=N;i++){A[i]=nl();}return A;}\\n    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}\\n    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}\\n    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}\\n\\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    static class AnotherReader{BufferedReader br; StringTokenizer st;\\n    AnotherReader()throws FileNotFoundException{\\n    br=new BufferedReader(new InputStreamReader(System.in));}\\n    AnotherReader(int a)throws FileNotFoundException{\\n    br = new BufferedReader(new FileReader(\"input.txt\"));}\\n    String next()throws IOException{\\n    while (st == null || !st.hasMoreElements()) {try{\\n    st = new StringTokenizer(br.readLine());}\\n    catch (IOException  e){ e.printStackTrace(); }}\\n    return st.nextToken(); } int nextInt() throws IOException{\\n    return Integer.parseInt(next());}\\n    long nextLong() throws IOException\\n    {return Long.parseLong(next());}\\n    double nextDouble()throws IOException { return Double.parseDouble(next()); }\\n    String nextLine() throws IOException{ String str = \"\"; try{\\n    str = br.readLine();} catch (IOException e){\\n    e.printStackTrace();} return str;}}\\n   \\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n}\\n", "target": "27", "substitutes": {"n": ["j", "nn", "h", "Ns", "a", "len", "sn", "ns", "d", "no", "nl", "z", "ny", "c", "m", "en", "y", "network", "nc", "np", "nb", "nr", "k", "e", "ne", "p", "f", "net", "nat", "o", "w", "N", "l", "num", "x", "nan", "ni", "u", "b"], "prod": ["pubd", "perda", "prdx", "prold", "prop", "compd", "prods", "Prod", "compld", "prd", "compb", "prol", "pubp", "prb", "Prog", "Prol", "pubdd", "Prold", "Prodd", "Prodx", "prds", " proda", "prob", "Prods", "pubg", "Prop", "prl", "prog", " prodx", " prop", "perd", " prob", "Prob", " prodd", "compl", "prodd", "prodx", "prld", " prold", "perld", " prods", "perb", "proda", "compda", "prdd", " prog"], "A": ["As", "An", "AR", "a", "F", "All", "array", "AP", "AS", "AA", "H", "Ma", "AST", "T", "Alpha", "B", "Y", "mA", "SA", "Na", "alpha", "L", "Array", "AM", "K", "API", "AV", "C", "CA", "Ar", "NA", "D", "O", "M", "U", "S", "N", "LA", "V", "P", "Average", "I", "G", "AC"], "i": ["id", "slice", "j", "ri", "a", "pi", "mu", "I", "d", "mi", "ii", "ip", "z", "v", "abi", "c", "is", "m", "ix", "y", "gi", "index", "key", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "oi", "yi", "ie", "chi", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "b"], "s": ["small", "lines", "features", "h", "a", "ns", "js", "in", "d", "services", "ss", "ps", "v", "c", "params", "m", "abs", "r", "parts", "os", "strings", "states", "groups", "ds", "e", "p", "ses", "f", "string", "o", "seconds", "S", "l", "si", "tests", "u", "ls", "b"], "sc": ["sr", "ch", "cgi", "lc", "soc", "sys", "Sc", "bc", "scope", "SC", "in", "cli", "uc", "cr", "esc", "sq", "c", "osc", "sync", "spec", "ec", "nc", "cc", "sh", "cus", "ctx", "sp", "dc", "src", "rc", "anc", "ca", "cur", "cs", "go", "cl", "self", "pc", "asc", "jp", "cv", "mc", "sci"], "out": ["again", "wx", "png", "console", "outs", "doc", "file", "conn", "error", "check", "comment", "str", "bin", "query", "scope", "in", "user", "err", "report", "inc", "table", "println", "server", "client", "std", "io", "call", "script", "OUT", "name", "prefix", "c", "r", "this", "point", "password", "input", "session", "p", "obj", "ex", "lock", "cache", "result", "string", "project", "contract", "test", "o", "pass", "temp", "w", "up", "parent", "view", "log", "exp", "exec", "x", "ext", "Out", "output", "raw", "post", "buffer", "ou", "writer", "write"], "oj": [" inj", " bio", " adj", "ijk", "ajo", "oa", " arri", " ol", " ov", "js", " clo", "bo", "obo", "bj", "iq", "oko", "ob", "ov", "odi", "oh", " ja", " tech", "olo", "oo", " overt", " mov", "obj", "oy", " ax", "jing", "aj", " oval", "ocr", " elong", " PJ", "ooo", "oz", "oi", " ko", " jo", "oji", "oro", "uj", "onet", " poly", "og", " dj", "ola", " Jr", " ore"], "t": ["tp", "tn", "template", "tf", "count", "et", "type", "v", "c", "start", "pt", "T", "tt", "dt", "nt", " T", "e", "p", "q", "ot", "it", "test", "tip", "tl", "task", "time", "total", "ts"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String[] args){\\n        Scanner s = new Scanner(System.in);\\n        int n = s.nextInt();\\n\\n        int[] cardList = new int[n];\\n        int[] player = new int[2];\\n        for(int i=0;i<n;i++){\\n            cardList[i] = s.nextInt();\\n        }\\n\\n        Arrays.sort(cardList);\\n\\n        int switchPlayer = 0;\\n\\n        for(int i=n-1;i>=0;i--){\\n            if(switchPlayer == 0){\\n                player[0] += cardList[i];\\n                switchPlayer = 1;\\n            } else {\\n                player[1] += cardList[i];\\n                switchPlayer = 0;\\n            }\\n        }\\n\\n        System.out.println(player[0] - player[1]);\\n\\n\\n    }\\n\\n}", "target": "132", "substitutes": {"s": ["gs", "h", "sys", "fs", "utils", "ns", "rs", "se", "in", "d", "sf", "http", "services", "fts", "ss", "sets", "er", "v", "c", "south", "m", "abs", "sync", "r", "is", "out", "os", "es", "strings", "ds", "e", "ses", "f", "ssl", "ans", "sym", "bis", "ws", "as", "sb", "S", "l", "si", "sl", "sv", "g", "u", "ls", "b", "ts", "ins"], "n": ["j", "nn", "h", "len", "sn", "ns", "in", "d", "no", "nl", "z", "v", "c", "m", "r", "en", "y", "network", "nc", "t", "nb", "nr", "k", "nt", "cn", "ne", "e", "p", "number", "f", "net", "o", "w", "N", "l", "num", "x", "ni", "u", "size", "b"], "cardList": ["CardSet", "winnerlist", "cardArray", "winnerL", "winnerList", "switchList", " cardlist", " cardQueue", " cardOrder", "cardPlayer", "wordList", "cardL", "CardArray", "orderlist", "booklist", "orderList", "cardOrder", "wordLine", " cardSet", "playL", "cardSt", "bookSet", " cardTable", " cardLine", "CardPlayer", "fieldTable", "cardsArray", "wordQueue", "cardTable", "CardQueue", "cardSet", "playList", "cardsSet", "fieldLibrary", "playlist", "cardQueue", "switchArray", "fieldQueue", "playOrder", "wordSt", " cardSt", "cardsPlayer", "CardSt", "cardsList", "winnerSet", "cardLine", "CardList", "cardlist", "orderOrder", "CardTable", "CardLine", "cardLibrary", "bookList", " cardL", "fieldList", " cardLibrary", "switchSet", "CardLibrary", "orderL", "bookL"], "player": ["ler", "id", "players", "change", "man", "layer", "adder", "roller", "leader", "game", "part", "move", " Player", "mate", "user", "winner", "cover", "header", "play", "master", "gamer", "type", "played", "er", "style", "Player", "seed", "pointer", "league", "match", "position", "owner", "party", "enemy", "point", "board", "holder", "ward", "ier", "slot", "channel", "number", "playing", "caster", "worker", "driver", "list", "image", "score", "controller", "field", "actor", "live", "ner", "video", "slave", "card", "writer", "order"], "i": ["id", "j", "api", "ri", "pi", "mu", "in", "d", "mi", "init", "ip", "ii", "v", "ix", "io", "abi", "m", "r", "y", "gi", "index", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "yi", "ie", "ei", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "ti", "uri", "ai", "hei", "I"], "switchPlayer": ["witchplayer", "currentPlay", "moveGame", "selectRole", "switchGame", " switchPart", " switchplayer", "witchPart", "switchPart", "choicePlayer", "selectPlayer", "changeCounter", "selectplayer", " switchRole", "currentplayer", "moveplayer", "movePlayer", "switchParty", "currentPlayer", " switchPlay", "changeGame", "selectParty", "switchCounter", "changeplayer", "choiceRole", "witchGame", " switchParty", "switchPlay", "choiceplayer", "movePlay", " switchGame", "changePart", "changePlayer", "switchplayer", "witchPlayer", " switchCounter", "witchCounter", "choiceParty", "switchRole", "currentGame"]}}
{"code": "//make sure to make new file!\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n   \\n   public static void main(String[] args)throws IOException{\\n      BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\\n      PrintWriter out = new PrintWriter(System.out);\\n      \\n      StringTokenizer st = new StringTokenizer(f.readLine());\\n      \\n      int n = Integer.parseInt(st.nextToken());\\n      int a = Integer.parseInt(st.nextToken());\\n      int b = Integer.parseInt(st.nextToken());\\n      \\n      int answer = Math.min(n*a,b);\\n      out.println(answer);\\n\\n      \\n      \\n      \\n      \\n      out.close();\\n   }\\n   \\n      \\n}", "target": "213", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\tstatic PrintWriter out;\\n\tstatic StringBuilder sb;\\n\tstatic int mod = 1000000007;\\n\tstatic long inf = (long) 1e16;\\n\tstatic int[] l, r;\\n\tstatic int n, c, t;\\n\tstatic ArrayList<Integer>[] ad;\\n\tstatic long[][][] memo;\\n\tstatic boolean f;\\n\tstatic boolean[] vis[];\\n\tstatic int[][] mat, mat1;\\n\tstatic int[] ans, a;\\n\tstatic ArrayList<Integer> rr, bb, gg;\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tout = new PrintWriter(System.out);\\n        int ans=0;\\n        String s=sc.nextLine();\\n        if(s.contains(\"R\"))\\n        \tans++;\\n        if(s.contains(\"RR\"))\\n        \tans++;\\n        if(s.contains(\"RRR\"))\\n        \tans++;\\n        System.out.println(ans);\\n\t\tout.flush();\\n\t}\\n\\n\tstatic class Scanner {\\n\t\tStringTokenizer st;\\n\t\tBufferedReader br;\\n\\n\t\tpublic Scanner(InputStream system) {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(system));\\n\t\t}\\n\\n\t\tpublic Scanner(String file) throws Exception {\\n\t\t\tbr = new BufferedReader(new FileReader(file));\\n\t\t}\\n\\n\t\tpublic String next() throws IOException {\\n\t\t\twhile (st == null || !st.hasMoreTokens())\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\\n\t\tpublic String nextLine() throws IOException {\\n\t\t\treturn br.readLine();\\n\t\t}\\n\\n\t\tpublic int nextInt() throws IOException {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\\n\t\tpublic double nextDouble() throws IOException {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tpublic char nextChar() throws IOException {\\n\t\t\treturn next().charAt(0);\\n\t\t}\\n\\n\t\tpublic Long nextLong() throws IOException {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\\n\t\tpublic int[] nextArrInt(int n) throws IOException {\\n\t\t\tint[] a = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextInt();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic long[] nextArrLong(int n) throws IOException {\\n\t\t\tlong[] a = new long[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextLong();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic boolean ready() throws IOException {\\n\t\t\treturn br.ready();\\n\t\t}\\n\\n\t\tpublic void waitForInput() throws InterruptedException {\\n\t\t\tThread.sleep(3000);\\n\t\t}\\n\t}\\n}\\n", "target": "141", "substitutes": {"out": ["ch", "again", "console", "png", "error", "outs", "doc", "co", "line", "comment", "str", "bin", "gz", "page", "scope", "in", "builder", "user", "err", "flush", "inc", "println", "cli", "client", "arg", "io", "outer", "prefix", "OUT", "name", "sync", "input", "key", "obj", "ex", "sp", "net", "lock", "cache", "result", "IN", "dump", "string", "project", "list", "op", "window", "o", "temp", "pass", "w", "conf", "up", "target", "parent", "log", "exp", "exec", "x", "ext", "Out", "output", "copy", "gen", "buffer", "ou", "b", "writer", "write"], "sb": ["sr", "sg", "su", "sn", "rob", "bc", "sf", "sa", "SC", "ss", "gb", "cr", "sq", "ub", " sm", "SB", "stab", "SF", "sh", "SA", "sp", "ws", "bs", "SN", "si", " SB", "sl", "rb", "sv"], "mod": ["id", " rc", "man", " ms", "len", "util", "d", " m", "lib", " max", "m", "mem", "reg", "max", " Mod", "cm", " mods", "MOD", " d", "log", " imm", "cl", "mods", "Mod", " log", "ms", "ll", "scale"], "inf": [" fn", " rc", " cl", " ms", " rad", " bits", " reg", " m", " exp", " lin", " rand", " fmt", " pad", " e", " cont", " lim", " ref", " scale", " id", " acc", " z", " shr", " term", " imm", " ins", " log", " ls", " sim"], "l": ["j", "lc", "len", "nl", "z", "v", "m", "ln", "dl", "k", "e", "p", "L", "rl", "la", "li", "o", "el", "lr", "sl", "g", "u", "ls", "ll", "fl", "b"], "r": ["sr", "h", "ro", "rs", "err", "ir", "er", "v", "m", "y", "nr", "re", "k", "e", "p", "R", "q", "rc", "o", "x", "u", "rt", "ru", "ar", "rb", "rf"], "n": ["j", "format", "nn", "h", "sn", "ns", "d", "count", "z", "v", "_", "m", "y", "en", "this", "nc", "ln", "nb", "k", "nt", "e", "number", "p", "na", "o", "w", "N", "num", "x", "u", "g", " N", "all", "b", "name"], "c": ["lc", "h", "ct", "cr", "z", "v", "m", "ac", "y", "nc", "cc", "e", "cy", "p", "xc", "dc", "q", "cm", "ca", "C", "cs", "x", "u", "g", "b"], "t": ["tm", "h", "tp", "tf", "ta", "z", "v", "m", "y", "pt", "tc", "T", "tt", "dt", "ty", "p", "q", "o", "w", "x", "u", "ts"], "ad": ["nd", "ab", "ai", "al", "aa", "aid", "am", "dd", "ace", "ind", "md", "at", "ac", "ay", "add", "ads", "ud", "dc", "acc", "att", "aud", "da", "au", "ate", "ae", "rad", "mad", "ar", "ag"], "memo": ["cryptos", "condogram", "monor", "monos", "memos", "cryptogram", "crypto", "memogram", "mono", "condo", "condos", "monogram", "condor", "cryptor", "memor"], "f": ["h", "fs", "F", "free", "d", "z", "v", "m", "y", "fe", "k", "e", "p", "q", "w", "x", "u", "g", "fl", "b"], "vis": ["man", "vert", "su", "conv", "ii", "ss", "visual", "miss", "stat", "circ", "fast", "fe", "pos", "dc", "acc", "mm", "wa", "nat", "av", "na", "mit", "tri", "act", "num", "vm", "cv", "um", "vt", "vi"], "mat": ["mas", "nn", "ct", "ma", "mu", "unit", "mi", "mt", "ac", "match", "mon", "mn", "mun", "dim", "cat", "pat", "acc", "mm", "nat", "att", "tu", "mit", "feat", "tri", "act", "wt", "num", "mp", "ann"], "mat1": ["matp", "Mat8", "mitp", "mit1", "motp", "mat2", "mot2", "Mat2", "mit8", "mot1", "mot8", "mit2", "Mat1", "mat8", "Matp"], "ans": [" scans", "can", "pp", "anas", "aces", "aps", "ips", "opens", "vals", "nn", "outs", "ats", "cons", "leans", "lan", "sk", "ns", "ons", "rs", "runs", "ens", "aus", "ss", "ions", "nas", "amps", "an", "reads", "scan", "rans", "ars", "asts", "ras", "ams", "ros", " sets", "aned", "ln", "acs", "cas", " chars", "offs", "ds", "ents", "ads", "ids", "ks", " spans", "span", " logs", "mm", "arts", "anc", "ANS", "na", "as", "blocks", "ays", "cs", "works", "ants", "eps", "x", "nan", "ms", "ann", "ames", "ls", "ai", "ins"], "a": ["aw", "ba", "ab", "ai", "aa", "sa", "ata", "am", "array", "count", "an", "area", "at", "ac", "A", "data", "p", "alpha", "wa", "la", "va", "as", "ca", "na", "w", "au", "x", "ae", "ann", "all", "ar", "b"], "rr": ["sr", "RR", "rx", "rs", "aa", "err", "cr", "er", "nr", "hr", "mr", "arr", "rl", "rc", "rw", "rss", "rh", "rn", "rm", "dr", "rt", "ru", "ar", "rb", "rf", "rg"], "bb": ["pp", "nn", "ab", "cb", "abb", "xb", "aa", "bc", "dd", "bf", "gb", "abc", "ob", "db", "tt", "BB", "mb", "ud", "eb", "rc", "mm", "aud", "zz", "bm", "kk", "ann", "rb"], "gg": ["hh", "pp", "gs", "GG", "sg", "abb", "xb", "gy", "vv", "gb", "aaaa", "gh", "ga", "gp", "BB", "gd", "mb", "mm", "la", "aud", "pg", "zz", "go", "agg", "qa", "g", "ann"], "sc": ["lc", " Sc", "sys", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "shell", "ss", "uc", "cr", "esc", "scan", "osc", "spec", "sync", "sub", "nc", "sec", "desc", "nt", "sp", "ser", "src", "acc", "rc", "cs", "si", "cl", "pc", "ci", "asc", "screen", "sci"], "s": ["lines", "gs", "features", "h", "fs", "sys", "su", "line", "ns", "se", "in", "d", "services", "sf", "ps", "v", "is", "abs", "sync", "settings", "spec", "os", "strings", "es", "states", "p", "comments", "ses", "ssl", "sym", "string", "ws", "source", "S", "si", "stats", "words", "sl", "tests", "sv", "u", "g", "ls", "b", "ts", "ins"], "st": ["sw", "ast", "sr", "nd", "sth", "ct", "str", "ft", "sn", "sa", "ust", "ut", "ss", " est", "std", "stop", "cr", "stable", "pt", "sta", "ld", "const", "stri", "sh", "fe", "ste", "nt", "be", "sp", "src", "ost", "b", "pr", "th", "ST", "rest", "bt", "rd", "fr", "sts", "sl", "first", "dr", "struct", "bl", "rt", "est", "ist", "inst", "St"], "br": ["ler", "sr", "ch", "bur", "line", "str", "bro", "rob", "or", "sn", "bc", "Br", "fore", "ut", "err", "bh", "bsp", "bf", "ber", "BR", "bre", "cr", "er", " tr", "db", "gr", "tr", "bel", "kr", "hr", "be", "ur", "p", "sp", "arr", "ver", "bar", "mr", "src", "cro", "ocr", "bridge", " str", "next", "browser", "bs", "bal", "pr", "ref", "bt", "rest", "bm", "lr", "fr", "pl", "bas", "sl", "text", "dr", "bl", "rt", "rib", "rb", "b"], "system": ["path", "format", "instance", "object", "storage", "sys", "serial", "or", "str", "resource", "in", "user", "array", "shell", "server", "process", "io", "script", "url", "host", "input", "from", "data", "ram", "loader", "machine", "directory", "entry", " reader", "string", "rss", "class", "stream", "uri", "null", "reader", "service", "config"], "file": ["ile", "port", "path", "FILE", "object", "format", "base", "ban", "model", "line", "function", "files", " files", "page", "resource", "folder", "File", "script", "fp", "input", "data", "loader", "entry", "lock", "directory", "string", "feed", "connection", " File", "image", "use", "log", "config", "info", "text", "stream", "filename", "reader", "buffer", "source", "name"], "i": ["id", "j", "pi", "d", "ip", "ii", "v", "io", "m", "y", "gi", "index", "k", "phi", "uli", "e", "p", "qi", "ji", "ui", "xi", "b", "di", "chi", "si", "bi", "x", "ci", "u", "ni", "uri", "fi", "I"]}}
{"code": "import java.util.*;\\npublic class Main{\\npublic static void main(String[] args){\\nScanner sc = new Scanner(System.in);\\n  int[] a = {1,4,8,16,32,64,128,256,512,9,27,81,243,729,25,125,625,49,343,121,169,289,361,529,841,961,36,216,100,1000,144,196,225,256,324,400,441,484,576,676,784,900};\\n  int x = sc.nextInt();\\n  Arrays.sort(a);\\n  for(int i = a.length-1;i >= 0;i--){\\n    if(a[i] <= x){\\n      System.out.println(a[i]);\\n      break;\\n    }\\n  }\\n}}\\n", "target": "143", "substitutes": {"sc": ["sw", "isc", "ch", "cont", "cmp", " Sc", "or", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sub", "nc", "sch", "cc", "sec", "cus", "desc", "proc", "sp", "src", "rc", "system", "anc", "cs", "Scan", "si", "cl", "exp", "pc", "ner", "parser", "asc", "g", "sci"], "a": ["aw", "ba", "ab", "fa", "aaa", "aa", "sa", "ata", "am", "aux", "array", "an", "area", "c", "ac", "y", "A", "tta", "aaaa", "ga", "data", "e", "p", "pa", "alpha", "home", "missing", "ea", "la", "ca", "as", "na", "va", "o", "working", "s", "something", "ama", "l", "au", "ae", "auto", "u", "b", "work"], "x": ["id", "xxxx", "wx", " xx", "xx", "rx", "xb", "fx", "d", "xy", "xxx", "z", "ix", "v", "c", "m", "y", "tx", "xf", "xs", "index", "e", "xc", "ex", "p", "f", "n", "max", "xi", "xp", "w", "ax", "xe", "dx", "X", "u", "xa", "xes"], "i": ["id", "slice", "j", "lc", "ri", "h", "pi", "mu", "part", "in", "d", "mi", "init", "ip", "ii", "v", "io", "c", "start", "m", "abi", "ix", "y", "shift", "t", "gi", "index", "k", "phi", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "w", "ini", "eni", "oi", "l", "si", "bi", "hi", "info", "sup", "ci", "u", "ti", "uri", "fi", "ai", "temp", "I", "vi"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = Integer.parseInt(sc.next());\\n\t\tint[] L = new int [n];\\n\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\tL[i] = Integer.parseInt(sc.next());\\n\t\t}\\n\t\tsc.close();\\n\t\tArrays.sort(L);\\n\t\tint max = L[n-1];\\n\t\tint sum = 0;\\n\t\tfor(int i=0;i<n-1;i++) {\\n\t\t\tsum += L[i];\\n\t\t}\\n\t\tif(max < sum) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n\\n}\\n", "target": "25", "substitutes": {"sc": ["cont", "ch", "lc", "soc", " Sc", "cer", "Sc", " SC", "squ", "bc", "se", "SC", "sf", "scope", "sem", "lib", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "out", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "src", "rc", "system", "anc", "sche", "cur", "sb", "scene", "cs", "l", "cl", "pc", "parse", "ner", "parser", "g", "cv", "reader", "sci"], "n": ["j", "nn", "h", "len", "sn", "ns", "in", "d", "init", "no", "count", "nl", "z", "v", "c", "m", "sync", "en", "y", "network", "nc", "t", "ln", "non", "nb", "k", "nt", "cn", "e", "ne", "p", "number", "f", "net", "inn", "na", "o", "w", "s", "l", "N", "num", "x", "u", "g", "size", "b"], "L": ["Q", "CL", "Lo", "LT", "LS", "Lu", "LL", "BL", "LE", "LB", "LD", "LR", "NL", "IL", "PL", "SL", "RL", "H", "LM", "T", "UL", "Sl", "XL", "LP", "LU", "DL", "Len", "O", "ML", "D", "EL", "FL", "M", "dL", "U", "Z", "l", "N", "S", "LA", "V", "X", "LI", "Li", "I"], "i": ["id", "slice", "inner", "j", "ri", "pi", "mu", "in", "mi", "init", "ii", "ip", "v", "ix", "io", "start", "m", "abi", "y", "min", "gi", "data", "index", "phi", "key", "e", "p", "fi", "f", "qi", "ji", "q", "ui", "me", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "mini", "ai", "uri", "I"], "max": ["id", "can", "rank", "wrap", "always", "part", "wh", "init", "Sum", "count", "Max", "last", "default", "start", "now", "plus", "MAX", "min", "k", "ad", "alpha", "end", "conf", "ax", "w", "parse", "first", "mad", "auto", "size", "scale", "total"], "sum": ["id", "vol", "always", "len", "cum", "offset", "ums", "user", "Sum", "help", "volume", "summary", "count", "start", "spread", "plus", "seed", "match", "miss", "mass", "out", "ul", "min", "sh", "pack", "mean", "index", "ass", "key", "alpha", "zero", "fat", "cal", "average", "conf", "use", "gram", "us", "dot", "num", "si", "weight", "diff", "u", "cost", "size", "um", "scale", "total"]}}
{"code": "/*\\n *  author : Atul Anand   \\n *  created on : Wed Apr 01 2020\\n */\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) throws IOException {\\n        String S = in.next();\\n        String T = in.next();\\n        int a = in.nextInt();\\n        int b = in.nextInt();\\n        String U = in.next();\\n        if(S.equals(U)){\\n            println((a-1) +\" \"+ b);\\n        }\\n        else{\\n            println(a +\" \" + (b-1));\\n        }\\n        \\n        in.close();\\n        out.close();\\n    }\\n\\n    static int MIN = Integer.MIN_VALUE;\\n    static int MAX = Integer.MAX_VALUE;\\n    static Reader in = new Reader();\\n    static PrintWriter out = new PrintWriter(System.out);\\n\\n    static void read(int arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextInt(); \\n    \t} \\n    }\\n    \\n    static void read(long arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextLong(); \\n    \t} \\n    }\\n    \\n    static void read(String arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.next(); \\n    \t} \\n    }\\n    \\n    static void print(Object O) {  \\n    \tout.print(O); \\n    }\\n    \\n    static void println(Object O) { \\n    \tout.println(O); \\n    }\\n    \\n    static void println(int arr[]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprint(arr[i]+\" \"); \\n    \t} \\n    \tprintln(\"\"); \\n    }\\n\\n    static void println(int arr[][]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprintln(arr[i]); \\n    \t}\\n    }\\n    \\n    static void debug(Object O) { \\n    \tSystem.out.println(O); \\n    }\\n}\\n\\nclass Reader {\\n    BufferedReader reader;\\n    StringTokenizer tokenizer;\\n\\n    Reader() {\\n        reader = new BufferedReader(new InputStreamReader(System.in));\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n\\n    String next() throws IOException {\\n        while (!tokenizer.hasMoreTokens() ) { \\n            tokenizer = new StringTokenizer(reader.readLine()); \\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    int nextInt() throws IOException { \\n        return Integer.parseInt(next()); \\n    }\\n    \\n    double nextDouble() throws IOException { \\n        return Double.parseDouble(next());\\n    }\\n    \\n    long nextLong() throws IOException { \\n        return Long.parseLong(next()); \\n    }\\n    \\n    String nextLine() throws IOException { \\n        return reader.readLine(); \\n    }\\n    \\n    void close() throws IOException { \\n        reader.close(); \\n    }\\n}", "target": "155", "substitutes": {"S": ["Q", "SH", "SS", "SU", "F", "SL", "AS", "TS", "H", "A", "B", "Y", "SA", "NS", "R", "L", "K", "SE", "W", "C", "D", "SN", "M", "s", "SP", "ST", "SI", "V", "X", "P", "I", "G"], "T": ["TT", "F", "E", "TS", "WT", "H", "t", "B", "TB", "Y", "NT", "R", "L", "TC", "K", "W", "C", "D", "M", "ST", "Z", "V", "X", "TA", "P", "G", "UT"], "a": ["j", "ba", "h", "ab", "oa", "fa", "part", "aaa", "aa", "sa", "d", "am", "an", "c", "at", "area", "y", "A", "t", "ad", "sha", "p", "n", "pa", "f", "alpha", "aj", "ca", "as", "va", "w", "s", "l", "da", "x", "u", "ai", "sta"], "b": ["wb", "j", "base", "ba", "h", "ab", "ib", "cb", "abb", "aa", "d", "bb", "pb", "bf", "z", "v", "c", "url", "r", "y", "A", "t", "B", "nb", "k", "e", "p", "n", "f", "eb", "br", "bs", "it", "o", "w", "s", "sb", "lb", "l", "bi", "x", "u", "rb"], "U": ["US", "Q", "SU", "Su", "F", "E", "UI", "UE", "CU", "UV", "GU", "UP", "B", "UL", "Y", "R", "L", "TC", "OU", "K", "UU", "LU", "W", "C", "MU", "Us", "D", "EU", "M", "UC", "UR", "V", "X", "TA", "P", "UD", "u", "I", "G", "UT"], "MIN": ["CL", "Min", "AN", "ALL", " min", "VALUE", "IL", "OR", "B", "min", "SA", "minimum", "R", "IN", "Minimum", "NA", "M", "ID", "V", "P", "null", "VAL", "TYPE", "SIZE", "RA"], "MAX": ["CL", "ALL", "VALUE", "IL", "AP", "Max", " max", "OUT", "Maximum", "AST", "NV", "R", "END", "EST", "K", "max", "W", "EXT", "M", "AX", "AK", "TH", "NUM", "X", "maximum", "SIZE", "RA"], "in": ["inner", "login", "path", "again", "doc", "file", "conn", "gin", "line", "bin", "cin", "resource", "d", "user", "din", "inc", "err", "init", "the", "cli", "er", "inside", "is", "thin", "iter", "this", "con", "r", "read", "input", "min", "serv", "data", "gen", "isin", "n", "ex", "win", "on", "IN", "rin", "inn", "binary", "connection", "as", "pass", "In", "image", "ini", "nin", "readable", "version", "l", "log", "kin", "pin", "between", "x", "lin", "stream", "socket", "buffer", "source", "ins"], "out": ["path", "again", "object", "format", "doc", "error", "outs", "external", "file", "pool", "line", "comment", "str", "bin", "or", "query", "page", "resource", "Output", "user", "err", "inc", "init", "array", "println", "scope", "server", "client", "io", "outer", "c", "OUT", "v", "prefix", "name", "r", "t", "input", "data", "co", "key", "p", "obj", "n", "f", "lock", "cache", "IN", "dump", "string", "list", "window", "o", "In", "w", "target", "parent", "log", "print", "Out", "output", "copy", "buffer", "temp", "writer", "write"], "arr": ["enc", "air", "app", "arp", "AR", "buffer", "series", "str", "vec", "aaa", " array", "aa", "ARR", "err", "array", "atts", "rep", "arg", "adr", "abc", "ml", "ars", "r", "iter", "war", "gr", "input", "tr", "img", "rr", "upper", "data", "archive", "cat", "batch", "obj", "arch", "bar", "Array", "map", "arm", "dat", "cache", "br", "umpy", "ray", "att", "Ar", "dict", "stack", "av", "par", "coll", "pr", "plot", "fr", "align", "html", "var", "arc", "attr", "dr", "bl", "all", "ar", "shr", "list"], "N": ["Q", "Ne", "J", "Ns", "F", "E", "INT", "No", " n", "NB", "Num", "Count", "H", "network", "Node", "Number", "A", "B", "NE", "Y", "Na", "NS", "n", "R", "L", "K", "IN", "W", "C", "NC", "NA", "D", "M", "KN", "Z", "Class", "V", "X", "NN", "P", "Size", "I", "G", "None"], "i": ["id", "you", "slice", "j", "iii", "api", "ri", "lc", "h", "pi", "mu", "my", "mi", "init", "ii", "ip", "cli", "z", "ix", "abi", "v", "io", "ori", "y", "gi", "index", "data", "phi", "key", "e", "fi", "n", "f", "qi", "ji", "ik", "q", "ui", "me", "xi", "li", "iu", "multi", "o", "di", "ini", "eni", "isi", "ie", "oi", "yi", "ei", "si", "bi", "hi", "info", "x", "ci", "ni", "ti", "uri", "mini", "ai", "g", "u", "I", "source", "name", "vi"], "O": ["Q", "object", "Os", " o", "IO", "J", "F", "GO", "VO", "E", "OH", "ON", "OTO", "AN", "EO", "Output", "PO", "TO", "File", "SO", "OUT", "OP", "H", "B", "OS", "DO", "Y", "R", "L", "Other", "OU", "K", "MO", "OT", "W", "OK", "C", "o", "D", "M", "OO", "OL", "V", "P", "OA", "I", "G", "None"], "reader": ["ler", "inner", "instance", "iterator", "oder", "or", "service", "book", "report", "server", "client", "er", "io", "manager", "Reader", "iter", "r", "read", "reading", "this", "input", "rr", "data", "loader", "lock", "df", "result", "driver", "row", "feed", "connection", "o", "per", "print", "handler", "parser", "stream", "buffer", "writer"], "tokenizer": ["tokenize", "okenizer", "initialize", "Tokenize", " tokenizing", "Tokenizer", " tokenization", "initializer", "initializing", "okenized", "initialization", "Tokenized", "Tokenizing", "okenener", "Tokenener", "tokenener", "tokenizing", "tokenized", " tokenized", "tokenization", " tokenize", "okenizing", "Tokenization", " tokenener"]}}
{"code": "//package atcoder.ABC;\\nimport java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner input = new java.util.Scanner(System.in);\\n\t\t\\n\t\tString a = input.next();\\n\t\tString b = input.next();\\n\t\tString c = input.next();\\n\t\t\\n\t\tSystem.out.println(c+\" \"+a+\" \"+b);\\n\t\t\\n\t}\\n\\n}\\n", "target": "149", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static int dp[];\\n  public static int func(int a[],int i)\\n  {\\n    if(i>=a.length)\\n    return 10000000;\\n    if(i==a.length-1)\\n    return 0;\\n    if(dp[i]!=-1)\\n    return dp[i];\\n    if(i<a.length-2)\\n    {\\n      dp[i]=Math.min(Math.abs(a[i]-a[i+2])+\\n            func(a,i+2),\\n            Math.abs(a[i]-a[i+1])+\\n            func(a,i+1));\\n    }\\n    else\\n    {\\n      dp[i]=Math.abs(a[i]-a[i+1])+func(a,i+1);\\n    }\\n    return dp[i];\\n  }\\n  public static void main(String[] args)\\n  {\\n    Scanner sc=new Scanner(System.in);\\n    int n=sc.nextInt();\\n    int a[]=new int[n];\\n    dp=new int[n+1];\\n    for(int i=0;i<n;i++)\\n    a[i]=sc.nextInt();\\n    for(int i=0;i<=n;i++)\\n    dp[i]=-1;\\n    System.out.println(func(a,0));\\n  }\\n}", "target": "1", "substitutes": {"dp": ["pp", "port", "vp", "api", "address", "wp", "dep", "tp", "dm", " DP", "d", "dk", "dd", "csv", "ip", "pb", "deb", "dB", "adr", "c", "params", "DP", "fp", "db", "xs", "imp", " tcp", "pid", "np", "gp", "data", " cp", "dt", "ds", "dl", "ga", "e", "wd", "p", "dn", "dim", "reb", "pa", "df", "dc", "bp", "result", "pm", "dat", "duration", "grad", "cm", "pkg", "di", "pad", "sup", "da", "eps", "dq", "mp", " df", "dos", "du", "dr", "vm", "cp", "hp", " p", "b"], "a": ["app", "oa", "ma", "aaa", "sa", "am", "ta", "result", "la", "va", "na", "da", "x", "qa", "ae", "amd", "aux", "d", "ia", "this", "A", "input", "data", "index", "e", "ea", "alpha", "f", "missing", "self", "auto", "u", "all", "work", "sta", "ba", "ab", "audio", "aa", "an", "area", "c", "ac", "y", "tta", "img", "p", "pa", "home", "aj", "wa", "active", "za", "sup", "au", "ai", "api", "ata", "array", "ga", "ada", "ad", "ua", "ca", "as", "o", "s", "something", "ama", "code", "l", "b"], "i": ["in", "mi", "gi", "phi", "qi", "chi", "ei", "x", "zi", "ci", "mini", "fi", "uri", "d", "ii", "cli", "io", "is", "ski", "index", "e", "f", "end", "xi", "li", "multi", "eni", "isi", "hi", "u", "ti", "ami", "pi", "mu", "init", "ix", "abi", "y", "uli", "p", "anti", "ik", "ui", "iu", "oi", "bi", "ni", "ai", "I", "id", "slice", "j", "api", "ri", "site", "ip", "ori", "v", "ji", "ki", "it", "o", "di", "ini", "yi", "ie", "ish", "l", "si", "info", "b"], "sc": ["sr", "sw", "cont", "ch", "lc", " Sc", "st", "scl", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "ss", "uc", "sm", "cr", "esc", "sq", "c", "scan", "osc", "ec", "nc", "sch", "cc", "sec", "cus", "ctx", "sp", "src", "rc", "sche", "cur", "sb", "cs", "si", "cl", "ner", "ci", "screen", "cv", "mc", "sv", "sci"], "n": ["j", "none", "nn", "h", "conn", "nor", "len", "sn", "ns", "in", "d", "no", "count", "nl", "z", "an", "c", "v", "m", "not", "y", "network", "nc", "t", "mn", "nb", "ng", "k", "nt", "ne", "e", "p", "f", "net", "span", "max", "o", "w", "s", "N", "num", "l", "x", "ni", "g", "all", "u", "b", "name"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner itr = new Scanner(System.in);\\n        int K = itr.nextInt();\\n        int N = itr.nextInt();\\n        int[] place = new int[N];\\n\\n        for (int i = 0; i < N; i++) {\\n            place[i] = itr.nextInt();\\n        }\\n        Arrays.sort(place);\\n        int max = K - place[N - 1] + place[0];\\n        for (int i = 1; i < N; i++) {\\n            max = Math.max(max, place[i] - place[i - 1]);\\n        }\\n\\n        System.out.println(K - max);\\n    }\\n}", "target": "10", "substitutes": {"itr": ["Itrf", "itro", "iterrb", "idr", "Itr", "iterf", "intar", "itrb", "ITner", "itrs", "istrb", "istra", "itner", "ITr", " itrf", " itner", "intr", "inter", "iter", "istf", " itrb", " iter", " itar", "itra", " itra", "Iter", "iterra", "intro", " itrs", "ider", " itf", "Itar", "iterrf", "idro", "iterrs", "itrf", "iterar", "idar", "ITer", "itf", "Itrs", "istr", "ITrs", "iterr", "Itner", " itro", "itar"], "K": ["Q", "J", "F", "E", "KE", "Mask", "Max", "HK", "H", "MAX", "T", "KR", "B", "Y", "Length", "Ka", "k", "R", "L", "Key", "C", "PK", "O", "D", "CP", "M", "U", "Z", "S", "SK", "KK", "KS", "X", "V", "ID", "P", "Sk", "Size", "I", "G"], "N": ["Q", "Ne", "J", "Ns", "F", "E", "No", "Part", "Max", "Num", "H", "Node", "T", "NE", "Y", "NT", "Length", "k", "NS", "n", "R", "L", "W", "Len", "C", "O", "NA", "D", "M", "U", "Z", "S", "X", "V", "NN", "P", "Size", "I", "G"], "place": ["change", "one", "base", "ve", "address", "app", "file", "form", "line", "part", "move", "house", "node", "force", "array", "group", "process", "pace", "play", "pe", "square", "pair", "Place", "feature", "position", "element", "match", "ane", "point", "live", "holder", "shape", "like", "value", "index", "key", "plan", "number", "home", "places", "map", "cell", "leave", "ge", "large", "let", "lay", "space", "replace", "view", "parse", "print", "block", "law", "placed", "where", "card"], "i": ["id", "j", "api", "ri", "h", "a", "pi", "mu", "I", "in", "mi", "d", "init", "ii", "ip", "z", "v", "ix", "c", "io", "m", "abi", "ori", "r", "y", "min", "gi", "index", "k", "phi", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "di", "ini", "oi", "ie", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "uri", "mini", "ai", "ni", "b"], "max": ["base", "orig", "gt", "limit", "count", "start", "point", "MAX", "cat", "add", "average", "conf", "X", "diff", "rand", "co", "d", " min", "cross", "std", "default", "plus", "current", "index", "key", "end", "next", "full", "rest", "cl", "exp", "maximum", "auto", "depth", "work", "right", "best", "init", "pop", "c", "out", "value", "active", "ax", "dot", "sum", "parse", "step", "rank", "scale", "id", "wrap", "part", "mod", "no", "Max", "last", "top", "min", "k", "q", "power", "pad", "range", "div", "parent", "est", "size", "total"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int l = sc.nextInt();\\n        int r = sc.nextInt();\\n\\n        long ans = solve(l, r);\\n        System.out.println(ans);\\n    }\\n\\n    private static long solve(int l, int r) {\\n        long R = Math.min(l + 2019, r);\\n        long ans = 2018;\\n        for (long i = l; i <= R; i++) {\\n            for (long j = i + 1; j <= R; j++) {\\n                long x = i * j % 2019;\\n                ans = Math.min(ans, x);\\n                if (ans == 0) {\\n                    return 0;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n", "target": "193", "substitutes": {"sc": ["enc", "ch", "lc", " Sc", "cer", "str", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "cor", "sec", "cus", "sp", "ser", "acc", "src", "rc", "system", "sche", "ca", "cur", "class", "cs", "cl", "pc", "parse", "ner", "exec", "ci", "asc", "sci"], "l": ["ql", "lc", "left", "lp", "lu", "lf", "len", "kl", "al", "d", "nl", "z", "v", "c", "m", "ol", "ln", "ul", "jl", "dl", "il", "k", "e", "p", "n", "L", "f", "ly", "rl", "la", "li", "o", "lb", "el", "lr", "lo", "sl", "u", "lin", "ell", "ls", "ll", "b"], "r": ["sr", "yr", "ri", "h", "right", "rs", "d", "ir", "z", "er", "v", "c", "m", "tr", "rar", "rr", "nr", "re", "hr", "k", "rev", "ur", "p", "n", "f", "e", "mr", "rl", "q", "br", "rc", "row", "rh", "ra", "pr", "w", "range", "rd", "fr", "u", "rt", "ru", "ar", "rb", "rf", "b", "rg"], "ans": ["ions", "ars", "parts", "ana", "aned", "ents", "ks", "la", "na", "acts", "ants", "vs", "ann", "ins", "outs", "alls", "errors", "lan", "ia", "ros", "os", "xs", "es", "ils", "Na", "span", "cs", "results", " scans", "aps", "anas", "vals", "rules", "ani", "features", "sk", "aus", "ss", "anges", "an", "asts", "scan", "ras", "ations", "cas", "rows", "n", "anc", "ANS", "eps", "nan", "ls", "can", "lines", "aces", "ats", "a", "ings", "ons", "ns", "ens", "rs", "AN", "ace", "amps", "_", "acs", "ds", "plan", "ids", "as", "blocks", "ians", "s", "ays", "ops", "XX", "runs"], "R": ["RR", "AR", "right", "RG", "F", "E", "LR", "rs", "RH", "SR", "H", "A", "T", "B", "Y", "n", "L", "Ra", "CR", "Rh", "C", "rh", "ra", "M", "U", "S", "N", "RS", "X", "V", "GR", "P", "RC", "ru", "Rs", "rb", "I", "G", "RA"], "i": ["id", "lc", "ri", "a", "pi", "ij", "I", "in", "mi", "init", "ii", "ind", "z", "v", "ori", "c", "ix", "is", "m", "y", "index", "phi", "e", "p", "n", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "o", "eni", "di", "ini", "ie", "oi", "si", "hi", "ci", "u", "ni", "g", "ai", "b", "vi"], "j": ["py", "h", "ja", "J", "js", "ij", "job", "d", "jj", "ii", "bj", "z", "v", "ix", "c", "m", "y", "jl", "k", "key", "e", "dj", "p", "n", "f", "ji", "aj", "q", "xi", "li", "ax", "ie", "uj", "bi", "jo", "oj", "ni", "u", "jp", "b"], "x": ["id", "px", "wx", "h", "a", " xx", "xx", "rx", "xy", "xt", "xxx", "z", "ix", "v", "c", "an", "y", "xs", "index", "ex", "n", "xc", "p", "xi", "xp", "ax", "dx", "X", "qa", "xes", "b"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tStringBuilder sb=new StringBuilder(\"\");\\n\t\tScanner n=new Scanner(System.in);\\n\t\tint a=n.nextInt();\\n\t\tint b=n.nextInt();\\n\t\twhile (a!=0 || b!=0){\\n\t\t\tfor (int c=0;c<b;c++){\\n\t\t\t\t\tsb.append(\"#\");\\n\t\t\t}\\n\t\t\tSystem.out.println(sb);\\n\t\t\tsb.append(\"\\n\");//\u6539\u884c\\n\t\t\tsb=new StringBuilder(\"#\");\\n\t\t\tfor (int d=2;d<a;d++){\\n\t\t\t\tfor (int e=2;e<b;e++){\\n\t\t\t\t\tsb.append(\".\");\\n\t\t\t\t}\\n\t\t\t\tsb.append(\"#\");\\n\t\t\t\tSystem.out.println(sb);\\n\t\t\t\tsb.append(\"\\n\");//\u6539\u884c\\n\t\t\t\tsb=new StringBuilder(\"#\");\\n\t\t\t}\\n\t\t\tfor (int c=1;c<b;c++){\\n\t\t\t\tsb.append(\"#\");\\n\t\t\t}\\n\t\tsb.append(\"\\n\");//\u6539\u884c\\n\t\tSystem.out.println(sb);\\n\t\ta=n.nextInt();b=n.nextInt();\\n\t\tsb=new StringBuilder(\"\");\\n\t\t}\\n\t}\\n}", "target": "19", "substitutes": {"sb": ["wb", "obb", "sth", "ib", "lp", "sg", "bg", "cb", "zb", "ab", "sn", "abb", "bc", "xb", "sf", "sa", "bb", "bh", "bj", "pb", "bsp", "amb", "bf", "usb", "sound", "gb", "SB", "stab", "db", "erb", "nb", "BB", "mb", "bp", "eb", "kb", "src", " eb", "bs", "buff", "bt", "lb", "fb", " SB", "bd", "sv", "rb", "bash"], "n": ["j", "nn", "conn", "nor", "sn", "ns", "nu", "in", "nl", "er", "an", "not", "v", "r", "en", "network", "t", "ln", "np", "nb", "nt", "cn", "ne", "un", "e", "yn", "p", "on", "net", "f", "pn", "inn", "na", "o", "s", "gener", "i", "fn", "rn", "N", "l", "ner", "ni", "ann", "u", "gn"], "a": ["base", "ba", "ab", "fa", "aaa", "aa", "sa", "d", "am", "count", "an", "area", "m", "ac", "y", "A", "ga", "ad", "ea", "p", "alpha", "f", "pa", "aj", "ar", "la", "ca", "as", "va", "i", "da", "au", "af", "ae", "ai"], "b": ["j", "base", "ba", "h", "ab", "ib", "cb", "length", "body", "abb", "aa", "d", "bb", "bf", "count", "z", "v", "ob", "y", "db", "B", "nb", "k", "e", "p", "mb", "f", "bound", "eb", "end", "bs", "o", "i", "lb", "l", "fb", "x", "u", "rb"], "c": ["sc", "cu", "ch", "cf", "lc", "loc", "cb", "ct", "bc", "d", "count", "uc", "z", "v", "cr", "ac", "tc", "ec", "nc", "t", "ce", "cc", "vc", "e", "cy", "p", "ad", "f", "dc", "rc", "cm", "C", "o", "coll", "i", "cs", "code", "cl", "pc", "oc", "x", "ae", "ci", "u", "cp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint d = sc.nextInt();\\n\t\tint n = sc.nextInt();\\n\t\tif (n == 100) {\\n\t\t\tSystem.out.println((long)(Math.pow(100, d)) * 101);\\n\t\t}\\n\t\telse {\\n\t\t\tSystem.out.println((long)(Math.pow(100, d)) * n);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "245", "substitutes": {"sc": ["sw", "ch", "lc", "cer", "str", "Sc", " SC", "bc", "se", "SC", "sf", "sem", "com", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "cc", "sh", "sp", "ser", "acc", "src", "rc", "sche", "ca", "cur", "cs", "cl", "pc", "exec", "ner", "sl", "ci", "asc", "mc", "sci"], "d": ["id", "nd", "in", "dd", "day", "ind", "dp", "fd", "z", "c", "start", "m", "dom", "t", "dist", "depth", "dt", "data", "ds", "dim", "ad", "e", "p", "dn", "f", "df", "dc", "dat", "sd", "D", "w", "s", "i", "l", "dx", "da", "x", "dy", "b"], "n": ["j", "nn", "conn", "nor", "a", "len", "sn", "ns", "nu", "in", "nl", "v", "ny", "c", "m", "en", "nit", "nc", "t", "ln", "np", "nb", "k", "nt", "e", "ne", "p", "dn", "number", "f", "pn", "o", "w", "s", "i", "N", "l", "x", "nan", "ni", " N", "all", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString input = sc.nextLine();\\n\t\tchar[] arr = input.toCharArray();\\n\t\tfor(int i = 0;i<input.length();i++) {\\n\t\t\tif(i%2==0&&arr[i]!='R'&&arr[i]!='U'&&arr[i]!='D') {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\treturn;\\n\t\t\t}else if(i%2!=0&&arr[i]!='L'&&arr[i]!='U'&&arr[i]!='D') {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(\"Yes\");\\n\\n\t}\\n\\n}\\n", "target": "205", "substitutes": {"sc": ["sw", " Sc", "cer", "str", "Sc", " SC", "bc", "se", "SC", "sf", "scope", " scr", "server", "cr", "esc", "c", "scan", "osc", "spec", "ec", "nc", "sch", "cc", "sec", "sh", "desc", "sp", "src", "ocr", "acc", "rc", "system", "anc", "ca", "cs", "cl", "pc", "ner", "sl", "ci", "asc", "mc", "sci"], "input": ["format", "error", "address", "amp", "api", "file", "form", "buffer", "line", "a", "str", "audio", "in", "inc", "report", "array", "io", "inside", "txt", "url", "this", "Input", "out", "img", "data", "xml", "alpha", "f", "result", "string", "row", "next", "inf", "feed", "raw", "image", "s", "info", "self", "text", "stream", "output", "null", "reader", "list", "source", "config"], "arr": ["enc", "air", "api", "app", "orig", "str", "art", "aaa", "aa", "err", "array", "arg", "adv", "adr", "ix", "ars", "r", "out", "db", "img", "rr", "data", "index", "apt", "cat", "batch", "arch", "dat", "cache", "acc", "br", "ray", "char", "row", "dict", "att", "av", "wr", "coll", "na", "el", "fr", "parse", "attr", "dr", "arc", "ann", "ar", "list", "order"], "i": ["id", "j", "iii", "lc", "ri", "api", "h", "length", "pi", "mu", "in", "d", "ii", "ip", "cli", "ori", "v", "io", "c", "start", "ix", "iv", "is", "y", "t", "gi", "index", "adi", "k", "phi", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "s", "isi", "oi", "ie", "eni", "ei", "l", "si", "bi", "info", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "temp", "I", "source"]}}
{"code": "import java.util.*;\\npublic class Main{\\npublic static void main(String[] args){\\nScanner sc = new Scanner(System.in);\\n  String w = sc.next();\\n  char[] alp = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\\n  boolean b = true;\\n  for(int i = 0;i < 26;i++){\\n    int counter = 0;\\n    for(int j = 0;j < w.length();j++){\\n      if(w.charAt(j) == alp[i]){\\n        counter++;\\n      }\\n    }\\n    if(counter%2 == 1){\\n      b = false;\\n      System.out.println(\"No\");\\n      break;\\n    }\\n  }\\n    if(b)System.out.println(\"Yes\");\\n}}", "target": "103", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "ss", "uc", "cr", "esc", "iss", "c", "scan", "osc", "sync", "r", "spec", "sub", "nc", "sec", "sh", "desc", "nt", "sp", "acc", "ocr", "rc", "system", "anc", "cl", "exp", "pc", "exec", "ner", "ci", "asc", "g", "mc", "sci"], "w": ["fw", "sw", "wb", "tw", "h", "a", "wal", "wh", "d", "v", "now", "c", "m", "r", "y", "word", "t", "wp", "won", "e", "wd", "p", "ew", "f", "wei", "www", "q", "W", "wa", "string", "ws", "widget", "working", "o", "we", "s", "l", "wt", "self", "x", "nw", "g", "u", "wall", "work"], "alp": ["alpa", "isalP", "calpp", "pala", "ala", "isalp", "glp", "glpa", "gla", " alps", "alP", " alpa", " alb", "glb", "alps", "calP", " alpp", "palb", "alpp", "calp", "palp", "palpa", "isalpp", " alP", "isalps", "calps", " ala", "alb"], "i": ["ri", "pi", "ij", "I", "mi", "init", "ip", "ii", "z", "io", "ix", "c", "is", "ori", "v", "y", "gi", "index", "e", "p", "n", "qi", "f", "ji", "ki", "ui", "xi", "li", "iu", "multi", "eni", "di", "ini", "ie", "oi", "l", "si", "bi", "info", "x", "zi", "ci", "u", "ni", "ti", "jp", "ai", "uri"], "counter": ["cmp", "inner", "lc", "ter", "offset", "page", "server", "count", "child", "master", "pointer", "seed", "outer", "inter", "second", "r", "iter", "current", "const", "card", "index", "nr", "key", "number", "continue", "n", "Counter", "f", "ver", "sp", "currency", "expression", "result", "prev", "processor", "cm", "cur", "coll", "per", "parent", "code", "lr", "keep", "num", "keeper", "fr", "info", "sum", "x", "ner", "loop", "step", "clock", "entry"], "j": ["ch", "ri", "h", "ja", "J", "a", "part", "js", "ij", "other", "jj", "ii", "bj", "z", "v", "ix", "je", "r", "y", "point", "jc", "jl", "k", "key", "e", "dj", "p", "n", "obj", "f", "ji", "aj", "q", "ui", "br", "off", "xi", "li", "it", "o", "di", "pr", "adj", "ie", "l", "num", "si", "uj", "x", "jo", "u", "g", "ni", "jp"], "b": ["base", "ib", "h", "ab", "body", "a", "bc", "d", "bb", "bf", "gb", "c", "ob", "r", "y", "db", "t", "B", "nb", "e", "be", "p", "n", "bar", "f", "mb", "emb", "bis", "bs", "o", "sb", "l", "bi", "fb", "x", "bd", "g", "u", "rb"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.*;\\nimport java.math.BigInteger;\\npublic class Main {\\n\tpublic static void main(String[] args)throws IOException {\\n\t\tFastReader sc = new FastReader();\\n\t\tPrintWriter pw = new PrintWriter(System.out);\\n\t\tint n = sc.nextInt();\\n\t\tlong arr[] = new long[n];\\n\t\tint zero = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tarr[i] = sc.nextLong();\\n\t\t\tif (arr[i] == 0)\\n\t\t\t\tzero++;\\n\t\t}\\n\t\tif (zero > 0) {\\n\t\t\tSystem.out.println(0);\\n\t\t\treturn;\\n\t\t}\\n\t\tlong prod = 1;\\n\t\tboolean flag = false;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tif (arr[i] <= ((long)Math.pow(10, 18)) / prod) {\\n\t\t\t\tprod = prod * arr[i];\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(-1);\\n\t\t\t\tflag = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif (!flag) {\\n\t\t\tSystem.out.println(prod);\\n\t\t}\\n\\n\\n\\n\t}\\n}\\n\\n\\n\\n\\n\\nclass FastReader {\\n\tBufferedReader br;\\n\tStringTokenizer st;\\n\\n\tpublic FastReader() {\\n\t\tbr = new BufferedReader(new\\n\t\t                        InputStreamReader(System.in));\\n\t}\\n\\n\tString next() {\\n\t\twhile (st == null || !st.hasMoreElements()) {\\n\t\t\ttry {\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t} catch (IOException  e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t}\\n\t\treturn st.nextToken();\\n\t}\\n\\n\tint nextInt() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\\n\tlong nextLong() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\\n\tdouble nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n\\n\tString nextLine() {\\n\t\tString str = \"\";\\n\t\ttry {\\n\t\t\tstr = br.readLine();\\n\t\t} catch (IOException e) {\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t\treturn str;\\n\t}\\n}", "target": "27", "substitutes": {"sc": ["sw", "ch", "cf", "lc", " Sc", "cer", "Sc", " SC", "bc", "scope", "SC", "sem", "ss", "cli", "uc", "cr", "esc", "sq", "c", "osc", "sync", "r", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "dc", "src", "acc", "rc", "system", "cam", "sche", "contract", "ca", "cs", "cl", "pc", "RC", "ci", "asc", "cv", "reader", "mc", "sci"], "pw": ["lpw", "ppW", "lpws", " pW", "pws", " pws", "ppws", "lpwd", "ppw", "pwd", "lpW", "ppwd", " pwd", "pW"], "n": ["j", "nn", "len", "sn", "ns", "d", "no", "count", "z", "v", "c", "m", "en", "out", "network", "y", "nc", "t", "nb", "nr", "k", "nt", "e", "number", "p", "f", "pos", "ne", "net", "span", "o", "w", "s", "N", "num", "l", "x", "nan", "u", "size", "b"], "arr": ["enc", "air", "base", "ch", "app", "ab", "a", "aaa", " array", "aa", "err", "bb", "array", "rep", "adr", "abc", "abs", "ars", "r", "war", "gr", "img", "rr", "data", "xml", "obj", "p", "Array", "arch", "arm", "dat", "acc", "dict", "av", "na", "att", "coll", "Ar", "pad", "pr", "div", "el", "fr", "l", "x", "frac", "attr", "dr", "ext", "arc", "auto", "ar", "list", "b"], "zero": ["token", "nz", "one", "none", "nil", "error", "ma", "free", "empty", "no", "ii", "negative", "z", "io", "second", "nothing", "mega", "data", "index", "five", "e", "number", "ne", "zone", "Zero", "missing", "two", "inf", "na", "positive", "next", "o", "eight", "micro", "lo", "si", "zer", "x", "minus", "diff", "letter", "null", "size", "zip", "never", "scale", "zo"], "i": ["id", "slice", "inner", "j", "none", "api", "ri", "h", "pi", "mu", "I", "in", "d", "init", "mi", "ii", "ip", "cli", "z", "v", "ix", "io", "abi", "m", "r", "y", "shift", "gi", "data", "index", "uli", "phi", "e", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "si", "bi", "hi", "info", "x", "qa", "ci", "u", "ni", "ti", "fi", "ai", "uri", "mini", "b"], "prod": ["perda", "perds", "prdc", "propf", "precd", "prods", "Prod", "prd", "prb", " prof", "prds", " proda", "prob", "Prods", "prox", "prof", "procd", "Prox", "pref", "Procd", "prodc", "Prof", "perd", "preds", " prox", "Prob", "prf", "percd", "perf", "perx", " prods", "perdc", "prx", " prodc", "perb", "proda", "prda", "propd", "propcd", "pred", "propds"], "flag": ["close", " flagged", "lag", "cloud", "prop", " lag", "line", "len", "part", "offset", "neg", " pig", "force", " flags", "die", "count", "fd", "type", " bit", "sync", "kind", "wait", "ret", "cat", "star", "bit", "flags", "wave", "bug", "leaf", "Flag", "fun", "binary", "FLAG", "debug", "zag", "maybe", "ish", "code", "log", "agg", "info", "status", "mask", "af", "valid", "sign", " debug", "ag", "inline", " bug"], "br": ["ler", "sr", "ch", "orb", "bro", "or", "DR", "bc", "Br", "fore", "bb", "err", "bh", "ber", "BR", "cr", "adr", " tr", "r", "db", "gr", "tr", "img", "RB", "jp", "pre", "hr", "be", "ur", "p", "obj", "sp", "mr", "bar", "ver", "prev", "bridge", "next", "browser", "bal", "pr", "sb", "bt", "buf", "div", "lr", "fr", "brush", "pl", "dr", "bl", "rib", "rb", "b"], "st": ["ast", "sr", "strip", "Str", "sth", "nd", "ct", "ft", "sn", "sa", "ust", "ut", "d", "ss", "stress", " est", "std", "pe", "cr", "stable", "r", "pt", "sta", "ld", "const", "t", "stri", "sh", "fe", "ste", "nt", "e", "be", "p", "sp", "src", "string", "ost", "pr", "s", "sb", "ST", "rest", "bt", "sign", "fr", "l", "sts", "cl", "sl", "struct", "bl", "ist", "est", "rt", "inst", "St"], "str": ["sr", "enc", "j", "Str", "doc", "lc", "h", "line", "d", "err", "z", "cr", "style", "url", "r", "pt", "STR", "tr", "t", "stri", "data", "key", "p", "pos", "sp", "f", "string", "char", "dict", "pass", "pr", "tree", "div", "code", "fr", "cl", "exp", "text", "sl", "ner", "dr", "bl", "output"]}}
{"code": "import java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String S = sc.next();\\n        List<String> strListOdd = Arrays.asList(\"R\", \"U\", \"D\");\\n        List<String> strListEven = Arrays.asList(\"L\", \"U\", \"D\");\\n        for (int i = 0; i < S.length(); i++) {\\n            String c = String.valueOf(S.charAt(i));\\n            if ((i % 2 == 0) && !strListOdd.contains(c) || (i % 2 == 1) && !strListEven.contains(c)) {\\n                System.out.println(\"No\");\\n                return;\\n            }\\n        }\\n\\n        System.out.println(\"Yes\");\\n    }\\n}", "target": "205", "substitutes": {"sc": ["sw", "lc", " Sc", "or", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "ss", "uc", "cr", "esc", "scan", "osc", "sync", "sub", "nc", "sch", "cc", "sec", "sh", "cus", "desc", "Desc", "sp", "acc", "rc", "system", "anc", "s", "cs", "cl", "pc", "ner", "RC", "ci", "asc", "sci"], "S": ["SH", "Si", "SS", "As", "SU", "Su", "F", "Sample", "SC", "ss", "Single", "Part", "Standard", "TS", "SM", "SO", "SR", "SER", "H", "A", "T", "OS", "Sl", "SA", "SAM", "NS", "R", "L", "Array", "SE", "C", "Source", "O", "D", "SN", "M", "s", "BS", "ST", "U", "N", " s", "IS", "SI", "Socket", "RS", "P", "GS", "Rs", "I", "St"], "strListOdd": ["strListEDD", "strListODD", "strListOdds", "strStringOodd", "strListEder", "strStringUDD", "strStringUder", "strListEd", "strListEodd", "strListEdd", "strStringOder", "strListOd", "strListOsodd", "strListUodd", "strStringOdd", "strListUDD", "strStringOdds", "strStringOd", "strListEmd", "strListUmd", "strStringUmd", "strListUd", "strListOsdd", "strStringUodd", "strListOsdds", "strListUdd", "strListOmd", "strStringOmd", "strStringUd", "strListPDD", "strStringUdd", "strListOodd", "strListEdds", "strListPder", "strListPdd", "strListPmd", "strStringUdds", "strListUdds", "strListOsd", "strListUder", "strStringODD", "strListOder"], "strListEven": ["strLO", " strListeven", " strChainAlways", " strChainEven", "strLAll", " strListO", "strLEven", " strListAlways", "strChainAll", "strStringEven", "strlistEven", " strChainAll", "strStringAlways", "strListAlways", "strListAll", "strChainAlways", "strChainEven", " strChaineven", " strlistEven", "strlisteven", "strListeven", " strlisteven", "strlistO", "strChaineven", "strLISTO", "strLeven", "strStringAll", "strLAlways", " strlistO", "strLISTeven", "strStringeven", "strListO", " strListAll", "strLISTEven"], "i": ["id", "slice", "j", "ri", "h", "pi", "mu", "I", "in", "d", "ip", "ii", "count", "z", "v", "io", "ix", "abi", "gi", "index", "data", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "oi", "yi", "ie", "chi", "l", "si", "bi", "hi", "info", "zi", "ci", "u", "ti", "uri", "fi", "ai", "temp", "b"], "c": ["cu", "enc", "ch", "cf", "lc", "str", "d", "cr", "v", "esc", "ac", "r", "ec", "nc", "ce", "cc", "k", "cat", "cy", "e", "p", "xc", "f", "dc", "rc", "char", "string", "C", "cur", "o", "coll", "col", "s", "cs", "code", "l", "cl", "pc", "x", "ci", "u", "mc", "b"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner scan = new Scanner(System.in);\\n        int N = scan.nextInt();\\n        String[] words = new String[N];\\n        for(int i=0; i<N; i++){\\n            words[i] = scan.next();\\n        }\\n        scan.close();\\n\\n        int ac_cnt=0;\\n        int wa_cnt=0;\\n        int tle_cnt=0;\\n        int re_cnt=0;\\n\\n        for(int i=0; i<N; i++){\\n            switch(words[i]){\\n                case \"AC\":\\n                    ac_cnt++;\\n                    break;\\n                case \"WA\":\\n                    wa_cnt++;\\n                    break;\\n                case \"TLE\":\\n                    tle_cnt++;\\n                    break;\\n                case \"RE\":\\n                    re_cnt++;\\n                    break;\\n            }\\n        }\\n        System.out.println(\"AC x \" + ac_cnt);\\n        System.out.println(\"WA x \" + wa_cnt);\\n        System.out.println(\"TLE x \" + tle_cnt);\\n        System.out.println(\"RE x \" + re_cnt);\\n    }\\n}", "target": "160", "substitutes": {"scan": ["sc", "can", "slice", "look", "nn", "query", "spin", "se", "in", "err", "report", "server", "connect", "er", "an", "sync", "r", "match", "out", "search", "read", "clean", "stat", "see", "ln", "network", "chan", "cat", "san", "plan", "n", "win", "watch", "walk", "ans", "bug", "cache", "system", "na", "pan", "feed", "run", "skip", "filter", "gram", "dot", "l", "Scan", "log", "pin", "parse", "ignore", "ner", "ann", "reader", "get"], "N": ["Q", "Ne", "J", "Ns", "F", "E", "NL", "RN", "No", "Part", " n", "NB", "Num", "H", "T", "B", "Y", "NT", "NS", "number", "n", "R", "L", "K", "W", "NR", "Len", "C", "O", "MN", "D", "NA", "M", "Z", "S", "X", "V", "NN", "P", "Size", "I", "G"], "words": ["writers", "lines", "rules", "features", "wcs", "pages", "codes", "games", "keys", "reads", "params", "password", "lists", "aws", "parts", "word", "terms", "frames", "months", "strings", "rows", "events", "names", "comments", "Words", "wei", "windows", "weights", "W", "cells", "ws", "blocks", "WS", "w", "pieces", "cats", "tags", "cases", "works", "ants", "results", "users", "ms", "posts", "letters", "list"], "i": ["id", "j", "ri", "h", "pi", "mu", "in", "mi", "init", "ii", "ip", "v", "io", "ix", "c", "y", "gi", "index", "phi", "e", "p", "n", "fi", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "chi", "si", "bi", "hi", "x", "ci", "u", "ni", "ti", "uri", "ai", "I"], "ac_cnt": ["ac_hnt", "ac_count", "ac_cwd", "ac_fct", "ac_dcn", "ac_hnc", "ac_acount", "ac_dcnn", "ac_nnt", "ac_nnd", "ac_rcnn", "ac_acnt", "ac_nwd", "ac_lcn", "ac_cnn", "ac_rcourse", "ac_fnd", "ac_rcn", "ac_nnc", "ac_cn", "ac_fwd", "ac_nct", "ac_dcnt", "ac_hwd", "ac_hount", "ac_lcnt", "ac_course", "ac_acnd", "ac_fount", "ac_lcourse", "ac_dcourse", "ac_fnc", "ac_cnd", "ac_acct", "ac_cct", "ac_lcnn", "ac_rcnt", "ac_fnt", "ac_nount", "ac_cnc"], "wa_cnt": ["wa_cNT", "wa_scct", "wa_acnn", "wa_CNT", "wa_Cnt", "wa_lcct", "wa_course", "wa_acnt", "wa_acNT", "wa_uncnt", "wa_cnc", "wa_cct", "wa_fnt", "wa_cursor", "wa_ucourse", "wa_discursor", "wa_uncNT", "wa_scount", "wa_ucnc", "wa_discnc", "wa_scnn", "wa_acoff", "wa_discourse", "wa_scnt", "wa_lcount", "wa_count", "wa_Coff", "wa_fnc", "wa_uncount", "wa_coff", "wa_uncoff", "wa_fursor", "wa_acount", "wa_discnt", "wa_cnn", "wa_ucnt", "wa_ucursor", "wa_Count", "wa_fourse", "wa_acct", "wa_lcnn", "wa_lcnt"], "tle_cnt": ["tle_cOUNT", "tle_scnt", "tle_cust", "tle_acust", "tle_acst", "tle_lcOUNT", "tle_nnt", "tle_acount", "tle_cout", "tle_dcnt", "tle_acnt", "tle_fnt", "tle_nust", "tle_fst", "tle_fct", "tle_lcnc", "tle_scOUNT", "tle_ucount", "tle_dcust", "tle_acct", "tle_cnc", "tle_lcount", "tle_lcnt", "tle_dcout", "tle_ucst", "tle_cct", "tle_nount", "tle_acout", "tle_acOUNT", "tle_cst", "tle_count", "tle_scount", "tle_acnc", "tle_fount", "tle_scnc", "tle_ucct", "tle_dcount", "tle_ucnt", "tle_nout"], "re_cnt": ["re_crt", "re_scont", "re_csount", "re_cuont", "re_acont", "re_acnt", "re_ncnt", "re_ckt", "re_lcount", "re_cNT", "re_scnt", "re_csNT", "re_scnot", "re_cnot", "re_count", "re_lcnt", "re_lckt", "re_ncount", "re_cunt", "re_ncNT", "re_csrt", "re_cuount", "re_lcNT", "re_acNT", "re_cont", "re_acrt", "re_acount", "re_cunot", "re_acnot", "re_scount", "re_ackt", "re_nckt", "re_csnt", "re_lcrt"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc=new Scanner(System.in);\\n    int m=sc.nextInt();\\n    int a=sc.nextInt();\\n    int b=sc.nextInt();\\n    if(a<=b){\\n      for(int s=a;s<=b;s++){\\n        if(s%m==0){\\n          System.out.println(\"OK\");\\n          break;\\n        }\\n        if((s==b)&&!(b%m==0)){\\n          System.out.println(\"NG\");\\n        }\\n      }\\n    }\\n  }\\n}\\n", "target": "28", "substitutes": {"sc": ["sw", "enc", "cont", "ch", "lc", "soc", " Sc", "str", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "com", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "tc", "ec", "cc", "sec", "ctx", "sp", "ser", "acc", "ocr", "src", "rc", "system", "anc", "sche", "cur", "class", "sb", "cs", "l", "cl", "pc", "ner", "text", "asc", "cv", "sci"], "m": ["mas", "h", "ab", "ma", "mu", "fm", "dm", "mod", "d", "am", "mi", "mt", "om", "md", "sm", "z", "v", "an", "c", "down", "im", "iv", "r", "y", "k", "e", "wm", "p", "n", "machine", "f", "ym", "mm", "mos", "o", "M", "w", "i", "bm", "mac", "l", "x", "mad", "g", "u", "ms", "mo", "mini", "um", "mc"], "a": ["ba", "h", "ab", "fa", "aa", "sa", "d", "am", "an", "c", "area", "ac", "r", "y", "A", "ga", "e", "p", "n", "ea", "f", "alpha", "aj", "va", "as", "ca", "o", "w", "i", "l", "da", "x", "ae", "g", "u", "ai", "sta"], "b": ["j", "base", "ba", "h", "ab", "cb", "length", "bc", "d", "bb", "z", "v", "c", "ob", "r", "y", "db", "t", "B", "nb", "k", "e", "be", "p", "n", "mb", "f", "eb", "bot", "bs", "o", "w", "sb", "i", "lb", "l", "bi", "fb", "x", "g", "u", "rb"], "s": ["j", "gs", "ab", "sg", "fs", "su", "h", "ns", "site", "sf", "sa", "d", "se", "ss", "ps", "sie", "z", "v", "sq", "c", "is", "an", "y", "os", "xs", "t", "es", "k", "ds", "e", "p", "n", "f", "span", "sym", "ws", "bs", "sd", "as", "o", "hs", "w", "sb", "i", "S", "l", "si", "u", "g", "ms", "ls", "size", "ts", "sy"]}}
{"code": "import java.awt.*;\\nimport java.awt.geom.*;\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n  public static void main(String args[]) {\\n    Scanner in = new Scanner(System.in);\\n    String str;\\n    int num[] = new int[26];\\n    while(in.hasNextLine()){\\n      str = in.nextLine();\\n      char [] cin = str.toCharArray();\\n      for(int i=0;i<cin.length;++i){\\n        cin[i]=Character.toLowerCase(cin[i]);\\n        for(int j = 0; j < 27; j++){\\n          if(cin[i] == j+97){\\n            num[j]++;\\n          }\\n        }\\n      }\\n    }\\n    for(int k = 0; k < 26; k++){\\n      char c = (char)(k + 97);\\n      System.out.println(c + \" \" + \":\" + \" \" +num[k]);\\n    }\\n  }\\n}\\n\\n", "target": "242", "substitutes": {"in": ["id", "inner", "login", "sin", "again", "conn", "line", "bin", "fa", "inas", "query", "resource", "init", "inc", "din", "user", "err", "arg", "er", "is", "r", "thin", "out", "con", "input", "ln", "min", "serv", "ex", "n", "isin", "win", "f", "arin", "IN", "rin", "inn", "as", "connection", "pass", "In", "ini", "s", "fin", "readable", "fr", "kin", "exec", "lin", "reader", "b", "ins"], "str": ["id", "sr", "enc", "Str", "doc", "st", "line", "err", "inc", "cr", "txt", "spec", "r", "iter", "out", "read", "STR", "input", "tr", "stri", "data", "e", "p", "n", "sp", "f", "arr", "br", "string", "char", "cur", "pass", "pr", "s", "div", "fr", "parse", "text", "sl", "ner", "dr", "u", "reader", "name"], "num": ["id", "uni", "man", "ban", "loc", "len", "bin", "nu", "cum", "unit", "no", "inc", "init", "Num", "miss", "out", "con", "mon", "mn", "np", "mun", "index", "nr", "un", "dim", "number", "pos", "n", "cat", "span", "digit", "max", "umi", "sum", "info", "NUM", "nom", "text", "du", "nam", "valid", "mom", "all", "gen", "um", "b", "cal", "name"], "cin": ["ku", "cu", "chu", "sin", "lc", "su", "bin", "cos", "cum", "pic", "inc", "cand", "cit", "chin", "cone", "txt", "ac", "spec", "miss", "ce", "cas", "circ", "cus", "data", "chain", "nice", "vc", "tin", "cat", "cn", "cy", "uit", "arr", "cell", "arin", "cycle", "char", "anc", "ca", "ic", "coll", "col", "ini", "nic", "cs", "chi", "asa", "cry", "bi", "kin", "pc", "zi", "frac", "vin", "ci", "arc", "lin", "cil", "vec"], "i": ["id", "api", "ri", "ami", "pi", "I", "mi", "d", "init", "ii", "ip", "cli", "ind", "z", "io", "v", "ori", "abi", "ix", "is", "y", "gi", "index", "jp", "uli", "e", "p", "f", "qi", "ji", "ik", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "l", "si", "bi", "zi", "x", "ci", "ni", "u", "ti", "fi", "ai", "b", "vi"], "j": ["id", "ch", "jet", "h", "ja", "J", "js", "ij", "job", "d", "jj", "bj", "ii", "ind", "z", "v", "jen", "m", "je", "y", "jl", "jc", "key", "e", "dj", "p", "n", "obj", "f", "qi", "ji", "aj", "ik", "q", "xi", "li", "adj", "ie", "el", "oi", "l", "si", "uj", "fr", "x", "jo", "u", "ni", "jp", "b"], "k": ["id", "ku", "ch", "ijk", "sk", "kl", "ek", "kick", "dk", "kh", "ka", "ko", "kn", "z", "v", "ok", "y", "ck", "uk", "kr", "ak", "key", "kat", "p", "n", "f", "ki", "K", "q", "ik", "ks", "ky", "km", "w", "kid", "kw", "kk", "kin", "mk", "ke", "kg", "u", "unk", "b", "work"], "c": ["sc", "cu", "enc", "ch", "cf", "lc", "d", "z", "v", "ac", "r", "ce", "cc", "cy", "cat", "p", "n", "e", "f", "dc", "rc", "char", "anc", "C", "o", "s", "code", "l", "pc", "arc", "ci", "u", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\t\t// define variables & initialize\\n\tprivate static int cnt = 0;\t// how many bubbleSort is used\\n\t\\n\t// sort method :: sort given array using insertion Sort\\n\tpublic static void sort(int[] _A, int _n) {\\n\t\tfor (int i = 0; i <= _n - 1; ++i) {\\n\t\t\tint p_min = i;\\n\t\t\tfor (int j = i; j <= _n - 1; ++j) {\\n\t\t\t\tif (_A[j] < _A[p_min])\\n\t\t\t\t\tp_min = j;\\n\t\t\t}\\n\t\t\tif (i != p_min) {\\n\t\t\t\t_A[i] = _A[i] ^ _A[p_min];\\n\t\t\t\t_A[p_min] = _A[i] ^ _A[p_min];\\n\t\t\t\t_A[i] = _A[i] ^ _A[p_min];\\n\t\t\t\t++cnt;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t}\\n\t\\n\t// print method :: print array\\n\tpublic static void print(int[] _A) {\\n\t\tfor (int i = 0; i < _A.length; ++i) {\\n\t\t\tSystem.out.print(_A[i]);\\n\t\t\tif (i != _A.length - 1)\\n\t\t\t\tSystem.out.print(\" \");\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n\t\\n\t// get method :: get cnt (how many bubbleSort was used)\\n\tpublic static int get() {\\n\t\treturn cnt;\\n\t}\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t////////////////////////////////////\\n\t\tint n = 0;\\n\t\tint[] A;\\n\t\t\\n\t\tn = sc.nextInt();\\n\t\tA = new int[n];\\n\t\t\\n\t\tfor (int i = 0; i < n; ++i) {\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tsort(A, n);\\n\t\tprint(A);\\n\t\tSystem.out.println(get());\\n\t\t\\n\t\t////////////////////////////////////\\n\t\tsc.close();\\n\t}\\n\t\\n}", "target": "199", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner in = new Scanner(System.in);\\n        int A, B, T;\\n        A = in.nextInt(); B = in.nextInt(); T = in.nextInt();\\n\\n        System.out.println(T / A * B);\\n    }\\n}\\n", "target": "4", "substitutes": {"in": ["token", "inner", "login", "path", "again", "doc", "h", "conn", "gin", "line", "bin", "d", "init", "inc", "din", "err", "lib", "std", "c", "scan", "is", "m", "OUT", "r", "inside", "out", "con", "thin", "t", "ln", "input", "data", "gen", "ex", "n", "isin", "f", "win", "IN", "rin", "inn", "inf", "binary", "connection", "In", "ini", "ax", "i", "nin", "l", "log", "kin", "between", "pin", "x", "diff", "g", "lin", "Out", "socket", "reader", "buffer", "source", "ins"], "A": ["As", "AR", "a", "F", "EA", "E", "MA", "GA", "The", "AB", "AP", "Area", "AA", "Ma", "Alpha", "mA", "Y", "PA", "SA", "Na", "Fa", "L", "AM", "API", "FA", "BA", "W", "C", "CA", "Az", "NA", "D", "In", "M", "HA", "U", "S", "N", "Ca", "LA", "X", "AF", "TA", "P", "OA", "I", "G", "AC"], "B": ["Q", "BI", "F", "E", "LB", "I", "Bot", "DB", "CB", "AB", "BY", "Ab", "Bi", "AA", "NB", "BF", "UB", "Bs", "TB", "Y", "BER", "BB", "R", "L", "QB", "WB", "BA", "IB", "W", "BC", "C", "O", "D", "M", "BS", "U", "S", "N", "OB", "V", "X", "P", "BD", "Blue", "Bar", "b", "G"], "T": ["Tx", "Tab", "TT", "F", "E", "TN", "TS", "TL", "Test", "Offset", "WT", "PT", "t", "TX", "TB", "Y", "TG", "BB", "R", "L", "TC", "AT", "TE", "W", "Tu", "C", "O", "Type", "TF", "D", "U", "Z", "S", "N", "TH", "V", "X", "TA", "P", "G", "UT"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int num = in.nextInt();\\n        int dis = in.nextInt();\\n        in.close();\\n        dis += dis + 1;\\n        int ans = num / dis;\\n        if (num % dis != 0) {\\n            ans++;\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "238", "substitutes": {"in": ["token", "inner", "login", "again", "doc", "h", "file", "gin", "bin", "cin", "rec", "init", "din", "inc", "err", "lib", "arg", "c", "is", "m", "url", "inside", "r", "en", "out", "con", "this", "input", "ln", "serv", "data", "isin", "n", "ex", "arin", "win", "IN", "rin", "inn", "as", "connection", "it", "pass", "In", "ini", "fin", "i", "readable", "nin", "l", "log", "kin", "pin", "exec", "g", "lin", "socket", "reader", "buffer", "source", "ins"], "num": ["id", "uni", "mid", "one", "nn", "loc", "lu", "su", "gin", "len", "bin", "nu", "unit", "inc", "om", "an", "Num", "norm", "en", "con", "dist", "ul", "mn", "non", "mon", "nb", "nr", "nt", "un", "number", "pos", "n", "umi", "na", "mult", "multi", "us", "fn", "sum", "NUM", "nom", "du", "um", "ou", "cal", "name"], "dis": ["lc", "loc", "syn", "Dis", "nn", "nor", "bad", "des", "len", "lan", "sn", "part", "or", "DIS", "se", "d", "no", "mi", "mis", "lib", "is", "scan", " Dis", "ee", "out", "os", "dist", "non", "min", "es", "cor", "le", "dir", "nr", "pre", "re", "ds", "nt", "un", "ne", "det", "pos", "nos", "cond", "ly", "ui", "li", "la", "par", "di", "col", "s", "mor", "us", "el", "fr", "lo", "common", "da", "fre", "resp", "x", "del", "du", "rel", "diff", "ni", "dy", "de"], "ans": [" scans", "outs", "mas", "nn", "ats", "alls", "lan", "ons", "ns", "aid", "aus", "annis", "nas", "nes", "ions", "vers", "an", "scan", "ars", "asses", "os", "urs", "aned", "cas", "es", "offs", "ds", "oss", "atches", "nos", "ks", " spans", "anc", "ANS", "na", "as", "les", "ians", "s", "acts", "cs", "ants", "nan", "ann", "ins"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.File;\\nimport java.io.FileInputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n   private static final String INPUT_FILE_PATH = \"\";\\n\\n   static void solve(InputReader in, PrintWriter out) {\\n      int x = in.nextInt();\\n      int y = in.nextInt();\\n\\n      for (int i = 0; i <= x; i++) {\\n         if ((i * 2) + ((x - i) * 4) == y) {\\n            out.println(\"Yes\");\\n            return;\\n         }\\n      }\\n      out.println(\"No\");\\n   }\\n\\n   private static class InputReader {\\n      private BufferedReader br;\\n      private StringTokenizer st;\\n\\n      public InputReader(InputStream inputStream) {\\n         this.br = new BufferedReader(new InputStreamReader(inputStream), 32768);\\n         this.st = null;\\n      }\\n\\n      public String nextToken() {\\n         while (st == null || !st.hasMoreTokens()) {\\n            try {\\n               st = new StringTokenizer(br.readLine());\\n            } catch (IOException e) {\\n               throw new RuntimeException(e);\\n            }\\n         }\\n         return st.nextToken();\\n      }\\n\\n      public int nextInt() {\\n         return Integer.parseInt(nextToken());\\n      }\\n\\n      public long nextLong() {\\n         return Long.parseLong(nextToken());\\n      }\\n\\n      public double nextDouble() {\\n         return Double.parseDouble(nextToken());\\n      }\\n   }\\n\\n   public static void main(String[] args) throws Exception {\\n      InputStream inputStream = INPUT_FILE_PATH.isEmpty()\\n         ? System.in\\n         : new FileInputStream(new File(INPUT_FILE_PATH));\\n      OutputStream outputStream = System.out;\\n\\n      InputReader inputReader = new InputReader(inputStream);\\n      PrintWriter printWriter = new PrintWriter(outputStream);\\n\\n      solve(inputReader, printWriter);\\n\\n      printWriter.close();\\n   }\\n\\n}\\n", "target": "62", "substitutes": {"INPUT_FILE_PATH": ["INPUT_FILEPPATH", "INPUT_LINE_PATH", "INPUT_FILE_DIR", "INPUT_FILEGPATH", "INPUT_DIR_PATH", "INPUT_FILEPURI", "INPUT_FILE_TYPE", "INPUT_File_path", "INPUT_LINEPPATH", "INPUT_LINE_URI", "INPUT_LINEPDIR", "INPUT_FILE_Path", "INPUT_LINEPNAME", "INPUT_DIR_TYPE", "INPUT_FILEPNAME", "INPUT_File_NAME", "INPUT_DIR_DIR", "INPUT_FILE_NAME", "INPUT_FILEGNAME", "INPUT_LINE_NAME", "INPUT_File_Path", "INPUT_File_PATH", "INPUT_FILE_URI", "INPUT_DIR_NAME", "INPUT_FILEPDIR", "INPUT_LINEPURI", "INPUT_FILE_path", "INPUT_FILEGPath", "INPUT_LINE_DIR", "INPUT_FILEGpath"], "in": ["inner", "again", "login", "path", "file", "a", "str", "bin", "query", "d", "init", "err", "inc", "din", "cli", "std", "inside", "is", "url", "r", "con", "read", "input", "min", "data", "ex", "win", "context", "src", "IN", "rin", "include", "inn", "inf", "ic", "as", "binary", "pass", "In", "image", "ini", "nin", "l", "ran", "kin", "pin", "between", "into", "lin", "reader", "source", "ins"], "out": ["again", "pool", "png", "error", "outs", "ins", "file", "a", "check", "comment", "line", "part", "buffer", "query", "bin", "page", "err", "report", "println", "client", "io", "outer", "OUT", "name", "extra", "res", "r", "this", "to", "input", "key", "ex", "n", "obj", "lock", "net", "cache", "result", "IN", "dump", "string", "o", "pass", "w", "conf", "up", "log", "view", "exp", "exec", "print", "Out", "output", "null", "gen", "list", "temp", "writer", "write"], "x": ["id", "one", "px", "j", "h", "wy", "yx", "xx", "length", "height", "d", "no", "xy", "xxx", "z", "v", "ix", "c", "en", "xs", "t", "size", "index", "e", "p", "n", "ex", "f", "xi", "xp", "width", "w", "ax", "s", "l", "dx", "hi", "X", "u", "my", "b"], "y": ["py", "j", "h", "a", "yx", "xx", "d", "xy", "ii", "z", "v", "ny", "ix", "start", "yes", "c", "yy", "t", "Y", "e", "p", "n", "oy", "f", "dy", "xi", "ky", "vy", "w", "s", "ey", "yi", "zy", "ya", "l", "X", "u", "b", "sy"], "i": ["id", "j", "ri", "h", "ami", "length", "pi", "d", "ii", "ip", "z", "v", "io", "ix", "c", "m", "t", "gi", "index", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "w", "oi", "ie", "yi", "l", "si", "bi", "hi", "info", "zi", "ci", "u", "ti", "uri", "fi", "ai", "I"], "br": ["ler", "sr", "ab", "nor", "str", "bro", "or", "Br", "bc", "obl", "bb", "bh", "ber", "BR", "cr", "ibr", "r", "db", "gr", "tr", "kr", "hr", "be", "ur", "obj", "p", "sp", "arr", "shr", "mr", "bar", "vr", "src", "cro", "ocr", "bridge", "ar", "bal", "cur", "pr", "sb", "buf", "bt", "rest", "lr", "fr", "sts", "pl", "dr", "bl", "rt", "rb", "b"], "st": ["sc", "sw", "ast", "nd", "sth", "inst", "ct", "str", "ft", "sn", "sa", "ut", " est", "ss", "std", "stop", "cr", "style", "stable", "start", "r", "pt", "sta", "ld", "const", "t", "tr", "sh", "stri", "fe", "ste", "be", "ur", "p", "obj", "sp", "src", "string", "ost", "pr", "sb", "sign", "ST", "rest", "bt", "rd", "fr", "sts", "l", "store", "sl", "first", "struct", "bl", "rt", "est", "ist", "b", "St"], "inputStream": ["outputSocket", "inputFile", "outputWriter", "requestReader", "importReader", " inputFile", " inputWriter", "inputSocket", " inputSteam", " inputSocket", "outputReader", "outputSteam", "inputCh", "importCh", "InputReader", "InputCh", "inputSteam", "requestStream", "importStream", "requestSteam", "InputSteam", "InputFile", "InputStream", "outputFile", "inputWriter", "importWriter", "requestSocket", "outputCh", "InputWriter"], "outputStream": ["OutputFile", "outputWriter", "inputFile", "outSteam", "OutputWriter", "outReader", "outputSteam", "outputReader", "OutputStream", "inputSteam", "OutputSteam", "outStream", "OutputReader", "outputFile", "inputWriter", "outWriter", " outputWriter", " outputSteam", " outputFile"], "inputReader": ["inputRead", "outputWriter", "InputParser", " inputWriter", " inputParser", "outputReader", "inputParser", "InputReader", "InputRead", "InputStream", "inputWriter", " inputRead", "outputRead", "outputParser", "InputWriter"], "printWriter": ["PrintReader", "inputHandler", "outputWriter", "inputWrite", " printBuilder", "PrintStream", "reportWriter", "PrintWriter", "printReader", "reportStream", "outputReader", "PrintHandler", "reportReader", "inputBuilder", "outputHandler", "PrintRunner", "PrintWrite", "reportRunner", "printStream", "printBuilder", " printReader", "inputWriter", "printWrite", "printHandler", "outputBuilder", "outputWrite", "inputRunner", " printWrite", "printRunner"]}}
{"code": "import java.util.Scanner;\\n \\nclass Main{\\n  public static void main(String[] arg){\\n    int n;\\n    int [][] card = new int[4][13];\\n\\n    for(int i=0; i<4; i++)\\n        for(int j=0; j<13; j++)\\n            card[i][j] = 0;\\n\\n    Scanner in = new Scanner(System.in);\\n\\n    n = in.nextInt();\\n\\n    String mark;\\n    int su;\\n\\n    for(int i=0; i<n; i++){\\n        in.nextLine();\\n        mark = in.next();\\n        su = in.nextInt();\\n\\n        if(mark.equals(\"S\"))\\n            card[0][su-1] = 1;\\n        else if(mark.equals(\"H\"))\\n            card[1][su-1] = 1;\\n        else if(mark.equals(\"C\"))\\n            card[2][su-1] = 1;\\n        else\\n            card[3][su-1] = 1;\\n    }\\n\\n    for(int i=0; i<4; i++)\\n        for(int j=0; j<13; j++)\\n            if(card[i][j] == 0){\\n                if(i == 0)\\n                    System.out.println(\"S \" + (j+1));\\n                else if(i == 1)\\n                    System.out.println(\"H \" + (j+1));\\n                else if(i == 2)\\n                    System.out.println(\"C \" + (j+1));\\n                else\\n                    System.out.println(\"D \" + (j+1));\\n            }\\n  }\\n}", "target": "189", "substitutes": {"arg": ["path", "gs", "Arg", "param", "Args", "type", "params", "inter", "match", "word", "request", "ass", "cat", "arr", "def", "include", "argument", "pass", "par", "num", "config", "pattern", "load", "g", "list", "entry"], "n": ["nn", "nor", "len", "sn", "ns", "d", "nl", "z", "c", "m", "en", "y", "network", "nit", "nc", "ln", "nb", "nr", "k", "nt", "un", "ne", "p", "f", "net", "span", "pn", "inn", "o", "s", "N", "l", "num", "ner", "x", "nw", "nan", "u", "ni", "b"], "card": ["cont", "can", "id", "cf", "man", "center", "co", "file", "condition", "check", "comment", "line", "move", "book", "node", "cross", "rule", "cast", "group", "ard", "draw", "character", "style", "way", "element", "match", "word", "read", "ck", "Card", "shape", "ce", "event", "data", "index", "cat", "add", "cell", "bug", "cards", "result", "cart", "carry", "char", "include", "cap", "car", "coll", "compl", "pass", "col", "allow", "div", "parent", "field", "code", "view", "component", "parse", "record", "block", "load", "letter", "valid", "arc", "day", "list", "cal", "entry"], "i": ["id", "slice", "api", "ri", "ani", "h", "ami", "pi", "my", "mi", "init", "ip", "ii", "cli", "ori", "io", "im", "ix", "is", "v", "c", "z", "abi", "y", "gi", "index", "adi", "phi", "e", "p", "anti", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "it", "multi", "eni", "di", "ini", "ie", "oi", "yi", "chi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "ti", "ai", "mini", "I"], "j": ["jet", "h", "so", "ij", "jj", "ju", "ny", "je", "jit", "ld", "jl", "sh", "qi", "w", "x", "ja", "d", "ii", "bj", "z", "style", "jen", "ia", "jay", "e", "f", "cell", "li", "pr", "note", "u", "ani", "J", "job", "ah", "jam", "ix", "c", "y", "p", "aj", "ik", "ui", "off", "adj", "fr", "jo", "jp", "js", "jan", "v", "jc", "jon", "dj", "ji", "q", "it", "o", "di", "ie", "l", "si", "uj", "g", "oj", " dj", "zip", "b"], "in": ["id", "inner", "path", "again", "login", "doc", "conn", "file", "fa", "bin", "d", "din", "inc", "err", "er", "an", "c", "scan", "is", "io", "r", "en", "out", "thin", "con", "input", "ln", "min", "serv", "re", "gen", "p", "ex", "f", "win", "isin", "IN", "rin", "inn", "ic", "as", "connection", "it", "pass", "In", "ini", "s", "conf", "readable", "nin", "ax", "l", "fr", "log", "kin", "pin", "ner", "g", "lin", "socket", "reader", "buffer", "b", "source", "ins"], "mark": ["token", "light", "strip", "fill", "rank", "look", "place", "face", "line", "comment", "param", "check", "ank", "mate", "rule", "marks", "label", "draw", "type", "character", "member", "broad", "match", "ana", "tag", "han", "ack", "clean", "shape", "pick", "mean", "make", "roll", "gro", "key", "p", "brand", "map", "ean", "deep", "track", "me", "park", "string", "meet", "ge", "Mark", "na", "ph", "marked", "allow", "date", "keep", "guard", "note", "set", "record", "ner", "shadow", "mask", "ark", "block", "message", "sign", "name", "work"], "su": ["sr", "sw", "cu", "suit", "sea", "sc", "strip", "loc", "SU", "Su", "Se", "sn", "nu", "sk", "wh", "site", "sf", "sa", "se", "sem", "rue", "ace", "sing", "ss", "sel", "sie", "pe", " Su", "im", "sq", "uu", "stri", "cas", "session", "ste", "prof", "pro", "pos", "ima", "osa", "ui", "seat", "nat", "tu", " sus", "pass", "oe", "tri", "us", "ie", "sen", "s", "asa", "space", "sex", "si", "sup", "sl", "sur", "du", "eu", "u", "ru", "une", "zip", "ou", "sv"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc =new Scanner(System.in);\\n    long a =sc.nextLong();\\n    long b =sc.nextLong();\\n    long c =sc.nextLong();\\n    long d =sc.nextLong();\\n    long e =a*c;\\n    long f =b*d;\\n    long g =a*d;\\n    long h =b*c;\\n    long ans =Math.max(e,f);\\n    ans =Math.max(ans,g);\\n    ans =Math.max(ans,h);\\n    System.out.println(ans);\\n  }\\n}", "target": "244", "substitutes": {"sc": ["sw", "enc", "cont", "ch", "lc", "soc", " Sc", "loc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "cli", "uc", "cr", "esc", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "cor", "cus", "ctx", "sp", "dc", "src", "acc", "system", "anc", "sche", "cam", "cur", "sb", "cs", "cl", "pc", "ner", "parser", "asc", "cv", "sci"], "a": ["ba", "ab", "fa", "ai", "aa", "sa", "am", "z", "an", "m", "ac", "y", "A", "ga", "k", "ad", "ea", "p", "n", "alpha", "ca", "as", "o", "w", "s", "i", "l", "da", "x", "ae", "u", "ar"], "b": ["j", "ba", "ab", "bc", "bb", "z", "v", "m", "r", "y", "db", "B", "ga", "k", "be", "p", "n", "eb", "o", "w", "sb", "s", "i", "lb", "l", "x", "ae", "u"], "c": ["cu", "cf", "lc", "cd", "fc", "z", "v", "m", "ac", "r", "y", "ec", "ce", "t", "k", "p", "n", "dc", "q", "C", "w", "s", "i", "cs", "l", "x", "ci", "u"], "d": ["j", "cd", "in", "dd", "z", "v", "m", "r", "y", "t", "k", "ad", "p", "n", "dn", "dc", "dat", "q", "sd", "D", "o", "w", "s", "i", "l", "da", "x", "u", "dy"], "e": ["E", "z", "v", "an", "m", "r", "ee", "y", "ec", "t", "es", "fe", "ea", "p", "n", "be", "o", "w", "s", "i", "ei", "l", "x", "ae", "u", "size"], "f": ["fg", "j", "F", "fa", "fc", "fd", "z", "v", "m", "r", "y", "t", "fe", "p", "n", "df", "q", "o", "w", "s", "i", "ie", "ff", "l", "fr", "x", "af", "u"], "g": ["fg", "j", "z", "v", "gb", "m", "r", "y", "gh", "sh", "ga", "k", "p", "n", "dc", "q", "gg", "o", "w", "s", "i", "l", "go", "x", "u", "G", "gn"], "h": ["hh", "j", "ah", "bh", "hd", "ha", "z", "v", "m", "r", "y", "H", "t", "gh", "sh", "k", "p", "n", "ih", "q", "ph", "hs", "w", "s", "i", "l", "hi", "x", "u"], "ans": ["man", "ions", "ars", "ana", "ee", "aned", "ents", "ks", "na", "ants", "da", "x", "ang", "ann", "outs", "fa", "lan", "dd", "atan", "nas", "en", "ows", "es", "ea", "ends", "cs", "aps", "anas", " means", "sk", "aning", "aus", "anges", "an", "ras", "asts", "y", "ases", "han", "olds", "cas", "rows", "groups", "anon", "p", "anc", "ANS", "eps", "anes", "nan", "ls", "can", "ats", "ons", "ns", "ens", "amps", "v", "vers", "ga", "offs", "ds", "san", "ids", "ca", "as", "s", "gan", "ays", "l", "ins"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\\n    /**\\n     * @param args the command line arguments\\n     */\\n    public static void main(String[] args) {\\n        // TODO code application logic here\\n        Scanner stdIn = new Scanner(System.in);\\n        \\n        for(int i = 1;i <= 10000;i++){\\n            int x = stdIn.nextInt();\\n            System.out.println(\"Case \"+i+\": \"+x);\\n        }\\n    \\n}\\n}", "target": "97", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        // TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n\\n        if(a + b == 3) {\\n            System.out.println(3);\\n        }\\n        else if(a + b == 4) {\\n            System.out.println(2);\\n        }\\n        else {\\n            System.out.println(1);\\n        }\\n        sc.close();\\n\\n    }\\n\\n}\\n", "target": "236", "substitutes": {}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.io.DataInputStream;\\nimport java.io.IOException;\\nimport java.io.FileInputStream;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in Actual solution is at the top\\n *\\n * @author MaxHeap\\n */\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    InputStream inputStream = System.in;\\n    OutputStream outputStream = System.out;\\n    InputReader in = new InputReader(inputStream);\\n    PrintWriter out = new PrintWriter(outputStream);\\n    CSlimes solver = new CSlimes();\\n    solver.solve(1, in, out);\\n    out.close();\\n  }\\n\\n  static class CSlimes {\\n\\n    public void solve(int testNumber, InputReader in, PrintWriter out) {\\n      int n = in.nextInt();\\n      char[] s = in.next().toCharArray();\\n      int ans = 0;\\n      char last = '0';\\n      for (int i = 0; i < n; ++i) {\\n        if (s[i] != last) {\\n          ++ans;\\n        }\\n        last = s[i];\\n      }\\n      out.println(ans);\\n    }\\n\\n  }\\n\\n  static interface FastInput {\\n\\n  }\\n\\n  static class InputReader implements FastInput {\\n\\n    final private int BUFFER_SIZE = 1 << 16;\\n    private DataInputStream din;\\n    private byte[] buffer;\\n    private int bufferPointer;\\n    private int bytesRead;\\n\\n    public InputReader(InputStream is) {\\n      din = new DataInputStream(is);\\n      buffer = new byte[BUFFER_SIZE];\\n      bufferPointer = bytesRead = 0;\\n    }\\n\\n    public InputReader(String file_name) throws IOException {\\n      din = new DataInputStream(new FileInputStream(file_name));\\n      buffer = new byte[BUFFER_SIZE];\\n      bufferPointer = bytesRead = 0;\\n    }\\n\\n    public String next() {\\n      StringBuilder sb = new StringBuilder();\\n      byte c = read();\\n      while (c <= ' ') {\\n        c = read();\\n      }\\n      while (isEmptySpace(c)) {\\n        sb.append((char) c);\\n        c = read();\\n      }\\n      return sb.toString();\\n    }\\n\\n    private boolean isEmptySpace(byte c) {\\n      return c != ' ' && c != '\\n' && c != '\\t' && c != '\\r';\\n    }\\n\\n    public int nextInt() {\\n      int ret = 0;\\n      byte c = read();\\n      while (c <= ' ') {\\n        c = read();\\n      }\\n      boolean neg = (c == '-');\\n      if (neg) {\\n        c = read();\\n      }\\n      do {\\n        ret = ret * 10 + c - '0';\\n      } while ((c = read()) >= '0' && c <= '9');\\n\\n      if (neg) {\\n        return -ret;\\n      }\\n      return ret;\\n    }\\n\\n    private void fillBuffer() {\\n      try {\\n        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\\n      } catch (IOException e) {\\n        throw new RuntimeException(\"trying to read from null input, verify constraints \");\\n      }\\n      if (bytesRead == -1) {\\n        buffer[0] = -1;\\n      }\\n    }\\n\\n    private byte read() {\\n      if (bufferPointer == bytesRead) {\\n        fillBuffer();\\n      }\\n      return buffer[bufferPointer++];\\n    }\\n\\n  }\\n}\\n\\n", "target": "218", "substitutes": {"inputStream": ["outputWriter", " inputWriter", " inputstream", " inputSteam", "outputstream", "inputThread", "outputSteam", " inputStreamer", "innerStreamer", "innerThread", "innerStream", " inputThread", "inputstream", "Inputstream", "inputSteam", "inputStreamer", "InputSteam", "innerstream", "InputStream", "inputWriter", "outputThread", "outputStreamer", "InputWriter"], "outputStream": ["pageSteam", "Outputstream", "outputstream", "OutputString", "outputSteam", "pageStreamer", "OutputStream", "OutputStreamer", " outputString", "pagestream", "inputstream", "pageStream", "inputSteam", "inputStreamer", "outputString", "OutputSteam", "inputString", " outputstream", " outputSteam", "outputStreamer"], "in": ["id", "token", "path", "inner", "sin", "login", "again", "conn", "gin", "bin", "part", "rec", "resource", "d", "init", "inc", "err", "user", "arg", "io", "v", "inside", "name", "ac", "r", "this", "con", "scan", "request", "input", "min", "data", "gen", "isin", "win", "on", "f", "IN", "rin", "inn", "inf", "ic", "image", "In", "ini", "nin", "config", "pin", "kin", "x", "diff", "lin", "reader", "source", "ins"], "out": ["inner", "again", "left", "error", "pool", "outs", "writing", "file", "conn", "outside", "exit", "line", "gin", "bin", "part", "page", "scope", "timeout", "init", "err", "inc", "user", "plain", "server", "process", "client", "arg", "io", "at", "v", "OUT", "outer", "call", "sync", "r", "this", "to", "data", "ex", "obj", "net", "cache", "off", "string", "list", "wr", "window", "o", "pass", "In", "w", "up", "prefix", "parent", "log", "exp", "exec", "later", "ext", "Out", "output", "write", "copy", "gen", "temp", "writer", "name", "work"], "solver": ["safer", "solution", "ssafer", "ssolver", "psolver", "ssolution", "Sector", "psolve", " solve", "Solve", "psector", " safer", "ssector", "solve", "ssolve", "Solution", " solution", "Solver", "sector", "psolution", "Safer"], "testNumber": [" trialNumber", " testBlock", " attemptStr", " attemptNumber", " trialnumber", " attemptnumber", " trialStr", " testStr", " testnumber", "trialBlock", " trialBlock", "trialStr", "trialNumber", " attemptBlock", "trialnumber"], "n": ["j", "nn", "conn", "Ns", "nor", "len", "sn", "ns", "d", "count", "nl", "z", "v", "m", "r", "nc", "t", "ln", "mn", "nb", "k", "nt", "un", "ne", "p", "dn", "f", "net", "ot", "w", "N", "num", "l", "x", "ni", "u", "b"], "s": ["opens", "lines", "gs", "a", "ns", "files", "js", "d", "services", "ss", "ps", "sets", "v", "aws", "abs", "os", "xs", "es", "states", "strings", "groups", "qs", "ds", "events", "e", "p", "ses", "comments", "ids", "ws", "S", "sites", "l", "si", "words", "tests", "sv", "u", "ls", "b", "ins"], "ans": [" scans", "can", "anas", "aces", "outs", "ats", " means", "a", "cons", "lan", "sk", "ns", "ens", "AN", "ons", "aus", "atan", "ss", "nas", "amps", "an", "asts", "ras", "ams", "ars", "reads", "ana", "os", "aned", "acs", "cas", "es", "anon", "ds", "ents", "ares", "ads", "ks", " spans", "span", "anc", "ANS", "les", "as", "na", "ays", "cs", "ants", "eps", "ops", "ann", "ls", "ai", "ins"], "last": ["none", "strip", "ch", "always", "right", "st", "other", "best", "empty", "latest", "old", "child", "style", "extra", "current", "this", "est", " Last", "sync", "recent", " first", "value", "from", "hand", "Last", "key", "prev", "ending", "good", "end", "max", "cle", "cycle", "cache", "char", "next", "cur", "full", "any", "parent", "first", "all", "null", "total"], "i": ["j", "ani", "ri", "pi", "I", "mi", "ip", "ii", "v", "abi", "ix", "io", "gi", "uli", "phi", "e", "p", "qi", "ji", "ki", "ik", "ui", "xi", "li", "multi", "o", "eni", "di", "ini", "ie", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "fi", "ai", "ti", "vi"], "BUFFER_SIZE": ["BUFFERESSNO", "BUFFER_Size", "BUFFERESSUSE", "BUVER_USE", "BUFFER_size", "BUVERESSSize", "BUFFERNUSE", "BUVER_NO", "BUVER_Size", "BUPER_SIZE", "BUPER_NUM", "BUFFERNSIZE", "BUFFERNSize", "BUFFER_NO", "BUFFER_USE", "BUVERESSSIZE", "BUFFER_NUM", "BUPER_NO", "BUVERESSUSE", "BUPER_Size", "BUPER_FORE", "BUFFER_FORE", "BUFFERESSSIZE", "BUPER_size", "BUFFERNNO", "BUFFERESSSize", "BUVER_SIZE", "BUVERESSNO"], "din": ["login", "sin", "cgi", "ani", "ri", "sth", "gin", "bin", "cin", "d", "fen", "cli", "die", "oin", "asin", "zin", "thin", "jin", "db", "input", "gi", "pid", "serv", "data", "uid", "tin", "isin", "dat", "include", "rin", "xi", "bis", "inn", "di", "ini", "nin", "kin", "pin", "da", "asi", "vin", "ni", "lin", "dy", "reader", "ins", "pd"], "buffer": ["slice", "Buffer", "pool", "document", "length", "bin", "offset", "memory", "scroll", "page", "resource", "timeout", "bb", "rule", "shell", "flush", "table", "server", "header", "border", "limit", "texture", "type", "FFER", "seed", "position", "ptr", "shape", "padding", "channel", "batch", "queue", "cache", "window", "uffer", "pad", "buff", "buf", "allow", "use", "ignore", "append", "maximum", "capacity", "message", "loop", "scale", "source"], "bufferPointer": ["bufferpointers", " bufferWrapointer", " bufferWraptr", " bufferPointers", "bufferPoategy", " bufferPrategy", "bufferWrainters", " bufferPopointer", "bufferPOinters", " bufferWraument", " bufferWracher", "bufferpointer", "bufferWrapointer", "bufferPopointer", "bufferWracher", "bufferWraument", "bufferHoument", "bufferWrainter", " bufferPrinters", " bufferPoument", "bufferFloategy", "bufferFlointers", "bufferFlointer", " bufferPrper", "bufferPrptr", "bufferPrategy", "bufferPropointer", "bufferPointers", " bufferWrainter", "bufferHointer", "bufferProinters", " bufferPoptr", "bufferPrpointer", "bufferHointers", "bufferPOcher", "bufferPocher", " bufferPoategy", " bufferWrainters", "bufferProptr", "bufferWraptr", "bufferPrper", "bufferHocher", "bufferpoategy", "bufferPoptr", " bufferPocher", "bufferPrinter", "bufferProinter", "bufferPrinters", " bufferPrinter", "bufferPoument", "bufferPoper", "bufferPOinter", "bufferPOument", "bufferpoper", "bufferFloper", " bufferPoper"], "bytesRead": ["bytesFollow", "blocksRead", "linesWrite", "onesRead", " bytesWrite", "keysFit", "blocksShow", " bytesREAD", "bytesShow", "fieldsFollow", "linesReader", "blocksFollow", "linesFit", "netsRead", "bytesFit", "keysReader", "bytesReader", "linesRead", "bytesREAD", "onesFind", "netsWrite", "fieldsRead", "onesShow", "keysRead", "netsFit", "linesREAD", "netsReader", "blocksFind", "bytesFind", "pointsWrite", "bytesWrite", "onesFollow", "fieldsFind", "pointsREAD", "keysWrite", "fieldsShow", "pointsRead"], "is": ["are", "id", "inner", "path", "sin", "ri", "ib", "isa", "init", "ip", "iss", "im", " are", "iter", "isl", "iso", "lis", "os", "sit", "irc", "ais", "isin", "Is", "as", "it", "its", "isi", "ios", "ris", "si", "IS", "ide", "has", "uri", "was", "bis", "source", "serv"], "file_name": ["File_path", " file_location", "file_location", "fileNamename", "file_entry", " file_entry", "file_path", " file_path", "file_no", "fileNameno", "File_name", "File_no", "File_Name", "fileNamepath", "file_Name", "fileNameName"], "sb": ["wb", "obb", "sth", "ib", "cb", "zb", "su", "sg", "orb", "bg", "abb", "lab", "bc", "sf", "sa", "xb", "bb", "bh", "amb", "pb", "bsp", "bf", "usb", "dB", "gb", "sq", "SB", "db", "erb", "nb", "BB", "bps", "bp", "eb", "src", "bs", "binary", "sbm", "bm", "lb", "bt", "buff", "si", "vm", "fb", " SB", "bd", "sv", "rb", "b"], "c": ["sc", "can", "cu", "enc", "ch", "cf", "lc", "h", "cb", "a", "ct", "comment", "cd", "bc", "d", "abc", "fc", "count", "uc", "z", "v", "content", "cr", "m", "esc", "ac", "r", "y", "ec", "current", "con", "nc", "t", "ce", "cc", "k", "vc", "e", "cy", "p", "xc", "f", "unc", "dc", "cache", "rc", "char", "anc", "dec", "cm", "C", "ca", "cur", "col", "w", "cs", "code", "l", "x", "character", "arc", "ci", "u", "g", "cp", "mc", "b", "pointer"], "read": ["open", "fill", "check", "resource", "process", "count", "play", "connect", "start", "scan", "iter", "search", "word", "r", "ok", "input", "data", "add", "Read", "find", "next", "feed", "run", "skip", "pass", "readable", "log", "parse", "text", "load", "select", "READ", "stream", "reader", "get", "write", "work"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tString string = sc.nextLine();\\n\t\tMain main = new Main();\\n\\n\t\tif (main.chkPalindrome(string) && main.chkPalindrome(string.substring(0, (string.length() - 1)/2)) && main.chkPalindrome(string.substring((string.length() + 2)/2,string.length()))) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n\\n\tpublic boolean chkPalindrome(String string) {\\n\t\tint len = string.length();\\n\t\tint right = len - 1;\\n\t\tint left = 0;\\n\t\twhile (true) {\\n\t\t\tif (len % 2 == 0 && right < left) {\\n\t\t\t\tbreak;\\n\t\t\t}else if(len % 2 == 1 && right == left){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tif (string.charAt(left) != string.charAt(right)) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t\tleft++;\\n\t\t\tright--;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}", "target": "123", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "str", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "server", "cr", "esc", "iss", "c", "scan", "osc", "out", "sub", "nc", "cc", "sec", "sh", "desc", "ctx", "sp", "acc", "ocr", "src", "rc", "anc", "cl", "pc", "text", "ner", "sl", "ci", "asc", "stream", "cv", "mc", "sci"], "string": ["operator", "inner", "format", "strip", "thing", "server", "character", "word", "escape", "ring", "result", "version", "field", "uri", "complete", "filename", "list", "config", "address", "line", "function", "setting", "http", "user", "ident", "input", "data", "number", "char", "next", "binary", "class", "date", "space", "text", "parser", "stream", "name", "single", "section", "comment", "length", "starting", "resource", "lower", "strings", "value", "p", "connection", "letter", "null", "sequence", "message", "buffer", "source", "slice", "object", "file", "document", "str", "database", "site", "array", "prefix", "future", "queue", "expression", "s", "initial", "service"], "len": ["id", "ler", "inner", "lc", "loc", "le", "lf", "body", "line", "length", "str", "part", "lan", "lib", "limit", "count", "z", "split", "lit", "en", "lt", "ld", "ln", "min", "den", "dl", "nt", "pos", "n", "L", "span", "max", "dy", "la", "li", "elt", "Len", "list", "val", "el", "lat", "l", "lon", "num", "ll", "ner", "lin", "rt", "bl", "size", "lim", "fl"], "right": ["id", "then", "inner", "one", "back", "error", "mid", "correct", "length", "rew", "rx", "rec", "both", "d", "cross", "last", "child", "arrow", "start", "plus", "rights", "bottom", "r", "ack", "third", "wheel", "n", "end", "result", "partial", "off", "rc", "row", "width", "rw", "rh", "Right", "raw", "w", "ax", "range", "rest", "num", "cl", "staff", "self", "x", "reverse", "rel", "rad", "success", "patch", "depth", "wrong", "rank", "work"], "left": ["little", "small", "one", "base", "inner", "loc", "back", "lc", "Left", "line", "length", "front", "offset", "only", "both", "child", "last", "old", "level", "start", "url", "current", "second", "lt", "lower", "top", "le", "ul", "pos", "L", "cell", "partial", "off", "less", "width", "next", "two", "li", "cel", "low", "elt", "full", "el", "l", "lo", "cl", "pl", "hide", "local", "diff", "all", "null", "size", "wrong", "lim", "fl", "label", "ell"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt(); //\u5076\u6570\u7403\\n        int m = sc.nextInt(); //\u5947\u6570\u7403\\n        System.out.println(choose(n, 2) + choose(m, 2));\\n\\n    }\\n\\n    static int choose (int n, int k){\\n        int ret = 1;\\n        if(n == k) {\\n            return 1;\\n        }else {\\n            for(int i = 0; i < k; i++){\\n                ret = ret * (n-i) / (i + 1);\\n            }\\n        return ret;}\\n    }\\n}", "target": "49", "substitutes": {"sc": ["sw", "isc", "app", "soc", "st", "Sc", " SC", "bc", "se", "sf", "scope", "SC", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "cc", "sec", "proc", "sp", "ser", "dc", "src", "rc", "sche", "sb", "cs", "cl", "set", "pc", "sl", "ci", "ctl", "sci"], "n": ["j", "conn", "sn", "ns", "init", " i", "c", "m", " c", "nc", "ln", "nb", "k", "nt", "ne", "p", "f", "net", "it", "o", "i", "N", "l", "num", "g", " N", "b", "name"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int count = 1;\\n    char[] ca = sc.next().toCharArray();\\n    for (int i = 0; i < n - 1; i++)\\n      if (ca[i] != ca[i + 1])\\n        count++;\\n    System.out.println(count);\\n  }\\n}\\n", "target": "218", "substitutes": {"sc": ["sw", "sr", "ch", "lc", " Sc", "cer", "st", "ct", "Sc", " SC", "bc", "sf", "se", "SC", "scope", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "sp", "dc", "rc", "cur", "class", "sb", "cs", "cl", "pc", "exec", "sl", "ci", "mc", "sci"], "n": ["j", "nn", "conn", "len", "part", "ns", "in", "d", "nl", "z", "c", "m", "r", "en", "y", "nc", "t", "nb", "k", "nt", "ne", "number", "p", "f", "net", "q", "span", "inn", "o", "s", "N", "l", "num", "x", "u", "size", "b"], "count": ["id", "base", "counter", "length", "len", "part", "offset", "d", "err", "limit", "group", "child", "old", "level", "c", "start", "area", "match", "Count", "index", "nt", "key", "number", "p", "f", "age", "cache", "more", "found", "test", "col", "parent", "code", "sum", "num", "weight", "info", "depth", "size", "list", "total", "name"], "ca": ["sea", "cu", "cf", "ba", "aco", "a", "fa", "ma", "aa", "sa", "aca", "ace", "ka", "ha", "ta", "c", "area", "cca", "ac", "ana", "ce", "cas", "ga", "ada", "sha", "cat", "pa", "ctx", "pha", "acc", "wa", "la", "CA", "na", "va", "ra", "code", "za", "da", "Ca", "qa", "ci", "ai", "cal"], "i": ["id", "slice", "inner", "j", "api", "ri", "pi", "mu", "in", "d", "mi", "init", "ip", "ii", "z", "v", "io", "c", "ix", "m", "abi", "start", "y", "gi", "index", "k", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "uri", "ni", "ai", "I"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\twhile(true) {\\n\t\t\t\\n\t\t\tint n = sc.nextInt();\\n\t\t\tint x = sc.nextInt();\\n\t\t\tint cnt = 0;\\n\t\t\t\\n\t\t\tif (n==0 && x==0) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\t\\n\t\t\tfor (int a=1 ; a<=n-2 ; a++) {\\n\t\t\t\tfor (int b=a+1 ; b<=n-1 ; b++) {\\n\t\t\t\t\tfor (int c=b+1 ; c<=n ; c++) {\\n\t\t\t\t\t\tif(a+b+c == x) {\\n\t\t\t\t\t\t\tcnt++;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println(cnt+\"\");\\n\t\t}\\n\t}\\n\\n}\\n", "target": "116", "substitutes": {"sc": ["sw", "sr", "ch", "soc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "server", "uc", "esc", "sq", "scan", "osc", "sync", "nc", "sch", "cc", "sec", "sh", "cus", "cor", "ctx", "sp", "ser", "src", "rc", "sche", "ca", "cur", "sb", "cs", "cl", "pc", "ner", "ci", "asc", "mc", "sci"], "n": ["j", "nn", "h", "len", "sn", "ns", "in", "d", "no", "nl", "z", "ny", "v", "m", "an", "y", "en", "network", "nc", "t", "non", "nb", "k", "nt", "un", "e", "ne", "p", "number", "f", "net", "na", "o", "w", "s", "i", "N", "l", "num", "nan", "u", "size"], "x": ["id", "xxxx", "j", "wx", "h", "xx", "d", "cross", "xxx", "z", "v", "ix", "an", "m", "y", "xs", "t", "index", "k", "e", "p", "ex", "f", "xc", "q", "max", "xi", "xp", "o", "w", "ax", "i", "l", "num", "X", "u"], "cnt": ["Cnd", " cNT", "cno", "intnt", "ecnn", "acnd", "intnn", "inccount", "Cno", "ecoder", " count", "incnt", "incno", "count", "intount", "cnd", " cnn", "ncno", "Ccount", " coder", "ncnt", "acno", "CNT", "cnn", "acnt", "account", " cnd", "ecount", "cNT", "intoder", "Cnt", "ccount", "ncnd", "coder", " cno", "incnd", "ncNT", "ecnt"], "a": ["api", "ba", "h", "ab", "oa", "fa", "aaa", "aa", "sa", "d", "am", "apa", "z", "an", "area", "at", "ac", "r", "y", "A", "ga", "ad", "e", "p", "ea", "f", "ak", "alpha", "aj", "ca", "as", "na", "o", "i", "ama", "asa", "l", "da", "au", "ae", "af", "u", "ai"], "b": ["wb", "j", "base", "ba", "ab", "cb", "ib", "h", "bc", "aa", "d", "bb", "bh", "pb", "bf", "v", "an", "ob", "r", "y", "db", "t", "B", "nb", "ad", "e", "be", "p", "f", "bu", "eb", "ca", "bs", "o", "sb", "s", "i", "lb", "l", "bi", "fb", "ae", "u", "g", "rb"], "c": ["cu", "ch", "cf", "lc", "h", "ab", "cb", "ct", "bc", "d", "fc", "uc", "count", "z", "v", "cr", "ac", "y", "ec", "nc", "t", "ce", "cc", "k", "vc", "e", "cy", "p", "cat", "f", "dc", "cm", "C", "ca", "o", "s", "i", "cs", "code", "l", "pc", "ci", "u", "cp"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n,x,count;\\n    while((n = sc.nextInt()) != 0 | (x = sc.nextInt()) != 0){\\n      count=0;\\n      for(int i=1;i <= n-2;i++){\\n        for(int j=i+1;j <= n-1;j++){\\n          for(int k=j+1;k <= n;k++){\\n            if(i+j+k == x)count++;\\n          }\\n        }\\n      }\\n      System.out.println(count);\\n    }\\n    sc.close();\\n  }\\n}\\n\\n", "target": "116", "substitutes": {"sc": ["sw", "enc", "ch", "lc", "soc", "cer", "Sc", "bc", "se", "SC", "sf", "scope", "sa", "sem", "com", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "nc", "sch", "cc", "sec", "auc", "ctx", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "coll", "cms", "cs", "cl", "pc", "ner", "ci", "asc", "parser", "mc", "sci"], "n": ["nn", "conn", "len", "sn", "ns", "in", "d", "no", "v", "z", "c", "an", "m", "sync", "r", "y", "en", "network", "nc", "t", "ln", "index", "nb", "nt", "e", "ne", "p", "number", "f", "net", "span", "inn", "na", "o", "w", "s", "fn", "N", "num", "l", "nan", "u", "size", "b"], "x": ["id", "px", "one", "h", "xx", "rx", "fx", "d", "xy", "cross", "ip", "pe", "xxx", "z", "v", "ix", "c", "is", "m", "y", "tx", "xs", "index", "key", "e", "p", "ex", "f", "xc", "q", "xi", "na", "o", "w", "ax", "l", "X", "u", "b", "work"], "count": ["id", "ch", "h", "counter", "check", "length", "len", "ind", "limit", "child", "race", "old", "z", "v", "call", "c", "start", "last", "match", "Count", "y", "current", "cc", "index", "key", "number", "p", "f", "cond", "cache", "max", "q", "bug", "more", "found", "test", "coll", "col", "parent", "code", "keep", "l", "num", "sum", "weight", "info", "loop", "g", "depth", "size", "list", "b", "total", "work"], "i": ["id", "api", "h", "pi", "I", "in", "d", "mi", "ii", "ind", "z", "v", "ix", "c", "io", "start", "m", "y", "index", "phi", "e", "p", "f", "qi", "ji", "ki", "ui", "xi", "li", "iu", "o", "eni", "ini", "oi", "ie", "yi", "l", "si", "bi", "ci", "u", "ni", "ai", "b"], "j": ["h", "ja", "J", "a", "ij", "jj", "ii", "bj", "ind", "z", "v", "ix", "c", "je", "m", "r", "y", "t", "jc", "jl", "key", "e", "dj", "p", "kj", "f", "qi", "ji", "aj", "end", "q", "ik", "li", "it", "o", "s", "ie", "l", "uj", "jo", "u", "g", "jp", "b"], "k": ["id", "ch", "h", "sk", "kl", "ek", "d", "dk", "kh", "jj", "ko", "kn", "z", "v", "c", "m", "ok", "y", "ck", "uk", "kr", "ak", "key", "p", "f", "ks", "K", "ik", "q", "ki", "km", "o", "kid", "kw", "kk", "mk", "ke", "kg", "u", "g", "jp", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint[] a = new int[4];\\n\t\tchar[] c = sc.next().toCharArray();\\n\t\tfor (int i = 0; i < 4; i++) {\\n\t\t\ta[i] =Character.getNumericValue(c[i]);\\n\t\t}\\n\t\tint[][] op = { { 1, 1, 1 }, { 1, 1, -1 }, { 1, -1, 1 }, { -1, 1, 1 }, { 1, -1, -1 }, { -1, 1, -1 },\\n\t\t\t\t{ -1, -1, 1 },\\n\t\t\t\t{ -1, -1, -1 } };\\n\t\tString str = \"\";\\n\t\tfor (int i = 0; i < 8; i++) {\\n\t\t\tif (a[0] + a[1] * op[i][0] + a[2] * op[i][1] + a[3] * op[i][2] == 7) {\\n\t\t\t\tstr += a[0];\\n\t\t\t\tfor (int j = 0; j < 3; j++) {\\n\t\t\t\t\tif (op[i][j] == 1) {\\n\t\t\t\t\t\tstr += \"+\" + a[j + 1];\\n\t\t\t\t\t} else {\\n\t\t\t\t\t\tstr += \"-\" + a[j + 1];\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\tstr += \"=7\";\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(str);\\n\t}\\n}\\n", "target": "152", "substitutes": {"sc": ["enc", "ch", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "ss", "server", "uc", "cr", "esc", "scan", "osc", "sync", "r", "spec", "search", "nc", "sec", "sh", "desc", "nt", "sp", "f", "src", "acc", "rc", "system", "anc", "cs", "ner", "asc", "ann", "sci"], "sb": ["vd", "sg", "cb", "su", "bc", "sf", "bb", "ss", "pb", "bf", "gb", "SD", "BG", "SB", "db", "SF", "MB", "nb", "BB", "mb", "sp", "bp", "gc", "ws", "bs", "si", "SI", "rb", "sv"], "a": ["api", "app", "ba", "ma", "ai", "aaa", "aa", "sa", "ata", "am", "d", "array", "ha", "v", "an", "area", "at", "ac", "ia", "r", "y", "m", "A", "tta", "ga", "k", "ad", "ea", "p", "n", "alpha", "e", "f", "active", "ca", "as", "va", "na", "o", "ap", "w", "s", "ama", "asa", "code", "l", "da", "au", "x", "qa", "ae", "af", "auto", "u", "all", "ar", "b", "sta"], "c": ["cu", "ch", "lc", "h", "d", "cr", "v", "ac", "r", "con", "t", "k", "cat", "e", "p", "n", "f", "q", "rc", "char", "C", "ca", "o", "col", "s", "cs", "code", "l", "x", "ci", "u", "b"], "i": ["h", "ij", "mi", "iv", "m", "r", "gi", "phi", "qi", "chi", "x", "ci", "uri", "fi", "d", "ii", "cli", "z", "io", "is", "index", "key", "e", "f", "xi", "li", "multi", "eni", "hi", "u", "ti", "pi", "ix", "y", "p", "n", "ik", "ui", "iu", "ic", "oi", "bi", "ni", "ai", "I", "id", "api", "ri", "ip", "ind", "ori", "v", "k", "ji", "q", "it", "o", "di", "ini", "yi", "ie", "l", "si", "info", "g", "b"], "op": ["id", "cop", "operator", "open", "cmp", "error", "app", "opt", "loc", "vert", "option", "node", "ip", "oper", "root", "opp", "type", "pop", "OP", "ac", "m", "operation", "top", "Op", "cat", "p", "bit", "sp", "hop", "opa", "ic", "ap", "ot", "o", "it", "pad", "up", "code", "exp", "oc", "mp", "set", "x", "block", "ang", "ops", "u", "ant", "post", "b"], "str": ["sr", "inner", "Str", "doc", "st", "err", "cr", "er", "style", "txt", "url", "spec", "r", "out", "iter", "STR", "war", "gr", "t", "tr", "usr", "stri", "kr", "strings", "data", "hr", "key", "p", "n", "sp", "f", "obj", "arr", "star", "ctr", "result", "br", "string", "char", "dict", "wr", "cur", "pr", "s", "div", "tree", "fr", "exp", "text", "x", "sl", "dr", "u", "g", "list", "res", "sta"], "j": ["ch", "jet", "left", "h", "ja", "J", "js", "ij", "job", "d", "jj", "ii", "bj", "ind", "z", "v", "jen", "je", "y", "jl", "jc", "k", "key", "e", "dj", "p", "n", "f", "ji", "aj", "q", "br", "li", "next", "o", "pr", "ie", "adj", "el", "fr", "l", "uj", "x", "jo", "ang", "oj", "u", "g", "jp", "b"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\t\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tInputReader in = new InputReader(System.in);\\n\t\tint n = in.readInt();\\n\t\tint gems[] = new int[n]; \\n\t\tint cost[] = new int[n]; \\n\t\t\\n\t\tint ans = 0; \\n\t\tfor(int i = 0; i<n; i++) gems[i] = in.readInt();\\n\t\tfor(int i = 0; i<n; i++) cost[i] = in.readInt(); \\n\t\tfor(int i = 0; i<n; i++) {\\n\t\t\tif(gems[i] > cost[i]) ans += gems[i] - cost[i]; \\n\t\t}\\n\t\tSystem.out.println(ans); \\n\t}\\n}\\nclass InputReader {\\n\\n\tprivate InputStream stream;\\n\tprivate byte[] buf = new byte[1024];\\n\tprivate int curChar;\\n\tprivate int numChars;\\n\tprivate SpaceCharFilter filter;\\n\\n\tpublic InputReader(InputStream stream) {\\n\t\tthis.stream = stream;\\n\t}\\n\\n\tpublic int read() {\\n\t\tif (numChars == -1)\\n\t\t\tthrow new InputMismatchException();\\n\t\tif (curChar >= numChars) {\\n\t\t\tcurChar = 0;\\n\t\t\ttry {\\n\t\t\t\tnumChars = stream.read(buf);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tif (numChars <= 0)\\n\t\t\t\treturn -1;\\n\t\t}\\n\t\treturn buf[curChar++];\\n\t}\\n\\n\tpublic int readInt() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tint res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9')\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\\n\tpublic String readString() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tStringBuilder res = new StringBuilder();\\n\t\tdo {\\n\t\t\tres.appendCodePoint(c);\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res.toString();\\n\t}\\n\\n\tpublic long readLong() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c)) {\\n\t\t\tc = read();\\n\t\t}\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tlong res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9') {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\t\\n\tpublic boolean isSpaceChar(int c) {\\n\t\tif (filter != null)\\n\t\t\treturn filter.isSpaceChar(c);\\n\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n\t}\\n\\n\tpublic String next() {\\n\t\treturn readString();\\n\t}\\n\\n\tpublic interface SpaceCharFilter {\\n\t\tpublic boolean isSpaceChar(int ch);\\n\t}\\n}\\n", "target": "26", "substitutes": {"in": ["inner", "path", "login", "again", "doc", "conn", "file", "str", "bin", "cin", "resource", "d", "init", "inc", "din", "err", "v", "is", "url", "ac", "r", "thin", "out", "con", "read", "this", "input", "t", "serv", "data", "e", "ex", "isin", "win", "f", "IN", "rin", "inn", "inf", "as", "connection", "image", "In", "impl", "ini", "s", "nin", "version", "l", "log", "kin", "pin", "vin", "lin", "socket", "reader", "source", "ins"], "n": ["j", "nn", "conn", "Ns", "len", "sn", "ns", "d", "no", "ii", "nl", "z", "v", "m", "r", "y", "en", "network", "nc", "t", "ln", "mn", "nb", "k", "nt", "cn", "names", "ne", "p", "number", "f", "e", "net", "dn", "inn", "na", "o", "N", "l", "num", "x", "nan", "g", "u", "ni", "b"], "gems": ["Gather", " gemin", " gores", "ygems", "Grees", "igrees", "ygrees", "Gears", " gales", "genales", "grees", "ygales", "gens", "ergemin", " gums", "gums", "igather", " gens", "genems", "ergems", "ygemin", "igreens", "greens", "Gems", "ygears", " greens", "igems", "genears", "gather", "ygums", " gather", "Gores", "ergores", "gores", "genums", "Greens", "ergears", "gears", "ergrees", "ygens", "ergens", "gemin", "gales", " gears", " grees"], "cost": ["id", "error", "money", "loc", "doc", "length", "step", "Cost", "risk", "grade", "rule", "ace", "price", "effect", "cover", "group", "count", "rate", "level", "style", "position", "ack", "shape", "cc", "fee", "value", "mean", "padding", "gross", " costs", "number", "age", "end", "charge", "width", "coll", "CO", "score", "income", "loss", "weight", "x", "time", "depth", "size", "rank", "scale", "co", "work"], "ans": ["can", "anas", "ani", "nn", "outs", "ats", " means", "cons", "errors", "lan", "sk", "ns", "ons", "AN", "aus", "atan", "nas", "an", "asts", "anan", "ars", "ations", "ana", "os", "aned", "cas", "cus", "annels", "anon", "ds", "ents", "ares", "ids", "ks", "span", "anc", "ANS", "na", "as", "ians", "s", "gan", "cases", "cs", "ants", "eps", "nan", "ni", "ann", "ls", "ai", "annot", "ins"], "i": ["id", "j", "iii", "api", "ri", "pi", "I", "mi", "d", "init", "ii", "ip", "cli", "ori", "v", "io", "ix", "abi", "iv", "y", "t", "gi", "index", "phi", "key", "e", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "eni", "b", "di", "ini", "o", "isi", "oi", "ie", "yi", "ei", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "fi", "ai", "ti", "name"], "stream": ["sw", "port", "path", "Stream", "speed", "pool", "h", "file", "document", "body", "form", "model", "resource", "forward", "user", "http", "round", "engine", "server", "method", "client", "wrapper", "hold", "v", "response", "m", "host", "this", "out", "read", "ack", "input", "from", "control", "data", "roll", "channel", "e", "f", "context", "ssl", "src", "driver", "string", "feed", "window", "connection", "stack", "trans", "cur", "w", "per", "view", "self", "sl", "handler", "output", "raw", "socket", "reader", "transform", "source"], "buf": ["wb", "Buffer", "cf", "pool", "ba", "bag", "cb", "bg", "buffer", "bin", "bc", "conv", "flush", "bh", "bb", "pb", "fd", "uc", "gb", "rb", "mem", " buff", "fp", "db", "fam", "Buff", "nb", "batch", "ctx", "queue", "map", "bu", "context", "fab", "src", "bp", "cap", "rc", "tmp", "seq", "cur", "pad", "sb", "buff", "uf", "ff", "fb", "bd", "bl", "bed", "cv", "vec", "b"], "curChar": ["CurChar", "CurCh", " curchar", "surCh", "serCharacter", " curCharacter", "surchar", "serChar", "curchar", "charCh", "charchar", "curInt", " curInt", "Curchar", "curCh", "charCharacter", "charChar", "CurCharacter", "serCh", "surChar", " curCh", "serchar", "CurInt", "surCharacter", "curCharacter", "serInt"], "numChars": ["multiCharts", "numchans", "curChards", "numChARS", "numCarts", "numCharts", "numCHarts", "sumChARS", "multiCHarts", "sumCases", "nbchards", "curChars", "curCHars", "multiCHARS", "numChans", "numQuarts", "numCharars", "numQuases", "curCharts", "multiChARS", "numQuARS", "numCHARS", "sumChases", "nbChards", "numCards", "nbCharts", "nbChARS", "numCHases", "numCHans", "numQuars", "curCHards", "numCHards", "numchars", "multiCHans", "numchARS", "curChARS", "multiChans", " numChARS", "curCHarts", "nbChars", "curCHARS", "sumCars", "numCharARS", "numcharts", "sumCarts", "numCHars", "numCHats", "sumChars", "numCars", "numCases", "numChards", "sumCharts", " numChats", "numCharans", "numChats", "nbcharts", "numChararts", "numCARS", "numchards", "multiCHars", "nbchARS", " numCharts", "nbchars", "numChases", "multiChars", "sumCARS", "numCharats"], "filter": ["fil", "cb", " fa", " f", "bc", "bb", " filtered", "sel", " mask", "ac", "Filter", "fe", "func", " window", "chain", "p", "f", "map", " filtering", " filters", "fac", "pass", "b", "col", "val", " Filter", "mask", "bis"], "c": ["sc", "cont", "enc", "cu", "cf", "lc", "loc", "h", "cb", "conn", "ct", "bc", "d", "abc", "err", "fc", "count", "uc", "z", "v", "cr", "character", "esc", "ac", "content", "r", "con", "ec", "m", "nc", "ce", "t", "cc", "sec", "k", "vc", "cy", "e", "p", "xc", "f", "unc", "exc", "dc", "cache", "rc", "char", "mc", "dec", "cm", "C", "ca", "anc", "cur", "col", "w", "div", "cs", "code", "l", "cl", "pc", "x", "arc", "ci", "g", "u", "cp", "b"], "sgn": ["sbn", "sng", "insbn", "psinn", "insGN", "sgin", "sGN", " sGN", "psgn", "psgen", "Sgen", "bisinn", " sgin", "rsgen", "insgn", " sbn", " sinn", "Sgn", "bisgen", "Sbn", "bisgn", "bisng", " sng", "insgin", "sgen", " sgen", "rsng", "sinn", "SGN", "psng", "Sng", "rsgn", "Sgin", "rsgin"], "res": ["vals", "values", "details", "cons", "resolution", "errors", "ons", "js", "ns", "rs", "breaks", "runs", "Results", "rem", "err", "ps", "ress", "resh", "ras", "response", "rus", "r", "ros", "out", "os", "es", "re", "pre", "qs", "data", "req", "repl", "ret", "rev", "nos", "obj", "arr", "mr", "ries", "result", "rc", "rss", "css", " results", "blocks", "bs", "pass", "hes", "cases", "cs", "pres", "Rs", "val", "Res", "ris", "vs", "eps", "results", "RES", "resp", "RS", "ms", "complete", "ces", "ins"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        CTypicalStairs solver = new CTypicalStairs();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CTypicalStairs {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int n = in.readInt();\\n            int m = in.readInt();\\n            int[] a = in.readIntArray(m);\\n\\n            long[] dp = new long[n + 1];\\n            Arrays.fill(dp, 1);\\n            for (int i = 0; i < m; i++) {\\n                dp[a[i]] = 0;\\n            }\\n            for (int i = 2; i <= n; i++) {\\n                if (dp[i] == 0) continue;\\n                dp[i] = (dp[i - 1] + dp[i - 2]) % MiscUtils.MOD7;\\n            }\\n\\n            out.printLine(dp[n]);\\n        }\\n\\n    }\\n\\n    static class MiscUtils {\\n        public static final int MOD7 = (int) (1e9 + 7);\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int[] readIntArray(int size) {\\n            int[] array = new int[size];\\n            for (int i = 0; i < size; i++) {\\n                array[i] = readInt();\\n            }\\n            return array;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int readInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n        public void printLine(long i) {\\n            writer.println(i);\\n        }\\n\\n    }\\n}\\n\\n", "target": "174", "substitutes": {"inputStream": ["errorStream", " inputSync", "InputStreamer", "currentstream", "errorstream", "InputSync", "currentStream", "inputSync", "errorSteam", " inputstream", " inputSteam", "outputstream", "outputSteam", "inputstream", "Inputstream", "inputSteam", "inputStreamer", "currentSteam", "currentStreamer", "InputSteam", "outputSync", "InputStream", "errorStreamer"], "outputStream": ["OutputForm", "outputWriter", "inputForm", "OutputWriter", "inputPath", "outputSteam", " outputPath", "OutputStream", "outputPath", "inputSteam", "outputForm", "OutputSteam", "OutputPath", " outputForm", "inputWriter", " outputWriter", " outputSteam"], "in": ["id", "path", "inner", "again", "login", "conn", "gin", "file", "line", "bin", "part", "cin", "resource", "user", "din", "inc", "err", "init", "arg", "io", "er", "v", "is", "inside", "r", "this", "read", "con", "ac", "url", "request", "input", "min", "reading", "from", "serv", "data", "gen", "ex", "win", "f", "lock", "IN", "rin", "string", "inn", "inf", "ic", "it", "connection", "as", "image", "In", "name", "ini", "w", "nin", "version", "l", "info", "pin", "lin", "socket", "reader", "get", "source", "ins"], "out": ["inner", "again", "doc", "png", "page", "plain", "server", "process", "client", "OUT", "r", "point", "net", "w", "up", "version", "exec", "x", "output", "gen", "list", "temp", "outs", "writing", "line", "user", "inc", "group", "io", "data", "string", "window", "target", "exp", "write", "copy", "name", "work", "error", "conn", "comment", "job", "scope", "resource", "init", "call", "cmd", "p", "problem", "off", "connection", "Out", "null", "buffer", "object", "console", "left", "pool", "remote", "file", "str", "bin", "err", "v", "outer", "ex", "obj", "cache", "o", "s", "parent", "log", "b", "to"], "solver": ["stolver", "solution", "ssolver", "ssolution", "ssolving", "setsolving", "setsolution", "setsolve", "Solve", "sorter", "ssorter", "stolution", "storter", "solve", "solving", "Sorter", "ssolve", "Solution", "Solver", "Solving", "setsolver", "stolve"], "testNumber": ["TestCounter", " trialNum", " testCounter", "Testnumber", " trialCounter", " trialNumber", " trialnumber", "testCounter", "TestNumber", "testnumber", " testnumber", " testNum", "TestNum", "testNum"], "n": ["j", "nn", "h", "len", "sn", "ns", "d", "no", "count", "v", "z", "an", "r", "en", "y", "network", "nc", "t", "mn", "nb", "k", "nt", "e", "ne", "p", "f", "net", "o", "w", "s", "N", "num", "l", "x", "u", "ni", "g", "all", "b", "name"], "m": ["j", "h", "d", "mi", "ii", "om", "md", "sm", "z", "v", "r", "y", "en", "mn", "k", "dim", "e", "p", "f", "mm", "more", "cm", "o", "w", "M", "s", "N", "num", "l", "nm", "x", "ms", "g", "u", "mc", "b"], "a": ["api", "ba", "ma", "ai", "aaa", "aa", "sa", "d", "am", "ata", "ha", "an", "area", "ia", "ac", "ana", "y", "A", "ga", "ad", "ea", "p", "pa", "alpha", "sha", "ca", "va", "as", "na", "da", "ae", "u", "ar", "b"], "dp": ["port", "pp", "vp", "px", "api", "lp", "dep", "tp", "dm", "d", "csv", "bb", "deb", "pb", "ip", "ps", "ep", "adr", "password", "DP", "db", "xs", "imp", "pid", "gp", "data", "dt", "wp", "ds", "dl", "dim", "e", "wd", "p", "pa", "alpha", "xd", "df", "dc", "dat", "pm", "grad", "dict", "pkg", "pg", "di", "gap", "sup", "vs", "eps", "mp", "dos", "yp", "dr", "cp", "hp", "zip"], "i": ["id", "uni", "j", "api", "ri", "h", "pi", "mu", "my", "mi", "init", "ip", "ii", "cli", "z", "io", "v", "abi", "ix", "y", "gi", "data", "index", "k", "phi", "e", "p", "qi", "f", "ji", "ik", "q", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "b", "oi", "ish", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "attr", "ni", "u", "uri", "fi", "ai", "ti", "mini", "I"], "MOD7": [" MOD1", "MOD6", "Mod6", "Mod7", " MOD6", "mod7", "mod1", "Mod1", "MOD1", "mod6"], "stream": ["sw", "port", "path", "Stream", "object", "console", "pool", "iterator", "file", "document", "model", "form", "length", "resource", "round", "engine", "server", "method", "process", "client", "wrapper", "v", "response", "transform", "host", "input", "through", "control", "channel", "context", "src", "string", "row", "feed", "window", "stack", "w", "view", "handle", "output", "message", "socket", "reader", "buffer", "temp", "source"], "buf": ["Buffer", "wb", "port", "pool", "bag", "cb", "buffer", "alloc", "conv", "flush", "fd", "box", "iter", "cas", "func", "batch", "queue", "br", "cap", "seq", "window", "buff", "uf", "ff", "block", "cv", "rb", "vec"], "curChar": ["prevGroup", "prevChar", "usedGroup", "usedChar", "prevClass", " curClass", "curClass", "prevCh", "usedClass", "curGroup", "usedCh", " curGroup", " curCh", "curCh"], "numChars": ["numCharars", "NumCards", "numchans", "numCharans", "numchards", "numCards", "NumChars", "NumCars", "NumChar", "numCans", "NumCans", "NumChards", "NumCar", "numChar", "numCar", "numCharar", "numCharards", "numchars", "numCars", "numchar", "numChards", "numChans", "NumChans"], "filter": ["object", "pool", "bag", "file", "function", "ters", "only", "builder", "method", "false", "true", "Filter", "chain", "f", "map", " filters", "cache", "processor", "string", "list", "val", " Filter", "pattern", "handler", "output", "null", "reader", "buffer"], "size": ["small", "speed", "address", "loc", "model", "six", "length", "len", "send", "sn", "empty", "sized", "count", "z", "area", "second", "sync", "shift", "shape", "min", "sh", "like", "sec", "e", "number", "mode", "age", "max", "width", "large", "cm", "sort", "s", "range", "code", "num", "sum", "x", "time", "capacity", "Size", "ize", "scale", "SIZE", "name"], "array": ["instance", "air", "object", "pool", "union", "app", "address", "one", "section", "function", "length", "vector", "offset", "group", "v", "area", "pair", "element", "r", "shape", "input", "value", "data", "index", "archive", "batch", "number", "arr", "Array", "integer", "map", "expression", "result", "aster", "ray", "row", "string", "window", "coll", "image", "range", "collection", "view", "record", "raw", "list", "order"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Set;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u5730\u70b9\u6570\u306e\u5165\u529b\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\\n\t\tint result = c - (a - b);\\n\t\t\\n\t\tif (result < 0) result = 0;\\n\t\t\\n\t\tSystem.out.println(result);\\n\\n\\n\t}}", "target": "45", "substitutes": {"sc": ["sw", " rc", "ch", "lc", " Sc", "Sc", "bc", "sf", "SC", "sa", " scr", "ss", "cr", "c", "scan", "SB", " cont", "nc", "sp", "rc", " ans", " subp", "sb", "gram", "si", "ann", " ann", "sci"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Sparsh Sanchorawala\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        CWelcomeToAtCoder solver = new CWelcomeToAtCoder();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CWelcomeToAtCoder {\\n        public void solve(int testNumber, InputReader s, PrintWriter w) {\\n            int n = s.nextInt(), m = s.nextInt();\\n            int corr = 0, pen = 0;\\n            int[] check = new int[n];\\n            int[] penal = new int[n];\\n            for (int i = 0; i < m; i++) {\\n                int p = s.nextInt() - 1;\\n                String str = s.next();\\n                if (check[p] == 1)\\n                    continue;\\n                if (str.equals(\"AC\"))\\n                    check[p] = 1;\\n                else\\n                    penal[p]++;\\n            }\\n            for (int i = 0; i < n; i++) {\\n                if (check[i] == 1) {\\n                    corr++;\\n                    pen += penal[i];\\n                }\\n            }\\n            w.println(corr + \" \" + pen);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public String nextString() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                if (Character.isValidCodePoint(c)) {\\n                    res.appendCodePoint(c);\\n                }\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public String next() {\\n            return nextString();\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "48", "substitutes": {"inputStream": [" inputSync", " inputForm", "InputSync", "InputForm", "inputForm", "inputSync", " inputstream", " inputSteam", "outputstream", "outputSteam", "inputstream", "Inputstream", "outputForm", "inputSteam", "InputSteam", "outputSync", "InputStream"], "outputStream": ["Outputstream", "outputSt", "outSt", "outSteam", "outputstream", "memorySteam", "outputSteam", " outputSt", "OutputStream", "OutputStreamer", "outstream", "inputstream", "inputSteam", "inputStreamer", "OutputSteam", "outStream", "memoryStreamer", "memoryStream", "OutputSt", " outputstream", " outputSteam", "outputStreamer", "memorystream"], "in": ["path", "inner", "sin", "conn", "gin", "bin", "resource", "d", "init", "din", "err", "inc", "arg", "io", "inside", "url", "r", "this", "read", "con", "request", "input", "min", "data", "win", "IN", "inn", "inf", "connection", "image", "In", "ini", "per", "nin", "l", "log", "config", "info", "pin", "x", "vin", "reader", "source", "ins", "work"], "out": ["inner", "again", "error", "outs", "conn", "bin", "init", "err", "inc", "user", "group", "client", "io", "v", "OUT", "outer", "sync", "r", "word", "this", "data", "ex", "obj", "net", "cache", "off", "string", "window", "o", "pass", "up", "parent", "log", "view", "exp", "exec", "x", "ext", "Out", "g", "output", "copy", "buffer", "temp", "writer", "write", "work"], "solver": ["solution", "Sver", "ssolver", "ssolution", "ssolving", " sver", "sver", " solving", " solve", "Solve", "ssver", "solve", "solving", "ssolve", "Solution", " solution", "Solver", "Solving"], "testNumber": ["TestCounter", " trialNum", " testCounter", " trialCounter", " trialNumber", "testCounter", "TestNumber", " trialNumbers", "TestNumbers", " testNum", "testNumbers", "TestNum", " testNumbers", "testNum"], "s": ["gs", "outs", "fs", "a", "utils", "ns", "js", "sf", "http", "d", "services", "ss", "ps", "sets", "v", "sq", "is", "aws", "sync", "r", "south", "abs", "os", "xs", "t", "es", "strings", "states", "qs", "ds", "events", "e", "ses", "f", "ssl", "ks", "bis", "ws", "o", "sb", "its", "S", "ts", "l", "si", "obs", "ches", "ools", "sl", "tests", "ops", "g", "ls", "sv", "sample", "ins"], "w": ["fw", "sw", "wb", "aw", "wx", "h", "wh", "iw", "d", "hw", "z", "v", "r", "y", "t", "wp", "e", "q", "W", "wa", "rw", "ws", "wr", "ww", "window", "o", "ow", "we", "x", "nw", "u", "writer", "write", "work"], "n": ["j", "nn", "sn", "ns", "d", "no", "count", "nl", "v", "z", "ny", "an", "r", "en", "network", "nc", "t", "mn", "nb", "k", "nt", "cn", "ne", "number", "un", "f", "net", "cm", "o", "N", "num", "l", "x", "ni", "u", "size", "b"], "m": ["j", "man", "h", "mu", "dm", "d", "mi", "md", "sm", "v", "r", "y", "mn", "k", "dim", "gm", "wm", "f", "machine", "mm", "cm", "hm", "M", "l", "num", "N", "nm", "ms", "u", "mc", "b"], "corr": ["corrod", "cerrod", "porr", "porrod", "Corr", "corror", "Corrr", "corrc", "Corror", "morp", "curr", "morr", "morror", "currc", "ferner", "porrr", "porner", "Corrc", "cerr", "corrr", " corp", "curror", "currr", " corrc", "cerrr", "corp", "morrr", "Corp", "cerner", "ferrr", "corner", "curp", "ferrod", "ferr", " corrr"], "pen": ["inch", "press", "man", "sten", "fen", "inc", "pe", "ny", "spec", "en", "con", "pt", "mer", "prem", "pit", "pid", "plan", "pa", "win", "sp", "pos", "pn", "Pen", "fat", "wa", "pan", "par", "pad", "pr", "fin", "paren", "per", "pal", "pol", "pin", "pc", "put", "pse", "P", "ping", "sign", "pie"], "check": ["id", "checked", "look", "condition", "fix", "cross", "count", "pe", "type", "call", "start", "scan", "style", "Check", "match", "ok", "sync", "ck", "clean", "search", "see", "read", "pull", "fail", "control", "checking", "wait", "nice", "key", "lock", "bug", "find", "char", "test", "code", "keep", "view", "cl", "ignore", "parse", "info", "print", "block", "post", "update", "cal", "work"], "penal": [" penality", "senature", "penald", "vanal", "Peneal", " penion", "pael", "paal", "mention", "vanality", " peneal", "penature", "Penal", "vanel", "mential", " penature", " penall", "senal", "peneal", "penall", "Penality", "pineal", "canality", "penel", "paality", "mental", " penial", "mentature", "penality", "pinal", "pinality", "canal", "canald", "senial", "paald", "vanald", "penion", "penial", "Penall", "pinall", "canel", "senion"], "i": ["id", "slice", "inner", "j", "api", "pi", "part", "mi", "init", "ip", "ii", "z", "ix", "v", "io", "is", "y", "gi", "index", "phi", "e", "sp", "f", "qi", "ik", "ui", "me", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "ie", "chi", "l", "si", "bi", "info", "x", "ci", "ni", "u", "ti", "fi", "ai", "uri", "I"], "p": ["pp", "port", "j", "api", "lp", "a", "po", "tp", "pi", "part", "d", "ip", "ep", "pe", "v", "r", "y", "point", "t", "pid", "e", "pat", "sp", "f", "pa", "pos", "q", "ap", "o", "pr", "per", "code", "l", "pc", "x", "P", "u", "g", "cp", "jp", "b"], "str": ["sr", "enc", "strip", "Str", "lc", "st", "line", "err", "r", "iter", "STR", "tr", "t", "stri", "kr", "rr", "data", "obj", "sp", "f", "arr", "star", "pos", "br", "char", "string", "dec", "pass", "pr", "div", "code", "fr", "exp", "parse", "x", "sl", "dr", "expr", "name"], "stream": ["cont", "sw", "port", "open", "Stream", "path", "console", "enc", "object", "pool", "speed", "file", "document", "form", "model", "message", "resource", "forward", "user", "round", "engine", "mount", "server", "method", "client", "response", "transform", "plus", "host", "this", "ack", "input", "request", "control", "channel", "pipe", "f", "context", "ssl", "src", "track", "string", "row", "feed", "stack", "trans", "per", "view", "loop", "valid", "socket", "output", "thread", "reader", "buffer", "each", "source"], "buf": ["Buffer", "port", "wb", "cf", "bag", "cb", "buffer", "alloc", "bc", "conv", "flush", "bh", "fd", "uc", "bf", "box", "rb", "input", "cas", "func", "batch", "pos", "ctx", "queue", "fab", "br", "cap", "rc", "seq", "buff", "uf", "ff", "log", "fb", "bd", "cv", "vec", "config"], "curChar": ["CurChar", "perchar", "CurCh", " curchar", "perCh", "surByte", "surCh", "perChar", "perCharacter", "surchar", "curchar", "curInt", " curInt", "Curchar", "curCh", "perByte", "perInt", "CurCharacter", "surChar", " curCh", "CurByte", "CurInt", "surCharacter", "surInt", "curCharacter", "curByte"], "numChars": ["numColarts", "numCHannels", " numChats", "NumChunks", "NumCards", "numchans", "NumCunks", " numCHars", "umChards", "numChARS", "numChats", " numChans", "numCHunks", "numCarts", "numCARS", " numchases", "numCHARS", " numchars", "numchards", " numChARS", "numCards", " numChards", "umCars", "numCharts", "numCHarts", "numchases", "numColars", " numCars", " numCharts", "numChases", "NumChars", "NumCars", " numCHARS", "numCHases", "numchunks", " numChases", "numCans", " numCHats", "numCHans", "NumChards", "umCannels", "numCannels", " numchards", " numCannels", "numCunks", " numCARS", "umCarts", "numColats", "numChannels", "NumChARS", "numChunks", "numColARS", "umChannels", "numCHards", " numCHannels", " numchans", " numCarts", "numchats", "umChars", "numCHars", "umCards", "numColannels", "NumCARS", "numCHats", "numchars", "numCars", "numCases", "numChards", "umCharts", "numChans", "numchannels", " numChannels", "numchARS", "numColards"], "filter": ["format", "object", "pool", "bag", "file", "ters", "builder", "bb", "this", "Filter", "proc", "loader", "f", "map", " filters", "cache", "fac", "list", "pass", "val", " Filter", "pattern", "block", "handler", "output", "null", "buffer", "b"], "next": ["one", "error", "ice", "Next", "page", "last", "default", "start", "pop", "current", "iter", "read", "choice", "shift", "sub", "nice", "prev", "end", "li", "repeat", "cur", "readable", "parse", "random", "first", "step", "rand"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n\\n        int n = scan.nextInt();\\n        int max = 0, min = 100;\\n        int x[] = new int[n];\\n        for (int i=0; i < n;i ++) {\\n            x[i] = scan.nextInt();\\n            if (x[i] > max) {\\n                max = x[i];\\n            }\\n\\n            if (x[i] < min) {\\n                min = x[i];\\n            }\\n        }\\n\\n        int minTotal = 99999999;\\n        for (int i = min; i <= max; i++) {\\n            int total = 0;\\n            for (int k = 0; k < n; k++) {\\n                total += Math.pow((x[k] - i), 2);\\n            }\\n\\n            if (total < minTotal) {\\n                minTotal = total;\\n            }\\n        }\\n        System.out.println(minTotal);\\n    }\\n}", "target": "17", "substitutes": {"scan": ["sc", "can", "slice", "sin", " scanner", "look", "nn", "conn", "fan", "check", "query", "util", "se", "in", "spin", "nl", "connect", "an", "sync", "iter", "r", "out", "search", "en", "clean", "read", "stat", "ln", "con", "gen", "chan", "cat", "san", "watch", "walk", "ans", "ser", "span", "car", "na", "pan", "run", "skip", "l", "Scan", "ignore", "parse", "ner", " Scan", "ann", "all", "sign", "reader", "serv"], "n": ["j", "nn", "h", "len", "sn", "ns", "in", "d", "no", "count", "z", "v", "c", "m", "en", "y", "network", "nc", "t", "nb", "nt", "ne", "number", "p", "f", "net", "span", "q", "o", "w", "s", "N", "l", "num", "nan", "u", "size", "b"], "max": ["id", "can", "base", "none", "h", "wrap", "right", "in", "d", "mod", "no", "init", "limit", "Max", "last", "z", "cr", "default", "c", "m", "y", "MAX", "shape", "except", "p", "end", "cycle", "ca", "w", "ax", "conf", "range", "act", "sum", "patch", "auto", "u", "all", "size", "temp", "scale"], "min": ["id", "small", "mid", "a", "part", "Min", "unit", "in", "d", "init", "limit", "default", "start", "area", "m", "size", "from", "pre", "index", "minimum", "key", "pos", "p", "f", "span", "partial", "wa", "na", "skip", "sort", "s", "range", "MIN", "act", "div", "sum", "mins", "block", "first", "diff", "mini", "all", "sign", "scale", "name"], "x": ["id", "php", "one", "px", "h", "a", "check", "xx", "rx", "ux", "mx", "d", "cross", "array", "xxx", "z", "v", "ix", "c", "m", "plus", "y", "tx", "en", "xs", "xf", "t", "index", "data", "e", "number", "p", "ex", "f", "xc", "on", "win", "width", "list", "na", "w", "ax", "code", "l", "sex", "view", "exp", "lex", "X", "ext", "u", "size", "xes", "python", "work"], "i": ["id", "j", "iii", "lc", "ri", "h", "pi", "mu", "I", "in", "mi", "init", "d", "ip", "ii", "cli", "z", "v", "io", "ix", "c", "m", "y", "gi", "index", "phi", "e", "p", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "oi", "ie", "yi", "l", "si", "bi", "hi", "info", "ci", "u", "ni", "ti", "fi", "ai", "uri", "mini", "b"], "minTotal": ["maxTotal", "inMax", "minMax", " minZero", " minMax", "maxDelta", "simpletotal", "miniZero", "MinZero", "simpleTon", " mintotal", "intotal", "inDelta", "minDelta", "minToken", "minBasic", "minZero", "MinToken", "mintotal", "MinTotal", "simpleTotal", "minitotal", "maxMax", " minToken", "miniBasic", "MinTon", "MinBasic", "Mintotal", "minTon", "miniToken", " minBasic", "inTotal", " minDelta", "miniTotal", " minTon", "maxtotal"], "total": ["token", "Total", "base", "error", "length", "pi", "ma", "part", "no", "latest", "basic", "otal", "last", "ta", "type", "current", " all", "t", "ho", "fee", "ass", "key", "gross", "alpha", "quant", " full", "partial", "result", "less", "active", "cur", "pass", "full", "oe", "percent", "tax", "ph", "parent", "sum", "info", "translation", "qa", "eta", " whole", "valid", "real", "local", "all", "cost", "complete", "post", "scale"], "k": ["id", "ku", "j", "h", "sk", "ek", "kick", "d", "inc", "kh", "ko", "ka", "z", "v", "c", "m", "spec", "ok", "y", "r", "ck", "uk", "key", "e", "p", "f", "ki", "K", "q", "ik", "ks", "end", "ky", "o", "km", "w", "kid", "kk", "kw", "l", "mk", "ke", "u", "g", "b", "work"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tInputStream in = System.in;\\n\tPrintStream out = System.out;\\n\\n\tint next(int[] h, int idx) {\\n\t\tfor (int i = idx; i < h.length; i++) {\\n\t\t\tif (h[i] != 0) {\\n\t\t\t\treturn i;\\n\t\t\t}\\n\t\t}\\n\t\treturn -1;\\n\t}\\n\\n\tpublic void _main(String[] args) {\\n\t\tScanner sc = new Scanner(in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tint[] h = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\th[i] = sc.nextInt();\\n\t\t}\\n\\n\t\tint ans = 0;\\n\t\tint idx = 0;\\n\t\twhile (true) {\\n\t\t\tidx = next(h, idx);\\n\t\t\tif (idx == -1) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\\n\t\t\twhile (h[idx] > 0) {\\n\t\t\t\tans++;\\n\t\t\t\tfor (int i = idx; i < n && h[i] > 0; i++) {\\n\t\t\t\t\th[i]--;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tout.println(ans);\\n\\n\t\tsc.close();\\n\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main()._main(args);\\n\t}\\n\\n}\\n", "target": "77", "substitutes": {"in": ["inner", "path", "conn", "file", "line", "bin", "init", "din", "inc", "err", "arg", "io", "c", "is", "ac", "r", "con", "read", "reading", "input", "min", "data", "p", "ex", "win", "f", "IN", "inn", "inf", "as", "connection", "image", "In", "ini", "conf", "log", "cl", "info", "exec", "config", "x", "lin", "reader", "buffer", "source", "ins"], "out": ["path", "ch", "object", "pool", "error", "png", "outs", "file", "conn", "buffer", "line", "str", "bin", "init", "user", "err", "no", "report", "cli", "engine", "server", "inc", "println", "io", "manager", "c", "OUT", "cmd", "ex", "obj", "lock", "cache", "IN", "string", "o", "image", "source", "w", "In", "up", "parent", "log", "sum", "exec", "x", "ext", "Out", "write", "output", "copy", "list", "writer", "name"], "h": ["id", "hash", "hh", "ch", "body", "a", "d", "ah", "http", "help", "hw", "bh", "hd", "ha", "header", "ht", "v", "head", "c", "z", "m", "H", "y", "host", "oh", "he", "sh", "gh", "hand", "index", "hr", "k", "e", "p", "ih", "f", "home", "eh", "q", "hm", "rh", "ph", "o", "hs", "w", "uh", "adh", "code", "l", "hi", "hl", "x", "u", "b", "auth", "work"], "idx": ["indexon", "ideX", "IDy", "idl", "Idz", "Idn", "idX", "indx", "indy", "midx", "midz", "indexx", "idi", "IDv", "indexX", "partx", "idon", " idon", " idn", "midy", "indl", "idez", "parti", "idn", "idedx", "idel", "party", "idev", " idy", "Idy", "idey", "indn", "idy", "IDz", "partX", "sidi", " iddx", " idz", "IDx", "idex", "indexy", " idv", "inddx", "Idv", "sidX", "iddx", "midn", "IdX", "Idx", "idv", "indv", "idz", " idX", " idl", " idi", "sidy", "Idon", "iden", "sidx"], "i": ["one", "mi", "count", "start", "gi", "phi", "pos", "qi", "chi", "x", "ci", "uri", "fi", "lc", "d", "ii", "cli", "z", "io", "index", "data", "e", "f", "end", "xi", "li", "multi", "eni", "hi", "u", "length", "pi", "mu", "init", "ix", "abi", "c", "y", "p", "ik", "ui", "iu", "oi", "bi", "ni", "ai", "I", "id", "slice", "j", "api", "ri", "a", "ip", "ind", "ori", "v", "k", "q", "it", "o", "di", "ini", "yi", "ie", "l", "si", "info", "g", "b"], "sc": ["cont", "sw", "ch", "lc", "soc", " Sc", "loc", "cer", "Sc", " SC", "bc", "scope", "SC", "se", "sa", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sh", "cor", "sec", "cat", "sp", "ser", "src", "rc", "sche", "ca", "cam", "cur", "cs", "si", "cl", "pc", "ner", "ci", "asc", "screen", "cv", "sci"], "n": ["j", "nn", "conn", "len", "sn", "ns", "d", "no", "nl", "z", "v", "c", "an", "m", "en", "y", "network", "nc", "t", "ln", "mn", "nb", "k", "nt", "ne", "p", "dn", "f", "net", "o", "w", "s", "N", "num", "l", "x", "nan", "ni", "u", "all", "b", "name"], "ans": [" scans", "outs", "nn", "ats", "cons", "errors", "lan", "sk", "ns", "ens", "ons", "no", "ss", "ions", "lang", "amps", "an", "reads", "ras", "ams", "ars", "ations", "os", "xs", "aned", "es", "rows", "cas", "anch", "anon", "ds", "nt", "oss", "ids", "ks", "span", "anc", "ANS", "na", "as", "blocks", "pass", "ians", "s", "actions", "ays", "act", "cs", "ants", "vs", "eps", "x", "nan", "ops", "ann", "ls", "ins"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int[] seq = new int[n];\\n    int total = 0;\\n    if(n ==2){\\n      total = 2* sc.nextInt();\\n    }else{\\n      for(int i = 0; i < n - 1; i++){\\n   seq[i] = sc.nextInt();\\n     if(i == 0){\\n     total += seq[i];\\n     }else if(i == n-2){\\n     total += seq[i];\\n       total += Math.min(seq[i],seq[i-1]);\\n     }else{\\n     total += Math.min(seq[i],seq[i-1]);\\n     }\\n   }  \\n    }\\n    System.out.println(total);\\n  }\\n\\n}", "target": "240", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "sub", "nc", "sch", "cc", "cor", "sh", "ctx", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "na", "cam", "cur", "coll", "sb", "cs", "cl", "pc", "exec", "ner", "parse", "ci", "asc", "sci"], "n": ["j", "nn", "conn", "len", "sn", "ns", "d", "no", "count", "nl", "z", "v", "c", "not", "m", "r", "en", "y", "network", "nc", "t", "ln", "min", "nb", "k", "nt", "cn", "ne", "un", "p", "e", "f", "net", "q", "max", "span", "inn", "na", "o", "s", "fn", "N", "num", "l", "x", "don", "ni", "u", "size", "b"], "seq": ["slice", "vals", "blast", "eq", "section", "length", "vec", "job", "inc", "sem", "zip", "sel", "count", "iq", "sq", "complete", "verse", " sequence", "iter", "sub", "sec", "cas", "cc", "fast", "circ", "index", "serv", "batch", "ctx", "frame", "queue", "prev", "wave", "flat", "q", "la", "next", "na", "test", "cur", "col", "feat", "sort", "contin", "sequ", "parent", "code", "comb", "cl", "resp", "phrase", "pse", "qa", "select", "struct", "sect", "que", "sequence", "list", "config", "sci"], "total": ["token", "Total", "base", "error", "right", "length", "part", "no", "basic", "failed", "otal", "count", "last", "type", "default", "current", "this", "json", "t", "post", "value", "data", "index", "key", "gross", "alpha", "bar", "missing", "result", "partial", "max", "less", "fat", "toc", "active", "found", "multi", "cur", "pass", "full", "trans", "average", "percent", "tax", "parent", "sum", "si", "info", "has", "shared", "translation", "qa", "valid", "local", "cost", "null", "complete", "done", "scale"], "i": ["id", "slice", "inner", "j", "api", "ri", "h", "pi", "I", "mi", "init", "ip", "ii", "cli", "z", "v", "ix", "c", "io", "ori", "abi", "start", "iv", "t", "gi", "index", "adi", "phi", "e", "p", "anti", "qi", "f", "ji", "q", "ui", "xi", "li", "next", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "yi", "l", "si", "bi", "info", "x", "ci", "diff", "u", "ni", "uri", "fi", "ai", "mini", "temp", "ti"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tFastScanner sc = new FastScanner();\\n\t\tString S = sc.next();\\n\\n\t\tint A = S.charAt(0) - '0';\\n\t\tint B = S.charAt(1) - '0';\\n\t\tint C = S.charAt(2) - '0';\\n\t\tint D = S.charAt(3) - '0';\\n\\n\t\tString op1;\\n\t\tString op2;\\n\t\tString op3;\\n\t\tfor (int i = 0; i < (1 << 3); i++) {\\n\t\t\tint sum = A;\\n\t\t\tif (((i >> 0) & 1) == 0) {\\n\t\t\t\top1 = \"+\";\\n\t\t\t\tsum += B;\\n\t\t\t} else {\\n\t\t\t\top1 = \"-\";\\n\t\t\t\tsum -= B;\\n\t\t\t}\\n\\n\t\t\tif (((i >> 1) & 1) == 0) {\\n\t\t\t\top2 = \"+\";\\n\t\t\t\tsum += C;\\n\t\t\t} else {\\n\t\t\t\top2 = \"-\";\\n\t\t\t\tsum -= C;\\n\t\t\t}\\n\\n\t\t\tif (((i >> 2) & 1) == 0) {\\n\t\t\t\top3 = \"+\";\\n\t\t\t\tsum += D;\\n\t\t\t} else {\\n\t\t\t\top3 = \"-\";\\n\t\t\t\tsum -= D;\\n\t\t\t}\\n\\n\t\t\tif (sum == 7) {\\n\t\t\t\tSystem.out.println(A + op1 + B + op2 + C + op3 + D + \"=7\");\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\\n\t}\\n}\\n\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "152", "substitutes": {"sc": ["lc", " Sc", "scl", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "CS", "cr", "esc", "scan", "osc", "sync", "SB", "ec", "nc", "sch", "sec", "cc", "sh", "desc", "sp", "acc", "rc", "system", "BC", "SCP", "anc", "WS", "CC", "s", "cs", "si", "cl", "pc", "RC", "asc", "sci"], "S": ["US", "SH", "Site", "Si", "SS", "SU", "Su", "F", "Sc", "Sample", "Sin", "SC", "Single", "Space", "SL", "TS", "SM", "SR", "Session", "OSS", "Service", "JS", "SB", "STR", "SF", "T", "VS", "OS", "Sl", "SA", "G", "FS", "SAM", "NS", "L", "Text", "SE", "Sign", "Source", "SN", "WS", "SP", "s", "BS", "M", "ST", "U", "N", " s", "IS", "SI", "Socket", "V", "RS", "P", "GS", "Sing"], "A": ["Am", "As", "AR", "a", "AP", "AS", "Major", "AD", "AA", "IA", "H", "T", "Alpha", "App", "Y", "SA", "Array", "AM", "L", "API", "K", "CA", "Ar", "NA", "At", "O", "M", "AW", "AH", "U", "N", "Ca", "LA", "X", "P", "AL", "AU", "I", "G", "AC", "RA"], "B": ["BI", "Q", "F", "BL", "E", "EB", "DB", "CB", "AB", "NB", "BF", "H", "SB", "MB", "T", "Bs", "TB", "Y", "BB", "R", "L", "WB", "BA", "W", "BC", "O", "GB", "M", "U", "N", "X", "BE", "V", "P", "PB", "I", "G"], "C": ["Q", "CL", "Cs", "F", "E", "SC", "CD", "CU", "CS", "Ch", "Con", "H", "T", "CNN", "Code", "Y", "R", "L", "CT", "CM", "YC", "W", "CR", "CI", "BC", "Cu", "O", "VC", "CA", "CC", "M", "EC", "CN", "CP", "U", "Cr", "N", "Ca", "X", "V", "P", "DC", "I", "G", "AC"], "D": ["Q", "DA", "DM", "DD", "F", "E", "Ds", "DR", "DB", "d", "AD", "DE", "DH", "H", "DP", "Do", "T", "DO", "Y", "R", "L", "W", "O", "M", "U", "Z", "N", "DI", "X", "ID", "V", "P", "DF", "DC", "DS", "I", "G"], "op1": ["oper1", " op5", "ip3", "oper5", "ip2", "ip1", " op13", "op0", "Op1", "cop3", "ipA", " op0", "cop2", "opp2", "cop1", "opp0", "copA", "opp13", "oper2", " op4", "OpA", "oper4", " opA", "op13", "oper13", "cop4", "oper3", "op4", "Op3", "opA", "operA", "cop5", "Op2", "op5", "opp1", "oper0"], "op2": ["ip02", "locB", "op02", "oper1", "OP1", "loc1", "opB", "opt2", "OP4", "ip3", " op02", "ip2", "ip1", "opTwo", " opb", "oper2", "OP2", "loc4", " op4", "ipTwo", "operTwo", " opB", "opt4", "opt3", "Opb", "opb", "loc2", "opt1", "ip4", "optb", "optB", "op4", "OpB", "Op4", "OPB", "Op2", "oper02", " opTwo"], "op3": ["Op53", "op2003", "rop3", "ropThree", "OP1", "ip5", "OPThree", "op23", "OP3", "hop2003", "rop2003", "ip3", "oper5", "optThree", " op23", "ip2", "OP53", "op8", "oper8", "Op1", " op2003", " opThree", "rop4", "op53", "hopThree", "hop4", "ip8", " op53", "oper2", "opt8", " op4", "ipthree", "opt3", "OpThree", "oper3", "operthree", "opThree", "opthree", "operThree", " opthree", "op4", "oper23", "Op3", "hop3", "ip23", "ipThree", "opt5", "op5"], "i": ["id", "slice", "j", "a", "pi", "mu", "d", "mi", "ip", "ii", "ori", "v", "io", "ix", "iter", "y", "gi", "uli", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "di", "ini", "ie", "yi", "chi", "l", "si", "bi", "hi", "info", "zi", "ci", "u", "ti", "ni", "fi", "ai", "uri", "mini", "I"], "sum": ["len", "ma", "sa", "count", "ul", "mean", "ass", "dim", "add", "fat", "average", "mit", "up", "num", "sam", "cal", "vol", "fill", "user", "Sum", "summary", "style", "seed", "spread", "norm", "match", "index", "data", "key", "sp", "alpha", "missing", "span", "li", "multi", "pass", "sort", "gram", "space", "all", "depth", "sign", "um", "press", "comment", "cum", "ums", "ss", "mem", "ac", "mass", "sim", "out", "max", "mm", "skip", "dot", "sup", "parse", "scale", "unit", "se", "member", "miss", "min", "cache", "acc", "us", "si", "weight", "mask", "cost", "size", "total"], "in": ["path", "login", "h", "or", "bin", "rec", "resource", "err", "inc", "din", "is", "url", "inet", "r", "this", "out", "con", "read", "t", "input", "min", "serv", "data", "re", "xml", "ex", "p", "win", "f", "IN", "inn", "inf", "as", "connection", "it", "image", "In", "binary", "ini", "multi", "readable", "val", "l", "fr", "reader", "source", "ins"], "buffer": ["slice", "Buffer", "base", "address", "document", "length", "vector", "bin", "offset", "memory", "resource", "bb", "flush", "array", "shell", "table", "header", "server", "io", "FFER", "url", "position", "iter", "input", "data", "nb", "available", "batch", "bar", "queue", "cache", "zero", "reference", "row", "binary", "window", "stack", "uffer", "pad", "buff", "buf", "use", "variable", "fb", "reader", "block", "output", "message", "copy", "transfer", "writer", "source"], "ptr": ["port", "cmp", "address", "loc", "Ptr", "length", "len", "tp", "ft", "offset", "scroll", "addr", "xt", "fd", "adr", "pointer", "inter", "pt", "shift", "td", "pty", "t", "tr", "const", "pend", "np", "index", "fe", "push", "nt", "req", "pos", "p", "arr", "qi", "ctr", "src", "br", "elt", "tmp", "wr", "pad", "pr", "buff", "buf", "ref", "code", "fr", "pl", "pointers", "pse", "attr", "dr", "ext", "patch", "rt", "trace", "depth", "fee", "prot", "inst", " pointer"], "buflen": ["fuflens", "fuFlens", "buflon", "buclon", "bulfens", "buFlatten", "bufron", "fufleng", "fuflen", "boglun", "bufilay", "fuvelen", "fuflon", "buflatten", "buveleng", "boglon", "bufren", "buFlen", "buglun", "buslen", "buflay", "boglen", " Buflon", "bulfon", "buglon", "bufon", "buglen", "bufeng", "fuveleng", "bufratten", "fuvelon", "buclen", "bufilon", "buslens", "buclay", "fuflEN", "bufrun", "buflun", "boflon", "bulfen", " Buflen", " Bufron", "buvelon", "bufilen", "bufilatten", "bufleng", "buglatten", "bufens", "fuFlend", "fuvelens", "buFlun", "fuFlEN", "bufen", "buvelen", "buFlend", " Buflay", "buglEN", "buflend", "boflun", "fuFlen", " Buflatten", " Bufray", "bufray", "buflEN", "bulfeng", "buglens", "buclatten", "boflen", "buslend", "fuflend", "buFlon", "buflens", "boflatten", "buFlEN", "boglatten", "buslEN", " Bufratten", "buglend", "buvelens", " Bufren", "buFlens"], "c": ["enc", "ch", "lc", "h", "ct", "bc", "d", "fc", "count", "uc", "z", "abc", "cr", "esc", "m", "ac", "ec", "nc", "ce", "cc", "k", "vc", "cy", "e", "p", "xc", "f", "unc", "dc", "rc", "cm", "col", "cs", "code", "l", "cl", "pc", "ci", "mc"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args)  {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString[] str = new String[3];\\n\t\tstr[0] = sc.nextLine();\\n\t\tstr[1] = sc.nextLine();\\n\t\tstr[2] = sc.nextLine();\\n\t\tboolean f = true;\\n\t\tint i = 0;\\n\t\twhile(f) {\\n\t\t\tif(str[i].substring(0,1).equals(\"a\")){\\n\t\t\t\tstr[i] = str[i].substring(1,str[i].length());\\n\t\t\t\ti = 0;\\n\t\t\t}else if(str[i].substring(0,1).equals(\"b\")){\\n\t\t\t\tstr[i] = str[i].substring(1,str[i].length());\\n\t\t\t\ti = 1;\\n\t\t\t}else if(str[i].substring(0,1).equals(\"c\")){\\n\t\t\t\tstr[i] = str[i].substring(1,str[i].length());\\n\t\t\t\ti = 2;\\n\t\t\t}\\n\t\t\tif(str[i].equals(\"\")){\\n\t\t\t\tif(i == 0) {\\n\t\t\t\t\tSystem.out.println(\"A\");\\n\t\t\t\t\treturn;\\n\t\t\t\t}else if(i == 1) {\\n\t\t\t\t\tSystem.out.println(\"B\");\\n\t\t\t\t\treturn;\\n\t\t\t\t}else if(i == 2) {\\n\t\t\t\t\tSystem.out.println(\"C\");\\n\t\t\t\t\treturn;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "11", "substitutes": {"sc": ["sw", "cont", "ch", "console", "lc", "soc", "sys", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", " scr", "com", "server", "uc", "cr", "sq", "c", "scan", "osc", "sync", "out", "sub", "nc", "sch", "cc", "sec", "cor", "ctx", "sp", "rc", "system", "anc", "sche", "cur", "sb", "cs", "cl", "pc", "parse", "ner", "asc", "screen", "mc", "sci"], "str": ["sr", "enc", "inner", "strip", "Str", "doc", "inst", "st", "line", "comment", "form", "part", "in", "user", "err", "oct", "ss", "er", "style", "c", "txt", "url", "spec", "r", "iter", "out", "STR", "war", "gr", "tr", "usr", "word", "stri", "input", "hr", "p", "n", "sp", "arr", "star", "ctr", "result", "br", "string", "char", "dec", "dict", "it", "wr", "module", "pass", "pr", "s", "tree", "div", "code", "fr", "strike", "exp", "text", "sl", "ner", "status", "dr", "list", "b", "name", "sta"], "i": ["uni", "in", "mi", "iv", "gi", "phi", "qi", "ali", "chi", "ei", "x", "zi", "ci", "diff", "uri", "fi", "ii", "cli", "io", "is", "index", "data", "e", "xi", "li", "string", "multi", "eni", "isi", "hi", "u", "ti", "pi", "init", "ix", "c", "y", "p", "n", "ik", "ui", "iu", "ic", "oi", "iri", "sup", "bi", "ni", "ai", "I", "source", "id", "slice", "j", "iii", "api", "ri", "a", "idi", "ip", "ori", "v", "k", "esi", "ki", "it", "o", "di", "ini", "s", "yi", "ie", "l", "si", "info", "b"], "f": ["cf", "h", "fo", "F", "function", "fa", " F", "fm", "sf", "d", "tf", "bf", "v", "c", "m", "of", "r", "fp", "t", "fast", "fe", "func", "e", "p", "n", "inf", "feed", "it", "s", "l", "info", "x", "af", "g", "u", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int w = scanner.nextInt();\\n        int h = scanner.nextInt();\\n        int x = scanner.nextInt();\\n        int y = scanner.nextInt();\\n\\n        System.out.println((double) w * h / 2);\\n        if((x ==  (double) w / 2) && (y == (double) h / 2)){\\n            System.out.println(1);\\n        } else {\\n            System.out.println(0);\\n        }\\n    }\\n}\\n", "target": "182", "substitutes": {"scanner": ["canler", "scaner", "Scanner", "hanmer", "scanener", "nerker", "scanmer", "analyk", "verker", "Scanener", "Scaninner", "hanner", "canter", "anter", "analyner", " scanmer", "hanning", "caner", "Scaner", "canning", "Scanker", "nerner", "verner", "scanler", "nerinner", "Scanter", " scanning", "analyter", "analyning", "scanning", "Scanmer", "scanker", "hanter", "anner", " scank", "anning", "canker", "verinner", "verler", "canner", "verter", "scank", "Scank", "nerter", "verener", "scaninner", "scanter", "Scanning", "anker", "Scanler", "analyker", "canener", " scanter", "verer"], "w": ["fw", "sw", "wb", "aw", "wx", "a", "wal", "wl", "wh", "d", "hw", "z", "v", "c", "t", "sh", "k", "wd", "ew", "p", "n", "how", "win", "f", "q", "max", "W", "wa", "width", "o", "ow", "i", "l", "wt", "u", "b", "work"], "h": ["id", "hh", "j", "ch", "height", "in", "ah", "d", "bh", "z", "v", "ht", "c", "m", "H", "oh", "en", "t", "he", "sh", "gh", "k", "p", "n", "home", "f", "eh", "q", "hm", "rh", "ph", "o", "hs", "i", "l", "hi", "u", "g", "b"], "x": ["j", "px", "a", "height", "xx", "rx", "fx", "in", "d", "xy", "z", "v", "ix", "c", "m", "t", "index", "k", "p", "ex", "n", "f", "on", "wa", "xi", "xp", "ph", "o", "ax", "i", "l", "hi", "dx", "X", "u", "dy"], "y": ["py", "j", "yt", "a", "height", "d", "hy", "z", "v", "ny", "c", "m", "yy", "t", "ay", "Y", "k", "cy", "ty", "p", "oy", "f", "on", "dy", "ky", "o", "vy", "ey", "sky", "i", "yi", "ya", "l", "hi", "u", "b", "sy"]}}
{"code": "import java.io.ByteArrayInputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\t\\n\tString INPUT = \"\";\\n\t\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tnew Main().run();\\n\t}\\n\t\\n\tvoid run() {\\n\t\tScanner sc = INPUT.isEmpty() ? new Scanner(System.in) : new Scanner(new ByteArrayInputStream(INPUT.getBytes()));\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\t\t\\n\t\tsolve(sc, out);\\n\t\tout.flush();\\n\t}\\n\t\\n\tvoid solve(Scanner sc, PrintWriter out) {\\n\t\tint flg[][] = new int[4][13];\\n\t\t\\n\t\tfor (int i = 0; i < 4; i++) {\\n\t\t\tfor (int j = 0; j < 13; j++) {\\n\t\t\t\tflg[i][j] = 1;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tint n = sc.nextInt();\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tString S = sc.next();\\n\t\t\tint a = sc.nextInt();\\n\t\t\tif (S.equals(\"S\")) flg[0][a-1]=0;\\n\t\t\tif (S.equals(\"H\")) flg[1][a-1]=0;\\n\t\t\tif (S.equals(\"C\")) flg[2][a-1]=0;\\n\t\t\tif (S.equals(\"D\")) flg[3][a-1]=0;\\n\t\t}\\n\t\t\\n\t\tfor (int i = 0; i < 4; i++) {\\n\t\t\tfor (int j = 0; j < 13; j++) {\\n\t\t\t\tif (flg[i][j] == 1) {\\n\t\t\t\t\tif (i == 0) System.out.print(\"S \");\\n\t\t\t\t\tif (i == 1) System.out.print(\"H \");\\n\t\t\t\t\tif (i == 2) System.out.print(\"C \");\\n\t\t\t\t\tif (i == 3) System.out.print(\"D \");\\n\t\t\t\t\tSystem.out.println(j+1);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n}\\n\\n", "target": "189", "substitutes": {"INPUT": ["InLET", " InInput", "InUT", "INInput", "INGUT", "INGInput", "inPUT", " INUT", "InPUT", " INInput", "INGPUT", "inLET", " InLINE", "INUT", "INLET", "inLINE", " INLET", "InLINE", "inInput", "INLINE", "INGLINE", "InJECT", " INLINE", " InPUT", "INJECT", " InJECT", "InInput", " INJECT"], "sc": ["sw", "cont", "ch", "lc", "soc", "cer", "ct", "Sc", "bc", "se", "SC", "scope", "sem", "com", "cli", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "spec", "sync", "ec", "tc", "nc", "cc", "sh", "cus", "core", "desc", "proc", "ctx", "sp", "src", "cle", "rc", "system", "anc", "sche", "ca", "cam", "cur", "cms", "cs", "go", "si", "cl", "pc", "exec", "ner", "parse", "ci", "asc", "g", "cv", "sci"], "out": ["inner", "again", "ch", "page", "in", "table", "lib", "server", "client", "OUT", "con", "point", "result", "w", "up", "exec", "x", "output", "gen", "list", "temp", "ou", "co", "path", "outs", "sys", "line", "user", "flush", "println", "cli", "group", "io", "down", "now", "input", "key", "dump", "string", "window", "pass", "space", "cl", "exp", "auto", "all", "raw", "copy", "name", "serv", "error", "conn", "comment", "scope", "call", "c", "scan", "sync", "to", "view", "sum", "print", "Out", "screen", "buffer", "object", "file", "str", "bin", "err", "report", "prefix", "outer", "session", "ex", "obj", "lock", "cache", "IN", "system", "o", "parent", "code", "log", "info", "b", "writer", "write"], "flg": ["flp", "flk", "slg", "Flga", "Flg", "flge", "vlge", "Flge", "flG", "vlgs", " flk", "flgs", "fallG", " flgg", "slge", "fallgs", "Flp", "Flgg", " flga", " flq", "fallg", " flge", "FlG", "FLg", "llg", "FLk", "rlk", "Flgs", "FLG", "vlG", "llgs", "Flq", "rlq", "FLga", " flgs", "llG", "vlg", "Flk", "FLge", "flgg", "flq", "slgs", "rlg", " flp", "FLgs", "flga", "slp", "llgg", " flG", "fallga", "rlG"], "i": ["id", "api", "ri", "ami", "pi", "ij", "my", "in", "mi", "d", "init", "ii", "ip", "cli", "ori", "io", "ix", "c", "is", "v", "z", "iv", "y", "gi", "index", "phi", "e", "p", "qi", "f", "ji", "ik", "ui", "ali", "xi", "li", "iu", "it", "eni", "b", "di", "ini", "o", "yi", "ie", "oi", "s", "si", "bi", "hi", "info", "zi", "x", "ci", "ni", "u", "uri", "ti", "ai", "I"], "j": ["jump", "jet", "h", "ja", "J", "jack", "ij", "js", "job", "d", "ah", "ig", "jj", "ii", "bj", "z", "v", "je", "c", "m", "r", "y", "jit", "t", "jc", "jl", "index", "k", "key", "e", "ak", "p", "obj", "qi", "f", "ji", "aj", "q", "off", "li", "it", "o", "pr", "w", "adj", "ie", "el", "l", "si", "uj", "x", "patch", "jo", "oj", "g", "u", "jp", "b", "name"], "n": ["nn", "h", "conn", "sn", "ns", "in", "d", "z", "ny", "c", "m", "y", "en", "nc", "nb", "k", "e", "ne", "p", "f", "net", "o", "s", "N", "num", "l", "x", "ner", "u", "b"], "S": ["Q", "SH", "Site", "Si", "SS", "Os", "As", "SU", "J", "Su", "F", "Ns", "E", "Js", "Sample", "SC", "Sing", "ss", "The", "Single", "Space", "Standard", "TS", "SO", "Session", "Service", "H", "SB", "Cos", "A", "Sa", "T", "B", "OS", "Y", "Less", "Unit", "Sl", "NS", "L", "Text", "K", "SE", "Is", "C", "Us", "O", "D", "SN", "WS", "s", "U", "N", " s", "SI", "Socket", "V", "P", "Local", "Es", "I", "G"], "a": ["api", "error", "ba", "ja", "ma", "aa", "sa", "d", "am", "z", "an", "area", "c", "m", "ac", "ia", "at", "ana", "y", "A", "ga", "data", "index", "ea", "p", "pa", "alpha", "f", "aj", "span", "la", "active", "na", "va", "ca", "code", "asa", "da", "x", "qa", "ae", "auto", "ni", "all", "action", "ai", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\\n\t\tboolean startsFromA = (S.charAt(0) == 'A');\\n\t\tString seekC = S.substring(2, S.length() - 1);\\n\t\tint indexOfC = seekC.indexOf('C');\\n\t\tboolean containsSingleC = (indexOfC != -1 && seekC.indexOf('C', indexOfC + 1) == -1);\\n\t\tboolean lowersOtherThanAC = isLowersOtherThanAC(S, indexOfC + 2);\\n\t\tSystem.out.println((startsFromA && containsSingleC && lowersOtherThanAC) ? \"AC\" : \"WA\");\\n\t}\\n\\n\tprivate static boolean isLowersOtherThanAC(String S, int indexOfC) {\\n\t\tchar[] array = S.toCharArray();\\n\t\tint length = array.length;\\n\t\tfor (int i = 1; i < length; i++) {\\n\t\t\tif (i != indexOfC && Character.isUpperCase(array[i])) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n}", "target": "209", "substitutes": {"sc": ["sw", "enc", "lc", " Sc", "str", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "r", "out", "ec", "sub", "nc", "sch", "sec", "sh", "cc", "cus", "desc", "proc", "sp", "acc", "src", "rc", "system", "anc", "cs", "l", "Scan", "cl", "ner", "asc", "g", "sci"], "S": ["SH", "Si", "SS", "As", "SU", "Su", "F", "E", "First", "Sample", "I", "SC", "Standard", "The", "Single", "SL", "TS", "Space", "SO", "SR", "Service", "SB", "Input", "A", "STR", "CSS", "T", "SF", "B", "Sl", "SA", "SAM", "Section", "NS", "R", "L", "Text", "SIGN", "SE", "string", "Sign", "C", "Source", "O", "D", "SN", "In", "WS", "s", "M", "ST", "U", "N", " s", "IS", "SI", "RS", "Socket", "V", "New", "P", "GS", "Series", "DS", "Part", "G", "Contents"], "startsFromA": ["startsFromAny", "storesFroma", "startsWithC", "startsfromB", "storesFromC", "startsfromA", "stendsfromC", "startsfromC", "stendsFromAny", "stendsFromB", "storesFromA", "stendsfromAny", "stendsFromC", "startsfromAny", "startsWithA", "stendsfromB", "startsWithAny", "startsfroma", "startsWithB", "storesFromB", "startsFromB", "stendsFromA", "startsWitha", "startsFromC", "startsFroma", "stendsfromA"], "seekC": ["requestS", "seekingS", " seekingC", " seekc", "moveS", " seekingA", "ekC", "seekc", "seekA", " seekP", "seekP", " seekA", " seekingCM", "scrollE", "scrollC", "requestA", "scrollS", " seekE", "seekE", "seekCM", "moveA", "seekS", "ekA", "ekS", "ekc", "seekingC", " seekingS", "moveCM", " seekS", "requestc", "requestC", "seekingE", " seekCM", "seekingP", "moveC", "scrollP"], "indexOfC": ["indexOFCE", "indexofCurrent", "indexOFA", "IndexofX", " indexOfc", "indexIfC", " indexofEC", "IndexOfCE", "indexIfEC", "indexOFc", " indexofC", "indexOrC", "IndexOfAny", "indexOFE", "IndexofC", "indexOFC", " indexOfA", "IndexOfC", "indexOfEC", "IndexofCE", "indexofL", "indexofc", "IndexofE", "indexofEC", "indexOnC", "IndexOfc", "IndexofEC", "indexOfA", "indexOFAny", "indexOnA", "IndexOfX", "indexofC", "indexOnc", "indexofAny", "indexOfCurrent", "indexOfCE", "indexofE", "indexIfc", "indexOrE", "indexOrA", " indexOfEC", "indexOFEC", "indexIfA", "indexOFL", "IndexOfCurrent", "indexOfAny", "indexOnX", "IndexofAny", "indexOnEC", "indexOfL", "IndexofCurrent", "indexOfX", "indexOrAny", "indexOFX", "Indexofc", " indexofc", "indexofCE", "indexofA", "IndexofA", "IndexofL", "IndexOfEC", "indexOrc", "indexOFCurrent", "IndexOfE", "indexOfE", "IndexOfL", "indexOrL", "indexOfc", "indexIfCurrent", "IndexOfA", "indexIfL", "indexofX", " indexofA"], "containsSingleC": ["containsOneAC", "containsMultipleCC", "contentsSinglec", "containsOneCC", "containsOnec", "containsSingleCC", "containsMultipleC", "containsMultiC", "containsMultiplec", "contentsMultipleC", "containsRegularT", "containSingleT", "contentsSingleAC", "containsOneC", "containsMultiAC", "contentsMultipleAC", "containsOneT", "containOneT", "contentsMultiplec", "containsMultic", "contentsMultipleCC", "containSingleAC", "containsSingCC", "containsSingleT", "containsMultiCC", "containsSingleAC", "containOneC", "containSingleC", "containsRegularAC", "containOneCC", "containsRegularC", "containsSingT", "containOneAC", "containsSinglec", "containSingleCC", "contentsSingleC", "containsSingAC", "containsSingC", "containsRegularCC", "contentsSingleCC", "containsMultipleAC"], "lowersOtherThanAC": ["lowersOtherThANAC", "lowersOtherTHansC", "lowersOtherTHanAcc", "lowersOtherTHanAC", "lowersOtherThhanAC", "lowersOtherThanA", "lowersOtherThaac", "lowersOtherThansac", "lowersOtherThanAcc", "lowersOtherTHansAcc", "lowersOtherThanedAC", "lowersOtherTHansA", "lowersOtherThanedac", "lowersOtherThanedC", "lowersOtherTHansAC", "lowersOtherThaC", "lowersOtherTHansAc", "lowersOtherThhanAc", "lowersOtherTHanAc", "lowersOtherThaAC", "lowersOtherThanedA", "lowersOtherTHanA", "lowersOtherThansAC", "lowersOtherThaA", "lowersOtherThanC", "lowersOtherThansAc", "lowersOtherThansC", "lowersOtherTHanac", "lowersOtherTHanC", "lowersOtherThanac", "lowersOtherThansAcc", "lowersOtherThANAc", "lowersOtherThansA", "lowersOtherThhanAcc", "lowersOtherThANAcc", "lowersOtherThANC", "lowersOtherThhanC", "lowersOtherThanAc", "lowersOtherTHansac"], "array": ["instance", "air", "object", "address", "api", "section", "a", "function", "vector", "database", "audio", "angle", "group", "v", "arrow", "area", "pair", "response", "element", "r", "value", "index", "number", "ring", "Array", "arr", "expression", "cache", "result", "ray", "string", "row", "coll", "image", "ase", "range", "collection", "view", "record", "list"], "length": ["slice", "id", "distance", "path", "strip", "left", "base", "loc", "form", "section", "height", "len", "front", "part", "line", "angle", "limit", "count", "child", "type", "character", "head", "level", "split", "style", "position", "iter", "point", "size", "shape", "value", "Length", "index", "data", "padding", "number", "how", "join", "f", "integer", "duration", "end", "max", "q", "string", "power", "width", "ph", "range", "code", "l", "component", "time", "block", "diff", "load", "depth", "sequence", "total", "name", "work"], "i": ["id", "slice", "inner", "j", "ri", "h", "a", "pi", "mu", "I", "d", "mi", "init", "volume", "ii", "ip", "type", "ori", "v", "io", "c", "is", "m", "abi", "ix", "shift", "gi", "index", "k", "phi", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "multi", "o", "eni", "di", "ini", "oi", "chi", "l", "si", "bi", "info", "x", "ci", "u", "ti", "uri", "fi", "ai", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint a = scan.nextInt();\\n\t\tint b = scan.nextInt();\\n\t\t\\n\t\tif(a<=5) System.out.println(0);\\n\t\telse if(a<=12)System.out.println(b/2);\\n\t\telse System.out.println(b);\\n\t\t\\n\t}\\n}", "target": "249", "substitutes": {"scan": ["sc", "can", "slice", "inner", "base", "man", "app", "nn", "look", "conn", "fan", "query", "se", "in", "report", "server", "connect", "an", "sync", "see", "out", "search", "read", "clean", "cat", "san", "n", "watch", "walk", "ans", "ser", "span", "row", "car", "na", "pan", "feed", "run", "skip", "pass", "l", "Scan", "pin", "parse", "ner", "x", "reader", "ann", "all", "sign", "gen", "source"], "a": ["access", "ba", "ab", "oa", "fa", "aaa", "aa", "sa", "d", "aux", "count", "an", "area", "c", "ac", "y", "A", "ga", "ada", "ea", "ava", "n", "alpha", "f", "pa", "p", "aj", "la", "ca", "as", "va", "na", "i", "ama", "au", "qa", "ae", "af", "auto", "ai", "sta"], "b": ["j", "base", "ba", "ab", "cb", "body", "length", "bin", "abb", "aa", "d", "bb", "bf", "v", "c", "ob", "y", "db", "A", "B", "nb", "k", "beta", "e", "number", "p", "n", "mb", "f", "be", "eb", "bot", "next", "bs", "sb", "i", "l", "bi", "fb", "x", "bd", "rb"]}}
{"code": "import java.util.Scanner;\\n/**\\n * \u89e3\u9898\u65b9\u6cd5 26 \u8fdb\u5236\\n * k \u8fdb\u5236\u6bcf\u4e00\u4f4d\u6700\u5927\u53ea\u6709 k - 1\uff0c\u4f46\u662f\u6b64\u9053\u9898\u76ee\u6700\u5927\u53ef\u4ee5\u662f 26\uff0c\u6240\u4ee5\u6bcf\u6b21\u5904\u7406 N - 1\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        long N = scanner.nextLong();\\n        String ans = \"\";\\n        while (N > 0) {\\n            N--;\\n            ans = (char)(N % 26 + 97) + ans;\\n            N /= 26;\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "191", "substitutes": {"scanner": [" scanser", "annner", "Scanner", "scaner", "scanener", "Scanener", "Scaninner", "scanator", "anninner", "canter", "caninner", "caner", "Scaner", "canator", "Scanter", "anner", "annator", "Scanser", "Scanator", " scanener", "canner", "canser", "scaninner", "scanter", "canener", "scanser", " scanter"], "N": ["NG", "Ni", "Ne", "J", "Ns", "F", "E", "AN", "NL", "No", " n", "NB", "Num", "Count", "H", "Node", "T", "NE", "NI", "Sn", "Y", "NT", "Na", "NS", "n", "R", "L", "K", "Len", "NC", "O", "C", "NA", "D", "SN", "CN", "M", "NP", "S", "Z", "X", "NN", "V", "P", "Size", "GN", "I", "SIZE"], "ans": [" scans", "can", "lines", "aces", "vals", "rules", "ats", "a", "lan", "sk", "ns", "ons", "AN", "ens", "annis", "atan", "ions", "amps", "anges", "an", "asts", "scan", "ras", "ars", "ana", "os", "aned", "Ann", "CNN", " chars", "anon", "chan", "ents", "ds", "cn", "cat", "plan", "ks", " spans", "anc", "ANS", "na", "anners", "as", "NA", "pass", "s", "anned", "cs", "ants", "kin", "eps", "vs", "nan", "ann", "ls", "ins"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tStringBuilder stb = new StringBuilder();\\n\t\tstb.append(sc.next());\\n\t\tstb.append(stb);\\n\t\tString str= stb.toString();\\n\t\tString x = sc.next();\\n\t\tSystem.out.println(str.contains(x) ? \"Yes\" : \"No\");\\n\t\tsc.close();\\n\t}\\n\t\\n}\\n\\n", "target": "198", "substitutes": {"sc": ["sw", "ch", "lc", "soc", "cer", "Sc", " SC", "bc", "se", "sf", "SC", "scope", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "con", "ec", "nc", "sch", "cc", "sh", "sec", "core", "sp", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "cl", "set", "pc", "exec", "ner", "sci"], "stb": ["spmb", "stbr", "strbf", "strp", "swob", "strob", "ptb", "strf", "ptf", "stob", "swbf", "sf", "stbf", "putdb", " stf", " stp", "ptbt", "strB", "STb", "stf", "stbh", "stdb", "stbs", "spbr", "STB", " stmb", "stmb", "stab", "strb", " stdb", "stri", "strbs", " stbf", "spb", "STp", " stob", "sti", "smb", "strdb", " stbs", "putb", "spf", "STf", "stB", " stbh", "stbt", "strbh", "ptab", "swbs", " stbr", " stB", " stbt", "sb", " sti", "stp", "strbt", "putbh", " stab", "swb", "sbr", "puti", "strab"], "str": ["sr", "enc", "Str", "doc", "st", "in", "d", "err", "v", "c", "url", "spec", "r", "out", "STR", "tr", "t", "stri", "xml", "ex", "obj", "sp", "f", "arr", "br", "string", "char", "pr", "s", "sol", "fr", "exp", "sl", "text", "dr", "ext", "g", "expr", "msg", "b"], "x": ["xxxx", "sw", "j", "wx", "xx", "rx", "ux", "xy", "xt", "xxxxxxxx", "xxx", "z", "v", "ix", "c", "y", "tx", "xs", "t", "e", "ex", "n", "p", "f", "string", "xp", "xi", "test", "w", "i", "sex", "dx", "X", "text", "u", "expl", "name", "work"]}}
{"code": "import java.math.BigDecimal;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        BigDecimal X = in.nextBigDecimal();\\n        BigDecimal yen = new BigDecimal(\"100\");\\n        BigDecimal rate = new BigDecimal(\"1.01\");\\n        int count = 0;\\n        while (yen.compareTo(X)<0){\\n            yen = new BigDecimal(yen.multiply(rate).toString().split(\"\\\\.\")[0]);\\n            count++;\\n        }\\n        System.out.print(count);\\n    }\\n}", "target": "107", "substitutes": {"in": ["inner", "login", "again", "doc", "a", "line", "str", "bin", "rec", "init", "inc", "din", "err", "cli", "client", "io", "c", "is", "m", "scan", "r", "out", "con", "input", "data", "gen", "p", "n", "ex", "win", "f", "arin", "isin", "IN", "rin", "inn", "as", "In", "ini", "conf", "i", "pin", "exec", "x", "diff", "g", "lin", "socket", "reader", "ins"], "X": ["Time", "Q", "CL", "XM", "F", "xx", "ZX", "Xi", "XY", "XP", "UX", "PE", "EX", "Width", "YY", "XXX", "Number", "DX", "TX", "PER", "Y", "XL", "Value", "R", "FF", "C", "EL", "Z", "N", "ICE", "x", "V", "P", "RC", "XXXX", "IX", "XX", "I", "G"], "yen": ["yeng", "cyens", "yzen", "yaon", "yens", "yener", "adyen", "yened", "cyen", "yuon", "yyEN", "adyeni", "Yens", "yenn", "yaens", "cyEN", " yened", "yazen", " yeni", "yaen", "yuen", " yener", "yeni", "Yeni", "yyon", "YEN", "yyenn", "oyens", " yEN", "adyeng", "Yen", " yeng", "adyened", "oyener", "yaEN", "oyen", "yyen", "cyzen", "yuEN", "oyzen", "Yened", "yEN", "yon", " yens", "yaenn", "cyener", "yuenn", "Yeng", "yaener", "Yener"], "rate": ["speed", "frequency", "rating", "ale", "cer", "force", "grade", "rule", "delay", "type", "level", "seed", "feature", "sync", "rice", "rates", "r", "Rate", "size", "value", "factor", "data", "gain", "key", "mode", "currency", "age", "power", "percent", "rated", "radius", "code", "weight", "x", "time", "depth", "step", "ase", "scale"], "count": ["id", "base", "error", "counter", "check", "length", "len", "part", "group", "type", "c", "start", "now", "second", "Count", "current", "index", "data", "key", "number", "add", "cond", "f", "age", "cache", "cycle", "carry", "found", "test", "i", "per", "allow", "val", "code", "sum", "info", "handle", "x", "time", "loop", "total", "depth", "size", "done", "race", "b", "name"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int i=0;\\n        int num = 1;\\n        while(num <= N){\\n            i++;\\n            num*=2;\\n        }\\n        i--;\\n        System.out.println((1<<i));\\n    }\\n}\\n", "target": "225", "substitutes": {"sc": ["sw", "enc", "ch", "lc", "soc", " Sc", "cb", "Sc", " SC", "bc", "se", "SC", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "sub", "nc", "search", "cc", "sh", "sec", "sp", "acc", "src", "rc", "ca", "na", "cs", "cl", "pc", "ner", "ci", "asc", "sci"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "NL", " n", "Num", "H", "Number", "T", "NI", "Y", "NT", "NS", "n", "R", "L", "K", "O", "C", "MN", "D", "M", "U", "S", "NUM", "X", "V", "NN", "P", "Size", "I", "SIZE"], "i": ["id", "uni", "j", "ri", "pi", "nu", "in", "mi", "init", "ii", "ip", "cli", "start", "is", "gi", "index", "number", "p", "n", "f", "qi", "ki", "ui", "xi", "li", "eni", "o", "di", "ini", "chi", "si", "bi", "x", "zi", "ci", "u", "ni", "uri", "ti", "ai", "I"], "num": ["id", "uni", "loc", "nn", " ni", "nu", "mu", "unit", "in", "d", "init", "inc", "count", "Num", "m", "iter", "out", "nc", "ul", "mn", "gi", "index", "nr", "number", "n", "f", "max", "ui", "umi", "multi", "o", "di", "ini", "fn", "sum", "hi", "NUM", "nom", "x", "ci", "u", "mom", "uri", "um", "total"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner =new Scanner(System.in);\\n\t\tString line1 = scanner.nextLine();\\n\t\tString line2 = scanner.nextLine();\\n\t\tscanner.close();\\n\t\tString diff = line2.substring(0, line2.length() - 1);\\n\t\tif (line1.equals(diff)) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}\\n", "target": "137", "substitutes": {"scanner": ["canler", " scaninter", "nerer", "scaner", "Scanner", "Scaninner", "canter", " scaninner", "caninner", "Scanwriter", "caner", "scanper", "Scaner", "Scanper", "scanwriter", "nerner", "scanler", "nerinner", "Scanter", "nerler", "canper", "canner", "Scaninter", "canwriter", " scanwriter", "caninter", " scanper", "scaninner", "scanter", "scaninter", " scaner", "Scanler", " scanter"], "line1": [" line0", "LINE0", "line0", "page1", "Line3", "Line1", " lineFirst", "Line0", "LINE1", "page3", " line3", "lineFirst", "LINE2", "line3", "page2", "LINE3", "pageFirst", "LineFirst", "Line2"], "line2": ["string4", " line0", "line0", "block4", " linetwo", " lineTwo", "lineFl", "LINETwo", "LineTwo", "block2", "stringFl", "Line3", "block0", "line4", "Linetwo", "lineTwo", "Line1", "LINE1", "Line0", " line3", "string2", "linetwo", " lineFl", "LINE2", "line3", "blockFl", "lane0", "LINE3", "lane2", "lanetwo", "string0", "Line2", " line4", "lane1"], "diff": ["change", "cmp", "changes", "error", "lc", "changed", "file", "line", "comment", " differences", "dev", "err", "extra", "different", "Diff", "dist", "fail", " difference", "dir", "data", "desc", "missing", "def", "result", "iff", "test", "conf", "ref", "show", "range", "field", "log", "config", "info", "ignore", "text", "all", "message", "wrong", "update", "name"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str;\\n\t\tstr = br.readLine();\\n\t\tint w = Integer.parseInt(str);\\n\t\tstr = br.readLine();\\n\t\tint n = Integer.parseInt(str);\\n\\n\t\tint array[] = new int[w];\\n\\n\t\tfor(int i=0; i<w; i++){\\n\t\t\tarray[i] = i+1;\\n\t\t}\\n\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tstr = br.readLine();\\n\t\t\tint a = Integer.parseInt(str.substring(0, str.indexOf(\",\")));\\n\t\t\tint b = Integer.parseInt(str.substring(str.indexOf(\",\")+1, str.length()));\\n\\n\t\t\tswap(array,a-1,b-1);\\n\\n\t\t}\\n\\n\t\tfor(int i=0; i<array.length; i++){\\n\t\t\tSystem.out.println(array[i]);\\n\t\t}\\n\\n\t}\\n\\n\\n\tstatic int[] swap(int[] list,int a, int b){\\n\t\tint temp = list[a];\\n\t\tlist[a] = list[b];\\n\t\tlist[b] = temp;\\n\\n\t\treturn list;\\n\t}\\n\\n}", "target": "156", "substitutes": {"br": ["sr", "ler", "yr", "cb", "orb", "bro", "bc", "Br", "err", "bh", "ger", "bf", "ber", "BR", "box", "cr", "io", "er", "abs", "HR", "r", "iter", "gr", "tr", "mer", "img", "hr", "ur", "obj", "sp", "arr", "mr", "bar", "ctr", "bridge", "browser", "wr", "bs", "coll", "ref", "buf", "jar", "lr", "fr", "ner", "reader", "dr", "bl", "rb", "her", "res"], "str": ["sr", "id", "enc", "inner", "strip", "Str", "doc", "form", "st", "line", "in", "err", "cr", "er", "style", "c", "txt", "url", "spec", "r", "iter", "read", "STR", "war", "gr", "input", "tr", "stri", "kr", "data", "hr", "obj", "sp", "arr", "f", "star", "ser", "ctr", "result", "ocr", "string", "char", "dict", "cur", "coll", "pr", "div", "fr", "cl", "exp", "prev", "text", "sl", "ner", "status", "dr", "reader", "expr", "name"], "w": ["fw", "sw", "tw", "aw", "wx", "wire", "h", "wl", "wh", "d", "hw", "z", "v", "c", "m", "r", "y", "t", "wp", "k", "e", "ew", "p", "f", "win", "wn", "q", "max", "W", "wa", "width", "rw", "ws", "ww", "o", "ow", "we", "s", "kw", "l", "wt", "x", "u", "wall", "work"], "n": ["j", "h", "ns", "in", "d", "no", "z", "v", "c", "m", "r", "y", "network", "nc", "t", "k", "nt", "e", "p", "f", "on", "o", "s", "l", "N", "x", "u"], "array": ["instance", "object", "base", "api", "address", "error", "counter", "form", "section", "function", "vector", "database", "move", "angle", "group", "v", "arrow", "area", "pair", "element", "feature", "shape", "value", "index", "data", "archive", "number", "batch", "p", "Array", "arr", "integer", "result", "ray", "string", " arrays", "row", "repeat", "window", "multi", "stack", "image", "project", "range", "collection", "view", "record", "append", "analysis", " arr", "sample", "order"], "i": ["id", "inner", "j", "ri", "pi", "I", "mi", "init", "ip", "ii", "ori", "io", "v", "ix", "c", "abi", "start", "y", "gi", "index", "phi", "key", "e", "fi", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "yi", "chi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "ti", "uri", "ai", "vi"], "a": ["api", "ba", "ab", "oa", "fa", "ma", "art", "aaa", "aa", "sa", "d", "am", "an", "c", "area", "ac", "ia", "y", "A", "ga", "ad", "ea", "p", "alpha", "pa", "e", "f", "aj", "la", "va", "as", "ca", "o", "s", "asa", "code", "za", "da", "au", "x", "qa", "ae", "u", "ai", "sta"], "b": ["wb", "j", "ib", "h", "ab", "ba", "cb", "abb", "other", "bc", "aa", "d", "bb", "pb", "bf", "z", "v", "c", "ob", "r", "y", "db", "B", "nb", "e", "be", "p", "bar", "f", "bp", "eb", "bs", "o", "sb", "buff", "lb", "l", "bi", "fb", "x", "bd", "u", "bl", "rb"], "list": ["id", "listed", "instance", "object", "pool", "left", "lc", "base", "counter", "form", "length", "part", "table", "share", "the", "type", "pair", "lists", "match", "word", "out", "value", "like", "pack", "data", "index", "pre", "chain", "key", "batch", "p", "number", "obj", "arr", "map", "cache", "result", "string", "it", "test", "stack", "LIST", "range", "val", "code", "l", "keep", "cl", "set", "x", "block", "diff", "bl", "null", "size", "source", "entry"], "temp": ["enc", "base", "alt", "lc", "orig", "wrap", "buffer", "len", "empty", "Temp", "z", "v", "c", "extra", "fake", "now", "current", "emp", "iter", "tc", "holder", "size", "pack", "index", "data", "key", " tmp", "ex", "cache", "result", "tem", "tmp", "test", "comb", "num", "ctrl", "shared", "local", "diff", "copy", "source", "flat"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String args[]) throws IOException {\\n\\n\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\tlong n = Long.parseLong(br.readLine());\\n\tString array[] = br.readLine().split(\" \");\\n\tlong ans = 1;\\n\tfor (int i = 0; i < n; i++) {\\n\t    long a = Long.parseLong(array[i]);\\n\t    if (a == 0) {\\n\t\tans = 0;\\n\t    } else {\\n\t\tif (ans <= (long) Math.pow(10, 18) / a) {\\n\t\t    if (ans >= 0)\\n\t\t\tans *= a;\\n\t\t} else {\\n\t\t    ans = -1;\\n\t\t}\\n\t    }\\n\\n\t}\\n\tSystem.out.println(ans);\\n    }\\n}\\n", "target": "27", "substitutes": {"br": ["sr", "ler", "yr", "ab", "cb", "orb", "bro", "bc", "Br", "bb", "report", "bh", "err", "bf", "ber", "BR", "cr", "io", "er", "rb", "abs", "HR", "r", "iter", "db", "tr", "hr", "bar", "arr", "mr", "ar", "bridge", "browser", "bs", "wr", "ref", "buf", "lr", "fr", "fb", "ner", "dr", "bl", "reader", "her", "b", "res"], "n": ["j", "nn", "h", "len", "sn", "ns", "d", "no", "count", "nl", "z", "c", "m", "en", "y", "nc", "t", "ln", "nb", "nr", "k", "nt", "un", "number", "p", "f", "o", "w", "s", "rn", "N", "l", "num", "x", "nw", "nan", "u", "b"], "array": ["answer", "air", "object", "ash", "base", "error", "instance", "address", "file", "line", "section", "database", "audio", "angle", " string", "type", "alias", "arrow", "area", "response", "feature", "value", "data", "index", "channel", "number", "ring", "arr", "Array", "result", "ray", "string", "as", "image", "range", "field", "record", "analysis", "ar", "list", "name"], "ans": ["aps", "can", "anas", "aces", "anus", "ani", "ats", "oa", " fa", "leans", "anne", "lan", "sk", "ns", "ons", "aning", "AN", "aid", "aus", "atan", "ss", "nas", "ions", "amps", "an", "ras", "ams", "ars", "ia", "ana", "ases", "os", "aned", "powers", "es", "cas", "cus", "offs", "anon", "ents", " na", "ds", "ads", "forces", "ks", " spans", "ands", "aves", "anc", "ANS", "ca", "as", "na", "ians", "s", "ays", "acts", "ants", "x", "nan", "parser", "anes", "ann", "ls", "ai"], "i": ["id", "slice", "j", "ri", "pi", "ij", "I", "in", "d", "mi", "ii", "ip", "ori", "io", "v", "c", "abi", "ix", "y", "gi", "index", "uli", "e", "p", "fi", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "oi", "ie", "l", "si", "bi", "zi", "x", "ci", "u", "ni", "ti", "uri", "ai", "b"], "a": ["aw", "ba", "ab", "oa", "fa", "ma", "aa", "sa", "d", "am", "ao", "ata", "aura", "z", "an", "c", "at", "area", "ac", "ia", "r", "y", "ana", "A", "tta", "ada", "ad", "ea", "p", "alpha", "f", "pa", "aj", "ar", "la", "na", "as", "va", "ca", "o", "asa", "l", "au", "x", "af", "ae", "u", "ai", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t//String s= sc.next();\\n\t\tString buff= \"\";\\n\t\t//double n = sc.nextInt()/1000.0;\\n\t\tint m = sc.nextInt();\\n\t\t//int k = sc.nextInt();\\n\t\t//String s=sc.next();\\n\t\tint count=0,flag=0;\\n\t\tdouble count1=0,count2=0;\\n\t\tint count3=0;\\n\t\t//int[][] array1 = new int[m][k];\\n\t\t/*array[0]=n-m;\\n\t\tarray[1]=n*m;\\n\t\tarray[2]=n+m;*/\\n\t\t//Arrays.sort(array);\\n\\n\t\tfor(int j=105;j<=m;j++) {\\n\t\t\tfor(int i=1;i<=j;i+=2) {\\n\t\t\t\tif(j%i==0) {\\n\t\t\t\t\tcount3++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t//System.out.println(count3);\\n\t\t\tif(j%2!=0 && count3==8) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t\tcount3=0;\\n\t\t}\\n\\n\t\t/*if(count==0) {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}*/\\n\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n\\n\\n", "target": "85", "substitutes": {"sc": [" rc", " scanner", " Sc", " app", " ser", "Sc", " SC", " sw", "bc", "se", "SC", " scr", "ss", "cr", "c", "scan", " cat", " cont", "nc", " sp", "rc", " ans", " inst", "sb", "gram", " src", " pars", " arr"]}}
{"code": "import java.util.*;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        char[] s = sc.next().toCharArray();\\n        char[] t = sc.next().toCharArray();\\n        int unmatch = 0;\\n        int unmatch_min = 1000;\\n        int cyc_max=s.length-t.length;\\n        for (int i=0; i<=cyc_max; i++){\\n            unmatch=0;\\n            for (int j=0; j<t.length; j++){\\n                if (!(s[i+j]==t[j])) unmatch++;\\n              \tif (unmatch>=unmatch_min) break;\\n            }\\n            if (unmatch<unmatch_min) unmatch_min=unmatch;\\n        }\\n\\n        System.out.println(unmatch_min);\\n    }\\n}", "target": "158", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "com", "ss", "uc", "cr", "esc", "c", "scan", "osc", "spec", "tc", "ec", "nc", "sch", "cc", "sh", "sec", "cus", "core", "cor", "ctx", "sp", "cle", "src", "rc", "system", "sche", "ca", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "parse", "ci", "asc", "mc", "sci"], "s": ["gs", "h", "sys", "a", "ns", "js", "se", "in", "d", "ss", "ps", "sets", "v", "c", "is", "m", "r", "y", "os", "e", "p", "n", "ses", "f", "string", "o", "w", "cs", "S", "ts", "l", "si", "x", "sv", "u", "g", "services", "b", "source", "ins"], "t": ["token", "h", "st", "a", "in", "d", "the", "type", "z", "v", "ta", "c", "at", "m", "python", "r", "y", "out", "pt", "qt", "to", "T", "unt", "tt", "e", "p", "n", "f", "it", "test", "o", "target", "tree", "l", "wt", "x", "text", "u", "rt", "g", "ant", "b", "flat"], "unmatch": ["unguard", "umcatch", " unmatched", " unguard", "unalmin", "enguard", " unmap", "unalguard", " unMatch", " uncatch", "uneMatch", "enmatch", "munmember", "unamember", "unmap", "unatch", "unematched", "unamap", " unfind", "outatch", "munmap", "unalmatch", "ummatch", " unatch", "unparse", " unconnect", "enfind", "uneapply", "unmember", "unfind", "munfind", "munconnect", "unaconnect", "uneparse", " unmember", " unmin", "munmatch", "utest", "unalfind", "umMatch", " untest", "unsearch", "outmatched", "munMatch", "unconnect", "unMatch", "outMatch", "umatch", " unparse", "unamatch", " unapply", "unekey", "unetest", "unapply", "uneatch", "untest", " unsearch", "munapply", "umatched", " unkey", "enmin", "unesearch", "usearch", "unematch", "munkey", "unmatched", "uncatch", "munparse", "outmatch", "unkey", "umfind", "muncatch", "unmin"], "unmatch_min": ["unmatch_type", "unmatch_mean", "unmessage_mean", "unmatch_size", "unpatch_min", "unmessage_minimum", "unmatch_MIN", "unmatch_max", "unmatch24type", "unchange_mini", "unchange_minimum", "unmatch_minimum", "uncatch_type", "unchange_MIN", "unchange_min", "uncatch_MIN", "unmessage_max", "unmatch_key", "unpatch_key", "unmatch24MIN", "uncount_size", "uncatch_min", "uncount_min", "uncount_max", "unpatch_minimum", "unmatch_mini", "unmatch24min", "unmessage_min"], "cyc_max": ["cyc_size", "cyl_cache", "cyci_max", "cyc6size", "cyl_min", "cyc_cache", "cyci_Max", "cyc6cache", "cyc6min", "cyl_size", "cyc2conf", "cyc_Max", "cyc8max", "cyc8size", "cyc_min", "cyci_conf", "cyc2last", "cyc_last", "cyc6max", "cyl_max", "cyc8cache", "cyc2Max", "cyc8min", "cyci_last", "cyc_conf", "cyc2max"], "i": ["id", "api", "ri", "ami", "pi", "in", "d", "ii", "ip", "z", "v", "ix", "c", "io", "is", "y", "gi", "index", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "eni", "b", "di", "ini", "ie", "oi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ni", "uri", "ai", "I", "vi"], "j": ["ch", "h", "ja", "J", "length", "js", "ij", "job", "d", "jj", "bj", "ii", "ind", "z", "v", "je", "c", "m", "is", "y", "jl", "index", "k", "key", "e", "dj", "p", "n", "obj", "f", "ji", "aj", "li", "o", "ie", "el", "l", "si", "uj", "bi", "x", "jo", "oj", "u", " dj", "jp", "g", "b"]}}
{"code": "\\nimport java.util.Scanner;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n    \\n    public static void main(String[] args) {\\n        \\n        Scanner entrada=new Scanner(System.in);\\n        \\n      \\n        int x[]=new int[3];\\n        int x2[]=new int[3];\\n        for (int i = 0; i < 3; i++) {\\n            x[i]=entrada.nextInt();\\n        }\\n        \\n        for (int i = 0; i < 2; i++) {\\n            x2[i]=x[i]+x[i+1];\\n        }\\n        x2[2]=x[0]+x[2];\\n        Arrays.sort(x2);\\n        System.out.println(x2[0]);\\n    }\\n    \\n}", "target": "89", "substitutes": {"entrada": ["entrasha", "EntrADA", "entreasha", "entraya", "entirba", "entadrasha", "Entradas", "incriasha", "EntcADA", "entreaya", "entcada", "entrba", "entiradas", "Entcba", "Entcada", "entreadas", "entcADA", "entsradas", "incriaya", "entcba", "entreada", "Entrba", "entirada", "incrada", "entriasha", "entsrba", "entcadas", "incriada", "entadrada", "incraya", "incrasha", "incriadas", "entadradas", "entsrADA", "entradas", "entriada", "entriaya", "Entcadas", "incradas", "entirADA", "entsrada", "entriadas", "entrADA", "Entrada", "entadraya"], "x": ["id", "xxxx", "php", "one", "wx", "h", "right", "xx", "rx", "d", "cross", "array", "xt", "pe", "xxx", "z", "v", "ix", "c", "pair", "plus", "y", "tx", "search", "xs", "xf", "point", "t", "event", "value", "data", "index", "key", "e", "ex", "p", "bit", "f", "q", "max", "xp", "width", "list", "test", "full", "w", "ax", "code", "sex", "X", "time", "patch", "u", "xa", "size", "xes", "python", "work"], "x2": ["tx2", "tx3", "X0", "sex2", " xtwo", " x3", "sex3", "X4", "xtwo", "txTwo", "X3", " x02", "xTwo", " xTwo", "x0", " x0", "ex4", "txtwo", "X1", "ax3", "ex25", "x1", "x25", " x25", "X2", "ex0", "x4", "ex02", "x02", "X02", "ex2", "x3", "tx4", "ex3", "sex1", " x4", "tx1", "ax2", " x1", "XTwo", "ex1", "sex25", "axtwo"], "i": ["id", "slice", "j", "ri", "a", "pi", "mu", "in", "mi", "init", "ii", "ip", "z", "v", "io", "c", "abi", "start", "ori", "r", "y", "gi", "index", "data", "phi", "key", "e", "p", "n", "fi", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "zi", "ci", "u", "ti", "uri", "ni", "ai", "mini", "I", "vi"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\n\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tFastScanner fs = new FastScanner();\\n\t\tString s = fs.next();\\n\t\tif(s.equals(\"AAA\") || s.equals(\"BBB\") || s.equals(\"CCC\")) {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}\\n\t}\\n\\n}\\n\\nclass FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        }else{\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\\n    public boolean hasNext() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\\n    public String next() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while(isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n    public long nextLong() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while(true){\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            }else if(b == -1 || !isPrintableChar(b)){\\n                return minus ? -n : n;\\n            }else{\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n    public int nextInt() {\\n        long nl = nextLong();\\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\\n        return (int) nl;\\n    }\\n    public double nextDouble() { return Double.parseDouble(next());}\\n}", "target": "76", "substitutes": {}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        new Main().solve();\\n    }\\n\\n    void solve() {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int X = sc.nextInt();\\n        int sum = 0;\\n        int[] m = new int[N];\\n        for (int i = 0; i < N; i++) {\\n            m[i] = sc.nextInt();\\n            sum += m[i];\\n        }\\n        Arrays.sort(m);\\n        X = X - sum;\\n        System.out.println(N + X / m[0]);\\n    }\\n}\\n", "target": "3", "substitutes": {"sc": ["sw", "slice", "ch", "lc", "loc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sa", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "nc", "sch", "cc", "cor", "cus", "ctx", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "pc", "ner", "ci", "asc", "cv", "sci"], "N": ["Q", "Ne", "Ni", "J", "Ns", "F", "E", "NL", "No", "Part", "Network", "Max", "NB", "Num", "Index", "Count", "Node", "Number", "A", "T", "NI", "Y", "NT", "Na", "NS", "n", "R", "L", "K", "Len", "C", "O", "NA", "D", "M", "U", "Z", "S", "V", "NN", "P", "Size", "I"], "X": ["Q", "J", "F", "Scale", "Sum", "Max", "XP", "Width", "Num", "Index", "H", "XXX", "A", "MAX", "Number", "Length", "Y", "XL", "n", "R", "L", "K", "W", "O", "C", "D", "M", "U", "Z", "S", "Cross", "NUM", "x", "V", "P", "ID", "Average", "Size", "IX", "XX", "I", "SIZE"], "sum": ["rank", "scale", "mu", "offset", "part", "cum", "in", "Sum", "summary", "count", "spread", "Num", "sim", "miss", "norm", "match", "sub", "shift", "mass", "out", "min", "mean", "index", "p", "n", "alpha", "f", "missing", "max", "average", "M", "s", "sort", "U", "S", "num", "si", "weight", "sam", "x", "mask", "diff", "u", "all", "cost", "size", "um", "I", "total"], "m": ["man", "h", "a", "mu", "dm", "fm", "mi", "am", "d", "om", "md", "sm", "v", "im", "c", "an", "mass", "y", "mn", "dim", "e", "gm", "p", "n", "wm", "mr", "machine", "pm", "me", "mm", "hm", "module", "cm", "o", "b", "M", "s", "bm", "l", "vm", "x", "rm", "u", "g", "mini", "mo", "meta", "ms", "um", "mc", "mut"], "i": ["id", "slice", "j", "ri", "h", "pi", "mu", "in", "d", "init", "ip", "ii", "z", "v", "abi", "c", "ix", "r", "y", "gi", "index", "uli", "e", "p", "n", "f", "qi", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "oi", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "I"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner hoge = new Scanner(System.in);\\n\t\tint d = hoge.nextInt();\\n\t\tSystem.out.println(d*d*d);\\n\t\t\\n\t\\n\t}\\n\\n\\n}", "target": "36", "substitutes": {"hoge": [" hoine", "loine", "woge", "Hoite", "house", "hose", "Hose", "HOge", "woze", "hoce", "HOite", " hoce", " hoite", " house", "loce", "loze", "loge", "Hoge", "House", "HOuse", "hoine", "HOse", "hoite", " hose", "hoze", " hoze", "woce", "woine"], "d": ["id", "j", "nd", "a", "dm", "cd", "dd", "dp", "md", "fd", " dd", "c", "m", "ld", "dom", "t", "depth", "dir", "data", "dl", "dt", "ds", "k", "dim", "e", "p", "n", "dn", "f", " D", "did", "dc", "dat", "duration", "gd", "dict", "sd", "D", "i", "l", "dx", "da", "dh", "diff", "u", "dose", "dy", "b", "pd"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.HashMap;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tint n = Integer.parseInt(br.readLine());\\n\\n\t\tString str[] = br.readLine().split(\" \");\\n\\n\t\tint value[] = new int[n];\\n\\n\t\tfor (int i = 0; i < n - 1; i++) {\\n\t\t\tint a = Integer.parseInt(str[i]);\\n\\n\t\t\tvalue[a - 1]++;\\n\t\t}\\n\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tSystem.out.println(value[i]);\\n\t\t}\\n\t}\\n}", "target": "12", "substitutes": {"br": ["sr", "ler", "yr", "ab", "cb", "orb", "bro", "bc", "Br", "bb", "report", "bh", "err", "bf", "ber", "BR", "cr", "io", "er", "rb", "HR", "r", "iter", "tr", "hr", "bar", "arr", "mr", "bridge", "browser", "bs", "ra", "sb", "jar", "buf", "ref", "fr", "keeper", "fb", "ner", "her", "dr", "bl", "stream", "reader", "buffer", "b"], "n": ["j", "nn", "h", "sn", "ns", "in", "d", "no", "count", "nl", "z", "v", "c", "m", "r", "y", "en", "network", "nc", "t", "ln", "non", "nb", "k", "nt", "e", "number", "p", "ne", "f", "dn", "net", "inn", "o", "w", "s", "N", "num", "l", "x", "nw", "ni", "u", "size", "b", "name"], "str": ["id", "sr", "enc", "strip", "Str", "st", "line", "expr", "cr", "c", "r", "iter", "STR", "input", "tr", "sec", "strings", "stri", "data", "p", "sp", "f", "arr", "string", "char", "dec", "pass", "pr", "s", "div", "fr", "text", "status", "ner", "dr", "list", "b", "name"], "value": ["id", "one", "object", "format", "values", "model", "section", "line", "length", "vector", "part", "unit", "dollar", "VALUE", "array", "count", "type", "v", "content", "area", "response", "name", "position", "element", "size", "data", "index", "key", "Value", "number", "p", "result", "string", "image", "range", "variable", "val", "version", "code", "num", "info", "message", "sequence", "list", "b", "entry"], "i": ["id", "slice", "inner", "j", "api", "ri", "pi", "I", "d", "mi", "init", "ip", "ii", "z", "io", "ix", "c", "v", "m", "y", "gi", "index", "phi", "e", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "yi", "chi", "ei", "l", "si", "bi", "info", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "b"], "a": ["ba", "ab", "oa", "issa", "ma", "aaa", "aa", "sa", "ata", "am", "ha", "an", "area", "ac", "ana", "A", "tta", "ga", "data", "ea", "ava", "pa", "alpha", "p", "aj", "span", "la", "active", "next", "na", "va", "ca", "sup", "da", "au", "qa", "all", "ai", "b", "sta"]}}
{"code": "import java.awt.Point;\\nimport java.util.ArrayDeque;\\nimport java.util.Scanner;\\nimport java.util.*;\\nimport java.util.Arrays;\\nimport java.util.ArrayList;\\nimport java.util.Set;\\nimport java.util.HashSet;\\nimport java.util.Collection;\\n\\n\\n \\npublic class Main{\\n\t\\n        static final Scanner sc=new Scanner(System.in);\\n        \\n        \\n        \\n        \\n        \\n        \\n        public static void main(String[]args){\\n                int N=sc.nextInt();\\n                if(N>=195){\\n                        System.out.println(5);\\n                }else if(N>=189){\\n                        System.out.println(4);\\n                }\\n                else if(N>=165){\\n                        System.out.println(3);\\n                }\\n                else if(N>=135){\\n                        System.out.println(2);\\n                }else if(N>=105){\\n                        System.out.println(1);\\n                }else{\\n                        System.out.println(0);\\n                }\\n                \\n                \\n\\n\\n                \\n        }\\n        \\n        \\n        \\n\\n\t\t\\n\t\\n}\\n", "target": "85", "substitutes": {"sc": ["sr", "enc", "lc", "soc", "cer", "Sc", " SC", " sw", "bc", "sf", "SC", "scope", " scr", "server", "esc", "c", "scan", "osc", "sync", "r", "spec", "out", "sub", "ec", "sch", " sp", "cc", "sh", "sec", "desc", "sp", "src", "acc", "rc", "system", "anc", "sb", "s", "cs", "si", "cl", "pc", "exec", "ner", "ci", "screen", "sci"], "N": ["Q", "NG", "Ni", "Ne", "Ns", "F", "NO", "E", "NM", "ON", "NL", "No", " n", "NB", "Num", "Name", "Node", "Number", "T", "B", "NI", "NE", "Y", "NT", "NS", "n", "R", "L", "NY", "K", "NR", "Len", "C", "O", "NC", "MN", "D", "SN", "CN", "M", "NA", "KN", "NP", "S", "Z", "X", "V", "NN", "P", "Size", "GN", "I"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tString word[] = new String[N]; \\n\t\t\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tword[i] = sc.next();\\n\t\t}\\n\t\t\\n\t\tboolean isRule = true;\\n\t\tfor(int i = 1; i < N; i++) {\\n\t\t\tif(word[i-1].charAt(word[i-1].length()-1) == word[i].charAt(0)) {\\n\t\t\t\tisRule = true;\\n\t\t\t}else {\\n\t\t\t\tisRule = false;\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tfor(int j = i+1; j < N; j++){\\n\t\t\t\tif(word[i].equals(word[j])) {\\n\t\t\t\t\tisRule = false;\\n\t\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tif(isRule == true) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}\\n\t\t\\n\t}\\n}\\n", "target": "70", "substitutes": {"sc": ["sw", "sr", "ch", " Sc", "cer", "st", "Sc", " SC", "bc", "se", "SC", "sf", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sh", "cor", "sec", "sp", "src", "rc", "system", "anc", "sche", "cs", "cl", "pc", "ner", "sl", "ci", "asc", "cv", "sci"], "N": ["Q", "Ne", "Ni", "J", "NO", "F", "Ns", "E", "NL", "No", "Part", " n", "NB", "Num", "H", "network", "Number", "T", "CNN", "B", "NE", "Y", "NT", "Na", "NS", "n", "R", "L", "K", "W", "Len", "C", "O", "NA", "D", "M", "U", "Z", "S", "X", "V", "NN", "P", "Size", "I", "G"], "word": ["token", "can", "one", "strip", "man", "layer", "sword", "language", "line", "comment", "str", "part", "move", "term", "rule", "array", "arg", "character", "v", "prefix", "ward", "password", "feature", "match", "point", "tag", "eng", "card", "value", "index", "key", "wd", "number", "ring", "win", "wave", "bug", "result", "W", "char", "string", "row", "widget", "filter", "column", "w", "gram", "range", "code", "weight", "words", "text", "Word", "x", "block", "letter", "message", "list", "rank", "writer", "name", "work"], "i": ["id", "api", "ri", "h", "ami", "pi", "in", "mi", "init", "d", "ip", "ii", "ind", "cli", "ori", "io", "ix", "v", "is", "start", "y", "gi", "index", "phi", "e", "p", "n", "f", "qi", "ji", "ki", "ui", "xi", "li", "iu", "it", "o", "b", "di", "ini", "eni", "ie", "oi", "yi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "fi", "ai", "ti", "I", "vi"], "j": ["h", "ja", "J", "js", "ij", "jj", "ii", "ind", "z", "v", "ori", "je", "y", "jc", "jl", "k", "key", "dj", "p", "n", "qi", "f", "ji", "aj", "end", "q", "ui", "br", "xi", "li", "next", "it", "o", "di", "ie", "el", "fr", "l", "uj", "si", "x", "jo", "u", "ni", "jp", "b", "vi"], "isRule": [" isThis", " isule", " isRole", "intrule", "isTest", "isThis", "ifFine", " isrule", "isMatch", "arBreak", "bisrule", "intMatch", "isParent", "issRule", "issRole", " isBreak", "partRule", "intRule", "partule", "isBreak", " isMatch", "isule", "arThis", "arRule", "partFunction", "isFunction", "hasMatch", "asRule", "asError", "isError", "issThis", "ISFine", " isFine", "hasrule", "bisRule", "isRole", " isTest", "issrule", "isrule", "hasRule", " isError", "asrule", "ifParent", "isFine", " isFunction", "issFunction", "intTest", "ifRule", "ISError", "bisFine", "issule", "hasTest", "ifError", "asFine", "bisError", " isParent", "ISRule", "ISParent", "issBreak", "partrule", "arRole"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\n\\npublic class Main {\\n  public static void main(String[] args) throws IOException {\\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n    String str = in.readLine();\\n    int n = Integer.parseInt(str);\\n    int sn = 0;\\n    for(int i = 0; i < str.length(); i++) {\\n      sn += Integer.parseInt(str.substring(i,i+1));\\n    }\\n    System.out.println(n%sn==0?\"Yes\":\"No\");\\n  }\\n}", "target": "195", "substitutes": {"in": ["inner", "login", "again", "doc", "gin", "a", "line", "bin", "or", "part", "rec", "init", "din", "err", "inc", "cli", "er", "io", "c", "is", "m", "url", "ac", "r", "this", "out", "read", "input", "min", "fe", "serv", "data", "with", "ex", "f", "IN", "inn", "as", "connection", "In", "ini", "s", "readable", "fr", "l", "log", "kin", "exec", "stream", "reader", "b", "source", "ins"], "str": ["sr", "id", "enc", "inner", "format", "strip", "Str", "form", "st", "line", "rs", "err", "cr", "er", "txt", "url", "r", "iter", "out", "STR", "gr", "input", "tr", "stri", "data", "hr", "p", "sp", "f", "arr", "prev", "ctr", "br", "string", "char", "dec", "wr", "cur", "pass", "pr", "s", "div", "fr", "exp", "text", "sl", "ner", "dr", "raw", "inst", "name"], "n": ["j", "nn", "ns", "nu", "no", "nl", "z", "an", "c", "nit", "nc", "t", "ln", "mn", "Sn", "nr", "nb", "nt", "cn", "ne", "number", "p", "pos", "un", "dn", "pn", "o", "fn", "N", "num", "l", "x", "ni", "u", "size", "name", "gn"], "sn": ["sc", "nn", "st", "len", "sk", "ns", "nu", "no", "ii", "count", "nl", "kn", "ny", "sett", "os", "ln", "Sn", "nb", "nr", "nt", "cn", "oss", "number", "p", "pos", "dn", "sp", "span", "inn", "na", "sd", "SN", "sb", "si", "num", "ll", "zi", "sl", "ni", "size", "sv", "gn"], "i": ["id", "j", "api", "ri", "h", "length", "pi", "I", "d", "ii", "ip", "z", "v", "ix", "c", "start", "t", "gi", "index", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "chi", "l", "si", "bi", "hi", "info", "zi", "x", "ci", "ni", "u", "uri", "fi", "ai", "ti"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc=new Scanner(System.in);\\n        int i,j,k,l,n,x,count=0;\\n        for(i=0;;i++){\\n            n=sc.nextInt();\\n            x=sc.nextInt();\\n            if((n==0)&&(x==0)){\\n                break;\\n            }else{\\n                for(j=1;j<=n-2;j++){\\n                    for(k=j+1;k<=n-1;k++){\\n                        for(l=k+1;l<=n;l++){\\n                            if(j+k+l==x){\\n                                count += 1;\\n                            }\\n                        }\\n                    }\\n                }\\n                System.out.println(count);\\n                count=0;\\n            } \\n        }\\n    }\\n}\\n", "target": "116", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "soc", " Sc", "loc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "cli", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "ctx", "sp", "src", "rc", "anc", "sche", "ca", "cur", "cs", "cl", "pc", "ner", "ci", "asc", "g", "cv", "sci"], "i": ["id", "pi", "in", "d", "ii", "ind", "z", "v", "ori", "c", "start", "m", "is", "io", "r", "y", "jit", "index", "key", "e", "p", "f", "qi", "ji", "ik", "ui", "xi", "li", "iu", "o", "b", "ie", "oi", "chi", "si", "bi", "ci", "u", "ni", "ai", "I"], "j": ["ch", "vol", "jet", "h", "ja", "J", "js", "ij", "job", "jan", "d", "jj", "ind", "jam", "z", "v", "c", "je", "m", "jen", "r", "y", "ok", "t", "jl", "jc", "key", "e", "jon", "p", "dj", "f", "ji", "aj", "q", "li", "o", "w", "ie", "uj", "jo", "u", "g", "jp", "b"], "k": ["id", "ch", "sk", "kl", "ek", "d", "dk", "ko", "kn", "z", "v", "c", "m", "ok", "y", "r", "ck", "uk", "kr", "ak", "e", "key", "p", "f", "ks", "K", "ki", "ik", "q", "ky", "o", "km", "w", "kid", "kw", "kk", "kin", "mk", "ke", "kg", "u", "b"], "l": ["lc", "loc", "lp", "lu", "lf", "h", "kl", "d", "ls", "nl", "z", "v", "c", "m", "y", "ol", "ln", "ul", "il", "lv", "e", "p", "L", "f", "li", "o", "s", "lb", "el", "pl", "sl", "u", "g", "lin", "ell", "ll", "fl", "b"], "n": ["nn", "len", "sn", "ns", "nu", "d", "no", "z", "ny", "c", "v", "m", "an", "r", "y", "en", "network", "t", "ln", "byn", "nb", "nt", "cn", "ne", "number", "p", "un", "f", "dn", "net", "e", "pn", "na", "o", "w", "s", "N", "num", "nan", "ni", "u", "size", "b"], "x": ["id", "wx", "h", "xx", "rx", "d", "xy", "xt", "xxx", "z", "v", "ix", "c", "m", "r", "y", "xs", "t", "index", "e", "p", "ex", "f", "xc", "q", "xi", "xp", "na", "o", "w", "s", "ax", "el", "dx", "X", "u", "xa", "b"], "count": ["id", "ch", "base", "left", "counter", "check", "length", "len", "part", "ind", "limit", "process", "child", "z", "call", "c", "start", "now", "Count", "y", "core", "index", "key", "number", "cache", "max", "carry", "found", "test", "low", "coll", "cur", "col", "code", "keep", "sum", "num", "log", "weight", "diff", "depth", "size", "list", "total", "name", "work"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args)throws IOException {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\twhile(true){\\n\t\t\t\\n\t\t\tint a = sc.nextInt();\\n\t\t\tString op = sc.next();\\n\t\t\tchar o = op.charAt(0);\\n\t\t\tint b = sc.nextInt();\\n\\n\t\tif(o == '?'){\\n\t\t\tbreak;\\n\t\t}\\n\t\telse if(o == '-'){\\n\t\t\tSystem.out.println(a - b);\\n\t\t}\\n\t\telse if(o == '*'){\\n\t\t\tSystem.out.println(a * b);\\n\t\t}\\n\t\telse if(o == '/'){\\n\t\t\tSystem.out.println(a / b);\\n\t\t}\\n\t\telse if(o == '+'){\\n\t\t\tSystem.out.println(a + b);\\n\t\t}\\n\t\t\\n\t\t}sc.close();\\n\t}\\n}", "target": "139", "substitutes": {"sc": ["sw", "cont", "sr", "ch", "lc", "soc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "com", "ss", "cli", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "nc", "sch", "cc", "sh", "sec", "cus", "cor", "ctx", "sp", "ser", "src", "rc", "system", "sche", "ca", "cur", "coll", "sb", "cms", "cs", "cl", "pc", "ner", "asc", "sci"], "a": ["base", "access", "ba", "oa", "fa", "ma", "aaa", "aa", "sa", "aux", "an", "area", "c", "ac", "y", "ana", "sta", "A", "ga", "ada", "ea", "pa", "p", "alpha", "e", "n", "home", "aj", "sha", "span", "la", "active", "ca", "as", "va", "na", "i", "ama", "za", "da", "x", "qa", "af", "ae", "u", "xa", "aka", "auto", "action"], "op": ["cop", "pp", "opus", "opt", "app", "loc", "orb", "po", "line", "bo", "oct", "ip", "oper", "ko", "opp", "type", "io", "c", "ob", "OP", "ok", "operation", "out", "oo", "Op", "k", "cat", "p", "n", "sp", "obj", "f", "hop", "q", "num", "oc", "ops", "u", "orp", "auto"], "o": ["object", "fo", "oa", "po", "line", "so", "ro", "no", "bo", "oct", "obo", "ko", "type", "io", "c", "ob", "m", "r", "ok", "out", "os", "iso", "olo", "t", "oo", "k", "e", "p", "n", "pos", "f", "obj", "vo", "off", "ando", "O", "oid", "s", "i", "oi", "l", "go", "lo", "auto", "u", "g", "mo", "elo"], "b": ["wb", "j", "base", "ib", "h", "ab", "cb", "abb", "d", "bf", "z", "v", "gb", "c", "ob", "r", "y", "B", "nb", "k", "e", "be", "p", "n", "f", "eb", "bot", "bs", "w", "s", "sb", "i", "lb", "l", "bi", "fb", "x", "bd", "g", "u", "rb"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint mod = 1_000_000_007;\\n\t\tint N = sc.nextInt();\\n\t\tint M = sc.nextInt();\\n\t\tint[] a = new int[M];\\n\t\tint[] flag = new int[2];\\n\t\tHashSet<Integer> set = new HashSet<Integer>();\\n\t\tfor (int i=0;i<M;i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t\tset.add(a[i]);\\n\t\t\tif (a[i]==1) {\\n\t\t\t\tflag[0]=1;\\n\t\t\t} else if(a[i]==2) {\\n\t\t\t\tflag[1]=1;\\n\t\t\t}\\n\t\t}\\n\t\tif (N==1) {\\n\t\t\tSystem.out.println(1);\\n\t\t} else {\\n\t\t\tint[] ans = new int[N+1];\\n\t\t\tif (flag[0]==0) {\\n\t\t\t\tans[1]=1;\\n\t\t\t}\\n\t\t\tif (flag[1]==0) {\\n\t\t\t\tans[2]=1;\\n\t\t\t}\\n\t\t\tfor (int i=0;i<N;i++) {\\n\t\t\t\tif (i!=N-1) {\\n\t\t\t\t\tif (!set.contains(i+2)) {\\n\t\t\t\t\t\tans[i+2]=(ans[i+2]+ans[i])%mod;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\tif (!set.contains(i+1)) {\\n\t\t\t\t\tans[i+1]=(ans[i+1]+ans[i])%mod;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(ans[N]);\\n\t\t}\\n\t}\\n}", "target": "174", "substitutes": {"sc": ["sw", "sr", "enc", "ch", "lc", " Sc", "st", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "sub", "ck", "nc", "sch", "cc", "sh", "core", "sp", "ser", "cle", "rc", "system", "anc", "sche", "cur", "sb", "cs", "cl", "pc", "ner", "asc", "screen", "sci"], "mod": ["change", "j", "mix", "man", "base", "J", "form", "length", "bin", "cum", "part", "dev", "d", "modified", "rem", "oct", "Max", "Num", "m", "norm", "r", "tr", "min", "mn", "mag", "k", "reg", "pos", "ver", "mode", "lock", "max", " Mod", "fun", " MOD", "od", "row", "Len", "module", "mult", "grad", "cm", "D", "comp", "MOD", "perm", "div", "num", "log", "dig", "lex", "ID", "MS", "Mod", "P", "ms", "rot", "step", "mut"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "E", "NM", "NL", "No", "Part", "Num", "H", "A", "Node", "Number", "T", "B", "NE", "Y", "NT", "NS", "n", "R", "L", "K", "W", "Len", "C", "O", "MN", "D", "CN", "U", "S", "Z", "X", "V", "NN", "P", "Size", "I", "G"], "M": ["Mo", "MC", "Q", "DM", "J", "F", "SIZE", "E", "NM", "m", "OM", "H", "LM", "A", "T", "B", "Y", "R", "n", "L", "CM", "K", "W", "C", "O", "MU", "MN", "D", "U", "S", "ME", "X", "V", "P", "MS", "MD", "I", "G"], "a": ["id", "access", "address", "ba", "ab", "oa", "ma", "ai", "aaa", "aa", "sa", "ata", "am", "array", "aura", "an", "area", "at", "ac", "ia", "ana", "y", "A", "tta", "ga", "data", "ad", "ea", "p", "n", "alpha", "pa", "aj", "la", "ca", "as", "ap", "va", "na", "act", "ama", "asa", "da", "au", "ae", "af", "auto", "u", "action", "ar", "b", "sta"], "flag": ["id", "lag", "error", "len", "part", "offset", "sa", "d", "no", "err", "force", "ind", "group", "count", "type", "arg", "v", "style", "an", "at", "scan", "agn", "sync", "feature", "tag", "band", "big", "support", "key", "cat", "plan", "p", "bit", "add", "f", "flags", "age", "ad", "bug", "q", "ar", "Flag", "char", "skip", "pad", "field", "version", "code", "l", "log", "info", "mask", "af", "ant", "ann", "sign", "ag", "op", "b", "state"], "set": ["are", "id", "can", "man", "SET", "vert", "check", "se", "ut", "init", "no", "group", "et", "type", "mark", "graph", "start", "is", "an", "not", "sync", "en", "out", "size", "seen", "sh", "pack", "core", "san", "add", "map", "net", "cache", "end", "sche", "sort", "use", "up", "act", "space", "store", "sum", "keep", "parse", "ner", "sign", "list", "op", "get"], "i": ["uni", "ij", "in", "mi", "iv", "m", "r", "gi", "qi", "ali", "chi", "ei", "x", "zi", "ci", "uri", "fi", "mini", "d", "ii", "cli", "z", "io", "is", "index", "e", "f", "xi", "li", "multi", "eni", "isi", "hi", "u", "ti", "ami", "pi", "mu", "ix", "abi", "c", "y", "uli", "p", "n", "anti", "ui", "iu", "oi", "bi", "ni", "ai", "I", "id", "j", "api", "ri", "ip", "ori", "v", "ji", "it", "o", "di", "ini", "yi", "ie", "l", "si", "info", "b"], "ans": ["can", "lines", "anas", "man", "ani", "rules", "outs", "An", "ats", "yrs", "cons", "lan", "ons", "ns", "sk", "AN", "aning", "options", "no", "cross", "atan", "nas", "ions", "amps", "vers", "an", "ras", "is", "ars", "ams", "ana", "A", "os", "aned", "antes", "cas", "anch", "cus", "support", "anon", "ents", "ds", "plan", "san", "p", "n", "flags", "ids", "ks", "ands", "anc", "ANS", "na", "as", "pass", "s", "anned", "ays", "cats", "cs", "sex", "ants", "vs", "types", "x", "nan", "ann", "ant", "ls", "ins"]}}
{"code": "// Working program with FastReader \\nimport java.io.*; \\n\\nimport java.util.*; \\n \\n\\npublic class Main \\n{ \\n\tstatic class FastReader \\n\t{ \\n\t\tBufferedReader br; \\n\t\tStringTokenizer st; \\n\\n\t\tpublic FastReader() \\n\t\t{ \\n\t\t\tbr = new BufferedReader(new\\n\t\t\t\t\tInputStreamReader(System.in)); \\n\t\t} \\n\\n\t\tString next() \\n\t\t{ \\n\t\t\twhile (st == null || !st.hasMoreElements()) \\n\t\t\t{ \\n\t\t\t\ttry\\n\t\t\t\t{ \\n\t\t\t\t\tst = new StringTokenizer(br.readLine()); \\n\t\t\t\t} \\n\t\t\t\tcatch (IOException e) \\n\t\t\t\t{ \\n\t\t\t\t\te.printStackTrace(); \\n\t\t\t\t} \\n\t\t\t} \\n\t\t\treturn st.nextToken(); \\n\t\t} \\n\\n\t\tint nextInt() \\n\t\t{ \\n\t\t\treturn Integer.parseInt(next()); \\n\t\t} \\n\\n\t\tlong nextLong() \\n\t\t{ \\n\t\t\treturn Long.parseLong(next()); \\n\t\t} \\n\\n\t\tdouble nextDouble() \\n\t\t{ \\n\t\t\treturn Double.parseDouble(next()); \\n\t\t} \\n\\n\t\tString nextLine() \\n\t\t{ \\n\t\t\tString str = \"\"; \\n\t\t\ttry\\n\t\t\t{ \\n\t\t\t\tstr = br.readLine(); \\n\t\t\t} \\n\t\t\tcatch (IOException e) \\n\t\t\t{ \\n\t\t\t\te.printStackTrace(); \\n\t\t\t} \\n\t\t\treturn str; \\n\t\t} \\n\t} \\n\\n\tpublic static void main(String[] args) \\n\t{ \\n\t\tFastReader sc=new FastReader(); \\n\t\tint d = sc.nextInt(); \\n\t\tint t= sc.nextInt();\\n\t\tint s=sc.nextInt();\\n\t\tlong dist=t*s;\\n\t\tif(dist>=d)\\n\t\tSystem.out.println(\"Yes\");\\n\t\telse\\n\t\tSystem.out.println(\"No\");\\n\t} \\n} \\n", "target": "246", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint X = sc.nextInt();\\n\t\tint temp;\\n\t\tint ans = 1;\\n\t\tfor (int i = 2; i * i <= X; i++) {\\n\t\t\ttemp = i;\\n\t\t\twhile (temp * i <= X) {\\n\t\t\t\ttemp *= i;\\n\t\t\t}\\n\t\t\tif (temp > ans) {\\n\t\t\t\tans = temp;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "143", "substitutes": {"sc": ["ch", "app", " Sc", "cb", "cer", "st", "str", "Sc", " SC", "bc", "se", "SC", "sf", "sem", " scr", "ss", "uc", "io", "esc", "c", "scan", "sq", "search", "ec", "nc", "sub", "sch", "cc", "sh", "sec", "sp", "ser", "src", "acc", "rc", "ca", "na", "cs", "pc", "exec", "ner", "ci", "sci"], "X": ["Q", "CL", "F", "length", "PI", "ix", "XP", "PE", "EX", "Width", "Index", "H", "XXX", "WH", "MAX", "T", "TX", "Y", "Length", "XL", "L", "FF", "K", "C", "M", "U", "Z", "S", "N", "IP", "x", "V", "P", "ID", "Size", "IX", "XX", "I"], "temp": ["cu", "app", "form", "start", "extra", "gi", "nice", "result", "tem", "x", "ci", "mini", "adapt", "vi", "pure", "ii", "type", "style", "now", "seed", "current", "tc", "input", "ski", "index", "pre", "key", "e", "f", "tmp", "full", "cp", "flat", "small", "length", "pi", "offset", "Temp", "init", "ix", "level", "c", "fake", "emp", "iter", "const", "p", "partial", "cm", "test", "ctrl", "get", "id", "slice", "api", "atom", "err", "ace", "prefix", "clean", "shape", "edit", "cel", "div", "parent", "si", "size", "zip"], "ans": [" scans", "can", "aces", "ips", "features", "outs", "ats", "cons", "lan", "sk", "ns", "ens", "AN", "ons", "aus", "ions", "nas", "amps", "an", "scan", "ras", "ars", "parts", "ana", "xs", "aned", "acs", "cas", "offs", "anon", "except", "ents", "plan", "ks", " spans", "span", "anc", "ANS", "na", "as", "ians", "s", "anned", "acts", "cases", "cs", "ends", "works", "ants", "eps", "types", "x", "anes", "nan", "ops", "ann", "ls", "annot", "XX", "ins"], "i": ["id", "slice", "j", "a", "pi", "in", "mi", "init", "ip", "ii", "z", "v", "io", "ix", "is", "m", "start", "iter", "y", "t", "gi", "index", "key", "e", "p", "n", "f", "qi", "ik", "ui", "xi", "li", "ic", "it", "multi", "di", "ini", "ie", "oi", "l", "si", "info", "x", "zi", "ci", "diff", "u", "ti", "uri", "fi", "ai", "mini", "I", "vi"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.InputMismatchException;\\nimport java.util.Map;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tstatic PrintWriter out;\\n\tstatic InputReader ir;\\n\\n\tstatic void solve() {\\n\t\tint n = ir.nextInt();\\n\t\tHashMap<String, Long> map = new HashMap<>();\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tchar[] s = ir.next().toCharArray();\\n\t\t\tArrays.sort(s);\\n\t\t\tString t = String.valueOf(s);\\n\t\t\tif (!map.containsKey(t)) {\\n\t\t\t\tmap.put(t, 1L);\\n\t\t\t} else {\\n\t\t\t\tmap.put(t, map.get(t) + 1);\\n\t\t\t}\\n\t\t}\\n\t\tlong res = 0;\\n\t\tfor (Map.Entry<String, Long> e : map.entrySet()) {\\n\t\t\tres += e.getValue() * (e.getValue() - 1) / 2;\\n\t\t}\\n\t\tout.println(res);\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tir = new InputReader(System.in);\\n\t\tout = new PrintWriter(System.out);\\n\t\tsolve();\\n\t\tout.flush();\\n\t}\\n\\n\tstatic class InputReader {\\n\\n\t\tprivate InputStream in;\\n\t\tprivate byte[] buffer = new byte[1024];\\n\t\tprivate int curbuf;\\n\t\tprivate int lenbuf;\\n\\n\t\tpublic InputReader(InputStream in) {\\n\t\t\tthis.in = in;\\n\t\t\tthis.curbuf = this.lenbuf = 0;\\n\t\t}\\n\\n\t\tpublic boolean hasNextByte() {\\n\t\t\tif (curbuf >= lenbuf) {\\n\t\t\t\tcurbuf = 0;\\n\t\t\t\ttry {\\n\t\t\t\t\tlenbuf = in.read(buffer);\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\t}\\n\t\t\t\tif (lenbuf <= 0)\\n\t\t\t\t\treturn false;\\n\t\t\t}\\n\t\t\treturn true;\\n\t\t}\\n\\n\t\tprivate int readByte() {\\n\t\t\tif (hasNextByte())\\n\t\t\t\treturn buffer[curbuf++];\\n\t\t\telse\\n\t\t\t\treturn -1;\\n\t\t}\\n\\n\t\tprivate boolean isSpaceChar(int c) {\\n\t\t\treturn !(c >= 33 && c <= 126);\\n\t\t}\\n\\n\t\tprivate void skip() {\\n\t\t\twhile (hasNextByte() && isSpaceChar(buffer[curbuf]))\\n\t\t\t\tcurbuf++;\\n\t\t}\\n\\n\t\tpublic boolean hasNext() {\\n\t\t\tskip();\\n\t\t\treturn hasNextByte();\\n\t\t}\\n\\n\t\tpublic String next() {\\n\t\t\tif (!hasNext())\\n\t\t\t\tthrow new NoSuchElementException();\\n\t\t\tStringBuilder sb = new StringBuilder();\\n\t\t\tint b = readByte();\\n\t\t\twhile (!isSpaceChar(b)) {\\n\t\t\t\tsb.appendCodePoint(b);\\n\t\t\t\tb = readByte();\\n\t\t\t}\\n\t\t\treturn sb.toString();\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\tif (!hasNext())\\n\t\t\t\tthrow new NoSuchElementException();\\n\t\t\tint c = readByte();\\n\t\t\twhile (isSpaceChar(c))\\n\t\t\t\tc = readByte();\\n\t\t\tboolean minus = false;\\n\t\t\tif (c == '-') {\\n\t\t\t\tminus = true;\\n\t\t\t\tc = readByte();\\n\t\t\t}\\n\t\t\tint res = 0;\\n\t\t\tdo {\\n\t\t\t\tif (c < '0' || c > '9')\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\tres = res * 10 + c - '0';\\n\t\t\t\tc = readByte();\\n\t\t\t} while (!isSpaceChar(c));\\n\t\t\treturn (minus) ? -res : res;\\n\t\t}\\n\\n\t\tpublic long nextLong() {\\n\t\t\tif (!hasNext())\\n\t\t\t\tthrow new NoSuchElementException();\\n\t\t\tint c = readByte();\\n\t\t\twhile (isSpaceChar(c))\\n\t\t\t\tc = readByte();\\n\t\t\tboolean minus = false;\\n\t\t\tif (c == '-') {\\n\t\t\t\tminus = true;\\n\t\t\t\tc = readByte();\\n\t\t\t}\\n\t\t\tlong res = 0;\\n\t\t\tdo {\\n\t\t\t\tif (c < '0' || c > '9')\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\tres = res * 10 + c - '0';\\n\t\t\t\tc = readByte();\\n\t\t\t} while (!isSpaceChar(c));\\n\t\t\treturn (minus) ? -res : res;\\n\t\t}\\n\\n\t\tpublic double nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tpublic int[] nextIntArray(int n) {\\n\t\t\tint[] a = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextInt();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic long[] nextLongArray(int n) {\\n\t\t\tlong[] a = new long[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextLong();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic char[][] nextCharMap(int n, int m) {\\n\t\t\tchar[][] map = new char[n][m];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\tmap[i] = next().toCharArray();\\n\t\t\treturn map;\\n\t\t}\\n\t}\\n\\n\tstatic void tr(Object... o) {\\n\t\tout.println(Arrays.deepToString(o));\\n\t}\\n}", "target": "32", "substitutes": {"out": ["inner", "again", "ch", "console", "png", "error", "outs", "pool", "file", "conn", "doc", "str", "bin", "part", "path", "user", "err", "ou", "flush", "client", "io", "v", "call", "OUT", "name", "r", "outer", "gr", "img", "data", "key", "p", "obj", "ex", "bar", "lock", "net", "cache", "result", "string", "op", "window", "image", "w", "up", "parent", "log", "exp", "exec", "print", "ext", "her", "Out", "output", "list", "temp", "writer", "write", "work"], "ir": ["sr", "inner", "rir", "yr", "ri", "Ir", "vir", "wl", "rx", "http", "err", "inc", "ira", "river", "io", "adr", "er", "iv", "inter", "pir", "iter", "r", "iper", "gr", "input", "irc", "rr", "ear", "dir", "hr", "ur", "ire", "arin", "nir", "rin", "rc", "pr", "ini", "mir", "iris", "IR", "iri", "lr", "fr", "keeper", "ris", "ner", "reader", "dr", "ar", "rb"], "n": ["j", "nn", "h", "conn", "len", "sn", "ns", "d", "count", "nl", "z", "v", "r", "en", "network", "nc", "nb", "k", "nt", "p", "f", "net", "ot", "w", "N", "l", "num", "x", "ni", "u"], "map": ["hash", "change", "where", "one", "open", "app", "address", "place", "le", "model", "mu", "move", "part", "scope", "rule", "array", "table", "group", "master", "down", "maps", "apper", "shape", "size", "min", "pack", "data", "pre", "batch", "arr", "lock", "age", "cache", "me", "mm", "cap", "list", "dict", "module", "ap", "pad", "use", "up", "per", "comb", "replace", "view", "parse", "shared", "mp", "block", "meta", "ms", "copy", "MAP", "state", "work"], "i": ["j", "ri", "pi", "mu", "ip", "ii", "io", "v", "abi", "gi", "uli", "phi", "fi", "qi", "ui", "xi", "li", "iu", "multi", "eni", "di", "ini", "oi", "ie", "chi", "si", "bi", "info", "zi", "ci", "ni", "ti", "u", "uri", "ai", "I"], "s": ["gs", "h", "js", "ns", "rs", "d", "ss", "ps", "sets", "v", "aws", "abs", "r", "xs", "os", "es", "strings", "groups", "ds", "events", "p", "ses", "f", "comments", "ks", "string", "ws", "as", "S", "l", "si", "u", "g", "services", "ts", "ins"], "t": ["id", "token", "tm", "j", "kt", "st", "ct", "str", "d", "tf", "the", "xt", "type", "ta", "v", "r", "y", "pt", "lt", "qt", "T", "tr", "tt", "dt", "key", "tin", "p", "f", "te", "bot", "string", "tmp", "it", "test", "w", "th", "target", "task", "ten", "l", "wt", "x", "u", "rt", "ant", "null", "ti", "temp", "ts"], "res": ["id", "vals", "details", "cons", "resolution", "ons", "rs", "Result", "rem", "err", "ps", "count", "rep", "ress", "resh", "ras", "response", "rus", "r", "ros", "gr", "powers", "rows", "re", "nr", "rez", "req", "ret", "rev", "p", "R", "reg", "arr", "result", "max", " Res", "rc", "rss", "rh", "css", "our", "reset", "val", "pres", "Rs", "sol", "Res", "num", "RES", "results", "x", "resp", "rel", "ms", "size", "bytes"], "e": ["ve", "error", "le", "h", "ception", "line", "ed", "or", "E", "se", "d", "de", "pe", "er", "je", "element", "r", "ee", "en", "ec", "this", "ce", "he", "es", "event", "fe", "re", "be", "ne", "ele", "p", "ea", "f", "exc", "te", "me", "ge", "ev", "oe", "ie", "el", "ze", "x", "ae", "eu", "ue", "edge", "entry", "enter"], "in": ["id", "inner", "again", "login", "path", "file", "str", "bin", "query", "http", "init", "din", "inc", "err", "cli", "io", "is", "inet", "url", "r", "this", "iter", "input", "request", "internal", "irc", "from", "data", "xml", "req", "isin", "win", "f", "ssl", "arin", "IN", "include", "rin", "inn", "it", "connection", "image", "In", "ini", "nin", "ie", "l", "log", "config", "pin", "exec", "vin", "socket", "lin", "ar", "reader", "source", "ins"], "buffer": ["Buffer", "base", "address", "document", "length", "bin", "memory", "page", "resource", "timeout", "bc", "bb", "flush", "array", "header", "limit", "server", "default", "FFER", "seed", "url", "position", "iter", "input", "value", "data", "nb", "padding", "batch", "number", "available", "key", "queue", "cache", "reference", "binary", "window", "uffer", "pad", "buff", "buf", "variable", "uf", "fb", "append", "reader", "block", "capacity", "output", "copy", "transfer", "source"], "curbuf": ["scurbuf", "scaurur", " curbef", "cauruff", "crubef", " crobuff", "scurbbuf", "cabuluf", "caurbuf", "acurush", "scurbul", "Curbuff", "crobul", "acurbuf", "cribuff", "Cribbuf", "Curbbuf", "scauruf", "curbef", "Curbum", "crubul", "curtush", "curbur", "curbum", "curbuff", " curbuff", " caurul", "acurbush", " crobuf", "cauref", "cribush", "cribur", "curtue", "curbbuf", " crobue", "cubbuf", "curtuff", "scurbur", "caurul", " cauref", "cribul", "curtbuf", "curtum", "acurbbuf", "crobue", "caurur", " crobul", "cubum", "cubuf", "crubue", "scaurbuf", "caurue", "crubuf", "scaurul", "cauruf", " curbul", "crobuf", "curuf", "cabulul", "Curbuf", "cribbuf", "crobuff", "cribum", "acuruf", "cabulur", "Cribuf", "curbue", "acurum", "curbul", "curtef", " curbue", " caurue", "curtul", "cabulbuf", "cribuf", "curtuf", "acurbum", "Cribuff", "curbush", "curush", "Cribum", "curum", " cauruf", "cubuff"], "lenbuf": ["lnbuffer", "idenbuffer", "lenbuff", "lanbuf", "lnbuf", "enbuff", "lincount", " lenba", "lenbrace", " lenbuffer", "Lenbuf", "linqueue", "Lenba", "lenbag", "linbuffer", "lenuf", "lenqueue", "enbuffer", "lanbuff", "lnbuff", "encount", "enbuf", "encb", "Lenuf", "lengthcb", " lenbag", "lengthbuf", "lenbuffer", "lanqueue", "idenbuf", "linbuff", "Lenbag", " lenuf", "lencb", "Lencount", " lencb", "lanbuffer", "lenba", "Lenbuffer", "enbag", " lenbuff", "lnbrace", "idenbag", " lenbrace", "idencb", "Lencb", "Lenbrace", "lengthba", "linbuf", "lengthbag", "lnuf", "lnqueue", "lencount", "Lenbuff"], "c": ["sc", "enc", "cu", "ch", "ct", "d", "content", "count", "uc", "z", "v", "esc", "character", "ac", "pointer", "cr", "word", "ec", "nc", "ce", "cc", "k", "vc", "cy", "p", "xc", "f", "dc", "char", "C", "cur", "col", "code", "cl", "ctrl", "x", "ci", "g", "u", "cp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main { \\n    public static void main(String[] args) {\\n    \tScanner sc = new Scanner(System.in);\\n    \tString[] humansAndHeight = sc.nextLine().split(\" \");\\n    \tint humans = Integer.parseInt(humansAndHeight[0]);\\n    \tint height = Integer.parseInt(humansAndHeight[1]);\\n    \tString[] heights = sc.nextLine().split(\" \");\\n    \t\\n    \tint count =0;\\n    \tfor(int i = 0;i<humans;i++) {\\n    \t\tint tmp = Integer.parseInt(heights[i]);\\n    \t\tif(tmp >= height) {\\n    \t\t\tcount++;\\n    \t\t\t\\n    \t\t}\\n    \t}\\n \\n    \tSystem.out.println(count);\\n    \t\\n    \t\\n    }\\n}", "target": "145", "substitutes": {"sc": ["ch", "lc", " Sc", "sys", "st", "str", "Sc", " SC", "bc", "se", "SC", "sf", "scope", " scr", "ss", "server", "uc", "cr", "esc", "c", "scan", "osc", "sync", "spec", "out", "ec", "sub", "nc", "sch", "cc", "sh", "ctx", "sp", "f", "src", "acc", "rc", "system", "anc", "cur", "class", "cs", "l", "cl", "pc", "exec", "ner", "sl", "text", "asc", "screen", "sci"], "humansAndHeight": ["humansandHeight", "citizensAndHeight", "humansAndRa", "humansandLength", "citizensandHeight", "humanandRa", "humansandheight", "humansandRa", "humanAndRa", "womenAndHeight", "humansAndAlpha", "humansAndLength", "humanandheight", "citizensandLength", "humansANDHeight", "humanAndheight", "humanAndHeight", "womenAndSize", "humansandDepth", "humansANDRa", "citizensAndheight", "humansANDheight", "humansANDSize", "citizensandheight", "citizensandAlpha", "citizensAndAlpha", "womenAndDepth", "humansandSize", "humansandAlpha", "womenAndLength", "humansAndheight", "citizensAndLength", "humanandSize", "humansAndDepth", "humanandHeight", "humanAndSize", "humansAndSize"], "humans": ["people", "his", "features", "hops", "hands", "planes", "children", "ums", "umers", "population", "phones", "heads", "projects", "parents", " humanity", "doms", "majority", "thumbnails", " humankind", "han", "xs", "months", "everyone", "quarters", "rows", "uman", "human", "units", " hundreds", "userc", "houses", "sofar", "owners", "times", "blocks", "members", "ims", "us", "cats", "citizens", "users", "authors", "workers"], "height": ["distance", "h", "length", "build", "Height", "volume", "limit", "head", "style", "level", "start", "bottom", "thin", "y", "upper", "shape", "dist", "pull", "tower", "rows", "above", "index", "padding", "human", "deep", "density", "width", "times", "stack", "s", "holes", "x", "higher", "capacity", "depth", "size", "total"], "heights": ["weeks", "hasts", "heaks", "weighters", "meigh", "Heeks", "hights", "sheights", "haights", "measts", "Heighters", "Heights", "heasts", "heigh", "haigh", "sheighters", "halth", "Heaks", "meights", "weights", "heeks", "mealth", "sheaks", "haasts", "weaks", "sheeks", "health", "heighters", "high", "haalth"], "count": ["id", "base", "counter", "check", "length", "len", "part", "race", "child", "type", "level", "c", "start", "Count", "out", "index", "nt", "number", "add", "age", "cache", "max", "carry", "more", "found", "test", "low", "cur", "code", "keep", "num", "sum", "common", "weight", "info", "time", "depth", "size", "list", "total", "work"], "i": ["id", "slice", "j", "pi", "mu", "part", "I", "mi", "init", "ii", "ip", "ind", "v", "io", "start", "c", "gi", "data", "index", "phi", "e", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "b", "di", "ie", "oi", "field", "chi", "l", "si", "bi", "hi", "info", "zi", "x", "ci", "ni", "u", "uri", "fi", "ai", "ti", "vi"], "tmp": ["pp", "cpp", "py", "px", "cmp", "base", "api", "su", "part", "unit", "opp", "xxx", "extra", "txt", "emp", "dest", "ptr", "img", "np", "nb", "qq", "proc", "ppo", "mmm", "alpha", "ji", "src", "stuff", "pad", "perm", "ie", "kk", "sup", "vm", "fb", "mp", "attr", "cp", "rb", "temp", "vt"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int A = Integer.parseInt(sc.next());\\n        int B = Integer.parseInt(sc.next());\\n        int count = 0;\\n        for(int i=A; i<=B; i++) {\\n            int num = i;\\n            int a = num % 10;\\n            num /= 10;\\n            int b = num % 10;\\n            num /= 10;\\n            int c = num % 10;\\n            num /= 10;\\n            int d = num % 10;\\n            num /= 10;\\n            int e = num;\\n            if(a == e && b == d) count++;\\n        }\\n        System.out.println(count);\\n    } \\n}", "target": "104", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "soc", "cer", "Sc", " SC", "bc", "sf", "se", "SC", "scope", "sem", "com", "ss", "server", "uc", "cr", "esc", "sq", "scan", "osc", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "src", "ocr", "rc", "anc", "sche", "ca", "na", "cur", "sb", "cs", "cl", "pc", "parse", "ner", "parser", "asc", "sci"], "A": ["Am", "F", "E", "Area", "AD", "AA", "Num", "Start", "H", "Count", "T", "Alpha", "Na", "alpha", "L", "API", "K", "C", "CA", "D", "M", "HA", "U", "S", "N", "From", "LA", "X", "AF", "P", "I", "G", "AC"], "B": ["Q", "BI", "Beta", "F", "BL", "E", "DB", "CB", "AB", "Bi", "NB", "BF", "Num", "Count", "UB", "MB", "T", "Bs", "Y", "BB", "R", "L", "WB", "BA", "BC", "C", "GB", "D", "M", "BS", "U", "N", "X", "P", "Bar", "I", "G"], "count": ["id", "base", "counter", "check", "length", "len", "part", "offset", "force", "no", "limit", "label", "child", "call", "start", "match", "Count", "second", "value", "index", "data", "nb", "nt", "key", "number", "p", "n", "f", "cond", "cache", "found", "test", "low", "coll", "parent", "code", "sum", "common", "info", "weight", "depth", "size", "done", "list", "total"], "i": ["id", "j", "pi", "mu", "I", "mi", "init", "ii", "ip", "z", "v", "io", "ix", "start", "m", "y", "gi", "index", "number", "p", "n", "f", "qi", "integer", "ui", "xi", "li", "iu", "multi", "o", "di", "ie", "chi", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "ni", "uri", "ai"], "num": ["uni", "cu", "one", "form", "term", "node", "start", "m", "con", "mon", "fe", "dim", "coord", "result", "na", "mult", "col", "NUM", "nom", "x", "temp", "cal", "inc", "om", "norm", "en", "dom", "non", "nb", "index", "data", "number", "alpha", "f", "end", "binary", "multi", "begin", "ref", "text", "valid", "u", "um", "nu", "mu", "cum", "offset", "init", "Num", "batch", "p", "n", "home", "max", "off", "mm", "umi", "comb", "sum", "common", "block", "du", "ni", "id", "nn", "loc", "bin", "family", "unit", "atom", "miss", "min", "zero", "div", "parent", "lim", "total"], "a": ["ba", "ab", "ma", "aa", "ao", "sa", "ata", "am", "an", "m", "ac", "r", "y", "ad", "p", "n", "alpha", "f", "aj", "as", "o", "s", "ama", "asa", "da", "au", "x", "ae", "u", "ai"], "b": ["j", "ba", "ib", "h", "ab", "bc", "aa", "bb", "v", "ob", "ub", "r", "y", "db", "nb", "ad", "p", "n", "f", "eb", "bs", "o", "sb", "l", "x", "ae", "u", "g"], "c": ["h", "cd", "z", "m", "ac", "r", "y", "ec", "cc", "k", "p", "n", "f", "dc", "C", "ca", "o", "w", "l", "x", "ci", "u", "g"], "d": ["id", "j", "h", "cd", "dd", "z", "m", "r", "y", "t", "dt", "k", "ds", "ad", "p", "n", "f", "dc", "q", "o", "D", "w", "s", "l", "da", "x", "bd", "u", "g", "dy"], "e": ["h", "E", "se", "pe", "z", "m", "r", "ee", "y", "ec", "en", "ce", "fe", "ne", "p", "n", "ea", "f", "be", "end", "eb", "o", "oe", "ie", "el", "l", "x", "ae", "eu", "ci", "u", "g", "eq", "de"]}}
{"code": "import java.util.*;\\nimport java.text.*;\\n/*\\nMain class for AOJ where there is no input.\\n*/\\npublic class Main{\\n   public static void main(String[] args){\\n      Scanner sc = new Scanner(System.in);\\n      String str;\\n      String[] arr;\\n      \\n      int row;\\n      int column;\\n      \\n      int[][] a;\\n      int[] sum_r;\\n      int[] sum_c;\\n      int grandTotal = 0;\\n      \\n      //read column and row\\n      str = sc.nextLine();\\n      arr = str.split(\" \");\\n      \\n      row = Integer.parseInt(arr[0]);\\n      column = Integer.parseInt(arr[1]);\\n      \\n      a = new int[row][column];\\n      sum_r = new int[row];\\n      sum_c = new int[column];\\n      \\n      //read the table\\n      for(int i = 0; i < row; i ++){\\n         str = sc.nextLine();\\n         arr = str.split(\" \");\\n         for(int j = 0; j < column; j ++){\\n            a[i][j] = Integer.parseInt(arr[j]);\\n            sum_r[i] += a[i][j];\\n            sum_c[j] += a[i][j];\\n            grandTotal += a[i][j];\\n            \\n         }\\n      }\\n      \\n      //check\\n      for(int i = 0; i < row; i ++){\\n         for(int j = 0; j < column; j ++){\\n            System.out.print(a[i][j] + \" \");\\n         }\\n         System.out.print(sum_r[i]);\\n         System.out.println();\\n      }\\n      \\n      for(int i = 0; i < column; i++){\\n         System.out.print(sum_c[i] + \" \");\\n      }\\n      System.out.println(grandTotal);\\n      \\n      \\n      \\n   }//main\\n}//class", "target": "23", "substitutes": {"sc": [" scans", " rc", " Sc", "sys", " ser", " cur", "Sc", " SC", "se", "SC", "sa", " scr", "ss", "scan", "r", " sp", " sl", " ans", " scorer", " ar", " subp", "sb", "s", " src", "S", "Scan", "ann", " res"], "str": ["sr", "Str", "buffer", "init", "err", "arg", "STR", "tr", "img", "input", "data", "obj", "f", "string", "pass", "par", "fr", "parse", "exec", "text", "print", "ar", "list", "name"], "arr": ["enc", "Str", "app", "mat", "aaa", "aa", "err", "array", "arg", "ars", "ack", "gr", "batch", "Array", "dat", "acc", "br", "att", "dict", "stack", "coll", "par", "var", "au", "attr", "arc", "ann", "ar"], "row": ["error", "page", "array", "round", "scan", "match", "rows", "Row", "index", "key", "batch", "frame", "track", "result", "rc", "feed", "ow", "col", "range", "var", "ner", "order", "reader", "transform", "rank", "entry"], "column": ["path", "left", "error", "model", "ct", "line", "offset", "forward", "Column", "method", "character", "pointer", "c", "position", "input", "index", "channel", "cell", "width", "col", "category", "variable", "platform", "weight", "pattern", "x", "letter", "output"], "a": ["ba", "ai", "aa", "sa", "am", "array", "an", "c", "area", "m", "ac", "r", "y", "A", "p", "n", "alpha", "f", "ca", "va", "as", "w", "s", "x", "u", "ar", "b"], "sum_r": ["Sum_i", "sum_i", "Sum_R", "Sum_r", "Sum_c", "sum_R"], "sum_c": [" sum_b", "sum_b", "sum_e", "sum_f", " sum_f", " sum_e"], "grandTotal": [" grandMax", "GrandTotal", "grandMax", "Grandtotal", " overallTotal", " grandAverage", "grandAverage", "GrandAverage", " overallAverage", "GrandMax", " overalltotal", "grandtotal", " grandtotal", " overallMax"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.io.IOException;\\nimport java.util.NoSuchElementException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        CSumOfGcdOfTuplesEasy solver = new CSumOfGcdOfTuplesEasy();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CSumOfGcdOfTuplesEasy {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int n = in.nextInt();\\n            int total = 0;\\n            for (int i = 1; i <= n; i++) {\\n                for (int j = 1; j <= n; j++) {\\n                    for (int k = 1; k <= n; k++) {\\n                        int[] array = {i, j, k};\\n                        total += gcd(array);\\n                    }\\n\\n                }\\n\\n            }\\n\\n            out.println(total);\\n        }\\n\\n        static int gcd(int a, int b) {\\n            if (a == 0)\\n                return b;\\n            return gcd(b % a, a);\\n        }\\n\\n        static int gcd(int[] array) {\\n            int result = array[0];\\n            for (int i = 1; i < 3; i++)\\n                result = gcd(array[i], result);\\n\\n            return result;\\n        }\\n\\n    }\\n\\n    static class Scanner {\\n        private final InputStream in;\\n        private final byte[] buffer;\\n        private int ptr;\\n        private int buflen;\\n\\n        public Scanner(InputStream in) {\\n            this.in = in;\\n            this.buffer = new byte[1024];\\n            this.ptr = 0;\\n            this.buflen = 0;\\n        }\\n\\n        private boolean hasNextByte() {\\n            if (ptr < buflen) return true;\\n            else {\\n                ptr = 0;\\n                try {\\n                    buflen = in.read(buffer);\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n                if (buflen <= 0) return false;\\n            }\\n            return true;\\n        }\\n\\n        private byte readByte() {\\n            if (hasNextByte()) return buffer[ptr++];\\n            return -1;\\n        }\\n\\n        private boolean isPrintableChar(byte c) {\\n            return '!' <= c && c <= '~';\\n        }\\n\\n        private void skipUnprintable() {\\n            while (hasNextByte() && !isPrintableChar(buffer[ptr])) {\\n                ptr++;\\n            }\\n        }\\n\\n        public boolean hasNext() {\\n            skipUnprintable();\\n            return hasNextByte();\\n        }\\n\\n        public int nextInt() {\\n            if (!hasNext()) throw new NoSuchElementException();\\n            int n = 0;\\n            boolean minus = false;\\n            byte b = readByte();\\n            if (b == '-') {\\n                minus = true;\\n                b = readByte();\\n            }\\n            if (b < '0' || '9' < b) throw new NumberFormatException();\\n            while (true) {\\n                if ('0' <= b && b <= '9') {\\n                    n *= 10;\\n                    n += b - '0';\\n                } else if (b == -1 || !isPrintableChar(b)) {\\n                    return minus ? -n : n;\\n                } else {\\n                    throw new NumberFormatException();\\n                }\\n                b = readByte();\\n            }\\n        }\\n\\n    }\\n}\\n\\n", "target": "6", "substitutes": {"inputStream": ["InputStreamer", " inputstream", " inputSteam", "outputstream", "outputSteam", " inputStreamer", "inputstream", "Inputstream", "inputSteam", "inputStreamer", "outputString", "InputSteam", "InputString", "inputString", "InputStream", " inputString", "outputStreamer"], "outputStream": ["referenceStreamer", "referenceStream", "outputWriter", "inputView", "OutputWriter", "outputstream", "outputSteam", "OutputStream", "OutputStreamer", "inputstream", "inputSteam", "inputStreamer", " outputView", "OutputSteam", "referencestream", "OutputView", "referenceSteam", "inputWriter", "outputStreamer", " outputWriter", " outputSteam", "Outputstream", "outputView"], "in": ["inner", "again", "h", "or", "inas", "query", "client", "url", "m", "r", "con", "isin", "inn", "In", "nin", "val", "exec", "x", "reader", "config", "path", "cin", "inc", "din", "io", "inside", "is", "this", "read", "input", "request", "data", "index", "f", "arin", "rin", "pass", "kin", "socket", "name", "login", "sin", "resource", "init", "thin", "internal", "win", "ssl", "inf", "connection", "get", "source", "id", "slice", "token", "file", "gin", "str", "bin", "part", "err", "arg", "ln", "min", "ex", "on", "lock", "src", "IN", "as", "run", "image", "ini", "l", "pin", "vin", "lin", "ins"], "out": ["inner", "again", "pool", "error", "outs", "file", "conn", "line", "exit", "bin", "page", "scope", "init", "err", "inc", "user", "println", "server", "process", "client", "table", "io", "v", "at", "OUT", "outer", "call", "sync", "r", "word", "point", "to", "input", "ex", "obj", "p", "problem", "net", "cache", "string", "list", "wr", "connection", "window", "o", "image", "pass", "w", "s", "up", "In", "parent", "log", "view", "exp", "exec", "later", "print", "Out", "output", "copy", "gen", "temp", "writer", "write", "work"], "solver": ["solution", "ssolver", "ssolution", "unsolver", "ssearcher", "searcher", "setsolution", "setsolve", "Solutions", "Solve", "ssolutions", "unsolution", "solve", "unsolutions", "ssolve", "Solution", "solutions", "Solver", "Searcher", "unsolve", "setsearcher", "setsolver"], "testNumber": ["TestCounter", "trialNum", " testCounter", "Testnumber", "testCounter", "trialCounter", "TestNumber", "testnumber", " testnumber", "trialNumber", " testNum", "TestNum", "testNum", "trialnumber"], "n": ["nn", "nu", "ns", "sn", "d", "no", "nl", "z", "v", "m", "y", "en", "network", "nc", "t", "ln", "nb", "nt", "ne", "number", "p", "e", "net", "pn", "na", "o", "w", "s", "N", "l", "num", "x", "nan", "g", "u", "ni"], "total": ["token", "Total", "base", "error", "length", "part", "offset", "no", "count", "otal", "last", "type", "ta", "stable", "done", "current", "iter", "ok", "json", "value", "nt", "key", "gross", "number", "alpha", "max", "partial", "fat", "found", "na", "average", "full", "percent", "tax", "parent", "sum", "num", "info", "shared", "real", "translation", "valid", "all", "complete", "normal", "scale"], "i": ["id", "api", "ri", "h", "ami", "pi", "I", "mi", "ii", "ip", "z", "v", "io", "ix", "is", "y", "gi", "index", "phi", "e", "p", "fi", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "inn", "iu", "it", "multi", "eni", "di", "ini", "ie", "yi", "oi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "mini"], "j": ["ja", "J", "js", "ij", "jj", "ii", "z", "v", "je", "y", "jl", "jc", "key", "e", "p", "kj", "qi", "f", "ji", "aj", "ik", "q", "end", "br", "ui", "li", "it", "o", "ie", "adj", "yi", "l", "uj", "x", "jo", "u", "g", "jp"], "k": ["ku", "ch", "h", "sk", "ek", "kick", "d", "dk", "kh", "ka", "ko", "kn", "z", "v", "m", "ok", "y", "ck", "uk", "gh", "ak", "key", "p", "kj", "ki", "K", "ik", "q", "ks", "ky", "ph", "km", "kid", "kk", "kw", "mk", "ke", "u", "work"], "array": ["hash", "instance", "air", "object", "answer", "address", "app", "api", "error", "form", "section", "function", "vector", "database", "book", "angle", "page", "table", "group", "type", "alias", "area", "pair", "response", "feature", "element", "shape", "value", "core", "index", "data", "archive", "complex", "batch", "number", "p", "alpha", "arr", "Array", "integer", "expression", "map", "cache", "ray", "string", "row", "account", "image", "coll", "average", "range", "target", "collection", "allow", "field", "view", "record", "edge", "list", "sample"], "a": ["access", "ba", "ab", "fa", "aaa", "aa", "sa", "d", "z", "abc", "an", "area", "m", "ac", "y", "A", "value", "ga", "mA", "index", "ad", "e", "p", "alpha", "f", "ea", "pa", "aj", "wa", "ca", "va", "as", "na", "l", "da", "x", "ae", "u", "all"], "b": ["base", "object", "ba", "ab", "cb", "bool", "body", "bc", "aa", "d", "bb", "bf", "z", "v", "gb", "rb", "m", "abs", "r", "y", "B", "value", "ga", "nb", "ad", "e", "p", "be", "f", "number", "batch", "beta", "br", "bs", "w", "sb", "s", "code", "l", "bi", "fb", "x", "ae", "g", "u", "normal"], "result": ["id", "instance", "object", "error", "counter", "function", "length", "comment", "other", "page", "Result", "err", "method", "limit", "master", "default", "response", "match", "current", "r", "value", "ult", "data", "ret", "number", "continue", "alpha", "arr", "integer", "entry", "obj", "br", "rc", "row", "found", "next", "dict", "pass", "val", "sum", "info", "results", "weight", "status", "mask", "valid", "success", "diff", "first", "complete", "res"], "buffer": ["slice", "writer", "port", "Buffer", "address", "layer", "document", "length", "comment", "memory", "timeout", "resource", "flush", "table", "server", "header", "limit", "count", "texture", "pointer", "seed", "url", "password", "position", "iter", "read", "shape", "input", "data", "available", "batch", "number", "queue", "cap", "reference", "window", "binary", "stack", "uffer", "pad", "buff", "buf", "append", "block", "capacity", "message", "transfer", "temp", "source", "entry"], "ptr": ["slice", "port", "cmp", "sth", "address", "loc", "Ptr", "length", "ft", "str", "tp", "offset", "addr", " addr", "fif", "xt", "fd", "fer", "adr", "pointer", "pair", "inter", "iter", "pt", "shift", "dest", "tr", "pend", "np", "fe", "req", "pos", "ctr", "src", "br", "trigger", "elt", "tmp", "wr", "cur", "tip", "pad", "buff", "buf", "code", "pointers", "tips", "attr", "patch", "diff", "etr", "dr", "ext", "rot", "prot", "rt", "trace", "inst", " pointer"], "buflen": ["fuflens", "buflense", "buvelense", "bullenc", "bulfens", "buffens", "buflenn", "fuflening", "fucolens", "fuvelense", "bucolens", "auFln", " buflenc", "auFlan", "aullen", "fuflen", "bucolen", "bulfenc", "fuvelen", "bucleng", "buclan", "buftense", "fuflan", "auflens", "buvelening", "buveleng", "bucolan", " bullen", "bullens", "auflenn", "bufren", "buFlen", "bufan", "buvelEN", "buffan", "buFlenn", "bullength", "buFln", "aullenn", "bufflen", "bullen", "buFlenc", "buftEN", "buclEN", "bullenn", "bufrening", "bufn", "aullenc", "bucollen", "buclength", "buclenc", "fucollen", "aullens", "buclen", "bulfenn", "auFlEN", "fuvelEN", "buften", "fuvelening", "bulleng", "fuflEN", "bufrense", "bulfen", "buvelenc", "fucolen", "fucolan", "bufleng", " bufleng", " bullength", "auflen", "bullan", " bullenc", "auflEN", "buvelength", "aufln", "bufen", "buflenc", "buvelen", "auflenc", "bufllen", "bufEN", "buftening", "buflEN", " buflength", "buflength", "buflan", "bulllen", " bulleng", "bucln", "fufllen", "fuflense", "buflens", "bufln", "buFlEN", "auFlen", "auflan", "buFlan", "buflening", "bufrEN", "buffen", "buFlens"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        int sum = 0;\\n        int temp = 0;\\n        int i = 0;\\n        int e = 0;\\n        //\u4f59\u308a\u304c\u4e00\u756a\u5c0f\u3055\u3044\u3082\u306e\u3092\u6700\u5f8c\u306b\u6ce8\u6587\u3059\u308b\u3002\\n        int r[] = new int[5];\\n        int s = 11;\\n        int t = 11;\\n        for(int k = 0; k<5; k++){\\n          r[k] = sc.nextInt();\\n        }\\n\\n        for(i = 0; i < 5; i++){\\n          s = Math.min(t,r[i]%10);\\n          if(t != s && r[i]%10 !=0){\\n          e = i;\\n          t = s; \\n          }\\n        }\\n        temp = r[4];\\n        r[4] = r[e];\\n        r[e] = temp;\\n\\n        for(int j = 0; j < 4; j++){\\n          if(r[j] % 10 != 0){\\n            sum = 10 - (r[j] % 10) + r[j] +sum;\\n          }else{\\n            sum += r[j];\\n          }\\n        }\\n        sum += r[4];\\n        System.out.println(sum);\\n    }\\n}\\n", "target": "63", "substitutes": {"sc": [" rc", " Sc", " ser", " cur", "Sc", " SC", "se", "sf", "SC", "sa", " scr", "ss", "sq", "scan", " cont", " sl", " ans", " subp", "sb", "gram", "s", " src", "si", " pars", "ann", " res", " surf", " arr"], "sum": ["error", " total", "dev", "se", "Sum", "err", "ss", "count", "seed", "scan", "start", "mem", "match", "mean", "ram", "test", "skip", "average", "conf", "use", "num", "info", "parse", "diff", "all", "um", "scale", "total"], "temp": ["base", "error", "ed", "dev", "unit", "init", "Temp", "err", "io", "stable", "seed", "start", "current", "emp", "iter", "ee", "exc", "tmp", "test", "div", "eff", "diff", "output", "total", "degree"], "i": ["j", "pi", "in", "d", "init", "ii", "ip", "z", "v", "c", "is", "m", "y", "t", "index", "phi", "p", "n", "f", "it", "o", "b", "si", "ci", "u", "ai", "I"], "e": ["ile", "le", "ed", "E", "eed", "se", "d", "ef", "pe", "r", "ee", "ec", "es", "fe", "ea", "ise", "f", "end", "ge", "ev", "o", "oe", "ie", "el", "xe", "ze", "ide", "em"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\t\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tInputReader in = new InputReader(System.in);\\n\t    int a = in.readInt();\\n\t    int b = in.readInt(); \\n\t    int c = in.readInt();\\n\t    int x = in.readInt();\\n\t    \\n\t    System.out.println(a+b+c+Math.max(Math.max(a, b), c) * ((1<<x) -1));\\n\t}\\n}\\nclass InputReader {\\n\\n\tprivate InputStream stream;\\n\tprivate byte[] buf = new byte[1024];\\n\tprivate int curChar;\\n\tprivate int numChars;\\n\tprivate SpaceCharFilter filter;\\n\\n\tpublic InputReader(InputStream stream) {\\n\t\tthis.stream = stream;\\n\t}\\n\\n\tpublic int read() {\\n\t\tif (numChars == -1)\\n\t\t\tthrow new InputMismatchException();\\n\t\tif (curChar >= numChars) {\\n\t\t\tcurChar = 0;\\n\t\t\ttry {\\n\t\t\t\tnumChars = stream.read(buf);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tif (numChars <= 0)\\n\t\t\t\treturn -1;\\n\t\t}\\n\t\treturn buf[curChar++];\\n\t}\\n\\n\tpublic int readInt() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tint res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9')\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\\n\tpublic String readString() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tStringBuilder res = new StringBuilder();\\n\t\tdo {\\n\t\t\tres.appendCodePoint(c);\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res.toString();\\n\t}\\n\\n\tpublic long readLong() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c)) {\\n\t\t\tc = read();\\n\t\t}\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tlong res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9') {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\t\\n\tpublic boolean isSpaceChar(int c) {\\n\t\tif (filter != null)\\n\t\t\treturn filter.isSpaceChar(c);\\n\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n\t}\\n\\n\tpublic String next() {\\n\t\treturn readString();\\n\t}\\n\\n\tpublic interface SpaceCharFilter {\\n\t\tpublic boolean isSpaceChar(int ch);\\n\t}\\n}\\n", "target": "201", "substitutes": {"in": ["token", "path", "again", "login", "inner", "doc", "file", "gin", "st", "line", "str", "bin", "conn", "resource", "d", "init", "din", "inc", "err", "user", "http", "at", "is", "url", "r", "thin", "out", "con", "read", "this", "input", "t", "min", "serv", "data", "by", "with", "e", "ex", "n", "win", "f", "IN", "inn", "inf", "ic", "as", "connection", "image", "In", "impl", "ini", "s", "i", "nin", "container", "l", "log", "kin", "between", "pin", "socket", "reader", "buffer", "source", "ins"], "a": ["base", "ba", "ab", "oa", "fa", "ma", "aaa", "aa", "sa", "d", "am", "an", "area", "ac", "ia", "y", "A", "ga", "ada", "ad", "ea", "p", "n", "alpha", "f", "pa", "aj", "la", "va", "as", "ca", "i", "l", "da", "au", "ae", "ai"], "b": ["ba", "ab", "h", "cb", "ib", "fa", "bc", "aa", "d", "bb", "bh", "bf", "z", "v", "ub", "r", "y", "db", "B", "nb", "e", "cy", "p", "n", "f", "eb", "ca", "bs", "o", "sb", "i", "lb", "l", "bi", "fb", "ae", "rb"], "c": ["sc", "cu", "cf", "h", "count", "uc", "m", "r", "con", "cc", "vc", "unc", "dec", "col", "w", "i", "ci", "lc", "cb", "ct", "cin", "cd", "d", "inc", "z", "esc", "e", "f", "dc", "end", "char", "cur", "cs", "cl", "arc", "u", "cp", "cont", "conn", "abc", "ac", "y", "ce", "chain", "cy", "p", "n", "xc", "rc", "anc", "cm", "ic", "pc", "mc", "enc", "loc", "bc", "err", "fc", "cr", "v", "content", "ec", "nc", "t", "sec", "k", "cache", "q", "C", "ca", "o", "coll", "s", "code", "l", "oc", "g", "cent"], "x": ["j", "h", "ct", "xx", "rx", "d", "xy", "xt", "xxx", "z", "v", "ix", "abc", "y", "xs", "t", "index", "e", "p", "n", "ex", "f", "xc", "max", "q", "xi", "w", "ax", "i", "code", "l", "cl", "X", "u", "xes"], "stream": ["sw", "enc", "port", "Stream", "speed", "iterator", "pool", "path", "object", "h", "file", "document", "form", "model", "length", "or", "resource", "user", "round", "engine", "server", "method", "client", "type", "v", "m", "transform", "host", "this", "out", "read", "ack", "clean", "input", "from", "control", "data", "channel", "e", "pipe", "f", "context", "ssl", "src", "track", "driver", "string", "row", "feed", "window", "stack", "trans", "cur", "w", "per", "view", "self", "sl", "null", "handler", "output", "raw", "socket", "reader", "buffer", "source"], "buf": ["Buffer", "wb", "cf", "base", "pool", "bag", "cb", "bg", "buffer", "bc", "conv", "bb", "bh", "pb", "uc", "fd", "gb", "v", " buff", "Buff", "data", "func", " buffer", "batch", "ctx", "queue", "map", "context", "bp", "src", "br", "rc", "cap", "tmp", "seq", "blocks", "cur", "ra", "pad", "buff", "ref", "uf", "ff", "fb", "bd", "cv", "rb", "vec", "temp", "config"], "curChar": ["urDir", " curWord", " curDir", "curWord", "CurChar", "urCh", "perchar", "CurCh", " curchar", "perCh", "surCh", "serCharacter", "perChar", " curCharacter", "CurWord", "serChar", "curchar", "curInt", "urWord", " curInt", " curByte", "Curchar", "curCh", "perByte", "urchar", "CurCharacter", "serCh", "surChar", " curCh", "serchar", "CurByte", "surInt", "curCharacter", "curDir", "urChar", "curByte", "urInt", "surDir"], "numChars": ["numQuases", " numChats", "numChaces", "numchans", "numchacters", "numPharts", "numChARS", "numQuats", "numChats", " numChans", "numCarts", "numCats", "numCARS", " numchases", "numQuARS", " numchars", "numchards", "numCHacters", " numCards", " numChARS", "numCards", " numChards", "numCheaces", "numPhacters", "numCharts", "numCHarts", "numchases", "numChacters", " numCharts", " numCars", "numChases", "numPhases", "numChears", "numCHases", " numchacters", " numChases", "numCans", " numchats", "numCHans", " numchaces", "numQuars", "numChearts", "numcharts", " numCans", " numcharts", " numChaces", " numChacters", "numCHards", " numCases", " numCarts", "numchats", "numCHars", "numCaces", "numchars", "numCars", "numPhars", "numChards", "numCases", "numChans", "numchaces", "numCheats"], "filter": ["fil", "callback", "cb", "orig", "ters", "bb", " filtered", " compressor", "abc", "fp", "Filter", "fe", "func", "chain", "proc", "reg", "map", " filters", "cache", "acl", "fac", "pass", "col", " Filter", "pattern", "mask", "handler", "fl"], "sgn": ["sbn", "asgin", "dsgn", "sig", "ssagn", "Sig", "sgin", "sGN", " sig", "psagn", " sGN", "ssgn", "dsig", "psgn", "psgen", "Sgen", " sgin", "psbn", "ssgen", "dsgin", "Sgn", "Sbn", " sagn", "dsGN", "asgen", "sgen", " sgen", "SGN", "psgin", "Sgin", "sagn", "asgn", "ssgin", "asbn"], "res": ["vals", "values", "details", "RE", "cons", "resolution", "des", "str", "ons", "ns", "js", "rs", "rex", "err", "ps", "ress", "cr", "resh", "params", "ras", "response", "rus", "r", "ros", "out", "is", "os", "gr", "es", "rows", "re", "qs", "rez", "req", "repl", "reg", "ret", "nos", "rev", "p", "arr", "mr", "obj", "bytes", "result", " Res", "cells", "rc", "rss", "css", "bs", "blocks", "as", "reset", "s", "us", "cases", "cs", "pres", "val", "ches", "Res", "ris", "eps", "resp", "results", "RES", "RS", "ms", "Rs", "ces", "msg", "ins"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n, d, x, y, num = 0;\\n        n = sc.nextInt();\\n        d = sc.nextInt();\\n        for (int i = 0; i < n; i++) {\\n            x = sc.nextInt();\\n            y = sc.nextInt();\\n            double dist = Math.sqrt(Math.pow(x, 2)+Math.pow(y, 2));\\n            if(dist <= d) ++num;\\n        }\\n        System.out.println(num);\\n        sc.close();\\n    }\\n}\\n", "target": "42", "substitutes": {"sc": ["cont", "ch", "lc", "app", "soc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "com", "ss", "lib", "cli", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "sub", "search", "nc", "sch", "cc", "cor", "sec", "cus", "core", "ctx", "sp", "dc", "src", "rc", "system", "anc", "sche", "ca", "cur", "coll", "class", "sb", "cs", "cl", "pc", "parse", "ner", "exec", "ci", "asc", "parser", "cv", "sci"], "n": ["j", "nd", "nn", "conn", "a", "ns", "in", "no", "z", "v", "c", "m", "network", "nit", "t", "mn", "nb", "k", "nt", "e", "ne", "p", "dn", "f", "net", "na", "o", "w", "s", "fn", "N", "l", "u", "ni", "ann", "b"], "d": ["id", "j", "nd", "cd", "in", "dd", "ind", "md", "fd", "z", "c", "m", "t", "dir", "dt", "ds", "dim", "e", "ded", "p", "dn", "f", "did", "dc", "sd", "D", "o", "di", "w", "l", "dx", "da", "del", "u", "g", "dy", "done"], "x": ["id", "px", "wx", "a", "height", "xx", "length", "rx", "in", "xy", "cross", "z", "ix", "v", "c", "m", "position", "xs", "t", "data", "index", "k", "phi", "e", "p", "ex", "f", "pos", "xi", "width", "na", "o", "w", "ax", "lat", "dx", "X", "time", "u", "b", "name", "work"], "y": ["py", "j", "yt", "ady", "xy", "ry", "ii", "z", "v", "ny", "c", "m", "yy", "t", "yo", "Y", "e", "cy", "p", "oy", "f", "ty", "ky", "o", "vy", "w", "ey", "s", "yi", "zy", "ya", "l", "dy", "ye", "b", "sy"], "num": ["id", "uni", "nn", "loc", "len", "mu", "nu", "unit", "no", "count", "draw", "done", "Num", "m", "norm", "out", "con", "dom", "min", "index", "ng", "nb", "nr", "dim", "number", "p", "pos", "f", "ctr", "end", "max", "result", "multi", "sort", "div", "fn", "sum", "common", "NUM", "text", "du", "valid", "g", "u", "ni", "gen", "um", "b"], "i": ["id", "j", "h", "a", "pi", "I", "mi", "ii", "ip", "z", "v", "io", "c", "ix", "gi", "index", "k", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "di", "ini", "ie", "yi", "chi", "si", "bi", "zi", "ci", "u", "ni", "ti", "ai", "b"], "dist": ["distance", "cmp", "Distance", "dis", "dev", "mu", "grade", " distance", "Dist", "err", "lib", "ind", "dest", "progress", "depth", "np", "dir", "desc", "req", "dim", "wd", "dj", "pos", "def", "src", "grad", "sd", "di", "comp", "score", "div", "parent", "sup", "dx", "weight", "rel", "diff", "cost", "dy", "size", "rank"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.FileNotFoundException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\n/*\\n public class abc084b {\\n\\n }\\n\\n */\\npublic class Main {\\n  public void solve() throws FileNotFoundException {\\n    InputStream inputStream = System.in;\\n\\n    InputHelper in = new InputHelper(inputStream);\\n\\n    // actual solution\\n    int a = in.readInteger();\\n    int b = in.readInteger();\\n\\n    String s = in.read();\\n\\n    if (s.charAt(a) != '-') {\\n      System.out.println(\"No\");\\n      return;\\n    }\\n\\n    for (int i = 0; i < a; i++) {\\n      if (!Character.isDigit(s.charAt(i))) {\\n        System.out.println(\"No\");\\n        return;\\n      }\\n    }\\n\\n    for (int i = a + 1; i < a + b + 1; i++) {\\n      if (!Character.isDigit(s.charAt(i))) {\\n        System.out.println(\"No\");\\n        return;\\n      }\\n    }\\n\\n    System.out.println(\"Yes\");\\n    // end here\\n  }\\n\\n  public static void main(String[] args) throws FileNotFoundException {\\n    (new Main()).solve();\\n  }\\n\\n  class InputHelper {\\n    StringTokenizer tokenizer = null;\\n    private BufferedReader bufferedReader;\\n\\n    public InputHelper(InputStream inputStream) {\\n      InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\\n      bufferedReader = new BufferedReader(inputStreamReader, 16384);\\n    }\\n\\n    public String read() {\\n      while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n        try {\\n          String line = bufferedReader.readLine();\\n          if (line == null) {\\n            return null;\\n          }\\n          tokenizer = new StringTokenizer(line);\\n        } catch (IOException e) {\\n          e.printStackTrace();\\n        }\\n      }\\n\\n      return tokenizer.nextToken();\\n    }\\n\\n    public Integer readInteger() {\\n      return Integer.parseInt(read());\\n    }\\n\\n    public Long readLong() {\\n      return Long.parseLong(read());\\n    }\\n  }\\n}\\n", "target": "78", "substitutes": {"inputStream": [" inputReader", "inputFile", " inputFile", "inputReader", " inputstream", " inputSteam", "outputstream", "outputReader", "outputSteam", "InputReader", "inputstream", "Inputstream", "inputSteam", "InputSteam", "InputFile", "InputStream", "outputFile", "outputStream"], "in": ["path", "inner", "ins", "inst", "h", "file", "or", "bin", "resource", "din", "array", "io", "c", "is", "m", "r", "this", "out", "read", "con", "request", "input", "session", "data", "xml", "loader", "p", "ctx", "f", "src", "IN", "string", "as", "In", "impl", "ini", "s", "i", "per", " ins", "stream", "reader", "b", "source", "to"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String [] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int a = scanner.nextInt();\\n        int b = scanner.nextInt();\\n        int c = scanner.nextInt();\\n \\n        final boolean poor = (a == b && a != c) ||\\n                (a == c && a != b) || (b == c && b != a);\\n        if (poor) {\\n            System.out.println(\"Yes\");\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n    }\\n}", "target": "117", "substitutes": {"scanner": ["nerer", "scaner", "Scanner", "aner", "nerker", "canter", "anter", "caner", "Scaner", "canning", "Scanker", "nerner", " scanning", "Scanter", "scanning", "scanker", "anner", "canker", "canner", "nerter", "nerning", "scanter", "Scanning", "anker", " scaner", " scanter"], "a": ["aw", "api", "ba", "ab", "another", "fa", "ai", "aaa", "aa", "sa", "d", "am", "ah", "an", "area", "m", "ac", "r", "y", "this", "A", "t", "ce", "cc", "ga", "ad", "e", "p", "n", "alpha", "f", "aj", "la", "va", "ca", "as", "na", "o", "w", "s", "i", "ama", "da", "au", "x", "ae", "af", "u", "ar"], "b": ["j", "ba", "h", "cb", "ab", "fa", "bc", "aa", "d", "bb", "z", "v", "an", "ob", "ac", "r", "y", "db", "A", "t", "B", "ga", "k", "ad", "e", "be", "p", "n", "pa", "f", "eb", "ca", "bs", "o", "w", "sb", "i", "l", "bi", "x", "ae", "u", "g", "rb"], "c": ["sc", "cu", "ch", "cf", "lc", "h", "cb", "d", "uc", "z", "v", "an", "ac", "r", "y", "con", "ec", "t", "ce", "cc", "k", "e", "cy", "p", "n", "cat", "f", "ca", "C", "o", "w", "s", "i", "cs", "l", "x", "ci", "u", "g"], "poor": [" rotten", "little", " terrible", " lousy", "ready", " worse", "giving", " cheaply", "almost", " Poor", " shitty", "brown", " poorer", "ousy", " dishonest", " needy", "rice", "grave", "important", "better", "worthy", " impoverished", " decent", "worst", "perfect", "sweet", "nice", "yeah", "severe", "cow", " worst", "good", "easy", "Poor", " careful", "enough", "hate", " poorest", " sloppy", " worthy", "dust", " clever", "terday", " flawed", " nasty", " poorly", "improve", "istine", "aughty", " better", " horrible"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    StringBuilder output = new StringBuilder();\\n    String crlf = System.getProperty(\"line.separator\");\\n    int row, col, input;\\n    int sumRow, sumMat;\\n    int[] sumCol;\\n    \\n    row = in.nextInt();\\n    col = in.nextInt();\\n    sumCol = new int[col];\\n    sumMat = 0;\\n    \\n    for (int i = 0; i < row; i++) {\\n      sumRow = 0;\\n      for (int j = 0; j < col; j++) {\\n        input =in.nextInt();\\n        sumRow += input;\\n        sumCol[j] += input;\\n        output.append(input).append(\" \");\\n      }\\n      output.append(sumRow).append(crlf);\\n    }\\n    for (int k = 0; k < col; k++) {\\n      output.append(sumCol[k]).append(\" \");\\n      sumMat += sumCol[k];\\n    }\\n    output.append(sumMat);\\n    System.out.println(output.toString());\\n  }\\n}", "target": "23", "substitutes": {"in": ["token", "inner", "login", "again", "file", "a", "bin", "part", "query", "resource", "init", "inc", "din", "err", "user", "server", "arg", "er", "c", "is", "name", "inside", "url", "r", "thin", "out", "con", "this", "reading", "ln", "fe", "data", "loader", "isin", "n", "win", "f", "arin", "IN", "rin", "inn", "inf", "as", "connection", "pass", "In", "image", "ini", "s", "ax", "readable", "nin", "version", "l", "kin", "pin", "exec", "parse", "g", "lin", "reader", "b", "source", "ins"], "output": ["application", "format", "external", "again", "environment", "page", "four", "operation", "written", "office", "result", "complete", "update", "ou", "temp", "config", "address", "writing", "line", "export", "summary", "information", "web", "en", "this", "il", "string", "binary", "generation", "target", "self", "put", "text", "copy", "offset", "job", "resource", "display", "generated", "position", "out", "progress", "connection", "print", "kernel", "letter", "null", "buffer", "object", "console", "left", "ilo", "file", "document", "unit", "Output", "array", "foo", "prefix", "outer", "response", "tube", "control", "queue", "module", "image", "log", "stage", "done", "write"], "crlf": ["crlc", "carlf", "CRld", " drelf", " drld", "Crline", " cllf", "Crlc", "CRelf", " cllc", "CRlc", " drlc", "carld", " crld", "crline", "CRlf", "Crld", " clld", "crld", "carlc", " clelf", "carline", " drlf", "Crlf", "crelf", " crlc", " crline"], "row": ["id", "slice", "sc", "loc", "co", "right", "length", "ro", "page", "round", "uc", "level", "c", "r", "ok", "ack", "tr", "rows", "Row", "index", "roll", "key", "batch", "p", "pos", "f", "cell", "month", "bug", "feed", "coll", "column", "ow", "th", "range", "num", "view", "x", "patch", "ner", "block", "order", "year", "step", "reader", "rank", "entry"], "col": ["path", "ch", "lc", "loc", "ct", "section", "po", "length", "inc", "round", "ind", "group", "count", "kn", "c", "ac", "y", "point", "con", "ol", "cor", "dir", "index", "il", "key", "cat", "cy", "Col", "p", "pos", "win", "cell", "n", "f", "bug", "lock", "cycle", "char", "cm", "cur", "coll", "column", "div", "COL", "val", "l", "num", "cl", "patch", "block", "ci", "rel", "ell", "year", "cp", "fl", "cal", "co"], "input": ["id", "inner", "format", "pixel", "instance", "error", "address", "layer", "form", "a", "length", "comment", "query", "unit", "inc", "uc", "c", "element", "current", "iter", "Input", "json", "ul", "img", "pull", "value", "data", "index", "key", "batch", "alpha", "f", "integer", "entry", "ahead", "q", "inf", "att", "feed", "image", "column", "ref", "act", "field", "intel", "sum", "view", "weight", "qa", "block", "reader", "null", "step", "initial", "temp", "source", "config", "work"], "sumRow": ["SumMat", "netCol", "SumCol", "sumMonth", "unitSe", "setCol", "sumSe", " sumMonth", " sumLine", "SumRow", "unitCol", " sumCor", "setField", "unitMonth", "setLine", "netRow", "umField", "netMat", "sumCor", "SumMonth", "useCor", " sumSe", "netCor", "useRow", "umLine", "SumSe", "setRow", "useMat", "sumField", "umCol", "unitRow", " sumField", "sumLine", "useCol", "umRow", "SumCor"], "sumMat": ["SumMat", "byPat", "massMat", "SumCol", "sumPat", "SumColumn", "scaleRow", "sumColumn", "SumMult", "umMult", "umMat", "SumRow", " summat", " sumGrid", "massRow", "massGrid", "sumGrid", "scaleColumn", " sumColumn", "byMat", "SumPat", " sumPat", "sumMult", "byCol", "umPat", "scaleMat", "summat", "scalemat", " sumMult", "massCol", "umCol", "bymat", "Summat", "SumGrid"], "sumCol": ["SumMat", "SumCol", "numColl", "countColl", "countColumn", "SumColumn", "countMat", "sumColumn", "umColumn", "umMat", " sumLine", "numRow", "SumRow", " sumcol", "sumcol", "SumLine", " sumColumn", "countRow", "countCol", "sumColl", "umLine", "umcol", "Sumcol", "umCol", "numCol", " sumColl", "numMat", "sumLine", "umRow", "numcol", "countcol"], "i": ["id", "ri", "pi", "mi", "init", "ii", "ip", "z", "v", "ori", "ix", "is", "im", "io", "y", "gi", "p", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "iu", "b", "di", "ini", "ie", "oi", "l", "si", "bi", "ci", "ni", "u", "ai", "I", "vi"], "j": ["ch", "h", "ja", "J", "js", "ij", "d", "jj", "ii", "ind", "z", "v", "ix", "c", "y", "out", "jc", "jl", "key", "e", "p", "n", "f", "qi", "ji", "aj", "ik", "q", "li", "it", "o", "pr", "ie", "l", "fr", "uj", "x", "jo", "oj", "u", "g", "jp", "b"], "k": ["id", "ku", "ch", "h", "sk", "ek", "kick", "d", "kh", "ko", "ka", "kn", "z", "v", "c", "ok", "y", "ck", "ak", "key", "kat", "p", "n", "ki", "K", "ik", "q", "ks", "ky", "th", "kid", "kw", "kk", "l", "ke", "x", "u", "unk", "g", "b", "work"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\nimport java.io.*;\\n\\n\\npublic class Main {\\n    static Scanner sc = new Scanner(System.in);\\n    public static void main(String args[]) {\\n        int n = sc.nextInt();\\n        int[] p = new int[n];\\n        for(int i = 0; i < n; i++) p[i] = sc.nextInt();\\n        boolean ans = false;\\n        boolean ok = true;\\n        for(int i = 0; i < n; i++) {\\n            for(int j = 0; j < n; j++) {\\n                int tmp = p[i];\\n                p[i] = p[j];\\n                p[j] = tmp;\\n                ok = true;\\n\\n\\n                for(int k = 0; k < n - 1; k++) {\\n                    if(p[k] >= p[k + 1]) {\\n                        ok = false;\\n                        break;\\n                    }\\n                }\\n                ans |= ok;\\n                p[j] = p[i];\\n                p[i] = tmp;\\n            }\\n        }\\n\\n        System.out.println(ans?\"YES\":\"NO\");\\n\\n    } \\n}", "target": "82", "substitutes": {"sc": ["sw", "enc", " scanner", "lc", "soc", " Sc", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "sem", " scr", "lib", "fc", "uc", "cr", "io", "sq", "c", "scan", "esc", "osc", "sync", "r", "spec", "out", "ec", "nc", "sch", " sp", "cc", "sec", "sh", "cus", "ctx", "sp", "acc", "src", "rc", "system", "sche", "cur", "sb", "s", "cs", "Scan", "cl", "pc", "exec", "ner", "asc", "screen", "cv", "sci"], "n": ["nn", "len", "sn", "ns", "nu", "in", "d", "no", "nl", "v", "z", "c", "m", "r", "en", "y", "network", "nc", "t", "ln", "nb", "nt", "un", "e", "ne", "dn", "f", "net", "o", "w", "s", "fn", "N", "num", "l", "x", "nan", "u", "b"], "p": ["pp", "py", "vp", "port", "api", "lp", "a", "po", "tp", "pi", "part", "d", "ip", "ps", "pe", "v", "at", "c", "m", "y", "fp", "point", "t", "pid", "np", "wp", "data", "pre", "e", "sp", "f", "pa", "bp", "q", "project", "ap", "o", "temp", "s", "up", "l", "pc", "mp", "x", "P", "u", "g", "cp", "jp", "op", "b"], "i": ["id", "inner", "api", "ri", "pi", "ij", "js", "in", "mi", "init", "jj", "ip", "ii", "ori", "ix", "v", "z", "is", "c", "io", "y", "gi", "index", "e", "qi", "f", "ji", "ik", "q", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "b", "ie", "yi", "oi", "l", "si", "bi", "info", "x", "ci", "u", "ni", "mini", "jp", "ai", "uri", "I"], "j": ["jet", "h", "ja", "J", "pi", "js", "ij", "job", "d", "jj", "ii", "z", "v", "ix", "c", "je", "y", "t", "jc", "jl", "key", "e", "f", "qi", "ji", "aj", "ik", "q", "ui", "br", "li", "it", "o", "ie", "l", "uj", "x", "jo", "u", " dj", "g", "jp", "b"], "tmp": ["slice", "py", "pp", "amp", "app", "nn", "loc", "cb", "pot", "prop", "st", "tp", "part", "offset", "jj", "ip", "array", "foo", "v", "start", "m", "txt", "t", "np", "nb", "nt", "proc", "obj", "sp", "f", "ji", "bp", "result", "stuff", "test", "pkg", "pad", "ie", "kk", "mk", "mp", "cp", "jp", "zip", "temp", "b"], "k": ["ku", "ch", "h", "sk", "ek", "kick", "d", "dk", "kh", "ka", "ko", "kn", "z", "v", "c", "m", "y", "ck", "uk", "kr", "ak", "key", "f", "ki", "ik", "K", "q", "ks", "it", "ky", "w", "kid", "kw", "kk", "l", "mk", "ke", "x", "u", "unk", "g", "b", "work"], "ans": [" scans", "can", "lines", "man", "a", "art", "sk", "ns", "lan", "ons", "ens", "cross", "anks", "amps", "an", "scan", "ars", "ork", "ana", "ck", "os", "aned", "ups", "acs", "anon", "nt", "ak", "ents", "chan", "nos", "ids", "ks", "arts", "span", "anc", "ANS", "na", "s", "eds", "cs", "oks", "ants", "works", "kin", "eps", "oc", "auto", "ops", "ann", "ms", "ant", "ar", "auth", "ins"], "ok": ["id", "enc", "error", "check", "or", "sk", "ready", "Ok", "ah", "no", "err", "ko", "md", "z", "er", "oko", "yes", "sync", "need", "ack", "ck", "kind", "clean", "fail", "ng", "ak", "lock", "good", "ik", "bug", " sync", "od", "OK", "it", "o", "hack", "kk", "oks", " good", "log", " info", " op", "oc", "valid", "auto", " need", "op", " ops"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tScanner sc = new Scanner(System.in);\\n\tint N;\\n\tint[] A;\\n\tint count=0;\\n\tint flag;\\n\tint key;\\n\t\\n\tpublic void input(){\\n\t\tN=sc.nextInt();\\n\t\tA = new int[N];\\n\t\tfor(int i=0; i<N; i++){\\n\t\t\tA[i]=sc.nextInt();\\n\t\t}\\n\t}\\n\t\\n\tpublic void bubblesort(){\\n\t\tflag=1;\\n\t\twhile(flag==1){\\n\t\t\tflag=0;\\n\t\t\tfor(int j=N-1; j>=1; j--){\\n\t\t\t\tif(A[j] < A[j-1]){\\n\t\t\t\t\tkey = A[j];\\n\t\t\t\t\tA[j] = A[j-1];\\n\t\t\t\t\tA[j-1] = key;\\n\t\t\t\t\tflag=1;\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n\t\\n\tpublic void output(){\\n\t\tSystem.out.print(A[0]);\\n\t\tfor(int i=1; i<N; i++){\\n\t\t\tSystem.out.print(\" \"+A[i]);\\n\t\t}\\n\t\tSystem.out.println(\"\\n\"+count);\\n\t}\\n\t\\n\tpublic static void main(String[] args){\\n\t\tMain obj = new Main();\\n\t\tobj.input();\\n\t\tobj.bubblesort();\\n\t\tobj.output();\\n\t}\\n}\\n", "target": "170", "substitutes": {"sc": ["sw", "sr", "ch", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "sub", "ec", "nc", "sch", "cor", "sh", "cc", "cus", "ex", "ctx", "sp", "src", "rc", "system", "anc", "sche", "coll", "s", "cs", "si", "cl", "pc", "ner", "screen", "cv", "mc", "sci"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "NM", "NL", "Max", " n", "NB", "Num", "Count", "H", "Number", "T", "B", "NI", "NE", "Y", "NT", "NS", "number", "n", "R", "L", "ND", "K", "W", "Len", "C", "O", "MN", "D", "SN", "CN", "M", "NA", "S", "Z", "X", "V", "NN", "P", "Size", "size", "I"], "A": ["As", "An", "AR", "J", "a", "F", "E", "Args", "All", "MA", "array", "The", "And", "AP", "Area", "AA", "Action", "area", "H", "Input", "Ma", "T", "Alpha", "B", "Path", "mA", "Y", "Answer", "This", "Ha", "Access", "Array", "AM", "L", "API", "BA", "O", "CA", "Ar", "NA", "D", "At", "M", "II", "C", "In", "U", "S", "Adam", "Address", "LA", "X", "V", "P", "If", "Alias", "Average", "I"], "count": ["id", "lag", "base", "counter", "file", "a", "length", "len", "part", "force", "ind", "group", "child", "type", "level", "c", "call", "start", "second", "Count", "nt", "cat", "number", "p", "n", "f", "cache", "max", "bug", "field", "code", "log", "sum", "weight", "depth", "size", "list", "b"], "flag": ["id", "lag", "file", "and", "len", "part", "offset", "in", "d", "force", "ind", "group", "child", "type", "arg", "style", "start", "call", "feature", "sync", "tag", "kind", "const", "min", "fail", "big", "wait", "cat", "fact", "p", "bit", "ret", "f", "flags", "age", "bug", "leaf", "Flag", "fun", "char", "FLAG", "sort", "field", "code", "log", "sum", "weight", "info", "status", "mask", "order", "letter", "g", "year", "sign", "b", "name"], "key": ["id", "base", "a", "part", "ind", "ask", "type", "z", "arg", "level", "v", "name", "ac", "y", "KEY", "value", "index", "k", "ak", "e", "p", "bit", "number", "f", "n", "bug", "q", "Key", "char", "next", "sign", "ie", "val", "code", "weight", "x", "size", "b", "order"], "i": ["id", "ri", "pi", "ij", "in", "mi", "ip", "ii", "ind", "z", "v", "io", "ix", "is", "y", "gi", "index", "jp", "phi", "e", "p", "n", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "it", "o", "b", "di", "ini", "eni", "ie", "l", "si", "bi", "info", "x", "ci", "ni", "u", "mini", "uri", "ai", "I"], "j": ["py", "ch", "jet", "syn", "h", "conn", "ja", "J", "a", "part", "js", "ij", "job", "jan", "d", "ah", "jj", "bj", "ii", "ind", "z", "v", "ix", "c", "jen", "je", "y", "jc", "jl", "pre", "k", "e", "dj", "p", "n", "f", "qi", "ji", "aj", "ik", "dy", "br", "li", "next", "it", "o", "ie", "adj", "code", "l", "fr", "uj", "bi", "x", "jo", "oj", " dj", "u", "jp", "g", "b"], "obj": ["object", "instance", "api", "alt", "sys", "cb", "conn", "objects", "orb", "utils", "art", "part", "js", "util", "aux", "d", "init", "node", "bj", "lib", "Obj", "abc", "plugin", "plus", "cmd", "ose", "sync", "org", "out", "pt", "t", "func", "nb", "core", "riot", "nt", "n", "ctx", "bot", "off", "elt", "tmp", "module", "o", "b", "impl", "class", "coll", "act", "code", "ff", "self", "ctrl", "eff", "x", "ext", "output", "rb", "inst"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException, NumberFormatException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString line = br.readLine();\\n\t\tif( line != null ){\\n\t\t\tString[] parts = line.split(\" \");\\n\t\t\tint lon = Integer.parseInt(parts[0]);\\n\t\t\tint sid = Integer.parseInt(parts[1]);\\n\t\t\tSystem.out.println((lon * sid) + \" \" + (lon * 2 + sid * 2));\\n\t\t}\\n\t}\\n\\n}", "target": "92", "substitutes": {"br": ["sr", "ler", "yr", "cb", "str", "bro", "Br", "bb", "err", "bf", "ber", "BR", "cr", "io", "er", "ori", "Reader", "abs", "HR", "r", "gr", "tr", "img", "rr", "hr", "obj", "arr", "mr", "result", "string", "bridge", "browser", "ref", "buf", "div", "fr", "ner", "bd", "reader", "dr", "stream", "rb", "her", "b"], "line": ["lines", "lc", "le", "file", "lf", "section", "comment", "str", "part", "page", "in", "Line", "ip", "header", "content", "url", "name", "word", "out", "point", "value", "data", "zone", "cell", "end", "result", "LINE", "string", "row", "column", "raw", "pass", "val", "code", "l", "log", "parse", "text", "block", "letter", "lin", "output", "message", "reader", "inline", "entry"], "parts": ["lines", "base", "details", "section", "str", "part", "ns", "styles", "ps", "points", "split", "params", "abs", "ars", "start", "bits", "strings", "data", "Parts", "pos", "places", "p", "pat", "join", "arts", "ands", "cells", "partial", "string", "span", "joined", "trans", "s", "pieces", "its", "cats", "ants", "parse", "patch", "words", "step", "bytes", "Part", " part"], "lon": ["id", "lag", "sin", "base", "phase", "left", "layer", "loc", "nn", "lf", "oa", "alt", "length", "len", "lan", "offset", "site", "addr", "pole", "location", "level", "area", "ld", "side", "ln", "mag", "zone", "zon", "number", "coord", "on", "off", "la", "width", "los", "mile", "lat", "lo", "log", "hi", "LA", "zi", "lin", "online"], "sid": ["id", "sin", "oa", "su", "des", "len", "lan", "sn", "site", "in", "vid", "addr", "sq", "style", "spec", "en", "sta", "stat", "side", "sat", "sec", "sit", "pid", "desc", "mag", "uid", "ds", "pos", "span", "sil", "sd", "s", "kid", "lat", "num", "si", "sl", "socket", "depth", "size", "service", "name", "sy"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int S = sc.nextInt();\\n        int[] memo = new int[1000000];\\n        calc(S, 1, memo);\\n    }\\n\\n    public static void calc(int s, int index, int[] memo) {\\n        \\n          if (s == 4 || s==2 || s==1) {\\n                System.out.println(index+3);\\n                return;\\n            }\\n       \\n\t\tint result = 0;\\n        if (s % 2 == 0){\\n            result = s/2;\\n        }        \\n        else {\\n            result = s*3 + 1;\\n        }\\n        calc(result, index+1, memo);\\n    }\\n}", "target": "166", "substitutes": {"sc": ["sw", "ch", "soc", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sub", "ec", "nc", "sch", "sec", "sh", "cc", "desc", "proc", "sp", "src", "acc", "rc", "system", "cur", "cs", "si", "cl", "pc", "ner", "ci", "asc", "sci"], "S": ["Si", "SS", "SU", "F", "SC", "Single", "H", "A", "T", "B", "OS", "NS", "R", "L", "K", "SE", "C", "ASC", "D", "SN", "M", "U", "N", "SI", "X", "V", "P", "I", "G"], "memo": ["Membo", "tempo", "ramos", "Mempo", " memos", "rampo", "memos", "ramoo", "temos", " memlo", "rammo", "memlo", "Memos", " mempo", "temo", "memorylo", " memmo", "temlo", "membo", "memoryos", "ramlo", " memoo", "Memoo", "Memo", "memorymo", "memoryo", "mempo", "rambo", "memorybo", "tembo", "memmo", "ramo", "temoo", "memoo", " membo"], "s": ["opens", "sin", "fs", "sg", "su", "a", "ns", "js", "site", "sf", "se", "d", "in", "services", "ss", "ps", "sets", "sq", "c", "is", "start", "south", "spec", "seed", "parts", "y", "m", "os", "xs", "abs", "second", "sim", "es", "states", "strings", "session", "ds", "e", "p", "n", "ses", "f", "sp", "forces", "string", "ws", "o", "w", "sb", "i", "seconds", "us", "sites", "l", "si", "sup", "info", "results", "ops", "g", "ms", "u", "ls", "size", "diff", "service", "b", "ts"], "index": ["id", "slice", "path", "j", "inner", "error", "loc", "section", "exit", "length", "offset", "scroll", "site", "page", "in", "inc", "example", "ind", "location", "xxx", "ix", "pointer", "seed", "start", "style", "Index", "position", "second", "element", "search", "input", "e", "pos", "obj", "expression", "end", "item", "active", "found", "i", "num", "si", "info", "append", "x", "loop", "success", "output", "step", "initial", "list", "name", "sy"], "result": ["sr", "id", "cmp", "instance", "error", "counter", "su", "section", "function", "length", "Result", "grade", "err", "winner", "folder", "count", "goal", "master", "default", "manager", "response", "res", "match", "value", "runner", "data", "product", "ret", "number", "obj", "alpha", "division", "entry", "ver", "include", "test", "average", "pass", "score", "sum", "info", "results", "valid", "diff", "success", "message", "size", "cup", "card", "total", "source"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        int[] array = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            array[i] = sc.nextInt();\\n        }\\n\\n        boolean[] visit = new boolean[n];\\n\\n        int current = 0;\\n        int count = 0;\\n\\n        visit[1] = true;\\n\\n        //\u30dc\u30bf\u30f3\u3092\u62bc\u3059\\n        while (true) {\\n            current = array[current] - 1;\\n            count++;\\n            if (current == 1) {\\n                System.out.println(count);\\n                return;\\n            }\\n            if (visit[current]) {\\n                System.out.println(\"-1\");\\n                return;\\n            }\\n            visit[current] = true;\\n        }\\n    }\\n\\n}", "target": "175", "substitutes": {"sc": ["ch", " Sc", "cer", "st", "Sc", " SC", "bc", "sf", "se", "SC", "scope", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "nc", "sch", "cc", "sh", "sec", "cus", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "sb", "cs", "pc", "exec", "ner", "ci", "asc", "screen", "cv", "mc", "sci"], "n": ["j", "nn", "nav", "conn", "sn", "ns", "in", "d", "no", "nl", "z", "v", "c", "m", "r", "en", "y", "network", "nc", "t", "nb", "nr", "k", "nt", "ne", "number", "p", "f", "net", "o", "w", "s", "N", "num", "l", "x", "u", "size", "b"], "array": ["instance", "object", "address", "app", "counter", "document", "section", "function", "database", "offset", "book", "area", "pair", "feature", "shape", "value", "index", "archive", "batch", "number", "arr", "Array", "integer", "map", "result", "ray", "string", "our", "image", "coll", "range", "collection", "view", "list", "sample"], "i": ["id", "slice", "inner", "j", "ri", "pi", "part", "in", "d", "mi", "ip", "ii", "ind", "z", "v", "io", "c", "ix", "m", "abi", "start", "y", "t", "gi", "index", "phi", "e", "p", "fi", "f", "qi", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "oi", "chi", "si", "bi", "hi", "info", "x", "ci", "ni", "u", "ti", "uri", "ai", "I"], "visit": ["circit", "transit", "iteritor", "seeitor", "iterit", "transitting", "circitting", "iterited", "iteribility", "visited", "circited", "circitor", "visibility", "transitor", "Visit", "visitting", "visitor", "Visited", "transited", "Visitor", "Visibility", "Visitting", "seeibility", "seeited", "seeit"], "current": ["counter", "length", "sections", "Current", "reported", "future", "this", "progress", "index", "urrent", "p", "queue", "result", "active", "next", "currently", "version", "code", "parent", "local", "first", "sequence", "initial", "list", "total"], "count": ["id", "path", "base", "error", "counter", "length", "offset", "limit", "last", "call", "start", "Count", "const", "index", "number", "age", "cache", "max", "active", "code", "info", "first", "depth", "size", "list", "state"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint road = sc.nextInt();\\n\t\tint[] floor = new int[road];\\n\t\tint[] second = new int[road];\\n\t\tfor(int i = 0; i<road; i++) {\\n\t\t\tfloor[i] = sc.nextInt();\\n\t\t\tsecond[i] = floor[i];\\n\t\t}\\n\t\tArrays.sort(floor);\\n\t\t//max\u5024\u3092\u53d6\u308a\u51fa\u3059\u3002\\n\t\tfor(int i = 0; i<floor.length; i++) {\\n\t\t\tif(second[i] == floor[road-1]) {\\n\t\t\t\t\tSystem.out.println(floor[road-2]);\\n\t\t\t}else {\\n\t\t\t\tSystem.out.println(floor[road-1]);\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "142", "substitutes": {"sc": ["sw", "isc", "enc", "lc", "soc", " Sc", "loc", "cer", "st", "Sc", " SC", "bc", "se", "SC", "sf", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "nc", "cc", "sh", "sec", "cus", "sp", "src", "rc", "system", "anc", "sche", "ca", "sb", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "cv", "sci"], "road": ["id", "distance", "path", "fold", "left", "error", "RO", "length", "line", "ro", "page", "node", "round", "ko", "many", "flower", "group", "last", "forge", "square", "area", "way", "board", "broad", "band", "dist", "core", "nr", "roads", "gro", "ode", "ne", "rid", "role", "Road", "division", "mode", "coord", "rod", "track", "off", "row", "route", "court", "low", "range", "plot", "ground", "field", "ide", "rave", "hide", "stage", "diff", "cost", "loop", "edge", "street", "order"], "floor": ["base", "left", "flo", "section", "length", "front", "offset", "free", "fore", "round", "foundation", "foo", "flower", "square", "level", "area", "broad", "spread", "future", "position", "league", "lower", "den", "factor", "minimum", "even", "number", "frame", "division", "below", "office", "zero", "two", "next", "low", "seconds", "plane", "ground", "version", "lo", "bench", "sector", "later", "done", "scale", "oor", "flat"], "second": ["left", "secret", "relation", "section", "offset", "und", "server", "secondary", "flower", "last", "member", "moon", "seed", "future", "lower", "sec", "Second", "gravity", "even", "be", "zone", "zero", "two", "next", "low", "seconds", "ground", "later", "shadow", "hide", "first", "size", "minute"], "i": ["id", "slice", "j", "lc", "ri", "h", "pi", "mu", "I", "in", "d", "mi", "init", "ii", "ip", "cli", "z", "v", "io", "c", "ix", "start", "r", "y", "t", "gi", "data", "index", "k", "uli", "e", "p", "n", "f", "qi", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "oi", "chi", "l", "si", "hi", "info", "x", "ci", "u", "ti", "uri", "fi", "ai", "b", "vi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\t\tString first = new Scanner(System.in).nextLine();\\n\t\tString Array[] = first.split(\" \");\\n\t\tint Num0 = Integer.parseInt(Array[0]);\\n\t\tint Num1 = Integer.parseInt(Array[1]);\\n\t\tSystem.out.println(Num0 * Num1);\\n\t\t\\n    }\\n}", "target": "35", "substitutes": {"first": ["then", "one", "st", "line", "str", "First", "part", "only", "empty", "array", "method", "header", "last", "default", "split", "start", "now", "second", "Second", "value", "third", "Last", "p", "prev", " FIRST", "result", "string", "next", "full", "class", "s", "primary", "rd", "l", " First", "parse", "initial"], "Array": ["Buffer", "Case", "Next", "First", "Amount", " array", "Result", "Feature", "Line", "array", "Area", "Package", "File", "Square", "Hash", "Instance", "Index", "Name", "A", "Number", "Assembly", "Code", "Empty", "Length", "Union", "Section", "Value", "string", "Entry", "Ar", "JSON", "Element", "Int", "Class", "Matrix", "X", "Vector", "Order", "Stage", "Average", "Alias", "Function"], "Num0": ["num2", " Num50", "NUM2", "num50", " Num4", "numZero", "NumZero", "num4", "NUMZero", "num1", "NUM50", "Num4", "Num50", "NUM4", "NUM1", " Num2", " NumZero", "num0", "NUM0", "Num2"], "Num1": ["NumOne", " NumId", "numPart", "Num01", "numOne", " Num01", "numId", "num1", "NUMPart", " NumOne", "NUMId", "num01", "NUM1", "NUM01", " NumPart", "NumId", "NUMOne", "NumPart"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void sort(int[] a,int i){\\n\t\tint key=a[i];\\n\t\tint j=i-1;\\n\t\twhile(j>=0 && a[j]>key){\\n\t\t\ta[j+1]=a[j];\\n\t\t\tj--;\\n\t\t}\\n\t\ta[j+1]=key;\\n\t}\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tint[] a=new int[n];\\n\t\tfor (int i=0;i<n;i++){\\n\t\t\ta[i]=sc.nextInt();\\n\t\t}\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\tsort(a,i);\\n\t\t\tfor(int k=0;k<n-1;k++){\\n\t\t\t\tSystem.out.print(a[k]+\" \");\\n\t\t\t}\\n\t\t\tSystem.out.println(a[n-1]);;\\n\t\t}\\n\t}\\n}", "target": "69", "substitutes": {"a": ["api", "app", "ba", "ab", "another", "oa", "ma", "aaa", "aa", "sa", "ata", "am", "in", "aux", "array", "an", "area", "c", "at", "ia", "ac", "y", "ana", "sta", "A", "tta", "input", "ga", "data", "ea", "p", "e", "alpha", "f", "missing", "aj", "ans", "pa", "ar", "wa", "la", "active", "va", "as", "ca", "na", "o", "working", "s", "ama", "da", "au", "qa", "ae", "auto", "u", "all", "ai", "b", "work"], "i": ["id", "api", "ri", "pi", "in", "d", "mi", "init", "ii", "ip", "ind", "z", "v", "ori", "c", "is", "m", "io", "ix", "y", "gi", "index", "phi", "e", "p", "qi", "ik", "ui", "xi", "li", "iu", "it", "o", "b", "eni", "ini", "di", "ie", "oi", "yi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "mini", "uri", "ai", "I"], "key": ["id", "h", "right", "length", "keys", "step", "ek", "no", "ind", "count", "z", "v", "default", "c", "start", "m", "y", "ee", "point", "size", "value", "index", "e", "ak", "p", "f", "ki", "ik", "q", "Key", "max", "row", "next", "o", "primary", "ax", "ie", "parent", "ke", "x", "jo", "ai", "temp", "name"], "j": ["py", "jet", "h", "ja", "J", "section", "js", "ij", "job", "d", "jj", "ii", "ind", "jam", "z", "v", "ny", "je", "c", "m", "y", "jc", "jl", "index", "e", "ne", "p", "obj", "f", "qi", "ji", "aj", "dj", "q", "br", "li", "o", "ie", "adj", "l", "uj", "note", "x", "jo", "u", "g", "jp", "b"], "sc": ["sw", "isc", "cont", "lc", "soc", " Sc", "sys", "Sc", " SC", "bc", "se", "sf", "SC", "scope", "sem", " scr", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "nc", "sch", "cc", "sec", "ctx", "sp", "dc", "src", "rc", "system", "anc", "sche", "ca", "coll", "s", "sb", "cs", "si", "cl", "pc", "ner", "ci", "screen", "cv", "sci"], "n": ["none", "nn", "h", "conn", "len", "sn", "ns", "in", "d", "init", "no", "z", "v", "c", "an", "m", "en", "y", "network", "nc", "t", "ln", "nb", "nr", "nt", "un", "e", "ne", "p", "dn", "f", "cn", "net", "pn", "na", "o", "w", "s", "N", "l", "num", "x", "nan", "ni", "u", "b", "name"], "k": ["id", "ku", "ch", "ijk", "sk", "ek", "kick", "d", "dk", "kh", "ka", "ko", "kn", "z", "v", "c", "spec", "ok", "y", "r", "ck", "uk", "gh", "kr", "ak", "kat", "p", "f", "ki", "K", "ik", "q", "ks", "it", "o", "w", "kid", "kw", "kk", "mk", "ke", "x", "block", "u", "g", "b", "work"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint a = getInt(sc);\\n\t\tint b = getInt(sc);\\n\\n\t\tString[] strs = { \"\", \"\" };\\n\\n\t\tfor (int i = 0; i < a; i++) {\\n\t\t\tstrs[0] += b;\\n\t\t}\\n\\n\t\tfor (int i = 0; i < b; i++) {\\n\t\t\tstrs[1] += a;\\n\t\t}\\n\\n\t\tArrays.sort(strs);\\n\t\tSystem.out.println(strs[0]);\\n\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9<br>\\n\t * \u5165\u529b\u3057\u305f\u914d\u5217\u306b\u5bfe\u3059\u308b\u9806\u5217\u3092\u53d6\u5f97\\n\t *\\n\t * @param numArray\\n\t * @return\\n\t */\\n\tprivate static List<Integer[]> getPermutation(int[] numArray) {\\n\t\tList<Integer[]> permutation = new ArrayList<>();\\n\t\tInteger[] ans = new Integer[numArray.length];\\n\t\tboolean[] used = new boolean[numArray.length];\\n\\n\t\treturn buildPermutaion(permutation, numArray, ans, used, 0);\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9(\u5185\u90e8)<br>\\n\t * \u5165\u529b\u3057\u305f\u914d\u5217\u306b\u5bfe\u3059\u308b\u9806\u5217\u3092\u4f5c\u6210\\n\t *\\n\t * @param list\\n\t * @param numArray\\n\t * @param ans\\n\t * @param used\\n\t * @param depth\\n\t * @return\\n\t */\\n\tprivate static List<Integer[]> buildPermutaion(List<Integer[]> list, int[] numArray, Integer[] ans, boolean[] used,\\n\t\t\tint depth) {\\n\\n\t\t// \u5168\u90e8\u4f7f\u3044\u5207\u3063\u305f\u6642=>\u3067\u304d\u305f\u9806\u5217\u3092\u8fd4\u3059\\n\t\tif (depth == numArray.length) {\\n\t\t\tlist.add(ans.clone());\\n\t\t\treturn list;\\n\t\t}\\n\t\t// \u4f7f\u3044\u5207\u3063\u3066\u3044\u306a\u3044\u5834\u5408\\n\\n\t\tfor (int i = 0; i < numArray.length; i++) {\\n\t\t\tif (used[i]) {\\n\t\t\t\tcontinue;\\n\t\t\t}\\n\t\t\tans[depth] = numArray[i];\\n\t\t\tused[i] = true;\\n\t\t\tlist = buildPermutaion(list, numArray, ans, used, depth + 1);\\n\\n\t\t\tused[i] = false;\\n\t\t}\\n\\n\t\treturn list;\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9 <br>\\n\t * \u30b9\u30ad\u30e3\u30ca\u30fc\u304b\u3089\u306e\u5165\u529b\u5024\u3092long\u3067\u8fd4\u5374\\n\t *\\n\t * @return\\n\t */\\n\tpublic static long getLong(Scanner sc) {\\n\\n\t\treturn Long.parseLong(sc.next());\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9 <br>\\n\t * \u30b9\u30ad\u30e3\u30ca\u30fc\u304b\u3089\u306e\u5165\u529b\u5024\u3092int\u3067\u8fd4\u5374\\n\t *\\n\t * @return\\n\t */\\n\tpublic static int getInt(Scanner sc) {\\n\\n\t\treturn Integer.parseInt(sc.next());\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9 <br>\\n\t * \u30b9\u30ad\u30e3\u30ca\u30fc\u304b\u3089\u306e\u5165\u529b\u5024\u3092String\u3067\u8fd4\u5374\\n\t *\\n\t * @return\\n\t */\\n\tpublic static String getString(Scanner sc) {\\n\\n\t\treturn sc.next();\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9 <br>\\n\t * \u30b9\u30ad\u30e3\u30ca\u30fc\u304b\u3089\u306e\u5165\u529b\u5024\u3092int\u914d\u5217\u3067\u8fd4\u5374\\n\t *\\n\t * @return\\n\t */\\n\tpublic static int[] getIntArray(Scanner sc) {\\n\t\tString line = \"\";\\n\t\t// \u76f4\u524d\u306bnext()\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3068\u6539\u884c\u30b3\u30fc\u30c9\u3060\u3051\u53d6\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u305d\u306e\u5bfe\u7b56\\n\t\twhile (line.equals(\"\")) {\\n\t\t\tline = sc.nextLine();\\n\t\t}\\n\\n\t\tString[] strArray = line.split(\" \");\\n\t\tint[] intArray = new int[strArray.length];\\n\t\tfor (int i = 0; i < strArray.length; i++) {\\n\t\t\tintArray[i] = Integer.parseInt(strArray[i]);\\n\t\t}\\n\t\treturn intArray;\\n\t}\\n\\n}\\n\\nclass Status {\\n\tlong x;\\n\tlong tmpCoins;\\n\\n\tpublic Status(long x, long tmpCoins) {\\n\t\tthis.x = x;\\n\t\tthis.tmpCoins = tmpCoins;\\n\t}\\n}\\n", "target": "24", "substitutes": {"sc": ["sw", "enc", "sr", "ch", "lc", "soc", " Sc", "cb", "cer", "scl", "Sc", " SC", "bc", "se", "SC", "scope", "uc", "cr", "esc", "c", "scan", "osc", "spec", "nc", "cc", "cor", "cus", "ctx", "src", "ocr", "rc", "system", "anc", "ca", "cs", "si", "cl", "pc", "ner", "ci", "asc", "cv", "mc", "sci"], "a": ["ba", "h", "ab", "fa", "aaa", "aa", "sa", "d", "am", "an", "c", "area", "m", "ac", "r", "y", "A", "ada", "ad", "e", "p", "n", "alpha", "f", "ea", "pa", "aj", "la", "va", "as", "ca", "w", "s", "asa", "l", "da", "au", "ae", "af", "u", "aka", "ai"], "b": ["wb", "j", "base", "ba", "h", "ab", "cb", "abb", "xb", "aa", "bc", "d", "bb", "bf", "v", "abc", "c", "ob", "r", "y", "db", "B", "nb", "k", "e", "be", "p", "n", "mb", "f", "bp", "eb", "bot", "binary", "o", "s", "sb", "lb", "l", "fb", "x", "bd", "u", "rb"], "strs": ["STRlines", "strls", "contracta", "charps", "Strlines", "STRps", " strb", "stra", " strlines", "strf", "chars", "strabs", " strts", "STRls", " strls", " strps", "ruptls", "STRabs", "stringlines", "STRi", " stris", "charls", "inputa", "strb", "rupta", "STRs", "strings", "stri", "stringi", "STRts", "Strls", " stri", "contractf", "rupts", " strf", "strts", "Strabs", "inputs", "STRa", "Strs", "stris", "inputis", "ruptps", "stringb", "strlines", "inputf", "STRb", " strabs", "contractis", "strps", " stra", "contracts", "charts"], "i": ["id", "j", "ri", "pi", "mu", "I", "in", "init", "ip", "ii", "z", "v", "ix", "c", "io", "abi", "gi", "index", "data", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "o", "di", "ini", "oi", "ie", "yi", "chi", "ei", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "ni", "uri", "ai"], "numArray": ["NumFile", "processMatrix", "homRow", "noarray", "dimInteger", "currentArray", " numFile", "numRow", "dimArray", " numInstance", " numMatrix", "currentInstance", "nameArray", "nameObject", " numIndex", " numarray", "nameFile", "numarray", "homarray", "homArray", "Numarray", "NumObject", "dimarray", "numInteger", "NumInstance", "NumArray", "numMatrix", " numInteger", "NumArea", "homArea", "numIndex", " numArea", "NumTime", "dimIndex", " numObject", "currentTime", "NumRow", "numInstance", "namearray", "numArea", "numFile", "currentarray", " numRow", "NumInteger", "noMatrix", "NumIndex", "noArray", "processarray", "numObject", "processArray", "numTime", " numTime"], "permutation": ["permention", " permuration", "permuration", "mention", "mututable", "mute", " permention", "muturation", "perention", "mutention", "perutation", "perute", " permutable", "permute", "mututation", "mutable", "permutable", "mutation", "mutute", " permute", "peruration"], "ans": ["can", "ani", "ats", " means", "cons", "lan", "ons", "ns", "ens", "aning", "AN", "aus", "atan", "ions", "nas", "lang", "amps", "an", "ras", "ams", "ars", "ations", "anan", "ases", "os", "urs", "aned", "acs", "es", "cas", "annels", "anon", "ents", "anti", "ids", "anc", "ANS", "ania", "anners", "na", "ians", "s", "anned", "ays", "acy", "cs", "ants", "anes", "nan", "ann", "ant", "ls", "annot", "ins"], "used": ["using", "vol", "left", "necessary", "checked", "disabled", "oved", "ed", "allowed", "owned", "other", "se", "user", "usable", "created", "failed", "powered", "seen", " unused", "locked", "supported", "based", "Used", "available", "needed", "ended", "usage", "loaded", "found", "successful", "expected", "use", "us", "uses", "shared", "users", "USE", "placed"], "list": ["base", "pool", "array", "group", "client", "default", "pair", "current", "out", "chain", "batch", "p", "queue", "map", "lock", "cache", "coll", "parent", "code", "l", "set", "all", "null", "name"], "depth": ["id", "details", "dep", " Depth", "root", "ep", "level", "seed", " deep", " root", " level", "DEP", "dir", "Depth", "dim", "deep", "max", "repeat", "stack", "levels", "debug", "ursion", " depths", "order", " recursive", "rank", "rate", "name"]}}
{"code": "\\nimport java.io.BufferedOutputStream;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.math.BigInteger;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\t\\n\tpublic static class FastReader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer st;\\n\t\\n\\n\t\tpublic FastReader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\\n\t\tString next() {\\n\t\t\twhile (st == null || !st.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (Exception r) {\\n\t\t\t\t\tr.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());//converts string to integer\\n\t\t}\\n\\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (Exception r) {\\n\t\t\t\tr.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t}\\n\t\\n\tpublic static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));\\n    public static long mod = (long) (1e9+7);\\n    public final static int MAX = (int) 90000000;\\n  // static Scanner sc = new Scanner(System.in);\\n\tpublic static void main(String[] args) {\\n\t   \\n\t FastReader sc = new FastReader();\\n\t int n = sc.nextInt();\\n\t Map<String,Integer> map = new HashMap<>();\\n\t for(int i=0;i<n;++i) {\\n\t\t char[] s = sc.next().toCharArray();\\n\t\t Arrays.sort(s);\\n\t\t String str = new String(s);\\n\t\t if(map.containsKey(str)) {\\n\t\t\t map.put(str,map.get(str)+1);\\n\t\t }else map.put(str, 1);\\n\t }\\n\t long ans = 0;\\n\t for(String s : map.keySet()) {\\n\t\t long x = map.get(s);\\n\t\t ans+=(x*(x-1))/2;\\n\t }\\n\tout.print(ans);\\n\t out.close();\\n\t\t\\n\t}\\n\t\\n}", "target": "32", "substitutes": {"br": ["ler", "ch", "ab", "cb", "str", "bro", "front", "Br", "bc", "bb", "err", "bh", "bf", "ber", "BR", "cr", "r", "db", "gr", "tr", "B", "hr", "ur", "obj", "bar", "arr", "mr", "bp", "sp", "src", "bridge", "browser", "cur", "pr", "sb", "jar", "buf", "bt", "fr", "fb", "bd", "dr", "rt", "bl", "jp", "rb", "b"], "st": ["sc", "sw", "ast", "sr", "strip", "sth", "ct", "str", "ft", "sn", "art", "se", "sa", "ust", "ut", "ace", "ss", "std", "pe", "stop", "cr", "style", "start", "stable", "r", "pt", "sta", "ld", "const", "t", "tr", "stri", "fe", "ste", "nt", "be", "sp", "src", "string", "ost", "contract", "pr", "sb", "sign", "ST", "rest", "bt", "rd", "store", "sts", "cl", "sty", "sl", "struct", "rt", "ist", "est", "bl", "inst", "St"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\t\\n\tpublic static int max(int A, int B) {\\n\t\tint ans = A;\\n\\n\t\tif (B > ans) {\\n\t\t\tans = B;\\n\t\t\tB--;\\n\t\t} else {\\n\t\t\tA--;\\n\t\t}\\n\\n\t\tif (A >= B) {\\n\t\t\tans += A;\\n\t\t} else {\\n\t\t\tans += B;\\n\t\t}\\n\t\treturn ans;\\n\t}\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint A = scanner.nextInt();\\n\t\tint B = scanner.nextInt();\\n\t\tint ans = max(A, B);\\n\t\tSystem.out.println(ans);\\n\t\tscanner.close();\\n\t}\\n}\\n", "target": "75", "substitutes": {"A": ["As", "An", "AR", "a", "F", "AY", "AN", "GA", "AB", "AP", "Ab", "Area", "AS", "AD", "AA", "IA", "H", "AST", "T", "AI", "Alpha", "App", "Y", "mA", "PA", "Na", "L", "AM", "Array", "API", "BA", "K", "C", "CA", "Ar", "Az", "NA", "Ang", "At", "M", "AH", "HA", "U", "S", "N", "Ca", "LA", "X", "AF", "P", "OA", "AU", "I", "G", "AC"], "B": ["Q", "BI", "Big", "AR", "J", "F", "BM", "E", "LB", "EB", "DB", "CB", "AB", "AP", "Ab", "Bi", "NB", "BF", "H", "SB", "UB", "MB", "T", "Bs", "TB", "Y", "BER", "BB", "R", "L", "WB", "QB", "K", "BA", "W", "BC", "C", "O", "GB", "D", "b", "M", "BS", "U", "S", "Z", "N", "OB", "V", "X", "PB", "P", "BE", "VB", "I", "G"], "ans": ["ions", "old", "ars", "aos", "ana", "aned", "ents", "ks", " spans", "na", "i", "actions", "cases", "anned", "ants", "X", "x", "ann", "ins", "As", "outs", "An", "errors", "lan", "atan", "nas", "AS", "os", "es", "Na", "span", "CA", "NA", "cs", "auto", "AU", "reads", " scans", "anas", "vals", "features", "includes", "cons", "sk", "aus", "ss", "an", "asts", "ras", "scan", "abs", "ations", "ases", "cas", "rows", "ANS", "S", "eps", "AF", "anes", "nan", "ls", "ai", "can", "lines", "aces", "ats", "a", "ons", "ns", "AN", "amps", "offs", "ids", "arts", "ca", "as", "les", "blocks", "s", "ays", "ches", "XX", "runs"], "scanner": ["anster", "scanNER", "annter", "scaner", "annner", "Scanner", "Scaninner", "scinner", "anninner", "canter", "caninner", "anser", "caner", "scheinner", "schener", "Scaner", "canning", "ansker", "Scanker", "Scanter", "scanning", "scanker", "scning", "anner", "canker", "canner", "scner", "scheer", "scer", "canNER", "ansner", "scheNER", "scaninner", "scanter", "Scanning", "ScanNER"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\nimport java.util.Scanner;\\nimport java.lang.*;\\nimport java.io.*;\\nimport java.util.*;\\nimport java.lang.Integer;\\nimport java.util.HashMap;\\n\\nclass Main\\n{\\n    // driver function to test the above functions\\n    public static void main(String args[]) throws IOException\\n    {\\n        Reader.init(System.in);\\n        String s = Reader.next();\\n        char[] arr = s.toCharArray();\\n        int ans_b=0;\\n        for (int i=0; i<3; i++){\\n            char val= arr[i];\\n            if (val=='B'){\\n                ans_b++;\\n            }\\n        }\\n\\n        if (ans_b==1 || ans_b==2){\\n            System.out.println(\"Yes\");\\n        }\\n\\n        else{\\n            System.out.println(\"No\");\\n        }\\n\\n    }\\n\\n}\\n\\nclass solu{\\n\\n}\\n\\n/** Class for buffered reading int and double values */\\nclass Reader {\\n    static BufferedReader reader;\\n    static StringTokenizer tokenizer;\\n\\n    /** call this method to initialize reader for InputStream */\\n    static void init(InputStream input) {\\n        reader = new BufferedReader(\\n                new InputStreamReader(input) );\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n\\n    /** get next word */\\n    static String next() throws IOException {\\n        while ( ! tokenizer.hasMoreTokens() ) {\\n            //TODO add check for eof if necessary\\n            tokenizer = new StringTokenizer(\\n                    reader.readLine() );\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    static int nextInt() throws IOException {\\n        return Integer.parseInt( next() );\\n    }\\n\\n    static double nextDouble() throws IOException {\\n        return Double.parseDouble( next() );\\n    }\\n}", "target": "76", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n  public static void main(String args[]){\\n    Scanner scan = new Scanner(System.in);\\n    int N = scan.nextInt();\\n    int P[] = new int[N];\\n    int countI = 1;\\n    for(int i=0; i<N; i++) {\\n    int b = scan.nextInt();\\n    P[i] = b;\\n    }\\n    int j = 1;\\n    int Min = P[0];\\n    while(j<N) {\\n    \tif(P[j]<Min) {\\n    \t\tMin = P[j];\\n    \t\tcountI++;\\n    \t}\\n    \tj++;\\n    }\\n    System.out.println(countI);\\n  }\\n}", "target": "229", "substitutes": {"scan": ["sc", "can", "sin", " scanner", "nn", "conn", "fan", "check", "bin", "query", "util", "se", "in", "err", "server", "connect", "an", "sync", "iter", "r", "out", "search", "con", "clean", "stat", "see", "ln", "gen", "chan", "cat", "san", "plan", "n", "watch", "walk", "ser", "span", "car", "na", "pan", "run", "skip", "l", "Scan", "ignore", "parse", "ner", "print", " Scan", "ann", "all", "sign", "reader", "serv"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "E", "NL", "No", " n", "NB", "Num", "H", "Node", "T", "B", "NI", "Y", "NT", "NS", "n", "R", "L", "K", "NR", "W", "Len", "O", "C", "NC", "NA", "D", "M", "Z", "S", "X", "V", "NN", "Size", "I", "G"], "P": ["PF", "Q", "FP", "J", "Py", "E", "JP", "PI", "RP", "PO", "Part", "Single", "AP", "PUT", "XP", "ARP", "DP", "A", "T", "B", "Y", "PA", "Price", "PS", "LP", "p", "R", "L", "K", "Ps", "TP", "C", "O", "CP", "M", "PIN", "U", "S", "NP", "IP", "X", "V", "Primary", "I", "PP"], "countI": ["CountI", "indexN", "CountL", "countIJ", "indexI", "sumL", "lengthL", "CountP", " countIJ", "sumi", "CountJ", "counti", " countL", "lengthN", "countN", "countJ", "countP", "indexJ", "countL", "sumI", "sumIJ", " countJ", "indexIJ", " countN", "Counti", " counti", "lengthI", " countP", "CountN", "CountIJ", "lengthP"], "i": ["id", "ri", "a", "pi", "part", "in", "mi", "init", "ii", "ip", "ind", "z", "v", "io", "ix", "ori", "y", "min", "gi", "index", "k", "phi", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "di", "ini", "ie", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "fi", "ai", "I"], "b": ["base", "ib", "h", "ab", "a", "abb", "aa", "d", "bb", "bf", "z", "v", "c", "m", "r", "y", "B", "min", "nb", "k", "e", "be", "p", "n", "f", "bs", "o", "sb", "s", "lb", "l", "bi", "x", "u", "bl", "rb"], "j": ["jet", "h", "ja", "J", "part", "ij", "js", "job", "jj", "ii", "ind", "z", "v", "c", "m", "r", "y", "min", "jc", "jl", "index", "k", "dj", "p", "n", "obj", "f", "qi", "ji", "aj", "max", "br", "li", "o", "ie", "adj", "l", "fr", "uj", "si", "x", "jo", "u", "jp", "size"], "Min": ["Mid", "Pre", "Lo", "J", "Next", "First", "Mini", "Step", "d", "Sum", " min", "Max", "Num", "m", "Start", "Count", "Index", "Width", "Minor", "Shift", "Token", "Sa", "Diff", "B", "min", "Less", "Job", "Dir", "Base", "Low", "Master", "Small", "max", "Limit", "Len", "Minimum", "M", "MIN", "Pa", "Size", "Val", "Part"]}}
{"code": "import java.nio.file.*;\\nimport java.nio.charset.*;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        int m = Integer.parseInt(s.substring(5, 7));\\n        if(m<=4){\\n            System.out.println(\"Heisei\");\\n        }else{\\n            System.out.println(\"TBD\");\\n        }\\n    }\\n}\\n", "target": "163", "substitutes": {"sc": ["sw", "enc", "ch", "lc", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "ec", "nc", "cc", "sec", "sh", "cus", "cor", "sp", "src", "cle", "rc", "anc", "ca", "cs", "si", "cl", "pc", "ner", "ci", "asc", "mc", "sci"], "s": ["opens", "h", "fs", "su", "a", "ns", "js", "rs", "sf", "in", "d", "services", "ss", "ps", "c", "is", "os", "input", "strings", "states", "qs", "ds", "e", "ses", "n", "p", "f", "ans", "string", "ws", "b", "sb", "i", "S", "l", "sl", "tests", "u", "ls", "sv", "ts"], "m": ["j", "h", "mu", "fm", "dm", "d", "mi", "md", "z", "v", "im", "c", "y", "t", "mn", "k", "dim", "e", "gm", "p", "n", "machine", "f", "month", "pm", "mm", "cm", "module", "hm", "M", "i", "bm", "l", "num", "ms", "meta", "size", "b"]}}
{"code": "// package app;\\n\\nimport java.math.BigDecimal;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport java.util.Scanner;\\nimport java.util.stream.Stream;\\n\\npublic class Main {\\n\\n    public static void main(final String[] args) throws Exception {\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        long N = sc.nextLong();\\n        long K = sc.nextLong();\\n\\n        int result = 0;\\n        for (int i = 0; i < N; i++) {\\n            long height = sc.nextLong();\\n            result += height >= K ? 1 : 0;\\n        }\\n\\n        System.out.println(result);\\n    }\\n}", "target": "145", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String []args){\\n        Scanner sc = new Scanner(System.in);\\n        int a=0;\\n        int b=0;\\n        int c=0;\\n        int d=0;\\n        int score=0;\\n        a=sc.nextInt();\\n        b=sc.nextInt();\\n        c=sc.nextInt();\\n        d=sc.nextInt();\\n\\n        if(d-a-b<=0){\\n            if(a>=d){\\n                score=d;\\n            }else {\\n                score = a*1+b*0;\\n            }\\n        }else{\\n            int temp=d;\\n            int tscore=a*1+b*0;\\n             temp=d-a-b;\\n            score=tscore+temp*-1;\\n\\n\\n\\n\\n\\n\\n\\n\\n        }\\n\\n\\n\\n\\n        System.out.print(score);\\n\\n\\n\\n    }\\n\\n}\\n", "target": "56", "substitutes": {"sc": ["sw", "cont", "ch", "console", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sf", "com", "ss", "lib", "server", "cli", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "tc", "nc", "sch", "cc", "sec", "cor", "cus", "core", "ctx", "sp", "ser", "src", "rc", "sche", "ca", "cam", "coll", "class", "sb", "cs", "pc", "parse", "ner", "ci", "asc", "cv", "mc", "sci"], "a": ["api", "ba", "ab", "h", "fa", "ma", "aa", "sa", "am", "z", "v", "an", "area", "at", "ac", "m", "ia", "y", "r", "A", "t", "ga", "ada", "ad", "e", "p", "n", "alpha", "f", "ea", "aj", "ca", "as", "va", "w", "s", "i", "l", "da", "au", "x", "ae", "af", "u", "ai", "sta"], "b": ["wb", "j", "ba", "ab", "cb", "h", "bc", "aa", "bb", "bf", "z", "v", "ub", "m", "r", "y", "db", "t", "B", "nb", "ad", "e", "p", "n", "mb", "f", "eb", "bs", "o", "w", "s", "sb", "i", "lb", "l", "bi", "fb", "x", "bd", "u", "g", "dy", "rb"], "c": ["j", "h", "cb", "cd", "count", "z", "v", "m", "ac", "r", "y", "k", "ad", "e", "cy", "p", "n", "f", "dc", "end", "C", "ca", "o", "w", "s", "i", "l", "x", "g", "u"], "d": ["id", "j", "h", "cd", "dd", "md", "z", "v", "m", "r", "y", "db", "t", "dt", "ds", "k", "ad", "e", "p", "n", "f", "df", "dc", "sd", "D", "o", "di", "w", "s", "i", "l", "dx", "da", "x", "bd", "dh", "u", "g", "dy"], "score": ["distance", "speed", "error", "definition", "Score", "cer", "length", "game", "step", "risk", "mate", "err", "grade", "price", "winner", "count", "draw", "cr", "er", "level", "start", "style", "seed", "match", "y", "est", "complete", "word", "clean", "fee", "fe", "core", "runner", "desc", "value", "cut", "key", "e", "ea", "p", "nice", "f", "dc", "cache", "result", "sd", "test", "fit", "orer", "player", "code", "si", "loss", "ate", "x", "scoring", "success", "cost", "message", "size", "done", "rank", "order"], "temp": ["base", "wrap", "dev", "offset", "pure", "empty", "Temp", "count", "wrapper", "z", "v", "level", "extra", "fake", "stable", "style", "emp", "iter", "tc", "dest", "clean", "current", "tr", "pre", "data", "cut", "p", "n", "dc", "flat", "max", "partial", "tem", "width", "tmp", "test", "w", "div", "i", "adj", "sum", "weight", "frac", "diff", "font", "mini", "null", "zip", "total", "source"], "tscore": ["TSore", " tsore", "Tspath", "tespath", "tscale", "Tscore", "tsore", "tescore", "tsscore", " tscale", "tesore", "Tskey", "tpath", "TSpath", "teskey", "tescale", "tskey", "tspath", "tesscore", "tcore", "TScore", " tspath", "TScale", "tkey", "Tsscore"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n \\npublic class Main{\\n  public static void main(String[] args) throws Exception{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint second = Integer.parseInt(br.readLine());\\n\t\tint h = second / (60 * 60);\\n                int m = second % (60 * 60) / 60;\\n                int s = second % (60 * 60) % 60;\\n                System.out.println(h + \":\" + m + \":\" + s);\\n\t}\\n}", "target": "84", "substitutes": {"br": ["sr", "ler", "ch", "yr", "cb", "orb", "str", "bro", "Br", "err", "report", "bh", " Br", "BR", "cr", "io", "er", "Reader", "r", "org", "out", "gr", "tr", "hr", "obj", "bar", "arr", "mr", "result", "ocr", "bridge", "browser", "wr", "i", "buf", "div", "lr", "fr", "ner", "reader", "dr", "stream", "bl", "rb", "b", "res"], "second": [" seconds", "small", "pixel", "left", "section", "line", "message", "page", "unit", "day", "header", "secondary", "count", "last", "moon", "now", "future", "shift", "lower", "sec", "Second", "value", "number", "zone", "cell", "zero", "string", "two", "next", "low", "seconds", "code", "fr", "lo", "si", "fourth", "sum", "time", "video", "first", "diff", "hour", "size", "service", "sample", "minute"], "h": ["id", "hh", "http", "d", "kh", "bh", "hd", "md", "ha", "header", "z", "v", "ht", "H", "y", "oh", "han", "sh", "hours", "gh", "k", "hr", "e", "p", "ih", "f", "end", "hm", "rh", "ph", "o", "hs", "w", "th", "i", "l", "hi", "x", "time", "dh", "u", "hour", "b"], "m": ["j", "man", "a", "fm", "dm", "d", "om", "md", "sm", "v", "c", "r", "y", "sh", "k", "e", "gm", "p", "n", "machine", "f", "mode", "ym", "mm", "hm", "M", "w", "i", "l", "x", "mp", "time", "ms", "g", "mom", "mc", "b", "minute"], "s": ["j", "a", "d", "ss", "sm", "z", "v", "c", "r", "en", "y", "t", "sec", "sh", "hours", "min", "e", "p", "n", "f", "sym", "sd", "o", "w", "seconds", "i", "S", "l", "si", "mins", "sl", "sv", "ms", "g", "size", "b"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\n/* Name of the class has to be \"Main\" only if the class is public. */\\npublic class Main\\n//class Ideone\\n{\\n\tpublic static void main (String[] args) throws java.lang.Exception\\n\t{\\n\t\t// your code goes here\\n\t\tBufferedReader stdReader =\\n            new BufferedReader(new InputStreamReader(System.in));\\n        String[] nums = stdReader.readLine().split(\" \");\\n        \\n        int a = Integer.parseInt(nums[0]);\\n        int b = Integer.parseInt(nums[1]);\\n        \\n        System.out.println(a*b + \" \" + 2*(a+b) );\\n\t}\\n}", "target": "92", "substitutes": {}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.BufferedWriter;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.UncheckedIOException;\\nimport java.nio.charset.Charset;\\nimport java.util.StringTokenizer;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.io.BufferedReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author mikit\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        LightScanner in = new LightScanner(inputStream);\\n        LightWriter out = new LightWriter(outputStream);\\n        CRectangleCutting solver = new CRectangleCutting();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CRectangleCutting {\\n        public void solve(int testNumber, LightScanner in, LightWriter out) {\\n            // out.setBoolLabel(LightWriter.BoolLabel.YES_NO_FIRST_UP);\\n            long w = in.longs(), h = in.longs(), x = in.longs(), y = in.longs();\\n            out.ans(w * h * 0.5, 6).ans(2 * x == w && 2 * y == h ? 1 : 0).ln();\\n        }\\n\\n    }\\n\\n    static class LightScanner {\\n        private BufferedReader reader = null;\\n        private StringTokenizer tokenizer = null;\\n\\n        public LightScanner(InputStream in) {\\n            reader = new BufferedReader(new InputStreamReader(in));\\n        }\\n\\n        public String string() {\\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new UncheckedIOException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public long longs() {\\n            return Long.parseLong(string());\\n        }\\n\\n    }\\n\\n    static class LightWriter implements AutoCloseable {\\n        private final Writer out;\\n        private boolean autoflush = false;\\n        private boolean breaked = true;\\n\\n        public LightWriter(Writer out) {\\n            this.out = out;\\n        }\\n\\n        public LightWriter(OutputStream out) {\\n            this(new BufferedWriter(new OutputStreamWriter(out, Charset.defaultCharset())));\\n        }\\n\\n        public LightWriter print(char c) {\\n            try {\\n                out.write(c);\\n                breaked = false;\\n            } catch (IOException ex) {\\n                throw new UncheckedIOException(ex);\\n            }\\n            return this;\\n        }\\n\\n        public LightWriter print(String s) {\\n            try {\\n                out.write(s, 0, s.length());\\n                breaked = false;\\n            } catch (IOException ex) {\\n                throw new UncheckedIOException(ex);\\n            }\\n            return this;\\n        }\\n\\n        public LightWriter ans(String s) {\\n            if (!breaked) {\\n                print(' ');\\n            }\\n            return print(s);\\n        }\\n\\n        public LightWriter ans(double x, int n) {\\n            if (!breaked) {\\n                print(' ');\\n            }\\n            if (x < 0) {\\n                print('-');\\n                x = -x;\\n            }\\n            x += Math.pow(10, -n) / 2;\\n            print(Long.toString((long) x)).print('.');\\n            x -= (long) x;\\n            for (int i = 0; i < n; i++) {\\n                x *= 10;\\n                print((char) ('0' + ((int) x)));\\n                x -= (int) x;\\n            }\\n            return this;\\n        }\\n\\n        public LightWriter ans(int i) {\\n            return ans(Integer.toString(i));\\n        }\\n\\n        public LightWriter ln() {\\n            print(System.lineSeparator());\\n            breaked = true;\\n            if (autoflush) {\\n                try {\\n                    out.flush();\\n                } catch (IOException ex) {\\n                    throw new UncheckedIOException(ex);\\n                }\\n            }\\n            return this;\\n        }\\n\\n        public void close() {\\n            try {\\n                out.close();\\n            } catch (IOException ex) {\\n                throw new UncheckedIOException(ex);\\n            }\\n        }\\n\\n    }\\n}\\n\\n", "target": "182", "substitutes": {"inputStream": ["InputSt", "outForm", "outputSt", " inputForm", "inputForm", "outSteam", " inputSt", " inputstream", " inputSteam", "outputstream", "outputSteam", " inputStreamer", "inputSt", "inputstream", "Inputstream", "inputSteam", "outputForm", "inputStreamer", "outStream", "InputSteam", "outStreamer", "InputStream", "outputStreamer"], "outputStream": ["OutputFile", "inputFile", "applicationStream", "inputPath", "outputstream", "outputSteam", " outputPath", "OutputStream", "outputPath", "OutputStreamer", "inputstream", "applicationStreamer", "inputSteam", "inputStreamer", "OutputSteam", "OutputPath", "outputFile", "applicationSteam", "outputStreamer", " outputSteam", "applicationstream", " outputFile", "Outputstream"], "in": ["id", "inner", "path", "sin", "login", "left", "gin", "bin", "cin", "spin", "init", "din", "inc", "err", "client", "arg", "io", "inside", "is", "url", "ac", "name", "r", "this", "read", "con", "request", "input", "min", "data", "by", "gen", "isin", "win", "on", "IN", "rin", "inn", "inf", "connection", "run", "image", "In", "ini", "i", "nin", "lo", "config", "kin", "pin", "info", "vin", "lin", "reader", "source", "ins"], "out": ["inner", "again", "external", "outside", "page", "server", "process", "client", "OUT", "password", "net", "In", "w", "nin", "i", "up", "version", "exec", "x", "output", "temp", "outs", "writing", "secret", "line", "user", "inc", "cli", "io", "this", "input", "data", "ne", "window", "target", "write", "copy", "error", "conn", "job", "at", "call", "cmd", "sync", "hard", "n", "problem", "off", "connection", "ext", "Out", "buffer", "destroy", "left", "pool", "file", "exit", "bin", "no", "err", "array", "outer", "session", "ex", "bit", "cache", "o", "image", "parent", "log", "writer", "to"], "solver": [" sorter", "solution", "tsorter", "ssolver", "ssolution", "setsorter", "ssolving", "setsensor", "tsensor", "setsolving", "setsolution", "setsolve", "Solve", "sorter", "solve", "sensor", "solving", "ssolve", "Solution", "tsolution", " solution", "Solver", "Solving", "setsolver", "tsolver", " sensor"], "testNumber": ["TestCounter", "trialNum", " testCounter", "Testnumber", "testCounter", "trialCounter", "TestNumber", "testnumber", " testnumber", "trialNumber", " testNum", "TestNum", "testNum", "trialnumber"]}}
{"code": "\\n\\nimport java.io.BufferedReader;\\nimport java.io.BufferedWriter;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStreamWriter;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    StringTokenizer tokenizer = null;\\n    int totalCases, testNum;\\n\\n    PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\\n\\n    void solve() throws IOException {\\n\\n    }\\n\\n    void execute() throws IOException {\\n        int n = ni();\\n        int k = ni();\\n        int[] arr = new int[n];\\n        for(int i = 0; i < n; i++) {\\n            arr[i] = ni();\\n        }\\n        Arrays.sort(arr);\\n        int res = 0;\\n        for (int i = 0; i < k; i++) {\\n            res += arr[i];\\n        }\\n        out.println(res);\\n        out.close();\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        new Main().execute();\\n    }\\n\\n    void debug(Object... os) {\\n        System.out.println(Arrays.deepToString(os));\\n    }\\n\\n    int ni() throws IOException {\\n        return Integer.parseInt(ns());\\n    }\\n\\n    long nl() throws IOException {\\n        return Long.parseLong(ns());\\n    }\\n\\n    double nd() throws IOException {\\n        return Double.parseDouble(ns());\\n    }\\n\\n    String ns() throws IOException {\\n        while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            tokenizer = new StringTokenizer(br.readLine());\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    String nline() throws IOException {\\n        tokenizer = null;\\n        return br.readLine();\\n    }\\n\\n    boolean input() throws IOException {\\n        return true;\\n    }\\n\\n}\\n", "target": "41", "substitutes": {"br": ["sr", "inner", "ch", "ib", "form", "orb", "or", "bro", "str", "Br", "fore", "bc", "err", "bh", "oper", "inv", "ber", "BR", "cr", "ibr", "rb", "r", "org", "db", "gr", "tr", "img", "pre", "hr", "p", "obj", "sp", "mr", "bar", "ver", "ctr", "src", "result", "bridge", "browser", "ref", "buf", "bt", "div", "lr", "fr", "handle", "ner", "dr", "bl", "reader", "b"], "tokenizer": ["okenner", "tokenize", "okenizer", "Tokenize", "tokenner", "tokener", "characterization", "Tokenizer", "okenization", " tokenization", "serialize", "recognner", "tokenizable", " tokenner", "okenize", "characterizable", "Tokener", "recogniter", " tokenizers", " tokeniter", "recogner", "serialization", "okenizers", "serializers", "characterizers", " tokenizable", "tokeniter", "tokenizers", "okener", "tokenization", "recognizer", " tokener", "Tokenner", "characterizer", "serializer", "okeniter", " tokenize", "okenizable", "recognization", "Tokenization", "Tokenizers"], "totalCases": ["totalScases", "totalCalls", "totalRase", "totalRose", "totalScalls", " totalcalls", " totalcase", "totalCase", "totalcase", " totalCase", "totalScase", "totalcases", " totalcose", "totalRases", "totalcalls", " totalCalls", "totalCose", " totalcases", "totalcose", "totalScose", " totalCose", "totalRalls"], "testNum": ["testPos", "testCount", " testnum", "testingCount", "testingnum", "testnum", "Testnum", " testCount", "testingNum", "TestCount", " testPos", "testingPos", "TestNum", "TestPos"], "out": ["inner", "again", "path", "pool", "error", "doc", "outs", "file", "conn", "line", "exit", "str", "bin", "query", "in", "ou", "err", "report", "plain", "user", "array", "init", "table", "ger", "client", "io", "call", "outer", "OUT", "name", "style", "sync", "r", "input", "data", "key", "p", "obj", "ex", "net", "lock", "cache", "result", "string", "tmp", "msg", "window", "o", "source", "w", "s", "up", "class", "parent", "code", "log", "info", "exec", "exp", "x", "print", "ext", "Out", "output", "write", "list", "temp", "writer"], "n": ["j", "nn", "conn", "ns", "in", "d", "no", "nl", "kn", "z", "v", "c", "an", "m", "not", "r", "en", "y", "ok", "nc", "mn", "nb", "nt", "ne", "p", "f", "net", "inn", "o", "w", "s", "l", "num", "N", "x", "ner", "ni", "u", "all", "b"], "k": ["j", "h", "sk", "in", "d", "kn", "z", "v", "c", "m", "ok", "y", "r", "key", "e", "p", "f", "ks", "K", "q", "o", "w", "s", "kw", "l", "N", "num", "ke", "x", "u", "b"], "arr": ["enc", "air", "vals", "yr", "app", "str", "rs", "aa", "err", "array", "rep", "adr", "ras", "ars", "avi", "r", "db", "gr", "img", "rr", "data", "hr", "obj", "arch", "p", "Array", "arm", "aj", "dat", "aur", "ray", "av", "Ar", "att", "our", "coll", "pr", "fr", "var", "au", "x", "attr", "dr", "ann", "ar", "list"], "i": ["id", "inner", "j", "ri", "pi", "mu", "I", "in", "mi", "init", "ip", "ii", "ori", "v", "ix", "io", "abi", "r", "y", "shift", "gi", "index", "phi", "key", "e", "p", "fi", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "ti", "ai", "b", "vi"], "res": ["ins", "cons", "resolution", "ons", "js", "ns", "rs", "rx", "rem", "err", "init", "ps", "rep", "ress", "ras", "response", "rus", "ros", "r", "min", "es", "rows", "re", "rez", "req", "ret", "rev", "nos", "ries", "result", "rc", "rss", "rh", "blocks", "reset", "range", "rest", "cs", "ris", "pres", "Res", "vs", "resp", "results", "RES", "rel", "ms", "Rs", "bytes"], "os": ["object", "Os", "objects", "po", "so", "cos", "ns", "js", "options", "las", "array", "ps", "io", "ob", "ose", "aos", "ros", "ok", "bos", "OS", "oS", "oss", "pos", "obj", "nos", "osi", "bot", "ot", "los", "mos", "oid", "o", "s", "oz", "ios", "otes", "obs", "dos", "ops", "ms", "op"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n        int A;\\n        for(int i=0;i<5;i++){\\n            A=sc.nextInt();\\n            if(A==0){\\n                System.out.println(i+1);\\n                return;\\n            }\\n        }\\n        \\n        \\n\t}\\n}", "target": "222", "substitutes": {"sc": ["sw", "lc", " Sc", "cer", "or", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "spec", "ec", "sub", "nc", "search", "cc", "sec", "sh", "desc", "sp", "src", "acc", "rc", "ca", "cs", "cl", "pc", "ner", "ci", "asc", "sign", "sci"], "A": ["Si", "J", "a", "F", "E", "All", "AA", "H", "T", "AI", "B", "Code", "Alpha", "Sa", "Y", "PA", "Na", "AMI", "Access", "L", "K", "API", "W", "C", "O", "CA", "NA", "D", "M", "II", "U", "S", "Int", "N", "Java", "LA", "V", "X", "P", "I", "G"], "i": ["id", "j", "api", "ri", "a", "pi", "mu", "in", "ii", "ip", "z", "v", "abi", "c", "io", "start", "t", "gi", "ski", "index", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "b", "di", "oi", "chi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "uri", "ni", "ai", "I"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n\\n    char[] tap = sc.next().toCharArray();\\n\\n    // \u8e0f\u307f\u306b\u304f\u3044\\n    char gu = 'R';\\n    char ki = 'L';\\n    for(int i = 0; i < tap.length;i++){\\n      if((i + 1) % 2 == 0){\\n        if(tap[i] == gu){\\n          System.out.println(\"No\");\\n          return;\\n        }\\n      } else {\\n        if(tap[i] == ki){\\n          System.out.println(\"No\");\\n          return;\\n        }\\n      }\\n    }\\n    System.out.println(\"Yes\");\\n  }\\n}\\n", "target": "205", "substitutes": {"sc": ["enc", "app", " Sc", "st", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "spec", "sync", "ec", "nc", "cc", "sh", "sec", "desc", "sp", "src", "acc", "rc", "system", "class", "cl", "set", "pc", "exec", "sl", "ci", "sci"], "tap": ["enc", "line", " line", "ip", "rep", "ta", " result", "bat", " cat", "ars", "cat", " rep", "capt", "arr", "cell", "cap", "row", "att", "as", "ap", "buff", " row", "xa", "raw", "buffer", " arr", "ts", "pac"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tfor (int i = 1; i > 0; i++){\\n\t\tint x = scan.nextInt(); //????????\u00a7???????????\\???\\n\t\tint y = scan.nextInt(); //????????\u00a7???????????\\???\\n\t\tif(x == 0 && y == 0){\\n\t\t\tbreak;\\n\t\t}\\n\t\tif(x > y){\\n\t\t\tSystem.out.println(y + \" \" + x);\\n\t\t} else{\\n\t\t\tSystem.out.println(x + \" \" + y);\\n\t\t}\\n\t\t}\\n\t}\\n}", "target": "72", "substitutes": {"scan": ["sc", "can", "inner", "open", " scanner", "nn", "fan", "check", "query", "se", "in", "server", "connect", "v", "an", "sync", "iter", "r", "stat", "search", "read", "con", "ln", "chan", "cat", "n", "win", "watch", "walk", "ans", "span", "system", "pan", "run", "skip", "l", "Scan", "pin", "parse", "ignore", "ner", "print", "ann", "all", "sign", "reader"], "i": ["id", "j", "base", "ri", "pi", "in", "d", "mi", "ii", "ip", "cli", "z", "v", "io", "c", "is", "y", "t", "gi", "index", "k", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "di", "ini", "si", "num", "sup", "hi", "ci", "u", "ni", "uri", "fi", "ai", "mini", "I"], "x": [" xx", "xx", "fix", "rx", "xb", "d", "xt", "xxx", "z", "ix", "v", "y", "tx", "index", "number", "xc", "ex", "p", "f", "xi", "xp", "ax", "code", "xe", "num", "X", "u", "name"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int h = sc.nextInt();\\n        int m = sc.nextInt();\\n        int time = h*60+m;\\n        double hd = 0.5*time;\\n        double md = 6.0*m;\\n\\n        double hx = Math.sin(Math.toRadians(hd)) * a;\\n        double hy = Math.cos(Math.toRadians(hd)) * a;\\n        double mx = Math.sin(Math.toRadians(md)) * b;\\n        double my = Math.cos(Math.toRadians(md)) * b;\\n\\n        double x = (hx - mx);\\n        if (x<0) {\\n            x *= -1;\\n        }\\n        double y = (hy - my);\\n        if (y<0) {\\n            y *= -1;\\n        }\\n        double ans = x*x + y*y;\\n        System.out.println(Math.sqrt(ans));\\n    }\\n}\\n", "target": "86", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "soc", " Sc", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "com", "ss", "cli", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "con", "nc", "ck", "cc", "sh", "sec", "cus", "cor", "desc", "ctx", "sp", "ser", "src", "rc", "system", "anc", "cam", "sche", "ca", "cur", "coll", "class", "sb", "cs", "l", "cl", "exp", "pc", "parse", "ner", "asc", "g", "cv", "mc", "sci"], "a": ["base", "aw", "api", "ba", "ab", "pi", "ma", "fa", "aa", "sa", "angle", "am", "d", "z", "an", "area", "c", "ac", "A", "ad", "p", "alpha", "f", "aj", "ar", "la", "wa", "ca", "as", "va", "na", "w", "i", "da", "ae", "all", "ai"], "b": ["j", "base", "ab", "aa", "sa", "d", "am", "bb", "z", "v", "an", "c", "ac", "r", "B", "ga", "nb", "k", "ad", "e", "p", "n", "mb", "f", "o", "w", "s", "i", "sb", "l", "u", "g"], "h": ["d", "bh", "z", "v", "c", "H", "t", "hours", "k", "e", "p", "n", "f", "q", "hm", "rh", "w", "s", "i", "l", "hi", "g", "u"], "m": ["j", "dm", "d", "mi", "z", "v", "c", "r", "min", "e", "p", "n", "f", "month", "mm", "hm", "cm", "o", "w", "M", "s", "i", "l", "g", "ms", "minute"], "time": ["id", "Time", "hh", "j", "d", "am", "delay", "z", "im", "v", "c", "t", "sh", "k", "p", "f", "month", "age", "q", "max", "pm", "mc", "hm", "times", "hour", "w", "date", "ime", "ms", "g", "depth", "size", "clock", "rate", "minute"], "hd": ["vd", "height", "aea", "haw", "dm", "cd", "ady", "d", "dd", "phy", "ha", "hz", "oda", "ht", "hard", "han", "ld", "gh", "dl", "dt", "hr", "ds", "wd", "dn", "gd", "xd", "dc", "hm", "rh", "sd", "hub", "hs", "uh", "adh", "dx", "hi", "da", "dh", "bd", "hid", "dr", "hp", "dy", "pd"], "md": ["mid", "amd", "ma", "dm", "cd", "d", "dd", "mi", "sm", "mond", "cmd", "ld", "mn", "sh", "mand", "mag", "ad", "ded", "mmm", "mb", "mr", "dc", "pm", "mm", "hm", "cm", "sd", "ph", "km", "nm", "mp", "bd", "metadata", "mad", "ms", "MD", "dy", "mc"], "hx": ["ghw", "Hx", "ghx", "Hz", "hpx", "hdw", "Hy", "fx", "ghy", "ghX", "hw", "fX", "hz", " hw", "hdx", " hX", "fz", "HX", "hdy", "fy", "hpy", "hpz", "hpX", "hX", "hdX"], "hy": ["py", "wx", "yr", "wy", "hea", "yx", "rx", "Hy", "mi", "bh", "phy", "gy", "hz", "ht", "icy", "han", "ay", "gh", "cy", "ih", "oy", "mr", "ym", "hm", "rh", "ky", "yer", "ph", "hs", "HY", "zy", "hi", "hu", "hp", "dy", "ham"], "mx": ["py", "px", "wx", "zx", "wy", "yx", "mu", "rx", "dm", "mie", "MX", "mi", "sem", "med", "sq", "ml", "mn", "mic", "mag", "mr", "ym", "dy", "me", "mm", "ky", "ph", "km", "ax", "mph", "mad", "ms", "yz", "mc"], "my": ["py", "ma", "mie", "mi", "am", "ady", "med", "phy", "mis", "gy", "ny", "MY", "mn", "mand", "mic", "mr", "ym", "pm", "me", "mm", "mys", "ky", "mos", "ph", "fy", "ms", "dy", "My", "mc"], "x": ["id", "one", "px", "wx", "yx", "xx", "gal", "rx", "fx", "ady", "d", "cross", "xy", "gy", "pe", "xxx", "z", "ix", "an", "area", "v", "c", "tx", "xs", "es", "value", "data", "k", "ex", "xc", "on", "xi", "xp", "ww", "ph", "w", "ax", "ey", "i", "ya", "xe", "l", "dx", "hi", "lex", "X", "ci", "xa", "dy", "xes"], "y": ["py", "j", "yt", "yr", "sys", "xx", "ady", "d", "xy", "ry", "gy", "z", "ny", "c", "yy", "icy", "year", "ay", "iny", "yo", "Y", "yd", "cy", "yn", "oy", "n", "ym", "ky", "ys", "vy", "iy", "ey", "sky", "yi", "fy", "ish", "zy", "ya", "i", "w", "yl", "hi", "yp", "hip", "asy", "dy", "ye", "sy"], "ans": ["can", "anas", "vals", "anus", "mas", "outs", "ats", "leans", "lan", "ons", "ns", "aning", "AN", "nas", "amps", "an", "ia", "ars", "ana", "ases", "os", "xs", "aned", "es", "ga", "ds", "ents", "san", "ks", "ANS", "na", "ca", "as", "gan", "ays", "cs", "ants", "eps", "anes", "nan", "ms", "ann", "ls", "ins"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    byte i1 = sc.nextByte();\\n    byte i2 = sc.nextByte();\\n    byte i3 = sc.nextByte();\\n    if(i1 + i2 + i3 > 21){\\n      System.out.println(\"bust\");\\n    }else{\\n      System.out.println(\"win\");\\n    }\\n  }\\n}", "target": "129", "substitutes": {"sc": ["sw", "sr", "cont", "enc", "console", "lc", "soc", "cer", "ct", "Sc", " SC", "bc", "sf", "se", "SC", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "cc", "core", "desc", "ctx", "sp", "acc", "rc", "anc", "sche", "ca", "cur", "coll", "class", "sb", "cs", "cl", "exp", "pc", "parse", "sl", "ci", "asc", "cv", "sci"], "i1": ["aiOne", "ci3", "i01", "ci1", "cione", " ione", " iOne", "iOne", "index3", "i16", " i16", "ciOne", "index16", "pi3", "ai3", "index01", "aione", "pi01", "ai1", "ione", "pi1", "index1", " i01", "pi16"], "i2": ["ci2", "si2", "p2", "i6", "ci02", "si4", "ui4", " i4", "gi2", "si8", "p4", "gi6", "p8", "p0", "ci4", " i0", "i02", "si0", "i4", "gi02", "i0", " i8", "ui2", "gi4", "ui02", "ci6", "ui6", "i8"], "i3": ["ciThird", "ci3", "i5", " iThird", "i6", "ui5", "di5", "alpha5", "alphaThird", "ui123", " iThree", " i5", "di6", "ci5", "iThird", "ciThree", "di3", " i123", "ui3", "iThree", "i123", " i6", "alpha3", "di123", "alphaThree", "ui6"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner scanner = new Scanner(System.in);\\n\\n    int N = scanner.nextInt();\\n    int K = scanner.nextInt();\\n    int Q = scanner.nextInt();\\n    int[] win = new int[N];\\n    for (int i = 0; i < Q; i++) win[scanner.nextInt() - 1]++;\\n    for (int i = 0; i < N; i++) {\\n      if (K - Q + win[i] > 0) System.out.println(\"Yes\");\\n      else System.out.println(\"No\");\\n    }\\n  }\\n}\\n", "target": "102", "substitutes": {"scanner": ["nerer", "scaner", "Scanner", "haner", "scanener", "planker", "nerker", "hanner", "Scanener", "Scaninner", "canlier", "planener", "canter", "hanker", " scanlier", "caninner", "hanning", "caner", " scanencer", "Scaner", "Scanker", "nerner", "Scanlier", "nerinner", "Scanter", "scanning", "scanker", "Scann", "planencer", "scann", " scann", "canker", " scanener", "canner", " scanker", "cann", "scanlier", "nerning", "canencer", "scaninner", "scanter", "Scanning", "scanencer", "planner", " scaner", "canener", " scanter"], "N": ["Ne", "IO", "J", "Ns", "F", "E", "NL", "No", "NB", "H", "T", "B", "NE", "NI", "Y", "NT", "NS", "n", "L", "W", "C", "O", "NC", "NA", "D", "M", "U", "Z", "S", "X", "NN", "V", "P", "Size", "I", "G"], "K": ["J", "F", "E", "KE", "H", "T", "KR", "B", "Win", "Y", "k", "R", "L", "q", "W", "PK", "C", "O", "D", "M", "U", "Z", "S", "X", "V", "P", "I", "G"], "Q": ["IO", "J", "F", "E", "PI", "QU", "H", "Qu", "Do", "Flow", "T", "B", "Y", "R", "n", "L", "q", "IN", "W", "C", "O", "D", "M", "U", "Z", "S", "IP", "MQ", "X", "V", "ID", "P", "Query", "I", "G"], "win": ["can", "path", "inner", "sin", "conn", "bin", "cin", "build", "init", "inc", "gui", "draw", "split", "scan", "cmd", "thin", "con", "ln", "pid", "Win", "disk", "index", "WIN", "won", "k", "wd", "p", "n", "lock", "walk", "wan", "windows", "wa", "row", "inn", "window", "widget", "run", "image", "col", "w", "intel", "weight", "ignore", "x", "block", "vin", "screen", "gen", "work"], "i": ["id", "slice", "j", "lc", "ri", "pi", "mu", "in", "mi", "init", "d", "ip", "ii", "cli", "z", "v", "io", "ix", "c", "is", "ori", "gi", "data", "index", "k", "phi", "key", "e", "p", "n", "qi", "f", "ji", "ki", "q", "ui", "xi", "li", "iu", "it", "o", "b", "di", "ini", "ie", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "ti", "fi", "ai", "uri", "I"], "nextInt": ["randomInt", " nextShort", " nextInteger", "nextId", "NextExt", " nextChar", "NextShort", " nextINT", "NextInteger", "randomShort", "currentInteger", "nextint", "NextChar", "nextLong", "currentExt", "Nextint", "currentId", "nextExt", " nextExt", "randomLong", "NextInt", "NextLong", "selectInt", " nextId", "nextInteger", "randomChar", "selectExt", "NextId", "nextINT", "currentInt", "nextShort", "selectINT", "nextChar", "currentint", "NextINT", "selectint", " nextLong", " nextint"]}}
{"code": "import java.util.*;\\nclass Main\\n{\\n  static int gcd(int a, int b) \\n    { \\n        if (a == 0) \\n            return b; \\n        return gcd(b % a, a); \\n    } \\n    static int findGCD(int arr[], int n) \\n    { \\n        int result = arr[0]; \\n        for (int i = 1; i < n; i++) \\n            result = gcd(arr[i], result); \\n  \\n        return result; \\n    } \\n  public static void main(String args[])\\n  {\\n    long sum=0;\\n    int a[]=new int [3];\\n    Scanner sc=new Scanner(System.in);\\n    int k=sc.nextInt();\\n    for(int i=1;i<=k;i++)\\n    {\\n      for(int j=1;j<=k;j++)\\n      {\\n        for(int x=1;x<=k;x++)\\n        {\\n            a[0]=i;\\n          \ta[1]=j;\\n          \ta[2]=x;\\n        \tsum+=findGCD(a,3);\\n        }\\n      }\\n    }\\n    System.out.println(sum);        \\n  }\\n}", "target": "6", "substitutes": {"a": ["app", "ba", "ab", "h", "fa", "ma", "aaa", "aa", "sa", "d", "ata", "am", "aux", "array", "ha", "z", "an", "c", "area", "at", "ac", "A", "tta", "ga", "data", "ada", "ak", "e", "p", "alpha", "f", "ea", "pa", "aj", "ava", "ar", "wa", "la", "na", "as", "ca", "va", "o", "mac", "ama", "l", "sup", "da", "au", "ae", "ad", "u", "g", "all", "auto", "ai", "sta"], "b": ["base", "ba", "ab", "h", "cb", "body", "abb", "aa", "d", "bb", "root", "bf", "z", "v", "c", "m", "abs", "r", "y", "A", "B", "value", "nb", "e", "p", "be", "f", "bug", "bs", "binary", "sb", "s", "val", "l", "bi", "fb", "success", "g", "u", "rb"], "arr": ["enc", "air", "app", "ab", "str", "aaa", " array", "aa", "err", "array", "rep", "arg", "adr", "abc", "inter", "r", "db", "gr", "img", "rr", "data", "pre", "obj", "arch", "bar", "Array", "map", "arm", "cache", "br", "ray", "dict", "Ar", "test", "att", "na", "par", "coll", "fr", "info", "parse", "frac", "attr", "arc", "dr", "order", "ann", "ar", "list", "res"], "n": ["nn", "conn", "ns", "in", "d", "no", "z", "v", "c", "an", "m", "r", "en", "y", "nc", "t", "nb", "e", "ne", "p", "f", "net", "end", "q", "o", "w", "s", "fn", "N", "l", "num", "nan", "u", "g", "all"], "result": ["id", "cmp", "answer", "object", "counter", "math", "function", "length", "comment", "page", "Result", "angle", "err", "inc", "array", "root", "default", "feature", "match", "r", "const", "true", "value", "func", "data", "ret", "number", "obj", "alpha", "df", "end", "acc", "br", "rc", "cache", "next", "dict", "test", "pass", "score", "up", "val", "num", "results", "weight", "ignore", "ner", "order", "success", "diff", "res"], "i": ["id", "api", "ri", "pi", "I", "in", "mi", "init", "ip", "ii", "ind", "z", "ix", "io", "start", "is", "v", "ori", "y", "gi", "index", "phi", "e", "p", "qi", "ji", "ki", "ik", "ui", "xi", "li", "iu", "multi", "o", "di", "ini", "oi", "ie", "yi", "si", "bi", "hi", "info", "zi", "ci", "u", "ni", "uri", "fi", "ai"], "sum": ["hash", "vol", "ash", "error", "rank", "aw", "comment", "cum", "unit", "sa", "empty", "Sum", "help", "summary", "count", "c", "ac", "match", "miss", "mass", "out", "mem", "sh", "mean", "data", "index", "ass", "key", "alpha", "cache", "acc", "max", "fat", "char", "cal", "average", "pass", "sign", "up", "div", "gram", "num", "loss", "weight", "info", "mask", "diff", "u", "all", "cost", "size", "um", "scale", "total"], "sc": ["sr", "sw", "ch", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "ss", "uc", "cr", "esc", "iss", "c", "scan", "osc", "sub", "ec", "nc", "sch", "cc", "sec", "sh", "sp", "src", "rc", "ca", "s", "cs", "si", "cl", "pc", "ner", "ci", "asc", "mc", "sci"], "k": ["id", "ku", "ch", "sk", "kick", "in", "d", "dk", "tk", "ko", "z", "v", "c", "m", "ok", "y", "ck", "key", "e", "p", "f", "ks", "K", "ik", "ki", "q", "max", "w", "s", "kid", "kw", "mk", "ke", "u", "work"], "j": ["ja", "J", "pi", "ij", "js", "d", "jj", "ii", "z", "v", "ix", "je", "m", "r", "y", "out", "t", "jc", "jl", "index", "key", "e", "p", "sp", "f", "qi", "ji", "aj", "ik", "xi", "li", "it", "o", "ax", "ie", "l", "uj", "jo", "u", "jp"], "x": ["id", "wx", "h", "xx", "rx", "ux", "d", "xy", "pe", "xxx", "z", "v", "ix", "c", "m", "r", "y", "en", "tx", "xs", "t", "index", "key", "e", "p", "ex", "f", "q", "max", "xi", "xp", "ic", "ph", "w", "ax", "l", "dx", "X", "ci", "u", "xa"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        long sum = sc.nextInt();\\n        int min = (int)sum,max = (int)sum;\\n        for(int i = 1;i < n;++i){\\n            int a = sc.nextInt();\\n            if(max < a) max = a;\\n            else if(a < min) min = a;\\n            sum += a;\\n        }\\n        System.out.printf(\"%d %d %d\\n\",min,max,sum);\\n    }\\n\\n}", "target": "21", "substitutes": {"sc": ["sw", "enc", "ch", "sr", "cont", "lc", "soc", " Sc", "cb", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "sf", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "cc", "sh", "cus", "ctx", "sp", "ser", "src", "rc", "anc", "sche", "ca", "cur", "class", "sb", "cs", "cl", "pc", "ner", "ci", "asc", "cv", "sci"], "n": ["j", "nn", "h", "conn", "ns", "d", "count", "z", "c", "m", "r", "en", "y", "nc", "t", "nb", "k", "e", "ne", "p", "f", "net", "span", "o", "w", "s", "l", "N", "num", "x", "u", "size", "b"], "sum": ["fill", "su", "length", "mu", "sa", "am", "Sum", "ss", "ask", "count", "an", "c", "spread", "plus", "ac", "sim", "miss", "norm", "shape", "sh", "mean", "index", "ass", "ad", "alpha", "zero", "cal", "na", "average", "skip", "conf", "sort", "sign", "up", "div", "si", "num", "weight", "parse", "sam", "mask", "who", "u", "cost", "size", "ize", "um", "scale", "total"], "min": ["small", "j", "base", "left", "oa", "len", "part", "ai", "Min", "step", "in", "d", "sa", "am", "limit", "an", "start", "c", "m", "area", "r", "shift", "lower", "mean", "index", "with", "pos", "p", "f", "aj", "span", "partial", "wa", "na", "skip", "sort", "s", "act", "x", "first", "mini", "size", "b", "scale"], "max": ["id", "az", "h", "wrap", "ma", "part", "step", "mod", "d", "no", "limit", "count", "Max", "last", "default", "call", "start", "c", "m", "plus", "MAX", "shape", "k", "with", "ad", "p", "alpha", "f", "end", "ca", "conf", "ax", "w", "div", "act", "da", "x", "patch", "auto", "size", "scale", "total"], "i": ["id", "j", "ami", "pi", "part", "in", "d", "ii", "ind", "z", "v", "c", "y", "t", "gi", "index", "e", "p", "f", "qi", "ui", "xi", "li", "iu", "it", "o", "b", "oi", "yi", "l", "num", "bi", "si", "hi", "x", "ci", "u", "ti", "ai", "I"], "a": ["access", "ba", "ab", "oa", "ma", "aa", "sa", "d", "am", "z", "an", "c", "area", "m", "ac", "A", "ga", "data", "index", "e", "p", "ea", "alpha", "f", "pa", "aj", "span", "la", "fac", "va", "na", "as", "ca", "s", "sup", "da", "au", "x", "qa", "auto", "u", "ai", "b", "to"]}}
{"code": "import java.util.Scanner;\\nimport java.util.ArrayList;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString n;\\n\t\tint m, h;\\n\t\tint sum = 0;\\n\t\tint wordLength = 0;\\n\t\tint count = 0;\\n\t\tArrayList<String> wordsList = new ArrayList<String>();\\n\t\tArrayList<Integer> shufflesList = new ArrayList<Integer>();\\n\t\twhile (true) {\\n\t\t\tn = sc.next();\\n\t\t\tif (n.equals(\"-\")) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\twordsList.add(n);\\n\t\t\tm = sc.nextInt();\\n\t\t\tfor (int i = 0; i < m; i++) {\\n\t\t\t\th = sc.nextInt();\\n\t\t\t\tsum += h;\\n\t\t\t}\\n\t\t\twordLength = sum % n.length();\\n\t\t\tshufflesList.add(wordLength);\\n\t\t\tsum = 0;\\n\t\t\tcount++;\\n\t\t}\\n\t\tfor (int i = 0; i < count; i++) {\\n\t\t\tchar[] array = wordsList.get(i).toCharArray();\\n\t\t\tint shuffle = shufflesList.get(i);\\n\t\t\tfor (int j = shuffle; j < array.length; j++) {\\n\t\t\t\tSystem.out.print(array[j]);\\n\t\t\t}\\n\t\t\tfor (int j = 0; j < shuffle; j++) {\\n\t\t\t\tSystem.out.print(array[j]);\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "216", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "loc", "soc", "cer", "Sc", " SC", "squ", "bc", "sf", "se", "SC", "scope", "sem", " scr", "com", "ss", "cli", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "tc", "nc", "sch", "sec", "sh", "cc", "cus", "cor", "ctx", "sp", "dc", "src", "rc", "system", "anc", "sche", "cam", "cur", "coll", "sb", "cs", "cl", "pc", "exec", "ner", "asc", "ci", "screen", "cv", "mc", "sci"], "n": ["enc", "nn", "conn", "a", "line", "sn", "ns", "nu", "in", "d", "no", "node", "kn", "v", "an", "c", "r", "y", "en", "network", "t", "ln", "non", "nr", "nb", "k", "nt", "un", "ne", "e", "p", "cn", "f", "dn", "number", "pn", "na", "o", "w", "s", "fn", "rn", "N", "l", "ner", "nan", "nw", "u", "ann", "name"], "m": ["man", "a", "mu", "dm", "in", "d", "mi", "am", "md", "sm", "z", "v", "im", "c", "r", "y", "mon", "mn", "dim", "e", "gm", "p", "f", "month", "ym", "pm", "me", "mm", "cm", "hm", "o", "M", "w", "bm", "l", "x", "u", "mini", "size", "um", "mc", "b"], "h": ["id", "hash", "hh", "ch", "d", "ah", "help", "bh", "ha", "z", "v", "c", "H", "r", "y", "oh", "mass", "sh", "k", "hr", "e", "p", "f", "q", "hm", "rh", "ph", "hs", "w", "s", "l", "hi", "x", "u", "g", "b", "work"], "sum": ["hash", "ash", "fill", "cum", "mu", "unit", "in", "ah", "am", "Sum", "help", "sm", "v", "c", "spread", "mem", "sim", "miss", "sav", "start", "norm", "mass", "ul", "min", "sh", "ho", "mean", "index", "p", "alpha", "max", "me", "mm", "av", "ph", "coll", "average", "skip", "w", "sort", "gram", "us", "use", "sign", "l", "num", "si", "weight", "loss", "u", "cost", "size", "um", "scale", "total"], "wordLength": ["wordSum", "letterSize", "WordNumber", "gramOffset", "wordNumber", "charWidth", "letterSum", "wallSize", "Wordlength", "characterWidth", "wordWidth", "WordOffset", "gramLength", "wallLength", "wordlength", "wallSum", "gramNumber", " wordWidth", "wallWidth", " wordOffset", "wordSize", " wordlength", "letterWidth", "charOffset", "characterSum", "gramlength", "WordWidth", "letterLength", "charlength", " wordNumber", "characterSize", "characterLength", "WordLength", "wordOffset", "charLength"], "count": ["id", "ch", "base", "counter", "length", "len", "part", "force", "group", "limit", "process", "child", "type", "z", "call", "c", "start", "Count", "mean", "index", "cond", "cache", "q", "found", "ph", "coll", "conf", "code", "keep", "l", "num", "info", "weight", "time", "all", "depth", "size", "list", "b", "work"], "wordsList": [" wordsLibrary", "monthsL", "wordList", "featuresArray", "featuresList", " wordslist", " wordsQueue", " wordsChain", "casesList", "wordLibrary", "caseslist", "wordsLibrary", "WordsLibrary", "workslist", "worksList", "wordsChain", " wordsArray", " wordsL", "WordsChain", "wordL", "WordsL", "WordsList", "casesQueue", "monthslist", "monthsArray", "featureslist", "wordChain", "wordsL", "featuresL", "worksL", "monthsList", "wordslist", "casesL", "wordsArray", "wordsQueue", "worksQueue"], "shufflesList": ["shufflsLibrary", "shuffleansArray", "shuffleansPool", "shufflerslist", "shufflesQueue", "shufflslist", "shUFFledPool", "shabbleslist", "shufflersList", "shUFFledArray", "shuffledL", "shUFFlesMap", "shuffledMap", "shaffleList", "shufflsQueue", "shufflesL", "shabblesL", "shufflersMap", "shufflesString", "shufflelist", "shabblesList", "shUFFlesPool", "shufflsString", "shuffledlist", "shUFFlesArray", "shuffleLibrary", "shaffleslist", "shaffleQueue", "shuffleansList", "shuffledList", "shuffleQueue", "shUFFlesList", "shufflersQueue", "shufflesMap", "shabbledlist", "shuffledArray", "shuffleslist", "shufflesLibrary", "shufflsL", "shUFFledMap", "shabbledL", "shafflelist", "shafflesLibrary", "shuffleString", "shuffledString", "shuffleList", "shabblesString", "shufflersPool", "shufflersArray", "shafflesQueue", "shufflsList", "shabbledString", "shuffleL", "shafflesList", "shufflersLibrary", "shabbledList", "shufflesArray", "shuffleansMap", "shaffleLibrary", "shufflesPool", "shuffledPool", "shUFFledList"], "i": ["id", "ri", "pi", "part", "mi", "init", "ip", "ii", "ind", "z", "v", "ix", "c", "io", "ori", "y", "gi", "index", "phi", "key", "e", "p", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "it", "multi", "di", "ini", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "fi", "ai", "mini", "I"], "array": ["instance", "air", "object", "pixel", "error", "address", "app", "answer", "section", "a", "length", "function", "vector", "database", "audio", "angle", "book", "example", "type", "v", "arrow", "area", "pair", "element", "feature", "word", "value", "escape", "data", "archive", "batch", "p", "number", "arr", "Array", "expression", "integer", "result", "ray", "string", "row", "image", "average", "range", "collection", "variable", "record", "analysis", "list", "sample"], "shuffle": ["hash", "schuffle", "hape", "schash", "shaffle", "schape", "shuff", " shaffle", "ishape", "shallow", "chipper", "chuffle", "reshuffle", "quash", "schangle", "shangle", "huffle", "reshallow", " shipper", "shape", "haffle", "ishangle", "ishuffle", "quaffle", "reshipper", " shallow", "shash", "shipper", " shuff", "ishash", "reshaffle", "quuff", "quuffle", "challow", "chaffle", " shash", "hangle", "huff"], "j": ["ch", "jet", "ja", "J", "js", "ij", "d", "err", "jj", "ii", "bj", "z", "v", "ix", "je", "jen", "io", "c", "r", "y", "out", "jit", "jl", "jc", "index", "k", "key", "e", "dj", "obj", "p", "f", "qi", "ji", "aj", "q", "dy", "br", "li", "row", "it", "o", "pr", "ie", "el", "l", "uj", "x", "jo", "oj", "g", "jp", "b"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint count = Integer.parseInt(sc.next());\\n\t\tArrayList<Integer> integers = new ArrayList<Integer>(count);\\n\t\tfor (int i = 0; i < count; i++) {\\n\t\t\tintegers.add(Integer.parseInt(sc.next()));\\n\t\t}\\n\t\tint left = 0;\\n\t\tint right = 0;\\n\t\tfor (int i = 0; i < count; i++) {\\n\t\t\tif (right <= left) {\\n\t\t\t\tint size = integers.size() - 1;\\n\t\t\t\tright += integers.get(size);\\n\t\t\t\tintegers.remove(size);\\n\t\t\t} else {\\n\t\t\t\tleft += integers.get(0);\\n\t\t\t\tintegers.remove(0);\\n\t\t\t}\\n\t\t}\\n\\n\t\tif(right>=left) {\\n\t\t\tSystem.out.println(right-left);\\n\t\t}else {\\n\t\t\tSystem.out.println(left-right);\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "2", "substitutes": {"sc": ["cont", "sw", "ch", "lc", "cer", "sk", "Sc", " SC", "squ", "bc", "se", "SC", "sf", "scope", "sem", "sa", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "search", "ec", "nc", "sch", "tc", "sec", "sh", "cc", "cus", "sp", "src", "rc", "system", "anc", "sche", "cur", "sb", "cms", "cs", "cl", "pc", "parse", "ner", "sl", "parser", "asc", "cv", "mc", "sci"], "count": ["id", "path", "ch", "base", "counter", "check", "length", "len", "part", "offset", "array", "limit", "group", "process", "child", "type", "level", "start", "c", "call", "area", "now", "Count", "current", "index", "key", "number", "n", "f", "age", "cache", "max", "cycle", "coll", "code", "num", "sum", "common", "weight", "config", "time", "order", "depth", "list", "total", "name", "work"], "integers": ["integeners", " integainers", "intters", "infERS", "integerters", "intainers", "intappers", "numrations", "Integrations", "integlers", "Integers", " Integered", "Integresses", "integainers", "intrators", " Integers", "intlers", "IntegERS", "Integters", "integrations", "countorders", "infers", "infters", "integerappers", "intERS", "integters", "inflers", "numators", "integants", "infrers", " integERS", "infresses", "inteners", "infrations", " Integrers", "infrators", " integrators", " integters", "infainers", "intrations", "integereners", "integerer", "integer", "countrers", "infered", "Integlers", "numters", "integERS", "integorders", " integrations", "integerers", "counters", "integators", " integeners", " Integorders", "infer", "integrers", "numers", "integerators", "integerresses", "intants", " integants", "integered", "inters", "inforders", "integrators", "countered", "integerrations", "integresses", "Integators", "integappers", " integappers", "Integants"], "i": ["id", "j", "ri", "h", "pi", "in", "mi", "d", "ip", "ii", "z", "v", "ix", "io", "c", "m", "start", "r", "gi", "index", "k", "phi", "e", "p", "n", "f", "qi", "q", "ui", "xi", "li", "iu", "it", "o", "b", "di", "ini", "ie", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "I"], "left": ["one", "small", "none", "le", "inner", "Left", "length", "front", "len", "offset", "in", "no", "limited", "last", "child", "down", "level", "start", "now", "plus", "bottom", "second", "current", "this", "out", "shift", "lower", "top", "min", "control", "e", "L", "after", "end", "zero", "partial", "off", "less", "two", "leave", "found", "list", "low", "full", "up", "el", "code", "l", "lo", "cl", "pl", "hide", "local", "all", "null", "wrong", "ell", "label"], "right": ["id", "close", "middle", "inner", "one", "back", "error", "small", "correct", "length", "art", "and", "ro", "rew", "only", "three", "resource", "no", "cross", "last", "child", "default", "down", "plus", "rights", "bottom", "r", "half", "current", "ack", "request", "progress", "re", "third", "with", "available", "after", "end", "max", "partial", "row", "two", "rh", "Right", "w", "ax", "rest", "before", "self", "x", "patch", "rel", "first", "success", "reverse", "wrong", "rank"], "size": ["slice", "small", "strip", "address", "loc", "grow", "rank", "ice", "length", "len", "part", "offset", "unit", "empty", "sized", "grade", "init", "group", "strength", "last", "iz", "get", "z", "c", "extra", "complete", "start", "position", "sync", "shift", "shape", "core", "index", "data", "number", "n", "age", "needed", "max", "cycle", "zero", "power", "row", "width", "large", "clear", "full", "score", "show", "ie", "code", "sum", "weight", "remove", "capacity", "Size", "depth", "ize", "scale", "SIZE", "order"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner stdIn = new Scanner(System.in);\\n    int n = stdIn.nextInt();\\n    int max = -2000000000;\\n    int min = stdIn.nextInt();\\n    for (int i = 1; i < n; i++) {\\n      int now = stdIn.nextInt();\\n      if (now - min > max) \\n        max = now - min;\\n      if (now < min)\\n        min = now;\\n    }\\n    System.out.println(max);\\n  }\\n}", "target": "208", "substitutes": {"stdIn": ["stdOut", "STDIns", "astin", " stdin", "wdin", "stdIns", "astIN", "STDIn", "astIns", "adOut", "strin", "STDIN", " stdOut", "strIn", "astIn", "wdIN", "stdin", " stdIns", "stdIN", " stdIN", "adIns", "adIN", "wdOut", "strIN", "STDOut", "wdIns", "adIn", "wdIn"], "n": ["j", "nn", "h", "conn", "ns", "in", "d", "count", "z", "c", "m", "en", "y", "network", "t", "nb", "nr", "k", "nt", "ne", "number", "p", "f", "net", "span", "q", "o", "w", "s", "nin", "N", "l", "num", "x", "u", "size", "b"], "max": ["id", "can", "none", " Max", "rank", "wrap", "right", "length", "part", "step", "mod", "d", "force", "med", "init", "no", "limit", "count", "Max", "last", "default", "prefix", "c", "start", "out", "MAX", "value", "from", "index", "k", "with", "p", "pos", "prev", "end", "q", "active", "next", "conf", "ax", "pad", "range", "rest", "parse", "x", "patch", "first", "mini", "est", "size", "list", "scale", "total", "res"], "min": ["id", "little", "small", "mid", "po", "ma", "part", "step", "Min", "only", "Mini", "in", "d", "mod", "init", "med", "delay", "limit", "last", "default", "start", "m", "current", "miss", "this", "just", "shift", "lower", "from", "mean", "pre", "minimum", "with", "pos", "p", "on", "aj", "span", "partial", "wa", "next", "na", "low", "skip", "mit", "ini", "sort", "ax", "range", "MIN", "val", "act", "mins", "x", "patch", "first", "diff", "mini", "size", "lim", "scale"], "i": ["id", "j", "ri", "pi", "part", "in", "init", "ip", "ii", "z", "v", "io", "start", "ix", "c", "y", "gi", "p", "f", "qi", "ji", "ui", "xi", "li", "multi", "o", "di", "ini", "oi", "chi", "si", "hi", "info", "x", "ci", "u", "ni", "ti", "ai", "I"], "now": ["id", "then", "cmp", "mid", "doc", "today", "always", "oa", "length", "and", "so", "here", "wh", "d", "force", "day", "last", "default", "down", "seed", "not", "future", "current", "start", "this", "Now", "progress", "wait", "once", "night", "quick", " NOW", "age", "aj", "after", "off", "wa", "mm", "next", "stuff", "currently", "ww", "low", "skip", "ow", "maybe", "parent", "since", "before", "sup", "later", "diff", "auto", "sometimes", "load", "NOW", "step", "post", "where"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint w = sc.nextInt();\\n\t\tint n = sc.nextInt();\\n\t\tint lot[] = new int[w];\\n\\n\t\tString bar;\\n\t\tString s[];\\n\t\tint a;\\n\t\tint b;\\n\t\tint save;\\n\\n\t\tfor (int i = 0; i < w; i++){\\n\t\t\tlot[i] = i + 1;\\n\t\t}\\n\\n\t\tfor (int i = 0; i < n; i++){\\n\t\t\tbar = sc.next();\\n\t\t\ts = bar.split(\",\");\\n\t\t\ta = Integer.parseInt(s[0]);\\n\t\t\tb = Integer.parseInt(s[1]);\\n\\n\t\t\tsave = lot[b-1];\\n\t\t\tlot[b-1] = lot[a-1];\\n\t\t\tlot[a-1] = save;\\n\t\t}\\n\\n\t\tfor (int i = 0; i < w; i++){\\n\t\tSystem.out.println(\"\" + lot[i]);\\n\t\t}\\n\\n\t}\\n}", "target": "156", "substitutes": {"sc": ["sw", "cont", "enc", "ch", "lc", " Sc", "cer", "st", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "cor", "cus", "ctx", "sp", "src", "rc", "system", "anc", "sche", "cur", "sb", "cs", "pc", "ner", "sl", "asc", "screen", "mc", "sci"], "w": ["fw", "sw", "tw", "wx", "h", "wy", "wh", "d", "z", "v", "c", "m", "r", "y", "t", "wed", "wp", "k", "e", "wd", "p", "ew", "win", "wn", "max", "W", "wa", "rw", "width", "ws", "window", "ww", "o", "we", "kw", "l", "wt", "weight", "x", "nw", "u", "wall", "work"], "n": ["j", "nn", "h", "in", "d", "nl", "z", "v", "c", "m", "r", "y", "en", "network", "t", "k", "e", "ne", "p", "f", "net", "o", "l", "N", "num", "x", "u"], "lot": ["tick", "id", "format", "base", "lc", "yt", "loc", "thing", "pot", "section", "po", "game", "bin", "part", "offset", "gt", "lic", "share", "lib", "limit", "lang", "quote", "last", "arg", "lit", "league", "split", "start", "spot", "boot", "just", "sett", "shot", "value", "like", "index", "slot", "nt", "trial", "hot", "bit", "pos", "queue", "p", "win", "zone", "bug", "item", "row", "project", "la", "but", "contract", "it", "col", "plot", "show", "val", "dot", "lat", "l", "log", "lo", "patch", "year", "pie", "list", "entry"], "bar": ["id", "tab", "path", "tick", "base", "bars", "api", "back", "fruit", "ab", "bag", "comment", "str", "bin", "lab", "job", "err", "array", "server", "foo", "border", "area", "txt", "league", "r", "value", "data", "far", "batch", "p", "star", "home", "bit", "bug", "grid", "br", "cart", "string", "row", "item", "car", "char", "pass", "sb", "range", "gap", "info", "var", "stage", "ar", "Bar", "gar", "name", "work"], "s": ["lines", "ins", "storage", "ips", "su", "str", "ns", "in", "d", "services", "ss", "ps", "sq", "c", "is", "aws", "south", "abs", "parts", "y", "r", "sav", "os", "es", "strings", "session", "ds", "k", "e", "ses", "p", "comments", "f", "string", "as", "blocks", "o", "sb", "its", "S", "l", "si", "info", "types", "sl", "u", "g", "ls", "shows", "items", "sv", "bars"], "a": ["ba", "ab", "ma", "part", "aa", "sa", "d", "am", "ata", "an", "c", "area", "m", "ac", "ia", "y", "A", "ad", "e", "p", "f", "alpha", "aj", "ar", "la", "wa", "next", "ca", "as", "va", "na", "o", "ama", "asa", "ya", "l", "da", "au", "ae", "u", "ai"], "b": ["j", "base", "ba", "ab", "h", "cb", "abb", "aa", "sa", "d", "bb", "bh", "z", "v", "an", "c", "m", "r", "y", "db", "B", "ga", "beta", "e", "ad", "p", "f", "be", "eb", "bot", "br", "la", "next", "ca", "bs", "va", "o", "sb", "lb", "l", "fb", "x", "bas", "u", "bl", "g", "rb"], "save": ["id", "slice", "ab", "su", "aa", "sa", "se", "ave", "book", "ss", "sq", "area", "start", "c", "an", "sav", "A", "session", "ga", "wait", "ad", "sha", "p", "alpha", "sp", "age", "end", "na", "va", "ca", "ag", "pad", "sb", "use", "sort", "space", "store", "si", "sup", "parse", "au", "qa", "stage", "u", "sign", "Save", "ase", "scale"], "i": ["id", "inner", "j", "one", "api", "ri", "pi", "mi", "init", "ip", "ii", "z", "ix", "v", "io", "start", "m", "c", "is", "ori", "y", "gi", "index", "phi", "e", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "eni", "di", "ini", "o", "ie", "oi", "yi", "chi", "si", "bi", "hi", "info", "zi", "x", "ci", "u", "ni", "hei", "fi", "ai", "ti", "g", "I"]}}
{"code": "import java.util.Scanner;\\nimport static java.lang.System.out;\\n\\nclass Range {\\n    public void run() {\\n        Scanner scan = new Scanner( System.in);\\n        int a = scan.nextInt();\\n        int b = scan.nextInt();\\n        int c = scan.nextInt();\\n        out.println( ( a < b) ? ( ( b < c) ? \"Yes\" : \"No\") : \"No\");\\n\\n    }\\n}\\n\\npublic class Main {\\n    public static void main( String... args) {\\n        Range test = new Range();\\n        test.run();\\n    }\\n}", "target": "168", "substitutes": {"scan": ["sc", "can", "sr", "slice", " scanner", "app", "nn", "look", "fan", "query", "se", "in", "err", "conv", "connect", "io", "an", "sync", "r", "out", "search", "read", "chan", "cat", "san", "n", "watch", "walk", "ans", "span", "row", "car", "na", "pan", "run", "skip", "feed", "pass", "sort", "s", "range", "keep", "Scan", "log", "ignore", "parse", "ner", "print", "ann", "sign", "rank"], "a": ["ba", "oa", "aa", "sa", "d", "am", "an", "area", "ac", "y", "A", "k", "e", "p", "n", "alpha", "f", "aj", "ca", "as", "va", "w", "s", "i", "ama", "asa", "l", "da", "x", "ae", "af", "u"], "b": ["j", "ba", "h", "ab", "cb", "ib", "bc", "aa", "d", "bb", "bf", "z", "v", "r", "y", "db", "B", "nb", "k", "e", "be", "p", "n", "f", "eb", "bs", "o", "w", "sb", "i", "lb", "s", "l", "bi", "fb", "x", "u", "g"], "c": ["cu", "cf", "lc", "h", "cb", "or", "d", "z", "v", "m", "ac", "r", "y", "nc", "cc", "k", "e", "cy", "p", "n", "f", "q", "cm", "C", "o", "col", "w", "i", "l", "x", "ci", "u"], "test": ["instance", "testing", "app", "check", "err", "rule", "array", "cross", "server", "Test", "v", "call", "live", "this", "search", "runner", "data", "trial", "ver", "result", "grid", " tests", " testing", "run", "filter", "class", "range", "rest", "show", "val", "code", "parent", "x", "tests", "train", "diff", "valid", "all", "loop", " Test"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int[] P = new int[N];\\n        for (int i = 0; i < N; i++) {\\n            P[i] = sc.nextInt();\\n        }\\n        sc.close();\\n\\n        System.out.println(OrdinaryNumber(N, P, 1));\\n    }\\n    public static int OrdinaryNumber(int N, int[] P, int index) {\\n        if (N - 1 <= index) {\\n            return 0;\\n        }\\n        if ((P[index - 1] < P[index] && P[index] < P[index + 1]) ||\\n            (P[index + 1] < P[index] && P[index] < P[index - 1])) {\\n            return 1 + OrdinaryNumber(N, P, index + 1);\\n        }\\n        return OrdinaryNumber(N, P, index + 1);\\n    }\\n}\\n", "target": "96", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "soc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "search", "sub", "nc", "sch", "cor", "sh", "sec", "cus", "ng", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "na", "sb", "cms", "cs", "cl", "pc", "ner", "parser", "asc", "screen", "cv", "reader", "mc", "sci"], "N": ["Q", "NG", "Ni", "Ne", "Ns", "F", "E", "NM", "RN", "No", "Part", " n", "NB", "Num", "Index", "H", "Count", "network", "A", "Number", "Node", "T", "CNN", "B", "NE", "NI", "Name", "Y", "NT", "Length", "Na", "Nat", "NS", "n", "R", "L", "NY", "K", "IN", "W", "Len", "O", "C", "NC", "NA", "D", "CN", "M", "U", "S", "Z", "NP", "X", "V", "NN", "Size", "I"], "P": ["PF", "Q", "F", "Py", "E", "JP", "I", "PI", "RP", "PO", "AP", "Position", "Push", "Pos", "XP", "PE", "ARP", "H", "DP", "A", "T", "Path", "B", "Y", "PA", "G", "Price", "PS", "p", "R", "L", "Power", "API", "Ps", "W", "TP", "O", "Point", "C", "D", "At", "CP", "M", "BP", "PIN", "SP", "PU", "NP", "S", "U", "IP", "X", "V", "Primary", " p", "Part", "PP", "Port"], "i": ["id", "j", "ri", "h", "pi", "part", "I", "in", "d", "mi", "ii", "ind", "ip", "v", "ix", "c", "start", "io", "r", "y", "t", "gi", "k", "e", "p", "n", "f", "qi", "end", "ui", "xi", "li", "iu", "o", "di", "w", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "ni", "uri", "ai", "b"], "index": ["inner", "axis", "page", "in", "location", "count", "start", "point", "pos", "role", "office", "argument", "dimension", "insert", "version", "num", "x", "diff", "output", "update", "list", "path", "address", "condition", "option", "inc", "draw", "type", "default", "pointer", "style", "element", "Index", "current", "match", "search", "input", "data", "key", "e", "number", "ion", "alpha", "f", "end", "width", "sort", "date", "label", "name", "original", "error", "length", "offset", "design", "level", "position", "iter", "value", "n", "connection", "IND", "view", "append", "pattern", "block", "action", "edge", "degree", "id", "slice", "none", "object", "left", "loc", "part", "site", "unit", "no", "example", "ind", "member", "shape", "expression", "module", "image", "column", "coll", "parent", "si", "info", "weight", "size", "initial"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        long h = sc.nextLong();\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        for(int i = 0 ; i < n ; i++ ){\\n            a[i] = sc.nextInt();\\n            h -= a[i];\\n        }\\n        if(h <= 0){\\n            System.out.println(\"Yes\");\\n        }else{\\n            System.out.println(\"No\");\\n        }\\n        sc.close();\\n    }\\n}", "target": "95", "substitutes": {"sc": ["sw", "cont", "enc", "ch", "lc", "soc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "ec", "tc", "nc", "sch", "con", "cc", "sh", "sec", "ctx", "sp", "dc", "src", "rc", "system", "anc", "cam", "sche", "ca", "cur", "class", "sb", "cs", "l", "cl", "pc", "asc", "parser", "g", "screen", "cv", "mc", "sci"], "h": ["id", "hh", "j", "length", "ah", "d", "bh", "hd", "ha", "z", "v", "c", "m", "H", "r", "y", "t", "sh", "gh", "k", "hr", "e", "p", "ih", "f", "alpha", "prev", "q", "hm", "rh", "ph", "o", "hs", "w", "uh", "l", "hi", "x", "u", "hp", "b"], "n": ["j", "nn", "conn", "len", "sn", "ns", "in", "d", "ii", "count", "v", "z", "c", "m", "r", "en", "y", "t", "nb", "k", "e", "ne", "p", "pos", "f", "net", "q", "o", "w", "s", "l", "N", "x", "u", "g", "ni", "size", "b"], "a": ["ba", "ab", "asha", "ma", "aa", "sa", "ata", "am", "array", "ha", "an", "area", "c", "ia", "ana", "A", "tta", "ga", "ea", "p", "pa", "alpha", "aj", "la", "wa", "ca", "as", "va", "na", "ama", "l", "da", "au", "qa", "ae", "b"], "i": ["id", "slice", "inner", "j", "ri", "pi", "mu", "part", "I", "d", "mi", "init", "ii", "ip", "z", "v", "abi", "c", "io", "m", "ix", "y", "t", "gi", "index", "data", "k", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "di", "ini", "oi", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "uri", "fi", "ai", "b", "source"]}}
{"code": "import java.util.Scanner;\\nimport java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\twhile(true) {\\n\t\t\tString first = scanner.next();\\n\t\t\tif(first.equals(\"-\")) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tint m = scanner.nextInt();\\n\t\t\tfor(int i = 0; i < m; i++) {\\n\t\t\t\tint h = scanner.nextInt();\\n\t\t\t\tfirst = first.substring(h, first.length()) + first.substring(0, h);\\n\t\t\t}\\n\t\t\tSystem.out.println(first);\\n\t\t}\\n\t}\\n}\\n", "target": "216", "substitutes": {"scanner": ["planoser", " Scanner", "scaner", "Scanner", "scanoser", " Scanener", "scanener", "kinker", "planker", "nerker", "nerher", "Scanener", "Scaninner", " scanoser", " scaninner", " scanter", "planning", "caninner", " Scaner", "caner", "kinning", "scancer", "Scaner", " scancer", "Scanker", "nerner", "kinner", " scanning", "Scanter", "scanning", "scanker", "canker", "canner", "kinoser", " scanker", "Scanher", "nerter", " scanher", "scaninner", "scanter", "scanher", "Scancer", "planner", "cancer", " scaner", "canener", " Scanker"], "first": ["then", "fifth", "one", "back", "left", "again", "single", "instance", "capital", "right", "st", "concept", "str", "front", "First", "starting", "part", "only", "best", "forward", "empty", "latest", "root", "header", "last", "master", "default", "head", "prefix", "start", "split", "now", "second", "current", "this", "upper", "lower", "top", "value", "starter", "data", "third", "key", "p", "home", "prev", "f", "alpha", "frame", "missing", "result", "string", "next", "full", "class", "primary", "th", "sum", "before", "self", "text", "initial", "leading", "name"], "m": ["j", "mu", "d", "mi", "md", "sm", "z", "v", "c", "r", "y", "t", "mn", "k", "e", "wm", "p", "n", "f", "mm", "cm", "hm", "w", "M", "l", "x", "u", "ms", "mc", "b"], "i": ["j", "ri", "pi", "mu", "mi", "init", "ii", "ip", "z", "v", "abi", "y", "gi", "p", "n", "fi", "qi", "f", "ji", "ui", "xi", "li", "multi", "b", "di", "ini", "oi", "chi", "si", "bi", "hi", "x", "ci", "u", "ti", "ni", "uri", "ai", "I"], "h": ["hh", "his", "ch", "j", "length", "d", "bh", "hd", "ha", "z", "ht", "v", "c", "head", "H", "y", "oh", "he", "gh", "sh", "index", "hr", "k", "e", "p", "n", "ih", "f", "max", "hm", "rh", "ph", "hs", "zh", "w", "th", "l", "hi", "hl", "x", "u", "hp", "b"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint d = sc.nextInt();\\n\t\tint n = sc.nextInt();\\n\t\t\\n\t\tif (d == 0) {\\n\t\t\t\\n\t\t\tSystem.out.println((n == 100) ? 101 : n);\\n\t\t\t\\n\t\t} else if (d == 1) {\\n\t\t\t\\n\t\t\tSystem.out.println((n == 100) ? 101 * 100 : n * 100);\\n\t\t\t\\n\t\t} else {\\n\t\t\t\\n\t\t\tSystem.out.println((n == 100) ? 101 * 10000 : n * 10000);\\n\t\t\t\\n\t\t}\\n\t\t\\n\t}\\n\\n}\\n", "target": "245", "substitutes": {"sc": ["sw", "ch", "lc", "soc", " Sc", "cer", "str", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "com", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "nc", "cc", "sh", "sec", "sp", "ser", "dc", "acc", "src", "rc", "sche", "cur", "class", "cs", "cl", "pc", "exec", "ner", "sl", "asc", "cv", "mc", "sci"], "d": ["id", "nd", "cd", "in", "dd", "ind", "md", "dp", "fd", "z", "c", "start", "m", "dom", "t", "depth", "dt", "dl", "ds", "dim", "p", "dn", "f", "did", "dc", "dat", "sd", "D", "o", "di", "i", "l", "dx", "da", "dh", "x", "dos", "du", "u", "dy", "b"], "n": ["j", "none", "nn", "conn", "nor", "sn", "ns", "nu", "in", "no", "nl", "v", "ny", "c", "an", "m", "en", "y", "network", "nit", "nc", "t", "mn", "non", "min", "np", "nb", "ng", "k", "nt", "cn", "ne", "number", "p", "dn", "f", "net", "pn", "inn", "na", "o", "w", "s", "i", "N", "l", "num", "x", "nan", "nw", "g", "ni", "u", " N", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner scanner = new Scanner(System.in);\\n\\n        int n, m, l;\\n\\n        n = scanner.nextInt();\\n        m = scanner.nextInt();\\n        l = scanner.nextInt();\\n\\n        int[][] a = new int[n][m];\\n        int[][] b = new int[m][l];\\n        long[][] c = new long[n][l];\\n\\n        //create A matrix\\n        for(int arow = 0; arow < n; arow++){\\n            for(int acol = 0; acol < m; acol++){\\n                a[arow][acol] = scanner.nextInt();\\n            }\\n        }\\n\\n        //create B matrix\\n        for(int brow = 0; brow < m; brow++){\\n            for(int bcol = 0; bcol < l; bcol++){\\n                b[brow][bcol] = scanner.nextInt();\\n            }\\n        }\\n\\n        for(int ccol = 0; ccol < l; ccol++){\\n            for(int arow = 0; arow < n; arow++){\\n\\n                for(int acol = 0; acol < m; acol++){\\n                    c[arow][ccol] += (long)a[arow][acol] * (long)b[acol][ccol];\\n                }\\n            }\\n        }\\n\\n\\n        for(int row = 0; row < n; row++){\\n            for(int col = 0; col < l-1; col++){\\n                System.out.print(c[row][col] + \" \");\\n            }\\n            System.out.println(c[row][l-1]);\\n        }\\n\\n        scanner.close();\\n    }\\n}\\n\\n", "target": "204", "substitutes": {"scanner": ["Scanoser", "canler", "Scanstarter", "nerer", "scaner", "Scanner", "aner", "scanoser", "queryoser", "queryner", " scanler", "queryer", " scanoser", " scanstarter", "canter", "anter", "caner", "Scaner", "canning", "Scanker", "nerner", "scanler", "Scanter", "scanning", "scanker", "anner", "canker", "canner", "querystarter", "nerter", "nerning", "scanter", "Scanning", "anker", "Scanler", " scaner", "scanstarter", " scanter"], "n": ["j", "nn", "nu", "ns", "sn", "in", "d", "no", "z", "v", "an", "r", "en", "y", "nc", "t", "ln", "nb", "k", "nt", "un", "e", "ne", "p", "cn", "f", "net", "inn", "na", "o", "w", "s", "i", "N", "x", "u", "ni", "ann"], "m": ["j", "man", "h", "mu", "dm", "in", "d", "mi", "md", "z", "v", "an", "im", "r", "y", "t", "mn", "k", "e", "p", "f", "q", "mm", "cm", "hm", "o", "M", "w", "s", "i", "x", "u", "mo", "mini", "g", "all", "mc"], "l": ["j", "lc", "loc", "lp", "lf", "kl", "al", "d", "nl", "z", "v", "ml", "y", "ol", "t", "ln", "ul", "dl", "il", "k", "e", "p", "L", "f", "la", "li", "o", "w", "i", "el", "cl", "pl", "x", "sl", "u", "lin", "all", "ls", "ll", "fl"], "a": ["ba", "ab", "ai", "aa", "sa", "am", "ac", "y", "A", "ad", "p", "alpha", "f", "la", "ca", "va", "o", "s", "i", "da", "x", "ae", "u", "ar"], "b": ["j", "ba", "ab", "d", "bb", "bf", "v", "r", "y", "B", "nb", "e", "p", "mb", "f", "eb", "bs", "o", "lb", "i", "bi", "u", "g"], "c": ["lc", "h", "d", "z", "v", "cr", "ac", "r", "y", "ec", "t", "cc", "e", "p", "f", "dc", "ca", "C", "o", "w", "i", "ci", "g", "u"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static final int MOD = 1_000_000_007;\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int N = sc.nextInt();\\n        int M = sc.nextInt();\\n        int[] a = new int[M];\\n        for (int i = 0; i < M; i++) {\\n            a[i] = sc.nextInt();\\n        }\\n\\n        System.out.println(solve(N, M, a));\\n    }\\n\\n    public static int solve(int N, int M, int[] a) {\\n        if (N == 1) return 1;\\n\\n        int[] nlist = new int[N + 1];\\n        int aidx = 0;\\n\\n        nlist[0] = 1;\\n        if (M != 0 && a[0] == 1) {\\n            nlist[1] = 0;\\n            aidx = 1;\\n        } else {\\n            nlist[1] = 1;\\n        }\\n\\n        for (int i = 2; i <= N; i++) {\\n            if (aidx < M && a[aidx] == i) {\\n                nlist[i] = 0;\\n                aidx++;\\n            } else {\\n                nlist[i] = (nlist[i - 1] + nlist[i - 2]) % MOD;\\n            }\\n        }\\n\\n        return nlist[N];\\n    }\\n}", "target": "174", "substitutes": {"MOD": ["OD", "FD", "mod", "PI", "MA", "AD", "Mult", "OM", "OR", "MAX", "LM", "T", "Length", "R", "mode", "RM", "K", "MM", "PAR", "ARM", "C", "mult", "module", "D", "MIN", "MAC", "VERSION", "Mods", "MODE", "NUM", "MT", "X", "ID", "RC", "P", "Mod", "Module", "MD", "LOD", "SIZE"], "sc": ["sw", "sr", "cont", "ch", "lc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "sf", "SC", "scope", "sem", "sa", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "cor", "sh", "cus", "sp", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "cl", "pc", "ner", "ci", "asc", "cv", "mc", "sci"], "N": ["Mo", "NG", "Q", "Ni", "Ne", "J", "Ns", "NO", "Net", "F", "E", "NM", "RN", "No", " n", "Num", "H", "A", "Node", "T", "CNN", "B", "NI", "Y", "NT", "NS", "n", "R", "L", "K", "W", "Len", "NC", "C", "O", "MN", "D", "SN", "CN", "KN", "NA", "U", "S", "Z", "X", "V", "NN", "P", " Ne", "MD", "Size", "GN", "I", "G"], "M": ["MC", "JM", "Q", "CL", "Mo", "MH", "DM", "MF", "J", "F", "E", "NM", "MX", "MA", "Mi", "Man", "m", "OM", "H", "Mac", "LM", "Ma", "A", "MB", "T", "B", "Y", "n", "R", "L", "AM", "CM", "K", "MO", "MM", "W", "C", "O", "MU", "MN", "D", "U", "S", "Z", "MAC", "Ms", "MT", "X", "V", "P", "MS", "MD", "MI", "I", "G"], "a": ["aw", "man", "access", "api", "ba", "ab", "ma", "ai", "aaa", "aa", "sa", "ata", "am", "aux", "ao", "array", "an", "area", "at", "m", "ia", "ac", "c", "ana", "A", "tta", "ga", "mA", "ad", "ea", "p", "n", "pa", "ava", "alpha", "e", "aj", "f", "span", "la", "ca", "as", "va", "na", "o", "s", "ama", "asa", "da", "au", "x", "ae", "u", "ar", "b", "sta"], "i": ["id", "slice", "inner", "j", "api", "ri", "lc", "pi", "mu", "ij", "my", "in", "mi", "init", "ip", "ii", "cli", "z", "v", "ix", "io", "abi", "m", "start", "y", "min", "gi", "index", "adi", "phi", "e", "p", "n", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "multi", "o", "eni", "di", "ini", "b", "oi", "ie", "yi", "chi", "si", "bi", "hi", "info", "sup", "x", "zi", "ci", "auto", "u", "ni", "ti", "fi", "ai", "uri", "mini", "temp", "I", "vi"], "nlist": ["nlisted", "npart", "enarray", "neint", "wlists", "ynint", "netjoin", "nstring", " npart", " nstring", "ust", "minint", "iset", "llisted", "mset", "ilist", " nmatch", "ncase", "flisted", "lList", "cnload", "ynpart", "minlisted", " ncase", "ist", "enlist", " nst", " nset", "minset", "enint", "icase", "larray", "nlists", "wList", "narray", "ynjoin", "nload", "yndata", "fdiff", " njoin", " nblock", "mdiff", "njoin", "mdata", "mblock", "umatch", "ldiff", "nmatch", "ucase", "ynlisted", " nList", " nview", "ynview", " nlisted", "nedata", "netview", "cnlist", "llists", "cnpart", "netList", "nelisted", "neset", "nediff", "enlisted", "nblock", " ndata", "ynstring", "llist", "enlists", "idata", "ndiff", "enset", "mlist", "iblock", "minlist", "ynList", "netlist", "ndata", "nview", "nint", "flist", "nset", "ynload", " ndiff", "cnstring", "imatch", "nList", "wlist", "ynlist", "nelist", "fList", " nload", "warray", "ulist", "nst", "nearray", "enList", "marray", " narray", " nint"], "aidx": ["aedx", "idx", "edy", "aedz", " aidm", "aidax", "aidxi", "aidc", "adx", "aedax", " aidz", "aidex", "aedp", "azc", "afx", "aedxi", "adax", "aedi", "ayc", "azxi", "aidy", "adw", "aidxx", "aidw", "aidi", "ayx", "edx", "edz", "aedc", "adm", "ayxi", "adi", "aedX", "afz", "idy", "afX", "aedy", "afm", " aidax", "aidz", "idex", "adxx", "afxx", "aedex", " aidi", "adz", "azp", "idz", " aidxx", "aidp", "aidX", "ayp", "azx", "aidm", "adX", "afw", "aedw", "edex"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    final Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    private void run() {\\n        long a = sc.nextLong();\\n        long b = sc.nextLong();\\n\\n        System.out.println(a * b / gcd(a, b));\\n    }\\n\\n    private long gcd(long m, long n) {\\n        long r;\\n        while (n > 0) {\\n            r = m % n;\\n            m = n;\\n            n = r;\\n        }\\n        return m;\\n    }\\n}\\n\\n", "target": "67", "substitutes": {"sc": ["ch", "console", "lc", "soc", " Sc", "cb", "or", "Sc", " SC", "bc", "se", "SC", "scope", "lib", "server", "uc", "esc", "sq", "c", "scan", "osc", "sync", "this", "nc", "cc", "sec", "ctx", "sp", "src", "rc", "system", "anc", "sb", "cs", "si", "self", "pc", "exec", "ner", "parse", "parser", "ci", "g", "asc", "screen", "cv", "config", "sci"], "a": ["ba", "ab", "ma", "aaa", "aa", "sa", "d", "am", "an", "area", "c", "ac", "y", "A", "ga", "ad", "ea", "p", "alpha", "f", "aj", "la", "ca", "as", "va", "l", "da", "au", "x", "ae", "ai"], "b": ["wb", "j", "ib", "ab", "ba", "body", "abb", "aa", "d", "bb", "pb", "bf", "z", "v", "c", "y", "db", "B", "nb", "e", "be", "p", "mb", "f", "eb", "bs", "sb", "s", "i", "lb", "l", "bi", "fb", "x", "bd", "g", "bl", "rb"], "m": ["mid", "h", "ma", "dm", "d", "mi", "am", "md", "v", "an", "c", "y", "t", "mn", "e", "p", "mr", "f", "ym", "mm", "cm", "o", "M", "s", "i", "bm", "l", "nm", "x", "rm", "g", "u", "ms", "um"], "n": ["j", "nn", "h", "nor", "nu", "ns", "sn", "in", "d", "no", "am", "v", "z", "c", "an", "y", "en", "nc", "t", "mn", "nr", "nb", "k", "nt", "e", "number", "p", "f", "na", "o", "w", "s", "i", "rn", "N", "l", "x", "g", "u"], "r": ["sr", "h", "right", "or", "rs", "d", "no", "err", "v", "an", "c", "er", "t", "rar", "rr", "kr", "re", "nr", "e", "p", "R", "mr", "f", "rl", "rw", "rh", "o", "pr", "w", "range", "i", "rd", "lr", "l", "rn", "dr", "g", "u", "rt", "ar", "rb", "rf", "rg"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\\n\t\tdouble debt = 100000;\\n\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\tdebt *= 1.05;\\n\t\t\t// ?????????????????\u00a7????????\u00b4??????????????????\\n\t\t\tif((long)debt % 1000 != 0) {\\n\t\t\t\tdebt /= 1000;\\n\t\t\t\tdebt = Math.ceil(debt);\\n\t\t\t\tdebt *= 1000;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println((long)debt);\\n\t}\\n}", "target": "173", "substitutes": {"sc": ["sw", "ch", "soc", " Sc", "cb", "st", "Sc", " SC", "bc", "sf", "se", "SC", "scope", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "sub", "nc", "cc", "sh", "sec", "proc", "sp", "acc", "ocr", "src", "rc", "cs", "cl", "pc", "exec", "ner", "ci", "sci"], "n": ["j", "nn", "h", "conn", "len", "sn", "ns", "d", "nl", "z", "c", "m", "network", "nc", "t", "ln", "mn", "nb", "k", "ne", "number", "p", "f", "net", "q", "o", "w", "s", "fn", "N", "num", "l", "nm", "nw", "u", "size", "b"], "debt": ["webit", "indit", " debc", "Debit", " debtt", "Debt", "debit", "Debtt", "indc", "debtt", "debdt", "Debdt", "Debc", "indT", " debdt", "DebT", "debc", " debit", "webt", " debT", "webdt", "debT", "indt", "webtt"], "i": ["id", "uni", "inner", "j", "ri", "pi", "in", "d", "init", "mi", "ip", "ii", "v", "abi", "io", "ix", "m", "min", "gi", "index", "adi", "uli", "e", "fi", "f", "qi", "ji", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "oi", "chi", "si", "bi", "info", "x", "ci", "ni", "u", "ti", "mini", "ai", "uri", "I", "name"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder(in.next());\\n\t\tint ans = 0;\\n\t\tfor (int i = 0; i < sb.length() - 1; i++) {\\n\t\t\tif (sb.charAt(i) == sb.charAt(i + 1)) {\\n\t\t\t\tsb.replace(i + 1, i + 2, sb.charAt(i) == '0' ? \"1\" : \"0\");\\n\t\t\t\tans++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t\tin.close();\\n\t}\\n}", "target": "146", "substitutes": {"in": ["id", "token", "inner", "login", "sin", "again", "gin", "line", "str", "bin", "resource", "init", "bb", "inc", "din", "err", "arg", "c", "is", "inside", "r", "en", "out", "iter", "db", "con", "input", "ln", "data", "isin", "n", "ssl", "src", "IN", "rin", "inn", "as", "binary", "connection", "In", "ini", "s", "fin", "nin", "log", "kin", "pin", "exec", "x", "parser", "diff", "lin", "reader", "buffer", "b", "source", "ins"], "sb": ["wb", "obb", "storage", "ib", "ab", "cb", "sg", "su", "bg", "zb", "sk", "abb", "lab", "bc", "sf", "sa", "xb", "bb", "bh", "shell", "pb", "bf", "sm", "sound", "gb", "split", "ob", "ub", "now", "SB", "stab", "db", "sh", "nb", "BB", "mb", "bp", "eb", "src", "kb", "ws", "bs", "s", "bm", "lb", "bt", "si", "bi", "fb", " SB", "sv", "ls", "rb", "b", "sci"], "ans": [" scans", "lines", "aces", "outs", "ats", "a", "cons", "errors", "lan", "sk", "ns", "ens", "AN", "ons", "runs", "rs", "aus", "ions", "amps", "an", "asts", "ars", "ros", "ations", "parts", "aos", "os", "aned", "ln", "es", "cas", "ents", "ds", "ks", " spans", "span", "anc", "ANS", "na", "as", "s", "ays", "cases", "cs", "ants", "eps", "x", "ops", "ann", "ls", "ai", "ins"], "i": ["id", "slice", "j", "ri", "h", "pi", "I", "d", "ii", "ip", "ori", "v", "ix", "c", "is", "io", "z", "abi", "t", "gi", "index", "data", "k", "e", "p", "n", "anti", "f", "qi", "ji", "fi", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "pass", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "ti", "ai", "b", "vi"]}}
{"code": "\\nimport java.util.Scanner;\\npublic class Main {\\n   \\n    public static void main(String[] args) { \\n\t\tScanner sc = new Scanner(System.in);\\nint X=sc.nextInt();\\nint Y=sc.nextInt();\\nint Z=sc.nextInt();\\n        System.out.printf(\"%d %d %d\",Z,X,Y);\\n\\n    } \\n}", "target": "149", "substitutes": {"sc": ["sw", "enc", "cont", "ch", "lc", "app", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "cc", "sh", "sec", "cus", "desc", "sp", "acc", "rc", "sche", "cur", "coll", "class", "sb", "cs", "cl", "pc", "text", "sl", "ci", "asc", "cv", "sci"], "X": ["Q", "CL", "J", "F", "E", "Position", "XY", "XP", "Offset", "YY", "H", "A", "DX", "TX", "Length", "XL", "L", "FF", "K", "W", "C", "D", "EL", "M", "Int", "U", "N", "Layer", "IP", "x", "V", "P", "Size", "Cell", "IX", "XX", "I"], "Y": ["Q", "J", "F", "E", "Py", "Level", "Height", "XY", "Offset", "YY", "H", "y", "MY", "A", "T", "Zip", "L", "NY", "K", "W", "O", "Type", "Cy", "D", "Zone", "N", "V", "P", "Size", "My", "XX", "I", "G"], "Z": ["Time", "Q", "SS", "INT", "Level", "Field", "ZX", "ZA", "AZ", "SL", "z", "Offset", "YY", "OUT", "Index", "H", "Count", "A", "Number", "T", "OS", "Zip", "Depth", "L", "FF", "Zero", "O", "Az", "D", "CC", "FL", "M", "ZI", "ZZ", "Zone", "IP", "V", "ID", "Size", "ZE"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        Integer[] L = new Integer[n];\\n\\n        for (int i = 0; i < L.length; i++) {\\n            L[i] = sc.nextInt();\\n        }\\n        Arrays.sort(L, Collections.reverseOrder());\\n\\n        int sum = 0;\\n        for (int i = 1; i < L.length; i++) {\\n            sum += L[i];\\n        }\\n        if(L[0] < sum)  System.out.println(\"Yes\");\\n        else System.out.println(\"No\");\\n        \\n    }\\n}", "target": "25", "substitutes": {"sc": ["sw", "enc", "cont", "ch", "lc", "loc", " Sc", "cer", "st", "or", "Sc", " SC", "bc", "se", "SC", "sem", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "nc", "sch", "cor", "sh", "sec", "cus", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "cl", "set", "pc", "exec", "ner", "ci", "cv", "sci"], "n": ["j", "nn", "conn", "Ns", "nor", "len", "ns", "in", "d", "no", "init", "count", "z", "c", "not", "m", "en", "y", "nc", "t", "nb", "k", "nt", "e", "ne", "p", "f", "na", "o", "w", "s", "N", "num", "l", "x", "ni", "u", "all", "b"], "L": ["CL", "Lo", "LT", "LS", "LL", "Lu", "BL", "E", "LE", "LB", "LD", "LR", "NL", "IL", "PL", "Part", "SL", "Single", "RL", "LM", "LG", "Alpha", "B", "UL", "XL", "LP", "LU", "DL", "ML", "O", "D", "EL", "FL", "OL", "dL", "Z", "l", "N", "LA", "V", "LI", "P", "Delta", "Li", "I"], "i": ["id", "slice", "inner", "j", "ri", "h", "pi", "mu", "I", "in", "mi", "d", "init", "ii", "ip", "z", "v", "io", "c", "ix", "abi", "r", "y", "gi", "data", "index", "phi", "key", "e", "p", "f", "qi", "ji", "ui", "me", "xi", "li", "it", "multi", "o", "di", "ini", "oi", "ie", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "uri", "ai", "temp", "b", "source"], "sum": ["vol", "confirmed", "fill", "always", "len", "part", "unit", "empty", "user", "Sum", "share", "summary", "count", "start", "not", "spread", "plus", "norm", "mass", "miss", "out", "sim", "ul", "min", "mean", "key", "sp", "alpha", "submit", "net", "max", "zero", "fat", "average", "sort", "conf", "use", "up", "sign", "num", "si", "weight", "parse", "diff", "cost", "depth", "size", "all", "um", "scale", "total"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String args[]) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n\\n        while(!isPrime(n)) {\\n        \tn++;\\n        }\\n        System.out.println(n);\\n    }\\n\\n    private static boolean isPrime(int n) {\\n    \tif(n <= 1) return false;\\n    \tfor(int i = 2; i * i <= n; i++) {\\n    \t\tif(n % i == 0)\\n    \t\t\treturn false;\\n    \t}\\n    \treturn true;\\n    }\\n}\\n", "target": "183", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "ec", "sub", "nc", "search", "cc", "sec", "sh", "sp", "src", "acc", "rc", "system", "ca", "cur", "class", "cs", "cl", "pc", "ner", "ci", "asc", "sci"], "n": ["j", "none", "nn", "conn", "nor", "a", "cn", "len", "sn", "ns", "nu", "in", "d", "no", "count", "z", "v", "c", "not", "m", "sync", "en", "y", "network", "nit", "nc", "t", "mn", "np", "nb", "nr", "index", "k", "nt", "ng", "e", "number", "p", "dn", "on", "f", "ne", "pos", "net", "pn", "nat", "na", "o", "un", "w", "s", "fn", "rn", "N", "l", "num", "x", "nw", "nan", "ni", "u", "g", "size", "b", "gn"], "i": ["id", "slice", "uni", "j", "ri", "pi", "mu", "I", "in", "d", "mi", "init", "ip", "ii", "z", "v", "ix", "c", "m", "r", "t", "gi", "index", "uli", "phi", "key", "e", "p", "fi", "f", "qi", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "oi", "chi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "ni", "mini", "ai", "uri", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        new Main();\\n    }\\n\\n    public Main() {\\n        Scanner sc = new Scanner(System.in);\\n        int aStart = Integer.parseInt(sc.next());\\n        int aEnd = Integer.parseInt(sc.next());\\n        int bStart = Integer.parseInt(sc.next());\\n        int bEnd = Integer.parseInt(sc.next());\\n        int start = Math.max(aStart, bStart);\\n        int end = Math.min(aEnd, bEnd);\\n        int intersection = Math.max(0, end - start);\\n        System.out.println(intersection);\\n    }\\n}\\n", "target": "47", "substitutes": {"sc": ["sr", "sw", "cont", "ch", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "cli", "uc", "cr", "esc", "c", "scan", "osc", "sync", "this", "ec", "sub", "nc", "sch", "cc", "cor", "sec", "cus", "desc", "ctx", "sp", "ser", "src", "acc", "system", "anc", "cam", "ca", "sche", "cur", "coll", "scene", "cms", "cs", "exp", "pc", "parse", "ner", "ci", "asc", "cv", "mc", "sci"], "aStart": ["astart", "alphaStart", "Astart", "APart", "alphaPart", "alphastart", "alphaEnd", " aPart", "AStart", "AEnd", "bFinish", "aFinish", "amFinish", "amEnd", " aFinish", "aPart", "amStart", " astart"], "aEnd": [" aEND", "AMax", "ABase", "aMax", "AEND", "bend", "AStart", " aBase", "AEnd", "bEND", " aMax", "aEND", "aend", "aBase", "pMax", "Aend", " aend", "pEND", "pEnd", "pBase"], "bStart": ["betaEnd", "astart", "bstart", "basestart", "betaStart", "betastart", "bFirst", "aId", "baseEnd", " bstart", "baseId", " bId", "baseStart", "bId", "betaFirst", " bFirst", "aFirst"], "bEnd": [" bMax", " bend", "fbEnd", "bbMax", " bEND", "aMax", "bbStart", "bMax", "fbStart", "bend", "bEND", "fbend", "bbEnd", "aEND", "aend", "fbEND", "bbend"], "start": ["id", "open", "base", " Start", "st", "a", "length", "art", "ed", "part", "offset", "step", "starting", "se", "in", "d", "init", "ind", "last", "stop", "Start", "shift", "min", "from", "ad", "pos", "max", "next", "pad", "range", "i", "ish", "set", "first", "diff", "est", "size", "get", "started"], "end": ["id", "ension", "open", "mid", "nd", "h", "length", "art", "until", "offset", "limit", "last", "stop", "z", "c", "en", "min", "e", "p", "END", "ending", "max", "ended", "off", "next", "End", "ort", "begin", "use", "rest", "ends", "ff", "set", "append", "est", "size", "order"], "intersection": [" interdivision", " interception", "interception", "interconnection", "Intersect", "Interception", " intersect", "INTERsections", "intersect", "conception", "INTERsection", "intersections", "interdivision", "INTERconnection", "Interdivision", "Interconnection", " intersections", "INTERsect", "Intersections", "consection", " interconnection", "condivision", "Intersection", "consect"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        int k = sc.nextInt();\\n        String s = sc.next();\\n        String[] str = new String[n];\\n        str = s.split(\"\");\\n        str[k - 1] = str[k - 1].toLowerCase();\\n        for (int i = 0; i < n; i++) {\\n            System.out.print(str[i]);\\n        }\\n    }\\n}", "target": "71", "substitutes": {"sc": ["sw", "sr", "cont", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "search", "nc", "sch", "cc", "sh", "cor", "cus", "sp", "ser", "rc", "sche", "ca", "cur", "coll", "sb", "cs", "pc", "exec", "ner", "sl", "ci", "asc", "mc", "sci"], "n": ["j", "nn", "h", "sn", "ns", "in", "d", "no", "count", "nl", "kn", "z", "v", "c", "an", "m", "r", "en", "network", "nc", "t", "ln", "nb", "nt", "cn", "e", "number", "p", "pos", "f", "net", "o", "w", "N", "l", "x", "ner", "u", "b"], "k": ["id", "j", "ch", "h", "length", "sk", "part", "kick", "in", "d", "ko", "kn", "z", "v", "c", "m", "ok", "y", "ck", "kind", "ak", "e", "p", "f", "ki", "K", "q", "ik", "ks", "max", "o", "w", "kid", "kw", "l", "mk", "ke", "ner", "x", "u", "unk", "b"], "s": ["h", "fs", "su", "ings", "js", "ns", "rs", "in", "services", "ss", "v", "params", "m", "r", "parts", "os", "t", "strings", "ds", "p", "sp", "f", "string", "ws", "o", "sb", "S", "space", "l", "si", "sl", "u", "g", "ls", "sv", "ins"], "str": ["sr", "id", "inner", "strip", "Str", "lc", "st", "line", "part", "in", "err", "cr", "style", "c", "split", "spec", "r", "iter", "STR", "tr", "input", "stri", "strings", "hr", "key", "p", "sp", "arr", "f", "result", "br", "string", "char", "dict", "wr", "pass", "pr", "div", "tree", "fr", "strike", "cl", "x", "sl", "text", "dr", "ext", "g", "list", "temp", "name", "sta"], "i": ["id", "j", "ri", "pi", "mu", "d", "mi", "ip", "ii", "v", "io", "ix", "abi", "m", "gi", "disk", "index", "uli", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "oi", "chi", "l", "si", "bi", "hi", "zi", "x", "ci", "u", "ni", "ti", "fi", "ai", "uri", "I"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint count_t = 0;\\n\t\tint count_h = 0;\\n\t\t\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\tString str_t = scan.next();\\n\t\t\tString str_h = scan.next();\\n\t\t\t\\n\t\t\tif(str_t.compareTo(str_h) < 0) {\\n\t\t\t\tcount_h += 3;\\n\t\t\t}else if(str_t.compareTo(str_h) > 0) {\\n\t\t\t\tcount_t += 3;\\n\t\t\t}else {\\n\t\t\t\tcount_h++;\\n\t\t\t\tcount_t++;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(count_t + \" \" + count_h);\\n\t}\\n\\n}\\n\\n", "target": "206", "substitutes": {}}
{"code": "import java.util.HashSet;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String args[]) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = Integer.parseInt(sc.nextLine());\\n        HashSet<String> set = new HashSet<>();\\n        for (int i = 0; i < N; i ++) {\\n            set.add(sc.nextLine());\\n        }\\n\\n        System.out.println(set.size());\\n    }\\n}\\n", "target": "98", "substitutes": {"sc": ["sw", "sr", "enc", "ch", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "fc", "cr", "esc", "c", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sh", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "s", "cs", "cl", "pc", "ner", "sl", "ci", "asc", "sci"], "N": ["NG", "Q", "Ni", "Ne", "Ns", "F", "NL", " n", "NB", "Count", "H", "Number", "T", "NI", "Y", "NT", "NS", "n", "R", "L", "ND", "K", "W", "Len", "C", "O", "NC", "MN", "D", "NA", "M", "S", "Z", "X", "V", "P", "Size", "I"], "set": ["hash", "id", "base", "SET", "section", "check", "setting", "send", "unit", "se", "no", "init", "group", "et", "sets", "type", "get", "split", "start", "match", "sync", "en", "out", "read", "sh", "pack", "push", "key", "add", "n", "dict", "it", "clear", "setup", "sort", "use", "sign", "collection", "keep", "store", "parse", "null", "size", "list", "sv"], "i": ["id", "j", "ri", "h", "a", "pi", "mu", "I", "in", "d", "init", "ii", "z", "v", "abi", "c", "start", "m", "io", "t", "gi", "index", "k", "phi", "e", "p", "n", "f", "qi", "ui", "xi", "li", "it", "multi", "o", "di", "ini", "oi", "chi", "si", "bi", "hi", "x", "ci", "u", "ti", "uri", "ai", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint aliceStart = sc.nextInt();\\n\t\tint aliceEnd = sc.nextInt();\\n\t\tint bobStart = sc.nextInt();\\n\t\tint bobEnd = sc.nextInt();\\n\t\tint time = 0;\\n\\n\t\tif (aliceStart >= bobStart) {\\n\t\t\tif (aliceEnd >= bobEnd) {\\n\t\t\t\ttime = bobEnd - aliceStart > 0 ? bobEnd - aliceStart : 0;\\n\t\t\t} else {\\n\t\t\t\ttime = aliceEnd - aliceStart;\\n\t\t\t}\\n\t\t} else {\\n\t\t\tif (bobEnd >= aliceEnd) {\\n\t\t\t\ttime = aliceEnd - bobStart > 0 ? aliceEnd - bobStart : 0;\\n\t\t\t} else {\\n\t\t\t\ttime = bobEnd - bobStart;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(time);\\n\\n\t}\\n\\n}\\n", "target": "47", "substitutes": {"sc": ["sw", "cont", " rc", "ch", "lc", "soc", " Sc", "cer", "str", "Sc", " SC", "bc", "se", "SC", "scope", "sf", " scr", "com", "ss", "lib", "cli", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "sub", "nc", "ck", "cc", "sec", "cus", "ga", "ctx", "sp", "ser", "src", "acc", "rc", "sche", "ca", "sb", "cs", "l", "cl", "exp", "parse", "pc", "ner", "sl", "exec", "asc", "parser", "g", "cv", "sci"], "aliceStart": ["alenseStop", "elenceFinish", "alticeHalf", "elenceEnd", "alenseOffset", "alveyStart", "malenceStarting", "altineFinish", "elanceOffset", "malceEnd", "elanceStart", "aliceBase", "alceOffset", "alenceStart", "aliceHalf", "aliceOffset", "alceHalf", "alieStart", "maliceStarting", "aliceStarting", "alieEnd", "malcePart", "maliceHalf", "alieFinish", "alineEnd", "aliceFinish", "malenceStart", "alcePart", "alriceEnd", "elenceStart", "alineStarting", "alencePart", "alanceEnd", "maliceStart", "altineStart", "malicePart", "alanceOffset", "alieOffset", "alceStop", "alineFinish", "alenseStart", "alveyStarting", "alceEnd", "alenceFinish", "alineStart", "alenseEnd", "aliceStop", "alineHalf", "eliceStart", "alenceEnd", "elanceStop", "alticeEnd", "malceBase", "alicePart", "maliceBase", "alenceHalf", "alenceStarting", "eliceFinish", "altineHalf", "alriceBase", "elenceOffset", "malenceFinish", "eliceOffset", "alticeFinish", "alenceBase", "alricePart", "alveyFinish", "alriceStart", "eliceEnd", "alticeStart", "alceBase", "maliceFinish", "alanceStart", "alceStart", "alenceOffset", "eliceStop", "malceStart", "elanceEnd", "altineEnd", "malenceHalf", "maliceEnd", "alanceStop", "alceFinish", "alveyHalf"], "aliceEnd": ["galenceStop", "galiceFinish", "aliceend", "alieEND", "elenceEnd", "alaseStart", "alceEdge", "galieStart", "galieEnd", "aliceAll", "alceAll", "elenceend", "galenceStart", "alenceend", "alenceStart", "alicingend", "algeStart", "algeAz", "aliceAz", "eliceEdge", "alieStart", "elceStart", "alieEnd", "alceend", "aliceId", "alceEND", "aliceFinish", "eliceAz", "elenceStart", "eliceend", "eliceAll", "alcareAz", "alicingEnd", "elceEND", "aliceEdge", "alieAll", "galieStop", "alieId", "galiceEnd", "alceStop", "alenceId", "alceEnd", "alenceFinish", "galenceFinish", "aliceStop", "galiceStart", "elenceEdge", "eliceStart", "alenceEnd", "alcareEnd", "aluceEnd", "elceAz", "galiceStop", "alenceEdge", "alianceEnd", "algeEnd", "eliceFinish", "aluceStart", "alianceStart", "alicingEdge", "eliceEND", "alceAz", "alceId", "aliceEND", "galiceId", "alianceAll", "alaseEnd", "algeFinish", "alianceEND", "eliceEnd", "alaseEND", "elceend", "alicingStart", "alenceStop", "alieStop", "alceStart", "alaseend", "aluceFinish", "aluceStop", "elceAll", "galieId", "elceEnd", "alcareFinish", "alcareStart", "alenceEND", "galenceEnd", "alceFinish", "elceFinish"], "bobStart": ["bobeStart", "babPart", "bibstart", "bobMin", "lobRest", "bizonEnd", "babStarting", "bobbStarting", "boreMin", "bebFinish", "blobstart", "babRest", "bobFinish", "blabEnd", "bebEnd", "bizonstart", "boyStart", "boreEnd", "bobbEnd", "bobeMin", "babstart", "lobEnd", "bubFinish", "bibEnd", "bubBegin", "bizonPart", "bobRest", "bebBegin", "bicePart", "boystart", "blabPart", "boyEnd", "labStart", "bibStart", "blabstart", "boyRest", "babFinish", "lobStarting", "lobBegin", "biceEnd", "bobStarting", "babMin", "bibRest", "bobbstart", "boreFinish", "blobStart", "biceStart", "bobbStart", "lobFinish", "blobEnd", "blobPart", "babBegin", "bobBegin", "lobMin", "babStart", "bobPart", "lobstart", "labFinish", "boreStart", "labEnd", "labstart", "bizonStart", "bobstart", "labRest", "labStarting", "labMin", "blabStart", "bebStart", "bobeEnd", "lobStart", "babEnd", "bobeFinish", "bubEnd", "bicestart", "labBegin", "bibStarting", "bubStart"], "bobEnd": ["bubId", "bobeStart", " bobId", "biceBase", "labLen", "lobEl", "bobend", "bobFinish", "blabend", "babLimit", "bibSize", "blabEnd", "bebEnd", "bubend", "bobStop", "babLen", "babBase", "babSize", "labStop", " babStart", "lobEnd", "bibEnd", "lobStop", "babStop", "labLimit", " babSize", "lobend", "babEl", "lobLimit", "bobeend", "biceend", "bubEl", "labStart", "bibStart", "babFinish", "biceEnd", "bobeBase", "blobStart", "bibId", "bibEl", "biceStart", "bobBase", "babId", "lobLen", "bibend", "bobId", "biceFinish", "bobSize", "lobFinish", "blobEnd", "bubLimit", "blobBase", "babStart", "labFinish", "labEnd", "bubSize", "blobend", " babId", "biceStop", "bobeStop", "bobLimit", "blabStart", "bebStart", "bobeEnd", " babEnd", "lobStart", "bobeLen", "bibLimit", "babEnd", "blabBase", "labEl", "babend", "bobEl", "bobeFinish", "bebLen", "bobLen", "labend", "bubEnd", "bubStart", " bobSize"], "time": ["id", "Time", "port", "speed", "one", "back", "TIME", "error", "rank", "sleep", "path", "right", "length", "memory", "etime", "timeout", "user", "volume", "delay", "count", "play", " Time", "type", "now", "name", "live", "timer", "depth", "value", "progress", "data", "runtime", "how", "mode", "duration", "age", "end", "power", "tim", "times", "hour", "use", "date", "space", "weight", "ime", "loop", "block", "history", "trace", "cost", "year", "size", "clock", "money", "rate", "work"]}}
{"code": "import java.util.*;\\nclass Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        Set<Integer> list = new TreeSet<Integer>();\\n        int count =1;\\n        int min = sc.nextInt();\\n        for(int i = 1;i<n;i++){\\n            int tmp = sc.nextInt();\\n            if(tmp<=min){\\n                count ++;\\n                min = tmp;\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}\\n", "target": "229", "substitutes": {"sc": ["sw", "sr", "enc", "ch", "lc", "cer", "str", "Sc", " SC", "bc", "se", "SC", "sf", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "spec", "tc", "ec", "search", "nc", "cc", "sec", "sh", "cus", "core", "ctx", "sp", "ser", "src", "rc", "system", "sche", "cur", "sb", "cs", "cl", "set", "pc", "exec", "ner", "sl", "parser", "asc", "sci"], "n": ["j", "nn", "conn", "len", "ns", "in", "d", "z", "c", "m", "en", "y", "network", "nc", "t", "ln", "nb", "k", "nt", "number", "p", "f", "net", "max", "span", "o", "s", "fn", "N", "num", "l", "x", "size", "b"], "list": ["id", "counter", "len", "member", "type", "lists", "iter", "lt", "index", "batch", "obj", "li", "seq", "test", "skip", "LIST", "parent", "code", "val", "num", "keep", "l", "info", "set", "diff", "all"], "count": ["id", "base", "counter", "check", "length", "len", "part", "in", "empty", "init", "ind", "limit", "group", "child", "last", "type", "call", "c", "start", "now", "level", "match", "Count", "iter", "index", "nt", "number", "p", "f", "max", "carry", "found", "seq", "test", "coll", "temp", "col", "collection", "code", "keep", "num", "sum", "common", "ignore", "diff", "all", "size", "total", "order"], "min": ["small", "section", "po", "len", "part", "Min", "unit", "init", "tail", "ind", "limit", "prefix", "area", "start", "lower", "pre", "index", "minimum", "pos", "sp", "p", "span", "partial", "max", "next", "filter", "skip", "mit", "sort", "amin", "MIN", "val", "sum", "mins", "diff", "mini", "size", "state", "name"], "i": ["id", "slice", "uni", "j", "api", "pi", "part", "mi", "init", "ip", "ii", "ind", "v", "start", "gi", "p", "sp", "f", "qi", "ji", "ui", "xi", "li", "multi", "b", "di", "ini", "ie", "oi", "chi", "si", "bi", "x", "zi", "ci", "ni", "ti", "u", "ai", "temp", "I"], "tmp": ["slice", "pp", "cmp", "su", "length", "len", "offset", "bb", "v", "prefix", "start", "area", "m", "treatment", "txt", "current", "dest", "t", "dist", "nb", "qq", "proc", "nt", "p", "obj", "sp", "bp", "max", "span", "mm", "elt", "next", "stuff", "pad", "ie", "kk", "space", "sup", "num", "si", "nom", "mp", "attr", "ext", "diff", "cp", "size", "rb", "temp", "inst", "vt"]}}
{"code": "\\nimport java.io.*;\\nimport java.io.BufferedReader; \\nimport java.io.IOException; \\nimport java.io.InputStreamReader;\\nimport java.math.BigInteger;\\nimport java.util.*;\\n\\n\\n/**\\n * @author Utkarsh\\n *\\n */\\npublic  class Main \\n{\\n\\n\t   \\n\t   static class FastReader \\n\t    { \\n\t        BufferedReader br; \\n\t        StringTokenizer st; \\n\t       \\n\t  \\n\t        public FastReader() \\n\t        { \\n\t            br = new BufferedReader(new\\n\t                     InputStreamReader(System.in)); \\n\t        } \\n\t  \\n\t        String next() \\n\t        { \\n\t            while (st == null || !st.hasMoreTokens()) \\n\t            { \\n\t                try\\n\t                { \\n\t                    st = new StringTokenizer(br.readLine()); \\n\t                } \\n\t                catch (IOException  e) \\n\t                { \\n\t                    e.printStackTrace(); \\n\t                } \\n\t            } \\n\t            return st.nextToken();\\n\t            \\n\t        } \\n\t  \\n\t        int nextInt() \\n\t        { \\n\t            return Integer.parseInt(next()); \\n\t        } \\n\t  \\n\t        long nextLong() \\n\t        { \\n\t            return Long.parseLong(next()); \\n\t        } \\n\t  \\n\t        double nextDouble() \\n\t        { \\n\t            return Double.parseDouble(next()); \\n\t        } \\n\t  \\n\t        String nextLine() \\n\t        { \\n\t            String str = \"\"; \\n\t            try\\n\t            { \\n\t                str = br.readLine(); \\n\t            } \\n\t            catch (IOException e) \\n\t            { \\n\t                e.printStackTrace(); \\n\t            } \\n\t            return str; \\n\t        }\\n\\n\t\t\tpublic Character charAt(int i) {\\n\t\t\t\t// TODO Auto-generated method stub\\n\t\t\t\treturn null;\\n\t\t\t}\\n\\n\t\t\tpublic BigInteger nextBigInteger() {\\n\t\t\t\t// TODO Auto-generated method stub\\n\t\t\t\treturn null;\\n\t\t\t} \\n\t    } \\n\\n  \\n\\n\t  // Complete the hurdleRace function below.\\n//    public static void solve() {\\n//    \tFastReader s=new FastReader();\\n\t    int binarySearch(int arr[], int l, int r, int x) \\n\t    { \\n\t        if (r >= l) { \\n\t            int mid = l + (r - l) / 2; \\n\t  \\n\t            // If the element is present at the \\n\t            // middle itself \\n\t            if (arr[mid] == x) \\n\t                return mid; \\n\t  \\n\t            // If element is smaller than mid, then \\n\t            // it can only be present in left subarray \\n\t            if (arr[mid] > x) \\n\t                return binarySearch(arr, l, mid - 1, x); \\n\t  \\n\t            // Else the element can only be present \\n\t            // in right subarray \\n\t            return binarySearch(arr, mid + 1, r, x); \\n\t        } \\n\t  \\n\t        // We reach here when element is not present \\n\t        // in array \\n\t        return -1; \\n\t    } \\n\t  \\n\t    static // Driver method to test above \\n\\n\t// Java implementation of iterative Binary Search \\n\\n\t    // Returns index of x if it is present in arr[], \\n\t    // else return -1 \\n\t    int lowerBound(int[] a,int n,int key){\\n\t        int s =0,e=n-1;\\n\t        int ans = -1;\\n\\n\t        while(s<=e){\\n\t            int mid = (s+e)/2;\\n\\n\t            if(a[mid]==key){\\n\t                ans = mid;\\n\t                e = mid - 1;\\n\t            }\\n\t            else if(a[mid]>key){\\n\t                e = mid - 1;\\n\t            }\\n\t            else{\\n\t                s = mid + 1;\\n\t            }\\n\t        }\\n\\n\t        return ans;\\n\t    }\\n\t    static int count(String se,char c,int l,int r) {\\n\t\t\tif(l==r) {\\n\t\t\t\tif(se.charAt(l)==c)return 0;\\n\t\t\t\telse return 1;\\n\t\t\t}\\n\t\t\tint mid = (l+r)/2;\\n\t\t\tint c1=0,c2=0;\\n\t\t\tfor(int i=l;i<=mid;i++) {\\n\t\t\t\tif(se.charAt(i)!=c)c1++;\\n\t\t\t}\\n\t\t\tfor(int i=r;i>mid;i--) {\\n\t\t\t\tif(se.charAt(i)!=c)c2++;\\n\t\t\t}\\n\t\t\tint y = count(se,(char)((int)c+1),mid+1,r);\\n\t\t\tint x = count(se,(char)((int)c+1),l,mid);\\n\t    \treturn Math.min(c1+y, c2+x);\\n\t    \t\\n\t    }\\n\t    public static double log2(long N) \\n\t    { \\n\t  \\n\t        // calculate log2 N indirectly \\n\t        // using log() method \\n\t        double result = (double)(Math.log(N) / Math.log(2)); \\n\t  \\n\t        return result; \\n\t    }\\n\t    static boolean sign(long n) {\\n\t    \treturn n>0;\\n\t    }\\n\t    public static int solve(long[] ar,int n) {\\n\t    \tlong sum=0;\\n\t    \tfor(int i=0;i<n;i++) {\\n\t    \t\tsum+=ar[i];\\n\t    \t\tif(sum<=0)return 0;\\n\t\t\t}\\n\t    \tsum=0;\\n\t    \tfor(int i=n-1;i>=0;i--) {\\n\t    \t\tsum+=ar[i];\\n\t    \t\tif(sum<=0)return 0;\\n\t    \t}\\n\t\t\treturn 1;\\n\t    }\\n    public static void main(String[] args) throws IOException {\\n    \tFastReader s=new FastReader();\\n    \tint n = s.nextInt();\\n    \tint  count=0;\\n    \tfor(int i=1;i<=n;i++) {\\n    \t\tString se = String.valueOf(i);\\n    \t\tif(se.length()%2==1)count++;\\n    \t}\\n   \t\tSystem.out.println(count);\\n    }\t\\n}\\n//2999999997\\n\\n        \\n    \\n\\n      \\n", "target": "135", "substitutes": {"br": ["ler", "ch", "yr", "ab", "cb", "bro", "front", "bc", "Br", "ut", "bb", "err", "bh", "ber", "BR", "box", "cr", "ob", "r", "db", "gr", "tr", "img", "jp", "hr", "be", "ur", "sp", "arr", "bar", "ver", "mr", "ctr", "src", "ocr", "cro", "bridge", "next", "browser", "bs", "cur", "pr", "sb", "raf", "buf", "rest", "bt", "lr", "fr", "fb", "dr", "bl", "rt", "bed", "rb", "b"], "st": ["sc", "sw", "ast", "Str", "sth", "nd", "ct", "art", "sn", "ft", "step", "se", "ust", "ut", " est", "ss", "std", "pe", "stop", "cr", "start", "stable", "r", "pt", "sta", "stab", "ld", "t", "tr", "stri", "ste", "nt", "e", "be", "p", "sp", "src", "string", "ost", "contract", "pr", "sb", "ST", "rest", "bt", "l", "sts", "store", "cl", "sl", "struct", "rt", "ist", "est", "bl", "inst", "St"], "str": ["id", "enc", "inner", "Str", "doc", "line", "d", "err", "ss", "z", "cr", "style", "c", "url", "r", "pt", "STR", "t", "tr", "strings", "stri", "data", "p", "n", "sp", "f", "obj", "arr", "string", "char", "pass", "pr", "s", "div", "l", "fr", "exp", "text", "sl", "x", "dr", "u", "temp", "b"], "i": ["id", "slice", "j", "a", "pi", "d", "ii", "ix", "v", "c", "is", "m", "start", "r", "p", "f", "xi", "iu", "it", "o", "b", "l", "si", "info", "u", "I"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n/**\\n * @author Yuki\\n */\\npublic class Main {\\n\\n\t/*** \u5229\u5b50 */\\n\tprivate final static double INTEREST = 1.05;\\n\t/*** \u5207\u308a\u4e0a\u3052\u984d */\\n\tprivate final static double REVALUATION = 1000;\\n\t/*** \u501f\u91d1 */\\n\tprivate static int debt = 100000;\\n\t/*** \u6587\u5b57\u578b\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\uff08\u6a19\u6e96\u5165\u529b\uff09 */\\n\tprivate static BufferedReader br;\\n\t/*** \u9031 */\\n\tprivate static int weekNum;\\n\\n\t/*** \u521d\u671f\u5316 */\\n\tstatic {\\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t}\\n\\n\t/**\\n\t * \u30e1\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9<br>\\n\t * \u501f\u91d1\u306e\u6b8b\u9ad8\u3092\u51fa\u529b\u3059\u308b\\n\t *\\n\t */\\n\tpublic static void main(String[] args) throws IOException {\\n\\n\t\tweekNum = Integer.parseInt(br.readLine());\t// \u9031\u3092\u53d6\u5f97\\n\\n\t\tSystem.out.println(getTotalDept());\t// \u501f\u91d1\u306e\u6b8b\u9ad8\u306e\u51fa\u529b\\n\\n\t}\\n\\n\t/**\\n\t * \u501f\u91d1\u306e\u6b8b\u9ad8\u3092\u53d6\u5f97\u3059\u308b \u5229\u5b50\u3092\u304b\u3051\u305f\u9031\u306e\u5408\u8a08\u306e\u501f\u91d1\u3092\u8a08\u7b97\u3057\u3066\u8fd4\u3059\\n\t *\\n\t * @return \u501f\u91d1\u306e\u6b8b\u9ad8\\n\t */\\n\tprivate static int getTotalDept() {\\n\t\tdouble debtTemp = debt / REVALUATION;\\n\t\tfor (; weekNum > 0; weekNum--) {\\n\t\t\tdebtTemp = Math.ceil(debtTemp * INTEREST); // \u5207\u308a\u4e0a\u3052\\n\t\t}\\n\t\treturn (int) (debtTemp * REVALUATION);\\n\t}\\n\\n}", "target": "173", "substitutes": {"INTEREST": ["INTERST", "NETST", "EXEND", "INTERPL", "IOREND", "NETEND", "IOREST", "EXPL", "IORST", "NETPL", "EXST", "NETEST", "INTEREND", "IORPL", "EXEST"], "REVALUATION": ["INTERVALUATION", "INTERVALURATION", "INTERVALURation", "INTERALURATE", "INTERALUATING", "INTERVALuATING", "INTERVALuATION", "INTERVALURATE", "INTERALUATE", "INTERALURATING", "INTERVALUPation", "INTERALUation", "INTERVALuation", "INTERVALUPATING", "INTERVALUation", "INTERVALuATE", "INTERVALURATING", "INTERVALUPATION", "INTERVALUPATE", "INTERALUATION", "INTERALURation", "INTERALURATION", "INTERVALUATING", "INTERVALUATE"], "debt": ["punkta", "punkT", "debta", "punkt", " evtl", "Debt", "Debtl", " evta", " evT", " evt", "debT", "DebT", "Debta", "punktl", "debtl"], "br": ["ler", "ch", "j", "yr", "cb", "plug", "str", "bro", "or", "bc", "Br", "http", "init", "err", "bf", "ber", "BR", "cr", "io", "er", "r", "db", "erb", "tr", "img", "kr", "hr", "ur", "obj", "p", "bar", "arr", "mr", " reader", "src", "result", "ar", "bridge", "ocr", "browser", "bal", "bs", "ra", "pr", "jar", "buf", "bt", "fr", "fb", "reader", "dr", "bl", "stream", "rb", "buffer", "b"], "weekNum": ["dayNumber", "gameNumber", "gamenum", "WeekLen", " weeknum", "WeekNumber", "gameNum", "weeknum", "WeekSum", "daySum", " weekNumber", "gameLen", "weekLen", " weekLen", "WeekNum", "dayLen", "Weeknum", " weekSum", "dayNum", "weekSum", "weekNumber"]}}
{"code": "\\nimport java.util.*;import java.io.*;import java.math.*;\\n\\npublic class Main\\n{\\n\\n    public static void process()throws IOException\\n    {\\n        char arr[]=(\" \"+nln()).toCharArray();\\n        int n=arr.length-1;\\n\\n        int i=n/2,j=n/2+1+(n&1);\\n        int res=0;\\n        while(i>=1 && j<=n){\\n            if(arr[i]!=arr[j])\\n                res++;\\n            i--;\\n            j++;\\n        }\\n        pn(res);\\n    }\\n\\n\\n    static AnotherReader sc;\\n    static PrintWriter out;\\n    public static void main(String[]args)throws IOException\\n    {\\n        out = new PrintWriter(System.out);\\n        sc=new AnotherReader();\\n        boolean oj = true;\\n\\n        //oj = System.getProperty(\"ONLINE_JUDGE\") != null;\\n        if(!oj) sc=new AnotherReader(100);\\n\\n        long s = System.currentTimeMillis();\\n        int t=1;\\n        //t=ni();\\n        while(t-->0)\\n            process();\\n        out.flush();\\n        if(!oj)\\n            System.out.println(System.currentTimeMillis()-s+\"ms\");\\n        System.out.close();  \\n    }\\n    \\n    \\n    static void pn(Object o){out.println(o);}\\n    static void p(Object o){out.print(o);}\\n    static void pni(Object o){out.println(o);System.out.flush();}\\n    static int ni()throws IOException{return sc.nextInt();}\\n    static long nl()throws IOException{return sc.nextLong();}\\n    static double nd()throws IOException{return sc.nextDouble();}\\n    static String nln()throws IOException{return sc.nextLine();}\\n    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}\\n    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}\\n    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}\\n    static boolean multipleTC=false;\\n    static long mod=(long)1e9+7l;\\n\\n    static void r_sort(int arr[],int n){\\n        Random r = new Random(); \\n        for (int i = n-1; i > 0; i--){ \\n            int j = r.nextInt(i+1); \\n                  \\n            int temp = arr[i]; \\n            arr[i] = arr[j]; \\n            arr[j] = temp; \\n        } \\n        Arrays.sort(arr); \\n    }\\n\\n    static long mpow(long x, long n) {\\n        if(n == 0)\\n            return 1;\\n        if(n % 2 == 0) {\\n            long root = mpow(x, n / 2);\\n            return root * root % mod;\\n        }else {\\n            return x * mpow(x, n - 1) % mod;\\n        }\\n    }\\n    \\n    static long mcomb(long a, long b) {\\n        if(b > a - b)\\n            return mcomb(a, a - b);\\n        long m = 1;\\n        long d = 1;\\n        long i;\\n        for(i = 0; i < b; i++) {\\n            m *= (a - i);\\n            m %= mod;\\n            d *= (i + 1);\\n            d %= mod;\\n        }\\n        long ans = m * mpow(d, mod - 2) % mod;\\n        return ans;\\n    }\\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    static class AnotherReader{BufferedReader br; StringTokenizer st;\\n    AnotherReader()throws FileNotFoundException{\\n    br=new BufferedReader(new InputStreamReader(System.in));}\\n    AnotherReader(int a)throws FileNotFoundException{\\n    br = new BufferedReader(new FileReader(\"input.txt\"));}\\n    String next()throws IOException{\\n    while (st == null || !st.hasMoreElements()) {try{\\n    st = new StringTokenizer(br.readLine());}\\n    catch (IOException  e){ e.printStackTrace(); }}\\n    return st.nextToken(); } int nextInt() throws IOException{\\n    return Integer.parseInt(next());}\\n    long nextLong() throws IOException\\n    {return Long.parseLong(next());}\\n    double nextDouble()throws IOException { return Double.parseDouble(next()); }\\n    String nextLine() throws IOException{ String str = \"\"; try{\\n    str = br.readLine();} catch (IOException e){\\n    e.printStackTrace();} return str;}}\\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n}", "target": "115", "substitutes": {"arr": ["enc", "cmp", "ch", "air", "app", "str", "part", "ns", " array", "aa", "err", "array", "rep", "ir", "arg", "adv", "abc", "adr", "ars", "r", "gr", "tr", "img", "rar", "rr", "data", "pre", "nt", "cat", "obj", "arch", "prev", "map", "Array", "arm", "cache", "br", "ray", " ar", "na", "Ar", "av", "coll", "par", "pr", "fr", "var", "x", "attr", "arc", "block", "dr", "ann", "all", "ar", "vec"], "n": ["left", "nn", "conn", "a", "len", "sn", "ns", "in", "d", "nl", "v", "z", "c", "ny", "m", "r", "en", "y", "network", "nc", "t", "mn", "nb", "k", "nt", "ne", "p", "f", "net", "o", "w", "s", "adj", "N", "l", "num", "x", "nan", "u", "size", "b"], "i": ["ri", "h", "ami", "pi", "in", "d", "mi", "ii", "ind", "z", "v", "ori", "ix", "is", "m", "io", "start", "r", "y", "index", "phi", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "o", "b", "eni", "ini", "di", "ie", "range", "l", "si", "bi", "x", "ci", "u", "ni", "ai", "I", "vi"], "j": ["h", "ja", "J", "js", "ij", "job", "d", "jj", "ii", "ind", "z", "v", "m", "r", "y", "jc", "index", "k", "p", "f", "ji", "aj", "q", "ui", "li", "next", "o", "pr", "l", "si", "uj", "fr", "x", "jo", "u", "ni", "jp", "b"], "res": ["id", "vals", "ri", "right", "resolution", "js", "rx", "rs", "resource", "rem", "err", "rep", "points", "ress", "resh", "is", "ras", "r", "os", "gr", "es", "rows", "re", "index", "rez", "nr", "req", "pre", "ret", "rev", "pos", "obj", "prev", "ries", "result", "br", "rc", "seq", "blocks", "reset", "rest", "ris", "Res", "vs", "eps", "resp", "results", "RES", "rel", "ms", "ins"], "sc": ["sr", "sw", "ch", "lc", "soc", "sys", "cer", "Sc", "rs", "bc", "scope", "SC", "rage", "sem", "server", "uc", "cr", "esc", "c", "osc", "script", "sync", "r", "ec", "nc", "gr", "cc", "sh", "sp", "rc", "system", "ca", "gram", "score", "cs", "cl", "pc", "arc", "asc", "ci", "g", "screen", "reader", "writer", "sci"], "out": ["path", "again", "wx", "console", "error", "outs", "file", "comment", "page", "scope", "in", "Output", "user", "err", "report", "println", "server", "client", "io", "outer", "c", "OUT", "script", "name", "sync", "r", "this", "input", "session", "data", "nt", "p", "ex", "cache", "result", "IN", "system", "window", "test", "pass", "o", "w", "up", "log", "exp", "exec", "x", "null", "Out", "screen", "output", "write", "copy", "buffer", "writer", "co"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        new Solver().run();\\n    }\\n}\\n\\nclass Solver {\\n\\n    public void run() {\\n        Scanner sc = new Scanner(System.in);\\n        char[] S = sc.next().toCharArray();\\n        long K = sc.nextLong();\\n\\n        int ans = 1;\\n        for (int i = 0; i < S.length; i++) {\\n            char ch = S[i];\\n            if (ch == '1') {\\n                if (K - 1 == i)  {\\n                    ans = 1;\\n                    break;\\n                }\\n            } else {\\n                ans = ch - '0';\\n                break;\\n            }\\n\\n        }\\n\\n        System.out.println(ans);\\n        return;\\n    }\\n\\n}", "target": "38", "substitutes": {"sc": ["sw", " Sc", "cer", "or", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "server", "uc", "cr", "esc", "c", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "cor", "sec", "cus", "core", "sh", "ctx", "sp", "dc", "src", "rc", "system", "anc", "sche", "C", "ca", "sb", "cs", "pc", "exec", "ner", "parse", "RC", "ci", "asc", "cv", "sci"], "S": ["SH", "Si", "SS", "Files", "Os", "SU", "Su", "Sc", "Services", "SC", "Characters", "Part", "AS", "ITS", "TS", "CS", "SR", "JS", "Blocks", "A", "VS", "OS", "Sl", "SA", "FS", "INS", "NS", "L", "SE", "Source", "SN", "IPS", "M", "s", "BS", "II", "U", "N", "SI", "RS", "Socket", "P", "GS", "Es", "IDS", "ES", "I"], "K": ["Q", "CH", "J", "F", "KI", "KE", "HK", "H", "KR", "B", "Y", "Ka", "k", "R", "L", "ks", " k", "PK", "Ku", "C", "O", "D", "KA", "M", "U", "Z", "SK", "AK", "N", "KS", "KB", "DK", "X", "V", "Ak", "P", "ID", "Sk", "IK", "I", "G"], "ans": [" scans", "opens", "anas", "can", "aces", "anus", "outs", "aks", "a", "cons", "lan", "sk", "ns", "ens", "AN", "ons", "runs", "aning", "no", "aus", "atan", "ANN", "ions", "nas", "amps", "vers", "an", "asts", "ras", "ars", "ros", "ana", "olds", "os", "aned", "es", "cas", "anch", "anon", "chan", "ents", "ids", "ks", "arts", "span", "anc", "ANS", "na", "blocks", "unks", "s", "cases", "cs", "ants", "eps", "x", "parser", "ann", "ls", "annot", "ins"], "i": ["slice", "id", "j", "api", "ri", "h", "length", "pi", "mu", "part", "I", "init", "ip", "ii", "ind", "z", "v", "io", "c", "abi", "ori", "ix", "y", "t", "gi", "index", "data", "k", "phi", "p", "qi", "f", "ji", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "s", "oi", "chi", "l", "si", "bi", "hi", "info", "zi", "x", "ci", "u", "ni", "uri", "fi", "ai", "ti"], "ch": ["ich", "chu", "enc", "cop", "CH", "cha", " chunk", " cs", "cho", "cand", " Ch", "che", "Ch", "character", "c", "sch", "cor", "sh", "anch", "qu", "cht", " char", "k", "chan", "p", "arch", "f", "q", "cher", "char", "ph", "coll", "cur", "zh", "ech", "div", "cs", "chi", "l", "cry", "cl", "ci", "ant", "cp", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\t\\n\t\tint count = 0;\\n\t\tfor (int i = 1; i <= n - 1; i++) {\\n\t\t\tcount+= i;\\n\t\t}\\n\t\tfor (int i = 1; i <= m - 1; i++) {\\n\t\t\tcount+= i;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n\\n}\\n", "target": "49", "substitutes": {"scan": ["slice", "can", "sc", "inner", "look", "nn", "conn", "fan", "bin", "query", "util", "se", "in", "report", "server", "connect", "an", "sync", "iter", "out", "search", "con", "clean", "ln", "pack", "cat", "san", "watch", "walk", "ser", "result", "span", "car", "na", "pan", "feed", "skip", "l", "Scan", "log", "ignore", "parse", "pin", "ner", "exec", "ann", "all", "sign", "gen"], "n": ["j", "nn", "h", "a", "ns", "in", "d", "z", "v", "c", "r", "y", "network", "nc", "t", "mn", "nb", "k", "cn", "e", "p", "f", "q", "o", "s", "N", "l", "num", "x", "u", "b"], "m": ["j", "h", "mu", "dm", "in", "mi", "d", "md", "sm", "z", "v", "c", "r", "y", "mn", "k", "e", "p", "f", "q", "mm", "cm", "hm", "o", "M", "s", "bm", "l", "num", "x", "ms", "u", "mc", "b"], "count": ["id", "base", "error", "counter", "check", "length", "len", "line", "offset", "limit", "group", "child", "type", "level", "c", "start", "match", "Count", "index", "data", "key", "cat", "number", "batch", "add", "f", "cache", "span", "more", "found", "test", "col", "parent", "code", "sum", "num", "log", "weight", "info", "time", "depth", "size", "list", "b", "total", "name"], "i": ["id", "j", "api", "ri", "lc", "pi", "mu", "step", "in", "mi", "init", "ii", "ip", "cli", "z", "ix", "abi", "c", "v", "y", "gi", "index", "data", "phi", "e", "p", "fi", "qi", "f", "ji", "ui", "xi", "li", "iu", "multi", "o", "eni", "di", "ini", "oi", "ie", "chi", "ei", "si", "bi", "hi", "info", "x", "zi", "block", "ci", "u", "ni", "ti", "uri", "ai", "mini", "I"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n    \\n    Scanner sc = new Scanner(System.in);\\n\t\tint K = sc.nextInt();\\n\t\tint X = sc.nextInt();\\n\\n    for(int i=-K+1; i<0; i++){\\n        System.out.print(X+i +\" \");\\n}\\n    for(int j=0; j<K; j++){    \\n\t\tSystem.out.print(X+j +\" \");\t    \\n\t}\\n}\\n}", "target": "207", "substitutes": {"sc": ["sw", "sr", "ch", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "com", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "search", "nc", "sch", "cc", "sh", "sec", "sp", "ser", "src", "rc", "system", "sche", "ca", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "sci"], "K": ["Q", "J", "F", "E", "KI", "KE", "Mask", "Max", "HK", "H", "T", "Y", "k", "UK", "L", "NK", "Zero", "PK", "C", "O", "D", "M", "KN", "KC", "U", "Z", "SK", "N", "KK", "KS", "KB", "V", "ID", "P", "Sk", "IK", "I", "G"], "X": ["Q", "CL", "J", "F", "E", "MX", "Ex", "ZX", "FX", "XP", "UX", "EX", "PE", "Check", "H", "XXX", "A", "DX", "TX", "Zip", "Y", "Length", "XL", "L", "Text", "FF", "Location", "O", "C", "Point", "JSON", "D", "PH", "M", "U", "Z", "S", "N", "x", "V", "P", "IX", "XX", "I", "G"], "i": ["id", "ri", "h", "pi", "in", "init", "ii", "z", "v", "ix", "io", "ori", "start", "y", "gi", "index", "k", "qi", "f", "ji", "ki", "ui", "xi", "li", "iu", "it", "eni", "b", "di", "ini", "oi", "ie", "yi", "chi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "fi", "ai", "I"], "j": ["jet", "ja", "J", "length", "ij", "js", "job", "I", "jj", "bj", "ii", "ind", "z", "v", "ix", "y", "jl", "jc", "k", "key", "e", "dj", "p", "kj", "n", "qi", "f", "ji", "aj", "end", "q", "br", "li", "next", "it", "o", "ie", "l", "fr", "uj", "bi", "x", "jo", "u", "oj", "jp", "zip", "b"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        FastScanner scanner = new FastScanner();\\n        PrintWriter out = new PrintWriter(System.out,false);\\n        char[] str = scanner.next().toCharArray();\\n        for(int i = 0; i < str.length; i++) {\\n            if (i % 2 == 0) {\\n                if (str[i] == 'L') {\\n                    System.out.println(\"No\");\\n                    return;\\n                }\\n            }else {\\n                if (str[i] == 'R') {\\n                    System.out.println(\"No\");\\n                    return;\\n                }\\n            }\\n        }\\n        out.println(\"Yes\");\\n        out.flush();\\n    }\\n    \\n    public static class FastScanner {\\n        BufferedReader br;\\n        StringTokenizer st;\\n        \\n        public FastScanner(Reader in) {\\n            br = new BufferedReader(in);\\n        }\\n        \\n        public FastScanner() {\\n            this(new InputStreamReader(System.in));\\n        }\\n        \\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n        \\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n        \\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n        \\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n        \\n        String readNextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n}\\n", "target": "205", "substitutes": {"scanner": ["scaner", "Scanner", "Scaninner", "canter", " scaninner", "caninner", "caner", "scancer", "Scaner", " scancer", " scancher", "Scanter", "canner", "Scancher", "scaninner", "scanter", "cancher", "Scancer", "scancher", " scaner", "cancer", " scanter"], "out": ["again", "base", "inner", "page", "client", "OUT", "r", "word", "loader", "net", "result", "In", "w", "up", "exec", "output", "list", "temp", "co", "path", "outs", "sys", "line", "user", "inc", "flush", "cli", "println", "group", "io", "down", "this", "input", "data", "key", "dump", "string", "window", "self", "auto", "name", "error", "conn", "p", "home", "connection", "view", "print", "Out", "null", "buffer", "source", "pool", "file", "exit", "bin", "part", "err", "report", "array", "outer", "ex", "obj", "lock", "cache", "IN", "o", "code", "log", "op", "writer", "write"], "str": ["sr", "id", "enc", "j", "strip", "Str", "lc", "line", "err", "oct", "z", "er", "style", "c", "start", "cr", "spec", "r", "iter", "word", "STR", "read", "input", "tr", "t", "stri", "strings", "data", "hr", "key", "e", "p", "star", "sp", "arr", "f", "obj", "me", "string", "char", "dec", "dict", "wr", "pass", "pr", "s", "tri", "div", "val", "code", "fr", "l", "strike", "cl", "text", "x", "sl", "print", "dr", "bl", "est", "step", "list", "temp", "name"], "i": ["id", "slice", "j", "lc", "ri", "h", "a", "length", "pi", "mu", "I", "d", "init", "ii", "cli", "count", "z", "v", "io", "c", "start", "m", "abi", "ix", "r", "t", "gi", "index", "k", "uli", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "multi", "o", "eni", "di", "s", "oi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "b"], "br": ["ler", "sr", "ch", "ab", "bro", "Br", "bc", "fore", "bb", "err", "bh", "ber", "BR", "cr", "r", "iter", "db", "gr", "tr", "img", "B", "hr", "be", "ur", "p", "obj", "sp", "arr", "mr", "bar", "ver", "ctr", "src", "result", "ar", "bridge", "next", "browser", "bal", "cur", "pr", "buf", "bt", "lr", "fr", "l", "keeper", "brush", "pl", "fb", "dr", "bl", "rt", "rb", "b"], "st": ["sc", "ast", "sr", "Str", "sth", "inst", "nd", "a", "ct", "ft", "sa", "ut", " est", "ss", "std", "pe", "stop", "style", "start", "is", "stable", "r", "pt", "sta", "ld", "const", "t", "tr", "stri", "sh", "fe", "ste", "e", "be", "p", "ur", "sp", "string", "ost", "w", "pr", "s", "ST", "rest", "sb", "rd", "bt", "l", "sts", "fr", "cl", "sl", "stage", "struct", "rt", "ist", "est", "bl", "b", "St"], "in": ["id", "inner", "login", "file", "a", "bin", "or", "resource", "d", "init", "err", "inc", "din", "io", "c", "is", "inet", "r", "read", "input", "from", "data", "p", "n", "ex", "f", "arin", "IN", "inn", "inf", "connection", "image", "In", "ini", "readable", "l", "log", "x", "lin", "stream", "ar", "reader", "buffer", "temp", "b", "source", "ins"]}}
{"code": "//TAKOYAKI\\nimport java.util.*;\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc=new Scanner(System.in);\\n    int n=sc.nextInt();\\n    int power[]=new int[n];\\n    for (int i=0;i<n;i++) {\\n      power[i]=sc.nextInt();\\n    }\\n    int count=0;\\n    int temp;\\n    for (int i=0;i<n-1;i++) {\\n      for (int j=i+1;j<n;j++) {\\n        temp=power[i]*power[j];\\n        count=count+temp;\\n      }\\n    }\\n    System.out.println(count);\\n  }\\n}\\n", "target": "126", "substitutes": {}}
{"code": "//package Contest090;\\n\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String []args)\\n    {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n        int first = sc.nextInt(),last = sc.nextInt();\\n        int cnt =0;\\n        for(int i = first;i<=last;i++)\\n        {\\n            String str1 = String.valueOf(i);\\n            StringBuilder sb = new StringBuilder(str1);\\n            sb = sb.reverse();\\n            String temp = sb.toString();\\n            //out.println(str1+\" \"+temp);\\n            if(str1.equals(temp))\\n                cnt++;\\n\\n        }\\n        out.println(cnt);\\n\\n        out.flush();\\n    }\\n\\n}\\n", "target": "104", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String main[]){\\n        Scanner sc = new Scanner(System.in);\\n        char[] a = sc.next().toCharArray();\\n        char[] b = sc.next().toCharArray();\\n        int tor= 0;\\n        for(int i = 0;i< a.length ;i++){\\n           tor += (a[i]==b[i]?1:0);\\n        }\\n        System.out.println(tor);\\n    }\\n}", "target": "243", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "cer", "or", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "com", "ss", "uc", "cr", "esc", "c", "scan", "osc", "spec", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "sec", "core", "sp", "acc", "rc", "ca", "cur", "cs", "cl", "pc", "exec", "ner", "sl", "ci", "sci"], "a": ["ba", "ab", "fa", "art", "aaa", "aa", "sa", "ata", "am", "array", "ha", "an", "c", "area", "ac", "A", "ga", "ad", "e", "p", "ea", "alpha", "sha", "pa", "f", "la", "ca", "as", "va", "na", "s", "ama", "asa", "da", "au", "x", "qa", "ae", "u", "ai", "sta"], "b": ["wb", "base", "ba", "ab", "cb", "h", "bin", "abb", "d", "bb", "pb", "v", "c", "r", "y", "db", "B", "nb", "e", "p", "bing", "bar", "f", "eb", "emb", "bs", "s", "lb", "l", "fb", "bas", "bd", "x", "u", "rb", "bis"], "tor": ["token", "obb", "vor", "ter", "creator", "cb", "nor", "length", "orus", "or", "unit", "TOR", "lor", "tool", "type", "ta", "cr", "tre", "future", "iter", "lt", "tta", "T", "t", " Tor", "cor", "tr", "pit", "Tor", "beta", "bor", "ty", "editor", "ractor", "tur", "cro", "contract", "cur", "tar", "class", "mor", "tan", "oker", "tra", "tie", "itter", "wt", "eor", "ti", "total", "to"], "i": ["id", "slice", "j", "lc", "ri", "h", "pi", "mu", "in", "d", "init", "ii", "cli", "z", "v", "io", "c", "start", "m", "ix", "abi", "r", "t", "gi", "k", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "di", "ini", "eni", "oi", "yi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "ni", "uri", "ai", "I"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint nlist[] = new int[n];\\n\t\tfor(int i = 1; i <= n; i++) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tnlist[a - 1] = i;\\n\t\t}\\n\t\tfor(int i=0 ; i < n ; i++) {\\n\t\t\tSystem.out.print(nlist[i] + \" \");\\n\t\t}\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "227", "substitutes": {"sc": ["sw", "cont", "ch", "lc", " Sc", "conn", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "con", "nc", "sch", "cc", "sh", "sec", "ctx", "sp", "src", "rc", "system", "anc", "sche", "ca", "na", "cur", "class", "sb", "cs", "cl", "pc", "asc", "cv", "mc", "sci"], "n": ["j", "h", "len", "sn", "ns", "in", "d", "no", "count", "z", "v", "c", "m", "r", "en", "y", "t", "ln", "nb", "k", "nt", "e", "ne", "p", "pos", "f", "net", "o", "w", "s", "N", "l", "num", "x", "nan", "u", "ni", "b", "name"], "nlist": ["numlist", "nlisted", "inumber", "lnumber", "lnlist", "snlisted", " ncount", "clist", "numList", "nList", "nnumber", "iList", "numcount", "numnumber", "lcount", "snlist", "ilist", "llist", "ncount", "lncount", "lList", "numberList", "ccount", " nList", "numberlist", "numberlisted", "icount", "lnList", " nlisted", "cList", "snList"], "i": ["id", "j", "api", "ri", "ami", "pi", "mu", "I", "in", "mi", "init", "ii", "ip", "z", "io", "abi", "c", "v", "start", "r", "y", "gi", "index", "k", "phi", "key", "e", "p", "fi", "f", "qi", "ji", "ui", "xi", "li", "multi", "o", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "info", "x", "zi", "ci", "u", "ni", "ti", "uri", "ai", "b"], "a": ["j", "ba", "ab", "oa", "aaa", "aa", "sa", "ata", "z", "an", "area", "at", "abs", "ac", "A", "ea", "p", "alpha", "f", "aj", "span", "la", "na", "va", "ca", "o", "sup", "da", "au", "ate", "qa", "u", "ai", "b", "name"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t// TODO ?????????????????????????????????????????????\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        \\n        int[] best = {0, 0, 0};\t\t// ??????????????????\\n        \\n        for(int i=0; i<10; i++){\\n            String line = br.readLine();\t\t\t// ????????????\\n            int height = Integer.parseInt(line);\t// ??\u00b0????????????\\n        \t\\n            if(height > best[0]){\t// ??\\????????????????????\u00b4???\\n            \tbest[2] = best[1];\\n            \tbest[1] = best[0];\\n            \tbest[0] = height;\\n            }\\n            else if(height > best[1]){\\n            \tbest[2] = best[1];\\n            \tbest[1] = height;\\n            }\\n            else if(height > best[2]){\\n            \tbest[2] = height;\\n            }\\n        }\\n        \\n        for(int h: best){\\n        \tSystem.out.println(h);\\n        }\\n\t}\\n\\n}", "target": "164", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n        public static void main(String[] args){\\n\\n                Scanner sc = new Scanner(System.in);\\n                String[] input = sc.nextLine().split(\" \");\\n                sc.close();\\n        int N,X,T;\\n        N = Integer.parseInt(input[0]);\\n        X = Integer.parseInt(input[1]);\\n        T = Integer.parseInt(input[2]);\\n\\n                int result= (N / X) * T ;\\n        if(N%X != 0){\\n            result += T;\\n        }\\n        System.out.println(result);\\n        }\\n}\\n", "target": "34", "substitutes": {"sc": ["sw", "isc", "sr", "ch", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "out", "ec", "nc", "sch", "cor", "sh", "cc", "sp", "src", "rc", "system", "anc", "cm", "cur", "sb", "cs", "cl", "pc", "ner", "text", "ssh", "parser", "asc", "stream", "cv", "reader", "mc", "sci"], "input": ["path", "format", "inner", "object", "amp", "error", "again", "file", "form", "comment", "in", "inc", "command", "array", "ip", "PUT", "inside", "not", "element", "word", "Input", "img", "request", "pull", "data", "join", "entry", "context", "include", "argument", "string", "inf", "feed", "image", "unknown", "view", "parse", "pattern", "text", "null", "load", "output", "raw", "step", "list", "op", "source", "config"], "N": ["Q", "Ne", "Ni", "Ns", "F", "E", "NM", "DN", "Sum", "No", "NB", "Num", "H", "Node", "A", "CNN", "NE", "NI", "Y", "NT", "Length", "Na", "NS", "n", "R", "L", "K", "W", "C", "O", "NA", "D", "M", "U", "S", "Z", "V", "P", "Size", "XX", "I", "G"], "X": ["Q", "CL", "Total", "J", "F", "xx", "E", "MX", "Ex", "FX", "And", "XY", "Test", "XP", "PE", "UX", "H", "WH", "DX", "TX", "Y", "Length", "XL", "L", "FF", "CT", "K", "W", "CI", "O", "C", "PH", "D", "ax", "U", "Z", "x", "ID", "P", "V", "Size", "IX", "XX", "I"], "T": ["Time", "Q", "Target", "Total", "Tab", "TT", "F", "E", "FT", "TS", "Test", "H", "A", "t", "TX", "B", "TB", "Y", "ET", "NT", "Length", "R", "L", "CT", "K", "TE", "W", "O", "C", "Type", "D", "M", "U", "S", "Z", "TH", "MT", "V", "TA", "P", "I", "G", "UT"], "result": ["token", "error", "correct", "function", "length", "Results", "Result", "term", "err", "report", "ULT", "grade", "winner", "root", "count", "goal", "type", "Test", "default", "response", "feature", "match", "r", "current", "MAX", "true", "card", "value", "data", "ret", "number", "R", "duration", "RET", "SE", "RESULTS", "test", "class", "score", "date", "code", "sum", "info", "results", "Success", "valid", "success", "diff", "complete", "TYPE", "total"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint i = sc.nextInt();\\n\t\tint a = i/100;\\n\t\tint b = i%100;\\n\t\tif (a<=12 && a>=1 && b<=12 && b>=1 ) {\\n\t\t\tSystem.out.println(\"AMBIGUOUS\");\\n\t\t} else if (a<=12 && a>=1) {\\n\t\t\tSystem.out.println(\"MMYY\");\\n\t\t} else if (b<=12 && b>=1) {\\n\t\t\tSystem.out.println(\"YYMM\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"NA\");\\n\t\t}\\n\t}\\n}", "target": "5", "substitutes": {"sc": ["sw", "sr", "ch", "soc", " Sc", "cb", "str", "Sc", " SC", "bc", "se", "SC", "sf", "sem", "ss", "uc", "esc", "sq", "c", "scan", "is", "sync", "sub", "ec", "nc", "cc", "sh", "sec", "sp", "ser", "src", "acc", "rc", "ca", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "ci", "g", "mc", "sci"], "i": ["j", "ami", "pi", "in", "d", "ii", "ip", "z", "v", "ori", "c", "is", "y", "index", "adi", "phi", "e", "p", "n", "f", "ui", "xi", "li", "iu", "multi", "o", "di", "ini", "oi", "l", "si", "bi", "x", "ci", "u", "ni", "mini", "ai", "I"], "a": ["aw", "api", "ba", "ab", "oa", "pi", "fa", "art", "ma", "aa", "sa", "d", "am", "ao", "aid", "an", "c", "area", "ac", "ia", "y", "ana", "A", "ga", "ada", "ad", "e", "p", "n", "alpha", "f", "ea", "pa", "aj", "la", "na", "as", "va", "ca", "s", "asa", "l", "da", "au", "x", "ae", "af", "u", "ai", "sta"], "b": ["wb", "j", "base", "ib", "h", "ab", "ba", "body", "cb", "abb", "bc", "aa", "d", "bb", "bh", "pb", "bf", "v", "c", "r", "y", "db", "B", "nb", "k", "e", "be", "p", "n", "mb", "f", "eb", "bs", "o", "sb", "lb", "l", "bi", "fb", "x", "u", "g", "rb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int z = gcd(sc.nextInt(), sc.nextInt());\\n        System.out.println(z);\\n        sc.close();\\n    }\\n\\n    private static int gcd(int x, int y) {\\n        if (x == 0) return y;\\n        return gcd(y % x, x);\\n    }\\n}\\n\\n", "target": "0", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "com", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "search", "nc", "sch", "sub", "cc", "sh", "core", "sp", "src", "rc", "system", "sche", "ca", "cur", "class", "sb", "cs", "cl", "pc", "ner", "ci", "cv", "sci"], "z": ["id", "nz", "j", "az", "gz", "cd", "d", "iz", "count", "cz", "c", "ez", "e", "p", "n", "f", "q", "zero", "stuff", "inf", "zh", "zie", "zz", "Z", "zen", "za", "l", "ze", "code", "zl", "zer", "zi", "yz", "zip", "b", "zo"], "x": ["id", "xxxx", "j", "px", "yx", "xx", " xx", "rx", "fx", "in", "d", "xy", "xt", "xxx", "v", "ix", "c", "m", "xs", "t", "index", "e", "ex", "p", "n", "f", "on", "xc", "xp", "xi", "width", "o", "w", "ax", "i", "val", "code", "l", "num", "xe", "dx", "X", "u", "dy", "size", "XX"], "y": ["py", "j", "yr", "a", " xx", "xx", " Y", "ady", "d", "ry", "count", " i", "yz", "v", "ix", "c", "ny", "yy", "year", "t", "ay", "value", "yo", "Y", "index", "yd", " error", "e", "cy", "p", "yn", "n", "f", "oy", "ym", "q", "ky", "o", "vy", "w", "ey", "i", "yi", "iy", "zy", "ya", "l", "X", "dy", "ye", "sy"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        String s = sc.next();\\n\\n        System.out.println(solve(s));\\n\\n        sc.close();\\n    }\\n\\n    static int solve(String s) {\\n        return s.lastIndexOf('Z') - s.indexOf('A') + 1;\\n    }\\n}", "target": "109", "substitutes": {"sc": ["sr", "enc", "sw", "ch", "lc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sec", "sh", "sp", "rc", "anc", "cm", "ca", "cur", "cs", "cl", "pc", "sl", "asc", "cv", "sci"], "s": ["lines", "gs", "ips", "fs", "su", "a", "ings", "str", "ters", "ns", "js", "rs", "sf", "in", "d", "services", "ss", "ps", "v", "asts", "c", "south", "abs", "is", "params", "parts", "search", "os", "input", "es", "strings", "rows", "ils", "states", "qs", "ds", "e", "ses", "n", "p", "f", "als", "ssl", "ids", "ans", "result", "sym", "string", "ws", "as", "o", "sb", "i", "its", "cs", "S", "l", "si", "ches", "plugins", "sv", "ops", "ms", "g", "ls", "b", "ts", "ins"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Main main = new Main();\\n        main.solve();\\n    }\\n    public void solve() {\\n        Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        int N = scan.nextInt();\\n        Point[] list = new Point[N];\\n        for (int i = 0; i < N; i++) {\\n            Point p = new Point();\\n            p.t = scan.nextInt();\\n            p.x = scan.nextInt();\\n            p.y = scan.nextInt();\\n            list[i] = p;\\n        }\\n        Point prev = new Point();\\n        prev.t = 0;\\n        prev.x = 0;\\n        prev.y = 0;\\n        boolean answer = true;\\n        for (int i = 0; i < N; i++) {\\n            Point current = list[i];\\n            int time = current.t - prev.t;\\n            int distance = prev.distance(current);\\n\\n            if (time == distance) {\\n                prev = current;\\n                continue;\\n            }\\n            if (time < distance || ((time - distance) % 2 != 0)) {\\n                answer = false;\\n                break;\\n            }\\n            prev = current;\\n        }\\n        System.out.println(answer ? \"Yes\" : \"No\");\\n    }\\n    class Point {\\n        int t;\\n        int x;\\n        int y;\\n        int distance(Point t) {\\n            return Math.abs(this.x - t.x) + Math.abs(this.y - t.y);\\n        }\\n    }\\n}\\n", "target": "221", "substitutes": {"scan": ["sc", "can", "slice", "ker", "sin", " scanner", "man", "look", "fan", "bin", "query", "se", "in", "ry", "connect", "io", "er", "an", "feature", "sync", "r", "out", "search", "read", "clean", "mer", "cor", "pack", "chan", "cat", "san", "plan", "n", "join", "ans", "bug", "result", "ser", "system", "row", "feed", "na", "run", "gram", "l", "Scan", "store", "kin", "ignore", "parse", "pin", "ner", "ann", "lin", "sign", "reader", "serv", "sci"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "length", "E", "No", "Num", "H", "Count", "network", "Number", "T", "B", "Y", "NT", "Na", "NS", "n", "R", "L", "K", "W", "NR", "Len", "C", "O", "NA", "D", "M", "KN", "Z", "S", "V", "X", "NN", "P", "Size", "I", "G"], "list": ["listed", "base", "left", "lp", "st", "detail", "part", "array", "table", "pe", "last", "get", "z", "v", "is", "lists", "live", "word", "out", "like", "data", "pre", "index", "chain", "batch", "n", "arr", "queue", "map", "result", "q", "li", "next", "test", "stack", "LIST", "rest", "lat", "l", "cl", "set", "info", "ist", "ls", "ll", "all", "b"], "i": ["id", "slice", "inner", "j", "ri", "pi", "mu", "mi", "d", "ip", "ii", "strength", "ori", "ix", "v", "io", "is", "m", "c", "start", "gi", "index", "phi", "e", "n", "fi", "qi", "f", "end", "ui", "xi", "li", "iu", "it", "multi", "eni", "b", "di", "ini", "oi", "ie", "chi", "si", "bi", "hi", "zi", "ci", "u", "ni", "ti", "uri", "ai", "I"], "p": ["pp", "port", "j", "vp", "api", "lp", "a", "po", "pi", "part", "d", "ip", "ps", "pe", "v", "at", "c", "r", "point", "fp", "pt", "post", "np", "pre", "wp", "k", "e", "n", "pa", "sp", "f", "obj", "br", "Point", "ap", "o", "pr", "s", "up", "per", "l", "pc", "patch", "P", "u", "g", "cp", "op", "b"], "t": ["port", "tm", "j", "yt", "ct", "st", "tp", "art", "in", "d", "ut", "table", "xt", "et", "ta", "type", "z", "at", "v", "c", "m", "pointer", "pt", "point", "out", "this", "qt", "T", "tr", "tt", "dt", "nt", " T", "e", "ty", "n", "f", "title", "q", "cart", "tim", "ot", "it", "att", "let", "o", "test", "w", "class", "s", "target", "lat", "l", "wt", "set", "tz", "u", "ti", "g", "ant", "b", "ts", "name"], "x": ["id", "px", "left", "h", "length", "rx", "fx", "in", "d", "xy", "ip", "xt", "z", "ix", "v", "c", "m", "point", "tx", "xs", "value", "index", "data", "n", "ex", "on", "xi", "width", "image", "w", "ax", "el", "lat", "l", "dx", "X", "u", "step", "name"], "y": ["tick", "py", "j", "ch", "yt", "h", "a", "yx", "ady", "d", "ry", "gy", "type", "z", "v", "ny", "c", "m", "yy", "year", "ay", "value", "yo", "Y", "cy", "ty", "n", "oy", "ym", "ot", "ky", "o", "vy", "iy", "ey", "col", "yi", "ish", "zy", "ya", "w", "l", "yl", "asy", "dy", "ye", "b", "sy"], "prev": ["back", "nav", "orig", "Previous", "old", "start", "iv", "r", "recent", "rev", "existing", "vious", "temp", "global", "root", "master", "this", "pre", "archive", "older", "Prev", "next", "tmp", "cur", "keep", "self", "copy", "res", " previous", "original", "error", "vert", "right", "init", "winner", "past", "iter", "trial", "br", "skip", "adj", "pres", "before", "block", "history", "jp", "post", "order", "pri", "cmp", "j", "other", "rec", "last", "ori", "v", "prefix", "future", "wp", "obj", "after", "cache", "it", "coll", "parent", "info", "reverse", "first", "initial", "op"], "current": ["original", "instance", "left", "api", "loc", "counter", "remote", "today", "correct", "option", "java", "comment", "other", "global", "Current", "latest", "cover", "example", "client", "past", "child", "old", "follow", "reported", "master", "now", "c", "complete", "future", "response", "this", "point", "r", "recent", "core", "pre", "archive", "continue", "obj", "missing", "result", "active", "next", "currently", "large", "cur", "existing", "skip", "per", "parent", "former", "component", "common", "local", "valid", "critical", "copy", "initial", "temp"], "time": ["id", "Time", "speed", "change", "money", "frequency", "h", "height", "length", "timeout", "volume", "price", "delay", "count", "start", "way", "position", "point", "shift", "year", "dist", "size", "progress", "value", "data", "how", "mode", "duration", "age", "q", "power", "times", "image", "gap", "date", "weight", "ime", "video", "diff", "clock", "cost", "depth", "step", "scale", "rate", "work"], "distance": ["close", "speed", "ance", "path", "base", "Distance", "address", "rank", "right", "height", "length", "resolution", "move", "step", "device", "angle", "d", "grade", "volume", "price", "delay", "count", "draw", "last", "pointer", "start", "way", " Distance", "feature", "position", "match", "point", "shift", "dist", "different", "progress", "value", " difference", "data", "division", "mode", "duration", "density", "direction", "power", "next", "width", "string", "erence", "damage", "connection", "div", "range", "sequence", "quality", "gap", "score", "radius", "weight", "ime", " distances", "diff", "cost", "depth", "size", "edge", "transform", "scale", "source", "degree"], "answer": [" say", " agree", "blank", "knowledge", "object", "address", "fill", "avoid", "evidence", "answered", "option", " answered", "fix", "offset", " array", "term", "ace", "cover", "array", "swers", "ask", "iq", "now", " cover", "response", "see", " guess", "ack", "search", "true", " blank", " response", "support", "Answer", "reply", "number", "uit", "question", "accept", "know", "result", " oval", " answers", "string", "next", " explanation", " solution", "sign", "say", "field", "parent", " question", "don", " answering", "ell", "size", "done", "agree", "issue"]}}
{"code": "import java.util.HashSet;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tHashSet<Integer> a = new HashSet<>();\\n\t\tint k=0;\\n\t\t\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\tk=sc.nextInt();\\n\t\t\ta.add(k);\\n\t\t}\\n\t\t\\n\t\tif(a.size()==n) {\\n\t\t\tSystem.out.println(\"YES\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\t\t\\n\t\tsc.close();\\n\t}\\n}", "target": "44", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "soc", "loc", "cer", "Sc", "bc", "se", "SC", "sf", "scope", "sem", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "ec", "tc", "nc", "sch", "cc", "sh", "sec", "ctx", "sp", "dc", "acc", "src", "rc", "system", "gc", "sche", "ca", "na", "cur", "class", "sb", "cs", "cl", "pc", "parser", "cv", "sci"], "n": ["j", "nn", "h", "len", "sn", "ns", "d", "count", "nl", "kn", "z", "v", "c", "m", "en", "y", "network", "nc", "t", "ln", "nb", "nt", "e", "number", "p", "f", "net", "o", "w", "s", "fn", "N", "l", "num", "x", "ni", "u", "size", "b"], "a": ["aw", "ba", "ab", "asha", "ma", "aa", "sa", "ata", "am", "ao", "aux", "array", "an", "area", "c", "ac", "ana", "ack", "A", "ga", "mA", "ea", "p", "alpha", "pa", "ans", "ca", "as", "va", "ap", "o", "ama", "asa", "da", "au", "ora", "auto", "u", "ai", "b"], "k": ["id", "ku", "j", "ijk", "sk", "ek", "kick", "d", "dk", "ko", "ask", "z", "v", "c", "m", "spec", "ok", "y", "ck", "kind", "t", "key", "ak", "e", "p", "kat", "f", "ki", "K", "ik", "q", "o", "kid", "kw", "kin", "mk", "x", "u", "unk", "b", "work"], "i": ["id", "slice", "j", "lc", "ri", "pi", "mu", "d", "init", "ii", "ip", "z", "v", "io", "abi", "m", "y", "gi", "phi", "p", "f", "qi", "ji", "ik", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "oi", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "fi", "ai", "I"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s=sc.next();\\n\t\t//String t= sc.next();\\n\t\t//int n = sc.nextInt();\\n\t\t//int m = sc.nextInt();\\n\t\t//int k = sc.nextInt();\\n\t\tlong count=0;\\n\t\tlong count1=0;\\n\t\tint[] array = new int[3];\\n\t\t/*array[0]=n-m;\\n\t\tarray[1]=n*m;\\n\t\tarray[2]=n+m;*/\\n\t\tArrays.sort(array);\\n\\n\t\t/*for(int i=0;i<3;i++) {\\n\t\t\tif(s.substring(i,i+1).equals(t.substring(i,i+1))) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}*/\\n\\n\t\tif(s.equals(\"Sunny\")) {\\n\t\t\tSystem.out.println(\"Cloudy\");\\n\t\t}else if(s.equals(\"Cloudy\")){\\n\t\t\tSystem.out.println(\"Rainy\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"Sunny\");\\n\t\t}\\n\\n\t\t//System.out.println(n*n*n);\\n\t}\\n}\\n\\n\\n", "target": "60", "substitutes": {"sc": ["sw", "isc", " Sc", "st", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "spec", "ec", "nc", "cc", "sh", "sec", "desc", "proc", "sp", "acc", "rc", "cs", "cl", "pc", "ner", "sl", "parser", "asc", "sci"], "s": ["lines", "gs", "objects", "ings", "ns", "d", "services", "v", "m", "r", "t", "es", "strings", " objects", " strings", "names", "p", "n", "e", "f", "i", "l", "g", "ls", " inputs", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\tint[][] arrayA = new int[n][m];\\n\t\tint[] arrayB = new int[m];\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tfor(int j = 0; j < m; j++){\\n\t\t\t\tarrayA[i][j] = scan.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i = 0; i< m; i++){\\n\t\t\tarrayB[i] = scan.nextInt();\\n\t\t}\\n\t\tint intCount = 0;\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tintCount = 0;\\n\t\t\tfor(int j = 0; j < m; j++){\\n\t\t\t\tintCount += arrayA[i][j] * arrayB[j];\\n\t\t\t}\\n\t\t\tSystem.out.println(intCount);\\n\t\t}\\n\t\tscan.close();\\n\t}\\n}", "target": "185", "substitutes": {"scan": ["sc", "can", "slice", "inner", " scanner", "man", "sin", "ban", "nn", "sys", "fan", "or", "bin", "query", "spin", "se", "in", "conv", "report", "ry", "server", "connect", "er", "an", "sync", "r", "see", "out", "search", "read", "clean", "match", "con", "ln", "cat", "san", "plan", "join", "ver", "watch", "wan", "ans", "ser", "span", "bug", "walk", "system", "row", "na", "pan", "run", "skip", "l", "Scan", "kin", "ignore", "parse", "pin", "ner", "reader", "ann", "sign", "gen", "get", "serv"], "n": ["nn", "a", "len", "sn", "ns", "in", "d", "z", "v", "c", "an", "r", "y", "en", "nc", "t", "mn", "nb", "k", "nt", "cn", "e", "ne", "p", "un", "f", "net", "o", "M", "s", "w", "rn", "N", "l", "num", "nm", "x", "ner", "u", "b"], "m": ["middle", "man", "h", "model", "a", "mu", "fm", "in", "mi", "d", "am", "md", "sm", "z", "v", "c", "an", "im", "r", "y", "mn", "k", "e", "p", "f", "mm", "cm", "hm", "o", "M", "w", "s", "bm", "l", "N", "num", "nm", "x", "rm", "u", "all", "mini", "size", "mc", "b"], "arrayA": ["ArrayA", "databasea", "arraya", "rayCA", " arrayLA", "databaseB", "arrayArray", "ArrayB", "ArrayCA", "arrayLA", "databaseArray", "rayB", " arrayArray", "ArrayLA", "rayA", " arraya", "databaseA", "arrayCA", " arrayCA", "Arraya", "rayLA", "ArrayArray", "rayArray"], "arrayB": ["ArrayA", "arrayb", "Arrayb", "ArrayB", " arrayY", "listA", "arrayY", "listBB", " arrayb", "rayY", "rayB", "arrA", " arrayBB", "rayA", "arrBB", "arrB", "listB", "ArrayY", "listb", "arrayBB", "arrb", "ArrayBB", "rayBB"], "i": ["id", "api", "ri", "h", "a", "pi", "mu", "ij", "in", "mi", "init", "ii", "ip", "cli", "ir", "ori", "v", "io", "ix", "z", "c", "iv", "y", "gi", "phi", "e", "p", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "iu", "it", "eni", "b", "di", "ini", "o", "oi", "ie", "yi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "fi", "ai", "I"], "j": ["id", "obj", "ch", "jet", "h", "ja", "J", "a", "js", "ij", "d", "jj", "bj", "ii", "z", "v", "ix", "je", "y", "jc", "jl", "k", "key", "e", "ion", "p", "qi", "f", "ji", "aj", "ik", "q", "ui", "xi", "li", "it", "o", "pr", "w", "ie", "l", "si", "uj", "bi", "hi", "x", "jo", "oj", "u", "g", "jp", "b"], "intCount": [" intLoop", "indCount", "incSize", "ntLoop", "integerCounter", "inccount", " intLast", "intSize", "intUse", "ntCounter", " intSize", "interUse", "indUse", "floatCount", "floatcount", "integerUse", " intCounter", "floatLast", " intcount", "intLast", "incCount", "intLoop", "floatSize", "integerCount", "interSize", "ntCount", "intcount", "ntcount", "indCounter", "interCount", "indLoop", "indSize", "floatCounter", "ntLength", "intLength", " intLength", "intCounter", "integerSize", "interCounter", "indLength", "incLast"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\t\\n\t\tlong sumStep = 0;\\n\t\tint maxA = sc.nextInt();\\n\t\tfor (int i = 1; i < n; i++) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tmaxA = Math.max(maxA, a);\\n\t\t\tsumStep += maxA - a;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(sumStep);\\n\t\t\\n\t\tsc.close();\\n\t}\\n}\\n\\n\\n", "target": "202", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "this", "tc", "ec", "search", "nc", "sch", "sub", "cc", "cor", "sec", "ctx", "sp", "src", "rc", "system", "anc", "sche", "ca", "cam", "cur", "class", "sb", "cs", "cl", "pc", "ner", "ci", "asc", "parser", "cv", "mc", "sci"], "n": ["j", "nn", "conn", "sn", "ns", "in", "d", "count", "z", "v", "c", "m", "en", "y", "nc", "t", "min", "nb", "k", "nt", "ne", "e", "p", "f", "net", "q", "max", "o", "w", "s", "nin", "N", "l", "num", "x", "ni", "u", "b"], "sumStep": ["totalStep", "totalScale", "sumMax", " sumMax", " sumBreak", " sumstep", "sizeStep", "meanstep", "SumSign", "SumStep", "sumstep", "sumScale", "SumBreak", "scaleStep", " sumSign", "meanSign", "scaleSign", "totalSign", "sizestep", "sumBreak", "totalstep", " sumScale", "scaleScale", "SumMax", "scalestep", "sumSign", "sizeMax", "sizeBreak", "Sumstep", "meanStep"], "maxA": ["maxa", " maxArray", " maxN", "lasta", "minN", "ranka", "rankA", "MaxB", "axB", "maxN", "minAs", "rankN", "minA", "axArray", "MaxArray", "minArray", "axA", "MaxA", "axa", "lastN", "lastArray", " maxB", "minB", "mina", "lastA", "Maxa", "maxArray", "maxAs", "rankAs", " maxAs", " maxa", "maxB"], "i": ["id", "j", "pi", "in", "d", "mi", "ii", "z", "v", "ix", "start", "y", "min", "gi", "index", "e", "p", "f", "qi", "ui", "li", "iu", "multi", "o", "b", "di", "ini", "oi", "si", "num", "bi", "hi", "x", "ci", "u", "ni", "ti", "fi", "ai", "I"], "a": ["ba", "ab", "fa", "ma", "offset", "aa", "sa", "ata", "z", "an", "c", "area", "m", "ac", "ia", "y", "ana", "A", "ga", "e", "p", "pa", "alpha", "f", "ea", "aj", "la", "wa", "next", "active", "va", "as", "ca", "na", "o", "da", "au", "x", "qa", "af", "auto", "u", "ai", "b", "sta"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\t// a\u3001b\u306e\u5165\u529b\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\\n\t\t// \u7a4d\u3092\u8a08\u7b97\\n\t\tint c = a * b;\\n\\n\t\t// \u5076\u6570\u306a\u3089'Even'\u3001\u5947\u6570\u306a\u3089'Odd'\u3092\u51fa\u529b\\n\t\tif(isEven(c)){\\n\t\t\tSystem.out.println(\"Even\");\\n\t\t}else{\\n\t\t\tSystem.out.println(\"Odd\");\\n\t\t}\\n\t}\\n\\n\tstatic boolean isEven(int n){\\n\t\tif(n%2 == 0){\\n\t\t\treturn true;\\n\t\t}else{\\n\t\t\treturn false;\\n\t\t}\\n\t}\\n\\n}", "target": "112", "substitutes": {"sc": [" rc", " Sc", " ser", "Sc", "SC", "sa", " res", " scr", "ss", "an", "sq", "scan", " err", " cont", " sl", " annot", " ans", " scorer", " subp", " eng", " acc", "sb", "gram", " pars", "ann", " ann", " arr", "sci"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String args[]){\\n        int count = 0;\\n        String ans[] = {\"No\",\"Yes\"};\\n        Scanner sc = new Scanner(System.in);\\n        String str = sc.next();\\n        char a[] = new char[str.length()];\\n        for(int i = 0;i < str.length();i++){\\n            a[i] = str.charAt(i);\\n        }\\n        if(a[0]==a[1]&&a[1]==a[2]&&a[2]==a[3]){\\n            \\n        }else if(a[0]==a[1]&&a[2]==a[3]){\\n            count++;\\n        }else if(a[0]==a[2]&&a[1]==a[3]){\\n            count++;\\n        }else if(a[0]==a[3]&&a[1]==a[2]){\\n            count++;\\n        }\\n        System.out.print(ans[count]);\\n    }\\n}", "target": "33", "substitutes": {"count": ["id", "base", "counter", "check", "length", "len", "part", "build", "no", "err", "ind", "group", "limit", "last", "race", "type", "child", "call", "c", "start", "now", "match", "Count", "index", "key", "number", "p", "n", "add", "f", "cache", "max", "more", "char", "string", "test", "low", "coll", "cur", "col", "allow", "parent", "code", "sum", "num", "info", "weight", "loop", "order", "depth", "size", "list", "b", "name", "work"], "ans": ["can", "anas", "vals", "ins", "ats", "ings", "ns", "ints", "AN", "sa", "aus", "atan", "nas", "lang", "std", "an", "ras", "ars", " names", "parts", "en", "ana", "aos", "A", "cas", "ents", " na", " an", "ctx", "arr", "ids", "ks", " answers", "result", "ANS", "na", "as", " ar", "ants", "types", "ann", " res", "list", " arr", "res"], "sc": ["sw", "enc", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "scope", "uc", "cr", "esc", "iss", "c", "scan", "osc", "sync", "spec", "out", "ec", "nc", "sch", "sec", "sh", "cc", "cus", "desc", "proc", "sp", "rc", "system", "anc", "s", "cs", "si", "pc", "ner", "text", "ci", "asc", "stream", "mc", "sci"], "str": ["sr", "enc", "path", "strip", "Str", "form", "st", "line", "part", "in", "err", "er", "c", "txt", "spec", "r", "iter", "sync", "STR", "tr", "input", "stri", "data", "obj", "n", "sp", "f", "arr", "br", "char", "string", "dec", "wr", "coll", "pass", "pr", "s", "tri", "div", "fr", "text", "sl", "dr", "b", "name"], "a": ["one", "app", "ma", "aaa", "sa", "am", "m", "ars", "r", "parts", "ana", "la", "na", "va", "asa", "x", "ae", "temp", "another", "d", "z", "ia", "this", "A", "input", "data", "index", "e", "ea", "alpha", "f", "string", "ya", "auto", "u", "ar", "sta", "ba", "ab", "asha", "aa", "an", "c", "area", "at", "ac", "y", "tta", "p", "n", "pa", "off", "wa", " A", "active", "za", "action", "id", "ast", "api", "art", "about", "array", "not", "t", "acs", "ga", "k", "ad", "ca", "as", "it", "o", "s", "something", "ie", "l", "aka", "b", "to"], "i": ["id", "slice", "j", "lc", "ri", "h", "pi", "mu", "part", "I", "d", "ii", "ip", "z", "v", "io", "c", "ori", "m", "ix", "y", "gi", "vis", "index", "e", "p", "n", "f", "qi", "ui", "xi", "li", "it", "multi", "o", "eni", "di", "ini", "oi", "yi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "ti", "uri", "ai", "b"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args) {\\n    try {\\n      Scanner scn = new Scanner(System.in);\\n      int a, b;\\n\\n      a = Integer.parseInt(scn.next());\\n      b = Integer.parseInt(scn.next());\\n\\n      if(a*b%2 == 1){\\n       System.out.println(\"Odd\");\\n      }else if(a*b%2 == 0){\\n       System.out.println(\"Even\");\\n      }\\n\\n    }\\n    catch (Exception e) {\\n\\n    }\\n  }\\n}\\n", "target": "112", "substitutes": {"scn": ["scp", " ScN", " Scn", "SCN", "Scnn", "scb", " scns", "Scb", " Scw", "SCner", " scner", "scw", "SCw", "SCb", "SCns", " scb", "Scner", " scp", " scN", "SCnn", "scner", " scw", "Scp", "scnn", "Scn", "scns", "scN", "SCp", " scnn", " Scb", "SCn", "Scns"], "a": ["ba", "ab", "oa", "art", "fa", "ma", "aa", "sa", "am", "an", "c", "area", "ac", "ia", "y", "sta", "A", "ga", "mA", "ad", "e", "pa", "n", "alpha", "p", "ea", "f", "aj", "la", "ca", "va", "as", "na", "ama", "da", "au", "x", "qa", "ae", "af", "auto", "u", "ai"], "b": ["j", "base", "ba", "ab", "cb", "ib", "body", "h", "abb", "aa", "d", "bb", "bf", "z", "v", "abc", "c", "ob", "m", "boot", "r", "y", "db", "A", "B", "nb", "k", "beta", "e", "ad", "p", "n", "mb", "f", "pa", "eb", "emb", "bs", "o", "w", "sb", "s", "i", "lb", "l", "fb", "x", "u", "g", "rb"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\\n\\n\\n\tpublic static void main(String[] args) {\\n\\n\\n\t\tScanner sc = new Scanner(System.in);\t\t\t//\u6587\u5b57\u306e\u5165\u529b\\n\t\tint N = sc.nextInt();\\n\t\tint ans = 0;\\n\t\tint numans = 0;\\n\\n\t\tfor(int i = 1;i <= N;i++){\\n\t\t\tint sum = counttwo(i);\\n\t\t\tans = Math.max(ans, sum);\\n\t\t\tif(sum == ans){\\n\t\t\t\tnumans = i;\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tSystem.out.println(numans);\\n\\n\\n\t}\\n\\n\tstatic int counttwo(int num){\t\t\t\t\t//2\u3067\u5272\u308c\u308b\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\\n\t\tint count = 0;\\n\t\twhile(num % 2 == 0){\\n\t\t\tcount++;\\n\t\t\tnum /= 2;\\n\\n\t\t}\\n\t\treturn count;\\n\t}\\n\\n}\\n\\n\\n", "target": "225", "substitutes": {"sc": [" rc", " Sc", " app", " ser", "Sc", " SC", "bc", "se", "SC", " scr", "ss", "c", "scan", "r", " cont", " sp", " sl", "rc", "sb", "gram", " src", " pars", "parser", "ann", " res", " arr", "inst"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\\n\t\tint ans = 1;\\n\t\twhile (ans <= 1250) {\\n\t\t\tif ((int) (ans * 0.08) == A && (int) (ans * 0.1) == B) {\\n\t\t\t\tSystem.out.println(ans);\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t\tans++;\\n\t\t}\\n\t\tSystem.out.println(-1);\\n\t}\\n\\n\t//\u4ee5\u4e0b\u3001\u81ea\u4f5c\u30e9\u30a4\u30d6\u30e9\u30ea\\n\\n\t/*\\n\t\tint N = sc.nextInt();\\n\\n\t\tint[] a = new int[N];\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\ta[i] = sc.nextInt();\\n\\n\t\tString s = sc.next();\\n\\n\t\tString[] a = new String[N];\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\ta[i] = sc.next();\\n\\n\t\tint[][] a = new int[N][2];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ta[i][0] = sc.nextInt();\\n\t\t\ta[i][1] = sc.nextInt();\\n\t\t}\\n\t\tArrays.sort(a, (x, y) -> Integer.compare(x[0], y[0]));\\n\\n\t\tList<Integer> list = new ArrayList<>();\\n\\n\t\tSet<Integer> set = new HashSet<>();\\n\\n\t\tMap<Integer, Integer> map = new HashMap<>();\\n\\n\t\tnextLine\u306e\u3068\u304d\u306f\\n\t\tScanner sc = new Scanner(System.in);\\n\t */\\n\\n\t//\u7e70\u308a\u8fd4\u3057\u4e8c\u4e57\u6cd5\u306b\u3088\u308b,\u3079\u304d\u4e57\u8a08\u7b97\u3067\u5270\u4f59\u3092\u8fd4\u3059\\n\tpublic static long modPow(long x, long n, final long mod) {\\n\t\tlong sum = 1;\\n\t\twhile (n > 0) {\\n\t\t\tif ((n & 1) == 1) { //\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u305f\u3089\\n\t\t\t\tsum = (sum * x) % mod; //x^2^k1 * x^2^k2 * x^2^k3 * \u30fb\u30fb\u30fb\\n\t\t\t}\\n\t\t\tx = (x * x) % mod; //((x^2)^2)^2 \u30fb\u30fb\u30fb\\n\t\t\tn >>= 1;\\n\t\t}\\n\t\treturn sum;\\n\t}\\n\\n\t//\u7d44\u307f\u5408\u308f\u305b\u306e\u6570nCr\u3092\u8a08\u7b97\u3057\u5270\u4f59\u3092\u8fd4\u3059\\n\tpublic static long calcNumOfCombinationMod(long n, int r, final long mod) {\\n\t\tlong num = 1;\\n\t\tfor (int i = 0; i < r; i++) {\\n\t\t\tnum = (num * (n - i)) % mod;\\n\t\t\tnum = (num * modPow(i + 1, mod - 2, mod)) % mod;\\n\t\t}\\n\t\treturn num;\\n\\n\t}\\n\\n\t//\u7d44\u307f\u5408\u308f\u305b\u306e\u6570nCr\u3092\u8a08\u7b97\\n\tpublic static int calcNumOfCombination(int n, int r) {\\n\t\tint num = 1;\\n\t\tfor (int i = 1; i <= r; i++) {\\n\t\t\tnum = num * (n - i + 1) / i;\\n\t\t}\\n\t\treturn num;\\n\t}\\n\\n\t//\u968e\u4e57\\n\tpublic static int fact(int n) {\\n\t\tif (n == 1 || n == 0)\\n\t\t\treturn 1;\\n\t\telse\\n\t\t\treturn n * fact(n - 1);\\n\t}\\n\\n\t//\u6307\u5b9a\u3057\u305f\u5024\u4ee5\u4e0a\u306e\u8981\u7d20\u304c\u6700\u521d\u306b\u73fe\u308c\u308b\u4f4d\u7f6e\\n\t//\u8981\u7d20\u306e\u6570\u306f+1\uff08\u914d\u5217\u306e\u30ba\u30ec)\\n\tpublic static long lowerBound(int n, long[] x, long y) {\\n\t\tint left = 0;\\n\t\tint right = n;\\n\t\twhile (left < right) {\\n\t\t\tint mid = (left + right) / 2;\\n\t\t\tif (x[mid] < y) {\\n\t\t\t\tleft = mid + 1;\\n\t\t\t} else {\\n\t\t\t\tright = mid;\\n\t\t\t}\\n\t\t}\\n\t\treturn left;\\n\t}\\n\\n\t//\u6307\u5b9a\u3057\u305f\u5024\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u304c\u6700\u521d\u306b\u73fe\u308c\u308b\u4f4d\u7f6e\\n\t//\u8981\u7d20\u306e\u6570\u306f+1\uff08\u914d\u5217\u306e\u30ba\u30ec)\\n\tpublic static long upperBound(int n, long[] x, long y) {\\n\t\tint left = 0;\\n\t\tint right = n;\\n\t\twhile (left < right) {\\n\t\t\tint mid = (left + right) / 2;\\n\t\t\tif (x[mid] <= y) {\\n\t\t\t\tleft = mid + 1;\\n\t\t\t} else {\\n\t\t\t\tright = mid;\\n\t\t\t}\\n\t\t}\\n\t\treturn left;\\n\t}\\n\\n\t//\u6700\u5927\u516c\u7d04\u6570\\n\tpublic static long gcd(long a, long b) {\\n\t\tif (a < b)\\n\t\t\treturn gcd(b, a);\\n\t\tlong c = 0;\\n\t\tc = a % b;\\n\t\tif (c == 0)\\n\t\t\treturn b;\\n\t\treturn gcd(b, c);\\n\t}\\n\\n\t//\u6700\u5c0f\u516c\u500d\u6570\\n\tpublic static long lcm(long m, long n) {\\n\t\treturn m * n / gcd(m, n);\\n\t}\\n\\n\t//\u7d20\u6570\u5224\u5b9a\\n\tpublic static boolean isPrime(int n) {\\n\t\tif (n < 2)\\n\t\t\treturn false;\\n\t\tif (n == 2)\\n\t\t\treturn true;\\n\t\tif (n % 2 == 0)\\n\t\t\treturn false;\\n\\n\t\tfor (int i = 3; i * i <= n; i += 2) {\\n\t\t\tif (n % i == 0)\\n\t\t\t\treturn false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}\\n\\n//\u4ee5\u4e0b\u3001\u9ad8\u901f\u30b9\u30ad\u30e3\u30ca\u30fc\u30af\u30e9\u30b9\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "121", "substitutes": {"sc": ["sw", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "spec", "tc", "ec", "nc", "cc", "sec", "cus", "core", "ctx", "sp", "rc", "system", "anc", "NC", "ca", "sb", "cs", "cl", "pc", "ner", "RC", "ci", "asc", "cv", "sci"], "A": ["DA", "As", "An", "AR", "a", "AN", "MA", "AB", "AS", "AP", "AD", "Ab", "AA", "IA", "Alpha", "AI", "Y", "SA", "PA", "Na", "AM", "API", "AV", "C", "CA", "ASC", "NA", "Az", "KA", "HA", "S", "LA", "X", "AF", "TA", "P", "AC", "RA"], "B": ["BI", "F", "BL", "E", "LB", "EB", "I", "DB", "CB", "AB", "FB", "Bi", "NB", "BF", "SB", "UB", "MB", "Bs", "TB", "Y", "BB", "R", "L", "QB", "WB", "BA", "IB", "BC", "O", "C", "GB", "D", "BS", "S", "N", "OB", "P", "VB", "BD", "b", "G"], "ans": [" scans", "opens", "aces", "outs", "ats", "a", "cons", "lan", "sk", "ns", "ens", "AN", "aus", "ls", "atan", "ions", "amps", "vers", "an", "asts", "scan", "ras", "ars", "parts", "ases", "olds", "os", "xs", "aned", "cas", "rows", "es", "offs", "annels", "anch", "ents", "ds", "names", "ids", "ks", "span", "arts", "anc", "ANS", "na", "as", "blocks", "faces", "unks", "s", "ays", "cs", "books", "ends", "ants", "vs", "eps", "results", "ann", "posts", "reads", "ins"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    long N = Long.parseLong(sc.next());\\n    long M = (int)Math.sqrt(N);\\n    long Re = N+1;\\n    for(int i = 0;i<M;i++){\\n      if(N%(M-i)==0&&Re>M-i+N/(M-i)){\\n        Re = M-i+N/(M-i);\\n      }\\n    }\\n    System.out.println(Re-2);\\n  }\\n}", "target": "157", "substitutes": {"sc": ["sw", "ch", "lc", "soc", " Sc", "cb", "Sc", " SC", "bc", "se", "SC", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "out", "ec", "sub", "nc", "sch", "cc", "sh", "desc", "sp", "src", "acc", "rc", "system", "cur", "cs", "l", "Scan", "cl", "pc", "parse", "ner", "exec", "parser", "g", "stream", "sci"], "N": ["Q", "ONE", "Ne", "Ni", "J", "Ns", "F", "E", "NM", "NL", "No", "Num", "H", "Node", "Number", "T", "CNN", "NE", "Y", "NT", "NS", "n", "R", "L", "ND", "K", "W", "Len", "C", "O", "MN", "D", "SN", "PIN", "U", "S", "Z", "V", "X", "P", "Size", "I", "G"], "M": ["MC", "JM", "Q", "Mo", "DM", "MF", "J", "IM", "F", "E", "NM", "MX", "MA", "Mi", "Part", "FM", "m", "Multi", "OM", "H", "LM", "A", "T", "B", "Y", "R", "L", "AM", "CM", "RM", "MM", "W", "O", "C", "MN", "D", "VM", "U", "S", "Z", "Ms", "MT", "V", "X", "P", "MD", "MI", "I", "G"], "Re": ["JM", "Mor", "Ni", "Conf", "Par", "RE", "F", "Se", "E", "Rec", "Rem", "Split", "Rex", "Result", "Mass", "Ref", "Ex", "Repeat", "Mal", "Record", "Com", "Con", "Num", "Rev", "r", "Large", "Co", "Rate", "Rel", "Code", "Release", "Repl", "re", "De", "Na", "RI", "R", "Counter", "Ra", "RM", "Wr", "Rh", "Reb", "Mar", "Return", "Resp", "Rep", "Res", "Response", "Rs", "Gene", "Ret", "Rest"], "i": ["id", "j", "one", "ri", "h", "length", "pi", "mu", "part", "I", "in", "mi", "init", "ii", "ip", "z", "v", "io", "c", "start", "m", "r", "t", "gi", "k", "phi", "e", "p", "n", "f", "qi", "ji", "end", "ui", "xi", "li", "inf", "iu", "it", "multi", "o", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "mini", "b"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.nextLine();\\n\t\tlong sum = 0;\\n\t\tint j = Integer.valueOf(s);\\n\t\tfor (int i = 1; i <= j; i++) {\\n\t\t\tif((i % 3 != 0 && i % 5 != 0)) {\\n\t\t\t\tsum += i;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t}\\n\\n}\\n", "target": "55", "substitutes": {"sc": ["sw", "enc", "soc", " Sc", "st", "str", "Sc", " SC", "bc", "se", "sf", "SC", " scr", "ss", "uc", "cr", "esc", "c", "scan", "osc", "spec", "sync", "ec", "nc", "cc", "sec", "sh", "sp", "src", "acc", "ocr", "rc", "anc", "class", "cs", "cl", "pc", "ner", "sl", "ci", "asc", "sci"], "s": ["sql", "gs", "fs", "su", "a", "line", "str", "ns", "rs", "sf", "in", "d", "ss", "ps", "v", "c", "m", "r", "strings", "e", "ses", "p", "f", "string", "ws", "b", "sb", "S", "l", "si", "g", "u", "ls", "sv", "source"], "sum": ["hash", "vol", "h", "length", "sa", "d", "Sum", "summary", "count", "v", "c", "spread", "sim", "miss", "out", "min", "sh", "mean", "index", "ass", "n", "alpha", "f", "sp", "net", "result", "max", "fat", "li", "cal", "average", "b", "use", "up", "sign", "l", "num", "si", "weight", "sup", "info", "loss", "sam", "parse", "u", "cost", "size", "um", "scale", "total"], "j": ["h", "J", "section", "length", "pi", "part", "ij", "d", "ii", "count", "z", "v", " n", "c", "m", "y", "index", "k", "e", "p", "n", "pos", "f", "ji", "ity", "o", "l", "si", "uj", "note", "x", "g", "jp", "size", "b"], "i": ["id", "slice", "ri", "length", "pi", "mu", "in", "d", "init", "ii", "ip", "z", "v", "io", "abi", "start", "c", "gi", "index", "k", "phi", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "ni", "fi", "ai", "uri", "I"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s=sc.next();\\n\t\tint k=sc.nextInt();\\n\\n\t\tif(k==10) {\\n\t\t\tSystem.out.println(s.length());\\n\t\t}else {\\n\t\t\tlong n=0;\\n\t\t\twhile(Math.pow(k,n)<Long.valueOf(s)+1) {\\n\t\t\t\tn++;\\n\t\t\t}\\n\t\t\tSystem.out.println(n);\\n\t\t}\\n\t}\\n}\\n\\n", "target": "219", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", "com", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "cor", "sec", "sp", "ser", "src", "rc", "anc", "ca", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "sl", "ci", "asc", "sci"], "s": ["gs", "sg", "su", "a", "str", "sk", "js", "ns", "sn", "services", "ss", "ps", "sets", "v", "c", "is", "abs", "south", "spec", "parts", "os", "xs", "strings", "es", "qs", "ds", "ses", "p", "f", "ks", "string", "ws", "o", "sb", "cs", "S", "l", "si", "u", "ls", "sv", "ins"], "k": ["id", "ku", "j", "sk", "kl", "kick", "d", "dk", "ko", "ka", "kn", "v", "c", "ok", "ck", "key", "ak", "p", "ks", "K", "ki", "q", "ik", "o", "i", "kid", "kk", "kw", "l", "N", "ke", "x", "unk", "u"], "n": ["j", "nn", "conn", "nor", "length", "len", "sn", "ns", "nu", "d", " l", "no", "count", "nl", "kn", "z", "c", "m", "r", "en", "y", "nc", "t", "ln", "nb", "nr", "ng", " ng", "nt", "ne", "number", "p", "cn", "f", "e", "net", "pos", "na", "o", "i", "fn", "l", "N", "num", "x", "ner", "nan", "u", "ni", "size", " p", "b"]}}
{"code": "//package atcoder;\\n \\nimport java.io.BufferedWriter;\\nimport java.io.File;\\nimport java.io.FileWriter;\\nimport java.io.IOException;\\nimport java.io.PrintWriter;\\nimport java.util.*;\\n//import java.math.BigDecimal;\\n \\npublic class Main {\\n\tpublic static void main(String [] args) {\\n\t    int K,N;\\n\t    \\n\t\tScanner sc = new Scanner(System.in);\\n\t\tN = sc.nextInt();\\n\t\tK = sc.nextInt();\\n\t\tint p[] = new int [N];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tp[i] = sc.nextInt();\\n\t\t}\\n\t\tArrays.sort(p);\\n\t\t/*for(int k=0;k<N;k++) {\\n\t\t\tSystem.out.println(p[k]);\\n\t\t}*/\\n\t\tint goukei = 0;\\n\t\tfor(int j=0;j<K;j++) {\\n\t\t\tgoukei = goukei+p[j];\\n\t\t}\\n\t\tSystem.out.println(goukei);\\n\t\t\\n\t}\\n}", "target": "41", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    \\n    public static void main(String[] args) {\\n        Scanner scan=new Scanner(System.in);\\n        int a=0,b=0,ans=0,f=0;\\n        String op;\\n        while(f==0){\\n        \ta=scan.nextInt();\\n        \top=scan.next();\\n        \tb=scan.nextInt();\\n        \tswitch(op){\\n        \t\tcase\"+\":\\n        \t\t\tans=a+b;\\n        \t\t\tbreak;\\n        \t\tcase\"-\":\\n        \t\t\tans=a-b;\\n        \t\t\tbreak;\\n        \t\tcase\"*\":\\n        \t\t\tans=a*b;\\n        \t\t\tbreak;\\n        \t\tcase\"/\":\\n        \t\t\tans=a/b;\\n        \t\t\tbreak;\\n        \t\tcase\"?\":\\n        \t\t\tf=1;\\n        \t\t\tbreak;\\n        \t\tdefault:\\n        \t\t\tcontinue;\\n        \t}\\n        \tif(f==0){\\n        \t\tSystem.out.println(ans);\\n        \t}\\n        }\\n    }\\n}", "target": "139", "substitutes": {"scan": ["sc", "can", "sr", "slice", " scanner", "look", "nn", "conn", "fan", "check", "or", "query", "se", "in", "oper", "nl", "connect", "er", "an", "io", "sync", "r", "iter", "out", "see", "search", "clean", "stat", "con", "ln", "read", "chan", "cat", "san", "plan", "n", "watch", "walk", "span", "row", "na", "feed", "run", "skip", "l", "Scan", "pin", "parse", "ner", "x", "ann", "all", "sign", "reader", "serv"], "a": ["ast", "aw", "api", "ba", "ab", "fa", "ma", "ai", "aaa", "aa", "sa", "aux", "am", "an", "c", "area", "at", "ac", "ia", "ana", "sta", "A", "ga", "ad", "ea", "p", "n", "alpha", "pa", "e", "aj", "la", "ca", "as", "va", "na", "ap", "i", "aff", "da", "au", "x", "ae", "af", "u", "auto", "aka", "ar"], "b": ["wb", "j", "base", "ba", "ab", "cb", "h", "body", "abb", "xb", "aa", "d", "bb", "pb", "bf", "z", "v", "abc", "c", "ob", "ub", "an", "boot", "y", "m", "ac", "B", "nb", "beta", "e", "be", "p", "n", "mb", "bp", "eb", "bis", "bs", "o", "w", "sb", "i", "lb", "l", "bi", "fb", "x", "u", "rb"], "ans": ["base", "leans", "aos", "ars", "parts", "aned", "ents", "ks", "ands", "na", "anners", "acts", "cases", "books", "ants", "vs", "x", "ann", "ins", "outs", "fa", "aux", "nas", "ams", "os", "flags", "cats", "cs", "works", "results", "auto", "reads", "opens", "anas", "vals", "rules", "ab", "sk", "bb", "aus", "an", "c", "ras", "ases", "cas", "p", "n", "ads", "anc", "ANS", "eps", "ai", "can", "lines", "aces", "ats", "ons", "ns", "grades", "atts", "amps", "offs", "plan", "allows", "arts", "aves", "as", "blocks", "o", "s", "ays", "l", "af", "ops", "runs"], "f": ["j", "cf", "fold", "fs", "file", "h", "F", "fa", "sf", "fen", "d", "tf", "fc", "bf", "count", "fd", "z", "v", "c", "m", "of", "iter", "r", "fp", "t", "fast", "fe", "e", "p", "n", "df", "fab", "fun", "found", "inf", "feed", "o", "fit", "ref", "i", "aff", "ff", "fn", "l", "info", "fb", "x", "g", "flag", "rf"], "op": ["id", "cop", "pp", "open", "opus", "opt", "app", "oop", "prop", "vert", "option", "line", "F", "orb", "offset", "oct", "ip", "oper", "opp", "ep", "type", "stop", "an", "c", "OP", "ac", "r", "operation", "ope", "Op", "k", "proc", "cat", "p", "bit", "sp", "prev", "hop", "end", "feed", "it", "ap", "o", "up", "i", "info", "oc", "x", "exp", "block", "af", "ops", "ann", "orp", "expr", "name"]}}
{"code": "//package code;\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\n/**\\n *\\n * @author Milo\\n */\\npublic class Main {\\n    \\n    static FastReader in = new FastReader();\\n    public static void main(String[] args) {\\n        int t = 1; //in.nextInt();\\n        while (t-- > 0)\\n            solve();\\n    }\\n \\n    public static void solve() {\\n        int k = in.nextInt();\\n        int a = in.nextInt();\\n        int b = in.nextInt();\\n        \\n        if(a % k == 0 || b % k == 0){\\n            System.out.println(\"OK\");\\n            return;\\n        }else{\\n            int st = (a / k) * k;\\n            while(st + k <= b){\\n                st += k;\\n                if(st >= a && st <= b){\\n                    System.out.println(\"OK\");\\n                    return;\\n                }\\n            }\\n        }\\n        System.out.println(\"NG\");\\n        \\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n \\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n \\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n \\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n \\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n \\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n \\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n \\n    public static int max(int a, int b) {\\n        return a > b ? a : b;\\n    }\\n \\n    public static int min(int a, int b) {\\n        return a < b ? a : b;\\n    }\\n \\n    public static int gcd(int a, int b) {\\n        return b == 0 ? a : gcd(b, (a % b));\\n    }\\n}\\n", "target": "28", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.Comparator;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\t/**\\n\t * ???????????\u00a2??\u00b0\\n\t * @param args ?????\u00b0\\n\t * @throws IOException \\n\t * @throws NumberFormatException \\n\t */\\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\\n\t\tBufferedReader in = null;\\n\t\ttry {\\n\t\t\t//???????????????????????????????????????\\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\tint n = Integer.parseInt(in.readLine());\\n\t\t\t\\n\t\t\t//?????\u00a8???????????????????????????\\n\t\t\tSystem.out.println(interest(100000, 5, n));\\n\t\t} finally {\\n\t\t\t//???????????????????????????\\n\t\t\tif(in != null) in.close();\\n\t\t\tin = null;\\n\t\t}\\n\t}\\n\t/**\\n\t * ?????\u00a8?????????????\u00a8?????????????\\n\t * @param debit ??????????????????\\n\t * @param rate ?????????(??????:%)\\n\t * @param n ?????\u00b0\\n\t * @return ?????\u00a8?????????\\n\t */\\n\tpublic static int interest(int debit, int rate, int n) {\\n\t\tint ret = debit;\\n\t\t\\n\t\t//??????????\u00a8??????????\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\t//??????????????????\\n\t\t\tret += ret * rate / 100;\\n\t\t\t//???3??????????????????\\n\t\t\tret = cutOut(ret, 3);\\n\t\t}\\n\t\t\\n\t\t//?????\u00a8?????????????????????\\n\t\treturn ret;\\n\t}\\n\\n\t/**\\n\t * ?????????????????\u00b0???????\u00a8?????????????\\n\t * @param num ????????????????????\u00b0???\\n\t * @param n ??????????????????n???\\n\t * @return ???n?????????????????????\\n\t */\\n\tpublic static int cutOut(int num, int n) {\\n\t\tint ret = num;\\n\t\t//???????????????????\u00b6??????\u00b0???????????????\\n\t\tString kiri = \"1\";\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\tkiri = kiri + \"0\";\\n\t\t}\\n\t\t\\n\t\t//???n??????????????????\\n\t\tString str = String.valueOf(ret);\\n\t\tstr = str.substring(str.length()-n, str.length());\\n\t\tif(Integer.parseInt(str) > 0) {\\n\t\t\tret  = ret - Integer.parseInt(str) + Integer.parseInt(kiri);\\n\t\t}\\n\t\t\\n\t\t//?????????????????\u00b0????????????\\n\t\treturn ret;\\n\t}\\n}", "target": "173", "substitutes": {"in": ["id", "file", "or", "bin", "err", "c", " In", "is", "r", "out", "con", "input", " IN", "re", "data", "f", "IN", "it", "In", "ini", "ax", " out", "i", "stream", "reader", "buffer", "b", "ins"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        List<Integer> nums = new ArrayList<>();\\n        for(int i=0; i<n; ++i) {\\n            nums.add(sc.nextInt());\\n        }\\n\\n        int n_max = (int)Float.NEGATIVE_INFINITY; //??????????????\u00a7\\n        int n_min = nums.get(0);\\n        for(int i=1; i<n; ++i) {\\n            n_max = Math.max(nums.get(i) - n_min, n_max);\\n            n_min = Math.min(nums.get(i), n_min);\\n        }\\n\\n        System.out.println(n_max);\\n    }\\n}", "target": "208", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "cer", "Sc", " SC", "squ", "bc", "se", "sf", "SC", "scope", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "dc", "src", "rc", "system", "sche", "ca", "cur", "sb", "cs", "si", "cl", "set", "pc", "exec", "ner", "ci", "asc", "mc", "sci"], "n": ["j", "nn", "len", "sn", "ns", "d", "init", "nl", "z", "c", "m", "en", "network", "nc", "t", "ln", "nb", "nr", "k", "nt", "un", "cn", "number", "p", "f", "net", "max", "s", "nin", "fn", "N", "num", "l", "x", "nw", "ni", "g", "u", "b"], "nums": ["nanatures", "numbers", "nanumbers", "Numes", "gnums", "numes", "nanum", "natures", " natures", "Num", "nanums", "nams", " nams", "gnumbers", "nanams", "gnatures", "num", "gnams", "Nums", "nanumes", " num", " numbers", " numes", "Numbers"], "i": ["id", "j", "ri", "a", "pi", "mu", "in", "mi", "ii", "ip", "z", "v", "abi", "c", "ix", "m", "t", "min", "gi", "index", "k", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "b", "di", "ini", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "ti", "fi", "ai", "uri", "I"], "n_max": ["ns__MAX", "n__min", "ns_min", "n_MAX", "ns__max", "n__max", "ns_max", "n__MAX", "ns_MAX", "ns__min", "n_min"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint differ = 0;//\u9593\u9055\u3044\u3092\u5165\u308c\u308b\\n\t\t\\n\t\tfor(int i=1; i<=N; i++) {\\n\t\t\tint P =sc.nextInt();\\n        //i\u3068P\u304c\u4e00\u81f4\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u9593\u9055\u3044\u3092+1\u3059\u308b\\n\t\tif(i!=P){\\n\t\t\t\tdiffer++;\\n\t\t\t}\\n\t\t}\\n        //\u9593\u9055\u3044\u304c2\u3064\u306a\u3089\u305d\u308c\u3092\u5165\u308c\u66ff\u3048\u3066\u6607\u9806\u306b\u3067\u304d\u308b\\n        //2\u3064\u4ee5\u5185\u306a\u3089Yes\\n\t\tSystem.out.println(differ<=2?\"YES\":\"NO\");\\n\t}\\n}", "target": "82", "substitutes": {"sc": ["sw", "ch", "app", "soc", " Sc", "Sc", " SC", "bc", "scope", "sf", "se", "SC", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "ec", "sub", "nc", "cc", "sec", "sh", "proc", "ctx", "sp", "ser", "dc", "src", "rc", "sb", "cs", "cl", "pc", "sl", "ci", "ctl", "sci"], "N": ["Ns", "F", "NL", "Part", " n", "NB", "Num", "A", "Node", "Number", "T", "B", "NI", "NT", "n", "R", "L", "K", "C", "O", "D", "M", "S", "V", "NN", "P", "I", "G"], "differ": [" diffacer", "changeer", " differror", "differror", " Diffacer", " Differror", " Diffoser", " Differ", "changeoser", "diffacer", " diffoser", "diffoser", "changeerror", "changeacer"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    static int n;\\n    static int a[][];\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        n = sc.nextInt();\\n        a = new int[2][n];\\n\\n        for (int i = 0; i < 2; i++) {\\n            for (int j = 0; j < n; j++) {\\n                a[i][j] = sc.nextInt();\\n            }\\n        }\\n\\n        System.out.println(solve(0, 0));\\n    }\\n\\n    public static int solve(int i, int j) {\\n        int max = 0;\\n\\n        if (i == 1 && j == n - 1) {\\n            max = a[i][j];\\n        } else if (i < 1 && j < n - 1) {\\n            max = Math.max(a[i][j] + solve(i + 1, j), a[i][j] + solve(i, j + 1));\\n        } else if (i < 1) {\\n            max = a[i][j] + solve(i + 1, j);\\n        } else if (j < n - 1) {\\n            max = a[i][j] + solve(i, j + 1);\\n        }\\n        return max;\\n    }\\n}\\n", "target": "140", "substitutes": {"n": ["none", "nn", "h", "conn", "nor", "nu", "ns", "sn", "in", "d", "no", "count", "z", "v", "c", "an", "m", "not", "y", "en", "network", "nc", "t", "ln", "min", "non", "nb", "k", "nt", " ng", "e", "ne", "p", "cn", "f", "dn", "net", "un", "span", "na", "o", "w", "adj", "nin", "N", "num", "l", "x", "zn", "nan", "g", "ni", " N", "u", "size", "b"], "a": ["aw", "access", "app", "ba", "ab", "api", "ma", "aaa", "aa", "sa", "aux", "am", "ao", "array", "z", "v", "an", "area", "c", "m", "ia", "ac", "ana", "y", "A", "ga", "data", "e", "p", "alpha", "Array", "f", "missing", "aj", "ans", "span", "result", "la", " A", "wa", "va", "as", "na", "ca", "o", "active", "s", "ama", "work", "da", "self", "au", "x", "ae", "auto", "u", "action", "b", "sta"], "sc": ["sw", "ch", "lc", "sys", "cer", "Sc", "squ", "bc", "se", "SC", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "nc", "sch", "cor", "sh", "sec", "cus", "core", "cc", "sp", "rc", "system", "anc", "sche", "ca", "s", "cs", "si", "cl", "pc", "ner", "ci", "asc", "cv", "sv", "sci"], "i": ["id", "api", "ri", "ami", "pi", "in", "mi", "init", "ii", "ip", "cli", "z", "io", "v", "ix", "ori", "is", "c", "ia", "y", "gi", "e", "p", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "it", "multi", "eni", "b", "di", "ini", "o", "oi", "ie", "yi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "auto", "u", "ni", "uri", "fi", "ai", "mini", "I"], "j": ["api", "jet", "h", "ja", "J", "js", "ij", "job", "d", "jj", "bj", "ii", "z", "v", "ix", "je", "c", "m", "jen", "er", "jin", "y", "json", "jl", "jc", "key", "e", "jon", "p", "obj", "qi", "f", "ji", "aj", "ne", "q", "ui", "dy", "dj", "xi", "li", "next", "it", "o", "ie", "yi", "l", "si", "uj", "x", "jo", "oj", "u", "ni", "jp", "g", "b"], "max": ["base", "az", "limit", "MAX", "cat", "add", "result", "ge", "mult", "conf", "between", "x", "diff", "rand", "temp", "co", "d", "cross", "master", "std", "default", "now", "plus", "key", "end", "rest", "self", "maximum", "auto", "all", "res", "name", "error", "right", "and", "best", "init", "force", "call", "c", "pop", "value", "core", "ax", "sum", "parse", "step", "scale", "rank", "id", "mix", "wrap", "height", "part", "mod", "no", "array", "Max", "last", "shift", "min", "k", "ad", "cache", "q", "power", "row", "range", "div", "parent", "size", "total"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tlong n = sc.nextLong();\\n\t\tint ans = 100100;\\n\t\tfor(long i = 1 ; i * i <= n ; i++) {\\n\t\t\tif(n % i == 0) {\\n\t\t\t\tans = Math.min(ans, kouta(i, n / i));\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n\tpublic static int kouta(long i, long j) {\\n\t\tint ret = 0;\\n\t\tif(i >= j) {\\n\t\t\twhile(i > 0) {\\n\t\t\t\tret++;\\n\t\t\t\ti /= 10;\\n\t\t\t}\\n\t\t} else {\\n\t\t\twhile(j > 0) {\\n\t\t\t\tret++;\\n\t\t\t\tj /= 10;\\n\t\t\t}\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\\n}\\n", "target": "61", "substitutes": {"sc": ["enc", "ch", "soc", " Sc", "cb", "str", "Sc", " SC", "bc", "se", "SC", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "sub", "nc", "cc", "sh", "sec", "nt", "sp", "acc", "src", "rc", "system", "ca", "na", "cur", "cs", "Scan", "cl", "pc", "ner", "ci", "ann", "mc", "sci"], "n": ["nn", "h", "a", "len", "ns", "in", "d", "z", "v", "c", "an", "m", "y", "en", "nc", "t", "ln", "mn", "min", "nb", "k", "nt", "cn", "ne", "e", "p", "number", "f", "dn", "net", "o", "w", "s", "rn", "l", "N", "num", "x", "nan", "g", "u", "ni", "size", "b"], "ans": [" scans", "can", "anas", "vals", "outs", "ats", " means", " fa", "lan", "ons", "ns", "ens", "sk", "AN", "aus", "atan", "nas", "ions", "an", "scan", "ras", "ars", "ana", "os", "aned", "acs", "cas", "es", "ents", " na", "san", "ks", " spans", "anc", "ANS", "na", "as", "ians", "s", "cs", "ants", "eps", "vs", "x", "anes", "nan", "ann", "ant", "ls", "ins"], "i": ["id", "ri", "h", "a", "pi", "in", "mi", "d", "ii", "z", "v", "ix", "c", "start", "m", "ori", "io", "y", "t", "min", "gi", "index", "k", "phi", "e", "p", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "yi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ni", "mini", "fi", "ai", "I", "vi"], "j": ["id", "jet", "h", "J", "ja", "pi", "ij", "js", "job", "jj", "bj", "ii", "z", "v", "jen", "start", "m", "r", "y", "min", "jl", "jc", "k", "e", "p", "f", "qi", "ji", "aj", "q", "li", "o", "ie", "l", "uj", "bi", "x", "jo", "u", "ni", "jp", "b"], "ret": ["id", "nz", "base", "alt", "len", "ft", "part", "offset", "count", "default", "lit", "iter", "out", "r", "rets", "true", "value", "re", "nt", "det", "rev", "reply", "continue", "reg", "f", "def", "cat", "flat", "result", "RET", "fun", "rc", "end", "it", "pass", "reset", "feat", "ref", "rest", "val", "num", "x", "ext", "success", "rt", "flag", "bis", "Ret", "res"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int in = sc.nextInt();\\n        sc.close();\\n        int[] each_dig = new int[4];\\n        for(int i = 0; i < 4; i++){\\n            each_dig[i] = in % 10;\\n            in /= 10;\\n        }\\n        char[] oprs = new char[3];\\n        for(int i = 0; i < 8; i++){\\n            int sum = each_dig[3];\\n            for(int j = 0; j < 3; j++){\\n                if((i >> j & 1) == 1){\\n                    sum += each_dig[2 - j];\\n                }else{\\n                    sum -= each_dig[2 - j];\\n                }\\n            }\\n            if(sum == 7){\\n                for(int j = 0; j < 3; j++){\\n                    if((i >> j & 1) == 1){\\n                        oprs[j] = '+';\\n                    }else{\\n                        oprs[j] = '-';\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        System.out.println(\"\" + each_dig[3] + oprs[0] + each_dig[2] + oprs[1] + each_dig[1] + oprs[2] + each_dig[0] + \"=7\");\\n    }\\n}", "target": "152", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "soc", " Sc", "st", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "out", "ec", "sub", "nc", "sch", "cc", "sh", "ctx", "sp", "dc", "rc", "system", "cur", "class", "sb", "cs", "cl", "pc", "exec", "ner", "text", "stream", "cv", "sci"], "in": ["id", "inner", "path", "login", "line", "bin", "mi", "user", "din", "err", "inc", "init", "what", "count", "c", "is", "name", "m", "r", "out", "read", "con", "input", "min", "pid", "data", "index", "isin", "n", "win", "max", "IN", "digit", "inn", "inf", "it", "pass", "In", "ini", "world", "readable", "nin", "log", "pin", "x", "diff", "into", "lin", "reader", "source", "ins"], "each_dig": ["eachWorkdesc", "that_side", "eachACmain", "each_desc", "each67diff", "eachThediff", "sometimesWorkmain", "that_dig", "whoseThedig", "each_big", "sometimes_main", "each_digit", "eachThedig", "sometimesWorkdesc", "amongJdig", " each_Dig", "whoseThepush", "eachOdig", "sometimesWorkdig", "whose_diff", "thatJside", "eachPolyDig", "each_dim", "sometimes_dig", "eachJdig", "sometimes_dir", "each__Dig", "each_diff", "Each_sign", "thatJdim", " each_circ", "each_dir", " each_dim", "each_log", "eachWorkmain", "each_day", "among_loop", "thatJdig", "among_dig", "eachACdir", "amongJdesc", "each_loop", "sometimes_desc", "each_side", "amongJsign", "eachThepush", "eachJdim", "each_cert", "eachJloop", "whose_cert", "whose_dig", "eachOdesc", "eachThecert", "eachACdig", "eachJside", "each67cert", "eachJdesc", "amongJloop", "Each_round", "eachJDig", "among_desc", " each_log", "eachWorkdig", "whoseThecert", "each__step", "eachACdesc", "among_sign", "eachJsign", "eachPolydig", "whose_push", "Each_dig", "eachPolysign", "Each_digit", "whoseThediff", "sometimesWorkdir", "each_step", "each_sign", "each__dim", " each_day", "each__dig", "each_Dig", " each_step", "each_round", "eachOdir", "eachWorkdir", "each_main", "eachPolybig", "Each_big", "each_push", "each67push", "each_circ", "that_dim", "each67dig", "that_Dig", "thatJDig", "eachOmain", "Each_Dig"], "i": ["id", "ri", "a", "pi", "mi", "init", "d", "ii", "ip", "z", "ix", "io", "v", "is", "c", "y", "gi", "index", "phi", "e", "p", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "it", "o", "b", "di", "ini", "ie", "oi", "yi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ni", "g", "fi", "ai", "I", "vi"], "oprs": ["optr", "ipps", " opras", "ropr", "operars", "roprers", "opars", "opr", "ropcs", "oprers", " opars", "copcs", "OPras", " opps", "OPars", " opr", "ipars", "optrs", "copr", "opras", "optps", "optars", " oprers", " opcs", "operrs", "operr", "operps", "OPps", "copars", "opcs", "operrers", "optras", "copps", "opps", "roprs", "operras", "OPrs", "opercs", "iprs", "copras", "ipcs", "coprs"], "sum": ["hash", "vol", "ash", "fill", "h", "su", "length", "len", "bin", "part", "cum", "ums", "se", "inc", "Sum", "summary", "count", "c", "plus", "mass", "miss", "ul", "min", "sh", "pack", "fee", "mean", "index", "ass", "key", "p", "n", "sp", "alpha", "add", "fat", "cal", "account", "average", "b", "pass", "conf", "sign", "use", "gram", "us", "num", "weight", "parse", "sup", "si", "frac", "diff", "u", "cost", "all", "size", "um", "scale", "total", "co"], "j": ["py", "ch", "jet", "h", "ja", "J", "ij", "js", "job", "other", "d", "jj", "bj", "ii", "ind", "z", "v", "ix", "jen", "je", "c", "io", "y", "jit", "json", "jl", "jc", "k", "key", "e", "dj", "p", "n", "obj", "f", "jon", "ji", "aj", "ik", "q", "qi", "br", "li", "it", "o", "pr", "ax", "ie", "adj", "el", "code", "l", "uj", "bi", "fr", "x", "jo", "oj", " dj", "u", "jp", "g", "all", "ni", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        while(true) {\\n            String Cards = sc.next();\\n            int i, j;\\n            int l = Cards.length();\\n            char w[] = new char[l];\\n            char R[] = new char[l];\\n            for (i = 0; i < l; i++) {\\n                w[i] = Cards.charAt(i);\\n            }\\n            if(w[0] == '-') break;\\n            int m = sc.nextInt();\\n            for (i = 0; i < m; i++) {\\n                int h = sc.nextInt();\\n                for (j = 0; j < l; j++) {\\n                    if (j < h) {\\n                        R[j] = w[j];\\n                    } else {\\n                        w[j - h] = w[j];\\n                    }\\n                }\\n                for (j = 0; j < h; j++) {\\n                    w[l - h + j] = R[j];\\n                }\\n            }\\n            for (i = 0; i < l; i++) {\\n                System.out.printf(\"%c\", w[i]);\\n            }\\n            System.out.printf(\"\\n\");\\n        }\\n    }\\n}\\n\\n", "target": "216", "substitutes": {"sc": ["cont", "isc", "ch", "enc", "lc", "loc", " Sc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "com", "ss", "fc", "uc", "cr", "esc", "c", "scan", "osc", "sync", "out", "ec", "tc", "nc", "sch", "cc", "sh", "sec", "cus", "ctx", "sp", "dc", "rc", "anc", "gc", "cam", "coll", "sb", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "cv", "mc", "sci"], "Cards": ["Wricks", "Bodes", "cars", "Wodes", "Bars", " Cricks", "Scords", " Card", "Codes", "Rars", "CARDS", "Scard", "BARDS", "Rards", "Card", "Scricks", " CARDS", " Codes", "Bards", "Scards", "Scars", "Wards", "cards", "cords", "WARDS", "Ward", "Cricks", "Wars", " Cars", "Cords", "Cars", "Rords", "Rard", "card"], "i": ["id", "slice", "api", "ri", "ami", "pi", "in", "d", "mi", "init", "ii", "ip", "ind", "cli", "z", "v", "io", "c", "is", "ix", "ori", "r", "y", "gi", "e", "p", "n", "fi", "f", "qi", "ji", "ik", "q", "ui", "xi", "li", "iu", "it", "o", "b", "di", "ini", "eni", "oi", "ie", "yi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "g", "uri", "ai", "mini", "I", "vi"], "j": ["obj", "ch", "jet", "ja", "J", "js", "ij", "job", "d", "ah", "jj", "ii", "z", "v", "ix", "c", "je", "jen", "r", "y", "pt", "jit", "jl", "jc", "k", "key", "e", "jon", "p", "n", "pos", "f", "qi", "ji", "aj", "dj", "q", "ui", "dy", "li", "next", "it", "o", "pr", "ie", "el", "si", "uj", "x", "jo", "u", "oj", "jp", "b"], "l": ["left", "lc", "lf", "length", "len", "kl", "d", "nl", "z", "v", "c", "r", "ol", "t", "ln", "ul", "dl", "k", "lv", "e", "p", "n", "L", "f", "la", "li", "o", "s", "lb", "el", "hl", "sl", "u", "lin", "ell", "ls", "ll", "g", "fl", "b"], "w": ["fw", "sw", "wb", "aw", "wx", "right", "a", "wal", "wl", "wh", "d", "wu", "array", "hw", "z", "v", "c", "r", "y", "word", "t", "value", "data", "wp", " W", "e", "ew", "p", "wd", "f", "win", "wei", "q", "W", "wa", "row", "rw", "width", "ws", "ww", "ow", "s", "we", "kw", "wt", "x", "words", "nw", "u", "g", "b", "writer", "work"], "R": ["Q", "SH", "RW", "J", "F", "E", "RH", "v", "c", "r", "H", "A", "T", " r", "B", "WR", "Y", " W", "L", "K", "W", "CR", "Rh", "C", "O", "D", "Right", "M", "U", "S", "Z", "N", "V", "X", "P", "Rs", "I", "G", "RA"], "m": ["mu", "d", "mi", "md", "z", "v", "im", "c", "ml", "r", "y", "t", "k", "e", "p", "n", "L", "f", "mm", "li", "cm", "hm", "M", "x", "u", "g", "mini", "ll", "mc", "b"], "h": ["hh", "d", "ah", "kh", "bh", "hd", "z", "v", "ht", "c", "H", "y", "r", "oh", "t", "he", "ul", "sh", "gh", "k", "hr", "e", "p", "n", "f", "q", "li", "hm", "rh", "ph", "hs", "zh", "hi", "hl", "x", "u", "g", "b"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String s = sc.next();\\n        boolean bool = true;\\n        if(n % 2 != 0){\\n            System.out.println(\"No\");\\n            return;\\n        }\\n        for(int i = 0; i < n/2; i++){\\n            if(s.charAt(i) != s.charAt(n/2+i)){\\n                bool = false;\\n                break;\\n            }\\n        }\\n        if(bool){\\n            System.out.println(\"Yes\");\\n        }else{\\n            System.out.println(\"No\");\\n        }\\n        \\n    }\\n}\\n\\n", "target": "161", "substitutes": {"sc": ["sw", "sr", "ch", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "cle", "rc", "system", "sche", "cur", "sb", "cs", "si", "cl", "pc", "ner", "ci", "asc", "cv", "mc", "sci"], "n": ["j", "none", "nd", "left", "nn", "conn", "length", "len", "nu", "ns", "in", "d", "no", "count", "nl", "z", "v", "c", "m", "en", "network", "nc", "t", "ln", "nb", "k", "nt", "un", "ne", "number", "p", "e", "f", "net", "o", "w", "adj", "fn", "N", "l", "num", "x", "ni", "u", "size", "b"], "s": ["lines", "gs", "h", "fs", "ings", "str", "ns", "js", "in", "services", "ss", "sets", "c", "is", "m", "params", "abs", "r", "parts", "os", "xs", "input", "es", "strings", "qs", "e", "p", "ses", "f", "ans", "src", "string", "bis", "ws", "as", "o", "its", "sb", "S", "l", "si", "words", "ops", "u", "g", "ms", "ls", "bytes", "b", "ins"], "i": ["id", "j", "ri", "length", "pi", "mu", "I", "d", "init", "ip", "ii", "ori", "v", "abi", "c", "ix", "m", "gi", "index", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "chi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ni", "uri", "fi", "ai", "ti"], "bool": ["can", "soft", "bill", "always", "comment", "lean", "bc", "unit", "force", "bo", "must", "ask", "rol", "not", "is", "broad", "sync", "false", "out", "bits", "boot", "true", "fail", "bel", "key", "number", "ool", "bit", "cond", "bug", "acl", "carry", "string", "abl", "binary", "filter", "coll", "sort", "use", "any", "allow", "olean", "val", "l", "bang", "bil", "status", "flag", "null", "loop", "bl", "list", "fl", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        Main m = new Main(sc);\\n        m.show(m.solve());\\n        sc.close();\\n    }\\n    \\n\t//\u30d5\u30a3\u30fc\u30eb\u30c9\\n    Scanner sc;\\n    String S;\\n    \\n    //\u5165\u529b\\n    Main(Scanner sc) {\\n        this.sc = sc;\\n        this.S = sc.next();\\n    }\\n    \\n    //\u89e3\u7b54\u51e6\u7406\\n    private int solve() {\\n        int red = 0;\\n        int blue = 0;\\n        \\n        for (int i=0; i<S.length(); i++) {\\n        \tif (S.charAt(i) == '0') {\\n        \t\tred++;\\n        \t} else {\\n        \t\tblue++;\\n        \t}\\n        }\\n        \\n        int count = 2 * (int)Math.min(red, blue);\\n        return count;\\n    }\\n    \\n    //\u51fa\u529b\\n    public void show(int answer) {\\n        System.out.println(answer);\\n    }\\n\\n}\\n", "target": "14", "substitutes": {"sc": ["ch", "lc", "app", " Sc", "Sc", "fm", "bc", "se", "SC", "scope", "sem", " mc", "server", "uc", "cr", "esc", "gb", "c", "scan", "sync", "spec", "nc", "cc", "ga", "core", "ctx", "f", "context", "src", "rc", "system", "anc", "cm", "sb", "cs", "cl", "pc", "mp", "parser", "ci", "g", "cv", "mc", "sci"], "m": ["tm", "j", "man", "app", "h", "dm", "fm", "mod", "d", "am", "md", "sm", "v", "manager", "c", "r", "t", "mn", "core", "e", "gm", "p", "n", "machine", "f", "mr", "pm", "mm", "cm", "hm", "module", "o", "M", "s", "i", "bm", "l", "vm", "mp", "mad", "ms", "g", "message", "mc", "b"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\\n\t\tint N = Integer.parseInt(sc.next());\\n\t\tint K = Integer.parseInt(sc.next());\\n\t\tString result = \"\";\\n\t\twhile (N > 0) {\\n\t\t\tresult = N % K + result;\\n\t\t\tN /= K;\\n\t\t}\\n\\n\t\tout.println(result.length());\\n\t\tout.flush();\\n\t}\\n}", "target": "219", "substitutes": {"sc": ["sw", "ch", "lc", "soc", " Sc", "cer", "Sc", " SC", "squ", "bc", "se", "SC", "sf", "scope", "sel", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "ec", "nc", "sch", "cc", "cus", "ctx", "sp", "src", "cle", "rc", "anc", "sche", "scene", "cs", "cl", "pc", "parse", "ner", "ci", "mc", "sci"], "out": ["path", "again", "console", "error", "outs", "conn", "a", "bin", "in", "user", "err", "report", "inc", "array", "cli", "flush", "arg", "io", "outer", "OUT", "name", "extra", "password", "word", "to", "input", "p", "obj", "ex", "cache", "IN", "string", "next", "o", "source", "w", "up", "log", "sum", "self", "exec", "exp", "ext", "auto", "Out", "output", "copy", "buffer", "temp", "writer", "write"], "N": ["NG", "Q", "NER", "Ne", "Ni", "J", "Ns", "F", "Result", "NL", "Output", "No", "Part", "Max", "NB", "OUT", "Num", "H", "A", "Number", "T", "NE", "NI", "Y", "NT", "NV", "Na", "NS", "n", "R", "L", "ND", "NR", "O", "NC", "C", "NA", "D", "CN", "M", "KN", "U", "S", "NUM", "X", "NN", "V", "P", "Size", "I", "SIZE"], "K": ["Q", "J", "E", "Result", "KI", "No", "KE", "Mask", "Max", "H", "T", "KR", "Y", "k", "Dec", "R", "L", "NK", "Zero", "Key", "W", "PK", "Ku", "C", "O", "D", "CC", "M", "CP", "KC", "U", "KK", "Z", "SK", "Work", "KS", "Ke", "X", "ID", "V", "P", "Sk", "IK", "XX", "I", "G"], "result": ["answer", "error", "section", "line", "length", "function", "str", "comment", "part", "page", "Result", "unit", "err", "report", "ULT", "inc", "winner", "root", "count", "wrapper", "goal", "character", "prefix", "description", "response", "feature", "match", "r", "word", "search", "current", "pack", "core", "data", "product", "runner", "k", "desc", "key", "number", "division", "string", "OK", "char", "test", "raw", "CC", "use", "score", "parent", "sum", "results", "text", "ner", "null", "output", "message", "card", "source", "res"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        s = s.replaceAll(\"eraser\", \"0\");\\n        s = s.replaceAll(\"erase\", \"0\");\\n        s = s.replaceAll(\"dreamer\", \"0\");\\n        s = s.replaceAll(\"dream\", \"0\");\\n        s = s.replaceAll(\"0\", \"\");\\n        if (s.length()== 0){\\n            System.out.println(\"YES\");\\n        } else {\\n            System.out.println(\"NO\");\\n        }\\n\\n    }\\n\\n}", "target": "50", "substitutes": {"sc": ["sw", "enc", "ch", " Sc", "str", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "sel", "uc", "cr", "esc", "c", "scan", "osc", "spec", "ec", "sub", "nc", "cc", "sec", "sh", "cus", "desc", "sp", "acc", "src", "rc", "system", "anc", "cur", "cs", "l", "cl", "pc", "ner", "asc", "sci"], "s": ["h", "fs", "sg", "in", "spec", "r", "parts", "ans", "result", "ws", "bs", "los", "w", "i", "stats", "series", "sv", "ts", "d", "ps", "is", "os", "xs", "es", "e", "f", "sym", "string", "full", "sb", "results", "words", "text", "u", "services", "bis", "gs", "features", "ss", "c", "abs", "aws", "sync", "y", "json", "strings", "ves", "ses", "n", "p", "ssl", "its", "S", "ls", "docs", "lines", "su", "str", "ns", "js", "rs", "site", "settings", "t", "states", "ds", "as", "us", "l", "tests", "g", "your", "b", "ins"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u6574\u6570\u306e\u5165\u529b\\n\t\tString s = sc.next();\\n\t\tString split[] = s.split(\"\");\\n\t\tint i;\\n        int count = 0,ans = 0;\\n        \\n      \tfor(i = 0;i < s.length();i++){\\n          if(split[i].equals(\"A\") || split[i].equals(\"C\") || split[i].equals(\"G\") || split[i].equals(\"T\") ){\\n            count += 1;  \\n          }else{\\n            if(ans < count){\\n              ans = count;\\n            }\\n            count = 0;\\n          }\\n        }\\n        if(ans < count){\\n              ans = count;\\n        }\\n        System.out.println(ans);   \\n    }\\n}", "target": "100", "substitutes": {"sc": [" rc", " scanner", " Sc", " ser", " app", "Sc", " SC", "se", "SC", " scr", "ss", "sq", " sm", "scan", " sp", " sl", " ans", " scorer", " ar", "sb", " src", " pars", "parser", "ann", " res", " surf", " arr"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int number, i, sum = 0, tmp = -1;\\n    number = Integer.parseInt(sc.next());\\n    int[] order = new int[number];\\n    int[] score = new int[number];\\n    int[] additional = new int[number-1];\\n    for(i = 0; i < number; i++) {\\n      order[i] = Integer.parseInt(sc.next());\\n    }\\n    for(i = 0; i < number; i++) {\\n      score[i] = Integer.parseInt(sc.next());\\n    }\\n    for(i = 0; i < number-1; i++) {\\n      additional[i] = Integer.parseInt(sc.next());\\n    }\\n    for(i = 0; i < number; i++) {\\n      sum += score[order[i] - 1];\\n      if(tmp + 1 == order[i]) sum += additional[tmp - 1];\\n      tmp = order[i];\\n    }\\n    System.out.println(sum);\\n  }\\n}\\n", "target": "223", "substitutes": {"sc": ["sr", "sw", "ch", "lc", "soc", " Sc", "cer", "scl", "sk", "Sc", " SC", "squ", "bc", "se", "SC", "sf", "scope", "sem", "ss", "cli", "uc", "cr", "esc", "c", "scan", "osc", "sync", "spec", "ec", "ck", "nc", "sch", "cc", "sh", "sec", "cus", "sp", "ser", "src", "cle", "rc", "system", "anc", "sche", "cam", "coll", "sb", "cs", "cl", "pc", "parse", "ner", "parser", "ci", "cv", "mc", "sci"], "number": ["change", "object", "error", "address", "layer", "document", "length", "function", "part", "numbered", "page", "resource", "forward", "no", "group", "count", "four", "square", "type", "outer", "start", "area", "match", "position", "word", "amount", "network", "Number", "year", "shape", "non", "data", "factor", "key", "p", "n", "batch", "duration", "result", "zero", "string", "reference", "two", "large", "test", "sort", "umber", "version", "code", "num", "remove", "phone", "x", "null", "random", "total", "block", "maximum", "letter", "video", "message", "size", "state", "name", "work"], "i": ["id", "j", "iii", "api", "ri", "a", "ami", "pi", "mu", "I", "in", "mi", "init", "ii", "ip", "cli", "ori", "io", "v", "c", "is", "start", "ix", "y", "t", "gi", "index", "uli", "phi", "e", "p", "n", "qi", "f", "ji", "esi", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "yi", "ie", "oi", "chi", "ei", "l", "si", "bi", "hi", "info", "sup", "zi", "x", "ci", "ni", "u", "uri", "fi", "ai", "g", "ti", "vi"], "sum": ["cmp", "speed", "loc", "su", "comment", "length", "cum", "part", "dev", "neg", "unit", "grade", "Sum", "summary", "count", "style", "start", "spread", "seed", "match", "sim", "miss", "out", "shape", "fail", "fee", "pack", "mean", "index", "ass", "alpha", "cache", "result", "average", "sort", "sign", "up", "use", "us", "num", "si", "weight", "parse", "loss", "info", "total", "success", "diff", "cost", "output", "size", "um", "temp", "scale", "cal"], "tmp": ["slice", "cmp", "pp", "j", "uni", "api", "amp", "loc", "su", "front", "company", "part", "offset", "page", "angle", "count", "prefix", "now", "area", "start", "seed", "position", "yy", "tc", "amount", "shift", "const", "shape", "nb", "qq", "proc", "beta", "p", "alpha", "pos", "f", "duration", "batch", "pm", "li", "stuff", "next", "test", "source", "pad", "perm", "div", "kk", "field", "num", "sup", "mp", "qa", "diff", "size", "rb", "zip", "temp", "total"], "order": ["are", "id", "error", "address", "state", "length", "orders", "page", "user", "grade", "rule", "err", "count", "type", "er", "outer", "seed", "level", "start", "element", "position", "match", "en", "iter", "shape", "ord", "size", "core", "index", "end", "result", "row", "test", "sort", "use", "work", "date", "code", "num", "info", "record", "reverse", "Order", "ordering", "block", "scale", "ordered", "rank", "center", "degree"], "score": ["speed", "error", "Score", "cer", "message", "length", "mate", "grade", "err", "winner", "count", "square", "er", "level", "seed", "ize", "extra", "feature", "match", "clean", "size", "fee", "core", "key", "ise", "cache", "result", "test", "average", "sort", "sign", "code", "info", "ignore", "weight", "scoring", "cost", "est", "scale", "une", "race", "rank", "rate"], "additional": ["addeditionally", "exceptional", "Additional", "additive", "Addional", "position", "addition", "Addition", "Additionally", "Additions", "addional", " additionally", "positional", " additions", " additive", "positive", "exceptitional", " addition", " addional", "addedition", "addeditive", "addeditions", "exceptitions", "additionally", "addeditional", "additions"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long n = sc.nextLong();\\n        sc.close();\\n\\n        String s = \"\";\\n\\n        while(n > 0) {\\n            n--;\\n            s = (char)('a' + n % 26) + s;\\n            n /= 26;\\n        }\\n        System.out.println(s);\\n    }\\n}\\n", "target": "191", "substitutes": {"sc": ["sw", "sr", "ch", "soc", "st", "str", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "nc", "sch", "cc", "sh", "core", "sp", "ser", "src", "rc", "ca", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "sl", "ci", "mc", "sci"], "n": ["j", "none", "nd", "nn", "conn", "nor", "a", "len", "sn", "ns", "d", "no", "nl", "z", "v", "c", "not", "m", "an", "en", "y", "con", "nc", "t", "ln", "mn", "nr", "nb", "ng", "nt", "cn", "ne", "e", "p", "nos", "f", "un", "number", "dn", "pn", "na", "o", "i", "adj", "fn", "rn", "N", "l", "num", "x", "size", "temp", "b"], "s": ["small", "gs", "fs", "sg", "su", "a", "ings", "str", "ns", "js", "rs", "in", "d", "ss", "ps", "sets", "c", "abs", "aws", "sync", "r", "settings", "y", "parts", "os", "json", "t", "strings", "es", "core", "qs", "ds", "ses", "p", "f", "ans", "string", "ws", "css", "o", "ys", "sb", "i", "cs", "S", "si", "sv", "u", "g", "ls", "bytes", "b", "ins"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n  \tScanner sc = new Scanner(System.in);\\n    int[] nums = new int[5];\\n    for(int i = 0;i < 5;i++){\\n      nums[i] = sc.nextInt();\\n    }\\n    int tail = Integer.MAX_VALUE;\\n    int min = 0;\\n    for(int j = 0;j < nums.length;j++){\\n      \tint temp = nums[j] % 10;\\n    \tif(temp != 0 && tail > temp){\\n        \ttail = temp;\\n          \tmin = j;\\n        }\\n    }\\n    int sum = 0;\\n    for(int j = 0;j < nums.length;j++){\\n    \tif(j != min){\\n          if(nums[j] % 10 == 0){\\n             sum += nums[j];\\n          }else{\\n            sum += (nums[j] / 10) *10 + 10;\\n          }\\n        }\\n    }\\n    System.out.println(sum + nums[min]);\\n  }\\n}", "target": "63", "substitutes": {"sc": ["sw", "lc", " Sc", "or", "Sc", " SC", "bc", "se", "sf", "SC", "scope", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "out", "nc", "sec", "sh", "cc", "desc", "nt", "sp", "src", "acc", "rc", "system", "sche", "sb", "cs", "exp", "pc", "ner", "ci", "asc", "sign", "mc", "sci"], "nums": [" nules", "cues", "anumbers", "numbers", "anules", "nues", "nuss", "cules", "cum", "nrams", "unumbers", "Nules", " nuss", "cumbers", "nsumbers", "nanuss", "nanum", "cums", "unues", "nsules", " nems", "cumps", "Num", "noms", "Noms", "coms", "numps", "nanums", "unamples", "cuss", "unules", "nems", "namples", "nules", " noms", "nanamples", "cems", "unumps", "nsums", "anems", " nrams", "anums", " nues", "unums", " namples", "unum", "nanumps", "nsum", "num", "Nums", " numps", "unrams", " num", " numbers", "crams", "nanules", "Nrams", "Numbers"], "i": ["id", "ri", "h", "pi", "mu", "in", "mi", "init", "d", "ii", "ip", "ind", "z", "v", "io", "ix", "m", "y", "gi", "index", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "o", "eni", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "mini", "uri", "ai", "I"], "tail": ["left", "nil", "length", "len", "offset", "timeout", "unit", "term", "tails", "limit", "count", "prefix", "iter", "thin", "shift", "t", "pull", "index", "n", "lock", "end", "max", "zero", "fat", "test", "weight", "ignore", "mini", "null", "size", "total"], "min": ["little", "small", "none", "section", "length", "len", "part", "Mini", "Min", "unit", "mi", "init", "am", "ind", "limit", "start", "m", "lt", "lower", "mon", "mn", "from", "byn", "pre", "cut", "minimum", "key", "un", "dim", "pos", "n", "lock", "span", "max", "partial", "pm", "me", "next", "cm", "mine", "test", "low", "skip", "sort", "MIN", "version", "ail", "mins", "nm", "don", "diff", "mini", "size"], "j": ["jet", "journal", "h", "ja", "J", "section", "body", "length", "part", "js", "ij", "job", "d", "jj", "ii", "bj", "ind", "z", "v", "ix", "start", "jen", "fake", "je", "m", "c", "y", "jit", "json", "t", "jl", "index", "k", "dj", "kj", "n", "p", "obj", "f", "ji", "aj", "qi", "q", "dy", "lock", "li", "o", "ie", "adj", "el", "l", "fr", "uj", "note", "x", "jo", "oj", "u", "g", "jp", "b"], "temp": ["py", "small", "base", "tw", "length", "offset", "unit", "empty", "timeout", "Temp", "ii", "perature", "negative", "count", "z", "v", "prefix", "c", "fake", "current", "iter", "emp", "pt", "tc", "t", "cut", " tmp", "p", "n", "porary", "partial", "zero", "tem", "width", "tmp", "test", "full", "w", "adj", "div", "x", "frac", " temporary", "shared", "diff", "mini", "null", "size", "total"], "sum": ["base", "vol", "fill", "mix", "press", "su", "length", "len", "comment", "cum", "part", "unit", "se", "Sum", "inc", "ss", "summary", "count", "style", "start", "spread", "mem", "mass", "miss", "size", "pack", "fee", "mean", "ass", "n", "max", "carry", "fat", "cal", "account", "average", "pass", "use", "num", "sup", "weight", "loss", "u", "cost", "mini", "sign", "um", "scale", "total"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main\\n{\\n\tpublic static void main(String args[]) throws IOException\\n\t{\\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n\t\tint n=0;\\n\t\tn=Integer.parseInt(br.readLine());\\n\t\tString brr[]=br.readLine().split(\" \");\\n\t\tlong arr[]=new long[n];\\n\t\tfor(int i=0;i<n;i++)\\n\t\t{\\n\t\t\tarr[i]=Long.parseLong(brr[i]);\\n\t\t}\\n\t\tlong ans=0;\\n\t\tfor(int i=1;i<n;i++)\\n\t\t{\\n\t\t\tif(arr[i-1]>arr[i])\\n\t\t\t{\\n\t\t\t\tans+=Math.abs(arr[i]-arr[i-1]);\\n\t\t\t\tarr[i]+=Math.abs(arr[i]-arr[i-1]);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "202", "substitutes": {"br": ["sr", "ler", "yr", "cb", "orb", "str", "bro", "Br", "bc", "bb", "err", "bh", "ger", "bf", "ber", "BR", "cr", "er", "abi", "r", "iter", "db", "gr", "tr", "img", "nr", "hr", "obj", "bar", "mr", "sp", "bridge", "browser", "bs", "wr", "pr", "ref", "buf", "jar", "lr", "fr", "ner", "reader", "dr", "bl", "rb", "her", "b", "res"], "n": ["j", "nn", "conn", "sn", "ns", "in", "d", "no", "init", "count", "v", "ny", "c", "z", "m", "an", "r", "y", "network", "nc", "t", "ln", "nb", "k", "nt", "cn", "ne", "number", "p", "dn", "f", "e", "net", "na", "o", "w", "s", "N", "l", "num", "x", "ner", "nan", "u", "ni", "all", "size", "b"], "brr": ["brrs", "Brr", "hrrs", "BRp", "arrr", "arrp", "Brb", "BRR", "brb", "BRb", "BrR", "brR", " brb", "hrr", "hrb", "arrR", "hrR", "BRr", "Brp", " brR", "arrb", " brrs", "brp", "arrrs"], "arr": ["aps", "enc", "air", "vals", "yr", "arp", "app", "ab", "AR", "a", "az", "str", "art", "rs", " array", "aa", "aaa", "err", "array", "atts", "rep", "ir", "arg", "adv", "adr", "ras", "abs", "ars", "r", "parts", "gr", "tr", "rr", "data", "pre", "ak", "obj", "arch", "p", "Array", "arm", "aj", "dat", "ray", "av", "Ar", "att", "coll", "par", "pr", "plot", "act", "fr", "l", "var", "au", "x", "frac", "parse", "attr", "arc", "dr", "ann", "ar", "list", "b", "order"], "i": ["id", "j", "api", "ri", "a", "ami", "pi", "in", "mi", "init", "ii", "ip", "cli", "ori", "io", "ix", "v", "is", "start", "r", "y", "gi", "index", "adi", "phi", "e", "fi", "anti", "qi", "f", "ji", "p", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "yi", "ei", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "mini", "I", "source"], "ans": [" scans", "aps", "anas", " ads", "aces", "anus", "ani", "ats", " means", "a", "anne", "leans", "lan", "ons", "ns", "aning", "AN", "aus", "atan", "ions", "nas", "amps", "an", "ras", "ams", " ang", "ars", "ana", "olds", "os", "aned", "acs", "offs", "ents", "ds", "anna", "ks", "ands", "anc", "ANS", "na", "as", "ays", "cs", "ants", "au", "ann", "ls", "ar", "ins"]}}
{"code": "import java.util.*;\\npublic class Main\\n{\\n    public static void main(String []args)\\n    {\\n        Scanner sc=new Scanner(System.in);\\n        int a=sc.nextInt();\\n        int c1=0;\\n        int c2=0;\\n        int c3=0;\\n        int c4=0;\\n            for(int i=0;i<a;i++)\\n            {\\n                String s=sc.next();\\n                if(s.equals(\"AC\"))\\n                    c1++;\\n                if(s.equals(\"WA\"))\\n                    c2++;\\n                if(s.equals(\"TLE\"))\\n                    c3++;\\n                if(s.equals(\"RE\"))\\n                    c4++;\\n            }\\n            System.out.println(\"AC\"+\" \"+\"x\" +\" \"+ c1);\\n            System.out.println(\"WA\"+\" \"+\"x\" + \" \"+c2);\\n            System.out.println(\"TLE\"+\" \"+\"x\" +\" \" +c3);\\n            System.out.println(\"RE\"+\" \"+\"x\" + \" \" +c4);\\n    }\\n}\\n", "target": "160", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "st", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "ec", "nc", "sch", "cc", "sh", "sec", "sp", "dc", "rc", "system", "anc", "sche", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "parser", "asc", "stream", "cv", "mc", "sci"], "a": ["ba", "ma", "fa", "aaa", "aa", "sa", "am", "z", "an", "area", "c", "m", "ac", "A", "aaaa", "ga", "mA", "data", "ada", "ea", "p", "n", "alpha", "f", "aj", "span", "la", "va", "as", "ca", "na", "au", "qa", "ae", "af", "ai", "b", "sta"], "c1": ["C2", " cId", "arcId", "C3", "arc1", "uc1", "C1", "lc01", "arc3", "f4", "uc01", "cId", "lcId", "lc51", "c01", "lc3", "c0", "f1", "f2", "lc2", "c51", "C4", "lc0", "uc0", "arc51", "C01", "f3", "C0", "lc1", "lc4", "uc2", " c51"], "c2": ["dc22", "ec82", "lc22", "dc2", "lc3", "ec1", "ac22", "e6", "e82", "lc6", "e4", "ec4", "rc3", "lc2", "rc4", "e2", "c6", "c22", "dc82", "c82", "ec2", "ac4", "ac6", "rc2", "e3", "dc4", "lc4", "e1", "rc6", "dc1", "dc6", "ac2"], "c3": ["uc3", "c5", "e5", "h1", " c6", "h12", "e03", " c03", "nc35", "nc3", "f4", "f1", "e6", "uc6", "f12", " c35", " cthree", " c12", "c6", "ncthree", "h3", " c5", "c03", "ac3", "nc6", "c35", "ac6", "cthree", "h4", "e3", "uc5", "f3", "uc03", "ac35", "acthree", "c12"], "c4": ["c5", "C2", "sc8", "c34", "c7", "uc4", "sc44", "uc8", "sc22", "f7", "ac44", "ecfour", "dc2", "f4", "c44", "ec34", "c8", "dc8", "dc34", "f2", "ec4", "f8", " c5", "ec5", "dc5", "c22", "C4", "uc44", " cfour", "C7", "dcfour", "ac4", "uc22", "dc4", "cfour", "dc7", "C8", "sc4", " c34", "ac8", "ac22"], "i": ["id", "inner", "j", "pi", "mu", "I", "in", "mi", "ip", "ii", "z", "v", "io", "c", "gi", "index", "phi", "e", "p", "n", "f", "ji", "ui", "xi", "li", "iu", "multi", "o", "b", "di", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "fi", "ai", "ti"], "s": ["lines", "features", "h", "fs", "sys", "su", "sports", "js", "ns", "site", "in", "d", "http", "ss", "the", "v", "c", "is", "plus", "abs", "sync", "r", "spec", "os", "json", "t", "strings", "es", "ds", "e", "ses", "n", "p", "f", "ex", "ssl", "less", "string", "bis", "ws", "o", "w", "sb", "its", "S", "ts", "l", "si", "info", "self", "words", "sl", "text", "u", "g", "ls", "sign", "service", "b", "source"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nclass Main{\\n\tstatic final long MOD = 1_000_000_007; // 10^9+7\\n    static final int MAX = 2_147_483_646; // intMax \\n    static final int INF = 1_000_000_000; // 10^9  \\n    public static void main(String[] args) throws Exception {\\n\t\thayami saori = new hayami();\\n\t\tint n = saori.saori_hayami();\\n\t\tString[] s = Integer.toString(n).split(\"\");\\n\t\tint num = 0;\\n\t\tfor(int i = 0;i < s.length;i++){\\n\t\t\tnum += Integer.parseInt(s[i]);\\n\t\t}\\n\t\tif(n%num == 0){\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t\tsaori.close();\\n    }\\n}\\n\\nclass hayami implements Closeable {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] hayami = new byte[1024];\\n\tprivate int Hayami = 0;\\n\tprivate int saori = 0;\\n\tprivate boolean HayamiSaori() {\\n\t\tif (Hayami < saori) {\\n\t\t\treturn true;\\n\t\t}else{\\n\t\t\tHayami = 0;\\n\t\t\ttry {\\n\t\t\t\tsaori = in.read(hayami);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (saori <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\tprivate int SaoriHayami() { \\n\t\tif (HayamiSaori()) {\\n            return hayami[Hayami++];\\n         }else{\\n             return -1;\\n         }\\n\t}\\n\tprivate static boolean hayami_saori(int hayami) { \\n\t\treturn 33 <= hayami && hayami <= 126;\\n\t}\\n\tpublic boolean hayamisaori() { \\n\t\twhile(HayamiSaori() && !hayami_saori(hayami[Hayami])) Hayami++; return HayamiSaori();\\n\t}\\n\tpublic String nextHayami() {\\n\t\tif (!hayamisaori()) throw new NoSuchElementException();\\n\t\tStringBuilder hayamin = new StringBuilder();\\n\t\tint saori = SaoriHayami();\\n\t\twhile(hayami_saori(saori)) {\\n\t\t\thayamin.appendCodePoint(saori);\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t\treturn hayamin.toString();\\n\t}\\n\tpublic long saorihayami() {//nextLong\\n\t\tif (!hayamisaori()) throw new NoSuchElementException();\\n\t\tlong hayami = 0;\\n\t\tboolean misao = false;\\n\t\tint saori = SaoriHayami();\\n\t\tif (saori == '-') {\\n\t\t\tmisao = true;\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t\tif (saori < '0' || '9' < saori) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile(true){\\n\t\t\tif ('0' <= saori && saori <= '9') {\\n\t\t\t\thayami *= 10;\\n\t\t\t\thayami += saori - '0';\\n\t\t\t}else if(saori == -1 || !hayami_saori(saori)){\\n\t\t\t\treturn misao ? -hayami : hayami;\\n\t\t\t}else{\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t}\\n\tpublic int saori_hayami() {//nextInt\\n\t\tlong hayami = saorihayami();\\n\t\tif (hayami < Integer.MIN_VALUE || hayami > Integer.MAX_VALUE) throw new NumberFormatException();\\n\t\treturn (int) hayami;\\n\t}\\n\tpublic double Hayamin() { //nextDouble\\n\t\treturn Double.parseDouble(nextHayami());\\n\t}\\n\tpublic void close() {\\n\t\ttry {\\n\t\t\tin.close();\\n\t\t} catch (IOException e) {\\n\t\t}\\n    }\\n    \\n}", "target": "195", "substitutes": {"MOD": [" MODULE", "mod", "VALUE", " reg", " Z", " MIN", " Mem", "UID", "MAX", " DUP", "REG", " mod", "max", " Mod", " BIG", " mods", " LR", "MODE", "VERSION", "NUM", "ID", " LIB", " LOC", "Mod", " MAG", " REG", " DEBUG", "SIZE"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.FileWriter;\\nimport java.io.PrintWriter;\\nimport java.nio.charset.StandardCharsets;\\nimport java.io.BufferedWriter;\\nimport java.io.FileReader;\\nimport java.io.File;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static StringBuilder output = new StringBuilder();\\n\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        String a = in.next().trim();\\n        String b = in.next().trim();\\n        String c = in.next().trim();\\n        Solver solver = new Solver();\\n        solver.solve(a, b, c);\\n        System.out.println(output);\\n    }\\n\\n}\\n\\nclass Solver {\\n    public void solve(String a, String b, String c) {\\n        String ans = \"\";\\n        char turn = 'a';\\n        int an = a.length();\\n        int bn = b.length();\\n        int cn = c.length();\\n        while (true) {\\n            if (turn == 'a') {\\n                if (an == 0) {\\n                    ans = \"A\";\\n                    break;\\n                }\\n                turn = a.charAt(a.length() - an);\\n                an--;\\n            }\\n\\n            if (turn == 'b') {\\n                if (bn == 0) {\\n                    ans = \"B\";\\n                    break;\\n                }\\n                turn = b.charAt(b.length() - bn);\\n                bn--;\\n            }\\n\\n            if (turn == 'c') {\\n                if (cn == 0) {\\n                    ans = \"C\";\\n                    break;\\n                }\\n\\n                turn = c.charAt(c.length() - cn);\\n                cn--;\\n            }\\n        }\\n        Main.output.append(ans);\\n    }\\n}", "target": "11", "substitutes": {"output": ["application", "format", "external", "console", "ilo", "address", "file", "STDOUT", "language", "job", "page", "resource", "unit", "Output", "ou", "plain", "generated", " Output", "foo", "summary", "four", "io", "web", "response", "this", "out", "db", "input", "control", "cut", "queue", "cache", "result", "string", "run", "o", "class", "s", "generation", "target", "fn", "log", "text", "print", "software", "write", "buffer", "temp", "source", "config"], "in": ["id", "inner", "login", "sin", "again", "conn", "gin", "line", "bin", "inas", "query", "user", "din", "inc", "init", "err", "the", "er", "is", "scan", "start", "inside", "r", "out", "input", "ln", "min", "data", "isin", "n", "f", "win", "arin", "IN", "rin", "inn", "as", "connection", "it", "pass", "In", "ini", "s", "i", "nin", "readable", "version", "l", "kin", "pin", "exec", "ner", "vin", "lin", "reader", "buffer", "ins"], "a": ["base", "ba", "ab", "art", "fa", "audio", "ai", "aaa", "aba", "aa", "sa", "am", "ata", "ao", "array", "ha", "area", "ia", "ac", "ana", "A", "ga", "ada", "data", "ad", "e", "pa", "n", "alpha", "f", "ea", "home", "p", "la", "va", "ca", "na", "as", "o", "s", "i", "ama", "asa", "za", "da", "au", "ae", "af", "u", "ar"], "b": ["wb", "base", "bur", "ba", "ab", "cb", "ib", "body", "orb", "bin", "abb", "bc", "xb", "book", "bb", "bh", "pb", "lib", "bf", "gb", "abc", "ub", "ob", "y", "r", "db", "B", "nb", "beta", "e", "be", "p", "n", "mb", "f", "obj", "bu", "bar", "eb", "br", "bs", "binary", "o", "s", "sb", "i", "lb", "blue", "l", "bi", "fb", "bd", "u", "rb"], "c": ["sc", "cu", "enc", "ch", "cf", "lc", "cb", "ct", "cin", "bc", "cd", "d", "uc", "cr", "v", "z", "ac", "con", "ec", "y", "nc", "ce", "cc", "e", "cy", "p", "n", "unc", "f", "vc", "dc", "cache", "anc", "cm", "ca", "C", "o", "col", "s", "cs", "l", "cl", "ci", "u", "cp", "co"], "solver": ["solution", "ssolver", "ssolution", "ssanger", "resolution", "resanger", "resolver", "resolve", "setsolution", "setsolve", "Sanger", "Solve", "solve", "ssolve", "Solution", "Solver", "sanger", "setsolver", "setsanger"], "ans": ["can", "anas", "lines", "aces", "vals", "anse", "anus", "ani", "aks", "outs", "ats", "ings", "cons", "lan", "ons", "ns", "sk", "ens", "AN", "caps", "aus", "atan", "anks", "nas", "atts", "asin", "amps", "vers", "asts", "ras", "ams", "ars", "aos", "ana", "os", "urs", "aned", "cas", "offs", "anon", "ds", "ents", "san", "ares", "ads", "ks", "arts", "arms", "anc", "ANS", "na", "ania", "s", "anned", "ays", "acts", "cs", "anz", "ants", "eps", "ain", "ops", "ann", "ls", "ins"], "turn": ["man", "thing", "form", "move", "house", "round", "effect", "ask", "sh", "dec", "version", "rad", "ang", "ann", "ash", "correct", "van", "ct", "dev", "cross", "urn", "style", "stick", "input", "travel", "pull", "anch", "roll", "vo", "Turn", "car", "cur", "pass", "turned", "feat", "depth", "sign", "hal", "work", "tick", "vert", "sk", "cast", "call", "cas", "won", " turning", "brand", "hop", "cycle", "direction", "flow", "der", "ravel", "mot", " turns", "ain", "who", "ant", "transform", "fall", "can", "vel", "oct", "rol", "vers", " turned", "shift", "shape", "event", "hand", "circ", "make", "ak", "ver", "act", "div"], "an": ["can", "man", "ani", "ba", "ban", "An", "oa", "hon", "fan", "anne", "oan", "bin", "van", "aning", "jan", "AN", "yan", "aa", "ao", "sa", "am", "gn", "atan", "anan", "ana", "ane", "han", "A", "aned", "ian", "anon", "chan", "san", "p", "n", "anna", "ean", "span", "lan", "zan", "anc", "ania", "pan", "ca", "na", "gan", "anned", "anz", "ran", "ain", "ae", "vin", "nan", "enn", "ann", "ai", "ican"], "bn": ["ani", "nn", "ban", "conn", "ba", "gin", "omin", "bin", "ern", "sn", "fen", "unn", "tn", "bb", "ben", "nl", "kn", "cdn", "en", "han", "nc", "BN", "mn", "ln", "byn", "nb", "anon", "n", "yn", "dn", "wn", "pn", "anc", "dan", "inn", "na", "bm", "obin", "fn", "rn", "bi", "hn", "nian", "zn", "vin", "bl", "ann", "ll", "gn"], "cn": ["enc", "cf", "lc", "nn", "syn", "cb", "conn", "len", "lan", "sn", "cin", "bc", "unn", "fc", "uc", "kn", "cr", "cdn", "ac", "en", "con", "nc", "mn", "cc", "byn", "cot", "core", "vc", "cat", "n", "dn", "yn", "net", "pn", "anc", "inn", "cm", "pan", "ca", "na", "coll", "CN", "nic", "cs", "fn", "rn", "hn", "ain", "nan", "ci", "ann", "ll", "gn"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    boolean[] C = new boolean[N];\\n    int A = sc.nextInt();\\n    for (int i = 0; i < N - 1; i++)\\n      C[A - 1] = A + 1 == (A = sc.nextInt());\\n    int result = 0;\\n    for (int i = 0; i < N; i++)\\n      result += sc.nextInt();\\n    for (int i = 0; i < N - 1; i++)\\n      if (C[i])\\n        result += sc.nextInt();\\n      else\\n        sc.nextInt();\\n    System.out.println(result);\\n  }\\n}", "target": "223", "substitutes": {"sc": ["cont", "sw", "sr", "ch", "console", "lc", "app", "soc", " Sc", "loc", "sys", "or", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "inc", "lib", "ss", "server", "cli", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "this", "out", "ec", "tc", "nc", "search", "sch", "cc", "sh", "sec", "sub", "core", "ctx", "sp", "ser", "src", "cle", "rc", "system", "anc", "row", "sche", "cur", "class", "sb", "cs", "l", "cl", "set", "pc", "parse", "ner", "exp", "ci", "asc", "g", "screen", "cv", "sci"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "E", "NL", "No", "Part", "Network", " n", "NB", "Num", "Count", "Node", "T", "CNN", "B", "Code", "Sn", "Y", "NT", "Na", "Nat", "NS", "n", "R", "L", "K", "IN", "W", "NR", "Len", "O", "NA", "D", "In", "M", "U", "Z", "S", "Class", "X", "V", "NN", "P", "Size", "I"], "C": ["CF", "Q", "CL", "Cs", "F", "E", "Result", "CD", "CU", "CS", "Ch", "c", "Count", "H", "CNN", "T", "B", "Code", "R", "L", "CM", "K", "CR", "CI", "W", "BC", "Cu", "EC", "CA", "NC", "D", "O", "CC", "CP", "KC", "M", "CW", "U", "S", "V", "X", "P", "I", "AC"], "A": ["Si", "J", "a", "F", "Next", "E", "All", "Area", "AP", "AA", "Action", "Offset", "Num", "H", "T", "Alpha", "B", "AI", "Y", "mA", "Na", "AMI", "alpha", "Array", "L", "API", "K", "O", "CA", "NA", "D", "At", "Info", "M", "II", "U", "S", "ANC", "LA", "V", "X", "ID", "P", "Ak", "ai", "I", "G"], "i": ["id", "inner", "j", "api", "ri", "layer", "a", "pi", "mu", "I", "in", "mi", "init", "ip", "ii", "cli", "z", "v", "ix", "c", "start", "io", "abi", "ori", "y", "gi", "index", "adi", "phi", "e", "p", "n", "fi", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "w", "ini", "oi", "ie", "yi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "ti", "ai", "b"], "result": ["answer", "error", "counter", "function", "length", "part", "page", "Result", "grade", "err", "ULT", "winner", "die", "goal", "default", "response", "feature", "match", "future", "current", "r", "gi", "ult", "value", "data", "ret", "number", "continue", "alpha", "division", "include", "acc", "found", "test", "our", "compl", "di", "expected", "use", "score", "results", "append", "info", "cup", "status", "order", "success", "diff", "valid", "message", "done", "total", "res", "work"]}}
{"code": "import java.util.Scanner;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int s = sc.nextInt();\\n        List<Integer> a = new ArrayList<>();\\n        a.add(s);\\n        int len = 1000000;\\n        for (int i = 1; i <= len; i++) {\\n            int f;\\n            if (a.get(i - 1) % 2 == 0) {\\n                f = a.get(i - 1) / 2;\\n            } else {\\n                f = 3 * a.get(i - 1) + 1;\\n            }\\n            a.add(f);\\n        }\\n        int ans = 0;\\n        for (int i = 0; i <= len; i++) {\\n            for (int j = i + 1; j <= len; j++) {\\n                if (a.get(i) == a.get(j)) {\\n                    // System.out.printf(\"i = %d,j = %d %n\", i, j);\\n                    // System.out.printf(\"a = %d,a = %d %n\", a.get(i), a.get(j));\\n                    ans = j + 1;\\n                    System.out.println(ans);\\n                    return;\\n                }\\n            }\\n        }\\n    }\\n}\\n", "target": "166", "substitutes": {"sc": ["sw", "lc", "soc", " Sc", "cb", "Sc", " SC", "bc", "se", "SC", "sa", "sf", "scope", " scr", "sem", "server", "uc", "esc", "sq", "c", "scan", "osc", "spec", "r", "sub", "nc", "sec", "sh", "cc", "sp", "rc", "sb", "cs", "l", "si", "cl", "pc", "exec", "ner", "sl", "ci", "g", "mc", "sci"], "s": ["lines", "ips", "h", "ns", "ens", "ints", "sa", "d", "services", "array", "ps", "c", "is", "m", "params", "parts", "os", "xs", "es", "ils", "strings", "ents", "ds", "e", "p", "n", "ses", "ids", "ries", "cs", "S", "l", "ches", "si", "ls", "size", "b", "ts", "ins"], "a": ["aw", "api", "ba", "oa", "ma", "fa", "aaa", "aa", "ao", "sa", "ata", "am", "aux", "array", "http", "ha", "an", "area", "c", "ac", "ia", "ana", "this", "y", "A", "ga", "e", "p", "ea", "alpha", "missing", "aj", "ar", "la", "wa", "va", "as", "na", "ca", "ra", "w", "ama", "work", "za", "l", "da", "self", "au", "ae", "parser", "auto", "u", "all", "af", "ai", "list", "b", "sta"], "len": ["base", "left", "lc", "loc", "lu", "lf", "length", "lan", "part", "kl", "in", " l", "lib", "limit", "lang", "count", "ix", "lit", "is", "en", "ld", "ln", "dl", "il", "pos", "n", "L", "lock", "la", "li", "Len", "coll", "fin", "el", "val", "l", "lon", "lif", "lin", "all", "bl", "ll", "list"], "i": ["id", "api", "ri", "ami", "pi", "in", "mi", "init", "ip", "ii", "cli", "ir", "ori", "v", "io", "ix", "is", "im", "c", "y", "gi", "ine", "phi", "e", "anti", "p", "qi", "ji", "ki", "ik", "ui", "xi", "li", "iu", "multi", "eni", "b", "di", "ini", "isi", "ie", "yi", "oi", "ish", "l", "si", "bi", "info", "zi", "x", "ci", "ni", "u", "uri", "fi", "ai", "ti", "mini", "I", "vi"], "f": ["id", "cf", "h", "fs", "fo", "form", "F", "function", "fa", "free", "fm", "fx", "sf", "fen", "d", "tf", "fc", "fd", "v", "c", "m", "r", "fp", "xf", "t", "fast", "fe", "e", "p", "n", "fun", "fac", "feed", "full", "ref", "field", "fn", "l", "fr", "info", "x", "frac", "g", "u", "fi", "rf", "fl", "b", "flat"], "ans": [" scans", "alls", " fa", "ens", "al", "in", "an", "ances", " c", "ane", "ln", "es", "ents", "un", "ism", "aj", " af", "span", "ends", "ran", "num", "af", "ops", "ann", "all", "ai", "ins"], "j": ["h", "ja", "J", "js", "ij", "jj", "ii", "bj", "ju", "z", "v", "c", "je", "m", "y", "jc", "jl", "k", "e", "dj", "p", "n", "kj", "qi", "ji", "aj", "q", "dy", "li", "o", "ie", "fr", "l", "uj", "x", "jo", "u", "g", "jp", "b"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main (String[] args){\\n        Scanner stdIn = new Scanner(System.in);\\n        int N = stdIn.nextInt();\\n\\n        String S = stdIn.next();\\n        String T = stdIn.next();\\n\\n        String B = \"\";\\n        String S_I;\\n        String T_I;\\n        for(int i=0; i<N; i++){\\n            S_I = String.valueOf(S.charAt(i));\\n            B=B.concat(S_I);\\n            T_I = String.valueOf(T.charAt(i));\\n            B=B.concat(T_I);\\n        }\\n        System.out.print(B);\\n        //List<String> A = new ArrayList<>();\\n\\n        \\n\\n\\n    }\\n}", "target": "200", "substitutes": {"stdIn": ["stdOut", "STDIns", "ndIN", " stdin", "ndin", "stdIns", "ndIns", "stin", "STDIn", "STDin", "adOut", " stdIng", "stdIng", "STDIN", " stdOut", "stIN", "stIns", "adin", "stdin", "stOut", " stdIns", "stdIN", "stIng", "standardIn", " stdIN", "adIN", "standardin", "standardIN", "standardIng", "STDOut", "ndIn", "adIn", "stIn"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "E", " n", "NB", "H", "A", "NI", "Y", "NT", "NS", "n", "R", "L", "K", "W", "Len", "C", "O", "D", "SN", "M", "II", "Z", "V", "X", "NN", "P", "Size", "I", "G"], "S": ["SH", "Si", "SS", "As", "SU", "Su", "F", "SL", "TS", "AS", "Session", "SER", "A", "OS", "NS", "R", "L", "IN", "SE", "C", "Source", "SN", "SP", "s", "M", "ST", "U", "SI", "Socket", "X", "RS", "P", "I", "G"], "T": ["Target", "LT", "TT", "F", "E", "TS", "Test", "H", "PT", "A", "t", "ET", "R", "L", "AT", "OT", "DT", "W", "C", "O", "Type", "D", "M", "U", "Z", "Tar", "X", "V", "P", "I", "G", "UT"], "B": ["Buffer", "BI", "F", "BL", "E", "LB", "EB", "Block", "I", "DB", "Part", "AB", "BG", "NB", "Builder", "BF", "H", "SB", "A", "MB", "Bs", "Y", "BER", "BB", "Message", "Base", "Both", "R", "L", "WB", "QB", "Back", "BA", "W", "BC", "C", "O", "GB", "D", "M", "BS", "U", "OB", "V", "BE", "PB", "P", "Body", "BD", "Blue", "Bar", "b", "G", " b"], "S_I": ["NS_N", "T_LI", "S_LI", "S_B", "S_Bi", "S_L", "S_N", "T_L", "S_In", "NS_II", "T_In", "S_F", "T_F", "T_B", "NS_Bi", "NS_I", "T_Is", "S_II", "S_Is"], "T_I": ["T_Info", "T_H", " TIDPI", "TIDPI", "P_SI", "S__I", "T_Line", "T_O", "TWorkInfo", "P_I", "TIDO", "TIDH", "TWorkSI", "T__Line", "P_Info", "S__Is", "TWorkI", "TWorkKI", "TIDI", "T_IJ", " T_PI", "T__Is", "S__IJ", "T_SI", " TIDI", "T__IJ", "T_PI", " TIDH", "T__I", "S__Line", "T_KI", "TAMIJ", " TIDO", " T_O", "TAMI", "P_KI", "TAMIs", "S_Line", "T_Is", " T_H", "TAMLine", "S_IJ", "S_Is"], "i": ["id", "slice", "j", "ri", "h", "ami", "pi", "I", "in", "init", "ii", "z", "v", "io", "c", "is", "abi", "ix", "ori", "t", "gi", "index", "data", "k", "e", "p", "n", "fi", "f", "qi", "ji", "ui", "me", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "isi", "oi", "ie", "chi", "si", "bi", "hi", "x", "zi", "block", "ci", "u", "ni", "ti", "uri", "ai", "b"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc =new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\t\\n\t\tif (A >= 13) {\\n\t\t\tSystem.out.println(B);\\n\t\t}else if(A >= 6 && A <= 12){\\n\t\t\tSystem.out.println(B/2);\\n\t\t}else{\\n\t\t\tSystem.out.println(0);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "249", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "sp", "ser", "acc", "src", "rc", "ca", "cur", "cs", "cl", "pc", "exec", "ner", "asc", "cv", "sci"], "A": ["As", "AR", "a", "F", "EA", "E", "MA", "AB", "AP", "Area", "AS", "AA", "IA", "Action", "H", "Ma", "T", "Alpha", "Y", "SA", "PA", "L", "AM", "Array", "API", "W", "C", "O", "CA", "NA", "D", "M", "HA", "U", "S", "N", "Java", "LA", "X", "P", "AL", "I", "G", "AC"], "B": ["Q", "BI", "Beta", "J", "F", "E", "LB", "EB", "DB", "AB", "Bi", "NB", "H", "SB", "UB", "Number", "MB", "T", "Bs", "Y", "BB", "R", "L", "WB", "BA", "W", "O", "C", "GB", "D", "b", "M", "BS", "U", "N", "OB", "X", "V", "P", "I", "G"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString info = br.readLine();\\n\t\tString[] fight = info.split(\" \");\\n\t\tint strikes = (int) Math.ceil((Double.parseDouble(fight[0])/Double.parseDouble(fight[1])));\\n\t\tSystem.out.println(strikes);\\n\t}\\n}", "target": "147", "substitutes": {"br": ["cb", "orb", "str", "bro", "Br", "bb", "report", "bh", "err", "ber", "BR", "cr", "io", "er", "ori", "abs", "r", "gr", "tr", "img", "hr", "obj", "bar", "arr", "mr", "ctr", "result", "string", "bridge", "browser", "wr", "ref", "bt", "buf", "i", "div", "fin", "fr", "reader", "dr", "stream", "bl", "rb", "b"], "info": ["fw", "id", "format", "error", "fo", "line", "str", "INFO", "in", "afi", "about", "report", "header", "information", "type", "start", "txt", "name", "match", "thin", "json", "data", "key", "join", "f", "bug", "string", "inf", "feed", "Info", "buff", "i", "stats", "hi", "status", "text", "hello", "diff", "raw", "entry", "work"], "fight": ["fw", "players", "quarter", "blast", "hit", "games", "game", "flight", "kick", "ticket", "battle", "football", "winner", "kill", "Fight", "play", "league", "split", "match", "word", "enemy", "defense", "fail", "fights", "fighting", "won", "trial", "win", "picture", "argument", "width", "team", "feed", "fighter", "w", "fighters", "guard", "strike", "combat", "attack", "weight", "parse", "fare", "threat", "work"], "strikes": ["strows", "strrows", "stracks", "spares", "fearters", "strares", "restriors", "Stacks", "stacks", "spacks", "stares", "Stares", "stiffs", "restrikes", "restarters", "ferikes", "fortiffs", "Strows", "sprikes", "feiffs", "strrikes", "fortriors", "fortrikes", "starters", "restiffs", "sprows", "feriors", "Strikes", "fortarters", "striors"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n \\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    final int k = sc.nextInt(), a = sc.nextInt(), b = sc.nextInt();\\n    if(a % k == 0 || b % k == 0){\\n      System.out.println(\"OK\");\\n    }else{\\n      if(b/k - a/k == 0){\\n        System.out.println(\"NG\");\\n      }else{\\n        System.out.println(\"OK\");\\n      }\\n    }\\n  }\\n}", "target": "28", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "soc", " Sc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "com", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "cc", "sh", "ctx", "sp", "acc", "src", "rc", "sche", "na", "cur", "class", "cs", "l", "cl", "pc", "exec", "ner", "sl", "asc", "cv", "sci"], "k": ["j", "ch", "sk", "kick", "d", "dk", "ka", "ko", "kn", "c", "m", "ac", "ok", "y", "ack", "ck", "cc", "key", "e", "ak", "p", "n", "ad", "f", "alpha", "ki", "K", "q", "ik", "ks", "o", "w", "i", "kid", "kw", "l", "mk", "x", "kg", "unk", "g", "u", "work"], "a": ["j", "aw", "api", "ba", "ab", "oa", "fa", "aa", "sa", "d", "am", "an", "c", "ac", "y", "A", "ga", "ad", "e", "p", "n", "alpha", "f", "ak", "pa", "aj", "ca", "as", "va", "o", "w", "i", "da", "x", "ae", "af", "u", "ai"], "b": ["wb", "j", "base", "ba", "ab", "ib", "body", "abb", "d", "bb", "pb", "bf", "v", "c", "ub", "ob", "y", "db", "B", "nb", "e", "be", "p", "n", "mb", "f", "pa", "eb", "bot", "bis", "bs", "o", "sb", "lb", "i", "l", "bi", "fb", "u", "rb"]}}
{"code": "import java.io.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args){\\n\t\ttry{\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\tString[] line = br.readLine().split(\" \");\\n\t\t\tint r = Integer.parseInt(line[0]);\\n\t\t\tint c = Integer.parseInt(line[1]);\\n\t\t\tint[][] r1 = new int[r][c];\\n\t\t\tint sum2;\\n\\n\t\t\tfor(int i = 0;i < r;i++){\\n\t\t\t\tString[] str = br.readLine().split(\" \");\\n\t\t\t\tfor(int j = 0;j < c;j++){\\n\t\t\t\t\tr1[i][j] = 0;\\n\t\t\t\t\tint a = Integer.parseInt(str[j]);\\n\t\t\t\t\tr1[i][j] += a;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tfor(int i = 0;i < r;i++){\\n\t\t\t\tint sum = 0;\\n\t\t\t\tfor(int j = 0;j < c;j++){\\n\t\t\t\t\tSystem.out.print(r1[i][j]+\" \");\\n\t\t\t\t\tsum += r1[i][j];\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(sum);\\n\t\t\t}\\n\t\t\t\\n\t\t\tsum2 = 0;\\n\t\t\tfor(int j = 0;j < c;j++){\\n\t\t\t\tint sum = 0;\\n\t\t\t\tfor(int i = 0;i < r;i++){\\n\t\t\t\t\tsum += r1[i][j];\\n\t\t\t\t}\\n\t\t\t\tsum2 += sum;\\n\t\t\t\tSystem.out.print(sum+\" \");\\n\t\t\t\tif(j == c-1){\\n\t\t\t\t\tSystem.out.print(sum2);\\n\t\t\t\t}\t\t\\n\t\t\t}\\n\t\tSystem.out.print(\"\\n\");\\n\t\t} catch (Exception e){\\n\t\t}\\n\t}\\n}", "target": "23", "substitutes": {"br": ["sr", "ler", "yr", "cb", "orb", "bro", "Br", "obl", "bb", "err", "bh", "ber", "BR", "cr", "io", "er", "ob", "HR", "out", "gr", "tr", "img", "nr", "hr", "obj", "bar", "arr", "sp", "mr", "ctr", "bridge", "browser", "wr", "bs", "buf", "bm", "lr", "fr", "handle", "ner", "reader", "dr", "bl", "rb", "her", "b"], "line": ["lines", "strip", "look", "le", "file", "lf", "comment", "page", "se", "in", "user", "Line", "shell", "header", "nl", "style", "split", "name", "sync", "word", "data", "key", "ne", "cell", "cle", "LINE", "string", "row", "pass", "el", "code", "l", "log", "lo", "parse", "text", "sl", "ner", "block", "letter", "lin", "write", "list", "inline", "source", "entry"], "r": ["sr", "yr", "h", "right", "rs", "d", "err", "ir", "z", "v", "cr", "er", "m", "ac", "tr", "t", "rr", "kr", "nr", "re", "hr", "k", "ur", "p", "n", "R", "f", "q", "rc", "rh", "pr", "s", "range", "fr", "l", "x", "ner", "arc", "dr", "u", "rt", "ru", "ar", "rb", "b"], "c": ["sc", "cu", "ch", "cf", "lc", "h", "rec", "in", "d", "count", "uc", "z", "v", "cr", "m", "ac", "y", "con", "nc", "t", "ce", "cc", "cor", "core", "k", "p", "n", "f", "dc", "q", "rc", "cm", "C", "col", "s", "cs", "code", "l", "pc", "x", "ci", "u", "g", "b"], "r1": [" r9", " r2", "pr1", "br2", "r3", "r2", "rOne", " rOne", "pr100", "r100", "sr1", "ru1", "R3", "srapp", "br81", "erone", "srone", "sr11", "nrOne", "ru0", "rc100", "er11", "r81", "c1", "nr3", "c81", " rone", " r11", "nr2", " r3", " r100", "R100", "r61", "nrapp", "r9", "er1", "R81", "ru9", "nr1", "er100", "pr2", "R1", "r11", "br1", "dr100", " r0", "rapp", "dr1", "nr100", "rc2", "rc61", "dr0", "dr9", "R61", "c2", "rone", "ru100", "pr61", "sr100", "R2", " rapp", "ROne", "rc1", "r0"], "sum2": ["count2", "sum5", "mean4", "Sum1", " sum5", "sha1", "rank2", "count0", "Sum2", "sumtwo", "mean5", "sumTwo", "Sum5", "shatwo", "mean2", " sum0", "shaTwo", "Sumtwo", "Sum4", " sum4", "sha4", "mean1", "sum1", "sum4", "rank0", "sum0", "SumTwo", "sha2", " sumtwo", " sumTwo", " sum1"], "i": ["id", "api", "ri", "pi", "ij", "I", "in", "mi", "init", "ii", "ip", "cli", "ir", "z", "v", "io", "is", "ori", "ix", "iv", "y", "gi", "phi", "p", "fi", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "it", "eni", "o", "di", "ini", "ie", "oi", "yi", "l", "si", "bi", "hi", "info", "x", "ci", "ni", "u", "ti", "uri", "ai", "g", "b"], "str": ["sr", "strip", "Str", "st", "err", "cr", "er", "style", "url", "STR", "tr", "sec", "stri", "data", "obj", "star", "sp", "arr", "string", "char", "cur", "pass", "pr", "code", "fr", "strike", "cl", "parse", "text", "ner", "sl", "dr", "bl", "name"], "j": ["ch", "jet", "pos", "h", "ja", "J", "part", "ij", "js", "job", "err", "jj", "ii", "bj", "count", "z", "ix", "v", "je", "io", "start", "y", "jl", "jc", "gh", "gi", "index", "k", "key", "dj", "obj", "n", "p", "qi", "f", "ji", "aj", "ik", "q", "ui", "xi", "li", "next", "it", "o", "di", "pr", "ax", "ie", "adj", "el", "l", "fr", "uj", "bi", "si", "x", "jo", "ci", "oj", "u", "ni", "jp", "g", "b"], "a": ["ba", "ab", "oa", "ma", "aa", "sa", "ata", "ha", "an", "area", "ac", "ana", "A", "ga", "data", "ada", "ea", "pa", "p", "alpha", "f", "aj", "la", "ca", "va", "as", "na", "o", "za", "da", "au", "qa", "ae", "u", "b"], "sum": ["cos", "sa", "count", "sh", "pack", "mean", "ass", "beta", "add", "net", "result", "fat", "average", "conf", "use", "up", "num", "diff", "fee", "cal", "hash", "vol", "Sum", "cover", "summary", "group", "style", "spread", "match", "data", "index", "key", "alpha", "sp", "sort", "gram", "space", "mom", "sign", "um", "name", "error", "comment", "cum", "ss", "mem", "sim", "mass", "out", "sub", "n", "max", "skip", "parse", "scale", "su", "bin", "part", "se", "unit", "miss", "shape", "cache", "zero", "coll", "si", "loss", "log", "weight", "info", "cost", "size", "total"], "e": ["one", "error", "ception", "E", "d", "err", "ace", "et", "pe", "er", "v", "ee", "es", "fe", "re", "ise", "p", "f", "exc", "ge", "ev", "o", "oe", "ie", "ae", "de"]}}
{"code": "import java.math.BigDecimal;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t\\n\t\tlong A = scan.nextLong();\\n\t\tdouble B = scan.nextDouble();\\n\t\t\\n\t\tBigDecimal a = new BigDecimal(String.valueOf(A));\\n\t\tBigDecimal b = new BigDecimal(String.valueOf(B));\\n\t\tBigDecimal multi =a.multiply(b);\\n\t\tBigDecimal multi1 = multi.setScale(0, BigDecimal.ROUND_DOWN);\\n\t\t\\n\t\tSystem.out.println(multi1);\\n\\n\t}\\n\\n}\\n", "target": "15", "substitutes": {"scan": ["sc", "can", "slice", "look", "nn", "conn", "fan", "query", "util", "se", "in", "report", "connect", "io", "an", "sync", "r", "see", "out", "search", "read", "clean", "chan", "cat", "san", "n", "watch", "walk", "bug", "span", "system", "row", "na", "pan", "feed", "run", "skip", "gram", "l", "Scan", "ignore", "parse", "pin", "ner", "auto", "ann", "reader", "serv", "sci"], "A": ["As", "F", "E", "GA", "The", "AB", "Area", "AA", "H", "Input", "Alpha", "Y", "mA", "SA", "Na", "alpha", "L", "Access", "Array", "API", "BA", "C", "CA", "Ar", "Az", "D", "M", "U", "S", "Java", "Ca", "LA", "AAA", "P", "I", "G", "AC"], "B": ["BI", "F", "E", "LB", "EB", "DB", "Ub", "AB", "Bi", "NB", "BF", "SB", "UB", "Bs", "Y", "BER", "BB", "Both", "R", "L", "WB", "QB", "BA", "BC", "C", "GB", "D", "BS", "U", "OB", "BE", "Blue", "G"], "a": ["api", "app", "ba", "ab", "aaa", "aa", "sa", "aux", "array", "abc", "an", "area", "c", "ia", "ac", "ga", "ad", "pa", "p", "alpha", "ava", "aj", "la", "ca", "as", "va", "ama", "l", "da", "au", "ae", "auto"], "b": ["wb", "base", "ib", "ab", "cb", "ba", "body", "abb", "d", "bb", "bf", "gb", "ob", "c", "abs", "y", "db", "BB", "be", "p", "mb", "bar", "f", "eb", "br", "bs", "o", "s", "sb", "i", "lb", "l", "fb", "bd", "auto", "rb"], "multi": ["small", "uni", "single", "flo", "math", "multiple", "mu", "array", "cli", "group", "split", "c", "Multi", "m", "quad", "phi", "batch", "n", "alpha", "f", "partial", "ui", "la", "li", "two", "mult", "di", "i", "micro", "div", "l", "lo", "bi", "sum", "auto", "u", "diff", "mini", "done", "scale", "total", "flat"], "multi1": ["mult1", "laOne", "multp", "multOne", "total1", "single1", " multiOne", " multip", "multiOne", "totalOne", "lap", "la1", "multip", "singleOne"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\tif(a >= b) {\\n\t\t\tfor(int i = 0; i < a; i++) sb.append(b);\\n\t\t} else {\\n\t\t\tfor(int i = 0; i < b; i++) sb.append(a);\\n\t\t}\\n\\n\t\tSystem.out.println(sb);\\n\t}\\n}", "target": "24", "substitutes": {"sc": ["sw", "ch", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "sf", "SC", "sem", " scr", "com", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "cor", "sec", "sp", "ser", "src", "acc", "rc", "sche", "ca", "cur", "cs", "cl", "pc", "exec", "ner", "asc", "sci"], "a": ["api", "ba", "ab", "oa", "fa", "aaa", "aa", "sa", "d", "am", "bb", "an", "c", "area", "ac", "ia", "y", "A", "ga", "ad", "e", "p", "n", "alpha", "f", "pa", "ea", "aj", "ar", "la", "ca", "as", "va", "na", "ak", "da", "au", "x", "qa", "ae", "af", "u", "ai", "sta"], "b": ["wb", "j", "base", "ib", "ab", "h", "cb", "ba", "length", "bin", "abb", "xb", "aa", "bc", "d", "bb", "count", "bf", "v", "c", "ob", "boot", "r", "y", "db", "A", "B", "nb", "ad", "e", "p", "n", "mb", "f", "eb", "bot", "next", "bs", "o", "lb", "l", "fb", "x", "bas", "u", "rb"], "sb": ["wb", "obb", "sth", "lp", "cb", "sg", "bg", "zb", "abb", "bc", "sf", "xb", "sa", "bb", "bh", "bj", "ss", "pb", "bsp", "bf", "usb", "gb", "sq", "ob", "SB", "stab", "db", "nb", "BB", "mb", "bp", "eb", "src", "kb", "bs", "buff", "lb", "bt", "bm", "buf", "si", "fb", " SB", "bd", "bl", "ls", "rb", "sv"], "i": ["id", "j", "api", "ri", "ami", "pi", "mu", "in", "d", "mi", "init", "ip", "ii", "z", "v", "ori", "io", "abi", "m", "gi", "index", "phi", "e", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "oi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "fi", "ai", "ti", "g", "I"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Main main = new Main();\\n        main.solve(args);\\n    }\\n\\n    public void solve(String[] args) {\\n        MyScanner scanner = new MyScanner();\\n\\n        String a = scanner.next();\\n        int ans = 0;\\n        if(a.equals(\"SUN\")) {\\n        \tans = 7;\\n        }else if(a.equals(\"MON\")) {\\n        \tans = 6;\\n        }else if(a.equals(\"TUE\")) {\\n        \tans = 5;\\n        }else if(a.equals(\"WED\")) {\\n        \tans = 4;\\n        }else if(a.equals(\"THU\")) {\\n        \tans = 3;\\n        }else if(a.equals(\"FRI\")) {\\n        \tans = 2;\\n        }else if(a.equals(\"SAT\")) {\\n        \tans = 1;\\n        }\\n        System.out.println(ans);\\n\\n    }\\n\\n    private static long gcd(long m, long n) {\\n        if(m < n) return gcd(n, m);\\n        if(n == 0) return m;\\n        return gcd(n, m % n);\\n    }\\n\\n    private static long lcm(long m, long n) {\\n        return m * n / gcd(m, n);\\n    }\\n\\n    private class MyScanner {\\n        String[] s;\\n        int i;\\n        BufferedReader br;\\n        String reg = \" \";\\n        MyScanner () {\\n            s = new String[0];\\n            i = 0;\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n        public String next() {\\n            try {\\n                if (i < s.length) return s[i++];\\n                String line = br.readLine();\\n                while (line.equals(\"\")) {line = br.readLine();}\\n                s = line.split(reg, 0);\\n                i = 0;return s[i++];\\n            } catch (Exception e) {e.printStackTrace();}\\n            return null;\\n        }\\n        public int nextInt() {\\n            try {return Integer.parseInt(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n        public double nextDouble() {\\n            try {return Double.parseDouble(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n        public long nextLong()  {\\n            try {return Long.parseLong(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n    }\\n}", "target": "136", "substitutes": {"scanner": ["scanNER", "scaner", "Scanner", "canr", " scanr", "analyner", "caner", "Scaner", "canning", "analyer", "Scanr", " scanning", "analyning", "scanning", "scanr", "canner", "canNER", "analyNER", "Scanning", " scaner", "ScanNER"], "a": ["api", "app", "access", "ab", "oa", "art", "aa", "sa", "ata", "am", "aux", "z", "an", "c", "area", "ac", "at", "r", "ana", "y", "A", "ga", "data", "e", "p", "alpha", "f", "title", "ea", "entry", "pa", "missing", "la", "active", "wa", "na", "va", "as", "ca", "o", "ya", "asa", "l", "za", "common", "au", "ae", "valid", "auto", "g", "ann", "aka", "action", "ar", "b", "name", "sta"], "ans": [" scans", "opens", "lines", "anas", "aces", "aps", "ips", "man", "features", "outs", "alls", "includes", "ats", " means", "errors", "leans", "lan", "ons", "ns", "ens", "sk", "runs", "AN", "aus", "atan", "grades", "nas", "ions", "amps", "an", "reads", "scan", "ams", "ars", "ras", "oops", "ases", "olds", "asts", "regular", "urs", "aned", "ana", "powers", "cas", "rows", " sins", "offs", "annels", "ents", "san", "nos", "ks", " spans", "span", "ANS", "les", "na", "blocks", "ays", "acts", "ends", "works", "ants", "eps", "anes", "ann", "ls", "annot", "ins", "helps"], "m": ["j", "man", "h", "mu", "dm", "d", "am", "mi", "om", "md", "z", "v", "an", "c", "r", "y", "min", "mn", "mean", "e", "gm", "p", "dn", "f", "mr", "wm", "ym", "machine", "pm", "me", "mm", "hm", "cm", "o", "M", "w", "bm", "l", "num", "N", "nm", "x", "g", "mo", "ms", "mini", "u", "um", "mc", "b"], "n": ["j", "nn", "h", "sn", "ns", "nu", "d", "no", "v", "z", "c", "an", "not", "r", "en", "y", "network", "nc", "t", "mn", "np", "k", "un", "ne", "e", "p", "number", "on", "f", "net", "cn", "o", "w", "M", "l", "N", "num", "nm", "x", "nan", "g", "u", "b", "name"], "s": ["lines", "gs", "ips", "fields", "values", "outs", "h", "objects", "ings", "ns", "js", "rs", "images", "d", "services", "ss", "ps", "sets", "v", "c", "is", "abs", "parts", "xs", "os", "t", "strings", "es", "states", "groups", "qs", "ds", "e", "p", "ses", "f", "comments", "ssl", "ids", "ments", "ks", "string", "ws", "ims", "o", "hs", "w", "sb", "its", "gets", "S", "sites", "l", "si", "ches", "sv", "g", "u", "posts", "ls", "ms", "b", "ts", "ins", "forms"], "i": ["slice", "id", "inner", "j", "lc", "ri", "pi", "mu", "I", "mi", "d", "ip", "ii", "z", "ori", "ix", "io", "is", "v", "c", "gi", "index", "phi", "key", "e", "p", "pos", "qi", "f", "ui", "xi", "li", "iu", "multi", "o", "di", "ini", "ie", "yi", "l", "si", "bi", "hi", "info", "x", "ci", "diff", "u", "g", "uri", "fi", "ai", "mini", "ti", "vi"], "br": ["ler", "ch", "j", "yr", "str", "bro", "ro", "bc", "Br", "err", "oper", "ger", "ber", "BR", "box", "er", "io", "HR", "abs", "r", "out", "gr", "tr", "img", "hr", "be", "ur", "p", "obj", "sp", "arr", "bar", "mr", "shr", "ver", "result", "bridge", "next", "browser", "wr", "pr", "buf", "div", "lr", "fr", "brush", "bi", "reader", "rel", "dr", "bl", "rb", "b", "res"], "reg": ["rig", "tab", "loc", "sg", "bg", "param", "str", "ro", "art", "rec", "greg", "mod", "rem", "err", "rule", "ig", "rep", " Reg", "res", "match", "r", "spec", "regular", "sub", "tag", "eng", "re", "repl", "ret", "REG", "register", "ring", "fun", "debug", "col", "region", " rg", "exp", "pattern", " REG", "g", "Reg", "rg"], "line": ["lines", "base", "strip", "lc", "look", "le", "h", "single", "lf", "body", "section", "comment", "str", "part", "page", "unit", "in", "no", "Line", "shell", "profile", "sel", "nl", "pe", "definition", "response", "sync", "r", "band", "data", "lined", "key", "e", "p", "f", "cell", "end", "LINE", "string", "row", "pass", "val", "code", "l", "log", "pin", "parse", "status", "sl", "text", "block", "letter", "lin", "link", "message", "bl", "inline", "b", "source", "name"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    String[] w = {\"Sunny\",\"Cloudy\",\"Rainy\"};\\n    for(int i = 0;i<2;i++){\\n      if(s.compareTo(w[i])==0){\\n        System.out.println(w[i+1]);\\n      }\\n    }\\n    if(s.compareTo(w[2])==0){\\n      System.out.println(w[0]);\\n    }\\n  }\\n}\\n", "target": "60", "substitutes": {"sc": ["sw", "enc", "ch", "soc", " Sc", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "ss", "sel", "uc", "cr", "esc", "c", "scan", "osc", "sync", "sub", "ec", "nc", "sec", "cc", "sh", "desc", "proc", "nt", "sp", "acc", "ocr", "src", "rc", "system", "cur", "cl", "pc", "ner", "asc", "g", "stream", "sci"], "s": ["opens", "sw", "lines", "gs", "ns", "js", "styles", "sf", "se", "d", "services", "ss", "ps", "v", "c", "south", "abs", "aws", "spec", "is", "y", "xs", "t", "strings", "es", "ses", "n", "p", "f", "ssl", "sym", "less", "string", "ws", "o", "sb", "S", "l", "si", "self", "words", "sl", "tests", "ls", "sv", "ins"], "w": ["fw", "sw", "wb", "tw", "aw", "wx", "h", "wl", "wal", "rew", "wh", "iw", "west", "d", "hw", "v", "now", "way", "m", "aws", "word", "y", "t", "value", "wp", "k", "ew", "p", "n", "ex", "wave", "q", "www", "W", "wa", "ws", "ww", "o", "ow", "we", "kw", "wt", "l", "words", "x", "nw", "g", "wall", "work"], "i": ["id", "slice", "j", "a", "pi", "mu", "I", "init", "ii", "z", "v", "io", "c", "is", "y", "t", "gi", "index", "k", "phi", "e", "p", "n", "f", "qi", "ui", "me", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "ie", "oi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "mini", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tstatic int A;\\n\tstatic int B;\\n\tstatic int C;\\n\tpublic static void main(String[]args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tA=sc.nextInt();\\n\t\tB=sc.nextInt();\\n\t\tC=A*B;\\n\t\tSystem.out.println(C);\\n\t\t}\\n\\n}", "target": "35", "substitutes": {"A": ["As", "AR", "a", "F", "EA", "E", "MA", "AB", "Area", "AP", "AA", "IA", "Offset", "Alpha", "mA", "Y", "SA", "PA", "Na", "L", "AM", "Array", "API", "BA", "Ar", "CA", "NA", "O", "HA", "U", "S", "Java", "Ca", "LA", "X", "AF", "P", "Average", "Bar", "I", "AC"], "B": ["BI", "Q", "Beta", "J", "F", "E", "LB", "EB", "DB", "AB", "Ab", "Bi", "BG", "NB", "BF", "H", "SB", "Number", "MB", "T", "Bs", "Y", "BB", "Base", "R", "L", "QB", "WB", "BA", "W", "BC", "O", "GB", "D", "b", "M", "BS", "S", "N", "OB", "X", "V", "P", "BD", "Blue", "I", "G"], "C": ["Q", "CL", "Cs", "F", "E", "SC", "CV", "CU", "CS", "Con", "c", "H", "Count", "T", "CNN", "Y", "R", "L", "K", "W", "CR", "CI", "Cu", "VC", "O", "CA", "D", "EC", "CC", "M", "CW", "JC", "U", "S", "N", "Cl", "Ca", "X", "V", "P", "DC", "I", "G", "AC"], "sc": ["sw", "enc", "cont", "lc", "soc", " Sc", "loc", "cer", "ct", "Sc", " SC", "bc", "sf", "se", "SC", "scope", "com", "ss", "lib", "uc", "esc", "sq", "c", "scan", "osc", "sync", "spec", "tc", "ec", "nc", "cc", "sh", "sec", "cus", "sp", "dc", "rc", "ca", "na", "class", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "g", "cv", "sci"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner scan = new Scanner(System.in);\\n        int cards[]  = {1, 0, -1};\\n        int counts[] = new int[3], n, maxValue;\\n\\n        for(int i = 0; i < counts.length; i++) {\\n            counts[i] = scan.nextInt();\\n        }\\n        n = scan.nextInt();\\n\\n        maxValue = 0;\\n        for(int i = 0; i < counts.length; i++) {\\n            if(n >= counts[i]) {\\n                maxValue += cards[i] * counts[i];\\n                n -= counts[i];\\n            } else {\\n                maxValue += cards[i] * n;\\n                n = 0;\\n            }\\n        }\\n\\n        System.out.println(maxValue);\\n        scan.close();\\n        return;\\n    }\\n}", "target": "56", "substitutes": {"scan": ["sc", "can", "slice", "inner", " scanner", "sin", "man", "ban", "nn", "sys", "fan", "query", "util", "se", "in", "conv", "ry", "server", "connect", "er", "an", "sync", "r", "match", "out", "search", "con", "read", "see", "ln", "ski", "gen", "chan", "cat", "san", "plan", "watch", "wan", "ans", "ser", "span", "walk", "row", "na", "pan", "run", "pass", "skip", "l", "Scan", "kin", "ignore", "parse", "ner", "parser", "ann", "all", "sign", "reader"], "cards": ["lines", "classes", "cf", "changes", "fields", "lights", "includes", " positions", "cons", "codes", "games", "files", "caps", "breaks", "ards", "days", "orders", "cycles", "cross", "checks", "array", "grades", "count", "lists", "cuts", "Card", "frames", "shape", "cas", "rows", "yards", "circ", "nb", "charges", "stars", "balls", "names", "cat", "comments", "ids", "cells", "carry", "blocks", "cases", "books", "cats", "letters", "sequence", "list", "card"], "counts": [" countn", "indless", "colows", "counting", "countb", " countxs", "catns", "lats", " countl", "colls", "counti", " countes", "countl", "idns", "countxs", "coles", "countls", "idc", "latb", "Counts", "catls", "Countns", "maxn", "maxs", "countd", " countc", "lates", "Countxs", "countn", "Countd", " counting", "inds", " countows", "weights", "countc", "cats", " counti", "countes", "cold", "latds", "Countn", "iding", "cols", "weightds", "countns", "idls", "ides", "collxs", "countows", "colles", "latl", "countless", "Countless", "idn", "countps", "cates", " countings", "Countings", "weightl", " countless", " countds", "Countls", "indns", " countps", "Countows", "Countb", "weighti", "maxc", "collps", "maxing", "Countes", "countings", "Countps", " countns", "ids", " countb", "indings", "lati", "latn", " countd", "countds"], "n": ["j", "nn", "conn", "len", "sn", "ns", "nu", "unit", "d", "count", "v", "an", "c", "z", "m", "y", "en", "network", "nc", "t", "ln", "min", "non", "nb", "ng", "k", "cn", "e", "ne", "p", "dn", "f", "number", "un", "span", "pn", "na", "o", "eni", "w", "s", "adj", "fn", "N", "l", "num", "x", "nan", "ci", "u", "ni", "size", "b", "name"], "maxValue": ["defaultVal", "maxValues", "MaxValue", "MaxComp", "maxIndex", "Maxvalue", "minValue", "minVal", " maxCount", "lastValues", "MAXIndex", "maxLine", " maxvalue", "lastVal", "defaultLine", " maxVal", "MAXVal", "minLine", " maxComp", "lastvalue", "defaultCount", "minValues", "maximumValue", "defaultvalue", " maxIndex", "MAXValue", "maxvalue", "maxVal", "maximumvalue", "maxCount", "defaultValues", "MaxIndex", "MaxCount", "MaxValues", "MAXvalue", " maxValues", " maxLine", "defaultValue", "maxComp", "maximumComp", "lastValue", "MaxVal"], "i": ["id", "j", "lc", "ri", "h", "a", "length", "pi", "mu", "in", "mi", "d", "init", "ip", "ii", "cli", "ix", "io", "v", "c", "r", "y", "gi", "index", "phi", "e", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "b", "s", "oi", "ie", "yi", "l", "si", "bi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "mini", "I"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args)\\n\t{\\n\t\t Scanner sc=new Scanner(System.in);\\n\t\t int i=sc.nextInt();\\n\t\t int j=sc.nextInt();\\n\t\t int min=9999;\\n\t\t int arr[]=new int[j];\\n\t\t List<Integer> li1=new ArrayList<Integer>();\\n\t\t int flag=0;\\n\t\t if(j==0)\\n\t\t {\\n\t\t\t System.out.println(i);\\n\t\t\t return;\\n\t\t }\\n\t\t for(int k=0;k<j;k++)\\n\t\t {\\n\t\t\t arr[k]=sc.nextInt();\\n\t\t\t li1.add(arr[k]);\\n\t\t }\\n\t\t if(!li1.contains(i))\\n\t\t {\\n\t\t\t System.out.println(i);\\n\t\t\t return;\\n\t\t }\\n\t\t\\n\t\t for(int k=0;k<=j;k++)\\n\t\t {\\n\t\t\tif((li1.contains(i+k))&&(li1.contains(i-k)))\\n\t\t\t { \\n\t\t\t\t continue;\\n\t\t\t }\\n           \\n\t\t\t if(!li1.contains(i-k))\\n\t\t\t {\\n\t\t\t\t flag=1;\\n\t\t\t\t\\n\t\t\t\t System.out.println(i-k);\\n                 break;\\n\t\t\t\t \\n\t\t\t }\\n\t\t\t if(!li1.contains(i+k))\\n\t\t\t {\\n\t\t\t\t flag=1;\\n\t\t\t\t System.out.println(i+k);\\n                 break;\\n\t\t\t\t \\n\t\t\t }\\n\t\t\t \\n\t\t\t \\n\t\t\t \\n\t\t\t \\n\t\t\t \\n\t\t }\\n\t\t \\n\t\t \\n\t}\\n\\n}\\n", "target": "228", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "cor", "sh", "ctx", "sp", "ser", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "si", "cl", "pc", "ner", "ci", "asc", "screen", "cv", "mc", "sci"], "i": ["id", "slice", "api", "a", "ami", "pi", "in", "mi", "ii", "ip", "cli", "z", "v", "ori", "c", "is", "m", "io", "ix", "y", "ski", "index", "e", "p", "n", "anti", "f", "qi", "ji", "ki", "q", "ui", "xi", "li", "iu", "it", "ic", "multi", "o", "b", "di", "ini", "isi", "ie", "yi", "oi", "chi", "l", "si", "bi", "info", "x", "zi", "ci", "u", "ni", "uri", "mini", "ai", "I"], "j": ["ch", "h", "ja", "J", "length", "part", "ij", "js", "d", "jj", "ii", "ind", "kn", "z", "v", "c", "start", "m", "y", "sec", "jl", "jc", "key", "e", "ne", "p", "n", "f", "ji", "aj", "q", "li", "o", "adj", "l", "si", "uj", "x", "jo", "u", "jp", "size", "b"], "min": ["id", "mid", "len", "offset", "Min", "mod", "in", "init", "d", "ind", "start", "is", "m", "en", "sec", "pos", "n", "p", "lock", "max", "skip", "val", "version", "code", "diff", "all", "ai"], "arr": ["enc", "air", "app", "a", "len", "art", "str", "aaa", "rs", "aa", "err", "array", "arg", "adr", "abc", "ars", "r", "iter", "rar", "img", "rr", "data", "pre", "cat", "p", "n", "arch", "Array", "arm", "obj", "dat", "br", "av", "na", "att", "Ar", "pr", "s", "l", "fr", "info", "var", "au", "x", "frac", "order", "attr", "arc", "dr", "all", "bl", "ar", "list", "b", "res"], "li1": ["iiinf", "si2", "liOne", "ii2", "lainf", "siOne", "ciOne", "lia2", "LI2", "liinf", "ali2", "lik", "ci0", "aliOne", "lin2", "laone", "cli1", "LIOne", "ci2", "lione", "ci1", "lak", "bi2", "bik", "li3", "lia100", "l3", "linOne", "la2", "la0", "LI1", "lia71", "la71", "li100", "lie2", "sione", "bi1", "lin1", "li2", "la100", "laOne", "bifirst", "iiOne", "la3", "lifirst", "ii1", "ali1", "lic2", "la1", "lie3", "lick", "l2", "lin0", "li71", "lic1", "LIone", "lic100", "lie1", "lafirst", "lic71", "cli2", "licfirst", "li0", "l1", "lia1", "aliinf", "si1"], "flag": ["id", "lag", "error", "prop", "part", "free", "offset", "init", "force", "no", "ind", "group", "count", "child", "arg", "z", "type", "style", "sync", "tag", "kind", "sec", "big", "key", "ret", "bit", "bar", "flags", "bug", "Flag", "fun", "char", "op", "debug", "FLAG", "skip", "field", "code", "log", "info", "status", "mask", "sign", "ag"], "k": ["id", "ku", "pp", "ijk", "kt", "h", "sk", "ek", "kick", "d", "dk", "kh", "ko", "ka", "ask", "kn", "z", "v", "er", "c", "m", "spec", "ok", "y", "ck", "kind", "ack", "uk", "gh", "kr", "ak", "key", "kat", "p", "n", "f", "ki", "ik", "q", "K", "ks", "it", "ky", "o", "w", "kid", "kk", "kw", "l", "kin", "mk", "ke", "x", "kg", "u", "unk", "b", "work"]}}
{"code": "\\nimport java.math.BigDecimal;\\nimport java.util.*;\\nclass Main{\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        double N = sc.nextInt();\\n        System.out.println(BigDecimal.valueOf(N*N*N/27));\\n\\n    }\\n}", "target": "53", "substitutes": {"sc": ["sw", "enc", "lc", "soc", " Sc", "Sc", " SC", "bc", "se", "sf", "SC", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sub", "ec", "nc", "cc", "sec", "sh", "desc", "sp", "src", "acc", "rc", "s", "cs", "si", "cl", "pc", "ner", "ci", "asc", "sci"], "N": ["NG", "Ne", "J", "Ns", "F", "NO", " n", "H", "A", "Node", "Number", "T", "CNN", "B", "NI", "Y", "NT", "Na", "NS", "n", "R", "L", "K", "W", "NR", "C", "O", "MN", "D", "SN", "CN", "M", "S", "Z", "V", "X", "NN", "P", "GN", "I", "G"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t    Scanner sc = new Scanner(System.in);\\n        String str = sc.next();\\n        if(str.matches(\"A[a-z]+C[a-z]+\")) {\\n            System.out.println(\"AC\");\\n        } else {\\n            System.out.println(\"WA\");\\n        }\\n    }\\n}", "target": "209", "substitutes": {"sc": ["sw", "enc", "cmp", "ch", "lc", "st", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "spec", "ec", "sub", "nc", "sch", "cc", "sec", "sh", "desc", "sp", "acc", "ocr", "src", "rc", "cs", "cl", "pc", "ner", "sl", "ci", "asc", "mc", "sci"], "str": ["enc", "strip", "Str", "doc", "st", "line", "part", "in", "err", "oct", "arg", "er", "c", "r", "iter", "out", "STR", "tr", "input", "stri", "data", "hr", "key", "obj", "n", "sp", "f", "arr", "star", "br", "string", "char", "next", "dec", "pass", "coll", "s", "div", "fr", "exp", "text", "sl", "ner", "dr", "ext", "hex"]}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tB(sc);\\n\t}\\n\t\\n\tpublic static void A(Scanner sc) {\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tif((a*b)%2==1) out.println(\"Odd\");\\n\t\telse out.println(\"Even\");\\n\t}\\n\t\\n\tpublic static void B(Scanner sc) {\\n\t\tString s1 = sc.next();\\n\t\tString s2 = sc.next();\\n\t\tint x = Integer.parseInt(s1+s2);\\n\t\tfor(int i=0;Math.pow(i,2)<=x;i++) {\\n\t\t\tif(Math.pow(i, 2)==x) {\\n\t\t\t\tout.println(\"Yes\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tout.println(\"No\");\\n\t}\\n}", "target": "83", "substitutes": {"sc": ["cont", "cmp", "slice", "ch", "console", "lc", "soc", "cer", "ct", "Sc", "bc", "se", "SC", "scope", "com", "ss", "cli", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "spec", "sync", "this", "out", "ec", "con", "nc", "sub", "sch", "cc", "sec", "tc", "core", "ng", "desc", "cat", "ctx", "sp", "dc", "src", "rc", "system", "anc", "sche", "na", "cur", "coll", "sb", "scene", "cms", "cs", "log", "cl", "set", "pc", "exec", "ner", "exp", "parser", "ci", "asc", "screen", "cv", "sci"], "a": ["ba", "oa", "ma", "aaa", "aa", "sa", "d", "am", "an", "c", "area", "ac", "y", "A", "k", "e", "p", "n", "alpha", "f", "aj", "ca", "va", "as", "s", "ama", "da", "qa", "af", "ae", "u", "ai"], "b": ["wb", "j", "base", "ba", "h", "ab", "ib", "abb", "aa", "d", "v", "c", "ob", "r", "y", "A", "db", "B", "k", "e", "p", "n", "mb", "f", "eb", "emb", "bis", "bs", "sb", "lb", "l", "fb"], "s1": ["strings11", " sart", "ins01", "psone", "s11", "ins1", " sb", " s5", "S11", "insart", "ps1", "s5", " s11", " sone", "sart", "stringsb", "s01", "strings1", "psart", "ps01", "S1", "sb", "sone", "insone", "Sb", " s01", "strings5", "S5"], "s2": ["stringsall", "ds3", "p2", "si2", "ctwo", "siii", "sTwo", "cii", "ss2", "call", "pSecond", "ss3", "pTwo", "s3", "ssSecond", "sall", "stringsii", "stringstwo", "ssTwo", "dsTwo", "sSecond", "stwo", "ds2", "sii", "sitwo", "c2", "strings2", "siall", "p3", "dsSecond"], "x": ["id", "px", "wx", "h", "xx", "rx", "ux", "fx", "d", "xxx", "pe", "z", "v", "ix", "c", "m", "y", "tx", "xs", "t", "index", "e", "p", "n", "ex", "f", "xc", "xi", "ww", "w", "s", "ax", "xe", "dx", "X", "u", "g", "xes"], "i": ["id", "slice", "j", "ri", "pi", "mu", "I", "ip", "ii", "ori", "io", "abi", "c", "ix", "y", "gi", "index", "phi", "e", "p", "f", "qi", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "oi", "ie", "yi", "chi", "si", "bi", "hi", "info", "zi", "ci", "ti", "u", "uri", "fi", "ai"]}}
{"code": "\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.ListIterator;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\t// \u914d\u5217\u3092\u6e96\u5099\\n\t\t// int[] array = new int[N];\\n\t\t// \u6700\u521d\u304b\u3089\u30ea\u30b9\u30c8\\n\t\tList<Integer> list = new ArrayList<>();\\n\t\t// for\u6587\u3067N\u56de\u7e70\u308a\u8fd4\u3057\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tlist.add(sc.nextInt());\\n\t\t}\\n\t\tCollections.sort(list);\\n\t\t// Collections.reverse(list);\\n\t\t// \u672c\u5f53\u306b\u53cd\u5bfe\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\uff1f\\n\t\t// \u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u306b\uff1f \u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u306b\uff1f\u21d2\u5f8c\u3067\u3002\\n\\n\t\t// for(int i = 0; i < list.size();i++) {\\n\t\t// \u914d\u5217\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u3067\u3042\u3063\u3066\u3001Collections\u306b\u5408\u308f\u305b\u305f\u30eb\u30fc\u30d7\u304c\u3042\u308b\\n\t\tint result = 0;\\n\t\tListIterator<Integer> i = list.listIterator();\\n\t\twhile (i.hasNext()) {\\n\t\t\t// if (flag) {\\n\t\t\tif (i.nextIndex() % 2 == 0) {\\n\t\t\t\t// true \u306a\u306e\u3067 Alice\\n\t\t\t\t// \u8a72\u5f53\u30ab\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\\n\t\t\t\t// AliceMaxCount += i.next();\\n\t\t\t\tresult += i.next();\\n\t\t\t} else {\\n\t\t\t\t// Bob\\n\t\t\t\t// BobMaxCount += i.next();\\n\t\t\t\tresult -= i.next();\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(Math.abs(result));\\n\t\tsc.close();\\n\t}\\n}", "target": "132", "substitutes": {"sc": ["sw", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "sub", "nc", "cc", "sec", "proc", "sp", "src", "ocr", "rc", "system", "ca", "cs", "si", "cl", "pc", "exec", "ner", "ci", "reader", "sci"], "N": ["Q", "J", "Ns", "F", "NL", " n", "NB", "H", "A", "T", "B", "NS", "n", "R", "L", "K", "C", "O", "D", "M", "Z", "S", "V", "X", "NN", "P", "I", "G"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n  public static void main(String[] args) { \\n      Scanner sc = new Scanner(System.in);\\n      long n = sc.nextLong();\\n      long k = sc.nextLong();\\n\\n      System.out.println(Math.min(n % k, k - n % k));\\n  }\\n}", "target": "22", "substitutes": {"sc": ["sw", "enc", "ch", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "ser", "src", "rc", "sche", "ca", "cur", "sb", "cs", "cl", "pc", "ner", "asc", "cv", "sci"], "n": ["j", "nn", "h", "conn", "a", "length", "ns", "d", "no", "nl", "v", "z", "c", "m", "r", "y", "network", "nc", "non", "ln", "mn", "min", "nb", "nr", "nt", "un", "ne", "e", "p", "number", "f", "net", "pn", "na", "o", "s", "i", "fn", "rn", "N", "l", "num", "x", "nw", "u", "g", "b"], "k": ["ku", "j", "check", "sk", "kick", "d", "dk", "cross", "tk", "ko", "draw", "kn", "c", "m", "ok", "point", "ck", "kind", "uk", "kr", "ak", "key", "p", "f", "ks", "K", "ik", "kb", "q", "max", "end", "km", "o", "w", "i", "kid", "kk", "kw", "N", "mk", "ke", "x", "block", "kg", "unk", "u", "g", "size", "work"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static Scanner scanner = new Scanner(System.in);\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tArrayList<String> list = new ArrayList<String>();\\n\\n\t\twhile (true) {\\n\\n\t\t\tStringBuilder sb = new StringBuilder();\\n\t\t\tString input = input();\\n\\n\t\t\tif (input.equals(\"-\")) {\\n\\n\t\t\t\tbreak;\\n\\n\t\t\t} else {\\n\\n\t\t\t\tsb.append(input);\\n\\n\t\t\t}\\n\\n\t\t\tint n = Integer.parseInt(input());\\n\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\\n\t\t\t\tint h = Integer.parseInt(input());\\n\\n\t\t\t\tsb.append(sb.substring(0, h));\\n\t\t\t\tsb.delete(0, h);\\n\\n\t\t\t}\\n\\n\t\t\tlist.add(sb.toString());\\n\\n\t\t}\\n\\n\t\tfor (int j = 0; j < list.size(); j++) {\\n\\n\t\t\tSystem.out.println(list.get(j));\\n\\n\t\t}\\n\\n\t\tclose();\\n\\n\t}\\n\\n\tpublic static String input() {\\n\\n\t\treturn scanner.nextLine();\\n\\n\t}\\n\\n\tpublic static void close() {\\n\\n\t\tif (scanner != null) {\\n\\n\t\t\tscanner.close();\\n\\n\t\t}\\n\t}\\n}", "target": "216", "substitutes": {"scanner": ["parseator", "scaner", "annner", "Scanner", "verker", "Scaninner", "scanator", "anninner", "canter", " scaninner", "statator", "parseer", "parsener", "caner", "statker", "annker", "annning", "Scaner", "parseker", "Scanker", "verner", " scanning", "Scanter", "stater", "scanning", "scanker", "anner", "annator", "canker", "Scanator", "statner", "canner", "verter", "scaninner", "scanter", "Scanning", " scaner", "verer"], "list": ["slice", "listed", "base", "pool", "left", "lc", "lp", "and", "detail", "part", "array", "table", "group", "server", "live", "sync", "lists", "this", "see", "search", "dl", "chain", "lv", "batch", "obj", "join", "p", "queue", "result", "string", "li", "test", "stack", "coll", "we", "LIST", "tree", "collection", "keep", "l", "view", "ll", "log", "set", "info", "LI", "loop", "diff", "bl", "all", "ist", "sequence", "state"], "sb": ["wb", "obb", "sth", "storage", "ib", "cb", "sg", "su", "bg", "orb", "rob", "abb", "lab", "bc", "sf", "sa", "xb", "bb", "bh", "bj", "pb", "bsp", "bf", "usb", "gb", "sq", "ob", "SB", "stab", "db", "bash", "nb", "BB", "obj", "mb", "bp", "eb", "src", "kb", "gc", "tmp", "binary", "bs", "b", "s", "bt", "lb", "buff", "si", "fb", "bd", "ls", "rb", "buffer", "sv"], "input": ["close", " inspect", "inner", "format", "form", "in", "help", "url", "password", "Input", "point", "ahead", "result", "argument", "exec", "qa", "hello", "output", "reader", "temp", "config", "path", "address", " Input", "option", "empty", " source", "inc", "element", "current", "this", "search", "request", "pull", "data", "key", " error", "alpha", "f", "accept", "missing", "string", "binary", "cur", "debug", "text", "select", "socket", "raw", "work", "enter", "press", "error", "comment", "init", "connect", "c", "out", "json", "img", "value", "p", "submit", " reader", "inf", "feed", "clear", "sum", "pattern", "print", "null", "username", "buffer", "get", "source", "file", " comment", "a", "str", "param", "array", "prefix", "clean", "expression", "q", "image", "s", "something", "speech", "parent", "code", "info", "first", " inputs", "initial", "b"], "n": ["nn", "conn", "nor", "sn", "ns", "d", "ii", "z", "v", "c", "m", "en", "nc", "t", "nb", "k", "nt", "ne", "p", "f", "net", "ot", "na", "o", "w", "s", "N", "l", "num", "x", "ni", "u", "b"], "i": ["id", "ri", "pi", "I", "mi", "init", "ip", "ii", "io", "v", "ix", "y", "gi", "phi", "p", "qi", "ji", "ui", "xi", "li", "iu", "di", "ini", "oi", "ie", "si", "bi", "hi", "info", "ci", "u", "ni", "ti", "ai", "b"], "h": ["id", "hh", "ch", "pi", "d", "ah", "bh", "ha", "z", "head", "v", "c", "H", "oh", "y", "en", "t", "he", "sh", "gh", "index", "k", "hr", "e", "p", "ih", "f", "end", "q", "hm", "rh", "ph", "hs", "w", "th", "uh", "l", "hi", "x", "u", "b"], "j": ["ch", "ja", "J", "str", "part", "js", "ij", "d", "jj", "ii", "bj", "z", "v", "c", "je", "jen", "y", "out", "jit", "jc", "jl", "index", "k", "key", "dj", "p", "obj", "f", "kj", "ji", "aj", "qi", "q", "br", "li", "pr", "ie", "adj", "l", "num", "uj", "x", "jo", "u", "oj", "jp", "b"]}}
{"code": "import java.util.*;\\nimport java.util.Map.Entry;\\n \\nclass Main {\\n\t static int mod =  (int) (Math.pow(10,9)+7);\\n//\t static int mod = 998244353;\\n\t public static void main(String[] args) {\\n\t        Scanner sc = new Scanner(System.in);\\n\t        String S = sc.next();\\n\t        char[] c = S.toCharArray();\\n\t        int N=c.length;\\n\t        String subS1=S.substring(0,(N-1)/2);\\n\t        String subS2=S.substring((N+1)/2);\\n\t        char[] c1 = subS1.toCharArray();\\n\t        char[] c2 = subS2.toCharArray();\\n\t        int n1=c1.length;\\n\t        int n2=c2.length;\\n\t        boolean flg=false;\\n\t        for(int i=0;i<(N-1)/2;i++) {\\n\t        \tif(c[i]!=c[N-i-1])flg=true;\\n\t        }\\n\t        for(int i=0;i<n1/2;i++) {\\n\t        \tif(c1[i]!=c1[n1-1-i])flg=true;\\n\t        }\\n\t        for(int i=0;i<n2/2;i++) {\\n\t        \tif(c2[i]!=c2[n2-1-i])flg=true;\\n\t        }\\n\t        if(flg) {\\n\t\t        System.out.println(\"No\");\t        \t\\n\t        } else {\\n\t        \tSystem.out.println(\"Yes\");\t\\n\t        }\\n\t }\\n\t \\n\\n}", "target": "123", "substitutes": {"mod": ["id", " perm", "amd", "d", " reg", "lib", " pack", " fun", " exp", "pack", "dir", "index", "reg", "add", " module", "ver", "max", " Mod", " modifier", " MOD", "module", " mods", "comp", "MOD", "num", " fix", "mods", "Mod"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint cnt = 0;\\n\t\tint left = -1, right = Integer.MAX_VALUE / 10;\\n\t\tfor(int i = 0; i < m; i++) {\\n\t\t\tint L = sc.nextInt();\\n\t\t\tint R = sc.nextInt();\\n\t\t\tif (L > left) left = L;\\n\t\t\tif (R < right) right = R;\\n\t\t}\\n\t\tint ans = right - left + 1;\\n\t\tif (ans < 0) ans = 0;\\n\t\t\\n\t\tout.println(ans);\\n\\n\t\tout.close();\\n\t}\\n\\nstatic class FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        }else{\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\\n    public boolean hasNext() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\\n    public String next() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while(isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n    public long nextLong() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while(true){\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            }else if(b == -1 || !isPrintableChar(b)){\\n                return minus ? -n : n;\\n            }else{\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n    public int nextInt() {\\n        long nl = nextLong();\\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\\n        return (int) nl;\\n    }\\n    public double nextDouble() { return Double.parseDouble(next());}\\n}\\n}", "target": "124", "substitutes": {"sc": ["cont", "sr", "sw", "ch", "lc", "loc", " Sc", "cer", "ct", "scl", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "ss", "cli", "com", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "sub", "tc", "nc", "sec", "sh", "cc", "cus", "desc", "ctx", "sp", "dc", "cle", "src", "rc", "system", "anc", "ca", "cur", "class", "cs", "cl", "exp", "pc", "parse", "ner", "ci", "asc", "cv", "mc", "sci"], "out": ["can", "ch", "path", "again", "png", "error", "outs", "inner", "file", "console", "a", "line", "str", "bin", "user", "err", "engine", "cli", "println", "client", "arg", "io", "outer", "OUT", "prefix", "r", "input", "p", "ex", "sp", "obj", "lock", "cache", "IN", "string", "list", "connection", "o", "source", "w", "s", "conf", "ini", "up", "cms", "parent", "log", "cl", "self", "exec", "ext", "Out", "screen", "output", "write", "copy", "reader", "writer", "name", "sci"], "n": ["j", "nn", "h", "len", "sn", "ns", "d", "count", "z", "v", "r", "en", "nc", "t", "nb", "nr", "k", "nt", "e", "ne", "p", "f", "net", "pn", "o", "s", "N", "l", "num", "x", "nan", "g", "size", "name"], "m": ["j", "man", "h", "mu", "dm", "d", "mi", "md", "z", "r", "y", "mn", "k", "dim", "e", "p", "f", "mm", "cm", "o", "M", "l", "N", "num", "x", "g", "ms", "u", "mini", "mc"], "cnt": ["Cnd", "CNT", " cNT", "acnd", "cnd", " cnn", "cnn", "acNT", "acnt", "Cnn", " cnd", "cNT", "acnn", "Cnt"], "left": ["little", "small", "inner", "one", "none", "le", "Left", "length", "len", "offset", "lic", "ii", "limit", "old", "z", "start", "plus", "r", "lt", "lower", "min", "pull", "fl", "pos", "p", "la", "li", "two", "low", "full", "s", "el", "l", "lo", "cl", "pl", "x", "ell", "size", "ins"], "right": ["id", "inner", "one", "correct", "length", "art", "ro", "rew", "rx", "d", "cross", "plus", "rights", "r", "just", "third", "p", "end", "max", "rc", "row", "rw", "rss", "rh", "Right", "ra", "w", "ax", "rest", "range", "cl", "x", "reverse", "rel", "wrong", "rank", "res"], "i": ["j", "ri", "pi", "I", "mi", "ip", "ii", "ori", "v", "io", "is", "z", "ix", "r", "gi", "uli", "p", "f", "qi", "ui", "xi", "li", "multi", "di", "ini", "ie", "chi", "l", "si", "bi", "hi", "info", "zi", "x", "ci", "ni", "u", "ti", "uri", "ai"], "L": ["Q", "CL", "Lo", "LT", "Left", "LL", "F", "BL", "E", "Lu", "LB", "LR", "NL", " l", "PL", "SL", "RL", "LM", "T", "B", "UL", "XL", "LP", "LU", "W", "DL", "Fl", "O", "LO", "EL", "M", "Pl", "FL", "dL", "U", "S", "l", "N", "Z", "Cl", "LA", "X", "V", "LI", "I"], "R": ["Q", "RR", "RW", "J", "F", "RO", "E", "DR", "RH", "RP", "RL", "SR", "JR", "HR", "r", "H", "T", "B", "TR", "Y", "RT", "Ra", "W", "CR", "Rh", "C", "D", "Right", "M", "Range", "U", "S", "N", "RS", "X", "V", "GR", "P", "RC", "Rs", "I", "RA"], "ans": ["aps", "lines", "vals", "ips", "outs", "ats", "cons", "length", "len", "lan", "ons", "ns", "ens", "rs", "errors", "ss", "ps", "old", "amps", "an", "reads", "abs", "ars", "rights", "parts", "ana", "aned", "es", "rows", "cas", "offs", "annels", "anon", "ds", "ents", "names", "plan", "flags", "ids", "ks", "arts", "span", "ANS", "na", "rss", "as", "blocks", "s", "ays", "cs", "ants", "eps", "ops", "ms", "ann", "ls", "list", "ins"], "in": ["inner", "path", "login", "a", "line", "or", "bin", "resource", "d", "din", "inc", "err", "io", "is", "r", "this", "con", "reading", "read", "input", "min", "data", "xml", "ex", "p", "f", "ssl", "IN", "rin", "inn", "as", "connection", "image", "In", "pass", "ini", "readable", "l", "pin", "exec", "socket", "lin", "reader", "source", "ins"], "buffer": ["slice", "Buffer", "base", "address", "layer", "file", "document", "length", "bin", "memory", "page", "resource", "bb", "flush", "array", "shell", "table", "transfer", "header", "server", "limit", "seed", "url", "position", "iter", "shape", "input", "request", "data", "surface", "padding", "available", "batch", "bar", "queue", "bytes", "cache", "result", "reference", "binary", "window", "stack", "image", "uffer", "pad", "buff", "buf", "use", "uf", "store", "block", "output", "message", "sequence", "reader", "source"], "ptr": ["port", "len", "addr", "fd", "uint", "pend", "fe", "pos", "context", "patch", "attr", "address", "Ptr", "lf", "ct", "pointer", "inter", "tc", "tr", "pull", "index", "padding", "ctr", "xp", "tmp", "grad", "cur", "buff", "buf", "ref", "depth", " pointer", "length", "ft", "offset", "fp", "tty", "const", "td", "np", "nr", "desc", "p", "br", "rc", "ff", "fr", "pointers", "tips", "dr", "trace", "ext", "prot", "inst", "slice", "cmp", "loc", "tp", "xt", "pt", "dest", "shift", "push", "req", "ctx", "src", "wr", "tip", "pad", "pl", "handle", "size"], "buflen": ["Bufline", "buflsten", "BuFline", "fuflender", "nuflyength", "buflyening", "nuflen", "buflysten", "fuflen", "Buflen", "nuflength", "buclan", "buflowength", "BUflan", "buvelening", "buFline", "buselan", "bullens", "bufren", "buFlen", "buflowsten", "bullen", "buplen", "buplens", "buclEN", "fuFlender", "Buflan", "bulline", "nuflening", "BuFlan", "buselens", "buplender", "buflyen", "BuFlen", "buFlender", "BUllen", "buclen", "buFllen", "bullEN", "nuflyening", "nuflyen", "buselen", "buplend", "bufline", "buflender", "Buflens", "BUflEN", "fuFlend", "BUllEN", "buplan", "bufrend", "buflyength", "bullan", "buseline", "buvelength", "bufrender", "buvelen", "buFlend", "buflowen", "buflend", "fuFlen", "bufllen", "buflowening", "nuflsten", "buflEN", "BUflen", "buflength", "BUflens", "bufrlen", "buflan", "BUllan", "buplEN", "fufllen", "buclens", "fuflend", "buflens", "nuflysten", "fuFllen", "bupllen", "BUllens", "buvelsten", "buflening", "buFlan", "BuFlens", "buFlens"], "c": ["enc", "ch", "cu", "lc", "cf", "h", "ct", "cd", "d", "fc", "count", "uc", "z", "cr", "abc", "v", "ac", "ec", "nc", "ce", "cc", "sec", "k", "e", "cy", "p", "xc", "f", "dc", "rc", "char", "cm", "C", "ca", "col", "cs", "code", "l", "pc", "x", "ci", "g", "u"], "sb": ["wb", "obb", "sth", "ib", "lp", "cb", "zb", "su", "sg", "bg", "bc", "sf", "sa", "xb", "bb", "bh", "amb", "pb", "bsp", "bj", "bf", "sm", "usb", "gb", "sq", "osc", "SB", "stab", "db", "nb", "BB", "sp", "mb", "bp", "ssl", "eb", "kb", "src", "bs", "buff", "bm", "lb", "bt", "fb", " SB", "sv", "rb"], "b": ["wb", "base", "object", "ib", "h", "ab", "cb", "ba", "a", "bg", "bin", "abb", "xb", "d", "bb", "bf", "z", "v", "ob", "abs", "r", "y", "db", "B", "nb", "reb", "e", "be", "p", "mb", "f", "bar", "number", "bound", "eb", "br", "binary", "w", "s", "lb", "l", "bi", "fb", "x", "bd", "rb"], "minus": [" negative", "neg", " ign", " min", " dec", "Plus", "negative", "plus", " cont", " outs", "min", "big", "Na", " mini", " digit", "bit", " success", "digit", "zero", "Sign", "Neg", "sum", " sign", " temp", "success", " cancel", " plus", "sign"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Mehvix\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ATherefore solver = new ATherefore();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ATherefore {\\n        public void solve(int testNumber, Scanner fin, PrintWriter fout) {\\n            int ones = fin.nextInt() % 10;\\n            if (ones == 3) fout.println(\"bon\");\\n            else if (ones == 0 || ones == 1 || ones == 6 || ones == 8) fout.println(\"pon\");\\n            else fout.println(\"hon\");\\n        }\\n\\n    }\\n}\\n\\n", "target": "178", "substitutes": {"inputStream": ["InputStreamer", " inputstream", " inputSteam", "outputstream", "outputSteam", " inputStreamer", "inputstream", "Inputstream", "inputSteam", "inputStreamer", "InputSteam", "InputStream", "outputStreamer"], "outputStream": ["writerStream", "outputWriter", "responseSteam", "OutputWriter", "outputstream", "outputSteam", "OutputStream", "OutputStreamer", "writerstream", "writerSteam", "inputstream", "inputSteam", "inputStreamer", "writerQueue", "OutputSteam", "responseWriter", "responseStream", "OutputQueue", "inputWriter", "outputStreamer", "inputQueue", "outputQueue", "responseStreamer", "Outputstream"], "in": ["id", "inner", "login", "sin", "again", "conn", "a", "bin", "init", "din", "inc", "err", "arg", "io", "inside", "ino", "r", "this", "con", "input", "request", "min", "ln", "data", "isin", "win", "f", "IN", "rin", "inn", "inf", "run", "In", "ini", "s", "i", "nin", "log", "kin", "pin", "exec", "ina", "lin", "reader", "source", "ins"], "out": ["inner", "again", "console", "error", "png", "outs", "file", "conn", "line", "exit", "bin", "page", "ou", "err", "inc", "user", "global", "server", "client", "io", "down", "outer", "OUT", "plus", "v", "call", "scan", "this", "sync", "serv", "data", "ex", "n", "net", "cache", "IN", "off", "string", "connection", "our", "o", "In", "w", "s", "up", "parent", "log", "exec", "null", "Out", "socket", "output", "write", "all", "analysis", "temp", "b", "writer", "name"], "solver": ["safer", "solution", "ssafer", "ssolver", "ssolution", "insolve", "ssolving", "insolution", " solve", "Solve", " safer", "solve", "insolver", "solving", "ssolve", "Solution", " solution", "insolving", "Solver", "Solving", "Safer"], "testNumber": ["trialNum", "Testnumber", "TestNumber", "testnumber", " testnumber", "TestNumbers", "trialNumber", " testNum", "testNumbers", "TestNum", " testNumbers", "trialNumbers", "testNum", "trialnumber"], "fin": ["conn", "file", "fa", "bin", "len", "ro", "rec", "fen", "init", "Fin", "inv", "fd", "fu", "done", "en", "mer", "ln", "min", "re", "reg", "fi", "n", "pos", "FIN", "rin", "fat", "next", "pen", "skip", "conf", "raf", "fn", "ris", "fr", "lo", "ner", "lin", "ru", "que", "gen", "rf", "bis", "serv"], "fout": ["xfout", "pout", "ifout", "xfouter", "fint", "ifexternal", "fouts", "Fout", " fOut", "fexternal", " fio", "Fin", "feedexternal", "feedOut", "woutput", "fOUT", "xfouts", "wout", " fouts", "ifouts", "ifsync", " foutput", "feedoutput", " fsync", "fOut", " fouter", "fsync", "ifint", "feedout", " fwriter", " fagain", "feedOUT", "ifOUT", "wwriter", " fexternal", "pio", "feedint", "fouter", "pagain", "fio", "Fagain", "ifouter", "wOut", "pin", "xfsync", "fwriter", "feedwriter", " fOUT", "Fio", " fint", "fagain", "foutput"], "ones": [" clones", "lines", "roots", "one", "none", "ips", "rules", "values", "hops", "tones", "hands", "objects", "rooms", "planes", "ons", "files", "cycles", " years", "oes", "phones", "rons", "locks", "issues", "ions", "flows", "points", "oses", "poses", " zones", "videos", "frames", "months", "eros", " samples", "quarters", "rows", "boys", "offs", "powers", "oned", " lines", "notes", "zero", "odes", "cells", "ers", "downs", "less", "kids", "times", "los", "blocks", "oning", "liners", "s", "lins", "sticks", "books", "sites", " times", " phones", "ONES", "ines", "tops", "ins"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\nimport java.util.Arrays;\\n\\nclass Main{\\n\tpublic static void main(String[] args)throws Exception{\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint n = scanner.nextInt();\\n\t\tint[] numbers = new int[n];\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t    numbers[i] = scanner.nextInt();\\n\t\t}\\n\t\tint count = 0;\\n\t\tint temp = 0;\\n\t\tint flag = 1;\\n\\n\t\twhile(flag == 1){\\n\t\t\tflag = 0;\\n\t\t\tfor(int i = n-1; i > 0; i--){\\n\t\t\t\tif(numbers[i] < numbers[i-1]){\\n\t\t\t\t\ttemp = numbers[i];\\n\t\t\t\t\tnumbers[i] = numbers[i-1];\\n\t\t\t\t\tnumbers[i-1] = temp;\\n\t\t\t\t\tflag = 1;\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tif(i == n-1){\\n\t\t\t\tSystem.out.print(numbers[i]);\\n\t\t\t\tSystem.out.print(\"\\n\");\\n\t\t\t}else{\\n\t\t\t\tSystem.out.print(numbers[i] + \" \");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "170", "substitutes": {"scanner": ["helner", "nerer", "scaner", "Scanner", "aner", "helper", "linner", "nerker", "linn", "canter", "anter", "caner", "scanper", "heler", "Scaner", "Scanper", "Scanker", "nerner", "Scanter", "scanker", "anner", "Scann", "scann", "canper", "canner", "liner", "nerter", "cann", "scanter", "anker", "linter", "helter"], "n": ["j", "none", "nn", "len", "sn", "ns", "in", "d", "no", "limit", "nl", "z", "v", "c", "an", "m", "en", "y", "network", "out", "nc", "t", "ln", "nb", "nr", "k", "nt", "un", "ne", "e", "p", "number", "f", "cn", "net", "span", "inn", "na", "o", "N", "num", "l", "x", "nan", "ni", "u", "size", "b"], "numbers": ["nanographies", "nologies", "anumbers", "noumbered", "bynologies", " number", "nowers", "nundreds", "lographies", "anications", "hounters", " numeric", "canners", "pologies", "nographies", "nanounters", "cundreds", "bynumbers", "nunders", " nums", "numumber", "unounters", "neanners", "locounters", "nanumbers", "bynundreds", "lounters", "lunders", "hanners", "nanunders", "pumbers", "noumbers", "yumbers", "number", "Nundreds", "pumber", "signumbered", "pums", "nications", "unums", "anounters", "younters", "signumbers", "numeric", "catures", "neumber", "numumeric", "enowers", " nologies", "pundreds", "bynumber", "pounters", "cums", "unatures", "noounters", "locanners", "signounters", " nanners", "bynums", "nounters", "bynounters", "enounters", " nowers", "unumbered", " nunders", "Nums", "enumber", "cumeric", "nanners", "locumbers", "enumbers", "ananners", "noatures", "numbered", "yums", "unumbers", "cumber", "cumbers", "cowers", "natures", " nications", "yatures", "Number", "nums", " nographies", "signatures", "locumber", "neumbers", " nounters", " nundreds", "hications", "counters", "numounters", "numumbers", "neounters", "lumbers", "humbers", "Numbers"], "i": ["id", "slice", "inner", "j", "api", "pi", "part", "my", "in", "mi", "d", "init", "ip", "ii", "cli", "ind", "z", "ix", "v", "io", "is", "ori", "c", "abi", "start", "y", "gi", "index", "phi", "e", "p", "anti", "f", "qi", "ji", "fi", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "b", "ie", "oi", "l", "si", "bi", "hi", "info", "x", "block", "ci", "u", "ni", "uri", "mini", "ai", "ti", "I", "source"], "count": ["id", "lag", "base", "counter", "check", "length", "len", "part", "force", "group", "child", "old", "type", "level", "c", "start", "call", "now", "match", "Count", "index", "nb", "nt", "key", "number", "p", "age", "bug", "found", "test", "code", "num", "sum", "info", "weight", "time", "diff", "size", "list", "total"], "temp": ["id", "j", "base", "wrap", "length", "len", "offset", "step", "empty", "Temp", "init", "type", "z", "prefix", "level", "c", "start", "fake", "extra", "stable", "iter", "current", "tc", "shift", "clean", "t", "index", "pre", "wait", "nt", "p", "porary", "age", "result", "tmp", "cur", "code", "sum", "frac", "null", "diff", "mini", "size", "buffer", "flat"], "flag": ["id", "lag", "cloud", "prop", "len", "part", "force", "magic", "die", "group", "type", "arg", "style", "feature", "tag", "kind", "const", "like", "event", "big", "wait", "ancy", "key", "cat", "ret", "bit", "f", "flags", "age", "bug", "leaf", "Flag", "char", "fun", "FLAG", "maybe", "field", "code", "log", "info", "weight", "status", "mask", "af", "ext", "ant", "fi", "ag"]}}
{"code": "import java.util.*;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        int ci;\\n        \\n        int[][] aij = new int[n][m];\\n        int[] bj = new int[m];\\n        \\n        for(int i = 0; i < n; i++){\\n            for(int j = 0; j < m; j++){\\n                aij[i][j] = sc.nextInt();\\n            }\\n        }\\n        for(int j = 0; j < m; j++){\\n               bj[j] = sc.nextInt();\\n        }\\n        \\n        for(int i = 0; i < n; i++){\\n            ci = 0;\\n            for(int j = 0; j < m; j++){\\n               ci += aij[i][j]*bj[j];\\n            }\\n            System.out.println(ci);\\n        }\\n    }\\n}\\n", "target": "185", "substitutes": {"sc": ["sw", "cont", "enc", "ch", "lc", "soc", " Sc", "loc", "cer", "Sc", " SC", "bc", "sf", "se", "SC", "sem", "com", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "con", "nc", "sch", "cc", "cor", "sh", "cus", "sec", "ctx", "sp", "ser", "src", "cle", "rc", "system", "anc", "sche", "ca", "cur", "coll", "sb", "cs", "pc", "parse", "ner", "asc", "screen", "cv", "mc", "sv", "sci"], "n": ["nn", "sn", "ns", "in", "d", "no", "z", "v", "c", "an", "r", "y", "en", "network", "nc", "t", "ln", "mn", "nb", "k", "nt", "cn", "e", "un", "p", "dn", "f", "number", "ne", "net", "o", "s", "rn", "N", "l", "num", "nm", "x", "ner", "u", "b"], "m": ["middle", "man", "h", "mu", "dm", "in", "mi", "d", "am", "om", "md", "sm", "z", "v", "im", "c", "an", "r", "y", "en", "mon", "mn", "k", "e", "machine", "p", "f", "ym", "mm", "cm", "hm", "module", "o", "km", "M", "s", "bm", "l", "N", "num", "x", "rm", "em", "g", "u", "mini", "size", "um", "mc", "b"], "ci": ["cu", "aci", "lc", "ani", "loc", "lu", "ice", "ct", "pi", "cin", "init", "cci", "ace", "ii", "cli", "cit", "cia", "cr", "c", "nc", "ce", "cc", "jc", "cor", "index", "oci", "cy", "ki", "dc", "coe", "ui", "CI", "rc", "li", "xi", "ca", "cod", "cur", "di", "ini", "isi", "ie", "code", "chi", "si", "bi", "pc", "uci", "zi", "ni", "fi", "ai", "sci"], "aij": ["aui", "aci", "icaj", "aeji", "aux", "arijo", "aex", "aijo", "acj", "arija", "acx", "aija", "icai", "qajp", "aujo", "aejo", "qaj", "acji", "icaje", "aei", "aijp", "aujp", "aix", "auj", "qaje", "aej", "auja", "ariji", "icajp", "aii", "auji", "aije", "aiji", "aeja", "arij", "auje", "qai"], "bj": ["obb", "uni", "ib", "cb", "zb", "ij", "job", "xb", "bb", "jj", "pb", "bh", "bf", "bda", "abi", "db", "mn", "jc", "jl", "nb", "john", "jon", "dj", "obj", "kj", "jing", "ji", "aj", "bp", "bs", "sb", "bm", "adj", "oji", "uj", "bi", "jo", "jp", "rb", "ubb", "b"], "i": ["id", "iii", "api", "ri", "ami", "pi", "my", "in", "mi", "init", "ii", "ip", "cli", "ir", "z", "io", "v", "ori", "ix", "y", "gi", "p", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "it", "eni", "di", "ini", "ie", "oi", "yi", "l", "si", "bi", "hi", "info", "zi", "x", "ni", "u", "uri", "fi", "ai", "mini", "I"], "j": ["ch", "jet", "h", "ja", "J", "js", "ij", "job", "d", "am", "jj", "ii", "ind", "jam", "z", "v", "je", "jen", "c", "y", "jit", "jc", "jl", "key", "e", "dj", "obj", "p", "f", "qi", "ji", "aj", "ik", "q", "ui", "dy", "li", "it", "o", "pr", "w", "s", "ie", "el", "l", "si", "uj", "x", "jo", "oj", "u", "jp", "b"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.io.BufferedWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        TaskA solver = new TaskA();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskA {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int N = in.readInt();\\n            int K = in.readInt();\\n            String S = in.readString();\\n            for (int i = 0; i < N; i++) {\\n                if (i == K - 1) {\\n                    System.out.print(Character.toLowerCase(S.charAt(i)));\\n                } else {\\n                    System.out.print(S.charAt(i));\\n                }\\n            }\\n            System.out.println();\\n\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int readInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public String readString() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                if (Character.isValidCodePoint(c)) {\\n                    res.appendCodePoint(c);\\n                }\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "71", "substitutes": {"inputStream": ["outputWriter", " inputForm", "pullStream", "inputForm", " inputWriter", " inputstream", " inputSteam", "outputstream", "outputSteam", " inputStreamer", "pullstream", "pullStreamer", "inputstream", "Inputstream", "inputSteam", "outputForm", "inputStreamer", "InputSteam", "pullForm", "InputStream", "inputWriter", "outputStreamer", "InputWriter"], "outputStream": ["outBuffer", "inputFile", "outputWriter", "OutputFile", "outFile", "imageWriter", "imageStreamer", "outSteam", "OutputWriter", "inputPath", "outputSteam", " outputPath", "OutputStream", "outputPath", "OutputStreamer", " outputBuffer", "inputSteam", "inputStreamer", "OutputSteam", "outStream", "OutputPath", "outputBuffer", "inputBuffer", "outputFile", "inputWriter", "outWriter", " outputWriter", " outputSteam", "imageStream", " outputFile", "outputStreamer", "imageSteam"], "in": ["id", "inner", "path", "sin", "again", "login", "conn", "file", "a", "line", "bin", "part", "cin", "resource", "user", "din", "inc", "err", "init", "client", "v", "io", "inside", "is", "url", "ac", "name", "r", "this", "con", "read", "reading", "plus", "request", "input", "min", "session", "from", "data", "serv", "gen", "re", "win", "lock", "IN", "inn", "inf", "ic", "connection", "image", "In", "ini", "s", "up", "nin", "kin", "config", "info", "x", "diff", "lin", "socket", "reader", "get", "source", "ins", "work"], "out": ["inner", "again", "doc", "check", "gz", "query", "page", "plain", "table", "server", "process", "client", "OUT", "extra", "point", "net", "w", "up", "writ", "exec", "output", "gen", "list", "temp", "co", "path", "outs", "sys", "user", "inc", "global", "group", "io", "down", "this", "key", "dump", "string", "window", "auto", "socket", "all", "write", "copy", "name", "work", "error", "conn", "comment", "resource", "init", "at", "call", "n", "problem", "off", "connection", "ext", "Out", "null", "post", "buffer", "object", "pool", "file", "exit", "bin", "part", "err", "report", "engine", "v", "outer", "prefix", "ex", "obj", "lock", "cache", "o", "s", "parent", "store", "log", "to"], "solver": ["solution", "ssolver", "ssolution", "ssolving", " solving", "setsolving", " solve", "setsolution", "setsolve", "Solve", "solve", "solving", "ssolve", "Solution", " solution", "Solver", "Solving", "setsolver"], "testNumber": ["TestCounter", "testB", " testCounter", " TestNumber", "TestB", "testCounter", " testB", "TestNumber", " TestCounter", " TestB", "TestNumbers", " TestNumbers", "testNumbers", " testNumbers"], "N": ["Ne", "J", "F", "NL", " n", "NB", "Count", "H", "A", "Number", "Node", "T", "B", "NE", "Y", "NT", "NS", "n", "R", "L", "C", "O", "NC", "NA", "D", "M", "KN", "NP", "Z", "V", "X", "NN", "P", "Size", "GN", "I"], "K": ["Q", "J", "F", "E", "H", "T", "B", "Y", "k", "R", "n", "L", "W", "C", "O", "PK", "D", "M", "U", "Z", "KS", "X", "V", "P", "I", "G"], "S": ["US", "SH", "Si", "SS", "As", "SU", "ESS", "SC", "The", "Single", "Standard", "AS", "TS", "DATA", "SO", "Session", "Service", "JS", "Input", "A", "STR", "CSS", "T", "SA", "PS", "NS", "L", "SIGN", "SE", "JSON", "SN", "WS", "SP", "s", "BS", "II", "HS", "In", "U", " s", "IS", "SI", "Socket", "V", "RS", "P", "Save", "DS", "I"], "i": ["id", "slice", "uni", "j", "ri", "pi", "mu", "part", "I", "my", "init", "ip", "ii", "ori", "io", "v", "abi", "ix", "z", "gi", "data", "index", "k", "phi", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "eni", "s", "oi", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "uri", "fi", "ai", "mini", "temp", "ti", "vi"], "writer": ["ler", "writers", "inner", "format", "object", "pool", "close", "ter", "wire", "writing", "h", "document", "file", "journal", "creator", "length", "page", "book", "builder", "report", "engine", "winner", "Writer", "server", "client", "wrapper", "master", "draw", "type", "er", "content", "script", "this", "word", "director", "data", "index", "key", "written", "author", "lock", "entry", "wave", "worker", "driver", "string", "wa", "rw", "width", "wr", "window", "riter", "connection", "w", "player", "per", "writ", "wt", "log", "null", "handler", "her", "output", "message", "thread", "reader", "buffer", "temp", "socket", "write"], "stream": ["port", "enc", "Stream", "object", "console", "pool", "path", "speed", "h", "file", "document", "model", "buffer", "serial", "form", "resource", "forward", "http", "engine", "server", "process", "client", "method", "wrapper", "v", "response", "m", "host", "this", "read", "clean", "holder", "input", "control", "roll", "channel", "queue", "context", "src", "driver", "string", "row", "iterator", "feed", "window", "stack", "w", "per", "sw", "view", "loop", "handler", "thread", "message", "output", "reader", "transform", "temp", "source"], "buf": ["Buffer", "wb", "path", "cf", "pool", "bag", "cb", "orig", "buffer", "alloc", "bc", "conv", "flush", "fd", "uc", "box", "rb", "cas", "Buff", "func", "batch", "ctx", "queue", "exc", "context", "fab", "src", "br", "cap", "rc", "seq", "blocks", "pad", "buff", "ref", "uf", "val", "ff", "block", "cv", "vec"], "curChar": ["currentCh", "CurChar", "currentByte", "CurCh", " curchar", "surByte", "surCh", "currentCharacter", " curCharacter", "surchar", "curchar", "charCh", "charchar", " curByte", "Curchar", "curCh", "charChar", "CurCharacter", "charByte", "surChar", " curCh", "currentChar", "CurByte", "curCharacter", "curByte"], "numChars": ["numCharars", " numChats", "numColarts", "numChaces", "numSpARS", " numCHars", "numChARS", "numChats", "numCats", "numCarts", "numCHARS", "numChararts", " numchats", " numchars", "numchards", " numChARS", "numSpars", " numChards", "numCards", " numchARS", "numCharts", "numCHarts", " numCharts", "numColars", " numCHARS", "numCharARS", " numchaces", " numchards", " numCHarts", "numSpaces", "numcharts", "numCharards", "numColARS", " numcharts", " numChaces", "numCHards", "numSpards", "numchats", "numCHars", "numCHats", "numchars", "numCars", " numCHards", "numChards", "numchaces", "numCHaces", "numchARS", "numColards"], "filter": ["fil", "format", "pool", "bag", "ters", "util", "builder", "bb", " filtered", " compressor", "ac", "this", "Filter", "func", "f", "map", " filtering", " filters", "cache", "processor", "acl", "fac", "w", "val", " Filter", "pattern", "handler", "list"]}}
{"code": "import java.util.ArrayDeque;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Queue;\\nimport java.util.Scanner;\\n \\n\\n//result = Math.pow(num1, num3)\\n//StringBuffer str = new StringBuffer(hoge1);\\n//String hoge2 = str.reverse().toString();\\n//map.containsKey(A)\\n\\n//Map<String, Integer> map = new HashMap<String, Integer>(n);\\n/*for ( \u30ad\u30fc\u306e\u30c7\u30fc\u30bf\u578b key : \u30de\u30c3\u30d7\u306e\u540d\u524d.keySet() ) {\\n\t\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u578b data = \u30de\u30c3\u30d7\u306e\u540d\u524d.get( key );\\n\t\\n\t// key\u3084data\u3092\u4f7f\u3063\u305f\u51e6\u7406;\\n}*/\\n//int i = Integer.parseInt(s);\\n//Queue<String> qq=new ArrayDeque<>(); //add,poll,peek\\n//Deque<String> qq=new ArrayDeque<>();//push,pop,peek\\n//ArrayList<String> cc = new ArrayList<>(n);\\n//Collections.sort(list);\\n//Array.sort(list);\\n//Arrays.asList(c).contains(\"a\")\\n//list.set(1,\"walk\");\\npublic class Main {\\n\tstatic int a1[]= {0,-1,0,1};\\n\tstatic int b1[]= {-1,0,1,0};\\n\tprivate static Scanner sc = new Scanner(System.in);\\n\tstatic void p(String ans) {System.out.println(ans);};\\n\tstatic void p(int ans) {System.out.println(ans);};\\n\tstatic void p(long ans) {System.out.println(ans);};\\n\tstatic void p(double ans) {System.out.println(ans);};\\n\tstatic int K;\\n\tpublic static void main(String[] args) {\\n\t\tint N=sc.nextInt();\\n\t\tint M=sc.nextInt();\\n\t\tint C=sc.nextInt();\\n\t\tint B[]=new int[M];\\n\t\tint ctn=0;\\n\t\tfor(int i=0;i<M;i++) {\\n\t\t\tB[i]=sc.nextInt();\\n\t\t}\\n\t\tint Ai[][]=new int[N][M];\\n\t\tfor(int a=0;a<N;a++) {\\n\t\t\tint ans=0;\\n\t\t\tfor(int b=0;b<M;b++) {\\n\t\t\t\tAi[a][b]=sc.nextInt();\\n\t\t\t\tans+=Ai[a][b]*B[b];\\n\t\t\t}\\n\t\t\tif(ans+C>0) {\\n\t\t\t\tctn++;\\n\t\t\t}\\n\t\t}\\n\t\tp(ctn);\\n\t}\\n}\\n", "target": "68", "substitutes": {}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc=new Scanner(System.in);\\n    System.out.println((sc.nextInt()+110)/111*111);\\n  }\\n}", "target": "106", "substitutes": {"sc": ["enc", "ch", "lc", "loc", " Sc", "cer", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "ss", "lib", "uc", "cr", "esc", "c", "scan", "osc", "spec", "sync", "ec", "nc", "cc", "sh", "desc", "sp", "dc", "src", "acc", "rc", "anc", "ca", "cur", "cl", "pc", "ner", "parser", "ci", "asc", "loop", "sci"]}}
{"code": "import java.math.BigInteger;\\nimport java.util.Scanner;\\nclass  Main{\\n  public   static  void main(String[]args){\\nScanner in =new Scanner(System.in);\\nString s;\\ns=in.next();\\nif (s.equals(\"ABC\"))\\n  System.out.print(\"ARC\");\\nelse  System.out.print(\"ABC\");\\n\\n\\n\\n\\n\\n  }\\n}", "target": "153", "substitutes": {"in": ["inner", "login", "path", "again", "doc", "conn", "line", "str", "bin", "inas", "query", "d", "init", "inc", "err", "din", "the", "er", "c", "r", "this", "out", "con", "input", "ln", "t", " IN", "data", "re", "isin", "n", "f", "win", "arin", "IN", "rin", "string", "bis", "inn", "as", "binary", "pass", "In", "ini", "i", "readable", "nin", "exec", "x", "g", "lin", "reader", "buffer", "b", "ins"], "s": ["fs", "su", "ns", "js", "rs", "d", "services", "ss", "v", "sq", "c", "is", "m", "sync", "r", "os", "t", "es", "strings", "session", "data", "ds", "e", "p", "n", "ses", "f", "ans", "less", "string", "ws", "o", "w", "sb", "i", "S", "space", "l", "si", "sl", "null", "u", "g", "ls", "your", "south", "ins"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = null;\\n\t\ttry{\\n\t\t\tscan = new Scanner(System.in);\\n\t\t\tString str;\\n\t\t\tString text = scan.next();\\n\t\t\tint counter = 0;\\n\t\t\twhile(!(str = scan.next()).equals(\"END_OF_TEXT\")){\\n\t\t\t\tif(text.equals(str.toLowerCase()))counter++;\\n\t\t\t}\\n\t\t\tSystem.out.println(counter);\\n\t\t}finally{\\n\t\t\tif(scan!=null)scan.close();\\n\t\t}\\n\t}\\n}", "target": "46", "substitutes": {"scan": ["sc", "can", "token", "inner", "ch", "sin", "lc", "look", "nn", "ban", "conn", "error", "check", "fan", "comment", "bin", "rx", "query", "kick", "se", "in", "err", "report", "ry", "server", "connect", "cr", "an", "c", "start", "sync", "r", "see", "stat", "search", "read", "clean", "match", "iter", "serv", "index", "cat", "plan", "n", "watch", "walk", "cache", "result", "bug", "system", "row", "feed", "run", "skip", "filter", "keep", "store", "Scan", "log", "si", "ignore", "parse", "ner", "parser", "ann", "all", "reader", "b", "config"], "str": ["id", "inner", "Str", "vert", "st", "line", "form", "part", "in", "type", "style", "c", "start", "txt", "url", "spec", "iter", "r", "search", "STR", "t", "input", "tr", "stri", "data", "hr", "key", "p", "n", "obj", "f", "arr", "pos", "br", "string", "char", "next", "coll", "i", "fr", "ner", "ext", "dr", "letter", "step", "source", "name"], "text": ["id", "token", "path", "format", "object", "section", "line", "TEXT", "type", "content", "style", "start", "prefix", "txt", "name", "url", "match", "word", "search", "input", "value", "data", "key", "Text", "end", "br", "string", "test", "code", "info", "pattern", "block", "ext", "letter", "font", "source", "entry"], "counter": ["inner", "lc", "ter", "check", "exit", "offset", "step", "page", "book", "no", "count", "stop", "pointer", "outer", "inter", "timer", "match", "second", "iter", "current", "index", "nr", "key", "loader", "number", "continue", "Counter", "currency", "expression", "result", "processor", "string", "coll", "field", "parent", "sequence", "num", "time", "ner", "total", "parser", "loop", "writer", "entry"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint k = scan.nextInt();\\n\t\tint x = scan.nextInt();\\n\\n\t\tint left;\\n\t\tint right;\\n\t\tif(x - k + 1 >= -1000000)\\n\t\t\tleft = x - k + 1;\\n\t\telse\\n\t\t\tleft = -1000000;\\n\\n\t\tif(1000000 >= x + k - 1)\\n\t\t\tright = x + k - 1;\\n\t\telse\\n\t\t\tright = 1000000;\\n\\n\t\tint i;\\n\t\tfor(i = left; i <= right; i++)\\n\t\t\tSystem.out.println(i);\\n\t}\\n}", "target": "207", "substitutes": {"scan": ["slice", "can", "sc", "inner", "look", "nn", "sys", "fan", "query", "util", "se", "in", "server", "connect", "an", "sync", "iter", "r", "out", "search", "con", "clean", "see", "read", "ln", "chan", "san", "n", "win", "watch", "walk", "ser", "span", "car", "na", "pan", "feed", "skip", "l", "Scan", "log", "pin", "parse", "ner", "reader", "ann", "all", "sign", "gen", "serv"], "k": ["id", "ku", "j", "h", "sk", "kick", "d", "dk", "cross", "ko", "kn", "z", "v", "c", "m", "sync", "ok", "y", "ck", "t", "uk", "key", "ak", "e", "p", "n", "f", "ks", "K", "q", "end", "ik", "max", "o", "km", "w", "kw", "l", "mk", "ke", "unk", "u", "b", "work"], "x": ["id", "j", "px", "wx", "one", "h", "check", "xx", "rx", "d", "no", "cross", "xy", "xxx", "z", "v", "ix", "plus", "sync", "y", "tx", "search", "xs", "t", "index", "key", "ex", "xc", "p", "n", "ctx", "alpha", "f", "max", "xp", "xi", "full", "w", "ax", "any", "sex", "nexus", "dx", "lex", "X", "ext", "auto", "hex", "u", "xes", "python", "linux", "work"], "left": ["small", "one", "none", "inner", "le", "place", "loc", "j", "Left", "length", "front", "offset", "in", "d", "nl", "last", "old", "default", "level", "plus", "url", "position", "r", "half", "lower", "min", "pull", "push", "quick", "n", "L", "partial", "la", "li", "two", "width", "low", "full", "ax", "el", "l", "lo", "cl", "self", "ignore", "pl", "diff", "all", "ell", "size", "wrong", "label"], "right": ["then", "middle", "inner", "one", "back", "correct", "length", "art", "rew", "rx", "cross", "round", "last", "plus", "rights", "bottom", "r", "this", "ack", "different", "with", "third", "p", "end", "max", "off", "row", "rw", "rh", "Right", "w", "ax", "rest", "reverse", "patch", "rel", "all", "wrong", "ith", "work"], "i": ["id", "slice", "inner", "j", "pixel", "ri", "pi", "mu", "I", "in", "init", "ip", "ii", "z", "ix", "io", "c", "abi", "m", "start", "r", "t", "gi", "index", "uli", "phi", "key", "e", "number", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "di", "clip", "ini", "oi", "chi", "l", "si", "bi", "hi", "zi", "ci", "ti", "u", "uri", "fi", "ai", "b"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        abc169_a solver = new abc169_a();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class abc169_a {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            out.print(in.nextInt() * in.nextInt());\\n        }\\n\\n    }\\n}\\n\\n", "target": "35", "substitutes": {"inputStream": ["InputView", "outputStyle", "inputView", " inputstream", " inputSteam", "outputstream", "outputSteam", "inputStyle", "inputstream", "Inputstream", "InputStyle", "inputSteam", " inputStyle", " inputView", "InputSteam", "InputStream", "outputView"], "outputStream": ["OutputForm", "Outputstream", "inputForm", "responseSteam", "outputstream", "outputSteam", "OutputStream", "OutputStreamer", "inputstream", "outputForm", "inputSteam", "inputStreamer", "responsestream", "OutputSteam", "responseStream", " outputForm", " outputstream", " outputSteam", "responseStreamer", "outputStreamer"], "in": ["id", "token", "inner", "login", "sin", "again", "conn", "gin", "a", "bin", "cin", "init", "din", "inc", "err", "arg", "io", "inside", "scan", "is", "r", "this", "con", "input", "request", "min", "data", "index", "gen", "n", "win", "on", "IN", "rin", "inn", "inf", "image", "In", "ini", "i", "nin", "l", "log", "kin", "pin", "exec", "config", "x", "vin", "lin", "reader", "source", "ins"], "out": ["inner", "again", "left", "error", "pool", "outs", "file", "conn", "line", "exit", "bin", "inas", "page", "scope", "builder", "init", "inc", "err", "no", "user", "server", "client", "arg", "io", "outer", "call", "OUT", "name", "extra", "sync", "plus", "this", "point", "to", "data", "index", "ex", "n", "p", "win", "net", "cache", "IN", "off", "string", "window", "connection", "o", "In", "w", "up", "parent", "version", "log", "exp", "exec", "self", "x", "ext", "Out", "socket", "output", "copy", "list", "temp", "writer", "write"], "solver": ["solution", "ssolver", "ssolution", "insolve", "ssolving", "Sector", "osolve", "osector", "insolution", "osolution", "Solve", "ssector", "osolver", "solve", "insolver", "solving", "ssolve", "Solution", "insolving", "Solver", "Solving", "sector"], "testNumber": ["TestCounter", "trialNum", " testCounter", "Testnumber", "testCounter", "trialCounter", "TestNumber", "testnumber", " testnumber", "trialNumber", " testNum", "TestNum", "testNum", "trialnumber"]}}
{"code": "\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Scanner;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int k= 1;\\n        HashMap<String,Integer> hashMap = new HashMap<>();\\n        hashMap.put(\"SUN\",7);\\n        hashMap.put(\"MON\",6);\\n        hashMap.put(\"TUE\",5);\\n        hashMap.put(\"WED\",4);\\n        hashMap.put(\"THU\",3);\\n        hashMap.put(\"FRI\",2);\\n        hashMap.put(\"SAT\",1);\\n        String s1;\\n        String s2;\\n        int a,b;\\n        double n;\\n        while(k-->0){\\n            a=0;\\n            s1=s.next();\\n            s2=s.next();\\n            for(int i=0;i<3;i++){\\n                if(s1.charAt(i)==s2.charAt(i))\\n                    a++;\\n            }\\n            System.out.println(a);\\n        }\\n    }\\n\\n    private static int binary_search(\\n            int arr[], int l,\\n            int h, int x)\\n    {\\n        while (l <= h) {\\n            int mid = (l + h) / 2;\\n            if (arr[mid] <= x)\\n                l = mid + 1;\\n            else\\n                h = mid - 1;\\n        }\\n        return h;\\n    }\\n    static int gcd(int a, int b)\\n    {\\n        if(b==0) {\\n            return a;\\n        }\\n        return gcd(b,a%b);\\n    }\\n    private static boolean isPrime(int n) {\\n        if (n == 2)\\n            return true;\\n        else if ((n % 2 == 0 && n > 2) || n < 2)\\n            return false;\\n        else {\\n            for (int i = 3; i <= (int) Math.sqrt(n); i += 2) {\\n                if (n % i == 0)\\n                    return false;\\n            }\\n            return true;\\n        }\\n\\n\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new\\n                    InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n}", "target": "243", "substitutes": {"s": ["opens", "lines", "fs", "sys", "sf", "in", "d", "se", "services", "ss", "ps", "sets", "v", "er", "c", "south", "m", "abs", "aws", "r", "os", "states", "strings", "e", "p", "f", "ssl", "sym", "bis", "ws", "as", "o", "w", "sb", "S", "si", "obs", "words", "sl", "tests", "sv", "ops", "ls", "ins"], "k": ["ku", "j", "sk", "kick", "d", "dk", " K", "v", "c", "m", "ok", "r", "y", "ck", "ack", "t", "ak", "ad", "key", "p", "ks", "K", "ik", "q", "max", "km", "kid", "kw", "num", "mk", "ke", "g", "unk", "u", "work"], "hashMap": ["dotModel", " hashObj", "hashTable", "usemap", "hashCache", "ashList", "hashInfo", " hashList", "hashApp", "hashCode", "ashModel", " hashApp", "HashList", "passMap", "ashApp", " hashCode", "useList", "ashSet", "useApp", "memoryMap", "memoryInfo", " hashModel", "ashCode", "hashSet", "HashTable", "HashArray", "searchMap", " hashInfo", "dotMap", " hashZone", "ashInfo", "HashApp", "HashObj", "ashObj", "ashZone", "searchCache", "HashInfo", "Hashmap", "hashObj", "memoryCode", "memorymap", "searchTable", "dotmap", "hashZone", "passSet", "hashModel", "hashmap", " hashArray", "dotCache", "passApp", "dotList", " hashTable", "useMap", " hashCache", " hashSet", "dotZone", "hashArray", "hashList", "searchArray", " hashmap", "passmap", "ashMap", "HashCache", "ashmap"], "s1": ["vesOnce", " sOne", "nsn", "vesOne", "sn", "vesa", "ns2", "sa", "ftsOne", " sb", "ves1", "ss2", "ssb", "sOnce", "ws2", " sn", " sa", "nsb", "ws1", "ws01", "s01", "sOne", "ns1", "sb", "ftsOnce", " s01", "ftsa", "fts1", "ss01", " sOnce", "ss1", "ssn"], "s2": ["p2", "ps3", "ptwo", "sTwo", " sb", "ssecond", "ts2", "ss2", "ps2", "ssb", "tssecond", "ss3", "pTwo", "Stwo", " s3", "psTwo", "s3", "sssecond", "S2", "p1", " stwo", "psb", "ts1", "ssTwo", " sTwo", "stwo", "S1", "tsTwo", "sb", " ssecond", "STwo", "ss1"], "a": ["ba", "ab", "oa", "fa", "ma", "ai", "aaa", "aa", "sa", "d", "ata", "am", "array", "v", "an", "c", "area", "m", "ac", "ia", "r", "y", "this", "ana", "A", "tta", "aaaa", "ga", "ada", "ad", "e", "p", "ea", "f", "alpha", "pa", "aj", "span", "la", "wa", "na", "va", "ca", "as", "o", "w", "da", "au", "qa", "ae", "af", "u", "all", "ar", "sta"], "b": ["wb", "j", "base", "back", "ba", "ab", "ib", "body", "bc", "aa", "d", "bb", "bh", "bf", "z", "v", "c", "m", "r", "y", "db", "B", "nb", "beta", "e", "be", "p", "bar", "f", "eb", "bs", "o", "w", "sb", "lb", "fb", "bas", "g", "u", "bl", "rb"], "n": ["j", "nn", "conn", "nor", "sn", "ns", "nu", "d", "no", "ii", "v", "an", "c", "z", "m", "en", "y", "nc", "t", "non", "nb", "nt", "cn", "e", "ne", "p", "number", "f", "on", "net", "un", "dn", "max", "pn", "nat", "na", "o", "w", "fn", "N", "num", "nan", "g", "u", " N"], "i": ["id", "slice", "j", "ri", "ami", "pi", "I", "my", "mi", "d", "ip", "ii", "ori", "ix", "z", "c", "is", "m", "io", "abi", "v", "y", "gi", "index", "phi", "e", "p", "fi", "qi", "f", "ik", "ui", "xi", "li", "iu", "multi", "o", "eni", "di", "ini", "isi", "yi", "oi", "ie", "chi", "si", "bi", "hi", "info", "zi", "ci", "u", "ni", "ti", "uri", "ai", "mini", "vi"], "arr": ["enc", "air", "app", "err", "array", "rep", "abc", "db", "gr", "img", "rr", "data", "pre", "batch", "obj", "arch", "Array", "cache", "dat", "ray", "dict", "av", "stack", "coll", "par", "pr", "div", "fr", "align", "parse", "record", "frac", "attr", "arc", "dr", "ar", "list"], "l": ["j", "lc", "le", "lp", "lu", "lf", "loc", "len", "kl", "d", "nl", "z", "v", "c", "m", "r", "y", "ol", "ln", "ul", "dl", "e", "p", "L", "la", "li", "o", "w", "lb", "el", "hi", "hl", "sl", "u", "g", "lin", "ls", "ll", "fl"], "h": ["id", "hh", "ch", "d", "bh", "hd", "z", "v", "ht", "c", "m", "H", "y", "r", "oh", "en", "ul", "gh", "sh", "hr", "e", "p", "ih", "f", "end", "q", "hm", "rh", "ph", "o", "hs", "w", "lo", "hi", "hl", "u", "g"], "x": ["id", "wx", "xx", "ux", "rx", "d", "cross", "xxx", "z", "v", "ix", "c", "m", "r", "y", "xf", "xs", "t", "index", "e", "p", "ex", "f", "xc", "q", "xi", "o", "w", "ax", "X", "u", "g", "xa"], "mid": ["id", "middle", "nd", "bid", "loc", "Mid", "line", "len", "part", "offset", "lab", "in", "d", "mi", "aid", "med", "ii", "ind", "md", "count", "start", "m", "spec", "sub", "shift", "kind", "min", "pid", "pend", "desc", "dim", "ad", "rid", "pos", "end", "max", "mm", "la", "li", "multi", "low", "pad", "lat", "sum", "hi", "parse", "patch", "wid", "rad", "mad", "lim", "late", "entry"], "br": ["sr", "ler", "j", "bro", "rs", "Br", "bc", "err", "ber", "BR", "cr", "HR", "r", "gr", "tr", "kr", "hr", "obj", "mr", "result", "bridge", "rw", "browser", "wr", "bs", "pr", "bt", "buf", "div", "lr", "fr", "dr", "bl", "rb"], "st": ["sc", "sr", "nd", "sth", "Str", "ct", "ft", "se", "sa", "ut", "ss", "std", "cr", "lt", "STR", "t", "tt", "fe", "obj", "te", "sb", "ST", "rest", "sts", "text", "ts", "St"]}}
{"code": "import java.util.*;\\n \\nclass Main{\\n    public static void main(String[] args){\\n\t\t\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\tint l = scan.nextInt();\\n\\n\t\tlong[][] a = new long[n][m];\\n\t\tlong[][] b = new long[m][l];\\n\t\tlong[][] c = new long[n][l];\\n\t\tlong sum = 0;\\n\t\t//a???????????????\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tfor(int j=0; j<m; j++){\\n\t\t\t\ta[i][j] = scan.nextLong();\\n\t\t\t}\\n\t\t}\\n\t\t//b???????????????\\n\t\tfor(int i=0; i<m; i++){\\n\t\t\tfor(int j=0; j<l; j++){\\n\t\t\t\tb[i][j] = scan.nextLong();\\n\t\t\t}\\n\t\t}\\n\t\t//??????c?????????????\u00b4?\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tfor(int j=0; j<l; j++){\\n\t\t\t\tsum = 0;\\n\t\t\t\tfor(int k=0; k<m; k++){\\n\t\t\t\t\tsum += a[i][k] * b[k][j];\\n\t\t\t\t}\\n\t\t\t\tc[i][j] = sum;\\n\t\t\t}\\n\t\t}\\n\t\t//???????????????\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tfor(int j=0; j<l; j++){\\n\t\t\t\tSystem.out.print(c[i][j]);\\n\t\t\t\tif(j < l-1){\\n\t\t\t\tSystem.out.print(\" \");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println(\"\");\\n\t\t}\\n    }\\n}", "target": "204", "substitutes": {"scan": ["sc", "can", " scanner", "look", "nn", "sys", "fan", "query", "se", "in", "report", "connect", "get", "an", "sync", "iter", "r", "out", "search", "stat", "clean", "see", "read", "ln", "cat", "san", "plan", "watch", "walk", "wan", "bug", "result", "span", "system", "car", "pan", "run", "skip", "begin", "keep", "Scan", "log", "ignore", "parse", "ner", "parser", "ann", "all", "gen", "south"], "n": ["j", "nn", "h", "conn", "ns", "in", "d", "no", "v", "z", "an", "r", "y", "nc", "ln", "k", "nt", "cn", "e", "un", "p", "ne", "f", "net", "q", "o", "w", "s", "i", "N", "num", "x", "u", "all"], "m": ["j", "h", "in", "d", "mi", "am", "z", "v", "an", "r", "y", "t", "ln", "k", "e", "p", "f", "q", "li", "o", "M", "w", "s", "i", "x", "u", "ms", "g", "all", "size"], "l": ["j", "ql", "lc", "loc", "h", "length", "kl", "al", "d", "ls", "nl", "z", "v", "r", "y", "ol", "t", "ln", "ul", "il", "k", "e", "p", "L", "f", "li", "o", "w", "i", "el", "x", "sl", "u", "lin", "ell", "all", "ll", "fl"], "a": ["ba", "ab", "aa", "sa", "array", "at", "area", "ac", "y", "A", "p", "alpha", "f", "ca", "va", "o", "w", "s", "i", "da", "ae", "u", "ai"], "b": ["j", "ba", "ab", "ib", "cb", "bc", "d", "bb", "bf", "v", "r", "y", "B", "e", "p", "mb", "f", "bp", "eb", "o", "i", "x", "u", "g"], "c": ["lc", "h", "ct", "d", "z", "v", "ac", "r", "y", "cc", "e", "p", "f", "dc", "q", "C", "ca", "o", "w", "i", "ci", "u", "g"], "sum": ["union", "error", " sums", "dev", " Sum", "Sum", "count", "norm", "mean", "by", "add", "alpha", "max", "acc", "stack", "average", "class", "gram", "div", "dot", "num", "weight", "info", "frac", "diff", "sign", "scale", "total"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    private static final int MOD = 1_000_000_007;\\n    private static final String YES = \"YES\";\\n    private static final String NO = \"NO\";\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        String S = sc.next();\\n\\n        System.out.println(solve(S));\\n    }\\n\\n    private static String solve(String S) {\\n        if (S.equals(\"Sunny\"))  return \"Cloudy\";\\n        if (S.equals(\"Cloudy\")) return \"Rainy\";\\n\\n        return \"Sunny\";\\n    }\\n}\\n", "target": "60", "substitutes": {"MOD": [" M", "ALL", "mod", "SR", " Z", " MAX", "UID", "MAX", "B", "REG", " mod", "mode", "LIB", "RM", " Mod", "CC", "M", " X", "MIN", "version", "MODE", "VERSION", "NUM", "ID", "MS", "Mod", "P", "SIZE"], "YES": ["Yes", "SS", "GO", "SO", "yes", "JS", "XXX", "NAME", "OS", "Y", "SA", "NS", "NULL", "OK", "O", "NC", "NA", "FAULT", "WS", "CC", "ES", "N", "IS", "NN", "MS", "XX"], "NO": ["ONE", "IO", "RO", "GO", "WARN", "no", "No", "PO", " No", "SO", "OUT", "NAME", "OS", "DO", "ANY", "NS", "MO", "NR", "OK", "O", "NA", "SP", "N", "MS", "ERROR", "None"], "sc": ["enc", "CL", "SS", " Sc", "ct", "Sc", " SC", "bc", "se", "SC", "sf", "scope", " scr", "ss", "uc", "esc", "c", "scan", "osc", "sync", "spec", "ec", "sub", "nc", " sp", "sec", "cc", "sh", "n", "sp", "src", "acc", "rc", "system", "anc", "C", "s", "cs", "si", "cl", "set", "pc", "exec", "ner", "exp", "ci", "asc", "sci"], "S": ["SH", "Si", "SS", "SU", "Su", "F", "Ns", "E", "Sample", "SC", "SL", "TS", "SM", "AS", "CS", "SO", "SR", "SD", "OSS", "SER", "A", "T", "Y", "SA", "PS", "NS", "R", "L", "SE", "W", "string", "C", "O", "D", "SN", "WS", "M", "s", "BS", "ST", "U", "SK", "N", " s", "Z", "SI", "RS", "V", "X", "P", "GS", "DS", "G"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String S = sc.next();\\n        String ans = \"Good\";\\n\\n        for(int i = 0; i < 3; i++){\\n            if(S.charAt(i) == S.charAt(i + 1)){\\n                ans = \"Bad\";\\n                break;\\n            }\\n        }\\n        System.out.print(ans);\\n    }\\n}", "target": "73", "substitutes": {"sc": ["sw", "enc", "soc", " Sc", "cer", "str", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "cr", "esc", "c", "scan", "osc", "sync", "ec", "search", "nc", "sub", "cc", "sec", "cor", "sh", "desc", "nt", "sp", "acc", "ocr", "rc", "system", "anc", "ca", "cur", "cs", "pc", "exec", "ner", "sl", "ci", "asc", "g", "sci"], "S": ["US", "SH", "Si", "SS", "As", "SU", "Su", "F", "Sample", "SC", "ss", "Single", "AS", "TS", "SM", "CS", "SO", "SD", "SR", "OSS", "SER", "STR", "T", "SA", "G", "FS", "SAM", "PS", "NS", "R", "L", "SE", "Sign", "C", "D", "SN", "s", "Des", "U", "SK", "N", "IS", "SI", "RS", "V", "Socket", "P", "GS", "DS", "I", "Sing", "St"], "ans": [" scans", "anas", "vals", "aks", "outs", "An", "ats", "abilities", "ings", "cons", "lan", "ons", "ns", "leans", "AN", "fts", "aus", "annis", "atan", "ss", "anks", "nas", "AS", "ANN", "vers", "an", "asts", "ras", "reads", "ars", "aos", "ana", "ags", "os", "A", "aned", "Ann", "cas", " sins", "ds", "ents", "ass", "san", "acers", "ares", "ads", "ks", "anc", "ANS", "anners", "as", "s", "anned", "ays", "eds", "cs", "ants", "eps", "ann", "ls", "ins"], "i": ["id", "slice", "j", "ri", "h", "length", "pi", "mu", "in", "ii", "ori", "v", "ix", "start", "c", "io", "t", "gi", "index", "data", "k", "phi", "key", "e", "p", "n", "pos", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "eni", "s", "oi", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "uri", "ai", "I"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void debug(String str) {\\n        boolean debug = false;\\n        if (debug != false) {\\n            return;\\n        }\\n        System.out.println(str);\\n    }\\n\\n    public static void main(String[] args) {\\n\\n        int N;\\n        long[] H;\\n\\n        try (Scanner sc = new Scanner(System.in)) {\\n            N = sc.nextInt();\\n            H = new long[N];\\n            for (int i = 0; i < N; i++) {\\n                H[i] = sc.nextLong();\\n            }\\n        }\\n        long[] L = new long[N];\\n        for (int i = 0; i < N; i++) {\\n            L[i] = H[i] -1;\\n        }\\n\\n\\n\\n        if (H.length == 1) {\\n            System.out.println(\"Yes\");\\n            return;\\n        }\\n        if (H.length == 2 && H[0] - H[1] <= 1) {\\n            System.out.println(\"Yes\");\\n            return;\\n        }\\n\\n        long min = H[0];\\n        for (int i = 1; i < N; i++) {\\n            if(min >H[i]&& min >L[i]){\\n                System.out.println(\"No\");\\n                return;\\n            }else{\\n                if(min >H[i]){\\n                    min = L[i];\\n                    continue;\\n                }else if(min >L[i]){\\n                    min = H[i];\\n                    continue;\\n                }\\n                if(H[i] > L[i]){\\n                    min = L[i];\\n                }else{\\n                    min = H[i];\\n                }\\n            }\\n\\n        }\\n\\n        System.out.println(\"Yes\");\\n        return;\\n\\n    }\\n}\\n", "target": "74", "substitutes": {"str": ["path", "Str", "doc", "st", "in", "err", "std", "r", "this", "out", "STR", "tr", "input", "strings", "stri", "data", "obj", "sp", "f", "arr", "br", "string", "wr", "run", "class", "pr", " Str", "fr", "self", "exec", "parse", "text", "print", "msg", "name"], "debug": ["format", "console", "error", "doc", " Debug", "line", "comment", "dev", "export", "d", "init", "help", "ger", "std", "style", "develop", "live", "development", "db", "progress", "depth", "data", "desc", "enable", "Debug", "add", "bug", "cache", "dump", "string", "active", "quiet", "test", "run", "class", "show", "date", "log", "github", "info", "parse", "print", "DEBUG", "hide", "trace", "load", "diff", "write", "all", "output", " debugger", "get", "config"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "NL", "No", "Part", " n", "NB", "Num", "Node", "A", "T", "B", "NI", "Y", "NT", "Na", "Nat", "NS", "n", "R", "K", "IN", "W", "Len", "C", "O", "MN", "NA", "SN", "D", "M", "U", "S", "Z", "X", "V", "P", "Size", "GN", "I"], "H": ["Sh", "Q", "HD", "SH", "CL", "MH", "CH", "h", "J", "F", "LL", "HC", "OH", "GH", "E", "HQ", "Hub", "Hi", "RH", "HM", "IL", "He", "Ch", "HK", "Host", "HR", "DH", "NH", "WH", "A", "HP", "T", "Alpha", "B", "Y", "Length", "Ha", "R", "K", "W", "HL", "HI", "HTTP", "EH", "C", "O", "History", "D", "HA", "M", "AH", "U", "S", "Z", "TH", "HB", "V", "X", "FH", "P", "HE", "Wh", "HH", "I", "G"], "i": ["inner", "one", "h", "in", "mi", "r", "gi", "phi", "qi", "chi", "ei", "x", "zi", "ci", "uri", "fi", "mini", "lc", "ii", "cli", "z", "io", "is", "data", "index", "key", "e", "f", "xi", "li", "multi", "eni", "hi", "u", "ti", "pi", "mu", "init", "ix", "abi", "c", "y", "out", "adi", "p", "n", "ui", "iu", "oi", "bi", "ni", "ai", "I", "source", "id", "slice", "j", "api", "ri", "a", "part", "ip", "ori", "v", "ji", "q", "it", "o", "di", "ini", "s", "yi", "ie", "code", "l", "si", "info", "b"], "L": ["Q", "CL", "Lo", "LT", "h", "LL", "BL", "Lu", "E", "F", "LB", "LR", "NL", "Line", "IL", "PL", "SL", "LM", "T", "B", "UL", "Y", "XL", "LP", "R", "K", "LU", "DL", "W", "ML", "C", "O", "LO", "D", "EL", "FL", "OL", "M", "U", "S", "l", "LA", "V", "LI", "P", "Li", "Local", "I", "G"], "min": ["close", "len", "am", "start", "m", "r", "ana", " Min", "mean", "dim", "pos", "dec", "mine", "mit", "use", "MIN", "val", "version", "sol", "diff", "mini", "Mini", "d", "type", "default", "pre", "data", "il", "un", "key", "li", "next", "pass", "sort", "date", "sign", "name", "small", "Min", "init", "ress", "ix", "stat", "lower", "value", "core", "max", "partial", "skip", "ax", "sum", "block", "ai", "scale", "id", "pri", "are", "none", "part", "unit", "err", "when", "rain", "ind", "last", "miss", "fail", "on", "lock", "ini", "amin", "act", "code", "weight", "don", "initial"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString line;\\n\t\tString in[] = new String[2];\\n\t\tint a = 0, b = 0;\\n\t\ttry {\\n\t\t\tline = br.readLine();\\n\t\t\tin = line.split(\" \");\\n\t\t\ta = Integer.parseInt(in[0]);\\n\t\t\tb = Integer.parseInt(in[1]);\\n\t\t} catch (IOException e) {\\n\t\t\te.getStackTrace();\\n\t\t}\\n\t\t\\n\t\tint max = a + b;\\n\t\tint tmp;\\n\t\tif (max < (tmp = a - b)) {\\n\t\t\tmax = tmp;\\n\t\t}\\n\t\t\\n\t\tif (max < (tmp = a * b)) {\\n\t\t\tmax = tmp;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(max);\\n\t}\\n\\n}", "target": "188", "substitutes": {"br": ["ler", "yr", "cb", "nor", "str", "bro", "bc", "Br", "err", "bh", "ber", "BR", "cr", "io", "er", "rb", "abs", "HR", "r", "db", "gr", "tr", "hr", "bar", "arr", "mr", "cro", "ocr", "ar", "bridge", "browser", "bs", "wr", "buf", "lr", "fr", "handle", "dr", "bl", "reader", "her", "res"], "line": ["id", "lines", "base", "strip", "lc", "le", "file", "lf", "section", "po", "str", "comment", "part", "page", "Line", "err", "pe", "content", "start", "url", "sync", "r", "input", "value", "ine", "data", "pre", "key", "p", "f", "entry", "cell", "end", "LINE", "string", "row", "pass", "i", "code", "l", "log", "cl", "parse", "text", "block", "lin", "write", "inline", "source", "name"], "in": ["id", "token", "lines", "path", "inner", "base", "login", "again", "file", "gin", "str", "bin", "len", "part", "rec", "cin", "user", "din", "inc", "err", "init", "c", "is", "name", "inside", "r", "out", "read", "input", "ln", "ine", "data", "gen", "ex", "n", "isin", "f", "win", "digit", "IN", "include", "string", "la", "inn", "it", "connection", "pass", "In", "ini", "s", "i", "nin", "val", "log", "kin", "info", "exec", "pin", "text", "between", "vin", "diff", "lin", "reader", "buffer", "inline", "source", "ins"], "a": ["aw", "api", "ba", "ab", "ma", "aaa", "aa", "sa", "am", "an", "area", "c", "m", "ac", "ia", "y", "A", "min", "ga", "ada", "ad", "e", "p", "n", "alpha", "f", "aj", "la", "ca", "as", "va", "s", "ax", "i", "anta", "ama", "asa", "da", "au", "x", "qa", "ae", "af", "u", "ai"], "b": ["wb", "j", "base", "ba", "ab", "cb", "h", "abb", "bc", "aa", "d", "bb", "pb", "bf", "z", "v", "c", "ob", "m", "r", "y", "db", "B", "nb", "k", "ad", "e", "be", "p", "n", "mb", "f", "beta", "bot", "bs", "o", "w", "sb", "i", "lb", "l", "bi", "fb", "x", "bd", "g", "u", "rb", "bis"], "max": ["base", "doc", "api", "wrap", "orig", "right", "always", "crop", "part", "step", "dev", "cum", "mod", "d", "no", "limit", "count", "Max", "last", "default", "c", "extra", "start", "now", "dest", "MAX", "out", "shape", "min", "ad", "cat", "key", "pos", "number", "end", "huge", "ca", "cur", "pad", "ax", "conf", "rest", "div", "parent", "code", "sup", "x", "order", "diff", "auto", "size", "temp", "rank", "total", "co", "work"], "tmp": ["py", "cmp", "small", "base", "amp", "api", "opt", "cb", "su", "always", "part", "step", "cum", "page", "mod", "foo", "default", "area", "now", "extra", "current", "start", "fake", "const", "min", "np", "nb", "slow", "ppo", "mmm", "obj", "prev", "next", "stuff", "pad", "buf", "kk", "keep", "sup", "mp", "x", "qa", "diff", "meta", "too", "cp", "size", "done", "temp", "total", "vt"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n      Scanner sc = new Scanner(System.in);\\n      int res = 0, current = 10;\\n      while(sc.hasNext()){\\n        int a = sc.nextInt();\\n        if(a%10 == 0){res-=10;}\\n        else if(a%10 < current){current = a%10;}\\n        \\n        res += (a/10+1)*10;\\n      }\\n      System.out.println(res - 10 + current);\\n    }\\n}", "target": "63", "substitutes": {"sc": ["sw", "enc", "ch", "lc", "loc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "nc", "cc", "sh", "sec", "ctx", "sp", "src", "rc", "anc", "sche", "ca", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "ci", "cv", "mc", "sci"], "res": ["vals", "features", "details", "cons", "resolution", "ons", "rs", "days", "err", "ps", "rep", "resh", "now", "ras", "response", "abs", "r", "bits", "os", "gr", "min", "es", "rows", "progress", "data", "re", "pre", "req", "ret", "p", "prev", "arr", "ries", "result", "max", "active", "next", "rss", "na", "css", "as", "blocks", "reset", "s", "acts", "pres", "Res", "num", "vs", "RES", "resp", "results", "words", "ms", "complete", "bytes"], "current": ["api", "counter", "correct", "report", "Current", "count", "master", "last", "old", "reported", "content", "default", "now", "future", "response", "this", "const", "recent", "progress", "rows", "data", "prev", "after", "aj", "partial", "result", "zero", "wa", "active", "next", "currently", "mult", "width", "cur", "per", "i", "parent", "actual", "keep", "num", "results", "valid", "auto", "complete", "update", "temp", "total"], "a": ["api", "app", "ba", "ab", "oa", "aa", "sa", "ata", "d", "aux", "array", "an", "area", "c", "abs", "ac", "ana", "y", "A", "ga", "data", "ea", "p", "pa", "alpha", "f", "aj", "span", "result", "la", "next", "na", "as", "va", "ca", "i", "da", "au", "qa", "valid", "auto", "b", "sta"]}}
{"code": "import java.util.*; import java.io.*; import java.math.*;\\npublic class Main{\\n\t//Don't have to see. start------------------------------------------\\n\tstatic class InputIterator{\\n\t\tArrayList<String> inputLine = new ArrayList<String>(1024);\\n\t\tint index = 0; int max; String read;\\n\t\tInputIterator(){\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\ttry{\\n\t\t\t\twhile((read = br.readLine()) != null){\\n\t\t\t\t\tinputLine.add(read);\\n\t\t\t\t}\\n\t\t\t}catch(IOException e){}\\n\t\t\tmax = inputLine.size();\\n\t\t}\\n\t\tboolean hasNext(){return (index < max);}\\n\t\tString next(){\\n\t\t\tif(hasNext()){\\n\t\t\t\treturn inputLine.get(index++);\\n\t\t\t}else{\\n\t\t\t\tthrow new IndexOutOfBoundsException(\"There is no more input\");\\n\t\t\t}\\n\t\t}\\n\t}\\n\tstatic HashMap<Integer, String> CONVSTR = new HashMap<Integer, String>();\\n\tstatic InputIterator ii = new InputIterator();//This class cannot be used in reactive problem.\\n\tstatic PrintWriter out = new PrintWriter(System.out);\\n\tstatic void flush(){out.flush();}\\n\tstatic void myout(Object t){out.println(t);}\\n\tstatic void myerr(Object t){System.err.print(\"debug:\");System.err.println(t);}\\n\tstatic String next(){return ii.next();}\\n\tstatic boolean hasNext(){return ii.hasNext();}\\n\tstatic int nextInt(){return Integer.parseInt(next());}\\n\tstatic long nextLong(){return Long.parseLong(next());}\\n\tstatic double nextDouble(){return Double.parseDouble(next());}\\n\tstatic ArrayList<String> nextStrArray(){return myconv(next(), 8);}\\n\tstatic ArrayList<String> nextCharArray(){return myconv(next(), 0);}\\n\tstatic ArrayList<Integer> nextIntArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Integer> ret = new ArrayList<Integer>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Integer.parseInt(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic ArrayList<Long> nextLongArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Long> ret = new ArrayList<Long>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Long.parseLong(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic String myconv(Object list, int no){//only join\\n\t\tString joinString = CONVSTR.get(no);\\n\t\tif(list instanceof String[]){\\n\t\t\treturn String.join(joinString, (String[])list);\\n\t\t}else if(list instanceof ArrayList){\\n\t\t\treturn String.join(joinString, (ArrayList)list);\\n\t\t}else{\\n\t\t\tthrow new ClassCastException(\"Don't join\");\\n\t\t}\\n\t}\\n\tstatic ArrayList<String> myconv(String str, int no){//only split\\n\t\tString splitString = CONVSTR.get(no);\\n\t\treturn new ArrayList<String>(Arrays.asList(str.split(splitString)));\\n\t}\\n\tpublic static void main(String[] args){\\n\t\tCONVSTR.put(8, \" \"); CONVSTR.put(9, \"\\n\"); CONVSTR.put(0, \"\");\\n\t\t\\n\t\tsolve();flush();\\n\t\t\\n\t}\\n\t//Don't have to see. end------------------------------------------\\n\tstatic void solve(){//Here is the main function\\n\t\tArrayList<Integer> one = nextIntArray();\\n\t\tint a = Math.min(one.get(0), one.get(1));\\n\t\tint b = Math.max(one.get(0), one.get(1));\\n\t\tString output = \"\";\\n\t\tfor(int i = 0; i < b; i++){\\n\t\t\toutput += String.valueOf(a);\\n\t\t}\\n\t\tmyout(output);\\n\t}\\n\t//Method addition frame start\\n\\n\\n\\n\t//Method addition frame end\\n}\\n", "target": "24", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String arg[]) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tsc.close();\\n\t\tint ans = 0;\\n\t\t\\n\t\tfor(int i = 1; i <= N; i++) {\\n\t\t\tif(splitN(i) >= A && splitN(i) <= B) {\\n\t\t\t\tans += i;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\t\\n\tpublic static int splitN(int n) {\\n\t\tint sum = 0;\\n\t\tString str = Integer.toString(n);\\n\t\tString[] S = str.split(\"\");\\n\t\t\\n\t\tfor(int i = 0; i < S.length; i++) {\\n\t\t\tsum += Integer.parseInt(S[i]); \\n\t\t}\\n\t\treturn sum;\\n\t}\\n}", "target": "212", "substitutes": {"arg": ["Param", "Arg", "line", "param", "Args", "in", "Line", " line", "v", " Arg", "word", "Name", " arguments", "STR", "arr", "argument", "pass", "In", " argument", "parse", "V", " arr", "I", "G", "name"], "sc": ["sw", "sr", "cont", "ch", "enc", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "search", "sub", "nc", "sch", "cc", "sh", "cor", "cus", "core", "ctx", "sp", "ser", "dc", "rc", "anc", "sche", "ca", "na", "cm", "cur", "coll", "sb", "cs", "cl", "pc", "ner", "ci", "asc", "parser", "cv", "mc", "sci"], "N": ["Ni", "Ne", "NO", "F", "E", "NL", "No", "Part", "NB", "H", "T", "NE", "NI", "Y", "NT", "Na", "R", "L", "K", "C", "O", "NC", "NA", "D", "M", "U", "Z", "NP", "X", "V", "NN", "P", "I", "G"], "A": ["An", "AR", "a", "F", "E", "AN", "Area", "AP", "AD", "AA", "AI", "Alpha", "Y", "PA", "SA", "Ha", "L", "Ra", "AM", "API", "BA", "FA", "C", "O", "Ar", "Az", "D", "NA", "CA", "M", "U", "LA", "V", "AF", "AAA", "P", "I", "G", "AC", "RA"], "B": ["BI", "J", "F", "BL", "E", "LB", "I", "DB", "AB", "Bi", "BF", "H", "UB", "T", "Bs", "Y", "BU", "BB", "R", "L", "WB", "BA", "BC", "C", "O", "GB", "D", "M", "BS", "U", "OB", "V", "P", "Bar", "b", "G"], "ans": [" scans", "can", "outs", "ats", "a", "cons", "lan", "sk", "ns", "ons", "AN", "aus", "atan", "ions", "asin", "amps", "an", "asts", "scan", "ras", "ars", "ams", "ana", "os", "aned", "cas", "es", "anon", "ents", "plan", "ks", "span", "anc", "ANS", "na", "as", "s", "cs", "ants", "eps", "x", "nan", "ann", "ls", "annot", "ins"], "i": ["id", "slice", "j", "lc", "ri", "h", "a", "pi", "in", "mi", "d", "init", "ii", "ip", "ori", "v", "abi", "io", "ix", "is", "c", "z", "y", "gi", "index", "phi", "key", "e", "p", "fi", "f", "qi", "ji", "esi", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "ni", "uri", "ai", "mini", "I", "vi"], "n": ["nn", "a", "Ns", "nor", "ns", "in", "d", "no", "v", "z", "c", "an", "m", "en", "y", "nc", "ln", "mn", "nb", "nt", "cn", "e", "ne", "p", "number", "f", "net", "inn", "o", "s", "l", "x", "nan", "g", "ni", "u", "b", "name"], "sum": ["speed", "vol", "rank", "length", "len", "comment", "cum", "offset", "dev", "part", "unit", "in", "sa", "user", "Sum", "help", "se", "ss", "summary", "count", "an", "start", "plus", "match", "out", "sh", "pack", "mean", "index", "ass", "oss", "key", "sp", "add", "alpha", "result", "cal", "average", "skip", "s", "use", "up", "us", "gram", "si", "num", "weight", "parse", "sup", "u", "cost", "all", "size", "um", "scale", "total"], "str": ["sr", "Str", "st", "in", "err", "ss", "v", "c", "txt", "r", "iter", "out", "STR", "tr", "strings", "stri", "data", "p", "sp", "f", "arr", "R", "br", "string", "char", "pr", "s", "fr", "parse", "text", "x", "sl", "ner", "u", "list", "b", "name"], "S": ["US", "SH", "Str", "Si", "SS", "Vs", "SU", "LS", "Ds", "Split", "Services", "SL", "TS", "IDS", "SO", "SR", "SB", "STR", "T", "VS", "OS", "Sl", "FS", "PS", "NS", "R", "L", "SE", "string", "D", "WS", "BS", "s", "HS", "ST", "U", "SI", "RS", "V", "Socket", "P", "GS", "Rs", "DS", "I", "Parts"]}}
{"code": "import java.io.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]) throws IOException{\\n\t\tBufferedReader buf = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString s = buf.readLine();\\n\t\tString p = buf.readLine();\\n\t\tString str1;\\n\\n\t\tstr1 = s+s;\\n\\n\t\tif(str1.contains(p) == true)\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\telse\\n\t\t\tSystem.out.println(\"No\");\\n\t\t\\n\t}\\n}", "target": "198", "substitutes": {"buf": ["fw", "Buffer", "wb", "tab", "cf", "iterator", "ab", "cb", "h", "su", "bag", "sov", "front", "abb", "bb", "conv", "bh", "fd", "v", "abs", "txt", "r", "iter", "fp", "img", "Buff", "proc", "ctx", "f", "bu", "src", "br", "tmp", "cur", "pkg", "buff", "raf", "uf", "ff", "fb", "uber", "reader", "bed", "cv", "rb", "buffer", "b"], "s": ["lines", "h", "sg", "su", "a", "line", "str", "ns", "js", "sf", "in", "d", "se", "ls", "ss", "ps", "v", "c", "params", "m", "r", "t", "strings", "n", "ses", "f", "sp", "pos", "q", "string", "ws", "o", "hs", "i", "S", "l", "si", "sl", "sv", "P", "u", "g", "services", "b", "source", "ins"], "p": ["py", "pp", "j", "vp", "lp", "h", "tp", "str", "d", "ps", "pe", "z", "v", "c", "m", "r", "y", "fp", "point", "t", "pre", "pa", "sp", "n", "f", "bp", "pos", "q", "o", "pr", "i", "l", "P", "g", "u", "jp", "b"], "str1": ["br2", " strOne", "StrFirst", "r2", "errFirst", "brOne", "str2", "brn", "str0", "strOne", "err0", "Str0", "StrOne", "Strn", "err1", "br1", "r1", "Str1", " strFirst", "err2", " strn", "strFirst", " str0", "Str2", "strn", " str2", "r0"]}}
{"code": "import java.util.Scanner;\\n//import java.util.Arrays;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\tSystem.out.println(s.charAt(0) == t.charAt(0) && t.replaceFirst(s, \"\").length() == 1 ? \"Yes\" : \"No\");\\n\t}\\n}\\n", "target": "137", "substitutes": {}}
{"code": "import java.util.Scanner;\\nimport java.lang.*;\\npublic class Main\\n{\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner input = new Scanner(System.in);\\n\t\tint sum;\\n\t\tString s;\\n\t\twhile (true)\\n\t\t{\\n\t\t\ts = input.nextLine();\\n\t\t\tif(s.length() == 1 && s.charAt(0) == '0')\\n\t\t\t\tbreak;\\n\t\t\telse\\n\t\t\t{\\n\t\t\t\tsum = 0;\\n\t\t\t\tfor(int i = 0; i < s.length(); i++)\\n\t\t\t\t{\\n\t\t\t\t\tsum += (int)(s.charAt(i)-'0');\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(sum);\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "144", "substitutes": {"input": [" Input", "form", "str", "util", "in", "http", "init", "inc", "method", "io", "c", "inside", "plus", "r", "iter", "Input", "out", "this", "request", "xml", "n", "f", "context", "ssl", "result", "string", "active", "next", "inf", "exec", "text", "parser", "select", "stream", "output", "socket", "reader", "buffer", "source", "config"], "sum": ["hash", "vol", "fill", "error", "su", "length", "comment", "len", "part", "offset", "unit", "se", "Sum", "help", "summary", "count", "start", "spread", "sim", "match", "miss", "out", "amount", "min", "sh", "fee", "mean", "index", "ass", "number", "n", "sp", "alpha", "net", "max", "result", "fat", "char", "cal", "average", "percent", "gram", "up", "use", "space", "num", "si", "info", "weight", "parse", "text", "loss", "cost", "size", "um", "scale", "total"], "s": ["sc", "gs", "fs", "details", "su", "ings", "str", "ns", "js", "rs", "in", "d", "services", "ss", "ps", "sets", "c", "is", "m", "abs", "sync", "r", "res", "os", "xs", "t", "es", "strings", "session", "qs", "ds", "e", "ses", "p", "f", "ans", "sym", "less", "string", "ws", "bs", "as", "o", "hs", "sb", "its", "cs", "S", "l", "si", "tests", "ops", "u", "g", "ls", "b", "ts", "ins"], "i": ["id", "j", "ri", "h", "line", "pi", "mu", "I", "in", "d", "ii", "ip", "type", "z", "v", "abi", "c", "ix", "m", "t", "gi", "index", "k", "key", "e", "p", "n", "f", "qi", "ui", "xi", "li", "it", "multi", "o", "di", "ini", "oi", "chi", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "uri", "fi", "ai", "b", "vi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint k = sc.nextInt(); //\u7dcf\u8ddd\u96e2\\n\t\tint n = sc.nextInt(); //n\u8ed2\\n\t\t\\n      \tint[] d = new int[n]; //\u683c\u5bb6\u306e\u8ddd\u96e2\u4ee3\u5165\\n\t\tfor(int i = 0;i < n; i++) {\\n\t\t\td[i] = sc.nextInt();\\n\t\t}\\n      \\n      \tint maxs =0;  //\u4e00\u756a\u8ddd\u96e2\u304c\u96e2\u308c\u3066\u3044\u308b\u4e8c\u8ed2\u306e\u8ddd\u96e2\\n      \tfor( int i = 1 ; i < n ; i++){\\n\t\t\tint value = d[i] - d[i-1];\\n\t\t\tif( maxs <= value ){\\n\t\t\t\tmaxs = value;\\n\t\t\t\t}\\n        }\\n        \\n      \tint last = k - d[n-1] + d[0];\\n       \tif( maxs <= last ){\\n\t\t\t\tmaxs = last;\\n\t\t\t\t}\\n      \\n\t\tint ans = 0;//\u6700\u77ed\u79fb\u52d5\u8ddd\u96e2\\n      \tans = k - maxs ;\\n     \\n\t\tSystem.out.println(ans);\\n\\n\t\tsc.close();\\n\t}\\n}", "target": "10", "substitutes": {"sc": ["isc", "app", "soc", "st", "Sc", " SC", "bc", "sf", "scope", "SC", "se", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "sub", "nc", "cc", "sec", "proc", "sp", "ser", "dc", "src", "rc", "system", "sche", "class", "sb", "cs", "cl", "set", "pc", "sl", "ci", "sci"], "k": ["ku", "j", "sk", "dk", "tk", "ko", "ask", "kn", " K", " n", "m", "ok", "ck", "kr", "n", "ks", "K", "q", "ik", "it", "kk", "num", "mk", "kernel", "unk", "g", "work"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tdouble n = sc.nextDouble();\\n\t\tdouble k = sc.nextDouble();\\n\t\t\\n\t\tdouble E = 0;\\n\t\tdouble q;\\n\t\tfor(double p = 1; p <= n; p++) {\\n\t\t\tdouble Ep = 1/n;\\n\t\t\tq = p;\\n\t\t\tif(p >= k) {\\n\t\t\t\tE += Ep;\\n\t\t\t}\\n\t\t\tif(p < k) {\\n\t\t\t\tdo{\\n\t\t\t\t\tq = q * 2;\\n\t\t\t\t\tEp = Ep / 2;\\n\t\t\t\t}while(q < k);\\n\t\t\t\t\\n\t\t\t\tE += Ep;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(E);\\n\\n\t}\\n\\n}\\n", "target": "20", "substitutes": {"sc": ["sw", "enc", "ch", "lc", "soc", " Sc", "loc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "com", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "cc", "sec", "sh", "cus", "ctx", "sp", "acc", "ocr", "src", "rc", "system", "anc", "cur", "class", "cs", "l", "cl", "pc", "exec", "ner", "asc", "g", "cv", "sci"], "n": ["j", "h", "Ns", "ns", "d", "v", "ny", "c", "z", "m", "r", "en", "y", "nc", "np", "nb", "nt", "ne", "e", "dn", "f", "net", "pn", "o", "w", "s", "i", "N", "l", "num", "x", "P", "u", " N", "b"], "k": ["j", "h", "sk", "kick", "d", "dk", "tk", "ko", "ka", "ep", "kn", "z", "v", "c", "m", "ok", "y", "ck", "ak", "e", "key", "f", "ks", "K", "ik", "ki", "km", "o", "w", "i", "kk", "kw", "mk", "ke", "x", "P", "u"], "E": ["EE", "Q", "F", "EA", "EB", "UE", "Ec", "AE", "Pe", "ep", "pe", "Max", "Error", "PE", "IE", " e", "H", "Do", "T", "B", "El", "Y", "Eng", "e", "EF", "R", "L", "END", "Power", "K", "TE", "O", "EC", "Ell", "C", "D", "End", "EH", "Ev", "GE", "OE", "U", "Energy", "N", "X", "V", "P", "Size", "Es", "Est", "ES", "G", "EP"], "q": ["id", "pp", "Q", "ch", "j", "h", "query", "d", "ip", "count", "ep", "pe", "iq", "z", "v", "sq", "c", "y", "qt", "t", "ce", "sh", "qu", "qq", "qs", "req", "e", "f", "qi", "K", "xp", "ph", "i", "dq", "patch", "x", "qa", "P", "u", "cp", "depth", "eq", "Query"], "p": ["cop", "pp", "j", " xp", "lp", "a", "po", "tp", "pi", "part", "d", "ip", "ep", "pe", "v", "z", "c", " e", "y", " c", "pt", "point", "fp", "t", "np", "jp", "wp", "pre", "e", "pa", "f", "bp", "ap", "o", "pr", "w", "s", "i", "l", "pc", "patch", "P", "u", " P", "cp", "b"], "Ep": ["Tx", "Q", "pp", "Step", "Ap", "Ec", "Page", "Ex", "Episode", "ep", "Ch", "c", "Offset", " ep", "El", "Loop", "Op", "Prop", "Length", "Eng", "Ph", "e", "Pg", "Enc", "L", "Power", "K", "Len", "C", "Eth", "Point", "Ell", "Exec", "End", "Arc", "Mp", "N", "IP", "eps", "Exp", "X", "Pa", "Channel", "P", "Delta", "Sp", "Ops", "Est", "Hop", "EP"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint x = sc.nextInt();\\n\t\tint [] list = new int [n + 1];\\n\t\tlist[0] = 0;\\n\\n\t\tfor(int i = 1; i <= n; i++) {\\n\t\t\tlist[i] = sc.nextInt();\\n\t\t\tlist[i] += list[i-1];\\n\t\t}\\n\t\tint ans = 0;\\n\t\tfor(int i = 0; i <= n; i++) {\\n\t\t\tif( list[i] <= x) ans++;\\n\t\t\telse break;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "130", "substitutes": {"sc": ["sw", "enc", "cont", "ch", "lc", "loc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "sf", "sem", "com", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "cor", "cus", "sec", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "coll", "sb", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "mc", "sci"], "n": ["j", "nn", "h", "len", "sn", "ns", "in", "d", "no", "z", "v", "c", "m", "r", "en", "y", "network", "out", "nc", "t", "ln", "nb", "nr", "k", "nt", "e", "ne", "p", "number", "f", "net", "o", "w", "s", "N", "l", "num", "nan", "u", "b"], "x": ["id", "one", "h", "a", "xx", "in", "d", "cross", "xxx", "z", "v", "ix", "c", "is", "m", "y", "xs", "t", "index", "k", "e", "number", "p", "ex", "f", "q", "xi", "na", "w", "ax", "s", "l", "X", "u", "xes"], "list": ["slice", "cont", "where", "can", "id", "base", "left", "lc", "object", "lp", "and", "len", "part", "array", "table", "count", "type", "an", "not", "plus", "lists", "sync", "is", "this", "out", "ul", "like", "index", "pre", "chain", "lv", "plan", "batch", "p", "number", "arr", "map", "L", "add", "queue", "la", "li", "test", "stack", "full", "LIST", "range", "lat", "keep", "l", "parent", "code", "cl", "set", "ignore", "info", "parse", "block", "load", "all", "null", "size", "ist", "get"], "i": ["id", "inner", "j", "lc", "ri", "h", "a", "pi", "mu", "I", "in", "mi", "init", "ii", "ip", "cli", "z", "v", "ix", "io", "is", "m", "start", "abi", "ori", "y", "gi", "index", "phi", "e", "p", "fi", "f", "qi", "ji", "anti", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "yi", "si", "bi", "hi", "info", "ci", "u", "ni", "ti", "uri", "ai", "b", "name"], "ans": [" scans", "lines", "aces", "ips", "outs", "nn", "alls", "ats", " means", "cons", "leans", "lan", "ons", "ns", "ens", "AN", "aus", "ss", "ions", "amps", "ones", "an", "asts", "scan", "ras", "ars", "os", "aned", "acs", "cas", "groups", "ents", "ids", "ks", "span", "anc", "ANS", "na", "as", "anners", "ians", "s", "anned", "acts", "cs", "ants", "eps", "nan", "ann", "ls", "ins"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.io.Closeable;\\nimport java.io.IOException;\\nimport java.util.NoSuchElementException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author HBonsai\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        FastScanner in = new FastScanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BCardGameForTwo solver = new BCardGameForTwo();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BCardGameForTwo {\\n        public void solve(int testNumber, FastScanner in, PrintWriter out) {\\n            int N = in.nextInt();\\n            int[] a = in.nextIntArray(N);\\n            Arrays.sort(a);\\n            int alice = 0;\\n            int bob = 0;\\n            for (int i = N - 1; i >= 0; i -= 2) {\\n                alice += a[i];\\n            }\\n            for (int i = N - 2; i >= 0; i -= 2) {\\n                bob += a[i];\\n            }\\n            out.println(alice - bob);\\n        }\\n\\n    }\\n\\n    static class FastScanner implements Closeable {\\n        private final InputStream in;\\n        private final byte[] buffer = new byte[1024];\\n        private int ptr = 0;\\n        private int buflen = 0;\\n\\n        public FastScanner(InputStream in) {\\n            this.in = in;\\n        }\\n\\n        private boolean hasNextByte() {\\n            if (ptr < buflen) {\\n                return true;\\n            } else {\\n                ptr = 0;\\n                try {\\n                    buflen = in.read(buffer);\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n                if (buflen <= 0) {\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n\\n        private int readByte() {\\n            if (hasNextByte()) return buffer[ptr++];\\n            else return -1;\\n        }\\n\\n        private static boolean isPrintableChar(int c) {\\n            return 33 <= c && c <= 126;\\n        }\\n\\n        public boolean hasNext() {\\n            while (hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;\\n            return hasNextByte();\\n        }\\n\\n        public long nextLong() {\\n            if (!hasNext()) throw new NoSuchElementException();\\n            long n = 0;\\n            boolean minus = false;\\n            int b = readByte();\\n            if (b == '-') {\\n                minus = true;\\n                b = readByte();\\n            }\\n            if (b < '0' || '9' < b) {\\n                throw new NumberFormatException();\\n            }\\n            while (true) {\\n                if ('0' <= b && b <= '9') {\\n                    n *= 10;\\n                    n += b - '0';\\n                } else if (b == -1 || !isPrintableChar(b)) {\\n                    return minus ? -n : n;\\n                } else {\\n                    throw new NumberFormatException();\\n                }\\n                b = readByte();\\n            }\\n        }\\n\\n        public int nextInt() {\\n            long nl = nextLong();\\n            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\\n            return (int) nl;\\n        }\\n\\n        public int[] nextIntArray(final int n) {\\n            final int[] res = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                res[i] = nextInt();\\n            }\\n            return res;\\n        }\\n\\n        public void close() {\\n            try {\\n                in.close();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n        }\\n\\n    }\\n}\\n\\n", "target": "132", "substitutes": {"inputStream": ["outputWriter", "outputChannel", " inputWriter", "inputChannel", " inputstream", " inputSteam", "outputstream", "outputSteam", "inputstream", "Inputstream", "inputSteam", "InputSteam", "InputStream", "inputWriter", "InputChannel", " inputChannel", "InputWriter"], "outputStream": ["Outputstream", "outputstream", "inputPath", "memorySteam", "outputSteam", " outputPath", "OutputStream", "outputPath", "OutputStreamer", "inputstream", "inputSteam", "inputStreamer", "OutputSteam", "OutputPath", "memoryStreamer", "memoryStream", " outputstream", " outputSteam", "outputStreamer"], "in": ["inner", "again", "h", "query", "client", "url", "m", "r", "con", "isin", "inn", "In", "nin", "exec", "x", "diff", "gen", "reader", "config", "path", "cin", "din", "inc", "io", "inside", "is", "this", "read", "request", "input", "data", "index", "e", "f", "arin", "rin", "kin", "cl", "socket", "login", "sin", "conn", "resource", "init", "thin", "p", "win", "ssl", "inf", "connection", "ai", "get", "source", "id", "slice", "gin", "str", "bin", "rec", "err", "arg", "v", "min", "ex", "on", "cache", "IN", "as", "run", "image", "ini", "log", "pin", "lin", "ins"], "out": ["inner", "again", "pool", "error", "outs", "writing", "conn", "file", "line", "exit", "comment", "bin", "page", "scope", "timeout", "init", "err", "inc", "user", "group", "server", "client", "io", "v", "outer", "OUT", "call", "sync", "r", "word", "input", "data", "ex", "obj", "problem", "bar", "net", "p", "cache", "off", "dump", "list", "window", "connection", "o", "w", "s", "target", "up", "work", "parent", "log", "exp", "exec", "later", "x", "ext", "Out", "output", "copy", "temp", "writer", "write"], "solver": ["solution", "ssolver", "ssolution", " sololution", "researcher", "resolution", "solves", "ssearcher", "resolver", "resolve", "searcher", "Solve", " sololver", " sololves", "Solves", "solve", " sololve", "ssolve", "Solution", "Solver", "Searcher", "ssolves"], "testNumber": [" trialNum", " trialNumber", "Testnumber", " trialnumber", "TestNumber", "testnumber", " trialNumbers", " testnumber", "TestNumbers", " testNum", "testNumbers", "TestNum", " testNumbers", "testNum"], "N": ["Q", "Ni", "Ne", "Ns", "F", "E", "No", "NB", "Num", "H", "A", "T", "B", "NE", "Y", "NT", "NS", "R", "L", "K", "IN", "C", "NC", "O", "NA", "D", "SN", "M", "U", "Z", "S", "V", "X", "NN", "P", "Size", "GN", "I", "G"], "a": ["ba", "ab", "ma", "aa", "sa", "ata", "am", "aux", "array", "ha", "aura", "an", "area", "ia", "y", "A", "tta", "ga", "ea", "p", "alpha", "Array", "missing", "e", "aj", "pa", "la", "ca", "as", "va", "na", "o", "s", "ama", "asa", "da", "au", "x", "ae", "u"], "alice": ["elICE", "palice", "calence", "palix", "allce", "lence", "allice", "alICE", "caline", "palence", "elice", "alce", "alider", "lice", "paline", "calix", "alluce", " alICE", " alce", "avalix", "aruce", "lICE", "allider", "alace", "avaline", "aline", "arice", " alence", "avalice", "alence", "elence", " alider", "arider", "avalence", "arce", " alace", "elace", "alix", "aluce", "lace", " aluce", "calice"], "bob": ["abobi", "blob", "alOB", "abob", "bobb", "laud", "bobi", "Boca", "pob", "lab", "abobb", "lib", "pab", "baud", " boca", "lob", "Bab", "bib", " bobb", "paud", "bOB", "aboby", "BOB", " bOB", "Bob", "aloca", "Baud", "pib", " bobi", "boca", "blobi", "alobb", " boby", "Bib", "Bobb", "blobb", "bloby", "alob", "bab", "boby"], "i": ["id", "j", "ri", "pi", "mu", "I", "mi", "init", "ii", "ip", "z", "io", "v", "ix", "y", "gi", "index", "phi", "e", "p", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "multi", "o", "eni", "di", "ini", "ie", "oi", "yi", "chi", "si", "bi", "sup", "hi", "info", "zi", "x", "ci", "ni", "ti", "u", "fi", "ai", "uri", "mini", "vi"], "buffer": ["slice", "Buffer", "address", "document", "length", "comment", "bin", "memory", "resource", "timeout", "device", "bb", "flush", "array", "table", "transfer", "header", "limit", "texture", "default", "FFER", "url", "position", "iter", "input", "data", "padding", "available", "batch", "number", "bar", "queue", "cache", "reference", "row", "window", "binary", "uffer", "pad", "buff", "buf", "use", "uf", "fb", "append", "block", "capacity", "message", "copy", "reader", "source"], "ptr": ["slice", "port", "cmp", "sth", "address", "loc", "Ptr", "tp", "length", "len", "ft", "offset", "addr", "xt", "fd", "adr", "pointer", "pt", "shift", "pty", "tr", "td", "pull", "fee", "fe", "np", "push", "req", "pos", "arr", "qi", "ctr", "src", "br", "elt", "tmp", "wr", "cur", "tip", "pad", "buff", "buf", "code", "ff", "fr", "pl", "pointers", "patch", "attr", "dr", "ext", "rt", "depth", "prot", "inst", " pointer"], "buflen": ["BUflock", "publen", "kufllen", "buFleng", "buflib", "bullened", " bullan", "publlen", "publens", "kullen", "publened", " buflens", "bucolens", "bullock", "bucolen", "kullun", "kuflent", "bucolened", "BUllib", "kullent", " bullen", "bullens", "bullib", "BUllock", "bufren", "buFlen", "bullen", "buflened", "buplen", "buplens", "bullent", "kulllen", "pufllen", "bucollen", "BUllen", "bufrens", "bucolent", "puflen", "bullun", "bulleng", "kuflun", "puflens", "buflun", "bublib", "bucolun", "bufleng", "bublen", "buflock", " bufleng", "buplan", "bullan", "puflened", "bublened", "buflent", " bullens", "buplun", "BUflib", "bufllen", "bublock", "BUflen", "bufrock", "bufrib", "BUflens", "buflan", "bulllen", " bulleng", "buplent", "buflens", "bupleng", " buflan", "kuflen", "bubllen", "bublens", "bupllen", "buFlan", "BUllens", "buFlens"], "c": ["sc", "enc", "ch", "lc", "h", "ct", "cd", "bc", "d", "fc", "count", "uc", "abc", "esc", "v", "m", "ac", "ec", "nc", "cc", "k", "cy", "e", "p", "xc", "f", "unc", "dc", "rc", "char", "cm", "C", "cs", "code", "l", "cl", "pc", "x", "ci", "u"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) throws IOException {\\n\t\ttry (BufferedReader br = new BufferedReader(\\n\t\t\t\tnew InputStreamReader(System.in))) {\\n\\n\t\t\tString in = br.readLine();\\n\t\t\tString chr[] = in.split(\"\");\\n\t\t\tint ans = 0;\\n\t\t\tfor(String a: chr) {\\n\t\t\t\tans +=(a.equals(\"+\")?1:-1);\\n\\n\t\t\t}\\n\t\t\t System.out.println(ans);\\n\t\t}\\n\t}\\n}", "target": "54", "substitutes": {"in": ["id", "inner", "again", "login", "gin", "line", "str", "bin", "resource", "user", "err", "din", "init", "cli", "inc", "c", "is", "r", "out", "read", "input", "data", "ex", "n", "isin", "IN", "rin", "br", "string", "inn", "as", "connection", "pass", "In", "ini", "s", "i", "nin", "fr", "log", "exec", "lin", "reader", "buffer", "temp", "b", "source", "ins"], "chr": ["Chrc", "charr", "chrc", " chrc", "charre", " chp", "charrc", "Chp", "Char", "chin", " chre", "Chin", "Chr", "charar", " chin", "Chre", " char", "charp", "chre", "char", "charin", "chp"], "ans": ["anas", "lines", "aces", "ani", "anus", "ats", "oa", "leans", "lan", "ons", "aning", "AN", "aus", "atan", "nas", "amps", "an", "ras", "ars", "ana", "os", "aned", "cas", "offs", "annels", "anon", "ents", "ano", "n", "ks", "span", "anc", "ANS", "les", "as", "s", "anned", "cs", "anz", "ants", "ran", "nan", "anes", "ann", "reads", "ins"], "a": ["ast", "change", "ab", "str", "fa", "part", "aa", "sa", "empty", "ha", "arg", "an", "at", "c", "area", "ac", "ana", "A", "ga", "index", "ad", "e", "p", "pa", "n", "f", "entry", "alpha", "span", "char", "la", "va", "as", "na", "i", "l", "za", "da", "ae", "u", "ar", "b", "name", "sta"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t//List<String> list=new ArrayList<String>(Arrays.asList(s.split(\"\")));\\n\t\tList<Integer> list=new ArrayList<Integer>();\\n\t\t//Long[] array = new Long[6];\\n\t\tint n = sc.nextInt();\\n\t\tfor(int i=0;n>i;i++) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tlist.add(a);\\n\t\t}\\n\t\tint count=0;\\n\t\tfor(int i=0;n>i;i++) {\\n\t\t\tint a = list.get(i);\\n\t\t\tif(a!=0) {\\n\t\t\t\tcount++;\\n\t\t\t\tfor(int j=i;n>j;j++) {\\n\t\t\t\t\tint b = list.get(j);\\n\t\t\t\t\tif(b==0)\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\telse {\\n\t\t\t\t\t\tlist.set(j, b-1);\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\t//System.out.println(list);\\n\t\t\t\ti=-1;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "77", "substitutes": {"sc": [" rc", " Sc", " ser", "Sc", " SC", "sf", "SC", "sa", " res", " sk", " scr", "ss", "sq", "an", "scan", " sm", "SB", " cont", " sp", "sp", " annot", " ans", " scorer", " subp", "sb", " pars", "ann", " ann"]}}
{"code": "import java.io.*;\\nimport java.math.BigDecimal;\\nimport java.math.BigInteger;\\nimport java.text.ParseException;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\\n    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    static StringTokenizer st;\\n    static StringBuilder sb = new StringBuilder(\"\");\\n\\n    static int[] inputArray(int n) throws IOException {\\n        int[] a = new int[n];\\n        st = new StringTokenizer(br.readLine());\\n        for(int i = 0 ; i < n ; i++) {\\n            a[i] = Integer.parseInt(st.nextToken());\\n        }\\n        return a;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st;\\n        StringBuilder sb = new StringBuilder(\"\");\\n        st = new StringTokenizer(br.readLine());\\n        long a = Long.parseLong(st.nextToken());\\n        long b = Long.parseLong(st.nextToken());\\n        long c = Long.parseLong(st.nextToken());\\n        long d = Long.parseLong(st.nextToken());\\n        System.out.println(Math.max(Math.max(a*d , a*c) , Math.max(b*c , b*d)));\\n    }\\n\\n    static int gcd(int a , int b) {\\n        if(a % b == 0) {\\n            return b;\\n        }\\n        return gcd(b , a % b);\\n    }\\n\\n    static void longestGcdSeq(int a[] , int n) {\\n        int coprimes[] = new int[n];\\n        for(int i = 0 ; i < n ; i++) {\\n            if(a[i] < a[(i+1)%n]) {\\n                if(gcd(a[(i+1)%n] , a[i]) != 1) {\\n                    coprimes[i] = 1;\\n                }\\n            }\\n            else {\\n                if(gcd(a[i] , a[(i+1)%n]) != 1) {\\n                    coprimes[i] = 1;\\n                }\\n            }\\n        }\\n        //System.out.println(Arrays.toString(coprimes));\\n        int maxLen = 0 , startLen = 0 , endLen = 0;\\n        int i = 0;\\n        while(i < n && coprimes[i] == 1) {\\n            startLen++;\\n            i++;\\n        }\\n        i = n -1;\\n        while(i >= 0 && coprimes[i] == 1) {\\n            endLen++;\\n            i--;\\n        }\\n        int start = 0;\\n        for(i = 0 ; i < n ; i++) {\\n            if(coprimes[i] == 0) {\\n                maxLen = Math.max(maxLen , i - start);\\n                start = i + 1;\\n            }\\n        }\\n        maxLen = Math.max(maxLen , i - start);\\n        start = i + 1;\\n        //System.out.println(startLen + \" \" + maxLen + \" \" + endLen);\\n        int contMax = startLen == n ? n : Math.max(startLen + endLen , maxLen) + 1;\\n        //System.out.println(contMax);\\n        for(int k = 2 ; k <= n ; k++) {\\n            System.out.print((contMax-1)/(k-1) + \" \");\\n        }\\n        System.out.println();\\n    }\\n\\n}\\n/*\\n\\nif(tree.size == 2) {\\n\\n}\\n\\n5 8\\n5 1 2 4 3\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n1 1000000000\\n1 1\\n1 500000000\\n\\n\\n */", "target": "244", "substitutes": {"br": ["sr", "ch", "yr", "bg", "str", "bro", "Br", "bc", "bh", "bsp", " Br", "bf", "ber", "BR", "cr", "HR", "r", " BR", "SB", "db", "tr", "img", "BB", "hr", "ur", "obj", "arr", "mr", "bp", "src", "ocr", "Bl", "bridge", "browser", "bs", "jar", "bm", "bt", "buf", "lr", "fr", "brush", "fb", "bas", "bd", "dr", "bl", "rb"], "st": ["sc", "sw", "ast", "Str", "sth", "nd", "form", "ct", "str", "ft", "sn", "sf", "se", "sa", "ust", "ut", "pb", "ss", "stress", "sm", "std", "start", "r", "sta", "pt", "ld", "lt", "const", "t", "gest", "stand", "sh", "usr", "fe", "stri", "butt", "ste", "be", "sp", "ser", "src", "string", "ost", "trans", "s", "ST", "rest", "rd", "l", "sts", "fr", "store", "sl", "stage", "struct", "bl", "rt", "est", "ist", "inst", "St"], "sb": ["ib", "cb", "bg", "sg", "abb", "Sm", "sf", "sa", "bb", "bh", " kb", "pb", "bf", "std", "gb", "NB", "BF", "SB", "stab", "db", "SF", "Bs", "B", "nb", "BB", " tob", "WB", "bp", " eb", "src", "Bl", "ARB", "bt", "bm", "lb", " SB", "bl", "rb"], "n": ["j", "none", "nn", "h", "conn", "body", "len", "sn", "ns", "in", "no", "count", "v", "z", "an", "m", "current", "r", "y", "en", "network", "out", "norm", "nc", "t", "ln", "core", "nb", "k", "nt", "cn", "e", "ne", "p", "dn", "f", "number", "net", "un", "max", "na", "o", "w", "s", "N", "l", "num", "x", "nan", "g", "u", " N", "all", "name"], "a": ["aw", "app", "oa", "ma", "aaa", "sa", "am", "ha", "m", "ana", "mA", "ava", "result", "la", "va", "na", "asa", "da", "x", "qa", "ae", "another", "fa", "aux", "ao", "z", "ia", "A", "index", "data", "ea", "e", "alpha", "f", "span", "auto", "u", "all", "ar", "sta", "ba", "ab", "aa", "abc", "an", "area", "at", "ac", "y", "tta", "img", "p", "pa", "aj", "wa", "active", "au", "action", "ai", "instance", "api", "art", "aba", "ata", "array", "v", "ga", "ada", "ad", "sha", "ua", "ca", "as", "o", "image", "something", "s", "ama", "code", "l", "aka"], "i": ["inner", "h", "in", "mi", "start", "m", "gi", "phi", "qi", "col", "field", "chi", "x", "ci", "uri", "fi", "mini", "temp", "lc", "ii", "cli", "z", "io", "is", "data", "index", "key", "e", "f", "xi", "li", "multi", "eni", "hi", "u", "ti", "name", "ami", "pi", "init", "ix", "abi", "y", "p", "ik", "ui", "iu", "ic", "oi", "bi", "ni", "ai", "I", "id", "slice", "j", "ri", "part", "ip", "ori", "v", "t", "fail", "ji", "ki", "q", "it", "o", "di", "ini", "yi", "ie", "l", "si", "info", "g", "my"], "b": ["wb", "j", "bur", "base", "ba", "ab", "cb", "ib", "h", "body", "length", "abb", "bc", "aa", "bb", "gb", "v", "z", "ob", "ub", "m", "abs", "r", "y", "db", "A", "t", "B", "nb", "k", "ad", "e", "be", "p", "f", "batch", "bp", "eb", "bs", "binary", "o", "w", "s", "lb", "l", "bi", "fb", "x", "bd", "ae", "u", "g", "bl", "rb", "buffer"], "c": ["sc", "cu", "cf", "lc", "h", "cb", "cd", "bc", "z", "m", "ac", "r", "y", "con", "ce", "cc", "ad", "e", "p", "f", "dc", "q", "cm", "C", "ca", "o", "w", "s", "cs", "l", "cl", "x", "ci", "g", "u"], "d": ["id", "j", "nd", "h", "cd", "dd", "z", "v", "m", "r", "y", "db", "ld", "t", "dt", "ds", "k", "ad", "e", "p", "dn", "f", "dc", "dat", "q", "D", "o", "w", "s", "l", "dx", "da", "x", "u", "g", "dy"], "coprimes": ["copRtimes", "coprapes", "corprocks", " coprime", "corpramps", "coparapes", "corprime", "corrocks", "copRocks", "copertimes", " coprises", "coparimes", "corramps", "copRimes", " copertimes", "copprapes", "coparime", "coperises", "corrimes", "coprtamps", " coperime", "coprises", "corrtimes", "coprttimes", "copprimes", "copprises", " coperimes", "coparocks", "copRime", "coppramps", "corprtimes", "copRamps", "coprtimes", "coprtapes", "corrime", "corrapes", "corprapes", "copRises", "copramps", "copprtimes", "corprimes", "copprime", "copprocks", " coperises", "copRapes", "coperime", " coprtimes", "coprocks", "coprime", "coperimes"]}}
{"code": "import java.util.*;\\npublic class Main\\n{\\n  public static void main(String args[])\\n  {\\n    Scanner Sc=new Scanner(System.in);\\n    int n=Sc.nextInt();\\n    int[] arr=new int[n];\\n    for(int i=0;i<n-1;i++)\\n      arr[Sc.nextInt()-1]++;\\n    for(int i=0;i<n;i++)\\n      System.out.println(arr[i]);\\n  }\\n}\\n", "target": "12", "substitutes": {"Sc": ["sc", "Context", "Sh", "Squ", "Config", "Cs", "Kh", "Hub", " SC", "Sync", "SC", "Kit", "Ch", "Square", "Cur", "Cat", "Sw", "Reader", " sc", "Coll", "Sa", "Code", "Iter", "Buff", "Loc", "Chan", "Col", "Seg", "Enc", "K", "Mc", "Esc", "Sign", "C", "Exec", "Capt", "FC", "Cr", "Scan", "Sch", "Conn", "Cl", "Ca", "Screen", "ner", "Channel", "Sk", "Sp", "Sec", "Cor", "Scope", "St"], "n": ["j", "nn", "h", "len", "sn", "ns", "in", "d", "init", "no", "count", "nl", "z", "v", "c", "m", "r", "y", "network", "nc", "t", "ln", "non", "nb", "k", "nt", "e", "number", "p", "ne", "f", "dn", "net", "span", "q", "o", "w", "s", "N", "l", "num", "x", "u", "size", "b", "name"], "arr": ["j", "app", "ab", "series", "a", "part", "aa", "err", "inc", "array", "rep", "arg", "v", "adr", "abc", "inter", "r", "parts", "img", "data", "index", "pre", "dim", "batch", "obj", "p", "Array", "map", "f", "cache", "arch", "prev", "br", "ray", "list", "av", "stack", "coll", "val", "fr", "ignore", "parse", "frac", "arc", "attr", "dr", "ann", "ar", "vec"], "i": ["id", "inner", "j", "vol", "ri", "pi", "mu", "in", "mi", "init", "ip", "ii", "z", "v", "io", "c", "ix", "r", "y", "gi", "index", "data", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "ti", "ai", "mini", "I"], "nextInt": [" nextInteger", "NextExt", "lastLong", "lastInt", "lastint", "NextInteger", "nextint", "currentLong", "nextLong", "currentExt", "Nextint", "nextExt", " nextExt", "NextInt", "NextLong", "nextInteger", "lastInteger", "currentInt", "currentint", " nextLong", " nextint"]}}
{"code": "import java.io.*;\\n \\nclass Main {\\n    public static void main(String[] args) {\\n        BufferedReader kb = new BufferedReader( new InputStreamReader( System.in ) );\\n        try {\\n            int n = Integer.parseInt( kb.readLine() );\\n\t\t\t\\n\t\t\tint[] nums = new int[n];\\n            int num, maxprofit, min;\\n            int i, j;\\n            \\n            maxprofit = 1-1000000000;\\n            min = Integer.parseInt( kb.readLine() );\\n            for( i=1; i<n; i++ ) {\\n            \tnum = Integer.parseInt( kb.readLine() );\\n\t\t\t\tmaxprofit = Math.max( maxprofit, num-min );\\n\t\t\t\tmin = Math.min( min, num );\\n            }\\n            \\n            System.out.println( maxprofit  );\\n             \\n            kb.close();\\n        } catch( IOException e ) {\\n            System.err.println( e );\\n        }\\n    }\\n}", "target": "208", "substitutes": {"kb": ["kB", "obb", "ku", "kt", "ib", "cb", "zb", "bg", "lf", "sk", "kl", "bc", "dk", "bb", "bh", "hd", "ka", "ko", "pb", "bf", "kn", "usb", "gb", "ck", "MB", "uk", "kr", "nb", "qs", "k", "wd", "ctx", "mb", "bp", "ks", "eb", "ki", "hm", "ky", "km", "sb", "bt", "kid", "kw", "KB", "ke", "fb", "bd", "kg", "hp", "aka", "rb", "b"], "n": ["len", "sn", "ns", "in", "d", "no", "nl", "z", "c", "m", "en", "y", "network", "nc", "t", "ln", "mn", "nb", "k", "nt", "un", "e", "number", "p", "ne", "f", "net", "o", "w", "s", "N", "l", "x", "ni", "u", "size", "b", "name"], "nums": ["cumbers", "pumeric", "pum", " numeric", "cums", "numbers", "numeric", "cum", "pums", " numbers", "pumbers", "cumeric"], "num": ["id", "uni", "nn", "loc", "conn", "su", "len", "bin", "nu", "mu", "unit", "in", "d", "mi", "no", "inc", "init", "Num", "m", "miss", "en", "con", "non", "mon", "mn", "ul", "gi", "index", "nr", "ng", "k", "nb", "un", "number", "p", "fi", "f", "max", "na", "umi", "o", "bi", "nm", "NUM", "sum", "nom", "x", "u", "ni", "mom", "gen", "um", "b"], "maxprofit": ["devprofit", " maxproduction", "Maxprofits", "MAXprofits", "axprofit", "grandprofit", " maxprice", "postprofit", "Maxprofit", "postprofits", "MAXbenefit", "whprofits", "allprofits", "assproduction", "axprofits", "maxprice", "axbenefit", "whproduction", "grandprofits", "postproduction", "MAXproduction", "whprofit", "postbenefit", "allbenefit", "devprofits", " maxbenefit", "allprofit", "devproduction", "whbenefit", "devbenefit", "grandbenefit", " maxprofits", "grandproduction", "assbenefit", "maxbenefit", "Maxprice", "maxproduction", "maxprofits", "MAXprofit", "assprofit", "assprofits", "axprice"], "min": ["mid", "len", "in", "am", "round", "limit", "start", "m", "spec", "MAX", "mon", "mean", "dim", "pos", "na", "average", "mit", "MIN", "val", "version", "sol", "between", "diff", "minus", "mini", "emin", "std", "default", "spread", "sun", "pre", "index", "un", "span", "sort", "mins", "sign", "name", "small", "sin", "Min", "init", "sim", "stat", "lower", "value", "save", "minimum", "p", "max", "partial", "skip", "sum", "ain", "step", "ai", "scale", "slice", "pri", "none", "left", "unit", "err", "ind", "miss", "shift", "sec", "ini", "amin", "range", "div", "weight", "don", "first", "size", "initial", "lim", "sample"], "i": ["id", "uni", "a", "pi", "mu", "I", "d", "mi", "ii", "ip", "ind", "z", "v", "im", "c", "m", "y", "gi", "k", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "o", "eni", "di", "ini", "oi", "chi", "l", "si", "bi", "x", "zi", "ci", "u", "ni", "ti", "ai", "b"], "j": ["J", "len", "ij", "err", "ind", "z", "c", "m", "r", "index", "k", "un", "ne", "p", "pos", "f", "ji", "aj", "li", "it", "o", "l", "x", "u", "g", "jp", "b"]}}
{"code": "import java.util.*;\\npublic class Main{\\n    public static void main(String args[]){\\n        Scanner scanner = new Scanner(System.in);\\n\\n        String S = scanner.nextLine();\\n        String A = new String(\"2018\");\\n\\n        A = A.concat(S.substring(4));\\n        System.out.println(A);\\n        }\\n}", "target": "18", "substitutes": {"scanner": ["scanNER", " scaninter", "nerer", "scaner", "Scanner", "analyler", "nerker", "analyinter", " scanler", "analyner", "nerNER", "caner", "Scaner", "analyer", "Scanker", "nerner", "scanler", "scanker", "canker", "canner", "Scaninter", "canNER", "scaninter", "Scanler", " scaner", "ScanNER"], "S": ["SH", "Si", "SS", "As", "SU", "Su", "F", "SC", "AS", "TS", "SO", "SR", "SB", "T", "B", "Y", "Sl", "SA", "NS", "R", "L", "SE", "C", "D", "SN", "s", "BS", "ST", "U", "N", "SI", "V", "P", "GS", "I"], "A": ["Bra", "As", "AR", "a", "F", "E", "Args", "All", "MA", "GA", "The", "AB", "AS", "AP", "AA", "H", "AST", "T", "Alpha", "B", "Y", "PA", "SA", "Answer", "This", "R", "L", "AM", "Array", "JA", "API", "FA", "BA", "W", "C", "CA", "O", "NA", "D", "AW", "HA", "U", "Adam", "N", "Ca", "LA", "New", "AAA", "TA", "P", "AF", "Average", "I", "G", "AC", "RA"]}}
{"code": "import java.io.*;\\nimport java.math.*;\\nimport java.util.*;\\n\\n\\n\\n\\n\\npublic class Main {\\n\\n    static MyScanner in = new MyScanner();\\n    static   PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\\n    int N;\\n    static int max = 200001;\\n    static int [] dr = {1,-1,0,0};\\n    static int [] dc={0,0,-1,1};\\n    static boolean [][] grid;\\n    static int [] bishopr = {-1,1,-1,1};\\n    static int [] bishopc = {1,1,-1,-1};\\n    static long H,W,cnt;\\n    static HashMap<String,Integer> map = new HashMap<>();\\n    public static void main(String args[]) throws IOException {\\n        int N = in.nextInt();\\n        map.put(\"AC\", 0);\\n        map.put(\"WA\", 0);\\n        map.put(\"TLE\", 0);\\n        map.put(\"RE\", 0);\\n        while(N-->0){\\n            String n= in.next();\\n            if(map.containsKey(n))\\n                map.replace(n, map.get(n)+1);\\n            \\n        }\\n        out.println(\"AC x \"+map.get(\"AC\"));\\n        out.println(\"WA x \"+map.get(\"WA\"));\\n        out.println(\"TLE x \"+map.get(\"TLE\"));\\n        out.println(\"RE x \"+map.get(\"RE\"));\\n        out.flush();\\n        }\\n       static boolean isValid (int r, int c){\\n           if(r>=0&&r<H&&c>=0&&c<W){\\n               return true;\\n           }\\n           return false;\\n       }\\n        private static void dfs(int r, int c) {\\n            for(int i=0;i<4;i++){\\n                int nr = bishopr[i] +r;\\n                int nc = bishopc[i]+c;\\n                if(isValid(nr, nc)&&!grid[nr][nc]){\\n                    cnt++;\\n                    grid[nr][nc] = true;\\n                    dfs(nr, nc);\\n                }\\n            }\\n        }\\n\\n        static boolean isEven(long a) {\\n            return (a&1)==0;\\n        }\\n       static  void swap (int a, int b){\\n\\n        int temmp = b;\\n        b=a;\\n        a = temmp;\\n        }\\n    \\n\\n    public static class MyScanner {\\n        BufferedReader br;\\n        StringTokenizer st;\\n   \\n        public MyScanner() {\\n           br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n   \\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n   \\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n   \\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n   \\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n   \\n        String nextLine(){\\n            String str = \"\";\\n        try {\\n           str = br.readLine();\\n        } catch (IOException e) {\\n           e.printStackTrace();\\n        }\\n        return str;\\n        }\\n  \\n     }\\n}", "target": "160", "substitutes": {"in": ["inner", "login", "again", "path", "doc", "h", "conn", "file", "bin", "query", "d", "init", "inc", "din", "err", "io", "er", "scan", "m", "url", "is", "con", "read", "input", "min", "gen", "p", "isin", "win", "f", "IN", "inn", "image", "In", "ini", "s", "up", "cl", "pin", "g", "lin", "ai", "reader", "buffer", "source", "ins"], "out": ["inner", "again", "doc", "page", "builder", "table", "client", "OUT", "m", "msg", "w", "up", "output", "gen", "list", "temp", "co", "path", "outs", "line", "user", "flush", "global", "println", "group", "io", "input", "key", "f", "wave", "dump", "window", "full", "self", "exp", "res", "name", "error", "resource", "call", "by", "p", "home", "dot", "view", "print", "block", "ext", "Out", "buffer", "object", "pool", "file", "bin", "part", "err", "report", "array", "v", "prefix", "outer", "session", "ex", "obj", "lock", "cache", "IN", "o", "parent", "log", "size", "op", "writer", "write"], "N": ["Q", "J", "Ns", "F", "NM", "NL", "NB", "Num", "A", "Node", "Number", "T", "B", "NE", "Y", "NT", "NS", "R", "L", "ND", "K", "Len", "C", "O", "NC", "MN", "D", "NA", "M", "S", "Z", "V", "X", "NN", "P", "Size", "I", "G"], "max": ["nd", " Max", "d", "limit", "count", "Max", "std", "cr", "m", " MAX", "MAX", "min", "NT", "k", "NS", "ND", "K", "D", "ax", "Z", "num", "X", "all", "rand", "res"], "dr": ["Dr", "DR", "rec", "rs", "err", "dp", "cr", "dist", "rr", "ga", "dt", "ds", "hr", "dim", "rid", "arr", "rc", "grad", "cur", "di", "rd", "disc", "fr", "da", "du", "mc", "rank", "rg"], "dc": ["sc", "cu", "enc", "ct", "dm", "bc", "cd", "dp", "fc", "uc", "dB", "abc", "ec", "cc", "circ", "ga", "dt", "desc", "ds", "dn", "rc", "cm", "di", "disc", "da", "pc", "ci", "DC", "mc"], "grid": ["Grid", "rank", "layer", "file", "model", "vg", "line", "move", "query", "build", "util", "unit", "house", "node", "rule", "cube", "table", "group", "server", "client", "play", "draw", "square", "iq", "graph", "script", "style", "chain", "dim", "reg", "cell", "age", "cache", "row", "module", "column", "range", "tree", "align", "status", "block", "edge", "card"], "bishopr": ["ishopm", "ishopc", " bishopp", "bishopR", "ishopr", "ishoppr", "ishopp", "cairc", "itectm", "cairpr", "itectR", " bishopR", "bishoppr", "bishopm", "ishopR", "itectp", "cairr", " bishopm", "bishopp", "itectr", "cairp", " bishoppr"], "bishopc": [" bishopdc", "ishopc", "ishopn", " bishopcr", "ishopr", " bishopw", "ishopw", "bishopw", "plaincr", "ishopdc", "plainr", "fredr", "bishopcr", "plainc", "freddc", "bishopn", "fredw", "ishopcr", "fredc", "plainn", " bishopn", "bishopdc"], "H": ["Q", "RR", "SH", "CH", "h", "F", " h", "E", "HC", "GH", "RH", " C", "HR", "T", "B", "Y", "R", "L", "K", "HI", "C", "O", "D", "M", "HS", "HA", "U", "S", "Z", " R", "V", "X", "HE", "P", "HH", "I", "G"], "W": ["MW", "Q", "WP", "F", "E", "WC", "WT", "T", " w", "B", "VW", "WR", "Y", "We", "SW", "GW", "WA", "R", "L", "WB", "K", "C", "AW", "D", "WS", "M", "w", "U", "V", "X", "WE", "P", "DC", "Wh", "G"], "cnt": ["Cnd", " cNT", "cst", "lcNT", "ecct", " cnc", "ecst", "cnd", "lcst", "Cnc", "rcnc", " cst", "rcnt", "lcct", "lcnt", "CNT", "rcnd", "cct", "cnc", " cnd", "cNT", "rcNT", "Cnt", "ecNT", " cct", "ecnt"], "map": ["port", "one", "app", "move", "rule", "table", "pair", "m", "pack", "me", "ge", "use", "up", "record", "complete", "list", "MAP", "hash", "change", "open", "address", "line", "user", "group", "master", "type", "default", "down", "style", "match", "data", "index", "wave", "ap", "trans", "ms", "copy", "work", "scope", "pose", "maps", "apper", "mer", "save", "batch", "age", "per", "comb", "replace", "view", "parse", "block", "message", "scale", "state", "place", "file", "model", "part", "array", "shape", "min", "prev", "bar", "lock", "cache", "cap", "module", "dict", "pad", "code", "set", "stage", "size", "where"], "n": ["enc", "j", "none", "nn", "syn", "conn", "nor", "sn", "ns", "d", "node", "z", "v", "m", "y", "en", "network", "t", "ln", "non", "k", "key", "e", "ne", "p", "cn", "f", "un", "o", "s", "adj", "fn", "rn", "l", "num", "u", "g", "null", "sign"], "r": ["sr", "RR", "yr", "h", "or", "rx", "d", "err", "ir", "er", "v", "m", "rar", "rr", "re", "e", "ur", "p", "R", "f", "q", "rl", "rc", "rh", "o", "pr", "w", "rd", "rn", "l", "x", "attr", "u", "ru", "ar", "rb", "rf", "res", "rg"], "c": ["sc", "can", "cu", "enc", "ch", "cf", "lc", "h", "d", "fc", "uc", "cr", "v", "z", "m", "ac", "con", "ec", "y", "cc", "k", "cn", "e", "cat", "p", "xc", "f", "q", "C", "ca", "o", "col", "w", "l", "cl", "pc", "x", "arc", "ci", "u", "cp", "mc", "co"], "i": ["id", "slice", "uni", "inner", "j", "pi", "I", "mi", "d", "ii", "cli", "ori", "v", "ix", "iv", "m", "io", "y", "gi", "jc", "index", "e", "p", "f", "qi", "ji", "ki", "ik", "ui", "xi", "li", "iu", "multi", "eni", "di", "ini", "oi", "yi", "ie", "chi", "ei", "si", "bi", "hi", "info", "x", "ci", "ni", "ti", "u", "fi", "ai", "uri"], "nr": ["sr", "nz", "nar", "yr", "nn", " ni", "nor", "sn", "rx", "nu", "ii", "nl", "adr", "ibr", "usr", "gr", "mn", "rr", "kr", "np", "nb", "ng", "nt", "cn", "dn", "mr", "nir", "rl", "NR", "rin", "wr", "cur", "byter", "range", "radius", "rn", "lr", "num", "nm", "ner", "nw", "nv", "ni", "ru", "rb", "rf", "rg"], "nc": ["nz", "enc", "nd", "lc", "nn", " ni", "conn", "ct", "sn", "ns", "bc", "inc", "uc", "nl", "cdn", "mn", "np", "nec", "ng", "nb", " ng", "nt", "cn", "ne", "unc", "dn", "rc", "anc", "NC", "na", "nin", "nic", "auc", "rn", "nm", "pc", "hn", "nw", "nv", "ci", "ni", "cv", "gn"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main {\\n  public static void main(String[] args) throws Exception {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int M = sc.nextInt();\\n    int resultEven =0;\\n    int resultOdd=0;\\n    if(N>1){\\n      resultEven=nCr(N,2);\\n    }\\n    if(M>1){\\n      resultOdd=nCr(M,2);\\n    }\\n    \\n    int result=resultEven+resultOdd;\\n    \\n    \\n    System.out.println(result);\\n  }\\n  static int nCr(int n, int r) \\n{ \\n    return (n*(n-1))/2;\\n} \\n  \\n// Returns factorial of n \\n \\n}\\n", "target": "49", "substitutes": {"sc": ["sw", "enc", "ch", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "ctx", "sp", "ser", "src", "ocr", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "pc", "exec", "ner", "ci", "asc", "mc", "sci"], "N": ["Q", "Ne", "J", "Ns", "F", "E", "NM", "NL", "Network", "NB", "H", "Count", "Name", "A", "Number", "T", "CNN", "NE", "B", "Y", "NT", "NS", "R", "L", "K", "Len", "C", "O", "NC", "MN", "D", "NA", "CN", "KN", "U", "S", "Z", "X", "NN", "V", "P", "Size", "I", "G"], "M": ["MC", "JM", "PM", "Mo", "Q", "DM", "IM", "J", "F", "E", "NM", "Mass", "MX", "Mi", "FM", "m", "Multi", "OM", "H", "MB", "T", "B", "Y", "R", "L", "AM", "K", "MM", "W", "C", "O", "MN", "D", "VM", "MR", "U", "S", "Z", "MQ", "V", "X", "P", "MS", "MD", "MI", "I", "G"], "resultEven": ["knowledgeEveryone", "ResultEven", "knowledgeeven", "ResultWell", "caseEven", "Resulteven", "answereven", " resulteven", "ResultEveryone", "resulteven", "caseeven", "resultOkay", " resultWell", "answerEven", "resultEveryone", "knowledgeEven", " resultEveryone", "ResultOkay", "resultWell", "caseOkay", " resultOkay", "answerWell"], "resultOdd": ["resultEdds", "resultOgg", "ResultDodd", " resultEdd", " resultEdds", "resultDodd", "ResultDogg", "resultDogg", "resultEOgg", "ResultOdd", "resultOOdd", "resultEOdd", "resultUodd", "resultoodd", "resultodds", "resultUdd", "resultUgg", " resultOgg", " resultEgg", "ResultDoodd", "resultOodd", "resultDoodd", "ResultOodd", "resultOld", "resultOdds", " resultOodd", "resultOOodd", "resultEOld", "ResultOld", " resultOdds", "resultOOld", "resultEOodd", " resultEodd", "ResultDold", "resultogg", "resultUdds", "resultDold", "resultDodds", "resultOOgg", "resultEdd", "ResultOgg", "resultodd", "resultEodd", "resultEgg"], "result": ["error", "math", "function", "length", "Result", "grade", "err", "ULT", "array", "report", "default", "response", "feature", "match", "current", "true", "ult", "value", "data", "ret", "number", "test", "our", "average", "cur", "expected", "pass", "score", "results", "valid", "diff", "success", "output", "complete", "done", "card", "work"], "n": ["j", "a", "len", "ns", "in", "d", "init", "no", "v", "z", "c", "m", "en", "y", "network", "nc", "mn", "nr", "k", "nt", "e", "ne", "p", "number", "f", "net", "o", "i", "l", "num", "x", "g", "u", "b"], "r": ["ri", "nor", "or", "ro", "rs", "err", "ry", "cr", "er", "c", "rr", "re", "nr", "ur", "p", "R", "mr", "rc", "row", "ra", "pr", "rd", "lr", "ner", "rt", "ar", "rb", "rf"]}}
{"code": "import java.io.*;\\npublic class Main {\\n\tpublic static void main (String[] args) throws IOException{\\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString line = reader.readLine();\\n\t\tString side[] = line.split(\" \");\\n\t\tint x = Integer.parseInt(side[0]);\\n\t\tint y = Integer.parseInt(side[1]);\t\\n\t\tint area = x * y;\\n\t\tint cir  = 2 * (x + y); \\n\t\tSystem.out.println(area + \" \" +cir);\\n\t}\\n}", "target": "92", "substitutes": {"reader": ["ler", "ri", "h", "file", "oder", "or", "in", "server", "er", "io", "content", "Reader", "r", "iter", "read", "input", "rr", "e", "editor", "context", "driver", "worker", "row", "feed", "i", "per", "ner", "parser", "her", "handler", "stream", "rer", "buffer", "writer", "source"], "line": ["sample", "lines", "one", "strip", "file", "body", "lane", "section", "str", "part", "page", "in", "Line", "rule", "header", "content", "split", "plus", "out", "ine", "data", "frame", "entry", "cell", "end", "LINE", "string", "row", "code", "l", "log", "handle", "status", "block", "lin", "inline", "source", "name"], "side": ["id", "one", "center", "left", "phase", "axis", "address", "ides", "loc", "section", " Side", "se", "grade", "ko", "location", "group", " sides", "pe", "split", "name", "plus", "board", "point", "shape", "size", "anch", "data", "ider", "zone", "frame", "partial", "string", "row", "ge", "direction", "route", "s", "scene", "Side", "plane", "ide", "info", "hide", "scale", "edge", "iden", "south", "sample", " part"], "x": ["pixel", "px", "base", "left", "loc", "h", "a", "height", "length", "xx", "yx", "rx", "fx", "angle", "ady", "d", "xy", "ip", "z", "ix", "c", "tx", "point", "index", "ex", "pos", "p", "n", "on", "width", "w", "ax", "i", "ya", "dx", "hi", "lex", "X", "size", "b"], "y": ["py", "yt", "yr", "h", "a", "height", "ady", "xy", "ry", "gy", "type", "z", "ny", "c", "yy", "t", "yo", "Y", "yd", "cy", "ty", "p", "n", "oy", "on", "bar", "ym", "ky", "ys", "vy", "col", "ey", "w", "i", "yi", "zy", "ya", "l", "yl", "dy", "ye", "b", "sy"], "area": ["id", "sea", "base", "loc", "issa", "section", "a", "bearing", "offset", "angle", "usa", "ha", "Area", "count", "flower", "location", "square", "z", "circle", "shape", "size", "zone", "division", "width", "large", "ca", "ra", "radius", "region", " areas", "lon", "sector", "qa", "aka", "scale", "south", "center"], "cir": ["incirt", "scIR", " cirt", "Cir", "Cira", "cira", "cIR", "cairo", "incira", "scira", "scairo", "incIR", "Cirt", " cairo", "Cairo", "CIR", "incir", "cirt", " cira", " cIR", "scir"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        boolean hasNextInt = scanner.hasNextInt();\\n        int x = scanner.nextInt();\\n        if(hasNextInt) {\\n            while(x > 0) {\\n                if(x % 10 == 7) {\\n                    System.out.println(\"Yes\");\\n                    break;\\n                } else {\\n                    x /= 10;\\n                }\\n                if(x == 0) {\\n                    System.out.println(\"No\");\\n                }\\n            }\\n        }\\n        scanner.close();\\n    }\\n}", "target": "99", "substitutes": {"scanner": ["Scancaster", "cancaster", "scaner", "Scanner", "aner", "scanener", "Scanener", "Scaninner", "analyinner", " scaninner", "canter", "analyner", "caninner", "caner", "canoder", " scanoder", "Scaner", "analyer", "Scanker", "Scanter", "analyter", "Scanoder", "scanker", "anner", "canker", " scanener", "canner", "scancaster", "scaninner", "scanter", "anker", " scancaster", " scaner", "canener", "anener", "scanoder"], "hasNextInt": [" hasPreviousInteg", "hasPrevInteger", "hasPreviousInteger", "haveNextINT", "hasnextInteg", "hasnextFloat", "hasNextINT", "HasNextInteger", "hasPreviousInteg", "hasNextint", "hasPreviousINT", "hasPrevFloat", "hasPreviousInt", " hasPreviousInt", " hasPreviousFloat", "HasPreviousFloat", "HasNextMedium", "haveNextint", "hasPrevMedium", "hasPrevInteg", " hasNextFloat", "hasnextInt", "hasPreviousint", " hasNextInteg", "haveNextInt", "HasPreviousInt", " hasNextInteger", "hasPrevInt", "hasnextInteger", "HasNextFloat", "HasNextInt", "hasNextInteger", "hasNextFloat", "hasFirstFloat", "hasFirstInt", "HasPreviousMedium", "HasPreviousInteger", "hasNextMedium", "haveNextFloat", "hasPreviousMedium", "hasPreviousFloat", "hasNextInteg", " hasPreviousInteger", "hasFirstINT", "hasnextMedium", "hasFirstint"], "x": ["id", "j", "wx", "h", "xx", "rx", "fx", "in", "d", "xy", "cross", "xt", "xxx", "z", "ix", "v", "c", "abc", "m", "y", "tx", "xf", "xs", "t", "index", "e", "number", "ex", "n", "pos", "p", "f", "ctx", "xc", "xp", "xi", "wa", "ww", "w", "ax", "i", "val", "code", "xe", "num", "cl", "dx", "lex", "X", "u", "xa", "expl"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tString str;\\n\t\tString[] arrStr;\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\ttry {\\n\\n\t\t\tfinal String sharp = \"#\";\\n\\n\t\t\twhile (true) {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t\tarrStr = str.split(\" \");\\n\\n\t\t\t\tint h = Integer.parseInt(arrStr[0]);\\n\t\t\t\tint w = Integer.parseInt(arrStr[1]);\\n\t\t\t\tif(h == 0 && w == 0){\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tfor (int i = 0; i<h; i++) {\\n\t\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\t\tsb.append(sharp);\\n\t\t\t\t\t}\\n\t\t\t\t\tsb.append(\"\\n\");\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(sb.toString());\\n\t\t\t\tsb.setLength(0);\\n\t\t\t}\\n\\n\t\t} catch (IOException e) {\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t}\\n}", "target": "87", "substitutes": {"br": ["sr", "ch", "yr", "cb", "body", "bro", "bc", "Br", "err", "bh", "bf", "ber", "BR", "cr", "io", "abs", "HR", "r", "gr", "tr", "img", "hr", "obj", "sp", "arr", "shr", "bp", "bar", "vr", "mr", "ocr", "cro", "bridge", "browser", "bs", "jar", "buf", "div", "lr", "fr", "brush", "handle", "dr", "bl", "rb", "b"], "str": ["sr", "enc", "Str", "st", "line", "in", "err", "ress", "c", "url", "r", "pt", "read", "STR", "input", "tr", "stri", "kr", "data", "e", "p", "n", "sp", "arr", "f", "src", "result", "string", "char", "pr", "s", "div", "fr", "strike", "text", "sl", "ner", "dr", "b", "source"], "arrStr": ["arrayBr", "arrExp", " arrString", "arrCh", " arrText", " arrExp", "arrayCh", " arrSt", "arrSt", "arSt", "arrayText", " arrCh", "arrstr", "arString", "arrayStr", "arBr", "arrayString", "arText", " arrBr", "arCh", " arrstr", "arExp", "arraySt", "arraystr", "arstr", "arrBr", "arrayExp", "arStr", "arrString", "arrText"], "sb": ["wb", "obb", "sth", "ib", "cb", "sg", "su", "bg", "zb", "rob", "abb", "lab", "bc", "sf", "sa", "xb", "bb", "bh", "ruby", "pb", "bsp", "bj", "lib", "bf", "gb", "sq", "split", "abi", "SB", "stab", "db", "erb", "nb", "BB", "sp", "mb", "bp", "ssl", "eb", "src", "kb", "bs", "s", "bm", "lb", "buff", "bt", "lr", "si", "bi", "sup", "fb", "bd", "sv", "bl", "rb", "bash", "b"], "sharp": [" bright", "sc", "slice", "spl", "ash", "single", " Sharp", "sword", " sh", " strict", " scr", "magic", "Sharp", "arrow", "split", "style", "sq", "spot", "spec", "match", "STR", "shift", "stri", "piece", "fast", "strong", " strip", "p", " style", "sp", "arr", "star", "string", " crisp", " smart", "bold", "smart", "primary", " src", "brush", "parse", "pattern", " bold", "raw", " sharper"], "h": ["id", "hh", "ch", "in", "ah", "d", "bh", "ha", "z", "v", "ht", "c", "head", "H", "oh", "y", "en", "ul", "he", "gh", "sh", "hr", "k", "e", "p", "n", "f", "q", "hm", "rh", "ph", "o", "hs", "l", "hi", "x", "dh", "u", "hp", "b"], "w": ["fw", "sw", "aw", "wx", "wh", "d", "hw", "z", "v", "c", "y", "sh", "wp", "k", "e", "wd", "p", "n", "ew", "f", "W", "wa", "width", "ws", "ww", "ow", "we", "l", "x", "u", "wall", "b", "work"], "i": ["id", "ri", "a", "pi", "I", "in", "mi", "ii", "ip", "z", "io", "v", "c", "ix", "y", "index", "phi", "e", "p", "n", "qi", "f", "ji", "ik", "ui", "xi", "li", "iu", "it", "o", "di", "ini", "oi", "chi", "si", "hi", "x", "ci", "u", "ni", "ai", "b"], "j": ["ja", "J", "js", "ij", "d", "jj", "ii", "z", "v", "ix", "c", "y", "jl", "jc", "k", "key", "e", "p", "n", "obj", "f", "qi", "ji", "aj", "end", "q", "ui", "li", "it", "o", "ie", "adj", "l", "si", "x", "jo", "u", "oj", "g", "jp", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String a[]){\t\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\twhile(scanner.hasNext()){\\n\t\t\tint b = scanner.nextInt();\\n\t\t\tint c = scanner.nextInt();\\n\t\t\tint s = b+c;\\n\t\t\tint d = 0;\\n\t\t\twhile(s!=0){\\n\t\t\t\ts = s/10;\\n\t\t\t\td++;\\n\t\t\t}\\n\t\t\tSystem.out.println(d);\\n\t\t}\\n\t\tscanner.close();\\n\t}\\n}\\n\\n", "target": "176", "substitutes": {"a": ["Str", " fa", "Args", "ata", "en", "Input", "Name", "A", "input", "es", " chars", "data", "e", "f", "Array", "string", " A", "as", "Info", "i", "buf", "Address", " p"], "scanner": ["inner", "scanNER", "inNER", "annner", "scaner", "Scanner", "scanener", "ininner", "verker", "Scanener", "Scaninner", "hanner", "annener", "scanator", "anninner", "ancher", "canter", "hanker", "anter", "statinner", "analyner", "caninner", "caner", "statker", "annker", "inator", "Scanker", "canator", "verner", "haninner", "stater", "Scanter", "analyener", "analyter", "scanker", "anner", "statner", "canker", "Scanator", "canner", "verter", "verener", "canNER", "hanener", "scaninner", "scanter", "cancher", "analycher", "scancher", "analyker", "canener", "anener", "ScanNER"], "b": ["j", "ba", "h", "ab", "abb", "bb", "pb", "bf", "z", "v", "m", "r", "y", "db", "B", "nb", "k", "e", "p", "n", "f", "bp", "eb", "bs", "o", "w", "i", "sb", "lb", "l", "bi", "fb", "x", "u", "rb"], "c": ["cu", "cf", "lc", "h", "cd", "count", "uc", "z", "v", "ac", "r", "y", "nc", "cc", "k", "e", "cy", "p", "n", "f", "dc", "C", "col", "w", "i", "cs", "l", "x", "ci", "u", "g"], "s": ["id", "ns", "se", "ss", "ps", "z", "v", "sq", "is", "m", "start", "south", "os", "db", "t", "es", "data", "ds", "k", "e", "p", "n", "f", "dy", "sd", "bs", "o", "sb", "i", "cs", "S", "l", "si", "sl", "dos", "sv", "u", "ls", "size", "ts"], "d": ["id", "j", "Ds", "cd", "dd", "dp", "md", "fd", " dd", "std", "dB", "z", "v", "m", "db", "t", "dt", "dl", "ds", "k", "ad", "e", "ded", "p", "n", "f", "df", "dc", "dat", "sd", "D", "o", "di", "i", "l", "dx", "da", "dos", "u", "dy", "done"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    new Main().run();\\n  }\\n\\n  private FastScanner sc;\\n  private Scanner scc;\\n\\n  private void run() {\\n    sc = new FastScanner();\\n    int N = sc.nextInt();\\n    int X = sc.nextInt();\\n\\n    int next = 0;\\n    int count = 0;\\n    for (int i = 0; i < N; i++) {\\n      int tmp = sc.nextInt();\\n      next += tmp;\\n      if (X < next) {\\n        break;\\n      }\\n      count++;\\n    }\\n\\n    System.out.println(count + 1);\\n  }\\n}\\n\\n\\nclass FastScanner {\\n  private final InputStream in = System.in;\\n  private final byte[] buffer = new byte[1024];\\n  private int ptr = 0;\\n  private int buflen = 0;\\n\\n  private boolean hasNextByte() {\\n    if (ptr < buflen) {\\n      return true;\\n    } else {\\n      ptr = 0;\\n      try {\\n        buflen = in.read(buffer);\\n      } catch (IOException e) {\\n        e.printStackTrace();\\n      }\\n      if (buflen <= 0) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  private int readByte() {\\n    if (hasNextByte())\\n      return buffer[ptr++];\\n    else\\n      return -1;\\n  }\\n\\n  private static boolean isPrintableChar(int c) {\\n    return 33 <= c && c <= 126;\\n  }\\n\\n  public boolean hasNext() {\\n    while (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n      ptr++;\\n    return hasNextByte();\\n  }\\n\\n  public String next() {\\n    if (!hasNext())\\n      throw new NoSuchElementException();\\n    StringBuilder sb = new StringBuilder();\\n    int b = readByte();\\n    while (isPrintableChar(b)) {\\n      sb.appendCodePoint(b);\\n      b = readByte();\\n    }\\n    return sb.toString();\\n  }\\n\\n  public long nextLong() {\\n    if (!hasNext())\\n      throw new NoSuchElementException();\\n    long n = 0;\\n    boolean minus = false;\\n    int b = readByte();\\n    if (b == '-') {\\n      minus = true;\\n      b = readByte();\\n    }\\n    if (b < '0' || '9' < b) {\\n      throw new NumberFormatException();\\n    }\\n    while (true) {\\n      if ('0' <= b && b <= '9') {\\n        n *= 10;\\n        n += b - '0';\\n      } else if (b == -1 || !isPrintableChar(b)) {\\n        return minus ? -n : n;\\n      } else {\\n        throw new NumberFormatException();\\n      }\\n      b = readByte();\\n    }\\n  }\\n\\n  public int nextInt() {\\n    long nl = nextLong();\\n    if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n      throw new NumberFormatException();\\n    return (int) nl;\\n  }\\n\\n  public double nextDouble() {\\n    return Double.parseDouble(next());\\n  }\\n}\\n", "target": "130", "substitutes": {"sc": ["sw", "sr", "cont", "lc", "soc", " Sc", "cer", "ct", "scl", "Sc", " SC", "bc", "scope", "SC", "sf", "se", "ss", "cli", "fc", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "spec", "settings", "tc", "ec", "sub", "cc", "sh", "sec", "cus", "core", "ctx", "sp", "dc", "src", "acc", "zero", "rc", "ca", "cur", "cs", "go", "si", "cl", "parse", "pc", "ner", "exec", "RC", "ci", "asc", "cv", "mc", "sci"], "scc": [" scca", " ssc", "oscc", " sci", "ssci", "scca", "oscca", "ossc", "sscca", "osci", "ssc", "sssc", "sscc", "sci"], "N": ["Q", "J", "NO", "F", "NL", "NB", "Num", "H", "Count", "T", "Y", "NT", "NS", "R", "L", "K", "W", "C", "O", "NC", "MN", "D", "NA", "M", "Z", "S", "V", "NN", "P", "I", "G"], "X": ["Q", "J", "F", "length", "Next", "fix", "ix", "XP", "Num", "H", "Count", "XXX", "MAX", "T", "size", "Y", "index", "NS", "number", "R", "batch", "L", "K", "max", "W", "O", "C", "D", "skip", "M", "U", "Z", "S", "IP", "x", "V", "P", "ID", "first", "Size", "step", "IX", "XX", "I"], "next": ["id", "cmp", "open", "object", "iterator", "length", "Next", "str", "offset", "step", "page", "latest", "limit", "quote", "last", "pointer", "start", "prefix", "future", "current", "now", "second", "position", "name", "sec", "big", "index", "data", "nr", " Next", "nt", "number", "p", "continue", "prev", "string", "li", "seq", "char", "multi", "test", "sequence", "code", "later", "x", "append", "text", "first", "size", "bytes", "get", "total", "write"], "count": ["id", "close", "base", "left", "counter", "length", "other", "force", "ind", "child", "last", "start", "now", "second", "Count", "iter", "current", "progress", "index", "data", "nt", "e", "batch", "p", "number", "f", "cond", "age", "end", "max", "cycle", "more", "active", "seq", "test", "low", "coll", "col", "code", "sum", "weight", "x", "first", "size", "race", "total"], "i": ["id", "uni", "inner", "j", "pi", "I", "ii", "ip", "v", "ix", "abi", "m", "gi", "phi", "p", "qi", "f", "ji", "ui", "xi", "li", "multi", "di", "ini", "oi", "ie", "si", "bi", "info", "zi", "x", "ci", "ni", "u", "uri", "fi", "ai", "ti"], "tmp": ["cmp", "cpp", "pp", "iterator", "nn", "su", "part", "xxx", "area", "done", "m", "now", "yy", "dest", "shift", "img", "np", "nb", "qq", "proc", "nt", "obj", "bp", "acc", "mm", "li", "seq", "test", "pad", "buf", "ie", "kk", "ff", "sup", "mp", "qa", "cp", "rb", "temp"], "in": ["inner", "path", "login", "h", "a", "bin", "resource", "d", "inc", "din", "err", "io", "is", "m", "r", "this", "out", "con", "reading", "read", "input", "min", "data", "re", "ex", "p", "win", "f", "isin", "arin", "ssl", "lock", "IN", "rin", "inn", "inf", "ic", "as", "connection", "image", "In", "ini", "s", "readable", "l", "cl", "pin", "lin", "socket", "reader", "source", "ins"], "buffer": ["slice", "Buffer", "base", "address", "layer", "counter", "file", "document", "length", "comment", "bin", "memory", "resource", "device", "bb", "flush", "array", "table", "limit", "header", "border", "server", "seed", "url", "position", "iter", "shape", "input", "request", "value", "data", "padding", "available", "batch", "bar", "queue", "cache", "bytes", "result", "reference", "binary", "window", "stack", "image", "uffer", "pad", "buff", "buf", "uf", "variable", "code", "append", "block", "output", "message", "sequence", "reader", "source"], "ptr": ["cf", "len", "addr", "fd", "uint", "pend", "fe", "pos", "coord", "patch", "attr", "sth", "address", "Ptr", "lf", "ct", "pointer", "inter", "tc", "tr", "pull", "index", "padding", "ctr", "cur", "buff", "buf", "ref", "mp", "rt", "cp", "depth", " pointer", "length", "ft", "offset", "td", "const", "nt", "p", "br", "rc", "lr", "fr", "pc", "pointers", "dr", "ext", "etr", "prot", "inst", "cmp", "loc", "tp", "str", "xt", "pt", "dest", "shift", "pty", "t", "push", "req", "ctx", "src", "wr", "pad", "code", "pl", "handle", "size"], "buflen": ["bufallend", "bulfens", "bafline", "bulfEN", "bufallen", "Buflen", "buclan", "bucelaren", "huflan", "Buvelan", "BUFln", "BuvelEN", "huflen", "buFline", "bullens", "bufalline", "buFlen", "buvelEN", "baflaren", "buFln", "baFlend", "bullen", "huplan", "buplen", "buclEN", "bullent", "Buflan", "buceline", "baflen", "BUflent", "buFlaren", "baFlaren", "hufln", "buclen", "buFllen", "bullEN", "buFlent", "BUFlent", "BUFlen", "bucelend", "baFline", "baFlen", "bulfen", "huplen", "BUfllen", "bufline", "bulln", "bupln", "buplan", "bullan", "buflaren", "huplEN", "buflent", "buvelen", "buFlend", "BUfln", "buflend", "bulfan", "bufllen", "Buvelens", "BUFllen", "buflEN", "BUflen", "huflEN", "buflan", "bulllen", "hupln", "buplEN", "bucln", "bufallaren", "buplent", "bucelen", "BuflEN", "buflens", "bufln", "baflend", "Buvelen", "buvelan", "bupllen", "Buflens", "buvelens"], "c": ["enc", "ch", "cu", "lc", "h", "ct", "d", "fc", "uc", "z", "cr", "v", "abc", "m", "ac", "ec", "nc", "ce", "cc", "k", "e", "cy", "p", "xc", "f", "dc", "max", "rc", "cm", "C", "ca", "col", "w", "s", "cs", "code", "l", "cl", "pc", "x", "ci", "g", "u"], "sb": ["wb", "obb", "sth", "ib", "lp", "cb", "bg", "zb", "sg", "orb", "rob", "abb", "bc", "sf", "sa", "xb", "bb", "bh", "bj", "pb", "bsp", "bf", "usb", "dB", "gb", "sq", "osc", "SB", "db", "nb", "BB", "mb", "bp", " eb", "kb", "eb", "bs", "bm", "lb", "bt", "fb", " SB", "bd", "rb"], "b": ["wb", "base", "ib", "h", "ab", "cb", "body", "a", "ba", "abb", "xb", "d", "bb", "bf", "z", "v", "abc", "ob", "abs", "m", "boot", "r", "y", "db", "B", "nb", "k", "e", "be", "p", "bar", "f", "mb", "bp", "bound", " eb", "eb", "bot", "br", "emb", "binary", "o", "lb", "s", "l", "fb", "x", "bd", "u", "bl", "rb", "bytes"], "n": ["j", "len", "sn", "ns", "d", "v", "z", "m", "r", "nc", "t", "ln", "nb", "e", "number", "p", "f", "pn", "o", "l", "num", "u"], "minus": ["little", "Big", " negative", "bad", "neg", " dec", "Plus", "negative", "bye", "plus", "sub", "min", "big", "Na", " mini", " digit", "partial", "digit", "zero", "Neg", "log", " sign", " boo", " neg", " plus", "sign", " digits"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        double sumaFraccion = 0;\\n        int n = in.nextInt();\\n        for (int i = 0; i < n; i++) {\\n            double Ai= in.nextDouble();\\n            sumaFraccion+= 1.0/Ai;\\n            \\n        }\\n        double resutlado = 1/sumaFraccion;\\n        System.out.println(resutlado);\\n    }\\n}", "target": "120", "substitutes": {"in": ["token", "inner", "login", "again", "doc", "conn", "file", "a", "str", "bin", "query", "rec", "init", "inc", "din", "err", "lib", "cli", "c", "is", "scan", "m", "r", "out", "con", "input", "serv", "re", "gen", "isin", "ex", "f", "win", "IN", "rin", "bis", "inn", "inf", "as", "connection", "pass", "In", "image", "ini", "readable", "nin", "container", "l", "log", "kin", "exec", "x", "g", "lin", "reader", "buffer", "b", "source", "ins"], "sumaFraccion": ["sumaFaccion", "sumaFlaccions", "sumaFrincion", "sumaFrAccione", "sumaFracions", "sumaFrccION", "sumaFrincation", "sumaBraccio", "sumaFaccio", "sumaFrancion", "sumaBraccation", "sumaFlacion", "sumaFlaccion", "sumaFancion", "sumaFracio", "sumaFrancione", "sumaBracION", "sumaFrAccao", "sumaFrincION", "sumaFrccation", "sumaFraccio", "sumaFlacione", "sumaFancio", "sumaFrccio", "sumaBracation", "sumaFancao", "sumaFrAccions", "sumaFraccione", "sumaFracation", "sumaFlacions", "sumaFrancions", "sumaFlaccION", "sumaFlacION", "sumaBracio", "sumaFraccation", "sumaFrAccio", "sumaBraccion", "sumaFrAccION", "sumaBraccION", "sumaFaccao", "sumaFrAccion", "sumaFracION", "sumaFracione", "sumaFaccION", "sumaFrancao", "sumaFrancION", "sumaFrancio", "sumaFraccao", "sumaFancION", "sumaFrincio", "sumaFlaccione", "sumaBracion", "sumaFracion", "sumaFraccION", "sumaFracao", "sumaFrccion", "sumaFraccions"], "n": ["j", "nn", "conn", "a", "pi", "sn", "ns", "d", "ii", "z", "c", "m", "en", "nc", "t", "nb", "k", "nt", "e", "ne", "p", "f", "net", "q", "inn", "na", "o", "w", "s", "nin", "N", "l", "num", "x", "u", "ni", "b"], "i": ["j", "ri", "pi", "mu", "mi", "ip", "ii", "z", "io", "ori", "abi", "y", "gi", "adi", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "eni", "di", "ini", "oi", "chi", "si", "bi", "hi", "zi", "ci", "u", "ni", "ti", "fi", "ai", "I", "vi"], "Ai": ["aui", "api", "Ii", "aasi", "auai", " Aoi", "aai", " Api", "Ppi", "Api", "Pai", "Ipi", "Aoi", "Ci", "AI", "Pasi", " AI", "aupi", "Ioi", "Pi", "CI", "II", "Aai", "Coi", "auasi", "Aasi", "Cpi", "ai"], "resutlado": ["resublada", "resutlcados", "resumlados", "resublaco", "resublados", "resutrado", "resumLada", "resutlaco", "resutliado", "resutrada", "resutllato", "resumlado", "resutllados", "resublado", "resublaada", "resutLato", "resutlcado", "resutrados", "resutlcato", "resutlada", "resutlaado", "resutlaados", "resutllado", "resutlaada", "resutLado", "resumLato", "resublaaco", "resutliada", "resublaados", "resumlato", "resumLados", "resutLada", "resutlcada", "resutlato", "resutLados", "resutliados", "resutraco", "resumLado", "resutlados", "resutliaco", "resutllada", "resumlada", "resutlaaco", "resublaado"]}}
{"code": "import java.util.*;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String date = sc.next();\\n        String[] info = date.split(\"/\");\\n        int year = Integer.parseInt(info[0]),\\n        month = Integer.parseInt(info[1]);\\n        if(year < 2019 || year == 2019 && month < 5){\\n            System.out.println(\"Heisei\");\\n        } else {\\n            System.out.println(\"TBD\");\\n        }\\n    }\\n}", "target": "163", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "sel", "uc", "cr", "esc", "c", "scan", "osc", "sync", "spec", "ec", "nc", "sec", "sh", "cc", "cus", "desc", "proc", "sp", "src", "ocr", "acc", "rc", "system", "cur", "cs", "cl", "pc", "ner", "parser", "asc", "stream", "sci"], "date": ["open", "format", "file", "line", "message", "str", "resource", "d", "user", "day", "md", "type", "start", "url", "match", "tag", "json", "event", "data", "Date", "index", "dates", "key", "number", "frame", "dat", "string", "next", "module", "range", "version", "code", "num", "config", "time", "output", "series", "update", "name"], "info": ["slice", "id", "py", "path", "fw", "error", "api", "loc", "fo", "check", "function", "part", "INFO", "about", "init", "array", "zip", "information", "start", "inter", "ok", "stat", "iso", "json", "hand", "data", "index", "home", "join", "bug", "off", "inf", "feed", "Info", "full", "i", "kid", "sum", "hi", "parse", "block", "auto", "list", "op", "bis", "source", "work"], "year": ["id", "quarter", "length", "century", "build", "period", "volume", "day", "season", "type", "style", "league", "element", "y", "tag", "ear", "core", "key", "ad", "number", "n", "oy", "age", "bug", "cycle", "string", "next", "years", "color", "course", "col", "week", "range", "Year", "category", "code", "country", "num", "time", "letter", "size", "name"], "month": ["id", "quarter", "market", "length", "family", "part", "page", "unit", "period", "volume", "season", "day", "method", "type", "m", "han", "months", "mon", "Month", "number", "bug", "span", "cycle", "hour", "week", "per", "sum", "patch", "time", "block", "name", "minute"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        char[] cl = sc.next().toCharArray();\\n        char[] chk = {'A','T','C','G'};\\n        int ans = 0;\\n        int now = 0;\\n        for(int i = 0; i < cl.length; i++){\\n            boolean bool = false;\\n            for(char c: chk){\\n                if(cl[i] == c){\\n                    bool = true;\\n                    break;\\n                }\\n            }\\n            if(bool){\\n                now++;\\n            }else{\\n                ans = Math.max(ans,now);\\n                now = 0;\\n            }\\n        }\\n        System.out.println(Math.max(ans,now));\\n    }\\n}\\n", "target": "100", "substitutes": {"sc": ["sw", "cont", "enc", "ch", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "scan", "osc", "spec", "sync", "search", "ec", "nc", "sec", "sh", "cc", "desc", "nt", "sp", "src", "acc", "rc", "system", "cs", "pc", "exec", "ner", "parser", "asc", "mc", "sci"], "cl": ["CL", "ch", "lc", "loc", "scl", "kl", "lic", "inc", "shell", "sel", "con", "cc", "sh", "expl", "p", "arch", "cell", "q", "acl", "cle", "char", "la", "seq", "cel", "ph", "coll", "col", "class", "cs", "el", "code", "l", "log", "comb", "Cl", "pl", "sl", "block", "bl", "ll", "list", "fl"], "chk": ["cherok", "charck", "check", "echks", "Chak", "chak", "cheok", "Chk", "cherk", " chks", "chq", "cherq", " chak", " chq", "echk", "cherck", "chok", "chark", "charq", "echq", "chks", "charok", "Chks", "chck", "Chq", "echak", "cheq", "chek"], "ans": ["opens", "can", "lines", "anas", "aces", "anus", "outs", "ats", "a", "anne", "leans", "lan", "ons", "ns", "ens", "AN", "aning", "aus", "ss", "grades", "nas", "amps", "iana", "vers", "an", "ras", "ams", "ars", "ana", "os", "xs", "aned", "es", "ows", "cus", "offs", "cas", "anon", "ents", "ds", "anders", "ano", "ares", "ids", "ks", "arts", "ands", "anc", "ANS", "na", "ians", "s", "ays", "ends", "cs", "works", "ants", "eps", "nan", "ops", "auto", "ann", "annot", "ins"], "now": ["then", "small", "aw", "today", "always", "length", "soon", "or", "only", "count", "old", "last", "default", "way", "not", "plus", "of", "ok", "current", "this", "just", "aaaa", "Now", "hand", "early", "ager", "once", "quick", " NOW", "age", "after", "aj", "max", "off", "next", "currently", "ws", "found", "ww", "low", "stuff", "ow", "w", "we", "hack", "parent", "since", "before", "self", "later", "still", "NOW", "size", "post", "where", "never", "order"], "i": ["j", "iii", "api", "ri", "pi", "I", "in", "ii", "ip", "z", "v", "ix", "io", "ori", "y", "t", "gi", "index", "k", "e", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "multi", "eni", "b", "di", "ini", "oi", "ie", "si", "bi", "info", "ci", "ni", "u", "uri", "fi", "ai", "ti"], "c": ["cu", "enc", "ch", "cf", "lc", "h", "ct", " C", "fc", "uc", "cr", "v", "esc", "ac", "r", "ec", "nc", "ce", "cc", "chain", "k", "e", "cat", "p", "xc", "C", "ic", "ca", "cur", "o", "col", "s", "cs", "l", "ci", "u", "b"], "bool": ["can", "soft", "should", "always", "lean", "bc", "unit", "force", "bo", "bb", "array", "must", "count", "not", "sync", "false", "out", "boot", "ack", "ok", "true", "ool", "bit", "cond", "string", "binary", "filter", "ort", "allow", "ish", "olean", "val", "l", "flag", "null", "loop", "list", "fl", "b"]}}
{"code": "/*\\n* @Author Silviase(@silviasetitech)\\n* For ProCon\\n*/\\n\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.math.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        \\n        String s = sc.next();\\n        String t = sc.next();\\n        boolean b = false;\\n        for (int i = 0; i < s.length(); i++) {\\n            if ((s.substring(i) + s.substring(0,i)).equals(t)){\\n                b = true;\\n            }\\n        }\\n        if (b) {\\n            System.out.println(\"Yes\");\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n\\n        sc.close();\\n    }\\n\\n}", "target": "220", "substitutes": {"sc": ["sw", "ch", "cer", "Sc", "bc", "se", "SC", "scope", "sa", "sem", "com", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "nc", "cers", "sch", "cc", "sh", "cor", "cus", "sp", "src", "rc", "system", "anc", "gc", "sche", "ca", "cur", "coll", "sb", "cs", "pc", "exec", "ner", "ci", "asc", "parser", "cv", "mc", "sci"], "s": ["gs", "fs", "su", "a", "str", "js", "ns", "sf", "in", "d", "services", "ss", "ps", "sets", "v", "c", "is", "parts", "xs", "os", "input", "strings", "es", "qs", "ds", "e", "ses", "n", "p", "f", "ans", "string", "ws", "as", "o", "source", "sb", "cs", "S", "l", "si", "sl", "u", "g", "ls", "sv", "ts", "ins"], "t": ["token", "h", "st", "in", "template", "tf", "the", "type", "v", "at", "c", "txt", "r", "y", "T", "tr", "unt", "tt", "e", "p", "n", "f", "te", "string", "test", "target", "l", "wt", "x", "text", "u", "rt", "ant", "null", "temp", "ts", "name"], "i": ["id", "slice", "j", "ri", "a", "length", "pi", "mu", "part", "I", "in", "d", "ii", "ip", "z", "v", "io", "c", "start", "m", "ix", "abi", "r", "shift", "gi", "index", "data", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "di", "w", "ini", "oi", "chi", "l", "si", "bi", "hi", "x", "ci", "u", "ti", "uri", "mini", "ai"], "b": ["wb", "base", "ib", "ab", "cb", "h", "ba", "a", "abb", "aaa", "xb", "bc", "d", "bb", "bo", "bh", "pb", "bf", "abc", "v", "c", "ob", "r", "y", "db", "B", "nb", "e", "p", "n", "mb", "f", "eb", "emb", "bis", "bs", "o", "w", "sb", "bt", "lb", "l", "bi", "fb", "x", "bd", "u", "rb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int input = scan.nextInt();\\n        int A, B, C, D, a, b, c, d, e, f, g,h;\\n\\n        D = input % 10;\\n        input /= 10;\\n        C = input % 10;\\n        input /= 10;\\n        B = input % 10;\\n        input /= 10;\\n        A = input % 10;\\n        input /= 10;\\n\\n        a = A + B + C + D;\\n        b = A - B + C + D;\\n        c = A + B - C + D;\\n        d = A + B + C - D;\\n        e = A - B - C + D;\\n        f = A + B - C - D;\\n        g = A - B + C - D;\\n        h = A - B - C - D;\\n\\n        if (a == 7) {\\n            System.out.println(A + \"+\" + B + \"+\" + C + \"+\" + D +\"=7\");\\n        } else if (b == 7) {\\n            System.out.println(A + \"-\" + B + \"+\" + C + \"+\" + D +\"=7\");\\n        } else if (c == 7) {\\n            System.out.println(A + \"+\" + B + \"-\" + C + \"+\" + D+\"=7\");\\n        } else if (d == 7) {\\n            System.out.println(A + \"+\" + B + \"+\" + C + \"-\" + D+\"=7\");\\n        } else if (e == 7) {\\n            System.out.println(A + \"-\" + B + \"-\" + C + \"+\" + D+\"=7\");\\n        } else if (f == 7) {\\n            System.out.println(A + \"+\" + B + \"-\" + C + \"-\" + D+\"=7\");\\n        } else if (g == 7) {\\n            System.out.println(A + \"-\" + B + \"+\" + C + \"-\" + D+\"=7\");\\n        }else if (h == 7) {\\n            System.out.println(A + \"-\" + B + \"-\" + C + \"-\" + D+\"=7\");\\n        }\\n    }\\n}", "target": "152", "substitutes": {"scan": ["sc", "can", "sr", " scanner", "sys", "bin", "query", "util", "se", "in", "err", "server", "an", "sync", "iter", "r", "out", "search", "read", "stat", "sub", "con", "vis", "gen", "cat", "n", "win", "walk", "system", "run", "skip", "conf", "l", "Scan", "store", "parse", "ner", " Scan", "parser", "ann", "ai", "reader", "get", "serv"], "input": ["path", "format", "inner", "back", "amp", "address", "error", " Input", "form", "file", "length", "bin", "audio", "in", "http", "focus", "inc", "array", "PUT", "count", "xxx", "type", "current", "iter", "Input", "out", "shift", "request", "pull", "img", "event", "session", "index", "data", "batch", "alpha", "submit", "integer", "context", "dc", "accept", "q", "ahead", "but", "inf", "feed", "image", "raw", "upload", "work", "U", "keep", "num", "view", "sum", "everything", "text", "qa", "select", "output", "depth", "action", "source", "enter"], "A": ["EA", "Ex", "Ma", "Input", "You", "T", "mA", "Array", "Wa", "API", "In", "LA", "X", "P", "OA", "AL", "AC", "As", "An", "AE", "The", "AS", "Area", "AD", "File", "H", "App", "O", "Ar", "CA", "NA", "Az", "M", "N", "V", "TA", "AU", "J", "F", "E", "All", "MA", "Ab", "IA", "Y", "SA", "This", "L", "AM", "S", "Adam", "Australia", "Ca", "It", "I", "Auth", "Am", "AR", "AB", "AP", "AA", "Alpha", "PA", "ad", "Ha", "K", "BA", "FA", "W", "True", "Info", "At", "HA", "AH", "U", "Java", "There", "G"], "B": ["Ber", "BI", "Q", "CL", "AR", "J", "F", "E", "LB", "EB", "Be", "I", "DB", "BT", "AB", "Ab", "AD", "Bi", "BF", "H", "T", "Bs", "TB", "Bu", "Y", "BB", "R", "L", "WB", "K", "BA", "W", "BC", "O", "GB", "M", "Pl", "U", "Z", "S", "N", "OB", "X", "V", "BE", "P", "G"], "C": ["CF", "Q", "CH", "Cs", "F", "E", "Sc", "SC", "Can", "CD", "CU", "CS", "Con", "Ch", "H", "Co", "Count", "T", "CNN", "Y", "CE", "Col", "R", "L", "CT", "CM", "K", "YC", "W", "CR", "CI", "Cu", "O", "CA", "VC", "EC", "CC", "M", "CP", "U", "S", "N", "Ca", "X", "V", "P", "DC", "I", "G", "AC"], "D": ["Q", "DA", "DM", "Di", "DD", "F", "Da", "E", "Ds", "DR", "FD", "I", "DB", "CD", "Daniel", "AD", "DH", "H", "Do", "T", "Del", "DO", "Y", "De", "R", "Def", "L", "DT", "W", "O", "Day", "M", "U", "Z", "DI", "N", "S", "X", "V", "P", "DF", "DC", "MD", "DS", "Part", "G"], "a": ["aw", "ba", "ab", "ai", "aa", "sa", "am", "an", "at", "m", "ac", "area", "y", "ad", "ak", "p", "n", "aj", "ca", "as", "ap", "o", "w", "s", "i", "da", "au", "ae", "af", "u", "ar"], "b": ["wb", "j", "ba", "ab", "ib", "cb", "bc", "aa", "bh", "v", "r", "y", "db", "t", "Bs", "BB", "ad", "be", "p", "n", "eb", "ca", "bs", "o", "s", "sb", "i", "l", "bi", "x", "bd", "u", "bl", "rb"], "c": ["sc", "can", "ch", "cf", "z", "v", "m", "ac", "r", "y", "ec", "con", "ce", "t", "cc", "k", "ad", "cy", "p", "n", "dc", "q", "cm", "ca", "o", "w", "s", "i", "cs", "l", "x", "ci", "u", "DC"], "d": ["j", "cd", "dd", "in", "z", "m", "r", "y", "db", "ld", "t", "dt", "ds", "ad", "p", "n", "df", "dc", "q", "o", "di", "w", "i", "l", "da", "dh", "x", "u", "dy"], "e": ["j", "ed", "E", "se", "pe", "z", "v", "an", "m", "r", "ee", "y", "ec", "en", "ce", "sh", "fe", "ne", "p", "n", "ea", "be", "eb", "q", "ev", "o", "w", "oe", "i", "ie", "el", "l", "x", "em", "ae", "u"], "f": ["fg", "j", "cf", "F", "fa", "in", "err", "bf", "z", "v", "m", "r", "y", "t", "sh", "fe", "k", "p", "n", "df", "q", "o", "w", "s", "i", "ie", "ff", "l", "fr", "x", "af", "u", "fl"], "g": ["j", "gs", "err", "ig", "group", "z", "v", "an", "m", "r", "y", "eg", "gh", "sh", "ga", "gi", "k", "p", "n", "q", "gg", "ge", "o", "w", "s", "i", "l", "go", "x", "u", "gen", "mc", "G"], "h": ["hh", "j", "ch", "ah", "bh", "z", "v", "m", "H", "y", "r", "oh", "t", "he", "sh", "gh", "hr", "phi", "k", "p", "n", "q", "ph", "o", "w", "th", "i", "l", "hi", "x", "u"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tlong[] A = new long[N];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tA[i]=sc.nextInt();\\n\t\t}\\n\t\tlong check = 0;\\n\t\tfor(int i=1;i<N;i++) {\\n\t\t\tif(A[i-1]>A[i]) {\\n\t\t\t\tcheck += A[i-1]-A[i];\\n\t\t\t\tA[i] = A[i-1];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(check);\\n\\n\t}\\n}\\n", "target": "202", "substitutes": {"sc": ["cont", "lc", " Sc", "str", "or", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "ss", "lib", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "out", "ec", "search", "nc", "sch", "cc", "sh", "sec", "sp", "src", "rc", "system", "anc", "sche", "cur", "class", "cs", "l", "cl", "pc", "ner", "asc", "g", "cv", "sci"], "N": ["Ni", "Ne", "J", "Ns", "F", "E", "No", "Part", " n", "NB", "Num", "H", "Number", "Node", "T", "B", "NE", "Y", "NT", "NS", "n", "R", "L", "K", "NR", "W", "Len", "C", "O", "NC", "NA", "D", "M", "Z", "S", "X", "V", "NN", "P", "Size", "I"], "A": ["Total", "As", "An", "AR", "a", "F", "Next", "E", "First", "MA", "array", "The", "AS", "AP", "AA", "Action", "Input", "Ma", "T", "Alpha", "B", "Y", "SA", "Na", "This", "Ha", "Access", "Array", "AM", "L", "alpha", "API", "BA", "O", "CA", "Ar", "NA", "C", "At", "D", "HA", "II", "M", "U", "S", "Adam", "Java", "Address", "LA", "X", "P", "Average", "None", "I", "AC"], "i": ["id", "j", "api", "ri", "a", "ami", "pi", "mu", "page", "in", "mi", "init", "ip", "ii", "cli", "z", "v", "ix", "io", "start", "m", "c", "abi", "y", "gi", "index", "phi", "key", "e", "p", "n", "anti", "f", "qi", "ji", "ki", "ui", "xi", "li", "next", "iu", "it", "multi", "o", "b", "di", "ini", "isi", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "ti", "ai", "I"], "check": ["id", "base", "checked", "error", "correct", "length", "fix", "d", "no", "count", "call", "c", "scan", "Check", "match", "ok", "out", "read", "y", "clean", "see", "sync", "ck", "fail", "stat", "value", "pack", "index", "k", "number", "add", "n", "f", "max", "it", "test", "w", "CHECK", "num", "common", "ignore", "set", "info", "x", "print", "block", "valid", "diff", "load", "all", "update", "name", "work"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        //t=\u592a\u90ce\u3001h=\u82b1\u5b50\\n        String t,h;\\n        int score_t=0;\\n        int score_h=0;\\n\\n        for(int i=0; i<n; i++){\\n            t = sc.next();\\n            h = sc.next();\\n            \\n            //\u540c\u5024\\n            if(t.compareTo(h) == 0){\\n                score_t += 1;\\n                score_h += 1;\\n            }\\n            //t>h\\n            else if(t.compareTo(h) > 0){\\n                score_t += 3;\\n            }\\n            //t<h\\n            else{\\n                score_h += 3;\\n            }\\n        }\\n        System.out.println(String.format(\"%d %d\",score_t,score_h));\\n\\n    }\\n\\n}\\n\\n", "target": "206", "substitutes": {"sc": ["sw", "soc", " Sc", "str", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "spec", "ec", "nc", "cc", "sh", "sec", "desc", "sp", "acc", "src", "rc", "system", "sche", "ca", "cs", "cl", "pc", "parse", "ner", "parser", "ci", "reader", "sci"], "n": ["j", "nn", "sn", "ns", "init", "count", "v", "z", "c", "m", "r", "nc", "ln", "nb", "k", "nt", "number", "p", "f", "it", "o", "s", "i", "N", "l", "num", " N", "b"]}}
{"code": "import java.util.Scanner;\\nimport java.io.IOException;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n\\n        Scanner sc = new Scanner(System.in);\\n        int s = Integer.parseInt(sc.next());\\n        int w = Integer.parseInt(sc.next());\\n        sc.close();\\n        String result = \"safe\";\\n        if (w >= s) {\\n            result = \"unsafe\";\\n        }\\n        System.out.println(result);\\n    }\\n}\\n", "target": "177", "substitutes": {"sc": ["sw", "cont", "sr", "ch", "enc", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "nc", "sch", "cc", "cus", "sp", "cle", "ocr", "src", "rc", "system", "sche", "cur", "cs", "pc", "parse", "ner", "ci", "asc", "cv", "mc", "sci"], "s": ["sw", "ips", "h", "a", "ns", "se", "d", "ss", "ps", "z", "v", "sq", "c", "aws", "spec", "r", "y", "xs", "os", "t", "es", "rows", "qs", "ds", "e", "ses", "n", "p", "f", "ks", "W", "less", "wa", "ws", "o", "i", "cs", "S", "l", "si", "u", "g", "ls", "scale", "ts"], "w": ["fw", "sw", "wb", "aw", "wx", "h", "wal", "wl", "wh", "d", "z", "v", "r", "y", "t", "wp", "k", "ew", "p", "n", "win", "q", "W", "wa", "width", "rw", "ws", "ww", "o", "ow", "kw", "l", "wt", "weight", "x", "wi", "nw", "g", "u", "work"], "result": ["format", "error", "su", "comment", "str", "page", "Result", "term", "err", "report", "effect", "method", "warning", "goal", "type", "default", "style", "description", "response", "res", "match", "current", "word", "out", "search", "feature", "r", "json", "true", "value", "func", "join", "acc", "string", "account", "test", "pass", "compl", "expected", "use", "prefix", "replace", "info", "results", "text", "status", "attr", "valid", "success", "message", "card", "name"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n\tpublic class Main {\\n\t\tpublic static void main(String[] args) {\\n\t\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\\n\\n\\n\t\t\t  try{\\n\\n\\n\t\t\t\t  String ab;\\n\t\t\t\t  String[] strAry;\\n\t\t\t\t  int a;\\n\t\t\t\t  int b;\\n\t\t\t\t  int c;\\n\t\t\t\t  int yaku;\\n\t\t\t\t  int count=0;\\n\\n\t\t\t\\n\t\t\t\t  ab = input.readLine();\\n\t\t\t      strAry = ab.split(\" \");\\n\t\t\t      a=Integer.parseInt(strAry[0]);\\n\t\t          b=Integer.parseInt(strAry[1]);\\n\t\t          c=Integer.parseInt(strAry[2]);\\n\\n\t\t\t\t  for(int i=a; i<=b; i++){\\n\t\t\t\t\t     yaku=c%i;\\n\t\t\t\t\t     \\n\t\t\t\t\t     if(yaku==0){\\n\t\t\t\t\t    \tcount++;\\n\t\t\t\t\t    \t\\n\t\t\t\t\t     }\\n\\n\\n\t\t\t\t   }\\n\t\t\t\t  System.out.println(count);\\n\\n\\n\t\t\t    }catch(IOException e) {   System.out.println(\"Exception : \" + e);\\n\t\t\t    }\\n\\n\t\t}\\n\t}", "target": "190", "substitutes": {"input": ["writer", "iterator", "IO", "form", "in", "http", "ruby", "server", "client", "io", "er", "url", "r", "this", "Input", "out", "read", "request", "pull", "control", "data", "loader", "f", "context", "ssl", "driver", "IN", "but", "inf", "connection", "image", "radio", "s", "l", "text", "parser", "stream", "output", "socket", "reader", "buffer", "temp", "source", "config"], "ab": ["ast", "tab", "base", "api", "app", "ib", "az", "abb", "lab", "am", "bb", "array", "ip", "pb", "AB", "Ab", "abc", "abi", "ob", "ub", "abs", "ac", "url", "r", "hab", "db", "BB", "abe", "acc", "fab", "eb", "br", "string", "abl", "bs", "feed", "s", "sb", " AB", "buf", "fb", "text", "af", "rb"], "strAry": ["strIry", "strIrys", "strPry", "strDries", "strNAri", "StrAries", "strUry", "strArry", "strLack", "strAscy", "strAsrey", "intAck", "StrDcy", "strPRY", "strLary", "intARY", "strDcy", "intAsri", "strPrey", "stracy", "strDry", "arrAyr", "strAyr", "strAsck", "strarys", "StrAsry", "strNArys", "strAsyr", "intArey", "arrAsyr", "strIRY", "strIyr", "intAsry", "StrAszer", "strAsri", "intAsrys", "strAszer", "strArys", "intAsrey", "strUcy", "arrAsry", "StrAsrys", "strAri", "intAry", "strArri", "StrDries", "strAcy", "strArrys", "strArcy", "strArries", "arrAsRY", "StrArys", "strARY", "StrAscy", "strNAry", "intAri", "arrArys", "strAsries", "StrAzer", "arrARY", "StrAry", "strUrys", "strArRY", "intAsck", "strAries", "intAsRY", "StrDrys", "strazer", "arrAsrys", "strAsrys", "strAsRY", "strUzer", "strary", "strArey", "StrAcy", "intArys", "strPck", "strDRY", "strLaRY", "strAzer", "strLarey", "strNARY", "strAck", "StrDry", "strDrys", "strAsry", "strDyr", "arrAry"], "a": ["api", "ba", "oa", "fa", "ma", "aa", "sa", "d", "am", "an", "area", "ac", "ia", "r", "A", "ga", "ada", "ad", "e", "p", "n", "ea", "f", "pa", "alpha", "aj", "la", "ca", "as", "va", "na", "s", "ama", "asa", "l", "da", "au", "ae", "aka"], "b": ["wb", "j", "base", "ib", "h", "cb", "ba", "bc", "aa", "d", "bb", "bf", "gb", "v", "ob", "ub", "r", "y", "db", "B", "e", "p", "n", "f", "eb", "end", "ca", "bs", "o", "s", "sb", "lb", "l", "fb", "x", "u", "rb"], "c": ["sc", "cu", "ch", "cf", "lc", "h", "d", "z", "v", "cr", "ac", "r", "y", "ec", "con", "ce", "cc", "k", "cn", "e", "cy", "p", "n", "f", "dc", "q", "C", "ca", "o", "w", "s", "code", "l", "x", "ci", "u", "g", "cp"], "yaku": ["yosuke", "oyogi", "syaki", "syagi", "yoko", "Yoko", "nyosuke", "myakra", "Yosuke", " yoko", "nyoko", "nyaku", " yosuke", "oyaku", "nyogi", "syaku", " yaki", "syoko", "myoko", "nyakra", "yaki", "Yagi", "nyaki", "oyoko", "myaku", "Yaki", " yagi", "oyakra", "myogi", "yakra", "yogi", "Yaku", "yagi"], "count": ["id", "ch", "base", "counter", "check", "length", "part", "offset", "force", "array", "limit", "child", "type", "z", "start", "second", "Count", "index", "data", "key", "number", "p", "age", "result", "cycle", "more", "char", "found", "test", "cur", "coll", "parent", "code", "sum", "weight", "info", "time", "depth", "size", "list", "total", "name", "work"], "i": ["id", "j", "ri", "length", "pi", "mu", "d", "ii", "ip", "z", "ix", "v", "y", "t", "gi", "index", "phi", "key", "e", "p", "f", "qi", "ui", "xi", "li", "iu", "it", "o", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "uri", "fi", "ai", "I"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner scan = new Scanner(System.in);\\n        System.out.println(scan.nextInt() > scan.nextInt() ? \"safe\" : \"unsafe\");\\n        scan.close();\\n    }\\n}", "target": "177", "substitutes": {"scan": ["sc", "can", "slice", "inner", "sin", " scanner", "app", "nn", "fan", "comment", "query", "se", "in", "cross", "ss", "server", "er", "an", "io", "start", "sync", "see", "match", "out", "search", "con", "stat", "read", "ln", "cat", "san", "plan", "n", "watch", "walk", "ans", "result", "span", "pan", "filter", "pass", "skip", "Scan", "log", "ignore", "parse", "exec", "ner", "parser", "ann", "all", "sign", "reader", "get", "source"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        int[] k = new int[n];\\n        int[] mm = new int[m];\\n        for (int i = 0; i < n; i++) {\\n            int kk = sc.nextInt();\\n            for (int j = 0; j < kk; j++) {\\n                mm[sc.nextInt() - 1]++;\\n            }\\n        }\\n        int ans = 0;\\n        for (int i = 0; i < m; i++) {\\n            if (mm[i] == n)\\n                ans++;\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "169", "substitutes": {"sc": ["sw", "sr", "cont", "ch", "enc", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "spec", "sync", "tc", "ec", "search", "nc", "sch", "cc", "sh", "cor", "cus", "ctx", "sp", "cle", "src", "rc", "system", "anc", "sche", "ca", "na", "cur", "coll", "sb", "cs", "cl", "exp", "pc", "parse", "ner", "exec", "ci", "asc", "cv", "mc", "sci"], "n": ["nn", "a", "sn", "ns", "in", "d", "no", "kn", "z", "v", "c", "an", "r", "en", "y", "nc", "t", "ln", "mn", "nb", "nr", "nt", "e", "number", "p", "f", "o", "w", "s", "N", "l", "num", "nm", "x", "nan", "u", "b"], "m": ["tm", "h", "dm", "fm", "in", "mi", "d", "md", "sm", "z", "v", "an", "c", "im", "r", "y", "mn", "e", "p", "f", "ym", "hm", "cm", "o", "km", "M", "w", "l", "num", "nm", "x", "u", "ms", "mc", "b"], "k": ["sk", "d", "dk", "kn", "c", "ok", "ck", "kr", "ak", "key", "e", "p", "f", "ks", "K", "q", "ik", "ki", "km", "w", "kw", "mk", "unk", "g", "mc"], "mm": ["mid", "man", "nn", "param", "ma", "dm", "mi", "am", "aid", "mma", "md", "sm", "im", "params", "mon", "mn", "ram", "gm", "mmm", "p", "mb", "mode", "ima", "ki", "ym", "q", "MM", "pm", "arm", "cm", "km", "M", "nm", "vm", "mp", "x", "mad", "ms", "auto", "my", "mc"], "i": ["id", "iii", "api", "ri", "ami", "pi", "in", "mi", "init", "ii", "ip", "z", "ix", "abi", "y", "gi", "e", "p", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "iu", "it", "eni", "o", "di", "ini", "ie", "oi", "yi", "l", "si", "bi", "hi", "info", "zi", "x", "ci", "ni", "u", "uri", "fi", "ai", "mini", "I"], "kk": ["ijk", "nn", "sk", "kl", "dk", "jj", "ii", "ka", "ko", "kn", "yk", "cki", "ck", "fff", "mn", "kr", "ak", "kj", "mmm", "ji", "ki", "ik", "ks", "cm", "ky", "km", "kid", "KK", "kw", "kin", "mk", "mph", "qa", "kg", "aka", "cp", "mc"], "j": ["ja", "J", "js", "ij", "job", "d", "jj", "bj", "ii", "z", "v", "ix", "y", "pt", "jl", "key", "p", "obj", "qi", "f", "ji", "aj", "ik", "q", "br", "xi", "li", "it", "o", "di", "ie", "l", "uj", "bi", "jo", "oj", "u", "jp", "b"], "nextInt": [" nextShort", " nextInteger", "NextExt", "lastInt", "lastLong", "NextShort", " nextINT", "lastint", "NextInteger", "lastExt", "lastShort", "prevLong", "openInt", "currentInteger", "nextint", "currentLong", "nextLong", "prevInteger", "Nextint", " nextLong", "nextExt", " nextExt", "currentShort", "NextInt", "NextLong", "openExt", "prevInt", "nextInteger", "lastInteger", "nextINT", "openINT", "currentInt", "nextShort", "prevShort", "NextINT", "openint", " nextint"], "ans": [" scans", "can", "anas", "nz", "ips", "nn", "ats", "a", "errors", "lan", "sk", "ns", "ens", "ons", "aid", "aus", "annis", "ss", "ps", "nas", "amps", "an", "params", "scan", "asts", "ars", "ana", "os", "aned", "acs", "mn", "es", "cas", "ds", "ents", "plan", "ids", "ks", "span", "anc", "ANS", "na", "as", "s", "acts", "cs", "ants", "x", "nan", "ms", "ann", "ls", "ai", "ins"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\tpublic static void main(String args[]) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str = br.readLine();\\n\t\tString[] a_b_c = str.split(\" \", 0);\\n\\n\t\tint a = Integer.parseInt(a_b_c[0]);\\n\t\tint b = Integer.parseInt(a_b_c[1]);\\n\t\tint c = Integer.parseInt(a_b_c[2]);\\n\\n\t\tint divisor = 0;\\n\\n\t\tfor (int i = a; i <= b; i++) {\\n\t\t\tif (c % i == 0) {\\n\t\t\t\tdivisor++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(divisor);\\n\t}\\n}", "target": "190", "substitutes": {"br": ["sr", "yr", "cb", "orb", "or", "bro", "Br", "bc", "bb", "err", "bh", "bf", "ber", "BR", "cr", "io", "ori", "rb", "abs", "HR", "r", "gr", "tr", "hr", "obj", "bar", "arr", "mr", "ocr", "bridge", "browser", "wr", "bs", "ref", "buf", "div", "fr", "bd", "dr", "bl", "reader"], "str": ["enc", "strip", "Str", "line", "st", "in", "err", "cr", "v", "er", "txt", "r", "out", "STR", "input", "tr", "sec", "stri", "data", "e", "p", "n", "sp", "f", "arr", "obj", "string", "char", "pr", "s", "div", "code", "fr", "text", "sl", "dr", "u"], "a_b_c": ["a_a_lc", "a_b2c", "a_b2lc", "a_b_f", "a_b__c", "a_b__v", "a_b_d", "a_b_v", "a_f_lc", "a_b_C", "a_b2b", "a_f_c", "a_f_d", "a_b_b", "a_a_f", "a_a_v", "a_f_b", "a_b__b", "a_a_C", "a_b2f", "a_a_c", "a_b__f", "a_b2d", "a_a_b", "a_b_lc"], "a": ["api", "ba", "ab", "oa", "art", "aaa", "aa", "sa", "d", "am", "an", "area", "ac", "A", "ga", "from", "ad", "e", "p", "n", "alpha", "f", "ea", "aj", "la", "va", "ca", "as", "o", "ama", "da", "au", "x", "ae", "u", "ai"], "b": ["wb", "j", "base", "ib", "h", "ab", "cb", "length", "or", "bc", "d", "bb", "z", "v", "r", "y", "B", "nb", "e", "p", "n", "f", "end", "bs", "o", "w", "s", "sb", "lb", "l", "x", "u"], "c": ["cu", "cf", "lc", "h", "d", "z", "v", "cr", "m", "ac", "r", "y", "ec", "nc", "cc", "k", "e", "unc", "p", "n", "cy", "f", "dc", "ca", "C", "ic", "o", "cs", "code", "l", "x", "arc", "ci", "u", "cp", "mc"], "divisor": ["dividand", "divisored", "dividour", "Dividored", "divideor", "divisator", "divideors", "divisors", "diviscors", "dividor", " diviscand", " divisori", "divisnor", "Divisour", "Dividour", " divisors", " diviscor", "divisour", " divisator", "divrition", "divisore", " divisand", "divisand", " divissor", "divission", "Divisored", "diviscnor", " divissors", "divissnor", "diviscand", "dividori", "diviscori", "divistand", "diviscore", "divistori", "Dividion", "divideator", "dividored", "division", " divissnor", " divissator", "Dividor", "Divisor", " diviscore", "divistor", "divissors", "divisori", "Division", "dividore", "diviscator", "divissor", "divritored", "divritour", "dividenor", " divisnor", "divistore", "divritor", "divissator", " divisore", "divissour", "dividion", "diviscor", " diviscori", "divissored"], "i": ["id", "slice", "inner", "j", "ri", "length", "pi", "I", "d", "ip", "ii", "z", "v", "io", "abi", "m", "ix", "gi", "index", "e", "p", "fi", "f", "qi", "end", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "oi", "ie", "l", "si", "bi", "hi", "x", "ci", "u", "ti", "ni", "uri", "ai"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        final int A = scan.nextInt();\\n        final int B = scan.nextInt();\\n        scan.close();\\n\\n        if ((A + B) % 2 == 0) {\\n            System.out.println((A + B) / 2);\\n        } else {\\n            System.out.println(\"IMPOSSIBLE\");\\n        }\\n    }\\n}", "target": "31", "substitutes": {"scan": ["sc", "can", "slice", "inner", "sr", "app", "nn", "look", "conn", "fan", "query", "se", "in", "report", "server", "connect", "an", "inter", "sync", "match", "out", "search", "read", "clean", "gen", "cat", "san", "n", "watch", "walk", "ans", "ser", "result", "span", "bug", "system", "car", "na", "pan", "feed", "run", "skip", "filter", "sort", "l", "Scan", "log", "parse", "ner", "ann", "all", "sign", "reader"], "A": ["DA", "AR", "a", "F", "EA", "E", "MA", "GA", "AB", "DATA", "AP", "Area", "AD", "AA", "IA", "Ma", "T", "Alpha", "AI", "Y", "mA", "PA", "SA", "L", "API", "BA", "FA", "O", "C", "CA", "NA", "D", "AW", "M", "HA", "II", "U", "S", "N", "Java", "Ca", "LA", "X", "AF", "P", "OA", "AL", "I", "AC"], "B": ["BI", "J", "F", "E", "LB", "DB", "CB", "AB", "BR", "Bi", "NB", "BF", "SB", "UB", "MB", "T", "Bs", "TB", "Y", "BER", "BB", "R", "L", "WB", "IB", "W", "BC", "O", "C", "GB", "D", "b", "M", "BS", "N", "OB", "V", "X", "P", "I", "G"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int hp = scanner.nextInt();\\n        int kinds = scanner.nextInt();\\n        int[] a = new int[kinds];\\n        for(int i = 0; i < kinds; i++) {\\n            a[i] = scanner.nextInt();\\n        }\\n        scanner.close();\\n \\n        int sum = 0;\\n        for(int _a : a) {\\n            sum += _a;\\n        }\\n \\n        System.out.println(hp <= sum ? \"Yes\" : \"No\");\\n    }\\n}", "target": "95", "substitutes": {"scanner": ["schening", "nerer", "scaner", "Scanner", "haner", "scanener", " scanizer", "hanner", "Scanener", "Scaninner", "canter", " scaninner", "hanker", "scheizer", "analyner", "caninner", "canizer", "caner", "scheinner", "schener", "scanper", "nerener", "Scaner", "canning", "Scanper", "analyer", "Scanker", "nerner", "haninner", " scanning", "Scanter", "analyener", "analyning", "scanning", "scanker", "canker", "scanizer", "canper", "canner", " scanper", "nerning", "scaninner", "scanter", "Scanning", " scaner", "canener", " scanter"], "hp": ["hh", "cpp", "php", "lp", "tp", "bh", "phy", "hw", "dp", "ha", "ht", "fp", "HP", "np", "gp", "wp", "jp", "hift", "padding", "igh", "bp", "hop", "pha", "ump", "hm", "pkg", "ahi", "hs", "uh", "aff", "sup", "mph", "hap", "cp", "prot"], "kinds": ["coles", "Kindp", "kindd", " kindi", "kindos", "acta", "Kindes", "indp", " kindos", " kindn", "actes", "kinda", "kindn", "Kinda", "indn", "inds", " kindes", "indi", "colos", " kindp", "kindp", "indos", "kindes", "indes", "acts", "kindi", "Kinds", " kinda", "Kindi", "cold", " kindd", "indd", "cols", "Kindn"], "a": ["ba", "ab", "h", "asha", "ma", "aa", "sa", "ata", "am", "aux", "array", "ha", "aura", "an", "area", "c", "ia", "A", "tta", "ga", "ea", "p", "pa", "alpha", "aj", "ar", "la", "wa", "va", "as", "na", "ca", "o", "s", "ama", "da", "au", "ae", "u", "ai", "b"], "i": ["id", "j", "ri", "pi", "mu", "in", "mi", "init", "ip", "ii", "z", "v", "abi", "start", "io", "m", "ix", "y", "gi", "index", "adi", "uli", "phi", "k", "e", "p", "n", "f", "qi", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "s", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "ni", "fi", "ai", "I"], "sum": ["open", "pool", "fill", "ash", "h", "su", "part", "offset", "ums", "cum", "sa", "Sum", "help", "summary", "count", "style", "spread", "sim", "miss", "min", "sh", "mean", "index", "ass", "beta", "p", "alpha", "sp", "pha", "max", "sym", "fat", "na", "tu", "ot", "ph", "average", "percent", "use", "up", "sign", "chi", "sup", "num", "si", "parse", "cost", "depth", "size", "um", "scale", "total"], "_a": [" _sa", "ixas", "ixai", "_e", " _e", "_au", "_sa", "_as", "ixa", " _au", " _as", " _ai", "_ai"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n        // \u6574\u6570\u306e\u5165\u529b\\n\t\tint a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int ans = 0;\\n        if (a + b == 3)\\n            ans = 3;\\n        else if (a + b == 4)\\n            ans = 2;\\n        else\\n            ans = 1;\\n\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "236", "substitutes": {"sc": [" rc", " scanner", " Sc", " ser", " app", "Sc", " SC", "se", "SC", " scr", "ss", "sq", " sm", "scan", " sp", " sl", " ans", " scorer", " ar", "sb", " src", " pars", "parser", "ann", " res", " surf", " arr"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t//List<String> list= new ArrayList<String>(Arrays.asList(s.split(\"\")));\\n\t\tList<Integer> list=new ArrayList<Integer>();\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tInteger[][] array = new Integer[n][m];\\n\t\tfor(int i=0;m>i;i++) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tlist.add(a);\\n\t\t}\\n\t\tfor(int i=0;n>i;i++) {\\n\t\t\tfor(int j=0;m>j;j++) {\\n\t\t\t\tint a = sc.nextInt();\\n\t\t\t\tarray[i][j]=a;\\n\t\t\t}\\n\t\t}\\n\t\tint count=0;\\n\t\tfor(int i=0;n>i;i++) {\\n\t\t\tint keisan=0;\\n\t\t\tfor(int j=0;m>j;j++) {\\n\t\t\t\tkeisan=keisan+list.get(j)*array[i][j];\\n\t\t\t}\\n\t\t\tif(keisan+c>0)\\n\t\t\t\tcount++;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n\\n", "target": "68", "substitutes": {"sc": [" rc", " Sc", " ser", "Sc", " SC", "sf", "SC", "sa", " res", " sk", " scr", "ss", "sq", "an", "scan", " sm", "SB", " cont", " sp", "sp", " annot", " ans", " scorer", " subp", "sb", " pars", "ann", " ann"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int[] a = new int[3];\\n        int five = 0;\\n        int seven = 0;\\n\\n        for(int i = 0; i < a.length; i++){\\n            // System.out.println(i + \"\u6587\u5b57\u76ee\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\");\\n            a[i] = sc.nextInt();\\n        }\\n        for(int i = 0; i < a.length; i++){\\n            if(a[i] == 5){\\n                five++;\\n            } else if(a[i] == 7){\\n                seven++;\\n            }\\n        }\\n        if(five == 2 && seven == 1){\\n            System.out.println(\"YES\");\\n        }else{\\n            System.out.println(\"NO\");\\n        }\\n\\n    }\\n}", "target": "16", "substitutes": {"sc": ["sw", "ch", " Sc", "sys", "Sc", "se", "sf", "SC", "sa", " scr", "ss", "sq", "an", "scan", "c", "nc", "ram", "ses", "sp", "src", "rc", "sb", "gram", "si", "parse", "g", "ann", "sci"], "a": ["aw", "ba", "ma", "fa", "ai", "aaa", "aa", "sa", "ata", "am", "array", "an", "area", "c", "ia", "ac", "A", "tta", "ga", "ea", "p", "alpha", "na", "va", "as", "ca", "w", "ama", "asa", "da", "ae", "auto", "u", "ar", "b", "sta"], "five": ["fifth", "one", "nine", "six", " six", "three", "fif", "four", " ten", " fifth", " four", "plus", "teen", "third", "zero", "xi", "two", " Five", "Five", "eight", "ten", " eight", "bi"], "seven": ["you", "one", "nine", "six", " six", " Seven", "Seven", "pe", "follow", " seventh", "rows", "third", "zero", "me", "row", "two", "eight", "umber", "into"], "i": ["j", "ri", "ami", "pi", "mu", "I", "in", "d", "ii", "z", "v", "abi", "c", "m", "gi", "ski", "index", "adi", "uli", "phi", "e", "p", "n", "fi", "f", "qi", "ui", "gu", "xi", "li", "multi", "di", "ini", "oi", "yi", "chi", "l", "si", "bi", "hi", "x", "zi", "ci", "ni", "u", "uri", "ti", "ai", "b"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n      String s = sc.next();\\n      int cnt1 = 0;\\n      int cnt2 = 0;\\n      for(int i = 0;i<s.length();i++){\\n         if(s.charAt(i)=='A'){\\n            cnt1++;\\n         }\\n         if(s.charAt(i)=='B'){\\n            cnt2++;\\n         }\\n      }\\n      if(cnt1>=1&&cnt2>=1){\\n          System.out.println(\"Yes\");\\n       }else{\\n           System.out.println(\"No\");\\n       }         \\n\t}\\n}\\n", "target": "76", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "iss", "c", "scan", "osc", "ec", "nc", "sch", "sec", "sh", "cor", "cus", "desc", "proc", "sp", "acc", "ocr", "rc", "system", "cs", "cl", "pc", "ner", "ci", "asc", "g", "mc", "sci"], "s": ["opens", "gs", "features", "h", "fs", "su", "a", "str", "ns", "in", "services", "ss", "c", "is", "abs", "plus", "os", "strings", "es", "states", "qs", "e", "ses", "n", "p", "f", "ans", "string", "bis", "ws", "as", "blocks", "pass", "b", "sb", "its", "S", "ts", "l", "si", "obs", "uses", "sl", "tests", "letters", "u", "ls", "sv", "source", "ins"], "cnt1": ["nrt5", "cno5", "cintOne", "lcnt3", "cct91", "lcintOne", "crt2", "count1", "nnt2", "pnt01", "crt1", "lcint3", "cint01", "nnt1", "cntone", "nntone", "pnt3", "pint1", "cint3", "cnt91", "nrt1", "cnc2", "crtone", "cnt3", "pint3", "cct3", "lcint91", "cint91", "pnt1", "cint5", "cnc3", "pint01", "cct1", "cctOne", "cnn01", "cnt01", "lcnt1", "pnt5", "nnt5", "cnoone", "cnc1", "cnt5", "cntOne", "cno1", "cnc01", "countOne", "cnc5", "nrt2", "crt5", "cno2", "pint5", "count3", "cnn1", "count91", "cint1", "cnn5", "cncone", "cnn3", "lcint1", "lcntOne", "lcnt91", "nrtone"], "cnt2": ["cnt62", "cctTwo", "crt2", " cintTwo", "cintTwo", "crt02", " cint200", "crc2", "cct02", "cnttwo", "ecnt62", "cwdTwo", "cint2", " cwd2", "ccttwo", "cnt0", "cwd2", "crtTwo", "ecct2", " cint02", " cnt200", "cwd02", "cint200", "cntTwo", "cct200", " cwd02", "crc0", "ecct0", "cnt200", "crc02", " cwdtwo", "ecnt2", "crt200", "cct0", " cnt02", "ecct02", "cct2", "ecct62", " cnttwo", "cwd62", "crttwo", "cct62", "ecnt0", "cwdtwo", " cint2", " cntTwo", " cwdTwo", "cint02", "cwd0", "ecnt02", "cnt02", "crc62"], "i": ["id", "slice", "j", "lc", "ri", "h", "a", "pi", "part", "I", "d", "ii", "ip", "z", "v", "io", "c", "ix", "m", "abi", "ori", "t", "gi", "index", "data", "k", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "eni", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "uri", "ai", "b"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n// (1) true???????????\\?????????????????????\\n\t// (1.1) ???????????????????\u00b4????????????\u00b0sum???????????????\\n\t// (1.2) ??????????????????????????????\\n\t// (1.3) ?????????0???????????????????????\u00b4????????\\?????????????????????\\n\t\t// (1.3.1) ?????????????????????\\n\t// (1.4) ??????????????????????????????????????\u00b0?????????1??????????????\\?????????????????????\\n\t\t// (1.4.1) ????\u00b1???\u00a8??????1?????????char??????????????????\\n\t\t// (1.4.2) char?????????????????????????????\u00b0?????????????????????\\n\t\t// (1.4.3) ????\u00a8?????????\u00b0sum????????\u00b0???????\u00b6??????????????????????\\n\t// (1.5) sum?????\u00a8?????????\\n\\npublic class Main {\\n\tpublic static void main (String[] args) throws IOException{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\twhile(true){\\n\t\t\tint sum = 0;\\n\t\t\tString num = br.readLine();\\n\\n\t\t\tif (num.equals(\"0\")){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\\n\t\t\tfor (int i = 0;i < num.length();i++){\\n\t\t\t\tchar number = num.charAt(i);\\n\t\t\t\tint numberCal = Character.getNumericValue(number);\\n\t\t\t\tsum += numberCal;\\n\t\t\t}\\n\t\t\tSystem.out.println(sum);\\n\t\t}\\n\t}\\n}", "target": "144", "substitutes": {}}
{"code": "import java.util.*;\\nclass Main{\\n  public static void main(String args[]){\\n    boolean flag = true;\\n    int tmp;\\n    int count = 0;\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int Array [] = new int[n];\\n    //input\\n    for(int i = 0; i<n; i++){\\n      Array[i] = sc.nextInt();\\n    }\\n    //bubblesort\\n    while(flag){\\n      flag = false;\\n      for(int j = n-1; j>0; j--){\\n        if(Array[j]<Array[j-1]){\\n          tmp = Array[j];\\n          Array[j] = Array[j-1];\\n          Array[j-1] = tmp;\\n          count++;\\n          flag = true;\\n        }\\n      }\\n    }\\n    for(int i = 0; i<n-1; i++)System.out.printf(\"%d \",Array[i]);\\n    System.out.println(Array[n-1]);\\n    System.out.println(count);\\n  }\\n}\\n", "target": "170", "substitutes": {"tmp": [" rc", " j", " ret", " output", "len", "offset", "no", " np", "start", " c", " ignored", " img", "nb", "nt", "p", "max", " test", "test", "i", "code", " arr", "num", " temp", "null", " init", " p", "temp", " seed"], "count": ["id", "path", "base", "counter", "length", "len", "array", "last", "child", "type", "call", "c", "start", "current", "Count", "const", "index", "batch", "f", "cache", "max", "found", "parent", "code", "weight", "size", "list", "total"], "sc": ["sw", "enc", "ch", "lc", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "ec", "sub", "nc", "cc", "sh", "sec", "sp", "src", "acc", "rc", "system", "na", "cs", "cl", "pc", "exec", "ner", "sl", "mp", "ci", "stream", "sci"], "n": ["j", "nn", "conn", "len", "sn", "ns", "d", "nl", "z", "c", "m", "r", "en", "nc", "t", "nb", "index", "nr", "k", "nt", "e", "number", "p", "ne", "f", "pos", "net", "o", "i", "adj", "N", "num", "l", "x", " N", "size", "b"], "Array": ["Buffer", "rays", "a", " array", "Result", "array", "Index", "Count", "A", "Number", "Base", "Model", "Counter", "arr", "Matrix", "Vector", "Size", " arr", "Impl"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        // write your code here\\n        Scanner scr = new Scanner(System.in);\\n        int s =scr.nextInt();\\n        int[] ip= new int[s];\\n        for(int i=0;i<s;i++){\\n            ip[i]= scr.nextInt();\\n        }\\n        int[] op= new int[s];\\n        for(int i=0;i<s;i++){\\n            op[ip[i]-1]=i+1;\\n        }\\n        for (int g: op\\n             ) {\\n            System.out.print(g+\" \");\\n        }\\n    }\\n}\\n", "target": "227", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n    public static void main(String[] args) throws Exception{\\n\\n        int num = 10000;\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        for (int i = 1; i <= num; i++) {\\n            int x = sc.nextInt();\\n            if(x == 0){\\n                break;\\n            }\\n            System.out.println(\"Case \"+ i + \": \" + x);\\n        }\\n\\n\\n    }\\n}", "target": "97", "substitutes": {"num": ["id", "uni", "loc", "len", "nu", "unit", "in", "init", "inc", "Num", "m", "con", "np", "nb", "index", "dim", "number", "pos", "n", "batch", "f", "end", "max", "mult", "multi", "umi", "col", "conf", "sum", "nm", "NUM", "random", "u", "um", "temp"], "sc": ["sw", "enc", " Sc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "uc", "esc", "sq", "c", "scan", "osc", "spec", "ec", "sub", "nc", "cc", "sec", "sh", "sp", "src", "acc", "rc", "ca", "cs", "cl", "pc", "exec", "ner", "sl", "ci", "g", "sci"], "i": ["id", "slice", "j", "pi", "mu", "part", "my", "in", "mi", "init", "ii", "ip", "ind", "type", "z", "v", "ix", "c", "is", "start", "io", "y", "t", "gi", "index", "phi", "key", "e", "pos", "n", "f", "qi", "ui", "xi", "li", "multi", "di", "ie", "yi", "si", "hi", "info", "bi", "zi", "ci", "u", "ti", "ai", "I", "name"], "x": ["id", "wx", "xx", "rx", "fx", "xb", "d", "xy", "cross", "xt", "xxx", "pe", "z", "v", "ix", "c", "m", "y", "tx", "xs", "t", "index", "k", "e", "number", "p", "pos", "n", "f", "ex", "ctx", "xc", "xp", "xi", "ww", "w", "ax", "val", "xe", "dx", "X", "u", "xa", "b"]}}
{"code": "import java.util.*;\\n//import java.util.Math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int A[] = new int[n];\\n    int i;\\n    int count = 0;\\n    \\n    for(i = 0; i < n; i++){\\n        A[i] = sc.nextInt();\\n//        System.out.println(isprime(A[i]));\\n        if(isprime(A[i]) == true){\\n            count++;\\n        }\\n    }\\n \\n    System.out.println(count);\\n    \\n    }\\n    \\n    public static boolean isprime(int x){\\n        int i = 0;\\n       // System.out.println(x);\\n        if(x == 2){\\n            return true;\\n        }else if((x % 2) == 0){\\n            return false;\\n        }else{\\n            i = 3;\\n            while(i <= Math.sqrt(x)){\\n                if((x % i) == 0){\\n                    return false;\\n                }\\n                i = i + 2;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\\n", "target": "226", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int w = sc.nextInt();\\n        int n = sc.nextInt();\\n        int array[] = new int[w];\\n        for (int i = 0; i < w; i++) array[i] = i+1;\\n        for (int i = 0; i < n; i++){\\n            String line = sc.next();\\n            String spl[] = line.split(\",\");\\n            int a = Integer.parseInt(spl[0]) - 1;\\n            int b = Integer.parseInt(spl[1]) - 1;\\n            int tmp = array[a];\\n            array[a] = array[b];\\n            array[b] = tmp;\\n        }\\n        for (int i = 0; i < w; i++){\\n            System.out.println(array[i]);\\n        }\\n    }\\n}", "target": "156", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "cer", "st", "sk", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "cor", "sh", "cus", "sec", "sp", "dc", "src", "rc", "system", "anc", "sche", "coll", "sb", "cs", "cl", "pc", "ner", "sl", "ci", "asc", "screen", "mc", "sci"], "w": ["fw", "sw", "wx", "h", "wl", "wh", "d", "hw", "z", "v", "c", "m", "y", "t", "wp", "k", "e", "ew", "p", "win", "f", "max", "q", "W", "wa", "width", "rw", "window", "ww", "o", "s", "we", "kw", "l", "wt", "weight", "x", "u", "wall", "work"], "n": ["j", "nn", "h", "sn", "ns", "in", "d", "no", "nl", "z", "v", "c", "m", "y", "network", "t", "k", "e", "number", "p", "f", "net", "q", "o", "s", "l", "N", "x", "u"], "array": ["equality", "instance", "one", "base", "object", "air", "address", "api", "error", "section", "function", "length", "database", "vector", "audio", "part", "book", "angle", "share", "group", "arrow", "area", "now", "pair", "element", "current", "word", "value", "data", "index", "archive", "channel", "number", "batch", "p", "alpha", "arr", "Array", "map", "integer", "expression", "result", "ray", "string", "row", "repeat", "window", "multi", "stack", "image", "our", "average", "answer", "range", "collection", "variable", "replace", "ignore", "append", "x", "shared", "auto", "ar", "list", "sample"], "i": ["id", "j", "api", "ri", "pi", "I", "in", "mi", "init", "d", "ip", "ii", "z", "v", "io", "ix", "is", "start", "c", "ori", "y", "gi", "index", "phi", "e", "p", "fi", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "ie", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "ti", "ai", "vi"], "line": ["lines", "phase", "le", "file", "lf", "section", "str", "part", "kl", "page", "in", "Line", "nl", "split", "url", "out", "data", "key", "e", "p", "pos", "sp", "f", "entry", "cell", "end", "string", "row", "val", "el", "code", "l", "cl", "text", "sl", "ner", "block", "letter", "lin", "inline", "name"], "spl": ["slice", "lines", "pp", " split", "loc", "plug", "lf", "ipl", "str", "kl", "squ", "lab", "inc", "pel", "bsp", "sel", " splits", "split", "abs", "spec", "sub", "Spl", " sl", "data", "obj", "sp", "arr", "string", "elt", "cel", "impl", "s", "sb", "el", "l", "strike", "cl", "pl", "sl", "packs", "expl", "zip", "temp", "sci"], "a": ["api", "ba", "ab", "oa", "fa", "aaa", "aa", "ao", "sa", "d", "am", "aux", "an", "c", "area", "ia", "ac", "r", "y", "A", "ga", "ad", "e", "p", "pa", "alpha", "f", "ea", "aj", "ca", "va", "na", "as", "s", "ama", "asa", "l", "da", "au", "x", "qa", "ae", "u", "ai"], "b": ["j", "ib", "ab", "cb", "ba", "abb", "xb", "aa", "d", "bf", "v", "c", "ob", "r", "y", "B", "nb", "k", "e", "p", "f", "bot", "bs", "o", "s", "sb", "lb", "l", "fb", "x", "bd", "u", "g", "bl", "rb"], "tmp": ["slice", "pp", "base", "amp", "app", "cb", "part", "abb", "xb", "bb", "foo", "v", "area", "split", "txt", "db", "np", "nb", "data", "beta", "p", "obj", "alpha", "sp", "bp", "sb", "ie", "kk", "sup", "fb", "append", "mp", "cp", "rb", "temp"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\tfinal static long MOD = 1000000007;\\n\tpublic static String[] Ws = null;\\n\tpublic static int wsIndx = 0;\\n\tpublic static BufferedReader in = null;\\n\tpublic static void main(String[] args) throws Exception {\\n\\n\t\tint N=nextInt();\\n\t\tint K=nextInt();\\n\t\tint Q=nextInt();\\n\t\tint[] A = new int[Q];\\n\t\tint[] x = new int[N];\\n\t\tArrays.fill(x, 0);\\n\t\tfor(int i=0;i<Q;i++){\\n\t\t\tA[i] = nextInt();\\n\t\t\tx[A[i]-1]++;\\n\t\t}\\n\t\tfor(int i=0;i<x.length;i++){\\n\t\t\tif(K-Q+x[i]<=0){\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t}else{\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\\n\t\t\t}\\n\\n\t\t}\\n\\n\t}\\n\\n\\n\tpublic static void check() throws Exception{\\n\t\tif(in == null){\\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tif(Ws==null || Ws.length<=wsIndx){\\n\t\t\tWs = in.readLine().split(\" \");\\n\t\t\twsIndx=0;\\n\t\t}\\n\t}\\n\tpublic static int nextInt()throws Exception{\\n\t\tcheck();\\n\t\treturn Integer.parseInt(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static long nextLong()throws Exception{\\n\t\tcheck();\\n\t\treturn Long.parseLong(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static String nextString()throws Exception{\\n\t\tcheck();\\n\t\treturn Ws[wsIndx++];\\n\t}\\n\\n\tpublic static int[] nextInts()throws Exception{\\n\t\tcheck();\\n\t\tint[] tmp = new int[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Integer.parseInt(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static long[] nextLongs()throws Exception{\\n\t\tcheck();\\n\t\tlong[] tmp = new long[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Long.parseLong(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static String[] nextStrings()throws Exception{\\n\t\tcheck();\\n\t\twsIndx=Ws.length;\\n\t\treturn Ws;\\n\t}\\n\\n\\n}\\n", "target": "102", "substitutes": {"MOD": ["id", " rc", " J", " Max", " PID", " ms", " f", " bits", " count", " C", " exp", " max", " Z", " pid", " counter", "n", "L", " MS", " code", " ID", " start", " L", " weight", " R", " H", "ID", " U", " P", " base", " time"], "Ws": ["Pages", "Vs", "wcs", "wy", "Services", "Input", "qs", "xml", "WB", "Words", "Wa", "NW", "ws", "Wars", "w", "wt", "vs", "Socket", "X", "Wo", "Word", "Es", "RW", "Ns", "wl", "Fs", "Bytes", "Args", "Writer", " WS", "Settings", "WT", "xs", "Bs", "Win", "GW", "Stack", "Ps", "Us", "CW", "words", "fw", "WP", "wx", "Str", "Js", "Windows", "aws", "Width", "War", "wn", "wa", "Wr", "Web", "ww", "Ts", "WN", "Rs", "ls", "wb", "Os", "Cs", "WC", "Line", "Cas", "We", "wp", "Text", "W", "rw", "WS", "s", "Wi", "WW", "wk", "Wire", "Parts"], "wsIndx": ["Wsindy", "WSIndX", "wsIdex", "wsIndxc", "wsIdx", "wsIndX", "wsINDX", "wsCondx", "wsCondy", "WsIndxs", "WsIndn", "Wsindx", "WSIndix", "wsCondex", "wsindex", "wsindix", "WsIndX", "wsIndy", "wsINDx", "WSIdxs", "wsindn", "wsInfxs", "Wsindxs", "WSIndxc", "wsIdxs", "wsIdX", "wsCondX", "WSIdx", "WSIndex", "WSIdix", "wsInX", "wsIny", "wsINDy", "WSIndy", "WSIndx", "WSIdxc", "wsindxs", "wsIndz", "WSIndxs", "WSIdex", "wsIndix", "wsIndxs", "wsindX", "wsIndex", "wsInex", "WsIndex", "wsIndn", "wsIdy", "wsInz", "wsInfX", "wsIdxc", "wsInx", "WSIdy", "wsINDex", "wsIdn", "wsindy", "WsindX", "wsINDxs", "wsIdix", "wsInfx", "wsInfxc", "wsindz", "wsInn", "WsIndx", "Wsindex", "wsInfy", "WsIndy", "WsIndz", "wsIdz", "wsCondxs", "Wsindz", "Wsindn", "wsINDxc", "wsInfex", "WSIdX", "wsindx", "wsCondix"], "in": ["id", "inner", "again", "login", "doc", "h", "conn", "gin", "a", "bin", "part", "resource", "d", "init", "inc", "din", "err", "v", "c", "is", "m", "ac", "url", "r", "out", "con", "read", "input", "min", "pid", "serv", "re", "data", "ex", "n", "p", "f", "win", "ssl", "isin", "IN", "rin", "string", "inn", "as", "connection", "image", "In", "w", "s", "ini", "ax", "nin", "l", "log", "fr", "kin", "pin", "cl", "socket", "lin", "reader", "b", "source", "ins"], "N": ["Ni", "Ne", "J", "F", "E", "NL", " n", "Num", "H", "T", "B", "Y", "NT", "Na", "NS", "n", "L", "W", "O", "C", "NA", "D", "M", "U", "Z", "S", "X", "V", "NN", "P", "I", "G"], "K": ["J", "F", "E", "KE", "H", "T", "B", "Y", "Ka", "k", "R", "L", "q", "W", "C", "O", "PK", "D", "M", "U", "Z", "S", "X", "V", "P", "I", "G"], "Q": ["CL", "J", "F", "E", "QU", "H", "Qu", "T", "B", "NE", "Y", "Length", "R", "L", "q", "IN", "W", "QL", "C", "NC", "O", "D", "M", "II", "U", "Z", "S", "MQ", "X", "V", "ID", "P", "Query", "I", "G"], "A": ["Am", "As", "An", "a", "F", "Args", "array", "AP", "AS", "AA", "an", "H", "T", "Alpha", "B", "Y", "mA", "Na", "alpha", "Array", "AM", "L", "W", "C", "Ar", "CA", "NA", "D", "At", "na", "M", "U", "S", "Z", "au", "X", "V", "P", "LA", "I", "Auth"], "x": ["id", "php", "wx", "h", "xx", "rx", "ux", "xy", "array", "xt", "xxx", "z", "ix", "v", "c", "y", "tx", "xs", "input", "t", "index", "data", "xml", "e", "ex", "p", "xc", "f", "n", "arr", "ctx", "Array", "q", "ans", "xi", "xp", "wa", "as", "w", "ax", "s", "l", "X", "u", "xa", "xes", "XX"], "i": ["format", "h", "ij", "mi", "start", "m", "r", "gi", "phi", "qi", "w", "chi", "ei", "ci", "uri", "fi", "mini", "d", "ii", "cli", "z", "io", "this", "index", "data", "e", "f", "xi", "li", "multi", "eni", "hi", "u", "ti", "pi", "mu", "init", "ix", "abi", "c", "y", "p", "n", "ui", "iu", "oi", "bi", "ni", "ai", "I", "id", "slice", "j", "ri", "a", "ip", "_", "v", "min", "k", "ji", "q", "it", "o", "di", "ini", "s", "yi", "ie", "l", "si", "info", "g", "my", "b"], "tmp": ["tab", "vp", "app", "page", "pb", "params", "extra", "txt", "result", "elt", "Mp", "vs", "mk", "fb", "output", "temp", "storage", "now", "current", "Now", "data", "nb", "proc", "sp", "bp", "www", "stuff", "stack", "sb", "buff", "buf", "kk", "self", "mp", "meta", "cp", "copy", "bps", "py", "wx", "Temp", "bb", "bf", "emp", "fp", "out", "db", "tt", "np", "TB", "mm", "bt", "ff", "sup", "nm", "jp", "null", "source", "slice", "wb", "cmp", "api", "body", "tp", "part", "array", "v", "MP", "wp", "obj", "ctx", "prev", "cache", "acc", "src", "rb", "zip", "b", "vt"]}}
{"code": "\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint x = sc.nextInt();\\n\t\t\\n\t\tint []d = new int [n+1];\\n\t\td[0] = 0;\\n\t\tint j;\\n\t\tint bound = 1;\\n\t\tfor( j = 1; j <= n ; j++) {\\n\t\t\tint l = sc.nextInt();\\n\t\t\td[j] = d[j - 1] + l;\\n\t\t\tif (d[j] <= x) \\n\t\t\t\tbound++;\\n\t\t\telse {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\\n\t\t}\\n\t\tSystem.out.println(bound);\\n\\n\t}\\n\\n}\\n", "target": "130", "substitutes": {}}
{"code": "/*\\n *  author : Atul Anand   \\n *  created on : Fri Apr 03 2020\\n */\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) throws IOException {\\n        int N = in.nextInt();\\n        int p[] = new int[N];\\n        int mismatch = 0;\\n        for(int i = 0; i < N; i++){\\n            p[i] = in.nextInt() - 1;\\n            if(p[i] != i){\\n                mismatch++;\\n            }\\n        }\\n        if(mismatch <= 2){\\n            println(\"YES\");\\n        }\\n        else{\\n            println(\"NO\");\\n        }\\n        in.close();\\n        out.close();\\n    }\\n\\n    static int MIN = Integer.MIN_VALUE;\\n    static int MAX = Integer.MAX_VALUE;\\n    static Reader in = new Reader();\\n    static PrintWriter out = new PrintWriter(System.out);\\n\\n    static void read(int arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextInt(); \\n    \t} \\n    }\\n    \\n    static void read(long arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextLong(); \\n    \t} \\n    }\\n    \\n    static void read(String arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.next(); \\n    \t} \\n    }\\n    \\n    static void print(Object O) {  \\n    \tout.print(O); \\n    }\\n    \\n    static void println(Object O) { \\n    \tout.println(O); \\n    }\\n    \\n    static void println(int arr[]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprint(arr[i]+\" \"); \\n    \t} \\n    \tprintln(\"\"); \\n    }\\n\\n    static void println(int arr[][]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprintln(arr[i]); \\n    \t}\\n    }\\n    \\n    static void debug(Object O) { \\n    \tSystem.out.println(O); \\n    }\\n}\\n\\nclass Reader {\\n    BufferedReader reader;\\n    StringTokenizer tokenizer;\\n\\n    Reader() {\\n        reader = new BufferedReader(new InputStreamReader(System.in));\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n\\n    String next() throws IOException {\\n        while (!tokenizer.hasMoreTokens() ) { \\n            tokenizer = new StringTokenizer(reader.readLine()); \\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    int nextInt() throws IOException { \\n        return Integer.parseInt(next()); \\n    }\\n    \\n    double nextDouble() throws IOException { \\n        return Double.parseDouble(next());\\n    }\\n    \\n    long nextLong() throws IOException { \\n        return Long.parseLong(next()); \\n    }\\n    \\n    String nextLine() throws IOException { \\n        return reader.readLine(); \\n    }\\n    \\n    void close() throws IOException { \\n        reader.close(); \\n    }\\n}", "target": "82", "substitutes": {"N": ["Q", "Ne", "Ni", "IO", "J", "Ns", "F", "NO", "SIZE", "E", "NM", "No", " n", "NB", "OUT", "H", "Count", "network", "Node", "Number", "A", "T", "B", "NI", "NE", "Y", "NT", "Length", "NS", "number", "n", "R", "L", "K", "IN", "W", "CR", "Len", "C", "NC", "NA", "D", "MN", "M", "II", "KN", "SN", "Z", "S", "Class", "V", "X", "NN", "P", "Size", "None", "I", "G", "Norm"], "p": ["pp", "j", "h", "a", "tp", "pi", "d", "array", "ps", "v", "at", "c", "m", "r", "y", "t", "np", "jp", "e", "n", "sp", "f", "pos", "q", "ap", "o", "pr", "s", "w", "l", "x", "patch", "P", "u", " P", "cp", "ar", "op", "b"], "mismatch": ["Mismake", "mishash", "Mmmatch", "matchatch", "MISMash", "mismake", "mismait", "mISMism", "mispake", "mismsatch", "ymismait", "Mismash", "mispatch", "mISMatch", "mISMake", "Mmmatching", "ymoyait", "ymismount", "mispatching", "mispatched", "mmmatched", "moyatched", "Mismatch", "MISMism", "mishancy", "ymoyatch", "meshount", "ymoyount", "mISMash", "mismsount", "moyatch", "mismash", "meshatch", "meshatched", "matchash", "mmmake", "Mismatched", "mismatched", "moyait", "meshait", "matchism", "Mismancy", "moyount", "mmmatch", "Mmmatched", "Mmmake", "MISMatch", "matchancy", "mishism", "mismism", "ymismatch", "mismsatched", "Mismatching", "mISMatched", "mismancy", "mISMancy", "mismatching", "MISMancy", "mishatch", "mmmatching", "mISMatching", "mismount", "ymismatched", "ymoyatched", "Mismism", "mismsait"], "i": ["inner", "one", "h", "mi", "start", "r", "gi", "phi", "qi", "me", "chi", "ei", "ci", "uri", "fi", "mini", "you", "lc", "d", "ii", "cli", "z", "io", "is", "index", "data", "key", "e", "number", "f", "xi", "li", "multi", "eni", "hi", "auto", "u", "ti", "pi", "mu", "resource", "init", "ix", "abi", "y", "adi", "n", "ik", "ui", "iu", "oi", "bi", "ni", "ai", "I", "id", "slice", "j", "iii", "api", "ri", "ip", "ori", "v", "t", "k", "ji", "q", "zero", "it", "o", "di", "ini", "yi", "ie", "l", "si", "info", "g", "my", "b"], "MIN": ["PM", "Q", "CL", "NO", "Min", "ALL", "VALUE", "PO", "B", "min", "PER", "PA", "minimum", "R", "L", "IN", "Minimum", "MN", "PR", "M", "S", "ID", "V", "P", "TYPE", "SIZE"], "MAX": ["Q", "CL", "NO", "ALL", "VALUE", "AP", "Max", " max", "Maximum", "AST", "WORK", "MED", "PER", "ND", "END", "R", "EST", "K", "max", "FAULT", "PR", "M", "Range", "AX", "NUM", "X", "XX", "SIZE"], "in": ["token", "inner", "again", "login", "path", "doc", "file", "a", "line", "bin", "rec", "query", "resource", "d", "init", "din", "inc", "err", "user", "io", "er", "c", "is", "r", "thin", "con", "read", "input", "serv", "data", "by", "gen", "loader", "isin", "n", "win", "f", "ex", "on", "IN", "rin", "inn", "ic", "connection", "image", "In", "pass", "conf", "ini", "w", "nin", "version", "config", "kin", "pin", "x", "diff", "lin", "stream", "socket", "ar", "buffer", "source", "ins"], "out": ["again", "format", "or", "query", "page", "server", "process", "client", "OUT", "r", "net", "In", "w", "output", "gen", "co", "path", "outs", "line", "user", "println", "Writer", "io", "input", "data", "key", "f", "dump", "window", "target", "exp", "socket", "copy", "name", "error", "comment", "scope", "init", "call", "c", "n", "connection", "print", "Out", "buffer", "state", "object", "pool", "file", "str", "bin", "part", "Output", "err", "array", "v", "outer", "prefix", "t", "obj", "ex", "lock", "cache", "IN", "o", "parent", "log", "b", "writer", "write"], "arr": ["format", "ch", "app", "aaa", "rep", "ars", "r", "upper", "cat", "arch", "Array", "map", "ray", "att", "plot", "var", "attr", "bl", "series", "list", "pp", " array", "ml", "data", "archive", "arm", "dat", "Ar", "ap", "stack", "pr", "arc", "all", "ar", "vec", "res", "air", "arp", "aa", "adr", "abc", "iter", "war", "img", "rr", "batch", "br", "av", "par", "el", "fr", "align", "parse", "block", "dr", "shr", "order", "enc", "str", "err", "array", "atts", "arg", "v", "gr", "obj", "bar", "cache", "umpy", "dict", "coll", "pad"], "O": ["Q", "object", "Os", " o", "IO", "J", "NO", "F", "GO", "VO", "E", "OH", "RO", "ON", "EO", "Output", "File", "SO", "OUT", "ION", "H", "T", "B", "OS", "DO", "Y", "R", "L", "Other", "OU", "OT", "MO", "K", "W", "OK", "C", "Type", "o", "D", "M", "OO", "OL", "U", "V", "P", "I", "G", "None"], "reader": ["ler", "inner", "file", "oder", "or", "service", "book", "ger", "server", "client", "er", "io", "manager", "Reader", "iter", "r", "read", "reading", "holder", "input", "rr", "data", "loader", "f", "lock", "result", "driver", "row", "over", "feed", "per", "ner", "handler", "parser", "stream", "buffer", "writer", "entry"], "tokenizer": ["tokenize", "Tokenize", " tokenizing", "Tokenizer", " tokenization", "serialize", "initializer", "initializing", "serializing", "initialization", " tokenizers", "serializers", "Tokenizing", "tokenizers", "initializers", "tokenizing", "tokenization", "serializer", " tokenize", "Tokenization", "Tokenizers"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    /**\\n     * @param args\\n     * @throws IOException\\n     * @throws NumberFormatException\\n     */\\n    public static void main(String[] args) throws NumberFormatException,\\n            IOException {\\n\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(\\n                System.in));\\n\\n        int len = Integer.parseInt(reader.readLine());\\n        int[] arr = new int[len];\\n\\n        String line;\\n\\n        for (int i = 0; i < len; i++) {\\n            line = reader.readLine();\\n            arr[i] = Integer.parseInt(line);\\n        }\\n        \\n        int resultCount = 0;\\n        for (int j = 0; j < arr.length; j++) {\\n            if (isPrime(arr[j])) {\\n                resultCount++;\\n            }\\n        }\\n\\n        System.out.println(resultCount);\\n\\n    }\\n\\n    \\n//  ??????function prime(n) {\\n//  ????????????if (n <= 3) return 0; ????????????if ((n % 2) == 0) return 0;\\n//  ????????????for(i=3; i<=Math.sqrt(n); i++) {\\n//  ??????????????????if ((n % i) == 0) return 0;\\n//  ????????????}\\n//  ????????????return 1;\\n//  ??????}\\n    private static boolean isPrime(int value) {\\n\\n        if(value == 2) return true;\\n        if(value ==  3) return true;\\n        if(value ==  5) return true;\\n        if(value ==  7) return true;\\n        \\n        if(value % 2 == 0) return false;\\n        if(value % 3 == 0) return false;\\n        if(value % 5 == 0) return false;\\n        if(value % 7 == 0) return false;\\n\\n        int max = (int) Math.sqrt(value);\\n        \\n        \\n        for (double i = 8; i <= max; i ++ ) {\\n//            System.out.println(\"value:\"+ value +\" i:\" + i +\" r \" + (value % i));\\n            if (value % i == 0) return false;\\n        }\\n        \\n        return true;\\n    }\\n\\n}", "target": "226", "substitutes": {"reader": ["ler", "inner", "ri", "file", "oder", "in", "report", "ger", "magic", "server", "rator", "io", "er", "Reader", "r", "iter", "read", "reading", "upper", "rar", "input", "rr", "loader", "editor", "driver", "worker", "row", "over", "feed", " Reader", "finder", "per", "l", "keeper", "ner", "parser", "her", "handler", "stream", "bird", "rer", "rb", "buffer", "b", "writer"], "len": ["id", "base", "lc", "le", "lp", "loc", "lf", "length", "part", "ind", "limit", "count", "start", "split", "lit", "en", "lt", "ld", "ln", "nt", "pos", "n", "f", "span", "la", "li", "elt", "Len", "fin", "el", "val", "code", "l", "lon", "ll", "lim", "ni", "lin", "all", "ls", "size", "list", "fl"], "arr": ["enc", "air", "vals", "base", "app", "str", "vec", "aaa", "err", "array", "rep", "arg", "adr", "inter", "res", "r", "iter", "gr", "tr", "rr", "data", "obj", "arch", "Array", "dat", "result", "br", "ray", "dict", "att", "test", "our", "coll", "pr", "val", "el", "fr", "l", "parse", "var", "frac", "train", "attr", "arc", "dr", "ext", "ann", "ar", "list", "order"], "line": ["id", "lines", "error", "lc", "le", "look", "file", "lf", "model", "comment", "str", "page", "unit", "Line", "err", "sel", "nl", "area", "name", "url", "r", "iter", "ine", "data", "key", "e", "number", "ne", "frame", "f", "cell", "LINE", "string", "row", "liner", "char", "pass", "col", "range", "val", "code", "el", "l", "lo", "fr", "cl", "lr", "parse", "ner", "letter", "lin", "link", "entry"], "i": ["id", "uni", "ri", "h", "pi", "mi", "d", "init", "ip", "ii", "z", "v", "ix", "io", "c", "m", "is", "y", "gi", "index", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "o", "b", "eni", "ini", "di", "oi", "ie", "si", "bi", "hi", "x", "ci", "u", "ni", "uri", "fi", "ai", "I"], "resultCount": ["resultsSum", "ResultCount", "ResultSize", "resultNum", "matchCount", "ResultNum", "ResultSum", " resultCode", "resultSize", "resultCode", " resultCounter", "testcount", "resultsSize", "ResultCode", "matchcount", "matchCode", "resultSum", "testCount", "matchSum", "resultsCount", "testLength", "resultLength", "matchLength", "ResultCounter", " resultSum", "resultsCode", " resultNum", " resultLength", "matchNum", "testSum", "resultcount", " resultSize", " resultcount", "resultCounter", "matchCounter"], "j": ["ch", "h", "ja", "J", "length", "part", "js", "ij", "job", "jj", "ii", "bj", "z", "v", "ix", "c", "jen", "m", "y", "out", "jit", "jc", "jl", "k", "key", "p", "n", "obj", "f", "qi", "ji", "aj", "br", "li", "it", "o", "pr", "jar", "ie", "el", "l", "fr", "uj", "x", "jo", "block", "oj", "u", "g", "jp", "b"]}}
{"code": "import java.util.*;\\nclass Main {\\n    public static void main(String []args) {\\n        Scanner scn= new Scanner(System.in);\\n        int x= scn.nextInt();\\n        int n=scn.nextInt();\\n        int []arr= new int[n];\\n        HashSet<Integer> map= new HashSet<>();\\n        for(int i=0;i<n;i++){\\n            arr[i]=scn.nextInt();\\n            map.add(arr[i]);\\n        }\\n        int diff=0;\\n        while(true){\\n            int no=x-diff;\\n            if(!map.contains(no)){\\n                System.out.println(no);\\n                return;\\n            }\\n            no=x+diff;\\n            if(!map.contains(no)){\\n                System.out.println(no);\\n                return;\\n            }\\n            diff++;\\n        }\\n    }\\n}", "target": "228", "substitutes": {"scn": ["rcN", "scp", "rcr", "SCN", "Scr", "sknn", "scb", " scnt", "skn", "Scb", " scr", "scnt", "ctnt", "scr", "rcn", "SCb", "rcnt", " scb", " scp", " scN", "ctr", "ctn", "Scnt", "ScN", "sknt", "scnn", "Scp", "Scn", "ctN", "rcnn", "skN", "rcp", "scN", "SCr", " scnn", "Scnn", "SCn"], "x": ["id", "change", "none", "one", "h", "xx", "rx", "in", "d", "cross", "xy", "xt", "xxx", "old", "z", "ix", "v", "c", "yes", "m", "now", "plus", "y", "xs", "index", "k", "e", "number", "p", "ex", "on", "f", "max", "na", "o", "w", "ax", "code", "num", "X", "size", "b"], "n": ["j", "nn", "h", "len", "sn", "ns", "in", "d", "z", "c", "m", "r", "y", "en", "network", "out", "t", "ln", "index", "k", "nt", "e", "number", "p", "ne", "f", "q", "o", "w", "s", "N", "l", "num", "ner", "u", "all", "size", "b"], "arr": ["enc", "air", "app", "a", "str", "aa", "err", "array", "rep", "adr", "ars", "r", "iter", "db", "img", "rr", "data", "index", "pre", "batch", "obj", "p", "Array", "pos", "dat", "cache", "arch", "br", "ray", "dict", "na", "att", "test", "coll", "fr", "parse", "frac", "attr", "dr", "all", "ar", "list", "b", "order"], "map": ["hash", "change", "open", "none", "error", "app", "part", "move", "mate", "pose", "share", "array", "cover", "table", "group", "MAP", "master", "type", "down", "m", "en", "maps", "shape", "data", "pre", "index", "lock", "on", "cache", "cap", "mm", "ge", "over", "module", "dict", "ap", "pad", "use", "show", "per", "code", "space", "set", "parse", "mp", "block", "order", "list", "co"], "i": ["id", "slice", "j", "ri", "pi", "mu", "in", "d", "mi", "ip", "ii", "v", "io", "ix", "is", "y", "gi", "index", "uli", "phi", "e", "f", "qi", "ui", "xi", "li", "it", "multi", "o", "di", "ini", "ie", "oi", "chi", "si", "bi", "hi", "ci", "ni", "u", "ti", "fi", "ai", "uri", "I"], "diff": ["id", "change", "cmp", "none", "mix", "nd", "error", "one", "changed", "check", "fix", "part", "neg", "d", "err", "draw", "old", "default", "start", "not", "now", "shift", "different", "Diff", "fail", "dist", " difference", "fe", "index", "pos", "add", "missing", "def", "bug", "max", "iff", "found", "test", "comp", "ref", "range", "div", "num", "info", "patch", "null", "update"], "no": ["id", "mid", "none", "one", "error", "nn", "NO", "po", "nor", "nu", " mo", "part", "cho", "only", "bo", "No", "ko", " none", "yes", "io", "now", "not", "ino", "wrong", "name", "nothing", "which", "non", "yo", "from", "index", "nr", "nt", "number", "nos", "pos", "zero", "na", "o", "di", "wo", "eno", "go", "lo", "num", " lo", "ni", "mo", "auto", "null", "step", "done", "co"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tOriginScanner os = new OriginScanner();\\n\t\tPrintWriter pw = new PrintWriter(System.out);\\n\t\t\\n\t\tint h = os.nextInt();\\n\t\tint i = os.nextInt();\\n\t\t\\n\t\tfor (int n = 0; n < i; n++) {\\n\t\t\tint a = os.nextInt();\\n\t\t\th -= a;\\n\t\t}\\n\t\tString result = h < 1 ? \"Yes\" : \"No\";\\n\t\tpw.println(result);\\n\t\tpw.close();\\n\t}\\n\t\\n\tstatic class OriginScanner {\\n\t\tprivate BufferedReader br;\\n\t\tprivate StringTokenizer st;\\n\t\t\\n\t\tpublic OriginScanner() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tString nextLine() {\\n\t\t\tString str = null;\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t}\\n\t\t\tcatch (IOException e) {\\n\t\t\t\tSystem.out.println(e);\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t\tString next() {\\n\t\t\tif (st == null || !st.hasMoreTokens()) {\\n\t\t\t\tst = new StringTokenizer(nextLine());\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\t}\\n}\\n", "target": "95", "substitutes": {"os": ["object", "Os", "fs", "oa", "oids", "or", "so", "cos", "oser", "ss", "ps", "oses", "ori", "io", "ose", "is", "aos", "ros", "bos", "out", "iso", "OS", "oS", "oss", "pos", "nos", "ois", "osi", "ot", "as", "bs", "ws", "o", "los", "mos", "oid", "ios", "us", "ols", "otes", "oos", "vs", "obs", "dos", "ops", "op", "bis", "res"], "pw": ["Pwb", "lw", "pwh", "apw", "lW", "Pwal", " pwh", "Pwd", "spwal", " pW", "pws", "PW", " pow", "pwb", "lpwal", "pwd", "Pws", "Pw", "lpw", "apow", "lpws", "lwd", "lws", "lpwb", "apwh", "Pwh", "pwal", "apW", "Pow", "spw", "spwb", "pow", " pwd", "spws", " pws", "pW"], "h": ["id", "hh", "j", "in", "d", "ah", "bh", "hd", "ha", "header", "count", "z", "v", "head", "c", "m", "H", "y", "r", "t", "he", "sh", "k", "phi", "hr", "e", "p", "ih", "f", "q", "eh", "hm", "rh", "ph", "o", "hs", "w", "th", "uh", "l", "hi", "x", "u", "hp", "b", "auth"], "i": ["id", "j", "pi", "I", "in", "d", "ii", "z", "v", "c", "is", "m", "start", "r", "y", "t", "k", "phi", "e", "p", "f", "on", "o", "w", "s", "ini", "l", "hi", "x", "ci", "u", "b"], "n": ["j", "nn", "conn", "nu", "ns", "aa", "in", "d", "no", "init", "v", "z", "c", "an", "m", "en", "y", "t", "np", "nb", "nr", "k", "nt", "un", "e", "ne", "p", "on", "f", "net", "next", "na", "o", "w", "N", "l", "x", "u", "ni", "g", "b"], "a": ["access", "ba", "oa", "fa", "aa", "sa", "d", "am", "ha", "count", "z", "an", "c", "area", "m", "ac", "r", "y", "ana", "A", "nt", "p", "alpha", "f", "pa", "aj", "va", "as", "na", "o", "s", "x", "af", "u", "ai", "b", "name"], "result": ["sr", "rap", "answer", "su", "comment", "page", "Result", "user", "report", "root", "default", "description", "response", "url", "match", "r", "feature", "current", "word", "value", "runner", "data", "ret", " Result", "ver", "acc", "string", "row", "dict", "test", "pass", "val", "info", "results", "record", "text", "status", "attr", "valid", "success", "message", "card", "res", "work"], "br": ["sr", "bur", "yr", "bro", "rob", "or", "bc", "Br", "obl", "bb", "err", "bh", "ber", "BR", "bre", "cr", "io", "box", "rb", "r", "iter", "db", "gr", "tr", "kr", "hr", "ur", "p", "obj", "sp", "arr", "mr", "shr", "bar", "src", "cro", "bridge", "ocr", "bs", "pr", "raf", "buf", "lr", "fr", "fb", "dr", "bl", "rt", "rib", "reader", "b", "res"], "st": ["sc", "sw", "sr", "ast", "Str", "sth", "nd", "ct", "ft", "se", "sa", "d", "ut", "mt", "ss", "stress", "std", "pe", "stop", "cr", "style", "r", "pt", "sta", "STR", "const", "t", "tr", "stri", "sh", "fe", "ste", "nt", "p", "sp", "src", "string", "ost", "stack", "pr", "sb", "s", "ST", "rest", "rd", "l", "sts", "fr", "parse", "sl", "struct", "rt", "ist", "est", "bl", "inst", "St"], "str": ["sr", "id", "enc", "inner", "j", "Str", "line", "err", "cr", "style", "c", "url", "r", "iter", "out", "STR", "gr", "tr", "t", "strings", "kr", "data", "e", "p", "obj", "sp", "f", "arr", "pos", "string", "char", "pr", "s", "div", "code", "l", "fr", "text", "sl", "ner", "dr", "inst", "res"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n\\n        boolean enable=false;\\n        Scanner sc=new Scanner(System.in);\\n        String s=sc.next();\\n        if(s.contains(\"7\")){\\n            System.out.println(\"Yes\");\\n        }\\n        else{\\n            System.out.println(\"No\");  \\n        }\\n        \\n    }\\n\\n}", "target": "99", "substitutes": {"sc": ["sw", "enc", "cmp", "lc", " Sc", "cb", "str", "Sc", " SC", "bc", "sf", "SC", "se", "scope", " scr", "ss", "sel", "uc", "cr", "esc", "c", "scan", "osc", "sync", "spec", "ec", "nc", "cc", "sec", "sh", "desc", "sp", "acc", "rc", "system", "cs", "cl", "pc", "exec", "ner", "sl", "ci", "asc", "sci"], "s": ["opens", "gs", "features", "fs", "sg", "details", "su", "str", "js", "styles", "sf", "in", "services", "ss", "ps", "sets", "v", "c", "is", "abs", "sync", "settings", "out", "os", "input", "strings", "es", "states", "groups", "ses", "p", "comments", "f", "ans", "string", "ws", "b", "sb", "S", "l", "si", "plugins", "sl", "u", "g", "ls", "shows", "sv", "ins"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int a = in.nextInt();\\n        int b = in.nextInt();\\n        int c = in.nextInt();\\n        int x = in.nextInt();\\n        int y = in.nextInt();\\n\\n        int mx = Math.max(x, y);\\n        int mn = Math.min(x, y);\\n\\n        int ans = 0;\\n        if (2 * c < a + b) {\\n            ans += 2 * c * mn;\\n        } else {\\n            System.out.println(a * x + b * y);\\n            return;\\n        }\\n\\n        if (x > y) {\\n            if (a < 2 * c) {\\n                ans += (x - y) * a;\\n            } else {\\n                ans += (x - y) * 2 * c;\\n            }\\n        } else {\\n            if (b < 2 * c) {\\n                ans += (y - x) * b;\\n            } else {\\n                ans += (y - x) * 2 * c;\\n            }\\n        }\\n\\n        System.out.println(ans);\\n    }\\n}", "target": "125", "substitutes": {"in": ["token", "inner", "login", "again", "doc", "h", "conn", "gin", "line", "str", "bin", "rec", "init", "inc", "din", "err", "cli", "user", "scan", "m", "is", "url", "r", "inside", "out", "con", "input", "ln", "serv", "data", "gen", "e", "loader", "isin", "n", "f", "win", "IN", "rin", "string", "inn", "inf", "as", "connection", "binary", "pass", "In", "ini", "s", "ax", "i", "readable", "nin", "up", "l", "log", "kin", "info", "between", "exec", "pin", "g", "lin", "socket", "reader", "ins"], "a": ["base", "ba", "ab", "h", "aa", "sa", "d", "am", "z", "an", "area", "m", "ac", "ia", "at", "A", "ay", "ad", "e", "p", "n", "alpha", "f", "pa", "aj", "ar", "ca", "as", "na", "w", "s", "i", "l", "da", "ae", "u", "all", "ai"], "b": ["wb", "py", "j", "base", "ib", "h", "ab", "cb", "ba", "bc", "d", "bb", "bh", "pb", "bf", "z", "v", "m", "ac", "r", "db", "t", "B", "nb", "e", "cy", "p", "n", "f", "eb", "ca", "bs", "o", "w", "sb", "i", "lb", "s", "l", "bi", "fb", "g", "u", "dy", "rb"], "c": ["sc", "cu", "ch", "cf", "lc", "h", "cb", "ct", "bc", "cd", "d", "count", "z", "v", "m", "ac", "r", "con", "ce", "t", "cc", "k", "cn", "e", "cy", "p", "n", "f", "dc", "max", "q", "C", "ca", "o", "col", "w", "s", "i", "cs", "code", "l", "pc", "ci", "g", "u", "cp"], "x": ["id", "one", "px", "wx", "j", "h", "xx", "rx", "d", "xy", "z", "v", "ix", "an", "m", "ac", "r", "xs", "t", "min", "index", "k", "e", "cy", "p", "n", "ex", "f", "xc", "max", "q", "xi", "ic", "o", "image", "w", "ax", "s", "i", "ey", "ya", "l", "X", "time", "u", "g", "work"], "y": ["id", "py", "j", "ch", "yt", "yr", "h", "wy", "xx", "d", "xy", "ry", "z", "v", "ny", "ix", "m", "yy", "t", "ay", "yo", "Y", "k", "e", "cy", "p", "n", "oy", "f", "ty", "ym", "q", "ky", "o", "ys", "vy", "w", "ey", "iy", "i", "yi", "s", "ya", "l", "g", "u", "dy", "ye", "sy"], "mx": ["nz", "az", " ms", " cm", "ma", "aa", " mm", " mc", "cr", "abc", " ma", "ac", "cc", "ga", " na", "mb", " maj", "aj", " am", "cm", "na", "ca", "ap", "ax", "oc", "ae", "ms", "xa", "mc"], "mn": ["cf", "nn", "ab", "cb", "ns", "dm", "aa", "mi", "ss", "sm", "cr", "ny", "ml", "an", "m", "nc", "min", "cc", "nr", "mg", "cn", "dim", "wm", "n", "dn", "mr", "mb", "dc", "span", "pm", "br", "mm", "cm", "na", "bm", "nm", "vm", "da", "mp", "ms", "ni", "ann", "cp", "g", "mc", "gn"], "ans": ["aps", "can", "lines", "anas", "aces", "ips", "outs", "ats", "cons", "errors", "lan", "ons", "ns", "ens", "sk", "AN", "atan", "ions", "nas", "lang", "amps", "an", "reads", "scan", "ras", "ars", "asts", "ams", "ana", "olds", "regular", "os", "aned", "cas", "rows", "cus", "es", "offs", "anon", "ds", "ents", "plan", "san", "ads", "flags", "ks", "span", "arts", "la", "anc", "ANS", "na", "as", "s", "ays", "cs", "ends", "ants", "eps", "results", "anes", "ops", "ann", "ls", "annot", "ins", "helps"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint k = sc.nextInt();\\n\t\tchar[] s = sc.next().toCharArray();\\n\t\ts[k-1] = Character.toLowerCase(s[k-1]);\\n\t\tfor (int i = 0; i<n; i++) {\\n\t\t\tSystem.out.print(s[i]);\\n\t\t}\\n\t}\\n}", "target": "71", "substitutes": {"sc": ["sw", "sr", "cont", "ch", "lc", " Sc", "ct", "str", "Sc", " SC", "bc", "se", "SC", "sf", "sem", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "ser", "acc", "rc", "anc", "sche", "ca", "cur", "class", "sb", "cs", "cl", "pc", "exec", "text", "sl", "ner", "ci", "asc", "cv", "sci"], "n": ["j", "nn", "ns", "in", "d", "v", "z", "c", "m", "en", "network", "nc", "t", "ln", "nt", "e", "ne", "p", "number", "f", "net", "q", "o", "N", "l", "num", "x", "ner", "u", "ni", "b"], "k": ["id", "ku", "j", "ch", "kt", "h", "length", "sk", "kick", "in", "d", "dk", "ko", "z", "v", "c", "m", "ok", "y", "ck", "key", "e", "p", "f", "ki", "K", "q", "ik", "o", "w", "kid", "kw", "keep", "l", "mk", "ke", "x", "u", "unk", "b"], "s": ["lines", "gs", "ns", "styles", "d", "fts", "ls", "ss", "ps", "sets", "v", "c", "is", "abs", "parts", "os", "t", "strings", "es", "rows", "qs", "ds", "p", "ses", "f", "ads", "ids", "ans", "ks", "string", "ws", "blocks", "o", "b", "its", "us", "cs", "S", "sites", "l", "si", "results", "words", "letters", "tests", "u", "g", "services", "series", "sv", "ins"], "i": ["id", "inner", "j", "ri", "pi", "mu", "d", "ip", "ii", "z", "v", "io", "ix", "gi", "index", "phi", "uli", "e", "fi", "p", "f", "qi", "ji", "ki", "q", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "oi", "chi", "si", "bi", "x", "ci", "u", "ni", "ti", "uri", "ai", "mini", "temp", "I"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    String S = sc.next();\\n    int count = 0;\\n    String ABC;\\n    \\n    for (int i = 0; i < N-2 ;i++) {\\n      ABC = S.substring(i, i + 3);\\n      if (ABC.equals(\"ABC\")){\\n        count++;\\n      }\\n    }\\n    System.out.print(count);\\n  }\\n}", "target": "110", "substitutes": {"sc": ["sw", "sr", "ch", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "sub", "search", "nc", "sch", "cc", "sh", "sp", "ser", "src", "rc", "sche", "ca", "cur", "sb", "cs", "cl", "pc", "parse", "ner", "exec", "asc", "mc", "sci"], "N": ["Q", "Ni", "Ne", "Ns", "F", "NL", "Num", "Count", "H", "T", "B", "NI", "NT", "NS", "n", "R", "L", "ND", "K", "NR", "Len", "NC", "C", "O", "MN", "D", "SN", "M", "NP", "Z", "X", "V", "P", "Size", "GN", "I"], "S": ["SH", "Si", "SS", "As", "SU", "F", "ESS", "SC", "ss", "SEC", "SL", "AS", "SO", "SR", "Service", "A", "T", "Y", "SA", "FS", "SAM", "INS", "NS", "R", "L", "SIGN", "K", "IN", "C", "O", "SN", "In", "M", "s", "BS", "HS", "U", "IS", "SI", "RS", "X", "V", "P", "G"], "count": ["id", "base", "counter", "check", "length", "len", "offset", "array", "limit", "last", "type", "level", "c", "start", "match", "Count", "second", "index", "data", "key", "number", "n", "string", "found", "test", "code", "num", "sum", "log", "info", "print", "loop", "all", "depth", "size", "list", "total", "name"], "ABC": ["CBC", "BI", "CL", "ab", "ERC", "AB", "BW", "FB", "AA", "abc", "BBC", "ACA", "RAL", "XXX", "A", "B", "NAME", "BB", "NF", "ERA", "Array", "QB", "BA", "ACC", "BC", "C", "EC", "CA", "AW", "CLA", "NA", "CC", "ASC", "FC", "AX", "ANC", "LA", "X", "AAA", "AF", "AAAA", "PB", "REC", "XXXX", "AC", "ARC"], "i": ["id", "slice", "uni", "inner", "j", "left", "ri", "h", "line", "pi", "mu", "in", "d", "init", "ip", "ii", "z", "v", "ix", "c", "io", "start", "abi", "shift", "gi", "index", "data", "k", "key", "p", "n", "fi", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "ni", "uri", "ai", "I", "name"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\nclass Main{\\n\tpublic static void main(String[] args)throws NumberFormatException, IOException{\\n//\t\tSystem.out.println(\" \");\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint times = scan.nextInt();\\n\t\tint num[] =new int[times];\\n\t\tint keisan = 0;\\n\t\tint sosu = 0;\\n\t\tboolean tf = true;\\n\t\tfor(int i=0;i<times;i++){\\n\t\t\tnum[i] = scan.nextInt();\\n\t\t}\\n\\n\t\tfor(int i=0;i<times;i++){\\n\t\t\ttf = true;\\n\t\t\tif(num[i] == 2 || num[i] % 2 == 0){\\n\t\t\t\ttf = false;\\n\t\t\t}\\n\t\t\tint ii=3;\\n\t\t\twhile (ii <= Math.sqrt(num[i])){\\n\t\t\t\tif(num[i] % ii == 0){\\n\t\t\t\t\ttf = false;\\n\t\t\t\t}\\n\t\t\t\tii += 2;\\n\t\t\t}\\n\t\t\tif (num[i] == 2){\\n\t\t\t\ttf = true;\\n\t\t\t}\\n\t\t\tif(tf == true){\\n\t\t\t\tsosu +=1;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sosu);\\n\t}\\n}", "target": "226", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        Integer number = scanner.nextInt();\\n        String string = scanner.next();\\n\\n        int wordCount = string.length();\\n\\n        if (number < wordCount) {\\n            String cuttingWord = string.substring(0,number);\\n            cuttingWord += \"...\";\\n            System.out.println(cuttingWord);\\n        } else {\\n            System.out.println(string);\\n        }\\n    }\\n}\\n", "target": "248", "substitutes": {"scanner": ["nerer", "scaner", "Scanner", "scanener", "nerker", "Scanener", "Scaninner", "Scankin", " scaninner", "scananger", "caninner", "scankin", "caner", "Scananger", "Scaner", "Scanker", "nerner", "nerinner", " scananger", "cananger", "scanker", "cankin", "canker", " scanener", "canner", " scankin", "scaninner", " scaner", "canener"], "number": ["id", "one", "object", "address", "counter", "language", "length", "part", "numbered", "offset", "no", "volume", "count", "square", "type", "start", "now", "url", "position", "word", "point", "amount", "Number", "value", "index", "key", "n", "division", "span", "zero", "digit", "width", "next", "umber", "collection", "version", "num", "letter", "message", "size", "money", "total", "name", "work"], "string": ["slice", "token", "object", "iterator", "address", "single", "thing", "section", "line", "length", "str", "database", "document", "breaking", "international", "array", "prefix", "pointer", "area", "element", "current", "word", "operation", "input", "strings", "value", "data", "padding", "ring", "integer", "result", "reference", "next", "connection", "meaning", "version", "space", "between", "text", "null", "letter", "message", "sequence", "service", "filename", "source", "name", "work"], "wordCount": ["wordSum", "lineCount", " wordLength", "linecount", "WordCount", "wordId", "wordsLength", "wordsSum", " wordSum", " wordcount", "wordLength", "wordscount", " wordId", "wordcount", "wordsCounter", "wordCounter", " wordCounter", "lineCounter", "WordId", "WordSum", "lineLength", "wordsCount", "WordLength", "wordsId"], "cuttingWord": ["headingWork", "savingWord", "drivingString", "catchingWord", "raisingCard", "ppingW", "catchingword", " cuttingword", " cuttingCard", "headingWord", "cuttingString", "headingNumber", "raisingString", "cuttingNumber", "ppingWork", "cuttingword", "cuttingCard", " cuttingW", "cuttingW", "raisingword", " cuttingNumber", "cuttingWork", "headingW", " cuttingWork", "savingString", "savingCard", " cuttingString", "catchingString", "raisingWord", "ppingWord", "savingword", "drivingWord", "ppingNumber", "drivingword"]}}
{"code": "import java.math.BigDecimal;\\nimport java.math.MathContext;\\nimport java.math.RoundingMode;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = Integer.parseInt(sc.next());\\n        BigDecimal sum = BigDecimal.ZERO;\\n        for (int i = 0; i < N; i++) {\\n            BigDecimal n = new BigDecimal(sc.next());\\n            n = BigDecimal.ONE.divide(n, 7, RoundingMode.HALF_EVEN);\\n            sum = sum.add(n, MathContext.UNLIMITED);\\n        }\\n\\n        System.out.println(BigDecimal.ONE.divide(sum, 6, RoundingMode.HALF_EVEN).toPlainString());\\n        sc.close();\\n    }\\n}", "target": "120", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "cer", "sk", "Sc", "squ", "bc", "sf", "SC", "se", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "ec", "search", "nc", "sch", "cc", "sh", "cus", "sp", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "si", "cl", "pc", "parse", "ner", "ci", "asc", "cv", "mc", "sci"], "N": ["Q", "Ni", "J", "Ns", "F", "NL", "NB", "H", "T", "B", "Y", "NT", "NS", "R", "L", "K", "W", "Len", "C", "O", "NA", "D", "SN", "M", "II", "U", "Z", "S", "X", "V", "NN", "P", "Size", "GN", "I"], "sum": ["vol", "h", "sn", "part", "neg", "unit", "in", "init", "Sum", "ss", "summary", "count", "member", "v", "c", "split", "m", "seed", "miss", "mass", "out", "ul", "min", "sh", "mean", "ass", "ne", "gross", "p", "add", "f", "net", "max", "result", "na", "coll", "skip", "average", "sort", "full", "gram", "use", "sign", "up", "s", "num", "si", "loss", "weight", "info", "total", "u", "cost", "null", "size", "all", "b", "scale", "work"], "i": ["j", "ri", "h", "a", "pi", "mu", "I", "in", "d", "ii", "z", "v", "ix", "c", "start", "io", "r", "t", "gi", "index", "k", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "s", "oi", "chi", "l", "si", "bi", "x", "zi", "ci", "u", "ni", "ti", "uri", "ai", "b"], "n": ["none", "j", "nn", "sn", "ns", "nu", "d", "node", "no", "v", "z", "c", "not", "m", "r", "en", "network", "t", "ln", "non", "mn", "nb", "ng", "un", "ne", "e", "p", "cn", "f", "number", "net", "pn", "next", "na", "o", "fn", "rn", "l", "num", "x", "natural", "nan", "ni", "u", "size", "b", "gn"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.math.BigDecimal;\\nimport java.nio.charset.StandardCharsets;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    //\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u5b9a\u7fa9\\n\\n    public static void main(String[] args) throws IOException {\\n        new Main().run();\\n    }\\n\\n    void run() {\\n        Scanner sc = new Scanner(System.in);\\n        char[] array = sc.next().toCharArray();\\n        char[] orgArray = sc.next().toCharArray();\\n        boolean check = false;\\n\\n        for(int i=0; i<array.length; i++){\\n            char[] newArray = new char[array.length];\\n\\n            for(int j=0; j<array.length; j++){\\n                newArray[j] = array[j];\\n            }\\n\\n            char last = newArray[array.length-1];\\n            for(int j=1; j<newArray.length; j++){\\n                array[j] = newArray[j-1];\\n            }\\n            array[0] = last;\\n\\n            check = arrayIsSame(orgArray, array);\\n            if(check){\\n                break;\\n            }\\n        }\\n\\n        if(check) System.out.println(\"Yes\");\\n        else System.out.println(\"No\");\\n    }\\n\\n    boolean arrayIsSame(char[] orgArray, char[] newArray){\\n        for(int i=0; i<orgArray.length; i++){\\n            if(orgArray[i] != newArray[i]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n", "target": "220", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\nclass Program{\\n    int solve(int i, int size){\\n        int temp = i;\\n        for(int j=1;j<size;j++){\\n            temp=temp*10+i;\\n        }\\n        return temp;\\n    }\\n}\\nclass Main{\\n    public static void main(String[] args) {\\n        Program obj = new Program();\\n        Scanner in = new Scanner(System.in);\\n        int N = in.nextInt();\\n        for(int i=1;i<=9;i++){\\n            if(obj.solve(i,String.valueOf(N).length())>=N) {System.out.println(obj.solve(i,String.valueOf(N).length())); break;}\\n            //System.out.println(obj.solve(i,String.valueOf(N).length()));\\n        }\\n    }\\n}", "target": "106", "substitutes": {"i": ["ij", "count", "start", "m", "jit", "gi", "phi", "qi", "chi", "x", "zi", "ci", "mini", "uri", "vi", "d", "ii", "z", "io", "is", "inter", "index", "e", "f", "integer", "xi", "li", "eni", "hi", "u", "ti", "pi", "mu", "init", "ix", "abi", "c", "position", "iter", "p", "n", "ui", "iu", "oi", "bi", "ni", "ai", "I", "id", "slice", "api", "ri", "part", "array", "ip", "ori", "v", "ji", "it", "di", "ini", "ie", "l", "si", "info", "b"], "size": ["enc", "loc", "six", "length", "len", "unit", "count", "z", "c", "en", "shift", "shape", "sec", "k", "e", "number", "n", "max", "width", "code", "num", "sum", "si", "ci", "Size", "ize", "scale", "SIZE", "name"], "temp": ["base", "orig", "wrap", "length", "copy", "str", "offset", "export", "empty", "Temp", "init", "err", "count", "iq", "z", "v", "level", "content", "default", "fake", "c", "current", "emp", "iter", "dest", "shift", "const", "tc", "t", "tr", "input", "value", "index", "pre", "cut", "porary", "result", "partial", "width", "tmp", "test", "fit", "div", "adj", " Temp", "sum", "exec", "frac", "mini", "output", "vi"], "j": ["py", "left", "h", "J", "ij", "js", "job", "d", "jj", "ii", "z", "v", "ix", "im", "y", " ii", "jc", "k", "key", "p", "n", "f", "ji", "aj", "ik", "off", "xi", "li", "it", "o", "ie", "l", "bi", "x", "jo", "ni", "oj", "u", "jp", "g", "b"], "obj": ["obb", "pp", "py", "object", "opt", "cb", "oa", "objects", "po", "art", "so", "js", "init", "bj", "lib", "Obj", "io", "ob", "cmd", "oh", "out", "org", "os", "pt", "func", "nb", "nt", "oss", "n", "p", "ctx", "ocr", "tmp", "op", "css", "pkg", "o", "oi", "act", "code", "cl", "otype", "ops", "rt", "cp", "jp", "rb", "b", "co"], "in": ["inner", "login", "sin", "again", "a", "str", "bin", "resource", "init", "inc", "din", "err", "c", "is", "r", "en", "out", "input", "ln", "session", "data", "ex", "n", "p", "win", "f", "arin", "isin", "IN", "rin", "bis", "inn", "inf", "as", "connection", "pass", "In", "ini", "s", "conf", "l", "log", "kin", "exec", "lin", "reader", "buffer", "b", "ins"], "N": ["Q", "Ne", "Ni", "J", "Ns", "F", "NM", "NL", "No", "Part", "Network", " n", "NB", "Num", "H", "NH", "Name", "Node", "Number", "T", "CNN", "NE", " NI", "Y", "NT", "Na", "NS", "n", "R", "L", "K", "O", "C", "NC", "NA", "D", "SN", "CN", "M", "U", "S", "Z", "X", "V", "NN", "P", " Ne", "Size", "I"]}}
{"code": "import java.io.BufferedReader; \\nimport java.io.IOException; \\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer; \\n  \\npublic class Main\\n{ \\n    static class FastReader \\n    { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() \\n        { \\n            br = new BufferedReader(new\\n                     InputStreamReader(System.in)); \\n        } \\n  \\n        String next() \\n        { \\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n  \\n    public static void main(String[] args) \\n    { \\n        FastReader fr = new FastReader(); \\n        \\n        int N = fr.nextInt();\\n        \\n        int[] h = new int[N];\\n        int[] dp = new int[N];\\n        \\n        Arrays.fill(dp, (int)2e9);\\n        dp[0] = 0;\\n        \\n        for(int i = 0; i < N; i++) {\\n        \th[i] = fr.nextInt();\\n        }\\n        \\n        for (int i = 0; i < N; i++) {\\n        \tif (i+1 < N) {\\n        \t\tdp[i+1] = Math.min(dp[i+1], dp[i] + Math.abs(h[i] - h[i+1])); \\n        \t} if (i+2 < N) {\\n        \t\tdp[i+2] = Math.min(dp[i+2], dp[i] + Math.abs(h[i] - h[i+2]));\\n        \t}\\n        }\\n        \\n        System.out.println(dp[N-1]);\\n        \\n    }\\n\\n}", "target": "1", "substitutes": {"br": ["sr", "ch", "bur", "yr", "ab", "orb", "bro", "Br", "bc", "bb", "err", "bh", "bf", "ber", "BR", "cr", "adr", "r", "db", "gr", "tr", "img", "kr", "fe", "hr", "be", "ur", "obj", "bar", "arr", "mr", "ver", "sp", "cro", "src", "ocr", "bridge", "browser", "pr", "raf", "buf", "bt", "lr", "fb", "bd", "dr", "rt", "bl", "rb", "b"], "st": ["sc", "sw", "ast", "sr", "Str", "sth", "inst", "nd", "ct", "art", "sn", "ft", "ust", "sa", "ut", "ace", " est", "stress", "std", "pe", "style", "r", "sta", "pt", "stab", "const", "ld", "t", "tr", "stri", "tt", "fe", "ste", "nt", "e", "p", "sp", "src", "string", "ost", "pr", "s", "sb", "ST", "rest", "bt", "sign", "rd", "l", "sts", "sty", "sl", "stage", "struct", "rt", "ist", "est", "bl", "ru", "b", "St"], "str": ["id", "enc", "inner", "Str", "doc", "line", "err", "plain", "z", "style", "c", "m", "url", "r", "iter", "STR", "gr", "t", "tr", "stri", "strings", "value", "data", "hr", "e", "p", "n", "sp", "f", "arr", "obj", "pos", "string", "char", "pr", "s", "div", "code", "cl", "exp", "text", "sl", "status", "dr", "u", "bl", "b", "name"], "fr": ["sr", " Fr", "ch", "cf", "j", "yr", "fs", "form", "Fr", "fm", "fore", "fx", "err", "fer", "ir", "BR", "rf", "er", "r", "fp", "FR", "tr", "kr", "fe", "hr", "e", "ur", "ver", "f", "arr", "rl", "cur", "pr", "fin", "per", "lr", "iver", "fre", "parse", "frac", "dr", "rt", "fi", "rb", "her", "fl"], "N": ["Q", "NG", "Ni", "Ne", "J", "Ns", "F", "E", "NM", "NL", " n", "NB", "Num", "H", "NH", "Node", "A", "T", "B", "NI", "NE", "Y", "NT", "Length", "NS", "n", "R", "L", "ND", "K", "NR", "W", "Len", "C", "O", "NC", "NA", "D", "CN", "M", "KN", "MN", "U", "Z", "S", "V", "X", "NN", "P", "Size", "GN", "I", "G"], "h": ["hh", "ch", "j", "d", "ah", "bh", "hw", "hd", "ha", "hy", "ht", "v", "c", "m", "H", "oh", "host", "r", "y", "han", "he", "ul", "gh", "sh", "hr", "k", "e", "p", "n", "ih", "f", "q", "hm", "rh", "ph", "o", "hs", "w", "s", "uh", "l", "hi", "x", "dh", "dr", "u", "hp", "b"], "dp": ["pp", "port", "vp", "api", "address", "loc", "lp", "dep", "uv", "tp", "pi", "dm", "d", "csv", "bb", "deb", "ip", "ps", "pb", "ep", "dB", "default", "adr", "params", "DP", "db", "img", "imp", "pid", "np", "gp", "data", "dt", "dl", "ds", "wp", "dim", "hr", "push", "p", "pos", "sp", "wd", "df", "dc", "dat", "pm", "mm", "grad", "cm", "ph", "pkg", "di", "pad", "sup", "eps", "var", "dq", "mp", "dos", "dh", "P", "dr", "cp", "hp", "zip", "sv", "pd"], "i": ["uni", "inner", "in", "mi", "gi", "phi", "qi", "ali", "col", "field", "chi", "ei", "x", "ci", "mini", "fi", "uri", "d", "ii", "cli", "io", "index", "key", "e", "f", "gu", "xi", "li", "multi", "eni", "isi", "hi", "auto", "u", "ti", "ami", "pi", "mu", "init", "ix", "abi", "c", "y", "uli", "p", "n", "anti", "ik", "ui", "iu", "ic", "oi", "bi", "ni", "ai", "I", "id", "slice", "j", "iii", "api", "ri", "a", "idi", "ip", "ori", "v", "ji", "ki", "q", "it", "o", "di", "ini", "yi", "ie", "l", "si", "info", "my", "b"]}}
{"code": "import java.util.*;class Main{public static void main(String[]g){for(Scanner S=new Scanner(System.in);S.hasNext();)System.out.println(1+(int)Math.log10(S.nextInt()+S.nextInt()));}}\\n", "target": "176", "substitutes": {"g": ["Pattern", "gs", "Str", "str", "ig", "lang", " G", "params", "m", "Input", "gi", "ga", "groups", "reg", "n", "f", "gc", "test", "debug", "gram", "i", "l", "pattern", "cfg", "gen", "msg", "G", "config"], "S": ["Si", "SS", "As", "SU", "LS", "Su", "F", "E", "Sync", "SC", "AS", "TS", "CS", "SR", "Session", "JS", "H", "A", "T", "B", "VS", "OS", "SA", "FS", "PS", "NS", "R", "Client", "L", "K", "SE", "C", "O", "Source", "D", "SN", "WS", "M", "s", "BS", "HS", "Parser", "Default", "N", "IS", "SI", "Socket", "RS", "V", "X", "P", "MS", "GS", "DS", "I", "G"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        if (s.replaceAll(\"eraser\", \"\").replaceAll(\"erase\", \"\").replaceAll(\"dreamer\", \"\").replaceAll(\"dream\", \"\")\\n                .equals(\"\")) {\\n            System.out.println(\"YES\");\\n        \\n        } \\n\\n        else {\\n            System.out.println(\"NO\");\\n        }\\n        \\n        sc.close();\\n    }\\n}", "target": "50", "substitutes": {"sc": ["sw", "ch", "lc", "cer", "Sc", "bc", "sf", "SC", "se", "scope", "sem", "sa", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "nc", "sch", "sec", "sh", "cc", "sp", "rc", "system", "anc", "ca", "cur", "sb", "cs", "go", "log", "cl", "pl", "pc", "ner", "parser", "mc", "sci"], "s": ["opens", "gs", "fs", "sg", "su", "str", "ns", "in", "fts", "services", "ss", "ps", "v", "c", "params", "abs", "is", "m", "os", "t", "es", "states", "strings", "groups", "qs", "ses", "n", "p", "f", "submit", "ans", "string", "ws", "sb", "i", "its", "S", "l", "ours", "u", "ls", "your", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner s = new Scanner(System.in);\\n    int n = s.nextInt();\\n    int t = s.nextInt();\\n    int c = 10000;\\n    for(int i = 0; i < n; i++){\\n      int ci = s.nextInt();\\n      if(s.nextInt() <= t)\\n        c = c > ci ? ci : c;\\n    }\\n    if(c <= 1000)\\n      System.out.println(c);\\n    else\\n      System.out.println(\"TLE\");\\n  }\\n}", "target": "8", "substitutes": {"s": ["lines", "gs", "fs", "sys", "details", "utils", "ns", "js", "rs", "sf", "se", "in", "d", "http", "services", "fts", "ss", "ps", "sets", "v", "is", "m", "abs", "sync", "xs", "es", "strings", "qs", "ds", "e", "ses", "f", "ssl", "ans", "string", "bis", "browser", "ws", "sb", "its", "S", "l", "si", "ches", "vs", "sl", "tests", "parser", "ops", "ms", "u", "ls", "b", "ts", "ins"], "n": ["j", "conn", "sn", "ns", "in", "d", "v", "z", "m", "en", "y", "nc", "nb", "k", "nt", "cn", "e", "ne", "p", "f", "net", "ot", "o", "w", "nin", "N", "l", "num", "x", "u", "b"], "t": ["j", "h", "st", "in", "d", "count", "ta", "z", "v", "at", "type", "m", "y", "tc", "pt", "T", "dt", "k", "nt", "e", "p", "f", "q", "o", "l", "x", "total", "u", "size", "b", "ts"], "c": ["sc", "cu", "cf", "lc", "h", "ct", "cin", "in", "d", "cit", "count", "fc", "uc", "z", "cr", "m", "ac", "tc", "y", "ec", "nc", "ce", "cc", "cas", "k", "vc", "e", "cy", "p", "cn", "f", "xc", "dc", "CI", "toc", "cm", "C", "ca", "ic", "cur", "o", "col", "cs", "l", "pc", "x", "u", "cp", "size", "mc", "b"], "i": ["id", "j", "lc", "pi", "in", "mi", "ii", "ip", "z", "v", "ix", "io", "y", "gi", "phi", "e", "p", "f", "qi", "ji", "ki", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "oi", "chi", "l", "si", "bi", "hi", "x", "zi", "u", "ni", "ti", "fi", "ai", "I"], "ci": ["sc", "cu", "aci", "cf", "lc", "ice", "ct", "pi", "cin", "cci", "ii", "cli", "cit", "uc", "cia", "fc", "tc", "nc", "ce", "cc", "oci", "cy", "alpha", "dc", "CI", "li", "cm", "ic", "ca", "di", "ini", "cs", "si", "pc", "uci", "ni", "ai", "ti", "co"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tFastScanner sc = new FastScanner(System.in);\\n\t\tint A = Integer.parseInt(sc.next());\\n\t\tint B = Integer.parseInt(sc.next());\\n\t\tif (A<B) {\\n\t\t\tint tmp = A;\\n\t\t\tA = B;\\n\t\t\tB = tmp;\\n\t\t}\\n\t\tSystem.out.println(Math.max(2*A-1, A+B));\\n\\n\t}\\n\\n}\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n     }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    }\\n}", "target": "75", "substitutes": {"sc": ["sw", "enc", "ch", "lc", "soc", " Sc", "cer", "scl", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sh", "cus", "dc", "src", "ocr", "rc", "system", "anc", "sche", "ca", "C", "scene", "cs", "cl", "pc", "ner", "ci", "asc", "cv", "sci"], "A": ["As", "AR", "EA", "F", "E", "MA", "AB", "AP", "AD", "AA", "IA", "H", "Ma", "Input", "T", "Y", "mA", "SA", "PA", "BB", "L", "AM", "Array", "API", "BA", "C", "CA", "O", "NA", "D", "ASC", "AW", "M", "HA", "AH", "U", "S", "N", "Java", "LA", "X", "AF", "TA", "P", "OA", "V", "I", "G", "AC"], "B": ["BI", "J", "F", "BM", "E", "LB", "DB", "CB", "AB", "FB", "NB", "BF", "SB", "UB", "T", "Bs", "TB", "Y", "BU", "BER", "BB", "R", "L", "WB", "QB", "BA", "W", "BC", "C", "O", "GB", "D", "b", "BS", "U", "N", "OB", "X", "V", "BE", "P", "PB", "VB", "BD", "I", "G"], "tmp": ["xxxx", "amp", " app", "abb", " amp", "Temp", " mm", " backup", "bb", " XXX", " np", "bf", "abc", "area", "yy", "TB", " beta", "nb", "MP", " img", "BB", "phi", "beta", "obj", "alpha", "acc", "mm", " delta", "pad", "sb", "kk", "ff", "sup", "fb", "mp", " temporary", " temp", "rb", "temp"], "reader": ["ler", "token", "inner", "ter", "ri", "layer", "file", "line", "oder", "or", "service", "ro", "resource", "builder", "report", "ry", "ruby", "table", "server", "er", "io", "pointer", "manager", "Reader", "url", "content", "iter", "r", "read", "reading", "this", "upper", "input", "rar", "rr", "data", "loader", "e", "lock", "driver", "worker", "processor", "rc", "system", "row", "feed", "source", "per", "ner", "handler", "parser", "stream", "rer", "buffer", "writer", "entry"], "tokenizer": [" tokenoser", "tokeniz", "okenner", "materialner", "tokenize", "okenizer", "tokenner", "tokener", " tokenizing", "recogniser", "Tokenize", "Tokenizer", "normalizer", " tokeniser", "serialner", " tokenization", "okenization", "serialize", "materialoser", "normalize", "generizer", " tokenner", "okenize", "generiter", "normaliser", "serializing", "Tokener", "okenoser", "tokeniser", " tokenizers", " tokeniter", "recogner", "serialization", "okenizers", "serializers", "tokeniter", "okenener", "Tokenener", "serialener", " tokeniz", "generize", "tokenizers", "tokenener", "okeniser", "okener", "tokenizing", "tokenoser", "tokenization", "recognizer", " tokener", "materializ", "materializer", "generizing", "okeniter", " tokenize", "serializer", "okenizing", "okeniz", "recognization", "normalner", " tokenener"], "in": ["id", "inner", "path", "login", "doc", "file", "line", "str", "bin", "or", "resource", "d", "user", "din", "init", "err", "inc", "io", "c", "OUT", "is", "m", "r", "out", "read", "input", "data", "e", "ex", "f", "lock", "IN", "inn", "as", "connection", "it", "pass", "In", "ini", "readable", "val", "l", "log", "info", "exp", "x", "lin", "stream", "socket", "buffer", "b", "source", "ins"], "n": ["j", "none", "left", "nn", "Ns", "len", "sn", "ns", "d", "no", "init", "node", "count", "v", "z", "c", "an", "m", "norm", "r", "en", "y", "network", "nc", "t", "mn", "nb", "k", "nt", "e", "number", "p", "ne", "f", "net", "span", "nat", "na", "o", "w", "s", "adj", "N", "l", "num", "x", "nan", "g", " N", "all", "size", "b", "name"], "a": ["instance", "aw", "ba", "ab", "ma", "fa", "aaa", "aa", "sa", "aux", "am", "ata", "array", "ka", "ha", "count", "z", "an", "area", "c", "ia", "ac", "r", "y", "ana", "tta", "ga", "data", "index", "ad", "ea", "p", "alpha", "f", "aj", "span", "la", "active", "va", "as", "na", "ca", "s", "div", "ama", "code", "da", "au", "auto", "u", "g", "all", "action", "ai", "b"], "i": ["id", "j", "ri", "h", "pi", "mu", "I", "mi", "my", "init", "d", "ii", "ip", "z", "v", "io", "m", "y", "gi", "index", "uli", "phi", "key", "e", "p", "f", "qi", "ji", "q", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "yi", "field", "chi", "l", "si", "bi", "hi", "x", "ci", "u", "ni", "mini", "fi", "ai", "uri", "b", "name"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int X = sc.nextInt();\\n        int Y = sc.nextInt(); \\n        int Z = sc.nextInt();\\n        if(X + Y + Z >= 22) {\\n        \tSystem.out.println(\"bust\");\\n        }else {\\n        \tSystem.out.println(\"win\");\\n        }\\n    }\\n}", "target": "129", "substitutes": {"sc": ["sw", "cont", "sr", "ch", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "ck", "nc", "search", "cc", "sh", "cus", "ctx", "sp", "ser", "acc", "ocr", "rc", "sche", "ca", "cur", "coll", "sb", "cs", "cl", "pc", "parse", "ner", "sl", "ci", "asc", "cv", "sci"], "X": ["Q", "CL", "DD", "F", "INT", "RH", "ZX", "XY", "XP", "YY", "Width", "H", "XXX", "A", "DX", "TX", "XL", "R", "L", "FF", "K", "W", "O", "D", "Right", "EL", "M", "AX", "U", "N", "TH", "IP", "x", "V", "P", "Cell", "XX", "I"], "Y": ["YS", "Q", "J", "F", "E", "PI", "XY", "YR", "YY", "TW", "H", "y", "MY", "A", "T", "B", "YA", "R", "L", "NY", "YC", "W", "C", "O", "YD", "D", "M", "EY", "S", "N", "TY", "V", "P", "IX", "XX", "I", "G"], "Z": ["Time", "Q", "CL", "SH", "SS", "F", "ZX", "ZA", "AZ", "SL", "NZ", "z", "YY", "H", "T", "Zip", "L", "FF", "K", "W", "C", "O", "Az", "D", "M", "FL", "ZI", "ZZ", "N", "S", "Zone", "V", "XX", "G", "ZE", "IZ"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    private static Scanner sc;\\n    static int w;\\n    static int h;\\n    static int x;\\n    static int y;\\n    static int r;\\n    \\n\\n\tpublic static void main(String[] args) {\\n    \tsc = new Scanner(System.in);\\n    \tw = sc.nextInt();\\n    \th = sc.nextInt();\\n    \tx = sc.nextInt();\\n    \ty = sc.nextInt();\\n    \tr = sc.nextInt();\\n    \tif (x-r<0||x+r>w ||y-r<0||y+r>h){\\n    \t\tSystem.out.println(\"No\");\\n    \t}else{\\n    \t\tSystem.out.println(\"Yes\");\\n    \t}\\n    }\\n}\\n", "target": "171", "substitutes": {"sc": ["sw", "cont", "ch", "console", "lc", "soc", " Sc", "cb", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "cli", "fc", "uc", "cr", "esc", "sq", "c", "osc", "scan", "spec", "sync", "settings", "tc", "ec", "sub", "nc", "this", "cc", "cor", "sec", "cus", "core", "ctx", "sp", "dc", "ser", "src", "rc", "sche", "ca", "cur", "sb", "cs", "si", "cl", "exp", "pc", "parse", "exec", "RC", "ci", "asc", "cv", "mc", "sci"], "w": ["fw", "sw", "aw", "wx", "a", "wh", "d", "hw", "z", "v", "c", "m", "t", "k", "wd", "e", "p", "n", "win", "f", "q", "W", "wa", "width", "ws", "window", "ww", "o", "ow", "i", "l", "wt", "weight", "u", "b", "work"], "h": ["hh", "ch", "height", "d", "ah", "bh", "z", "v", "ht", "c", "m", "H", "en", "oh", "t", "gh", "sh", "hr", "k", "e", "p", "n", "ih", "f", "end", "eh", "q", "hm", "rh", "ww", "ph", "o", "hs", "th", "l", "hi", "u", "g", "b", "work"], "x": ["j", "wx", "right", "a", "xx", "rx", "in", "d", "no", "xy", "cross", "z", "v", "_", "c", "ix", "m", "an", "en", "tx", "xs", "t", "index", "k", "e", "ex", "n", "p", "f", "q", "wa", "width", "ww", "o", "ax", "s", "i", "l", "X", "u", "b"], "y": ["py", "j", "ch", "yr", "a", "d", "xy", "ry", "hy", "z", "v", "ny", "c", "m", "yy", "ay", "t", "sh", "yo", "Y", "e", "ty", "p", "n", "oy", "f", "cy", "q", "dy", "ky", "o", "vy", "ey", "i", "yi", "ya", "l", "u", "ye", "b", "sy"], "r": ["sr", "j", "yr", "right", "or", "rs", "d", "err", "ry", "ir", "z", "v", "er", "c", "cr", "m", "t", "rr", "kr", "re", "nr", "hr", "e", "ur", "p", "n", "R", "f", "mr", "q", "br", "rc", "rh", "o", "pr", "i", "rd", "lr", "l", "fr", "dr", "rt", "ar", "rb", "rf", "b"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint x = sc.nextInt();\\n\t\tint sum = 0;\\n\t\tint count = 0;\\n\t\t\\n\t\tfor (int i = 0; i <= a; i++) {\\n\t\t\t\\n\t\t\tfor (int j = 0; j <= b; j++) {\\n\t\t\t\t\\n\t\t\t\tfor (int j2 = 0; j2 <= c; j2++) {\\n\t\t\t\t\tsum = (500 * i) + (100 * j) + (50 * j2);\\n\t\t\t\t\t\\n\t\t\t\t\tif(x == sum) {\\n\t\t\t\t\t\tcount ++;\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t}\\n\t\t\t\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(count);\\n\t}\\n\\n}", "target": "127", "substitutes": {"sc": ["sw", "cont", "lc", "app", "soc", " Sc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", "ss", "fc", "uc", "cr", "esc", "scan", "osc", "sync", "tc", "ec", "sub", "nc", "cc", "sec", "cus", "ctx", "sp", "ser", "acc", "ocr", "src", "rc", "anc", "sche", "cam", "cur", "coll", "class", "sb", "cs", "cl", "exp", "pc", "parse", "ner", "text", "ci", "asc", "cv", "sci"], "a": ["base", "api", "ab", "oa", "fa", "aa", "sa", "am", "an", "area", "ac", "y", "A", "ga", "ada", "ad", "ea", "p", "n", "alpha", "aj", "la", "va", "ca", "as", "ama", "asa", "da", "au", "ae", "ai"], "b": ["ba", "h", "cb", "ab", "bc", "d", "z", "v", "r", "y", "db", "B", "nb", "k", "e", "p", "n", "f", "eb", "ca", "bs", "o", "s", "lb", "sb", "l"], "c": ["cu", "cf", "ch", "lc", "h", "d", "uc", "z", "v", "ac", "r", "y", "con", "cc", "k", "vc", "e", "cy", "p", "n", "f", "C", "o", "s", "cs", "l", "ci", "u", "size"], "x": ["h", "xx", "d", "cross", "z", "v", "ix", "m", "r", "y", "mass", "amount", "t", "value", "index", "k", "e", "number", "p", "n", "xc", "f", "alpha", "q", "xi", "xp", "ic", "w", "s", "l", "num", "dx", "X", "u", "g", "size"], "sum": ["vol", "fill", "cum", "unit", "in", "sa", "Sum", "share", "summary", "member", "v", "style", "start", "spread", "seed", "match", "miss", "mass", "out", "amount", "min", "mean", "index", "key", "cat", "p", "n", "alpha", "f", "cache", "acc", "max", "cal", "skip", "average", "sort", "coll", "us", "space", "num", "si", "weight", "loss", "parse", "g", "u", "all", "cost", "size", "um", "scale", "total"], "count": ["id", "counter", "check", "length", "len", "part", "offset", "limit", "type", "z", "call", "start", "now", "match", "Count", "second", "index", "data", "key", "cat", "number", "n", "f", "cache", "max", "found", "test", "coll", "col", "code", "num", "weight", "info", "depth", "size", "list", "total"], "i": ["id", "in", "mi", "d", "ii", "ip", "z", "v", "io", "is", "ori", "ix", "y", "k", "e", "p", "f", "qi", "ji", "ki", "ik", "ui", "xi", "li", "iu", "di", "ini", "ie", "yi", "l", "si", "bi", "hi", "zi", "ci", "u", "ni", "ai", "I"], "j": ["ch", "h", "ja", "J", "js", "ij", "job", "d", "jj", "ii", "z", "v", "m", "y", "t", "jc", "jl", "k", "e", "dj", "p", "n", "f", "ji", "aj", "q", "li", "it", "o", "ie", "l", "uj", "jo", "oj", " dj", "u", "jp", "g"], "j2": [" j5", "p02", "er2", "J2", "J1", "p2", "i5", "j02", " j02", "z8", "ja5", "J5", "z2", " j1", "z02", "j8", "p1", "er1", "i1", "z5", "j5", "ja02", "i2", "ja8", "ja2", "p5", "j1", " j8", "er02", "er5"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.NoSuchElementException;\\n\\nclass Main {\\n\\n  static class Solver {\\n    final FastScanner sc;\\n    final PrintWriter writer;\\n\\n    Solver(final FastScanner sc, final PrintWriter writer) {\\n      this.sc = sc;\\n      this.writer = writer;\\n    }\\n\\n    void run() {\\n      String s = sc.next();\\n      StringBuilder sb = new StringBuilder();\\n      for (int i = 0; i < s.length(); i++) {\\n        sb.append(\"x\");\\n      }\\n      writer.println(sb.toString());\\n    }\\n  }\\n\\n  public static void main(final String[] args) {\\n    final FastScanner sc = new FastScanner();\\n    try (final PrintWriter w = new PrintWriter(System.out)) {\\n      new Solver(sc, w).run();\\n      w.flush();\\n    }\\n  }\\n\\n  // CRT stuff\\n  static class MOD {\\n    private static final int MOD = (int) 1e9 + 7;\\n\\n    static long plus(long x, long y) {\\n      x %= MOD;\\n      y %= MOD;\\n      return (x + y) % MOD;\\n    }\\n\\n    static long sub(long x, long y) {\\n      x %= MOD;\\n      y %= MOD;\\n      return (x - y + MOD) % MOD;\\n    }\\n\\n    static long multi(long x, long y) {\\n      x %= MOD;\\n      y %= MOD;\\n      return x * y % MOD;\\n    }\\n\\n    static long div(long x, long y) {\\n      x %= MOD;\\n      y %= MOD;\\n      return x * pow(y, MOD - 2) % MOD;\\n    }\\n\\n    static long pow(final long a, final long p) {\\n      if (p == 0)\\n        return 1;\\n      if (p % 2 == 0) {\\n        final long halfP = p / 2;\\n        final long root = pow(a, halfP);\\n        return root * root % MOD;\\n      } else\\n        return a * pow(a, p - 1) % MOD;\\n    }\\n  }\\n\\n  // FastScanner\\n  static class FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n\\n    public FastScanner() {\\n    }\\n\\n    private boolean hasNextByte() {\\n      if (ptr < buflen) {\\n        return true;\\n      } else {\\n        ptr = 0;\\n        try {\\n          buflen = in.read(buffer);\\n        } catch (final IOException e) {\\n          e.printStackTrace();\\n        }\\n        if (buflen <= 0) {\\n          return false;\\n        }\\n      }\\n      return true;\\n    }\\n\\n    private int readByte() {\\n      if (hasNextByte())\\n        return buffer[ptr++];\\n      else\\n        return -1;\\n    }\\n\\n    private boolean isPrintableChar(final int c) {\\n      return 33 <= c && c <= 126;\\n    }\\n\\n    public boolean hasNext() {\\n      while (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n        ptr++;\\n      return hasNextByte();\\n    }\\n\\n    public String next() {\\n      if (!hasNext())\\n        throw new NoSuchElementException();\\n      final StringBuilder sb = new StringBuilder();\\n      int b = readByte();\\n      while (isPrintableChar(b)) {\\n        sb.appendCodePoint(b);\\n        b = readByte();\\n      }\\n      return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n      if (!hasNext())\\n        throw new NoSuchElementException();\\n      long n = 0;\\n      boolean minus = false;\\n      int b = readByte();\\n      if (b == '-') {\\n        minus = true;\\n        b = readByte();\\n      }\\n      if (b < '0' || '9' < b) {\\n        throw new NumberFormatException();\\n      }\\n      while (true) {\\n        if ('0' <= b && b <= '9') {\\n          n *= 10;\\n          n += b - '0';\\n        } else if (b == -1 || !isPrintableChar(b)) {\\n          return minus ? -n : n;\\n        } else {\\n          throw new NumberFormatException();\\n        }\\n        b = readByte();\\n      }\\n    }\\n\\n    public int nextInt() {\\n      final long nl = nextLong();\\n      if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n        throw new NumberFormatException();\\n      return (int) nl;\\n    }\\n\\n    public double nextDouble() {\\n      return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(final int n) {\\n      final int[] a = new int[n];\\n      for (int i = 0; i < n; i++)\\n        a[i] = nextInt();\\n      return a;\\n    }\\n\\n    public long[] nextLongArray(final int n) {\\n      final long[] a = new long[n];\\n      for (int i = 0; i < n; i++)\\n        a[i] = nextLong();\\n      return a;\\n    }\\n  }\\n}", "target": "122", "substitutes": {"sc": ["sr", "sw", "path", "ch", "lc", "loc", " Sc", "cer", "ct", "scl", "Sc", "bc", "scope", "SC", "se", "sa", "shell", "ss", "sel", "server", "cli", "uc", "fc", "cr", "esc", "sq", "c", "scan", "osc", "spec", "sync", "search", "ec", "nc", "sch", "cc", "sh", "sec", "cus", "core", "desc", "ctx", "sp", "dc", "src", "acc", "rc", "system", "anc", "sche", "ca", "cs", "cl", "pc", "parse", "ner", "exec", "ci", "asc", "cv", "reader", "inst", "source", "config", "sci"], "writer": ["sw", "wb", "writers", "inner", "wx", "RW", "ter", "creator", "writing", "document", "wl", "rew", "builder", "hw", "root", "Writer", "server", "method", "master", "er", "outer", "io", "ee", "this", "director", "war", "word", "out", "wp", "wait", "e", "ew", "entry", "written", "wan", "author", "worker", "driver", "W", "walker", "wa", "rw", "ws", "wr", "ww", "riter", "source", "w", "writ", "parent", "wt", "nw", "her", "wer", "parser", "handler", "output", "stream", "reader", "buffer", "temp", "write", "work"], "s": ["opens", "sw", "gs", "fs", "su", "ings", "str", "ns", "js", "sections", "sf", "fts", "services", "ss", "ps", "sets", "v", "c", "parts", "xs", "strings", "states", "qs", "ses", "n", "p", "f", "ans", "string", "ws", "bs", "as", "gets", "w", "seconds", "S", "l", "si", "obs", "sl", "sv", "u", "ls", "b", "ts", "ins"], "sb": ["wb", "obb", "sth", "ib", "ab", "sg", "zb", "su", "orb", "soc", "bg", "rob", "abb", "lab", "xb", "bc", "sf", "sa", "bb", "bh", "amb", "ss", "pb", "bsp", "bj", "bf", "usb", "gb", "SB", "stab", "db", "nb", "BB", "bps", "sp", "bp", "eb", "src", "abl", "bs", "b", "buf", "lb", "bt", "si", "fb", "bd", "rb", "sv"], "i": ["id", "j", "ri", "h", "a", "length", "pi", "mu", "I", "d", "init", "ii", "count", "v", "at", "c", "start", "abi", "t", "gi", "data", "k", "phi", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "it", "o", "di", "oi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ti", "uri", "ai", "b"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) throws java.lang.Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String[] strArray = new String[n];\\n        for (int i = 0; i < n; i++) {\\n            char[] ca = sc.next().toCharArray();\\n            Arrays.sort(ca);\\n            strArray[i] = String.valueOf(ca);\\n        }\\n        sc.close();\\n        Arrays.sort(strArray);\\n\\n        long count = 1;\\n        long res = 0;\\n        String before = \"\";\\n        String current = \"\";\\n        for (String str : strArray) {\\n            before = current;\\n            current = str;\\n            if (before.equals(current)) {\\n                count++;\\n            } else {\\n                res += (count * (count - 1)) / 2;\\n                count = 1;\\n            }\\n        }\\n        res += (count * (count - 1)) / 2;\\n\\n        System.out.print(res);\\n    }\\n}\\n", "target": "32", "substitutes": {"sc": ["sw", "sr", "isc", "ch", "lc", "cer", "st", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "sem", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "search", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "src", "rc", "system", "anc", "sche", "cur", "sb", "cms", "cs", "si", "cl", "pc", "ner", "sl", "ci", "asc", "cv", "mc", "sci"], "n": ["j", "nn", "h", "len", "sn", "ns", "in", "d", "no", "nl", "z", "c", "m", "r", "en", "y", "network", "nc", "t", "ln", "nb", "k", "nt", "e", "number", "p", "ne", "f", "net", "o", "w", "s", "N", "num", "l", "x", "ni", "u", "size", "b"], "strArray": ["spFunction", "brarray", "brList", "StrList", "brArray", "strarray", " strList", "charArray", "codeArray", "stringArray", "brFunction", "spArray", "strList", " strRoot", " strarray", " strFunction", "stringString", "errArray", " strString", "codeList", "arrArray", "arrArea", "chararray", "codearray", "stringList", "errarray", "spList", "StrArray", "errList", "strArea", "charRoot", "StrString", "Strarray", "errString", "stringArea", "charString", "arrList", "codeRoot", "strFunction", "sparray", "strString", "charList", "strRoot", " strArea", "arrString"], "i": ["id", "slice", "j", "api", "ri", "h", "pi", "mu", "I", "in", "mi", "d", "init", "ii", "ip", "cli", "z", "v", "io", "c", "ix", "abi", "y", "gi", "index", "uli", "e", "p", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "ai", "ti"], "ca": ["cu", "sea", "cf", "ba", "aco", "fa", "bc", "sa", "aca", "ka", "ha", "anca", "ta", "esc", "c", "area", "cca", "ac", "ia", "ce", "cc", "cas", "ga", "ada", "sha", "pa", "ria", "acc", "la", "anc", " Ca", "car", "CA", "cm", "na", "ra", "cs", "da", "Ca", "arc", "ci", "cal"], "count": ["id", "ch", "base", "error", "counter", "length", "len", "part", "only", "force", "group", "process", "last", "child", "type", "old", "call", "c", "now", "start", "name", "Count", "r", "match", "progress", "big", "nt", "key", "cat", "number", "p", "deep", "cache", "max", "result", "more", "char", "found", "next", "seq", "test", "coll", "col", "ref", "allow", "parent", "code", "sum", "num", "patch", "time", "order", "all", "depth", "size", "list", "total"], "res": ["vals", "details", "right", "resolution", "js", "rec", "rs", "resource", "err", "ps", "ress", "cr", " result", "ras", "response", "rus", "r", "gr", "progress", "es", "re", "data", "pre", "rez", "req", "reg", "ret", "rev", "arr", "ries", "result", "rc", "seq", "css", " results", "s", "range", "score", "cs", "Res", "sum", "exp", "resp", "results", "RES", "frac", "real", "success"], "before": ["then", "original", "inner", "base", " prev", "orig", "right", "front", "both", "in", "old", "last", "prefix", "head", "start", "now", "future", "this", "from", "above", "pre", "with", "anti", "prev", "after", "Before", "string", "next", "currently", "parent", "self", "initial", "first", "without", "post", "source", "name"], "current": ["original", "lc", "api", "right", "until", "other", "resource", "when", "latest", "Current", "cover", "past", "master", "old", "reported", "prefix", "now", "complete", "future", "r", "recent", "tr", "progress", "pre", "continue", "prev", "after", "result", "partial", "br", "string", "active", "next", "currently", "cur", "existing", "parent", "actual", "common", "later", "attr", "first", "valid", "copy", "initial", "update", "temp"], "str": ["id", "inner", "Str", "st", " cur", "cr", "c", "start", "future", "r", "STR", "recent", "t", "tr", "stri", "data", "pre", "p", "ring", "prev", "arr", "f", "after", "br", "string", "next", "cur", "pr", "s", "code", "fr", "text", "x", "first", "raw"]}}
{"code": "import java.util.Scanner;\\nclass Main {\\n\tint [][] cards = new int [5][15];\\n\tprivate  static String[] cards2 = {\"0\",\"S\",\"H\",\"C\",\"D\"};\\n\tint n,j,i,k,cards4,Nu;\\n\tString cards3;\\n\tpublic void ca() {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tfor(j = 1;j <= 4;j++) {\\n\t\t\tfor(i = 1 ; i <= 13; i++) {\\n\t\t\t\tk = i;\\n\t\t\t\tcards[j][i] = k;\\n\t\t\t}\\n\t\t}\\n\t\tn = sc.nextInt();\\n\t\tfor(k = 0 ; k < n ; k++) {\\n\t\t\tcards3 = sc.next();\\n\t\t\tcards4 = sc.nextInt();\\n\t\t\tif(cards3.equals( \"S\" )) {\\n\t\t\t\tNu = 1;\\n\t\t\t} else if(cards3.equals( \"H\" )) {\\n\t\t\t\tNu = 2;\\n\t\t\t} else if(cards3.equals( \"C\" )) {\\n\t\t\t\tNu = 3;\\n\t\t\t} else if(cards3.equals( \"D\" )) {\\n\t\t\t\tNu = 4;\\n\t\t\t}\\n\t\t\tswitch(Nu) {\\n\t\t\t\tcase 1:\\n\t\t\t\t\tfor(j = 1;j <= 13 ; j++) {\\n\t\t\t\t\t\tif(cards4 == cards[1][j]) {\\n\t\t\t\t\t\t\tcards[1][j] -= cards4;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase 2:\\n\t\t\t\t\tfor(j = 1;j <= 13 ; j++) {\\n\t\t\t\t\t\tif(cards4 == cards[2][j]) {\\n\t\t\t\t\t\t\tcards[2][j] -= cards4;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase 3:\\n\t\t\t\t\tfor(j = 1;j <= 13 ; j++) {\\n\t\t\t\t\t\tif(cards4 == cards[3][j]) {\\n\t\t\t\t\t\t\tcards[3][j] -= cards4;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase 4:\\n\t\t\t\t\tfor(j = 1;j <= 13 ; j++) {\\n\t\t\t\t\t\tif(cards4 == cards[4][j]) {\\n\t\t\t\t\t\t\tcards[4][j] -= cards4;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tbreak;\\n\t\t\t\tdefault:\\n\t\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tfor(j = 1;j <= 4;j++) {\\n\t\t\tfor(i = 1;i <= 13;i++) {\\n\t\t\t\tif(cards[j][i] != 0) {\\n\t\t\t\t\tSystem.out.printf(\"%S %d\\n\",cards2[j],cards[j][i]);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n\tpublic static void main(String[] agrs) {\\n\t\tnew Main().ca();\\n\t}\\n}", "target": "189", "substitutes": {"cards": ["opens", "lines", "classes", "rules", "fields", "features", "ips", "includes", "changes", "lights", "planes", "cons", "codes", "games", "keys", "pages", "caps", "files", "orders", "breaks", "ards", "days", "images", "services", "styles", "checks", "draw", "flows", "ports", "lists", "rights", "cuts", "Card", "frames", "cas", "rows", "groups", "stars", "events", "balls", "names", "dates", "comments", "places", "cell", "ids", "windows", "cells", "weights", "photos", "blocks", "levels", "members", "compl", "actions", "cats", "books", "tags", "citizens", "limits", "words", "users", "tests", "bands", "letters", "card", "forms"], "cards2": ["words3", "card8", "cards8", "words8", " cards8", "words4", "card2", "words2", "card4", "card3"], "n": ["nn", "h", "conn", "a", "len", "nu", "ns", "sn", "in", "d", "no", "z", "v", "c", "m", "r", "y", "en", "nc", "Na", "cn", "e", "un", "p", "ne", "f", "nt", "net", "pn", "inn", "o", "w", "s", "N", "l", "num", "x", "nan", "u", "ni", "b"], "j": ["jet", "ijk", "h", "ij", "jj", "ju", "er", "je", "m", "r", "jit", "jl", "qi", "jing", "w", "x", "ja", "d", "ii", "z", "jen", "key", "e", "f", "li", "pr", "note", "u", "J", "job", "init", "jam", "c", "y", "json", "p", "aj", "br", "th", "adj", "el", "fr", "jo", "dy", "jp", "a", "js", "other", "ind", "v", "t", "jc", "jon", "dj", "obj", "kj", "ji", "q", "it", "o", "ie", "l", "uj", "oj", "g", "b"], "i": ["id", "ri", "h", "pi", "in", "d", "mi", "ii", "ip", "ind", "z", "v", "ori", "c", "ix", "m", "io", "is", "y", "gi", "p", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "iu", "it", "o", "b", "eni", "ini", "di", "ie", "oi", "yi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "ti", "fi", "ai", "I"], "k": ["id", "ijk", "h", "sk", "ek", "kick", "d", "dk", "kh", "ka", "ko", "kn", "z", "v", "c", "m", "r", "y", "ok", "ck", "uk", "key", "ak", "p", "f", "ks", "K", "q", "ki", "ik", "o", "w", "s", "kid", "kw", "kk", "l", "mk", "ke", "x", "u", "unk", "b"], "cards4": ["cards256", "codesfour", "cards44", "ards24", "codes54", "args3", "fields4", "cards1", "cellsfour", "ardsfour", "fieldsFour", "cats256", "lines8", "ards4", "files4", "groupsfour", "cellsFour", "itemsfour", "cards84", "cardsfour", "limits2", "lettersfour", "cutsfour", "codesFour", " cards6", "card1", "letters110", "cats110", "cards384", "lettersFour", "cats84", "cards6", "ards6", "limits8", "cards24", "card384", "argsfour", "cardFour", "linesFour", "items4", "limits384", "card3", "limitsfour", "files44", "codes40", "codes4", "groupsFour", "argsFour", "lines84", "card2", "card4", "cats4", "rows4", "cuts4", "ards3", "limits4", "cuts3", " cards40", "ards2", "rows24", "cards110", "cutsFour", "limitsFour", "cells4", "rows2", "codes6", " cards54", "cards54", " cardsFour", "cardsFour", "lines256", "cards8", "ards40", "items8", "card24", "linesfour", "fieldsfour", "codes44", "checks384", "letters84", "checks2", "files54", " cardsfour", "lines110", "filesfour", "args4", "itemsFour", "checks4", "groups4", "lines4", "cards40", "fields74", "checksFour", "cards74", "letters4", "letters256", "ards54", "ards44", "groups74", " cards1", "ards1", "letters74"], "Nu": ["NGu", "Snu", "Ccu", "NLu", "DU", " Nnu", "Numberus", "SnU", "NGus", "Cui", "Puku", "Nus", "NiU", "nu", "Numberui", "Renus", "Lencu", "nus", "Dnu", "Lennu", "nui", "Ncu", "Renu", "Nicu", "Cnu", " Ncu", "Numus", "Pus", "Numuid", "Cus", "NLui", "Numberu", "Pu", "NGU", "Lenu", "ncu", "Nuid", "nU", "LenU", "nnu", "Numberuid", "Cu", " Nui", "Du", "PU", "Cuid", "Renuku", "NLcu", "NLus", "Nui", "NGuku", "RenU", "Nnu", "Nuku", "Niu", "NU", "Snus", "Sncu", "Numu", "Dcu", "Numui", " Nus", "Nius"], "cards3": ["groups3", "card5", "breaks5", "breaks2", "fields53", "cards53", "checks3", "card2", "caps1", "cards6", "ardsThree", " cards5", "cases3", "checks53", "groups83", "breaks3", "checks6", "cards1", "codes83", "ards3", "ards83", "cuts3", " cards83", "caps3", "casesThree", "cuts53", "cards83", "cuts6", "codes53", "codes3", " cards03", "card3", "groups53", "cardsThree", " cards53", " cardsThree", "codes1", "codes6", "cases83", "cards5", "fields03", "breaks03", "caps2", "card03", "codes2", "cards03", "caps03", " cards1", "codes03", "fields3"], "sc": ["sw", "cont", " rc", "ch", "lc", "soc", "cer", "ct", "scl", " cur", "Sc", " sw", "bc", "se", "SC", "scope", "sem", " scr", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "r", "tc", "ec", "nc", "cc", "sec", "sh", "cus", "desc", "sp", "dc", "cle", "rc", "anc", "cur", " src", "cs", "l", "cl", "exec", "pc", "ner", "ci", "asc", "sci"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\tint[] a = new int[m];\\n\t\tint[] b = new int[m];\\n\t\tfor (int i = 0; i < m; i++) {\\n\t\t\ta[i] = scan.nextInt();\\n\t\t\tb[i] = scan.nextInt();\\n\t\t}\\n\t\tint[] r = new int[n+10];\\n\t\tArrays.fill(r, 0);\\n\t\tfor (int i = 0; i < m; i++) {\\n\t\t\tr[a[i]]++;\\n\t\t\tr[b[i]]++;\\n\t\t}\\n\t\tfor (int i = 1; i <= n; i++) {\t\t\t\\n\t\t\tSystem.out.println(r[i]);\\n\t\t}\\n\t}\\n}\\n", "target": "57", "substitutes": {"scan": ["sc", "can", "slice", " scanner", "sin", "man", "nn", "fan", "check", "query", "yan", "se", "in", "conv", "nl", "connect", "er", "an", "v", "sync", "en", "out", "search", "see", "clean", "sub", "ln", "re", "gen", "chan", "cat", "san", "plan", "join", "watch", "wan", "ans", "ser", "span", "system", "row", "na", "pan", "run", "skip", "use", "l", "Scan", "view", "kin", "ignore", "parse", "ner", "random", "nan", "ann", "sign", "reader", "rank"], "n": ["j", "nn", "sn", "ns", "in", "d", "v", "z", "c", "an", "y", "network", "nc", "t", "ln", "mn", "nb", "k", "e", "p", "dn", "f", "net", "o", "w", "s", "N", "l", "num", "nm", "x", "u", "g"], "m": ["j", "man", "h", "mu", "in", "d", "mi", "om", "md", "sm", "z", "v", "c", "an", "y", "en", "t", "mn", "k", "dim", "e", "p", "dn", "f", "pm", "mm", "cm", "hm", "o", "M", "w", "s", "l", "num", "nm", "x", "rm", "u", "g", "mc"], "a": ["ba", "ab", "ma", "ai", "aaa", "aa", "sa", "ao", "am", "d", "an", "area", "c", "ac", "ia", "y", "A", "ak", "e", "p", "f", "aj", "la", "ca", "as", "va", "na", "o", "s", "ama", "asa", "l", "da", "au", "x", "ae", "af", "u", "ar"], "b": ["wb", "j", "ba", "ab", "ib", "cb", "body", "h", "abb", "d", "bb", "bf", "z", "v", "c", "ob", "y", "db", "B", "nb", "k", "e", "p", "mb", "f", "emb", "br", "bridge", "bis", "bs", "o", "sb", "lb", "l", "fb", "x", "bd", "u", "g", "rb"], "i": ["id", "j", "ri", "pi", "mu", "I", "mi", "init", "ip", "ii", "cli", "z", "v", "ix", "c", "is", "io", "ori", "y", "start", "abi", "gi", "phi", "e", "p", "f", "qi", "ji", "ik", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "yi", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "fi", "ai", "ti"], "r": ["sr", "id", "right", "rs", "d", "err", "ir", "cr", "er", "v", "c", "t", "rar", "rr", "re", "nr", "hr", "reb", "e", "p", "R", "arr", "mr", "result", "rl", "br", "rc", "rh", "o", "ra", "pr", "range", "rd", "lr", "l", "fr", "dr", "g", "rt", "ru", "u", "ar", "rb", "rg"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String args[]) {\\n\\n\tScanner std = new Scanner(System.in);\\n\\n\\n\t//List<Integer> list = new ArrayList<>();\\n\tint N = std.nextInt();\\n\tint L = std.nextInt();\\n\tint Lsum = 0;\\n\tint Ltemp = L;\\n\t//String S = std.next();\\n\\n\tif(L <= 0 && Math.abs(L) < N) {\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tLsum = Lsum +L;\\n\t\t\tL++;\\n\t\t}\\n\t}\\n\\n\\n\telse if(L <= 0 && Math.abs(L) >= N) {\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tLsum = Lsum + L;\\n\t\t\tL++;\\n\t\t}\\n\t\tLsum = Lsum - L + 1;\\n\t}\\n\\n//-5,-4,-3=-12.\\n\telse {\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tLsum = Lsum + L;\\n\t\t\tL++;\\n\t\t}\\n\t\tLsum = Lsum - Ltemp;\\n\t}\\n\\n\tSystem.out.println(Lsum);\\n\\n\\n\t  }\\n\\n\\n\t}\\n\\n\\n", "target": "91", "substitutes": {"std": ["sc", " rc", " ret", " parser", "se", " l", "ss", " i", " tr", " x", "r", " _", " r", "ln", " sp", " reader", " str", " ans", " ls", "sb", " out", " src", " it", " br", " arr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int a = scan.nextInt();\\n        int b = scan.nextInt();\\n        int c = scan.nextInt();\\n        int d = scan.nextInt();\\n        while (a > 0 && c>0){\\n            c-=b;\\n            if(c > 0){\\n                a-=d;\\n            }else{\\n                System.out.println(\"Yes\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"No\");\\n    }\\n}\\n", "target": "186", "substitutes": {"scan": ["slice", "can", "sc", "sr", "look", "nn", "rank", "conn", "fan", "query", "util", "se", "in", "report", "nl", "connect", "an", "sync", "iter", "r", "out", "search", "read", "clean", "ln", "chan", "cat", "san", "plan", "n", "batch", "win", "watch", "walk", "ans", "ser", "span", "system", "car", "pan", "feed", "filter", "skip", "run", "l", "Scan", "kin", "ignore", "parse", "pin", "ner", "ann", "all", "sign", "gen", "serv"], "a": ["ba", "h", "ab", "fa", "aaa", "aa", "sa", "am", "count", "z", "an", "area", "ac", "y", "A", "ga", "ada", "ad", "e", "p", "n", "alpha", "f", "aj", "ar", "ca", "as", "va", "na", "i", "l", "da", "au", "x", "af", "ae", "u", "ai"], "b": ["j", "ba", "h", "cb", "ab", "abb", "aa", "bb", "z", "v", "r", "y", "db", "B", "k", "ad", "e", "be", "p", "n", "f", "eb", "bs", "o", "w", "sb", "i", "l", "bi", "fb", "x", "bd", "u", "g", "rb"], "c": ["sc", "ch", "j", "lc", "h", "cb", "cd", "aa", "count", "z", "v", "cr", "m", "ac", "r", "y", "ec", "t", "cc", "k", "e", "cy", "p", "n", "f", "dc", "rc", "C", "ca", "o", "w", "s", "i", "cs", "l", "da", "x", "ae", "u", "g"], "d": ["j", "h", "cd", "dd", "z", "v", "start", "m", "y", "t", "dt", "ds", "k", "ad", "e", "p", "n", "f", "df", "dc", "D", "w", "i", "l", "dx", "da", "x", "bd", "u", "dy"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int k = sc.nextInt();\\n    int answer = 0;\\n    for (int a = 1; a <= k; a++) {\\n      for (int b = a; b <= k; b++) {\\n        for (int c = b; c <= k; c++) {\\n          int gcd = gcd(a, gcd(b, c));\\n          if (a == b && b == c) {\\n            answer += gcd;\\n          } else if (a == b || a == c || b == c) {\\n            answer += 3 * gcd;\\n          } else {\\n            answer += 6 * gcd;\\n          }\\n        }\\n      }\\n    }\\n    System.out.println(answer);\\n  }\\n\\n  static int gcd(int a, int b) {\\n    if (b == 0) {\\n      return a;\\n    }\\n    return gcd(b, a % b);\\n  }\\n}\\n", "target": "6", "substitutes": {"sc": ["sw", "ch", "lc", "soc", " Sc", "cer", "st", "str", "Sc", " SC", "bc", "se", "SC", "scope", "sem", " scr", "ss", "esc", "sq", "scan", "osc", "spec", "ec", "sub", "nc", "sch", "cc", "sh", "sec", "sp", "acc", "src", "rc", "ca", "na", "sb", "cs", "cl", "pc", "ner", "ci", "g", "sci"], "k": ["ku", "j", "ch", "check", "sk", "ek", "kick", "d", "dk", "ko", "ask", "v", "m", "ok", "y", "key", "e", "ak", "p", "n", "f", "ks", "K", "end", "max", "q", "o", "km", "w", "s", "i", "kid", "kw", "mk", "ke", "x", "unk", "u"], "answer": ["knowledge", "error", "address", "nn", "adder", "evidence", "answered", "length", "fix", "xff", "abb", "query", "aa", "empty", "grade", "bb", "array", "ace", "ask", "z", " result", "abc", "complete", "practice", "response", "ac", "ee", "word", "username", "search", "cc", "fee", "value", "support", "Answer", "energy", "number", "reply", "question", "integer", "duration", "cache", "result", " answers", "average", "eni", "score", "say", "work", "code", "align", "results", "ae", "ell", "message", "size", "done", "update", "order", "issue"], "a": ["api", "ba", "ab", "oa", "fa", "ma", "ai", "aaa", "aa", "sa", "d", "am", "array", "an", "area", "m", "ac", "ia", "r", "y", "A", "ga", "mA", "ada", "ak", "ea", "p", "pa", "alpha", "ad", "f", "n", "aj", "e", "ca", "as", "na", "va", "o", "w", "i", "ama", "code", "da", "au", "x", "qa", "ae", "af", "u", "g", "ar"], "b": ["wb", "j", "ch", "api", "base", "ba", "ab", "cb", "ib", "body", "bin", "aaa", "bc", "aa", "xb", "d", "bb", "bf", "z", "v", "an", "ob", "m", "ac", "r", "y", "db", "t", "B", "nb", "ad", "e", "be", "p", "n", "bar", "f", "eb", "q", "ca", "bs", "o", "w", "sb", "i", "lb", "s", "l", "bi", "fb", "x", "ae", "u", "g", "rb"], "c": ["cu", "ch", "cf", "lc", "j", "h", "cb", "bc", "d", "z", "v", "cr", "ac", "r", "y", "ec", "con", "nc", "ce", "cc", "vc", "e", "ad", "p", "n", "cy", "f", "cat", "dc", "C", "ca", "o", "col", "w", "i", "cs", "l", "x", "ci", "u", "g", "cp"], "gcd": [" gcr", "ggcd", "gmcf", "gbcod", "igcod", "lcd", "gmcd", "gbcd", "ggcm", "igxd", "ggCD", "bcd", "gcr", "gcod", "ggdc", " gcm", " gdc", " gcod", "bgcd", "gdd", "rgdc", "gCD", "bgcod", "gdf", "Gde", "Gcm", "igdf", "bgdc", "igcr", " gxd", "bdd", "gde", "Gcod", "rgde", "Gcr", "bdc", "gcf", "GCD", "rgcm", "igcm", "gcm", "gdc", " gdf", " gcf", "Gdd", "bgCD", "gmdc", "Gdc", "gmcod", "Gdf", "gbxd", "ldc", "Gcd", "bCD", "lcf", "lcod", " gde", "Gxd", "gxd", "igdc", "gbdc", " gdd", "igcd", " gCD", "rgcd"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tList<Integer> list = new ArrayList<Integer>();\\n\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\tlist.add(sc.nextInt());\\n\t\t}\\n\\n\t\tfinal int k = sc.nextInt();\\n\\n\t\tfor (int j = 0; j < k; j++) {\\n\t\t\tfinal int max = Collections.max(list);\\n\t\t\tfinal int maxIndex = list.indexOf(max);\\n\t\t\tfinal int mul = max * 2;\\n\t\t\tlist.set(maxIndex, mul);\\n\t\t}\\n\\n\t\tint result = 0;\\n\t\tfor (final int item : list) {\\n\t\t\tresult = result + item;\\n\t\t}\\n\\n\t\tSystem.out.println(result);\\n\\n\t}\\n\\n}\\n", "target": "201", "substitutes": {"sc": ["sw", "sr", "ch", "soc", " Sc", "cer", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "sem", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "spec", "nc", "sch", "cc", "sh", "cus", "ctx", "sp", "src", "rc", "system", "anc", "sche", "cur", "sb", "cms", "cs", "cl", "pc", "ner", "ci", "asc", "cv", "mc", "sci"], "list": ["id", "cont", "listed", "base", "pool", "left", "lc", "and", "length", "array", "table", "cli", "group", "count", "old", "v", "live", "lists", "this", "out", "index", "chain", "batch", "p", "queue", "L", "lock", "map", "cache", "li", "test", "stack", "coll", "full", "low", "we", "LIST", "range", "collection", "lat", "keep", "l", "parent", "cl", "set", "parse", "x", "null", "loop", "load", "bl", "ist", "all", "sequence", "temp", "entry"], "i": ["id", "h", "pi", "d", "mi", "ii", "ip", "z", "v", "ix", "ori", "io", "m", "gi", "index", "key", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "o", "b", "di", "ini", "oi", "chi", "si", "bi", "hi", "x", "zi", "ci", "ni", "u", "ti", "ai", "I"], "k": ["id", "length", "sk", "kick", "d", "dk", "ko", "kn", "z", "v", "c", "m", "ok", "y", "ck", "key", "ak", "p", "n", "ks", "K", "ik", "q", "km", "kid", "kw", "mk", "ke", "x", "u", "unk", "b"], "j": ["h", "ja", "J", "js", "ij", "d", "jj", "ii", "z", "ix", "v", "c", "m", "r", "y", "jl", "key", "dj", "p", "obj", "kj", "f", "ji", "aj", "ik", "q", "end", "li", "next", "it", "o", "ax", "adj", "ie", "l", "num", "uj", "x", "jo", "oj", " dj", "g", "jp", "b"], "max": ["id", "base", "orig", "right", "height", "length", "step", "mod", "d", "array", "limit", "count", "Max", "last", "largest", "default", "head", "v", "c", "m", "MAX", "shift", "top", "min", "index", "chain", "key", "cat", "number", "p", "map", "end", "cache", "huge", "row", "full", "ax", "range", "rest", "unique", "version", "parent", "num", "sum", "parse", "x", "patch", "total", "depth", "size", "rand", "rank", "scale", "order"], "maxIndex": ["lastPosition", "axOffset", "maxI", " maxPosition", "lastOffset", "axPosition", "formindex", " maxI", "maxPosition", "maxOffset", "Maxindex", "formI", "lastIndex", "MaxI", "lastindex", " maxindex", "maxindex", "formIndex", "axindex", "axIndex", "MaxIndex", " maxOffset"], "mul": [" migrate", "murigrate", " mult", " mule", "Mult", "mmult", " mUL", "mmule", "murUL", "mule", "Migrate", "migrate", "Mule", "mult", "Mul", "MUL", "murul", "murule", "mUL", "mmUL", "mmul"], "result": ["error", "counter", "scale", "function", "length", "Result", "grade", "err", "array", "rule", "winner", "root", "group", "folder", "goal", "master", "default", "rate", "feature", "match", "current", "r", "search", "card", "value", "product", "ret", "number", "division", "alpha", "row", "found", "test", "cur", "average", "use", "score", "range", "parent", "sum", "info", "results", "order", "success", "diff", "complete", "cup", "rank", "total", "res", "work"], "item": ["id", "instance", "object", "base", "inner", "layer", "line", "other", "page", "ip", "iq", "member", "v", "er", "level", "m", "element", "current", "iter", "Item", "value", "data", "index", "key", "cat", "number", "p", "obj", "bar", "entry", "end", "q", "row", "li", "next", "it", "val", "parent", "g", "items", "order"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] a = new int[n+1];\\n\t\tfor(int i = 1; i <= n; i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t}\\n\t\tint count = 1;\\n\t\tint index = 1;\\n\t\twhile(count <= n) {\\n\t\t\tindex = a[index];\\n\t\t\tif(index==2) {\\n\t\t\t\tSystem.out.println(count);\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t\tcount++;\\n\t\t}\\n\t\tSystem.out.println(-1);\\n\t}\\n}", "target": "175", "substitutes": {"sc": ["sw", "ch", "lc", "app", "soc", " Sc", "Sc", " SC", "bc", "sf", "se", "SC", "scope", "sem", " scr", "ss", "server", "fc", "cr", "esc", "sq", "c", "scan", "osc", "out", "ec", "tc", "nc", "sch", "cc", "sh", "sec", "cus", "nt", "sp", "acc", "src", "rc", "system", "anc", "sche", "na", "class", "cs", "cl", "pc", "exec", "asc", "screen", "cv", "sci"], "n": ["j", "nn", "len", "ns", "in", "d", "node", "no", "z", "v", "c", "m", "r", "en", "y", "network", "nc", "t", "nb", "k", "nt", "ne", "number", "p", "e", "f", "net", "span", "o", "w", "s", "N", "l", "num", "x", "u", "size", "b"], "a": ["ba", "ab", "ma", "aaa", "aa", "sa", "ata", "am", "aux", "array", "an", "area", "c", "ana", "A", "tta", "ga", "data", "ea", "p", "alpha", "span", "wa", "la", "ca", "as", "va", "na", "l", "da", "au", "qa", "ae", "auto", "u", "b"], "i": ["id", "slice", "inner", "j", "pi", "part", "in", "mi", "init", "ip", "ii", "ind", "v", "ix", "c", "io", "start", "y", "gi", "phi", "e", "f", "qi", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "ie", "chi", "si", "bi", "hi", "info", "x", "ci", "ni", "u", "uri", "fi", "ai", "I"], "count": ["id", "base", "error", "counter", "check", "length", "len", "part", "offset", "inc", "ind", "group", "child", "type", "default", "level", "c", "call", "start", "current", "Count", "position", "second", "core", "key", "number", "batch", "cache", "span", "found", "next", "coll", "ref", "code", "num", "sum", "weight", "info", "x", "depth", "size", "list", "total", "name"], "index": ["slice", "id", "open", "path", "base", "object", "error", "address", "loc", "j", "section", "length", "len", "part", "offset", "page", "inc", "ind", "child", "level", "c", "pointer", "element", "position", "Index", "current", "search", "value", "key", "number", "pos", "add", "f", "update", "expression", "end", "partial", "find", "connection", "coll", "image", "column", "parent", "num", "weight", "x", "diff", "loop", "list"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = sc.nextInt();\\n        int d = sc.nextInt();\\n        \\n        int[][] x = new int[n][d];\\n        for(int a = 0; a < n; a++){\\n            for(int b = 0; b < d; b++){\\n                x[a][b] = sc.nextInt();\\n            }\\n        }\\n        \\n        int ans = 0;\\n        for(int a = 0; a < n-1; a++){\\n            for(int c = 1; c < n-a; c++){\\n                double distance = 0;\\n                for(int b = 0; b < d; b++){\\n                    distance += (x[a][b] - x[a+c][b]) * (x[a][b] - x[a+c][b]);\\n                }\\n                distance = Math.sqrt(distance);\\n                if(distance == Math.floor(distance)){\\n                    ans++;\\n                }\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "59", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "cer", "Sc", " SC", "squ", "bc", "se", "SC", "sf", "scope", "sem", " scr", "com", "ss", "uc", "cr", "esc", "scan", "osc", "sync", "out", "ec", "tc", "nc", "sch", "cc", "sec", "sh", "cor", "sp", "src", "rc", "system", "anc", "sche", "na", "class", "sb", "cs", "l", "si", "cl", "pc", "ner", "asc", "screen", "cv", "sci"], "n": ["j", "nd", "nn", "h", "len", "sn", "ns", "in", "z", "v", "an", "m", "r", "en", "y", "nc", "t", "k", "nt", "cn", "e", "ne", "p", "dn", "f", "net", "nat", "na", "o", "w", "s", "i", "N", "l", "num", "u"], "d": ["j", "nd", "h", "cd", "dd", "z", "m", "t", "dir", "dt", "k", "ds", "dim", "e", "ad", "p", "dn", "f", "dc", "dat", "dec", "sd", "o", "D", "di", "w", "s", "i", "l", "da", "dh", "u", "dy"], "x": ["id", "one", "px", "h", "xx", "rx", "in", "cross", "array", "pe", "xxx", "z", "v", "an", "ix", "plus", "m", "y", "tx", "xf", "xs", "shape", "t", "data", "index", "e", "p", "ex", "f", "xc", "q", "xi", "list", "na", "ic", "ph", "image", "w", "ax", "s", "i", "any", "code", "sex", "l", "X", "u", "expl", "xes", "work"], "a": ["j", "api", "app", "ba", "ab", "access", "oa", "h", "fa", "ma", "aaa", "aa", "sa", "am", "ao", "ah", "z", "v", "an", "at", "area", "ac", "m", "r", "y", "A", "ga", "ad", "e", "p", "ea", "f", "alpha", "pa", "aj", "ar", "wa", "active", "la", "ca", "as", "na", "va", "o", "w", "s", "i", "any", "ama", "ak", "l", "da", "au", "qa", "ae", "af", "u", "auto", "ai"], "b": ["wb", "j", "base", "ba", "ib", "cb", "ab", "body", "h", "or", "abb", "bc", "aa", "bb", "bh", "pb", "bf", "z", "v", "an", "ob", "m", "r", "y", "db", "B", "nb", "e", "be", "p", "bar", "f", "bp", "eb", "ca", "bs", "o", "w", "sb", "i", "lb", "l", "bi", "fb", "bd", "ae", "u", "g", "rb"], "ans": ["can", "aces", "features", "outs", "ats", "cons", "lan", "ons", "ns", "ens", "runs", "aus", "ss", "ions", "vers", "an", "ras", "ars", "ances", "os", "xs", "aned", "powers", "es", "cas", "ds", "ents", "ids", "ks", "span", "anc", "ANS", "na", "as", "ians", "s", "ays", "acts", "cases", "cs", "ches", "ants", "eps", "ann", "ls", "ines", "ins"], "c": ["cu", "ch", "cf", "lc", "h", "cb", "bc", "z", "v", "an", "cr", "m", "ac", "r", "y", "ec", "con", "cc", "k", "cn", "e", "cat", "p", "cy", "f", "dc", "q", "C", "ca", "w", "s", "i", "cs", "l", "ci", "u", "g"], "distance": ["ance", "Distance", "address", "lane", "length", "message", "move", "angle", "grade", "volume", "cross", "phy", "definition", "style", "way", "feature", "match", "word", "point", "shift", "dist", "size", "progress", "value", "data", "p", "dn", "division", "missing", "duration", "age", "mode", "dy", "result", "density", "direction", "power", "width", "ge", "km", "coll", "di", "gap", "range", "radius", "i", "quality", " proximity", "weight", " distances", "diff", "cost", "depth", "equality", "edge", "balance", "scale", "work"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n\\n        int a = n / 100;\\n        int b = (n - a * 100) / 10;\\n        int c = (n - a * 100 - b * 10);\\n\\n        if (a < b || a < c) {\\n            System.out.println((a + 1) * 100 + (a + 1) * 10 + (a + 1));\\n        } else {\\n            System.out.println(a * 100 + a * 10 + a);\\n        }\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n", "target": "106", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "cb", "str", "Sc", " SC", "bc", "se", "SC", "sa", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "sub", "ec", "nc", "sch", "cc", "sh", "sec", "nt", "sp", "acc", "src", "rc", "ca", "cur", "cs", "l", "cl", "pc", "exec", "g", "sci"], "n": ["j", "nn", "conn", "sn", "ns", "d", "count", "z", "an", "v", "m", "ac", "r", "en", "y", "t", "nb", "k", "nt", "un", "e", "ne", "p", "f", "net", "q", "o", "w", "s", "i", "N", "l", "num", "x", "nan", "u", "g"], "a": ["api", "ba", "h", "ab", "fa", "aaa", "aa", "sa", "d", "am", "inc", "an", "area", "m", "ac", "at", "y", "A", "ga", "k", "ad", "ea", "p", "alpha", "e", "f", "aj", "ca", "as", "na", "va", "w", "s", "i", "asa", "l", "da", "au", "x", "qa", "ae", "af", "u", "all", "ai"], "b": ["j", "ba", "h", "ab", "ib", "bc", "aa", "d", "bb", "z", "v", "an", "ac", "r", "y", "B", "k", "ad", "e", "p", "f", "eb", "o", "sb", "i", "l", "fb", "x", "u", "rb"], "c": ["cf", "h", "aa", "d", "count", "z", "ac", "r", "y", "cc", "k", "ad", "e", "p", "f", "ca", "C", "o", "i", "l", "ae", "ci", "u"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args)throws Exception {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint money = scan.nextInt();\\n\t\tint yen500 = 0;\\n\t\tint yen5 = 0;\\n\\n\t\tfor(;;) {\\n\t\t\tif(money >= 500) {\\n\t\t\t\tmoney -= 500;\\n\t\t\t\tyen500 += 1;\\n\t\t\t}else {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tfor(;;) {\\n\t\t\tif(money >= 5) {\\n\t\t\t\tmoney -= 5;\\n\t\t\t\tyen5 += 1;\\n\t\t\t}else {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(yen500 * 1000 + yen5 * 5);\\n\\n\t\tscan.close();\\n\t}\\n}", "target": "180", "substitutes": {"scan": ["sc", "can", "slice", "inner", "look", "nn", "sys", "fan", "query", "util", "se", "in", "server", "connect", "an", "start", "sync", "out", "search", "read", "con", "stat", "network", "gen", "chan", "cat", "san", "n", "win", "watch", "walk", "cache", "result", "system", "car", "na", "pan", "feed", "run", "gram", "Scan", "log", "pin", "parse", "exec", "ner", "ann", "all", "reader", "get", "source", "serv"], "money": ["lot", "cop", "change", "base", "buy", "very", "pocket", "paid", "company", "family", "cho", "timeout", "dollar", "music", "volume", "coin", "price", "magic", "seed", "million", "payment", "amount", "cash", "pay", "data", "yahoo", "margin", "gross", "number", "machine", "how", "cow", "home", "picture", "currency", "zero", "huge", "euro", "power", "fortune", "cycle", "coll", "fine", "hack", "micro", "blue", "div", "chi", "expensive", "Money", "budget", "weight", "time", "random", "auto", "mini", "year", "fee", "pie", "cost", "total", "minute"], "yen500": ["ypen600", "ypen150", "yenn050", "cyenn150", "yen50", "yhen50", "yhen500", "Yener1000", "yen150", "yonen050", "yonen50", "Yener100", "Yen100", "yener100", "yen5000", "cyenn600", "yeen050", "yener5000", "yen100", "yener500", "cyenn050", "cyen150", "yeen5000", "yenn500", "yeen100", "ypen500", "Yen1000", "yeen50", "yonen500", "yen050", "yhen600", "cyen500", "yenn1000", "cyenn50", "Yen500", "yen600", "Yener5000", "Yener500", "yhen150", "yeen500", "yeen1000", "ypen50", "yenn5000", "cyenn500", "yenn50", "yenn100", "yonen150", "cyen50", "cyen050", "cyen600", "yeen150", "yen1000", "Yen5000", "yener1000", "yenn150", "yenn600"], "yen5": ["ylen35", "yenn525", "yen525", "cyen525", "Yen50", " yener5", "cyen25", "cyenn25", "yen50", "cyen5", "cyenn5", " yener50", "yener25", "yenn305", " yener305", "Yen35", " yen305", "yener305", "yenn5", "yken525", "Yen5", "ysten25", "Yener5", "yenn500", "ylen50", "yen35", "yen305", "yen25", "yenny50", "ylen525", "yener5", "yken25", "yenny305", "yken5", "cyen500", "Yener50", "yken500", "Yen25", "ylen5", " yen50", "yener35", "yenn25", "ylen25", "Yener35", "Yener25", " yener25", "ysten50", "cyenn500", "cyenn525", "yenny5", "yenn50", " yen25", "yener50", "ysten5", "ylen500", "ysten35", "yenny25"]}}
{"code": "import java.io.File;\\nimport java.io.FileInputStream;\\nimport java.io.FileNotFoundException;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int s = sc.nextInt();\\n        int w = sc.nextInt();\\n\\n        if (w >= s) System.out.println(\"unsafe\");\\n        else System.out.println(\"safe\");\\n    }\\n}\\n", "target": "177", "substitutes": {"sc": ["sr", "sw", "ch", "console", "lc", "soc", "cer", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "com", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "tc", "search", "nc", "cc", "sec", "cus", "core", "sp", "ser", "src", "rc", "system", "sche", "cur", "sb", "cs", "si", "pc", "ner", "ci", "asc", "sci"], "s": ["sw", "h", "ns", "ens", "d", "services", "ss", "ps", "z", "v", "c", "south", "m", "aws", "sync", "spec", "xs", "shift", "t", "ows", "rows", "ds", "e", "p", "n", "f", "ks", "less", "ws", "blocks", "i", "S", "l", "si", "mins", "eps", "words", "ms", "u", "g", "ls", "b"], "w": ["fw", "sw", "wb", "tw", "aw", "wx", "h", "wl", "wal", "wh", "iw", "d", "z", "y", "wp", "ew", "q", "W", "weights", "wa", "width", "rw", "ws", "wr", "ww", "ow", "we", "kw", "wt", "weight", "x", "words", "wi", "nw", "g"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint ans;\\n\t\tans = 0;\\n\t\tfor(;;){\\n\t\t\tint a = scan.nextInt();\\n\t\t\tString op = scan.next();\\n\t\t\tint b = scan.nextInt();\\n\t\t\tif(op.equals(\"?\"))\\n\t\t\t\tbreak;\\n\t\t\tif(op.equals(\"+\"))\\n\t\t\t\tans = a + b;\\n\t\t\telse if(op.equals(\"-\"))\\n\t\t\t\tans = a - b;\\n\t\t\telse if(op.equals(\"*\"))\\n\t\t\t\tans = a * b;\\n\t\t\telse if(op.equals(\"/\"))\\n\t\t\t\tans = a / b;\\n\t\tSystem.out.println(ans);\\n\t}\\n\t}\\n\t}", "target": "139", "substitutes": {"scan": ["sr", "can", "sc", "slice", "look", "nn", "sys", "conn", "fan", "util", "se", "in", "oper", "rou", "server", "connect", "er", "an", "sync", "iter", "out", "r", "search", "clean", "see", "con", "read", "chan", "cat", "san", "plan", "n", "watch", "walk", "wan", "ser", "system", "row", "na", "feed", "run", "skip", "l", "Scan", "kin", "ignore", "parse", "ner", "ann", "all", "reader", "serv"], "ans": [" scans", "aps", "lines", "anas", "aces", "can", "ips", "opens", "outs", "ats", " means", "cons", "leans", "lan", "ons", "ns", "sk", "AN", "runs", "aux", "aid", "aus", "ss", "ions", "lang", "nas", "amps", "anges", "an", "reads", "ras", "ams", "ars", "ros", "asts", "ana", "ases", "os", "aned", "acs", "es", "rows", "cas", "offs", "ds", "ents", "oss", "ads", "ks", "span", "arts", "anc", "ANS", "na", "as", "photos", "s", "ays", "acts", "cs", "works", "ants", "ches", "results", "eps", "obs", "ops", "auto", "ann", "ls", "ins"], "a": ["base", "access", "app", "ba", "ab", "oa", "ma", "aa", "sa", "d", "am", "aux", "an", "area", "c", "abs", "ac", "ia", "at", "ana", "A", "ga", "ada", "ad", "ea", "p", "n", "alpha", "f", "pa", "aj", "span", "ar", "off", "wa", "la", "active", "ca", "va", "as", "na", "w", "i", "asa", "za", "da", "au", "x", "ae", "af", "auto", "aka", "ai"], "op": ["id", "cop", "pp", "open", "error", "opus", "opt", "app", "oop", "prop", "form", "orb", "po", "co", "loc", "http", "mod", "node", "oct", "ip", "oper", "ko", "om", "opp", "ep", "type", "ob", "pop", "OP", "ok", "operation", "rop", "Op", "rip", "cat", "p", "sp", "hop", "api", "off", "it", "ap", "o", "up", "info", "omp", "exp", "ype", "ops", "auto", "loop", "name"], "b": ["wb", "j", "base", "ib", "h", "ab", "cb", "abb", "bc", "d", "bb", "bh", "bf", "z", "v", "gb", "c", "ob", "m", "y", "B", "nb", "e", "be", "p", "n", "mb", "f", "bp", "eb", "bot", "o", "w", "sb", "i", "lb", "l", "bi", "fb", "x", "bd", "u", "g", "rb"]}}
{"code": "import java.util.*;\\n\\npublic class Main \\n{\\n\t    public static void main(String[] args) \\n        {\\n        \tScanner scanner = new Scanner(System.in);\\n        \tString S = scanner.next();\\n        \tLong countA = 0L;\\n        \tLong countB = 0L;\\n        \tfor (int i = 0; i < S.length(); i++) \\n            {\\n            \tif(S.charAt(i) == '0')\\n                  \tcountA++;\\n            \tif(S.charAt(i) == '1') \\n                  \tcountB++;\\n        \t}\\n        \tcountA = Math.min(countA, countB) * 2;\\n        \tSystem.out.println(countA);\\n    \t}\\n}\\n", "target": "14", "substitutes": {"scanner": ["canler", "scanNER", "nerer", "scaner", "Scanner", " scanler", "canatter", "Scanatter", "caner", "nerNER", "Scaner", "canning", "nerner", "scanler", " scanatter", "scanning", "canner", "canNER", "nerning", "Scanning", "Scanler", " scaner", "scanatter", "ScanNER"], "S": ["US", "Si", "SS", "SU", "Su", "First", "Sample", "SC", "TEXT", "Standard", "Single", "Part", "AS", "TS", "SO", "SR", "SER", "Service", "Start", "Input", "A", "T", "B", "VS", "Sl", "SA", "FS", "SAM", "NS", "R", "L", "Text", "SE", "string", "Is", "C", "Source", "O", "JSON", "SN", "s", "BS", "HS", "ST", "U", "N", "IS", "SI", "RS", "Socket", "V", "P", "GS", "DS", "I"], "countA": ["callSA", " countSA", "lengthAA", "lengthArray", "allowAPI", "CountL", "catchB", "catchAA", "lengthC", "CountAs", "baseN", "countArray", " countAs", "CountA", " countArray", "countAA", " countAA", "idA", "idAs", "callAPI", "countC", "countAPI", "allowSA", "CountB", " countL", "lengthA", "idB", "countN", "catchC", " countAPI", "countL", "CountAA", "lengthB", "baseL", " countN", "allowA", "countAs", "catchA", "callA", "CountN", "CountArray", "countSA", " countC", "idAA", "baseA", "baseB"], "countB": ["currentL", "CountL", "countb", "sumL", "currentA", "CountBER", "CountA", "lengthBER", "indexB", "currentB", "sumb", "countBB", "CountB", " countBB", "indexA", " countL", "countBER", "lengthA", " countb", "lengthBB", "currentb", "countL", " countBER", "lengthB", "indexL", "sumB", "CountBB", "indexBB", "sumA"], "i": ["id", "slice", "j", "ri", "h", "a", "pi", "mu", "part", "I", "in", "init", "ii", "ip", "z", "v", "io", "c", "ix", "abi", "ori", "start", "y", "gi", "index", "data", "k", "phi", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "multi", "o", "pass", "di", "ini", "s", "eni", "oi", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "uri", "ai", "b"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        String Sa = sc.next();\\n        int la = Sa.length();\\n        int a = 0;\\n        String Sb = sc.next();\\n        int lb = Sb.length();\\n        int b = 0;\\n        String Sc = sc.next();\\n        int c = 0;\\n        int lc = Sc.length();\\n        String x = \"A\";\\n        String y = \"abc\";\\n\\n        for(int i=0; i<la+lb+lc+3; i++){\\n            if(x.equals(\"A\")){\\n                if(a<la){\\n                    if(Sa.charAt(a)==y.charAt(0)){\\n                        x = \"A\";\\n                    }\\n                    else if(Sa.charAt(a)==y.charAt(1)){\\n                        x = \"B\";\\n                    }\\n                    else if(Sa.charAt(a)==y.charAt(2)){\\n                        x = \"C\";\\n                    }\\n                }\\n                a += 1;\\n                if(a==la+1){\\n                    x = \"\";\\n                }\\n            }\\n            else if(x.equals(\"B\")){\\n                if(b<lb){\\n                    if(Sb.charAt(b)==y.charAt(0)){\\n                        x = \"A\";\\n                    }\\n                    else if(Sb.charAt(b)==y.charAt(1)){\\n                        x = \"B\";\\n                    }\\n                    else if(Sb.charAt(b)==y.charAt(2)){\\n                        x = \"C\";\\n                    }\\n                }\\n                b += 1;\\n                if(b==lb+1){\\n                    x = \"\";\\n                }\\n            }\\n            else if(x.equals(\"C\")){\\n                if(c<lc){\\n                    if(Sc.charAt(c)==y.charAt(0)){\\n                        x = \"A\";\\n                    }\\n                    else if(Sc.charAt(c)==y.charAt(1)){\\n                        x = \"B\";\\n                    }\\n                    else if(Sc.charAt(c)==y.charAt(2)){\\n                        x = \"C\";\\n                    }\\n                }\\n                c += 1;\\n                if(c==lc+1){\\n                    x =\"\";\\n                }\\n            }\\n\\n            if(a==la+1){\\n                System.out.println(\"A\");\\n                break;\\n            }\\n            else if(b==lb+1){\\n                System.out.println(\"B\");\\n                break;\\n            }\\n            else if(c==lc+1){\\n                System.out.println(\"C\");\\n                break;\\n            }\\n        }\\n    }\\n}", "target": "11", "substitutes": {"sc": ["sw", "cont", "enc", "ch", "cer", "or", "sk", " SC", "bc", "se", "SC", "scope", "sem", " scr", "com", "ss", "cli", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "ec", "nc", "sch", "cc", "sh", "sec", "cus", "sp", "cle", "rc", "system", "sche", "na", "cur", "coll", "cs", "l", "cl", "exp", "pc", "parse", "ner", "asc", "cv", "mc", "sci"], "Sa": ["sea", "Str", "Si", "Ni", "Dar", "Va", "Lu", "Mu", "Ba", "Mah", "Storage", "sa", "ZA", "Sah", "Area", "SHA", " Sas", "Ma", "Cas", "La", "SA", "Ka", "Na", "Fa", "Sat", "Nat", "Ha", "Ga", "Seg", "Ra", "Struct", "Vi", "Wa", "Sen", "Shar", "Yu", "Wan", "Sign", "na", "Ar", "Ku", "Capt", "Music", "Sys", "Sav", "asa", "za", "si", "Ta", "SI", "Ca", "Sax", "Pa", "Bah", "Save", "Ru", "St"], "la": ["oa", "Lu", "len", "ma", "lab", "lar", "sa", "ala", "ha", "ula", "ld", "cat", "LC", "va", "lia", "lo", "da", "LA", "sea", "lu", "lf", "ja", "lan", "lang", "li", "hi", "cl", "lla", "kl", "aa", "las", "ka", "La", "lv", "pa", "L", "wa", "lr", "za", "au", "loc", "le", "lam", "lah", "lambda", "ca", "s", "l", "pl", "g", "lin", "ll"], "a": ["api", "ba", "ab", "oa", "fa", "ma", "aaa", "aa", "sa", "am", "ka", "an", "area", "m", "ac", "ia", "ana", "A", "ga", "mA", "index", "ada", "ad", "e", "p", "n", "alpha", "f", "ea", "pa", "aj", "ar", "active", "wa", "va", "as", "ca", "na", "w", "s", "ama", "ya", "asa", "l", "za", "da", "au", "ae", "af", "u", "action", "aka", "ai", "sta"], "Sb": ["Sh", "sdb", "Samb", "Simplec", "OSB", "Df", "Sandb", "Dc", "Psamb", "Simplep", "Sdb", "Singa", "Sbody", "sf", "sa", "PSb", "Simpleb", "PSp", "Sandc", "Psp", "Db", "Singc", "Sandl", "Psb", "SB", "RSl", " Sdb", "sh", "Sl", "Dl", "sB", "samb", "Sandf", "Vl", "sp", "PSh", " Sh", "RSB", "Vb", "sb", "Psc", "SingB", "PSdb", "Singb", "OSb", "Sf", " Sp", "sl", "RSbody", "OSa", "RSb", "Sp", "VB", "Vbody", "Simpleamb", "sbody", "OSc"], "lb": ["wb", "loc", "lp", "lu", "lf", "wl", "length", "len", "lam", "LB", "kl", "lab", "bc", "las", "fc", "bf", "nl", "abc", "lt", "ld", "ln", "ul", "nb", "dl", "La", "lv", "LC", "L", "eb", "rl", "lbs", "li", "lia", "lr", "l", "lo", "hi", "pl", "fb", "cl", "LA", "bl", "lin", "ls", "ll", "rb", "lla"], "b": ["wb", "j", "base", "api", "ba", "ab", "h", "ib", "cb", "body", "bin", "abb", "bc", "xb", "d", "bb", "bh", "pb", "bf", "z", "v", "gb", "ob", "m", "r", "db", "t", "B", "nb", "e", "be", "p", "n", "mb", "f", "bar", "eb", "bis", "bs", "o", "w", "sb", "s", "l", "bi", "fb", "bd", "u", "g", "rb"], "Sc": ["Context", "Cle", "Config", "Ly", "Str", "Squ", "Cs", "Se", "Spec", "sci", "Kh", "Hub", "Sync", "SC", "Ch", "Square", "Micro", "Cas", "Coll", "Cra", "Code", "Row", "Sl", "La", "Desc", "Loc", "Col", "Hum", "Ga", "Enc", "Text", "Struct", "Seg", "Gy", "Esc", "Any", "Pop", "C", "Sche", "Cow", "Info", "Capt", "cs", "Z", "S", "Cr", "Scan", "Cl", "Ca", "Exp", "Live", "Pa", "Sk", "Sp", "G", "Scope", "St"], "c": ["cu", "ch", "cf", "h", "ct", "bc", "d", "z", "v", "m", "ac", "r", "ec", "nc", "ce", "t", "cc", "k", "vc", "e", "cat", "p", "n", "f", "dc", "q", "C", "ca", "ic", "o", "col", "w", "s", "cs", "code", "l", "cl", "pc", "oc", "ci", "u", "g"], "lc": ["loc", "lp", "lu", "lf", "wl", "len", "lan", "lam", "kl", "lab", "bc", "lib", "cli", "fc", "z", "abc", "lus", "ac", "lt", "ld", "nc", "ln", "ul", "La", "dl", "lv", "xc", "LC", "ly", "li", "lr", "l", "lo", "cl", "pc", "ci", "lin", "ls", "ll", "lla"], "x": ["one", "h", "yx", "rex", "xy", "xml", "some", "na", "w", "sex", "X", "xa", "fill", "fix", "cross", "pe", "type", "z", "io", "xf", "xs", "data", "index", "key", "e", "f", "xi", "string", "xp", "full", "ya", "exp", "text", "u", "name", "work", "px", "wx", "xx", "ux", "rx", "best", "abc", "ix", "xc", "p", "ic", "ww", "ax", "any", "lex", "status", "ext", "xxxx", " xx", "fx", "xt", "xxx", "content", "tx", "t", "event", "ex", "ctx", "q", "s", "code", "xe", "dx", "XX", "python"], "y": ["py", "j", "yt", "ies", "h", "sys", "xx", "service", "yan", "query", "ady", "xy", "ry", "yu", "gy", "type", "z", "io", "ny", "yy", "out", "t", "ay", "iny", "yo", "Y", "by", "idy", "e", "cy", "p", "n", "oy", "f", "ty", "ym", "ly", "dy", "q", "xi", "ky", "ys", "vy", "fy", "s", "ey", "yi", "ie", "sky", "ya", "zy", "si", "g", "my", "ye", " yo", "sy"], "i": ["j", "aci", "ri", "ib", "pi", "ii", "ip", "ori", "io", "v", "m", "ia", "gi", "adi", "p", "n", "f", "qi", "ji", "ui", "ali", "xi", "li", "iu", "multi", "eni", "di", "ini", "oi", "ie", "yi", "l", "si", "bi", "hi", "asi", "zi", "ci", "ni", "ti", "u", "fi", "ai", "uri", "I"]}}
{"code": "import java.util.*;\\nimport java.util.regex.Pattern;\\nimport java.util.regex.Matcher;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n      \t//\u6570\u5024\u306e\u5165\u529b\\n\t\tint a = sc.nextInt();\\n      \tint b = sc.nextInt();\\n      \t//\u30cf\u30a4\u30d5\u30f3\u5165\u308a\\n        String str = sc.next();\\n      \t//\u6b63\u898f\u8868\u73fe\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u4f5c\u6210\\n      \tPattern p = Pattern.compile(\"[0-9]{\"+a+\"}-[0-9]{\"+b+\"}\");\\n      \tMatcher m = p.matcher(str);\\n       if (m.find()) {\\n            System.out.println(\"Yes\");\\n        }\\n\t\telse{\\n\t\t\tSystem.out.println(\"No\");\\n    \t}\\n        }\\n}", "target": "78", "substitutes": {"sc": [" rc", " Sc", " ser", "Sc", " SC", "bc", "se", "SC", " scr", "ss", "cr", " cr", "sq", "scan", " cont", "nc", " sl", "sp", " ans", " subp", " acc", "sb", "gram", " pars", "ann", " res", " arr", "sci"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int last = -1;\\n        int n = scanner.nextInt();\\n        int[] nums = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            nums[i] = scanner.nextInt();\\n        }\\n        long ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            int cur = nums[i];\\n            if (cur < last) {\\n                ans += (last - cur);\\n            } else {\\n                last = cur;\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "202", "substitutes": {"scanner": ["canler", "nerer", "scaner", "Scanner", "scanparser", "scanener", "nerker", "Scanener", "Scaninner", " scanler", "canter", "caninner", "caner", "Scaner", " scanparser", "Scanker", "nerner", "scanler", "nerinner", "Scanter", "canparser", "scanker", "canker", " scanener", "canner", "scaninner", "scanter", "Scanparser", "Scanler", " scaner", "canener", " scanter"], "last": ["id", "small", "base", "nd", "left", "always", "right", "st", "no", "latest", "count", "old", "default", "style", "start", "c", "current", "this", "recent", "ul", "from", "big", "index", "push", "Last", "number", "p", "prev", "after", "end", "max", "cache", "cycle", "active", "next", "full", "use", "any", "show", "parent", "code", "since", "self", "real", "first", "est", "size", "total", "highest"], "n": ["j", "nn", "len", "sn", "ns", "in", "d", "no", "count", "nl", "z", "v", "c", "m", "r", "en", "y", "network", "nc", "t", "ln", "mn", "nb", "nr", "k", "nt", "e", "ne", "p", "f", "net", "na", "o", "w", "s", "l", "N", "num", "x", "u", "all", "b"], "nums": [" numer", "numbers", "nanumbers", "cum", "pnubs", "cubs", "cumer", "pnumps", "nus", "cumbers", "pnus", "nanum", "cums", "cumps", "Num", "numps", "numer", "nanums", " nus", "nubs", "cus", "nows", "pnumbers", " nubs", "nanows", "num", "pnumer", "pnums", "Nums", " numps", " numbers", "Nows", "Numbers", "cows"], "i": ["id", "slice", "inner", "j", "lc", "ri", "pi", "mu", "part", "mi", "init", "d", "inc", "ip", "ii", "ind", "z", "v", "ix", "io", "c", "abi", "y", "gi", "index", "phi", "e", "p", "qi", "f", "ji", "ik", "ui", "rc", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "oi", "ie", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "I", "vi"], "ans": [" scans", "ats", "cons", "ings", "len", "lan", "sk", "ns", "ums", "ens", "ons", "rs", "errors", "aus", "ions", "nas", "amps", "vers", "an", "asts", "scan", "ras", "ars", "ams", "ana", "olds", "os", "urs", "aned", "acs", "cas", "offs", "anon", "ents", "ds", "forces", "ks", "span", "ANS", "na", "as", "unks", "s", "acts", "cs", "ants", "vs", "ann", "ls", "ins"], "cur": ["sc", "sr", "cu", "ch", "lc", " prev", "cer", " cursor", "in", "ah", "focus", "err", "uc", "fer", "cr", "Cur", "c", "inter", "current", "r", "iter", " Cur", "sch", "ul", "cor", "ear", "circ", "nr", "rev", "ur", "cat", "prev", "ver", "ser", "ctr", "result", " curs", "rc", "char", "ari", "car", "dec", "ph", "pr", "tri", "per", "l", "fr", "oc", "sur", "dr", "ci", "asc", "uri"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int ans = 0;\\n        for(int i = a; i <= b; i++){\\n            char[] c = String.valueOf(i).toCharArray();\\n            if(c[0] == c[4] && c[1] == c[3]) ans++;\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "104", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "server", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "tc", "ec", "search", "nc", "sch", "cc", "sec", "sh", "cor", "core", "sp", "ser", "acc", "src", "rc", "system", "sche", "ca", "cur", "cs", "cl", "pc", "exec", "ci", "asc", "mc", "sci"], "a": ["api", "ab", "fa", "offset", "aaa", "aa", "sa", "d", "am", "count", "an", "area", "ac", "A", "from", "ada", "ea", "p", "n", "alpha", "f", "e", "aj", "la", "va", "as", "asa", "da", "au", "x", "qa", "ae", "ai", "sta"], "b": ["j", "base", "h", "ab", "body", "length", "part", "abb", "d", "bb", "limit", "count", "z", "v", "boot", "r", "y", "B", "nb", "k", "e", "batch", "p", "n", "mb", "f", "bound", "end", "emb", "bs", "o", "s", "lb", "l", "fb", "x"], "ans": [" scans", "can", "lines", "aces", "nn", "outs", "ats", "errors", "lan", "sk", "ns", "ons", "AN", "rs", "aus", "ss", "ions", "nas", "amps", "an", "asts", "scan", "ars", "ana", "os", "aned", "acs", "cas", "rows", "es", "ds", "ents", "n", "ks", "span", "anc", "ANS", "na", "as", "blocks", "s", "ays", "acts", "cs", "ants", "eps", "x", "anes", "ann", "ls", "annot", "ins"], "i": ["slice", "j", "ri", "h", "pi", "d", "mi", "ip", "ii", "z", "v", "io", "abi", "pointer", "start", "y", "gi", "index", "phi", "e", "p", "fi", "n", "f", "qi", "ji", "pos", "ui", "xi", "li", "iu", "multi", "o", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "x", "ci", "u", "ni", "ti", "uri", "ai", "I"], "c": ["cont", "cu", "enc", "ch", "cf", "lc", "loc", "cb", "ct", "uc", "cr", "v", "ac", "ec", "nc", "ce", "t", "cc", "chain", "cat", "e", "p", "n", "unc", "dc", "rc", "char", "anc", "dec", "ca", "C", "ic", "coll", "o", "col", "cs", "code", "l", "cl", "pc", "arc", "ci", "u", "mc", "co"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String args[]) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint n;\\n\t\tn = sc.nextInt();\\n\t\t\\n\t\tint a[][] = new int[2][n];\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[0][i] = sc.nextInt();\\n\t\t\ta[1][i] = i + 1;\\n\t\t}\\n\t\t\\n\t\t//\u30bd\u30fc\u30c8\u3059\u308b([0]\u306e\u5024\u3067\u30bd\u30fc\u30c8)\\n\t\t//sort(a, n);\\n\t\tquickSort(a, 0, n - 1);\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tSystem.out.print( a[1][i] + \" \" );\\n\t\t}\\n\t\t\\n\t\treturn;\\n\t}\\n\t\\n\tpublic static void sort(int array[][], int n) {\\n\t\\n\t\tif (array == null) {\\n\t\t\treturn;\\n\t\t}\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tfor (int j = n - 1; j > i; j--) {\\n\t\t\t\tif (array[0][j] < array[0][j-1]) {\\n\t\t\t\t\tint temp0 = array[0][j];\\n\t\t\t\t\tint temp1 = array[1][j];\\n\t\t\t\t\t\\n\t\t\t\t\tarray[0][j] = array[0][j-1];\\n\t\t\t\t\tarray[1][j] = array[1][j-1];\\n\t\t\t\t\t\\n\t\t\t\t\tarray[0][j-1] = temp0;\\n\t\t\t\t\tarray[1][j-1] = temp1;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\treturn;\\n\t}\\n\t\\n\t\\n\tpublic static void quickSort(int array[][], int left, int right) {\\n\t\\n\t\t\\n\t\tif ( left > right ) {\\n\t\t\treturn;\\n\t\t}\\n\t\t\\n\t\t\\n\t\tint pivotValue = array[0][(left + right) / 2];\\n\t\t\\n\t\tint i = left;\\n\t\tint j = right;\\n\t\t\\n\t\twhile ( i <= j ) {\\n\t\t\twhile (array[0][i] < pivotValue) {\\n\t\t\t\ti++;\\n\t\t\t}\\n\t\t\t\\n\t\t\twhile (array[0][j] > pivotValue) {\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\t\\n\t\t\tif ( i <= j ) {\\n\t\t\t\tquickSortSwap(array, i, j);\\n\t\t\t\t\\n\t\t\t\ti++;\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tquickSort(array, left, j);\\n\t\tquickSort(array, i, right);\\n\t}\\n\t\t\\n\t\\n\\n\t\t\\n\t\t\\n\tpublic static void quickSortSwap(int array[][], int i, int j) {\\n\t\tint temp0 = array[0][i];\\n\t\tint temp1 = array[1][i];\\n\t\t\\n\t\tarray[0][i] = array[0][j];\\n\t\tarray[1][i] = array[1][j];\\n\t\t\\n\t\tarray[0][j] = temp0;\\n\t\tarray[1][j] = temp1;\\n\t\t\\n\t\treturn;\\n\t}\\n\\n}", "target": "227", "substitutes": {"sc": ["cont", "enc", "lc", " Sc", "cer", "st", "Sc", " SC", "bc", "sf", "se", "SC", "scope", " scr", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "con", "nc", "sch", "cc", "sh", "sec", "sp", "src", "rc", "system", "sche", "ca", "cur", "cs", "l", "cl", "pc", "exec", "ner", "sl", "ci", "screen", "sci"], "n": ["j", "nn", "conn", "len", "nu", "ns", "sn", "in", "d", "no", "z", "c", "m", "r", "y", "network", "nit", "nc", "t", "nb", "k", "cn", "e", "ne", "p", "f", "net", "na", "o", "w", "s", "N", "l", "num", "x", "nan", "u", "g", "ni", "size", "b"], "a": ["app", "ba", "ab", "ma", "part", "aaa", "aa", "sa", "ata", "d", "am", "aux", "array", "v", "at", "c", "area", "m", "ac", "an", "abs", "this", "ana", "A", "tta", "input", "ga", "data", "p", "alpha", "Array", "aj", "la", "va", "as", "na", "ca", "ae", "g", "u", "all", "b", "sta"], "i": ["id", "slice", "j", "ri", "pi", "in", "mi", "init", "ip", "ii", "v", "io", "ix", "start", "y", "gi", "index", "k", "phi", "e", "p", "f", "qi", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "info", "x", "ci", "u", "ni", "ti", "fi", "ai", "uri", "I"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tint n = 0, q = 0;\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\ttry {\\n\t\t\tn = scanner.nextInt();\\n\t\t\tq = scanner.nextInt();\\n\t\t} catch (Exception e) {\\n\t\t}\\n\t\tArrayList<Queue> qu = new ArrayList<Queue>();\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ttry {\\n\t\t\t\tString name = scanner.next();\\n\t\t\t\tint time = scanner.nextInt();\\n\t\t\t\tqu.add(new Queue(name, time));\\n\t\t\t} catch (Exception e) {\\n\t\t\t}\\n\t\t}\\n\\n\t\tint i = 0, count = 0, alltime = 0;\\n\t\twhile (qu.size() > 0) {\\n\t\t\ti = i % qu.size();\\n\t\t\tint t = qu.get(i).time;\\n\t\t\tif (t <= q) {\\n\t\t\t\talltime += t;\\n\t\t\t\tSystem.out.println(qu.get(i).name + \" \" + alltime);\\n\t\t\t\tqu.remove(i);\\n\t\t\t\ti--;\\n\t\t\t} else {\\n\t\t\t\talltime += q;\\n\t\t\t\tqu.get(i).time -= q;\\n\t\t\t}\\n\t\t\ti++;\\n\t\t}\\n\\n\t}\\n}\\n\\n\\nclass Queue {\\n\tString name;\\n\tint time;\\n\\n\tpublic Queue(String n, int t) {\\n\t\tname = n;\\n\t\ttime = t;\\n\t}\\n}", "target": "231", "substitutes": {"n": ["j", "none", "nn", "a", "len", "sn", "ns", "nu", "in", "d", "node", "nl", "v", "z", "c", "an", "m", "norm", "r", "en", "y", "network", "out", "nc", "nb", "ng", "anon", "k", "nt", "un", "e", "ne", "p", "number", "f", "on", "net", "dn", "inn", "ot", "o", "s", "nin", "N", "l", "num", "x", "nw", "u", "g", "b"], "q": ["id", "Q", "ch", "h", "check", "length", "query", "in", "limit", "iq", "z", "v", "sq", "c", "y", "qt", "size", "sh", "qs", "qq", "k", "req", "e", "batch", "p", "qi", "f", "quant", "queue", "requ", "w", "l", "cl", "dq", "x", "qa", "patch", "u", "eq", "total"], "scanner": ["analyn", "scanNER", "planinner", "nerer", "scaner", "Scanner", "aner", "scanener", "scanmer", "Scanener", "Scaninner", "analyinner", " scanr", " scaninner", "plann", "anter", "anr", "analyner", " scanmer", "caninner", "nerNER", "caner", "scancer", "nerener", "canmer", "Scaner", " scancer", "canning", "analyer", "Scanr", "nerner", " scanning", "Scanter", "analycer", "analyter", "Scanmer", "scanning", "anner", "Scann", "scanr", "scann", "canner", "planNER", "canNER", "analyNER", "scaninner", "scanter", "Scanning", "Scancer", "planner", " scaner", "canener", "ScanNER", " scanter"], "qu": ["sc", "ku", "sw", "equ", "Q", "ch", "ql", "pool", "place", "su", "whe", "squ", "query", "cho", "sem", "shell", "com", "cli", "quer", "QU", "iq", "sq", "ob", "Qu", "qt", "sh", "quad", "qs", "qq", "ctx", "queue", "question", "requ", "gu", "wa", "acqu", "ph", "quit", "coll", "aqu", "lo", "cl", "pl", "prom", "ques", "dq", "qa", "who", "qv", "ue", "que", "um", "ou", "co"], "i": ["id", "slice", "inner", "j", "lc", "ri", "counter", "pi", "part", "in", "mi", "init", "d", "ip", "ii", "ind", "cli", "z", "ix", "v", "io", "is", "c", "m", "start", "ori", "y", "size", "gi", "index", "phi", "e", "p", "qi", "f", "esi", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "b", "isi", "ie", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "ti", "uri", "ai", "mini", "I"], "name": ["one", "base", "game", "node", "description", "start", "url", "m", "word", "NAME", "na", "ame", "version", "num", "entry", "path", "line", "d", "user", "group", "type", "default", "search", "data", "index", "key", "e", "number", "ne", "f", "string", "pass", "date", "space", "label", "work", "job", "resource", "an", "call", "out", "Name", "value", "names", "home", "connection", "el", "action", "id", "instance", "nn", "a", "str", "part", "ns", "no", "ip", "child", "alias", "prefix", "min", "on", "lock", "cache", "o", "image", "container", "parent", "code", "l", "info", "size"], "time": ["port", "h", "counter", "form", "am", "start", "m", "live", "T", "duration", "tim", "w", "val", "version", "num", "complete", "change", "path", "ice", "d", "method", "type", "z", "activity", "data", "f", "end", "times", "date", "text", "load", "depth", "loop", "rate", "work", "TIME", "error", "sleep", "frequency", "length", "offset", "memory", "etime", "timeout", "im", "level", "c", "call", "position", "value", "ty", "test", "trace", "clock", "money", "rank", "order", "id", "Time", "speed", "when", "ip", "delay", "content", "timer", "event", "run", "code", "weight", "info", "ime", "cost", "size", "total"], "count": ["id", "ch", "base", "counter", "check", "length", "ind", "child", "z", "call", "c", "start", "Count", "index", "wait", "p", "cond", "cache", "max", "found", "seq", "code", "cl", "ci", "list", "total"], "alltime": ["anytim", "llty", " alltimes", "allty", " alltim", "alltimes", "lltime", "bothtimer", "alltim", "allime", "altimer", "onlytim", "allTime", "alime", "allspeed", " alletime", "altty", "alttime", "allstime", "altspeed", "anytime", "alttim", "llspeed", "ALLTime", "onlyty", "alTime", "ALLime", " allTime", "allsTime", "bothtime", "Alltime", " alltimer", "allsetime", "Alletime", "onlytime", "bothime", "onlyspeed", "Alltimes", "lltim", "allstimes", " allime", "bothtim", "alltimer", "anyime", "AllTime", "alletime", "ALLtimer", "ALLtime", "anytimer", "altime"], "t": ["id", "Time", "tm", "j", "tw", "ct", "a", "tp", "length", "d", "tf", "et", "ta", "z", "v", "at", "c", "type", "m", "y", "en", "pt", "qt", "tc", "T", "tt", "dt", "k", "e", "ty", "p", "trial", "f", "te", "tim", "ot", "test", "o", "temp", "w", "s", "l", "wt", "x", "u", "ant", "ti", "ts"], "get": ["change", "port", "one", "ve", "single", "Get", "ice", "or", "fix", "move", "export", "neg", "et", "read", "search", "shift", "disable", "min", "pull", "value", "core", "pre", "by", "key", "add", "prev", "got", "end", "cycle", "find", "item", "ge", "next", "it", "let", "gets", "reset", "range", "per", "GET", "drop", "set", "put", "remove", "del", "load", "g", "size", "service", "temp"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        for(int i = 0; i < n; i++){\\n            a[i] = sc.nextInt();\\n        }\\n        int[] copy = new int[n];\\n        for(int i = 0; i < n; i++){\\n            copy[i] = a[i];\\n        }\\n        int count = 0;\\n        int light = 1;\\n        int flag = 1;\\n        for(int i = 0; ; i++){\\n            if(light != 2 && copy[light-1] != 0){\\n                copy[light-1] = 0;\\n                light = a[light-1];\\n                count++;\\n            } else if(copy[light-1] == 0){\\n                flag = 0;\\n                break;\\n            } else if(light == 2){\\n                break;\\n            }\\n        }\\n        if(flag == 0){\\n            System.out.print(\"-1\");\\n        } else {\\n            System.out.print(count);\\n        }\\n    }\\n}", "target": "175", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "ss", "cr", "esc", "sq", "c", "scan", "osc", "out", "ec", "nc", "sch", "cor", "sh", "cc", "sec", "sp", "src", "rc", "system", "anc", "sche", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "screen", "cv", "mc", "sci"], "n": ["j", "nn", "h", "len", "sn", "ns", "part", "in", "d", "no", "z", "v", "c", "m", "r", "en", "y", "network", "t", "ln", "nb", "k", "nt", "e", "number", "p", "ne", "f", "net", "span", "o", "w", "s", "N", "l", "num", "x", "ni", "u", "size", "b"], "a": ["access", "address", "ba", "ab", "ai", "aaa", "aa", "sa", "in", "am", "array", "ka", "ha", "an", "area", "c", "at", "ia", "y", "A", "ga", "e", "p", "alpha", "missing", "aj", "span", "la", "ca", "as", "va", "na", "image", "o", "s", "ama", "asa", "l", "sup", "da", "parse", "au", "x", "auto", "all", "ar", "b"], "i": ["id", "slice", "j", "ri", "pi", "I", "in", "mi", "init", "d", "ip", "ii", "z", "ix", "v", "io", "c", "y", "gi", "index", "phi", "key", "e", "p", "fi", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "eni", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "uri", "ti", "ai", "mini", "b"], "copy": ["slice", "cop", "are", "id", "one", "base", "pixel", "line", "check", "offset", "init", "cross", "array", "share", "cover", "type", "default", "style", "area", "c", "scan", "sync", "match", "size", "ce", "Copy", "sh", "cat", "e", "p", "clone", "ge", "color", "skip", "image", "clip", "o", "use", "sky", "code", "store", "ignore", "set", "info", "delete", "shared", "order", "auto", "load", "link", "cp", "transfer", "list", "scale", "source", "co"], "count": ["id", "soft", "base", "back", "counter", "line", "length", "len", "check", "part", "offset", "force", "group", "old", "style", "c", "start", "live", "match", "y", "Count", "slow", "index", "key", "number", "f", "age", "max", "char", "color", "low", "ph", "coll", "show", "allow", "code", "l", "sum", "weight", "info", "print", "load", "depth", "size", "list", "b", "total"], "light": ["lighting", "pixel", "soft", "open", "error", "fill", "lag", "lights", "flash", "line", "length", "Light", "len", "force", "focus", "no", "share", "group", "flower", "border", "black", "style", "lit", "start", "live", "feature", "match", "band", "sun", "land", "pick", "sh", "like", "key", "alpha", "cell", "bug", "char", "power", "li", "color", "low", "image", "ph", "shine", "sky", "show", "use", "ish", "field", "l", "sum", "lo", "info", "weight", "print", "shadow", "bright", "load", "lin", "link", "auto", "list", "high", "dark"], "flag": ["id", "draft", "lag", "pixel", "cloud", "soft", "error", "line", "len", "part", "offset", "force", "focus", "die", "group", "border", "type", "style", "start", "feature", "match", "sync", "band", "kind", "land", "like", "big", "key", "star", "bit", "f", "flags", "age", "bug", "char", "color", "low", "ish", "field", "fire", "l", "weight", "info", "service"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main {\\n    public static void main(String[] args){\\n\\n        Scanner s = new Scanner(System.in);\\n        \\n        int yusha = s.nextInt();        // \u52c7\u8005\u306e\u6570\\n        long monsters[] = new long[yusha + 1];    //\u3000\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\u3092\u683c\u7d0d\u3059\u308b\\n        long strength[] = new long[yusha];        // \u52c7\u8005\u306e\u5f37\u3055\u3092\u683c\u7d0d\u3059\u308b\\n\\n        // \u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u5012\u3057\u305f\u6570\\n        long count = 0;\\n\\n        for (int i = 0; i < yusha+1; i++) {\\n            monsters[i] = s.nextInt();\\n        }\\n\\n        for (int i = 0; i < yusha; i++) {\\n            strength[i] = s.nextInt();\\n        }\\n\\n        // \u52c7\u8005\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\\n        for (int i = 0; i < yusha; i++) {\\n            // 2\u3064\u306e\u8857\u3092\u5b88\u308d\u3046\u3068\u3059\u308b\\n            for (int j = 0; j < 2; j++) {\\n                // \u52c7\u8005\u3088\u308a\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u5f37\u3044\u5834\u5408\u5012\u305b\u308b\u9650\u308a\u5012\u3059\\n                if (monsters[i+j] >= strength[i]) {\\n                    count += strength[i];\\n                    monsters[i+j] = monsters[i+j] - strength[i];    // \u6b8b\u308a\u30e2\u30f3\u30b9\u30bf\u30fc\u6570\\n                    strength[i] = 0;                // \u52c7\u8005\u306e\u4f59\u529b\\n                } else {\\n                    count += monsters[j + i];   // \u4e00\u3064\u306e\u8857\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u3059\u3079\u3066\u5012\u3059\\n                    strength[i] = strength[i] - monsters[i+j];  // \u52c7\u8005\u306e\u4f59\u529b\\n                    monsters[i+j] = 0;    // \u6b8b\u308a\u30e2\u30f3\u30b9\u30bf\u30fc\u6570\\n                }\\n            }\\n        }\\n\\n        System.out.println(count);\\n    }\\n}", "target": "159", "substitutes": {"s": ["h", "sys", "fs", "ings", "js", "ns", "rs", "sf", "se", "services", "ss", "ps", "sets", "v", "c", "is", "abs", "r", "settings", "os", "es", "ds", "e", "p", "n", "ses", "f", "ubs", "ssl", "bis", "as", "w", "sb", "i", "S", "l", "si", "stats", "sl", "tests", "sv", "ops", "ms", "ls", "b", "ts", "ins"], "yusha": ["ypos", "yarch", "yyid", " ypos", " yarch", "iyarch", "iypos", "iyid", "yid", "yyarch", "yypos", " yid"]}}
{"code": "import java.io.PrintStream;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tstatic final PrintStream out = System.out;\\n\tstatic final Scanner sc = new Scanner(System.in);\\n\tstatic final long Mod = 1000_000_007L;\\n\tint a,b;\\n\\n\tpublic static void main(String[] args) {\\n\t\tMain main = new Main();\\n\t\tmain.solve();\\n\t\tSystem.exit(0);\\n\t}\\n\\n\tvoid solve() {\\n\t\ta = nextInt();\\n\t\tb = nextInt();\\n\\n\t\tlong res = 0;\\n\t\tif(a < b) {\\n\t\t\tfor(int i=0,multi = 1;i<b;i++,multi*=10) {\\n\t\t\t\tres += a * multi;\\n\t\t\t}\\n\t\t}else {\\n\t\t\tfor(int i=0,multi = 1;i<a;i++,multi*=10) {\\n\t\t\t\tres += b * multi;\\n\t\t\t}\\n\t\t}\\n\\n\t\tout.println(res);\\n\t}\\n\\n\tpublic int[] nextIntArray(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++)a[i] = nextInt();\\n\t\treturn a;\\n\t}\\n\tpublic long[] nextLongArray(int n) {\\n\t\tlong[] a = new long[n];\\n\t\tfor (int i = 0; i < n; i++)a[i] = nextLong();\\n\t\treturn a;\\n\t}\\n\tpublic int nextInt() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\tpublic long nextLong() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\tpublic String next() {\\n\t\treturn sc.next();\\n\t}\\n\\n\tlong gcd(long m,long n) {\\n\t\tif (m<n) return gcd(n,m);\\n\t\tif (n==0)return m;\\n\t\treturn gcd(n,m%n);\\n\t}\\n\\n\tlong lcm(long m, long n) {\\n\t        return m * n / gcd(m, n);\\n\t}\\n}", "target": "24", "substitutes": {"out": ["ch", "console", "error", "pool", "outs", "conn", "file", "line", "exit", "in", "err", "array", "println", "io", "outer", "c", "OUT", "r", "this", "gr", "input", "data", "p", "ex", "obj", "cache", "result", "IN", "string", "list", "o", "In", "w", "up", "code", "log", "sum", "self", "exec", "info", "exp", "Out", "output", "raw", "buffer", "temp", "writer", "write"], "sc": ["cont", "sw", "ch", "Str", "lc", " Sc", "sys", "st", "str", "or", "sn", "Sc", " SC", "bc", "SC", "in", " scr", "ss", "cr", "esc", "c", "osc", "scan", "r", "nc", "ng", "Desc", "p", "sp", "ser", "src", "rc", "system", "string", "as", "gram", "cs", "code", "cl", "text", "asc", "g", "null", "config", "sci"], "Mod": ["id", " ret", " ms", "length", "len", " M", " micro", " seq", "mod", " count", " exp", "is", "Num", "r", "min", "p", " mod", "max", "mult", "M", "micro", "N", "num", "ms", " Mi", " init", " len"], "a": ["aw", "api", "ba", "ab", "oa", "fa", "ma", "aaa", "aa", "sa", "d", "am", "in", "ata", "array", "ha", "an", "c", "area", "ac", "ia", "r", "this", "y", "ana", "A", "tta", "ga", "data", "ad", "e", "p", "alpha", "f", "ea", "aj", "span", "ar", "wa", "la", "active", "va", "as", "ca", "na", "o", "w", "s", "ama", "code", "l", "da", "au", "x", "ae", "u", "action", "ai", "sta"], "b": ["wb", "j", "bur", "base", "api", "ba", "ab", "ib", "cb", "body", "abb", "aaa", "xb", "aa", "bc", "d", "bb", "pb", "bf", "v", "abc", "ob", "c", "r", "y", "db", "B", "nb", "beta", "be", "e", "obj", "mb", "f", "bp", "eb", "ca", "bs", "o", "sb", "lb", "l", "bi", "fb", "x", "bd", "u", "rb", "bis"], "res": ["rys", "vals", "fields", "features", "values", "details", "right", "resolution", "js", "rx", "rs", "runs", "Result", "rec", "err", "rep", "ress", "params", "ras", "ros", "rus", "rates", "r", "modules", "gr", "rows", "re", "rez", "req", "ret", "reg", "nos", "rev", "arr", "mr", "ries", "result", " Res", "rh", " results", "blocks", "our", "range", "val", "pres", "ris", "Res", "sum", "info", "results", "resp", "RES", "real", "ms", "Rs", "bytes", "total"], "i": ["id", "j", "api", "ri", "h", "pi", "mu", "I", "in", "mi", "my", "ip", "ii", "cli", "z", "ix", "ori", "c", "is", "v", "io", "r", "y", "gi", "index", "uli", "phi", "e", "p", "anti", "f", "qi", "ji", "fi", "q", "ui", "xi", "li", "iu", "it", "o", "eni", "di", "ini", "ie", "oi", "yi", "field", "ei", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "uri", "ni", "ai", "mini"], "multi": ["uni", "mid", "cu", "mix", "poly", "single", "pi", "multiple", "mu", "cum", "mi", "global", "cli", "many", "group", "count", "area", "Multi", "current", "avi", "mega", "complex", "batch", "ui", "mm", "la", "li", "next", "repeat", "umi", "mult", "low", "coll", "two", "di", "large", "tri", "micro", "div", "chi", "num", "common", "sum", "bi", "shared", "ci", "auto", "uri", "mini", "size", "list", "scale", "total"], "n": ["j", "one", "nn", "h", "len", "sn", "ns", "nu", "in", "d", "no", "v", "z", "c", "an", "not", "r", "en", "y", "network", "nc", "t", "mn", "k", "nt", "un", "e", "ne", "p", "number", "f", "on", "net", "o", "w", "s", "M", "N", "l", "num", "nm", "x", "nan", "u", "g", "all", "size", "name"], "m": ["j", "man", "h", "ma", "mu", "dm", "in", "d", "am", "mi", "om", "z", "v", "im", "c", "an", "r", "y", "mon", "mn", "min", "mean", "k", "dim", "e", "machine", "p", "wm", "f", "gm", "ym", "pm", "me", "mm", "hm", "o", "M", "w", "bm", "l", "N", "num", "x", "u", "g", "mini", "all", "size", "um", "name"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\n/**\\n * Built using CHelper plug-in Actual solution is at the top\\n */\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tInputStream inputStream = System.in;\\n\t\tOutputStream outputStream = System.out;\\n\t\tInputReader in = new InputReader(inputStream);\\n\t\tPrintWriter out = new PrintWriter(outputStream);\\n\t\tTask solver = new Task();\\n\t\tsolver.solve(1, in, out);\\n\t\tout.close();\\n\t}\\n\\n\tstatic class Task {\\n\t\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\\n\t\t\tint A = in.nextInt();\\n\t\t\tint B = in.nextInt();\\n\t\t\tint count = 0;\\n\t\t\tfor(int i = A; i <= B; i++) {\\n\t\t\t\tif(String.valueOf(i).charAt(0) == String.valueOf(i).charAt(4) && String.valueOf(i).charAt(1) == String.valueOf(i).charAt(3)) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tout.println(count);\\n\t\t}\\n\t}\\n\t\t\\n\tstatic class InputReader {\\n\t\tpublic BufferedReader reader;\\n\t\tpublic StringTokenizer tokenizer;\\n\\n\t\tpublic InputReader(InputStream stream) {\\n\t\t\treader = new BufferedReader(new InputStreamReader(stream), 32768);\\n\t\t\ttokenizer = null;\\n\t\t}\\n\\n\t\tpublic String next() {\\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn tokenizer.nextToken();\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\t}\\n}", "target": "104", "substitutes": {"inputStream": ["inputHandler", "outputSocket", " inputstream", "inputSocket", " inputSteam", " inputSocket", "outputstream", "InputSocket", "outputSteam", " inputHandler", "inputstream", "Inputstream", "outputHandler", "inputSteam", "InputSteam", "InputHandler", "InputStream"], "outputStream": [" outputSocket", "outputSocket", "outputWriter", "inputSocket", "OutputWriter", "outputSteam", "OutputStream", "OutputStreamer", "targetStream", "targetSteam", "OutputSocket", "inputSteam", "inputStreamer", "OutputSteam", "targetStreamer", "targetWriter", "inputWriter", " outputWriter", " outputSteam", "outputStreamer"], "in": ["id", "inner", "path", "sin", "login", "again", "conn", "gin", "a", "file", "bin", "cin", "init", "din", "err", "inc", "user", "client", "arg", "io", "er", "is", "url", "ac", "r", "this", "con", "request", "input", "min", "from", "data", "index", "isin", "n", "win", "lock", "IN", "rin", "string", "inn", "inf", "ic", "binary", "connection", "image", "In", "ini", "s", "nin", "version", "l", "log", "config", "info", "pin", "exec", "kin", "between", "vin", "into", "lin", "source", "ins"], "out": ["path", "again", "inner", "pool", "error", "outs", "writing", "conn", "file", "outside", "line", "exit", "bin", "memory", "page", "timeout", "scope", "init", "err", "inc", "user", "array", "println", "report", "server", "process", "client", "io", "outer", "prefix", "OUT", "this", "to", "session", "data", "ex", "problem", "net", "cache", "off", "string", "list", "window", "connection", "o", "In", "w", "up", "task", "parent", "log", "sum", "exec", "x", "Out", "socket", "output", "write", "copy", "buffer", "temp", "b", "writer", "name"], "solver": ["solution", "Sol", "ssolver", "ssolution", "insolve", "ssolving", "insolution", "setsolving", "setsolution", "setsolve", "Solve", "insol", "ssol", "solve", "insolver", "solving", "ssolve", "Solution", "Solver", "sol", "Solving", "setsolver"], "testNumber": ["TestCounter", "TestAmount", " testCounter", "Testnumber", " testsNumber", " testsAmount", "testCounter", "TestNumber", "testnumber", " testnumber", " testAmount", " testsCounter", "testAmount", " testsnumber"], "A": ["DA", "An", "a", "F", "E", "First", "MA", "Max", "AA", "Count", "H", "Input", "T", "Y", "SA", "L", "API", "K", "One", "C", "O", "CA", "NA", "D", "KA", "M", "HA", "U", "S", "N", "Java", "From", "Ca", "LA", "X", "V", "P", "I", "G", "RA"], "B": ["Q", "BI", "Beta", "BL", "E", "LB", "DB", "CB", "AB", "Bi", "NB", "BF", "Count", "UB", "Number", "MB", "T", "Y", "BER", "BB", "R", "L", "WB", "BA", "IB", "W", "BC", "O", "C", "GB", "D", "b", "U", "N", "X", "V", "BE", "P", "I", "G"], "count": ["id", "base", "error", "counter", "a", "length", "len", "part", "force", "array", "limit", "group", "child", "old", "type", "c", "start", "second", "Count", "value", "core", "index", "data", "e", "number", "p", "n", "add", "f", "batch", "cache", "string", "found", "test", "low", "coll", "allow", "parent", "code", "keep", "num", "sum", "weight", "info", "text", "depth", "size", "list", "b", "total", "work"], "i": ["id", "slice", "j", "one", "iii", "ri", "a", "pi", "I", "mi", "ip", "ii", "cli", "ori", "v", "io", "c", "ix", "abi", "y", "gi", "index", "phi", "e", "p", "n", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "uri", "ai", "b"], "reader": ["slice", "inner", "iterator", "ri", "layer", "file", "oder", "or", "service", "ro", "resource", "report", "table", "server", "client", "er", "io", "pointer", "Reader", "iter", "r", "read", "reading", "input", "re", "loader", "e", "driver", "worker", "row", "feed", " Reader", "it", "source", "per", "collection", "parse", "handler", "parser", "buffer", "writer", "entry"], "tokenizer": ["serialiser", "okenner", "tokenize", "okenizer", "Tokenize", "tokener", "tokenner", "normalizer", "Tokenizer", " tokeniser", "okenization", " tokenization", "serialize", "tagizer", "Tokenifier", " tokenifier", " tokenner", "okenize", "normaliter", "Tokener", "tokenifier", "tokeniser", " tokenizers", " tokeniter", "serialization", "tagifier", "tagizers", "Tokeniter", "tagiser", "tokeniter", "tokenizers", "okeniser", "Tokeniser", "okener", "tokenization", " tokener", "normalization", "Tokenner", "serializer", "okeniter", " tokenize", "Tokenization", "normalner", "Tokenizers"], "stream": ["cont", "sw", "port", "path", "Stream", "writer", "pool", "slice", "file", "document", "form", "buffer", "body", "serial", "resource", "user", "server", "client", "old", "v", "response", "transform", "r", "read", "input", "request", "data", "channel", "lock", "string", "row", "system", "feed", "connection", "stack", "trans", "image", "view", "null", "raw", "ream", "source"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        HashMap week = new HashMap<String, Integer>();\\n        week.put(\"SUN\", 7);\\n        week.put(\"MON\", 6);\\n        week.put(\"TUE\", 5);\\n        week.put(\"WED\", 4);\\n        week.put(\"THU\", 3);\\n        week.put(\"FRI\", 2);\\n        week.put(\"SAT\", 1);\\n        System.out.println(week.get(s));\\n    }\\n}\\n", "target": "136", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "ss", "uc", "cr", "esc", "c", "scan", "osc", "out", "ec", "nc", "sec", "sh", "cc", "cus", "desc", "proc", "sp", "dc", "acc", "src", "ocr", "rc", "system", "anc", "cs", "log", "cl", "pc", "ner", "asc", "mc", "sci"], "s": ["sw", "h", "sg", "a", "ings", "str", "ns", "in", "d", "ss", "v", "c", "is", "m", "r", "y", "t", "es", "strings", "k", "e", "ses", "p", "n", "f", "ssl", "string", "ws", "w", "sb", "S", "l", "g", "u", "ls", "series", "b"], "week": ["fw", "inner", "east", "wx", "winter", "game", "str", "part", "wife", "build", "unit", "book", "d", "user", "rule", "array", " weeks", "old", "start", "ward", "seed", "element", "word", "y", "year", "event", "index", "daily", "Week", "key", "weekly", "night", "how", "f", "win", "lock", "month", "bug", "end", "grid", "wan", "off", "string", "row", "wei", "window", "ww", "low", "eight", "ow", "flow", "w", "class", "hour", "we", "wk", "work", "task", "date", "div", "time", "block", "diff", "letter", "all", "day", "update", "clock"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = scanner.nextInt();\\n        int [] arr = new int[n+1];\\n        for(int i=0; i<n-1; i++){\\n            arr[scanner.nextInt()]+=1;\\n        }\\n        for(int i=1; i<=n; i++)\\n            System.out.println(arr[i]);\\n    }\\n}", "target": "12", "substitutes": {"scanner": ["annner", "scaner", "Scanner", "haner", "aner", "scanener", "annener", "Scanener", "Scaninner", "analyinner", "hanner", "scanator", "hanker", "analyner", "caninner", "caner", "Scaner", "analyer", "Scanker", "scanker", "anner", "annator", "Scanator", "canker", " scanener", "canner", " scanator", "hanener", "scaninner", "anker", " scaner", "analyker", "canener", "anener"], "n": ["j", "nn", "conn", "len", "sn", "ns", "in", "d", "no", "count", "nl", "z", "v", "c", "m", "r", "en", "y", "network", "nc", "t", "ln", "nb", "nr", "k", "nt", "ne", "p", "dn", "f", "net", "o", "w", "s", "fn", "N", "num", "l", "x", "nan", "ni", "u", "size", "b", "name"], "arr": ["enc", "ab", "str", "aaa", "aa", "err", "array", "arg", "adr", "v", "inter", "ars", "iter", "r", "parts", "tr", "img", "rr", "data", "index", "cat", "batch", "obj", "arch", "prev", "Array", "aj", "dat", "br", "ray", "att", "av", "coll", "val", "fr", "var", "parse", "attr", "ann", "ar", "list", "order"], "i": ["id", "slice", "inner", "j", "ri", "pi", "in", "mi", "init", "ip", "ii", "z", "v", "ix", "io", "abi", "start", "y", "gi", "index", "phi", "e", "p", "fi", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "ti", "ai", "hei", "mini", "I"], "nextInt": ["NextExt", "lastLong", "lastInt", "shiftINT", " nextINT", "lastint", "shiftint", "nextint", "currentLong", "shiftExt", "nextLong", "Nextint", "nextExt", " nextExt", "NextInt", "currentFloat", "nextINT", "nextFloat", " nextFloat", "currentInt", "lastFloat", "shiftInt", "currentint", "NextINT", " nextLong", " nextint"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.Arrays;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tint N = sc.nextInt();\\n\t\tString[] S = new String[N];\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\tS[i] = sc.next();\\n\\n\t\tArrays.sort(S);\\n\t\tint max = 0;\\n\t\tint count = 1;\\n\\n\t\tfor (int i = 1; i < N; i++) {\\n\t\t\tif (S[i].equals(S[i - 1]))\\n\t\t\t\tcount++;\\n\t\t\telse\\n\t\t\t\tcount = 1;\\n\\n\t\t\tmax = Math.max(max, count);\\n\t\t}\\n\\n\t\tcount = 1;\\n\\n\t\tif (max == 1) {\\n\t\t\tfor (int i = 0; i < N; i++) {\\n\t\t\t\tSystem.out.println(S[i]);\\n\t\t\t}\\n\t\t\treturn;\\n\t\t}\\n\\n\t\tfor (int i = 1; i < N; i++) {\\n\t\t\tif (S[i].equals(S[i - 1]))\\n\t\t\t\tcount++;\\n\t\t\telse\\n\t\t\t\tcount = 1;\\n\\n\t\t\tif (max == count)\\n\t\t\t\tSystem.out.println(S[i]);\\n\t\t}\\n\\n\t}\\n\\n\t//\u4ee5\u4e0b\u3001\u81ea\u4f5c\u30e9\u30a4\u30d6\u30e9\u30ea\\n\\n\t/*\\n\t\tint N = sc.nextInt();\\n\\n\t\tint[] a = new int[N];\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\ta[i] = sc.nextInt();\\n\\n\t\tString s = sc.next();\\n\\n\t\tString[] a = new String[N];\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\ta[i] = sc.next();\\n\\n\t\tint[][] a = new int[N][2];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ta[i][0] = sc.nextInt();\\n\t\t\ta[i][1] = sc.nextInt();\\n\t\t}\\n\t\tArrays.sort(a, (x, y) -> Integer.compare(x[0], y[0]));\\n\\n\t\tList<Integer> list = new ArrayList<>();\\n\\n\t\tSet<Integer> set = new HashSet<>();\\n\\n\t\tMap<Integer, Integer> map = new HashMap<>();\\n\\n\t\tnextLine\u306e\u3068\u304d\u306f\\n\t\tScanner sc = new Scanner(System.in);\\n\t */\\n\\n\t//\u7d44\u307f\u5408\u308f\u305b\u306e\u6570nCr\u3092\u8a08\u7b97\\n\tpublic static int calcNumOfCombination(int n, int r) {\\n\t\tint num = 1;\\n\t\tfor (int i = 1; i <= r; i++) {\\n\t\t\tnum = num * (n - i + 1) / i;\\n\t\t}\\n\t\treturn num;\\n\t}\\n\\n\t//\u968e\u4e57\\n\tpublic static int fact(int n) {\\n\t\tif (n == 1 || n == 0)\\n\t\t\treturn 1;\\n\t\telse\\n\t\t\treturn n * fact(n - 1);\\n\t}\\n\\n\t//\u6307\u5b9a\u3057\u305f\u5024\u4ee5\u4e0a\u306e\u8981\u7d20\u304c\u6700\u521d\u306b\u73fe\u308c\u308b\u4f4d\u7f6e\\n\t//\u8981\u7d20\u306e\u6570\u306f+1\uff08\u914d\u5217\u306e\u30ba\u30ec)\\n\tpublic static long lowerBound(int n, long[] x, long y) {\\n\t\tint left = 0;\\n\t\tint right = n;\\n\t\twhile (left < right) {\\n\t\t\tint mid = (left + right) / 2;\\n\t\t\tif (x[mid] < y) {\\n\t\t\t\tleft = mid + 1;\\n\t\t\t} else {\\n\t\t\t\tright = mid;\\n\t\t\t}\\n\t\t}\\n\t\treturn left;\\n\t}\\n\\n\t//\u6307\u5b9a\u3057\u305f\u5024\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u304c\u6700\u521d\u306b\u73fe\u308c\u308b\u4f4d\u7f6e\\n\t//\u8981\u7d20\u306e\u6570\u306f+1\uff08\u914d\u5217\u306e\u30ba\u30ec)\\n\tpublic static long upperBound(int n, long[] x, long y) {\\n\t\tint left = 0;\\n\t\tint right = n;\\n\t\twhile (left < right) {\\n\t\t\tint mid = (left + right) / 2;\\n\t\t\tif (x[mid] <= y) {\\n\t\t\t\tleft = mid + 1;\\n\t\t\t} else {\\n\t\t\t\tright = mid;\\n\t\t\t}\\n\t\t}\\n\t\treturn left;\\n\t}\\n\\n\t//\u6700\u5927\u516c\u7d04\u6570\\n\tpublic static long gcd(long a, long b) {\\n\t\tif (a < b)\\n\t\t\treturn gcd(b, a);\\n\t\tlong c = 0;\\n\t\tc = a % b;\\n\t\tif (c == 0)\\n\t\t\treturn b;\\n\t\treturn gcd(b, c);\\n\t}\\n\\n\t//\u6700\u5c0f\u516c\u500d\u6570\\n\tpublic static long lcm(long m, long n) {\\n\t\treturn m * n / gcd(m, n);\\n\t}\\n\\n\t//\u7d20\u6570\u5224\u5b9a\\n\tpublic static boolean isPrime(int n) {\\n\t\tif (n < 2)\\n\t\t\treturn false;\\n\t\tif (n == 2)\\n\t\t\treturn true;\\n\t\tif (n % 2 == 0)\\n\t\t\treturn false;\\n\\n\t\tfor (int i = 3; i * i <= n; i += 2) {\\n\t\t\tif (n % i == 0)\\n\t\t\t\treturn false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}\\n\\n//\u4ee5\u4e0b\u3001\u9ad8\u901f\u30b9\u30ad\u30e3\u30ca\u30fc\u30af\u30e9\u30b9\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "235", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "search", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "acc", "rc", "system", "anc", "ca", "cur", "sb", "cs", "si", "cl", "pc", "exec", "ner", "ci", "asc", "cv", "mc", "sci"], "N": ["Q", "Ne", "Ni", "J", "Ns", "F", "NO", "No", "Part", "Max", " n", "NB", "Num", "Count", "H", "Node", "T", "B", "NE", "Y", "NT", "NS", "n", "R", "L", "K", "W", "Len", "C", "O", "NA", "D", "M", "U", "Z", "X", "V", "NN", "P", "Size", "I"], "S": ["Services", "Sync", "SO", "Service", "T", "OS", "INS", "NS", "Points", "Is", "D", "RS", "Socket", "X", "P", "Es", "IDS", "SH", "Si", "SS", "Fs", "Results", "SC", "Single", "AS", "Settings", "CS", "Session", "H", "Stars", "A", "VS", "Sl", "SE", "Sign", "M", "BS", "ST", "SI", "V", "services", "Site", "Files", "Ins", "F", "States", "TEXT", "Windows", "SL", "TS", "L", "Events", "IPS", "IS", "GS", "Tokens", "DS", "I", "Parameters", "Os", "SU", "Sample", "SR", "B", "PS", "Changes", "R", "K", "Source", "WS", "Rules", "s", "U", "Reports", "G", "Contents"], "i": ["inner", "layer", "h", "mi", "gi", "phi", "qi", "field", "chi", "x", "ci", "uri", "fi", "mini", "list", "lc", "d", "ii", "cli", "z", "io", "is", "index", "e", "f", "xi", "li", "multi", "eni", "hi", "u", "ti", "name", "pi", "mu", "init", "ix", "c", "y", "p", "n", "ik", "ui", "iu", "oi", "bi", "block", "ni", "ai", "I", "source", "id", "slice", "j", "api", "ri", "part", "ip", "ind", "ori", "v", "q", "it", "o", "di", "ini", "s", "ie", "si", "info", "my", "b"], "max": ["base", "always", "gt", "node", "limit", "MAX", "mean", "cat", "add", "average", "conf", "x", "patch", "diff", "list", "rand", "co", "wh", "cd", "std", "default", "now", "dom", "index", "key", "number", "division", "end", "rest", "cl", "self", "exp", "frac", "maximum", "auto", "depth", "name", "right", "length", "pop", "c", "core", "chain", "n", "cycle", "ax", "sum", "step", "rank", "scale", "id", "can", "wrap", "height", "mod", "no", "Max", "last", "cr", "min", "cache", "q", "power", "pad", "range", "div", "parent", "code", "first", "cost", "size", "total"], "count": ["id", "one", "base", "error", "counter", "check", "length", "len", "part", "only", "force", "inc", "cast", "limit", "play", "child", "last", "old", "default", "type", "call", "c", "start", "level", "now", "match", "Count", "current", "min", "core", "index", "key", "cat", "number", "n", "cond", "age", "cache", "cycle", "more", "char", "next", "found", "full", "col", "class", "allow", "parent", "code", "sum", "num", "weight", "first", "order", "load", "all", "depth", "size", "list", "b", "total", "name"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint[] town = new int[n];\\n\t\tfor(int i = 0; i < m; i++) {\\n\t\t\ttown[sc.nextInt() - 1] ++;\\n\t\t\ttown[sc.nextInt() - 1] ++;\\n\t\t}\\n\t\tfor(int i : town) {\\n\t\t\tSystem.out.println(i);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "57", "substitutes": {"sc": ["sw", "enc", "ch", "cont", "lc", "app", "soc", " Sc", "loc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "inc", "com", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "tc", "ec", "nc", "cc", "auc", "desc", "ctx", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "class", "sb", "cs", "cl", "pc", "exec", "ner", "parse", "ci", "asc", "sci"], "n": ["j", "nn", "a", "ns", "in", "d", "no", "init", "kn", "z", "v", "c", "en", "nc", "t", "mn", "nb", "k", "nt", "e", "ne", "p", "f", "net", "max", "o", "s", "N", "l", "num", "nm", "x", "u", "ni", "all", "b"], "m": ["j", "h", "dm", "in", "mi", "d", "md", "v", "z", "c", "r", "y", "mn", "k", "dim", "e", "p", "f", "mm", "cm", "hm", "o", "km", "M", "w", "l", "num", "nm", "x", "ms", "u", "mc", "b"], "town": ["port", "union", "craft", "address", "loc", "section", "length", "company", "family", "city", "build", "west", "unit", "mi", "rule", "round", "flower", "story", "square", "kn", "mill", "down", "crew", "area", "league", "ville", "board", "ward", "nation", "western", "shape", "community", "tower", "north", "dist", "control", "index", "zone", "number", "home", "division", "month", "own", "project", "row", "inn", "km", "eight", "week", "world", "field", "region", "lon", "phone", "struct", "size", "south", "state"], "i": ["id", "inner", "j", "one", "ri", "a", "pi", "in", "mi", "init", "d", "ip", "ii", "z", "io", "v", "c", "ix", "start", "y", "gi", "index", "phi", "e", "number", "p", "qi", "f", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "isi", "ie", "oi", "chi", "l", "si", "bi", "hi", "x", "zi", "ci", "u", "ni", "ti", "uri", "ai", "I", "name"], "nextInt": ["randomInt", "randomInst", " nextShort", " nextInteger", "nextInst", " nextInst", "NextExt", "NextShort", "randomint", "NextInteger", "randomShort", "prevLong", "currentInteger", "nextint", "currentLong", "nextLong", "prevFloat", "NextInst", "currentExt", "prevInteger", "Nextint", "nextExt", "NextFloat", " nextExt", "NextInt", "NextLong", "prevInt", "nextInteger", "nextFloat", "currentInt", " nextFloat", "nextShort", "currentint", " nextLong", " nextint"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tString S = sc.next();\\n\\n\t\tString[] resultArray = S.split(\"\");//[2]\\n\\n\t\tfor (int i = 0; i < K - 1; i++) {\\n\\n\t\t\tSystem.out.print(resultArray[i]);\\n\t\t}\\n\\n\t\tSystem.out.print(resultArray[K-1].toLowerCase());\\n\\n\t\tfor (int i = K ; i < N; i++) {\\n\\n\t\t\tSystem.out.print(resultArray[i]);\\n\t\t}\\n\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "71", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "app", "soc", " Sc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "cus", "sp", "ser", "rc", "system", "sche", "cur", "class", "sb", "cs", "l", "cl", "pc", "ner", "sl", "asc", "ci", "cv", "reader", "sci"], "N": ["Q", "J", "Ns", "F", "E", "NM", "NL", " n", "T", "B", "Y", "NT", "NS", "n", "L", "C", "O", "D", "M", "U", "V", "NN", "X", "P", "I", "G"], "K": ["Q", "J", "E", "KI", "Mask", "H", "KR", "Y", "k", "NK", " k", "Key", "W", "PK", "Ku", "C", "M", "KN", "KK", "Z", "SK", "KS", "DK", "X", "V", "P", "Sk", "G"], "S": ["Si", "SS", "SU", "F", "SC", "Single", "SL", "TS", "SM", "SO", "SR", "H", "A", "STR", "T", "B", "SA", "NS", "R", "L", "Array", "SE", "string", "C", "O", "D", "SN", "M", "s", "U", "SK", "SI", "RS", "V", "P", "DS", "G"], "resultArray": ["replyPath", " resultTable", "resultTable", "ResultPath", "resultString", "ResultArray", " resultString", "ResultString", "replyString", "resultPath", "replyTable", "replyArray", " resultPath", "ResultTable"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tString[] W = new String[N];\\n\\n\t\tfor(int i=0; i<N; i++) {\\n\t\t\tW[i] = sc.next();\\n\t\t}\\n\\n\t\tint judge1 = 0;\\n\\n\t\tfor(int j=0; j<N-1; j++) {\\n\t\t\tchar c1 = W[j].charAt(W[j].length()-1);\\n\t\t\tchar c2 = W[j+1].charAt(0);\\n\\n\t\t\tif(c1 == c2) {\\n\t\t\t\tjudge1 += 1;\\n\t\t\t}\\n\t\t}\\n\\n\t\tint judge2 = 0;\\n\\n\t\tfor(int k=0; k<N-1; k++) {\\n\t\t\tfor(int l=1; l<N-k; l++) {\\n\t\t\t\tif(W[k].equals(W[k+l])) {\\n\t\t\t\t\tjudge2 += 1;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tif(judge1 == N-1 && judge2 == 0) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t}\\n\\n}", "target": "70", "substitutes": {"sc": ["sw", "ch", "lc", " Sc", "Sc", " SC", "squ", "bc", "se", "SC", "sf", "scope", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "out", "ec", "nc", "sch", " sp", "sh", "cc", "nt", "sp", "ser", "src", "rc", "system", "anc", "sche", "cur", "cs", "si", "cl", "pc", "ner", "ci", "asc", "cv", "sci"], "N": ["Q", "Ni", "Ne", "J", "Ns", "F", "E", "ON", "NL", "No", "Part", "Network", " n", "Num", "H", "network", "Node", "T", "CNN", "B", "NE", "Sn", "Y", "NT", "NS", "n", "R", "L", "ND", "K", "IN", "State", "Len", "C", "NC", "O", "NA", "D", "SN", "M", "II", "KN", "U", "Z", "S", "V", "X", "NN", "P", "Size", "GN", "I"], "W": ["Write", "MW", "WP", "Q", "RW", "Weight", "F", "DW", "WER", "Only", "BW", "Writer", "Sw", "Watch", "TW", "H", "T", "B", "VW", "WR", "We", "GW", "SW", "Y", "Win", "EW", "R", "L", "WB", "Array", "Words", "K", "West", "NW", "Web", "ML", "Widget", "AW", "O", "C", "WS", "D", "w", "M", "FW", "CW", "S", "Work", "V", "WE", "X", "P", "Word", "Wh", "WN", "Ws", "G", "WAR"], "i": ["id", "ri", "pi", "in", "mi", "init", "ip", "ii", "ind", "z", "io", "ix", "v", "is", "ori", "y", "gi", "index", "key", "p", "n", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "iu", "eni", "b", "di", "ini", "ie", "oi", "chi", "si", "bi", "hi", "ci", "ni", "u", "uri", "fi", "ai", "I"], "judge1": ["judenge100", "JudgeOne", "judge81", "judger81", "judgmentFor", "judgedOne", "judgment1", "judgment2", "judge11", "badge1", "judze2", "judged1", "judgment100", "judger4", "JudgeFor", "judenge11", "judgmentOne", "Judgment11", "judze1", "badge4", "badgment4", "badgment1", "judgerOne", "JudgmentOne", "Judge11", "judge100", "judgeOne", "judze100", "judgeFor", "badge81", "badgeOne", "Judgment1", "judne81", "judgedFor", "judenge1", "Judge100", "judneOne", "judne4", "judgment4", "badgmentOne", "JudgmentFor", "Judge2", "judged2", "Judge1", "judge4", "badgment81", "judgment81", "judger1", "judgment11", "Judgment2", "judze11", "judenge2", "judne1", "Judgment100"], "j": ["ch", "jet", "h", "ja", "J", "part", "js", "ij", "job", "jj", "ii", "z", "v", "c", "jen", "y", "t", "jl", "jc", "key", "e", "p", "n", "obj", "qi", "f", "ji", "aj", "q", "br", "li", "o", "ie", "adj", "el", "fr", "uj", "x", "jo", "u", "g", "jp", "b"], "c1": ["c5", "arc11", "lc5", "arc1", "uc11", "C1", "uc1", "dc2", "arcup", "c8", "dc8", "lc2", "c11", " c5", "dc5", "COne", "Cup", "ucup", "lc8", "lc1", "cOne", " c8", "C11", "arcOne", "ucOne", "dc1", "cup"], "c2": ["c5", "sc5", "sc1", "dc2", "cSecond", "lcSecond", " cSecond", "scSecond", "lc2", " c5", "dc5", "lc82", "c82", " c82", "sc2", "sc82", "lc1", "dc1"], "judge2": ["genergetwo", "udge3", "judgatetwo", "udger3", "genergate2", "judgate182", "judice552", "judgate552", "judgment2", "judgee02", "judgment02", "generge182", "judgetwo", "judger2", "judice2", "judgement2", "judge02", "judgeTwo", "juge2", "udge2", "judgerSecond", "judger3", "judgementTwo", "judgementSecond", "udgeTwo", "juge182", "genergate182", "judgement02", "udgerTwo", "judgment182", "jugment2", "judgeSecond", "judgmentTwo", "jugmentTwo", "jugeTwo", "juge02", "generge552", "judge3", "judge552", "judice182", "udger2", "judgement3", "judgeeTwo", "judgmentSecond", "genergate552", "judgerTwo", "generge2", "judgee2", "judge182", "genergatetwo", "judgeetwo", "jugment182", "jugment02", "judicetwo", "judgment3", "udgerSecond", "judgee552", "judgate2", "judgee182", "judgement182", "udgeSecond"], "k": ["id", "ku", "ch", "ijk", "h", "sk", "kl", "ek", "kick", "d", "dk", "kh", "ko", "kn", "z", "v", "c", "m", "ok", "y", "ck", "uk", "kr", "ak", "e", "key", "p", "n", "f", "ki", "K", "ik", "q", "ks", "ky", "ph", "o", "km", "w", "kid", "kk", "kw", "ke", "x", "kg", "u", "g", "b"], "l": ["ql", "lc", "loc", "lp", "lu", "le", "h", "kl", "nl", "z", "v", "c", "y", "ol", "ln", "ul", "jl", "dl", "il", "lv", "p", "n", "L", "f", "rl", "li", "o", "lb", "el", "lo", "cl", "pl", "hl", "sl", "Li", "u", "lin", "bl", "ls", "ll", "ell", "fl", "b"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    long a = sc.nextLong();\\n    long b = sc.nextLong();\\n    long c = sc.nextLong();\\n    long d = sc.nextLong();\\n    \\n    long ans = a * c > a * d ? a * c : a * d;\\n    ans = b * c > ans ? b * c : ans;\\n    ans = b * d > ans ? b * d : ans;\\n    \\n    System.out.println(ans);\\n  }\\n}", "target": "244", "substitutes": {"sc": ["sw", "enc", "cont", "ch", "console", "lc", "soc", " Sc", "cer", "ct", "cons", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "tc", "nc", "sch", "cc", "sh", "cor", "cus", "ctx", "sp", "ser", "src", "sche", "ca", "na", "cur", "coll", "sb", "cs", "cl", "pc", "parse", "ner", "asc", "cv", "sci"], "a": ["ba", "ab", "oa", "fa", "aaa", "aa", "sa", "am", "an", "at", "area", "ac", "ia", "m", "y", "A", "ga", "ada", "k", "ad", "ea", "p", "n", "alpha", "f", "pa", "e", "aj", "ar", "ca", "na", "as", "w", "i", "asa", "da", "au", "x", "ae", "af", "u", "ai"], "b": ["j", "base", "ib", "ab", "ba", "h", "bc", "aa", "bb", "bf", "z", "v", "an", "ob", "m", "ub", "r", "y", "db", "t", "B", "nb", "ad", "e", "be", "p", "n", "f", "eb", "ca", "bs", "o", "sb", "i", "lb", "l", "bi", "x", "u", "g", "rb"], "c": ["cu", "cf", "lc", "h", "ct", "cd", "fc", "z", "v", "an", "m", "ac", "r", "y", "ec", "con", "nc", "t", "ce", "cc", "k", "ad", "e", "cy", "p", "n", "cn", "f", "dc", "q", "cm", "C", "ca", "o", "w", "s", "i", "cs", "l", "pc", "oc", "x", "ci", "g", "u"], "d": ["j", "nd", "h", "dad", "ct", "cd", "in", "dd", "z", "v", "m", "r", "y", "db", "ld", "dom", "t", "dt", "ds", "k", "ad", "e", "p", "n", "dn", "f", "df", "dc", "dat", "q", "sd", "D", "o", "di", "w", "s", "i", "l", "da", "x", "bd", "du", "u", "g", "dy"], "ans": [" scans", "can", "lines", "anas", "aces", "vals", "man", "aps", "outs", "ats", "cons", "fa", "lan", "ons", "ns", "sk", "AN", "aid", "aus", "atan", "ions", "nas", "amps", "anges", "an", "reads", "scan", "ras", "ars", "asts", "ana", "olds", "ags", "ases", "aned", "cc", "es", "cas", "cus", "offs", "anon", "ds", "chan", "ents", "ad", "ares", "ads", "ids", "ks", "arts", "ands", "span", "anc", "ANS", "na", "as", "ca", "s", "anned", "ays", "actions", "cases", "cs", "cats", "ants", "nan", "ann", "ls", "ins"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tFastScanner sc = new FastScanner();\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint d = sc.nextInt();\\n\t\tint e = sc.nextInt();\\n\t\tint k = sc.nextInt();\\n\t\tif (e-a > k)\\n\t\t\tSystem.out.println(\":(\");\\n\t\telse\\n\t\t\tSystem.out.println(\"Yay!\");\\n\\n\t}\\n\t//\u4ee5\u4e0b\u3001\u81ea\u4f5c\u30e9\u30a4\u30d6\u30e9\u30ea\\n\\n\t//\u6700\u5927\u516c\u7d04\u6570\\n\tpublic static long gcd(long a, long b) {\\n\t\tif (a < b)\\n\t\t\treturn gcd(b, a);\\n\t\tlong c = 0;\\n\t\tc = a % b;\\n\t\tif (c == 0)\\n\t\t\treturn b;\\n\t\treturn gcd(b, c);\\n\t}\\n\\n\t//\u6700\u5c0f\u516c\u500d\u6570\\n\tpublic static long lcm(long m, long n) {\\n\t\treturn m * n / gcd(m, n);\\n\t}\\n\\n\t//\u7d20\u6570\u5224\u5b9a\\n\tpublic static boolean isPrime(int n) {\\n\t\tif (n < 2)\\n\t\t\treturn false;\\n\t\tif (n == 2)\\n\t\t\treturn true;\\n\t\tif (n % 2 == 0)\\n\t\t\treturn false;\\n\\n\t\tfor (int i = 3; i * i <= n; i += 2) {\\n\t\t\tif (n % i == 0)\\n\t\t\t\treturn false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}\\n\\n//\u4ee5\u4e0b\u3001\u9ad8\u901f\u30b9\u30ad\u30e3\u30ca\u30fc\u30af\u30e9\u30b9\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "66", "substitutes": {"sc": ["sw", "sr", "cont", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "cli", "fc", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "this", "tc", "search", "ec", "nc", "cc", "sec", "sh", "cus", "core", "ctx", "sp", "ser", "dc", "acc", "src", "rc", "sche", "ca", "cur", "coll", "class", "sb", "cs", "cl", "exp", "pc", "parse", "ner", "ci", "asc", "cv", "sci"], "a": ["j", "ba", "h", "fa", "aa", "sa", "ka", "z", "an", "area", "m", "ac", "y", "A", "ad", "p", "n", "ea", "f", "pa", "alpha", "ca", "as", "va", "na", "o", "w", "s", "i", "da", "x", "ae", "u", "ai"], "b": ["j", "ba", "h", "ab", "ib", "aa", "z", "v", "r", "y", "B", "p", "n", "f", "o", "w", "s", "i", "l", "x", "g", "u"], "c": ["cf", "h", "ct", "z", "v", "m", "ac", "r", "y", "ec", "cc", "p", "n", "f", "dc", "q", "ca", "C", "o", "l", "ci", "g", "u"], "d": ["j", "nd", "h", "cd", "z", "v", "m", "r", "y", "ad", "p", "n", "f", "dc", "q", "D", "o", "w", "i", "l", "da", "x", "u", "g"], "e": ["j", "h", "E", "se", "ace", "pe", "z", "v", "m", "element", "r", "ee", "y", "ec", "t", "ce", "fe", "ga", "ea", "p", "n", "ne", "f", "dc", "end", "q", "eb", "ev", "o", "i", "el", "ei", "l", "ze", "x", "ae", "u", "g"], "k": ["j", "h", "sk", "ek", "dk", "ka", "z", "v", "_", "m", "ok", "y", "ck", "ak", "key", "p", "n", "f", "ks", "K", "q", "ik", "o", "km", "w", "i", "kk", "kw", "ke", "x", "u", "g"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner sc = new Scanner(System.in);\\n        \\n\\n        int n = sc.nextInt();\\n        int[] A = new int[n];\\n        for(int i =0; i < n; i++){\\n            A[i] = sc.nextInt();\\n        }\\n         \\n\\n         int[] help = new int[n];\\n         help[0] = A[0];\\n         for(int i = 1; i < n; i++){\\n            if(A[i-1] >= A[i] )\\n               help[i] = help[i-1];\\n\\n            else if(A[i] > A[i-1] && A[i] > help[i-1])\\n               help[i] = A[i];\\n             else if(A[i] > A[i-1] && A[i] < help[i-1])\\n               help[i] = help[i-1];\\n         }\\n         long minH = 0L;\\n         for(int j = 0; j < n; j++){\\n             minH += Math.abs(A[j] - help[j]);\\n         }\\n         System.out.println(minH);\\n    }\\n}", "target": "202", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "ct", "Sc", " SC", "squ", "bc", "se", "SC", "scope", "sem", " scr", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "search", "nc", "sch", "sec", "sh", "cc", "sp", "ser", "src", "rc", "system", "anc", "sche", "na", "cur", "sb", "cs", "pc", "exec", "ner", "parser", "asc", "screen", "cv", "sci"], "n": ["nn", "h", "a", "len", "sn", "ns", "in", "d", "count", "z", "v", "c", "m", "r", "en", "y", "network", "nc", "t", "ln", "nb", "k", "nt", "e", "p", "f", "net", "o", "w", "s", "fn", "N", "l", "num", "x", "nan", "u", "size", "b"], "A": ["Action", "Input", "You", "Ma", "T", "mA", "Array", "API", "Wa", "D", "II", "Work", "LA", "X", "P", "As", "An", "Args", "Each", "Sum", "The", "AD", "H", "Path", "App", "alpha", "O", "Ar", "AW", "NA", "CA", "M", "N", "Address", "V", "Average", "work", "J", "F", "E", "All", "Y", "This", "p", "home", "L", "AM", "History", "S", "Adam", "Australia", "Ca", "au", "Order", "I", "Auth", "AR", "a", "array", "AP", "AA", "Alpha", "B", "Code", "Help", "Answer", "Ha", "Access", "K", "W", "C", "ASC", "At", "Product", "HA", "U", "There", "New", "AAA", "If", "Alias", "G", "None"], "i": ["id", "slice", "api", "ri", "a", "pi", "my", "in", "mi", "init", "ip", "ii", "cli", "ori", "io", "ix", "v", "is", "abi", "c", "iv", "y", "gi", "index", "phi", "e", "anti", "qi", "f", "ik", "q", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "eni", "ie", "oi", "yi", "ei", "l", "si", "bi", "hi", "info", "x", "ci", "ni", "u", "uri", "fi", "ai", "ti", "mini", "I", "source"], "help": ["format", "app", "opt", "h", "math", "guide", "adv", "operation", "sh", "support", "add", "w", "use", "version", "output", "update", "change", "address", "option", "util", "pretty", "header", "type", "default", "style", "H", "input", "data", "index", "alpha", "f", "missing", "end", "sort", "show", "u", "all", "work", "error", "hel", "right", "comment", "offset", "an", "sav", "out", "hard", "progress", "p", "usage", "ui", "align", "sum", "view", "html", "history", "action", "ai", "id", "api", "a", "command", "alias", "menu", "hand", "Help", "how", "o", "l", "info", "handle", "custom", "size"], "minH": ["minHH", "maxH", "diffh", "thisW", "minJ", "MinW", "MinHK", "maxW", "MinH", "thisHK", "maxF", " minh", "maxHK", "cleanH", "thisH", "maxHH", "diffW", "cleanF", "thish", "minF", "minh", "cleanJ", "maxJ", "maxh", "diffHH", "minHK", "cleanh", "Minh", " minJ", " minW", "diffH", "minW", " minF", " minHH"], "j": ["ch", "h", "ja", "J", "a", "part", "js", "ij", "jj", "ii", "bj", "z", "v", "ori", "c", "ix", "r", "y", "pt", "out", "jc", "jl", "k", "key", "e", "dj", "obj", "p", "qi", "f", "ji", "aj", "q", "ui", "br", "off", "li", "next", "o", "di", "pr", "ie", "fr", "l", "uj", "bi", "x", "ni", "oj", " dj", "jp", "g", "u", "b"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main\\n{\\n    public static void main(String []args) throws IOException {\\n    \tFastScanner in  = new FastScanner(System.in);\\n    \tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false); \\n    \tsolve(in, out);\\n    \tin.close();\\n    \tout.close();\\n    }\\n    static long gcd(long a, long b){ return (b==0) ? a : gcd(b, a%b); }\\n    static int gcd(int a, int b){ return (b==0) ? a : gcd(b, a%b); }\\n    static class FastScanner{\\n\tBufferedReader reader;\\n\tStringTokenizer st;\\n\tFastScanner(InputStream stream){reader=new BufferedReader(new InputStreamReader(stream));st=null;}\t\\n\tString next(){while(st == null || !st.hasMoreTokens()){try{String line = reader.readLine();if(line == null){return null;}\t\t    \\n\t     st = new StringTokenizer(line);}catch (Exception e){throw new RuntimeException();}}return st.nextToken();}\\n\tString nextLine()  {String s=null;try{s=reader.readLine();}catch(IOException e){e.printStackTrace();}return s;}\t    \t  \t\\n\tint    nextInt()   {return Integer.parseInt(next());}\\n\tlong   nextLong()  {return Long.parseLong(next());}\t\t\\n\tdouble nextDouble(){return Double.parseDouble(next());}\\n\tchar   nextChar()  {return next().charAt(0);}\\n\tint[]  nextIntArray(int n)         {int[] arr= new int[n];   int i=0;while(i<n){arr[i++]=nextInt();}  return arr;}\\n\tlong[] nextLongArray(int n)        {long[]arr= new long[n];  int i=0;while(i<n){arr[i++]=nextLong();} return arr;}\t\\n\tint[]  nextIntArrayOneBased(int n) {int[] arr= new int[n+1]; int i=1;while(i<=n){arr[i++]=nextInt();} return arr;}\t    \t\\n\tlong[] nextLongArrayOneBased(int n){long[]arr= new long[n+1];int i=1;while(i<=n){arr[i++]=nextLong();}return arr;}\t    \t\\n\tvoid   close(){try{reader.close();}catch(IOException e){e.printStackTrace();}}\t\t\t\t\\n    }\\n    \\n    /********* SOLUTION STARTS HERE ************/\\n    \\n    private static void solve(FastScanner in, PrintWriter out){\\n        \\n        int T = 1;//in.nextInt();\\n        for(int t = 1; t <= T; t++)\\n        {\\n            int n = in.nextInt();\\n            String s = in.next().trim();\\n            String p = in.next().trim();\\n            char ch[] = new char[2*n];\\n            int pt = 0;\\n            for(int i=0;i<n;i++){\\n                ch[pt] = s.charAt(i);\\n                ch[pt+1] = p.charAt(i);\\n                pt+=2;\\n                // char ch = \\n                // out.write((char)s.charAt(i)+(char)p.charAt(i)+\"\");\\n            }\\n            out.write(new String(ch)+\"\\n\");\\n        }\\n    }\\n    \\n    /************* SOLUTION ENDS HERE **********/\\n}", "target": "200", "substitutes": {"in": ["id", "inner", "path", "sin", "login", "again", "h", "file", "gin", "bin", "cin", "init", "din", "inc", "err", "method", "arg", "c", "inside", "name", "scan", "url", "r", "this", "con", "input", "ln", "pull", "data", "isin", "win", "f", "ssl", "IN", "inn", "inf", "image", "In", "ini", "nin", "l", "log", "kin", "self", "exec", "pin", "lin", "socket", "buffer", "source", "ins", "work"], "out": ["inner", "path", "again", "png", "error", "outs", "doc", "conn", "file", "str", "bin", "timeout", "init", "err", "inc", "plain", "user", "cli", "server", "client", "io", "v", "outer", "OUT", "name", "call", "sync", "r", "this", "input", "ex", "obj", "lock", "net", "cache", "IN", "string", "window", "connection", "o", "image", "w", "parent", "code", "log", "exec", "x", "Out", "output", "null", "buffer", "temp", "writer", "write"], "a": ["ba", "ab", "h", "oa", "fa", "ma", "aaa", "aba", "aa", "sa", "d", "am", "an", "c", "area", "ac", "ia", "y", "A", "ga", "ad", "e", "pa", "p", "f", "ea", "alpha", "aj", "sha", "la", "wa", "na", "as", "ca", "va", "o", "ama", "l", "za", "da", "au", "qa", "ae", "u", "null", "name"], "b": ["id", "wb", "base", "ba", "ab", "h", "bad", "body", "ib", "fa", "bin", "aa", "d", "bb", "bh", "pb", "bf", "count", "z", "v", "gb", "c", "m", "r", "y", "A", "db", "B", "ga", "nb", "ad", "e", "be", "p", "bar", "f", "mb", "eb", "binary", "bs", "as", "o", "w", "sb", "lb", "buff", "l", "bi", "fb", "x", "bd", "g", "u", "rb", "bytes"], "reader": ["ler", "inner", "ri", "layer", "rer", "oder", "or", "rx", "ry", "server", "client", "io", "er", "Reader", "iter", "r", "read", "reading", "input", "rr", "e", "loader", "ser", "driver", "rot", "worker", "rc", "row", "feed", "riter", "trans", "w", "per", "player", "l", "keeper", "ner", "handler", "parser", "dr", "null", "buffer", "writer"], "st": ["sc", "sw", "ast", "sr", "strip", "Str", "sth", "storage", "nd", "ct", "str", "ft", "sn", "se", "sa", "d", "ut", "mt", "ss", "stress", "std", "pe", "stop", "cr", "style", "stable", "start", "r", "pt", "sta", "ld", "const", "t", "stri", "tt", "fe", "sh", "ste", "p", "sp", "src", "string", "ost", "pr", "sb", "ST", "rest", "rd", "sign", "space", "l", "sts", "store", "fr", "sty", "x", "sl", "stage", "dr", "struct", "rt", "ist", "est", "step", "inst", "St"], "stream": ["writer", "port", "inner", "Stream", "sw", "pool", "file", "document", "form", "serial", "resource", "user", "server", "client", "v", "io", "response", "m", "transform", "r", "this", "input", "data", "channel", "e", "f", "lock", "result", "driver", "string", "row", "feed", "connection", "trans", "w", "view", "null", "handler", "output", "raw", "socket", "buffer", "temp", "source"], "line": ["lines", "strip", "lc", "le", "lf", "str", "part", "page", "se", "unit", "Line", "shell", "pe", "character", "cr", "style", "c", "url", "sync", "r", "word", "iter", "data", "e", "p", "frame", "f", "cell", "end", "LINE", "string", "char", "row", "pass", "up", "code", "l", "lo", "cl", "text", "sl", "block", "letter", "lin", "link", "inline", "entry"], "s": ["lines", "gs", "storage", "h", "ings", "str", "ns", "js", "rs", "d", "services", "shell", "ss", "ps", "c", "is", "abs", "m", "spec", "r", "sync", " parts", " ss", "os", " samples", "t", "strings", " objects", "session", "states", "ds", " strings", "e", " lines", "p", "f", "ses", "ssl", "comments", "sym", "less", "string", "ws", "bs", "as", "o", "S", "space", "l", "si", "sl", "g", "ls", "sign", "ts", "ins"], "n": ["j", "none", "nn", "nor", "sn", "ns", "d", "no", "node", "init", "count", "z", "v", "c", "not", "m", "an", "norm", "r", "en", "y", "network", "t", "ng", "k", "nt", "e", "ne", "p", "number", "f", "net", "span", "nat", "na", "ot", "o", "w", "nin", "l", "N", "num", "x", "nan", "g", "u", " N", "all", "size", "name"], "arr": ["enc", "air", "j", "ch", "app", "yr", "str", "aaa", "aa", "addr", "err", "array", "ind", "ask", "iq", "arg", "adr", "abc", "ml", "r", "iter", "db", "war", "gr", "img", "rr", "data", "hr", "cat", "batch", "arch", "bar", "Array", "arm", "aj", "dat", "acc", "map", "br", "cap", "cache", "av", "att", "dict", "ev", "stack", "par", "adj", "act", "val", "el", "ait", "fr", "var", "au", "frac", "attr", "dr", "ann", "bl", "ar", "list"], "i": ["id", "j", "lc", "ri", "ami", "pi", "I", "mi", "d", "init", "ip", "ii", "ori", "v", "io", "ix", "is", "m", "z", "abi", "y", "gi", "index", "phi", "key", "e", "fi", "p", "f", "qi", "ki", "ui", "xi", "li", "iu", "multi", "o", "eni", "di", "ini", "oi", "ie", "l", "si", "bi", "hi", "info", "x", "ci", "ni", "u", "g", "uri", "ai", "mini", "ti", "vi"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint[][] c = new int[3][3];\\n\t\tString ans = \"No\";\\n\t\t\\n\t\tfor(int i=0; i<3; i++){\\n\t\t    for(int j=0; j<3; j++){\\n\t\t        c[i][j] = sc.nextInt();\\n\t\t    }\\n\t\t}\\n\t\t\\n\t\tif(c[0][2]-c[0][1] == c[1][2]-c[1][1] && c[1][2]-c[1][1] == c[2][2]-c[2][1]){\\n\t\t    if(c[0][1]-c[0][0] == c[1][1]-c[1][0] && c[1][1]-c[1][0] == c[2][1]-c[2][0]){\\n\t\t        if(c[2][0]-c[1][0] == c[2][1]-c[1][1] && c[2][1]-c[1][1] == c[2][2]-c[1][2]){\\n\t\t            if(c[1][0]-c[0][0] == c[1][1]-c[0][1] && c[1][1]-c[0][1] == c[1][2]-c[0][2]){\\n\t\t                ans = \"Yes\";\\n\t\t            }\\n\t\t        }\\n\t\t    }\\n\t\t}\\n      \tSystem.out.println(ans);\\n    }\\n}", "target": "88", "substitutes": {"sc": ["enc", " rc", "ch", " Sc", "cer", "ct", " cur", "Sc", " SC", " sw", "bc", "se", "SC", "scope", " scr", "uc", "cr", "esc", "sq", "scan", "osc", "out", "ec", " cont", "nc", "sec", "sh", "cc", "desc", "nt", "ctx", "sp", " system", "src", "rc", "system", "sb", "cs", "exp", "pc", "ner", " pars", "asc", "screen", "sign", "sci"], "c": ["cu", "ch", "cf", "h", "in", "count", "uc", "client", "m", "r", "con", "cc", "cat", "col", "w", "x", "ci", "center", "co", "config", "lc", "ct", "cd", "d", "com", "z", "e", "f", "dc", "cs", "cl", "arc", "u", "cp", "call", "ac", "y", "ce", "core", "chain", "cy", "p", "xc", "n", "rc", "toc", "cm", "ic", "pc", "mc", "can", "enc", "loc", "fc", "cr", "v", "ec", "t", "k", "cache", "q", "ca", "C", "it", "coll", "s", "code", "l", "oc", "g", "b", "cent"], "ans": [" scans", "params", "anas", "vals", "ins", "aks", "ats", " means", "a", "abilities", "leans", "sk", "ns", "ons", "AN", "rs", "caps", "aning", "fts", "aus", "nas", "lang", "ions", "sets", "amps", "anges", "an", "vers", " nas", "ams", "ars", "ras", "artifacts", "rans", "olds", "ags", "os", "aned", " chars", "ds", "plan", "ads", "flags", "ids", "ks", " answers", "versions", "asts", "ANS", "na", " Ans", "as", "anners", "unks", "s", " nos", "cs", "ants", "vs", "eps", "jas", "ann", "ls", "res"], "i": ["id", "ri", "h", "pi", "ij", "in", "mi", "init", "ii", "ip", "ind", "ori", "v", "ix", "io", "y", "gi", "index", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "eni", "b", "di", "ini", "ie", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "ni", "uri", "ai", "I", "vi"], "j": ["h", "ja", "J", "a", "ij", "js", "d", "jj", "ii", "ind", "z", "v", "ix", "m", "r", "y", "out", "jl", "jc", "index", "k", "key", "e", "dj", "p", "n", "obj", "f", "qi", "ji", "aj", "end", "q", "ui", "li", "it", "o", "ie", "l", "num", "uj", "x", "jo", "u", "g", "jp", "b"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        char alphabet[] = new char[26];\\n\\n        char c = 'a';\\n\\n        for(int i = 0; i < 26; i++){\\n            alphabet[i] = c++;\\n        }\\n\\n        long n = sc.nextLong();\\n\\n        List<Integer> list = new ArrayList<>();\\n\\n        int k = 0;\\n        while(true){\\n            k++;\\n            long p = n % 26;\\n\\n            if(p == 0) {\\n                list.add(26);\\n                if((n / 26) - 1 == 0){\\n                    break;\\n                }\\n                n = (n / 26) - 1;\\n            }else{\\n                list.add((int)p);\\n                if(n / 26 == 0){\\n                     break;\\n                }\\n                n /= 26;\\n            }\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n\\n        for(int j = 0; j < k ; j++){\\n            sb.append(alphabet[list.get(j) - 1]);\\n        }\\n\\n        System.out.println(sb.reverse());\\n\\n    }\\n}\\n", "target": "191", "substitutes": {"sc": ["sw", "isc", "enc", "ch", "lc", " Sc", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "scan", "osc", "sync", "nc", "cc", "sec", "cus", "desc", "sp", "dc", "src", "rc", "system", "anc", "C", "cs", "cl", "exp", "pc", "ci", "asc", "screen", "mc", "sci"], "alphabet": ["aliabet", "alphgebra", "alphation", "alphabetic", "alphphabet", "assphabet", "alabet", "alphaation", "phgebra", "phabetic", "assabet", "assabetic", "operation", "aliphabet", "alphaphabet", "assation", "validabetic", "alphaabet", "operabet", "operphabet", "operabetic", "validation", "aligebra", "validabet", "validphabet", "aliabetic", "alation", "alabetic", "alphaabetic", "phabet", "phphabet", "alphagebra"], "c": ["cu", "enc", "ch", "lc", "a", "d", " C", "fc", "uc", "cr", "content", "v", "z", "ac", "r", "ec", "nc", "cc", "cn", "e", "unc", "cy", "f", "dc", "ca", "C", "ic", "o", "cs", "code", "l", "pc", "arc", "ci", "g", "u", "cp", "b"], "i": ["id", "ri", "pi", "in", "mi", "ip", "ii", "ind", "z", "v", "ix", "io", "m", "is", "y", "gi", "index", "phi", "e", "fi", "f", "qi", "ji", "ui", "xi", "li", "iu", "o", "b", "di", "ini", "oi", "ie", "chi", "l", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "I"], "n": ["none", "nn", "conn", "nor", "a", "len", "sn", "ns", "in", "d", "no", "v", "z", "an", "m", "not", "r", "y", "en", "network", "t", "ln", "non", "np", "nb", "ng", "nt", "un", "ne", "number", "e", "f", "cn", "net", "pn", "na", "o", "w", "l", "N", "num", "x", "nan", "g", "u", "size", "b", "name"], "list": ["cont", "slice", "left", "lc", "pool", "lp", "st", "part", "table", "cli", "server", "pe", "live", "lists", "sync", "data", "dl", "pre", "chain", "batch", "queue", "L", "acl", "la", "li", "stack", "coll", "we", "s", "LIST", "tree", "collection", "el", "keep", "l", "log", "code", "cl", "set", "ll", "loop", "block", "bl", "all", "ls", "sequence", "ist", "fl", "b", "state"], "k": ["pp", "ch", "sk", "ek", "kick", "d", "ko", "ask", "kn", "z", "v", "m", "y", "ok", "ck", "key", "ak", "f", "ks", "K", "q", "ik", "o", "km", "w", "kid", "kw", "kk", "code", "N", "l", "mk", "ke", "x", "g", "b"], "p": ["pp", "lp", "a", "tp", "pi", "d", "ip", "ps", "ep", "pe", "v", "z", "pointer", "m", "y", "point", "fp", "t", "np", "wp", "sp", "f", "bp", "pn", "op", "ap", "o", "pr", "w", "l", "pc", "x", "P", "g", "u", "cp", "jp", "b"], "sb": ["wb", "obb", "sth", "lp", "cb", "zb", "su", "sg", "bg", "orb", "bin", "rob", "abb", "lab", "xb", "sf", "bc", "sa", "bb", "ruby", "bh", "pb", "bj", "bsp", "bf", "usb", "gb", "SB", "stab", "db", "nb", "BB", "bps", "bp", "eb", "kb", "src", "bs", "s", "bt", "bm", "lb", "buf", "fb", " SB", "sv", "bl", "ls", "rb", "b"], "j": ["ch", "jet", "h", "ja", "J", "section", "part", "js", "ij", "job", "d", "jj", "ii", "bj", "z", "v", "im", "ix", "jen", "m", "y", "out", "jl", "jc", "key", "dj", "obj", "f", "ji", "aj", "q", "br", "li", "it", "o", "pr", "adj", "ie", "l", "num", "bi", "fr", "uj", "jo", "oj", "u", "g", "jp", "b"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\n\\npublic class Main{\\n\\n    public static void solve(long s , long w){\\n        if(w >= s){\\n            System.out.println(\"unsafe\");\\n        }else{\\n            System.out.println(\"safe\");\\n        }\\n    }\\n\\n    public static void gora(){\\n        Scanner scn = new Scanner(System.in);\\n\\n        // long test = scn.nextLong();\\n\\n        long s = scn.nextLong();\\n\\n        long w = scn.nextLong();\\n\\n        // long arr[] = new long[n];\\n\\n        // for(int i = 0 ; i < arr.length ; i++){\\n        //     arr[i] = scn.nextLong();\\n        // }\\n\\n        solve(s, w);\\n    }\\n\\n    public static void main(String args[]){\\n        gora();\\n    }\\n}\\n\\n\\n", "target": "177", "substitutes": {"s": ["sw", "gs", "ips", "outs", "steps", "ings", "ns", "d", "services", "ss", "ps", "flows", "sq", "c", "aws", "abs", "r", "y", "xs", "t", "ows", "es", "rows", "qs", "ds", "e", "p", "n", "als", "f", "sym", "less", "ws", "sd", "o", "b", "sb", "i", "S", "l", "words", "ops", "u", "g", "ls", "scale", "south"], "w": ["fw", "sw", "wb", "aw", "wx", "wrap", "wcs", "wl", "wal", "d", "z", "v", "c", "t", "wp", " W", "e", "p", "win", "wave", "wei", "W", "weights", "wa", "width", "rw", "ws", "window", "ww", "we", "kw", "wt", "weight", "x", "words", "u", "Ws", "temp", "b", "work"], "scn": [" Scr", " ScN", " Scn", "csN", "scnt", "scr", " scN", "csn", "scN", " Scnt", " scnt", "csr", "csnt", " scr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint a[] = new int[n + 1];\\n\t\tint b[] = new int[n + 1];\\n\t\tint c[] = new int[n];\\n\t\tfor (int i = 1; i <= n; ++i)\\n\t\t\ta[i] = sc.nextInt();\\n\t\tfor (int i = 1; i <= n; ++i)\\n\t\t\tb[i] = sc.nextInt();\\n\t\tfor (int i = 1; i < n; ++i)\\n\t\t\tc[i] = sc.nextInt();\\n\t\tsc.close();\\n\t\tlong ans = 0;\\n\t\tint pre = -2, crt = 0;\\n\t\tfor(int i = 1; i <= n; ++i){\\n\t\t\tcrt = a[i];\\n\t\t\tans += b[crt];\\n\t\t\tif(crt == pre + 1)ans += c[pre];\\n\t\t\tpre = crt;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "223", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "soc", " Sc", "loc", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "com", "ss", "server", "fc", "uc", "cr", "esc", "sq", "scan", "osc", "spec", "sync", "out", "ec", "tc", "nc", "sch", "sub", "cc", "sec", "con", "cus", "ctx", "sp", "ser", "src", "rc", "system", "anc", "sche", "cam", "sb", "cs", "cl", "exp", "pc", "exec", "ner", "parse", "ci", "asc", "g", "screen", "cv", "sci"], "n": ["j", "none", "nn", "nor", "len", "sn", "ns", "in", "d", "no", "count", "v", "z", "m", "r", "y", "en", "network", "out", "nc", "t", "ln", "nb", "k", "nt", "e", "ne", "p", "f", "net", "nat", "inn", "o", "w", "s", "N", "l", "num", "x", "nan", "u", "g", "size"], "a": ["api", "ba", "h", "ma", "ai", "aaa", "aa", "sa", "in", "d", "am", "z", "at", "an", "area", "ac", "ia", "y", "A", "ga", "ea", "p", "alpha", "f", "e", "la", "ca", "as", "va", "o", "s", "asa", "l", "da", "au", "x", "af", "ae", "u", "ar"], "b": ["wb", "obb", "ba", "h", "cb", "ib", "ab", "body", "abb", "bc", "xb", "d", "bb", "pb", "bf", "v", "ub", "ob", "r", "y", "db", "B", "beta", "e", "be", "p", "mb", "f", "bar", "bp", "eb", "emb", "br", "bis", "bs", "binary", "o", "s", "sb", "lb", "l", "fb", "bd", "u"], "c": ["cu", "ch", "cf", "lc", "cb", "ct", "bc", "d", "uc", "z", "v", "cr", "ac", "r", "con", "y", "nc", "t", "ce", "cc", "k", "cn", "e", "cat", "p", "cy", "f", "xc", "dc", "q", "cm", "C", "ca", "o", "w", "s", "cs", "l", "pc", "x", "ci", "u", "g", "cp"], "i": ["id", "j", "api", "ri", "lc", "h", "pi", "mu", "I", "mi", "init", "ii", "ip", "cli", "z", "v", "io", "ix", "abi", "start", "ori", "y", "gi", "like", "index", "phi", "e", "p", "qi", "f", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "eni", "ie", "yi", "oi", "parent", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "uri", "fi", "ai", "mini", "ti", "name"], "ans": [" scans", "aps", "anas", "can", "aces", "rules", "ani", "outs", "ats", "cons", "errors", "len", "lan", "ons", "ns", "ens", "AN", "caps", "aus", "atan", "ps", "ions", "nas", "amps", "ta", "an", "ras", "ars", "parts", "ana", "os", "aned", "acs", "es", "groups", "ents", "ds", "plan", "ares", "ids", "ks", " spans", "arts", "anc", "ANS", "na", "as", "ians", "s", "actions", "ays", "acts", "cases", "cs", "books", "ants", "types", "results", "ann", "ls", "annot", "ins"], "pre": ["pri", "py", "PRE", "j", "base", "Pre", "po", "len", "pi", "part", "offset", "init", "pe", "type", "prefix", "pointer", "start", "inter", "current", "r", "en", "prep", "pt", "fe", "above", "index", "pro", "p", "pos", " post", "on", "sp", "pa", "span", "prev", "after", "li", "pan", "pass", " pref", "par", "s", "pr", "ref", "per", " pri", "pres", "fr", "code", "si", "before", "pc", "patch", "ci", "complete", "post", "temp", "co"], "crt": [" crs", " crn", "crtc", "srta", "prp", "curta", "CRte", "crn", "CRp", "crte", "crout", "cheout", "ocrt", "prt", "prta", "Crout", "chetc", "crs", "crts", "ocrts", " crf", "Crt", " crout", " crts", " crtc", "crp", "srp", "srte", "Crp", " crte", "prn", "srty", "prts", "chep", "CRt", "ocrp", "prf", "srt", "chet", " crp", "crty", "prs", "prte", "prty", "curty", "ocrn", "crf", "CRs", "curt", "srf", "curp", "Crtc", "crta"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    final static long mod = 1000000007;\\n\\n    static void debug(Object...args)\\n    {\\n        System.out.println(Arrays.deepToString(args));\\n    }\\n    public static void main(String[] args) {\\n    InputReader sc = new InputReader(System.in);\\n    PrintWriter pw = new PrintWriter(System.out);\\n    Random gen = new Random();\\n    int test = 1;//sc.nextInt();\\n    while(test-->0) {\\n\\n        int n = sc.nextInt();\\n        char[] ar = sc.nextLine().toCharArray();\\n        long c = 1;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(ar[i]!=ar[i-1])\\n                c++;\\n        }\\n        pw.println(c);\\n\\n    }\\n    pw.flush();\\n    pw.close();\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    static class Data implements Comparable<Data>{\\n        int x;\\n        int y;\\n\\n        public Data (int m, int n) {\\n            x = m;\\n            y = n;\\n        }\\n        @Override\\n        public int compareTo(Data o) {\\n            return y - o.y;\\n        }\\n    }\\n\\n    static class InputReader {\\n\\n        private final InputStream stream;\\n        private final byte[] buf = new byte[8192];\\n        private int curChar, snumChars;\\n\\n        public InputReader(InputStream st) {\\n            this.stream = st;\\n        }\\n\\n        public int read() {\\n            if (snumChars == -1)\\n                throw new InputMismatchException();\\n            if (curChar >= snumChars) {\\n                curChar = 0;\\n                try {\\n                    snumChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (snumChars <= 0)\\n                    return -1;\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public long nextLong() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            long res = 0;\\n            do {\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public int[] nextIntArray(int n) {\\n            int [] a = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                a[i] = nextInt();\\n            }\\n            return a;\\n        }\\n        public long[] nextLongArray(int n) {\\n            long [] a = new long[n];\\n            for (int i = 0; i < n; i++) {\\n                a[i] = nextLong();\\n            }\\n            return a;\\n        }\\n\\n        public static int[] shuffle(int[] a, Random gen)\\n        { for(int i = 0, n = a.length;i < n;i++)\\n        { int ind = gen.nextInt(n-i)+i;\\n            int d = a[i];\\n            a[i] = a[ind];\\n            a[ind] = d;\\n\\n        }\\n            return a;\\n        }\\n        public static char[] shuffle(char[] a, Random gen)\\n        { for(int i = 0, n = a.length;i < n;i++)\\n        { int ind = gen.nextInt(n-i)+i;\\n            char d = a[i];\\n            a[i] = a[ind];\\n            a[ind] = d;\\n\\n        }\\n            return a;\\n        }\\n\\n\\n        public String readString() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public String nextLine() {\\n            int c = read();\\n            while (isSpaceChar(c))\\n                c = read();\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = read();\\n            } while (!isEndOfLine(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        private boolean isEndOfLine(int c) {\\n            return c == '\\n' || c == '\\r' || c == -1;\\n        }\\n\\n    }\\n\\n}\\n", "target": "218", "substitutes": {"mod": ["id", "access", "amd", "step", "util", "d", "lib", "pack", "wait", "reg", "add", "mode", "lock", "max", "fun", "module", "debug", " mods", "MOD", "sign", "log", "num", "mods", "Mod", "load", "ms", "loop", "asm"], "sc": ["sw", "sr", " rc", "ch", "lc", "ct", "Sc", "bc", "SC", " scr", " ic", "uc", "cr", "sq", "c", "cc", "cy", "ctr", "src", "rc", "cms", "cs", "cl", "pc", "oc", "ci", "mc", "sci"], "pw": ["psw", "psh", "Ph", " pW", "PW", "psW", "ph", "Pw", " ph", "pW"], "gen": ["id", "NG", "nd", "Gener", "init", " gn", "lib", " lib", "Rand", "seed", " rand", "iter", " iter", "nc", "min", "ng", "nt", "n", "win", " random", "max", "q", "Gen", "num", " generator", " g", "g", "rand"], "test": ["error", "testing", "app", "unit", "err", "example", "master", "Test", "call", "seed", "match", "iter", "fail", "trial", " trial", " tests", " testing", "class", "code", "num", "tests", "train", "stage", "diff", "valid", "est", " Test"]}}
{"code": "\\n\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tList<Integer> L = new ArrayList<Integer>();\\n\t\tfor(int i = 0; i < N;i++) {\\n\t\t\tint num = sc.nextInt();\\n\t\t\tL.add(num);\\n\t\t\t}\\n\t\tint max = L.get(0);\\n//\t\t\u30ea\u30b9\u30c8\u5185\u306e\u6700\u5927\u5024\u3092\u3068\u308b\\n\t\tfor (int i = 1; i <L.size(); i++) {\\n\t\t    int v = L.get(i);\\n\t\t    if (v > max) {\\n\t\t        max = v;\\n\t\t    }\\n\t\t}\\n\\n//\t\tSystem.out.println(max);\\n//\t\tSystem.out.println(sum);\\n\t\tint sum = 0;\\n\t\tfor(int i = 0; i < L.size();i++) {\\n\t\t\tsum = sum + L.get(i);\\n\t\t}\\n\t\tsum = sum - max;\\n\t\tif(sum > max) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n//\t\tSystem.out.println(sum);\\n//\t\tSystem.out.println(max);\\n//\t\tSystem.out.println(L);\\n//\t\tString A = sc.next();\\n//1 8 10 5 8 12 34 100 11 3\\n//\t\tdouble answer = T/X;\\n//\\n//\t\t String str = BigDecimal.valueOf(answer).toPlainString();\\n//\\n//\\n//\t\t System.out.println(answer);\\n\t}\\n}\\n", "target": "25", "substitutes": {"sc": ["sw", "sr", "lc", "soc", " Sc", "loc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sf", "ss", "server", "uc", "cr", "esc", "c", "scan", "osc", "ec", "nc", "sch", "cc", "cus", "sp", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "scene", "cs", "l", "cl", "pc", "exec", "ner", "RC", "ci", "asc", "config", "sci"], "N": ["Ni", "Ne", "Ns", "NO", "NM", "NL", "No", " n", "NB", "Num", "T", "NE", "NI", "Y", "NT", "NS", "n", "ND", "R", "K", "C", "NC", "O", "NA", "D", "SN", "M", "Z", "S", "X", "V", "P", "Size", "GN", "I"], "L": ["CL", "Lo", "LT", "LS", "LL", "Lu", "LE", "BL", "LB", "LD", "LR", "NL", "GL", "IL", "PL", "SL", "TL", "RL", "LM", "LG", "UL", "XL", "LP", "VL", "LU", "DL", "HL", "ML", "LO", "EL", "FL", "OL", "l", "LA", "LI", "Li", "list", "I"], "i": ["id", "uni", "j", "h", "pi", "mu", "unit", "in", "d", "mi", "ip", "ii", "cli", "ix", "c", "start", "m", "iter", "gi", "index", "k", "p", "n", "pos", "f", "qi", "ui", "xi", "li", "it", "multi", "o", "b", "col", "di", "ini", "oi", "si", "hi", "bi", "x", "zi", "ci", "u", "ni", "ti", "uri", "ai", "I"], "num": ["id", "uni", "loc", "conn", "bin", "nu", "offset", "unit", "in", "inc", "prefix", "lit", "Num", "iter", "en", "ident", "nc", "data", "index", "nb", "proc", "nt", "number", "pos", "n", "net", "umi", "col", "feat", "buf", "fn", "sum", "info", "nom", "text", "ni", "gen", "um"], "max": ["id", " Max", "line", " biggest", "step", "init", "limit", "count", "Max", "last", "default", " MAX", "MAX", "min", "k", "cat", "ax", "rest", "self", "parse", "X", "random", "maximum", "size", "rand", "rank", "total"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint m = n;\\n\t\tboolean judge = false;\\n\t\tfor(int i = 0; m >= 4; i++) {\\n\t\t\tm = n - (4 * i);\\n\t\t\tif(m % 7 == 0) {\\n\t\t\t\tjudge = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(judge) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "172", "substitutes": {"sc": ["sr", "sw", "ch", "lc", "Sc", " SC", "bc", "sf", "SC", "se", "scope", "sem", "sa", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "sub", "nc", "sch", "cc", "sh", "sp", "src", "rc", "system", "ca", "cur", "sb", "cs", "cl", "pc", "exec", "sl", "cv", "mc", "sci"], "n": ["j", "nn", "ns", "in", "d", "z", "v", "c", "r", "en", "y", "network", "nc", "t", "mn", "nb", "k", "nt", "e", "ne", "p", "dn", "f", "o", "M", "w", "s", "fn", "N", "l", "num", "nm", "x", "u", "size", "b"], "m": ["tm", "j", "h", "mu", "dm", "fm", "mi", "d", "om", "md", "sm", "v", "z", "c", "im", "r", "y", "mn", "k", "dim", "e", "gm", "p", "f", "mr", "mm", "cm", "hm", "o", "M", "bm", "l", "num", "nm", "x", "u", "g", "ms", "mini", "mc", "b"], "i": ["id", "j", "pi", "mu", "in", "mi", "d", "ip", "ii", "z", "v", "im", "c", "start", "y", "min", "gi", "index", "k", "phi", "p", "f", "qi", "ji", "ui", "xi", "li", "multi", "o", "b", "di", "ini", "chi", "l", "si", "num", "bi", "hi", "x", "ci", "u", "ni", "ai", "I"], "judge": ["jugment", "mungment", "munze", "vergate", "buggate", "bugger", "bugge", " judgate", "judne", "verger", "denedge", "judgate", "denze", "judger", "produze", "merge", "juze", "juche", "bugedge", "denge", "produche", " judedge", "verge", "veredge", "judche", "munne", "merne", "judze", "juge", "juedge", "produge", "merze", "produedge", "judgment", "mergment", "june", "munge", " judger", "judedge", "denche"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int c = sc.nextInt();\\n        int d = sc.nextInt();\\n        if(a < c){\\n            a = c;\\n        }\\n        if(b > d){\\n            b = d;\\n        }\\n        if(b < a){\\n            System.out.println(0);\\n        }else{\\n            System.out.println(b - a);\\n        }\\n    }\\n}", "target": "47", "substitutes": {"sc": ["sw", "cont", "sr", "ch", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "cli", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "tc", "search", "nc", "sch", "cc", "cor", "sh", "cus", "ctx", "sp", "ser", "src", "rc", "sche", "ca", "cur", "coll", "sb", "cs", "cl", "pc", "parse", "ner", "ci", "asc", "cv", "sci"], "a": ["aw", "api", "ba", "h", "ab", "fa", "aaa", "aa", "sa", "am", "count", "z", "an", "area", "m", "ac", "r", "y", "A", "ga", "ada", "ad", "e", "p", "n", "alpha", "f", "ea", "pa", "aj", "la", "ca", "as", "va", "o", "w", "s", "i", "ak", "l", "da", "au", "x", "ae", "af", "u", "ai"], "b": ["wb", "j", "bur", "base", "ba", "h", "ab", "cb", "body", "length", "aa", "bb", "bf", "z", "v", "r", "y", "db", "B", "ga", "big", "nb", "ad", "e", "p", "n", "mb", "f", "bp", "eb", "emb", "ca", "bs", "o", "w", "sb", "i", "lb", "s", "l", "bi", "fb", "x", "bd", "auto", "g", "u", "rb"], "c": ["cu", "cf", "lc", "h", "cd", "uc", "z", "v", "m", "ac", "r", "y", "ec", "nc", "ce", "cc", "k", "ad", "e", "p", "n", "f", "dc", "C", "ca", "o", "w", "s", "i", "cs", "l", "x", "ci", "g", "u"], "d": ["j", "nd", "h", "cd", "aa", "dd", "z", "v", "m", "y", "db", "t", "dt", "ds", "ad", "e", "p", "n", "f", "df", "dc", "dat", "D", "o", "di", "w", "i", "l", "dx", "da", "x", "bd", "du", "u", "g", "dy", "de"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static Scanner sc = new Scanner(System.in);\\n    public static void main(String[] args) throws Exception {\\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        int[][] mat = new int[n][m];\\n        int[] vec = new int[m];\\n        int[] res = new int[n];\\n        \\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < m; j++) {\\n                mat[i][j] = sc.nextInt();\\n            }\\n        }\\n        \\n        for (int i = 0; i < m; i++) {\\n            vec[i] = sc.nextInt();\\n        }\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < m; j++) {\\n                res[i] += mat[i][j] * vec[j];\\n            }\\n            System.out.println(res[i]);\\n        }\\n        \\n    }\\n}", "target": "185", "substitutes": {"sc": ["sw", "cont", "ch", "lc", "soc", " Sc", "sys", "or", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "server", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "r", "out", "tc", "nc", "sch", "cc", "cus", "ctx", "sp", "f", "src", "cle", "rc", "system", "anc", "sche", "cam", "sb", "s", "cms", "cs", "cl", "pc", "exec", "ner", "parse", "asc", "screen", "sci"], "n": ["nn", "sn", "ns", "in", "d", "no", "count", "z", "v", "c", "an", "r", "y", "en", "network", "nc", "t", "mn", "nb", "k", "nt", "un", "e", "ne", "p", "dn", "f", "net", "q", "o", "w", "s", "M", "N", "l", "num", "nm", "x", "ner", "ni", "u", "b"], "m": ["middle", "man", "h", "mu", "in", "d", "mi", "am", "md", "sm", "z", "v", "an", "c", "im", "r", "y", "en", "t", "mon", "mn", "k", "e", "p", "f", "q", "mm", "hm", "cm", "o", "M", "w", "s", "l", "N", "num", "nm", "x", "u", "g", "size", "um", "mc", "b"], "mat": ["hat", "format", "mut", "loc", "mas", "math", "vert", "mar", "len", "ma", "mt", "array", "table", "graph", "at", "match", "qt", "mn", "mand", "data", "nt", "dim", "cat", "pat", "kat", "phi", "map", "flat", "grid", "mm", "mc", "nat", "att", "mult", "rix", "mit", "feat", "plot", "lat", "wt", "var", "mot", "Matrix", "mp", "mad", "struct", "rt", "rot", "Mat", "mol"], "vec": ["id", "slice", "vals", "vp", "ve", "voc", "fs", "loc", "cer", "vert", "prop", "resolution", "len", "vector", "vir", "vre", "des", "uv", "pic", "cube", "conv", "verts", "las", "v", "c", "iv", "feature", "spec", "serv", "data", "rez", "dim", "cat", "ves", "pos", "ret", "ver", "prev", "arr", "flat", "rot", "grid", "q", "vr", "seq", "col", "feat", "score", "buf", "val", "var", "depth", "cv"], "res": ["vals", "values", "details", "cons", "resolution", "des", "js", "ns", "rs", "breaks", "rect", "ps", "points", "ress", "resh", "params", "ras", "rus", "r", "rates", "ros", "bits", "ores", "os", "es", "rows", "re", "rez", "ret", "rev", "nos", "reg", "ids", "result", "grid", " Res", "times", "blocks", "range", "cs", "ris", "pres", "Res", "ours", "vs", "results", "RES", "ms", "Rs"], "i": ["id", "api", "ri", "pi", "mu", "ij", "idi", "in", "mi", "init", "ip", "ii", "cli", "z", "io", "ix", "ori", "v", "im", "c", "y", "gi", "uli", "phi", "e", "p", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "iu", "it", "o", "eni", "di", "ini", "isi", "ie", "oi", "yi", "ei", "l", "si", "bi", "hi", "info", "zi", "x", "ci", "ni", "u", "uri", "fi", "ai", "I", "vi"], "j": ["obj", "ch", "jet", "ja", "J", "a", "js", "ij", "job", "in", "d", "jj", "ii", "bj", "ind", "z", "v", "ix", "je", "jen", "y", "jl", "jc", "k", "key", "e", "dj", "ion", "kj", "qi", "f", "ji", "aj", "p", "q", "ui", "ik", "xi", "li", "iu", "it", "o", "eni", "di", "pr", "ie", "adj", "l", "si", "uj", "bi", "x", "jo", "oj", "u", "g", "jp", "b"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    static Scanner sc;\\n    static PrintWriter out;\\n\\n    public static void main(String[] args) {\\n        sc = new Scanner(System.in);\\n        out = new PrintWriter(System.out);\\n        new Main().solve();\\n        out.flush();\\n    }\\n\\n    public void solve() {\\n        long a = sc.nextInt();\\n        long b = sc.nextInt();\\n        long c = sc.nextInt();\\n        long d = sc.nextInt();\\n\\n\\n        long res = b * c;\\n        res = Math.max(res, b * d);\\n        res = Math.max(res, a * c);\\n        res = Math.max(res, a * d);\\n\\n        out.println(res);\\n    }\\n\\n\\n\\n}", "target": "244", "substitutes": {"sc": ["sr", "can", "path", "ch", "console", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "scope", "SC", "sa", "se", "sem", "com", "ss", "cli", "uc", "esc", "sq", "scan", "osc", "this", "ec", "nc", "sch", "cc", "sec", "cor", "ga", "cus", "core", "ctx", "sp", "src", "rc", "system", "anc", "cam", "sche", "cur", "sb", "gram", "cs", "si", "cl", "pc", "parse", "ner", "exec", "asc", "screen", "sci"], "out": ["path", "again", "object", "pool", "png", "error", "outs", "ch", "conn", "instance", "doc", "file", "comment", "str", "bin", "query", "page", "in", "builder", "user", "err", "no", "inc", "client", "io", "outer", "OUT", "name", "at", "sync", "r", "this", "nt", "ex", "obj", "p", "net", "cache", "result", "IN", "ui", "string", "list", "msg", "o", "image", "In", "w", "temp", "up", "pass", "prefix", "parent", "log", "view", "exp", "exec", "x", "ext", "Out", "output", "copy", "buffer", "ou", "writer", "write"], "a": ["api", "ba", "ab", "h", "fa", "aa", "sa", "am", "abc", "an", "area", "m", "ac", "ia", "r", "y", "A", "ga", "ada", "ad", "e", "p", "n", "alpha", "pa", "f", "aj", "ca", "va", "na", "w", "s", "l", "da", "x", "ae", "u", "all", "ar"], "b": ["j", "ba", "ib", "ab", "h", "aa", "z", "v", "area", "m", "r", "y", "db", "A", "B", "ga", "ad", "e", "p", "n", "pa", "f", "eb", "ca", "o", "w", "s", "i", "l", "x", "ae", "u", "g", "rb"], "c": ["cu", "cf", "lc", "h", "cd", "z", "cr", "m", "ac", "r", "y", "ec", "ce", "cc", "k", "ad", "e", "p", "n", "f", "dc", "q", "C", "ca", "w", "s", "i", "l", "x", "ae", "ci", "u", "g", "ar"], "d": ["j", "h", "cd", "dd", "z", "v", "m", "r", "y", "db", "ld", "t", "dt", "ds", "ad", "e", "p", "n", "f", "df", "dc", "dat", "D", "o", "w", "s", "i", "l", "dx", "da", "x", "bd", "du", "u", "g", "dy"], "res": ["id", "vals", "values", "details", "right", "resolution", "des", "ons", "js", "rs", "runs", "Result", "err", "ps", "rep", "ress", "ras", "response", "rus", "r", "rates", "hard", "os", "min", "es", "rows", "data", "re", "rez", "req", "rev", "ret", "nos", "p", "ver", "arr", "prev", "mr", "ries", "result", "max", "cells", "grid", "q", "rh", "bs", "as", "blocks", "pass", "full", "css", "cs", "pres", "ris", "sol", "Res", "vs", "eps", "results", "RES", "x", "resp", "real", "ms", "Rs"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int[] base = {1,11,111,1111,11111,111111,1111111,11111111,111111111};\\n        \\n        int a = Integer.parseInt(sc.next());\\n        int b = Integer.parseInt(sc.next());\\n        \\n        String x = Integer.toString(a*base[b-1]);\\n        String y = Integer.toString(b*base[a-1]);\\n        \\n        System.out.println(x.compareTo(y)>0?y:x);\\n    }\\n}", "target": "24", "substitutes": {"sc": ["sw", "cont", "ch", "cgi", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "spec", "this", "tc", "nc", "sch", "cc", "cus", "ctx", "sp", "src", "rc", "system", "anc", "sche", "ca", "cur", "coll", "sb", "scene", "cs", "cl", "pc", "ner", "ci", "asc", "mc", "sci"], "base": ["id", "loc", "file", "state", "buffer", "body", "part", "angle", "http", "array", "basic", "root", "server", "count", "type", "prefix", "split", "area", "start", "db", "core", "data", "index", "based", "Base", "key", "number", "p", "home", "frame", "bar", "cache", "string", "source", "ase", "range", "i", "code", "store", "bi", "common", "set", "parse", "bas", "total", "size", "list", "name"], "a": ["api", "ba", "ab", "aaa", "aa", "sa", "d", "am", "z", "v", "an", "c", "area", "ac", "ia", "A", "ga", "ad", "p", "n", "alpha", "pa", "f", "aj", "va", "ca", "as", "o", "s", "i", "ama", "l", "au", "ae", "auto", "u", "ai"], "b": ["j", "bur", "ba", "ab", "cb", "body", "abb", "bc", "aa", "d", "bb", "bh", "v", "c", "r", "db", "B", "nb", "ad", "be", "e", "p", "n", "mb", "f", "bp", "eb", "bot", "br", "bs", "o", "s", "sb", "i", "lb", "l", "bi", "fb", "bd", "g", "u", "rb"], "x": ["id", "xxxx", "one", "px", "wx", "h", "yx", "xx", "rx", "fx", "in", "xy", "cross", "xxx", "z", "v", "ix", "c", "tx", "xs", "value", "index", "e", "ex", "n", "alpha", "f", "p", "xi", "string", "xp", "w", "ax", "s", "i", "act", "ya", "l", "dx", "X", "u", "XX"], "y": ["py", "yx", "xx", "isy", "ady", "d", "xy", "ry", "gy", "xxx", "z", "ix", "ny", "c", "yy", "icy", "ay", "yo", "Y", "cy", "ty", "oy", "uy", "bar", "ym", "xi", "o", "vy", "iy", "ey", "fy", "yi", "i", "ish", "zy", "ya", "asy", "dy", "my", "ye", "sy"]}}
{"code": "import java.util.*;\\n \\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    String m[] = s.split(\"\");\\n    int ans = 0;\\n    for (int i = 0; i < s.length(); i++){\\n      if (m[i].equals(\"+\")){\\n        ans++;\\n      }else{\\n        ans--;\\n      }\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "54", "substitutes": {"sc": ["sw", "enc", "ch", "lc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "ec", "sub", "nc", "sec", "cor", "sh", "cus", "desc", "proc", "sp", "acc", "ocr", "src", "rc", "anc", "cs", "cl", "pc", "ner", "ci", "asc", "g", "mc", "sci"], "s": ["gs", "fs", "su", "ns", "js", "rs", "sf", "in", "ss", "ps", "v", "c", "is", "abs", "parts", "t", "es", "strings", "ds", "e", "ses", "p", "n", "f", "sym", "string", "ws", "o", "b", "sb", "S", "l", "si", "sl", "ms", "u", "g", "ls", "sv", "ins"], "m": ["tm", "h", "message", "mu", "fm", "dm", "in", "mi", "d", "am", "md", "sm", "v", "im", "c", "r", "dim", "e", "gm", "p", "n", "mr", "f", "sym", "mm", "string", "cm", "hm", "o", "M", "bm", "l", "rm", "ms", "u", "meta", "g"], "ans": [" scans", "can", "lines", "aces", "outs", "ats", "cons", "lan", "ons", "ns", "sk", "AN", "aus", "ss", "ions", "amps", "vers", "an", "asts", "scan", "ras", "ations", "ars", "ros", "ams", "os", "aned", "es", "cas", "offs", "ents", "ds", "plan", "ids", "ks", " spans", "span", "anc", "ANS", "na", "as", "ays", "acts", "cs", "ants", "eps", "anes", "nan", "ops", "ann", "ls", "annot", "ins"], "i": ["id", "slice", "inner", "j", "ri", "h", "pi", "mu", "part", "in", "init", "ii", "ip", "z", "v", "io", "abi", "ix", "t", "gi", "index", "uli", "phi", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "oi", "chi", "l", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ti", "ni", "uri", "ai", "I"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\t\\n\\n\tprivate static void solve(){\\n\t\t//Implement solution here.\\n\t\tlong N = nl();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\twhile(N > 0) {\\n//\t\t\tSystem.out.println(N);\\n\t\t\tlong rem = -1;\\n\t\t\tif(N % 26 == 0) {\\n\t\t\t\trem = 26;\\n\t\t\t\tif(N == 26) {\\n\t\t\t\t\tN = 0;\\n\t\t\t\t} else {\\n\t\t\t\t\tN /= 26L;\\n\t\t\t\t\tN--;\\n\t\t\t\t}\\n\t\t\t} else {\\n\t\t\t\trem = N % 26L;\\n\t\t\t\tN /= 26L;\\n\t\t\t}\t\\n\t\t\tsb.insert(0,(char)(rem + 96L));\\n\t\t\t\\n\t\t\t\\n\t\t}\\n\t\tSystem.out.println(sb.toString());\\n\t}\\n\\n\t//Switch input source (stdin/file)\\n\tprivate static BufferedReader br;\\n\tpublic static void main(String[] args){\\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString debugDataPath = System.getenv(\"DD_PATH\");        \\n\t\tif(debugDataPath != null){\\n\t\t\ttry{\\n\t\t\t\tbr = new BufferedReader(new InputStreamReader(new FileInputStream(new File(debugDataPath))));\\n\t\t\t}catch(Exception e){\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\tboolean hasNext = true;\\n\t\twhile(hasNext){\\n\t\t\tsolve();\t\\n\t\t\ttry{\\n\t\t\t\tbr.mark(1);\\n\t\t\t\tif(br.read() > 0){\\n\t\t\t\t\tbr.reset();\t\t\t\\n\t\t\t\t\tSystem.out.println(\"---\");\\n\t\t\t\t} else {\\n\t\t\t\t\thasNext = false;\\n\t\t\t\t}\\n\t\t\t}catch(Exception e){\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t} \\n\t\t}\\n\t}\\n\\n\t//Input read utility\\n\tprivate static StringTokenizer tokenizer = null;\\n\tpublic static String next() {\\n\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\ttokenizer = new StringTokenizer(br.readLine());\\n\t\t\t} catch (Exception e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn tokenizer.nextToken();\\n\t}\\n\t//Get next single int\\n\tprivate static int ni() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\t//Get next single long\\n\tprivate static long nl() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\t//Get next single double\\n\tprivate static double nd() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n\t//Get next int array from one line\\n\tprivate static int[] na(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = ni();\\n\t\treturn a;\\n\t}\\n\t//Get next char array from one line\\n\tprivate static char[] ns() {\\n\t\treturn next().toCharArray();\\n\t}\\n\t//Get next long array from one line\\n\tprivate static long[] nal(int n) {\\n\t\tlong[] a = new long[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = nl();\\n\t\treturn a;\\n\t}\\n}\\n", "target": "191", "substitutes": {}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        TaskB solver = new TaskB();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskB {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int n = in.nextInt();\\n            int x = in.nextInt();\\n            int[] l = new int[n];\\n            for (int i = 0; i < n; i++)\\n                l[i] = in.nextInt();\\n            int ans = 1;\\n            int lastCoordinate = 0;\\n            for (int i = 1; i <= n; i++) {\\n                int curCoordinate = lastCoordinate + l[i - 1];\\n                lastCoordinate = curCoordinate;\\n                if (curCoordinate <= x)\\n                    ans++;\\n            }\\n            out.println(ans);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "130", "substitutes": {"inputStream": [" inputForm", "InputStreamer", "pullStream", "InputForm", "inputForm", " inputstream", " inputSteam", "outputstream", "outputSteam", "pullSteam", "pullstream", "pullStreamer", "inputstream", "Inputstream", "outputForm", "inputSteam", "inputStreamer", "InputSteam", "InputStream", "outputStreamer"], "outputStream": ["outSteam", "inputView", "outputstream", "outputSteam", "OutputStream", "outstream", "inputstream", "outView", "inputSteam", " outputView", "OutputSteam", "outStream", "OutputView", " outputstream", " outputSteam", "Outputstream", "outputView"], "in": ["id", "path", "inner", "sin", "login", "again", "conn", "file", "a", "gin", "line", "bin", "cin", "user", "din", "inc", "err", "init", "io", "er", "inside", "is", "url", "name", "r", "thin", "read", "con", "this", "request", "input", "min", "data", "index", "gen", "isin", "win", "f", "IN", "rin", "inn", "inf", "ic", "binary", "connection", "pass", "In", "image", "ini", "s", "version", "log", "kin", "info", "pin", "config", "between", "vin", "lin", "get", "source", "ins"], "out": ["path", "again", "inner", "ch", "error", "outs", "writing", "file", "conn", "outside", "line", "exit", "comment", "bin", "page", "scope", "init", "err", "inc", "user", "array", "server", "process", "client", "group", "io", "v", "outer", "OUT", "call", "sync", "r", "this", "point", "to", "input", "data", "ex", "obj", "p", "problem", "net", "cache", "off", "list", "connection", "o", "w", "s", "target", "up", "parent", "work", "log", "exec", "print", "Out", "output", "copy", "gen", "buffer", "temp", "b", "writer", "write"], "solver": ["solution", "Solved", "ssolver", "ssolution", "ssolving", "unsolver", "solved", "setsolution", "setsolve", "Solve", "unsolution", "solve", "ssolved", "solving", "ssolve", "Solution", "Solver", "Solving", "unsolve", "setsolver", "unsolving", "setsolved"], "testNumber": [" trialNumber", "testNumbers", "trialInteger", " trialInteger", " testInteger", "trialString", " trialNumbers", "trialNumber", "testInteger", " trialString", " testNumbers", " testString", "trialNumbers", "testString"], "n": ["j", "nd", "nn", "len", "sn", "ns", "d", "ii", "count", "nl", "z", "v", "c", "ny", "m", "r", "en", "y", "network", "nc", "t", "ln", "nb", "k", "nt", "e", "number", "p", "ne", "f", "net", "o", "w", "s", "N", "num", "u", "size", "b"], "x": ["id", "j", "h", "a", "xx", "ns", "d", "xxx", "z", "v", "ix", "c", "m", "y", "en", "xs", "t", "index", "k", "e", "number", "p", "xc", "on", "f", "pos", "q", "xi", "o", "w", "X", "u", "size", "b"], "l": ["j", "lc", "le", "lp", "wl", "len", "kl", "d", "nl", "z", "v", "c", "ml", "m", "r", "ol", "t", "ln", "ul", "dl", "lv", "il", "e", "p", "L", "rl", "la", "li", "o", "s", "el", "lr", "sl", "u", "ls", "ll", "fl", "b"], "i": ["id", "inner", "j", "api", "ri", "pi", "I", "my", "mi", "init", "ip", "ii", "ori", "ix", "v", "c", "io", "is", "abi", "z", "y", "gi", "index", "adi", "phi", "e", "p", "fi", "qi", "ji", "ik", "ui", "xi", "li", "iu", "it", "multi", "eni", "o", "di", "ini", "oi", "ie", "si", "bi", "hi", "info", "zi", "ci", "u", "ni", "ti", "uri", "ai", "b", "vi"], "ans": ["lines", "aces", "outs", "ats", " means", "cons", "lan", "ons", "ns", "sk", "AN", "rs", "aus", "atan", "ss", "nas", "amps", "ones", "an", "reads", "ras", "asts", "ars", "os", "aned", "es", "ds", "ads", "ids", "ks", "span", "ANS", "na", "as", "les", "ians", "s", "ays", "cs", "ants", "vs", "eps", "ops", "ann", "ls", "ins"], "lastCoordinate": ["lastCellinate", "maxLocord", "lastConord", "lastConverage", "lastCircinate", "lastCignment", "lastLocord", "lastCellord", "lastCoinate", "lastCircordinate", "lastConinate", "maxLocinate", "curCordinate", "lastCellignment", "lastConordinate", "lastCOignment", "maxLocverage", "curCoignment", "curLocinate", "curCord", "lastCordinate", "lastCircord", "maxCoverage", "lastCoignment", "lastLocignment", "curLocord", "lastLocordinate", "maxLocordinate", "curCoinate", "lastCOinate", "curCoord", "curLocignment", "lastCircverage", "maxCoord", "lastCoverage", "maxCoordinate", "maxCoinate", "curCignment", "lastCellordinate", "lastCOord", "lastCoord", "lastCOordinate", "lastLocinate", "lastLocverage", "lastCord", "curLocordinate"], "curCoordinate": [" curCoord", "curCinate", "CurCangle", "curConordinate", "curCircord", "curClordinate", "curCangle", "curConposition", "CurCposition", "curCordinate", "curClord", "CurCord", " curCignment", "curCircangle", " curCoinate", "curConord", "curCoposition", "CurCoangle", "curCircordinate", "curCoignment", " curCoignment", "CurCoinate", "curCposition", " curCinate", "curCord", "curCircinate", "CurCoposition", "CurCinate", " curCord", "curCircignment", "curConangle", "curCoangle", "curClposition", "CurCoordinate", "CurCordinate", "curCoinate", "curCoord", "curClinate", "curCignment", " curCordinate", "curConinate", "CurCoord", "curConignment"], "reader": ["slice", "inner", "instance", "h", "file", "or", "service", "ro", "resource", "report", "ry", "table", "method", "server", "client", "type", "er", "io", "Reader", "iter", "r", "read", "this", "reading", "input", "data", "loader", "lock", "driver", "result", "rot", "rc", "row", "feed", "it", "source", "per", "container", "parse", "handler", "parser", "socket", "rer", "buffer", "writer", "entry"], "tokenizer": ["okenner", "tokenize", "okenizer", "tokener", "Tokenize", " tokenizing", "tokenner", "Tokenizer", "characterization", "Tokenler", " tokeniser", "okenization", " tokenization", "localizer", "serialize", "serialler", "tokenizable", " tokenner", "okenize", "okenized", "Tokener", "tokeniser", " tokenizers", " tokeniter", "Tokenized", "localize", "serializers", "characteriser", "Tokeniter", "localiser", "tokenler", " tokenizable", "Tokenizing", "tokeniter", "localization", "tokenizers", "okeniser", "okener", "tokenizing", "tokenized", " tokenized", "tokenization", "characteriter", " tokener", "Tokenner", "characterizer", "serializer", "okenizable", " tokenize", "okeniter", "okenizing", "Tokenizable", " tokenler", "Tokenization", "Tokenizers"], "stream": ["writer", "port", "path", "Stream", "object", "pool", "open", "file", "document", "body", "buffer", "model", "length", "serial", "form", "resource", "user", "server", "client", "v", "response", "r", "host", "read", "input", "data", "channel", "f", "context", "lock", "driver", "string", "row", "feed", "connection", "trans", "w", "view", "handler", "valid", "socket", "raw", "ream", "temp", "source"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tString line = sc.next();\\n\t\tchar[] s = line.toCharArray();\\n\t\tline = sc.next();\\n\t\tchar[] t = line.toCharArray();\\n\t\tString ans = \"\";\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tans += s[i];\\n\t\t\tans += t[i];\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "200", "substitutes": {"sc": ["sw", "sr", "enc", "ch", "lc", "soc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cc", "sh", "cor", "cus", "core", "sec", "ctx", "sp", "ser", "cle", "src", "rc", "anc", "sche", "ca", "cur", "sb", "cs", "cl", "pc", "parse", "ner", "ci", "mc", "sci"], "n": ["j", "nn", "h", "conn", "a", "len", "ns", "in", "d", "v", "z", "c", "m", "en", "network", "nc", "ln", "k", "e", "number", "p", "f", "net", "span", "ot", "o", "w", "fn", "l", "N", "ner", "x", "g", "u", "b"], "line": ["lines", "object", "lc", "single", "le", "file", "lf", "str", "se", "in", "no", "Line", "server", "nl", "pe", "type", "name", "sync", "word", "point", "out", "non", "ln", "ine", "data", "e", "p", "pos", "frame", "cell", "end", "LINE", "string", "row", "liner", "next", "connection", "o", "coll", "el", "code", "space", "l", "log", "lo", "cl", "parse", "text", "sl", "ner", "block", "letter", "lin", "reader", "service", "inline", "b", "source", "entry"], "s": ["lines", "h", "su", "a", "ns", "js", "in", "ss", "ps", "c", "is", "parts", "os", "es", "strings", "ds", "e", "ses", "p", "f", "ks", "string", "as", "o", "b", "us", "cs", "S", "l", "si", "vs", "u", "ls", "sv", "ins"], "t": ["st", "d", "template", "table", "type", "ta", "v", "at", "z", "c", "m", "y", "pt", "point", "T", "unt", "tt", "e", "ty", "p", "f", "tools", "string", "ot", "it", "test", "target", "l", "wt", "x", "text", "g", "u", "rt", "b", "ts"], "ans": [" scans", "can", "lines", "aces", "vals", "ats", "a", "ings", "lan", "sk", "ns", "ons", "AN", "ens", "aning", "aus", "atan", "anks", "amps", "anges", "an", "reads", "scan", "ras", "ars", "vers", "ana", "os", "aned", "acs", "cas", "anon", "chan", "ds", "ents", "san", "ads", "ids", "ks", " spans", "arts", "anc", "ANS", "na", "as", "cs", "ants", "ops", "ann", "ant", "ls", "annot", "ins"], "i": ["id", "j", "ri", "h", "pi", "mu", "part", "d", "ii", "ip", "z", "v", "abi", "io", "ix", "m", "start", "gi", "index", "adi", "uli", "key", "e", "p", "fi", "f", "qi", "ji", "ui", "xi", "li", "it", "multi", "o", "b", "di", "ini", "oi", "chi", "si", "bi", "hi", "info", "x", "zi", "ci", "u", "ni", "ti", "uri", "ai", "I", "vi"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\nclass Main{\\n\tpublic static void main(String[] args)throws NumberFormatException, IOException{\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t\\n\t\tString ringText =scan.nextLine();\\n\t\tint ringLength = ringText.length();\\n\t\tchar[] ringChar = ringText.toCharArray();\\n\t\t\\n\t\tString target =scan.nextLine();\\n\t\tint targetLength = target.length();\\n\t\t\\n\t\tString hikaku = \"\";\\n\t\t\\n\t\tboolean kai = false;\\n\t\t\\n\t\tfor(int i=0; i<ringLength; i++){\\n\t\t\t\thikaku = \"\";\\n\t\t\t\tkai = false;\\n\t\t\t\t\\n\t\t\t\tfor(int j=0; j<targetLength; j++){\\n\t\t\t\t\tint i2 = j;\\n\t\t\t\t\tif(i + i2 >= ringLength){\\n\t\t\t\t\t\ti2 -= ringLength;\\n\t\t\t\t\t}\\n\t\t\t\t\thikaku = hikaku + ringChar[i+i2];\\n\t\t\t\t}\\n\t\t\t\tif(target.equals(hikaku)){\\n\t\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\t\tkai = true;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t}\\n\t\t\\n\t\tif(kai == false){\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "198", "substitutes": {"scan": ["sc", "can", "slice", "sin", " scanner", "look", "nn", "sys", "conn", "query", "util", "se", "in", "http", "server", "connect", "an", "split", "sync", "iter", "r", "out", "search", "read", "stat", "con", "clean", "ln", "re", "chan", "cat", "san", "n", "walk", "span", "system", "row", "na", "feed", "run", "skip", "pass", "conf", "gram", "l", "Scan", "log", "kin", "ignore", "parse", "ner", "ann", "reader", "serv"], "ringText": ["workingtext", "pingLength", "bindingLength", "pingtext", "bindingText", "resourceLetter", "workingLength", "openingtext", "ingText", "workingLetter", "stringLength", "resourceText", "resourcetext", "ringLetter", "ingLength", "openingText", "workingText", "pingText", "pingLetter", "rayLetter", "stringSection", "ingLetter", "stringtext", "bindingtext", "ringtext", "raySection", "rayLength", "raytext", "openingLength", "openingSection", "resourceLength", "ingtext", "ringSection", "bindingLetter", "stringText", "rayText"], "ringLength": ["prefixLength", "ringLimit", "prefixlength", "rayLen", "targetText", "bindingLength", "ringlength", "ingLen", "bindingLen", "ingText", "lingLimit", "stringLength", "targetlength", "leadingLength", "leadingLen", "lingLen", "prefixLen", "ingLength", "stringLimit", "ringLen", "bindinglength", "ingLimit", "lingText", "stringlength", "stringLen", "rayLength", "raylength", "targetLen", "stringText", "lingLength", "rayText", "leadinglength"], "ringChar": ["ringCharacter", "rayDir", "thingChar", "bindingchar", "thingDir", "rayCharacter", "workingChar", "ringchar", "dingCharacter", "bindingText", "thingchar", "rayChar", "bindingChar", "bindingCharacter", "workingText", "thingCharacter", "workingchar", "dingchar", "ringDir", "dingText", "bindingDir", "workingCharacter", "dingChar", "raychar"], "target": ["token", "path", "Target", "base", "object", "format", "address", "blank", "concept", "database", "resource", "unit", "template", "array", "root", "goal", "arget", "character", "content", "pointer", "params", "arg", "name", "password", "prefix", "url", "alias", "dest", "tag", "compatible", "value", "data", "padding", "context", "style", "string", "reference", "project", "route", "connection", "range", "parent", "actual", "view", "component", "pattern", "text", "shadow", "output", "transform", "source", "config"], "targetLength": ["sourceType", "sourceSize", "sourceLen", "argetSize", "textLength", "textLen", "targetSize", "ringLen", " targetSize", "argetLen", "argetLength", "targetPoint", "argetType", "sourceLength", " targetType", " targetLen", "textPoint", "ringSize", "targetLen", "textSize", "targetType", "ringPoint", " targetPoint"], "hikaku": ["hkaka", "hikkatsuki", "hikeuku", "hiciku", " hokaka", "hokko", "hikiku", "pikkaru", "hankaki", "Hikagi", "hikkaku", "hikiuku", "whikaku", "hikoku", "hokou", "hikatsuki", "pikaku", " hokaku", "hicoku", " hikou", "whikuku", "hikeaka", " hokou", "hekoku", "pikiku", "hikkiku", "whikiato", "hekagi", "hikaki", "whikaki", "Hikaku", "hicaki", "Hikkaku", "Hikkuru", "hicagi", "hicaru", "whikiaku", "hkaru", "hikeko", "Hikatsuki", "whikato", "Hikkaru", "hkko", "hikiaki", "hikkaki", "hankuku", "hikiaku", "hikkagi", "pikkaki", "hkou", " hikko", "Hikkatsuki", "pikaki", "hankaku", "hikuku", "whikiaki", "hikkuku", "hikeou", "Hikkoku", "hkaku", "hikkaru", "hikkoku", "hikeuru", "hikagi", "Hikuru", "Hikkuku", "hikiato", "hekatsuki", "hkiku", "hokaku", "hikuru", "hankato", "pikaru", "Hikaru", "hicato", "hikearu", " hikaka", "hikou", "hikaka", "hkaki", "hikato", "hikaru", "Hikkagi", "pikkaku", "hikeaku", " hokko", "hicuru", "hikko", "Hikuku", "hokaka", "hicuku", "Hikoku", "hicatsuki", "pikkiku", "hekaku", "whikiuku", "hicaku", "hikkuru"], "i": ["id", "slice", "api", "ri", "h", "a", "ami", "pi", "in", "mi", "ip", "ii", "z", "io", "ix", "v", "is", "ori", "y", "gi", "index", "phi", "e", "p", "anti", "qi", "f", "ji", "ki", "ik", "ui", "xi", "li", "iu", "it", "eni", "b", "di", "ini", "o", "oi", "yi", "ie", "l", "si", "bi", "hi", "info", "zi", "ci", "u", "ni", "ti", "fi", "ai", "I", "vi"], "j": ["h", "ja", "J", "length", "js", "ij", "d", "jj", "ii", "ind", "z", "v", "ix", "c", "je", "y", "t", "jl", "index", "k", "key", "e", "p", "n", "qi", "f", "ji", "aj", "q", "li", "next", "o", "ie", "l", "si", "uj", "x", "jo", "u", "oj", "jp", "b"], "i2": ["u2", " i1", "i20", "di4", "uB", "j62", "qi4", "qi2", "ii2", "di62", "jB", " iB", "ii62", " i4", "oi20", "i1", "di2", "qi62", "ii1", "iB", "qi02", " i20", "i02", "oi1", "i4", " i62", "u1", "oi2", "di02", " i02", "j20", "i62", "j1", "j2"], "kai": ["ku", "cu", "kay", "uni", "agi", "uku", "shi", "cci", "ka", "aki", "ko", "che", "asin", "ta", "oka", "aska", "ski", "fee", "iki", "quad", "lambda", "Ka", "kie", "anti", "qi", "pai", "ji", "ki", "una", "kun", "aii", "li", "la", "umi", "inski", "kan", "ahi", "kar", " ki", "di", " li", "yi", "kee", "kid", " ko", "chi", " quasi", "oki", "kin", "asi", "qua", "lein", "qa", "ci", "aka", "ai"]}}
{"code": "import java.util.*;\\n\\npublic class Main\\n{\\n  public static void main(String[] args)\\n  {\\n    Scanner sc = new Scanner(System.in);\\n    long l, r;\\n\t\\n    l = sc.nextLong();\\n    r = sc.nextLong();\\n\\n    long min = (l*r)%2019;\\n\\n    if(min == 0)\\n    {\\n        System.out.println(0);\\n        System.exit(0);\\n    }\\n\\n    long tmp;\\n    /*\\n    if(l >= 2019){\\n        for(int i = 1; i<r-l+1; i++)\\n        {  \\n            tmp = (l+i)%2019;\\n            if(tmp==0){\\n                System.out.println(0);\\n                System.exit(0);\\n            }\\n            else if(min > tmp){\\n                min = tmp;\\n            }\\n        }\\n    }\\n    else{\\n    */\\n        for(int i = 0; i<r-l; i++){\\n            for(int j = 1; j < r-l+1; j++){\\n                tmp = ((l+i)*(l+j))%2019;\\n                if(tmp==0){\\n                    System.out.println(0);\\n                    System.exit(0);\\n\\n                }\\n                else if(min > tmp){\\n                    min = tmp;\\n                }\\n            }\\n        }\\n    //}\\n    System.out.println(min);\\n  }\\n}", "target": "193", "substitutes": {"sc": ["sw", "cont", "enc", "ch", "lc", "soc", " Sc", "cer", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "com", "ss", "server", "cr", "esc", "sq", "c", "scan", "osc", "sync", "nc", "sch", "cc", "cor", "cus", "ctx", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "cs", "cl", "pc", "exec", "ner", "ci", "mc", "sci"], "l": ["lc", "le", "lp", "lu", "h", "length", "len", "kl", "d", "ls", "nl", "z", "v", "c", "m", "ol", "t", "ln", "ul", "dl", "k", "e", "p", "n", "L", "f", "ji", "rl", "la", "li", "o", "w", "s", "el", "lr", "pl", "x", "sl", "u", "lin", "g", "ell", "ll", "bl", "b"], "r": ["sr", "ri", "h", "right", "ro", "rx", "rs", "d", "ir", "z", "v", "cr", "c", "er", "m", "rr", "re", "nr", "e", "ur", "p", "R", "n", "f", "rev", "end", "br", "rc", "rh", "pr", "w", "rd", "range", "lr", "fr", "x", "dr", "u", "rt", "ru", "ar", "rb", "rf", "b", "rg"], "min": ["pri", "small", "little", "po", "len", "part", "Mini", "Min", "unit", "in", "mod", "init", "err", "am", "limit", "emin", "ress", "default", "start", "is", "m", "current", "miss", "lt", " Min", "sun", "fe", "mean", "pre", "minimum", "key", "e", "pos", "n", "p", "f", "lock", "aj", "max", "pm", "partial", "li", "next", "low", "skip", "sort", "ini", "MIN", "div", "val", "code", "sol", "version", "mins", "diff", "ni", "mini", "size", "lim", "rand"], "tmp": ["orig", "abb", "term", "jj", "m", "txt", "meg", "duration", "elt", "fb", "nom", "diff", "temp", "pp", "cb", "md", "now", "current", "lt", "pre", "nb", "qq", "proc", "e", "sp", "bp", "stuff", "next", "clip", "sb", "kk", "vm", "mp", " temp", "cp", "py", "obb", "amp", "pot", "po", "offset", "bb", "bf", "xxxxxxxx", "fake", "treatment", "emp", "fp", "tt", "np", "mm", "test", "sup", "jp", "cmp", "part", "xt", "foo", "_", "v", "rb", "yy", "dest", "t", "ppo", "obj", "pad", "ie", "rm", "mo", "done", "zip", "vt"], "i": ["id", "ri", "pi", "I", "in", "d", "mi", "init", "ii", "ip", "ir", "z", "v", "ix", "c", "is", "ori", "m", "y", "t", "gi", "phi", "e", "p", "n", "f", "qi", "ji", "ik", "ui", "xi", "li", "iu", "it", "di", "ini", "si", "hi", "zi", "x", "ci", "u", "ni", "jp", "ai", "b"], "j": ["h", "ja", "J", "ij", "js", "job", "d", "jj", "ii", "bj", "z", "v", "c", "m", "y", "jl", "k", "e", "p", "n", "f", "qi", "ji", "aj", "q", "xi", "li", "it", "o", "di", "pr", "si", "uj", "bi", "x", "jo", "u", " dj", "g", "jp", "b"]}}
{"code": "import java.lang.reflect.Array;\\nimport java.util.*;\\nimport java.io.*;\\nimport java.lang.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        String s = sc.next();\\n\\n        if (s.charAt(2) == s.charAt(3) && s.charAt(4) == s.charAt(5))\\n            System.out.println(\"Yes\");\\n        else\\n            System.out.println(\"No\");\\n    }\\n}\\n", "target": "30", "substitutes": {"sc": ["sr", "sw", "enc", "ch", "lc", "cer", "Sc", "bc", "se", "SC", "ss", "uc", "cr", "esc", "c", "scan", "osc", "sync", "ec", "ck", "nc", "cc", "cor", "sec", "cus", "sh", "sp", "cle", "src", "rc", "anc", "cs", "si", "cl", "pc", "exec", "ner", "ci", "asc", "mc", "sv", "sci"], "s": ["lines", "gs", "features", "h", "fs", "su", "str", "ns", "rs", "in", "services", "ss", "ps", "c", "is", "abs", "plus", "sync", "xs", "strings", "es", "rows", "qs", "ds", "k", "e", "ses", "n", "p", "f", "ans", "ks", "string", "ws", "bs", "b", "hs", "sb", "i", "its", "us", "cs", "S", "l", "si", "vs", "words", "sl", "tests", "ops", "u", "g", "ls", "sv", "ts", "ins"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.net.ConnectException;\\nimport java.rmi.dgc.Lease;\\nimport java.util.ArrayDeque;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.Deque;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.NoSuchElementException;\\nimport java.util.Objects;\\nimport java.util.Set;\\nimport java.util.Stack;\\nimport java.util.TreeMap;\\nimport java.util.TreeSet;\\n\\nimport static java.util.Comparator.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tMain main = new Main();\\n\t\tmain.solve();\\n\t\tmain.out.close();\\n\t}\\n\\n\t// ======================================================================\\n\tboolean check(char[] C, int start, int len) {\\n\t\tboolean ans = true;\\n\t\tfor (int i = start; i < start + len / 2; i++) {\\n\t\t\tif(C[i] != C[start + len - i - 1]) {\\n\t\t\t\tans = false;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\treturn ans;\\n\t}\\n\tpublic void solve() {\\n\t\tchar[] C = ns().toCharArray();\\n\t\tboolean ans = true;\\n\t\tif(!check(C, 0, C.length)) {\\n\t\t\tans = false;\\n\t\t} else {\\n\t\t\tif(!check(C, 0, C.length/2)) {\\n\t\t\t\tans = false;\\n\t\t\t} else if(!check(C, C.length - C.length/2, C.length/2)) {\\n\t\t\t\tans = false;\\n\t\t\t}\\n\t\t}\\n\t\tif(ans)\t\tout.println(\"Yes\");\\n\t\telse\t\tout.println(\"No\");\\n\t}\\n\\n\t// ------------------------------------------\\n\t// \u30e9\u30a4\u30d6\u30e9\u30ea\\n\t// ------------------------------------------\\n\t// Print\\n\tprivate PrintWriter out = new PrintWriter(System.out);\\n\\n\t// Scanner\\n\tprivate FastScanner scan = new FastScanner();\\n\\n\tint ni() {\\n\t\treturn scan.nextInt();\\n\t}\\n\\n\tint[] ni(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[i] = ni();\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tint[][] ni(int y, int x) {\\n\t\tint[][] a = new int[y][x];\\n\t\tfor (int i = 0; i < y; i++) {\\n\t\t\tfor (int j = 0; j < x; j++) {\\n\t\t\t\ta[i][j] = ni();\\n\t\t\t}\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tlong nl() {\\n\t\treturn scan.nextLong();\\n\t}\\n\\n\tlong[] nl(int n) {\\n\t\tlong[] a = new long[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[i] = nl();\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tlong[][] nl(int y, int x) {\\n\t\tlong[][] a = new long[y][x];\\n\t\tfor (int i = 0; i < y; i++) {\\n\t\t\tfor (int j = 0; j < x; j++) {\\n\t\t\t\ta[i][j] = nl();\\n\t\t\t}\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tString ns() {\\n\t\treturn scan.next();\\n\t}\\n\\n\tString[] ns(int n) {\\n\t\tString[] a = new String[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[i] = ns();\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tString[][] ns(int y, int x) {\\n\t\tString[][] a = new String[y][x];\\n\t\tfor (int i = 0; i < y; i++) {\\n\t\t\tfor (int j = 0; j < x; j++) {\\n\t\t\t\ta[i][j] = ns();\\n\t\t\t}\\n\t\t}\\n\t\treturn a;\\n\t}\\n}\\n\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "123", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(final String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tsc.close();\\n\t\tprtln(A * B);\\n\t}\\n\\n\tpublic static <T> void prtln(T t) { System.out.println(t); }\\n}", "target": "35", "substitutes": {"sc": ["sw", "cont", "ch", "console", "lc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "lib", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "cc", "sh", "sec", "cus", "core", "sp", "acc", "rc", "anc", "sche", "ca", "cur", "coll", "sb", "cs", "cl", "pc", "ci", "asc", "cv", "sci"], "A": ["As", "AR", "a", "F", "AB", "AP", "Ab", "AD", "AA", "H", "T", "Y", "SA", "R", "L", "AM", "API", "BA", "C", "CA", "O", "D", "M", "HA", "U", "S", "N", "X", "V", "AF", "P", "AL", "I", "G", "AC"], "B": ["BI", "F", "BL", "LB", "I", "DB", "AB", "NB", "H", "SB", "UB", "T", "Bs", "Y", "BU", "BB", "R", "L", "QB", "WB", "BA", "IB", "C", "O", "D", "M", "BS", "S", "N", "OB", "V", "P", "b", "G"], "t": ["that", "kt", "a", "d", "template", "tf", "xt", "the", "ta", "type", "v", "m", "r", "y", "pt", "lt", "tc", "T", "tr", "tt", "TB", "dt", "nt", " T", "e", "p", "n", "f", "tmp", "it", "o", "s", "bt", "l", "x", "text", "rt", "b", "ts"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint S = sc.nextInt();\\n\t\tint W = sc.nextInt();\\n\\n\\n\\n\t\tif(S == W || S < W) {\\n\t\t\tSystem.out.println(\"unsafe\");\\n\t\t}\\n\\n\t\telse {\\n\t\t\tSystem.out.println(\"safe\");\\n\t\t}\\n\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "177", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner in = new Scanner(System.in);\\n        String[] params = in.nextLine().split(\" \");\\n        int a = Integer.parseInt(params[0]);\\n        int b = Integer.parseInt(params[1]);\\n\\n        System.out.println( a <= 5 ? 0 : a <= 12 ? b / 2 : b );\\n\\n    }\\n\\n}\\n", "target": "249", "substitutes": {"in": ["inner", "login", "again", "h", "file", "conn", "line", "str", "bin", "query", "resource", "init", "inc", "din", "err", "user", "cli", "arg", "c", "is", "m", "inside", "r", "thin", "out", "con", "input", "ln", "min", "n", "f", "arin", "IN", "rin", "string", "inn", "as", "connection", "pass", "In", "ini", "s", "conf", "i", "readable", "nin", "l", "log", "parser", "g", "lin", "null", "reader", "source", "ins"], "params": ["py", "Parameters", "Param", "phase", "Par", "param", "part", "page", "unit", "options", "array", "ip", "ps", "type", "arg", "prefix", "adr", "ams", "ars", "parts", "settings", "json", "data", "padding", "names", "number", "pos", "p", "sp", "psy", "mm", "string", "par", "i", "config", "info", "parse", "pin", "vs", "phrase", "mp", "attr", "parser", "phys", "pins", "list", "python", "name"], "a": ["ba", "ab", "fa", "ma", "aaa", "aa", "sa", "d", "aux", "count", "an", "c", "area", "m", "ac", "ia", "A", "tta", "ga", "data", "ada", "ad", "e", "p", "n", "alpha", "f", "pa", "ava", "ea", "sha", "aj", "la", "va", "as", "ca", "s", "i", "da", "au", "ae", "af", "ai", "sta"], "b": ["base", "ba", "ab", "cb", "fa", "abb", "aa", "d", "bb", "pb", "bf", "z", "v", "c", "area", "y", "db", "B", "ga", "nb", "k", "ad", "e", "beta", "p", "n", "batch", "f", "pa", "bp", "bot", "bs", "o", "sb", "i", "l", "bi", "x", "g", "rb"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.math.BigDecimal;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        BigDecimal A = sc.nextBigDecimal();\\n        BigDecimal B = sc.nextBigDecimal();\\n        sc.close();\\n        System.out.println(A.multiply(B).toBigInteger());\\n    }\\n}\\n", "target": "15", "substitutes": {"sc": ["cont", "sr", "ch", "console", "lc", "soc", "cer", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "spec", "sub", "search", "nc", "ec", "sch", "cc", "sec", "sh", "cus", "ctx", "sp", "src", "acc", "rc", "system", "anc", "sche", "ca", "contract", "coll", "s", "cs", "cl", "pc", "parse", "ner", "ci", "asc", "cv", "reader", "mc", "sci"], "A": ["As", "AR", "a", "GA", "AB", "AP", "Ab", "AA", "IA", "Input", "Alpha", "Y", "mA", "SA", "This", "alpha", "L", "API", "BA", "C", "Ar", "AW", "NA", "CA", "b", "M", "HA", "U", "S", "Java", "Ca", "LA", "X", "AF", "P", "I", "G", "AC"], "B": ["BI", "AR", "J", "F", "BL", "E", "LB", "EB", "DB", "CB", "Ub", "AB", "Ab", "Bi", "BG", "AA", "NB", "SB", "UB", "Bs", "Y", "BER", "BB", "Abs", "R", "L", "QB", "WB", "BA", "IB", "BC", "C", "b", "M", "BS", "N", "OB", "VB", "I", "G"]}}
{"code": "import java.util.*;\\nclass Main\\n{\\n    public static void main (String[] args)\\n    {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int x;\\n        if(b >= 100) x = 1000 * a + b;\\n        else if(b >= 10) x = 100 * a + b; \\n        else x = 10 * a + b;\\n        String ans = \"No\";\\n        for(int i = 1; i < 1000; i++)\\n            if(i * i == x)  ans = \"Yes\";\\n        System.out.println(ans);\\n    }\\n}", "target": "83", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "ec", "nc", "sch", "cc", "sh", "cus", "ctx", "sp", "ser", "acc", "src", "rc", "sche", "ca", "na", "cur", "sb", "cs", "cl", "pc", "exec", "ner", "ci", "asc", "cv", "sci"], "a": ["base", "api", "ba", "ab", "fa", "aa", "sa", "d", "am", "z", "an", "c", "area", "m", "ac", "y", "A", "ad", "e", "p", "n", "alpha", "f", "ca", "as", "na", "w", "s", "da", "au", "ae", "u", "ai"], "b": ["wb", "j", "ba", "h", "ab", "d", "bb", "limit", "bf", "z", "v", "c", "m", "r", "y", "t", "B", "nb", "k", "e", "be", "p", "n", "number", "f", "bs", "o", "w", "sb", "s", "l", "bi", "fb", "u", "g", "rb"], "x": ["id", "change", "one", "base", "wx", "h", "xx", "rx", "d", "cross", "xt", "xxx", "z", "v", "ix", "c", "is", "m", "an", "plus", "y", "xs", "t", "index", "e", "p", "ex", "n", "f", "xc", "bug", "max", "q", "xi", "wa", "width", "xp", "o", "w", "ax", "any", "l", "dx", "X", "u", "xa", "work"], "ans": ["aps", "anas", "aces", "anus", "outs", "ats", "cons", "lan", "ons", "ns", "ens", "AN", "aus", "nas", "amps", "yes", "an", "anges", "is", "ras", "ars", "aos", "ones", "ana", "olds", "os", "aned", "acs", "cas", "es", "ils", "ents", "ads", "flags", "ks", "arts", "anc", "ANS", "na", "as", "s", "any", "ays", "acts", "cs", "works", "ants", "vs", "eps", "ann", "ls", "ins"], "i": ["j", "pi", "mu", "I", "in", "d", "ii", "z", "v", "io", "c", "is", "m", "ix", "abi", "r", "y", "t", "gi", "index", "uli", "phi", "k", "e", "p", "n", "f", "qi", "ui", "xi", "li", "iu", "multi", "o", "di", "ini", "ie", "l", "si", "bi", "hi", "info", "zi", "ci", "u", "ti", "fi", "ai"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\t\\n\t\tString a = stdIn.next();\\n\t\tString b = stdIn.next();\\n\t\tString c = new String(a+b);\\n\t\tint ab = Integer.parseInt(c);\\n\t\t\\n\t\tif(Math.sqrt(ab) == (int)Math.sqrt(ab)) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\t\\n\t}\\n\\n}\\n", "target": "83", "substitutes": {"stdIn": ["stdOut", "STDIns", "astin", " stdin", "wdin", "strOut", "stdIns", "astIN", "strIns", "STDIn", "STDin", "adOut", "STDIN", " stdOut", "strIn", "wdIn", "wdIN", "adin", "stdin", " stdIns", "adIn", "stdIN", " stdIN", "wdOut", "adIN", "strIN", "STDOut", "astIn"], "a": ["app", "ba", "oa", "ai", "aaa", "aa", "sa", "in", "am", "aux", "an", "area", "ac", "ia", "A", "ada", "ak", "ad", "pa", "p", "alpha", "la", "va", "ca", "as", "asa", "da", "au", "ae", "ar"], "b": ["ib", "ba", "cb", "abb", "bc", "aa", "xb", "d", "bb", "pb", "bf", "v", "abc", "ob", "r", "y", "db", "B", "BB", "e", "p", "n", "f", "eb", "bs", "sb", "s", "i", "lb", "l", "fb", "x", "bd", "rb"], "c": ["enc", "ch", "cf", "lc", "cb", "bc", "d", "uc", "cr", "esc", "abc", "cca", "ac", "r", "nc", "ce", "cc", "cus", "k", "cn", "cy", "e", "p", "n", "unc", "f", "cm", "ca", "C", "cur", "s", "cs", "l", "ae", "ci", "u"], "ab": ["ast", "tab", "app", "ib", "ba", "cb", "az", "length", "abb", "lab", "bc", "aa", "am", "bb", "array", "amb", "pb", "AB", "Ab", "abc", "abi", "area", "ob", "ac", "abs", "r", "ad", "p", "n", "pa", "f", "abe", "acc", "fab", "acl", "anc", "abl", "ca", "av", "ap", "sb", "i", "fb", "ae", "af"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\nclass Main{\\n\tstatic int mod1 = (int)1e9+7;\\n\tpublic static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));\\n\tpublic static void main(String sp[])throws IOException{\\n\t\tFastReader sc = new FastReader();\t\\n\t\tlong n = sc.nextLong();\\n\t\tlong count=1;\\n\t\tlong g=0;\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\tlong val = sc.nextLong();\\n\t\t\tif(val==count){\\n\t\t\t\tcount++;\\n\t\t\t\tg++;\\n\t\t\t}\\n\t\t}\\n\t\tif(g==0)\\n\t\tSystem.out.println(\"-1\");\\n\t\telse System.out.println(n-g);\\n    }\\n\t\\n\t\\n\tpublic static long gcd(long a, long b){\\n\t\tif(a==0)\\n\t\t\treturn b;\\n\t\t\\n\t\treturn gcd(b%a,a);\\n\t}\\n\tpublic static class FastReader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer st;\\n\t\tpublic FastReader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tString next() {\\n\t\t\twhile (st == null || !st.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (Exception r) {\\n\t\t\t\t\tr.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());//converts string to integer\\n\t\t}\\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (Exception r) {\\n\t\t\t\tr.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t}\\n}", "target": "234", "substitutes": {"mod1": [" modf", "max1", "modf", "Modf", "Mod8", " mod2", " mod8", "mod2", "max2", "maxf", "max8", "mod8", "Mod1", "Mod2"], "out": ["path", "again", "base", "console", "error", "outs", "co", "sys", "file", "line", "in", "Output", "err", "report", "println", "cli", "Writer", "server", "std", "io", "prefix", "outer", "OUT", "m", "name", "r", "word", "point", "input", "data", "p", "ex", "obj", "f", "lock", "cache", "IN", "dump", "string", "list", "window", "connection", "o", "source", "w", "s", "up", "code", "log", "exec", "x", "print", "auto", "Out", "screen", "output", "copy", "post", "buffer", "temp", "writer", "write"], "sp": ["spl", "Str", " app", "ings", "str", " ps", "ss", " np", " vec", " SP", " spe", "np", " chars", " spl", " rep", "p", "arr", "string", "SP", " pp", "space", " Sp", "isp", "Sp", " p", " arr", "name"], "sc": ["sw", "cont", "ch", "lc", " Sc", "cer", "scl", "Sc", "bc", "cd", "SC", "se", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "c", "osc", "sync", "tc", "ec", "nc", "cc", "sh", "sec", "cus", "core", "desc", "ctx", "dc", "src", "cle", "rc", "ca", "cur", "cs", "go", "cl", "pc", "exec", "ci", "asc", "cv", "mc", "sci"], "n": ["j", "h", "conn", "sn", "ns", "d", "no", "v", "z", "c", "m", "r", "y", "en", "nc", "t", "ln", "mn", "nb", "ng", "k", "nt", "cn", "e", "number", "p", "f", "o", "w", "l", "N", "num", "x", "u", "size"], "count": ["id", "j", "ch", "h", "length", "len", "d", "global", "group", "gy", "z", "v", "c", "start", "m", "r", "Count", "gi", "ga", "ng", "G", "nt", "e", "number", "p", "reg", "f", "gl", "age", "q", "max", "gu", "gc", "ge", "large", "seq", "low", "coll", "col", "w", "code", "l", "num", "sum", "go", "agg", "valid", "u", "size", "gen", "total"], "g": ["j", "gs", "h", "sg", "gz", "d", "ig", "gy", "group", "gb", "v", "c", "m", "r", "eg", "gr", "t", "gi", "gh", "ga", "gam", "gp", "ng", "mg", "gain", "e", "gm", "p", "reg", "f", "gl", "q", "gg", "gu", "gc", "ge", "pg", "w", "s", "gram", "gap", "l", "num", "go", "agg", "u", "gen", "msg", "G", "gn"], "i": ["id", "j", "ri", "pi", "in", "d", "init", "ip", "ii", "ori", "v", "ix", "c", "m", "r", "gi", "index", "uli", "e", "p", "f", "qi", "ui", "xi", "li", "iu", "multi", "o", "di", "ini", "oi", "ie", "l", "si", "bi", "x", "zi", "ci", "u", "ti", "fi", "ai", "I", "vi"], "val": ["id", "j", "vals", "doc", "len", "dev", "al", "unit", "err", "sel", "eval", "v", "value", "vl", "pid", "data", "il", "key", "p", "pos", "f", "max", "li", "seq", "coll", "col", "ref", "el", "num", "l", "sum", "x", "sl", "valid", "rel", "bl", "Val", "VAL"], "a": ["ba", "ab", "fa", "aaa", "aa", "sa", "d", "am", "array", "z", "an", "c", "area", "ac", "ia", "r", "y", "A", "ga", "index", "ad", "e", "p", "alpha", "f", "ea", "pa", "aj", "la", "va", "as", "ca", "o", "w", "s", "l", "da", "au", "x", "ae", "u", "ai"], "b": ["wb", "base", "ba", "ab", "length", "abb", "aa", "sa", "d", "bb", "bf", "z", "v", "gb", "c", "ob", "m", "abs", "r", "y", "A", "B", "value", "ga", "nb", "e", "p", "bar", "f", "number", "bp", "bs", "binary", "w", "s", "sb", "lb", "l", "bi", "fb", "x", "bd", "ae", "u", "rb", "buffer"], "br": ["sr", "yr", "ab", "str", "bro", "Br", "bc", "ut", "bb", "err", "bh", "bf", "ber", "BR", "cr", "r", "gr", "tr", "hr", "ur", "p", "obj", "arr", "ver", "bar", "src", "ar", "cro", "bridge", "cur", "pr", "buf", "bt", "rest", "lr", "fr", "dr", "rt", "bl", "rb"], "st": ["sw", "ast", "sr", "nd", "sth", "inst", "ct", "str", "ft", "se", "sa", "ust", "ut", " est", "ss", "std", "pe", "stop", "cr", "stable", "r", "pt", "sta", "const", "t", "tr", "stri", "fe", "ste", "nt", "be", "ur", "p", "obj", "src", "string", "ost", "pr", "s", "sb", "ST", "rest", "rd", "bt", "fr", "l", "sts", "cl", "x", "sl", "struct", "rt", "ist", "est", "bl", "St"]}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\t   static long gcd(long a, long b) \\n\t    { \\n\t    if (a == 0) \\n\t        return b;  \\n\t    return gcd(b % a, a);  \\n\t    } \\n\t      \\n\t    // method to return LCM of two numbers \\n\t    static long lcm(long a, long b) \\n\t    { \\n\t        return (a*b)/gcd(a, b); \\n\t    } \\n\tstatic long find(long x,long c,long d)\\n\t{\\n\t\tlong ans=0;\\n\t\tans=x/d;\\n\t\tans+=x/c;\\n\t\tans-=x/lcm(c,d);\\n\t\treturn ans;\\n\t}\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner scan=new Scanner(System.in);\\n\t\tlong a=scan.nextLong();\\n\t\tlong b=scan.nextLong();\\n\t\tlong c=scan.nextLong();\\n\t\tlong d=scan.nextLong();\\n\t\t\\n\t\tlong ans=(b-find(b,c,d))-((a-1)-find(a-1,c,d));\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "9", "substitutes": {"a": ["access", "ba", "ab", "length", "len", "fa", "part", "offset", "aa", "sa", "d", "array", "count", "z", "an", "c", "area", "ac", "A", "ga", "data", "index", "ad", "e", "p", "n", "alpha", "pa", "ea", "f", "aj", "sha", "ava", "off", "la", "wa", "va", "as", "na", "w", "i", "code", "l", "da", "x", "au", "ae", "ai"], "b": ["base", "ba", "ab", "ib", "length", "bin", "part", "abb", "aa", "d", "bb", "bf", "abc", "v", "c", "m", "r", "y", "A", "db", "B", "big", "nb", "ad", "e", "p", "obj", "n", "f", "bar", "bis", "next", "bs", "binary", "s", "sb", "i", "lb", "val", "code", "l", "fb", "bd", "rb"]}}
{"code": "\\nimport java.util.*;\\nimport java.lang.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int tapNumber = 0;\\n        int mouseNumber = 1;\\n        int min = 0;\\n\\n        while(true){\\n            mouseNumber = tapNumber * (A - 1) + 1;\\n            if(mouseNumber >= B){\\n                min = tapNumber;\\n                break;\\n            }\\n            tapNumber ++;\\n        }\\n\\n\\n        System.out.println(min);\\n\\n    }\\n}\\n\\n\\n\\n", "target": "101", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", " scr", "com", "ss", "fc", "uc", "cr", "esc", "sq", "c", "scan", "osc", "tc", "ec", "nc", "cc", "cus", "ctx", "sp", "rc", "sche", "ca", "cur", "class", "sb", "cs", "cl", "pc", "exec", "ner", "asc", "cv", "mc", "sci"], "A": ["An", "a", "F", "EA", "MA", "AB", "AP", "Area", "AA", "H", "Ma", "T", "Alpha", "Y", "SA", "PA", "L", "Array", "API", "K", "C", "O", "CA", "NA", "D", "Ang", "Az", "M", "U", "S", "N", "Ca", "LA", "X", "AF", "P", "I", "G"], "B": ["Q", "F", "E", "I", "AB", "NB", "BF", "H", "UB", "MAX", "Number", "T", "Y", "BB", "R", "L", "FF", "BA", "W", "Limit", "C", "O", "D", "M", "MIN", "U", "S", "N", "X", "V", "P", "b", "G"], "tapNumber": [" tapAmount", "tapString", " tapString", "tickNumber", "clicknumber", "mouseCount", "tapnumber", " tapSize", " tapCount", "TapCount", "tapAmount", "testNumber", "tapNum", "mousenumber", "clickNumber", "mouseState", "testnumber", "mouseSize", "mouseAmount", "tapCount", "tickNum", "clickNum", "mouseString", " tapLength", "mouseNo", "mouseNum", "testNo", "tickSize", "tapNo", "clickString", "testAmount", "tapState", " tapnumber", "TapNumber", "mouseLength", "tapSize", "tapLength", " tapNo", " tapState", " tapNum", "TapLength", "TapState"], "mouseNumber": ["clickMajor", "tapnumber", "mouseCount", "scrollCounter", "midNum", "tapCounter", " mouseCounter", "tapNum", "mousenumber", "clickNumber", " mouseMajor", "midnumber", " mouseCount", "tapCount", "MouseNum", " mouseNum", "clickNum", "clickCount", "mouseNum", "scrollnumber", "mouseCounter", "tapMajor", "midNumber", "MouseNumber", "scrollNumber", "Mousenumber", " mousenumber", "mouseMajor"], "min": ["pri", "small", "mid", "none", "little", "len", "part", "Mini", "Min", "unit", "init", "no", "rain", "limit", "count", "default", "area", "start", " Min", "lower", "size", "sec", "index", "minimum", "dim", "un", "number", "pos", "n", "span", "partial", "max", "li", "cm", "skip", "mit", "sort", "amin", "MIN", "div", "version", "val", "sol", "mins", "don", "diff", "mini", "ai", "minute"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n      \tboolean d;\\n      \\n      \tif((a+b+c) < 22) d = true;\\n\t\telse d = false;\\n\\n\t\tif(d) System.out.println(\"win\");\\n      \telse System.out.println(\"bust\");\\n\t}\\n}", "target": "129", "substitutes": {"sc": ["sw", "sr", "cont", "ch", "enc", "lc", "soc", " Sc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "com", "ss", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "tc", "ec", "search", "nc", "sch", "cc", "sh", "cus", "desc", "sp", "ser", "acc", "ocr", "src", "rc", "sche", "ca", "cur", "sb", "cs", "cl", "pc", "ner", "ci", "asc", "cv", "sci"], "a": ["ab", "aa", "sa", "count", "z", "an", "area", "m", "ac", "A", "k", "ad", "ea", "p", "n", "alpha", "f", "e", "la", "va", "ca", "as", "s", "i", "ama", "asa", "da", "au", "x", "ae", "af", "auto", "sta"], "b": ["wb", "j", "ba", "h", "ib", "ab", "bc", "bb", "pb", "bf", "z", "v", "ub", "ob", "r", "y", "db", "B", "k", "e", "p", "n", "f", "eb", "bs", "o", "w", "sb", "i", "lb", "l", "fb", "x", "g"], "c": ["cu", "cf", "lc", "h", "count", "z", "v", "m", "ac", "r", "y", "cc", "k", "e", "cy", "p", "n", "xc", "f", "dc", "C", "ca", "o", "w", "i", "l", "x", "u", "g"], "d": ["pd", "j", "nd", "dad", "cd", "dd", "md", "fd", "r", "out", "ld", "td", "t", "dt", "dl", "ds", "ded", "e", "ad", "p", "gd", "f", " D", "did", "dc", "dat", "xd", "sd", "D", "debug", "di", "o", "i", "rd", "l", "da", "dh", "bd", "dr", "dy", "done", "de"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] p = new int[N];\\n\t\tfor(int i=0; i<N; i++)\\n\t\t\tp[i] = sc.nextInt();\\n\t\t\\n\t\tint cnt = 0;\\n\t\tfor(int i=0; i<N; i++) {\\n\t\t\tif(p[i]!=i+1) {\\n\t\t\t\tcnt++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(cnt==0 || cnt==2 ? \"YES\" : \"NO\");\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "82", "substitutes": {"sc": ["sw", "sr", "ch", "lc", "cer", "ct", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "tc", "ec", "nc", "sch", "cor", "sh", "cus", "sp", "ser", "src", "rc", "system", "anc", "sche", "ca", "cur", "sb", "cs", "cl", "pl", "pc", "ner", "parser", "asc", "screen", "mc", "sci"], "N": ["Ni", "Ne", "J", "Ns", "F", " n", "NB", "Num", "H", "Number", "T", "B", "NE", "Y", "NT", "Na", "NS", "n", "ND", "L", "R", "K", "NR", "Len", "C", "O", "NC", "NA", "D", "SN", "M", "Z", "S", "X", "V", "NN", "P", "Size", "I"], "p": ["pp", "path", "lp", "a", "po", "tp", "pi", "part", "d", "ip", "ps", "pe", "v", "c", "m", "y", "point", "fp", "t", "post", "pid", "np", "wp", "e", "n", "sp", "pos", "f", "bp", "ap", "o", "per", "up", "l", "patch", "x", "mp", "P", "u", "cp", "jp", "op", "b"], "i": ["id", "slice", "j", "ri", "h", "pi", "in", "mi", "init", "ip", "ii", "ind", "z", "v", "io", "c", "ix", "abi", "start", "r", "y", "gi", "index", "data", "k", "phi", "e", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "o", "b", "di", "ini", "eni", "oi", "ie", "chi", "l", "si", "bi", "hi", "x", "ci", "u", "ni", "uri", "fi", "ai", "ti", "I"], "cnt": ["cno", " cNT", "pno", "lcNT", "counter", "lcnn", "pret", "bcct", "csNT", "lcnot", " count", "lcount", "pct", "count", "nct", "nnot", "bcnt", "csounter", "bcret", " cnn", "Crt", " counter", "crt", " cnot", "lcct", "nnt", "lcnt", "CNT", "Counter", "cret", "cnn", "cct", "acnt", "cNT", "cnot", "Cnt", "bcno", "acct", "csrt", "pnt", " cno", "acount", "acNT", "csnt", "nnn", " cct", " cret", " crt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\t@SuppressWarnings(\"resource\")\\n\tpublic static void main(String[] args){\\n\t\tScanner in = new Scanner(System.in);\\n\t\tint a = in.nextInt();\\n\t\tint b = in.nextInt();\\n\t\tSystem.out.println(a*b+\" \"+(2*a+2*b));\\n\t}\\n}", "target": "92", "substitutes": {"in": ["token", "inner", "login", "again", "doc", "h", "conn", "line", "bin", "query", "rec", "d", "init", "din", "inc", "err", "c", "scan", "m", "is", "inside", "r", "out", "con", "input", "ln", "data", "gen", "ex", "n", "isin", "f", "win", "IN", "rin", "inn", "inf", "as", "connection", "binary", "pass", "In", "ini", "s", "i", "nin", "log", "kin", "between", "exec", "pin", "x", "lin", "socket", "reader", "buffer", "source", "ins"], "a": ["base", "ba", "ab", "oa", "fa", "aa", "sa", "d", "bb", "ha", "count", "z", "an", "c", "area", "ac", "ia", "y", "A", "ga", "mA", "index", "ea", "p", "n", "alpha", "f", "pa", "aj", "la", "ca", "va", "as", "w", "s", "i", "l", "da", "au", "x", "ae", "af"], "b": ["wb", "base", "ba", "ab", "h", "ib", "cb", "bin", "abb", "bc", "aa", "d", "bb", "pb", "bf", "count", "z", "v", "c", "y", "db", "B", "nb", "k", "ad", "e", "beta", "p", "n", "mb", "f", "eb", "bot", "emb", "binary", "bs", "sb", "i", "lb", "l", "bi", "fb", "x", "g", "rb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(final String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint K = sc.nextInt();\\n\t\tint N = sc.nextInt();\\n\t\tint[] A = new int[N];\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\tsc.close();\\n\t\tint max = 0;;\\n\t\tfor(int i = 0; i < N - 1; i++) {\\n\t\t\tmax = Math.max(max, A[i + 1] - A[i]);\\n\t\t}\\n\t\tmax = Math.max(max, K - A[N - 1] + A[0]);\\n\t\tSystem.out.println(K - max);\\n\t}\\n}", "target": "10", "substitutes": {"sc": ["sw", "cont", "ch", "enc", "lc", "sr", "soc", " Sc", "cer", "or", "Sc", " SC", "bc", "se", "SC", "sf", "scope", "sem", " scr", "sa", "com", "ss", "lib", "server", "uc", "cr", "esc", "sq", "c", "scan", "osc", "sync", "out", "ec", "search", "nc", "tc", "sch", "cc", "sh", "sp", "src", "rc", "system", "anc", "sche", "cur", "sb", "cs", "l", "cl", "pc", "ner", "asc", "parser", "g", "screen", "cv", "reader", "sci"], "K": ["Q", "J", "F", "E", "KE", "Mask", "Max", "H", "MAX", "T", "B", "Y", "k", "R", "L", "Key", "W", "C", "O", "PK", "Ku", "D", "M", "U", "Z", "S", "SK", "KK", "KS", "X", "V", "P", "I", "G"], "N": ["Q", "Ne", "Ni", "J", "Ns", "F", "E", "No", "Network", "Max", " n", "NB", "Num", "H", "Node", "T", "B", "NE", "Y", "NT", "NS", "n", "R", "L", "IN", "W", "Len", "C", "O", "MN", "D", "NA", "M", "U", "Z", "S", "X", "V", "P", "Size", "I", "G"], "A": ["Total", "As", "An", "a", "F", "Args", "All", "MA", "array", "The", "Part", "And", "AP", "Max", "AA", "Count", "H", "Ma", "T", "Alpha", "B", "mA", "Y", "alpha", "Array", "L", "Access", "API", "W", "C", "CA", "Ar", "NA", "D", "At", "In", "M", "Advanced", "U", "S", "Adam", "Address", "LA", "X", "au", "P", "Average", "I", "G"], "i": ["id", "j", "api", "ri", "a", "pi", "mu", "in", "mi", "init", "ip", "ii", "z", "v", "io", "ix", "c", "abi", "ori", "y", "min", "gi", "index", "k", "phi", "key", "e", "p", "n", "f", "qi", "ji", "ui", "xi", "li", "iu", "it", "multi", "o", "b", "di", "ini", "ie", "oi", "chi", "si", "bi", "hi", "info", "x", "ci", "u", "ni", "ti", "uri", "ai", "mini", "I"], "max": ["base", " Max", "az", "orig", "limit", "count", "MAX", "cat", "add", "average", "w", "conf", "X", "x", "patch", "diff", "rand", "co", "cross", "std", "largest", "default", "current", "factor", "key", "end", "rest", "cl", "maximum", "auto", "depth", "res", "work", "right", "best", "init", "pop", "c", "out", "value", "big", "core", "p", "n", "ax", "dot", "comb", "sum", "parse", "step", "rank", "scale", "id", "none", "wrap", "height", "part", "mod", "no", "Max", "last", "bottom", "top", "min", "k", "ad", "cache", "q", "power", "pad", "range", "act", "div", "parent", "first", "cost", "est", "size", "total"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\n\\npublic class Main {\\n    private static final int MOD = (int) Math.pow(10, 9);\\n\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        int n = sc.nextInt();\\n        String str = sc.next();\\n        LinkedList<Character> stack = new LinkedList<>();\\n\\n        for (int i = 0; i < str.length(); i++) {\\n            char c = str.charAt(i);\\n\\n\\n                while (!stack.isEmpty() && stack.peek() == c) {\\n                    stack.pop();\\n                }\\n                stack.push(c);\\n\\n        }\\n        System.out.println(stack.size());\\n\\n\\n        System.exit(0);\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException  e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try{\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n}\\n", "target": "218", "substitutes": {"MOD": [" prec", " factor", " perm", " POW", " bits", " mult", " C", " powers", " par", " exp", " K", " pid", " exponent", " Pi", " prod", " mod", " code", " dist", " L", " pri", " p", " R", " multiplier", " power", " P", " N", " div", " prog", " seed", " base"], "sc": ["sw", "enc", "ch", "lc", " Sc", "cer", "scl", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "uc", "cr", "esc", "osc", "sync", "ec", "nc", "sch", "cc", "sh", "sec", "cus", "sp", "dc", "src", "cle", "ocr", "rc", "system", "anc", "ca", "cs", "cl", "pc", "RC", "ci", "asc", "cv", "mc", "sci"], "n": ["j", "nn", "Ns", "ns", "d", "z", "m", "nc", "t", "nb", "k", "nt", "ne", "p", "f", "net", "pn", "N", "num", "l", "x", "g", "ni", " N", "b"], "str": ["sr", "enc", "path", "id", "strip", "Str", "j", "inst", "doc", "form", "line", "in", "err", "cli", "z", "er", "style", "v", "txt", "url", "spec", "r", "iter", "STR", "input", "tr", "t", "stri", "strings", "data", "e", "p", "obj", "sp", "f", "arr", "string", "char", "dict", "wr", "coll", "pr", "s", "div", "code", "fr", "l", "cl", "text", "sl", "dr", "u", "g", "bl", "struct", "list", "b", "name"], "stack": ["slice", "left", "lc", "layer", "counter", "loc", "acks", "buffer", "scope", "array", "shell", "pe", "v", "level", "pop", "style", "sync", "iter", "ack", "pull", "strings", "index", "push", "chain", "batch", "sp", "Stack", "queue", "context", "cache", "string", "ic", "coll", "tree", "collection", "cs", "code", "space", "fr", "l", "cl", "set", "scenes", "store", "sl", "loop", "reverse", "stage", "history", "load", "stream", "all", "que", "sequence", "trace", "list"], "i": ["id", "j", "ri", "pi", "mu", "I", "in", "d", "ip", "ii", "z", "v", "io", "is", "m", "abi", "ix", "ori", "y", "t", "gi", "phi", "e", "p", "f", "qi", "ui", "xi", "li", "iu", "it", "multi", "o", "di", "ini", "oi", "ie", "si", "bi", "hi", "info", "x", "ci", "u", "ti", "uri", "fi", "ai", "b"], "c": ["cu", "enc", "ch", "cf", "lc", "ct", "in", "fc", "character", "v", "cr", "esc", "ac", "r", "ec", "ce", "cc", "k", "vc", "e", "p", "xc", "f", "cell", "dc", "rc", "char", "C", "ic", "cur", "coll", "col", "cs", "code", "l", "cl", "pc", "x", "arc", "ci", "u", "cp", "b"], "br": ["sr", "ler", "ch", "yr", "form", "bro", "bc", "Br", "fore", "bb", "err", "bh", "oper", "ber", "BR", "cr", "r", "db", "tr", "img", "B", "kr", "hr", "be", "ur", "p", "sp", "arr", "ver", "mr", "ctr", "bar", "src", "ocr", "bridge", "next", "browser", "cur", "pr", "sb", "buf", "bt", "rest", "div", "lr", "fr", "sts", "brush", "pl", "sl", "dr", "bl", "rt", "rib", "rb", "b"], "st": ["sw", "ast", "Str", "sth", "inst", "ct", "ft", "sn", "ut", " est", "ss", "std", "pe", "cr", "stable", "r", "sta", "pt", "ld", "const", "t", "tr", "stri", "fe", "ste", "e", "be", "p", "ur", "sp", "src", "string", "ost", "contract", "pr", "w", "s", "ST", "rest", "sb", "bt", "rd", "fr", "sts", "l", "cl", "sign", "x", "sl", "stage", "dr", "struct", "bl", "ist", "est", "rt", "b", "St"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Here your code !\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String line = br.readLine();\\n        String[] line2 = line.split(\" \");\\n        int row = Integer.parseInt(line2[0]);\\n        int column = Integer.parseInt(line2[1]);\\n        int[][] vec1= new int[row][column];\\n        int[] vec2 = new int[column];\\n        for(int j=0;j<row;j++) {\\n            String v = br.readLine();\\n            String[] v_ary = v.split(\" \");\\n            for(int i=0;i<column;i++) {\\n                vec1[j][i] = Integer.parseInt(v_ary[i]);\\n            }        \\n        }\\n        for(int i=0;i<column;i++) {\\n            String v = br.readLine();\\n            vec2[i] = Integer.parseInt(v);\\n        }\\n        List<Integer> result = vecMul(vec1,vec2);\\n        print(result,column);\\n    }\\n    static void print(List<Integer> res,int column) {\\n        for(int i=0;i<res.size();i++) {\\n            System.out.println(res.get(i));\\n        }    \\n    }\\n    static List<Integer> vecMul(int[][] vec1,int[] vec2) {\\n        List<Integer> res = new ArrayList<Integer>();\\n        for(int j=0;j<vec1.length;j++){\\n            int sum = 0;\\n            for(int i=0;i<vec2.length;i++) {\\n                sum += vec1[j][i] * vec2[i];\\n            }\\n            res.add(new Integer(sum));\\n        }\\n        return res;\\n    }\\n}", "target": "185", "substitutes": {}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tFastScanner sc = new FastScanner();\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint ans = 0;\\n\t\tans = Math.max(ans, 2 * A - 1);\\n\t\tans = Math.max(ans, A + B);\\n\t\tans = Math.max(ans, 2 * B - 1);\\n\t\tSystem.out.println(ans);\\n\\n\t}\\n}\\n\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "75", "substitutes": {"sc": ["sw", "ch", "lc", "soc", " Sc", "cer", "scl", "Sc", " SC", "bc", "se", "SC", "scope", "sem", "ss", "uc", "cr", "esc", "sq", "scan", "osc", "sync", "tc", "nc", "cc", "sh", "sec", "cus", "sp", "acc", "rc", "system", "anc", "ca", "class", "s", "cs", "cl", "pc", "ci", "asc", "screen", "cv", "mc", "sci"], "A": ["As", "An", "AR", "a", "F", "EA", "AY", "AN", "MA", "AB", "AP", "Ab", "AD", "AS", "AA", "IA", "H", "AST", "Y", "SA", "PA", "L", "AM", "Array", "API", "BA", "C", "CA", "AW", "NA", "D", "M", "HA", "U", "S", "N", "LA", "X", "AF", "P", "AU", "I", "AC", "RA"], "B": ["Q", "BI", "J", "F", "BL", "E", "LB", "I", "DB", "CB", "AB", "AP", "Bi", "NB", "BF", "SB", "UB", "T", "Bs", "Y", "BB", "R", "L", "WB", "QB", "BA", "BC", "O", "C", "GB", "D", "M", "BS", "U", "N", "OB", "V", "X", "P", "G"], "ans": [" scans", "can", "aps", "aces", "vals", "man", "outs", "ats", "a", "cons", "lan", "ons", "sk", "ns", "AN", "ens", "aus", "atan", "ions", "amps", "vers", "an", "ras", "ams", "ars", "aos", "ana", "olds", "aned", "cas", "cus", "offs", "annels", "anon", "ds", "ents", "ares", "ads", "ids", "ks", "arts", "anc", "ANS", "na", "as", "blocks", "faces", "s", "anned", "ays", "actions", "cs", "ants", "eps", "anes", "nan", "ann", "all", "ls", "ins"], "in": ["id", "inner", "path", "login", "h", "file", "line", "bin", "resource", "init", "inc", "din", "err", "io", "is", "url", "inet", "r", "this", "out", "con", "read", "input", "min", "data", "re", "p", "ex", "win", "f", "ssl", "src", "IN", "inn", "ic", "as", "connection", "In", "ini", "i", "readable", "l", "exec", "socket", "reader", "source", "ins"], "buffer": ["slice", "Buffer", "base", "address", "layer", "file", "document", "length", "memory", "resource", "device", "bb", "flush", "array", "table", "header", "limit", "border", "server", "seed", "broad", "url", "position", "iter", "input", "shape", "request", "data", "padding", "batch", "number", "bar", "queue", "cache", "bytes", "result", "reference", "binary", "window", "image", "uffer", "pad", "buff", "buf", "fb", "reader", "block", "output", "message", "sequence", "transfer", "source"], "ptr": ["slice", "port", "cmp", "cf", "address", "loc", "Ptr", "lf", "length", "len", "ft", "str", "offset", "addr", "flush", "pb", "xt", "fd", "adr", "pointer", "inter", "iter", "pt", "fp", "dest", "shift", "tr", "size", "pull", "const", "butt", "fe", "pend", "index", "req", "dim", "p", "pos", "coord", "arr", "ctx", "ctr", "src", "br", "rc", "tmp", "grad", "wr", "cur", "tip", "pad", "buff", "i", "buf", "rd", "ff", "lr", "fr", "tc", "pl", "pointers", "tips", "attr", "dr", "patch", "ext", "rt", "rot", "prot", "inst", " pointer"], "buflen": ["bufren", "buFlen", "bullEN", "suFlent", "buvelen", "bufilens", "buvelEN", "bucolenn", "fucolain", "suflen", "buFLon", "buFLent", "buFlent", "suFlen", "buclun", "suflun", "bucolon", "buflon", "buplain", "fuflain", "BUllent", "buFlenth", "suflent", "buclon", "BUflen", "buclent", "bullen", "buflEN", "buflenn", "fuflenn", "bufrain", "buplen", "BUflens", "buplon", "fucolenn", "suflon", "buflun", "bufrenn", "buFLen", "buplenn", "bufron", "buvelens", "buclEN", "bullent", "suFlun", "bufilen", "fuflen", "fucolen", "BUllenth", "buclens", "bucolen", "fucolon", "buFLun", "buflain", "buflenth", "BUflent", "fuflon", "buFlon", "buflens", "BUflEN", "buvelent", "bullenth", "BUllEN", "suFlon", "BUflenth", "bucolain", "BUllen", "bufilenth", "buFlun", "BUllens", "bullens", "buclen", "bufilent", "buflent", "buFlens"], "c": ["cu", "ch", "enc", "lc", "h", "ct", "cd", "d", "fc", "count", "uc", "z", "v", "abc", "m", "ac", "y", "ec", "nc", "cc", "k", "e", "cy", "p", "xc", "f", "dc", "rc", "char", "cm", "C", "ca", "col", "s", "i", "cs", "code", "l", "pc", "x", "ci", "g", "u"], "sb": ["wb", "obb", "ib", "ab", "cb", "bg", "su", "zb", "orb", "sg", "rob", "lab", "bc", "sf", "sa", "xb", "bb", "bh", "pb", "bsp", "bf", "usb", "gb", "sq", "ob", "ub", "SB", "stab", "db", "erb", "nb", "BB", "sp", "mb", "bp", "ssl", "kb", "src", "bs", "bt", "bm", "lb", "fb", " SB", "sv", "rb"], "b": ["wb", "base", "ib", "ab", "h", "cb", "body", "a", "function", "ba", "bg", "bin", "abb", "xb", "bc", "d", "bb", "bf", "label", "z", "v", "abc", "ob", "abs", "m", "r", "y", "db", "t", "nb", "k", "beta", "e", "be", "p", "mb", "f", "bar", "bound", "eb", "end", "emb", "bot", "string", "bis", "binary", "o", "w", "buff", "i", "lb", "code", "l", "fb", "x", "bd", "block", "auto", "u", "null", "rb", "bytes"], "n": ["j", "sn", "ns", "no", "count", "v", "z", "m", "r", "out", "nc", "t", "nb", "nr", "k", "nt", "e", "number", "p", "f", "net", "i", "N", "l", "num", "g"], "minus": ["prime", "small", "none", "sin", "one", " negative", "dad", "six", "credit", "neg", " doesn", " negatives", "Plus", "negative", "extra", "plus", "sub", "shift", "eros", "min", "byn", "Na", "beta", "nos", " mini", "pos", " trailing", "missing", "digit", "partial", "zero", "two", "Neg", "exp", "zer", " neg", " plus", "mini", "sign", "without"]}}
