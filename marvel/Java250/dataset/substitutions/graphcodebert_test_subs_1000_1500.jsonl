{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tString[] w = new String[n];\\n\t\tString msg = \"Yes\";\\n\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tw[i] = sc.next();\\n\t\t}\\n\\n\t\tfor (int i = 1; i < n; i++) {\\n\t\t\tif (!(w[i-1].substring(w[i-1].length() - 1, w[i-1].length()).equals(w[i].substring(0, 1)))) {\\n\t\t\t\tmsg = \"No\";\\n\t\t\t\tbreak;\\n\t\t\t}\\n\\n\t\t\tfor (int j = 0; j < i; j++) {\\n\t\t\t\tif (w[j].equals(w[i])) {\\n\t\t\t\t\tmsg = \"No\";\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(msg);\\n\\n\t}\\n}", "target": "70", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "capt", "rc", "cl", "sb", "bc", "cs", "ec", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "uc", "sys", "mc", "scl", "nc", "c", "sci", "SC", "gc", "inc", "fc", "st", "res", "src", "arc", "sv", "nl", "lc", "scan", "sp", "ser", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "n": ["ng", "out", "m", "ct", "s", "nan", "nn", "net", "number", "t", "nr", "ne", "network", "mn", "ni", "nm", "en", "p", "nc", "np", "c", "len", "N", "count", "nb", "d", "v", "g", "no", "name", "nu", "all", " N", "num", "ns", "un", "nl", "sn", "na", "o", "x", "l", "nt"], "w": ["m", "h", "words", "wo", "aw", "r", "z", "wal", "wa", "rw", "wx", "window", "web", "wk", "wt", "wh", "whe", "wi", "ew", "exp", "W", "wine", "wcs", "wall", "fw", "hw", "wl", "p", "c", "sw", "write", "ww", "g", "v", "d", "mem", "rew", "ws", "wd", "kw", "nw", "wm", "wp", "word", "work", "y", "wr", "x", "l", "weights", "wb", "we"], "msg": ["label", "message", "out", "m", "html", "warn", "sim", "reason", "og", "char", "str", "cfg", "printf", "cmd", "exc", "arr", "body", "Msg", "mess", "med", "md", "req", "broad", "mn", "alg", "pkg", "perm", "sys", "bg", "warning", "nm", "log", "app", "help", "gs", "title", "pub", "print", "crit", "compl", "comm", "sg", "gm", "g", "txt", "summary", "output", "mb", "notice", "mt", "commit", "ms", "mail", "bad", "gr", "urg", "confirmed", "mag", "cmp", "mm", "helps", "sum", "say", "err", "tag"], "i": ["h", "hi", "q", "in", "ci", "mi", "mu", "li", "iq", "v", "my", "ij", "ui", "ini", "ai", "ix", "inx", "m", "multi", "e", "bi", "f", "iy", "ei", "print", "status", "pi", "cli", "zi", " I", "id", "y", "im", "l", "ami", "ity", "ki", "ii", "ri", "init", "di", "k", "exp", "info", "gi", "index", "si", "ti", "io", "iri", "ind", "to", "ip", "o", "ir", "qi", "phi", "xi", "me", "sim", "it", "ims", "u", "iii", "t", "I", "this", "ie", "client", "p", "point", "inner", "ex", "iter", "g", "ia", "ic", "uci", "iu", "is", "x", "oi", "batch"], "j": ["out", "b", "oj", "m", "h", "ja", "br", "ev", "ji", "jj", "jc", "str", "q", "z", "uj", "bj", "nd", "at", "ph", "k", "jump", "json", "je", "pt", "pr", "on", "kj", "off", "ot", "jl", "obj", "g", "other", "v", "aj", "jp", "ij", "dj", "jas", "J", "fr", "js", "y", "key", "x", "old", "job"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc =new Scanner(System.in);\\n    int n=sc.nextInt();\\n    int N[] =new int[n];\\n    int x=0;\\n    for(int i=0;i<n;i++){\\n      N[i]=sc.nextInt();}\\n    for(int j=1;j<n-1;j++){\\n      if((N[j-1]<N[j])&&(N[j]<N[j+1])){x=x+1;}\\n      else if((N[j-1]>N[j])&&(N[j]>N[j+1])){x=x+1;}}\\n    System.out.println(x);\\n  }\\n}", "target": "96", "substitutes": {"sc": [" Sc", "ng", "system", "cc", "cle", "tc", "cr", "ss", "rc", "pb", "capt", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "nc", "c", "SC", "gc", "sw", "fc", "sv", "nl", "dc", "lc", "scan", "sp", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "n": ["ng", "m", "norm", "ct", "nan", "nn", "number", "net", "r", "z", "t", "k", "ne", "network", "on", "nm", "en", "p", "nc", "np", "c", "ot", "len", "count", "and", "nb", "g", "w", "v", "nu", "no", "name", "names", "ns", "num", "un", "nl", "sn", "na", "o", "size", "cn", "l", "nt"], "N": ["NH", "Node", "P", "F", "NN", "Ns", "NI", "MAN", "Note", "Ni", "S", "NR", "OUT", "SN", "Not", "AN", "NS", "I", "GN", "NV", "D", "A", "CNN", "NUM", "NO", "NP", "NC", "NB", "L", "ND", "V", "TN", "Name", "NM", "NG", "MN", "CN", "SP", "NT", "None", "KN", "NA", "Y", "T", "NOTE", "SL", "K", "NOT", "NPR", "J", "FN", "Q", "NF", "NE", "EN", "M", "R", "C", "Z", "X", "JSON"], "x": ["out", "check", "xi", "rx", "ct", "xp", "xe", "xs", "dx", "full", "ox", "z", "wait", "mx", "t", "at", "xd", "xxx", "tx", "exp", "xml", "xes", "ux", "index", "xy", "ax", "yl", "print", "xa", "status", "ex", "w", "yx", "xf", "xx", "xt", "ix", "xc", "y", "hex", "px", "fx", "X", "wx"], "i": ["ii", "phi", "xi", "me", "inter", "sim", "multi", "ri", "init", "bi", "it", "hi", "q", "u", "ci", "di", "I", "mi", "ie", "info", "li", "si", "inner", "pi", "iq", "ti", "iter", "v", "io", "ij", "zi", "ui", "ini", "ai", "ic", "us", "iu", "ix", "ind", "id", "ip", "is", "uri", "im", "ori", "qi", "ki"], "j": ["oj", "b", "m", "msg", "adj", "og", "ja", "br", "it", "ji", "jj", "jc", "str", "jac", "q", "z", "user", "uj", "bj", "bs", "window", "at", "row", "k", "jump", "att", "jit", "this", "ne", "json", "req", "pt", "pr", "kj", "er", "next", "jl", "obj", "jo", "g", "other", "v", "aj", "my", "ij", "jp", "step", "dj", "J", "err", "fr", "jack", "js", "to", "y", "key", "im", "l", "job", "let", "ge"]}}
{"code": "import java.io.*;\\n \\nclass Main{ \\npublic static void main(String[] args)throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String[ ] str_div = br.readLine().split(\" \");\\n\\n        int w = Integer.parseInt(str_div[0]);\\n        int h = Integer.parseInt(str_div[1]);\\n        int x = Integer.parseInt(str_div[2]);\\n        int y = Integer.parseInt(str_div[3]);\\n        int r = Integer.parseInt(str_div[4]);\\n\\n\\n\\n        if((x - r >= 0) && (x + r <= w) && (y - r >= 0) && (y + r <= h))\\n        System.out.println(\"Yes\");\\n        else\\n        System.out.println(\"No\");\\n }\\n}\\n", "target": "171", "substitutes": {"br": ["bridge", "out", "b", "lr", "Br", "bsp", "bl", "shr", "str", "cr", "bf", "dr", "be", "ctr", "kr", "bc", "buf", "ch", "pr", "bd", "bm", "hr", "rb", "sr", "bro", "bp", "gr", "vr", "bt", "div", "yr", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "mr", "BR"], "str_div": ["str_str", " str_vol", "rel_coll", "strvaldev", "str_coll", "strvaldi", "STR_mult", "str_DIV", "def_mult", "STR_split", "oct_dom", "rel_split", "oct_div", "def_dev", "oct_set", "str_split", "str_di", "strvalmult", "str_dom", "str_set", "str64mult", "str_dev", "rel_div", "def_div", "str_vol", "str_mult", "strvaldiv", " str_str", "str_arr", " str_DIV", "oct_coll", "STR_div", " str_Div", "str64div", " str_coll", "STR_coll", "def_di", "str_Div", "rel_arr", "str64coll", "str64split"], "w": ["wid", "wo", "aw", "wal", "wa", "rw", "window", "win", "wt", "wi", "wh", "ew", "W", "width", "tw", "fw", "hw", "wl", "ex", "sw", "ww", "ws", "weight", "wd", "kw", "nw", "n", "wp", "work", "wr", "l", "wx", "wb", "we"], "h": ["b", "m", "html", "i", "hi", "z", "oh", "t", "ph", "hd", "k", "height", "hang", "ch", "hh", "ah", "he", "p", "high", "c", "H", "hw", "hr", "sh", "rh", "ih", "ht", "v", "d", "hl", "n", "bh", "hei", "o", "l"], "x": ["act", "m", "xi", "rx", "ct", "xp", "gal", "i", "e", "xs", "f", "dx", "ox", "z", "mx", " xx", "t", "el", "tx", "lat", "xml", "ux", "width", "on", "xy", "ax", "p", "xa", "ex", "g", "ww", "ctx", "left", "yx", "xf", "xt", "n", "xx", "ix", "xc", "o", "px", "fx", "l", "X", "wx"], "y": ["ty", "b", "m", "yer", "uy", "j", "ny", "axy", "i", "ies", "wy", "ery", "ye", "ya", "z", "by", "yt", "iy", "oy", "t", "py", "vy", "ch", "sky", "on", "xy", "ym", "yl", "p", "c", "ys", "v", "a", "Y", "my", "ey", "yo", "cy", "yy", "sy", "yr", "n", "ry", "ly", "o", "l"], "r": ["rd", "rs", "rate", "m", "b", "term", "ri", "lr", "i", "e", "cr", "q", "rc", "dr", "rar", "u", "kr", "t", "nr", "ur", "rat", "attr", "pr", "result", "rr", "rg", "er", "usr", "rad", "p", "ro", "c", "hr", "rh", "rb", "sr", "res", "d", "g", "ar", "rt", "adr", "or", "vr", "n", "tr", "err", "id", "R", "ry", "like", "l", "mr"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        String s = scanner.nextLine();\\n\\n        String[] cycle = {\"Sunny\",\"Cloudy\",\"Rainy\"};\\n        int num = Arrays.asList(cycle).indexOf(s);\\n\\n        System.out.println(cycle[num >= 2? 0: num+1]);\\n    }\\n}", "target": "60", "substitutes": {"scanner": ["canter", " scaner", "Scanener", "scner", "Scanner", " scanener", "canator", "canener", "scener", "scanator", "Scaner", " scanator", "scer", "scanener", "canner", "scaner", "scanter", "scter", " scanter", "Scanator", "Scanter"], "s": ["simple", "hs", "rs", "b", "h", "m", "string", "ats", "e", "str", "ss", "in", "r", "S", "gets", "sb", "t", "qs", "sing", "p", "gs", "c", "w", "v", "less", "strings", "sv", "ws", "ns", "n", "ps", "js", "y", "ls", "ses", "ts", "is", "source", "csv", "sq"], "cycle": ["year", "clean", "custom", "seq", "cle", "sequence", "cache", "cr", "drive", "wo", "flow", "cl", "core", "window", "lock", "sync", "our", "se", "network", "stack", "rev", "sign", "bow", "zero", "index", "line", "CLE", "c", "code", "cling", "rh", "tick", "cy", "screen", "scope", "chain", "closure", "sy", "map", "cycl", "cycles", "collection", "look", "Cy", "one", "sch", "cles"], "num": ["mult", "um", "hom", "mun", "norm", "umber", "multi", "sim", "ul", "Num", "number", "Number", "NUM", "pos", "pn", "inal", " numb", "mn", "nam", "umer", "ums", "result", "zero", "index", "nm", "np", "su", "count", "cum", "inn", "nb", "other", "dim", "no", "nu", "add", "uu", "un", "bid", " number", "n", "div", "non", "cmp", "conv", "alph", "uni", "nom", "sum", "byn", "quant", "umi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String[] args){\\n        Scanner scan = new Scanner(System.in);\\n\\n        // input\\n        int num = scan.nextInt();\\n        int min = scan.nextInt();\\n        int count = 1;\\n        for(int i = 1; i < num; i++){\\n            int temp = scan.nextInt();\\n            if(temp >= min){\\n                count++;\\n                min = temp;\\n            }\\n        }\\n\\n        // answer\\n        System.out.println(count);\\n\\n    }\\n}", "target": "7", "substitutes": {"scan": ["out", "check", "system", "can", "test", "Scan", "ann", "nn", " parse", "k", "sync", "result", "sys", "proc", "sc", " kin", "parser", "anners", "parse", "an", " check", "sv", " annot", "runner", " auto", "map", " span", "ans"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner (System.in);\\n\t\tlong a=sc.nextLong();\\n\t\tlong b=sc.nextLong();\\n\t\tlong max;\\n\t\tif (a>=b)max=a;\\n\t\telse max=b;\\n\t\tlong ans;\\n\t\tfor(ans=max;ans<=a*b;ans+=max) {\\n\t\t\tif (ans%a==0&&ans%b==0)break;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "67", "substitutes": {"sc": [" Sc", "out", "system", "cc", "cle", "tc", "cr", "rc", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "sys", "ck", "mc", "scl", "c", "nc", "sub", "sh", "SC", "gc", "sw", "inc", "ctx", "sv", "dc", "scan", "lc", "sp", "ser", "asc", "sch", "sec", "usc", "sq"], "a": ["aaa", "m", "sta", "la", "apa", "oa", "ap", "isa", "sa", "ama", "da", "f", "am", "ed", "era", "at", "t", "A", "au", "area", "ab", "ca", "ax", "ma", "app", "ac", "ao", "ba", "ea", "aka", "c", "ade", "ta", "an", "aa", "ia", "aj", "ar", "ata", "ga", "all", "as", "alpha", "pa", "na", "val", "y", "va", "ach", "al", "l", "ae"], "b": ["B", "m", "eb", "ob", "j", "br", "i", "bi", "f", "pb", "bf", "be", "sb", "by", "fb", "z", "bs", "bc", "t", "lib", "blue", "ab", "ib", "cb", "gb", "bis", "beta", "bg", "bb", "back", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "mb", "bp", "length", "base", "n", "to", "l", "wb"], "max": ["range", "out", "check", "m", "h", "can", "tmp", "mask", "MAX", "an", " MAX", "full", "ox", "dest", "r", "z", "right", "mx", "min", "window", "k", "limit", "ca", "prime", "index", "ax", "ma", "huge", "Max", "with", "p", "null", "ram", "conf", "maximum", "c", "best", "w", "res", "scale", "v", "end", "total", "aj", "auto", "rank", "ms", "mad", "inv", "times", "last", "length", "base", "n", "map", "now", "na", " Max", "view", "to", "work", "rest", "size", "x", "sum", "global", "mr", "master", "gt", "mod"], "ans": ["uns", "posts", "rs", "rans", "ats", "allows", "xs", "ann", " Ans", " spans", "ians", "vals", "ines", "asks", "ens", " means", "ands", "cs", "outs", "anas", "os", "angs", "ams", "ums", "ags", "lets", "sets", " len", "ops", "offs", "anes", "aps", "eds", "anks", "ks", "ames", "ins", " pan", "an", "cons", "flags", "ars", "ras", "names", " names", "ms", "ents", "ns", " scans", " offsets", "ants", "ows", "ces", "ids", "orts", "eps", "ons", "orders", "yes", "ds", "vers", "arts", "nets", "users", "ls", "ANS", "ints", "x", "amps", "ations", "anc", "actions", "ads"]}}
{"code": "import java.io.*;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint t=1;//sc.nextInt();\\n\t\twhile(t-->0) {\\n\t\t\tint n=sc.nextInt();\\n\t\t\tlong ans=0;\\n\t\t\tint max=Integer.MIN_VALUE;\\n\t\t\tfor(int i=0;i<n;i++) {\\n\t\t\t\tint val=sc.nextInt();\\n\t\t\t\tmax=Math.max(val, max);\\n\t\t\t\tans+=max-val;\\n\t\t\t}\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\\n\t}\\n\\n}\\n/*class Reader{\\n\tBufferedReader reader;\\n\tReader(){\\n\t\treader=new BufferedReader(new InputStreamReader(System.in));\\n\t}\\n\tint nextInt() throws IOException{\\n\t\tString in=reader.readLine().trim();\\n\t\treturn Integer.parseInt(in);\\n\t}\\n\tlong nextLong() throws IOException{\\n\t\tString in=reader.readLine().trim();\\n\t\treturn Long.parseLong(in);\\n\t}\\n\tString next() throws IOException{\\n\t\treturn reader.readLine().trim();\\n\t}\\n\tString[] stringArray() throws IOException{\\n\t\treturn reader.readLine().trim().split(\"\\\\s+\");\\n\t}\\n\tint[] intArray() throws IOException{\\n\t\tString[] inp=this.stringArray();\\n\t\tint[] arr=new int[inp.length];\\n\t\tint i=0;\\n\t\tfor(String s:inp) {\\n\t\t\tarr[i++]=Integer.parseInt(s);\\n\t\t}\\n\t\treturn arr;\\n\t}\\n}*/\\n\\n\\n", "target": "202", "substitutes": {"sc": [" Sc", "sk", "sa", "cr", "ss", "rc", "cl", "cs", "set", "Sc", "se", "ch", "pc", "sys", " SC", " scr", "nc", "c", "SC", "sw", "gc", "src", "sv", " sk", "nl", "dc", "scan", "sp"], "t": ["done", "m", "h", "it", "q", "z", "window", "thread", "k", "up", "counter", "start", "p", "stop", " T", "c", "ta", "tap", "w", "d", "a", "total", "T", "step", "n", "timeout", "tr", "rt"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int tmp = 0;\\n\\n        if(N % 2 == 0) {\\n            tmp = N / 2;\\n        } else tmp = N / 2 + 1;\\n\\n        System.out.println((double)tmp / N);       \\n    }\\n}", "target": "64", "substitutes": {"sc": ["out", "system", "cc", "cle", "tc", "cr", "ss", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "se", "ch", "pc", "osc", "isc", "uc", "sys", "spec", "mc", "scl", "c", "nc", "acc", "sh", "SC", "gc", "sw", "sv", "screen", "scan", "lc", "sp", "sel", "ser", "asc", "conv", "sch", "sec", "anc", "sq"], "N": ["B", "NH", "Node", "P", "F", "NN", "Ns", "NI", "Num", "S", "NR", "SN", "NL", "AN", "NS", "ANY", "GN", "D", "NV", "NO", "NUM", "CNN", "I", "NP", "NC", "NB", "L", "ND", "V", "TN", "NM", "MN", "NG", "CN", "NT", "NA", "NOTE", "T", "K", "NPR", "J", "FN", "Q", "NE", "n", "NW", "New", "M", "R", "NOW", "C", "Z", "REM", "GT", "INT"], "tmp": ["sam", "offset", "qq", "important", "term", "nt", "tu", "amp", "img", "j", "test", "cache", "resp", "nd", "temp", "lambda", "t", "ott", "node", "perm", "NB", "prime", "MP", "cur", "tp", "null", "np", "acc", "prefix", "mp", "obj", "txt", "nb", "ctx", "buff", "v", "src", "output", "T", "td", "yy", "n", "tn", "timeout", "sp", "snap", "cmp", "table", "png", "tt", "nom", "ret", " junk", "tf", "sample"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int K = sc.nextInt();\\n        sc.close();\\n\\n        double allProb = 0.0000000;\\n\\n        double baseProb = 1.00000 / (double) N;\\n        int remainVals = 0;\\n\\n        for (int i = 1; i <= N; i++) {\\n            int takeCoins = getNeedTakeCoins(Double.parseDouble(String.valueOf(i)), K);\\n            if (takeCoins == 0) {\\n                remainVals = N - i + 1;\\n                break;\\n            }\\n            allProb += baseProb * Math.pow(0.5000, takeCoins);\\n        }\\n\\n        if (remainVals > 0) {\\n            allProb += baseProb * remainVals;\\n        }\\n\\n        System.out.println(allProb);\\n\\n    }\\n\\n    public static int getNeedTakeCoins(double val, double K) {\\n        int ret = 0;\\n        boolean times = false;\\n        while (true) {\\n            if (val >= K) {\\n                break;\\n            }\\n            val *= 4;\\n            ret += 2.00;\\n            times = true;\\n        }\\n        if (val / 2.00 >= K && times) {\\n            ret -= 1;\\n        }\\n        return ret;\\n    }\\n}\\n", "target": "20", "substitutes": {"sc": [" Sc", "rs", "cc", "tc", "cr", "ss", "capt", "rc", "ko", "cl", "sb", "bc", "cs", "ec", "reader", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "mc", "scl", "c", "nc", "sh", "SC", "gc", "sw", "inc", "sr", "arc", "src", "sv", "dc", "lc", "scan", "RC", "sp", "ser", "asc", "conv", "ctrl", "sec", "anc", "sch", "usc", "Sync", "sq"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NL", "AN", "NS", "I", "D", "GN", "NO", "A", "CNN", "NC", "NB", "L", "ND", "V", "TN", "Size", "H", "NT", "NA", "T", "J", "Q", "NE", "n", "Len", "Count", "No", "M", "R", "C", "X", "O"], "K": ["B", "KA", "P", "F", "HK", "KI", "UK", "KE", "KR", "OK", "SK", "WH", "S", "G", "Sk", "KB", "FK", "I", "k", "Key", "L", "KY", "V", "KS", "H", "KN", "KT", "Kind", "T", "J", "KING", "BC", "Q", "M", "R", "KK", "KEY", "C", "Z", "KC", "Need", "X", "PK", "VK"], "allProb": ["allProl", "allComc", "allPROl", "allPROx", "allCombe", "allComf", "allPrbe", "allComb", "allProd", "allProx", "allPROr", "allProp", "ALLPrb", " allComb", "allPrebs", "alPred", "allPrr", "alProd", "allPred", "allPROp", "allprod", "allPROf", "alProB", "allprob", "allProbe", "allPROb", " allPrp", "allproc", "allprobs", "alPrebs", "allPror", "allPrc", "alProbs", " allProx", "allprox", " allComr", "allComl", "allComx", "ALLPrx", "ALLPrbe", "allProB", "allPrx", " allProf", " allPror", "allPreB", " allComf", "allScored", "allScorebs", "allScoreb", "ALLProc", "allPreb", "allScoreB", " allPrf", "alPreb", "alProb", "alPreB", "allProbs", "allPrf", "ALLProbe", "allComp", " allProl", " allComx", "ALLProb", " allProp", "allPrb", "allprobe", "ALLProx", "allPrl", "ALLPrc", " allPrl", "allPrp", "allproB", "allComr", "allProf", "allProc", " allPrb"], "baseProb": ["basePrc", " baseProc", "baseProB", "baseproc", "basePRObe", "basePrx", " baseProx", "basePROb", " baseProbs", " basePrc", "baseProc", " basePROb", "baseprobe", "basePrp", " basePRObe", "basePc", "baseMarx", "basePbe", "basePrb", " baseProbe", "baseProbe", "baseMarbs", "basePrbs", "basePrbe", "basePROp", "basePB", "basePROB", " baseProp", "baseProx", " basePROB", "basePROc", " basePROp", "baseproB", "baseProbs", " basePrbs", "baseProp", "basePb", " basePrx", "baseMarc", "baseMarb", "baseprop", " baseProB", "baseprox", "baseprob", " basePROc", "baseprobs", " basePrb"], "remainVals": ["remainCins", "remplainVALS", "remainNals", "remainedvars", "remainvites", "remainPales", "remainedvvals", "remainvales", "remplainVals", "remainVars", "remainedvales", "remainMals", "remainedvites", "remainedvALS", "remainVgs", "remainedVals", "remainvals", "remainingVvals", "remplainVAins", "remainVsales", "remainedvgs", "remainMales", "remainedvals", "remainVites", "remplainVAels", "remainCvals", "remainingVsvals", "remainCels", "remainingVales", "remainVsALS", "remainVsgs", "remainVins", "remainvALS", "remainedVars", "remainingVsals", "remainVsvals", "remainedVgs", "remainingVsites", "remainCALS", "remplainVins", "remainNars", "remainVALS", "remainMvals", "remainvars", "remainVsals", "remplainVAals", "remplainVels", "remainPars", "remplainVAALS", "remainPals", "remainVvals", "remainingVsales", "remainedVALS", "remainVAels", "remainMites", "remainCals", "remainVAals", "remainNales", "remainVAALS", "remainingVites", "remainedVales", "remainedVites", "remainvvals", "remainVels", "remainvgs", "remainNites", "remainPites", "remainVAins", "remainCgs", "remainVsites", "remainingVals", "remainedVvals", "remainVales"], "i": ["ii", "phi", "m", "xi", "me", "multi", "j", "sim", "s", "it", "init", "sequence", "ji", "bi", "hi", "u", "ci", "di", "I", "mi", "ie", "info", "gi", "index", "client", "li", "p", "ei", "si", "pi", "iq", "ti", "iter", "a", "ij", "zi", "ui", "ms", "ini", "ai", "ic", "l", "iu", "n", "ind", "ix", "id", "ip", "y", "o", "is", "x", "im", "ori", "batch", "qi"], "takeCoins": ["takecoin", "takecoins", "TakeCOals", "takeCoIns", "takeCoin", " takeCoin", "TakeCoin", "TakeCoins", "TakeCoitions", "TakeCoals", "takeChocs", "TakeCoords", "takeCOin", " takeCoals", "takeCOords", "takeProords", "takeCoitions", "takeChoords", "takeCocs", "takeCOals", "takeChoins", "takecoals", "TakeCOcs", "TakeCOins", "TakeCOin", "takeCoords", "takeProins", " takeCoIns", "TakeCOords", "takeCOIns", "takeChoitions", "takeCOitions", "takeCOins", "TakeCocs", "takeCOcs", "takeProcs", "takeProitions", "takecoords", "takecoIns", "takeCoals", "TakeCOitions"], "val": ["serv", "aval", "b", "ev", "value", "it", "doc", "test", "z", "vals", "eval", "el", "k", "rel", "dev", "tx", "pol", "slot", "pl", "pt", "pr", "reg", "V", "Value", "index", "vol", "ref", "p", "grad", "kl", "hz", "var", "data", "VAL", "res", "cal", "v", "all", "Val", "div", "Ret", "def", "elt", "vt", "valid", "key", "x", "al", "err", "sum", "arg"], "ret": ["rot", "out", "rets", "flag", "value", "test", "it", "ft", "opt", "arr", "re", "eval", "temp", "t", "set", "ext", "pert", "rev", "result", "repl", "reg", "ref", "len", "print", "nz", "lit", "count", "RET", "get", "res", "v", "deg", "quad", "rm", "num", "last", "alt", "Ret", "pret", "def", "elt", "expr", " Ret", "max", "x", "reset", "err", "rem", "rt", "arg", "gt", "nt"], "times": ["rs", "checks", "caps", "asts", "its", "true", "tags", "allows", "ups", "reports", "ones", "terms", "time", " Times", "cs", "aunts", "outs", "tx", "series", "prime", "etimes", "tests", "acts", "thanks", "recent", "shows", "Times", "forms", "forces", "tips", "dates", "parents", "seconds", "events", "groups", "cases", "ures", "ms", "boxes", "makes", "tracks", "things", "stats", "imes", "runs", "ts", "finals", "thens", "places", "modules", "months"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n \\n\\n\\npublic class Main {\\n\tstatic int a1[]= {0,-1,0,1};\\n\tstatic int b1[]= {-1,0,1,0};\\n\tprivate static         Scanner sc = new Scanner(System.in);\\n\t//result = Math.pow(num1, num3)\\n\t//StringBuffer str = new StringBuffer(hoge1);\\n\t//String hoge2 = str.reverse().toString();\\n\t//map.containsKey(A)\\n\\n\t//Map<String, Integer> map = new HashMap<String, Integer>(n);\\n\t/*for ( \u30ad\u30fc\u306e\u30c7\u30fc\u30bf\u578b key : \u30de\u30c3\u30d7\u306e\u540d\u524d.keySet() ) {\\n\t\t\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u578b data = \u30de\u30c3\u30d7\u306e\u540d\u524d.get( key );\\n\t\t\\n\t\t// key\u3084data\u3092\u4f7f\u3063\u305f\u51e6\u7406;\\n\t}*/\\n\t//int i = Integer.parseInt(s);\\n\t//Queue<String> qq=new ArrayDeque<>(); //add,poll,peek\\n\t//Deque<String> qq=new ArrayDeque<>();//push,pop,peek\\n\t//ArrayList<String> cc = new ArrayList<>(n);\\n\t//Collections.sort(list);\\n\t//Array.sort(list);   cc.contains(tmp)\\n\t//Arrays.asList(c).contains(\"a\")\\n\t//list.set(1,\"walk\");//1 1 2 3 5\\n\tstatic int K,N;\\n\tstatic long mod =1000000007;\\n\t//static \tArrayList<Integer> cc = new ArrayList<>(100);\\n//<60 >62\\n\tpublic static void main(String[] args) {\\n\t\t\t//String S=sc.next();\\n\t\t\t//int N=sc.nextInt();\\n\t\t\t//int v[]=new int[N];\\n\t\t\t//for(int i=0;i<N;i++) {}\\n\t\tint N=sc.nextInt();\\n\t\tint v[]=new int[N];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tv[i]=sc.nextInt();\\n\t\t}\\n\t\t\\n\t\t\\n\t\tboolean x=true;\\n\t\tfor(int i=N-1;i>0;i--) {\\n\t\t\tif(v[i]<v[i-1]) {\\n\t\t\t\tv[i-1]--;\\n\t\t\t}\\n\t\t\tif(v[i]<v[i-1]) {\\n\t\t\t\tx=false;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(x)p(\"Yes\");\\n\t\telse p(\"No\");\\n\t\t\\n\t}\\n\tstatic int v(int a) {\\n\t\treturn a*(a-1)/2;\\n\t}\\n\\n\t\\n\t//N==S\\n\t//E==W\\n//83 S \\n\t//69E\\n\t//78N\\n\t//87W\\n\t\\n\t//static ArrayList<Integer> cc = new ArrayList<>(10001);\\n\t\\n\tstatic void p(String ans) {System.out.println(ans);};\\n\tstatic void p(int ans) {System.out.println(ans);};\\n\tstatic void p() {System.out.println();};\\n\tstatic void p(long ans) {System.out.println(ans);};\\n\tstatic void p(double ans) {System.out.println(ans);};\\n\tpublic static int gcd(int a, int b) {\\n        return b == 0 ? a: gcd(b, a % b);\\n\t}\\n\tstatic String nextPermutation(String s) {\\n\t\tArrayList<Character> list=new ArrayList<>();\\n\t\tfor(int i=0;i<s.length();i++) {\\n\t\t\tlist.add(s.charAt(i));\\n\t\t}\\n\t\tint pivotPos=-1;\\n\t\tchar pivot=0;\\n\t\tfor(int i=list.size()-2;i>=0;i--) {\\n\t\t\tif(list.get(i)<list.get(i+1)) {\\n\t\t\t\tpivotPos=i;\\n\t\t\t\tpivot=list.get(i);\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(pivotPos==-1&&pivot==0) {\\n\t\t\treturn \"Final\";\\n\t\t}\\n\t\tint L=pivotPos+1,R=list.size()-1;\\n\t\t\\n\t\t\\n\t\t\\n\t\tint minPos=-1;\\n\t\tchar min =Character.MAX_VALUE;\\n\t\t\\n\t\tfor(int i=R;i>=L;i--) {\\n\t\t\tif(pivot<list.get(i)) {\\n\t\t\t\tif(list.get(i)<min) {\\n\t\t\t\t\tmin=list.get(i);\\n\t\t\t\t\tminPos=i;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tCollections.swap(list, pivotPos, minPos);\\n\t\tCollections.sort(list.subList(L, R+1));\\n\t\t\\n\t\t\\n\t\tStringBuilder sb=new StringBuilder();\\n\t\tfor(int i=0;i<list.size();i++) {\\n\t\t\tsb.append(list.get(i));\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n}\\n\t\\n", "target": "74", "substitutes": {"a1": ["A1", "A3", "ba3", " a0", " a3", " a2", "a3", "ba0", "ba1", "a0", "A2", "A0", "a2", "ba2"], "b1": [" b3", "b3", "B0", "v3", "B3", "B1", " b0", "v1", "b0", "v0"], "sc": [" Sc", "sa", "tc", "ss", "rc", "cl", "bc", "ec", "cs", "esc", "Sc", "ch", "pc", "uc", "sys", " SC", "mc", "c", "sh", "mp", "SC", "sw", "gc", "sv", "dc", "scan", "sp", "asc"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner S = new Scanner(System.in);\\n\t\tint n = S.nextInt();\\n\t\tint m = S.nextInt();\\n\t\tint[][] A = new int[n][m];\\n\t\tint[] b = new int[m];\\n\t\tint[] ans = new int[n];\\n\t\t\\n\t\tfor(int i = 0;i < n;i++){\\n\t\t\tfor(int j = 0;j < m;j++){\\n\t\t\t\tA[i][j] = S.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0;i < m;i++){\\n\t\t\tb[i] = S.nextInt();\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0;i < n;i++){\\n\t\t\tfor(int j = 0;j < m;j++){\\n\t\t\t\tans[i] += A[i][j] * b[j];\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0;i < n;i++){\\n\t\t\tSystem.out.println(ans[i]);\\n\t\t}\\n\t}\t\t\\n}", "target": "185", "substitutes": {"S": ["SM", "FS", "P", "s", "Socket", "SEC", "SK", "Service", "DS", "SN", "CS", "SO", "NS", "SSL", "SER", "Simple", "Stats", "SA", "SF", "RS", "STAT", "SE", "SI", "SP", "N", "IS", "Client", "Session", "Si", "SL", "SU", "Security", "VS", "LS", "SR", "SS", "SIM", "SAN", "SH", "GS", "TS", "M", "R", "SOURCE", "MS", "SD", "C", "SB", "SAM", "Sample", "JS"], "n": ["out", "norm", "s", "nan", "ny", "e", "nn", "number", "net", "in", "r", "z", "ln", "fn", "nd", "t", "nr", "k", "ne", "mn", "network", "on", "nm", "en", "p", "np", "c", "nc", "N", "pi", "an", "d", "v", "nu", "no", "name", "all", " N", "ns", "num", "un", "nl", "sn", "na", "y", "o", "x", "size", "cn", "dn", "l", "nt"], "m": ["mat", "mk", "h", "me", "mode", "s", "mun", "f", "dm", "q", "r", "span", "om", "cm", "km", "sm", "t", "mo", "k", "mi", "pm", "mn", "perm", "med", "nm", "ma", "mu", "p", "mc", "c", "bm", "pi", "gm", "g", "d", "v", "mem", "mt", "all", "ms", "rm", "tm", "M", "mm", "mean", "y", "o", "x", "im", "em", "l", "rem"], "A": ["AC", "B", "AT", "P", "At", "Ass", "AA", "Af", "Ant", "As", "Ax", "BA", "G", "CA", "Att", "AI", "I", "AB", "D", "AH", "L", "SA", "V", "Am", "This", "App", "Ag", "H", "AE", "N", "An", "AM", "AU", "Ac", "a", "Area", "Ar", "Alpha", "Ab", "AR", "JA", "M", "R", "C", "X", "AP"], "b": ["B", "eb", "ob", "s", "br", "bi", "f", "r", "be", "sb", "u", "fb", "by", "bs", "bc", "t", "ab", "ib", "cb", "gb", "bis", "bg", "bb", "p", "ba", "c", "db", "rb", "nb", "g", "bp", "v", "a", "mb", "bin", "bt", "y", "o", "l", "wb"], "ans": ["uns", "vs", "rs", "s", "ats", "aos", "xs", "ann", "types", "ians", "ens", "bs", "cs", "aus", "outs", "acs", "os", "ams", "ums", "aints", "anes", "offs", "aps", "gs", "anks", "ks", "ins", "an", "ions", "ars", "ras", "ms", "ents", "as", "ns", "orts", "arms", "ants", "ds", "ps", "vers", "arts", "als", "nets", "ts", "ANS", "ls", "is", "amps", "ints", "es", "ads"], "i": ["la", "ji", "hi", "q", "iti", "ci", "mi", "list", "li", "iq", "ar", "ij", "ui", "ini", "ai", "ish", "ix", "ret", "ion", "multi", "ik", "user", "iy", "ei", "status", "pi", "ite", "cli", "zi", "chain", "id", "y", "uri", "asi", "im", "ami", "ity", "ki", "ii", "ri", "fi", "init", "di", "info", "gi", "index", "si", "ti", "io", "iri", "\u0438", "ind", "to", "ip", "ori", "ir", "qi", "phi", "xi", "me", "sim", "it", "ims", "iii", "I", "this", "ie", "series", "point", "iter", "ia", "ic", "iu", "is"], "j": ["ng", "oj", "og", "ja", "br", "it", "ji", "jj", "bo", "jc", "bi", "ev", "q", "jac", "z", "by", "uj", "bj", "el", "di", "rel", "jump", "son", "jit", "json", "je", "pt", "pr", "on", "xy", "kj", "off", "er", "ju", "li", "si", "note", "ot", "jl", "obj", "jo", "g", "other", "v", "Ja", "aj", "io", "jp", "ij", "dj", "jas", "J", "sp", "ix", "fr", "ind", "js", "y", "o", "ion", "l", "job"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s=new Scanner(System.in);\\n        String str=s.nextLine();\\n        int[] arr=new int[26];\\n        for(int i=0;i<str.length();i++){\\n            arr[str.charAt(i)-'a']++;\\n        }\\n        for(int i=0;i<26;i++){\\n            if(arr[i] %2!=0){\\n                System.out.println(\"No\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"Yes\");\\n\\n    }\\n}\\n", "target": "103", "substitutes": {"s": ["hs", "rs", "b", "h", "sol", "xs", "fs", "ss", "S", "sb", "gets", "abs", "os", "se", "qs", "sys", "gs", "c", "sw", "ys", "w", "v", "sv", "ms", "ws", "ns", "as", "search", "sts", "ds", "ps", "stats", "js", "y", "ls", "ses", "ts", "is", "es", "l", "sq"], "str": ["out", "m", "b", "string", "j", "STR", "br", "it", "f", "char", "seq", "url", "r", "dr", "z", "ctr", "Str", "re", "t", "coll", "exp", "ch", "enc", "pr", "cur", "list", "vol", "spec", "oct", "print", "status", "form", "stri", "obj", "data", "txt", "g", "st", "v", "name", "res", "ar", "mt", "us", "gr", "text", "n", "sts", "tr", "sp", "utt", "fr", "ent", "wr"], "arr": ["rot", "adj", " narr", "arb", "br", "par", "r", "av", "dict", "row", "coll", "rel", "att", "our", "ab", "pl", "ari", "rav", "gb", "enc", "emb", "attr", "ax", "list", "app", "ref", "db", "count", "array", "ack", "mb", "aj", "ar", "ars", "Ar", "inv", "num", "ARR", "gr", "bar", "Array", "dat", "map", "hist", "fr", "ang", "ray", "elt", "alph", "nr", "hash", "frac", "resh"], "i": ["ii", "phi", "m", "xi", "multi", "sim", "j", "ri", "fi", "init", "bi", "it", "ji", "ik", "hi", "q", "in", "ims", "u", "yi", "ci", "iy", "span", "di", "I", "mi", "this", "ie", "gi", "index", "client", "php", "li", "ei", "si", "status", "pi", "ex", "iter", "ti", "g", "v", "io", "cli", "ij", "zi", "ui", "ini", "ai", "ic", "\u0438", "chain", "iu", "base", "ix", "ind", "id", "ip", "y", "cgi", "o", "is", "uni", "x", "im", "oi", "ori", "err", "ami", "uri", "ity", "qi", "ki"], "charAt": ["characterAfter", "byteAfter", "charAfter", "letterAfter", "letterFor", "charState", "letterAt", "byteState", "byteAt", "characterState", "byteFor", "charFor", "letterState", "characterAt", "characterFor"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str = br.readLine();\\n\t\tStringBuffer st = new StringBuffer(str);\\n\t\tst.reverse();\\n\t\tSystem.out.println(st);\\n\t\t\\n\t\t\\n\t}\\n\\n}", "target": "237", "substitutes": {"br": ["bridge", "Br", "bsp", "bl", "shr", "cr", "bf", "dr", "kr", "bc", "buf", "ab", "gb", "ch", "pr", "bg", "bb", "er", "bd", "ba", "bm", "hr", "rb", "sr", "bp", "bro", "gr", "vr", "bt", "yr", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "browser", "mr", "BR"], "str": ["out", "string", "s", "sol", "j", "STR", "char", "bl", "f", "dr", "r", "arr", "z", "Str", "t", "pr", "ll", "cur", "vol", "spec", "print", "stri", "data", "txt", "iter", "res", "name", "mt", "sl", "chain", "gr", "text", "div", "n", "dat", "tr", "sp", "fr", "wr", "del"], "st": ["store", "ost", "sta", "ct", "tmp", "sa", "bl", "it", "cr", "ss", "ft", "sb", "nd", "bs", "sm", "t", "set", "ld", "th", "sty", "pt", "ST", "std", "sc", "est", "ist", "sh", "stri", "obj", "mt", "St", "ust", "sv", "td", "sl", "const", "l", "dist", "bt", "sn", "sts", "sp", "ts", "rest", "tt", "ste", "stable", "ut"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main\\n{\\n\tpublic static void main(String[] args)throws IOException {\\n\t\tInputStreamReader read=new InputStreamReader(System.in);\\n\t\tBufferedReader in=new BufferedReader(read);\\n\t\tint x=Integer.parseInt(in.readLine());\\n\t\tlong ans=0;\\n\t\twhile(x>=500)\\n\t\t{\\n\t\t    ans+=1000;\\n\t\t    x-=500;\\n\t\t}\\n\t\twhile(x>=5)\\n\t\t{\\n\t\t    ans+=5;\\n\t\t    x-=5;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "180", "substitutes": {"read": ["rd", "give", "hand", "check", "out", "play", "READ", "Read", "pass", "cr", "run", "r", "by", "reader", "se", "report", "load", "reads", "ro", "send", "parse", "write", "get", "then", "add", "input", "raw", "Reader", "open", "stream", "handle", "scan", "readable", "ry", "din", "find", "through"], "in": ["out", "b", "In", "check", "isin", "s", "i", "it", "doc", "init", "run", " din", "r", "file", "user", "rin", "ill", "reader", "IN", "info", "std", "from", "er", "log", "gin", "p", "en", "ins", "inner", "inn", "inc", "and", "w", "cin", "get", "io", "add", "input", "world", "all", "bin", "ini", "stream", "scan", "n", "ind", "readable", "din", "sum", "err"], "x": ["rex", "any", "check", "xi", "rx", "ct", "xp", "xe", "i", "xs", "f", "dx", "ox", "z", "wait", "mx", "checked", "t", "el", "xxxxxxxx", "history", "xd", "tx", "exp", "xml", "xes", "ux", "index", "xy", "ax", "php", "p", "nex", "xa", "ex", "w", "lex", "ctx", "v", "batch", "xf", "xx", "n", "xt", "ix", "xc", "inx", "y", "hex", "px", "expr", "l", "X", "wx"], "ans": ["uns", "posts", "ados", "rs", "oss", " olds", "rans", "ats", "aos", "aned", "xs", "pan", "ann", "cas", "ians", "vals", "mos", "ens", "terms", "aus", "AN", " orphans", "anned", "anas", "acs", "ean", "outs", "ams", "ums", "sets", "anes", "offs", "eds", "aps", "anks", "ks", "an", "An", "leans", "aces", "ars", "ras", "ents", "arms", " scans", "ns", "ants", "mas", "ons", "oos", "ds", " beans", "nets", "arts", "ANS", "amps", "beans", "olds", "ays", "asks", "ads"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main { \\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString[] line = sc.nextLine().split(\" \");\\n\t\tlong num1 = Long.parseLong(line[0]);\\n\t\tlong num2 = Long.parseLong(line[1]);\\n\\n\t\tif(num1%2 == num2%2) {\\n\t\t\tlong num3 = num1 + num2 ;\\n\t\t\tSystem.out.println(num3/2);\\n\t\t}else {\\n\t\t\tSystem.out.println(\"IMPOSSIBLE\");\\n\t\t}\\n}\\n\\n}", "target": "31", "substitutes": {"sc": ["system", "cc", "cle", "tc", "ss", "cr", "cl", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "dec", "se", "ch", "pc", "isc", "osc", "soc", "uc", "sys", "mc", "scl", "nc", "c", "sub", "sh", "SC", "gc", "sv", "screen", "nl", "scan", "lc", "sp", "sel", "ser", "asc", "conv", "sec", "sch", "anc", "usc", "sq"], "line": ["range", "site", "page", "pe", "cle", "lo", "liner", "link", "net", "train", "ln", "shell", "row", "frame", "detail", "node", "ide", "se", "ne", "tile", "pipe", "ve", "list", "date", "entry", "point", "query", "note", "space", "le", "iter", "lines", "port", "no", "ine", "block", "chain", "nl", "cell", "rule", "inline", "Line", "word", "ip", "LINE", "l"], "num1": ["um0", "NUM1", "draw1", "NUM3", "sum2", "sumOne", "number3", "number1", "um11", "NUMOne", "numOne", " num0", "n2", "umU", "sum3", "number2", "draw11", " numU", "um1", "NUM2", "n1", "num0", "numberOne", "numU", "drawU", "sum1", "nOne", "num11", "n3", "draw0", " num11"], "num2": ["NUM02", "alph22", "number0", "NUM1", "NUM3", "number3", "number1", " num0", "alph2", "number2", "um22", "umTwo", "NUM2", " num22", "NUM0", "num0", "num22", " numTwo", "numTwo", "um2", " num02", "number02", "alphTwo", "num02"], "num3": ["num23", "alph313", "long3", "number03", "um43", "NUM3", "num43", "um3", " num23", "number3", " num313", "longThree", "NUMThree", "NUM03", "numThree", "um313", "um23", "numberThree", "alph3", "num03", "long03", "alph43", "alph23", "num313", " num43"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint input = sc.nextInt();\\n\t\tint[] arr = new int[input];\\n\t\tlong output = 0;\\n\t\tfor(int i = 0;i<input;i++)arr[i]=sc.nextInt();\\n\t\tfor(int i = 0;i<input;i++) {\\n\t\t\tfor(int j =i+1;j<input;j++) {\\n\t\t\t\toutput += arr[i]*arr[j];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(output);\\n\t}\t\\n\\n}\\n", "target": "126", "substitutes": {"sc": ["ng", "system", "cc", "cle", "tc", "cr", "ss", "pb", "rc", "capt", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "ck", "mc", "scl", "nc", "c", "sh", "sci", "SC", "gc", "sw", "inc", "sv", "scan", "lc", "sp", "sel", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "input": ["current", " Input", "out", "img", "context", "command", "q", "in", "unit", "select", "focus", "window", "history", "format", "read", "lat", "xml", "height", "internal", "unknown", "start", "index", "from", "buffer", "list", "null", "count", "mit", "shape", "total", "config", "add", "raw", "capacity", "step", "visible", "shift", "num", "hidden", "active", "type", "length", "integer", "Input", "image", "base", "n", "text", "required", "pattern", "table", "view", "mm", "max", "size", "source", "sum", "initial", "batch", "PUT"], "arr": ["aaa", "adj", "arb", "img", "shr", "br", "bl", "par", "ele", "r", "dr", "av", "vec", "inst", "dict", "row", "au", "coll", "rel", "att", "art", "pl", "gb", "enc", "alg", "attr", "ll", "cur", "sys", "pr", "app", "ord", "ptr", "db", "var", "iq", "array", "ack", "arc", "res", "ar", "deg", "inv", "gr", "Array", "div", "dat", "map", "fr", "ang", "ind", "val", "ray", "elt", "ix", "alph", "err", "frac", "quant", "nt"], "output": ["plot", "out", "current", "wrong", "binary", "value", "Output", "success", "put", "net", "written", "section", "exit", "human", "network", "result", "connection", "adjusted", "beta", "control", "next", "amount", "print", "response", "write", "array", "cut", "data", "other", "total", "config", "component", "production", "dot", "hidden", "affected", "display", "update", "text", "second", "generated", "n", "default", "position", "batch", "PUT", "ut"], "i": ["ii", "phi", "m", "xi", "me", "multi", "sim", "ri", "eu", "it", "bi", " Xi", "init", "ik", "hi", "ji", "ims", "in", "iti", "u", "ci", "iy", "iso", "di", "I", "mi", "this", "ie", "gi", "from", "mu", "li", "ei", "si", "print", "inner", "pi", "iter", "ti", "iq", "g", "v", "ia", "cli", "iri", "ij", "zi", "ui", "io", "ini", "ai", "ic", "us", "uci", "iu", "ix", "ind", "inx", "ip", "y", "is", "PI", "x", "im", "oi", "ori", "asi", "ami", "qi", "ki"], "j": ["ng", "oj", "b", "m", "h", "ja", "br", "it", "ji", "jj", "bi", "jc", "jac", "ev", "q", "z", "uj", "bj", "ph", "k", "jump", "jit", "ne", "json", "pt", "kj", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "dj", "J", "us", "n", "ix", "fr", "js", "y", "o", "l", "job", "ge"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\t\\n\t\tint nam = in.nextInt();\\n\t\tint namber = 0;\\n\t\tint flag = 0;\\n\\n\t\tfor(long i = 0; i < nam; i++){\\n\t\t   namber =  in.nextInt();\\n\t\t   if(namber % 2 == 0){\\n\t\t        flag = 1;\\n\t\t       if(namber % 3 == 0 || namber % 5 == 0 ){\\n\t\t           flag = 0;\\n\t\t       }\\n\t\t       if(flag == 1){\\n\t\t           System.out.println(\"DENIED\");\\n\t\t           System.exit(0);\\n\t\t       }\\n\t\t   }\\n\t\t}\\n      \\n      System.out.println(\"APPROVED\");\\n\t}\\n}", "target": "113", "substitutes": {"in": ["per", "out", "inf", "In", "con", "isin", "init", "doc", "char", "run", " din", "r", "file", "by", "rin", "reader", "vin", "at", " out", "IN", "info", "std", "from", "line", "gin", "en", "ins", "inner", "conf", "inn", "inc", "sin", "cin", "get", "io", "add", "input", "raw", "all", "bin", "ini", "thin", "state", "or", "scan", "n", "err", "ind", "id", "mm", "din", "is", "old", "sum", "l", "rt"], "nam": ["sam", "san", "um", "mun", "sim", "mon", "ny", "nn", "cam", "Num", "iam", "fn", "am", "una", "about", "mis", "wal", "NJ", "ab", "mn", "dam", "nm", "aka", "ram", "ami", "inn", "fam", "dim", "cal", "my", "sit", "sal", "rm", "num", "un", "ame", "sn", "n", " Nam", "snap", "mal", "na", "nom", " nem", "amin"], "namber": ["amenber", "nambre", "amester", "ameber", "namuber", "ameiter", "nybr", "namster", "namner", "nmbert", "namester", "nmbr", "amenner", "amenBer", "nmerent", "namebre", "nmner", "nambert", "htmoser", "naber", "naerent", "camber", "aminbered", "htmiter", "nyBer", "naBER", "namoser", "nmBER", "htmber", "nmger", "nmBer", "camBer", "namlet", "nmlet", "aminbre", "amebered", "aminber", "nyoser", "camlet", "htmuber", "nyber", "namiter", "nyerent", "namBER", "namebered", "nameber", "amenger", "amenbert", "nambered", "namger", "nyner", "nambr", "namBer", "nmber", "namerent", "aminster", "camger", "ameuber", "nabr", "nyiter", "nyuber", "amenlet", "ameoser", "nyBER", "nybert", "amebre"], "flag": ["store", "bit", "cloud", "save", "fd", "mask", "pid", "age", "char", "f", "cmd", "lag", "fire", "bool", "ground", "event", "wait", "continue", "set", "ld", "sync", "sign", "group", "ag", "off", "log", "list", "level", "ord", "print", "status", "compl", "count", "debug", "flags", "ment", "state", "type", "weight", "nl", "bird", "lv", "bug", "day", "alt", "sp", "cond", "id", "ver", "Flag", "al", "condition", "field", "ret", "sum", "FLAG", "tag", "arg"], "i": ["ii", "phi", "m", "gu", "xi", "me", "multi", "j", "sim", "it", "bi", "e", "init", "hi", "q", "u", "ci", "t", "di", "I", "mi", "ie", "gi", "li", "si", "pi", "ex", "iter", "sql", "ti", "g", "io", "cli", "ui", "ini", "ai", "us", "iu", "n", "ix", "ind", "y", "is", "uri", "x", "im", "batch", "qi"]}}
{"code": "import java.util.*;\\n \\nclass Main{\\n    public static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tList<String> list = new ArrayList<String>();\\n\\n        while(true){\\n\t\t\tint m = scan.nextInt(); //??????????\u00a8?????????\u00b0(50?????????)\\n\t\t\tint f = scan.nextInt(); //??????????\u00a8?????????\u00b0(50?????????)\\n\t\t\tint r = scan.nextInt();\t//???????\u00a8?????????\u00b0 (100?????????)\\n\\n\t\t\tif(m==-1 && f==-1 && r==-1){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\t\\n\t\t\tif(m==-1 || f==-1){ //??????????\u00a8??????????????\u00a8????????????????????\u00ac????????????\u00b4???????????? F???\\n\t\t\t\tlist.add(\"F\");\\n\t\t\t}\\n\t\t\telse if((m + f) >= 80){ //??????????\u00a8???\u00a8??????????\u00a8????????\u00a8??????\u00b0??? 80 ??\\???????????\u00b0????????? A\\n\t\t\t\tlist.add(\"A\");\\n\t\t\t}\\n\t\t\telse if((m + f) >= 65 && (m + f) < 80){ //??????????\u00a8???\u00a8??????????\u00a8????????\u00a8??????\u00b0??? 65 ??\\??? 80 ??????????????\u00b0????????? B\\n\t\t\t\tlist.add(\"B\");\\n\t\t\t}\\n\t\t\telse if((m + f) >= 50 && (m + f) < 65){ //??????????\u00a8???\u00a8??????????\u00a8????????\u00a8??????\u00b0??? 50 ??\\??? 65 ??????????????\u00b0????????? C\\n\t\t\t\tlist.add(\"C\");\\n\t\t\t}\\n\t\t\telse if((m + f) >= 30 && (m + f) < 50){ //??????????\u00a8???\u00a8??????????\u00a8????????\u00a8??????\u00b0??? 30 ??\\??? 50 ??????????????\u00b0????????? D\\n\t\t\t\tif(r >= 50){ //???????????????????\u00a8?????????\u00b0??? 50 ??\\???????????\u00b0????????? C\\n\t\t\t\t\tlist.add(\"C\");\\n\t\t\t\t}\\n\t\t\t\telse{\\n\t\t\t\t\tlist.add(\"D\");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\telse if((m + f) < 30){ //??????????\u00a8???\u00a8??????????\u00a8????????\u00a8??????\u00b0??? 30 ??????????????\u00b0????????? F\\n\t\t\t\tlist.add(\"F\");\\n\t\t\t}\\n\t\t}\\n\t\tfor(String str : list){\\n\t\t\tSystem.out.println(str);\\n\t\t}\\n    }\\n}", "target": "118", "substitutes": {"scan": ["save", "san", "check", "con", "system", "can", "skip", "Scan", "nn", "ann", "run", "in", "walk", "re", "scroll", "sm", "row", "nav", "read", "sync", "connect", "se", "seek", "sys", "reach", "sc", "ner", "report", "query", "sur", "send", "gate", "parse", "an", "sin", "get", "sv", "search", "nl", "n", "sp", "na", "ser", "look", "stat", "find"], "list": ["out", "string", "tmp", "sequence", "test", "ul", "ml", "temp", "set", "t", "info", "json", "result", "LIST", "li", "p", "array", "v", "name", "all", "n", "map", "table", "collection", "l", "lists", "listed"], "m": ["ima", "i", "mind", "om", " mi", "sm", " im", "mi", " M", "nm", "code", "ime", " mid", "d", " mt", "name", " perm", "rm", "ms", "num", "n", " om", "id", "M", "lem"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tchar[] inputs = scanner.nextLine().toCharArray();\\n\t\tchar[] outputs = new char[inputs.length];\\n\t\tint oIndex = 0;\\n\t\tfor (int iIndex = 0; iIndex < inputs.length; iIndex++) {\\n\t\t\twhile (iIndex < inputs.length && inputs[iIndex] == 'B') {\\n\t\t\t\toIndex--;\\n\t\t\t\tiIndex++;\\n\t\t\t}\\n\t\t\tif (iIndex >= inputs.length) break;\\n\t\t\tif (oIndex < 0) oIndex = 0;\\n\t\t\toutputs[oIndex++] = inputs[iIndex];\\n\t\t}\\n\t\tSystem.out.println(String.valueOf(Arrays.copyOf(outputs, oIndex)));\\n\t}\\n}\\n", "target": "151", "substitutes": {"scanner": ["canter", "Scanber", " scaner", "Scanener", "scner", "Scanner", " scanener", "canener", "scener", "canber", "Scaner", "scer", "scanener", "canner", "scaner", "scanter", " Scanter", " Scanber", " Scanener", "scter", " scanter", " Scanner", "scanber", "Scanter"], "inputs": ["outputitions", "inputps", "outputls", "Inputb", "outputables", "Inputps", "Inputes", "inputitions", "controled", " inputp", "controls", "rawls", " inputls", "Inputs", "outputts", "inputes", "Inputls", "subjectes", "inputed", "inputts", "controles", "inputls", "Inputp", " inputps", "rawitions", "outputes", "inputb", " inputb", "raws", " inputes", "inputables", " inputitions", "outputed", "outputb", "outputp", " inputts", " inputables", "Inputables", "outputps", "Inputts", "subjected", "inputp", "subjects"], "outputs": ["successes", " outputments", "outputls", "Outputs", "inputses", "Outputts", "returns", "Outputes", "returnes", "outputses", "successs", "outputts", " outputls", "inputes", "inputments", "inputts", "inputls", "successts", "outputes", "outputments", "Outputls", "Outputses", "Outputments", "returnses", " outputts", "returnts"], "oIndex": ["poindex", "poIndex", "oFound", "goindex", " oEx", " oInd", "osIndex", "oInd", "ioCost", " oLink", "oCost", "oaCount", "oindex", "oEx", "iParent", "iRank", "oCount", "osParent", " oCount", " oPosition", "uoIndex", "osNext", "iLoc", "oRank", "aoCount", "iNext", "iCost", "ioindex", "goPosition", " oindex", "aoIndex", "uoNext", " oFound", "aoEx", "oLink", "iPosition", "oaLink", "ioIndex", "iFound", "iindex", "oLoc", "aoRank", "ioResponse", "uoParent", "oParent", "iInd", "oPosition", "iResponse", "goIndex", "aoLink", "iCount", "osLoc", "uoLoc", "aoFound", " oRank", "oNext", " oResponse", "oaIndex", "oResponse", "oaEx", "goInd", "poInd", " oCost"], "iIndex": ["iuIndex", "skiIndex", "iiindex", " iRow", "iuLoop", "iEx", "iiFound", "oOwn", " iPoint", "iuHandle", "oriIndex", "siOwn", " iEx", " iResource", "amiIndex", "oriIs", " iLink", " iindex", "siIndex", "oriInstance", "oindex", "xiInstance", "amiindex", "iNext", "xiIndex", "amiSuccess", "iiInstance", "oriNext", "aiIndex", "oiInstance", "hiInstance", "xiNext", " iHandle", " iSuccess", "xiSecond", "iSecond", "iFound", "iiHandle", "iiAddress", "xiIs", "oiPoint", "ziIndex", "ziRow", "iiRow", "oEx", "hiRow", "aiFound", "iLink", "iResource", "siindex", "xiRow", "iPoint", "ziSecond", " iLoop", "eiPoint", "iHandle", " iOwn", "iiIndex", "iRow", "iindex", " iFound", " iToken", "eiAddress", " iAddress", "aiindex", "siEx", "iiAny", "oiIndex", "xiResource", "amiLink", "eiInstance", "iToken", "ziResource", "iiToken", "iSuccess", "iOwn", "iLoop", "oiAddress", "iuAny", "eiIndex", "aiToken", "iIs", "skiLink", " iIs", "hiIndex", "iAny", " iAny", "iAddress", " iInstance", " iSecond", "iiLoop", "skiSuccess", " iNext", "eiRow", "skiindex", "hiAddress", "iInstance"]}}
{"code": "import java.util.*;\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String[] nums = sc.nextLine().split(\" \");\\n    System.out.println(nums[2] + \" \" + nums[0] + \" \" + nums[1]);\\n  }\\n}", "target": "149", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "capt", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "dec", "se", "ch", "pc", "isc", "osc", "sys", "spec", "mc", "scl", "c", "nc", "sub", "sh", "SC", "sw", "gc", "sv", "screen", "nl", "scan", "lc", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "nums": [" nows", "tum", " nues", "tenummies", "Nows", "nuicks", "Nums", "nuows", " noms", "Num", "nsumbers", " nummies", " nims", "noms", "Nummies", "Numbers", " num", "toms", "nsums", "Noms", "numbers", " nicks", "tenumbers", "nicks", "nows", " namps", "nsims", "Nims", "nues", "Nues", "nuums", "tums", "num", "nuumbers", "Nicks", "nsues", "tenums", "namps", " numbers", "tumbers", "tenamps", "nummies", "nims", "Namps"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    char[] S = sc.next().toCharArray();\\n    boolean isSame = true;\\n    if(N%2 != 0){\\n      System.out.print(\"No\");\\n    }else{\\n      for(int i=0; i<N/2; i++){\\n        if(S[i] != S[i+(N/2)]){\\n          isSame = false;\\n        }\\n      }\\n      if(isSame){\\n        System.out.print(\"Yes\");\\n      }else{\\n        System.out.print(\"No\");\\n      }\\n    }\\n  }\\n}\\n    \\n", "target": "161", "substitutes": {"sc": [" Sc", "ng", "out", "system", "cc", "cle", "tc", "cr", "ss", "rc", "pb", "ko", "cl", "cam", "bc", "cs", "desc", "ok", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "c", "nc", "sub", "sh", "sci", "SC", "gc", "inc", "sv", "dc", "scan", "lc", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "sq"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "Num", "NR", "Number", "SN", "G", "NAME", "NL", "AN", "NS", "I", "D", "CNN", "NO", "GN", "NV", "NP", "NC", "NB", "L", "ND", "V", "NOR", "TN", "Name", "NM", "NG", "MN", "CN", "H", "NT", "NA", "K", "J", "FN", "Sn", "NE", "n", "M", "R", "C"], "S": ["WS", "SM", "B", "E", "P", "F", "s", "G", "CS", "SO", "NS", "I", "A", "CSS", "SER", "L", "SA", "V", "RS", "SE", "SI", "SP", "H", "SC", "Si", "SL", "SQL", "T", "SU", "Q", "SS", "SAN", "GS", "U", "M", "R", "C", "SB", "SAM", "X", "CHAR", "JS"], "i": ["ii", "phi", "m", "me", "xi", "j", "multi", "sim", "ri", "fi", "init", "bi", "it", "ji", "hi", "q", "u", "span", "ci", "di", "I", "mi", "ie", "gi", "index", "from", "mu", "li", "ei", "si", "point", "ski", "pi", "iter", "ti", "cli", "ij", "zi", "ui", "ms", "ai", "us", "iu", "base", "n", "err", "ind", "ix", "id", "ip", "y", "is", "key", "uri", "im", "ori", "batch", "ami", "qi", "ki"], "isSame": ["issame", "inDifferent", "insame", "IsSame", "isDifferent", "imsSimilar", "IsSimilar", "ISFound", "isSimilar", "imsSame", "ISsame", "imssame", "ISSame", "ISDifferent", "inSame", "ISSimilar", "IsDifferent", " issame", " isDifferent", "inSimilar", " isSimilar", "Issame", " isFound", "IsFound", "isFound", "imsDifferent"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tInputStream in = System.in;\\n\tPrintStream out = System.out;\\n\\n\tpublic void _main(String[] args) {\\n\t\tScanner sc = new Scanner(in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tint M = sc.nextInt();\\n\t\tint[] p = new int[M];\\n\t\tString[] S = new String[M];\\n\\n\t\tfor (int i = 0; i < M; i++) {\\n\t\t\tp[i] = sc.nextInt() - 1;\\n\t\t\tS[i] = sc.next();\\n\t\t}\\n\t\tsc.close();\\n\\n\t\tboolean[] ac = new boolean[N];\\n\t\tArrays.fill(ac, false);\\n\\n\t\tboolean[] b = new boolean[N];\\n\t\tfor(int i=0;i<M;i++) {\\n\t\t\tif(S[i].equals(\"AC\")) {\\n\t\t\t\tb[p[i]] = true;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\t\\n\t\tint numOfAC = 0;\\n\t\tint numOfWA = 0;\\n\\n\t\tfor (int i = 0; i < M; i++) {\\n\t\t\tif (S[i].equals(\"AC\")) {\\n\t\t\t\tif (!ac[p[i]]) { //AC\u6e08\u307f\u3067\u306a\u3044\u306a\u3089\\n\t\t\t\t\tnumOfAC++;\\n\t\t\t\t\tac[p[i]] = true;\\n\t\t\t\t}\\n\t\t\t\t//AC\u6e08\u307f\u306a\u3089\u3059\u3067\u306b\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u4f55\u3082\u3057\u306a\u3044\\n\t\t\t\t\\n\t\t\t} else { // WA\\n\t\t\t\tif (!ac[p[i]] && b[p[i]]) { //AC\u6e08\u307f\u3067\u306a\u3044\u306a\u3089\\n\t\t\t\t\tnumOfWA++; //\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u5897\u3084\u3059\\n\t\t\t\t}\\n\t\t\t\t//AC\u6e08\u307f\u306a\u3089\u30da\u30ca\u30eb\u30c6\u30a3\u306a\u3057\\n\t\t\t}\\n\t\t}\\n\\n\t\tout.println(numOfAC + \" \" + numOfWA);\\n\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main()._main(args);\\n\t}\\n}\\n", "target": "48", "substitutes": {"in": ["m", "In", "inf", "con", "s", "context", "it", "init", "f", "run", "r", "file", "reader", "t", "read", "IN", "info", "on", "from", "gin", "null", "en", "c", "ins", "inner", "inn", "data", "inc", "w", "cin", "st", "io", "ar", "input", "world", "all", "bin", "ini", "as", "ai", "stream", "l", "n", "ind", "ds", "id", "din", "is", "source", "err", "rt"], "out": ["m", "msg", "inter", "system", "str", "cmd", "error", "OUT", "t", "at", "ou", "outs", "exit", "os", "info", "ch", "up", "result", "sys", "Out", "log", "list", "report", "print", "ex", "write", "w", "res", "v", "output", "name", "io", "end", "display", "n", "table", "o", "writer", "err", "gt"], "sc": ["sa", "cc", "tc", "ss", "cr", "rc", "cl", "sb", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "ctl", "se", "ch", "osc", "pc", "isc", "uc", "sys", "spec", "mc", "scl", "c", "nc", "sh", "sci", "sub", "SC", "gc", "sw", "inc", "ctx", "st", "arc", "fc", "sv", "co", "dc", "lc", "scan", "sp", "sel", "ser", "asc", "conv", "sch", "sec", "anc", "usc", "irc", "sq"], "N": ["B", "E", "P", "NN", "Ns", "NI", "MAN", "Ni", "Num", "NR", "SN", "G", "AN", "NS", "I", "D", "NO", "NC", "NB", "L", "ND", "V", "NM", "MN", "H", "NT", "NA", "T", "K", "J", "Q", "NE", "n", "R", "C", "Z", "Na"], "M": ["DM", "B", "MAT", "m", "P", "TM", "MX", "MAN", "RM", "MM", "CM", "G", "LM", "MO", "I", "D", "MU", "MP", "L", "MA", "V", "NM", "MN", "MD", "MC", "VM", "T", "K", "PM", "MB", "IM", "J", "MT", "MS", "MODE", "U", "R", "MI", "C"], "p": ["m", "P", "j", "s", "ap", "pe", "pid", "rep", "pb", "q", "t", "pers", "lp", "pos", "pc", "pt", "pr", "pkg", "pre", "tp", "point", "np", "c", "op", "pi", "mp", "pat", "bp", "v", "a", "jp", "n", "pa", "sp", "ps", "wp", "ip", "x", "pp", "cp", "press", "fp"], "S": ["SM", "P", "s", "SEC", "Spec", "DS", "SN", "CS", "SO", "NS", "SSL", "SER", "ST", "SA", "V", "SF", "RS", "SE", "SI", "SP", "BS", "SC", "NRS", "Si", "PS", "SQL", "SL", "T", "SU", "Q", "VS", "LS", "Spe", "SR", "SS", "MS", "SAN", "SH", "GS", "TS", "R", "Sl", "SCP", "SB", "C", "JS"], "i": ["ji", "gl", "q", "dr", "ci", "history", "mi", "php", "list", "li", "remote", "ij", "ui", "ini", "ai", "us", "ice", "err", "ix", "m", "multi", "bi", "f", "iy", "docker", "json", "ei", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "fi", "ri", "eu", "init", "fire", "di", "wi", "info", "gi", "ni", "si", "ski", "ti", "io", "\u0438", "ind", "ip", "ori", "qi", "umi", "phi", "me", "xi", "j", "sim", "s", "it", "span", "iii", "menu", "I", "parent", "ie", "client", "point", "ex", "iter", "g", "ic", "iu", "ios", "is", "x", "oi", "batch"], "ac": ["AC", "act", "rac", "bo", "aq", "cc", "jac", "f", "cache", "am", "abs", "bc", "ec", "sac", "at", "au", "acs", "ab", "auc", "uc", "ag", "pac", "acc", "c", "oc", "Ac", "ad", "ack", "fc", "acl", "a", "ace", "iac", "abc", "ic", "alpha", "n", "unc", "ach", "mac", "fac"], "b": ["B", "m", "h", "eb", "ob", "bo", "br", "f", "bf", "bool", "be", "sb", "u", "fb", "bs", "bc", "t", "ab", "cb", "gb", "bis", "bb", "bd", "ba", "c", "bm", "rb", "nb", "w", "v", "a", "bt", "n", "bh", "ach", "l", "wb"], "numOfAC": ["numOfBC", "numButac", "numOFAc", "sumOFac", "sumOfac", "sumOFBC", "numofAc", "numButAc", "numofBC", "numofAC", "numOFAC", "numOfac", "sumOfBC", "sumOfAc", "numButAC", "numOFac", "sumOfAC", "numOFBC", "sumOFAC", "numOfAc", "sumOFAc", "numButBC", "numofac"], "numOfWA": ["numberofAD", "numOFBP", "numofAD", "numberOfWS", "numOFWS", "numOFWA", "numberOfBP", "numberOfAD", "numberofWA", "numofWS", "numofWA", "numZeroAD", "numOfBP", "numZeroWA", "numZeroWS", "numZeroBP", "numOFAD", "numOfAD", "numberOfWA", "numberofBP", "numOfWS", "numofBP", "numberofWS"]}}
{"code": "import java.util.*;\\n\\n\\n class Main\\n { \\n\tpublic static void main(String args[])\\n \t{ \\n\\n\t\tScanner sc =new Scanner(System.in);\\n\t\tlong l = sc.nextInt();\\n\t\tlong r = sc.nextInt();\\n\t\t\\n\t\tlong res = Integer.MAX_VALUE;\\n\t\t\\n\t\tif(r - l >= 2019){\\n\t\t\tSystem.out.println(0); \\n\t\t\treturn;\\n\t\t}\\n\t\t\\n\t\tfor(long i = l; i <= r; i++){\\n\t\t\tfor(long j = i+1; j <= r; j++){\\n\t\t\t\tres = Math.min(res, i*j%2019);\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(res);\\n\\n \t}\\n }", "target": "193", "substitutes": {"sc": [" Sc", "system", "cc", "cle", "Scan", "cr", "tc", "rc", "cl", "sb", "bc", "cs", "esc", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "c", "nc", "SC", "sw", "gc", "sr", "inc", "ctx", "sv", "nl", "dc", "scan", "lc", "sp", "ser", "asc", "cgi", "sch", "anc", "sec", "usc", "sq"], "l": ["b", "h", "m", "s", "lr", "lu", "e", "lo", "f", "tl", "il", "ul", "lis", "ml", "ln", "rl", "u", "t", "el", "lp", "pl", "L", "ll", "li", "p", "c", "kl", "lit", "jl", "le", "w", "g", "v", "sl", "hl", "nl", "lc", "n", "ly", "o", "ls", "x", "al"], "r": ["range", "rd", "rs", "out", "m", "b", "rx", "ri", "lr", "mr", "cr", "rid", "rar", "rc", "q", "re", "rw", "t", "ru", "nr", "rg", "er", "rn", "p", "ro", "c", "rb", "radius", "sr", "w", "d", "ar", "rt", "rf", "rm", "n", "tr", "fr", "R", "rr", "rec"], "res": ["rs", "out", "sol", "resolution", "rc", "resp", "re", "des", "vec", "rel", "resource", "rss", "rand", "os", "req", "med", "grid", "rev", "result", "reg", "vol", "prefix", "obj", "response", "cons", "cal", "RES", "comp", "results", "ms", "raw", "chain", "gr", "err", "Res", "rez", "ber", "rest", "pres", "pro", "ret", "reset", "sum", "red", "ress", "rem", "mr", "resh"], "i": ["ii", "phi", "m", "xi", "multi", "ri", " Xi", "ji", "bi", "it", "ik", "hi", "ims", "in", "yi", "ci", "di", "I", "mi", "li", "ei", "si", "inner", "pi", "iq", "ti", "ia", "v", "a", "iri", "ij", "zi", "ui", "ini", "ai", "ic", "iu", "ind", "ix", "id", "ip", "y", "o", "is", "asi", "im", "ori", "ir", "ki"], "j": ["oj", "b", "h", "adj", "ja", "br", "it", "ji", "jj", "bi", "jc", "jac", "q", "z", "uj", "bj", "bs", "bc", "ph", "di", "k", "son", "jump", "jit", "ie", "ne", "json", "pt", "pr", "kj", "ot", "jl", "obj", "le", "jo", "g", "other", "v", "aj", "jp", "ij", "J", "dj", "jas", "fr", "js", "im", "job"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        String Sa = scan.next();\\n        String Sb = scan.next();\\n        String Sc = scan.next();\\n \\n        boolean ok = true;\\n        char turn = 'a';\\n        char win = 'a';\\n \\n        while (ok) {\\n            switch (turn) {\\n                case 'a':\\n                    if (Sa.equals(\" \")){\\n                        win = 'A';\\n                        ok = false;\\n                    }else {\\n                        turn = Sa.charAt(0);\\n                        Sa = ret(Sa);\\n                    }\\n                    break;\\n                case 'b':\\n                    if (Sb.equals(\" \")){\\n                        win = 'B';\\n                        ok = false;\\n                    }else {\\n                        turn = Sb.charAt(0);\\n                        Sb = ret(Sb);\\n                    }\\n                    break;\\n                case 'c':\\n                    if (Sc.equals(\" \")){\\n                        win = 'C';\\n                        ok = false;\\n                    }else {\\n                        turn = Sc.charAt(0);\\n                        Sc = ret(Sc);\\n                    }\\n                    break;\\n            }\\n \\n        }\\n        System.out.println(win);\\n    }\\n \\n    public static String ret(String str) {\\n        if (str.length() != 1) {\\n            return str.substring(1);\\n        } else {\\n            return \" \";\\n        }\\n    }\\n}", "target": "11", "substitutes": {"scan": ["range", "save", "out", "san", "check", "clean", "system", "s", "can", "skip", "Scan", "ann", "run", "nn", "in", "re", "scroll", "row", "k", "read", "sync", "black", "se", "info", " Scan", "ch", "sys", "proc", "sc", "reach", "ner", "report", "p", "query", "gen", "send", "gate", "parse", "an", "sin", "auto", "sv", "util", "trans", "n", "pack", "ser", " scanner", "cgi", "call", "stat", "sum", "sche", "find"], "Sa": ["Des", "Tr", "Sea", "Va", "Ro", "Vol", "sa", "Dar", "S", "Har", "Str", "Lat", "Latin", "Ga", "So", "Sal", "Isa", "Tu", "Ha", "Sat", "SA", "Sh", "Sah", "Sav", "Cas", "Dim", "Has", "Ru", "Sam", "Rh", "Pac", "Sax", "Syn", "Seg", "Sit", "Sus", "Ja", "La", "Si", "St", "Salt", "Tam", "Sim", "Dat", "Las", "Mac", "Sn", "Sac", "Cons", "Inst", "Su", "Sche", "Sum", "Crit", "Sl", "South", "Cass", "Capt", "Ta", "Desc", "Na", "Pa"], "Sb": ["Sbase", " Si", "Cl", "Sbh", "Sx", "BB", "Csb", "Shortb", "Sandbi", "Sandnb", "Insb", "Snb", "sb", "Snsb", "Bsb", "Signnb", "Sandbl", "Savefb", "Savebi", "Sbl", "SandB", "ShortB", "Cb", " Sl", "Bx", "sc", "Cx", "Sref", " Sbase", "Insfb", "Sfb", "Insbi", " SB", "Bb", "Signb", "Sandb", "Si", "Cc", "Cref", "Cn", " Sn", "Sn", "sl", "Snx", "Bnb", "sn", "Savebh", "Sandbh", "Snref", "Shorti", "Bbl", "SignB", "Ssb", "Bbase", "Sl", "Bref", "Bi", "Insbh", "Saveb", "SB", "Signbl", "Shortbase", "Sbi", "Sandfb"], "Sc": ["Sur", "Cl", "Win", "Sync", "Che", "Esc", "Ch", "Loc", "Vol", "Comp", "Scan", "Spec", "Chan", "Sec", "Cle", "Sp", "Str", "Sk", "Con", "Can", "Dec", "Kit", "Enc", "Snap", "Tu", "Se", "Cell", "Sch", "Sh", "sc", "Cro", "Cat", "Qu", "Rh", "Cor", "Cont", "War", "Er", "Sax", "SC", "Reg", "Seg", "Ty", "St", "Col", "Mac", "Mc", "Sn", "Cons", "Coll", "Typ", "Sche", "Cs", "Crit", "Sw", "Sl", "Capt", "Ser", "Scroll", "Desc", "Sharp", "C", "Th"], "turn": ["act", "mot", "ask", "rain", "play", "ct", "con", "patch", "can", "mix", "what", "feat", "won", "ox", "urn", "think", "tell", "fun", "focus", "change", "pos", "connect", "ch", "on", "tip", "ash", "vol", "pen", "ol", "sh", "box", "vert", "ot", "ain", "form", "cycle", "an", "Turn", "sw", "transform", "draw", "round", "trace", "make", "vel", "shift", "inv", "craft", "chain", "pack", "don", "ix", "snap", "val", "ver", "roll", "rest", "ach", "turned", "call", "x", "key", "ek", "col", "sch", "head"], "win": ["ask", "Win", "rain", "warn", "con", "skin", "pass", "wid", "in", "won", "ln", "wan", "wal", "wait", "lan", "shell", "window", "vin", "lock", "wk", "wt", "mn", "wine", "windows", "on", "conn", "reg", "pen", "box", "gn", "ain", "WIN", "inn", "sw", "draw", "w", "gate", "port", "then", "ad", "wn", "make", "bin", "ws", "inv", "screen", "wd", "dir", "n", "pack", "war", "snap", "word", "wind", "roll", "man", "wx"], "ok": ["out", "http", "ick", "sk", "ocr", "loc", "good", "coll", "dev", "tx", "iv", "ak", " good", "ck", "oc", "obj", "res", "ack", "all", "or", "town", "bo", "ko", "ik", "rc", "kit", "oh", "at", "empty", "sync", "Ok", "isc", "ops", "boot", "ms", " loc", "y", "typ", "ask", "deep", "ob", "init", "full", "alloc", "touch", " valid", "ran", "bc", "row", " OK", "k", "rel", "info", "req", "md", "up", "ll", "ot", "yes", "valid", "ek", " res", " okay", "check", "j", "OK", "i", "oly", "arr", "exec", "app", "ol", "ic", "hl", "rek", "ready", "err", "rec"], "str": ["rs", "out", "m", "msg", "string", "s", "STR", "seq", "char", "it", "ocr", "r", "dr", "arr", "ctr", "Str", "t", "cont", "exp", "ch", "spr", "cur", "usr", "vol", "p", "c", "print", "stri", "obj", "data", "txt", "iter", "res", "st", "name", "input", "text", "n", "tr", "sp", "fr", "pattern", "hex", "conv", "wr", "ret", "del", "err", "vc"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        System.out.println(execute(sc.nextInt(),sc.nextInt(),sc.nextInt()));\\n\\n    }\\n\\n    public static String execute(int a1,int a2,int a3) {\\n\\n        if(a1 + a2 + a3 <=21){\\n            return \"win\";\\n        }\\n        return \"bust\";\\n    }\\n}", "target": "129", "substitutes": {"sc": ["tch", "cc", "cle", "tc", "cr", "ss", "capt", "rc", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ch", "osc", "pc", "isc", "cu", "sys", " scr", "mc", "c", "nc", "scl", "sh", "sub", "SC", "gc", "inc", "sv", "lc", "scan", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "sq"], "a1": ["aeOne", "alphaOne", "alpha3", "o0", "alphaone", "aa1", "a01", "aOne", "oOne", " a0", "aeone", "aa01", " a01", "int1", "o1", "o01", "aa0", "intone", "intOne", "int3", " aOne", "aone", "ae3", "a0", "alpha1", "ae1", "aaOne"], "a2": ["action5", "a52", "a5", "aTwo", "ga52", " aTwo", " a5", "anTwo", " a52", " a0", "ga22", "ga5", "a22", "shaTwo", "action22", " a22", "antwo", "atwo", "an0", "action52", "sha0", "sha2", "shatwo", "action2", "an2", "a0", "ga2", " atwo"], "a3": ["sta003", "a03", "alpha003", "int003", "a53", "sta3", "alpha3", " a53", "a23", "a15", "ea23", "A53", "sta15", "a313", "a003", "alpha15", "A3", "ea03", "A03", "int313", "alpha313", "int15", "ea3", " a23", "sta313", " a03", "int3", "A23", "ea53"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\nScanner sc = new Scanner(System.in);\\n\t\tint r = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint[][] nums = new int[r + 1][c + 1];\\n\t\tfor (int i = 0; i < r; i++) {\\n\t\t\tfor (int j = 0; j < c; j++) {\\n\t\t\t\tint a = sc.nextInt();\\n\t\t\t\tnums[i][j] = a;\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor (int i = 0; i < r + 1; i++) {\\n\t\t\tfor (int j = 0; j < c + 1; j++) {\\n\t\t\t\tSystem.out.print(nums[i][j]);\\n\t\t\t\tif (j != c) {\\n\t\t\t\t\tSystem.out.print(\" \");\\n\t\t\t\t}\\n\\n\t\t\t\tif (r > i) {\\n\t\t\t\t\tnums[r][j] += nums[i][j];\\n\t\t\t\t\tnums[i][c] += nums[i][j];\\n\t\t\t\t}\\n\\n\t\t\t\tif (j == c) {\\n\t\t\t\t\tSystem.out.println();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n    }\\n}\\n\\n", "target": "23", "substitutes": {"sc": [" Sc", "system", "cc", "cle", "tc", "cr", "ss", "rc", "sb", "cl", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "exec", "sys", "mc", "scl", "nc", "si", "sh", "sci", "SC", "gc", "sw", "inc", "ctx", "st", "arc", "fc", "sv", "scan", "lc", "sp", "ser", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "r": ["rd", "rs", "m", "h", "b", "ri", "br", "it", "e", "mr", "f", "cr", "rid", "rc", "q", "dr", "rar", "u", "arr", "re", "ru", "t", "nr", "rel", "attr", "pr", "result", "rr", "rg", "er", "p", "ro", "hr", "rb", "radius", "sr", "res", "g", "v", "ar", "rm", "gr", "n", "ra", "tr", "err", "fr", "R", "o", "x", "l", "ir", "rt", "rec"], "c": ["b", "m", "h", "con", "ct", "cc", "cat", "e", "cache", "cr", "tc", "f", "rc", "cl", "z", "u", "ctr", "ci", "cm", "cs", "ec", "t", "cd", "com", "bc", "k", "cb", "ch", "ca", "pc", "cf", "cur", "cu", "ac", "mc", "p", "nc", "conf", "count", "gc", "g", "d", "v", "arc", "ic", "cor", "co", "ce", "dc", "lc", "n", "ctrl", "x", "C", "col", "l", "cp"], "nums": [" niffs", "anogs", " nals", " nogs", "coms", "Nums", "enaves", "rums", "caves", " noms", "nsumbers", "anaves", " nump", " naves", "cogs", "anoms", "camps", "cews", "rals", "nsum", "cumbers", "riffs", "Nems", "anums", " nems", "news", "cums", "noms", "Numbers", "anals", "nsums", "anamps", "aniffs", "numbers", "Noms", "nump", " news", "nems", "enumbers", "cals", " namps", "raves", "Nump", "nsoms", "enoms", "nogs", "enamps", "num", "enums", "News", "namps", " numbers", "nals", "cems", " num", "cump", "naves", "niffs", "Namps"], "i": ["h", "ji", "hi", "q", "in", "ci", "mi", "li", "v", "ar", "ij", "ui", "ini", "ai", "or", "ix", "ion", "m", "e", "bi", "f", "ik", "iy", "at", "ei", "pi", "zi", "n", "id", "y", "asi", "im", "l", "ami", "ity", "ki", "ii", "ri", "init", "yi", "di", "info", "gi", "si", "ti", "io", "iri", "ind", "ip", "ori", "ir", "qi", "phi", "b", "xi", "it", "ims", "z", "u", "I", "this", "ie", "p", "iter", "ia", "ic", "iu", "is", "x"], "j": ["oj", "out", "og", "ja", "br", "ji", "q", "oy", "pt", "pr", "on", "kj", "er", "li", "jl", "obj", "res", "v", "ij", "dj", "jas", "ix", "ion", "m", "e", "bi", "right", "bj", "jump", "json", "ax", "next", "other", "J", "ody", "n", "tr", "js", "y", "im", "l", "ii", "jj", "uj", "el", "di", "k", "jit", "exp", "ch", "ju", "kid", "si", "note", "ot", "io", "aj", "jp", "ind", "to", "o", "job", "ge", "b", "adj", "s", "it", "jc", "jac", "z", "son", "ie", "je", "you", "jo", "g", "fr", "key", "x", "em"], "a": ["b", "sta", "la", "apa", "isa", "sa", "f", "sha", "am", "t", "A", "au", "area", "ca", "ma", "ac", "ba", "ao", "ea", "ka", "xa", "ta", "ita", "an", "aa", "ia", "aj", "as", " na", "aux", "alpha", "pa", "na", "va", "ana", "ae", "fa"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static Scanner sc;\\n\tpublic static void main(String[] args){\\n\t\tsc=new Scanner(System.in);\\n\t\tString taro,hana;\\n\t\tint tp=0,hp=0;\\n\t\tint n=sc.nextInt();\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\ttaro=sc.next();\\n\t\t\thana=sc.next();\\n\t\t\tif(taro.compareTo(hana)==0){\\n\t\t\t\ttp+=1;\\n\t\t\t\thp+=1;\\n\t\t\t}else if(taro.compareTo(hana)>0)tp+=3;\\n\t\t\telse hp+=3;\\n\t\t}\\n\t\tSystem.out.println(tp+\" \"+hp);\\n\t}\\n}", "target": "206", "substitutes": {"sc": [" Sc", " c", "s", "cr", "capt", "tc", "rc", "ss", "pb", "cl", "cam", "irc", "bc", "cs", "qu", " rc", "ok", "esc", "desc", "sync", "Sc", "ctl", "pl", "ch", "pc", "isc", "osc", "exec", "uc", "sys", " SC", " esc", " scr", " resc", "c", "nc", "scl", "mc", "sci", "mp", "SC", "gc", "inc", "sr", " ec", "cons", "ctx", "src", "fc", "sv", " sp", "scan", "lc", "sp", "sel", "asc", " unsc", " cs", "cgi", "ctrl", " cr", "sec", "sch", "usc", " scorer", "anc", "syn", "sq"], "taro": ["pacco", "yaco", "parro", "tara", "harro", " tado", "varo", "hacco", "haco", "parp", "paco", "tamo", "taco", " tarro", "vario", "yaro", "hario", " tara", "haj", "vado", "tarp", "Tamo", "tacco", "haro", " tario", " taj", "paj", "paro", "hara", "yacco", "hamo", "varro", "harp", "yarp", "tado", " tamo", "Taro", "tarro", "taj", "hado", "para", "tario", "Tara", "Tarro"], "hana": ["tharian", " harian", "hane", "thana", " hara", "tara", "heona", "heane", "ohana", "herona", "harian", "heragen", "ohona", "ohanya", " hona", "herane", "phagen", "parian", "phona", "phana", "hano", "pani", "oharian", "hani", "tani", "hara", " hani", "phanya", "hearian", "pharian", "heanya", "hagen", "phane", "heagen", "thanya", "para", "hona", " hano", "tana", "phano", "heana", "pana", "tarian", "herana", "hanya", "thano", " hanya"], "tp": ["bps", "TP", "pe", "tmp", "fps", "pan", "pb", "yp", "top", "TPS", "phy", "orp", "qt", "t", "lp", "dt", "vp", "pt", "pc", "dp", "prot", "pread", "tip", "php", "p", "fp", "np", "ptr", "tap", "txt", "tv", "ppo", "jp", "pd", "td", "gp", "ape", "wp", "sp", "ps", "png", "ips", "ts", "tt", "typ", "pp", "cp", "pu", "arp", "tf", "tk"], "hp": ["hog", "hap", "hop", "phi", "tml", "bps", "h", "html", "uh", "prof", "hi", "phy", "mph", "hm", "oh", "HP", "ph", "htt", "hd", "pers", "lp", "att", "hum", "ping", "eth", "dp", "eh", "php", "p", "hz", "hw", "ptr", "rh", "ih", "ht", "bp", "ppo", "ha", "gp", "hl", "wp", "ps", "ips", "dh", "pp", "cp"], "n": ["ng", "m", "j", "nan", " ng", "nn", "net", "ln", "nia", "t", "ne", "mn", "nv", "ni", "nm", "p", "nor", "gn", "np", "nc", "c", "N", "nb", "nu", " ns", "ns", "num", "nl", "sn", "nw", "na", "sd", "cn", "l", "nt"], "i": ["ii", "phi", "m", "gu", "xi", "me", "j", "multi", "sim", "init", "bi", "it", "hi", "q", "mill", "ci", "t", "di", "I", "mi", "ie", "info", "gi", "li", "si", "pi", " ii", "iq", "ex", "sql", "ti", "io", "zi", "ui", "ms", "ini", "ic", "ai", "us", "uu", "batch", "iu", "ix", "ind", "id", "ip", "is", "x", "im", "err", "qi"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] array = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            array[i] = sc.nextInt();\\n        }\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            while(true) {\\n                if (array[i] % 2 == 0) {\\n                    array[i] /= 2;\\n                    ans++;\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n        System.out.println(ans);\\n    }    \\n}\\n", "target": "39", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "rc", "capt", "cl", "bc", "cs", "sm", "sac", "desc", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "sci", "SC", "sw", "gc", "inc", "sv", "scan", "lc", "sp", "sel", "asc", "conv", "sch", "sec", "usc", "irc", "sq"], "n": ["ng", "m", "j", "nan", "nn", "number", "net", "r", "ln", "t", "k", "ne", "mn", "network", "en", "len", "np", "nor", "nc", "c", "p", "N", "count", "an", "and", "nb", "g", "d", "v", "no", "nu", "name", "all", "names", " N", "num", "ns", "un", "nl", "sn", "na", "o", "max", "cn", "l", "nt"], "array": ["range", "rays", "library", "lower", "address", "sequence", "number", "aw", "av", "answer", "arr", "arrow", "pair", "order", "window", "section", "history", "area", "our", "function", "go", "stack", "instance", "grid", "actor", "index", "variable", "share", "list", "random", "sh", "amount", "var", "trace", "sw", "shape", "a", "ar", "auto", "search", "archive", "length", "integer", "Array", "audio", "angle", "ape", "object", "map", "vector", "now", "alpha", "ray", "collection", "rest", "say", "hash", "stock", "air"], "i": ["ji", "hi", "q", "in", "iti", "ci", "iso", "mi", "php", "li", "v", "my", "ij", "ui", "ini", "ai", "us", "ix", "inx", "m", "multi", "bi", "ik", "iy", "ei", "print", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ity", "ki", "ii", "ri", "fi", "init", "yi", "di", "info", "gi", "si", "ti", "io", "\u0438", "ind", "to", "ip", "ori", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "by", "u", "iii", "iat", "set", "I", "this", "ie", "client", "point", "iter", "g", "batch", "ic", "iu", "base", "is", "oi", "err"], "ans": ["rows", "posts", "uns", "rs", "vs", "s", "can", "ats", "pan", "ann", "nn", "values", "ians", "vals", "lan", "span", "ones", "ens", "cs", "AN", "errors", "outs", "os", "eds", "gs", "ks", "ends", "ins", "an", "lines", "ars", "names", "ms", "orts", "results", "ns", " scans", "ows", "ants", "ids", "orders", "flags", "scan", "ds", "vers", "arts", "ls", "ANS", "is"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString info = br.readLine();\\n\\n\t\tchar letter = info.charAt(0);\\n\t\tchar next = (char) (letter+1);\\n\t\tif(letter==122) {\\n\t\t\tSystem.out.println(\"a\");\\n\t\t}else {\\n\t\t\tSystem.out.println(next);\\n\t\t}\\n\t}\\n}\\n", "target": "150", "substitutes": {"br": ["bridge", "b", "Br", "bsp", "bl", "bi", "str", "cr", "bf", "dr", "be", "ctr", "kr", "bs", "bc", "buf", "rel", "ch", "pr", "repl", "bd", "bm", "hr", "db", "rb", "bp", "bro", "jp", "vr", "bt", "yr", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "mr", "BR"], "info": ["inf", "http", "j", "init", "char", "f", "details", "about", "iso", "information", "history", "frame", "good", "area", "Info", "json", "start", "list", "entry", "report", "conf", "status", "data", "iter", "name", "aj", "ij", "det", "type", "text", "def", "INFO", "stat", "fo", "description"], "letter": ["label", "family", "string", "year", "digit", "lower", "char", "str", "sequence", "service", "magic", "number", "leader", "hello", "era", "ter", "her", "slot", "area", "character", "sign", "zero", "index", "part", "code", "print", "cycle", "le", "iter", "element", "role", "other", "style", "major", "name", "item", "Letter", "column", "lead", "cell", "sy", "alpha", "base", "second", "word", "little", "pattern", "upper", "key", "factor", "operator"], "next": ["prev", "ng", "extra", "j", "seq", "char", "bi", "sequence", "link", "success", "net", "z", "nd", "continue", "this", "ne", "network", "result", "index", "another", "line", "first", "ner", "front", "gen", "Next", "prefix", "iter", "then", "other", "normal", "more", "jp", "future", "big", "nl", "mobile", "reply", "n", "default", "append", "key"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tScan sc = new Scan();\\n\t\tint K = sc.scanInt();\\n\t\tSolABC162_c sol = new SolABC162_c(K);\\n\t\tsol.calcMu();\\n\t\tsol.calcGCDTuple(3);\\n\t}\\n}\\n\\nclass SolABC162_c {\\n\tint K;\\n\tint[] mu, prime;\\n\\n\tpublic SolABC162_c(int K) {\\n\t\tthis.K = K;\\n\t\tmu = new int[K + 1];\\n\t\tprime = new int[K + 1];\\n\t\tfor (int i = 1; i <= K; ++i) {\\n\t\t\tmu[i] = 1;\\n\t\t\tprime[i] = 1;\\n\t\t}\\n\t}\\n\\n\tvoid calcMu() {\\n\t\tfor (int i = 2; i <= K; ++i) {\\n\t\t\tif (prime[i] == 1) {\\n\t\t\t\tfor (int j = i; j <= K; j += i) {\\n\t\t\t\t\tif (j > i)\\n\t\t\t\t\t\tprime[j] = 0;\\n\t\t\t\t\tif (j % (i * i) == 0)\\n\t\t\t\t\t\tmu[j] = 0;\\n\t\t\t\t\tmu[j] = -mu[j];\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tvoid calcGCDTuple(int cnt) {\\n\t\tlong res = 0;\\n\t\tfor (int d = 1; d <= K; ++d) {\\n\t\t\tlong tmp = 0;\\n\t\t\tfor (int s = 1; s <= K / d; ++s) {\\n\t\t\t\ttmp += (mu[s] * Math.pow(K / (d * s), cnt));\\n\t\t\t}\\n\t\t\tres += tmp * d;\\n\t\t}\\n\t\tSystem.out.println(res);\\n\t}\\n}\\n\\nclass Scan {\\n    private byte[] buf=new byte[1024];\\n    private int index;\\n    private InputStream in;\\n    private int total;\\n\t\\n    public Scan()\\n    {\\n        in=System.in;\\n    }\\n    public int scan()throws IOException\\n    {\\n        if(total<0)\\n        throw new InputMismatchException();\\n        if(index>=total)\\n        {\\n            index=0;\\n            total=in.read(buf);\\n            if(total<=0)\\n            return -1;\\n        }\\n        return buf[index++];\\n    }\\n    public int scanInt()throws IOException\\n    {\\n        int integer=0;\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        int neg=1;\\n        if(n=='-')\\n        {\\n            neg=-1;\\n            n=scan();\\n        }\\n        while(!isWhiteSpace(n))\\n        {\\n            if(n>='0'&&n<='9')\\n            {\\n                integer*=10;\\n                integer+=n-'0';\\n                n=scan();\\n\t\t\t\t\\n            }\\n            else throw new InputMismatchException();\\n        }\\n        return neg*integer;\\n    }\\n\tpublic long scanLong()throws IOException\\n    {\\n        long integer=0;\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        int neg=1;\\n        if(n=='-')\\n        {\\n            neg=-1;\\n            n=scan();\\n        }\\n        while(!isWhiteSpace(n))\\n        {\\n            if(n>='0'&&n<='9')\\n            {\\n                integer*=10;\\n                integer+=n-'0';\\n                n=scan();\\n            }\\n            else throw new InputMismatchException();\\n        }\\n        return neg*integer;\\n    }\\n    public double scanDouble()throws IOException\\n    {\\n        double doub=0;\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        int neg=1;\\n        if(n=='-')\\n        {\\n            neg=-1;\\n            n=scan();\\n        }\\n        while(!isWhiteSpace(n)&&n!='.')\\n        {\\n            if(n>='0'&&n<='9')\\n            {\\n                doub*=10;\\n                doub+=n-'0';\\n                n=scan();\\n            }\\n            else throw new InputMismatchException();\\n        }\\n        if(n=='.')\\n        {\\n            n=scan();\\n            double temp=1;\\n            while(!isWhiteSpace(n))\\n            {\\n                if(n>='0'&&n<='9')\\n                {\\n                    temp/=10;\\n                    doub+=(n-'0')*temp;\\n                    n=scan();\\n                }\\n                else throw new InputMismatchException();\\n            }\\n        }\\n        return doub*neg;\\n    }\\n    public String scanString()throws IOException\\n    {\\n        StringBuilder sb=new StringBuilder();\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        while(!isWhiteSpace(n))\\n        {\\n            sb.append((char)n);\\n            n=scan();\\n        }\\n        return sb.toString();\\n    }\\n    private boolean isWhiteSpace(int n)\\n    {\\n        if(n==' '||n=='\\n'||n=='\\r'||n=='\\t'||n==-1)\\n        return true;\\n        return false;\\n    }\\n}\\n\\n", "target": "6", "substitutes": {"sc": [" Sc", "cc", "ss", "rc", "cl", "bc", "cs", "sac", "desc", "ok", "esc", "k", "Sc", "se", "ch", "pc", "osc", "sys", "ck", "Sol", "mc", "c", "nc", "crit", "SC", "gc", "search", "sy", "scan", "lc", "sp", "sel", "ser", "asc", "ctrl", "sch", "sec", "syn", "sq"], "K": ["AC", "B", "KA", "E", "Ka", "P", "F", "KI", "UK", "OK", "KE", "SK", "S", "G", "Sk", "IP", "KB", "Kent", "FK", "Power", "I", "D", "k", "A", "Key", "Disk", "Context", "CP", "L", "MK", "V", "Now", "Max", "GP", "KS", "H", "TH", "NK", "N", "KN", "Kind", "Y", "T", "J", "KING", "Q", "Han", "IK", "Mask", "U", "M", "R", "KK", "Length", "KEY", "C", "Z", "KC", "KR", "X", "O", "PK", "VK"], "sol": ["serv", "sole", "syn", "tl", "str", "ul", "oln", "oly", "ln", "bc", "dri", "tle", "sun", "rel", "Sal", "xml", "sels", "soc", "sys", " Sol", "Sol", "vol", "isol", "ol", "ols", "sql", "sr", "cal", "sin", "ssl", "stress", "sal", "sl", "sy", "rol", "scan", "sp", "sel", "ls", "mol", "col", "l", "sat", "stable", "sq"], "mu": ["mot", "phi", "tu", "m", "mun", "multi", "mon", "bo", "lu", "mont", "bi", "ji", "prof", "hi", "loc", "unit", "u", "mo", "mut", "au", "mi", "hu", "mn", "perm", "cu", "met", "ju", "ma", "data", "Mu", "nu", "mem", "eta", "uu", "mite", "num", "mus", "mas", "pot", "mg", "mean", "mm", "uni", "mac", "meta", "sum", "units"], "prime": ["phi", "pie", "m", "Prime", "me", "pe", "bo", "profile", "ji", "po", "prof", "hi", "primary", "tie", "proxy", "mod", "pri", "mut", "lock", "se", "ne", "perm", "pose", "pr", "zero", "xy", "pre", "beta", "minus", "ve", "vol", "fine", "ma", "tp", "si", "p", "ptr", "pi", "mp", "ti", "scale", "nu", "pse", "uni", "sum", "mite", "sup", "te", "ge"], "i": ["ji", "hi", "ci", "mi", "list", "li", "iq", "v", "name", "ij", "ui", "ini", "ai", "ix", "ion", "m", "multi", "e", "bi", "f", "ik", "ei", "pi", "zi", "chain", "id", "y", "im", "l", "ity", "ki", "ii", "fi", "ri", "init", "ed", "di", "k", "info", "gi", "start", "si", "ti", "io", "jp", "\u0438", "ind", "ip", "o", "ori", "source", "qi", "phi", "xi", "me", "it", "z", "u", "I", "ie", "p", "point", "iter", "g", "ia", "ic", "iu", "base", "is", "key", "x"], "j": ["jet", "oj", "b", "adj", "ja", "br", "it", "ji", "jj", "bi", "jc", "jac", "str", "q", "z", "uj", "bj", "bs", "el", "k", "jump", "jit", "json", "je", "ju", "kj", "prop", "li", "p", "note", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "dj", "J", "jas", "fr", "js", "y", "o", "x", "l", "job"], "cnt": ["gcret", "gcNT", "cnc", "rcnt", "Crs", "Cct", "cct", "cNT", "rcnc", "ncct", "ncnt", " cnc", " crs", "crs", " cret", "Cnt", "rcNT", "ncrs", "gcnc", "CNT", "gcnt", "ncNT", "cret", "rcret", " cNT", " cct"], "res": ["out", "rc", "resolution", "resp", "r", "vals", "real", "re", "vec", "terms", "pos", "resource", "rss", "rand", "req", "rev", "result", "conn", "vol", "ptr", "obj", "cons", "mem", "RES", "comp", "results", "ms", "err", "Res", "ps", "val", "cond", "rest", "pres", "x", "ret", "sum", "reset", "red", "ress", "rem", "rt", "frac", "we", "nt"], "d": ["done", "out", "m", "fd", "b", "f", "da", "dm", "did", "dx", "dr", "z", "r", "u", "nd", "di", "t", "dd", "k", "D", "dev", "dt", "diff", "dec", "od", "dp", "depth", "du", "bd", "p", "c", "db", "ad", "draw", "w", "g", "dim", "debug", "pd", "dc", "dir", "de", "div", "dat", "days", "dist", "ds", "def", "sd", "y", "x", "dh", "l", "den", "dL"], "tmp": ["Temp", "sam", "mk", "out", "m", "offset", "term", "qq", "msg", "amp", "test", "xs", "resp", "same", "t", "pool", "perm", "MP", "result", "p", "np", "part", "ptr", "mp", "obj", "var", "txt", "gm", "ctx", "buff", "mem", "ms", "sp", "sq", "pot", "cmp", "mm", "tt", "size", "ret", "sum", "cp", "tf"], "s": ["hs", "sam", "rs", "m", "h", "its", "ats", "ies", "str", "fs", "xs", "ss", "ims", "S", "span", "bs", "cs", "set", "t", "os", "steps", "ags", "qs", "sym", "sys", "has", "ots", "eds", "gs", "p", "si", "ins", "ys", "less", "sv", "tes", "ms", "as", "ns", "ows", "times", "south", "sts", "sp", "ds", "ps", "stats", "arts", "js", "als", "sd", "ts", "ls", "is", "es", "small", "l", "sq"], "buf": ["bytes", "queue", "out", "b", "msg", "eb", "img", "seq", "br", "init", "pb", "cmd", "uf", "arr", "cv", "vec", "fb", "pool", "Buff", "cb", "emb", "mates", "bag", "buffer", "pkg", "next", "db", "rb", "txt", "iter", "ctx", "buff", "mb", "mem", "bin", "bar", "BU", "Buffer", "batch", "tab", "wb"], "index": ["offset", "page", "address", "context", "value", "dimension", "link", "number", "loc", "set", "row", "Index", "pos", "action", "connect", "info", "seek", "instance", "start", "connection", "slice", "zero", "loop", "level", "point", "si", "count", "iter", "axis", "input", "pointer", "column", "open", "num", "state", "initial", "length", "image", "object", "scan", "ind", "id", "condition", "max", "position", "size", "x", "key", "batch", "find", "head"], "in": ["out", "inf", "In", "m", "h", "con", "isin", "it", "doc", "init", " IN", "r", "rin", "reader", "t", "read", "IN", "info", "from", "log", "gin", "ma", "en", "p", "inner", "ins", "conf", "inn", "inc", "cin", "io", "add", "ar", "input", "bin", "ini", "ic", "or", "stream", "scan", "nin", "err", "ind", "mm", "din", "o", "is", "al", "l"], "total": ["done", "bytes", "current", "page", "sequence", "full", "number", "otal", "t", "empty", "free", "available", "complete", "set", "padding", "this", "negative", "tty", "result", "buffer", "zero", "null", "len", "part", "amount", "latest", "note", "template", "ta", "count", "Total", "summary", "other", "no", "normal", "volume", "all", "eta", "relative", "type", "percent", "last", "length", "active", "base", "equal", "unique", "required", "table", "to", "partial", "max", "size", "database", "sum", "meta", "batch", "not", "valid"], "integer": ["offset", "current", "value", "f", " position", "error", "number", "negative", "info", " num", " t", "result", "counter", "line", "next", "count", " m", "serial", "ment", "initial", " x", "type", " number", "primary", "nr"], "n": ["ng", "m", "b", "nn", "z", "ln", "t", "set", "k", "pos", "pn", "println", "next", "p", "c", "N", "count", "nb", "w", "_", "add", "num", "ns", "const", "nl", "l", "sn", "ind", "def", "y", "o", "nr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tint ans = 0;\\n\t\tfor(int i = 0 ; i < s.length() ; i++) {\\n\t\t\tans += Integer.valueOf(s.charAt(i) + \"\");\\n          if(ans >= 9) {\\n\t\t\t\tans %= 9;\\n\t\t\t}\\n\t\t}\\n\\n\t\tsc.close();\\n\t\tSystem.out.println(ans == 0 ? \"Yes\" : \"No\");\\n\\n\t}\\n}\\n\\n", "target": "93", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "capt", "rc", "ko", "pb", "cl", "sb", "bc", "cs", "ec", "ok", "esc", "sync", "Sc", "isc", "pc", "osc", "ch", "uc", "sys", "ck", "mc", "scl", "nc", "c", "sh", "sub", "SC", "gc", "inc", "fc", "arc", "sv", "nl", "lc", "scan", "sp", "asc", "anc", "sch", "sec", "usc", "sq"], "s": ["hs", "rs", "m", "h", "string", "its", "ats", "xs", "str", "ss", "S", "sb", "abs", "bs", "cs", "t", "os", "bits", "qs", "sys", "gs", "p", "ins", "sw", "g", "less", "sv", "ms", "ws", "sl", "ns", "sts", "sp", "ps", "js", "ls", "ts", "is", "es", "sq"], "ans": ["uns", "posts", "vs", "caps", "can", "ats", "xs", "pan", "ann", " spans", "ians", "lan", "ines", "vals", " means", "ens", "ones", "cs", "AN", "aus", "outs", "acs", "ams", "lets", "ops", "ags", "anes", "offs", "aps", "eds", "anks", "ks", "ins", "an", "lines", "leans", "cons", "ros", "ions", "ars", "ms", "ents", "as", "ns", " scans", "ants", "ids", "ces", "eps", "mas", "ons", "yes", "atts", "oos", "ds", " beans", "vers", "als", "arts", "ps", "ts", "ANS", "ls", "ports", "amps", "beans", "olds", "asks", "ads"], "i": ["ii", "phi", "m", "gu", "xi", "me", "ogi", "j", "multi", "ri", "sim", "init", "bi", "it", "ji", "hi", "u", "ci", "t", "di", "I", "mi", "ie", "gi", "mu", "li", "ei", "si", "c", "pi", "ex", "ti", "g", "a", "cli", "ui", "ms", "ini", "ic", "ai", "us", "\u0438", "iu", "n", "ix", "id", "ip", "y", "is", "uri", "x", "im", "oi", "ori", "l", "qi", "ki"]}}
{"code": "\\nimport java.util.*;\\n\\nclass Main{\\npublic static void main(String[] args){\\nScanner sc = new Scanner(System.in);\\nint W,H;\\nfor(;;){\\nH =sc.nextInt();\\nW =sc.nextInt();\\nif(H == 0) break;\\nfor(int a=0; a<W; a++) System.out.print(\"#\");\\nSystem.out.println();\\nfor(int c=2; c<H; c++){\\nSystem.out.print(\"#\");\\nfor(int b=2; b<W; b++) System.out.print(\".\");\\nSystem.out.println(\"#\");\\n}\\nfor(int a=0; a<W; a++) System.out.print(\"#\");\\nSystem.out.println();\\nSystem.out.println();\\n}\\n}\\n}", "target": "19", "substitutes": {"sc": [" Sc", "tch", "system", "cc", "cle", "Scan", "tc", "cr", "ss", "rc", "cl", "sb", "bc", "cs", "esc", "Sc", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "nc", "sci", "sh", "SC", "gc", "sw", "inc", "sv", "screen", "scope", "lc", "scan", "sp", "sel", "asc", "conv", "ctrl", "sch", "sec", "usc", "Sync", "sq"], "W": ["B", "WS", "Win", "What", "HT", "F", "FW", "EW", "WH", "S", "CW", "Width", "WT", "WI", "A", "D", "I", "HTML", "WW", "WE", "L", "BW", "V", "Week", "WC", "TH", "N", "w", "SW", "VW", "Y", "OW", "We", "DW", "Q", "WA", "Watch", "NW", "M", "WR", "MW", "C", "Wh", "WP", "X"], "H": ["B", "NH", "h", "HT", "High", "HK", "P", "F", "He", "HTTP", "WH", "HD", "Haw", "G", "I", "A", "D", "RH", "HTML", "L", "HC", "V", "CH", "HS", "His", " h", "HH", "TH", "N", "HE", "DH", "HA", "K", "ANG", "Host", "HO", "Q", "HI", "Eh", "OH", "SH", "MH", "M", "U", "HB", "C", "X"], "a": ["aaa", "aff", "\u00e4", "sta", "la", "apa", "oa", "isa", "aq", "ela", "sa", "da", "sha", "am", "era", "wa", "at", "el", "au", "area", "ua", "ca", "qa", "ada", "anta", "from", "ma", "ac", "acc", "ba", "ao", "ea", "af", "ta", "an", "aa", "ia", "aj", "ar", "add", "ata", "ga", "as", "ai", "ee", "aux", "alpha", "pa", "na", "va", "ana", "al", "ity", "ae", "fa"], "c": ["h", "m", "con", "ct", "cc", "cat", "f", "cr", "tc", "rc", "z", "cl", "cv", "bc", "ec", "cs", "t", "cd", "k", "cb", "ca", "ch", "cf", "cur", "cu", "uc", "ac", "acc", "\u00e7", "fc", "cons", "v", "co", "cell", "ce", "dc", "lc", "xc", "y", "unc", "ctrl", "l", "cp"], "b": ["h", "eb", "ob", "j", "BB", "binary", "ble", "bo", "br", "bl", "bi", "pb", "bf", "be", "by", "sb", "fb", "bs", "bc", "ib", "gb", "cb", "bis", "beta", "bg", "bb", "back", "bd", "ba", "db", "obj", "rb", "nb", "bp", "buff", "mb", "bin", "bar", "bt", "base", "bu", "wb"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\\n    public static void main(String[] args) throws IOException {\\n        Scanner s = new Scanner(System.in);\\n        int a = s.nextInt(),b=s.nextInt(),c=s.nextInt();\\n        if(a+b+c>=22) System.out.println(\"bust\");\\n        else System.out.println(\"win\");\\n\\n    }\\n\\n\\n\\n\\n}\\n\\n\\nclass Scanner\\n{\\n    StringTokenizer st;\\n    BufferedReader br;\\n\\n    public Scanner(InputStream s){\tbr = new BufferedReader(new InputStreamReader(s));}\\n\\n    public String next() throws IOException\\n    {\\n        while (st == null || !st.hasMoreTokens())\\n            st = new StringTokenizer(br.readLine());\\n        return st.nextToken();\\n    }\\n\\n    public int nextInt() throws IOException {return Integer.parseInt(next());}\\n\\n    public long nextLong() throws IOException {return Long.parseLong(next());}\\n\\n    public String nextLine() throws IOException {return br.readLine();}\\n\\n    public double nextDouble() throws IOException\\n    {\\n        String x = next();\\n        StringBuilder sb = new StringBuilder(\"0\");\\n        double res = 0, f = 1;\\n        boolean dec = false, neg = false;\\n        int start = 0;\\n        if(x.charAt(0) == '-')\\n        {\\n            neg = true;\\n            start++;\\n        }\\n        for(int i = start; i < x.length(); i++)\\n            if(x.charAt(i) == '.')\\n            {\\n                res = Long.parseLong(sb.toString());\\n                sb = new StringBuilder(\"0\");\\n                dec = true;\\n            }\\n            else\\n            {\\n                sb.append(x.charAt(i));\\n                if(dec)\\n                    f *= 10;\\n            }\\n        res += Long.parseLong(sb.toString()) / f;\\n        return res * (neg?-1:1);\\n    }\\n\\n    public boolean ready() throws IOException {return br.ready();}\\n\\n\\n}", "target": "129", "substitutes": {"s": ["sam", "rs", "h", "http", "sports", "ers", "sol", "its", "ats", "sa", "ies", "xs", "fs", "fps", "ss", "ings", "aws", "ims", "S", "abs", "scripts", "bs", "cs", "t", "os", "qs", "sys", "eds", "aps", "gs", "p", "ins", " streams", "ys", "ssl", "g", "less", "ms", "self", "ns", "times", "sl", "ids", "ws", "south", "sts", "ds", "ps", "stats", "als", "js", " ts", "conv", "ls", "ts", "ses", "is", "services", "es", "l", "sq"], "a": ["aaa", "aff", "\u00e4", "sta", "la", "apa", "oa", "j", "sa", "e", "aq", "eas", "r", "am", "z", "era", "t", "A", "au", "area", "ab", "ca", "ak", "ax", "ma", "ac", "ba", "ao", "ea", "aka", "ta", "an", "aa", "d", "aj", "ai", "ra", "pa", "ach", "l", "ae"], "b": ["B", "eb", "j", "bi", "r", "be", "u", "fb", "bs", "bc", "ab", "ib", "cb", "gb", "bis", "beta", "bb", "ba", "db", "rb", "nb", "d", "v", "mb", "n", "y", "reb", "l", "erb"], "c": ["h", "m", "ct", "cc", "e", "tc", "r", "z", "u", "ec", "bc", "cm", "t", "cd", "k", "cb", "ch", "ca", "cf", "cu", "ac", "p", "w", "g", "d", "v", "fc", "etc", "co", "ce", "dc", "kw", "lc", "n", "C", "l", "cp"], "st": ["ost", "h", "sta", "ct", "irst", "sth", "bl", "str", "ft", "must", "r", "cl", "nd", "inst", "sm", "t", "th", "sty", "se", "so", "ST", " ST", "pt", "std", "first", "est", "ist", "sh", "stri", "sw", "St", "mt", "ust", "sv", "sl", " St", "const", "l", " superst", "bt", "et", "sts", "sn", "tr", "sp", "fr", "rest", "stat", "ste", "rt", "stable", "ut", "nt"], "br": ["bridge", "j", "lr", "Br", "shr", "bl", "bsp", "str", "bi", "cr", "dr", "r", "bern", "ctr", "kr", "bs", "bc", "buf", "rob", "rel", "ch", "pr", "next", "bd", "bm", "hr", "rb", "bro", "bp", "bre", "jp", "or", "gr", "vr", "nl", "bt", "yr", "tr", "sp", "fr", "bh", "ber", "bn", "wr", "mr", "BR"], "x": ["act", "check", "h", "xi", "rx", "xp", "xe", "e", "xs", "ox", "r", "z", "mx", "t", "xxx", "xd", "tx", "xml", "xes", "ux", "xy", "ax", "php", "p", "xb", "nex", "xa", "ex", "sql", "w", "v", "xxxx", "xf", "xt", "xx", "ix", "xc", "inx", "y", "px", "fx", "X", "wx"], "sb": ["bps", "sam", "sbm", "eb", "arb", "ob", "sa", "sth", "stab", "ub", "pb", "bf", "fb", "bj", "stuff", "bs", "rob", "dB", "split", "lp", "zb", "kb", "cb", "gb", "ib", "umb", "lb", "soc", "bag", "storage", "sys", "bg", "bb", "sc", "ssh", "si", "sh", "rb", "sg", "nb", "sw", "bp", "ssl", "rub", "gc", "sv", "bt", "sf", "sp", "bh", "SB", "wb", "erb"], "res": ["out", "j", "rep", "r", "resp", "vals", "re", "vec", "rel", "pos", "os", "rss", "rand", "req", "result", "reg", "ref", "p", " Res", "obj", "cons", "g", "d", "RES", "results", "ms", "fin", "gr", "reed", "div", "Res", "fr", "val", "rez", "def", "conv", "rest", "pres", "js", "ret", "reset", "rev", "ress", "rem", "red", "resh"], "f": ["h", "fd", "m", "F", "e", "fs", "fm", "q", "bf", "r", "fb", "fa", "t", "k", "fe", "cf", "p", "w", "fc", "d", "v", "g", "fed", "fin", "df", "l", "n", "fr", "val", "conv", "fx", "fac", "tf", "ff"], "start": ["offset", "m", "j", "init", "it", "e", "top", "in", "t", "set", "k", "pos", "ie", "art", "before", "index", "from", "first", "started", "next", "p", "stop", "get", "g", "Start", "end", "step", "shift", "begin", "sp", "ind", "id", "y", "rest", "key", "size", "starting", "head"], "i": ["ii", "phi", "m", "xi", "me", "j", "multi", "sim", "it", "bi", "init", "ji", "hi", "e", "u", "ci", "di", "I", "mi", "gi", "index", "li", "ei", "si", "point", "pi", "ti", "v", "cli", "ij", "zi", "ui", "ms", "ini", "ic", "ai", "\u0438", "chain", "iu", "n", "ix", "ind", "ip", "y", "o", "is", "l", "qi", "ki"], "dec": ["eg", "unic", "digit", "decl", "rep", "da", "DEC", "loc", "Dec", "des", "vec", "ec", "desc", "bc", "pri", "ok", "rel", "pos", "dev", "cos", "negative", "dep", "enc", "zero", "dig", "reg", "oct", "inc", "comb", "deg", "frac", "de", "dir", "div", "deb", "def", "del", "disc", "sec", "den", "rec"], "neg": ["rot", "bit", "eg", "norm", "decl", "bo", "flag", "nov", "priv", "ko", "dest", "none", "Dec", "ec", " Neg", "desc", "rel", "pos", "und", "dev", "cos", "ne", "negative", "agg", "coll", "sign", "zero", "reg", "minus", "gen", "Neg", "oct", "no", "deg", "bin", "bad", "de", "yes", "ind", "neutral", "not", "sec", "disc", "rev", "del", "pred", "den", "rec"]}}
{"code": "import java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tstatic Scanner scanner;\\n\\n\tpublic static void main(String[] args) {\\n\t    scanner = new Scanner(System.in);\\n\\n\t    int N=gi();\\n\\n\t    int m= 1;\\n\t    \\nint i=0;\\n           while(true) {\\n        \t   if(Math.pow(2, i)<=N) {\\n        \t\t   m=(int)Math.pow(2, i);\\n        \t\t   i++;\\n        \t   }else {\\n        \t\t   break;\\n        \t   }\\n           }\\n\\n\\n\t   \\n\t    System.out.print(m);\\n\\n//        if (t.equals(\"Sunny\")) {\\n//        \tSystem.out.print(\"Cloudy\");\\n//        }else if(t.equals(\"Cloudy\")){\\n//        \tSystem.out.print(\"Rainy\");\\n//        } else {\\n//        \tSystem.out.print(\"Sunny\");\\n//        }\\n\\n\\n\t}\\n\t// \u6587\u5b57\u5217\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static String gs() {\\n\t\treturn scanner.next();\\n\t}\\n\\n\t// int\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static int gi() {\\n\t\treturn Integer.parseInt(scanner.next());\\n\t}\\n\\n\t// long\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static long gl() {\\n\t\treturn Long.parseLong(scanner.next());\\n\t}\\n\\n\t// double\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static double gd() {\\n\t\treturn Double.parseDouble(scanner.next());\\n\t}\\n}", "target": "225", "substitutes": {"scanner": ["canter", "scheter", "scher", "generifier", "generner", "Scanner", "Scanr", " scanener", "canener", "scaninner", "canifier", " scanifier", "scanifier", "generener", "generter", " scaninner", "canner", "scanener", "scanter", "Scaninner", "schener", " scanter", "scanr", " scanr", "Scanter", "scheinner"], "N": ["B", "NH", "P", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "NS", "I", "D", "W", "NB", "L", "V", "TN", "Size", "NM", "H", "Net", "NT", "NA", "T", "K", "J", "Sn", "Q", "n", "Count", "NW", "M", "R", "C", "X", "O"], "m": ["b", "h", "um", "j", "sim", "f", "dm", "r", "mx", "cm", "sm", "t", "k", "mi", "mn", "perm", "result", "mu", "p", "c", "gm", "d", "v", "a", "mem", "mt", "ms", "num", "arm", "n", "M", "mean", "mm", "y", "o", "l", "man", "mr", "mod"], "i": ["ii", "phi", "xi", "fi", "j", "sim", "multi", "it", "bi", "hi", "in", "ims", "ci", "di", "I", "mi", "info", "index", "slice", "client", "li", "p", "ei", "si", "pi", "ti", "v", "cli", "zi", "ui", "ai", "ic", "iu", "n", "ind", "id", "to", "ip", "y", "is", "ori", "im", "l", "qi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\nimport java.util.PriorityQueue;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tstatic String[] w = { \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\" };\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n\t\tString s = in.next();\\n\t\tint i = 0;\\n\t\tfor (; i < w.length; i++)\\n\t\t\tif (s.equals(w[i]))\\n\t\t\t\tbreak;\\n\t\tSystem.out.println(7 - i);\\n\t}\\n}", "target": "136", "substitutes": {"w": ["h", "words", "wo", "aw", "r", "wal", "wait", "rw", "wa", "wx", "window", "wh", "wt", "wi", "exp", "ew", "W", "up", "wall", "fw", "p", "wl", "hw", "saw", "sw", "g", "d", "v", "ww", "rew", "ws", "kw", "nw", "n", "wp", "word", "wr", "x", "weights", "wb", "we"], "in": ["out", "inf", "In", "m", "con", "isin", "kin", "char", "it", "f", "asin", " din", "r", "ln", "user", "reader", " out", "read", "IN", "this", "info", "std", "from", "log", "gin", "null", "en", "ins", "inner", "conf", "inn", "inc", "lines", "sin", "cin", "add", "input", "world", "all", "bin", "ini", "thin", "stream", "n", "err", "ind", "din", "is", "l", "rt"], "s": ["rs", "m", "h", "b", "string", "j", "str", "f", "ss", "r", "sb", "S", "gets", "t", "os", "qs", "spec", "gs", "p", "c", "space", "g", "v", "a", "less", "sv", "ms", "single", "ws", "ns", "n", "sf", "sp", "ps", "js", "ls", "ts", "is", "sq"], "i": ["ii", "phi", "m", "h", "xi", "me", "j", "multi", "sim", "it", "bi", "init", "hi", "u", "span", "ci", "yi", "t", "di", "I", "k", "mi", "gi", "index", "li", "p", "ei", "si", "c", "pi", "ex", "ti", "v", "cli", "zi", "ui", "ini", "ai", "ic", "us", "chain", "iu", "n", "ix", "ind", "id", "ip", "y", "cgi", "o", "is", "key", "x", "l", "qi", "ki"]}}
{"code": "\\nimport java.util.*;\\n\\nclass Main {\\n\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int a = in.nextInt();\\n        int b = in.nextInt();\\n        int c = in.nextInt();\\n        if (a >= 1 && a <= 13 && b >= 1 && b <= 13 && c >= 1 && c <= 13) {\\n            if ((a + b + c) >= 22) {\\n                System.out.println(\"bust\");\\n            } else {\\n                System.out.println(\"win\");\\n            }\\n        }\\n    }\\n}\\n", "target": "129", "substitutes": {"in": ["serv", "out", "inf", "In", "check", "con", "isin", "i", "init", "doc", " din", "r", "file", "user", "by", "rin", "reader", "window", "k", "IN", "info", "std", "on", "from", "line", "conn", "log", "gin", "ma", "null", "en", "client", "gen", "ins", "inner", "conf", "inn", "inc", "get", "cin", "end", "io", "add", "input", "all", "bin", "ini", "as", "thin", "stream", "state", "or", "scan", "n", "err", "ind", "mm", "din", "cgi", "is", "sum", "l", "rt"], "a": ["aaa", "act", "aff", "sta", "la", "apa", "oa", "isa", "sa", "i", "aq", "eas", "ama", "da", "am", "era", "at", "A", "au", "area", " A", "ab", "ca", "ak", "ax", "ma", "app", "ac", "ba", "ao", "ea", "af", "ta", "an", "aa", "d", "ia", "aj", "ga", "ai", "as", "access", "alpha", "va", "ach", "al", "ae"], "b": ["B", "eb", "ob", "j", "br", "i", "ub", "bi", "f", "bl", "bf", "r", "be", "sb", "u", "fb", "bs", "bc", "lib", "ab", "zb", "ib", "cb", "gb", "bis", "beta", "bas", "bb", "p", "ba", "db", "rb", "nb", "d", "v", "mb", "bp", "bar", "bu", "n", " B", "y", "l", "wb", "job", "erb"], "c": ["h", "ct", "con", "can", "cc", "e", "f", "cache", "cr", "tc", "rc", "r", "u", "ci", "cm", "cs", "ec", "t", "cd", "com", "bc", "cos", "cb", "ch", "pc", "ca", "cf", "cu", "uc", "ac", "mc", "fc", "d", "v", "arc", "etc", "cor", "co", "chain", "ce", "dc", "div", "n", "lc", "unc", "C", "anc", "l", "cp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main\\n{\\n    public static void main(String[] args)\\n    {\\n        Scanner s = new Scanner(System.in);\\n        int n = s.nextInt();\\n        int[] a = new int[n];\\n        int c = 0;\\n        for(int i=0; i<n; i++)\\n        {\\n            a[i] = s.nextInt();\\n            if(a[i]%2==0)\\n                c++;\\n        }\\n        int ch=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(a[i]%2==0)\\n            {\\n                if(a[i]%3==0||a[i]%5==0)\\n                {\\n                    ch++;\\n                }\\n            }\\n        }\\n        if(ch==c)\\n        {\\n            System.out.println(\"APPROVED\");\\n        }\\n        else System.out.println(\"DENIED\");\\n        }\\n    }", "target": "113", "substitutes": {"s": ["hs", "sam", "rs", "b", "h", "sol", "ats", "sa", "fs", "ss", "S", "sb", "r", "abs", "gets", "cs", "sm", "se", "so", "bis", "sys", "sc", "gs", "p", "sh", "ins", "sw", "ssl", "v", "less", "sv", "ms", "ws", "sl", "ns", "search", "as", "south", "sts", "ds", "ps", "js", "ts", "ses", "is", "ls", "es", "l", "sq"], "n": ["ng", "m", "j", "nan", "nn", "net", "number", "fn", "r", "t", "k", "ne", "mn", "network", "ll", "nm", "en", "p", "np", "nc", "len", "nor", "N", "count", "an", "and", "nb", "g", "v", "no", "nu", "name", "all", " N", "ns", "num", "nl", "sn", "na", "o", "size", "cn", "l", "nt"], "a": ["aaa", "act", "aff", "b", "sta", "apa", "la", "oa", "ap", "sa", "eas", "f", "da", "am", "arr", "era", "A", "au", "history", "area", "att", "ab", "ca", "ma", "app", "ac", "p", "ba", "ao", "ea", "ta", "an", "array", "aa", "ack", "ia", "ar", "ata", "ga", "all", "as", "ai", "aux", "ce", "alpha", "na", "va", "ae", "fa"], "c": ["out", "b", "m", "h", "ct", "con", "can", "cc", "e", "cache", "tc", "cr", "rc", "r", "cl", "z", "u", "ci", "cm", "cs", "ec", "t", "cont", "com", "cd", "k", "cb", "ca", "cf", "cur", "cu", "sc", "p", "nc", "conf", "count", "cut", "d", "v", "ic", "cor", "num", "co", "ce", "lc", "o", "C", "cn", "cod", "l", "cp"], "i": ["ji", "hi", "q", "in", "iti", "ci", "history", "mi", "php", "list", "li", "v", "my", "ij", "ui", "ini", "ai", "err", "ix", "multi", "bi", "progress", "iy", "ei", "print", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "fi", "init", "details", "fire", "di", "info", "gi", "si", "ti", "io", "\u0438", "ind", "to", "ip", "PI", "ori", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "I", "this", "ie", "client", "point", "iter", "ic", "iu", "base", "is", "key", "oi", "batch"], "ch": ["out", "b", "h", "tch", "ct", "j", "ech", "Ch", "br", "cr", "ich", "z", "cl", "ci", "change", "cs", "cm", "t", "cd", "th", "chan", "cho", "zh", "cb", "cf", "cur", "cu", "conn", "ck", "CH", "sc", "client", "p", "sh", "conf", "count", "ih", "v", "ic", "cor", "co", "ce", "y", "ach", "x", "sch", "cp"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    //SUN,MON,TUE,WED,THU,FRI,SAT\\n    String[] week = {\"\",\"SAT\",\"FRI\",\"THU\",\"WED\",\"TUE\",\"MON\",\"SUN\"};\\n    for(int i=0;i<8;i++){\\n      if(week[i].equals(s))System.out.println(i);\\n    }\\n  }\\n}", "target": "136", "substitutes": {"sc": ["system", "cc", "cle", "cr", "capt", "ss", "rc", "cl", "bc", "cs", "sm", "sac", "desc", "esc", "ec", "sync", "Sc", "isc", "pc", "osc", "ch", "soc", "sys", "mc", "c", "nc", "SC", "sw", "gc", "sche", "sv", "lc", "scan", "sp", "asc", "sch", "sec", "anc", "usc", "sq"], "s": ["rs", "b", "m", " ss", "string", "str", "fs", "ss", "r", "S", "set", "p", "c", "lines", "res", "v", "strings", "name", "sv", "results", "ms", "ns", "ids", "n", "y", "ls", "es"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.List;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception{\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\\n\t\tString s = br.readLine();\\n\t\tList<Integer> l = new ArrayList<>();\\n\t\tfor(int i=0;i<s.length();i++)\\n\t\t{\\n\t\t\tif(s.charAt(i) == '0')\\n\t\t\t\tl.add(0);\\n\t\t\telse if(s.charAt(i) == '1')\\n\t\t\t\tl.add(1);\\n\t\t\telse\\n\t\t\t{\\n\t\t\t\tif(!l.isEmpty())\\n\t\t\t\t\tl.remove(l.size()-1);\\n\t\t\t}\\n\t\t}\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tfor(int i: l)\\n\t\t\tsb.append(i);\\n\t\tSystem.out.println(sb);\\n\t}\\n\\n}\\n", "target": "151", "substitutes": {"br": ["bridge", "lr", "Br", "bl", "str", "bi", "cr", "bf", "dr", "be", "kr", "bs", "bc", "buf", "rel", "ab", "pl", "ch", "pr", "bg", "er", "bd", "bm", "hr", "db", "rb", "sr", "bp", "bro", "gr", "vr", "bt", "yr", "div", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "mr", "BR"], "s": ["rs", "b", "m", "sol", "its", "ats", "str", "xs", "ss", "r", "S", "gets", "abs", "bs", "t", "os", "so", "qs", "sys", "spec", "gs", "p", "c", "sql", "sw", "st", "v", "less", "strings", "sv", "ms", "ws", "sl", "ns", "n", "sf", "sts", "sp", "tes", "ps", "ds", "js", "conv", "ls", "ts", "is", "source", "es", "sq"], "l": ["fl", "b", "lr", "lu", "il", "tl", "lo", "lis", "rl", "ml", "ln", "cl", "z", "r", "el", "ld", "els", "lp", "pl", "isl", "L", "lb", "ll", "log", "list", "li", "p", "ol", "kl", "lit", "jl", "le", "g", "v", "acl", "left", "all", "sl", "lv", "hl", "nl", "lc", "n", "lt", "dl", "ls", "ell", "al", "lam", "lists", "dL"], "i": ["ii", "phi", "m", "b", "xi", "j", "sim", "multi", "ri", "it", "bi", "ji", "init", "hi", "ims", "in", "u", "yi", "ci", "t", "di", "I", "mi", "exp", "series", "info", "gi", "index", "ni", "li", "ei", "si", "c", "point", "status", "ski", "print", "pi", "remote", "iq", "ti", "sql", "v", "io", "cli", "my", "ij", "zi", "ui", "iri", "ini", "ic", "ai", "\u0438", "chain", "iu", "ix", "ind", "id", "to", "ip", "y", "o", "is", "uri", "x", "im", "ori", "oi", "ami", "qi", "ki"], "sb": ["b", "sbm", "eb", "ob", "bsp", "sth", "sa", "ub", "pb", "fb", "bj", "bs", "rob", "zb", "kb", "abb", "gb", "ab", "cb", "lb", "ib", "bg", "bb", "bd", "xb", "sh", "db", "rb", "gc", "nb", "sg", "ssl", "mb", "sv", "bt", "sf", "deb", "bh", "SB", "wb", "sq", "erb"]}}
{"code": "//import java.util.*;\\nimport java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner scn = new Scanner(System.in);\\n        char[] a = scn.next().toCharArray();\\n        int n = a.length;\\n        int hug = 0;\\n        int limit = n/2 ;\\n        for(int i = 0; i < n; i++) {\\n          \\n\t\t\tif ( i >= limit ){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tif(a[i] != a[n-i-1]){\\n\t\t\t\t//i = 0;\\n\t\t\t\t//a[n-i-1] = a[i];\\n\t\t\t\thug = hug + 1;\\n\t\t\t}\\n          \\n        }\\n\\n\t\t System.out.println(Integer.toString(hug));\\n\\n    }\\n}", "target": "115", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\n/**\\n * @author kawakami\\n *\\n */\\nclass Main {\\n\\n\t/**\\n\t * @param args\\n\t */\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner as = new Scanner(System.in);\\n\t\t\\n\t\tint n=as.nextInt();\\n\t\tlong tr,min,max,sum;\\n\t\tint j = 0,k = 0;\\n\t\tlong jug[] = new long[n];\\n\t\t\\n\t\t\\n\t\t\\n\t\tjug[0]=as.nextInt();\\n\t\t//System.out.println(\"test3 \"+jug[0]);\\n\t\tmax=jug[0];\\n\t\tmin=jug[0];\\n\t\tsum=jug[0];\\n\t\t\\n\t\t\\n\t\tfor(int i=1;i<n;i++){\\n\t\t\t//System.out.println(\"test4\");\\n\t\t\tjug[i]=as.nextInt();\\n\t\t\tsum=sum+jug[i];\\n\t\t\t//System.out.println(sum+\" test1 \"+jug[i]);\\n\t\t}\\n\t\twhile(j!=1){\\n\t\t\tj=1;\\n\t\t\t//System.out.println(\"test2\");\\n\t\t\tfor(k = 0;k<n-1;k++){\\n\t\t\t\t\\n\t\t\t\tif(jug[k]>jug[k+1]){\\n\t\t\t\t\ttr=jug[k];\\n\t\t\t\t\tjug[k]=jug[k+1];\\n\t\t\t\t\tjug[k+1]=tr;\\n\t\t\t\t\tj=0;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t\\n\t\t\t\\n\t\t}\\n\t\tSystem.out.println(jug[0]+\" \"+jug[k]+\" \"+sum);\\n\\n\t}\\n\\n}", "target": "21", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int K = sc.nextInt();\\n        int S = sc.nextInt();\\n        int total = 0;\\n        for(int i = 0;i <= K;i++){\\n            for(int j = 0;j <= K;j++){\\n                    int last = S - i - j;\\n                    if(last >= 0 && last <= K) total++;\\n            }\\n        }\\n        System.out.println(total);\\n    }\\n}\\n", "target": "29", "substitutes": {"sc": ["system", "sk", "cc", "cle", "cr", "tc", "ss", "rc", "cl", "sb", "bc", "cs", "cont", "esc", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "acc", "SC", "sw", "gc", "inc", "ctx", "sv", "screen", "scope", "dc", "scan", "lc", "sp", "asc", "conv", "ctrl", "sch", "sec", "anc", "usc", "sq"], "K": ["B", "KA", "E", "P", "F", "KI", "UK", "KE", "SK", "G", "KB", "I", "k", "Key", "IN", "L", "V", "KS", "H", "N", "KN", "Y", "T", "J", "KING", "Q", "M", "R", "KK", "C", "KC", "Z", "KR", "X", "PK", "VK"], "S": ["B", "P", "F", "s", "SK", "G", "CS", "I", "A", "D", "L", "SA", "V", "SE", "SI", "SP", "H", "N", "SC", "Y", "T", "Si", "J", "SU", "Q", "SS", "U", "M", "R", "C", "Z", "X", "JS"], "total": ["done", "current", "check", "successful", "system", "sequence", "square", "full", "number", "otal", "checked", "goal", "t", "empty", "set", "available", "complete", "human", "free", "black", "json", "unknown", "result", "counter", "significant", "list", "failed", "note", "count", "Total", "seen", "trace", "scale", "created", "normal", "OTAL", "no", "serial", "all", "eta", "open", "percent", "used", "unique", "non", "pdf", "valid", "max", "not", "sum", "global", "reported", "general", "quant"], "i": ["ii", "phi", "m", "xi", "inter", "sim", "multi", "ri", "it", "bi", "ji", "f", "hi", "ims", "ci", "di", "I", "k", "mi", "ie", "gi", "ni", "li", "p", "ei", "si", "pi", "iq", "ti", "v", "iri", "ij", "zi", "ui", "ini", "ai", "ic", "us", "iu", "ix", "ip", "y", "is", "asi", "im", "ori", "x", "l", "ami", "qi", "ki"], "j": ["oj", "b", "m", "ja", "br", "it", "ji", "bi", "jj", "jc", "f", "q", "z", "uj", "bj", "bs", "el", "ph", "k", "jump", "rel", "son", "ne", "json", "pt", "pr", "index", "kj", "li", "next", "p", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "dj", "J", "jas", "l", "n", "ind", "fr", "js", "key", "x", "ion", "err", "job", "ge"], "last": ["prev", "extra", "show", "sequence", "after", "str", "alias", "sha", "full", "da", "dest", "right", "nd", "checked", "ast", "this", "bottom", "start", "first", "list", "next", "est", "since", "slave", "latest", "local", "tail", "st", "style", "end", "no", "left", "chain", "length", "l", "base", "unique", "las", "max", "old", "size", "global", "Last", "stable", "master"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) throws IOException {\\n\t\ttry (BufferedReader br = new BufferedReader(\\n\t\t\t\tnew InputStreamReader(System.in))) {\\n\\n\t\t\tString in = br.readLine();\\n\t\t\tString[] day = {\"SAT\",\"FRI\",\"THU\",\"WED\",\"TUE\",\"MON\",\"SUN\"};\\n\t\t\tfor(int i = 0; i < day.length; i++) {\\n\t\t\t\tif(in.equals(day[i])) {\\n\t\t\t\t\tSystem.out.println(i+1);\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "136", "substitutes": {"in": ["out", "inf", "In", "check", "string", "con", "isin", "s", "doc", "f", "str", "r", "file", "user", "ln", "rin", "reader", "t", " out", "IN", "info", "std", "from", "line", "gin", "date", "p", "print", "ins", "inner", "conf", "inn", "lines", "and", "cin", "name", "input", "world", "all", "bin", "ini", "stream", "n", "nin", "id", "din", "o", "sum", "err", "rt"], "day": ["range", "Day", "month", "year", "decl", "DAY", "daily", "event", "nd", "member", "time", "window", "hour", "row", "dd", "desc", "diff", "night", "wall", "date", "ay", "ward", "box", "\u5929", "form", "band", "and", "zone", "cal", "d", " Day", "side", "no", "block", "swing", "week", "type", "days", "de", "piece", "today", "word", "cond", "pattern", "def", "work", "who", "key"], "i": ["ii", "m", "xi", "me", "j", "multi", "sim", "init", "it", "bi", "ji", "hi", "q", "u", "span", "ci", "iy", "yi", "di", "I", "mi", "gi", "index", "li", "ei", "si", "point", "pi", "iq", "ti", "v", "io", "my", "cli", "ij", "zi", "ui", "ini", "ic", "ai", "chain", "n", "ind", "ix", "id", "y", "cgi", "is", "key", "x", "uri", "oi", "uni", "batch", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tString s = sc.next();\\n\\n\t\tint pre = s.length();\\n\t\ts = s.replace(\"ABC\", \"\");\\n\t\tint post = s.length();\\n\\n\t\tSystem.out.println((pre - post) / 3);\\n\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "110", "substitutes": {"sc": ["tch", "cc", "cle", "tc", "cr", "capt", "rc", "ko", "cl", "bc", "cs", "ec", "ok", "desc", "esc", "sync", "Sc", "ctl", "isc", "osc", "pc", "ch", "cu", "uc", "sys", "ck", "psc", "mc", "scl", "c", "nc", "sh", "SC", "gc", "inc", "sr", "fc", "arc", "sv", "lc", "scan", "sp", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "n": ["m", "j", "i", "nn", "fn", "ln", "t", "pos", "ne", "mn", "nm", "p", "en", "nc", "c", "np", "N", "count", "nb", "d", "nu", "ns", "nl", "l", "sn", "cn", "nr", "nt"], "s": ["rs", "b", "h", "m", "string", "j", "ats", "i", "str", "f", "ss", "full", "q", "ims", "r", "S", "sb", "abs", "bs", "cs", "t", "se", "qs", "sys", "gs", "p", "c", "space", "sql", "sw", "w", "g", "v", "strings", "sv", "ms", "ws", "sl", "ns", "state", "sts", "sf", "sp", "tes", "ps", "stats", "js", "y", "ts", "ls", "is", "conv", "es", "l", "sq"], "pre": ["prev", "per", "current", "inter", "j", "pe", "ble", "rep", "pan", "par", "re", "prep", "min", "pri", "rel", "py", "before", "ne", "PRE", "li", "ref", "p", "tp", "len", "prefix", "pi", "le", "get", "sp", "ps", "pret", "pro", "pres", "Pre", "gre", "pp"], "post": ["posts", "ty", "ost", "pad", "rep", "after", "posted", "des", "desc", "set", "row", "dd", "ld", "rel", "exp", "proc", "level", "back", "next", "p", "ptr", "POST", "ad", "draw", "obs", "end", "add", "Post", "length", "wp", "now", "ps", "cond", "def", "mm", "pres", "fx", "pp", "pg", "mod"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\npublic static void main(String[] args){\\nScanner scan=new Scanner(System.in);\\nString str = scan.next();\\n  \\n String[] num=str.split(\"\");\\n  \\n  int i=0;\\n  int sum=0;\\n  for(i=0;i<(num.length)/2;i++){\\n  if(num[i].equals(num[num.length-1-i])){\\n  sum=sum+1;\\n  }\\n  }\\n  System.out.println((num.length/2)-sum);\\n  \\n}\\n}", "target": "115", "substitutes": {"scan": ["save", "out", "san", "check", "con", "system", "can", "skip", "Scan", "run", "pass", "in", "r", "by", "re", "scroll", "sm", "set", "nav", "read", "sync", "connect", "se", " Scan", "ch", "seek", "sys", "reach", "sc", "ner", "query", "match", "send", "gate", "parse", "an", "sin", "g", "scale", "get", "auto", "sv", "search", "n", "ser", "stat", "find"], "str": ["out", "m", "msg", "string", "s", "STR", "br", "char", "seq", "f", "r", "dr", "arr", "Str", "t", "coll", "list", "vol", "p", "spec", "oct", "print", "obj", "parse", "data", "txt", "iter", "g", "st", "v", "name", "sl", "gr", "text", "div", "n", "tr", "sp", "fr", "sec"], "num": ["sam", "mat", "tu", "um", "out", "norm", "con", "img", "mon", "multi", "test", "cache", "Num", "number", "net", "tim", "prim", "NUM", "mn", "nam", "zero", "cu", "nm", "mu", "ord", "en", "np", "code", "note", "su", "form", "obj", "txt", "cal", "dim", "nu", "no", "buff", "mem", "block", "text", "div", "n", "dat", "snap", "na", "cmp", "ver", "hex", "conv", "alph", "one", "nom", "rem", "nt"], "i": ["ii", "phi", "m", "um", "xi", "gu", "j", "multi", "sim", "ri", "it", "bi", "init", "hi", "in", "ci", "set", "t", "I", "di", "mi", "ie", "gi", "index", "li", "p", "ei", "si", "c", "pi", "ex", "ti", "v", "io", "my", "cli", "zi", "ui", "ini", "ai", "ic", "\u0438", "chain", "l", "ish", "iu", "n", "ind", "ix", "ip", "y", "o", "is", "uri", "x", "asi", "im", "ori", "batch", "qi", "ki"], "sum": ["sam", "out", "um", "multi", "sim", "sa", "doc", "ul", "must", "ass", "temp", "sort", "set", "dev", "diff", "black", "med", "result", "zero", "index", "list", "ash", "SI", "si", "match", "umm", "su", "ot", "acc", "score", "count", "cum", "summary", "dim", "v", "add", "total", "scale", "mem", "all", "SU", "weight", "us", "length", "average", "n", "Sum", "mary", "cmp", "mean", "stick", "max", "size", "hash", "mod"]}}
{"code": "\\n\\n\\n\\n\\n\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Scanner;\\nimport java.util.Set;\\n\\n\\n\\npublic class Main{\\n\t\\n\t//\u6700\u5927\u516c\u7d04\u6570\u30fb\u6700\u5c0f\u516c\u500d\u6570\uff08\u30bb\u30c3\u30c8\u3067\u4f7f\u3046\uff09\\n\tpublic static long gcm(long a, long b) {\\n\t\tlong result = a;\\n\t\tlong k = 0;\\n\t\tlong n = b;\\n\t\tdo {\\n\t\t\tk = result % n;\\n\t\t\tresult = n;\\n\t\t\tn = k;\\n\t\t} while(k != 0);\\n\t\treturn result;\\n\t}\\n\t\\n\tpublic static long lcm(long a, long b) {\\n\t\tlong g;\\n\t\tg = gcm(a, b);\\n\t\treturn a/g*b;\\n\t}\\n\t\\n\tstatic long gcd (long a, long b) {\\n\t\tlong temp;\\n\t\twhile((temp = a%b)!=0) {\\n\t\t\ta = b;\\n\t\t\tb = temp;\\n\t\t}\\n\t\treturn b;\\n\t}\\n\t\\n\t//\u7b49\u5dee\u6570\u5217\\n\tstatic long tousasum(int n) {\\n\t\treturn (long)n*((long)n+1)/2;\\n\t}\\n\\n\\n\\n\t//\u7d20\u6570\u5224\u5b9a\\n\tstatic boolean isPrime (int n) {\\n\t\tif (n==2) return true;\\n\t\tif (n<2 || n%2==0) return false;\\n\t\tdouble d = Math.sqrt(n);\\n\t\tfor (int i=3; i<=d; i+=2) if(n%i==0){return false;}\\n\t\treturn true;\\n\t}\\n\\n\\n\t//\u500d\u6570\u5224\u5b9a\uff0810\u9032\u6570\u4ee5\u5916\u306e\u3068\u304d\u306b\u6709\u7528\uff09\\n\tstatic boolean isMultiple (String s, int base, int m) {\\n\t\tint temp = 0;\\n\t\tfor (int i=0; i<s.length(); i++) {\\n\t\t\ttemp = (temp*base+Character.getNumericValue(s.charAt(i)))%m;\\n\t\t}\\n\t\tif (temp==0) {return true;}\\n\t\treturn false;\\n\t}\\n\\n\\n\t//\u968e\u4e57\\n\tstatic long factorial (int i) {\\n\t\tif (i==1) {return 1;}\\n\t\telse {return i*factorial(i-1);}\\n\t}\\n\\n\\n\t//\u9032\u6570\u5909\u63db\\n\tstatic String toNbase (String sm, int m, int n) {\\n\t\treturn Long.toString(Long.parseLong(sm,m),n);\\n\t}\\n\t\\n\tpublic static final long gcd_n(long[] param) {\\n\t    final int len = param.length;\\n\t    long g = gcd(param[0], param[1]);    //gcd(a, b) \u306f\u4ee5\u524d\u4f5c\u3063\u305f\u3082\u306e\\n\t    for (int i = 1; i < len - 1; i++) {\\n\t        g = gcd(g, param[i + 1]);       //gcd(a, b) \u306f\u4ee5\u524d\u4f5c\u3063\u305f\u3082\u306e\\n\t    }\\n\t    return g;\\n\t}\\n\t\\n\tpublic static long lcm_n(long[] numbers) {\\n\t\tlong l;\\n\t\tl = numbers[0];\\n\t\tfor (int i = 1; i < numbers.length; i++) {\\n\t\t\tl = lcm(l, numbers[i]);\\n\t\t}\\n\t\treturn l;\\n\t}\\n\t\\n\t\\n public static void main(String[] args) {\\n\t Scanner sc=new Scanner(System.in);\\n\t int N=sc.nextInt();\\n\t String[] s=new String[N];\\n\t Map<String,Integer> mp=new HashMap();\\n\t for(int i=0;i<N;i++) {\\n\t\t String temp=sc.next();\\n\t\t char[] tmp=temp.toCharArray();\\n\t\t Arrays.sort(tmp);\\n\t\t s[i]=String.valueOf(tmp);\\n\t\t if(mp.containsKey(s[i])) {\\n\t\t\t mp.put(s[i],mp.get(s[i])+1);\\n\t\t }else {\\n\t\t\t mp.put(s[i],0);\\n\t\t }\\n\t\t \\n\t\t \\n\t }\\n\t long result = 0;\\n\t \\n\t for(Integer val : mp.values()){\\n\t     result+=tousasum(val);\\n\t }\\n\t \\n\t System.out.println(result);\\n\t \\n\t \\n\t \\n\t\\n\t \\n\\n\t \\n\t \\n\t \\n\t \\n\t \\n\t \\n\t\\n\t \\n\t \\n\t \\n }\\n\t\\n\\n\\n}\\n", "target": "32", "substitutes": {}}
{"code": "import java.util.*;\\n\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int i = 1;\\n    long rtn = 0;\\n\\n    while (i <= n) {\\n      if (i % 3 == 0 || i % 5 == 0){\\n        i++;\\n      } else {\\n        rtn += i;\\n        i++;\\n      }\\n    }\\n    System.out.println(rtn);\\n  }\\n}", "target": "55", "substitutes": {"sc": ["ng", "out", "system", "cc", "cle", "Scan", "tc", "cr", "ss", "capt", "rc", "cl", "sb", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "ch", "pc", "isc", "osc", "uc", "sys", "mc", "scl", "c", "nc", "SC", "gc", "sw", "sv", "screen", "lc", "scan", "sp", "sel", "ser", "asc", "conv", "sch", "sec", "usc", "sq"], "n": ["ng", "m", "j", "nn", "number", "net", "ln", "t", "mn", "ni", "nat", "nm", "en", "p", "np", "gn", "nc", "c", "N", "nb", "g", "d", "w", "nu", "ns", "num", "nl", "l", "sn", "nw", "na", "cn", "nr", "nt"], "i": ["ii", "phi", "out", "m", "xi", "j", "multi", "it", "bi", "hi", "in", "ims", "yi", "ci", "t", "di", "I", "k", "mi", "info", "gi", "index", "ni", "client", "mu", "li", "list", "si", "ei", "status", "pi", " ii", "ti", "io", "cli", "ij", "ui", "ini", "ai", "num", "us", "ic", "chain", "iu", " I", "ix", "ind", "id", "to", "ip", "conv", "is", "x", "oi", "l", "qi", "ki"], "rtn": ["rdN", "rdln", "rotn", "otne", "otr", "rdt", "RTns", "wtn", "ttn", "rdne", "wtns", "RTtn", "RTn", "wttn", "otn", "otN", "rhln", "rotN", "ott", "ttt", "rtt", "rtr", "rdr", "rtln", "ttN", "rttn", "RTN", "rotns", "rhn", "rtne", "otln", "rhN", "rtns", "rottn", "rdn", "rhne", "ttr", "wtN", "rtN"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t// TODO Auto-generated method stub\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString line = br.readLine();\\n\t\tfor (char c : line.toCharArray()) {\\n\t\t\tif (Character.isLowerCase(c)) {\\n\t\t\t\tSystem.out.print(Character.toUpperCase(c));\\n\t\t\t} else {\\n\t\t\t\tSystem.out.print(Character.toLowerCase(c));\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n\\n}", "target": "192", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception{\\n\t\tScanner br = new Scanner(System.in);\\n\t\tint x;\\n\t\tint y;\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\twhile (true){\\n\t\t\tx = br.nextInt();\\n\t\t\ty = br.nextInt();\\n\t\t\tif (x == 0&&y==0){\\n\t\t\t\tbreak;\\n\t\t\t} else if (x<y){\\n\t\t\t\tsb.append(x).append(\" \").append(y).append(\"\\n\");\\n\t\t\t} else {\\n\t\t\t\tsb.append(y).append(\" \").append(x).append(\"\\n\");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.print(sb);\\n\t}\\n}", "target": "72", "substitutes": {"br": ["bridge", "b", "j", "Br", "bl", "bi", "str", "cr", "bf", "r", "dr", "ctr", "kr", "bs", "bc", "buf", "nav", "cb", "gb", "ch", "pr", "prot", "ner", "bd", "next", "bm", "hr", "db", "obj", "rb", "obl", "sr", "res", "bp", "bro", "jp", "sv", "gr", "handle", "bt", "tr", "sp", "fr", "bh", "bn", "ber", "js", "wr", "browser", "nr", "mr", "BR"], "x": ["act", "m", "h", "xi", "rx", "ct", "xp", "pe", "xe", "true", "i", "e", "xs", "f", "dx", "ox", "zx", "mx", "time", "at", "t", "el", "xd", "xxx", "tx", "ie", "xml", "cf", "index", "xy", "ax", "ex", "w", "lex", "d", "yx", "xxxx", "xf", "xx", "xt", "ix", "xc", "id", "px", "key", "fx", "im", "l", "X", "wx"], "y": ["ony", "any", "ty", "b", "m", "uy", "yer", "fy", "j", "sim", "ny", "axy", "i", "ies", "ery", "ye", "ya", "z", "by", "yt", "yi", "iy", "oy", "t", "py", "vy", "ch", "sky", "xy", "sys", "er", "ym", "ay", "p", "gy", "ot", "dy", "v", "no", "Y", "my", "ey", "cy", "story", "type", "ky", "yy", "hot", "sy", "n", "iny", "icy", "ry", "ly", "o", "ip", "key"], "sb": ["bps", "gob", "b", "sbm", "eb", "ob", "sk", "bsp", "sth", "stab", "ub", "sa", "pb", "bf", "bj", "bs", "rob", "lp", "zb", "kb", "abb", "gb", "ib", "umb", "bis", "cb", "lb", "bg", "bb", "bd", "xb", "sql", "rb", "sg", "nb", "ssl", "mb", "kB", "bt", "sn", "sf", "obb", "sp", "bh", "bn", "SB", "orb", "sq", "erb"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        FastScanner fs = new FastScanner();\\n        char[] s = fs.next().toCharArray();\\n        int res = 0;\\n        int left = 0;\\n        int right = s.length-1;\\n        while(left<=right){\\n            if(s[left]!=s[right])res++;\\n            left++;\\n            right--;\\n        }\\n        System.out.println(res);\\n    }\\n    static class FastScanner{\\n        private final InputStream in = System.in;\\n        private final byte[] buffer = new byte[1024];\\n        private int ptr = 0;\\n        private int buflen = 0;\\n\\n        private boolean hasNextByte(){\\n            if(ptr < buflen){\\n                return true;\\n            }else{\\n                ptr = 0;\\n                try{\\n                    buflen = in.read(buffer);\\n                }catch(IOException e){\\n                    e.printStackTrace();\\n                }\\n                if(buflen <= 0){\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n\\n        private int readByte(){\\n            if(hasNextByte())return buffer[ptr++];\\n            else return -1;\\n        }\\n\\n        private boolean isPrintableChar(int c){\\n            return 33<=c && c<=126;\\n        }\\n\\n        public boolean hasNext(){\\n            while(hasNextByte() && !isPrintableChar(buffer[ptr]))ptr++;\\n            return hasNextByte();\\n        }\\n\\n        public String next(){\\n            if(!hasNext()) throw new NoSuchElementException();\\n            StringBuilder sb = new StringBuilder();\\n            int b = readByte();\\n            while(isPrintableChar(b)){\\n                sb.appendCodePoint(b);\\n                b = readByte();\\n            }\\n            return sb.toString();\\n        }\\n\\n        public long nextLong(){\\n            if(!hasNext()) throw new NoSuchElementException();\\n            long n = 0;\\n            boolean minus = false;\\n            int b = readByte();\\n            if(b == '-'){\\n                minus = true;\\n                b = readByte();\\n            }\\n            if(b < '0' || '9' < b){\\n                throw new NumberFormatException();\\n            }\\n            while(true){\\n                if('0' <= b && b<='9'){\\n                    n*=10;\\n                    n+=b-'0';\\n                }else if(b==-1 || !isPrintableChar(b)){\\n                    return minus ? -n : n;\\n                }else{\\n                    throw new NumberFormatException();\\n                }\\n                b = readByte();\\n            }\\n        }\\n        public int nextInt(){\\n            long nl = nextLong();\\n            if(nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)throw new NumberFormatException();\\n            return (int)nl;\\n        }\\n        public double nextDouble(){return Double.parseDouble(next());}\\n    }\\n}", "target": "115", "substitutes": {"fs": ["hs", "vs", "rs", "FS", "ats", "xs", "f", "fps", "ss", "uds", "bf", "irs", "ims", "gets", "bs", "cs", "rys", "os", "cf", "qs", "sys", "fw", "gs", "Fs", "ks", "gc", "fc", "fts", "ms", "ws", "ns", "ours", "sf", "eks", "ps", "ts", "ls", "mr"], "s": ["bytes", "hs", "rs", "h", "its", "ats", "e", "xs", "aws", "ss", "ims", "S", "r", "bs", "cs", "sm", "os", "qs", "ashes", "gs", "p", "ins", "items", "strings", "sv", "ms", "ws", "ns", "ids", "south", "sts", "tes", "ps", "ds", "services", "js", "ts", "ses", "ls", "is", "sq"], "res": ["rs", "out", "con", "mask", "progress", "success", "resolution", "rc", "resp", "r", "arr", "re", "des", "cs", "row", "rel", "resource", "req", "rev", "result", "zero", "conn", "resources", "ins", "obj", "ex", "cons", "RES", "results", "ms", "rights", "us", "err", "Res", "val", "rest", "pres", "ret", "reset", "red", "ress", "rem"], "left": ["range", "label", "out", "offset", "m", "term", "wrong", "j", "low", "lower", "lo", "progress", "net", "loc", "top", "r", "min", "row", "el", "cont", "rel", "pos", "lock", "L", "Left", "start", "ll", "from", "off", "list", "len", "p", " l", "quick", "inner", "local", "le", "end", "pointer", "all", "shift", "down", "length", "south", "tr", "ind", "lt", "rest", "x", "size", "old", "l", "rem"], "right": ["range", "rows", "third", "out", "wrong", "rx", "after", "ren", "full", "rc", "top", "r", "mid", "re", "rw", "reverse", "row", "cross", "rel", "padding", "Right", "tx", "th", "before", "lat", "recent", "back", "ro", "remote", "correct", "inner", "rh", "radius", "then", "root", "w", "end", "rew", "rights", "self", "shift", "length", "west", "tr", "roll", "rest", "max", "red", "rem", "rt", "head"], "in": ["out", "inf", "In", "m", "con", "isin", "i", "it", "lin", "f", "run", "init", "asin", "r", "rin", "t", "mi", "IN", "info", "pc", "on", "log", "ac", "p", "mc", "ins", "inner", "conf", "inn", "inc", "get", "cin", "io", "ar", "input", "all", "bin", "ini", "ic", "as", "us", "stream", "err", "ind", "val", "to", "mm", "din", "o", "is", "l", "win"], "buffer": ["paste", "queue", "store", "message", "page", "library", "binary", "blank", "password", "address", "sequence", "value", "command", "cache", "bone", "face", "temp", "window", "buf", "history", "button", "sync", "read", "limit", "stack", "result", "variable", "index", "p", "code", "template", "document", "db", "iter", "buff", "seed", "output", "mem", "memory", "pointer", "screen", "stream", "bar", "length", "display", "base", "phrase", "table", "device", "Buffer", "source", "database", "batch", "header"], "ptr": ["pointers", "offset", "inter", "pad", "address", "addr", "br", "loc", "dr", "ctr", "arr", "rob", "row", "rel", "pers", "pos", "th", "pl", "req", "dep", "pt", "pc", "Ptr", "pert", "pr", "index", "prot", "tip", "proc", "prime", "dig", "next", "tp", "p", "ref", "np", "point", "pi", "iter", "trace", "ctx", "bp", "jp", "adr", "esp", "tr", "sp", "ind", "ix", "ps", "inters", "ts", "expr", "post", "pointer", "fp"], "buflen": ["bufrenum", " buflenum", "buselenum", "buFllen", "fuflen", "buFlen", "rafllen", "buknine", "buFline", " bulleng", "bublEN", "bullenum", "buflenn", "burflatten", "buflEN", "raFllen", "bufrens", "bufden", "burflen", "bufdeng", "bufdenn", "fublength", "bufleng", "bullens", "bulfenn", "buselen", "bucomplen", "buflens", "burFlenn", "raFlenn", "buknen", "bucomplength", "bulflen", "burFlatten", "bucomplap", "buflength", "bufdatten", "buflenum", "buknenn", "fublEN", "bublap", "rafline", "bufline", "burflenn", "buFleng", "burfleng", "bulfeng", "fublen", " bullen", "buknlen", "bublength", " bullens", "buselens", "bucomplEN", " bullenum", " buflens", "buplEN", "fublap", "bullen", "bublen", "buflatten", "bulleng", "fuflEN", "buplength", " bufleng", "buFlenn", "fuflap", "bulfatten", "raflenn", "buFlatten", "burFleng", "fuflength", "buflap", "bufllen", "bulfen", "buplap", "bulfine", "raFline", "buseleng", "bufreng", "buplen", "bufren", "raFlen", "raflen", "burFlen"], "c": ["m", "ct", "con", "category", "cc", "e", "char", "f", "rc", "u", "ci", "bc", "cs", "ec", "t", "cont", "cd", "cm", "k", "dec", "cb", "ch", "ca", "cf", "cu", "uc", "ac", "p", "code", "\u00e7", "count", "fc", "d", "v", "a", "etc", "abc", "dc", "ce", "lc", "fac", "cmp", "x", "C", "col", "l", "cp"], "sb": ["sam", "gob", "sbm", "eb", "ob", "bsp", "sa", "stab", "ub", "pb", "bf", "bj", "bs", "lp", "zb", "kb", "cb", "gb", "ib", "lb", "bg", "bb", "xb", "rb", "sg", "nb", "ssl", "bp", "mb", "sv", "bt", "sf", "bh", "SB", "wb", "sq", "erb"], "b": ["B", "bit", "eb", "ob", "j", "binary", "bo", "br", "i", "ub", "bi", "f", "e", "pb", "bf", "r", "be", "body", "fb", "z", "bs", "bc", "t", "bol", "ab", "cb", "gb", "ib", "emb", "ch", "bis", "beta", "bg", "bb", "back", "bd", "p", "ba", "db", "rb", "obj", "nb", "g", "d", "bp", "mb", "a", "v", "buff", "bin", "bar", "bt", "base", "bu", "bound", "y", "o", "reb", "l", "wb"], "n": ["j", "i", "e", "f", "r", "z", "ln", "u", "t", "nr", "ne", "ll", "p", " l", "N", "nb", "w", "d", "nu", " N", "ns", "sn", " j", "o", "x", "l", "nt"], "minus": ["digit", "nan", "lo", "leading", "doesn", "terms", "min", "dec", "bra", "cos", "negative", "bis", "zero", "beta", "ero", "plus", "neg", "want", "nos", "major", "seconds", "dot", "us", "mobile", "de", "south", "second", "butt", "mini", "pot", "zon", "odd", "div", "little", "cond", "nom", "mod"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    private static final Scanner scn = new Scanner(System.in);\\n    \\n    public static void main(String[] args) {\\n        int n = scn.nextInt();\\n        double d = 100;\\n        for(int i = 0; i < n; i++) {\\n            d = Math.ceil(d * 1.05);\\n        }\\n        System.out.println((int)d * 1000);\\n    }\\n}", "target": "173", "substitutes": {"scn": ["scr", "scner", "mcen", "fcn", "Scl", "Scne", "rcl", " scne", " scl", "scen", "fcen", "mcn", " scen", " scner", "fcner", " scr", "scl", "scne", "Scr", "rcr", "Scn", "rcne", "mcr", "mcner", "fcr", "rcn"], "n": ["ng", "m", "j", "f", "nn", "number", "net", "ln", "t", "k", "ne", "mn", "on", "en", "p", "nc", "gn", "np", "c", "nor", "N", "len", "count", "nb", "no", "nu", "num", "ns", "nl", "sn", "nw", "na", "o", "cn", "l", "nt"], "d": ["done", "out", "m", "fd", "b", "daily", "f", "dm", "da", "dx", "gd", "r", "nd", "des", "t", "dd", "D", "cd", "di", "ld", "dt", "diff", "dec", "dev", "dq", "dp", "std", "dig", "du", "p", "c", "dy", "db", "ad", "draw", "debug", "pd", "td", "dot", "df", "dc", "de", "div", "dat", "ds", "dl", "sd", "dn", "dh", "l", "den", "dL", "mod"], "i": ["ii", "phi", "m", "gu", "me", "xi", "j", "sim", "multi", "init", "bi", "sequence", "it", "hi", "q", "u", "ci", "di", "I", "mi", "ie", "gi", "li", "si", "pi", "ex", "iter", "ti", "my", "cli", "ui", "ms", "ini", "ai", "ic", "us", "iu", "ix", "id", "ip", "y", "is", "im", "qi", "ki"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner scan = new Scanner(System.in);\\n        int x,y,asi;\\n        x=scan.nextInt();\\n        y=scan.nextInt();\\n        \\n       for(int c=0; c<=x; c++){\\n           int t=x-c;\\n           asi =(c*2)+(4*t);\\n           if(asi==y){\\n               System.out.println(\"Yes\");\\n               System.exit(0);\\n           }\\n       }\\n        System.out.println(\"No\");\\n    }\\n}\\n", "target": "62", "substitutes": {"scan": ["store", "out", "m", "san", "check", "system", "s", "can", "skip", "sim", "Scan", "ann", "run", "in", "r", "sb", "sort", "scroll", "row", "k", "read", "sync", "black", " Scan", "ch", "seek", "sys", "reach", "sc", "ner", "report", "query", "gen", "acc", "send", "gate", "parse", "sql", "an", "get", "g", "v", "spin", "sv", "search", "util", "n", "sp", "ser", " scanner", "cgi", "is", "sum", "find"], "x": ["act", "m", "h", "xi", "rx", "xp", "j", "xe", "i", "e", "xs", "f", "dx", "ox", "z", "mx", "k", "tx", "height", "ux", "width", "index", "xy", "ax", "p", "ex", "w", "v", "a", "yx", "xf", "xx", "n", "xt", "ix", "xc", "px", "o", "fx", "l", "X", "wx"], "y": ["out", "b", "m", "uy", "yer", "j", "ny", "axy", "i", "ies", "wy", "ye", "z", "yt", "yi", "iy", "oy", "py", "vy", "ch", "sys", "xy", "er", "ym", "ay", "p", "gy", "dy", "ys", "v", "Y", "my", "ey", "yx", "yo", "story", "cy", "yy", "sy", "yr", "xx", "n", "ry", "o", "yz"], "asi": ["asis", "aci", "ii", "phi", "xi", "adi", "isa", "ja", "sa", "i", "ani", "assi", "yi", "ci", "eni", "qt", "aki", "iat", "aii", "ni", "ati", "si", "aka", "ski", "pi", "ta", "ita", "ais", "ti", "cin", "asia", "isi", "ini", "ai", "as", "ici", "agi", "pai", "pa", "qi", "ami", "ity", "ku", "ki"], "c": ["m", "b", "h", "ct", "j", "con", "init", "i", "cc", "f", "cat", "cr", "tc", "e", "rc", "q", "z", "u", "ci", "bc", "cs", "ec", "cont", "cd", "k", "dec", "cos", "ca", "pc", "cf", "cu", "sc", "ac", "mc", "p", "nc", "\u00e7", "oc", "cum", "fc", "d", "v", "g", "cin", "ic", "co", "chain", "dc", "ce", "lc", "n", "xc", "unc", "call", "o", "C", "anc", "col", "l", "cp"], "t": ["ty", "tu", "m", "ct", "j", "i", "tc", "q", "z", "kt", "qt", "k", "wt", "tz", "dt", "pt", "tw", "p", "ot", "ta", "trace", "ti", "g", "d", "total", "T", "mt", "eta", "type", "tm", "n", "ts", "o", "tt", "l", "te", "rt"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n \\npublic class Main {\\n \\n\tvoid submit() {\\n\\n        int N = nextInt();\\n        int[] P = new int[N];\\n        \\n        for(int i=0; i<N; i++){\\n            P[i] = nextInt();\\n        }\\n\\n        int count = 1;\\n\\n        if(N==1){\\n     \t    out.println(count);\\n     \t    return;\\n        }\\n        \\n        int min=P[0];\\n        for(int i=1; i<N; i++){\\n            if(min >= P[i]){\\n                min = P[i];\\n                count++;\\n            }\\n        }\\n     \tout.println(count);\\n\t}\\n\\n\tvoid preCalc() {\\n \\n\t}\\n \\n\tvoid stress() {\\n \\n\t}\\n \\n\tvoid test() {\\n \\n\t}\\n \\n\tMain() throws IOException {\\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\tout = new PrintWriter(System.out);\\n\t\tpreCalc();\\n\t\tsubmit();\\n\t\t//stress();\\n\t\t//test();\\n\t\tout.close();\\n\t}\\n \\n\tstatic final Random rng = new Random();\\n \\n\tstatic int rand(int l, int r) {\\n\t\treturn l + rng.nextInt(r - l + 1);\\n\t}\\n \\n\tpublic static void main(String[] args) throws IOException {\\n\t\tnew Main();\\n\t}\\n \\n\tBufferedReader br;\\n\tPrintWriter out;\\n\tStringTokenizer st;\\n \\n\tString nextToken() {\\n\t\twhile (st == null || !st.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn st.nextToken();\\n\t}\\n \\n\tString nextString() {\\n\t\ttry {\\n\t\t\treturn br.readLine();\\n\t\t} catch (IOException e) {\\n\t\t\tthrow new RuntimeException(e);\\n\t\t}\\n\t}\\n \\n\tint nextInt() {\\n\t\treturn Integer.parseInt(nextToken());\\n\t}\\n \\n\tlong nextLong() {\\n\t\treturn Long.parseLong(nextToken());\\n\t}\\n \\n\tdouble nextDouble() {\\n\t\treturn Double.parseDouble(nextToken());\\n\t}\\n}", "target": "229", "substitutes": {"N": ["B", "NH", "Node", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "SIZE", "NS", "I", "D", "A", "NO", "ANY", "GN", "NP", "NC", "NB", "L", "ALL", "ND", "V", "TN", "Size", "NM", "H", "NT", "NA", "Y", "T", "K", "J", "Q", "NE", "n", "Len", "M", "R", "Length", "NOW", "C", "Z"], "P": ["B", "TP", "PR", "F", "PD", "S", "IP", "I", "JP", "Pocket", "NP", "CP", "PP", "MP", "PO", "PT", "PA", "V", "L", "DP", "PF", "PIN", "p", "H", "Part", "Policy", "PS", "T", "PM", "K", "J", "Q", "M", "R", "BP", "PI", "PE", "C", "PUT", "AP", "PK"], "i": ["ii", "phi", "gu", "m", "xi", "me", "multi", "sim", "j", "fi", "ri", "it", "bi", "init", "e", "ji", "hi", "in", "ims", "u", "ci", "iy", "di", "I", "mi", "ie", "info", "gi", "client", "ni", "list", "li", "p", "ei", "si", "point", "pi", "iter", "ti", "v", "io", "cli", "my", "zi", "ui", "ms", "ini", "ai", "ic", "us", "\u0438", "chain", "iu", "n", "pa", "ix", "ind", "id", "ip", "y", "o", "uri", "key", "is", "im", "oi", "PI", "batch", "ami", "ori", "ity", "qi", "ki"], "count": ["current", "ct", "flag", "skip", "ount", "value", "cache", "number", "ctr", "z", "continue", "scroll", "t", "cont", "close", "coll", "complete", "info", "result", "counter", "index", "zero", "start", "list", "report", "p", "c", "cycle", "amount", "status", "code", "comment", "trace", "nb", "summary", "total", "num", "weight", "state", "const", "last", "length", "n", "Count", "now", "cond", "ind", "child", "frequency", "call", "max", "size", "stat", "sum", "batch", "find", "found", "nt"], "min": ["m", "lower", "j", "low", "minimum", "test", "none", "mins", "Min", "MIN", "mi", "rand", "ne", "mn", "start", "pre", "first", "Minimum", "beta", "next", "p", "part", "local", "st", "name", "left", "mini", "n", "lt", "default", "minute", "M", "partial", "max", "Mini", "stat", "sum", "small", "l", "amin", "tail"], "br": ["serv", "sam", "rain", "lr", "Br", "shr", "bl", "bi", "cr", "ctr", "dr", "kr", "ch", "pr", "rr", "usr", "hr", "txt", "gr", "bt", "tr", "fr", "bh", "rest", "browser", "nr", "mr", "BR"], "out": ["hit", "msg", "gt", "aos", "it", "str", "cache", "error", "net", "put", "in", "OUT", "u", "at", "t", "format", "pool", "ou", "outs", "pos", "exit", "outer", "info", "ch", "pretty", "exec", "conn", "sys", "Out", "log", "list", "report", "null", "p", "c", "print", "status", "ex", "gc", "write", "res", "v", "output", "end", "io", "name", "all", "screen", "gr", "n", "table", "conv", "o", "writer", "err", "OU", "nt"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\tboolean bl = true;\\n\t\tint a=0,b=0;\\n\\n\t\twhile(bl){\\n\t\t\ta = stdIn.nextInt();\\n\t\t\tb = stdIn.nextInt();\\n\\n\t\t\tif((1 <= a) && (a <= Math.pow(10, 9)) && (1 <= b) && (b <= Math.pow(10, 9)) ){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\\n\t\tint d = a / b;\\n\t\tint r = a % b;\\n\t\tdouble f = (double)a / (double)b;\\n\\n\t\tSystem.out.printf(\"%d %d %.6f\", d,r,f);\\n\t}\\n}", "target": "90", "substitutes": {"stdIn": [" stdSync", "randOut", "stdSync", "stOut", "STDIN", "randIN", "randIn", "standardIn", "standardIng", "stdOut", " STDOut", "stdIng", " stdIN", "stdIN", "stSync", "standardOut", "STDIng", " stdIns", " STDIns", " stdIng", " STDSync", "stIn", " stdOut", "stdIns", "stIns", "STDIn", " STDIn", "STDOut"], "a": ["aaa", "aff", "sta", "apa", "la", "oa", "s", "ap", "isa", "sa", "i", "e", "eas", "aq", "da", "admin", "am", "u", "t", "ast", "A", "au", "el", "at", "area", "ab", "ca", "ma", "app", "ac", "p", "ao", "ba", "ea", "af", "c", " at", "ta", "an", "obj", "aa", "ia", "aj", "ar", " ba", "ga", "ai", "as", "alpha", "to", "va", "ach", "al", "l", "ae", "fa"], "b": ["B", "bit", "out", "h", "eb", "ob", "j", "s", "br", "i", "ub", "bi", "pb", "e", "it", "be", "by", "sb", "fb", "u", "z", "bs", "bc", "change", "t", "lib", "blue", "ab", "ib", "gb", "cb", "lb", "bis", "bitcoin", "beta", "bg", "bb", "back", "p", "ba", "c", "db", "rb", "nb", "other", "g", "mb", "v", "bp", "bin", "length", "bar", "base", "n", "l"], "bl": ["fl", "ibl", "label", "ble", "bsp", "br", "bo", "gl", "bf", " sil", "cl", "ln", "arr", "ml", "ill", "bc", "bell", " pl", " bol", " abl", " shr", "pl", "lb", " blu", "ll", "bg", "Bl", " Bl", " lol", " BL", " blo", "bm", "BL", " bob", " throb", "block", "sl", "hl", "hist", "bh", "sil", " ab", "lbs", " lb", " br", " gl", "obl", "abl"], "d": ["m", "fd", "j", "dm", "da", "dx", "z", "dr", "nd", "t", "dd", "D", "ld", "di", "cd", "dt", "dra", "md", "bd", "p", "c", "db", "ad", "w", "g", "pd", "td", "n", "ds", "sd", "x", "dn", "dh", "l"], "r": ["rd", "rs", "rate", "h", "m", "ri", "i", "mr", "cr", "rar", "q", "dr", "rc", "u", "re", "t", "rel", "ror", "attr", "pr", "rad", "p", "c", "rb", "sr", "w", "v", "ar", "rt", "rf", "l", "ra", "tr", "fr", "R", "o", "nr", "rr"], "f": ["m", "fd", "h", "F", "um", "fi", "ct", "i", "e", "fs", "fm", "full", "z", "fb", "fa", "fort", "t", "alf", "cf", "p", "fp", "c", "fen", "of", "fc", "v", "g", "rf", "df", "far", "n", "sf", "fac", "fr", "fx", "al", "l", "tf", "ff"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        boolean color[] = new boolean[8];\\n        Arrays.fill(color, false);\\n        int rainbow = 0;\\n        int min = 0;\\n        int N = s.nextInt();\\n        for(int i = 0; i < N; i++){\\n            try{\\n                int rate = s.nextInt();\\n                if(!color[rate / 400]){\\n                    min++;\\n                    color[rate / 400] = true;\\n                }\\n            } catch(IndexOutOfBoundsException e){\\n                rainbow++;\\n            }\\n        }\\n        if(min == 0){\\n            min = 1;\\n            rainbow--;\\n        }\\n        System.out.println(min + \" \" + (min+rainbow)); //\u597d\u304d\u306a\u8272\u3063\u3066\u307b\u3093\u3068\u306b\u597d\u304d\u306a\u8272\u306a\u306e\u304b\u3088shit!!\\n    }\\n}\\n", "target": "94", "substitutes": {"s": ["serv", "hs", "sam", "rs", "simple", "h", "http", "sol", "ats", "sa", "xs", "fs", "ss", "S", "sb", "gets", "abs", "socket", "os", "se", "qs", "sys", "sc", "gs", "p", "ins", "comm", "sw", "ssl", "less", "sv", "ms", "ws", "sl", "search", "ns", "self", "n", "sts", "ds", "ps", "js", "conv", "ts", "ses", "is", "ls", "sq"], "color": ["orange", "check", "theme", "message", "yellow", "channel", "feature", "show", "char", "value", "url", "cache", "error", "number", "fire", "stroke", "colour", "change", "set", "row", "coll", "resource", "filter", "blue", "black", "index", "pixel", "white", "font", "c", "cycle", "status", "comment", "draw", "scale", "style", "component", "normal", "name", "background", "total", "state", "clear", "display", "image", "alpha", "olor", "colored", "hex", "green", "size", "col", "red", "hash", "COLOR", "Color", "light"], "rainbow": ["ainbow", "aincox", "sixbow", "ainbar", "tenobb", "tenbows", "brainbows", "tenbone", " rainger", "rainobb", " raincox", "broadbow", "Raincox", "coincycle", " rainbone", "Rainger", "ainboard", "ainneck", "rainneck", "brainforest", "tenbow", "rainforest", "sixcycle", "braincycle", "ainger", " rainobb", "broadneck", "sixbows", "rainbows", "brainbow", "Rainobb", "tenboard", "rainbug", "broadbug", "Rainbows", "sixforest", "rainboard", "ainbug", "Rainbone", " rainbar", "raincycle", "coinbow", "raincox", "Rainbar", "broadboard", "rainbone", "coinbows", "tenbug", "tenneck", "coinforest", "Rainbow", "rainbar", " rainbows", "rainger"], "min": ["rain", "value", "mel", "mins", "mi", "rand", "log", "dim", "trigger", "arm", "mini", "just", "stat", "m", "lower", "sol", "mind", "mint", "MIN", "only", "date", "next", "local", "side", "mine", "lt", "id", "minute", "meta", "sum", "sample", "mod", "floor", "minimum", "init", "none", "Min", "rel", "diff", "mn", "req", "start", "pre", "index", "common", "ind", "default", "val", "rest", "Mini", "small", "find", "low", "body", "span", "mid", "sort", "emin", "pos", "dem", "first", "minus", "inner", "normal", "left", "don", "max", "button", "amin", "clip"], "N": ["NH", "P", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NS", "I", "D", "NO", "NP", "NC", "NB", "L", "ND", "V", "TN", "Size", "NY", "NM", "NG", "NT", "NA", "T", "K", "J", "Sn", "NE", "n", "NW", "M", "R", "C", "X"], "i": ["ii", "phi", "m", "xi", "me", "inter", "j", "sim", "multi", "e", "bi", "it", "q", "ci", "di", "I", "mi", "ie", "go", "gi", "li", "p", "si", "print", "pi", " ii", "ti", "v", "io", "my", "ui", "ms", "ini", "ai", "ic", "us", "iu", "n", "ix", "ind", "id", "ip", "y", "o", "is", "key", "x", "im", "qi"], "rate": ["range", "duration", "rot", "mode", "erate", "speed", "fps", "dr", "r", "re", "time", "sync", "race", "rss", "rand", "se", "price", "go", "dose", "prime", "rat", "depth", "counter", "xy", "Rate", "peed", "cycle", "ime", "code", "status", "scene", "scale", "seed", "ride", "delay", "rew", "step", "process", "times", "state", " speed", "priority", "handle", "rpm", "rule", "base", "rates", "sex", "frequency", "ate", "rating", "te", "sample"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\t\\n\t\tArrayList<Integer> list = new ArrayList<Integer>();\\n\t\tint count = 0;\\n\t\tfor(int i = 0; i < s.length() - t.length() + 1; i++) {\\n\t\t\tString temp = s.substring(i, i + t.length());\\n\t\t\tfor(int j = 0; j < t.length(); j++) {\\n\t\t\t\tif(temp.charAt(j) != t.charAt(j)) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tlist.add(count);\\n\t\t\tcount = 0;\\n\t\t}\\n\t\tCollections.sort(list);\\n\t\tSystem.out.println(list.get(0));\\n\t}\\n\\n}\\n", "target": "158", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args) {\\n    //\u5165\u529b\\n    Scanner sc = new Scanner(System.in);\\n//\u5168\u4f53\u306e\u500b\u6570\\nlong N =sc.nextLong();\\n//A\u306f\u9752\u306e\u500b\u6570\\nlong A =sc.nextLong();\\n//B\u306f\u8d64\u306e\u500b\u6570\\nlong B =sc.nextLong();\\n//\u30ab\u30a6\u30f3\u30c8\u5909\u6570\\nlong cnt = 0;\\n//\u9752\u3068\u8d64\u306e\u30bb\u30c3\u30c8\u306e\u6570\\nlong set = (long)(N/(A+B));\\ncnt = set*A;\\nif(N%(A+B) == 0){\\n  System.out.println(cnt);\\n}else{\\n  //\u30bb\u30c3\u30c8\u3092\u4e26\u3079\u305f\u3068\u304d\u306e\u500b\u6570\\n  long ball =set*(A+B);\\n  if(N-ball >= A){\\n    System.out.println(cnt+A);\\n  }else{\\n    System.out.println(cnt+(N-ball));\\n  }\\n  \\n}\\n\\n}\\n\\n}\\n", "target": "217", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n\\n        StringBuilder stb = new StringBuilder();\\n        for(int i = 0 ; i < s.length() ; i++){\\n            stb.append('x');\\n        }\\n        System.out.println(stb.toString());\\n    }\\n}", "target": "122", "substitutes": {"sc": ["cc", "cle", "cr", "tc", "ss", "rc", "cl", "sb", "bc", "cs", "sm", "sac", "desc", "esc", "ec", "sync", "Sc", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "c", "nc", "SC", "sw", "gc", "st", "src", "sv", "scan", "lc", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "sq"], "s": ["rs", "b", "m", "ats", "str", "fs", "ss", "S", "sb", "cs", "t", "qs", "sys", "gs", "p", "c", "su", "ins", "g", "v", "strings", "less", "sv", "ms", "ws", "ns", "sts", "n", "sp", "ps", "js", "ls", "ses", "ts", "is", "x", "l", "sq"], "stb": ["Stbb", " stdb", "stdb", "steb", " steb", " str", "ostbr", "ctb", " stsb", "str", "STmb", " stmb", "STeb", "ftsb", "Str", "ctbb", " stbb", "stsb", "stbb", "stmb", "STr", "ftdb", "Stb", "ostdb", "ctdb", "ftbr", "ostsb", "stbr", "STb", "Stmb", "Stdb", "Steb", "ostb", "ctmb", " stbr", "ftb"], "i": ["ii", "phi", "m", "b", "gu", "j", "multi", "sim", "eu", "init", "bi", "it", "hi", "fire", "in", "u", "ci", "t", "di", "I", "mi", "gi", "mu", "li", "ei", "si", "pi", "ex", "sql", "ti", "no", "io", "a", "cli", "ui", "ms", "ini", "ic", "ai", "uu", "us", "iu", "n", "ix", "id", "ip", "y", "uri", "key", "x", "im", "mac", "is", "err", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int X = Integer.parseInt(sc.next());\\n        sc.close();\\n\\n        //\u786c\u8ca8\u306e\u679a\u6570\\n        int count500 = 0;\\n        int count5 = 0;\\n        //\u6b8b\u9ad8\\n        int remain = 0;\\n        //\u5b09\u3057\u3055\u5408\u8a08\\n        int happy500 = 0;\\n        int happy5 = 0;\\n\\n        count500 = X / 500;\\n        happy500 = 1000 * count500;\\n        remain = X - (500 * count500);\\n\\n        count5 = remain / 5;\\n        happy5 = 5 * count5;\\n\\n        System.out.println(happy500 + happy5);\\n\\n    }\\n\\n}\\n", "target": "180", "substitutes": {"sc": ["cc", "cle", "cr", "tc", "capt", "ss", "rc", "ko", "cl", "cam", "bc", "cs", "ec", "esc", "sync", "Sc", "ch", "pc", "isc", "osc", "ck", "psc", "mc", "scl", "nc", "c", "sh", "sub", "SC", "gc", "arc", "sv", "nl", "lc", "scan", "sp", "asc", "sch", "sec", "anc", "usc", "disc", "syn", "sq"], "X": ["P", "ID", "OK", "xs", "dx", "S", "XXX", "I", "D", "Key", "L", "V", "XX", "ax", "Name", "N", "Y", "T", "K", " x", "Q", "EX", "ix", "M", "R", "x", "Z"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n      Scanner sc = new Scanner(System.in);\\n\t\tString s = sc.nextLine();\\n\t\tArrayList<Character> c = new ArrayList<>();\\n\t\tint a=0,b=0;\\n\t\tfor(int i=0 ; i<s.length(); i++) {\\n\t\t\tc.add(s.charAt(i));\\n\t\t}\\n\t\tfor(int i=0 ; i<c.size() ; ++i) {\\n\t\t\tif(c.get(i) == '0') {\\n\t\t\t\ta++;\\n\t\t\t}else {\\n\t\t\t\tb++;\\n\t\t\t}\\n\t\t}\\n\t\tif(a>=b) {\\n\t\t\tSystem.out.println(b*2);\\n\t\t}else {\\n\t\t\tSystem.out.println(a*2);\\n\t\t}\\n    }\\n}\\n", "target": "14", "substitutes": {"sc": [" Sc", "cc", "cle", "cr", "ss", "rc", "cl", "bc", "cs", "sac", "desc", "ec", "esc", "sync", "Sc", "ch", "pc", "osc", "isc", "enc", "soc", "sys", "mc", "scl", "nc", "sh", "SC", "gc", "src", "sv", "nl", "lc", "sp", "ser", "asc", "sch", "sec", "anc", "sq"], "s": ["hs", "rs", "m", "string", "its", "ats", "xs", "str", "ss", "in", "r", "S", "sb", "abs", "bs", "t", "os", "qs", "sys", "gs", "scl", "p", "sql", "sw", "g", "less", "sv", "ms", "ws", "ns", "n", "sf", "sts", "ps", "js", "conv", "ls", "ts", "is", "y", "l", "sq"], "c": ["ct", "con", "csv", "cc", "cat", "f", "cache", "cr", "tc", "r", "cl", "cv", "ci", "cm", "cs", "ec", "cd", "cont", "coll", "cb", "ch", "ca", "cf", "cur", "cu", "ac", "p", "mc", "nc", "gc", "fc", "cons", "v", "etc", "ic", "co", "dc", "lc", "n", "xc", "conv", "unc", "ctrl", "C", "col", "l", "cp"], "a": ["aaa", "aff", "sta", "la", "apa", "oa", "eu", "sa", "aq", "e", "eas", "f", "da", "aw", "am", "av", "abs", "t", "el", "A", "au", "area", "ab", "ca", "ax", "ma", "ac", "ba", "ao", "ea", "ta", "an", "trace", "aa", "d", "ia", "aj", "ar", "ga", "ai", "as", "bar", "alpha", "pa", "na", "o", "x", "al", "l", "ae", "fa"], "b": ["B", "h", "m", "eb", "ob", "j", "bo", "br", "bi", "pb", "bf", "r", "be", "sb", "by", "fb", "bs", "bc", "t", "blue", "ab", "ib", "gb", "cb", "beta", "bg", "bb", "back", "bd", "p", "ba", "db", "rb", "nb", "g", "d", "v", "base", "n", "bound", "to", "l", "wb"], "i": ["ii", "phi", "m", "xi", "me", "j", "multi", "ri", "it", "bi", "ji", "hi", "q", "ci", "iy", "di", "I", "mi", "ie", "info", "gi", "index", "li", "p", "ei", "si", "point", "print", "remote", "pi", "iter", "ti", "g", "v", "io", "my", "ia", "cli", "zi", "ui", "ini", "ic", "ai", "us", "\u0438", "iu", "ix", "ind", "ip", "y", "o", "is", "uri", "x", "im", "oi", "ion", "ori", "ity", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int[] h = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            h[i] = Integer.parseInt(sc.next());\\n        }\\n        for (int i = n - 1; i > 0; i--) {\\n            if (h[i] < h[i - 1]) {\\n                h[i - 1]--;\\n            }\\n            if (h[i] < h[i - 1]) {\\n                System.out.println(\"No\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"Yes\");\\n    }\\n}", "target": "74", "substitutes": {"sc": [" Sc", "tch", "cc", "cle", "cr", "tc", "pb", "rc", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "dec", "ch", "osc", "pc", "isc", "exec", "sys", " SC", "mc", "scl", "c", "nc", "sh", "SC", "gc", "fc", "arc", "st", "sv", "nl", "dc", "lc", "scan", "sp", "sel", "asc", " unsc", "sch", "sec", "anc", "usc", "disc", "sq"], "n": ["ng", "m", "norm", "ct", "j", "nan", "nn", "net", "number", "r", "z", "ln", "t", "k", "ne", "mn", "network", "ll", "on", "en", "len", "np", "nc", "c", "ot", "p", "N", "pi", "count", "an", "and", "nb", "v", "no", "nu", "all", "names", " N", "num", "ns", "un", "nl", "sn", "na", "non", "o", "max", "x", "size", "cn", "l", "nt"], "h": ["hs", "m", "j", "lo", "uh", "f", "hi", "where", "q", "r", "z", "his", "oh", "hm", "t", "ph", "hd", "th", "kh", "ah", "hh", "he", "eh", "index", "has", "mu", "p", "hz", "sh", "H", "c", "hr", "rh", "ih", "g", "ht", "v", "shift", "hl", "host", "bh", "hp", "hex", "y", "o", "ho", "dh", "pp", "l", "hash"], "i": ["hi", "q", "ci", "iso", "history", "mi", "li", "remote", "v", "ij", "ui", "ini", "ai", "us", "err", "ix", "multi", "bi", "iy", "ei", "print", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "asi", "im", "l", "ity", "ki", "ii", "ri", "init", "yi", "window", "di", "exp", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "ip", "o", "ori", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "ims", "z", "u", "set", "I", "ie", "client", "point", "g", "ic", "iu", "base", "is", "key", "x", "batch"]}}
{"code": "import java.util.*;\\npublic class Main {\\n   public static void main(String[] args) {\\n      Scanner sc = new Scanner(System.in);\\n\\n      int x = sc.nextInt();\\n\\n      int[] n = {1, 4, 8, 9, 16, 25, 27, 32, 36, 49, 64, 81, 100, 121, 125, 128, 144, 169, 196, 216, 225, 243, 256, 289, 324, 343, 361, 400, 441, 484, 512, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1000, 1001};\\n\\n     int i = 0; \\n     \\n      for (i = 0; i < 43; i++) {\\n         if ( x < n[i]) {\\n            break;\\n         }\\n      }\\n\\n      System.out.println(n[i-1]);\\n   }\\n}", "target": "143", "substitutes": {"sc": ["out", "system", "cc", "cle", "Scan", "ss", "cr", "rc", "r", "cl", "sb", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "uc", "sys", "mc", "scl", "nc", "c", "sub", "SC", "gc", "sw", "sv", "screen", "nl", "scan", "lc", "sp", "sel", "ser", "asc", "sch", "sec", "usc", "sq"], "x": ["check", "xi", "rx", "xp", "xe", "e", "xs", "f", "test", "dx", "ox", "z", "mx", "xd", "tx", "exp", "index", "xy", "ax", "p", "xb", "c", "ex", "w", "ctx", "v", "xf", "xx", "ix", "xc", "y", "px", "fx", "X", "wx"], "n": ["ng", "m", "norm", "j", "s", "nan", "nn", "ren", "r", "z", "ln", "t", "pn", "ne", "mn", "network", "index", "rn", "en", "p", "nor", "gn", "np", "c", "nc", "N", "an", "nb", "v", "nu", "no", "ns", "num", "nl", "sn", "tn", "na", "o", "dn", "cn", "l", "nt"], "i": ["ii", "phi", "m", "xi", "me", "multi", "j", "sim", "s", "ri", "fi", "it", "bi", "hi", "q", "u", "ci", "t", "di", "I", "mi", "info", " di", "gi", "index", "mu", "li", " ti", "ei", "si", "pi", " ii", "ti", "g", "v", "io", "cli", "zi", "ui", "ini", "ai", "ic", "\u0438", "chain", "iu", "ix", "ind", "id", "cgi", "y", "is", "asi", "im", "oi", "l", "qi", "ki"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\\n\t\tString ans = \"No\";\\n\\n\t\touter:\\n\t\tfor (int i = 0; i * 4 <= n; i++) {\\n\t\t\tfor (int j = 0; i * 4 + j * 7 <= n; j++) {\\n\t\t\t\tif (i * 4 + j * 7 == n) {\\n\t\t\t\t\tans = \"Yes\";\\n\t\t\t\t\tbreak outer;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "172", "substitutes": {"sc": ["cc", "cle", "Scan", "tc", "cr", "capt", "ss", "rc", "pb", "cl", "bc", "cs", "sm", "reader", "esc", "sync", "Sc", "isc", "pc", "ch", "osc", "uc", "sys", "proc", "ck", "mc", "scl", "c", "nc", "sh", "SC", "gc", "inc", "sr", "arc", "src", "sv", "nl", "lc", "scan", "RC", "sp", "asc", "ctrl", "anc", "sch", "sec", "usc", "syn", "sq"], "n": ["ng", "out", "m", "h", "norm", "s", "nan", "it", "nn", "net", "number", "z", "ln", "t", "k", "ne", "mn", "ni", "nm", "en", "p", "nc", "np", "nor", "c", "len", "N", "gn", "nb", "g", "d", "v", "nu", "no", "w", "names", " N", "ns", "num", "nl", "sn", "nw", "na", "cn", "l", "nt"], "ans": ["uns", "posts", "rs", "oss", "san", "s", "can", "ats", "aos", "utters", "rans", "aned", "ann", "ians", "lan", "wan", " means", "ens", "said", "aus", "cs", "acs", "angs", "eds", "aps", "anks", "ks", "ins", "an", "ros", "leans", "ars", "ras", "ms", "ents", "as", "ns", "arms", "eps", "ants", "mas", "ds", " beans", "ps", "arts", "vers", "ts", "ANS", "ls", "amps", "ads"], "i": ["ii", "phi", "xi", "me", "inter", "multi", "sim", "ri", " Xi", "ji", "bi", "init", "it", "hi", "ims", "in", "yi", "ci", "di", "I", "mi", "ie", "info", "gi", "li", "ei", "si", "pi", " ii", "iter", "ti", "v", "ia", "ij", "zi", "ui", "ini", "ai", "ic", "iu", "ind", "ix", "ip", "y", "is", "x", "im", "ami", "qi", "ki"], "j": ["oj", "b", "out", "ja", "br", "it", "ji", "jj", "bi", "jc", "q", "z", "uj", "bj", "bs", "el", "ph", "k", "py", "son", "jump", "json", "pr", "kj", "li", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "dj", "J", "jas", "ind", "jack", "js", "y", "im", "ion", "job", "ge"]}}
{"code": "import java.io.*;\\n\\nclass Main{\\n    public static void main(String[] args) throws Exception{\\n\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String num1 = br.readLine();\\n        String[] num2 = num1.split(\" \");\\n\\n        Double a = Double.parseDouble(num2[0]);\\n\\n        double s = a * a * Math.PI;\\n        double l = (a + a) * Math.PI;\\n        String S = String.format(\"%.6f\", s);\\n        String L = String.format(\"%.6f\", l);\\n\\n        System.out.println(S + \" \" + L);\\n    }\\n}", "target": "239", "substitutes": {"br": ["bridge", "out", "lr", "Br", "bsp", "bl", "shr", "str", "cr", "bf", "dr", "be", "kr", "bc", "buf", "rel", "ch", "pr", "bd", "bm", "hr", "rb", "sr", "bro", "bp", "gr", "vr", "bt", "yr", "div", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "browser", "mr", "BR"], "num1": ["number0", "NUM1", "namFirst", "numFirst", "NUM3", "number3", "number1", "NUMOne", "numOne", "nam1", "Num1", "numberFirst", "number2", " num3", "namOne", "num3", "NUM2", "NumOne", "Num0", "num0", "NumFirst", "numberOne", " numOne", "nam0"], "num2": ["num8", "mon2", "number8", "mon8", "number7", "number3", "number1", "number5", "number2", " num3", "mon1", "num3", "um1", " num5", "mon3", " num8", "num5", "um7", "um2", "um5", "num7", " num7"], "a": ["aaa", "b", "m", "sta", "la", "apa", "oa", "amp", "j", "sa", "i", "e", "f", "am", "z", "at", "t", "A", "au", "area", "att", "ca", "ma", "ac", "p", "c", "ba", "ea", "ao", "ta", "an", "aa", "g", "ia", "aj", "ar", "auto", "ga", "ha", "as", "ai", "angular", "alpha", "pa", "o"], "s": ["rs", "b", "h", "ats", "i", "xs", "f", "ss", "gets", "des", "bs", "cs", "t", "se", "gs", "p", "si", "ins", "su", "sw", "ys", "sv", "as", "sl", "ns", "ds", "stats", "js", "sd", "ls", "ts", "is", "es", "sq"], "l": ["b", "m", "j", "lr", "lu", "i", "lo", "f", "z", "ln", "ml", "t", "el", "ld", "lp", "ll", "li", "p", "len", "c", "ol", "kl", "local", "le", "w", "g", "d", "v", "sl", "hl", "nl", "lc", "n", "dl", "ls", "dL"], "S": ["B", "P", "ES", "DS", "SN", "G", "SO", "A", "D", "CSS", "ST", "SA", "RS", "SE", "SI", "SP", "H", "N", "IS", "ESS", "SL", "T", "SU", "VS", "LS", "SR", "SS", "MS", "SH", "GS", "TS", "R", "SD", "C", "SB", "JS"], "L": ["B", "P", "LA", "RL", "DL", "IL", "ML", "LR", "LP", "LL", "LIN", "LG", "NL", "LM", "LT", "AL", "V", "VL", "GL", "LC", "N", "CL", "LU", "SL", "Li", "LE", "J", "FL", "TL", "LS", "LB", "LI", "R", "M", "EL", "dL", "LD"]}}
{"code": "public class Main{\\n  public void run(java.io.InputStream in, java.io.PrintStream out){\\n    java.util.Scanner sc = new java.util.Scanner(in);\\n/*answer*/\\n    int a, b;\\n    a = sc.nextInt();\\n    b = sc.nextInt();\\n\\n    if(a < b){\\n      System.out.println(\"a < b\");\\n    }else if(a > b){\\n      System.out.println(\"a > b\");\\n    }else{\\n      System.out.println(\"a == b\");\\n    }\\n/*fin*/\\n    sc.close();\\n  }\\n  public static void main(String[] args){\\n    (new Main()).run(System.in, System.out);\\n  }\\n}", "target": "179", "substitutes": {"in": ["serv", "inf", "In", "m", "con", "isin", "s", "context", "i", "doc", "net", "r", "file", "user", "reader", "cont", "IN", "info", "up", "on", "from", "session", "log", "gin", "null", "en", "ins", "inner", "conf", "inn", "data", "inc", "cin", "d", "st", "io", "src", "config", "input", "world", "raw", "bin", "ini", "env", "stream", "err", "ind", "din", "is", "source", "l", "rt"], "out": ["store", "msg", "con", "aos", "cache", "error", "net", "OUT", "file", "user", "desc", "t", "set", "pool", "ou", "outs", "outer", "json", "ch", "group", "result", "conn", "sys", "client", "Out", "log", "list", "report", "null", "p", "on", "code", "print", "inner", "ins", "db", "obj", "write", "ex", "w", "res", "d", "v", "output", "name", "io", "end", "txt", "screen", "last", "display", "n", "tree", "dis", "table", "to", "o", "writer", "err", "gt", "nt"], "sc": ["seq", "cc", "cle", "cr", "tc", "ss", "capt", "rc", "cam", "cl", "sb", "pb", "bc", "cs", "sm", "desc", "row", "esc", "ec", "sync", "Sc", "ch", "pc", "ca", "isc", "osc", "exec", "uc", "sys", "ck", "spec", "mc", "scl", "c", "nc", "sh", "mp", "SC", "sw", "gc", "inc", "fc", "ctx", "sv", "lc", "scan", "sp", "sel", "asc", "conv", "sec", "anc", "sch", "usc", "syn", "sq"], "a": ["act", "aaa", "aff", "sta", "la", "oa", "sa", "i", "e", "eas", "f", "da", "admin", "am", "z", "abs", "era", "t", "at", "A", "au", "el", "area", "att", "ab", "ca", "ma", "app", "ac", "acc", "ao", "ba", "ea", "ta", "an", "data", "aa", "d", "ia", "aj", "ar", "add", "ga", "as", "ai", "access", "alpha", "to", "ach", "x", "ae"], "b": ["B", "h", "eb", "ob", "j", "bo", "br", "i", "bi", "pb", "bf", "r", "sb", "be", "body", "fb", "z", "bs", "bc", "t", "blue", "ab", "ib", "gb", "cb", "bis", "beta", "bb", "back", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "bp", "mb", "bar", "base", "n", "bound", "y", "reb", "l", "wb", "erb"]}}
{"code": "public class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tjava.util.Scanner sc = new java.util.Scanner(System.in);\\n\\n\t\tint a,b,c;\\n\t\ta = sc.nextInt();\\n\t\tb = sc.nextInt();\\n\t\tc = sc.nextInt();\\n\\n\t\tint count = 0;\\n\t\tfor ( int div = a; div <= b; div++) {\\n\t\t\tif ( c % div == 0 )\\n\t\t\t\tcount++;\\n\t\t}\\n\\n\t\tSystem.out.println(count);\\n\t}\\n\\n}", "target": "190", "substitutes": {}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args) {\\n\t\tint[] intList = new int[10];\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tfor (int count = 0; count < 10; count++) {\\n\t\t\tint temp = sc.nextInt();\\n\t\t\tif (temp <= 10000) {\\n\t\t\t\tintList[count] = temp;\\n\t\t\t}\\n\t\t}\\n\t\tArrays.sort(intList);\\n\t\tfor (int j = 9; j >= 7; j--) {\\n\t\t\tSystem.out.println(intList[j]);\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}", "target": "164", "substitutes": {"intList": ["INTList", "intLIST", "latMap", "uintAdded", "INTLeft", "intL", " intLeft", "initLock", "latLock", "integerArray", "numArray", " intlist", "latLIST", "charLIST", "charListener", "numlist", "integerlist", "intArray", "condList", "intLock", "IntL", "uintList", "initLIST", "intLeft", "INTListener", "condL", "Intlist", "charList", "IntLIST", " intListener", "condAdded", " intLIST", "condlist", " intArray", "integerList", "uintlist", "IntAdded", "intMap", "numLock", " intLock", "IntLock", "intAdded", "intListener", "INTLIST", "intlist", "IntMap", "initList", "uintL", "initMap", "integerLock", "latList", "charLeft", "numList", "IntList"], "sc": ["system", "sim", "cc", "cle", "tc", "cr", "capt", "rc", "cl", "sb", "bc", "cs", "esc", "Sc", "ctl", "ch", "osc", "pc", "isc", "cu", "sys", "mc", "scl", "c", "nc", "sh", "mp", "SC", "gc", "inc", "sw", "fc", "arc", "sv", "lc", "scan", "sp", "asc", "sec", "anc", "sch", "usc", "syn", "sq"], "count": ["current", "check", "ct", "page", "ount", "sequence", "test", "cc", "cache", "cat", "number", "q", "must", "ctr", "mount", "children", "wait", "continue", "scroll", "t", "cont", "coll", "counter", "index", "first", "start", "loop", "list", "client", "consider", "acc", "c", "cycle", "amount", "conf", "status", "next", "contact", "repeat", "add", "total", "num", "type", "chain", "const", "length", "base", "n", "Count", "ind", "now", "common", "child", "cond", "call", "key", "size", "old", "sum", "col", "batch", "find", "found", "nt"], "temp": ["Temp", "tem", "current", "cap", "term", "porary", "tmp", "perature", "test", "i", "copy", "tc", "mint", "fake", "unit", "t", "emp", "stem", "pt", "variable", "pre", "cu", "counter", "null", "acc", "template", "ptr", "mp", "iter", "txt", "local", "v", "output", "total", "deg", "orig", "raw", "relative", "cell", "const", "tr", "condition", "partial", "task", "max", "Temperature", "cold"], "j": ["oj", "b", "adj", "ja", "br", "i", "it", "ji", "jj", "jc", "jac", "q", "z", "uj", "bj", "k", "jump", "att", "jit", "json", "je", "kj", "journal", "kid", "jl", "obj", "jo", "g", "other", "v", "Ja", "aj", "ij", "jp", " J", "J", "jas", "dj", "n", "ind", "jack", "js", "y", "key", "x", "job"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main\\n{\\n  public static void main (String args[]) throws Exception\\n  {\\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt(), b = sc.nextInt();\\n    double p= a*b;\\n    if (p%2==0)\\n    \tSystem.out.println(\"Even\");\\n    else\\n    \tSystem.out.println(\"Odd\");\\n\\n    \\n  }\\n}", "target": "112", "substitutes": {"sc": [" Sc", "tch", "system", "syn", "sa", "cc", "cle", "cr", "tc", "ss", "capt", "rc", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ch", "pc", "isc", "osc", "sys", "mc", "c", "nc", "scl", "acc", "SC", "sw", "gc", "inc", "ctx", "sv", "lc", "scan", "sp", "ser", "asc", "ctrl", "sch", "sec", "anc", "usc", "irc", "sq"], "a": ["aff", "sta", "la", "apa", "oa", "sa", "aq", "i", "e", "ama", "am", "era", "t", "A", "au", "area", "ab", "ca", "ma", "ac", "ba", "ao", "ea", "xa", "ta", "an", "aa", "ia", "aj", "ar", "as", "ai", "alpha", "n", "va", "ach", "ae"], "b": ["B", "h", "m", "eb", "ob", "j", "bo", "br", "i", "e", "bi", "f", "bf", "r", "be", "u", "fb", "bs", "bc", "blue", "ab", "ib", "cb", "bis", "bb", "ba", "c", "db", "rb", "nb", "d", "v", "base", "n", "y", "l", "erb"], "p": ["per", "m", "P", "j", "pe", "i", "f", "par", "pb", "q", "r", "t", "lp", "pl", "vp", "perm", "pc", "dp", "pr", "pre", "tp", "part", "c", "pi", "g", "d", "v", "bp", "jp", "power", "n", "pa", "sp", "ps", "post", "o", "x", "pp", "l", "cp", "fp"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static Scanner sc = new Scanner(System.in);\\n    public void run() throws Exception {\\n\\n    \tScanner sc = new Scanner(System.in);\\n    \tlong aa[] = new long[4];\\n    \tlong a = sc.nextLong();\\n    \tlong b = sc.nextLong();\\n    \tlong c = sc.nextLong();\\n    \tlong d = sc.nextLong();\\n    \taa[0] = a*c;\\n    \taa[1] = a*d;\\n    \taa[2] = b*c;\\n    \taa[3] = b*d;\\n\\n    \tlong res = Long.MIN_VALUE;\\n    \tfor(int i=0; i<4;i++){\\n    \t\tif(res<aa[i]){\\n    \t\t\tres = aa[i];\\n    \t\t}\\n    \t}\\n\\n/*    \tint n = 5;\\n    \t\t\tint []aaa = {2, 0, 9, 0, -5};\\n    \t\t\tint res = -10000000;\\n    \t\t\tfor(int i=0; i<n;i++){\\n    \t\t\t\tif(res<aaa[i]){\\n    \t\t\t\t\tres = aaa[i];\\n    \t\t\t\t}\\n    \t\t\t}*/\\n\t\tSystem.out.println(res);\\n\t\t\\n\t\t\\n    }\\n    //\u518d\u5e30\\n    static long fib(int n){\\n\t    if (n <= 1){\\n\t    \treturn 1;\\n\t    }else{\\n\t    \treturn fib(n-1) + fib(n-2);\\n\t    }\\n\t}\\n\\n\\n    //\u52d5\u7684\u8a08\u753b\u6cd5 DP\\n    static long nCr(int n,int r) {\\n    \t  int dp[][]=new int[2001][2001];\\n    \t  for(int i=0;i<2001;i++) {\\n    \t    dp[0][i]=0;\\n    \t  }\\n    \t  for(int i=0;i<2001;i++) {\\n    \t    dp[i][0]=1;\\n    \t  }\\n    \t  for(int i=1;i<2001;i++) {\\n    \t    for(int j=1;j<2001;j++) {\\n    \t      if(i==j) {\\n    \t        dp[i][j]=1;\\n    \t      }else {\\n    \t        dp[i][j]=dp[i-1][j-1]+dp[i][j-1];\\n    \t      }\\n    \t    }\\n    \t  }\\n    \t  return dp[n][r];\\n    \t}\\n\\n    public static void main(String[] args) throws Exception {\\n        new Main().run();\\n    }\\n    //2 \u3064\u306e Key \u3092\u3082\u3064 Map.pair \u306f\u4e8c\u3064\u306e\u8981\u7d20\u3092\u5165\u308c\u308b\u5165\u308c\u7269\\n    class pair{\\n    \t  int wt,val;\\n    \t  pair(int wt,int val){\\n    \t    this.wt=wt;\\n    \t    this.val=val;\\n    \t  }\\n    }\\n}\\n", "target": "244", "substitutes": {"sc": [" Sc", "rs", "system", "cc", "ss", "cr", "tc", "rc", "ko", "cl", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "ctl", "go", "isc", "pc", "osc", "ch", "uc", "sys", "ck", " SC", "psc", "ner", "spec", "mc", " scr", "nc", " cle", "scl", "sci", "sh", "SC", "gc", "inc", "ctx", "fc", "sv", "scan", "lc", "sp", "cmp", "ser", "asc", " unsc", "conv", "ctrl", "sch", "sec", "usc", "sq"], "aa": ["aaa", "ii", "aff", "amba", "avi", "fee", "apa", "arb", "oa", "enna", "la", "aos", "ja", "aq", "sa", "pha", "oo", "AA", " va", "nn", "jj", "lu", "ya", "fn", "da", "aaaa", "earth", "eeee", "aye", "au", "rel", "area", "ua", "auc", "ah", "qa", "attr", "ll", "conn", "zero", "atha", "bb", "ma", "ooo", "ac", "ena", "ba", "af", "ea", "aka", "aha", "ta", "aug", "acl", "ava", "ga", "eta", "abc", "vo", "lla", "ee", "ppa", "xx", " fa", "na", "fr", "apt", "va", "expr", "fo", "pp", "ami", "ae", "fa"], "a": ["apa", "oa", "ap", "isa", "sa", "aq", "f", "am", "at", "t", "A", "au", "area", "ab", "ca", "ma", "ac", "p", "acc", "ba", "ao", "ea", "ta", "an", "ia", "aj", "ar", "ga", "as", "ai", "alpha", "pa", "na", "va", "ach", "al", "l", "ae"], "b": ["B", "h", "m", "ob", "j", "br", "e", "bi", "f", "bl", "bf", "r", "z", "be", "by", "fb", "u", "sb", "bc", "bs", "t", "ab", "ib", "gb", "bb", "p", "ba", "db", "rb", "nb", "g", "v", "n", "y", "o", "l", "wb"], "c": ["m", "con", "s", "cc", "e", "cat", "f", "tc", "cr", "r", "z", "u", "ci", "bc", "cs", "cm", "t", "cd", "com", "cb", "ch", "ca", "enc", "cf", "cu", "ac", "p", "gc", "g", "fc", "etc", "co", "dc", "ce", "lc", "n", "unc", "x", "C", "anc", "l", "cp"], "d": ["done", "h", "m", "j", "e", "f", "da", "r", "z", "dr", "t", "di", "D", "dra", "dd", "ld", "dt", "ctl", "dp", "bd", "p", "db", "ad", "w", "g", "dim", "td", "df", "dc", "de", "n", "dat", "ds", "sd", "o", "dh", "l"], "res": ["out", "sol", "br", "rep", "resolution", "rc", "r", "resp", "re", "des", "rel", "os", "exp", "rss", "rand", "req", "med", "result", "zero", "reg", "has", "vol", "pub", "cons", "RES", "results", "ms", "inv", "gr", "Res", "fr", "val", "def", "ps", "rest", "pres", "max", "ret", "reset", "rev", "ress", "rem", "mr", "red", "resh"], "i": ["ii", "phi", "m", "gu", "me", "j", "multi", "sim", "fi", "ri", "init", "bi", "it", "ji", "hi", "q", "u", "span", "ci", "di", "I", "mi", "info", "gi", "slice", "li", "ei", "si", "status", "pi", "iter", "iq", "ti", "g", "io", "cli", "ij", "ui", "ini", "ai", "ic", "us", "\u0438", "chain", "iu", "n", "ind", "ix", "id", "ip", "y", "is", "uri", "x", "im", "batch", "qi", "ki"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tInputStream in = System.in;\\n\tPrintStream out = System.out;\\n\\n\tpublic void _main(String[] args) {\\n\t\tScanner sc = new Scanner(in);\\n\\n\t\tint K = sc.nextInt();\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\t\\n\t\tsc.close();\\n\\n\t\tfor(int a=K;a<=B;a+=K) {\\n\t\t\tif(a>=A && a <= B) {\\n\t\t\t\tout.println(\"OK\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tout.println(\"NG\");\\n\t\t\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main()._main(args);\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate String join(String delimiter, int[] a) {\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\tfor (int i = 0; i < a.length; i++) {\\n\t\t\tsb.append(a[i]);\\n\t\t\tsb.append(delimiter);\\n\t\t}\\n\t\treturn sb.substring(0, Math.max(sb.length() - delimiter.length(), 0));\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate String join(String delimiter, long[] a) {\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\tfor (int i = 0; i < a.length; i++) {\\n\t\t\tsb.append(a[i]);\\n\t\t\tsb.append(delimiter);\\n\t\t}\\n\t\treturn sb.substring(0, Math.max(sb.length() - delimiter.length(), 0));\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate int max(int[] arr) {\\n\t\tif(arr == null || arr.length == 0) {\\n\t\t\tthrow new IllegalArgumentException(Arrays.toString(arr));\\n\t\t}\\n\\n\t\tint candidate = arr[0];\\n\t\tfor(int i=1;i<arr.length;i++) {\\n\t\t\tcandidate = candidate > arr[i] ? candidate : arr[i];\\n\t\t}\\n\t\treturn candidate;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate long max(long[] arr) {\\n\t\tif(arr == null || arr.length == 0) {\\n\t\t\tthrow new IllegalArgumentException(Arrays.toString(arr));\\n\t\t}\\n\\n\t\tlong candidate = arr[0];\\n\t\tfor(int i=1;i<arr.length;i++) {\\n\t\t\tcandidate = candidate > arr[i] ? candidate : arr[i];\\n\t\t}\\n\t\treturn candidate;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate int min(int[] arr) {\\n\t\tif(arr == null || arr.length == 0) {\\n\t\t\tthrow new IllegalArgumentException(Arrays.toString(arr));\\n\t\t}\\n\\n\t\tint candidate = arr[0];\\n\t\tfor(int i=1;i<arr.length;i++) {\\n\t\t\tcandidate = candidate < arr[i] ? candidate : arr[i];\\n\t\t}\\n\t\treturn candidate;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate long min(long[] arr) {\\n\t\tif(arr == null || arr.length == 0) {\\n\t\t\tthrow new IllegalArgumentException(Arrays.toString(arr));\\n\t\t}\\n\\n\t\tlong candidate = arr[0];\\n\t\tfor(int i=1;i<arr.length;i++) {\\n\t\t\tcandidate = candidate < arr[i] ? candidate : arr[i];\\n\t\t}\\n\t\treturn candidate;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate int[] nextIntArray(Scanner sc, int n) {\\n\t\tint[] result = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tresult[i] = sc.nextInt();\\n\t\t}\\n\t\treturn result;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate long[] nextLongArray(Scanner sc, int n) {\\n\t\tlong[] result = new long[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tresult[i] = sc.nextLong();\\n\t\t}\\n\t\treturn result;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate int[] nextIntArray1origin(Scanner sc, int n) {\\n\t\tint[] result = new int[n + 1];\\n\t\tfor (int i = 1; i <= n; i++) {\\n\t\t\tresult[i] = sc.nextInt();\\n\t\t}\\n\t\treturn result;\\n\t}\\n}\\n", "target": "28", "substitutes": {"in": ["rs", "inf", "In", "b", "con", "s", "it", "init", "doc", "str", "run", "f", "r", "file", "reader", "t", "read", "IN", "info", "up", "on", "from", "log", "gin", "null", "c", "inner", "ins", "inn", "data", "inc", "cin", "st", "io", "src", "ar", "input", "bin", "ini", "ic", "stream", "l", "ds", "din", "o", "is", "source", "err"], "out": ["m", "console", "s", "it", "f", "cache", "cmd", "error", "r", "OUT", "user", "ln", "t", "at", "format", "ou", "outs", "exit", "os", "outer", "info", "ch", "exec", "pretty", "sys", "Out", "log", "list", "report", "null", "p", "c", "print", "write", "w", "res", "v", "output", "io", "auto", "OU", "all", "screen", "co", "display", "conv", "over", "o", "writer", "sum", "err", "gt", "nt"], "sc": [" Sc", "cc", "tc", "ss", "cr", "ko", "cam", "rc", "cl", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "ch", "osc", "pc", "isc", "uc", "ck", "ner", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "sw", "inc", "fc", "ctx", "arc", "sv", "lc", "scan", "sp", "cmp", "asc", "conv", "sch", "sec", "anc", "usc", "syn", "sq", "tk"], "K": ["KA", "E", "Ka", "P", "F", "KI", "KE", "OK", "SK", "S", "G", "Sk", "I", "k", "D", "CP", "L", "V", "KS", "H", "N", "KN", "T", "J", "KING", "Q", "AK", "M", "R", "KK", "KC", "C", "Z", "KR", "X", "PK", "VK"], "A": ["AC", "AT", "E", "P", "LA", "AD", "AA", "AS", "Ant", "CA", "S", "BA", "RA", "AN", "AB", "I", "AST", "L", "SA", "AL", "V", "Am", "Ag", "ACC", "H", "ACT", "N", "AM", "An", "AU", "Av", "HA", "T", "ART", "Art", "TA", "AR", "U", "M", "R", "C", "X", "AP"], "B": ["E", "b", "P", "BB", "FB", "S", "BF", "BA", "G", "D", "AB", "I", "NB", "L", "BO", "BW", "V", "EB", "BI", "TB", "N", "BL", "BS", "IB", "Y", "T", "BR", "Bar", "DB", "J", "GB", "PB", "WB", "LB", "BU", "M", "R", "C", "SB", "BE", "O", "BC"], "a": ["aaa", "act", "b", "h", "sta", "apa", "la", "oa", "j", "ap", "isa", "sa", "eas", "f", "da", "sha", "am", "z", "abs", "era", "ed", "aaaa", "wa", "parts", "at", "t", "au", "area", "dev", "att", "ab", "ca", "qa", "ma", "app", "ac", "p", "acc", "ba", "ka", "ea", "ao", "aka", "xa", "ta", "an", "w", "aa", "array", "ia", "aj", "d", "v", "ata", "ar", "ga", "eta", "all", "as", "ai", "alpha", "pa", "na", "to", "va", "x", "ae", "fa"], "delimiter": ["delimator", "elamitter", "delumiter", "delimifier", "delrimit", "elimitor", "delalitor", "delimater", "delrimator", "delrimiter", "delimitor", "delalitter", "Delimater", "delaliter", "delomitor", "delomiter", "delimmator", "delimmitter", "delimmiter", "delamater", "delamifier", "Delamite", "delamit", "delimit", "elimator", "delumifier", "Delrimitter", "Delimite", "delalifier", "delumator", "elumifier", "Delamitter", "delamiter", "delrimifier", "elumator", "delrimitter", "delimitter", "delamator", "Delimiter", "elimifier", "delomifier", "elimitter", "Delimitter", "delomitter", "delrimater", "delumite", "delumitter", "delamitter", "delumitor", "elamiter", "elumitor", "elimiter", "delrimite", "Delamiter", "delumit", "delamite", "elamator", "Delimator", "elumiter", "Delrimiter", "Delrimater", "delimmater", "Delamator", "delimite", "Delrimator", "elumitter", "elamit", "elimit"], "sb": ["bps", "gob", "b", "sbm", "eb", "ob", "sa", "stab", "addr", "pb", "bf", "fb", "bj", "shell", "ubs", "bs", "rob", "web", "lp", "zb", "abb", "kb", "gb", "cb", "ib", "lb", "bis", "hh", "umb", "bg", "bb", "ssh", "bd", "xb", "np", "db", "sql", "rb", "sg", "ssl", "nb", "gc", "rub", "mb", "bp", "buff", "esm", "sl", "rpm", "bt", "sn", "sf", "bh", "dl", "sd", "bn", "lbs", "ctrl", "SB", "dh", "orb", "wb", "sq", "erb"], "i": ["ji", "hi", "q", "dr", "ci", "mi", "li", "my", "ij", "ui", "ini", "ai", "us", "or", "err", "ix", "m", "multi", "e", "bi", "f", "iy", "json", "ei", "print", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "eu", "init", "di", "resource", "info", "gi", "si", "ti", "io", "\u0438", "MI", "ip", "o", "PI", "qi", "phi", "xi", "me", "j", "sim", "it", "ims", "u", "set", "I", "ie", "ex", "g", "ic", "iu", "base", "is", "mac", "key", "x", "oi", "batch"], "arr": ["arb", "br", "ev", "bl", "rep", "r", "dr", "coll", "xxx", "att", "ab", "stack", "alg", "dar", "cur", "pr", "attr", "list", "obj", "db", "iq", "res", "aa", "ars", "ar", "ij", "all", "abc", "err", "expr", "rr", "parts", "pl", "gr", "tr", "now", "arg", "aaa", "rs", "buf", "dict", "row", "rel", "exp", "ll", "vol", "array", "arc", "arry", "val", "ray", "rest", "arp", "frac", "nt", "any", "img", "str", "ele", "abs", "inst", "au", "emb", "enc", "repl", "sys", "app", "null", "inv", "Array", "map", "fr", "elt", "amps", "batch"], "candidate": ["nomate", "validator", "charator", "continate", "continidate", "charpler", "candidation", "coordidate", "cellpler", "charidate", "valididate", "centate", "cellate", "nomator", "coordpler", "candate", "mandidates", "Candidates", "highidates", "mandidation", "nomidate", "celleter", "continator", "andator", "candette", "andidation", "candidates", "highette", "highidation", "mandette", "coordator", "Candette", "decidation", "candpler", "mintpler", "validpler", "nompler", "cellidate", "andidate", " candator", "candator", " candidation", "potator", "potate", "coordate", "decator", "mandidate", "mintidate", " candate", "decpler", "validate", "potidate", "Candidate", "centidate", "decidate", "charidation", "centeter", "potidation", "Candidation", "andpler", "candeter", "centpler", "mintate", "minteter", "continidation", "highidate"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\t\tsc.close();\\n\t\tint count = 0;\\n\\n\t\tfor(int i = 0; i < 4; i++) {\\n\t\t\tString syb = S.substring(i, i + 1);\\n\t\t\tif(syb.equals(\"+\")) {\\n\t\t\t\tcount++;\\n\t\t\t}else {\\n\t\t\t\tcount--;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\\n\t}\\n}", "target": "54", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "capt", "rc", "ko", "cl", "bc", "cs", "sac", "ec", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "uc", "sys", "ck", "mc", "c", "nc", "sh", "SC", "gc", "inc", "arc", "sv", "lc", "scan", "RC", "sp", "sel", "asc", "sec", "anc", "sch", "usc", "Sync", "syn", "sq"], "S": ["SM", "P", "F", "s", "SN", "G", "CS", "I", "SER", "SA", "V", "SF", "RS", "SE", "SI", "SP", "H", "N", "BS", "IS", "Si", "SL", "SQL", "SU", "ASS", "US", "Q", "SS", "SH", "GS", "SOURCE", "TS", "C", "SAM", "SB", "JS"], "count": ["current", "check", "soft", "ct", "quiet", "flag", "ount", "value", "test", "cache", "number", "must", "ctr", "hold", "scroll", "ph", "coll", "force", "result", "zero", "index", "counter", "list", "report", "acc", "c", "amount", "code", "status", "score", "trace", "summary", "nb", "other", "add", "total", "make", "num", "state", "const", "cell", "length", "n", "Count", "ind", "cond", "stats", "child", "call", "size", "stat", "sum", "C", "find", "found", "nt"], "i": ["ii", "phi", "m", "gu", "me", "xi", "multi", "j", "sim", "ri", "init", "it", "bi", "ji", "ik", "hi", "q", "u", "ci", "t", "di", "I", "set", "k", "mi", "ie", "gi", "start", "index", "li", "p", "ei", "si", "print", "pi", "ex", "iq", "iter", "ti", "g", "cli", "ij", "zi", "ui", "ms", "ini", "ai", "ic", "us", "l", "iu", "n", "ix", "ind", "id", "ip", "is", "uri", "x", "im", "batch", "qi", "ki"], "syb": ["syna", "nybb", "sheb", "sybg", " sybg", " syB", "SYB", " syfb", "nyfb", " sybb", "SYbg", "syfb", "synbg", "synB", " sya", "sya", "nynb", "shebb", "shefb", "syB", "SYa", " synb", "nyb", "SYb", "sybb", "synb", "shenb"]}}
{"code": "import java.io.*;\\n\\npublic class Main{\\n    public static void main(String[] args) throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String[] input = br.readLine().split(\" \");\\n        \\n        int tate = Integer.parseInt(input[0]);\\n        int yoko = Integer.parseInt(input[1]);\\n        if(tate < 1 || yoko < 1 || tate > 100 || yoko > 100){\\n            System.out.println(\"Error\");\\n        }\\n        \\n        int men = 0;\\n        int nag = 0;\\n        \\n        men = tate * yoko;\\n        nag = (tate + yoko) * 2;\\n        \\n        System.out.println(men + \" \" + nag);\\n    }\\n\\n}", "target": "92", "substitutes": {"br": ["bridge", "out", "lr", "Br", "shr", "bl", "str", "cr", "bf", "dr", "be", "kr", "bs", "bc", "buf", "ch", "repl", "pr", "bg", "next", "bd", "hr", "db", "rb", "bro", "bp", "gr", "vr", "bt", "div", "tr", "sp", "fr", "bn", "bh", "ber", "wr", "browser", "mr", "BR"], "input": ["check", "char", "init", "it", "supp", "submit", "q", "in", "put", "hello", "focus", "select", "set", "history", "att", "feed", "lat", "qa", "up", "start", "control", "spec", "query", "print", "form", "request", "parse", "get", "output", "my", "add", "raw", "active", "pull", "Input", "base", "ix", "join", "pattern", "view", "def", "ip", "source", "sum", "batch", "PUT", "qi"], "tate": ["yare", " tating", " tated", "fortation", "tdate", "yato", "tated", "ttinate", "yorate", "ptation", "natus", "yatus", "latation", "dtate", "tato", "torate", "ptato", "tat", "tdare", " tinate", "nati", "yated", "ninate", "nation", " tatus", "dtat", "nat", "dtated", "mtare", "ptated", "tati", "tdational", "tare", " tation", "mtational", "latating", "nated", "nate", "ptate", "mtate", "ptatus", "ttati", "tdorate", "tatus", "tation", "fortatus", "fortating", "yational", "ptat", "dtation", " tati", "ttatus", "tational", "latatus", "fortate", "tinate", "latate", " tato", "tating", "ttate", "mtorate", "yate"], "yoko": ["myku", " yomi", "Yoko", "myazo", "eyoki", "eyoko", "Yku", "yazo", "nykok", "yko", "nyoku", "eyku", "eyomi", "nyko", "yoku", " yazo", "nyku", "yoki", " yku", "Ykok", "nyazo", "nyoki", "ykok", "myoko", "nyomi", "yomi", "nyoko", "eyoku", "eyko", "Yko", "myko", " ykok", "yku", " yoku", " yoki", " yko", "Yoki"], "men": ["vale", "mens", "me", "mun", "phas", "mon", "mont", "MAN", "hung", "mel", "mails", "prim", "mint", "suits", "ml", "hol", "phones", "mins", "beer", "MEN", "mons", "pers", "hands", "pl", "mn", "mers", "emen", "forth", "ven", "makers", "fen", "cons", "immers", "ten", " Men", "mad", "erman", "Men", "agen", "mas", "mares", "don", "inen", "circ", "users", "pres", "finals", "aim", "man", "ming"], "nag": ["mudge", "anags", "snag", "Nag", "nonog", "nagger", "neagle", "Nagger", "snog", "magger", "anagger", "nig", "anag", " nog", "neog", "nonagger", "nonag", " nagger", "nags", " nags", " nang", " nagle", "nonudge", "Nang", " nudge", "neag", "nudge", "snagle", "neig", "snig", "mog", "mag", "nagle", "Nags", " nig", "anang", "nog", "nang"]}}
{"code": "import static java.lang.Integer.*;\\nimport static java.lang.Long.*;\\nimport static java.lang.System.*;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n    static void solve() throws Exception {\\n        for (int i = 1; i <= 5; i++) {\\n            if (scanInt() == 0) {\\n                System.out.println(i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    static int scanInt() throws IOException {\\n        return parseInt(scanString());\\n    }\\n\\n    static long scanLong() throws IOException {\\n        return parseLong(scanString());\\n    }\\n\\n    static String scanString() throws IOException {\\n        while (tok == null || !tok.hasMoreTokens()) {\\n            tok = new StringTokenizer(in.readLine());\\n        }\\n        return tok.nextToken();\\n    }\\n\\n    static BufferedReader in;\\n    static PrintWriter out;\\n    static StringTokenizer tok;\\n\\n    public static void main(String[] args) {\\n        try {\\n            in = new BufferedReader(new InputStreamReader(System.in));\\n            out = new PrintWriter(System.out);\\n            solve();\\n            in.close();\\n            out.close();\\n        }\\n        catch (Throwable e) {\\n            e.printStackTrace();\\n            exit(1);\\n        }\\n    }\\n}", "target": "222", "substitutes": {"i": ["ii", "phi", "m", "me", "j", "multi", "sim", "init", "bi", "it", "hi", "number", "q", "z", "u", "yi", "ci", "t", "di", "I", "k", "mi", "gi", "index", "client", "mu", "li", "p", "ei", "si", "c", "pi", "iter", "iq", "ti", "a", "my", "cli", "ui", "ms", "ini", "ai", "ic", "us", "l", "integer", "iu", "n", "ix", "ind", "id", "ip", "y", "is", "x", "im", "batch", "qi", "ki"], "tok": ["tyoc", " tax", "Top", "thork", "ltok", "tax", "Toc", "toks", "untko", "thok", " tork", "thax", "stko", "tyop", "vtok", "top", "untok", "untop", "untoks", "vtot", "vtop", "vtoke", "Tot", " toc", "Tork", "tol", "ltol", "tork", "thk", "vtko", "ltoc", "Tax", "Tok", "tot", "tyok", "toc", "ttoke", "tyko", " top", " tol", "stop", "ttoc", "Tol", "ttot", "stok", "Toke", "Tk", "vtoc", "ttok", "toke", "stoc", "Toks", "tko", "Tko", " toke", "vtoks", " tk", "ltoke", " tko", "tk"], "in": ["m", "In", "inf", "h", "con", "isin", "it", "doc", "lin", "str", "run", "init", "r", "file", "dr", "body", "rin", "reader", "t", "mi", "read", "IN", "on", "from", "line", "gin", "null", "en", "ins", "inner", "ain", "inside", "inc", "inn", "data", "iter", "cin", "io", "output", "input", "raw", "bin", "ini", "or", "stream", "Input", "n", "nin", "err", "ind", "id", "ry", "din", "is", "old", "source", "im", "al", "l", "rt"], "out": ["b", "msg", "system", "can", "aos", "it", "cat", "net", "put", "OUT", "by", "window", "t", "at", "exit", "outs", "ou", "os", "outer", "ne", "conn", "sys", "client", "Out", "log", "er", "report", "null", "p", "print", "status", "inner", "ot", "ex", "obj", "write", "txt", "w", "res", "v", "output", "io", "all", "screen", "or", "co", "ns", "gr", "n", "dis", "ver", "to", "flush", "o", "writer", "cn", "err", "stable", "OU", "nt"]}}
{"code": "import java.io.InputStream;\\nimport java.io.IOException;\\nimport java.util.NoSuchElementException;\\n\\n/*\\n*\u5165\u529b\u306fA, B, C\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3001String#toLowerCase()\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u3088\u3044\\n*\u5927\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b32\u3092\u8db3\u3059\u3068\u5c0f\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u306a\u308b\\n*/\\npublic class Main {\\n    public static void main(String[] args) {\\n        MyScanner sc = new MyScanner();\\n        int n = sc.nextInt();\\n        int k = sc.nextInt();\\n        String s = sc.next();\\n        char[] charArray = s.toCharArray();\\n\\n        charArray[k - 1] += 32;\\n\\n        System.out.println(String.valueOf(charArray));\\n    }\\n}\\n\\nclass MyScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int pointer = 0;\\n    private int bufLength = 0;\\n\\n    private boolean hasNextByte() {\\n        if (pointer < bufLength) {\\n            return true;\\n        } else {\\n            pointer = 0;\\n            try {\\n                bufLength = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (bufLength <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int readByte() {\\n        if (hasNextByte()) {\\n            return buffer[pointer++];\\n        } else {\\n            return -1;\\n        }\\n    }\\n\\n    private static boolean isNumberChar(int c) {\\n        return '0' <= c && c <= '9';\\n    }\\n\\n    private static boolean isPrintableChar(int c) {\\n        return 33 <= c && c <= 126;\\n    }\\n\\n    public boolean hasNext() {\\n        while (hasNextByte() && !isPrintableChar(buffer[pointer])) {\\n            pointer++;\\n        }\\n        return hasNextByte();\\n    }\\n\\n    public String next() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while(isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        long num = 0;\\n        boolean isNegative = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            isNegative = true;\\n            b = readByte();\\n        }\\n        if (!isNumberChar(b)) {\\n            throw new NumberFormatException();\\n        }\\n        while (true) {\\n            if (isNumberChar(b)) {\\n                num *= 10;\\n                num += b - '0';\\n            } else if (b == -1 || !isPrintableChar(b)) {\\n                return isNegative ? -num : num;\\n            } else {\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n\\n    public int nextInt() {\\n        long temp = nextLong();\\n        if (temp < Integer.MIN_VALUE || Integer.MAX_VALUE < temp) {\\n            throw new NumberFormatException();\\n        }\\n        return (int) temp;\\n    }\\n\\n    public double nextDouble() {\\n        return Double.parseDouble(next());\\n    }\\n}\\n", "target": "71", "substitutes": {"sc": ["sim", "cc", "tc", "ss", "cr", "rc", "cl", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "uc", "sys", "mc", "scl", "nc", "sh", "SC", "gc", "inc", "arc", "sv", "lc", "sp", "cmp", "asc", "ctrl", "sch", "sec", "anc", "usc", "syn", "sq"], "n": ["m", "h", "j", "nn", "ln", "t", "nr", "ne", "mn", "on", "nm", "p", "nc", "N", "nb", "g", "d", "v", "nu", "ns", "nl", "sn", "cn", "l", "nt"], "k": ["mk", "m", "j", "dk", "i", "ke", "ik", "q", "kn", "r", "z", "kr", "km", "ok", "row", "t", "pos", "ak", "kid", "p", "ks", "ka", "kl", "w", "g", "v", "K", "kk", "kw", "y", "o", "max", "x", "key", "ek", "size"], "s": ["rs", "m", "string", "i", "e", "str", "ss", "S", "r", "bs", "t", "os", "sys", "gs", "p", "sw", "w", "v", "a", "src", "strings", "sv", "sl", "sf", "sp", "ps", "js", "ls", "ts", "is", "source", "l", "sq"], "charArray": ["stringMap", "chararray", "wordarray", "byteArray", "strList", " charArea", "stringArray", "CharRAY", "byteA", "CharArray", "chArray", "carMap", "strRAY", " charList", "charList", "strA", "strArray", "chRAY", " charRAY", "chA", " charMap", "wordArray", "stringList", "byteList", "Chararray", "carList", "chList", "carArray", "charMap", "wordRAY", " chararray", "charRAY", "charArea", "stringArea", "charA", "byteRAY", "carArea"], "in": ["out", "inf", "In", "m", "h", "con", "i", "it", "f", "run", "r", "file", "rin", "t", "IN", "info", "on", "from", "log", "ma", "ac", "en", "ins", "inner", "conf", "ex", "inn", "inc", "get", "cin", "io", "a", "ar", "input", "all", "ini", "ic", "as", "us", "stream", "err", "ind", "to", "mm", "din", "is", "im", "l", "win"], "buffer": ["queue", "store", "message", "page", "library", "binary", "address", "sequence", "char", "command", "value", "cache", "bone", "number", "face", "window", "buf", "reference", "button", "frame", "read", "limit", "stack", "result", "variable", "index", "match", "code", "template", "document", "maximum", "iter", "data", "buff", "output", "mem", "memory", "block", "screen", "stream", "length", "bar", "display", "phrase", "table", "Buffer", "size", "database", "reset", "source", "batch", "header"], "pointer": ["pointers", "offset", "current", "inter", "page", "policy", "feature", "context", "address", "dimension", "magic", "forward", "top", "peer", "atomic", "continue", "property", "operation", "reference", "location", "frame", "padding", "resource", "button", "iterator", "points", "slot", "handler", "seek", "pc", "Ptr", "pod", "connection", "counter", "index", "tip", "finder", "client", "next", "p", "point", "processor", "past", "inner", "ptr", "request", "maximum", "trace", "zone", "axis", "path", "memory", "column", "step", "relative", "shift", "chain", "length", "snap", "direction", "device", "collection", "condition", "key", "position", "positive", "reset", "primary", "fp"], "bufLength": ["ufLen", "bufENGTH", "ufLength", " bufSize", "ufCount", "vecENGTH", "bufferLength", "bufflength", "buffLength", "buffENGTH", "vecSize", "buffCount", "bufferENGTH", " bufCount", "bufferSize", "vecLength", "bufferLen", "buffLen", " bufENGTH", "buflength", " bufLen", " buflength", "uflength", "buffSize", "vecLen", "bufSize", "bufCount", "bufferCount", "bufLen"], "c": ["cap", "m", "h", "con", "ct", "category", "cc", "i", "cat", "f", "cache", "e", "rc", "z", "u", "bc", "cs", "ec", "t", "cont", "cm", "cd", "cb", "ca", "ch", "pc", "content", "cur", "cu", "cf", "uc", "ac", "p", "mc", "code", "count", "gc", "fc", "cut", "v", "d", "a", "etc", "cod", "abc", "const", "cell", "dc", "ce", "lc", "fac", "cond", "cmp", "y", "conv", "unc", "x", "C", "col", "l", "cp", "vc"], "sb": ["gob", "sbm", "eb", "ob", "bsp", "sa", "ub", "pb", "bf", "bj", "bs", "rob", "lp", "zb", "kb", "cb", "gb", "ib", "lb", "bg", "bb", "ssh", "bd", "xb", "db", "rb", "sg", "nb", "ssl", "bp", "mb", "bt", "sf", "sp", "bh", "SB", "wb", "sq", "erb"], "b": ["B", "h", "eb", "ob", "j", "binary", "br", "i", "ub", "bi", "f", "e", "pb", "bf", "r", "be", "fb", "bs", "bc", "t", "ab", "cb", "emb", "ib", "gb", "bis", "beta", "bg", "bb", "back", "bd", "p", "xb", "db", "rb", "nb", "d", "bp", "a", "mb", "buff", "v", "bin", "bar", "bt", "base", "bound", "y", "o", "reb", "l", "wb"], "num": ["um", "m", "umber", "con", "Num", "number", "buf", "set", "NUM", "dec", "index", "nm", "en", "count", "nb", "g", "d", "no", "nu", "add", "mem", "id", "val", "bn", "conv", "valid", "sum"], "isNegative": ["isRelitive", " isRelativity", "isPosational", "isnegATIVE", "isNegativity", " isNegATIVE", "isnegative", "isRelational", "isIteritive", "isRelative", "isPositive", "isIterative", "isSignative", " isRelational", "isIterativity", "isRelativity", "isSignational", "isnegational", " isNegational", "isNegational", "isRelATIVE", "isNegitive", " isRelATIVE", " isNegitive", "isSignitive", "isnegitive", "isNegATIVE", " isNegativity", "isSignATIVE", "isIterational", "isPosative", "isPosativity", " isRelative", " isRelitive"]}}
{"code": "import java.util.Scanner;\\nclass Main {\\n  public static void main(String args[]){\\n    Scanner  sc = new Scanner(System.in);\\n    long n , k ,i,t;\\n    n = sc.nextLong();\\n    k = sc.nextLong();\\n    i = n%k;\\n    t = Math.abs(k-i);\\n    if(i > t){\\n      i = t;\\n    }\\n    System.out.println(i);\\n  }\\n}\\n", "target": "22", "substitutes": {"sc": [" Sc", "ng", "system", "cc", "tc", "cr", "ss", "rc", "pb", "ko", "cl", "bc", "cs", "desc", "esc", "Sc", "ctl", "se", "ch", "osc", "pc", "isc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "SC", "gc", "inc", "ctx", "sv", "nl", "dc", "lc", "scan", "sp", "asc", "conv", "sch", "anc", "usc", "sq"], "n": ["ng", "m", "nan", "ny", "Ni", "nn", "net", "fn", "ln", "nr", "ne", "network", "ll", "ni", "nm", "en", "p", "np", "nc", "gn", "c", "N", "nb", "w", "d", "no", "nu", "v", "wn", "ns", "un", "num", "nl", "sn", "na", "o", "cn", "l", "nt"], "k": ["mk", "m", "j", "dk", "sk", "ke", "ik", "ko", "kn", "q", "kt", "kr", "km", "ok", "wk", "kh", "kb", "ak", "kick", "uk", "kj", "ck", "kl", "ka", "ks", "ku", "g", "K", "kan", "kk", "length", "kw", " K", "kok", "max", "ek", "tk", "ki"], "i": ["ii", "phi", "m", "xi", "ri", "j", "it", "bi", "f", "ik", "hi", "q", "in", "u", "yi", "ci", "di", "I", "mi", "gi", "index", "li", "p", "ei", "si", "c", "pi", "ta", "ti", "d", "v", "io", "cli", "iri", "ij", "ui", "ini", "ic", "ai", "iu", "ix", "ind", "id", "ip", "is", "im", "oi", "l", "ir", "qi", "ki"], "t": ["ty", "m", "term", "it", "test", "tc", "q", "kt", "temp", "fort", "at", "wt", "tz", "dt", "ut", "pt", "tw", "tp", "p", " T", "ot", "ta", "trace", "g", "st", "v", "tv", "T", "total", "mt", "type", "tm", "tree", "tr", "to", "y", "ts", "vt", "ent", "tt", "l", "te", "rt", "tf", "nt"]}}
{"code": "import java.util.*; import java.io.*; import java.math.*;\\npublic class Main{\\n\t//Don't have to see. start------------------------------------------\\n\tstatic class InputIterator{\\n\t\tArrayList<String> inputLine = new ArrayList<String>(1024);\\n\t\tint index = 0; int max; String read;\\n\t\tInputIterator(){\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\ttry{\\n\t\t\t\twhile((read = br.readLine()) != null){\\n\t\t\t\t\tinputLine.add(read);\\n\t\t\t\t}\\n\t\t\t}catch(IOException e){}\\n\t\t\tmax = inputLine.size();\\n\t\t}\\n\t\tboolean hasNext(){return (index < max);}\\n\t\tString next(){\\n\t\t\tif(hasNext()){\\n\t\t\t\treturn inputLine.get(index++);\\n\t\t\t}else{\\n\t\t\t\tthrow new IndexOutOfBoundsException(\"There is no more input\");\\n\t\t\t}\\n\t\t}\\n\t}\\n\tstatic HashMap<Integer, String> CONVSTR = new HashMap<Integer, String>();\\n\tstatic InputIterator ii = new InputIterator();//This class cannot be used in reactive problem.\\n\tstatic PrintWriter out = new PrintWriter(System.out);\\n\tstatic void flush(){out.flush();}\\n\tstatic void myout(Object t){out.println(t);}\\n\tstatic void myerr(Object t){System.err.print(\"debug:\");System.err.println(t);}\\n\tstatic String next(){return ii.next();}\\n\tstatic boolean hasNext(){return ii.hasNext();}\\n\tstatic int nextInt(){return Integer.parseInt(next());}\\n\tstatic long nextLong(){return Long.parseLong(next());}\\n\tstatic double nextDouble(){return Double.parseDouble(next());}\\n\tstatic ArrayList<String> nextStrArray(){return myconv(next(), 8);}\\n\tstatic ArrayList<String> nextCharArray(){return myconv(next(), 0);}\\n\tstatic ArrayList<Integer> nextIntArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Integer> ret = new ArrayList<Integer>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Integer.parseInt(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic ArrayList<Long> nextLongArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Long> ret = new ArrayList<Long>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Long.parseLong(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic String myconv(Object list, int no){//only join\\n\t\tString joinString = CONVSTR.get(no);\\n\t\tif(list instanceof String[]){\\n\t\t\treturn String.join(joinString, (String[])list);\\n\t\t}else if(list instanceof ArrayList){\\n\t\t\treturn String.join(joinString, (ArrayList)list);\\n\t\t}else{\\n\t\t\tthrow new ClassCastException(\"Don't join\");\\n\t\t}\\n\t}\\n\tstatic ArrayList<String> myconv(String str, int no){//only split\\n\t\tString splitString = CONVSTR.get(no);\\n\t\treturn new ArrayList<String>(Arrays.asList(str.split(splitString)));\\n\t}\\n\tpublic static void main(String[] args){\\n\t\tCONVSTR.put(8, \" \"); CONVSTR.put(9, \"\\n\"); CONVSTR.put(0, \"\");\\n\t\tsolve();flush();\\n\t}\\n\t//Don't have to see. end------------------------------------------\\n\tstatic void solve(){//Here is the main function\\n      int A = nextInt();\\n      int B = nextInt();\\n      myout(A ^ B);\\n\t}\\n\t//Method addition frame start\\n\\n\\n\\n\t//Method addition frame end\\n}\\n", "target": "236", "substitutes": {}}
{"code": "\\nimport java.math.BigDecimal;\\nimport java.math.RoundingMode;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n    // \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\\n    BigDecimal R = new BigDecimal(sc.nextInt());\\n    BigDecimal S = R.multiply(new BigDecimal(2)).setScale(100, RoundingMode.HALF_UP);\\n\\n    System.out.println(S.multiply(new BigDecimal(\"3.1415\")).setScale(100, RoundingMode.HALF_UP));\\n  }\\n}\\n", "target": "167", "substitutes": {"sc": [" Sc", "sk", "sa", "ss", "cr", "rc", "sb", "cs", " rc", "Sc", "se", "ch", "sys", " SC", " scr", "c", "SC", "sw", " sk", "scan", " sp", "sp", "sel", "na", "ser", " unsc", "sq", "tk"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(\\n\t\t\t\tSystem.in));\\n\t\tint x = Integer.parseInt(reader.readLine());\\n\t\tint ans = x * x * x;\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "36", "substitutes": {"reader": ["rd", "rot", "message", "rx", "radio", "context", "service", "rar", "r", "rl", "dr", "file", "driver", "row", "iterator", "handler", "read", "socket", "this", "info", "linger", "cur", "buffer", "client", "er", "entry", "ro", "parser", "inner", "anger", "loader", "input", "ipper", "Reader", "stream", "length", "today", "view", "builder", "writer", "upper", "definition", "red", "rr"], "x": ["m", "h", "xi", "rx", "xp", "s", "xe", "i", "xs", "pan", "f", "dx", "ox", "z", "mx", "ci", "t", "xxx", "tx", "xes", "ux", "index", "ax", "p", "c", "xa", "ex", "an", "w", "v", "a", "xxxx", "xf", "xx", "n", "xt", "ix", "xc", "inx", "y", "px", "l", "X", "wx"], "ans": ["posts", "s", "can", "ats", "aos", "rans", "nan", "aned", "pan", "ann", "ians", "lan", "ran", "ands", "ens", "aus", "outs", "ean", "works", "ams", "anes", "offs", "aps", "ks", "ins", "an", "aces", "ros", "cons", "ars", "ms", "ents", "as", "arms", "ns", "ants", "mas", "ons", "arts", "ls", "ANS", "amps", "ana", "ads"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tdouble s[]=new double[n];\\n\t\t\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\ts[i]=sc.nextDouble();\\n\t\t}\\n\t\tfor(int i=0;i<n-1;i++) {\\n\t\t\t\\n\t\t\tfor(int j=n-1;j>i;j--) {\\n\t\t\t\tif(s[j-1]>s[j]) {\\n\t\t\t\t\tdouble c=s[j];\\n\t\t\t\t\ts[j]=s[j-1];\\n\t\t\t\t\ts[j-1]=c;\\n\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0;i<n-1;i++) {\\n\t\t\ts[i+1]=((s[i]+s[i+1])/2);\\n\t\t}\\n\t\tSystem.out.println(s[n-1]);\\n\t\t\t\\n\t\t\\n\t\t\\n\t}\\n\\n}", "target": "232", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n        boolean isGood = true;\\n        for (int i=1; i<=s.length(); i++) {\\n            if (i % 2 == 0) {\\n                if (!(s.charAt(i-1) == 'L' || s.charAt(i-1) == 'U' || s.charAt(i-1) == 'D')) {\\n                    isGood = false;\\n                    break;\\n                }\\n            } else {\\n                if (!(s.charAt(i-1) == 'R' || s.charAt(i-1) == 'U' || s.charAt(i-1) == 'D')) {\\n                    isGood = false;\\n                    break;\\n                }\\n            }\\n        }\\n        System.out.print(isGood ? \"Yes\" : \"No\");\\n    }\\n}", "target": "205", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "ok", "ec", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "cur", "uc", "sys", "mc", "scl", "c", "nc", "sub", "SC", "gc", "sv", "nl", "lc", "scan", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "sq"], "s": ["hs", "rs", "vs", "m", "h", "string", "its", "ats", "str", "xs", "ss", "ims", "S", "sb", "r", "gets", "abs", "bs", "cs", "parts", "t", "os", "news", "bits", "bis", "qs", "sys", "spec", "gs", "p", "c", "ins", "sql", "sw", "comm", "g", "less", "strings", "sv", "ms", "ws", "sl", "ns", "n", "sts", "sp", "ds", "ps", "js", "conv", "ls", "ts", "is", "l", "sq"], "i": ["ji", "hi", "ci", "mi", "mu", "li", "list", "v", "my", "ui", "ini", "ai", "them", "us", "ix", "m", "multi", "bi", "f", "user", "go", "ei", "status", "pi", "a", "cli", "chain", "n", "id", "y", "uri", "im", "ami", "ki", "ii", "ri", "init", "di", "info", "gi", "index", "si", "ski", "sql", "ti", "io", "\u0438", "sp", "ind", "to", "ip", "o", "ori", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "z", "u", "span", "t", "set", "I", "this", "series", "slice", "p", "g", "ic", "iu", "is", "key", "x", "oi", "batch"], "isGood": ["IsBad", "hasgood", "hasGood", "ISgood", "isDifferent", "ciGood", " IsGood", "aceGood", "ciDifferent", "IsOk", "ciGreat", "aceDifferent", "aceGreat", "ISGreen", " isgood", "ISGood", "isaGood", "isiGood", " IsValid", "ciCold", "isaGreen", "isValid", " isOk", "hasOk", "hasValid", "isGreat", "isBad", " isBad", "isgood", " isBased", "isiDifferent", " IsBad", "isOk", "Isgood", "isBased", "aceCold", "isiCold", "isGreen", "ISBased", "isiGreat", "isagood", "isaBased", "IsGood", " Isgood", "isCold", "IsValid", " isValid", " isGreen"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){ \\n\t\tScanner sc = new Scanner(System.in);\\n      \t//N\u500b\u306e\u90fd\u5e02\\n\t\tint N = sc.nextInt();\\n      \t//M\u672c\u306e\u9053\u8def\\n        int M = sc.nextInt();\\n      \t//\u6570\u5b57\u306e\u7d44\u307f\u5408\u308f\u305b\u5165\u529b\\n      \tint Road[] = new int[N];\\n      \tfor(int i = 0;i < M * 2;i++){\\n\t\t  Road[sc.nextInt()-1] += 1;\\n        }\\n      \tfor(int i = 0;i < N; i++){\\n          System.out.println(Road[i]); \\n        }\\n    }\\n}", "target": "57", "substitutes": {"sc": [" Sc", " ss", "system", "sa", "cr", "ss", "rc", "sb", "cs", "Sc", "ch", " sw", "sys", "proc", " SC", " scr", "c", "SC", "sv", " sk", " sh", "scan", " sp", "sp", " cr", " sa", " scorer", "sq"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n  public static void main (String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n    \\n    int N = sc.nextInt();\\n    int M = sc.nextInt();\\n    \\n    int[] L = new int[M];\\n    int[] R = new int[M];\\n\\n    for (int i = 0; i < M; i++) {\\n      L[i] = sc.nextInt();\\n      R[i] = sc.nextInt();\\n    }\\n\\n    sc.close();\\n\\n    int min = 0;\\n    int max = N;\\n\\n    for (int i = 0; i < M; i++) {\\n      min = Math.max(L[i], min);\\n      max = Math.min(R[i], max);\\n    }\\n\\n    if (max < min){\\n      System.out.println(0);\\n    } else {\\n      System.out.println(max - min + 1);\\n    }\\n \\n  }\\n\\n}", "target": "124", "substitutes": {"sc": [" Sc", "system", "cc", "tc", "cr", "ss", "rc", "pb", "capt", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "c", "nc", "sh", "sci", "sub", "SC", "gc", "sw", "inc", "fc", "arc", "ctx", "st", "sv", "screen", "co", "dc", "scan", "lc", "sp", "asc", "cgi", "ctrl", "sec", "anc", "sch", "usc", "irc", "sq"], "N": ["P", "F", "NN", "Ns", "NI", "MAX", "Ni", "Num", "S", "NR", "SN", "G", "AN", "NS", "I", "A", "NC", "ND", "V", "Size", "Max", "NM", "MN", "H", "NT", "NA", "Y", "T", "K", "J", "n", "No", "C", "X"], "M": ["DM", "B", "MAT", "E", "m", "P", "F", "TM", "MAN", "RM", "MM", "CM", "S", "G", "LM", "MO", "I", "D", "MU", "MP", "MA", "V", "NM", "MN", "H", "MD", "MC", "T", "K", "PM", "IM", "MB", "J", "MT", "MS", "MI", "C", "Z", "O"], "L": ["B", "LOC", "XL", "LA", "DL", "LP", "LR", "ML", "LL", "LO", "LIN", "LG", "S", "NL", "LM", "LT", "I", "LV", "V", "GL", "LC", "CL", "BL", "LU", "SL", "T", "PL", "LE", "FL", "TL", "LS", "LB", "LI", "EL", "l", "LD"], "R": ["RO", "B", "PR", "P", "RT", "GR", "RM", "r", "S", "Rs", "NR", "G", "RP", "RA", "CR", "I", "D", "RH", "RF", "RE", "V", "RS", "VR", "H", "Y", "T", "MR", "RES", "RG", "J", "RR", "DR", "ER", "SR", "RC", "Res", "AR", "C", "X", "BR"], "i": ["ji", "hi", "q", "ci", "iso", "mi", "php", "list", "li", "my", "ij", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "bi", "ik", "iy", "json", "ei", "c", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "fi", "init", "sequence", "details", "fire", "di", "info", "gi", "si", "ti", "io", "\u0438", "ind", "to", "ip", "cgi", "o", "ori", "qi", "phi", "xi", "me", "j", "sim", "it", "u", "set", "ie", "series", "client", "point", "inner", "iter", "g", "ic", "iu", "base", "is", "key", "oi", "batch"], "min": ["range", "current", "m", "me", "lower", "low", "sol", "minimum", "lo", "doc", "admin", "mel", "in", "none", "mins", "span", "Min", "MIN", "only", "mid", "sort", "member", "window", "lock", "mi", "rel", "diff", "before", "info", "ne", "hide", "start", "pre", "first", "from", "minus", "next", "sub", "part", "inner", "method", "local", "get", "sin", "st", "no", "add", "left", "step", "shift", "search", "small", "last", "average", "begin", "mini", "lt", "default", "mean", "minute", "cmp", "call", "stat", "just", "initial", "l", "amin", "sample", "mod"], "max": ["h", "cover", "r", "re", "rand", "huge", "Max", "box", "w", "res", "scale", "v", "all", "work", "gt", "m", "can", "right", "ax", "recent", "maximum", "root", "total", "dot", "div", "n", "now", "upper", "sum", "hash", "mod", "range", "current", "MAX", "full", "none", "mx", "window", "cross", "k", "diff", "exp", "med", "up", "start", "index", "est", "conf", "add", "default", "to", "rest", "size", "grow", "act", "after", " MAX", "t", "set", "limit", "ext", "height", "first", "ma", "ex", "major", "end", "auto", "step", "mad", "inv", "last", "base", "fr", "mean", "x"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n  \tlong k=sc.nextLong();\\n  \tint n=sc.nextInt();\\n  \tlong[] ai=new long[n];\\n  \tfor(int i=0;i<n;i++){\\n  \t\tai[i]=sc.nextLong();\\n  \t}\\n  \tlong s=0;\\n  \tlong[] si=new long[n];\\n  \tfor(int i=0;i<n;i++){\\n  \t\tif(i==n-1){\\n  \t\t\tsi[i]=k+ai[0]-ai[i];\\n  \t\t}else{\\n  \t\t\tsi[i]=ai[i+1]-ai[i];\\n  \t\t}\\n  \t}\\n  \tArrays.sort(si);\\n  \tfor(int i=0;i<n-1;i++){\\n  \t\ts+=si[i];\\n  \t}\\n  \tSystem.out.print(s);\\n  }\\n}", "target": "10", "substitutes": {"sc": [" Sc", "sa", "cc", "cle", "tc", "cr", "ss", "pb", "rc", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "c", "nc", "sh", "SC", "sw", "gc", "inc", "ctx", "cons", "fc", "sv", "dc", "lc", "scan", "sp", "sel", "asc", "conv", "sch", "sec", "usc", "sq"], "k": ["mk", "m", "j", "dk", "sk", "ke", "ik", "ko", "kn", "q", "kr", "km", "ok", "ikk", "kh", "kind", "ak", "kick", "ck", "kj", "uk", "ks", "kl", "ka", "K", "ijk", "kk", "kw", "ark", "tk", "ek", "ku"], "n": ["ng", "out", "m", "norm", "ct", "j", "nan", "nn", "ren", "net", "number", "fn", "none", "z", "ln", "q", "t", "ne", "mn", "network", "ll", "on", "ni", "nm", "en", "len", "np", "c", "nc", "nor", "p", "N", "nb", "g", "w", "no", "nu", "v", "name", "all", "names", " N", "ns", "num", "un", "nl", "sn", "nw", "na", "non", "o", "cn", "l", "nt"], "ai": ["ii", "aaa", "hai", "arb", "ri", "pha", "sa", "aq", "bi", "ji", "sha", "hi", "av", "yi", "ci", "aki", "aus", "aii", "di", "AI", "au", "mi", "att", "ari", "ca", "attr", "ali", "gi", "cu", "ni", "vi", "ati", "li", "ay", "ei", "sci", "pi", "ta", "iq", "aug", "ais", "ti", "ia", "a", "aj", "ij", "zi", "ui", "ga", "ini", "arms", "arm", "agi", "oci", "ait", "dat", "pai", "ang", "mac", "asi", "ami", "ae", "fa", "air", "ki"], "i": ["ji", "hi", "q", "in", "iti", "ci", "mi", "list", "li", "mu", "v", "ij", "ui", "ini", "us", "err", "ix", "m", "multi", "e", "bi", "f", "iy", "ei", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "um", "fi", "ri", "init", "fire", "di", "wi", "info", "gi", "index", "spec", "ti", "io", "\u0438", "ind", "to", "ip", "MI", "cgi", "qi", "umi", "phi", "gu", "xi", "me", "j", "sim", "it", "ims", "u", "t", "I", "this", "ie", "client", "point", "iter", "g", "ic", "iu", "is", "oi", "batch"], "s": ["hs", "rs", "out", "b", "h", " ss", "m", "its", "j", "ats", "ies", "xs", "f", "str", "ss", "ims", "S", "gets", "r", "t", " out", "os", "gs", "p", "c", "sw", "sg", "w", "g", "v", "sv", "ms", "ws", "ns", "us", "l", " j", "sp", "ds", " ts", "stats", "ps", "js", "conv", "ls", "ts", "is", "ints", "o", "y", "es", " e", "csv", "sq"], "si": ["ii", "xi", "ri", "sim", "fi", "see", "sa", "spe", "bi", "ji", "ss", "hi", "ims", "yi", "eni", "sie", "iso", "di", "mi", "se", "sky", "bis", "ali", "cu", "ni", "ati", "SI", "sis", "ei", "su", "pi", "ti", "Si", "zi", "ui", "sv", "isi", "ini", "pse", "ios", "iu", "secondary", "sil", "sd", "is", "esi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] arges) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString line = sc.nextLine();\\n\t\tString[] k = line.split(\" \");\\n\t\tint[] v = new int[k.length];\\n\t\tfor (int i = 0; i < v.length; i++) {\\n\t\t\tv[i] = Integer.parseInt(k[i]);\\n\t\t}\\n\t\tint count = 0;\\n\t\tfor (int i = v[0]; i <= v[1]; i++) {\\n\t\t\tif (v[2] % i == 0) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n\\n}", "target": "190", "substitutes": {"arges": ["responses", " argel", "arge", "argel", "responsel", "response", "Arge", "argses", "Argel", "Argses", " argses", " arge", "responsses", "Arges"], "sc": ["ng", "system", "cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "dec", "se", "ch", "pc", "isc", "osc", "soc", "sys", "spec", "mc", "scl", "nc", "c", "sub", "sh", "SC", "gc", "sv", "screen", "nl", "scan", "lc", "sp", "sel", "ser", "asc", "conv", "sec", "sch", "anc", "usc", "syn", "sq"], "line": ["out", "m", "string", "page", "pe", "lf", "lin", "str", "f", "liner", "link", "q", "in", "r", "file", "ln", "row", "frame", "se", "log", "next", "c", "le", "lines", "ine", "output", "block", "nl", "cell", "text", "lc", "n", "inline", "rule", "Line", "word", "LINE", "key", "l", "header"], "k": ["mk", "unk", "j", "sk", "ke", "ik", "ko", "q", "kn", "kt", "kr", "km", "ok", "ikk", "wk", "kb", "ak", "ck", "kj", "uk", "kid", "p", "ks", "kl", "ka", "kat", "ack", "K", "kan", "kk", "kw", "n", "tk", "work", "ek", "ku"], "v": ["range", "vs", "b", "csv", "j", "ev", "vm", "it", "vv", "wire", "q", "av", "values", "u", "cv", "NV", "iv", "vy", "vp", "nv", "qv", "rev", "V", "vi", "ve", "vol", "uv", "p", "c", "pi", "tv", "sv", "inv", "lv", "vr", "n", "vector", "view", "ver", "conv", "vt", "va", "x", "l", "ov", "we", "vc"], "i": ["ji", "hi", "q", "iti", "ci", "mi", "list", "li", "ij", "ui", "ini", "ai", "us", "ix", "m", "multi", "bi", "f", "iy", "ei", "print", "pi", "a", "cli", "zi", "chain", "id", "y", "uri", "asi", "im", "l", "ami", "ki", "ii", "ri", "init", "di", "info", "gi", "index", "si", "ti", "d", "io", "uu", "\u0438", "ind", "to", "ip", "o", "qi", "phi", "gu", "b", "me", "xi", "j", "it", "u", "span", "set", "I", "ie", "client", "point", "inner", "iter", "g", "ic", "iu", "is", "x", "oi", "batch"], "count": ["out", "b", "ct", "quiet", "flag", "ount", "value", "number", "must", "ctr", "z", "hold", "scroll", "t", "cont", "coll", "info", "result", "counter", "index", "list", "report", "c", "amount", "code", "status", "conf", "gc", "trace", "nb", "inc", "d", "summary", "add", "total", "comment", "num", "const", "length", "n", "Count", "ind", "cond", "val", "call", "size", "not", "sum", "err", "find", "found", "nt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u8981\u7d20\u306e\u5165\u529b\u3001\u683c\u7d0d\\n\t\tint N = sc.nextInt();\\n\t\tint a[][] = new int[2][N];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ta[0][i] = sc.nextInt();\\n\t\t}\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ta[1][i] = sc.nextInt();\\n\t\t}\\n\t\tint x = 0;\\n\t\tint ans = 0;\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tx = 0;\\n\t\t\tfor (int j = 0; j < N; j++) {\\n\t\t\t\tif (j < i) {\\n\t\t\t\t\tx += a[0][j];\\n\t\t\t\t} else if (j == i) {\\n\t\t\t\t\tx += a[0][j];\\n\t\t\t\t\tx += a[1][j];\\n\t\t\t\t} else {\\n\t\t\t\t\tx += a[1][j];\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif (ans < x) {\\n\t\t\t\tans = x;\\n\t\t\t}\\n\t\t}\\n\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "140", "substitutes": {"sc": [" Sc", " ss", "system", "sk", "sa", "cr", "rc", "bc", "cs", "Sc", "ch", "pc", "sys", " SC", " scr", "c", "nc", "SC", "sw", "gc", "src", "sv", " sk", "dc", "scan", " sp", "sp", "sq"]}}
{"code": "\\nimport java.text.DecimalFormat;\\nimport java.util.stream.LongStream;\\nimport java.util.stream.IntStream;\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        FastScanner sc = new FastScanner();\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        AtCoder problem = new AtCoder(sc);\\n        problem.solve(out);\\n\\n        out.flush();\\n    }\\n\\n}\\n\\nclass AtCoder {\\n\\n    final int N;\\n\\n    AtCoder(FastScanner sc) {\\n        N = sc.nextInt();\\n    }\\n\\n    void solve(PrintWriter out) {\\n        for (int i = 0; i <= N / 4; i++) {\\n            for (int j = 0; j <= N / 7; j++) {\\n                if (4 * i + 7 * j == N) {\\n                    out.println(\"Yes\");\\n                    return;\\n                }\\n            }\\n        }\\n        out.println(\"No\");\\n    }\\n\\n}\\n\\nclass FastScanner {\\n\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        } else {\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int readByte() {\\n        if (hasNextByte()) {\\n            return buffer[ptr++];\\n        } else {\\n            return -1;\\n        }\\n    }\\n\\n    private static boolean isPrintableChar(int c) {\\n        return 33 <= c && c <= 126;\\n    }\\n\\n    public boolean hasNext() {\\n        while (hasNextByte() && !isPrintableChar(buffer[ptr])) {\\n            ptr++;\\n        }\\n        return hasNextByte();\\n    }\\n\\n    public String next() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while (isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while (true) {\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            } else if (b == -1 || !isPrintableChar(b)) {\\n                return minus ? -n : n;\\n            } else {\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n\\n    public int nextInt() {\\n        long nl = nextLong();\\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) {\\n            throw new NumberFormatException();\\n        }\\n        return (int) nl;\\n    }\\n\\n    public double nextDouble() {\\n        return Double.parseDouble(next());\\n    }\\n}\\n", "target": "172", "substitutes": {"sc": ["san", "system", "cc", "tc", "ss", "cr", "rc", "pb", "cam", "cl", "bc", "cs", "ec", "esc", "sync", "Sc", "se", "so", "ch", "osc", "pc", "isc", "sys", "ck", "mc", "scl", "nc", "sh", "crit", "mp", "SC", "gc", "sw", "sr", "ctx", "sv", "sic", "lc", "scan", "sp", "sel", "asc", "ctrl", "sch", "syn", "sq"], "out": ["console", "msg", "con", "system", "can", "aos", "it", "str", "cache", "error", "net", "r", "OUT", "user", "file", "window", "set", "t", "at", "pool", "ou", "outs", "lock", "os", "this", "outer", "ch", "result", "you", "sys", "client", "Out", "log", "conn", "report", "null", "p", "list", "print", "status", "inner", "obj", "ex", "gc", "write", "summary", "res", "g", "v", "output", "io", "server", "auto", "input", "all", "bin", "screen", "l", "timeout", "table", "to", "flush", "o", "writer", "sum", "err", "OU"], "problem": ["check", "wrong", " solution", "console", "term", "system", "sol", "test", " prob", "error", " error", "kr", "Problem", "good", " problematic", "result", " criterion", " Problem", "er", "proc", "entry", "please", "status", "crit", " crit", " equation", "no", "server", " problems", "or", "bug", " solved", " buggy", "err", "ver", "ry", "pro", "task", "Solution", " constraint"], "N": ["B", "E", "Node", "P", "F", "NN", "Ns", "NI", "STATE", "Ni", "Num", "X", "S", "NR", "OUT", "SN", "G", "NL", "AN", "NS", "I", "D", "NUM", "CNN", "GN", "A", "NP", "NC", "NB", "L", "ND", "V", "TN", "Size", "NM", "MN", "H", "NT", "NA", "NOTE", "T", "Y", "K", "J", "Sn", "Q", "M", "R", "C", "Z", "REM", "O"], "i": ["ii", "phi", "xi", "me", "multi", "ri", "it", "bi", "hi", "ims", "ani", "ci", "ql", "di", "I", "mi", "ie", "info", "gi", "li", "IJ", "si", "pi", "iq", "ti", "v", "io", "ij", "zi", "ui", "ini", "ai", "ic", "iu", "ind", "ix", "ip", "y", "is", "II", "x", "im", "uri", "l", "ami", "qi", "ki"], "j": ["oj", "ja", "br", "e", "ji", "jj", "jc", "bo", "lu", "bi", "q", "z", "uj", "bj", "rel", "jump", "py", "json", "pr", "you", "ju", "kj", "li", "kid", "note", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "dj", "J", "jas", "yy", "js", "y", "job", "ge"], "in": ["inf", "In", "m", "con", "isin", "it", "init", "run", "r", "file", "rin", "reader", "t", "read", "IN", "info", "on", "from", "session", "log", "gin", "ma", "null", "en", "p", "inner", "ins", "conf", "ex", "inn", "inc", "get", "cin", "io", "ar", "input", "bin", "ini", "ic", "or", "stream", "nin", "err", "ind", "to", "mm", "din", "is", "l"], "buffer": ["paste", "queue", "store", "message", "page", "library", "binary", "password", "address", "sequence", "value", "command", "cache", "bone", "file", "face", "temp", "scroll", "window", "buf", "history", "button", "frame", "available", "read", "FFER", "reference", "limit", "stack", "variable", "template", "document", "comment", "iter", "data", "buff", "output", "mem", "memory", "pointer", "block", "screen", "length", "bar", "display", "base", "phrase", "table", "view", "append", "device", "Buffer", "size", "database", "source", "batch", "sample"], "ptr": ["pointers", "offset", "inter", "pad", "pend", "address", "addr", "br", "rep", "ped", "loc", "ctr", "dr", "arr", "ter", "peer", "buf", "rob", "rel", "pers", "pos", "pl", "seek", "req", "pt", "Ptr", "pert", "pc", "pr", "index", "depth", "tip", "proc", "prime", "next", "tp", "p", "fp", "point", "pi", "trace", "iter", "ctx", "bp", "jp", "coord", "perm", "adr", "esp", "tr", "sp", "ind", "ps", "inters", "ts", "expr", "pointer", "push"], "buflen": ["bufilength", " buflatten", "buFllen", "bufilate", "buFlen", "bulllen", "buklen", "boflian", " bulleng", "boFlen", "boflength", "buflate", "boglen", " buplength", "buglun", "boFlian", "buflEN", "buplate", " buflength", "buglEN", "boflener", "boFlength", "buflener", "bufleng", "bullens", "boflun", " buflate", "buflens", "buflue", "bufilens", " bullatten", " bulllen", "buvlen", "buvlener", "buflength", " buplate", "boglEN", "buwlian", "buFlue", "boflen", "buglener", "bufilen", "boflue", "boflEN", "buwlength", "buplens", " buplen", "buplian", "buFlength", "buflian", "bullate", "buFleng", "buklEN", "buflun", "buklun", "buglen", "bubleng", "buwlen", "buvlun", " bullen", " buplens", " buflens", "boglun", "bullen", "bublen", "buflatten", "buklener", "bulleng", "buplength", "buwlue", " bufleng", "bublatten", " bufllen", "bullatten", "buFlatten", "buFlian", "boFlue", "bufllen", "buplue", "buvlEN", "bullength", "boglener", "bubllen", "buplen"], "c": ["m", "ct", "con", "category", "cc", "e", "f", "rc", "z", "u", "bc", "cs", "ec", "t", "cd", "cm", "cont", "k", "cb", "ch", "ca", "pc", "cf", "cur", "cu", "uc", "ac", "p", "code", "count", "gc", "fc", "d", "v", "a", "abc", "dc", "ce", "lc", "x", "C", "cod", "fac", "cp", "vc"], "sb": ["bps", "eb", "ob", "bsp", "sa", "sth", "stab", "pb", "bj", "shell", "bs", "kb", "zb", "cb", "gb", "ib", "lb", "bg", "bb", "ssh", "bd", "bash", "si", " SB", "db", "rb", "sg", "nb", "ssl", "bp", "buff", "sv", "bt", "sf", "sp", "bh", "SB", "orb", "erb"], "b": ["B", "bit", "m", "h", "eb", "ob", "binary", "ub", "bi", "f", "bl", "pb", "bf", "be", "fb", "bs", "bc", "t", "bol", "blue", "ab", "cb", "gb", "ib", "emb", "bis", "beta", "bb", "back", "bd", "p", "xb", " eb", "db", "rb", "nb", "g", "bp", "d", "a", "mb", "v", "bar", "base", "bound", "y", "reb", "l", "wb"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s=sc.nextLine();\\n      \tint count=0;\\n      \tfor(int i=0;i<s.length();i+=2){\\n          if(i+1==s.length()){\\n          \tcount+=Integer.parseInt(s)-Math.pow(10,i)+1;\\n          }else{\\n          count+=Math.pow(10,i)*9;\\n          }\\n        }\\n\t\tSystem.out.println(count);\\n\t\t\\n\t}\\n}", "target": "135", "substitutes": {"sc": ["system", "cc", "cle", "cr", "tc", "ss", "capt", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ch", "pc", "isc", "osc", "soc", "sys", "mc", "scl", "c", "nc", "sh", "sub", "SC", "gc", "sw", "sv", "screen", "scan", "lc", "sp", "ser", "asc", "sch", "sec", "anc", "usc", "sq"], "s": ["rs", "m", "h", "b", "string", "its", "sol", "ats", "str", "ss", "in", "S", "sb", "r", "abs", "z", "bs", "t", "os", "qs", "sys", "gs", "p", "c", "sql", "w", "g", "v", "src", "less", "sv", "ms", "ws", "ns", "sl", "sts", "sf", "sp", "ps", "stats", "js", "ts", "ls", "is", "es", "l", "sq"], "count": ["label", "current", "check", "flag", "ount", "test", "cache", "number", "core", "hold", "temp", "cont", "limit", "result", "counter", "index", "conn", "log", "list", "report", "c", "amount", "code", "print", "status", "conf", "score", "comment", "trace", "nb", "add", "total", "all", "num", "type", "const", "cell", "length", "n", "Count", "now", "cond", "common", "table", "call", "stat", "sum", "reset", "batch", "hash", "find", "found", "nt"], "i": ["ii", "phi", "m", "b", "xi", "gu", "me", "j", "multi", "sim", "init", "bi", "it", "hi", "q", "u", "ci", "t", "di", "I", "at", "mi", "info", "gi", "index", "list", "li", "ei", "si", "ski", "pi", "ex", "iq", "ti", "v", "a", "io", "zi", "ui", "ini", "ic", "ai", "us", "iu", "n", "ix", "ind", "id", "ip", "y", "o", "is", "x", "im", "oi", "batch", "qi"]}}
{"code": "import java.util.*;\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner scan = new Scanner(System.in);\\n    int N = scan.nextInt();\\n    int[] A;\\n    A = new int[N+1];\\n    \\n    // \u30bd\u30fc\u30c8\u3059\u308b\\n    for (int i= 1; i <= N; i++){\\n      A[i] = scan.nextInt();\\n    }\\n    Arrays.sort(A);\\n    float result=A[1];\\n    for (int j= 2; j <= N; j++){\\n      result=result/2+(float)A[j]/2;\\n    }\\n    System.out.println(result);\\n  \\n  }\\n \\n}", "target": "232", "substitutes": {"scan": ["save", "san", "check", "con", "system", "can", "skip", "see", "Scan", "nn", "run", "ann", "in", "r", "scroll", "set", "nav", "read", "connect", "se", " Scan", "seek", "start", "sys", "reach", "sc", "ner", "report", "query", "send", "gate", "parse", "an", "sr", "sin", "scale", "get", "sv", "screen", "search", "n", "na", "ser", "look", "stat", "find"], "N": ["B", "NH", "P", "NN", "Ns", "Ni", "Num", "S", "NR", "NS", "GN", "D", "NO", "I", "NP", "NC", "L", "ND", "V", "TN", "NM", "CN", "NT", "NA", "T", "K", "J", "FN", "Q", "n", "M", "R", "C", "Z", "X"], "A": ["AC", "B", "E", "P", "GA", "AA", "CA", "S", "G", "mA", "AB", "D", "I", "L", "MA", "SA", "V", "H", "AF", "An", "AM", "AU", "AV", "a", "Y", "T", "K", "Ar", "IA", "Alpha", "Array", "AR", "M", "R", "C", "X"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int c = sc.nextInt();\\n        int d = sc.nextInt();\\n\\n        int start = a > c ? a : c;\\n        int end = b < d ? b : d;\\n\\n        int time = end - start > 0 ? end - start : 0;\\n\\n        System.out.println(time);\\n    }\\n}", "target": "47", "substitutes": {"sc": ["out", "system", "cc", "cle", "tc", "cr", "ko", "rc", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "dec", "Sc", "ctl", "ch", "pc", "osc", "isc", "uc", "sys", "ck", "mc", "scl", "nc", "sci", "sh", "sub", "acc", "SC", "gc", "inc", "fc", "st", "ctx", "jp", "sv", "dc", "lc", "scan", "sp", "cmp", "asc", "conv", "cgi", "ctrl", "sch", "usc", "sq"], "a": ["aaa", "aff", "sta", "la", "apa", "oa", "sa", "i", "aq", "da", "r", "era", "at", "A", "au", "area", "ab", "ca", "bb", "ma", "ac", "p", "ba", "ao", "ea", "ta", "an", "aa", "ia", "aj", "ar", "ata", "ga", "alpha", "ra", "n", "pa", "na", "ach", "x", "al", "l", "ae", "fa"], "b": ["B", "h", "m", "eb", "ob", "j", "i", "e", "bi", "f", "bl", "bf", "r", "be", "z", "u", "fb", "sb", "bs", "bc", "t", "ab", "ib", "gb", "bis", "bb", "bd", "p", "ba", "db", "rb", "nb", "g", "v", "n", "y", "l", "wb"], "c": ["m", "ct", "cc", "e", "f", "tc", "cr", "rc", "r", "z", "ci", "ec", "cs", "bc", "cd", "cm", "t", "cb", "ca", "cf", "cu", "uc", "ac", "p", "nc", "gc", "cut", "v", "fc", "ic", "co", "dc", "ce", "lc", "n", "xc", "unc", "C", "cn", "col", "l", "cp"], "d": ["out", "m", "fd", "j", "e", "f", "da", "q", "r", "z", "be", "dr", "dos", "ed", "t", "dd", "D", "di", "dt", "dp", "bd", "p", "db", "ad", "w", "g", "v", "pd", "td", "df", "dc", "dir", "de", "n", "ds", "id", "sd", "o", "l"], "start": ["cost", "offset", "check", "inter", "need", "init", "e", "str", "f", "char", "it", "q", "in", "r", "ed", "sort", "window", "set", "close", "pos", "art", "client", "started", "first", "enable", "entry", "load", "p", "stop", "ime", "part", "match", "help", "space", "request", "get", "Start", "st", "name", "rank", "scale", "step", "shift", " Start", "type", "trans", "last", "length", "ish", "dist", "begin", "n", "id", "key", "x", "size", "source", "l"], "end": ["range", "e", "after", "full", "dest", "r", "z", "nd", "t", "close", "END", "dev", "ending", "std", "next", "est", "p", "stop", "ue", "ends", "send", "until", "en", "eng", "ad", "w", "shape", "st", "add", "fin", "last", "length", "begin", "End", "ended", "id", "ent", "post", "max", "ender", "ort", "rend", "ff"], "time": ["duration", "rate", "message", "age", "value", "command", "tc", "tim", "runtime", "t", "set", "tx", "info", "clock", "timer", "estamp", "depth", "counter", "line", "date", "est", "tp", "ime", "etime", "trace", "TIME", "rank", "name", "times", "Time", "type", "tm", "length", "text", "timeout", "now", "id", "ts", "rix"]}}
{"code": "public class Main {\\n\tpublic static void main(String[] args){\\n\t\tjava.util.Scanner scan = new java.util.Scanner(System.in);\\n\t\tint x = scan.nextInt();\\n\t\tfor(int i = 1;i <= x; i++){\\n\t\t\tif(i % 3 == 0){\\n\t\t\t\tSystem.out.print(\" \" + i);\\n\t\t\t}else if(i % 10 == 3){\\n\t\t\t\tSystem.out.print(\" \" + i);\\n\t\t\t}else if(String.valueOf(i).contains(\"3\")){\\n\t\t\t\tSystem.out.print(\" \" + i);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n\\n}", "target": "154", "substitutes": {"scan": ["save", "out", "san", "check", "con", "system", "can", "skip", "pan", "Scan", "nn", "run", "ann", "in", "r", "re", "scroll", "read", "sync", "connect", "se", " Scan", "ch", "seek", "sys", "reach", "sc", "ner", "report", "en", "query", "send", "gate", "parse", "an", "sin", "get", "scale", "spin", "sv", "search", "n", "ser", " scanner", "conv", "stat", "find"], "x": ["m", "xi", "rx", "xp", "xe", "xs", "f", "dx", "ox", "z", "mx", "xd", "tx", "height", "index", "xy", "ax", "p", "ex", "w", "ctx", "v", "xf", "xx", "n", "xt", "ix", "xc", "inx", "y", "px", "max", "size", "X", "wx"], "i": ["ii", "phi", "m", "h", "xi", "me", "j", "multi", "sim", "ri", "init", "it", "bi", "ji", "ik", "hi", "q", "in", "z", "hello", "u", "yi", "ci", "di", "I", "k", "mi", "this", "series", "info", "gi", "index", "li", "p", "ei", "si", "point", "c", "status", "pi", "sql", "iq", "ti", "g", "v", "io", "cli", "my", "ij", "ui", "ini", "ai", "ic", "chain", "iu", "n", "ix", "ind", "id", "ip", "y", "conv", "o", "is", "im", "oi", "\u00ed", "batch", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) throws java.io.IOException {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint[] a = new int [n];\\n\t\tint[] b = new int [n];\\n\t\tint[] c = new int [n];\\n\t\tfor(int d = 0; d < n ; d++){\\n\t\t\ta[d] = scan.nextInt();\\n\t\t\tb[d] = scan.nextInt();\\n\t\t\tc[d] = scan.nextInt();\\n\t\t}\\n\t\tfor(int e = 0;e < n ; e++){\\n\t\t\tif((a[e]*a[e]+b[e]*b[e]==c[e]*c[e]) || (b[e]*b[e]+c[e]*c[e]==a[e]*a[e]) || (c[e]*c[e]+a[e]*a[e]==b[e]*b[e])){\\n\t\t\t\tSystem.out.println(\"YES\");\\n\t\t\t}else{\\n\t\t\t\tSystem.out.println(\"NO\");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "65", "substitutes": {"scan": ["store", "save", "out", "san", "m", "check", "system", "can", "see", "cat", "Scan", "ann", "nn", "link", "pass", "in", "r", "sb", "re", "scroll", "row", "k", "read", "sync", "black", "connect", "se", "info", " Scan", "ch", "seek", "sign", "conn", "sys", "proc", "sc", "reach", "log", "ner", "report", "query", "sur", "gen", "send", "gate", "parse", "sql", "an", "gc", "sin", "g", "sr", "io", "spin", "util", "sn", "sp", "ser", " scanner", "stat", "find"], "n": ["ng", "out", "m", "ct", "j", "nan", "i", "after", "nn", "ren", "number", "net", "fn", "r", "z", "ln", "cl", "t", "cont", "k", "ne", "network", "mn", "on", "nm", "en", "len", "np", "nc", "p", "N", "local", "count", "an", "nb", "g", "no", "v", "nu", "all", "names", " N", "num", "ns", "un", "nl", "sn", "na", "o", "size", "x", "cn", "l", "nt"], "a": ["aaa", "m", "h", "la", "sta", "s", "oa", "ap", "sa", "i", "aq", "f", "cc", "r", "am", "abs", "u", "t", "at", "A", "au", "area", "ab", "ak", "ca", "ma", "app", "ac", "p", "ba", "ao", "ea", "an", "aa", "g", "ia", "aj", "ar", "ga", "all", "as", "ai", "alpha", "pa", "y", "o", "ach", "x", "al", "l", "ae"], "b": ["B", "h", "eb", "ob", "j", "bo", "br", "i", "bl", "bi", "f", "it", "bf", "r", "be", "sb", "u", "fb", "bs", "bc", "t", "ab", "ib", "gb", "cb", "bg", "bb", "p", "ba", "db", "rb", "an", "nb", "g", "v", "bin", "bt", "bu", "y", "o", "l", "wb"], "c": ["m", "h", "ct", "s", "con", "can", "cc", "cat", "f", "i", "cr", "tc", "cache", "r", "z", "be", "u", "ec", "cs", "cm", "t", "bc", "k", "cb", "ch", "cu", "sc", "ac", "p", "w", "g", "v", "fc", "ar", "co", "ce", "dc", "lc", "xc", "o", "unc", "C", "l", "cp", "vc"], "d": ["done", "rd", "m", "fd", "ct", "j", "i", "da", "dm", "dx", "q", "dr", "z", "dos", "di", "dd", "ld", "xd", "t", "cd", "dt", "dev", "dec", "dra", "od", "dq", "md", "dep", "dp", "du", "bd", "p", "ord", "back", "send", "ade", "db", "ad", "draw", "g", "dim", "add", "debug", "delay", "pd", "td", "dot", "dj", "ident", "dc", "de", "div", "dat", "ds", "ind", "id", "dl", "def", "dn", "del", "dh", "l", "D", "red", "dis"], "e": ["eg", "E", "ef", "me", "eb", "pe", "eu", "ev", "i", "f", "ele", "em", "r", "u", "ed", "event", "re", "edge", "ec", "t", "eeee", "el", "exp", "ie", "se", "ne", "ale", "eh", "fe", "er", "est", "en", "ei", "ue", "ex", "le", "element", "entity", "g", "eng", "east", "end", "v", "or", "ee", "oe", "de", "ce", "et", "nee", "ame", "err", "id", "ent", "o", "ate", "es", "l", "te", "ae", "ge"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.FileReader;\\nimport java.io.InputStreamReader;\\nimport java.io.File;\\nimport java.io.FileNotFoundException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author ShekharN\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        FastScanner in = new FastScanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        TaskA solver = new TaskA();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskA {\\n        public void solve(int testNumber, FastScanner in, PrintWriter out) {\\n            String s = in.nextString();\\n            String[] arr = s.split(\"/\");\\n            out.println(2018 + \"/\" + arr[1] + \"/\" + arr[2]);\\n        }\\n\\n    }\\n\\n    static class FastScanner {\\n        private BufferedReader br;\\n        private StringTokenizer st;\\n\\n        public FastScanner(File f) {\\n            try {\\n                br = new BufferedReader(new FileReader(f));\\n            } catch (FileNotFoundException e) {\\n                e.printStackTrace();\\n            }\\n        }\\n\\n        public FastScanner(InputStream f) {\\n            br = new BufferedReader(new InputStreamReader(f));\\n        }\\n\\n        public String nextString() {\\n            while (st == null || !st.hasMoreTokens()) {\\n                String s = null;\\n                try {\\n                    s = br.readLine();\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n                if (s == null)\\n                    return null;\\n                st = new StringTokenizer(s);\\n            }\\n            return st.nextToken();\\n        }\\n\\n    }\\n}\\n\\n", "target": "18", "substitutes": {"inputStream": ["inputSource", "inputSocket", "InputSteam", " inputView", "InputSource", " inputSocket", " inputSource", "InputStream", "instream", "outputSteam", "inputstream", "inputSteam", " inputSteam", "outputSocket", "outputView", "inStream", "inputView", "InputSocket", "outputSource", "outputstream", " inputstream", "inView", "inSteam"], "outputStream": ["outputNow", "OutputView", "OutputStreamer", "dataStreamer", "putSteam", "outputStreamer", " outputStreamer", "outStream", "dataStream", " outputSteam", "outputSteam", "OutputSteam", "outSteam", "inputSteam", "outStreamer", " outputNow", "putStream", "outputView", "OutputStream", "putNow", "inputView", "putStreamer", "dataSteam", "dataNow", "inputStreamer", "outView"], "in": ["per", "current", "In", "inf", "h", "con", "isin", "sol", "m", "context", "i", "init", "it", "run", "nn", " din", "r", "file", "rin", "reader", "t", "conf", "mi", "IN", "this", "info", "up", "from", "er", "log", "gin", "null", "en", "c", "ins", "inner", "inside", "local", "inn", "iter", "inc", "get", "cin", "sin", "w", "io", "ssl", "config", "input", "bin", "ini", "env", "thin", "stream", "l", "n", "ind", "mm", "din", "o", "is", "err", "rt", "win"], "out": ["current", "check", "aos", "it", "cache", "run", "cmd", "net", "r", "OUT", "user", "file", "window", "t", "set", "at", "pool", "ou", "outs", "this", "outer", "ch", "up", "result", "sys", "client", "Out", "log", "list", "report", "null", "p", "print", "inner", "ex", "write", "gc", "w", "res", "v", "output", "io", "auto", "screen", "co", "gr", "l", "n", "table", "to", "flush", "o", "writer", "sum", "err", "OU", "nt"], "solver": [" solution", "sol", "resorter", "gsolve", "sorter", "resolution", "ssorter", "solution", "csolver", "resolver", "tsolution", "tsolve", "ssolution", "ssol", "gsolver", "tsolver", "ssolver", " solve", "tsorter", "csol", "csolution", "solve", "csorter", " sorter", "gsorter", "resol", "gsolution"], "testNumber": [" tasknumber", "testnumber", " taskNo", " taskNum", "taskNum", "tasknumber", " testNo", " taskNumber", "taskNo", "testNo", "taskNumber", "testNum", " testnumber", " testNum"], "s": ["hs", "rs", "vs", "b", "h", "m", "string", " str", " gets", "ats", "its", "i", "e", "str", "fs", "ss", " samples", "xs", "ims", "r", "S", "gets", "sb", "bs", "cs", "t", "os", "qs", "ashes", "p", "gs", "c", "ins", " ls", "sql", "comm", " is", "w", "g", "v", " parts", "less", "res", "sv", "ms", "ws", "ns", " es", "ges", "n", "sts", "sp", " ts", "ps", "ds", "js", "conv", "ls", "ts", "is", "source", "es", "l", "sq"], "arr": ["aaa", "rs", "warn", "pad", "img", "ear", "forest", "addr", "bl", "str", "av", "r", "vec", "pair", "inst", "split", "coll", "dev", "ab", "emb", "attr", "repl", "ax", "app", "ord", "part", "conf", "var", "db", "fam", "gear", "array", "ars", "ras", "ar", "unch", "Ar", "adr", "arm", "ARR", "gr", "Array", "angle", "div", "fr", "ray", "conv", "alph", "err", "mr", "air"], "br": ["bridge", "b", "lr", "Br", "shr", "bl", "bsp", "str", "cr", "bf", "dr", "r", "ctr", "bern", "ger", "kr", "bs", "bc", "buf", "rel", "pr", "er", "bd", "bm", "hr", "ptr", "rb", "bro", "bre", "bp", "gr", "vr", "bt", "tr", "sp", "fr", "bh", "ber", "bn", "browser", "nr", "mr", "BR", "abl"], "st": ["h", "ost", "ct", "irst", "bl", "str", "it", "lo", "ft", "r", "be", "cl", "sb", "nd", "inst", "t", "set", "ast", "th", "sty", "se", "stack", "ST", "pt", " ST", "std", "start", "sc", "est", "ist", "sh", "sw", "St", "mt", "ust", "sv", "td", "step", "const", "l", "bt", "et", "sts", "xt", "tr", "sp", "fr", "lt", "rest", "stage", "tt", "stat", "ste", "stable", "ut", "nt"], "f": ["fl", "b", "fd", "h", "F", "fi", "j", "lf", "i", "e", "fs", "bf", "r", "file", "u", "fb", "fa", "t", "el", "cf", "fe", "fw", "p", "c", "form", "w", "fc", "g", "v", "a", "d", "input", "sf", "fac", "fr", "def", "o", "x", "fx", "fo", "l", "fp"]}}
{"code": "import java.io.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    try {\\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n      String count = new String(in.readLine());\\n      int lineCount = Integer.parseInt(count);\\n      int pFlag = 0;\\n      int result = 0;\\n      for(int i = 0; i < lineCount; i++) {\\n        String num = new String(in.readLine());\\n        int iNum = Integer.parseInt(num);\\n        pFlag = 0;\\n        for(int j = 2; j <= Math.sqrt(iNum); j++) {\\n          if(iNum % j == 0) {\\n            pFlag = 1;\\n            break;\\n          }\\n        }\\n        if(pFlag == 0) {\\n          result++;\\n        }\\n      }\\n      System.out.println(result);\\n    } catch(IOException e) {\\n    }\\n  }\\n}", "target": "226", "substitutes": {"in": ["per", "out", "inf", "In", "b", "check", "con", "isin", "init", "it", "f", "asin", " din", "r", "OUT", "by", "user", "re", "rin", "reader", " out", "read", "IN", "info", "std", "on", "from", "sys", "er", "log", "gin", "null", "en", "ins", "inner", "conf", "inn", "inc", "get", "cin", "add", "input", "world", "all", "bin", "ini", "as", "ic", "thin", "stream", "n", "ind", "mm", "to", "din", "is", "sum", "err"], "count": ["current", "ount", "test", "command", "cat", "cache", "cmd", "number", "hold", "history", "counter", "index", "buffer", "list", "report", "title", "c", "conf", "comment", "summary", "nb", "name", "total", "path", "type", "const", "length", "base", "Count", "table", "id", "call", "size", "stat", "sum", "find", "found", "head", "nt"], "lineCount": ["Linecount", "LineType", "LINEcount", "LINENow", "linecount", "LINECount", "LINEAmount", "lineLength", "LineNow", " lineType", "lineSize", "LineCount", " lineSize", "LineSize", "LineLength", "LINELength", " lineAmount", "lineNow", " lineLength", " linecount", "LINESize", "LineAmount", "lineAmount", "lineType", "LINEType", " lineNow"], "pFlag": ["pcStyle", "pcFlag", "iFlags", "ppTag", "iFlag", "pcFlags", "pFlags", "jflag", "PLen", "dpStyle", "nFlag", " pExt", "Pflag", " pLen", "ppFlags", "pButton", "PFlag", "pLen", "nFlags", "pStyle", "dpFlag", "pTag", "jExt", "jStyle", "jFlags", "pflag", "nflag", " pFlags", " pflag", "jLen", "ppflag", "jButton", "jFlag", "nExt", "ppFlag", "dpFlags", "pcButton", "PFlags", "pExt", "iTag", "jTag", "dpButton", "iflag"], "result": ["done", "duration", "message", "successful", "page", "feature", "sequence", "test", "value", "command", "progress", "success", "number", "answer", "goal", "complete", "diff", "counter", "surface", "Result", "proc", "date", "report", "match", "currency", "status", "score", "response", "draw", "res", "output", "total", "results", "process", "integer", "valid", "ret", "nr", "found"], "i": ["ii", "phi", "m", "xi", "inter", "multi", "sim", "it", "bi", "init", "q", "ci", "di", "I", "mi", "ie", "index", "li", "p", "si", "c", "print", "pi", "ti", "g", "v", "a", "ij", "zi", "ui", "ini", "ai", "us", "iu", "n", "ind", "ix", "id", "ip", "y", "o", "is", "x", "im", "ret", "qi", "ki"], "num": ["current", "um", "norm", "mon", "test", "nn", "Num", "number", "net", "tim", "Number", "unit", "temp", "NUM", "pn", "mn", "nam", "zero", "cu", "nm", "next", "np", "note", "nb", "cal", "nu", "total", "mem", "name", "coord", "n", "non", "na", "cmp", "mark", "hex", "conv", "alph", "nom", "sum", "nr", "nt"], "iNum": ["xPart", "miNum", "iNUM", " iSum", "iuNUM", "sinum", "iNumber", "iDir", "siNum", "siNumber", "iiNo", "iiPart", "siSum", " iBu", "inum", "iriNum", "xNum", "iiNUM", "piNum", "miBu", "iuNo", "iNo", "iuPart", "piSum", "xNUM", "iriSum", "iuNum", "iriDir", "xNo", "piNumber", " iDir", " inum", "iPart", "pinum", "iBu", "miDir", " iNumber", "iSum", "iriBu", "miSum", "iiNum"], "j": ["oj", "b", "m", "adj", "og", "ja", "bo", "br", "ji", "jj", "jc", "bi", "q", "z", "uj", "bj", "bs", "k", "jump", "jit", "json", "kj", "ax", "kid", "jl", "obj", "jo", "g", "bot", "other", "Ja", "aj", "v", "ij", "jp", "d", "ort", "J", "dj", "jas", "n", "js", "o", "max", "x", "im", "ion", "err", "job", "let", "ge"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner in = new Scanner(System.in);\\n      String k = in.nextLine();  \\n      String S = in.nextLine();\\n      int K = Integer.parseInt(k);\\n     \\n      if (S.length()<=K){\\n          System.out.println(S);\\n         }\\n         else {\\n           System.out.println(S.substring(0,K)+ \"...\");\\n                }\\n        }\\n    }\\n", "target": "248", "substitutes": {"in": ["per", "out", "inf", "In", "m", "check", "con", "isin", "h", "i", "it", "doc", "run", " IN", " din", "r", "file", "ln", "user", "q", "rin", "reader", " out", "IN", "info", "se", "std", "line", "er", "log", "ma", "null", "en", "ins", "inner", "conf", "inn", "inc", "lines", "sin", "cin", "get", "io", "add", "input", "world", "all", "bin", "ini", "thin", "state", "scan", "n", "err", "ind", "id", "mm", "din", "is", "sum", "l"], "k": ["mk", "unk", "j", "s", "sk", "ke", "ko", "ik", "kn", "q", "z", "Sk", "kr", "km", "ok", "ikk", "kh", "kind", "ak", "kick", "ck", "kj", "kid", "ks", "ka", "kl", "aka", "ack", "kk", "kan", "kw", "n", "key", "ek", "ku"], "S": ["B", "SM", "P", "string", "s", "STR", "SK", "DS", "SN", "G", "CS", "SO", "NS", "SER", "ST", "L", "SA", "V", "SF", "RS", "SE", "SI", "SP", "H", "N", "BS", "IS", "Si", "SL", "SQL", "SU", "US", "SS", "SH", "GS", "SOURCE", "TS", "R", "M", "RAW", "Z", "SB", "SAM", "JS"], "K": ["B", "P", "F", "KI", "UK", "OK", "SK", "G", "FK", "I", "A", "Key", "W", "L", "V", "KS", "H", "N", "KN", "Kind", "T", "J", "KING", "Q", "M", "Length", "KK", "R", "KEY", "C", "Z", "KR", "X", "O", "PK", "VK"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int m = Integer.parseInt(sc.next());\\n        int[] p = new int[n];\\n        long wa = 0;\\n        long ac = 0;\\n        for (int i = 0; i < m; i++) {\\n            int pi = Integer.parseInt(sc.next());\\n            String s = sc.next();\\n            if (\"WA\".equals(s) && p[pi - 1] != -1) {\\n                p[pi - 1]++;\\n            } else if (\"AC\".equals(s) && p[pi - 1] >= 0) {\\n                ac++;\\n                wa += p[pi - 1];\\n                p[pi - 1] = -1;\\n            }\\n        }\\n        System.out.println(ac + \" \" + wa);\\n    }\\n}", "target": "48", "substitutes": {"sc": [" Sc", "cc", "cle", "tc", "ss", "cr", "rc", "ko", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "dec", "ch", "pc", "osc", "isc", "cu", "sys", "ck", "mc", "scl", "c", "nc", "sci", "SC", "gc", "inc", "fc", "cons", "sv", "dc", "scan", "lc", "sp", "asc", "cgi", "ctrl", "sch", "sec", "anc", "usc", "irc", "sq"], "n": ["j", "nn", "t", "nr", "k", "ne", "mn", "nv", "on", "ni", "nm", "en", "c", "np", "nc", "N", "an", "nb", "d", "no", "nu", "v", "num", "ns", "nl", "length", "sn", "na", "o", "x", "cn", "l", "nt"], "m": ["b", "h", "j", "f", "dm", "r", "cm", "km", "sm", "t", "k", "mi", "mn", "nm", "ma", "mc", "c", "bm", "N", "gm", "w", "g", "d", "v", "mt", "ms", "tm", "M", "mm", "y", "o", "x", "l"], "p": ["per", "P", "j", "ap", "pe", "xp", "pid", "rep", "policy", "po", "pb", "q", "r", "t", "pm", "lp", "pers", "pn", "exp", "vp", "ping", "pc", "pt", "perm", "pr", "pkg", "php", "tp", "c", "np", "mp", "w", "port", "bp", "v", "a", "jp", "pd", "params", "pa", "sp", "ps", "wp", "ip", "conv", "post", "pp", "cp", "fp"], "wa": ["Wa", "apa", "ap", "ja", "sa", "lu", "da", "wid", "wo", "cas", "aw", "wan", "wal", "wait", "wat", "wt", "wi", "auc", "ca", "pac", "ay", "ena", "xa", "sw", "w", "ww", "acl", "a", "iw", "ha", "ws", "ai", "wave", "wd", "WA", "war", "pa", "na", "awa", "wx", "wb", "fa", "we"], "ac": ["AC", "act", "aco", "rac", "ap", "sa", "cc", "aq", "jac", "tc", "cas", "aw", "am", "sac", "at", "au", " lac", "acs", "ab", "auc", "ca", "pc", "cu", "ag", "pac", "ma", "aps", "aca", "mc", "c", "acc", "oc", "ex", "Ac", " cac", "ad", "an", "fc", "acl", "a", "ia", "ace", "iac", "ha", "ic", "ai", "co", "mic", "asc", "ach", "unc", "ica", "anc", "fac"], "i": ["ii", "phi", "gu", "xi", "j", "multi", "sim", "init", "bi", "it", "hi", "q", "in", "ci", "di", "I", "mi", "go", "gi", "index", "li", "ei", "si", " ii", "iter", "ti", "cli", "zi", "ui", "ini", "ic", "ai", "us", "iu", "ix", "ind", "id", "ip", "y", "o", "is", "x", "im", "qi", "ki"], "pi": ["ii", "phi", "xi", "pins", "patch", "adi", "policy", "pid", "bi", "po", "pan", "ani", "pei", "ci", "kit", "iso", "Pi", "di", "wiki", "ph", "mi", "pm", "ping", "api", "pc", "pose", "perm", "gi", "cu", "vi", "tip", "ati", "chi", "li", "ei", "si", "ami", "phil", "port", "ia", "axis", "cli", "zi", "ui", "ai", "pse", "phys", "pai", "pa", "pic", "pex", "cgi", "PI", "asi", "esi", "pp", "ptic", "aci", "pu", "ki"], "s": ["hs", "sam", "rs", "string", "sol", "j", "its", "ats", "str", "ss", "S", "sb", "des", "t", "bis", "qs", "sym", "spec", "gs", "si", "c", "sql", "w", "a", "sv", "ws", "ns", "state", "sts", "sf", "sp", "tes", "ps", "ds", "js", "sd", "ls", "ts", "is", "sq"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        int s = sc.nextInt();\\n        /*\\n         * \u914d\u5217\u306b\u51fa\u73fe\u3057\u305f\u6570\u3092set\u306b\u683c\u7d0d\u3059\u308b\\n         * set\u306b\u5b58\u5728\u3059\u308b\u306a\u3089\u305d\u306e\u6642\u306ei\u3092\u7b97\u51fa\u3057\u3066return\\n         * */\\n\\n        int[] arr = new int[1000000];\\n        arr[0] = s;\\n        Set<Integer> set = new HashSet<>();\\n        set.add(s);\\n\\n        for (int i = 1; i < 1000000000; i++) {\\n            if (arr[i - 1] % 2 == 0) {\\n                arr[i] = arr[i - 1] / 2;\\n            } else {\\n                arr[i] = arr[i - 1] * 3 + 1;\\n            }\\n\\n            if (set.contains(arr[i])) {\\n                System.out.println(i + 1);\\n                return;\\n            } else {\\n                set.add(arr[i]);\\n            }\\n\\n        }\\n\\n    }\\n}\\n\\n\\n", "target": "166", "substitutes": {"sc": ["rs", "system", "cc", "cle", "Scan", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "se", "ch", "pc", "isc", "osc", "uc", "sys", "mc", "scl", "c", "nc", "sub", "SC", "gc", "sw", "sv", "screen", "scan", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "s": ["rs", "m", "h", "b", "string", "its", "ats", "e", "xs", "fs", "ss", "in", "S", "r", "t", "sys", "gs", "p", "c", "w", "g", "d", "v", "a", "ar", "sv", "ms", "as", "ns", "ids", "n", " ts", "ds", "id", "js", "y", "ts", "ls", "is", "x", "l", "sq"], "arr": ["play", "arb", "br", "ev", "bl", "rep", "addr", "r", "dr", "coll", "att", "ab", "stack", "attr", "alg", "pr", "list", "obj", "db", "iq", "ack", "aa", "ar", "abc", "arm", "bar", "ix", "expr", "pl", "load", "align", "Ar", "gr", "div", "dat", "fix", "ress", "aaa", "rs", "save", "dict", "rel", "exp", "art", "req", "gb", "ll", "var", "parse", "array", "arc", "unch", "val", "ray", "rest", "alph", "frac", "nt", "act", "msg", "img", "j", "ear", "av", "inst", "au", "agg", "emb", "enc", "app", "buff", "mb", "auto", "batch", "Array", "fr", "ang", "elt", "err"], "set": ["done", "store", "save", "check", "san", "see", "init", "it", "net", "select", "sync", "use", "lock", "se", "sign", "group", "start", "sets", "list", "en", "stop", "send", "space", "get", "seen", "st", "end", "add", "are", "sv", "num", "clear", "used", "et", "equal", "tree", "map", "sp", "common", "size", "sum", "sche", "reset", "hash", "find", "SET"], "i": ["ii", "phi", "m", "xi", "me", "j", "multi", "sim", "ri", "eu", "it", "bi", "f", "ji", "ik", "hi", "q", "in", "ims", "u", "ci", "di", "I", "mi", "this", "series", "info", "gi", "index", "list", "li", "ma", "p", "ei", "si", "print", "status", "pi", "ti", "g", "v", "a", "my", "io", "cli", "zi", "ui", "ij", "ini", "ic", "ai", "chain", "iu", "n", "ix", "ind", "id", "ip", "y", "o", "is", "uri", "x", "im", "oi", "uni", "batch", "qi", "ki"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String r = \"R\";\\n    int count = s.indexOf(r);\\n    int lastcount = s.lastIndexOf(r);\\n    if(s.contentEquals(\"RRR\")){\\n      System.out.println(\"3\");\\n    }else if(s.contentEquals(\"SSR\")){\\n      System.out.println(\"1\");\\n    }else if(s.contentEquals(\"SRS\")){\\n      System.out.println(\"1\"); \\n    }else if(s.contentEquals(\"RSS\")){\\n      System.out.println(\"1\");\\n    }else if(count == 0 && lastcount == 1 || count == 1 && lastcount == 2){\\n      System.out.println(\"2\");\\n    }else if(count == 0 && lastcount == 2 || count == 2 && lastcount == -1|| count == 0 && lastcount == -1|| count == 1 && lastcount == -1 ){\\n      System.out.println(\"1\");\\n    }else if(s.contentEquals(\"SSS\")){\\n      System.out.println(\"0\");\\n\\n    }\\n  }\\n}\\n\\n", "target": "141", "substitutes": {"sc": [" Sc", "rs", "system", "cc", "cle", "ss", "cr", "tc", "capt", "rc", "cl", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "se", "ch", "pc", "isc", "osc", "soc", "sys", "mc", "scl", "c", "nc", "sh", "SC", "sw", "gc", "sv", "screen", "scan", "lc", "sp", "ser", "asc", "sch", "anc", "sec", "usc", "Sync", "sq"], "s": ["h", "changes", "ats", "ss", "in", "bs", "ags", "ashes", "sw", "v", "as", "sl", "stats", "als", "ls", "hs", "m", "string", "parts", "tests", "ops", "qs", "st", "ms", "times", "eps", "sts", "tes", "js", "ts", "l", "sq", "sam", "rs", "ers", "its", "aws", "details", "gets", "sb", "spec", "sql", "strings", "sv", "ws", "sp", "ears", "source", "vs", "b", "sports", "str", "xs", "ings", "ims", "S", "abs", "cs", "t", "os", "sys", "eds", "gs", "p", "ins", "ys", "src", "ns", "sf", "ds", "ps", "is"], "r": ["rs", "m", "b", "h", "br", "i", "str", "rc", "q", "dr", "rar", "re", "kr", "t", "nr", "k", "rel", "ur", "attr", "pr", "rr", "rg", "er", "p", "ro", "c", "hr", "rb", "w", "res", "d", "sr", "v", "ar", "rt", "vr", "n", "err", "R", "x", "l", "mr"], "count": ["message", "ount", "test", "bool", "history", "filter", "att", "counter", "list", "match", "no", "name", "more", "process", "const", "cond", "call", "found", "ct", "cc", "f", "cmd", "number", "core", "time", "only", "empty", "format", "read", "result", "part", "c", "currency", "nb", "total", "type", "length", "n", "now", "sum", "current", "ctr", "cd", "cont", "force", "ch", "index", "cycle", "code", "draw", "add", "num", "val", "frequency", "size", "find", "false", "nt", "check", "flag", "cache", "mount", "z", "th", "depth", "report", "amount", "comment", "config", "Count", "child", "old", "batch"], "lastcount": [" lastname", "bottomamount", "firstCount", "parentCount", "Lastcount", "worstcounter", "lastmore", "bottomcount", "restamount", "restcounter", "bottomCount", "maxCount", "floatconst", "styleamount", "floatcountry", "lastcurrent", "firstamount", "latestcountry", "finalcond", "lastname", "reversecounter", "latestname", "stylechild", "maxcounter", "lastcounter", "lastCount", "worstcurrent", "lastchild", "maxcount", " lastCount", "lastamount", "reversecount", "worstdepth", "Lastamount", "lastdepth", " lastdepth", "worstchild", "finalcount", "lastcomment", "finalchild", "restcount", "lastconst", "floatname", "worstmore", " lastchild", "lastcountry", "worstamount", " lastcond", "worstcount", "parentcounter", "LastCount", "restCount", "worstcond", "floatcount", "bottomcomment", " lastconst", "latestcount", "reversecond", "reversemore", " lastcountry", "firstcomment", "stylecurrent", "lastcond", "Lastcounter", " lastamount", "stylecount", "firstcount", " lastcounter", " lastcurrent", "parentcount", "finaldepth", " lastmore", " lastcomment", "latestconst"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tlong total = 1;\\n\t\tlong input[] = new long[N];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tinput[i] = sc.nextLong();\\n\t\t\tif (input[i] == 0) {\\n\t\t\t\ttotal = 0;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif (total != 0) {\\n\t\t\tfor (int i = 0; i < N; i++) {\\n\t\t\t\tif (input[i] > 1000000000000000000L / total) {\\n\t\t\t\t\ttotal = -1;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\ttotal *= input[i];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(total);\\n\t}\\n}", "target": "27", "substitutes": {"sc": ["ng", "system", "cc", "cle", "tc", "ss", "cr", "rc", "pb", "cam", "cl", "bc", "cs", "sac", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "nc", "c", "sh", "SC", "gc", "sw", "sv", "lc", "scan", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "sq"], "N": ["B", "NH", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "AN", "NS", "I", "D", "GN", "NO", "ANY", "NP", "NC", "NB", "L", "ALL", "ND", "V", "TN", "Size", "NM", "Net", "NT", "NA", "NOTE", "T", "Y", "K", "J", "Sn", "Q", "n", "M", "R", "NOW", "C", "Z", "O"], "total": ["value", "zero", "mu", "completely", "summary", " Total", "scale", "no", "volume", "all", "running", "general", "tax", "multi", "net", "training", "number", "goal", " all", "empty", "negative", "money", "result", "currency", " summed", " tot", "serial", "eta", "type", "length", "associated", "equal", "unique", "n", "table", "translation", "sum", "initial", "meta", "global", "current", "important", "sequence", "details", "full", "none", "complete", "diff", "index", "note", "count", " whole", "created", " totals", "TA", "num", "confirmed", "size", "quant", "done", "successful", "system", "expected", "basic", "otal", "menu", "t", "available", "human", "unknown", "you", "significant", "amount", "comment", "Total", "normal", "OTAL", "used", "average", "base", "scan", "required", "database", " TOTAL"], "input": ["queue", "save", " Input", "check", "got", "out", "img", "sequence", "command", "quick", "submit", " inputs", "q", "in", "missing", "hello", "select", "human", "read", "feed", " output", "lat", "before", "qa", "up", "xml", "storage", "buffer", "index", "list", "entry", "load", "query", "amount", "print", "inner", "template", "form", "parse", "request", "subject", "data", "get", "output", "config", "add", "raw", "step", "shift", "open", "hidden", "active", "length", "update", "Input", "image", "view", "ip", "unsigned", "attribute", "source", "PUT", "sample"], "i": ["ji", "gl", "q", "in", "ci", "iso", "mi", "er", "php", "li", "v", "ui", "ini", "ai", "err", "ix", "m", "multi", "bi", "ik", "iy", "json", "load", "ei", "print", "status", "pi", "cli", "zi", "ms", "chain", "id", "y", "uri", "im", "ity", "ki", "ii", "ri", "fi", "init", "details", "di", "gi", "si", "ti", "io", "iri", "jp", "\u0438", "ind", "to", "ip", "PI", "ori", "qi", "phi", "gu", "me", "xi", "j", "sim", "s", "it", "z", "u", "set", "I", "ie", "client", "point", "iter", "g", "ic", "iu", "base", "is", "oi", "batch"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n\\n    int n = sc.nextInt();\\n    double ans = 0;\\n\\n    for (int i = 0; i < n; i++) {\\n      double a = sc.nextInt();\\n      ans += 1.0 / a;\\n    }\\n\\n    System.out.println(1.0 / ans);\\n\\n  }\\n}", "target": "120", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "rc", "pb", "cl", "cv", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "pl", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "SC", "gc", "inc", "fc", "sv", "screen", "nl", "dc", "lc", "scan", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "sq"], "n": ["ng", "m", "j", "nan", "nn", "net", "number", "ln", "nd", "t", "nr", "ne", "mn", "network", "ni", "rn", "en", "p", "np", "gn", "nc", "nor", "c", "N", "and", "nb", "no", "nu", "v", " N", "ns", "num", "nl", "nw", "sn", "na", "cn", "l", "nt"], "ans": ["rs", "vs", "checks", "s", "can", "ats", "rans", "xs", "ann", "ians", "vals", " means", "ens", "cs", "AN", "aus", "outs", "acs", "os", "angs", "lets", "ags", "anes", "aps", "alls", "gs", "reads", "ks", "ins", "an", "ars", "ms", "ents", "as", "ns", " scans", "ows", "ants", "ids", "mas", "ons", "sts", "ds", "nets", "arts", "ls", "ANS", "ts", "amps", "ads"], "i": ["ii", "phi", "m", "gu", "me", "j", "multi", "sim", "init", "bi", "e", "it", "hi", "q", "z", "u", "ci", "t", "di", "I", "mi", "ie", "gi", "li", "si", "pi", "iter", "ti", "v", "io", "ui", "ms", "ini", "ic", "ai", "us", "chain", "iu", "ix", "id", "ip", "is", "uri", "x", "im", "qi", "ki"], "a": ["b", "sta", "la", "apa", "sa", "f", "ya", "aw", "wa", "A", "au", "area", "ca", "ma", "ac", "ba", "ka", "ea", "xa", "ao", "c", "ta", "an", "aa", "ia", "v", "ata", "ga", "eta", "as", "alpha", "pa", "va", "o", "ana", "fa"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\n\\n\\nimport static java.lang.Math.*;\\nimport static java.util.Arrays.*;\\nimport static java.util.Collections.*;\\n\\n\\npublic class Main{ \\n\\n\\n    static long mod=1000000007;\\n     static int dx[]={1,-1,0,0};\\n      static int dy[]={0,0,1,-1};\\n    // static int dx[]={1,-1,0,0,1,1,-1,-1};\\n    // static int dy[]={0,0,1,-1,1,-1,1,-1}; \\n\\npublic  static void main(String[] args)   throws Exception, IOException{\\n\\n    \\n    Reader sc = new Reader(System.in);\\n    PrintWriter out=new PrintWriter(System.out);\\n\\n//  int n=sc.nextInt();  \\n  int n=sc.nextInt(), m=sc.nextInt();  \\n   int d[] = new int[100];\\n   for( int i=0; i<m; i++ ){\\n    int a=sc.nextInt();\\n    int b=sc.nextInt();\\n    d[a]++; d[b]++;\\n   }\\n   for( int i=1; i<=n; i++ ){\\n    out.println(d[i]);\\n   }\\n\\n    // out.println();\\n    out.flush();\\n}\\n\\nstatic void db(Object... os){\\n\\n    System.err.println(Arrays.deepToString(os));\\n\\n}\\n\\nstatic boolean validpos(int x,int y,int r, int c){\\n    \\n    return x<r && 0<=x && y<c && 0<=y;\\n    \\n}\\n \\nstatic boolean bit(long x,int k){\\n    // weather k-th bit (from right) be one or zero\\n    return  ( 0 < ( (x>>k) & 1 )  )  ? true:false;\\n}\\n\\n}\\n\\nclass XY {\\n    int x,y,d;\\n    XY(int x, int y, int d) {\\n        this.x=x;\\n        this.y=y;\\n        this.d=d;\\n    } \\n}\\n\\nclass P implements Comparable<P>{\\n    int x,y;\\n    P(int x, int y) {\\n        this.x=x;\\n        this.y=y;\\n    } \\n      \\n    public int compareTo(P p){\\n        return x - p.x;\\n    } \\n}\\n\\nclass Reader\\n{ \\n    private BufferedReader x;\\n    private StringTokenizer st;\\n    \\n    public Reader(InputStream in)\\n    {\\n        x = new BufferedReader(new InputStreamReader(in));\\n        st = null;\\n    }\\n    public String nextString() throws IOException\\n    {\\n        while( st==null || !st.hasMoreTokens() )\\n            st = new StringTokenizer(x.readLine());\\n        return st.nextToken();\\n    }\\n    public int nextInt() throws IOException\\n    {\\n        return Integer.parseInt(nextString());\\n    }\\n    public long nextLong() throws IOException\\n    {\\n        return Long.parseLong(nextString());\\n    }\\n    public double nextDouble() throws IOException\\n    {\\n        return Double.parseDouble(nextString());\\n    }\\n}\\n\\n", "target": "57", "substitutes": {"mod": ["mult", "MOD", "floor", "lo", " maj", "fun", "dec", " dec", " base", "od", " inv", " trunc", " mul", "scale", "add", " mult", "step", " mag", "Mod", "inv", " ver", "base", "fac", " sign", " mix", "max", " pow", " lim"], "dx": ["rx", "xs", "yd", "yi", "di", "dd", "ld", "xd", "dq", "xy", "DX", "d", "dim", "yx", "df", "dir", "xx", "ds", "ix", "xc", "dl", "y", "px", "x", "fx", "dh"], "dy": [" ey", "fy", "axy", "yd", "yt", "yi", "iy", "oy", "di", "dd", "py", "dem", "vy", "dq", "xy", "yl", "ay", "ys", "ey", "dj", "idy", "yy", "sy", "ds", "dl", "y", "ly", "yz"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tString[] strs;\\n\t\ttry (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))){\\n\\n\t\t\tString line = br.readLine();\\n\t\t\tstrs = line.split(\" \");\\n\t\t} catch (IOException e) {\\n\\n\t\t\treturn;\\n\t\t}\\n\t\tint p = Integer.parseInt(strs[0]);\\n\t\tint q = Integer.parseInt(strs[1]);\\n\t\tint r = Integer.parseInt(strs[2]);\\n\\n\t\tint minTime = p + q;\\n\t\tif (minTime > q + r) {\\n\\n\t\t\tminTime = q + r;\\n\t\t}\\n\t\tif (minTime > r + p) {\\n\\n\t\t\tminTime = r + p;\\n\t\t}\\n\t\tSystem.out.println(minTime);\\n\t}\\n}", "target": "89", "substitutes": {"strs": ["exprrs", "stri2", "STRms", "STRjs", " strjs", " strrs", "Strs", "stris", "STR2", "stringss", "stas", "Strgs", "trgs", "trls", "strrs", "str2", "grms", "strls", " strgs", "STRs", "stres", "exprp", "Str2", "stp", "strts", "strjs", "stringsms", "Strls", "stams", "stries", "trs", " strms", " strp", "STRparts", "exprts", "strparts", "strms", "exprs", " strls", "trms", "strp", "Stres", "sts", "stts", " strts", "staparts", "stringsjs", "Strms", "grs", "grparts", "strgs", "STRes"], "line": ["out", "message", "string", "page", "lf", "lin", "bl", "str", "lo", "liner", "link", "in", "file", "ln", "body", "pair", "row", "detail", "frame", "entry", "part", "le", "comment", "lines", "ine", "eline", "raw", "block", "cell", "nl", "text", "inline", "phrase", "Line", "piece", "ls", "LINE", "l"], "p": ["per", "b", "h", "m", "P", "j", "pe", "pid", "i", "e", "par", "pb", "t", "ph", "pos", "lp", "pl", "vp", "perm", "pc", "pt", "ping", "pr", "pkg", "pre", "er", "php", "tp", "part", "np", "c", "pi", "port", "d", "v", "a", "ar", "jp", "n", "pa", "ps", "pro", "pp", "l", "cp", "press", "pg"], "q": ["queue", "eq", "qq", "m", "h", "b", "j", "aq", "i", "e", "f", "z", "u", "ql", "qt", "qu", "k", "ur", "dq", "req", "ch", "qa", "qs", "ll", "pkg", "ck", "cu", "query", "c", "ue", "ro", "le", "iq", "w", "g", "v", "io", "Q", "n", "ry", "qi", "max", "l", "requ", "sq", "quant"], "r": ["range", "rd", "rs", "m", "b", "rx", "ri", "j", "br", "i", "e", "it", "mr", "cr", "rar", "dr", "rc", "u", "right", "re", "rw", "t", "ru", "nr", "ur", "art", "dq", "pr", "rr", "rg", "er", "ro", "c", "rb", "rh", "sr", "w", "d", "v", "g", "res", "ar", "rm", "gr", "vr", "n", "tr", "err", "fr", "R", "ry", "l", "ir", "rt"], "minTime": ["mainTim", "minUser", " minAge", "minAge", "minuteTim", "MINTim", "minime", "startUser", "mitTime", "startLength", "relTim", "statLength", "minStyle", "startTim", "statTime", "calTime", "MinFile", "MinAge", "mainTime", "reltime", "sampleTime", "mainime", "caltime", "minFile", "mitTim", "mintime", "statTim", "calTim", "sampleStyle", "calLength", "startFile", " minLength", "MinLength", "MINLength", "MinTime", "MINTime", "minuteime", "minuteAge", "starttime", " minUser", "Mintime", "minuteTime", "Minime", "intStyle", "maintime", " mintime", "mitStyle", "intTime", "minLength", "intTim", "sampleTim", "MINtime", "minTim", "statUser", "MinTim", " minime", "relFile", " minTim", "relTime", "startTime"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\n/**\\n * Created 2017/06/01.\\n */\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    ArrayList<Integer> ary = new ArrayList<>();\\n\\n    for (int i = 0; i < 2; i++) {\\n      int input = sc.nextInt();\\n      ary.add(input);\\n    }\\n\\n    int a = ary.get(0);\\n    int b = ary.get(1);\\n\\n    if (a < b) {\\n      System.out.println(\"a < b\");\\n    } else if (a > b) {\\n      System.out.println(\"a > b\");\\n    } else {\\n      System.out.println(\"a == b\");\\n    }\\n  }\\n}", "target": "179", "substitutes": {"sc": ["system", "cc", "cr", "ss", "rc", "cl", "sb", "bc", "cs", "desc", "ec", "set", "esc", "sync", "Sc", "read", "isc", "pc", "osc", "enc", "ch", "uc", "sys", "mc", "scl", "c", "nc", "sci", "sh", "SC", "gc", "sv", "screen", "nl", "lc", "scan", "sp", "sel", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "ary": ["wise", "aro", "ty", "important", "exclusive", "inter", "arb", "binary", "ario", "maybe", "ery", "must", "berry", "aries", "ter", "itary", "nr", "ari", "dylib", "sky", "ical", "cz", "sys", "er", "arity", "arie", "ay", "si", "sis", "bare", "rey", "arf", "iq", "erey", "io", "less", "ar", "are", "arial", "necessary", "arry", "holy", "secondary", "ARY", "phrase", "ory", "ry", "ray", "primary", "red", "tf"], "i": ["ii", "phi", "m", "gu", "me", "j", "multi", "sim", "init", "bi", "it", "q", "u", "ci", "t", "di", "I", "set", "mi", "ie", "info", "gi", "client", "li", "si", "pi", "ex", "ti", "g", "io", "my", "cli", "ui", "ini", "ic", "ai", "us", "iu", "n", "err", "ix", "ind", "id", "ip", "y", "is", "x", "im", "batch", "qi"], "input": ["current", "context", "value", "command", "in", "hello", "select", "internal", "json", "result", "buffer", "index", "client", "entry", "print", "inner", "parse", "data", "output", "config", "raw", "step", "active", "Input", "image", "text", "pattern", "view", "def", "table", "field", "initial", "batch"], "a": ["aaa", "act", "aff", "sta", "la", "apa", "oa", "isa", "sa", "e", "eas", "da", "admin", "r", "am", "era", "t", "at", "A", "au", "area", "att", "ab", "ca", "ma", "app", "ac", "p", "ao", "ba", "ea", "ta", "le", "an", "aa", "ia", "aj", "ga", "ai", "as", "access", "aux", "alpha", "na", "to", "o", "ach", "al", "l"], "b": ["B", "h", "eb", "ob", "j", "ble", "bo", "e", "bi", "f", "pb", "r", "sb", "be", "z", "fb", "by", "bc", "bs", "t", "blue", "ab", "ib", "gb", "cb", "bis", "beta", "bb", "back", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "mb", "bar", "n", "y", "l", "erb"]}}
{"code": "import java.sql.SQLOutput;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        boolean judge = false;\\n        String s = scan.nextLine();\\n        int len = s.length();\\n        s += s;\\n        String p = scan.nextLine();\\n        for (int i = 0; i < len; i++) {\\n            if (s.substring(i, i + p.length()).equals(p)) judge = true;\\n        }\\n        if (judge) System.out.println(\"Yes\");\\n        else System.out.println(\"No\");\\n    }\\n}\\n\\n", "target": "198", "substitutes": {"scan": ["out", "san", "check", "con", "system", "can", "skip", "pan", "cat", "Scan", "ann", "nn", "run", "in", "r", "sb", "span", "scroll", "sm", "row", "read", "sync", "black", "connect", "se", "seek", "ch", "sys", "reach", "sc", "ner", "report", "sur", "acc", "send", "gate", "parse", "sql", "an", "gc", "sin", "g", "scale", "v", "spin", "sv", "search", "nl", "n", "sp", "na", "ser", "sum", "find"], "s": ["hs", "sam", "rs", "b", "h", "string", "sol", "j", "ats", "xs", "str", "ss", "S", "sb", "abs", "r", "gets", "bs", "cs", "t", "os", "qs", "sc", "tp", "gs", "c", "ins", "sql", "sw", "sg", "w", "g", "st", "v", "strings", "a", "sv", "ms", "ws", "ns", "sl", "sts", "n", "sp", "ds", "ps", "js", "ls", "ts", "is", "l", "csv", "sq"], "len": ["fl", " clen", "lf", "seq", "bl", "wid", "cl", "lan", "ln", "lim", "vec", "t", "el", "ld", "coll", "pos", "lp", "lon", "pl", "L", "ll", "vl", "li", "en", "kl", "wl", "count", "le", "fin", "nl", "length", "n", "Len", "dl", "Length", "elt", "ls", "l", "nt"], "p": ["per", "m", "b", "P", "j", "pe", "ap", "rep", "it", "f", "pun", "pb", "lp", "pn", "pl", "ping", "vp", "pc", "pt", "pr", "pre", "tp", "point", "c", "np", "op", "mp", "pi", "g", "bp", "jp", "pa", "sp", "ps", "ip", "pro", "pp", "l", "cp"], "i": ["ii", "phi", "m", "gu", "xi", "j", "multi", "sim", "ri", "init", "bi", "sequence", "it", "ik", "hi", "ji", "q", "ims", "in", "span", "ci", "yi", "di", "I", "mi", "gi", "slice", "index", "li", "ei", "si", "ski", "pi", "ex", "iter", "ti", "my", "cli", "zi", "ui", "ms", "ini", "ai", "ic", "us", "\u0438", "ish", "iu", "ind", "ix", "id", "ip", "is", "key", "uri", "im", "ori", "qi", "ki"], "judge": ["badge", "dong", "judne", "donpe", "Judg", "badged", "badger", "emerge", "donge", "emerne", "munge", "manger", "sune", "mung", "munger", "judpe", "manne", "Judger", "mang", "suger", "emerg", "judged", "donger", "munged", "judg", "sug", "emerpe", "Judpe", "badg", "judger", "emerger", "Judged", "suge", "mange", "Judge"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) throws java.lang.Exception {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        sc.close();\\n        boolean isOdd = true;\\n        String ret = \"Yes\";\\n        for (char c : s.toCharArray()) {\\n            if (isOdd && c == 'L' || !isOdd && c == 'R') {\\n                ret = \"No\";\\n                break;\\n            }\\n            isOdd = !isOdd;\\n        }\\n        System.out.println(ret);\\n    }\\n}\\n", "target": "205", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "capt", "rc", "cl", "bc", "cs", "sac", "ec", "esc", "sync", "Sc", "dec", "isc", "pc", "ch", "osc", "uc", "sys", "mc", "scl", "nc", "sh", "sub", "SC", "gc", "sw", "inc", "cons", "arc", "sv", "lc", "sp", "sel", "asc", "sec", "anc", "sch", "usc", "syn", "sq"], "s": ["rs", "m", "b", "string", "str", "fs", "ss", "r", "S", "sb", "bs", "cs", "set", "t", "qs", "gs", "p", "su", "sw", "g", "st", "v", "strings", "a", "sv", "ms", "ns", "n", "sf", "sts", "sp", "js", "ls", "ses", "ts", "is", "l", "sq"], "ret": ["out", "soft", "msg", "rets", "flag", "test", "str", "cat", "cmd", "net", "uf", "des", "desc", "t", "dt", "att", "ext", "pretty", "result", "quit", "report", "print", "bare", "RET", "txt", "res", "summary", "output", "mt", "det", "text", "reply", "alt", "Ret", "tr", "tree", "pret", "def", "elt", "conv", "tt", "rem", "del", "rev", "reset", "sat", "rt", "gt", "nt"], "c": ["cap", "b", "ct", "con", "char", "i", "cat", "f", "cache", "tc", "cr", "cc", "rc", "in", "r", "bc", "cs", "ec", "t", "cont", "k", "ch", "pc", "enc", "cf", "cu", "uc", "ac", "p", "mc", "nc", "code", "comm", "gc", "fc", "arc", "v", "a", "etc", "cod", "ic", "dc", "ce", "lc", "n", "xc", "cmp", "conv", "unc", "C", "anc", "col", "l", "cp", "vc"], "isOdd": ["isiOdd", "isEmm", "isLOodd", "isOrbled", "isOvalid", " isObled", "isEDD", "isDd", "isNodd", " isOmm", "isOKnd", "isOOdd", "isAdds", "isMdd", "isOEnexpected", " isDdd", "isOwnerbled", "isOrodd", "isNoodd", "isDDD", "issOrient", "isOrnd", "isiOnexpected", " isOrodd", "isOEff", "isDdd", "issOErient", "isADD", "isiLOvalid", "issOEdd", " isOodd", "isiLOnexpected", "isOEdd", " isDDD", "isEdds", "isObled", " isOrdd", "issOnd", "isOEvalid", " isOd", "isOEnd", "isOder", "isLOnexpected", "issOff", "isOd", "issOEnd", "isNonexpected", "isLOvalid", "isMdds", "isOwnerdd", "isODD", "isAdd", "isOnd", "isiOodd", "isOrff", " isODD", "isOnexpected", "isMmm", "isiLOodd", "issOdd", "isOrdd", " isOrbled", "isOKff", " isOder", " isEdds", "isOOd", "isOAdd", "isOwnerodd", " isOdds", "isAmm", " isEmm", "isOKrient", "issOEff", "isOmm", "isOErient", "isOODD", "isLOdd", "isOAbled", "isOff", "isOdds", " isOrder", "isOEodd", "isOrder", " isEDD", "isEdd", "isOrient", " isDd", "isiLOdd", "isOwnerder", "isiOvalid", "isOodd", "isDodd", "isOAodd", "isOKdd", "isMDD", " isDodd", "isOAder", "isOrrient", " isEdd", "isNovalid", "isOOodd"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int n = in.nextInt();\\n        int[][] a = new int[2][n];\\n        for (int i = 0; i < 2; i++) {\\n            for (int j = 0; j < n; j++) {\\n                a[i][j] = in.nextInt();\\n            }\\n        }\\n\\n        for (int i = 1; i < n; i++) {\\n            a[0][i] += a[0][i - 1];\\n        }\\n\\n        for (int i = n - 2; i >= 0; i--) {\\n            a[1][i] += a[1][i + 1];\\n        }\\n\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            int total = a[0][i] + a[1][i];\\n            ans = Math.max(ans, total);\\n        }\\n\\n        System.out.println(ans);\\n\\n    }\\n}", "target": "140", "substitutes": {"in": ["serv", "out", "inf", "In", "check", "con", "isin", "init", "doc", "run", "asin", " din", "net", "r", "file", "ln", "user", "by", "rin", "reader", "pin", "read", "IN", "info", "std", "on", "from", "line", "gin", "en", "ins", "inner", "conf", "inn", "inc", "sin", "cin", "get", "ssl", "io", "add", "input", "world", "all", "bin", "ini", "as", "thin", "stream", "scan", "err", "ind", "readable", "din", "is", "source", "sum", "l"], "n": ["ng", "out", "m", "norm", "nan", "nn", "number", "net", "q", "r", "z", "ln", "t", "k", "ne", "mn", "network", "ll", "on", "nm", "en", "len", "np", "nc", "c", "p", "N", "count", "and", "nb", "w", "d", "no", "nu", "v", "name", "all", "names", " N", "num", "ns", "un", "nl", "sn", "na", "o", "x", "size", "cn", "l", "nt"], "a": ["aaa", "b", "sta", "la", "apa", "oa", "ap", "sa", "it", "f", "da", "cache", "aw", "am", "arr", "era", "at", "el", "A", "au", "history", "area", "att", "ab", "ca", "ma", "app", "ac", "p", "ba", "aka", "ao", "c", "ea", "xa", "obj", "an", "trace", "array", "aa", "ack", "ia", "v", "ar", "ace", "ata", "ga", "all", "as", "aux", "alpha", "base", "pa", "na", "val", "to", "va", "o", "ae", "fa"], "i": ["ji", "hi", "q", "iti", "ci", "mi", "php", "li", "remote", "iq", "name", "ij", "ui", "ini", "ai", "ix", "multi", "bi", "f", "iy", "at", "ei", "print", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "init", "di", "wi", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "ip", "o", "PI", "ori", "ir", "qi", "phi", "gu", "xi", "me", "sim", "it", "ims", "u", "iii", "I", "this", "ie", "p", "point", "iter", "g", "item", "ic", "iu", "is"], "j": ["oj", "b", "h", "m", "s", "ja", "br", "bl", "ji", "jj", "jc", "it", "q", "r", "z", "uj", "bj", "el", "k", "jump", "ie", "json", "je", "pt", "pr", "on", "xy", "kj", "kid", "note", "jl", "obj", "jo", "g", "v", "Ja", "aj", "jp", "ij", "J", "dj", "us", "jas", "last", "sp", "js", "y", "o", "key", "x", "l", "job", "ge"], "ans": ["posts", "rs", "oss", "rans", "ats", "can", "xs", "ann", "nas", "types", "vals", "lan", "asks", "ens", "ones", "aus", "AN", "cs", "errors", "outs", "anas", "os", "angs", "lets", "sets", "anes", "aps", "anks", "ks", "ends", "ins", "an", "lines", "ars", "names", "ms", "ents", "times", "ns", "ows", "flags", "ants", "ids", "orders", "ons", "ates", "ps", "stats", "nets", "arts", "als", "ls", "ANS", "ints", "amps", "actions"], "total": ["current", "successful", "ful", "gross", "expected", "cat", "basic", "full", "net", "otal", "checked", "t", "planned", "available", "complete", "human", "parent", "this", "info", "met", "recent", "huge", "null", "ta", "Total", " Total", "scale", " totals", "OTAL", "all", "eta", "trans", "percent", "last", "used", "alpha", "base", "equal", "stats", "mean", "max", "sum", "meta", "stable", " TOTAL", "quant"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Iterator;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint data;\\n\t\tint cnt = 0;\\n\t\tint alice = 0;\\n\t\tint bob = 0;\\n\t\tArrayList<Integer> lists = new ArrayList<Integer>();\\n\\n\t\t//\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\\n\t\t//\t\tfor (int list : lists) {\\n\t\t//\t\t\tlists.add(sc.nextInt());\\n\t\t//\t\t}\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tlists.add(sc.nextInt());\\n\t\t}\\n\\n\t\t//\u30bd\u30fc\u30c8\\n\t\tCollections.sort(lists, Collections.reverseOrder());\\n\t\t//\t\tArrays.sort(lists, Collections.reverseOrder());\\n\\n\t\t//\u30bd\u30fc\u30c8\u3057\u305f\u3082\u306e\u3092\u8868\u793a\\n\t\tIterator<Integer> it = lists.iterator();\\n\t\twhile (it.hasNext()) {\\n\t\t\tdata = it.next();\\n\t\t\t//\t\t\tSystem.out.println(data);\\n\t\t\tif (cnt % 2 == 0) {\\n\t\t\t\talice = alice + data;\\n\t\t\t\tcnt++;\\n\t\t\t} else {\\n\t\t\t\tbob = bob + data;\\n\t\t\t\tcnt++;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(alice - bob);\\n\t}\\n\\n}\\n", "target": "132", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tstatic int INF = Integer.MAX_VALUE / 2;\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\\n\t\tint[][] adj = new int[2][N];\\n\\n\t\tfor(int i = 0; i < 2; i++) {\\n\t\t\tfor(int j = 0; j < N; j++) {\\n\t\t\t\tadj[i][j] = sc.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(dfs(adj, 0, 0, N));\\n\t}\\n\\n\tstatic int dfs(int[][] adj, int i, int j, int N) {\\n\t\tif(i == 1 && j >= N - 1) return adj[i][j];\\n\\n\t\tif(i == 1 && j < N-1) {\\n\t\t\treturn adj[i][j] + dfs(adj, i, j+1, N);\\n\t\t} else if(i==0 && j >= N-1) {\\n\t\t\treturn adj[i][j] + dfs(adj, i+1, j, N);\\n\t\t} else {\\n\t\t\treturn adj[i][j] + Math.max(dfs(adj, i+1, j, N), dfs(adj, i, j+1, N));\\n\t\t}\\n\t}\\n}", "target": "140", "substitutes": {"INF": ["inf", "InV", "InH", "CONF", "Inf", "inF", "CONV", "CONH", "CONf", "INf", "INV", "INH", "inH", "inV", "InF"], "sc": [" Sc", "ng", "system", "cc", "tc", "ss", "cr", "pb", "rc", "cl", "bc", "cs", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "sys", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "ctx", "fc", "arc", "sv", "nl", "scan", "lc", "sp", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "N": ["B", "NH", "E", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "OUT", "SN", "G", "SIZE", "NL", "AN", "NS", "I", "D", "NV", "NO", "GN", "NP", "NC", "NB", "L", "ND", "V", "NOR", "TN", "Size", "Name", "NM", "NG", "MN", "H", "CN", "Net", "NT", "None", "NA", "Y", "T", "NOTE", "K", "J", "FN", "Sn", "Q", "NE", "Ne", "n", "No", "M", "R", "C", "Z", "X"], "adj": ["aff", "og", "aq", "addr", "ji", "ani", "desc", "history", "dev", "att", "attr", "xy", "mu", "mem", "ij", "dj", "atts", "sd", "expr", "stat", "pp", "admin", "cmd", "resp", "nav", "gov", "conn", "reg", "ag", "ax", "next", "grad", "align", "compl", "ad", "deg", "eff", "update", "div", "dat", "now", "js", "def", "fix", "pred", "graph", "tmp", "adjust", "dict", "rel", "adv", "diff", "req", "md", "hess", "acc", "gn", "note", "prefix", "aj", "jp", "delay", "ind", "circ", "rev", "apt", "msg", "jac", "cache", "abs", "arr", "ext", "perm", "pkg", "app", "np", "config", "fr", "append", "err", "tab"], "i": ["ii", "phi", "m", "xi", "me", "sim", "ri", "s", "it", "bi", "ji", "ik", "hi", "q", "ims", "in", "u", "yi", "ci", "iso", "iat", "at", "di", "I", "mi", "ie", "info", "gi", "index", "ir", "li", "ei", "si", "pi", "iq", "ti", "iter", "g", "ia", "io", "v", "ar", "ij", "zi", "ui", "cli", "ini", "ai", "ic", "us", "iu", "n", "ix", "ind", "id", "ip", "y", "is", "x", "im", "ori", "l", "ami", "ki"], "j": ["oj", "og", "ja", "br", "ji", "q", "r", "pt", "pr", "xy", "kj", "li", "jl", "obj", "v", "ij", "dj", "jas", "ion", "ijk", "m", "bi", "f", "bj", "at", "jump", "json", "gov", "other", "a", "J", "n", "js", "y", "im", "l", "jj", "uj", "k", "rel", "ch", "kid", "note", "ot", "d", "aj", "jp", "sp", "o", "job", "b", "s", "it", "jc", "jac", "str", "z", "opt", "u", "t", "ie", "ne", "off", "p", "jo", "g", "fr", "x", "em"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String... args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        char[] S = scanner.next().toCharArray();\\n\\n        // \u771f\u9762\u76ee\u306b\u66f8\u304f\\n        int maxCount = 0;\\n        for (int i = 0, currentCnt = 0; i < S.length; i++) {\\n            if (S[i] == 'R') {\\n                currentCnt++;\\n\\n                if (maxCount < currentCnt) {\\n                    maxCount = currentCnt;\\n                }\\n            } else {\\n                if (maxCount < currentCnt) {\\n                    maxCount = currentCnt;\\n                }\\n                currentCnt = 0;\\n            }\\n        }\\n\\n        System.out.println(maxCount);\\n    }\\n}\\n", "target": "141", "substitutes": {"scanner": ["canter", "scheter", " scaner", "Scanener", "Scanner", "canener", "syher", "schening", "scanher", "Scaner", "scanning", "syter", "syner", "syer", "canner", "scanener", "scaner", "scanter", " scanher", "canning", "schener", " scanter", "Scanher", "scheener", "Scanning", "Scanter"], "S": ["B", "E", "P", "s", "CS", " C", "A", "I", "L", "V", "ASC", "N", "DATA", " s", "SU", "state", "ENC", "SOURCE", "M", "R", "states", "C", "VALUE", "X", "CHAR"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main\\n{\\n    static class Reader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer st;\\n \\n\t\tpublic Reader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n \\n\t\tString next() {\\n\t\t\twhile (st == null || !st.hasMoreElements()) {\\n\t\t\t\ttry {\\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\te.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n \\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n \\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n \\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n \\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n \\n\t}\\n    static class Ele implements Comparable<Ele> \\n    {  \\n        public int x,y;  \\n        Ele(int x,int y) \\n        {  \\n            this.x=x;this.y=y; \\n        }  \\n        public int compareTo(Ele ob) {  \\n        if(ob.x!=x)return x-ob.x;\\n        return this.y-ob.y;  \\n        }   \\n    }\\n    int a[][];int b[][];\\n    \\n    long gcd(long a,long b)\\n    {\\n        long min=Math.min(a,b);\\n        long max=Math.max(a,b);\\n        while (max%min!=0)\\n        {\\n            a=max%min;\\n            max=min;min=a;\\n        }\\n        return min;\\n    }\\n\tpublic static void main(String[] args) throws IOException \\n\t{\\n\t\tReader sc=new Reader();//Solution G=new Solution();\\n\t\tPrintWriter o = new PrintWriter(System.out);\\n\t\tint t=1;\\n\t\t//int t=sc.nextInt();\\n\t\t\\n\t\tint n,m,y0,x0,y1,x1,x2,y2,s0,s2;int a[],b[],in[],in1[];\\n\t\tlong k,l;boolean b1[],b2;String s1[],ss,s;\\n\t\t//long l;long a[]; \\n\t\tArrayList<ArrayList<Integer>> ll=new ArrayList<>();\\n\t\tArrayList<Integer> a1=new ArrayList<>();\\n\t\tArrayList<Integer> a2=new ArrayList<>();\\n\t\tArrayList<Integer> a3=new ArrayList<>();\\n\t\tArrayDeque<Integer> deq=new ArrayDeque<>();\\n\t\tTreeSet<Integer> h0=new TreeSet<>();\\n\t\tTreeSet<Integer> h1=new TreeSet<>();\\n\t\tHashMap<Integer,Integer> h=new HashMap<>();\\n\t\ttry{\\n\t\twhile (t-->0)\\n\t\t{\\n\t\t    ss=sc.next();s=sc.next();n=s.length();\\n\t\t    for (int i=0;i<ss.length()-s.length()+1;i++)\\n\t\t    {\\n\t\t        x0=0;\\n\t\t        for (int j=0;j<s.length();j++)\\n\t\t        {\\n\t\t            if (s.charAt(j)!=ss.charAt(i+j))\\n\t\t            x0++;\\n\t\t        }\\n\t\t        n=Math.min(n,x0);\\n\t\t    }\\n\t\t    o.println(n);\\n\t\t    //o.println(s);\\n\t\t    //o.println();\\n\t\t    //o.println();\\n\t\t    //o.println(h);\\n\t\t    //o.println(x2);\\n\t\t    //o.println();\\n\t\t    h0.clear();ll.clear();a1.clear();a2.clear();h1.clear();\\n\t\t}\\n\t\t}\\n\t\tcatch (Throwable e)\\n\t\t{\\n\t\t    e.printStackTrace();\\n\t\t}\\n\t\t//o.println(\"HI\");\\n\t\t\\n        o.flush();\\n        o.close();\\n\t}\\n}", "target": "158", "substitutes": {"br": ["bridge", "Tr", "rs", "lr", "Br", "bsp", "bl", "shr", "cr", "bf", "r", "dr", "sb", "ctr", "ger", "kr", "bs", "bc", "buf", "rob", "rel", "ch", "pt", "pr", "pre", "bb", "next", "bd", "bm", "hr", "ptr", "rb", "sr", "bro", "bp", "bre", "brace", "jp", "gr", "vr", "bt", "tr", "sp", "err", "fr", "bh", "ber", "bn", "wr", "nr", "mr", "BR", "abl"], "st": ["ost", " ss", "sta", "ct", "s", "sa", "sth", "bl", "cr", "net", "r", "sb", "cl", "nd", "inst", "t", "set", "ld", "th", "sty", "se", "so", "stack", "ST", "pt", "std", "start", "usr", "est", "p", "ist", "sh", "stri", "sw", "src", "St", "mt", "ust", "step", "sl", "const", "l", " superst", "bt", "sy", "sn", "sts", "et", "sp", "lt", "fr", "rest", "ts", "stat", "ste", "rt", "stable", "ut", "nt"], "str": ["msg", "string", "s", "j", "STR", "shr", "char", "url", "cr", "ocr", "r", "dr", "arr", "Str", "inst", "cs", "t", "cont", "coll", "exp", "enc", "pr", "result", "cur", "sys", "line", "spec", "vol", "next", "c", "print", "sw", "txt", "res", "output", "name", "raw", "sl", "ns", "gr", "text", "div", "n", "tr", "sp", "fr", "ret"], "x": ["m", "h", "xi", "rx", "ct", "xp", "xe", "i", "e", "xs", "dx", "ox", "r", "z", "mx", "time", "t", "xd", "xxx", "tx", "this", "lat", "lon", "ux", "width", "on", "xy", "ax", "index", "p", "c", "xa", "ex", "w", "lex", "d", "v", "name", "left", "yx", "xf", "alpha", "xx", "xt", "n", "ix", "sex", "xc", "id", "to", "ry", "px", "fx", "l", "X", "wx"], "y": ["any", "ty", "m", "uy", "yer", "fy", "j", "page", "ny", "axy", "i", "e", "ies", "wy", "ery", "ye", "hy", "ya", "z", "yt", "yi", "iy", "oy", "t", "py", "lat", "vy", "lon", "ch", "sky", "ady", "xy", "hey", "sys", "ym", "yl", "ay", "p", "c", "gy", "dy", "v", "Y", "my", "ey", "yo", "cy", "yy", "sy", "n", "ry", "ly", "o", "col"], "ob": ["gob", "oj", "eb", "nob", "og", "bo", "bl", "ub", "pb", "obi", "ox", "sb", "bj", "rob", "oy", "el", "lib", "Ob", "ab", "OB", "ib", "emb", "ne", "cb", "ie", "so", "od", "lb", "bb", "ro", "ot", "ow", "obj", "oc", "db", "obs", "rb", "buff", "etc", "abc", "adr", "oin", "obb", "deb", "ebin", "obo", "o", "oid", "orb", "erb"], "a": ["aaa", "act", "m", "sta", "la", "oa", "s", "ap", "sa", "i", "e", "eas", "f", "da", "aq", "am", "r", "arr", "z", "u", "t", "at", "A", "au", "area", "this", "ab", "ca", "ax", "ma", "ac", "p", "c", "ba", "ea", "xa", "aka", "le", "an", "w", "aa", "d", "ia", "aj", "ar", "g", "ata", "v", "as", "access", "alpha", "n", "pa", "na", "val", "va", "ana", "al", "l", "ae", "fa"], "b": ["B", "m", "eb", "j", "i", "e", "bi", "f", "bl", "pb", "r", "be", "z", "by", "fb", "sb", "bs", "bc", "t", "ib", "cb", "emb", "bis", "beta", "bb", "bd", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "bin", "bar", "base", "n", "o", "l", "wb", "erb"], "min": ["value", "mel", "loc", "in", " maj", "ln", "mins", "mi", "Max", "len", "dim", "v", "mem", "un", "bar", "mini", "stat", "m", "lower", "sol", " avg", "doc", "foo", "temp", "MIN", "only", "next", "sub", "margin", "local", "length", "dist", "update", "div", "n", "lt", "cmp", "minute", "sum", "initial", "mod", "range", "mask", "minimum", "tmp", "sa", "init", "lim", "Min", "dec", "diff", " ma", "start", "aug", "aj", "na", "default", "val", "size", "small", "man", "mult", "low", "j", " MIN", " minimum", "abs", "span", "mid", "fun", "sort", "emin", "first", "minus", "ma", "p", "latest", "inner", "sin", " minor", "version", "left", "step", "shift", "last", "mean", "err"], "max": ["range", "act", "out", "m", "inter", "cover", "MAX", "cache", "full", "wrap", "r", "z", "right", "mx", "window", "t", "k", "diff", "rand", "prime", "start", "first", "ax", "log", "ma", "huge", "Max", "c", "conf", "maximum", "ex", "w", "scale", "v", "end", "aj", "add", "largest", "total", "all", "step", "mad", "inv", "last", "aux", "length", "div", "n", "na", "default", "mean", "view", "rest", "size", "sum", "grow", "gt", "mod"], "sc": [" Sc", " dc", " ss", " bc", "cr", "rc", "cl", " rc", "Sc", " dec", " ac", " se", " SC", " scr", " resc", "c", " cle", "SC", " ec", "or", " sh", " sp", "ra", " unsc", "cer", " cs", " sa", "err"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\tString st = t.substring(0,s.length());\\n\t\tif (s.matches(st) && s.length() + 1 == t.length()) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\t\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "137", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tint A = scan.nextInt();\\n\t\tint B = scan.nextInt();\\n\t\tint C = scan.nextInt();\\n\t\tint D = scan.nextInt();\\n\\n\t\twhile (true) {\\n\t\t\tC = atk(B, C);\\n\t\t\tif (C <= 0) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\tbreak;\\n\t\t\t} else {\\n\t\t\t\tA = atk(D, A);\\n\t\t\t\tif (A <= 0) {\\n\t\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\\n\t}\\n\\n\tpublic static int atk(int atk, int hp) {\\n\\n\t\thp -= atk;\\n\\n\t\treturn hp;\\n\t}\\n\\n}\\n\\n", "target": "186", "substitutes": {"scan": ["save", "out", "san", "clean", "system", "can", "skip", "char", "cat", "Scan", "ann", "nn", "run", "pass", "in", "r", "re", "scroll", "set", "row", "read", "sync", "black", "connect", "se", "info", " Scan", "ch", "conn", "sys", "proc", "sc", "reach", "log", "ner", "report", "p", "query", "c", "gen", "sur", "send", "list", "gate", "parse", "sql", "an", "gc", "get", "g", "sin", "sr", "sv", "bin", "search", "util", "n", " scanner", "cgi", "x", "stat", "find"], "A": ["AC", "AT", "E", "P", "F", "GA", "LA", "EA", "AD", "AA", "AS", "CA", "As", "S", "G", "RA", "AN", "AI", "AB", "I", "API", "L", "SA", "AL", "PA", "ACC", "H", "AE", "ACT", "N", "AF", "An", "AM", "AU", "AV", "NA", "Y", "HA", "ACE", "AY", "IA", "Alpha", "ARC", "AX", "AR", "U", "M", "R", "X", "O", "AP"], "B": ["E", "b", "BB", "S", "BF", "BA", "G", "RB", "AB", "I", "OB", "NB", "L", "VB", "V", "EB", "BI", "TB", "N", "BL", "BS", "IB", "Y", "DB", "GB", "WB", "LB", "BU", "M", "R", "Bi", "SB", "BE", "BR", "Bs", "BC"], "C": ["CON", "E", "CU", "P", "F", "Co", "DC", "CB", "CM", "S", "CA", "G", "CW", "CO", "CR", "CS", "CI", "I", "CP", "L", "COM", "JC", "V", "CH", "LC", "CD", "c", "H", "CN", "VC", "N", "CL", "SC", "Y", "T", "K", "Q", "CE", "CV", "CC", "Cs", "U", "M", "R", "X", "O", "BC"], "D": ["DM", "E", "De", "P", "Dir", "DF", "DE", "DC", "DN", "Del", "AD", "DL", "DS", "G", "Dec", "L", "DO", "DP", "V", "N", "DI", "d", "Y", "T", "DB", "DA", "DR", "Q", "Ds", "R", "DIR", "DD", "Deb", "Z", "DK", "O", "LD"], "atk": ["attkick", "atf", "etk", " atch", "ateke", "athek", "atp", " atkk", " atkick", "athecp", "atheki", " atcp", "attkt", " atkt", " atf", "attch", "onetka", "atecp", "atcp", "atka", " atka", "onetkk", "Atf", "intkick", "Atkk", "atch", "onetk", "etv", "atki", "attk", "etn", " atp", "atke", "atkk", "atek", "Atv", "atn", " atn", " atke", "Atn", "etch", "intch", "etp", "atheke", "atkt", "atv", "intk", "Atp", "Atk", "etf", "intkt", "Atka", "onetch", "ateki", " atv", "atkick", "Atch", " atki"], "hp": ["hap", "mot", "hop", "phi", "imp", "h", "xp", "ap", "i", "hi", "phy", " tip", "mph", "aus", "HP", "ph", "htt", "hd", "health", "hu", "eth", "dp", "HC", " gp", "index", "tip", "php", "mu", " h", "tp", "p", "ati", "np", "H", "ptr", "ih", "rh", "ht", "bp", "jp", " tcp", "gp", "hl", "n", " xp", "wp", "ip", "hyp", "dh", "ump", "cp", " ip"]}}
{"code": "\\n\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        PrintWriter out = new PrintWriter(System.out);\\n        Scanner sc = new Scanner(System.in);\\n        Task task = new Task();\\n        task.solve(sc, out);\\n        out.flush();\\n        sc.close();\\n    }\\n    static class Task{\\n        public void solve(Scanner sc, PrintWriter out){\\n            int first = nint(sc);\\n            int last = nint(sc);\\n            int count=0;\\n            for (int i = first; i <= last; i++){\\n                String num = String.valueOf(i);\\n                int strLength = num.length();\\n                boolean circle = true;\\n                for (int j=0; j<strLength/2; j++){\\n                    if (num.charAt(j) != num.charAt(strLength-j-1)){\\n                        circle = false;\\n                    }\\n                }\\n                if (circle){\\n                    count++;\\n                }\\n            }\\n            out.println(count);\\n        }\\n    }\\n\\n    static int nint(Scanner sc){\\n        return Integer.parseInt(sc.next());\\n    }\\n    static long nlong(Scanner sc){\\n        return Long.parseLong(sc.next());\\n    }\\n    static double ndouble(Scanner sc){\\n        return Double.parseDouble(sc.next());\\n    }\\n    static float nfloat(Scanner sc){\\n        return Float.parseFloat(sc.next());\\n    }\\n    static String nstr(Scanner sc){\\n        return  String.valueOf(sc.next());\\n    }\\n    static long[] longLine(Scanner sc, int size){\\n        long[] lLine = new long[size];\\n        for (int i = 0; i < size; i++) {\\n            lLine[i] = nlong(sc);\\n        }\\n        return lLine;\\n    }\\n    static int[] intLine(Scanner sc, int size){\\n        int[] iLine = new int[size];\\n        for (int i = 0; i < size; i++) {\\n            iLine[i] = nint(sc);\\n        }\\n        return iLine;\\n    }\\n    static String[] strLine(Scanner sc, int size){\\n        String[] strLine = new String[size];\\n        for (int i = 0; i < size; i++) {\\n            strLine[i] = nstr(sc);\\n        }\\n        return strLine;\\n    }\\n}", "target": "104", "substitutes": {"out": ["b", "console", "aos", "it", "str", "net", "in", "r", "OUT", " Out", "window", "t", "set", "pool", "at", "ou", "outs", "lock", "os", "this", "info", "cb", "ch", "outer", "on", "sys", "conn", "Out", "log", "client", "null", "p", "c", "print", "inner", "ex", "gc", "write", "w", "res", "g", "end", "output", "io", "name", "OU", "all", "screen", "co", "scan", "n", "to", "flush", "over", "o", "writer", "x", "sum", "err", "gt", "nt"], "sc": ["tc", "in", "cl", "desc", "com", "ctl", "pc", "cur", "cu", "ck", "mc", "scl", "nc", "SC", "sw", "fc", "scope", "mic", "css", "asc", "unc", "anc", "console", "cc", "pb", "rc", "ec", "ok", "esc", "sync", "go", "isc", "osc", "c", "sci", "ctx", "st", "screen", "dc", "lc", "sel", "func", "usc", "sq", "bc", "dec", "so", "ch", "uc", "proc", "ram", "parse", "gc", "sr", "arc", "sv", "cor", "sp", "cgi", "sch", "sec", "disc", "cr", "cam", "script", "cs", "Sc", "th", "exec", "ca", "sys", "null", "sh", "config", "ic", "scrib", "scan", "cer", "sche", "irc"], "task": ["ask", "rake", "msg", "course", "system", "activity", "command", "service", "tc", "cmd", "net", "problem", "link", "event", "t", "thread", "sync", "tx", "this", "node", "function", "unknown", "commit", "tf", "target", "bolt", "Task", "module", "stop", "status", "total", "worker", "block", "master", "process", "project", "piece", "table", "work", "func", "question", "job"], "first": ["prev", "current", "full", "top", "primary", "min", "ast", "row", "frame", "this", "before", "start", "index", "pre", "next", "part", "front", "latest", "st", "total", "all", "small", "second", "base", "begin", "now", "default", "rest", "initial", "First", "head"], "last": ["range", "any", "after", "full", "nd", "shell", "ast", "close", "bottom", "highest", "recent", "list", "next", "est", "huge", "vol", "latest", "best", "then", "le", "st", "end", "largest", "total", "all", "hest", "most", "length", "second", "worst", "max", "Last", "tail"], "count": ["check", "ct", "flag", "ount", "cache", "success", "number", "ctr", "core", "span", "cs", "set", "cont", "coll", "force", "info", "result", "counter", "index", "start", "list", "report", "next", "c", "code", "amount", "currency", "conf", "status", "score", "trace", "draw", "comment", "add", "total", "make", "process", "length", "cell", "display", "n", "Count", "common", "cond", "child", "call", "max", "sum", "find", "found", "nt"], "i": ["ji", "q", "in", "ln", "ci", "mi", "php", "li", "iq", "v", "ij", "ui", "ini", "ai", "us", "integer", "ice", "ix", "m", "console", "multi", "e", "bi", "f", "iy", "println", "ei", "pi", "_", "a", "cli", "zi", "chain", "n", "id", "def", "y", "func", "im", "l", "ami", "ity", "ki", "ii", "um", "ri", "init", "di", "cont", "wi", "info", "se", "gi", "index", "ni", "si", "ti", "get", "io", "\u0438", "ind", "MI", "ip", "o", "PI", "ori", "qi", "phi", "xi", "me", "con", "sim", "it", "u", "t", "I", "this", "ie", "series", "exec", "p", "ex", "iter", "ia", "ic", "nl", "iu", "is", "mac", "x", "oi", "batch", "syn"], "num": ["mat", "um", "m", "norm", "msg", "img", "mon", "tmp", "str", "Num", "number", "net", "prim", "unit", "temp", "NUM", "th", "pn", "info", "mn", "nam", "cu", "reg", "zero", "nm", "mu", "en", "p", "np", "code", "ram", "obj", "txt", "nb", "cal", "nu", "mem", "name", "coord", "uu", "text", "n", "na", "cmp", "ang", "conv", "hex", "nom", "sum", "rem", "nt"], "strLength": ["strlength", " strWidth", "strDistance", "StrWidth", "STRWidth", "StrLength", "strWidth", " strlength", "StrDistance", "strLen", "STRDistance", "ctrDistance", "ctrLength", " strLen", "Strlength", "STRLen", "ctrlength", "STRlength", "STRLength", "ctrLen", "StrLen"], "j": ["oj", "b", "m", "adj", "ja", "br", "char", "ji", "jj", "jc", "jac", "f", "q", "z", "uj", "bj", "el", "ph", "k", "jump", "jit", "ie", "json", "je", "ju", "kj", "ax", "kid", "jl", "obj", "jo", "_", "g", "bot", "other", "v", "aj", "jp", "ij", "J", "dj", "jas", "n", "js", "y", "max", "key", "x", "err", "job", "ge"], "circle": [" circ", "pie", "eye", "cart", "console", "orange", "yellow", "cover", "card", "square", " Circle", "cake", "lock", "blue", "star", "ico", "plain", "escape", "line", "pixel", "white", "tip", "poke", "cone", "box", "cycle", "radius", "shape", "arc", "block", "center", "co", "cell", "ape", "crop", "angle", "iamond", "butt", "piece", "icon", "sp", "snap", "circ", "city"], "size": ["message", "password", "see", "command", "SIZE", "group", "zero", "Size", "level", "scale", "no", "name", "notice", "scope", "city", "year", "age", "number", "needed", "goal", "time", "empty", "width", "security", "status", "root", "seed", "total", "capacity", "ms", "type", "chain", "length", "sn", "equal", "vector", "now", "id", "table", "sum", "sample", "store", "member", "window", "species", "index", "si", "code", "shape", "ze", "sp", "source", "small", "any", "ize", "site", "speed", "address", "dimension", "cache", "body", "span", "sort", "scroll", "set", "use", "height", "network", "depth", "storage", "send", "space", "score", "style", "sense"], "lLine": ["lIssue", " lFrame", "longLine", "liFile", " lBand", "zLine", "lFrame", "longRow", "zFrame", "liRow", " lRow", " lIssue", " lBlock", "zBlock", "leLine", "liIssue", " lChain", "leChange", "longChain", "llRow", " lChange", "zRow", "llFrame", "liLine", "lRow", "llLine", "lBand", "lChain", "longBand", " lFile", "leIssue", "liChain", "leFile", "liBand", "liChange", "lChange", "llBlock", "lFile", "lBlock"], "iLine": ["liLin", "iLe", "iDir", "phiLin", "intLe", " iRow", "siChain", "liRow", "iLin", " iLin", "iLoop", " iUser", "liFrame", " iFrame", "intUser", "uLine", "intLine", "phiRow", "iChain", "liLine", "siLine", "phiLine", "iRow", "uLe", "liDir", " iDir", "iFrame", "uChain", "intFrame", "phiDir", "liUser", "uLoop", "siLe", "intRow", "iUser", "intLoop", "siLoop", "intChain"], "strLine": ["floatGen", "strList", "charBlock", "stringGen", "strSection", "charLin", " strBlock", "charList", "strLin", " strLin", "floatSection", " strGen", "floatline", "StrLine", " strList", " strline", "stringSection", "StrBlock", "strline", "stringline", "stringLine", "StrLin", " strSection", "floatLine", "strBlock", "StrList", "charLine", "strGen"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\n/**\\n * @author varun on 7/1/2018\\n * @project CompetitiveProgramming\\n */\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n        int[] arr = new int[N];\\n        for (int i = 0; i < N; ++i) arr[i] = scanner.nextInt();\\n        Arrays.sort(arr);\\n        System.out.println(arr[N-1] - arr[0]);\\n    }\\n}\\n", "target": "214", "substitutes": {"scanner": ["canter", " scaner", "Scanener", "scner", "Scanner", " scanener", "canener", "scener", "caner", "Scaner", "scer", "scanener", "canner", "scaner", "scanter", "scter", " scanter", "Scanter"], "N": ["NH", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "NL", "AN", "NS", "I", "GN", "D", "NO", "NP", "NC", "NB", "L", "ND", "V", "TN", "NM", "Net", "NT", "NA", "Y", "T", "K", "J", "Sn", "NE", "n", "Len", "No", "M", "R", "Length", "C", "O"], "arr": ["aaa", "act", "warn", "pad", "img", "arb", "br", "ev", "bl", "rep", "par", "r", "dr", "av", "vec", "inst", "dict", "buf", "au", "coll", "rel", "good", "att", "agg", "pl", "art", "stack", "gb", "attr", "enc", "repl", "ll", "cur", "sys", "list", "app", "ord", "var", "obj", "data", "db", "array", "aa", "res", "iter", "iq", "ar", "ij", "Ar", "gr", "bar", "arry", "div", "dat", "map", "fr", "ind", "val", "cmp", "ray", "elt", "conv", "alph", "ell", "batch", "frac", "nt"], "i": ["ii", "any", "phi", "m", "gu", "xi", "multi", "j", "sim", "ri", "init", "e", "it", "bi", "ji", "hi", "in", "u", "ci", "set", "di", "I", "mi", "ie", "ico", "gi", "li", "ei", "c", "si", "pi", "iter", "ti", "v", "io", "my", "cli", "ij", "zi", "ui", "ini", "ic", "ai", "us", "iu", "n", "ix", "id", "ip", "y", "is", "uri", "x", "im", "l", "qi"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String[] args)throws IOException{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\\n\t\tString str = br.readLine();\\n\t\\n\t\tString[] strAry = str.split(\" \");\\n\\n\t\tint ar[] = new int[5];\\n\\n\t\tfor(int i=0;i<5;i++){\\n\t\t\tar[i] = Integer.parseInt(strAry[i]);\\n\t\t}\\n\\n\t\tint W = ar[0];\\n\t\tint H = ar[1];\\n\t\tint x = ar[2];\\n\t\tint y = ar[3];\\n\t\tint r = ar[4];\\n\\n\t\tif( x >= r && x <= W-r){\\n\t\t\t\tif( y >= r && y <= H-r){\\n\t\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\t}else{\\n\t\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\t}\\n\t\t}else{\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t}\\n}", "target": "171", "substitutes": {"br": ["bridge", "out", "lr", "Br", "bl", "cr", "dr", "be", "kr", "bs", "bc", "buf", "rel", "ch", "pr", "er", "next", "bd", "ro", "bm", "hr", "db", "rb", "bp", "bro", "gr", "vr", "bt", "div", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "mr", "BR"], "str": ["rs", "out", "b", "string", "s", "STR", "char", "it", "f", "cr", "ocr", "dr", "arr", "Str", "t", "pr", "line", "vol", "p", "oct", "print", "obj", "iter", "txt", "st", "sl", "gr", "text", "div", "n", "dat", "tr", "sp", "fr", "wr"], "strAry": ["StrA3", "StrArri", "strAr3", "StrArry", "StrAri", "strA3", "strBries", "strB3", "strBble", "strArries", "strArury", "strAsry", "StrBble", "strArble", "strAble", "StrAries", "strAsble", "StrAble", "StrAr3", "StrArries", "strAury", "strAri", "strArri", "StrAry", "strBury", "strary", "stra3", "StrBri", "StrAury", "StrBry", "strBry", "strAries", "strAsri", "strAsury", "strArry", "straries", "strBri", "StrBury", "strari"], "ar": ["nar", "aro", "per", "lar", "inter", "aer", "ear", "arian", "ap", "kar", "cat", "par", "rar", "arro", "arr", "ary", "era", "av", "ara", "au", "att", "ard", "tar", "art", "ari", "ur", "dar", "rg", "er", "arity", "ma", "usr", "list", "var", "array", "arc", "iar", "ars", "mar", "are", "Ar", "adr", "arm", "gr", "war", "ra", "AR", "har", "ser", "ry", "al", "err", "ir", "car", "arp", "air"], "i": ["ii", "phi", "m", "me", "j", "multi", "sim", "ri", "init", "bi", "it", "ji", "hi", "fire", "q", "u", "ci", "set", "di", "I", "mi", "exp", "ie", "gi", "index", "client", "li", "p", "ei", "si", "point", "pi", "iter", "ti", "ij", "zi", "ui", "ms", "ini", "ai", "ic", "us", "chain", "iu", "base", "ind", "ix", "id", "ip", "o", "is", "uri", "im", "batch", "qi"], "W": ["B", "WS", "Win", "E", " w", "P", "F", "WD", "FW", "EW", "RW", "WH", "CW", "Width", "WT", "A", "I", "WW", "L", "BW", "V", "WC", "N", "w", "SW", "Y", "T", "VW", "OW", "We", "DW", "WA", "NW", "Sw", "M", "R", "WR", "MW", "C", "Wh", "WP", "X"], "H": ["B", "NH", "h", "P", "HT", "Ch", "HQ", "G", "I", "HTML", "L", "HC", "V", "CH", " h", "HH", "TH", "N", "HE", "Y", "T", "HA", "HO", "J", "Q", "HI", "OH", "MH", "M", "R", "HB", "Height", "Length", "C", "X", "HR"], "x": ["m", "h", "xi", "rx", "ct", "xp", "xs", "f", "dx", "ox", "z", "u", "mx", "t", "at", "el", "tx", "lat", "ux", "width", "on", "xy", "ax", "p", "c", "xa", "ex", "w", "g", "v", "xf", "xt", "n", "ix", "xc", "o", "px", "fx", "l", "X", "wx"], "y": ["ty", "b", "h", "m", "uy", "yer", "j", "ny", "ies", "wy", "ye", "ya", "ox", "z", "by", "yt", "yi", "iy", "oy", "t", "py", "sky", "on", "xy", "ym", "yl", "ay", "p", "c", "v", "a", "Y", "my", "ey", "yo", "cy", "yy", "sy", "yr", "n", "ry", "o", "l"], "r": ["range", "rd", "out", "m", "h", "b", "rx", "rate", "ri", "e", "mr", "f", "q", "rar", "dr", "rc", "u", "re", "t", "nr", "k", "rat", "pr", "result", "rg", "er", "p", "ro", "c", "rb", "w", "sr", "d", "g", "res", "v", "a", "rt", "or", "l", "n", "id", "R", "ry", "err", "rr"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Main main = new Main();\\n        main.solve(args);\\n    }\\n\\n    public void solve(String[] args) {\\n        MyScanner scanner = new MyScanner();\\n\\n        // \u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3053\u3053\u304b\u3089\\n        int ans = 0 ;\\n        String S = scanner.next();\\n        String T = scanner.next();\\n        \\n\t\tfor(int i = 0; i<3; i++) {\\n\t\t\tif(S.charAt(i)==T.charAt(i))\\n\t\t\t\tans++;\\n\t\t}\\n\\n        System.out.println(ans);\\n        \\n        // \u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3053\u3053\u307e\u3067\\n\\n    }\\n\\n    private class MyScanner {\\n        String[] s;\\n        int i;\\n        BufferedReader br;\\n        String reg = \" \";\\n        MyScanner () {\\n            s = new String[0];\\n            i = 0;\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n        public String next() {\\n            try {\\n                if (i < s.length) return s[i++];\\n                String line = br.readLine();\\n                while (line.equals(\"\")) {line = br.readLine();}\\n                s = line.split(reg, 0);\\n                i = 0;return s[i++];\\n            } catch (Exception e) {e.printStackTrace();}\\n            return null;\\n        }\\n        public int nextInt() {\\n            try {return Integer.parseInt(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n        public double nextDouble() {\\n            try {return Double.parseDouble(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n        public long nextLong()  {\\n            try {return Long.parseLong(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n    }\\n}\\n", "target": "243", "substitutes": {"scanner": [" scanNER", "canNER", "canr", " scaner", "scanr", "canner", " scanr", "scanNER", "scaner", "Scanr", "Scanner", "Scaner", "ScanNER", "caner"]}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tlong N = sc.nextLong();\\n\\n\t\tlong last = 0;\\n\\n\t\tlong i = 1;\\n\t\tlong sqrt_N = (long)Math.sqrt(N);\\n\t\twhile(i <= sqrt_N){\\n\t\t\tif(N % i == 0){\\n\t\t\t\tlast = N / i;\\n\t\t\t}\\n\t\t\ti++;\\n\t\t}\\n\\n\t\tSystem.out.println(String.valueOf(last).length());\\n\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "61", "substitutes": {"sc": ["system", "cc", "cle", "Scan", "tc", "cr", "ss", "capt", "rc", "pb", "cl", "bc", "cs", "reader", "esc", "Sc", "ch", "pc", "isc", "osc", "uc", "sys", "ck", "mc", "c", "nc", "sh", "SC", "gc", "txt", "sr", "sw", "arc", "sv", "nl", "scrib", "lc", "scan", "RC", "sp", "asc", "sch", "anc", "sec", "syn", "sq"], "N": ["B", "NH", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "G", "NL", "NS", "I", "GN", "D", "NO", "CNN", "NUM", "A", "NP", "W", "NB", "L", "ND", "V", "TN", "Size", "NG", "NM", "MN", "H", "CN", "Net", "NT", "NA", "T", "K", "FN", "Sn", "Q", "NF", "n", "NW", "M", "R", "C"], "last": ["prev", "cost", "extra", "show", "expected", "str", "alias", " Last", "needed", "nd", "yt", "right", "reverse", "ast", "t", "close", "good", "pretty", "bottom", "highest", "first", "significant", "next", "slave", "est", "latest", "count", "best", "seen", "st", "end", "largest", "total", "left", "length", "n", "unique", "worst", "rest", "las", "max", "old", "Last", "stable"], "i": ["ii", "phi", "m", "xi", "j", "multi", "ri", "it", "bi", "f", "hi", "in", "u", "ci", "t", "di", "I", "mi", "gi", "index", "client", "uli", "list", "li", "p", "ei", "si", "pi", "iter", "ti", "d", "v", "io", "cli", "zi", "ui", "ai", "ic", "iu", "n", " I", " j", "ix", "ind", "id", "ip", "y", "o", "is", "x", "im", "ori", "l", "qi"], "sqrt_N": ["sqrt_NS", "sqrier_NS", "sqr2S", "sqr2A", "sqr_A", "sqrier_M", "sqr2N", "sqr2L", "sqr_L", "sqrier_Power", "sqr_N", "sqrt2A", "sqrt_M", "sqrt_A", "sqrt_Power", "sqrt2L", "sqrt_L", "sqrt2N", "sqrt_S", "sqrier_N", "sqrt2S", "sqr_S"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main {\\n\tpublic static void main(String args[]) throws IOException {\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tSolver solver = new Solver();\\n\t\tsolver.init();\\n\t\tsolver.readHead(in.readLine());\\n\t\t// for (; solver.hasNext();) {\\n\t\t// solver.readBody(in.readLine());\\n\t\t// }\\n\t\t// solver.solve();\\n\t}\\n}\\n\\nclass Solver {\\n\tint N;\\n\tint cnt;\\n\\n\tpublic void init() {\\n\t\tN = 0;\\n\t\tcnt = 0;\\n\t}\\n\\n\tpublic void readHead(String str) {\\n\t\tString[] strArr = str.split(\"\\\\s+\");\\n\t\t// N = Integer.parseInt(strArr[0]);\\n\t\t// System.out.println(N);\\n\t\tlong a = Long.parseLong(strArr[0]);\\n\t\tlong b = Long.parseLong(strArr[1]);\\n\t\tlong k = Long.parseLong(strArr[2]);\\n\t\tif (a > k) {\\n\t\t\ta -= k;\\n\t\t\tk = 0;\\n\t\t} else {\\n\t\t\tk -= a;\\n\t\t\ta = 0;\\n\t\t}\\n\t\tif (b > k) {\\n\t\t\tb -= k;\\n\t\t} else {\\n\t\t\tb = 0;\\n\t\t}\\n\t\tSystem.out.println(a + \" \" + b);\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\treturn cnt < N;\\n\t}\\n\\n\tpublic void readBody(String str) {\\n\t\t// System.out.println(str);\\n\t\tcnt++;\\n\t}\\n\\n\tpublic void solve() {\\n\\n\t}\\n}\\n", "target": "128", "substitutes": {"in": ["out", "b", "In", "inf", "con", "isin", "i", "init", "it", "f", "asin", " IN", "r", "OUT", "user", "body", "file", "rin", "reader", "read", "diff", "IN", "this", "info", "std", "on", "from", "line", "er", "gin", "en", "ins", "inner", "conf", "inn", "sin", "cin", "get", "st", "input", "world", "all", "bin", "ini", "inv", "thin", "stream", "n", "ind", "readable", "id", "din", "is", "sum", "err", "win"], "solver": ["Solving", "resolve", "Solved", "sol", "solving", "resolution", "resolved", "ssolved", "solution", "resolving", "Solver", "ssolving", "Sol", "resolver", "ssolution", "solved", "ssol", "ssolver", "Solve", "solve", "ssolve", "resol", "Solution"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int prime = Integer.parseInt(sc.next());\\n\\n    if (prime == 2) {\\n      System.out.println(prime);\\n      return;\\n    }\\n\\n    if (prime % 2 == 0) {\\n      prime++;\\n    }\\n    \\n    while (true) {\\n      for (int i = 3; ; i+=2) {\\n        if (prime % i == 0) {\\n          prime += 2;\\n          break;\\n        }\\n        \\n        if (i > prime / 2) {\\n          System.out.println(prime);\\n          return;\\n        }\\n      }\\n    }\\n  }\\n}", "target": "183", "substitutes": {"sc": [" Sc", "out", "tch", "cc", "cle", "tc", "cr", "ss", "capt", "cl", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "ch", "pc", "isc", "osc", "soc", "uc", "sys", "mc", "scl", "c", "nc", "acc", "sub", "SC", "sw", "gc", "src", "sv", "screen", "nl", "dc", "scan", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "sq"], "prime": ["eq", "digit", "test", "prof", "pri", "pr", "zero", "xy", "level", "trace", "scale", "ice", "one", "sup", "ties", "where", "number", "temp", "time", "division", "free", "ide", "finger", "result", "dig", "ve", "date", "tp", "next", "peg", "print", "three", "ite", "seed", "serial", "total", "times", "length", "div", "timeout", "primary", "Prime", "inter", "floor", "density", "profile", "sequence", "proxy", "se", "pre", "index", "random", "note", "prefix", "power", "setup", "size", "te", "ge", "nice", "done", "pie", "phi", "extra", "me", "pe", "speed", "tie", "sort", "set", "thread", "lock", "series", "ne", "minus", "here", "two", "su", "score", "iter", "zip", "angle", "tree", "condition", "key", "max"], "i": ["ii", "phi", "m", "me", "xi", "multi", "sim", "j", "ri", "fi", "s", "sequence", "bi", "init", "it", "f", "hi", "ji", "q", "u", "ci", "t", "di", "I", "mi", "gi", "index", "mu", "li", "ei", "si", "p", "inner", "pi", "iter", "ti", "d", "v", "cli", "zi", "ui", "ini", "ai", "ic", "l", "iu", "mini", "err", "ix", "id", "ip", "o", "is", "uri", "asi", "im", "x", "batch", "qi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tsc.close();\\n\t\t\\n\t\tint ans = 0;\\n\t\t\\n\t\tfor(int i = 1;i <= N;i+=2) {\\n\t\t\tint count = 0;\\n\t\t\t\tfor(int j = 1;j <= i/2;++j)\\n\t\t\t\t\tif(i % j == 0)\\n\t\t\t\t\t\tcount++;\\n\t\t\tif(count == 7)\\n\t\t\t\tans++;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}", "target": "85", "substitutes": {"sc": ["out", "system", "cc", "cle", "Scan", "tc", "cr", "ss", "rc", "cl", "sb", "bc", "cs", "reader", "ec", "esc", "dec", "Sc", "ch", "pc", "isc", "osc", "uc", "sys", "ck", "psc", "mc", "scl", "nc", "c", "sub", "sh", "SC", "gc", "sw", "sr", "sv", "nl", "scan", "lc", "RC", "sp", "asc", "anc", "sch", "sec", "usc", "syn", "sq"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "NL", "NS", "I", "D", "NO", "NP", "NC", "NB", "L", "V", "TN", "Size", "NG", "H", "NT", "NA", "T", "K", "J", "Sn", "n", "M", "R", "C", "Z", "X", "O"], "ans": ["rows", "posts", "uns", "checks", "con", "s", "can", "ats", "ann", "nn", "vals", "ens", "reports", "cs", "AN", "errors", "outs", "os", "ums", "lets", "has", "offs", "ots", "aps", "gs", "reads", "ks", "ends", "ins", "an", "cons", "ions", "ars", "names", "ms", "orts", "flags", "ns", " scans", "ows", "ants", "ids", "orders", "times", "scan", "n", "stats", "faces", "arts", "ls", "ANS", "ts", "ports", "olds", "nt"], "i": ["ii", "phi", "m", "xi", "multi", "it", "bi", "init", "ji", "f", "hi", "by", "ci", "di", "I", "mi", "ie", "gi", "start", "index", "li", "ei", "si", "pi", "ti", "g", "v", "iri", "ij", "zi", "ui", "ini", "ai", "ic", "iu", "n", "ix", "id", "ip", "y", "is", "PI", "x", "im", "ami", "ki"], "count": ["current", "check", "con", "ct", "flag", "ount", "cc", "cache", "number", "ctr", "hold", "cs", "cd", "cont", "coll", "result", "counter", "index", "list", "report", "len", "acc", "c", "amount", "conf", "trace", "nb", "add", "total", "flags", "length", "used", "n", "Count", "now", "cond", "child", "call", "max", "size", "sum", "OUNT", "find", "found", "nt"], "j": ["oj", "b", "ct", "ja", "br", "ji", "jj", "bi", "jc", "f", "q", "z", "uj", "bj", "bs", "el", "ph", "k", "jump", "jit", "json", "pr", "kj", "li", "jl", "obj", "jo", "g", "other", "v", "d", "aj", "jp", "ij", "dj", "J", "jas", "l", "n", "fr", "js", "y", "o", "im", "err", "job", "let"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n        // TODO ?????????????????????????????????????????????\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n        while(true){\\n            String tmpStr = br.readLine();\\n            if(tmpStr == null){\\n                break;\\n            }\\n\\n            String[] tmpArray = tmpStr.split(\" \");\\n\\n            int num1 = Integer.parseInt(tmpArray[0]);\\n            int num2 = Integer.parseInt(tmpArray[1]);\\n\\n            int sum = num1 + num2;\\n\\n            System.out.println(Integer.toString(num1 + num2).length());\\n        }\\n\\n\\n    }\\n\\n}", "target": "176", "substitutes": {}}
{"code": "import java.util.*;\\n \\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int k = sc.nextInt();\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    String ans = (a/k * k + k <= b || a%k == 0) ? \"OK\" : \"NG\";\\n    System.out.println(ans);\\n  }\\n}", "target": "28", "substitutes": {"sc": ["sa", "cc", "cle", "tc", "cr", "ko", "rc", "cl", "irc", "bc", "cs", "ec", "ok", "desc", "esc", "dec", "Sc", "ctl", "sync", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "c", "nc", "sub", "sh", "acc", "SC", "gc", "sw", "inc", "fc", "ctx", "sv", "dc", "lc", "scan", "sp", "ser", "asc", "conv", "ctrl", "sch", "sec", "anc", "usc", "syn", "sq"], "k": ["mk", "unk", "m", "j", "dk", "sk", "i", "ke", "f", "ik", "ko", "kn", "q", "u", "kr", "km", "ok", "ikk", "kh", "kind", "ak", "ck", "kj", "kid", "p", "kl", "ka", "c", "ks", "g", "d", "v", "K", "ijk", "num", "kk", "ket", "kw", "n", "tk", "kil", "kernel", "kg", "o", "key", "ek", "ku", "ki"], "a": ["sta", "la", "oa", "j", "sa", "i", "e", "f", "r", "am", "t", "at", "A", "au", "area", "ab", "ak", "ma", "ac", "p", "c", "ba", "ao", "amount", "ta", "an", "aa", "d", "ia", "aj", "ar", "ack", "ata", "as", "n", "pa", "to", "y", "va", "o", "x", "ae"], "b": ["B", "m", "h", "eb", "j", "i", "e", "bi", "f", "be", "z", "u", "fb", "sb", "by", "bc", "t", "ab", "ib", "cb", "bb", "p", "c", "ba", "db", "rb", "nb", "g", "d", "v", "mb", "big", "bar", "base", "n", "y", "l"], "ans": ["uns", "rs", "vs", "san", "s", "rets", "can", "ats", "rans", "utters", "ann", " spans", "vals", "ran", " means", "ens", "aus", "cs", "outs", "angs", "aints", "eds", "anks", "gs", "ks", "ins", "an", "ros", "ongs", "ars", "ms", "as", "ns", " scans", "ants", "ces", "ons", "ds", "arts", "ls", "ANS", "amps"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint ans = 0;\\n\t\tint rem = 10;\\n\t\tfor (int i = 0; i < 5; i++) {\\n\t\t\tint b = sc.nextInt();\\n\t\t\tif(b%10==0) {\\n\t\t\t\tans += b;\\n\t\t\t}else {\\n\t\t\t\tans += (b/10+1)*10;\\n\t\t\t\trem = Math.min(rem,b-b/10*10);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println((rem==10)?ans:ans-(10-rem));\\n\t\tsc.close();\\n\t}\\n}", "target": "63", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "pb", "rc", "capt", "cl", "sb", "bc", "cs", "sm", "esc", "sync", "Sc", "pl", "ch", "pc", "isc", "osc", "uc", "sys", "ck", "mc", "scl", "nc", "c", "sh", "SC", "gc", "sw", "txt", "res", "arc", "fc", "sv", "nl", "lc", "scan", "RC", "sp", "na", "asc", "ctrl", "sch", "sec", "anc", "usc", "syn", "sq"], "ans": ["uns", "rs", "vs", "s", "rans", "ats", "can", "xs", "ann", "irms", "vals", "ians", "ran", " means", "ens", "cs", "AN", "aus", "acs", "os", "ums", "ops", "sets", "offs", "ots", "aps", "en", "ems", "ks", "apps", "ends", "ins", "an", "aces", "lines", "res", "cons", "ars", "ras", "names", "ms", "ents", "as", "ns", "ants", "eps", "mas", "ons", "scan", "nets", "arts", "ls", "ANS", "amps", "es", "asks"], "rem": ["range", "rs", "m", "rx", "br", "rep", "em", "Rem", "mind", "ren", "RM", "rom", "resp", "dr", "remove", "lim", "des", "re", "cm", "min", "right", "ran", "rel", "dem", "diff", "drm", "mn", "repl", " Rem", "reg", "nm", "ref", "remote", "ems", "hr", "ex", "comm", "res", "rit", "mb", "mem", "ras", "memory", "rm", "num", "rip", "r", "div", "n", "tr", "fr", "cmp", "rest", "pres", "max", "ret", "del", "gre", "im", "REM", "mr", "rec", "reset", "resh"], "i": ["ii", "phi", "m", "gu", "me", "inter", "j", "multi", "sim", "init", "bi", "it", "hi", "q", "z", "ci", "t", "di", "I", "mi", "ie", "index", "li", "si", "pi", " ii", "iq", "iter", "ex", "g", "ti", "io", "my", "ui", "ini", "ai", "ic", "us", "chain", "iu", "n", " I", "ix", "ind", "id", "is", "x", "im", "qi"], "b": ["B", "m", "eb", "ob", "j", "binary", "ble", "bo", "br", "bl", "bi", "it", "f", "bf", "r", "sb", "be", "body", "fb", "u", "z", "bs", "bc", "t", "ab", "cb", "gb", "ib", "bis", "buffer", "beta", "bg", "bb", "p", "ba", "c", "db", "rb", "nb", "g", "bp", "v", "mb", "a", "d", "big", "bar", "bid", "l", "bt", "base", "bu", "n", "bh", "bound", "batch", "wb"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tint n = Integer.parseInt(br.readLine());\\n\t\tString[] hs = br.readLine().split(\" \");\\n\t\tbr.close();\\n\\n\t\tint[] h = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\th[i] = Integer.parseInt(hs[i]);\\n\t\t}\\n\\n\t\tint cnt = h[0];\\n\t\tfor (int i = 1; i < n; i++) {\\n\t\t\tif (h[i - 1] < h[i]) {\\n\t\t\t\tcnt += h[i] - h[i - 1];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(cnt);\\n\t}\\n}\\n", "target": "77", "substitutes": {"br": ["bridge", "b", "eb", "lr", "Br", "bsp", "bl", "shr", "bi", "cr", "bf", "r", "dr", "ctr", "ger", "kr", "bs", "bc", "buf", "rel", "ch", "pr", "repl", "pre", "er", "next", "bd", "bm", "hr", "db", "rb", "bp", "bro", "jp", "block", "gr", "vr", "bt", "yr", "div", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "nr", "rem", "mr", "BR"], "n": ["ng", "m", "j", "nan", "nn", "net", "number", "fn", "r", "z", "ln", "q", "t", "ne", "mn", "network", "ll", "conn", "nm", "en", "len", "nor", "gn", "np", "c", "nc", "N", "pi", "p", "count", "and", "nb", "an", "v", "nu", "total", "no", "a", "name", "all", " N", "ns", "num", "un", "nl", "sn", "na", "o", "cn", "l", "nt"], "hs": ["rs", "hers", "asts", "phis", "its", "pps", "xs", "fs", "ths", "bs", "hm", "hd", "ues", "tops", "hes", "hh", "aches", "sels", "qs", "ashes", "ags", "hess", "has", "HS", "gs", "hz", "ols", "rh", "heads", "cks", "fts", "ha", "ges", "sts", "ps", "bh", "hp", "services", "ts", "hops"], "h": ["phi", "m", "b", "it", "uh", "cache", "hi", "where", "q", "dr", "his", "oh", "hm", "ph", "history", "hd", "k", "th", "exp", "kh", "ah", "go", "hh", "he", "p", "hz", "sh", "H", "c", "hr", "count", "rh", "ih", "g", "ht", "v", "ha", "hl", "host", "bh", "hp", "hex", "ho", "pp", "l", "hash", "header"], "i": ["page", "ji", "q", "ci", "mi", "list", "li", "v", "ui", "ini", "ai", "us", "err", "ix", "ion", "m", "multi", "bi", "iy", "json", "ei", "print", "status", "pi", "cli", "zi", "ms", "chain", "id", "y", "uri", "asi", "im", "ami", "ity", "ki", "ii", "um", "ri", "init", "sequence", "fire", "di", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "ip", "ori", "qi", "phi", "me", "xi", "j", "sim", "it", "ger", "set", "I", "parent", "record", "this", "ie", "client", "point", "inner", "iter", "g", "ic", "iu", "base", "is", "oi", "batch"], "cnt": ["nct", "cpt", "cnc", "cCount", "Cpt", "cred", "Cct", "cct", "cNT", "Cnc", "lcpt", "lcCount", "nnc", " cred", " cnc", "nnt", " Cct", "Cnt", "CCount", " ccount", "count", "Cred", " cpt", " cCount", " Cred", " Cnt", "lcNT", "nount", "CNT", " count", "ccount", "Count", " cNT", "Ccount", " Ccount", "lcnt", " cct"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Queue;\\nimport java.util.ArrayDeque;\\nimport java.util.Arrays;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint n = sc.nextInt();\\n\t\tint[][] d = new int[2][n];\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\td[0][i] = sc.nextInt();\\n\t\t\td[1][i] = sc.nextInt();\\n\t\t}\\n\t\tString ans = \"No\";\\n\t\tfor(int i = 0; i < n - 2; i++) {\\n\t\t\tif(d[0][i]==d[1][i] && d[0][i+1]==d[1][i+1] && d[0][i+2]==d[1][i+2] ) {\\n\t\t\t\tans = \"Yes\";\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}", "target": "215", "substitutes": {"sc": [" Sc", "cc", "cle", "cr", "tc", "capt", "pb", "rc", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", " SC", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "fc", "ctx", "sv", "nl", "lc", "sp", "sel", "asc", " unsc", "conv", "ctrl", "sch", "sec", "anc", "usc", "irc", "sq"], "n": ["ng", "m", "j", "nan", "nn", "net", "number", "in", "r", "z", "q", "ln", "t", "k", "ne", "mn", "on", "nm", "en", "p", "nc", "np", "gn", "c", "len", "N", "nb", "no", "nu", "v", "name", "names", " N", "num", "ns", "un", "nl", "length", "sn", "na", "y", "o", "size", "cn", "l", "nt"], "d": ["done", "fd", "h", "ct", "j", "it", "f", "da", "details", "gd", "dr", "dos", "r", "ed", "z", "nd", "des", "dict", "dra", "dd", "D", "di", "ld", "dec", "dt", "diff", "md", "du", "bd", "p", "db", "ad", "dates", "and", "w", "dim", "v", "end", "debug", "add", "st", "pd", "td", "g", "dot", "df", "de", "days", "dat", "ds", "ind", "dl", "def", "sd", "dh", "sum", "del", "mod"], "i": ["page", "ji", "hi", "q", "ci", "iso", "mi", "li", "v", "my", "ij", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "bi", "load", "ei", "print", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "fi", "init", "fire", "di", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "to", "ip", "cgi", "o", "qi", "phi", "me", "xi", "j", "sim", "it", "ims", "z", "u", "I", "this", "ie", "client", "point", "iter", "g", "ic", "iu", "base", "is", "x", "oi", "batch"], "ans": ["uns", "posts", "rs", "san", "s", "rans", "aos", "ats", "utters", "ups", "ann", "rors", " means", "ens", "ands", "cs", "aus", "os", "angs", "eds", "aps", "anks", "ks", "ins", "ols", "an", "ros", "ars", "ras", "ms", "ents", "ods", "ns", "arms", "eps", "ants", "orders", "ces", "mas", "ates", "yes", "oos", "ds", "arts", "ls", "ANS", "is", "ts", "amps", "helps", "olds", "ays", "ads"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    \\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new java.io.InputStreamReader(System.in));\\n        PrintWriter pw = new PrintWriter(System.out);\\n        StringTokenizer st = new StringTokenizer(br.readLine());\\n\\n        int N = Integer.parseInt(st.nextToken());\\n        String[] tall_array = br.readLine().split(\" \");\\n        int tmp = 0;\\n        long result = 0;\\n\\n        for(int i = 0; i < N; i++) {\\n\\n            int target = Integer.parseInt(tall_array[i]);\\n\\n            if(target < tmp) {\\n                result += tmp - target;\\n            } else {\\n                tmp = target;\\n            }\\n        }\\n\\n        pw.println(result);\\n        br.close();\\n        pw.close();\\n    }\\n}", "target": "202", "substitutes": {"br": ["bridge", "out", "rain", "b", "eb", "lr", "Br", "bsp", "bl", "shr", "cr", "bf", "r", "dr", "ctr", "arr", "kr", "bs", "bc", "buf", "rob", "rel", "ab", "gb", "ch", "pr", "er", "bd", "ro", "bm", "hr", "obj", "rb", "sr", "bro", "bp", "jp", "gr", "vr", "yr", "bt", "tr", "fr", "bn", "bh", "ber", "wr", "browser", "err", "rem", "mr", "BR"], "pw": ["jpwa", "pwt", "opwa", " psw", "cpw", " pwa", "prow", "gwr", " pwr", "cpwt", "gow", "jpw", "tsw", "prwt", "twr", "ppwd", "opwd", "tw", "pwr", "ppsw", "pow", "prw", "gw", "opwrite", "jpwrite", "gwt", "cpwr", "psw", "twd", "cpow", "pwa", "prwr", " pwd", "ppw", "jpwd", "ppwr", "opw", "pwd", " pwrite", "pwrite"], "st": ["ost", "ct", "irst", "str", "cr", "ft", "ss", "cl", "sb", "nd", "inst", "ast", "set", "th", "sty", "so", "se", "rand", "ST", "pt", "std", "start", "sc", "est", "sh", "sw", "St", "mt", "ust", "td", "sl", "const", "ze", "sy", "sn", "sts", "sp", "ts", "rest", "tt", "ste", "stable"], "N": ["NH", "Node", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "NS", "I", "GN", "D", "NO", "CNN", "NP", "NB", "L", "ND", "V", "TN", "NM", "Net", "NT", "NA", "T", "K", "FN", "Sn", "NE", "n", "NW", "No", "M", "C", "Z", "O"], "tall_array": ["tallaxyarray", "tall___instance", "tallaxyinstance", "tall_arr", "tall__ray", " tall_arr", " tall_instance", "tall__length", "tall___arr", "tallaxyarrow", "tall__string", "large_array", "tall_string", "tall__array", "large_string", "tall_ray", " tall_arrow", "tall_length", "tall___arrow", "tall_instance", "large_length", "tall___array", "large_ray", "tall_arrow", "tallaxyarr"], "tmp": ["Temp", "offset", "current", "out", "term", "msg", "img", "porary", "test", "cache", "tc", "top", "mint", "temp", "t", "emp", "perm", "prime", "MP", "cur", "buffer", "xy", "start", "pre", "tp", "p", "su", "np", "ot", "ptr", "local", "mp", "obj", "prefix", "zero", "nb", "ctx", "buff", "total", "jp", "td", "tm", "angle", "timeout", "sp", "cmp", "table", "mm", "max", "tt", "old", "size", "primary", "err", "cp", "rt", "nt"], "result": ["duration", "mult", "message", "current", "term", "ful", "grade", "true", "sequence", "test", "value", "command", "progress", "success", "error", "number", "r", "answer", "temp", "goal", "complete", "diff", "function", "zero", "Result", "recent", "date", "report", "rendered", "match", "currency", "score", "summary", "res", "output", "total", "trade", "results", "process", "ULT", "RESULTS", "valid", "ret", "sum"], "i": ["ii", "phi", "m", "h", "xi", "me", "j", "multi", "sim", "s", "ri", "init", "bi", "it", "ji", "e", "hi", "f", "q", "u", "ci", "t", "di", "I", "set", "history", "mi", "ie", "info", "gi", "index", "li", "ei", "si", "remote", "pi", "iter", "iq", "ti", "g", "v", "io", "my", "cli", "ui", "ms", "ini", "ic", "\u0438", "us", "ai", "iu", "ix", "ip", "y", "o", "uri", "x", "im", "ori", "ki"], "target": ["current", "term", "that", "inter", "mask", "value", "test", "link", "alias", "top", "arget", "dest", "peer", "goal", "window", "t", "set", "rel", "slot", "resource", "Target", "node", "internal", "buffer", "share", "bolt", "entry", "ARGET", "match", "point", "ptr", "local", "iter", "name", "total", "component", "pointer", "weight", "integer", "base", "secondary", "vector", "table", "child", "to", "field", "task", "source", "primary", "prop", "tag", "arg", "gt"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        new Solver().run();\\n    }\\n}\\n\\nclass Solver {\\n\\n    private List<int[]> prime_factorize(int N) {\\n        List<int[]> res = new ArrayList<int[]>();\\n        for (int a = 2; a * a <= N; a++) {\\n            if (N % a != 0) continue;\\n            int ex = 0;\\n\\n            while (N % a == 0) {\\n                ++ex;\\n                N /= a;\\n            }\\n\\n            res.add(new int[]{a, ex});\\n        }\\n\\n        if (N != 1) res.add(new int[]{N, 1});\\n        return res;\\n    }\\n\\n    private boolean check(List<int []> list) {\\n        for (int[] a : list) {\\n            if (a[1] % 2 != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int dist2(int[][] X, int N, int D, int i, int j) {\\n        int sum = 0;\\n        for (int k = 0; k < D; k++) {\\n            int v = X[i][k] - X[j][k];\\n            sum += v * v;\\n        }\\n        return sum;\\n    }\\n\\n    public void run() {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int D = sc.nextInt();\\n\\n        int[][] X = new int[N][D];\\n        int[][] M = new int[N][D];\\n        for (int i = 0; i < N; i++) {\\n            for (int j = 0; j < D; j++) {\\n                X[i][j] = sc.nextInt();\\n            }\\n        }\\n\\n        int cnt = 0;\\n        for (int i = 0; i < N; i++) {\\n            for (int j = i + 1; j < N; j++) {\\n                if (i != j) {\\n                    // comapring i with j.\\n                    int s = dist2(X, N, D, i, j);\\n                    if (check(prime_factorize(s))) {\\n                        cnt++;\\n                    } else {\\n                    }\\n                }\\n            }\\n        }\\n        System.out.println(cnt);\\n\\n        return;\\n    }\\n\\n}", "target": "59", "substitutes": {"N": ["B", "NH", "Node", "P", "F", "UN", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "G", "NL", "AN", "NS", "I", "GN", "A", "NV", "NUM", "NO", "IN", "NP", "NC", "NB", "L", "ND", "V", "NOR", "TN", "Size", "NM", "NG", "MN", "CN", "H", "Ex", "Net", "NT", "NA", "Y", "T", "K", "J", "Sn", "NE", "Ne", "n", "Len", "No", "R", "C", "Z", "Na", "O"], "res": ["rex", "range", "rs", "out", "rx", "con", "s", "details", "full", "resolution", "r", "resp", "arr", "vals", "right", "re", "bs", "rel", "resource", "exp", "os", "req", "grid", "result", "windows", "reg", "resources", "ro", " Res", "obj", "cons", "RES", "comp", "ms", "results", "rights", "us", "gr", "Res", "ps", "cond", "def", "rez", "als", "rest", "pres", "val", "ret", "reset", "red", "ress", "rem"], "a": ["aff", "la", "sha", "era", "A", "att", "ab", "w", "aa", "ack", "ar", "ai", "as", "ows", "m", "e", "f", "am", "at", "ao", "c", "ea", "pi", "an", "ga", "div", "n", "pa", "ana", "l", "aaa", "sta", "sa", "aw", "el", "area", " A", "acc", "ba", "ta", "le", "aj", "alpha", "na", "o", "size", "ae", "b", "apa", "oa", "ap", "aos", "s", "da", "abs", "z", "u", "span", "wa", "t", "au", "ca", "off", "ma", "app", "ac", "p", "aka", "g", "ia", "ata", "va", "x", "fa"], "ex": ["act", "rex", "out", "inter", "con", "ap", "ox", "exc", "abs", "re", "mx", "t", "at", "com", "el", "pos", "tx", "exp", "ext", "ab", "ax", "external", "ac", "tex", "nex", "p", "some", "Ex", "sw", "w", "lex", "ai", "us", "aux", "ape", "EX", "n", "ix", "pex", "sex", "na", "hex", "expr", "x", "im", "rem"], "list": ["range", "out", "m", "sequence", "net", "cl", "menu", "re", "pair", "set", "t", "pool", "cont", "stack", "isl", "L", "result", "met", "ll", "LIST", "li", "null", "p", "ist", "conf", "array", "st", "all", "batch", "chain", "map", "table", "dl", "l", "lists", "listed", "nt"], "X": ["Xi", "E", "IX", "P", "XL", "F", "ICE", "ZX", "MX", "S", "Ax", "Matrix", "G", "TX", "XXX", "I", "A", "W", "L", "V", "XX", "H", "XT", "DX", "XP", "Tx", "Y", "T", "K", "J", "Q", "Array", "EX", "XY", "XM", "R", "U", "UX", "TS", "x", "OX", "Z", "C", "JSON"], "D": ["DM", "P", "F", "FD", "Dir", "ID", "DF", "DE", "DN", "Do", "DC", "PD", "DEC", "DEV", "S", "DS", "SIZE", "Dr", "I", "A", "POS", "L", "DO", "DP", "ND", "V", "Size", "DX", "DI", "Den", "d", "DH", "T", "Y", "K", "DB", "J", "Q", "DA", "DR", "DOM", "Ds", "R", "Length", "Di", "DIR", "U", "C", "DD", "O"], "i": ["ii", "m", "xi", "me", "jj", "ri", "sim", "e", "ji", "bi", "it", "ik", "hi", "init", "q", "in", "r", "f", "by", "u", "ci", "t", "di", "I", "mi", "this", "ie", "info", "gi", "index", "li", "p", "ei", "c", "si", "ami", "pi", "iq", "ti", "ia", "ij", "zi", "ui", "ini", "ic", "ai", "us", "iu", "n", "ind", "ix", "id", "ip", "y", "o", "is", "x", "im", "l", "ir", "ity", "qi", "ki"], "j": ["oj", "b", "m", "h", "out", "s", "og", "ja", "br", "it", "ji", "jj", "f", "str", "jc", "jac", "q", "bi", "r", "z", "u", "uj", "bj", "bs", "t", "py", "jump", "ie", "json", "ch", "pt", "je", "pr", "kj", "er", "li", "p", "jl", "obj", "jo", "g", "d", "aj", "bot", "ij", "jp", "other", "J", "dj", "jas", "n", "sp", "ix", "fr", "err", "js", "y", "o", "key", "x", "im", "ion", "l", "false", "job"], "sum": ["sam", "out", "um", "sat", "sim", "sa", "mass", "u", "sm", "cos", "diff", "stack", "result", "zero", "sym", "mu", "vol", " SUM", "match", "si", "SI", "su", " summed", "count", "cum", "summary", "comment", "cal", "add", "total", "mem", "ms", "num", "weight", "us", "average", "dist", "Sum", "mean", "mm", "val", "size", "gam", "fac", "hash"], "k": ["mk", "unk", "ick", "dk", "sk", "kin", "ke", "ko", "ik", "q", "kn", "z", "kt", "kr", "km", "ok", "ph", "wk", "kh", "kind", "art", "ak", "uk", "ck", "kj", "kid", "kl", "ka", "ks", "g", "ku", "K", "kk", "kw", "ark", "kg", "isk", "y", "key", "x", "ek", "tk", "ki"], "v": ["vs", "m", "um", "ev", "vm", "value", "f", "q", "z", "u", "cv", "vp", "nv", "qv", "V", "ve", "vol", "uv", "vd", "p", "c", "vert", "g", "d", "tv", "sv", "inv", "lv", "n", "vector", "val", "conv", "vt", "o", "x", "l"], "sc": [" Sc", "system", "cc", "cle", "tc", "ss", "pb", "rc", "cl", "bc", "cs", "desc", "usc", "esc", "sync", "Sc", "ctl", "dec", "ch", "pc", "osc", "isc", "exec", "uc", "sys", "mc", "scl", "c", "nc", "sh", "SC", "gc", "inc", "ssl", "fc", "ctx", "st", "arc", "txt", "sv", "co", "lc", "scan", "sp", "ser", "asc", "sch", "sec", "disc", "anc", "irc", "sq"], "M": ["B", "E", "m", "P", "F", "MM", "CM", "S", "G", "I", "W", "L", "V", "NM", "MD", "MC", "T", "K", "J", "Q", "MT", "MS", "U", "R", "C", "Z", "O"], "cnt": [" count", "Cnt", "Count", "curmp", "count", "cmp", "curct", "curnt", "curount", " cmp", "Cct", "Cmp", " cct", "cct"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\npublic static void main(String[] args){\\n\ttry{\\n\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\tString[] str = br.readLine().split(\" \");\\n\tList<Integer> num = new ArrayList<Integer>();\\n\t\\n\t\tfor(int i = 0; i < str.length; i++){\\n\t\tnum.add(Integer.parseInt(str[i]));\\n\t\t}\\n\t\\n\tCollections.sort(num);\\n\t\\n\t\tfor(int n = 0; n < num.size(); n++){\\n\t\t\tif(n != num.size()-1){\\n\t\t\tSystem.out.print(num.get(n) + \" \");\\n\t\t\t}else{\\n\t\t\tSystem.out.println(num.get(n));\\n\t\t\t}\\n\t\t}\\n\\n\t}catch(IOException e){\\n\tSystem.out.println(e);\\n\t}\\n}\t\\n}", "target": "37", "substitutes": {"br": ["bridge", "out", "lr", "Br", "shr", "bl", "bi", "cr", "dr", "be", "arr", "ctr", "r", "kr", "bs", "bc", "buf", "ch", "pr", "next", "bd", "hr", "rb", "sr", "bro", "bp", "st", "gr", "vr", "bt", "div", "tr", "fr", "bn", "bh", "ber", "wr", "mr", "BR"], "str": ["rs", "out", "sta", "string", "s", "STR", "char", "bl", "url", "r", "dr", "arr", "ctr", "cl", "Str", "inst", "rel", "dec", "att", "exp", "enc", "list", "vol", "spec", "oct", "form", "stri", "comm", "data", "txt", "sw", "st", "ar", "ust", "sl", "gr", "text", "div", "dat", "sts", "tr", "sp", "fr", "hex", "ts", "wr", "sec", "del"], "num": ["sam", "tu", "um", "check", "norm", "con", "multi", "mon", "img", "tmp", "cache", "Num", "number", "prim", "tim", "net", "om", "sort", "NUM", "nam", "zero", "cu", "index", "nm", "ord", "np", "note", "su", "comm", "rub", "nb", "dim", "cal", "nu", "no", "mem", "total", "coord", "rm", "div", "snap", "na", "ver", "bn", "conv", "alph", "one", "nom", "max", "sum", "nt"], "i": ["ii", "phi", "m", "me", "j", "multi", "sim", "ri", "it", "bi", "init", "hi", "q", "in", "u", "ci", "di", "I", "mi", "ie", "gi", "li", "ei", "si", "c", "point", "pi", "iter", "ti", "v", "my", "ui", "ini", "ai", "ic", "us", "iu", "ind", "ix", "id", "ip", "y", "o", "is", "PI", "x", "im", "err", "qi", "ki"], "n": ["ng", "out", "m", "b", "con", "j", "yn", "nan", "ul", "nn", "ren", "number", "none", "z", "ln", "u", "t", "k", "pn", "node", "ne", "mn", "ll", "on", "index", "en", "remote", "c", "gn", "note", "nc", "N", "obj", "inn", "an", "and", "w", "g", "d", "no", "nu", "v", "name", "nb", "ns", "un", "l", "sn", "na", "y", "o", "cn", "nr", "nt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner kb = new Scanner(System.in);\\n\t\tString n = kb.next();\\n\t\tif (n.contains(\"7\")) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t\tkb.close();\\n\t}\\n\\n}\\n", "target": "99", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n\\n        int n = Integer.parseInt(s.next());\\n\\n        int[] h = new int[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            h[i] = Integer.parseInt(s.next());\\n        }\\n\\n        int tmp = 0;\\n        int c = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (tmp <= h[i]) {\\n                c++;\\n                tmp = h[i];\\n            }\\n        }\\n        System.out.println(c);\\n    }\\n}", "target": "7", "substitutes": {"s": ["hs", "rs", "b", " ss", "m", "sol", "its", "ats", "xs", "fs", "aws", "ss", "in", "S", "sb", "r", "abs", "cs", "se", "bis", "qs", "sys", " rs", "gs", "p", "ins", " ls", "ys", " is", "w", "less", "a", "sv", "ms", " S", "ns", "search", "ares", "sts", "ds", "ps", "js", "ls", "ses", "ts", "is", "es", "l", "sq"], "n": ["ng", "out", "m", "j", "nan", "nn", "net", "number", "fn", "r", "z", "ln", "t", "k", "ne", "mn", "network", "en", "len", "np", "nc", "p", "nor", "N", "pi", "nb", "g", "v", "nu", "total", "no", "name", "all", "names", " N", "ns", "num", "nl", "sn", "na", "o", "size", "x", "cn", "l", "nt"], "h": ["hs", "m", "it", "uh", "hi", "q", "his", "oh", "hm", "t", "ph", "history", "hd", "th", "kh", "ah", "ch", "hh", "he", "has", "here", "mu", "hw", "hz", "sh", "H", "p", "rh", "ih", "ht", "hl", "host", "bh", "hp", "hex", "ho", "pp", "hash", "header"], "i": ["ii", "phi", "gu", "m", "xi", "me", "j", "sim", "multi", "ri", "it", "bi", "init", "ji", "ies", "progress", "ik", "in", "ims", "iti", "ci", "iy", "di", "I", "mi", "this", "ie", "info", "gi", "client", "li", "ei", "si", "point", "pi", "iter", "ti", "g", "v", "io", "cli", "ij", "zi", "ui", "batch", "ini", "ai", "\u0438", "chain", "iu", "ix", "ind", "id", "inx", "ip", "y", "o", "is", "uri", "PI", "im", "oi", "ori", "l", "ami", "ity", "qi", "ki"], "tmp": ["prev", "mk", "out", "b", "m", "qq", "offset", "j", "porary", "test", "cache", "tc", "top", "needed", "cv", "temp", "t", "emp", "tar", "perm", "cur", "pkg", "zero", "pre", "null", "p", "acc", "np", "ot", "ptr", "prefix", "mp", "obj", "rb", "ctx", "buff", "v", "etc", "td", "uu", "tm", "sp", "cmp", "mm", "partial", "tt", "old", "meta", "nom", "cp", "nt"], "c": ["out", "m", "b", "ct", "con", "j", "cc", "e", "f", "cat", "tc", "cr", "r", "ctr", "u", "cv", "ci", "cm", "cs", "t", "cont", "com", "cd", "k", "ca", "pc", "cf", "cur", "cu", "sc", "ac", "p", "code", "conf", "count", "cum", "gc", "w", "cut", "d", "v", "cy", "co", "dc", "ce", "lc", "cmp", "unc", "o", "x", "C", "l", "cp"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\twhile(true) {\\n\t\t\tString[] strArray = br.readLine().split(\" \");\\n\t\t\tint H = Integer.parseInt(strArray[0]);\\n\t\t\tint W = Integer.parseInt(strArray[1]);\\n\\n\t\t\tif (H ==0 && W == 0) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tfor (int i = 0; i < H; i++) {\\n\t\t\t\tfor (int j = 0; j < W; j++) {\\n\t\t\t\t\tif (i==0 || i == H-1) {\\n\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t} else if (j ==0 || j == W-1) {\\n\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t} else {\\n\t\t\t\t\t\tSystem.out.print(\".\");\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(\"\");\\n\t\t\t}\\n\t\t\tSystem.out.println(\"\");\\n\t\t}\\n\t}\\n}", "target": "19", "substitutes": {"br": ["bridge", "lr", "Br", "bsp", "bl", "str", "bi", "cr", "dr", "be", "ger", "kr", "bc", "buf", "ch", "gb", "pr", "bg", "next", "bd", "bm", "hr", "rb", "bp", "bro", "brace", "jp", " Br", "gr", "vr", "bt", "yr", "div", "tr", "fr", "bh", "ber", "wr", "rem", "mr", "BR"], "strArray": ["stringAssembly", "strList", " strArea", "stringArray", "brList", "intArray", "intAnswer", "brAnswer", "parseAssembly", " strRAY", "charArray", "strRAY", "strAr", "nameArea", "parseArray", "nameAr", " strRange", "brArray", "charAr", " strAssembly", " strList", "parseList", " strAr", "stringList", "stringRange", "strAnswer", "brRAY", " strAnswer", "nameArray", "intRAY", "intList", "charArea", "strRange", "parseRange", "strAssembly", "strArea"], "H": ["AC", "B", "NH", "h", "HT", "High", "HK", "P", "He", "HTTP", "WH", "HQ", "GH", "S", "G", "I", "RH", "AH", "HTML", "HL", "L", "HC", "CH", "HS", "His", "HH", "TH", "N", "HE", "AV", "DH", "HA", "T", "Y", "HO", "Host", "IM", "J", "HI", "FH", "OH", "SH", "MH", "M", "Height", "R", "IT", "HB", "X", "HR"], "W": ["B", "WS", "Win", "P", "F", "FW", "EW", "WH", "TW", "CW", "Width", "WAR", "WT", "WI", "I", "WM", "HTML", "WE", "L", "BW", "V", "Size", "SP", "WC", "N", "w", "SW", "VW", "T", "OW", "J", "We", "DW", "WA", "Watch", "NW", "M", "R", "Window", "WR", "MW", "Wh", "WP", "X", "GW"], "i": ["ii", "phi", "xi", "ri", "fi", "multi", "it", "ji", "bi", "init", "hi", "q", "yi", "ci", "di", "mi", "this", "ie", "info", "gi", "ni", "li", "si", "pi", "iq", "iter", "ti", "ia", "io", "cli", "ij", "zi", "ui", "ini", "ai", "iu", "ind", "ix", "id", "ip", "is", "uri", "im", "ret", "ori", "ami", "qi", "ki"], "j": ["oj", "b", "out", "m", "s", "ja", "it", "ji", "jj", "bi", "jc", "jac", "q", "z", "uj", "bj", "el", "di", "rel", "k", "jump", "ie", "ne", "json", "pr", "kj", "li", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "dj", "J", "l", "n", "sp", "js", "to", "y", "o", "col", "err", "job", "ge"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\t// AtCoder Beginner Contest 136\\n\t// https://atcoder.jp/contests/abc136/tasks\\n\tpublic static void main(String[] args) {\\n\t\tFastReader sc = new FastReader();\\n\t\tint n = sc.nextInt();\\n\t\tint[] nums = new int[n];\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tnums[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tint count = 1;\\n\t\t\\n\t\tfor (int i = n - 1 ; i >= 1; i--) {    \\n\t\t\tif (nums[i - 1] - 1 == nums[i] ) {\\n\t\t\t\tnums[i-1]--;\\n\t\t\t\tcount++;\\n\t\t\t} else if (nums[i - 1] <= nums[i]) {\\n\t\t\t\tcount++;\\n\t\t\t} else {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tif (count == n) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n\\n\tstatic class FastReader { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() { \\n            br = new BufferedReader(new InputStreamReader(System.in)); \\n        } \\n  \\n        String next() { \\n            while (st == null || !st.hasMoreElements()) { \\n                try { \\n                    st = new StringTokenizer(br.readLine()); \\n                } catch (IOException  e) { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() { \\n            String str = \"\"; \\n            try{ \\n                str = br.readLine(); \\n            } catch (IOException e) { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n}\\n", "target": "74", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\tstatic int mod = (int) 1e9 + 7;\\n\tstatic int DX[] = { -1, 0, 1, 0 }, DY[] = { 0, -1, 0, 1 };\\n\tstatic final int INF = Integer.MAX_VALUE / 3;\\n\tstatic final long LINF = Long.MAX_VALUE / 3;\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner fs = new FastScanner(System.in);\\n\t\tString s = fs.next();\\n\t\tlong k = fs.nextLong();\\n\t\tchar ans = '1';\\n\t\t\\n\t\tfor(int i=0;i<k;i++) {\\n\t\t\tif(s.charAt(i)!='1') {\\n\t\t\t\tans = s.charAt(i);\\n\t\t\t\tSystem.out.println(ans);\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n\t//MOD culculations\\n\tstatic long plus(long x, long y) {\\n\t\tlong res = (x + y) % mod;\\n\t\treturn res < 0 ? res + mod : res;\\n\t}\\n\\n\tstatic long sub(long x, long y) {\\n\t\tlong res = (x - y) % mod;\\n\t\treturn res < 0 ? res + mod : res;\\n\t}\\n\\n\tstatic long mul(long x, long y) {\\n\t\tlong res = (x * y) % mod;\\n\t\treturn res < 0 ? res + mod : res;\\n\t}\\n\\n\tstatic long div(long x, long y) {\\n\t\tlong res = x * pow(y, mod - 2) % mod;\\n\t\treturn res < 0 ? res + mod : res;\\n\t}\\n\\n\tstatic long pow(long x, long y) {\\n\t\tif (y < 0)\\n\t\t\treturn 0;\\n\t\tif (y == 0)\\n\t\t\treturn 1;\\n\t\tif (y % 2 == 1)\\n\t\t\treturn (x * pow(x, y - 1)) % mod;\\n\t\tlong root = pow(x, y / 2);\\n\t\treturn root * root % mod;\\n\t}\\n}\\n\\n//\u9ad8\u901f\u306aScanner\\nclass FastScanner {\\n\tprivate BufferedReader reader = null;\\n\tprivate StringTokenizer tokenizer = null;\\n\\n\tpublic FastScanner(InputStream in) {\\n\t\treader = new BufferedReader(new InputStreamReader(in));\\n\t\ttokenizer = null;\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn tokenizer.nextToken();\\n\t}\\n\\n\tpublic String nextLine() {\\n\t\tif (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\treturn reader.readLine();\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn tokenizer.nextToken(\"\\n\");\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n\\n\tpublic int[] nextIntArray(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = nextInt();\\n\t\treturn a;\\n\t}\\n\\n\tpublic long[] nextLongArray(int n) {\\n\t\tlong[] a = new long[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = nextLong();\\n\t\treturn a;\\n\t}\\n}", "target": "38", "substitutes": {"mod": ["MOD", "mode", "m", " DEC", "MAX", "AD", " MAX", "DEC", "z", "fun", "END", "dec", "dq", "INC", "MA", "log", " MOD", " m", "d", "add", "Mod", "inv", "eps", " Mod", "MODE", "max", "fac", "CC"], "DX": ["TD", "ZX", "DF", "DE", "DC", "DL", "dx", "YD", "DS", "TX", "D", "DP", "ND", "RY", "XX", "CD", "DI", "EY", "DH", "TY", "DW", "DA", "DR", "EX", "XY", "DD", "X", "DK"], "DY": ["DIXY", "DIX", "DIY", " DYD", "DXY", "DIYD", "DYD", "DXXY", "DXYD", " DXY", "DXX"], "INF": ["INEF", "INFF", "Inf", "PINf", "PINEF", "PINF", "INf", "InFF", "InEF", "PINFF", " INf", "InF", " INEF", " INFF"], "LINF": ["INEF", "LINFP", "PINFP", "linEF", "INFF", "linFF", "PINEF", "LINEF", "linF", "PINF", "INFP", "PINFF", "LINFF", "linFP"], "fs": ["hs", "rs", "fd", "FS", "fy", "ats", "lf", "aos", "xs", "f", "fps", "fm", "ss", "bf", "ims", "irs", "gets", "bs", "cs", "rys", "outs", "cf", "qs", "ags", "sys", "fw", "gs", "hz", "Fs", "ks", "ys", "fc", "fts", "ms", "ws", "ns", "aux", "ios", "sf", "eks", "js", "ips", "ls", "lbs", "ils", "fp"], "s": ["hs", "rs", "m", "h", "its", "ats", "str", "f", "ss", "ims", "S", "sb", "r", "gets", "abs", "bs", "cs", "t", "series", "qs", "p", "gs", "ins", "sql", "g", "less", "sv", "ms", "ws", "ns", "times", "eps", "ess", "n", "sf", "sts", "sp", "ds", "ps", "stats", "js", "ls", "ts", "l", "csv", "sq"], "k": ["mk", "unk", "dk", "sk", "ke", "ik", "ko", "kn", "q", "kr", "km", "ikk", "wk", "kh", "kb", "ak", "kick", "ck", "kj", "kid", "kl", "ka", "ks", "ku", "K", "kk", "kw", "n", "kok", "ek", "tk", "ki"], "ans": ["posts", "rs", "vs", "caps", "can", "ats", "aos", "rans", "xs", "ann", " Ans", "lan", "wan", "ens", " means", "cs", "AN", "aus", "outs", "acs", "os", "offs", "aps", "eds", "anks", "ks", "ins", " pan", "ols", "An", "an", "ros", "lines", "leans", "cons", "res", "ars", "names", "ms", "ents", "as", "ns", " scans", "flags", "ants", "eps", "mas", "ons", "yes", "vers", "arts", "ls", "ANS", "amps", "olds"], "i": ["ii", "phi", "m", "ogi", "xi", "j", "multi", "ri", "sim", "it", "bi", "ji", "hi", "q", "in", "u", "ci", "di", "I", "mi", "gi", "index", "ni", "li", "ei", "si", "ski", "pi", "iter", "ti", "g", "a", "cli", "iri", "zi", "ui", "ms", "ini", "ai", "ic", "us", "\u0438", "iu", "n", "ix", "ip", "is", "uri", "x", "ori", "oi", "ami", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        // write your code here\\n        //dream dreamer erase eraser\\n        int A;\\n        int B;\\n        int C;\\n        int D;\\n        try (Scanner sc = new Scanner(System.in)) {\\n            A = sc.nextInt();\\n            B = sc.nextInt();\\n            C = sc.nextInt();\\n            D = sc.nextInt();\\n\\n        }\\n        if (B < C || D < A) {\\n            System.out.println(\"0\");\\n        } else {\\n            int start = Math.max(A, C);\\n            int end = Math.min(B, D);\\n            System.out.println(end - start);\\n        }\\n\\n    }\\n\\n}\\n", "target": "47", "substitutes": {}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Spandan Mishra\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        AMultiplication1 solver = new AMultiplication1();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class AMultiplication1 {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int a = in.readInt();\\n            int b = in.readInt();\\n\\n            System.out.println(a * b);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1)\\n                throw new RuntimeException();\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new RuntimeException();\\n                }\\n                if (numChars <= 0)\\n                    return -1;\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int readInt() {\\n            int c = read();\\n            while (isSpaceChar(c))\\n                c = read();\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n    }\\n}\\n\\n", "target": "35", "substitutes": {"inputStream": ["helloSocket", "inputSocket", "textSocket", "textStream", " inputStreamer", " inputSocket", "textStreamer", "inputSteam", " inputSteam", "inWindow", " inputWindow", "sourceSteam", "sourceStream", "textSteam", "helloWindow", "inStream", "helloSteam", "sourceStreamer", "inSocket", "inputWindow", "inputStreamer", "helloStream", "sourceSocket", "inSteam"], "outputStream": ["inputWriter", "outputWindow", "currentWindow", "printStream", "printSteam", "outputWriter", "printWriter", "outputPath", "OutputPath", " outputPath", "outStream", "printWindow", " outputSteam", "currentSteam", "outputSteam", "OutputSteam", "outSteam", "inputSteam", "OutputStream", " outputForm", "outPath", "outputForm", "OutputForm", "currentStream", "currentWriter", "inputWindow", "outForm"], "in": ["act", "per", "current", "In", "inf", "h", "con", "s", "context", "kin", "i", "it", "init", "doc", "run", " din", "r", "file", "form", "rin", "reader", "t", "conf", "IN", "info", "up", "on", "from", "er", "log", "gin", "null", "en", "ro", "p", "ins", "inner", "local", "inside", "inn", "iter", "ad", "get", "cin", "sin", "inc", "io", "add", "config", "input", "raw", "bin", "ini", "ic", "l", "n", "ind", "mm", "din", "is", "old", "source", "al", "err", "rt", "win"], "out": ["console", "msg", "s", "j", "can", "tmp", "aos", "system", "it", " OUT", "run", "cmd", "net", "r", "OUT", "user", "ln", " Out", "window", "t", "ou", "outs", "exit", "os", "outer", "this", "ch", "exec", "sys", "client", "Out", "log", "list", "report", "null", "p", "print", "inner", "ex", "write", "txt", "w", "gc", "v", "io", "output", "name", "end", "all", "screen", "or", "co", "gr", "l", "n", "to", "flush", "o", "writer", "x", "err", "OU", "nt"], "solver": [" sol", " solution", "resolve", "sol", "sorter", "resolution", "esorter", "esolution", "ssorter", "solution", "ssistor", "Solver", " sistor", "Sol", "esistor", "resolver", "ssolution", "ssolver", " solve", "Solve", "sistor", "esolver", "solve", " sorter", "resol", "Solution"], "testNumber": ["testNumbers", "testRange", " testRange", " testNumbers", " iterationNumber", " iterationNumbers", " iterationNum", " scenarioRange", " scenarioNumbers", " scenarioNum", " iterationRange", "testNum", " scenarioNumber", " testNum"], "a": ["aaa", "aff", "sta", "la", "sa", "aq", "aw", "era", "t", "A", "au", "area", "ab", "ca", "ma", "ac", "p", "ba", "ao", "ea", "xa", "ta", "an", "aa", "d", "aj", "ar", "ai", "eff", "aux", "alpha", "n", "pa", "na", "va", "x", "ae"], "b": ["B", "eb", "ob", "j", "i", "e", "bi", "bf", "r", "z", "be", "sb", "fb", "u", "bs", "bc", "t", "blue", "ab", "ib", "gb", "bis", "beta", "bb", "bd", "p", "ba", "db", "rb", "nb", "g", "d", "v", "bar", "n", "y", "l"], "stream": ["message", "mode", "console", "h", "http", "system", "channel", "speed", "context", "test", "link", "progress", "Stream", "event", "peer", "driver", "wrapper", "reader", "window", "pool", "row", "history", "time", "iterator", "handler", "socket", "read", "sync", "network", "stack", "engine", "instance", "buffer", "loop", "client", "proc", "sc", "pipe", "level", "spec", "transform", "form", "local", "sw", "data", "ssl", "port", "st", "io", "output", "path", "input", "open", "type", "chain", "util", "host", "impl", "each", "table", "view", "collection", "source", "through", "sample"], "buf": ["bytes", "queue", "cap", "msg", "img", "tmp", "seq", "br", "cmd", "uf", "cam", "arr", "abet", "cv", "temp", "vec", "bs", "Buff", "tx", "cb", "cur", "bag", "buffer", "pkg", "log", "mu", "ref", "box", "aka", "db", "var", "rb", "fam", "ctx", "buff", "mb", "mem", "bin", "mus", "bar", "conv", "alph", "Buffer", "batch", "bed", "wb"], "curChar": ["parColor", "CurCh", " curByte", "CurColor", "parChar", "ctrChar", "currentChar", " curCh", "CurCounter", "curVar", " curPos", "ctrPos", "curColor", "parCh", "curPos", " curCharacter", "CurByte", " curVar", "tmpCh", "CurCharacter", "currentVar", "curByte", "tmpChar", "currentByte", "tmpByte", "currentCh", "parCounter", "curCharacter", "curCounter", " curColor", "CurVar", "curCh", "tmpCharacter", "ctrVar", "ctrCh", "CurChar", " curCounter", "CurPos"], "numChars": [" numchags", " numChARS", "numCoARS", "numVaces", "numButrs", "numVarters", "numCARS", "numchARS", "numClARS", " numChras", "numCrs", "nomChars", "numCars", "numBuffras", "numchags", "numColarters", "numCHarters", "numCags", "nomVarters", "numCHales", " numChats", "numCoians", "numButales", "numVales", "numChaps", "NumChales", "numCats", "nomCharters", "numClians", "numCHars", "NumCales", "numCHaces", "nomVales", "numColaces", "numChers", " numClians", "NumChars", "numchars", "nomChaces", "numCaps", "numChales", "NumCrs", "nomChales", "numChats", "numBuffers", " numClrs", "numCales", " numChrs", "numTrags", "numchras", "numCers", "NumChaps", " numchers", "numCHaps", "numchians", " numChers", "numColars", "numChaces", "numCras", "numBuffARS", "numVars", "NumChrs", " numchras", "numButars", " numClARS", "numTrats", "NumCaps", "numchers", "numTrars", " numchARS", "nomVars", "numChians", " numchats", "numChrs", " numchars", "numCors", "numCharters", "numClrs", "numColales", "nomVaces", "numChARS", "numCoars", "numButaps", "numClars", " numChags", " numClars", "numBuffars", " numChians", "numCHrs", "numchats", "numChras", "numchrs", "numChags", "NumCars"], "c": ["h", "char", "tc", "r", "cl", "ci", "com", "cos", "pc", "cf", "cur", "cu", "mc", "nc", "comm", "fc", "v", "abc", "cell", "ce", "cond", "unc", "anc", "cod", "vc", "m", "ct", "can", "cc", "e", "f", "rc", "cm", "ec", "chain", "dc", "lc", "n", "cmp", "y", "col", "l", "bc", "cd", "cont", "k", "ch", "uc", "code", "conf", "gc", "d", "arc", "cor", "xc", "C", "con", "i", "cat", "cache", "cr", "z", "u", "cs", "t", "cb", "enc", "ac", "p", "cum", "g", "ic", "co", "x", "cp"], "sgn": ["wsgate", "sig", " sgain", "Sig", "lsgn", "sgate", "imsGN", "lsg", "wsign", "tsgate", "imsgain", "jsign", "tsgn", " sig", "wsgn", "sign", "wsg", "Sgain", "Sgn", "jsgn", "imsig", "jsGN", "imsgn", " sGN", "sg", "tsg", "lsGN", "SGN", "jsg", "lsign", "tsign", "sGN", "sgain"], "res": ["rs", "sim", "resolution", "rc", "resp", "vals", "r", "q", "des", "re", "vec", "cs", "rel", "pers", "pos", "rss", "rand", "os", "result", "zero", "reg", "usr", " Res", "ins", "obj", "cons", "RES", "results", "ms", "ns", "us", "num", "gr", "fac", "Res", "ps", "val", "js", "ver", "rest", "pres", "max", "ret", "reset", "col", "red", "ress", "rem", "resh"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        B0Or1Swap solver = new B0Or1Swap();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B0Or1Swap {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int n = in.nextInt();\\n            int[] a = in.nextIntArray(n);\\n            int[] b = a.clone();\\n            int[] c = a.clone();\\n\\n            Arrays.sort(c);\\n\\n            boolean flag = false;\\n            for (int i = 0; i < n; i++) {\\n                for (int j = i + 1; j < n; j++) {\\n\\n                    int temp = b[i];\\n                    b[i] = b[j];\\n                    b[j] = temp;\\n                    boolean res = true;\\n\\n                    for (int k = 0; k < n; k++) {\\n                        if (c[k] != b[k]) {\\n                            res = false;\\n                            break;\\n                        }\\n                    }\\n\\n                    temp = b[i];\\n                    b[i] = b[j];\\n                    b[j] = temp;\\n\\n                    if (res == true) {\\n                        //out.println(b);\\n                        flag = true;\\n                        break;\\n                    }\\n\\n                }\\n            }\\n\\n            boolean same = true;\\n            for (int i = 0; i < n; i++) {\\n                if (b[i] != c[i]) {\\n                    same = false;\\n                    break;\\n                }\\n            }\\n\\n            if (flag || same) {\\n                out.println(\"YES\");\\n            } else {\\n                out.println(\"NO\");\\n            }\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void print(Object... objects) {\\n            for (int i = 0; i < objects.length; i++) {\\n                if (i != 0) {\\n                    writer.print(' ');\\n                }\\n                writer.print(objects[i]);\\n            }\\n        }\\n\\n        public void println(Object... objects) {\\n            print(objects);\\n            writer.println();\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public int[] nextIntArray(int n) {\\n            int[] array = new int[n];\\n            for (int i = 0; i < n; ++i) array[i] = nextInt();\\n            return array;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "82", "substitutes": {"inputStream": ["inputSocket", "inputFile", "connectionstream", "sourceFile", "connectionStream", " inputStreamer", "outputStreamer", " inputSocket", "outputSteam", "inputstream", "inputSteam", " inputSteam", "outputSocket", "sourceSteam", "connectionSteam", "sourceStream", "outputFile", " inputFile", "connectionStreamer", "outputstream", " inputstream", "inputStreamer", "sourceSocket"], "outputStream": ["outputNow", "connectionstream", "OutputNow", "displayStream", "connectionStream", "writeStream", "outputStreamer", "displayForm", "displayNow", " outputSteam", "outputSteam", "OutputSteam", "inputstream", "connectionSteam", "inputSteam", " outputNow", "writestream", "OutputStream", "displaySteam", " outputForm", "writeSteam", "outputForm", "writeStreamer", "OutputForm", "connectionStreamer", "outputstream", "inputStreamer"], "in": ["serv", "per", "m", "In", "inf", "con", "isin", "ri", "context", "kin", "init", "it", "doc", "run", " din", " IN", "r", "file", "re", "rin", "reader", "t", "mi", "IN", "info", "up", "on", "from", "er", "log", "gin", "null", "query", "mc", "ins", "inner", "form", "inn", "iter", "inc", "sin", "cin", "get", "io", "add", "ar", "input", "bin", "ini", "ic", "or", "stream", "nin", "ind", "mm", "din", "o", "is", "old", "source", "l", "rt"], "out": ["s", "tmp", "aos", "it", "cache", "net", "OUT", "user", "window", "t", "at", "set", "pool", "ou", "outs", "os", "outer", "this", "ch", "up", "result", "conn", "client", "sys", "Out", "log", "list", "er", "null", "report", "p", "print", "inner", "obj", "write", "gc", "w", "v", "output", "io", "end", "all", "co", "to", "flush", "o", "writer", "sum", "err", "OU", "nt"], "solver": ["Solving", " solution", "resorter", "isolution", "sorter", "solving", "resolution", "insolver", "asolved", "resolved", "asolver", "isolver", "insolution", "solution", "Solver", "resolver", "asorter", "solved", " solving", "asolution", " solve", "insorter", "insolved", "Solve", "solve", "Solution", "isolve", "isolving"], "testNumber": [" testNo", " testNumbers", " iterationNo", " testReference", " iterationNumber", " iterationNumbers", " seqNumber", " seqReference", "testNo", " seqNumbers", " seqNo", "testNumbers", "testReference", " iterationReference"], "n": ["ng", "m", "nan", "nn", "net", "z", "ln", "span", "t", "ne", "mn", "network", "on", "ni", "nm", "p", "np", "nc", "N", "an", "nb", "g", "d", "v", "nu", "name", "no", " N", "ns", "num", "un", "nl", "l", "sn", "nw", "na", "y", "o", "x", "size", "cn", "nr", "nt"], "a": ["aaa", "apa", "la", "oa", "aos", "sa", "r", "am", "abs", "at", "A", "au", "area", "att", "ab", "ca", "ma", "app", "ac", "p", "ba", "ta", "an", "aa", "ia", "ar", "ga", "all", "as", "aux", "alpha", "na", "o", "ae"], "b": ["aaa", "B", "h", "bus", "eb", "ob", "arb", "s", "m", "bo", "br", "bl", "bi", "e", "it", "f", "bf", "r", "sb", "be", "abs", "fb", "u", "bs", "bc", "t", "ab", "ib", "gb", "cb", "emb", "bis", "ch", "beta", "bb", "back", "p", "ba", "db", "rb", "nb", "g", "bp", "v", "mb", "buff", "w", "d", "batch", "bin", "bar", "bt", "base", "y", "o", "browser", "l", "wb"], "c": ["m", "h", "ct", "con", "cc", "e", "f", "cr", "r", "cl", "u", "bc", "cs", "t", "cd", "cb", "ch", "ca", "cf", "cu", "sc", "ac", "p", "mc", "conf", "w", "g", "d", "v", "fc", "config", "ar", "arc", "co", "dc", "lc", "o", "unc", "C", "l", "cp"], "i": ["ii", "phi", "me", "xi", "multi", "sim", "ri", "eu", "it", "init", "ji", "hi", "ims", "by", "u", "ci", "di", "I", "mi", "this", "ie", "info", "gi", "ir", "er", "li", "p", "ei", "si", "status", "pi", "iq", "ti", "iter", "ia", "name", "ij", "zi", "ui", "ini", "ai", "ic", "us", "iu", " I", "ind", "ix", "id", "ip", "y", "o", "is", "uri", "x", "im", "ori", "ami", "qi", "ki"], "j": ["ii", "m", "ja", "br", "it", "bi", "jj", "ji", "jc", "jac", "init", "q", "r", "z", "u", "uj", "bj", "bs", "t", "di", "jump", "rel", "jit", "ne", "json", "pt", "pr", "pre", "kj", "off", "next", "p", "si", "jl", "obj", "g", "v", "aj", "jp", "ij", "dj", "J", "ix", "fr", "js", "y", "o", "key", "x", "im", "ion"], "temp": ["Temp", "tem", "current", "term", "porary", "tmp", "copy", "cache", "tc", "tim", "mint", "fake", "unt", "t", "emp", "stem", "perm", "pt", "prime", "timer", "result", "buffer", "pre", "adjusted", "cu", "level", "null", "p", "template", "ptr", "mp", "prefix", "iter", "txt", "cum", "v", "created", "total", "mem", "deg", "orig", "raw", "tm", "base", "alt", "tr", "texture", "partial", "tt", "em", "fac", "rem", "mod"], "k": ["mk", "unk", "m", "kar", "sk", "ke", "ik", "ko", "q", "kn", "z", "kt", "kr", "km", "ok", "ph", "wk", "kh", "kind", "ak", "ck", "uk", "kj", "kid", "kl", "ka", "ks", "inc", "w", "g", "ku", "v", "K", "kk", "kw", "y", "o", "key", "x", "max", "ek", "tk"], "res": ["rs", "bo", "f", "details", "r", "resp", "vals", "arr", "re", "cs", "ok", "rel", "pers", "req", "stock", "result", "reg", "vol", " Res", "conf", "cons", "fresh", "RES", "ms", "results", "gr", "yes", "err", "cond", "ps", "Res", "val", "def", "js", "rest", "pres", "expr", "ret", "reset", "rev", "ress", "rem", "red", "resh"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tString line1 = sc.nextLine();\\n\t\tString[] string1 = line1.split(\" \");\\n\t\tint n = Integer.parseInt(string1[0]);\\n\t\tint m = Integer.parseInt(string1[1]);\\n\t\tint l = Integer.parseInt(string1[2]);\\n\\n\t\tString[][] gyouA = new String[n][m];\\n\t\tint[][] A = new int[n][m];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tString line2 = sc.nextLine();\\n\t\t\tfor (int j = 0; j < m; j++) {\\n\t\t\t\tString[] string = line2.split(\" \");\\n\t\t\t\tgyouA[i][j] = string[j];\\n\t\t\t\tA[i][j] = Integer.parseInt(gyouA[i][j]);\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tString[][] gyouB = new String[m][l];\\n\t\tint[][] B = new int[m][l];\\n\t\tfor (int i = 0; i < m; i++) {\\n\t\t\tString line3 = sc.nextLine();\\n\t\t\tfor (int j = 0; j < l; j++) {\\n\t\t\t\tString[] string = line3.split(\" \");\\n\t\t\t\tgyouB[i][j] = string[j];\\n\t\t\t\tB[i][j] = Integer.parseInt(gyouB[i][j]);\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tlong AB = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tfor (int j = 0; j < l; j++) {\\n\t\t\t\tlong C = 0;\\n\t\t\t\tfor (int k = 0; k < m; k++) {\\n\t\t\t\t\tAB = A[i][k] * B[k][j];\\n\t\t\t\t\tC += AB;\\n\t\t\t\t}\\n\t\t\t\tif (j == l - 1) {\\n\t\t\t\t\tSystem.out.print(C);\\n\\n\t\t\t\t} else {\\n\t\t\t\t\tSystem.out.print(C + \" \");\\n\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t}\\n}", "target": "204", "substitutes": {"sc": ["ng", "system", "cc", "tc", "ss", "cr", "rc", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", "ck", "ner", "spec", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "inc", "ctx", "fc", "arc", "sv", "scope", "dc", "scan", "lc", "sp", "ser", "asc", "conv", "sch", "sec", "anc", "usc", "Sync", "irc", "sq"], "line1": ["line0", "line101", "Line1", "store1", "string7", "store101", "store7", " lineFirst", "detail1", "line7", "detail2", "stringFirst", "Line2", "lineFirst", "LineFirst", "detail101", "Line0", " line0", "string0", "string101", "string2", "detail7", "store2"], "string1": ["word0", "descriptionOne", "password1", "char9", "space01", "element1", "stringOne", "sequence3", "description1", "string3", "sequence0", "String1", "ring9", " stringOnce", "string7", "password9", " stringOne", "stringn", "str1", "passwordOne", "elementOne", "strOne", "String0", "element9", "spaceOne", "spaceOnce", "charOne", "char1", "word1", "stringOnce", "wordOne", "String3", "space1", "descriptionn", "word3", "sequence1", "StringOne", "str01", "elementn", " string01", "strOnce", "string0", "string9", "sequenceOne", "description9", "string01", "char7", "ring1", "ringn", "description7", "ringOne", "password7"], "n": ["h", "nan", "nn", "net", "number", "fn", "r", "z", "none", "u", "ln", "t", "ne", "mn", "network", "ll", "on", "nm", "p", "en", "c", "np", "nc", "N", "pi", "an", "nb", "g", "d", "v", "nu", "a", "no", "name", "names", "ns", "num", "un", "nl", "sn", "na", "M", "y", "o", "x", "dn", "nt"], "m": ["range", "b", "h", "me", "mode", "multi", "f", "dm", "em", "q", "r", "am", "z", "u", "ml", "ln", "om", "cm", "t", "mo", "mi", "mn", "perm", "ll", "nm", "mu", "p", "mc", "c", "bm", "module", "pi", "le", "an", "gm", "g", "d", "v", "a", "mem", "mt", "all", "ms", "rm", "left", "tm", "M", "mm", "mean", "y", "model", "o", "im", "al", "rem", "mod"], "l": ["b", "h", "s", "lin", "lo", "f", "ul", "q", "loc", "r", "z", "ml", "u", "ln", "t", "el", "lock", "pl", "L", "ll", "line", "list", "li", "p", "len", "c", "ol", "kl", "lit", "le", "w", "g", "d", "v", "mt", "all", "left", "sl", "nl", "length", "lc", "lt", "dl", "mm", "ly", "ls", "o", "al"], "gyouA": ["gyoulArea", "gyooAn", "uyuuA", "iyoulA", "skyouB", "gyuSA", "iyouP", "gyoulA", "gyuAA", "skyouA", "skyuAA", "gyourB", "iyouAn", "gyuB", "uyouAn", "gyocoAn", "gyouAn", "gyooP", "gyourAA", "uyuuAC", "gyuuA", "gyaoAA", "uyouArea", "gyaoA", "skyuB", "gyooA", "gyuuAn", "gyouSA", "uyuuAn", "gyouAC", "gyouP", "skyouSA", "gyaoSA", "gyuuArea", "gyocoAC", "iyouB", "iyoulAn", "gyourA", "gyoulB", "uyouA", "iyoulB", "gyaoB", "gyooB", "gyocoA", "uyuuArea", "gyourAn", "gyuuAC", "iyoulP", "gyuA", "iyouA", "gyoulAn", "skyuSA", "gyouAA", "gyoulAC", "gyourSA", "gyourP", "skyouAA", "uyouAC", "gyouArea", "gyocoArea", "skyuA", "gyoulP"], "A": ["AC", "AT", "P", "GA", "At", "AA", "AS", "As", "CA", "Ax", "BA", "S", "AI", "I", "AH", "L", "AL", "V", "ACC", "Al", "N", "An", "AM", "AU", "a", "NA", "T", "Ar", "AY", "IA", "AAA", "Array", "AR", "JA", "Alice", "M", "R", "U", "AP"], "i": ["ji", "hi", "q", "in", "ci", "mi", "list", "li", "iq", "v", "name", "ij", "ui", "ini", "ai", "ix", "ion", "multi", "bi", "f", "iy", "at", "ei", "status", "pi", "zi", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "init", "di", "info", "gi", "index", "ni", "si", "ti", "io", "ind", "ip", "o", "qi", "phi", "xi", "me", "sim", "it", "by", "u", "iii", "iat", "I", "parent", "this", "ie", "series", "p", "g", "ia", "ic", "iu", "is", "x"], "line2": ["LINE62", "case4", "sequenceSecond", "entry2", "line8", "sequence8", " line5", "entrySecond", " line62", "case5", " line8", "sequence62", " lineSecond", "caseSecond", "case2", "line5", "entry4", "lineSecond", " line4", "sequence2", "entry5", "LINE2", "line62", "line4", "LINE8", "LINESecond"], "j": ["oj", "out", "og", "ja", "br", "ev", "ji", "q", "dr", "pt", "pr", "kj", "er", "li", "jl", "obj", "v", "my", "ij", "block", "all", "dj", "ix", "ion", "ng", "f", "bj", "jump", "json", "ax", "next", "other", "Ja", "J", "js", "y", "jj", "uj", "el", "di", "rel", "jit", "so", "gi", "kid", "note", "ot", "d", "aj", "jp", "to", "o", "job", "b", "adj", "it", "jc", "str", "z", "by", "parent", "je", "off", "p", "jo", "g", "fr", "key", "x", "err", "let"], "string": ["ring", "message", "library", "password", "address", "STR", "sequence", "test", "char", "command", "service", "link", "str", "number", "value", "file", "pair", "time", "set", "section", "format", "detail", "resource", "series", "function", "group", "escape", "buffer", "result", "line", "list", "null", "strip", "space", "comment", "array", "filename", "item", "single", "chain", "length", "object", "text", "second", "word", "join", "field", "attribute", "source", "sample"], "gyouB": ["gyongoB", "gyouBB", "gregouA", " gyouBT", "gywallB", "gyouAB", "gyuiBT", "gyongoD", "gyuiB", "gyoulA", "gyuuD", "gyuBB", "fyuBu", " gyuB", "gyuB", "fyouD", "gyongoT", "fyouB", "gyouBR", "gyuiBB", "gregoulAB", "gyouBu", "gyuuA", "gregouAB", "gyuBu", "fyuD", "gregoulB", "gywallAB", "gyouCB", "fyouBu", "gyouT", "gyoulB", "gyongoBu", "gyuuB", "gyouD", "gycuBR", "fyuT", "gyuuAB", "gyuiBR", "fyuB", "gyuuCB", " gyuBB", "gyuBR", "gregoulCB", "gyoulCB", " gyouBB", "gyuuT", " gyouBR", "gyuBT", "gregouCB", "gycuBT", "gyuD", "fyouT", "gyouBT", " gyuBR", "gycuB", "gywallCB", "gyuuBu", "gycuBB", "gyuT", "gywallA", " gyuBT", "gregouB", "gregoulA", "gyoulAB"], "B": ["E", "b", "BB", "CB", "BT", "BM", "S", "BA", "G", "RB", "I", "NB", "L", "BO", "VB", "V", "BI", "TB", "BS", "BL", "IB", "Y", "T", "DB", "J", "GB", "WB", "LB", "M", "R", "SB", "BE", "BR", "Bs", "BC"], "line3": [" line83", "string83", "note23", "string3", "liner3", "liner39", "note3", "ine23", "ine39", "string23", " line512", "line512", "line83", "line23", "ine512", "liner512", " line23", "liner23", "ine3", "line39", "note83", " line39"], "AB": ["AC", "AT", "IGN", "BB", "FB", "AD", "AA", "CB", "CM", "CA", "BM", "BA", "ABC", "RB", "AI", "AH", "ab", "OB", "CP", "NB", "SA", "LC", "EB", "ACC", "AE", "UB", "AF", "BL", "AV", "IB", "AU", "TA", "DB", "Ab", "ARB", "LB", "LAB", "AR", "BP", "SB", "Tab", "CC", "BC"], "C": ["AC", "CON", "E", "P", "F", "DC", "CB", "CCC", "CM", "S", "CA", "G", "CW", "CI", "CS", "CR", "D", "I", "O", "CNN", "EC", "GC", "CP", "NC", "L", "COM", "JC", "V", "LC", "CD", "TC", "c", "N", "CF", "Y", "T", "K", "CE", "CV", "CT", "M", "R", "CAR", "YC", "FC", "CHAR", "CC", "BC"], "k": ["mk", "unk", "kar", "sk", "dk", "it", "ke", "ik", "ko", "q", "kn", "z", "u", "kt", "kr", "km", "ok", "wk", "kh", "kind", "ak", "ck", "uk", "kj", "kid", "kl", "ka", "ks", "c", "w", "g", "K", "kk", "kw", "ark", "kg", "o", "key", "ek", "tk", "ki"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Stack;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in); \\n\\n\t\tStack<Integer> stack = new Stack<Integer>();\\n\t\t\\n\t\tfor (; sc.hasNext(); ) {\\n\t\t\tif (sc.hasNextInt()) {\\n\t\t\t\tstack.push(sc.nextInt());\\n\t\t\t} else {\\n\t\t\t\tchar op = sc.next().charAt(0);\\n\t\t\t\tint b = stack.pop();\\n\t\t\t\tint a = stack.pop();\\n\t\t\t\tint result;\\n\t\t\t\tswitch (op) {\\n\t\t\t\tcase '+':\\n\t\t\t\t\tresult = a + b;\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '-':\\n\t\t\t\t\tresult = a - b;\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '*':\\n\t\t\t\t\tresult = a * b;\\n\t\t\t\t\tbreak;\\n\t\t\t\tdefault:\\n\t\t\t\t\tresult = -1;\\n\t\t\t\t}\\n\t\t\t\tstack.push(result);\\n\t\t\t}\\n\t\t}\\n\t\t\\n    \tSystem.out.println(stack.pop());\\n    \t\\n        sc.close();\\n\t}\\n}", "target": "114", "substitutes": {"sc": ["tch", "system", "cc", "cle", "tc", "cr", "pb", "capt", "rc", "cl", "irc", "bc", "cs", "ec", "desc", "qu", "esc", "sync", "Sc", "ctl", "dec", "se", "so", "isc", "osc", "pc", "ch", "uc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "sw", "inc", "fc", "ctx", "ssl", "arc", "sv", "dc", "lc", "scan", "sp", "asc", "conv", "ctrl", "sec", "anc", "usc", "syn", "sq"], "stack": ["cost", "store", "queue", "check", "console", "library", "struct", "context", "pop", "sequence", "cache", "track", "where", "top", "runtime", "wait", "window", "thread", "history", "exp", "info", "function", "Stack", "pod", "loop", "buffer", "storage", "slice", "white", "list", "control", "load", "back", "level", "first", "print", "layer", "null", "space", "local", "shape", "ack", "style", "scale", "st", "total", "config", "make", "acks", "left", "hash", "scope", "stream", "display", "update", "pack", "tree", "sp", "table", "view", "roll", "collection", "upper", "max", "size", "stage", "reported", "push"], "op": ["prev", "hop", "oper", "Op", "bit", "img", "xp", "ap", "pop", "i", "it", "init", "cmd", "loc", "ok", "t", "operation", "k", "exp", "perm", "attr", "ops", "pixel", "app", "p", "code", "c", "ot", "prefix", "inc", "jp", "ic", "or", "type", "sp", "OP", "cop", "ip", "o", "typ", "omp", "operator", "comp", "opp"], "b": ["B", "bit", "eb", "ob", "j", "br", "i", "bi", "pb", "bf", "bool", "r", "z", "sb", "be", "fb", "bc", "bs", "t", "ab", "cb", "ib", "bis", "beta", "bb", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "bp", "bar", "bt", "base", "n", "y", "l", "erb"], "a": ["aaa", "act", "m", "sta", "la", "apa", "oa", "sa", "i", "f", "am", "era", "at", "A", "au", "area", "ab", "ca", "ma", "app", "ac", "p", "ba", "ao", "ea", "aka", "xa", "ta", "obj", "an", "aa", "ia", "aj", "ar", "as", "aux", "alpha", "n", "pa", "na", "val", "to", "o", "ae"], "result": ["successful", "message", "term", "folder", "ful", "reason", "feature", "mask", "br", "profile", "value", "str", "test", "command", "sequence", "success", "number", "rc", "answer", "goal", "continue", "row", "complete", "diff", "relation", "function", "cur", "repl", "Result", "zero", "date", "report", "product", "match", "currency", "status", "ptr", "score", "count", "data", "response", "res", "style", "summary", "output", "draw", "comment", "total", "make", "results", "process", "num", "search", "length", "integer", "vector", "tr", "effect", "val", "view", "direction", "cmp", "field", "valid", "ret", "comp", "description", "master"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main{\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int[] dish = new int[n];\\n        int[] gain = new int[n];\\n        int[] bonus = new int[n-1];\\n        for(int i=0;i<n;i++){\\n            dish[i] = Integer.parseInt(sc.next());\\n        }\\n        for(int i=0;i<n;i++){\\n            gain[i] = Integer.parseInt(sc.next());\\n        }\\n        for(int i=0;i<n-1;i++){\\n            bonus[i] = Integer.parseInt(sc.next());\\n        }\\n\\n        int sum = 0;\\n        int prev = n+1;\\n        for(int i=0;i<n;i++){\\n            sum += gain[dish[i]-1];\\n            if(dish[i]==(prev+1)){\\n                sum += bonus[prev-1];\\n            }\\n            prev = dish[i];\\n        }\\n        System.out.println(sum);\\n    }\\n}", "target": "223", "substitutes": {"sc": [" Sc", "tch", "cc", "cle", "tc", "ss", "cr", "rc", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "isc", "osc", "pc", "ch", "exec", "sys", "psc", "mc", "scl", "c", "nc", "sci", "sh", "SC", "gc", "inc", "ctx", "arc", "fc", "sv", "scan", "lc", "sp", "sel", "asc", "conv", "sch", "sec", "anc", "usc", "irc", "sq"], "n": ["ng", "out", "m", "norm", "ct", "j", "nan", "f", "nn", "ren", "net", "number", "q", "none", "z", "cl", "ln", "t", "comm", "pos", "ne", "network", "mn", "ll", "on", "conn", "nm", "en", "p", "np", "c", "nc", "ot", "len", "N", "local", "count", "an", "note", "nb", "g", "d", "v", "name", "pi", "no", "normal", "nu", "names", "all", " N", "num", "ns", "un", "chain", "nl", "sn", "natural", "na", "non", "o", "x", "cn", "l", "nt"], "dish": ["Diy", "daot", "dideter", " dis", "indiss", " dishy", "daish", " diy", "daian", "mib", "Dib", "didist", "mis", "Dist", "daet", "didian", "dnet", "Dot", "mish", "Dishy", "diss", " diss", "Dis", "didish", "Dish", "drishy", "dnish", "dian", "drish", "indis", "mist", "daist", "Dian", "deter", " dib", "Deter", "det", "dishy", "driy", "dib", "Diss", "dot", "indish", "dris", "dist", "dnist", "indist", "daeter", "diy", "Det", " dist", "dnot", "dis"], "gain": ["bridge", "graph", "rain", "strength", "carry", "grain", "con", "mask", "forward", "ass", "atten", "gil", "news", " gains", "limit", "charge", "vine", "broad", "group", "gi", "conn", "sys", "ward", "acc", "gen", "gn", "grad", "ain", "gate", "gc", "summary", "fan", "g", "scale", "guard", "ga", "batch", "craft", "weight", "chain", "scan", "ang", "jack", "gan", "conv", "cn", "fac", "grow", "uss", "flat"], "bonus": ["brous", " Bonuses", "boruss", "bouses", "bonUS", "nonuses", "boruses", "buris", "bonuss", " bonis", " Bonus", "nonis", "nonUS", "borUS", "buruses", " BonUS", "burUS", "nonuss", "bonuses", " bonuses", "bonbus", " Bonuss", "nonus", "bonis", "bous", "boUS", "bobus", "bois", "brois", "burus", "brobus", "brouses", " bonbus", "borus"], "i": ["ji", "hi", "q", "dr", "iti", "ci", "iso", "history", "mi", "php", "li", "iq", "my", "ij", "ui", "ini", "ai", "et", "ice", "err", "ix", "ion", "multi", "ies", "bi", "f", "iy", "ico", "ei", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "fi", "init", "details", "di", "wi", "exp", "info", "gi", "ni", "si", "ti", "io", "jp", "\u0438", "ind", "ip", "o", "PI", "ori", "qi", "phi", "pie", "gu", "xi", "me", "j", "sim", "it", "ims", "u", "iii", "set", "I", "parent", "this", "ie", "series", "slice", "client", "point", "inner", "ex", "iter", "ia", "ic", "iu", "ios", "is", "oi", "batch"], "sum": ["mult", "sam", "out", "um", "sim", "mix", "mass", "av", "dump", " sums", "temp", "pool", "dev", "med", "hum", "stack", "loss", "result", "share", "vol", "ash", "acc", "si", " SUM", "umm", "su", " summed", "report", "score", "count", "cum", "summary", "comment", "cal", "add", "total", "mem", "hash", "num", "us", "average", "Sum", "hist", "cmp", "mean", "size", "fac", "sup", "sat", "frac", "mod"], "prev": ["vious", "Prev", "current", "adj", "msg", "tmp", "br", "par", "vv", "top", "ctr", "temp", "pri", "history", "rel", "jump", "dev", "nav", "parent", "before", "gov", "prime", "zero", "pre", "pkg", "first", "prop", "PRE", "next", "ref", "op", "ptr", "Previous", "var", "iter", "obj", "bp", "jp", "orig", "coord", "last", "snap", "sp", "fr", "cmp", "ip", "conv", "pres", "upper", "rem", "rev", "sup", "pred"]}}
{"code": "import java.util.Scanner;\\nimport java.util.ArrayList;\\n \\npublic class Main {\\n  final static int max = 100;\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n      int i = 0;\\n      String N;     \\n        long A = scan.nextLong();\\n        double B = scan.nextDouble();\\n     //   System.out.println(a[i]);\\n        cal(A,B);\\n        scan.close();\\n    }\\n  \\n  public static void cal(long a,double b){\\n     long s = 0;\\n     long bb;\\n    bb = Math.round(b*100);\\n     s = a*bb/100;\\n     System.out.println(s);\\n  }\\n}", "target": "15", "substitutes": {"max": ["rows", "ize", "MAX", "init", " MAX", "min", "window", "t", "row", "limit", "start", "ax", "Max", "print", "conf", " min", "count", "iter", "w", "scale", "num", "base", "map", "id", " Max", "rest", "size"], "scan": ["save", "out", "san", "check", "clean", "con", "system", "can", "skip", "see", "pan", "Scan", "ann", "nn", "in", "r", "z", "walk", "re", "scroll", "set", "read", "sync", "black", "connect", "info", "se", "seek", "ch", "sys", "reach", "sc", "ner", "report", "query", "sur", "send", "conf", "gate", "parse", "sql", "an", "sin", "scale", "sv", "search", "util", "n", "ser", " scanner", "look", "stan", "find"], "i": ["ii", "m", "b", "j", "it", "bi", "z", "ci", "t", "set", "I", "k", "mi", "li", "p", "si", "c", " ii", "v", "io", "ij", "ai", "n", " j", "id", "y", "is", "x"], "N": ["E", "P", "F", "Ns", "S", "NAME", "G", "NS", "I", "D", " C", "L", "V", "Name", "NA", "Y", "T", "K", "J", " S", "n", " n", "M", "R", "C", "Z", "X", "O"], "A": ["AC", "E", "P", "AA", "S", "CA", "G", "AB", "I", "D", " a", "L", "SA", "V", "H", "AF", "AV", "a", "NA", "T", "K", "AR", "M", "R", "C", "X"], "B": ["E", "b", "P", "BB", "BM", "S", "BA", "G", "I", "D", "AB", "OB", "NB", "L", "V", " b", "BS", "Y", "T", "DB", "J", "M", "R", "C", "Z", "O", "BC"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\tint a = in.nextInt();\\n\t\tint b = in.nextInt(); in.nextLine();\\n\t\tString s = in.nextLine();\\n\t\tString ans = \"No\";\\n\t\tif( s.contains(\"-\") ) {\\n\t\t\tString[] arr = s.split(\"-\");\\n\t\t\tif( arr.length == 2 ) {\\n\t\t\t\tif( arr[0].length() == a && arr[1].length() == b ) ans = \"Yes\";\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}", "target": "78", "substitutes": {"in": ["per", "out", "inf", "In", "check", "con", "isin", "i", "init", "doc", "it", "run", " din", "r", "file", "ln", "user", "by", "rin", "reader", "at", "row", "read", "IN", "info", "std", "from", "line", "log", "gin", "ma", "null", "en", "ac", "gen", "ins", "inner", "inn", "inc", "sin", "cin", "get", "io", "add", "input", "make", "all", "bin", "ini", "ic", "thin", "update", "scan", "n", "err", "ind", "readable", "id", "mm", "din", "is", "sum", "l"], "a": ["act", "aff", "sta", "la", "oa", "sa", "i", "ama", "da", "f", "am", "at", "A", "au", "area", "ca", "ax", "ma", "ac", "ba", "af", "ea", "ao", "ta", "an", "aa", "ia", "aj", "ga", "ai", "as", "alpha", "na", "va", "ach", "o", "ae"], "b": ["B", "h", "eb", "ob", "j", "i", "bi", "f", "r", "sb", "be", "by", "fb", "bc", "t", "ab", "ib", "gb", "cb", "bis", "bb", "p", "ba", "c", "db", "amb", "rb", "nb", "g", "d", "v", "bp", "mb", "bar", "n", "bound", "y", "l", "wb"], "s": ["simple", "rs", "save", "h", "string", "its", "ats", "i", "str", "ss", "S", "sb", "abs", "sort", "cs", "t", "qs", "sys", "gs", "p", "space", "sql", "sw", "w", "g", "st", "sv", "ms", "ws", "sl", "ns", "times", "sts", "sp", "ds", "ps", "js", "ts", "ls", "is", "es", "l", "sq"], "ans": ["uns", "vs", "rs", "san", "oss", "rans", "ats", "ups", "ann", " means", "ens", "said", "aus", "ones", "angs", "ums", "ots", "eds", "aps", "ks", "ins", "ols", "an", "ros", "leans", "ars", "ras", "ms", "orts", "flags", "ns", "arms", "as", "eps", "ants", "ents", "ids", "mas", "ons", "yes", "ps", "arts", "ls", "ANS", "ts", "amps", "actions", "ads"], "arr": ["aaa", "rs", "warn", "adj", "arb", "j", "ear", "pad", "br", "addr", "bl", "str", "r", "av", "dr", "abs", "vec", "pair", "parts", "buf", "dict", "ld", "rel", "coll", "att", "diff", "pl", "req", "gb", "emb", "attr", "repl", "ax", "list", "app", "ord", "vol", "db", "obj", "iq", "fam", "array", "compl", "ars", "ar", "unch", "arm", "gr", "Array", "angle", "dat", "map", "fr", "ang", "ray", "elt", "expr", "alph", "batch", "hash", "frac"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint K = sc.nextInt();\\n\t\tint X = sc.nextInt();\\n\t\tfor (int i=X-K+1;i<K+X;i++) {\\n\t\t\tSystem.out.print(i);\\n\t\t\tSystem.out.print(\" \");\\n\t\t}\\n\t}\\n}\\n", "target": "207", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "pb", "rc", "cl", "sb", "bc", "cs", "ok", "esc", "Sc", "ctl", "se", "ch", "osc", "pc", "isc", "uc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "SC", "gc", "inc", "sv", "dc", "scan", "lc", "sp", "asc", "sch", "sec", "anc", "usc", "sq", "tk"], "K": ["AC", "KA", "P", "F", "HK", "KI", "UK", "KE", "SK", "G", "KB", "FK", "I", "k", "Key", "CP", "L", "V", "KS", "H", "N", "KN", "KT", "Y", "T", "J", "KING", "Q", "IK", "M", "R", "KK", "KEY", "C", "Z", "KR", "PK", "VK"], "X": ["E", "IX", "P", "F", "XL", "MX", "S", "G", "XXX", "TX", "I", "D", "IN", "W", "L", "V", "XX", "H", "XT", "N", "DX", "XP", "Y", "T", "J", "Q", "EX", "AX", "U", "M", "R", "FX", "UX", "x", "C", "Z"], "i": ["ii", "phi", "m", "xi", "j", "multi", "it", "bi", "ji", "hi", "in", "u", "yi", "ci", "di", "I", "k", "mi", "gi", "index", "ni", "client", "li", "ei", "si", "pi", "iter", "ti", "w", "v", "a", "cli", "iri", "ij", "zi", "ui", "ic", "ai", "us", "integer", "iu", "n", "ix", "id", "ip", "y", "o", "is", "x", "im", "qi", "ki"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int in = Integer.parseInt(s.nextLine());\\n        String[] in2  = s.nextLine().split(\" \");\\n        List<Integer> l = new ArrayList<Integer>();\\n        for(int i = 0;i<in;i++){\\n            l.add(Integer.parseInt(in2[i]));\\n        }\\n        List<Integer> sorted = new ArrayList<Integer>(l);\\n        Collections.sort(sorted);\\n        int count = 0;\\n        for(int i = 0;i<l.size();i++){\\n            int prev = l.get(i);\\n            int curr = sorted.get(i);\\n            if(prev != curr){\\n                count++;\\n            }\\n        }\\n        System.out.println(count == 0 || count == 2 ? \"YES\" : \"NO\");\\n    }\\n}", "target": "82", "substitutes": {"s": ["hs", "rs", "h", "sol", "ats", "xs", "fs", "aws", "ss", "fps", "S", "sb", "r", "gets", "abs", "se", "opens", "qs", "sys", "gs", "ins", "sw", "ys", "d", "less", "sv", "ms", "ws", "ns", "sts", "ds", "ps", "js", "conv", "ls", "ses", "is", "ts", "es", "sq"], "in": ["out", "inf", "In", "m", "con", "isin", "doc", "f", " din", "r", "file", "ln", "user", "rin", "reader", "vin", "t", "min", "pin", "mi", "read", "IN", "info", "std", "from", "line", "en", "ins", "inner", "pi", "inn", "inc", "lines", "cin", "no", "io", "input", "all", "bin", "ini", "inv", "stream", "n", "nin", "readable", "id", "din", "o", "max", "x", " inf", "al", "err", "win"], "in2": ["int2", "inTwo", "intTwo", " in02", "dinTwo", "input36", " in36", " in4", "din2", "din02", "IN02", " inTwo", "int36", "in4", "IN2", "input4", "input2", "in02", "int4", "in36", "INTwo", "inputTwo"], "l": ["fl", "h", "sol", "lr", "lf", "tl", "lo", "loc", "lis", "r", "ml", "ln", "cl", "rl", "el", "ld", "coll", "lp", "pl", "L", "ll", "list", "li", "p", "ol", "kl", "local", "lit", "le", "jl", "compl", "acl", "v", "left", "all", "sl", "hl", "lv", "nl", "lc", "n", "lt", "dl", "ls", "al", "lists"], "i": ["ogi", "ji", "hi", "q", "iti", "ci", "mi", "mu", "li", "iq", "v", "my", "ij", "ui", "ini", "ai", "ix", "inx", "m", "multi", "bi", "f", "ik", "iy", "go", "ei", "c", "pi", "cli", "y", "uri", "im", "ami", "ki", "ii", "ri", "yi", "di", "info", "gi", "ni", "si", "ski", "ti", "io", "\u0438", "ind", "ip", "cgi", "o", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "u", "I", "this", "ie", "you", "slice", "client", "point", "iter", "g", "ic", "iu", "base", "is", "x", "oi", "err"], "sorted": ["norting", "esorter", "sorter", "sorting", "norter", "Sended", "sort", " sort", "Sorting", " sured", "esorted", "seort", "Sorted", "Sured", "tsorting", "seorter", " sorting", "seorting", "esort", "esured", "tsorter", "Sort", "Sorter", "tsorted", " sended", "seorted", "sended", "nended", "norted", " sorter", "tsort", "sured"], "count": ["current", "check", "ct", "flag", "ount", "test", "cache", "number", "ctr", "z", "scroll", "continue", "set", "cont", "history", "coll", "th", "result", "counter", "index", "list", "report", "len", "c", "amount", "code", "conf", "status", "contact", "trace", "score", "nb", "other", "add", "total", "num", "search", "state", "length", "n", "Count", "ind", "cond", "child", "call", "size", "stat", "sum", "batch", "find", "found", "nt"], "prev": ["vious", "serv", "Prev", " Prev", "adj", "tmp", "rep", "par", "av", "pri", "history", "rel", "jump", "parent", "vP", "nav", "before", "req", "vp", "perm", "pre", "PRE", " previous", "op", "prefix", "Previous", "var", "mp", "txt", "jp", "orig", "inv", "last", "bar", "cmp", "conv", "pres", "rem", "rev", "sup", "pred", "comp"], "curr": ["Curre", " Curvr", "curt", "Curvr", "currd", "curre", " Curr", "curvr", " Currd", "Currs", " Curre", "currs", " curt", " curvr", "Curt", " curre", " Curt", "Currd", " currs", " Currs", "Curr", " currd"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\\n\t\t\\n\t\tlong a = Long.parseLong(st.nextToken());\\n\t\tdouble b = Double.parseDouble(st.nextToken());\\n\t\t\\n\t\tlong c = (long)(b * 100.0 + 0.5);\\n\t\tlong res = a * c / 100;\\n\t\tSystem.out.println(res);\\n\t}\\n\\n}", "target": "15", "substitutes": {"br": ["bridge", "eb", "Br", "bsp", "bl", "str", "cr", "bf", "dr", "kr", "bs", "bc", "buf", "ab", "ch", "pr", "bg", "bb", "er", "bd", "ba", "bm", "hr", "rb", "bro", "bp", "gr", "vr", "bt", "yr", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "mr", "BR"], "st": ["ost", "sta", "ct", "s", "sth", "spe", "str", "ft", "sb", "nd", "inst", "t", "set", "ast", "th", "sty", "se", "ST", "pt", "std", "usr", "est", "ist", "sh", "stri", "St", "mt", "ust", "sv", "td", "sl", "nl", "sy", "sn", "sts", "sp", "sd", "ts", "rest", "tt", "ste", "stable"], "a": ["aaa", "act", "sta", "la", "oa", "sa", "i", "aq", "da", "r", "am", "t", "at", "A", "au", "area", "ab", "ca", "ma", "ac", "p", "ba", "ao", "ea", "xa", "ta", "an", "aa", "ia", "aj", "ar", "ga", "ai", "as", "alpha", "ach", "l", "ae"], "b": ["B", "eb", "ob", "j", "bi", "f", "pb", "bf", "sb", "be", "fb", "bs", "bc", "blue", "ab", "cb", "gb", "ib", "bis", "beta", "bb", "bd", "ba", "db", "rb", "nb", "g", "bp", "d", "mb", "base", " B", "bound", "l", "wb"], "c": ["ct", "cc", "f", "tc", "cr", "r", "ec", "cm", "bc", "cs", "cd", "com", "cos", "cb", "ca", "cf", "cu", "uc", "sc", "ac", "gc", "fc", "d", "dc", "ce", "lc", "n", "unc", "ctrl", "C", "l", "cp"], "res": ["out", "rep", "resolution", "rc", "resp", "re", "des", "vec", "rel", "os", "rand", "req", "stock", "rev", "result", "zero", "reg", "vol", "summary", "cons", "RES", "results", "ms", "inv", "gr", "Res", "cond", "ps", "def", "rest", "pres", "ret", "reset", "sum", "red", "ress", "rem"]}}
{"code": "/*package whatever //do not write package name here */\\n\\nimport java.io.*;\\nimport java.util.*;\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner input = new Scanner(System.in);\\n\t\tdouble n = input.nextDouble();\\n\t\tdouble ans = (n*n*n)/27.0;\\n\t\tSystem.out.printf(\"%.12f\",ans);\\n\t\t\\n\t}\\n}", "target": "53", "substitutes": {"input": [" Input", "current", "out", "inf", "system", "context", "service", " inputs", "in", "focus", "select", "reader", "iterator", "human", "socket", "read", "feed", "sky", "cur", "start", "buffer", "index", "inner", "parse", "inc", "subject", "get", "output", "io", "search", "stream", "active", "Input", "image", "pattern", "table", "unsigned", "source", "sum", "initial", "sq", "sample"], "n": ["out", "m", "h", "norm", "j", "s", "nan", "i", "f", "nn", "number", "ln", "t", "ne", "mn", "ll", "on", "en", "p", "np", "gn", "nor", "c", "nz", "N", "nc", "an", "nb", "w", "d", "v", "nu", "normal", "g", "name", "num", "ns", "nl", "sn", "na", "sd", "o", "cn", "l", "nt"], "ans": ["vs", "s", "can", "rans", "ats", "nan", "pan", "ann", "nn", "ians", "lan", "ran", "vals", "ens", " means", "aus", "AN", "cs", "outs", "anes", "reads", "ks", "ins", "an", "ros", "leans", "lines", "names", "ms", "results", "as", "ns", " scans", "nl", "mas", "scan", "ds", "ps", "nets", "mean", "sd", "ls", "ANS", "nes", "es"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String S = sc.next();\\n        String ans = \"No\";\\n        if(S.substring(S.length() / 2).equals(S.substring(0, S.length() / 2))) ans = \"Yes\";\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "161", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "capt", "ss", "rc", "ko", "cl", "bc", "cs", "desc", "ok", "ec", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "c", "nc", "sub", "sci", "SC", "gc", "inc", "sr", "sv", "scan", "lc", "sp", "ser", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "n": ["ng", "j", "nan", "nn", "fn", "ln", "t", "ne", "mn", "on", "nm", "rn", "en", "N", "count", "an", "nb", "nu", "name", "ern", " N", "ns", "num", "nl", "sn", "cn", "nr", "nt"], "S": ["B", "SM", "P", "F", "s", "STR", "DS", "SN", "G", "Str", "CS", "NS", "A", "I", "SER", "ST", "L", "SA", "V", "SF", "RS", "SE", "SI", "SP", "H", "N", "BS", "IS", "Si", "SL", "T", "SQL", "SU", "J", "Q", "LS", "SS", "SAN", "SH", "SOURCE", "TS", "GS", "R", "M", "C", "SAM", "SB", "JS"], "ans": ["uns", "posts", "vs", "rs", "san", "checks", "oss", "s", "can", "ats", "sk", "rans", "aos", "ann", " means", "ens", "ones", "cs", "aus", "outs", "angs", "eds", "aps", "anks", "ks", "ins", "ols", "an", "ros", "leans", "ars", "ras", "ms", "orts", "ents", "ns", "flags", "eps", "ants", "mas", "ons", "ates", "inks", "arts", "ts", "ANS", "amps", "ads"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n        Scanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n        long[] harr = new long[N];\\n\\n        for (int i=0; i<N; i++) {\\n            harr[i] = scanner.nextLong();\\n        }\\n\\n        int result = 0;\\n        for (int i=0; i< N-1; i++) {\\n            if (result >= (N-1 - i)) break;\\n            int tmp = 0;\\n            for (int k=i; k< N-1; k++) {\\n                if (harr[k] >= harr[k+1]) {\\n                    tmp++;\\n                } else {\\n                    break;\\n                }\\n            }\\n            if (tmp > result) {\\n                result = tmp;\\n            }\\n        }\\n\\n        System.out.println(result);\\n    }\\n}", "target": "187", "substitutes": {"scanner": ["canter", " scaner", "parseter", "Scanener", "Scanner", " scanener", "canener", "caner", "Scaner", "scanning", "parsener", "canner", "scanener", "scanter", "scaner", "canning", " scanter", "parsening", "Scanning", "parseer", "Scanter"], "N": ["NH", "NEW", "P", "F", "FIN", "UN", "NN", "NI", "MAN", "Ni", "Num", "S", "NR", "Number", "SN", "NL", "AN", "NS", "I", "GN", "D", "NO", "ANY", "NP", "NC", "NB", "L", "ALL", "ND", "V", "NOR", "TN", "Size", "Result", "NG", "NM", "Net", "NT", "Total", "None", "NA", "NOTE", "T", "K", "J", "Q", "NE", "n", "M", "R", "NOW", "C", "Z", "O"], "harr": ["hild", "hrray", "ohbuf", "hmarray", "hharray", "hharr", "hhobj", "pharr", "hmarry", "hstock", "hmray", "hiarry", "Hobj", " hld", "harray", "hbuf", "hibuf", " hobj", "histock", "hray", " hstr", " hstock", "hiray", "hmarr", "phld", "hstr", " hbuf", "ohstock", "ohstr", "hiarray", "hrarr", "pharray", " harray", "hobj", "Harr", "hrarry", "histr", "harry", "hld", "oharr", "Harray", "hiarr", "hrarray"], "i": ["hi", "in", "iti", "ci", "iso", "mi", "li", "v", "ij", "ui", "ini", "ai", "us", "ix", "inx", "m", "multi", "e", "bi", "f", "progress", "ik", "entry", "ei", "print", "status", "pi", "zi", "chain", "n", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "ri", "init", "di", "exp", "info", "gi", "index", "ni", "si", "ti", "io", "iri", "\u0438", "ind", "to", "ip", "o", "ori", "qi", "phi", "xi", "me", "j", "sim", "it", "u", "I", "ie", "client", "p", "inner", "iter", "ia", "ic", "iu", "is", "x", "oi"], "result": ["duration", "current", "term", "message", "grade", "feature", "expected", "true", "test", "command", "f", "cache", "value", "success", "number", "error", "progress", "r", "answer", "goal", "mate", "complete", "this", "buffer", "zero", "Result", "cur", "date", "null", "p", "match", "currency", "latest", "su", "obj", "count", "score", "root", "res", "output", "total", "debug", "rank", "performance", "results", "num", "power", "length", "table", "mean", "def", "RESULTS", "neutral", "valid", "ret", "false", "tf"], "tmp": ["mk", "out", "m", "term", "offset", "img", "amp", "test", "cache", "tc", "mint", "resp", "temp", "mod", "t", "mut", "emp", "diff", "this", "perm", "pretty", "attr", "pkg", "tp", "acc", "np", "ptr", "mp", "obj", "mmm", "txt", "nb", "ctx", "buff", "other", "tv", "total", "etc", "comp", "td", "tm", "timeout", "tn", "pot", "unique", "snap", "cmp", "sp", "mm", "key", "tt", "ret", "max", "sup", "rt", "trap", "tf", "nt"], "k": ["mk", "unk", "j", "dk", "sk", "kar", "kin", "ke", "ik", "ko", "q", "kn", "kt", "kr", "km", "ok", "wk", "kh", "ak", "ck", "uk", "kj", "kid", "kl", "ka", "ks", "kat", "g", "K", "ijk", "kk", "kw", "tk", "kg", "isk", "key", "ek", "ku", "ki"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.io.PrintStream;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Eric\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        FastReader in = new FastReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ATherefore solver = new ATherefore();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ATherefore {\\n        public void solve(int testNumber, FastReader in, PrintWriter out) {\\n            String a = in.next();\\n            int c = a.charAt(a.length() - 1) - '0';\\n            if (c == 0 || c == 1 || c == 6 || c == 8) {\\n                out.println(\"pon\");\\n            } else if (c == 2 || c == 4 || c == 5 || c == 7 || c == 9) {\\n                out.println(\"hon\");\\n            } else {\\n                out.println(\"bon\");\\n            }\\n\\n\\n        }\\n\\n    }\\n\\n    static class FastReader {\\n        public BufferedReader br;\\n        public StringTokenizer st;\\n        String context = null;\\n\\n        public FastReader(InputStream in) {\\n            this(new InputStreamReader(in));\\n        }\\n\\n        public FastReader(InputStreamReader input) {\\n            br = new BufferedReader(input);\\n        }\\n\\n        public String next() {\\n            if (context != null) {\\n                System.err.print(\"[\" + context + \"] Wait for input ...\");\\n            }\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    String s = br.readLine();\\n                    if (s == null)\\n                        return null;\\n                    st = new StringTokenizer(s);\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                    throw new RuntimeException(\"Could not read\");\\n                }\\n            }\\n            String res = st.nextToken();\\n            if (context != null) {\\n                System.err.println(\"[\" + context + \"] ... received : \" + res);\\n            }\\n            return res;\\n        }\\n\\n    }\\n}\\n\\n", "target": "178", "substitutes": {"inputStream": ["quickSteam", " inputSet", "sourcePort", "inputFile", "inputSet", "outputStreamer", "quickStreamer", "quickStream", "startStream", "outputSteam", "inputSteam", " inputSteam", "startFile", "sourceSteam", "sourceStream", "outputFile", "startSteam", "inputPort", " inputFile", "quickPort", "outputSet", "sourceStreamer", "startSet", "inputStreamer", "outputPort"], "outputStream": ["printStream", "printSteam", "displayStream", "outputWriter", "printWriter", "displayStreamer", "printStyle", "thisStream", "outputStreamer", "displayForm", "outputStyle", "outStream", " outputStyle", " outputSteam", "thisSteam", "outputSteam", "outSteam", "outStreamer", "displaySteam", "responseStream", "thisWriter", "responseSteam", "responseForm", "outputForm", "responseStreamer", "outForm", " outputWriter", "thisStyle"], "in": ["current", "In", "inf", "isin", "con", "i", "it", "doc", "init", "run", " din", " IN", "r", "file", "rin", "reader", "IN", "this", "info", "up", "on", "from", "er", "log", "gin", "null", "p", "query", "ins", "inner", "inside", "local", "inn", "iter", "inc", "get", "cin", "sin", "form", "io", "config", "raw", "bin", "ini", "ic", "thin", "stream", "l", "update", "image", "Input", "n", "ind", "mm", "ry", "din", "o", "is", "source", "im", "al", "err", "win"], "out": ["gc", "b", "hit", "msg", "con", "can", "aos", "it", "copy", "cache", "cmd", "net", "put", "OUT", "user", "t", "at", "pool", "manager", "ou", "outs", "set", "os", "outer", "this", "ch", "pretty", "group", "conn", "client", "sys", "Out", "log", "list", "report", "null", "print", "inner", "conf", "ex", "obj", "write", "txt", "w", "port", "end", "output", "io", "summary", "pas", "all", "screen", "co", "l", "scan", "n", "table", "to", "flush", "y", "conv", "o", "writer", "over", "sum", "err", "OU", "nt"], "solver": ["ster", " solution", "resolve", "resorter", " ster", "sorter", "resolution", "asolve", "asolver", "solution", "Solver", "resolver", "asorter", "ssolution", "Ster", "asolution", "ssolver", " solve", "Solve", "Sorter", "solve", "ssolve", "Solution", "sster"], "testNumber": [" proofCount", " scenarioNR", " scenarioCount", " proofNR", " proofNumber", " proofNum", "testNR", "testCount", " testCount", " scenarioNum", " scenarioNumber", "testNum", " testNR", " testNum"], "a": ["aaa", "aff", "b", "m", "h", "apa", "la", "oa", "sa", "i", "f", "sha", "ya", "am", "u", "era", "t", "A", "area", "ab", "ca", "ma", "ac", "p", "ba", "ea", "aka", "ao", "xa", "ta", "an", "aa", "ia", "v", "ar", "ata", "as", "alpha", "n", "pa", "na", "va", "o", "fa"], "c": ["b", "h", "color", "ct", "con", "category", "can", "cc", "char", "cache", "tc", "cl", "ci", "cm", "cs", "ec", "t", "cd", "cont", "com", "cos", "cb", "ca", "pc", "cf", "cu", "uc", "sc", "ac", "p", "mc", "count", "gc", "cum", "g", "d", "v", "arc", "fc", "ar", "abc", "co", "chain", "dc", "ce", "lc", "n", "err", "cmp", "conv", "unc", "C", "anc", "col", "fac", "cp"], "br": ["bridge", "b", "rain", "lr", "Br", "bsp", "bl", "str", "cr", "r", "dr", "rus", "kr", "bs", "bc", "buf", "bra", "pr", "ba", "bm", "hr", "rb", "txt", "bro", "bp", "bre", "brace", "mt", "gr", "bt", "tr", "sp", "fr", "bh", "ber", "bn", "wr", "err", "mr", "BR"], "st": ["ost", "ct", "irst", "tmp", "sth", "it", "str", "cr", "ft", "net", "cl", "z", "nd", "inst", "sm", "t", "set", "ast", "sty", "se", "so", "stack", "ST", "pt", "std", "start", "first", "sc", "est", "p", "ist", "sh", "status", "sw", "ctx", "St", "mt", "ust", "const", " superst", "bt", " est", "sts", "tr", "sp", "fr", "rest", "ts", "stage", "tt", "stat", "ste", "stable", "ut", "nt"], "context": ["message", "current", "class", "that", "reason", "sequence", "comments", "alias", "campus", "event", "focus", "information", "window", "format", "Context", "location", "frame", "socket", "tx", "history", "reference", "except", "function", "this", "instance", "stack", "resource", "index", "connection", "sc", "null", "module", "status", "template", "prefix", "document", "contact", "request", "local", "shape", "ctx", "method", "name", "component", "config", "path", "debug", "version", "self", "scope", "host", "type", "chain", "concept", "id", "pattern", "translation", "condition", "key", "town", "analysis", "support", "language"], "input": ["current", " Input", "insert", "address", "i", "it", "doc", "init", "value", "command", "submit", "q", "error", "answer", "select", "reader", "iterator", "read", "this", "feed", "before", "up", "result", "start", "accept", "client", "from", "buffer", "index", "ref", "query", "inner", "form", "local", "request", "argument", "iter", "data", "get", "w", "cin", "element", "output", "io", "response", "add", "raw", "stream", "active", "update", "Input", "text", "id", "ry", "key", "source", "login", "initial"], "s": ["hs", "rs", "vs", "b", "m", "string", "its", "ats", "i", "e", "xs", "f", "str", "ss", "q", "r", "S", "sb", "z", "gets", "cs", "t", "se", "qs", "gs", "p", "sh", "ends", "ins", "sql", "comm", "w", "v", "less", "sv", "ms", "ws", "ns", "n", "sts", "ves", "ds", "ps", "js", "y", "ls", "ts", "is", "es", "l", "sq"], "res": ["rs", "msg", " v", "j", "str", "q", "resp", "re", " results", " result", "tx", "os", "result", "Result", "status", "obj", "ex", "name", " ret", " ts", "Res", "val", "js", "rest", "ts", "key", "ret", " r"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\tScanner sc = new Scanner(System.in);\\n\\n\tint a = sc.nextInt();\\n\tint b = sc.nextInt();\\n\tint c = sc.nextInt();\\n\tint x = sc.nextInt();\\n\\n\tint sumv, cnt=0;\\n\tfor ( int i=0; i<a+1; i++ ) {\\n\t    for ( int j=0; j<b+1; j++ ) {\\n\t\tfor ( int k=0; k<c+1; k++ ) {\\n\t\t    sumv = 500*i + 100*j + 50*k;\\n\t\t    if ( sumv == x ) {\\n\t\t\tcnt++;\\n\t\t    }\\n\t\t}\\n\t    }\\n\t}\\n\tSystem.out.println(cnt);\\n    }\\n    \\n}", "target": "127", "substitutes": {"sc": ["ng", "out", "system", "cc", "tc", "ss", "ko", "rc", "pb", "cl", "bc", "cs", "desc", "ok", "esc", "Sc", "ctl", "ch", "pc", "isc", "osc", "uc", "sys", "ck", "ner", "mc", "scl", "nc", "mp", "SC", "gc", "inc", "g", "fc", "ctx", "sv", "dc", "scan", "lc", "sp", "cmp", "asc", "conv", "cgi", "sch", "anc", "sec", "usc", "sq"], "a": ["aaa", "sta", "la", "apa", "oa", "isa", "sa", "da", "r", "am", "at", "A", "au", "area", "ab", "ca", "ax", "ma", "app", "ac", "ao", "ea", "ba", "aka", "ta", "an", "aa", "ia", "aj", "ai", "as", "alpha", "n", "va", "o", "ach", "l", "ae"], "b": ["B", "eb", "ob", "br", "bl", "bi", "f", "bf", "r", "be", "z", "by", "fb", "sb", "bc", "bs", "ab", "ib", "gb", "cb", "ca", "bb", "p", "ba", "db", "rb", "nb", "d", "v", "mb", "n", "y", "l", "wb"], "c": ["con", "ct", "cc", "e", "f", "cr", "tc", "rc", "z", "ci", "ec", "cm", "cs", "bc", "com", "cos", "cb", "ch", "ca", "cf", "cu", "uc", "ac", "fc", "d", "g", "ctx", "etc", "cor", "co", "ce", "dc", "lc", "n", "C", "l", "cp"], "x": ["h", "xi", "rx", "ct", "xp", "xs", "f", "dx", "q", "ox", "r", "z", " xx", "mx", "t", "ok", "tx", "index", "xy", "ax", "p", "xa", "ex", "w", "g", "ctx", "v", "abc", "ic", "num", "xx", "n", "xt", "ix", "xc", "y", "max", "l", "X"], "sumv": ["sumV", "umuv", "meanv", "simv", " sumV", "simx", "simc", "meanx", "umv", "cumv", "Sumv", "umV", "SumV", "sumx", " sumx", "meanc", "sumuv", "simV", "cumc", "sumc", "Sumuv", " sumc", "meanV", " sumuv", "cumx", "cumV"], "cnt": [" crt", "acnt", "rcnt", "Crt", "rccount", "Cct", "cort", "cct", "cNT", "cont", "acnd", "conNT", "connd", "Cnt", "coNT", "rcNT", " ccount", "connt", "CNT", "conct", "acct", "acNT", "ccount", "cnd", " cNT", "Ccount", "crt", "cocount", " cct", " cnd", "rcct"], "i": ["ii", "phi", "xi", "ri", "sim", "it", "ji", "init", "hi", "ims", "ani", "u", "yi", "ci", "iii", "iy", "ql", "di", "mi", "this", "ie", "ir", "li", "ei", "si", "pi", "iq", "ti", "ia", "ar", "ij", "zi", "ui", "ini", "ai", "ic", "iu", "ix", "ip", "is", "im", "asi", "ori", "ami", "ity", "qi", "ki"], "j": ["oj", "out", "ja", "bo", "it", "ji", "jj", "jc", "bl", "br", "q", "z", "be", "by", "uj", "bj", "bs", "el", "rel", "son", "jump", "ne", "json", "je", "pt", "pr", "ju", "kj", "jl", "obj", "jo", "g", "v", "aj", "jp", "ij", "J", "dj", "n", "fr", "jack", "js", "to", "y", "im", "job", "ge"], "k": ["mk", "unk", "dk", "sk", "kar", "kin", "ke", "ik", "ko", "kn", "kt", "kr", "km", "ok", "ph", "wk", "kh", "kind", "ak", "uk", "ck", "kj", "kid", "kl", "ks", "ka", "kat", "K", "ijk", "kk", "kw", "ark", "kil", "tk", "kg", "isk", "alk", "key", "ek", "ku", "ki"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        StringBuilder bd = new StringBuilder();\\n\\n        int n = sc.nextInt();\\n\\n        int r0 = sc.nextInt();\\n        int r1 = sc.nextInt();\\n\\n        int max = r1 - r0;\\n        int min = Math.min(r0, r1);\\n\\n        for (int i=2; i<n; i++) {\\n            int r = sc.nextInt();\\n            max = Math.max(max, r-min);\\n            min = Math.min(min, r);\\n        }\\n\\n        System.out.println(max);\\n    }\\n}\\n", "target": "208", "substitutes": {"sc": [" Sc", "tch", "system", "cc", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "ec", "ok", "esc", "sync", "Sc", "ctl", "dec", "exp", "ch", "pc", "osc", "isc", "exec", "sys", "ck", "proc", "ner", "mc", "scl", "c", "nc", "si", "sharp", "sci", "parse", "SC", "gc", "ctx", "fc", "sv", "search", "scope", "nl", "scan", "lc", "sp", "asc", "conv", "cgi", "sch", "sec", "usc", "irc", "sq"], "bd": ["BD", " dis", "str", " bu", " RB", " bind", "sb", " db", " kb", "ld", "cb", "gb", "buffer", "bb", "vd", "bm", "db", " DB", " SB", "st", " cd", "mb", " ba", " ed", " sd", "builder", " lb", "SB", "Bs"], "n": ["m", "j", "nn", "net", "number", "ln", "nd", "t", "ne", "mn", "network", "ni", "rn", "en", "p", "c", "gn", "np", "nc", "nor", "N", "nb", "d", "nu", "num", "ns", "nl", "nw", "sn", "na", "x", "cn", "l", "nt"], "r0": ["R00", "dr0", "r00", "RZero", "rt0", "dr2", "r2", "rtZero", " rZero", "rc1", "rc3", " r00", " r2", "rc0", "dr1", "rZero", "R1", "drZero", "R3", "rt00", "R0", " r3", "r3", "rt1", "R2"], "r1": ["rate001", " r001", "R01", "r01", "R001", "r2", "range01", "rc1", " r01", "R7", " r2", "rc0", "range1", "r001", "R11", "R1", "rc2", "range7", "rate0", "rate2", "r7", "r11", " r11", "rate1", "range0", "R0", "rc11", "R2", " r7"], "max": ["out", "h", "patch", "cover", "cl", "rand", "pr", "Max", "w", "res", "scale", "v", "name", "all", "bar", "gt", "m", "age", "right", "result", "ax", "recent", "load", "c", "print", "maximum", "data", "total", "chain", "length", "id", "view", "upper", "sum", "head", "mod", "range", "current", "MAX", "full", "mx", "window", "k", "dec", "diff", "med", "conf", "add", "debug", "na", "default", "rest", "size", "rev", "grow", "master", "ge", "act", "pad", "cat", "z", "mid", "set", "parent", "ext", "ma", "p", "major", "end", "step", "mad", "co", "last", "base", "fr", "mean", "over", "x"], "min": ["rain", "mel", "in", "mins", "sun", "mi", "rand", "down", "un", "mm", "partial", "just", "stat", "del", "rem", "m", "lower", "mind", "temp", "MIN", "only", "next", "sub", "part", "local", "st", "mine", "dist", "div", "lt", "cmp", "minute", "im", "l", "mod", "sam", "inter", "mask", "minimum", "none", "lim", "Min", "rel", "diff", "mn", "med", "start", "pre", "mit", "add", "na", "default", "small", "man", "mr", "sim", "when", "mid", "mis", "sort", "emin", "ne", "first", "minus", "p", "latest", "sin", "left", "step", "shift", "last", "average", "mean", "amin"], "i": ["ii", "phi", "m", "me", "j", "sim", "multi", "sequence", "bi", "it", "q", "z", "ci", "t", "di", "I", "mi", "ie", "gi", "li", "si", "pi", "sql", "iq", "ti", "ex", "g", "v", "a", "my", "io", "zi", "ui", "ms", "ini", "ai", "ic", "us", "iu", "ix", "ind", "id", "ip", "y", "o", "is", "x", "asi", "batch", "qi"], "r": ["range", "rd", "rs", "rate", "m", "ri", "lr", "br", "it", "e", "mr", "f", "cr", "rid", "q", "rc", "dr", "rar", "u", "z", "mid", "re", "pair", "t", "nr", "rand", "attr", "rad", "p", "c", "rb", "sr", "g", "res", "d", "ar", "rt", "gr", "l", "fr", "R", "ry", "x", "err", "rr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String args[]) {\\n\\n        // \u5165\u529b\\n        Scanner sc = new Scanner(System.in);\\n        int x = Integer.parseInt(sc.next());\\n\\n        // \u4e3b\u51e6\u7406\\n        while (!isPrime(x)) {\\n            x += x % 2 == 0 ? 1 : 2;\\n        }\\n\\n        long result = x;\\n\\n        // \u51fa\u529b\\n        System.out.println(result);\\n        sc.close();\\n    }\\n\\n    public static boolean isPrime(long num) {\\n        if (num == 2) {\\n            return true;\\n        } else if (num < 2 || num % 2 == 0) {\\n            return false;\\n        }\\n        double sqrtNum = Math.sqrt(num);\\n        for (long i = 3; i <= sqrtNum; i += 2) {\\n            if (num % i == 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}", "target": "183", "substitutes": {}}
{"code": "/*\\n * To change this license header, choose License Headers in Project Properties.\\n * To change this template file, choose Tools | Templates\\n * and open the template in the editor.\\n */\\n\\n\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\n/**\\n *\\n * @author nai\\n */\\npublic class Main {\\n\\n    /**\\n     * @param args the command line arguments\\n     */\\n    public static void main(String[] args) throws Exception{\\n        // TODO code application logic here\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int C = sc.nextInt();\\n        int X = sc.nextInt();\\n        int cou = 0;\\n        \\n        for(int a = 0 ; a < A + 1 ; a++ ){\\n            for(int b = 0 ; b < B + 1 ; b++ ){\\n                int c = (X - 500 * a - 100 * b) / 50;\\n                if(0 <= c && c <= C){\\n                    cou++;\\n                }\\n            }\\n        }\\n        System.out.println(cou);\\n    }\\n  }\\n    \\n\\n", "target": "127", "substitutes": {}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint firstNumber = scan.nextInt();\\n\t\tint i[] = new int[3];\\n\t\tfor (int k = 0; k < firstNumber; k++) {\\n\t\t\tfor (int j = 0; j < i.length; j++) {\\n\t\t\t\ti[j] = scan.nextInt();\\n\t\t\t}\\n\t\t\tArrays.sort(i);\\n\t\t\tif ((i[2] * i[2]) == (i[1] * i[1]) + (i[0] * i[0])) {\\n\t\t\t\tSystem.out.println(\"YES\");\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(\"NO\");\\n\t\t\t}\\n\t\t}\\n\\n\t}\\n}", "target": "65", "substitutes": {"scan": ["store", "save", "out", "san", "check", "system", "can", "skip", "see", "Scan", "ann", "link", "in", "r", "by", "re", "scroll", "sort", "row", "read", "sync", "black", "connect", "se", " Scan", "ch", "seek", "sign", "sys", "proc", "sc", "reach", "ner", "report", "query", "sur", "send", "gate", "parse", "sql", "an", "gc", "sin", "g", "st", "scale", "get", "sv", "n", "sn", "sp", "na", "ser", "sche", "find"], "firstNumber": ["minuteConfiguration", " firstNumbers", "startNumbers", "firstNumbers", "startnumber", "FirstNumbers", " firstnumber", "FirstConfiguration", "Firstnumber", "minuteNumber", "firstnumber", "startNumber", " firstConfiguration", "minutenumber", "firstConfiguration", "FirstNumber"], "i": ["ii", "phi", "b", "m", "xi", "ri", "multi", "abi", "e", "bi", "it", "f", "ji", "hi", "q", "dr", "yi", "di", "I", "mi", "ie", "info", "bis", "ati", "mu", "li", "list", "p", "ei", "si", "c", "pi", "ti", "v", "io", "ia", "iri", "ij", "ui", "ini", "ai", "ic", "iu", "ix", "id", "ip", "y", "o", "is", "uri", "x", "ori", "oi", "im", "l", "qi"], "k": ["mk", "unk", "m", "ick", "dk", "sk", "UK", "ke", "ik", "ko", "q", "kn", "kt", "kr", "km", "t", "wk", "ikk", "kh", "kind", "ak", "kick", "ck", "uk", "kj", "kid", "ac", "ks", "kl", "ka", "w", "v", "K", "ijk", "kk", "kw", "ark", "n", "tk", "isk", "y", "key", "x", "ek", "ku", "ki"], "j": ["oj", "b", "m", "h", "ja", "br", "it", "jc", "jj", "bo", "ji", "q", "z", "uj", "bj", "ph", "son", "jump", "jit", "ne", "json", "pt", "pr", "kj", "off", "kid", "jl", "obj", "jo", "w", "g", "other", "aj", "jp", "ij", "dj", "J", "sp", "ind", "fr", "js", "y", "key", "im", "err", "job", "ge"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int N = in.nextInt(), flag = -1;\\n        for (int i = 1; i < 10; i++) {\\n            if (N % i == 0 && N / i < 10) flag = 1;\\n        }\\n        System.out.println(flag == 1 ? \"Yes\" : \"No\");\\n        in.close();\\n    }\\n}\\n", "target": "194", "substitutes": {"in": ["serv", "out", "inf", "In", "m", "con", "isin", "init", "doc", "f", "it", "run", "char", " IN", " din", "r", "file", "user", "reader", "window", " out", "read", "IN", "info", "std", "client", "line", "from", "gin", "ner", "null", "en", "ins", "inner", "inn", "inc", "and", "sin", "cin", "io", "input", "all", "bin", "ini", "thin", "scan", "n", "err", "ind", "readable", "id", "din", "is", "sum", "l"], "N": ["NH", "P", "F", "NN", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "G", "NL", "AN", "NS", "I", "D", "NV", "NO", "GN", "NP", "NB", "L", "ND", "V", "TN", "NM", "CN", "NT", "NA", "T", "K", "J", "Q", "n", "U", "M", "R", "C", "Z", "Na", "O"], "flag": ["ask", "store", "bit", "cloud", "mask", "card", "age", " Flag", "f", "command", "cmd", "lag", "success", "bool", "ground", "wait", "set", "ld", "lock", "force", "sign", "land", "quit", "list", "af", "status", "enabled", "something", "style", "debug", "agged", "flags", "state", "bug", "type", "bird", "weight", "lv", "kill", "cond", "id", "leaf", "Flag", "condition", "field", "stage", "FLAG", "tag", "ff"], "i": ["ii", "phi", "m", "b", "xi", "gu", "j", "multi", "sim", "ri", "fi", "it", "bi", "f", "ik", "hi", "q", "u", "ci", "iso", "di", "I", "mi", "ie", "gi", "index", "li", "si", "pi", "iq", "iter", "ti", "d", "v", "io", "my", "cli", "zi", "ui", "ini", "ic", "ai", "us", "\u0438", "iu", "n", "ix", "id", "ip", "y", "o", "is", "x", "im", "l", "qi", "ki"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        new Solver().run();\\n    }\\n}\\n\\nclass Solver {\\n\\n    public void run() {\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n\\n        for (int i = 1; i <= 10000; i++) {\\n            if ((i / 10) == B && (i * 8 / 100) == A) {\\n                System.out.println(i);\\n                return;\\n            }\\n        }\\n\\n        System.out.println(-1);\\n        return;\\n    }\\n\\n}", "target": "121", "substitutes": {"sc": [" Sc", "tch", "cc", "cle", "cr", "tc", "ss", "capt", "cl", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "ch", "pc", "isc", "osc", "enc", "exec", "sys", " scr", "mc", "c", "nc", "scl", "acc", "SC", "gc", "sw", "inc", "sv", "scope", "nl", "lc", "scan", "sp", "asc", "conv", "ctrl", "sec", "sch", "anc", "usc", "syn", "sq"], "A": ["AC", "E", "P", "GA", "LA", "AA", "S", "As", "CA", "Ax", "G", "RA", "AN", "AI", "AB", " a", "L", "SA", "AL", "H", "AE", "AF", "An", "AV", "Av", "a", "HA", "T", "TA", "IA", "AR", "M", "C", "X", "AP"], "B": ["E", "b", "P", "F", "BB", "USB", "CB", "S", "BF", "BA", "G", "I", "D", "AB", "NB", "L", "VB", "V", "EB", "BI", "H", "N", "BL", "IB", "Y", "T", "DB", "J", "Reb", "GB", "LB", "BU", "R", "C", "BE", "BR", "BC"], "i": ["ii", "phi", "m", "b", "xi", "multi", "j", "sim", "ri", "init", "bi", "it", "ji", "hi", "q", "u", "ci", "t", "di", "I", "k", "mi", "info", "gi", "index", "client", "li", "p", "ei", "si", "print", "pi", "ti", "v", "cli", "iri", "zi", "ui", "ms", "ini", "ai", "ic", "us", "l", "iu", "n", "ix", "ind", "id", "to", "ip", "y", "conv", "is", "uri", "x", "im", "oi", "batch", "qi", "ki"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint r = sc.nextInt();\\n\\n\t\tSystem.out.println(Math.PI * 2 * r);\\n\t}\\n\\n}\\n", "target": "167", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "rc", "pb", "cl", "sb", "cv", "bc", "cs", "desc", "esc", "Sc", "se", "ch", "osc", "pc", "isc", "uc", "sys", "spec", "mc", "scl", "c", "nc", "sh", "acc", "SC", "gc", "sv", "nl", "dc", "lc", "scan", "sp", "sel", "asc", "conv", "sch", "sec", "sq", "tk"], "r": ["range", "rd", "rs", "m", "h", "i", "e", "mr", "f", "q", "rc", "dr", "u", "right", "re", "kr", "t", "nr", "k", "rand", "attr", "result", "er", "rn", "p", "c", "rh", "rb", "sr", "w", "d", "v", "rank", "ar", "rt", "rf", "n", "fr", "R", "l", "rr"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        String N = sc.next();\\n\\n        //\u6587\u5b57\u5217\\n        String strN = N;\\n\\n        char[] NChar = new char[strN.length()];\\n        for(int i = 0; i<strN.length(); i++){\\n            NChar[i] = strN.charAt(i);\\n            //System.out.println(NChar[i]);\\n        }\\n\\n        int[] Nint = new int[strN.length()];\\n        for(int j = 0; j<strN.length(); j++){\\n            Nint[j] = Character.getNumericValue(NChar[j]);\\n            //Nint[j] = NChar[j];\\n            //System.out.println(Nint[j]);\\n        }\\n\\n\\n        //\u3053\u3053\u304b\u3089\u8a08\u7b97\\n        int sum = 0;\\n        //System.out.println(Nint.length);\\n        for(int k = 0;k<Nint.length; k++){\\n            sum += Nint[k];\\n        }\\n\\n        if(sum % 9 == 0){\\n            System.out.println(\"Yes\");\\n        }\\n        else{\\n            System.out.println(\"No\");\\n        }\\n\\n        \\n    }\\n}", "target": "93", "substitutes": {"sc": ["system", "cc", "cle", "cr", "ss", "capt", "rc", "cam", "cl", "bc", "cs", "sm", "sac", "ec", "esc", "desc", "Sc", "ch", "pc", "osc", "isc", "soc", "sys", "mc", "scl", "c", "nc", "SC", "gc", "sw", "sche", "sv", "scan", "lc", "sp", "asc", "sch", "sec", "anc", "usc", "sq"], "N": ["P", " nu", "NN", "ID", "Ns", "nn", "S", "NR", "SN", "NL", "NS", " C", "D", "A", "L", "V", "Name", "nu", "name", "J", " S", "sn", "n", " n", "M", "C", "Z", "X"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author HussienMoustafa\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BDistanceEditorial solver = new BDistanceEditorial();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BDistanceEditorial {\\n        public void solve(int testNumber, Scanner s, PrintWriter out) {\\n            int n = s.nextInt(), cnt = 0;\\n            double d = s.nextInt();\\n            while (n-- != 0) {\\n                double x = s.nextInt(), y = s.nextInt();\\n                if (Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)) <= d) {\\n                    cnt++;\\n                }\\n\\n            }\\n            out.println(cnt);\\n        }\\n\\n    }\\n\\n    static class Scanner {\\n        StringTokenizer st;\\n        BufferedReader br;\\n\\n        public Scanner(InputStream s) {\\n            br = new BufferedReader(new InputStreamReader(s));\\n        }\\n\\n        public String next() {\\n            while (st == null || !st.hasMoreTokens()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "42", "substitutes": {"inputStream": [" inputPage", "helloSocket", "inputSource", "inputSocket", "InputSteam", "helloPage", "InputSource", " inputSocket", "inputPage", "inPage", "InputStream", "currentSteam", "outputSteam", "inputstream", "inputSteam", " inputSteam", "currentSource", "inStream", "Inputstream", "helloSteam", "currentStream", "outputSource", "outputstream", "inSocket", "helloStream", "currentstream", "inSteam"], "outputStream": [" outputPort", "connectionstream", "errorStream", "displayStream", "outputWriter", "connectionPoint", "connectionStream", "inputPoint", "writeStream", "errorWriter", "displayPort", "errorPort", " outputSteam", "outputSteam", "inputstream", "inputSteam", "connectionSteam", "writestream", "displaySteam", "writeSteam", "writePoint", "displayWriter", "errorSteam", "outputPoint", "outputstream", "outputPort", " outputWriter"], "in": ["current", "In", "inf", "m", "con", "isin", "sol", "context", "i", "it", "doc", "str", "init", "run", "r", "file", "rin", "reader", "read", "IN", "info", "up", "log", "gin", "null", "c", "ins", "inner", "inside", "inn", "iter", "get", "cin", "sin", "w", "output", "io", "input", "bin", "ini", "or", "stream", "l", "scan", "ind", "din", "conv", "o", "is", "source", "err", "rt"], "out": ["b", "j", "tmp", "aos", "it", "e", "cache", "net", "OUT", "user", "temp", "t", "set", "at", "pool", "ou", "outs", "os", "outer", "this", "ch", "up", "result", "client", "sys", "Out", "log", "report", "null", "p", "c", "print", "inner", "ex", "write", "gc", "w", "res", "g", "end", "io", "output", "name", "v", "all", "or", "co", "gr", "l", "table", "to", "flush", "o", "writer", "sum", "err", "rt", "stable", "OU", "nt"], "solver": [" sol", " solution", "gsol", "sol", "resorter", "sorter", "resolution", "esorter", "esumer", "esolution", "gsearcher", " sumer", " searcher", "solution", "ssearcher", "resolver", "ssolution", "searcher", "sumer", "ssol", "gsolver", "ssolver", "esolver", "resumer", " sorter", "gsolution"], "testNumber": ["caseNo", "TestNo", "TestCount", "testParameter", " testNo", "caseParameter", "caseNumber", " testParameter", " testCount", "testCount", "testNo", "TestParameter", "caseCount", "TestNumber"], "s": ["sam", "rs", "sports", "h", "http", "b", "ers", "its", "ats", "sa", "i", "ies", "xs", "fs", "fps", "ss", "les", " inputs", "ims", "S", "sb", "by", "gets", "abs", "files", "scripts", "bs", "cs", "sm", "t", "socket", "os", "ops", "qs", "sys", "eds", "gs", "p", "ins", "sw", "ys", "ssl", " streams", "less", "a", "ings", "ms", "ws", "ns", "times", "ids", "south", "sts", "ds", "ps", "stats", "als", "js", "services", "conv", "ts", "ses", "ls", "is", "es", "sq"], "n": ["m", "j", "nan", "i", "nn", "ren", "net", "none", "z", "ln", "t", "k", "ne", "mn", "len", "p", "nc", "c", "en", "nor", "remote", "N", "note", "count", "nb", "w", "no", "name", "v", "ns", "num", "un", "nl", "nw", "sn", "na", "non", "cn", "nt"], "cnt": ["nct", "cpt", "cnc", "Cpt", "cst", " cst", "ucnc", "cct", "cNT", "Cnc", "nnd", "conNT", "npt", " cnc", "nnt", "connd", "Cnt", " ccount", "connt", "nst", " cpt", "CNT", "ucnt", "conct", "ccount", "ucNT", "cnd", " cNT", "Cst", "Ccount", "nNT", " cct", " cnd", "uccount"], "d": ["b", "fd", "m", "j", "e", "f", "dm", "da", "mind", "gd", "z", "nd", "t", "dra", "D", "cd", "dd", "dt", "bd", "p", "c", "db", "w", "g", "v", "dim", "pd", "ds", "dl", "sd", "dh", "del", "l", "dL"], "x": ["xi", "rx", "xp", "xe", "axy", "i", "e", "xs", "dx", "ox", "z", "mx", "xxx", "tx", "lat", "xml", "ux", "xy", "ax", "c", "ex", "w", "lex", "yx", "xxxx", "xf", "xt", "xx", "ix", "xc", "px", "fx", "X", "wx"], "y": ["ty", "uy", "fy", "j", "ny", "axy", "ies", "ye", "ya", "yd", "z", "yt", "yi", "iy", "iley", "py", "vy", "sky", "hey", "xy", "ym", "yl", "ay", "yout", "gy", "ys", "my", "Y", "ey", "cy", "yy", "sy", "yr", "ry", "ly", "yz"], "st": ["h", "ost", "ct", "tmp", "lo", "str", "cr", "ft", "dr", "r", "z", "cl", "be", "nd", "sb", "inst", "sm", "t", "ast", "sty", "se", "ch", "ST", "stack", "pt", " ut", "std", "start", "est", "ist", "sh", "sw", "mt", "St", "ust", "sv", "step", " St", "const", "l", " superst", "bt", " est", "sts", "sn", "tr", "sp", "et", "fr", "xt", "rest", "stage", "stat", "ste", "rt", "stable", "ut", "nt"], "br": ["bridge", "b", "lr", "Br", "bsp", "bl", "shr", "cr", "dr", "r", "sb", "bern", "ger", "kr", "bs", "bc", "buf", "rob", "bra", "pr", "ba", "bm", "hr", "ptr", "rb", "sr", "bro", "bp", "bre", "gr", "vr", "bt", "tr", "sp", "fr", "bh", "ber", "wr", "browser", "nr", "mr", "BR"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\nimport java.math.BigInteger;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t// \u5165\u529b\\n\t\tint n = sc.nextInt();\\n\t\t\\n\t\t// \u8a08\u7b97\\n\t\tint result = n/2;\\n\t\tif(n%2 == 1) result++;\\n\t\t\\n\t\t\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(result);\\n\t}\\n}\\n", "target": "233", "substitutes": {"sc": [" Sc", "sk", "sa", " ser", "Scan", "ss", "rc", "sb", "cs", " rc", "Sc", "ch", "sys", " SC", " scr", " sn", "SC", " enc", " cons", " sk", " sh", "scan", " sp", "n", "ser", " unsc", "sch", " scorer"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n  public static void main(String[] args) {\\n    \\n      Scanner sc = new Scanner(System.in);\\n      \\n      int n = sc.nextInt();\\n      \\n      int x1,x2,x3;\\n      \\n      for(int i = 1; i <= n; i++){\\n          x1 = i / 10;\\n          x2 = i / 100;\\n          x3 = i / 1000;\\n     \\n        if(i % 3 == 0 || i % 10 == 3 || x1 % 10 == 3 || x2 % 10 == 3 || x3 % 10 == 3){\\n        \t\\n          System.out.print( \" \" + i );\\n          \\n        }\\n      }\\n\tSystem.out.println();\\n  }\\n}", "target": "154", "substitutes": {"sc": ["ng", "out", "system", "cc", "Scan", "tc", "ss", "cr", "rc", "pb", "cl", "sb", "bc", "cs", "ec", "ok", "set", "esc", "Sc", "se", "ch", "pc", "osc", "isc", "uc", "sys", "ner", "mc", "c", "nc", "SC", "gc", "src", "sv", "nl", "lc", "scan", "sp", "asc", "sch", "usc", "syn", "sq"], "n": ["ng", "m", "j", "nan", "nn", "net", "z", "ln", "t", "k", "ne", "mn", "network", "ni", "nm", "p", "nc", "np", "nor", "c", "N", "and", "nb", "g", "v", "nu", "no", "ns", "num", "nl", "nw", "sn", "na", "cn", "l", "nt"], "x1": ["lex1", " x91", "rxONE", "ox2", "ox0", "xONE", "x01", "wx91", "X1", "X2", " x01", "wx01", "ox91", "ix1", "rx1", "ix61", "X0", "x0", "lex0", "rx61", "wx2", " x001", "x61", "ox61", "oxONE", "ix0", "ixONE", "rx0", "wx1", " x0", "lex2", "lex001", "X001", "ox1", "x001", "ox01", "x91"], "x2": ["xSecond", " x02", " xTwo", "ix2", " xtwo", "rx2", "ixTwo", "xx2", "wx02", "xxtwo", "rxTwo", " xSecond", "ixSecond", "xTwo", "ex2", "extwo", "wx2", "xtwo", "ix02", "xx02", "ex02", "wxTwo", "x02", "rx02", "wxSecond"], "x3": ["xx1", "x8", "X3", "xi03", "x35", "wx8", "wx3", "xi1", "X1", "X33", "ix1", "ox33", "rx1", "ix3", "xx5", "rx8", "rx3", "tx03", "ox35", "xi3", "x33", "xx8", "x5", "ix33", "wx5", "txthree", "xithree", "tx3", "wx1", " xthree", "rx5", "ix35", "x03", "tx1", "xthree", "xx3", "ox3", "ox1", "X35", " x03"], "i": ["ii", "phi", "b", "m", "xi", "me", "j", "multi", "sim", "ri", "init", "bi", "sequence", "it", "ji", "hi", "e", "q", "number", "f", "u", "ci", "t", "di", "I", "mi", "info", "gi", "index", "li", "p", "point", "si", "status", "pi", "iq", "ti", "g", "d", "v", "io", "cli", "iri", "ij", "zi", "ui", "ini", "ic", "ai", "us", "iu", "ix", "ind", "id", "ip", "conv", "o", "is", "x", "im", "oi", "l", "qi", "ki"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\t\tScanner sc = new Scanner(System.in);\\n\t\t\tint n = sc.nextInt();\\n\t\t\tint m = sc.nextInt();\\n\t\t\tint []a = new int [100*n+m];\\n\t\t\t\\n\t\t\tfor(int b=0;b<n;b++){\\n\t\t\t\tfor(int c=0;c<m;c++){\\n\t\t\t\t\ta[100*b+c] = sc.nextInt();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t\\n\t\t\tint []b = new int[m];\\n\t\t\tfor(int c=0;c<m;c++){\\n\t\t\t\tb[c] = sc.nextInt();\\n\t\t\t}\\n\t\t\t\\n\t\t\t\\n\t\t\tfor(int d=0;d<n;d++){\\n\t\t\t\tint x=0;\\n\t\t\t\tfor(int c=0;c<m;c++){\\n\t\t\t\t\tx=x+a[100*d+c]*b[c];\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(x);\\n\t\t\t}\\n\t}\\n}", "target": "185", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n    \tScanner sc = new Scanner(System.in);\\n      int k = sc.nextInt();\\n      int s = sc.nextInt();\\n      int count = 0;\\n      int z = 0;\\n      for(int i = 0;i <= k && i <= s;i++){\\n      \tfor(int j = 0;j <= k && j <= s-i;j++){\\n        \tz = s-i-j;\\n          if(z >= 0&&z <= k)count++;\\n        }\\n      }\\n      System.out.println(count);\\n    }\\n}\\n", "target": "29", "substitutes": {"sc": [" Sc", "cc", "cle", "cr", "tc", "ss", "capt", "rc", "cl", "sb", "bc", "cs", "cont", "esc", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "c", "nc", "SC", "gc", "sw", "inc", "ctx", "sv", "dc", "lc", "scan", "sp", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "k": ["mk", "m", "dk", "sk", "kar", "ke", "ik", "ko", "kn", "q", "u", "kt", "kr", "km", "ok", "ikk", "kh", "ak", "kick", "ck", "kj", "kid", "ks", "kl", "ka", "c", "ack", "g", "v", "K", "kk", "kw", "n", "tk", "kok", "ek", "ku", "ki"], "s": ["rs", "b", "m", "its", "ats", "e", "fs", "f", "ss", "q", "ims", "S", "abs", "r", "units", "cs", "t", "os", "qs", "sym", "gs", "p", "si", "c", "ols", "w", "g", "v", "a", "sv", "ms", "times", "ns", "us", "ids", "south", "n", "ps", "js", "ts", "ls", "is", "es", "l", "sq"], "count": ["current", "check", "ct", "flag", "ount", "test", "cc", "number", "ctr", "scroll", "cd", "cont", "result", "counter", "index", "zero", "list", "report", "acc", "c", "amount", "code", "status", "nz", "score", "iq", "summary", "nb", "total", "num", "state", "const", "length", "n", "Count", "ind", "now", "cond", "stats", "frequency", "call", "size", "sum", "find", "found", "nt"], "z": ["out", "h", "iaz", "uz", "q", "ez", "gz", "window", "t", "set", " Z", "ld", "tz", "slot", "exp", "zh", "ch", "zero", "cz", "iz", "hz", "c", "acc", "sh", "oz", "nz", "ot", "zz", "zone", "d", "v", "zi", "step", "dj", "az", "ze", "zip", "n", "zer", "sd", "y", "x", "zo", "Z", "size", "l", "yz", "nt"], "i": ["ii", "aci", "phi", "m", "xi", "sim", "multi", "ri", "fi", "init", "bi", "ji", "it", "ik", "hi", "f", "u", "ci", "iii", "di", "I", "mi", "ie", "gi", "ni", "li", "si", "pi", "iq", "ti", "iter", "ite", "v", "ar", "ij", "zi", "ui", "ini", "ai", "ic", "ish", "iu", " I", "ix", "ip", "is", "x", "im", "ret", "l", "ami", "qi", "ki"], "j": ["oj", "b", "out", "m", "ja", "br", "it", "ji", "jj", "bi", "bo", "f", "q", "uj", "bj", "bs", "el", "jump", "son", "jit", "ne", "json", "je", "pt", "pr", "ju", "kj", "ax", "li", "p", "note", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "dj", "J", "jas", "us", "l", "n", "ix", "js", "y", "x", "im", "ion", "err", "job", "ge"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayDeque;\\nimport java.util.Deque;\\nimport java.util.StringTokenizer;\\n\\nimport static java.lang.Integer.decode;\\nimport static java.lang.Integer.parseInt;\\n\\n/**\\n * Elementary data structures - Stack\\n */\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tDeque<Integer> stack = new ArrayDeque<Integer>();\\n\\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\\n\t\twhile (st.hasMoreTokens()) {\\n\t\t\tString str = st.nextToken();\\n\t\t\tint a, b;\\n\t\t\tswitch (str.charAt(0)) {\\n\t\t\t\tcase '+':\\n\t\t\t\t\tb = stack.pop();\\n\t\t\t\t\ta = stack.pop();\\n\t\t\t\t\tstack.push(a + b);\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '-':\\n\t\t\t\t\tb = stack.pop();\\n\t\t\t\t\ta = stack.pop();\\n\t\t\t\t\tstack.push(a - b);\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '*':\\n\t\t\t\t\tb = stack.pop();\\n\t\t\t\t\ta = stack.pop();\\n\t\t\t\t\tstack.push(a * b);\\n\t\t\t\t\tbreak;\\n\t\t\t\tdefault:\\n\t\t\t\t\tstack.push(parseInt(str));\\n\t\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(stack.pop());\\n\t} //end main\\n}", "target": "114", "substitutes": {"br": ["bridge", "lr", "Br", "bsp", "bl", "shr", "bi", "cr", "bf", "dr", "sb", "kr", "buf", "gb", "ch", "pr", "bb", "ro", "bm", "hr", "rb", "bro", "bp", "gr", "vr", "bt", "yr", "div", "tr", "fr", "bh", "bn", "ber", "wr", "mr", "BR"], "stack": ["pins", "pop", "wait", "frames", "history", "function", "list", "level", "obj", "trace", "summary", "ack", "scale", "make", "scope", "stream", "stats", "hex", "expr", "stage", "queue", "bo", "where", "top", "ops", "buffer", "load", "data", "ctx", "cli", "total", "acks", "names", "params", "chain", "view", "fail", "upper", "func", "hash", "push", "graph", "store", "tmp", "context", "window", "pool", "exp", "info", "pod", "proc", "usr", "spec", "code", "via", "var", "shape", "pack", "flush", "collection", "pres", "frac", "check", "cache", "track", "mount", "fake", "runtime", "thread", "height", "Stack", "loop", "storage", "slice", "style", "buff", "state", "base", "tree", "workers", "conv", "batch", "reported"], "st": ["ost", "sta", "ct", "spe", "ft", "cl", "nd", "sm", "t", "set", "sty", "se", "ST", "pt", "std", "sc", "est", "ist", "sw", "St", "mt", "ust", "sv", "td", "sl", "ze", "ess", "sy", "sn", "sts", "et", "tr", "sp", "ts", "rest", "tt", "stat", "ste", "rt", "stable", "ut", "nt"], "str": ["msg", "string", "s", "STR", "char", "bl", "url", "doc", "dr", "r", "arr", "Str", "re", "desc", "cs", "t", "coll", "star", "enc", "pr", "cur", "usr", "spec", "vol", "part", "oct", "stri", "obj", "comm", "sw", "txt", "res", "v", "sl", "chain", "gr", "div", "n", "tr", "sp", "piece", "fr", "hex", "expr", "conv", "syn", "comp"], "a": ["act", "aaa", "m", "sta", "la", "apa", "oa", "sa", "i", "aq", "f", "da", "sha", "am", "ed", "era", "wa", "at", "A", "au", "area", "ab", "ca", "qa", "ma", "ac", "p", "acc", "ba", "ao", "ea", "aka", "xa", "an", "w", "aa", "d", "ia", "v", "aj", "ar", "add", "ga", "as", "ai", "aux", "alpha", "pa", "na", "to", "va", "l", "ae", "fa"], "b": ["B", "h", "eb", "ob", "j", "bo", "i", "bl", "bi", "it", "f", "pb", "q", "bool", "r", "be", "sb", "BA", "fb", "by", "body", "bs", "bc", "z", "t", "lib", "blue", "ab", "cb", "ib", "gb", "bis", "beta", "bb", "ba", "db", "rb", "nb", "g", "bp", "v", "d", "mb", "batch", "bar", "bh", "bound", "y", "l", "wb", "erb"]}}
{"code": "import java.io.*;\\n\\nclass Main {\\n    public static void main (String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringBuilder cards = new StringBuilder();\\n        int count;\\n        int i;\\n        int h;\\n        while (!cards.append(br.readLine()).toString().equals(\"-\")) {\\n            count = Integer.parseInt(br.readLine());\\n            for (i = 0; i < count; i++) {\\n                h = Integer.parseInt(br.readLine());\\n                String subStr = cards.substring(0, h);\\n                cards.delete(0, h);\\n                cards.append(subStr);\\n            }\\n            System.out.println(cards);\\n            cards.delete(0, cards.length());\\n        }\\n    }\\n}", "target": "216", "substitutes": {"br": ["bridge", "b", "j", "lr", "Br", "shr", "bl", "str", "cr", "bf", "dr", "r", "sb", "kr", "bs", "buf", "rel", "cb", "gb", "ch", "pt", "Fr", "repl", "pr", "bg", "bb", "bd", "hr", "ptr", "db", "obj", "rb", "roller", "bro", "bp", "jp", "gr", "bt", "tr", "err", "sp", "fr", "bh", "ber", "js", "wr", "browser", "nr", "mr", "BR"], "cards": ["posts", "letters", "checks", "caps", "pins", "changes", "bees", "multi", "csv", "dds", "card", "tags", "sticks", "words", "comments", "files", "lights", "ims", "ards", "phones", "clips", "cats", "terms", "lists", "outs", "hands", "blocks", "cuts", "series", "lands", "bits", "Card", "pieces", "holders", "cf", "windows", "offs", "gs", "anks", "ends", "lines", "shape", "fields", "strings", "groups", "cells", "cases", "flags", "times", "balls", "boxes", "guards", "orders", "quarters", "days", "prints", "tracks", "ps", "cars", "services", "users", "styles", "ips", "ics", "ls", "images", "amps", "codes", "units", "olds", "games", "weights", "actions"], "count": ["act", "range", "check", "ct", "ount", "f", "cache", "r", "ctr", "hold", "cd", "cont", "empty", "th", "force", "limit", "counter", "index", "log", "list", "len", "c", "code", "match", "amount", "nb", "d", "total", "all", "num", "type", "length", "base", "n", "div", "Count", "ind", "cond", "now", "max", "size", "sum", "l", "find", "found", "nt"], "i": ["ii", "phi", "m", "xi", "me", "gu", "j", "multi", "sim", "fi", "P", "it", "init", "bi", "f", "q", "in", "u", "ci", "di", "I", "mi", "ie", "gi", "index", "li", "p", "ei", "c", "si", "pi", "iter", "ti", "v", "zi", "ui", "ini", "ai", "ish", "n", "ix", "ind", "M", "ip", "y", "is", "x", "im", "l", "qi"], "h": ["hs", "phi", "m", "j", "f", "uh", "hi", "z", "hold", "oh", "hm", "ph", "history", "k", "hd", "th", "hu", "kh", "ah", "height", "ch", "zh", "he", "depth", "hz", "sh", "H", "c", "hr", "rh", "ih", "w", "ht", "v", "d", "hl", "handle", "bh", "y", "hex", "o", "ho", "max", "hid", "l"], "subStr": ["invSt", "subWr", "newstr", "newStr", " subString", "Substr", "SubStr", " subSt", "newSt", "invWr", " substr", "SubSt", "SubString", "invString", "newString", "SubWr", " subWr", "substr", "subString", "invStr", "subSt"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main{\\n\tstatic final int MOD=998244353;\\n\tpublic static void main(String[] args) throws IOException{\\n\t\tBufferedReader in= new BufferedReader(new InputStreamReader(System.in));\\n\t\tPrintWriter out= new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\\n\t\t\\n\t\tString s=in.readLine();\\n\t\tif(s.charAt(2)==s.charAt(3)&&s.charAt(4)==s.charAt(5))\\n\t\t\tout.append(\"Yes\\n\");\\n\t\telse\\n\t\t\tout.append(\"No\\n\");\\n\t\t\\n\t\tout.flush();\\n\t\tin.close();\\n\t\tout.close();\\n\t}\\n}     \\n", "target": "30", "substitutes": {"MOD": [" stamp", " MIN", "ID", " MAX", " LOG", " DUP", " mod", " CL", " reg", " C", " ID", " M", " INT", " PUBLIC", " RM", " O", " DEBUG", " CRC", " BASE", " U", " minor", " GEN", " J", " SR", " CP", "UID", " PROT", " NUM", " PID"], "in": ["inf", "In", "con", "isin", "i", "it", "str", "init", "run", "r", "by", "form", "rin", "ill", "reader", "t", "read", "IN", "up", "on", "from", "gin", "null", "en", "inner", "inside", "ins", "conf", "inn", "iter", "inc", "get", "cin", "and", "local", "io", "ad", "ar", "input", "all", "bin", "ini", "ic", "ai", "n", "ind", "ry", "din", "rest", "is", "err", "rt"], "out": ["check", "con", "can", "aos", "it", "cache", "cmd", "net", "put", "r", "OUT", "file", "full", "set", "t", "at", "pool", "ou", "outs", "os", "outer", "on", "exec", "pretty", "up", "conn", "client", "sys", "Out", "log", "list", "report", "help", "en", "null", "print", "obj", "ex", "write", "txt", "w", "res", "d", "end", "output", "io", "v", "OU", "all", "co", "n", "to", "flush", "conv", "o", "writer", "one", "sum", "err", "gt", "nt"], "s": ["simple", "hs", "rs", "m", "b", "h", "msg", "string", "its", "ats", "i", "str", "ss", "r", "S", "sb", "gets", "abs", "bs", "t", "sw", "qs", "spec", "p", "gs", "c", "query", "obj", "comm", "sql", "txt", "w", "g", "res", "v", "src", "less", "st", "sv", "ws", "ns", "state", "n", "sts", "err", "ds", "ps", "js", "conv", "ts", "ls", "is", "source", "l", "sq", "sample"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t// practice contest\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\tint a = 0;\\n\t\tif (s.charAt(0) == (t.charAt(0))) {\\n\t\t\ta += 1;\\n\t\t}\\n\t\tif (s.charAt(1) == (t.charAt(1))) {\\n\t\t\ta += 1;\\n\t\t}\\n\t\tif (s.charAt(2) == (t.charAt(2))) {\\n\t\t\ta += 1;\\n\t\t}\\n\t\tSystem.out.println(a);\\n\t}\\n}\\n", "target": "243", "substitutes": {}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int[] A = new int[N+1];\t// i\u753a\u306e\u6575\u306e\u6570\\n    int[] B = new int[N];\t// \u5404\u52c7\u8005\u306e\u5012\u305b\u308b\u6575\u306e\u6570\\n    \\n    for(int i=0; i<N+1; i++){\\n      A[i] = sc.nextInt();\\n    }\\n    for(int i=0; i<N; i++){\\n      B[i] = sc.nextInt();\\n    }\\n\\n    long cnt = 0;\\n    for(int i=0; i<N; i++){\\n      int rem1 = A[i] - B[i];\\n      if (B[i] > A[i]){\\n        cnt += A[i];\\n        B[i] -= A[i];\\n        int rem2 = A[i+1] - B[i];\\n        if (B[i] > A[i+1]){\\n          cnt += A[i+1];\\n          A[i+1] = 0;\\n        } else {\\n          cnt += B[i];\\n          A[i+1] = rem2;\\n        }\\n      } else {\\n      \tcnt += B[i];\\n      }\\n    }\\n    \\n    System.out.print(cnt);\\n    sc.close();\\n\t\t\\n  }\\n}", "target": "159", "substitutes": {"sc": ["system", "cc", "cr", "ss", "rc", "cl", "bc", "cs", "sm", "ec", "row", "esc", "desc", "ok", "dec", "Sc", "sync", "ch", "pc", "osc", "isc", "uc", "sys", "spec", "mc", "scl", "c", "nc", "acc", "SC", "gc", "sv", "nl", "scan", "lc", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "sq", "tk"], "N": ["B", "NH", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NS", "GN", "I", "D", "CNN", "NP", "NC", "NB", "L", "ND", "V", "TN", "NM", "CN", "NT", "NA", "K", "J", "FN", "n", "M", "R", "C", "X"], "A": ["B", "E", "P", "AA", "S", "CA", "BA", "G", "mA", "I", "D", "AB", "L", "SA", "V", "a", "Y", "T", "Ar", "aux", "Array", "alpha", "Args", "M", "R", "C", "X"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    private static Scanner sc=new Scanner(System.in);\\n    public static void main(String[] args){\\n        int n=sc.nextInt();\\n        int[] a=new int[n];\\n        int notprime=0;\\n        for(int i=0;i<n;i++){\\n            a[i]=sc.nextInt();\\n            for(int j=2;j<=Math.sqrt(a[i]);j++){\\n                if(a[i]%j==0){\\n                    notprime++;\\n                    break;\\n                }\\n            }\\n        }\\n        System.out.println(n-notprime);\\n    }\\n}", "target": "226", "substitutes": {"sc": ["ng", "system", "cc", "tc", "ss", "cr", "rc", "pb", "sb", "cl", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "psc", "mc", " scr", "c", "nc", "scl", "sci", "SC", "gc", "fc", "ctx", "st", "sv", "co", "nl", "dc", "lc", "scan", "sp", "na", "asc", "sch", "anc", "sec", "usc", "sq"], "n": ["ng", "m", "norm", "nan", "nn", "net", "number", "z", "ln", "t", "k", "ne", "mn", "network", "on", "ni", "nm", "en", "p", "nc", "gn", "np", "ot", "len", "N", "c", "nb", "g", "d", "no", "nu", "total", "v", "name", " N", "num", "ns", "un", "nl", "length", "sn", "na", "o", "x", "size", "cn", "l", "nt"], "a": ["aaa", "act", "b", "sta", "apa", "la", "oa", "sa", "da", "am", "at", "A", "au", "history", "area", "att", "ab", "ca", "ma", "app", "ac", "ba", "ao", "ea", "ta", "an", "array", "aa", "ack", "ia", "ar", "auto", "ata", "ga", "as", "aux", "alpha", "na", "val", "va", "o", "ae", "fa"], "notprime": ["Notprime", "Nottmp", "nonzero", "ottmp", " notPrime", "NOTimes", "nonimes", "nottmp", "otPrime", "NOTprime", " notimes", " notzero", "notimes", "nonprime", "Notzero", "NOTzero", "nonPrime", "notPrime", "otprime", "NOTPrime", " nottmp", "NotPrime", "notzero"], "i": ["ii", "phi", "m", "xi", "me", "multi", "sim", "ri", "fi", "init", "sequence", "it", "bi", "ik", "hi", "ci", "di", "I", "mi", "this", "ie", "gi", "ir", "li", "ei", "si", "print", "inner", "pi", "ex", "iq", "iter", "ti", "v", "io", "iri", "ij", "zi", "ui", "cli", "ini", "ai", "ic", "us", "chain", "l", "ish", "iu", "ind", "ix", "id", "ip", "o", "is", "uri", "x", "im", "ori", "batch", "ami", "qi", "ki"], "j": ["oj", "b", "m", "axy", "br", "ja", "ji", "jj", "jc", "bo", "bi", "q", "z", "uj", "bj", "bs", "k", "son", "jit", "ie", "kh", "json", "meg", "prime", "pr", "beta", "kj", "off", "ots", "kid", "jl", "obj", "jo", "g", "bot", "other", "v", "aj", "jp", "ij", " J", "J", "dj", "jas", "div", "ge", " dj", "js", "y", "jam", "key", "x", "im"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\tint n = in.nextInt();\\n\t\tint arr[] = new int[n];\\n\t\tint max = Integer.MIN_VALUE, maxId = 0, min = Integer.MAX_VALUE, minId = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tarr[i] = in.nextInt();\\n\t\t\tif (arr[i] < min) {\\n\t\t\t\tmin = arr[i];\\n\t\t\t\tminId = i;\\n\t\t\t}\\n\t\t\tif (arr[i] > max) {\\n\t\t\t\tmax = arr[i];\\n\t\t\t\tmaxId = i;\\n\t\t\t}\\n\t\t}\\n\t\tboolean f = false, m = false;\\n\t\tif (minId == 0 && maxId == n - 1) {\\n\t\t\tfor (int i = 0; i < n - 1; i++) {\\n\t\t\t\tfor (int j = 1; j < n; j++) {\\n\t\t\t\t\tm = false;\\n\t\t\t\t\tif (arr[i] > arr[j]) {\\n\t\t\t\t\t\tint t = arr[i];\\n\t\t\t\t\t\tarr[i] = arr[j];\\n\t\t\t\t\t\tarr[j] = t;\\n\t\t\t\t\t\tm = true;\\n\t\t\t\t\t}\\n\t\t\t\t\t// check\\n\t\t\t\t\tf = check(arr);\\n\t\t\t\t\tif (f)\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\tif (m) {\\n\t\t\t\t\t\tint t = arr[i];\\n\t\t\t\t\t\tarr[i] = arr[j];\\n\t\t\t\t\t\tarr[j] = t;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\tif (f)\\n\t\t\t\t\tbreak;\\n\t\t\t}\\n\t\t} else if (min != 0 && maxId == n - 1) {\\n\t\t\tint t = arr[minId];\\n\t\t\tarr[minId] = arr[0];\\n\t\t\tarr[0] = t;\\n\t\t\tf = check(arr);\\n\t\t} else if (minId == 0 && maxId != n - 1) {\\n\t\t\tint t = arr[maxId];\\n\t\t\tarr[maxId] = arr[n - 1];\\n\t\t\tarr[n - 1] = t;\\n\t\t\tf = check(arr);\\n\t\t} else {\\n\t\t\tint t = arr[maxId];\\n\t\t\tarr[maxId] = arr[minId];\\n\t\t\tarr[minId] = t;\\n\t\t\tf = check(arr);\\n\t\t}\\n\\n\t\tif (f)\\n\t\t\tSystem.out.println(\"YES\");\\n\t\telse\\n\t\t\tSystem.out.println(\"NO\");\\n\t\tin.close();\\n\t}\\n\\n\tpublic static boolean check(int arr[]) {\\n\t\tint n = arr.length;\\n\t\tint order[] = new int[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\torder[i] = arr[i];\\n\t\tArrays.sort(order);\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tif (arr[i] != order[i])\\n\t\t\t\treturn false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}\\n", "target": "82", "substitutes": {"in": ["serv", "out", "inf", "In", "con", "isin", "s", "str", "f", "doc", "asin", " din", " IN", "r", "file", "ln", "user", "by", "rin", "reader", "vin", "read", "IN", "info", "std", "on", "from", "line", "gin", "en", "ins", "inner", "conf", "inn", "inc", "sin", "cin", "get", "io", "add", "input", "all", "bin", "ini", "thin", "stream", "scan", "nin", "ind", "readable", "mm", "din", "conv", "is", "sum", "err", "arg"], "n": ["ng", "m", "norm", "nan", "nn", "number", "net", "fn", "r", "z", "ln", "q", "ne", "mn", "network", "ni", "nm", "en", "len", "np", "nc", "p", "c", "nor", "N", "note", "count", "an", "comm", "nb", "w", "d", "v", "no", "name", "nu", "names", " N", "ns", "num", "un", "nl", "sn", "na", "o", "x", "size", "cn", "l", "nt"], "arr": ["arb", "br", "ev", "bl", "rep", "addr", "dr", "r", "vals", "coll", "good", "att", "attr", "alg", "pr", "cur", "list", "obj", "db", "iq", "aa", "res", "ar", "ij", "arm", "bar", "ix", "expr", "pp", "rr", " narr", " str", "par", "ary", "parts", "pl", "ag", "ig", "load", "print", "align", "compl", "data", "deg", "are", "Ar", "ARR", "gr", "dat", "func", "hash", "air", "aaa", "save", "rs", "shr", "vec", "dict", "row", "rel", "exp", "art", "req", "vol", "var", "aug", "array", "arc", "hist", "val", "ray", "alph", "arp", "frac", "lists", "nt", "act", "vs", "msg", "adj", "me", "img", "av", "inst", "au", "agg", "ext", "emb", "enc", "repl", " array", "app", "buff", "Array", "fr", "elt", "err"], "max": ["range", "act", "out", "m", "h", "gt", "can", "MAX", "full", "top", "r", "z", "none", "right", "mx", "window", "k", "parent", "med", "start", "ax", "ma", "huge", "Max", "p", "high", "c", "maximum", "w", "st", "v", "end", "total", "co", "az", "last", "map", "na", "id", "to", "rest", "upper", "x", "size", "l", "head", "mod"], "maxId": ["maxID", "maxById", " maxById", "axID", "axTime", "axById", "minTime", "maxTime", "minById", "axId", " maxPos", "axPos", " maxID", "minID", " maxTime", "minPos", "maxPos"], "min": ["range", "m", "lower", "low", "minimum", "init", "lo", "mel", "none", "mins", "Min", "MIN", "sort", "rel", "emin", "mi", "mn", "start", "Minimum", "client", "ma", "p", "len", "inner", "local", "mit", "mp", "dim", "left", "ms", "begin", "mini", "lt", "default", "minute", "id", "mm", "mean", "just", "im", "del", "small", "l", "amin", "master", "mod"], "minId": ["maxUsed", " minOnly", "maxById", "MinOnly", "Minid", "minById", "minimumPath", "intId", "intPath", "intUsed", "localById", "localInit", "minInit", " minById", "localId", "minOnly", "maxPath", "minUsed", " minid", "maxid", "minPath", "minid", "minimumUsed", "intid", "maxOnly", "MinId", "maxInit", "minimumId", " minInit", "minimumid"], "i": ["ji", "hi", "q", "ci", "iso", "mi", "li", "iq", "v", "my", "ij", "ui", "ini", "ai", "us", "or", "ix", "ret", "m", "multi", "e", "bi", "ik", "load", "ei", "c", "print", "status", "pi", "a", "cli", "zi", " I", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "ri", "init", " Xi", "eric", "di", "info", "gi", "index", "ni", "si", "sql", "ti", "io", "iri", "\u0438", "ind", "ip", "o", "ori", "ir", "qi", "phi", "xi", "me", "sim", "s", "it", "ims", "u", "iii", "I", "ie", "iter", "g", "ia", "ic", "iu", "is", "x", "oi", "batch"], "j": ["ng", "oj", "b", "out", "m", "s", "ja", "br", "it", "bi", "jj", "ji", "e", "jc", "jac", "q", "r", "z", "ev", "uj", "bj", "nd", "at", "di", "k", "jump", "jit", "ne", "json", "je", "pt", "kj", "er", "p", "jl", "obj", "g", "d", "v", "other", "aj", "jp", "ij", "J", "dj", "last", "ix", "fr", "ind", "js", "y", "o", "key", "x", "im", "l", "ge"], "t": ["ty", "m", "term", "s", "test", "it", "f", "tc", "z", "at", "wt", "dt", "pt", "tip", "p", "title", " T", "c", "ot", "ta", "ti", "txt", "g", "st", "v", "total", "T", "td", "type", "tm", "text", "tree", "tr", "y", "ts", "vt", "o", "tt", "x", "l", "te", "rt", "tf"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main{\\n    public static void main(String[] args)throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String str = br.readLine();\\n                    \\n                    String[] temp = str.split(\"\\\\s\");\\n                    \\n                    int r = Integer.parseInt(temp[0]);\\n                    int c = Integer.parseInt(temp[1]);\\n                    int[][] inp = new int[r][c];\\n                    \\n                    \\n\\n                    for(int i=0;i<r;i++){\\n                        str = br.readLine();\\n                        String[] line = str.split(\"\\\\s\");\\n                            for(int j=0; j<c; j++){\\n                                int x = Integer.parseInt(line[j]);\\n                                inp[i][j]= x;\\n                            }\\n                    }\\n\\n                    \\n                    int[] ve = new int[c];\\n                    for(int k=0; k<c ; k++){\\n                        str = br.readLine();\\n                        String[] strs = str.split(\"\\\\s\");\\n                        ve[k] = Integer.parseInt(strs[0]);\\n                        //System.out.println(ve[k]);\\n                    }\\n                    \\n                    for(int i=0;i<r;i++){\\n                        int ans =0;\\n                        int atemp = 0;\\n                        for(int j =0;j<c;j++){\\n                         atemp = inp[i][j] * ve[j];\\n                         ans += atemp;  \\n                        }\\n                        System.out.println(ans);\\n                    }\\n                        br.close();\\n    }\\n}", "target": "185", "substitutes": {"br": ["bridge", "b", "lr", "Br", "bl", "cr", "ren", "bf", "dr", "be", "ctr", "driver", "ger", "kr", "bs", "bc", "av", "buf", "rel", "pr", "repl", "bg", "bb", "next", "bd", "p", "hr", "ptr", "db", "rb", "bp", "bro", "io", "jp", "gr", "bt", "yr", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "err", "rem", "mr", "BR"], "str": ["out", "msg", "string", "s", "sol", "STR", "char", "url", "it", "cr", "ocr", "dr", "ctr", "arr", "Str", "inst", "re", "t", "cont", "rel", "exp", "req", "spr", "result", "pr", "ll", "cur", "usr", "list", "vol", "p", "spec", "print", "form", "obj", "parse", "iter", "txt", "st", "ar", "mt", "raw", "sl", "ns", "chain", "gr", "text", "div", "dat", "n", "tr", "sp", "sts", "fr", "yr", "js", "hex", "rest", "wr", "err", "rem", "stable"], "temp": ["Temp", "tem", "term", "tmp", "sequence", "tc", "tim", "where", "train", "EMP", "fake", "unt", "unit", "volt", "t", "emp", "tar", "stem", "pt", "cu", "pre", "template", "prefix", "ta", "form", "iter", "txt", "mem", "mt", "deg", "tm", " Temp", "div", "dat", "tr", "ts", "wr", "tt", "reset", "fac", "tab", "mod"], "r": ["rd", "rs", "m", "ri", "mr", "cr", "rid", "rc", "q", "dr", "re", "kr", "ru", "t", "rel", "attr", "pr", "rr", "rg", "er", "p", "ro", "rb", "radius", "sr", "res", "arc", "ar", "rf", "rm", "gr", "n", "fr", "R", "ry", "nr", "ir", "rt", "rec"], "c": ["m", "b", "h", "ct", "con", "cc", "cat", "e", "f", "cr", "cache", "rc", "q", "cl", "ci", "cm", "cs", "ec", "t", "cd", "cont", "ca", "cf", "cur", "cu", "ac", "p", "mc", "nc", "conf", "count", "gc", "w", "d", "v", "cor", "co", "chain", "ce", "dc", "lc", "n", "C", "col", "l", "cp"], "inp": ["inmp", "imp", "inpp", " inmp", "INpp", "interpp", "intpt", "inpa", " inpt", "interpa", " inpp", "interp", "intmp", "intpp", " inP", "ipt", "ipp", "inP", "INp", "INpa", "inpt", " inpa", "intp", "INP", "ip", "interP"], "i": ["ii", "phi", "xi", "me", "sim", "multi", "ri", "it", "bi", "init", "f", "in", "u", "ci", "di", "I", "mi", "this", "ie", "ir", "ni", "li", "p", "ei", "si", "pi", "iq", "ti", "ia", "a", "name", "ij", "zi", "ui", "ini", "ai", "ic", "iu", "ix", "id", "ip", "y", "o", "is", "im", "l", "ami", "ity", "qi", "ki"], "line": ["range", "page", "lin", "sequence", "link", "liner", "train", "file", "user", "ln", "shell", "row", "frame", "detail", "node", "ide", "tile", "pipe", "log", "ner", "code", "le", "iter", "lines", "comment", "style", "ine", "path", "block", "chain", "handle", "rule", "base", "inline", "Line", "word", "LINE", "source"], "j": ["ng", "jet", "oj", "b", "og", "ja", "it", "ji", "jj", "jc", "jac", "q", "z", "uj", "bj", "ph", "py", "son", "jump", "ie", "json", "je", "pt", "pr", "on", "kj", "ax", "off", "next", "p", "note", "jl", "obj", "jo", "g", "other", "aj", "jp", "ij", " J", "dj", "J", "us", "l", "n", "ix", "fr", "jack", "js", "y", "o", "key", "ion", "err", "job"], "x": ["xi", "rx", "xp", "xe", "xs", "dx", "ox", "z", " xx", "mx", "xxx", "tx", "ux", "xy", "ax", "xb", "xa", "ex", "w", "v", "xxxx", "xf", "xx", "xt", "n", "ix", "xc", "y", "px", "fx", "l", "X", "wx"], "ve": ["save", "me", "ode", "see", "ev", "ke", "VE", "where", "be", "have", "des", "ree", "ale", "ne", "force", "verse", "vine", "pose", "he", "she", "ove", "Ve", "du", "vd", "ose", "ieve", "ue", "ite", "vere", "ine", "vet", "dj", "fore", "ape", "de", "ves", "ene", "te", "ave", "we"], "k": ["ask", "mk", "unk", "m", "b", "kar", "sk", "dk", "ke", "jj", "ik", "ko", "q", "kn", "u", "kt", "kr", "km", "ok", "wk", "kh", "kind", "ak", "ck", "uk", "kj", "kid", "kl", "ks", "ka", "kat", "w", "g", "ku", "v", "K", "ijk", "kk", "kan", "kw", "ark", "n", "isk", "o", "key", "ek", "tk", "ki"], "strs": ["hexb", "textb", "strps", "arrs", "arrls", "strb", "brls", "strls", "arrb", "hexs", "hexls", "strts", "arrps", "arrts", "texts", "brts", " strps", "brps", " strls", " strts", "brs", "textls"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String args[]){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int t = sc.nextInt();\\n\tint a = sc.nextInt();\\n    double h1 = 999;\\n    int answer = 0;\\n    for(int i = 0; i < n; i++){\\n      int h = sc.nextInt();\\n\t  double b = t-h*0.006;\\n\t  if(Math.abs(b-a) < h1){\\n\t  \th1 = Math.abs(b-a);\\n\t\tanswer = i+1;\\n\t  }\\n    }\\n    System.out.print(answer);\\n  }\\n}\\n", "target": "210", "substitutes": {"sc": ["mom", "system", "sa", "cc", "tc", "cr", "ss", "rc", "ko", "pb", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "c", "nc", "SC", "gc", "sw", "inc", "fc", "ctx", "sv", "dc", "lc", "scan", "sp", "asc", "cgi", "conv", "ctrl", "sch", "anc", "sec", "usc", "irc", "sq"], "n": ["ng", "m", "j", "nn", "net", "q", "ln", "u", "nr", "ne", "mn", "network", "nv", "ni", "nm", "en", "p", "c", "np", "nc", "N", "nb", "g", "d", "v", "nu", "num", "ns", "nl", "sn", "na", "o", "x", "cn", "l", "nt"], "t": ["out", "m", "tu", "term", "j", "s", "it", "f", "tc", "q", "r", "z", "at", "wt", "dt", "pt", "tw", "tp", "p", "c", "ot", "ta", "w", "g", "d", "v", "T", "tm", "y", "ts", "o", "tt", "x", "l", "rt"], "a": ["act", "aff", "m", "sta", "apa", "isa", "address", "sa", "it", "eas", "f", "r", "am", "era", "at", "A", "au", "att", "ab", "ada", "ak", "ca", "ma", "app", "p", "ac", "ba", "ao", "ea", "ta", "an", "w", "aa", "ack", "ia", "add", "ar", "are", "ai", "as", "aux", "pa", "na", "y", "va", "o", "ach", "l", "ae"], "h1": ["H2", "H001", "H10", "hOne", "H0", "hd0", "b1", " hOne", "hd1", "h6", "b0", "b2", "h001", " h6", " h10", "H1", "he1", " h0", "H6", "HOne", "hd2", "h2", " h001", "bOne", "h0", "h10", "he001", " h2", "he10", "he2", "hd6"], "answer": ["ask", "message", "offer", "equ", "uration", "blank", "see", "echo", "sequence", "wer", "value", "interpret", "cache", "install", "about", "eni", "asm", "swers", "window", "order", "close", "exit", "mate", "remember", "area", "energy", "qv", "result", "accept", "review", "ve", "entry", "Answer", "query", "answered", "consider", "su", "turn", "response", "option", "notice", "version", "know", "adr", "vote", "search", "fit", "archive", "integer", "reply", "oval", "ell", "say", "question", "support"], "i": ["ii", "phi", "xi", "m", "j", "sim", "multi", "ri", "s", "init", "bi", "sequence", "it", "f", "hi", "e", "u", "ci", "di", "I", "mi", "ie", "index", "li", "p", "ei", "si", "pi", "iq", "iter", "ti", "v", "my", "ij", "zi", "ui", "ini", "ai", "ic", "us", "\u0438", "l", "ish", "iu", "ix", "ind", "id", "ip", "is", "x", "im", "oi", "ori", "batch", "qi", "ki"], "h": ["hs", "m", "j", "it", "hi", "q", "z", "oh", "hm", "ph", "hd", "hu", "kh", "ah", "zh", "hh", "he", "p", "hz", "sh", "H", "c", "hr", "rh", "ih", "w", "g", "d", "v", "ht", "ha", "hl", "bh", "hex", "ho", "hash", "head"], "b": ["B", "eb", "BB", "ob", "br", "ub", "bi", "pb", "bf", "sb", "be", "by", "fb", "body", "bs", "bc", "ab", "abb", "ib", "gb", "cb", "bis", "bb", "bd", "ba", "db", "rb", "obj", "nb", "bp", "mb", "bu", "base", " B", "bh", "bound", "reb", "wb"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    int ans = 0;\\n    if(s.equals(\"SUN\")) {\\n      ans = 7;\\n    } else if(s.equals(\"MON\")) {\\n      ans = 6;\\n    } else if(s.equals(\"TUE\")) {\\n      ans = 5;\\n    } else if(s.equals(\"WED\")) {\\n      ans = 4;\\n    } else if(s.equals(\"THU\")) {\\n      ans = 3;\\n    } else if(s.equals(\"FRI\")) {\\n      ans = 2;\\n    } else{\\n      ans = 1;\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "136", "substitutes": {"sc": ["rs", "system", "cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "soc", "uc", "sys", "mc", "scl", "c", "nc", "sub", "SC", "gc", "sv", "screen", "scan", "lc", "sp", "sel", "asc", "conv", "sch", "anc", "sec", "usc", "sq"], "s": ["simple", "sam", "rs", "hs", "m", "h", "sports", "string", "j", "its", "ats", "i", "str", "f", "xs", "ss", "in", "S", "sb", "r", "t", "qs", "sys", "gs", "c", "sh", "sql", "g", "st", "v", "a", "sv", "ms", "ws", "sl", "state", "ns", "as", "south", "n", "sf", "sts", "ds", "ps", "stats", "js", "y", "ts", "o", "ls", "is", "es", "l", "ties", "sq"], "ans": ["ats", " spans", "vals", " means", "ens", "ks", "books", "ends", "ars", "orts", "ows", "faces", "ls", "helps", "ann", "aus", "aps", "an", "ms", "arms", " scans", "ons", " beans", "arts", "ts", "powers", "asks", "ads", "caps", "irms", "lan", "terms", "outs", "hands", "acs", " fans", "ams", "ums", "ots", "ents", "ids", "orders", "yes", "ays", "uns", "posts", "vs", "aos", "utters", "ups", "cs", " orphans", "dies", "uploads", "angs", "lets", "aints", "abilities", "offs", "eds", "anks", "ins", "aces", "ras", "ns", "ants", "oos", "ds", "ps", "nets", "ANS", "aults", "amps", "beans", "olds"]}}
{"code": "import java.util.*;\\nimport java.io.* ;\\n/*\\nNOTES:\\n-more than 10 digits (10^10), use long\\n-prefix sum of 1's and -1's to control flow of highlighting a region\\n-log(a)/log(b) = log base b of a\\n-create a position array if trying to see if elements show up next to each other sequentially\\n i.e. elements 1,2,3 are within 3 spots of each other in an array\\n      arr[scannedInt - 1] = i; (position of i at p[i] in original)\\n- use a freq array when counting instances of an element occurring\\n- increment the counter first before simulating anything turn-based (two player game)\\n\\n */\\n\\npublic class Main {\\n    static long mod = (long)(Math.pow(10, 9) + 7);\\n    public static String alpha = \"zabcdefghijklmnopqrstuvwxy\";\\n    public static void main(String[] args) throws IOException{\\n        FastReader in = new FastReader();\\n        long t= 1;\\n        while (t-- > 0) {\\n            Stack<String> stack = new Stack<>();\\n            int n = in.nextInt();\\n            boolean flag = true;\\n            stack.add(in.next());\\n            for(int i = 1; i<n; i++){\\n                String str = in.next();\\n                if(stack.contains(str)){\\n                    flag = false;\\n                    break;\\n                }\\n                if(stack.peek().charAt(stack.peek().length()-1) != str.charAt(0)){\\n                    flag = false;\\n                    break;\\n                }\\n                else stack.add(str);\\n            }\\n            if(flag) System.out.println(\"Yes\");\\n            else System.out.println(\"No\");\\n\\n        }\\n\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                }\\n                catch (IOException  e) { e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n    static ArrayList sieve(){\\n        ArrayList<Integer> primes = new ArrayList<>();\\n        int size = 1000001;\\n        int[] arr = new int[size+1];\\n        for(int i = 2; i*i<=size; i++){\\n            if(arr[i] == 0 && (long) (i*i)<=size)\\n                for(int pp = i*i; pp<=size; pp+=i) arr[pp]++;\\n        }\\n        for(int i = 2; i<=size; i++){\\n            if(arr[i]==0) primes.add(i);\\n        }\\n        return primes;\\n    }\\n\\n\\n    static boolean isPalindrome(String s){\\n        for(int i = 0; i<s.length()/2; i++){\\n            if(s.charAt(i) != s.charAt(s.length()-i-1)) return false;\\n        }\\n        return true;\\n    }\\n\\n    static ArrayList factors(long n ){\\n        ArrayList<Long> facts = new ArrayList<>();\\n        for(int i = 1; i<=(int)Math.sqrt(n); i++){\\n            if(n%i == 0){\\n                if( i == Math.sqrt(n)) facts.add((long)i);\\n                else{\\n                    facts.add((long)i);\\n                    facts.add(n/i);\\n                }\\n            }\\n        }\\n        Collections.sort(facts);\\n        return facts;\\n    }\\n\\n    static boolean isPrime (int n){\\n        if(factors(n).size() ==2) return true;\\n        else return false;\\n    }\\n\\n\\n\\n\\n\\n    static long GCD(long a, long b) {\\n        if (b==0) return a;\\n        return GCD(b,a%b);\\n    }\\n    static long LCM(long a, long b){\\n        return (a*b)/(GCD(a,b));\\n    }\\n    static String rev(String s){\\n        char[] arr = s.toCharArray();\\n        for(int i = 0; i<(s.length()+1)/2; i++){\\n            char temp = arr[i];\\n            arr[i] = arr[s.length()-i-1];\\n            arr[s.length()-i-1] = temp;\\n        }\\n        String fin = new String(arr);\\n        return fin;\\n    }\\n    static long pow(long a, long N) {\\n        if (N == 0) return 1;\\n        else if (N == 1) return a;\\n        else {\\n            long R = pow(a,N/2);\\n            if (N % 2 == 0) {\\n                return R*R;\\n            }\\n            else {\\n                return R*R*a;\\n            }\\n        }\\n    }\\n\\n    static long powMod(long a, long N) {\\n        if (N == 0) return 1;\\n        else if (N == 1) return a % mod;\\n        else {\\n            long R = powMod(a,N/2) % mod;\\n            R *= R;\\n            R %= mod;\\n            if (N % 2 == 1) {\\n                R *= a;\\n                R %= mod;\\n            }\\n            return R % mod;\\n        }\\n    }\\n\\n}\\n\\n", "target": "70", "substitutes": {"mod": ["mult", "MOD", "mode", "m", "mask", "init", "da", "fun", "min", "set", "lock", "dec", "prime", "off", "ac", "scale", "add", "mem", "Mod", "num", "base", "tree", "tr", "tab", "max", "fac", "grow"], "alpha": ["ef", "mask", "rc", "set", "A", "beta", " ca", " alphabet", "ref", "c", " def", "prefix", "data", "acl", "name", "abc", " pref", "Alpha", "base", " letters", "def", "hex", "alph", "upper", "codes", "letters"], "in": ["out", "inf", "In", "m", "check", "con", "ri", "isin", "lin", "doc", "asin", " din", "dr", "r", "file", "user", "rin", "reader", "vin", "IN", "info", "on", "line", "er", "log", "gin", "session", "mc", "ins", "inner", "conf", "inn", "inc", "sql", "ssl", "cin", "d", "iter", "add", "get", "lines", "input", "make", "bin", "ini", "ic", "as", "thin", "stream", "ind", "mm", "din", "is", "err", "mr", "win"], "t": ["ty", "tu", "m", "h", "j", "tl", "e", "f", "tc", "q", "window", "at", "k", "wt", "pt", "tw", "tp", "p", "c", "ot", "ta", "w", "g", "d", "v", "total", "T", "tree", "tr", "timeout", "ent", "ts", "tt", "x", "l", "te", "ties"], "stack": ["store", "queue", "check", "struct", "pop", "sequence", "cache", "track", "where", "top", "bool", "wait", "window", "set", "thread", "history", "pool", "exp", "this", "Stack", "loop", "storage", "buffer", "line", "counter", "white", "list", "level", "load", "slice", "print", "layer", "space", "local", "trace", "ack", "style", "v", "make", "acks", "screen", "scope", "stream", "chain", "pack", "alt", "tree", "sp", "table", "collection", "upper", "stage", "func", "reset", "batch", "false", "push"], "n": ["ng", "m", "j", "nan", "f", "nn", "net", "number", "z", "ln", "nd", "k", "ne", "nm", "len", "en", "np", "nc", "nor", "nb", "d", "no", "nu", "all", "ns", "num", "un", "nl", "nw", "sn", "na", "o", "l", "nt"], "i": ["ii", "phi", "m", "me", "gu", "j", "multi", "sim", "it", "bi", "q", "u", "ci", "di", "I", "mi", "ie", "info", "gi", "li", "point", "si", "c", "pi", "ti", "g", "v", "io", "ui", "ms", "ini", "ai", "ic", "us", "iu", "ix", "id", "ip", "y", "o", "is", "x", "im", "qi"], "str": ["char", "bl", "url", "bool", "dr", "r", "Str", "coll", "cur", "list", "obj", "sw", "res", "v", "name", "sl", "hex", "ret", "del", "stable", "ring", "string", "STR", "e", "doc", "next", "c", "print", "data", "chain", "gr", "text", "tr", "ent", "comp", "seq", "shr", "sequence", "full", "ctr", "cont", "rel", "exp", "req", "ll", "usr", "line", "vol", "txt", "jp", "sp", "nt", "msg", "j", "cr", "z", "inst", "enc", "sys", "g", "ns", "fr", "elt", "err"], "flag": ["fl", "store", "bit", "cloud", "stay", "msg", "mask", "true", "age", "command", "f", "cmd", "lag", "flow", "bool", "ground", "event", "wait", "member", "continue", "window", "set", "FLAG", "ld", "lock", "sync", "limit", "xml", "group", "cf", "start", "enable", "level", "log", "failed", "list", "print", "status", "flags", "lv", "bug", "mail", "bird", "nl", "image", "cond", "leaf", "fail", "Flag", "child", "condition", "valid", "old", "ret", "stage", "func", "l", "field", "key", "tag"], "br": ["bridge", "rain", "lr", "Br", "shr", "bl", "bsp", "cr", "r", "dr", "ctr", "ger", "kr", "bs", "bc", "buf", "rel", "bra", "pt", "Fr", "bolt", "next", "bd", "bm", "hr", "rier", "rb", "bro", "bp", "bre", "brace", "gr", "vr", "bt", "tr", "sp", "fr", "bh", "ber", "bn", "wr", "browser", "stat", "err", "mr", "BR", "abl"], "st": ["ost", "ct", "tmp", "bl", "lo", "it", "cr", "ft", "dr", "cl", "be", "sb", "nd", "inst", "wt", "sty", "se", "ST", "pt", "ch", "std", "start", "usr", "est", "ist", "sh", "stri", "sw", "St", "mt", "ust", "sv", "sl", "const", "l", " superst", "bt", "et", "sts", "sn", "tr", "sp", "fr", "rest", "stat", "ste", "rt", "stable", "ut", "nt"], "primes": ["prices", "trunes", " prima", "prunes", "Prices", "prima", "Prunes", "trima", "Prima", "trimes", "trices", " prunes", "Primes", " prices"], "size": ["store", "offset", "ize", "m", "see", "number", "z", "SIZE", "window", "set", "empty", "area", "prime", "storage", "index", "start", "Size", "iz", "si", "send", "space", "pi", "count", "shape", "g", "scale", "v", "capacity", "power", "sy", "sn", "now", "max", "x", "small", "grow"], "arr": ["tmp", "bl", "par", "dr", "vals", "inst", "buf", "ok", "grid", "cur", "pr", "ax", "obj", "var", "array", "res", "aa", "ar", "ij", "Ar", "Array", "dat", "map", "val", "ray", "arg"], "length": ["offset", "sequence", "number", "span", "location", "padding", "character", "width", "start", "index", "len", "stop", "distance", "maximum", "count", "shape", "end", "component", "capacity", "power", "last", "integer", "text", "vector", "Length", "max", "position"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    System.out.println(solve());\\n  }\\n  \\n  private static int solve() {\\n    FastReader fr = new FastReader();\\n    int N = fr.nextInt();\\n    int result = 0;\\n    int current = -9999; // value of current character in Int\\n    String S = fr.next();\\n    for (int i = 0; i < N; i++) {\\n      int checking = S.charAt(i) - 'a';\\n      if (current == checking) continue; // if found the same color, it will slime to the near by color\\n      current = checking; // change current color\\n      result++; // and also add one to result since we found a new color that can not be fused\\n    }\\n    \\n    return result;\\n  }\\n}\\n\\nclass FastReader {\\n  BufferedReader br;\\n  StringTokenizer st;\\n\\n  public FastReader() {\\n    br = new BufferedReader(new\\n        InputStreamReader(System.in));\\n  }\\n\\n  String next() {\\n    while (st == null || !st.hasMoreElements())\\n    {\\n      try\\n      {\\n        st = new StringTokenizer(br.readLine());\\n      }\\n      catch (IOException e)\\n      {\\n        e.printStackTrace();\\n      }\\n    }\\n    return st.nextToken();\\n  }\\n\\n  int nextInt() {\\n    return Integer.parseInt(next());\\n  }\\n\\n  long nextLong() {\\n    return Long.parseLong(next());\\n  }\\n\\n  double nextDouble() {\\n    return Double.parseDouble(next());\\n  }\\n\\n  String nextLine() {\\n    String str = \"\";\\n    try {\\n      str = br.readLine();\\n    }\\n    catch (IOException e) {\\n      e.printStackTrace();\\n    }\\n    return str;\\n  }\\n}", "target": "218", "substitutes": {"fr": ["fl", "fd", "rx", "fi", "lr", "br", "fps", "f", "fs", "fm", "mr", "bf", "rl", "dr", "r", "kr", "ill", "her", "rel", "adv", "req", "Fr", "pr", "rr", "fw", "hz", "hr", "sw", "sr", "ij", "jp", "rf", "fin", "gr", "FR", "tr", "ry", "err", "rt", "tf"], "N": ["B", "P", "F", "NN", "Num", "S", "NR", "Number", "NS", "I", "D", "L", "V", "Result", "Next", "Total", "nb", "T", "K", "J", "n", "Count", "M", "R", "Current", "C", "Z", "Solution"], "result": ["message", "feature", "mask", "sequence", "value", "error", "success", "number", "answer", "diff", "record", "counter", "Result", "match", "correct", "distance", "score", "count", "results", "search", "power", "integer", "unique", "table", "ret"], "current": ["skip", "context", "cache", "progress", "temp", "continue", "record", "this", "cur", "loop", "counter", "random", "correct", "count", "total", "currently", "active", "integer", "now", "Current", "condition", "valid", "position", "pointer", "reported", "present"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author ky112233\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BCardGameForTwo solver = new BCardGameForTwo();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BCardGameForTwo {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int n = in.nextInt();\\n            int[] a = new int[n];\\n            for (int i = 0; i < n; i++) a[i] = in.nextInt();\\n            Arrays.sort(a);\\n            int alice = 0;\\n            int bob = 0;\\n            for (int i = n - 1; i >= 0; i--) {\\n                if ((n - 1 - i) % 2 == 0) alice += a[i];\\n                else bob += a[i];\\n            }\\n            out.println(alice - bob);\\n        }\\n\\n    }\\n}\\n\\n", "target": "132", "substitutes": {"inputStream": ["audioSteam", "helloStreamer", "audiostream", "inputStyle", "audioStyle", "outputStreamer", "audioStreamer", "audioStream", "helloStyle", " inputScript", "hellostream", "outputSteam", "inputstream", "inputSteam", " inputSteam", "inputScript", "audioScript", " inputStyle", "helloSteam", "outputstream", "helloScript", "inputStreamer", "helloStream"], "outputStream": ["outputNow", "OutputNow", "displayStream", "writeForm", "displayStreamer", "writeStream", "outputStreamer", "displayForm", "noteForm", " outputSteam", "inputForm", "outputSteam", "OutputSteam", "inputSteam", "noteStreamer", " outputNow", "OutputStream", "displaySteam", "writeNow", " outputForm", "noteSteam", "writeSteam", "outputForm", "OutputForm", "inputStreamer", "noteStream"], "in": ["serv", "current", "In", "inf", "h", "con", "isin", "can", "context", "kin", "it", "init", "doc", "run", " din", "r", "file", "rin", "reader", "window", "conf", "mi", "IN", "info", "up", "on", "from", "er", "log", "gin", "null", "en", "ins", "inner", "inside", "local", "inn", "inc", "iter", "get", "cin", "sin", "form", "output", "io", "config", "input", "add", "bin", "ini", "thin", "stream", "l", "dir", "scan", "ind", "mm", "din", "o", "is", "source", "im", "err", "rt"], "out": ["check", "con", "s", "can", "aos", "it", " OUT", "e", "run", "cmd", "net", "fn", "OUT", "user", "temp", " Out", "t", "at", "ou", "outs", "os", "outer", "this", "result", "sys", "client", "Out", "log", "report", "null", "p", "print", "inner", "ex", "obj", "write", "txt", "w", "gc", "res", "end", "io", "output", "name", "v", "server", "screen", "co", "gr", "table", "to", "flush", "over", "o", "writer", "sum", "err", "OU", "nt"], "solver": ["soln", "ssoln", "sender", " sender", " solution", "resorter", "esender", "sorter", "resolution", "esorter", "esolution", "solution", "Solver", " soln", "resolver", "Soln", "ssolution", "ssolver", " solve", "Solve", "esolver", "resender", "solve", "ssolve", " sorter", "Solution"], "testNumber": ["caseNo", "TestNum", "testnumber", "TestNo", " testNum", " testNo", " testnumber", "caseNumber", "caseNum", "testNo", "Testnumber", "testNum", "TestNumber", "casenumber"], "n": ["ng", "m", "b", "norm", "j", "nan", "ul", "nn", "net", "z", "ln", "t", "ne", "mn", "network", "ll", "on", "nm", "p", "len", "np", "c", "nc", "en", "N", "nb", "w", "d", "v", "nu", "total", "no", "name", "names", "ns", "num", "un", "nl", "nw", "sn", "na", "o", "cn", "l", "nt"], "a": ["aaa", "done", "aff", "b", "m", "la", "apa", "oa", "s", "aos", "sa", "da", "aw", "am", "u", "wa", "at", "A", "au", "area", "att", "ab", "ca", "ma", "app", "ac", "p", "ao", "ba", "ea", "c", "xa", "an", "ack", "aa", "ia", "d", "ava", "ata", "ga", "all", "as", "alpha", "pa", "na", "va", "o", "ae", "fa"], "i": ["h", "hi", "q", "ci", "mi", "bis", "list", "li", "iq", "v", "ij", "ui", "ini", "ai", "us", "ix", "m", "multi", "bi", "f", "iy", "ei", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "asi", "im", "l", "ami", "ity", "ki", "ii", "fi", "ri", "init", "di", "k", "info", "gi", "ni", "si", "ti", "io", "uu", "\u0438", "ind", "ip", "o", "PI", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "ims", "u", "I", "client", "p", "iter", "ic", "iu", "is", "x", "oi"], "alice": ["alicer", "ialius", "aliced", "ialouse", " aliced", "maliced", "elicing", "eliced", "malice", "alicing", "elicer", "ellouse", "ellius", "alsice", "ellicer", " alie", "malICE", "alICE", "elICE", "ellice", "alius", " alicer", "alsicer", "malicer", "malicing", " alicing", "alsius", "alie", " alICE", "elice", "ialicer", "alouse", "elie", "malie", "alsouse", "ialice"], "bob": [" brobe", "hobb", "bloy", "Boud", "boy", "Bond", "hob", "blog", "hox", " box", " bond", "oboud", "Bog", "Bom", "boud", "blob", "biond", "brobe", " bobb", "box", "obob", "obog", "blobb", "blrobe", "hrobe", "bond", "biob", "biub", "blox", " bub", "Boy", "bom", "bog", "oboy", "biom", "bobb", " bom", "Bub", "bub", "bloud", "Bob"]}}
{"code": "/*package whatever //do not write package name here */\\n\\nimport java.io.*;\\nimport java.io.BufferedReader; \\nimport java.io.IOException; \\nimport java.io.InputStreamReader; \\nimport java.util.Scanner; \\nimport java.util.StringTokenizer; \\n\\nclass Main {\\n    static class FastReader{\\n        BufferedReader br;\\n        StringTokenizer st;\\n        public FastReader(){\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n        String next(){\\n            while(st==null || !st.hasMoreTokens()){\\n                try{\\n                    st = new StringTokenizer(br.readLine());\\n                }\\n                catch(IOException e){\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n        int nextInt(){\\n            return Integer.parseInt(next());\\n        }\\n    }\\n\tpublic static void main (String[] args) {\\n\t\tFastReader ob = new FastReader();\\n\t\tint n = ob.nextInt();\\n\t\tint arr[] = new int[n];\\n\t\tfor (int i=0;i<n ;i++ ) {\\n\t\t    arr[i] = ob.nextInt();\\n\t\t    //System.out.println(arr[i]);\\n\t\t}\\n\t\tint count=1;\\n\t\tint min=arr[0];\\n\t\tfor (int i=1;i<n ;i++ ) {\\n\t\t    //System.out.println(arr[i]);\\n\t\t    if(min>=arr[i]){\\n\t\t        count++;\\n\t\t        min=arr[i];\\n\t\t        \\n\t\t    }\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "229", "substitutes": {"br": ["bridge", "Tr", "b", "lr", "Br", "bsp", "bl", "shr", "cr", "dr", "r", "sb", "bern", "ctr", "ger", "kr", "bs", "bc", "buf", "ab", "pt", "pr", "bb", "bd", "ba", "bm", "hr", "rb", "bro", "bp", "bre", "brace", "bt", "tr", "fr", "bn", "bh", "ber", "browser", "mr", "BR", " tr"], "st": ["ost", "sta", "ct", "s", "sth", "bl", "str", "cr", "ft", "r", "cl", "be", "sb", "z", "nd", "inst", "sm", "t", "set", "th", "sty", "se", "so", "ST", "pt", "std", "start", "est", "ist", "p", "sh", "stop", "stri", "sw", "St", "mt", "ust", "sv", "td", "step", "sl", "const", "l", " superst", "bt", " est", "sts", "sn", "tr", "sp", "lt", "fr", " std", "rest", "stage", "stat", "ste", "rt", "stable", "ut", "nt"], "ob": ["gob", "rib", "eb", "http", "og", "bo", "ome", "bl", "ub", "pb", "bf", "ox", "abs", "sb", "fb", "bs", "rob", "oy", "orm", "Ob", "ab", "OB", "ib", "gb", "emb", "cb", "lb", "org", "bb", "app", "ro", "ow", "oc", "db", "rb", "obs", "nb", "ack", "amb", "obj", "io", "mb", "auto", "abc", "or", "obb", "deb", "bh", "orb", "oop"], "n": ["ng", "m", "norm", "j", "nan", "nn", "net", "r", "z", "ln", "nd", "t", "ne", "mn", "network", "ll", "ni", "nat", "nm", "en", "len", "nc", "np", "c", "p", "nz", "N", "nb", "no", "nu", "total", "v", "ns", "num", "un", "nl", "nw", "sn", "na", "o", "cn", "l", "nt"], "arr": ["aaa", "pad", "img", "arb", "bl", "par", "av", "ary", "dict", "rel", "coll", "our", "pl", "enc", "pr", "app", "var", "obj", "iq", "aug", "array", "aa", "arc", "res", "aj", "ar", "Ar", "arm", "ARR", "gr", "bar", "dat", "fr", "val", "ray", "err", "frac", "air"], "i": ["ii", "phi", "m", "um", "me", "xi", "multi", "j", "sim", "eu", "it", "bi", "init", "f", "ji", "hi", "ims", "u", "ci", "di", "I", "mi", "series", "gi", "mu", "li", "ei", "si", "pi", "iq", "ti", "v", "a", "cli", "ij", "zi", "ui", "ini", "ic", "ai", "us", "\u0438", "chain", "iu", "ix", "id", "Di", "MI", "ip", "y", "o", "is", "uri", "x", "l", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        char input = scanner.next().charAt(0);\\n\\n        if (input >= 'a' && input <= 'z') {\\n            System.out.println('a');\\n        } else {\\n            System.out.println('A');\\n        }\\n\\n    }\\n}\\n", "target": "80", "substitutes": {"scanner": ["canter", " scaner", "identner", "Scanener", "Scanner", " scanener", "canener", "identener", "identning", "Scaner", "identter", "scanning", " Scaner", "scanener", "canner", "scaner", "scanter", " Scanter", "canning", " Scanener", " Scanner", " scanter", " scanning", "Scanter"], "input": ["act", " Input", "current", "enter", "password", "context", "sequence", "value", "command", "cmd", "submit", "q", "missing", "hello", "focus", "select", "history", "human", "feed", "this", "lat", "qa", "up", "unknown", "accept", "index", "client", "control", "query", "c", "print", "form", "request", "local", "data", "get", "output", "config", "visible", "raw", "column", "shift", "state", "active", "type", "Input", "text", "pattern", "field", "initial", "PUT", "vc"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\tString[] temp = scanner.nextLine().split(\" \");\\n\t\tint k = Integer.parseInt(temp[0]);\\n\t\tint n = Integer.parseInt(temp[1]);\\n\\n\t\tfor(int i = n - k + 1; i < k + n; i ++) {\\n\\n\t\t\tSystem.out.println(i);\\n\\n\t\t}\\n\\n\\n\t}\\n\\n}\\n", "target": "207", "substitutes": {"scanner": ["canter", " scaner", "Scanener", "scner", "Scanner", " scanener", "canener", "scener", "caner", "Scaner", "scer", "scanener", "canner", "scaner", "scanter", "scter", " scanter", "Scanter"], "temp": ["Temp", "tem", "por", " tmp", "tmp", "tc", "tim", "EMP", "fake", "unt", "t", "empty", "emp", "stem", "pt", "timer", "attr", "buffer", "pre", "cu", "null", "template", "ptr", "ta", "iter", "txt", "v", "trade", "deg", "tm", " Temp", "dat", "tr", "now", "ps", "mag", "ts", "wr", "fac", "tab", "mod"], "k": ["mk", "unk", "m", "h", "j", "dk", "sk", "ke", "ik", "ko", "q", "kn", "u", "kt", "kr", "km", "t", "ok", "wk", "kh", "ak", "kick", "ck", "kj", "uk", "kid", "p", "kl", "ks", "ka", "w", "ku", "K", "ijk", "kk", "kw", "isk", "key", "x", "ek", "tk", "ki"], "n": ["out", "m", "h", "b", "j", "nan", "nn", "net", "number", "z", "ln", "t", "nr", "ne", "mn", "ni", "nm", "en", "p", "c", "nc", "np", "N", "pi", "an", "w", "g", "d", "v", "nu", "nb", "no", "ns", "num", "nl", "sn", "na", "o", "cn", "l", "nt"], "i": ["ii", "phi", "xi", "j", "multi", "ri", "it", "bi", "hi", "in", "u", "yi", "ci", "di", "I", "mi", "gi", "index", "ni", "li", "ei", "si", "point", "pi", "iter", "ti", "io", "cli", "iri", "ij", "zi", "ui", "ini", "ai", "ic", "us", "integer", "iu", "ix", "id", "MI", "ip", "y", "is", "uri", "x", "ori", "im", "oi", "asi", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    final Scanner sc = new Scanner(System.in);\\n    final String s = sc.nextLine();\\n    final String t = sc.nextLine();\\n    int min_diff = s.length();\\n\\n    for (int i = 0; i <= (s.length() - t.length()); i++) {\\n      int j = 0;\\n      int diff = 0;\\n      while (j < t.length()) {\\n        if (s.charAt(i + j) != t.charAt(j)) {\\n          diff++;\\n        }\\n        j++;\\n      }\\n\\n      if (min_diff > diff) {\\n        min_diff = diff;\\n      }\\n    }\\n\\n    System.out.println(min_diff);\\n  }\\n}", "target": "158", "substitutes": {"sc": ["system", "cc", "cle", "tc", "ss", "cr", "capt", "rc", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "exp", "ch", "osc", "pc", "isc", "uc", "sys", "ck", "mc", "c", "nc", "SC", "gc", "inc", "ctx", "fc", "sv", "dc", "scan", "lc", "sp", "asc", "sch", "sec", "anc", "usc", "sq"], "s": ["rs", "h", "string", "its", "ats", "str", "ss", "in", "S", "r", "sb", "ims", "bs", "cs", "os", "so", "se", "qs", "sys", "gs", "p", "si", "sh", "c", "ins", "sql", "sw", "sg", "g", "st", "d", "a", "sv", "ms", "ns", "sl", "n", "sts", "sp", "ds", "ps", "js", "ts", "ls", "is", "source", "l", "sq"], "t": ["ty", "out", "b", "term", "m", "gt", "it", "str", "f", "tc", "r", "u", "temp", "at", "wt", "pt", "p", "title", "c", "ot", "template", "ta", "txt", "g", "st", "v", "T", "mt", "type", "tm", "n", "tree", "tr", "y", "ts", "o", "ent", "tt", "te", "rt", "tk", "nt"], "min_diff": ["minimum_iff", "ltingdiff", "lt_different", "min__diff", "lt_diff", "miningdev", "minimum_changed", "lt_error", "min_range", "ltingdev", " min_new", " min_dist", " min_changed", " min_range", "min_distance", "min_new", "min_dev", " min_iff", "minimum_diff", "lt_dev", " min_distance", "ltingdifferent", "minimum_different", "min__range", "min_dist", "min_different", "min_changed", "min__dist", "miningdifferent", "miningerror", "min_error", "min__distance", "ltingerror", "min_iff", "miningdiff"], "i": ["ii", "phi", "m", "xi", "ri", "init", "bi", "it", "hi", "q", "u", "ci", "iat", "di", "I", "mi", "ie", "index", "ni", "li", "ei", "si", "print", "pi", "ti", "ia", "io", "ij", "zi", "ui", "ini", "ic", "ai", "ish", "iu", "ind", "ix", "ip", "y", "o", "is", "asi", "im", "x", "ori", "ami", "ki"], "j": ["b", "h", "adj", "ja", "br", "it", "ji", "jj", "jc", "test", "f", "jac", "q", "z", "uj", "bj", "k", "jump", "exp", "json", "gov", "je", "pr", "index", "kj", "next", "p", "note", "obj", "pi", "g", "d", "v", "other", "aj", "jp", "ij", "dj", "J", "l", "n", "ind", "ix", "fr", "js", "y", "x", "im", "ion", "ort", "job"], "diff": ["range", "offset", "message", "fd", "extra", "wrong", "Diff", "dust", "mix", "changed", "delete", "expected", "test", "value", "progress", "error", " mismatch", "missing", "none", "dx", "dirty", "remove", "change", "desc", "only", "split", "good", " differences", "Delta", "result", "part", "note", "distance", "comment", " difference", "erence", "d", "add", "debug", "different", "shift", "eff", "length", "dist", "update", "div", "equal", " Diff", "default", "fail", "def", "dl", "iff", "cmp", "call", "del", "err", "tf"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int[] h=new int[n];\\n    for(int i=0;i<n;i++){\\n      h[i]=sc.nextInt();\\n    }\\n    int ans=0;\\n    for(int i=100;i>0;i--){\\n      boolean living=false;\\n      for(int j=0;j<n;j++){\\n        if(h[j]>=i){\\n          if(!living){\\n            living=true;\\n            ans++;\\n          }\\n        }else{\\n          living=false;\\n        }\\n      }\\n    }\\n    System.out.println(ans);\\n  }\\n}\\n", "target": "77", "substitutes": {"sc": [" Sc", "system", "cc", "cle", "cr", "tc", "pb", "rc", "ss", "capt", "cl", "sb", "cv", "bc", "cs", "sac", "desc", "esc", "sync", "Sc", "ctl", "se", "ch", "osc", "pc", "isc", "sys", "mc", "scl", "c", "nc", "sci", "SC", "sw", "gc", "fc", "sv", "nl", "dc", "lc", "scan", "sp", "sel", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "n": ["ng", "m", "nan", "Ni", "nn", "net", "number", "fn", "r", "z", "ln", "t", "k", "ne", "mn", "ni", "nm", "en", "p", "nc", "np", "c", "len", "gn", "N", "pi", "count", "an", "nb", "g", "d", "v", "nu", "no", "name", " N", "ns", "num", "un", "nl", "sn", "na", "o", "x", "size", "cn", "l", "nt"], "h": ["hs", "it", "uh", "hi", "av", "oh", "hm", "ph", "history", "hd", "th", "kh", "ah", "ch", "hh", "he", "hw", "hz", "sh", "H", "rh", "ih", "w", "ht", "v", "ha", "hl", "bh", "hp", "ho", "pp", "l", "hash", "header", "head"], "i": ["ii", "phi", "m", "um", "xi", "me", "sim", "multi", "ri", "init", "it", "bi", "f", "ji", "hi", "ims", "in", "iti", "u", "yi", "ci", "iso", "di", "I", "mi", "ie", "info", "gi", "ir", "ni", "index", "li", "p", "ei", "si", "print", "pi", "iq", "ti", "iter", "g", "v", "io", "a", "ia", "ij", "zi", "ui", "ini", "ai", "ic", "us", "chain", "iu", " I", "ix", "ind", "ip", "y", "is", "x", "im", "ori", "asi", "l", "ami", "qi", "ki"], "ans": ["uns", "posts", "vs", "asts", "can", "ats", "nan", "pan", "ann", "mails", "vals", "ians", "ors", "lan", "ens", "ones", "aus", "AN", "cs", "outs", "os", "angs", "ams", "anes", "offs", "ots", "eds", "gs", "anks", "ks", "ends", "ins", "an", "lines", "cons", "ars", "ms", "ents", "as", "ns", "ows", "ants", "ids", "ons", "ds", "arts", "ts", "ls", "ANS", "ations", "olds", "ads"], "j": ["oj", "b", "m", "ja", "br", "bo", "it", "ji", "jj", "jc", "jac", "ev", "q", "str", "z", "by", "uj", "bj", "ph", "k", "jump", "json", "je", "pt", "pr", "ju", "kj", "kid", "jl", "obj", "jo", "g", "other", "aj", "jp", "ij", "dj", "jas", "J", "ind", "fr", "js", "y", "key", "err", "job", "ge"], "living": ["live", "sufficient", "vest", "training", "friendly", "threatening", "standing", "treated", "life", "blooded", "increasing", "flying", "winning", "facing", "lived", "reading", "serving", "walking", "looking", "keeping", "stretched", "dropping", "raising", "anging", "illing", "cling", "born", "stellar", "smoking", "ving", "fresh", "warming", "rising", "breeding", "FINEST", "ogging", "worthy", "including", "growing", "watching", "speaking", "virt", "Living", "liv", "starting"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\tint n = scanner.nextInt();\\n\t\tint k = scanner.nextInt();\\n\t\tString s = scanner.next();\\n\\n\t\tchar conv = Character.toLowerCase(s.charAt(k - 1));\\n\t\tString pre = (k == 1 ? \"\" : s.substring(0, k - 1));\\n\t\tString next = (k == n ? \"\" : s.substring(k));\\n\\n\t\tSystem.out.println(pre + conv + next);\\n\t}\\n}", "target": "71", "substitutes": {"scanner": ["canter", " scaner", "caninner", "Scanener", "Scanner", " scanener", "canener", "canator", "scanator", "scaninner", "caner", "Scaner", " scanator", " Scaner", " scaninner", "scanener", "canner", "scaner", "scanter", " Scanter", "Scaninner", " Scanener", " Scanner", " scanter", "Scanator", "Scanter"], "n": ["ng", "m", "h", "b", "j", "i", "e", "nn", "fn", "q", "z", "ln", "u", "nd", "t", "mn", "nm", "p", "en", "nc", "c", "np", "N", "an", "nb", "w", "d", "v", "a", "g", "ns", "num", "nl", "sn", "na", "y", "cn", "l", "nt"], "k": ["ask", "mk", "unk", "m", "j", "dk", "sk", "i", "ke", "ik", "ko", "nn", "kn", "q", "z", "kr", "km", "ok", "t", "ikk", "wk", "kh", "kind", "mn", "ak", "ch", "kick", "ck", "kj", "uk", "spec", "kid", "p", "ks", "ka", "kl", "mc", "kat", "w", "g", "v", "K", "num", "kk", "kan", "kw", "tk", "o", "max", "ek", "ku"], "s": ["rs", "b", "h", "string", "its", "ats", "str", "fs", "ss", "ims", "S", "sb", "r", "abs", "gets", "bs", "t", "qs", "sys", "gs", "p", "c", "ins", "sql", "ys", "g", "strings", "less", "sv", "ms", "self", "sl", "ns", "south", "sts", "sp", "ds", "ps", "js", "ts", "ls", "is", "source", "sq"], "conv": ["aff", "imp", "msg", "con", "lu", "dial", "av", "cv", "Con", "utf", "vp", "cb", "nv", "perm", "enc", "cu", "conn", "cil", "vl", "uv", "np", "vert", "canon", "conf", "sav", "v", "version", "jp", "sv", "lang", "inv", "util", "vr", "cmp", "ver", "func", "cn", "csv", "fp"], "pre": ["prev", "pron", "per", "inter", "ap", "Pref", "prem", "pan", "par", "admin", "primary", "re", "prep", "pri", "rel", "py", "before", "pretty", "pr", "pkg", "PRE", "pen", "p", "prefix", "plan", "begin", "common", "ps", "pret", "pro", "pres", "post", "Pre", "ori", "gre", "pp", "pred", "air"], "next": ["prev", "ng", "video", "current", "adj", "extra", "j", "seq", "sequence", "str", "after", "link", "nn", "success", "net", "nd", "continue", "dd", "read", "sen", "pn", "rand", "series", "ne", "network", "je", "result", "first", "nm", "li", "p", "front", "match", "send", "np", "Next", "data", "draw", "get", "txt", "then", "end", "response", "output", "path", "more", "jp", "step", "shift", "ns", "chain", "last", "scan", "secondary", "fr", "append", "post", "dn", "reset", "sec", "nt"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint N = Integer.parseInt(br.readLine());\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tString[] str = br.readLine().split(\" \");\\n\t\t\tint[] sides = new int[str.length];\\n\t\t\tfor (int j = 0; j < str.length; j++) {\\n\t\t\t\tsides[j] = Integer.parseInt(str[j]);\\n\t\t\t}\\n\t\t\tArrays.sort(sides);\\n\t\t\tif (Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2)) {\\n\t\t\t\tSystem.out.println(\"YES\");\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(\"NO\");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "65", "substitutes": {"br": ["bridge", "b", "lr", "Br", "shr", "bl", "cr", "dr", "r", "ctr", "ger", "kr", "bs", "bc", "buf", "rys", "rel", "cb", "ch", "gb", "pr", "bg", "bd", "bm", "hr", "db", "rb", "bp", "bro", "jp", "ij", "gr", "vr", "bt", "yr", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "rem", "mr", "BR"], "N": ["NH", "Node", "P", "NN", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "NS", "I", "GN", "D", "NO", "NB", "L", "ND", "V", "TN", "Size", "NM", "NG", "Net", "NT", "NA", "T", "K", "J", "NE", "n", "No", "M", "Z", "X", "O"], "i": ["ii", "phi", "out", "m", "xi", "me", "multi", "sim", "it", "bi", "init", "e", "f", "q", "ims", "r", "u", "ci", "di", "I", "mi", "this", "ie", "ni", "li", "p", "si", "print", "pi", "ex", "iq", "ti", "v", "a", "io", "name", "zi", "ui", "ini", "ai", "us", "iu", "n", "ix", "ind", "ip", "y", "o", "is", "x", "im", "asi", "qi", "ki"], "str": ["string", "STR", "char", "bl", "it", "seq", "url", "dr", "r", "arr", "ctr", "Str", "inst", "parts", "split", "coll", "art", "enc", "list", "vol", "spec", "len", "part", "form", "stri", "obj", "sw", "txt", "res", "st", "name", "sl", "chain", "gr", "text", "div", "dat", "tree", "tr", "sts", "sp", "fr", "hex", "ts", "wr", "del", "sec"], "sides": ["gsided", "seide", "Sends", "sizes", "Sides", "assided", "convidelines", "sapes", "hided", " side", "convidal", "sidal", " sidal", "slides", " spects", "jsided", "sepects", "hides", "convapes", "slided", "presidelines", " sigs", "hiders", "seides", "Sizes", "shiders", "assides", " sizes", "assiders", "presides", "shides", "gside", "sided", "sligs", "gsiders", "rsigs", "slide", "rsides", "gsides", "assIDES", "sliders", "presapes", "presidal", "slends", "siders", "convides", "sends", "rsiders", " sidelines", "side", "sIDES", "hIDES", "seiders", " siders", "sigs", "spects", " sends", "seided", "sidelines", "shpects", " sapes", "Side", "slizes", "jsides", "jsiders", "shide", "rside", "jsIDES"], "j": ["jet", "oj", "b", "m", "msg", "ct", "ja", "ji", "jj", "jc", "q", "z", "uj", "bj", "ph", "k", "jump", "att", "json", "je", "pt", "pr", "on", "kj", "off", "kid", "note", "ot", "jl", "obj", "jo", "g", "bot", "v", "d", "aj", "other", "jp", "ij", "Ja", "dj", "J", "jas", "handle", "ix", "fr", "jack", "js", "y", "key", "l", "job"]}}
{"code": "\\nimport java.util.Scanner;\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = Integer.parseInt(sc.next());\\n\t\tint D = Integer.parseInt(sc.next());\\n\\n\t\tint a = N / (2*D + 1);\\n\t\tint b = N % (2*D + 1);\\n\t\tif(b == 0) {\\n\t\t\tSystem.out.println(a);\\n\t\t} else {\\n\t\t\tSystem.out.println(a+1);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "238", "substitutes": {"sc": [" Sc", "system", "cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "cont", "esc", "Sc", "ctl", "ch", "osc", "pc", "isc", "uc", "sys", "mc", "scl", "c", "nc", "SC", "gc", "sw", "inc", "src", "sv", "nl", "scan", "lc", "sp", "sel", "asc", "conv", "cgi", "sch", "sec", "anc", "usc", "sq"], "N": ["B", "E", "P", "F", "NN", "NI", "Ni", "Num", "S", "NR", "SN", "G", "NS", "A", "I", "NV", "NUM", "NP", "NC", "NB", "L", "ND", "V", "TN", "NG", "H", "NT", "NA", "Y", "T", "K", "J", "n", "M", "R", "C", "X", "O"], "D": ["DM", "B", "IND", "P", "F", "FD", "Dir", "DF", "DE", "DC", "DL", "DN", "DEV", "S", "DS", "G", "STD", "dL", "W", "L", "DP", "V", "DX", "DI", "Den", "d", "DES", "T", "DATA", "K", "DB", "Q", "DOM", "Ds", "M", "R", "Length", "DIR", "C", "DD", "Z", "O", "DOS"], "a": ["aaa", "m", "sta", "la", "oa", "j", "sa", "i", "aq", "f", "sha", "z", "era", "t", "at", "A", "au", "area", "ab", "ca", "ma", "ac", "p", "ba", "ao", "ea", "xa", "ta", "an", "aa", "d", "ia", "aj", "add", "ai", "as", "alpha", "n", "na", "o", "l", "ae"], "b": ["B", "m", "eb", "ob", "j", "i", "e", "bi", "f", "r", "be", "z", "sb", "fb", "bs", "bc", "t", "ab", "ib", "beta", "bb", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "bp", "mb", "base", "n", "reb", "l"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.*;\\nimport java.lang.Math;\\nimport java.math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        FS reader = new FS();\\n        // write reader\\n        int A = reader.nextInt();\\n        int B = reader.nextInt();\\n        if (A*B==2) System.out.println(3);\\n        else if (A*B==3) System.out.println(2);\\n        else System.out.println(1);\\n    }\\n\\n    // Read Class\\n    static class FS {\\n        private final InputStream in = System.in;\\n        private final byte[] buffer = new byte[1024];\\n        private int ptr = 0;\\n        private int buflen = 0;\\n        private boolean hasNextByte() {\\n            if (ptr < buflen) {\\n                return true;\\n            } else {\\n                ptr = 0;\\n                try {\\n                    buflen = in.read(buffer);\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n                if (buflen <= 0) {\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n    \\n        private int readByte() { return hasNextByte() ? buffer[ptr++] : -1;}\\n        private boolean isPrintableChar(int c) {return 33 <= c && c <= 126;}\\n        private void skipUnprintable() {while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\\n    \\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\\n        public String next() {\\n            if (!hasNext()) throw new NoSuchElementException();\\n            StringBuilder sb = new StringBuilder();\\n            int b = readByte();\\n            while(isPrintableChar(b)) {\\n                sb.appendCodePoint(b);\\n                b = readByte();\\n            }\\n            return sb.toString();\\n        }\\n        public int nextInt() {\\n            return (int)nextLong();\\n        }\\n        public long nextLong() {\\n            if (!hasNext()) throw new NoSuchElementException();\\n            long n = 0;\\n            boolean minus = false;\\n            int b = readByte();\\n            if (b == '-') {\\n                minus = true;\\n                b = readByte();\\n            }\\n            if (b < '0' || '9' < b) {\\n                throw new NumberFormatException();\\n            }\\n            while(true) {\\n                if ('0' <= b && b <= '9') {\\n                    n *= 10;\\n                    n += b - '0';\\n                } else if(b == -1 || !isPrintableChar(b)) {\\n                    return minus ? -n : n;\\n                } else {\\n                    throw new NumberFormatException();\\n                }\\n                b = readByte();\\n            }\\n        }\\n    }\\n}\\n\\n", "target": "236", "substitutes": {"reader": [" root", " sender", " read", " cache", " path", " fid", " writer", " readers", " db", " fin", " os", " af", " parser", " store", " sr", " rs", " loader", " builder", "Fs", " df", " fuse", "Reader", " sys", " src", " schema", " factory", " sd", " foo", " scanner"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    int c = sc.nextInt();\\n    int k = sc.nextInt();\\n    int answer=0;\\n    int max=a;\\n    int other1=b;\\n    int other2=c;\\n    if(b>max){\\n      max=b;\\n      other1=a;\\n      other2=c;\\n    }\\n    if(c>max){\\n      max=c;\\n      other1=a;\\n      other2=b;\\n    }\\n    for(int i=0;i<k;i++){\\n      max *= 2;\\n    }\\n    System.out.print(max+other1+other2);\\n  }\\n}\\n", "target": "201", "substitutes": {"sc": ["out", "system", "cc", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "exec", "uc", "sys", "spec", "mc", " scr", "nc", "sci", "scl", "SC", "gc", "inc", "fc", "st", "sv", "scope", "dc", "lc", "scan", "sp", "cmp", "asc", "conv", "cgi", "ctrl", "sch", "sec", "anc", "usc", "syn", "sq"], "a": ["act", "aaa", "la", "oa", "sa", "e", "f", "r", "am", "ed", "at", "t", "A", "au", "area", "ab", "ca", "ak", "ax", "ma", "app", "ac", "p", "ba", "af", "ao", "ea", "ta", "an", "aa", "g", "ia", "aj", "ar", "v", "ga", "as", "ai", "access", "alpha", "ra", "va", "ach", "x", "l", "ae"], "b": ["B", "eb", "ob", "br", "ub", "bi", "f", "e", "pb", "bf", "r", "be", "sb", "u", "fb", "abs", "z", "bs", "bc", "t", "lib", "ab", "ib", "cb", "gb", "bis", "bb", "back", "ac", "p", "ba", "db", "rb", "nb", "g", "bp", "v", "mb", "bar", "n", "y", "x", "l", "wb", "erb"], "c": ["ct", "con", "cc", "e", "cat", "f", "cr", "tc", "rc", "r", "z", "u", "cv", "ci", "bc", "cm", "cs", "t", "cd", "com", "ec", "cb", "ca", "ch", "cf", "cur", "cu", "uc", "ac", "p", "mc", "gc", "fc", "d", "g", "arc", "ic", "co", "dc", "ce", "lc", "n", "o", "unc", "C", "cn", "col", "l", "cp"], "k": ["mk", "unk", "m", "j", "dk", "sk", "ke", "ik", "ko", "q", "kn", "z", "kr", "km", "ok", "ak", "ck", "kj", "kid", "p", "kl", "ka", "ks", "g", "v", "K", "kk", "kw", "n", "tk", "key", "ek", "ku", "ki"], "answer": ["done", "current", "m", "tmp", "age", "init", "test", "copy", "error", "set", "result", "counter", "match", "status", "iq", "write", "iter", "g", "mem", "total", "version", "ij", "all", "inv", "base", " j", "ver", "err"], "max": ["h", "r", "cv", "rand", "prime", "huge", "Max", "box", "best", "res", "scale", "gt", "can", "top", "core", "right", "always", "go", "ax", "recent", "load", "high", "maximum", "total", "ms", "chain", "length", "now", "view", "upper", "sum", "global", "hash", "mod", "range", "current", "tmp", "MAX", "init", "full", "ox", "mx", "med", "conf", "prefix", "count", "rank", "default", "rest", "size", "rev", "master", "con", "j", "show", "cache", "cam", "min", "lock", "limit", "height", "ma", "major", "end", "auto", "step", "mad", "co", "last", "base", "map", "mean", "x", "old"], "other1": ["relation51", "how1", "boot81", "boot91", "other81", "mont1", "other11", "objectOne", "what91", "OTHER101", "OTHER91", "what81", "OTHER0", "other51", "object0", "object101", "how11", " other81", "OTHER1", "relation11", "relation1", "thing1", "thing11", "other91", "OTHEROne", "object1", "otherOne", "relation91", "how91", " other101", "montOne", "other0", "thing51", " other0", "mont0", "thing91", "how51", "boot1", "other101", "what1", "mont81", " otherOne", "OTHER81"], "other2": ["common42", "OTHER4", " other02", "back1", "OTHER3", " otherb", "other02", "OTHER2", "Otherb", "back2", "Other4", "Other1", "backb", "other4", "berb", "OTHER1", "ber02", "common2", "back4", "other42", "otherb", " other42", "other3", "Other3", " other3", "Other2", "ber2", "commonb", " other4", "common02", "ber42"], "i": ["ii", "phi", "m", "gu", "xi", "me", "multi", "sim", "j", "fi", "it", "bi", "hi", "q", "u", "ci", "t", "di", "I", "mi", "ie", "gi", "ni", "li", "si", "pi", "iq", "ti", "g", "cli", "zi", "ui", "ms", "ini", "ai", "uu", "us", "chain", "ish", "iu", "ix", "ip", "y", "is", "x", "qi", "ki"]}}
{"code": "/*\\n    Author: @__goku__\\n    ssrivastava990@gmail.com\\n\\n                   `\\-.   `\\n                      \\ `.  `\\n                       \\  \\ |\\n              __.._    |   \\.       S O N - G O K U\\n       ..---~~     ~ . |    Y\\n         ~-.          `|    |\\n            `.               `~~--.\\n              \\                    ~.\\n               \\                     \\__. . -- -  .\\n         .-~~~~~      ,    ,            ~~~~~~---...._\\n      .-~___        ,'/  ,'/ ,'\\          __...---~~~\\n            ~-.    /._\\_( ,(/_. 7,-.    ~~---...__\\n           _...>-  P\"\"6=`_/\"6\"~   6)    ___...--~~~\\n            ~~--._ \\`--') `---'   9'  _..--~~~\\n                  ~\\ ~~/_  ~~~   /`-.--~~\\n                    `.  ---    .'   \\_\\n                      `. \" _.-'     | ~-.,-------._\\n                  ..._../~~   ./       .-'    .-~~~-.\\n            ,--~~~ ,'...\\` _./.----~~.'/    /'       `-\\n        _.-(      |\\    `/~ _____..-' /    /      _.-~~`.\\n       /   |     /. ^---~~~~       ' /    /     ,'  ~.   \\\\n      (    /    (  .           _ ' /'    /    ,/      \\   )\\n      (`. |     `\\   - - - - ~   /'      (   /         .  |\\n       \\.\\|       \\            /'        \\  |`.           /\\n       /.'\\\\      `\\         /'           ~-\\         .  /\\\\n      /,   (        `\\     /'                `.___..-      \\\\n     | |    \\         `\\_/'                  //      \\.     |\\n     | |     |                 _Seal_      /' |       |     |\\n */\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main\\n{\\n    static PrintWriter out = new PrintWriter((System.out));\\n\\n    public static void main(String args[]) throws IOException\\n    {\\n        Kioken sc = new Kioken();\\n        int d=sc.nextInt();\\n        int t=sc.nextInt();\\n        int s=sc.nextInt();\\n        double t1=(double)d/s;\\n        if(t1<=t)\\n        {\\n            out.println(\"Yes\");\\n        }\\n        else\\n        {\\n            out.println(\"No\");\\n        }\\n        out.close();\\n    }\\n\\n    public static void kamehameha()\\n    {\\n    }\\n\\n    public static int lower_bound(ArrayList<Integer> ar, int k)\\n    {\\n        int s = 0, e = ar.size();\\n        while (s != e)\\n        {\\n            int mid = s + e >> 1;\\n            if (ar.get(mid) <= k)\\n            {\\n                s = mid + 1;\\n            }\\n            else\\n            {\\n                e = mid;\\n            }\\n        }\\n        return Math.abs(s) - 1;\\n    }\\n\\n    public static int upper_bound(ArrayList<Integer> ar, int k)\\n    {\\n        int s = 0;\\n        int e = ar.size();\\n        while (s != e)\\n        {\\n            int mid = s + e >> 1;\\n            if (ar.get(mid) < k)\\n            {\\n                s = mid + 1;\\n            }\\n            else\\n            {\\n                e = mid;\\n            }\\n        }\\n        if (s == ar.size())\\n        {\\n            return -1;\\n        }\\n        return s;\\n    }\\n\\n    static class Kioken\\n    {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st = new StringTokenizer(\"\");\\n\\n        public String next()\\n        {\\n            while (!st.hasMoreTokens())\\n            {\\n                try\\n                {\\n                    st = new StringTokenizer(br.readLine());\\n                }\\n                catch (Exception e)\\n                {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        public int nextInt()\\n        {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public long nextLong()\\n        {\\n            return Long.parseLong(next());\\n        }\\n\\n        public double nextDouble()\\n        {\\n            return Double.parseDouble(next());\\n        }\\n\\n        public String nextLine()\\n        {\\n            try\\n            {\\n                return br.readLine();\\n            }\\n            catch (Exception e)\\n            {\\n                e.printStackTrace();\\n            }\\n            return null;\\n        }\\n\\n        public boolean hasNext()\\n        {\\n            String next = null;\\n            try\\n            {\\n                next = br.readLine();\\n            }\\n            catch (Exception e)\\n            {\\n            }\\n            if (next == null || next.length() == 0)\\n            {\\n                return false;\\n            }\\n            st = new StringTokenizer(next);\\n            return true;\\n        }\\n    }\\n}", "target": "246", "substitutes": {"out": ["m", "console", "con", "aos", "str", "error", "cmd", "in", "r", "OUT", "ln", "file", "user", "at", "format", "ou", "outs", "lock", "os", "println", "ch", "pretty", "std", "buffer", "sys", "client", "Out", "log", "list", "report", "null", "p", "c", "print", "inner", "crit", "ins", "ex", "obj", "write", "txt", "w", "res", "v", "io", "output", "name", "input", "all", "screen", "us", "co", "l", "dir", "n", "table", "flush", "conv", "o", "writer", "sum", "err", "nt"], "sc": [" Sc", "tch", "cc", "tc", "ss", "cr", "rc", "pb", "cl", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "ctl", "isc", "pc", "osc", "ch", "cu", "sys", "ck", "mc", "scl", "nc", "c", "si", "SC", "gc", "ctx", "fc", "lc", "sp", "asc", "conv", "ctrl", "sch", "sec", "usc", "sq"], "d": ["m", "h", "b", "fd", "j", "i", "f", "dm", "dx", "r", "z", "dd", "D", "di", "dra", "dt", "p", "c", "w", "g", "v", "a", "pd", "td", "n", "dat", "ds", "id", "sd", "x", "l"], "t": ["ty", "m", "h", "b", "tu", "j", "i", "tc", "q", "z", "at", "wt", "dt", "tp", "p", "c", " T", "ot", "ta", "w", "g", "v", "T", "type", "n", "y", "ts", "o", "tt", "l", "te"], "s": ["h", "changes", "ats", "les", "ss", "q", "ains", "ags", "er", "ends", "sw", "w", "v", "ions", "as", "stats", "als", "sd", "ls", "m", "sol", "ies", "f", "ities", "qs", "ences", "ances", "c", "a", "ms", "eps", "ons", "n", "sts", "tes", "js", "y", "ts", "l", "sq", "rs", "ers", "its", "sid", "sa", "fs", "sb", "ed", "se", "sym", "spec", "si", "le", "sr", "sv", "ges", "sp", "o", "size", "b", "j", "i", "xs", "ims", "S", "z", "abs", "u", "ands", "cs", "os", "eds", "p", "gs", "ins", "ys", "g", "less", "ns", "south", "ds", "ps", "is", "x", "ations", "es", "ores"], "t1": ["T2", "p0", "p2", "tOne", "T1", "T0", "t2", "t100", "p1", "t0", "T100", " t0", " t2", "tc2", " tOne", " t100", "TOne", "tc1", "pOne", "tc100", "tc0"], "ar": ["act", "aro", "rs", "lar", "ael", "inter", "aer", "ers", "ear", "addr", "mr", "par", "rar", "r", "am", "arr", "ary", "alist", "ml", "ara", "at", "el", "au", "ard", "tar", "art", "star", "ari", "dar", "rr", "ag", "er", "rg", "list", "ro", "arf", "array", "arc", "cal", "a", "ars", "mar", "ras", "are", "Ar", "arm", "arry", "ra", "har", "asc", "ry", "al", "err", "ir", "car", "arp"], "k": ["mk", "m", "h", "b", "j", "sk", "i", "ke", "f", "ik", "ko", "q", "kn", "r", "z", "kt", "kr", "km", "ok", "wk", "kh", "kind", "ak", "ck", "uk", "kj", "spec", "p", "mc", "kl", "ka", "c", "w", "g", "ku", "v", "K", "kk", "kw", "n", "id", "work", "y", "o", "key", "ek", "l", "tk", "ki"], "e": ["esome", "h", "ev", "ss", "r", "re", "er", "mes", "entity", "v", "or", "ce", "et", "sd", "ate", "eg", "ef", "m", "f", "exc", "ec", "eeee", "ve", "ei", "eff", "eps", "oe", "de", "n", "ent", "y", "es", "l", "we", "E", "eu", "error", "ed", "edge", "el", "exp", "se", "fe", "est", "si", "le", "element", "ee", "ze", "o", "te", "ae", "ge", "me", "pe", "ele", "ke", "be", "event", "ie", "ne", "eh", "en", "p", "ue", "ex", "eng", "g", "end", "esm", "east", "elt", "x", "em", "err"], "mid": ["medium", "mk", "per", "m", "offset", "mat", "mask", "pid", "mer", "sid", "i", "doc", "wid", "rid", "net", "mind", "mill", "hi", "uid", "hend", "nd", "killed", "member", "min", "mo", "cd", "middle", "rel", "mi", "dem", "mate", "parent", "rand", "dev", "med", "md", "mn", "grid", "perm", "len", "inner", "mit", "le", "late", "dim", "my", "mem", "mt", "lay", "ms", "mad", "ini", "mouse", "trans", "mobile", "ind", "lt", "id", "mm", "hei", "pard", "px", "Mid", "partial", "mac", "lem", "man", "mr", "master"], "br": ["b", "lr", "Br", "bsp", "shr", "bl", "cr", "bf", "r", "dr", "sb", "kr", "bs", "bc", "ch", "pt", "pr", "usr", "bd", "bm", "hr", "db", "rb", "sr", "bro", "bp", "bre", "mt", "vr", "bt", "yr", "tr", "sp", "fr", "bh", "ber", "bn", "wr", "browser", "err", "mr", "BR"], "st": ["ost", "ct", "tmp", "sth", "it", "str", "cr", "ft", "ss", "r", "nd", "inst", "sm", "ast", "th", "sty", "se", "so", "ST", " ST", "pt", "fe", "std", "start", "started", "est", "ist", "stop", "sh", "stri", "sw", "St", "mt", "ust", "td", "step", " St", "const", " superst", "bt", " est", "sts", "et", "sp", "fr", "rest", "ts", "stage", "tt", "stat", "ste", "stable", "ut", "nt"], "next": ["prev", "current", "page", "see", "sequence", "test", "forward", "link", "net", "about", "continue", "desc", "frame", "iterator", "read", "sen", "node", "ext", "info", "bis", "result", "first", "entry", "query", "front", "match", "code", "latest", "ner", "method", "Next", "parse", "data", "draw", "get", "then", "trace", "path", " Next", "chain", "last", "handle", "second", "secondary", "now", "default", "append", "pattern", "sequ", "key", "valid", "stat", "sec", "primary"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint count = Integer.parseInt(sc.nextLine());\\n\t\tint[] nums = new int[count];\\n\t\tString[] lines = sc.nextLine().split(\" \");\\n\\n\t\tfor(int i = 0;i < count;i++) {\\n\t\t\tnums[i] = Integer.parseInt(lines[i]);\\n\t\t}\\n\t\tint min = nums[0];\\n\t\tint max = nums[0];\\n\t\tlong sum = 0;\\n\t\tfor(int i = 1;i < count ;i++) {\\n\t\t\tif(nums[i] < min ) {\\n\t\t\t\tmin = nums[i];\\n\t\t\t} else if(nums[i] > max) {\\n\t\t\t\tmax = nums[i];\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i = 0; i < count ; i++) {\\n\t\t\tsum += nums[i];\\n\t\t}\\n\t\tSystem.out.println(min + \" \" + max + \" \" + sum);\\n\t}\\n}", "target": "21", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "rc", "cl", "sb", "bc", "cs", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "ck", "mc", "scl", "nc", "c", "sh", "sub", "SC", "gc", "sw", "inc", "sv", "scan", "lc", "sp", "sel", "ser", "asc", "sec", "anc", "usc", "syn", "sq"], "count": ["range", "current", "h", "ct", "ount", "cat", "cc", "cache", "cmd", "number", "q", "ctr", "z", "span", "hold", "cm", "cont", "history", "ch", "cf", "result", "counter", "index", "list", "consider", "len", "c", "amount", "match", "conf", "code", "currency", "nb", "ctx", "total", "cre", "all", "process", "num", "type", "const", "length", "base", "n", "Count", "ind", "cond", "id", "now", "CC", "frequency", "size", "col", "batch", "find", "found", "nt"], "nums": ["anubes", "nsails", "numogs", " nales", "enats", " noms", "cogs", "nsrums", "namesubes", "enumers", "cumbers", "nales", "anums", "numbers", "nubes", " news", "cms", " nails", "namesaps", "numps", " numers", "namesums", "numumps", " nomes", "anomes", "nsaves", "nsogs", "nsames", "coms", "numums", "enms", "naps", "snums", "anoms", "nuats", "nrums", "news", "nsums", "enumbers", "nsoms", "names", "nsaps", "nogs", "nats", "anumers", "numomes", "snoms", " nogs", "nsews", "nsumps", " naves", "namesews", "cubes", "numails", "anames", "anails", "nails", "numames", "anrums", "enums", "nms", " naps", " numbers", "nsubes", "anogs", "enaves", "anumbers", "snogs", " nubes", "nsales", " nms", "cums", "noms", "nuaves", "enrums", " nats", "nuumers", "nuales", "snumers", "anumps", "nuums", "enumps", "enoms", "nuogs", "nomes", "naves", "numers"], "lines": ["rows", "bytes", "vs", "pins", "its", "words", "mails", "lights", "gets", "vals", "ews", "ines", "elines", "links", "bs", "parts", "frames", " Lines", "outs", "blocks", "ues", "points", "works", "tests", "steps", "qs", "ages", "views", "eds", "issues", "gs", "locks", "ends", "forms", "cells", "times", "ls", "styles", "olds", "lists", "los", "ads"], "i": ["ji", "hi", "q", "ci", "history", "mi", "php", "li", "remote", "iq", "my", "ij", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "e", "bi", "f", "ik", "iy", "json", "ei", "status", "pi", "cli", "zi", "ms", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "init", "fire", "yi", "di", "wi", "info", "gi", "si", "ski", "ti", "io", "\u0438", "ind", "to", "ip", "o", "qi", "umi", "phi", "xi", "me", "j", "sim", "it", "ims", "u", "menu", "set", "ie", "series", "client", "point", "inner", "ex", "g", "ic", "iu", "base", "is", "key", "x", "oi", "batch"], "min": ["act", "range", "m", "me", "lower", "low", "floor", "minimum", "mel", "move", "mint", "net", "remove", "mins", "temp", "Min", "MIN", "only", "mid", "sort", "middle", "rel", "emin", "mi", "diff", "rand", "pl", "mn", "hide", "start", "pre", "first", "index", "ma", "part", "len", "inner", "local", "sin", "bot", "st", "make", "left", "begin", "mini", "lt", "minute", "mean", "mm", "val", "partial", "small", "del", "amin", "master", "mod"], "max": ["range", "act", "out", "m", "h", "pad", "can", "show", "MAX", "full", "net", "right", "grand", "mx", "nd", "window", "cross", "cos", "rand", "med", "up", "prime", "cur", "ax", "recent", "ma", "huge", "Max", "null", "box", "maximum", "res", "st", "end", "v", "total", "add", "auto", "rank", "scale", "step", "mad", "az", "last", "chain", "div", "base", "fr", "default", "view", "mean", "work", "rest", "na", "upper", "x", "size", "grow", "master", "gt", "mod"], "sum": ["sam", "out", "um", "norm", "sim", "mix", "sa", "doc", "prof", "mass", "ass", " sums", "temp", "cos", "se", "med", "hum", "loss", "result", "mu", "vol", "acc", "si", "su", "score", "cum", "summary", "comment", "cal", "add", "total", "mem", "hash", "num", "us", "average", "Sum", "hist", "mary", "mean", "size", "mess", "sat", "mod"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author anand.oza\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BCanYouSolveThis solver = new BCanYouSolveThis();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BCanYouSolveThis {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int n = in.nextInt(), m = in.nextInt(), c = in.nextInt();\\n\\n            int[] b = new int[m];\\n            for (int i = 0; i < m; i++) {\\n                b[i] = in.nextInt();\\n            }\\n\\n            int answer = 0;\\n            for (int test = 0; test < n; test++) {\\n                int sum = c;\\n                for (int i = 0; i < m; i++) {\\n                    int a = in.nextInt();\\n                    sum += a * b[i];\\n                }\\n                if (sum > 0) {\\n                    answer++;\\n                }\\n            }\\n\\n            out.println(answer);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "68", "substitutes": {"inputStream": ["helloView", "inputSocket", " inputView", " inputSocket", "dataStream", "hellostream", "outputSteam", "inputstream", "inputSteam", " inputSteam", "sourceSteam", " inputWindow", "helloStream", "sourceStream", "outputView", "dataSocket", "inputView", "dataSteam", "helloSteam", "outputstream", " inputstream", "sourceWindow", "inputWindow", "dataWindow", "sourceSocket"], "outputStream": [" outputPort", "connectionstream", "displayStream", "outputWriter", "connectionStream", "outputStreamer", "networkStreamer", "displayPort", "networkStream", " outputSteam", "outputSteam", "inputstream", "inputSteam", "connectionSteam", "displaySteam", "responseStream", "responseWriter", "responseSteam", "displayWriter", "networkSteam", "connectionStreamer", "outputstream", "inputStreamer", "networkstream", "outputPort", "responsePort", " outputWriter"], "in": ["lo", "q", "r", "re", "rin", "mi", "on", "er", "log", "inside", "inn", "bin", "ini", "ai", "or", "mm", "doc", "run", "net", "file", "local", "and", "cin", "st", "output", "env", "din", "al", "l", "current", "inf", "isin", "context", "init", "el", "IN", "info", "up", "from", "conf", "form", "ain", "inc", "sql", "get", "d", "io", "add", "input", "nin", "ind", "source", "per", "In", "con", "s", "it", " din", "by", "gin", "ma", "null", "en", "ac", "ins", "inner", "iter", "sin", "end", "raw", "is", "err", "rt"], "out": ["current", "s", "tmp", "aos", "it", "cache", "cmd", "net", "r", "OUT", "user", "t", "at", "set", "pool", "ou", "outs", "os", "outer", "this", "ch", "up", "result", "conn", "sys", "client", "Out", "log", "list", "er", "null", "p", "report", "print", "inner", "ex", "obj", "write", "txt", "w", "gc", "res", "end", "output", "io", "v", "all", "screen", "or", "co", "l", "table", "ver", "to", "flush", "o", "writer", "err", "OU", "nt"], "solver": ["soln", "ssoln", "Soler", " solution", "resoln", "resolution", "resolves", "ssolves", "solution", "rsolve", "Solver", " soln", "resolver", "ssolution", "soler", "ssoler", "ssolver", "rsoler", "solves", " solves", "Solve", "rsolver", "rsolution", "solve", "ssolve", "Solution"], "testNumber": ["caseNo", "testingNo", "TestNum", "testnumber", "TestNo", "testingNum", "testingnumber", "caseNumber", "caseNum", "testNo", "testingNumber", "Testnumber", "testNum", "TestNumber", "casenumber"], "n": ["j", "nan", "nn", "net", "r", "ln", "u", "t", "nr", "ne", "mn", "network", "p", "np", "nc", "N", "nb", "d", "v", "nu", "no", " N", "ns", "num", "un", "nl", "sn", "nw", "na", "o", "x", "cn", "l", "nt"], "m": ["mat", "h", "me", "um", "j", "e", "q", "r", "u", "mx", "cm", "km", "sm", "t", "mo", "k", "mi", "mn", "ma", "mc", "p", "bm", "mp", "g", "d", "v", "mem", "mt", "ms", "num", "tm", "M", "mm", "y", "o", "x", "im", "em", "l", "man", "mr"], "c": ["h", "ct", "con", "s", "cc", "e", "f", "r", "z", "u", "ci", "cm", "cs", "t", "com", "k", "ch", "cu", "p", "mc", "count", "w", "d", "v", "co", "ce", "lc", "C", "cn", "l", "cp"], "b": ["B", "eb", "ob", "binary", "ble", "bo", "br", "bl", "bi", "bf", "r", "sb", "be", "fb", "bs", "bc", "lib", "blue", "ab", "kb", "ib", "gb", "bis", "bas", "bb", "back", "bd", "p", "ba", "db", "rb", "nb", "bp", "bin", "bar", "bt", "wb"], "i": ["ii", "phi", "xi", "me", "j", "multi", "ri", "it", "bi", "e", "init", "ji", "u", "ci", "iy", "di", "I", "parent", "mi", "ie", "info", "gi", "client", "list", "li", "p", "ei", "si", "point", "status", "pi", "iq", "ti", "io", "my", "ij", "zi", "ui", "cli", "ini", "ai", "ic", "\u0438", "chain", "iu", "ix", "ind", "ip", "y", "o", "is", "uri", "x", "im", "PI", "ami", "ity", "qi", "ki"], "answer": ["ask", "message", "offer", "equ", "um", "see", "echo", "sequence", "value", "wer", "aq", "error", "number", "window", "area", "record", "energy", "result", "accept", "index", "zero", "ve", "next", "Answer", "query", "answered", "entry", "su", "turn", "response", "option", "draw", "rent", "v", "output", "ace", "onse", "open", "vote", "fit", "average", "ver", "val", "x", "question", "sample"], "test": ["tested", "check", "term", "Test", "pred", "sim", "feature", "tmp", "testing", "the", "f", "tc", "trip", "train", "unit", "ter", "temp", "time", "set", "section", "t", "dev", "tx", "race", "result", "pre", "est", "match", "iter", "rent", "repeat", "trial", "or", "type", "tr", "ver", "val", "valid", "task", "old", "err", "te", "tri", "tf"], "sum": ["sam", "save", "tu", "um", "message", "sim", "sa", "comment", "cache", "square", "am", "u", "temp", "set", "balance", "ca", "ums", "result", "zero", "share", "ma", "sub", "acc", "si", "amount", "su", "ta", "count", "cum", "response", "trace", "summary", "cal", "v", "total", "mem", "add", "scale", "num", "fill", "average", "alpha", "Sum", "mean", "max", "size", "fac", "hash", "sample", "mod"], "a": ["um", "sta", "la", "apa", "s", "sa", "f", "am", "z", "t", "set", "A", "au", "at", "area", "ca", "ma", "app", "ac", "p", "ba", "si", "ea", "xa", "ta", "count", "data", "aa", "ia", "name", "aj", "as", "alpha", "na", "o", "l"], "reader": ["term", "rx", "redo", "context", " read", "liner", "rc", " writer", "dr", "r", "rl", "file", "driver", "rar", "user", "wrapper", "window", "manager", "row", "iterator", "handler", "read", "linger", "buffer", "zero", "finder", "er", "ner", "ro", "parser", "inner", "rer", "iter", "data", "loader", "input", "worker", "Reader", "runner", "handle", "owner", "oder", "builder", "writer", "rr", "older"], "tokenizer": ["tokeniser", " tokenzer", " tokenner", "okenator", "Tokenize", "okenizer", "terminization", "terminizer", "tokenization", "Tokenizer", "okenener", "okenize", "normalifier", "Tokenzer", "Tokener", "okenner", " tokeniser", "normalner", "Tokeniser", "okenger", "tokenifier", "tokenner", " tokenization", "Tokenifier", " tokenize", "Tokenener", "serialifier", " tokener", "tokenize", "terminifier", "tokenger", " tokenener", "okenization", "tokener", "serialger", "terminner", "okeniser", " tokenifier", "Tokenner", "normalization", "tokenener", "serializer", "Tokenger", "Tokenization", "normalizer", "okenifier", " tokenger", "okenzer", "Tokenator", "tokenzer", "serialer", "tokenator", "serialzer", "serialization", " tokenator"], "stream": ["message", "console", "system", "channel", "context", "file", "Stream", "driver", "event", "body", "wrapper", "window", "pool", "row", "history", "poll", "iterator", "this", "network", "stack", "secure", "loop", "buffer", "pipe", "inner", "form", "data", "port", "loader", "style", "output", "io", "path", "input", "type", "zip", "phrase", "view", "source", "sample"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\ttry (Scanner scn = new Scanner(System.in)) {\\n\t\t\tint N = scn.nextInt();\\n\t\t\tint K = scn.nextInt();\\n\\n\t\t\tint[] A = new int[N];\\n\t\t\tint[][] ak = new int[K][N+1];\\n\\n\t\t\tfor(int i = 0; i < K; i++) {\\n\t\t\t\tak[i][0] = scn.nextInt();\\n\t\t\t\tfor(int j = 1; j <= ak[i][0]; j++) {\\n\t\t\t\t\tak[i][j] = scn.nextInt();\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tfor(int i = 0; i < K; i++) {\\n\t\t\t\tfor(int j = 1; j <= ak[i][0]; j++) {\\n\t\t\t\t\tA[ak[i][j]-1] = 1;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\\n\t\t\tint cnt = 0;\\n\t\t\tfor(int i = 0; i < N; i++) {\\n\t\t\t\tif(A[i] == 0) cnt++;\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(cnt);\\n\t\t}\\n\t}\\n}", "target": "81", "substitutes": {"N": ["B", "NH", "Node", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NL", "AN", "NS", "I", "D", "NO", "GN", "NP", "NC", "NB", "L", "ND", "V", "TN", "Name", "NM", "NK", "NT", "KN", "NA", "Y", "T", "J", "NE", "n", "No", "M", "C", "Z", "Na"], "K": ["AC", "KA", "P", "KI", "UK", "KE", "OK", "SK", "WH", "S", "G", "KB", "Kent", "AN", "I", "k", "Key", "NC", "L", "V", "TN", "KS", "TH", "NK", "KN", "KT", "NA", "T", "J", "KING", "Q", "IK", "NE", "M", "R", "KK", "KEY", "C", "Z", "KC", "KR", "X", "O", "PK", "VK"], "A": ["AC", "AT", "B", "What", "P", "Va", "At", "Ass", "AA", "As", "S", "CA", "BA", "ACA", "AI", "AB", "D", "AH", "W", "SA", "Am", "RAM", "VA", "All", "Al", "ACT", "AF", "An", "AM", "AU", "AV", "a", "HA", "TA", "Ar", "Alpha", "WA", "Array", "alpha", "AX", "AR", "M", "C", "EA", "AP"], "ak": ["ask", "mk", "unk", "oss", "aval", "tek", "aked", "ap", "dk", "oak", "sa", "aq", "can", "ke", "ik", "am", "av", "aki", "ank", "ok", "iak", "k", "iv", "wk", "acs", "art", "ah", "ake", "ck", "uk", "kj", "orn", "ash", "aps", "ac", "aka", "ka", "aks", "var", "Pak", "an", "hak", "ack", "a", "aj", "ar", "ace", "aker", "pak", "ai", "as", "az", "Ak", "ape", "ark", "rak", "ait", "AK", "ang", "alk", "ek", "ov", "Kay", "ave", "air"], "i": ["hi", "q", "iti", "ci", "iso", "mi", "list", "li", "remote", "iq", "ij", "ui", "ini", "ai", "ish", "ix", "m", "multi", "bi", "f", "iy", "at", "ei", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "eu", "init", "details", "di", "wi", "info", "gi", "index", "si", "ti", "io", "iri", "\u0438", "ind", "ip", "PI", "ori", "qi", "phi", "xi", "me", "sim", "it", "ims", "iii", "I", "this", "ie", "series", "point", "iter", "ia", "ic", "iu", "base", "is", "oi", "batch"], "j": ["oj", "b", "s", "og", "ja", "br", "bo", "ji", "jj", "str", "jc", "e", "it", "q", "dr", "z", "uj", "bj", "el", "k", "jump", "son", "jit", "ie", "json", "je", "pt", "pr", "ju", "kj", "off", "ax", "kid", "p", "note", "ot", "jl", "obj", "jo", "g", "other", "Ja", "v", "aj", "io", "jp", "ij", "dj", "J", "jas", "n", "tr", "ix", "fr", "js", "y", "o", "l", "job"], "cnt": ["dcct", "arcount", "dcount", "Cct", "cct", "arcct", "Cnz", "dcnz", "cunt", " cn", "Cnt", "cuct", "count", "arcnt", " ccount", "Cn", " count", "cnz", "ccount", "Count", "arcn", "cuount", "dcnt", "Ccount", "cn", "cucount", " cct", " cnz"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint appart[][][] = new int[4][3][10];\\n\t\t\\n\t\tfor(int i = 0; i < 4; i++)\\n\t\t\tfor(int j = 0; j < 3; j++)\\n\t\t\t\tfor(int k = 0; k < 10; k++)\\n\t\t\t\t\tappart[i][j][k] = 0;\\n\t\t\\n\t\tint n = sc.nextInt();\\n\t\t\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tint b = sc.nextInt();\\n\t\t\tint f = sc.nextInt();\\n\t\t\tint r = sc.nextInt();\\n\t\t\tint v = sc.nextInt();\\n\t\t\t\\n\t\t\tappart[b-1][f-1][r-1] += v;\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0; i < 4; i++){\\n\t\t\tfor(int j = 0; j < 3; j++){\\n\t\t\t\tfor(int k = 0; k < 10; k++){\\n\t\t\t\t\tSystem.out.print(\" \" + appart[i][j][k]);\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(\"\");\\n\t\t\t}\\n\t\t\tif(i < 3)\\n\t\t\t\tSystem.out.println(\"####################\");\\n\t\t}\\n\t}\\n}", "target": "211", "substitutes": {"sc": ["system", "cc", "tc", "cr", "ss", "rc", "pb", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", "psc", "mc", "p", "c", "nc", "sci", "scl", "si", "SC", "gc", "sw", "fc", "ctx", "sv", "dc", "scan", "lc", "sp", "asc", "conv", "anc", "sec", "usc", "irc", "sq"], "appart": ["attarts", "Appart", "attART", "Appard", "appar", "Appant", " Apparts", " appar", "pparts", " Appat", " appard", "Apparts", "attard", "apparts", "Appar", " appant", " appat", "appard", "ppar", "ppart", " Appard", "apant", "aparts", "attart", " Appart", " appART", " apparts", "appART", "AppART", "appat", "apART", "apard", "appant", "apat", "apart", "ppART"], "i": ["la", "ji", "hi", "q", "in", "iti", "ci", "mi", "li", "iq", "name", "ij", "ui", "ini", "ai", "us", "or", "ix", "ion", "multi", "bi", "iy", "ei", "status", "pi", "zi", "id", "y", "im", "al", "ami", "ity", "ki", "ii", "ri", "fi", "eu", "init", "di", "info", "gi", "index", "si", "sql", "ti", "iri", "ind", "ip", "ir", "qi", "phi", "xi", "me", "sim", "it", "ims", "u", "I", "this", "ie", "ib", "p", "ex", "iter", "g", "ia", "ic", "iu", "is", "x", "oi"], "j": ["oj", "out", "adj", "og", "ja", "br", "bl", "jc", "jj", "bo", "ji", "it", "q", "z", "be", "uj", "bj", "bs", "el", "jump", "rel", "jit", "json", "pt", "pr", "kj", "off", "er", "jl", "obj", "jo", "g", "other", "Ja", "aj", "jp", "ij", "dj", "J", "us", "jas", "or", "sp", "ind", "fr", "js", "to", "y", "o", "x", "im", "ion", "job", "let"], "k": ["mk", "unk", "m", "s", "kar", "sk", "kin", "ke", "ik", "ko", "q", "kn", "z", "kt", "kr", "km", "ok", "wk", "kind", "kh", "ak", "ck", "kj", "uk", "kid", "ac", "kl", "ka", "ks", "ku", "g", "ack", "K", "ijk", "kk", "kan", "kw", "ark", "kg", "key", "ek", "tk", "ki"], "n": ["m", "nan", "nn", "net", "z", "ln", "t", "nr", "ne", "ni", "nm", "en", "p", "c", "np", "nc", "N", "nb", "g", "d", "no", "nu", "name", "w", " N", "num", "ns", "un", "nl", "sn", "na", "y", "l", "nt"], "b": ["B", "m", "h", "eb", "e", "bi", "bl", "bf", "z", "sb", "u", "fb", "be", "bs", "t", "ab", "ib", "lb", "bb", "p", "c", "ba", "rb", "nb", "g", "d", "a", "y", "x", "l"], "f": ["fl", "family", "fd", "F", "fi", "br", "e", "fs", "fm", "ft", "bf", "z", "file", "u", "fb", "rel", "ib", "fe", "cf", "tf", "fp", "c", "fc", "d", "fg", "rf", "sf", "fac", "fr", "fx", "l", "fa", "ff"], "r": ["range", "rd", "rs", "m", "ri", "br", "e", "mr", "cr", "q", "rc", "z", "u", "re", "t", "nr", "rel", "ur", "attr", "pr", "rr", "er", "rad", "rn", "p", "c", "rb", "sr", "w", "res", "ar", "rf", "or", "gr", "vr", "tr", "err", "fr", "R", "l", "ir", "rt"], "v": ["vs", "m", "h", "e", "value", "q", "z", "u", "t", "ch", "nv", "V", "vi", "uv", "p", "c", "w", "g", "d", "tv", "sv", "vr", "val", "y", "vt", "o", "va", "x", "l"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint x = sc.nextInt();\\n\t\tint y = sc.nextInt();\\n\\n\t\tSystem.out.println(euclideanAlgorithm(x, y));\\n\t}\\n\\n\tpublic static int euclideanAlgorithm(int x, int y) {\\n\t\tint tmp;\\n\t\twhile (true) {\\n\t\t\ttmp = x % y;\\n\t\t\tif (tmp == 0) {\\n\t\t\t\treturn y;\\n\t\t\t}\\n\t\t\tx = y;\\n\t\t\ty = tmp;\\n\t\t}\\n\t}\\n}\\n\\n", "target": "0", "substitutes": {"sc": ["system", "cc", "tc", "cr", "ss", "rc", "ko", "cl", "sb", "bc", "cs", "esc", "Sc", "ctl", "ch", "osc", "pc", "isc", "uc", "sys", "ck", "mc", "scl", "nc", "c", "sh", "sub", "SC", "gc", "txt", "sv", "nl", "scan", "lc", "sp", "cmp", "asc", "conv", "sch", "sec", "usc", "sq"], "x": ["m", "xi", "rx", " cx", "xp", "xe", "i", "xs", "dx", "ox", "z", "u", "ross", "mx", " xx", "t", "xd", "tx", "index", "xy", "ax", "p", "c", "xa", "ex", "w", "lex", "v", "xf", "xt", "xx", "n", "ix", "xc", "px", "fx", "l", "X", "wx"], "y": ["ty", "phi", "out", "b", "m", "uy", "yer", "j", "ny", "i", "ies", "value", "ye", "z", " dy", "yt", "yi", "iy", "oy", "t", "py", "vy", "ch", "sky", "index", "xy", "sys", "ym", "ay", "p", "point", "gy", "code", "dy", "obj", "v", "Y", "my", "ey", "cy", "yy", "sy", "yr", "xx", "n", "iny", " Y", "ory", "val", "ry", "ly", "o", "key", "wx"], "tmp": ["pty", "sup", "phi", "mk", "m", "msg", "qq", "important", "dust", "amp", "term", "test", "copy", "tc", "cmd", "needed", "mint", "temp", "lambda", "mod", "t", "mut", "xxx", "py", " t", "TT", "perm", "prime", "pkg", "zero", "acc", "np", "ptr", "prefix", "mp", "obj", "cum", "gm", "nb", "txt", "mmm", "ctx", "mb", "my", "v", "jp", "etc", "orig", "offset", "yy", "tm", "alpha", "angle", "sp", "snap", "cmp", "vt", "partial", "key", "tt", "ret", " mp", "cp", "wx", "tf", "nt"]}}
{"code": "/* ALDS1_1_B */\\nimport java.io.*;\\n\\nclass Main\\n{\\n  public static void main(String[] args)\\n  {\\n    try{\\n      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n      String[] str = br.readLine().split(\" \");\\n      int x = Integer.parseInt(str[0]);\\n      int y = Integer.parseInt(str[1]);\\n\\n      System.out.println(GCD(x, y));\\n\\n    }catch(Exception e){\\n      System.out.println(e);\\n    }\\n  }\\n\\n  public static int GCD(int x, int y)\\n  {\\n    int gcd;\\n    if(x % y == 0){\\n      gcd = y;\\n    }else {\\n      gcd = GCD(y, (x % y));\\n    }\\n\\n    return gcd;\\n  }\\n}", "target": "0", "substitutes": {"br": ["bridge", "lr", "Br", "bsp", "bl", "shr", "cr", "dr", "be", "arr", "ctr", "kr", "bs", "bc", "buf", "ch", "pr", "bg", "bd", "hr", "db", "rb", "sr", "bro", "bp", "gr", "vr", "bt", "div", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "nr", "mr", "BR"], "str": ["string", "s", "sol", "STR", "char", "it", "bl", "r", "dr", "arr", "ctr", "Str", "cs", "desc", "split", "ld", "dec", "coll", "exp", "ch", "enc", "usr", "vol", "len", "part", "print", "stri", "comm", "st", "sl", "gr", "div", "dat", "sts", "tr", "sp", "fr", "hex", "ls", "wr", "del", "sec", "syn"], "x": ["act", "h", "xi", "rx", "xp", "j", "xe", "i", "e", "xs", "dx", "ox", "z", "Ax", "mx", " xx", "t", "xd", "xxx", "tx", "exp", "lat", "index", "xy", "ax", "ord", "c", "xa", "ex", "w", "lex", "d", "v", "ctx", "g", "xf", "xx", "xt", "n", "ix", "xc", "px", "key", "fx", "l", "X", "wx"], "y": ["ty", "b", "m", "uy", "year", "h", "j", "s", "ny", "i", "e", "ies", "value", "wy", "ye", "q", "yd", "z", "yt", "yi", "iy", "oy", "t", "py", "vy", "height", "ch", "sky", "xy", "sys", "ym", "ay", "p", "gy", "c", "ot", "ys", "w", "g", "d", "v", "a", "Y", "my", "ey", "cy", "yy", "sy", "yr", "xx", "n", "iny", "icy", "ory", "val", "ry", "ly", "o", "key", "l", "yz"], "gcd": ["cdd", "ccd", "mgcod", "gcm", "Gdd", "gedd", "ogCD", "gecr", "Gcd", "gcr", "gncm", "ccr", "gmcm", "gmCD", "gmdd", "gecod", "ogdelete", "Gcm", "Gdelete", "gCD", "GCD", "gecd", "gncd", "gndd", "mgdd", " gdd", " gdelete", "gcod", "gmcd", "mgcd", "ogcd", "Gcod", "ccod", " gCD", "mgcr", "gdd", "gnCD", " gcod", " gcm", "gdelete", "ogcod"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ABC131_b solver = new ABC131_b();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ABC131_b {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int N = in.nextInt();\\n            int L = in.nextInt();\\n\\n            int small = 999;\\n            int small_noneabs = 0;\\n            int ttl = 0;\\n            for (int i = 0; i < N; i++) {\\n                if (small > Math.abs(L + i)) {\\n                    small = Math.abs(L + i);\\n                    small_noneabs = L + i;\\n                }\\n                ttl += L + i;\\n            }\\n            out.println(ttl - small_noneabs);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "91", "substitutes": {"inputStream": ["requestSteam", "inputSource", "imageForm", " inputForm", "requestStreamer", "outputStreamer", " inputSource", "requeststream", "inputForm", "outputSteam", "inputstream", "inputSteam", " inputSteam", "sourceSteam", "sourceStream", "imageSteam", "outputForm", "sourcestream", "outputSource", "outputstream", "sourceStreamer", "imageSource", "imageStream", "inputStreamer", "requestStream"], "outputStream": ["imageForm", "outputStreamer", "outStream", "outputMachine", "OutputMachine", " outputSteam", "outputSteam", "OutputSteam", "outSteam", "inputSteam", "noteStreamer", "outStreamer", "noteView", "outputView", "imageSteam", "OutputStream", " outputForm", " outputMachine", "noteSteam", "imageMachine", "inputView", "outputForm", "OutputForm", "imageStream", "inputStreamer", "outView", "noteStream"], "in": ["serv", "per", "current", "In", "inf", "h", "isin", "sol", "can", "s", "con", "kin", "lin", "init", "it", "doc", "run", "r", "file", "rin", "reader", "t", "IN", "this", "info", "on", "from", "er", "gin", "null", "en", "p", "c", "ins", "inner", "inside", "form", "inn", "iter", "inc", "sin", "cin", "get", "end", "output", "io", "add", "input", "ssl", "raw", "bin", "ini", "ai", "ic", "stream", "l", "dir", "scan", "n", "ind", "din", "o", "is", "source", "im", "err", "rt"], "out": ["current", "check", "con", "s", "can", "tmp", "aos", "it", " OUT", "run", "cmd", "net", "OUT", "by", "user", "temp", " Out", "t", "set", "at", "ou", "outs", "os", "outer", "this", "ch", "result", "sys", "client", "Out", "log", "list", "report", "null", "p", "c", "print", "inner", "ex", "comment", "write", "gc", "w", "obj", "v", "output", "io", "name", "no", "end", "server", "screen", "co", "l", "n", "table", "to", "flush", "o", "writer", "sum", "err", "OU", "nt"], "solver": ["psolver", " sol", " solution", "sol", "resorter", "sorter", "resolution", "solving", "psolution", "solution", "unsolution", "Solver", "resolving", "Sol", "resolver", "ssolution", "ssol", "ssolver", " solve", "Solve", "psorter", "unsolving", "psolving", "unsorter", "solve", "unsolver", "ssolve", "Solution"], "testNumber": [" solutionNum", "TestNum", "testnumber", " testNum", " solutionLength", "TestLength", " solutionnumber", " testLength", " solutionNumber", "testLength", "Testnumber", "testNum", "TestNumber", " testnumber"], "N": ["B", "NH", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "NL", "NS", "I", "GN", "NO", "NP", "NC", "NB", "ND", "V", "TN", "NM", "NT", "KN", "NA", "NF", "NE", "n", "No", "M", "R", "C", "X", "Na"], "L": ["B", "E", "P", "LOC", "F", "LA", "DL", "IL", "LP", "ML", "LR", "S", "LL", "LIN", "LG", "LO", "NL", "LM", "LT", "I", "LV", "D", "Lu", "VL", "V", "GL", "LC", "H", "CL", "BL", "LU", "T", "SL", "PL", "Li", "LE", "J", "FL", "TL", "LS", "U", "M", "LI", "R", "EL", "Lock", "l"], "small": ["nice", "simple", "sam", "low", "lower", "s", "minimum", "shr", "lo", "shared", "missing", "slow", "none", "min", "empty", "large", "good", "tiny", "human", "sign", "zero", "significant", "huge", "li", "SI", "local", "less", "left", "shift", "Small", "big", "Little", "south", "second", "mini", "sp", "little", "partial", "just", "size", "old", "l", "stable"], "small_noneabs": ["small_neabsolute", "small_noabs", "small_noneab", "small_norel", "small2nonebs", "small_noneAbs", "small2noneabsolute", "small_Nonebs", "small_noteabsolute", "small_Noneabs", "small2noneab", "small_neAbs", "small_notebs", "small_Noneab", "small_neabs", "small_nonebs", "small_noabsolute", "small_noteab", "small_noteabs", "small_goneabsolute", "small_nerel", "small_goneAbs", "small_noAbs", "small_noab", "small2noneabs", "small_Noneabsolute", "small_gonerel", "small_nonerel", "small_nobs", "small_goneabs", "small_noneabsolute"], "ttl": ["rtL", "TTli", "TTL", "rtls", "ttL", "httl", "TTl", "TTle", "ottL", "httls", "ttls", "TTls", "httle", "ttle", "ottl", "httli", "ottle", "TTol", "ttol", "rtl", "rtol", "ottls", "rtli", "ttli", "ottol", "rtle"], "i": ["ii", "Xi", "m", "xi", "me", "j", "sim", "multi", "ri", "init", "bi", "it", "ji", "hi", "ims", "z", "u", "ci", "set", "di", "I", "mi", "series", "info", "json", "instance", "gi", "slice", "index", "li", "p", "ei", "si", "pi", "iq", "ti", "iter", "g", "ite", "v", "io", "a", "cli", "ij", "zi", "ui", "ms", "ini", "ic", "ai", "us", "\u0438", "iu", "ix", "id", "ip", "y", "o", "is", "PI", "x", "l", "qi", "ki"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\nimport java.math.BigInteger;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t// \u5165\u529b\\n\t\tint n = sc.nextInt();\\n\t\tint result = Integer.MAX_VALUE;\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t    int a = sc.nextInt();\\n\t\t    int tmp = 0;\\n\t\t    while(a%2 == 0){\\n\t\t        tmp++;\\n\t\t        a /= 2;\\n\t\t    }\\n\t\t    result = min(result, tmp);\\n\t\t}\\n\t\t\\n\t\t// \u8a08\u7b97\\n\t\t\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(result);\\n\t}\\n}\\n\\n", "target": "196", "substitutes": {"sc": [" Sc", "sk", "sa", " ser", "Scan", "ss", "rc", "sb", "cs", " rc", "Sc", "ch", "sys", " SC", " scr", " sn", "SC", " enc", " cons", " sk", " sh", "scan", " sp", "n", "ser", " unsc", "sch", " scorer"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int[] a = new int[N+1];\\n        for(int i = 1;i <= N;i++){\\n            a[i] = sc.nextInt();\\n        }\\n        int count = 1;\\n        int x = a[1];\\n        for(int i = 1;i <= N;i++){\\n            if(x == 2){\\n                System.out.println(count);\\n                return;\\n            }\\n            count++;\\n            x = a[x];\\n        }\\n        System.out.println(-1);\\n    }\\n}\\n", "target": "175", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "rc", "pb", "capt", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "sw", "inc", "fc", "sv", "nl", "lc", "scan", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "sq"], "N": ["Node", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "OUT", "SN", "NS", "I", "D", "A", "NV", "GN", "NO", "NP", "NC", "NB", "L", "ALL", "ND", "V", "TN", "Name", "Net", "NT", "NA", "Y", "T", "K", "J", "Sn", "Q", "NE", "n", "Len", "No", "M", "R", "C", "Z", "X"], "a": ["aaa", "out", "b", "sta", "la", "apa", "oa", "sa", "e", "da", "am", "wa", "A", "au", "area", "att", "ab", "go", "ca", "ma", "ac", "p", "ba", "aka", "ao", "ea", "xa", "c", "ta", "an", "array", "aa", "ia", "auto", "ata", "ga", "as", "ai", "aux", "alpha", "n", "na", "va", "o", "ae", "fa"], "i": ["ii", "phi", "m", "xi", "me", "multi", "sim", "j", "ri", "init", "bi", "it", "ji", " Xi", "hi", "in", "ci", "iy", "iii", "iso", "di", "I", "mi", "ie", "info", "gi", "client", "mu", "li", "ei", "si", "print", "pi", " ii", "iter", "ti", "cli", "io", "zi", "ui", "ini", "ai", "\u0438", "us", "ic", "chain", "iu", "base", "n", " j", "ix", "ind", "id", "ip", "y", "o", "uri", "is", "im", "oi", "PI", "err", "ami", "qi", "ki"], "count": ["current", "check", "ct", "flag", "ount", "e", "number", "ctr", "z", "t", "cont", "cd", "counter", "index", "zero", "list", "p", "c", "code", "print", "status", "comment", "nb", "d", "v", "name", "total", "num", "cell", "length", "n", "Count", "ind", "cond", "y", "call", "size", "sum", "stat", "err", "find", "found", "nt"], "x": ["h", "xi", "rx", "ct", "xp", "j", "xe", "e", "xs", "dx", "ox", "z", "t", "xxx", "tx", "ux", "index", "xy", "p", "c", "xa", "ex", "w", "ctx", "v", "xxxx", "xf", "xx", "n", "xt", "ix", "na", "xc", "y", "max", "l", "X", "wx", "nt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] a = new int[n+1];\\n\t\tfor (int i=1; i<=n; i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t}\\n\t\tboolean[] reachable = new boolean[n+1];\\n\t\tint cur = 1;\\n\t\tint hops = 0;\\n\t\twhile(!reachable[cur] && cur != 2) {\\n\t\t\treachable[cur] = true;\\n\t\t\tcur = a[cur];\\n\t\t\thops++;\\n\t\t}\\n\t\treachable[cur] = true;\\n\t\tSystem.out.println(reachable[2] ? hops : -1);\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "175", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "rc", "pb", "cam", "cl", "capt", "bc", "cs", "esc", "sync", "Sc", "ctl", "so", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "SC", "gc", "inc", "fc", "ctx", "arc", "sv", "nl", "dc", "lc", "scan", "sp", "asc", "sch", "sec", "anc", "usc", "disc", "syn", "sq"], "n": ["ng", "out", "m", "norm", "j", "nan", "nn", "number", "net", "z", "ln", "t", "nr", "ne", "mn", "on", "nm", "en", "len", "nc", "gn", "np", "p", "c", "N", "count", "nb", "g", "d", "no", "nu", "v", "w", "name", "names", "all", " N", "num", "ns", "nl", "sn", "na", "o", "cn", "l", "nt"], "a": ["aaa", "b", "m", "la", "apa", "oa", "s", "ap", "sa", "f", "am", "abs", "u", "at", "A", "au", "att", "ab", "ca", "ma", "ac", "p", "ba", "aka", "c", "ao", "ea", "xa", "an", "array", "aa", "w", "ia", "v", "auto", "ata", "ga", "as", "ai", "aux", "alpha", "na", "va", "o", "l"], "i": ["ii", "phi", "xi", "multi", "j", "sim", "ri", "fi", "e", "bi", "init", "it", "hi", "ims", "u", "ci", "iso", "di", "I", "mi", "wi", "ie", "gi", "li", "si", "pi", "iter", "ti", "v", "io", "cli", "spin", "zi", "ui", "ms", "ini", "ai", "ic", "us", "ish", "iu", "ix", "ip", "y", "is", "x", "im", "oi", "err", "ami", "qi", "ki"], "reachable": [" reachlatable", "nullability", "scanachable", "reachability", "servable", "connectable", "scanability", " reachachable", "reachble", " reachble", "matchables", "servability", "connectability", "reachlatable", "connectables", "nullable", " reachatable", "ratable", " reachables", "matchatable", "connectlatable", "scanable", "matchble", "nullables", "verables", "ratables", "reachables", "servables", "reachatable", "servachable", "scanables", "considerability", "nullatable", "matchability", "ratatable", " reachability", "verble", "matchable", "reachachable", "verability", "considerlatable", "verable", "considerables", "ratability", "considerable", "scanatable"], "cur": ["char", "loc", "dr", "r", "cv", "desc", "pri", "coll", "pr", "cu", "nc", "oc", "rog", "const", "err", "ver", "stable", "ct", "rc", "ur", "pl", "next", "c", " Cur", "coord", "gr", "vr", "dc", "tr", "now", "cmp", "col", "l", "rs", "current", "tmp", "ctr", "bc", "cont", "row", "bur", "ch", "sur", "ptr", "round", "count", "gc", "sr", "uu", "cor", "circ", "rev", "pg", "serv", "per", "con", "j", "cat", "str", "cr", "cs", "ph", "close", "Cur", "sys", "co", "last", "ctrl", "fac", "cp", "car"], "hops": ["rows", "hop", "bps", "rs", "hs", "checks", "changes", "pps", "planes", "maps", "projects", "appers", "phones", "links", "frames", " hopping", "works", "ops", "opens", "views", "aps", "reads", "rots", " visits", "oops", "heads", "obs", "alks", "items", "members", "docs", "orts", "ws", "ippers", "tracks", "ways", "ps", "cycles", "services", "ips", "jobs", "ports", "leases", "hips", "flows", "pages"]}}
{"code": "import java.math.BigInteger;\\nimport java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String args[]) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        while (sc.hasNext()) {\\n            BigInteger a = sc.nextBigInteger();\\n            BigInteger b = sc.nextBigInteger();\\n\\n            BigInteger gcd = a.gcd(b);\\n            BigInteger lcm = a.multiply(b).divide(gcd);\\n            System.out.println(gcd + \" \" + lcm);\\n        }\\n    }\\n}", "target": "181", "substitutes": {"sc": ["system", "cc", "cle", "cr", "tc", "ko", "rc", "cl", "irc", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "enc", "uc", "sys", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "inc", "fc", "arc", "ctx", "sv", "scope", "nl", "dc", "lc", "scan", "sp", "asc", "conv", "ctrl", "sch", "anc", "sec", "usc", "syn", "sq"], "a": ["aaa", "act", "apa", "la", "s", "oa", "ap", "sa", "aq", "aw", "am", "r", "av", "abs", "era", "at", "el", "A", "au", "area", "att", "ab", "ca", "ma", "app", "ac", "ba", "ao", "aka", "c", "an", "aa", "ia", "aj", "ar", "auto", "ga", "all", "as", "ai", "na", "elt", "o", "l", "ae"], "b": ["B", "eb", "ob", "j", "bo", "br", "bl", "bi", "f", "r", "be", "sb", "fb", "bs", "bc", "lib", "blue", "ab", "ib", "gb", "cb", "bis", "bg", "bb", "bas", "p", "c", "ba", "db", "rb", "nb", "g", "bp", "v", "mb", "other", "big", "bar", "bh", "l", "erb"], "gcd": ["lCD", "ccd", "gld", " gbd", "gcm", "ccm", "ltd", "gccp", "gdom", "cld", " gded", "gcp", "lcd", "bcm", "gpd", "gccd", "nld", "mtd", "btd", "geCD", "lded", "gCD", "mdom", "gtd", "gecd", "gepd", "bcd", "ncm", "mcm", "bdom", "grurd", " gld", "ldom", "lcp", "nbd", " gurd", " gcp", "grCD", "geurd", " gCD", "gurd", "gded", "gcded", "grcd", "cbd", " gcm", "ncd", "gbd", " gpd", "gcCD", "grpd", "mcd"], "lcm": ["lscm", "lcom", "gcm", "lectr", "lkm", "gkm", "llcm", "lcd", "llcom", "lsmc", "Lcom", "lfm", " lcom", " lfm", " lcd", "lmc", "lskm", "Lcm", "llfm", "Lfm", "lekm", "lsctr", "llcd", "Lcd", "lctr", "lecm", "gmc", "lemc", "gctr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint n        = Integer.parseInt(scanner.nextLine());\\n\t\tString[] tmp = scanner.nextLine().split(\" \");\\n\t\tint[] list   = new int[n];\\n\t\tint now   = 0;\\n\t\tint was   = 1;\\n\t\tint point = 0;\\n\t\tfor(int i = 0;i < n; i ++) {\\n\\n\t\t\tnow = Integer.parseInt(tmp[i]);\\n\\n\t\t\tif(now == was) {\\n\t\t\t\twas++;\\n\t\t\t}else {\\n\t\t\t\tpoint++;\\n\t\t\t}\\n\\n\\n\t\t}\\n\\n\t\tif(point == tmp.length) {\\n\\n\t\t\tSystem.out.println(-1);\\n\\n\t\t}else {\\n\\n\t\t\tSystem.out.println(point);\\n\\n\t\t}\\n\t}\\n}", "target": "234", "substitutes": {"scanner": ["canter", " scaner", "Scanener", "Scanner", " scanener", "canener", "anener", "caner", "Scaner", "scanener", "canner", "scanter", "scaner", " scanter", "anner", "anter", "aner", "Scanter"], "n": ["ng", "m", "j", "nan", "nn", "net", "number", "z", "ln", "t", "nr", "k", "pos", "ne", "index", "en", "p", "np", "c", "nc", "len", "N", "count", "an", "nb", "d", "no", "v", "total", "nu", "name", "num", "ns", "nl", "length", "sn", "na", "o", "max", "x", "size", "cn", "l", "nt"], "tmp": ["aaa", "tem", "out", "msg", "html", "img", "test", "tc", "temp", "stuff", "terms", "parts", "buf", "emp", "cb", "perm", "proc", "tp", "gs", "np", "template", "prefix", "mp", "obj", "data", "txt", "array", "mb", "src", "etc", "td", "appy", "tm", "aux", "zip", "sp", "snap", "cmp", "tab", "js", "tt", "amps", "err", "csv", "tf", "tk", "nt"], "list": ["sequence", "arr", "temp", "pair", "set", "parent", "pre", "index", "part", "ist", "local", "prefix", "count", "array", "st", "name", "total", "type", "l", "map", "table", "key", "old", "max", "batch", "listed"], "now": ["current", "amp", "after", "tim", "where", "aw", "when", "wait", "hold", "time", "window", "t", "set", "before", "result", "start", "off", "sc", "Now", "here", "next", "since", "ow", "sw", "draw", "then", "d", "currently", "step", "shift", "yes", "sp", "today", "ready", "post", "NOW", "max", "old", "stage", "still", "present", "we", "nt"], "was": ["prev", "sam", "had", "got", "changed", "value", "needed", "ed", "said", "wat", "original", "os", "before", "Was", "money", "which", "aved", "aver", "started", "here", "p", "ist", "past", "saw", "sw", "and", "w", "seen", "st", "v", "created", "placed", "were", "ms", "as", "us", "percent", "last", "used", "war", "sp", "wp", "snap", "val", "eded", "is", "NOW", "old", "pointer", "found", "present", "we"], "point": ["offset", "out", "oint", "message", "string", "page", "patch", "command", "po", "error", "number", "span", "window", "row", "set", "location", "points", "art", "instance", "pt", "pc", "result", "start", "index", "client", "line", "zero", "period", "p", "part", "print", "ot", "count", "port", "cut", "zone", "end", "total", "block", "column", "step", "process", "Point", "length", "day", "sp", "snap", "table", "mark", "to", "word", "wp", "post", "max", "position", "col", "pointer", "cp"], "i": ["ii", "phi", "m", "xi", "j", "multi", "sim", "ri", "init", "bi", "it", "ji", "e", "f", "q", "z", "ci", "di", "I", "mi", "ie", "gi", "index", "li", "ei", "si", "pi", "ti", "g", "v", "my", "cli", "ij", "ui", "ms", "ini", "ai", "ic", "us", "\u0438", "iu", "ind", "ix", "id", "ip", "y", "o", "is", "uri", "x", "im", "ori", "batch", "qi", "ki"]}}
{"code": "import java.util.*;\\n \\n\tpublic class Main {\\n\t\tpublic static void main(String[] args) {\\n      \tScanner sc = new Scanner(System.in);\\n      \\n      \tlong N  =sc.nextLong();\\n       \tlong K  =sc.nextLong();\\n          \\n        if(N>K && N%K!=0){\\n           System.out.println(K-(N%K));\\n        }\\n          else if(N<K && K-N<N){\\n            System.out.println(K-N);\\n          }\\n          else if(N<K && K-N>N){\\n           System.out.println(N);\\n          }\\n          else{\\n          System.out.println(0);\\n          }\\n    }\\n}", "target": "22", "substitutes": {"sc": [" Sc", "tch", "system", "cc", "cle", "tc", "cr", "rc", "cl", "sb", "bc", "cs", "cont", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", " SC", " scr", "mc", "c", "nc", "scl", "acc", "sh", "SC", "sw", "gc", "sr", "inc", "ctx", "sv", "screen", "dc", "scan", "lc", "RC", "sp", "asc", "sch", "sec", "usc", "sq"], "N": ["B", "NH", "Node", "P", "UN", "NN", "Ns", "Ni", "Num", "S", "NR", "OUT", "SN", "NAME", "G", "NL", "AN", "NS", "I", "D", "NV", "NO", "CNN", "GN", "Key", "A", "NP", "NUM", "W", "NC", "NB", "L", "ND", "NOR", "V", "TN", "Name", "Size", "NM", "MN", "NG", "CN", "H", "NK", "NT", "KN", "NA", "Y", "T", "NOT", "J", "FN", "Q", "NE", "n", "U", "M", "R", "C", "Z", "X", "Na", "O"], "K": ["AC", "B", "KA", "IND", "P", "HK", "KI", "UK", "KE", "OK", "SK", "S", "G", "Sk", "KB", "AN", "FK", "Ke", "A", "I", "k", "Key", "W", "L", "MK", "Sch", "V", "IC", "NG", "KS", "H", "NK", "KN", "KT", "Kind", "NA", "Y", "T", "UT", "J", "KING", "Q", "MT", "IK", "n", "U", "M", "R", "KK", "KEY", "C", "Z", "KC", "KR", "X", "O", "INT", "PK", "VK"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        sc.close();\\n\\n        N = Math.abs(N-10000);\\n        System.out.println(N%1000);\\n    }\\n}\\n", "target": "184", "substitutes": {"sc": ["system", "cc", "cle", "cr", "tc", "ss", "rc", "ko", "cl", "bc", "cs", "reader", "ec", "esc", "Sc", "se", "ch", "pc", "osc", "isc", "uc", "sys", "mc", "sub", "nc", "c", "sh", "SC", "gc", "sr", "src", "sv", "nl", "dc", "scan", "lc", "RC", "sp", "ser", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "N": ["NH", "P", "UN", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "G", "NL", "NS", "I", "NV", "D", "NO", "NUM", "CNN", "GN", "NP", "NC", "NB", "L", "ND", "V", "NOR", "TN", "NM", "MN", "H", "CN", "NT", "NA", "T", "K", "NPR", "J", "Sn", "n", " n", "M", "C", "Z"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n[]=new int[5];\\n\t\tString s=\"Yay!\";\\n\\n\t\tfor(int i=0;i<=4;i++){\\n\\n\\n\\n\t\tn[i]= sc.nextInt();// n\u3053\u306e\u5e0c\u671b\\n\t\t}\\n\t\tint k=sc.nextInt();\\n\t\tfor(int i=0;i<=4;i++){\\nfor(int j=0;j<=4;j++){\\n\tif(Math.abs(n[i]-n[j])>k){\\n\t\ts=\":(\";\\n\t}\\n}\\n\t\t}\\nSystem.out.println(s);\\n\\n\t}}", "target": "66", "substitutes": {"sc": ["cc", "cr", "ss", "cam", "rc", "pb", "cl", "sb", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "exp", "ch", "pc", "osc", "isc", "uc", "sys", "mc", "scl", "c", "nc", "sh", "sci", "sub", "SC", "gc", "sv", "dc", "lc", "scan", "sp", "sel", "na", "ser", "asc", "sch", "sec", "anc", "usc", "sq"], "n": ["m", "j", "nan", "nn", "fn", "missing", "r", "z", "t", "ne", "nv", "on", "rn", "p", "en", "c", "np", "note", "nc", "gn", "N", "an", "nb", "d", "v", "nu", " N", "ns", "nl", "sn", "na", "y", "o", "x", "dn", "cn", "l", "nt"], "s": ["rs", "b", "m", " ss", "ats", "ies", "ss", "S", "t", "os", "gs", " ls", "ys", "g", "strings", "sv", "names", "ms", "ns", "ids", "ds", "ps", "ts", "ls", "is", "ses", "es"], "i": ["ii", "phi", "m", "gu", "xi", "j", "multi", "sim", "ri", "init", "bi", "sequence", "it", "f", "hi", "q", "in", "u", "ci", "set", "di", "I", "k", "mi", "ie", "gi", "loop", "mu", "li", "ei", "si", "pi", "ex", "iq", "ti", "v", "cli", "ij", "ui", "ms", "ini", "ai", "ic", "us", "chain", "l", "iu", "err", "ind", "ix", "ip", "y", "is", "x", "batch", "qi", "ki"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main\\n{\\n\tstatic int MOD = (int) 1e9 + 7;\\n\t\\n\tstatic interface Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out);\\n\t}\\n\t\\n\tpublic static void main(String[] args)\\n\t{\\n\t\tInputStream inputStream = System.in;\\n\t\tOutputStream outputStream = System.out;\\n\t\tMyScanner in = new MyScanner(inputStream);\\n\t\tPrintWriter out = new PrintWriter(outputStream);\\n\t\tSolver solver = new A();\\n\t\tsolver.solve(1, in, out);\\n\t\tout.close();\\n\t}\\n\t\\n\tstatic class F implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t}\\n\t}\\n\\n\tstatic class E implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t}\\n\t}\\n\\n\tstatic class D implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t}\\n\t}\\n\t\\n\tstatic class C implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t}\\n\t}\\n\t\\n\tstatic class B implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t}\\n\t}\\n\\n\tstatic class A implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t\tint n = in.nextInt();\\n\t\t\tint x = in.nextInt();\\n\t\t\tint t = in.nextInt();\\n\t\t\tout.println(Calc.ceilInt(n, x) * t);\\n\t\t}\\n\t}\\n\t\\n\tstatic class FenwickTree\\n\t{\\n\t\t// bit[1] ~ bit[n]\\n\t\tlong[] bit;   // = new long[n+1];\\n\t\t\\n\t\tpublic FenwickTree(int n)\\n\t\t{\\n\t\t\tbit = new long[n+1];\\n\t\t}\\n\t\t\\n\t\t// bit[1] + ... + bit[r]\\n\t\tlong sum(int r)\\n\t\t{\\n\t\t\tlong s = 0;\\n\t\t\tfor( int i=r; i>0; i-=(i & -i) )\\n\t\t\t{\\n\t\t\t\ts += bit[i];\\n\t\t\t}\\n\t\t\treturn s;\\n\t\t}\\n\t\t\\n\t\tvoid add(int idx, int x)\\n\t\t{\\n\t\t\tfor( int i=idx; i<bit.length; i+=(i & -i) )\\n\t\t\t{\\n\t\t\t\tbit[i] += x;\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tstatic class UnionFind\\n\t{\\n\t\tint[] par;\\n\t\tint[] n_nodes;\\n\t\tint max = 1;\\n\t\t\\n\t\tpublic UnionFind(int n)\\n\t\t{\\n\t\t\tpar = new int[n];\\n\t\t\tn_nodes = new int[n];\\n\t\t\tfor( int i=0; i<n; i++ )\\n\t\t\t{\\n\t\t\t\tpar[i] = i;\\n\t\t\t\tn_nodes[i] = 1;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tint root(int x)\\n\t\t{\\n\t\t\tif( par[x] == x ) return x;\\n\t\t\treturn par[x] = root(par[x]);\\n\t\t}\\n\t\t\\n\t\tvoid unite(int x, int y)\\n\t\t{\\n\t\t\tint rx = root(x);\\n\t\t\tint ry = root(y);\\n\t\t\tif( rx == ry ) return;\\n\t\t\tpar[rx] = ry;\\n\t\t\tn_nodes[ry] += n_nodes[rx];\\n\t\t\tmax = Math.max(max, n_nodes[ry]);\\n\t\t}\\n\t\t\\n\t\tboolean same(int x, int y)\\n\t\t{\\n\t\t\tint rx = root(x);\\n\t\t\tint ry = root(y);\\n\t\t\treturn rx == ry;\\n\t\t}\\n\t}\\n\t\\n\tstatic class Calc\\n\t{\\n\t\tstatic int gcd(int a, int b)\\n\t\t{\\n\t\t\tif( a == 0 )\\n\t\t\t{\\n\t\t\t\treturn b;\\n\t\t\t}\\n\t\t\treturn gcd(b%a, a);\\n\t\t}\\n\t\t\\n\t\tstatic int ceilInt(int a, int b)\\n\t\t{\\n\t\t\treturn (a%b==0 ? a/b : a/b+1);\\n\t\t}\\n\\n\t\tstatic long power(long x, long n)\\n\t\t{\\n\t\t\tif( n == 0 )\\n\t\t\t{\\n\t\t\t\treturn 1;\\n\t\t\t}\\n\\n\t\t\tif( n % 2 == 0 )\\n\t\t\t{\\n\t\t\t\tlong X = (x * x) % MOD;\\n\t\t\t\treturn power(X, n/2);\\n\t\t\t}\\n\t\t\telse\\n\t\t\t{\\n\t\t\t\treturn (x * power(x, n-1)) % MOD;\\n\t\t\t}\\n\t\t}\\n\t}\\n\t\\n\tstatic class MyScanner\\n\t{\\n\t\tprivate BufferedReader in;\\n\t\tprivate StringTokenizer st;\\n\t\t\\n\t\tpublic MyScanner(InputStream stream)\\n\t\t{\\n\t\t\tin = new BufferedReader(new InputStreamReader(stream));\\n\t\t}\\n\t\t\\n\t\tpublic String next()\\n\t\t{\\n\t\t\twhile( st == null || !st.hasMoreTokens() )\\n\t\t\t{\\n\t\t\t\ttry\\n\t\t\t\t{\\n\t\t\t\t\tString rl = in.readLine();\\n\t\t\t\t\tif( rl == null )\\n\t\t\t\t\t{\\n\t\t\t\t\t\treturn null;\\n\t\t\t\t\t}\\n\t\t\t\t\tst = new StringTokenizer(rl);\\n\t\t\t\t}\\n\t\t\t\tcatch( IOException e )\\n\t\t\t\t{\\n\t\t\t\t\treturn null;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\t\t\\n\t\tpublic int nextInt()\\n\t\t{\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\t\t\\n\t\tpublic long nextLong()\\n\t\t{\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\t}\\n}\\n", "target": "34", "substitutes": {"MOD": ["B", "E", "Test", "ID", "MAX", "e", " MAX", " mod", " threshold", "NUM", " base", "VERSION", "prime", "L", "eed", "ref", " seed", " test", "debug", "step", " TEST", "base", "EST", "val", "R", "ver", "max", " NUM", "mod"], "testNumber": ["testingNo", "predNumber", "test19", "predSeven", "seedBER", "estNumber", "testSeven", "familyBER", "portNumber", "secureNumber", "testedNumber", "testingSeven", "short19", "estNo", "roleSeven", "testedBER", "testingBER", "operatorSeven", "master19", "masterBER", "testednumber", "weekSeven", "operatorNumber", "testingnumber", "drawCode", "shortNumber", "weekCode", "sectionSeven", "secureSeven", "estSeven", "masterNumber", "testCode", "portSeven", "roleNumber", "masterWeek", "weekBER", "familyNumber", "seedWeek", "TestBER", "pred011", "family19", "estBER", "testingNumber", "TestNumber", "testnumber", "estMonth", "seed19", "role011", "testWeek", "test011", "familyMonth", "shortMonth", "Testnumber", "testBER", "sectionNumber", "sectionNo", "est19", "drawSeven", "secureBER", "shortBER", "drawBER", "testMonth", "weekNumber", "predBER", "seedNumber", "drawNumber", "estWeek", "portBER", "operator011", "testNo", "estCode"], "in": ["r", "re", "rin", "mi", "pc", "on", "er", "log", "level", "db", "inn", "no", "name", "all", "bin", "ini", "stream", "doc", "run", "net", "file", "user", "pin", "read", "print", "local", "pi", "cin", "id", "def", "din", "login", "im", "al", "ing", "l", "ity", "inf", "isin", "context", "init", " IN", "IN", "info", "up", "from", "form", "inc", "get", "add", "io", "input", "ee", "ind", "win", "serv", "In", "con", "i", "it", "str", "pass", "by", "ie", "gin", "null", "en", "inner", "ins", "iter", "ssl", "end", "item", "ic", "scan", "is", "old", "err"], "out": ["r", "ou", "outer", "group", "log", "list", "w", "res", "port", "v", "mem", "block", "all", "err", "ret", "ion", "success", "net", "cmd", "user", "ter", "only", "at", "result", "back", "print", "write", "other", "output", "screen", "gr", "update", "table", "fail", "post", "sum", "OUT", "window", "pool", "outs", "info", "ch", "note", "op", "gc", "io", "server", "to", "flush", "o", "writer", "nt", "check", "s", "system", "aos", "it", "cache", "set", "os", "this", "sys", "client", "Out", "off", "report", "null", "p", "point", "inner", "ex", "iter", "end", "left", "co", "base", "ser", "over", "old", "batch", "OU"], "inputStream": [" inputSet", "helloSocket", "inputSocket", "initialStreamer", "initialStream", "inputSet", " inputStreamer", "outputStreamer", " inputSocket", "outputSteam", "inputstream", "inputSteam", " inputSteam", "outputSocket", "initialstream", "helloSet", "helloSteam", "outputSet", "outputstream", " inputstream", "inputStreamer", "helloStream", "initialSteam"], "outputStream": ["outputNow", "OutputNow", "currentForm", "writeStream", "outputStreamer", " outputSteam", "currentSteam", "responsestream", "outputSteam", "OutputSteam", "inputstream", "inputSteam", " outputNow", "writestream", "OutputStream", "responseStream", " outputForm", "writeSteam", "responseSteam", "outputForm", "writeStreamer", "currentNow", "responseStreamer", "OutputForm", "currentStream", "outputstream", "inputStreamer"], "solver": ["resolve", "resorter", "sorter", "csolve", "ssorter", "solution", " server", "csolver", "Solver", "resolver", "ssolution", "reserver", "server", "cserver", "ssolver", " solve", "Solve", "Sorter", "solve", "csorter", " sorter", "ssolve", "Solution"], "n": ["ng", "j", "yn", "nan", "i", "nn", "net", "fn", "z", "ln", "u", "ne", "mn", "on", "en", "len", "c", "nc", "gn", "p", "N", "an", "nb", "d", "nu", "a", "ns", "num", "nl", "sn", "y", "o", "dn", "l", "nt"], "x": ["act", "h", "rx", "ct", "i", "e", "xs", "f", "dx", "ox", "r", "z", "xd", "tx", "on", "xy", "ax", "index", "p", "c", "ex", "w", "d", "v", "yx", "xx", "xt", "ix", "xc", "inx", "y", "px", "fx", "l", "X"], "t": ["ty", "m", "term", "h", "ct", "j", "test", "e", "f", "it", "tc", "q", "z", "tz", "wt", "dt", "tw", "tp", "p", "title", "c", " T", "ot", "ta", "g", "d", "v", "a", "total", "T", "mt", "td", "type", "tr", "y", "ts", "vt", "o", "tt", "l", "te", "rt", "tf"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        MyScanner sc = new MyScanner();\\n        out = new PrintWriter(new BufferedOutputStream(System.out));\\n\\n        long H = sc.nextLong();\\n        long n = 1, ans = 0;\\n        while (H > 0) {\\n            ans += n;\\n            n *= 2;\\n            H /= 2;\\n        }\\n\\n        out.println(ans);\\n\\n        out.close();\\n    }\\n\\n\\n    public static PrintWriter out;\\n\\n    public static class MyScanner {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public MyScanner() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n\\n    }\\n}\\n", "target": "51", "substitutes": {"sc": ["cc", "tc", "cr", "ss", "rc", "pb", "r", "cl", "bc", "cs", "sm", "desc", "esc", "Sc", "se", "so", "ch", "pc", "osc", "isc", "soc", "uc", "sys", "mc", "p", "c", "nc", "si", "scl", "sh", "SC", "gc", "scan", "sp", "asc", "conv", "sch", "sec", "sq"], "out": ["b", "h", "console", "s", "aos", "i", "it", "error", "net", "in", "r", "OUT", "file", "ln", " Out", "cs", "at", "t", "ou", "outs", "os", "exp", "ne", "info", "ch", "conn", "client", "sys", "Out", "log", "null", "p", "c", "print", "inner", "ins", "ex", "obj", "write", "txt", "w", "res", "v", "io", "output", "gc", "input", "all", "bin", "screen", "us", "co", "l", "dir", "ent", "conv", "o", "writer", "err", "rt", "nt"], "H": ["B", "NH", "h", "P", "F", "HT", "He", "S", "G", "Head", "I", "D", "A", "W", "HL", "L", "HC", "V", "CH", "HS", " h", "His", "HH", "TH", "N", "HE", "AV", "Y", "T", "HA", "K", " N", "J", "Q", "HI", "OH", "SH", "MH", "M", "R", "HB", "U", "Length", "C", "Z", "X"], "n": ["m", "h", "b", "j", "s", "Ns", "i", "nn", "ann", "r", "z", "ln", "t", "ne", "mn", "L", "on", "en", "p", "len", "nc", "c", "gn", "nor", "N", "an", "w", "d", "v", " N", "ns", "num", "nl", "sn", "na", "o", "x", "cn", "l", "nt"], "ans": ["uns", "vs", "rs", "s", "oa", "can", "ats", "xs", "ann", " spans", "ians", "ens", "aus", "AN", "cs", " orphans", "mn", "ams", "anes", "offs", "ots", "eds", "aps", "anks", "gs", "ks", "ins", "ols", "an", "leans", "cons", "ions", "ars", "ents", "as", "ns", "ants", "nl", "ons", "nets", "arts", "ts", "ANS", "ls", "nes", "amps", "ints", "es", "actions"], "br": ["bridge", "b", "lr", "Br", "shr", "bl", "bsp", "cr", "r", "dr", "ctr", "kr", "bs", "bc", "buf", "rel", "pr", "next", "bm", "hr", "ptr", "rb", "sr", "bro", "bp", "bre", "jp", "gr", "vr", "bt", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "browser", "mr", "BR"], "st": ["h", "ost", "ct", "bl", "lo", "ss", "ft", "r", "cl", "be", "sb", "z", "nd", "inst", "sm", "t", "set", "th", "sty", "se", "so", "stack", "ST", "pt", "std", "start", "first", "est", "p", "ist", "sh", "sw", "St", "mt", "ust", "sv", "sl", "const", "bt", "et", "sts", "sn", "sp", "fr", "ts", "rest", "stage", "stat", "stan", "tt", "ste", "rt", "stable", "ut", "nt"], "str": ["msg", "string", "s", "STR", "char", "sequence", "shr", "cr", "dr", "r", "arr", "ctr", "Str", "inst", "cs", "t", "cont", "rel", "exp", "ext", "cert", "enc", "result", "cur", "sys", "usr", "list", "next", "print", "sw", "txt", "res", "v", "raw", "pse", "ns", "gr", "text", "div", "tr", "sp", "fr", "ent", "ret", "del", "stable"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main\\n{\\n\tpublic static void main(String[] args)throws Exception\\n\t{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint n  = Integer.parseInt(br.readLine());\\n\t\tString[] g  = br.readLine().split(\" \");\\n\t\tint [] ar = new int[n];\\n\t\tfor( int i = 0 ; i< n ; i++){\\n\t\t\tar[i] = Integer.parseInt(g[i]);\\n\t\t}\\n\t\tint m  = Integer.parseInt(br.readLine());\\n\t\tint ans = 0;\\n\t\tg  = br.readLine().split(\" \");\\n\t\tfor(int i = 0 ; i <m; i++)\\n\t\t{\\n\t\t\tif(binarySearch(ar,Integer.parseInt(g[i])) != -1) ans++ ;\t\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\tpublic static int binarySearch(int[] c, int key)\\n\t{\\n\t\tint len = c.length;\\n\t\tint left = 0 , right = len;\\n\t\tint mid = (right + left) / 2 ;\\n\t\twhile(left < right){\\n\t\t\tif(c[mid] == key) return mid;\\n\t\t\telse if(c[mid] < key) left = mid+1;\\n\t\t\telse { right = mid;  }\\n\t\t\tmid = (right + left) / 2 ;\\n\t\t}\\n\t\treturn -1;\\n\t}\\n\t\\n}", "target": "138", "substitutes": {"br": ["bridge", "b", "lr", "Br", "shr", "bl", "bi", "cr", "bf", "dr", "r", "ctr", "be", "ger", "kr", "bs", "bc", "buf", "rel", "ch", "Fr", "pr", "repl", "pre", "bg", "bb", "next", "bd", "bm", "hr", "db", "rb", "bro", "bp", "jp", "gr", "vr", "bt", "yr", "div", "tr", "err", "sp", "fr", "bh", "bn", "ber", "js", "wr", "browser", "nr", "rem", "mr", "BR"], "n": ["ng", "nan", "nn", "net", "r", "z", "ln", "t", "k", "ne", "mn", "network", "on", "en", "p", "np", "nc", "N", "pi", "an", "nb", "d", "no", "nu", "total", "v", "a", "name", "un", "ns", "num", "nl", "sn", "na", "y", "o", "x", "cn", "l", "nt"], "g": ["eg", "gu", "msg", "b", "og", "gg", "cfg", "game", "gd", "r", "tg", "ger", "vg", "G", "go", "gb", "group", "gi", "reg", "bg", "rg", "ag", "ig", "gs", "p", "gen", "gn", "gc", "gm", "sg", "get", "fg", "ga", "gp", "ic", "gr", "mg", "ang", "erg", "y", "pp", "l", "pg", "gt", "ge"], "ar": ["nar", "aro", "lar", "aer", "ear", "par", "mr", "cr", "rar", "r", "av", "arr", "am", "ary", "re", "ara", "ard", "tar", "art", "ari", "dar", "er", "ner", "ro", "var", "an", "array", "arc", "a", "ars", "mar", "ras", "are", "Ar", "adr", "arm", "bar", "war", "ra", "AR", "har", "al", "ir", "car", "arp", "air"], "i": ["ji", "q", "ci", "iso", "mi", "li", "iq", "v", "my", "ui", "ini", "ai", "us", "err", "ix", "multi", "ies", "bi", "ik", "iy", "ei", "pi", "cli", "zi", "ms", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "um", "ri", "init", "fire", "di", "info", "gi", "ni", "si", "ski", "ti", "io", "\u0438", "ind", "to", "ip", "o", "PI", "qi", "phi", "xi", "me", "j", "sim", "it", "ims", "u", "I", "this", "ie", "you", "client", "point", "inner", "ex", "jo", "ic", "iu", "ios", "is", "oi", "batch"], "m": ["mat", "h", "me", "mun", "dm", "r", "mx", "cm", "sm", "t", "k", "mi", " M", "mn", "ma", "mc", "p", "bm", "gm", "d", "mb", "mt", "all", "ms", "tm", "mas", "M", "mm", "y", "em", "l", "man", "mr"], "ans": ["uns", "vs", "rs", "s", "nan", "ats", "can", "sk", "xs", "ann", "lan", "span", "ens", "ones", "cs", "AN", "acs", "os", "acts", "eds", "anks", "ks", "ins", "ols", "an", "lines", "cons", "ars", "names", "ms", "ents", "as", "ns", "us", "orts", "ants", "ids", "flags", "ons", "yes", "ps", "arts", "ts", "ANS", "ls", "es", "amps", "is"], "c": ["b", "ct", "csv", "con", "cc", "f", "cr", "tc", "rc", "r", "cl", "u", "cv", "cm", "cs", "ec", "cd", "cont", "t", "coll", "cb", "ch", "cf", "cu", "ac", "mc", "p", "gc", "circle", "fc", "d", "v", "a", "etc", "ic", "co", "ce", "dc", "lc", "xc", "o", "C", "l", "cp"], "key": ["inter", "j", "ri", "char", "value", "str", "ke", "q", "by", "k", "Key", "lock", "info", "ch", "start", "on", "index", "sym", "next", "ay", "p", "le", "v", "name", "item", "a", "ey", "num", "type", "ky", "ice", "id", "val", "ry", "y", "o", "KEY", "x", "ek", "max", "l", "hash", "keys"], "len": ["bytes", "h", "lf", "ren", "loc", "z", "lan", "ln", "lim", "cl", "ml", "min", "t", "el", "pos", "lp", "limit", "lon", "pl", "L", "ll", "on", "list", "en", "le", "count", "d", "end", "mem", "total", "num", "nl", "length", "Len", "val", "max", "x", "size", "l", "nt"], "left": ["offset", "out", "low", "lower", "half", "lo", "net", "loc", "full", "hi", "ml", "top", "cm", "min", "middle", "lock", "rel", "L", "Left", "start", "first", "line", "off", "level", "back", "list", "inner", "ptr", "local", "le", "end", "my", "lay", "shift", "nl", "last", "length", "ix", "lt", "id", "mm", "rest", "ell", "max", "x", "old", "small", "l"], "right": ["range", "rd", "third", "out", "wrong", "gt", "head", "after", "full", "wo", "ren", "r", "top", "nd", "rw", "reverse", "ran", "row", "com", "middle", "rel", "Right", "th", "rand", "med", "result", "start", "ax", "recent", "rad", "back", "next", "ro", "random", "correct", "hr", "inner", "rh", "and", "then", "res", "radius", "end", "root", "rew", "rights", "self", "shift", "center", "last", "length", "west", "tr", "R", "roll", "rest", "upper", "max", "x", "red", "rem", "mr", "through"], "mid": ["medium", "offset", "low", "multi", "mask", "pid", "half", "tri", "mer", "lower", "mind", "hi", "wid", "rid", "mill", "mel", "lim", "nd", "min", "middle", "mi", "tx", "rand", "med", "md", "mn", "start", "index", "line", "le", "mit", "pent", "dim", "end", "my", "mt", "mem", "lay", "ms", "mad", "mouse", "ind", "cond", "id", "lt", "mm", "val", " MID", "Mid", "max", "partial", "mr"]}}
{"code": "/*\\n *  author : Atul Anand   \\n *  created on : Wed Apr 01 2020\\n */\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) throws IOException {\\n        int N = in.nextInt();\\n        if((N & 1) == 0){\\n            double p = N*1.0/(2*N);\\n            println(p);\\n        }\\n        else{\\n            double p = (N+1)*1.0/(2*N);\\n            println(p);\\n        }\\n        \\n        in.close();\\n        out.close();\\n    }\\n\\n    static int MIN = Integer.MIN_VALUE;\\n    static int MAX = Integer.MAX_VALUE;\\n    static Reader in = new Reader();\\n    static PrintWriter out = new PrintWriter(System.out);\\n\\n    static void read(int arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextInt(); \\n    \t} \\n    }\\n    \\n    static void read(long arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextLong(); \\n    \t} \\n    }\\n    \\n    static void read(String arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.next(); \\n    \t} \\n    }\\n    \\n    static void print(Object O) {  \\n    \tout.print(O); \\n    }\\n    \\n    static void println(Object O) { \\n    \tout.println(O); \\n    }\\n    \\n    static void println(int arr[]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprint(arr[i]+\" \"); \\n    \t} \\n    \tprintln(\"\"); \\n    }\\n\\n    static void println(int arr[][]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprintln(arr[i]); \\n    \t}\\n    }\\n    \\n    static void debug(Object O) { \\n    \tSystem.out.println(O); \\n    }\\n}\\n\\nclass Reader {\\n    BufferedReader reader;\\n    StringTokenizer tokenizer;\\n\\n    Reader() {\\n        reader = new BufferedReader(new InputStreamReader(System.in));\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n\\n    String next() throws IOException {\\n        while (!tokenizer.hasMoreTokens() ) { \\n            tokenizer = new StringTokenizer(reader.readLine()); \\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    int nextInt() throws IOException { \\n        return Integer.parseInt(next()); \\n    }\\n    \\n    double nextDouble() throws IOException { \\n        return Double.parseDouble(next());\\n    }\\n    \\n    long nextLong() throws IOException { \\n        return Long.parseLong(next()); \\n    }\\n    \\n    String nextLine() throws IOException { \\n        return reader.readLine(); \\n    }\\n    \\n    void close() throws IOException { \\n        reader.close(); \\n    }\\n}", "target": "64", "substitutes": {"N": ["NH", "Node", "P", "F", "UN", "NN", "Ns", "NI", "MAN", "Ni", "Num", "S", "NR", "Number", "SN", "G", "NL", "AN", "GT", "NS", "I", "D", "NV", "NO", "CNN", "GN", "Body", "ANY", "NP", "W", "NC", "NB", "L", "ND", "V", "TN", "Max", "NM", "NG", "MN", "H", "NT", "None", "NA", "Y", "T", "NOTE", "K", "J", "Q", "NE", "n", "Len", "New", "No", "M", "R", "Length", "C", "Z", "PN", "X"], "p": ["per", "m", "h", "P", "pad", "xp", "ap", "par", "pb", "q", "r", "u", "t", "lp", "vp", "ping", "pc", "dp", "pr", "pkg", "er", "php", "tp", "np", "op", "tap", "port", "bp", "d", "g", "jp", "n", "pic", "pa", "ps", "wp", "ip", "y", "pro", "x", "pp", "l", "cp", "fp"], "MIN": ["P", "ID", "minimum", "NI", "NR", "Min", "min", "SIZE", "AN", "NUM", "NO", "IN", "Minimum", "V", "STAT", "BY", "BL", "FAULT", "NA", "NPR", "NE", "MS", "M", "ME", "KEY", "VALUE"], "MAX": ["MOD", " max", "Maximum", "GEN", "MX", "MAP", "GER", "SIZE", "NUM", "AST", "VERSION", "ALL", "MA", "PA", "Max", "DX", "FAULT", "FFFF", "MED", "AX", "EST", "M", "MH", "max", "VALUE", "X"], "in": ["serv", "m", "In", "h", "inf", "con", "ri", "isin", "init", "doc", "it", "f", "lin", " din", "rc", "r", "file", "ln", "net", "t", "at", "conf", "read", "IN", "info", "buffer", "on", "from", "line", "gin", "en", "c", "ins", "inner", "form", "local", "inn", "iter", "data", "ssl", "cin", "d", "inc", "io", "add", "input", "all", "bin", "ini", "ic", "ai", "or", "stream", "n", "nin", "ind", "mm", "din", "o", "is", "source", "im", "sum", "l"], "out": ["console", "msg", "con", "aos", "it", "str", "Output", "cache", "cmd", "put", "net", "r", "OUT", "file", "pool", "t", "format", "at", "lock", "outs", "ou", "os", "outer", "println", "conn", "sys", "client", "Out", "log", "list", "report", "null", "c", "print", "inner", "ot", "obj", "ex", "write", "txt", "w", "st", "v", "io", "output", "end", "auto", "input", "all", "screen", "co", "display", "n", "to", "o", "writer", "sum", "err", "OU", "nt"], "arr": ["arb", "br", "ev", "bl", "rep", "addr", "dr", "r", "vals", "coll", "att", "ab", "rav", "attr", "pr", "list", "db", "obj", "iq", "aa", "res", "ars", "ar", "all", "expr", "rr", " str", "par", "resp", "parts", "pl", "ag", "print", "compl", "data", "Ar", "ARR", "gr", "dat", "n", "tr", "def", "arg", "aaa", "save", "rs", "vec", "dict", "buf", "row", "rel", "req", "ll", "vol", "ptr", "var", "array", "aj", "num", "hist", "val", "ray", "rest", "alph", "vs", "warn", "img", "s", "j", "str", "av", "z", "inst", "au", "emb", "enc", "repl", "app", "ras", "batch", "Array", "map", "fr", "ang", "x", "err", "stock"], "i": ["ji", "hi", "q", "dr", "ci", "mi", "php", "li", "remote", "v", "my", "ij", "ui", "ini", "ai", "us", "ix", "m", "multi", "ies", "e", "bi", "f", "iy", "ei", "c", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "fi", "init", "di", "info", "gi", "ni", "si", "ti", "io", "\u0438", "ind", "to", "ip", "o", "PI", "qi", "phi", "xi", "me", "j", "sim", "it", "ims", "u", "set", "I", "this", "ie", "client", "ex", "ia", "batch", "ic", "iu", "ios", "is", "oi", "err"], "O": ["RO", "B", "E", "P", "OL", "F", "OG", "OK", "Obj", "S", "OUT", "SO", "OTO", "MO", "I", "GO", "IO", "OB", "OE", "L", "PO", "DO", "BO", "V", "Out", "OC", "OR", " o", "oS", "OO", "TO", "Y", "T", "OS", "VO", "J", "OT", "OH", "OD", "U", "R", "M", "o", "Os", "OX", "C", "OU"], "reader": ["rx", "redo", " read", "mr", "rar", " writer", "r", "rl", "dr", "rc", "driver", "file", "wrapper", "row", "dd", "iterator", "handler", "read", "lock", "reading", "before", "timer", "buffer", "er", "board", "ner", "ro", "parser", "inner", "rer", "rier", "iter", "loader", "input", "Reader", "runner", "stream", "pull", "handle", "length", "text", "phrase", "writer", "source", "rr"], "tokenizer": ["tokeniser", "terminizable", "terminener", "okenizer", "terminizer", "tokenization", " tokenizable", "Tokenizer", "okenener", "normaliser", "okenize", " tokenoder", " tokeniser", "okenater", "serializers", "okenger", " tokenater", "normalger", "tokenifier", "okenoder", " tokenization", "Tokenifier", " tokenizers", "tokenater", "terminater", " tokenize", "serialifier", "okenizable", "tokenize", "tokenizable", "tokenger", " tokenener", "Tokenizers", "okenization", "tokenoder", "okeniser", " tokenifier", "normalization", "tokenener", "serializer", "Tokenization", "normalizer", " tokenger", "terminize", "serialization", "terminoder", "tokenizers", "terminger"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main {\\n    static final String YES = \"Yes\";\\n    static final String NO = \"No\";\\n\\n    // Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\\n    public static void main(String[] args) throws Exception {\\n        final Scanner sc = new Scanner(System.in);\\n        String S;\\n        S = sc.next();\\n        solve(S);\\n    }\\n\\n    static void solve(String S){\\n        boolean isEven = true;\\n        for (char c: S.toCharArray()) {\\n            if (isEven && c == 'L') {\\n                System.out.println(\"No\");\\n                return;\\n            }\\n            if (!isEven && c == 'R') {\\n                System.out.println(\"No\");\\n                return;\\n            }\\n            isEven = !isEven;\\n        }\\n\\n        System.out.println(\"Yes\");\\n\\n    }\\n}\\n", "target": "205", "substitutes": {"YES": ["OK", "Yes", "WH", "SO", "ANY", "MAL", "POS", "NUM", "WARN", "ALL", "XX", "BY", "BS", "Y", "USER", "NPR", "SU", "BUS", "ON", "US", "HI", "VER", "yes", "OH", "UP", "NOW", "ONE"], "NO": ["RO", "MOD", "UN", "OK", "LO", "NR", "NL", "SO", "MO", "ANY", "MAL", "POS", "NUM", "ERROR", "GO", "DO", "NOR", "BY", "no", "NA", "NOT", "VO", "NE", "OH", "No", "ME", "ONE"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\npublic static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int d;\\n        int r;\\n        double f;\\n        d = a /b;\\n        r = a % b;\\n        f = 1.0 * a / b;\\n        System.out.print(d + \" \" + r + \" \" );\\n        System.out.println(String.format(\"%.8f\", f));\\n}\\n\\n}\\n\\n", "target": "90", "substitutes": {"sc": [" Sc", "ng", "out", "system", "cc", "tc", "cr", "ss", "rc", "cl", "sb", "bc", "cs", "ok", "row", "esc", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "exec", "sys", "ck", "mc", "scl", "c", "nc", "sh", "acc", "SC", "gc", "inc", "g", "ctx", "sv", "nl", "scan", "lc", "sp", "asc", "conv", "ctrl", "sch", "anc", "sec", "usc", "sq"], "a": ["aaa", "m", "sta", "la", "apa", "oa", "sa", "eas", "i", "da", "am", "t", "A", "au", "area", "dev", "ab", "ak", "ca", "index", "ax", "ma", "app", "ac", "p", "ao", "ba", "ea", "aka", "c", "ta", "an", "w", "aa", "ia", "aj", "v", "ar", "ata", "ga", "as", "aux", "alpha", "n", "na", "al", "l", "ae"], "b": ["B", "m", "h", "ob", "j", "s", "br", "i", "e", "bi", "z", "be", "sb", "fb", "bs", "t", "ab", "ib", "cb", "bis", "beta", "bb", "p", "c", "ba", "db", "rb", "nb", "g", "v", "w", "bp", "length", "base", "n", "y", "o", "l", "wb"], "d": ["done", "out", "m", "fd", "daily", "i", "e", "da", "dx", "dr", "z", "dict", "t", "dd", "D", "di", "cd", "ld", "dt", "dra", "hd", "md", "dig", "p", "c", "db", "ad", "draw", "g", "v", "pd", "td", "df", "dir", "de", "div", "dat", "n", "ds", "dl", "sd", "dh", "red", "dL", "dis"], "r": ["rd", "rs", "rate", "h", "m", "ri", "s", "br", "i", "mr", "cr", "rc", "rar", "dr", "re", "rw", "t", "nr", "rel", "ur", "rr", "rg", "er", "rad", "p", "ro", "c", "hr", "rb", "sr", "w", "v", "res", "ar", "rect", "rf", "n", "tr", "err", "fr", "R", "ry", "l", "rt"], "f": ["out", "m", "fd", "F", "h", "fi", "s", "i", "e", "fm", "fs", "bf", "u", "fb", "fa", "fort", "t", "alf", "cf", "p", "fp", "c", "w", "fc", "v", "rf", "df", "l", "n", "sf", "fr", "o", "fac", "tf", "ff"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n    \\n    public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    String str1 = in.nextLine();\\n    String str2;\\n    int num1 = Integer.parseInt(str1);\\n    int num2, max, min;\\n    max = 0;\\n    min = 0;\\n    long sum = 0;\\n    \\n    for (int i=0; i<num1; i++)\\n        {\\n        str2 = in.next();\\n        num2 = Integer.parseInt(str2);\\n        sum += num2;\\n        if (i == 0)\\n        {\\n        max = num2;\\n        min = num2;\\n        }else\\n        if (num2 > max){max = num2;}else\\n        if (num2 < min){min = num2;}\\n        }\\n    System.out.println(min +\" \"+ max +\" \"+ sum);\\n    \\n    }\\n    \\n}", "target": "21", "substitutes": {"in": ["per", "out", "inf", "In", "m", "h", "con", "isin", "sol", "lin", "doc", "init", "asin", " din", "r", "file", "ln", "user", "reader", "IN", "info", "std", "on", "line", "log", "gin", "en", "ins", "inner", "conf", "inn", "inc", "lines", "sin", "cin", "io", "add", "input", "world", "all", "bin", "ini", "thin", "scan", "n", "err", "ind", "mm", "din", "is", "old", "source", "l"], "str1": [" str0", "objCar", " strOne", "seq0", "stringOne", "seq1", "stable01", "obj01", " strFirst", "str3", "stableCar", "strFirst", "strOne", "seqOne", "strCar", "stringFirst", "str0", "string1", "stable3", "obj1", " strCar", "seqFirst", "str01", "string0", " str3", "stable1", " str01", "obj3"], "str2": ["ext2", " str4", "txtTwo", "str8", "txt2", "ext1", "st1", " str8", "Str2", "txt8", " strTwo", "Str4", "stringTwo", "txt4", "string1", "exttwo", "StrTwo", " strtwo", "stTwo", "sttwo", "str4", "Str1", "txt1", "st2", "string2", "extTwo", "strTwo", "strtwo", "Str8"], "num1": ["nam01", "NUM1", "num01", " num01", "NUM01", "NUMOne", "numOne", " num001", "nam1", "alph2", "namOne", "um1", "alph1", "NUM2", "alph001", "um001", "um01", "um2", " numOne", "nam2", "alph01", "num001"], "num2": ["snap2", "formBytes", "snap7", " num52", "str8", "name2", "snap256", "form42", "result52", "str102", "resultTwo", "umTwo", "um1", "mon3", "str7", "conv62", "str4", " numBytes", "nam62", "alphTwo", "nameTo", "num8", "num256", "num52", "num4", "alph2", "form4", "result42", "str256", "nam52", "numTwo", "result2", " num102", "nam2", "num02", " num62", "numTo", "mon8", " num42", " num4", " numTo", "snap42", "nam42", "snap102", "namTwo", "alph4", "monBytes", "um7", "form2", "um2", "num62", "objTo", "nam02", "num102", "mon2", "conv42", "num42", "str3", "mon42", "conv2", "conv52", "numBytes", " num3", "mon4", "num3", "obj52", "obj2", "conv02", " num8", " numTwo", "monTwo", " num02", "name52", " num256", "name02", "obj02", "num7", " num7", "strTwo"], "max": ["act", "range", "chest", "m", "con", "can", "tmp", "MAX", "head", "full", "net", "ox", "right", "grand", "mx", "re", "mod", "cross", "parent", "cos", "force", "med", "prime", "cur", "ax", "recent", "huge", "ma", "Max", "raise", "high", "box", "load", "maximum", "spread", "root", "and", "res", "bot", "end", "cut", "v", "total", "scale", "ms", "mad", "self", "inv", "co", "chain", "last", "aux", "az", "most", "map", "ver", "view", "over", "rest", "upper", "size", "x", "global", "grow", "master", "gt", "with"], "min": ["mer", "value", "mins", "mi", "rand", "len", "method", "mem", "un", "mm", "partial", "just", "stat", "m", "lower", "sol", "admin", "net", "remove", "temp", "MIN", "only", "nam", "hide", "part", "sub", "local", "st", "div", "alt", "lt", "minute", "im", "lem", "mod", "range", "sam", "minimum", "none", "Min", "middle", "rel", "mn", "med", "start", "pre", "index", "spec", "mp", "mit", "prefix", "aug", "num", "val", "small", "man", "act", "label", "me", "low", "str", "span", "mid", "sort", "lock", "first", "ma", "inner", "score", "sin", "left", "mean", "key", "amin", "tail"], "sum": ["sam", "out", "um", "sat", "norm", "msg", "tu", "sim", "tmp", "sa", "doc", "ass", "temp", "t", "dev", "cos", "diff", "med", "hum", "loss", "mu", "vol", " SUM", "si", "acc", " summed", "su", "count", "cum", "summary", "cal", "scale", "add", "total", "mem", "ms", "SU", "process", "num", "weight", "util", "us", "average", "Sum", "mean", "rup", "size", "mess", "fac", "hash", "frac", "mod"], "i": ["ii", "phi", "m", "xi", "j", "multi", "sim", "init", "bi", "e", "it", "f", "hi", "ji", "q", "z", "ci", "t", "di", "I", "mi", "ie", "info", "gi", "index", "li", "p", "ei", "si", "status", "pi", "ex", "iq", "iter", "ti", "v", "io", "a", "cli", "ij", "ui", "ini", "ic", "ai", "us", "\u0438", "iu", "n", "ix", "ind", "id", "ip", "y", "o", "is", "x", "im", "l", "qi"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    private static Scanner scanner;\\n    private static final int HH_TIME = 3600;\\n    private static final int MM_TIME = 60;\\n\\n    public static void main(String[] args) {\\n        scanner = new Scanner(System.in);\\n        System.out.println(timeChangeHMS(scanner.nextInt()));\\n    }\\n\\n    /*\\n     * \u79d2\u6570\u304b\u3089HH:MM:SS\u3067\u5909\u63db\u3057\u307e\u3059\u3002\\n     */\\n    private static String timeChangeHMS(int input) {\\n        Integer hh = 0;\\n        Integer mm = 0;\\n        Integer ss = 0;\\n        if (input >= HH_TIME) {\\n            Integer mm_s = 0;\\n            hh = input / HH_TIME;\\n            mm_s = input % HH_TIME;\\n            if (mm_s >= MM_TIME) {\\n                mm = mm_s / MM_TIME;\\n                ss = mm_s % MM_TIME;\\n            } else {\\n                ss = mm_s;\\n            }\\n        } else {\\n            mm = input / MM_TIME;\\n            ss = input % MM_TIME;\\n        }\\n        return hh.toString() + \":\" + mm.toString() + \":\" + ss.toString();\\n    }\\n}", "target": "84", "substitutes": {"scanner": ["canter", "cater", " scaner", "caninner", "Scanener", "scner", "Scanner", " scanener", "canener", "scener", "scaninner", "caner", "aninner", "catener", "Scaner", "scer", " scaninner", "canner", "scanener", "scanter", "scaner", "catter", " scanter", "scter", "anner", "anter", "catner", "aner", "Scanter"], "HH_TIME": ["HHJECTWIND", " HH_PATH", "HH______Time", "HQ_FILE", " HH_Time", "HHJECTTIME", "HC_Time", "HH______FILE", "HQ_MODE", "HH_MODE", "HH_FILE", "HHJECTTime", "HH_UID", " HH_FILE", " HH_UID", "HH______TIME", " HH_WIND", "HH______PATH", "HH_Time", "HQ_Time", "HC_TIME", "HHJECTUID", "HC_FILE", "HH_PATH", "HH_WIND", "HC_WIND", "HQ_TIME"], "MM_TIME": ["MM_COLOR", "mmMAXTime", "MMETTime", "MM_TM", "HH_Time", "mm_TIME", "MP_TIME", "HH_IME", "M_TIME", "MMETTIME", "mm_COLOR", "MMMAXCOLOR", "MMETIME", "MP_IME", "mmMAXTIME", "M_ID", "MMETTM", "M_IME", "MM_IME", "mmMAXCOLOR", "MM_DATA", "MP_Time", "MP_TYPE", "MM_MODE", "mm_Time", "HH_TM", "MM_ID", "MM_TYPE", "mmMAXMODE", "MMMAXTIME", "MMMAXMODE", "mm_MODE", "MM_Time", "HH_DATA", "M_Time", "MMMAXTime"], "input": ["act", "current", " Input", "img", "init", "i", "command", "doc", " inputs", "in", "q", "hello", "window", "empty", "history", "human", "this", "lat", "height", "internal", "up", "unknown", "start", "buffer", "from", "proc", "index", "accept", "client", "cur", "result", "list", "inner", "form", "request", "local", "mmm", "data", "inc", "get", "output", "add", "config", "total", "raw", "hidden", "active", "length", "integer", "Input", "image", "base", "alpha", "ix", "pattern", "view", "unsigned", "field", "valid", "old", "source", "initial", "PUT"], "hh": ["hs", "h", "het", "jj", "uh", "mmmm", "hi", "Hz", "Hmm", "mph", "hm", "oh", "hour", "ph", "dd", "hd", "hu", "kh", "zh", "hum", "hess", "hw", "hz", "HH", "sh", "hr", "hhhh", "mmm", "ih", "ht", "igm", "hn", "hhh", "ha", " HH", "hl", "xx", "MH", "bh", "ho", "dh", "udd"], "mm": ["mat", "mk", "m", "mom", "amm", "mon", "dm", "mmmm", "mind", "MM", "fm", "mill", "ml", "irm", "Hmm", "mx", "mph", "cm", "sm", "ph", "dd", "mi", "pm", "mn", "md", "med", "mma", "ym", "ma", "sh", "mp", "mmm", "cms", "mb", "mem", "my", "mt", "igm", "ms", "man", "mic", "tm", "xx", "wm", "fr", "mac", "pp", "ami"], "ss": ["rs", "oss", "ness", "s", "sol", "fs", "nn", "sb", "ass", "bs", "cs", "tz", "rss", "sys", "hess", "sc", "si", "sh", "ks", "su", "mes", "\u00df", "zz", "sw", "ys", "ssl", "mb", "sv", "ms", "ws", "ns", "ess", "sy", "sn", "xx", "css", "SS", "ds", "sex", "ser", "sd", "js", "ls", "ts", "ius", "iss", "sq"], "mm_s": ["ami5sw", "mx_s", "mmm_S", "mi_m", "mm_sb", "mm5u", "mm_u", "mi_i", "mm5sb", "mm_is", "ami5s", "mx_is", "mmm_s", "mx_rs", "mm_i", "ami5u", "mm_sw", "ami_sb", "mmaphi", "mmaphs", "MM_s", "MM_ls", "mm5s", "mm_S", "mi_s", "mmm_ss", "mm_ls", "mm_m", "ami_s", "ami5sb", "ami_u", "mm_rs", "mm_ss", "ami_sw", "MM_i", "mm5sw", "mmaphls"]}}
{"code": "import java.util.*;\\nimport java.util.TreeMap;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int cnt = 1;\\n    int min = sc.nextInt();\\n    for (int i = 0; i < N - 1; i++) {\\n      int next = sc.nextInt();\\n      if (min > next) {\\n        cnt++;\\n      }\\n      min = Math.min(min, next);\\n    }\\n    System.out.println(cnt);\\n  }\\n}\\n", "target": "229", "substitutes": {"sc": [" Sc", "tch", "system", "cc", "cle", "tc", "cr", "ss", "rc", "pb", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "exp", "pl", "ch", "osc", "pc", "isc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "sci", "SC", "sw", "gc", "inc", "fc", "sv", "screen", "dc", "lc", "scan", "sp", "asc", "ctrl", "sch", "sec", "anc", "usc", "sq"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "NL", "NS", "I", "D", "GN", "NO", "NV", "NP", "NB", "L", "ND", "V", "TN", "Size", "NM", "Net", "NT", "NA", "T", "J", "n", "Len", "M", "R", "C", "Z", "X", "O"], "cnt": ["ctct", "cnc", "nNT", "Cct", "cct", "cNT", "Cnc", "uncNT", "ncount", "ctNT", " cnc", "uncount", "uncnc", " cn", "nnt", "Cnt", "count", " ccount", "ctn", "uncnt", "Cn", "CNT", "nount", " count", "ccount", "Count", " cNT", "Ccount", "cn", "ctnt", " cct"], "min": ["m", "me", "string", "lower", "sol", "low", "minimum", "sim", "in", "none", "mins", "mis", "Min", "MIN", "sort", "mid", "member", "rel", "emin", "mi", "lock", "diff", "negative", "mn", "med", "ne", "start", "pre", "Minimum", "first", "ni", "minus", "ma", "latest", "mp", "best", "scale", "mine", "down", "ms", "dot", "search", "last", "average", "dist", "div", "mini", "n", "tr", "lt", "default", "minute", "mean", "rest", "partial", "Mini", "max", "stat", "small", "amin", "mr", "mod"], "i": ["ii", "phi", "out", "m", "gu", "xi", "j", "multi", "sim", "it", "bi", "init", "hi", "u", "ci", "di", "I", "mi", "ie", "gi", "ni", "li", "ei", "si", "pi", "iter", "iq", "ti", "v", "cli", "zi", "ui", "ms", "ini", "ai", "ic", "us", "ish", "iu", "n", "ix", "id", "ip", "y", "is", "x", "im", "qi"], "next": ["prev", "ng", "mk", "current", "extra", "me", "j", "seq", "sequence", "link", "nn", "net", "z", "nd", "continue", "window", "complete", "dev", "sen", "ne", "ext", "prime", "bis", "first", "entry", "nc", " NEXT", "latest", "nz", "Next", "ptr", "obj", "txt", "end", "total", "jp", "step", "future", "nl", "used", "last", "nw", "div", "n", "secondary", "def", "max", "size", "sec", "nr", "gt", "nt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void insertionSort(int[] array, int n) {\\n\t\tint v, j;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tv = array[i];\\n\t\t\tj = i - 1;\\n\t\t\twhile (j >= 0 && array[j] > v) {\\n\t\t\t\tarray[j + 1] = array[j];\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\tarray[j + 1] = v;\\n\t\t\tfor (int k = 0; k < n; k++) {\\n\t\t\t\tSystem.out.print(array[k]);\\n\t\t\t\tif (k < n - 1) {\\n\t\t\t\t\tSystem.out.print(\" \");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t}\\n\t\\n\tvoid run() {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] array = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tarray[i] = sc.nextInt();\\n\t\t}\\n\t\tinsertionSort(array, n);\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().run();\\n\t}\\n}\\n", "target": "69", "substitutes": {"array": ["message", "rays", "value", " Array", "arrow", "history", "function", "stack", "instance", "list", "trace", "my", "ar", "memory", "all", "bar", "integer", "closure", "object", "stage", "attribute", "say", "queue", "string", "number", "values", "answer", "format", "go", "grid", "result", "variable", "share", "buffer", "external", "actor", "ash", "data", "a", "component", "archive", "length", "vector", "now", "table", "view", "position", "hash", "air", "range", "save", "sequence", "expression", "window", "row", "original", "area", "our", "index", "random", "code", "form", "var", "element", "shape", "ray", "collection", "system", "address", "arr", "order", "au", "record", "this", "sh", "raw", "search", "ape", "audio", "Array", "angle", "map", "export", "batch"], "n": ["ng", "out", "m", "norm", "nan", "nn", "net", "fn", "q", "r", "z", "ln", "number", "t", "ne", "network", "mn", "on", "ni", "nm", "en", "len", "np", "c", "nc", "p", "conf", "N", "count", "and", "nb", "w", "d", "no", "nu", "g", "name", "names", " N", "num", "ns", "un", "nl", "sn", "now", "na", "sd", "y", "o", "cn", "l", "ity", "nt"], "v": ["vs", "m", "b", "value", "vm", "f", "vv", " V", "q", "mint", "av", "z", "u", "cv", "t", "iv", "vy", "vp", "nv", "qv", "V", "vi", "ve", "vol", "uv", "p", "c", "vert", "g", "tv", "version", "sv", "lv", "vr", "val", "ver", "y", "vt", "va", "conv", "o", "x", "l", "ov", "vc"], "j": ["b", "m", "ja", "bo", "br", "ji", "jj", "jc", "it", "jac", "q", "r", "z", "uj", "el", "row", "jump", "jit", "json", "gov", "je", "pt", "pr", "ju", "kj", "vol", "kid", "next", "p", "jl", "obj", "jo", "g", "other", "aj", "jp", "ij", "block", "dj", "J", "err", "ind", "fr", "ver", "js", "y", "o", "x", "col", "l", "job"], "i": ["ii", "phi", "m", "xi", "me", "inter", "s", "fi", "ri", "init", "bi", "it", "ji", "hi", "q", "ims", "ci", "iii", "at", "di", "I", "t", "mi", "this", "ie", "info", "gi", "index", "ir", "li", "ei", "si", "inner", "pi", "iter", "ti", "g", "io", "cli", "ij", "zi", "ui", "batch", "ini", "ai", "ic", "us", "\u0438", "itime", "ish", "iu", "ind", "ix", "id", "MI", "ip", "y", "o", "is", "key", "x", "im", "ori", "uri", "l", "ami", "ity", "qi"], "k": ["mk", "unk", "m", "dk", "sk", "kar", "ke", "ik", "ko", "kn", "q", "kt", "kr", "km", "ok", "ph", "wk", "kh", "kind", "ak", "ck", "kj", "uk", "kid", "kl", "ka", "ks", "ku", "K", "ijk", "kk", "kan", "kw", "key", "ek", "tk", "ki"], "sc": ["system", "cc", "cle", "ss", "tc", "cr", "rc", "pb", "cam", "cl", "bc", "cs", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "uc", "sys", "psc", "mc", "scl", "c", "nc", "sh", "SC", "gc", "sw", "ssl", "fc", "st", "ctx", "sv", "co", "nl", "dc", "lc", "sp", "ser", "asc", "sch", "disc", "sec", "usc", "anc", "sq"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\npublic static void main(String[] args){\\nScanner sc = new Scanner(System.in);\\nint N = sc.nextInt();\\nint T  = sc.nextInt();\\nint A = sc.nextInt();\\nint H[] = new int[N];\\nfor(int i =0;i<N;i++){\\nH[i] = sc.nextInt();\\n}\\n\\ndouble min  = H[0];\\nint minidx = 0;\\nfor(int i = 0;i < N;i++){\\ndouble tem = Math.abs(A -(T - H[i]*0.006));\\nif(min>tem){\\nmin = tem;\\nminidx = i;\\n}\\n}\\nSystem.out.println(minidx + 1);\\n\\n} \\n}", "target": "210", "substitutes": {"sc": [" Sc", "system", "sa", "cc", "tc", "cr", "ss", "capt", "rc", "pb", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "c", "nc", "SC", "gc", "sw", "inc", "cons", "fc", "sv", "dc", "scan", "lc", "sp", "ser", "asc", "conv", "cgi", "ctrl", "sch", "anc", "usc", "sq"], "N": ["B", "E", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "NL", "AN", "NS", "I", "D", "NO", "GN", "NP", "NC", "NB", "L", "ND", "V", "TN", "NG", "NM", "NT", "NA", "Y", "K", "J", "Q", "NE", "n", "M", "R", "C", "Z", "X", "O"], "T": ["AT", "B", "E", "P", "TM", "S", "G", "TI", "t", "I", "D", "TT", "W", "L", "PT", "V", "TN", "TC", "TH", "TB", "XT", "Y", "TY", "TA", "K", "J", "VT", "TS", "M", "R", "C", "X", "GT"], "A": ["AT", "B", "AC", "E", "P", "GA", "LA", "At", "AGE", "AA", "S", "G", "mA", "AB", "I", "D", "AH", "W", "L", "SA", "V", "AF", "AM", "An", "AU", "ESS", "a", "TA", "IA", "alpha", "JA", "AR", "M", "R", "U", "C", "AP"], "H": ["B", "NH", "h", "HT", "P", "F", "He", "HTTP", "HQ", "HD", "G", "HP", "I", "HM", "RH", "HTML", "HL", "L", "HC", "V", "CH", "PH", "HS", "His", "HH", "TH", "HE", "HA", "K", "HO", "Host", "J", "Q", "HI", "HF", "OH", "MH", "M", "HB", "C", "Th", "HR"], "i": ["ji", "hi", "q", "ani", "ci", "mi", "php", "list", "li", "v", "name", "ij", "ui", "ini", "ai", "err", "ix", "m", "multi", "bi", "f", "ik", "iy", "json", "ei", "c", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "l", "ity", "ki", "ii", "ri", "init", "fire", "yi", "di", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "ip", "cgi", "PI", "qi", "phi", "gu", "me", "xi", "j", "sim", "s", "it", "ims", "set", "I", "this", "ie", "client", "p", "point", "iter", "g", "ic", "iu", "base", "is", "x", "oi", "batch"], "min": ["m", "me", "lower", "sol", "sim", "minimum", "init", "test", "mel", "none", "mins", "Min", "MIN", "only", "format", "rel", "emin", "med", "mn", "req", "start", "pre", "from", "Minimum", "local", "best", "aug", "v", "name", "param", "man", "un", "small", "sem", "mini", "don", "n", "lt", "default", "mean", "minute", "rest", "Mini", "max", "stat", "old", "initial", "sum", "amin", "master", "mod"], "minidx": ["minidex", "minidexs", "modidxs", "mininddx", "minidxf", "modiddx", "modenddx", "modindtx", "minindxf", "minenddx", "MINindx", "modendix", "minidext", "minindix", "minidsix", "minidxs", "minidxt", "minidtx", "minindxt", "minideix", "MINidxs", "modidx", "MINidix", "modidxf", "miniqxf", "modindxf", "minidsx", "minindtx", "MINidx", "modindix", "minendix", "MINindxs", "modendx", "miniddx", "miniqtx", "minendxs", "miniqix", "modidix", "modendxs", "minindxs", "minendx", "MINidxt", "MINindxt", "minindx", "minendxt", "minidstx", "modindx", "minidix", "MINindix", "modidtx", "miniqx", "minidsxf", "minidedx"], "tem": ["ty", "sam", "san", "um", "ness", "term", "sim", "tmp", "the", "tan", "tc", "tim", "temp", "sm", "dem", "Tem", "stem", "hum", "heit", "sky", "met", "cu", "tex", "thal", "template", "ex", "ta", "cum", "mem", "tm", "cell", "sem", "sp", "sex", "tic", "htm", "mm", "tt", "im", "rem", "em", "lam", "sat", "stable", "cold"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.List;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n\\n        InputStreamReader is = new InputStreamReader(System.in);\\n        BufferedReader reader = new BufferedReader(is);\\n\\n        List<String> mylist = new ArrayList<>();\\n\\n        // \u6a19\u6e96\u5165\u529b\u304b\u3089\u306e\u5024\u3092\u5909\u6570strinput\u306b\u4ee3\u5165\\n        String strinput = reader.readLine();\\n\\n        while (strinput != null) {\\n\\n            mylist.add(strinput);\\n            strinput = reader.readLine();\\n\\n        }\\n\\n        String arr01[] = mylist.get(0).split(\" \");\\n\\n        int n = Integer.valueOf(arr01[0]);\\n        int k = Integer.valueOf(arr01[1]);\\n        int cnt = 0;\\n        while (n >= 1) {\\n//            System.out.println(n / k);\\n            n = n / k;\\n            cnt += 1;\\n        }\\n\\n        System.out.println(cnt);\\n\\n    }\\n}\\n", "target": "219", "substitutes": {"is": ["ris", "rs", "ri", "isin", "its", "isa", "sim", "isf", "i", "fs", "in", "iris", "lis", "mis", "iso", "rys", "os", "se", "isc", "isl", "bis", "sys", "Is", "ist", "sis", "ins", "iter", "ais", "ms", "sit", "ic", "as", "isi", "ai", "ios", "ip", "iss", "es", "ir", "IS"], "reader": ["out", "system", " writer", "in", "r", "dr", "iterator", "read", "instance", "result", "buffer", "er", "parser", "inner", "iter", "data", "res", "io", "Reader", "util", "stream", "impl", "base", "map", "ser", "writer"], "mylist": ["yourresult", "yourList", " myresult", "yourlists", "Mylist", "MyList", " myList", "myList", " mylists", "Myresult", "myresult", "mylists", "Mylists", "yourlist"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int[] a = new int[n];\\n    for(int i = 0; i<n; i++){\\n      a[i] = sc.nextInt();\\n    }\\n    int count = selectionSort(a,n);\\n    for(int i = 0; i<n; i++){\\n      if(i == n-1){\\n        System.out.println(a[i]);\\n      }else{\\n        System.out.print(a[i] + \" \");\\n      }\\n    }\\n    System.out.println(count);\\n  }\\n\\n  public static int selectionSort(int[] a, int n){\\n    int count = 0;\\n    for(int i = 0; i<n; i++){\\n      int minj = i;\\n      for(int j = i; j<n; j++){\\n        if(a[j]<a[minj]){\\n          minj = j;\\n        }\\n      }\\n      int free = a[i];\\n      a[i] = a[minj];\\n      a[minj] = free;\\n      if(a[i] != a[minj]){\\n        count++;\\n      }\\n    }\\n    return count;\\n  }\\n}", "target": "199", "substitutes": {"sc": ["ng", "system", "cc", "cle", "tc", "ss", "cr", "rc", "pb", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "uc", "sys", "mc", "scl", "c", "nc", "si", "SC", "gc", "sw", "sv", "nl", "lc", "scan", "sp", "sel", "ser", "asc", "conv", "sch", "sec", "usc", "sq"], "n": ["ng", "out", "m", "nan", "after", "nn", "net", "number", "in", "q", "z", "ln", "span", "t", "k", "ne", "mn", "network", "ll", "on", "nm", "en", "p", "nc", "np", "c", "len", "nor", "N", "and", "nb", "g", "d", "v", "no", "nu", "name", "w", "total", "all", "names", " N", "ns", "num", "un", "nl", "sn", "na", "o", "x", "size", "cn", "l", "nt"], "a": ["out", "la", "changes", "eas", "era", "A", "att", "ab", "qa", "zero", "list", "xa", "trace", "w", "aa", "ack", "v", "ar", "all", "as", "ai", "m", "e", "foo", "f", "am", "parts", "at", "go", "ao", "c", "ea", "an", "ga", "aux", "l", "actions", "aaa", "sta", "sa", "aw", "ed", "area", "ba", "ta", "array", "ace", "alpha", "na", "o", "ae", "action", "act", "b", "apa", "oa", "ap", "s", "da", "cache", "z", "u", "wa", "t", "au", "ca", "ma", "app", "ac", "p", "aka", "g", "ia", "auto", "ata", "va", "fa"], "i": ["ji", "hi", "q", "in", "ci", "iso", "mi", "li", "iq", "v", "name", "my", "ij", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "e", "bi", "f", "user", "iy", "at", "entry", "ei", "pi", "cli", "zi", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "um", "ri", "init", "di", "info", "gi", "index", "si", "ti", "io", "iri", "\u0438", "ind", "to", "ip", "PI", "ori", "ir", "qi", "phi", "xi", "me", "sim", "it", "ims", "u", "t", "I", "this", "ie", "internal", "client", "p", "point", "ex", "iter", "g", "ia", "ic", "iu", "base", "is", "x", "oi", "batch"], "count": ["current", "check", "h", "flag", "ount", "test", "cache", "success", "number", "must", "error", "ctr", "z", "core", "hold", "continue", "find", "t", "cont", "force", "content", "result", "counter", "index", "zero", "list", "report", "p", "c", "code", "nc", "status", "amount", "N", "match", "comment", "conf", "nb", "trace", "d", "v", "name", "total", "score", "process", "num", "state", "const", "length", "Count", "ind", "cond", "val", "call", "size", "sum", "found", "nt"], "minj": ["starji", "memj", "minuj", "minaj", "merja", "MINuj", " minaj", "starjs", "MINji", "meri", "mini", "lowerja", "minsj", "lockje", "dimji", "lowern", "merj", "starx", "lockj", "memji", "dimj", "lockji", "lockja", "prijp", "lowerjs", "mern", "minjs", "beginj", "mitj", "begini", "starjp", "minimumuj", "MINja", "minsuj", "beginn", " minx", "priaj", "lowerj", "mitje", "prij", "minn", "minje", " minjs", "minimumj", "tenaj", "dimja", "tenja", "starj", "tenn", "donn", "beginja", "doni", "priji", " minn", " minja", "MINj", "tenx", "donj", "dimje", "minsji", "memaj", "tenj", "staraj", "minjp", "mitji", "minja", "minsja", "memjp", "mitja", "minx", "minimumji", "minji", "donja", "minimumja", "tenjs"], "j": ["oj", "b", "m", "s", "ja", "br", "it", "ji", "jj", "e", "jc", "jac", "q", "r", "z", "by", "uj", "bj", "ph", "k", "jump", "jit", "json", "je", "pt", "pr", "ju", "kj", "ax", "jl", "obj", "jo", "g", "bot", "v", "other", "aj", "zone", "jp", "ij", "dj", "J", "l", "tr", " dj", "ix", "fr", "ind", "js", "y", "o", "x", "ion", "col", "err", "ge"], "free": ["offset", "out", "current", "con", "f", "shared", "full", "alloc", "checked", "available", "complete", "locked", "slot", "node", "zero", "buffer", "vol", "null", "ptr", "res", "total", "mem", "release", "left", "open", "Free", "const", "FREE", "used", "tree", "tr", "required", "filled", "released", "occupied", "valid", "ret", "stable"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main\\n{\\n\tpublic static void main(String [] Args)\\n\t{\\n\t\tScanner in=new Scanner(System.in);\t\t\\n\t\tlong a=in.nextLong();\\n\t\tlong b=in.nextLong();\\n\t\tlong c=in.nextLong();\\n\t\tlong d=in.nextLong();\\n\t\tlong g=gcd(c,d);\\n\t\tlong q=c*d/g;\\n\t\tlong ans=b/c-(a-1)/c;\\n\t\tans=ans+b/d-(a-1)/d;\\n\t\tans=ans-b/q+(a-1)/q;\\n\t\tans=b-a-ans+1;\\n\t\tSystem.out.println(ans);\\n\t}\\n\t\\n\tpublic static long gcd(long a,long b)\\n\t{\\n\t\tif(a%b==0)\\n\t\t\treturn b;\\n\t\treturn gcd(b,a%b);\\n\t}\\n}\\n", "target": "9", "substitutes": {"Args": ["In", " Arg", "Obj", "Parts", "cmd", "Str", "Command", "Files", "Out", "Name", "uments", "GV", "gs", "Ex", "Main", "Init", " arguments", "Ws", "Flags", "Arg", "GS", "Path", "Cmd", "Names", "Thread", "arg", "Options"], "in": ["serv", "out", "inf", "In", "con", "isin", "i", "init", "doc", "it", "run", " din", "r", "file", "ln", "user", "by", "rin", "reader", "at", "k", "read", "IN", "info", "std", "from", "line", "er", "gin", "en", "ins", "inner", "conf", "ex", "inn", "inc", "get", "cin", "io", "add", "input", "world", "raw", "all", "bin", "ini", "as", "ic", "state", "stream", "or", "thin", "scan", "n", "err", "ind", "readable", "mm", "din", "o", "is", "sum", "l", "rt"], "a": ["aaa", "aff", "m", "h", "la", "sta", "oa", "j", "s", "sa", "i", "e", "f", "da", "sha", "r", "am", "z", "era", "span", "at", "t", "A", "au", "el", "area", "ab", "ca", "ma", "app", "ac", "p", "part", "ba", "ao", "ea", "aka", "acc", "ta", "an", "w", "aa", "ia", "ar", "v", "aj", "ga", "ai", "as", "alpha", "n", "pa", "na", "y", "va", "o", "x", "al", "l", "ae"], "b": ["B", "out", "m", "h", "eb", "ob", "j", "s", "br", "i", "e", "bi", "ub", "f", "bl", "it", "r", "be", "sb", "u", "z", "fb", "bc", "bs", "change", "t", "blue", "ab", "ib", "cb", "gb", "beta", "bb", "p", "ba", "db", "rb", "w", "v", "nb", "bp", "bar", "base", "n", "bound", "y", "o", "x", "l"], "c": ["m", "h", "cc", "e", "cat", "f", "i", "cr", "rc", "r", "z", "u", "ci", "bc", "cs", "cm", "cd", "t", "cos", "cb", "ca", "ch", "enc", "cf", "cu", "ac", "p", "nc", "fc", "v", "ic", "co", "dc", "lc", "n", "o", "unc", "C", "cn", "cod", "l"], "d": ["h", "m", "j", "s", "i", "e", "f", "da", "dm", "r", "z", "u", "t", "dd", "D", "di", "cd", "dt", "dp", "dig", "bd", "p", "db", "ad", "data", "w", "v", "df", "dc", "de", "n", "dat", "ds", "o", "x", "l"], "g": ["m", "h", "j", "i", "e", "cc", "f", "gd", "r", "z", "u", "G", "t", "gb", "bg", "p", "gs", "gn", "an", "gm", "gc", "v", "w", "ic", "n", "ang", "y", "o", "x", "l", "gt", "ge"], "q": ["qq", "m", "h", "j", "s", "i", "e", "it", "f", "r", "z", "u", "ql", "qu", "t", "k", "dq", "ch", "qs", "ig", "p", "query", "w", "v", "ic", "Q", "n", "y", "o", "x", "l", "sq", "qi"], "ans": ["uns", "posts", "rs", "vs", "s", "ats", "aos", "ies", "xs", "ups", "ann", "ani", "ians", "vals", "lan", "ens", "ands", "terms", "aus", "cs", "outs", "els", "anned", "os", "anas", "angs", "ams", "ags", "qs", "anes", "offs", "eds", "aps", "gs", "ks", "ins", "an", "lines", "cons", "ions", "ars", "names", "ms", "ents", "as", "ns", "arms", "orts", "ants", "times", "flags", "ids", "eps", "ons", "ates", "ds", "ps", "arts", "ls", "ts", "ints", "ANS", "amps", "ana", "es", "ports", "olds", "actions", "ads"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint k = scan.nextInt();\\n\t\tint[] p = new int[n];\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tp[i] = scan.nextInt();\\n\t\t}\\n\t\tArrays.sort(p);\\n\t\tint sum = 0;\\n\t\tfor(int i=0; i<k; i++){\\n\t\t\tsum += p[i];\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t}\\n}\\n", "target": "41", "substitutes": {"scan": ["range", "store", "save", "out", "san", "check", "con", "system", "sim", "can", "skip", "see", "cat", "Scan", "ann", "pass", "nn", "in", "r", "re", "scroll", "sort", "sm", "row", "sync", "read", "black", "connect", "se", "go", " Scan", "ch", "sign", "sys", "proc", "sc", "reach", "ner", "report", "query", "gen", "sur", "send", "gate", "parse", "sql", "an", "gc", "sin", "g", "auto", "sv", "search", "sp", "na", "ser", " scanner", "cgi", "sche", "find", "build"], "n": ["act", "ng", "m", "j", "nn", "net", "number", "in", "r", "z", "ln", "t", "nr", "ne", "mn", "on", "en", "np", "nc", "c", "ot", "N", "pi", "an", "nb", "d", "v", "nu", "no", "all", "ns", "num", "un", "nl", "length", "sn", "nw", "na", "o", "x", "cn", "l", "nt"], "k": ["mk", "m", "j", "dk", "sk", "ke", "ik", "ko", "q", "kn", "r", "z", "kr", "km", "t", "ok", "wk", "kh", "ak", "kick", "ck", "kj", "kl", "ks", "ka", "w", "g", "ack", "v", "K", "kk", "kw", "tk", "kok", "ek", "ku", "ki"], "p": ["per", "P", "pins", "pe", "ap", "rep", "cache", "pb", "q", "pers", "lp", "pm", "pn", "pl", "vp", "ping", "pc", "pt", "perm", "pr", "pkg", "pre", "tp", "np", "pi", "parse", "mp", "port", "bp", "jp", "pd", "pa", "sp", "ps", "ip", "post", "pp", "cp", "press", "fp"], "i": ["ii", "phi", "gu", "xi", "umi", "me", "multi", "sim", "j", "fi", "ri", "eu", "init", "bi", "it", "ji", "hi", "fire", "ims", "ci", "iy", "iso", "di", "I", "mi", "ie", "info", "gi", "client", "ni", "uli", "mu", "li", "php", "ei", "si", "ski", "pi", "ti", "io", "cli", "ij", "zi", "ui", "batch", "ini", "ai", "ic", "us", "\u0438", "chain", "iu", "base", "ix", "ind", "ip", "y", "uri", "is", "PI", "im", "oi", "ori", "err", "ami", "ity", "qi", "ki"], "sum": ["cost", "sam", "out", "um", "sat", "tu", "sim", "tmp", "sa", "ss", "success", "must", "ass", " sums", "temp", "sort", "dev", "black", "hum", "loss", "result", "zero", "commit", "vol", " SUM", "si", "acc", " summed", "su", "union", "comment", "cum", "summary", "other", "cal", "count", "add", "total", "mem", "num", "us", "average", "alpha", "Sum", "mean", "max", "size", "hash", "mod"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scn = new Scanner(System.in);\\n\t\tArrayList<Character> caca = new ArrayList<Character>();\\n\t\tString n = scn.next();\\n\t\tfor(int i = 0;i<n.length();i++) {\\n\t\t\tif(n.charAt(i)=='1')caca.add('1');\\n\t\t\telse if(n.charAt(i)=='0')caca.add('0');\\n\t\t\telse if(n.charAt(i)=='B') {\\n\t\t\t\tif(!caca.isEmpty())caca.remove(caca.size()-1);\\n\t\t\t}\\n\t\t}for(int i = 0;i<caca.size();i++)System.out.print(caca.get(i));\\n\t\tSystem.out.println();\\n\t\tscn.close();\\n\t}\\n}", "target": "151", "substitutes": {"scn": ["scanne", "scr", "scon", "ascen", "ascne", "scner", "ascner", "scann", "ascn", "ScN", "escr", "secne", "scanN", " scne", " scon", " scan", "scen", "ascN", " scen", " scner", "ascan", "scanner", "secan", "secn", " scr", "scne", "Scr", "escon", "scN", "Scon", "Scn", "escN", "scan", "secen", " scN", "escn"], "caca": ["luca", "cuac", "laca", "cacheaca", "Caca", "cuma", "ciuca", "uncuda", "Cuda", "ccaca", "ciaca", "Camac", "pattle", "ccuda", " cca", "caco", "fuca", "Cac", "ccaco", "caxe", "Cuca", "fca", "scaco", "scuca", "paco", "uncac", "scaca", "acaco", "cattle", "cacheuca", "cacheamac", "cuda", "acac", "cuca", "Cca", "cuaco", "dcaca", "cuaca", "acaca", "cuuda", " cattle", "dcattle", "dcaco", "uncuca", "acuda", "ccuca", "camac", " caco", " cac", "cacheattle", "cca", "uncuma", "paxe", " cuca", "uncaca", "paca", "dcuca", " cuda", "ciacas", "lacas", "uncacas", "cuaxe", "Caco", "cuattle", "Cattle", "scuda", "faca", " camac", "dcuda", "cacas", " caxe", "fac", "luma", "cac", "ciuma"], "n": ["ng", "m", "norm", "s", "j", "nn", "ren", "net", "fn", "r", "z", "ln", "t", "nr", "ne", "network", "ll", "on", "nm", "p", "en", "c", "nc", "gn", "note", "np", "N", "nor", "sql", "form", "g", "v", "nu", "a", "name", "wn", "raw", "names", "ns", "nl", "sn", "tn", "nw", "na", "y", "o", "dn", "cn", "l", "nt"], "i": ["ji", "hi", "gl", "q", "in", "ci", "mi", "mu", "li", "remote", "v", "my", "ij", "ui", "ini", "ai", "us", "ix", "m", "multi", "bi", "go", "json", "load", "ei", "status", "pi", "cli", "zi", "chain", "y", "uri", "im", "ami", "ki", "ii", "ri", "eu", "init", "yi", "di", "wi", "exp", "info", "gi", "index", "ni", "si", "ski", "sql", "ti", "io", "iri", "\u0438", "ind", "to", "ip", "cgi", "ori", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "ims", "I", "series", "slice", "ex", "g", "ia", "ic", "iu", "conv", "is", "key", "x", "oi", "err"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tString S = scan.next();\\n\\n\t\tSystem.out.println(S.equals(\"AAA\") || S.equals(\"BBB\")?\"No\":\"Yes\");\\n\t\tscan.close();\\n\\n\t}\\n\\n}\\n", "target": "76", "substitutes": {"scan": ["store", "save", "out", "m", "san", "check", "clean", "con", "system", "can", "skip", "char", "Scan", "run", "ann", "in", "scroll", "set", "row", "read", "sync", "connect", "se", "seek", "sky", "start", "sys", "proc", "sc", "reach", "ner", "report", "query", "match", "send", "gate", "parse", "an", "sin", "get", "scale", "auto", "sv", "search", "util", "watch", "n", "look", "stat", "sum", "sche", "find", "syn"], "S": ["B", "SM", "WS", "E", "P", "s", "SN", "G", "CS", "NS", "A", "I", "D", "SER", "ST", "L", "ASH", "SA", "V", "SF", "RS", "BY", "SI", "SP", "H", "N", "BS", "Si", "T", "PS", " s", "SU", "J", "US", "SS", "SAN", "SH", "GS", "U", "M", "R", "TS", "SOURCE", "C", "Z", "SB", "SAM", "IS"]}}
{"code": "\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.util.stream.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        //\u30b3\u30fc\u30c9\\n        Scanner scanner = new Scanner(System.in);\\n        Integer n = Integer.parseInt(scanner.next());\\n        Integer d = Integer.parseInt(scanner.next());\\n        Integer[][] x = new Integer[n][d];\\n\\n        for(int i = 0; i < n; i++) {\\n            for(int j = 0; j <d; j++ ) {\\n                x[i][j] = Integer.parseInt(scanner.next());\\n            }\\n        }\\n\\n        int count = 0;\\n        ArrayList<Integer> intList = new ArrayList<Integer>();\\n        for(int i =0; i < n; i++) {\\n            for(int j = i+1; j < n; j++) {\\n                int total = 0;\\n                for(int k = 0; k < d; k++) {\\n                    total += (int) Math.pow(x[i][k] - x[j][k], 2);\\n                }\\n                intList.add(total);\\n            }\\n        }\\n\\n        count = 0;\\n        for (int i = 0; i < intList.size(); i++) {\\n            if ((Math.sqrt(intList.get(i)) == Math.floor(Math.sqrt(intList.get(i))))\\n                    && !Double.isInfinite(Math.sqrt(intList.get(i)))) {\\n                count++;\\n            }\\n        }\\n\\n        System.out.println(count);\\n    }\\n}", "target": "59", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        // \u6574\u6570\u306e\u5165\u529b\\n        int[] a= new int[5];\\n        for(int i=0;i<5;++i){\\n            a[i]=sc.nextInt();\\n        }\\n        int temp=a[0];\\n        int r=0;\\n        for(int i=1;i<5;++i){\\n            if(a[i]%10<temp%10 && a[i]%10!=0){\\n                r+=temp-temp%10+10;\\n                temp=a[i];\\n            }else if(a[i]%10==0){\\n                r+=a[i]-a[i]%10;\\n            }else{\\n                r+=a[i]-a[i]%10+10;\\n            }\\n        }\\n        System.out.println(r+temp);\\n    }\\n}\\n", "target": "63", "substitutes": {"sc": [" Sc", " ss", "system", "sa", "cr", "ss", "rc", "sb", "cs", "Sc", "ch", " sw", "sys", "proc", " SC", " scr", "c", "SC", "sv", " sk", " sh", "scan", " sp", "sp", " cr", " sa", " scorer", "sq"]}}
{"code": "//package com.daimens.algorithm.june;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\n/**\\n * \\n * @author DemonSong\\n * \\n *         5.GCD and LCM\\n * \\n *         GCD and LCM Time Limit : 1 sec, Memory Limit : 65536 KB Japanese\\n *         version is here GCD and LCM Write a program which computes the\\n *         greatest common divisor (GCD) and the least common multiple (LCM) of\\n *         given a and b.\\n * \\n *         Input Input consists of several data sets. Each data set contains a\\n *         and b separated by a single space in a line. The input terminates\\n *         with EOF.\\n * \\n *         Constraints 0 < a, b ??? 2,000,000,000 LCM(a, b) ??? 2,000,000,000 The\\n *         number of data sets ??? 50 Output For each data set, print GCD and LCM\\n *         separated by a single space in a line.\\n * \\n *         Sample Input 8 6 50000000 30000000 Output for the Sample Input 2 24\\n *         10000000 150000000\\n * \\n *\\n */\\npublic class Main{\\n\\n\tpublic static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String str;\\n        long a,b;\\n \\n \\n        while((str=br.readLine()) != null){\\n            a = Long.parseLong(str.substring(0, str.indexOf(\" \")));\\n            b = Long.parseLong(str.substring(str.indexOf(\" \")+1, str.length()));\\n \\n            System.out.println(gcd(a, b) + \" \" + lcm(a,b));\\n \\n        }\\n    }\\n\t\\n\tprivate static long gcd(long a, long b){\\n\t\tif (b == 0) return a;\\n\t\treturn gcd(b, a % b);\\n\t}\\n\t\\n\tprivate static long lcm(long a, long b) {\\n\t\treturn a * b / gcd(a, b);\\n\t}\\n\\n}", "target": "181", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint a = scan.nextInt();\\n\t\tint b = scan.nextInt();\\n\t\tint c = scan.nextInt();\\n\t\tint d = Math.abs(a-b);\\n\t\tint e = Math.abs(b-c);\\n\t\tint f = Math.abs(c-a);\\n\t\tint g = d+e;\\n\t\tint h = e+f;\\n\t\tint i = f+d;\\n\t\tint min = Math.min(g, h);\\n\t\tmin = Math.min(min, i);\\n\t\tSystem.out.println(min);\\n\t}\\n}\\n", "target": "247", "substitutes": {"scan": ["range", "out", "m", "san", "check", "system", "sim", "can", "skip", "see", "char", "Scan", "nn", "ann", "run", "in", "r", "sb", "re", "sort", "scroll", "set", "row", "nav", "read", "sync", "se", "info", "ch", "sys", "proc", "sc", "reach", "ner", "report", "query", "sur", "gen", "send", "gate", "parse", "sql", "an", "gc", "sin", "get", "auto", "sv", "util", "n", " scanner", "conv", "cgi", "is", "stat", "find"], "a": ["act", "m", "la", "oa", "ap", "sa", "da", "am", "r", "z", "u", "at", "t", "A", "au", "ab", "art", "ca", "er", "ma", "ac", "p", "ao", "ea", "ba", "ta", "an", "ad", "w", "aa", "ia", "aj", "ar", "ai", "as", "x", "al", "l", "ae"], "b": ["B", "m", "eb", "ob", "br", "bi", "r", "be", "z", "u", "fb", "sb", "bs", "bc", "t", "ab", "ib", "cb", "gb", "bb", "ba", "db", "rb", "nb", "v", "n", "y", "l"], "c": ["m", "ct", "cc", "cr", "tc", "r", "z", "u", "ci", "cm", "bc", "cs", "cd", "t", "com", "cb", "ch", "ca", "ac", "p", "fc", "v", "ic", "co", "chain", "ce", "dc", "n", "cond", "o", "C", "l"], "d": ["m", "fd", "j", "da", "dm", "r", "z", "ed", "u", "di", "dd", "D", "t", "cd", "dt", "bd", "p", "dy", "db", "ad", "w", "v", "pd", "df", "dc", "de", "n", "ds", "dh", "l"], "e": ["eg", "E", "m", "eb", "ef", "xe", "eu", "ev", "r", "be", "u", "ed", "ec", "t", "el", "ie", "er", "p", "ei", "en", "ea", "v", "ee", "oe", "de", "ce", "et", "n", "o", "x", "l", "te", "ae", "ge"], "f": ["m", "fd", "ef", "j", "fi", "q", "bf", "r", "z", "u", "fb", "t", "fe", "cf", "er", "tf", "p", "fp", "w", "v", "fc", "df", "n", "sf", "fr", "o", "x", "fo", "l", "fa", "ff"], "g": ["m", "j", "gg", "q", "r", "z", "u", "G", "t", "gb", "gi", "bg", "ig", "ma", "p", "gs", "gc", "gm", "sg", "v", "ga", "fg", "gp", "gr", "n", "mg", "l", "gh", "gt", "ge"], "h": ["hs", "m", "j", "hi", "r", "z", "oh", "hm", "her", "ph", "t", "kh", "ah", "hh", "he", "p", "high", "sh", "H", "hr", "ih", "rh", "w", "v", "ha", "hl", "div", "o", "x", "l", "gh"], "i": ["ii", "m", "j", "ri", "it", "hi", "in", "r", "z", "u", "ci", "t", "di", "mi", "ie", "ib", "li", "p", "si", "pi", "v", "ia", "ini", "ic", "iu", "n", "y", "o", "is", "x", "im", "l"], "min": ["rain", "test", "in", "mins", "desc", "recomm", "mi", "log", "li", "module", "best", "scale", "v", "name", "mem", "mini", "partial", "just", "stat", "m", "lower", "sol", "doc", "mint", "temp", "MIN", "only", "suggest", "print", "local", "mine", "ms", "dist", "div", "n", "lt", "cmp", "minute", "sum", "mod", "minimum", "init", "none", "Min", "rel", "diff", "mn", "start", "pre", "ni", "le", "mit", "txt", "default", "val", "rest", "Mini", "size", "small", "man", "me", "j", "s", "str", "when", "mis", "mid", "sort", "lock", "emin", "first", "minus", "average", "mean", "max", "err", "amin"]}}
{"code": "import java.util.Scanner;\\n \\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String str = sc.nextLine();\\n    String[] strAry = str.split(\"\");\\n    \\n    int count = 0;\\n    if(strAry[0].equals(\"1\")) count++;\\n    if(strAry[1].equals(\"1\")) count++;\\n    if(strAry[2].equals(\"1\")) count++;    \\n    System.out.println(count);\\n    \\n    return;\\n  }\\n}", "target": "165", "substitutes": {"sc": ["out", "system", "cc", "cle", "tc", "cr", "ss", "cl", "bc", "cs", "desc", "ok", "ec", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "uc", "sys", "spec", "mc", "c", "nc", "sh", "SC", "gc", "inc", "st", "sv", "nl", "scan", "lc", "sp", "sel", "ser", "asc", "conv", "sec", "sch", "anc", "usc", "sq"], "str": ["out", "string", "s", "j", "STR", "br", "char", "f", "progress", "r", "z", "dr", "ctr", "arr", "Str", "t", "coll", "exp", "enc", "result", "vol", "print", "obj", "data", "txt", "iter", "g", "st", "res", "input", "sl", "gr", "text", "div", "n", "dat", "tr", "sp", "fr", "expr"], "strAry": ["procmArys", "strAn3", "strmAry", "strP3", "strPri", "strPrys", "arrArc", "strAroy", "strEoy", "strOry", "procmAry", "strA3", "strAnri", "arrAble", "strEble", "strArrys", "strEry", "strOrc", "strAnry", "strAnoy", "strAnrys", "procmAoy", "strAble", "strARY", "strEries", "strErys", "procmARY", "strPry", "strAnble", "strOries", "strAri", "arrA3", "strAoy", "procAry", "procArys", "strmAoy", "strArys", "procAoy", "strAries", "strOrys", "arrAries", "strArRY", "arrAry", "arrArys", "arrAri", "arrAoy", "strmArys", "strmARY", "strArry", "strErc", "strArc", "procARY"], "count": ["soft", "check", "ct", "flag", "ount", "test", "value", "must", "number", "ctr", "z", "cast", "hold", "t", "coll", "th", "force", "info", "result", "counter", "index", "list", "next", "report", "c", "amount", "print", "conf", "code", "status", "iter", "trace", "nb", "add", "total", "debug", "self", "num", "state", "const", "length", "n", "Count", "now", "cond", "default", "size", "stat", "sum", "not", "find", "found", "nt"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\npublic static void main(String[] args) {\\n\t\t\\n\t\tScanner keyboard = new Scanner(System.in); \\n\t\t\\n\t\tint X  = keyboard.nextInt();\\n\t\tint Y  = keyboard.nextInt();\\n\\n\t\tint turu = 2;\\n\t\tint kame = 4;\\n\t\t\\n\t\tString ans = \"No\";\\n\t\t\\n\t\tfor(int i=0; i<X+1; i++) {\\n\t\t\tif(i*turu + (X-i)*kame == Y) {\\n\t\t\t\tans = \"Yes\";\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\t\tkeyboard.close();\t\\n\t}\\n}\\n", "target": "62", "substitutes": {"keyboard": ["eystro", "mypad", " keyevent", "KeyBoard", "eyboards", "keyBoard", "ylock", "skyboard", "ybook", " keystroke", "readlock", "scancontroller", "yboard", " keyBoard", "keyevent", "skyBoard", "scanBoard", " keylock", "mystroke", " keypad", "keyword", "eyboard", "scanboard", "myBoard", " keyword", "keyboards", "scanstro", "keypad", "Keyboard", " keybook", "yword", "Keystroke", "keystro", "keystroke", "keybook", "skyevent", "eycontroller", "skyboards", "scanboards", " keycontroller", "keylock", "myboard", " keyboards", "readword", "keycontroller", "Keypad", "scanevent", "readbook", " keystro", "readboard"], "X": ["IX", "P", "XL", "F", "MAX", "MX", "WH", "S", "TX", "IP", "Width", "I", "D", "W", "L", "V", "XX", "H", "TH", "DX", "N", "XP", "T", "TY", "K", "J", "Q", "EX", "XY", "AX", "U", "M", "R", "FX", "UX", "Height", "Row", "x", "OX", "Z"], "Y": ["B", "E", "Top", "P", "YE", "OK", "Yes", " y", "YD", "S", "G", "I", "A", "Key", "SY", "MY", "Year", "V", "Value", "YY", "YS", "H", "N", "HY", "TY", "T", "K", "J", "AY", "YA", "YES", "XY", "M", "R", "y", "YC", "C", "Z"], "turu": ["Trika", "Tairo", " tuti", "Turu", "ttimi", "ituru", "tuti", " tushi", "trika", "Tushi", "ttrika", "ttuti", "Timi", " timi", "Tuti", "tairo", "ituti", " trika", "itairo", "timi", " tairo", "tturu", "itushi", "tushi"], "kame": ["Kamel", "Kame", " kime", "knamel", "kwamel", "kename", "kwime", "knename", " kami", "kami", "skime", "knami", "kwame", "kwama", "Kami", "Kename", "kname", "kama", " kama", "kime", " kamel", "skama", "skame", "skamel", "kamel", " kename"], "ans": ["uns", "posts", "unes", "rs", "vs", "san", "checks", "oss", "s", "rets", "rans", "ats", "aos", "utters", "ann", "ens", "aus", "os", "angs", "ums", "eds", "aps", "anks", "ks", "ends", "ins", "forms", "an", "ros", "leans", "ars", "ras", "orts", "as", "arms", "ns", "ents", "eps", "ants", "orders", "ons", "yes", "ds", "arts", "ts", "ANS", "helps", "ls", "amps", "olds", "ays", "ads"], "i": ["ii", "phi", "m", "gu", "xi", "j", "sim", "multi", "s", "ri", "init", "bi", "it", "hi", "q", "u", "ci", "t", "di", "I", "mi", "index", "mu", "li", "si", "ski", "pi", "iter", "ti", "v", "my", "cli", "ij", "zi", "ui", "ini", "ai", "\u0438", "ic", "iu", "n", "ind", "ix", "id", "ip", "y", "o", "uri", "x", "im", "batch", "qi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\t\\n\t\tint n = stdIn.nextInt();\\n\t\tint[] a = new int[n];\\n\t\tint i;\\n\t\t\\n\t\tfor (i = 0; i < n; i++)\\n\t\t\ta[i] =stdIn.nextInt();\\n\t\t\\n\t\tint count = BubbleSort(a, n);\\n\t\t\\n\t\tSystem.out.print(a[0]);\\n\t\tfor(i = 1; i < n; i++)\\n\t\t\tSystem.out.print(\" \" + a[i]);\\n\t\tSystem.out.println();\\n\t\tSystem.out.println(count);\\n\t}\\n\t\\n\tpublic static int BubbleSort(int[] a, int n) {\\n\t\tint flag = 1, count = 0, i, t;\\n\t\twhile (flag != 0) {\\n\t\t\tflag = 0;\\n\t\t\tfor (i = n - 1; i > 0; i--) {\\n\t\t\t\tif (a[i] < a[i-1]) {\\n\t\t\t\t\tt = a[i];\\n\t\t\t\t\ta[i] = a[i-1];\\n\t\t\t\t\ta[i-1] = t;\\n\t\t\t\t\tcount++;\\n\t\t\t\t\tflag = 1;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\treturn count;\\n\t}\\n}", "target": "170", "substitutes": {"stdIn": ["randOut", "sysin", "sysOut", "stOut", "STDIN", " stdInput", "stin", "STDOut", "STDIns", "stdin", "standardIN", "standardIn", "randIn", "sysIn", "stdOut", " stdIN", "stdIN", "standardIns", " stdin", "standardOut", "randIns", " stdIns", "stIn", " stdOut", "stdIns", "randInput", "standardInput", "stdInput", "STDIn"], "n": ["ng", "out", "m", "j", "nan", "nn", "net", "number", "q", "r", "z", "ln", "k", "ne", "mn", "on", "nm", "en", "p", "np", "c", "nc", "len", "N", "an", "and", "nb", "g", "d", "no", "v", "nu", "w", "total", "name", "all", " N", "num", "ns", "un", "nl", "sn", "na", "o", "x", "size", "cn", "l", "nt"], "a": ["h", "la", "changes", "eas", "era", "A", "history", "att", "ab", "qa", "xa", "w", "ack", "aa", "v", "ar", "all", "as", "m", "e", "f", "am", "parts", "at", "go", "ao", "c", "ea", "an", "ga", "aux", "y", "l", "aaa", "sta", "sa", "aw", "ed", "area", "acs", "index", "ba", "array", "add", "ace", "alpha", "na", "o", "ae", "act", "b", "apa", "oa", "s", "ap", "da", "z", "arr", "u", "wa", "set", "au", "ca", "ma", "app", "ac", "p", "aka", "g", "ia", "auto", "ata", "va", "fa"], "i": ["ji", "hi", "q", "in", "dr", "ci", "mi", "list", "li", "port", "v", "my", "ij", "ui", "ini", "ai", "us", "ix", "m", "multi", "e", "bi", "f", "at", "ei", "c", "status", "pi", "cli", "zi", "chain", " I", "id", "y", "uri", "im", "l", "ami", "ki", "ii", "fi", "ri", "init", "di", "exp", "info", "gi", "index", "si", "ti", "io", "iri", "\u0438", "ind", "to", "ip", "o", "PI", "ori", "ir", "qi", "phi", "b", "gu", "xi", "me", "j", "sim", "s", "it", "ims", "I", "this", "ie", "client", "p", "point", "ex", "iter", "g", "ic", "iu", "is", "x", "oi", "batch"], "count": ["current", "check", "html", "ct", "ount", "e", "cache", "cmd", "number", "z", "find", "cont", "coll", "th", "result", "counter", "index", "list", "entry", "report", "p", "c", "amount", "print", "status", "conf", "code", "N", "score", "and", "nb", "d", "v", "total", "all", "flags", "process", "num", "const", "length", "Count", "common", "ind", "cond", "child", "call", "size", "sum", "batch", "found", "nt"], "flag": ["fl", "store", "bit", "fd", "mask", "card", "char", " Flag", "command", "cmd", "lag", "ground", "event", "wait", "continue", "ld", "lock", "sync", "force", "sign", "group", "line", "log", "level", "back", "list", "match", "status", "option", "flags", "shift", "weight", "bug", "const", "lv", "state", "alt", "cond", "id", "Flag", "condition", "field", "stage", "valid", "sum", "FLAG", "button", "tag", "tail"], "t": ["out", "m", "j", "s", "tmp", "it", "test", "f", "tc", "q", "mint", "u", "temp", "time", "at", "tz", "dt", "pt", "tip", "tp", "p", "title", "c", "ot", "ta", "tap", "trace", "txt", "port", "st", "v", "d", "T", "type", "tm", "text", "tree", "tr", "y", "ts", "o", "vt", "tt", "l", "te", "tf"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n\tScanner sc = new Scanner(System.in);\\n\\n\tint week = sc.nextInt();\\n\\n\tdouble money = 100000;\\n\tfor(int i=0; i<week; i++){\\n\t    money = money + money*0.05;\\n\t    if(money%1000!=0){\\n\t\tmoney = money + (1000 - (money%1000));\\n\t    }\\n\t}\\n\\n\tSystem.out.println((int)money);\\n    }\\n}", "target": "173", "substitutes": {"sc": ["system", "cc", "cle", "Scan", "tc", "ss", "cr", "cl", "sb", "bc", "cs", "sm", "desc", "row", "esc", "sync", "Sc", "se", "ch", "pc", "isc", "osc", "soc", "uc", "sys", "mc", "scl", "c", "nc", "SC", "gc", "sv", "screen", "scrib", "scan", "lc", "sp", "sel", "ser", "asc", "sch", "sec", "usc", "sq"], "week": ["month", "year", "course", "weekly", "channel", "season", "league", "EEK", "game", "unit", "time", "window", "hour", "row", "frame", "height", "wall", "night", "date", "ward", "Week", "w", "ww", "world", "block", "worker", "weight", "day", "word", "minute", "work", "field", "task", "episode", "how", "win", "we"], "money": ["message", "bill", "fee", "cash", "tax", "mon", "euro", "lower", "gross", "value", "command", "payment", "number", "coin", "hello", "change", "USD", "time", "transfer", "imei", "mega", " Money", "human", "blue", "balance", "everything", "price", "cho", "dollar", "paid", "loss", "soc", "zero", "example", "fine", "million", "margin", "amount", "currency", "entity", "uno", "normal", "volume", "total", "micro", "movie", "rice", "vote", "power", "weight", "income", "percent", "integer", "angle", "mini", "base", "easy", "whatever", "budget", "translation", "ONEY", "machine", "one", "size", "sum", "buy", "Money"], "i": ["ii", "phi", "m", "gu", "me", "j", "sim", "multi", "init", "it", "sequence", "bi", "hi", "q", "in", "u", "span", "ci", "t", "di", "I", "mi", "ie", "gi", "index", "li", "si", "pi", "ex", "iter", "ti", "v", "io", "my", "ui", "ms", "ini", "ic", "uu", "us", "ai", "iu", "n", "ix", "ind", "id", "y", "o", "is", "x", "im", "batch", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner std = new Scanner(System.in);\\n\t\tint n = Integer.parseInt(std.next());\\n\\n\t\tint array[];\\n\t\tarray = new int[53];\\n\t\tfor(int i=1; i<=52; i++){\\n\t\t\tarray[i] = i;\\n\t\t}\\n\\n\t\tfor(int j=1; j<=n; j++){\\n\t\t\tString suit = std.next();\\n\t\t\tint rank = Integer.parseInt(std.next());\\n\t\t\tif(suit.equals(\"S\")) {rank+=0;}\\n\t\t\telse if(suit.equals(\"H\")) {rank+=13;}\\n\t\t\telse if(suit.equals(\"C\")) {rank+=26;}\\n\t\t\telse if(suit.equals(\"D\")) {rank+=39;}\\n\\n\t\t\tarray[rank] = 0;\\n\t\t}\\n\\n\t\tfor(int i=1; i<=52; i++){\\n\t\t\tif(array[i]!=0){\\n\t\t\t\tString ret = \"\";\\n\t\t\t\tif((i-1)/13==0){ret+=\"S \";}\\n\t\t\t\telse if((i-1)/13==1){ret+=\"H \";}\\n\t\t\t\telse if((i-1)/13==2){ret+=\"C \";}\\n\t\t\t\telse if((i-1)/13==3){ret+=\"D \";}\\n\t\t\t\tif(i%13!=0){ret += i%13;}else{ret+=\"13\";}\\n\t\t\t\tSystem.out.println(ret);\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "189", "substitutes": {"std": ["ng", "fd", "gram", "rx", "inter", "console", "live", "cr", "ss", "cmd", "sb", "z", "STD", "nd", "ast", "cd", "dd", "ctl", "news", "rand", "md", "sys", "hess", "usr", "est", "hz", "sh", " STD", "erd", "Standard", "obj", "ad", "txt", "ssl", "ctx", "st", "d", "var", "sw", "St", "sv", "pd", "td", "STDOUT", "standard", "util", "nl", "wd", "sts", "def", "sd", "python", "rend", "through"], "n": ["ng", "m", "s", "e", "nn", "net", "r", "z", "ln", "t", "nr", "k", "ne", "network", "on", "ni", "conn", "nm", "en", "p", "np", "c", "N", "an", "nb", "d", "nu", "a", "name", "names", "ns", "num", "nl", "sn", "na", "size", "cn", "l", "nt"], "array": ["range", "rays", "string", "address", "test", "number", "aw", "answer", " Array", "arr", "file", "pair", "window", "order", "row", "section", "au", "equality", "area", "function", "instance", "result", "share", "index", "list", "amount", "var", "count", "data", "ack", "shape", "v", "a", "ar", "memory", "all", "type", "archive", "length", "Array", "angular", "angle", "audio", "vector", "map", "now", "table", "ray", "collection", "max", "size", "attribute", "database", "hash", "air"], "i": ["ji", "hi", "in", "iti", "ci", "iso", "history", "mi", "Index", "php", "ati", "li", "iq", "ij", "ui", "ini", "ai", "ix", "multi", "bi", "f", "iy", "ei", "print", "status", "pi", "cli", "zi", "chain", "id", "y", "im", "l", "ami", "ki", "ii", "ri", "init", "yi", "di", "info", "gi", "index", "si", "ti", "io", "\u0438", "pai", "ind", "ip", "o", "ori", "ir", "qi", "phi", "xi", "me", "sim", "s", "it", "ims", "iii", "t", "I", "this", "ie", "series", "client", "p", "inner", "iter", "g", "ic", "uci", "iu", "is", "x", "oi", "err"], "j": ["oj", "b", "m", "ja", "br", "bo", "ji", "jj", "jc", "q", "z", "uj", "bj", "at", "el", "k", "jump", "jit", "ie", "json", "pr", "kj", "jl", "obj", "jo", "g", "other", "aj", "jp", "ij", "J", "dj", "jas", " dj", "sp", "fr", "js", "y", "job", "ge"], "suit": ["sam", "cap", "san", "rake", "site", "string", "pe", "bench", "char", "test", "square", "cas", "won", "suits", "unit", "face", "stuff", "docker", "rock", "remember", "race", "series", "ie", "pose", "nam", "tile", "sed", "sing", "white", "ord", "acc", "su", "form", "shield", "draw", "shape", "resist", "seat", "ipper", "vey", "wake", "sit", "rice", "shirt", "zip", "pack", "don", "war", "piece", "claim", "ship", "jack", "circ", "work", "nexus", "rave", "stick", "fruit", "build", "sample", "opp"], "rank": ["rate", "um", "clean", "grade", "mix", "sim", "pop", "link", "square", "park", "cache", "r", "reci", "span", "ank", "order", "row", "good", "race", "height", "hang", "perm", "Rank", "kick", "depth", "index", "reg", "level", "p", "brand", "ranking", "deck", "score", "count", "cum", "draw", "shape", "role", "scale", "bot", "root", "radius", "coord", "vote", "weight", "chain", "dist", "average", "moderate", "type", "ang", "mark", "mean", "work", "ANK", "ranked", "stick", "nr", "sup", "tag"], "ret": ["ert", "rot", "mat", "out", "term", "rets", "grain", "flag", "addr", "test", "it", "str", "url", "cmd", "ft", "uf", "r", "arr", "re", "temp", "desc", "t", "cont", "rel", "detail", "complete", "att", "dt", "exp", "ext", "art", "good", "pretty", "rev", "pert", "repl", "result", "urt", "report", "ref", "print", "nz", "obj", "iter", "RET", "txt", "res", "summary", "mem", "mt", "jp", "det", "vet", "arm", "xt", "alt", "Ret", "tree", "tr", "val", "def", "elt", "rest", "expr", "del", "err", "rem", "rt", "gt", "nt"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\n/* Name of the class has to be \"Main\" only if the class is public. */\\nclass Main\\n{\\n\tpublic static void main (String[] args) throws java.lang.Exception\\n\t{\\n\t\t// your code goes here\\n\t\ttry {\\n\t\t    Scanner sc=new Scanner(System.in);\\n\t\t    String s=sc.next();\\n\t\t    if(s.equals(\"ARC\"))\\n\t\t    System.out.println(\"ABC\");\\n\t\t    else\\n\t\t    System.out.println(\"ARC\");\\n\t\t} catch(Exception e) {\\n\t\t}\\n\t}\\n}\\n", "target": "153", "substitutes": {}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n    \t\\n    \tif (A < 10) {\\n\t        System.out.println(A);\\n    \t\treturn ;\\n    \t}\\n    \tif (A < 100) {\\n\t        System.out.println(9);\\n    \t\treturn ;\\n    \t}\\n    \tif (A < 1000) {\\n\t        System.out.println(A-10*10+9+1);\\n    \t\treturn ;\\n    \t}\\n    \tif (A < 10000) {\\n\t        System.out.println(10*10*10-10*10+9);\\n    \t\treturn ;\\n    \t}\\n    \tif (A < 100000) {\\n\t        System.out.println(A-10*10*10*10+10*10*10-10*10+9+1);\\n    \t\treturn ;\\n    \t}\\n\t    System.out.println(10*10*10*10*10-10*10*10*10+10*10*10-10*10+9);\\n    }\\n}", "target": "135", "substitutes": {"sc": [" Sc", "out", "system", "sa", "cle", "Scan", "tc", "cr", "ss", "capt", "r", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ch", "pc", "osc", "isc", "uc", "sys", "mc", " scr", "c", "nc", "scl", "sub", "sh", "SC", "sw", "gc", "sv", "screen", "nl", "scan", "lc", "sp", "sel", "asc", "sch", "sec", "usc", "sq"], "A": ["AT", "AC", "B", "E", "P", "GA", "LA", "ID", "EA", "AA", "UA", "AS", "CA", "As", "S", "BA", "G", "AN", "AI", "mA", "D", "AB", "I", "AST", "API", "L", "ALL", "SA", "PA", "V", "ASC", "AL", "ACC", "H", "AE", "ACT", "N", "AF", "An", "AU", "AV", "a", "NA", "HA", "T", "TA", "AY", "IA", "Alpha", " LA", "Array", "JA", "AR", "M", "R", "U", "C", "Z", "X", "AP"]}}
{"code": "import java.math.BigDecimal;\\nimport java.math.RoundingMode;\\nimport java.text.DecimalFormat;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n        int N = Integer.parseInt(sc.next());\\n        sc.close();\\n\\n        int odd = 0;\\n\\n        for (int i = 1; i <= N; i++) {\\n\\n            if(!(i % 2 == 0)) {\\n\\n                odd++;\\n            }\\n        }\\n\\n        double ans = (double)odd/(double)N;\\n\\n        BigDecimal ansBig = new BigDecimal(ans);\\n        ansBig.setScale(6, RoundingMode.HALF_UP);\\n\\n        System.out.print(decimalToString10(ansBig));\\n\\n    }\\n\\n    public static String decimalToString10(BigDecimal big) {\\n\\n        DecimalFormat format = new DecimalFormat(\"#.#\");\\n\\n        // \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6700\u5c0f\u5024\\n        format.setMinimumFractionDigits(10);\\n        // \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6700\u5927\u5024\\n        format.setMaximumFractionDigits(10);\\n\\n        return format.format(big);\\n    }\\n\\n}", "target": "64", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "ec", "reader", "esc", "sync", "Sc", "ch", "pc", "isc", "osc", "soc", "sys", "ck", "mc", "scl", "c", "nc", "sub", "sh", "SC", "gc", "arc", "sv", "dc", "scan", "lc", "RC", "sp", "ser", "asc", "sch", "sec", "anc", "syn", "sq"], "N": ["B", "NH", "P", "NN", "Ns", "NI", "Num", "S", "NR", "Number", "SN", "NL", "AN", "NS", "I", "D", "GN", "NO", "A", "NP", "NC", "NB", "L", "ND", "V", "TN", "Size", "NG", "NM", "H", "CN", "Net", "NT", "NA", "T", "K", "J", "Sn", "Q", "n", "No", "M", "R", "C", "Z", "PN"], "odd": ["done", "ded", "unk", "important", "dds", " odds", "error", "number", "needed", "nd", "added", "mod", " Odd", "dd", "good", "dev", "diff", "rand", "od", "even", "unknown", "defined", "ord", "failed", "random", "ot", "draw", "based", "other", "d", "created", "add", "total", "no", "auto", "normal", "td", "det", "last", "onent", "integer", "div", "OD", "colored", "own", "oid", "not", "DD", "rolled", "found", "opp"], "i": ["ii", "phi", "m", "xi", "j", "multi", "sim", "s", "it", "bi", "ji", "hi", "in", "ci", "di", "I", "k", "mi", "ie", "gi", "index", "li", "p", "ei", "si", "pi", " ii", "ti", "v", "ui", "ms", "ini", "ai", "ic", "chain", "iu", "n", " I", "ind", "ix", "id", "ip", "y", "o", "is", "x", "im", "oi", "l", "qi", "ki"], "ans": ["uns", "posts", "sam", "rs", "dds", "asts", "aos", "ats", "tan", "aned", "pan", "ann", "ians", "ran", " means", "ens", "ands", "aus", "AN", "os", "anes", "eds", "aps", "anks", "ords", "ks", "gn", "an", "ys", "leans", "ras", "ms", "ents", "as", "ns", "ants", "ids", "ANN", "ons", "yes", "ds", "arts", "ls", "ANS", "amps", "olds", "asks", "ads"], "ansBig": ["ansYes", "arsBig", "angsLog", "anBeg", "ksbig", " ansBeg", " ansLog", "ansJust", "ranMuch", "ansLarge", "ansBeg", "ansLog", "angsbig", "ansMuch", "ksLarge", " ansbig", "ranbig", "arsbig", "anMuch", "ksJust", "ranBeg", "anBig", " ansYes", "anLog", "anYes", " ansJust", " ansLarge", " ansMuch", "ksBig", "arsJust", "angsBig", "ranBig", "arsLarge", "ansbig", "anbig", "angsYes"], "big": ["ng", "sam", " major", " bigger", "number", "dec", " man", "Numbers", "Dig", "huge", " den", "data", " huge", " bad", " BIG", "Big", "num", "or", " small", " ver"], "format": ["term", " Format", "color", "ats", "str", "f", "printf", "fn", "file", " formatting", "unit", "function", "result", "p", "print", "form", "data", "style", "atter", "output", "mt", "config", "util", "Format", "pattern", "table", "conv"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner( System.in );\\n\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        for( int i = 0 ; i < n ; i++ ){\\n            a[i] = sc.nextInt();\\n        }\\n        sc.close();\\n        Sort s = new Sort( n, a );\\n        s.bubblesort();\\n        s.printA();\\n        System.out.println( s.count );\\n    }\\n}\\n\\nclass Sort {\\n    public int N;\\n    public int[] A;\\n    public int count;\\n\\n    Sort( int N, int[] A ){\\n        this.N = N;\\n        this.A = A;\\n        this.count = 0;\\n    }\\n\\n    public void bubblesort(){\\n        int tmp = 0;\\n        boolean flag = true;\\n        while( flag ){\\n            flag = false;\\n            for( int j = this.N-1; j > 0 ; j-- ){\\n                if( this.A[j] < this.A[j - 1] ){\\n                    tmp = this.A[j];\\n                    this.A[j] = this.A[j - 1];\\n                    this.A[j -1] = tmp;\\n                    flag = true;\\n                    this.count++;\\n                }\\n            }\\n        }\\n    }\\n\\n    public void printA(){\\n        for( int i = 0; i < this.N; i++ ){\\n            System.out.print( this.A[i] );\\n            if( i != this.N - 1 ){\\n                System.out.print(  \" \" );\\n            }\\n        }\\n        System.out.println(\"\");\\n    }\\n}\\n", "target": "170", "substitutes": {"sc": [" Sc", "system", "cc", "cle", "tc", "ss", "cr", "rc", "ko", "cam", "cl", "pb", "sb", "bc", "cs", "ec", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "uc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "sub", "SC", "gc", "sw", "fc", "arc", "st", "sv", "nl", "lc", "scan", "sp", "sel", "ser", "asc", "conv", "anc", "sec", "usc", "syn", "sq"], "n": ["ng", "m", "nan", "nn", "number", "net", "z", "ln", "u", "t", "ne", "mn", "on", "nm", "en", "p", "nc", "np", "c", "len", "nb", "w", "d", "no", "v", "nu", "num", "ns", "nl", "sn", "na", "o", "size", "x", "l", "nt"], "a": ["aaa", "aff", "b", "oa", "ap", "sa", "am", "wa", "at", "au", "area", "att", "ab", "ca", "ma", "ac", "p", "ba", "c", "ao", "ea", "ta", "an", "array", "aa", "ia", "ar", "ata", "as", "ai", "aux", "alpha", "pa", "na", "o", "ae", "fa"], "i": ["ii", "phi", "m", "me", "xi", "multi", "sim", "ri", "init", "e", "it", "ji", "bi", "hi", "q", "in", "u", "ci", "iso", "set", "di", "I", "mi", "wi", "ie", "info", "gi", "index", "client", "li", "ei", "si", "point", "pi", "ex", "iter", "ti", "iq", "g", "v", "io", "my", "cli", "zi", "ui", "ij", "ini", "ic", "ai", "us", "iu", " I", "ix", "ind", "id", "ip", "y", "is", "PI", "uri", "im", "oi", "ori", "err", "ami", "qi", "ki"], "s": ["rs", "vs", "b", "m", "its", "ats", "sa", "str", "fs", "ss", "S", "sb", "r", "bs", "sort", "cs", "sm", "t", "set", "se", "so", "qs", "sets", "sys", "gs", "p", "c", "ins", "sw", "ys", "res", "st", "less", "ars", "sv", "ms", "sl", "ns", "ess", "sts", "sp", "ds", "ps", "stats", "js", "conv", "ls", "ts", "is", "ses", "es", "l", "sq"], "N": ["B", "NH", "E", "P", "F", "NN", "Ns", "DN", "Num", "S", "NR", "SN", "G", "AN", "NS", "I", "GN", " C", "D", "NO", "NP", "NC", "NB", "L", "ND", "V", "TN", "Size", "Name", "NM", "MN", "NG", "CN", "H", "NT", "NA", "T", "K", "J", "FN", "Count", "No", "M", "R", "C", "Z", "X"], "A": ["AT", "B", "AC", "What", "E", "P", "GA", "F", "LA", "At", "AA", "UA", "AS", "CA", "S", "As", "BA", "G", "ABC", "MAP", "AN", "AB", "O", "API", "By", "ALL", "SA", "AL", "V", "MA", "PA", "This", "And", "RAM", "Answer", "App", "All", "ACC", "H", "They", "AE", "ACT", "AF", "Main", "An", "AM", "AU", "AV", "Av", "Order", "NA", "HA", "One", "T", "ACE", "Ar", "IA", "Alpha", "Array", "AAA", "Args", "JA", "AR", "M", "ATA", "The", "C", "EA", "AP"], "count": ["rows", "offset", "current", "b", "ct", "e", "sequence", "f", "cache", "nn", "error", "number", "q", "value", "ctr", "z", "scroll", "t", "close", "history", "limit", "depth", "counter", "index", "loop", "list", "report", "next", "len", "p", "c", "acc", "code", "status", "cycle", "score", "trace", "nb", "v", "name", "total", "add", "num", "state", "last", "length", "Count", "id", "child", "collection", "key", "size", "stat", "sum", "x", "l", "found", "nt"], "tmp": ["prev", "Temp", "mk", "qq", "nt", "amp", "porary", "cp", "test", "needed", "fake", "temp", "t", "py", "perm", "prime", "attr", "MP", "repl", "zero", "cur", "pkg", "prop", "p", "acc", "np", "mp", "obj", "txt", "nb", "ctx", "buff", "v", "jp", "orig", "td", "yy", "timeout", "sp", "pot", "ind", "cmp", "partial", "tt", "ret", "nom", " junk", "sup", "clip", "comp"], "flag": ["store", "bit", "cloud", "msg", "true", "char", "test", "command", "f", "cmd", "lag", "fire", "train", "bool", "event", "wait", "hold", "continue", "only", "set", "ld", "lock", "sync", "good", "button", "line", "log", "level", "list", "failed", "enable", "len", "print", "status", "compl", "debug", "flags", "lv", "bug", "state", "nl", "sp", "ind", "cond", "fail", "Flag", "valid", "stage", "ret", "prop", "tag"], "j": ["jet", "oj", "b", "h", "m", "out", "adj", "ja", "br", "it", "ji", "jj", "jc", "str", "f", "q", "z", "by", "uj", "bj", "bs", "k", "jump", "dt", "jit", "exp", "json", "je", "pt", "rev", "pr", "kj", "note", "jl", "obj", "jo", "g", "other", "v", "aj", "ij", "jp", "block", "J", "dj", "err", "ind", "fr", "js", "y", "o", "key", "x", "l", "job"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n\\n        Scanner sc = new Scanner(System.in);\\n\t\t\\n      \tString s = sc.next();\\n      \tString t = sc.next();\\n\\n      int hit = 0;\\n      for(int i = 0; i < s.length(); i++){\\n         \tchar c1 = s.charAt(i); \\n      \t\t  char c2 = t.charAt(i); \\n          \tif(c1 == c2){\\n  \t\t\t\thit++;            \\n            }\\n        }\\n      \\n      \tSystem.out.println(hit);\\n    }\\n}\\n", "target": "243", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "rc", "ko", "cl", "cv", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "exp", "isc", "pc", "osc", "ch", "sys", "mc", "scl", "c", "nc", "sci", "SC", "gc", "inc", "fc", "cons", "ctx", "src", "sv", "lc", "scan", "sp", "sel", "asc", "ctrl", "sch", "anc", "sec", "usc", "sq"], "s": ["hs", "rs", "b", "its", "ats", "xs", "str", "ss", "in", "S", "gets", "sb", "bs", "cs", "os", "so", "qs", "sys", "gs", "p", "c", "ins", "sql", "ys", "g", "st", "strings", "sv", "ms", "as", "ns", "sts", "sp", "ps", "als", "js", "ts", "ls", "ses", "is", "sq"], "t": ["ty", "term", "ct", "gt", "it", "test", "tc", "unt", "temp", "at", "wt", "pt", "title", "c", "ot", "template", "ta", "txt", "st", "total", "T", "mt", "or", "type", "tm", "tree", "tr", "ts", "tt", "not", "te", "rt", "tf", "tk", "nt"], "hit": ["hop", "bit", "out", "check", "h", "sol", "sim", "see", "it", "feat", "cache", "success", "unit", "stroke", "hard", "focus", "set", "split", "slot", "Miss", "hang", "result", "index", "miss", "hub", "help", "match", "status", "score", "count", "hole", "write", "iter", "shot", "total", "attack", "sit", "ha", "lap", "hot", "hl", "bug", "fit", "bad", "num", "update", "Hit", "word", "fail", "call", "key", "stat", "size", "sum"], "i": ["ii", "phi", "m", "gu", "xi", "me", "j", "multi", "sim", "ri", "init", "bi", "ji", "hi", "q", "ims", "in", "u", "ci", "di", "I", "mi", "record", "exp", "ie", "info", "json", "gi", "slice", "mu", "li", "p", "ei", "si", "point", "pi", "ti", "a", "io", "cli", "ij", "my", "ui", "ini", "ai", "ic", "us", "\u0438", "iu", "n", "ix", "ind", "id", "to", "ip", "y", "uri", "is", "x", "im", "ori", "oi", "qi", "ki"], "c1": ["c9", "ac2", "ac1", "c01", "ct9", "sc9", "acOne", "ct0", "ct51", " c0", "arc2", " c9", "cOne", "c51", "arcOne", "arc1", "sc1", " cOne", " c01", "sc51", " c51", "c0", "ac01", "ct1", "sc0", "arc01"], "c2": ["charond", "pc2", "cstwo", "ctwo", "tond", "csond", "pctwo", "char2", " cTwo", "t2", "ttwo", "cob", "csob", "chartwo", " ctwo", "pcTwo", "ec02", "tob", "charob", "cond", "pc02", "cTwo", "cs2", "ectwo", " c02", "ec2", "c02", "ecTwo"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nimport java.math.*;\\n\\npublic class Main {\\n\tScanner sc = new Scanner(System.in);\\n\tvoid run(){\\n\t\tString str = sc.next();\\n\t\tString ret = \"\";\\n\t\twhile(!str.isEmpty()){\\n\t\t\tret += str.charAt((str.length()-1));\\n\t\t\tstr = str.substring(0,str.length()-1);\\n\t\t}\\n\t\tSystem.out.println(ret);\\n\t\t\\n\t}\\n\tpublic static void main(String[] args){\\n\t\tMain m = new Main();\\n\t\tm.run();\\n\t\t\\n\t}\\n}", "target": "237", "substitutes": {"sc": [" Sc", "rs", "cc", "cle", "tc", "cr", "ss", "cl", "bc", "cs", "sm", "sac", "desc", "esc", "ec", "sync", "Sc", "dec", "ch", "osc", "pc", "isc", "uc", "sys", "mc", "scl", "nc", "c", "SC", "gc", "sv", "lc", "scan", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "sq"], "str": ["msg", "string", "s", "rec", "STR", "br", "char", "rep", "url", "seq", "it", "ocr", "dr", "z", "r", "ctr", "arr", "Str", "inst", "desc", "t", "row", "empty", "coll", "rel", "pos", "exp", "enc", "result", "cur", "pr", "sys", "usr", "list", "vol", "print", "inner", "stri", "obj", "data", "txt", "iter", "res", "st", "input", "raw", "all", "sl", "ns", "gr", "text", "div", "sts", "tr", "sp", "fr", "hex", "ent", "del", "stable", "comp", "nt"], "ret": ["out", "rets", "grain", "tmp", "cat", "printf", "net", "uf", "r", "resp", "arr", "re", "temp", "continue", "desc", "complete", "att", "pretty", "result", "repl", "std", "sys", "usr", "prop", "back", "ref", "nz", "RET", "txt", "res", "summary", "mem", "mt", "jp", "det", "backed", "et", "alt", "Ret", "mary", "pret", "def", "elt", "reset", "rev", "rem", "rt", "gt", "nt"], "m": ["me", "j", "i", "vm", "dm", "r", "am", "cm", "hm", "sm", "t", "manager", "mate", "mi", "pm", "med", "md", "mu", "mc", "p", "bm", "mp", "gm", "g", "v", "mem", "mt", "ms", "rm", "arm", "tm", "wm", "M", "mm", "em", "man", "mr", "mod"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        abc160_c solver = new abc160_c();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class abc160_c {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int K = in.nextInt();\\n            int N = in.nextInt();\\n            long A[] = new long[N];\\n            long seg[] = new long[N];\\n            long max_far = 0;\\n            long max_far_seg = -1;\\n            for (int i = 0; i < N; i++) {\\n                A[i] = in.nextInt();\\n            }\\n            max_far = (K - A[N - 1]) + A[0];\\n            max_far_seg = 0;\\n            seg[0] = max_far;\\n            for (int i = 1; i < N; i++) {\\n                long far = A[i] - A[i - 1];\\n                seg[i] = far;\\n                if (max_far < far) {\\n                    max_far = far;\\n                    max_far_seg = i;\\n                }\\n            }\\n            long ttldist = 0;\\n            for (int i = 0; i < N; i++) {\\n                if (max_far_seg != i) {\\n                    ttldist += seg[i];\\n                }\\n            }\\n            out.println(ttldist);\\n        }\\n\\n    }\\n}\\n\\n", "target": "10", "substitutes": {"inputStream": ["inputSource", "outputWindow", "inputSocket", "dataStream", "instream", "dataSource", "outputSteam", "inputstream", "inputSteam", "outputSocket", "sourceSteam", "sourceStream", "helloWindow", "inStream", "dataSteam", "sourcestream", "helloSteam", "outputSource", "helloSource", "outputstream", "inputWindow", "inSocket", "helloStream", "dataWindow", "sourceSocket", "inSteam"], "outputStream": ["printStream", "printSteam", "displayStream", "outputWriter", "printWriter", "outputPath", " outputPath", "outStream", "displayView", " outputSteam", "outputSteam", "inputstream", "outSteam", "displaystream", "inputSteam", "outputView", "displaySteam", "inputView", "outPath", "outWriter", "outstream", "printPath", "outputstream", "outView", " outputWriter"], "in": ["h", "r", "rin", "on", "log", "mc", "inside", "inn", "bin", "ini", "process", "stream", "mm", "m", "sol", "can", "kin", "lin", "doc", "run", "file", "cm", "c", "local", "ad", "cin", "dir", "n", "din", "im", "l", "current", "inf", "isin", "init", "reader", "IN", "info", "from", "conf", "inc", "sql", "get", "io", "add", "input", "nin", "ind", "o", "source", "serv", "In", "con", "s", "it", "t", "gin", "null", "en", "p", "ins", "inner", "iter", "sin", "end", "raw", "ic", "scan", "is", "old", "err", "rt"], "out": ["check", "s", "can", "tmp", "aos", "obj", "it", " OUT", "e", "cmd", "net", "OUT", "by", "user", "temp", " Out", "window", "t", "set", "at", "pool", "ou", "outs", "os", "outer", "this", "ch", "up", "sys", "client", "Out", "log", "list", "report", "null", "p", "c", "print", "inner", "ex", "comment", "write", "txt", "w", "gc", "res", "v", "output", "io", "name", "no", "end", "server", "screen", "or", "co", "n", "table", "to", "flush", "o", "writer", "sum", "err", "OU", "nt"], "solver": ["soln", "ssoln", " newsolver", "resolve", " solution", "resorter", " newsolve", "resoln", "sorter", "resolution", "ssorter", "solution", " soler", "resolver", "ssolution", "soler", "ssolver", " solve", " newsolution", "solve", " newsoler", "resoler"], "testNumber": [" solutionNumbers", " attemptNo", "testName", " testNo", " solutionNo", " testNumbers", " testName", "testNo", " attemptName", " solutionName", " attemptNumbers", "testNumbers", " attemptNumber", " solutionNumber"], "K": ["B", "KA", "E", "Ka", "P", "F", "UK", "KE", "SK", "G", "KB", "I", "k", "Key", "L", "KY", "V", "KS", "H", "KN", "Y", "T", "J", "KING", "Q", "Mask", "M", "R", "KK", "C", "Z", "KR", "X", "PK"], "N": ["B", "NH", "Node", "P", "F", "UN", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "NL", "AN", "NS", "I", "D", "GN", "NO", "W", "NC", "NB", "L", "ND", "V", "TN", "NM", "NG", "H", "NT", "NA", "T", "J", "FN", "Q", "NE", "n", "No", "M", "R", "C", "O"], "A": ["AT", "AC", "B", "P", "GA", "LA", "At", "AA", "CA", "As", "S", "BA", "G", "AI", "mA", "AB", "D", "AST", "API", "L", "SA", "PA", "V", "MA", "App", "All", "ACC", "Al", "H", "AE", "ACT", "AF", "AM", "An", "AU", "AV", "a", "NA", "HA", "TA", "Area", "Ar", "ARC", "Array", "AR", "JA", "M", "R", "ATA", "C", "AP"], "seg": ["SEg", "SEgs", " segment", "psege", "pegm", "Sege", "segs", "Sem", "Seig", "pegment", "sep", " segm", " segs", "geig", " seig", "gege", "pege", "sege", "peg", "gem", "psep", "seig", "segm", "Seg", "pseg", " sep", " sege", "SEge", "sem", "psegment", "SEgment", "psegs", "segment", "pep", "geg", "pegs", " sem", "psegm"], "max_far": ["Max_Far", " max_near", "Max_fleet", " max_ff", "Max_thur", "max_fleet", "max_thur", "max_sofar", "max2near", "max_fab", "MAX_far", "MAX_Far", "ax_sofar", "max_ff", "max_near", "MAX_sofar", "Max_sofar", "max_full", "ax_far", "Max_far", "ax_fab", "max_Far", "max2far", " max_Far", "MAX_near", "max2Far", "ax_full", "max2sofar"], "max_far_seg": ["max_far_perseg", "max_far_asegs", "max_far_psege", "max_far_pegm", "max_far_megs", "max_far_segment", "max_far_geig", "max_far_SEgm", "max_far_gegs", "max_far_mebg", "max_far_seep", "max_far_segs", "max_far_meig", "max_far_asep", "max_far_persegm", "max_far_psegment", "max_far_pseig", "max_far_sege", "max_far_segn", "max_far_pegn", "max_far_psegs", "max_far_seem", "max_far_seegs", "max_far_segm", "max_far_asem", "max_far_psem", "max_far_aseg", "max_far_sebg", "max_far_psegm", "max_far_peg", "max_far_sep", "max_far_pegment", "max_far_SEge", "max_far_seeg", "max_far_seig", "max_far_geg", "max_far_sem", "max_far_SEg", "max_far_pseg", "max_far_psebg", "max_far_psegn", "max_far_SEgs", "max_far_psep", "max_far_meg", "max_far_persegn", "max_far_gebg", "max_far_persegment"], "i": ["h", "ji", "hi", "q", "dr", "ci", "mi", "php", "li", "v", "name", "my", "ij", "ui", "ini", "ai", "us", "ix", "m", "multi", "e", "bi", "f", "iy", "ei", "status", "pi", "cli", "zi", "chain", "n", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "ri", "fi", "init", "di", "k", "info", "gi", "index", "si", "ti", "io", "\u0438", "ind", "ip", "o", "source", "qi", "phi", "xi", "me", "j", "sim", "s", "it", "ims", "u", "ger", "t", "I", "this", "p", "point", "ic", "iu", "base", "is", "key", "x", "oi", "batch"], "far": ["rail", " FAR", "per", "Far", "car", "fall", "ful", "fi", "f", "better", "fare", "uf", "gl", "full", "fer", "fab", "afe", "rely", "fort", "thur", "ull", "free", "large", "aster", "sofar", "tar", "eth", "med", "alf", "fe", "safe", "fal", "high", "remote", "near", "ptr", "elf", "FER", " Far", "oulder", "deg", "above", "ffield", "tif", "fast", "tr", "fac", "fr", "fur", "rem", "global", "afer", "tf"], "ttldist": ["ttLDist", "ttdddist", "ttalddist", "ttaldist", "tmldift", "tmaldist", "settldists", "ttLDists", "ttleddist", "ttlfistance", "rtlddist", "ttddists", "ttlfIST", "ttlddist", "ttndistant", "ttddistance", "ttlfists", "ttledists", "settlfiff", "settlfist", "rtlfists", "ttledistance", "ttndift", "ttldists", "ttnddist", "settlfists", "ttaldistant", "rtldist", "tmaldift", "ttlfist", "ttlfiff", "tmldistant", "tmlddist", "settlfIST", "ttndist", "rtlfist", "ttledist", "ttLDiff", "settldIST", "tmldist", "ttddist", "rtlfdist", "rtlfistance", "ttddift", "tmalddist", "ttldistant", "ttlfdist", "ttlediff", "settldist", "settldiff", "ttLDIST", "rtldistance", "ttledIST", "ttldistance", "rtldists", "tmaldistant", "ttldIST", "ttldift", "ttaldift", "ttldiff", "ttddistant"]}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t//\t\tnew Main().solveA();\\n\t\tnew Main().solveB();\\n\t\t// new Main().solveC();\\n\t\t// new Main().solveD();\\n\t}\\n\\n\tprivate void solveA() {\\n\t\tScanner scanner = null;\\n\t\tint numA = 0;\\n\t\tint numB = 0;\\n\\n\t\ttry {\\n\t\t\tscanner = new Scanner(System.in);\\n\t\t\tnumA = scanner.nextInt();\\n\t\t\tnumB = scanner.nextInt();\\n\\n\t\t\tint res = numA - 1;\\n\t\t\tres += numB >= numA ? 1 : 0;\\n\\n\t\t\tSystem.out.println(res);\\n\\n\t\t} finally {\\n\t\t\tif (scanner != null) {\\n\t\t\t\tscanner.close();\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tprivate void solveB() {\\n\t\tScanner scanner = null;\\n\t\tint[] wk = new int[3];\\n\t\tint numK = 0;\\n\\n\t\ttry {\\n\t\t\tscanner = new Scanner(System.in);\\n\t\t\twk[0] = scanner.nextInt();\\n\t\t\twk[1] = scanner.nextInt();\\n\t\t\twk[2] = scanner.nextInt();\\n\t\t\tnumK = scanner.nextInt();\\n\\n\t\t\tArrays.sort(wk);\\n\\n\t\t\tint res = wk[wk.length - 1];\\n\t\t\tfor (int i = 0; i < numK; i++) {\\n\t\t\t\tres *= 2;\\n\t\t\t}\\n\t\t\twk[wk.length - 1] = res;\\n\t\t\tres = 0;\\n\t\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\t\tres += wk[i];\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(res);\\n\\n\t\t} finally {\\n\t\t\tif (scanner != null) {\\n\t\t\t\tscanner.close();\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tprivate void solveC() {\\n\t\tScanner scanner = null;\\n\t\tint numN = 0;\\n\t\tint numK = 0;\\n\t\tint numS = 0;\\n\\n\t\ttry {\\n\t\t\tscanner = new Scanner(System.in);\\n\t\t\tnumN = scanner.nextInt();\\n\\n\t\t\tSystem.out.println(\"\");\\n\\n\t\t} finally {\\n\t\t\tif (scanner != null) {\\n\t\t\t\tscanner.close();\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tprivate void solveD() {\\n\t\tScanner scanner = null;\\n\t\tint numN = 0;\\n\t\tint numK = 0;\\n\t\tint numS = 0;\\n\\n\t\ttry {\\n\t\t\tscanner = new Scanner(System.in);\\n\t\t\tnumN = scanner.nextInt();\\n\\n\t\t\tSystem.out.println(\"\");\\n\\n\t\t} finally {\\n\t\t\tif (scanner != null) {\\n\t\t\t\tscanner.close();\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "201", "substitutes": {}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\tpublic static void main(String args[]) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint p=sc.nextInt();\\n\t\tString c=sc.next();\\n\t\tchar a[]=c.toCharArray();\\n\t\tint b=0;\\n\t\tfor(int i=0;i<p/2;i++) {\\n\t\t\t\tif(a[i]!=a[i+p/2])\\n\t\t\t\t\tb++;\\n\t\t}\\n\t\tif(p%2==0){\\n\t\t\tif(b==0) {\\n\t\t\tSystem.out.print(\"Yes\");\t\\n\t\t\t}else {\\n\t\t\tSystem.out.print(\"No\");\\n\t\t\t}\\n\t\t}else\\n\t\t\tSystem.out.print(\"No\");\\n\t\t\t\\n\t}\\n}", "target": "161", "substitutes": {"sc": ["sim", "cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "nc", "sub", "sci", "sh", "SC", "gc", "sw", "inc", "sv", "nl", "lc", "scan", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "p": ["per", "m", "P", "pe", "j", "ap", "pid", "par", "pb", "q", "span", "t", "pers", "pos", "lp", "pl", "ping", "perm", "pc", "pt", "pr", "pre", "tp", "np", "op", "pi", "g", "bp", "v", "jp", "process", "power", "n", "pa", "sp", "ps", "pro", "post", "pp", "cp", "pg"], "c": ["m", "ct", "cc", "e", "cat", "f", "char", "tc", "cr", "r", "cs", "t", "k", "ca", "ch", "enc", "cf", "cu", "ac", "g", "d", "v", "fc", "abc", "co", "dc", "ce", "lc", "n", "conv", "o", "C", "cn", "l"], "a": ["aaa", "m", "sta", "apa", "la", "oa", "s", "ap", "isa", "sa", "e", "aw", "am", "t", "A", "au", "att", "ab", "ca", "ch", "ma", "ac", "ba", "ao", "xa", "ea", "ta", "le", "an", "array", "aa", "v", "ar", "ata", "ga", "as", "ai", "alpha", "n", "na", "va", "ach", "o", "ae", "fa"], "b": ["B", "m", "eb", "ob", "j", "br", "bi", "pb", "bool", "be", "sb", "z", "fb", "bs", "bc", "t", "blue", "ab", "ib", "gb", "cb", "bis", "bb", "back", "bd", "ba", "db", "rb", "nb", "d", "bot", "v", "bp", "mb", "bar", "base", "bound", "to", "l", "wb"], "i": ["ii", "phi", "m", "gu", "me", "j", "multi", "sim", "ri", "init", "bi", "it", "ji", "hi", "ci", "di", "I", "mi", "gi", "index", "li", "ei", "si", "pi", "iter", "ti", "v", "io", "cli", "ij", "zi", "ui", "ms", "ini", "ai", "ic", "us", "\u0438", "iu", "ix", "ind", "id", "to", "ip", "y", "o", "is", "x", "im", "ori", "qi", "ki"]}}
{"code": "\\nimport java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint data = scan.nextInt();\\n\t\tboolean b = true;\\n\t\tArrayList<Integer> a = new ArrayList<>();\\n\t\tfor(int i = 0; i<3; i ++){\\n\t\tint x=data%10;\\n\t\ta.add(x);\\n\t\tdata=data/10;\\n\t\tif(a.get(i)==7) {\\n\t\t\tb=true;\\n\t\t\tbreak;\\n\t\t}\\n\t\tb=false;\\n\t\t}\\n\t\tif(b==true) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "99", "substitutes": {"scan": ["store", "save", "out", "san", "check", "system", "can", "skip", "Scan", "run", "ann", "in", "r", "by", "walk", "re", "scroll", "set", "row", "read", "sync", "connect", "se", "info", " Scan", "ch", "seek", "sys", "proc", "sc", "reach", "ner", "report", "query", "sur", "send", "gate", "parse", "an", "sin", "g", "st", "get", "scale", "sv", "n", "na", "ser", "stat", "find"], "data": ["done", "bytes", "value", "da", "number", " DATA", "window", "time", "t", "rel", "dec", "area", "read", "pos", "ne", "height", "zero", "index", "date", "mu", "next", "len", "ta", "count", "res", "d", "no", "total", "debug", "name", "DATA", "ata", "raw", "step", "rew", "shift", "length", "div", "dat", "n", "base", "now", "na", "def", "to", "size", "action"], "a": ["aaa", "act", "sta", "apa", "la", "oa", "sa", "e", "abs", "am", "wa", "at", "el", "A", "au", "area", "ab", "ca", "index", "ma", "app", "ac", "p", "list", "ba", "ao", "c", "an", "ack", "aa", "add", "auto", "ata", "ga", "all", "as", "aux", "alpha", "na", "to", "o", "ae"], "i": ["ii", "phi", "m", "gu", "me", "xi", "j", "sim", "multi", "s", "ri", "init", "it", "bi", "f", "hi", "q", "in", "missing", "z", "u", "ci", "t", "di", "I", "k", "mi", "ie", "info", "gi", "index", "li", "p", "si", "c", "status", "pi", "ex", "ti", "g", "v", "ui", "ini", "ic", "ai", "us", "chain", "l", "iu", "n", "err", "ix", "ind", "id", "to", "ip", "y", "o", "is", "im", "batch", "qi"], "x": ["m", "xi", "rx", "xp", "xs", "dx", "ox", "z", " xx", "mx", "t", "xxx", "tx", "xy", "ax", "p", "c", "xa", "ex", "d", "v", "yx", "xxxx", "xf", "xx", "xt", "ix", "xc", "y", "px", "key", " cx", "X", "wx"], "b": ["B", "m", "eb", "ob", "j", "binary", "bo", "br", "bl", "true", "f", "bf", "bool", "r", "sb", "be", "u", "fb", "body", "bs", "bc", "t", "blue", "ab", "cb", "gb", "bis", "bg", "bb", "bd", "p", "db", "rb", "nb", "g", "d", "v", "boot", "n", "bh", "y", "o", "l", "wb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tdouble answer = 0;\\n\\n\t\tfor (int i = 1; i <= N; i++) {\\n\t\t\tint sum = i;\\n\t\t\tint count = 0;\\n\t\t\twhile (sum <= K - 1) {\\n\t\t\t\tsum *= 2;\\n\t\t\t\tcount++;\\n\t\t\t}\\n\\n\t\t\tanswer += (double)1/N * Math.pow((double)1/2, count);\\n\\n\t\t}\\n\\n\t\tSystem.out.println(answer);\\n\\n\t}\\n}\\n", "target": "20", "substitutes": {"sc": ["out", "system", "cc", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "reader", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ck", "ner", "mc", "scl", "c", "nc", "sh", "SC", "gc", "ctx", "src", "sv", "nl", "dc", "scan", "lc", "sp", "asc", "cgi", "sch", "anc", "sec", "usc", "sq"], "N": ["NH", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "AN", "NS", "I", "GN", "D", "CNN", "NO", "NC", "NB", "L", "ND", "V", "TN", "NM", "H", "NT", "KN", "NA", "T", "J", "Q", "NE", "n", "No", "U", "M", "R", "C"], "K": ["B", "KA", "P", "HK", "KI", "UK", "KE", "SK", "S", "G", "Sk", "KB", "FK", "k", "W", "L", "KY", "V", "KS", "H", "KN", "T", "J", "Q", "MS", "Mask", "M", "R", "KK", "KEY", "C", "Z", "KR", "PK"], "answer": ["ask", "message", "offer", "equ", "sole", "bet", "uration", "euro", "aq", "interpret", "value", "echo", "wer", "eni", "poll", "exit", "mate", "remember", "area", "imony", "energy", "qv", "result", "zero", "accept", "ve", "answered", "Answer", "query", "entry", "distance", "OVA", "score", "turn", "response", "option", "uno", "approximately", "onse", "vote", "search", "fit", "archive", "average", "reply", "second", "oval", "ell", " answered", "say", "question", " unanswered"], "i": ["ii", "phi", "m", "xi", "j", "sim", "multi", "ri", "init", "it", "bi", "in", "u", "ci", "di", "I", "k", "mi", "ie", "index", "li", "p", "ei", "si", "print", "c", "pi", "iter", "ti", "v", "ij", "zi", "ui", "ini", "ai", "ic", "us", "l", "ish", "integer", "iu", "n", "ind", "ix", "id", "ip", "y", "o", "is", "x", "im", "oi", "batch", "qi"], "sum": ["sam", "out", "um", "m", "me", "tu", "sim", "mix", "sa", "mass", "ass", "unit", "temp", "sm", "t", "set", "cos", "this", "cu", "sym", "index", "share", "acc", "si", "sh", "amount", "su", "pi", "cum", "summary", "sin", "draw", "scale", "mem", "total", "uu", "num", "us", "weight", "process", "average", "base", "div", "Sum", "mean", "max", "size", "fac", "hash"], "count": ["current", "check", "um", "ct", "ount", "test", "cache", "nn", "ctr", "z", "span", "continue", "pool", "cont", "k", "result", "counter", "index", "list", "report", "c", "amount", "match", "conf", "cycle", "code", "score", "comment", "draw", "nb", "v", "add", "follow", "all", "process", "num", "const", "length", "n", "Count", "now", "cond", "ind", "child", "call", "key", "size", "find", "found", "nt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner a = new Scanner(System.in);\\n        int s1 = a.nextInt();\\n        a.close();\\n        if (s1 - 111 == 0) {\\n            System.out.print(\"3\");\\n        }\\n        if (s1 - 110 == 0) {\\n            System.out.print(\"2\");\\n        }\\n        if (s1 - 101 == 0) {\\n            System.out.print(\"2\");\\n        }\\n        if (s1 - 100 == 0) {\\n            System.out.print(\"1\");\\n        }\\n        if (s1 - 11 == 0) {\\n            System.out.print(\"2\");\\n        }\\n        if (s1 - 10 == 0) {\\n            System.out.print(\"1\");\\n        }\\n        if (s1 - 1 == 0) {\\n            System.out.print(\"1\");\\n        }\\n        if (s1 - 0 == 0) {\\n            System.out.print(\"0\");\\n        }\\n    }\\n}\\n", "target": "165", "substitutes": {"a": ["aaa", "sam", "b", "apa", "s", "aos", "sa", "i", " an", "f", "ann", "aw", "am", "aaaa", "at", "A", "parent", "au", "area", "ab", "ca", "sys", "another", "er", "ma", "ac", "p", "ao", "c", "an", "w", "aa", "g", "aj", "ar", "auto", "ga", "as", "access", "aux", "na", "y", "ach", "ae"], "s1": ["res100", "bs100", "stats1", "ssarts", "tOne", " s2", "str1", " s001", "stringarts", "resaj", "sysasso", "s2", "bsOne", "s0", "south1", " setsasso", "sname", "gsOne", "ls001", "changes1", "t1", "ss001", " sasso", "s01", "tsOne", "sts001", "ss100", "res001", "s001", "string100", "changesname", "ats1", "southons", "str001", "sasso", "sons", " sets2", "serv001", "ss\t", "atsons", "southOne", "ts1", "southaj", "idsons", "south01", "sOne", "tsname", "ss1", "s\t", "stats100", "south\t", "as1", "ls0", "gs1", "s100", "statsOne", "ids1", "stsarts", "str\t", "sys001", "gsname", "idsaj", "sys1", "lsasso", "south0", "ss01", " setsOne", "saj", "changesOne", "changes3", "sts100", "str01", "sts1", "serv1", "ts2", "s3", "atsaj", " s0", "gs3", " sets1", " sOne", "ts3", "asaj", "ats001", "south001", "serv100", "res1", "t0", "ts100", "as001", "string1", "string001", "tsasso", "sys0", "bs1", "ids001", "servaj", "sarts", "t001", "ls1", "as100"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nclass Main{\\n\tstatic final long MOD = 1_000_000_007; // 10^9+7\\n    static final int MAX = 2_147_483_646; // intMax \\n    static final int INF = 1_000_000_000; // 10^9  \\n    public static void main(String[] args) throws Exception {\\n\t\thayami saori = new hayami();\\n\t\tint n = saori.saori_hayami();\\n\t\tString[] s = saori.nextHayami().split(\"\");\\n\t\tint ans = 0;\\n\t\tfor(int i = 0;i < s.length - 2;i++){\\n\t\t\tif(s[i].equals(\"A\") && s[i+1].equals(\"B\") && s[i+2].equals(\"C\")){\\n\t\t\t\tans++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t\tsaori.close();\\n    }\\n}\\n\\nclass hayami implements Closeable {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] hayami = new byte[1024];\\n\tprivate int Hayami = 0;\\n\tprivate int saori = 0;\\n\tprivate boolean HayamiSaori() {\\n\t\tif (Hayami < saori) {\\n\t\t\treturn true;\\n\t\t}else{\\n\t\t\tHayami = 0;\\n\t\t\ttry {\\n\t\t\t\tsaori = in.read(hayami);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (saori <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\tprivate int SaoriHayami() { \\n\t\tif (HayamiSaori()) {\\n            return hayami[Hayami++];\\n         }else{\\n             return -1;\\n         }\\n\t}\\n\tprivate static boolean hayami_saori(int hayami) { \\n\t\treturn 33 <= hayami && hayami <= 126;\\n\t}\\n\tpublic boolean hayamisaori() { \\n\t\twhile(HayamiSaori() && !hayami_saori(hayami[Hayami])) Hayami++; return HayamiSaori();\\n\t}\\n\tpublic String nextHayami() {\\n\t\tif (!hayamisaori()) throw new NoSuchElementException();\\n\t\tStringBuilder hayamin = new StringBuilder();\\n\t\tint saori = SaoriHayami();\\n\t\twhile(hayami_saori(saori)) {\\n\t\t\thayamin.appendCodePoint(saori);\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t\treturn hayamin.toString();\\n\t}\\n\tpublic long saorihayami() {//nextLong\\n\t\tif (!hayamisaori()) throw new NoSuchElementException();\\n\t\tlong hayami = 0;\\n\t\tboolean misao = false;\\n\t\tint saori = SaoriHayami();\\n\t\tif (saori == '-') {\\n\t\t\tmisao = true;\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t\tif (saori < '0' || '9' < saori) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile(true){\\n\t\t\tif ('0' <= saori && saori <= '9') {\\n\t\t\t\thayami *= 10;\\n\t\t\t\thayami += saori - '0';\\n\t\t\t}else if(saori == -1 || !hayami_saori(saori)){\\n\t\t\t\treturn misao ? -hayami : hayami;\\n\t\t\t}else{\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t}\\n\tpublic int saori_hayami() {//nextInt\\n\t\tlong hayami = saorihayami();\\n\t\tif (hayami < Integer.MIN_VALUE || hayami > Integer.MAX_VALUE) throw new NumberFormatException();\\n\t\treturn (int) hayami;\\n\t}\\n\tpublic double Hayamin() { //nextDouble\\n\t\treturn Double.parseDouble(nextHayami());\\n\t}\\n\tpublic void close() {\\n\t\ttry {\\n\t\t\tin.close();\\n\t\t} catch (IOException e) {\\n\t\t}\\n    }\\n    \\n}", "target": "110", "substitutes": {"MOD": [" F", " serial", " ro", " tmp", " stamp", " MAX", " LOG", " rev", " mod", " msec", " reg", " Z", "NUM", " TP", " M", " A", " base", " FIRST", " CRC", " BASE", " BIG", " mult", " MAG", " Y", " B", "UID", " mix", " P"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\\n\t\tint count = 0;\\n\t\tfor(int i=1; i<=N; i++) {\\n\t\t\tint judge = 0;\\n\t\t\tfor(int j=1; j<=i; j++) {\\n\t\t\t\tif(i % j == 0 && i % 2 == 1) {\\n\t\t\t\t\tjudge ++;\\n\t\t\t\t}\\n\t\t\t}if(judge == 8) {\\n\t\t\t\tcount ++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\\n\t}\\n\\n}\\n", "target": "85", "substitutes": {"sc": ["out", "system", "cc", "Scan", "cr", "ss", "rc", "cl", "sb", "bc", "cs", "ec", "ok", "set", "esc", "Sc", "se", "ch", "pc", "isc", "osc", "uc", "sys", "ner", "mc", "scl", "c", "nc", "SC", "gc", "src", "sv", "nl", "scan", "lc", "sp", "ser", "anc", "usc", "Sync", "syn", "sq"], "N": ["NH", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NL", "NS", "I", "D", "GN", "NO", "NP", "NC", "NB", "L", "V", "TN", "Size", "NM", "NG", "H", "NT", "NA", "T", "K", "J", "Sn", "Q", "n", "Count", "No", "M", "C", "Z"], "count": ["check", "flag", "ount", "test", "cache", "number", "z", "body", "cd", "coll", "result", "counter", "index", "list", "report", "consider", "next", "acc", "c", "amount", "match", "note", "print", "code", "score", "comment", "status", "nb", "summary", "total", "debug", "process", "num", "search", "state", "length", "n", "Count", "ind", "cond", "call", "size", "C", "sum", "find", "found", "nt"], "i": ["ii", "phi", "m", "xi", "multi", "s", "it", "bi", "init", "f", "ji", "hi", "in", "ci", "t", "di", "I", "k", "mi", "ie", "info", "index", "li", "p", "ei", "si", "pi", "sql", "iq", "iter", "ti", "v", "ij", "zi", "ui", "ini", "ai", "ic", "length", "iu", "n", " I", "ind", "ix", "id", "M", "to", "ip", "y", "IT", "is", "II", "x", "im", "ori", "l", "ami", "qi"], "judge": ["judGE", "junice", "calgate", "judgate", " judg", "Judg", "judice", "mungem", "munge", "juge", "calger", " judgeged", "jung", "juice", "munice", " judged", " judgee", "junge", "mung", "munger", "Judgee", "Judger", "Judgate", "junGE", "judgem", " judgeg", "calge", "judged", "juGE", "judg", " judgege", " judgegee", "jug", "judger", "judgee", "calgem", "Judged", "mungate", "munGE", "Judgem", "Judge"], "j": ["oj", "b", "m", "ja", "br", "bo", "ji", "jj", "jc", "it", "f", "q", "z", "uj", "bj", "bs", "t", "el", "di", "k", "rel", "ne", "json", "pr", "kj", "p", "two", "ot", "jl", "obj", "jo", "g", "bot", "v", "other", "aj", "d", "jp", "ij", "dj", "J", "jas", "l", "tr", " dj", "n", "fr", "ind", "js", "o", "im", "ion", "err", "job", "let"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc =new Scanner(System.in);\\n\t\tint A=sc.nextInt();\\n\t\tint B=sc.nextInt();\\n\t\tif((A*B)%2==0)System.out.println(\"Even\");\\n\t\telse System.out.println(\"Odd\");\\n\t}\\n}", "target": "112", "substitutes": {"sc": ["out", "tch", "system", "cc", "cle", "cr", "tc", "ss", "rc", "ko", "cam", "cl", "bc", "cs", "esc", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "c", "nc", "sub", "sh", "acc", "SC", "sw", "inc", "gc", "sv", "nl", "scrib", "scan", "lc", "sp", "asc", "ctrl", "sch", "sec", "anc", "usc", "sq"], "A": ["AC", "P", "GA", "LA", "AGE", "AD", "AA", "AS", "As", "CA", "Ax", "BA", "RA", "AN", "mA", "D", "AB", "AH", "AST", "L", "SA", "AL", "This", "AG", "H", "AE", "AF", "An", "AU", "AV", "Av", "a", "HA", "AY", "IA", "Alpha", "ACK", "AR", "R", "X", "AP"], "B": ["E", "b", "F", "BB", "USB", "FB", "Blue", "S", "BM", "BF", "BA", "G", "D", "AB", "I", "OB", "L", "VB", "V", "EB", "BI", "TB", "N", "BL", "IB", "Y", "T", "DB", "J", "Bill", "WB", "LB", "M", "R", "JB", "C", "BE", "BR", "BC"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc =new Scanner(System.in);\\n    int A=sc.nextInt();\\n    int B=sc.nextInt();\\n    int C=sc.nextInt();\\n    if((A==B)&&\\n      (A==C)){System.out.println(\"No\");}\\n    else if((((!(A==B))&&\\n            (!(B==C)))&&\\n            (!(C==A)))){System.out.println(\"No\");}\\n    else{System.out.println(\"Yes\");}\\n  }\\n}", "target": "117", "substitutes": {"sc": ["out", "tch", "system", "cc", "cle", "tc", "cr", "ko", "rc", "ss", "cl", "sb", "bc", "cs", "esc", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ck", " scr", "mc", "c", "nc", "scl", "acc", "sh", "SC", "sw", "gc", "inc", "st", "sv", "dc", "lc", "scan", "sp", "asc", "conv", "sch", "sec", "usc", "syn", "sq"], "A": ["AC", "AT", "E", "P", "GA", "LA", "AGE", "AD", "AA", "AS", "As", "CA", "S", "G", "RA", "AN", "AI", "AB", "AH", "AST", "W", "API", "ALL", "SA", "AL", "ASC", "V", "This", "App", "ACC", "Al", "H", "AE", "ACT", "N", "AF", "An", "AM", "AU", "AV", "a", "HA", "ART", "Area", "Bar", "AY", "IA", "Alpha", "Q", "Array", "AR", "JA", "AK", "R", "M", "O", "AP"], "B": ["b", "BB", "USB", "FB", "Bu", "Blue", "Ber", "BT", "BM", "BF", "BA", "RB", "AB", "OB", "NB", "BO", "L", "VB", "V", "EB", "Bo", "BI", "H", "TB", "N", "BL", "BS", "IB", "Y", "Bar", "DB", "GB", "PB", "BG", "WB", "LB", "R", "SB", "BE", "BR", "Bs", "BC"], "C": ["AC", "E", "CU", "P", "F", "Co", "DC", "CB", "CM", "CA", "S", "G", "Con", "CS", "CR", "D", "O", "CNN", "EC", "CP", "Cu", "L", "Car", "V", "CD", "TC", "c", "H", "VC", "N", "CBS", "SC", "Y", "T", "J", "Q", "CE", "CT", "Cs", "M", "R", "Cow", "You", "CAR", "Z", "X", "CC", "BC"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tScanner sc = new Scanner(System.in);\\n\tfinal int MOD = 1000000007;\\n\tfinal int MAX = Integer.MAX_VALUE;\\n\tfinal long LMAX = Long.MAX_VALUE;\\n\\n\tvoid doIt() {\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tSystem.out.println(Math.max(c - (a - b), 0));\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().doIt();\\n\t}\\n}\\n", "target": "45", "substitutes": {"sc": [" Sc", "system", "cc", "ss", "cr", "pb", "rc", "ko", "r", "cl", "sb", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "ctl", "pl", "ch", "pc", "osc", "isc", "exec", "sys", "ck", "psc", "mc", "p", "nc", "sci", "scl", "sh", "SC", "gc", "ctx", "sv", "dc", "lc", "scan", "sp", "asc", "conv", "ctrl", "sch", "sec", "usc", "sq"], "MOD": ["RO", "ADD", "AD", "MAC", "DEC", "MAP", "TAG", " mod", "MA", "BY", "MD", "REG", "DATA", "AMA", "Mod", "LOCK", "VER", "MODE", "RC", "UID", "REF", "SPEC", "MAG", "LOAD", "KEY", "REM", "EXP", "mod"], "MAX": ["AC", "CAN", "Maximum", "TYPE", "MAC", "MAP", "REC", "MIN", "SIZE", "END", "NUM", "INC", "VERSION", "ALL", "MA", "Max", "FAULT", "MED", "MT", "MS", "SUP", "MH", "M", "EST", "max", "KEY", "VALUE"], "LMAX": ["VMax", "Lmax", "lMA", "VMA", "VMAX", "lMax", "lmax", "lMAX", " LMax", "LMax", " Lmax", "LMA", "Vmax", " LMA"], "a": ["aaa", "m", "sta", "la", "oa", "sa", "i", "e", "f", "da", "r", "u", "t", "at", "A", "au", "area", "ab", "ca", "ma", "app", "ac", "p", "ba", "ao", "ea", "ta", "an", "aa", "d", "ia", "aj", "as", "n", "na", "va", "ae"], "b": ["B", "m", "h", "eb", "i", "e", "bi", "f", "bf", "r", "be", "z", "fb", "bs", "bc", "ab", "abb", "cb", "ib", "bb", "p", "ba", "db", "rb", "nb", "aa", "d", "v", "g", "n", "y", "l"], "c": ["m", "h", "ct", "s", "cc", "e", "f", "rc", "r", "z", "u", "ci", "bc", "cs", "cm", "t", "cd", "ca", "ac", "p", "mc", "g", "d", "v", "fc", "ce", "dc", "lc", "n", "unc", "x", "C", "l", "cp"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\t\\n\t\tString s = in.next();\\n\t\tint nam = s.length();\\n\t\tchar[] s_chars = s.toCharArray();\\n\t\t\\n\t\tint nam2 = nam/2;\\n\t\tint cnt = 0;\\n\t\tfor(int i = 0;i<nam2;i++){\\n\t\t    if(s_chars[i] != s_chars[nam-i-1]){\\n\t\t        cnt++;\\n\t\t    }\\n\t\t}\\n       \\n       System.out.print(cnt);\\n      \\n\t}\\n}", "target": "115", "substitutes": {"in": ["out", "inf", "In", "isin", "init", "str", "doc", "run", "asin", " din", " IN", "r", "ln", "user", "rin", "reader", "k", "read", "IN", "info", "std", "line", "gin", "null", "en", "c", "ins", "inner", "conf", "inn", "inc", "sin", "cin", "io", "input", "world", "all", "bin", "ini", "thin", "n", "err", "ind", "id", "din", "is", "l"], "s": ["sam", "rs", "m", "h", "sol", "j", "ats", "str", "xs", "ss", "S", "sb", "r", "abs", "gets", "bs", "t", "se", "sys", "sc", "gs", "p", "c", "space", "sql", "sw", "g", "less", "sv", "sit", "ns", "sl", "n", "sf", "sts", "sp", "ps", "stats", "js", "ls", "ts", "is", "l", "sq"], "nam": ["sam", "tem", "username", "sim", "mon", "ny", "nn", "ren", "tim", "missing", "iam", "am", "wid", "wal", "span", "mis", "NUM", "mi", "mn", "ni", "nm", "NM", "oct", "aka", "ram", "lam", "inn", "filename", "dim", "name", "my", "mem", "make", "names", "sit", "rm", "ns", "num", "tm", "ame", "n", "snap", "ind", "na", "non", "nick", "tha", "nom", " nem", "stan", "sum", "hid", "amin", "dn", "rem", "win"], "s_chars": ["s_Chars", "s_thacters", "s_characters", "s_ctars", "s_comprs", "s2Chrs", "s_Chains", "s_compains", "s_charars", "s2Chars", "s_ctaps", "s_ctacters", "s_chacters", "s_charains", "s_compords", "s_brrs", "s2chords", "s_thords", "s_compars", "s2chars", "s_Chrs", "s_thars", "s_chaps", "s_Chacters", "s2chains", "s_charrs", "s_thrs", "s_charords", "s_brars", "s_chains", "s_braps", "s_chrs", "s_bracters", "s2Chords", "s_charaps", "s2Chains", "s_ctrs", "s_Chords", "s_chords", "s2chrs"], "nam2": ["ram12", "span2", "nm02", "name2", "nm0", "ram5", "name12", "nm2", "am2", "sam02", "nam12", "ram2", "am5", "nam4", "am12", "am4", "nam5", "name4", "nam02", "ram4", "name5", "nam0", "span02", "sam0", "span0", "sam2"], "cnt": ["nct", "cpt", "cnc", "Cpt", "Cct", "cct", "cNT", "Cnc", "nnc", "ncount", "npt", "xcnt", " cnc", "xccount", "nnt", "cnton", "Cnt", "Cnton", " ccount", " cpt", "xcnton", "CNT", "xcct", " cnton", "ccount", " cNT", "Ccount", "nNT", " cct"], "i": ["ii", "phi", "m", "xi", "j", "multi", "sim", "ri", "eu", "init", "bi", "it", "ji", "e", "hi", "f", "q", "u", "ci", "di", "I", "mi", "ico", "gi", "index", "li", "p", "ei", "si", "pi", "iter", "ti", "io", "my", "cli", "zi", "ui", "ini", "ai", "ic", "us", "\u0438", "ish", "iu", "ind", "ix", "id", "ip", "o", "is", "uri", "x", "im", "ori", "qi", "ki"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u5165\u529b\\n            int a = Integer.parseInt(in.next());\\n            int b = Integer.parseInt(in.next());\\n            int c = Integer.parseInt(in.next());\\n            int k = Integer.parseInt(in.next());\\n            int ans = 0;\\n\\n            if (k <= a) {\\n                ans = k;\\n            } else if (k <= a + b) {\\n                ans = a;\\n            } else {\\n                ans = a - (k - a - b);\\n            }\\n\\n            // \u51fa\u529b\\n            out.println(ans);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "56", "substitutes": {"inputStream": ["importFile", "outputWindow", "inputFile", " inputView", "outputSteam", "importWindow", "inputSteam", " inputSteam", "inputstream", "sourceSteam", " inputWindow", "sourceStream", "outputFile", "outputView", "importSteam", "importStream", " inputFile", "inputView", "sourcestream", "sourceView", "outputstream", " inputstream", "inputWindow"], "outputStream": ["outputWriter", "topWriter", "topSteam", "connectionStream", "topStream", "thisStream", "thisScreen", "thisForm", "topSet", " outputSteam", "inputForm", "thisSteam", "outputSteam", "inputSteam", "connectionSteam", "connectionSet", " outputForm", "outputForm", "connectionWriter", "outputSet", " outputScreen", "outputScreen", "inputScreen", " outputSet", " outputWriter"], "in": ["current", "In", "inf", "isin", "s", "kin", "i", "it", "init", "run", "r", "file", "user", "by", "rin", "reader", "t", "pin", "IN", "this", "info", "on", "er", "gin", "null", "en", "ins", "inside", "inner", "local", "inn", "inc", "get", "cin", "sin", "st", "output", "io", "add", "input", "all", "bin", "ini", "ic", "thin", "or", "l", "ind", "id", "din", "is", "source", "login", "al", "err", "rt"], "out": ["check", "b", "msg", "s", "can", "aos", "it", " OUT", "cache", "run", "net", "r", "OUT", "temp", "t", "at", "ou", "outs", "good", "os", "outer", "info", "this", "ch", "result", "sys", "client", "Out", "log", "list", "report", "null", "p", "er", "c", "ins", "inner", "crit", "ex", "write", "gc", "w", "res", "no", "output", "io", "name", "OU", "all", "co", "chain", "gr", "n", "table", "to", "flush", "o", "writer", "x", "err", "stable", "gt", "nt"], "solver": ["solutions", " solution", "Solutions", "resolution", "solving", "insolver", "resolved", " solutions", "insolution", "solution", "unsolution", "insolving", "Solver", "resolving", "resolver", "ssolution", "solved", "ssolutions", "ssolver", " solve", "insolved", "Solve", "unsolving", "unsolved", "solve", "unsolver", "ssolve", "Solution"], "testNumber": [" solutionNum", " solutionNumbers", "testnumber", " attemptNum", " testNumbers", " solutionnumber", " solutionNumber", " attemptNumbers", "testNumbers", " attemptNumber", "testNum", " attemptnumber", " testnumber", " testNum"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\n\\npublic class Main {\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int n = Integer.parseInt(br.readLine());\\n        \\n        //set array\\n        String[] st = br.readLine().split(\" \");\\n        int[] array = new int[n];\\n        for (int i = 0; i < n; i++){\\n            int a = Integer.parseInt(st[i]);\\n            array[i] = a;\\n        }\\n        \\n        int count = selectionSort(array);\\n        System.out.println(mkArrayString(array));\\n        System.out.println(count);\\n    }\\n    static String mkArrayString(int[] arr){\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < arr.length - 1; i++){\\n            sb.append(arr[i]);\\n            sb.append(\" \");\\n        }\\n        sb.append(arr[arr.length - 1]);\\n        return sb.toString();\\n    }\\n    static int selectionSort(int[] arr){\\n        //selectionSort and return swapcount\\n        int swapcnt = 0;\\n        for (int i = 0; i < arr.length; i++){\\n            int minj = i;\\n            for (int j = i; j < arr.length; j++){\\n                if ( arr[j] < arr[minj]){\\n                    minj = j;\\n                }\\n            }\\n            swap(arr, i, minj);\\n            if (i != minj) swapcnt += 1;\\n        }\\n        return swapcnt;\\n    }\\n    static void swap(int[] arr, int i, int j){\\n        int tmp = arr[i];\\n        arr[i] = arr[j];\\n        arr[j] = tmp;\\n    }\\n}", "target": "199", "substitutes": {"br": ["bridge", "b", "eb", "lr", "Br", "shr", "bl", "bi", "cr", "r", "sb", "be", "dr", "kr", "bc", "buf", "gb", "ch", "pr", "bb", "er", "bd", "ba", "bm", "hr", "rb", "nb", "sr", "bp", "bro", "jp", "gr", "vr", "bt", "yr", "tr", "fr", "bn", "bh", "ber", "wr", "mr", "BR"], "n": ["h", "s", "j", "i", "nn", "z", "t", "nr", "pn", "ne", "mn", "nm", "rn", "ner", "en", "p", "c", "N", "count", "nb", "nu", "name", "ern", "ns", "sn", "cn", "l", "nt"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc=new Scanner(System.in);\\n        int a =sc.nextInt();\\n        int b =sc.nextInt();\\n        int c =sc.nextInt();\\n        if(a*b>c){\\n            System.out.println(c);\\n        }else if(a*b<c){\\n            System.out.println(a*b);\\n        }else{\\n            System.out.println(c);\\n        }\\n    }\\n    \\n}\\n", "target": "213", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ko", "rc", "cl", "bc", "cs", "desc", "esc", "Sc", "ctl", "ch", "pc", "isc", "osc", "uc", "sys", "ck", "mc", "scl", "nc", "sh", "acc", "SC", "gc", "inc", "g", "fc", "sv", "nl", "scan", "lc", "sp", "asc", "conv", "ctrl", "sch", "sec", "anc", "usc", "syn", "sq"], "a": ["act", "aaa", "la", "oa", "isa", "sa", "i", "aq", "admin", "r", "z", "am", "era", "A", "au", "area", "ab", "ca", "index", "from", "ma", "app", "ac", "p", "ba", "ao", "ea", "af", "ta", "an", "aa", "ia", "aj", "ar", "ga", "ai", "as", "access", "alpha", "n", "ra", "pa", "va", "ach", "x", "l", "ae", "action"], "b": ["B", "h", "eb", "ob", "br", "i", "bl", "bi", "f", "e", "bf", "bool", "r", "be", "z", "u", "fb", "sb", "by", "bs", "bc", "abs", "ab", "ib", "cb", "gb", "bis", "beta", "bb", "back", "bd", "ba", "db", "rb", "nb", "d", "v", "mb", "bp", "bar", "bu", "n", "bound", "y", "l", "wb", "erb"], "c": ["out", "h", "m", "ct", "cc", "e", "f", "tc", "rc", "r", "z", "u", "ci", "cm", "cs", "bc", "t", "cd", "ec", "cb", "ch", "pc", "cf", "ac", "mc", "p", "crit", "gc", "w", "fc", "d", "g", "v", "arc", "etc", "ic", "co", "chain", "ce", "dc", "lc", "n", "div", "cond", "unc", "C", "l", "cp", "vc"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main{\\n    \\n \\n    public static void main(String[] args)  {\\n        new Main().solve();\\n    }\\n\\n    void solve(){\\n        Scanner sc = new Scanner(System.in);\\n        int K = Integer.parseInt(sc.next());\\n        int N = Integer.parseInt(sc.next());\\n\\n        int[] a = new int[N];\\n        for(int i=0; i<N; i++){\\n            a[i] = Integer.parseInt(sc.next());\\n        }\\n\\n        sc.close();\\n\\n        int[] b = new int[N];\\n        b[0] = a[1] - a[0];\\n        for(int i=1; i<N-1; i++){\\n            b[i] = a[i+1] - a[i];\\n        }\\n        b[N-1] = K - a[N-1] + a[0];\\n\\n        // System.out.println(Arrays.toString(b));\\n\\n        ArrayList<Integer> list = new ArrayList<>();\\n        for(int i=0; i< N; i++){\\n            list.add(b[i]);\\n        }\\n\\n        Arrays.sort(b);\\n        int result=0;\\n        for(int i=0; i<N-1; i++){\\n            result += b[i];\\n        }\\n\\n        System.out.println(result);\\n\\n    }\\n}", "target": "10", "substitutes": {"sc": [" Sc", "cc", "cle", "tc", "ss", "cr", "pb", "rc", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "exec", "uc", "sys", "mc", "p", "c", "nc", "scl", "sh", "sci", "SC", "gc", "fc", "arc", "src", "co", "scrib", "dc", "lc", "scan", "sp", "asc", " unsc", "func", "sch", "sec", "anc", "usc", "disc", "syn", "sq"], "K": ["B", "KA", "P", "KE", "OK", "SK", "S", "G", "A", "D", "k", "I", "W", "L", "V", "KS", "H", "KN", "NA", "Y", "T", "J", "Q", "Mask", "U", "M", "R", "KK", "C", "Z", "KR", "X", "PK"], "N": ["B", "NH", "E", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "NAME", "NL", "AN", "NS", "I", "A", "D", "NV", "NO", "ANY", "NUM", "GN", "NP", "W", "NC", "NB", "L", "ND", "V", "TN", "MN", "H", "NT", "None", "NA", "Y", "T", "NOTE", "J", "FN", "Q", "NE", "n", "No", "M", "R", "C", "Z", "O"], "a": ["act", "aaa", "sta", "la", "apa", "oa", "isa", "sa", "eas", "e", "f", "da", "it", "am", "abs", "era", "inst", "at", "A", "au", "area", "att", "ab", "ca", "ada", "zero", "ma", "app", "ac", "p", "ao", "ba", "ea", "c", "obj", "an", "aa", "g", "ia", "add", "ar", "auto", "ga", "all", "ai", "as", "ee", "aux", "alpha", "pa", "na", "to", "va", "l", "ae", "fa"], "i": ["ji", "hi", "q", "ci", "mi", "li", "v", "my", "ij", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "bi", "f", "ei", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "ri", "sequence", "init", "di", "info", "gi", "ni", "si", "ti", "io", "\u0438", "ind", "ip", "o", "PI", "qi", "phi", "me", "xi", "j", "sim", "it", "u", "I", "ie", "client", "p", "point", "inner", "iter", "g", "ic", "iu", "base", "is", "x", "batch"], "b": ["B", "eb", "binary", "j", "bo", "br", "bl", "bi", "it", "f", "e", "bf", "r", "sb", "be", "body", "fb", "z", "u", "bs", "bc", "lib", "blue", "ab", "cb", "gb", "ib", "bis", "beta", "bb", "back", "bd", "ba", "c", "db", "rb", "nb", "other", "d", "v", "mb", "end", "bar", "base", "n", "bh", "to", "o", "wb"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStreamWriter;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    static PrintWriter out;\\n    static CF_Reader in;\\n\\n    public static void main(String[] args) throws IOException {\\n        out = new PrintWriter(new OutputStreamWriter(System.out));\\n        in = new CF_Reader();\\n\\n        out.println(in.intNext() * in.intNext());\\n\\n        out.close();\\n    }\\n\\n\\n    static class CF_Reader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public CF_Reader() throws IOException {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() throws IOException {\\n            while (st == null || !st.hasMoreTokens())\\n                st = new StringTokenizer(br.readLine().trim());\\n            return st.nextToken();\\n        }\\n\\n        long longNext() throws IOException {\\n            return Long.parseLong(next());\\n        }\\n\\n        int intNext() throws IOException {\\n            return Integer.parseInt(next());\\n        }\\n\\n        double doubleNext() throws IOException {\\n            return Double.parseDouble(next());\\n        }\\n\\n        char charNext() throws IOException {\\n            return next().charAt(0);\\n        }\\n\\n        public int[] nextIntArray(final int n) throws IOException {\\n            final int[] a = new int[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = intNext();\\n            return a;\\n        }\\n\\n        public long[] nextLongArray(final int n) throws IOException {\\n            final long[] a = new long[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = longNext();\\n            return a;\\n        }\\n\\n        String line() throws IOException {\\n            return br.readLine().trim();\\n        }\\n    }\\n}\\n\\n\\n", "target": "35", "substitutes": {"out": ["serv", "b", "s", "can", "aos", "it", "str", "copy", "cache", "cmd", "net", "put", "r", "OUT", "file", "t", "at", "ou", "outs", "tx", "os", "go", "ch", "pretty", "up", "std", "on", "client", "sys", "Out", "log", "null", "p", "en", "c", "print", "ot", "obj", "gc", "write", "w", "res", "g", "v", "output", "io", "input", "d", "all", "txt", "co", "err", "to", "flush", "over", "ent", "o", "writer", "conv", "sum", "l", "rt", "OU", "nt"], "in": ["inf", "In", "m", "ri", "it", "asin", " din", " IN", "r", "net", "file", "u", "rin", "reader", "vin", "t", "pin", "row", "el", "tx", "IN", "from", "log", "gin", "ac", "en", "p", "c", "ins", "inner", "inn", "inc", "iter", "w", "cin", "v", "io", "add", "d", "input", "bin", "ini", "ic", "ai", "or", "stream", "nin", "err", "ind", "mm", " input", "din", "o", "rest", "old", "al", "l", "rt", "win"], "br": ["bridge", "b", "lr", "Br", "bsp", "bl", "bo", "shr", "str", "cr", "bal", "r", "dr", "ctr", "bern", "kr", "bs", "bc", "buf", "rel", "th", "bra", "ch", "pt", "pr", "next", "bd", "p", "sh", "bm", "hr", "obj", "rb", "sr", "res", "bro", "bp", "bre", "or", "gr", "vr", "bt", "tr", "sp", "fr", "bh", "ber", "bn", "wr", "browser", "nr", "mr", "BR"], "st": ["rd", "ost", "ct", "s", "irst", "sth", "bl", "str", "ss", "ft", "must", "r", "sb", "cl", "nd", "inst", "sm", "t", "at", "th", "sty", "se", "so", "stack", "ST", "pt", "std", "start", "first", "sc", "est", "p", "ist", "sh", "stop", "sw", "St", "mt", "ust", "sv", "step", "sl", "const", "l", "bt", "et", "sn", "sts", "tr", "sp", "fr", "rest", "tt", "stat", "ste", "rt", "ut", "nt"], "n": ["ng", "m", "h", "j", "nan", "ul", "nn", "number", "net", "missing", "r", "z", "ln", "nd", "t", "k", "ne", "network", "mn", "on", "nm", "p", "len", "c", "en", "nc", "np", "N", "count", "an", "nb", "g", "d", "v", "nu", "name", "no", "w", "all", "names", " N", "num", "ns", "un", "nl", "nw", "sn", "na", "o", "x", "cn", "l", "nt"], "a": ["aaa", "m", "h", "sta", "la", "apa", "j", "b", "aos", "sa", "da", "ya", "am", "z", "wa", "A", "au", "area", "ua", "ab", "ca", "qa", "another", "ma", "ac", "ba", "ao", "ea", "xa", "aka", "ka", "ta", "ita", "an", "data", "g", "aa", "ia", "ava", "ata", "ga", "ha", "as", "aux", "alpha", "pa", "na", "to", "va", "ae", "fa"], "i": ["ii", "phi", "m", "xi", "me", "multi", "sim", "j", "ri", "s", "eu", "it", "bi", "ji", "init", "f", "hi", "fire", "q", "ims", "dr", "u", "ci", "iy", "di", "I", "mi", "ie", "gi", "ni", "php", "li", "ei", "si", "c", "print", "pi", "ex", "ti", "cli", "io", "ij", "zi", "ui", "ini", "ic", "ai", "us", "\u0438", "iu", "ix", "MI", "ip", "y", "is", "PI", "im", "batch", "ami", "ity", "qi", "ki"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\t\tString b = \"ABC\";\\n\t\tString r = \"ARC\";\\n\\n\t\tif(S.equals(b))\\n\t\tSystem.out.println(\"ARC\");\\n\t\telse if(S.equals(r))\\n\t\tSystem.out.println(\"ABC\");\\n\t\t\\n\t}\\n}", "target": "153", "substitutes": {"sc": [" Sc", "system", "s", "cc", "cle", "tc", "cr", "ss", "capt", "rc", "cl", "bc", "cs", "sm", "sac", "desc", "esc", "ec", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "uc", "sys", "mc", "scl", "c", "nc", "sub", "SC", "gc", "sw", "sv", "scan", "lc", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "sq"], "S": ["B", "SM", "P", "s", "STR", "ss", "Source", "sb", "G", "Str", "CS", "NS", "A", "I", "SER", "ST", "L", "SA", "V", "SF", "SE", "SI", "H", "N", "SC", "BS", "Y", "T", "Si", "SL", "J", "SU", "SR", "SS", "SH", "SOURCE", "TS", "M", "R", "C", "SB", "X", "JS"], "b": ["B", "eb", "ob", "br", "bi", "bf", "be", "sb", "fb", "bs", "blue", "ab", "ib", "cb", "gb", "lb", "bis", "beta", "bg", "bb", "back", "ba", "db", "rb", "nb", "bot", "mb", "a", "bt", "wb", "erb"], "r": ["rd", "rs", "rx", "ri", "lr", "br", "mr", "cr", "rc", "rar", "dr", "rl", "re", "rel", "ur", "rr", "rg", "er", "ro", "rh", "rb", "sr", "res", "d", "ar", "rew", "vr", "l", "n", "fr", "R", "nr", "rt", "red"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Comparator;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n\\n        List<Integer> list = new ArrayList<>();\\n        for (int i = 0; i < n; i++) list.add(sc.nextInt());\\n\\n        int min = list.stream().min(Comparator.naturalOrder()).get();\\n        int max = list.stream().max(Comparator.naturalOrder()).get();\\n        System.out.println(max-min);\\n    }\\n}", "target": "214", "substitutes": {"sc": ["cc", "cle", "cr", "ss", "capt", "pb", "rc", "cam", "cl", "bc", "cs", "sac", "ec", "desc", "esc", "Sc", "ctl", "se", "ch", "osc", "pc", "isc", "uc", "sys", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "sw", "ctx", "fc", "src", "sv", "nl", "dc", "lc", "sp", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "n": ["ng", "m", "j", "nan", "nn", "net", "ln", "nd", "t", "nr", "k", "ne", "mn", "network", "ll", "on", "np", "gn", "nc", "nor", "ot", "N", "c", "nb", "d", "nu", " N", "ns", "num", "un", "nl", "sn", "nw", "na", "sd", "o", "cn", "l", "nt"], "list": ["range", "queue", "out", "msg", "show", "sequence", "test", "cl", "temp", "dict", "pool", "set", "cont", "detail", "parent", "filter", "lat", "info", "stack", "xml", "L", "group", "ll", "pre", "LIST", "li", "load", "log", "ist", "print", "level", "form", "iter", "and", "array", "shape", "get", "st", "add", "block", "left", "all", "batch", "chain", "tree", "map", "table", "dl", "def", "collection", "ls", "old", "source", "l", "lists", "listed"], "i": ["ii", "phi", "m", "gu", "me", "j", "sim", "multi", "it", "bi", "hi", "q", "in", "mill", "z", "ci", "t", "di", "I", "mi", "ie", "gi", "li", "si", "pi", "iq", "ti", "g", "my", "cli", "ui", "ms", "ini", "ai", "ic", "us", "uu", "ish", "iu", "ix", "ind", "id", "ip", "y", "is", "x", "im", "qi", "ki"], "min": ["m", "rain", "lower", "low", "minimum", "str", "mel", "top", "in", "body", "mins", "member", "Min", "sort", "MIN", "mid", "rel", "emin", "mi", "diff", "rand", "mn", "start", "pre", "first", "minus", "from", "li", "len", "next", "sub", "drop", " mins", "sin", "cut", "st", "major", "add", "largest", "left", "shift", "un", "last", "dist", "begin", "ind", "lt", "minute", "key", "sum", "small", "rem", "mod"], "max": ["act", "range", "out", "m", "inter", "MAX", "pop", "after", "full", "top", "z", "right", "nd", "mx", "set", "row", "exp", "rand", "ext", "med", "prime", "highest", "index", "first", "ax", "recent", "ma", "next", "load", "est", "Max", "huge", "print", "conf", "maximum", "drop", "ex", "count", "res", "major", "v", "end", "largest", "add", "total", "rank", "inv", "last", "length", "div", "map", "view", "mean", "work", "rest", "upper", "sum", "gt", "mod"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = scanner.nextInt();\\n        int[] h = new int[n];\\n        int[] curH = new int[n];\\n        \\n        for (int i = 0; i < n; i++) {\\n            h[i] = scanner.nextInt();\\n        }\\n        int count = 0;\\n        outer:\\n        while (true) {\\n            int start = 0, end = 0;\\n            for (start = 0; start < n; start++) {\\n                if (curH[start] < h[start]) {\\n                    break;\\n                }\\n            }\\n            if (start >= n) {\\n                break;\\n            }\\n            count++;\\n            int i;\\n            for (i = start; i < n; i++) {\\n                if (curH[i] < h[i]) {\\n                    curH[i]++;\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        System.out.println(count);\\n    }\\n}\\n", "target": "77", "substitutes": {"scanner": ["canter", "scancher", " scaner", " scann", "Scanener", "Scanner", " scanener", "canener", "scann", "gatecher", "caner", "gatener", "Scancher", "Scaner", "gateter", "gaten", "canner", "scanener", "scanter", "scaner", "gateener", " scanter", "Scann", "cancher", "Scanter"], "n": ["ng", "out", "m", "j", "nan", "e", "nn", "net", "number", "r", "z", "ln", "nd", "t", "k", "ne", "network", "on", "index", "nm", "next", "en", "p", "np", "nor", "c", "nc", "len", "N", "stop", "and", "nb", "g", "no", "v", "name", "nu", "total", "all", " N", "num", "ns", "un", "nl", "sn", "nw", "na", "o", "x", "size", "cn", "l", "nt"], "h": ["hs", "m", "uh", "hi", "oh", "hm", "ph", "history", "hd", "th", "kh", "ah", "ch", "hh", "he", "hw", "hz", "sh", "H", "c", "hr", "p", "ih", "rh", "g", "ht", "v", "ha", "hl", "host", "bh", "hp", "hex", "y", "ho", "pp", "l", "hash", "header"], "curH": ["trH", "curHH", "curN", "CurH", "karHH", "CurN", "trV", "ceV", " curHA", "ceHM", "cacheh", "trh", "karHis", "recH", " curHM", "ceN", "karV", "cacheH", "curHM", "curHA", "curh", "recHis", "cvHA", "cacheV", "CurHis", "cacheHM", "ceH", "curV", "CurHA", "trHM", "cvH", "Curh", "curHis", "CurHH", "cvN", " curN", " curV", "CurHM", "recV", "recHH", "karH", "cvV", "CurV"], "i": ["ji", "q", "ci", "mi", "php", "li", "port", "v", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "bi", "iy", "ei", "print", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ki", "ii", "ri", "fi", "init", "fire", "di", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "ip", "o", "PI", "ori", "qi", "phi", "me", "xi", "j", "sim", "it", "ims", "u", "t", "I", "ie", "client", "p", "point", "inner", "iter", "g", "ic", "iu", "is", "key", "x", "batch"], "count": ["current", "check", "ct", "flag", "ount", "value", "number", "ctr", "core", "hold", "continue", "t", "cont", "info", "result", "counter", "index", "list", "report", "next", "c", "amount", "conf", "score", "summary", "nb", "add", "total", "debug", "process", "num", "state", "length", "Count", "ind", "cond", "now", "call", "max", "size", "sum", "reset", "found", "nt"], "start": ["offset", "need", "test", "in", "list", "ist", "match", "no", "name", "v", "top", "before", "seek", "ST", "entry", "next", "part", "load", "print", "root", "Start", "st", "length", "id", "reset", "range", "current", "tmp", "init", "window", "k", "resource", "star", "art", "index", "from", "pre", "started", "stop", "get", "add", "rank", "open", "sp", "ind", "rest", "size", "source", "check", "j", "skip", "it", "str", "set", "this", "ie", "first", "p", "point", "iter", "step", "shift", "begin", "base", "key", "x", "old", "starting"], "end": ["offset", "e", "after", "nd", "set", "END", "limit", "ending", "index", "next", "est", "en", "stop", "ends", "send", "st", "last", "length", "begin", "ind", "id", "ended", "End", "ent", "rest", "max", "ff"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\nclass Main{\\n    private static final Scanner sc = new Scanner(System.in);\\n    private static final PrintWriter out = new PrintWriter(System.out);\\n    public static void main(String[] Args){\\n        while(true){\\n            final int h = Integer.parseInt(sc.next());\\n            final int w = Integer.parseInt(sc.next());\\n            if(h==0&&w==0) break;\\n            for(int i = 0; i<h; i++){\\n                for(int j = 0; j<w; j++){\\n                    out.print(\"#\");\\n                }\\n                out.println();\\n            }\\n            out.println();\\n        }\\n        out.flush();\\n    }\\n}", "target": "87", "substitutes": {"sc": ["tch", "cc", "tc", "cr", "rc", "in", "cl", "bc", "cs", "sm", "desc", "ec", "esc", "Sc", "ctl", "ch", "osc", "isc", "pc", "sys", "proc", "ck", "scl", "c", "nc", "sh", "mp", "SC", "sw", "gc", "st", "src", "sv", "nl", "dc", "lc", "scan", "sp", "ctrl", "sch", "sec", "usc", "sq"], "out": ["msg", "can", "aos", "it", "cache", "cmd", "net", "error", "in", "put", "OUT", "file", "r", "at", "t", "pool", "set", "ou", "outs", "lock", "news", "os", "info", "outer", "ch", "conn", "sys", "client", "Out", "log", "list", "en", "p", "yout", "print", "c", "ot", "ex", "obj", "write", "gc", "res", "v", "output", "io", "end", "all", "screen", "co", "scan", "n", "to", "flush", "o", "writer", "sum", "cn", "err", "gt", "nt"], "Args": ["In", " Arg", "Parts", "Spec", "cmd", " arg", "Str", "Files", "Name", "Out", "uments", "GV", "gs", "Ex", "Main", "params", "Init", " arguments", "Ws", "Arg", "GS", "Line", "Path", "Cmd", "Names", "Thread", "arg"], "h": ["hs", "phi", "m", "html", " H", "uh", "hi", "oh", "hm", "ph", "history", "hd", "th", "kh", "ah", "zh", "ch", "hh", "height", "he", "hw", "hz", "high", "H", "sh", "hr", "HH", "ih", "rh", "ht", "ha", "hl", "bh", "hp", "hex", "dh", "gh"], "w": ["m", "wid", "aw", "z", "wal", "wa", "rw", "window", "win", "wt", "wh", "wk", "wi", "ew", "W", "width", "wall", "fw", "p", "wl", "ow", "sw", "d", "v", "rew", "ws", "weight", "wd", "kw", "nw", "n", "wp", "word", "work", "wr", "x", "l", "wx", "wb", "we"], "i": ["ii", "phi", "m", "xi", "me", "multi", "ri", "it", "ji", "bi", "init", "q", "ims", "yi", "ci", "di", "mi", "ie", "info", "gi", "ni", "li", "ei", "si", "inner", "pi", "iter", "iq", "v", "a", "ia", "ij", "zi", "ui", "ini", "ai", "iu", "ix", "ind", "id", "ip", "y", "is", "x", "im", "ret", "ami", "ki"], "j": ["oj", "m", "ja", "br", "it", "ji", "jj", "jc", "q", "z", "uj", "bj", "ph", "jump", "ne", "json", "pt", "pr", "kj", "kid", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "ort", "dj", "J", "us", "jas", "fr", "js", "y", "im", "err", "job", "ge"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n   \tScanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    Integer p[] = new Integer[n];\\n    for(int i=0;i<n;i++){\\n      p[i] = sc.nextInt();\\n    }\\n    int d = 0;\\n    Integer q[] = new Integer[n];\\n    for(int i=0;i<n;i++){\\n      q[i] = i+1;\\n    }\\n\\n\\n\\n    for(int i=0;i < n ;i++){\\n      if(p[i] != q[i]){\\n        d ++;\\n      }\\n    }\\n    if(d == 2 || d == 0){\\n      System.out.println(\"YES\");\\n    }else{\\n      System.out.println(\"NO\");\\n    }\\n\\n    }\\n\\n  }\\n", "target": "82", "substitutes": {"sc": [" Sc", "cc", "cle", "tc", "cr", "ss", "rc", "capt", "cl", "sb", "bc", "cs", "sm", "ec", "sac", "esc", "desc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "uc", "sys", "mc", "scl", "c", "nc", "SC", "sw", "gc", "fc", "sv", "nl", "scan", "lc", "sp", "sel", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "n": ["ng", "m", "j", "nan", "nn", "number", "net", "fn", "ln", "span", "t", "nr", "ne", "mn", "network", "ll", "on", "ni", "nm", "en", "np", "nc", "len", "nor", "N", "pi", "count", "an", "nb", "no", "nu", "v", "name", "all", "names", " N", "num", "ns", "un", "nl", "sn", "na", "o", "cn", "l", "nt"], "p": ["per", "P", "pe", "j", "ap", "it", "par", "pb", "u", "t", "pm", "lp", "pos", "pl", "vp", "perm", "pt", "pc", "pr", "pkg", "tp", "c", "op", "pi", "jp", "sp", "pa", "ps", "ip", "pro", "post", "pp", "cp", "pg"], "i": ["ji", "hi", "iti", "ci", "iso", "mi", "php", "li", "my", "ij", "ui", "ini", "ai", "ice", "et", "err", "ix", "ion", "m", "multi", "ies", "bi", "f", "ik", "iy", "ei", "pi", "cli", "zi", "chain", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "fi", "ri", "init", "eric", "di", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "to", "ip", "o", "PI", "source", "ori", "qi", "phi", "gu", "xi", "me", "j", "sim", "s", "it", "ims", "set", "I", "this", "ie", "client", "point", "inner", "ex", "iter", "g", "ia", "ic", "iu", "ios", "base", "is", "oi", "batch"], "d": ["done", "m", "fd", "j", "s", "it", "f", "da", "did", "dm", "dx", "gd", "z", "dict", "t", "dd", "D", "di", "cd", "ld", "dt", "diff", "result", "dig", "du", "bd", "c", "db", "data", "draw", "w", "g", "v", "pd", "df", "dist", "div", "ds", "default", "dl", "sd", "dh", "del", "l", "den", "dis"], "q": ["queue", "eq", "qq", "qual", "ct", "j", "aq", "it", "f", "quote", "ox", "z", "u", "ql", "qt", "qu", "dq", "ch", "qa", "qv", "qs", "que", "quit", "query", "sh", "ue", "iq", "v", "Q", "ip", "y", "quant", "tt", "pp", "requ", "sq", "qi"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int enemy = sc.nextInt();\\n    int pp = sc.nextInt();sc.nextLine();\\n    String[] string = sc.nextLine().split(\" \");\\n    long[] input = new long[enemy];\\n    \\n    for(int i = 0; i < enemy; i++){\\n      input[i] = Long.parseLong(string[i]);\\n    }\\n    Arrays.sort(input);\\n    while(pp > 0){\\n      enemy--;\\n      pp--;\\n    }\\n    long sum = 0;\\n    for(int i = 0; i < enemy; i++){\\n      sum += input[i];\\n    }\\n    \\n    \\n    System.out.println(sum);\\n  }\\n}", "target": "230", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "capt", "rc", "cl", "sb", "bc", "cs", "ec", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "mc", "scl", "nc", "c", "sub", "sci", "SC", "sw", "gc", "inc", "cons", "sv", "dc", "lc", "scan", "sp", "cmp", "ser", "asc", "conv", "func", "sec", "anc", "sch", "usc", "irc", "sq"], "enemy": ["agent", "imp", "eye", "season", "ortex", "char", "game", "alias", "illusion", "number", "mind", "axe", "Opp", "addy", "NR", "Gamer", "minecraft", "IP", "goal", "player", "jump", "friend", "force", "ie", "NP", "net", "vp", "escape", "counter", "ax", "hunt", "level", " enemies", "peg", "evil", "threat", "upp", " attack", "shield", "efficiency", "inn", "None", "Lev", "killing", "world", "joy", "attack", "animate", "num", "riot", "length", "associated", "ape", "illegal", "kill", "iev", "combat", "ip", "nick", "Imp", "Attack", "machine", "max", "issue", "episode", "boss", "opp"], "pp": ["imp", "P", "cpp", "pe", "xp", "page", "push", "tmp", "pop", "pps", "po", "yp", "ulp", "ph", "jump", "lp", "pl", "vp", "ping", "up", "perm", "PP", "pr", "php", "tp", "p", "fp", "upp", "op", "ptr", "mp", "ipp", "port", "bp", "ppy", "ppo", "ep", "jp", "ff", "gp", "phys", "sp", "ps", "ip", "cp", "arp", "pg", "opp"], "string": ["ring", "san", "password", "char", "sequence", "str", "service", "number", "answer", "re", "series", "function", "network", "ping", "escape", "buffer", "list", "spec", "null", "strip", "space", "prefix", "parse", "comment", "sql", "request", "array", "sound", "strings", "ident", "chain", "object", "text", "phrase", "join", "word", "source", "sample"], "input": ["act", "qq", "check", "img", "quiet", "tmp", "context", "sequence", "supp", "put", "missing", "in", "q", "file", "hello", "select", "history", "human", "read", "att", "feed", "qa", "up", "buffer", "accept", "index", "control", "print", "inner", "form", "request", "local", "data", "get", "upload", "output", "add", "config", "total", "raw", "hidden", "active", "length", "update", "Input", "image", "integer", "text", "aux", "view", "ip", "work", "field", "unsigned", "source", "initial"], "i": ["ugi", "ji", "hi", "q", "ci", "mi", "mu", "li", "ij", "ui", "ini", "ai", "us", "ice", "err", "ix", "m", "multi", "bi", "f", "iy", "ei", "c", "pi", "cli", "zi", "ms", "chain", " I", "id", "y", "uri", "asi", "im", "ami", "ity", "ki", "ii", "ri", "fi", "init", "fire", "yi", "Ti", "di", "wi", "gi", "ni", "si", "ti", "io", "\u0438", "ind", "MI", "ip", "o", "esi", "ori", "qi", "phi", "xi", "me", "j", "sim", "it", "ims", "span", "I", "ie", "inner", "ic", "iu", "is", "oi", "batch"], "sum": ["cost", "sam", "save", "out", "um", "sim", "dump", "ass", " sums", "temp", "goal", "set", "dev", "diff", "hum", "loss", "result", "zero", "vol", "report", " SUM", "si", "acc", " summed", "su", "union", "count", "cum", "summary", "cal", "add", "total", "mem", " Sum", "dot", "num", "us", "average", "alpha", "Sum", "mary", "mean", "alph", "max", "size", "gam", "hash"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        new Main().solve();\\n    }\\n\\n    void solve() {\\n        Scanner sc = new Scanner(System.in);\\n        int N=sc.nextInt();\\n        boolean[] A=new boolean[N];\\n        Arrays.fill(A, false);\\n        int M=sc.nextInt();\\n        int X=sc.nextInt();\\n        X--;\\n        for(int i=0;i<M;i++){\\n            int a=sc.nextInt();\\n            a--;\\n            A[a]=true;\\n        }\\n        int ans=0;\\n        for(int i=X;i<N;i++){\\n            if(A[i]==true)ans++;\\n        }\\n        int answer=0;\\n        for(int i=X;i>=0;i--){\\n            if(A[i]==true)answer++;\\n        }\\n        System.out.println(Math.min(ans, answer));\\n    }\\n}", "target": "197", "substitutes": {"sc": ["system", "cc", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "ec", "cont", "esc", "sync", "Sc", "ctl", "se", "pl", "ch", "pc", "ca", "isc", "osc", "sys", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "sw", "inc", "fc", "ctx", "st", "cons", "sv", "nl", "dc", "lc", "sp", "cmp", "asc", "conv", "cgi", "ctrl", "sch", "sec", "anc", "usc", "sq"], "N": ["B", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "AN", "NS", "I", "D", "NO", "NC", "NB", "L", "V", "NM", "MN", "H", "NT", "NA", "Y", "T", "K", "J", "Q", "n", "R", "C", "Z", "Na", "O"], "A": ["AC", "B", "AT", "E", "P", "GA", "LA", "AA", "CA", "S", "As", "BA", "G", "RA", "I", "AB", "API", "SA", "MA", "V", "RAM", "Answer", "ACC", "H", "AE", "ACT", "AF", "An", "AM", "AU", "AV", "NA", "T", "HA", "AMA", "IA", "Alpha", "Q", "WA", "Array", "JA", "AR", "ATA", "C", "EA", "AP"], "M": ["B", "m", "P", "TM", "MX", "MAN", "MM", "S", "G", "MO", "I", "D", "L", "MP", "MA", "V", "MN", "H", "MC", "Y", "T", "K", "J", "Q", "MT", "MS", "MODE", "U", "R", "MI", "C", "Z"], "X": ["E", "IX", "P", "F", "XL", "MX", "ML", "S", "G", "XXX", "TX", "NS", "I", "D", "W", "L", "V", "XX", "H", "XT", "DX", "XP", "NA", "Y", "T", "K", "J", "Q", "EX", "TR", "MS", "AX", "XY", "U", "R", "XM", "x", "C", "Z", "O", "IS"], "i": ["ii", "phi", "me", "xi", "j", "multi", "sim", "ri", "fi", "init", "bi", "f", "ji", "it", "hi", "q", "ims", "ani", "z", "iti", "u", "yi", "ci", "iy", "Ti", "di", "I", "mi", "ie", "info", "gi", "index", "ni", "li", "ei", "si", "c", "pi", "iter", "ti", "g", "ia", "name", "cli", "ij", "zi", "ui", "isi", "ini", "ai", "\u0438", "ic", "chain", "iu", "ind", "ix", "id", "MI", "ip", "cgi", "io", "o", "is", "uri", "asi", "im", "oi", "ori", "qi", "ki"], "a": ["aaa", "b", "sta", "la", "oa", "s", "ap", "isa", "ja", "sa", "e", "f", "sha", "am", "z", "wa", "t", "at", "area", "ab", "ca", "qa", "ma", "ac", "ba", "ao", "ea", "xa", "si", "ka", "ta", "pi", "an", "aa", "ia", "aj", "ata", "ai", "as", "alpha", "pa", "ix", "na", "va", "o", "ana", "l", "fa"], "ans": ["uns", "checks", "s", "can", "ats", "rans", "oa", "eas", "xs", "ann", " answers", "ians", "vals", "ran", "asks", "ens", "ones", "cs", "swers", "errors", "ums", "ots", "answered", "aps", "anova", "anks", "ks", "ins", "an", "lines", "ions", "ars", "names", "ms", "results", "as", "ns", "flags", "ows", "ids", "ants", "ares", "ents", "ons", "ates", "arts", "users", "ls", "ANS", "is", "x", "ations", "ores", "ays", "actions"], "answer": ["ask", "ever", "message", "um", "oa", "aq", "wer", "after", "error", "number", "ox", "tun", "mx", "window", "swers", "exit", "mate", "area", "our", "result", "index", "ve", "back", "Answer", "next", "ner", "answered", "query", "adder", "OVA", "response", "option", "array", "uno", "rent", "an", "version", "onse", "results", "vote", "options", "ants", "reply", "nee", "oval", "n", "ver", "ret", "size", "x", "question", "ova", " unanswered"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main{\\n    public static void main(String[] args)throws Exception {\\n        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer tokenizer = new StringTokenizer(input.readLine());\\n        int k = Integer.parseInt(tokenizer.nextToken());\\n        int s = Integer.parseInt(tokenizer.nextToken());\\n        int count = 0;\\n        for (int i = 0; i <= k; i++) {\\n            for (int j = 0; j <= k; j++) {\\n                if (s >= i+j && s-(i+j) <= k){\\n                    count++;\\n                }\\n                if (s < i+j)\\n                    break;\\n            }\\n            if (s < i)\\n                break;\\n        }\\n        System.out.println(count);\\n\\n    }\\n}\\n", "target": "29", "substitutes": {"input": [" Input", "out", "current", "context", "init", "char", "service", "cmd", "in", "file", "focus", "select", "reader", "iterator", "read", "socket", "feed", "this", "cur", "start", "buffer", "client", "accept", "list", "inner", "request", "data", "iter", "get", "output", "io", "more", "background", "raw", "active", "stream", "Input", "text", "table", "view", "source", "sum", "initial", "sample"], "tokenizer": ["okeniter", "Tokenize", "okenizer", "nameize", "tokeniter", "listiter", "Tokenizer", "okenize", "toolizer", "nameizer", "Tokener", "serialize", "tokenber", "listizer", "listize", "okenoser", " tokenber", "serialator", "tokenoser", "toolize", " tokenize", " tokener", "toolizers", "tokenize", "tokener", "tooliter", "serializer", " tokenoser", "nameoser", "nameber", "Tokenator", "serialer", "okenizers", "tokenator", "listizers", " tokenator", "okenber", "tokenizers"], "k": ["mk", "unk", "m", "h", "dk", "sk", "ke", "ik", "q", "kn", "z", "u", "kt", "ok", "t", "kh", "kb", "ak", "ck", "kid", "p", "ks", "kl", "ka", "w", "g", "v", "K", "kk", "length", "kw", "n", "tk", "o", "ek", "ku", "ki"], "s": ["rs", "b", "h", "m", "string", "its", "ats", "sa", "str", "ss", "q", "S", "r", "sb", "abs", "u", "span", "bs", "cs", "t", "os", "se", "start", "sym", "p", "gs", "si", "ks", "c", "ins", "ends", "w", "st", "v", "less", "a", "ms", "uses", "ns", "us", "state", "south", "n", "sts", "ds", "ps", "stats", "js", "sd", "ts", "ls", "is", "l", "sq"], "count": ["check", "quiet", "flag", "ount", "sequence", "cache", "success", "number", "must", "ctr", "body", "core", "continue", "cont", "coll", "info", "result", "counter", "index", "list", "report", "c", "amount", "code", "status", "score", "trace", "summary", "nb", "comment", "add", "total", "process", "num", "state", "const", "length", "n", "Count", "ind", "cond", "child", "frequency", "call", "size", "stat", "sum", "find", "found", "nt"], "i": ["ii", "phi", "m", "h", "xi", "me", "multi", "ri", "init", "bi", "it", "hi", "ims", "in", "z", "ci", "iso", "at", "di", "I", "mi", "ie", "info", "index", "li", "p", "ei", "si", "pi", "iq", "ti", "g", "ia", "v", "ar", "ij", "ui", "ini", "ai", "ic", "us", "l", "iu", "ind", "ix", "id", "ip", "y", "is", "uri", "asi", "im", "ion", "ret", "oi", "ami", "qi", "ki"], "j": ["oj", "b", "h", "out", "og", "ja", "br", "it", "ji", "jj", "jc", "str", "q", "z", "ed", "uj", "bj", "bs", "el", "rel", "jump", "ne", "json", "pt", "pr", "on", "kj", "ax", "p", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "J", "dj", "jas", "l", "n", "err", "fr", "jack", "js", "to", "y", "ion", "ort", "job", "ge"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = new String();\\n\t\ts = sc.nextLine();\\n\t\tchar c[] = new char[s.length()];\\n\t\tc = s.toCharArray();\\n\t\tfor(int i=0; i<s.length(); i++){\\n\t\t\tif(Character.isLowerCase(c[i])){\\n\t\t\t\tSystem.out.print(Character.toUpperCase(c[i]));\\n\t\t\t} else if(Character.isUpperCase(c[i])){\\n\t\t\t\tSystem.out.print(Character.toLowerCase(c[i]));\\n\t\t\t} else {\\n\t\t\t\tSystem.out.print(c[i]);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n}", "target": "192", "substitutes": {"sc": [" Sc", "system", "cc", "cle", "tc", "ss", "cr", "rc", "pb", "cl", "bc", "cs", "ec", "ok", "desc", "esc", "sync", "Sc", "se", "ch", "pc", "isc", "osc", "soc", "sys", "spec", "mc", "sub", "nc", "sh", "SC", "gc", "inc", "sv", "ic", "scan", "lc", "sp", "sel", "asc", "conv", "sch", "anc", "sec", "syn"], "s": ["hs", "rs", "out", "b", "string", "ats", "str", "fs", "f", "ss", "S", "sb", "gets", "r", "bs", "cs", "t", "os", "se", "sys", "sing", "gs", "p", "ins", "sql", "sw", "ys", "txt", "less", "strings", "sv", "ms", "ws", "ns", "ess", "n", "sts", "sp", "ds", "ps", "js", "ls", "ses", "is", "ts", "l", "csv", "sq"], "c": ["b", "h", "m", "ct", "con", "csv", "cc", "e", "f", "cache", "tc", "rc", "r", "z", "u", "ec", "cs", "t", "cd", "cos", "ch", "pc", "enc", "cf", "cu", "ac", "p", "mc", "gc", "fc", "arc", "v", "g", "d", "etc", "ic", "co", "chain", "dc", "ce", "lc", "n", "err", "xc", "col", "y", "conv", "unc", "x", "C", "codes", "l", "cp", "vc"], "i": ["ii", "phi", "gravity", "m", "xi", "me", "multi", "j", "sim", "ri", "init", "bi", "it", "ji", "hi", "gl", "q", "z", "u", "ci", "menu", "set", "di", "I", "parent", "mi", "this", "ie", "json", "gi", "index", "slice", "sym", "list", "li", "p", "ei", "si", "point", "status", "ski", "pi", "ex", "ti", "g", "v", "a", "cli", "my", "io", "ij", "ui", "ini", "ic", "ai", "us", "\u0438", "chain", "iu", "n", "ix", "ind", "id", "to", "y", "is", "key", "x", "im", "ori", "uri", "batch"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args ) throws Exception {\\n    Scanner sc = new Scanner(System.in);\\n    String str1 = sc.next();\\n    String str2 = sc.next();\\n    int A = Integer.valueOf(str1);\\n    int B = Integer.valueOf(str2);\\n    \\n    int ans =  A * B;\\n    System.out.println(ans);\\n  }\\n}", "target": "35", "substitutes": {"sc": ["sk", "cc", "cle", "tc", "cr", "ss", "ko", "cl", "bc", "cs", "desc", "ec", "cont", "esc", "sync", "Sc", "dec", "ch", "osc", "pc", "isc", "uc", "sys", "mc", "scl", "nc", "c", "sh", "sci", "SC", "sw", "gc", "inc", "cons", "sv", "lc", "scan", "sp", "sel", "asc", "ctrl", "sch", "sec", "anc", "usc", "sq"], "str1": [" str0", "stable0", "hexFirst", "txt2", "hexA", "st1", "txtFirst", "hex2", "strA", "strFirst", "stringFirst", "str0", "string1", "hex1", "txt1", "st0", "string2", "txtA", "stable51", "stringA", "stable1", " str51", "str51", "st51"], "str2": ["st3", "usrTwo", " str256", " strB", "dr2", "string3", "usr3", "stB", "st1", "str3", "dr3", "usr2", "usr1", "strB", "stringTwo", "string1", "dr256", "st256", "str256", "stTwo", "drB", "st2", " str3", "string2", "strTwo"], "A": ["AT", "AC", "P", "LA", "AA", "AS", "Ant", "CA", "S", "As", "BA", "G", "RA", "AN", "AI", "mA", "AB", "API", "L", "SA", "AL", "ACC", "AE", "N", "AF", "An", "AU", "Av", "AV", "a", "HA", "One", "IA", "AR", "M", "X", "AP"], "B": ["b", "BB", "USB", "FB", "BM", "BF", "BA", "G", "RB", "D", "I", "AB", "OB", "NB", "L", "VB", "V", "EB", "TB", "N", "BS", "BL", "IB", "Y", "T", "DB", "J", "GB", "WB", "LB", "M", "JB", "C", "Z", "BR", "Bs", "BC"], "ans": ["annot", "rans", "ats", "xs", "pan", "ann", "lan", "ens", "ands", "aus", "AN", "aints", "sets", "anes", "offs", "ots", "ks", "books", "ins", "anners", "An", "an", "ros", "oat", "ars", "names", "ms", "as", " scans", "ants", "ids", "ANN", "rates", "arts", "ls", "ANS", "amps", "ations", "olds", "asks", "ads"]}}
{"code": "import java.util.*;\\npublic class Main  \\n{ \\n    static boolean isPalindrome(String str)\\n    {\\n      \tStringBuilder sb = new StringBuilder(str);\\n      \tString st = sb.reverse().toString();\\n      \treturn st.equals(str);\\n    }  \\n    public static void main(String[] args) \\n    { \\n        Scanner sc =new Scanner(System.in);\\n        String str = sc.next();\\n        int N = str.length();\\n      \tString s = str + \" \";\\n      \tint q =(N-1)/2 , p = (N+3)/2;\\n        if(isPalindrome(str) && isPalindrome(str.substring(0,q)) && isPalindrome(s.substring(p-1,str.length())))\\n        {\\n          \tSystem.out.println(\"Yes\");\\n        }\\n      else\\n      {\\n        System.out.println(\"No\");\\n      }\\n    } \\n}", "target": "123", "substitutes": {"str": ["rs", "out", "b", "m", "msg", "string", "j", "STR", "br", "char", "it", "i", "f", "rep", "ocr", "seq", "in", "r", "z", "arr", "ctr", "dr", "cl", "Str", "temp", "cs", "t", "cont", "exp", "os", "ch", "enc", "cur", "pr", "list", "vol", "c", "spec", "status", "obj", "parse", "data", "txt", "sw", "g", "v", "name", "res", "mt", "input", "sl", "l", "text", "n", "sts", "tr", "sp", "fr", "utt", "js", "expr", "o", "wr", "err"], "sb": ["b", "eb", "ob", "BB", "sa", "stab", "pb", "bf", "bj", "bs", "lp", "zb", "kb", "cb", "gb", "ib", "lb", "bg", "bb", "db", "rb", "nb", "bp", "sv", "sit", "sl", "bt", "sf", "sp", "bh", "bn", "lbs", "SB", "sq", "erb"], "st": ["sta", "ct", "sth", "ss", "nd", "bs", "inst", "t", "th", "sty", "so", "se", "ST", " ST", "std", "start", "est", "ist", "sh", "sw", "mt", "St", "ust", "sl", "bt", " est", "sts", "sn", "sp", "rest", "tt", "ste", "stable", "ut", "nt"], "sc": ["sa", "cc", "cr", "tc", "ss", "rc", "cl", "bc", "cs", "desc", "sac", "ec", "esc", "sync", "Sc", "ch", "pc", "osc", "isc", "sys", "mc", "scl", "c", "nc", "SC", "gc", "sv", "lc", "scan", "sp", "sel", "asc", "conv", "sch", "anc", "sec", "sq"], "N": ["B", "NH", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "NL", "NS", "I", "D", "A", "NV", "GN", "NP", "W", "NC", "NB", "L", "ND", "V", "NOR", "TN", "Name", "NM", "NG", "H", "NT", "NA", "T", "K", "J", "Sn", "Q", "NE", "n", "NW", "New", "M", "R", "C", "X"], "s": ["rs", "out", "b", "string", "j", "ats", "i", "xs", "ss", "S", "r", "cs", "t", "qs", "gs", "c", "sw", "sg", "ys", "g", "txt", "name", "strings", "data", "sv", "ns", "n", "sts", "sp", " ts", "ps", "js", "ls", "ts", "is"], "q": ["eq", "qq", "m", "h", "P", "j", "aq", "i", "f", "z", "u", "ql", "qt", "qu", "t", "k", "dq", "ch", "qa", "qv", "qs", "query", "sh", "iq", "g", "v", "Q", "n", "o", "quant", "l", "sq", "qi"], "p": ["per", "m", "b", "P", "j", "pe", "ap", "i", "e", "par", "f", "r", "u", "t", "k", "pos", "lp", "pn", "pc", "pt", "pr", "tp", "c", "np", "pi", "d", "bp", "v", "jp", "n", "pa", "sp", "ps", "y", "o", "pp", "cp", "fp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tString s = scan.next();\\n\\n\t\tString alphabet = \"abcdefghijklmnopqrstuvwxyz\";\\n\t\tfor (int i = 0; i < alphabet.length(); i++) {\\n\t\t\tif (s.equals(alphabet.substring(i, i + 1))) {\\n\t\t\t\tSystem.out.println(alphabet.substring(i + 1, i + 2));\\n\t\t\t}\\n\t\t}\\n\t\tscan.close();\\n\t}\\n\\n}\\n", "target": "150", "substitutes": {"scan": ["store", "save", "out", "san", "m", "check", "clean", "con", "system", "can", "skip", "Scan", "ann", "run", "pass", "in", "re", "scroll", "set", "row", "read", "sync", "connect", "se", "seek", "sky", "start", "sys", "proc", "sc", "reach", "ner", "report", "query", "match", "send", "gate", "parse", "plan", "an", "sql", "sin", "scale", "spin", "auto", "sv", "search", "watch", "n", "stat", "sum", "find"], "s": ["rs", "b", "h", "m", "string", "str", "f", "ss", "r", "S", "sb", "t", "sc", "sing", "p", "gs", "c", "su", "w", "g", "v", "strings", "sv", "single", "self", "ns", "n", "sp", "js", "y", "ts", "ls", "is", "x", "source", "sq"], "alphabet": ["alphet", "charet", "betacter", "hexabet", "palet", "charphabet", "alphaabetic", "alashing", "betphabet", "palabet", "phabet", "alphaabet", "forthabet", "alphoton", "forthabetes", "phabetes", "forthoton", "palphabet", "hexet", "alphabetic", "alphacter", "hexabetic", "phphabet", "betabet", "archabetic", "alphaphabet", "archphabet", "alacter", "alphaashing", "alphphabet", "palabetic", "alabetic", "alphgebra", "alabet", "archabet", "alphabetes", "archashing", "algebra", "archacter", "alphashing", "alabetes", "forthphabet", "hexphabet", "charabet", "aloton", "betgebra", "charabetic", "photon", "archgebra"], "i": ["ii", "phi", "m", "gu", "xi", "me", "multi", "j", "ri", "sim", "it", "bi", "init", "ji", "hi", "q", "in", "u", "yi", "ci", "di", "I", "mi", "this", "ie", "info", "gi", "index", "li", "ei", "si", "c", "ski", "status", "pi", "ex", "iq", "ti", "sql", "v", "a", "io", "cli", "my", "zi", "ui", "ini", "ic", "ai", "iu", "n", "ix", "ind", "ip", "y", "is", "uri", "x", "im", "oi", "uni", "ori", "ami", "qi", "ki"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in Actual solution is at the top\\n *\\n * @author Silviase\\n */\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    InputStream inputStream = System.in;\\n    OutputStream outputStream = System.out;\\n    Scanner in = new Scanner(inputStream);\\n    PrintWriter out = new PrintWriter(outputStream);\\n    DCaracalVsMonster solver = new DCaracalVsMonster();\\n    solver.solve(1, in, out);\\n    out.close();\\n  }\\n\\n  static class DCaracalVsMonster {\\n\\n    public void solve(int testNumber, Scanner in, PrintWriter out) {\\n      long h = in.nextLong();\\n      out.println(fun(h));\\n    }\\n\\n    long fun(long h) {\\n      return h == 1 ? 1 : fun(h / 2) * 2 + 1;\\n    }\\n\\n  }\\n}\\n\\n", "target": "51", "substitutes": {"inputStream": ["inputSource", "infoStream", "inputStyle", " inputStreamer", "outputStreamer", "sourceSource", "outputStyle", " inputSource", "sourceStyle", "outputSteam", "inputstream", "inputSteam", " inputSteam", "sourceSteam", "sourceStream", " inputStyle", "outputSource", "outputstream", "infoSteam", " inputstream", "inputStreamer", "infoStreamer", "infostream"], "outputStream": ["inputWriter", "printStream", "printSteam", "outputWriter", "printWriter", " outputFile", "outStream", "printForm", "languageWriter", " outputSteam", "inputForm", "outputSteam", "outSteam", "inputSteam", "outputFile", "languageSteam", "languageFile", "outFile", "outWriter", "outputForm", "languageStream", "outForm", " outputWriter"], "in": ["serv", "current", "In", "inf", "isin", "s", "can", "context", "kin", "i", "lin", "it", "init", "run", " din", " IN", "r", "file", "rin", "reader", "read", "mi", "IN", "this", "info", "on", "er", "log", "gin", "ner", "null", "en", "c", "ins", "inner", "inside", "local", "inn", "inc", "iter", "get", "cin", "sin", "st", "io", "add", "ssl", "input", "bin", "ini", "env", "stream", "l", "scan", "ind", "din", "o", "is", "source", "err", "rt"], "out": ["s", "aos", "it", " OUT", "cache", "net", "r", "OUT", "user", "by", "temp", " Out", "window", "t", "at", "pool", "ou", "outs", "exit", "os", "outer", "info", "this", "ch", "up", "result", "conn", "sys", "client", "Out", "log", "list", "report", "null", "print", "inner", "ex", "write", "gc", "w", "res", "v", "output", "io", "name", "no", "end", "screen", "co", "l", "scan", "n", "table", "to", "flush", "y", "over", "o", "writer", "err", "stable", "OU", "nt"], "solver": ["soln", "ssoln", " solution", "resolution", " saver", "resolved", "ssolved", "solution", "ssaver", "Solver", "saver", " soln", "resolver", "Soln", "ssolution", "solved", "ssolver", " solve", "Solve", " solved", "solve", "resaver", "ssolve", "Solution"], "testNumber": ["testnumber", " attemptNo", " suiteNumber", " testNo", " suitenumber", "testNo", " testLength", " attemptLength", "testLength", " attemptNumber", " suiteLength", " attemptnumber", " testnumber", " suiteNo"], "h": ["hs", "b", "m", "html", "hal", "i", "it", "uh", "f", "hi", "r", "his", "oh", "hm", "t", "ph", "history", "hd", "k", "kh", "pl", "zh", "ah", "hh", "he", "has", "p", "hz", "sh", "H", "c", "hr", "rh", "ih", "w", "g", "v", "hhh", "hl", "bh", "hp", "y", "hex", "o", "ho", "hid", "x", "dh", "l", "hash"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tInputStream in = System.in;\\n\tPrintStream out = System.out;\\n\\n\tpublic void _main(String[] args) {\\n\t\tScanner sc = new Scanner(in);\\n\\n\t\tint A1 = sc.nextInt();\\n\t\tint A2 = sc.nextInt();\\n\t\tint A3 = sc.nextInt();\\n\\n\t\tsc.close();\\n\\n\t\tif (A1 + A2 + A3 >= 22) {\\n\t\t\tout.println(\"bust\");\\n\t\t} else {\\n\t\t\tout.println(\"win\");\\n\t\t}\\n\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main()._main(args);\\n\t}\\n}\\n", "target": "129", "substitutes": {"in": ["inf", "In", "con", "s", "i", "it", "init", "doc", "str", "run", "f", "r", "file", "reader", "t", "read", "IN", "info", "up", "on", "from", "log", "gin", "null", "en", "p", "c", "inner", "ins", "local", "inn", "data", "inc", "get", "cin", "st", "io", "ar", "input", "all", "bin", "ini", "inv", "ic", "stream", "l", "ind", "ds", "din", "o", "is", "source", "err", "rt"], "out": ["msg", "aos", "words", "cache", "cmd", "net", "error", "r", "OUT", "put", "t", "at", "format", "set", "ou", "outs", "os", "info", "json", "ch", "exec", "pretty", "up", "result", "conn", "sys", "Out", "log", "list", "report", "null", "p", "print", "inner", "ins", "ex", "obj", "write", "w", "res", "v", "output", "io", "end", "OU", "all", "inv", "screen", "co", "gr", "display", "update", "n", "to", "conv", "over", "o", "writer", "sum", "err", "gt", "nt"], "sc": ["sa", "cc", "tc", "cr", "ss", "ko", "cam", "pb", "cl", "rc", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "ch", "pc", "osc", "isc", "uc", "sys", "ck", "psc", "mc", "scl", "c", "nc", "sh", "acc", "sci", "sub", "mp", "SC", "gc", "sw", "inc", "ctx", "arc", "sv", "dc", "lc", "scan", "sp", "cmp", "ser", "asc", "conv", "ctrl", "sch", "sec", "usc", "syn", "sq"], "A1": ["A01", "A0", "AA0", "AA3", "B0", "AA001", "CA3", " A001", "AA01", "CA0", "CA001", "CA01", "A001", "CA1", "B1", "B2", "CA2", "AA2", "AA1", " A01", "B3"], "A2": ["HA62", "A02", "ATwo", "Atwo", " A5", " Atwo", "HA5", " A02", "AY5", "HA02", "AY02", " ATwo", "HA2", "GA2", "GAtwo", "PA2", "GA1", "A5", "AY62", "PA1", "PATwo", "GATwo", "A62", "PAtwo", " A62", "AY2"], "A3": ["a5", " A5", "GAThree", "ACT2", "CA4", "CA3", "GA2", " AThree", "ACT21", "GA21", "A5", " A4", "ACT3", " A21", "a4", "A21", "AThree", "CA5", "CA2", "a3", "A4", "ACTThree", "GA3", "a2"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    final static int COST_MAX = 1001;\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        int N = scanner.nextInt();\\n        int T = scanner.nextInt();\\n        int cost = COST_MAX;\\n\\n        for (int i = 0; i < N; i ++){\\n            int c = scanner.nextInt();\\n            int t = scanner.nextInt();\\n\\n            if (t <= T){\\n                cost = Math.min(cost, c);\\n            }\\n        }\\n\\n        if (cost == COST_MAX){\\n            System.out.println(\"TLE\");\\n        } else {\\n            System.out.println(cost);\\n        }\\n    }\\n}\\n", "target": "8", "substitutes": {"COST_MAX": ["COST2VAL", "COST2Max", "COST_VAL", "COLL2Max", "COSTVERMIN", "COLL_MIN", "COST_Max", "COST2MAX", "COOST_MED", "COLL2VAL", "COLL_MAX", "COSTVERMAX", "COLL_VAL", "COLL_Max", "COOST_MAX", "COSTFAULTMED", "COLL_max", "COSTVERMax", "COSTFAULTMAX", "COST2MIN", "COSTFAULTMax", "COST_MED", "COSTVERVAL", "COSTFAULTmax", "COST_max", "COLL2MIN", "COLL2MAX", "COOST_Max", "COST_MIN", "COLL_MED", "COOST_max"], "scanner": ["canter", " scaner", "caninner", "Scanener", "reachter", "scanreader", "Scanner", " scanener", "canener", "scaninner", "caner", "canreader", "Scaner", "reachreader", "reachener", " Scaner", " scanreader", " scaninner", "scanener", "canner", "scaner", "scanter", " Scanter", "Scaninner", " Scanener", "reachner", " Scanner", " scanter", "Scanter"], "N": ["NH", "Node", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NL", "AN", "NS", "I", "NO", "NP", "NC", "NB", "L", "ND", "V", "TN", "NM", "NG", "NT", "NA", "K", "NE", "n", "EN", "No", "M", "R", "C", "X", "Na"], "T": ["B", "E", "P", "F", "TG", "TM", "S", "G", "TI", "WT", "I", "TT", "W", "ST", "L", "PT", "V", "TN", "TC", "H", "TB", "Y", "TA", "K", "J", "Q", "VT", "TS", "M", "R", "C", "Z", "GT"], "cost": ["check", "fee", "nt", "need", "gross", "tax", "cc", "value", "number", "needed", "ctr", "coin", "driver", "cast", "CO", "goal", "close", "efficient", "good", "diff", "force", "cos", "kind", "price", "charge", "loss", "cf", "Cost", "start", "index", "zero", "match", "cycle", "distance", "score", "count", "efficiency", "draw", "cal", "scale", "rank", "total", "add", "end", "ace", " costs", "left", "rice", "shift", "weight", "power", "co", "const", "length", "type", "last", "stats", "mean", "work", "pro", "max", "tt", "sum", "cp", "find"], "i": ["ii", "phi", "m", "gu", "xi", "me", "j", "sim", "multi", "it", "bi", "init", "hi", "q", "in", "z", "u", "ci", "di", "I", "mi", "ie", "info", "gi", "li", "si", "print", "pi", "ex", "iter", "ti", "v", "cli", "zi", "ui", "ms", "ini", "ai", "us", "n", "ix", "ind", "id", "ip", "y", "is", "x", "batch", "qi", "ki"], "c": ["m", "ct", "cc", "it", "f", "cat", "tc", "u", "ci", "cm", "cs", "k", "ca", "pc", "cf", "cu", "ac", "p", "nc", "cin", "d", "v", "ic", "co", "ce", "dc", "lc", "n", "x", "C", "cn", "l", "cp"], "t": ["ty", "out", "m", "b", "ct", "j", "s", "it", "f", "tc", "at", "k", "dt", "pt", "tp", "p", "ot", "ta", "g", "st", "v", "or", "type", "n", "to", "y", "o", "tt", "l", "te", "tf"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n \\n\t\tint A,B,C,K;\\n\t\tA=sc.nextInt();\\n\t\tB=sc.nextInt();\\n\t\tC=sc.nextInt();\\n\t\tK=sc.nextInt();\\n\t\tint sum=A;\\n\t\tif(A>=K) {\\n\t\t\tsum = K;\\n\t\t}\\n\t\telse if(A+B>=K) {\\n\t\t\tsum=A;\\n\t\t}else {\\n\t\t\tsum=A-(K-A-B);\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t\t\\n\t}\\n}\\n \\n \\n", "target": "56", "substitutes": {"sc": [" Sc", "out", "system", "cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "ec", "cont", "esc", "sync", "Sc", "ctl", "exp", "ch", "osc", "pc", "isc", "sys", "ck", "mc", "scl", "c", "nc", "sci", "sh", "SC", "gc", "inc", "g", "fc", "ctx", "st", "jp", "sv", "scope", "scan", "lc", "sp", "asc", "conv", "cgi", "sch", "anc", "usc", "sec", "sq"], "A": ["AC", "AT", "E", "P", "GA", "LA", "At", "AGE", "AA", "AS", "As", "CA", "Ax", "S", "G", "BA", "RA", "AN", "AI", "AB", "D", "AH", "AST", "API", "L", "SA", "AL", "V", "ASC", "This", "App", "All", "ACC", "H", "AE", "ACT", "AF", "N", "An", "AM", "Av", "AV", "AU", "a", "Y", "T", "NA", "IA", "Alpha", "Array", "AR", "U", "M", "R", "AP"], "B": ["b", "BB", "FB", "Ber", "Rob", "BT", "Blue", "CB", "BM", "BF", "BA", "G", "RB", "AB", "OB", "NB", "BO", "L", "VB", "V", "BY", "EB", "BI", "TB", "N", "BER", "BL", "BS", "IB", "Y", "Bar", "DB", "MB", "Reb", "J", "Other", "GB", "But", "Bern", "BG", "WB", "LB", "BU", "Bi", "BE", "BR", "Bs", "BC"], "C": ["AC", "CON", "Co", "DC", "CCC", "CM", "CA", "Craig", "S", "CG", "G", "CO", "CR", "CS", "Con", "CNN", "D", "Cache", "EC", "CP", "Cu", "JC", "V", "Ca", "IC", "CD", "CN", "WC", "N", "CE", "CT", "Cs", "YC", "CC"], "K": ["KA", "E", "P", "F", "KER", "KI", "UK", "HK", "KE", "SK", "WH", "S", "G", "Sk", "KB", "Kent", "FK", "Power", "I", "k", "Key", "L", "KY", "Sch", "CH", "V", "MN", "KS", "H", "WC", "TH", "N", "MC", "KT", "Kind", "NA", "Ku", "T", "KING", "Kill", "J", "Q", "BC", "M", "R", "KK", "KEY", "KC", "Z", "KR", "X", "CC", "PK", "VK"], "sum": ["cost", "sam", "save", "tu", "um", "term", "system", "sim", "mix", "what", "sa", "test", "cache", "error", "mass", "must", "missing", "dump", "unit", "temp", "set", "cos", "hum", "stack", "loss", "unknown", "result", "zero", "share", "vol", "report", "acc", "match", "si", " SUM", "su", "union", "prefix", "score", "count", "cum", "summary", "subject", "comment", "cal", "trace", "add", "total", "mem", "scale", "process", "num", "state", "us", "average", "alpha", "base", "Sum", "fac", "cmp", "mean", "mm", "global", "hash", "tail", "mod"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tint result = 0;\\n\t\tArrayList<Integer> h = new ArrayList<Integer>();\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\th.add(sc.nextInt());\\n\t\t\tif(h.get(i) >= K) {\\n\t\t\t\tresult++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(result);\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "145", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "rc", "pb", "capt", "cl", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "ctl", "pl", "isc", "osc", "pc", "ch", "sys", "ck", "mc", "scl", "c", "nc", "sci", "sh", "SC", "gc", "inc", "ctx", "fc", "arc", "src", "sv", "co", "nl", "scrib", "dc", "lc", "scan", "sp", "asc", "conv", "cgi", "ctrl", "sch", "sec", "anc", "usc", "syn", "sq"], "N": ["NH", "NN", "Ns", "NI", "Ni", "Num", "NR", "SN", "NL", "NS", "I", "GN", "D", "NO", "CNN", "NP", "NC", "NB", "L", "ND", "V", "TN", "NM", "H", "NT", "KN", "NA", "NF", "NE", "n", "M", "R", "C", "Na"], "K": ["KA", "E", "P", "HK", "KI", "KER", "UK", "KE", "OK", "MAX", "SK", "WH", "S", "G", "KB", "FK", "I", "k", "Key", "V", "Result", "KS", "H", "KN", "T", "J", "KING", "Q", "kk", "KO", "IK", "M", "R", "KK", "ANK", "KEY", "C", "Z", "KR", "PK", "VK"], "result": ["done", "duration", "successful", "message", "feature", "value", "command", "test", "progress", "success", "number", "error", "r", "goal", "continue", "degree", "row", "complete", "our", "diff", "relation", "zero", "counter", "Result", "date", "report", "match", "currency", "status", "score", "count", "draw", "response", "res", "created", "output", "total", "performance", "results", "num", "length", "integer", "unique", "RESULTS", "valid", "ret", "nr", "found"], "h": ["hs", "m", "it", "uh", "hi", "q", "r", "oh", "hm", "ph", "history", "hd", "k", "th", "enh", "kh", "ah", "ch", "hh", "he", "eh", "has", "hz", "sh", "H", "hw", "hr", "rh", "ih", "w", "ht", "ha", "hl", "n", "bh", "hp", "hex", "ho", "dh", "hash"], "i": ["ii", "phi", "m", "xi", "j", "multi", "ri", "init", "bi", "it", "ji", "hi", "q", "in", "z", "u", "ci", "di", "I", "k", "mi", "gi", "index", "li", "ei", "si", "pi", "ti", "v", "a", "io", "cli", "ui", "ini", "ic", "ai", "us", "\u0438", "iu", "ind", "ix", "id", "ip", "y", "o", "is", "uri", "x", "im", "ori", "l", "qi", "ki"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.*;\\n\\npublic class Main {\\n\tint mod = 1000000007;\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tout = new PrintWriter(new BufferedOutputStream(System.out));\\n\t\tint a=sc.nextInt();\\n\t\tint b=sc.nextInt();\\n\t\tint c=sc.nextInt();\\n\t\tint x=sc.nextInt();\\n\t\tint y=sc.nextInt();\\n\t\tint ans=a*x+b*y;\\n\t\tint n=1;\\n\t\twhile(a*Math.max(0,(x-n))+b*Math.max((y-n),0)+2*n*c<=ans) {\\n\t\t\tans=a*Math.max(0,(x-n))+b*Math.max((y-n),0)+2*n*c;\\n\t\t\tn++;\\n\t\t}\\n\t\tout.println(ans);\\n\t\tout.close();\\n\t}\\n\\n\t// ----------------------------------------------------------\\n\tstatic int l_min(int[] a) {\\n\t\tArrays.sort(a);\\n\t\treturn a[0];\\n\t}\\n\\n\tstatic int l_max(int[] a) {\\n\t\tint l = a.length;\\n\t\tArrays.sort(a);\\n\t\treturn a[l - 1];\\n\t}\\n\\n\tstatic int gcd(int a, int b) {\\n\t\tif (a == 0) {\\n\t\t\treturn b;\\n\t\t}\\n\t\treturn gcd(b % a, a);\\n\\n\t}\\n\\n\tpublic static PrintWriter out;\\n\\n}\\n\\nclass UnionFind {\\n\tint parent[];\\n\tint rank[];\\n\tint size[];\\n\\n\tUnionFind(int n) {\\n\t\tparent = new int[n];\\n\t\trank = new int[n];\\n\t\tsize = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tparent[i] = i;\\n\t\t\trank[i] = 0;\\n\t\t\tsize[i] = 1;\\n\t\t}\\n\t}\\n\\n\tvoid union(int x, int y) {\\n\t\tint xRoot = find(x);\\n\t\tint yRoot = find(y);\\n\\n\t\tif (xRoot != yRoot) {\\n\\n\t\t\tif (rank[xRoot] > rank[yRoot]) {\\n\t\t\t\tparent[yRoot] = xRoot;\\n\t\t\t\tsize[xRoot] += size[yRoot];\\n\\n\t\t\t} else if (rank[xRoot] < rank[yRoot]) {\\n\t\t\t\tparent[xRoot] = yRoot;\\n\t\t\t\tsize[yRoot] += size[xRoot];\\n\\n\t\t\t} else {\\n\t\t\t\tparent[yRoot] = xRoot;\\n\t\t\t\trank[xRoot]++;\\n\t\t\t\tsize[xRoot] += size[yRoot];\\n\t\t\t}\\n\t\t}\\n\\n\t}\\n\\n\tint find(int x) {\\n\t\tif (parent[x] == x) {\\n\t\t\treturn x;\\n\t\t} else {\\n\t\t\treturn find(parent[x]);\\n\t\t}\\n\\n\t}\\n\\n\tboolean same(int x, int y) {\\n\t\treturn find(x) == find(y);\\n\t}\\n\\n}\\n\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "125", "substitutes": {"mod": ["m", " max", "rc", " scale", " rc", " C", "ac", " m", " e", "Mod", " Mod", "dc", "base", "max", "fac"], "sc": [" Sc", "syn", "cc", "tc", "cr", "ss", "rc", "pb", "cl", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", " SC", "psc", "mc", "p", "nc", "sci", "scl", "si", "SC", "gc", "inc", "fc", "ctx", "nl", "dc", "lc", "sp", "cmp", "asc", "cgi", "conv", "ctrl", "sch", "sec", "usc", "irc", "sq"], "out": ["check", "aos", "it", "error", "net", "in", "r", "OUT", "file", "ln", "set", "at", "t", "ou", "outs", "lock", "os", "outer", "info", "println", "go", "ch", "result", "std", "conn", "sys", "Out", "log", "list", "null", "p", "print", "conf", "obj", "write", "txt", "w", "res", "d", "v", "io", "output", "name", "input", "all", "screen", "scan", "dis", "to", "flush", "ent", "o", "writer", "sum", "err", "ut", "gt", "nt"], "a": ["aaa", "act", "aff", "apa", "la", "oa", "sa", "i", "e", "aq", "admin", "r", "z", "am", "era", "t", "at", "A", "au", "area", "ab", "ca", "anta", "ax", "ma", "p", "ac", "ao", "ba", "af", "ea", "ta", "an", "aa", "d", "ia", "aj", "ar", "ga", "ai", "as", "access", "alpha", "ra", "pa", "va", "ach", "al", "l", "ae"], "b": ["B", "m", "eb", "ob", "j", "br", "i", "e", "bi", "f", "ub", "bf", "r", "be", "z", "u", "fb", "sb", "by", "bc", "bs", "lib", "ab", "zb", "ib", "gb", "cb", "abb", "bis", "beta", "bg", "bb", "p", "ba", "db", "rb", "nb", "g", "bp", "v", "mb", "abc", "big", "bu", "o", "l", "erb"], "c": ["m", "h", "ct", "con", "cc", "e", "cat", "f", "cache", "tc", "cr", "r", "z", "u", "ci", "ec", "bc", "cs", "t", "cm", "cos", "cb", "ca", "ch", "cf", "cu", "ac", "p", "nc", "mc", "gc", "w", "g", "d", "v", "fc", "cin", "cal", "etc", "ic", "co", "dc", "ce", "lc", "o", "unc", "C", "cn", "l", "cp"], "x": ["m", "h", "xi", "rx", "j", "xp", "ct", "i", "e", "xs", "dx", "ox", "z", "mx", "time", "t", "xxx", "tx", "lat", "xml", "ux", "on", "xy", "ax", "p", "en", "xa", "ex", "data", "_", "w", "ctx", "d", "v", "name", "yx", "xf", "xt", "xx", "ix", "xc", "hex", "px", "fx", "l", "X", "wx"], "y": ["ty", "m", "uy", "yer", "j", "ny", "axy", "yet", "i", "e", "ies", "wy", "ye", "ya", "z", "yt", "yi", "iy", "t", "py", "ch", "sky", "on", "xy", "ym", "ay", "p", "ys", "g", "v", "Y", "my", "ey", "yo", "cy", "yy", "sy", "xx", "ry", "ly", "o", "l", "yk"], "ans": ["uns", "rs", "s", "oa", "nan", "ats", "aos", "xs", "ings", "ann", "nn", "ians", "vals", "ens", "ones", "cs", "aus", "outs", "acs", "anas", "os", "offs", "eds", "aps", "gs", "ks", "ins", "an", "lines", "cons", "ions", "ars", "names", "ms", "ents", "as", "ns", "ows", "arms", "ants", "ids", "ons", "yes", "ates", "ds", "na", "ps", "nets", "vers", "arts", "users", "ls", "ANS", "nes", "amps", "ints", "olds", "ads"], "n": ["ng", "m", "norm", "j", "s", "nan", "i", "it", "init", "nn", "ren", "number", "fn", "q", "net", "z", "ln", "ed", "t", "nr", "k", "pn", "node", "ne", "mn", "ll", "on", "ni", "nm", "en", "len", "nc", "gn", "note", "N", "nor", "p", "an", "w", "nb", "g", "v", "d", "nu", "name", "normal", " N", "ic", "ns", "num", "un", "nl", "sn", "nw", "na", "o", "dn", "cn", "like", "l", "not", "nt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint d = sc.nextInt();\\n\t\tint e = sc.nextInt();\\n\\n\t\tint a1 = a % 10;\\n\t\tint b1 = b % 10;\\n\t\tint c1 = c % 10;\\n\t\tint d1 = d % 10;\\n\t\tint e1 = e % 10;\\n\\n\t\tint a10 = a;\\n\t\tif(a%10 != 0) {\\n\t\t\ta10 = (a/10 + 1) * 10;\\n\t\t}\\n\t\tint b10 = b;\\n\t\tif(b%10 != 0) {\\n\t\t\tb10 = (b/10 + 1) * 10;\\n\t\t}\\n\t\tint c10 = c;\\n\t\tif(c%10 != 0) {\\n\t\t\tc10 = (c/10 + 1) * 10;\\n\t\t}\\n\t\tint d10 = d;\\n\t\tif(d%10 != 0) {\\n\t\t\td10 = (d/10 + 1) * 10;\\n\t\t}\\n\t\tint e10 = e;\\n\t\tif(e%10 != 0) {\\n\t\t\te10 = (e/10 + 1) * 10;\\n\t\t}\\n\t\tint last = a;\\n\t\tint last1 = a1;\\n\t\tint last10 = a10;\\n\t\tint other = b10 + c10 + d10 + e10;\\n\\n\t\tif(b1 != 0 && b1 < last1) {\\n\t\t\tlast = b;\\n\t\t\tlast1 = b1;\\n\t\t\tother = other - b10 + last10;\\n\t\t\tlast10 = b10;\\n\t\t}\\n\t\tif(c1 != 0  && c1 < last1) {\\n\t\t\tlast = c;\\n\t\t\tlast1 = c1;\\n\t\t\tother = other - c10 + last10;\\n\t\t\tlast10 = c10;\\n\t\t}\\n\t\tif(d1 != 0 && d1 < last1) {\\n\t\t\tlast = d;\\n\t\t\tlast1 = d1;\\n\t\t\tother = other - d10 + last10;\\n\t\t\tlast10 = d10;\\n\t\t}\\n\t\tif(e1 != 0 && e1 < last1) {\\n\t\t\tlast = e;\\n\t\t\tother = other - e10 + last10;\\n\t\t}\\n\\n\t\tSystem.out.println(other + last);\\n\t}\\n\\n}", "target": "63", "substitutes": {"sc": [" Sc", "system", "cc", "tc", "ss", "rc", "cl", "sb", "bc", "cs", "ec", "ok", "desc", "esc", "cont", "sync", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", "ck", "ner", "mc", "scl", "nc", "sci", "sh", "acc", "si", "SC", "gc", "inc", "txt", "g", "ctx", "sv", "scope", "lc", "scan", "sp", "cmp", "asc", "conv", "cgi", "ctrl", "sch", "anc", "sec", "usc", "syn", "sq"], "a": ["act", "aaa", "apa", "la", "oa", "ap", "sa", "i", "aq", "da", "r", "am", "abs", "u", "era", "z", "\u00e1", "at", "t", "A", "au", "area", "ab", "ca", "er", "ma", "app", "ac", "p", "ao", "ba", "ea", "aka", "ta", "an", "aa", "g", "ia", "aj", "ar", "ga", "all", "ai", "as", "alpha", "n", "pa", "va", "o", "ach", "aria", "x", "al", "l", "ae", "fa"], "b": ["B", "m", "ob", "j", "s", "bo", "br", "i", "bl", "bi", "f", "bf", "r", "be", "sb", "u", "fb", "by", "z", "bs", "bc", "t", "lib", "ab", "ib", "cb", "gb", "bis", "bg", "bb", "back", "p", "ba", "db", "rb", "nb", "g", "v", "bar", "bt", "n", "y", "l", "wb"], "c": ["ct", "con", "cc", "cat", "f", "cr", "tc", "rc", "r", "cl", "u", "cv", "ci", "ec", "bc", "cs", "cd", "cm", "t", "com", "cb", "ca", "ch", "pc", "enc", "cf", "cur", "cu", "uc", "ac", "p", "gc", "fc", "arc", "cor", "co", "dc", "ce", "lc", "n", "cmp", "ctrl", "C", "cn", "col", "l", "cp", "car", "comp"], "d": ["done", "m", "fd", "da", "r", "dr", "dos", "u", "ed", "nd", "dict", "cd", "dd", "D", "t", "di", "dec", "dt", "dev", "od", "dq", "md", "dp", "bd", "p", "db", "ad", "data", "draw", "g", "end", "pd", "df", "dc", "dir", "de", "div", "dat", "n", "days", "ds", "deb", "def", "sd", "o", "del", "dh", "l", "red", "dis"], "e": ["\u00e9", "eg", "E", "m", "ef", "me", "eb", "pe", "xe", "eu", "ev", "i", "it", "f", "em", "eur", "error", "r", "u", "ed", "ec", "t", "el", "exp", "ie", "se", "ne", "er", "p", "en", "ue", "ei", "ex", "le", "element", "w", "g", "end", "east", "eff", "ee", "eps", "oe", "ce", "de", "et", "n", "err", "ent", "o", "one", "x", "es", "l", "te", "ae", "ge"], "a1": ["aa10", "ea11", "a5", "e11", "ba0", "a11", "ba001", "ea5", "aa1", " a0", "ba1", "e5", "c81", "ea1", "ba81", "aa11", "aa5", "a001", "ea10", "a81", " a001", "c0", "a0", "c001", " a81"], "b1": ["ba101", "c9", "d101", "e11", "ba0", "bPref", "bb0", "c91", "bb91", "ab11", "d0", "ab10", "ba1", "c11", "e9", "b11", " b101", "b0", "b2", "c2", " b91", "b9", "dPref", "bb1", " bPref", "e0", "baPref", "ab9", "e2", "b101", "b91", "c0", "a0", " b0", "a2", "ab1"], "c1": ["c9", "eOne", "ca1", "b001", "e11", "k001", "co9", "ceons", "dons", "bOnce", " c11", "c11", "cOnce", "cOne", "ca001", "b11", "coOnce", "u1", "u001", "uOne", "cons", "ce10", "k1", "b9", "cr9", "kOne", " cOne", "d001", "ce001", "cr1", "ce1", "co1", "ca10", "caons", "bOne", "crOnce", "c001"], "d1": ["div1", "d2", "ad1", " dOne", "eOne", "c01", "e4", "r01", "dOne", "tOne", "z51", "t4", "p1", "cOne", " d2", "divOne", " d51", "e51", "zMon", "eMon", "d4", "t1", "z2", "p001", "d51", "d001", " dMon", "pOne", "e01", "r1", "ad01", " d4", "div001", "e2", "dMon", "d01", "t01", "z1", "c001", " d01"], "e1": ["e7", " e2", "eOne", "ee7", "e3", "el001", "eaInit", "o001", "o0", "aOne", "ee0", "oOne", "ee1", "el3", " e7", "elOne", "eaOne", "o1", "eInit", "ea1", "eeOne", " eOne", "a001", " e0", "ee2", "o7", "el1", " e3", "e001", "e0", "eeInit", "e2", "a3", "ee3", "ea2", " eInit", "o3"], "a10": ["x90", "ca090", " a1000", "an090", "x110", "as090", "as110", "alphaTen", "alpha8", "alpha10", " a110", "an1000", "c090", "caTen", "x090", "an110", "c90", "a1000", "an10", "x10", "ca110", "c110", "as1000", "ca90", " aTen", "ca10", " a8", "a90", "a8", " a090", "aTen", "alpha090", "as10", "a110", "ca8", "a090"], "b10": ["B10", "B90", " b30", "d101", "a11", "e090", "bbten", "aDR", "cb090", "mb11", " bten", "cDR", "bbDir", "bten", "e110", "bc30", "cDir", "mbten", " b11", "bb090", "sb090", "c11", "bc11", "d090", "b11", "cb10", "bb11", "c090", "bcten", "bb110", "b090", "bc10", "c90", "b30", "bDR", "a101", "d90", "eten", "B11", "bDir", "sb90", "bb10", "sb10", "mb10", "cbDir", "b110", "a90", "cb11", "c101", "b101", "mb30", "dten", "d110", "sb11", "B090", "b90", "dDR", "a090"], "c10": ["cr10", "cu110", "cu1000", "c20", "cp00", "dc110", "a11", "e090", "cu090", "dc090", "dc11", "ec10", "ecTen", "eTen", "cr1000", "dc14", "cp090", "d14", "c11", "d090", "e20", "dc10", " cTen", "cp1000", "c00", "cp110", "dTen", "d11", "c1000", "ec090", "c14", "cTen", "d00", "c100", "dc00", "e100", "a14", "cp10", "c110", "cr110", "cp11", "a090", " c090", "cu10", "cr090", "d110", "c090", "ec20", "d20", "ec100", " c100"], "d10": ["cten", "sd10", "da2010", "dtT", "sd90", "da11", "e090", "g090", "dt090", "n11", "sdten", " d090", "sd090", "da090", "dat10", "md10", "dat2010", "dt10", "c11", "d090", "sd11", "n110", "b11", "dat090", "dat11", " d15", "c090", "g110", "d15", "d11", "b090", "dT", "c90", "eT", "d90", "d2010", "e15", "c110", "n10", "md90", "b110", "da10", "dt15", "mdten", "g10", " d11", "da110", "md090", "dten", "d110", "n090", "sd2010", " d110", " dT", "g11"], "e10": ["ec80", "et10", "et110", "ee090", "e11", "e090", "a11", "eAfter", "a15", "n11", "n15", "o090", "eu1027", "ec10", "oAfter", "eMax", "e110", "eu090", "et90", " eMax", "e90", "i090", "d090", "ec1027", "i80", " e090", "eu10", "ee110", "d11", "exp10", "d15", "ec090", "i1027", "d90", " eAfter", "ee90", "eu80", "e15", "e1027", "ee10", "exp090", "n10", "oMax", "expMax", "e80", "et090", "i10", "d110", "o10", "n090", "expAfter", "a090"], "last": ["prev", "vious", "show", "it", "str", "error", "dest", "z", "real", "cast", "sort", "ast", "close", "empty", "use", "good", "so", "bottom", "start", "first", "list", "next", "back", "est", "slave", "code", "query", "send", "latest", "ist", "local", "le", "root", "tail", "st", "end", "style", "scale", "server", "best", "total", "left", "all", "self", "scope", "handle", "global", "second", "base", "worst", "id", "flush", "rest", "las", "max", "old", "l", "Last", "stable", "master"], "last1": ["last11", "slaveOnce", " last81", "latest2", "lastOnce", "nextOne", "next1", "last0", "ast1", " last0", "Last1", "close01", "first11", "slave7", "first01", "worst81", "est1001", "worst01", "ast0", "stage1001", "last2", "stageOnce", "stOne", "slaveOne", " lastOne", "firstone", "first1", "closeone", "closeOne", "nextOnce", "stable1", "worst1", "LastOne", "firstOne", "stable81", "next0", "stable01", "slave11", "first2", "stage7", " lastone", "est1", "last81", "last1001", "last7", "lastone", " last11", "latest01", "estOnce", " last01", " lastOnce", "slave1001", "Last0", "stableOne", "last01", " last2", "latestone", "lastOne", "st1", "est7", "slaveone", "Last01", "latest1", "slave1", "close1", "astOne", "stage1", "worstOne", "st0", "ast01", "latestOne", "stOnce"], "last10": ["old12", "last12", "final0", "pretty11", "final0010", "last11", "old10", "pretty0010", "worst090", " last0010", "pretty0", "max1", "last090", "end11", "last90", "std10", "end90", "old90", "old0", "good11", "other11", "max90", "first10", "astTen", "good10", "worst11", "max11", "other10", "ast11", "other090", " last9", "first0", "first12", "last0010", "last0", "good90", "old1", "last110", "final12", "pretty10", "finalTen", "final11", " last0", "max10", "maxTen", "std110", " last090", " last11", "old11", "first11", "end12", "good12", " lastTen", "lastTen", "last9", "worst10", " last110", "stdTen", "old110", "oldTen", "std11", "final10", "end10", "ast10", "ast90", "firstTen", "other9", "worst9"], "other": ["message", "http", "same", "Others", "outer", "also", "er", "bor", "related", "special", "no", "more", "or", "second", "OTHER", "non", "one", "better", "shared", "number", "user", "empty", "altern", "result", "actor", "external", "back", "part", "some", "union", "local", "output", "total", "different", "Other", "illegal", "oe", "worst", "oot", "initial", "global", "how", "mix", "thing", "tmp", "error", "full", "real", "original", "rel", "ror", "another", "server", "follow", "common", "owner", "o", "older", "wrong", "extra", " Other", "fake", "ne", "unknown", "inner", "iter", "item", "raw", "left", "smart", "either", "base", "very", "odd", "old", "not"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt(), M = sc.nextInt(), total=0;\\n    int A[] = new int[M];\\n    for(int i=0; i<M; i++) {\\n      A[i] = 0;\\n    }\\n    \\n    for(int j=0; j<N; j++) {\\n      int L = sc.nextInt();\\n      for(int k=0; k<L; k++) {\\n        int f = sc.nextInt();\\n        A[f-1] ++;\\n      }\\n    }\\n    \\n    for(int l=0; l<M; l++) {\\n      if(A[l] == N) {\\n        total++;\\n      }\\n    }\\n    System.out.println(total);\\n  }\\n}", "target": "169", "substitutes": {"sc": [" Sc", "system", "cc", "cle", "tc", "cr", "capt", "rc", "ss", "cl", "sb", "bc", "cs", "ec", "desc", "cont", "esc", "sync", "Sc", "ctl", "dec", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "sw", "inc", "fc", "ctx", "sv", "dc", "scan", "lc", "sp", "ser", "asc", "conv", "cgi", "sch", "sec", "usc", "sq"], "N": ["B", "NH", "E", "P", "F", "NN", "NI", "Ni", "S", "NR", "SN", "G", "NL", "NS", "I", "D", "NO", "NP", "W", "NC", "NB", "ND", "V", "TN", "NM", "MN", "H", "NT", "Total", "NA", "Y", "T", "K", "J", "Q", "n", "R", "C", "Z", "X"], "M": ["DM", "B", "E", "m", "P", "F", "MX", "MAN", "RM", "MM", "S", "G", "LM", "MO", "I", "D", "MP", "MA", "V", "MIT", "NM", "MN", "H", "MC", "T", "K", "IM", "J", "Q", "MT", "MS", "U", "MI", "R", "ME", "C", "Z", "O", "My"], "total": ["done", "important", "current", "system", "blank", "bo", "full", "number", "otal", "t", "complete", "human", "this", "everything", "info", "pretty", "unknown", "result", "zero", "you", "counter", "note", "local", "count", "Total", "summary", "other", "trace", "created", "normal", "no", "all", "eta", "num", "length", "equal", "n", "unique", "stats", "max", "size", "database", "sum", "physical", "global", "meta", "reported", "general", "quant"], "A": ["AC", "B", "AT", "What", "P", "GA", "LA", "At", "AA", "CA", "S", "As", "BA", "mA", "AB", "I", "W", "SA", "MA", "V", "AL", "VA", "Answer", "All", "H", "ACT", "AF", "AM", "An", "AU", "a", "NA", "HA", "T", "TA", "K", "AMA", "IA", "Alpha", "ARC", "WA", "Array", "JA", "AR", "U", "ATA", "C", "PUT", "EA", "AP"], "i": ["ii", "phi", "xi", "inter", "sim", "ri", "init", "bi", "it", "ji", "hi", "q", "ims", "ci", "iso", "t", "di", "I", "mi", "ie", "info", "gi", "ir", "li", "ei", "si", "print", "inner", "pi", "iq", "ti", "ia", "ij", "zi", "ui", "ini", "ai", "ic", "us", "iu", "ix", "id", "ip", "y", "is", "im", "oi", "ori", "ami", "qi", "ki"], "j": ["oj", "b", "ja", "br", "bo", "ji", "jj", "jc", "q", "r", "z", "uj", "bj", "bs", "jump", "att", "ne", "json", "pt", "pr", "off", "kj", "jl", "obj", "jo", "g", "v", "aj", "jp", "ij", "J", "dj", "jas", "n", "sp", "ind", "js", "y", "x", "im", "ret", "job", "ge"], "L": ["B", "E", "P", "F", "LOC", "LA", "LL", "LO", "LIN", "LG", "S", "NL", "LM", "LT", "I", "D", "LV", "W", "Lu", "V", "GL", "H", "CL", "BL", "LU", "T", "SL", "K", "LE", "Lo", "J", "TL", "LI", "C", "dL", "Le"], "k": ["mk", "unk", "dk", "sk", "ke", "ik", "ko", "q", "kn", "z", "kt", "kr", "km", "ok", "ph", "wk", "kh", "kind", "ak", "ck", "kj", "uk", "kid", "kl", "ka", "ks", "ku", "K", "ijk", "kk", "kan", "kw", "kernel", "kg", "isk", "key", "ek", "tk", "ki"], "f": ["offset", "family", "b", "fd", "m", "F", "h", "fi", "lf", "ki", "ft", "bf", "kn", "u", "life", "km", "t", "cf", "fe", "kj", "tf", "fp", "point", "c", "print", "kl", "of", "kat", "fc", "v", "rf", "kw", "key", "func", "fo", "fac", "fa", "ff"], "l": ["fl", "label", "m", "b", "la", "lf", "lu", "il", "lin", "tl", "ul", "lo", "loc", "r", "z", "ml", "u", "ln", "t", "el", "ld", "lock", "lp", "pl", "isl", "lb", "ll", "loop", "line", "log", "list", "li", "kl", "jl", "lit", "le", "g", "v", "sl", "hl", "lv", "nl", "lc", "n", "lt", "dl", "ls", "o", "ell", "al"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc=new Scanner(System.in);\\n        String S=sc.next();\\n        int[] A=new int[4];\\n        A[0]=Character.getNumericValue(S.charAt(0));\\n        A[1]=Character.getNumericValue(S.charAt(1));\\n        A[2]=Character.getNumericValue(S.charAt(2));\\n        A[3]=Character.getNumericValue(S.charAt(3));\\n        \\n        int ans=A[0];\\n        \\n        for(int i=0;i<(1<<3);i++){\\n            for(int j=0;j<3;j++){\\n                if((1&(i>>j))==1){\\n                    ans+=A[j+1];\\n                }else{\\n                    ans-=A[j+1];\\n                }\\n            }\\n            \\n            if(ans==7){\\n                System.out.print(A[0]);\\n                for(int j=0;j<3;j++){\\n                    if((1&(i>>j))==1){\\n                        System.out.print(\"+\"+A[j+1]);\\n                    }else{\\n                        System.out.print(\"-\"+A[j+1]);\\n                    }\\n                }\\n                System.out.println(\"=7\");\\n                break;\\n            }\\n            \\n            ans=A[0];\\n        }\\n    }\\n}", "target": "152", "substitutes": {"sc": [" Sc", "system", "s", "cc", "cle", "ss", "tc", "cr", "capt", "rc", "r", "cl", "bc", "cs", "sac", "desc", "ec", "esc", "sync", "Sc", "se", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "c", "nc", "sci", "SC", "gc", "sv", "scan", "RC", "sp", "asc", "Capt", "C", "sch", "anc", "sec", "usc", "Sync", "sq"], "S": ["B", "SM", "P", "s", "STR", "SEC", "Source", "DS", "SN", "G", "Str", "CS", "SO", "NS", "I", "SER", "ST", "L", "SA", "V", "ASC", "SF", "RS", "SE", "SI", "SP", "Sing", "N", "SC", "BS", "Si", "T", "SL", "SQL", "SU", "ASS", "SR", "SS", "SAN", "SH", "SOURCE", "TS", "M", "R", "GS", "RAW", "C", "SAM", "SB", "X", "IS"], "A": ["AT", "B", "AC", "What", "P", "GA", "LA", "At", "OA", "AA", "CA", "As", "BA", "G", "AN", "AI", "mA", "I", "AB", "Action", "API", "SA", "AL", "V", "MA", "Add", "This", "And", "PA", "App", "Answer", "All", "ACC", "RAM", "AE", "ACT", "N", "AF", "An", "AM", "AV", "AU", "Av", "a", "NA", "One", "HA", "Average", "Area", "ACE", "Ar", "Art", "Australia", "IA", "ANG", "Rules", "Added", "WA", "Array", "JA", "AR", "M", "Alice", "You", "ATA", "The", "C", "Entry", "ICA", "EA", "AP", "Address"], "ans": ["uns", "posts", "rs", "checks", "can", "ats", "rans", "aos", "ings", "xs", "ann", "vals", "lan", " means", "ens", "ands", "aus", "AN", "outs", "acs", "os", " weights", "ums", "ags", "lets", "anes", "offs", "aps", "anks", "ks", "ins", "an", "aces", "ais", "ros", "cons", "ions", "ars", "names", "ms", "ents", "orts", "ns", " scans", "as", "ants", "flags", "ows", "ids", "mas", "ons", "ates", "yes", "vers", "arts", "ls", "ANS", "ports", "amps", "ations", "actions"], "i": ["ii", "phi", "m", "xi", "ri", "multi", "it", "ji", "bi", "init", "hi", "in", "by", "u", "ci", "iat", "at", "di", "I", "mi", "ie", "gi", "li", "si", "pi", "ti", "g", "ia", "a", "v", "io", "ij", "zi", "ui", "ini", "ai", "ic", "iu", "ix", "id", "ip", "y", "im", "oi", "l", "ami", "qi", "ki"], "j": ["ng", "jet", "oj", "b", "adj", "og", "ja", "br", "it", "ji", "jj", "jc", "ev", "bo", "f", "q", "str", "z", "by", "user", "uj", "bj", "bs", "at", "el", "di", "k", "jump", "att", "jit", "kh", "json", "gov", "je", "pt", "pr", "kj", "prop", "off", "ax", "kid", "note", "ot", "jl", "obj", "jo", "g", "bot", "v", "other", "aj", "jp", "ij", "dj", "J", "__", "state", "tr", "tree", "ix", "fr", "ind", "js", "y", "key", "im", "ion", "err", "job"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static Scanner scanner = new Scanner(System.in);\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tStringBuilder text = new StringBuilder(input());\\n\t\ttext.reverse();\\n\t\tSystem.out.println(text);\\n\\n\t\tclose();\\n\\n\t}\\n\\n\tpublic static String input() {\\n\\n\t\treturn scanner.nextLine();\\n\\n\t}\\n\\n\tpublic static void close() {\\n\\n\t\tif (scanner != null) {\\n\\n\t\t\tscanner.close();\\n\\n\t\t}\\n\t}\\n}", "target": "237", "substitutes": {"scanner": ["canter", " scaner", "caninner", "Scanener", "Scanner", " scanener", "canener", "canator", "scanator", "scaninner", "caner", "Scaner", " scanator", " scaninner", "canner", "scanener", "scanter", "scaner", "Scaninner", " scanter", "Scanator", "Scanter"], "text": ["message", "out", "term", "msg", "string", "ct", "binary", "math", "char", "value", "str", "select", "t", "cont", "format", "read", "tx", "ext", "TEXT", "content", "buffer", "line", "log", "next", "title", "code", "print", "quick", "inner", "template", "comment", "txt", "buff", "late", "output", "name", "config", "input", "left", "Text", "hidden", "length", "image", "object", "word", "translation", "def", "writer", "key", "old", "nt"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in=new Scanner(System.in);\\n\t\tint n=in.nextInt(), k = in.nextInt();\\n\t\tint[] a=new int[n];\\n\t\tfor (int i=0;i<n;++i) a[i]=in.nextInt();\\n\t\tint[] dp = new int[n];\\n        dp[1] = Math.abs(a[1] - a[0]);\\n\t\tfor (int i=2;i<n;++i) {\\n          dp[i] = dp[i-1] + Math.abs(a[i] - a[i-1]);\\n          for(int j = 2; j <=k; j++) {\\n            if(i - j < 0) {\\n              break;\\n            }\\n            dp[i] = Math.min(dp[i], dp[i-j] + Math.abs(a[i] - a[i-j]));\\n          }\\n\t\t}\\n\t\tSystem.out.println(dp[n-1]);\\n\t}\\n}", "target": "241", "substitutes": {"in": ["serv", "per", "out", "m", "In", "inf", "con", "isin", "can", "init", "doc", "run", " din", "r", "file", "ln", "user", "by", "rin", "reader", "vin", "IN", "info", "std", "conn", "from", "line", "gin", "en", "ins", "inner", "conf", "pi", "inn", "inc", "sin", "cin", "d", "get", "io", "add", "input", "world", "all", "bin", "ini", "thin", "scan", "nin", "err", "ind", "readable", "id", "mm", "din", "conv", "cgi", "is", "source", "sum", "l", "rt"], "n": ["ng", "out", "m", "nan", "nn", "number", "net", "r", "z", "ln", "u", "t", "nr", "ne", "mn", "network", "ll", "on", "ni", "nm", "en", "p", "np", "c", "nc", "N", "count", "an", "nb", "d", "no", "v", "name", "nu", "all", "num", "ns", "nl", "sn", "na", "o", "x", "cn", "l", "nt"], "k": ["mk", "unk", "m", "dk", "sk", "ke", "ik", "ko", "q", "kn", "z", "u", "kr", "km", "ok", "kh", "ak", "kick", "ck", "p", "c", "ka", "kl", "ks", "w", "ku", "K", "kk", "kw", "key", "ek", "tk", "ki"], "a": ["aaa", "act", "b", "m", "sta", "apa", "changes", "oa", "s", "ap", "la", "sa", "eas", "f", "da", "am", "u", "wa", "at", "t", "A", "au", "area", "att", "ab", "go", "ca", "ma", "app", "ac", "p", "ba", "ao", "ea", "xa", "c", "ta", "an", "data", "aa", "ack", "ia", "v", "ar", "g", "ata", "d", "ga", "eta", "as", "ai", "aux", "alpha", "pa", "now", "na", "to", "va", "o", "ae"], "i": ["ji", "hi", "q", "ci", "iso", "mi", "li", "v", "name", "ij", "ui", "ini", "ai", "us", "ix", "m", "multi", "bi", "f", "at", "ei", "status", "pi", "cli", "zi", "id", "y", "uri", "asi", "im", "l", "ami", "ity", "ii", "um", "ri", "init", "di", "info", "gi", "index", "si", "ti", "io", "\u0438", "ind", "ip", "ir", "qi", "phi", "xi", "me", "sim", "s", "it", "ims", "u", "iii", "I", "this", "ie", "p", "inner", "ex", "iter", "g", "ia", "item", "ic", "iu", "is", "x", "batch"], "dp": ["decl", "dk", "bsp", "dial", "dm", "pb", "dr", "resp", "cd", "di", "dd", "ph", "pm", "lp", "dt", "dq", "vp", "dep", "pt", "DP", "pkg", "pipe", "du", "tp", "p", "np", "drop", "db", "d", "jp", "delay", "pd", "td", "adr", "dj", "gp", "df", "wd", "dc", "pa", "ds", "wp", "deb", "dl", "ps", "def", "hp", "dh", "pp", "cp", "fp"], "j": ["oj", "b", "m", "s", "ja", "br", "it", "ji", "jj", "bi", "jc", "e", "q", "z", "uj", "bj", "ed", "bs", "di", "jump", "jit", "kh", "json", "ne", "pt", "pr", "kj", "off", "er", "ot", "jl", "obj", "jo", "g", "other", "v", "aj", "res", "ij", "jp", "dj", "J", "us", "jas", "tr", "sp", "fr", "js", "y", "o", "key", "one"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tString input = br.readLine();\\n\t\tString s = input + input.substring(0, input.length()-1);\\n\t\tString p = br.readLine();\\n\t\tif (s.indexOf(p) > -1) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "198", "substitutes": {"br": ["bridge", "b", "Br", "shr", "bl", "bi", "cr", "bf", "r", "dr", "kr", "bs", "bc", "buf", "nr", "rel", "cb", "gb", "ch", "pr", "bb", "next", "bd", "ro", "ba", "bm", "hr", "db", "rb", "bp", "bro", "jp", "adr", "gr", "vr", "bt", "yr", "div", "tr", "fr", "bn", "ber", "wr", "browser", "err", "rem", "mr", "BR"], "input": ["current", "out", " Input", "got", "html", "context", "i", "init", "command", "str", "q", "in", "expression", "focus", "empty", "history", "row", "feed", "this", "before", "xml", "qa", "unknown", "start", "accept", "from", "index", "buffer", "list", "null", "query", "print", "form", "prefix", "request", "argument", "data", "output", "name", "config", "path", "raw", "shift", "active", "Input", "text", "base", "n", "table", "pattern", "ip", "source", "reset", "initial", "PUT", "arg"], "s": ["rs", "b", "h", "m", "string", "ats", "sa", "ies", "spe", "i", "f", "str", "ss", "S", "sb", "bs", "cs", "parts", "t", "os", "so", "se", "gs", "sh", "c", "ins", "ys", "w", "g", "v", "strings", "items", "sv", "ms", "sl", "ns", "n", "sp", "ps", "js", "sd", "ls", "ts", "es", "l"], "p": ["per", "m", "P", "pe", "j", "ap", "rep", "par", "q", "t", "ph", "pin", "pm", "pl", "ping", "vp", "pc", "pt", "pr", "pkg", "pre", "np", "pi", "g", "bp", "jp", "n", "pai", "pa", "sp", "ps", "pro", "post", "pp", "cp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\tString input = scanner.nextLine();\\n\\n\t\tString AB[] = input.split(\" \");\\n\\n\t\tint A = Integer.parseInt(AB[0]);\\n\\n\t\tint B = Integer.parseInt(AB[1]);\\n\\n\t\tint[] result = new int[3];\\n\\n\t\tresult[0] = A + B;\\n\\n\t\tresult[1] = A - B;\\n\\n\t\tresult[2] = A * B;\\n\\n\t\tint max = result[0];\\n\\n\t\tfor (int i:result){\\n\t\t\tif(i > max) {\\n\t\t\t\tmax = i;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(max);\\n\t}\\n\\n}", "target": "188", "substitutes": {}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.InputMismatchException;\\nimport java.util.LinkedList;\\nimport java.util.PriorityQueue;\\nimport java.util.TreeSet;\\n \\n \\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    InputReader sc = new InputReader(System.in);\\n \\n \\n    int n = sc.nextInt();\\n\t\tint[] nums = new int[n];\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tnums[i] = sc.nextInt();\\n\t\t}\\n \\n \t\tint ans = 0;\\n\t\tfor(int i = 1; i < n - 1; i++){\\n\t\t\tif((nums[i-1] < nums[i] && nums[i] < nums[i+1]) || (nums[i-1] > nums[i] && nums[i] > nums[i+1])){\\n\t\t\t\tans++;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n \\n \\n  }\\n \\n //\u3053\u3053\u304b\u3089\u30c6\u30f3\u30d7\u30ec\\n  static class InputReader {\\n      private InputStream stream;\\n      private byte[] buf = new byte[1024];\\n      private int curChar;\\n      private int numChars;\\n      private SpaceCharFilter filter;\\n \\n      public InputReader(InputStream stream) {\\n          this.stream = stream;\\n      }\\n \\n      public int next() {\\n          if (numChars == -1)\\n              throw new InputMismatchException();\\n          if (curChar >= numChars) {\\n              curChar = 0;\\n              try {\\n                  numChars = stream.read(buf);\\n              } catch (IOException e) {\\n                  throw new InputMismatchException();\\n              }\\n              if (numChars <= 0)\\n                  return -1;\\n          }\\n          return buf[curChar++];\\n      }\\n \\n      public String nextStr() {\\n        int c = next();\\n        while(isSpaceChar(c)){c = next();}\\n        StringBuffer str = new StringBuffer();\\n        do{\\n          str.append((char)c);\\n          c = next();\\n        }while(!isSpaceChar(c));\\n        return str.toString();\\n      }\\n \\n      public char nextChar() {\\n        int c = next();\\n        while(isSpaceChar(c)){c = next();}\\n        char ret;\\n        do{\\n          ret = (char)c;\\n          c = next();\\n        }while(!isSpaceChar(c));\\n        return ret;\\n      }\\n \\n      public int nextInt() {\\n          int c = next();\\n          while (isSpaceChar(c))\\n              c = next();\\n          int sgn = 1;\\n          if (c == '-') {\\n              sgn = -1;\\n              c = next();\\n          }\\n          int res = 0;\\n          do {\\n              if (c < '0' || c > '9')\\n                  throw new InputMismatchException();\\n              res *= 10;\\n              res += c - '0';\\n              c = next();\\n          } while (!isSpaceChar(c));\\n          return res * sgn;\\n      }\\n \\n      public boolean isSpaceChar(int c) {\\n          if (filter != null)\\n              return filter.isSpaceChar(c);\\n          return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n      }\\n \\n      public interface SpaceCharFilter {\\n          public boolean isSpaceChar(int ch);\\n      }\\n  }\\n}", "target": "96", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "icc", "sac", "ec", "esc", "desc", "sync", "Sc", "ctl", "isc", "pc", "osc", "ch", "uc", "sys", "mc", "scl", "c", "nc", "si", "sh", "SC", "sw", "gc", "fc", "sv", "dc", "lc", "sp", "asc", "sch", "sec", "usc", "irc", "sq"], "n": ["ng", "m", "ct", "j", "nan", "f", "nn", "number", "net", "fn", "r", "z", "ln", "t", "ne", "mn", "network", "on", "en", "len", "nc", "np", "p", "c", "N", "pi", "count", "inn", "nb", "w", "d", "v", "nu", "name", "no", "names", "all", " N", "ns", "num", "un", "nl", "sn", "nw", "na", "o", "size", "cn", "l", "nt"], "nums": ["anubes", "nuails", "lnules", " noms", "nsumbers", " nump", "enules", "snules", "enumers", "onomes", "cumbers", " Nums", "onumps", "anums", "numues", "renoms", "unubes", "numbers", "nubes", "nuomes", " news", "enaps", " nails", "renaps", "numps", " numers", "nsucks", "enucks", "enomes", " nomes", "unomes", "snaves", "coms", "numums", "naps", "numumbers", " Nomes", "snums", "nsum", "neumbers", "news", "neews", "canumers", "canums", "noums", "onaves", "nsums", "nump", "enumbers", " namps", "lnaves", "nsaps", "nsoms", "onumers", "enamps", " nules", "onamps", "onums", " Naps", "numomes", " nues", "caps", "nucks", "noews", " Nucks", "unums", "unumers", "unules", " naves", "onules", "canumps", "nsomes", "lnumers", "nails", "num", "enums", " naps", "enubes", "enump", " numbers", "onump", " num", "renums", "unumps", "anumbers", "unues", "anules", "nmes", "onails", "neums", "cums", "noms", "nuaves", " nmes", "snumers", "nemes", "canules", "nues", "nuums", "unumbers", "enoms", "nules", "nomes", "namps", "noumbers", "renumbers", "naves", "lnums", "numers"], "i": ["ji", "hi", "q", "ci", "iso", "mi", "li", "iq", "v", "my", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "bi", "f", "go", "ei", "status", "pi", "cli", "zi", "chain", "y", "uri", "asi", "im", "ami", "ki", "ii", "ri", "fi", "eu", "init", "sequence", "di", "exp", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "to", "ip", "ori", "qi", "phi", "me", "xi", "j", "sim", "it", "ims", "by", "I", "this", "ie", "client", "point", "inner", "iter", "g", "ic", "iu", "base", "is", "mac", "x", "oi", "batch"], "ans": ["uns", "vs", "oss", "san", "nan", "can", "ats", "aos", "rans", "aned", "pan", "ann", " Ans", "cas", "anos", "lan", " means", "ens", "cs", "AN", "aus", "acs", "ums", "ags", "has", "offs", "eds", "aps", "anks", "ks", "ins", "an", "ys", "An", "ars", "ms", "ents", "ns", "us", "ows", "ants", "ids", "ates", "ds", "arts", "als", "ls", "ANS", "ts", "is", "amps", "anc", "ads"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[]args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t\\n\t\tint[] A = new int[3];\\n\t\t\\n\t\tfor(int i = 0;i<3;i++){\\n\t\t\tA[i] = scan.nextInt();\\n\t\t}\\n\t\t\\n\t\tArrays.sort(A);//\u6607\u9806\u306b\u30bd\u30fc\u30c8\\n\t\t\\n\t\tif(A[0]==5&&A[1]==5&&A[2]==7)\\n\t\t\tSystem.out.println(\"YES\");\\n\t\telse\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t\\n\t\t\\n\t\t\\n\t\t\\n\t}\\n\\n}\\n", "target": "16", "substitutes": {"scan": ["san", "check", "con", "system", "can", "skip", "Scan", "ann", "run", "in", "by", "re", "scroll", "row", "read", "sync", "black", "connect", "se", "seek", "ch", " Scan", "sys", "reach", "sc", "query", "sur", "send", "gate", "parse", "an", "sin", "get", "scale", "spin", "sv", "bin", "screen", "thin", "sn", "ser", "stat", "find"], "A": ["AC", "B", "What", "E", "P", "GA", "LA", "AA", "CA", "As", "S", "BA", "AN", "AB", "I", "D", "AST", "W", "SA", "MA", "V", "This", "All", "H", "AE", "ACT", "AF", "An", "AM", "AV", "Av", "AU", "a", "Y", "HA", "These", "ACE", "Ar", "IA", "AY", "AR", "JA", "M", "R", "The", "C", "PUT", "EA", "AP"], "i": ["ii", "phi", "m", "gu", "me", "xi", "multi", "j", "sim", "e", "init", "it", "bi", "hi", "q", "in", "u", "ci", "t", "di", "I", "mi", "ie", "gi", "client", "mu", "li", "p", "ei", "si", "pi", "ex", "ti", "v", "my", "cli", "ui", "ms", "ini", "ic", "ai", "us", "chain", "iu", "n", "ix", "ind", "id", "ip", "y", "is", "uri", "x", "im", "oi", "batch", "qi"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    long N = Long.parseLong(sc.next());\\n    \\n    long min = N-1;\\n    long sqrt = (long)Math.sqrt(N);\\n    for(long i=2;i<=sqrt;i++){\\n      if(N%i==0){\\n        if(i-1+N/i-1<min){\\n          min = i-1+N/i-1;\\n        }\\n      }\\n    }\\n    System.out.print(min);\\n    System.out.flush();\\n  }\\n}", "target": "157", "substitutes": {"sc": [" Sc", "out", "cc", "cle", "Scan", "ss", "cr", "pb", "rc", "cl", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "se", "ch", "pc", "osc", "isc", "cur", "sys", "ner", "mc", "scl", "c", "nc", "sh", "SC", "gc", "sw", "sv", "nl", "scrib", "scan", "lc", "RC", "sp", "ser", "asc", "ctrl", "sch", "anc", "sq"], "N": ["B", "NH", "P", "F", "NN", "Ns", "NI", "Ni", "MAN", "Note", "Num", "S", "NR", "SN", "SIZE", "NL", "AN", "NS", "I", "D", "NUM", "NO", "GN", "NV", "A", "NP", "W", "NB", "L", "ND", "V", "NOR", "TN", "Size", "NM", "MN", "NG", "CN", "H", "NT", "None", "NA", "T", "K", "J", "FN", "Sn", "Other", "NE", "n", "Len", "M", "R", "KEY", "C", "Na"], "min": ["m", "lower", "sol", "mask", "minimum", "low", "init", "test", "fn", "in", "none", "mins", "member", "Min", "MIN", "mid", "temp", "sort", "lock", "rel", "mi", "mn", "start", "pre", "Minimum", "first", "next", "margin", "print", "local", "left", "initial", "second", "n", "mini", "required", "lt", "default", "minute", "partial", "max", "just", "Mini", "sum", "small", "err", "amin", "stat", "mr", "tail", "sample", "mod"], "sqrt": [" sqRT", "squrd", "squRT", "secr", "secrt", "secri", "sqri", "sqr", "secRT", "qRT", "qrt", "sqRT", "qrd", " sqrd", "qr", " sqri", "squrt", " sqr", "sqrd", "squr", "qri"], "i": ["ii", "phi", "m", "xi", "me", "j", "sim", "multi", "fi", "it", "bi", "f", "ji", "ik", "hi", "z", "u", "span", "ci", "di", "I", "rel", "mi", "series", "info", "bis", "gi", "index", "uli", "li", "ei", "si", "status", "pi", "sql", "iq", "ti", "d", "v", "cli", "ij", "zi", "ui", "ini", "ai", "\u0438", "us", "ic", "l", "iu", "tree", "ix", "ind", "id", "ip", "o", "is", "uri", "x", "im", "ori", "oi", "batch", "key", "qi", "ki"]}}
{"code": "import java.util.Map;\\nimport java.util.Scanner;\\nimport java.util.TreeMap;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n\\n        Map<String, Integer> wordmap = new TreeMap<>();\\n        int max = 0;\\n        for (int i=0;i<N;i++) {\\n            String S_n = sc.next();\\n            if (wordmap.containsKey(S_n)) {\\n                int count = wordmap.get(S_n);\\n                wordmap.put(S_n, count + 1);\\n                if (max <= count) max = count + 1;\\n            } else {\\n                wordmap.put(S_n, 1);\\n                if (max == 0) max = 1;\\n            }\\n        }\\n\\n        for (String key : wordmap.keySet()) {\\n            if (wordmap.get(key) == max) System.out.println(key);\\n        }\\n\\n    }\\n}", "target": "235", "substitutes": {"sc": ["ng", "cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "reader", "ok", "esc", "sync", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "nc", "c", "sci", "SC", "gc", "sw", "fc", "arc", "src", "sv", "nl", "dc", "scan", "lc", "sp", "ser", "asc", "ctrl", "sec", "anc", "usc", "syn", "sq"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NS", "I", "GN", "D", "NO", "CNN", "NP", "NC", "NB", "L", "ND", "V", "TN", "NM", "NG", "H", "Net", "NT", "KN", "NA", "T", "K", "Sn", "NE", "n", "Count", "M", "C", "X"], "wordmap": ["keydata", "worddata", "lettermap", "pieceap", " wordcode", "weightap", " worddata", "wordlist", "wordsMap", "weighthash", "wmatch", "wcap", " wordlist", " wordmatch", "pageage", "wap", "pagemap", "testap", "pagelist", "keymatch", "keymap", "wordcount", " wordgraph", "wordlock", "wmap", "wordcode", "letterage", " wordcap", "weightmap", "wordgraph", "Wordmap", "wordap", "keycount", "wordage", " wordap", " wordblock", "wordcap", "functiongraph", "weightlock", "wordmask", "piecehash", "piecemask", "functioncode", "keycap", "wordmatch", "weightmask", "keygraph", "wordsmap", "lettercount", " wordhash", "piecemap", "letterlist", "Wordap", " wordmask", "pagecount", "functionblock", "keycode", " wordMap", "weightdata", "wordslock", "weightMap", "Wordmatch", " wordage", "testmap", "wordblock", "keyblock", " wordlock", "functionmap", "weightcap", "wordMap", "testmatch", "keyap", "wordhash", "wordscap", " wordcount", "weightcount"], "max": ["value", "history", "dev", "rand", "prime", "Max", "box", "spread", "best", "res", "scale", "v", "word", "gt", "with", "can", "top", "right", "checked", "node", "ax", "maximum", "total", "ms", "chain", "length", "n", "now", "id", "view", "upper", "sum", "global", "hash", "mod", "range", "current", "mask", "MAX", "full", "none", "mx", "window", "force", "exp", "med", "req", "index", "random", "conf", "rank", "num", "default", "rest", "size", "grow", "master", "act", "check", "cache", "min", "set", "limit", "ext", "ex", "major", "end", "last", "base", "map", "x"], "i": ["ii", "phi", "m", "j", "multi", "sim", "it", "bi", "hi", "q", "in", "ci", "di", "I", "mi", " iter", "ie", "go", "index", "ni", "li", "p", "si", "c", " ii", "pi", "iq", "ti", "g", "v", "io", "ij", "ui", "ini", "ic", "ai", "us", "ish", "iu", "n", " I", "ix", "ind", "id", "ip", "y", "is", "x", "im"], "S_n": ["S_i", "Soyn", "S_m", "SIoyi", " S_na", "SIoyln", "SI_ln", "S_ln", " S_number", "S5n", "S_c", "Solynumber", " S_c", "SB_nor", "SI_n", "S_na", "SI_i", "Soyns", "SB_n", "S_ns", "F_an", "SI_ns", "S5name", "SB_note", " S_i", "SIoyn", "S_cn", "SIoyns", "Solyname", "S_nu", "S_number", "Solyna", " S_nu", "S_note", "Soyi", " S_name", "S_name", "SB_i", "S_an", "F_n", "S_nor", "F_cn", "S5number", "S5na", "Soyln", "Solyn", "F_m"], "count": ["current", "check", "ct", "ount", "cc", "cat", "cache", "full", "ctr", "core", "hold", "cont", "group", "cf", "result", "counter", "index", "first", "cur", "list", "len", "c", "amount", "match", "code", "conf", "score", "inc", "nb", "add", "total", "more", "name", "all", "num", "type", "cell", "length", "last", "handle", "n", "Count", "ind", "cond", "common", "child", "now", "size", "old", "sum", "find", "found", "nt"], "key": ["label", "any", "mk", "string", "j", "bo", "char", "value", "str", "poly", "wy", "foo", "link", "q", "po", "token", "by", "k", "Key", "ale", "ico", "ie", "json", "tip", "list", "entry", "ay", "c", "prefix", "obj", "ex", "v", "name", "item", "ace", "my", "ey", "hash", "cy", "chain", "yy", "ame", "kw", "n", "phrase", "word", "id", "val", "ip", "y", "ry", "x", "KEY", "mac", "sum", "te", "tk"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] d = new int[n];\\n\t\tint count = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\td[i] = sc.nextInt();\\n\t\t}\\n\t\tArrays.sort(d);\\n\t\tint min = d[n / 2 - 1];\\n\t\tint max = d[n / 2];\\n\t\tfor (int i = min; i < max; i++) {\\n\t\t\tcount++;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "119", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "capt", "pb", "rc", "cl", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "ctl", "se", "isc", "osc", "pc", "ch", "sys", "mc", "scl", "nc", "c", "sh", "sci", "SC", "sw", "gc", "inc", "fc", "sv", "lc", "scan", "sp", "sel", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "n": ["ng", "m", "norm", "ct", "j", "nan", "f", "nn", "net", "number", "q", "z", "ln", "t", "ne", "mn", "ll", "nm", "en", "len", "np", "nc", "c", "ot", "p", "N", "nb", "g", "v", "nu", "no", "name", "names", "all", " N", "ns", "num", "un", "nl", "sn", "na", "y", "o", "x", "dn", "cn", "l", "nt"], "d": ["done", "m", "fd", "b", "ct", "f", "da", "dr", "dos", "r", "ed", "z", "nd", "des", "dict", "di", "dd", "ld", "D", "t", "dec", "dt", "p", "c", "db", "ad", "w", "g", "v", "add", "dim", "debug", "pd", "df", "de", "div", "dat", "ds", "ind", "dl", "def", "sd", "o", "dh", "del", "l", "mod"], "count": ["check", "ct", "quiet", "flag", "ount", "test", "cache", "number", "must", "q", "ctr", "cast", "hold", "cd", "cont", "coll", "result", "counter", "index", "list", "report", "c", "amount", "code", "conf", "status", "score", "trace", "draw", "nb", "summary", "add", "total", "num", "state", "const", "length", "Count", "ind", "id", "call", "size", "sum", "find", "found", "nt"], "i": ["ii", "phi", "m", "xi", "me", "j", "sim", "multi", "ri", "init", "bi", "it", "ji", "hi", "q", "ims", "u", "ci", "iy", "iso", "di", "I", "mi", "ie", "gi", "client", "php", "li", "ei", "si", "point", "ski", "pi", "iter", "ti", "iq", "g", "v", "io", "cli", "ij", "zi", "ui", "batch", "ini", "ai", "ic", "us", "\u0438", "chain", "uu", "l", "iu", "ix", "ind", "id", "ip", "y", "is", "uri", "im", "oi", "ori", "err", "ami", "qi", "ki"], "min": ["range", "m", "lower", "low", "minimum", "init", "lo", "loc", "mins", "mid", "Min", "MIN", "sort", "middle", "rel", "emin", "mi", "rand", "mn", "bottom", "start", "pre", "first", "index", "st", "left", "step", "initial", "begin", "base", "ind", "lt", "minute", "mean", "small", "l", "amin"], "max": ["range", "act", "m", "h", "MAX", "full", "r", "z", "right", "mx", "window", "k", "med", "ax", "ma", "huge", "Max", "est", "conf", "maximum", "cut", "st", "end", "v", "res", "all", "or", "last", "fr", "bound", "work", "rest", "upper", "size", "x", "grow", "gt", "mod"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int Q = sc.nextInt();\\n        String S = sc.next();\\n        int[] l = new int[Q];\\n        int[] r = new int[Q];\\n        for(int i = 0; i < Q; i++){\\n            l[i] = sc.nextInt()-1;\\n            r[i] = sc.nextInt()-1;\\n        }\\n        int[] a = new int[N];\\n        for(int i = 0; i < N; i++){\\n            if(S.charAt(i) == 'A')\\n                a[i] = 1;\\n            if(S.charAt(i) == 'C')\\n                a[i] = -1;\\n        }\\n        int[] dp = new int[N];\\n        dp[0] = 0;\\n        for(int i = 0; i < N-1; i++){\\n            if(a[i] == 1 && a[i+1] == -1)\\n                dp[i+1] = dp[i] + 1;\\n            else\\n                dp[i+1] = dp[i];\\n        }\\n        for(int i = 0; i < Q; i++){\\n            System.out.println(dp[r[i]] - dp[l[i]]);\\n        }\\n    }\\n}\\n", "target": "52", "substitutes": {"sc": [" Sc", "cc", "cle", "tc", "cr", "ss", "rc", "capt", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "sw", "inc", "cons", "fc", "ctx", "sv", "co", "lc", "scan", "sp", "ser", "asc", "conv", "cgi", "sch", "sec", "anc", "usc", "irc", "sq"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "NR", "SN", "G", "NL", "AN", "NS", "I", "D", "A", "NO", "GN", "NC", "NB", "L", "ND", "V", "NOR", "TN", "NM", "NG", "CN", "H", "NT", "NA", "Y", "T", "K", "J", "NE", "n", "M", "R", "C", "Z", "X", "Na"], "Q": ["E", "IX", "qq", "P", "F", "ID", "q", "G", "IP", "Qual", "Que", "I", "D", "Query", "NC", "IQ", "NB", "L", "V", "CH", "Qu", "H", "UE", "Y", "QU", "T", "K", "J", "MQ", "NE", "U", "M", "R", "Length", "C", "Z", "X"], "S": ["B", "SM", "E", "P", "s", "STR", "SEC", "ss", "SN", "G", "CS", "SO", "NS", "A", "SER", "ST", "L", "SA", "V", "SF", "SE", "SI", "SP", "H", "SC", "BS", "Si", "T", "SQL", "SL", "SU", "SS", "SH", "SOURCE", "GS", "TS", "R", "C", "SB"], "l": ["b", "m", "h", "la", "j", "s", "lr", "tl", "q", "loc", "z", "ln", "u", "rl", "t", "el", "ld", "lp", "L", "lb", "ll", "li", "p", "len", "c", "le", "w", "d", "v", "sl", "nl", "lc", "n", "dl", "ls", "o", "al"], "r": ["rd", "rs", "b", "m", "h", "s", "ri", "j", "lr", "mr", "q", "rc", "dr", "rar", "u", "rl", "re", "t", "ru", "pr", "rr", "er", "p", "ro", "c", "hr", "rb", "sr", "g", "d", "v", "res", "ar", "n", "tr", "R", "ry", "o", "rt", "rec"], "i": ["h", "adi", "ji", "hi", "dr", "ci", "mi", "mu", "li", "v", "my", "ij", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "bi", "f", "iy", "ei", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "fi", "eu", "init", "fire", "eric", "yi", "di", "wi", "exp", "info", "gi", "index", "ni", "si", "ski", "sql", "ti", "io", "iri", "\u0438", "ind", "to", "ip", "cgi", "o", "ori", "qi", "phi", "xi", "me", "j", "sim", "it", "iii", "set", "I", "parent", "ie", "p", "point", "iter", "ia", "ic", "iu", "ios", "is", "key", "x", "oi", "batch"], "a": ["aaa", "act", "aff", "b", "sta", "la", "apa", "oa", "ap", "isa", "sa", "it", "aw", "av", "am", "era", "wa", "at", "A", "au", "area", "att", "ca", "ma", "ac", "p", "ba", "ao", "ea", "c", "pi", "an", "aa", "ack", "ia", "d", "ar", "auto", "ata", "ava", "ga", "as", "ai", "aux", "alpha", "n", "pa", "na", "al"], "dp": ["bps", "bsp", "dial", "dm", "pb", "trip", "gd", "dr", "resp", "cd", "di", "dd", "pm", "lp", "dt", "dq", "vp", "dep", "pt", "DP", "xy", "du", "tp", "p", "np", "tap", "db", "d", "dim", "jp", "pd", "td", "ga", "adr", "gp", "dj", "df", "wd", "dc", "pa", "ds", "ps", "deb", "dl", "wp", "ip", "hp", "dh", "pp", "cp", "fp"]}}
{"code": "public class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tjava.util.Scanner sc = new java.util.Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint l = sc.nextInt();\\n\t\tsc.nextLine(); // nextInt()??????????????\u00a3?????????\"\\n\"????\u00b6????????????????\\n\\n\t\tint[][] A = new int[n][m];\\n\t\tint[][] B = new int[m][l];\\n\t\tlong[][] C = new long[n][l];\\n\\n\t\tfor (int i=0; i < n; i++) {\\n\\n\t\t\tString[] data = sc.nextLine().split(\" \");\\n\\n\t\t\tfor (int j=0; j < m; j++) {\\n\t\t\t\tA[i][j] = Integer.parseInt(data[j]);\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tfor (int j=0; j < m; j++) {\\n\\n\t\t\tString[] data = sc.nextLine().split(\" \");\\n\\n\t\t\tfor (int k=0; k < l; k++) {\\n\t\t\t\tB[j][k] = Integer.parseInt(data[k]);\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\t// C[i][k] = sigma(j : 0 -> m) A[i][j] * B[j][k]\\n\\n\t\tfor (int i=0; i < n; i++) {\\n\\n\t\t\tfor (int k=0; k < l; k++) {\\n\\n\t\t\t\tfor (int j=0; j < m; j++) {\\n\t\t\t\t\tC[i][k] += A[i][j] * B[j][k];\\n\t\t\t\t}\\n\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tfor (int i=0; i < n; i++) {\\n\t\t\tfor (int k=0; k < l-1; k++) {\\n\t\t\t\tSystem.out.print(C[i][k] + \" \");\\n\t\t\t}\\n\t\t\tSystem.out.println(C[i][l-1]);\\n\t\t}\\n\\n\t}\\n\\n}", "target": "204", "substitutes": {}}
{"code": "import java.util.HashMap;\\nimport java.util.ArrayList;\\nimport java.util.Scanner;\\nimport java.util.regex.Pattern;\\nimport java.util.Collections;\\nimport java.math.BigDecimal;\\n\\npublic class Main {\\n    public static Scanner sc = new Scanner(System.in);\\n    public static void main(String[] args) throws Exception {\\n        String s = sc.next();\\n        String p = sc.next();\\n        for (int i = 0; i < s.length(); i++) {\\n            s = s.substring(s.length()-1, s.length()) + s.substring(0, s.length()-1);\\n            if (s.indexOf(p) != -1) {\\n                System.out.println(\"Yes\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"No\");\\n    }\\n}", "target": "198", "substitutes": {"sc": ["sk", "cc", "cle", "tc", "cr", "rc", "loc", "cl", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "ch", "pc", "osc", "isc", "sys", "mc", "c", "nc", "scl", "sh", "sci", "SC", "gc", "ctx", "st", "fc", "sv", "scope", "co", "nl", "dc", "lc", "scan", "sp", "asc", "sch", "sec", "usc", "irc", "sq"], "s": ["hs", "rs", "save", "b", "h", "string", "its", "j", "ats", "sa", "str", "xs", "ss", "ims", "S", "sb", "r", "abs", "bs", "sort", "cs", "parts", "os", "se", "so", "qs", "sys", "gs", "si", "c", "su", "status", "ins", "sql", "g", "st", "less", "strings", "https", "sv", "ms", "sl", "ns", "state", "search", "sts", "n", "sp", "ds", "ps", "stats", "js", "ls", "ts", "is", "x", "source", "stat", "sq"], "p": ["m", "P", "pe", "ap", "j", "pb", "phy", "t", "lp", "ping", "vp", "pt", "pr", "tp", "np", "c", "op", "mp", "pi", "g", "bp", "jp", "gp", "n", "sp", "pa", "ps", "ip", "pro", "pp", "cp", "fp"], "i": ["ii", "phi", "m", "gu", "me", "j", "multi", "eu", "init", "it", "bi", "q", "in", "mill", "z", "u", "ci", "di", "I", "mi", "ie", "mu", "li", "ei", "si", "c", "pi", "ex", "iq", "ti", "a", "io", "cli", "zi", "ui", "ini", "ic", "ai", "us", "chain", "iu", "n", "ind", "ix", "id", "M", "y", "o", "is", "x", "im", "asi", "qi"]}}
{"code": "import java.util.*; \\nimport java.io.*; \\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n     Scanner sc = new Scanner(System.in);\\n     int n = sc.nextInt(); \\n     int m = sc.nextInt(); \\n     if(n<m) {\\n    \t for(int i = 0; i<m; i++) System.out.print(n);\\n     }\\n     else for(int i = 0;i<n; i++) System.out.print(m);\\n   }\\n}", "target": "24", "substitutes": {"sc": ["tch", "sa", "cc", "cle", "cr", "tc", "ss", "capt", "rc", "sb", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ch", "osc", "pc", "isc", "sys", "ck", "mc", "scl", "c", "nc", "acc", "SC", "gc", "inc", "sv", "scope", "dc", "lc", "scan", "sp", "sel", "asc", "conv", "ctrl", "sch", "sec", "anc", "usc", "syn", "sq"], "n": ["ng", "j", "nan", "nn", "ren", "net", "number", "ln", "nd", "t", "ne", "mn", "ll", "nm", "en", "p", "nc", "c", "np", "gn", "N", "nb", "g", "d", "v", "nu", "name", "no", "ms", " N", "num", "ns", "un", "nl", "sn", "na", "non", "o", "x", "cn", "l", "nt"], "m": ["mk", "mat", "b", "h", "j", "vm", "f", "dm", "r", "mx", "cm", "km", "sm", "t", "mo", "mi", "pm", "mn", "md", "med", "perm", "nm", "ma", "mu", "p", "mc", "c", "bm", "mp", "gm", "d", "v", "mb", "mem", "mt", "ms", "rm", "them", "tm", "M", "mm", "im", "em", "l", "rem", "mr", "mod"], "i": ["ii", "phi", "gu", "xi", "j", "multi", "fi", "sim", "eu", "init", "bi", "it", "hi", "ims", "in", "yi", "ci", "di", "mi", "gi", "client", "ni", "mu", "li", "ei", "si", "ski", "inner", "pi", "iter", "ti", "cli", "ij", "zi", "ui", "ini", "ai", "\u0438", "us", "iu", "ix", "ind", "id", "MI", "ip", "is", "PI", "asi", "im", "oi", "ori", "err", "uri", "qi", "ki"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\n\\npublic class Main {\\n  public static void main(String[] args) throws IOException {\\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n    String[] str = in.readLine().split(\" \");\\n    int n = Integer.parseInt(str[0]);\\n    int d = Integer.parseInt(str[1]);\\n    int[][] p = new int[n][d];\\n    for(int i=0; i<n; i++) {\\n      str = in.readLine().split(\" \");\\n      for(int j=0; j<d; j++) {\\n        p[i][j] = Integer.parseInt(str[j]);\\n      }\\n    }\\n    int count = 0;\\n    for(int i=0; i<n; ++i) {\\n      for(int j=i+1; j<n; ++j) {\\n        if(f(p[i],p[j],d))\\n          ++count;\\n      }\\n    }\\n    System.out.println(count);\\n  }\\n  \\n  private static boolean f(int[] p,int[] p2,int n) {\\n    int sum = 0;\\n    for(int i=0; i<n; ++i) \\n      sum += (p[i]-p2[i]) * (p[i]-p2[i]);\\n    return Math.abs(Math.pow((int)Math.sqrt(sum),2)-sum)<0.001;\\n  }\\n}", "target": "59", "substitutes": {"in": ["out", "b", "In", "m", "check", "h", "s", "it", "doc", "init", "run", " din", "net", "r", "OUT", "user", "file", "q", "re", "rin", "reader", "t", "at", "el", "read", "IN", "info", "std", "on", "from", "sys", "session", "log", "er", "en", "c", "ins", "inner", "conf", "inn", "inc", "ad", "get", "cin", "res", "io", "add", "input", "world", "all", "bin", "ini", "stream", "err", "ind", "to", "mm", "din", "ts", "is", "l", "rt"], "str": ["rs", "string", "ct", "s", "STR", "br", "char", "bl", "url", "cr", "doc", "r", "dr", "arr", "ctr", "cl", "Str", "cs", "desc", "ld", "split", "dec", "att", "exp", "enc", "ll", "list", "vol", "len", "spec", "oct", "print", "form", "stri", "comm", "sw", "txt", "res", "st", "ar", "raw", "sl", "chain", "gr", "div", "dat", "sts", "tr", "sp", "fr", "hex", "wr", "del", "sec"], "n": ["ng", "out", "m", "h", "b", "s", "nan", "nn", "net", "number", "fn", "q", "z", "t", "k", "ne", "mn", "network", "on", "nm", "en", "c", "nc", "np", "len", "N", "pi", "an", "nb", "g", "v", "nu", "no", "name", "w", "all", "num", "ns", "un", "nl", "length", "sn", "na", "y", "o", "x", "size", "dn", "cn", "l", "nt"], "d": ["done", "b", "m", "h", "fd", "da", "r", "z", "nd", "t", "di", "D", "k", "dd", "dec", "dt", "cd", "ld", "c", "db", "dom", "draw", "w", "g", "dim", "v", "data", "debug", "pd", "all", "td", "nl", "length", "dc", "dir", "de", "div", "dat", "ds", "id", "sd", "o", "x", "dn", "dh", "del", "l", "size", "den", "dL"], "p": ["per", "m", "h", "P", "pe", "ap", "rep", "par", "f", "pb", "q", "r", "t", "pm", "lp", "pers", "pn", "pl", "vp", "ping", "pc", "pt", "dp", "perm", "pr", "pkg", "tp", "point", "c", "np", "app", "pi", "mp", "v", "a", "bp", "jp", "pd", "pa", "sp", "ps", "wp", "ip", "pro", "pp", "l", "cp", "fp"], "i": ["ji", "hi", "q", "ani", "ci", "mi", "li", "remote", "iq", "v", "ij", "ui", "all", "ini", "ai", "us", "ix", "ion", "m", "multi", "e", "bi", "ik", "iy", "at", "ei", "status", "pi", "cli", "zi", "id", "y", "im", "l", "ami", "ity", "ki", "ii", "ri", "init", "di", "wi", "info", "gi", "index", "si", "ti", "io", "\u0438", "ind", "ip", "qi", "phi", "xi", "me", "sim", "it", "ims", "u", "I", "parent", "this", "ie", "point", "iter", "g", "ia", "ic", "iu", "is", "x", "batch"], "j": ["ng", "jet", "oj", "b", "s", "og", "ja", "br", "it", "ji", "jj", "e", "jc", "bi", "bl", "q", "r", "z", "user", "uj", "bj", "at", "ph", "el", "k", "jump", "rel", "jit", "ie", "ne", "json", "je", "pt", "pr", "xy", "off", "kj", "ax", "er", "next", "kid", "note", "ot", "jl", "obj", "jo", "g", "bot", "v", "zone", "aj", "other", "jp", "ij", "dj", "J", "us", "jas", "l", "tr", "ix", "fr", "child", "js", "y", "err", "job", "ge"], "count": ["current", "um", "check", "ct", "flag", "ount", "test", "value", "cache", "number", "q", "ctr", "z", "core", "cast", "set", "cont", "coll", "th", "result", "counter", "index", "list", "report", "c", "match", "code", "print", "trace", "draw", "nb", "comment", "iter", "add", "total", "debug", "num", "const", "length", "Count", "ind", "frequency", "call", "stat", "find", "found", "nt"], "p2": ["jp8", "P1", "Ppl", "P256", "P3", "sp2", "p0", "jp2", "sp1", " ppl", "jp1", "sp3", "P8", "pipl", "n2", "P2", "p1", " p8", " p1", "pi1", "P0", "sp0", "n1", "n0", "ppl", "p256", "pi2", "p8", "n3", "p3", " p256", "pi256"], "sum": ["sam", "out", "um", "m", "h", "multi", "sim", "mix", "density", "s", "sa", "f", "ss", "square", "mass", "ass", "temp", "set", "use", "diff", "se", "med", "result", "zero", "index", "ash", " SUM", "match", "amount", " summed", "su", "status", "si", "sh", "cum", "summary", "cal", "v", "add", "total", "mem", "all", "num", "us", "util", "weight", "average", "Sum", "now", "mean", "mm", "max", "size", "gam", "fac", "hash", "tail", "sample"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main\\n{\\n\tpublic static void main(String[] args)\\n\t{\\n\t\tdouble[] d = new double[50];\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tString str = scan.nextLine();\\n\\n\t\tint n = str.length();\\n\\n\t\tString ans = \"\";\\n\t\tfor (int i=0; i<n; i++) {\\n\t\t\tans = ans + \"x\";\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "122", "substitutes": {"d": ["done", "m", "fd", "f", "da", "gd", "r", "dos", "dict", "di", "dd", "D", "t", "dt", "dp", "p", "c", "g", "v", "pd", "df", "dc", "ds", "dl", "sd", "dh", "l"], "scan": ["save", "out", "san", "m", "check", "con", "system", "can", "skip", "char", "cat", "Scan", "nn", "run", "in", "r", "sb", "re", "scroll", "row", "read", "sync", "connect", "se", "info", "seek", "ch", " Scan", "sys", "proc", "sc", "reach", "ner", "query", "gate", "parse", "an", "sin", "g", "get", "auto", "sv", "search", "trans", "sp", "ser", "is", "stat", "find"], "str": ["rs", "out", "m", "string", "s", "j", "STR", "char", "ocr", "in", "r", "z", "arr", "Str", "t", "coll", "exp", "pr", "sc", "list", "vol", "p", "spec", "c", "oct", "stri", "obj", "comm", "data", "txt", "g", "st", "v", "name", "res", "input", "sl", "tr", "sp", "fr"], "n": ["ng", "m", "norm", "s", "nan", "nn", "net", "ln", "nd", "t", "nr", "k", "ne", "mn", "ll", "on", "ni", "nm", "en", "np", "nor", "nc", "gn", "ot", "N", "nb", "nu", "num", "ns", "nl", "sn", "nw", "na", "x", "cn", "l", "nt"], "ans": ["uns", "rs", "vs", "san", "s", "can", "ats", "aos", "rans", "xs", "pan", "ann", " Ans", " spans", "vals", " means", "ens", "aus", "cs", "outs", "acs", "os", "ams", "aps", "anks", "ems", "ks", "gs", "ends", "ins", "an", "lines", "ars", "ras", "names", "ms", "orts", "as", "ns", " scans", "ents", "ants", "fts", "eps", "us", "mas", "ons", "sts", "yes", "ds", " beans", "ps", "arts", "als", "ts", "ANS", "ls", "amps", "anc", "es", "olds", "ads"], "i": ["ii", "phi", "m", "gu", "xi", "me", "j", "sim", "multi", "init", "bi", "it", "hi", "q", "ci", "di", "I", "mi", "ie", "gi", "client", "li", "ei", "si", "pi", "ex", "iter", "ti", "a", "cli", "zi", "ui", "ms", "ini", "ai", "ic", "us", "\u0438", "iu", "ix", "ip", "is", "x", "im", "err", "qi", "ki"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main{\\n\tpublic static void main(String args[]){\\n        int key = 1;\\n        Scanner sc = new Scanner(System.in);\\n        String str = sc.nextLine();\\n        String[] array = new String[str.length()];\\n        for(int i = 0; i < str.length(); i++){\\n            String str2 = String.valueOf(str.charAt(i));\\n            array[i] = str2;\\n        }\\n        if( (str.length() % 2) == 0){\\n            for(int j = 0; j < str.length() / 2; j++){\\n                if(array[2*j].equals(\"L\")){\\n                    key = 0;\\n                }\\n                if(array[2*j+1].equals(\"R\")){\\n                    key = 0;\\n                }\\n            }\\n        }else{\\n            for(int j = 0; j < (str.length() / 2) + 1; j++){\\n                if(array[2*j].equals(\"L\")){\\n                    key = 0;\\n                }\\n            }\\n            for(int j = 0; j < str.length() / 2; j++){\\n                if(array[2*j+1].equals(\"R\")){\\n                    key = 0;\\n                }\\n            }\\n        }\\n        if(key == 1){\\n            System.out.println(\"Yes\");\\n        }else{\\n            System.out.println(\"No\");\\n        }\\n    }\\n}", "target": "205", "substitutes": {"key": ["act", "label", "check", "important", "flag", "char", "ke", "link", "value", "error", "net", "where", "test", "member", "pair", "change", "window", "set", "section", "close", "row", "k", "Key", "dev", "our", "parent", "rand", "zero", "index", "loop", "list", "tag", "box", "match", "print", "note", "point", "prefix", "option", "root", "total", "ey", "step", "shift", "mouse", "search", "type", "ee", "chain", "keep", "rule", "ice", "alpha", "cond", "default", "id", "child", "ver", "over", "val", "field", "KEY", "max", "sum", "fix", "keys", "air", "mod"], "sc": [" Sc", "ng", "system", "cc", "cle", "ss", "cr", "rc", "cl", "bc", "cs", "desc", "sac", "ec", "esc", "sync", "Sc", "dec", "ch", "osc", "isc", "pc", "sys", "spec", "sub", "scl", "nc", "c", "SC", "sw", "gc", "st", "src", "sv", "screen", "nl", "scan", "sp", "asc", "sch", "anc", "sec", "usc", "sq"], "str": ["b", "m", "msg", "string", "s", "STR", "br", "char", "it", "f", "seq", "ocr", "url", "doc", "r", "z", "arr", "dr", "ctr", "Str", "t", "exp", "os", "ch", "pt", "enc", "cur", "buffer", "pr", "vol", "p", "spec", "print", "status", "form", "obj", "comm", "data", "txt", "sw", "g", "st", "v", "res", "ar", "input", "mt", "raw", "sl", "gr", "text", "div", "n", "dat", "tr", "sp", "utt", "fr", "err", "expr", "wr", "l", "nt"], "array": ["range", "rays", "string", "binary", "system", "library", "sequence", "value", "shared", "number", "r", "answer", "arr", " Array", "ary", "user", "arrow", "pair", "atomic", "window", "section", "row", "area", "record", "function", "stack", "instance", "buffer", "storage", "external", "slice", "list", "app", "sh", "var", "data", "trace", "shape", "sw", "v", "a", "ar", "raw", "all", "chain", "archive", "length", "Array", "audio", "angle", "angular", "vector", "map", "now", "table", "view", "ray", "collection", "upper", "stage", "attribute", "batch", "hash", "air"], "i": ["ii", "phi", "m", "xi", "me", "sim", "multi", "ri", "init", "bi", "e", "it", "f", "q", "u", "yi", "ci", "di", "I", "mi", "ie", "info", "gi", "index", "li", "ei", "si", "point", "pi", "iter", "ti", "g", "io", "my", "iri", "ij", "zi", "ui", "ms", "ini", "ai", "ic", "us", "iu", "ix", "ind", "ip", "y", "o", "is", "uri", "x", "im", "ori", "ami", "qi"], "str2": ["string3", "str8", "st1", " str8", "str3", "string5", "Str2", "str1", " str5", "j8", " str1", "j1", "j2", "string1", "str5", "Str3", "j5", "st5", "st8", "Str1", "st2", "string2", " str3", "Str5"], "j": ["ng", "oj", "b", "m", "adj", "msg", "og", "ja", "br", "it", "ji", "jj", "jc", "f", "q", "jen", "z", "by", "uj", "bj", "window", "el", "jump", "att", "jit", "ie", "json", "je", "pt", "pr", "ju", "kj", "ax", "off", "next", "note", "jl", "obj", "jo", "g", "bot", "v", "ia", "aj", "d", "jp", "ij", "block", "other", "dj", "J", "state", "tr", "tree", "ind", "fr", "ix", "jack", "js", "to", "y", "im", "ion", "err", "job"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  \\n  public static void main(String args[]){\\n    \\n    Scanner sc = new Scanner(System.in);\\n    \\n    long x = sc.nextLong();\\n    long year = 0;\\n    \\n    double kingaku = 100;\\n    \\n    do{\\n      \\n      kingaku = kingaku * 1.01;\\n      kingaku = Math.floor(kingaku);\\n      year++;\\n    }while(kingaku < x);\\n    \\n    System.out.println(year);\\n    \\n  }\\n  \\n}", "target": "107", "substitutes": {"sc": [" Sc", "ng", "system", "cc", "Scan", "tc", "ss", "cr", "rc", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "se", "ch", "pc", "isc", "osc", "soc", "uc", "sys", "spec", "mc", "scl", "c", "nc", "SC", "gc", "sw", "sv", "screen", "scan", "lc", "sp", "sel", "ser", "asc", "conv", "sch", "sec", "usc", "Sync", "sq"], "x": ["m", "check", "xi", "rx", "xp", "i", "e", "xs", "f", "dx", "number", "z", "time", "t", "xxx", "tx", "index", "xy", "ax", "p", "xa", "ex", "w", "ctx", "d", "v", "g", "step", "xx", "n", "ix", "xc", "y", "px", "max", "l", "X", "wx"], "year": ["month", "yle", "system", "ear", "course", "EAR", "yer", "ye", "years", "number", " years", "span", "time", "young", "row", "species", "Years", "book", "Year", "sky", " YEAR", "night", "index", "date", "ner", "cycle", "etime", "len", "count", "john", "week", "length", "yr", "day", "n", "birth", "common", "today", "id", "century", "ork", "y", "collection", "size"], "kingaku": ["keraku", "chingku", "chingaii", "kingagi", "kingaka", "keraka", "kedaku", "kedatsuki", "kingaji", "kerrito", " askingahi", "chingatsuki", "kingu", "kerpai", "lingpu", "kerendo", "kedpu", " kingahi", "chingahi", "kakra", "kingahi", "kedaka", "keratsuki", "kagi", "keraji", "kingku", "kedagi", "kerakra", "kingpu", "kedingu", "kerpu", "kaku", "kingendo", "krito", "kaii", "chingaku", "kingingu", " kingaji", "kingrito", "kedrito", "lingaku", "lingahi", "keragi", "kerku", "lingaka", "lingagi", "kedpai", "kingakra", "kingpai", "kingomsky", "kingaii", "chingagi", " askingomsky", "chingakra", "kingatsuki", " kingomsky", "kerahi", " askingaji", "lingku", "keringu", "lingpai", "keromsky", "kendo", "keraii", "kedendo", "katsuki", " askingaku"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tScanner sc = new Scanner(System.in);\\n\tfinal int MOD = 998244353;\\n\tfinal int MAX = Integer.MAX_VALUE;\\n\tfinal long LMAX = Long.MAX_VALUE;\\n\tint len = 200001;\\n\\n\\n\tvoid doIt() {\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint C = sc.nextInt();\\n\t\tint D = sc.nextInt();\\n\t\twhile(true) {\\n\t\t\tC -= B;\\n\t\t\tif(C <= 0) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t\tA -= D;\\n\t\t\tif(A <= 0) {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().doIt();\\n\t}\\n}\\n", "target": "186", "substitutes": {"sc": [" Sc", "system", "cc", "tc", "ss", "pb", "rc", "ko", "r", "cl", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "exec", "sys", "ck", "mc", "scl", "c", "nc", "sci", "SC", "gc", "txt", "inc", "ctx", "st", "fc", "sv", "scope", "dc", "scan", "lc", "sp", "asc", "conv", "ctrl", "sec", "usc", "syn", "sq"], "MOD": ["RO", "CLASS", "LOC", "ADD", "ROM", "MAC", "AD", "DEC", "MAP", "THIS", "TAG", " mod", "NO", "INC", "COM", "PER", "MD", "Mod", "MODE", "RC", "OD", "REF", "SPEC", "MAG", "KEY", "REM", "mod"], "MAX": ["CLASS", "CAN", " max", "Maximum", "TYPE", "MAC", "MAP", "RA", "MIN", "SIZE", "AN", "NUM", "NO", "IN", "VERSION", "ALL", "MA", "Max", "VAL", "MED", "LOCK", "MT", "MS", "MODE", "max", "KEY", "VALUE"], "LMAX": ["LNO", "Lmax", "Tmax", "lMax", "lmax", " LNO", "TMax", " LMax", "LMax", " Lmax", "lNO", "lMAX", "TNO", "TMAX"], "len": ["bytes", "offset", "cap", "h", "seq", "ln", "SIZE", "fun", "min", " length", "pos", "en", "count", "BL", "name", "mem", "length", "base", "EN", "n", "Len", "cmp", "Length", "LI", "ls", "size", "l", "cp"], "A": ["AC", "AT", "E", "P", "GA", "LA", "AD", "AA", "AS", "S", "CA", "As", "BA", "G", "AN", "AI", "AB", "I", "AH", "API", "L", "SA", "PA", "V", "ASC", "This", "And", "ACC", "H", "AE", "AF", "An", "AM", "AU", "a", "Y", "T", "IA", "DA", "CC", "AR", "JA", "M", "R", "EA", "AP"], "B": ["b", "BD", "P", "BB", "CB", "CA", "BF", "S", "BA", "G", "RB", "AB", "I", "OB", "NB", "BO", "L", "V", "BI", "TB", "N", "BS", "BL", " b", "IB", "Y", "DB", "J", "Q", "GB", "BG", "LB", "U", "M", "Bi", "BE", "BR", "Bs", "BC"], "C": ["AC", "CON", "E", "P", "F", "Co", "DC", "CB", "CM", "S", "CA", "G", "CI", "CO", "CS", "CW", "CR", "I", "EC", "CP", "L", "JC", "COM", "V", "CD", "c", "H", "N", "SC", "Y", "T", "K", "Q", "CE", "CV", "CT", "CC", "Count", "AR", "U", "M", "R", "Cs", "Z", "X", "O", "BC"], "D": ["DM", "E", "P", "F", "DF", "DE", "DC", "DL", "S", "DS", "G", "Dr", "L", "DO", "DP", "V", "N", "DI", "d", "Y", "T", "DB", "DA", "Q", "U", "M", "R", "DD", "Z", "O"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tvoid insertionSort(int[] A) {\\n\t\tfor (int i = 1; i < A.length; i++) {\\n\t\t\tint v = A[i];\\n\t\t\tint j = i - 1;\\n\t\t\twhile (j >= 0 && A[j] > v) {\\n\t\t\t\tA[j+1] = A[j];\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\tA[j+1] = v;\\n\t\t\tprintArray(A);\\n\t\t}\\n\t}\\n\\n\tvoid printArray(int[] A) {\\n\t\tSystem.out.print(A[0]);\\n\t\tfor (int i = 1; i < A.length; i++) {\\n\t\t\tSystem.out.print(\" \" + A[i]);\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n\\n\tvoid run() {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint[] A = new int[n];\\n\t\tfor (int i = 0; i < A.length; i++) {\\n\t\t\tA[i] = scan.nextInt();\\n\t\t}\\n\t\tprintArray(A);\\n\t\tinsertionSort(A);\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tnew Main().run();\\n\t}\\n\\n}\\n\\n", "target": "69", "substitutes": {"A": ["AT", "P", "At", "As", "D", "AST", "L", "V", "AE", "ACT", "AM", "AV", "Alpha", "Args", "JA", "U", "X", "EA", "AP", "Address", "AC", "B", "GA", "LA", "AA", "BA", "G", "SA", "MA", "AL", "RAM", "This", "H", "a", "Ar", "J", "R", "ATA", "E", "AS", "CA", "RA", "Abs", "mA", "AB", "Action", "W", "API", "Answer", "App", "All", "N", "AF", "An", "AU", "T", "TA", "ACE", "DB", "IA", "M", "C", "Z", "O", "F", "S", "I", "PA", "ACC", "NA", "Y", "HA", "Bar", "AY", "WA", "Array", "AR", "The"], "i": ["ji", "hi", "in", "ci", "mi", "list", "li", "ij", "ui", "ini", "ai", "us", "ice", "ix", "ion", "m", "multi", "e", "bi", "f", "iy", "at", "json", "ei", "pi", "a", "cli", "zi", "chain", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "fi", "ri", "init", "di", "k", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "MI", "ip", "o", "PI", "qi", "phi", "xi", "me", "sim", "s", "it", "ims", "z", "u", "t", "I", "this", "ie", "p", "point", "ex", "ic", "iu", "is", "key", "x", "batch"], "v": ["vs", "m", "b", "h", "value", "vm", "f", "vv", "e", "q", "av", "z", "u", "cv", "t", "k", "vp", "nv", "qv", "V", "vi", "ve", "uv", "p", "vd", "c", "tv", "sv", "inv", "lv", "ver", "val", "y", "vt", "o", "x", "l", "vc"], "j": ["b", "h", "m", "ja", "br", "it", "ji", "jj", "jc", "jac", "bo", "q", "z", "uj", "t", "row", "k", "jump", "lock", "rel", "jit", "json", "gov", "pt", "pr", "ju", "kj", "p", " l", "jl", "obj", "g", "res", "aj", "ij", "jp", "block", "J", "dj", "l", "ver", "js", "y", "x", "err", "job"], "scan": ["store", "out", "san", "check", "clean", "con", "system", "can", "skip", "see", "cat", "Scan", "ann", "nn", "in", "r", "scroll", "read", "sync", "black", "connect", "se", "seek", "ch", "sys", "proc", "sc", "reach", "log", "ner", "report", "p", "query", "c", "sur", "send", "gate", "parse", "score", "sql", "sr", "st", "scale", "sv", "bin", "screen", "search", "watch", "sp", "ser", " scanner", "look", "stat", "stan", "find"], "n": ["ng", "out", "m", "nan", "nn", "net", "number", "z", "ln", "t", "k", "ne", "ll", "ni", "nat", "p", "np", "c", "nc", "N", "pi", "nb", "d", "nu", "total", "no", "ns", "num", "nl", "sn", "na", "cn", "l", "nt"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String S = sc.next();\\n    System.out.println((S.charAt(0) != S.charAt(1) && S.charAt(1) != S.charAt(2) && S.charAt(2) != S.charAt(3)) ? \"Good\" : \"Bad\");\\n  }\\n}", "target": "73", "substitutes": {"sc": ["s", "system", "cle", "cc", "tc", "cr", "ss", "capt", "rc", "cl", "cv", "bc", "cs", "sm", "desc", "ec", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "uc", "sys", "mc", "sub", "c", "nc", "SC", "gc", "sv", "lc", "scan", "sp", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "S": ["B", "SM", "s", "STR", "SEC", "DS", "SN", "CS", "SO", "NS", "LESS", "SER", "ST", "L", "SA", "V", "SF", "RS", "SE", "SI", "SP", "STAT", "H", "N", "BS", "IS", "Si", "SL", "SQL", "ASS", "SU", "US", "VS", "SIM", "SS", "MS", "SAN", "SH", "GS", "SOURCE", "TS", "M", "SD", "RAW", "SAM", "SB", "JS"]}}
{"code": "import java.util.*;\\npublic class Main { \\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        String str = sc.next();\\n        if(str.charAt(a) != '-') {\\n          System.out.println(\"No\");\\n          return;\\n        }\\n        if(!isValid(str.substring(0, a), a) || !isValid(str.substring(a+1), b)) {\\n          System.out.println(\"No\");\\n          return;\\n        }\\n        System.out.println(\"Yes\");\\n    }\\n\\n    private static boolean isValid(String str, int len) {\\n      if(str.length() != len) return false;\\n      for(char c : str.toCharArray()) {\\n        if(!Character.isDigit(c)) return false;\\n      }\\n      return true;\\n    }\\n}", "target": "78", "substitutes": {"sc": ["sim", "cc", "cle", "tc", "cr", "ss", "rc", "ko", "cl", "sb", "bc", "cs", "ec", "desc", "cont", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "nc", "sh", "sci", "SC", "gc", "sw", "inc", "sv", "dc", "lc", "scan", "sp", "ser", "asc", "conv", "ctrl", "sch", "sec", "anc", "usc", "sq"], "a": ["aaa", "act", "m", "sta", "la", "oa", "j", "isa", "sa", "i", "e", "ama", "da", "r", "z", "am", "era", "span", "at", "t", "A", "au", "pos", "area", "ab", "ca", "index", "ax", "ma", "ac", "p", "ba", "ao", "ea", "af", "aka", "ta", "count", "an", "aa", "d", "ia", "aj", "ar", "all", "ga", "ai", "as", "alpha", "pa", "part", "va", "o", "ach", "x", "l", "ae"], "b": ["B", "h", "eb", "ob", "j", "i", "bi", "f", "bf", "r", "be", "sb", "fb", "bs", "bc", "ab", "ib", "cb", "bb", "p", "ba", "db", "amb", "rb", "nb", "g", "d", "v", "bp", "base", "n", "bound", "y", "o", "l", "wb"], "str": ["rs", "out", "m", "msg", "string", "s", "j", "STR", "seq", "char", "rep", "url", "it", "br", "dr", "r", "arr", "cl", "ctr", "Str", "desc", "cs", "t", "cont", "coll", "sync", "exp", "req", "ch", "enc", "pr", "cur", "list", "vol", "spec", "p", "form", "obj", "comm", "data", "txt", "sw", "res", "st", "g", "name", "iter", "input", "raw", "sl", "chain", "gr", "text", "div", "n", "dat", "tr", "sp", "utt", "fr", "js", "conv", "err", "stable", "nt"], "len": ["bytes", "s", "seq", "lf", "e", "cl", "ln", "lim", "t", "el", "lib", "pos", "enc", "L", "ll", "line", "level", "list", "en", "count", "num", "nl", "length", "lvl", "n", "Len", "sp", "cmp", "Length", "val", "dl", "ls", "size", "l", "nt"], "c": ["ct", "category", "char", "e", "cc", "f", "cat", "tc", "bc", "cs", "ec", "cd", "k", "cos", "ch", "ca", "pc", "cf", "cu", "ac", "mc", "p", "nc", "code", "g", "arc", "v", "fc", "etc", "abc", "ic", "chain", "ce", "dc", "lc", "xc", "conv", "unc", "o", "C", "col", "l", "cp", "vc"]}}
{"code": "import java.io.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]){\\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint num[] = new int[10];\\n\t\tfor(int i=0;i<10;i++){\\n\t\t\ttry{\\n\t\t\t\tnum[i] = Integer.parseInt(reader.readLine());\\n\t\t\t}\\n\t\t\tcatch(IOException e){\\n\t\t\t\t\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0;i<10;i++){\\n\t\t\tfor(int k=0;k<10-1;k++){\\n\t\t\t\tif(num[k]<num[k+1]){\\n\t\t\t\t\tint tmp = num[k];\\n\t\t\t\t\tnum[k] = num[k+1];\\n\t\t\t\t\tnum[k+1] = tmp;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor(int i=0;i<3;i++){\\n\t\t\tSystem.out.println(num[i]);\\n\t\t}\\n\t}\\n}", "target": "164", "substitutes": {"reader": ["rot", "redo", "context", "iper", "rc", "rar", "r", "rl", "file", "row", "dd", "iterator", "handler", "read", "this", "buffer", "client", "er", "ner", "ro", "parser", "inner", "anger", "iter", "res", "loader", "ipper", "Reader", "open", "runner", "stream", "readable", "ser", "oder", "builder", "writer", "uri", "upper", "rr"], "num": ["mat", "save", "um", "check", "msg", "con", "digit", "mon", "multi", "test", "cache", "Num", "number", "prim", "tim", "net", "phy", "unit", "missing", "NUM", "dec", "news", "pn", "nam", "zero", "index", "cu", "met", "nm", "date", "en", "np", "gen", "note", "form", "count", "rub", "draw", "get", "nb", "dim", "cal", "nu", "total", "add", "no", "mem", "alpha", "zip", "n", "dat", "na", "mark", "val", "ver", "conv", "hex", "alph", "one", "nom", "im", "sum", "stat", "find", "nt"], "i": ["ii", "phi", "m", "gu", "xi", "me", "multi", "sim", "j", "ri", "eu", "it", "bi", "init", "ji", "hi", "ims", "iti", "u", "yi", "ci", "di", "I", "rel", "mi", "this", "ie", "info", "gi", "index", "mu", "li", "ei", "si", "print", "status", "pi", "sql", "iter", "ti", "g", "ia", "io", "cli", "name", "v", "zi", "ui", "ini", "ai", "ic", "us", "chain", "iu", "n", "ix", "ind", "id", "to", "ip", "y", "is", "uri", "im", "ori", "batch", "ami", "ity", "qi", "ki"], "k": ["ask", "mk", "unk", "tek", "j", "kar", "sk", "dk", "ke", "ik", "ko", "q", "kn", "kt", "kr", "km", "ok", "wk", "ikk", "kh", "ak", "uk", "ck", "kj", "kid", "kl", "ka", "kat", "w", "g", "ku", "ack", "K", "ijk", "kk", "kan", "kw", "ark", "isk", "kg", "key", "ek", "tk", "ki"], "tmp": ["prev", "mk", "term", "img", "j", "amp", "test", "jj", "cache", "tc", "needed", "temp", "same", "t", "xxx", "emp", "perm", "result", "cur", "pkg", "acc", "np", "prefix", "mp", "obj", "mmm", "txt", "nb", "ctx", "mb", "tv", "etc", "orig", "td", "kk", "yy", "kw", "sp", "pot", "cmp", "mm", "tt", "nom", "cp", "comp", "tk"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u5165\u529b\\n            int c[] = new int[5];\\n            int sum[] = new int[5];\\n            for (int i = 0; i < 5; i++) {\\n                c[i] = Integer.parseInt(in.next());\\n            }\\n\\n\\n            for (int i = 0; i < 5; i++) {\\n                sum[i] = c[i];\\n                for (int j = 0; j < 5; j++) {\\n                    if (j != i) {\\n                        if (c[j] % 10 == 0) {\\n                            sum[i] += c[j];\\n                        } else {\\n                            sum[i] += c[j] + 10 - c[j] % 10;\\n                        }\\n                    }\\n                }\\n            }\\n            // \u51fa\u529b\\n            Arrays.sort(sum);\\n            out.println(sum[0]);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "63", "substitutes": {"inputStream": ["helloSocket", "inputSource", "inputSocket", "outputStreamer", " inputSocket", "imageStreamer", "outStream", " inputSource", "outputSteam", "inputstream", "inputSteam", " inputSteam", "outputSocket", "outSteam", "imagestream", "outStreamer", "imageSteam", "helloSteam", "outstream", "outputSource", "helloSource", "outputstream", "imageStream", "inputStreamer", "helloStream"], "outputStream": ["resultNow", "inputNow", "outputNow", "resultStream", " outputSteam", "inputForm", "outputSteam", "resultForm", "inputSteam", " outputNow", " outputForm", "resultSteam", "outputForm", " outputScreen", "resultScreen", "outputScreen", "inputScreen"], "in": ["current", "In", "inf", "isin", "s", "kin", "i", "it", "init", "run", "r", "file", "by", "rin", "reader", "read", "IN", "this", "info", "xml", "on", "er", "gin", "null", "en", "ins", "inside", "inner", "local", "inn", "inc", "iter", "get", "cin", "sin", "st", "output", "io", "input", "all", "bin", "ini", "env", "ic", "thin", "or", "l", "ind", "id", "din", "o", "is", "source", "login", "al", "err", "rt"], "out": ["check", "class", "b", "msg", "s", "can", "aos", "it", " OUT", "cache", "run", "cmd", "net", "r", "OUT", "user", "temp", "t", "at", "ou", "outs", "good", "os", "outer", "exit", "this", "exec", "ch", "group", "result", "sys", "client", "Out", "log", "list", "report", "null", "p", "er", "inner", "ex", "write", "gc", "w", "res", "output", "io", "name", "OU", "env", "screen", "co", "gr", "n", "timeout", "table", "to", "flush", "conv", "o", "writer", "sum", "err", "gt", "nt"], "solver": ["Sanger", " solution", "resolve", "resorter", "sorter", "resolution", "sanger", "resanger", "resolved", "ssolved", "ssorter", "solution", "Solver", "resolver", "ssolution", "solved", "ssolver", " solve", "Solve", " solved", " sanger", "solve", " sorter", "Solution"], "testNumber": [" attemptCounter", " caseNumber", "testnumber", " attemptNo", " testCounter", " testNo", " attemptnumber", " casenumber", " caseCounter", "testNo", "testCounter", " attemptNumber", " caseNo", " testnumber"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc=new Scanner(System.in);\\n\t\t\\n\t\tint n=sc.nextInt();\t\t//ID\u30ab\u30fc\u30c9\\n\t\tint m=sc.nextInt();\t\t//\u30b2\u30fc\u30c8\\n\t\t\\n\t\tint l=0;\\n\t\tint r=n;\\n\t\t\\n\t\tfor(int i=0;i<m;i++) {\\n\t\t\tint l2=sc.nextInt();\\n\t\t\tint r2=sc.nextInt();\\n\t\t\t\\n\t\t\tl=Math.max(l,l2);\\n\t\t\tr=Math.min(r,r2);\\n\t\t}\\n\t\tint ans=r-l+1;\\n\t\tif(ans>0) System.out.println(ans);\\n\t\telse System.out.println(0);\\n\t}\\n}", "target": "124", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\tScanner sca = new Scanner(System.in);\\n\tint a = sca.nextInt();\\n\tint b = sca.nextInt();\\n\tint answer;\\n\tif(a > b) {\\n\t\tif(a == 3 && b == 2) {\\n\t\t\tanswer = 1;\\n\t\t}\\n\t\telse if(a == 3 && b == 1) {\\n\t\t\tanswer = 2;\\n\t\t}\\n\t\telse {\\n\t\t\tanswer = 3;\\n\t\t}\\n\t}\\n\telse {\\n\t\tif(b == 3 && a == 2) {\\n\t\t\tanswer = 1;\\n\t\t}\\n\t\telse if(b == 3 && a == 1) {\\n\t\t\tanswer = 2;\\n\t\t}\\n\t\telse {\\n\t\t\tanswer = 3;\\n\t\t}\\n\t}\\n\\n\tSystem.out.println(answer);\\n\\n\tsca.close();\\n\t}\\n}", "target": "236", "substitutes": {"sca": [" scao", " scach", "cusb", "descach", "scao", "SCa", " scb", "cusn", "cusa", "compsa", "cusaj", "compao", " scas", "ccA", "scas", "ccas", "SCsa", "scn", " scan", "descaj", "desca", " scA", "SCas", "descb", "compas", "scsa", "escas", "descn", "scb", "escao", "scA", " scaj", "compa", "scach", "escsa", "specar", " scn", "descar", "descan", "cca", " scar", "specach", "specan", "esca", "scan", " scsa", "ccsa", "scar", "SCA", "scaj", "speca"], "a": ["act", "aaa", "aff", "la", "apa", "oa", "enna", "ap", "sa", "aq", "eas", "i", "e", "da", "am", "ed", "era", "at", "el", "A", "au", "area", "att", "this", "ab", "ah", "ca", "ak", "ax", "er", "ma", "app", "ac", "acc", "ba", "ao", "ea", "c", "ta", "le", "an", "aa", "ack", "ia", "aj", "ar", "add", "ga", "ai", "as", "ee", "alpha", "pa", "va", "ach", "al", "ae"], "b": ["B", "m", "h", "eb", "ob", "j", "br", "i", "e", "bi", "f", "it", "r", "be", "sb", "body", "z", "fb", "by", "bs", "bc", "business", "lib", "blue", "ab", "ib", "cb", "gb", "bis", "beta", "bb", "back", "app", "p", "c", "ba", "db", "rb", "obj", "nb", "g", "bp", "v", "mb", "d", "bar", "base", "n", "to", "bound", "y", "x", "reb", "l", "wb", "job"], "answer": ["ask", "message", "offer", "equ", "bring", "blank", "see", "sequence", "wer", "value", "interpret", "cache", "urn", "about", "eni", "asm", "window", "swers", "poll", "exit", "remember", "our", "ah", "ror", "qv", "result", "accept", "review", "ve", "entry", "Answer", "query", " Answer", "answered", "come", "next", "adder", "consider", "turn", "form", "comment", "response", "option", "draw", "notice", "render", "rn", "version", "approximately", "know", "onse", "ace", "adr", "vote", "search", "ee", "archive", "fill", "reply", "don", "onder", "ver", "val", "issue", "again", " answered", "say", "question", " unanswered"]}}
{"code": "import java.io.*;\\n\\nclass Main\\n{\\n    public static void main (String[ ] args) throws Exception\\n    {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String str[] = br.readLine().split(\" \");\\n        \\n        int n = Integer.parseInt(str[0]);\\n        int m = Integer.parseInt(str[1]);\\n\\n        int[][] a = new int[n][m];\\n        int[] b = new int[m];\\n\\n        for(int i = 0; i < n; i++)\\n        {\\n            String str2[] = br.readLine().split(\" \");\\n            for(int j = 0; j < m; j++)\\n            {\\n                a[i][j] = Integer.parseInt(str2[j]);\\n            }\\n        }\\n        \\n        for(int k = 0; k < m; k++)\\n        {\\n            String str3 = br.readLine();\\n            b[k] = Integer.parseInt(str3);\\n        }\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            int ans = 0;\\n            for(int j = 0; j < m; j++)\\n            {\\n                ans += a[i][j] * b[j];\\n            }\\n            System.out.println(ans);\\n        }\\n    }\\n}", "target": "185", "substitutes": {"br": ["bridge", "lr", "Br", "shr", "bl", "cr", "bf", "r", "dr", "ctr", "driver", "ger", "kr", "bs", "buf", "el", "nr", "rel", "ch", "pt", "pr", "bb", "bd", "bm", "hr", "ptr", "db", "rb", "sr", "bro", "bp", "jp", "gr", "vr", "bt", "yr", "div", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "err", "rem", "mr", "BR"], "str": ["rs", "string", "s", "sol", "STR", "char", "url", "doc", "cr", "ctr", "r", "dr", "arr", "Str", "t", "read", "att", "exp", "ch", "enc", "usr", "vol", "oct", "print", "stri", "sw", "txt", "st", "arc", "name", "input", "sl", "chain", "gr", "text", "div", "dat", "tr", "sp", "sts", "fr", "wr"], "n": ["nan", "nn", "net", "fn", "r", "z", "ln", "t", "ne", "mn", "network", "conn", "on", "ni", "nm", "en", "p", "np", "c", "nc", "N", "pi", "an", "nb", "d", "v", "nu", "name", "no", " N", "ns", "num", "un", "sn", "na", "y", "o", "x", "dn", "cn", "l", "nt"], "m": ["mk", "mat", "h", "mun", "me", "s", "mode", "f", "dm", "q", "r", "z", "mis", "cm", "sm", "t", "mi", "pm", " M", "mn", "md", "perm", "ma", "mu", "p", "mc", "c", "bm", "pi", "gm", "g", "d", "v", "mem", "mt", "ms", "rm", "num", "tm", "M", "mm", "y", "o", "x", "im", "em", "l", "rem", "mr", "mod"], "a": ["aaa", "aff", "h", "apa", "s", "oa", "ap", "sa", "aq", "r", "am", "av", "u", "t", "at", "A", "ab", "ca", "ma", "ac", "p", "ba", "ao", "c", "an", "aa", "d", "v", "ar", "ga", "ai", "as", "va", "o"], "b": ["B", "h", "eb", "ob", "bo", "bl", "bi", "e", "bf", "r", "z", "sb", "be", "fb", "bs", "bc", "t", "ab", "cb", "ib", "gb", "bis", "another", "bb", "p", "ba", "c", "db", "rb", "g", "v", "bin", "o", "l", "wb"], "i": ["ii", "phi", "xi", "me", "sim", "multi", "ri", "init", "bi", "it", "f", "ji", "hi", "q", "in", "dr", "iti", "ci", "di", "I", "rel", "mi", "this", "ie", "info", "gi", "index", "ir", "li", "ei", "si", "status", "pi", "ex", "iq", "ti", "iter", "g", "ia", "name", "v", "ij", "zi", "ui", "ini", "ai", "ic", "or", "iu", "ind", "ix", "id", "ip", "uri", "is", "im", "ion", "ret", "ami", "ity", "qi", "ki"], "str2": [" str02", "sp2", "STR2", "iter102", "sp1", "r2", "str102", "Str2", "str02", "STR102", "str1", "iter3", " str1", "STR3", "STRTwo", "iterTwo", "Str102", "StrTwo", "Str3", "r1", "iter2", "r02", "sp02", "strTwo"], "j": ["ng", "jet", "oj", "out", "og", "ja", "ev", "it", "ji", "jj", "jc", "bi", "jac", "q", "z", "by", "uj", "bj", "right", "el", "ph", "son", "jump", "rel", "jit", "py", "att", "json", "je", "pt", "pr", "ju", "kj", "ax", "off", "er", "kid", "xy", "prop", "p", "note", "jl", "obj", "jo", "g", "other", "Ja", "v", "aj", "jp", "ij", "dj", "jas", "J", "l", "ix", "fr", "ind", "child", "js", "y", "o", "key", "ion", "err", "job", "ki"], "k": ["mk", "unk", "kar", "sk", "dk", "kin", "ke", "ko", "ik", "kn", "q", "kt", "kr", "km", "ok", "wk", "kh", "kind", "ak", "ck", "uk", "kj", "kid", "kl", "ka", "ks", "K", "ijk", "kk", "kw", "ark", "tk", "kg", "isk", "key", "ek", "ku", "ki"], "str3": ["dr03", "st3", "str6", "int03", " str4", "dr4", "join03", "dr53", "dr3", "jointhird", "strthird", "st4", "Str6", "st53", "intthird", "str53", "Str03", "Str3", "str4", "int3", " str03", "str03", "join6", "int6", "Strthird", " str53", "st03", "join3"], "ans": ["uns", "posts", "vs", "rans", "ats", "aos", "xs", "ann", "cas", "vals", "lan", "ians", "ens", " means", "ands", "cs", "AN", "aus", "outs", "acs", "anas", "ams", "ums", "offs", "eds", "aps", "anks", "ks", "books", "ins", "an", "lines", "ros", "ars", "ras", "ms", "ents", "as", "ns", "orts", "ows", "ants", "us", "ids", "ons", "yes", "ds", "arts", "ls", "ANS", "ports", "amps", "ads"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.List;\\n\\npublic class Main {\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\\n        String s = stdin.readLine();\\n        List<String> weathers = Arrays.asList(\"Sunny\", \"Cloudy\", \"Rainy\");\\n        int x = (weathers.indexOf(s) + 1) % 3;\\n        System.out.println(weathers.get(x));\\n    }\\n}\\n", "target": "60", "substitutes": {"stdin": ["stout", "sentin", " stdout", "standardIn", "sentIn", "dout", " stdIN", "stdIN", " stdrin", "dIn", " stdIn", "stdIn", "stIn", "dIN", "standardin", "sentout", "stdrin", "stIN", "din", "sentrin", "standardout", "stdout", "standardrin", "stin"], "s": ["hs", "rs", "b", "h", "m", "string", "sol", "i", "str", "ss", "in", "r", "S", "z", "t", "sym", "p", "c", " ls", "w", "g", "res", "v", "name", "a", "sv", "ws", "ns", "n", "sts", "ps", "y", "ls", "ses", "l"], "weathers": [" weatherls", "fores", "aws", "awls", "Weatheries", "county", "Weathern", " weatheries", "threaty", "threatses", " weatherers", "foreses", "winds", "forey", " weathern", "Weathers", "nows", "counts", "Weatherls", "nowes", "weathery", "awn", "weatheres", " weatheres", "nowers", "awies", "windes", "winders", "weatherers", "weatheries", "weatherses", "countses", "weatherls", "threats", "weathern"], "x": ["xi", "rx", "xp", "i", "xs", "dx", "ox", "z", "mx", "xd", "xxx", "tx", "ux", "index", "xy", "ax", "nex", "xa", "ex", "yx", "num", "xf", "xx", "n", "ix", "xc", "inx", "y", "px", "key", "fx", "X", "wx"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint D = sc.nextInt();\\n\t\tint N = sc.nextInt();\\n\t\tsc.close();\\n\t\t\\n\t\tint ans = 1;\\n\t\tif(D == 1)\\n\t\t\tans = 100;\\n\t\telse if(D == 2)\\n\t\t\tans = 10000;\\n\t\tans *= N + N/100;\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "245", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "ko", "rc", "cl", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "sub", "SC", "gc", "inc", "arc", "st", "sv", "scan", "lc", "sp", "cmp", "asc", "conv", "ctrl", "sch", "anc", "sec", "usc", "syn", "sq"], "D": ["DM", "B", "IND", "P", "Dir", "ID", "DF", "DE", "DN", "DC", "PD", "DL", "S", "DS", "GO", "L", "DO", "DP", "ND", "V", "H", "AND", "MD", "DI", "Done", "d", "T", "DATA", "K", "DB", "Does", "Q", "PART", "DOM", "Ds", "M", "R", "DIR", "C", "DD", "JD", "LD"], "N": ["B", "E", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "AN", "NS", "I", "NUM", "A", "W", "NC", "NB", "L", "V", "TN", "Size", "H", "CN", "NT", "NA", "T", "K", "n", "M", "R", "ANS", "C", "Na", "O"], "ans": ["unes", "posts", "uns", "rs", "nan", "ats", "aos", "rans", "xs", "ups", "pan", "ann", "cas", "ians", "vals", "lan", "ens", " means", "ones", "aus", "AN", "cs", "parts", "outs", "lets", "ops", "sets", "anes", "offs", "views", "aps", "eds", "anks", "ks", "locks", "books", "ins", "an", "An", "lines", "ros", "ars", "ms", "ents", "as", "ns", " scans", "ows", "ants", "arms", "ids", "orders", "ons", "oos", "ds", "vers", "arts", "ls", "ANS", "amps", "olds", "ads"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        solve(System.in, System.out);\\n    }\\n\\n    static void solve(InputStream is, PrintStream os) {\\n        // Your code here!\\n        Scanner scan = new Scanner(is);\\n        int A = scan.nextInt();\\n        int B = scan.nextInt();\\n\\n        long ans = lcm(A, B);\\n\\n        os.println(ans);\\n    }\\n\\n    static public long lcm(long a, long b) {\\n        if(a == b)\\n            return a;\\n\\n        if(a > b) {\\n            long tmp = a;\\n            a = b;\\n            b = tmp;\\n        }\\n\\n        long answer =  a*(b/(gcd(a, b)));\\n        return answer;\\n    }\\n\\n    static public long gcd(long a, long b) {\\n        while(a > 0) {\\n            long tmpa = a;\\n            a = b % a;\\n            b = tmpa;\\n        }\\n        return b;\\n    }\\n}", "target": "67", "substitutes": {"is": ["ii", "ri", "isa", "i", "fs", "iris", "mis", "iso", "ib", "isc", "bis", "sys", "Is", "si", "ais", "ys", "io", "ms", "ai", "ic", "as", "ish", "ios", "iu", "ip", "ir", "IS"], "os": ["oss", "ost", "por", "aos", "pid", "po", "ocr", "om", "ou", "pos", "acs", " nos", "proc", "op", "ot", "ois", "ar", "OS", "or", "us", "osi", "ios", " pas", "oos", "osp", "ps", "oses", "o", "Os"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main{\\n     static int dp[];\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        int N=sc.nextInt(),M=sc.nextInt();\\n        int arr[]=new int[N];\\n        for (int i=0;i<M;i++) arr[i]=sc.nextInt();\\n        int sum=0;\\n        for (int i=0;i<M;i++)\\n        {\\n            sum+=arr[i];\\n        }\\n        if ( sum<=N ) System.out.println(N-sum);\\n        else System.out.println(-1);\\n    }\\n}\\n/*\\n\\n */", "target": "108", "substitutes": {"dp": [" tmp", " stamp", " total", " alloc", " obj", " samples", " seen", " cat", " diff", " iP", " indices", " np", " avail", " pos", " init", " ind", " weights", " params", " seed", " def", " df", " chars", " reps", " sp", " av", " dat", " dim", " counts", " pars", " res"], "br": ["bridge", "Tr", "b", "lr", "Br", "shr", "bl", "bsp", "cr", "bf", "dr", "r", "sb", "bern", "ger", "ctr", "kr", "bs", "bc", "buf", "rob", "rel", "bra", "ch", "pt", "pr", "bb", "next", "bm", "hr", "rb", "sr", "bro", "bp", "bre", "brace", "jp", "gr", "vr", "bt", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "browser", "mr", "BR", "abl"], "st": ["ost", "sta", "ct", "s", "sol", "bl", "lo", "ss", "cr", "ft", "dr", "be", "r", "sb", "nd", "inst", "sm", "t", "th", "sty", "se", "so", "stack", "ST", "pt", "std", "start", "first", "est", "ist", "p", "sh", "stri", "sw", "St", "mt", "ust", "sv", "step", "sl", "const", "l", "bt", "et", "sn", "sts", "sp", "lt", "ts", "rest", "stage", "stat", "ste", "rt", "stable", "ut", "nt"], "str": ["msg", "string", "s", "rec", "STR", "shr", "char", "ocr", "r", "dr", "ctr", "Str", "inst", "t", "set", "cont", "coll", "enc", "pr", "result", "cur", "sys", "buffer", "spec", "next", "p", "print", "comment", "txt", "g", "res", "v", "raw", "sl", "ns", "gr", "text", "div", "n", "tr", "sp", "fr", "hex", "ent", "del", "stable"], "sc": [" Sc", "ct", "cle", "cc", "tc", "ss", "cr", "rc", "ctr", "cl", "bc", "cs", "desc", "esc", "Sc", "ctl", "isc", "osc", "pc", "ch", "exec", "cu", "uc", "sys", "psc", "spec", "mc", "scl", "nc", "c", "sh", "si", "SC", "gc", "sr", "ctx", "fc", "sv", "dc", "sic", "lc", "ser", "asc", "sd", "sch", "disc", "sec", "usc", "sq"], "N": ["B", "NH", "E", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NL", "NS", "I", "D", "GN", "NO", "NV", "NUM", "NP", "NC", "NB", "L", "ND", "V", "TN", "NM", "MN", "H", "NT", "NA", "Y", "T", "K", "J", "NE", "n", "R", "C", "Na"], "M": ["DM", "SM", "m", "P", "F", "TM", "MX", "MAN", "EM", "MM", "S", "G", "LM", "MO", "I", "D", "L", "MP", "ALL", "MA", "V", "MN", "H", "MD", "Ma", "MC", "T", "PM", "IM", "J", "MT", "MS", "MH", "R", "MI", "MON", "JM", "ME", "C", "O"], "arr": ["aaa", "adj", "arb", "img", "shr", "addr", "bl", "par", "dr", "av", "inst", "dict", "buf", "au", "coll", "rel", "att", "agg", "pl", "art", "attr", "pr", "sys", "vol", "app", "var", "obj", "data", "aug", "array", "aa", "cal", "res", "add", "ars", "ar", "Ar", "gr", "bar", "Array", "dat", "fr", "ang", "val", "ind", "ray", "elt", "alph", "frac"], "i": ["ii", "phi", "m", "gu", "xi", "multi", "j", "fi", "ri", "sim", "eu", "it", "bi", "init", "ji", "e", "hi", "q", "ims", "dr", "u", "span", "ci", "Ti", "di", "I", "mi", "wi", "ie", "info", "gi", "php", "li", "ei", "si", "status", "pi", "ti", "g", "v", "io", "cli", "my", "ij", "ui", "ms", "ini", "ic", "ai", "us", "\u0438", "iu", "ice", "n", "ix", "id", "MI", "ip", "y", "o", "is", "im", "oi", "ami", "ity", "qi", "ki"], "sum": ["sam", "out", "um", "sim", "tmp", "sa", "doc", "cache", "ul", "missing", "ass", "set", "good", "diff", "se", "med", "hum", "result", "zero", "index", "vol", " SUM", "si", "SI", "acc", "su", "count", "cum", "summary", "cal", "scale", "add", "total", "mem", "SU", "num", "us", "weight", "average", "n", "Sum", "mary", "na", "mean", "cmp", "max", "size", "sup", "hash", "tail", "sample"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6Scanner scan = new Scanner(System.in);\\n\\n        Scanner scan = new Scanner(System.in);\\n\\n        // \u5165\u529b\u5024\u306e\u500b\u6570\\n        int n = scan.nextInt();\\n\\n        // \u30ab\u30a6\u30f3\u30c8\\n        int count = 0;\\n\\n        boolean flag = true;\\n\\n        // \u5165\u529b\u5024\u306e\u30ea\u30b9\u30c8\\n        ArrayList<Integer> list = new ArrayList();\\n\\n        for(int i = 0; i < n; i++) {\\n        \tlist.add(scan.nextInt());\\n        }\\n\\n        // \u5165\u529b\u3055\u308c\u305f\u5024\u3092\u8868\u793a\\n        for(int i = 0; i < list.size(); i++) {\\n\\n        \t// \u5024\u304c\u5947\u6570\u306a\u3089\u30d5\u30e9\u30b0flase\\n        \tif((int)list.get(i)%2 != 0) {\\n        \t\tflag = false;\\n        \t}\\n\\n        \t//System.out.println(\"list\u306e\"+ i + \"\u756a\u76ee => \" + list.get(i));\\n        }\\n\\n\\n        while(flag) {\\n        \tfor(int i = 0; i < list.size(); i++) {\\n\\n\\n            \tlist.set(i, (int)list.get(i)/2);\\n            \t//System.out.println(\"list\u306e\"+ i + \"\u756a\u76ee => \" + list.get(i));\\n            \tif((int)list.get(i)%2 != 0) {\\n            \t\tflag = false;\\n            \t}\\n\\n\\n            }\\n        \tcount++;\\n        }\\n\\n        System.out.println(count);\\n\t}\\n\\n}\\n", "target": "196", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n \\npublic class Main {\\n \\n\tvoid submit() {\\n\t    \\n\t    double L = nextDouble();\\n\t    \\n\t    out.println((L/3)*(L/3)*(L/3));\\n\t    \\n\t}\\n \\n\tvoid preCalc() {\\n \\n\t}\\n \\n\tvoid stress() {\\n \\n\t}\\n \\n\tvoid test() {\\n \\n\t}\\n \\n\tMain() throws IOException {\\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\tout = new PrintWriter(System.out);\\n\t\tpreCalc();\\n\t\tsubmit();\\n\t\t//stress();\\n\t\t//test();\\n\t\tout.close();\\n\t}\\n \\n\tstatic final Random rng = new Random();\\n \\n\tstatic int rand(int l, int r) {\\n\t\treturn l + rng.nextInt(r - l + 1);\\n\t}\\n \\n\tpublic static void main(String[] args) throws IOException {\\n\t\tnew Main();\\n\t}\\n \\n\tBufferedReader br;\\n\tPrintWriter out;\\n\tStringTokenizer st;\\n \\n\tString nextToken() {\\n\t\twhile (st == null || !st.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn st.nextToken();\\n\t}\\n \\n\tString nextString() {\\n\t\ttry {\\n\t\t\treturn br.readLine();\\n\t\t} catch (IOException e) {\\n\t\t\tthrow new RuntimeException(e);\\n\t\t}\\n\t}\\n \\n\tint nextInt() {\\n\t\treturn Integer.parseInt(nextToken());\\n\t}\\n \\n\tlong nextLong() {\\n\t\treturn Long.parseLong(nextToken());\\n\t}\\n \\n\tdouble nextDouble() {\\n\t\treturn Double.parseDouble(nextToken());\\n\t}\\n}", "target": "53", "substitutes": {"L": ["P", "LOC", "LA", "LOG", "mL", "RL", "DL", "LP", "LR", "LL", "S", "LIN", " Li", "G", "LG", "NL", "LM", "LT", "I", "D", "LV", "HL", "VL", "V", " R", "LC", "LAN", "H", " l", "N", " LG", "LU", "BL", "SL", "K", "LE", "J", "Q", "length", "TL", "LS", "LOD", "LB", "Language", "Length", "M", "R", "LI", "EL", "LOAD", "Z", "l", "LD"], "br": ["serv", "sam", "lr", "shr", "bl", "bi", "rid", "ctr", "dr", "rl", "kr", "rin", "ru", "ch", "pr", "rr", "hr", "form", "sr", "st", "gr", "bt", "dat", "tr", "fr", "bh", "mr", "BR"], "out": ["store", "s", "gt", "it", "str", "cache", "error", "put", "in", "OUT", "ln", "u", "t", "pool", "ou", "outs", "pos", "os", "outer", "exit", "info", "ch", "up", "exec", "result", "sys", "Out", "log", "list", "report", "null", "p", "print", "status", "inner", "obj", "ex", "write", "w", "res", "v", "output", "io", "name", "screen", "n", "table", "o", "writer", "err", "OU"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tint N = 3;\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint[] As = new int[N];\\n\t\tAs[0] = sc.nextInt();\\n\t\tAs[1] = sc.nextInt();\\n\t\tAs[2] = sc.nextInt();\\n\\n\t\tint minCost = Integer.MAX_VALUE;\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tfor (int j = 0; j < N; j++) {\\n\t\t\t\tfor (int k = 0; k < N; k++) {\\n\t\t\t\t\tif ( i != j && j != k && k != i ) {\\n\t\t\t\t\t\tint cost = 0;\\n\t\t\t\t\t\tcost += 0;\\n\t\t\t\t\t\tcost += Math.abs(As[i] - As[j]);\\n\t\t\t\t\t\tcost += Math.abs(As[j] - As[k]);\\n\\n//\t\t\t\t\tSystem.out.println(i +\",\"+ j + \",\" + k + \",\" + cost);\\n//\\n\t\t\t\t\t\tif (cost < minCost) {\\n\t\t\t\t\t\t\tminCost = cost;\\n\t\t\t\t\t\t}\\n//\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(minCost);\\n\t}\\n}", "target": "247", "substitutes": {"N": ["NH", "Node", "P", "F", "UN", "NN", "NI", "Ni", "Num", "S", "NR", "SN", "NL", "AN", "NS", "I", "NV", "D", "NO", "CNN", "GN", "ANY", "NP", "NC", "NB", "L", "ND", "V", "TN", "Size", "NG", "NM", "MN", "NT", "NA", "T", "K", "J", "Q", "OT", "NE", "n", "No", "M", "R", "Length", "C", "Z", "REM", "O"], "sc": [" Sc", "system", "cc", "Scan", "ss", "tc", "cr", "capt", "rc", "r", "cl", "pb", "bc", "cs", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "mc", "scl", "c", "nc", "SC", "gc", "inc", "ctx", "arc", "st", "fc", "sv", "dc", "scan", "lc", "sp", "conv", "ctrl", "sch", "anc", "sec", "usc", "sq"], "As": ["If", "Des", "Will", "At", "Or", "Ass", "Using", "Ns", "Also", "AS", "Its", "Rs", "Att", "Pers", "S", "Acc", "A", "Others", "Js", "Gs", "Ps", "May", "By", "ams", "Parents", "Us", "Am", "Each", "Is", "And", "Has", "Ms", "App", "All", "Fs", "Maps", "Cas", "Es", "An", "Ac", "Pres", "Were", "Vs", "ras", "These", "Ash", "Ins", "Les", "Ar", "Las", "as", "Same", "Cons", "Ws", "Ab", "Ts", "Some", "Array", "To", "With", "Ds", "Are", "Have", "Os", "The", "Ram", "Ah", "Bs"], "minCost": ["Mincost", "minValue", "MinDistance", "MinValue", "bestcost", "MinCost", "maxCost", "minDistance", "bestValue", "maxValue", "bestDistance", "maxDistance", "mincost", "bestCost", "maxcost"], "i": ["ii", "phi", "m", "xi", "ri", "init", "bi", "it", "ji", "ik", "hi", "ims", "ci", "at", "di", "I", "t", "mi", "ie", "gi", "ir", "li", "ei", "si", "pi", "iq", "ti", "ia", "v", "io", "ar", "ij", "zi", "ui", "ini", "ai", "ic", "us", "iu", "n", "ix", "ind", "id", "ip", "y", "is", "x", "im", "ret", "ami", "ki"], "j": ["oj", "b", "out", "gu", "og", "ja", "br", "it", "ji", "jj", "jc", "str", "bo", "jac", "q", "z", "be", "uj", "bj", "bs", "jump", "ie", "json", "je", "pt", "pr", "kj", "off", "vol", "note", "ot", "jl", "obj", "jo", "g", "ia", "v", "aj", "jp", "ij", "dj", "J", "jas", "them", "l", "n", "fr", "js", "y", "o", "im", "ret", "err", "gh", "job", "ijk"], "k": ["mk", "unk", "dk", "sk", "kar", "ke", "ko", "ik", "kn", "q", "kt", "kr", "km", "ok", "wk", "th", "kh", "kind", "ak", "ck", "uk", "kj", "ac", "kid", "kl", "ka", "ks", "g", "ku", "K", "kk", "kan", "kw", "ark", "n", "tk", "isk", "kg", "key", "ek", "ijk", "ki"], "cost": ["save", "check", "fee", "tax", "value", "doc", "ctr", "driver", "cast", "CO", "goal", "window", "dev", "resource", "cos", "diff", "price", "charge", "loss", "cf", "result", "Cost", "index", "help", "acc", "match", "distance", "transform", "score", "contact", "comment", "draw", "efficiency", "cons", "scale", "cal", "rank", "ace", "add", " costs", "step", "rice", "weight", "co", "length", "ice", "risk", "gradient", "work", "condition", "key", "max", "task", "sum", "call", "cp"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.*;\\n\\npublic class Main\\n{\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt() % 10;\\n        if (n == 3) {\\n            System.out.println(\"bon\");\\n        }\\n        else if (n == 0 || n == 1 || n == 6 || n == 8) {\\n            System.out.println(\"pon\");\\n        }\\n        else {\\n            System.out.println(\"hon\");\\n        }\\n    }\\n}\\n", "target": "178", "substitutes": {"sc": ["system", "sa", "cc", "cle", "tc", "cr", "capt", "rc", "cl", "sb", "bc", "cs", "desc", "sac", "ec", "esc", "sync", "Sc", "exp", "ch", "pc", "osc", "isc", "uc", "sys", "mc", "scl", "c", "nc", "acc", "SC", "gc", "src", "sv", "screen", "dc", "lc", "scan", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "n": ["ng", "m", "h", "norm", "j", "s", "nan", "i", "nn", "number", "missing", "net", "none", "z", "ln", "t", "ne", "ll", "nm", "rn", "en", "p", "nc", "gn", "nor", "c", "note", "N", "len", "comm", "np", "an", "nb", "g", "d", "no", "nu", "v", "ns", "num", "un", "nl", "sn", "na", "non", "o", "size", "not", "cn", "l", "nie", "nt"]}}
{"code": "import java.util.*;\\n// cin=sc.nextInt();\\n// List<Integer> a = new ArrayList<Integer>(n);\\n \\npublic class Main {\\n    public static void main(String args[]){\\n\t\t    Scanner sc = new Scanner(System.in);\\n            String s = sc.next();\\n            if(s.charAt(1) == 'O'){\\n                System.out.println(6);\\n            }\\n            else if(s.charAt(1) == 'E'){\\n                System.out.println(4);\\n            }\\n            else if(s.charAt(1) == 'H'){\\n                System.out.println(3);\\n            }\\n            else if(s.charAt(1) == 'R'){\\n                System.out.println(2);\\n            }\\n            else if(s.charAt(1) == 'A'){\\n                System.out.println(1);\\n            }\\n            else if(s.charAt(0) == 'S'){\\n                System.out.println(7);\\n            }\\n            else if(s.charAt(0) == 'T'){\\n                System.out.println(5);\\n            }\\n\t}\\n}\\n", "target": "136", "substitutes": {}}
{"code": "// ITP1_4\\n\\nimport java.util.Scanner;\\nimport java.io.*;\\n\\nclass Main\\n{\\n\tpublic static void main ( String[] args ) {\\n\t\tScanner sc = new Scanner ( System.in );\\n\\n\t\tdouble a = 0.0;\\n\t\tdouble b = 0.0;\\n\t\tint d = 0;\\n\t\tint r = 0;\\n\t\tdouble f = 0.0;\\n\\n\t\ta = sc.nextInt ();\\n\t\tb = sc.nextInt ();\\n\t\t\\n\t\td = ( int )a / ( int )b;\\n\t\tr = ( int )a % ( int )b;\\n\t\tf = a / b;\\n\\n\t\tSystem.out.println ( d + \" \" + r + \" \" + String.format ( \"%7f\", f ) );\\n\t}\\n}", "target": "90", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\\n\t\tlong a = in.nextLong();\\n\t\tlong b = in.nextLong();\\n\t\tlong k = in.nextLong();\\n\\n\t\tif (a > k)\\n\t\t\tSystem.out.println((a-k) + \" \" + b);\\n\t\telse if (a <= k && k < (a+b))\\n\t\t\tSystem.out.println(0 + \" \" + (a + b - k));\\n\t\telse\\n\t\t\tSystem.out.println(\"0 0\");\\n\t}\\n}\\n\\n", "target": "128", "substitutes": {"in": ["serv", "out", "inf", "In", "con", "isin", "i", "lin", "init", "doc", "run", " din", "r", "file", "rin", "reader", "vin", "at", " out", "read", "IN", "info", "std", "from", "line", "log", "gin", "null", "en", "ins", "inner", "conf", "inn", "inc", "get", "cin", "ssl", "io", "add", "input", "raw", "all", "bin", "ini", "as", "thin", "stream", "scan", "n", "err", "ind", "mm", "din", "is", "sum", "l"], "a": ["aaa", "act", "\u00e4", "sta", "apa", "la", "oa", "sa", "da", "am", "era", "\u00e1", "t", "at", "A", "au", "area", "ab", "ca", "ak", "ma", "ac", "ao", "ba", "ea", "aka", "ta", "an", "aa", "ia", "aj", "ar", "ga", "ai", "as", "alpha", "na", "va", "o", "ach", "al", "ae"], "b": ["B", "m", "eb", "ob", "j", "br", "i", "ub", "bi", "e", "pb", "bf", "r", "be", "z", "u", "sb", "fb", "bs", "bc", "t", "ab", "zb", "ib", "cb", "bis", "lb", "beta", "bb", "c", "ba", "db", "rb", "nb", "g", "d", "v", "mb", "w", "big", "bar", "base", "n", "bound", "y", "o", "l", "erb"], "k": ["mk", "unk", "j", "dk", "sk", "i", "ke", "ik", "ko", "kn", "q", "z", "u", "kr", "km", "ok", "wk", "ikk", "kh", "ak", "kick", "ck", "kj", "uk", "kl", "ka", "ks", "c", "g", "K", "ijk", "kk", "kan", "kw", "n", "tk", "kok", "ek", "sch", "l", "ku", "ki"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint[] dishes = new int[5];\\n\t\tint sum = 0;\\n\t\tfor(int i = 0; i < 5; i++) {\\n\t\t\tdishes[i] = sc.nextInt();\\n\t\t\tsum += dishes[i];\\n\t\t\tdishes[i] = (10 - (dishes[i] % 10)) % 10;\\n\t\t}\\n\t\tArrays.sort(dishes);\\n\t\tfor(int i = 0; i < 4; i++) {\\n\t\t\tsum += dishes[i];\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t}\\n}", "target": "63", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "pb", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ch", "osc", "pc", "enc", "isc", "uc", "sys", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "sw", "st", "sv", "nl", "lc", "sp", "sel", "cmp", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "dishes": ["dizards", "sdishes", "daishers", "didizards", " dished", "dashishers", "Dished", "daishes", "dashilles", " dills", "daillin", "pished", "dish", " diddles", " dizards", "diddles", "pish", "desiddles", "daizards", "mishers", "pishes", " dish", "tiddles", "pils", "dishable", "sdishers", "mish", " dilles", "daills", " dishers", "mishes", "dailles", "mills", "daishable", "desishes", "Dils", " dishable", "desills", "Dills", "didishes", "didills", "dashishes", "pishers", "sdished", "dashishable", "dilles", " dils", "tishes", "dills", "dillin", "Dishes", "didillin", "dished", "desishers", " dillin", "mished", "Dishers", "sdish", "dils", "pills", "tills", "dishers", "tishers"], "sum": ["cost", "sam", "save", "um", "sim", "mix", "density", "sa", "cache", "success", "mass", "must", "dump", "cast", "temp", "set", "empty", "com", "black", "med", "hum", "stack", "loss", "result", "zero", "commit", "index", "ma", "ash", "vol", "report", " SUM", "match", "amount", " summed", "su", "si", "union", "score", "comment", "cum", "summary", "count", "cal", "add", "total", "mem", "hash", "num", "process", "average", "Sum", "hist", "mean", "max", "size", "gam", "lam", "sat"], "i": ["ji", "hi", "q", "ci", "mi", "php", "li", "iq", "name", "ij", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "bi", "iy", "go", "json", "load", "ei", "print", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ki", "ii", "ri", "fi", "sequence", "init", "fire", "di", "info", "gi", "si", "ti", "io", "\u0438", "to", "ip", "ori", "qi", "phi", "me", "xi", "j", "sim", "it", "ims", "z", "u", "span", "set", "I", "this", "ie", "loop", "client", "point", "g", "ic", "iu", "base", "is", "mac", "x", "oi", "batch"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try(Scanner scn = new Scanner(System.in)) {\\n            int n;\\n            while((n = scn.nextInt()) > 0) {\\n                double sum = 0, sd = 0;\\n                double[] s = new double[n];\\n\\n                for(int i = 0; i < n; i++) {\\n                    s[i] = scn.nextDouble();\\n                    sum += s[i];\\n                }\\n                double avg = sum / n;\\n                for(int i = 0; i < n; i++) {\\n                    sd += Math.pow((s[i] - avg), 2);\\n                }\\n                System.out.println(Math.sqrt(sd / n));\\n            }\\n        }\\n    }\\n}", "target": "203", "substitutes": {"n": ["ng", "current", "m", "j", "nan", " ng", "nn", "net", "number", "q", "r", "z", "ln", "none", "ity", "span", "t", "ne", "mn", "network", "ll", "on", "ni", "nm", "p", "len", "np", "nc", "gn", "c", "en", "N", "comm", "an", "count", "nb", "g", "d", "v", "no", "nu", "name", "all", "num", "ns", "un", "nl", "sn", "na", "y", " ni", "o", "x", "cn", "l", "nie", "nt"], "sum": ["sam", "out", "um", "m", "sim", "system", "sa", "ul", "ss", "mass", "ass", "set", "pm", "dev", "se", "so", "med", "hum", "zero", "index", "ma", "vol", "si", "sh", "su", "spread", "count", "cum", "summary", "g", "d", "v", "cal", "total", "add", "scale", "sv", "hash", "num", "us", "average", "Sum", "mean", "size", "sat"], "sd": ["sam", "ness", "fd", "dk", "ss", "shadow", "gd", "sb", "reci", "nd", "des", "cd", "di", "dd", "ld", "hd", "se", "md", "sky", "std", "ud", "vd", "si", "sh", "spread", "sw", "sg", "d", "sv", "pd", "td", "df", "sn", "sf", "amd", "ds", "dl", "pdf", "SD", "sch", "sat", "sq", "dis"], "s": ["hs", "vs", "rs", "m", "its", "ats", "ies", "xs", "fs", "ss", "ims", "gets", "sb", "S", "bs", "cs", "parts", "so", "se", "tests", "qs", "views", "gs", "p", "sh", "c", "ins", "v", "items", "sv", "ms", "ws", "sl", "ns", "ids", "sts", "sp", "ds", "ps", "als", "js", "services", "ts", "ls", "is", "ports", "l", "sq"], "i": ["ii", "phi", "xi", "me", "page", "multi", "j", "sim", "fi", "ri", "umi", "init", "bi", "it", "ji", "ies", "hi", "details", "q", "ger", "ci", "iy", "di", "I", "mi", "ie", "info", "json", "eu", "gi", "client", "php", "list", "li", "ei", "si", "point", "remote", "inner", "pi", "ex", "ti", "io", "cli", "ij", "zi", "ui", "ini", "ai", "ic", "\u0438", "chain", "iu", "et", " I", "ix", "ind", "id", "ip", "y", "o", "is", "uri", "PI", "im", "oi", "ori", "batch", "ami", "ity", "qi", "ki"], "avg": ["avgm", "avgd", "averm", "Avm", "avm", "ovgs", "avegs", "averg", "avgs", "Avgm", "avG", "ovm", "avem", " avG", " avgm", "aveg", " avgs", "ovg", "Avg", "aveG", "Avgd", "ovG", " avm", "avergd", " avgd", "avergm"]}}
{"code": "import java.io.*;\\n\\nclass Main {\\n    public static void main (String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int n = Integer.parseInt(br.readLine());\\n        boolean[][] cards = new boolean[4][13];\\n        String[] card;\\n        int i, j;\\n        char c;\\n        for (i = 0; i < 4; i++) for (j = 0; j < 13; j++) cards[i][j] = false;\\n        for (i = 0; i < n; i++) {\\n            card = br.readLine().split(\" \");\\n            if (card[0].equals(\"S\")) {\\n                cards[0][Integer.parseInt(card[1]) - 1] = true;\\n            } else if (card[0].equals(\"H\")) {\\n                cards[1][Integer.parseInt(card[1]) - 1] = true;\\n            } else if (card[0].equals(\"C\")) {\\n                cards[2][Integer.parseInt(card[1]) - 1] = true;\\n            } else if (card[0].equals(\"D\")) {\\n                cards[3][Integer.parseInt(card[1]) - 1] = true;\\n            }\\n        }\\n        for (i = 0; i < 4; i++) {\\n            for (j = 0; j < 13; j++) {\\n                if (!cards[i][j]) {\\n                    if (i == 0) c = 'S';\\n                    else if (i == 1) c = 'H';\\n                    else if (i == 2) c = 'C';\\n                    else c = 'D';\\n                    System.out.println(c + \" \" + (j + 1));\\n                }\\n            }\\n        }\\n    }\\n}", "target": "189", "substitutes": {"br": ["bridge", "b", "lr", "Br", "shr", "bl", "cr", "bf", "dr", "r", "be", "ctr", "ger", "kr", "bs", "bc", "reader", "buf", "nr", "rel", "ch", "pr", "bd", "bm", "hr", "db", "rb", "bro", "bp", "brace", "adr", "gr", "vr", "bt", "div", "yr", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "err", "mr", "BR"], "n": ["ng", "m", "nn", "net", "number", "fn", "z", "ln", "t", "nr", "ne", "mn", "nm", "en", "len", "np", "nc", "p", "N", "count", "nb", "g", "d", "no", "nu", " N", "num", "ns", "nl", "sn", "na", "o", "size", "l", "nt"], "cards": ["pointers", "posts", "weights", "checks", "caps", "bees", "apes", "allows", "planes", "tags", "comments", "bags", "details", "lights", "ims", "values", "ards", "vals", "phones", "cas", "units", "cats", "links", "lists", "frames", "photos", "houses", "blocks", "hands", "cuts", "lands", "Card", "lets", "cf", "holders", "windows", "gs", "books", "fields", "grounds", "groups", "cells", "cases", "flags", "times", "boxes", "balls", "guards", "days", "tracks", "ways", "cars", "services", "users", "styles", "images", "hips", "codes", "letters", "olds", "games", "keys"], "card": ["cap", "bit", "check", "play", "save", "cookie", "pad", "can", "feature", "char", "cat", "link", "pass", "quote", "cas", "token", "cl", "event", "controller", "pair", "t", "cont", "row", "read", "record", "ard", "star", "node", "series", "Card", "cf", "way", "escape", "share", "line", "entry", "back", "match", "note", "form", "crit", "var", "parse", "comment", "role", "draw", "shape", "arc", "zone", "guard", "component", "add", "column", "chain", "cell", "text", "pack", "rule", "piece", "word", "def", "roll", "post", "field", "attribute", "col", "cp", "car", "tag"], "i": ["ji", "hi", "q", "in", "dr", "ci", "mi", "er", "php", "li", "v", "ij", "ui", "ini", "ai", "us", "or", "ix", "m", "multi", "bi", "ik", "at", "ei", "print", "status", "pi", "cli", "zi", "chain", "id", "y", "asi", "im", "ami", "ki", "ii", "um", "ri", "init", "yi", "di", "info", "gi", "index", "si", "ti", "\u0438", "ind", "ip", "ir", "qi", "phi", "xi", "me", "sim", "it", "ims", "u", "I", "this", "ie", "ma", "p", "point", "ex", "iter", "g", "ia", "ic", "iu", "is", "x", "err"], "j": ["ng", "oj", "m", "b", "out", "bo", "it", "ji", "jj", "e", "ja", "f", "jc", "q", "bi", "jac", "z", "by", "ev", "uj", "bj", "bs", "k", "jump", "jit", "ne", "json", "mn", "je", "pt", "pr", "on", "ju", "kj", "er", "li", "kid", "p", "note", "jl", "obj", "jo", "g", "res", "v", "aj", "jp", "ij", "block", "dj", "J", "jas", "tr", "sp", "ind", "fr", "ix", "js", "to", "y", "o", "x", "l", "job", "ijk", "ge"], "c": ["b", "h", "color", "ct", "con", "cc", "char", "cat", "comments", "cache", "tc", "cr", "rc", "r", "ec", "cs", "cm", "cd", "cont", "t", "k", "cos", "cb", "ch", "ca", "enc", "cf", "cur", "cu", "ac", "mc", "null", "code", "comment", "gc", "cum", "fc", "d", "arc", "g", "ar", "cod", "abc", "co", "chain", "dc", "ce", "lc", "conv", "unc", "ctrl", "C", "cn", "col", "l", "cp"]}}
{"code": "import java.io.*;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\n\\nimport static java.lang.Long.max;\\n\\npublic class Main {\\n  static class Pair {\\n    int num;\\n    int cut;\\n\\n    Pair(int num, int cut) {\\n      this.num = num;\\n      this.cut = cut;\\n    }\\n\\n    double getVal() {\\n      return -num / (double) cut;\\n    }\\n  }\\n\\n  public static void main(String[] args) throws IOException {\\n    sc = new MScanner(System.in);\\n    pw = new PrintWriter(System.out);\\n    int N = sc.nextInt();\\n    int[] as = sc.intArr(N);\\n    long m = 0;\\n    long total = 0;\\n    for(int h: as) {\\n        total += max(0, m - h);\\n        m = max(h, m);\\n    }\\n\\n\\n    pw.println(total);\\n\\n    // pw.println(\"end\");\\n    // pw.println();\\n\\n    pw.flush();\\n    // System.out.println(cnt);\\n  }\\n\\n  /**\\n   * https://www.slideshare.net/hcpc_hokudai/binary-indexed-tree A space efficient version segment\\n   * tree. Usually for range sum. Or the required metric can be calulated in that:\\n   *\\n   * <p>right_metric = parant_metric - left_metric Only then, we can stop memoizing right_metric\\n   *\\n   * <p>The internal structure is a 1-base array, to simplify calculation of parent node's idx. lsb\\n   * = 3 & -3 = 2 (0x0011 & 0x1101 = 0x0001) lastParentOf3 = 3 - lsb = 2 curParentOf3 = 3 + lsb = 4\\n   */\\n  static class FenwickTree {\\n    private final long[] state;\\n    private final int size;\\n\\n    FenwickTree(int size) {\\n      this.size = size;\\n      state = new long[size + 1];\\n    }\\n\\n    @Override\\n    public String toString() {\\n      return Arrays.toString(state);\\n    }\\n\\n    long queryRangeSumFromZeroTo(int idx) {\\n      long sum = 0;\\n      while (idx != 0) {\\n        sum += state[idx];\\n        idx -= (idx & -idx);\\n      }\\n      return sum;\\n    }\\n\\n    /** @param val can be negative */\\n    void updateElement(int idx, long val) {\\n      while (idx <= size) {\\n        state[idx] += val;\\n        idx += (idx & -idx);\\n      }\\n    }\\n  }\\n\\n  // sc.close();\\n  // pw.println(cnt);\\n  // pw.flush();\\n\\n  static PrintWriter pw;\\n  static MScanner sc;\\n\\n  static class MScanner {\\n    StringTokenizer st;\\n    BufferedReader br;\\n\\n    public MScanner(InputStream system) {\\n      br = new BufferedReader(new InputStreamReader(system));\\n    }\\n\\n    public MScanner(String file) throws Exception {\\n      br = new BufferedReader(new FileReader(file));\\n    }\\n\\n    public String next() throws IOException {\\n      while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());\\n      return st.nextToken();\\n    }\\n\\n    public int[] intArr(int n) throws IOException {\\n      int[] in = new int[n];\\n      for (int i = 0; i < n; i++) in[i] = nextInt();\\n      return in;\\n    }\\n\\n    public long[] longArr(int n) throws IOException {\\n      long[] in = new long[n];\\n      for (int i = 0; i < n; i++) in[i] = nextLong();\\n      return in;\\n    }\\n\\n    public int[] intSortedArr(int n) throws IOException {\\n      int[] in = new int[n];\\n      for (int i = 0; i < n; i++) in[i] = nextInt();\\n      shuffle(in);\\n      Arrays.sort(in);\\n      return in;\\n    }\\n\\n    public long[] longSortedArr(int n) throws IOException {\\n      long[] in = new long[n];\\n      for (int i = 0; i < n; i++) in[i] = nextLong();\\n      shuffle(in);\\n      Arrays.sort(in);\\n      return in;\\n    }\\n\\n    public Integer[] IntegerArr(int n) throws IOException {\\n      Integer[] in = new Integer[n];\\n      for (int i = 0; i < n; i++) in[i] = nextInt();\\n      return in;\\n    }\\n\\n    public Long[] LongArr(int n) throws IOException {\\n      Long[] in = new Long[n];\\n      for (int i = 0; i < n; i++) in[i] = nextLong();\\n      return in;\\n    }\\n\\n    public String nextLine() throws IOException {\\n      return br.readLine();\\n    }\\n\\n    public int nextInt() throws IOException {\\n      return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() throws IOException {\\n      return Double.parseDouble(next());\\n    }\\n\\n    public char nextChar() throws IOException {\\n      return next().charAt(0);\\n    }\\n\\n    public long nextLong() throws IOException {\\n      return Long.parseLong(next());\\n    }\\n\\n    public boolean ready() throws IOException {\\n      return br.ready();\\n    }\\n\\n    public void waitForInput() throws InterruptedException {\\n      Thread.sleep(3000);\\n    }\\n  }\\n\\n  static void shuffle(int[] in) {\\n    for (int i = 0; i < in.length; i++) {\\n      int idx = (int) (Math.random() * in.length);\\n      int tmp = in[i];\\n      in[i] = in[idx];\\n      in[idx] = tmp;\\n    }\\n  }\\n\\n  static void shuffle(long[] in) {\\n    for (int i = 0; i < in.length; i++) {\\n      int idx = (int) (Math.random() * in.length);\\n      long tmp = in[i];\\n      in[i] = in[idx];\\n      in[idx] = tmp;\\n    }\\n  }\\n}\\n", "target": "202", "substitutes": {"num": ["mult", "sam", "um", "hom", "con", "mon", "tmp", "seq", "Num", "number", "prim", "net", "success", "Number", "tim", "temp", "NUM", "dec", "dev", "th", "node", "perm", "nam", "cur", "zero", "index", "eno", "nm", "mu", "en", "gen", "np", "conf", "local", "comm", "cum", "nb", "cal", "no", "nu", "coord", "param", "orig", "ident", "un", "hot", "begin", "alpha", "n", "snap", "na", "cmp", "val", "to", "numbered", "conv", "alph", "valid", "nom", "max", "sum", "rem", "anon"], "cut": ["range", "cap", "offset", "check", "term", "ct", "seq", "char", "cat", "fat", "cmd", "ctr", "fun", "cm", "sort", "set", "cont", "mut", "split", "filter", "diff", "limit", "cuts", "ext", "ch", "med", "cf", "cur", "width", "slice", "tip", "off", "control", "cone", "est", "fine", "stop", "c", "pen", "crit", "Cut", "chip", "chain", "crop", "piece", "snap", "cond", "circ", "max", "ctrl", "sec", "clip", "ut"], "sc": ["cc", "tc", "capt", "ss", "rc", "cr", "cl", "sb", "bc", "cs", "sac", "qu", "desc", "esc", "Sc", "ch", "pc", "isc", "osc", "sys", "psc", "mc", "scl", "c", "nc", "sci", "sh", "SC", "gc", "sw", "st", "sv", "dc", "lc", "scan", "sp", "asc", "sd", "sec", "sch", "syn", "sq"], "pw": ["mwh", "dwr", "Pwa", "dwh", "mw", " pwa", "dwd", "Pwh", "mW", " pwr", "Pw", "mwa", "dw", "pwr", "lpw", "lpwh", " pwh", "pwa", "lpwd", " pwd", "lpwr", "pwh", "pW", " pW", "PW", "pwd"], "N": ["NH", "P", "NN", "Ns", "NI", "Num", "S", "NR", "SN", "G", "NS", "I", "D", "A", "NO", "NP", "NC", "NB", "L", "ND", "V", "NM", "MN", "NG", "H", "CN", "NT", "NA", "T", "K", "J", "Sn", "n", "No", "M", "R", "C", "Z", "PN", "X"], "as": ["asa", "aos", "ats", "sa", "les", "eas", "nas", "AS", "As", "am", "mos", "asha", "aus", "ast", " AS", "ams", "has", "sis", "ias", "ais", "pas", "a", "ars", "ras", "all", "ms", "arms", "ase", "jas", "mas", "each", "als", "asar", "las", "pres", "asi", "with"], "m": ["b", "um", "j", "s", "i", "e", "f", "dm", "r", "z", "u", "mx", "cm", "min", "sm", "t", "mi", "md", "mu", "p", "mc", "c", "gm", "w", "g", "d", "v", "a", "mem", "mt", "ms", "tm", "n", "M", "mean", "mm", "o", "max", "x", "l", "man", "mr"], "total": ["done", "out", "current", "ful", "multi", "sequence", "value", "f", "shared", "full", "number", "net", "otal", "mx", "t", "available", "complete", "human", "black", "result", "zero", "met", "counter", "ma", "mu", "p", " summed", "note", "ta", "count", "Total", " Total", "serial", "created", "normal", "scale", "no", "raw", "all", "eta", "ms", "tm", "bar", "n", "mean", "M", "ent", "o", "partial", "max", "sum", "meta"], "h": ["hs", "b", "j", "i", "hi", "q", "z", "oh", "hm", "t", "ph", "history", "hd", "k", "th", "kh", "ah", "zh", "ch", "hh", "height", "he", "has", "p", "hz", "sh", "H", "hr", "ih", "rh", "g", "ht", "v", "a", "ha", "hl", "handle", "bh", "hex", "y", "x", "l", "hash"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\t\tpublic static void main(String[] args) {\\n\t\t\tScanner sc = new Scanner(System.in);\\n\\n\t\t\tString str = sc.next();\\n\\n\t\t\tString[] strArray = str.split(\"\");\\n\t\t\tint num = 0;\\n\\n\t\t\tfor(int i =0;i < strArray.length;i++) {\\n\\n\t\t\t\tif(strArray[i].equals(\"+\")) {\\n\t\t\t\t\tnum++;\\n\t\t\t\t}else {\\n\t\t\t\t\tnum--;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(num);\\n\\n\\n\\n\t}\\n\\n\\n}\\n\\n\\n", "target": "54", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "rc", "ko", "cl", "bc", "cs", "desc", "ok", "ec", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "uc", "sys", "mc", "scl", "nc", "c", "sub", "SC", "gc", "inc", "sv", "scan", "lc", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "str": ["out", "m", "string", "s", "j", "STR", "br", "char", "it", "f", "ocr", "r", "dr", "z", "arr", "ctr", "Str", "t", "coll", "enc", "result", "pr", "vol", "p", "obj", "iter", "txt", "g", "st", "name", "input", "sl", "gr", "text", "div", "n", "dat", "tr", "sp", "fr", "expr", "stable"], "strArray": ["objArray", "strList", "stringSet", "stringArray", "charSet", "stringRAY", "strNumber", "numArray", "strString", " strRaw", "stringRaw", " strAF", "strAF", "objAF", "stringCount", " strRAY", " strCount", " strSet", "strRaw", "strSet", "charArray", "numNumber", " strNumber", "numAr", "strAr", "charString", "charList", "strRAY", "charCount", "strCount", " strList", "stringList", " strAr", "charRaw", "objNumber", "numAF", "objAr", "stringString", " strString", "charRAY"], "num": ["sam", "out", "um", "msg", "norm", "con", "multi", "mon", "sim", "test", "Num", "number", "net", "tim", "where", "Number", "unit", "temp", "fun", "NUM", "good", "coll", "dec", "dev", "nam", "result", "zero", "index", "cu", "client", "nm", "gen", "count", "subject", "draw", "nb", "comm", "cal", "no", "nu", "total", "mem", "coord", "div", "n", "snap", "na", "mean", "to", "ver", "conv", "alph", "unc", "nom", "x", "sum", "quant", "nt"], "i": ["ii", "phi", "m", "gu", "xi", "multi", "j", "fi", "ri", "init", "bi", "it", "ji", "hi", "in", "u", "span", "ci", "di", "I", "mi", "ie", "info", "gi", "index", "slice", "li", "ei", "si", "c", "pi", "ti", "g", "io", "my", "cli", "ui", "ini", "ic", "ai", "\u0438", "iu", "n", "ix", "ind", "id", "ip", "y", "o", "is", "uri", "x", "im", "oi", "ori", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tString s = new Scanner(System.in).next();\\n\t\tSystem.out.println(s.equals(\"RRR\") ? 3 : s.contains(\"RR\") ? 2 : s.contains(\"R\") ? 1 : 0);\\n\t}\\n}\\n", "target": "141", "substitutes": {"s": ["hs", "simple", "rs", "sam", "m", "h", "string", "ats", "i", "str", "fs", "f", "ss", "xs", "ims", "r", "S", "sb", "abs", "bs", "parts", "qs", "ashes", "sys", "has", "p", "gs", "c", "su", "sql", "w", "v", "less", "strings", "sv", "ms", "sl", "ns", "ows", "n", "sf", "sts", "ds", "ps", "stats", "tes", "ears", "sd", "js", "ts", "ses", "ls", "is", "still", "sq", "sample"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner scn=new Scanner(System.in);\\n\t\tString str=scn.next();\\n\t\tint num=10,x=10;\\n\t\tnum*=str.charAt(0)-'0';\\n\t\tnum+=str.charAt(1)-'0';\\n\t\tnum*=10;\\n\t\tnum+=str.charAt(2)-'0';\\n\t\tnum*=10;\\n\t\tnum+=str.charAt(3)-'0';\\n\t\tx*=str.charAt(5)-'0';\\n\t\tx+=str.charAt(6)-'0';\\n\t\tif(num>=2019&&x>4) {\\n\t\t\tSystem.out.println(\"TBD\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"Heisei\");\\n\t\t}\\n\t}\\n\\n}\\n", "target": "163", "substitutes": {}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint ans = 0;\\n\t\t\\n\t\tif(a % 2 == 0  && b % 2 == 1)\\n\t\t\tout.println(\"IMPOSSIBLE\");\\n\t\telse if(a % 2 == 1 && b % 2 == 0)\\n\t\t\tout.println(\"IMPOSSIBLE\");\\n\t\telse {\\n\t\t\tint n = Math.abs(a - b) / 2;\\n\t\t\tans = Math.max(a, b) - n;\\n\t\t\tout.println(ans);\\n\t\t}\t\t\\n\t}\\n}\\n", "target": "31", "substitutes": {"sc": ["out", "tch", "system", "s", "cc", "tc", "cr", "ss", "rc", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ch", "pc", "isc", "exec", "sys", "ck", "ner", "mc", "scl", "c", "nc", "acc", "SC", "gc", "sw", "ctx", "sv", "lc", "scan", "sp", "asc", "conv", "ctrl", "sch", "sec", "anc", "usc", "syn", "sq"], "a": ["aaa", "act", "sta", "la", "apa", "oa", "ap", "sa", "eas", "aq", "addr", "da", "am", "u", "era", "at", "t", "A", "au", "area", "att", "ab", "ca", "ax", "ma", "app", "ac", "p", "ba", "ao", "ea", "aka", "ta", "an", "aa", "ia", "aj", "ar", "ga", "ai", "as", "access", "alpha", "pa", "na", "va", "ach", "al", "ae", "fa"], "b": ["B", "h", "eb", "ob", "j", "br", "i", "bi", "f", "pb", "r", "be", "by", "body", "fb", "ed", "sb", "bs", "bc", "z", "lib", "ab", "ib", "gb", "cb", "bis", "bb", "back", "app", "p", "ba", "c", "db", "rb", "obj", "nb", "g", "bot", "v", "d", "mb", "bin", "big", "base", "y", "o", "l"], "ans": ["uns", "posts", "vs", "rs", "s", "ats", "xs", "ann", "ians", "vals", "lan", "ens", "cs", "AN", "aus", "outs", "anas", "angs", "acts", "lets", "offs", "ots", "eds", "aps", "gs", "anks", "ks", "ins", "an", "cons", "ars", "ms", "orts", "ents", "ns", "ants", "ids", "orders", "prints", "ates", "ds", "ps", "nets", "arts", "ls", "ANS", "ints", "amps", "ations", "olds", "actions", "ads"], "n": ["m", "norm", "j", "nan", "ny", "i", "f", "nn", "number", "net", "z", "ln", "t", "mn", "nv", "conn", "ni", "nat", "nm", "nor", "c", "gn", "np", "nc", "N", "an", "nb", "g", "d", "v", "nu", "ns", "nl", "sn", "na", "dn", "cn", "l"]}}
{"code": "import java.util.Scanner;\\n\\n// https://atcoder.jp/contests/abc155/tasks/abc155_b\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] array = new int[N];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tarray[i] = sc.nextInt();\\n\t\t}\\n\t\tsc.close();\\n\\n\t\tboolean flag = true;\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tint n = array[i];\\n\t\t\tif(n%2==0) {\\n\t\t\t\tif((n%3==0)||(n%5==0)) {\\n\\n\t\t\t\t}else {\\n\t\t\t\t\tflag = false;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tif(flag) {\\n\t\t\tSystem.out.println(\"APPROVED\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"DENIED\");\\n\t\t}\\n\\n\\n\\n\t}\\n\\n}\\n", "target": "113", "substitutes": {}}
{"code": "import java.util.*;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n        long snack1 = sc.nextLong();\\n        long snack2 = sc.nextLong();\\n        long min = Math.min(snack1,snack2);\\n        long max = Math.max(snack1,snack2);\\n        \\n        long num = 1;\\n        \\n        long ans = 0;\\n        \\n        while(true){\\n            if((min * num)%max == 0){\\n                ans = min * num;\\n                break;\\n            } \\n            num++;\\n        }\\n  System.out.println(ans);\\n    }\\n}", "target": "67", "substitutes": {"sc": ["tch", "system", "cc", "tc", "cr", "ss", "rc", "cam", "cl", "sb", "bc", "cs", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "ck", "mc", "scl", "nc", "c", "sh", "SC", "sw", "gc", "inc", "ctx", "sv", "dc", "scan", "lc", "sp", "asc", "sch", "sec", "usc", "sq"], "snack1": ["snatch0", "snack10", "snacker10", "snatched", "snck1", "snunk11", "snrack1", "snake01", " snack0", "snake0", " snake01", "snrack11", " snacked", "snck10", "snrack10", "snck01", "snckOne", "snank2", "snakeed", "snake1", "nnck11", "snacker11", "snackOne", " snack01", "snunk2", "snack0", " snakeed", "nnck2", "snrack01", "nnckOne", "nnck10", "snank11", " snake0", "nnack1", "nnck1", "snank1", "nnack2", "snacked", "nnack10", "snck2", "nnackOne", "snacker1", "snankOne", "snacker0", " snake1", "snatch01", "nnack11", "snunkOne", "snackered", "snack11", "snacker01", "snack01", "nnck01", "snck11", "nnack01", "snatch1", "snunk1"], "snack2": [" snACK02", "snACK2", " snACK6", "snck1", "snrack1", " snack32", "snck6", "snrack02", " snank1", "snank02", "snack02", "snank2", "snack4", " snank4", " snank32", " snACK2", "snack6", "snrack32", "snACK02", " snACK1", "snank4", "snACK6", "snrack4", "snank1", "snACK4", " snank02", "snck2", "snACK32", "snacker1", "snacker2", "snrack2", " snank2", "snacker6", "snACK1", " snack02", "snack32", " snack4", "snck02", "snank32", " snack6", "snacker02"], "min": ["m", "rain", "me", "lower", "sol", "low", "minimum", "mon", "init", "net", "loc", "in", "ln", "lim", "mins", "mid", "Min", "sort", "MIN", "only", "span", "rel", "emin", "pos", "dem", "mi", "rand", "mn", "pl", "sign", "start", "pre", "first", "minus", "index", "ma", "len", "sub", "latest", "sin", "my", "mine", "left", "shift", "un", "const", "fill", "average", "begin", "div", "n", "don", "common", "lt", "mean", "minute", "val", "stat", "sum", "small", "man", "amin", "mod"], "max": ["range", "act", "out", "m", "inter", "cover", "MAX", "after", "right", "mx", "window", "wh", "force", "rand", "exp", "med", "ca", "prime", "start", "first", "ax", "log", "ma", "huge", "Max", "est", "conf", "maximum", "count", "res", "st", "end", "v", "add", "scale", "largest", "total", "all", "step", "co", "most", "last", "length", "div", "n", "map", "mean", " Max", "rest", "upper", "size", "x", "sum", "grow", "gt", "mod"], "num": ["sam", "out", "um", "m", "msg", "nt", "con", "sta", "mon", "tu", "norm", "mont", "ann", "Num", "number", "net", "mind", "tim", "nn", "span", "set", "mut", "mons", "NUM", "pos", "pn", "node", "mn", "nam", "index", "nm", "mu", "ord", "en", "len", "gen", "np", "count", "cum", "inn", "nb", "cons", "no", "nu", "total", "add", "coord", "phys", "n", "snap", "na", "id", "bn", "non", "conv", "nom", "x", "sum", "umi"], "ans": ["uns", "posts", "anon", "rs", "annot", "rans", "ats", "xs", "pan", "ann", " spans", "ians", "lan", "ines", "wan", "ran", "ens", " means", "ones", "aus", "os", "mn", "ums", " len", "offs", "aps", "anks", "ks", "ends", "ins", " pan", "an", "cons", "ms", "orts", "ents", "ns", " scans", "ants", "actions", "orders", "eps", "mas", "ons", "nets", "arts", "mean", "ls", "ANS", "amps", "beans", "asks"]}}
{"code": "\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Scanner;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int k= 1;\\n        HashMap<String,Integer> hashMap = new HashMap<>();\\n        hashMap.put(\"SUN\",7);\\n        hashMap.put(\"MON\",6);\\n        hashMap.put(\"TUE\",5);\\n        hashMap.put(\"WED\",4);\\n        hashMap.put(\"THU\",3);\\n        hashMap.put(\"FRI\",2);\\n        hashMap.put(\"SAT\",1);\\n        String s1;\\n        int a,b;\\n        while(k-->0){\\n            a=s.nextInt();\\n            System.out.println(1-a);\\n        }\\n    }\\n\\n    private static int binary_search(\\n            int arr[], int l,\\n            int h, int x)\\n    {\\n        while (l <= h) {\\n            int mid = (l + h) / 2;\\n            if (arr[mid] <= x)\\n                l = mid + 1;\\n            else\\n                h = mid - 1;\\n        }\\n        return h;\\n    }\\n    static int gcd(int a, int b)\\n    {\\n        if(b==0) {\\n            return a;\\n        }\\n        return gcd(b,a%b);\\n    }\\n    private static boolean isPrime(int n) {\\n        if (n == 2)\\n            return true;\\n        else if ((n % 2 == 0 && n > 2) || n < 2)\\n            return false;\\n        else {\\n            for (int i = 3; i <= (int) Math.sqrt(n); i += 2) {\\n                if (n % i == 0)\\n                    return false;\\n            }\\n            return true;\\n        }\\n\\n\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new\\n                    InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n}", "target": "148", "substitutes": {"s": ["sam", "rs", "m", "xs", "fs", "ss", "S", "sb", "abs", "cs", "t", "socket", "se", "sys", "p", "gs", "c", "w", "ssl", "sv", "ws", "ns", "as", "ds", "ps", "stats", "js", "ls", "ses", "ts", "is", "es", "sq"], "k": ["ask", "mk", "unk", "m", "j", "kar", "sk", "dk", "ke", "f", "ko", "ik", "q", "z", "kr", "km", "t", "ok", "kind", "ak", "kick", "ck", "kj", "kid", "p", "mc", "ks", "ka", "c", "kl", "w", "g", "d", "v", "K", "kk", "kw", "max", "key", "ek"], "hashMap": ["resourceMan", "HashClass", "ashDefault", "sumMap", "eshUse", " hashMan", "ashMatrix", "eshMaps", "ashClass", " hashCard", "sumCard", "ashMaps", " hashSet", "ashCode", "ashMap", "ashApp", "hashDefault", "HashMaps", "hostMap", "hashCard", "eshM", "ashM", "hashSet", "hostMaps", "hashApp", "resourceMap", "heightMap", "sumMaps", "ashUse", "hashM", " hashUse", "hashMatrix", "ashSet", " hashMAP", "resourceMAP", "hashMAP", "hashUse", "HashDefault", " hashDefault", " hashMatrix", "hostMatrix", "HashCode", " hashCode", "hashMan", "hashCode", "heightMan", "hashClass", " hashMaps", "eshMap", "hashMaps", "ashCard", " hashClass", " hashApp", " hashM", "sumApp", "heightMAP", "heightMaps", "HashApp", "resourceMaps"], "s1": ["es1", "sone", "esOne", " ts2", "sOne", "es2", " sone", " s2", " ts1", " tsOne", " tsone", " sOne", "esone", "s2"], "a": ["aaa", "act", "m", "sta", "la", "oa", "j", "isa", "sa", "aq", "e", "f", "am", "z", "r", "u", "t", "at", "A", "au", "area", "ab", "ca", "ak", "index", "ma", "p", "ac", "ba", "ao", "c", "xa", "ea", "ta", "le", "an", "w", "aa", "d", "ia", "v", "ar", "g", "ata", "ha", "as", "pa", "na", "val", "y", "va", "o", "al", "ae", "fa"], "b": ["B", "m", "j", "e", "bi", "f", "bf", "r", "z", "sb", "u", "fb", "bc", "t", "ab", "ib", "gb", "bg", "bb", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "w", "y", "o"], "arr": ["aaa", "mat", "j", "ear", "shr", "bl", "par", "ele", "addr", "av", "r", "vals", "buf", "dict", "coll", "pl", "enc", "rad", "app", "list", "obj", "db", "array", "res", "aj", "ar", "ars", "ij", "Ar", "ARR", "gr", "Array", "map", "fr", "val", "js", "ray", "expr", "err", "arg"], "l": ["m", "la", "j", "lr", "lf", "lo", "f", "ul", "hi", "r", "ml", "ln", "u", "z", "t", "el", "ld", "lp", "pl", "L", "ll", "line", "li", "p", "ol", "len", "c", "kl", "le", "w", "g", "d", "v", "lay", "left", "sl", "lv", "nl", "lc", "lt", "dl", "y", "ly", "ls"], "h": ["hs", "phi", "m", "j", "ul", "hi", "q", "r", "z", "u", "his", "oh", "hm", "ph", "hd", "th", "kh", "ah", "zh", "ch", "hh", "he", "p", "high", "sh", "H", "c", "hr", "ih", "w", "g", "ht", "v", "d", "ha", "hl", "bh", "y", "o", "ho", "hash", "head"], "x": ["m", "xi", "rx", "j", "xe", "e", "xs", "f", "dx", "q", "ox", "r", "z", "u", "mx", "t", "tx", "ch", "xy", "ax", "p", "c", "xa", "ex", "w", "v", "xx", "xt", "ix", "xc", "val", "ry", "y", "o", "X", "wx"], "mid": ["medium", "m", "low", "mask", "pid", "mer", "half", "lo", "char", "hi", "wid", "mill", "rid", "lim", "nd", "min", "ph", "ld", "middle", "mi", "rand", "med", "md", "li", "len", "part", "inner", "le", "ad", "late", "d", "dim", "my", "lay", "ms", "mad", "trans", "div", "ind", "lt", "id", "cond", "mm", "px", "Mid", "max", "partial", "man", "tri"], "n": ["ng", "m", "norm", "j", "nan", "nn", "net", "number", "none", "z", "ln", "t", "ne", "mn", "ni", "nm", "p", "nc", "c", "np", "note", "nor", "N", "nb", "g", "w", "no", "nu", "v", "d", "name", "ns", "num", "nl", "sn", "na", "y", "o", "size", "dn", "cn", "nr", "nt"], "i": ["ii", "m", "xi", "me", "j", "sim", "multi", "ri", "it", "bi", "f", "hi", "z", "u", "ci", "di", "I", "mi", "gi", "mu", "li", "p", "ei", "si", "pi", "iq", "ti", "d", "v", "cli", "zi", "ui", "ini", "ic", "ai", "us", "iu", "ix", "id", "ip", "y", "o", "ami", "qi", "ki"], "br": ["bridge", "mk", "lr", "Br", "bsp", "bl", "shr", "bi", "cr", "dr", "r", "sb", "ctr", "kr", "bs", "bc", "buf", "rel", "pr", "bb", "bd", "ba", "hr", "rb", "bro", "bp", "bre", "gr", "bt", "tr", "fr", "bh", "ber", "bn", "browser", "nr", "mr", "BR"], "st": ["ost", "ct", "tmp", "lo", "bl", "it", "ss", "cr", "ft", "r", "dr", "z", "cl", "be", "sb", "nd", "t", "ast", "th", "sty", "se", "ch", "ST", "pt", "std", "start", "sys", "first", "sc", "est", "p", "ist", "sh", "stop", "sw", "St", "mt", "step", "sl", "util", "const", "bt", "sn", "sts", "et", "tr", "sp", "rest", "stat", "ste", "tab", "stable", "ut", "nt"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String args[]) {\\n\\n        // \u5165\u529b\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int k = Integer.parseInt(sc.next());\\n        int q = Integer.parseInt(sc.next());\\n        int[] a = new int[q];\\n        int[] score = new int[n];\\n        for (int i = 0; i < q; i++) {\\n            a[i] = Integer.parseInt(sc.next());\\n            score[a[i] - 1]++;\\n        }\\n\\n        // \u4e3b\u51e6\u7406\\n        String[] result = new String[n];\\n        int sum = Arrays.stream(score).sum();\\n        for (int i = 0; i < n; i++) {\\n            result[i] = k <= sum - score[i] ? \"No\" : \"Yes\";\\n        }\\n\\n        // \u51fa\u529b\\n        System.out.println(String.join(\"\\r\\n\", result));\\n        sc.close();\\n    }\\n}", "target": "102", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n      \tint CONST_MOD = (int) (Math.pow(10, 9) + 7);\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        ArrayList<Integer> dp = new ArrayList<Integer>();\\n      \\n      \tfor(int i=0; i<n+1; i++)\\n        {\\n          dp.add(1);\\n        }\\n        \\n        for(int i = 0; i < m; i++)\\n        {\\n            dp.set(sc.nextInt(), 0);\\n        }\\n        \\n        for(int i = 2; i < n+1; i++)\\n        {\\n            if( dp.get(i) != 0 )\\n            { \\n            \tdp.set(i, (dp.get(i-1) + dp.get(i-2))%CONST_MOD);\\n            }\\n        }\\n        \\n        System.out.println(dp.get(n));\\n    }\\n}", "target": "174", "substitutes": {"CONST_MOD": ["CONFIG_Mod", "CONSTLYMAX", "CONSTLYMod", "CONFIG_MAX", "CONFIG_MOD", "CONSTLYMOD", "CONST_mod", "CONST_MAX", "CONFIG_mod", "CONST_Mod", "CONSTLYmod"], "sc": ["cc", "cle", "tc", "cr", "pb", "rc", "capt", "cl", "sb", "bc", "cs", "ec", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "sys", "ck", "mc", "p", "c", "nc", "scl", "sh", "sci", "SC", "gc", "ctx", "st", "fc", "sv", "dc", "lc", "scan", "sp", "sel", "ser", "asc", "conv", "ctrl", "sch", "anc", "sec", "usc", "sq"], "n": ["ng", "j", "s", "nn", "net", "number", "in", "ln", "t", "nr", "ne", "mn", "network", "on", "ni", "nm", "en", "p", "np", "gn", "c", "nc", "N", "an", "nb", "d", "no", "nu", "name", "v", "ns", "num", "un", "nl", "sn", "nw", "na", "o", "x", "cn", "l", "nt"], "m": ["mk", "b", "h", "dm", "r", "mx", "om", "cm", "km", "sm", "t", "mo", "k", "mi", "mn", "perm", "nm", "ma", "mu", "p", "mc", "c", "bm", "gm", "d", "v", "mb", "mt", "ms", "tm", "M", "mm", "y", "o", "im", "l", "man", "mr"], "dp": ["aaa", "bps", "imp", "TP", "deep", "eb", "dk", "wordpress", "bsp", "DC", "dm", "pb", "dx", "isp", "resp", "ulp", "di", "dd", "pm", "lp", "dt", "dq", "vp", "dep", "DP", "pkg", "php", "tp", "p", "np", "tap", "d", "bp", "pd", "adr", "dj", "gp", "df", "wd", "rpm", "dc", "pa", "wp", "ps", "deb", "dl", "hp", "ds", "dh", "pp", "cp", "arp", "fp", "gt"], "i": ["ji", "hi", "q", "ci", "mi", "li", "iq", "v", "ij", "ui", "ini", "ai", "us", "ix", "ion", "multi", "bi", "ik", "iy", "ei", "print", "pi", "cli", "zi", "chain", "id", "y", "uri", "asi", "im", "ami", "ity", "ki", "ii", "ri", "eu", "init", "yi", "di", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "ip", "o", "ori", "qi", "umi", "phi", "xi", "me", "j", "sim", "it", "ims", "I", "this", "ie", "client", "point", "g", "ia", "ic", "iu", "is", "oi", "err"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint x1 = sc.nextInt();\\n\t\tint x2 = sc.nextInt();\\n\t\tint x3 = sc.nextInt();\\n\t\tint x4 = sc.nextInt();\\n\t\tint x5 = sc.nextInt();\\n\t\tif (x1 == 0) {\\n\t\t\tSystem.out.println(1);\\n\t\t} else if (x2 == 0) {\\n\t\t\tSystem.out.println(2);\\n\t\t} else if (x3 == 0) {\\n\t\t\tSystem.out.println(3);\\n\t\t} else if (x4 == 0) {\\n\t\t\tSystem.out.println(4);\\n\t\t} else {\\n\t\t\tSystem.out.println(5);\\n\t\t}\\n\t}\\n}\\n", "target": "222", "substitutes": {}}
{"code": "// ?????????????????? compareTo\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\t\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t// ?????\u00b0??????????????\u00b0???\\n\t\tint n = scan.nextInt();\\n\t\t// ???????????????????\u00b4????????????\u00b0\\n\t\tint taro = 0;\\n\t\tint hanako = 0;\\n\t\t// ?????????????????????????????\u00a7??\u00b0?????????\\n\t\tfor(int i = 0; i<n; i++) {\\n\t\t\t// ??????????????????\\n\t\t\tString taroCard = scan.next();\\n\t\t\tString hanakoCard = scan.next();\\n\t\t\t// ??????????????????????????????\\n\t\t\tint x = taroCard.compareTo(hanakoCard);\\n\t\t\t\\n\t\t\tif (x > 0) taro = taro +3;\\n\t\t\telse if (x < 0) hanako = hanako +3;\\n\t\t\telse{\\n\t\t\t\ttaro = taro + 1;\\n\t\t\t\thanako = hanako +1;\\n\t\t\t}\\n\t\t}\\n\t\t// ??????\\n\t\tSystem.out.println(taro + \" \" + hanako);\\n\\n\t}\\n\\n}", "target": "206", "substitutes": {}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        long N = sc.nextLong();\\n        long cnt = 0;\\n        long ans = 0;\\n        \\n        while(N!=0){\\n            N/=2;\\n            ans = ans + (long)Math.pow(2,cnt);\\n            cnt++;\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "51", "substitutes": {"sc": ["rs", "system", "cc", "Scan", "tc", "ss", "cr", "rc", "cl", "sb", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "c", "nc", "SC", "gc", "sw", "sv", "nl", "scan", "lc", "RC", "sp", "ser", "asc", "Desc", "sch", "sec", "Sync", "syn", "sq"], "N": ["P", "NN", "Ns", "NI", "Num", "S", "NR", "Number", "SN", "G", "NL", "NS", "I", "GN", "NV", "NO", "D", "CNN", "NUM", "NP", "NC", "NB", "L", "ND", "V", "TN", "Size", "NM", "MN", "NG", "CN", "BN", "NT", "NA", "K", "J", "FN", "Sn", "NE", "n", " n", "EN", "No", "M", "C"], "cnt": ["tcNT", "lcct", "cnc", "acnt", "tcnc", "lccount", "Cct", "cst", " cst", "cct", "acount", "cNT", "Cnc", "ncct", "ncnt", " cnc", "lcnn", "Cnt", " ccount", "count", "cnn", "ncnn", "CNT", "acst", "nccount", " count", "acNT", "tcnt", "ccount", "Count", "tcct", " cNT", "Cst", "lcnt", " cnn", " cct"], "ans": ["uns", "posts", "rs", "ATS", "oss", "can", "ats", "aos", "xs", "pan", " Ans", "ann", "nn", "cas", " spans", "ians", "lan", "vals", "ens", " means", "cs", "AN", "aus", "outs", "os", "angs", "ams", "lets", "anes", "eds", "aps", "gs", "anks", "ks", "ends", "ins", "an", "An", "lines", "cons", "ars", "names", "ms", "ents", "as", "ns", " scans", "ants", "nl", "ces", "eps", "ons", "n", " plans", "ps", "vers", "als", "arts", "nets", "ls", "ANS", "amps", "ations", "beans", "anc", "anon", "ads"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    private static final String REGIX_COMMA = \",\";\\n\\n    public static void main(String[] args) {\\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n        int wide = 0;\\n        int num = 0;\\n\\n        try {\\n            wide = Integer.valueOf(in.readLine());\\n            num = Integer.valueOf(in.readLine());\\n\\n            int[] lot = new int[wide];\\n\\n            for (int i = 0; i < lot.length; i++) {\\n                lot[i] = i + 1;\\n            }\\n\\n            for (int j = 0; j < num; j++) {\\n\\n                String[] changePosition = in.readLine().split(REGIX_COMMA);\\n                int left = Integer.valueOf(changePosition[0]) - 1;\\n                int right = Integer.valueOf(changePosition[1]) - 1;\\n\\n                int temp = lot[left];\\n                lot[left] = lot[right];\\n                lot[right] = temp;\\n            }\\n\\n            for (int answer : lot) {\\n                System.out.println(answer);\\n            }\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        } finally {\\n            try {\\n                in.close();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n        }\\n    }\\n}", "target": "156", "substitutes": {"REGIX_COMMA": ["REGIX_COMANA", "REGIXEDCOMA", "REGIX_CLEma", "REGIX_OMA", "REGIXEDCOMma", "REGIX_GREma", "REGIX_OMma", "REGIX_CLEANA", "REGIXEDCOMANA", "REGIX_GREMIT", "REGIX_COMA", "REGIX_COMMIT", "REGIX_GREANA", "REGIXEDCOMMA", "REGIX_OMMA", "REGIX_GREA", "REGIX_CLEMA", "REGIX_OMMIT", "REGIX_CLEA", "REGIX_COMma", "REGIX_GREMA"], "in": ["out", "q", "r", "rin", "mi", "std", "on", "er", "log", "mc", "inn", "world", "all", "bin", "ini", "stream", "mm", "m", "doc", "file", "user", "at", "read", "ad", "cin", "thin", "n", "id", "din", "sum", "l", "inf", "isin", "ri", "init", "OUT", "reader", "IN", "info", "from", "conf", "ain", "form", "inc", "get", "add", "input", "ind", "default", "again", "win", "per", "b", "In", "con", "it", "asin", " din", "by", "vin", "t", "this", "sys", "gin", "help", "en", "ins", "inner", "end", "ic", "is", "err"], "wide": ["hop", "rain", "ful", "blank", "bsp", "wen", "wid", "full", "lan", "wal", "arrow", "wa", "window", "available", "wk", "wh", "wi", "lon", "med", "width", "windows", "level", "sword", "en", "wl", "high", "local", "sw", "w", "dim", "no", "wn", "Wide", "ws", "week", "day", "wm", "mal", "wp", "sp", "snap", "al", "global", "win"], "num": ["mult", "sam", "nine", "um", "m", "mun", "multi", "mon", "sim", "con", "nn", "Num", "number", "net", "won", "full", "ran", "NUM", "mate", "pn", "mn", "nam", "qa", "zero", "nm", "en", "len", "np", "local", "cum", "cal", "no", "nu", "total", "mem", "dim", "un", "n", "snap", "na", "non", "valid", "nom", "sum", "rem", "win", "anon"], "lot": ["pit", "tery", "loc", "lib", "good", "slot", "nothing", "prime", "zero", "journal", "list", "Lot", "pat", "big", "piece", "battle", "just", "city", "pict", "plot", "jet", "bit", "queue", "year", "holiday", "league", "lol", "net", "won", "pocket", "adjusted", "some", "rent", "boot", "sit", "archive", "Slot", "table", "col", "question", "rot", "thing", "limited", "yt", "linger", "otted", "often", " Lot", "Lots", "ot", "lit", "goo", "hole", "bot", "bite", "led", "room", "bug", "val", "keeper", "nice", "pie", "got", "it", "quote", "spot", "stuff", "shot", "zone", "trial", "hot", "pot", "little", "elt", "like", "pots", "let"], "i": ["ii", "phi", "s", "multi", "ri", "init", "it", "hi", "q", "ims", "u", "ci", "di", "I", "mi", "ie", "info", "li", "p", "ei", "si", "point", "pi", "iq", "ti", "iter", "ia", "io", "my", "ij", "zi", "ui", "ini", "ai", "ic", "us", "iu", "ix", "ind", "ip", "y", "o", "is", "uri", "x", "im", "ori", "oi", "l", "ami", "ret", "qi"], "j": ["oj", "b", "out", "adj", "ja", "br", "it", "ji", "jj", "jc", "q", "z", "uj", "bj", "at", "el", "k", "jump", "json", "pr", "from", "kj", "jl", "obj", "jo", "g", "bot", "v", "other", "aj", "no", "jp", "ij", "dj", "jas", "n", "ix", "fr", "js", "y", "key", "x", "im", "ort", "job"], "changePosition": ["switchStatus", "changePoint", "switchLocation", "changedStatus", "ChangePoint", "changeStatus", " changeLocation", "changedPosition", "switchposition", " changePos", " changePoint", "ChangePosition", "changeLocation", " changeStatus", "changePos", "changedPoint", "changeposition", " changeposition", "changedLocation", "changedPos", "changedposition", "ChangeLocation", "switchPosition", "ChangePos", "switchPos", "switchPoint"], "left": ["label", "current", "wrong", "lower", "low", "expected", "lo", "full", "net", "loc", "missing", "cel", "top", "member", "min", "el", "com", "middle", "lock", "rel", "before", "Left", "start", "ll", "line", "log", "level", "li", "list", "len", "inner", "local", "le", "shift", "open", "center", "nl", "length", "last", "piece", "lt", "al", "child", "ell", "both", "old", "x", "small", "l"], "right": ["range", "third", "br", "after", "success", "ren", "top", "rc", "r", "re", "time", "only", "row", "close", "rel", "Right", "art", "before", "med", "result", "start", "wall", "ax", "recent", "back", "p", "rendered", "correct", "hr", "rh", "and", "end", "path", "rew", "step", "rights", "relative", "chain", "last", "length", "west", "over", "rest", "max", "x", "rem", "head"], "temp": ["Temp", "tem", "cap", "rain", "pad", "porary", "tmp", "perature", "test", "tc", "tim", "EMP", "mint", "fake", "hold", "t", "maker", "mate", "emp", "pt", "timer", "cu", "pre", "adjusted", "buffer", "template", "ptr", "ta", "mp", "cum", "mem", "deg", "orig", "cell", "tm", "div", "dat", "vt", "partial", "tt", "task", "Temperature", "mod"], "answer": ["ask", "message", "offer", "league", "see", "interpret", "value", "wer", "quote", "folio", "resp", "eni", "poll", "slot", "record", "remember", "result", "line", "example", "ve", "Answer", "come", "entry", "answered", "query", "turn", "response", "option", "name", "approximately", "trial", "onse", "vote", "archive", "oval", "word", "ry", "issue", "rue", "ell", "ret", "say", "question"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int K = s.nextInt();\\n        int gcd = 0;\\n\\n        for (int i = 1; i <= K; i++) {\\n            for (int j = 1; j <= K; j++) {\\n                for (int k = 1; k <= K; k++) {\\n                    gcd += gcd(gcd(j, k), i);\\n                }\\n            }\\n        }\\n\\n        System.out.println(gcd);\\n        s.close();\\n    }\\n\\n    public static int gcd(int p, int q) {\\n        if (p % q == 0) {\\n            return q;\\n        }\\n        return gcd(q, p % q);\\n    }\\n}", "target": "6", "substitutes": {"s": ["rs", "b", "m", "h", "sol", "sa", "xs", "ss", "S", "sb", "r", "sort", "sm", "t", "socket", "se", "so", "sys", "sc", "spec", "gs", "c", "sw", "ssl", "w", "v", "src", "a", "sv", "ms", "ws", "sl", "ns", "search", "south", "n", "sts", "ds", "ps", "js", "y", "ts", "ses", "is", "ls", "l", "sq"], "K": ["B", "KA", "P", "F", "KI", "UK", "OK", "KE", "SK", "S", "G", "KB", "Kent", "FK", "I", "Context", "Key", "Disk", "L", "V", "CH", "KS", "H", "NK", "N", "KN", "Kind", "Y", "T", "J", "KING", "Q", "Mask", "M", "KK", "KEY", "C", "Z", "KC", "KR", "X", "PK", "VK"], "gcd": ["gond", "ccd", "dcm", "dmd", "gld", "rgcd", " gond", "ccm", "gcm", "Gdd", "rCD", "cmd", "Gnd", "rcd", "garCD", "cld", "Gde", "gcp", "Gcd", " gnd", "dcp", "gpd", "rld", " GCD", "gccd", "dCD", "garcod", "dcod", "gardd", " Gdd", "Gmd", "rgCD", "gCD", "GCD", "cCD", "gmd", "Gld", "sgld", "sgCD", "garcd", " gdd", "Gpd", "gnd", "rgde", "gcod", "gcld", " gld", "gxd", "Gcod", " gcp", "ddd", "sgcd", " Gcd", "gde", " gCD", " gde", "sgxd", "Gond", "cond", "gdd", "cnd", "rxd", "ccp", " gmd", "rgmd", " gpd", "dcd", " gcm", " Gpd", "gcCD", "gcxd"], "i": ["ii", "phi", "m", "xi", "sim", "multi", "fi", "ri", "it", "bi", "init", "e", "f", "hi", "ims", "z", "iti", "yi", "ci", "di", "I", "mi", "ie", "info", "gi", "index", "ni", "li", "si", "pi", "iq", "iter", "ti", "ia", "io", "v", "a", "ij", "zi", "ui", "ini", "ai", "ic", "us", "iu", "ix", "to", "ip", "y", "o", "II", "x", "im", "ori", "l", "ami"], "j": ["oj", "b", "ja", "br", "bo", "ji", "jj", "jc", "jac", "r", "z", "be", "uj", "bj", "bs", "el", "rel", "jump", "son", "ie", "json", "je", "pt", "pr", "kj", "off", "jl", "obj", "jo", "g", "v", "Ja", "aj", "jp", "ij", "dj", "J", "jas", "or", "n", "sp", "js", "to", "y", "job"], "k": ["mk", "unk", "kar", "sk", "dk", "kin", "ke", "ko", "ik", "kn", "z", "kt", "kr", "km", "ok", "ph", "wk", "kh", "ak", "uk", "ck", "kj", "kid", "kl", "ka", "ku", "g", "ijk", "kk", "kw", "ark", "kernel", "kg", "y", "ek", "tk", "ki"], "p": ["per", "b", "m", "P", "h", "pe", "ap", "pid", "par", "r", "u", "t", "ph", "pm", "lp", "pl", "vp", "ping", "pt", "pc", "perm", "dp", "pre", "php", "tp", "part", "c", "pi", "g", "d", "v", "a", "ar", "jp", "n", "pa", "ps", "ip", "y", "pro", "x", "pp", "l", "cp"], "q": ["eq", "qq", "b", "m", "h", "aq", "f", "r", "z", "u", "qt", "qu", "t", "pm", "dq", "ch", "qa", "pc", "pt", "qv", "qs", "quit", "que", "ck", "ve", "query", "ue", "c", "le", "iq", "g", "d", "v", " Q", "question", "Q", "n", "pg", "y", "quant", "x", "pp", "l", "cp", "sq", "qi"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner scan = new Scanner(System.in);\\n    char alpha = scan.next().charAt(0);\\n    int code = (int)(alpha);\\n    if (65<=code && code<=90){\\n      System.out.println(\"A\");\\n    }else{\\n      System.out.println(\"a\");\\n    }\\n  }\\n}\\n", "target": "80", "substitutes": {"scan": ["store", "save", "out", "m", "san", "check", "system", "can", "skip", "char", "Scan", "run", "in", "r", "walk", "re", "scroll", "set", "nav", "read", "sync", "connect", "se", " Scan", "ch", "seek", "sys", "proc", "sc", "reach", "ner", "query", "send", "gate", "an", "sin", "get", "scale", "auto", "sv", "util", "begin", "n", "ser", " scanner", "stat", "sum", "find"], "alpha": ["la", "LA", "digit", "pha", "letter", "alias", "sha", "da", "hi", "face", " Alpha", "lambda", "area", "ca", "prime", "beta", "ma", "ac", "acc", "si", "xa", "prefix", "ta", "a", "HA", "auto", "capital", " \u03b1", "Alpha", "priority", "starter", "base", "ra", "asc", "alph", "upper", "ho", "primary", "ity"], "code": ["message", "mode", "check", "class", "page", "ode", "age", "sequence", "value", "test", "cc", "cache", "magic", "coe", "success", "rc", "number", "hello", "Code", "ci", "cd", "close", "xxx", "mi", "ie", "ne", "go", "ch", "prime", "result", "zero", "index", "entry", "scene", "create", "status", "c", "count", "data", "num", "type", "co", "length", "ce", "zip", "xx", "div", "base", "now", "func", "size", "sec", "cod", "codes"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\t\tfor(int i=1;;i++){\\n\t\t\t\tint n = scan.nextInt();\\n\t\t\t\tif(n != 0)\\n\t\t\t\t\tSystem.out.println(\"Case \" + i + \": \" + n);\\n\t\t\t\telse if(n == 0){\\n\t\t\t\t\tscan.close();\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t}\\n}", "target": "97", "substitutes": {"scan": ["store", "save", "out", "san", "check", "clean", "con", "system", "can", "skip", "see", "Scan", "nn", "ann", "in", "by", "ran", "scroll", "set", "row", "vis", "read", "sync", "connect", "se", "seek", "sys", "reach", "sc", "ner", "report", "p", "query", "match", "send", "gate", "parse", "an", "gc", "sin", "g", "scale", "get", "sv", "search", "trans", "watch", "na", "stat", "sum", "find"], "i": ["ii", "phi", "m", "xi", "multi", "sim", "j", "init", "sequence", "it", "hi", "q", "z", "u", "yi", "ci", " mi", "di", "I", "mi", "ie", "gi", "index", "li", "ei", "si", "c", "pi", " ii", "iter", "ti", "ij", "zi", "ui", "ini", "ic", "ai", "chain", "iu", "ind", "ix", "y", "is", "im", "oi", "ki"], "n": ["ng", "m", "norm", "j", "nan", "yn", "nn", "number", "fn", "none", "ln", "nd", "t", "k", "ne", "mn", "ni", "nm", "null", "en", "len", "nc", "gn", "nor", "np", "note", "N", "c", "nb", "g", "d", "no", "nu", "ns", "num", "un", "nl", "l", "sn", "yes", "na", "non", "dn", "cn", "nr", "nt"]}}
{"code": "import java.util.*;\\nimport java.lang.Math;\\n\\npublic class Main{\\n    \\n    \\n        \\n    public static void main(String[] args){\\n        Scanner sc=new Scanner(System.in);\\n        int t=sc.nextInt();\\n        int s=sc.nextInt();\\n        int result=0;\\n        result=t*s;\\n        System.out.println(result);\\n        \\n    }\\n}", "target": "35", "substitutes": {"sc": ["system", "cc", "cle", "cr", "tc", "ss", "rc", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "se", "ch", "osc", "pc", "isc", "sys", "mc", "scl", "c", "nc", "acc", "sh", "SC", "sw", "inc", "gc", "fc", "sv", "lc", "sp", "ser", "asc", "conv", "ctrl", "sch", "sec", "anc", "usc", "sq"], "t": ["tu", "m", "b", "h", "j", "i", "f", "tc", "q", "fort", "hat", "wt", "dt", "pt", "tip", "tp", "p", "c", "ot", "ta", "g", "d", "v", "total", "T", "type", "n", "tn", "tr", "y", "ts", "tt", "x", "te", "rt", "tf", "nt"], "s": ["hs", "rs", "b", "h", "its", "ats", "ies", "i", "fs", "f", "ss", "S", "cs", "os", "qs", "sys", "eds", "gs", "p", "si", "c", "ols", "ins", "ys", "g", "d", "a", "ms", "ns", "ids", "n", "ds", "ps", "js", "ts", "ls", "is", "ints"], "result": ["successful", "message", "mask", "tmp", "sequence", "test", "value", "progress", "success", "number", "r", "answer", "goal", "complete", "diff", "relation", "function", "zero", "Result", "p", "product", "match", "np", "currency", "su", "status", "correct", "score", "data", "res", "d", "comb", "total", "trade", "different", "results", "cup", "power", "search", "length", "integer", "vector", "tr", "direction", "RESULTS", "valid", "ret", "sum"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String[] inputStr = sc.next().split(\"\");\\n        int result = 0;\\n        if(\"1\".equals(inputStr[0])){\\n            result++;\\n        }\\n        if(\"1\".equals(inputStr[1])){\\n            result++;\\n        }\\n        if(\"1\".equals(inputStr[2])){\\n            result++;\\n        }\\n\\n        System.out.println(result);\\n    }\\n}\\n", "target": "165", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "ok", "ec", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "nc", "c", "sci", "sub", "SC", "gc", "sw", "src", "sv", "scan", "lc", "sp", "sel", "ser", "asc", "conv", "sch", "sec", "anc", "usc", "sq", "tk"], "inputStr": [" inputSet", "helloFig", "inputColl", "InputFig", "InputSt", "inVer", "inputString", "helloStr", "InputList", "querySl", "inFig", "outputStr", "queryFig", "inString", "inputSet", "helloString", "inSet", "InputSet", "InputSl", " inputString", "outputVer", "outputString", "inputList", "outputFig", "inputSl", "InputColl", " inputList", "InputString", "inputVer", "inStr", "inputSt", "InputStr", "enumStr", "inColl", "inSt", "enumString", "enumFig", "helloSl", "queryStr", "inputFig", " inputSt", "enumVer", " inputColl", "inList", "queryString"], "result": ["duration", "done", "successful", "message", "ful", "card", "true", "sequence", "test", "progress", "success", "number", "error", "goal", "continue", "row", "complete", "diff", "this", "die", "zero", "counter", "Result", "finder", "date", "back", "report", "product", "match", "currency", "status", "score", "count", "draw", "trace", "res", "other", "created", "normal", "total", "debug", "make", "params", "coord", "results", "different", "num", "chain", "ULT", "global", "integer", "length", "unique", "fac", "default", "RESULTS", " resulted", "valid", "ret", "functional"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int M = sc.nextInt();\\n    int[] K = new int[N];\\n    int[][] A = new int[N][M];\\n    int[] count = new int[M];\\n    int ans =0;\\n    for (int i=0; i<N; i++) {\\n      K[i] = sc.nextInt();\\n      for (int j=0; j<K[i]; j++) {\\n        A[i][j] = sc.nextInt();\\n      }\\n    }\\n    for (int i=1; i<=M; i++) {\\n      for (int j=0; j<N; j++) {\\n        for (int k=0; k<K[j]; k++) {\\n          if(A[j][k] == i) {\\n            count[i-1]++;\\n          }\\n        }\\n      }\\n    }\\n    for (int i=1; i<=M; i++) {\\n      if (count[i-1] == N) ans++;\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "169", "substitutes": {"sc": [" Sc", "ng", "cc", "cle", "tc", "cr", "ss", "rc", "capt", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "dec", "ch", "osc", "pc", "isc", "sys", "mc", "scl", "c", "nc", "sci", "sub", "SC", "gc", "sw", "inc", "ctx", "fc", "arc", "sv", "screen", "dc", "lc", "scan", "sp", "asc", "conv", "cgi", "sch", "sec", "anc", "usc", "irc", "sq"], "N": ["B", "NH", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "NL", "AN", "NS", "I", "D", "NO", "NP", "NC", "NB", "L", "ND", "V", "TN", "NM", "MN", "H", "Net", "NT", "NA", "Y", "T", "J", "Q", "NE", "n", "Count", "R", "C", "Z", "X", "Na", "O"], "M": ["B", "MAT", "E", "m", "P", "F", "Memory", "TM", "MAN", "RM", "MM", "CM", "S", "G", "LM", "MO", "I", "D", "L", "MP", "MA", "V", "NM", "MN", "MC", "Y", "T", "Mi", "Mon", "IM", "J", "Q", "MT", "MS", "U", "MI", "R", "ME", "C", "Z", "O"], "K": ["B", "KA", "P", "KI", "UK", "KE", "OK", "Know", "SK", "S", "G", "KB", "FK", "Power", "I", "Key", "Disk", "CP", "L", "MK", "V", "KS", "H", "TH", "KN", "Kind", "T", "J", "Q", "IK", "Mask", "AK", "R", "KK", "KEY", "C", "Z", "KR", "X", "PK", "VK"], "A": ["AC", "B", "AT", "P", "At", "AA", "CA", "As", "BA", "AN", "AB", "I", "SA", "MA", "V", "ACC", "H", "AF", "An", "AM", "AV", "AU", "a", "NA", "Y", "HA", "TA", "T", "Ar", "ACE", "Array", "AR", "JA", "R", "ATA", "The", "C", "EA", "AP"], "count": ["range", "current", "ct", "flag", "cache", "number", "q", "span", "hold", "set", "cd", "history", "force", "info", "stack", "result", "counter", "index", "list", "report", "consider", "p", "c", "cycle", "match", "code", "score", "gc", "trace", "nb", "comment", "st", "v", "add", "total", "config", "num", "length", "n", "map", "Count", "ind", "cond", "max", "size", "C", "sum", "find", "found", "nt"], "ans": ["rows", "posts", "annot", "s", "can", "ats", "nan", "ies", "xs", "ings", "ann", "nn", "ims", "vals", "span", "ens", "cs", "AN", "errors", "outs", "os", "unks", "ags", "offs", "aps", "ks", "ins", "nz", "an", "lines", "cons", "ions", "ms", "ents", "times", "ns", " scans", "ows", "ants", "ids", "un", "flags", "ates", "scan", "ds", "ind", "stats", "arts", "ps", "ls", "ANS", "is", "amps", "ations", "nt"], "i": ["ji", "hi", "q", "ani", "in", "ci", "mi", "list", "li", "ist", "iq", "v", "ij", "ui", "ini", "ai", "ish", "ix", "m", "multi", "e", "bi", "ik", "user", "iy", "at", "ei", "pi", "It", "a", "cli", "zi", "n", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "ri", "fi", "init", "di", "rel", "info", "gi", "start", "index", "ni", "si", "ti", "io", "iri", "ind", "to", "ip", "o", "II", "ori", "qi", "phi", "xi", "me", "sim", "s", "it", "ims", "I", "parent", "this", "ie", "p", "point", "inner", "iter", "ia", "ic", "iu", "is", "x", "oi", "batch"], "j": ["oj", "b", "s", "og", "bo", "br", "ja", "ji", "jj", "it", "jc", "str", "jac", "q", "r", "z", "be", "by", "uj", "bj", "bs", "at", "ph", "el", "di", "jump", "rel", "jit", "ne", "json", "je", "pt", "pr", "kj", "ax", "er", "kid", "note", "jl", "obj", "jo", "g", "st", "other", "bot", "aj", "v", "jp", "ij", "res", "dj", "J", "tr", "sp", "fr", "js", "to", "y", "o", "l", "job", "ge"], "k": ["mk", "unk", "kar", "sk", "dk", "kin", "ke", "ko", "ik", "q", "kn", "kt", "kr", "km", "ok", "ker", "wk", "kh", "ak", "uk", "ck", "kj", "kid", "kl", "ka", "ks", "g", "ku", "kk", "kw", "ark", "kg", "key", "ek", "KR", "tk", "ki"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String args[]) {\\n        final Scanner lineScanner = new Scanner(System.in);\\n        final int A = lineScanner.nextInt();\\n        final int B = lineScanner.nextInt();\\n        final int needIndex = lineScanner.nextInt();\\n \\n        List<Integer> numList = new ArrayList<>();\\n        for (int i = 1; i <= A && i <= B; i++) {\\n            if (A % i == 0 && B % i == 0) {\\n                numList.add(i);\\n            }\\n        }\\n        Collections.sort(numList, Collections.reverseOrder());\\n        System.out.println(numList.get(needIndex - 1));\\n    }\\n}", "target": "134", "substitutes": {"lineScanner": [" lineCorr", "linePlanner", "lineMatinner", "linePlaner", " linePlanners", "linescanner", "linescanker", " lineScanker", " linePlanner", "lineGenerer", "linescanr", "lineScanker", " lineScanners", "lineCorner", " lineScanr", "lineJanner", " lineScaninner", "linescanener", "lineMatner", "lineScaninner", "linescanter", "lineMatener", "linescaner", " lineCorner", " lineScanter", "linePlanr", "lineScanter", "lineMater", "lineJaninner", "lineScr", "lineScanr", "lineScter", "lineScer", " linePlaner", "lineCorr", " lineCorer", "linescanners", "lineScaner", "linescaninner", "lineCorter", " lineCorter", "lineScanener", " lineScanener", "lineGenerners", "lineJaner", "lineGenerner", "lineCorer", "lineGenerr", " linePlanr", " lineScaner", "lineJanker", "lineScanners", "lineScner", "linePlanners"], "A": ["AC", "AT", "P", "GA", "LA", "AGE", "AD", "AA", "UA", "AS", "As", "CA", "Ax", "BA", "RA", "AN", "AI", "AB", "AST", "API", "L", "ALL", "SA", "AL", "ACC", "AE", "ACT", "AF", "An", "AU", "AV", "NA", "HA", "TA", "Area", "IA", "AY", "Alpha", "AR", "JA", "C", "AP"], "B": ["b", "P", "BB", "USB", "FB", "CB", "BM", "BA", "G", "RB", "I", "AB", "GO", "OB", "L", "BO", "V", "BY", "EB", "BI", "TB", "N", "BER", "BL", "IB", "Y", "Bar", "DB", "J", "Reb", "GB", "Bern", "BG", "WB", "LB", "BU", "M", "R", "JB", "C", "Z", "BE", "BR", "BC"], "needIndex": ["wantOrder", "neededindex", "NeedCount", "neededInd", "neededIndex", "findCount", "needInd", "NeedIndex", "findIndex", "wantInd", " needindex", "needindex", "NeedOrder", "Needindex", "wantindex", "findInd", "needOrder", " needInd", "neededCount", " needOrder", "needCount", "NeedInd", "wantIndex", "findindex"], "numList": ["nList", "numL", "nmMap", "namlist", "numArray", " numL", "numberListener", "numBlock", "numlist", "numRest", "NumSet", "namArray", "nmList", "NumL", " numberList", "namList", " numberRest", " numSet", "nlist", " numMap", "nBlock", "numberSet", "nmlist", "numberlist", " numlist", "numberMap", " numArray", " numBlock", "namBlock", "NumRest", "numMap", " numberSet", "numberList", "nmSet", "numListener", "numSet", " numListener", "NumList", " numRest", "nArray", "NumListener", " numberL"], "i": ["ii", "phi", "m", "xi", "multi", "j", "sim", "fi", "ri", "init", "it", "bi", "ji", "ik", "hi", "q", "ims", "u", "yi", "ci", "t", "di", "I", "mi", "ie", "info", "ib", "gi", "index", "client", "mu", "li", "ei", "si", "point", "pi", "iter", "iq", "ti", "v", "a", "cli", "io", "ij", "zi", "ui", "isi", "ini", "ai", "ic", "us", "chain", "iu", "n", "ix", "ind", "id", "ip", "y", "is", "uri", "x", "ori", "oi", "batch", "qi", "ki"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    Scanner sc = new Scanner(System.in);\\n\\n    PrintWriter out = new PrintWriter(System.out);\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    void run() {\\n\\n        String s = sc.next();\\n        char[] arr = s.toCharArray();\\n\\n        for (int i=0; i<s.length()/2; i++) {\\n            if (arr[i]!=arr[s.length()-1-i]) {\\n                out.print(\"No\");\\n                out.flush();\\n                return;\\n            }\\n        }\\n\\n        for (int i=0; i<s.length()/2-1; i++) {\\n            if (arr[i]!=arr[(s.length()/2)-1-i]) {\\n                out.print(\"No\");\\n                out.flush();\\n                return;\\n            }\\n     \\n        }\\n\\n        out.print(\"Yes\");\\n        out.flush();\\n    }\\n\\n}\\n", "target": "123", "substitutes": {"sc": ["rs", "tch", "cc", "tc", "cr", "ss", "rc", "pb", "cl", "bc", "cs", "ec", "esc", "sync", "Sc", "isc", "pc", "osc", "ch", "uc", "sys", "ac", "mc", "nc", "c", "sci", "SC", "gc", "sw", "sv", "nl", "lc", "scan", "sp", "ser", "sch", "anc", "syn", "sq"], "out": ["in", "r", "ou", "outer", "on", "log", "list", "obj", "w", "res", "v", "all", "err", "gt", "can", "cmd", "net", "put", "file", "user", "at", "format", "sync", "pretty", "conn", "external", "print", "write", "output", "screen", "update", "n", "timeout", "fail", "sum", "cn", "hit", "init", "error", "full", "OUT", "pool", "outs", "info", "conf", "io", "to", "flush", "o", "writer", "nt", "warn", "msg", "con", "aos", "it", "str", "cache", "t", "set", "exit", "os", "sys", "client", "Out", "report", "en", "ex", "g", "co", "conv", "over", "batch"], "s": ["hs", "rs", "m", "b", "h", "string", "its", "ats", "str", "f", "xs", "ss", "r", "S", "sb", "bs", "t", "series", "se", "qs", "ashes", "sys", "gs", "p", "c", "space", "sql", "sw", "w", "g", "st", "v", "a", "src", "less", "https", "sv", "ms", "ns", "n", "sf", "sts", "sp", "ds", "ps", "js", "ls", "ts", "is", "l", "sq"], "arr": ["aaa", "rs", "adj", "arb", "img", "addr", "br", "bl", "str", "rep", "r", "av", "vec", "buf", "dict", "au", "coll", "rel", "att", "pl", "gb", "ch", "attr", "alg", "cur", "list", "app", "vol", "obj", "db", "iq", "compl", "array", "res", "buff", "mb", "ar", "deg", "unch", "Ar", "abc", "arm", "gr", "Array", "dat", "hist", "fr", "ang", "val", "cmp", "err", "conv", "alph", "batch", "hash", "rr", "frac"], "i": ["ii", "phi", "gu", "xi", "me", "multi", "sim", "j", "ri", "eu", "init", "bi", "it", "ji", "hi", "q", "ims", "u", "ci", "di", "I", "mi", "record", "this", "exp", "gi", "ni", "list", "li", "ei", "si", "pi", "ex", "iq", "ti", "g", "v", "io", "cli", "ij", "zi", "ui", "ini", "ic", "ai", "\u0438", "us", "chain", "iu", "base", "ix", "ind", "to", "ip", "y", "o", "is", "uri", "x", "im", "oi", "ori", "err", "ity", "qi", "ki"]}}
{"code": "import java.io.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args)throws IOException{\\n\t\t\\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str=br.readLine();\\n\t\t\\n\t\tString[] text=str.split(\" \");\\n\t\tint a=Integer.parseInt(text[0]);\\n\t\tString b=text[1];\\n\t\tint c=Integer.parseInt(text[2]);\\n\t\t\\n\t\twhile (b.equals(\"?\") == false){\\n\t\t\t\tif(b.equals(\"+\")){\\n\t\t\t\tSystem.out.println(a+c);\\n\t\t\t}else if(b.equals(\"-\")){\\n\t\t\t\tSystem.out.println(a-c);\\n\t\t\t}else if(b.equals(\"*\")){\\n\t\t\t\tSystem.out.println(a*c);\\n\t\t\t}else if(b.equals(\"/\")){\\n\t\t\t\tSystem.out.println(a/c);\\n\t\t\t}\\n\t\t\tstr=br.readLine();\\n\t\t\ttext=str.split(\" \");\\n\t\t\ta=Integer.parseInt(text[0]);\\n\t\t\tb=text[1];\\n\t\t\tc=Integer.parseInt(text[2]);\\n\t\t}\\n\t}\\n}", "target": "139", "substitutes": {"br": ["bridge", "lr", "Br", "bsp", "bl", "shr", "cr", "bf", "r", "dr", "be", "ctr", "driver", "abs", "kr", "bs", "bc", "reader", "buf", "nr", "rel", "ch", "pr", "repl", "bb", "hr", "db", "rb", "sr", "bp", "bro", "jp", "adr", "vr", "bt", "yr", "div", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "err", "mr", "BR"], "str": ["out", "msg", "string", "s", "STR", "i", "bl", "char", "it", "cr", "ocr", "f", "r", "dr", "ctr", "arr", "Str", "t", "cont", "exp", "ch", "pt", "pr", "buffer", "line", "list", "vol", "p", "spec", "print", "obj", "parse", "iter", "txt", "g", "st", "mt", "input", "raw", "sl", "ns", "gr", "div", "n", "tr", "sp", "fr", "hex", "wr", "nt"], "text": ["act", "label", "message", "check", "term", "msg", "string", "ct", "struct", "context", "test", "it", "command", "details", "net", "q", "cmd", "quote", "event", "yt", "select", "desc", "qu", "t", "cont", "format", "att", "tx", "ext", "art", "ch", "pt", "json", "info", "TEXT", "log", "list", "tex", "match", "print", "vert", "note", "form", "comment", "data", "txt", "lex", "port", "output", "config", "input", "left", "Text", "search", "xt", "phrase", "word", "ind", "pattern", "def", "ip", "hex", "post", "tt", "source", "attribute", "old", "tab", "te", "nt"], "a": ["aaa", "aff", "sta", "la", "apa", "oa", "sa", "i", "aq", "eas", "ama", "da", "am", "era", "t", "A", "au", "area", "att", "ab", "ca", "ma", "ac", "ba", "ao", "ea", "af", "aka", "ta", "an", "aa", "ia", "aj", "ar", "ata", "ga", "all", "as", "ai", "alpha", "pai", "pa", "va", "x", "l", "ae", "fa"], "b": ["B", "m", "h", "eb", "ob", "http", "binary", "bo", "i", "bl", "bi", "f", "e", "pb", "it", "url", "bf", "bool", "r", "sb", "be", "body", "fb", "by", "bs", "bc", "t", "rob", "lib", "ab", "cb", "gb", "ib", "emb", "bis", "ch", "internal", "bb", "p", " eb", "ba", "db", "rb", "nb", "g", "d", "bp", "buff", "mb", " ba", "abc", "bar", "base", "verb", "bh", "bound", "y", "l"], "c": ["h", "ct", "cc", "i", "e", "f", "cache", "tc", "cr", "rc", "r", "z", "ci", "ec", "cm", "bc", "t", "cs", "cd", "cb", "ca", "cf", "cur", "cu", "sc", "ac", "mc", "nc", "conf", "crit", "count", "gc", "fc", "arc", "v", "d", "etc", "abc", "ic", "cy", "dc", "ce", "lc", "n", "unc", "C", "l", "cp"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Main main = new Main();\\n    main.solve();\\n    main.show();\\n  }\\n\\n  List<Deque<Integer>> a;\\n  int ans;\\n  int turn = 0;\\n  boolean win = false;\\n  static final int A = 0;\\n  static final int B = 1;\\n  static final int C = 2;\\n  static final int N = 3;\\n\\n  public Main() {\\n    Scanner sc = new Scanner(System.in);\\n    try {\\n      a = new ArrayList<Deque<Integer>>();\\n      a.add(read(sc));\\n      a.add(read(sc));\\n      a.add(read(sc));\\n    } finally {\\n      sc.close();\\n    }\\n  }\\n\\n  private static Deque<Integer> read(Scanner sc) {\\n    Deque<Integer> ans = new ArrayDeque<Integer>();\\n    String s = sc.next();\\n    int n = s.length();\\n    for (int i = 0; i < n; i++) {\\n      if (s.charAt(i) == 'a' ) ans.addLast(A);\\n      if (s.charAt(i) == 'b' ) ans.addLast(B);\\n      if (s.charAt(i) == 'c' ) ans.addLast(C);\\n    }\\n    return ans;\\n  }\\n  \\n  void solve() {\\n    while (!win) play();\\n  }\\n\\n  void play() {\\n    if (a.get(turn).size() == 0) {\\n      win = true;\\n      ans = turn;\\n      return;\\n    }\\n    turn = a.get(turn).pollFirst();\\n  }\\n\\n  void show() {\\n    if (ans == A) System.out.println(\"A\");\\n    if (ans == B) System.out.println(\"B\");\\n    if (ans == C) System.out.println(\"C\");\\n  }\\n}\\n", "target": "11", "substitutes": {"a": ["aaa", "act", "done", "b", "m", "h", "apa", "la", "oa", "aos", "sa", "eas", "e", "da", "aw", "am", "era", "wa", "parts", "order", "t", "at", "au", "area", "ab", "ca", "qa", "ma", "ac", "p", "ba", "ao", "c", "xa", "ea", "ta", "an", "w", "aa", "ack", "ia", "d", "ata", "ga", "all", "as", "access", "aux", "na", "to", "y", "va", "o", "ach", "ae", "fa"], "ans": ["ats", "eas", " spans", "vals", "ens", " means", "AN", "ks", "leans", "ions", "ars", "flags", "as", "ows", "orts", "ces", "faces", "ls", "can", "pan", "ann", "aus", "ops", "sets", "aps", "anners", "an", "names", "ms", " scans", "ons", "arts", "ports", "games", "actions", "ads", "asks", "rs", "caps", "rans", "types", "ians", "terms", "outs", "anas", "ams", "ums", "An", "cons", "ents", "ids", "vers", "users", "uns", "posts", "vs", "aos", "xs", "ones", "ands", "cs", "os", "angs", "lets", "offs", "en", "ins", " pan", "aces", "ia", "ras", "ns", "versions", "ants", "ates", "scan", "ANS", "amps", "es", "olds"], "turn": ["out", "rain", "ct", "can", "pid", "pop", "run", "loc", "won", "r", "tun", "urn", "wan", "cas", "focus", "sort", "time", "window", "set", "row", "poll", "fun", "lock", "pos", "rand", "go", "pt", "start", "index", "on", "line", "ash", "back", "pen", "sh", "cycle", "ot", "form", "round", "count", "an", "Turn", "draw", "root", "port", "v", "add", "rank", "input", "shift", "co", "length", "snap", "wind", "ver", "roll", "rest", "stick", "turned", "key", "x", "sum", "head"], "A": ["AC", "AT", "E", "P", "GA", "At", "AA", "AS", "S", "CA", "As", "BA", "G", "RA", "AN", "AI", "AB", "I", "AH", "AST", "L", "SA", "AL", "This", "H", "AE", "ACT", "An", "AM", "AV", "AU", "ESS", "Area", "IA", "AR", "JA", "U", "R", "ATA", "AP"], "B": ["E", "b", "P", "BB", "FB", "Ber", "Blue", "S", "BA", "G", "RB", "AB", "I", "OB", "NB", "L", "BO", "VB", "V", "BY", "EB", "BI", "BL", " b", "IB", "Y", "T", "Bar", "MB", "Both", "DB", "GB", "BG", "PB", "WB", "LB", "BU", "Builder", "M", "R", "JB", "Bi", "SB", "BE", "BR", "Bs", "BC"], "C": ["AC", "E", "P", "F", "Co", "CB", "CM", "S", "CA", "CG", "G", "CS", "CR", "I", "D", "CNN", "O", "EC", "CP", "L", "V", "TC", "c", "VC", "WC", "CN", "H", "CL", "SC", "Y", "T", "Q", "Cs", "U", "M", "R", "YC", "Z", "CC", "BC"], "N": ["E", "P", "S", "G", "NS", "I", "D", "W", "NC", "NB", "L", "V", "TN", "H", "NA", "Y", "T", "K", "J", "Q", "M", "R", "Z", "X", "O"], "sc": ["system", "sim", "syn", "cc", "tc", "ss", "cam", "rc", "pb", "cr", "cl", "bc", "cs", "ec", "esc", "sync", "Sc", "se", "ch", "pc", "osc", "isc", "soc", "sys", "mc", "scl", "c", "nc", "si", "chron", "sh", "sci", "mp", "SC", "gc", "sw", "sr", "ctx", "arc", "src", "sv", "cor", "ic", "mic", "dc", "lc", "scan", "sp", "ser", "asc", "cer", "sch", "sec", "anc", "irc", "sq", "tk"], "s": ["sam", "rs", "b", "m", "h", "its", "ats", "str", "f", "ss", "r", "S", "sb", "gets", "cs", "t", "series", "qs", "spec", "p", "gs", "c", "space", "sql", "sw", "lines", "g", "v", "less", "strings", "sv", "ms", "ws", "ns", "search", "south", "sts", "ds", "ps", "js", "y", "ls", "ts", "is", "l", "sq"], "n": ["ng", "m", "nan", "f", "nn", "net", "r", "z", "ln", "nia", "t", "ne", "mn", "ll", "on", "ni", "nm", "en", "p", "c", "np", "nc", "nb", "g", "w", "nu", "ns", "un", "nl", "sn", "na", "non", "o", "x", "l", "nt"], "i": ["ii", "phi", "m", "xi", "me", "multi", "j", "sim", "ri", "eu", "it", "bi", "ji", "hi", "q", "in", "r", "u", "ci", "di", "I", "mi", "series", "info", "gi", "slice", "ni", "li", "p", "ei", "si", "c", "ski", "pi", "ex", "iq", "ti", "cli", "io", "my", "zi", "ui", "ini", "ai", "\u0438", "ic", "iu", "ix", "ip", "y", "o", "is", "uri", "x", "ori", "qi", "ki"], "win": ["Win", "check", "play", "warn", "rain", "con", "rec", "init", "game", "run", "skin", "won", "in", "ln", "wan", "wal", "wait", "ran", "window", "poll", "lock", "pos", "rand", "wine", "gui", "windows", "conn", "reg", "pen", "ins", "local", "WIN", "draw", "w", "fc", "then", "wn", "bin", "open", "screen", "ws", "wd", "week", "scan", "wp", "cond", "is", "func", "man", "wx"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int[] list = new int[26];\\n        int i, c;\\n        String str;\\n        \\n        //list = null;\\n        \\n        while(sc.hasNext()) {\\n        \tstr = sc.nextLine();\\n        \t\\n        \tfor(i = 0; i < str.length(); i++) {\\n        \t\tc = str.toLowerCase().charAt(i) - 97;\\n        \t\tif(c >= 0) list[c]++;\\n        \t}\\n        }\\n        \\n        for(i = 0; i < 26; i++) {\\n        \tSystem.out.printf(\"%s : %d\\n\", (char)(i + 97), list[i]);\\n        }\\n    }\\n}\\n", "target": "242", "substitutes": {"sc": [" Sc", "system", "sa", "ss", "cr", "rc", "cl", "cs", "Sc", "se", "ch", "sys", "proc", " SC", " scr", "SC", "gc", "sw", "sr", "sv", " sk", "scan", " sp", "sp", "sel", "ser", " unsc", "sq"], "list": ["cl", "ci", "set", "cont", "parent", "info", "LIST", "level", "li", "len", "code", "conf", "obj", "count", "array", "name", "num", "type", "const", "lc", "map", "lt", "max", "key", "l"], "i": ["ii", "m", "b", "j", "it", "f", "z", "ci", "t", "I", "k", "info", "index", "li", "p", " ii", "pi", "v", "io", "ai", " j", "ind", "id", "is", "x", "l"], "c": ["m", "ct", "cc", "e", "cat", "f", "tc", "ci", "cm", "cs", "cd", "cont", "t", "k", "ch", "p", "count", "d", "dc", "ce", "lc", "n", "xc", "o", "C", "cn", "l", "cp"], "str": ["string", "STR", "br", "char", "doc", "r", "arr", "Str", "re", "set", "t", " ch", "print", "obj", "data", "txt", " Str", "st", "res", "name", "text", "tr", "sp", "fr", "key", " st", "stable"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic void main(Scanner sc) {\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\\n\t\tSystem.out.println(a * b);\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tnew Main().main(sc);\\n\t}\\n}\\n", "target": "35", "substitutes": {"sc": ["system", "sk", "cc", "tc", "pb", "cam", "rc", "cr", "ss", "cl", "sb", "ko", "cv", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "ctl", "se", "isc", "pc", "ca", "ch", "osc", "soc", "cu", "uc", "sys", "mc", "scl", "c", "nc", "sh", "mp", "SC", "gc", "sw", "ctx", "sv", "lc", "scan", "sp", "sel", "pic", "cmp", "asc", "cgi", "cer", "conv", "ctrl", "sch", "anc", "sec", "usc", "irc", "sq"], "a": ["aaa", "act", "sta", "la", "oa", "sa", "i", "aq", "da", "z", "t", "A", "au", "area", "ab", "ca", "ma", "ac", "ba", "ao", "ea", "af", "xa", "ta", "an", "aa", "d", "ia", "aj", "ai", "as", "n", "pa", "na", "va", "x", "ae", "fa"], "b": ["B", "m", "eb", "ob", "j", "br", "i", "e", "bi", "f", "r", "sb", "be", "z", "fb", "bc", "t", "ab", "ib", "gb", "cb", "beta", "bb", "back", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "mb", "bar", "n", "bound", "wb"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int m = sc.nextInt();\\n\\n    int[] a = new int[m];\\n    int[] b = new int[m];\\n\\n    for (int i = 0; i < m; i++) {\\n      a[i] = sc.nextInt();\\n      b[i] = sc.nextInt();\\n    }\\n\\n    int[] c = new int[n];\\n\\n    for (int i = 0; i < n; i++) {\\n      for (int j = 0; j < m; j++) {\\n        if (a[j] == i+1 || b[j] == i+1) {\\n          c[i]++;\\n        }\\n      }\\n    }\\n\\n    for (int i = 0; i < n; i++) {\\n      System.out.println(c[i]);\\n    }\\n\\n  }\\n\\n}\\n", "target": "57", "substitutes": {"sc": [" Sc", "cc", "cle", "tc", "cr", "ss", "rc", "capt", "cl", "sb", "irc", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "sys", "psc", "mc", "scl", "nc", "sci", "si", "sh", "SC", "sw", "inc", "gc", "ctx", "fc", "st", "sv", "co", "lc", "scan", "sp", "ser", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "n": ["h", "norm", "nan", "nn", "net", "r", "z", "t", "ne", "mn", "network", "on", "ni", "nm", "en", "p", "nc", "np", "nor", "N", "pi", "an", "nb", "g", "d", "v", "nu", "no", "name", "all", "ns", "num", "un", "nl", "sn", "na", "y", "o", "x", "dn", "cn", "l", "nt"], "m": ["mk", "mat", "h", "mun", "um", "s", "me", "dm", "r", "z", "mis", "om", "cm", "sm", "t", "mo", "mi", "mn", "md", "perm", "med", "ma", "p", "mc", "bm", "pi", "gm", "g", "v", "mb", "mem", "mt", "all", "ms", "rm", "tm", "mas", "M", "mm", "y", "model", "o", "x", "im", "em", "l", "man", "rem", "mr"], "a": ["aaa", "\u00e4", "la", "oa", "ap", "sa", "am", "r", "at", "A", "au", "area", "att", "acs", "ab", "ma", "app", "ac", "p", "ba", "ao", "ea", "an", "array", "aa", "ar", "ata", "ga", "ai", "as", "na", "va", "o", "ae"], "b": ["B", "h", "eb", "ob", "s", "br", "bl", "bi", "bf", "r", "sb", "be", "fb", "bs", "bc", "t", "blue", "ab", "ib", "gb", "cb", "bis", "bb", "back", "p", "ba", "db", "rb", "nb", "g", "v", "bar", "y", "o", "l", "wb"], "i": ["ji", "hi", "q", "iti", "ci", "iso", "mi", "list", "li", "iq", "v", "ij", "ui", "ini", "ai", "us", "ix", "multi", "e", "bi", "f", "ik", "iy", "ei", "status", "pi", "cli", "zi", "chain", "id", "uri", "im", "l", "ami", "ki", "ii", "ri", "init", "fire", "di", "k", "wi", "info", "gi", "index", "ni", "si", "ti", "io", "ind", "to", "ip", "II", "PI", "ori", "qi", "phi", "xi", "me", "sim", "it", "ims", "u", "set", "I", "this", "ie", "internal", "p", "inner", "iter", "g", "ia", "ic", "iu", "is", "batch"], "c": ["h", "ct", "con", "cc", "e", "cat", "cache", "tc", "cr", "rc", "r", "z", "u", "cv", "ci", "ec", "bc", "cs", "cm", "cont", "com", "cd", "t", "cf", "cu", "ac", "p", "nc", "gc", "cons", "d", "v", "fc", "etc", "ic", "co", "dc", "ce", "lc", "unc", "o", "C", "l"], "j": ["jet", "oj", "h", "s", "ja", "br", "it", "ji", "jj", "bi", "jc", "ev", "str", "q", "jac", "r", "z", "uj", "bj", "ph", "k", "jump", "jit", "kh", "json", "ne", "je", "pt", "pr", "kj", "note", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", " J", "J", "dj", "jas", "fr", "js", "y", "o", "l", "job", "ge"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tfloat sum = 0;\\n\t\tfor(int i=1; i<=N; i++) {\\n\t\t\tsum+=1/(sc.nextFloat());\\n\t\t}\\n\t\tSystem.out.println(1/sum);\\n\t}\\n}\t\\n", "target": "120", "substitutes": {"sc": ["tch", "system", "cc", "tc", "cr", "ss", "rc", "pb", "capt", "cl", "sb", "bc", "cs", "esc", "sync", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "nc", "c", "sh", "sub", "SC", "gc", "sw", "inc", "sv", "nl", "scan", "lc", "sp", "asc", "sch", "anc", "usc", "sq"], "N": ["NH", "Node", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NL", "NS", "I", "GN", "D", "NO", "NP", "NC", "NB", "L", "ND", "V", "TN", "NM", "NG", "Net", "NT", "NA", "T", "K", "FN", "Sn", "n", "No", "M", "R"], "sum": ["cost", "sam", "out", "um", "tu", "norm", "system", "sim", "sa", "square", "ss", "number", "temp", "min", "good", "diff", "black", "so", "ne", "med", "sign", "result", "zero", "vol", "acc", "si", "match", "su", "score", "count", "cum", "summary", "other", "cal", "scale", "add", "total", "hash", "num", "weight", "average", "Sum", "hist", "na", "mean", "alph", "max", "size", "fac", "sup", "sat", "sample"], "i": ["ii", "phi", "m", "gu", "xi", "j", "multi", "sim", "init", "bi", "it", "hi", "q", "in", "z", "span", "ci", "di", "I", "mi", "ie", "gi", "li", "ei", "si", "pi", "iter", "ti", "v", "io", "ui", "ms", "ini", "ai", "ic", "us", "chain", "ish", "iu", "n", "ix", "ind", "id", "ip", "y", "o", "x", "im", "qi", "ki"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n    public static String Y = \"Yes\";\\n    public static String N = \"No\";\\n    public static long MOD = (long) (Math.pow(10, 9) + 7);\\n    public static Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n\\n        int n = ni();\\n        int[] ar = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            ar[i] = ni();\\n        }\\n        Arrays.sort(ar);\\n        int sum = 0;\\n        int sum1 = 0;\\n        for (int i = n - 1; i >= 0; i -= 2) {\\n            sum += ar[i];\\n        }\\n        for (int i = n - 2; i >= 0; i -= 2) {\\n            sum1 += ar[i];\\n        }\\n        int ans = sum - sum1;\\n\\n        out(ans);\\n    }\\n\\n    /*\\n     * \u4ee5\u4e0b\u30e1\u30bd\u30c3\u30c9\u96c6\\n     */\\n\\n    public static void permutation(String q, String ans) {\\n\\n        // Base Case\\n        if (q.length() <= 1) {\\n            System.out.println(ans + q);\\n        }\\n        // General Case\\n        else {\\n            for (int i = 0; i < q.length(); i++) {\\n                permutation(q.substring(0, i) + q.substring(i + 1), ans + q.charAt(i));\\n            }\\n        }\\n    }\\n\\n    static char[][] same(char[][] c, int h, int w) {\\n\\n        char[][] a = new char[h][w];\\n        for (int i = 0; i < h; i++) {\\n            for (int j = 0; j < w; j++) {\\n                a[i][j] = c[i][j];\\n            }\\n        }\\n        return a;\\n\\n    }\\n\\n    static int countkuro(char[][] c) {\\n\\n        int count = 0;\\n        for (char[] cc : c) {\\n            for (char ccc : cc) {\\n                if ('#' == ccc) {\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n\\n    static void debug() {\\n\\n        out(\"---\");\\n    }\\n\\n    static void debug(Object a) {\\n\\n        out(\"-------\");\\n        out(a);\\n        out(\"-------\");\\n    }\\n\\n    static int ketasuu(int n) {\\n\\n        String str = \"\" + n;\\n        return str.length();\\n    }\\n\\n    static int account(String str) {\\n\\n        String target = \"AC\";\\n        int count = 0;\\n        int len = str.length();\\n        for (int i = 0; i < len - 1; i++) {\\n            if (target.equals(str.substring(i, i + target.length()))) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    static int ni() {\\n\\n        return sc.nextInt();\\n    }\\n\\n    static long nl() {\\n\\n        return sc.nextLong();\\n    }\\n\\n    static double nd() {\\n\\n        return sc.nextDouble();\\n    }\\n\\n    static String n() {\\n\\n        return sc.next();\\n    }\\n\\n    static char[] nc() {\\n\\n        return sc.next().toCharArray();\\n    }\\n\\n    static int kaijo(int n) {\\n\\n        if (n == 0 || n == 1) {\\n            return 1;\\n        } else {\\n            return n * kaijo(n - 1);\\n        }\\n    }\\n\\n    static int fib(int n) {\\n\\n        return (n == 1 || n == 0) ? n : fib(n - 2) + fib(n - 1);\\n    }\\n\\n    static long lcm(long m, long n) {\\n\\n        return m * n / gcd(m, n);\\n    }\\n\\n    static int lcm(int m, int n) {\\n\\n        return m * n / gcd(m, n);\\n    }\\n\\n    static long gcd(long a, long b) {\\n\\n        return (b == 0) ? a : gcd(b, a % b);\\n    }\\n\\n    static int gcd(int a, int b) {\\n\\n        return (b == 0) ? a : gcd(b, a % b);\\n    }\\n\\n    static void out(Object obj) {\\n\\n        System.out.println(obj);\\n    }\\n\\n    static void outn(Object obj) {\\n\\n        System.out.print(obj);\\n    }\\n\\n    static double max(double d, double e) {\\n\\n        return Math.max(d, e);\\n    }\\n\\n    static long max(long a, long b) {\\n\\n        return Math.max(a, b);\\n    }\\n\\n    static long min(long d, long e) {\\n\\n        return Math.min(d, e);\\n    }\\n\\n    static int min(int a, int b) {\\n\\n        return Math.min(a, b);\\n    }\\n}\\n\\n\\nclass XY {\\n\\n    int h;\\n    int c;\\n\\n    XY(int h, int c) {\\n        this.h = h;\\n        this.c = c;\\n    }\\n}\\n", "target": "132", "substitutes": {"Y": ["B", "GY", "E", "P", "S", "G", "AN", "I", "A", "YN", "SY", "MY", "V", "XX", "YY", "YS", "H", "TY", "T", "J", "Q", "YES", "M", "y", "C", "Z", "X", "O"], "N": ["B", "E", "P", "NN", "NI", "Ni", "S", "NR", "SN", "NL", "AN", "NS", "I", "NO", "IN", "NB", "L", "V", "MN", "CN", "NA", "T", "J", "Sn", "Q", "M", "C", "O"], "MOD": [" tmp", " mu", "NI", " Xi", " po", " JD", " mod", " Wi", " xx", " Z", " gamma", " comb", " ne", "prime", " CN", "mu", " wi", " alpha", " mid", "nb", " U", " MU", " MI", " JA", " MAG", " pi", "M", " foo", " hi", " spin"], "sc": ["ng", "sk", "sa", "ss", "cl", "sb", "cs", "Sc", "ch", "sys", "nc", "si", "c", "sh", "mp", "SC", "gc", "sw", "st", "sv", "sy", "sem", "scan", "sn", "sp", "ser", "sch", "syn"], "n": ["ng", "out", "m", "ct", "j", "nan", "nn", "ren", "number", "net", "fn", "r", "ln", "nia", "t", "k", "ne", "mn", "network", "ll", "on", "ni", "nm", "en", "p", "np", "nc", "c", "ot", "len", "nor", "nb", "d", "v", "nu", "no", "names", "all", "num", "ns", "un", "nl", "sn", "nw", "na", "non", "y", "o", "x", "dn", "cn", "l", "nt"], "ar": ["nar", "aro", "rs", "lar", "inter", "s", "ear", "kar", "par", "cr", "rar", "r", "arr", "ary", "ara", "au", "ard", "tar", "star", "art", "ur", "ari", "dar", "ag", "er", "p", "c", "var", "array", "arc", "v", "ars", "mar", "are", "Ar", "adr", "arm", "or", "war", "ra", "har", "AR", "al", "l", "ir", "car", "arp", "air"], "i": ["ii", "phi", "me", "xi", "j", "sim", "multi", "fi", "ri", "init", "bi", "it", "f", "ji", "hi", "ims", "by", "u", "ci", "iii", "di", "I", "mi", "ie", "info", "gi", "client", "li", "ei", "si", "point", "ami", "status", "pi", "iter", "iq", "ti", "g", "io", "my", "cli", "ij", "zi", "ui", "isi", "ini", "ai", "ic", "us", "\u0438", "chain", "used", "ish", "iu", "base", "ind", "ix", "id", "ip", "y", "cgi", "o", "uri", "esi", "asi", "im", "oi", "ori", "batch", "mac", "qi", "ki"], "sum": ["sam", "oss", "out", "um", "sim", "sa", "ul", "mass", "av", "ass", " sums", "set", "cos", "se", "med", "ums", "share", "index", "sys", "ma", "vol", "si", "su", "count", "cum", "summary", "gc", "comment", "cal", "scale", "add", "mem", "total", "hash", "num", "us", "un", "average", "alpha", "Sum", "na", "stats", "mean", "max", "size", "sat"], "sum1": [" sum001", "average81", "sort0", " sum0", "meanOne", "sum2", "sys1", "sumOne", "sum001", "mem100", "sort100", "average1", "mean0", " sum100", "mean2", "sum0", "sum61", "average2", "Sum2", "mem1", " sumOne", "sum81", "average001", "sort1", "Sum1", "sort61", "sys2", " sum81", "mem61", "Sum0", " sum2", "SumOne", "sys81", "sum100", " sum61", "mean1", "sys001", "mem0"], "ans": ["uns", "rs", "vs", "s", "nan", "ats", "ies", "xs", "ann", "vals", " sums", "ens", " means", "aus", "cs", "outs", "acs", "os", "cus", "ums", "qs", "gs", "ks", "ins", "an", "ys", "ars", "names", "ms", "ents", "ns", "us", "ids", "ants", "ons", "ds", "na", "ps", "ls", "ANS", "ints", "ts", "amps", "es"], "q": ["eq", "qq", "msg", "cat", " cat", "z", "ql", "qt", "qu", "ou", "ues", "Query", "dq", " query", "qv", "qs", " sq", "query", "ue", "iq", "ys", "g", " Q", "ms", "Q", "qi", "sq", "quant"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        int x = Integer.parseInt(sc.next());\\n        int primeNum;\\n        while (true) {\\n            if (isPrimeNumber(x)) {\\n                primeNum = x;\\n                break;\\n            }\\n            x++;\\n        }\\n        out.println(primeNum);\\n        \\n        out.flush();\\n    }\\n  \\n    static boolean isPrimeNumber(int target) {\\n        int sqrt = (int)Math.sqrt(target);\\n        boolean result = true;\\n        for (int i = 2; i <= sqrt; i++) {\\n            if (target % i == 0) {\\n                result = false;\\n                break;\\n            }\\n        }\\n        return result;\\n    }\\n  \\n}", "target": "183", "substitutes": {"sc": ["tch", "cc", "cle", "cr", "capt", "rc", "cl", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "isc", "pc", "ch", "osc", "sys", "sub", "scl", "nc", "c", "sci", "SC", "gc", "sw", "sv", "screen", "nl", "scan", "sp", "ser", "asc", "conv", "sch", "sec", "anc", "syn", "sq"], "out": ["msg", "con", "s", "aos", "it", "error", "net", "put", "in", "r", "OUT", "file", "ln", "t", "at", "ou", "outs", "exit", "news", "os", "info", "outer", "ch", "buffer", "conn", "sys", "client", "Out", "log", "list", "en", "p", "c", "print", "crit", "ex", "write", "w", "res", "st", "end", "io", "output", "v", "screen", "n", "to", "flush", "conv", "o", "writer", "sum", "err", "rt", "nt"], "x": ["xi", "rx", "inter", "xp", "xe", "xs", "dx", "ox", "z", "u", "zx", " xx", "mx", "t", "xd", "tx", "ext", "ux", "index", "xy", "ax", "p", "ex", "lex", "ctx", "v", "xf", "xx", "n", "xt", "ix", "xc", "inx", "y", "expr", "px", "hex", "max", "fx", "key", "l", "X", "wx"], "primeNum": ["supUn", "primaryNet", "primeSum", "proxynum", " primeSum", "supnum", "Primenum", "primaryNumber", "primarySum", "supNum", "profileNumber", "profilenum", "primenum", "PrimeSum", "primeVal", " primenum", "PrimeNumber", "primeNumber", "primeUn", "supVal", "PrimeNet", "primeNet", "PrimeNum", "proxyUn", " primeNet", "PrimeVal", "profileVal", "proxyNum", " primeUn", "primaryNum", " primeVal", "profileNum", " primeNumber", "proxyVal"], "target": ["range", "term", "h", "string", "inter", "expected", "value", "square", "number", "top", "arget", "dest", "goal", "window", "t", "set", "rel", "tx", "Target", "this", "internal", "height", "prime", "counter", "bolt", "ARGET", "match", "np", "transform", "ptr", "subject", "scale", "v", "normal", "total", "weight", "type", "percent", "length", "integer", "base", "vector", "to", "y", "nil", "max", "size", "source", "arg", "gt", "nt"], "sqrt": [" sqRT", "squrd", "squRT", "squarert", "sqr", "sqnt", "qRT", "squnt", "sqro", "qrt", "sqRT", "squarer", "qrd", "squarero", " sqrd", "qnt", " sqro", "qr", " sqnt", "squro", "squareRT", "squrt", " sqr", "sqrd", "squr"], "i": ["ii", "phi", "m", "xi", "multi", "j", "sim", "fi", "sequence", "bi", "it", "init", "hi", "u", "span", "ci", "t", "di", "I", "mi", "gi", "ni", "uli", "li", "ei", "si", "pi", "iq", "iter", "ti", "g", "d", "v", "io", "cli", "zi", "ui", "ini", "ic", "ai", "\u0438", "iu", "ix", "id", "y", "o", "is", "im", "qi", "ki"], "result": ["successful", "stay", "term", "ful", "reason", "feature", "region", "true", "profile", "test", "sequence", "command", "cache", "flag", "success", "value", "bool", "real", "event", "goal", "continue", "mate", "complete", "diff", "relation", "zero", "Result", "date", "report", "match", "correct", "status", "request", "res", "other", "output", "know", "results", "process", "power", "panic", "integer", "condition", "valid", "ret", "description", "false", "present"]}}
{"code": "import java.util.Scanner;\\n    \\n    public class Main {\\n    \tpublic static void main(String[] args){\\n    \t\tScanner sc = new Scanner(System.in);\\n    \t\t// \u6574\u6570\u306e\u5165\u529b\\n    \t\tint a = sc.nextInt();\\n    \t\tint b = sc.nextInt();\\n    \t\tdouble c = sc.nextDouble();\\n    \t\tdouble d = sc.nextDouble();\\n    \t\tdouble kaku = 0;\\n    \t\tdouble answer = 0;\\n    \t\t\\n    \t\t\\n    \t\tc=30*c+0.5*d;\\n    \t\td=6*d;\\n    \t\tif(c>d) {\\n    \t\t\tkaku=c-d;\\n    \t\t}else {\\n    \t\t\tkaku=d-c;\\n    \t\t}\\n    \t\tkaku=Math.cos(Math.toRadians(kaku));\\n    \t\t\\n    \t\tanswer=a*a+b*b-2*a*b*kaku;\\n    \t\tSystem.out.println(Math.sqrt(answer));\\n    \t\t\\n    \t}\\n    }", "target": "86", "substitutes": {"sc": [" Sc", " ss", "system", "sk", "sa", "cr", "rc", "bc", "cs", "Sc", "ch", "pc", "sys", " SC", " scr", "c", "nc", "SC", "sw", "gc", "src", "sv", " sk", "dc", "scan", " sp", "sp", "sq"]}}
{"code": "/*\\nRoses are red\\nMemes are neat\\nAll my test cases time out\\nLmao yeet\\n*/\\nimport java.util.*;\\nimport java.io.*;\\n\\n   public class Main\\n   {\\n      public static void main(String args[]) throws Exception\\n      {\\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \\n         StringTokenizer st = new StringTokenizer(infile.readLine());\\n         int N = Integer.parseInt(st.nextToken());\\n         int[] arr = new int[N+1];\\n         st = new StringTokenizer(infile.readLine());\\n         for(int i=0; i <= N; i++)\\n            arr[i] = Integer.parseInt(st.nextToken());\\n         int[] brr = new int[N];\\n         st = new StringTokenizer(infile.readLine());\\n         for(int i=0; i < N; i++)\\n            brr[i] = Integer.parseInt(st.nextToken());\\n         long res = 0L;\\n         for(int i=0; i < N; i++)\\n         {\\n            int pow = brr[i];\\n            if(pow <= arr[i])\\n            {\\n               res += pow;\\n               arr[i] -= pow;\\n               brr[i] = 0;\\n            }\\n            else\\n            {\\n               res += arr[i];\\n               pow -= arr[i];\\n               arr[i] = 0;\\n               if(arr[i+1] >= pow)\\n               {\\n                  res += pow;\\n                  arr[i+1] -= pow;\\n               }\\n               else\\n               {\\n                  res += arr[i+1];\\n                  arr[i+1] = 0;\\n               }\\n            }\\n         }\\n         System.out.println(res);\\n      }\\n   }", "target": "159", "substitutes": {"infile": ["outfile", "inf", "inntime", "iniference", "iniline", "innimage", "reportFile", "inference", "innfile", " inFile", "infilename", " infiles", " inreport", "inputtime", "reportfile", "cinfilename", "infiles", "inireport", "inputline", "inifile", "reportf", "cinfiles", "outimage", "innline", " inline", "outf", "inreport", "inputfile", " inimage", "iniimage", "inFile", "outFile", "inimage", "cinline", "intime", "inline", "inputimage", "inifiles", "cinfile", "cinreport", "innfilename", "innference", "inifilename", " inf", "reportimage", "cinference", "initime"], "st": ["ost", "sta", "ct", "irst", "tra", "it", "str", "cr", "ft", "ss", "must", "dr", "cl", "nd", "inst", "sm", "t", "ast", "set", "ld", "th", "sty", "se", "stack", "ST", "pt", "std", "start", "sc", "est", "ist", "sh", "stri", "sw", "St", "mt", "ust", "sv", "sl", " St", "const", "ess", "nl", "sy", "bt", "et", "sts", "sn", "sp", "fr", "rest", "ts", "tt", "stat", "ste", "rt", "stable", "ut", "nt"], "N": ["NH", "Node", "P", "NN", "Ns", "NI", "Ni", "Note", "Num", "S", "NR", "SN", "G", "NL", "Def", "AN", "NS", "I", "GN", "D", "O", "NO", "NP", "NC", "NB", "L", "ND", "V", "TN", "Name", "Size", "NM", "Net", "NT", "NA", "Y", "T", "NOTE", "K", "J", "FN", "Sn", "Q", "NE", "n", "Len", "No", "M", "R", "Length", "C", "Z", "Mon"], "arr": ["arb", "br", "ev", "bl", "addr", "rep", "r", "dr", "vals", "coll", "att", "ab", "attr", "pr", "cur", "list", "obj", "db", "iq", "ar", "urg", "atts", "ix", "expr", "par", "resp", "pl", "Ar", "ARR", "gr", "dat", "n", "tr", "func", "aaa", "seq", "dict", "buf", "row", "rel", "our", "exp", "gb", "ll", "vol", "conf", "ptr", "var", "aug", "array", "aj", "hist", "val", "ray", "alph", "frac", "nt", "adj", "msg", "img", "str", "cache", "av", "abs", "inst", "au", "agg", "ext", "emb", "enc", "app", "iter", "mb", "batch", "Array", "map", "fr", "elt", "err", "stock"], "i": ["ji", "hi", "q", "iti", "ci", "mi", "list", "li", "iq", "v", "ij", "ui", "ini", "ai", "us", "ix", "ion", "m", "multi", "e", "bi", "f", "ik", "iy", "ei", "c", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "fi", "init", "di", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "to", "ip", "o", "PI", "qi", "phi", "gu", "me", "xi", "j", "sim", "it", "ims", "u", "set", "I", "this", "ie", "point", "g", "ia", "ic", "iu", "ios", "base", "is", "oi", "batch"], "brr": ["barsr", "brd", " brR", " brd", " brrt", "brrb", "crcr", "brrd", "barrb", "Brr", "brp", " brrd", "hrrt", "barrt", "hrrd", "brert", "brn", "relc", " brn", "crrb", "brer", "brcr", "rdd", "brrt", "crrt", "rdr", "brw", "barR", "Brrd", "rdR", "bard", "relrt", " brp", "hrn", "brR", " brw", " brsr", "crr", " brc", "hrp", "relr", "brc", "barcr", "brecr", "hrw", "Brp", "brsr", "hrr", "brerb", "reln", "rdsr", "Brw", "barr", "hrc"], "res": ["rex", "respons", "rs", "out", "soft", "con", "sol", "resolution", "resp", "r", "vals", "we", "re", "des", "vec", "cs", "rel", "resource", "rss", "rand", "exp", "req", "stock", "rev", "result", "zero", "conn", "reg", "vol", "obj", "clus", "pas", "cons", "mem", "RES", "raw", "results", "ms", "us", "gr", "ons", "yes", "err", "Res", "cond", "ps", "js", "fr", "rest", "pres", "expr", "ret", "reset", "sum", "red", "ress", "rem", "frac", "resh"], "pow": ["vow", " ppower", "mowe", "voy", " Pows", "ponent", " poy", " pox", "cpow", "paow", "plonent", "cpowe", " pows", "pump", "ppow", "cpox", "wpow", "plower", " pump", "pows", "pcow", "powe", "peonent", "moy", "vower", "cppower", "ppox", " poxy", "paoxy", "ppower", " pod", "peoy", "pox", "ploy", "ppoy", "paoy", " ponent", "mow", "mod", "peow", "poch", "cpower", " powe", "pod", "poy", "cpod", "paent", "pent", "Pow", "ppows", "paower", "cpump", " Pow", "ppent", " power", "power", "paump", "Pcow", " Powe", "poxy", "Powe", "cpoy", "wpoch", "voxy", "wpcow", "Poch", " pent", "papower", "peower", "wpowe", " poch", " Poy", "ppowe", " pcow", "plow"]}}
{"code": "import java.io.*;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) throws IOException {\\n       Scanner in = new Scanner(System.in);\\n       double r = in.nextDouble();\\n       System.out.printf(\"%f %f\\n\", Math.PI * r * r,\\n\t\t       \t\t    2 * Math.PI * r);\\n    }\\n}", "target": "239", "substitutes": {"in": ["serv", "out", "inf", "In", "check", "h", "con", "isin", "i", "doc", "f", "asin", " din", "file", "user", "rin", "reader", "read", "IN", "info", "std", "from", "client", "gin", "null", "en", "c", "ins", "inner", "conf", "inc", "inn", "sin", "cin", "d", "ssl", "io", "add", "input", "world", "all", "bin", "ini", "thin", "stream", "n", "err", "ind", "readable", "din", "is", "l"], "r": ["rd", "rs", "rate", "b", "h", "m", "term", "s", "br", "i", "f", "cr", "rc", "q", "z", "dr", "u", "right", "re", "pair", "t", "nr", "k", "ur", "attr", "result", "rr", "pr", "p", "c", "rb", "radius", "sr", "res", "d", "v", "rank", "w", "mt", "g", "ar", "rt", "rf", "n", "err", "fr", "R", "l", "mr"]}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tstatic Scanner scanner;\\n\\n\tpublic static void main(String[] args) {\\n\t    scanner = new Scanner(System.in);\\n\\n        int N=gi();\\n        int X=gi();\\n        int M=0;\\n\\n        int min=Integer.MAX_VALUE;\\n \\n        for (int i=0; i<N;i++) {\\n            int m=gi();\\n            M+=m;\\n            if(m<min) {\\n            \tmin=m;;\\n            }\\n        }\\n        \\n        int k=N;\\n        X=X-M;\\n        \\n        while(X>=min) {\\n        \tX-=min;\\n        \tk++;\\n        }\\n\\n\\n\t    System.out.println(k);\\n\\n//\t    if (isNumber(s1) && isNumber(s2) && s.charAt(a) == '-') {\\n//\t    \tSystem.out.print(\"Yes\");\\n//\t    }else {\\n//\t    \tSystem.out.print(\"No\");\\n//\t    }\\n\\n\\n\\n\t}\\n\\n\tpublic static long d(long n) {\\n\t\tString a=String.valueOf(n);\\n\t\treturn (long)a.length();\\n\t}\\n\\n\t// \u6587\u5b57\u5217\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static String gs() {\\n\t\treturn scanner.next();\\n\t}\\n\\n\t// int\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static int gi() {\\n\t\treturn Integer.parseInt(scanner.next());\\n\t}\\n\\n\t// long\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static long gl() {\\n\t\treturn Long.parseLong(scanner.next());\\n\t}\\n\\n\t// double\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static double gd() {\\n\t\treturn Double.parseDouble(scanner.next());\\n\t}\\n}", "target": "3", "substitutes": {"scanner": ["canter", "scheter", " scaner", "Scanner", "Scanr", " Scanr", " scanener", "canener", "scanger", " scanger", "Scaner", "scheger", " Scaner", "canner", "scanener", "scanter", "scaner", " Scanter", "canger", "schener", " Scanner", " scanter", "scanr", "scheener", " scanr", "Scanter"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "NS", "I", "D", "GN", "NP", "NC", "NB", "L", "V", "TN", "NM", "MN", "H", "NT", "NA", "Y", "T", "K", "J", "Q", "NE", "n", "R", "C", "Z"], "X": ["AC", "Xi", "E", "IX", "P", "F", "XL", "ZX", "MX", "ML", "S", "G", "TX", "ANY", "I", "D", "W", "L", "EXP", "V", "XX", "H", "XT", "Ex", "DX", "JSON", "XP", "Tx", "Y", "T", "K", "IM", "J", "Q", "EX", "XY", "AX", "XM", "R", "U", "UX", "max", "x", "C", "Z", "OX", "VALUE", "INT"], "M": ["B", "SM", "E", "P", "F", "TM", "MX", "MM", "CM", "S", "MF", "G", "Min", "I", "D", "L", "MP", "MA", "V", "H", "MD", "AM", "MC", "Y", "T", "K", "J", "MT", "MS", "U", "MI", "R", "JM", "C"], "min": ["sam", "me", "lower", "sol", "mask", "minimum", " MIN", "MAX", "init", "s", "none", "mins", "temp", "Min", "MIN", "only", "cm", "sort", "lock", "diff", "mn", "start", "beta", "Minimum", "first", "ma", "p", "margin", "local", "mit", "v", "version", "small", "second", "mini", "n", "map", "lt", "minute", "mm", "mean", "rest", "Mini", "max", "just", "initial", "man", "tail", "amin", "sample", "mod"], "i": ["ii", "phi", "xi", "me", "j", "multi", "sim", "it", "bi", "hi", "z", "u", "ci", "di", "I", "mi", "ie", "index", "li", "p", "si", "print", "pi", "iter", "ti", "cli", "zi", "ui", "ini", "ai", "us", "iu", "n", "sp", "ind", "ix", "id", "ip", "y", "o", "is", "x", "im", "batch", "qi"], "m": ["mat", "b", "me", "um", "j", "vm", "f", "dm", "z", "mx", "cm", "sm", "mo", "t", "km", "mi", "mate", "perm", "md", "met", "ym", "ma", "mu", "module", "mc", "p", "pi", "gm", "d", "v", "mt", "ms", "arm", "tm", "n", "mm", "mac", "x", "lem", "im", "em", "l", "meta", "mr", "mod"], "k": ["mk", "unk", "j", "sk", "ke", "ko", "ik", "number", "q", "z", "kt", "km", "ok", "row", "t", "kind", "ak", "kick", "index", "ck", "kj", "kid", "p", "ks", "ka", "c", "w", "v", "K", "num", "kk", "kw", "ark", "scan", "n", "ind", "id", "work", "o", " K", "key", "x", "max", "ek", "ku"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner kb = new Scanner(System.in);\\n\t\tint n = kb.nextInt();\\n\t\tString k = \"YES\";\\n\t\tArrayList<Integer> a = new ArrayList<>();\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint j = kb.nextInt();\\n\t\t\ta.add(j);\\n\t\t}\\n\t\tCollections.sort(a);\\n\t\t//System.out.println(a.get(0));\\n\t\t//System.out.println(a.get(1));\\n\t\tfor (int i = 0; i < n - 1; i++) {\\n\t\t\t//System.out.println(i);\\n\t\t\t//System.out.println(a.get(i).equals(a.get(i + 1)));\\n\t\t\tif (a.get(i).equals(a.get(i + 1))) {\\n\t\t\t\tk = \"NO\";\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(k);\\n\t\tkb.close();\\n\t}\\n}\\n", "target": "44", "substitutes": {"kb": ["mk", "dk", "lf", "pb", "wid", "cmd", "bf", "kt", "kr", "bj", "KB", "km", "shell", "hd", "kh", "cb", "ab", "gb", "ib", "alg", "ief", "ck", "kj", "kel", "kid", "vd", "hz", "ks", "kl", "ka", "bd", "usb", "rb", "nb", "bp", "mb", "kB", "hn", "pd", "wd", "ky", "nl", "kw", "bt", "bh", "kg"], "n": ["ng", "m", "norm", "nan", "Ni", "nn", "net", "number", "ln", "nd", "t", "ne", "mn", "network", "ni", "nm", "en", "np", "gn", "nc", "nor", "N", "nb", "d", "nu", " N", "num", "ns", "nl", "l", "nw", "sn", "na", "cn", "nr", "nt"], "k": ["mk", "m", "b", "sk", "ik", "q", "kn", "r", "z", "km", "t", "kind", "uk", "kj", "p", "ks", "ka", "g", "v", "K", " sk", "kk", "kan", "kw", " K", "key", "ek"], "a": ["aaa", "act", "b", "la", "apa", "oa", "s", "aos", "bo", "sa", "e", "expected", "eas", "aw", "am", "ed", "wa", "A", "area", "ab", "ca", "qa", "up", "ma", "ac", "p", "ao", "c", "ta", "an", "data", "w", "aa", "ava", "ata", "ga", "all", "as", "aux", "pa", "na", "y", "o", "ova", "ae"], "i": ["ii", "phi", "m", "gu", "xi", "me", "multi", "sim", "init", "bi", "it", "hi", "q", "ims", "in", "ci", "di", "I", "mi", "ie", "gi", "li", "si", "print", "pi", "iq", "ti", "iter", "my", "zi", "ui", "ini", "ai", "\u0438", "us", "iu", "ind", "ix", "id", "MI", "ip", "is", "PI", "x", "im", "qi"], "j": ["ja", "br", "it", "ji", "jj", "bi", "jc", "q", "z", "uj", "ph", "di", "jump", "jit", "gov", "json", "pr", "gi", "ju", "kj", "li", "kid", "si", "jl", "obj", "g", "aj", "jp", "ij", "dj", "J", "ind", "js", "y", "key", "ion"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main {\\n    public static void main(String[] args) throws IOException{\\n    \t// Solution sol = new Solution();\\n    \tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    \tStringTokenizer st = new StringTokenizer(br.readLine());\\n    \tint N = Integer.parseInt(st.nextToken());\\n    \tdouble k = (double)N/3;\\n    \tSystem.out.println(Math.pow(k,3));\\n\\n    }\\n}", "target": "53", "substitutes": {}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        FastReader in = new FastReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BGoldenCoins solver = new BGoldenCoins();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BGoldenCoins {\\n        public void solve(int testNumber, FastReader s, PrintWriter out) {\\n            long x = s.nextLong();\\n            long ans = 0;\\n            ans += (1000 * (x / 500));\\n            x %= 500;\\n            ans += 5 * (x / 5);\\n            out.println(ans);\\n        }\\n\\n    }\\n\\n    static class FastReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private FastReader.SpaceCharFilter filter;\\n\\n        public FastReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public long nextLong() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            long res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "180", "substitutes": {"inputStream": ["inputReader", "imageFile", "inputSource", "InputSteam", "inputFile", "inSource", "InputReader", "InputSource", "imageForm", " inputForm", "inReader", "InputStream", "inputForm", "outputSteam", "inputSteam", " inputSteam", "outputFile", "imageSteam", "inStream", " inputFile", "outputReader", "outputForm", "outputSource", "imageStream", "inSteam"], "outputStream": ["clientStream", "clientStreamer", "connectionPoint", "connectionStream", "outputStreamer", "connectionForm", "outStream", " outputSteam", "outputSteam", "OutputSteam", "inputstream", "connectionSteam", "OutputPoint", "outSteam", "inputSteam", "outStreamer", "OutputStream", " outputForm", "clientstream", "outputForm", " outputPoint", "outputPoint", "outstream", "OutputForm", "outputstream", "inputStreamer", "clientSteam"], "in": ["rs", "current", "In", "m", "inf", "con", "isin", "sol", "h", "context", "i", "it", "str", "init", "run", "r", "file", "rin", "reader", "t", "IN", "this", "info", "up", "on", "from", "log", "gin", "null", "p", "ins", "inner", "inside", "inn", "get", "cin", "sin", "w", "io", "input", "bin", "ini", "ic", "us", "l", "ind", "din", "o", "is", "source", "err", "rt"], "out": ["b", "j", "aos", "it", " OUT", "net", "OUT", "user", " Out", "t", "at", "set", "pool", "ou", "outs", "os", "outer", "this", "exec", "up", "sys", "client", "Out", "log", "null", "p", "print", "ins", "inner", "ex", "write", "txt", "w", "gc", "end", "output", "io", "name", "v", "OU", "all", "screen", "or", "co", "n", "table", "to", "flush", "o", "writer", "sum", "err", "gt", "nt"], "solver": ["resolve", " solution", "resorter", "resistor", "sorter", "resolution", "insolver", "resolved", "insistor", "insolution", "solution", " sistor", "resolver", "solved", " solve", "insolved", " solved", "sistor", "solve", " sorter"], "testNumber": ["trialNumber", "trialNo", "TestNo", " testCounter", "trialCounter", " testNo", "TestCounter", " testNumbers", "trialNumbers", "testNo", "TestNumbers", "testCounter", "testNumbers", "TestNumber"], "s": ["serv", "rs", "b", "h", "its", "i", "xs", "fs", "ss", "S", "abs", "sb", "cs", "t", "os", "gs", "p", "ins", "sw", "ys", "ssl", "sv", "ws", "ns", "us", "as", "sts", "sf", "ds", "ps", "js", "ls", "ts", "is", "ses", "sq"], "x": ["xi", "rx", "xp", "xe", "i", "xs", "pan", "dx", "ox", "z", "hello", "mx", " xx", "xd", "xxx", "tx", "xml", "xes", "ux", "on", "xy", "ax", "xb", "xa", "ex", "an", "w", "lex", "v", "ms", "ai", "xxxx", "xf", "xx", "xt", "ix", "sex", "xc", "y", "hex", "px", "fx", "X", "wx"], "ans": ["vs", "rs", "can", "ats", "rans", "aos", "nan", "ies", "xs", "pan", "ann", " Ans", "cas", "ians", "lan", "ens", " means", "aus", "AN", "outs", "os", "works", "angs", "ams", "ags", "anes", "offs", "aps", "ks", "ins", "an", "ys", "cons", "ars", "ms", "ents", "as", "ns", "jas", "ants", "ids", "mas", "ons", "ates", "oos", "ps", "arts", "ls", "ANS", "amps", "es", "ads"], "stream": ["message", "console", "current", "h", "http", "system", "channel", "speed", "context", "clean", "cache", "service", "file", "Stream", "peer", "driver", "wrapper", "reader", "window", "pool", "thread", "row", "cont", "iterator", "parent", "socket", "read", "network", "stack", "instance", "ream", "engine", "pod", "buffer", "loop", "storage", "line", "pipe", "transform", "form", "inner", "sw", "data", "ssl", "port", "iter", "output", "path", "input", "down", "open", "chain", "util", "handle", "host", "zip", "each", "table", "view", "source", "through", "sample"], "buf": ["done", "bytes", "queue", "cap", "b", "msg", "img", "tmp", "seq", "br", "cat", "cmd", "uf", "ered", "arr", "fb", "cv", "vec", "Buff", "cb", "emb", "ux", "cur", "bag", "buffer", "pkg", "proc", "ref", "box", "db", "rb", "txt", "ctx", "buff", "mb", "mem", "bin", "bar", "tr", "bn", "conv", "alph", "Buffer", "batch", "tab", "wb"], "curChar": ["serByte", "CurCh", "ctrchar", " curByte", "ctrByte", "ctrChar", "currentChar", " curCh", "currentCor", "CurCor", "serCh", "curVar", "numChar", "currentCharacter", " curCharacter", "serChar", "CurByte", "Curchar", " curVar", "curCor", "CurCharacter", "rcCh", "curByte", "serCharacter", "numchar", "rcCor", "currentchar", "rcchar", "currentCh", "curchar", "curCharacter", "CurVar", "curCh", " curchar", "ctrVar", "numCharacter", "CurChar", "numCh", "rcChar"], "numChars": ["numCheats", "numCARS", "numchARS", "numChases", "numColases", "numThors", "numCars", "numchaps", "numColARS", "numStraps", "sumchases", "NumChats", "sumchars", "numChors", " numChats", "numThars", "Numchars", "numCharts", "numChaps", "numchases", "numCarts", "numCheors", "NumCharts", "numCHars", "monchars", "numThats", "numChearts", "numCharactersars", "monchARS", "monChases", "Numcharts", "NumChars", "numchars", "numCHARS", "numChats", "numStrars", "sumchARS", "NumChors", " numChases", "numCHats", "numCHaps", "numStrases", "numCharactersats", "numColars", "numChears", "sumChases", "monchaps", "monChaps", "numStrARS", "NumchARS", " numchats", "monChars", " numchars", " numchases", "numCharactersases", "numCHases", "monChARS", "numChARS", "monchases", "numcharts", "NumChARS", "numTharts", "sumChars", "numchats", "sumChARS"], "filter": ["check", "term", "policy", "channel", "file", "only", "handler", "function", "accept", "Filter", "buffer", "finder", "spec", "ref", "processor", "match", "filename", "name", "config", "block", " Filter", "map", "table", " filters", "fil", "conv", "source"], "c": ["b", "ct", "con", "cc", "e", "i", "f", "cache", "tc", "cr", "rc", "q", "r", "z", "cl", "u", "ci", "ec", "cs", "cm", "t", "cd", "cont", "com", "bc", "cos", "cb", "pc", "enc", "cf", "cur", "cu", "uc", "sc", "ac", "mc", "nc", "p", "conf", "gc", "cum", "fc", "g", "arc", "d", "v", "ar", "cod", "abc", "ic", "co", "chain", "dc", "ce", "lc", "cond", "xc", "cmp", "y", "conv", "unc", "C", "col", "l", "cp", "comp", "vc"], "sgn": ["console", "sig", "Sig", " snd", "gsnd", "Print", "gswin", "insnd", "gsgn", "sgen", "cont", "snd", "Sgen", "gsGN", "println", "gsgen", "sng", "insng", "Sgn", " sGN", "_", "swin", "insgn", "gsig", "Swin", "gsng", "New", " sng", "insGN", "sGN"], "res": ["respons", "rs", "resolution", "resp", "vals", "arr", "r", "re", "des", "vec", "cs", "rel", "pers", "os", "rss", "rand", "stock", "req", "rev", "result", "reg", "usr", "vol", " Res", "obj", "cons", "RES", "ms", "results", "ns", "gr", "div", "yes", "Res", "ps", "def", "js", "rest", "pres", "expr", "max", "ret", "reset", "red", "ress", "rem", "resh"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        try{\\n            int w = Integer.parseInt(reader.readLine());\\n            int n = Integer.parseInt(reader.readLine());\\n            int[] x = new int[w];\\n            for(int i = 0; i< w; i++){\\n                x[i] = i + 1;\\n            }\\n            int a ;\\n            int b ;\\n            for(int i = 0; i < n; i++){\\n                String line = reader.readLine();\\n                String[] s = line.split(\",\");\\n                a = Integer.parseInt(s[0]);\\n                b = Integer.parseInt(s[1]);\\n                int temp = x[a-1];\\n                x[a-1] = x[b-1];\\n                x[b-1] = temp;\\n            }\\n            for(int i = 0; i < w; i++){\\n                System.out.println(x[i]);\\n            }\\n        }catch(IOException e){\\n\\n        }\\n    }\\n}\\n", "target": "156", "substitutes": {"reader": ["bridge", "rd", "rot", "rs", "rx", "redo", "radio", "READ", "RW", "rc", "rar", "r", "rl", "dr", "driver", "row", "dd", "iterator", "handler", "read", "reading", "linger", "cur", "buffer", "client", "er", "ner", "entry", "reads", "ro", "parser", "inner", "iter", "loader", "ipper", "Reader", "runner", "stream", "length", "readable", "builder", "roll", "ocker", "writer", "upper", "field", "rr"], "w": ["m", "h", "e", "q", "aw", "r", "z", "wal", "wa", "rw", "window", "t", "k", "wt", "wh", "ew", "W", "width", "wed", "hw", "wl", "p", "ow", "ex", "sw", "d", "v", "iw", "wn", "wb", "ws", "wd", "length", "kw", "nw", "wp", "wind", "y", "wr", "l", "wx", "win", "we"], "n": ["m", "h", "j", "nan", "nn", "net", "fn", "r", "z", "ln", "t", "k", "ne", "ni", "nm", "en", "p", "c", "nor", "nc", "np", "N", "nb", "d", "v", "nu", "no", "ns", "un", "nl", "nw", "sn", "na", "y", "o", "l", "nt"], "x": ["m", "check", "xi", "rx", "ct", "xp", "xe", "e", "xs", "ox", "z", "wait", "mx", "t", "history", "xd", "xxx", "tx", "exp", "xml", "xes", "ux", "index", "xy", "php", "list", "p", "c", "xa", "ex", "data", "lex", "ctx", "v", "xxxx", "xf", "xx", "xt", "ix", "xc", "y", "hex", "o", "px", "expr", "fx", "l", "X", "wx"], "i": ["ji", "hi", "q", "in", "ci", "mi", "li", "iq", "ij", "ui", "ini", "ai", "ix", "ion", "m", "multi", "ies", "bi", "iy", "ei", "print", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "ri", "fi", "init", "yi", "di", "wi", "info", "gi", "index", "ni", "si", "ti", "io", "ind", "ip", "cgi", "o", "qi", "phi", "xi", "me", "j", "sim", "it", "ims", "u", "span", "I", "this", "ie", "you", "client", "p", "point", "inner", "g", "ic", "iu", "is", "oi", "err"], "a": ["aaa", "act", "la", "apa", "oa", "sa", "da", "am", "z", "u", "wa", "t", "at", "A", "au", "this", "ab", "ca", "ma", "p", "ac", "ao", "ba", "ea", "xa", "ta", "an", "aa", "ia", "v", "ar", "aj", "ata", "ga", "eta", "ai", "as", "alpha", "pa", "na", "va", "o", "l", "ae", "fa"], "b": ["B", "m", "eb", "ob", "j", "binary", "bo", "br", "e", "bi", "f", "r", "z", "be", "u", "fb", "sb", "bs", "bc", "t", "k", "ab", "ib", "cb", "bis", "lb", "beta", "bb", "bd", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "bp", "bot", "bar", "y", "o", "l", "wb"], "line": ["string", "page", "lin", "e", "str", "liner", "link", "ln", "stroke", "shell", "pair", "row", "detail", "frame", "lock", "se", "slice", "pixel", "list", "point", "le", "data", "lines", "comment", "ine", "name", "eline", "block", "sl", "chain", "nl", "cell", "rule", "lc", "inline", "phrase", "Line", "piece", "ls", "LINE", "ste", "l"], "s": ["rs", "vs", "ples", "its", "ats", "les", "fs", "ss", "details", "S", "gets", "bs", "cs", "t", "set", "els", "series", "se", "bis", "qs", "ashes", "gs", "ins", "sql", "strings", "sv", "ms", "ws", "ns", "sl", "sts", "sp", "tes", "ps", "stats", "ds", "services", "js", "ts", "ls", "ses", "is", "l", "sq"], "temp": ["Temp", "tem", "current", " tmp", "porary", "tmp", "j", "perature", "test", "tc", "tim", "fake", "pool", "t", "set", "emp", "pt", "buffer", "pre", "cu", "index", "variable", "p", "stop", "status", "template", "mp", "cum", "txt", "v", "deg", "cell", "tm", "base", "tr", "fac", "mm", "em", "red", "Temperature", "mod"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\t// \u672b\u5c3e\u306b\u8ffd\u52a0\u53ef\u80fd\u306a\u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3057\u305f\u6587\u5b57\u5217\\n\tprivate static final String REVERSE_DREAM = new StringBuilder(\"dream\").reverse().toString();\\n\tprivate static final String REVERSE_DREAMER = new StringBuilder(\"dreamer\").reverse().toString();\\n\tprivate static final String REVERSE_ERASE = new StringBuilder(\"erase\").reverse().toString();\\n\tprivate static final String REVERSE_ERASER = new StringBuilder(\"eraser\").reverse().toString();\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\t// \u51e6\u7406\u5bfe\u8c61\u6587\u5b57\u5217\u306e\u5165\u529b\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\t// \u6700\u5f8c\u5c3e\u304b\u3089\u8ffd\u52a0\u53ef\u80fd\u306a\u6587\u5b57\u5217\u3092\u691c\u7d22\u3059\u308b\u305f\u3081\u3001\u51e6\u7406\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3055\u305b\u308b\\n\t\tStringBuilder targetString = new StringBuilder(sc.next()).reverse();\\n\t\tsc.close();\\n\\n\t\tint bak = 0;\\n\t\t// \u51e6\u7406\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u306e\u6700\u5f8c\u5c3e\u304b\u3089\u3001\u8ffd\u52a0\u53ef\u80fd\u3067\u3042\u308b\u6587\u5b57\u5217\u3092\u53ef\u80fd\u306a\u9650\u308a\u524a\u9664\u3059\u308b\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\\n\t\t// \u203b\u52b9\u7387\u5316\u306e\u305f\u3081\u6587\u5b57\u5217\u306f\u53cd\u8ee2\u3057\u3066\u51e6\u7406\\n\t\twhile(bak != targetString.length()) {\\n\t\t\tbak = targetString.length();\\n\t\t\ttargetString = checkTopString(targetString);\\n\t\t}\\n\\n\t\t// \u51fa\u529b\\n\t\tif(targetString.length() == 0) {\\n\t\t\tSystem.out.println(\"YES\");\\n\t\t}else{\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\\n\t}\\n\\n\t// \u51e6\u7406\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u306e\u6700\u5f8c\u5c3e\u306b\u8ffd\u52a0\u53ef\u80fd\u306a\u6587\u5b57\u5217\u304c\u3042\u308b\u306a\u3089\u524a\u9664\u3059\u308b\u95a2\u6570(\u52b9\u7387\u5316\u306e\u305f\u3081\u51e6\u7406\u306f\u53cd\u8ee2\u3057\u3066\u884c\u3046)\\n\tstatic StringBuilder checkTopString(StringBuilder targetString){\\n\t\tif(targetString.indexOf(REVERSE_DREAM) == 0){\\n\t\t\treturn targetString.delete(0,REVERSE_DREAM.length());\\n\t\t}\\n\\n\t\tif(targetString.indexOf(REVERSE_DREAMER) == 0){\\n\t\t\treturn targetString.delete(0,REVERSE_DREAMER.length());\\n\t\t}\\n\\n\t\tif(targetString.indexOf(REVERSE_ERASE) == 0){\\n\t\t\treturn targetString.delete(0,REVERSE_ERASE.length());\\n\t\t}\\n\\n\t\tif(targetString.indexOf(REVERSE_ERASER) == 0){\\n\t\t\treturn targetString.delete(0,REVERSE_ERASER.length());\\n\t\t}\\n\\n\t\treturn targetString;\\n\\n\t}\\n\\n}", "target": "50", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner input = new Scanner(System.in);\\n        int n = input.nextInt();\\n        int[] a = new int[55];\\n        for(int i = 1; i <= n; ++i){\\n            a[i] = input.nextInt();\\n        }\\n        int[][] b = new int[55][2];\\n        int sum = 0;\\n        for(int i = 1; i <= n; ++i){\\n            if(a[i] != i){\\n                b[sum][0] = i;\\n                b[sum][1] = a[i];\\n                sum++;\\n            }\\n        }\\n        if(sum <= 2) System.out.println(\"YES\");\\n        else System.out.println(\"NO\");\\n    }\\n}\\n", "target": "82", "substitutes": {"input": [" Input", "inf", "console", "out", "system", "init", "service", "submit", "q", "in", "select", "focus", "reader", "socket", "feed", "this", "accept", "conn", "client", "proc", "start", "buffer", "sys", "parser", "quick", "inner", "conf", "local", "parse", "inc", "subject", "get", "cin", "sin", "output", "add", "io", "raw", "process", "open", "search", "util", "stream", "active", "Input", "image", "scan", "view", "source", "sq"], "n": ["ng", "out", "m", "j", "nan", "nn", "number", "net", "z", "ln", "t", "k", "ne", "network", "on", "ni", "nm", "en", "p", "np", "nc", "c", "len", "N", "nb", "g", "d", "no", "v", "nu", "w", "all", "num", "ns", "nl", "sn", "na", "y", "o", "x", "cn", "l", "nt"], "a": ["aaa", "act", "aff", "sta", "apa", "la", "oa", "ap", "isa", "sa", "f", "da", "abs", "am", "era", "at", "A", "au", "area", "att", "ab", "ca", "qa", "ma", "app", "ac", "p", "ba", "ao", "ea", "c", "an", "data", "array", "aa", "ia", "auto", "ata", "all", "ga", "ai", "as", "aux", "alpha", "na", "va", "ae", "fa"], "i": ["ji", "q", "in", "ci", "iso", "mi", "er", "li", "v", "ij", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "bi", "f", "iy", "ei", "print", "pi", "zi", "chain", "id", "y", "uri", "im", "l", "ami", "ki", "ii", "ri", "init", "yi", "di", "info", "gi", "index", "si", "ti", "io", "\u0438", "ip", "o", "qi", "phi", "xi", "me", "j", "sim", "s", "it", "ims", "u", "set", "t", "I", "ie", "p", "point", "g", "ia", "ic", "iu", "is", "key", "x", "mac", "oi", "batch"], "b": ["B", "m", "h", "eb", "arb", "j", "s", "binary", "bo", "br", "bl", "bi", "it", "bool", "r", "z", "be", "sb", "fb", "bs", "bc", "t", "lib", "blue", "ab", "cb", "gb", "bis", "bb", "bd", "ba", "c", "db", "rb", "nb", "d", "v", "buff", "mb", "bin", "bar", "y", "l"], "sum": ["sam", "out", "um", "tu", "sim", "see", "sa", "cache", "alias", "mass", "missing", "must", "ass", "set", "pool", "diff", "black", "stack", "hum", "result", "zero", "index", "ma", "list", "mu", " SUM", "match", "si", "umm", "su", "ram", "SI", " summed", "count", "cum", "summary", "comment", "subject", "d", "seed", "scale", "total", "mem", "volume", "union", "ui", "cal", "dim", "SU", "num", "us", "average", "alpha", "Sum", "hist", "na", "cmp", "mean", "size", "hash", "tail"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\tScanner sca = new Scanner(System.in);\\n\t// \u5165\u529b\\n\tlong a = sca.nextLong();\\n\tlong b = sca.nextLong();\\n\tlong k = sca.nextLong();\\n\\n\t// \u51e6\u7406\\n\ta = a - k;\\n\tif(a < 0) {\\n\t\tk = -a;\\n\t\tb = b - k;\\n\t\ta = 0;\\n\t\tif(b < 0) {\\n\t\t\tb = 0;\\n\t\t}\\n\t}\\n\\n\t// \u51fa\u529b\\n\tSystem.out.print(a);\\n\tSystem.out.print(\" \");\\n\tSystem.out.println(b);\\n\\n\t// \u5f8c\u59cb\u672b\\n\tsca.close();\\n\t}\\n}", "target": "128", "substitutes": {"sca": ["scn", "Scn", "scb", "ScA", "scA", "SCn", "SCb", "SCa", " scb", "SCA", "Scb", "Sca", " scA", " scn"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    List<String> words;\\n    words=new ArrayList<>(Arrays.asList(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\"\\n                                        ,\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\"\\n                                        ,\"W\",\"X\",\"Y\",\"Z\"));\\n    int num = Integer.parseInt(sc.next());\\n    String line = sc.next();\\n    for(int i = 0; i < line.length(); i++){\\n      String word = line.substring(i,i+1);\\n      if(words.indexOf(word)+num > 25){\\n        System.out.print(words.get(words.indexOf(word)+num-26));\\n      }else{\\n        System.out.print(words.get(words.indexOf(word)+num));\\n      }\\n    }\\n    System.out.println();\\n  }\\n}", "target": "13", "substitutes": {"sc": [" Sc", "tch", "system", "cc", "cle", "tc", "cr", "rc", "cl", "bc", "cs", "ec", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "spec", "mc", "scl", "nc", "c", "sci", "SC", "gc", "inc", "ctx", "src", "sv", "screen", "scan", "lc", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "sq"], "words": ["flows", "bytes", "features", "vs", "rules", "papers", "posts", "pins", "caps", "articles", "Words", "maps", "tags", "spe", "doc", "tools", "files", "headers", "lights", "values", "products", "phones", "said", "terms", "parts", "lists", "frames", "objects", " Words", "blocks", "points", "cards", "works", "W", "mates", "pieces", "windows", "sword", "months", "classes", "ames", "forms", "english", "books", "prev", "lines", "w", "items", "strings", "docs", "keys", "names", "ms", "ws", "results", "women", "days", "phrase", "workers", "users", "finals", "images", "hops", "letters", "games", "weights", "pages", "we"], "num": ["sam", "nine", "um", "msg", "multi", "mon", "con", "nn", "Num", "number", "admin", "Number", "NUM", "dec", "good", "th", "mn", "perm", "nam", "result", "zero", "sym", "index", "another", "nm", "ord", "np", "conf", "obj", "count", "draw", "nb", "cal", "dim", "no", "total", "nu", "rank", "coord", "end", "day", "n", "four", "common", "non", "conv", "alph", "valid", "nom", "typ", "sum", "size", "lam"], "line": ["queue", "message", "msg", "string", "page", "lf", "lo", "url", "liner", "link", "train", "in", "file", "ln", "body", "row", "online", "frame", "detail", "lock", "se", "email", "log", "list", "entry", "query", "comment", "sql", "lines", "le", "ine", "eline", "block", "nl", "cell", "text", "inline", "Line", "ip", "LINE", "source", "l", "sample"], "i": ["ii", "phi", "m", "gu", "xi", "me", "j", "multi", "ri", "init", "bi", "it", "ik", "hi", "in", "u", "ci", "di", "I", "mi", "ie", "gi", "start", "index", "slice", "li", "p", "ei", "si", "pi", "sql", "iq", "iter", "ti", "cli", "zi", "ui", "ini", "ai", "ic", "iu", "n", "ix", "id", "ip", "y", "cgi", "o", "is", "uri", "x", "im", "l", "ki"], "word": ["label", "term", "string", "page", "lower", "feature", "password", "char", "letter", "feat", "link", "test", "train", "token", "stroke", "window", "web", "frame", "Word", "character", "bow", "sword", "query", "part", "point", "space", "var", "comment", "element", "w", "name", "item", "rank", "question", "weight", "wd", "chain", "kw", "rule", "object", "vector", "phrase", "piece", "work", "hyp", "field", "key", "man", "tag", "language"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception{\\n\t\tScanner scn = new Scanner(System.in);\\n\t\tint d = scn.nextInt();\\n\t\tint n = scn.nextInt();\\n      \tint ans = 0;\\n        int dd = (int)Math.pow(100,d);\\n        ans = dd*n;\\n      \tif(n==100){\\n      \t\tans = ans + dd;\\n    \t}\\n      \tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "245", "substitutes": {"scn": ["escen", "scr", " scnu", "gcne", "ScN", " scne", "clcn", "cln", "scen", " scnn", "Scnu", "ssN", " scen", "gcd", " scr", "ssn", "gcen", "scne", " sccn", "Scr", " scd", "sccn", "clsn", "scsn", "ssr", "scN", "clnn", "tcnn", "escne", "tccn", "tcsn", "Scn", " scsn", "scd", "gcn", "scnn", "escd", "ssnu", " scN", "scnu", "tcn", "escn"], "d": ["m", "fd", "b", "j", "s", "dk", "i", "f", "dm", "da", "gd", "in", "z", "r", "nd", "di", "D", "cd", "t", "xd", "dt", "ld", "md", "dp", "p", "c", "data", "w", "pd", "df", "dc", "div", "dat", "ds", "sd", "dn", "dh", "l"], "n": ["m", "h", "b", "j", "i", "nn", "number", "z", "t", "k", "ne", "mn", "on", "ni", "p", "en", "c", "nor", "nc", "np", "len", "N", "an", "w", "g", "v", "nu", "nb", "ns", "num", "nl", "sn", "na", "o", "x", "dn", "cn", "size", "l", "nt"], "ans": ["uns", "posts", "vs", "rs", "dds", "can", "ats", "aos", "rans", "xs", "ann", "mails", "ians", "ands", " means", "ens", "cs", "aus", "ones", "outs", "ams", "lets", "ums", "anes", "offs", "ots", "eds", "aps", "anks", "ks", "books", "ins", "an", "ais", "leans", "ars", "ms", "ents", "ns", "arms", "ows", "ids", "ants", "ces", "eps", "mas", "orders", "ons", "yes", "ds", "arts", "ips", "ls", "ANS", "amps", "es", "olds", "ays", "asks", "ads"], "dd": ["ded", "dds", "fd", "dk", "density", "dm", "da", "mind", "dx", "uds", "gd", "nd", "isd", "cd", "di", "ld", "hd", "xd", "dt", "od", "md", "dp", "ud", "edd", "bd", "vd", "hhhh", "pd", "td", "df", "dc", "ds", "dl", "mm", "sd", "pdf", "DD", "dh", "udd"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.List;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        String inputData;\\n        List<Integer> resultList = new ArrayList<Integer>();\\n        try {\\n\\n\t        while(true){\\n\t\t\t\t\tinputData = reader.readLine();\\n\t            if(inputData.indexOf(\" ? \") > 0){\\n\t            \tbreak;\\n\t            }else{\\n\t\t\t\t\tString[] strNumber = inputData.split(\" \");\\n\t\t\t\t\tint a = Integer.parseInt(strNumber[0]);\\n\t\t\t\t\tString op = strNumber[1];\\n\t\t\t\t\tint b = Integer.parseInt(strNumber[2]);\\n\\n\t\t\t\t\tresultList.add(outputCalc(a , b, op));\\n\\n\t            }\\n\t        }\\n\t        for(Integer val: resultList){\\n\t        \tSystem.out.println(val);\\n\t        }\\n\\n\t\t} catch (IOException e) {\\n\t\t\t// TODO ????????????????????? catch ????????????\\n\t\t\te.printStackTrace();\\n\t\t}\\n\\n\t}\\n\t/**\\n\t * ?????????????????????\\n\t * @param a\\n\t * @param b\\n\t * @param op\\n\t * @return result\\n\t */\\n\tprivate static Integer outputCalc(int a , int b , String op){\\n\\n\t\tint result = 0;\\n\t\tif(\"+\".equals(op)){\\n\t\t\tresult = a + b;\\n\t\t}else if(\"-\".equals(op)){\\n\t\t\tresult = a - b;\\n\t\t}else if(\"*\".equals(op)){\\n\t\t\tresult = a * b;\\n\t\t}else if(\"/\".equals(op)){\\n\t\t\tresult = a / b;\\n\t\t}\\n\t\treturn result;\\n\t}\\n\\n\\n}", "target": "139", "substitutes": {"reader": ["range", "rot", "console", "redo", "context", "rar", "r", "rl", "file", "driver", "row", "iterator", "handler", "read", "maker", "this", "reading", "linger", "buffer", "client", "er", "ner", "entry", "ro", "parser", "inner", "anger", "data", "shape", "loader", "input", "Reader", "open", "runner", "stream", "today", "builder", "writer", "upper", "operator", "master"], "inputData": ["keyData", "currentData", "currentDATA", "strDATA", " inputType", "inputString", "strString", "sourcedata", "keySample", "currentQuery", " inputSample", "readdata", "inputSample", "keyDATA", "sourceData", "readData", "inputList", "viewList", "setType", "setdata", " inputList", " inputdata", "InputString", "inputText", "viewSample", "strData", "currentText", "inputQuery", "sourceDATA", "inputDATA", "InputDATA", "sourceType", " inputText", " inputDATA", "setData", "InputQuery", "keyList", "readText", "viewData", "strQuery", "viewDATA", "currentString", "setDATA", "inputdata", "inputType", "currentdata", "InputData", "readDATA"], "resultList": ["returnMap", "returnList", " resultL", "resultLIST", "answerlist", "ResultAnd", "ResultLIST", " resultMap", "ResultList", "resultAnd", "answerMap", "resultL", "returnlist", "searchMap", "ResultL", "ResultMap", "searchL", "resultMap", "resultlist", "answerList", "searchLIST", " resultAnd", "outputMap", "outputList", " resultLIST", "searchList", "outputAnd", " resultlist"], "strNumber": ["intNumber", "stringDate", " strOther", " strNum", "execInteger", "listNumber", "intRange", "strInteger", "stringNumbers", "strOther", "stringNumber", " strRange", "strNum", "execRange", "listnumber", "keyRange", "intDate", "execNum", " strnumber", "keyNum", "stringnumber", " strDate", "stringOther", "stringNum", "strnumber", "keyInteger", "listNum", "intInteger", "execNumber", " strNumbers", "intOther", "keyNumber", "intnumber", "strRange", "intNumbers", "strNumbers", "strDate", "listRange", "intNum"], "a": ["aaa", "aff", "sta", "la", "oa", "sa", "aq", "eas", "ama", "am", "era", "t", "A", "au", "area", "ua", "ab", "ca", "qa", "ma", "ac", "ao", "ba", "ea", "xa", "aka", "ta", "an", "aa", "ia", "aj", "ga", "alpha", "pa", "na", "va", "ae", "fa"], "op": ["hop", "oper", "Op", "bit", "pop", "cmd", "top", "opt", "iop", "operation", "ype", "exp", "info", "ops", "proc", "app", "opus", "p", "ot", "jp", "type", "update", "rol", "pa", "sp", "OP", "cop", "ip", "o", "typ", "pp", "pred", "oop", "operator", "comp", "opp"], "b": ["B", "eb", "ob", "j", "br", "i", "e", "bi", "ub", "be", "body", "fb", "bs", "bc", "blue", "ab", "ib", "cb", "gb", "bis", "buffer", "bb", "p", "ba", "c", "db", "rb", "amb", "nb", "bot", "bp", "v", "d", "mb", "bar", "y", "batch", "wb"], "val": ["serv", "aval", "sol", "gal", "value", " eval", "ele", "pal", "bal", "vals", "eval", "ival", "el", "rel", "pl", " Val", "line", "li", "fol", "grad", "crit", "lit", "obj", "data", "VAL", "cal", "v", "item", "num", "lv", "Val", "rol", "sel", "bil", "px", "key", "x", "ret", "valid", "l", "pol", " aval"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\n\\npublic class Main {\\n    private static final int MOD = (int) Math.pow(10, 9);\\n    private static final long EIGHT = (long) 1e18;\\n    private static final int[][] DIRS = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\\n\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        String str = sc.next();\\n        if (str.equals(\"ABC\")) {\\n            print(\"ARC\");\\n        } else {\\n            print(\"ABC\");\\n        }\\n    }\\n\\n    /*\\n     * Check if a * b is overflow or not\\n     */\\n    static Boolean isOverflowByMul(long a, long b) {\\n        if (a == 0 || b == 0) {\\n            return false;\\n        }\\n\\n        long result = a * b;\\n        if (a == result / b) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    static private void swap(int[] nums, int x, int y) {\\n        int tmp = nums[x];\\n        nums[x] = nums[y];\\n        nums[y] = tmp;\\n    }\\n\\n    static  private void reverse(int[] nums, int left, int right) {\\n        while (left < right) {\\n            swap(nums, left, right);\\n            left++;\\n            right--;\\n        }\\n    }\\n\\n    static private boolean findNextPermutation(int[] nums) {\\n        if (nums.length <= 1) {\\n            return false;\\n        }\\n\\n        int last = nums.length - 2;\\n\\n        while (last >= 0) {\\n            if (nums[last] < nums[last + 1]){\\n                break;\\n            }\\n            last--;\\n        }\\n\\n        if (last < 0) { return false; }\\n        int nextGenerater = nums.length - 1;\\n\\n        for (int i = nums.length - 1; i > last; i--) {\\n            if (nums[i] > nums[last]) {\\n                nextGenerater = i;\\n                break;\\n            }\\n        }\\n\\n        swap(nums, nextGenerater, last);\\n        reverse(nums, last + 1, nums.length - 1);\\n        return true;\\n    }\\n\\n    static private int[] generateNArray(int n) {\\n        int[] res = new int[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            res[i] = i + 1;\\n        }\\n\\n        return res;\\n    }\\n\\n    static  private void print(String s) {\\n        System.out.println(s);\\n    }\\n\\n    static private void printArray(int[] e) {\\n        for (int s: e) {\\n            System.out.print(s + \" \");\\n        }\\n        print(\"\");\\n    }\\n\\n    static private int log2(int x) {\\n        return (int)(Math.log(x) / Math.log(2));\\n    }\\n\\n    static private long gcd(long m, long n) {\\n        if (m < n) { return gcd(n, m); }\\n        if (m % n == 0) { return n; }\\n        return gcd(n, m%n);\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException  e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try{\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n}\\n", "target": "153", "substitutes": {"MOD": ["RO", "ENGTH", "ODE", "OK", "MAX", "MAC", "DEC", " mod", "MIN", "LED", "RED", "MD", "BIT", "DATA", "LOCK", "Mod", "IDENT", "MODE", "MS", "LAB", "OD", "ONES", "SPEC", "MAG", "KEY", "REM", "LD", "mod"], "EIGHT": ["HEIGHTS", "ZEOM", "ZEIGHT", "EOM", "HEOM", "EITH", "HEIGHT", " EITH", "ZEIGHTS", "EIGHTS", "HEITH", "ZEITH", " EIGHTS", " EOM"], "DIRS": ["FLAGDS", "dirN", "dirS", "FILEN", "dirs", "dirDS", "FLAGs", "FLAGS", "FILES", "DIRDS", "DIRN", "FLAGN", "FILEDS", "FILEs", "DIRs"], "sc": ["rx", "cc", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "sac", "desc", "ec", "esc", "sync", "Sc", "ch", "pc", "osc", "isc", "uc", "sys", "mc", "scl", "c", "nc", "sh", "SC", "gc", "sw", "sr", "fc", "scan", "RC", "sp", "ser", "asc", "sch", "sec", "usc", "sq"], "str": ["out", "msg", "string", "j", "sim", "STR", "seq", "char", "f", "url", "r", "ctr", "arr", "Str", "inst", "cs", "t", "req", "next", "p", "spec", "c", "print", "obj", "data", "txt", "name", "gr", "text", "div", "tr", "expr", "key"], "a": ["aaa", "aff", "sta", "la", "sa", "aq", "f", "da", "am", "z", "era", "at", "t", "A", "au", "area", "this", "ab", "ca", "up", "ak", "ma", "app", "ac", "p", "ba", "c", "ea", "ao", "aka", "amount", "ta", "an", "aa", "d", "ia", "aj", "ar", "ack", "as", "aux", "alpha", "na", "o", "al", "l", "ae"], "b": ["B", "eb", "ob", "j", "bi", "f", "r", "z", "sb", "u", "fb", "be", "bs", "bc", "t", "ab", "ib", "cb", "bb", "p", "ba", "c", "rb", "nb", "g", "d", "v", "bar", "bu", "base", "l", "erb"], "result": ["done", "mult", "out", "mask", "true", "f", "cache", "success", "number", "rc", "r", "pair", "k", "diff", "buffer", "cur", "Result", "p", "acc", "match", "correct", "score", "data", "d", "v", "total", "results", "power", "length", "valid", "ret", "frac"], "nums": ["cumbs", " nales", "norums", "nsumbers", " noms", "gnales", "neaves", "onals", " nims", "comes", "onomes", "cumbers", "cicks", "nales", "gnails", "anums", "onumps", "snumbers", "onumbs", "unubes", "numbers", "nubes", " news", "numbs", "neoms", " nails", "snems", "cails", "enews", "numps", " numers", "gnues", "snales", "snomes", "unicks", "snims", " numer", " nomes", "anims", "cumers", "anomes", "nals", "snaves", "coms", "Nums", "cames", "anews", "enams", "norales", "snums", "gnummies", "nuers", " numps", "anoms", "neumbers", "snubes", "news", "Numbers", " nuers", "nsums", "onales", "anales", "Noms", "numer", "enems", "anuers", "onumer", "nems", "enumbers", "gnoms", "nsoms", "names", "onumers", "nsumbs", "tenuers", "onumbers", "gnumbers", "tenums", "gnams", "snumps", "nsules", "anumers", "onums", "cems", "nims", "cnums", "nsals", " nues", "onims", "onames", "unums", "unumers", " naves", "onues", "onules", "enames", "Nems", "cnumps", "anames", "nsams", "anals", "nsomes", "anails", "nails", "norumps", "anum", "anumer", "num", "enums", " numbers", "cnims", "nummies", " num", " numbs", "anicks", "unumps", "onuers", "unuers", "anumbers", "cnubes", " nubes", "snails", "anaves", "anules", " nymes", "unems", "tenubes", "onails", "norumers", " nems", "anams", "neums", "cums", "noms", "snymes", "snumers", "nymes", "nicks", "cum", "nues", "anems", "gnomes", "unumbers", "cues", "gnumbs", "enoms", " names", "gnums", "onams", "nomes", "nules", "tenumps", "snues", "anymes", "onummies", " nams", "nams", "unales", "nsummies", "naves", "numers"], "x": ["h", "xi", "rx", "j", "xp", "xs", "dx", "ox", "r", "z", "mx", "t", "k", "tx", "lat", "ux", "xy", "ax", "p", "c", "ex", "w", "lex", "d", "v", "xt", "xx", "ix", "xc", "px", "fx", "l", "X", "wx"], "y": ["ty", "fy", "j", "ny", "axy", "wy", "ery", "ye", "hy", "r", "z", "yt", "iy", "oy", "t", "py", "vy", "ch", "sky", "xy", "ym", "ay", "c", "v", "my", "Y", "ey", "yo", "cy", "hot", "yy", "sy", "yr", "iny", "ry", "ly", "o"], "tmp": ["Temp", "mk", "qq", "j", "porary", "img", "test", "jj", "dirty", "temp", "stuff", "same", "t", "mut", "emp", "perm", "MP", "attr", "bow", "xy", "np", "ptr", "local", "mp", "obj", "prefix", "nb", "ctx", "mb", "my", "etc", "orig", "jp", "tm", "yy", "aux", "timeout", "sp", "cmp", "mm", "partial", "tt", "old", "ret", "nt"], "left": ["offset", "wrong", "low", "lower", "lo", "after", "full", "net", "top", "loc", "r", "cl", "ml", "ft", "min", "el", "cont", "row", "lock", "tx", "before", "bottom", "L", "Left", "start", "ll", "first", "zero", "index", "level", "back", "list", "front", "inner", "local", "ex", "le", "w", "lex", "shift", "ix", "lt", "id", "rest", "ell", "old", "small", "l"], "right": ["third", "wrong", "rx", "after", "success", "ren", "top", "full", "r", "rc", "re", "reverse", "rw", "row", "cross", "Right", "tx", "before", "outer", "art", "rr", "start", "ax", "recent", "back", "ight", "remote", "hr", "correct", "inner", "rh", "radius", "w", "end", "rew", "rt", "rights", "raw", "west", "day", "rule", "tr", "fr", "R", "work", "ry", "rest", "max", "through", "nr", "rem", "mr", "head"], "last": ["prev", "any", "lower", "after", "top", "needed", "dest", "nd", "reverse", "sort", "t", "close", "empty", "row", "parent", "good", "history", "exp", "this", "before", "kind", "info", "never", "bottom", "highest", "zero", "start", "first", "index", "recent", "huge", "list", "est", "since", "slave", "next", "back", "latest", "p", "le", "best", "tail", "end", "no", "largest", "total", "scope", "state", "most", "chain", "length", "base", "worst", "table", "rest", "las", "max", "old", "size", "global", "Last", "stable", "origin", "nt"], "nextGenerater": ["nextValidator", "nextgenerater", "nextIteraser", "nextValidatter", " nextRepeatter", "nextGenator", " nextGenater", "nextValidter", "nextGenatter", "lastGenerator", "nextRepeaser", " nextGenerATER", "lastGenerATER", " nextGenator", " nextRepeter", "lastIterater", "lastIterATER", "nextIterater", " nextGeneraser", "nextGenATER", "nextGenater", "nextIterATER", "nextRepeter", "lastGeneratter", "nextGenerter", "nextGeneraser", "nextValidater", "nextgenerATER", "nextGenerATER", " nextGeneratter", "nextGenerator", "nextRepeator", "nextGeneratter", "lastIterator", "nextTerminator", " nextGenATER", " nextRepeator", "nextIterator", "nextRepeater", "nextTerminatter", " nextGenerter", "nextGenaser", "lastGenerater", "nextgenerator", "nextgeneratter", " nextRepeater", " nextGenaser", "nextTerminter", "lastIteratter", "nextIteratter", "nextRepeATER", "nextTerminater", "nextRepeatter", " nextGenerator"], "i": ["ii", "phi", "xi", "me", "multi", "j", "fi", "ri", "it", "bi", "ji", "hi", "in", "u", "ci", "di", "I", "mi", "ie", "info", "gi", "index", "ni", "li", "p", "point", "si", "pi", "ti", "v", "io", "cli", "zi", "ui", "ini", "ai", "ic", "\u0438", "iu", "ix", "id", "ip", "o", "ori", "oi", "im", "l", "ami", "qi", "ki"], "n": ["j", "nan", "f", "nn", "r", "z", "ln", "t", "p", "len", "c", "np", "N", "count", "nb", "w", "d", "v", "name", "names", "ns", "sn", "o", "l"]}}
{"code": "\\n\\nimport java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    static class FS {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st = new StringTokenizer(\"\");\\n\\n        String next() {\\n            while (!st.hasMoreTokens())\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        int[] readArray(int n) {\\n            int[] a = new int[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = nextInt();\\n            return a;\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        public long[] readLongArray(int n) {\\n            long[] a = new long[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = nextLong();\\n            return a;\\n        }\\n    }\\n\\n    static final FS sc = new FS();\\n    static final PrintWriter out = new PrintWriter(System.out);\\n    static final int mod = 1000000007;\\n\\n    public static void main(String[] args) {\\n\\n        solve();\\n        out.close();\\n\\n    }\\n\\n    static void solve() {\\n        int n = sc.nextInt();\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        if (n % a == 0) {\\n            out.println((n / a) * b);\\n        } else {\\n            out.println(((n / a) * b) + b );\\n        }\\n\\n    }\\n}\\n\\n\\n", "target": "34", "substitutes": {"br": ["lr", "Br", "bsp", "bl", "shr", "str", "cr", "bf", "dr", "sb", "r", "abs", "kr", "buf", "ch", "pt", "pr", "er", "next", "hr", "rb", "bro", "bp", "gr", "vr", "bt", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "mr", "BR"], "st": ["ost", "sta", "ct", "s", "irst", "spe", "str", "cr", "stre", "r", "dr", "sb", "nd", "inst", "sm", "t", "set", "ast", "ld", "wt", "sty", "se", "so", "ST", " ST", "std", "start", "est", "ist", "stop", "sh", "stri", "sw", "St", "mt", "ust", "sl", " St", "const", "l", " superst", "bt", " est", "et", "sts", "sy", "sp", "sn", "rest", "stage", "stat", "ste", "rt", "nt"], "n": ["m", "h", "j", "nan", "e", "nn", "net", "number", "fn", "r", "z", "ln", "u", "t", "ne", "network", "mn", "ll", "on", "nm", "p", "en", "c", "len", "np", "nc", "N", "pi", "nos", "an", "w", "g", "d", "v", "no", "nb", "name", "nu", "names", "all", " N", "ns", "num", "un", "nl", "sn", "nw", "tn", "na", "y", "o", "x", "dn", "cn", "size", "l", "nt"], "a": ["aff", "la", "r", "A", "dev", "ab", "qa", "list", "xa", "ow", "w", "aa", "ack", "ar", "ai", "as", "m", "e", "f", "am", "at", "ax", "ao", "c", "ea", "an", "data", "ga", "aux", "div", "pa", "al", "l", "aaa", "sa", "ed", "el", "area", "index", "ba", "ta", "d", "aj", "alpha", "na", "val", "to", "o", "ae", "act", "apa", "oa", "j", "ap", "aos", "oo", "da", "ya", "abs", "z", "u", "wa", "t", "au", "ua", "ca", "ma", "app", "ac", "p", "aka", "ia", "ata", "va", "x", "es", "fa"], "i": ["ii", "phi", "m", "xi", "ful", "me", "j", "multi", "sim", "it", "bi", "f", "init", "ji", "fire", "q", "u", "ci", "iy", "set", "di", "I", "mi", "ie", "gi", "client", "ni", "list", "li", "ei", "si", "c", "status", "pi", "ex", "ti", "g", "v", "io", "cli", "ij", "zi", "ui", "my", "ini", "ic", "ai", "us", "\u0438", "iu", "ios", " I", "ix", "MI", "ip", "y", "o", "is", "PI", "mac", "im", "oi", "batch", "ity", "qi", "ki"], "sc": ["cc", "tc", "cr", "pb", "rc", "ss", "ctr", "sb", "cl", "cv", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "cf", "cu", "sys", "psc", "mc", "scl", "c", "nc", "si", "SC", "gc", "ssl", "fc", "ctx", "sr", "sv", "ic", "dc", "sic", "lc", "sp", "asc", "conv", "sch", "sec", "usc"], "out": ["console", "aos", "it", "str", "cache", "error", "net", "in", "r", "OUT", "file", "crit", "bs", "t", "at", "pool", "ou", "outs", "lock", "os", "outer", "info", "exp", "ch", "up", "sys", "Out", "log", "list", "report", "null", "p", "c", "print", "ins", "inner", "conf", "ex", "obj", "write", "txt", "w", "res", "v", "io", "output", "name", "input", "end", "ic", "screen", "co", "gr", "to", "flush", "conv", "over", "o", "writer", "err", "ut", "OU", "nt"], "mod": ["MOD", "m", "f", " maj", "bf", "z", " base", "cb", "prime", "off", "ac", "p", "db", " m", "d", "mb", "Mod", "num", " Mod", "base", "val", "M", "max", "x", "fac"], "b": ["B", "m", "h", "ob", "j", "e", "bi", "f", "bf", "r", "z", "sb", "be", "fb", "bs", "bc", "t", "ab", "ib", "bb", "bd", "p", "ba", "c", "db", "rb", "nb", "w", "d", "v", "g", "bt", "base", "y", "o", "l"]}}
{"code": "import java.util.Scanner;\\nimport java.util.HashMap;\\n \\nclass Main {\\n\tpublic static void main(String[] args) {\\n \\n\t    Scanner sc = new Scanner(System.in);\\n\t    int N = sc.nextInt();\\n\t    HashMap<Integer, Integer> map = new HashMap<>();\\n\t    for (int i = 1; i < N; i++) {\\n\t      int temp = sc.nextInt();\\n\t      Integer count = map.get(temp);\\n\t      if (count == null) { count = 1;} else { count++;}\\n\t      \\n\t      map.put(temp, count);\\n\t    }\\n\t    \\n\t    int ans = 0;\\n\t    for (int j = 1; j <= N; j++) {\\n\t      if (map.get(j) == null) { ans = 0;} else { ans = map.get(j);}\\n\t      System.out.println(ans);\\n\t    }\\n\t  }\\n}", "target": "12", "substitutes": {"sc": ["rs", "system", "cc", "cle", "ss", "cr", "pb", "rc", "capt", "cl", "bc", "cs", "ec", "esc", "sync", "Sc", "ctl", "se", "isc", "osc", "pc", "ch", "sys", "ck", "mc", "scl", "nc", "c", "sh", "SC", "gc", "inc", "ctx", "fc", "st", "src", "sv", "ic", "nl", "dc", "scan", "lc", "sp", "asc", "sch", "anc", "sec", "usc", "sq"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "NS", "I", "GN", "D", "NO", "NP", "NC", "NB", "L", "V", "TN", "NM", "Net", "NT", "NA", "T", "K", "J", "Sn", "NE", "n", "Count", "NW", "No", "M", "C", "Z", "Na"], "map": ["store", "cap", "save", "m", "collect", "ap", "mask", "see", "addr", "cache", "link", "where", "apper", "MAP", "dict", "set", "order", "window", "manager", "lock", "use", "group", "index", "list", "ma", "load", "en", "match", "code", "gate", "mp", "parse", "apply", "shape", "ack", "scale", "mb", "add", "mt", "mem", "make", "block", "rm", "open", "ape", "claim", "pack", "snap", "table", "view", "mm", "max", "size", "one", "place", "cp", "hash", "master"], "i": ["ii", "phi", "m", "xi", "me", "inter", "sim", "multi", "it", "bi", "q", "in", "ci", "di", "mi", "ie", "index", "li", "si", "print", "pi", "ex", "iq", "ti", "v", "a", "name", "zi", "ui", "ini", "ai", "ic", "us", "iu", "n", "ind", "ix", "id", "ip", "y", "is", "PI", "x", "im", "qi"], "temp": ["Temp", "tem", "current", "sim", "porary", "tmp", "perature", "test", "init", "tc", "tim", "fake", "time", "t", "emp", "stem", "req", "pt", "prime", "timer", "tty", "cur", "buffer", "pre", "cu", "template", "ptr", "mp", "pi", "txt", "local", "prefix", "res", "v", "total", "mem", "mt", "orig", "deg", "tm", "base", "tr", "mm", "key", "max", "em"], "count": ["current", "check", "soft", "ct", "multi", "tmp", "ount", "cc", "cat", "cache", "cmd", "must", "number", "ctr", "z", "hold", "cont", "ph", "coll", "th", "req", "result", "counter", "index", "met", "cur", "first", "list", "report", "acc", "c", "amount", "nb", "add", "total", "all", "num", "const", "last", "length", "used", "cell", "n", "Count", "now", "cond", "ind", "child", "call", "max", "size", "stat", "sum", "col", " counts", "still", "find", "found", "nt"], "ans": ["uns", "posts", "rs", "s", "rans", "ats", "aos", "can", "pan", "xs", "ann", " spans", "ians", "vals", "ens", "cs", "AN", "aus", "outs", "acs", "os", "angs", "beans", "ums", "ags", "anes", "offs", "eds", "aps", "gs", "anks", "ks", "ins", "an", "lines", "ars", "names", "ms", "ents", "orts", "ns", " scans", "ows", "ids", "ants", "arms", "orders", "mas", "ates", "oos", "ds", "vers", "arts", "roots", "ls", "ANS", "amps", "anc", "olds", "asks", "ads"], "j": ["jet", "oj", "b", "m", "adj", "og", "ja", "br", "bo", "ji", "jj", "jc", "jac", "ev", "q", "jen", "z", "by", "uj", "bj", "jump", "att", "jit", "json", "go", "je", "pt", "req", "pr", "kj", "ax", "off", "kid", "note", "jl", "obj", "jo", "g", "bot", "other", "aj", "jp", "ij", "J", "dj", "jas", "ind", "fr", "jack", "js", "y", "err", "job", "ge"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tint wa,tuginoSaidai,hozon;\\n\t\twa = 0;\\n\t\tfinal int KOSU = N;\\n\t\tint[] kakaku = new int[KOSU];\\n\t\tint[] narabi = new int[KOSU]; \\n\t\tfor (int i=0;i<KOSU;i++) {\\n\t\t\tkakaku[i] = sc.nextInt();\\n\t\t}\\n\t\tArrays.sort(kakaku);\\n\t\tfor(int i=0;i<K;i++) {\\n\t\t\twa = wa +kakaku[i];\\n\t\t}\\n\t\tSystem.out.println(wa);\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "41", "substitutes": {"sc": [" Sc", "syn", "cc", "tc", "cr", "ss", "rc", "pb", "capt", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "exec", "sys", "psc", "mc", "scl", "c", "nc", "sh", "sub", "SC", "gc", "inc", "ctx", "fc", "arc", "src", "sv", "nl", "lc", "scan", "sp", "ser", "asc", "conv", "cgi", "ctrl", "sch", "sec", "anc", "usc", "Sync", "irc", "sq"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "AN", "NS", "I", "A", "NO", "NC", "L", "V", "TN", "Size", "NM", "H", "NT", "NA", "T", "J", "NE", "n", "U", "M", "R", "C", "Z", "X"], "K": ["B", "KA", "P", "KI", "UK", "KE", "SK", "S", "G", "KB", "Kent", "FK", "I", "k", "W", "L", "V", "KS", "H", "KN", "KT", "T", "Ku", "J", "KING", "Q", "U", "M", "R", "KK", "C", "Z", "KR", "Kansas", "PK", "VK"], "wa": ["Wa", "la", "ja", "sa", "wy", "da", "hi", "wid", "sha", "aw", "wo", " Wa", "una", "wan", "wal", "wait", "hold", "wat", "lambda", "dra", "wt", "wi", "qa", "owa", "ju", "ma", "ka", "xa", "ta", "sw", "w", "ww", "no", "wn", "ha", "ai", "hao", "ws", "wd", "WA", "kw", "nw", "pa", "aja", "na", "awa", "wr", "who", "wb", "we"], "tuginoSaidai": ["tuginedagai", "tuginounaii", "tuginoagai", "tuginedagau", "tuginounirin", "tuginoagau", "tuginounau", "tuginedagirin", "tuginounai", "tuginoawirin", "tuginoawau", "tuginoagaii", "tuginoagirin", "tuginoawai", "tuginoawaii", "tuginedagaii"], "hozon": ["khozong", "hozen", "khuzan", "hogan", "hizong", "khuzong", "khozen", "hizen", "huzan", "khuzen", "khozon", "khozan", "huzong", "hogon", "huzon", "huzen", "hizon", "hozong", "khuzon", "hizan", "hogong", "hozan", "hogen"], "KOSU": [" KOSS", "NosEU", "NOSS", "kPOSU", "KOsS", " KOSSU", "KOKU", "KoSP", "KEYoSSU", "KoSSU", "KoSU", "kPOSSU", "KOKu", "KEYOSSU", "NosUS", "KPOSP", "KOSSSU", "KoSUS", "KOSP", "Kosu", "NOSEU", "KOSEU", "KosU", " KoSU", "NOSUS", "KEYOSU", "KosUL", "KOsU", "KOSUL", "kPOSOU", "KosUS", "KoSUL", "KoSS", " KoSu", "KOKUL", "KoSOU", "kOSOU", "KosS", "KOsEU", "KPOSSU", "KOKSU", "KOSSOU", "KOSOU", "KosSU", "KEYoSU", "KosEU", "KoSEU", "KOKS", "NosS", "kOSSU", "KPOSU", " KOSu", "KOSS", "KoSu", "kPOSP", "NOSU", "KOSUS", "kOSP", "KOsUS", "KEYoSUL", " KoSSU", "KPOSOU", "KOSSP", "KEYOSUL", "NosU", " KoSS", "kOSU", "KOSSU", "KOSu"], "kakaku": ["kakaatsuki", "kakingu", "khakaku", "kagaki", "kekatsu", "kuakingu", "khakaka", "kakryu", "kuakaki", "kokaki", "kakaki", "kuhakaku", "khakoku", "kakaatsu", "Kakaka", "kekaka", "kagaka", "kokaka", "Kakryu", "kagaku", "kuhakingu", "khakingu", "kaskatsu", "kuhakaki", "kakamoto", "Kakatsuki", "Kakaatsu", "kankaku", "kuhakaka", "kaskatsuki", "Kashaku", "Kakaryu", "kakatsuki", "kukoku", "kakatsu", "kashamoto", "Kashoku", "kashaka", "kuakaku", "kukaka", "kankatsu", "kankatsuki", "kekatsuki", "kekryu", "kankryu", "Kakaaku", "Kakaatsuki", "khakaki", "kaskaka", "Kashaka", "kokaku", "Kakaku", "Kekatsuki", "kagingu", "kukaku", "Kashamoto", "Kekaku", "kaskaku", "kukamoto", "kashaku", "Kakatsu", "Kakamoto", "kakaka", "kokingu", "kakaryu", "Kekatsu", "khakamoto", "Kakoku", "kashoku", "Kekaka", "kakoku", "kuakaka", "kakaaka", "kakaaku", "kekaku"], "narabi": ["arabi", "narabis", "earabis", "darbi", "darabi", "earini", "arini", "darabis", "earabi", "arbi", "narbi", "arabis", "narini", "darini", "earbi"], "i": ["ii", "phi", "m", "gu", "xi", "multi", "sim", "j", "fi", "ri", "eu", "init", "bi", "it", "f", "ji", "hi", "q", "by", "ci", "iy", "di", "I", "mi", "ie", "info", "gi", "ni", "li", "ei", "si", "status", "pi", "ex", "ti", "v", "io", "cli", "ij", "zi", "ui", "ini", "ic", "\u0438", "ai", "us", "chain", "l", "iu", "base", "ice", "ind", "ix", "id", "ip", "y", "is", "uri", "im", "source", "err", "ami", "ity", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tlong K = sc.nextLong();\\n\t\tint Q = sc.nextInt();\\n\t\t\\n\t\tlong[] seikai = new long[N];\\n\t\tfor (int i=0; i<Q; i++) {\\n\t\t\tint A = sc.nextInt();\\n\t\t\tseikai[A-1]++;\\n\t\t}\\n\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tfor (int i=0; i<N; i++) {\\n\t\t\tsb.append((K - (Q - seikai[i]) <= 0 ? \"No\" : \"Yes\") + \"\\n\");\\n\t\t}\\n\t\tSystem.out.println(sb);\\n\t}\\n}", "target": "102", "substitutes": {"sc": [" Sc", "ng", "system", "cc", "tc", "cr", "ss", "rc", "pb", "cl", "bc", "cs", "cont", "esc", "sync", "Sc", "ctl", "se", "pl", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "nc", "c", "sh", "SC", "gc", "sw", "inc", "fc", "st", "jp", "sv", "dc", "lc", "scan", "sp", "cmp", "asc", "conv", "ctrl", "sch", "anc", "usc", "sq"], "N": ["B", "E", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "NL", "AN", "NS", "I", "D", "NO", "NP", "NC", "NB", "L", "ND", "V", "NM", "H", "NT", "NA", "Y", "T", "J", "NE", "n", "No", "M", "R", "C", "Z", "X", "O"], "K": ["B", "KA", "E", "P", "F", "UK", "OK", "Know", "SK", "S", "G", "Sk", "KB", "I", "D", "k", "L", "KY", "V", "KS", "H", "KN", "Y", "T", "J", "KING", "U", "M", "R", "KK", "C", "Z", "KR", "X", "PK"], "Q": ["B", "E", "P", "F", "q", "S", "G", "Que", "I", "D", "Query", "W", "IQ", "L", "AL", "V", "CH", "QL", "Qu", "H", "UE", "BL", "Y", "QU", "T", "J", "MQ", "NE", "U", "M", "R", "C", "Z", "X", "O"], "seikai": ["seiskai", "seicani", "seiati", " seikao", "seikkai", "seikao", "seicaii", "seikari", "seiskani", "seikaki", "seekati", "seekao", " seikkais", "peiskai", "sekai", "seikani", "peikaii", " seiari", " seiaii", " seikkai", "seickai", "seiskaii", "seikeao", "seikkais", "seiai", "sekati", "seickaki", "seikkaii", "seikkati", "seiari", " seikati", "sekaii", " seikais", " seikkati", "peikaki", " seikari", "seickaii", "seikeais", "seikkao", "seickani", "seekais", "peiskaki", " seiati", "seikeai", "seekai", "seicaki", " seikaii", "seikais", "seikaii", "seikati", "seikeati", "seicai", "seiaii", " seikkao", "peiskani", "seiskaki", "seikkari", "peikai", "peikani", "sekari", " seiai", "peiskaii"], "i": ["ii", "phi", "m", "xi", "me", "j", "sim", "multi", "ri", "s", "init", "bi", "it", "f", "ji", "hi", "q", "z", "u", "yi", "ci", "iy", "di", "I", "k", "mi", "ie", "info", "go", "gi", "index", "ni", "li", "p", "ei", "si", "print", "pi", "iter", "ti", "iq", "v", "cli", "ij", "zi", "ui", "ini", "ic", "\u0438", "chain", "l", "iu", "base", "n", "ind", "ix", "id", "ip", "y", "uri", "PI", "x", "im", "oi", "err", "qi", "ki"], "A": ["AT", "B", "AC", "E", "P", "Va", "LA", " AI", "AA", "CA", "S", "Ax", "BA", "RA", "AI", "mA", " a", "AB", "I", "D", "O", "API", "L", "SA", "V", "ax", "ma", "VA", "Part", "a", "HA", "TA", "IA", "Alpha", "alpha", " I", "AR", "U", "M", "ATA", "C", "ICA", "EA", "AP"], "sb": ["sam", "gob", "b", "sbm", "eb", "ob", "sth", "sa", "stab", "ub", "pb", "bf", "bj", "bs", "rob", "lp", "zb", "kb", "abb", "gb", "cb", "ib", "lb", "ab", "bg", "bb", "bash", "xb", "gc", "rb", "ssl", "nb", "sg", "sw", "mb", "sv", "bt", "sn", "obb", "sf", "sp", "bh", "SB", "sq", "erb"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main\\n{\\n    public static void main(String []args) throws IOException {\\n    \tFastScanner in  = new FastScanner(System.in);\\n    \tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false);\\n    \tsolve(in, out);\\n    \tin.close();\\n    \tout.close();\\n    }\\n    static long gcd(long a, long b){ return (b==0) ? a : gcd(b, a%b); }\\n    static int gcd(int a, int b){ return (b==0) ? a : gcd(b, a%b); }\\n    static class FastScanner{\\n\tBufferedReader reader;\\n\tStringTokenizer st;\\n\tFastScanner(InputStream stream){reader=new BufferedReader(new InputStreamReader(stream));st=null;}\\n\tString next(){while(st == null || !st.hasMoreTokens()){try{String line = reader.readLine();if(line == null){return null;}\\n\t     st = new StringTokenizer(line);}catch (Exception e){throw new RuntimeException();}}return st.nextToken();}\\n\tString nextLine()  {String s=null;try{s=reader.readLine();}catch(IOException e){e.printStackTrace();}return s;}\\n\tint    nextInt()   {return Integer.parseInt(next());}\\n\tlong   nextLong()  {return Long.parseLong(next());}\\n\tdouble nextDouble(){return Double.parseDouble(next());}\\n\tchar   nextChar()  {return next().charAt(0);}\\n\tint[]  nextIntArray(int n)         {int[] arr= new int[n];   int i=0;while(i<n){arr[i++]=nextInt();}  return arr;}\\n\tlong[] nextLongArray(int n)        {long[]arr= new long[n];  int i=0;while(i<n){arr[i++]=nextLong();} return arr;}\\n\tint[]  nextIntArrayOneBased(int n) {int[] arr= new int[n+1]; int i=1;while(i<=n){arr[i++]=nextInt();} return arr;}\\n\tlong[] nextLongArrayOneBased(int n){long[]arr= new long[n+1];int i=1;while(i<=n){arr[i++]=nextLong();}return arr;}\\n\tvoid   close(){try{reader.close();}catch(IOException e){e.printStackTrace();}}\\n    }\\n    \\n    /********* SOLUTION STARTS HERE ************/\\n    \\n    private static void solve(FastScanner in, PrintWriter out){\\n        int n = in.nextInt();\\n        while(true){\\n            if(isPrime(n)) {out.println(n);break;}\\n            ++n;\\n        }\\n        \\n    }\\n    public static boolean isPrime(int n){\\n        for(int i=2;i*i<=n;i++){\\n            if(n%i==0) return false;\\n        }\\n        return true;\\n    }\\n    /************* SOLUTION ENDS HERE **********/\\n}", "target": "183", "substitutes": {"in": ["inf", "In", "con", "isin", "sol", "lin", "it", "init", "run", " din", "r", "file", "ln", "rin", "t", "lock", "IN", "info", "on", "from", "er", "gin", "ner", "en", "p", "print", "inner", "ins", "inn", "inc", "iter", "sin", "cin", "io", "input", "bin", "ini", "thin", "l", "ind", "mm", "din", "is", "source", "err", "rt"], "out": ["console", "con", "aos", "it", "str", "cmd", "net", "put", "error", "OUT", "file", "window", "t", "at", "ou", "outs", "os", "outer", "info", "ch", "sys", "client", "Out", "log", "null", "p", "print", "ot", "inner", "ex", "write", "w", "res", "v", "output", "io", "name", "end", "all", "co", "to", "o", "writer", "err", "OU", "nt"], "a": ["aaa", "m", "la", "oa", "sa", "e", "aq", "f", "r", "z", "am", "u", "t", "A", "au", "area", "ab", "ca", "index", "bb", "ma", "ac", "p", "ba", "c", "ao", "ea", "xa", "ta", "an", "aa", "d", "ia", "g", "ar", "aj", "ga", "alpha", "val", "y", "va", "o", "ach", "x", "al", "l", "ae"], "b": ["B", "m", "h", "eb", "ob", "j", "br", "e", "bi", "f", "bf", "r", "z", "be", "u", "fb", "sb", "bc", "bs", "t", "k", "ab", "ib", "cb", "ch", "gb", "lb", "beta", "bg", "bb", "back", "bd", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "w", "bp", "length", "bt", "base", "y", "o", "x", "reb", "l", "wb"], "reader": ["rd", "rot", "rs", "rx", "ri", "lr", "context", "e", "rar", "r", "rl", "dr", "file", "driver", "rc", "wrapper", "row", "iterator", "handler", "read", "rr", "buffer", "finder", "er", "client", "ner", "ro", "parser", "inner", "ptr", "rer", "rier", "iter", "txt", "loader", "io", "Reader", "runner", "tr", "fr", "ser", "builder", "ry", "writer", "mr", "older"], "st": ["ost", "sta", "ct", "struct", "irst", "tmp", "sth", "str", "ss", "net", "dr", "nd", "inst", "t", "set", "ast", "wt", "th", "sty", "se", "stack", "pt", "ST", "std", "storage", "start", "first", "usr", "sc", "est", "ist", "stop", "sh", "stri", "sw", "St", "mt", "ust", "sv", "sl", "const", "l", "bt", "et", " est", "sts", "tr", "sp", "ts", "rest", "stage", "tt", "stat", "ste", "rt", "stable", "ut", "nt"], "stream": ["message", "console", "string", "channel", "context", "test", "str", "file", "Stream", "window", "pool", "row", "cont", "iterator", "socket", "read", "stack", "ream", "buffer", "proc", "pipe", "next", "null", "inner", "form", "data", "v", "output", "path", "input", "source", "sample"], "line": ["message", "me", "string", "page", "lin", "e", "str", "sequence", "liner", "link", "train", "file", "ln", "body", "stroke", "row", "online", "frame", "detail", "record", "se", "buffer", "next", "entry", "part", "point", "le", "data", "lines", "comment", "port", "ine", "eline", "block", "column", "chain", "nl", "cell", "text", "inline", "phrase", "Line", "word", "piece", "LINE", "valid", "source", "l", "sample"], "s": ["rs", "h", "its", "j", "ats", "str", "fs", "ss", "S", "r", "sb", "bs", "cs", "set", "t", "os", "se", "uts", "qs", "gs", "p", "sw", "ys", "lines", "ms", "ws", "ns", "sts", "ds", "ps", "js", "ts", "ls", "is", "es", "l", "csv", "sq"], "n": ["ng", "m", "j", "nan", "it", "nn", "net", "number", "fn", "none", "z", "ln", "t", "nr", "node", "ne", "ll", "ni", "nat", "nm", "len", "en", "c", "np", "nc", "p", "N", "count", "an", "le", "w", "g", "d", "no", "name", "v", "nu", "nb", "names", "all", "ic", "ns", "num", "un", "nl", "nw", "sn", "na", "nil", "size", "x", "cn", "l", "nt"], "arr": ["aaa", "act", "mk", "msg", "arb", "j", "br", "ev", "bl", "doc", "par", "dr", "r", "buf", "dict", "row", "au", "coll", "rel", "py", "att", "good", "exp", "stack", "attr", "enc", "sys", "ax", "list", "vol", "app", "ig", "acc", "load", "var", "obj", "iq", "ais", "array", "aa", "db", "aug", "my", "ar", "aj", "tr", "all", "Ar", "ARR", "gr", "bar", "Array", "ait", "dat", "map", "err", "fr", "ang", "ix", "asc", "ray", "js", "elt", "expr", "rest", "task", "batch", "rr", "arg"], "i": ["ii", "phi", "xi", "me", "j", "multi", "fi", "sim", "it", "bi", "e", "hi", "u", "ci", "di", "I", "mi", "ie", "info", "gi", "index", "ni", "li", "ei", "si", "status", "pi", "ti", "v", "io", "cli", "ij", "zi", "ui", "ini", "ic", "ai", "us", "iu", "base", "ix", "ip", "y", "o", "is", "im", "ori", "oi", "l", "ami", "qi"]}}
{"code": "import java.math.BigInteger;\\nimport java.math.BigDecimal;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner input=new Scanner(System.in);\\n\t\tint n,f=0;\\n\t\tBigInteger a[]=new BigInteger[100005];\\n\t\tn=input.nextInt();\\n\t\tBigInteger b=new BigInteger(\"1\");\\n\t\tBigInteger c=new BigInteger(\"1000000000000000000\");\\n\t\tBigInteger d=new BigInteger(\"0\");\\n\t\tfor(int i=1;i<=n;i++){\\n\t\t\ta[i]=input.nextBigInteger();\\n\t\t\tif(a[i].equals(d)){\\n\t\t\t\tf=2;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(f==2){\\n\t\t\tSystem.out.println(\"0\");\\n\t\t}\\n\t\telse{\\n\t\t\tfor(int i=1;i<=n;i++){\\n\t\t\t\tb=b.multiply(a[i]);\\n\t\t\t\tif(b.compareTo(c)>0){\\n\t\t\t\t\tf=1;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif(f==1){\\n\t\t\tSystem.out.println(\"-1\");\\n\t\t}\\n\t\t\telse{\\n\t\t\tSystem.out.println(b);\\n\t\t}\\n\t\t}\\n\t\t\\n\t\t\\n\t}\\n\\n\\n}\\n", "target": "27", "substitutes": {"input": [" Input", "out", "http", "system", "context", "init", "it", "service", "q", "in", "focus", "select", "reader", "history", "socket", "feed", "info", "storage", "cur", "accept", "conn", "sys", "proc", "client", "start", "control", "index", "first", "buffer", "parser", "inner", "local", "parse", "inc", "subject", "get", "output", "io", "process", "open", "search", "util", "active", "Input", "image", "table", "view", "unsigned", "widget", "source", "initial", "sq"], "n": ["out", "m", "j", "nan", "nn", "net", "r", "z", "ln", "t", "ne", "network", "mn", "on", "ni", "en", "p", "len", "np", "gn", "nc", "N", "an", "nb", "g", "v", "nu", "no", "name", "names", "all", "num", "ns", "un", "nl", "sn", "na", "y", "o", "x", "size", "cn", "l", "nt"], "f": ["fl", "ef", "fd", "fee", "F", "fi", "lf", "e", "fs", "fm", "bf", "q", "z", "fb", "fa", "fort", "fun", "t", "good", "diff", "exp", "cf", "fe", "off", "p", "fp", "conf", "of", "w", "fc", "v", "frac", "rf", "eff", "df", "l", "xf", "sf", "fr", "conv", "found", "field", "fac", "flat", "tf", "ff"], "a": ["aaa", "sta", "apa", "la", "oa", "sa", "eas", "da", "sha", "ya", "am", "u", "era", "at", "A", "au", "area", "ab", "ca", "ma", "app", "ac", "p", "ao", "ba", "ea", "ta", "an", "aa", "ia", "ar", "ava", "ata", "ga", "as", "alpha", "pa", "va", "o", "ae"], "b": ["B", "eb", "ob", "j", "ble", "bo", "br", "bl", "bi", "bf", "r", "sb", "be", "body", "fb", "u", "z", "bs", "bc", "blue", "ab", "cb", "gb", "ib", "bis", "beta", "bb", "p", "ba", "xb", "db", "rb", "nb", "g", "v", "mb", "buff", "bp", "bin", "bt", "base", "bh", "bound", "y", "o", "x", "reb", "l", "wb"], "c": ["ct", "can", "cc", "e", "cr", "tc", "rc", "r", "z", "u", "ci", "cm", "cs", "bc", "cd", "cb", "ch", "ca", "cf", "cu", "ac", "mc", "gc", "cut", "arc", "fc", "cor", "co", "ce", "dc", "lc", "o", "ctrl", "C", "l"], "d": ["out", "e", "da", "dr", "r", "z", "u", "di", "dd", "D", "t", "dec", "cd", "dt", "dev", "bd", "p", "db", "ad", "v", "pd", "td", "df", "dc", "de", "ds", "id", "sd", "dh", "l"], "i": ["ii", "phi", "xi", "me", "multi", "sim", "j", "ri", "init", "it", "ji", "bi", "hi", "q", "u", "span", "ci", "set", "di", "I", "mi", "this", "ie", "info", "json", "series", "gi", "slice", "list", "li", "ei", "si", "point", "print", "status", "ski", "pi", "iq", "ti", "io", "name", "spin", "ij", "ui", "zi", "ini", "ai", "\u0438", "us", "ic", "chain", "iu", "base", "ind", "ix", "id", "ip", "y", "o", "is", "key", "uri", "im", "cli", "PI", "batch", "ity", "qi", "ki"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] srgs){\\n        Scanner sc=new Scanner(System.in);\\n\\n        int n=sc.nextInt();\\n        String a=sc.next(),b=sc.next();\\n        for(int i=0;i<n;i++){\\n            System.out.print(a.charAt(i));\\n            System.out.print(b.charAt(i));\\n        }\\n    }\\n}\\n", "target": "200", "substitutes": {"srgs": ["nrgs", "srg", "rgt", "nrgt", "rgs", "nrg", "srbs", "rbs", " srgt", " srbs", "nrbs", "rg", " srg", "srgt"], "sc": ["cc", "cle", "cr", "tc", "ss", "rc", "cl", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "exp", "ch", "osc", "pc", "isc", "sys", "mc", "scl", "c", "nc", "sci", "sh", "sub", "SC", "gc", "sw", "inc", "cons", "fc", "sv", "screen", "lc", "scan", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "n": ["ng", "m", "norm", "nan", "nn", "net", "ln", "t", "ne", "mn", "network", "ni", "nm", "en", "p", "nc", "gn", "np", "c", "nor", "N", "an", "nb", "d", "no", "nu", "name", "v", "ns", "num", "nl", "nw", "sn", "na", "cn", "l", "nt"], "a": ["act", "aaa", "aff", "\u00e4", "sta", "apa", "la", "ap", "ja", "sa", "da", "admin", "ya", "am", "r", "at", "A", "au", "acs", "att", "area", "ab", "ca", "ma", "app", "ac", "ao", "aka", "ea", "af", "an", "aa", "ia", "aj", "ata", "as", "aux", "alpha", "na", "ach", "al", "ae"], "b": ["B", "eb", "ob", "bl", "bi", "pb", "bf", "be", "sb", "fb", "bs", "bc", "lib", "blue", "zb", "ab", "cb", "gb", "ib", "bis", "beta", "bg", "bb", "back", "xb", "ba", "c", "db", "rb", "nb", "bp", "mb", "or", "base", "wb", "erb"], "i": ["ii", "phi", "m", "gu", "xi", "multi", "j", "sim", "ri", "eu", "init", "bi", "it", "ji", "hi", "ims", "u", "yi", "ci", "di", "I", "mi", "series", "gi", "index", "client", "ni", "sym", "li", "ei", "si", "ski", "pi", "sql", "iter", "ti", "cli", "my", "io", "zi", "ui", "ms", "ini", "ai", "ic", "us", "\u0438", "iu", "ix", "ip", "y", "is", "key", "x", "im", "uri", "ori", "err", "ami", "qi", "ki"]}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.Comparator;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    static int[] w = new int[100010];\\n    static int[] v = new int[100010];\\n    static int[][] dp = new int[110][100010];\\n    static int k;\\n\\n    static int chmin(int a, int b) {\\n        if (a > b) {\\n            a = b;\\n            return a;\\n        }\\n        return a;\\n    }\\n\\n    static int chmax(int a, int b) {\\n        if (a < b) {\\n            a = b;\\n            return a;\\n        }\\n        return a;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int k = sc.nextInt();\\n        int count = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            if (sc.nextInt() >= k)\\n                count++;\\n        }\\n\\n        System.out.println(count);\\n    }\\n}\\n", "target": "145", "substitutes": {"w": ["h", "e", "f", "q", "r", "z", "u", "wa", "rw", "t", "wt", "fw", "hw", "p", "wl", "sw", "g", "ww", "ws", "kw", "nw", "o", "wr", "x", "wx", "wb"], "v": ["vs", "m", "h", "j", "ev", "vm", "vv", "q", "av", "z", "u", "cv", "vp", "nv", "V", "ve", "uv", "var", "g", "sv", "vr", "y", "vt", "va", "x", "l", "vc"], "dp": ["dk", "dm", "da", "dx", "dr", "cd", "di", "dd", "ph", "pm", "dt", "dq", "dep", "tp", "np", "db", "tap", "bp", "pd", "dj", "df", "dc", "pa", "ds", "deb", "dl", "dh", "pp", "cp"], "k": ["mk", "m", "h", "j", "sk", "e", "ke", "ik", "ko", "q", "kn", "r", "z", "u", "kr", "t", "kh", "ak", "ch", "ck", "uk", "kj", "p", "c", "ka", "kl", "ks", "g", "d", "K", "kk", "kw", "y", "max", "x", "ek", "l", "tk", "ki"], "a": ["act", "aaa", "sta", "la", "apa", "oa", "j", "s", "sa", "aq", "f", "da", " an", "am", "r", "z", "ed", "era", "t", "at", "A", "area", "att", "ab", " pa", "ca", "off", "ma", "app", "ac", " da", "ba", "aka", "ea", "ao", "c", "p", "ta", "an", " ta", "aa", "d", "ia", "aj", "ar", "g", "ata", "ga", "eta", "as", "cca", " it", "alpha", "ra", "pa", " fa", "na", "val", "va", "o", "x", "l", "ae", "fa"], "b": ["B", "eb", "ob", "j", "bo", "br", "bl", "bi", "f", "e", "it", "bf", "r", "be", "by", "z", "fb", "u", "bs", "bc", "t", "blue", "ab", "ib", "cb", "gb", "bis", "beta", "bg", "bb", "back", "p", "ba", "c", "db", "rb", "nb", "g", "mb", "d", "bar", "bu", "base", "bt", "bh", "y", "x", "l", "wb", "erb"], "sc": ["tch", "system", "cc", "cle", "tc", "ss", "cr", "rc", "capt", "pb", "cl", "sb", "bc", "cs", "ec", "esc", "sync", "Sc", "ctl", "exp", "ch", "pc", "osc", "isc", "exec", "cu", "sys", "spec", "mc", "scl", "c", "nc", "sh", "SC", "gc", "ssl", "ctx", "st", "sv", "scope", "nl", "lc", "scan", "sp", "asc", "conv", "ctrl", "sch", "sec", "usc", "syn", "sq"], "n": ["ng", "m", "j", "nan", "nn", "net", "ln", "t", "nr", "ne", "mn", "on", "nm", "en", "nc", "np", "c", "N", "an", "nb", "nu", "no", "ns", "nl", "sn", "na", "o", "cn", "l", "nt"], "count": ["current", "check", "ct", "quiet", "flag", "ount", "test", "value", "cache", "number", "ctr", "cast", "cont", "result", "counter", "index", "list", "report", "acc", "c", "amount", "conf", "status", "score", "comment", "gc", "nb", "trace", "summary", "add", "total", "debug", "num", "const", "length", "Count", "ind", "id", "frequency", "call", "size", "stat", "sum", "batch", "found", "nt"], "i": ["ii", "phi", "m", "xi", "j", "sim", "multi", "init", "bi", "it", "hi", "in", "u", "ci", "set", "di", "I", "mi", "ie", "gi", "mu", "li", "ei", "si", "pi", "iq", "ti", "cli", "zi", "ui", "ini", "ai", "\u0438", "ic", "iu", "ix", "id", "ip", "y", "o", "x", "qi", "ki"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        FastScanner sc = new FastScanner(System.in);\\n        int n = sc.nextInt();\\n        int digit = String.valueOf(n).length();\\n        int count = 0;\\n        for (int i = 1; i < digit; i++) {\\n            if (i % 2 == 1) {\\n                int ten = 1;\\n                for (int j = 1; j < i; j++) {\\n                    ten *= 10;\\n                }\\n                count += 9 * ten;\\n            }\\n        }\\n        if (digit % 2 == 1) {\\n            int ten = 1;\\n            for (int i = 1; i < digit; i++) {\\n                ten *= 10;\\n            }\\n\\n            count += ((n / ten - 1) * ten) + n % ten + 1;\\n        }\\n\\n        System.out.println(count);\\n    }\\n\\n\\n    static class FastScanner {\\n        private BufferedReader reader;\\n        private StringTokenizer tokenizer;\\n\\n        public FastScanner(InputStream in) {\\n            reader = new BufferedReader(new InputStreamReader(in));\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public String nextLine() {\\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    return reader.readLine();\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n\\n            return tokenizer.nextToken(\"\\n\");\\n        }\\n\\n        public long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n\\n        public long[] nextLongArray(int n) {\\n            long[] a = new long[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = nextLong();\\n            return a;\\n        }\\n    }\\n}", "target": "135", "substitutes": {"sc": ["out", "cc", "tc", "cr", "ss", "rc", "r", "cl", "sb", "bc", "cs", "sm", "ec", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ner", "mc", "scl", "nc", "c", "SC", "gc", "st", "src", "sv", "nl", "lc", "sp", "asc", "conv", "sch", "sec", "usc", "Sync", "sq"], "n": ["ng", "m", "h", "b", "s", "nan", "e", "nn", "number", "q", "r", "z", "ln", "u", "t", "k", "ne", "mn", "on", "en", "p", "c", "nc", "np", "gn", "len", "N", "nb", "g", "d", "v", "nu", "w", "no", "num", "ns", "nl", "sn", "na", "y", "o", "x", "size", "cn", "dn", "l", "nt"], "digit": ["bit", "nine", "got", "channel", "dimension", "letter", "cat", "it", "da", "char", "number", "ln", "ter", "unit", "digital", "t", "format", "dec", "dt", "th", "rand", "character", "ne", "prime", "result", "dig", "significant", "proc", "dependent", "date", "p", "oct", "latest", "c", "N", "inc", "iter", "data", "d", "v", "nu", "total", "debug", "multiple", "step", "num", "display", "integer", "day", "div", "ind", "pattern", "unsigned", "figure", "nil", "valid", "position", "ion", "nie"], "count": ["month", "message", "check", "page", "ount", "test", "cat", "cache", "number", "z", "t", "cont", "set", "result", "counter", "index", "zero", "list", "report", "next", "c", "code", "amount", "comment", "draw", "nb", "total", "all", "num", "weight", "const", "length", "Count", "common", "cond", "now", "table", "call", "max", "size", "sum", "reset", "batch", "find", "found", "nt"], "i": ["ji", "hi", "q", "iti", "ci", "mi", "li", "iq", "v", "ij", "ui", "ini", "ai", "us", "integer", "ix", "ion", "m", "multi", "e", "bi", "f", "iy", "at", "ei", "c", "print", "pi", "cli", "zi", "id", "y", "uri", "im", "l", "ami", "ki", "ii", "um", "inter", "ri", "fi", "init", "fire", "di", "k", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "itime", "ind", "to", "ip", "o", "PI", "ori", "qi", "phi", "b", "xi", "me", "sim", "s", "it", "ims", "u", "iii", "t", "I", "this", "ie", "p", "iter", "ic", "iu", "is", "x", "oi"], "ten": ["vale", "password", "tan", "test", "eight", "token", "five", "wt", "sen", "pn", "beat", "forth", "prime", "zero", "port", "scale", "von", "tier", "const", "integer", "second", "four", "ver", "nine", "username", "blank", "mont", "mint", "ter", "goal", "six", "taker", "foundation", "width", "beta", "next", "currency", "foot", "zel", "tap", "three", "rent", "ted", "div", "tr", "translation", "tall", "duration", "important", "term", "mon", "floor", "ffe", "fort", "tile", "Ten", "font", "ven", "pen", "pour", "pent", "leen", "num", "pack", "common", "deb", "sten", "te", "tu", "silver", "ele", "tie", "span", "tin", "white", "two", "normal", "quart"], "j": ["oj", "b", "m", "ja", "e", "ji", "jj", "bi", "jc", "it", "q", "r", "z", "uj", "bj", "ph", "k", "jump", "son", "ie", "json", "je", "pr", "kj", "er", "li", "jl", "obj", "jo", "g", "v", "aj", "ij", "jp", "dj", "jas", "us", "tr", "js", "y", "x", "ion", "job", "ge"], "reader": ["rd", "rs", "console", "rx", "lr", "redo", "context", "rar", "rc", "r", "dr", "rl", "driver", "file", "wrapper", "window", "row", "iterator", "handler", "read", "resource", "this", "timer", "rr", "buffer", "client", "er", "ner", "ro", "parser", "via", "inner", "rer", "iter", "data", "loader", "input", "worker", "Reader", "runner", "stream", "fr", "owner", "builder", "writer", "upper", "mr"], "tokenizer": [" tokenzer", "optimifer", "okenizer", "tokenization", "Tokenizer", "Tokenzer", "Tokeniser", "statization", "tokenater", "terminater", "tokenize", "characterener", "okeniser", " tokenifier", "operatorifier", "okenifier", "columnifer", "statizer", " tokeninger", "okenifer", "terminifer", "tokeniser", " tokenifer", "statifier", "terminizer", "okenener", "normalener", "termininger", "columniter", "tokenler", " tokenization", " tokeniter", "serialifier", " tokener", "okeninger", "normalize", " tokenger", "tokenzer", "serialer", "serialener", "okener", "terminger", "okeniter", "terminener", "normaler", "characterization", "normalifier", "columnizer", " tokeniser", "okenater", "okenger", "operatorizer", "tokenifier", "operatorize", " tokenize", " tokenener", "tokenener", "characterizer", "wordifier", "okenzer", "wordener", "normaller", "optimener", "tokenifer", "Tokenize", "tokeniter", "columnization", "okenize", "okenler", "statener", "wordizer", " tokenler", "operatorener", "tokener", "tokenger", "optimater", "okenization", "serializer", "tokeninger", "normalizer", "wordize", "characterifier", "optimizer"], "in": ["out", "m", "In", "inf", "con", "s", "init", "doc", "it", "f", "r", "file", "user", "t", "IN", "std", "from", "line", "log", "p", "null", "c", "ins", "inner", "conf", "inn", "inc", "data", "cin", "io", "input", "bin", "ini", "ic", "or", "stream", "l", "id", "din", "o", "is", "source", "err", "rt"], "a": ["aaa", "b", "m", "sta", "apa", "la", "oa", "sa", "da", "ya", "am", "wa", "A", "au", "area", "ua", "ab", "ca", "qa", "ada", "ma", "ac", "ba", "aka", "ao", "ea", "xa", "c", "ta", "an", "aa", "ia", "ava", "ata", "ga", "as", "aux", "pa", "na", "y", "va", "o", "ae", "fa"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    Scanner stdin = new Scanner(System.in);\\n    int n = stdin.nextInt();\\n    int min = 0;\\n    int max = 0;\\n    long sum = 0;\\n\\n    for (int i = 0; i < n; i++) {\\n      int m = stdin.nextInt();\\n      sum += m;\\n\\n      if (i == 0) {\\n        min = m;\\n        max = m;\\n      } else {\\n        min = Math.min(min, m);\\n        max = Math.max(max, m);\\n      }\\n    }\\n\\n    System.out.printf(\"%d %d %d%n\", min, max, sum);\\n  }\\n\\n}", "target": "21", "substitutes": {"stdin": [" stdinn", "stdcin", " stdout", "sysin", " stddin", " STDout", " STDinn", " STDin", "stdi", "randdin", "randin", "STDinn", "standardcin", "stdinn", "signdin", "signin", "stddin", "signout", "sysinit", "signi", "standardinit", " stdi", "sysout", "randi", " stdIn", "stdIn", "syscin", "standardin", " stdcin", "STDout", " stdinit", " STDIn", "standardout", "randout", "stdout", "STDin", "stdinit", "STDIn"], "n": ["ng", "norm", "nan", "nn", "net", "number", "ln", "t", "ne", "mn", "network", "on", "nm", "en", "p", "nc", "np", "nor", "N", "nb", "d", "no", "nu", "v", "num", "ns", "nl", "nw", "sn", "na", "x", "cn", "l", "nt"], "min": ["act", "current", "lower", "low", "floor", "minimum", "init", "test", "admin", "mel", "loc", "in", "none", "net", "mins", "mid", "MIN", "Min", "sort", "only", "sun", "rel", "emin", "pos", "parent", "diff", "mi", "art", "med", "rand", "start", "pre", "first", "from", "next", "len", "sub", "inner", "local", "st", "major", "my", "delay", "mine", "left", "shift", "search", "small", "last", "dist", "begin", "div", "lt", "cmp", "minute", "mean", "partial", "just", "stat", "initial", "del", "amin", "master", "mod"], "max": ["out", "h", "cover", "pop", "r", "history", "rand", "plus", "Max", "cut", "scale", "v", "res", "all", "crop", "gt", "can", "net", "top", "right", "ax", "recent", "high", "c", "maximum", "root", "and", "total", "dot", "az", "chain", "view", "upper", "mod", "range", "chest", "inter", "MAX", "full", "mx", "window", "k", "exp", "med", "up", "ref", "add", "rank", "na", "to", "rest", "size", "grow", "master", "act", "pad", "after", "wrap", "parent", "height", "ca", "ma", "p", "ex", "end", "step", "co", "last", "over", "x"], "sum": ["sam", "out", "um", "sat", "sta", "norm", "msg", "tu", "sim", "mix", "sa", "prof", "mass", "ass", "temp", "dev", "med", "loss", "zero", "mu", "vol", "acc", "si", " SUM", "pub", "status", "su", " summed", "count", "cum", "summary", "cal", "v", "add", "total", "ms", "SU", "num", "weight", "us", "average", "alpha", "Sum", "mary", "mean", "size", "mess", "hash", "frac", "mod"], "i": ["ii", "phi", "gu", "me", "xi", "j", "sim", "multi", "init", "bi", "it", "hi", "q", "in", "z", "ci", "di", "I", "mi", "ie", "gi", "index", "li", "ei", "si", "pi", "iq", "iter", "ti", "g", "v", "io", "cli", "ui", "ms", "ini", "ai", "ic", "us", "\u0438", "iu", "ix", "ind", "id", "ip", "y", "o", "is", "x", "im", "l", "qi"], "m": ["h", "me", "um", "j", "vm", "f", "dm", "am", "z", "mx", "om", "cm", "sm", "t", "km", "hm", "k", "mi", "mn", "md", "perm", "met", "ma", "mu", "mc", "p", "c", "gm", "g", "d", "v", "mem", "mt", "ms", "arm", "tm", "M", "mm", "o", "mac", "lem", "em", "l", "mr", "mod"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\ttry {\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(\\n\t\t\t\t\tSystem.in));\\n\\n\t\t\tString[] strs = (String[]) br.readLine().split(\" \");\\n\t\t\tint num1 = Integer.parseInt(strs[0]);\\n\t\t\tint num2 = Integer.parseInt(strs[1]);\\n\t\t\tint num3 = Integer.parseInt(strs[2]);\\n\\n\t\t\tif (num1 < num2 && num2< num3) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t}\\n\t\t} catch (Exception e) {\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t}\\n\\n}", "target": "168", "substitutes": {"br": ["bridge", "eb", "lr", "Br", "bsp", "bl", "str", "shr", "cr", "dr", "be", "ctr", "kr", "bs", "bc", "buf", "pl", "ch", "pr", "bd", "hr", "rb", "bp", "bro", "jp", "gr", "vr", "bt", "yr", "div", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "nr", "mr", "BR"], "strs": ["stjs", "intks", "strps", "Strs", "stms", "arrs", "comms", "arrls", "trgs", "trls", "strrs", "stringses", "strls", " strgs", "stringjs", " strses", "commps", "str1", "strts", "strses", "strjs", "arrgs", "trs", "arrts", "trts", " str1", "comm1", " strms", "strings", "stks", " strps", "strms", "stringms", "stses", "stringks", " strls", "intjs", "sts", "Str1", " strts", "strks", "ints", "strgs", "intrs", "Strps", "stringrs"], "num1": ["um0", "NumMap", "number0", "mon2", "mon01", "num01", " num01", "Num01", "number1", "umMap", " num0", "Num1", "number2", "mon1", "um1", "number01", " numMap", "Num0", "num0", "um01", "numMap", "mon0"], "num2": ["NUM02", "NUM4", "number42", "num12", "NUM1", "number4", " num42", "num42", "um3", "number3", "number1", "num4", "um02", "number12", "number2", "um1", "NUM2", " num4", "um2", " num02", "number02", " num12", "um12", "um42", "num02"], "num3": ["numthree", "numberthree", "um3", "number3", "umthree", "number1", "resultthree", "proc03", " numthree", "Num03", "num33", "proc3", "procthree", "um03", "num03", "Numthree", "um33", "result1", "Num3", "result3", "Num33", "proc33"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString str = sc.next();\\n\t\tint n = str.length();\\n\t\tString s1 = str.substring(0, (n - 1) / 2);\\n\t\tString s2 = str.substring((n + 3) / 2 - 1, n);\\n\t\t//System.out.println(s1);\\n\t\t//System.out.println(s2);\\n\t\tchar[] a = s1.toCharArray();\\n\t\tchar[] b = s2.toCharArray();\\n\t\tint a1 = 0;\\n\t\tint b1 = 0;//\u56de\u6587\u306b\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u2460\u5897\u3084\u3059\u21920\u306a\u3089\u3070\u56de\u6587\\n\t\tfor (int i = 0; i < (n - 1) / 4; i++) {\\n\t\t\tif (a[i] != a[(n - 1) / 2 - 1 - i]) {\\n\t\t\t\ta1++;\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = 0; i < (n - 1) / 4; i++) {\\n\t\t\tif (b[i] != b[(n - 1) / 2 - 1 - i]) {\\n\t\t\t\tb1++;\\n\t\t\t}\\n\t\t}\\n\t\tchar[] c = str.toCharArray();\\n\t\tint c1 = 0;\\n\t\tfor (int i = 0; i < (n - 1) / 2; i++) {\\n\\n\t\t\tif (c[i] != c[n - 1 - i]) {\\n\t\t\t\tc1++;\\n\t\t\t}\\n\t\t}\\n\t\tif (a1 == 0 && b1 == 0 && c1 == 0) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t}\\n\\n}\\n", "target": "123", "substitutes": {"sc": ["ng", "cc", "cle", "tc", "cr", "ss", "ko", "cl", "bc", "cs", "desc", "ok", "ec", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "uc", "sys", "ner", "mc", "sub", "nc", "c", "sci", "SC", "gc", "sv", "scan", "lc", "sp", "sel", "cmp", "ser", "asc", "conv", "sch", "sec", "anc", "syn", "sq"], "str": ["out", "m", "msg", "string", "ct", "s", "j", "rec", "STR", "seq", "char", "it", "f", "br", "url", "r", "z", "arr", "dr", "ctr", "Str", "t", "coll", "dec", "exp", "ch", "pt", "enc", "pr", "cur", "next", "vol", "p", "c", "print", "obj", "comm", "data", "txt", "g", "st", "v", "name", "input", "jp", "sl", "gr", "text", "div", "dat", "tr", "sp", "fr", "elt", "wr", "err", "stable"], "n": ["ng", "m", "h", "norm", "j", "s", "i", "ul", "nn", "number", "net", "r", "z", "ln", "nd", "t", "k", "ne", "mn", "ll", "ni", "nm", "en", "len", "nc", "np", "c", "p", "gn", "N", "nb", "g", "d", "nu", "a", "all", " N", "num", "ns", "nl", "sn", "nw", "na", "o", "dn", "cn", "l", "nt"], "s1": ["ts0", "ts1", "s3", "ts3", "s0", "ats1", "sOne", "atsOne", "ats3", "SOne", "ats0", "tsOne", "S0", "S1", "S3"], "s2": ["es4", "ts2", "s3", "ts02", "s02", "es02", "S4", "es2", "es3", "S2", "s4", "ts4", "ts3", "S02", "S3"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String args[]) {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = Integer.parseInt(sc.next());\\n        int k = Integer.parseInt(sc.next());\\n        \\n        int counter = 0;\\n        int tmp = n;\\n        while(tmp > 0) {\\n            tmp = tmp / k;\\n            ++counter;\\n        }\\n        \\n        System.out.println(counter);\\n        \\n    }\\n}", "target": "219", "substitutes": {"sc": [" Sc", "tch", "cc", "cle", "tc", "cr", "rc", "cl", "sb", "bc", "cs", "desc", "cont", "esc", "Sc", "ctl", "ch", "osc", "pc", "isc", "uc", "sys", "mc", "acc", "c", "nc", "scl", "SC", "gc", "inc", "sv", "scrib", "dc", "lc", "scan", "sp", "sel", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "n": ["out", "m", "h", "j", "s", "i", "nn", "q", "r", "ln", "t", "on", "nm", "p", "en", "c", "nc", "np", "N", "nb", "g", "d", "v", "nu", "a", "num", "ns", "nl", "l", "sn", "o", "x", "cn", "nr", "nt"], "k": ["mk", "m", "j", "dk", "sk", "ke", "ko", "ik", "q", "r", "z", "kr", "km", "t", "ok", "kb", "kind", "ch", "ak", "ck", "kid", "p", "ks", "kl", "ka", "c", "w", "g", "v", "K", "kk", "kan", "kw", "tk", "kernel", "kg", "ek", "ku", "ki"], "counter": ["rex", "current", "console", "term", "inter", "system", "card", "sequence", "number", "TER", "ctr", "cue", "Counter", "ter", "controller", "time", "ier", "outer", "book", "clock", "timer", "index", "sys", "finder", "external", "zero", "entry", "processor", "cycle", "currency", "c", "walker", "inner", "random", "count", "comment", "trace", "nb", "created", "total", "pointer", "num", "ounter", "vector", "common", "cmp", "collection", "key", "sum", "nr", "cookie", "nt"], "tmp": ["mk", "offset", "m", "term", "msg", "inter", "pad", "out", "copy", "tc", "top", "ctr", "cv", "temp", "stuff", "t", "emp", "cb", "zero", "sys", "xy", "tp", "p", "np", "acc", "ptr", "prefix", "mp", "obj", "mmm", "count", "nb", "ctx", "buff", "txt", "mb", "total", "etc", "eta", "num", "tm", "timeout", "sp", "snap", "var", "cmp", "unc", "tt", "nom", "nr", "cp", "clip", "nt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int[] h = new int[N];\\n    int count =0;\\n    for (int i =0; i<N; i++) {\\n      h[i] = sc.nextInt();\\n    }\\n    \\n    int a =0; int b=0;\\n    L:while (a<= N-1 && b<= N-1) {\\n      if (h[a] ==0) {\\n        a++;\\n        continue;\\n      }\\n      //a\u3092\u6c7a\u5b9a\\n      b = a;\\n      while (b <= N-1) {\\n        if (h[b] !=0 && b != N -1) {\\n          b++;\\n          continue;\\n        } else {\\n          for (int i =a; i<=b; i++) {\\n            h[i]--;\\n            if (h[i] <0) {\\n              h[i] =0;\\n            }\\n          }\\n        }\\n        count++;\\n        continue L;\\n      }\\n    }\\n    System.out.println(count);\\n  }\\n}", "target": "77", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "rc", "capt", "pb", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "inc", "txt", "fc", "sv", "nl", "dc", "lc", "scan", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "sq"], "N": ["B", "NH", "Node", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "AN", "NS", "I", "GN", "D", "NO", "A", "NV", "CNN", "NP", "NC", "NB", "L", "ND", "V", "NOR", "TN", "NM", "H", "NT", "NA", "T", "K", "J", "Sn", "NE", "Ne", "n", "No", "M", "R", "C", "Z"], "h": ["hs", "m", "it", "uh", "hi", "q", "dr", "oh", "hm", "ph", "history", "hd", "k", "th", "kh", "ah", "ch", "hh", "he", "has", "hw", "hz", "sh", "H", "p", "hr", "rh", "ih", "ht", "v", "ha", "hl", "n", "bh", "hp", "hex", "ho", "dh", "pp", "hash"], "count": ["cap", "current", "flag", "ount", "cache", "number", "ctr", "set", "start", "counter", "index", "list", "c", "code", "amount", "ptr", "nb", "total", "num", "type", "last", "length", "n", "Count", "max", "size", "C", "col"], "i": ["ii", "phi", "m", "gu", "me", "j", "sim", "multi", "ri", "fi", "it", "bi", "init", "ji", "hi", "u", "ci", "di", "I", "mi", "ie", "info", "gi", "client", "mu", "li", "si", "pi", "iter", "ti", "v", "io", "cli", "ui", "ms", "ini", "ai", "ic", "us", "\u0438", "ish", "iu", "n", "ix", "ind", "ip", "y", "o", "is", "PI", "x", "im", "oi", "uri", "l", "qi", "ki"], "a": ["act", "aaa", "sta", "la", "oa", "ap", "sa", "eas", "aq", "da", "sha", "am", "abs", "era", "at", "el", "A", "au", "ast", "area", "ab", "ca", "qa", "another", "ma", "app", "ac", "ao", "ba", "ea", "c", "ta", "an", "aa", "ia", "aj", "ace", "ata", "all", "ai", "as", "ee", "alpha", "n", "pa", "na", "va", "o", "ach", "ae", "ache"], "b": ["B", "m", "eb", "ob", "j", "e", "bi", "f", "z", "be", "u", "fb", "bc", "bs", "t", "k", "ab", "ib", "emb", "bis", "bb", "p", "ba", "c", "rb", "nb", "g", "d", "v", "mb", "n", "bh", "y", "l", "wb"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\npublic class Main{\\n\tpublic static void main (String[] args) throws java.lang.Exception{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t    int n = Integer.parseInt(br.readLine());\\n\t    long money = 100000;\\n\t    while(n!=0){\\n\t        money *= 1.05;\\n\t        if(money%1000>0){\\n\t        \tmoney+=1000;\\n\t        }\\n\t        money /= 1000;\\n\t        money *= 1000;\\n\t        --n;\\n\t    }\\n        System.out.println(money);\\n\t}\\n}", "target": "173", "substitutes": {"br": ["bridge", "b", "lr", "Br", "bl", "str", "cr", "ocr", "r", "dr", "be", "arr", "ger", "kr", "bs", "buf", "ch", "pr", "bd", "bm", "hr", "rb", "sr", "bp", "bro", "boot", "gr", "vr", "bt", "div", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "nr", "mr", "BR"], "n": ["ng", "m", "b", "j", "s", "nan", "i", "nn", "ren", "number", "z", "ln", "u", "t", "ne", "mn", "p", "len", "nc", "nor", "np", "note", "c", "N", "count", "nos", "le", "nb", "w", "d", "no", "nu", "total", "v", "all", " N", "num", "ns", "nl", "sn", "nw", "tn", "na", "y", "o", "size", "x", "l", "nie", "nt"], "money": ["Bitcoin", "message", "bill", "m", "fee", "cash", "multi", "mon", "euro", "value", "payment", "number", "quote", "coin", "hello", "time", "transfer", "iban", " Money", "human", "NO", "blue", "balance", "everything", "price", "cho", "go", "dollar", "soc", "zero", "counter", "example", "fine", "million", "margin", "amount", "currency", "credit", "draw", "uno", "serial", "normal", "total", "micro", "vote", "scope", "integer", "mini", "very", "oney", "ONEY", "machine", "nom", "one", "Money", "quant"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int N = scan.nextInt();\\n        List<String> list = new ArrayList<>();\\n        for (int i = 0; i < N; i++) list.add(scan.next());\\n        Collections.sort(list);\\n        int cnt = 0, now = 0;\\n        String before = \"\";\\n        for (int i = 0; i < N; i++) {\\n            if (!before.equals(list.get(i))) {\\n                cnt = Math.max(cnt, now);\\n                now = 1;\\n            } else {\\n                now++;\\n                cnt = Math.max(cnt, now);\\n            }\\n            before = list.get(i);\\n        }\\n        now = 0;\\n        before = \"\";\\n        for (int i = 0; i < N; i++) {\\n            if (!before.equals(list.get(i))) {\\n                now = 1;\\n                if (now == cnt) System.out.println(list.get(i));\\n            } else {\\n                now++;\\n                if (now == cnt) System.out.println(list.get(i));\\n            }\\n            before = list.get(i);\\n        }\\n    }\\n}", "target": "235", "substitutes": {"scan": ["store", "out", "san", "m", "check", "system", "can", "Scan", "ann", "pass", "link", "in", "r", "by", "re", "scroll", "sm", "set", "row", "read", "sync", "connect", "se", " Scan", "ch", "sys", "reach", "sc", "ner", "report", "query", "sur", "send", "gate", "parse", "an", "get", "sin", "sr", "scale", "io", "src", "auto", "spin", "sv", "search", "trans", "n", "ser", "is", "stat", "sum", "find"], "N": ["Node", "P", "NN", "Ns", "NI", "Num", "S", "NR", "SN", "NL", "AN", "NS", "I", "D", "GN", "NO", "NP", "NC", "NB", "L", "ALL", "ND", "V", "TN", "NG", "NM", "NT", "NA", "NOTE", "T", "K", "J", "FN", "Ne", "n", "No", "M", "C", "Z", "O"], "list": ["range", "queue", "out", "current", "show", "the", "sequence", "test", "copy", "cache", "details", "ml", "file", "alist", "dict", "set", "pool", "format", "cont", "detail", "sync", "filter", "this", "info", "lat", "L", "ll", "pre", "LIST", "li", "load", "ist", "null", "log", "form", "local", "data", "array", "get", "st", "acl", "add", "v", "shape", "block", "left", "all", "batch", "chain", "layout", "length", "n", "tree", "map", "word", "table", "dl", "to", "def", "collection", "ls", "old", "l", "lists", "listed", "nt"], "i": ["ji", "hi", "q", "iti", "ci", "mi", "php", "li", "iq", "name", "my", "ij", "ui", "ini", "ai", "them", "us", "err", "ix", "inx", "ion", "m", "multi", "ies", "e", "bi", "f", "ik", "iy", "ei", "print", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "ri", "init", "di", "info", "gi", "si", "ski", "ti", "io", "iri", "\u0438", "ind", "MI", "ip", "PI", "ori", "qi", "phi", "gu", "me", "xi", "j", "sim", "it", "ims", "u", "iii", "I", "ie", "client", "ex", "g", "ia", "ic", "iu", "ios", "base", "is", "oi", "batch"], "cnt": ["Ctr", "Cdef", "pcrowd", "ctnz", " crowd", "cnc", "scnt", "lcdef", " cont", " cld", " Cld", "Cnd", "Cct", "crowd", "ctr", "cld", "csNT", "cct", "pcct", "mcnc", "cNT", "Cnc", "cont", "cdef", " Crowd", "cunt", "ncct", "ncnt", "conNT", "cuNT", "pcnt", "scct", "ctNT", " cnc", "pcld", "mcnt", " Cct", "Cnt", "ctnc", "cunz", "csnc", "count", "mcont", "connt", "connc", "csdef", " Cnt", "sctr", "lcNT", "CNT", "scNT", "csont", "csount", "cunc", " count", "conct", "cnz", "mcount", "Count", "ncnd", " ctr", "cnd", " cNT", "csnt", "lcount", "lcnt", "ncnc", " cct", " cnd", "ctnt", " cnz"], "now": ["test", "wait", "cur", "zero", "since", "ow", "sw", "then", "w", "ack", "no", "down", "process", "wp", "non", "mm", "NOW", "stage", "with", "age", "where", "always", "hold", "time", "node", "ew", "result", "next", "and", "ww", "other", "st", "percent", "gr", "today", "cmp", "post", " NOW", "we", "store", "save", "current", "tmp", "full", "aw", "window", "hour", "row", "force", "up", "start", "Now", "gc", "draw", "aj", "ws", "ess", "yes", "sp", "default", "rest", "pres", "still", "pg", "done", "after", "when", "wa", "set", "this", "never", "first", "off", "here", "ord", "raw", "currently", "shift", "ready", "old"], "before": ["prev", "string", "system", "tmp", "init", "after", "command", "dirty", "needed", " BEFORE", "pair", "right", "set", "format", "behind", "force", "star", "holder", "info", "this", "instance", "function", "start", "pre", "first", "from", "back", "Before", "here", "front", "null", " prep", "since", " head", "prefix", " Before", "comment", "local", "and", "then", "array", "form", "name", "under", "input", "above", "are", "left", "self", "last", "fore", " after", "table", "instead", "ready", " prev", "field", "just", "old", "like", "head"]}}
{"code": "import java.io.*;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){ \\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString str = sc.nextLine();\\n\t\tchar[] let = str.toCharArray();\\n\t\tfor (int i = 0 ; i<let.length ; i ++ ) {\\n\t\t\tif (Character.isUpperCase(let[i])) {\\n\t\t\t\tlet[i] = Character.toLowerCase(let[i]);\\n\t\t\t}else{\\n\t\t\t\tlet[i] = Character.toUpperCase(let[i]);\\n\t\t\t}\\n\t\t\tSystem.out.print(let[i]);\\n\t\t}\\n\t\tSystem.out.println(\"\");\\n\t}\\n}", "target": "192", "substitutes": {"sc": ["system", "cc", "cle", "cr", "ss", "cl", "bc", "cs", "desc", "sac", "ec", "esc", "sync", "Sc", "dec", "ch", "osc", "pc", "isc", "soc", "sys", "spec", "mc", "scl", "c", "nc", "sh", "SC", "gc", "sv", "screen", "scan", "lc", "sp", "sel", "ser", "asc", "conv", "sch", "sec", "anc", "usc", "syn", "sq"], "str": ["out", "string", "s", "j", "STR", "br", "char", "f", "dr", "r", "z", "arr", "Str", "t", "coll", "so", "ch", "sys", "list", "vol", "oct", "obj", "data", "txt", "iter", "g", "st", "name", "sl", "gr", "text", "div", "dat", "n", "tr", "sp", "tree", "fr", "nt"], "let": ["rot", "save", "bat", "out", "gt", "ble", "char", "it", "ele", "file", "t", "el", "set", "ld", "split", "wt", "art", "pl", "ext", "lat", "pt", "Let", "lets", "variable", "tile", "list", "back", "part", "oct", "vert", "gen", "LET", "lit", "var", "le", "pat", "shot", "cut", "lex", "ant", "olt", "lay", "step", "vet", "trans", "et", "alt", "tree", "sel", "lt", "leaf", "ver", "elt", "ent", "ell", "place", "pet", "stat", "del", "l", "tab", "sat", "ut", "lett"], "i": ["ji", "hi", "q", "wait", "ci", "mi", "list", "li", "remote", "no", "my", "ij", "ui", "all", "ini", "ai", "us", "ix", "m", "multi", "bi", "json", "ei", "status", "pi", "a", "cli", "zi", "chain", "n", "id", "y", "uri", "im", "ki", "ii", "ri", "eu", "init", "di", "info", "gi", "index", "vi", "ni", "si", "ti", "\u0438", "ind", "to", "ip", "o", "qi", "any", "phi", "gu", "xi", "me", "j", "it", "ims", "z", "u", "menu", "t", "I", "record", "ie", "p", "point", "ex", "g", "batch", "ic", "used", "iu", "is", "key", "x", "err"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        FastScanner sc = new FastScanner(System.in);\\n        int k = sc.nextInt();\\n        int s = sc.nextInt();\\n        long ans = 0;\\n        for(int i = 0; i <= k; i++){\\n            for(int j = 0; j <= k; j++){\\n                int z = s-i-j;\\n                if(z >= 0 && z <= k){\\n                    ans++;\\n                }\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n    \\n    public static int beamSearch(long[] arr, long target){\\n        int left = 0;\\n        int right = arr.length;\\n        while(right-left > 1){\\n            int mid = (left+right)/2;\\n            if(arr[mid] > target){\\n                right = mid;\\n            }else{\\n                left = mid;\\n            }\\n        }\\n        return left;\\n    }\\n}\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    } \\n}\\n", "target": "29", "substitutes": {"sc": [" Sc", "rs", "cc", "tc", "ss", "cr", "rc", "cl", "sb", "bc", "cs", "esc", "sync", "Sc", "ctl", "isc", "pc", "osc", "ch", "sys", "ck", "mc", "scl", "nc", "c", "sh", "mp", "SC", "gc", "ssl", "ctx", "src", "sv", "nl", "lc", "sp", "asc", "ctrl", "sch", "sec", "sq"], "k": ["mk", "unk", "m", "dk", "sk", "e", "ke", "ik", "ko", "kn", "q", "kr", "km", "ok", "t", "kh", "ak", "ck", "kj", "kid", "p", "ks", "ka", "kl", "g", "v", "K", "kk", "kw", "tk", "kernel", "y", "key", "x", "ek", "l", "ku", "ki"], "s": ["rs", "b", "h", "m", "its", "ats", "e", "xs", "fs", "f", "ss", "q", "S", "sb", "cs", "sm", "t", "os", "gs", "p", "si", "ks", "c", "w", "sv", "ms", "ns", "ps", "js", "y", "ls", "ts", "is", "es", "l", "sq"], "ans": ["rs", "oss", "checks", "marks", "asts", "can", "ats", "rans", "ann", " spans", "ians", "lan", "vals", "span", "ens", " means", "cs", "os", "angs", "ops", "anes", "offs", "eds", "aps", "reads", "anks", "ks", "ins", "nz", "an", "lines", "ros", "ions", "ars", "ms", "ents", "flags", "ns", " scans", "ows", "ants", "ons", "ates", "ds", "arts", "ls", "ANS", "ints", "amps", "ations", "es"], "i": ["ii", "phi", "m", "um", "xi", "inter", "multi", "sim", "init", "bi", "ji", "it", "ik", "hi", "e", "q", "ims", "f", "u", "fire", "yi", "ci", "at", "di", "I", "t", "mi", "ie", "info", "gi", "li", "p", "ei", "si", "pi", "ex", "iq", "ti", "v", "io", "ij", "zi", "ui", "ini", "ai", "ic", "us", "\u0438", "itime", "iu", "ix", "ind", "id", "ip", "y", "o", "is", "x", "im", "oi", "l", "ami", "qi", "ki"], "j": ["oj", "b", "m", "ja", "br", "bo", "ji", "jj", "bi", "jc", "it", "q", "uj", "bj", "jump", "son", "ie", "json", "je", "pt", "ch", "pr", "kj", "li", "p", "c", "jl", "obj", "jo", "g", "v", "aj", "jp", "ij", "dj", "jas", "J", "ind", "js", "y", "o", "x", "l", "job", "ge"], "z": ["fl", "iaz", "uz", "q", "ez", "zen", "zx", "gz", "t", " Z", "ld", "tz", "exp", "zh", "cz", "iz", "hz", "c", "oz", "nz", "obj", "zz", "g", "d", "v", "zone", "zi", "az", "ze", "zy", "zip", "zer", "ix", "sd", "x", "zo", "Z", "te", "wx", "yz"], "arr": ["aaa", "rs", "rays", "arb", "img", "ear", "seq", "addr", "br", "bl", "str", "par", "r", "vals", "av", "dr", "dict", "buf", "coll", "rel", "ab", "pl", "stack", "repl", "ll", "list", "app", "sh", "ins", "db", "obj", "array", "ars", "ar", "ij", "Ar", "ARR", "gr", "Array", "dat", "map", "hist", "err", "fr", "tr", "ray", "elt", "expr", "alph", "batch", "arp", "stock"], "target": ["range", "current", "term", "wrong", "blank", "mask", "value", "test", "link", "top", "arget", "missing", "goal", "t", "rel", "padding", "jump", "Target", "node", "result", "start", "buffer", "stop", "match", "high", "score", "total", "type", "base", "kill", "id", "default", "mean", "mark", "max", "valid", "source", "find", "arg", "gt"], "left": ["offset", "m", "wrong", "low", "lower", "half", "lo", "full", "top", "loc", "min", "only", "set", "row", "cont", "lock", "rel", "this", "pl", "internal", "L", "Left", "start", "index", "from", "first", "off", "list", "back", "len", "next", "inner", "local", "le", "end", "no", "down", "shift", "open", "center", "last", "small", "length", "nl", "ind", "lt", "default", "id", "rest", "field", "max", "old", "x", "size", "initial", "l", "place"], "right": ["range", "rd", "third", "rx", "half", "after", "success", "full", "top", "r", "re", "reverse", "rw", "row", "history", "middle", "cross", "complete", "Right", "before", "med", "width", "start", "ax", "recent", "back", "random", "correct", "inner", "radius", "and", "then", "root", "role", "end", "res", "rew", "all", "rights", "shift", "last", "length", "west", "R", "ready", "rest", "upper", "max", "through", "red", "rem", "rt", "head"], "mid": ["medium", "mat", "month", "m", "pad", "lower", "mask", "pid", "mer", "half", "char", "wid", "rid", "hi", "ran", "lim", "nd", "uid", "min", "cd", "middle", "mi", "rand", "med", "mn", "grid", "Middle", "gray", "xy", "line", "part", "late", "dim", "my", "mt", "ms", "mad", "mouse", "bid", "mini", "ind", "id", "mm", "pard", "px", "Mid", "partial", "key", "mac", "max", "man", "mr"], "reader": ["rd", "rs", "rx", "ri", "lr", "redo", "ocr", "rc", "rar", "r", "rl", "dr", "peer", "driver", "file", "wrapper", "window", "row", "dra", "dd", "iterator", "lock", "read", "resource", "handler", "this", "rr", "buffer", "line", "er", "ner", "ro", "random", "parser", "inner", "ptr", "rer", "iter", "data", "roller", "loader", "arc", "input", "Reader", "open", "runner", "stream", "owner", "readable", "builder", "writer", "field", "source", "mr"], "tokenizer": [" tokenzer", "okenizer", "tokenization", "Tokenizer", "Tokenzer", "toolization", "Tokeniser", "optiminer", "okenizable", "tokenize", "okeniser", " tokenizing", " tokenifier", " tokenister", "tokenizing", "optimisher", "Tokenization", "recognisher", "okenifier", "Tokenister", "okenifer", "wordization", " tokenator", "tokeniser", "okenator", " tokenifer", " tokenizable", "recognizer", "okenener", "okenizing", "characterifer", "wordizable", " tokenization", "Tokenifier", " tokener", "wordisher", "tokenizable", "characterizable", "recogniner", " tokenger", "tokenzer", "okener", "okenister", "okeniner", "toolizable", "Tokener", " tokeniser", "okenger", "toolisher", "tokenifier", "toolize", " tokenize", "Tokenener", "tokeniner", " tokenener", "tokenener", "characterizer", "okenzer", "tokenisher", "tokenifer", "optimization", "tooler", "toolizer", "okenize", "wordizer", "recognization", "tokenister", "tokener", "tokenger", "okenisher", "okenization", "characterizing", "Tokenger", "Tokenator", "optimizer", "tokenator"], "in": ["out", "inf", "In", "m", "con", "init", "it", "f", "net", "r", "file", "cont", "IN", "info", "on", "from", "line", "log", "null", "p", "c", "ins", "conf", "inner", "inn", "inc", "cin", "io", "ar", "input", "bin", "ini", "or", "stream", "l", "id", "din", "o", "is", "source", "err", "rt"], "n": ["m", "h", "b", "nan", "it", "nn", "q", "fn", "r", "u", "t", "ne", "ni", "nat", "nm", "p", "c", "nc", "np", "ot", "N", "count", "an", "nb", "g", "d", "v", "w", "no", "nu", "name", "names", "ic", "ns", "num", "nl", "sn", "na", "y", "o", "x", "l", "nt"], "a": ["aaa", "act", "b", "m", "sta", "apa", "la", "oa", "ap", "sa", "da", "ya", "am", "A", "au", "area", "ab", "ca", "ada", "ma", "ac", "p", "ba", "ao", "aka", "xa", "ea", "c", "an", "aa", "d", "ia", "v", "ava", "ata", "ga", "as", "aux", "pa", "na", "o", "ana", "l", "ae", "fa"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u5165\u529b\\n            int n = Integer.parseInt(in.next());\\n            int h[] = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                h[i] = Integer.parseInt(in.next());\\n            }\\n            // \u6700\u521d\u306e\u65c5\u9928\u306f\u5fc5\u305a\u898b\u3048\u308b\u306e\u30671\\n            int ans = 1;\\n\\n            for (int i = 1; i < n; i++) {\\n                int cnt = 0;\\n                for (int j = 0; j <= i - 1; j++) {\\n                    if (h[i] >= h[j]) ++cnt;\\n                }\\n                if (cnt >= i) ans++;\\n            }\\n            // \u51fa\u529b\\n            out.println(ans);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "7", "substitutes": {"inputStream": ["importFile", "outputWindow", "inputFile", " inputView", "outputSteam", "importWindow", "inputSteam", " inputSteam", "inputstream", "sourceSteam", " inputWindow", "sourceStream", "outputFile", "outputView", "importSteam", "importStream", " inputFile", "inputView", "sourcestream", "sourceView", "outputstream", " inputstream", "inputWindow"], "outputStream": ["outputWriter", "topWriter", "topSteam", "connectionStream", "topStream", "thisStream", "thisScreen", "thisForm", "topSet", " outputSteam", "inputForm", "thisSteam", "outputSteam", "inputSteam", "connectionSteam", "connectionSet", " outputForm", "outputForm", "connectionWriter", "outputSet", " outputScreen", "outputScreen", "inputScreen", " outputSet", " outputWriter"], "in": ["current", "In", "inf", "isin", "s", "kin", "i", "it", "init", "run", "r", "file", "user", "by", "rin", "reader", "t", "pin", "IN", "this", "info", "on", "er", "gin", "null", "en", "ins", "inside", "inner", "local", "inn", "inc", "get", "cin", "sin", "st", "output", "io", "add", "input", "all", "bin", "ini", "ic", "thin", "or", "l", "ind", "id", "din", "is", "source", "login", "al", "err", "rt"], "out": ["check", "b", "msg", "s", "can", "aos", "it", " OUT", "cache", "run", "net", "r", "OUT", "temp", "t", "at", "ou", "outs", "good", "os", "outer", "info", "this", "ch", "result", "sys", "client", "Out", "log", "list", "report", "null", "p", "er", "c", "ins", "inner", "crit", "ex", "write", "gc", "w", "res", "no", "output", "io", "name", "OU", "all", "co", "chain", "gr", "n", "table", "to", "flush", "o", "writer", "x", "err", "stable", "gt", "nt"], "solver": ["solutions", " solution", "Solutions", "resolution", "solving", "insolver", "resolved", " solutions", "insolution", "solution", "unsolution", "insolving", "Solver", "resolving", "resolver", "ssolution", "solved", "ssolutions", "ssolver", " solve", "insolved", "Solve", "unsolving", "unsolved", "solve", "unsolver", "ssolve", "Solution"], "testNumber": [" solutionNum", " solutionNumbers", "testnumber", " attemptNum", " testNumbers", " solutionnumber", " solutionNumber", " attemptNumbers", "testNumbers", " attemptNumber", "testNum", " attemptnumber", " testnumber", " testNum"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tString string = sc.next();\\n\t\tchar c = ' ';\\n\t\tint ans = 0;\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tchar target = string.charAt(i);\\n\t\t\tif (c != target) {\\n\t\t\t\tans++;\\n\t\t\t\tc = target;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}", "target": "218", "substitutes": {"sc": ["ng", "system", "cc", "cle", "tc", "cr", "ss", "rc", "ko", "cl", "sb", "bc", "cs", "ec", "ok", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "nc", "sci", "SC", "gc", "inc", "sr", "sv", "nl", "lc", "scan", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NL", "NS", "I", "GN", "D", "NO", "NP", "NB", "L", "ND", "V", "TN", "NM", "Net", "NT", "NA", "K", "FN", "Sn", "Ne", "NE", "n", "EN", "No", "M", "R", "C", "Z", "Na"], "string": ["ring", "san", "system", "s", "password", "char", "sequence", "str", "command", "service", "value", "number", "file", "set", "this", "network", "group", "result", "buffer", "escape", "line", "list", "spec", "p", "null", "space", "prefix", "comment", "data", "shape", "filename", "st", "name", "strings", "ident", "type", "text", "object", "n", "word", "source", "description", "sample"], "c": ["b", "h", "m", "ct", "con", "category", "char", "cc", "cat", "e", "cache", "tc", "cr", "r", "cl", "ci", "cs", "t", "cont", "com", "cd", "ca", "ch", "cf", "cur", "cu", "ac", "crit", "gc", "cut", "arc", "g", "co", "const", "chain", "dc", "ce", "lc", "n", "xc", "unc", "ctrl", "C", "cp", "cand"], "ans": ["uns", "vs", "rs", "s", "can", "ats", "aos", "xs", "ann", " spans", "ians", "lan", "vals", "ens", "cs", "AN", "outs", "os", "anes", "ots", "eds", "anks", "ks", "ins", "an", "lines", "cons", "ars", "names", "ms", "orts", "as", "ns", " scans", "ents", "ids", "ants", "ows", "versions", "ons", "vers", "faces", "arts", "nets", "ts", "ls", "ANS", "beans", "ads"], "i": ["ii", "phi", "m", "xi", "me", "j", "multi", "sim", "ri", "init", "bi", "it", "ji", "e", "hi", "q", "in", "ims", "ci", "t", "di", "I", "set", "mi", "ie", "gi", "li", "ei", "si", "pi", "ex", "iter", "ti", "v", "a", "my", "ij", "ui", "ms", "ini", "ai", "ic", "\u0438", "iu", "piece", "ix", "ind", "id", "ip", "y", "o", "is", "uri", "x", "im", "oi", "ori", "qi", "ki"], "target": ["current", "term", "that", "inter", "category", "mask", "tmp", "blank", "char", "stable", "cat", "value", "alias", "top", "arget", "dest", "peer", "goal", "hat", "t", "set", "rel", "Target", "node", "character", "eth", "ch", "internal", "result", "ARGET", "match", "local", "iter", "v", "component", "src", "pointer", "type", "object", "angle", "pattern", "table", "tt", "source", "global", "te", "arg", "origin", "gt"]}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner in = new Scanner(System.in);\\n\\n\t\twhile(true) {\\n\\n\t\t\tint middle = in.nextInt();\\n\t\t\tint term_end = in.nextInt();\\n\t\t\tint retest = in.nextInt();\\n\t\t\tint sum = middle + term_end;\\n\\n\t\t\tif(middle == -1 && term_end == -1 && retest == -1) {\\n\\n\t\t\t\tbreak;\\n\\n\t\t\t}else if(middle == -1 || term_end == -1) {\\n\\n\t\t\t\tSystem.out.println(\"F\");\\n\\n\t\t\t}else if(sum >= 80) {\\n\\n\t\t\t\tSystem.out.println(\"A\");\\n\\n\t\t\t}else if(sum < 80 && sum >= 65) {\\n\\n\t\t\t\tSystem.out.println(\"B\");\\n\\n\t\t\t}else if(sum < 65 && sum >= 50) {\\n\\n\t\t\t\tSystem.out.println(\"C\");\\n\\n\t\t\t}else if(sum < 50 && sum >= 30) {\\n\\n\t\t\t\tif(retest >=  50) {\\n\\n\t\t\t\t\tSystem.out.println(\"C\");\\n\\n\t\t\t\t}else {\\n\\n\t\t\t\t\tSystem.out.println(\"D\");\\n\\n\t\t\t\t}\\n\\n\t\t\t}else if(sum < 30) {\\n\\n\t\t\t\tSystem.out.println(\"F\");\\n\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "118", "substitutes": {"in": ["serv", "out", "inf", "In", "m", "con", "isin", "i", "init", "doc", " din", "r", "by", "reader", "t", " out", "IN", "info", "std", "conn", "from", "line", "client", "log", "gin", "en", "ins", "inner", "conf", "local", "inn", "inc", "get", "cin", "io", "add", "input", "all", "bin", "ini", "as", "ic", "thin", "stream", "scan", "n", "err", "ind", "din", "cgi", "is", "source", "l", "rt"], "middle": ["bridge", "range", "family", "m", "bill", "carry", "lower", "mer", "service", "fat", "pal", "colm", "body", "mid", "span", "window", "balance", "med", "perm", "money", "Middle", "start", "slice", "first", "fine", "part", "len", "margin", "inner", "prefix", "align", "le", "dim", "normal", "left", "lead", "origin", "mouse", "chain", "angle", "base", "mini", "common", "minute", "mean", "upper", "field", "old", "master"], "term_end": ["term_begin", "ter_begin", "ter_end", " term_ends", "term_id", "term_END", "term_start", "term_ends", "ter_ends", "ter_start", " term_END", " term_id", " term_start"], "retest": ["returnester", "pretgest", "pretEST", "RetEST", "pretested", "Retester", "retgest", "pretest", "resetitude", "resend", "Retgest", "retend", "Retest", "retester", "resEST", "resetest", "Rether", "retEST", "prether", "resetester", "resested", "resest", " retester", "returnested", "pretend", "Retested", "rether", "pretester", "returnest", "backitude", " rether", "backested", "resetested", "retitude", "returnitude", "backester", "backest", "Retend", "retested", " retgest"], "sum": ["sam", "ness", "out", "um", "tu", "msg", "sim", "mix", "mer", "sa", "see", "doc", "cache", "mass", "ass", "unit", "temp", "cont", "rand", "med", "stack", "sign", "zero", "index", "share", "vol", "sub", "acc", "si", "match", "ram", "su", "gate", "score", "count", "cum", "summary", "comment", "cal", "dim", "scale", "total", "mem", "rank", "add", "process", "num", "weight", "average", "div", "n", "Sum", "hist", "na", "cmp", "mean", "size", "gam", "fac", "sup", "hash", "cand", "tail", "mod"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Main main = new Main();\\n    main.solve();\\n    main.show();\\n  }\\n\\n  int n;\\n  int k;\\n  int[] p;\\n  int ans;\\n\\n  public Main() {\\n    Scanner sc = new Scanner(System.in);\\n    try {\\n      n = sc.nextInt();\\n      k = sc.nextInt();\\n      p = new int[n];\\n      for (int i = 0; i < n; i++) p[i] = sc.nextInt();\\n    } finally {\\n      sc.close();\\n    }\\n  }\\n  \\n  void solve() {\\n    Arrays.sort(p);\\n    for (int i = 0; i < k; i++) ans += p[i];\\n  }\\n\\n  void show() {\\n    System.out.println(ans);\\n  }\\n}\\n", "target": "41", "substitutes": {"n": ["ng", "m", "s", "j", "nn", "net", "fn", "q", "r", "z", "ln", "t", "ne", "mn", "on", "nm", "en", "c", "gn", "np", "ot", "nc", "N", "an", "nb", "d", "v", "nu", "no", "name", "all", " N", "ns", "num", "un", "nl", "length", "nw", "sn", "na", "y", "o", "x", "cn", "l", "nt"], "k": ["mk", "m", "j", "dk", "sk", "ke", "ik", "ko", "kn", "r", "kr", "km", "ok", "wk", "kind", "kh", "kb", "ak", "mn", "ck", "kj", "kid", "ks", "ka", "kl", "c", "K", "kk", "kan", "kw", "key", "ek", "sch", "ku", "ki"], "p": ["m", "P", "pins", "pe", "j", "ap", "pid", "s", "rep", "par", "po", "pb", "f", "q", "pers", "lp", "pm", "pn", "pl", "vp", "perm", "pc", "pt", "ping", "pr", "pkg", "pre", "tp", "c", "np", "pi", "mp", "g", "bp", "v", "a", "port", "jp", "pa", "sp", "ps", "ip", "pro", "pp", "cp", "fp"], "ans": ["uns", "posts", "rs", "pins", "s", "can", "ats", "rans", "aos", "ies", "xs", "ups", "ann", "ians", "lan", "ran", "ens", " means", "cs", "aus", "outs", "anas", "os", "offs", "aps", "anks", "gs", "ks", "ins", "an", "ros", "ars", "names", "ms", "orts", "as", "ns", "ents", "ows", "ids", "ants", "eps", "orders", "ons", "ds", "ps", "arts", "ips", "ts", "ANS", "is", "ls", "amps", "asks", "ads"], "sc": [" Sc", "cle", "cc", "tc", "cr", "ss", "rc", "capt", "cl", "sb", "cv", "irc", "bc", "cs", "desc", "usc", "ec", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "enc", "soc", "sys", "psc", "mc", "scl", "c", "nc", "sh", "si", "mp", "SC", "gc", "sw", "fc", "sv", "sl", "dc", "lc", "scan", "sp", "sel", "ser", "asc", "sch", "sec", "disc", "anc", "syn", "sq"], "i": ["ii", "phi", "m", "xi", "umi", "multi", "sim", "ri", "eu", "sequence", "bi", "it", "ji", "init", "hi", "fire", "q", "ims", "u", "ci", "di", "I", "mi", "wi", "ie", "gi", "ni", "li", "ei", "si", "pi", "iter", "ti", "io", "cli", "ij", "zi", "ui", "ini", "ai", "ic", "us", "\u0438", "chain", "iu", "base", "ice", "ix", "ind", "MI", "ip", "y", "is", "uri", "ori", "im", "oi", "batch", "ami", "ity", "qi", "ki"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/*\\n * AtCoder Beginner Contest 088 C \"Takahashi's Information\"\\n *   https://abc088.contest.atcoder.jp/tasks/abc088_c/\\n */\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tInputScanner in = new InputScanner(System.in);\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\\n\t\tint[][] c = in.nextIntArray(3, 3);\\n\\n\t\tint[] a = new int[3];\\n\t\tint[] b = new int[3];\\n\\n\t\ta[0] = 0;\\n\t\tb[0] = c[0][0] - a[0];\\n\t\tb[1] = c[0][1] - a[0];\\n\t\tb[2] = c[0][2] - a[0];\\n\t\ta[1] = c[1][0] - b[0];\\n\t\ta[2] = c[2][0] - b[0];\\n\\n\t\tString ans = \"Yes\";\\n\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\tfor (int j = 0; j < 3; j++) {\\n\t\t\t\tif (c[i][j] != a[i] + b[j]) {\\n\t\t\t\t\tans = \"No\";\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tout.println(ans);\\n\\n\t\tin.close();\\n\t\tout.close();\\n\t}\\n\\n\t/*\\n\t * extends java.util.Scanner\\n\t */\\n\tstatic class InputScanner {\\n\\n\t\tScanner scanner;\\n\\n\t\tpublic InputScanner(InputStream inputStream) {\\n\t\t\tthis.scanner = new Scanner(inputStream);\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\treturn scanner.nextInt();\\n\t\t}\\n\\n\t\tpublic long nextLong() {\\n\t\t\treturn scanner.nextLong();\\n\t\t}\\n\\n\t\tpublic double nextDouble() {\\n\t\t\treturn scanner.nextDouble();\\n\t\t}\\n\t\tpublic String next() {\\n\t\t\treturn scanner.next();\\n\t\t}\\n\\n\t\tpublic int[] nextIntArray(int n) {\\n\t\t\tint[] ret = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.nextInt();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic int[][] nextIntArray(int h, int w) {\\n\t\t\tint[][] ret = new int[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.nextInt();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic long[] nextLongArray(int n) {\\n\t\t\tlong[] ret = new long[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.nextLong();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic long[][] nextlongArray(int h, int w) {\\n\t\t\tlong[][] ret = new long[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.nextLong();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic double[] nextDoubleArray(int n) {\\n\t\t\tdouble[] ret = new double[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.nextDouble();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic double[][] nextDoubleArray(int h, int w) {\\n\t\t\tdouble[][] ret = new double[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.nextLong();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[] nextStringArray(int n) {\\n\t\t\tString[] ret = new String[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.next();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[] nextStringArray(String split) {\\n\t\t\tString[] ret = scanner.next().split(split);\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[][] nextStringArray(int h, int w) {\\n\t\t\tString[][] ret = new String[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.next();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[][] nextStringArray(int h, String split) {\\n\t\t\tString[][] ret = new String[h][];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tret[i] = scanner.next().split(split);\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic void close() {\\n\t\t\tscanner.close();\\n\t\t}\\n\\n\t}\\n\\n}\\n", "target": "88", "substitutes": {"in": ["inf", "In", "m", "con", "isin", "s", "init", "lin", "doc", "f", "run", "it", "r", "file", "rin", "reader", "IN", "info", "ch", "conn", "from", "gin", "en", "p", "ins", "inner", "inn", "inc", "iter", "cin", "io", "ar", "input", "bin", "ini", "ic", "ai", "thin", "stream", "l", "scan", "ind", "din", "o", "is", "source", "err", "rt", "win"], "out": ["inter", "s", "can", "aos", "it", "error", "net", "put", "r", "OUT", "file", "t", "at", "ou", "outs", "lock", "os", "outer", "info", "ch", "result", "buffer", "on", "sys", "Out", "log", "er", "p", "print", "ex", "write", "res", "v", "io", "output", "screen", "or", "co", "to", "o", "writer", "sum", "err", "nt"], "c": ["m", "ct", "con", "cp", "cc", "f", "cache", "tc", "cr", "rc", "r", "cl", "u", "cm", "cs", "ec", "cd", "bc", "com", "lib", "cos", "ca", "enc", "cf", "cur", "cu", "sc", "ac", "mc", "cycle", "conf", "fc", "d", "v", "cal", "config", "arc", "cin", "etc", "abc", "ic", "cor", "co", "chain", "ce", "dc", "lc", "xc", "C", "csv", "vc"], "a": ["aaa", "m", "sta", "la", "apa", "oa", "ap", "sa", "it", "f", "da", "r", "am", "era", "at", "A", "au", "area", "ab", "ca", "er", "ma", "app", "ac", "p", "ba", "ea", "ao", "af", "ta", "obj", "an", "and", "aa", "ia", "add", "ar", "aj", "ga", "all", "as", "ai", "ee", "aux", "alpha", "pa", "na", "al", "to", "va", "o", "x", "es", "ae"], "b": ["B", "bit", "m", "eb", "ob", "binary", "bo", "br", "e", "bi", "bl", "it", "bf", "r", "be", "z", "sb", "fb", "body", "bs", "bc", "t", "lib", "ab", "ib", "cb", "gb", "emb", "bis", "beta", "bg", "bb", "back", "p", "ba", "bd", "db", "rb", "g", "d", "v", "nb", "mb", "bin", "base", "to", "y", "l", "wb"], "ans": ["uns", "posts", "vs", "rs", "san", "s", "rets", "can", "ats", "rans", "aos", "ann", " means", "ens", "cs", "aus", "acs", "os", "angs", "ags", "aints", "aps", "anks", "ks", "ends", "ins", "ols", "an", "ys", "ars", "ms", "ents", "ns", " scans", "arms", "ants", "ces", "mas", "ons", "ates", "yes", "prints", "ds", "nets", "arts", "ts", "ANS", "ls", "amps", "ads"], "i": ["ii", "phi", "m", "um", "xi", "me", "multi", "ri", "it", "ji", "init", "e", "bi", "hi", "ik", "q", "ims", "dr", "fire", "u", "iti", "yi", "ci", "iy", "di", "I", "mi", "this", "ie", "info", "gi", "li", "ei", "si", "pi", "ex", "iq", "ti", "iter", "io", "cli", "ij", "zi", "ui", "my", "ini", "ai", "ic", "us", "\u0438", "chain", "iu", "ios", "ix", "ind", "id", "MI", "ip", "y", "o", "uri", "is", "x", "im", "ami", "ity", "qi", "ki"], "j": ["ng", "oj", "m", "s", "ja", "br", "it", "ji", "jj", "jc", "jac", "q", "r", "z", "uj", "bj", "at", "ph", "t", "k", "jump", "ie", "ne", "json", "je", "pt", "ch", "pr", "on", "kj", "li", "p", "note", "jl", "obj", "jo", "ian", "g", "v", "aj", "ia", "jp", "ij", "dj", "jas", "us", "J", "err", "ix", "fr", "js", "y", "o", "key", "x", "l"], "scanner": ["canter", " scaner", "caninner", "Scanener", "Scanner", " scanener", "canener", "canator", "scanator", "scaninner", "anninner", "anener", "caner", "gatener", "canners", "statener", "stater", "Scaner", "annotter", "gateter", "statator", "canner", "scanener", "annotener", "Scanners", "annotners", "scanter", "scaner", "Scaninner", "scanners", "annner", "annotner", "gateinner", "annener", "gateener", " scanter", "annter", "anner", "anter", "statner", "aner", "Scanator", "Scanter"], "inputStream": ["inputSource", "InputSteam", "InputSource", " inputForm", " inputStreamer", "outputStream", "outputStreamer", " inputSource", "InputStream", "instream", "inputForm", "outputSteam", "inputstream", "inputSteam", " inputSteam", "inStreamer", "inStream", "InputForm", "outputForm", "outputSource", "outputstream", " inputstream", "inputStreamer", "inSteam"], "n": ["m", "s", "nan", "it", "nn", "net", "r", "z", "ln", "u", "t", "nr", "k", "ne", "nat", "p", "nc", "np", "ot", "N", "an", "nb", "d", "v", "no", "g", "nu", "ns", "num", "un", "nl", "sn", "nw", "na", "y", "o", "cn", "l", "nt"], "ret": ["ert", "ful", "rets", "it", "ft", "net", "r", "dr", "arr", "ter", "re", "continue", "t", "cont", "rel", "att", "dt", "pert", "repl", "result", "ll", "usr", "back", "ref", "p", "print", "data", "RET", "txt", "res", "mem", "mt", "jp", "det", "rm", "last", "aux", "et", "alt", "Ret", "def", "elt", "over", " Ret", "tt", "del", "reset", "red", "rem", "rt", "gt", "nt"], "h": ["hs", "m", "html", "hal", "hi", "q", "r", "z", "oh", "t", "k", "hd", "th", "kh", "height", "ch", "hh", "he", "p", "hw", "sh", "H", "hr", "hz", "ih", "g", "ht", "v", "d", "ha", "hl", "bh", "y", "o", "x", "im", "l", "hash"], "w": ["m", "e", "q", "aw", "r", "z", "wal", "wa", "rw", "window", "t", "k", "wt", "wh", "wi", "ew", "W", "width", "tw", "fw", "p", "wl", "hw", "sw", "ww", "g", "v", "ht", "d", "iw", "wn", "ws", "weight", "wd", "length", "kw", "nw", "wp", "mm", "y", "wr", "x", "l", "wx", "wb", "we"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        sc.close();\\n\\n        if (a >= 13) {\\n            System.out.println(b);\\n        } else if(a >= 6) {\\n            System.out.println(b / 2);\\n        } else {\\n            System.out.println(0);\\n        }\\n    }\\n}\\n", "target": "249", "substitutes": {}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\t\tpublic static void main(String[] args) {\\n\t\t\tScanner teclado = new Scanner (System.in);\\n\t\t\tint trem = teclado.nextInt();\\n\t\t\tint taxi = teclado.nextInt();\\n\t\t\tint minimo= teclado.nextInt();\\n\t\t\t\\n\t\t\tint cal= trem*taxi;\\n\t\t\t\\n\t\t\tif (trem*taxi<minimo) {\\n\t\t\t\tSystem.out.println(trem*taxi);\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(minimo);\\n\t\t\t\t\t\t\\n\t\t\t\t\t}\\n\t\t\t\\n}\\n}", "target": "213", "substitutes": {"teclado": ["peclado", " teplado", "teckadier", "tercellado", "tecladia", "teletazo", "teclaz", "teplar", "teplador", "teallocada", "teclusadier", "tenclaz", "terclar", "teklato", "pescated", " teclador", "teklaz", "teplada", " teclato", "teccato", "pescazo", "tenclado", "tecolazo", "tekladier", " teclada", "teclusado", "teclato", "terclado", "teclazo", "teccador", "teallocar", "teckaz", "teclada", "teclusato", "tecellar", "teclusaz", "tepladia", "teccada", "tenckado", "teclar", "tercelladia", "teckato", "tenckaz", "teclated", "tecelladia", "teallocado", " teplada", "tescated", "tecolated", "teccado", "teletated", " teplador", "tecladier", "teplato", "teckado", "terclada", "tencladier", "teletadier", "peclazo", "teallocadia", "tecrato", "teletado", "tenckato", "pescado", "teklado", "pescadier", "tecellada", "tecrador", "pecladier", "tecrado", "tescado", "tercladia", "tenclato", "tercellada", "tecrada", "tenckadier", "tecellado", "tescazo", "tecoladier", " teplato", "tecolado", "teplado", "tercellar", "peclated", "teclador", "tescadier"], "trem": ["trm", "Trel", "terom", "term", "tsract", "trel", "prem", " trm", " trel", "tsRem", "prav", "tsrav", "tsrem", "trav", "TRem", "tsrel", "tsrm", " tract", "strm", "terav", "stract", "tRem", "prom", " tRem", "tREM", " tREM", "trom", "strem", "Tract", "teRem", "pract", "stREM", "teract", "Trm", "teREM", "tsrom", "tract", "Trem", "terem"], "taxi": ["goodii", "axI", "martmi", " taxii", " taxe", "axi", "axe", "tagi", "taxmi", "martii", "oxii", "axii", "marti", "Taxi", "goodi", "pedmi", "pedi", " taxmi", "Taxit", "taxe", "taxit", "axiu", "taxo", " taxiu", " taxI", "axo", "goodI", "pedo", " taxo", " taxit", "tagiu", "TaxI", "axit", "oxi", "axmi", "marto", "taxii", "tage", "pedii", "oxmi", "oxI", "taxI", "goodmi", "taxiu", "tago"], "minimo": ["Minimo", "Minimal", "virticio", "minouri", "minim", " minuti", "aminuti", " minouri", "manitime", "mnimo", "manimal", "minusouri", "manimo", "minsicio", "virtimi", "minusimo", "virtouri", "minsouri", "manouri", "minimi", "minusimi", "minsimo", "minimal", " minimus", "mnuti", "minuti", "mnimus", "aminimo", "mnim", "Minouri", "minicio", "aminimus", " minim", "minitime", "virtimo", "Minitime", "aminim", "minsimi", "minimus", " minimal", " minitime", "minusicio"], "cal": ["cost", "mat", "pal", "wal", "com", "ale", "tar", " num", "ca", "cul", "log", "date", "burn", "cum", "Cal", "scale", "add", "are", "param", "sal", "eff", "num", "co", "roll", "al", "frac", "rec", "cale"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main{\\n\tstatic FastScanner sc = new FastScanner();\\n\tstatic PrintWriter out = new PrintWriter(System.out);\\n\t//static String S;\\n\tstatic int n;\\n\tstatic long b;\\n\t//static char a [][];\\n\t//final static int mod = 1_000_000_007;\\n\t//static int dx [] = {1, 0};\\n\t//static int dy [] = {0, 1};\\n\t//static double p [];\\n\t//static LinkedList <Integer> adj []; \\n\t//static TreeMap <Integer, Integer> map;\\n\t//static PriorityQueue <Integer> q;\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tn = sc.nextInt();\\n\t\t\\n\t\tif (n%2==0)\\n\t\t\tout.println(n/2);\\n\t\telse\\n\t\t\tout.println(n/2+1);\\n\t\t\t\\n\t\t\\n\t\t\\n\t\tout.flush();\\n\t}\\n\t\\n\t\\n\t\tstatic class FastScanner {\\n\t\t    private final InputStream in = System.in;\\n\t\t    private final byte[] buffer = new byte[1024];\\n\t\t    private int ptr = 0;\\n\t\t    private int buflen = 0;\\n\\n\t\t    private boolean hasNextByte() {\\n\t\t      if (ptr < buflen) {\\n\t\t        return true;\\n\t\t      } else {\\n\t\t        ptr = 0;\\n\t\t        try {\\n\t\t          buflen = in.read(buffer);\\n\t\t        } catch (IOException e) {\\n\t\t          e.printStackTrace();\\n\t\t        }\\n\t\t        if (buflen <= 0) {\\n\t\t          return false;\\n\t\t        }\\n\t\t      }\\n\t\t      return true;\\n\t\t    }\\n\\n\t\t    private int readByte() {\\n\t\t      if (hasNextByte()) return buffer[ptr++];\\n\t\t      else return -1;\\n\t\t    }\\n\\n\t\t    private static boolean isPrintableChar(int c) {\\n\t\t      return 33 <= c && c <= 126;\\n\t\t    }\\n\\n\t\t    private void skipUnprintable() {\\n\t\t      while (hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;\\n\t\t    }\\n\\n\t\t    public boolean hasNext() {\\n\t\t      skipUnprintable();\\n\t\t      return hasNextByte();\\n\t\t    }\\n\\n\t\t    public String next() {\\n\t\t      if (!hasNext()) throw new NoSuchElementException();\\n\t\t      StringBuilder sb = new StringBuilder();\\n\t\t      int b = readByte();\\n\t\t      while (isPrintableChar(b)) {\\n\t\t        sb.appendCodePoint(b);\\n\t\t        b = readByte();\\n\t\t      }\\n\t\t      return sb.toString();\\n\t\t    }\\n\\n\t\t    public long nextLong() {\\n\t\t      if (!hasNext()) throw new NoSuchElementException();\\n\t\t      long n = 0;\\n\t\t      boolean minus = false;\\n\t\t      int b = readByte();\\n\t\t      if (b == '-') {\\n\t\t        minus = true;\\n\t\t        b = readByte();\\n\t\t      }\\n\t\t      if (b < '0' || '9' < b) {\\n\t\t        throw new NumberFormatException();\\n\t\t      }\\n\t\t      while (true) {\\n\t\t        if ('0' <= b && b <= '9') {\\n\t\t          n *= 10;\\n\t\t          n += b - '0';\\n\t\t        } else if (b == -1 || !isPrintableChar(b)) {\\n\t\t          return minus ? -n : n;\\n\t\t        } else {\\n\t\t          throw new NumberFormatException();\\n\t\t        }\\n\t\t        b = readByte();\\n\t\t      }\\n\t\t    }\\n\\n\t\t    public int nextInt() {\\n\t\t      return (int) nextLong();\\n\t\t    }\\n\t\t    \\n\t\t    public double nextDouble(){\\n\t\t    \treturn Double.parseDouble(next());\\n\t\t    }\\n\\n\t\t    public int[] nextIntArray(int N, boolean oneBased) {\\n\t\t      if (oneBased) {\\n\t\t        int[] array = new int[N + 1];\\n\t\t        for (int i = 1; i <= N; i++) {\\n\t\t          array[i] = sc.nextInt();\\n\t\t        }\\n\t\t        return array;\\n\t\t      } else {\\n\t\t        int[] array = new int[N];\\n\t\t        for (int i = 0; i < N; i++) {\\n\t\t          array[i] = sc.nextInt();\\n\t\t        }\\n\t\t        return array;\\n\t\t      }\\n\t\t    }\\n\\n\t\t    public long[] nextLongArray(int N, boolean oneBased) {\\n\t\t      if (oneBased) {\\n\t\t        long[] array = new long[N + 1];\\n\t\t        for (int i = 1; i <= N; i++) {\\n\t\t          array[i] = sc.nextLong();\\n\t\t        }\\n\t\t        return array;\\n\t\t      } else {\\n\t\t        long[] array = new long[N];\\n\t\t        for (int i = 0; i < N; i++) {\\n\t\t          array[i] = sc.nextLong();\\n\t\t        }\\n\t\t        return array;\\n\t\t      }\\n\t\t    }\\n\t\t  }\\n\\n\t\t}\t \\n\\n\\n\\n", "target": "233", "substitutes": {"sc": [" Sc", " sy", "s", "sa", "Scan", "rc", " sar", "cs", " proc", "Sc", "ch", " sq", "sys", " scr", "SC", "sw", "sr", " cons", " scans", " sched", " sch", "dc", " asc", "scan", "tr", " suc", " inst", "sq"], "out": ["m", "message", "console", "msg", "j", "tmp", "error", "in", "OUT", "file", "at", "errors", "exit", "outs", "os", "info", "println", "ch", "up", "std", "result", "sys", "Out", "log", "er", "report", "null", "p", "help", "print", "ex", "write", "txt", "res", "output", "io", "name", "input", "screen", "n", "o", "writer", "err", "nt"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        FastScanner sc = new FastScanner(System.in);\\n        PrintWriter pw = new PrintWriter(System.out);\\n        String[] s = sc.next().split(\"/\");\\n        if(Integer.parseInt(s[0]) > 2019){\\n            pw.println(\"TBD\");\\n        }else if(Integer.parseInt(s[0]) < 2019){\\n            pw.println(\"Heisei\");\\n        }else if(Integer.parseInt(s[1]) < 5){\\n            pw.println(\"Heisei\");\\n        }else{\\n            pw.println(\"TBD\");\\n        }\\n        pw.flush();\\n    }\\n}\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    } \\n}\\n", "target": "163", "substitutes": {"sc": ["tch", "ct", "cc", "cle", "tc", "ss", "cr", "rc", "pb", "cl", "cv", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "isc", "pc", "osc", "sys", "mc", "scl", "nc", "c", "SC", "gc", "sw", "arc", "src", "sv", "ws", "lc", "sp", "asc", "sch", "sec", "anc", "usc", "sq", "tk"], "pw": ["pws", " psw", "pkw", "npw", "Psw", "Pwd", " pws", "npW", " pth", "ppth", " pwr", "Pw", "Pwr", "twr", "tsw", " pkw", "Pws", "tw", "tpW", "pth", "pwr", "tpkw", "tpwr", "lpw", "tpw", "lpwh", " pwh", "psw", "npsw", "twd", "lpwd", "Pkw", " pwd", "lpwr", "ppw", "pwh", "lpth", "npwr", "ppwr", "pW", " pW", "ppwh", "npwd", "lpws", "PW", "pwd"], "s": ["hs", "rs", "vs", "b", "h", "m", "changes", "sports", "its", "ats", "xs", "aws", "ss", "details", "ims", "S", "bs", "aunts", "parts", "t", "os", "tests", "bits", "bis", "qs", "gs", "p", "ins", "w", "g", "v", "strings", "mods", "seconds", "fts", "ms", "ws", "ns", "arms", "ares", "sts", "ps", "js", "y", "ts", "ls", "is", "ports", "conv", "ses", "styles", "sq"], "reader": ["rs", "rx", "lr", "redo", "context", "ocr", "rc", "rar", "r", "dr", " readers", "peer", "driver", "rl", "file", "wrapper", "row", "dra", "iterator", "handler", "read", "resource", "this", "rator", "rr", "buffer", "line", "er", "ner", "null", "query", "ro", "parser", "walker", "inner", "rer", "iter", "data", "roller", "loader", "input", "worker", "Reader", "runner", "stream", "readable", "builder", "writer", "aser", "source", "mr"], "tokenizer": [" tokenzer", " tokencer", "okenizer", "tokenization", "Tokenizer", "Tokenzer", "operatorization", "sonizer", "Tokeniser", "tokenize", "optimger", "okenformer", "tokenoder", "okeniser", " tokenifier", " tokenizing", "okenressor", "tokenizing", "Tokenization", "okenifier", "operatoriter", "okenifer", "serialzer", "sonisher", "lexifer", "tokeniser", "recogniser", " tokenifer", "lexger", "recognizer", "serialoder", " tokenformer", "okenizing", "sonizing", "okenoder", " tokenressor", "recognifier", " tokenization", "Tokenifier", " tokeniter", "Tokenizers", " tokenger", "tokenzer", "lexize", "optimcer", "okeniter", " tokenisher", "serialformer", " tokenoder", "tokenformer", "tokenressor", "tokencer", " tokeniser", "okenger", "operatorizer", "tokenifier", "operatorize", " tokenizers", " tokenize", "lexizer", "okenzer", "tokenisher", "tokenifer", "tokenizers", "Tokenize", "tokeniter", "okenize", "okencer", "recognization", "okenisher", "tokenger", "sonization", "okenization", "serializer", "optimizer", "okenizers", "optimressor"], "in": ["out", "inf", "In", "m", "con", "it", "str", "f", "init", "run", "net", "r", "file", "t", "cont", "IN", "info", "from", "log", "null", "p", "mc", "c", "ac", "ins", "conf", "inner", "inc", "inn", "data", "w", "cin", "io", "ar", "input", "bin", "ini", "stream", "l", "dir", "id", "mm", "din", "is", "source", "err", "rt"], "n": ["ng", "out", "m", "h", "j", "nan", "e", "nn", "ren", "net", "fn", "number", "r", "z", "ln", "t", "nr", "k", "ne", "network", "on", "ni", "nm", "len", "en", "c", "nc", "np", "p", "N", "local", "count", "an", "nos", "w", "nb", "d", "no", "v", "g", "nu", "name", "num", "ns", "nl", "sn", "na", "y", "o", "cn", "l", "nt"], "a": ["aaa", "b", "la", "apa", "oa", "aos", "sa", "e", "da", "am", "wa", "t", "el", "A", "au", "area", "ua", "ab", "ca", "ada", "qa", "ma", "ac", "ba", "aka", "ao", "xa", "ea", "ka", "ta", "an", "w", "aa", "ia", "ava", "ata", "ga", "ha", "as", "aux", "pa", "na", "y", "va", "o", "ae", "fa"], "i": ["char", "hi", "q", "ci", "mi", "li", "ij", "ui", "ini", "ai", "us", "ix", "m", "multi", "bi", "println", "ei", "pi", "_", "cli", "ms", "y", "im", "ki", "ii", "init", "fire", "di", "wi", "info", "se", "gi", "si", "ti", "io", "\u0438", "ind", "ip", "PI", "qi", "phi", "xi", "j", "sim", "it", "Print", "u", "set", "I", "ie", "iter", "ic", "nl", "iu", "New", "is", "x", "oi", "batch"]}}
{"code": "\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\n\\nclass Main{\\n    public static void main(String[] args) {\\n        InputReader in = new InputReader(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        int N = in.nextInt();\\n        int M = in.nextInt();\\n        int[] arr = new int[M];\\n        int sum = 0;\\n        for (int i = 0; i < M; i++) {\\n            //arr[i] = in.nextInt();\\n            sum = sum + in.nextInt();\\n        }\\n\\n        System.out.println((sum <= N )?((N-sum)):(-1));\\n\\n\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n", "target": "108", "substitutes": {"in": ["serv", "act", "per", "inf", "In", "m", "h", "con", "isin", "it", "doc", "init", "run", "r", "OUT", "file", "user", "rin", "reader", "IN", "info", "on", "from", "log", "gin", "null", "en", "mc", "ins", "inner", "conf", "inn", "inc", "get", "cin", "end", "io", "output", "add", "input", "raw", "all", "bin", "ini", "ai", "stream", "n", "ind", "mm", "din", "is", "err", "rt"], "out": ["m", "j", "tmp", "str", "net", "put", "r", "OUT", "file", "t", "at", "ou", "outs", "os", "ch", "sys", "Out", "log", "p", "print", "ot", "conf", "obj", "write", "txt", "w", "res", "v", "output", "io", "or", "n", "to", "o", "writer", "err", "nt"], "N": ["B", "E", "P", "F", "NN", "Ns", "Num", "S", "NR", "G", "NS", "I", "D", "L", "V", "NM", "H", "T", "K", "J", "Q", "n", "R", "C", "Z", "X", "O"], "M": ["DM", "B", "m", "P", "F", "MX", "MAN", "RM", "MM", "CM", "S", "MF", "G", "LM", "I", "D", "A", "L", "MP", "V", "NM", "MN", "H", "MC", "T", "K", "J", "Q", "MT", "MS", "U", "R", "MI", "C", "O"], "arr": ["mat", "tmp", "br", "bl", "str", "par", "dr", "inst", "buf", "dict", "row", "list", "obj", "db", "var", "array", "res", "ar", "all", "Ar", "gr", "Array", "dat", "map", "fr", "ray", "err", "arg", "nt"], "sum": ["um", "sim", "set", "diff", "info", "up", "start", "index", "SI", "acc", "si", "count", "cum", "st", "cal", "add", "mem", "total", "all", "SU", "num", "Sum", "sp", "mean", "max", "size", "sup", "tail"], "i": ["ii", "phi", "m", "gu", "xi", "me", "j", "sim", "multi", "it", "bi", "q", "u", "ci", "t", "di", "I", "mi", "gi", "ni", "mu", "li", "p", "si", "c", "pi", "ti", "g", "v", "a", "cli", "zi", "ui", "ini", "ai", "us", "iu", "ix", "ip", "y", "x", "im", "qi", "ki"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n      int P = sc.nextInt();\\n      int Q = sc.nextInt();\\n      int R = sc.nextInt();\\n      if(P>=Q && P>=R){\\n        System.out.println(Q+R);\\n      }else if(Q>=P && Q>=R){\\n        System.out.println(P+R);\\n      }else if(R>=P && R>=Q){\\n        System.out.println(P+Q);\\n      }\\n    }\\n}", "target": "89", "substitutes": {"sc": ["tch", "system", "cc", "cr", "tc", "capt", "rc", "ko", "cl", "sb", "bc", "cs", "cont", "esc", "Sc", "ctl", "ch", "pc", "isc", "osc", "ck", " scr", "scl", "c", "nc", "mc", "SC", "gc", "sw", "inc", "st", "sv", "lc", "scan", "sp", "ser", "asc", "conv", "cgi", "sch", "anc", "sec", "usc", "sq"], "P": ["PU", "B", "E", "TP", "PR", "F", "IX", "Pain", "PC", "PD", "S", "G", "IP", "FP", "I", "A", "CP", "L", "PP", "PO", "PT", "PA", "V", "DP", "PG", "PAR", "PF", "p", "SP", "GP", "H", "N", "Pod", "PS", "T", "PL", "K", "PM", "J", "EP", "PUT", "AR", "M", "PI", "PE", "C", "WP", "X", "AP", "PK"], "Q": ["B", "E", "IX", "F", "RL", "q", "S", "HQ", "G", "IP", "Qual", "Que", "I", "D", "A", "Query", "W", "IQ", "L", "RE", "V", "CH", "QL", "IV", "Qu", "UE", "H", "N", "Y", "QU", "T", "K", "J", "DR", "RR", "MQ", "QB", "ER", "TR", "AR", "U", "M", "PE", "C", "Z", "UR", "X", "PK"], "R": ["RO", "B", "E", "PR", "F", "RT", "GR", "RL", "RW", "RM", "r", "NR", "G", "TX", "RA", "CR", "A", "D", "IR", "W", "L", "RE", "V", "RS", "VR", "H", "N", "T", "BR", "MR", "RG", "J", "RR", "DR", "ER", "SR", "RC", "TR", "Res", "U", "M", "AR", "C", "O", "HR", " r"]}}
{"code": "\\nimport java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String args[]){\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t//\u4e2d\u9593\u8a66\u9a13m\u3001\u671f\u672b\u8a66\u9a13f\u3001\u518d\u8a66\u9a13r\u306e\u70b9\u6570\u3092\u53d7\u3051\u53d6\u308b\\n\t\twhile(true){\\n\t\t\tString s1 = sc.next();\\n\t\t\tint m = Integer.parseInt(s1);\\n\t\t\tString s2 = sc.next();\\n\t\t\tint f = Integer.parseInt(s2);\\n\t\t\tString s3 = sc.next();\\n\t\t\tint r = Integer.parseInt(s3);\\n\t\t\t//\u5168\u3066-1\u304c\u5165\u529b\u3055\u308c\u305f\u3068\u304d\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b\\n\t\t\tif(m == -1 && f == -1){\\n\t\t\t\tif(r == -1){\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t//\u4e2d\u9593\u3001\u671f\u672b\u306e\u3069\u3061\u3089\u304b\u4f11\u3093\u3060\u5834\u5408\u306fF\u3068\u8868\u793a\\n\t\t\tif(m == -1 || f == -1){\\n\t\t\t\tSystem.out.println(\"F\");\\n\t\t\t}\\n\t\t\t//80\u70b9\u4ee5\u4e0a\u306fA\\n\t\t\telse if(80 <= m + f){\\n\t\t\t\tSystem.out.println(\"A\");\\n\t\t\t}\\n\t\t\t//65\u70b9\u4ee5\u4e0a\u306fB\\n\t\t\telse if(65 <= m + f && m + f < 80){\\n\t\t\t\tSystem.out.println(\"B\");\\n\t\t\t}\\n\t\t\t//50\u70b9\u4ee5\u4e0a\u306fC\\n\t\t\telse if(50 <= m + f && m + f < 65){\\n\t\t\t\tSystem.out.println(\"C\");\\n\t\t\t}\\n\t\t\t//30\u70b9\u4ee5\u4e0a\u306fD\uff08\u305f\u3060\u3057\u518d\u8a66\u9a13\u304c50\u70b9\u4ee5\u4e0a\u306a\u3089C\uff09\\n\t\t\telse if(30 <= m + f && m + f < 50){\\n\t\t\t\tif(50 <= r){\\n\t\t\t\t\tSystem.out.println(\"C\");\\n\t\t\t\t}\\n\t\t\t\telse{\\n\t\t\t\t\tSystem.out.println(\"D\");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t//30\u70b9\u672a\u6e80\u306fF\\n\t\t\telse{\\n\t\t\t\tSystem.out.println(\"F\");\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n}", "target": "118", "substitutes": {"sc": [" Sc", " ss", "system", "sk", "sa", "cr", "ss", "rc", "cv", "cs", "Sc", "se", "ch", "sys", " SC", " scr", "c", "SC", "gc", "src", "sv", " sk", "scan", " sp", "sp", " cr", " sa", "sq"]}}
{"code": "import static java.lang.Character.*;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str;\\n\t\twhile ((str = br.readLine()) != null) {\\n\t\t\tfor (int i = 0; i < str.length(); i++) {\\n\t\t\t\tchar c = str.charAt(i);\\n\t\t\t\tif (isLetter(c)) {\\n\t\t\t\t\tif (isUpperCase(c)) {\\n\t\t\t\t\t\tSystem.out.print(toLowerCase(c));\\n\t\t\t\t\t} else {\\n\t\t\t\t\t\tSystem.out.print(toUpperCase(c));\\n\t\t\t\t\t}\\n\t\t\t\t} else {\\n\t\t\t\t\tSystem.out.print(c);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t}\\n\\n}", "target": "192", "substitutes": {"br": ["bridge", "Br", "bsp", "bl", "shr", "cr", "bf", "dr", "sb", "ctr", "kr", "buf", "gb", "ch", "pr", "bg", "bb", "er", "next", "bd", "bm", "hr", "db", "rb", "bp", "bro", "jp", "gr", "vr", "bt", "yr", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "mr", "BR"], "str": ["b", "m", "console", "string", "msg", "j", "s", "STR", "it", "char", "r", "z", "dr", "arr", "ctr", "Str", "temp", "bc", "desc", "t", "cont", "exp", "ch", "pt", "bits", "enc", "cur", "pr", "vol", "p", "spec", "print", "status", "form", "comm", "txt", "g", "st", "v", "res", "mt", "stream", "gr", "l", "text", "div", "n", "dat", "tr", "sp", "fr", "ent", "hex", "source", "del", "err", "syn"], "i": ["ii", "phi", "m", "gu", "xi", "multi", "j", "sim", "ri", "it", "bi", "ji", "ik", "hi", "in", "ims", "u", "ci", "iy", "t", "di", "I", "mi", "exp", "ie", "json", "gi", "index", "li", "ei", "si", "pi", "ex", "iq", "ti", "a", "my", "ij", "zi", "ui", "ini", "ic", "ai", "\u0438", "us", "iu", "ind", "ix", "ip", "y", "o", "is", "uri", "x", "im", "ori", "batch"], "c": ["cap", "h", "ct", "con", "char", "f", "cache", "tc", "cr", "cat", "cc", "q", "r", "cl", "z", "u", "ci", "cm", "cd", "cont", "com", "k", "coll", "cos", "character", "ch", "ca", "enc", "cf", "cur", "cu", "sc", "ac", "p", "code", "gc", "w", "fc", "arc", "v", "etc", "cod", "ic", "co", "chain", "cell", "dc", "ce", "lc", "n", "word", "y", "unc", "ctrl", "x", "C", "col", "l", "cp", "comp", "vc"]}}
{"code": "\\n\\nimport java.util.Scanner;\\nimport java.util.Stack;\\n\\npublic class Main {\\n\\n\tpublic static void main(String argsw[])\\n\t{\\n\t\tScanner scan=new Scanner(System.in);\\n\t\tStack<Integer> stk=new Stack<Integer>();\\n\t\tString eg=scan.next();\\n\t\tlong count=0;\\n\t\tstk.add(eg.charAt(0)-'0');\\n\t\tfor(int i=1;i<eg.length();i++)\\n\t\t{\\n\t\t\tif( !stk.isEmpty() && (eg.charAt(i)-'0')!=stk.peek())\\n\t\t\t{\\n\t\t\t\tstk.pop();\\n\t\t\t\tcount+=2;\\n\t\t\t}else {\\n\t\t\t\tstk.add(eg.charAt(i)-'0');\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n", "target": "14", "substitutes": {"argsw": ["args0", "Args", "Arg0", "Argsp", " arg0", "argssp", " argsp", "argss", "arg0", "Argsw", "argsp", "argssw"], "scan": ["store", "out", "san", "check", "con", "system", "can", "skip", "pan", "Scan", "run", "ann", "in", "r", "re", "scroll", "sm", "row", "read", "sync", "connect", "se", "info", "seek", "ch", "sys", "reach", "sc", "ner", "p", "query", "gate", "parse", "sql", "gc", "an", "sin", "g", "st", "scale", "get", "auto", "sv", "search", "n", "sp", "ser", "stat", "find"], "stk": ["istk", "osttk", "istak", "stuk", "Stj", " stuk", " stok", "stsak", "mtuk", "estuk", "Stks", "estk", "mtks", "STck", "estK", "ustck", "stK", " stik", "Stck", "Stok", "Stik", "STj", " stck", "stak", "stsck", "ostk", " stak", "ustak", "stsik", " stks", "ostks", " stK", "Stak", "ustk", "Stk", "stj", "stik", "mtck", "estck", "STtk", "stok", "stks", "stsk", "mtak", " stj", "ustik", "mtk", "istik", "STks", "istck", "ostck", "STk", "sttk", "mtK", "mtok", " sttk", "stck"], "eg": ["ogg", "ef", "got", "eb", "leg", "xp", "og", "gg", "eu", "e", "gd", "tg", "re", "eval", "ec", " ge", "esc", "EG", "greg", "egal", "se", "ew", "gb", "meg", " EG", "alg", " gp", "reg", "org", "rg", "bg", "ag", "ig", "cong", "peg", " eb", "eng", "eur", "sg", "rog", "g", "deg", "gp", "ug", "ee", "ess", "esp", "gest", "rag", "ged", "urg", "erg", "asc", "elt", "ega", "ae", "pg", "ge"], "count": ["check", "ct", "flag", "ount", "cache", "success", "number", "ctr", "cast", "hold", "t", "set", "read", "info", "trust", "result", "counter", "index", "start", "report", "failed", "c", "amount", "code", "conf", "status", "score", "trace", "draw", "nb", "comment", "add", "total", "num", "weight", "state", "length", "n", "Count", "ind", "cond", "id", "child", "max", "size", "stat", "sum", "found", "nt"], "i": ["ii", "phi", "m", "b", "xi", "j", "multi", "ri", "it", "bi", "ji", "hi", "in", "u", "ci", "di", "I", "mi", "info", "go", "gi", "index", "ni", "li", "ei", "si", "print", "pi", "ti", "v", "io", "cli", "my", "zi", "ui", "ini", "ai", "ic", "us", "\u0438", "iu", "n", "ind", "ix", "id", "ip", "y", "o", "is", "key", "x", "im", "uri", "ori"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n      String a = sc.next();\\n      if(a.contains(\"B\")){\\n        System.out.println(a.replace(\"B\",\"R\"));\\n      }else if(a.contains(\"R\")){\\n        System.out.println(a.replace(\"R\",\"B\"));\\n      }\\n    }\\n}", "target": "153", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "capt", "ss", "cl", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "dec", "isc", "pc", "osc", "soc", "sys", "mc", "scl", "c", "nc", "sub", "SC", "gc", "sv", "lc", "scan", "sp", "sel", "ser", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "a": ["aaa", "act", "b", "sta", "apa", "la", "oa", "s", "isa", "sa", "i", "eas", "f", "ya", "r", "am", "z", "era", "wa", "t", "el", "A", "at", "au", "area", "att", "ca", "ma", "app", "ac", "c", "aka", "ea", "an", "data", "w", "aa", "g", "v", "aj", "ia", "ata", "ga", "all", "as", "alpha", "pa", "na", "to", "y", "va", "o", "ae", "fa"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.nio.charset.StandardCharsets;\\n\\npublic class Main {\\n\tpublic static void main (String[] args) throws IOException{\\n\t    InputStreamReader reader = new InputStreamReader(System.in, StandardCharsets.UTF_8);\\n\t    BufferedReader in = new BufferedReader(reader);\\n\t\tString[] str = in.readLine().split(\" \");\\n\t\tint X = Integer.parseInt(str[0]);\\n\t\tint Y = Integer.parseInt(str[1]);\\n\t\tif((Y-2*X)%2 == 0 && (Y-2*X)/2 >= 0 && X-((Y-2*X)/2) >= 0) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else\\n\t\t\tSystem.out.println(\"No\");\\n\t}\\n}", "target": "62", "substitutes": {"reader": ["rd", "rot", "rx", "context", "rar", "rl", "r", "dr", "draft", "rc", "driver", "re", "window", "row", "maker", "iterator", "read", "resource", "handler", "this", "rator", "buffer", "ck", "er", "ner", "null", "ro", "parser", "inner", "iter", "get", "io", "input", "Reader", "runner", "stream", "builder", "ry", "writer", "red", "rr", "older"], "in": ["out", "b", "In", "inf", "h", "check", "s", "isin", "i", "init", "doc", "run", " din", "r", "OUT", "user", "rin", "ill", "read", "IN", "info", "std", "from", "er", "log", "gin", "p", "ins", "conf", "inner", "inside", "inn", "ad", "and", "get", "cin", "output", "io", "add", "input", "world", "all", "bin", "ini", "thin", "stream", "l", "n", "ind", "readable", "din", "writer", "err"], "str": ["rs", "string", "s", "STR", "br", "char", "bl", "cr", "ctr", "r", "arr", "dr", "Str", "desc", "split", "dec", "ch", "uts", "enc", "line", "usr", "vol", "len", "part", "print", "stri", "comm", "data", "txt", "st", "unch", "sl", "ns", "chain", "gr", "rip", "div", "dat", "sts", "tr", "n", "sp", "fr", "hex", "ts", "elt", "del", "sec"], "X": ["Xi", "AC", "E", "IX", "P", "XL", "ID", "ZX", "MX", "WH", "S", "XXX", "Width", "TX", "I", "HTML", "W", "L", "V", "XX", "IC", "H", "XT", "TH", "N", "DX", "XP", "Tx", "T", "VIEW", "K", "IM", "J", "Q", "EX", "XY", "AX", "M", "R", "FX", "UX", "Length", "x", "OX", "Z", "PE", "C", "Int"], "Y": ["B", "E", "P", "ID", "Chart", "MX", "YD", "S", "G", "I", "HTML", "IO", "MY", "Year", "L", "V", "XX", "NY", "BY", "YY", "H", "TH", "N", "JS", "HY", "EY", "T", "TY", "OW", "J", "AY", "FY", "Q", "GB", "YA", "XY", "M", "R", "Height", "y", "YC", "OX", "C", "Z", "JSON", "My"]}}
{"code": "import java.io.*;\\npublic class Main{\\n    public static void main(String[] args) throws IOException{\\n        BufferedReader bf = \\n            new BufferedReader(new InputStreamReader(System.in));\\n        int N = Integer.parseInt(bf.readLine());\\n        String[] str = bf.readLine().split(\" \");\\n        int[] h = new int[N];\\n        for(int i = 0; i < N; i++){\\n            h[i] = Integer.parseInt(str[i]);\\n        }\\n        int answer = h[0];\\n        for(int i = 0; i < N-1; i++){\\n            int value = h[i+1] -h[i];\\n            if(value > 0){\\n                answer += value;\\n            }\\n        }\\n        System.out.println(answer);\\n    }\\n}", "target": "77", "substitutes": {"bf": ["b", "eb", "ob", "BB", "FB", "lf", "ube", "bl", "f", "uf", "sb", "BF", "fb", "afe", "bj", "bs", "bc", "bol", "kb", "cb", "gb", "ib", "lb", "alf", "bg", "bb", "PF", "bd", "bm", "db", "rb", "elf", "nb", "bp", "mb", "rf", "xf", "bt", "FH", "deb", "bh", "lbs", "tf", "erb"], "N": ["NH", "Node", "P", "F", "NN", "NI", "Ni", "Num", "S", "NR", "SN", "NL", "AN", "NS", "I", "D", "NV", "NO", "GN", "NP", "NC", "NB", "L", "ND", "V", "TN", "Size", "NM", "H", "Net", "NT", "NA", "Y", "T", "K", "J", "FN", "Sn", "Q", "NE", "n", "No", "M", "Length", "C", "Z", "X"], "str": ["rs", "out", "string", "s", "sol", "STR", "br", "char", "it", "cr", "r", "cl", "arr", "Str", "re", "split", "att", "uts", "enc", "cur", "spec", "vol", "oct", "form", "stri", "txt", "sr", "st", "ar", "sl", "chain", "gr", "text", "div", "sts", "tree", "tr", "fr", "ts", "ls", "wr", "del", "sec"], "h": ["hs", "m", "b", "it", "uh", "cache", "hi", "where", "q", "dr", "av", "his", "oh", "hm", "ph", "history", "hd", "k", "th", "ah", "hh", "he", "has", "here", "p", "hz", "sh", "H", "c", "hr", "rh", "ih", "g", "ht", "ha", "hl", "n", "bh", "hp", "hex", "ho", "dh", "pp", "l", "hash", "header"], "i": ["ji", "hi", "q", "ci", "mi", "list", "li", "v", "ij", "ui", "ini", "ai", "us", "err", "ix", "multi", "ies", "bi", "f", "ik", "iy", "ei", "c", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ity", "ki", "ii", "ri", "init", "fire", "di", "info", "gi", "index", "ni", "si", "ti", "io", "\u0438", "ind", "ip", "cgi", "o", "qi", "phi", "xi", "me", "j", "sim", "it", "ims", "u", "set", "I", "this", "ie", "client", "p", "point", "iter", "g", "ia", "ic", "iu", "is", "oi", "batch"], "answer": ["ask", "message", "offer", "equ", "term", "blank", "see", "echo", "interpret", "sequence", "wer", "ALSE", "aq", "cache", "number", "install", "opt", "asm", "swers", "poll", "exit", "remember", "energy", "result", "accept", "answered", "entry", "Answer", "query", "ve", "ue", "request", "response", "option", "rent", "uno", "output", "version", "approximately", "onse", "vote", "search", "archive", "ze", "reply", "issue", "say", "question"], "value": ["label", "save", "message", "current", "feature", "see", "sequence", "test", "number", "values", "unit", "expression", "hello", "property", "relation", "function", "unknown", "result", "variable", "index", "Value", "php", "entry", "ue", "distance", "request", "efficiency", "data", "response", "option", "scale", "v", "component", "volume", "multiple", "step", "state", "vote", "weight", "update", "image", "vector", "gradient", "val", "child", "field", "key", "position", "database", "VALUE", "python", "description", "job", "sample"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = Integer.parseInt(sc.next());\\n\t\tint b = Integer.parseInt(sc.next());\\n\t\tint c = Integer.parseInt(sc.next());\\n\t\tint d = Integer.parseInt(sc.next());\\n\t\tint e = Integer.parseInt(sc.next());\\n\t\tint k = Integer.parseInt(sc.next());\\n\t\tsc.close();\\n\\n\t\tif(e - a <= k) {\\n\t\t\tSystem.out.println(\"Yay!\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\":(\");\\n\t\t}\\n\t}\\n}", "target": "66", "substitutes": {"sc": [" Sc", "cc", "cle", "tc", "cr", "pb", "rc", "ko", "cl", "bc", "cs", "ec", "desc", "cont", "esc", "sync", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", "ck", "mc", "scl", "nc", "sub", "SC", "gc", "inc", "sr", "fc", "arc", "cli", "sv", "ic", "co", "nl", "scrib", "dc", "scan", "lc", "sp", "asc", "cgi", "cer", "sch", "anc", "sec", "usc", "disc", "irc", "sq"], "a": ["m", "sta", "la", "oa", "sa", "i", "f", "r", "am", "u", "at", "t", "A", "art", "ab", "ak", "ada", "p", "ba", "ao", "ea", "ka", "ta", "an", "aa", "g", "aj", "ar", "ia", "ai", "alpha", "n", "va", "o", "x", "l", "ae"], "b": ["B", "eb", "j", "s", "i", "bi", "f", "r", "be", "bc", "ab", "cb", "beta", "bb", "p", "ba", "db", "rb", "g", "aa", "v", "n", "y", "x", "l"], "c": ["ct", "cc", "f", "r", "be", "ci", "ec", "cm", "cs", "cd", "bc", "ab", "cb", "ca", "cf", "ac", "p", "db", "fc", "dc", "ce", "n", "C", "col", "cp"], "d": ["m", "f", "da", "dx", "r", "cd", "t", "dd", "D", "di", "dec", "dp", "p", "db", "ad", "w", "g", "v", "df", "dc", "de", "n", "dat", "ds", "l"], "e": ["E", "m", "h", "eb", "ef", "s", "pe", "eu", "i", "f", "ele", "r", "be", "ed", "ec", "t", "el", "se", "er", "p", "ei", "en", "le", "w", "g", "v", "end", "ep", "ee", "oe", "de", "ce", "n", "y", "o", "x", "es", "l", "ae"], "k": ["mk", "m", "j", "dk", "sk", "i", "ke", "ik", "ko", "q", "kn", "z", "u", "kr", "kh", "ak", "ck", "kj", "p", "kl", "ka", "ks", "g", "v", "K", "kk", "n", "tk", "x", "ek", "ku", "ki"]}}
{"code": "class Main{\\n    \\n    public static void main(String[] args){\\n        java.util.Scanner in = new java.util.Scanner(System.in);\\n        int t = in.nextInt();\\n        System.out.println(getFormattedTime(t));\\n    }\\n    \\n    public static String getFormattedTime(int sec){\\n        int h = sec / 3600;\\n        int rest_h = sec - h * 3600;\\n        int m = rest_h / 60;\\n        int s = rest_h - m * 60; \\n        return String.format(\"%d:%d:%d\", h, m, s);\\n    }\\n    \\n}", "target": "84", "substitutes": {"in": ["out", "In", "inf", "isin", "init", "i", "char", "f", "doc", " din", "r", "file", "ln", "rin", "reader", "k", "read", "IN", "info", "std", "proc", "log", "gin", "null", "c", "ins", "inner", "conf", "inn", "inc", "sin", "cin", "v", "io", "add", "input", "all", "ini", "stream", "scan", "n", "err", "ind", "readable", "din", "l", "mr", "rec"], "t": ["term", "ct", "j", "i", "e", "f", "tc", "z", "fort", "time", "set", "wt", "tz", "dt", "pt", "tip", "p", "title", "c", "ot", "ta", "trace", "ti", "d", "st", "v", "total", "T", "tick", "type", "n", "tr", "y", "ts", "tt", "te", "rt"], "sec": ["sector", "ct", "j", "con", "year", "sent", "seq", "SEC", "rec", "str", "loc", "z", "Sec", "ec", "time", "min", "hour", "row", "cs", "desc", "dec", "th", "se", "enc", "secure", "reg", "sys", "proc", "sc", "next", "c", "sh", "security", "code", "ex", "res", "st", "fc", "seconds", "ms", "const", "second", "day", "cond", "val", "max", "size", "sect", "ut"], "h": ["hs", "b", "j", " H", "i", "it", "hours", "f", "hi", "q", "z", "his", "ec", "oh", "hm", "hour", "hd", "k", "th", "kh", "zh", "md", "hh", "he", "c", "H", "sh", "hr", "HH", "ow", "rh", "ih", "w", "g", "d", "ht", "v", "ha", "hl", "o", "ho", "x", "dh", "l"], "rest_h": ["rest_hd", "rest64h", "rest64ht", " rest_f", "rest_hh", "rest_l", "rest_sh", "rest64hh", "max_h", "Rest_m", " rest_l", " rest_sh", "rest64m", "rest_ht", "Rest_hh", "max_hd", "max_hh", "Rest_h", "rest_f", "max_m", "rest_m", "Rest_ht"], "m": ["b", "j", "i", "vm", "f", "dm", "r", "z", "am", "u", "mid", "om", "cm", "hm", "sm", "min", "mut", "mi", "pm", "md", "perm", "p", "mc", "c", "gm", "w", "g", "d", "v", "a", "mt", "ms", "arm", "tm", "n", "M", "mm", "minute", "o", "em", "l", "man", "rem", "mr", "mod"], "s": ["b", "its", "ats", "ies", "fs", "f", "ss", "q", "ims", "S", "sb", "ets", "z", "des", "bs", "cs", "se", "eds", "gs", "p", "ks", "c", "ins", "sw", "ys", "g", "d", "a", "sv", "ms", "as", "ns", "n", "ps", "als", "js", "sd", "ls", "ts", "is", "es", "sq"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\npublic class Main{\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString[] line = br.readLine().split(\" \");\\n\t\tint a = Integer.parseInt(line[0]);\\n\t\tint b = Integer.parseInt(line[1]);\\n\t\tint c = Integer.parseInt(line[2]);\\n\t\tint cnt = 0;\\n\t\tfor(int i= a; i <= b; i++){\\n\t\t\tint x = c % i;\\n\t\t\tif( x==0) cnt++;\\n\t\t}\\n\t\tSystem.out.println( cnt );\\n\t}\\n}", "target": "190", "substitutes": {"br": ["bridge", "lr", "Br", "bsp", "bl", "shr", "str", "bi", "cr", "bf", "dr", "be", "kr", "bs", "bc", "buf", "rel", "ch", "pr", "bb", "next", "bd", "bm", "hr", "rb", "bp", "bro", "gr", "vr", "bt", "yr", "div", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "mr", "BR"], "line": ["range", "page", "pe", "cle", "lo", "command", "liner", "link", "number", "train", "ln", "stroke", "user", "shell", "set", "row", "frame", "detail", "ide", "se", "tile", "log", "date", "entry", "list", "query", "point", "pixel", "note", "space", "le", "comment", "zone", "style", "no", "ine", "port", "eline", "block", "sl", "nl", "cell", "rule", "piece", "Line", "word", "device", "LINE", "call", "l", "tab", "ge"], "a": ["aaa", "sta", "la", "oa", "isa", "sa", "da", "r", "am", "u", "t", "at", "A", "au", "area", "ab", "ca", "ada", "ma", "ac", "p", "ba", "ao", "ea", "ta", "an", "aa", "ia", "aj", "ar", "ga", "ai", "as", "alpha", "n", "pa", "va", "o", "l", "ae"], "b": ["B", "m", "ob", "j", "ble", "bl", "bi", "f", "r", "be", "fb", "bc", "bs", "ab", "ib", "cb", "gb", "bb", "p", "ba", "db", "rb", "nb", "v", "mb", "base", "n", "y", "l", "wb"], "c": ["m", "h", "ct", "cc", "e", "f", "cr", "tc", "r", "z", "u", "cm", "ec", "bc", "t", "k", "cu", "uc", "p", "nc", "count", "g", "d", "v", "arc", "ctx", "dc", "ce", "lc", "n", "unc", "C", "l"], "cnt": ["countcount", " cust", " cvt", "cnc", "pcvt", "cct", "pcct", "pcust", "cNT", " Cvt", "Cnc", "nnc", "ncount", "pcnt", " cnc", " Cust", "nnt", " Cct", "cvt", "Cnt", "countNT", " ccount", "ctx", "cust", "counttx", "countnt", " Cnt", "CNT", "ccount", "Ctx", " cNT", "Ccount", "nNT", " cct", " ctx"], "i": ["ii", "phi", "m", "xi", "me", "j", "multi", "sim", "fi", "ri", "s", "it", "ji", "f", "ik", "q", "u", "ci", "di", "I", "k", "mi", "ie", "gi", "index", "mu", "li", "ei", "si", "point", "pi", "iq", "ti", "iter", "d", "v", "cli", "ij", "zi", "ui", "ini", "ic", "ai", "us", "chain", "iu", "n", "ix", "ind", "ip", "y", "o", "is", "im", "l", "qi", "ki"], "x": ["check", "xi", "rx", "xp", "xe", "xs", "dx", "z", "zx", "mx", " xx", "cross", "xxxxxxxx", "xd", "xxx", "tx", "xes", "ux", "xy", "ax", "nex", "xa", "ex", "v", "yx", "xxxx", "xf", "xx", "xt", "ix", "sex", "xc", "hex", "px", "cox", "fx", "X", "wx"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\t \\n\t\t        int n = scanner.nextInt();\\n\t\t        int tarop = 0;\\n\t\t        int hanakop = 0;\\n\t\t        String tarow;\\n\t\t        String hanakow;\\n\t\t \\n\t\t        for(int i = 0; i < n; i++){\\n\t\t            tarow=scanner.next();\\n\t\t            hanakow=scanner.next();\\n\t\t            if(tarow.compareTo(hanakow) < 0)  {      hanakop =hanakop+ 3;}\\n\t\t            else if(tarow.compareTo(hanakow) > 0)   tarop = tarop+3;\\n\t\t            else {\\n\t\t                hanakop=hanakop+1;\\n\t\t                tarop=tarop+1;\\n\t\t            }\\n\t\t        }\\n\t\t \\n\t\t        System.out.println(tarop + \" \" + hanakop);\\n\t\t    }\\n\\n}\\n\\n", "target": "206", "substitutes": {"scanner": ["canter", " scaner", "caninner", " scann", "Scanener", "sanner", "Scanner", " scanener", "canener", "scann", "scaninner", "caner", "cann", "Scaner", " scaninner", "saninner", "canner", "scanener", "scanter", "scaner", "Scaninner", "santer", "sann", " scanter", "Scanter"], "n": ["ng", "m", "norm", "nan", "nn", "number", "net", "ln", "nia", "t", "ne", "network", "mn", "ni", "nm", "p", "nc", "gn", "nor", "np", "c", "N", "count", "nb", "d", "no", "nu", "num", "ns", "nl", "sn", "nw", "na", "size", "cn", "l", "nt"], "tarop": ["Tarcop", "tanoper", "taroper", "tapop", "thaiop", "harop", " tariop", "tanopy", "taop", "taropy", "tanopt", "tariop", "thaip", "taroop", "tarrel", "tanop", "cotopy", "torrop", "tharel", "tableoper", "taniop", "thaoper", "tableop", "tableOP", " taroop", "tapoop", "Taropt", "haroop", "torip", "tanoop", "torcop", "taip", "thaop", "tapip", "tableopt", "tanrop", "Tarrop", "Taroop", "Tarop", "tarOP", "hariop", "taropt", "tanip", "tacop", "Tariop", "cotip", "thaopt", "harrel", "tarip", " tarrel", "Tarip", "tarcop", "thaoop", "tharop", "tanOP", "Taropy", "cotiop", "torop", "cotop", "tapopt", "thaOP", "tarrop"], "hanakop": ["hanakoop", "hanekrop", "hanampop", "henekrop", "henakpl", "hanakrop", "hanekop", "sanakrop", "hanaphop", "hanaphrop", "hanakot", "harhakpop", "haniakopl", "hankop", "harhakol", "henakhop", "hanambOp", "hanhakol", "sanakop", "henakoe", "henkoe", "henakOP", "henajhop", "harakot", "hanajoop", "hanavhop", "hanikhip", "hanajop", "hanikhrop", "henakops", "harakpop", "hankoe", "hanikhop", "hanakopp", "hanhakops", "hanadop", "henakip", "hanakpl", "hanhakop", "hanaphpl", "haniakOp", "hanikop", "hanamborp", "hanavopp", "hanakhhop", "haniakOP", "sanakorp", "hanunkpop", "hanekpl", "haniakorp", "hanikopp", "henakrop", "henakop", "hanakopl", "hanambop", "sanakOp", "hankops", "hanakhops", "harhakot", "henkop", "henekopl", "hanakOP", "hanadopl", "hanavop", "hanekopl", "henakopp", "hanhakpop", "sanakaorp", "hanamol", "hanakarop", "sanakarop", "hanakaOp", "hanavoop", "hankhop", "hanunkot", "hanamop", "hanajhop", "harakol", "henekpl", "harakop", "haniakrop", "hanajopp", "henekop", "hanikoop", "hanakaop", "hanunkop", "hanamot", "hanakip", "hanakhop", "hanakol", "henakoop", "hanadip", "haniakip", "henekip", "hanikhpl", "henajopp", "harhakop", "hanakaorp", "hanekOP", "henekOP", "hanakops", "hanakorp", "sanakaOp", "henakopl", "henkops", "sanakaop", "hanambrop", "hanakpop", "henajop", "hanakhoe", "henkhop", "hanunkol", "haniakop", "hanhakot", "hanakOp", "hanaphip", "hanhakoe", "henajoop", "hanakoe", "hanhakhop", "hanekip", "hanadOP"], "tarow": ["darowe", "tanowe", "tarob", " tarowan", "tanowan", " tarob", "traw", "Tarowan", "taraw", "tgow", "tanow", "tanop", "tarower", "tkowe", "tgower", "trow", "trop", " tarowe", "tarowe", "Tarowe", "tanew", "hanowe", "tgowe", "tanob", "Tarew", "tkow", "tarew", "darower", "hanob", "tgro", "tarowan", "hanro", "hanop", "hanower", " taraw", "darro", "tarro", "darow", "tkop", "hanow", "trowe", "Tarow", "tkaw", " tarew"], "hanakow": ["hanakows", "haniakow", "hanahow", "hanakaow", "hanakower", "hankows", "henekower", "hankowe", "hanakiower", "hanakaw", "hanakog", "hanakowe", "henekaw", "kinakaow", "haniakog", "hanakaaw", "hanajOW", "harazow", "henekows", "kinakop", "kinakower", "henakow", "hanakhow", "hanahower", "haniakov", "henakaOW", "hanakhower", "kinakaows", "henakower", "hanekower", "harazov", "hanekows", "hankog", "hankov", "haniakowe", "henakaaw", "hankaw", "harakowe", "hanazog", "hanakhows", "harazog", "hanazov", "henakaw", "hanakiow", "hanakaows", "hanajow", "hanahop", "henakaow", "hanajows", "kinakaop", "kinakows", "henekow", "hanakaOW", "hanajaw", "hanakaop", "hanekOW", "kinakow", "harakov", "hanakhop", "harakog", "hankow", "hanakaower", "henakOW", "hanahows", "henakows", "hanekow", "hanakov", "hanakiaw", "kinakaower", "henakaows", "hanakOW", "hankower", "harakow", "harazowe", "hanazow", "hanakiows", "hanekaw", "hanazowe"], "i": ["ii", "phi", "m", "gu", "xi", "j", "sim", "multi", "init", "bi", "it", "hi", "q", "ci", "di", "I", "mi", "ie", "gi", "li", "ei", "si", "pi", " ii", "iter", "ex", "ti", "sql", "cli", "zi", "ui", "ms", "ini", "ai", "ic", "us", "iu", " j", "err", "ix", "ind", "id", "ip", "is", "x", "im", "batch", "qi"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\npublic static void main(String[] args){\\n\tScanner sc = new Scanner(System.in);\\n\tint a = sc.nextInt();\\n\tint b = sc.nextInt();\\n\tint c = sc.nextInt();\\n\tint d = sc.nextInt();\\n\tif(a >= c) {\\n\t\tif(a >= d) {\\n\t\t\tSystem.out.println(0);\\n\t\t} else if(a <= d && b >= d) {\\n\t\t\tSystem.out.println(d - a);\\n\t\t} else if(b <= d) {\\n\t\t\tSystem.out.println(b - a);\\n\t\t}\\n\t} else {\\n\t\tif(c >= b) {\\n\t\t\tSystem.out.println(0);\\n\t\t} else if(c <= b && b <= d) {\\n\t\t\tSystem.out.println(b- c);\\n\t\t} else if(b >= d) {\\n\t\t\tSystem.out.println(d - c);\\n\t\t}\\n\t}\\n}\\n}\\n", "target": "47", "substitutes": {"sc": ["out", "tch", "system", "cc", "tc", "cr", "ss", "rc", "ko", "sb", "cl", "bc", "cs", "cont", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ck", "mc", " scr", "nc", "scl", "sh", "si", "SC", "gc", "sw", "inc", "ctx", "fc", "st", "sv", "lc", "scan", "sp", "asc", "conv", "cgi", "ctrl", "sch", "sec", "usc", "syn", "sq"], "a": ["act", "la", "oa", "s", "ap", "sa", "i", "e", "f", "da", "r", "am", "t", "at", "A", "au", "area", "ab", "ca", "ak", "ma", "app", "ac", "p", "ba", "ea", "ao", "acc", "ta", "an", "ad", "aa", "ia", "aj", "ar", "g", "ga", "ai", "as", "alpha", "pa", "va", "ach", "x", "al", "l", "ae"], "b": ["B", "out", "h", "m", "eb", "ob", "j", "s", "bo", "br", "i", "e", "bi", "f", "it", "bl", "r", "be", "z", "u", "fb", "sb", "by", "bc", "bs", "t", "ab", "cb", "gb", "ib", "bis", "bb", "back", "bd", "p", "ba", "db", "rb", "nb", "g", "v", "mb", "n", "to", "y", "o", "reb", "l", "wb"], "c": ["m", "h", "ct", "con", "s", "can", "cc", "e", "i", "f", "cr", "tc", "rc", "r", "u", "ci", "cm", "cs", "bc", "cd", "t", "com", "ec", "cb", "ch", "ca", "cf", "cu", "uc", "ac", "p", "w", "cut", "v", "g", "fc", "ic", "co", "dc", "ce", "lc", "n", "err", "o", "unc", "C", "cn", "l", "cp"], "d": ["out", "h", "m", "fd", "ct", "s", "i", "e", "it", "f", "da", "admin", "in", "r", "z", "be", "u", "t", "dd", "D", "di", "cd", "dev", "dt", "dec", "bd", "p", "db", "ad", "w", "g", "v", "pd", "dc", "de", "div", "n", "ds", "ind", "id", "sd", "o", "del", "dh", "l"]}}
{"code": "\\n\\nimport java.io.*;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    public static void main(String[] args) throws IOException {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        Task solver = new Task();\\n//        int t = in.nextInt();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class Task {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) throws IOException {\\n            int n = in.nextInt();\\n            for (int i = 0; i < n; i++) {\\n                int num = in.nextInt();\\n                // if it is even number\\n                if ((num & 1) == 0){\\n                    if (!(num % 3 == 0 || num % 5 == 0)){\\n                        out.println(\"DENIED\");\\n                        return;\\n                    }\\n                }\\n            }\\n            out.println(\"APPROVED\");\\n        }\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        public double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public char nextChar() {\\n            return next().charAt(0);\\n        }\\n\\n        public String nextLine() throws IOException {\\n            return reader.readLine().trim();\\n        }\\n    }\\n}\\n", "target": "113", "substitutes": {"inputStream": ["inputReader", "sampleReader", " inputReader", "instream", "samplestream", "outputSteam", "inputstream", "inputSteam", " inputSteam", "imagestream", "imageSteam", "sampleSteam", "sampleStream", "inStream", "imageReader", "outputstream", " inputstream", "imageStream", "inSteam"], "outputStream": ["responseFile", "outputWriter", " outputFile", "outputStreamer", " outputStreamer", "outStream", "OutputWriter", " outputSteam", "outputSteam", "OutputSteam", "outSteam", "inputSteam", "outStreamer", "OutputFile", "outputFile", "outputView", "OutputStream", "responseStream", "responseWriter", "responseSteam", "inputView", "inputStreamer", " outputView", "outView", " outputWriter"], "in": ["inf", "In", "m", "h", "s", "i", "run", " din", "r", "file", "user", "body", "re", "rin", "reader", "read", "IN", "info", "on", "gin", "null", "en", "c", "ins", "inner", "inn", "inc", "iter", "get", "cin", "io", "input", "all", "bin", "ini", "ai", "thin", "ind", "din", "err"], "out": ["b", "s", "error", "put", "net", "r", "OUT", "user", "temp", "t", "exit", "outs", "info", "exec", "ch", "result", "sys", "client", "Out", "log", "report", "p", "print", "ex", "write", "w", "res", "d", "v", "output", "io", "name", "n", "table", "o", "cn", "sum", "err"], "solver": ["soln", "resolver", "Soln", " solution", "resolve", "solve", "solution", "resoln", "resolution", "Solution", " solve", "Solver", "Solve", " soln"]}}
{"code": "import java.util.Scanner;\\n\\n\\nclass Solve{\\n\tstatic int INF = 10000;\\n\t\\n\t public void solve() {\\n\t\t Scanner sc = new Scanner(System.in) ;\\n\t\t int S = sc.nextInt();\\n\t\t int f=S/100;\\n\t\t int b = S%10+((S/10)%10)*10;\\n\t\t \\n\t\t if(b>0 &&b<=12) {\\n\t\t\t \\n\t\t\t if(f==0||f>12) {\\n\t\t\t\t System.out.println(\"YYMM\");\\n\t\t\t\t \\n\t\t\t }else {\\n\t\t\t\t System.out.println(\"AMBIGUOUS\");\\n\t\t\t }\\n\t\t }else if(f>=1&&f<=12) {\\n\t\t\t if(b==0||b>12) {\\n\t\t\t\t System.out.println(\"MMYY\");\\n\t\t\t }else {\\n\t\t\t\t System.out.println(\"AMBIGUOUS\");\\n\t\t\t }\\n\t\t }else {\\n\t\t\t System.out.println(\"NA\");\\n\t\t }\\n\t\t \\n\t\t \\n\\n;\\n\t}\\n}\\n\\n\\n\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tSolve s= new Solve();\\n\t\ts.solve();\\n\\n\t}\\n}", "target": "5", "substitutes": {"INF": ["NFF", "INFF", " INFB", "Nf", "INFB", "NFB", "INf", " INTERFF", " INf", " INTERF", " INTERf", " INTERFB", " INFF", "NF"], "sc": [" Sc", "out", "system", "cc", "Scan", "ss", "tc", "cr", "rc", "r", "cl", "sb", "bc", "cs", "desc", "ec", "reader", "esc", "sync", "Sc", "se", "ch", "pc", "osc", "isc", "uc", "sys", "proc", "ner", "scl", "c", "nc", "SC", "gc", "sw", "txt", "src", "sv", "nl", "scan", "sp", "asc", "sch", "sq"], "S": ["B", "SM", "P", "F", "AS", "G", "CS", "NS", "I", "D", "A", "L", "SA", "V", "SF", "SE", "SI", "SP", "H", "N", "BS", "IS", "Y", "T", "J", "SU", "Q", "SR", "SS", "MS", "GS", "U", "M", "R", "TS", "C", "Z", "SB", "X", "JS"], "f": ["fl", "aff", "family", "m", "h", "F", "fre", "fi", "j", "lf", "i", "e", "fm", "uf", "r", "u", "fb", "fa", "fun", "t", "format", "k", "function", "fe", "cf", "p", "fp", "c", "conf", "of", "w", "g", "d", "v", "a", "fc", "rf", "df", "xf", "n", "sf", "fac", "fr", "o", "x", "func", "l", "tf", "ff"], "b": ["B", "m", "h", "eb", "ob", "j", "br", "i", "bi", "bf", "r", "sb", "be", "z", "fb", "body", "by", "bs", "bc", "t", "lib", "ab", "cb", "gb", "ib", "bis", "buffer", "bg", "bb", "back", "p", "c", "ba", "db", "rb", "nb", "g", "d", "v", "a", "mb", "bp", "no", "big", "base", "n", "to", "bound", "y", "reb", "l"], "s": ["rs", "vs", "h", "m", "e", "xs", "fs", "ss", "ims", "r", "gets", "abs", "cs", "t", "acs", "os", "qs", "gs", "p", "c", "w", "g", "d", "v", "a", "ms", "ws", "ns", "ges", "n", "ds", "stats", "js", "ls", "ses", "ts", "ches", "o", "es", "l"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int A[] =new int[N];\\n        int num=1;\\n        int count=0;\\n        \\n        for(int i=0;i<N;i++){\\n            A[i]=sc.nextInt();\\n            \\n        }\\n        \\n        for(int j=0;j<N;j++){\\n            if(num==2){\\n                System.out.println(count);\\n                return;\\n            }\\n            num=A[num-1];\\n            count++;\\n            \\n        }\\n        \\n        System.out.println(-1);\\n        \\n        \\n        \\n    }\\n}\\n", "target": "175", "substitutes": {"sc": [" Sc", "system", "cc", "cle", "tc", "cr", "ss", "capt", "rc", "cl", "sb", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "c", "nc", "SC", "sw", "gc", "inc", "fc", "sv", "scan", "lc", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "sq"], "N": ["B", "NH", "P", "F", "UN", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "G", "NS", "I", "D", "NUM", "NO", "NP", "NC", "NB", "L", "ALL", "ND", "V", "TN", "NM", "Net", "NT", "NA", "T", "K", "J", "Q", "NE", "n", "EN", "M", "R", "C", "X", "O"], "A": ["AT", "B", "AC", "P", "At", "AA", "CA", "As", "S", "BA", "mA", "I", "AB", "D", "L", "SA", "MA", "V", "This", "ACC", "H", "ACT", "AF", "AM", "An", "a", "NA", "T", "HA", "J", "Alpha", "Array", "JA", "U", "M", "R", "The", "C", "X", "AP"], "num": ["mult", "offset", "out", "um", "current", "con", "mon", "cache", "nn", "Num", "number", "top", "NUM", "node", "mn", "result", "index", "nm", "mu", "next", "p", "acc", "np", "c", "conf", "obj", "draw", "nb", "cum", "cal", "no", "nu", "total", "dim", "coord", "uu", "n", "ind", "na", "id", "conv", "alph", "max", "old", "nom", "sum", "x", "valid", "nt"], "count": ["um", "ct", "ount", "cache", "error", "number", "must", "ctr", "cast", "hold", "t", "empty", "coll", "info", "counter", "index", "zero", "start", "list", "report", "next", "c", "code", "comment", "iter", "nb", "other", "name", "total", "coord", "process", "type", "length", "n", "Count", "ind", "cond", "id", "child", "col", "max", "size", "C", "sum", "stat", "err", "find", "found", "nt"], "i": ["ii", "phi", "xi", "inter", "sim", "multi", "ri", "it", "bi", "init", "hi", "in", "ims", "u", "ci", "di", "I", "k", "mi", "rel", "this", "ie", "info", "index", "li", "ei", "si", "inner", "pi", "ex", "iq", "ti", "v", "a", "my", "ia", "ij", "zi", "ui", "io", "ini", "ai", "us", "uci", "iu", "et", "ix", "id", "ip", "y", "is", "uri", "x", "im", "ori", "ir", "qi"], "j": ["oj", "b", "m", "ja", "br", "it", "ji", "jj", "jc", "q", "z", "uj", "bj", "ph", "k", "jump", "att", "json", "pr", "kj", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "J", "dj", "jas", "us", "n", "js", "y", "x", "im", "l", "job", "ge"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.math.*;\\n\\npublic class Main {\\n    private static Scanner sc;\\n\\n    public static void main(final String[] args) {\\n        final Main instance = new Main();\\n        sc = instance.new Scanner();\\n        instance.solve();\\n    }\\n\\n    private class Scanner {\\n        String[] s;\\n        int i;\\n        BufferedReader br;\\n        String regex = \" \";\\n\\n        public Scanner() {\\n            s = new String[0];\\n            i = 0;\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        @Override\\n        protected void finalize() throws Throwable {\\n            try {\\n                super.finalize();\\n            } finally {\\n                destruction();\\n            }\\n        }\\n\\n        private void destruction() throws IOException {\\n            if (br != null)\\n                br.close();\\n        }\\n\\n        public String next() throws IOException {\\n            if (i < s.length)\\n                return s[i++];\\n            String st = br.readLine();\\n            while (st == \"\")\\n                st = br.readLine();\\n            s = st.split(regex, 0);\\n            i = 0;\\n            return s[i++];\\n        }\\n\\n        public int nextInt() throws NumberFormatException, IOException {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public Long nextLong() throws NumberFormatException, IOException {\\n            return Long.parseLong(next());\\n        }\\n\\n        public Double nextDouble() throws NumberFormatException, IOException {\\n            return Double.parseDouble(next());\\n        }\\n    }\\n\\n    private void solve() {\\n        try {\\n\\n            int n = sc.nextInt();\\n            long[] A = new long[n];\\n            for (int i = 0; i < n; i++) {\\n                A[i] = sc.nextLong();\\n            }\\n            int count = 0;\\n            for (long l : A) {\\n                while (l % 2 == 0) {\\n                    l /= 2;\\n                    count++;\\n                }\\n            }\\n            System.out.println(count);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n\\n}\\n", "target": "39", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "pb", "rc", "cl", "cv", "bc", "cs", "ec", "inst", "esc", "sync", "Sc", "ctl", "pc", "osc", "ch", "ca", "isc", "NC", "uc", "proc", "ac", "mc", "scl", "c", "nc", "sh", "mp", "SC", "gc", "sr", "ctx", "fc", "arc", "sv", "dc", "lc", "scan", "RC", "sp", "asc", "sch", "anc", "sec", "usc", "syn", "sq"], "instance": ["out", "m", "class", "installed", "amp", "sim", "e", "init", "f", "test", "shared", "alloc", "rc", "member", "inst", "wrapper", "original", "parent", "this", "once", "result", "share", "client", "example", "p", "ances", "c", "inner", "local", "obj", "sw", "a", "server", "asso", "self", "initial", "runner", "INST", "Instance", "o", "ance", "x", "anc", "ANCE", "sup", " inst", "master"], "s": ["hs", "rs", "b", "h", "m", "its", "ats", "xs", "str", "ings", "ss", "fs", "ims", "S", "sb", "r", "bs", "cs", "parts", "os", "sels", "ments", "erences", "eds", "gs", "p", "c", "ists", "ords", "ins", "sw", "w", "g", "d", "strings", "a", "v", "sv", "ms", "results", "ws", "ns", "ants", "sts", "sp", "ds", "ps", "stats", "als", "js", "services", "ls", "ts", "is", "ses", "states", "es", "resses", "sq"], "i": ["h", "ji", "hi", "q", "in", "r", "ci", "mi", "li", "v", "ij", "ui", "ini", "ai", "us", "ix", "m", "multi", "e", "bi", "ei", "c", "status", "pi", "a", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ki", "ii", "fi", "ri", "init", "di", "k", "info", "gi", "index", "si", "ti", "io", "\u0438", "ind", "ip", "o", "PI", "ori", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "ims", "u", "I", "ie", "internal", "p", "iter", "used", "iu", "is", "x", "oi"], "br": ["bridge", "b", "lr", "Br", "shr", "bl", "bsp", "str", "cr", "bf", "r", "dr", "kr", "bs", "bc", "buf", "ch", "pr", "reg", "bb", "bd", "ba", "bm", "hr", "rb", "bp", "bro", "bre", "brace", "gr", "vr", "bt", "tr", "sp", "fr", "bh", "ber", "bn", "nah", "wr", "mr", "BR"], "regex": ["newgex", "mpattern", "recre", "crepex", "repex", "ererex", "eregex", "newcre", "mrx", "erepex", "roba", "rerx", "rerex", "crerex", "mcre", " repattern", " rerx", "cregex", " recre", "creba", "rorex", "newrx", "ropex", "newpattern", "reba", "ereba", "mgex", "rogex", "repattern"], "st": ["rd", "ost", "sta", "ct", "tmp", "sth", "bl", "str", "ss", "r", "kt", "nd", "t", "cont", "ld", "th", "sty", "art", "stack", "ST", "pt", "fe", "std", "start", "first", "line", "est", "stop", "sh", "stri", "sw", "style", "src", "St", "mt", "ust", "sv", "step", "sl", "const", "nl", "sn", "sts", "sp", "fr", "ts", "rest", "stage", "tt", "ste", "stable", "ut", "nt"], "n": ["ng", "m", "j", "nan", "nn", "net", "number", "r", "z", "ln", "t", "k", "ne", "mn", "nm", "p", "len", "nc", "c", "np", "ot", "N", "nb", "d", "v", "a", "total", "nu", "no", "name", "num", "ns", "nl", "sn", "na", "o", "size", "x", "nt"], "A": ["AC", "B", "AT", "E", "P", "GA", "LA", "At", "AA", "S", "As", "CA", "BA", "G", "AN", "mA", "D", "I", "AB", "AH", "W", "L", "SA", "AL", "V", "MA", "H", "ACT", "N", "AF", "An", "AM", "AV", "AU", "a", "Y", "T", "K", "Area", "Ar", "IA", "Array", "AR", "M", "The", "C", "AP"], "count": ["h", "flag", "ount", "test", "cache", "number", "z", "continue", "t", "cont", "coll", "L", "result", "counter", "index", "line", "log", "list", "level", "report", "len", "acc", "c", "amount", "print", "conf", "comment", "draw", "nb", "d", "v", "add", "total", "all", "num", "length", "base", "Count", "err", "cond", "val", "frequency", "call", "size", "sum", "OUNT", "find", "found", "nt"], "l": ["label", "fl", "b", "h", "m", "la", "j", "e", "lo", "f", "tl", "lag", "r", "z", "ln", "u", "ml", "cl", "ql", "el", "ld", "k", "lock", "lp", "pl", "L", "ll", "li", "p", "len", "c", "kl", "jl", "lit", "le", "d", "v", "a", "sl", "lv", "hl", "nl", "lc", "lt", "dl", "o", "x", "al"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n  public static void heisei(){\\n    System.out.println(\"Heisei\");\\n  }\\n\\n  public static void tbd(){\\n    System.out.println(\"TBD\");\\n  }\\n\\n\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n\\n    String s = sc.next();\\n    String ss = s.replace(\"/\",\"\");\\n\\n    if(ss.compareTo(\"20190430\")<=0){\\n      heisei();\\n    }else{\\n      tbd();\\n    }\\n\\n  }\\n}", "target": "163", "substitutes": {"sc": ["cc", "cle", "cr", "tc", "capt", "rc", "pb", "cl", "bc", "cs", "sac", "desc", "ec", "esc", "sync", "Sc", "dec", "isc", "osc", "pc", "enc", "ch", "uc", "sys", "proc", "mc", "scl", "c", "nc", "SC", "gc", "sv", "nl", "dc", "lc", "scan", "sp", "asc", "sch", "sec", "anc", "usc", "sq"], "s": ["rs", "h", "string", "its", "ats", "i", "str", "fs", "f", "in", "S", "sb", "se", "qs", "sys", "gs", "p", "c", "space", "st", "v", "strings", "sv", "ws", "sl", "ns", "ess", "n", "sts", "sp", "ps", "stats", "js", "ls", "ts", "iss", "sq"], "ss": ["oss", "sol", "pps", "aws", "sb", "ass", "bs", "cs", "rss", "tis", "sys", "hess", "ssh", "sh", "si", "ks", "su", "sis", "\u00df", "ssl", "sv", "ms", "uses", "pse", "ns", "ws", "ess", "yy", "xx", "SS", "css", "sf", "ds", "ps", "sd", "ls", "ts", "ses", "tt", "iss", "ress", "sq"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try (Scanner sc = new Scanner(System.in)) {\\n            int n = sc.nextInt();\\n            int m = sc.nextInt();\\n\\n            int ll = 0;\\n            int rr = n;\\n            for (int i = 0; i < m; i++) {\\n                int li = sc.nextInt();\\n                int ri = sc.nextInt();\\n                if (li > ll) {\\n                    ll = li;\\n                }\\n                if (ri < rr) {\\n                    rr = ri;\\n                }\\n            }\\n            int ans = rr - ll + 1;\\n            if (ans < 0) {\\n                ans = 0;\\n            }\\n            System.out.println(ans);\\n        }\\n    }\\n}", "target": "124", "substitutes": {"n": ["j", "nan", "nn", "number", "in", "r", "NR", "ln", "t", "nr", "k", "ne", "mn", "on", "nm", "en", "p", "c", "N", "nb", "g", "d", "v", "nu", "a", "name", "w", "all", "ns", "num", "nl", "sn", "na", "y", "o", "x", "l", "nt"], "m": ["mat", "b", "h", "j", "f", "dm", "r", "om", "cm", "km", "t", "mi", "mn", "med", "md", "ma", "mu", "p", "mc", "c", "bm", "gm", "d", "v", "mt", "ms", "tm", "M", "mm", "y", "o", "l", "man", "mr"], "ll": ["fl", "sol", "lr", "lf", "lu", "dll", "bl", "tl", "ul", "nn", "LL", "ml", "ln", "rl", "gz", "cl", "ill", "ld", "coll", "oll", "llo", "pl", "lb", "sys", "wl", "kl", "gn", "nz", "le", "wn", "hl", "lv", "nl", "lc", "rill", "rol", "dl", "ls", "ell", "l", "nt"], "rr": ["rd", "rs", "rx", "lr", "rio", "rid", "rar", "rc", "rl", "r", "dr", "irm", "kr", "rin", "nr", "ror", "bb", "rn", "raf", "vd", "hr", "rer", "rh", "rb", "sr", "aa", "rog", "rt", "rm", "adr", "rf", "rpm", "RR", "vr", "rol", "ra", "fr", "err", "ir", "mr"], "i": ["ii", "phi", "gu", "xi", "j", "sim", "multi", "init", "bi", "it", "hi", "u", "ci", "di", "I", "mi", "info", "gi", "ni", "ei", "si", "pi", "iter", "ti", "cli", "zi", "ui", "ini", "ai", "ic", "iu", "ix", "id", "ip", "y", "is", "im", "qi", "ki"], "li": ["ii", "phi", "la", "fi", "sol", "lu", "lin", "bi", "lo", "lis", "lan", " Li", "ln", "ci", "ql", "di", "lig", "mi", "ie", "pl", "gi", "lie", "ni", "si", "kl", "pi", "le", "sql", "ti", "cli", "zi", "Li", "ui", "ini", "sl", "LI", "dl", "ip", "ly", "ls", "is", "l"], "ri": ["ris", "rd", "fi", "udi", "tri", "RI", "bi", "rio", "rid", "ani", "rl", "r", "ci", "rin", "ru", "di", "rob", "mi", "gi", "rik", "cu", "vi", "ni", "ati", "ro", "si", "stri", "pi", "ti", "io", "iri", "zi", "ini", "ai", "ric", "ra", "ry", "uri", "ori", "rt", "ki"], "ans": ["uns", "rs", "vs", "rans", "ats", "aos", "xs", "ann", "rors", " spans", "vals", "ens", "des", "cs", "aus", "outs", "ums", "ags", "ops", "lets", "anes", "offs", "ots", "eds", "aps", "gs", "anks", "ks", "ends", "ins", "ols", "an", "lines", "ros", "aces", "cons", "ars", "ras", "names", "ms", "ents", "orts", "ns", "arms", "ows", "ants", "ids", "orders", "ons", "ates", "nets", "arts", "ips", "ls", "ANS", "amps", "ations", "ores", "actions", "ads"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n  public static void main (String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n    \\n    long A = sc.nextLong();\\n    long B = sc.nextLong();\\n    long C = sc.nextLong();\\n    long D = sc.nextLong();\\n\\n    sc.close();\\n\\n    long ansA = func(A-1,C,D);\\n\\n    long ansB = func(B,C,D);\\n\\n    System.out.println((long)(ansB - ansA));\\n    \\n  }\\n\\n  public static long func(long x, long c, long d){\\n\\n    long gcd = gcd(c,d);\\n    \\n    long lcm = c / gcd * d;\\n    \\n    long ans = x - x/c - x/d + x/lcm;\\n\\n    return ans;\\n  \\n  }\\n\\n  public static long gcd(long x, long y){\\n\\n    if (x < y) {\\n      long t = x;\\n      x = y;\\n      y = t;\\n    }\\n\\n    while (y > 0) {\\n      long r = x % y;\\n      x = y;\\n      y = r;\\n    }\\n\\n    return x;\\n    \\n  }\\n\\n}", "target": "9", "substitutes": {"sc": [" Sc", "sa", "cc", "tc", "cr", "ss", "rc", "ko", "cl", "sb", "bc", "cs", "ec", "desc", "cont", "esc", "row", "sync", "Sc", "ctl", "th", "go", "ch", "pc", "osc", "isc", "uc", "sys", " SC", "mc", "scl", "nc", "sh", "sub", "SC", "gc", "inc", "sw", "fc", "arc", "ctx", "st", "jp", "sv", "lc", "scan", "sp", "asc", "conv", "ctrl", "sch", "sec", "anc", "syn", "sq"], "A": ["AC", "AT", "E", "P", "At", "AD", "AA", "As", "S", "Ax", "CA", "G", "ABC", "BA", "mA", " a", "AB", "IDA", "I", "L", "SA", "AL", "V", "H", "N", "AF", "An", "AU", "a", "Y", "T", "Ar", "IA", "Array", "AR", "M", "R", "X", "EA", "AP"], "B": ["E", "b", "BD", "P", "F", "BB", "CB", "S", "BM", "BA", "G", "I", "AB", "L", "V", "EB", "BI", "TB", "N", " b", "BS", "Y", "T", "DB", "J", "M", "R", "Bi", "Z", "BE", "O", "Bs", "BC"], "C": ["E", "P", "F", "Co", "DC", "CB", "CM", "S", "CA", "G", "CR", "CS", "I", "W", "CP", "L", "V", "CD", "H", "N", "SC", "_", "CF", "Y", "T", "K", "Col", "Q", "CT", "CC", "Count", "Cs", "U", "M", "R", "Z", "O", "BC"], "D": ["DM", "E", "De", "P", "F", "DF", "DE", "DC", "DL", "DN", "DEV", "S", "DS", "G", "Dec", "Def", "W", "L", "DP", "V", "CD", "N", "DI", "DH", "T", "Y", "DB", "DT", "DA", "DR", "Ds", "M", "R", "DD", "Z", "O", "LD"], "ansA": ["insB", "ensA", "lsAn", "vsN", " ansN", " ansa", "vsAR", "antsA", "vsA", "ansAn", "antsB", "insA", "insAn", "insAA", "antsAn", "vsa", " ansAR", "lsB", "lsAA", "ensN", "ensAR", "lsA", "antsAA", "ansa", "ensa", "ansAA", "ansAR", "ansN"], "ansB": ["ansT", "valsAB", " plansSB", "onsB", "linesAB", "atsAB", " plansY", "onsY", "atsb", " plansB", "ansb", "onsT", "onsSB", "linesBs", "atsB", "valsb", "ansBs", "linesB", "linesb", " ansSB", "valsBs", "ansSB", "atsBs", " plansT", "ansAB", "ansY", "valsB", " ansY", " ansT"], "x": ["b", "h", "xi", "rx", "m", "j", "xp", "s", "i", "e", "xs", "f", "dx", "ox", "z", "in", "u", "mx", " xx", "xxx", "tx", "ux", "on", "xy", "ax", "index", "p", "xa", "ex", " X", "an", "w", "g", "v", "a", "xf", "xt", "xx", "n", "ix", "xc", "o", "px", "fx", "l", "X", "wx"], "c": ["b", "m", "h", "ct", "cc", "e", "i", "f", "tc", "cr", "z", "u", "cm", "cd", "k", "ca", "cu", "ac", "p", "g", "v", "a", "fc", "ic", "co", "dc", "lc", "n", "xc", "o", "unc", "l"], "d": ["b", "m", "fd", "j", "i", "e", "f", "da", "dm", "dx", "z", "u", "cd", "di", "dd", "dt", "bd", "p", "ad", "w", "g", "v", "a", "dc", "n", "sd", "o", "dn", "l", "dL"], "gcd": ["lCD", "gld", "gcm", "gccom", "lmd", "glcd", "Gcd", "ldc", "gccm", "glCD", "Gcom", "lcd", "glld", "gccd", "Gcm", "lct", "gct", "lld", "Gmd", "gdc", "gCD", "GCD", "gmd", " gcom", "gsc", "mct", "gcmd", "mcm", " gdc", "lsc", " gld", " gsc", " gct", " gCD", "gldc", "Gsc", " gmd", " gcm", "mmd", "gcom", "mcd"], "lcm": ["lcom", "gcm", " lcr", "gcr", "bcr", "bcm", "lcd", " lcom", "bcom", "bmc", " lmc", "Lmc", " lcd", "lmc", "Lcm", "Lcr", "Lcd", "lcr", "gmc", "gcom"], "ans": ["nan", "ats", "ies", "xs", "pan", "ann", "ians", "vals", "ens", "ands", "cs", "outs", "os", "lets", "ums", "ags", "anes", "ots", "eds", "gs", "ins", "an", "lines", "ions", "ars", "names", "ms", "ents", "as", "ns", "ants", "ons", "ates", "scan", "ds", "als", "ANS", "ints", "amps", "ations", "es", "cn", "olds", "ays", "actions"], "y": ["ty", "b", "h", "uy", "yer", "year", "j", "m", "ny", "axy", "i", "ies", "e", "wy", "ye", "ya", "z", "by", "yt", "yi", "iy", "oy", "py", "vy", "ch", "sky", "sys", "xy", "ym", "ay", "p", "gy", "ot", "dy", "ys", "g", "v", "a", "Y", "my", "ey", "yo", "ic", "cy", "hot", "yy", "sy", "yr", "xx", "n", "ry", "ly", "o"], "t": ["ty", "m", "h", "j", "i", "e", "f", "tc", "tg", "z", "at", "wt", "tz", "tx", "dt", "lat", "tw", "p", "ot", "ta", "txt", "w", "g", "v", "a", "T", "n", "tr", "ts", "o", "vt", "tt", "l", "te"], "r": ["rd", "rs", "b", "h", "m", "rx", "j", "lr", "i", "e", "mr", "cr", "q", "rc", "z", "rar", "u", "dr", "right", "kr", "re", "rw", "nr", "rg", "er", "p", "ro", "rb", "w", "g", "v", "sr", "ar", "rt", "vr", "n", "fr", "R", "o", "l", "rr"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args) {\\n\tScanner scan = new Scanner(System.in);\\n\twhile (scan.hasNext()) {\\n\t    int count = 0;\\n\t    int n = scan.nextInt();\\n\t    int x = scan.nextInt();\\n\t    if (n == 0 && x == 0) {\\n\t\tbreak;\\n\t    }\\n\t    for (int i = 1; i < n - 1; i++) {\\n\t\tif (i > x) {\\n\t\t    break;\\n\t\t}\\n\t\tfor (int j = i + 1; j < n; j++) {\\n\t\t    if (j + i > x) {\\n\t\t\tbreak;\\n\t\t    }\\n\t\t    for (int k = j + 1; k < n + 1; k++) {\\n\t\t\tif (j + i + k > x) {\\n\t\t\t    break;\\n\t\t\t}\\n\t\t\tif (j + i + k == x) {\\n\t\t\t    count++;\\n\t\t\t    break;\\n\t\t\t}\\n\t\t    }\\n\t\t}\\n\t    }\\n\t    System.out.println(count);\\n\t}\\n    }\\n}", "target": "116", "substitutes": {"scan": ["range", "store", "save", "out", "san", "check", "clean", "system", "can", "skip", "see", "Scan", "nn", "ann", "in", "by", "re", "scroll", "set", "row", "read", "sync", "black", "connect", "se", "go", "seek", "info", "sys", "proc", "sc", "reach", "ner", "report", "en", "query", "sur", "send", "gate", "parse", "sql", "an", "gc", "sin", "get", "scale", "spin", "auto", "sv", "bin", "search", "na", "cgi", "stat", "sum", "find"], "count": ["out", "check", "quiet", "flag", "ount", "test", "cache", "number", "ctr", "body", "core", "cont", "coll", "read", "force", "result", "counter", "index", "depth", "list", "report", "c", "amount", "status", "score", "trace", "summary", "nb", "iter", "total", "process", "num", "state", "length", "Count", "cond", "child", "call", "size", "sum", "find", "found", "nt"], "n": ["ng", "m", "ct", "nan", "nn", "net", "fn", "z", "ln", "t", "ne", "mn", "network", "ll", "ni", "nm", "en", "len", "np", "nc", "nor", "ot", "c", "N", "an", "nb", "g", "w", "no", "nu", "name", "v", "names", " N", "ns", "un", "nl", "l", "sn", "nw", "na", "o", "dn", "cn", "nr", "nt"], "x": ["m", "xi", "rx", "xp", "xe", "e", "xs", "f", "ox", "z", "t", "xxx", "tx", "xml", "ux", "on", "index", "ax", "xy", "p", "c", "xa", "ex", "w", "v", "yx", "xxxx", "co", "xf", "xx", "xt", "ix", "xc", "inx", "y", "o", "px", "fx", "l", "X", "wx"], "i": ["ii", "phi", "xi", "inter", "sim", "ri", "it", "bi", "init", "ji", "ik", "hi", "ims", "in", "ci", "at", "di", "mi", "this", "ie", "ir", "ni", "li", "ei", "si", "inner", "pi", "iq", "ti", "v", "ia", "io", "ij", "zi", "ui", "ini", "ai", "ic", "ish", "iu", "ind", "ix", "ip", "y", "is", "im", "ori", "l", "ami", "qi", "ki"], "j": ["oj", "b", "h", "ja", "br", "it", "ji", "jj", "bi", "jc", "str", "ke", "q", "jac", "z", "be", "uj", "bj", "at", "jump", "rel", "jit", "ie", "ne", "json", "ib", "je", "pt", "pr", "ju", "kj", "er", "vol", "jl", "obj", "db", "jo", "g", "v", "aj", "jp", "ij", "dj", "err", "ind", "fr", "js", "to", "y", "is", "im", "l", "job", "ge"], "k": ["mk", "unk", "kar", "sk", "dk", "ke", "ko", "ik", "kn", "q", "z", "kt", "kr", "km", "ok", "ph", "wk", "th", "kh", "kind", "ak", "uk", "ck", "kj", "kid", "kl", "ka", "ks", "w", "ku", "g", "K", "ijk", "kk", "kw", "ark", "kg", "key", "ek", "tk", "ki"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String s = sc.next();\\n        int cnt = 0;\\n        String ABC = \"ABC\";\\n        for (int i = 0; i < n - 2; i++) {\\n            char a = s.charAt(i);\\n            char b = s.charAt(i + 1);\\n            char c = s.charAt(i + 2);\\n            String tmp = String.valueOf(a) + String.valueOf(b) + String.valueOf(c);\\n            if (tmp.equals(ABC) ) {\\n                cnt++;\\n            }\\n        }\\n        System.out.println(cnt);\\n    }\\n}\\n", "target": "110", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "ec", "desc", "cont", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "uc", "sys", "mc", "scl", "nc", "sci", "SC", "gc", "sw", "inc", "txt", "cons", "sv", "lc", "scan", "sp", "sel", "ser", "asc", "ctrl", "sch", "sec", "anc", "usc", "sq"], "n": ["ng", "m", "nan", "nn", "net", "number", "ln", "t", "ne", "network", "mn", "nm", "en", "len", "nc", "np", "nor", "gn", "N", "an", "nb", "d", "no", "nu", "name", "names", " N", "num", "ns", "un", "nl", "sn", "na", "x", "cn", "l", "nt"], "s": ["rs", "m", "h", "string", "http", "its", "ats", "str", "fs", "ss", "ims", "r", "S", "sb", "gets", "abs", "bs", "t", "os", "series", "qs", "sys", "spec", "gs", "p", "ins", "sql", "sw", "g", "v", "less", "sv", "ms", "sl", "ns", "sf", "sts", "ps", "js", "conv", "ts", "ls", "is", "l", "csv", "sq"], "cnt": ["account", "cnc", "acnt", "Cct", "cst", " cst", "cct", "acount", "cNT", "Cnc", "nnc", " Count", " cnc", " Cnc", "nnt", " Cct", "Cnt", "count", " ccount", "nst", " Cnt", "CNT", " count", "acNT", "ccount", "Count", " cNT", "Cst", "Ccount", "nNT", " cct"], "ABC": ["AC", "WS", "BB", "HK", "OK", "MX", "AA", "CB", "HTTP", "RFC", "CR", "RB", "NZ", "AB", "CSS", "CBC", "OB", "NC", "ASC", "LC", "TC", "XT", "CBS", "BS", "abc", "BBC", "CV", "BG", "PB", "RC", "ARB", "WB", "LAB", "ACK", "BTC", "HB", "AMP", "NBC", "OX", "C", "SB", "NULL", "X", "CC", "BC"], "i": ["ii", "phi", "gu", "xi", "m", "me", "j", "multi", "sim", "ri", "init", "bi", "it", "ji", "ik", "hi", "q", "ci", "di", "I", "mi", "my", "ie", "info", "go", "gi", "index", "slice", "ma", "li", "ei", "si", "point", "ski", "status", "pi", "sql", "ti", "io", "iri", "ij", "zi", "ui", "cli", "ini", "ai", "ic", "us", "iu", "ix", "ind", "id", "to", "ip", "is", "uri", "x", "im", "oi", "ori", "ami", "qi", "ki"], "a": ["act", "aaa", "sta", "la", "apa", "oa", "ap", "sa", "aq", "da", "r", "am", "era", "t", "el", "au", "acs", "ab", "art", "ca", "ak", "ma", "ac", "ao", "ba", "ea", "an", "aa", "d", "ia", "aj", "ar", "name", "ga", "as", "pa", "na", "va", "al", "l", "ae"], "b": ["B", "h", "eb", "ob", "j", "lab", "ble", "br", "bi", "bf", "r", "be", "by", "sb", "fb", "body", "z", "bs", "bc", "ab", "ib", "cb", "gb", "bis", "beta", "ubb", "bas", "bb", "back", "ba", "db", "rb", "nb", "g", "bot", "mb", "bar", " B", "wb", "erb"], "c": ["ct", "cc", "tc", "cr", "rc", "u", "ec", "bc", "cm", "t", "cont", "com", "cd", "desc", "cos", "cb", "ca", "pc", "cf", "cur", "cu", "crit", "fc", "etc", "or", "co", "chain", "ce", "dc", "lc", "cond", "unc", "C", "sec", "cod", "err"], "tmp": ["pty", "Temp", "aaa", "mk", "managed", "test", "cache", "tc", "needed", "temp", "lambda", "t", "LT", "xxx", "vP", "emp", "this", "TT", "vp", "pretty", "treatment", "perm", "MP", "repl", "result", "bow", "pkg", "template", "prefix", "mp", "obj", "mmm", "txt", "tv", "etc", "auto", "abc", "yy", "sq", "cop", "cmp", "partial", "tt", "prop", "csv", "tf"]}}
{"code": "import java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String line = br.readLine();\\n        double r = Double.parseDouble(line);\\n        System.out.println(String.format(\"%.6f %.6f\", r*r*Math.PI, 2*r*Math.PI));\\n    }\\n}", "target": "239", "substitutes": {"br": ["bridge", "b", "lr", "Br", "shr", "bl", "str", "cr", "dr", "be", "kr", "bc", "buf", "gb", "ch", "pr", "bb", "er", "bd", "ba", "bm", "hr", "rb", "sr", "bp", "bro", "gr", "vr", "bt", "yr", "div", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "browser", "mr", "BR"], "line": ["out", "message", "string", "page", "lf", "lin", "char", "str", "command", "liner", "link", "in", "file", "ln", "row", "frame", "result", "log", "entry", "next", "comment", "data", "lines", "ine", "output", "side", "eline", "raw", "block", "chain", "cell", "nl", "text", "lc", "n", "inline", "piece", "Line", "fr", "word", "LINE", "l"], "r": ["rd", "rs", "b", "h", "m", "s", "j", "lr", "i", "e", "f", "q", "rc", "z", "dr", "u", "re", "pair", "t", "nr", "k", "ur", "rat", "attr", "result", "rr", "er", "rad", "p", "c", "hr", "rb", "rh", "sr", "w", "d", "v", "a", "g", "rank", "res", "ar", "rt", "rf", "n", "err", "fr", "R", "x", "l", "mr"]}}
{"code": "// package div2658.dpatcoder;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    static class FastReader {\\n\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        }\\n\\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        }\\n\\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n\\n    }\\n\\n    public static void main(String[] args) {\\n        FastReader fs = new FastReader();\\n        int n = fs.nextInt();\\n        int k = fs.nextInt();\\n        int[] h = new int[n];\\n        \\n        for (int i = 0; i < n; i++) {\\n            h[i] = fs.nextInt();\\n        }\\n\\n        int[] dp = new int[n];\\n\\n        dp[n-1] = 0;\\n\\n        for (int i = n-2; i >= 0; i--) {\\n            int curr = Integer.MAX_VALUE;\\n            for (int l = 1; l <= k; l++) {\\n                if (i+l < dp.length) {\\n                    curr = Math.min(curr, Math.abs(h[i] - h[i+l]) + dp[i+l]);\\n                }\\n            }\\n            dp[i] = curr;\\n        }\\n\\n        System.out.println(dp[0]);\\n\\n    }\\n\\n\\n\\n\\n}\\n", "target": "241", "substitutes": {}}
{"code": "import java.util.*;\\nclass Main{\\n  public static void main(String[] args){\\n\tScanner stdIn = new Scanner(System.in);\\n\tString s = stdIn.next();\\n    for(int i=0;i<s.length();i++){\\n\tSystem.out.print(\"x\");\\n    }\\n    System.out.println(\"\");\\n  }\\n}", "target": "122", "substitutes": {"stdIn": ["stOut", "STDIN", "stdin", "STDIns", "STDOut", "standardIn", "stdOut", " stdIN", "stdIN", "standardIns", " stdin", "standardOut", " stdIns", "stIn", " stdOut", "standardin", "stdIns", "stIns", "stIN", "stin", "STDIn"], "s": ["rs", "b", "h", "m", "ats", "str", "fs", "f", "ss", "S", "r", "sb", "bs", "t", "qs", "sys", "gs", "p", "c", "sql", "w", "v", "strings", "sv", "ms", "ns", "sts", "n", "tes", "ps", "js", "ls", "ts", "is", "x", "sq"], "i": ["ii", "phi", "m", "b", "gu", "me", "j", "multi", "sim", "it", "e", "bi", "init", "hi", "q", "in", "z", "u", "ci", "t", "di", "I", "mi", "gi", "mu", "li", "si", "pi", "ex", "sql", "ti", "a", "my", "cli", "io", "ui", "ini", "ic", "ai", "us", "chain", "iu", "n", "ix", "id", "y", "is", "key", "x", "im", "batch", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\nimport java.lang.Math;\\npublic class Main{\\n    public static void main(String[] args) {\\n\tScanner scan = new Scanner(System.in);\\n\twhile (scan.hasNext()) {\\n\t    String input = scan.nextLine();\\n\t    String[] inputs = input.split(\" \");\\n\t    int height = Integer.parseInt(inputs[0]);\\n\t    int width = Integer.parseInt(inputs[1]);\\n\t    if (height == 0 && width == 0) {\\n\t\tbreak;\\n\t    }\\n\t    printsharp(width);\\n\t    for (int i = 0; i < height - 2; i++) {\\n\t\tSystem.out.print(\"#\");\\n\t\tfor (int j = 0; j < width - 2; j++) {\\n\t\t    System.out.print(\".\");\\n\t\t}\\n\t\tSystem.out.println(\"#\");\\n\t    }\\n\t    printsharp(width);\\n\t    System.out.println();\\n\t}\\n    }\\n    public static void printsharp(int width) {\\n\tfor (int i = 0; i < width; i++) {\\n\t    System.out.print(\"#\");\\n\t}\\n\tSystem.out.println();\\n    }\\n}", "target": "19", "substitutes": {"scan": ["range", "out", "san", "check", "clean", "con", "system", "can", "skip", "Scan", "nn", "ann", "run", "pass", "in", "re", "scroll", "set", "read", "sync", "connect", "se", "seek", "sys", "reach", "sc", "ner", "query", "sur", "match", "send", "gate", "parse", "an", "sin", "get", "scale", "auto", "sv", "screen", "search", "watch", "na", " scanner", "stat", "sum", "find", "build"], "input": ["string", "init", "value", "command", "url", "char", "cmd", "q", "in", "hello", "expression", "select", "focus", "format", "history", "feed", "qa", "buffer", "entry", "query", "print", "form", "request", "prefix", "sql", "data", "output", "add", "config", "raw", "state", "Input", "text", "image", "base", "word", "pattern", "ip", "task", "source", "initial", "batch", "sample"], "inputs": ["patternts", "latlines", "supperences", " inputses", "supps", "inputTypes", "Inputes", "accepts", " inputss", "InputTypes", "patternS", "feeds", "inputlines", "patternes", "inputerences", "acceptts", "outputts", "Inputs", "inputes", " inputsTypes", "inputts", "laterences", "outputS", "feedlines", "patterns", "outputes", "feederences", "lats", "supplines", "acceptes", "outputs", " inputTypes", " inputes", "acceptS", "inputS"], "height": ["hs", "ty", "gravity", "family", "h", "html", "color", "density", "resolution", "hello", "stroke", "yt", "window", "row", "history", "frame", "th", "zh", "hang", "he", "bottom", "depth", "buffer", "high", "radius", "shape", "ht", "style", "rank", "volume", "above", "capacity", "type", "length", "base", "angle", "table", "view", "Height", "hei", "y", "size", "x", "gh", "hash", "through"], "width": ["range", "console", "h", "idth", "dimension", "str", "wy", "flow", "wid", "full", "number", "z", "body", "stroke", "span", "Width", "right", "style", "wa", "window", "format", "frame", "padding", "area", "lon", "function", "border", "depth", "line", "orth", "white", "fw", "len", "margin", "print", "pen", "count", "radius", "draw", "w", "port", "dim", "shape", "output", "scale", "path", "memory", "capacity", "left", "column", "weight", "length", "layout", "text", "xf", "n", "Height", "widget", "size", "x", "position", "wide"], "i": ["ii", "phi", "m", "xi", "me", "multi", "ri", "sim", "eu", "it", "bi", "init", "e", "ji", "hi", "q", "in", "ims", "u", "yi", "ci", "iy", "di", "mi", "this", "ie", "info", "gi", "li", "IJ", "ei", "si", "inner", "pi", "iq", "jo", "iter", "g", "ti", "ia", "io", "v", "name", "ij", "zi", "ui", "ini", "\u0438", "us", "ai", "iu", "et", "ix", "ind", "id", "MI", "ip", "y", "o", "is", "x", "im", "ori", "l", "ami", "ity", "qi", "ki"], "j": ["oj", "b", "m", "ja", "br", "jc", "ji", "bi", "jj", "q", "r", "z", "uj", "bj", "ph", "rel", "jump", "k", "ne", "json", "pr", "kj", "kid", "note", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "dj", "J", "jas", "cell", "l", "n", "js", "o", "err", "job", "ge"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author maheshwari29\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        BBalance solver = new BBalance();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BBalance {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int i, j;\\n            int n = in.ni();\\n            int w[] = in.nia(n);\\n            int temp[] = new int[105];\\n            int sum = 0;\\n            int ans = Integer.MAX_VALUE;\\n            for (int c : w)\\n                sum += c;\\n            int temp2 = 0;\\n            for (i = 0; i < n; i++) {   //out.println(sum+\" \"+temp2);\\n                int y = sum - temp2;\\n                ans = Math.min(ans, Math.abs(y - temp2));\\n                temp2 += w[i];\\n                y = sum - temp2;\\n                ans = Math.min(ans, Math.abs(y - temp2));\\n            }\\n\\n\\n            out.println(ans);\\n            //out.println(\"______________________\");\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n        public void println(int i) {\\n            writer.println(i);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int ni() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public int[] nia(int n) {\\n            int[] array = new int[n];\\n            for (int i = 0; i < n; ++i) array[i] = ni();\\n            return array;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "2", "substitutes": {"inputStream": ["audioSteam", "inputReader", "activeStreamer", "activeSteam", "inputSocket", " inputReader", "outputStreamer", " inputSocket", "audioStreamer", "sourceSocket", "audioStream", "dataStream", "outputSteam", "inputSteam", " inputSteam", "sourceSteam", "sourceStream", "dataReader", "dataSocket", "dataSteam", "activeStream", "inputStreamer", "sourceReader"], "outputStream": ["connectionstream", "OutputStyle", "connectionStream", "writeStream", "outputStreamer", "outputStyle", "outStream", " outputStyle", " outputSteam", "outStyle", "outputSteam", "OutputSteam", "outSteam", "inputstream", "connectionSteam", "inputSteam", "writestream", "OutputStream", " outputForm", "writeSteam", "outputForm", "writeStreamer", "OutputForm", "connectionStreamer", "outputstream", "inputStreamer", "outForm"], "in": ["per", "inf", "In", "con", "isin", "ri", "init", "it", "doc", "run", "net", " din", "r", "file", "rin", "reader", "t", "mi", "IN", "info", "up", "on", "from", "proc", "er", "gin", "null", "en", "ins", "conf", "inner", "inside", "inn", "inc", "iter", "local", "cin", "and", "get", "io", "add", "input", "raw", "all", "bin", "ini", "stream", "ind", "id", "mm", "din", "o", "is", "old", "source", "l", "rt"], "out": ["m", "s", "tmp", "aos", "it", "copy", "cache", "net", "OUT", "user", "t", "at", "set", "pool", "ou", "outs", "os", "outer", "this", "json", "ch", "up", "result", "client", "sys", "Out", "log", "er", "report", "null", "list", "p", "print", "inner", "ex", "obj", "write", "res", "v", "output", "io", "all", "co", "gr", "table", "to", "o", "writer", "err", "rt", "stable", "OU", "nt"], "solver": [" sol", " solution", "sol", "insearcher", "sorter", "solving", "insolver", "csolving", " searcher", "insolution", "ssorter", "solution", "ssearcher", "csolver", "ssolving", "ssolution", "searcher", "ssol", " solving", "ssolver", "insorter", "csol", "csolution", " sorter"], "testNumber": [" testnr", " caseNumber", "testnumber", "testnr", " casenr", " trialnumber", " testNo", " casenumber", " trialNumber", "testNo", " trialnr", " caseNo", " testnumber", " trialNo"], "i": ["ii", "phi", "m", "b", "xi", "me", "gu", "multi", "sim", "it", "bi", "f", "q", "r", "ims", "u", "ci", "di", "I", "mi", "gi", "index", "li", "p", "si", "pi", "ti", "g", "v", "cli", "ij", "zi", "ui", "ini", "ic", "ai", "us", "iu", "ind", "ix", "id", "ip", "y", "x", "im", "l", "qi", "ki"], "j": ["b", "m", "ja", "ji", "jj", "bi", "jc", "f", "q", "r", "z", "t", "k", "ch", "kj", "p", "jl", "obj", "g", "v", "aj", "jp", "ij", "J", "js", "o", "l"], "n": ["m", "h", "ny", "nn", "fn", "t", "k", "ne", "mn", "ni", "nm", "p", "en", "nc", "np", "len", "N", "nb", "d", "no", "nu", "g", "v", "name", "ns", "nl", "sn", "na", "o", "size", "cn", "l", "nt"], "w": ["weights", "m", "h", "words", "q", "aw", "r", "z", "wal", "rw", "wa", "wat", "window", "t", "win", "wt", "wh", "wi", "ew", "W", "wcs", "width", "wall", "p", "wl", "sw", "v", "ws", "weight", "wd", "kw", "nw", "wp", "wr", "wx", "wb", "we"], "temp": ["Temp", "tem", "current", "m", "tmp", "perature", "test", "cache", "tc", "fake", "time", "t", "emp", "stem", "buffer", "pre", "template", "ptr", "mp", "count", "trace", "v", "mem", "config", "memory", "total", "condition"], "sum": ["cost", "sam", "tu", "um", "h", "sim", "sa", "mass", "u", "set", "t", "vol", " SUM", "si", "acc", " summed", "su", "status", "conf", "count", "cum", "summary", "cal", "st", "add", "total", "mem", "num", "weight", "us", "average", "Sum", "mean", "max", "size", "mess", "fac", "sat", "mod"], "ans": ["con", "s", "context", "pan", "vals", "span", "ens", "sun", "ca", "std", "abilities", "ac", "acc", "conf", "nz", "an", "mem", "mods", "ms", "flags", "versions", "ps", "cond", "ver", "mean", "jobs", "ations", "fac", "actions"], "c": ["m", "b", "ct", "con", "category", "cc", "e", "cat", "f", "tc", "char", "q", "z", "ci", "cm", "cs", "t", "cd", "com", "k", "cos", "ca", "cf", "cu", "uc", "sc", "mc", "p", "nc", "count", "fc", "v", "co", "ce", "dc", "lc", "unc", "C", "cn", "cp"], "temp2": ["emp1", " temp3", "emp2", "tmp3", "temp3", "tmp2", "tmp1", "temp1", "emp3", " temp1"]}}
{"code": "import java.util.HashSet;\\nimport java.util.Scanner;\\nimport java.util.Set;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint n = scanner.nextInt(); \\n\t\tSet<String> set = new HashSet<String>();\\n\t\tscanner.nextLine();\\n\t\tString s;\\n\t\tfor(int i =0;i<n;i++) {\\n\t\t\ts = scanner.nextLine();\\n\t\t\tset.add(s);\\n\t\t}\\n\t\\n\t\tSystem.out.println(set.size());\\n\t}\\n}", "target": "98", "substitutes": {"scanner": ["canter", " scaner", "Scanener", "Scanner", " scanener", "canener", "scann", "speer", "speener", "Scanline", "caner", "cann", "baner", "spener", "Scaner", "spen", "scanline", "banner", "canner", "scanener", "scanter", "scaner", "banline", "banter", " scanter", " scanline", "Scann", "Scanter"], "n": ["ng", "m", "norm", "nan", "nn", "number", "net", "ln", "nd", "t", "k", "ne", "mn", "network", "nm", "en", "nc", "gn", "nor", "np", "N", "count", "nb", "d", "v", "nu", "num", "ns", "nl", "sn", "nw", "na", "o", "size", "cn", "l", "nt"], "set": ["store", "save", "check", "system", "see", "show", "sequence", "test", "delete", "split", "use", "sync", "complete", "se", "sign", "group", "start", "load", "send", "space", "subject", "draw", "get", "st", "end", "add", "scale", "tool", "open", "search", "clear", "type", "setup", "et", "base", "equal", "map", "common", "size", "sum", "sche", "reset", "hash", "SET", "mod"], "s": ["hs", "rs", "vs", "b", "h", "m", "string", "e", "str", "fs", "ss", "full", "ims", "S", "r", "sb", "z", "gets", "t", "os", "qs", "sym", "gs", "parse", "txt", "w", "g", "v", "less", "sv", "ms", "ws", "ns", "us", "sts", "ds", "ps", "tes", "js", "conv", "ts", "ls", "is", "es", "csv", "sq", "sample"], "i": ["ii", "phi", "m", "gu", "me", "j", "multi", "sim", "init", "it", "bi", "hi", "q", "ims", "z", "u", "ci", "di", "I", "mi", "ie", "gi", "mu", "li", "ei", "si", "pi", "ti", "a", "my", "cli", "zi", "ui", "ini", "ai", "ic", "us", "\u0438", "chain", "iu", "base", " I", "ix", "ind", "id", "ip", "y", "is", "x", "im", "err", "qi"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner x  = new Scanner(System.in);\\n\t\tint n = x.nextInt();\\n\t\tint[] price = new int[n];\\n\t\tfor(int m = 0 ; m < n ; m++){\\n\t\t\tprice[m] = x.nextInt();\\n\t\t}\\n\t\tSystem.out.print(price[n-1]);\\n\t\tfor(int g = n-2 ; g >= 0 ; g--){\\n\t\t\tSystem.out.print(\" \" + price[g]);\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n}", "target": "79", "substitutes": {"x": ["rex", "check", "h", "xi", "rx", "xp", "xe", "xs", "dx", "ox", " xx", "reader", "xd", "xxx", "nox", "tx", "read", "xes", "ux", "xy", "ax", "client", "p", "ex", "parse", "lex", "v", "ctx", "search", "co", "xf", "xx", "scan", "xc", "inx", "y", "px", "fx", "X", "wx"], "n": ["ng", "out", "norm", "j", "nan", "i", "nn", "number", "net", "r", "ln", "nd", "nia", "t", "k", "ne", "mn", "ll", "p", "len", "nc", "np", "c", "gn", "nor", "N", "en", "count", "note", "nb", "v", "nu", "no", "all", "names", " N", "ns", "num", "un", "nl", "sn", "na", "y", "o", "size", "cn", "l", "nt"], "price": ["range", "pie", "rate", "per", "offer", "fee", "pe", "grade", "euro", "tax", "test", "value", "quote", "priced", "where", "change", "market", "order", "transfer", "close", "ping", "money", "pr", "php", "date", "p", "peg", "code", "currency", "print", "point", "parse", "Price", "scale", "trade", "rice", "vote", "power", "priority", " prices", "options", "percent", "div", "sp", "ps", "val", "pro", "position"], "m": ["month", "mat", "um", "msg", "mun", "j", "i", "vm", "dm", "fm", "am", "span", "mx", "om", "cm", "km", "sm", "mo", "mut", "middle", "k", "mi", "md", "perm", "met", "ym", "nm", "mu", "module", "mc", "p", "bm", "gm", "d", "dim", "esm", "mt", "ms", "arm", "tm", "mobile", "wm", "M", "mm", "y", "mac", "im", "lem", "em", "mr", "mod"], "g": ["gravity", "eg", "gu", "j", "og", "gg", "game", "gd", "tg", "G", "ger", "gain", "gent", "go", "gb", "group", "gi", "reg", "bg", "rg", "ag", "ig", "yg", "gs", "p", "gy", "gn", "gas", "gen", "gate", "gc", "gm", "sg", "w", "v", "ga", "gp", "ug", "gr", "mg", "erg", "gre", "pg", "gt", "ge"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n      \\n      Scanner sc = new Scanner(System.in);\\n      \\n      int A = sc.nextInt();\\n      int B = sc.nextInt();\\n   \t  int C = sc.nextInt();\\n      int X = sc.nextInt();\\n      \\n      int y = 0;\\n      int count = 0;\\n      for(int i=0; i <= A ; i++){\\n      \tfor(int j=0; j <= B; j++){\\n        \ty = (X-500*i-100*j)/50;\\n            if(y >= 0 && y <= C){\\n            \tcount = count+1;\\n            }\\n               \\n        }\\n      }\\n\tSystem.out.println(count);\\n    }\\n}\\n", "target": "127", "substitutes": {"sc": [" Sc", "system", "cc", "tc", "cr", "ss", "rc", "ko", "pb", "cl", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ck", "mc", " scr", "c", "nc", "scl", "SC", "gc", "sw", "inc", "st", "sv", "scope", "dc", "lc", "scan", "sp", "cmp", "asc", "conv", "cgi", "anc", "sec", "usc", "syn", "sq"], "A": ["AC", "AT", "P", "LA", "AD", "AA", "AS", "Ant", "CA", "S", "As", "RA", "AN", "AI", "I", "AB", "API", "L", "SA", "AL", "This", "App", "AE", "AF", "An", "AU", "AV", "Av", "a", "Y", "IA", "AX", "AR", "R", "The", "AP"], "B": ["b", "BB", "CB", "BA", "ABC", "RB", "I", "D", "AB", "NB", "BO", "V", "EB", "BI", "TB", "N", "BL", " b", "BS", "IB", "Y", "DB", "J", "GB", "WB", "LB", "M", "BE", "BR", "Bs", "BC"], "C": ["E", "P", "F", "DC", "CB", "CM", "S", "CA", "G", "CI", "CO", "CS", "CR", "I", "D", "EC", "Cu", "L", "JC", "V", "c", "N", "SC", "Y", "T", "K", "CE", "Count", "Cs", "U", "M", "R", "YC", "Z", "CC", "BC"], "X": ["E", "IX", "P", "F", "XL", "ID", "S", "G", "TX", "Width", "I", "D", "W", "L", "V", "XX", "Max", "H", "N", "DX", "XP", "Y", "T", "K", "J", "Q", "U", "M", "R", "x", "Z", "CC", "JS"], "y": ["ty", "b", "uy", "fy", "ny", "it", "ery", "ye", "z", "yt", "yi", "iy", "scroll", "oy", "t", "set", "py", "lat", "vy", "height", "ch", "pt", "sky", "ady", "xy", "hey", "client", "ym", "yl", "ay", "gy", "c", "ot", "dy", "Y", "my", "ey", "yo", "cy", "hot", "yy", "sy", "yr", "angle", "x"], "count": ["out", "current", "check", "ct", "flag", "ount", "cache", "full", "number", "ctr", "z", "core", "continue", "set", "cont", "complete", "force", "ch", "result", "counter", "index", "log", "list", "report", "consider", "next", "high", "c", "amount", "code", "cycle", "status", "print", "score", "nb", "add", "total", "all", "num", "type", "yy", "length", "last", "n", "Count", "ind", "cond", "common", "child", "err", "max", "size", "sum", "stat", "l", "find", "found", "nt"], "i": ["ii", "aci", "phi", "xi", "sim", "ri", "init", "bi", "ji", "it", "ik", "hi", "ims", "u", "ci", "iy", "di", "I", "mi", "ie", "info", "li", "ei", "si", "pi", "iq", "ti", "v", "ia", "ij", "zi", "ui", "ini", "ai", "ic", "us", "iu", "ind", "ix", "id", "ip", "x", "im", "ori", "ami", "qi", "ki"], "j": ["oj", "b", "sim", "ja", "br", "it", "ji", "jj", "jc", "bi", "q", "z", "uj", "bj", "bs", "el", "ph", "k", "son", "jump", "ie", "ne", "json", "je", "pt", "pr", "kj", "li", "note", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "dj", "J", "jas", "us", "yy", "ind", "fr", "js", "x", "im", "ion", "err", "job", "let", "ge"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        FastScanner sc = new FastScanner(System.in);\\n        int n = sc.nextInt();\\n        int cnt = 0;\\n        while(n >= 2){\\n            n/=2;\\n            cnt++;\\n        }\\n        System.out.println((int)Math.pow(2,cnt));\\n    }\\n}\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    } \\n}", "target": "225", "substitutes": {"sc": ["console", "cc", "tc", "ss", "cr", "rc", "cl", "cv", "bc", "cs", "sm", "desc", "esc", "ec", "sync", "Sc", "ch", "pc", "osc", "isc", "uc", "sys", "null", "mc", "scl", "c", "nc", "acc", "SC", "gc", "src", "sv", "nl", "lc", "RC", "sp", "cmp", "ser", "asc", "conv", "sch", "sec", "sq"], "n": ["out", "h", "nan", "nn", "q", "r", "ln", "nd", "on", "log", "len", "nc", "w", "no", "name", "all", "un", "ng", "m", "norm", "e", "f", "ul", "number", "net", "c", "nor", "nos", "an", "nb", "nu", "names", "sn", "nw", "y", "cn", "l", "ut", "init", "nm", "gn", "N", "le", "count", "d", "num", "na", "o", "size", "dn", "nt", "b", "j", "it", "ren", "z", "t", "ne", "network", "p", "en", "np", "g", " N", "ns", "nl", "x", "nr"], "cnt": ["countcount", "cnc", "cmd", "Cct", "pnc", "cct", "Cnz", "cNT", "Cnc", "uncNT", "countnc", " cnc", " cmd", "countct", "uncnc", "pNT", "Cnt", "uncnz", " ccount", "uncnt", "countnt", "pmd", "pnt", "CNT", "cnz", "ccount", " cNT", "Cmd", "Ccount", " cct", " cnz"], "reader": ["rot", "rs", "rx", "lr", "redo", "context", "liner", "rar", "rc", "r", "dr", "rl", "peer", "driver", "file", "row", "iterator", "handler", "read", "resource", "this", "tty", "result", "buffer", "rr", "line", "er", "ner", "ro", "parser", "via", "walker", "inner", "document", "rer", "iter", "data", "roller", "loader", "arc", "input", "rt", "Reader", "runner", "stream", "builder", "writer", "upper", "source", "mr", "operator"], "tokenizer": [" tokenzer", "okenizer", "tokenization", "Tokenizer", "Tokenzer", "operatorization", "okenner", "Tokeniser", "tokenner", "tokenize", "okenformer", "tokenoder", "okeniser", " tokenifier", "operatorifier", " tokenoser", "Tokenization", "okenifier", "matzer", "wordization", "serialzer", "tokeniser", "okenener", " tokenformer", "Tokenisher", "okenoder", " tokenization", "Tokenifier", "backize", "tagoder", "serialifier", "Tokenizers", " tokenger", "optimner", "tokenzer", "tagitor", "okenitor", "backener", " tokenner", "backizer", " tokenisher", "wordger", "tokenformer", "tagization", " tokeniser", "okenger", "operatorizer", "toolisher", "tokenifier", "okenoser", "operatorize", "tokenoser", "toolize", " tokenizers", " tokenize", "Tokenener", " tokenener", "matization", "tokenener", "backisher", "operatoroder", "optimoser", "okenzer", "matisher", "tokenisher", "tokenizers", "toolener", "Tokenize", "okenize", "toolizer", "serialize", "wordizer", "operatorener", "okenisher", "matizer", "tokenger", "okenization", "serializer", "tagizer", "tokenitor", "optimizer", "operatoritor", "okenizers", "optimformer"], "in": ["serv", "out", "m", "In", "s", "it", "init", "f", "r", "file", "t", "cont", "IN", "info", "std", "from", "line", "log", "gin", "p", "c", "ins", "conf", "inner", "inn", "data", "lines", "inc", "cin", "io", "input", "all", "bin", "ini", "or", "stream", "l", "readable", "id", "din", "o", "is", "source", "err", "rt"], "a": ["aaa", "\u00e4", "b", "m", "sta", "la", "apa", "j", "oa", "aos", "sa", "da", "ya", "am", "z", "wa", "el", "A", "au", "area", "ua", "ab", "ca", "qa", "ada", "anta", "ma", "ac", "ao", "aka", "ba", "ea", "ta", "an", "data", "g", "aa", "ia", "ava", "ata", "ga", "all", "ha", "as", "aux", "pa", "na", "to", "va", "ae", "fa"], "i": ["ii", "phi", "um", "xi", "me", "ful", "multi", "sim", "j", "eu", "it", "bi", "init", "f", "ji", "hi", "fire", "q", "ims", "dr", "u", "ci", "iy", "set", "di", "I", "mi", "this", "ie", "gi", "php", "li", "ei", "si", "status", "pi", "ex", "ti", "io", "cli", "my", "ij", "ui", "ms", "ini", "ic", "ai", "us", "\u0438", "iu", "ice", "ix", "ind", "id", "ip", "y", "is", "PI", "im", "oi", "em", "batch", "ami", "ity", "qi", "ki"]}}
{"code": "import java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\ttry (Scanner scanner = new Scanner(System.in)) {\\n\t\t\tchar[] S = scanner.next().toCharArray();\\n\\n\t\t\tMap<Character, Integer> map = new HashMap<>();\\n\\n\t\t\tfor (char c : S) {\\n\t\t\t\tmap.put(c, map.getOrDefault(c, 0) + 1);\\n\t\t\t}\\n\\n\t\t\tString ans = \"No\";\\n\t\t\tif (map.size() == 2) {\\n\\n\t\t\t\tif (map.get(S[0]) == 2) {\\n\t\t\t\t\tans = \"Yes\";\\n\t\t\t\t}\\n\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\t}\\n}\\n", "target": "33", "substitutes": {"S": ["WS", "SM", "B", "P", "s", "DS", "SN", "G", "CS", "SO", "NS", "A", "I", "SER", "L", "SA", "V", "TN", "SF", "RS", "SE", "SI", "SP", "H", "N", "BS", "Y", "SL", "T", "SQL", "SU", "ENC", "SR", "SS", "SAN", "SH", "SOURCE", "GS", "M", "R", "services", "TS", "SPEC", "C", "SB", "SAM", "JS"], "map": ["store", "save", "cap", "m", "check", "collect", "pad", "ap", "mask", "age", "maps", "addr", "cache", "link", "where", "apper", "MAP", "dict", "sm", "set", "window", "lock", "complete", "use", "pose", "group", "result", "start", "index", "list", "app", "load", "module", "query", "code", "match", "transform", "local", "mp", "parse", "data", "shape", "scale", "add", "mem", "make", "block", "down", "panel", "open", "clear", "ape", "pack", "snap", "table", "view", "mm", "tab", "place", "size", "one", "sum", "man", "hash", "master"], "c": ["m", "h", "b", "ct", "s", "char", "i", "cc", "cat", "f", "tc", "cr", "q", "in", "r", "z", "u", "cd", "cont", "com", "k", "ch", "ca", "pc", "cf", "cur", "cu", "uc", "sc", "ac", "p", "code", "gc", "fc", "arc", "v", "a", "cod", "abc", "ic", "co", "chain", "cell", "dc", "ce", "lc", "unc", "C", "col", "l", "cp", "vc"], "ans": ["unes", "uns", "sam", "rs", "san", "s", "rans", "aos", "ats", "utters", "eas", "ann", "ran", " means", "ens", "said", "cs", "aus", "ands", "ean", "os", "ags", "ots", "eds", "aps", "anks", "ks", "ins", "ols", "an", "ros", "leans", "ars", "ras", "ms", "ents", "ods", "ns", "arms", "eps", "ants", "ids", "mas", "ons", "oos", "arts", "ts", "ANS", "ls", "helps", "amps", "aults", "olds", "asks", "ads"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    final Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    private void run() {\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        int[] b = new int[n];\\n        int[] c = new int[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            a[i] = sc.nextInt() - 1;\\n        }\\n\\n        for (int i = 0; i < n; i++) {\\n            b[i] = sc.nextInt();\\n        }\\n\\n        for (int i = 0; i < n - 1; i++) {\\n            c[i] = sc.nextInt();\\n        }\\n\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            ans += b[a[i]];\\n\\n            if (i > 0 && a[i] - a[i - 1] == 1) {\\n                ans += c[a[i - 1]];\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n\\n", "target": "223", "substitutes": {"sc": [" Sc", "system", "sa", "cc", "cle", "tc", "ss", "pb", "rc", "capt", "sb", "cl", "cv", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "ctl", "se", "ch", "pc", "isc", "osc", "sys", " SC", "psc", "mc", "scl", "nc", "si", "sh", "sci", "SC", "gc", "ssl", "ctx", "sv", "scope", "dc", "lc", "scan", "sp", "sd", "sch", "anc", "sec", "usc", "irc", "sq"], "n": ["ng", "m", "j", "nan", "init", "after", "w", "nn", "ren", "number", "net", "fn", "r", "none", "ln", "z", "t", "cont", "ne", "mn", "network", "ll", "ni", "nm", "len", "p", "np", "gn", "ot", "nc", "N", "note", "count", "an", "nb", "g", "d", "v", "name", "total", "nu", "en", "no", "normal", "all", "names", " N", "num", "ns", "un", "nl", "sn", "na", "o", "max", "x", "cn", "l", "nt"], "a": ["aaa", "m", "h", "la", "oa", "s", "ap", "j", "sa", "e", "it", "f", "da", "sha", "am", "r", "z", "u", "era", "t", "at", "A", "au", "area", "att", "ab", "qa", "ma", "app", "ac", "p", "ba", "ao", "ea", "an", "data", "array", "aa", "d", "v", "ar", "auto", "ga", "all", "as", "ai", "aux", "alpha", "pa", "va", "o", "l", "fa"], "b": ["B", "eb", "ob", "j", "bo", "br", "bl", "bi", "pb", "bf", "r", "be", "sb", "u", "fb", "bs", "bc", "ab", "ib", "gb", "cb", "bis", "bg", "bb", "p", "ba", "db", "rb", "nb", "bp", "v", "bin", "bar", "y", "l", "wb", "erb"], "c": ["m", "ct", "s", "cc", "e", "f", "tc", "rc", "r", "z", "u", "ci", "bc", "cs", "ec", "cm", "cd", "t", "ch", "ca", "cf", "cu", "ac", "p", "crit", "fc", "d", "v", "ic", "co", "ce", "dc", "lc", "o", "C", "cn", "l", "cp"], "i": ["ji", "hi", "q", "dr", "ci", "mi", "list", "li", "mu", "iq", "ij", "ui", "ini", "ai", "err", "ix", "ion", "multi", "ies", "bi", "ik", "iy", "ico", "ei", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "ri", "fi", "init", "di", "exp", "info", "gi", "ni", "spec", "si", "ti", "io", "jp", "\u0438", "ind", "to", "ip", "cgi", "o", "PI", "ori", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "ims", "u", "set", "I", "parent", "this", "ie", "client", "point", "iter", "g", "ia", "ic", "iu", "ios", "is", "oi", "batch"], "ans": ["uns", "posts", "rs", "san", "s", "can", "ats", "aos", "rans", "pan", "xs", "ann", "irms", "cas", "vals", "wan", "ens", "ands", "cs", "AN", "aus", "outs", "acs", "os", "uploads", "ums", "ags", "sets", "anes", "offs", "eds", "aps", "alls", "ks", "ends", "ins", "an", "lines", "ars", "ms", "ents", "as", "ns", " scans", "orts", "ants", "ows", "eps", "ids", "scan", "ons", "yes", "ds", "arts", "ips", "ls", "ANS", "is", "helps", "amps", "ports", "olds", "asks", "ads"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner (System.in);\\n\t\twhile(sc.hasNext()){\\n\t\t\tlong a = sc.nextLong();\\n\t\t\tlong a1 = a;\\n\t\t\tlong b = sc.nextLong();\\n\t\t\tlong b1 = b;\\n\t\t\tlong i;\\n\t\t\tif(a > b){\\n\t\t\t\tfor(;;){\\n\t\t\t\t\tif(a1 % b == 0){\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t\ta1 += a;\\n\t\t\t\t}\\n\t\t\t\tif(a % b == 0){\\n\t\t\t\t\tSystem.out.println(b + \" \" + a1 );\\n\t\t\t\t}\\n\t\t\t\telse{\\n\t\t\t\t\tfor(i = b / 2; i > 0; i--){\\n\t\t\t\t\t\tif(a % i == 0 && b % i == 0){\\n\t\t\t\t\t\t\tbreak;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tSystem.out.println(i + \" \" + a1 );\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\telse if(a < b){\\n\t\t\t\tfor(;;){\\n\t\t\t\t\tif(b1 % a == 0){\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t\tb1 += b;\\n\t\t\t\t}\\n\t\t\t\tif(b % a == 0){\\n\t\t\t\t\tSystem.out.println(a + \" \" + b1 );\\n\t\t\t\t}\\n\t\t\t\telse{\\n\t\t\t\t\tfor(i = a / 2; i > 0; i--){\\n\t\t\t\t\t\tif(a % i == 0 && b % i == 0){\\n\t\t\t\t\t\t\tbreak;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tSystem.out.println(i + \" \" + b1 );\\n\t\t\t\t}\t\\n\t\t\t}\\n\t\t\telse{\\n\t\t\t\tSystem.out.println(b + \" \" + b1 );\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n}", "target": "181", "substitutes": {"sc": ["system", "cle", "cc", "tc", "cr", "rc", "cl", "sb", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "dec", "ctl", "ch", "pc", "osc", "enc", "isc", "uc", "sys", "mc", "scl", "c", "nc", "sh", "sub", "SC", "sw", "gc", "inc", "fc", "ctx", "txt", "sv", "screen", "dc", "lc", "scan", "sp", "asc", "conv", "cgi", "ctrl", "anc", "sec", "sch", "usc", "syn", "sq"], "a": ["h", "la", "aq", "r", "era", "A", "att", "ab", "ak", "len", "w", "aa", "name", "ar", "as", "ai", "bar", "m", "e", "AA", "f", "am", "at", "ax", "c", "ao", "ea", "pi", "an", "ga", "div", "n", "pa", "al", "l", "ami", "aaa", "sta", "sa", "area", "index", "from", "acc", "ba", "ta", "aj", "ee", "alpha", "val", "ach", "o", "ae", "act", "apa", "s", "oa", "ap", "da", "u", "wa", "t", "au", "ah", "ca", "ma", "app", "ac", "p", "ia", "ata", "va", "x"], "a1": ["A1", "da3", "a5", "area0", "ba256", "a11", "sa100", "A7", "a7", "A0", "b5", " a5", "a01", " a0", " a51", "b51", " a3", "sa0", " a2", " a11", "ba1", " a9", "b11", "a51", "b7", " a01", "b0", "b2", "a9", "an01", "b3", "b100", "a256", "b9", "area1", "b4", "da51", "area100", "an9", "ba5", " a256", "a4", "ba2", "an1", "b01", " a4", "da1", "a100", " a7", "da01", "a3", "b256", "a0", "A4", "sa1", "a2", "an11"], "b": ["B", "out", "h", "eb", "ob", "j", "s", "bo", "br", "bl", "bi", "e", "f", "pb", "bf", "r", "be", "sb", "body", "fb", "z", "u", "bs", "bc", "by", "t", "business", "lib", "ab", "ib", "cb", "gb", "bis", "beta", "bb", "back", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "mb", "w", "bp", "other", "bin", "bar", "bt", "base", "n", "to", "y", "o", "is", "x", "l", "wb"], "b1": ["nb0", "a6", " b2", "eOne", "nb2", "bb6", "bb0", "bbOne", "a01", "aOne", "n4", "B0", "b6", "n2", "b0", " b6", "b2", "bb4", "ab0", "n1", "abOne", "nb1", "ab6", "b4", " b4", "B1", "bb01", "bb1", "B2", "b01", "e0", "e1", "bOne", "e2", " bOne", "a0", " b0", " b01", "bb2", "a2", "ab1"], "i": ["ii", "phi", "m", "xi", "j", "ri", "fi", "multi", "sim", "init", "bi", "it", "ik", "hi", "ji", "q", "u", "span", "ci", "t", "di", "I", "mi", "ie", "gi", "index", "ni", "li", "ia", "ei", "si", "pi", "iter", "ti", "v", " bi", "io", "iri", "cli", "zi", "ui", "isi", "ini", "ai", "\u0438", "ij", "ic", "iu", "err", "ix", "ind", "ip", "y", "o", "is", "ori", "oi", "l", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\n\\nfinal class Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner std = new Scanner(System.in);\\n\t\tint a = std.nextInt();\\n\t\tint b = std.nextInt();\\n\t\tSystem.out.println(a * b);\\n\t}\\n\\n}\\n", "target": "35", "substitutes": {"std": ["ng", "fd", "console", "rx", "igor", "ss", "cr", "cmd", "cl", "STD", "nd", "reader", "ast", "dd", "ctl", "news", "rand", "se", "println", "md", "internal", "sys", "hess", "usr", "hz", "sh", " STD", "erd", "Standard", "ad", "ssl", "ctx", "st", "d", "St", "sv", "pd", "td", "STDOUT", "standard", "wd", "nl", "const", "sp", "na", "ser", "sd", "writer", "through"], "a": ["aaa", "aff", "sta", "la", "oa", "sa", "aq", "ama", "da", "era", "t", "A", "au", "area", "ca", "ma", "ac", "p", "ba", "af", "ea", "ao", "xa", "ta", "aa", "ia", "aj", "ga", "ai", "alpha", "n", "pa", "na", "va", "ach", "ova", "ae", "fa"], "b": ["B", "h", "eb", "ob", "j", "br", "i", "bi", "f", "bf", "sb", "be", "body", "fb", "z", "bc", "t", "blue", "ab", "ib", "gb", "bis", "beta", "bb", "back", "xb", "ba", "c", "db", "rb", "nb", "g", "d", "v", "n", "y", "wb"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String argv[]) {\\n    int n;\\n    Scanner sc = new Scanner(System.in);\\n    n = Integer.parseInt(sc.next());\\n    System.out.println((n % 2 == 0 ? n/2:n/2 + 1) / (double)n);\\n  }\\n}", "target": "64", "substitutes": {"argv": [" argV", " Argv", " ArgV", "argV", "Args", "ArgV", "argw", " argw", "Argw", " Args", " Argw", "Argv"], "n": ["ng", "out", "m", "norm", "j", "s", "nan", "i", "nn", "ren", "number", "net", "missing", "r", "ln", "t", "k", "ne", "mn", "ll", "ni", "en", "p", "nc", "c", "nor", "np", "len", "N", "note", "nb", "g", "d", "v", "nu", " ns", "wn", "num", "ns", "un", "nl", "l", "sn", "tn", "na", "bn", "x", "dn", "cn", "nr", " fn", "nt"], "sc": ["cc", "cle", "tc", "ss", "cr", "cam", "capt", "pb", "cl", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "dec", "exp", "ch", "pc", "osc", "isc", "soc", "uc", "sys", "mc", "scl", "nc", "c", "sh", "sub", "SC", "gc", "sw", "sv", "nl", "dc", "lc", "scan", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "sq"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws NumberFormatException, IOException {\\n        // TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n        String[] input = br.readLine().split(\" \");\\n        int m = Integer.parseInt(input[0]);\\n        int n = Integer.parseInt(input[1]);\\n        int[][] matrix = new int[m][n];\\n        int[] num = new int[n];\\n\\n\\n        for(int i = 0;i < m;i++){\\n            String[] line = br.readLine().split(\" \");\\n            for(int j = 0;j < n;j++){\\n                matrix[i][j] = Integer.parseInt(line[j]);\\n            }\\n        }\\n        for(int i = 0;i < n;i++){\\n            num[i] = Integer.parseInt(br.readLine());            ;\\n        }\\n\\n        for(int i = 0;i < m;i++){\\n            int result = 0;\\n            for(int j = 0;j < n;j++){\\n            result += matrix[i][j] * num[j];\\n            }\\n            System.out.println(result);\\n        }\\n\\n    }\\n\\n}\\n", "target": "185", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n    \\n    public static void main(String[] args) {\\n\tScanner sc = new Scanner(System.in);\\n\tint N = sc.nextInt();\\n\tint A[] = new int[N];\\n\tfor(int i = 0;i < N;i++){\\n\t    A[i] = sc.nextInt();\\n\t}\\n\tint cnt = 0, tmp, minj;\\n\tfor(int i = 0;i <= N - 1;i++){\\n\t    minj = i;\\n\t    int flag = 0;\\n\t    for(int j = i;j <= N - 1;j++){\\n\t\tif(A[j] < A[minj]){\\n\t\t    minj = j;\\n\t\t}\t\t\\n\t    }\\n\t    tmp = A[i];\\n\t    A[i] = A[minj];\\n\t    A[minj] = tmp;\\n\t    if(i == minj){\\n\t\tflag = 1;\\n\t    }\\n\t    if(flag == 0){\\n\t\tcnt++;\\n\t\t}\t   \\n\t}\t\\n\tfor(int k = 0;k < N;k++){\\n\t    System.out.print(A[k]);\\n\t    if(k == N - 1) break;\\n\t    System.out.print(\" \");\\n\t}\\n\tSystem.out.println(\"\\n\" + cnt);\\n    }\\n}\\n\\n", "target": "199", "substitutes": {"sc": [" Sc", "ng", "system", "cc", "cle", "tc", "ss", "capt", "rc", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", " SC", "mc", "scl", "c", "nc", "mp", "SC", "gc", "fc", "arc", "src", "sv", "nl", "scan", "lc", "sp", "sel", "asc", "conv", "sch", "sec", "anc", "usc", "syn", "sq"], "N": ["B", "NH", "P", "F", "NN", "Ns", "NI", "Ni", "MAN", "Num", "S", "NR", "OUT", "SN", "NL", "AN", "NS", "I", "D", "GN", "NO", "ANY", "NV", "NUM", "NP", "NC", "NB", "L", "ALL", "ND", "V", "NOR", "TN", "NG", "NM", "Net", "NT", "None", "NA", "NOTE", "T", "UNE", "K", "J", "FN", "Sn", "NE", "n", "M", "R", "C", "REM"], "A": ["AT", "AC", "What", "B", "P", "GA", "At", "Ass", "AA", "Att", "CA", "As", "BA", "G", "Abs", "AI", "mA", "I", "AB", "D", "Action", "Cache", "API", "L", "SA", "MA", "V", "Am", "This", "And", "RAM", "App", "Answer", "All", "ACC", "H", "AE", "ACT", "AF", "An", "AM", "AU", "Av", "AV", "a", "NA", "Area", "Bar", "Ar", "IA", "Alpha", "ARC", "WA", "Array", "Some", "AAA", "To", "JA", "AR", "U", "M", "ATA", "The", "C", "X", "EA", "AP", "Address"], "i": ["ji", "hi", "q", "in", "r", "iti", "ci", "iso", "mi", "li", "iq", "v", "ij", "ui", "ini", "ai", "us", "err", "ix", "ret", "ion", "m", "multi", "e", "bi", "f", "iy", "entry", "ei", "status", "pi", "cli", "zi", "chain", "n", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "um", "ri", "init", "di", "info", "gi", "index", "ni", "si", "include", "ti", "io", "jp", "\u0438", "ind", "to", "ip", "ori", "ir", "qi", "phi", "xi", "me", "sim", "it", "ims", "t", "I", "this", "ie", "p", "point", "inner", "iter", "g", "ia", "ic", "iu", "is", "x", "batch"], "cnt": ["pcount", "Cct", "cct", "pcct", "Cret", "cNT", "pcnt", " cn", "nnt", " cret", "Cnt", "count", "Cn", "CNT", "nount", " cct", "pcn", " count", "cret", "Count", " cNT", "cn", "nNT", "nret"], "tmp": ["prev", "Temp", "mk", "out", "m", "term", "opp", "offset", "img", "test", "tc", "temp", "t", "mut", "emp", "tar", "perm", "prime", "MP", "attr", "pkg", "pre", "tp", "null", "p", "np", "ot", "ptr", "mp", "obj", "txt", "ctx", "buff", "v", "jp", "etc", "orig", "td", "comp", "tm", "yy", "timeout", "sp", "cmp", "mm", "ip", "partial", "tt", "ret", "nom", "cp", "rt", "tf", "nt"], "minj": ["mitij", "munj", "munij", "MINij", "lemjp", "modz", "minimumz", "solja", "minz", "merja", "solj", "MINji", "sumj", "onlyj", "minsjs", "mirk", "mini", "lowerja", "minuteij", "minsj", "soli", "donij", "onlyjs", "minv", "lemi", "onlyv", "miri", "merj", "mink", "mitjs", "lemja", "minimumjs", "soljs", "munja", "donjj", "lowerjs", "lemij", "minutejj", "sumij", "minjs", "solij", "lemjs", "donji", "mitj", "merjs", "mirj", "lemk", "MINja", "lowerz", "solji", "mitjp", "lowerj", "minutej", "modj", "sumjj", " minjs", " minji", "minimumj", "munji", "minij", "onlyji", "solk", "minuteji", "modjs", "modji", "MINj", "lowerjp", "donj", "minsji", "minjp", "mitji", "mirij", "minja", "minsja", "lemj", "merji", "mitja", "minimumji", "minjj", " minv", "lowerji", "sumji", "minji", "lowerv"], "flag": ["store", "bit", "cloud", "mask", "age", "char", " Flag", "f", "error", "lag", "cmd", "bool", "event", "member", "continue", "set", "button", "lock", "sync", "ld", "ctl", "sign", "group", "line", "enable", "level", "list", "log", "status", "option", "tail", "step", "flags", "weight", "bug", "state", "type", "nl", "lv", "const", "cond", "id", "Flag", "field", "valid", "stage", "FLAG", "prop", "tag", "arg"], "j": ["oj", "b", "s", "og", "ja", "bo", "br", "it", "ji", "jj", "jc", "str", "jac", "q", "z", "uj", "bj", "bs", "ph", "jump", "jit", "json", "je", "pr", "ju", "kj", "jl", "obj", "jo", "g", "bot", "other", "v", "aj", "jp", "ij", "dj", "J", "jas", "ind", "fr", "js", "y", "key", "ion", "l", "job"], "k": ["ask", "mk", "unk", "m", "b", "ick", "dk", "sk", "kar", "jj", "ko", "ik", "q", "kn", "kt", "kr", "km", "ok", "ph", "wk", "ikk", "kh", "kind", "ak", "kick", "uk", "ck", "kj", "kid", "acc", "kl", "ka", "g", "ku", "d", "K", "ijk", "kk", "kw", "ark", "isk", "y", "alk", "key", "x", "ek", "tk"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n \\n \\npublic class Main{\\nstatic int mod = (int)(Math.pow(10, 9) + 7);\\n   public static void main(String[] args) {\\n      MyScanner sc = new MyScanner();\\n      out = new PrintWriter(new BufferedOutputStream(System.out));\\n      int n = sc.nextInt() % 10;\\n      if (n == 2 || n == 4 || n == 5 || n == 7 || n== 9){\\n        out.println(\"hon\");\\n      }\\n      else if (n == 3){\\n        out.println(\"bon\");\\n      }\\n      else out.println(\"pon\");\\n      \\n      out.close();\\n   }\\n   \\n   static long pow(long a, long N) {\\n\t   if (N == 0) return 1;\\n\t   else if (N == 1) return a;\\n\t   else {\\n\t\t   long R = pow(a,N/2);\\n\t\t   if (N % 2 == 0) {\\n\t\t\t   return R*R;\\n\t\t   }\\n\t\t   else {\\n\t\t\t   return R*R*a;\\n\t\t   }\\n\t   }\\n   }\\n   \\n   static long powMod(long a, long N) {\\n\t   if (N == 0) return 1;\\n\t   else if (N == 1) return a % mod;\\n\t   else {\\n\t\t   long R = powMod(a,N/2) % mod;\\n\t\t   R *= R % mod;\\n\t\t   if (N % 2 == 0) {\\n\t\t\t   R *= a % mod;\\n\t\t   }\\n\t\t\t   return R % mod;\\n\t   }\\n   }\\nstatic void mergeSort(int[] A){ // low to hi sort, single array only\\n      int n = A.length;\\n      if (n < 2) return;\\n      int[] l = new int[n/2];\\n      int[] r = new int[n - n/2];\\n \\n      for (int i = 0; i < n/2; i++){\\n        l[i] = A[i];\\n      }\\n \\n      for (int j = n/2; j < n; j++){\\n        r[j-n/2] = A[j];\\n      }\\n \\n      mergeSort(l);\\n      mergeSort(r);\\n      merge(l, r, A);\\n    }\\n \\n    static void merge(int[] l, int[] r, int[] a){\\n      int i = 0, j = 0, k = 0;\\n      while (i < l.length && j < r.length && k < a.length){\\n        if (l[i] < r[j]){\\n          a[k] = l[i];\\n          i++;\\n        }\\n        else{\\n          a[k] = r[j];\\n          j++;\\n        }\\n        k++;\\n      }\\n      while (i < l.length){\\n        a[k] = l[i];\\n        i++;\\n        k++;\\n      }\\n \\n      while (j < r.length){\\n        a[k] = r[j];\\n        j++;\\n        k++;\\n      }\\n    }\\n\\n   \\n\\n   //-----------PrintWriter for faster output---------------------------------\\n   public static PrintWriter out;\\n      \\n   //-----------MyScanner class for faster input----------\\n   public static class MyScanner {\\n      BufferedReader br;\\n      StringTokenizer st;\\n \\n      public MyScanner() {\\n         br = new BufferedReader(new InputStreamReader(System.in));\\n      }\\n \\n      String next() {\\n          while (st == null || !st.hasMoreElements()) {\\n              try {\\n                  st = new StringTokenizer(br.readLine());\\n              } catch (IOException e) {\\n                  e.printStackTrace();\\n              }\\n          }\\n          return st.nextToken();\\n      }\\n \\n      int nextInt() {\\n          return Integer.parseInt(next());\\n      }\\n \\n      long nextLong() {\\n          return Long.parseLong(next());\\n      }\\n \\n      double nextDouble() {\\n          return Double.parseDouble(next());\\n      }\\n \\n      String nextLine(){\\n          String str = \"\";\\n\t  try {\\n\t     str = br.readLine();\\n\t  } catch (IOException e) {\\n\t     e.printStackTrace();\\n\t  }\\n\t  return str;\\n      }\\n\\n   }\\n   //--------------------------------------------------------\\n}\\n\\n\\n\\n\\n\\n", "target": "178", "substitutes": {"mod": ["mult", "rot", "MOD", "m", "mode", "term", "sim", "bo", "edit", "temp", "fun", "cm", "min", "set", "mut", "parent", "dec", "dev", "grow", "exp", "od", "perm", "prime", "sign", "zero", "reg", "dig", "spec", "ac", "module", "null", "sub", " MOD", "form", "scale", "add", "component", "mods", "deg", "mt", "trade", "Mod", "num", "trans", " Mod", "base", "div", "tree", "tr", "ind", "cond", "mag", "ver", "val", "mm", "post", "max", "im", "modified", "sum", "red", "tab", "del", "tag", "comp"], "sc": [" Sc", "s", "cc", "ss", "tc", "cr", "rc", "r", "cl", "bc", "cs", "ec", "desc", "esc", "sync", "Sc", "ch", "pc", "osc", "isc", "uc", "sys", " SC", " scr", "p", "c", "si", "nc", "mc", "sh", "scl", "mp", "SC", "gc", "sw", "sv", "scan", "sp", "asc", "sch", "sec", "usc", "sq"], "out": ["store", "b", "console", "msg", "s", "can", "aos", "it", "str", "cache", "error", "cmd", "net", "in", "r", "OUT", "file", "ln", "at", "t", "format", "pool", "ou", "outs", "lock", "os", "outer", "info", "go", "pretty", "ch", "news", "result", "buffer", "conn", "client", "sys", "Out", "log", "you", "p", "c", "print", "conf", "status", "ins", "ex", "crit", "write", "txt", "w", "st", "io", "output", "name", "input", "screen", "co", "to", "flush", "conv", "ent", "o", "writer", "err", "nt"], "n": ["ng", "m", "norm", "j", "s", "nan", "ny", "i", "nn", "ren", "number", "fn", "none", "z", "ln", "t", "el", "k", "ne", "ll", "nm", "p", "en", "np", "gn", "nor", "note", "nc", "len", "c", "an", "nb", "g", "d", "no", "nu", "v", "name", "names", "num", "ns", "un", "nl", "sn", "tn", "na", "o", "dn", "cn", "not", "l", "nie", "nt"], "a": ["aaa", "b", "la", "apa", "oa", "sa", "i", "e", "f", "da", "sha", "aw", "r", "am", "ed", "at", "t", "au", "area", "rand", "ab", "ca", "er", "ma", "ac", "p", "ao", "ba", "ea", "c", "data", "an", "w", "aa", "res", "ia", "aj", "ar", "ata", "all", "as", "alpha", "na", "val", "o", "one", "x", "al", "l", "ae"], "N": ["B", "NH", "P", "UN", "NN", "Ns", "NI", "MAN", "Ni", "Num", "S", "NR", "OUT", "SN", "G", "NAME", "Number", "SIZE", "NL", "AN", "NS", "I", "GN", "NO", "D", "CNN", "NUM", "ANY", "NP", "W", "NC", "NB", "L", "NOR", "V", "TN", "Size", "Name", "NM", "NG", "CN", "H", "NT", "NA", "NOTE", "T", "Y", "K", "J", "FN", "Sn", "NE", "EN", "Len", "SAN", "No", "M", "NAT", "C", "Z", "REM", "O"], "R": ["RO", "B", "E", "P", "F", "RT", "GR", "Rot", "RL", "RI", "LR", "RM", "r", "NR", "S", "G", "RA", "RB", "CR", "D", "I", "Right", "RF", "W", "L", "RE", "V", "RS", "OR", "Rh", "H", "Ren", "Rat", "Y", "T", "MR", "RES", "Reader", "RG", "J", "Q", "DR", "RR", "ER", "SR", "AR", "U", "M", "Res", "C", "KR", "X", "BR", "HR", " r"], "A": ["B", "E", "b", "P", "S", "CA", "arr", "G", "parts", "mA", "I", "D", "L", "SA", "V", "array", "Y", "T", "aux", "Array", "Args", "C", "Z", "X"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tint n,x,m=0;\\n\t\tint a[] = new int[256];\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\twhile(true)\\n\t\t{\\n\t\t\tint cnt=0;\\n\t\t\tn = scan.nextInt();\\n\t\t\tx = scan.nextInt();\\n\\n\t\t\tif( (n|x) == 0) break;\\n\\n\t\t\tfor(int i=1; i<=n; i++)\\n\t\t\t{\\n\t\t\t\tfor(int j=i+1; j<=n; j++)\\n\t\t\t\t{\\n\t\t\t\t\tfor(int k=j+1; k<=n; k++)\\n\t\t\t\t\t{\\n\t\t\t\t\t\tif(i+j+k == x)\\n\t\t\t\t\t\t{\\n\t\t\t\t\t\t\t//System.out.printf(\"%d %d %d\\n\", i, j, k);\\n\t\t\t\t\t\t\tcnt++;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\ta[m++] = cnt;\\n\t\t}\\n\\n\t\tscan.close();\\n\\n\t\tfor(int i=0; i<m; i++) System.out.println(a[i]);\\n\t}\\n}", "target": "116", "substitutes": {"n": ["ng", "nan", "it", "nn", "ren", "net", "in", "r", "z", "ln", "u", "none", "t", "ne", "mn", "network", "ll", "on", "ni", "nm", "en", "len", "c", "np", "gn", "p", "N", "an", "w", "g", "d", "no", "nu", "v", "name", "all", "ns", "num", "nl", "nw", "sn", "yes", "na", "non", "y", "o", "cn", "l", "nt"], "x": ["xi", "rx", "xp", "xe", "e", "xs", "f", "dx", "ox", "z", "u", "mx", "t", "tx", "xes", "ch", "ux", "xy", "ax", "p", "c", "xa", "ex", "w", "v", "xf", "xx", "xt", "ix", "xc", "y", "px", "o", "l", "X", "wx"], "m": ["mask", "dm", "q", "r", "mx", "cm", "km", "t", "mi", "perm", "nm", "mu", "p", "mc", "c", "bm", "gm", "g", "v", "mem", "rm", "M", "mm", "mean", "o", "im", "l"], "a": ["b", "la", "oa", "sa", "t", "A", "area", "ca", "ma", "p", "ao", "ba", "ea", "c", "xa", "ta", "data", "w", "aa", "v", "ata", "eta", "as", "ota", "o", "ana"], "scan": ["store", "san", "check", "con", "system", "can", "skip", "see", "cat", "Scan", "nn", "ann", "run", "in", "r", "z", "re", "scroll", "set", "row", "read", "sync", "black", "connect", "se", "info", "seek", "ch", "sys", "proc", "sc", "reach", "ner", "en", "query", "gen", "sur", "send", "gate", "parse", "an", "gc", "sin", "g", "mem", "sv", "bin", "search", "na", "ser", " scanner", "stat", "sum", "find"], "cnt": [" count", "acct", "Cnt", "acpt", "Count", "cpt", "count", "acnt", "Cpt", " cpt", "Cct", " cct", "cct", "acount"], "i": ["ii", "phi", "xi", "sim", "ri", "init", "bi", "it", "hi", "ims", "ci", "at", "di", "I", "mi", "this", "ie", "info", "gi", "index", "ir", "li", "ei", "si", "pi", "iq", "ti", "ia", "io", "ij", "zi", "ui", "ini", "ai", "ic", "iu", " I", "ind", "ix", "id", "ip", "y", "is", "im", "ami", "ity", "qi", "ki"], "j": ["oj", "b", "ja", "bo", "br", "ji", "jj", "bi", "jc", "it", "q", "z", "by", "uj", "bj", "bs", "rel", "jump", "ie", "json", "ib", "je", "pt", "gov", "pr", "ju", "kj", "er", "kid", "jl", "obj", "jo", "g", "v", "aj", "jp", "ij", "dj", "jas", "J", "fr", "jack", "js", "y", "im", "l", "job", "ge"], "k": ["mk", "unk", "kar", "sk", "dk", "ke", "ko", "ik", "kt", "kr", "km", "ok", "ph", "wk", "ikk", "kh", "kind", "ak", "uk", "kj", "ck", "kid", "kl", "ka", "K", "ijk", "kk", "ky", "ket", "kw", "ark", "tk", "kg", "key", "ek", "ku", "ki"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint N = scanner.nextInt();\\n\t\tList<Integer> A = new ArrayList<>();\\n\t\tList<Integer> B = new ArrayList<>();\\n\t\tList<Integer> C = new ArrayList<>();\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tA.add(scanner.nextInt());\\n\t\t}\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tB.add(scanner.nextInt());\\n\t\t}\\n\t\tfor (int i = 0; i < N - 1; i++) {\\n\t\t\tC.add(scanner.nextInt());\\n\t\t}\\n\t\tscanner.close();\\n\t\tint score = 0;\\n\t\tint tmp = 0;\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tint num = A.get(i);\\n\t\t\tint current_score = B.get(num - 1);\\n\t\t\tscore += current_score;\\n\t\t\tif (i != 0 && tmp + 1 == num) {\\n\t\t\t\tscore += C.get(tmp - 1);\\n\t\t\t}\\n\t\t\ttmp = num;\\n\t\t}\\n\t\tSystem.out.println(score);\\n\t}\\n}", "target": "223", "substitutes": {"scanner": ["canter", " scanNER", "canNER", " scaner", "caninner", "Scanener", "reachter", "reachisher", "Scanner", " scanener", "canener", "Scanisher", "scaninner", "caner", "canisher", "scanNER", "Scaner", "reachener", " scaninner", "canner", "scanener", "scanter", "scaner", "Scaninner", "ScanNER", "reachner", " scanter", "scanisher", "Scanter"], "N": ["NH", "Node", "P", "UN", "NN", "Ns", "NI", "MAN", "Num", "S", "NR", "Number", "SN", "NL", "AN", "NS", "I", "GN", "D", "NO", "NP", "NB", "L", "ND", "V", "TN", "NG", "NM", "NT", "NA", "NOTE", "T", "K", "J", "FN", "NE", "n", "M", "R", "NOW", "INT"], "A": ["AT", "AC", "GA", "At", "OA", "AA", "AS", "Ant", "As", "CA", "BA", "AN", "I", "AB", "AH", "AST", "API", "SA", "AL", "This", "Answer", "ACC", "AE", "ACT", "AF", "An", "AM", "Av", "AV", "AU", "a", "One", "ACE", "IA", "Array", "AR", "You", "The", "EA", "AP"], "B": ["b", "BB", "USB", "Blue", "CB", "BF", "BA", "RB", "I", "AB", "Ob", "OB", "NB", "L", "BO", "VB", "BY", "EB", "BI", "TB", "BL", "BS", "IB", "Bar", "MB", "BBC", "Reb", "GB", "PB", "BG", "WB", "LB", "BU", "JB", "Buffer", "SB", "BE", "BR", "Bs", "BC"], "C": ["CON", "CU", "P", "Che", "Ch", "DC", "CB", "CCC", "CM", "CA", "S", "CG", "CI", "G", "CS", "CR", "I", "D", "CNN", "Cache", "EC", "GC", "CP", "Cu", "JC", "L", "V", "CD", "c", "WC", "SC", "T", "CE", "CONT", "CV", "CT", "Cs", "M", "R", "You", "YC", "KC", "CC", "BC"], "i": ["ji", "hi", "q", "in", "iti", "ci", "mi", "li", "iq", "my", "ij", "ui", "ini", "ai", "ix", "ion", "m", "multi", "bi", "ik", "iy", "ei", "pi", "a", "cli", "zi", "chain", "n", "id", "y", "uri", "im", "ity", "ki", "ii", "ri", "fi", "init", "di", "k", "info", "gi", "index", "si", "ski", "ti", "io", "\u0438", "ind", "ip", "o", "PI", "ori", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "ims", "by", "u", "t", "I", "ie", "client", "p", "point", "inner", "ia", "ic", "iu", "ios", "is", "x", "oi", "err"], "score": ["cost", "rate", "scoring", "term", "message", "strength", "sim", "grade", "speed", "test", "value", "cache", "error", "number", "success", "core", "scroll", "goal", "arma", "Score", "diff", "loss", "result", "zero", "sc", "report", "match", "note", "status", "distance", "count", "summary", "scale", "style", "rank", "rice", "vote", "weight", "bad", "search", "average", "display", "scan", "mean", "sd", "confidence", "sum", "pred"], "tmp": ["offset", "out", "m", "qq", "msg", "opp", "adj", "img", "j", "test", "cache", "top", "loc", "dirty", "temp", "buf", "pos", "emp", "this", "node", "perm", "prime", "attr", "cur", "uff", "pkg", "xy", "proc", "nm", "p", "np", "ptr", "prefix", "mp", "obj", "cum", "nb", "ctx", "buff", "mb", "total", "etc", "timeout", "sp", "snap", "pot", "cmp", "ind", "mm", "elt", "suff", "max", "tt", "nom", "old", "ret", "nr", "sup", "nt"], "num": ["sam", "um", "norm", "mon", "test", "Num", "number", "net", "temp", "buf", "NUM", "node", "mn", "perm", "nam", "zero", "index", "nm", "mu", "ord", "np", "note", "obj", "cum", "nb", "dim", "no", "nu", "total", "name", "coord", "n", "snap", "common", "na", "cmp", "uni", "max", "nom", "typ", "sum", "nr", "old", "rem", "nt"], "current_score": ["current_match", "reported_match", "current_Score", "current_value", "reported_Score", "current_core", "currentJscore", "reported_score", " current_strength", "current_strength", "reported_core", " current_core", "currentJScore", " current_value", "currentJmatch", "currentJcore"]}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner cin = new Scanner(System.in);\\n        int n = cin.nextInt();\\n        int q = cin.nextInt();\\n        String s = cin.next();\\n        int cnt[] = new int[n];\\n        for (int i = 0; i < n - 1; i++) {\\n            if (s.charAt(i) == 'A' && s.charAt(i + 1) == 'C') {\\n                cnt[i + 1]++;\\n            }\\n        }\\n        for (int i = 0; i < n - 1; i++) {\\n            cnt[i + 1] = cnt[i] + cnt[i + 1];\\n        }\\n        for (int i = 0; i < q; i++) {\\n            int l = cin.nextInt();\\n            int r = cin.nextInt();\\n            l--; r--;\\n            out.println(cnt[r] - cnt[l]);\\n        }\\n    }\\n}\\n", "target": "52", "substitutes": {"cin": ["nar", "aco", "isin", "can", "kin", "tan", "lin", "asu", "skin", "asin", " din", "pal", "in", "cci", "coin", "ci", "rin", "cs", "vin", "chu", "pin", "maker", "irin", "cos", "cus", "vine", "zin", "dar", "tin", "quin", "cz", "cu", "cil", "slice", "gin", "mc", "c", "jin", "stri", "sin", "zu", " sin", " cis", "make", "ini", "ic", "tic", "circ", "cgi", "din", "zo", "cn", "nie", "arin", "ku", "vc"], "n": ["ng", "out", "m", "j", "nan", "nn", "net", "z", "ln", "u", "qu", "t", "k", "ne", "on", "ni", "nm", "en", "p", "nc", "c", "np", "len", "N", "pi", "nb", "d", "v", "nu", "a", "name", "no", "ns", "num", "nl", "sn", "na", "o", "x", "cn", "nt"], "q": ["eq", "qq", "m", "qual", "h", "j", "aq", "quer", "f", "z", "u", "qt", "qu", "t", "k", "ne", "dq", "ch", "qa", "qv", "qs", "ll", "quit", "que", "p", "query", "iq", "w", "g", "v", " Q", "Q", "o", "qi", "sq", "quant"], "s": ["rs", "b", "m", "h", "string", "j", "its", "ats", "str", "ss", "in", "S", "sb", "gets", "abs", "bs", "t", "os", "bits", "sys", "gs", "p", "c", "space", "sql", "sw", "g", "less", "strings", "sv", "ws", "sts", "ps", "js", "y", "ts", "ls", "is", "conv", "sq"], "cnt": ["recct", "recnt", "cpt", "cnc", " crt", "acnt", " cont", "Crt", "clont", "Cnd", "ctrt", "pst", "cachent", "Cct", "prt", "cst", " cst", "cct", "cachect", "cNT", "Cnc", "cont", "recont", "acnd", "nont", "npt", "ctNT", "clnt", " cnc", "pNT", "nnt", "Cnt", "ctnc", "Cont", "count", "recnc", " cpt", "pnt", "CNT", " count", "acct", "acrt", "acNT", "clpt", "cacheount", "Count", "nrt", "clrt", "cnd", " cNT", "Cst", "cachenc", "crt", "ctnt", " cct", " cnd"], "i": ["ji", "hi", "ci", "mi", "li", "ui", "ini", "ai", "us", "ix", "ion", "multi", "bi", "user", "iy", "go", "ei", "print", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "um", "ri", "fi", "eu", "init", "di", "info", "gi", "index", "ni", "si", "ski", "sql", "ti", "io", "iri", "\u0438", "ind", "to", "ip", "ori", "qi", "umi", "phi", "gu", "xi", "me", "j", "sim", "it", "ims", "ger", "iii", "set", "I", "this", "ie", "point", "inner", "iter", "item", "iu", "is", "oi", "err"], "l": ["m", "b", "h", "la", "j", "lr", "lu", "lo", "lin", "f", "tl", "ul", "rl", "ln", "u", "t", "el", "lp", "pl", "L", "lb", "ll", "li", "p", "c", "le", "g", "v", "left", "sl", "lv", "nl", "lc", "lt", "ls", "ell", "o"], "r": ["rd", "rs", "m", "b", "h", "ri", "j", "br", "e", "mr", "cr", "rc", "z", "dr", "u", "right", "re", "t", "ru", "rel", "pr", "er", "p", "ro", "c", "hr", "rb", "w", "g", "d", "v", "sr", "res", "ar", "rt", "or", "err", "fr", "R", "ry", "o", "ir", "rr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n\\n        Scanner scan = new Scanner(System.in);\\n        System.out.println(Integer.parseInt(scan.nextLine()) * 2 * 3.141592);\\n        \\n    }\\n}", "target": "167", "substitutes": {"scan": ["save", "out", "san", "warn", "check", "clean", "system", "can", "skip", "cat", "Scan", "nn", "run", "ann", "in", "select", "scroll", "nav", "read", "sync", "black", "connect", "se", " Scan", "seek", "sys", "proc", "sc", "reach", "ner", "report", "query", "send", "gate", "parse", "an", "sin", "get", "spin", "sv", "screen", "thin", "util", "search", "watch", "n", "ser", "look", "stat", "find"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner input = new Scanner(System.in);\\n        int A;\\n        A = input.nextInt();\\n        int B = input.nextInt();\\n        if (A==1 && B==2)\\n        System.out.print(3);\\n        else  if (A==2 && B==3) {\\n            System.out.println(1);\\n        } else  if (A==3 && B==2) {\\n            System.out.println(1);\\n        } else  if (A==2 && B==1) {\\n            System.out.println(3);\\n        } else  if (A==1 && B==3) {\\n            System.out.println(2);\\n        } else  if (A==3 && B==1)\\n            System.out.println(2);\\n    }\\n}\\n", "target": "236", "substitutes": {"input": ["agent", " Input", "out", "system", "init", "char", "Output", "cmd", "q", "in", "utils", "select", "reader", "iterator", "socket", "read", "buffer", "conn", "client", "from", "proc", "start", "parser", "quick", "inner", "parse", "inc", "subject", "get", "seed", "output", "add", "raw", "process", "self", "open", "Input", "image", "scan", "kernel", "view", "unsigned", "source"], "A": ["AC", "What", "AT", "P", "GA", "LA", "At", "AA", "UA", "AS", "CA", "S", "As", "BA", "G", "RA", "AN", "mA", "AB", "D", "I", "AST", "API", "L", "SA", "AL", "V", "This", "All", "ACC", "H", "Al", "AE", "ACT", "N", "AF", "AM", "An", "AV", "AU", "Av", "a", "Y", "T", "HA", "TA", "K", "Area", "Ar", "IA", "Array", "AR", "U", "M", "R", "JA", "C", "X", "EA", "AP", "Address"], "B": ["E", "b", "BB", "USB", "FB", "Blue", "BM", "Not", "BF", "BA", "G", "RB", "AB", "D", "I", "OB", "NB", "L", "BO", "VB", "V", "EB", "BY", "BI", "H", "TB", "BL", "BS", "IB", "Y", "T", "Bar", "DB", "J", "MB", "GB", "WB", "LB", "AR", "M", "C", "SB", "BE", "BR", "BC"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u6574\u6570\u306e\u5165\u529b\\n            int N = Integer.parseInt(in.next());\\n            String S = in.next();\\n            int ans = 0;\\n\\n            for (int i = 0; i < N - 2; i++) {\\n                if ('A' == S.charAt(i) && 'B' == S.charAt(i + 1) && 'C' == S.charAt(i + 2)) {\\n                    ans++;\\n                }\\n            }\\n\\n            // \u51fa\u529b\\n            out.println(ans);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "110", "substitutes": {"inputStream": ["importFile", "outputWindow", "inputFile", " inputView", "outputSteam", "importWindow", "inputSteam", " inputSteam", "inputstream", "sourceSteam", " inputWindow", "sourceStream", "outputFile", "outputView", "importSteam", "importStream", " inputFile", "inputView", "sourcestream", "sourceView", "outputstream", " inputstream", "inputWindow"], "outputStream": ["outputWriter", "topWriter", "topSteam", "connectionStream", "topStream", "thisStream", "thisScreen", "thisForm", "topSet", " outputSteam", "inputForm", "thisSteam", "outputSteam", "inputSteam", "connectionSteam", "connectionSet", " outputForm", "outputForm", "connectionWriter", "outputSet", " outputScreen", "outputScreen", "inputScreen", " outputSet", " outputWriter"], "in": ["current", "In", "inf", "isin", "s", "kin", "i", "it", "init", "run", "r", "file", "user", "by", "rin", "reader", "t", "pin", "IN", "this", "info", "on", "er", "gin", "null", "en", "ins", "inside", "inner", "local", "inn", "inc", "get", "cin", "sin", "st", "output", "io", "add", "input", "all", "bin", "ini", "ic", "thin", "or", "l", "ind", "id", "din", "is", "source", "login", "al", "err", "rt"], "out": ["check", "b", "msg", "s", "can", "aos", "it", " OUT", "cache", "run", "net", "r", "OUT", "temp", "t", "at", "ou", "outs", "good", "os", "outer", "info", "this", "ch", "result", "sys", "client", "Out", "log", "list", "report", "null", "p", "er", "c", "ins", "inner", "crit", "ex", "write", "gc", "w", "res", "no", "output", "io", "name", "OU", "all", "co", "chain", "gr", "n", "table", "to", "flush", "o", "writer", "x", "err", "stable", "gt", "nt"], "solver": ["solutions", " solution", "Solutions", "resolution", "solving", "insolver", "resolved", " solutions", "insolution", "solution", "unsolution", "insolving", "Solver", "resolving", "resolver", "ssolution", "solved", "ssolutions", "ssolver", " solve", "insolved", "Solve", "unsolving", "unsolved", "solve", "unsolver", "ssolve", "Solution"], "testNumber": [" solutionNum", " solutionNumbers", "testnumber", " attemptNum", " testNumbers", " solutionnumber", " solutionNumber", " attemptNumbers", "testNumbers", " attemptNumber", "testNum", " attemptnumber", " testnumber", " testNum"]}}
{"code": "import java.io.*;\\nimport java.util.Scanner;\\npublic class Main{\\n    public static void main(String args[]){\\n      Scanner sc=new Scanner(System.in);\\n        int N=sc.nextInt();\\n        int []array=new int[N];\\n        for(int i=0;i<N;i++)array[i]=sc.nextInt();\\n        int num=0;\\n        for(int i=0;i<N;i++){\\n            int minj=i;\\n            for(int j=i;j<N;j++){\\n                if(array[minj]>array[j]){\\n                    minj=j;\\n                }\\n            }\\n            if(array[minj]!=array[i]){\\n            int tmp=array[minj];\\n            array[minj]=array[i];\\n            array[i]=tmp;\\n            num++;\\n           }\\n        }\\n        for(int i=0;i<N;i++){\\n            System.out.print(array[i]);\\n            if(i<N-1)System.out.print(\" \");\\n        }\\n        System.out.println();\\n        System.out.println(num);\\n    }\\n}\\n", "target": "199", "substitutes": {"sc": [" Sc", "ng", "system", "cc", "cle", "ss", "cr", "capt", "rc", "cl", "sb", "bc", "cs", "sac", "esc", "sync", "Sc", "se", "ch", "osc", "pc", "isc", "sys", "ck", "psc", "mc", "scl", "c", "nc", "sci", "SC", "gc", "src", "sv", "nl", "scan", "lc", "sp", "asc", "conv", "sch", "sec", "anc", "usc", "Sync", "sq"], "N": ["NH", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "NL", "AN", "NS", "I", "D", "GN", "NO", "ANY", "NP", "NC", "NB", "L", "ALL", "ND", "V", "TN", "Size", "NM", "NG", "Net", "NT", "NA", "NOTE", "T", "K", "J", "FN", "Sn", "NE", "Ne", "n", "M", "R", "C", "Z"], "array": ["rays", "message", "value", "test", "atomic", "arrow", "history", "equality", "function", "instance", "list", "trace", "v", "my", "ar", "memory", "bar", "integer", "object", "word", "stage", "attribute", "one", "string", "library", "lower", "number", "answer", "section", "format", "node", "grid", "result", "share", "buffer", "actor", "ash", "data", "component", "chain", "archive", "length", "vector", "now", "table", "view", "hash", "air", "flash", "range", "store", "save", "replace", "sequence", "aw", "expression", "window", "row", "area", "our", "form", "var", "element", "image", "alpha", "ray", "collection", "system", "binary", "address", "cache", "av", "arr", "au", "use", "record", "storage", "app", "amount", "auto", "raw", "search", "audio", "Array", "angle", "ape", "map"], "i": ["ji", "hi", "q", "in", "r", "iti", "ci", "iso", "mi", "php", "li", "iq", "v", "my", "ij", "ui", "ini", "ai", "ish", "integer", "ix", "ret", "ion", "m", "multi", "e", "bi", "progress", "ik", "iy", "ei", "status", "pi", "cli", "zi", "n", " I", "id", "y", "uri", "im", "l", "ami", "ity", "ki", "ii", "um", "ri", "init", "yi", "di", "k", "info", "gi", "index", "ni", "si", "ti", "io", "iri", "\u0438", "ind", "to", "ip", "PI", "ori", "ir", "qi", "phi", "xi", "me", "sim", "it", "ims", "u", "iii", "iat", "t", "I", "this", "ie", "p", "point", "inner", "iter", "g", "ia", "item", "ic", "iu", "is", "x"], "num": ["done", "mat", "out", "um", "m", "norm", "msg", "multi", "mon", "sim", "cache", "Num", "number", "tim", "Number", "om", "NUM", "nam", "result", "zero", "index", "nm", "ord", "en", "np", "note", "conf", "count", "cum", "draw", "nb", "cal", "dim", "nu", "total", "add", "no", "coord", "n", "snap", "common", "na", "nom", "sum", "nr", "find", "nt"], "minj": ["reqje", "aminji", "relji", "aminjs", "memj", "minJ", " minz", "lowerz", "MINja", "statJ", "solji", "mineji", "MINJ", "aminj", "reqjs", "donjs", " minja", "MINj", "statji", "lowerj", "solja", "minimumjs", "soljs", "minz", "memji", "solj", "donj", "minsJ", "minsji", "reljs", "semja", "memz", "smallj", "minje", " minjs", " minji", " minJ", "minjs", "minimumj", "smallJ", "minja", "mineJ", "relje", "memJ", "lowerJ", "minimumje", "reqji", "mineja", "minsja", "aminja", "MINji", "smallji", "donji", "semjs", "semji", "minimumji", "semj", "lowerji", "minsj", "statja", "relj", "reqj", "statj", "smallja", "minji", "donja", "minej"], "j": ["oj", "m", "b", "s", "bo", "br", "ja", "it", "ji", "jj", "jc", "jac", "q", "z", "uj", "bj", "at", "ph", "t", "di", "k", "jump", "jit", "json", "pt", "pr", "ju", "kj", "off", "ax", "li", "ot", "jl", "obj", "jo", "g", "v", "aj", "jp", "ij", "dj", "J", "n", "tr", "ix", "fr", "ind", "js", "y", "o", "x", "col", "l", "false", "job"], "tmp": ["mk", "out", "qq", "term", "extra", "important", "img", "amp", "test", "cache", "dirty", "needed", "temp", "same", "t", "mut", "lib", "xxx", "emp", "node", "perm", "attr", "pkg", "xy", "stop", "np", "prefix", "mp", "db", "obj", "txt", "nb", "ctx", "buff", "etc", "td", "yy", "tm", "angle", "timeout", "cmp", "mm", "tt", "ret", "cp", "tf"]}}
{"code": "import java.io.*;\\npublic class Main{\\n    public static void main(String[] args) throws IOException{\\n        Reader r = new Reader();        \\n        String S = r.s();\\n        char[] T = S.toCharArray();\\n        T[3] = '8';\\n        S = String.valueOf(T);\\n        println(S);\\n    }\\n    static void print(Object o){\\n        System.out.print(o.toString());\\n    }\\n    static void println(Object o){\\n        System.out.println(o.toString());\\n    }\\n    static int Int(String s){\\n        return Integer.parseInt(s);\\n    }\\n    static long Long(String s){\\n        return Long.parseLong(s);\\n    }\\n    static class Reader extends BufferedReader{\\n        Reader(){\\n            super(new InputStreamReader(System.in));\\n        }\\n        String s() throws IOException{\\n            return readLine();\\n        }\\n        String[] ss() throws IOException{\\n            return s().split(\" \");\\n        }\\n        int i() throws IOException{\\n            return Int(s());\\n        }\\n        int[] ii() throws IOException{\\n            String[] ss = ss();\\n            int size = ss.length;\\n            int[] ii = new int[size];\\n            for(int j = 0; j < size; j++) ii[j] = Int(ss[j]);\\n            return ii;\\n        }\\n        long l() throws IOException{\\n            return Long(s());\\n        }\\n        long[] ll() throws IOException{\\n            String[] ss = ss();\\n            int size = ss.length;\\n            long[] ll = new long[size];\\n            for(int j = 0; j < size; j++) ll[j] = Long(ss[j]);            \\n            return ll;\\n        }\\n    }\\n}", "target": "18", "substitutes": {"r": ["rd", "rs", "b", "h", "m", "rx", "br", "it", "mr", "f", "cr", "rc", "rar", "rl", "dr", "re", "rw", "reader", "t", "rr", "rg", "er", "p", "ro", "c", "rb", "w", "sr", "d", "v", "res", "ar", "Reader", "RG", "l", "n", "fr", "R", "nr", "rt"], "S": ["WS", "SM", "B", "P", "STR", "DS", "SN", "G", "Str", "CS", "SO", "NS", "I", "A", "SER", "ST", "L", "SA", "V", "SF", "RS", "SE", "SI", "SP", "H", "N", "SC", "Si", "SQL", "SL", "SU", "J", "SR", "SS", "SH", "TS", "R", "C", "SAM", "SB", "Z", "O", "JS"], "T": ["AT", "B", "P", "TG", "HT", "F", "TM", "G", "TX", "WT", "t", "A", "D", "I", "TT", "ET", "L", "PT", "V", "TN", "TC", "H", "TH", "XT", "N", "NT", "TB", "Y", "TY", "TA", "K", "J", "Q", "OT", "TL", "TR", "AR", "TS", "M", "R", "IT", "C", "Z", "GT"], "o": ["out", "ob", "oa", "aos", "bo", "i", "oo", "lo", "e", "po", "ko", "u", "iso", "mo", "t", " os", "os", "so", "go", "on", "p", "ao", "ot", "obj", "\u00f3", "jo", "no", "io", "uo", "vo", "yo", "or", "co", "oin", "object", "n", "ano", "y", "obo", "oid", "x", "fo", "oi", "l", "O"], "s": ["bytes", "h", "ats", "q", "in", "ln", "bs", "lines", "v", "sl", "stats", "sd", "ls", "rows", "hs", "m", "string", "ies", "f", "parts", "qs", "c", "st", "a", "ms", "text", "n", "sts", "tes", "js", "y", "ts", "ses", "l", "sq", "rs", "ers", "its", "fs", "sb", "se", "line", "spec", "si", "sql", "txt", "strings", "sv", "ws", "source", "csv", "b", "i", "str", "xs", "ims", "z", "cs", "t", "os", "series", "sys", "p", "reads", "gs", "ins", "ys", "g", "lex", "src", "ns", "ds", "ps", "is", "x", "es"], "ss": ["ng", "hs", "rs", "vs", "oss", "sol", "asp", "ests", "test", "str", "fs", "xs", "aws", "nn", "ass", "ross", "bs", "cs", "mys", "rss", "tis", "sys", "hess", "gs", "ems", "si", "sis", "ks", "ols", "mes", "\u00df", "zz", "ys", "ssl", "txt", "less", "sv", "ms", "ws", "ns", "pse", "sl", "ess", "yy", "sy", "xx", "sts", "css", "SS", "sn", "ds", "ps", "sex", "ysis", "js", "sd", "ls", "ts", "ses", "pres", "iss", "ress", "uss", "sq"], "size": ["message", "see", "SIZE", "engine", "zero", "Size", "scale", "notice", "name", "scope", "ice", "city", "year", "age", "e", "number", "empty", "status", "pi", "total", "capacity", "type", "chain", "length", "sn", "equal", "n", "now", "sex", "id", "position", "sum", "description", "sample", "range", "store", "mode", "member", "window", "species", "area", "race", "se", "index", "ose", "si", "count", "radius", "shape", "sv", "num", "ze", "source", "small", "ize", "speed", "dimension", "i", "cache", "resolution", "body", "span", "set", "location", "use", "height", "network", "loss", "storage", "white", "sh", "send", "space", "zone", "style", "max"], "ii": ["qq", "xi", "ri", "fi", "i", "ji", "bi", "ik", "hi", "ani", "ims", "iti", "yi", "ci", "ql", "iso", "iat", "di", "mi", "tti", "ie", "ari", "gi", "cu", "vi", "ni", "ati", "ifi", "chi", "li", "ei", "si", "ami", "jl", "pi", "iq", "ti", "ta", "ili", "ia", "iri", "ij", "zi", "ui", "ini", "ai", "tif", "oci", "ios", "iu", "II", "im", "ir", "qi", "ki"], "j": ["ng", "jet", "oj", "current", "msg", "sim", "og", "ja", "br", "ev", "it", "ji", "jj", "jc", "jac", "i", "q", "dr", "jen", "by", "z", "uj", "bj", "el", "k", "jump", "att", "jit", "ie", "exp", "json", "ah", "je", "pt", "pr", "you", "ju", "kj", "off", "er", "jl", "obj", "jo", "g", "bot", "v", "d", "aj", "Ja", "jp", "ij", "other", "dj", "jas", "fr", "jack", "js", "y", "key", "im", "ret", "ion", "job", "ge"], "ll": ["fl", "lr", "lf", "lu", "tl", "bl", "dll", "ul", "nn", "gl", "dr", "LL", "ln", "ml", "rl", "yll", "ill", "ull", "ld", "coll", "rel", "lp", "oll", "pl", "yl", "ol", "wl", "gn", "kl", "jl", "inn", "lv", "nl", "rill", "fr", "dl", "ls", "ell", "del", "l"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        FastScanner sc = new FastScanner(System.in);\\n        char[] s = sc.next().toCharArray();\\n        s[3] = '8';\\n        System.out.println(new String(s));\\n    }\\n}\\n\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    } \\n}\\n", "target": "18", "substitutes": {"sc": ["rs", "cc", "tc", "ss", "cr", "rc", "cl", "bc", "cs", "sm", "ec", "esc", "sync", "Sc", "ch", "pc", "osc", "isc", "sys", "mc", "scl", "nc", "c", "SC", "gc", "arc", "src", "sv", "nl", "lc", "sp", "ser", "asc", "sch", "sec", "anc", "usc", "sq"], "s": ["rs", "out", "b", "h", "m", "ats", "e", "str", "aws", "f", "ss", "ims", "S", "r", "cs", "parts", "t", "pers", "acs", "qs", "gs", "p", "c", "w", "g", "d", "v", "strings", "sv", "ms", "ws", "ns", "sts", "ds", "ps", "js", "y", "ts", "ls", "ses", "is", "es", "l", "sq"], "reader": ["rot", "rs", "console", "rx", "lr", "redo", "context", " read", "value", "mr", "roo", "liner", "ocr", "rar", "r", "rl", "dr", " readers", "peer", "driver", "file", "rc", "wrapper", "row", " Reader", "dra", "iterator", "handler", "read", "resource", "this", "rr", "buffer", "finder", "line", "er", "ner", "ro", "parser", "walker", "inner", "document", "rer", "iter", "data", "loader", "input", "Reader", "runner", "stream", "text", "builder", "writer", "source", "rt"], "tokenizer": [" tokenzer", "okenizer", "terminization", "tokenization", "Tokenizer", "Tokenzer", "operatorization", "toolifier", "toolization", "okenner", "Tokeniser", "tokenner", "optiminer", "okenizable", "tokenater", "tokenize", "toolressor", "okeniser", " tokenifier", "operatorifier", "okenressor", "optimisher", "operatorter", "tooliner", "okenifier", " tokeniner", "okenifer", "serialzer", "operatorized", "characteroser", "tokeniser", "eventizer", "tokenter", "terminizer", "tagifier", "tagner", "characterifer", "keyizer", " tokenressor", " tokenization", "Tokenifier", "serialifier", " tokener", "tokenizable", "characterizable", "toolater", "keyter", "okenter", "keyizable", "tokenzer", "okener", "serialization", " tokenner", "okenized", "stanizer", " tokenisher", "eventoser", "staner", "tokenressor", " tokeniser", "okenater", " tokenater", "operatorizer", "toolisher", "tokenifier", "okenoser", "tokenoser", "toolize", " tokenize", "stanize", "tokeniner", "stanization", "tokenized", "terminzer", "characterizer", "okenzer", "tokenisher", "terminize", "tokenifer", "tagize", "operatorzer", "keyized", "toolzer", "toolizer", "okenize", "eventifer", "tokener", "okenization", "operatorizable", "eventizable", "serializer", "tagizer", "optimizer", "optimifier"], "in": ["serv", "out", "m", "console", "In", "con", "init", "it", "f", "r", "file", "t", "cont", "IN", "info", "std", "on", "from", "line", "log", "gin", "p", "null", "c", "ins", "conf", "inner", "inn", "inc", "lines", "cin", "io", "input", "all", "bin", "ini", "or", "stream", "l", "readable", "id", "din", "o", "is", "source", "err"], "n": ["out", "m", "h", "j", "nan", "e", "ul", "nn", "net", "number", "q", "r", "z", "ln", "nd", "t", "k", "ne", "mn", "network", "on", "ni", "nm", "len", "p", "c", "nc", "np", "en", "N", "count", "le", "nb", "w", "d", "no", "v", "nu", "name", "g", "all", " N", "num", "ns", "un", "nl", "sn", "na", "y", "o", "x", "cn", "l", "ut", "nt"], "a": ["aaa", "act", "b", "sta", "la", "apa", "oa", "j", "aos", "sa", "da", "ya", "am", "wa", "A", "au", "area", "ua", "ab", "ca", "qa", "ma", "ac", "ao", "aka", "ba", "ea", "xa", "ta", "an", "data", "w", "g", "aa", "ia", "ava", "ata", "ga", "ha", "as", "aux", "pa", "na", "to", "va", "ae", "fa"], "i": ["ii", "phi", "m", "xi", "me", "multi", "sim", "j", "eu", "init", "bi", "it", "ji", "f", "hi", "fire", "q", "ims", "dr", "u", "ci", "set", "di", "I", "mi", "ie", "gi", "ni", "php", "li", "ei", "si", "print", "status", "pi", "ex", "ti", "g", "cli", "my", "io", "ij", "ui", "batch", "ini", "ic", "ai", "us", "\u0438", "iu", "ix", "ind", "id", "ip", "y", "ly", "is", "PI", "im", "oi", "err", "ami", "ity", "qi", "ki"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  \\n  public static void main(String[] args) {\\n    \\n    Scanner scan = new Scanner(System.in);\\n    int X = scan.nextInt();\\n    int Y = scan.nextInt();\\n        \\n    if ((Y-2*X) >= 0 && (Y-2*X)%2 == 0 && (4*X-Y) >= 0) {\\n      System.out.println(\"Yes\");\\n      return;\\n    }\\n    System.out.println(\"No\");\\n  }\\n}\\n", "target": "62", "substitutes": {"scan": ["store", "save", "out", "san", "check", "system", "can", "skip", "char", "Scan", "nn", "ann", "in", "r", "re", "scroll", "sort", "set", "row", "read", "sync", "black", "connect", "se", "info", " Scan", "ch", "seek", "sys", "proc", "sc", "reach", "ner", "report", "query", "sur", "send", "gate", "parse", "sql", "an", "sr", "sin", "spin", "auto", "sv", "screen", "search", "util", "watch", "n", "ser", "sum", "find"], "X": ["E", "IX", "P", "XL", "ID", "WH", "S", "TX", "Width", "I", "D", "IN", "HTML", "W", "L", "V", "XX", "RY", "CH", "H", "XT", "TH", "DX", "N", "XP", "TY", " x", "Q", "EX", "XY", "CT", "XM", "M", "R", "FX", "UX", "Length", "x", "OX", "Z"], "Y": ["B", "E", "P", "YE", "MX", "YD", "S", "G", "TX", "I", "D", "W", "MY", "Year", "V", "RY", "XX", "CH", "YY", "YS", "H", "TH", "N", "HY", "EY", "T", "TY", "J", "AY", "Q", "YA", "XY", "M", "R", "Height", "y", "YC", "C", "Z"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        try (Scanner scanner = new Scanner(System.in)) {\\n            int a, b;\\n            while ((a = scanner.nextInt()) != 0 && (b = scanner.nextInt()) != 0) {\\n                for (int i = 0; i < a; i++) {\\n                    for (int j = 0; j < b; j++) {\\n                        if ((i % 2 == j % 2)) {\\n                            System.out.print(\"#\");\\n                        } else {\\n                            System.out.print('.');\\n                        }\\n                    }\\n                    System.out.println();\\n                }\\n                System.out.println();\\n            }\\n        }\\n    }\\n}", "target": "131", "substitutes": {"a": ["aaa", "act", "la", "apa", "oa", "ap", "isa", "sa", "e", "eas", "da", "am", "at", "t", "A", "au", "area", "ab", "ca", "ma", "ac", "ba", "aka", "ea", "ao", "ta", "an", "aa", "ia", "aj", "ar", "ata", "ga", "ai", "as", "alpha", "na", "y", "va", "x", "al", "ami", "ae"], "b": ["B", "eb", "ob", "ble", "bo", "br", "bi", "f", "be", "sb", "by", "fb", "u", "bs", "bc", "blue", "ab", "ib", "cb", "bis", "lb", "beta", "bas", "bb", "bg", "back", "ba", "db", "rb", "nb", "g", "bp", "v", "mb", "bar", "bu", "base", "bt", "n", "bh", "batch"], "i": ["ii", "phi", "m", "xi", "ri", "it", "init", "hi", "q", "in", "ims", "yi", "ci", "t", "di", "I", "mi", "ie", "ni", "li", "ei", "si", "pi", "iq", "ti", "v", "ia", "ij", "zi", "ui", "ini", "ai", "ic", "iu", "ix", "ind", "ip", "y", "is", "x", "im", "asi", "ami", "ki"], "j": ["oj", "h", "out", "m", "s", "ja", "br", "it", "ji", "jj", "jc", "e", "bi", "q", "z", "uj", "bj", "el", "k", "jump", "ne", "json", "pt", "pr", "ju", "kj", "jl", "obj", "jo", "g", "v", "aj", "jp", "ij", "dj", "J", "l", "n", "sp", "fr", "jack", "js", "o", "im", "err", "job", "ge"]}}
{"code": "import java.util.Scanner;\\n\\n/**\\n * Tap Dance\\n */\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n        try (Scanner sc = new Scanner(System.in)) {\\n            String S = sc.next();\\n\\n            for (int i = 1; i <= S.length(); i++) {\\n                char c = S.charAt(i - 1);\\n\\n                if (i % 2 == 1) {\\n                    if (c == 'R' || c == 'U' || c == 'D') {\\n                    } else {\\n                        System.out.println(\"No\");\\n                        System.exit(0);\\n                    }\\n                } else {\\n                    if (c == 'L' || c == 'U' || c == 'D') {\\n                    } else {\\n                        System.out.println(\"No\");\\n                        System.exit(0);\\n                    }\\n                }\\n            }\\n\\n            System.out.println(\"Yes\");\\n        }\\n    }\\n\\n}\\n", "target": "205", "substitutes": {"S": ["SM", "P", "s", "STR", "AS", "Source", "SN", "G", "Str", "CS", "NS", "A", "I", "SER", "ST", "L", "SA", "V", "SF", "RS", "SE", "SI", "SP", "H", "N", "SC", "BS", "Si", "SL", "SQL", "SU", "SS", "SH", "GS", "TS", "U", "R", "C", "SAM", "SB", "IS"], "i": ["ii", "phi", "m", "gu", "xi", "me", "j", "multi", "sim", "it", "bi", "init", "f", "hi", "in", "z", "by", "span", "ci", "set", "di", "I", "mi", "exp", "ie", "info", "json", "gi", "index", "mu", "li", "ei", "si", "pi", "iter", "ti", "a", "cli", "ui", "ini", "ic", "ai", "us", "\u0438", "chain", "iu", "n", "ix", "ind", "id", "to", "ip", "y", "o", "is", "uri", "x", "im", "oi", "l", "qi", "ki"], "c": ["orc", "h", "ct", "con", "can", "cc", "cat", "f", "cache", "tc", "cr", "rc", "r", "z", "cl", "u", "bc", "cs", "ec", "t", "cont", "cd", "com", "k", "coll", "cos", "ch", "enc", "cf", "cur", "cu", "sc", "ac", "comm", "gc", "cum", "fc", "d", "v", "arc", "g", "ar", "etc", "abc", "co", "dc", "ce", "lc", "err", "col", "cmp", "conv", "unc", "C", "cod", "l", "cp", "vc"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] p = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            p[i] = sc.nextInt();\\n        }\\n        int key = 0;\\n        int value = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (p[i] == i + 1) {\\n                continue;\\n            }\\n            if (key == 0) {\\n                key = i + 1;\\n                value = p[i];\\n                continue;\\n            }\\n            if (key != p[i] || value != i + 1) {\\n                System.out.println(\"NO\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"YES\");\\n    }\\n\\n}\\n\\n", "target": "82", "substitutes": {"sc": [" Sc", "system", "cc", "cle", "tc", "cr", "capt", "rc", "cl", "sb", "cv", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "SC", "gc", "sw", "inc", "fc", "sv", "nl", "lc", "scan", "sp", "asc", "conv", "sch", "anc", "sec", "usc", "irc", "sq"], "n": ["ng", "out", "m", "j", "nan", "nn", "net", "number", "fn", "r", "z", "ln", "t", "k", "ne", "mn", "network", "nm", "en", "nc", "np", "c", "len", "N", "an", "nb", "g", "d", "v", "name", "nu", "no", "all", "names", " N", "ns", "num", "un", "nl", "sn", "na", "o", "x", "cn", "l", "nt"], "p": ["per", "P", "pins", "pe", "xp", "ap", "rep", "pb", "q", "pers", "lp", "pm", "exp", "pl", "ping", "vp", "pc", "pt", "perm", "pr", "pkg", "pre", "tp", "point", "np", "op", "pi", "mp", "parse", "ctx", "bp", "v", "jp", "params", "pa", "sp", "ps", "wp", "ip", "post", "pp", "cp"], "i": ["ji", "hi", "q", "in", "iti", "ci", "iso", "mi", "php", "list", "li", "iq", "v", "ij", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "e", "bi", "f", "progress", "iy", "ei", "print", "status", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ami", "ity", "ki", "ii", "fi", "ri", "init", "di", "info", "gi", "index", "si", "ti", "io", "\u0438", "to", "ip", "o", "ori", "qi", "phi", "gu", "me", "xi", "j", "sim", "it", "ims", "z", "u", "set", "I", "ie", "slice", "client", "point", "ex", "iter", "g", "ia", "ic", "iu", "is", "oi", "batch"], "key": ["label", "important", "mask", "char", "ke", "str", "cache", "where", "by", "pair", "order", "pri", "row", "set", "k", "Key", "lock", "node", "which", "zero", "index", "list", "entry", "title", "choice", "match", "note", "print", "code", "prefix", "root", "name", "item", "path", "my", "version", "keys", "search", "type", "chain", "map", "owner", "id", "child", "ory", "ip", "y", "table", "val", "KEY", "x", "primary", "hash", "tag", "stable", "air"], "value": ["range", "message", "see", "number", "values", "unit", "property", "format", "relation", "function", "json", "result", "buffer", "index", "Value", "ue", "print", "data", "trace", "port", "v", "name", "tv", "volume", "version", "total", "no", "state", "type", "text", "vector", "default", "val", "field", "widget", "position", "VALUE", "description", "operator"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter pw = new PrintWriter(System.out);\\n\\n        int n = Integer.parseInt(sc.next());\\n        int m = Integer.parseInt(sc.next());\\n        int nSum = 0;\\n        int mSum = 0;\\n        for (int i = 0; i < n; i++)\\n            nSum += i;\\n        for (int i = 0; i < m; i++)\\n            mSum += i;\\n        pw.println(nSum + mSum);\\n        \\n        pw.flush();\\n    }\\n}", "target": "49", "substitutes": {"sc": [" Sc", "tch", "cc", "cle", "tc", "cr", "capt", "rc", "pb", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "isc", "pc", "osc", "ch", "sys", "mc", "scl", "nc", "c", "acc", "mp", "SC", "gc", "sw", "cons", "st", "sv", "lc", "scan", "sp", "sel", "asc", "ctrl", "sch", "sec", "usc", "irc", "sq"], "pw": ["npw", " pwa", "lpwa", "pwd", " pwr", "pr", " pr", "lpW", "pwr", "ppr", "ppwb", "npwb", "lpw", "ppW", "npwa", "pwa", "lpwd", "pwb", " pwd", "ppw", "lpwr", "ppwa", "ppwr", " pwb", "pW", " pW", "npwd", "ppwd", "lpr"], "n": ["nn", "net", "fn", "r", "ln", "t", "nr", "ne", "ll", "on", "conn", "en", "p", "c", "gn", "np", "nc", "ot", "N", "an", "nb", "d", "nu", "name", " N", "ns", "num", "un", "nl", "sn", "na", "o", "cn", "l", "nt"], "m": ["b", "h", "um", "dm", "fm", "am", "r", "om", "cm", "sm", "t", "mo", "k", "mi", "pm", "mn", "perm", "ma", "p", "mc", "c", "bm", "mp", "gm", "g", "d", "v", "mb", "mt", "rm", "tm", "M", "mm", "y", "o", "im", "em", "l", "mr"], "nSum": ["nuAss", "cnAss", "cnSummary", "nSim", "nsum", "nuSummary", "ntSum", "nsNum", "ntSummary", "nNum", " nAss", "nDual", "ntSim", "cnSim", "nuSum", "nuDual", "cnDual", "fnsum", "cnSum", "fnSum", "nssum", "nAss", " nAverage", "nAverage", "nsSum", "nSummary", "nuSim", "ntDual", " nSummary", " nsum", "fnAverage", " nNum", "fnNum", "nsAverage"], "mSum": ["mmSummary", "gmDual", " mDual", " mAss", "gmSat", "cAss", "cSummary", "mHash", "mDual", "msum", " mSummary", "psum", "pSummary", "mAss", "mSummary", "miDual", "pRes", "mStack", "cSum", "pAss", "miSum", " mHash", "cRes", "mSat", " mStack", "gmHash", " mSat", "miHash", "miSat", "mRes", "pSum", "mmsum", " msum", "pStack", " mRes", "mmSum", "mmStack", "gmSum"], "i": ["ii", "phi", "gu", "xi", "j", "multi", "ri", "fi", "init", "bi", "it", "ji", "f", "hi", "q", "iti", "ci", "iy", "iii", "di", "I", "mi", "ie", "info", "json", "ico", "gi", "client", "ni", "li", "ei", "si", "point", "pi", "ti", "a", "cli", "ij", "zi", "ui", "ini", "ai", "ic", "\u0438", "integer", "iu", "ice", "ix", "ind", "id", "ip", "is", "uri", "asi", "ori", "im", "oi", "\u00ed", "ion", "ity", "qi", "ki"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.PriorityQueue;\\nimport java.util.Scanner;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n\t\tlong n = in.nextLong();\\n\t\tSystem.out.println(solve(n));\\n\t\tin.close();\\n\t}\\n \\n\tprivate static long solve(long n) {\\n\t\tlong r = (long) (Math.pow(n, 0.5) + 1);\\n\t\tfor (; r > 1; r--)\\n\t\t\tif (n % r == 0)\\n\t\t\t\treturn n / r + r - 2;\\n\t\treturn n - 1;\\n\t}\\n}", "target": "157", "substitutes": {"in": ["out", "inf", "In", "b", "m", "isin", "i", "init", "doc", "f", "asin", " IN", " din", "file", "net", "by", "rin", "reader", "t", "row", "k", " out", "read", "IN", "up", "std", "from", "session", "log", "gin", "ner", "ma", "en", "ins", "inner", "conf", "inn", "inc", "sin", "cin", "st", "get", "add", "input", "world", "raw", "all", "bin", "ini", "thin", "stream", "err", "ind", "readable", "id", "din", "is", "sum", "l", "rt"], "n": ["ng", "m", "h", "norm", "j", "nan", "i", "e", "f", "nn", "ren", "number", "fn", "z", "ln", "u", "t", "nr", "ne", "mn", "ll", "on", "nm", "rn", "p", "len", "np", "nc", "nor", "c", "N", "nb", "g", "d", "v", "nu", "total", "w", "name", "a", "num", "ns", "nl", "sn", "nw", "tn", "na", "sd", "o", "size", "dn", "cn", "l", "nt"], "r": ["range", "rd", "rs", "rate", "m", "h", "b", "term", "j", "br", "i", "e", "f", "cr", "rid", "rc", "rar", "dr", "q", "u", "right", "re", "rw", "t", "ru", "ur", "rand", "attr", "result", "rr", "rg", "er", "rad", "rn", "p", "ro", "c", "hr", "rb", "radius", "sr", "res", "g", "w", "rank", "d", "ar", "v", "rt", "rm", "rf", "gr", "l", "vr", "err", "fr", "R", "o", "nr", "mr"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\\n            args = reader.readLine().split(\" \");\\n            int N = Integer.parseInt(args[0]);\\n            int Y = Integer.parseInt(args[1]);\\n\\n            for (int i = 0; i <= (Y / 10000); i++) {\\n                for (int j = 0; j <= ((Y - 10000 * i) / 5000); j++) {\\n                    int y = 10000 * i + 5000 * j + 1000 * (N - i - j);\\n                    if (y == Y) {\\n                        System.out.println(i + \" \" + j + \" \" + (N - i - j));\\n                        System.exit(0);\\n                    }\\n                }\\n            }\\n\\n            System.out.println(\"-1 -1 -1\");\\n        }\\n    }\\n\\n}\\n", "target": "133", "substitutes": {"N": ["B", "E", "P", "F", "NN", "NI", "Ni", "Num", "S", "NR", "G", "AN", "NS", "I", "A", "D", "GN", "NC", "NB", "L", "V", "Name", "Size", "NG", "MN", "H", "NT", "NA", "T", "K", "J", "Q", "n", "Count", "M", "R", "C", "Z", "X", "O"], "Y": ["B", "E", "P", "YD", "S", "G", "SIZE", "I", "D", "Every", "height", "W", "IO", "MY", "NB", "Year", "L", "API", "SY", "YN", "V", "CH", "TN", "Size", "NY", "BY", "YY", "YS", "H", "TH", "T", "TY", "Py", "K", "J", "Q", "Count", "M", "R", "Height", "MI", "YC", "C", "Z", "X", "O", "My"], "i": ["ii", "xi", "me", "ri", "it", "bi", "ik", "hi", "in", "ims", "z", "u", "yi", "ci", "ql", "di", "I", "mi", "this", "ie", "info", "gi", "index", "li", "p", "ei", "si", "pi", "ti", "g", "ia", "v", "iri", "ij", "zi", "ui", "ini", "ai", "ic", "iu", "n", "ix", "ind", "id", "ip", "o", "is", "x", "im", "ori", "l", "ami", "qi", "ki"], "j": ["oj", "out", "b", "s", "ja", "br", "it", "ji", "jj", "jc", "bi", "q", "z", "uj", "bj", "bs", "el", "di", "k", "jump", "rel", "son", "jit", "exp", "ne", "json", "je", "pt", "pr", "kj", "li", "kid", "note", "jl", "obj", "jo", "g", "other", "v", "d", "aj", "jp", "ij", "J", "dj", "jas", "yy", "l", "n", "sp", "fr", "js", "o", "x", "im", "ion", "err", "job", "let", "ge"], "y": ["ty", "b", "h", "uy", "fy", "ny", "axy", "ies", "wy", "link", "ye", "z", "by", "iy", "oy", "t", "py", "vy", "ch", "sky", "ady", "xy", "ym", "ay", "gy", "my", "ey", "yo", "cy", "hot", "yy", "sy", "ory", "ry", "ly", "sat", "yan"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport static java.lang.System.out;\\n\\npublic class Main{\\n    static MyReader in = new MyReader();\\n\\n    public static void main(String[] args){\\n        final int N = in.i();\\n        long D = in.l();\\n        D *= D;\\n        int ans = 0;\\n        for (int i = 0; i < N; i++) {\\n            long x = in.l();\\n            long y = in.l();\\n            long d = x * x + y * y;\\n            if (d <= D) {\\n                ans++;\\n            }\\n        }\\n        out.println(ans);\\n    }\\n\\n    static class MyReader extends BufferedReader {\\n        char[] cbuf = new char[1024];\\n        int head = 0;\\n        int tail = 0;\\n\\n        MyReader(){\\n            super(new InputStreamReader(System.in));\\n        }\\n\\n        char next() {\\n            if (head == tail) {\\n                try {\\n                    tail = super.read(cbuf, 0, cbuf.length);\\n                } catch (IOException e) {}\\n                head = 0;\\n            }\\n            return cbuf[head++];\\n        }\\n\\n        void back() {\\n            head--;\\n        }\\n\\n        boolean minus() {\\n            boolean minus;\\n            while (true) {\\n                char c = next();\\n                if (c != ' ' && c != '\\n' && c != '\\r') {\\n                    if (!(minus = c == '-')) back();\\n                    return minus;\\n                }\\n            }\\n        }\\n\\n        int i() {\\n            boolean minus = minus();\\n            int n = 0;\\n            while (true) {\\n                int k = next() - '0';\\n                if (k < 0 || 9 < k) break;\\n                n = 10 * n + k;\\n            }\\n            return minus ? -n : n;\\n        }\\n\\n        int[] ii(final int N) {\\n            int[] a = new int[N];\\n            for (int j = 0; j < a.length; j++) a[j] = i();\\n            return a;\\n        }\\n\\n        long l() {\\n            boolean minus = minus();\\n            long n = 0;\\n            while (true) {\\n                int k = next() - '0';\\n                if (k < 0 || 9 < k) break;\\n                n = 10 * n + k;\\n            }\\n            return minus ? -n : n;\\n        }\\n    }\\n}\\n", "target": "42", "substitutes": {"in": ["out", "m", "In", "inf", "h", "con", "isin", "ri", "it", "init", "doc", "cmd", " din", "q", "r", "ln", "rin", "reader", "at", "t", " out", "IN", "ie", "info", "ch", "std", "on", "log", "gin", "ac", "p", "ins", "inner", "local", "conf", "inn", "inc", "sql", "sin", "cin", "io", "add", "input", "world", "all", "bin", "ini", "ic", "as", "thin", "stream", "nin", "err", "ind", "mm", "din", "o", "is", "source", "l", "win"], "N": ["NH", "E", "P", "F", "NN", "Ns", "NI", "Num", "S", "NR", "SN", "G", "NS", "I", "GN", "NO", "A", "NC", "NB", "L", "V", "NM", "NG", "CN", "H", "NT", "NA", "Y", "T", "K", "J", "Sn", "Q", "NE", "EN", "No", "M", "R", "II", "C", "Z", "X", "Na", "O"], "D": ["DM", "B", "E", "P", "F", "Dir", "DE", "DL", "DC", "Do", "S", "DS", "G", "dL", "I", "A", "IN", "W", "L", "DO", "DP", "V", "Size", "DX", "DI", "Y", "T", "K", "DB", "J", "DA", "Q", "Len", "M", "R", "DIR", "C", "Z", "DD", "X", "O"], "ans": ["uns", "vs", "rs", "s", "rans", "ats", "aos", "ies", "xs", "ann", "cas", "ians", "vals", "ens", "cs", "AN", "outs", "os", "angs", "anes", "offs", "gs", "anks", "ks", "ins", "an", "ys", "lines", "cons", "ions", "ars", "names", "ms", "ents", "as", "ns", "ows", "us", "ids", "ants", "ons", "ds", "ps", "als", "arts", "ls", "ANS", "ints", "amps"], "i": ["ii", "phi", "m", "h", "b", "xi", "me", "ri", "sim", "multi", "e", "bi", "f", "it", "init", "hi", "r", "ims", "u", "ci", "t", "di", "I", "mi", "ie", "info", "index", "ni", "li", "p", "ei", "si", "print", "pi", "iter", "ti", "g", "v", "ia", "ij", "zi", "ui", "ms", "ini", "ai", "iu", "sp", "ind", "ix", "ip", "o", "is", "im", "oi", "l", "ki"], "x": ["m", "b", "xi", "h", "rx", "xe", "xs", "f", "dx", "ox", "r", "z", "u", " xx", "mx", "t", "xd", "tx", "ux", "xy", "ax", "p", "ex", "w", "v", "yx", "xx", "xt", "ix", "xc", "o", "px", "l", "X"], "y": ["ty", "b", "m", "uy", "ny", "axy", "e", "ies", "ye", "hy", "yd", "z", "yt", "yi", "iy", "oy", "py", "vy", "ch", "xy", "ym", "yl", "ay", "p", "gy", "dy", "ys", "Y", "ey", "yx", "yo", "cy", "yy", "sy", "iny", "ly", "o", "l", "yz"], "d": ["m", "b", "fd", "s", "e", "f", "da", "dx", "r", "z", "t", "dd", "di", "dt", "bd", "p", "dy", "db", "data", "w", "g", "pd", "td", "df", "dat", "ds", "dl", "sd", "o", "dh", "l", "dL"], "cbuf": ["CBuff", "bcbuf", "sbuff", "sbather", "rbuc", "bbuff", "rbuf", "cpbuff", "bbbuf", "cbather", "cbkw", "rbkw", "cpkw", "rbbuf", "erbuff", "CBbuff", "cbuc", "bbather", "sbuf", "erbuf", "cpuf", "rbbuff", "bckw", "cpbuf", "bcuf", "cpuff", "CBbuf", "erbbuf", "gbbuf", "cbuff", "sbbuf", "bcuff", "gbuf", "cbbuf", "gbuc", "erbather", "CBuf", "gbuff", "CBuc", "bbuf", "cbbuff", "rbuff"], "head": ["offset", "h", "clean", "pad", "pop", "top", "body", "HEAD", "Head", "window", "row", "thread", "pos", "th", "limit", "before", "go", "heading", "he", "depth", "start", "index", "client", "off", "buffer", "level", "back", "next", "len", "front", "high", "foot", "ptr", "mit", "ad", "then", "heads", "port", "end", "root", "count", "iter", "block", "left", "neck", "shift", "headed", "length", "ind", "wind", "mean", "id", "rest", "max", "position", "key", "header", "push", "with"], "tail": ["offset", "ail", "il", "it", "fat", "top", "body", "temp", "t", "empty", "tailed", "lock", "limit", "before", "ne", "bis", "ll", "buffer", "start", "index", "zero", "loop", "back", "next", "len", "stop", "foot", "ptr", "count", "iter", "port", "end", "total", "tails", "left", "pull", "nl", "length", "last", "base", "lift", "max", "size", "sum", "pointer"], "minus": ["digit", "nan", "lo", "ji", "dirty", "desc", "cos", "ston", "prime", "bis", "zero", "plus", "mu", "box", "danger", "no", "von", "my", "ui", "down", "us", "second", "mini", "cond", "non", "unsigned", "partial", "nie", "foreign", "delete", "bo", "bi", "net", "dump", "unit", "division", "empty", "format", "negative", "json", "sign", "beta", "next", "sub", "nos", "below", "dot", "de", "div", "timeout", "snap", "independence", "js", "nil", "nom", "sum", "origin", "mod", "term", "none", "des", "member", "terms", "cont", "dec", "diff", "bra", "star", "ni", "note", "get", "seconds", "multiple", "bad", "ano", "ysis", "neutral", "nes", "small", "false", "done", "wrong", "extra", "tie", "fun", "min", "mega", "exit", "pos", "dem", "dies", "ie", "ne", "uts", "unknown", "gone", "sc", "off", "neg", "two", "option", "zone", "less", "normal", "step", "bles", "south", "pot", "nuts", "is", " negative"], "c": ["b", "con", "ct", "can", "cc", "char", "cat", "f", "cache", "tc", "cr", "rc", "r", "z", "cl", "u", "bc", "cs", "t", "cont", "cd", "cos", "cb", "ch", "ca", "cf", "cur", "cu", "uc", "sc", "ac", "p", "mc", "nc", "gc", "fc", "v", "arc", "co", "dc", "ce", "lc", "cmp", "conv", "unc", "C", "col", "l", "cp", "car", "vc"], "n": ["ng", "out", "m", "h", "norm", "nan", "nn", "number", "net", "fn", "r", "z", "ln", "q", "span", "t", "nr", "pn", "ne", "mn", "on", "ni", "conn", "nm", "en", "p", "nor", "np", "nc", "gn", "inner", "an", "w", "nb", "no", "nu", "name", "v", "g", "all", "ns", "num", "un", "nl", "nw", "sn", "na", "o", "dn", "cn", "size", "l", "nt"], "k": ["mk", "unk", "m", "dk", "sk", "kar", "ke", "ik", "ko", "kn", "q", "z", "kt", "kr", "km", "ok", "ph", "ikk", "wk", "kh", "kind", "ak", "kick", "ck", "kj", "uk", "kid", "ks", "kl", "ka", "g", "K", "ijk", "kk", "kw", "ark", "tk", "key", "ek", "ku", "ki"], "a": ["aaa", "act", "b", "m", "sta", "la", "s", "oa", "sa", "f", "da", "ya", "am", "z", "u", "t", "A", "au", "area", "ua", "ab", "ca", "ma", "ac", "p", "ba", "ao", "ea", "aka", "ka", "xa", "ta", "obj", "an", "aa", "ia", "aj", "v", "ava", "ata", "ga", "as", "aux", "pa", "na", "va", "o", "fa"], "j": ["oj", "b", "ja", "br", "it", "ji", "jj", "jc", "jac", "q", "z", "uj", "bj", "ph", "jump", "att", "jit", "ie", "json", "je", "pr", "kj", "ax", "off", "jl", "obj", "jo", "g", "Ja", "aj", "jp", "ij", "dj", "J", "jas", "tr", " dj", "ix", "fr", "js", "key", "im", "err", "job"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n       Scanner sc = new Scanner(System.in);\\n       double r = sc.nextDouble();\\n       double x,y,z;\\n       x=Math.PI;\\n       y=2*r*x;\\n       z=r*r*x;\\n       System.out.printf(\"%f \",z);\\n       System.out.printf(\"%f\\n\",y);\\n\t}\\n\\n}", "target": "239", "substitutes": {}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint A = Integer.parseInt(sc.next());\\n\t\tint B = Integer.parseInt(sc.next());\\n//\t\tString s = sc.next();\\n\\n\t\tList<Integer> list = new ArrayList();\\n\\n\t\tlist.add(A+B);\\n\t\tlist.add(A-B);\\n\t\tlist.add(A*B);\\n\\n\t\tCollections.sort(list);\\n\t\tCollections.reverse(list);\\n\\n\t\tSystem.out.println(list.get(0));\\n\\n\\n\t}\\n\\n}\\n\\n", "target": "188", "substitutes": {"sc": [" Sc", "tch", "decl", "seq", "cc", "cle", "cr", "tc", "ss", "rc", "cam", "cl", "bc", "cs", "desc", "ec", "esc", "dec", "Sc", "sync", "exp", "ctl", "ch", "osc", "pc", "isc", "exec", "sys", "proc", " SC", "spec", "mc", "c", "nc", "sh", "SC", "gc", "inc", "sv", "nl", "sic", "lc", "scan", "sp", "asc", "sch", "sec", "disc", "usc", "irc", "sq"], "A": ["AC", "E", "P", "At", "AA", "S", "As", "Ax", "G", "AB", "D", "I", "L", "V", "N", "An", "AM", "a", "Area", "Array", "AR", "U", "M", "R", "C", "X"], "B": ["E", "b", "P", "BB", "S", "BA", "G", "I", "D", "AB", "L", "V", "BI", "TB", "N", "BS", "IB", "Y", "T", "DB", "J", "M", "R", "C", "Z", "O", "Bs", "BC"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\tArrayList<Integer> list = new ArrayList<Integer>();\\n\\n\t\tboolean  flg = true;\\n\\n\t\twhile (flg) {\\n\t        list.add(Integer.valueOf(scanner.nextInt()));\\n\t        for(int i=0; i<list.size(); i++){\\n\t        \tif(list.get(i) == 0){\\n\t        \t\tlist.remove(i);\\n\t        \t\tflg = false;\\n\t        \t\tbreak;\\n\t        \t}\\n\t        }\\n\t\t}\\n\\n\t\t//Case 1: 3\\n\t\tfor(int i=0; i<list.size(); i++){\\n\t\t\tSystem.out.println(\"Case \" + (i+1) + \": \" + list.get(i));\\n\t\t}\\n\\n\t}\\n}", "target": "97", "substitutes": {"scanner": ["canter", "generner", " scaner", "Scanener", "scner", "Scanner", " scanener", "canener", "scener", "scanator", "caner", "generener", "Scaner", " scanator", "scer", "generter", "generer", "scanener", "canner", "scaner", "scanter", "scator", "Scanator", "Scanter"], "list": ["range", "queue", "tmp", "sequence", "test", "number", "top", "user", "temp", "dict", "set", "pool", "history", "order", "detail", "sync", "filter", "parent", "lat", "xml", "json", "group", "LIST", "level", "load", "log", "li", "php", "null", "print", "status", "form", "local", "write", "array", "shape", "st", "acl", "add", "total", "block", "all", "left", "batch", "lv", "type", "chain", "tree", "now", "table", "def", "collection", "size", "old", "l", "lists", "listed"], "flg": ["lygs", "folg", "flyg", "blgm", "blgc", "Flgc", " flgm", "Flig", "flgs", " flfg", "lygg", "lyyg", " flyg", "flig", "blg", "lnfg", "flgm", "lng", " flig", "lyg", "ulg", "Flgm", "folyg", "ulig", "folgg", "lnig", "flgg", "lnge", " flgg", " flge", "flgc", "ulfg", "Flg", " flgs", "flge", "blig", "flfg", "folgs", "ulge", " flgc"], "i": ["ii", "phi", "m", "xi", "j", "multi", "sim", "ri", "it", "bi", "ji", "ik", "hi", "q", "in", "u", "yi", "ci", "di", "I", "mi", "gi", "index", "client", "li", "ei", "si", "c", "print", "ski", "status", "point", "pi", "iter", "ti", "v", "cli", "zi", "ui", "ini", "ai", "ic", "us", "iu", "n", "err", "ind", "ix", "id", "ip", "y", "o", "is", "key", "x", "uri", "ori", "batch", "qi", "ki"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner s=new Scanner(System.in);\\n        String str=s.next();\\n        long sum=0;\\n        for(int i=0;i<str.length();i++){\\n            int num=str.charAt(i)-'0';\\n            sum+=num;\\n        }\\n            \\n        if(sum%9==0){\\n            System.out.print(\"Yes\");\\n        }\\n        else{\\n            System.out.print(\"No\");\\n        }\\n\\n    }\\n}", "target": "93", "substitutes": {"s": ["hs", "rs", "b", "h", "sol", "ats", "xs", "fs", "aws", "ss", "S", "sb", "gets", "abs", "cs", "os", "se", "bis", "qs", "sys", "eds", "gs", "ys", "w", "v", "sv", "ms", "ws", "ns", "search", "as", "ds", "ps", "js", "ls", "ses", "ts", "ans", "is", "es", "sq"], "str": ["out", "m", "string", "j", "STR", "br", "char", "it", "f", "seq", "url", "ocr", "r", "z", "arr", "ctr", "Str", "t", "exp", "ch", "pt", "enc", "pr", "buffer", "cur", "list", "vol", "p", "print", "status", "form", "obj", "data", "txt", "g", "st", "v", "name", "res", "input", "gr", "text", "n", "dat", "tr", "fr", "wr", "nt"], "sum": ["sam", "tu", "um", "sat", "sta", "sim", "sa", "doc", "cache", "square", "must", "mass", "ass", "cos", "black", "hum", "ums", "share", "mu", "vol", " SUM", "match", "amount", " summed", "su", "count", "cum", "summary", "cal", "scale", "add", "total", "mem", "SU", "weight", "average", "n", "Sum", "hist", "mean", "ho", "size", "fac", "hash", "tail"], "i": ["ii", "phi", "m", "gu", "xi", "ogi", "multi", "ri", "j", "init", "bi", "it", "ji", "hi", "q", "in", "u", "ci", "t", "di", "I", "k", "mi", "ie", "info", "gi", "index", "li", "ei", "si", "c", "pi", "ti", "g", "io", "cli", "ui", "ini", "ai", "ic", "us", "\u0438", "iu", "ix", "id", "ip", "y", "o", "is", "uri", "x", "im", "oi", "qi", "ki"], "num": ["sam", "um", "con", "mon", "digit", "dash", "test", "Num", "number", "net", "tim", "NUM", "pn", "node", "nam", "result", "cu", "sym", "zero", "nm", "np", "local", "eng", "nb", "other", "cal", "dim", "nu", "get", "coord", "n", "snap", "cmp", "conv", "alph", "nom", "sup"]}}
{"code": "import java.util.Scanner;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = Integer.parseInt(sc.nextLine());\\n\t\tint tarou_point = 0;\\n\t\tint hanako_point = 0;\\n\t\t\\n\t\tfor (int i = 0; i < n; i++){\\n\t\t    String []words = sc.nextLine().split(\" \");\\n\t\t    char tarou[] = words[0].toCharArray();\\n\t\t    char hanako[] = words[1].toCharArray();\\n\t\t    int flag = 2;\\n\t\t    \\n\t\t    int length = hanako.length;\\n\t\t    \\n\t\t    if (tarou.length < hanako.length){\\n\t\t        length = tarou.length;\\n\t\t    }\\n\t\t    \\n\t\t    for (int l = 0; l < length; l++){\\n\t\t        if (tarou[l] < hanako[l]){\\n\t\t            flag = 0;\\n\t\t            break;\\n\t\t        }else if(tarou[l] > hanako[l]){\\n\t\t            flag = 1;\\n\t\t            break;\\n\t\t        }\\n\t\t    }\\n\t\t    \\n\t\t    if (flag == 0){\\n\t\t        hanako_point += 3;\\n\t\t    }else if(flag == 1){\\n\t\t        tarou_point += 3;\\n\t\t    }else{\\n\t\t        if (tarou.length > hanako.length){\\n\t\t            tarou_point += 3;\\n\t\t        }else if (tarou.length < hanako.length){\\n\t\t            hanako_point += 3;\\n\t\t        } else{\\n\t\t            hanako_point += 1;\\n\t\t            tarou_point  += 1;\\n\t\t        }\\n\t\t        \\n\t\t    }\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(tarou_point + \" \" + hanako_point);\\n\t}\\n}\\n", "target": "206", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\n    import java.io.IOException;\\n    import java.io.InputStreamReader;\\n\\n    public class Main {\\n\\n        public static void main(String[] args) throws IOException {\\n\\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n            int K = Integer.parseInt(br.readLine());\\n            String [] l = br.readLine().split(\" \");\\n            int A = Integer.parseInt(l[0]);\\n            int B = Integer.parseInt(l[1]);\\n\\n            if(A%K == 0 || B%K == 0){\\n                System.out.println(\"OK\");\\n            }\\n            else {\\n                int x = A/K + 1;\\n                if((x*K) > B){\\n                    System.out.println(\"NG\");\\n                }\\n                else {\\n                    System.out.println(\"OK\");\\n                }\\n            }\\n        }\\n    }", "target": "28", "substitutes": {"br": ["bridge", "b", "lr", "Br", "bsp", "bl", "shr", "bi", "cr", "dr", "r", "be", "ctr", "bj", "kr", "bs", "bc", "buf", "rys", "rel", "ch", "Fr", "pr", "pre", "bg", "next", "bd", "bm", "hr", "db", "rb", "bp", "bro", "jp", "adr", "gr", "vr", "bt", "yr", "div", "tr", "err", "fr", "bh", "bn", "ber", "wr", "browser", "nr", "mr", "BR"], "K": ["AC", "KA", "Ka", "P", "F", "HK", "KI", "UK", "Chart", "OK", "KE", "SK", "S", "G", "KB", "FK", "I", "k", "Key", "Disk", "CP", "L", "MK", "V", "KS", "H", "TH", "N", "KN", "Y", "T", "J", "KING", "Q", "IK", "Ak", "Mask", "U", "M", "KK", "IT", "KEY", "C", "KC", "Z", "KR", "X", "O", "PK", "VK"], "l": ["fl", "b", "s", "lu", "tl", "i", "it", "il", "url", "rl", "ml", "ln", "shell", "ql", "el", "ld", "els", "lp", "pl", "L", "ll", "list", "li", "ol", "lit", "jl", "le", "sql", "lines", "left", "sl", "hl", "lv", "nl", "lc", "lt", "dl", "ls", "ell", "dL"], "A": ["AC", "AT", "P", "GA", "LA", "AD", "AA", "UA", "AS", "As", "CA", "Ax", "BA", "RA", "AN", "AI", "mA", "AB", "API", "L", "SA", "AL", "PA", "ACC", "AE", "N", "AF", "An", "Av", "AV", "AU", "a", "NA", "HA", "TA", "IA", "AY", "ACK", "AX", "AR", "JA", "X", "EA", "AP"], "B": ["E", "b", "P", "BB", "USB", "FB", "BM", "S", "BA", "G", "RB", "I", "AB", "D", "O", "BE", "NB", "L", "VB", "V", "BY", "BI", "H", "TB", "N", "BL", "IB", "Y", "T", "Bar", "DB", "J", "Reb", "Q", "GB", "WB", "LB", "M", "R", "C", "SB", "Z", "BR", "BC"], "x": ["m", "xi", "rx", "j", "xp", "mix", "i", "xs", "dx", "q", "ox", "z", "mx", "t", "k", "xd", "xxx", "tx", "exp", "ext", "xes", "ux", "xy", "ax", "xa", "ex", "w", "ctx", "d", "v", "yx", "num", "xf", "xx", "n", "xt", "ix", "xc", "y", "hex", "fx", "X", "wx"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int c = sc.nextInt();\\n        int d = a-b;\\n        \\n        if (d > c) {\\n            System.out.println(\"0\");\\n        } else {\\n            System.out.println(c-d);\\n        }\\n    }\\n}\\n", "target": "45", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n \\npublic class Main {\\n    static boolean[][] used;\\n    static int[] ans;\\n    public static void main(String[] args) throws Exception {\\n        long mod = (long)Math.pow(10,9)+7;\\n        FastScanner sc = new FastScanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n        int n = sc.nextInt();\\n        int[] d = sc.nextIntArray(n);\\n        \\n        long ans = 0;\\n        for(int i = 0; i < n; i++){\\n            for(int j = i+1; j < n; j++){\\n                ans += d[i] * d[j];\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    } \\n}", "target": "126", "substitutes": {"used": ["changed", "shared", "needed", "user", "ed", "loaded", "checked", "free", "available", "use", "Used", "using", "mu", "data", "seen", "initialized", "created", " unused", "uses", "us", "util", "usage", "ended", "users", "found", "valid", "modified", "usable"], "ans": ["rows", "uns", "vs", "rs", "caps", "s", "can", "aos", "ats", "rans", "ies", "xs", "ann", " Ans", "rors", "types", "ians", "vals", "lan", "ens", " means", "cs", "aus", "outs", "os", " weights", "lets", "anes", "offs", "eds", "aps", "gs", "anks", "ks", "ends", "ins", " pan", "an", "lines", "cons", "ions", "ars", " s", "names", "ms", "ents", "as", "ns", " scans", "ows", "ids", "ants", "eps", "ates", "sts", "ds", "ps", "stats", "arts", "nets", "vers", "ts", "ANS", "ls", "ports", "amps", "actions"], "mod": ["MOD", "m", "mask", "ul", " scale", "fun", "min", "set", "t", " ind", "off", "log", "scale", "add", "mem", "mods", " mult", "Mod", " Mod", " ver", " bits", "ver", "max", "fac"], "sc": ["rs", "cc", "tc", "pb", "ss", "rc", "cr", "cl", "sb", "bc", "cs", "ec", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "uc", "sys", "ner", "mc", "scl", "nc", "c", "sharp", "sh", "SC", "gc", "fc", "arc", "sv", "ic", "dc", "lc", "scan", "sp", "ser", "asc", "ctrl", "sch", "sec", "usc", "syn", "sq"], "out": ["msg", "s", "system", "tmp", "aos", "error", "net", "put", "r", "OUT", "file", "t", "outs", "os", "outer", "info", "ch", "sys", "Out", "er", "log", "list", "null", "p", "print", "inner", "obj", "write", "txt", "w", "res", "v", "output", "io", "screen", "or", "to", "o", "writer", "x", "err", "csv", "nt"], "n": ["h", "nan", "nn", "r", "ln", "nd", "on", "log", "len", "nc", "w", "v", "no", "name", "all", "un", "ng", "m", "ct", "e", "ul", "net", "number", "c", "local", "pi", "nos", "an", "nb", "nu", "names", "sn", "nw", "y", "cn", "l", "init", "none", "mn", "ll", "ni", "nm", "gn", "N", "count", "le", "num", "na", "o", "dn", "nt", "s", "it", "ren", "z", "t", "ne", "network", "en", "p", "np", "g", " N", "ns", "nl", "natural", "nr"], "d": ["b", "fd", "m", "s", "e", "da", "gd", "dos", "r", "z", "nd", "des", "dict", "di", "dd", "ld", "D", "cd", "dt", "md", "bd", "p", "c", "db", "ad", "dim", "pd", "td", "df", "dc", "dat", "ds", "dl", "sd", "o", "dn", "dh", "l"], "i": ["ii", "phi", "xi", "me", "sim", "multi", "ri", "eu", "it", "bi", "init", "ji", "f", "hi", "q", "ims", "u", "ci", "iy", "at", "di", "I", "set", "mi", "this", "ie", "info", "gi", "index", "li", "ei", "si", "pi", "iq", "ti", "ia", "io", "cli", "ij", "zi", "ui", "ini", "ai", "\u0438", "us", "l", "iu", "ice", "et", "ind", "ix", "id", "MI", "ip", "y", "o", "is", "PI", "key", "im", "ion", "x", "oi", "ami", "ity", "qi", "ki"], "j": ["oj", "b", "h", "m", "s", "ja", "br", "ji", "jj", "bi", "jc", "q", "z", "uj", "bj", "at", "ph", "k", "jump", "jit", "ie", "json", "pt", "pr", "kj", "note", "jl", "obj", "jo", "g", "other", "v", "aj", "jp", "ij", "J", "dj", "sp", "ix", "js", "y", "o", "key", "im", "job"], "reader": ["rd", "rs", "rx", "ri", "lr", "redo", "context", "ocr", "rc", "rar", "rl", "r", "dr", "driver", "file", "row", "dra", "iterator", "handler", "read", "resource", "this", "rator", "rr", "buffer", "er", "ner", "query", "ro", "random", "parser", "inner", "document", "rer", "iter", "data", "loader", "arc", "input", "Reader", "runner", "stream", "readable", "builder", "writer", "source", "mr"], "tokenizer": [" tokenzer", "okenizer", "terminization", "tokenization", "Tokenizer", " tokenitor", "operatorization", "toolifier", "okenner", "tokenner", "okenizable", "tokenize", "okeniser", " tokenifier", " tokenister", "operatorifier", " tokenizing", "tokenizing", "wordner", "Tokenization", "okenifier", "Tokenister", "wordization", "serialzer", "terminformer", "tokeniser", "terminizer", "recognizer", "keyizer", "tokenler", " tokenization", "Tokenifier", "keyize", " tokeniter", " tokener", "tokenizable", "Tokenizers", "Tokenner", "normalization", "optimner", "tokenzer", "okener", "okenister", "okenitor", "okeniter", " tokenner", "keyifier", "operatoriser", "normaler", "keyizing", "tokenformer", " tokeniser", "normalner", "operatorizer", "tokenifier", "toolize", " tokenizers", " tokenize", "recognzer", "serialiter", "serialler", "wordformer", "terminner", "Tokeniter", "okenzer", "optimization", "tokenizers", "operatorzer", "Tokenize", "tokeniter", "okenize", "toolizer", "okenler", "wordizer", " tokenler", "recognization", "tokenister", "Tokenitor", "tokener", "recognizable", "okenization", "operatorizable", "toolizing", "serializer", "normalizer", "tokenitor", "optimizer", "okenizers", "optimformer"], "in": ["m", "In", "con", "s", "it", "f", "run", "net", "r", "file", "t", "cont", "IN", "info", "ch", "on", "from", "line", "log", "null", "p", "c", "ins", "inner", "inn", "inc", "txt", "data", "cin", "io", "ar", "input", "bin", "ini", "stream", "l", "id", "din", "is", "source", "err", "rt"], "a": ["aaa", "b", "m", "sta", "la", "oa", "sa", "da", "am", "z", "u", "t", "A", "au", "area", "ua", "ab", "ca", "ada", "ma", "ac", "p", "ba", "aka", "ao", "xa", "ea", "ka", "ta", "c", "an", "aa", "ia", "ava", "ata", "ga", "eta", "as", "aux", "pa", "na", "y", "va", "o", "ae", "fa"]}}
{"code": "\\nimport java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String args[]){\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t//\u60c5\u5831\u304c\u4f55\u4ef6\u5165\u529b\u3055\u308c\u308b\u304bn\u3067\u53d7\u3051\u53d6\u308b\\n\t\tString s1 = sc.next();\\n\t\tint n = Integer.parseInt(s1);\\n\t\t\\n\t\t//3\u6b21\u5143\u914d\u5217\u30671\u30d5\u30ed\u30a210\u90e8\u5c4b3\u968e\u5efa\u3066\u306e\u516c\u820e4\u68df\u306e\u305d\u308c\u305e\u308c\u306e\u5165\u5c45\u72b6\u6cc1\u3092\u683c\u7d0d\u3059\u308b\uff08\u521d\u671f\u5024\u306f\uff10\u306b\u3059\u308b\uff09\\n\t\tint A[][][] = new int[10][3][4];\\n\t\tfor(int i = 0; i < 4; i++){\\n\t\t\tfor(int j = 0; j < 3; j++){\\n\t\t\t\tfor(int k = 0; k < 10; k++){\\n\t\t\t\t\tA[k][j][i] = 0;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\t//\u5165\u529b\u3055\u308c\u305f\u60c5\u5831\u3092\u53d7\u3051\u53d6\u308a\u5165\u5c45\u72b6\u6cc1\u3092\u66f4\u65b0\u3059\u308b\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tString s2 = sc.next();\\n\t\t\tint b = Integer.parseInt(s2);\\n\t\t\tString s3 = sc.next();\\n\t\t\tint f = Integer.parseInt(s3);\\n\t\t\tString s4 = sc.next();\\n\t\t\tint r = Integer.parseInt(s4);\\n\t\t\tString s5 = sc.next();\\n\t\t\tint v = Integer.parseInt(s5);\\n\t\t\tA[r-1][f-1][b-1] += v;\\n\t\t}\\n\t\t\\n\t\t//\u66f4\u65b0\u3057\u305f\u5165\u5c45\u72b6\u6cc1\u3092\u8868\u793a\u3059\u308b\\n\t\tfor(int i = 0; i < 4; i++){\\n\t\t\tfor(int j = 0; j < 3; j++){\\n\t\t\t\tfor(int k = 0; k < 10; k++){\\n\t\t\t\t\tSystem.out.print(\" \" + A[k][j][i]);\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(\"\");\\n\t\t\t}\\n\t\t\tif(i != 3){\\n\t\t\t\tSystem.out.println(\"####################\");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "211", "substitutes": {"sc": [" Sc", " ss", "system", "sk", "sa", "cr", "ss", "rc", "cv", "cs", "Sc", "se", "ch", "sys", " SC", " scr", "c", "SC", "gc", "src", "sv", " sk", "scan", " sp", "sp", " cr", " sa", "sq"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String agrs[]){\\nScanner sc = new Scanner(System.in);\\n\t\tint s = sc.nextInt();\\n\t\tint m = sc.nextInt();\\nif(s>m){\\n\t\tSystem.out.println(\"a > b\");\\n}else if(s<m){\\n\t\tSystem.out.println(\"a < b\");\\n}else{\\n\t\tSystem.out.println(\"a == b\");\\n}\\n\t}\\n}", "target": "179", "substitutes": {"agrs": ["addres", "adres", " addr", "adddr", " attdr", "adrs", " attrx", " adres", "addrx", "addr", " adrx", "adrx", "addrs", " attres", " attrs", " adrs"], "sc": ["system", "cc", "cle", "cr", "tc", "ko", "sb", "cl", "bc", "cs", "desc", "cont", "esc", "Sc", "ctl", "ch", "pc", "isc", "osc", "exec", "sys", "ck", "mc", "scl", "c", "nc", "sub", "acc", "sh", "SC", "gc", "sw", "inc", "sv", "scan", "lc", "sp", "asc", "conv", "ctrl", "sec", "sch", "anc", "usc", "syn", "sq"], "s": ["hs", "rs", "b", "h", "ats", "sa", "i", "xs", "f", "ss", "ims", "S", "gets", "sb", "r", "cs", "ains", "set", "t", "se", "ashes", "eds", "gs", "p", "c", "si", "ins", "w", "d", "a", "st", "v", "ms", "ns", "us", "ids", "sts", "n", "sp", "ds", "ps", "js", "igs", "sd", "ls", "ts", "is", "ches", "l"], "m": ["b", "h", "j", "i", "f", "dm", "q", "r", "z", "u", "mx", "cm", "sm", "t", "mi", "mn", "md", "ma", "p", "mc", "c", "bm", "gm", "g", "d", "v", "esm", "a", "mt", "ms", "tm", "n", "M", "mm", "o", "l", "mr"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n  public static void main(String args[]) {\\n    Scanner sc = new Scanner(System.in);\\n\\n    int N = sc.nextInt();\\n    int M = sc.nextInt();\\n    int G[] = new int[N+2];\\n    for (int i = 0; i < M; i++) {\\n      G[sc.nextInt()]++;\\n      G[sc.nextInt()+1]--;\\n    }\\n    int count = 0;\\n    for (int i = 1; i < N+2; i++) {\\n      if (i > 0) {\\n        G[i] += G[i - 1];\\n      }\\n      if (G[i] == M) count++;\\n    }\\n    System.out.println(count);\\n  }\\n}\\n", "target": "124", "substitutes": {"sc": ["ng", "tch", "system", "cc", "cle", "cr", "ss", "capt", "pb", "tc", "cl", "sb", "bc", "cs", "desc", "qu", "cont", "esc", "sync", "Sc", "ctl", "pl", "ch", "osc", "pc", "isc", "exec", "uc", "sys", "psc", " scr", "mc", "c", "nc", "scl", "sh", "si", "sci", "SC", "gc", "sw", "g", "ctx", "cons", "sv", "screen", "mic", "scrib", "dc", "sem", "scan", "lc", "sp", "asc", "conv", "unc", "sch", "sec", "anc", "usc", "sq"], "N": ["NH", "P", "NN", "Ns", "NI", "Ni", "S", "NR", "SN", "NL", "AN", "NS", "I", "D", "NV", "NO", "GN", "NP", "NC", "NB", "L", "ND", "V", "TN", "NM", "MN", "H", "NT", "NA", "T", "K", "NE", "n", "R", "C", "X"], "M": ["B", "m", "P", "TM", "MAN", "MM", "S", "LM", "MO", "I", "D", "O", "MAL", "MU", "L", "MP", "MA", "V", "NM", "MN", "H", "MD", "MC", "T", "K", "PM", "MB", "IM", "J", "Q", "MT", "MS", "MH", "R", "MI", "U", "ME", "C", "Mon"], "G": ["B", "E", "Gate", "P", "GA", "TG", "F", "GR", "GF", "LG", "Greg", "Ge", "GE", "GI", "I", "GN", "D", "Gs", "GO", "GC", "L", "V", "IG", "GET", "GV", "AG", "GP", "H", "GMT", "GPU", "g", "Group", "Y", "T", "Graph", "J", "Gr", "GB", "GG", "GU", "BG", "Graphics", "GS", "R", "Gi", "Gu", "C", "Z", "GT", "GRE"], "i": ["ii", "phi", "m", "xi", "me", "multi", "sim", "j", "s", "ri", "init", "bi", "e", "it", "f", "hi", "ji", "q", "in", "u", "ci", "set", "di", "I", "mi", "ie", "info", "gi", "index", "client", "ni", "slice", "li", "ei", "si", "print", "pi", "iter", "ti", "cli", "zi", "ui", "ini", "ai", "ic", "us", "chain", "l", "iu", "ind", "ix", "id", "to", "ip", "y", "o", "is", "key", "x", "im", "oi", "uri", "err", "ity", "qi", "ki"], "nextInt": ["randINT", "randInteger", " nextINT", " nextShort", "Nextint", "nextFloat", "NextInteger", "nextLong", "NextLong", "randFloat", "secInt", "secFloat", "randInt", " nextLong", "NextInt", "randShort", " nextInteger", "nextInteger", "nextShort", "NextFloat", " nextint", "randLong", "nextINT", "secInteger", " nextFloat", "nextint", "randint", "secINT", "NextShort"], "count": ["current", "b", "ct", "quiet", "flag", "ount", "cache", "number", "q", "ctr", "z", "continue", "t", "coll", "th", "info", "result", "counter", "index", "list", "report", "acc", "c", "code", "gc", "iter", "nb", "g", "d", "comment", "add", "total", "num", "length", "n", "Count", "ind", "cond", "val", "call", "size", "C", "sum", "find", "found", "nt"]}}
{"code": "\\nimport java.io.*;\\nimport java.math.*;\\nimport java.security.*;\\nimport java.text.*;\\nimport java.util.*;\\nimport java.util.concurrent.*;\\nimport java.util.regex.*;\\npublic class Main{\\n\tstatic BufferedReader br;\\n\tstatic int cin() throws Exception\\n\t{\\n\t\treturn Integer.valueOf(br.readLine());\\n\t}\\n\tstatic int[] split() throws Exception\\n\t{\\n\t\tString[] cmd=br.readLine().split(\" \");\\n\t\tint[] ans=new int[cmd.length];\\n\t\tfor(int i=0;i<cmd.length;i++)\\n\t\t{\\n\t\t\tans[i]=Integer.valueOf(cmd[i]);\\n\t\t}                                              \\n\t\treturn ans;\\n\t} \\n\tstatic long mod=1000000007;\\n\tstatic long power(long x,long y) \\n    { \\n        long res = 1; \\n        x = x % mod; \\n        while (y > 0) { \\n            if (y % 2 == 1) \\n                res = (res * x) % mod; \\n            y = y >> 1;\\n            x = (x * x) % mod; \\n        } \\n        return res%mod; \\n    } \\n    static long modInverse(long n) \\n    { \\n        return power(n, mod-2); \\n    } \\n    static int digits(int n)\\n    {\\n    \tint ans=0;\\n    \twhile(n!=0)\\n    \t{\\n    \t\tans++;\\n    \t\tn=n/10;\\n    \t}\\n    \treturn ans;\\n    }\\n    static int[] dp;\\n    static int min(int[]h,int ind,int k)\\n    {\\n    \tif(ind==h.length-1)\\n    \t\treturn 0;\\n    \tif(ind>=h.length)\\n    \t\treturn 1000000000;\\n    \tif(dp[ind]!=-1)\\n    \t\treturn dp[ind];\\n    \tint res=1000000000;\\n    \tfor(int i=1;i<=k;i++)\\n    \t{\\n    \t\tif(ind+i<h.length)\\n    \t\t\tres=Math.min(res,Math.abs(h[ind+i]-h[ind])+min(h,ind+i,k));\\n    \t}\\n    \tdp[ind]=res;\\n    \treturn res;\\n    }\\n    public static void main(String[] args) throws Exception {\\n        br = new BufferedReader(new InputStreamReader(System.in));\\n        int[]ar=split();\\n        int n=ar[0];\\n        int k=ar[1];\\n        int[]h=split();\\n        dp=new int[n+1];\\n        Arrays.fill(dp, -1);\\n        System.out.println(min(h,0,k));\\n    }\\n}", "target": "241", "substitutes": {"br": ["bridge", "Tr", "b", "rx", "lr", "Br", "shr", "bl", "cr", "ocr", "r", "dr", "sb", "ctr", "kr", "bs", "bc", "buf", "ch", "pt", "pr", "bg", "er", "bd", "sh", "ba", "bm", "hr", "form", "db", "rb", "bp", "bro", "jp", "gr", "bt", "yr", "tr", "sp", "fr", "bh", "bn", "ber", "wr", "browser", "err", "mr", "BR"], "cmd": ["msg", "fy", "ct", "addr", "command", "cfg", "cat", "ctr", "cl", "cats", "shell", "ands", "cs", "desc", "cd", "cont", "om", "ctl", "news", "exe", "ext", "req", "md", "cb", "pt", "std", "pkg", "conn", "windows", "help", "bind", "comm", "ctx", "cli", "mt", "config", "ms", "det", "process", "wd", "dir", "ps", "cmp", "def", "js", "Cmd", "call", "batch", "cp", "nt"], "ans": ["uns", "annot", "sam", "oss", "san", "vs", "rs", "nan", "ats", "aos", "can", "ann", "ians", "lan", "ens", " means", "ones", "aus", "cs", "ean", "acs", "outs", "os", "cus", "angs", "ams", "acts", "ums", "lets", "ags", "offs", "ots", "aps", "eds", "ks", "books", "ins", "an", "ros", "ys", "cons", "nos", "ions", "ars", "ras", "names", "ms", "ents", "as", "ns", "us", "ows", "ants", "ids", "ares", "ons", "oos", "yes", "ds", "na", "nets", "arts", "users", "ls", "ANS", "ints", "amps", "ations", "es", "ads"], "i": ["ji", "hi", "q", "in", "ci", "mi", "li", "iq", "ij", "ui", "ini", "ai", "us", "err", "ix", "m", "multi", "e", "bi", "ei", "pi", "cli", "zi", "ms", "chain", "id", "uri", "im", "ami", "ity", "ki", "ii", "fi", "ri", "init", "fire", "di", "info", "gi", "index", "si", "ski", "ti", "ine", "\u0438", "ip", "o", "PI", "ori", "qi", "phi", "gu", "me", "xi", "j", "sim", "s", "it", "set", "I", "ie", "series", "point", "inner", "iter", "ic", "iu", "is", "oi", "batch"], "mod": ["mult", "MOD", "mode", "m", "term", "b", "j", "mon", "sim", "bo", "ox", "z", "temp", "fun", "min", "set", "com", "lib", "mut", "dec", "dev", "od", "pl", "perm", "prime", "zero", "reg", "dig", "log", "minus", "module", "p", "len", "scale", "d", "add", "mem", "mods", "cod", "deg", "step", "Mod", "ms", "trans", " Mod", "div", "base", "tr", "mag", "cond", "ver", "tab", "val", "mm", "pro", "id", "max", "sum", "modified", "man", "rem", "comp"], "x": ["b", "xi", "rx", "m", "j", "xp", "xe", "xs", "f", "dx", "ox", "r", "z", "mx", "re", "wx", "t", "xxx", "tx", "lat", "ax", "xy", "p", "c", "ex", "w", "d", "v", "ctx", "lex", "left", "xx", "xt", "ix", "xc", "ry", "o", "px", "fx", "l", "X"], "y": ["ty", "b", "m", "j", "ny", "axy", "ies", "ye", "r", "z", "yt", "t", "py", "tiny", "vy", "ch", "xy", "sys", "ym", "ay", "p", "c", "gy", "ys", "w", "g", "v", "no", "Y", "my", "ey", "cy", "yy", "sy", "yr", "xx", "ry", "ly", "o", "key", "col", "l", "yz"], "res": ["act", "rs", "out", "rx", "j", "mr", "poly", "ren", "resolution", "ox", "resp", "r", "z", "re", "des", "mx", "cs", "min", "rel", "pos", "resource", "tx", "os", "rand", "rss", "req", "stock", "prime", "rev", "result", "zero", "reg", "pre", "resources", "p", "expr", "conf", "obj", "ex", "cons", "mem", "RES", "results", "ms", "hash", "ns", "gr", "yes", "ix", "Res", "ps", "val", "js", "def", "rest", "pres", "pro", "max", "ret", "reset", "conv", "red", "ress", "rem", "wx", "resh"], "n": ["ng", "out", "m", "b", "j", "nan", "nn", "number", "fn", "in", "r", "z", "q", "ln", "u", "net", "min", "t", "nr", "ne", "mn", "ll", "on", "ni", "nm", "en", "p", "c", "np", "nc", "gn", "len", "N", "nor", "an", "w", "g", "d", "nb", "nu", "v", "name", "a", "names", "ns", "num", "un", "nl", "sn", "nw", "na", "o", "dn", "cn", "l", "nt"], "dp": ["dk", "dm", "pb", "yp", "dr", "cd", "ph", "dd", "di", "pm", "lp", "dt", "dq", "vp", "dep", "pt", "pkg", "DP", "tp", "p", "np", "mp", "db", "pas", "bp", "jp", "pd", "adr", "dj", "df", "wd", "dc", "pa", "ds", "wp", "ps", "dl", "hp", "ip", "px", "dh", "pp", "cp", "fp"], "h": ["hs", "phi", "b", "m", "html", "http", "j", "it", "f", "hi", "r", "hm", "oh", "ph", "history", "hd", "th", "kh", "ah", "ch", "hh", "he", "eh", "help", "p", "high", "hw", "H", "sh", "hr", "HH", "rh", "ih", "ht", "d", "v", "a", "hl", "host", "hist", "bh", "hp", "hex", "o", "l", "hash"], "ind": ["IND", "loc", "in", "nd", "inder", "dd", "att", "rand", "ond", "bind", "obj", "inn", "w", "mem", "all", "dj", "ix", "cond", "wind", "stick", "ald", "cod", "cand", "mind", "ld", "ad", "and", "ctx", "seed", " Ind", "dir", "dat", "id", "ent", "Ind", "typ", "col", "pred", "ii", "init", "hend", "rel", "kind", "req", "md", "start", "index", "ptr", "inc", "draw", "d", "td", "num", "each", "roll", "o", "dn", "ff", "rd", "ded", "adj", "j", "z", "pos", "und", "ne", "slice", "ord", "ins", "iter", "buff", "ia", "end", "err"], "k": ["mk", "m", "b", "j", "dk", "sk", "it", "ke", "ik", "ko", "q", "kn", "z", "u", "kt", "kr", "km", "ok", "wk", "kind", "kh", "ak", "ck", "kj", "kid", "p", "c", "kl", "ks", "ka", "w", "ku", "d", "v", "K", "kk", "kw", "kil", "o", "max", "ek", "l", "tk", "ki"], "ar": ["aro", "lar", "aer", "ear", "ap", "par", "jar", "rar", "dr", "arr", "ary", "era", "ara", "au", "area", "att", "ard", "tar", "art", "ab", "dar", "rr", "ag", "raf", "ac", "var", "array", "arc", "iar", "ars", "mar", "are", "arm", "or", "arry", "war", "ra", "har", "AR", "ora", "al", "ir", "car", "arp", "air"]}}
{"code": "import java.util.*;\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner scanner = new Scanner(System.in);\\n        int n = scanner.nextInt();\\n        long ans = 0;\\n        HashMap<String, Integer> map = new HashMap<>();\\n        for(int i = 0; i < n; i++){\\n            String s = scanner.next();\\n            char sa[] = s.toCharArray(); \\n            Arrays.sort(sa);\\n            String sorted = new String(sa);\\n            ans += map.getOrDefault(sorted, 0);\\n            map.put(sorted, map.getOrDefault(sorted, 0)+1);\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n\\n", "target": "32", "substitutes": {"scanner": ["canter", " scaner", " scann", "Scanener", "scner", "Scanner", " scanener", "canener", "scann", "scener", "caner", "gatener", "Scaner", "scer", "gateter", "gaten", "scanener", "canner", "scaner", "scanter", "gateener", "scter", " scanter", "Scann", "Scanter"], "n": ["ng", "m", "norm", "j", "nan", "Ni", "nn", "net", "number", "fn", "ln", "t", "ne", "mn", "network", "ni", "nm", "en", "np", "gn", "nor", "nc", "N", "count", "nb", "d", "nu", "num", "ns", "nl", "sn", "nw", "na", "cn", "l", "nt"], "ans": ["unes", "uns", "posts", "rs", "asts", "oa", "rans", "ats", "can", "ups", "ann", "ians", " means", "ens", "cs", "AN", "aus", " orphans", "anas", "acs", "os", "ams", "ags", "ums", "anes", "offs", "eds", "aps", "anks", "ks", "ins", "an", "ions", "ars", "ms", "orts", "as", "ents", " scans", "ows", "ants", "ces", "ids", "ns", "times", "orders", "ons", " beans", "arts", "ts", "ANS", "ls", "x", "amps", "asks", "ads"], "map": ["store", "cap", "save", "m", "per", "replace", "pad", "collect", "policy", "ap", "maps", "cache", "link", "where", "apper", "MAP", "cast", "dict", "set", "pool", "manager", "lock", "pm", "complete", "pose", "group", "index", "list", "app", "load", "match", "print", "create", "mp", "parse", "shape", "ack", "add", "mem", "mt", "make", "block", "open", "ape", "pack", "forge", "snap", "mg", "table", "cmp", "place", "sum", "batch", "man", "hash", "master", "mod"], "i": ["ii", "phi", "m", "gu", "xi", "j", "multi", "sim", "init", "bi", "it", "hi", "q", "ci", "di", "I", "mi", "ie", "gi", "li", "si", "pi", " ii", "ex", "ti", "zi", "ui", "ms", "ini", " x", "ai", "ic", "uu", "iu", " I", "ix", "ind", "id", "ip", "y", "is", "x", "im", "batch", "qi", "ki"], "s": ["hs", "sam", "rs", "b", "h", "string", "ats", "str", "f", "ss", "S", "sb", "r", "set", "t", "se", "sys", "gs", "p", "c", "space", "sw", "g", "a", "src", "less", "strings", "sv", "sl", "sf", "sts", "ps", "js", "ls", "ts", "is", "sq"], "sa": ["sam", "san", "sta", "la", "apa", "oa", "ja", "ama", "da", "ss", "sha", "sb", "wa", "sm", "au", "ua", "se", "so", "ca", "ada", "SA", "ma", "si", "sh", "aka", "su", "ta", "sw", "aa", "ia", "a", "ata", "sv", "ga", "ha", "as", "sl", "mas", "sts", "pa", "ds", "na", "sd", "va", "ica", "fa"], "sorted": [" Sorter", "svorting", "sorter", "sorting", "svorted", "horting", "saved", "sort", "sified", "unsorted", "unsorting", " sort", "Sorting", " sured", "hified", "isorted", "esorted", "Sorted", "Sured", "unsort", "isured", "isorter", " sorting", "horted", " Sorting", "horter", "esort", "isorting", "svort", " sified", "unsaved", " saved", "Sorter", " Sified", " Sorted", "svaved", "esorting", "esaved", " sorter", "sured"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t\\n\t\tint n = scan.nextInt();\\n\t\tint[] a = new int[n];\\n\\n\t\tfor (int i = 0; i < n -1; i++) {\\n\t\t\ta[scan.nextInt() - 1]++;\\n\t\t}\\n\t\tfor (int i : a) {\\n\t\t\tSystem.out.println(i);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "12", "substitutes": {"scan": ["store", "save", "out", "m", "san", "check", "system", "sim", "can", "skip", "Scan", "nn", "ann", "in", "r", "by", "re", "scroll", "sm", "row", "read", "sync", "black", "connect", "se", "ne", "seek", "ch", "sys", "proc", "sc", "reach", "ner", "report", "en", "p", "query", "sur", "send", "gate", "parse", "sql", "an", "sin", "g", "scale", "get", "auto", "spin", "sv", "search", "trans", "is", "sum", "find"], "n": ["ng", "m", "norm", "ct", "j", "nan", "f", "nn", "net", "number", "r", "z", "t", "k", "ne", "mn", "on", "en", "len", "np", "nc", "p", "c", "N", "count", "an", "and", "nb", "g", "d", "no", "nu", "v", "names", "num", "ns", "un", "nl", "sn", "na", "o", "x", "size", "cn", "l", "nt"], "a": ["aaa", "out", "b", "sta", "apa", "la", "oa", "s", "sa", "e", "am", "wa", "at", "A", "au", "area", "ab", "ca", "ada", "ma", "next", "p", "ba", "ao", "aka", "tta", "ta", "an", "data", "array", "aa", "ack", "ia", "ar", "auto", "ava", "ata", "ga", "as", "ai", "aux", "na", "va", "ae", "fa", "aura"], "i": ["ii", "phi", "gu", "m", "xi", "multi", "j", "sim", "ri", "init", "bi", "it", "f", "ji", "hi", "ims", "in", "u", "ci", "di", "I", "mi", "ie", "info", "gi", "index", "client", "li", "p", "ei", "si", "c", "pi", "iter", "ti", "g", "v", "io", "cli", "ij", "zi", "ui", "iri", "ini", "ic", "ai", "us", "chain", "iu", "ix", "ind", "id", "ip", "y", "is", "uri", "im", "ori", "oi", "qi", "ki"], "nextInt": ["randInteger", " nextINT", "readINT", "Nextint", "nextFloat", "NextInteger", "readInt", "sampleINT", "randFloat", "randInt", "sampleFloat", "sampleInteger", "NextInt", "sampleInt", " nextInteger", "nextInteger", "NextFloat", " nextint", "nextINT", "readInteger", " nextFloat", "readFloat", "nextint", "randint"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.InputMismatchException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tTask task = new Task();\\n\t\ttask.solve();\\n\t}\\n\\n\tpublic static class Task {\\n\t\tstatic final long MOD = (long) 1e9 + 7;\\n\\n\t\tpublic void solve() {\\n\t\t\tScan sc = new Scan();\\n\t\t\tlong n = sc.scanLong();\\n\t\t\tlong i = (long) Math.sqrt(n);\\n\t\t\tfor (; i >= 1; --i) {\\n\t\t\t\tif (n % i == 0) {\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tlong other = n / i;\\n\t\t\tlong res = Math.max(String.valueOf(i).length(), String.valueOf(other).length());\\n\t\t\tSystem.out.println(res);\\n\t\t}\\n\t}\\n\\n\tpublic static class Scan {\\n\t\tprivate byte[] buf = new byte[1024];\\n\t\tprivate int index;\\n\t\tprivate InputStream in;\\n\t\tprivate int total;\\n\\n\t\tpublic Scan() {\\n\t\t\tin = System.in;\\n\t\t}\\n\\n\t\tpublic int scan() {\\n\t\t\tif (total < 0)\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\tif (index >= total) {\\n\t\t\t\tindex = 0;\\n\t\t\t\ttry {\\n\t\t\t\t\ttotal = in.read(buf);\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t\t}\\n\t\t\t\tif (total <= 0)\\n\t\t\t\t\treturn -1;\\n\t\t\t}\\n\t\t\treturn buf[index++];\\n\t\t}\\n\\n\t\tpublic long scanLong() {\\n\t\t\tlong integer = 0;\\n\t\t\tint n = scan();\\n\t\t\twhile (isWhiteSpace(n))\\n\t\t\t\tn = scan();\\n\t\t\tint neg = 1;\\n\t\t\tif (n == '-') {\\n\t\t\t\tneg = -1;\\n\t\t\t\tn = scan();\\n\t\t\t}\\n\t\t\twhile (!isWhiteSpace(n)) {\\n\t\t\t\tif (n >= '0' && n <= '9') {\\n\t\t\t\t\tinteger *= 10;\\n\t\t\t\t\tinteger += n - '0';\\n\t\t\t\t\tn = scan();\\n\t\t\t\t} else\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\treturn neg * integer;\\n\t\t}\\n\\n\t\tpublic double scanDouble() throws IOException {\\n\t\t\tdouble doub = 0;\\n\t\t\tint n = scan();\\n\t\t\twhile (isWhiteSpace(n))\\n\t\t\t\tn = scan();\\n\t\t\tint neg = 1;\\n\t\t\tif (n == '-') {\\n\t\t\t\tneg = -1;\\n\t\t\t\tn = scan();\\n\t\t\t}\\n\t\t\twhile (!isWhiteSpace(n) && n != '.') {\\n\t\t\t\tif (n >= '0' && n <= '9') {\\n\t\t\t\t\tdoub *= 10;\\n\t\t\t\t\tdoub += n - '0';\\n\t\t\t\t\tn = scan();\\n\t\t\t\t} else\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tif (n == '.') {\\n\t\t\t\tn = scan();\\n\t\t\t\tdouble temp = 1;\\n\t\t\t\twhile (!isWhiteSpace(n)) {\\n\t\t\t\t\tif (n >= '0' && n <= '9') {\\n\t\t\t\t\t\ttemp /= 10;\\n\t\t\t\t\t\tdoub += (n - '0') * temp;\\n\t\t\t\t\t\tn = scan();\\n\t\t\t\t\t} else\\n\t\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn doub * neg;\\n\t\t}\\n\\n\t\tpublic String scanString() {\\n\t\t\tStringBuilder sb = new StringBuilder();\\n\t\t\tint n = scan();\\n\t\t\twhile (isWhiteSpace(n))\\n\t\t\t\tn = scan();\\n\t\t\twhile (!isWhiteSpace(n)) {\\n\t\t\t\tsb.append((char) n);\\n\t\t\t\tn = scan();\\n\t\t\t}\\n\t\t\treturn sb.toString();\\n\t\t}\\n\\n\t\tpublic char scanChar() {\\n\t\t\tint n = scan();\\n\t\t\twhile (isWhiteSpace(n))\\n\t\t\t\tn = scan();\\n\t\t\treturn (char) n;\\n\t\t}\\n\\n\t\tprivate boolean isWhiteSpace(int n) {\\n\t\t\tif (n == ' ' || n == '\\n' || n == '\\r' || n == '\\t' || n == -1)\\n\t\t\t\treturn true;\\n\t\t\treturn false;\\n\t\t}\\n\t}\\n}\\n", "target": "61", "substitutes": {"task": ["ask", "out", "message", "rake", "msg", "course", "system", "activity", "test", "command", "jj", "problem", "tc", "cmd", "net", "game", "link", "event", "t", "thread", "poll", "parent", "dev", "tx", "unknown", "pkg", "quit", "proc", "tf", "target", "next", "Task", "bolt", "remote", "background", "worker", "master", "process", "project", "piece", "work", "func", "job"], "MOD": [" REAL", " nu", " exponent", "mask", "tmp", "MAX", "init", " MAX", "real", " mod", "MIN", " rc", "exp", "prime", "beta", "log", " BASE", "T", "orig", "RES", "eta", " exp", "fac", "mod"], "sc": ["s", "sk", "cc", "tc", "ss", "cam", "rc", "bc", "cs", "esc", "sync", "Sc", "se", "ch", "pc", "osc", "isc", "sky", "uc", "sys", "mc", "c", "nc", "sci", "SC", "gc", "sw", "src", "scan", "lc", "sp", "asc", "conv", "sch", "syn", "sq"], "n": ["out", "nan", "nn", "fn", "ln", "ens", "pn", "on", "len", "nc", "v", "name", "no", "all", "un", "non", "ng", "m", "norm", "can", "ann", "net", "number", "node", "conn", "nat", "rn", "next", "nor", "c", "an", "nb", "nu", "a", "names", "sn", "nw", "y", "cn", "l", "none", "el", "mn", "ll", "ni", "nm", "gn", "note", "ot", "N", "d", "num", "na", "o", "dn", "nt", "j", "s", "ny", "ren", "z", "t", "ne", "network", "p", "en", "np", "inner", "g", "normal", "raw", "ns", "nl", "not", "nr", "syn"], "i": ["ii", "phi", "m", "b", "xi", "j", "multi", "fi", "ri", "it", "bi", "ik", "hi", "r", "z", "u", "ci", "t", "di", "I", "mi", "gi", "ni", "li", "p", "ei", "si", "pi", "ti", "ili", "v", "io", "cli", "ij", "zi", "ui", "ini", "ai", "ic", "\u0438", "iu", "ix", "ip", "y", "o", "is", "x", "oi", "l", "qi", "ki"], "other": ["m", "b", "extra", "wrong", "j", "thing", "tmp", "shared", "real", "rel", "this", "also", "sys", "another", "two", "some", "buff", "no", "item", "more", "follow", "my", "different", "Other", "second", "base", "OTHER", "odd", "common", "o", "old", "not", "l", "how"], "res": ["ress", "success", "resolution", "rc", "resp", "vals", "real", "re", "vec", "rel", "os", "req", "prime", "rev", "result", "repl", "reg", "rendered", "correct", "obj", "VAL", "cons", "mem", "RES", "results", "inv", "base", "Res", "ser", "js", "rest", "pres", "ret", "reset", "err", "comp", "rem", "red"], "buf": ["bytes", "queue", "cap", "b", "msg", "img", "tmp", "seq", "br", "bl", "cat", "pb", "cmd", "uf", "arr", "fb", "cv", "vec", "bs", "Buff", "cb", "bag", "buffer", "pkg", "mu", "box", "aka", "db", "rb", "txt", "ctx", "buff", "bp", "mb", "mem", "bin", "mus", "bar", "map", "conv", "Buffer", "batch", "tab", "wb"], "index": ["offset", "page", "speed", "insert", "address", "context", "e", "alias", "link", "error", "number", "loc", "find", "set", "row", "lock", "Index", "pos", "frame", "connect", "info", "seek", "instance", "start", "zero", "loop", "slice", "buffer", "level", "next", "connection", "point", "si", "status", "count", "iter", "data", "axis", "column", "open", "num", "length", "update", "second", "scan", "ind", "ix", "minute", "condition", "key", "x", "position", "size", "pointer", "head"], "in": ["out", "inf", "In", "m", "h", "con", "isin", "s", "it", "f", "run", "r", "rin", "t", "IN", "info", "up", "on", "from", "log", "gin", "en", "mc", "c", "inner", "ins", "conf", "ex", "inn", "inc", "get", "cin", "io", "ar", "input", "world", "bin", "ini", "ic", "as", "or", "stream", "err", "ind", "mm", "din", "o", "is", "l"], "total": ["done", "bytes", "current", "successful", "page", "expected", "sequence", "init", "full", "alloc", "net", "otal", "none", "number", "t", "empty", "free", "available", "complete", "iterator", "human", "padding", "this", "json", "result", "buffer", "zero", "null", "len", "note", "ta", "count", "Total", "summary", "scale", "no", "iter", "serial", "normal", "volume", "all", "eta", "relative", "type", "active", "percent", "length", "base", "equal", "unique", "non", "table", "to", "partial", "max", "size", "not", "sum", "meta", "batch", "stable"], "integer": ["important", "inter", "digit", "international", "sequence", "value", "number", "eight", "expression", "division", "imei", "information", "reference", "iterator", "negative", "internal", "instance", "inity", "result", "zero", "significant", "entry", "choice", "inner", "maximum", "option", "entity", "iter", "serial", "ant", "auto", "version", "ment", "initial", "num", "length", "image", "object", "internet", "integ", "orient", "rational", "translation", "ent", "neutral", "ient", "unsigned", "position", "ion", "primary", "national"], "neg": ["nov", "coll", "cos", "rand", "zero", "len", "ois", "scale", "v", "no", "flags", "us", "or", "cond", "orient", "unsigned", "foreign", "norm", "ko", "dest", "unit", "goal", "jump", "negative", "dep", "isl", "sign", "relations", "Pos", "nos", "axis", "deg", "ms", "div", "cmp", "nom", "origin", "ku", "rot", "alloc", " Neg", "rel", "dec", "diff", "acc", "Neg", "form", "ptr", "rank", "num", "ind", "neutral", "rest", "valid", "size", "sec", "rev", "uns", "serv", "vs", "fee", "flag", "ren", "mis", "und", "emin", "pos", "agg", "ne", "minus", "comment", "iter", "inv", "nl", "odd", " negative", "err"], "doub": [" dott", "dummy", "dictionary", "tdummy", " dictionary", "fott", "fictionary", "dott", "foub", "tdoub", "tdictionary", "tdott", " dummy", "fummy"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\t\\n\t\tint N = sc.nextInt();\\n\t\tint[] A;\\n\t\tA = new int[N];\\n\\n\t\tfor(int i = 0; i < N; i++){\\n\t\t \tA[i]= sc.nextInt();\\n\t\t}\\n\t\tint minj;\\n\t\tint count = 0;\\n\t\tfor(int i = 0; i < N; i++){\\n\t\t\tminj = i;\\n\t\t\tfor(int j = i; j < N; j++){\\n\t\t\t\tif(A[j] < A[minj]){\\n\t\t\t\t\tminj = j;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif(minj != i){\\n\t\t\t\tint temp = A[i];\\n\t\t\t\tA[i] = A[minj];\\n\t\t\t\tA[minj] = temp;\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\\n\\n\t\tfor(int k = 0; k < N; k++){\\n\t\t\tSystem.out.printf(\"%d\",A[k]);\\n\t\t\tif(k != N - 1){\\n\t\t\t\tSystem.out.printf(\" \");\\n\t\t\t}\t\\n\t\t}\\n\t\tSystem.out.printf(\"\\n%d\\n\",count);\\n\\n\t}\\n}\\n", "target": "199", "substitutes": {"sc": [" Sc", "ng", "system", "cc", "cle", "tc", "ss", "cr", "rc", "capt", "r", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "pc", "isc", "osc", "sys", "ner", "mc", "scl", "c", "nc", "SC", "gc", "fc", "arc", "sv", "nl", "scan", "lc", "sp", "asc", "conv", "sch", "anc", "sec", "usc", "sq"], "N": ["B", "NH", "Node", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NL", "AN", "NS", "I", "D", "ANY", "NO", "GN", "NP", "NC", "NB", "L", "ALL", "ND", "V", "TN", "Size", "NM", "NG", "MN", "Net", "NT", "NA", "T", "K", "J", "FN", "Sn", "Q", "NE", "Ne", "n", "M", "R", "NAT", "C", "Z", "O"], "A": ["AT", "B", "AC", "What", "E", "P", "GA", "LA", "At", "Ass", "AA", "CA", "S", "As", "BA", "G", "Abs", "mA", "AB", "D", "I", "Action", "Cache", "L", "ALL", "SA", "MA", "V", "Am", "RAM", "And", "App", "Answer", "All", "ACC", "H", "AE", "ACT", "AF", "An", "AM", "AV", "AU", "a", "Y", "T", "HA", "These", "NA", "Ar", "IA", "Alpha", "Make", "To", "WA", "Array", "AAA", "Args", "AR", "JA", "M", "U", "ATA", "The", "C", "X", "EA", "AP"], "i": ["ji", "hi", "q", "in", "r", "iti", "ci", "iso", "mi", "li", "iq", "v", "ij", "ui", "ini", "ai", "integer", "et", "err", "ix", "m", "multi", "e", "bi", "progress", "iy", "entry", "ei", "print", "status", "pi", "cli", "zi", "chain", "n", "id", "y", "uri", "im", "l", "ami", "ki", "ii", "um", "ri", "init", "di", "info", "gi", "index", "ni", "si", "ti", "io", "iri", "\u0438", "ind", "to", "ip", "ori", "ir", "false", "qi", "phi", "xi", "me", "sim", "it", "ims", "iii", "t", "I", "this", "ie", "client", "p", "point", "inner", "iter", "g", "ia", "ic", "iu", "is", "x", "batch"], "minj": ["minimumja", "minuj", "minaj", "subji", "solj", "searchja", "mintjp", "MINji", "searchdj", "tenji", "mirk", "sortj", "lowerja", "mirji", "minsj", "MinJ", "mintJ", "meetaj", "mitaj", "MINjp", "lowerq", "mitq", "mink", "mitjs", "searchj", "lowerjs", "minjs", "sortji", "mintji", "mitj", "minimumjp", "mirj", "mintja", "minsuj", "mindj", "solji", "mitdj", "lowerj", "minimumJ", "MINjs", "meetdj", " mink", " minjs", " minji", "minimumj", "solJ", "meetja", "subj", "Mink", "tenjp", "subuj", "solk", " minjp", "minJ", "mintj", " minja", "MINj", "sortjp", "mirjp", "Minjp", "minq", "mintuj", "minsji", "tenj", "minjp", "subja", " minJ", "minja", "minsja", "Minji", "Minj", "searchaj", "mitja", "meetj", "tenk", " minq", "minji", "sortjs", "tenjs"], "count": ["check", "ct", "ount", "cache", "number", "ctr", "hold", "cont", "close", "coll", "race", "force", "result", "counter", "index", "depth", "list", "report", "c", "match", "code", "conf", "amount", "cycle", "trace", "nb", "add", "total", "process", "num", "state", "length", "n", "Count", "cond", "call", "size", "sum", "find", "found", "nt"], "j": ["oj", "b", "m", "s", "ja", "bo", "br", "it", "ji", "jj", "str", "jc", "jac", "q", "z", "uj", "bj", "jump", "jit", "json", "je", "pt", "pr", "ju", "kj", "jl", "obj", "jo", "g", "other", "v", "zone", "aj", "jp", "ij", "dj", "J", "jas", "l", "n", "tr", "err", "ind", "sp", "js", "y", "key", "ion", "ort", "job", "ge"], "temp": ["Temp", "tem", "cap", "term", "strength", "porary", "tmp", "perature", "test", "sequence", "tc", "EMP", "fake", "unt", "unit", "t", "emp", "stem", "prime", "timer", "result", "variable", "buffer", "adjusted", "null", "stop", "template", "iter", "txt", "tv", "total", "deg", " Temp", "cell", "tm", "alt", "texture", "tt", "Temperature", "mod"], "k": ["ask", "mk", "unk", "m", "ick", "dk", "sk", "kar", "ke", "ik", "ko", "q", "kn", "kt", "kr", "km", "ok", "ph", "wk", "ikk", "kh", "kind", "ak", "kick", "ck", "uk", "kj", "kid", "kl", "ka", "ks", "g", "ack", "K", "ijk", "kk", "kw", "ark", "tk", "isk", "key", "ek", "ku"]}}
{"code": "import java.io.ByteArrayInputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.ArrayDeque;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.InputMismatchException;\\nimport java.util.Map;\\nimport java.util.Queue;\\n\\npublic class Main {\\n\tInputStream is;\\n\tPrintWriter out;\\n\tString INPUT = \"\";\\n\\n\tvoid solve() {\\n\t\tchar[] s = ns(3);\\n\t\tchar[] t = ns(3);\\n\t\tint ct = 0;\\n\t\tfor(int i = 0; i < 3; i++) {\\n\t\t\tif(s[i] == t[i]) ct++;\\n\t\t}\\n\t\tout.println(ct);\\n\t}\\n\t\t\\n\t\t\\n\tvoid run() throws Exception {\\n\t\tis = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());\\n\t\tout = new PrintWriter(System.out);\\n\\n\t\tlong s = System.currentTimeMillis();\\n\t\tsolve();\\n\t\tout.flush();\\n\t\tif (!INPUT.isEmpty())\\n\t\t\ttr(System.currentTimeMillis() - s + \"ms\");\\n\t}\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tnew Main().run();\\n\t}\\n\\n\tprivate byte[] inbuf = new byte[1024];\\n\tpublic int lenbuf = 0, ptrbuf = 0;\\n\\n\tprivate int readByte() {\\n\t\tif (lenbuf == -1)\\n\t\t\tthrow new InputMismatchException();\\n\t\tif (ptrbuf >= lenbuf) {\\n\t\t\tptrbuf = 0;\\n\t\t\ttry {\\n\t\t\t\tlenbuf = is.read(inbuf);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tif (lenbuf <= 0)\\n\t\t\t\treturn -1;\\n\t\t}\\n\t\treturn inbuf[ptrbuf++];\\n\t}\\n\\n\tprivate boolean isSpaceChar(int c) {\\n\t\treturn !(c >= 33 && c <= 126);\\n\t}\\n\\n\tprivate int skip() {\\n\t\tint b;\\n\t\twhile ((b = readByte()) != -1 && isSpaceChar(b))\\n\t\t\t;\\n\t\treturn b;\\n\t}\\n\\n\tprivate double nd() {\\n\t\treturn Double.parseDouble(ns());\\n\t}\\n\\n\tprivate float nf() {\\n\t\treturn Float.parseFloat(ns());\\n\t}\\n\\n\tprivate char nc() {\\n\t\treturn (char) skip();\\n\t}\\n\\n\tprivate String ns() {\\n\t\tint b = skip();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\twhile (!(isSpaceChar(b))) { // when nextLine, (isSpaceChar(b) && b != ' ')\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tprivate char[] ns(int n) {\\n\t\tchar[] buf = new char[n];\\n\t\tint b = skip(), p = 0;\\n\t\twhile (p < n && !(isSpaceChar(b))) {\\n\t\t\tbuf[p++] = (char) b;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn n == p ? buf : Arrays.copyOf(buf, p);\\n\t}\\n\\n\tprivate char[][] nm(int n, int m) {\\n\t\tchar[][] map = new char[n][];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\tmap[i] = ns(m);\\n\t\treturn map;\\n\t}\\n\\n\tprivate int[] na(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = ni();\\n\t\treturn a;\\n\t}\\n\\n\tprivate int ni() {\\n\t\tint num = 0, b;\\n\t\tboolean minus = false;\\n\t\twhile ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))\\n\t\t\t;\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\\n\t\twhile (true) {\\n\t\t\tif (b >= '0' && b <= '9') {\\n\t\t\t\tnum = num * 10 + (b - '0');\\n\t\t\t} else {\\n\t\t\t\treturn minus ? -num : num;\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tprivate long nl() {\\n\t\tlong num = 0;\\n\t\tint b;\\n\t\tboolean minus = false;\\n\t\twhile ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))\\n\t\t\t;\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\\n\t\twhile (true) {\\n\t\t\tif (b >= '0' && b <= '9') {\\n\t\t\t\tnum = num * 10 + (b - '0');\\n\t\t\t} else {\\n\t\t\t\treturn minus ? -num : num;\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tprivate static void tr(Object... o) {\\n\t\tSystem.out.println(Arrays.deepToString(o));\\n\t}\\n}", "target": "243", "substitutes": {"is": ["ris", "oss", "rs", "ri", "its", "isa", "init", "fs", "in", "ims", "abs", "bs", "cs", "vis", "was", "os", "se", "ib", "isc", "isl", "bits", "bis", "sys", "has", "Is", "ist", "ists", "si", "sis", "ins", "ys", "get", "ais", "res", "input", "are", "ms", "isi", "ic", "as", "us", "ios", "ps", "js", "ip", "es", "iss", "im", "ism", "IS"], "out": ["oss", "console", "can", "aos", "it", "str", "cache", "error", "net", "in", "OUT", "at", "pool", "ou", "outs", "os", "outer", "info", "ch", "sys", "client", "Out", "log", "list", "report", "null", "p", "print", "obj", "ex", "gc", "write", "w", "res", "v", "output", "io", "end", "input", "OU", "all", "screen", "us", "co", "n", "table", "to", "flush", "conv", "o", "writer", "sum", "ion", "err", "gt", "nt"], "INPUT": [" INJECT", "InFILE", " INinput", "INVO", "UNinput", " OUTHTML", "UNPUT", "inFILE", "InVO", " inHTML", "INFILE", "INFIX", " INHTML", "INHTML", "InTABLE", "INJECT", " inFIX", " INTABLE", "inTABLE", " INVO", "UNFILE", "inJECT", "inPUT", "InJECT", " OUTBOX", "inBOX", "InVERSION", " inPUT", " inBOX", " INFIX", " INBOX", "INinput", "INBOX", " INFILE", "INVERSION", "InPUT", " INVERSION", " OUTFIX", "inVERSION", "Ininput", "UNVO", " OUTPUT", "InBOX", "INTABLE"], "s": ["hs", "rs", "h", "j", "its", "ats", "sa", "ies", "str", "xs", "fs", "ss", "ths", "q", "f", "r", "S", "ets", "ens", "cs", "set", "pers", "os", "se", "uts", "sets", "eds", "p", "gs", "sh", "si", "ins", "ols", "ys", "sin", "sg", "st", "a", "sv", "ms", "ns", "south", "n", "sts", "sp", "ds", "ps", "js", "sd", "ts", "ls", "ses", "l", "sq"], "t": ["ty", "tu", "j", "it", "f", "tc", "q", "r", "wt", "dt", "pt", "tp", "p", "ot", "template", "ta", "txt", "w", "st", "v", "T", "td", "tm", "n", "tree", "tr", "to", "y", "ts", "o", "tt", "l", "te", "rt"], "ct": ["act", "mult", "cap", "cc", "cat", "capt", "cmd", "tc", "ft", "Ct", "ctr", "cl", "put", "kt", "cd", "cont", "ctl", "pt", "cf", "cur", "ck", "nc", "oct", "count", "gc", "ctx", "st", "mt", "config", "etc", "ect", "td", "percent", "const", "bt", "CT", "cond", "tab", "cpu", "vt", "ctrl", "tt", "stat", "sec", "col", "apt", "ut", "nt"], "i": ["ii", "phi", "m", "me", "xi", "multi", "j", "sim", "fi", "sequence", "bi", "it", "ji", "init", "in", "u", "span", "ci", "di", "I", "mi", "series", "info", "gi", "li", "p", "point", "si", "pi", "ti", "cli", "zi", "ui", "ini", "ai", "\u0438", "us", "chain", "ind", "ix", "ip", "y", "o", "uri", "mac", "x", "im", "oi", "ori", "l", "ami", "qi", "ki"], "inbuf": ["Inqueue", "inbuffer", "outbuffer", "INvec", "Inbuff", "INbuf", "invec", "outbuf", "outbuff", "cinbuf", "innbuff", "inqueue", "cinbr", " inqueue", "inbu", "inbuff", " inbag", "Invec", "INqueue", "innbag", "INbuff", "cinbuffer", "inputbuf", "cinbuff", "innbuf", "inputbu", "inputbag", "Inbuf", " inbr", "inbr", "innbu", " inbu", " inbuffer", "inputbuff", "inbag", " inbuff", "outbr", " invec"], "lenbuf": ["lanbuff", "llbuf", "ptrcur", "Lenbuffer", " lenrb", "Lenrb", "ptruf", "lenmsg", " lenbuffer", "lenqueue", "Lenbr", "Lenqueue", "ptrbuffer", "Lenbuf", "Lencur", "lerb", "lonbuf", " lenbr", " lenqueue", "lencv", "ptrbr", "loncoord", "lancoord", "lenbuffer", "lebuff", "ptrbuff", "lequeue", "lenbr", "lancv", "Lenbuff", " lenmsg", "lenbuff", "lencur", "llbr", " lenuf", "Lenmsg", " lencoord", "lonbuff", "ptrmsg", "lencoord", "lenrb", " lenbuff", "llbuff", "lebuf", " lencur", "lenuf", "lanbuf", "Lenuf", "llbuffer", " lencv", "loncv"], "ptrbuf": ["Ptrpkg", "primebuf", "trtmp", "trbuff", "pointerbuffer", "primepkg", "drbuf", "ptrcv", "ptrpkg", "prbuf", "drcv", "posbuf", "padbuff", "ptrvec", "ptrbuffer", "Ptrcv", "padbuffer", "padbuf", "padpkg", "trbuffer", "drbuff", "refbuff", "pointerbuff", "posbuffer", "Ptrbuffer", "lenbuffer", "lentmp", "ptrbuff", "refbuffer", "trbuf", "ptrtmp", "primebuffer", "prtmp", "primebuff", "lenbuff", "pointercv", "prbuff", "prbuffer", "Ptrbuff", "posbuff", "Ptrbuf", "drpkg", "pointerbuf", "refbuf", "refvec", "posvec", "pointervec", "pointerpkg"], "c": ["m", "h", "con", "category", "cc", "f", "cache", "tc", "cr", "rc", "z", "cl", "ci", "bc", "cd", "cont", "k", "coll", "dec", "cb", "ca", "pc", "enc", "cf", "content", "cu", "uc", "ac", "p", "mc", "acc", "\u00e7", "count", "gc", "w", "fc", "d", "v", "a", "abc", "const", "dc", "ce", "lc", "n", "cond", "cmp", "unc", "x", "C", "cod", "l", "cp", "vc"], "b": ["B", "ob", "ble", "bo", "br", "e", "bi", "f", "r", "be", "z", "fb", "bs", "bc", "ab", "ib", "cb", "ch", "bis", "beta", "bg", "bb", "p", "ba", "db", "rb", "obj", "nb", "g", "d", "v", "a", "bp", "mb", "bar", "bu", "base", "n", "val", "bound", "l", "wb"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] emp = new int[N];\\n\t\tint A;\\n\t\tfor(int i = 2 ; i < N + 1; i++) {\\n\t\t\tA = sc.nextInt() -1;\\n\t\t\temp[A]++; \\n\t\t} \\n\t\tfor(int res : emp) {\\n\t\t\tSystem.out.println(res);\\n\t\t}\\n\t}\\n\t\\n}", "target": "12", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "capt", "rc", "ss", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "pl", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "nc", "c", "sh", "sci", "mp", "SC", "gc", "sw", "fc", "st", "sv", "dc", "lc", "scan", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "sq"], "N": ["B", "NH", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "Number", "SN", "NS", "I", "GN", "D", "NP", "NC", "NB", "L", "ND", "V", "NOR", "TN", "NM", "NT", "NA", "Y", "T", "K", "J", "Sn", "Q", "NE", "n", "NW", "M", "C", "Na", "Mon"], "emp": ["Temp", "tem", "imp", "um", "arb", "sim", "tmp", "tc", "tim", "EMP", "mint", "meet", "unt", "ifa", "temp", "mph", "Imm", "mut", "empt", "htt", "ikk", "race", "mate", "hum", "perm", "met", "tp", "mp", "cum", "jp", "pir", "rm", "imil", "phys", "rpm", "tm", "eps", "ape", "pai", "imm", "ip", "unc", "tt", "im", "em", "there", "cp"], "A": ["AC", "B", "AT", "E", "P", "GA", "Va", "LA", "At", "AA", "AS", "As", "CA", "S", "Ax", "G", "RA", "AI", "mA", "I", "D", "AB", "L", "SA", "AL", "V", "Ra", "ACC", "H", "AE", "AF", "An", "AM", "AU", "AV", "ESS", "a", "NA", "T", "One", "HA", "K", "IA", "Alpha", "Array", "AX", "AR", "AZ", "M", "R", "JA", "The", "C", "EA", "AP"], "i": ["ii", "phi", "m", "gu", "j", "multi", "sim", "it", "bi", "hi", "u", "ci", "t", "di", "I", "mi", "ie", "gi", "li", "si", "pi", "iter", "ti", "v", "a", "io", "cli", "ui", "ini", "ic", "ai", "us", "uu", "iu", "n", "ix", "ind", "id", "ip", "y", "is", "x", "im", "qi", "ki"], "res": ["rs", "clean", " RES", "resolution", "resp", "vals", "des", "re", "row", "resource", "os", "rand", "req", "rev", "result", "RE", "reg", "RS", " Res", "cons", "mem", "RES", "results", "ms", "inv", "ons", "Res", "ps", "R", "rest", "pres", "ret", "reset", "err", "ress", "rem", "red"]}}
{"code": "import java.util.Scanner;\\nimport static java.lang.System.out;\\n\\nclass SmallLargeOrEqual {\\n    private int a;\\n    private int b;\\n\\n    SmallLargeOrEqual(int a, int b) {\\n        this.a = a;\\n        this.b = b;\\n    }\\n\\n    @Override\\n    public String toString() {\\n        return String.format((this.a == this.b) ? \"==\" : ((this.a > this.b) ? \">\" : \"<\"));\\n    }\\n}\\n\\npublic class Main {\\n    public static void main(String... args) {\\n        Scanner scan = new Scanner(System.in);\\n        int a = scan.nextInt();\\n        int b = scan.nextInt();\\n\\n        out.println(\"a \" + new SmallLargeOrEqual(a, b) + \" b\");\\n    }\\n}", "target": "179", "substitutes": {"a": ["aaa", "act", "any", "m", "sta", "la", "apa", "oa", "h", "s", "isa", "sa", "i", "e", "aq", "eas", "da", "am", "u", "era", "ed", "t", "at", "A", "au", "area", "this", "ab", "ca", "up", "anta", "ma", "app", "ac", "p", "ao", "c", "ea", "ba", "aka", "ta", "le", "an", "aa", "d", "ia", "aj", "ar", "ata", "as", "ai", "alpha", "ra", "n", "na", "to", "y", "va", "o", "ach", "x", "l", "ami", "ae", "fa"], "b": ["B", "h", "m", "eb", "ob", "j", "able", "br", "i", "bl", "bi", "e", "f", "pb", "r", "be", "sb", "body", "fb", "z", "u", "bs", "bc", "t", "ab", "ib", "cb", "gb", "bis", "beta", "bb", "back", "bd", "p", "ba", "c", "db", "rb", "nb", "w", "d", "v", "mb", "end", "g", "bar", "base", "n", "bound", "y", "o", "reb", "l", "wb"], "scan": ["save", "out", "san", "check", "clean", "con", "system", "can", "skip", "Scan", "ann", "nn", "run", "link", "in", "r", "by", "row", "k", "read", "sync", "black", "se", "go", "seek", "sys", "proc", "sc", "reach", "ner", "report", "p", "query", "send", "gate", "parse", "sql", "an", "gc", "sin", "get", "scale", "watch", "n", "pack", "ser", "conv", "sum", "find"]}}
{"code": "\\nimport java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n    /**\\n     * @param args the command line arguments\\n     */\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        //System.out.print(\"\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044 > \");\\n        //int    x = Integer.parseInt(scanner.nextLine());\\n        //int n = Integer.parseInt(scanner.nextLine());\\n        String d = scanner.nextLine();\\n        \\n        if(d.equals(\"SUN\")) System.out.println(7);\\n        if(d.equals(\"MON\")) System.out.println(6);\\n        if(d.equals(\"TUE\")) System.out.println(5);\\n        if(d.equals(\"WED\")) System.out.println(4);\\n        if(d.equals(\"THU\")) System.out.println(3);\\n        if(d.equals(\"FRI\")) System.out.println(2);\\n        if(d.equals(\"SAT\")) System.out.println(1);\\n                \\n        \\n        // Scanner\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30af\u30ed\u30fc\u30ba\\n        scanner.close();\\n    }\\n}", "target": "136", "substitutes": {"scanner": [" Scanener", " Scanner", " scaner", " Scaner", " scanter", "Scanener", "scanener", "scaner", "scanter", "Scanner", " Scanter", " scanener", "Scaner", "Scanter"]}}
{"code": "import java.math.BigInteger;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        BigInteger[] a = new BigInteger[n];\\n        BigInteger aa = new BigInteger(\"1000000000000000000\");\\n        BigInteger sum = new BigInteger(\"1\");\\n        boolean flg = false;\\n        for (int i = 0; i < n; i++) {\\n            a[i] = sc.nextBigInteger();\\n            if(a[i].equals(BigInteger.ZERO)) {\\n                flg = true;\\n            }\\n        }\\n        if(flg) {\\n            System.out.println(0);\\n            return;\\n        }\\n        for (int i = 0; i < n; i++) {\\n            sum = sum.multiply(a[i]);\\n            if(sum.compareTo(aa) > 0) {\\n                System.out.println(-1);\\n                return;\\n            }\\n        }\\n        System.out.println(sum);\\n    }\\n}", "target": "27", "substitutes": {"sc": [" Sc", "ng", "cc", "cle", "Scan", "tc", "cr", "ss", "rc", "pb", "capt", "cl", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "isc", "pc", "ch", "osc", "sys", "ck", "spec", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "fc", "st", "ctx", "src", "sv", "nl", "lc", "scan", "sp", "asc", "conv", "sch", "sec", "anc", "usc", "syn", "sq"], "n": ["ng", "out", "m", "norm", "j", "nan", "nn", "number", "net", "r", "ln", "t", "k", "ne", "mn", "network", "ll", "on", "nm", "en", "p", "nc", "np", "c", "len", "nor", "N", "count", "an", "nb", "g", "d", "v", "nu", "name", "no", " N", "num", "ns", "nl", "sn", "na", "o", "size", "dn", "cn", "l", "nt"], "a": ["aaa", "act", "b", "m", "sta", "apa", "la", "oa", "s", "ap", "sa", "da", "am", "u", "at", "A", "au", "area", "att", "ab", "qa", "ma", "app", "ac", "p", "ba", "ao", "ea", "c", "ta", "pi", "an", "array", "ack", "ar", "ava", "ata", "ga", "all", "as", "ai", "alpha", "na", "va", "o", "ae", "fa"], "aa": ["aaa", "amba", "apa", "Va", "oa", "asa", "ja", "sa", "aq", "AA", "ama", "av", "aaaa", "area", "ua", "ah", "qa", "ista", "usa", "ma", "ena", "ba", "ka", "aka", "af", "ea", "ta", "ia", "aj", "ava", "ga", "ai", "pa", "aja", "na", "va", "ana", "ami", "ae", "fa"], "sum": ["sam", "save", "out", "um", "m", "h", "mom", "system", "sim", "j", "sa", "cache", "mass", "shadow", "say", "u", "temp", "sm", "so", "med", "hum", "sky", "result", "cu", "zero", "ma", "mu", "du", "acc", "si", "su", "count", "cum", "summary", "scale", "cal", "mem", "total", "v", "add", "SU", "num", "average", "scan", "Sum", "now", "na", "stats", "mean", "mm", "alph", "size", "mess", "hash"], "i": ["ji", "hi", "q", "ci", "mi", "list", "li", "iq", "v", "name", "ij", "ui", "ini", "ai", "err", "ix", "m", "multi", "bi", "f", "ik", "json", "load", "ei", "print", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "ki", "ii", "fi", "ri", "eu", "sequence", "init", "di", "info", "gi", "si", "ti", "io", "\u0438", "ind", "to", "ip", "o", "PI", "ori", "qi", "phi", "gu", "me", "xi", "j", "sim", "it", "ims", "u", "span", "iii", "I", "record", "this", "ie", "slice", "client", "point", "inner", "ex", "iter", "ic", "used", "iu", "base", "is", "key", "x", "batch"], "flg": ["folg", " flsg", "flog", "flsg", "klsg", " flgm", "plgs", "flgs", "fcgs", "plog", " flfg", "flig", "slgs", "flgm", "folig", "slg", " flig", "klg", "slgm", "klfg", "klig", "flgg", " flgg", "plgg", " flog", "Flg", " flgs", "flfg", "Flgg", "fcG", "Flgs", "fcg", "plg", "fcgm", "folfg", "folsg", "flG", "slG", " flG", "Flog"]}}
{"code": "import java.util.*;\\n\\npublic class Main\\n{\\n    public static void main(String[] args)\\n    {\\n        //Compute c1 = new Compute();//calc\\n\\n        int count = 0;\\n        boolean sw = false;\\n        int max = Integer.MIN_VALUE;\\n        int min = Integer.MAX_VALUE;\\n        double dMax = Double.MIN_VALUE;\\n        double dMin = Double.MAX_VALUE;\\n        //StringBuilder answer=new StringBuilder();\\n\\n        //input\\n        Scanner sc = new Scanner(System.in);\\n        int k = sc.nextInt();\\n        int s = sc.nextInt();\\n\\n        for (int i=0;i<=k;++i)\\n        {\\n            for (int j = 0;j<=k;++j)\\n            {\\n                int a=s-i-j;\\n                if (a<=k && a>=0)\\n                {\\n                    ++count;\\n                }\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}", "target": "29", "substitutes": {}}
{"code": "import java.io.*;\\n\\nclass Main {\\n    public static void main (String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringBuilder sb = new StringBuilder(br.readLine());\\n        for (int i = 0; i < sb.length(); i++) {\\n            char c = sb.charAt(i);\\n            if (Character.isUpperCase(c)) {\\n                sb.setCharAt(i, Character.toLowerCase(c));\\n            } else {\\n                sb.setCharAt(i, Character.toUpperCase(c));\\n            }\\n        }\\n        System.out.println(sb.toString());\\n    }\\n}", "target": "192", "substitutes": {"br": ["bridge", "lr", "Br", "bsp", "bl", "shr", "str", "bi", "cr", "bf", "dr", "be", "kr", "bc", "buf", "rel", "cb", "gb", "pr", "bg", "bd", "bm", "hr", "rb", "sr", "bro", "bp", "vr", "bt", "tr", "fr", "bh", "bn", "ber", "wr", "mr", "BR"], "sb": ["sam", "bps", "gob", "b", "sbm", "eb", "ob", "lab", "bsp", "sa", "stab", "ub", "sth", "pb", "bf", "fb", "bj", "bs", "rob", "lp", "zb", "kb", "ib", "gb", "cb", "ab", "lb", "bis", "bg", "bb", "ssh", "sub", "bash", "si", "db", "sql", "rb", "sg", "nb", "ssl", "buff", "mb", "sv", "sit", "sl", "bt", "sn", "sf", "obb", "sp", "now", "bh", "sd", "lbs", "SB", "orb", "sq", "erb"], "i": ["ii", "phi", "m", "gu", "xi", "me", "j", "multi", "sim", "ri", "init", "bi", "it", "ji", "ik", "hi", "q", "in", "ims", "z", "u", "ci", "t", "di", "I", "mi", "ie", "info", "json", "gi", "index", "slice", "li", "ei", "si", "point", "ski", "pi", "iter", "iq", "ti", "io", "name", "cli", "ij", "my", "ui", "ini", "ic", "ai", "\u0438", "iu", "ix", "ind", "id", "ip", "y", "is", "key", "x", "im", "ori", "uri", "batch", "qi"], "c": ["cap", "b", "h", "ct", "cc", "char", "cat", "cache", "tc", "cr", "r", "cl", "u", "ci", "cm", "bc", "ec", "cont", "com", "k", "coll", "cos", "ch", "pc", "cf", "cur", "cu", "sc", "ac", "mc", "code", "gc", "fc", "arc", "v", "etc", "cod", "ic", "co", "chain", "dc", "ce", "lc", "unc", "C", "col", "l", "cp", "vc"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int X = sc.nextInt();\\n        int Y = sc.nextInt();\\n        \\n        String a = null;\\n        \\n        if(Y%2 != 0){\\n            a = \"No\";\\n        } else if(X*2 <= Y && Y <= X*4){\\n            a = \"Yes\";\\n        } else {\\n            a = \"No\";\\n        }\\n        System.out.println(a);\\n    }\\n}\\n", "target": "62", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tint intJudge = 0;\\n\t\tint intCount = 0;\\n\\n\t\tint inta = 0;\\n\t\tint intb = 0;\\n\t\tint intc = 0;\\n\\n\t\ttry {\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\tString strInput = br.readLine();\\n\\n\t\t\tArrayList<Integer> NumList = new ArrayList<Integer>();\\n\\n\t\t\tString[] strNumList = strInput.split(\" \", 0);\\n\\n\t\t\tfor (int i = 0; i < strNumList.length; i++) {\\n\t\t\t\tNumList.add(Integer.parseInt(strNumList[i]));\\n\\n\t\t\t}\\n\\n\t\t\tinta = NumList.get(0);\\n\t\t\tintb = NumList.get(1);\\n\t\t\tintc = NumList.get(2);\\n\\n\t\t\tfor (int i =inta ; i <= intb; i++) {\\n\t\t\t\tintJudge = intc % i;\\n\t\t\t\tif (intJudge == 0) {\\n\t\t\t\t\t//?\u00b4???\u00b0???????????????\\n\t\t\t\t\tintCount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t//???????????????\\n\t\t\tSystem.out.println(intCount);\\n\\n\t\t} catch (IOException e1) {\\n\t\t\tSystem.out.println(e1);\\n\t\t}catch (NumberFormatException e2) {\\n\t\t\tSystem.out.println(e2);\\n\t\t}\\n\t}\\n\\n}", "target": "190", "substitutes": {"intJudge": [" intGet", "iStart", "intGet", "intGuest", "interGet", "intStart", "INTGuest", "integerJudge", "interJudge", "artGuest", "ruptJudge", "ruptStart", "ruptCount", "integerArea", "interCount", "incGuest", "integerGet", "interArea", "INTKnow", "artJudge", "iJudge", "artKnow", "intArea", "incKnow", "intKnow", "iCount", "incJudge", "INTJudge", "interStart", " intArea"], "intCount": ["INTTotal", "uintTotal", "uintCurrent", "uintCount", "INTCache", "intTotal", "IntCount", "INTCount", "intCache", "IntTotal", "INTCurrent", "IntCurrent", "IntCache", "uintCache", "intCurrent"], "inta": ["INTb", " intaa", "interb", "INTaa", "eltba", "floatA", " intA", "orti", "altb", "floataa", "ortaa", "interu", "floati", " inti", "eltas", "intaa", "altu", "orta", "intera", "intA", "interaa", "intba", "alta", "Intba", "INTu", "INTa", "intas", "interba", "elta", "inti", "Intas", "IntA", "Inta", "eltA", "altaa", "interas", "floata", "intu", "interA", "ortA"], "intb": ["Intb", "itc", " intB", "altB", "integerbb", "Intdb", "mintbe", "itbe", "mintb", " intbl", "pointb", "pointdb", "intB", "altb", "intbe", " intbb", "intdb", "mintbl", "Intbb", "altc", "pointbb", "integerB", " intbe", "IntB", "mintc", "altbb", "pointB", "integerc", "integerb", "itbl", "itb", " intdb", "intbl", "intbb"], "intc": ["Intb", "pointcount", "int2", "interb", "INTo", "istc", " intcount", "Intd", "uintc", "intd", " intd", "pointb", "INTr", "INTc", "uinto", "istb", "istd", "intercount", " int2", "Intcount", "uintr", "pointC", "IntC", "intcount", "Intc", "uint2", " intr", "pointc", "intC", "into", "interC", "interc", "INT2", "intr", " into", "istcount"], "br": ["bridge", "b", "lr", "Br", "bsp", "bl", "str", "shr", "cr", "ocr", "dr", "r", "ctr", "kr", "bc", "buf", "ch", "Fr", "pr", "er", "next", "bd", "hr", "rb", "bp", "bro", "gr", "vr", "bt", "yr", "div", "tr", "fr", "bh", "bn", "ber", "wr", "mr", "BR"], "strInput": [" strOutput", "StrInput", " strRaw", " strSource", "intText", "intInput", " strIn", "StrSource", "strRaw", "STRInput", "intRaw", "STRIn", "StrOutput", "strOutput", "StrRaw", "StrIn", "StrText", "strSource", "strText", " strText", "STROutput", "intSource", "STRRaw", "strIn"], "NumList": ["NumTable", "numL", "NumberList", "NumMap", " NumLIST", "OneSet", "ValTable", "NaLIST", " NumMap", "NUMList", "DenLat", "Vallist", "NaList", "DistLIST", "NUMListener", "NumSet", "OneL", "NumL", "DenLibrary", " NumListener", "NUMlist", "Nalist", "OneList", " NumSet", "NumLIST", "ObjMap", "DistList", "NumberLIST", "NUMLIST", "DenList", "NUMLat", "ObjLIST", "OneLIST", "DenLIST", "NetList", "NetLIST", "ValLIST", "NUMTable", "NaTable", "NumLat", " NumL", "Numlist", "numLIST", "NumberMap", "NUML", "numSet", "NumLibrary", "DistLat", "NUMLibrary", "NetListener", "NetL", "ObjList", "DistLibrary", "ValList", "numList", "NumListener"], "strNumList": [" strNUMNet", " strNUMBlock", "strNumberlist", "strNumberNet", "strNUMBlock", "strStrL", "StrStrList", "strStrPart", "strSumlist", "strNumBlock", "strStrlist", "strNumPart", "strNUMPart", "strNUMListener", " strNUML", "StrStrPart", "strSumNet", "StrNumList", "strNumL", " strNumL", "strSumL", "strNUMList", "strNumberL", "StrNumPart", "StrNumListener", "strNetListener", "strNetList", "strNetPart", "strNumlist", "strStrListener", "StrStrL", "strNumberBlock", "StrNumL", " strNumBlock", "strNumListener", "strNumNet", "strSumList", "strNUMNet", "StrStrListener", " strNUMList", "StrStrlist", "strNumberList", " strNumNet", "strStrList", "strNUML", "StrNumlist", "strSumBlock"], "i": ["ji", "hi", "q", "ci", "mi", "li", "remote", "iq", "v", "my", "ij", "ui", "ini", "ai", "ix", "m", "multi", "bi", "f", "iy", "ei", "c", "pi", "a", "cli", "zi", "n", "id", "y", "uri", "asi", "im", "l", "ami", "ki", "ii", "ri", "fi", "init", "jj", "di", "k", "info", "gi", "index", "si", "ias", "ti", "d", "\u0438", "uu", "ind", "to", "ip", "o", "qi", "phi", "b", "gu", "xi", "me", "j", "sim", "s", "it", "ims", "z", "u", "span", "iii", "I", "p", "iter", "g", "batch", "ic", "iu", "is", "key", "x", "oi", "err"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sn = new Scanner(System.in);\\n        \\n        int s = sn.nextInt();\\n        int w = sn.nextInt();\\n        \\n        if(s <= w) {\\n            System.out.print(\"unsafe\");\\n            return;\\n        }\\n        \\n        System.out.print(\"safe\");\\n    }\\n}\\n", "target": "177", "substitutes": {"sn": ["serv", "sam", " ss", "sol", " SN", "ny", "sa", " gn", "sk", "nn", " sm", "ann", "fn", "sb", "ln", "SN", "sm", "sen", "news", "ne", "sc", "nex", "nc", "gn", "ski", "si", "scl", "sw", "sr", "ssl", " sv", "sv", " sk", "ns", "Sn", "sl", " Sn", "nl", "n", "tn", "scan", "sp", "sel", "na", "zer", "bn", " sl", "sd", "conv", "cn", "nr", "syn", "sq"], "s": ["rs", "its", "ats", "les", "i", "xs", "f", "fs", "ss", "S", "cs", "ains", "t", "set", "os", "se", "ashes", "has", "eds", "gs", "p", "ks", "si", "c", "ols", "a", "ars", "sv", "ms", "ws", "ns", "ids", "sts", "n", "ds", "ps", "stats", "js", "ches", "ls", "ts", "is", "olds", "sq"], "w": ["h", "wid", "wo", "wal", "wa", "rw", "window", "wh", "wt", "wi", "wk", "ew", "W", "width", "tw", "wall", "fw", "hw", "wl", "ow", "sw", "v", "iw", "wb", "ws", "wd", "kw", "nw", "n", "wp", "wr", "wx", "win", "we"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner t = new Scanner(System.in);\\n        \\n        int n = t.nextInt();\\n        int x = t.nextInt();\\n        int d[] = new int[n+1];\\n        d[0] = 0;\\n        for (int i = 0; i < n; i++) {\\n            int y = t.nextInt();\\n            d[i+1] = d[i]+y;\\n        }\\n        int count = 0;\\n        for (int i = 0; i <= n; i++) {\\n            if (d[i] <= x){\\n                count++;\\n            }\\n        }\\n        System.out.println(count);\\n    }   \\n}", "target": "130", "substitutes": {"t": ["ty", "tu", "ct", "it", "tools", "f", "tc", "q", "tg", "z", "qt", "reader", "at", "wt", "pt", "tw", "tp", "p", " T", "ot", "kat", "ta", "trace", "txt", "g", "st", "T", "td", "det", "tm", "tn", "tr", "tree", "to", "ts", "vt", "tt", "l", "te", "rt", "tf", "tk", "nt"], "n": ["ng", "m", "j", "nan", "nn", "net", "ln", "nr", "ne", "network", "on", "nm", "en", "len", "nc", "c", "np", "p", "N", "pi", "an", "nb", "g", "v", "nu", "no", "name", "all", "ns", "num", "nl", "sn", "na", "o", "cn", "l", "nt"], "x": ["m", "h", "xi", "rx", "xp", "e", "xs", "f", "dx", "ox", "r", "z", "k", "tx", "width", "on", "xy", "ax", "p", "c", "ex", "w", "g", "v", "xxxx", "xf", "xx", "xt", "ix", "xc", "o", "px", "max", "l", "X", "wx"], "d": ["done", "out", "m", "b", "fd", "j", "s", "e", "f", "da", "did", "dr", "r", "z", "u", "des", "dict", "di", "dd", "D", "ld", "dec", "dt", "bd", "p", "c", "db", "data", "w", "g", "dim", "v", "debug", "pd", "td", "df", "l", "dist", "de", "dat", "ds", "dl", "def", "sd", "o", "dn", "dh", "del", "red"], "i": ["ii", "phi", "xi", "me", "umi", "j", "sim", "multi", "ri", "fi", "init", "bi", "it", "ji", "hi", "q", "iti", "u", "span", "ci", "iy", "di", "I", "mi", "this", "ie", "info", "gi", "client", "php", "li", "ei", "si", "point", "ski", "status", "pi", "iter", "ti", "iq", "v", "io", "cli", "ij", "zi", "ui", "ini", "ai", "\u0438", "us", "ic", "chain", "iu", "pai", "ind", "ix", "id", "ip", "is", "uri", "im", "asi", "ori", "ami", "ity", "qi", "ki"], "y": ["ty", "m", "b", "uy", "year", "fy", "j", "ny", "ery", "ye", "z", "by", "yt", "yi", "iy", "oy", "xxx", "py", "vy", "ch", "xy", "sys", "ym", "ay", "Y", "my", "ey", "yo", "cy", "yy", "sy", "yr", "xx", "ry", "ly"], "count": ["current", "ct", "quiet", "flag", "ount", "cache", "number", "q", "must", "ctr", "core", "hold", "cd", "cont", "coll", "result", "counter", "index", "list", "report", "acc", "c", "code", "amount", "status", "conf", "trace", "nb", "add", "total", "num", "search", "state", "const", "length", "Count", "ind", "cond", "now", "call", "size", "stat", "sum", "err", "find", "found", "nt"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] ags) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tArrayList<String> list = new ArrayList<>\\n\t\t(Arrays.asList(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"\\n\t\t\t\t,\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"));\\n\t\tString str = sc.next();\\n\t\tint n = list.indexOf(str);\\n\t\tSystem.out.println(list.get(n+1));\\n\t}\\n}", "target": "150", "substitutes": {"ags": ["rs", "flag", "tags", "words", "fs", "cmd", "lag", "arr", "stack", "ag", "usr", "gs", "txt", "res", "ars", "raw", "flags", "ws", "ids", "atts", "Args", "Tags", "ps", "js", "ts", "ses", "ls", "arg"], "sc": ["system", "cle", "ss", "capt", "pb", "rc", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "dec", "ch", "pc", "osc", "isc", "exec", "sys", "spec", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "g", "st", "sv", "nl", "scan", "lc", "sp", "asc", "conv", "sch", "sec", "anc", "usc", "sq"], "list": ["queue", "out", "string", "sequence", "bl", "test", "ul", "details", "cl", "ml", "dict", "set", "pool", "cont", "parent", "this", "lat", "L", "result", "LIST", "li", "log", "p", "ist", "null", "print", "array", "get", "st", "v", "left", "all", "names", "batch", "type", "tree", "map", "table", "dl", "collection", "ls", "l", "lists", "listed", "nt"], "str": ["out", "string", "s", "j", "STR", "char", "ocr", "r", "arr", "Str", "t", "coll", "dec", "exp", "result", "cur", "next", "spec", "p", "c", "oct", "stri", "obj", "iter", "txt", "res", "st", "v", "name", "sl", "gr", "text", "dat", "tr", "fr", "expr", "key", "ret", "del"], "n": ["ng", "m", "h", "norm", "j", "s", "yn", "nan", "i", "f", "nn", "fn", "missing", "t", "node", "ne", "mn", "ni", "nm", "p", "nc", "c", "np", "N", "an", "nb", "g", "d", "v", "nu", "ns", "num", "l", "sn", "nw", "na", "o", "x", "dn", "cn", "nr", "nt"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = Integer.parseInt(sc.next());\\n        int b = Integer.parseInt(sc.next());\\n        int ans;\\n        if(a > b) {\\n            ans = a;\\n            a--;\\n        }else {\\n            ans = b;\\n            b--;\\n        }\\n        if(a > b) {\\n            ans += a;\\n            a--;\\n        }else {\\n            ans += b;\\n            b--;\\n        }\\n        System.out.println(ans);\\n        \\n    }\\n}", "target": "75", "substitutes": {"sc": [" Sc", "cc", "cle", "cr", "tc", "rc", "cl", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "ch", "pc", "osc", "isc", "exec", "uc", "sys", "spec", "mc", "scl", "c", "nc", "SC", "gc", "sw", "sr", "inc", "fc", "sv", "dc", "lc", "scan", "sp", "sel", "sch", "sec", "usc", "irc", "sq"], "a": ["act", "aaa", "h", "sta", "la", "apa", "oa", "j", "ap", "eu", "sa", "i", "e", "ama", "da", "admin", "f", "am", "av", "abs", "ed", "era", "r", "t", "at", "A", "au", "ast", "area", "att", "ab", "ca", "ak", "ma", "app", "ac", "p", "ao", "ba", "ea", "c", "ta", "an", "aa", "ia", "aj", "ar", "ga", "ai", "as", "aux", "alpha", "pa", "na", "to", "va", "ach", "ate", "al", "l", "ae"], "b": ["B", "h", "m", "eb", "ob", "j", "bo", "br", "i", "bl", "bi", "f", "e", "pb", "it", "bf", "r", "be", "sb", "body", "fb", "z", "u", "bs", "bc", "t", "blue", "ab", "ib", "cb", "bis", "beta", "bg", "bb", "back", "p", "ba", "c", "db", "rb", "nb", "g", "d", "v", "mb", "bp", "batch", "bar", "bt", "n", "bound", "y", "o", "x", "l", "wb"], "ans": ["uns", "posts", "annot", "vs", "rs", "san", "s", "ats", "aos", "utters", "eas", "xs", "pan", "ann", " Ans", "cas", " spans", "vals", " means", "ens", "ands", "cs", "AN", "aus", "outs", "acs", " fans", "uts", "ams", "ums", "aints", "sets", "anes", "offs", "aps", "eds", "ks", "ins", " pan", " opens", "an", "An", "leans", "ars", "ms", "ents", "orts", "ns", " scans", "arms", "ants", "ces", "eps", "ids", "mas", "ons", "ates", "ds", " beans", "rates", "arts", "ls", "ANS", "helps", "x", "amps", "ints", "olds", "asks", "ads"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint d[];\\n\t\td = new int[100]; \\n\t\tfor(int i=0;i<m;i++)\\n\t\t{\\n\t\t\tint a = sc.nextInt();\\n\t\t\tint b = sc.nextInt();\\n\t\t\td[a]++;\\n\t\t\td[b]++;\\n\t\t}\\n\t\tfor(int i=1;i<=n;i++)\\n\t\t\tSystem.out.println(d[i]);\\n\t}\\n}\\n", "target": "57", "substitutes": {"sc": [" Sc", "ng", "system", "cc", "cle", "tc", "cr", "ss", "pb", "ko", "rc", "cl", "sb", "bc", "cs", "cont", "esc", "sync", "Sc", "ctl", "se", "pl", "ch", "osc", "pc", "isc", "sys", "ck", "mc", "scl", "c", "nc", "sh", "sci", "SC", "gc", "fc", "ctx", "sv", "co", "nl", "scan", "lc", "sp", "asc", "conv", "ctrl", "sch", "anc", "sec", "usc", "irc", "sq"], "n": ["ng", "j", "nan", "nn", "net", "z", "ln", "t", "k", "mi", "mn", "ni", "nm", "en", "p", "c", "np", "nc", "N", "an", "nb", "g", "v", "nu", "num", "ns", "nl", "sn", "na", "x", "cn", "l", "nt"], "m": ["f", "dm", "r", "mx", "om", "cm", "km", "sm", "t", "k", "mi", "mn", "ma", "mu", "p", "mc", "c", "bm", "g", "v", "mt", "ms", "tm", "M", "mm", "o", "im", "l", "man"], "d": ["done", "out", "fd", "h", "j", "da", "did", "dx", "r", "dr", "z", "nd", "dict", "t", "dd", "D", "di", "ld", "dt", "md", "bd", "p", "c", "db", "data", "ad", "w", "g", "v", "debug", "pd", "td", "df", "dc", "dat", "ds", "ind", "id", "dl", "sd", "x", "dh", "del", "l", "sum", "red"], "i": ["ii", "phi", "gu", "xi", "me", "j", "sim", "multi", "sequence", "bi", "init", "it", "ji", "hi", "q", "z", "span", "ci", "set", "di", "I", "mi", "ie", "gi", "loop", "ni", "mu", "li", "p", "ei", "si", "print", "pi", "iq", "ti", "v", "cli", "ij", "zi", "ui", "ini", "ai", "ic", "us", "chain", "iu", "ix", "ind", "id", "ip", "cgi", "is", "PI", "x", "im", "oi", "err", "ity", "qi", "ki"], "a": ["aaa", "sta", "la", "apa", "oa", "j", "isa", "ja", "sa", "aq", "z", "u", "el", "A", "ab", "ca", "ma", "ac", "ba", "ao", "ea", "c", "ta", "an", "aa", "ia", "aj", "ar", "ga", "pa", "na", "va", "l", "ae", "fa"], "b": ["B", "eb", "lab", "j", "ob", "e", "bi", "bl", "f", "ub", "be", "by", "z", "u", "fb", "sb", "bs", "bc", "t", "ab", "ib", "gb", "cb", "bis", "lb", "beta", "bb", "back", "ba", "c", "rb", "g", "v", "mb", "bar", "y", "l", "wb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner scanner = new Scanner(System.in); \\n\t\tint a = Integer.parseInt(scanner.next());\\n\t\tif(a<=3){\\n\t\t\tSystem.out.println(\"1\");\\n\t\t\treturn;\\n\t\t}\\n\t\t\\n\t\tint maxBeki=0;\\n\t\tint i =0;\\n\t\tint j =0;\\n\t\tfor(i=2;;i++){\\n\t\t\tint maxBekiLine=0;\\n\t\t\tint tmpBekiLine=i;\t\t\t\\n\t\t\tfor(j=2;;j++){\\n\t\t\t\ttmpBekiLine =tmpBekiLine*i; \\n\t\t\t\tif(tmpBekiLine>a){\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tmaxBekiLine=tmpBekiLine;\\n\t\t\t}\t\t\t\\n\t\t\t\\n\t\t\tif(maxBekiLine>maxBeki){\\n\t\t\t\tmaxBeki = maxBekiLine;\\n\t\t\t}\\n\t\t\tif(j==2){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(maxBeki);\t\t\\n\t}\\n}\\n", "target": "143", "substitutes": {}}
{"code": "import java.math.BigDecimal;\\nimport java.math.RoundingMode;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String[] lines = sc.nextLine().split(\" \");\\n        long num1 = Integer.parseInt(lines[0]);\\n        long num2 = Integer.parseInt(lines[1]);\\n\\n        long ans1 = num1 / num2;\\n        long ans2 = num1 % num2;\\n        double ans3 = (double)num1 / (double)num2;\\n\\n        System.out.println(ans1 + \" \" + ans2 + \" \" + String.format(\"%.9f\", ans3));\\n\\n\\n    }\\n}", "target": "90", "substitutes": {"sc": ["system", "cc", "tc", "ss", "cr", "capt", "rc", "cl", "sb", "bc", "cs", "sac", "desc", "ec", "esc", "sync", "Sc", "se", "ch", "pc", "osc", "isc", "soc", "sys", "mc", "scl", "c", "nc", "sub", "SC", "gc", "sw", "sv", "nl", "scan", "lc", "sp", "asc", "sch", "sec", "anc", "syn", "sq"], "lines": ["posts", "bytes", "vs", "pins", "los", "details", "files", "lights", "sites", "ines", "elines", "phones", "links", "frames", "objects", " Lines", "outs", "points", "ues", "blocks", "models", "xes", "works", "tests", "notes", "steps", "qs", "plays", "issues", "gs", "reads", "ks", "locks", "ends", "mes", "dates", "heads", "groups", "cells", "days", "prints", "nets", "faces", "users", "ls", "styles", "ses", "states", "poses", "plates", "lists", "pages"], "num1": ["um0", "number0", "mon2", "num01", " num01", "Num01", "monOne", "number3", "number1", "numOne", " num0", "Num1", "number2", " num3", "mon1", "num3", "um1", "NumOne", "mon3", "Num7", "Num0", "num0", "numberOne", "Num2", "um7", "um01", " numOne", "mon0", "num7", " num7"], "num2": ["num8", " numtwo", "num012", "ver2", "numtwo", "num256", "mon2", "nu2", "tim2", "convTwo", "ver8", "umtwo", "conv2", "um02", "n2", "vertwo", "num02", " num3", "umTwo", "nu012", "num3", "um256", "n1", "n012", "tim02", "mon3", " num8", " numTwo", "numTwo", "monTwo", "conv3", "um2", " num02", " num256", " num012", "timTwo", "um8", "nu1", "tim256"], "ans1": ["ansOne", "vals1", "ants1", "ks1", "ans01", "entsone", "ks3", "ran001", "ranOne", "ansone", "ksOne", "an001", "ran3", "ents1", "ks001", "ants01", "an3", "ran1", "antsone", "anOne", "an1", "ans001", "vals01", "ents01", "valsone"], "ans2": ["offs2", "ans05", "ans02", "ks3", "anstwo", "offs02", "ansSecond", "ann2", "an02", "annSecond", "uns2", "ksSecond", "ann3", "versions2", "offstwo", "ks02", "antwo", "uns3", "versions02", "unsSecond", "an05", "versionstwo", "offs05", "ann02", "an2", "versions05", "ks2", "uns02"], "ans3": ["ann13", " sans63", "angs63", " scansiii", "angsiii", "angs3", "ans13", " scans003", "ann2", "ann3", " sansiii", "angs003", " scans63", " sans3", " ans13", "ansiii", "ANS3", "ANS13", " scans3", "ans003", "ans63", "ANS003", "ann003", " ans003", "ANS2", " sans003"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner scan = new Scanner(System.in);\\n        String S = scan.nextLine();\\n        String T = scan.nextLine();\\n        char[] yohou = S.toCharArray();\\n        char[] tenki = T.toCharArray();\\n        int ans=0;\\n        for(int i=0;i<3;i++) {\\n            if(yohou[i]==tenki[i]){\\n                ans++;\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "243", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tstatic int[] S ;\\n\tpublic static void main(String[] args) throws Exception {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString W = in.readLine();\\n\\n\t\tlong N = Long.parseLong(W);\\n\\n\t\tlong ans = N-1;\\n\t\tdouble sq = Math.sqrt(N);\\n\t\tlong i = (long)sq;\\n\\n\t\tfor(;i>0;i--){\\n\t\t\tif(N%i==0){\\n\t\t\t\tans = Math.min(ans, i+N/i-2);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "157", "substitutes": {"S": ["B", "save", "P", "s", "command", "SIZE", "sort", "I", "D", "A", "species", "L", "V", "Size", "N", "shape", "seed", "T", "params", "SU", "length", "M", "services", "C", "arg"]}}
{"code": "import java.util.*;\\nimport java.lang.Math;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    \\n   \tint num = sc.nextInt();\\n    int ans = 0;\\n    \\n    ans = 1000*(num/500);\\n    num %= 500;\\n    ans += num - num%5;\\n    \\n    System.out.println(ans);\\n\\n  }\\n}\\n", "target": "180", "substitutes": {"sc": ["out", "system", "cc", "cle", "Scan", "tc", "cr", "ss", "cl", "sb", "bc", "cs", "desc", "sac", "esc", "sync", "Sc", "se", "ch", "pc", "isc", "osc", "sys", "spec", "mc", "scl", "c", "nc", "SC", "sw", "gc", "sv", "screen", "scan", "lc", "sp", "sel", "asc", "conv", "sch", "sec", "anc", "syn", "sq"], "num": ["mult", "out", "um", "m", "msg", "tu", "con", "multi", "mon", "bo", "test", "cache", "nn", "Num", "number", "net", "prim", "uf", "tim", "NUM", "dec", "th", "info", "mn", "nam", "rat", "zero", "index", "nm", "len", "np", "gen", "en", "su", "eng", "count", "obj", "nb", "cal", "no", "nu", "total", "name", "mem", "orig", "all", "un", "alpha", "div", "n", "tr", "na", "non", "alph", "max", "nom", "size", "sum", "den", "nt"], "ans": ["uns", "posts", "s", "can", "ats", "nan", "aos", "ups", "ann", "irms", "ians", "vals", "lan", "ens", " means", "cs", "aus", "outs", "os", "angs", "ams", "lets", "sets", "anes", "offs", "ots", "eds", "aps", "anks", "ks", "books", "ins", "an", "lines", "res", "cons", "ars", "ras", "names", "ms", "ents", "grades", "ns", " scans", "ids", "ants", "eps", "orders", "ons", "ds", "nets", "arts", "ls", "ANS", "ts", "amps", "olds", "asks", "ads"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    sc.useDelimiter(\",|\\n\");\\n\\n    int w=sc.nextInt();\\n    int string[] = new int[w];\\n\\n    for(int i=0; i<w; i++) string[i] = i+1;\\n\\n    int n=sc.nextInt();\\n    int a[] = new int [n];\\n    int b[] = new int [n];\\n    int times=0;\\n    int chg=0;\\n\\n    while(times<n){\\n      a[times]=sc.nextInt();\\n      b[times]=sc.nextInt();\\n\\n      chg=string[(a[times]-1)];\\n      string[(a[times]-1)]=string[(b[times]-1)];\\n      string[(b[times]-1)]=chg;\\n\\n      times++;\\n    }\\n\\n    for(int i=0; i<w; i++) System.out.println(string[i]);\\n  }\\n}\\n\\n", "target": "156", "substitutes": {"sc": [" Sc", "cc", "cle", "tc", "cr", "ss", "rc", "capt", "cl", "sb", "irc", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "dec", "ctl", "ch", "osc", "pc", "isc", "sys", "ck", "psc", "mc", "scl", "c", "sci", "nc", "sh", "SC", "gc", "sw", "inc", "fc", "ctx", "sv", "scope", "co", "dc", "sem", "lc", "scan", "sp", "ser", "asc", "conv", "sch", "sec", "anc", "usc", "sum", "syn", "sq"], "w": ["out", "m", "h", "words", "wid", "wo", "aw", "r", "z", "wal", "wait", "wa", "rw", "window", "t", "wt", "wh", "wi", "ew", "W", "wcs", "width", "start", "wall", "p", "wl", "sw", "d", "v", "iw", "wn", "wb", "ws", "weight", "kw", "nw", "wp", "now", "\u0142", "wind", "wr", "x", "l", "wx", "win", "we"], "string": ["ring", "store", "message", "library", "system", "password", "reason", "STR", "context", "sequence", "char", "command", "value", "service", "basic", "str", "number", "test", "dump", "file", "expression", "unit", "pair", "time", "set", "section", "format", "reference", "resource", "this", "function", "group", "result", "buffer", "line", "list", "null", "match", "print", "space", "prefix", "comment", "data", "subject", "array", "filename", "port", "strings", "name", "component", "ment", "chain", "integer", "object", "text", "word", "join", "pattern", "source"], "i": ["ji", "hi", "q", "in", "ci", "mi", "li", "v", "ij", "ui", "ini", "ai", "us", "ix", "ret", "m", "multi", "bi", "tim", "iy", "ei", "pi", "cli", "zi", "id", "y", "im", "l", "ami", "ity", "ki", "ii", "ri", "init", "yi", "di", "exp", "info", "gi", "index", "si", "ti", "io", "ind", "to", "ip", "o", "qi", "phi", "gu", "xi", "me", "j", "sim", "it", "ims", "u", "t", "I", "this", "ie", "p", "point", "iter", "ic", "iu", "is", "x", "oi"], "n": ["ng", "m", "j", "nan", "nn", "number", "net", "z", "ln", "t", "k", "pn", "ne", "nv", "ni", "nm", "en", "p", "nor", "np", "c", "nc", "N", "nb", "d", "no", "nu", "v", "g", "name", "names", "num", "ns", "nl", "l", "sn", "nw", "na", "o", "x", "size", "cn", "nr", "nt"], "a": ["aaa", "act", "sta", "la", "apa", "s", "oa", "ap", "isa", "sa", "aq", "am", "era", "t", "at", "A", "au", "area", "att", "acs", "ua", "ab", "ca", "ma", "app", "ac", "p", "ba", "ao", "ea", "aka", "ta", "an", "array", "aa", "ia", "ace", "ar", "aj", "ata", "ga", "as", "ai", "alpha", "pa", "na", "y", "va", "o", "l", "ae", "fa"], "b": ["B", "m", "eb", "ob", "j", "br", "bi", "bf", "r", "be", "z", "u", "sb", "fb", "bs", "bc", "t", "ab", "ib", "cb", "gb", "bis", "beta", "bb", "bd", "p", "ba", "c", "db", "rb", "g", "nb", "v", "bp", "mb", "bin", "y", "l", "wb"], "times": ["marks", "ats", "oms", "files", "vals", "phones", "his", "history", "counter", "books", "ites", "itions", "us", "options", "ces", "things", "stats", "TS", "pages", "rows", "pps", "ths", "values", "time", "ries", "blocks", "tests", "etimes", "ops", "windows", "aps", "Times", "names", "ms", "tracks", "cycles", "ts", "ports", "powers", "actions", "rs", "caps", "its", "sticks", "ensions", "types", "ctr", "aunts", "terms", " Times", "ots", "cases", "results", "yes", "rates", "imes", "modules", "months", "checks", "asts", "xs", "ims", "ones", "cs", "xes", "acts", "steps", "forms", "ins", "tips", "dates", "events", "uses", "versions", "ps", "styles", "places", "keys"], "chg": ["Chgm", "cygm", "echg", "echgm", "Chrg", "chrg", " chgm", "achgi", "achgm", " chmsg", "Chmsg", "chgc", "svgm", "achg", "chtg", "Chg", "Chgi", "cygi", "svgc", " chrg", "echmsg", "cyg", " chgc", "achtg", "chgm", "echrg", "chgi", "cyrg", "achrg", " chtg", "svg", "chmsg", "achgc", "svtg"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tlong a=sc.nextLong();\\n\t\tlong b=sc.nextLong();\\n\t\tlong k=sc.nextLong();\\n\t\tif(a>=k){\\n\t\t\tSystem.out.println(a-k+\" \"+b);\\n\t\t}else{\\n\t\t\tlong p=Math.max((b-(k-a)),0);\\n\t\t\tSystem.out.println(0+\" \"+p);\\n\t\t}\\n\t}\\n}\\n", "target": "128", "substitutes": {"sc": ["system", "cc", "tc", "cr", "ss", "capt", "ko", "rc", "cl", "sb", "bc", "cs", "cont", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "mc", "scl", "c", "nc", "sci", "si", "sub", "sh", "SC", "gc", "sw", "ctx", "sv", "lc", "scan", "sp", "ser", "asc", "sch", "sec", "usc", "syn", "sq"], "a": ["act", "m", "h", "la", "apa", "oa", "s", "j", "sa", "i", "e", "f", "aw", "am", "abs", "u", "t", "at", "A", "au", "area", "ab", "ca", "ak", "ax", "ma", "app", "ac", "ao", "ba", "ea", "aka", "c", "ta", "an", "aa", "ia", "aj", "ar", "ai", "as", "alpha", "n", "pa", "na", "o", "ach", "x", "al", "l", "ae"], "b": ["B", "m", "eb", "ob", "j", "i", "ub", "bi", "e", "pb", "bf", "r", "be", "sb", "z", "fb", "u", "bs", "bc", "t", "ab", "ib", "gb", "bb", "back", "ba", "c", "db", "rb", "nb", "g", "bp", "v", "mb", "base", "n", "y", "o", "l"], "k": ["mk", "unk", "j", "dk", "sk", "i", "ke", "ik", "ko", "kn", "q", "z", "kr", "km", "ok", "wk", "kh", "ak", "ck", "kj", "kid", "kl", "ka", "ks", "c", "K", "kk", "kw", "n", "tk", "key", "max", "ek", "ku", "ki"], "p": ["imp", "m", "h", "P", "pad", "j", "rep", "par", "pb", "q", "t", "lp", "vp", "ping", "pc", "perm", "dp", "pkg", "tip", "php", "tp", "part", "np", "c", "op", "g", "bp", "v", "jp", "gp", "power", "pa", "wp", "ps", "ip", "pro", "post", "pp", "cp", "fp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\t\t\\n\t\tString s [] = S.split(\"/\");\\n\t\t\\n\t\t\\n\t\tif (s[0].equals(\"2019\")!=true)\\n\t\t\tSystem.out.println(\"Heisei\");\\n\t\t\\n\t\telse {\\n\t\t\tif (s[1].equals(\"01\") || s[1].equals(\"02\") || s[1].equals(\"03\") || s[1].equals(\"04\"))\\n\t\t\t\tSystem.out.println(\"Heisei\");\\n\t\t\telse\\n\t\t\t\tSystem.out.println(\"TBD\");\\n\t\t}\\n\t\tsc.close();\\n\\n\t}\\n\\n}\\n", "target": "163", "substitutes": {"sc": ["system", "cle", "cc", "Scan", "tc", "cr", "ko", "rc", "capt", "cl", "bc", "cs", "ec", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "uc", "sys", "mc", "c", "nc", "SC", "gc", "arc", "sv", "nl", "lc", "scan", "RC", "sp", "asc", "sch", "anc", "sec", "usc", "syn", "sq"], "S": ["B", "SM", "P", "STR", "Source", "SN", "G", "Str", "NS", "A", "I", "SER", "ST", "L", "SA", "V", "RS", "SE", "SP", "N", "Si", "SL", "T", "SU", "SR", "SS", "GS", "R", "C", "SB", "SAM", "JS"], "s": ["rs", "vs", "b", "string", "its", "ats", "i", "tags", "str", "aws", "fs", "ss", "xs", "ims", "abs", "gets", "bs", "terms", "cs", "parts", "t", "bis", "qs", "gs", "p", "c", "ins", "sql", "st", "v", "strings", "mods", "sv", "names", "ms", "ws", "ns", "ids", "eps", "sts", "ds", "tes", "ps", "als", "services", "js", "ts", "ses", "is", "ls", "es", "l", "sq"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {  \\n  \t\tScanner sc = new Scanner(System.in);\\n\t\tString n = sc.next();\\n      \tchar[] ary = new char[n.length()];\\n      \t\\n      \tfor(int i = 0; i < n.length(); i++) {\\n         \tary[i] = n.charAt(i); \\n          \t\\n          \tif(ary[i] == '1') {\\n\t            ary[i] = '9';\\n            } else if(ary[i] == '9') {\\n            \tary[i] = '1';\\n            }\\n        \tSystem.out.print(ary[i]);\\n        }\\n    }\\n}", "target": "111", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "capt", "cl", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "dec", "se", "ch", "pc", "isc", "osc", "sys", "mc", "scl", "nc", "c", "sh", "sub", "SC", "gc", "inc", "sv", "screen", "lc", "scan", "sp", "sel", "ser", "asc", "sch", "anc", "sec", "usc", "syn", "sq"], "n": ["ng", "m", "norm", "s", "j", "br", "f", "nn", "ren", "net", "fn", "r", "ln", "t", "ne", "network", "mn", "ll", "nm", "rn", "p", "en", "c", "gn", "np", "nc", "nor", "N", "note", "nb", "g", "d", "v", "nu", "wn", "ns", "nl", "sn", "nw", "tn", "na", "o", "dn", "cn", "nr", "nt"], "ary": ["aro", "ty", "inter", "fy", "binary", "j", "arb", "ario", "dry", "ja", "etry", "the", "maybe", "ery", "severe", "must", "eric", "aries", "hello", "ter", "rely", "phy", "hold", "tar", "psy", "dq", "req", "sky", "dar", "bis", "irrel", "sys", "arie", "arity", "er", "ay", "arre", "ham", "note", "bare", "iq", "my", "ar", "are", "uary", "adr", "tif", "necessary", "bird", "bar", "aux", "arry", "holy", "secondary", "ARY", "phrase", "ory", "ray", "ry", "y", "aria", "primary", "red", "tf"], "i": ["ii", "phi", "m", "gu", "xi", "me", "multi", "j", "sim", "ri", "fi", "eu", "it", "bi", "init", "ji", "f", "hi", "u", "wait", "ci", "set", "di", "I", "mi", "ie", "gi", "ni", "vi", "list", "li", "ei", "si", "status", "pi", "ex", "iter", "ti", "v", "a", "no", "io", "cli", "zi", "ui", "ij", "ini", "ic", "ai", "us", "\u0438", "chain", "iu", "ix", "ind", "id", "fr", "to", "ip", "y", "is", "key", "x", "im", "oi", "uri", "batch", "ami", "ori", "qi", "ki"]}}
{"code": "import java.util.*;\\nclass Main{\\n    Scanner sc=new Scanner(System.in);\\n    void main(){\\n\tint w=sc.nextInt();\\n\tint h=sc.nextInt();\\n\tint x=sc.nextInt();\\n\tint y=sc.nextInt();\\n\tint r=sc.nextInt();\\n\tString ans=\"Yes\";\\n\tif(x-r<0||x+r>w||y-r<0||y+r>h)ans=\"No\";\\n\tSystem.out.println(ans);\\n    }\\n    public static void main(String[]ag){\\n\tnew Main().main();\\n    }\\n}", "target": "171", "substitutes": {"sc": ["system", "cc", "tc", "ss", "cr", "pb", "ko", "cl", "rc", "bc", "cs", "desc", "cont", "esc", "sync", "Sc", "ctl", "pl", "ch", "pc", "isc", "osc", "sys", "ck", " scr", "mc", "c", "nc", "scl", "SC", "gc", "inc", "ctx", "fc", "st", "jp", "sv", "dc", "lc", "scan", "sp", "asc", "conv", "func", "sch", "anc", "sec", "usc", "sq"], "w": ["wy", "wid", "wo", "z", "wal", "wa", "rw", "window", "wt", "wi", "wh", "ew", "W", "width", "fw", "hw", "wl", "p", "sw", "ww", "d", "v", "wb", "iw", "ws", "wd", "kw", "nw", "n", "wp", "wr", "l", "wx", "win", "we"], "h": ["phi", "m", "b", "i", "hi", "z", "oh", "t", "ph", "hd", "k", "wh", "kh", "height", "ah", "ch", "hh", "hang", "he", "p", "high", "c", "H", "en", "hr", "hw", "sh", "ih", "g", "ht", "v", "ha", "hl", "n", "bh", "hei", "l", "gh"], "x": ["m", "xi", "rx", "ct", "xp", "j", "i", "e", "xs", "f", "dx", "ox", "z", "zx", "t", "xd", "tx", "lat", "ch", "width", "on", "xy", "ax", "p", "ex", "g", "v", "yx", "wd", "xf", "xt", "n", "xx", "ix", "xc", "px", "o", "fx", "l", "X", "wx"], "y": ["ty", "b", "m", "uy", "fy", "j", "yer", "ny", "axy", "i", "ies", "ery", "hy", "ye", "ya", "z", "yt", "iy", "oy", "t", "py", "vy", "ch", "sky", "xy", "ym", "yl", "ay", "p", "gy", "c", "ot", "ys", "v", "Y", "my", "ey", "cy", "hot", "yy", "sy", "yr", "n", "ry", "ly", "o"], "r": ["rd", "rs", "rate", "m", "term", "rx", "ri", "lr", "br", "e", "cr", "error", "run", "q", "rar", "dr", "rc", "re", "kr", "pair", "t", "ur", "rand", "attr", "pr", "rr", "result", "rg", "er", "rad", "p", "rh", "rb", "sr", "res", "d", "g", "data", "item", "ar", "rect", "rt", "l", "vr", "n", "err", "fr", "R", "ry", "nr", "mr"], "ans": ["uns", "posts", "rs", "vs", "san", "oss", "s", "rets", "can", "ats", "aos", "utters", "rans", "ann", "lan", " means", "ens", "ones", "cs", "aus", "angs", "eds", "aps", "anks", "ks", "forms", "ins", "ols", "an", "ros", "ars", "ras", "fts", "orts", "ents", "ns", " scans", "flags", "eps", "ids", "ants", "mas", "ons", "ates", "yes", "ds", "arts", "ts", "ANS", "ls", "amps", "olds", "ads"], "ag": ["sam", "og", "flag", "lag", "arn", " arg", "re", "set", "ext", " ar", "ags", "bag", "storage", "rg", "rang", "ig", "log", "AG", "sg", "g", "ars", "ar", "ame", "ver", " sa", "tag", "arg"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString string = sc.next();\\n\t\tint ans=0;\\n\t\tfor(int i=0;i<string.length();i++){\\n\t\t\tans=ans+Integer.parseInt(string.substring(i,i+1));\\n\t\t\tif(ans>=9){ans=ans-9;}\\n\t\t}\\n\t\tif(ans==0){System.out.println(\"Yes\");}\\n\t\telse{System.out.println(\"No\");}\\n\t}\\n}", "target": "93", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "cl", "bc", "cs", "desc", "ec", "ok", "esc", "sync", "Sc", "dec", "ch", "pc", "isc", "osc", "uc", "sys", "mc", "scl", "nc", "c", "SC", "gc", "inc", "sv", "nl", "scan", "lc", "sp", "sel", "ser", "asc", "conv", "anc", "sec", "usc", "sq"], "string": ["ring", "message", "san", "system", "s", "password", "STR", "address", "sequence", "char", "str", "value", "service", "command", "number", "user", "description", "re", "this", "relation", "function", "network", "result", "list", "query", "null", "p", "print", "status", "space", "prefix", "comment", "data", "subject", "array", "filename", "st", "sql", "name", "strings", "input", "output", "ident", "chain", "integer", "text", "object", "word", "source", "sample"], "ans": ["oss", "ats", "vals", "ens", "anes", "ks", "books", "lines", "leans", "ros", "ions", "ars", "orts", "flags", "as", "missions", "ces", "faces", "als", "ls", "can", "pan", "ann", "aus", "aps", "an", "names", "ms", "eps", "ons", "arts", "ts", "ports", "es", "asks", "actions", "ads", "rans", "ians", "lan", "anas", "acs", "ams", "cons", "ents", "grades", "ids", "orders", "yes", "vers", "ints", "posts", "vs", "s", "xs", "ims", "ones", "cs", "beans", "lets", "offs", "anks", "reads", "ins", "aces", "ns", "ants", "mas", "scan", "oos", "ds", "ps", "nets", "ANS", "is", "amps", "olds"], "i": ["ii", "phi", "m", "xi", "multi", "j", "ri", "init", "bi", "it", "ji", "hi", "in", "ims", "u", "yi", "ci", "di", "I", "mi", "ie", "gi", "index", "ni", "li", "ei", "si", "c", "pi", "ti", "io", "cli", "zi", "ui", "ms", "ini", "ic", "ai", "us", "iu", "n", "ix", "ip", "y", "o", "is", "uri", "x", "im", "oi", "l", "qi", "ki"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.stream.IntStream;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.util.InputMismatchException;\\nimport java.io.BufferedReader;\\nimport java.util.OptionalInt;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        TaskB solver = new TaskB();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskB {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int[] a = in.nextIntArray(3);\\n            int k = in.nextInt();\\n\\n            int max = IntStream.of(a).max().getAsInt();\\n            int sum = IntStream.of(a).sum();\\n\\n            long t = (long) Math.pow(2, k) * max;\\n\\n            out.println(sum - max + t);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        BufferedReader in;\\n        StringTokenizer tok;\\n\\n        public String nextString() {\\n            while (!tok.hasMoreTokens()) {\\n                try {\\n                    tok = new StringTokenizer(in.readLine(), \" \");\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n            }\\n            return tok.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(nextString());\\n        }\\n\\n        public int[] nextIntArray(int n) {\\n            int[] res = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                res[i] = nextInt();\\n            }\\n            return res;\\n        }\\n\\n        public InputReader(InputStream inputStream) {\\n            in = new BufferedReader(new InputStreamReader(inputStream));\\n            tok = new StringTokenizer(\"\");\\n        }\\n\\n    }\\n}\\n\\n", "target": "201", "substitutes": {"inputStream": ["audioSteam", "inputThread", "inputSocket", "sourceForm", "InputSteam", "currentStreamer", " inputForm", "audioForm", "liststream", "outputStreamer", " inputSocket", "audioStream", "InputStream", "instream", "outputThread", "audioWindow", "inputForm", "currentSteam", "outputSteam", "inputstream", "inputSteam", " inputSteam", "outputSocket", "sourceSteam", " inputWindow", "InputThread", "sourceStream", "listSteam", "inStream", "InputForm", "listStream", "outputForm", "currentStream", "listStreamer", "outputstream", "inSocket", "sourceWindow", " inputstream", "inputStreamer", "inputWindow", " inputThread", "currentstream", "inSteam"], "outputStream": ["writeForm", "inputPoint", "thisStream", "thisForm", "writeStream", "outputStreamer", "thisPoint", " outputSteam", "inputForm", "thisSteam", "outputSteam", "inputSteam", "responseStream", " outputForm", "writeSteam", "responseSteam", "responseForm", "outputForm", " outputPoint", "writeStreamer", "outputPoint", "responseStreamer", "inputStreamer"], "in": ["play", "h", "lo", "q", "r", "rin", "mi", "on", "er", "log", "mc", "inside", "inn", "w", "bin", "ini", "or", "mm", "m", "can", "kin", "doc", "run", "file", "cm", "c", "local", "and", "cin", "din", "al", "l", "inf", "isin", "ri", "context", "init", "reader", "el", "IN", "info", "up", "from", "ain", "form", "inc", "get", "io", "add", "input", "ze", "nin", "ind", "o", "source", "per", "In", "con", "it", " din", "gin", "null", "ac", "p", "ins", "inner", "iter", "ssl", "sin", "raw", "ic", "scan", "ry", "is", "err", "rt"], "out": ["current", "check", "can", "tmp", "aos", "it", "cache", "run", "cmd", "net", "OUT", "user", "pool", "set", "at", "ou", "outs", "os", "outer", "this", "ch", "up", "group", "result", "sys", "client", "Out", "log", "list", "report", "null", "p", "print", "inner", "ex", "obj", "write", "gc", "w", "v", "output", "io", "name", "end", "screen", "co", "gr", "l", "table", "to", "flush", "o", "writer", "err", "rt", "OU", "nt"], "solver": ["jsolution", " solution", "Saver", "sol", "resorter", "isolution", "sorter", "resolution", " saver", "isolver", "ssorter", "solution", "Solver", "saver", "isorter", "resolver", "isol", "ssolution", "ssol", "ssolver", " solve", "Solve", "jsolve", "solve", "jsaver", "resol", "jsolver", "Solution"], "testNumber": ["caseCounter", "caseNo", " testCounter", "TestNo", " testNo", "TestCounter", "caseNumber", " testNumbers", "testNumbers", "testNo", "TestNumbers", "testCounter", "caseNumbers", "TestNumber"], "a": ["aaa", "act", "b", "sta", "la", "oa", "ap", "aos", "sa", "eas", "aw", "am", "ed", "parts", "at", "A", "au", "area", "ab", "ca", "ma", "app", "ac", "p", "ba", "aka", "ea", "ta", "an", "aa", "ga", "all", "as", "active", "aux", "alpha", "pa", "na", "va", "o", "ae"], "k": ["mk", "m", "j", "sk", "ke", "ik", "q", "kn", "r", "z", "u", "ok", "kh", "ak", "ck", "ax", "kj", "p", "kl", "ka", "ks", "c", "w", "v", "K", "kk", "kw", "o", "x", "key", "ku"], "max": ["act", "m", "h", "j", "tmp", "pop", "MAX", "head", "top", "r", "right", "mx", "min", "tx", "rand", "med", "prime", "first", "ax", "log", "ma", "Max", "p", "len", "c", "print", "ram", "conf", "maximum", "box", "ex", "count", "w", "ctx", "scale", "v", "add", "total", "largest", "end", "st", "ms", "mad", "last", "length", "div", "ge", "map", "mean", "view", "x", "size", "hash", "master", "gt", "mod"], "sum": ["sam", "um", "h", "m", "tu", "sim", "mix", "sa", "min", "sm", "set", "diff", "med", "zero", "first", "ma", "vol", "next", "mu", "si", "match", "ram", "su", "count", "cum", "summary", "st", "v", "add", "mem", "total", "scale", "dot", "num", "us", "weight", "last", "fill", "average", "tm", "unique", "Sum", "na", "mean", "mm", "size", "x", "hash", "sample", "mod"], "t": ["ty", "tu", "m", "h", "j", "s", "it", "e", "f", "q", "r", "z", "fort", "wt", "dt", "p", "title", "c", "ot", "ta", "w", "g", "d", "v", "tv", "T", "td", "tm", "y", "ts", "o", "tt", "x", "l", "rt", "tf"], "tok": ["htoc", "htik", "tck", "Toc", "rtop", "pop", "toks", "vtik", "itck", "vticker", "wtik", "vtok", "toik", "took", "top", "wtok", "itop", "poks", "Tik", "Tot", " toc", "ticker", "tol", "rtot", "wticker", "tik", "htot", "htok", "talk", "itok", "vtol", "Tok", "tot", " top", "toc", "rtoks", "stop", " tol", " tot", " talk", "stok", "itoks", " ticker", "vtoc", " tik", "tooc", "pok", "pot", "vtalk", " tck", " toks", "toot", "stoks", "rtok", "wtalk", "stck"], "n": ["m", "b", "s", "j", "nn", "net", "q", "r", "z", "ln", "nr", "ne", "mn", "nm", "p", "len", "nc", "c", "np", "ot", "N", "count", "nb", "w", "d", "v", "nu", "no", "name", "num", "ns", "nl", "sn", "na", "o", "x", "size", "cn", "l", "nt"], "res": ["rs", "s", "resolution", "resp", "r", "arr", "vals", "re", "vec", "rel", "pers", "resource", "os", "exp", "req", "rev", "result", "windows", "reg", "sys", "ref", " Res", "pas", "cons", "cms", "RES", "results", "ms", "us", "gr", "aux", "ons", "Res", "ps", "cond", "js", "rest", "pres", "ports", "ret", "reset", "resources", "ress", "rem", "red", "resh", "nt"], "i": ["ii", "phi", "m", "me", "multi", "sim", "j", "init", "bi", "it", "fire", "q", "u", "ci", "set", "di", "I", "mi", "ie", "gi", "li", "ei", "si", "inner", "pi", "iter", "ti", "g", "cli", "ui", "ms", "ini", "ic", "ai", "us", "chain", "ix", "ip", "y", "is", "im", "oi", "batch", "qi"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author srikanth\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        abc174_b solver = new abc174_b();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class abc174_b {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int n = in.nextInt();\\n            int d = in.nextInt();\\n            int count = 0;\\n\\n            while (n-- > 0) {\\n                double x = in.nextInt();\\n                double y = in.nextInt();\\n\\n                if (Math.sqrt(x * x + y * y) <= d) {\\n                    count++;\\n                }\\n            }\\n            System.out.println(count);\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n//        System.out.println(\"numchars \"+numChars);\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "42", "substitutes": {"inputStream": ["inputSocket", "inputFile", "connectionFile", "connectionStream", "contextStreamer", "contextStream", " inputStreamer", "outputStreamer", " inputSocket", "outputSteam", "inputstream", "inputSteam", "connectionSteam", "outputSocket", " inputSteam", "connectionSocket", "outputFile", " inputFile", "contextstream", "outputstream", " inputstream", "inputStreamer", "contextSteam"], "outputStream": ["inputOnly", "targetStream", " outputPort", "inputWriter", "targetForm", "displayStream", "outputWriter", "displayStreamer", "writeStream", "outputStreamer", "OutputPort", "outStream", "targetstream", "displayPort", "writePort", " outputOnly", "resultStream", "networkStream", " outputSteam", "resultWriter", "inputForm", "outputSteam", "OutputSteam", "resultForm", "outSteam", "inputSteam", "resultPort", "outputOnly", "outStreamer", "inputstream", "networkForm", "OutputStream", "displaySteam", " outputForm", "resultSteam", "resultOnly", "writeSteam", "networkSteam", "outputForm", "writeStreamer", "OutputForm", "outputstream", "outPort", "targetSteam", "networkstream", "outputPort", " outputWriter"], "in": ["serv", "per", "inf", "In", "check", "con", "ri", "context", "kin", "i", "it", "doc", "init", "lo", "run", "net", "r", "file", "rin", "reader", "t", "mi", "IN", "info", "up", "on", "from", "er", "log", "gin", "ma", "null", "query", "ro", "c", "mc", "ins", "inner", "local", "form", "inc", "inn", "iter", "sin", "cin", "get", "sql", "io", "add", "input", "pp", "bin", "ini", "ic", "as", "or", "ind", "mm", "din", "is", "old", "source", "al", "l"], "out": ["oss", "msg", "s", "j", "can", "tmp", "aos", "it", "cache", "net", "OUT", "user", "t", "set", "at", "pool", "ou", "outs", "parent", "os", "outer", "this", "ch", "up", "result", "conn", "client", "sys", "Out", "log", "list", "report", "null", "p", "print", "inner", "status", "ex", "write", "gc", "w", "res", "txt", "v", "output", "io", "end", "all", "screen", "or", "co", "chain", "gr", "l", "to", "o", "sum", "err", "rt", "stable", "OU", "nt"], "solver": [" solution", "resolve", "resorter", "sorter", "resolution", "csolve", " Solve", "solution", "Solver", "Slove", "csolver", "resolver", " Slove", " Solver", " solve", "Solve", " slove", "slove", "Sorter", "csolution", " Solution", "solve", "csorter", "Solution"], "testNumber": [" verifyNo", " attemptCounter", " testCounter", " attemptNo", " testNo", " verifyNumber", " testnum", " verifynum", "testCounter", "testNo", "testnum", " attemptNumber", " verifyCounter", " attemptnum"], "n": ["m", "j", "nan", "br", "i", "nn", "net", "number", "none", "ln", "t", "k", "ne", "on", "len", "p", "nc", "np", "c", "nor", "note", "N", "le", "nb", "w", "no", "name", "v", "num", "ns", "un", "nl", "sn", "nw", "na", "dn", "cn", "l", "nt"], "d": ["done", "b", "fd", "m", "j", "s", "f", "da", "did", "z", "ed", "nd", "dict", "di", "t", "D", "dd", "cd", "dt", "diff", "bd", "p", "db", "dom", "draw", "w", "debug", "pd", "td", "dir", "div", "ds", "sd", "dn", "dh", "del", "l", "dL"], "count": ["current", "check", "flag", "ount", "test", "number", "q", "continue", "find", "t", "cd", "coll", "force", "result", "counter", "index", "list", "report", "next", "c", "code", "amount", "status", "trace", "summary", "nb", "add", "total", "all", "num", "state", "const", "length", "Count", "ind", "cond", "now", "child", "frequency", "max", "size", "sum", "found", "nt"], "x": ["xi", "rx", "xp", "xe", "i", "xs", "dx", "ox", "z", "zx", "mx", "xxx", "xd", "tx", "pl", "xml", "ux", "ll", "xy", "ax", "xa", "ex", "w", "lex", "v", "yx", "xxxx", "xf", "xt", "xx", "ix", "xc", "px", "fx", "X", "wx"], "y": ["b", "uy", "fy", "j", "ny", "axy", "i", "ies", "ye", "ya", "z", "yt", "yi", "iy", "oy", "xxx", "py", "vy", "sky", "sys", "xy", "ym", "yl", "ay", "gy", "v", "Y", "my", "ey", "cy", "yy", "sy", "yr", "xx", "ry", "ly", "yz", "yan"], "writer": ["message", "caster", "page", "test", "wrapper", "iterator", "outer", "function", "engine", "counter", "zero", "er", "log", "journal", "module", "document", "w", "runner", "wp", "word", "operator", "console", "wrote", "file", "ter", "driver", "core", "format", "maker", "handler", "writing", "socket", "buffer", "variable", "entry", "processor", "print", "walker", "write", "data", "loader", "output", "table", "builder", "save", "term", "html", "reader", "window", "Writer", "timer", "query", "code", "parser", "worker", "ler", "widget", "riter", "cache", "ger", "event", "manager", "player", "lock", "this", "network", "storage", "connection", "client", "send", "comment", "tree", "director"], "stream": ["sam", "message", "console", "system", "channel", "speed", "context", "file", "Stream", "event", "wrapper", "reader", "window", "pool", "thread", "row", "history", "iterator", "parent", "socket", "handler", "poll", "feed", "resource", "stack", "engine", "ream", "content", "buffer", "loop", "client", "line", "pipe", "parser", "transform", "form", "sw", "iter", "port", "output", "path", "input", "or", "host", "chain", "handle", "zip", "each", "view", "is", "stage", "sample"], "buf": ["queue", "cap", "msg", "tmp", "seq", "br", "str", "cmd", "alloc", "uf", "rc", "arr", "cv", "vec", "pool", "cb", "cur", "pkg", "buffer", "pipe", "rb", "txt", "buff", "mem", "orig", "conv", "Buffer", "err"], "curChar": ["lastCh", "lastchar", "curCh", "curByte", " curchar", "CurCh", "lastByte", "Curchar", "CurByte", " curByte", " curCh", "CurChar", "curchar", "lastChar"], "numChars": [" numChARS", "numCharars", "numCharARS", "numchARS", "numChARS", "numchars", "numCharats", "numChats", "numchats", " numChats"], "filter": ["check", "term", "policy", "channel", "test", "file", "reader", "handler", "accept", "Filter", "buffer", " handler", "ref", "processor", "match", "code", " cutoff", " filtering", "name", " filtered", " Filter", "ler", "callback", "map", "table", " filters", "fil", "conv"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try (Scanner in = new Scanner(System.in)) {\\n//            while (true)\\n                solve(in);\\n        }\\n    }\\n\\n    private static void solve(Scanner in) {\\n        int n = in.nextInt();\\n        int[] R = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            R[i] = in.nextInt();\\n        }\\n        int min = Integer.MAX_VALUE;\\n        int diff = Integer.MIN_VALUE;\\n        for (int i = 0; i < n; i++) {\\n            if (diff < R[i] - min) {\\n                diff = R[i] - min;\\n            }\\n            if (min > R[i]) {\\n                min = R[i];\\n            }\\n        }\\n        System.out.println(diff);\\n    }\\n}", "target": "208", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n  public static void main(String[] args) throws Exception {\\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n    String s = new String(in.readLine());\\n    int N = Integer.parseInt(s);\\n    int sumN = 0;\\n    \\n    for(int i = 0; i < s.length(); i++){\\n      sumN += Character.getNumericValue(s.charAt(i));\\n    }\\n    \\n    if(N % sumN == 0){\\n      System.out.println(\"Yes\");\\n    }else{\\n      System.out.println(\"No\");\\n    }\\n  }\\n}\\n", "target": "195", "substitutes": {"in": ["out", "inf", "In", "b", "con", "it", "doc", "r", "file", "by", "body", "user", "rin", "reader", " out", "IN", "info", "std", "on", "from", "er", "log", "null", "en", "ro", "ac", "ins", "inner", "conf", "inn", "and", "get", "cin", "io", "input", "world", "all", "bin", "ini", "thin", "stream", "or", "n", "ind", "id", "din", "is", "al", "err", "rt"], "s": ["rs", "m", "b", "h", "string", "its", "ats", "str", "xs", "ings", "ss", "fs", "q", "ims", "r", "sb", "S", "bs", "t", "os", "se", "qs", "gs", "p", "ins", "sql", "sw", "txt", "w", "g", "v", "less", "strings", "sv", "ms", "ws", "sl", "ns", "n", "sts", "sp", "ds", "ps", "tes", "js", "ls", "ts", "is", "es", "l", "csv", "sq"], "N": ["Node", "P", "F", "NN", "Ns", "Ni", "Num", "S", "Number", "NR", "SN", "G", "NS", "I", "D", "NO", "NP", "NC", "NB", "L", "ND", "V", "TN", "Size", "NG", "NM", "MN", "CN", "Net", "NT", "NA", "T", "K", "J", "n", "No", "M", "R", "C", "X", "Na", "O"], "sumN": ["SumR", " sumM", "sumG", " sumR", "SumNS", " sumG", "sortNS", " sumNS", "sortG", "sumM", "sumR", "totalR", "SumF", "newN", " sumn", "sumNS", "newR", "sortN", "SumM", "SumN", "sumC", "newn", "Sumn", " sumC", "sumF", "newF", "totalM", "SumG", " sumF", "totalC", "totalN", "sumn", "sortR", "SumC"], "i": ["ii", "phi", "m", "gu", "xi", "j", "multi", "ri", "init", "bi", "it", "ji", "hi", "q", "ims", "ci", "t", "di", "I", "k", "mi", "ie", "gi", "li", "p", "ei", "si", "c", "point", "pi", "iter", "ti", "io", "my", "cli", "ui", "ms", "ini", "ai", "ic", "us", "\u0438", "iu", "ind", "ix", "id", "ip", "y", "o", "is", "key", "uri", "im", "oi", "qi"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner scn = new Scanner(System.in);\\n        int Bills = scn.nextInt();\\n        int Sum = scn.nextInt();\\n\\n        if(Check(Sum, Bills) == 1){\\n            System.out.println(\"-1 -1 -1\");\\n        }\\n    }\\n\\n    public static int Check(int Y, int N){\\n\\n        for(int x=0; x<=N; x++){\\n            for(int y=0; y<=N-x; y++){\\n                int z = N-x-y;\\n                if(x*10000 + y*5000 + z*1000 == Y){\\n                    System.out.println(x + \" \" + \" \" + y + \" \" +z);\\n                    return 0;\\n                }\\n            }\\n        }\\n        return 1;\\n    }\\n}", "target": "133", "substitutes": {"scn": ["cscn", "scr", "scon", "cron", " scc", "iscc", "crn", "csg", "iscne", "ccc", "ucn", "ScN", " scne", " scon", "ucg", " scr", "scne", " scg", " sccn", "Scr", "csn", "sccn", "scN", "csN", "crN", "Scon", "scc", "crr", "Scn", "ucN", "iscN", " scN", "ccn", "ccN", "uccn", "scg", "iscn", "ccne"], "Bills": ["bill", "Buills", " Bill", "bishes", "Blills", "billing", "Blells", "Billed", "Blilled", " Bishes", "Builled", "Bells", "Buishes", "bills", "Billing", "billed", " Billed", "Bishes", "Bill", " Billing", "bells", " Bells", "Blill", "Builling"], "Sum": ["um", "Vol", "Hash", "Summary", "Num", "S", "Plus", " sums", "Cash", "Status", "Acc", "Inc", "Score", "Miss", "Mem", "Amount", "Sky", "Result", "Us", "Add", "Size", "Gold", "Total", "Average", "Sim", "Val", "Stock", "Avg", " sum", "Su", "Count", "Sad", "Res", "Length", "sum"], "Y": ["B", "E", "P", "S", "G", "I", "A", "W", "MY", "Year", "L", "V", "NY", "YY", "YS", "H", "TH", "T", "Py", "TY", "K", "J", "Q", "XY", "M", "Height", "C", "Z", "X", "O"], "N": ["B", "NH", "E", "P", "NN", "Ns", "NI", "Num", "S", "NR", "OUT", "SN", "G", "NL", "NS", "I", "D", "A", "NO", "GN", "NP", "W", "NC", "NB", "L", "V", "TN", "NM", "NG", "MN", "H", "CN", "NT", "NA", "T", "K", "J", "Q", "NE", "n", "M", "C", "Z", "X"], "x": ["m", "h", "xi", "rx", "ct", "xp", "j", "ick", "xe", "i", "e", "xs", "dx", "ox", "mx", "window", "at", "el", "xd", "xxx", "tx", "att", "ie", "lat", "xml", "ux", "fixed", "on", "xy", "ax", "index", "p", "xa", "ex", "w", "lex", "d", "v", "ace", "left", "yx", "search", "xf", "xx", "n", "xt", "ix", "xc", "inx", "px", "key", "fx", "im", "l", "X", "wx"], "y": ["ty", "arty", "b", "h", "uy", "yer", "year", "j", "m", "yn", "ny", "axy", "fy", "ies", "i", "ery", "ye", "hy", "ya", "yd", "yt", "yi", "iy", "iley", "oy", "t", "k", "py", "vy", "ch", "sky", "xy", "ym", "yl", "ay", "gy", "c", "ot", "v", "my", "ey", "yx", "yo", "cy", "hot", "ky", "yy", "sy", "yr", "zy", "n", "iny", "ury", "icy", "ory", "ry", "ly", "yan"], "z": ["j", "uz", "ez", "zen", "zx", "gz", "ld", "k", "tz", "rand", "zh", "ll", "cz", "iz", "hz", "oz", "nz", "zz", "w", "zone", "d", "zi", "az", "ze", "zy", "zip", "n", "zer", "sd", "zo", "Z", "l", "wx", "yz"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main{\\n    public static Scanner scn=new Scanner(System.in);\\n    public static void main(String args[]){\\n        ans();\\n    }\\n    public static void ans(){\\n        int n=scn.nextInt();\\n        long count=0;\\n        // if(n>=1000000)\\n        // System.out.print(266666333332);\\n        \\n      for(int i=1;i<=n;i++){\\n      \\n          if(i%3!=0 && i%5!=0){\\n         count+=i;       \\n    }\\n}\\n// if(n<1000000)\\nSystem.out.print(count);\\n}\\n}", "target": "55", "substitutes": {"scn": ["descne", "escen", " scann", "scr", "csr", "scann", "dcn", " scne", "scen", " scnn", " scen", " scnc", "descen", "dcnc", " scr", "descn", "scne", "csnc", "csnn", "escann", "csn", "scnc", "dcnn", "escne", "descann", "scnn", "dcr", "escn"], "n": ["h", "s", "j", "nn", "r", "z", "ln", "t", "ne", "on", "rn", "en", "p", "c", "gn", "N", "nb", "d", "v", "nu", "ern", "ns", "num", "sn", "cn", "l", "nt"], "count": ["current", "flag", "ount", "cache", "number", "ctr", "z", "set", "t", "counter", "index", "list", "p", "acc", "c", "ptr", "nb", "st", "num", "state", "sn", "map", "Count", "table", "sum", "pointer", "found", "nt"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\tfinal static long MOD = 1000000007;\\n\tpublic static String[] Ws = null;\\n\tpublic static int wsIndx = 0;\\n\tpublic static BufferedReader in = null;\\n\tpublic static long cnt=0;\\n\tpublic static PrintWriter pw = new PrintWriter(System.out);\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tsolution(args);\\n\t\tif(in!=null){\\n\t\t\tin.close();\\n\t\t}\\n\t\tpw.flush();\\n\t\tpw.close();\\n\t}\\n\\n\tpublic static void solution(String[] args) throws Exception{\\n\\n\t\tString s = nextString();\\n\t\tString[] base = {\"resare\",\"remaerd\",\"esare\",\"maerd\"};\\n\t\tStringBuffer S = (new StringBuffer()).append(s).reverse();\\n\\n\t\tString ans = \"NO\";\\n\t\tboolean flg = true;\\n\t\twhile(flg){\\n\t\t\tflg=false;\\n\t\t\tfor(int i=0;i<base.length;i++){\\n\t\t\t\tif(S.length()>=base[i].length()&&S.substring(0,base[i].length()).equals(base[i])){\\n\t\t\t\t\tS.delete(0, base[i].length());\\n\t\t\t\t\tflg=true;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tif(S.length()==0){\\n\t\t\tans=\"YES\";\\n\t\t}\\n\\n\t\tpw.println(ans);\\n\\n\t}\\n\\n\tpublic static void dfs(int n,int cnt,ArrayList<Integer>[] tree,int parent,int[] set){\\n\t\tif(n!=parent&&tree[n].size()==1){\\n\t\t\tset[n]=cnt;\\n\t\t\treturn;\\n\t\t}\\n\t\tfor(int x:tree[n]){\\n\t\t\tif(x==parent){\\n\t\t\t\tcontinue;\\n\t\t\t}\\n\t\t\tdfs(x,cnt+1,tree,n,set);\\n\t\t}\\n\t}\\n\\n\\n\tpublic static void check() throws Exception{\\n\t\tif(in == null){\\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tif(Ws==null || Ws.length<=wsIndx){\\n\t\t\tWs = in.readLine().split(\" \");\\n\t\t\twsIndx=0;\\n\t\t}\\n\t}\\n\tpublic static int nextInt()throws Exception{\\n\t\tcheck();\\n\t\treturn Integer.parseInt(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static long nextLong()throws Exception{\\n\t\tcheck();\\n\t\treturn Long.parseLong(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static String nextString()throws Exception{\\n\t\tcheck();\\n\t\treturn Ws[wsIndx++];\\n\t}\\n\\n\tpublic static int[] nextInts()throws Exception{\\n\t\tcheck();\\n\t\tint[] tmp = new int[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Integer.parseInt(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static long[] nextLongs()throws Exception{\\n\t\tcheck();\\n\t\tlong[] tmp = new long[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Long.parseLong(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static String[] nextStrings()throws Exception{\\n\t\tcheck();\\n\t\twsIndx=Ws.length;\\n\t\treturn Ws;\\n\t}\\n\\n}\\n\\n", "target": "50", "substitutes": {"MOD": ["FD", "mask", "MAX", "OK", "AD", " MAX", "wid", "rid", " mod", "SIZE", "NUM", "NO", "rand", "VERSION", "usr", "mem", "Mod", "MT", " Mod", "Mask", "UID", "ser", "max", "REM", "mod"], "Ws": ["WS", "Win", "In", "FS", "Wi", "Pages", "Wo", "Ns", "Socket", "RW", "xs", "Words", "Windows", "Rs", "Bytes", "CW", "Str", "WT", "NS", "Js", "wt", "Writer", "Works", "Ps", "W", "Out", "Ms", "Fs", "WC", "Es", "Wr", "Vs", "Tx", "Ins", "fts", "ws", "LS", "WB", "Args", "NW", "GS", "Cs", "Os", "Bs"], "wsIndx": ["awsIndX", "wsIdex", "wsVerti", "wsVertex", "wsindix", "awsIndx", "wsIdx", "wsindi", "awsIndix", "wsVertx", "wsIndX", "wsindex", "WsIndx", "Wsindi", "WsIndi", "wsIndex", "wsINDx", "WsIndix", "wsIdi", "wsPtrix", "wsIdix", "wsPtrX", "wsIndy", "wsindx", "wsIndix", "Wsindex", "Wsindix", "wsIndi", "awsIndy", "wsLenx", "wsindX", "WsIndex", "wsPtry", "psINDx", "Wsindx", "wsPtrx", "wsindy", "psIndx", "wsVertix"], "in": ["serv", "store", "out", "b", "In", "h", "m", "con", "inf", "isin", "it", "init", "f", "asin", "doc", " din", "lo", "r", "ln", "rin", "min", "reader", "t", "mi", "read", " out", "IN", "info", "on", "from", "Out", "er", "gin", "p", "mc", "c", "en", "ins", "inner", "inside", "pi", "inn", "inc", "iter", "w", "cin", "st", "sin", "io", "get", "input", "bin", "ini", "ws", "inv", "ic", "stream", "nin", "err", "ind", "din", "o", "is", "again", "l", "win"], "cnt": ["pcNT", "cCount", "acnt", "Cct", "Counter", "cct", "acount", "crnt", "cNT", "pcnn", "Cnn", "ncct", "ncnt", "pcnt", "crount", "counter", "Cnt", "CCount", "pcCount", " ccount", "count", "cnn", " cCount", "CNT", "ncounter", " count", "acct", "acNT", "ncNT", "ccount", "Count", " cNT", "Ccount", " counter", "crcount", " cnn", " cct", "crct"], "pw": ["ppwt", "mwt", "pws", "fwd", "pwt", "mwp", "mw", "cpw", "npw", " pwa", "twt", "Pwd", "pwp", " pws", "mwd", "Pw", "Pwr", "ppwd", "tw", "lpW", "pwr", "fw", "fwb", "ppwb", "fws", "cpW", "twp", "npwb", "lpw", "npwa", "cpwr", "cpwb", "twd", "lpwd", "pwa", "pwb", "lpwr", " pwd", "ppw", "ppwa", "ppwp", "cpws", " pwb", "pW", "cpwd", "npwd", "PW", "pwd"], "s": ["rs", "b", "m", "h", "string", "j", "str", "f", "ss", "r", "sb", "Str", "t", "os", "p", "c", "w", "res", "g", "v", "sv", "single", "ns", "ps", "js", "y", "ts", "ses", "is", "l", "sq"], "base": ["bit", "b", "check", "bo", "sequence", "it", "basic", "bi", "cache", "link", "domain", "init", "file", "unit", "core", "shell", "bs", "reverse", "iso", "history", "split", "frame", "use", "area", "force", "se", "kb", "prime", "bottom", "binding", "buffer", "bas", "ma", "back", "list", "null", "bare", "template", "prefix", "space", "db", "based", "root", "parse", "scale", "server", "name", "normal", "ase", "chain", "bar", "rule", "Base", "common", "id", "model", "source", "reset", "sche", "origin"], "S": ["B", "WS", "SM", "P", "FS", "F", "STR", "ES", "ss", "DS", "G", "Str", "CS", "NS", "A", "I", "W", "L", "SA", "V", "RS", "SI", "N", "BS", "Si", "T", "SL", "SQL", "SU", "LS", "SS", "MS", "SAN", "TS", "M", "R", "C", "SB", "Sample", "X", "JS"], "ans": ["uns", "rs", "san", "rans", "aos", "ats", "Ns", "utters", "xs", " Ans", "ann", " means", "ens", "aus", "AN", "cs", "NS", "ean", "os", " nos", "anes", "offs", "eds", "aps", "anks", "ks", "ins", "ols", "an", "An", "leans", "ys", "ars", "ras", "ms", "ents", "ns", "us", "ants", "ces", "ons", "ates", "ds", "vers", "arts", "ts", "ANS", " sans", "helps", "amps", "Vers", "ads"], "flg": ["plgc", "Flgc", "fln", "sln", "frg", "flgs", "Flj", "flig", "slgs", "FLgs", "complg", "slg", "FLgc", "complig", "Flbg", "velg", " flbg", "tln", "velig", "filn", "filgg", "flgg", " flgg", "slgg", "FLg", "frig", "plgg", "tlgs", "flgc", "filgs", "plj", "velgl", "Flg", "frgl", " flgs", "flbg", "complgg", "flj", " flj", "filg", "tlgg", "FLbg", "Flgg", "complgl", "Flgs", "tlg", "plg", " flgc", "velgg", "flgl", "frgg"], "i": ["ii", "phi", "m", "b", "xi", "me", "multi", "j", "ri", "it", "bi", "f", "ji", "init", "hi", "q", "u", "ci", "di", "I", "history", "mi", "info", "json", "gi", "slice", "list", "li", "ei", "si", "point", "status", "pi", "iq", "ti", "v", "io", "cli", "my", "ij", "zi", "ui", "ini", "ic", "ai", "iu", "ix", "ip", "y", "o", "is", "uri", "im", "qi", "ki"], "n": ["ng", "out", "m", "h", "j", "yn", "nan", "e", "nn", "ren", "net", "fn", "missing", "r", "z", "number", "t", "nr", "node", "ne", "mn", "on", "index", "nm", "next", "p", "en", "c", "nc", "np", "N", "an", "nb", "g", "d", "v", "nu", "name", "ns", "num", "sn", "tn", "nw", "na", "id", "y", "o", "dn", "cn", "l", "nt"], "tree": ["m", "me", "forest", "see", "sequence", "cache", "quote", "tre", "menu", "mod", "dict", "t", "window", "split", "wt", "Tree", "ree", "node", "se", "ext", "stack", "prime", "buffer", "pre", "tower", "zero", "rees", "list", "module", "code", "print", "note", "db", "parse", "data", "le", "get", "mem", "single", "rule", "et", "map", "tr", " trees", "fr", "table", "model", "ts", "al", "batch", "te", "tail", "let", "nt"], "parent": ["per", "out", "m", "h", "Parent", "par", "top", "unit", "peer", "t", "row", "pool", "empty", "k", "pos", "node", "index", "line", "list", "null", "p", "local", "root", "ctx", "g", "v", "parents", "name", "path", "self", "num", "global", "sp", "snap", "owner", "id", "child", "pa", "to", "max", "col", "l", "master", "nt"], "set": ["store", "save", "check", "san", "m", "con", "delete", "sa", "init", "see", "net", "pair", "dict", "split", "use", "se", "group", "sc", "log", "list", "en", "p", "status", "parse", "get", "scale", "st", "add", "mem", "step", "handle", "update", "et", "map", "sp", "common", "ver", "size", "sum", "batch", "man", "SET"], "x": ["xi", "rx", "xp", "yn", "xe", "e", "xs", "ox", "z", "mx", "t", "xxx", "xd", "tx", "xes", "ux", "xy", "ax", "p", "nex", "xa", "ex", "w", "v", "xxxx", "xf", "xx", "xt", "ix", "xc", "inx", "y", "o", "px", "fx", "l", "X", "wx"]}}
{"code": "import java.util.Scanner;\\n \\nclass Main{\\n \\n    public static void main(String[] args){\\n \\n        Scanner scanner = new Scanner(System.in);\\n        int a = scanner.nextInt();\\n        int b = scanner.nextInt();\\n        int c = scanner.nextInt();\\n        int k = scanner.nextInt();\\n        scanner.close();\\n        \\n        int sum = 0;\\n        if(a>=k){\\n            sum = k;\\n            System.out.println(sum);\\n            return;\\n        }else{\\n            sum += a;\\n            if(b>=k-a){\\n                System.out.println(sum);\\n                return;\\n            }else{\\n                sum -= k-a-b;\\n                System.out.println(sum);\\n            }\\n        }\\n    }\\n \\n}", "target": "56", "substitutes": {"scanner": ["queryner", "seeener", "canter", " scaner", "queryatter", "Scanener", "gateer", "queryener", "Scanner", " scanener", "canener", " scanlier", "caner", "gatener", "seeer", "canlier", "queryer", "scanatter", "Scaner", "scanlier", "scanning", "canatter", " Scaner", "scanener", "canner", " scanatter", "scaner", "scanter", " Scanter", "canning", " Scanener", "seening", "gateener", " Scanner", " scanter", "seener", " scanning", "gatelier", "Scanter"], "a": ["act", "aff", "sta", "la", "oa", "j", "sa", "aq", "i", "da", "r", "am", "ary", "era", "at", "t", "A", "au", "area", "ab", "ak", "ca", "ax", "ma", "app", "ac", "p", "ba", "ao", "ea", "af", "part", "ta", "an", "w", "aa", "ia", "aj", "ar", "all", "ai", "as", "alpha", "n", "pa", "va", "o", "x", "ate", "al", "l", "ae"], "b": ["B", "m", "eb", "ob", "j", "br", "i", "e", "bi", "f", "r", "be", "z", "sb", "fb", "u", "bc", "bs", "t", "ab", "ib", "gb", "cb", "bis", "bb", "p", "ba", "db", "rb", "nb", "g", "d", "v", "mb", "n", "y", "o", "l", "wb"], "c": ["m", "ct", "cc", "e", "f", "r", "z", "ci", "ec", "bc", "cm", "cd", "cb", "ca", "sc", "ac", "p", "g", "d", "v", "n", "o", "x", "C", "col", "l", "cp"], "k": ["mk", "unk", "m", "j", "dk", "sk", "ke", "ko", "ik", "q", "kn", "r", "z", "kr", "km", "ok", "t", "ikk", "kh", "kind", "ak", "kick", "ck", "kj", "uk", "p", "ac", "kl", "ka", "ks", "mc", "kid", "an", "w", "g", "ku", "v", "d", "K", "kk", "kw", "n", "kil", "o", "max", "x", "kok", "l", "tk", "ki"], "sum": ["cost", "sam", "out", "um", "sat", "sta", "carry", "tu", "sim", "mix", "sa", "doc", "cache", "must", "mass", "unit", "user", "cast", "temp", "sort", "min", "cos", "cus", "med", "hum", "loss", "result", "zero", "share", "cu", "ma", "vol", "mu", " SUM", "si", "match", " summed", "su", "status", "sh", "acc", "count", "cum", "summary", "comment", "cal", "scale", "add", "total", "mem", "volume", "make", "dot", "process", "num", "weight", "vote", "us", "average", "base", "Sum", "cmp", "mean", "mm", "post", "max", "stat", "fac", "hash", "mod"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\n//6/9\u30b3\u30f3\u30c6\u30b9\u30c8\\n\\npublic class Main {\\n\tpublic static void main(String[]args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint sa=100;\\n\t\tint konkai=1000;\\n\t\tList<Integer> list= new ArrayList<Integer>();\\n\t\tfor(int i=0;n>i;i++) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tlist.add(a);\\n\t\t}\\n\t\t//System.out.println(list.get(1));\\n\t\tfor(int i=0;n-1>i;i++) {\\n\t\t\tint one=0;\\n\t\t\tint two=0;\\n\t\t\tfor(int l=0;i+1>l;l++) {\\n\t\t\t\tone=one+list.get(l);\\n\t\t\t}\\n\t\t\tfor(int t=0;n-1-i>t;t++) {\\n\t\t\t\ttwo=two+list.get(n-1-t);\\n\t\t\t}\\n\\n\t\t\tkonkai=Math.abs(one-two);\\n\t\t\tif(konkai<sa) {\\n\t\t\t\tsa=konkai;\\n\t\t\t}\\n\\n\t\t}\\n\t\tSystem.out.println(sa);\\n\\n\\n\\n\t}\\n\\n}\\n", "target": "2", "substitutes": {}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int N = Integer.parseInt(sc.next());\\n        int[] l = new int[N];\\n        int max = -1;\\n        int second_max = -1;\\n        for(int i = 0; i< N; i++){\\n            int num = Integer.parseInt(sc.next());\\n            if(num > max){\\n                second_max = max;\\n                max = num;\\n            }else{\\n                if(num > second_max){\\n                    second_max = num;\\n                }\\n            }\\n            l[i] = num;\\n        }\\n        for(int elem :l){\\n            if(max != elem){\\n                System.out.println(max);\\n            }else{\\n                System.out.println(second_max);\\n            }\\n        }\\n    }\\n}", "target": "142", "substitutes": {"sc": [" Sc", "tch", "cc", "cle", "tc", "cr", "ss", "rc", "pb", "cl", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "dec", "isc", "osc", "pc", "ch", "sys", "mc", "scl", "nc", "c", "sh", "sci", "SC", "gc", "fc", "sv", "nl", "dc", "scan", "lc", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "sq"], "N": ["NH", "P", "F", "NN", "Ns", "NI", "Ni", "Num", "S", "NR", "SN", "NS", "I", "D", "GN", "NO", "NP", "NC", "NB", "L", "ND", "V", "Size", "NM", "Net", "NT", "NA", "Y", "T", "K", "J", "Sn", "NE", "n", "Len", "Count", "No", "M", "Length", "R", "C", "Z", "O"], "l": ["fl", "m", "b", "h", "s", "j", "lf", "lu", "e", "lo", "f", "q", "lis", "rl", "ml", "ln", "z", "u", "r", "t", "el", "ld", "lp", "pl", "isl", "L", "ll", "list", "li", "p", "kl", "c", "jl", "le", "g", "d", "v", "sl", "lv", "hl", "nl", "lc", "n", "lt", "dl", "ls", "o", "x"], "max": ["range", "act", "check", "m", "h", "gt", "mask", "can", "tmp", "MAX", "cache", "full", "ox", "right", "mx", "min", "window", "exp", "ext", "height", "med", "prime", "index", "ax", "recent", "ma", "huge", "Max", "p", "high", "null", "conf", "maximum", "ex", "root", "best", "res", "major", "v", "end", "total", "rank", "auto", "largest", "scale", "shift", "mad", "last", "length", "aux", "n", "map", "now", "default", "mean", "rest", "upper", "size", "x", "sum", "old", "grow", "hash", "master", "head", "mod"], "second_max": ["second_ref", "third_MAX", "second_force", "first_ref", "second2MAX", "second_maximum", "sec_right", "first_max", "first_ax", "second_right", "sec_max", "secondMaxtop", "third_ax", " second_last", "secondMaxMax", "sec_maximum", "second2top", "second2max", "third_sum", "second_sum", "second_top", " second_top", " second_ax", "second_MAX", "second_ax", "secondMaxmax", "second_last", " second_force", "secondMaxax", "second_Max", "second2sum", "second2ax", "second2Max", " second_Max", "third_max", "first_MAX"], "i": ["ii", "phi", "m", "xi", "inter", "j", "multi", "sim", "ri", "init", "bi", "it", "ji", "hi", "u", "ci", "di", "I", "mi", "ie", "info", "go", "gi", "index", "ni", "li", "ei", "si", "pi", "iter", "ti", "g", "v", "my", "ij", "zi", "ui", "ini", "ic", "ai", "us", "uu", "iu", "n", "ind", "ix", "id", "ip", "y", "conv", "o", "is", "uri", "x", "im", "ori", "qi"], "num": ["sam", "um", "m", "msg", "norm", "mom", "mon", "test", "cat", "Num", "number", "net", "tim", "unit", "temp", "ph", "NUM", "dev", "node", "mn", "nam", "result", "index", "nm", "np", "note", "obj", "count", "nb", "cal", "no", "nu", "total", "dim", "name", "orig", "coord", "div", "n", "na", "cmp", "non", "val", "col", "conv", "mm", "alph", "hex", "nom", "sum", "nr", "rem", "nt"], "elem": ["Elements", "elelements", "selev", "selements", "selem", "elev", "ele", "elele", "Elem", "egest", "oelement", "sele", "omeelement", "Ele", "elelem", " eelement", "element", "elelev", "oegest", "omegest", "Elev", "omelement", "oeelement", " element", "elements", "eelement", "omelem", "oelem", " egest"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tint m=sc.nextInt();\\n\t\tint c=sc.nextInt();\\n\t\tint i,j,k,cc=0;\\n\t\tint[]a=new int[m];\\n\t\tint[][]b=new int [n][m]; \\n\t\t\\n\t\tfor(k=0;k<m;k++) {\\n\t\t\ta[k]=sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tfor( i=0;i<n;i++) {\\n\t\t\tfor(j=0;j<m;j++) {\\n\t\t\t\tb[i][j]=sc.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tint []ans=new int[n];\\n\t\t\\n\t\tfor(i=0;i<n;i++) {\\n\t\t\tfor(j=0;j<m;j++) {\\n\t\t\t\tans[i]+=b[i][j]*a[j];\\n\t\t\t}\\n\t\t\tans[i]+=c;\\n\t\t}\\n\t\t\\n\t\tfor(i=0;i<n;i++) {\\n\t\t\tif(ans[i]>0) {\\n\t\t\t\tcc++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(cc);\\n\t\t\\n\t}\\n\\n}\\n", "target": "68", "substitutes": {"sc": ["sim", "cle", "tc", "ss", "capt", "rc", "cl", "sb", "bc", "cs", "ec", "desc", "cont", "esc", "sync", "Sc", "ctl", "dec", "ch", "pc", "osc", "isc", "exec", "sys", "psc", "mc", "scl", "nc", "si", "sh", "sci", "SC", "gc", "inc", "fc", "ctx", "arc", "sv", "dc", "lc", "scan", "sp", "ser", "asc", "conv", "sch", "sec", "anc", "usc", "irc", "sq"], "n": ["out", "norm", "nan", "ny", "e", "nn", "net", "fn", "r", "z", "t", "nr", "ne", "mn", "network", "on", "ni", "nm", "en", "p", "np", "nc", "N", "pi", "an", "nb", "g", "d", "v", "nu", "no", "name", "all", "ns", "un", "num", "nl", "sn", "na", "y", "o", "size", "x", "cn", "dn", "l", "nt"], "m": ["mat", "h", "um", "me", "mode", "e", "f", "dm", "q", "in", "r", "z", "span", "om", "cm", "sm", "t", "mo", "mi", "pm", "mn", "md", "med", "perm", "nm", "ma", "mu", "mc", "p", "bm", "pi", "an", "g", "d", "v", "mb", "mem", "mt", "ms", "tm", "M", "mm", "mean", "y", "o", "dn", "im", "em", "l", "man", "rem", "mod"], "c": ["h", "con", "ct", "e", "f", "tc", "r", "z", "u", "ci", "cm", "cs", "t", "com", "ch", "pc", "ac", "p", "mc", "count", "g", "d", "v", "fc", "ic", "co", "dc", "lc", "unc", "C", "l"], "i": ["ji", "hi", "q", "in", "dr", "ci", "mi", "php", "list", "li", "iq", "v", "name", "ij", "ui", "ini", "ai", "ix", "multi", "e", "bi", "ik", "at", "ei", "status", "pi", "ite", "cli", "zi", "chain", "id", "y", "uri", "im", "l", "ami", "ki", "ii", "ri", "init", "di", "info", "gi", "index", "si", "ti", "io", "\u0438", "ind", "ip", "o", "ori", "qi", "phi", "xi", "me", "sim", "it", "by", "u", "iii", "set", "I", "this", "ie", "p", "point", "iter", "g", "ia", "ic", "iu", "is", "key", "x", "oi"], "j": ["ng", "oj", "s", "ja", "bo", "it", "ji", "jj", "jc", "bl", "br", "str", "q", "f", "ik", "z", "by", "u", "uj", "bj", "be", "ev", "t", "jump", "rel", "py", "jit", "son", "json", "je", "pt", "pr", "on", "ju", "kj", "er", "kid", "p", "si", "jl", "obj", "jo", "g", "other", "v", "aj", "ij", "jp", "J", "dj", "jas", "tr", "sp", "fr", "js", "y", "o", "key", "l", "ge"], "k": ["mk", "unk", "dk", "sk", "it", "ke", "ik", "ko", "kn", "q", "kt", "kr", "kit", "km", "ok", "ikk", "wk", "kh", "kind", "ak", "ck", "kj", "uk", "kid", "ac", "kl", "ka", "ks", "ku", "K", "ijk", "kk", "kw", "ark", "ind", "isk", "kg", "key", "ek", "tk", "ki"], "cc": ["ucc", "ct", "con", "tc", "cmd", "rc", "ctr", "cci", "ci", "bc", "cs", "icc", "cd", "cont", "dd", "coll", "ctl", "pc", "cf", "cu", "cz", "ck", "ac", "mc", "acc", "nc", "code", "nz", "oc", "count", "gc", "fc", "ctx", "cks", "ic", "BC", "co", "cca", "cell", "ce", "lc", "cmp", "unc", "cp", "CC", "vc"], "a": ["aaa", "act", "h", "s", "ap", "oa", "sa", "e", "f", "r", "am", "u", "at", "A", "au", "att", "ab", "ac", "p", "ba", "ao", "an", "array", "aa", "d", "v", "ar", "auto", "ga", "ai", "as", "alpha", "pa", "na", "o", "ach", "l"], "b": ["B", "eb", "s", "ble", "bo", "br", "bl", "bi", "e", "bf", "r", "be", "z", "u", "fb", "sb", "bs", "bc", "ab", "ib", "gb", "bis", "bas", "bb", "p", "ba", "bm", "db", "rb", "nb", "g", "v", "bin", "bar", "bt", "bh", "y", "o", "l", "wb"], "ans": ["uns", "vs", "rs", "s", "can", "ats", "xs", "ann", "cas", "types", "vals", "ors", "ians", "ens", "cs", "aus", "outs", "acs", "cus", "lets", "ums", "sets", "anes", "offs", "aps", "gs", "ks", "ins", "an", "lines", "cons", "cks", "ars", "ras", "ms", "flags", "as", "ns", "orts", "ants", "ids", "ons", "ates", "ds", "ps", "vers", "ls", "ts", "ANS", "ints", "amps", "anc", "es", "actions"]}}
{"code": "import java.util.ArrayDeque;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Queue;\\nimport java.util.Scanner;\\n \\n\\n\\npublic class Main {\\n\tstatic int a1[]= {0,-1,0,1};\\n\tstatic int b1[]= {-1,0,1,0};\\n\tprivate static         Scanner sc = new Scanner(System.in);\\n\t//result = Math.pow(num1, num3)\\n\t//StringBuffer str = new StringBuffer(hoge1);\\n\t//String hoge2 = str.reverse().toString();\\n\t//map.containsKey(A)\\n\\n\t//Map<String, Integer> map = new HashMap<String, Integer>(n);\\n\t/*for ( \u30ad\u30fc\u306e\u30c7\u30fc\u30bf\u578b key : \u30de\u30c3\u30d7\u306e\u540d\u524d.keySet() ) {\\n\t\t\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u578b data = \u30de\u30c3\u30d7\u306e\u540d\u524d.get( key );\\n\t\t\\n\t\t// key\u3084data\u3092\u4f7f\u3063\u305f\u51e6\u7406;\\n\t}*/\\n\t//int i = Integer.parseInt(s);\\n\t//Queue<String> qq=new ArrayDeque<>(); //add,poll,peek\\n\t//Deque<String> qq=new ArrayDeque<>();//push,pop,peek\\n\t//ArrayList<String> cc = new ArrayList<>(n);\\n\t//Collections.sort(list);\\n\t//Array.sort(list);   cc.contains(tmp)\\n\t//Arrays.asList(c).contains(\"a\")\\n\t//list.set(1,\"walk\");//1 1 2 3 5\\n\tstatic int K,N;\\n\tstatic long mod =1000000007;\\n\tpublic static void main(String[] args) {\\n\t\t\tint N=sc.nextInt();\\n\t\t\tint D=sc.nextInt();\\n\t\t\t\\n\t\t\tint v[][]=new int[N][D]; \\n\t\t\t\\n\t\t\tfor(int i=0;i<N;i++) {\\n\t\t\t\tfor(int b=0;b<D;b++) {\\n\t\t\t\t\tv[i][b]=sc.nextInt();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tint sum;\\n\t\t\tint ans=0;\\n\t\t\tfor(int i=0;i<N;i++) {\\n\t\t\t\tfor(int b=i+1;b<N;b++) {\\n\t\t\t\t\t\\n\t\t\t\t\tsum=0;\\n\t\t\t\t\tfor(int a=0;a<D;a++) {\\n\t\t\t\t\t\tsum+=(v[i][a]-v[b][a])*(v[i][a]-v[b][a]);\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t\tfor(int t=1;t<=sum;t++) {\\n\t\t\t\t\t\tif(t*t==sum) {\\n\t\t\t\t\t\t\tans++;\\n\t\t\t\t\t\t\tbreak;\\n\t\t\t\t\t\t}else if(t*t>sum)break;\\n\t\t\t\t\t}\\n\t\t\t\t\t//p(i+\"    \"+b+\"   \"+sum);\\n\t\t\t\t\t\\n\t\t\t\t}\\n\t\t\t}p(ans);\\n\t}\\n\\n\t\\n\t//static ArrayList<Integer> cc = new ArrayList<>(10001);\\n\t\\n\tstatic void p(String ans) {System.out.println(ans);};\\n\tstatic void p(int ans) {System.out.println(ans);};\\n\tstatic void p() {System.out.println();};\\n\tstatic void p(long ans) {System.out.println(ans);};\\n\tstatic void p(double ans) {System.out.println(ans);};\\n\tpublic static int gcd(int a, int b) {\\n        return b == 0 ? a: gcd(b, a % b);\\n\t}\\n\tstatic String nextPermutation(String s) {\\n\t\tArrayList<Character> list=new ArrayList<>();\\n\t\tfor(int i=0;i<s.length();i++) {\\n\t\t\tlist.add(s.charAt(i));\\n\t\t}\\n\t\tint pivotPos=-1;\\n\t\tchar pivot=0;\\n\t\tfor(int i=list.size()-2;i>=0;i--) {\\n\t\t\tif(list.get(i)<list.get(i+1)) {\\n\t\t\t\tpivotPos=i;\\n\t\t\t\tpivot=list.get(i);\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(pivotPos==-1&&pivot==0) {\\n\t\t\treturn \"Final\";\\n\t\t}\\n\t\tint L=pivotPos+1,R=list.size()-1;\\n\t\t\\n\t\t\\n\t\t\\n\t\tint minPos=-1;\\n\t\tchar min =Character.MAX_VALUE;\\n\t\t\\n\t\tfor(int i=R;i>=L;i--) {\\n\t\t\tif(pivot<list.get(i)) {\\n\t\t\t\tif(list.get(i)<min) {\\n\t\t\t\t\tmin=list.get(i);\\n\t\t\t\t\tminPos=i;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tCollections.swap(list, pivotPos, minPos);\\n\t\tCollections.sort(list.subList(L, R+1));\\n\t\t\\n\t\t\\n\t\tStringBuilder sb=new StringBuilder();\\n\t\tfor(int i=0;i<list.size();i++) {\\n\t\t\tsb.append(list.get(i));\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n}\\n\t\\n", "target": "59", "substitutes": {"a1": ["A1", "A3", "b2", " a0", "b3", " a3", "a3", " a2", "a0", "A2", "A0", "a2", "b0"], "b1": ["B2", "b2", " b2", "l1", "B0", "l2", "B1", "l0", " b0", "b0"], "sc": [" Sc", "ss", "cr", "rc", "cl", "bc", "ec", "cs", "esc", "Sc", "se", "ch", "pc", "isc", "uc", "sys", " SC", "c", "mp", "SC", "sw", "gc", "sv", "dc", "scan", "tr", "sp", "anc"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint num = scan.nextInt();\\n\t\tList<Integer> list = new ArrayList<Integer>();\\n\t\tStringBuffer sb = new StringBuffer();\\n\\n\t\tfor(int i=0; i<num; i++){\\n\t\t\tlist.add(scan.nextInt());\\n\t\t}\\n\t\tCollections.reverse(list);\\n\t\t/*for(int i: list){\\n\t\t\tsb.append(i + \" \");\\n\t\t}*/\\n\t\tfor(int i=0; i<num; i++){\\n\t\t\tif((i+1)==num){\\n\t\t\t\tsb.append(list.get(i));\\n\t\t\t}\\n\t\t\telse{\\n\t\t\t\tsb.append(list.get(i) + \" \");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sb);\\n\t}\\n}", "target": "79", "substitutes": {"scan": ["store", "out", "san", "m", "check", "con", "system", "can", "skip", "see", "Scan", "ann", "pass", "link", "in", "r", "by", "walk", "re", "scroll", "sort", "sm", "row", "read", "sync", "connect", "se", "info", "ch", "sys", "reach", "sc", "ner", "report", "query", "sur", "gen", "send", "gate", "parse", "an", "gc", "get", "sin", "scale", "sv", "search", "trans", "n", "sp", "ser", "conv", "find", "build"], "num": ["mult", "um", "m", "nt", "con", "mon", "multi", "Num", "number", "net", "none", "om", "NUM", "mn", "perm", "nam", "result", "zero", "index", "proc", "nm", "en", "np", "len", "su", "eng", "count", "cum", "nb", "cal", "dim", "nu", "total", "coord", "block", "un", "n", "na", "non", "to", "conv", "alph", "max", "nom", "sum", "man", "den"], "list": ["range", "check", "see", "show", "sequence", "cache", "number", "sort", "pair", "dict", "set", "pool", "history", "detail", "sync", "filter", "lat", "pl", "L", "group", "ll", "index", "pre", "LIST", "li", "load", "ist", "level", "match", "print", "log", "form", "local", "array", "get", "st", "add", "all", "batch", "left", "rm", "lv", "chain", "tree", "map", "now", "table", "dl", "def", "collection", "ls", "valid", "old", "source", "l", "lists", "listed"], "sb": ["bps", "gob", "b", "sbm", "eb", "ob", "bsp", "sa", "stab", "ub", "sth", "pb", "bf", "fb", "bj", "bs", "rob", "lp", "zb", "abb", "kb", "gb", "cb", "ib", "lb", "bis", "bg", "bb", "bd", "xb", "rb", "sg", "nb", "ssl", "bp", "mb", "sv", "bt", "sf", "obb", "sp", "bh", "ebin", "zeb", "SB", "orb", "wb", "sq", "erb"], "i": ["ji", "hi", "q", "in", "ci", "mi", "php", "li", "iq", "my", "ij", "ui", "ini", "ai", "err", "ix", "m", "multi", "e", "bi", "ik", "iy", "json", "ei", "c", "print", "pi", "cli", "zi", "chain", "id", "y", "uri", "im", "l", "ity", "ki", "ii", "ri", "init", "yi", "di", "info", "gi", "index", "si", "sql", "ti", "io", "\u0438", "ind", "to", "ip", "qi", "phi", "xi", "me", "j", "sim", "it", "iii", "I", "this", "ie", "client", "point", "iter", "g", "ic", "iu", "base", "is", "key", "x", "oi", "batch"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main{\\n\\n\tpublic static void main(String[] args) throws IOException\\n\t{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in) );\\n\t\t\\n\t\tString strS = br.readLine();\\n\t\tString strP = br.readLine();\\n\t\t\\n\t\tStringBuffer sb = new StringBuffer(strS);\\n\t\t\\n\t\tsb.append(strS);\\n\t\t\\n\t\tSystem.out.println( (sb.indexOf(strP) == -1 ? \"No\" : \"Yes\") );\\n\t}\\n}", "target": "198", "substitutes": {"br": ["bridge", "b", "Br", "bsp", "bl", "shr", "bi", "str", "cr", "bf", "r", "dr", "kr", "bs", "bc", "buf", "cb", "gb", "ch", "pr", "bg", "bb", "bd", "ba", "bm", "hr", "db", "rb", "bp", "bro", "gr", "vr", "handle", "bt", "yr", "div", "tr", "fr", "bh", "bn", "ber", "wr", "browser", "nr", "mr", "BR"], "strS": ["arrB", "intN", "arrN", " strB", "strC", "intP", "strSI", "strU", "synSI", "StrP", "intSI", " strN", " strSI", "StrS", "arrSI", "strB", "seqS", "intS", "StrU", "arrP", "arrS", "seqC", " strJS", " strC", "arrU", "synS", "StrB", "seqJS", "strJS", "synC", "seqSI", " strU", "synJS", "strN"], "strP": ["strE", "grS", "strPK", "strPD", "exprP", " strPK", "StrP", "StrO", "stringO", "StrE", " strO", "StrS", "exprPD", "exprS", "strO", "grPK", "stringS", "stringP", " strPD", "grP", " strE", "exprPK", "grPD", "stringE"], "sb": ["sam", "gob", "b", "eb", "BB", "s", "ob", "sk", "bsp", "sa", "stab", "CB", "pb", "bj", "bs", "RB", "dB", "lp", "zb", "kb", "abb", "gb", "ab", "cb", "lb", "bis", "ib", "bg", "bb", "ssh", "bd", "xb", "rb", "gc", "nb", "ssl", "bp", "sg", "mb", "buff", "sl", "bt", "sf", "obb", "bn", "bh", "sd", "SB", "wb", "sq", "erb"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args)throws Exception{\\n        Scanner sc=new Scanner(System.in);\\n        int a=sc.nextInt(),b=sc.nextInt(),c=sc.nextInt();\\n        if((a==b&&a!=c)||(b==c&&b!=a)||(c==a&&c!=b)){\\n            System.out.println(\"Yes\");\\n        }else{\\n            System.out.println(\"No\");\\n        }\\n    }\\n}", "target": "117", "substitutes": {"sc": ["tch", "system", "syn", "cc", "cle", "tc", "cr", "capt", "ko", "rc", "cl", "bc", "cs", "sm", "desc", "cont", "esc", "sync", "Sc", "ch", "pc", "isc", "osc", "sys", "ck", "mc", " scr", "nc", "scl", "acc", "sh", "SC", "gc", "sw", "inc", "ctx", "fc", "sv", "scope", "nl", "lc", "scan", "sp", "asc", "conv", "sch", "sec", "anc", "usc", "irc", "sq"], "a": ["aaa", "h", "m", "la", "apa", "oa", "j", "isa", "sa", "aq", "e", "i", "f", "am", "r", "u", "t", "at", "A", "au", "area", "ab", "ca", "ax", "ma", "app", "ac", "p", "acc", "ba", "ao", "ea", "aka", "ta", "an", "aa", "g", "ia", "aj", "ar", "v", "ai", "as", "alpha", "n", "pa", "na", "o", "al", "l", "ae"], "b": ["B", "h", "eb", "ob", "j", "bo", "br", "i", "bl", "bi", "e", "f", "pb", "bf", "r", "be", "sb", "u", "fb", "bs", "bc", "t", "ab", "ib", "gb", "cb", "ch", "bis", "beta", "bg", "bb", "back", "ba", "db", "rb", "nb", "g", "bp", "v", "bt", "n", "bh", "y", "o", "l", "wb", "erb"], "c": ["h", "ct", "con", "can", "cc", "e", "f", "cr", "tc", "rc", "r", "be", "z", "u", "ci", "cm", "cs", "bc", "t", "ec", "com", "cos", "cb", "ch", "ca", "cf", "cur", "cu", "ac", "mc", "cut", "d", "g", "v", "etc", "cor", "cy", "co", "chain", "ce", "dc", "lc", "n", "o", "unc", "C", "cn", "l", "cp", "vc"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport static java.lang.Math.*;\\n\\npublic class Main {\\n\\n    private static final int MOD = (int)1e9 + 7; //998244353;\\n    private static final long INF = (long)1e15;\\n\\n    public Main(FastScanner in, PrintWriter out) {\\n        int X = in.nextInt();\\n        int Y = 2 * X;\\n        boolean[] notPrime = new boolean[Y + 1];\\n        int i = 0;\\n        for (i = 2; i <= Y; i++) {\\n            if (notPrime[i]) continue;\\n            if (i >= X) break; \\n            for (int j = i; j <= Y; j += i)\\n                notPrime[j] = true;\\n        }\\n        out.println(i);\\n    }\\n\\n    private int gcd(int a, int b) {\\n        while (true) {\\n            if (b == 0) return a;\\n            int tmp = a;\\n            a = b;\\n            b = tmp % b;\\n        }\\n    }\\n\\n    private long powm(long x, long p) {\\n        long res = 1;\\n        while (p > 0) {\\n            if (p % 2 == 1)\\n                res = res * x % MOD;\\n            x = x * x % MOD;\\n            p /= 2;\\n        }\\n        return res;\\n    }\\n\\n    public static void main(String[] args) {\\n        PrintWriter out = new PrintWriter(System.out);\\n        // Scanner in = new Scanner(\\n                // new BufferedReader(new InputStreamReader(System.in)));\\n        FastScanner in = new FastScanner(System.in);\\n\\n        Main sol = new Main(in, out);\\n        out.close();\\n    }\\n}\\n\\n// Pair\\nclass Pair<T extends Comparable<? super T>, U extends Comparable<? super U>> implements Comparable<Pair<T, U>> {\\n    T a;\\n    U b;\\n    Pair() { }\\n    Pair(T a, U b) {\\n        this.a = a;\\n        this.b = b;\\n    }\\n\\n    @Override\\n    public String toString() { return \"(\"+a.toString()+\", \"+b.toString()+\")\"; }\\n\\n    @Override\\n    public int hashCode() { return Objects.hash(a, b); }\\n\\n    @Override\\n    public boolean equals(Object obj) {\\n        if(this == obj) return true;\\n        if(obj == null) return false;\\n        if(this.getClass() != obj.getClass()) return false;\\n        Pair that = (Pair) obj;\\n        if(this.a.getClass() != that.a.getClass()) return false;\\n        if(this.b.getClass() != that.b.getClass()) return false;\\n        if(!this.a.equals(that.a)) return false;\\n        if(!this.b.equals(that.b)) return false;\\n        return true;\\n    }\\n\\n    @Override\\n    public int compareTo(Pair<T, U> that) {\\n        int c = (this.a).compareTo(that.a);\\n        if(c == 0) c = (this.b).compareTo(that.b);\\n        return c;\\n    }\\n}\\n\\n\\nclass FastScanner{\\n    private InputStream stream;\\n    private byte[] buf = new byte[1024];\\n    private int curChar;\\n    private int numChars;\\n\\n    public FastScanner(InputStream stream)\\n    {\\n        this.stream = stream;\\n    }\\n\\n    int read()\\n    {\\n        if (numChars == -1)\\n            throw new InputMismatchException();\\n        if (curChar >= numChars){\\n            curChar = 0;\\n            try{\\n                numChars = stream.read(buf);\\n            } catch (IOException e) {\\n                throw new InputMismatchException();\\n            }\\n            if (numChars <= 0)\\n                return -1;\\n        }\\n        return buf[curChar++];\\n    }\\n\\n    boolean isSpaceChar(int c)\\n    {\\n        return c==' '||c=='\\n'||c=='\\r'||c=='\\t'||c==-1;\\n    }\\n\\n    boolean isEndline(int c)\\n    {\\n        return c=='\\n'||c=='\\r'||c==-1;\\n    }\\n\\n    int nextInt()\\n    {\\n        return Integer.parseInt(next());\\n    }\\n\\n    long nextLong()\\n    {\\n        return Long.parseLong(next());\\n    }\\n\\n    double nextDouble()\\n    {\\n        return Double.parseDouble(next());\\n    }\\n\\n    String next(){\\n        int c = read();\\n        while (isSpaceChar(c))\\n            c = read();\\n        StringBuilder res = new StringBuilder();\\n        do{\\n            res.appendCodePoint(c);\\n            c = read();\\n        }while(!isSpaceChar(c));\\n        return res.toString();\\n    }\\n\\n    String nextLine(){\\n        int c = read();\\n        while (isEndline(c))\\n            c = read();\\n        StringBuilder res = new StringBuilder();\\n        do{\\n            res.appendCodePoint(c);\\n            c = read();\\n        }while(!isEndline(c));\\n        return res.toString();\\n    }\\n}\\n", "target": "183", "substitutes": {"MOD": [" F", " tmp", " exponent", " MIN", " H", " log", " MAX", " LOG", " scale", " mod", " Z", " ONE", " M", " gamma", " base", " EXP", " factor", " h", " EPS", " BASE", " magnitude", " power", " floor", " exp", " MAG", " B", " beta", " multiplier", " pow", " LEVEL"]}}
{"code": "import java.util.*;\\n \\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int Num = sc.nextInt();\\n    int Dis = sc.nextInt();\\n    int[] Xa = new int[Num];\\n    int[] Ya = new int[Num];\\n    for(int i=0;i<Num;i++){\\n      Xa[i] = sc.nextInt();\\n      Ya[i] = sc.nextInt();\\n    }\\n    int R = 0;\\n    for(int k=0;k<Num;k++){\\n      if(Math.pow(Xa[k],2)+Math.pow(Ya[k],2)<=Math.pow(Dis,2))R++;\\n    }\\n    System.out.println(R);\\n  }\\n}", "target": "42", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "ss", "pb", "rc", "cl", "sb", "bc", "cs", "desc", "esc", "sync", "Sc", "ctl", "ch", "osc", "pc", "isc", "sys", "mc", "scl", "c", "nc", "sci", "SC", "gc", "sw", "inc", "ctx", "fc", "sv", "scan", "lc", "sp", "ser", "asc", "conv", "cgi", "sch", "sec", "anc", "usc", "irc", "sq"], "Num": ["um", "Mat", "Dir", "Ni", "Orig", "Note", "Number", "Ton", "Type", "Str", "NUM", "Index", "Plan", "Tu", "Mem", "Pos", "Lim", "Um", "Name", "Size", "Store", "Dim", "Now", "Fun", "Non", "All", "Net", "N", "Conf", "Total", "None", "Mu", "Den", "Unknown", "Ver", "Done", "Met", "Tex", "Gen", "Multi", "num", "Val", "Valid", "Su", "Ret", "Len", "Sum", "New", "No", "Count", "Length", "M", "Un", "Iter", " num", "Mon", "Thu", "Int"], "Dis": ["Des", "Los", "Mis", "De", "Dur", "Wi", " dis", "Est", "Disable", "Del", "Not", "El", "Decre", "Kit", "Kn", "Disk", "Miss", "Rel", "Tes", "Lu", "Hyp", "Bl", "Non", "Syn", "Ex", "Lt", "Ty", "St", "Li", "Disc", "Sy", "Pr", "Sad", "Ds", "Di", "No", "Style", "Sil", "San", "DIS", "Det", "Sel", "dis"], "Xa": ["xla", "Ka", "XA", " Xoa", "XXa", "DXdata", "Xdata", "XXna", "Pdata", "XXla", "Koa", "IXfa", "PA", "DXA", "Xna", "Kba", " Xna", " Xla", "Xla", "xa", " Xfa", "IXba", "xA", "xna", "Pla", "DXla", "IXoa", "XXA", "Xba", " Xdata", " XA", "Kfa", "IXa", "DXa", "Xoa", "Pa", "Xfa", " Xba"], "Ya": ["Xi", " Ywa", "Za", "Xma", "Yca", "Xea", "Taa", "Yaa", "Qaa", "ysa", "Tsa", "ya", "Ysa", "Yma", "Xca", "yma", "Qea", "Qa", "Zsa", "Xwa", "Xsa", "Zi", " Yi", "Yi", "Ywa", "Qsa", "yca", "Xaa", "Yea", " Ysa", "Zwa", " Yca", "Ta", "Tea", " Yma"], "i": ["ii", "phi", "m", "gu", "xi", "j", "sim", "multi", "ri", "fi", "it", "bi", "init", "ji", "hi", "fire", "q", "in", "u", "ci", "di", "I", "mi", "ie", "info", "gi", "index", "list", "li", "ei", "si", "print", "inner", "pi", "ex", "iter", "ti", "a", "my", "io", "cli", "zi", "ui", "iri", "ini", "ai", "ij", "us", "chain", "iu", "n", "ind", "ix", "ip", "y", "o", "is", "uri", "x", "im", "ori", "batch", "ami", "qi"], "R": ["RO", "B", "E", "PR", "P", "COR", "GR", "RL", "MAX", "IOR", "RM", "Rs", "r", "NR", "Counter", "RA", "CR", "D", "Right", "RF", "W", "Rank", "RE", "V", "RAM", "RS", "OR", "JR", "N", "T", "RGB", "MR", "K", "RES", "Reader", "RG", "RR", "DR", "ER", "TR", "SR", "Res", "M", "Range", "Row", "C", "KR", "BR", " r"], "k": ["ask", "mk", "unk", "m", "j", "kar", "sk", "dk", "ke", "ik", "ko", "kn", "kt", "kr", "kit", "km", "wk", "ikk", "kh", "kind", "ak", "kick", "uk", "kj", "ck", "kid", "kl", "ka", "ks", "kat", "w", "g", "v", "K", "ijk", "kk", "kan", "kw", "ark", "tk", "isk", "work", "y", "alk", "key", "x", "ek", "ku", "ki"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String[] $){\\n\t\tScanner s=new Scanner(System.in);\\n\t\tint n=s.nextInt();\\n\t\tlong r=0;\\n\t\tint[] b=new int[n];\\n\t\tArrays.fill(b,100000);\\n\t\tfor(int i=1;i<n;++i){\\n\t\t\tint a=s.nextInt();\\n\t\t\tb[i-1]=Math.min(b[i-1],a);\\n\t\t\tb[i]=Math.min(b[i],a);\\n\t\t}\\n\t\tSystem.out.println(Arrays.stream(b).sum());\\n\t}\\n}\\n", "target": "240", "substitutes": {"s": ["sam", "rs", "h", "ats", "sa", "xs", "fs", "ss", "in", "S", "sb", "gets", "abs", "cs", "sm", "se", "so", "opens", "qs", "sys", "sc", "gs", "ins", "sw", "less", "sv", "ms", "ws", "sl", "search", "as", "ns", "sf", "sts", "ds", "js", "conv", "ts", "ses", "ls", "is", "l", "sq"], "n": ["ng", "m", "j", "nn", "net", "t", "k", "ne", "mn", "on", "ni", "nm", "en", "len", "np", "gn", "c", "nc", "p", "N", "count", "nb", "g", "no", "nu", "v", " N", "ns", "num", "nl", "length", "sn", "nw", "na", "o", "x", "size", "l", "nt"], "r": ["rd", "rs", "rate", "m", "e", "it", "error", "q", "rc", "rw", "t", "nr", "k", "counter", "p", "c", "w", "g", "sr", "d", "rank", "res", "ar", "rt", "err", "R", "l", "mr"], "b": ["B", "out", "eb", "ob", "binary", "j", "bo", "br", "bi", "f", "sb", "be", "body", "fb", "bs", "bc", "ab", "ib", "gb", "cb", "emb", "bis", "beta", "bas", "bb", "back", "bd", "ba", "db", "rb", "nb", "buff", "v", "mb", "bar", "bt", "base", "bound", "y", "reb", "batch", "wb"], "i": ["ii", "phi", "m", "xi", "me", "j", "multi", "sim", "ri", "fi", "init", "bi", "it", "f", "ji", "hi", "q", "u", "ci", "set", "di", "I", "mi", "ie", "info", "go", "gi", "index", "li", "ei", "si", "pi", "ti", "g", "v", "zi", "ui", "all", "ini", "ai", "ic", "us", "chain", "iu", "ix", "id", "ip", "y", "o", "is", "uri", "x", "im", "batch", "ami", "qi"], "a": ["m", "sta", "la", "apa", "oa", "sa", "da", "ya", "z", "at", "t", "A", "au", "area", "ca", "ma", "ac", "p", "ba", "si", "ea", "xa", "c", "ta", "le", "data", "aa", "ia", "aj", "v", "ga", "eta", "as", "alpha", "pa", "na", "val", "va", "o", "ae", "fa"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\tboolean b = false;\\n\t\tfor (int i = 0; i < s.length(); i++) {\\n\t\t\tif ((s.substring(i) + s.substring(0, i)).equals(t)) {\\n\t\t\t\tb = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif (b) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}\\n", "target": "220", "substitutes": {"sc": ["cc", "cle", "tc", "cr", "ss", "rc", "cl", "bc", "cs", "desc", "ec", "esc", "sync", "Sc", "exp", "ch", "pc", "osc", "isc", "exec", "sys", "proc", "mc", "scl", "c", "nc", "sci", "SC", "gc", "sv", "nl", "scan", "lc", "sp", "sel", "asc", "sch", "anc", "sec", "usc", "sq"], "sb": ["eb", "ob", "sa", "pb", "ss", "bf", "bs", "bc", "sm", "cb", "gb", "ib", "bb", "si", "sh", " SB", "db", "sw", "sg", "bp", "st", "buff", "sv", "bt", "sf", "sp", "SB", "sq", "Bs"], "s": ["sam", "rs", "m", "string", "its", "ats", "sa", "str", "xs", "ss", "S", "bs", "cs", "os", "se", "sys", "gs", "p", "c", "si", "sql", "sw", "ys", "sg", "g", "st", "a", "sv", "ms", "sl", "ns", "ess", "sts", "sf", "n", "sp", "ps", "js", "sd", "ls", "ts", "is", "x", "source", "l", "sq"], "t": ["term", "m", "ct", "it", "test", "f", "str", "at", "wt", "th", "pt", "p", "title", "c", "ot", "template", "ta", "txt", "st", "mt", "T", "type", "tm", "n", "tk", "tr", "lt", "ts", "o", "tt", "typ", "te", "rt", "tf", "gt"], "i": ["ii", "phi", "m", "gu", "xi", "j", "multi", "ri", "it", "bi", "init", "hi", "q", "in", "ims", "z", "u", "yi", "ci", "di", "I", "mi", "gi", "index", "li", "ei", "si", "ski", "pi", "ex", "iter", "ti", "v", "a", "io", "cli", "zi", "ui", "ini", "ic", "ai", "us", "l", "iu", "n", "ix", "ind", "id", "ip", "y", "o", "is", "key", "x", "im", "ori", "oi", "batch", "qi", "ki"], "b": ["B", "out", "eb", "ob", "j", "bo", "br", "bl", "f", "bf", "bool", "be", "u", "fb", "bs", "bc", "blue", "ab", "cb", "gb", "bg", "bb", "bd", "p", "c", "db", "rb", "obj", "nb", "g", "d", "bp", "a", "mb", "bt", "n", "bound", "y", "l", "wb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString line = sc.nextLine();\\n\t\tString[] split = line.split(\" \");\\n\t\tint a = Integer.parseInt(split[0]);\\n\t\tint b = Integer.parseInt(split[1]);\\n\t\tint c = Integer.parseInt(split[2]);\\n\t\tString output = null;\\n\t\tif (a < b && b < c) {\\n\t\t\toutput = \"Yes\";\\n\t\t} else {\\n\t\t\toutput = \"No\";\\n\t\t}\\n\t\tSystem.out.println(output);\\n\t\tsc.close();\\n\t}\\n}", "target": "168", "substitutes": {"sc": ["system", "cc", "cle", "tc", "cr", "capt", "rc", "cl", "bc", "cs", "sm", "desc", "esc", "sync", "Sc", "isc", "pc", "osc", "ch", "sys", "ck", "mc", "scl", "nc", "sh", "sub", "SC", "gc", "fc", "arc", "sv", "nl", "lc", "scan", "RC", "sp", "sel", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "line": ["store", "message", "out", "string", "page", "lin", "str", "command", "liner", "link", "in", "file", "ln", "row", "detail", "frame", "node", "se", "result", "log", "date", "entry", "le", "data", "lines", "ine", "side", "input", "eline", "block", "raw", "cell", "nl", "text", "inline", "Line", "word", "LINE", "source", "l"], "split": ["play", "replace", "multi", "its", "stab", "it", "edit", "quote", "wrap", "sb", "by", "span", "shell", "pair", "parts", "sort", "set", "format", "separ", "pos", "sync", "diff", "detail", "connect", "se", "lat", "stack", "group", "pieces", "share", "tile", "slice", "list", "part", "parse", "iter", "Split", "cut", "lex", "late", "single", "sit", "sl", "pack", "piece", "join", "sp", "fail", "ip", "ls", "route", "l", "tab", "find", "spl"], "a": ["act", "aaa", "aff", "sta", "la", "apa", "oa", "isa", "sa", "aq", "ama", "da", "am", "era", "A", "au", "area", "ab", "ca", "ma", "ao", "ba", "ea", "aka", "ta", "aa", "ia", "aj", "ata", "ga", "ai", "alpha", "va", "ach", "al", "ae", "fa"], "b": ["B", "eb", "ob", "j", "i", "ub", "bi", "f", "bf", "r", "be", "sb", "u", "fb", "by", "bc", "bs", "ab", "ib", "cb", "gb", "lb", "bb", "back", "ba", "db", "rb", "nb", "d", "v", "bp", "bt", "n", "y", "x", "l"], "c": ["m", "ct", "cc", "e", "f", "cache", "tc", "cr", "z", "u", "cv", "ci", "ec", "bc", "cs", "t", "cd", "com", "cm", "content", "cf", "cu", "uc", "ac", "mc", "fc", "d", "v", "etc", "co", "chain", "dc", "ce", "div", "n", "lc", "cond", "unc", "C", "cp"], "output": ["label", "out", "message", "console", "string", "binary", "category", "reason", "quiet", "echo", "value", "Output", "put", "bool", "web", "format", "exit", "detail", "human", "filter", "json", "network", "pretty", "reported", "content", "result", "client", "log", "report", "null", "print", "comment", "response", "write", "data", "cut", "summary", "render", "config", "input", "debug", "component", "column", "hidden", "display", "update", "text", "object", "four", "default", "NULL", "batch", "PUT", "language"]}}
{"code": "import java.util.Scanner;\\n\\n/**\\n * B - Golden Coins\\n */\\npublic class Main {\\n  @SuppressWarnings(\"resource\")\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int val = 0;\\n    if (N != 0) {\\n      val = (N / 500) * 1000;\\n      val += (N % 500) / 5 * 5;\\n    }\\n\\n    System.out.println(val);\\n  }\\n}", "target": "180", "substitutes": {"sc": ["system", "cc", "cle", "tc", "ss", "cr", "rc", "cl", "bc", "cs", "ec", "ok", "esc", "sync", "Sc", "ch", "pc", "osc", "isc", "uc", "sys", "ck", "mc", "acc", "c", "nc", "sh", "scl", "SC", "gc", "inc", "src", "sv", "nl", "scan", "lc", "sp", "sel", "ser", "asc", "sch", "sec", "anc", "usc", "syn", "sq"], "N": ["NH", "NEW", "F", "UN", "NN", "Ns", "NI", "Note", "Num", "S", "NR", "SN", "G", "NL", "AN", "NS", "I", "NV", "D", "NO", "CNN", "GN", "NUM", "ANY", "NC", "NB", "L", "NOR", "V", "TN", "NM", "NG", "H", "NT", "VAL", "NA", "K", "NPR", "J", "Q", "NE", "n", "M", "R", "C", "Z"], "val": ["aval", " v", "sol", "value", " eval", "test", "ul", "it", "pal", "resp", "vals", "eval", "el", "lib", "rel", "dec", "dev", "pl", " VAL", " value", "cho", "pt", " Val", "index", "Value", "vol", "len", "p", "li", "hz", "kl", "crit", "count", "VAL", "cal", "v", "all", "num", "Val", "sl", " ret", "update", "rol", "n", "alt", "div", "sel", "ind", "pret", "mean", "elt", "vt", "valid", "x", "ret", "stat", "al", "l", "pol", " aval"]}}
