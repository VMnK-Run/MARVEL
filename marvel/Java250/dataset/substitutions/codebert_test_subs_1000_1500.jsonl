{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tString[] w = new String[n];\\n\t\tString msg = \"Yes\";\\n\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tw[i] = sc.next();\\n\t\t}\\n\\n\t\tfor (int i = 1; i < n; i++) {\\n\t\t\tif (!(w[i-1].substring(w[i-1].length() - 1, w[i-1].length()).equals(w[i].substring(0, 1)))) {\\n\t\t\t\tmsg = \"No\";\\n\t\t\t\tbreak;\\n\t\t\t}\\n\\n\t\t\tfor (int j = 0; j < i; j++) {\\n\t\t\t\tif (w[j].equals(w[i])) {\\n\t\t\t\t\tmsg = \"No\";\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(msg);\\n\\n\t}\\n}", "target": "70", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "ch", "server", "ss", " SC", "asc", "sh", "search", "Sc", "SC", "screen", "cs", "bc", "sw", "src", "cor", "cer", "c", " scr", "sp", "st", "sq", "uc", "sr", "ca", "sem", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "squ", "ec", "esc", "ctx"], "n": ["nn", "all", "nc", "pi", "nt", "count", "p", "u", "num", "N", "ln", "v", "l", "a", "sn", "init", "z", "h", "len", "f", "s", "c", "m", "x", "e", "o", "d", "ns", "b", "network", "nb", "net", "k", "no", "in", "number", "y", "en", "t", "sync"], "w": ["aw", "wp", "west", "www", "p", "wr", "now", "wo", "u", "wal", "wei", "v", "fw", "l", "ws", "wd", "win", "z", "sw", "iw", "s", "way", "wx", "c", "words", "password", "m", "x", "t", "rw", "kw", "string", "ww", "wt", "d", "tw", "nw", "ow", "widget", "g", "hw", "ew", "wa", "work", "k", "wall", "word", "y", "wig", "wb", "we", "web", "W", "wl", "wh"], "msg": ["ogi", "status", "module", "unit", "live", "go", "kg", "message", "title", "html", "mb", "u", "ko", "jump", "v", "Msg", "reason", "debug", "cmd", "info", "sim", "get", "ok", "cm", "gen", "warning", "comm", "ms", "wx", "arg", "m", "pkg", "og", "agg", "str", "text", "gui", "cfg", "code", "md", "g", "b", "err", "fg", "ug", "gr", "bg", "generic", "mn", "lang", "log", "y", "word", "sg", "doc", "game", "mag", "error", "out"], "i": ["bi", "hi", "api", "pi", "ori", "jj", "ni", "iu", "p", "it", "u", "id", "qi", "xi", "ji", "v", "jp", "si", "ix", "a", "l", "is", "ij", "ri", "diff", "r", "start", "io", "init", "info", "z", "f", "ci", "ui", "ini", "c", "index", "eni", "phi", "x", "uri", "m", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "zi", "isi", "li", "cli", "oi", "k", "yi", "in", "y", "ti", "fi"], "j": ["bi", "pi", "jj", "ni", "p", "it", "u", "J", "qi", "ji", "xi", "v", "jp", "si", "ix", "l", "a", "ij", "ik", "r", "z", "h", "f", "ion", "ci", "ui", "c", "m", "x", "e", "di", "jo", "ja", "uj", "ie", "q", "o", "d", "ii", "b", "li", "js", "k", "y", "jl", "iq", "t", "aj"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc =new Scanner(System.in);\\n    int n=sc.nextInt();\\n    int N[] =new int[n];\\n    int x=0;\\n    for(int i=0;i<n;i++){\\n      N[i]=sc.nextInt();}\\n    for(int j=1;j<n-1;j++){\\n      if((N[j-1]<N[j])&&(N[j]<N[j+1])){x=x+1;}\\n      else if((N[j-1]>N[j])&&(N[j]>N[j+1])){x=x+1;}}\\n    System.out.println(x);\\n  }\\n}", "target": "96", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "ser", "ch", "server", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "cor", "lc", "ci", "cer", "c", "sp", "system", "sq", "uc", "g", "ca", "cle", "sem", "se", "ner", " Sc", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus"], "n": ["nn", "nc", "nt", "ni", "p", "size", "u", "num", "v", "l", "z", "h", "len", "ny", "f", "s", "c", "ne", "m", "w", "e", "q", "o", "d", "ns", "b", "network", "nb", "net", "k", "in", "no", "y", "en", "t"], "N": ["Order", "MN", "No", "C", "M", "Size", "Location", "None", "NN", "Sign", "GN", "Local", "Ni", "NC", "Context", "North", "K", "NB", "ND", "Index", "NV", "Z", "W", "Part", "J", "U", "Number", "Code", "P", "Na", "You", "Max", "CNN", "NT", "H", "O", "NS", "G", "Len", "S", "SN", "Count", "Node", "Zone", "F", "Wh", "T", "I", "Not", "L", "B", "V", "KN", "Ns", "NI", "X", "Num", "NA", "Sync", "Path", "Y", "Array", "Network", "Q", "Intern", "Sn", "R", "ns", "Norm", "D", "Name"], "x": ["dx", "p", "xp", "xa", "sex", "id", "na", "num", "px", "xml", "xi", "xf", "ex", "v", "xc", "xes", "ix", "l", "X", "ng", "exp", "cross", "z", "h", "f", "width", "lex", "c", "XX", "ax", "key", "index", "m", "w", "check", "wx", "e", "ww", "xxx", "max", "q", "code", "d", "g", "abc", "rex", "tx", "pos", "k", "work", "xs", "step", "xb", "xy", "y", "rx", "fix", "xt", "fx", "t", "ctx", "xe", "xx"], "i": ["bi", "hi", "im", "pi", "ni", "iu", "p", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "ri", "init", "io", "z", "info", "f", "ci", "ui", "ini", "key", "index", "phi", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "li", "k", "in", "y", "ind", "fi"], "j": ["dj", "jj", "jc", "p", "oj", "u", "J", "next", "bj", "ji", "ch", "v", "jp", "l", "el", "ij", "fr", "part", "z", "h", "end", "aj", "f", "last", "c", "key", "jan", "m", "e", "jet", "ja", "uj", "q", "o", "jit", "d", "g", "ii", "b", "dy", "li", "js", "k", "kj", "obj", "je", "jam", "job", "y", "jl", "section", "ind", "jo"]}}
{"code": "import java.io.*;\\n \\nclass Main{ \\npublic static void main(String[] args)throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String[ ] str_div = br.readLine().split(\" \");\\n\\n        int w = Integer.parseInt(str_div[0]);\\n        int h = Integer.parseInt(str_div[1]);\\n        int x = Integer.parseInt(str_div[2]);\\n        int y = Integer.parseInt(str_div[3]);\\n        int r = Integer.parseInt(str_div[4]);\\n\\n\\n\\n        if((x - r >= 0) && (x + r <= w) && (y - r >= 0) && (y + r <= h))\\n        System.out.println(\"Yes\");\\n        else\\n        System.out.println(\"No\");\\n }\\n}\\n", "target": "171", "substitutes": {"br": ["bl", "div", "ber", "wr", "hr", "rb", "browser", "tr", "arr", "jar", "STR", "cb", "fr", "yr", "io", "iter", "stream", "bc", "bridge", "src", "er", "dr", "handle", "BR", "img", "bro", "str", "HR", "sp", "Br", "sr", "b", "result", "err", "body", "gr", "reader", "buf", "ocr", "cr", "bar", "out", "Reader"], "str_div": ["strxdec", "str8inner", "strxdiv", "str_dom", "Str_form", "Str_diff", "STRxdiv", "Str_div", "str8dec", "str_diff", "STR_div", "str2comb", "str_form", "STR_inner", "str_data", "div_dec", "Str_orig", "div_dim", "gr_diff", "str8dc", "string_dom", "string_str", "str3dec", "str2dec", "STRxdec", "str2form", "divkdim", "strxdc", "str3orig", "string_div", "div_div", "string_header", "str_inner", "str_division", "STRxdc", "strkdec", "str3diff", "STR_dec", "STR_dc", "str_dc", "divkdiv", "str2diff", "str_header", "divkdiff", "str2orig", "Str_dec", "str2div", "str_dec", "gr_data", "STRxinner", "strkdiv", "gr_division", "strkdiff", "str_comb", "str_str", "divkdec", "str2dim", "str8div", "gr_div", "strxinner", "Str_comb", "str_orig", "strkdim", "str_dim", "div_diff", "str3div"], "w": ["p", "u", "v", "i", "sh", "l", "a", "z", "win", "sw", "f", "width", "s", "c", "wx", "m", "e", "ww", "max", "q", "o", "d", "hw", "n", "b", "ew", "wa", "we", "W", "t"], "h": ["p", "u", "hr", "gh", "v", "i", "sh", "l", "rh", "ph", "z", "ha", "end", "f", "ah", "c", "m", "e", "q", "o", "d", "n", "g", "b", "j", "k", "H", "t"], "x": ["on", "p", "u", "xi", "ex", "v", "i", "ix", "l", "a", "z", "f", "c", "ax", "index", "m", "e", "ww", "xx", "q", "o", "d", "n", "b", "tx", "k", "no", "in", "t", "X"], "y": ["py", "p", "gy", "u", "sy", "xi", "v", "i", "vy", "l", "Y", "z", "ny", "f", "ay", "c", "m", "ty", "e", "ry", "o", "q", "d", "n", "b", "dy", "yy", "j", "ye", "k", "ey", "cy", "t"], "r": ["rar", "ir", "p", "u", "hr", "rb", "rs", "pr", "v", "i", "ar", "l", "lr", "fr", "ur", "yr", "right", "rh", "z", "nr", "attr", "er", "f", "mr", "dr", "c", "m", "or", "e", "ra", "kr", "rg", "ry", "o", "q", "R", "d", "n", "rf", "b", "err", "sr", "rr", "k", "rd", "rc", "rt", "range", "t", "re"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        String s = scanner.nextLine();\\n\\n        String[] cycle = {\"Sunny\",\"Cloudy\",\"Rainy\"};\\n        int num = Arrays.asList(cycle).indexOf(s);\\n\\n        System.out.println(cycle[num >= 2? 0: num+1]);\\n    }\\n}", "target": "60", "substitutes": {"scanner": [" scaner", "Scaninner", "anner", "analyner", " scanrer", " scanny", "scanter", "annter", "Scanny", "scanrer", "analyinner", "grer", "anninner", "Scanrer", "scaner", "gny", "analyter", "Scanter", "ger", "Scaner", "annner", "scanny", "analyer", "gner", "Scanner", "scaninner"], "s": ["S", "service", "ss", "v", "si", "i", "strings", "line", "l", "series", "sv", "es", "ls", "ws", "r", "is", "f", "south", "sl", "c", "os", "your", "string", "ses", "o", "n", "ns", "gs", "g", "services", "b", "se", "su", "js", "in", "y", "spec", "sc", "out", "sync"], "cycle": ["pattern", "cycl", "module", "spin", "chain", "scope", "age", "patch", "id", "next", "path", "line", "page", "sort", "name", "color", "entry", "stage", "header", "row", "lc", "letter", "c", "cycles", "model", "index", "category", "string", "frame", "code", "phase", "rule", "cle", "year", "loop", "day", "time", "clock", "step", "type", "word", "shape", "tick", "range", "section", "cache", "cy", "sync"], "num": ["um", "div", "offset", "nc", "unit", "Num", "nt", "ni", "id", "nu", "hom", "multi", "span", "nam", "i", "uni", "con", "nm", "valid", "init", " index", "info", "len", "orig", "uu", "loc", "fn", "sum", "index", "mu", "umi", "uri", "coord", "col", "node", "ul", "nom", "n", "dom", "dim", "loop", "nb", "obj", "pos", "bin", "tri", "number", "inc", "off", "NUM", "iq"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String[] args){\\n        Scanner scan = new Scanner(System.in);\\n\\n        // input\\n        int num = scan.nextInt();\\n        int min = scan.nextInt();\\n        int count = 1;\\n        for(int i = 1; i < num; i++){\\n            int temp = scan.nextInt();\\n            if(temp >= min){\\n                count++;\\n                min = temp;\\n            }\\n        }\\n\\n        // answer\\n        System.out.println(count);\\n\\n    }\\n}", "target": "7", "substitutes": {"scan": ["nn", " Scan", "walk", "na", "gram", "ln", "v", "run", "search", "l", "win", "an", "x", "config", " scanner", "n", " parse", "sys", "se", "reader", "parse", "Scan", "bin", "ans", "parser", "sc", "can", "ann"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner (System.in);\\n\t\tlong a=sc.nextLong();\\n\t\tlong b=sc.nextLong();\\n\t\tlong max;\\n\t\tif (a>=b)max=a;\\n\t\telse max=b;\\n\t\tlong ans;\\n\t\tfor(ans=max;ans<=a*b;ans+=max) {\\n\t\t\tif (ans%a==0&&ans%b==0)break;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "67", "substitutes": {"sc": ["cl", "sche", "cat", "sci", "nc", "enc", "pc", "na", "ser", "com", "ch", "tc", "ss", "cur", "sub", "asc", "Sc", "SC", "cs", "bc", "sw", "src", "cor", "lc", "ci", "cer", "c", "sp", "sq", "uc", "soc", "sr", "ca", "sem", "se", "ner", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "esc", "ctx", "cus", "sync"], "a": ["age", "p", "ia", "na", "ad", "ba", "i", "aa", "ao", "A", "ha", "app", "oa", "pa", "f", "au", "c", "ga", "ax", "m", "an", "sa", "ae", "ea", "ai", "alpha", "d", "af", "n", "ca", "ac", "aaa", "ama", "fa", "as", "la", "area", "ab", "da", "asa", "ma", "am", "va", "aj"], "b": ["fb", "bi", "p", "mb", "pb", "abb", "rb", "ad", "v", "i", "ba", "l", "db", "cb", "ib", "r", "bf", "be", "aa", "h", "lb", "bs", "f", "bas", "length", "eb", "c", "x", "base", "e", "o", "d", "n", "g", "B", "body", "nb", "j", "sb", "bb", "bot", "bd", "bin", "y", "wb", "ab", "emb", "ob", "bp"], "max": ["ace", "all", "conf", "parent", "cat", "none", "count", "p", "now", "size", "null", "id", "next", "ad", "span", "auto", "ase", "old", "then", "ask", "can", "end", "first", "last", "best", "c", "az", "ax", "cas", "index", "an", "x", "base", "active", "min", "alpha", "rest", "except", "Max", "rank", "n", "ca", "anc", "work", "no", "parse", "scale", "mod", "step", "from", "as", "MAX", "shape", "range", "cache", "act", "array", "default"], "ans": ["ace", "ana", "ands", "ars", "blocks", "anas", "aned", "vers", "features", "anned", "na", "ads", "ins", "nan", "aus", "ks", "span", "anon", "lan", " spans", "aces", "ss", "asts", "actions", "es", "ions", "reads", "ls", "cs", "results", "pa", "lines", "rows", "os", "nas", "cas", "s", "ds", "chan", "ants", "an", "x", "ops", "ANS", "ents", "ns", "ca", "ras", "ats", "anc", "xs", "scan", "no", "ids", "outs", "as", "ons", "parser", " scans", "amps", "ays", "ant", "can", "ann"]}}
{"code": "import java.io.*;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint t=1;//sc.nextInt();\\n\t\twhile(t-->0) {\\n\t\t\tint n=sc.nextInt();\\n\t\t\tlong ans=0;\\n\t\t\tint max=Integer.MIN_VALUE;\\n\t\t\tfor(int i=0;i<n;i++) {\\n\t\t\t\tint val=sc.nextInt();\\n\t\t\t\tmax=Math.max(val, max);\\n\t\t\t\tans+=max-val;\\n\t\t\t}\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\\n\t}\\n\\n}\\n/*class Reader{\\n\tBufferedReader reader;\\n\tReader(){\\n\t\treader=new BufferedReader(new InputStreamReader(System.in));\\n\t}\\n\tint nextInt() throws IOException{\\n\t\tString in=reader.readLine().trim();\\n\t\treturn Integer.parseInt(in);\\n\t}\\n\tlong nextLong() throws IOException{\\n\t\tString in=reader.readLine().trim();\\n\t\treturn Long.parseLong(in);\\n\t}\\n\tString next() throws IOException{\\n\t\treturn reader.readLine().trim();\\n\t}\\n\tString[] stringArray() throws IOException{\\n\t\treturn reader.readLine().trim().split(\"\\\\s+\");\\n\t}\\n\tint[] intArray() throws IOException{\\n\t\tString[] inp=this.stringArray();\\n\t\tint[] arr=new int[inp.length];\\n\t\tint i=0;\\n\t\tfor(String s:inp) {\\n\t\t\tarr[i++]=Integer.parseInt(s);\\n\t\t}\\n\t\treturn arr;\\n\t}\\n}*/\\n\\n\\n", "target": "202", "substitutes": {"sc": ["sf", "SB", "gram", "ch", "ss", "si", " rc", "Sc", "SC", " cont", " res", "bc", "f", "c", " scr", "an", "sp", " ans", "sq", "se", " Sc", "sb", "scan", "cr", " arr", "parser", " scorer", "ann"], "t": ["ts", "nt", "p", "test", "it", "v", "i", " n", "l", "f", "c", "m", " p", "tl", "T", "pt", "o", "d", "n", "g", "task", "tp", "k", " T", " i", "tt", "et", "ti"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int tmp = 0;\\n\\n        if(N % 2 == 0) {\\n            tmp = N / 2;\\n        } else tmp = N / 2 + 1;\\n\\n        System.out.println((double)tmp / N);       \\n    }\\n}", "target": "64", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "nt", "pc", "ch", "sec", "ss", " SC", "sub", "asc", "search", "Sc", "SC", "bc", "cs", "sw", "src", "desc", "lc", "ci", "c", "sp", "acc", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "scan", "osc", "rc", "cc", "cr", "spec", "ec", "esc", "sync"], "N": ["MN", "Len", "S", "IO", "Num", "NA", "SN", "NL", "C", "Part", "J", "M", " n", "Size", "Nat", "Node", "Y", "F", "NN", "Number", "Q", "P", "NY", "NW", "T", "I", "TN", "Sn", "NC", "NP", "L", "R", "n", "NM", "Ne", "V", "CNN", "K", "NB", "ND", "D", "NT", "Z", "NS", "Ns", "O", "NE", "G", "NUM", "NG", "NI", "E", "X"], "tmp": ["nn", "offset", "Len", "nt", "count", "p", "test", "MP", "now", "C", "size", "next", "FF", "TT", "ext", " n", "ff", "stuff", "nm", "NN", "zip", "Temp", "temp", "P", "cp", " temporary", "cmp", " temp", "output", "sp", "np", "acc", "mp", "T", "NP", "nom", "n", "NR", "foo", "xt", "nb", "dest", "tp", "obj", "NB", "sup", "seed", "beta", " XXX", "NT", "txt", "number", "pp", "LT", "Output", "TB", "pad", "append"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int K = sc.nextInt();\\n        sc.close();\\n\\n        double allProb = 0.0000000;\\n\\n        double baseProb = 1.00000 / (double) N;\\n        int remainVals = 0;\\n\\n        for (int i = 1; i <= N; i++) {\\n            int takeCoins = getNeedTakeCoins(Double.parseDouble(String.valueOf(i)), K);\\n            if (takeCoins == 0) {\\n                remainVals = N - i + 1;\\n                break;\\n            }\\n            allProb += baseProb * Math.pow(0.5000, takeCoins);\\n        }\\n\\n        if (remainVals > 0) {\\n            allProb += baseProb * remainVals;\\n        }\\n\\n        System.out.println(allProb);\\n\\n    }\\n\\n    public static int getNeedTakeCoins(double val, double K) {\\n        int ret = 0;\\n        boolean times = false;\\n        while (true) {\\n            if (val >= K) {\\n                break;\\n            }\\n            val *= 4;\\n            ret += 2.00;\\n            times = true;\\n        }\\n        if (val / 2.00 >= K && times) {\\n            ret -= 1;\\n        }\\n        return ret;\\n    }\\n}\\n", "target": "20", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "com", "ch", "ss", " SC", "cur", "asc", "sh", "search", "Sc", "SC", "bc", "cs", "sw", "cv", "lc", "c", "cer", "sp", "system", "sq", "uc", "soc", "sr", "ca", "sem", "se", "ner", " Sc", "reader", "anc", "sb", "scan", "Scan", "osc", "rc", "cc", "cr", "cont", "sch", "esc", "cus", "sync"], "N": ["Len", "S", "No", "NA", "NL", "C", "J", "M", "Size", "U", "Y", "X", "F", "NN", "P", "T", "I", "Ni", "NC", "L", "R", "n", "B", "NM", "CNN", "V", "Ne", "NB", "ND", "D", "NT", "H", "O", "Z", "NS", "Ns", "G", "KN", "NE", "NG", "W", "E"], "K": ["KK", "S", "C", "J", "M", "MC", "Power", "U", "Y", "NK", "KB", "F", "Q", "KO", "P", "KC", "HK", "Key", "OK", "T", "I", "PK", "L", "R", "Max", "KY", "B", "V", "k", "KR", " k", "VK", "D", "H", "Z", "O", "KI", "G", "KE", "KS", "SK", "W", "E", "X"], "allProb": ["allProbb", "allpromb", "Allproxb", "allProtmb", "fullpror", "baseProba", "Allprop", "allPriba", "allProtba", "AllPromb", "allProx", "allproba", "baseProx", "allEbb", "allprop", "AllProp", "allCheb", "allPropp", "AllProxb", "baseprox", "allPrips", "baseprops", "AllProb", "fullprob", "fullProbb", "fullproba", "allproxb", "allPropba", "allPropxb", "allprops", "allPror", "Allpromb", "allProcb", "baseproba", "allPromb", "allPropmb", "AllProbb", "allprobb", "fullProba", "allProxb", "allPrix", "allPropr", "allprob", "allCheba", "baseProps", "allPropb", "allPropcb", "AllProcb", "allPrib", "allProps", "fullProb", "allChex", "Allprob", "allProba", "Allprocb", "allPropbb", "allEb", "allCheps", "allprocb", "Allprobb", "allProtb", "allProtr", "fullprobb", "allProtxb", "allprox", "baseprob", "allProp", "allEp", "allpror", "allProtbb", "allEcb", "fullPror"], "baseProb": ["baseProtb", "extraprod", "basePbs", "extraProd", "baseproc", " baseProf", "baseprobb", "baseProx", " basePreb", "baseProtf", "basprocb", "baseprox", " baseProbs", "extraProb", "basePerc", "basePbb", "extraprof", "basePreb", "basprob", "basePerd", "baseProbs", "basePx", "basePrf", "basprobb", "basProbb", "baseprobs", "basePrd", "baseProf", " basePref", "baseProbb", "basProcb", "basePf", "extraProf", " baseProx", "basePerb", "basePref", " basePrebs", "basProb", "extraProc", "basProf", "extraprob", "baseProtbb", "baseprof", "baseProd", "baseProtcb", "basePcb", "basePrex", "baseprod", "basePrc", "basePerf", "baseProcb", "baseprob", "baseProc", "baseprocb", "basePb", "basePrebs", " basePrex", "basePrb", "extraproc", "basprof"], "remainVals": ["remainingCals", "remainVes", "remainFols", "remainFals", "remainsValls", "remainCalls", "remainingValls", "remainEvals", "remainFins", "remainingFalls", "remainEves", "remainsCales", "remainingNalls", "remainNals", "remainTols", "remainingVals", "remainCins", "remainCes", "remainsCins", "remainingCols", "remainNalls", "remainVales", "remainingNales", "remainvalls", "remainsVins", "remainFalls", "remainingFins", "remainvins", "remainingFals", "remainingFales", "remainingVins", "remainEvalls", "remainTals", "remainCols", "remainsCalls", "remainLals", "remainVols", "remainingVols", "remainNins", "remainingNes", "remainNales", "remainingVes", "remainsVales", "remainingCales", "remainvals", "remainFales", "remainingVales", "remainvales", "remainCales", "remainLales", "remainTalls", "remainEvales", "remainsVals", "remainCals", "remainValls", "remainsCals", "remainVins", "remainLalls", "remainNes", "remainTales", "remainingCalls", "remainingNals", "remainLins"], "i": ["bi", "pi", "ori", "ni", "iu", "slice", "u", "it", "multi", "qi", "xi", "ji", "v", "si", "ix", "mini", "ri", "io", "f", "ci", "ui", "ini", "c", "index", "eni", "x", "uri", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "n", "ii", "b", "zi", "li", "j", "oi", "k", "yi", "chi", "ti", "fi"], "takeCoins": ["takecoin", "takecoons", "takeCoons", "takeCits", "takeOrigons", "TakeCOins", "takeCoin", " takecoits", "takecoits", "TakeCOons", "TakeCOin", " takeCoines", "takeCoits", "TakeCOIns", "takeCollits", "takeCOin", " takeCoin", "TakeCoIns", "takeCollins", "takeCOiss", " takeCoiss", "takeCOines", " takeCoits", "takeColliss", "takecoines", "TakeCoin", "takeCin", "takeOrigIns", "TakeCoons", "takeCoiss", "takeCOits", "takecoiss", "takeOrigin", "takeCollines", "takeCines", "takeCoIns", " takecoines", "takeCOons", " takecoiss", "takeCoines", " takecoins", "takeCins", "takeCOins", "takecoIns", "TakeCoins", "takeOrigins", "takeCOIns", "takecoins"], "val": ["py", "unit", "elt", "live", "p", "num", "split", "v", "vol", "vals", "el", "old", "cel", "part", "data", "Val", "valid", "value", "win", "fe", "fit", "len", "cal", "reg", "f", "sl", "alt", "pid", "x", "base", "var", "pt", "min", "max", "d", "dim", "lit", "V", "grad", "ol", "sel", "rel", "trial", "VAL", "la", "ref", "Value", "eval", "rt", "ind", "X"], "ret": ["over", "nt", "opt", "count", " Ret", "test", "gt", "default", "back", "ext", "res", "fin", "const", "pre", "sat", "part", "r", "valid", "value", "exp", "fit", "get", "len", "reg", "temp", "inter", "f", "alt", "sum", "arg", "fun", "var", "base", "x", "rev", "success", "result", "mem", "RET", "lit", "obj", "def", "pass", "det", "req", "trial", "rets", "ref", "rt", "eval", "match", "out", "Ret", "re"], "times": [" traps", "acts", "ts", "checks", "Times", " values", "blocks", " cases", "places", "hes", " matches", "hours", "ins", "ks", "opens", " Times", "powers", " tests", "series", "rules", "sites", "right", "ups", "cs", "types", "ps", "imes", "rows", "tests", "forces", "x", " places", "true", "events", "cases", " repeats", "shows", "values", "tips", "time", "tx", "ones", "forms", " singles", "tri", "outs", "sticks", "runs", "steps", "ays", " events"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n \\n\\n\\npublic class Main {\\n\tstatic int a1[]= {0,-1,0,1};\\n\tstatic int b1[]= {-1,0,1,0};\\n\tprivate static         Scanner sc = new Scanner(System.in);\\n\t//result = Math.pow(num1, num3)\\n\t//StringBuffer str = new StringBuffer(hoge1);\\n\t//String hoge2 = str.reverse().toString();\\n\t//map.containsKey(A)\\n\\n\t//Map<String, Integer> map = new HashMap<String, Integer>(n);\\n\t/*for ( \u30ad\u30fc\u306e\u30c7\u30fc\u30bf\u578b key : \u30de\u30c3\u30d7\u306e\u540d\u524d.keySet() ) {\\n\t\t\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u578b data = \u30de\u30c3\u30d7\u306e\u540d\u524d.get( key );\\n\t\t\\n\t\t// key\u3084data\u3092\u4f7f\u3063\u305f\u51e6\u7406;\\n\t}*/\\n\t//int i = Integer.parseInt(s);\\n\t//Queue<String> qq=new ArrayDeque<>(); //add,poll,peek\\n\t//Deque<String> qq=new ArrayDeque<>();//push,pop,peek\\n\t//ArrayList<String> cc = new ArrayList<>(n);\\n\t//Collections.sort(list);\\n\t//Array.sort(list);   cc.contains(tmp)\\n\t//Arrays.asList(c).contains(\"a\")\\n\t//list.set(1,\"walk\");//1 1 2 3 5\\n\tstatic int K,N;\\n\tstatic long mod =1000000007;\\n\t//static \tArrayList<Integer> cc = new ArrayList<>(100);\\n//<60 >62\\n\tpublic static void main(String[] args) {\\n\t\t\t//String S=sc.next();\\n\t\t\t//int N=sc.nextInt();\\n\t\t\t//int v[]=new int[N];\\n\t\t\t//for(int i=0;i<N;i++) {}\\n\t\tint N=sc.nextInt();\\n\t\tint v[]=new int[N];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tv[i]=sc.nextInt();\\n\t\t}\\n\t\t\\n\t\t\\n\t\tboolean x=true;\\n\t\tfor(int i=N-1;i>0;i--) {\\n\t\t\tif(v[i]<v[i-1]) {\\n\t\t\t\tv[i-1]--;\\n\t\t\t}\\n\t\t\tif(v[i]<v[i-1]) {\\n\t\t\t\tx=false;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(x)p(\"Yes\");\\n\t\telse p(\"No\");\\n\t\t\\n\t}\\n\tstatic int v(int a) {\\n\t\treturn a*(a-1)/2;\\n\t}\\n\\n\t\\n\t//N==S\\n\t//E==W\\n//83 S \\n\t//69E\\n\t//78N\\n\t//87W\\n\t\\n\t//static ArrayList<Integer> cc = new ArrayList<>(10001);\\n\t\\n\tstatic void p(String ans) {System.out.println(ans);};\\n\tstatic void p(int ans) {System.out.println(ans);};\\n\tstatic void p() {System.out.println();};\\n\tstatic void p(long ans) {System.out.println(ans);};\\n\tstatic void p(double ans) {System.out.println(ans);};\\n\tpublic static int gcd(int a, int b) {\\n        return b == 0 ? a: gcd(b, a % b);\\n\t}\\n\tstatic String nextPermutation(String s) {\\n\t\tArrayList<Character> list=new ArrayList<>();\\n\t\tfor(int i=0;i<s.length();i++) {\\n\t\t\tlist.add(s.charAt(i));\\n\t\t}\\n\t\tint pivotPos=-1;\\n\t\tchar pivot=0;\\n\t\tfor(int i=list.size()-2;i>=0;i--) {\\n\t\t\tif(list.get(i)<list.get(i+1)) {\\n\t\t\t\tpivotPos=i;\\n\t\t\t\tpivot=list.get(i);\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(pivotPos==-1&&pivot==0) {\\n\t\t\treturn \"Final\";\\n\t\t}\\n\t\tint L=pivotPos+1,R=list.size()-1;\\n\t\t\\n\t\t\\n\t\t\\n\t\tint minPos=-1;\\n\t\tchar min =Character.MAX_VALUE;\\n\t\t\\n\t\tfor(int i=R;i>=L;i--) {\\n\t\t\tif(pivot<list.get(i)) {\\n\t\t\t\tif(list.get(i)<min) {\\n\t\t\t\t\tmin=list.get(i);\\n\t\t\t\t\tminPos=i;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tCollections.swap(list, pivotPos, minPos);\\n\t\tCollections.sort(list.subList(L, R+1));\\n\t\t\\n\t\t\\n\t\tStringBuilder sb=new StringBuilder();\\n\t\tfor(int i=0;i<list.size();i++) {\\n\t\t\tsb.append(list.get(i));\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n}\\n\t\\n", "target": "74", "substitutes": {"a1": ["ca4", "a4", "ca11", "f1", "a11", "ca1", "f11", "A4", "A1", "A11", "f4"], "b1": ["p1", "b4", "n8", " b4", "n1", "p4", "b8", "p8", "n4", " b8"], "sc": ["cl", "nc", "sci", "gram", "ch", "ss", " SC", " rc", "Sc", "SC", " gl", "bc", "cs", "sw", "cmp", "lc", "c", " scr", "sp", "st", "sq", "se", " Sc", "sb", "scan", "rc", "cr", "ann"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner S = new Scanner(System.in);\\n\t\tint n = S.nextInt();\\n\t\tint m = S.nextInt();\\n\t\tint[][] A = new int[n][m];\\n\t\tint[] b = new int[m];\\n\t\tint[] ans = new int[n];\\n\t\t\\n\t\tfor(int i = 0;i < n;i++){\\n\t\t\tfor(int j = 0;j < m;j++){\\n\t\t\t\tA[i][j] = S.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0;i < m;i++){\\n\t\t\tb[i] = S.nextInt();\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0;i < n;i++){\\n\t\t\tfor(int j = 0;j < m;j++){\\n\t\t\t\tans[i] += A[i][j] * b[j];\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0;i < n;i++){\\n\t\t\tSystem.out.println(ans[i]);\\n\t\t}\\n\t}\t\t\\n}", "target": "185", "substitutes": {"S": ["SI", "Client", "SS", "VS", "SN", "IS", "Sample", "Socket", "TS", "C", "Os", "Fs", "N", "M", "LS", "RS", "SE", "U", "SU", "SH", "SC", "GS", "Si", "F", "Service", "X", "South", "SEC", "WS", "P", "MS", "Single", "FS", "OSS", "BS", "Local", "s", "Session", "Support", "Services", "T", "I", "Stream", "L", "R", "V", "LOS", "INS", "O", "NS", "DS", "HS", "G", "SR", "Parser", "SER", "PS"], "n": ["nn", "nc", "nt", "p", "size", "dn", "u", "num", "N", "ln", "M", "v", "cn", "l", "a", "sn", "r", "z", "un", "f", "s", "c", "inn", "ne", "w", "x", "an", "e", "o", "d", "ns", "network", "nb", "ner", "net", "k", "no", "in", "mn", "y", "en", "t"], "m": ["um", "mc", "im", "bm", "p", "mon", "u", "num", "N", "M", "v", "l", "a", "mini", "mm", "r", "nm", "z", "h", "f", "cm", "man", "s", "c", "w", "x", "mu", "an", "e", "o", "md", "d", "mi", "g", "am", "k", "hm", "sm", "in", "mn", "y", "en", "t"], "A": ["Num", "AM", "NA", "C", "Ca", "An", "AA", "N", "M", "LA", "a", "As", "U", "Az", "AMI", "F", "mA", "AP", "This", "P", "Ang", "Auth", "Am", "Na", "API", "T", "I", "App", "At", "ai", "L", "Ab", "Adv", "Alpha", "B", "Ar", "V", "D", "H", "O", "Ag", "CA", "G", "Adam", "X"], "b": ["fb", "ub", "p", "mb", "u", "pb", "rb", "v", "ba", "a", "l", "db", "ib", "bis", "r", "ban", "be", "h", "lb", "gb", "bs", "f", "br", "s", "c", "x", "base", "e", "o", "d", "g", "B", "body", "nb", "k", "sb", "bb", "arb", "bin", "y", "ab", "ob"], "ans": ["nn", "ana", "AN", "ars", "blocks", "aned", "anas", "anned", "na", "ani", "ins", "An", "nan", "aus", "anon", "lan", "a", "l", "atan", "ions", "ls", "ens", "cs", "types", "s", "nas", "ants", "an", "x", "idents", "ANS", "ai", "Ann", "ns", "anus", "anc", "scan", "ids", "annot", "as", "ANN", "san", "anners", "ons", "amps", "can", "ann", "anch"], "i": ["bi", "hi", "ir", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "ani", "multi", "qi", "iii", "ji", "xi", "ei", "v", "si", "ix", "a", "l", "uni", "ik", "ri", "uli", "io", "init", "z", "info", "f", "lc", "ci", "ui", "ini", "c", "eni", "x", "mu", "uri", "phi", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "cli", "ii", "li", "oi", "yi", "in", "chi", "y", "ki", "my", "fi"], "j": ["dj", "jj", "jc", "p", "oj", "it", "u", "adj", "J", "qi", "ch", "ji", "xi", "v", "jp", "pr", "ix", "l", "a", "ij", "ik", "z", "h", "f", "ion", "br", "ui", "c", "key", "w", "x", "eni", "e", "jo", "jet", "ja", "uj", "ie", "q", "o", "d", "g", "ii", "li", "ju", "je", "js", "k", "obj", "job", "y", "jl", "t", "aj"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s=new Scanner(System.in);\\n        String str=s.nextLine();\\n        int[] arr=new int[26];\\n        for(int i=0;i<str.length();i++){\\n            arr[str.charAt(i)-'a']++;\\n        }\\n        for(int i=0;i<26;i++){\\n            if(arr[i] %2!=0){\\n                System.out.println(\"No\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"Yes\");\\n\\n    }\\n}\\n", "target": "103", "substitutes": {"s": ["S", "ts", "p", "obs", "ins", "opens", "strings", "l", "bis", "qs", "is", "ls", "r", "ws", "fs", "h", "ps", "f", "er", "lines", "sl", "c", "os", "ds", "ms", "m", "gets", "ops", "e", "ssl", "ses", "abs", "d", "n", "g", "gs", "b", "ns", "sys", "se", "js", "sb", "xs", "in", "out", "sync"], "str": ["div", "enc", "cl", "wr", "hr", "tr", "pr", "cur", "line", "STR", "l", "data", "a", "fr", "r", "iter", "input", "char", "f", "br", "dr", "sl", "c", "sp", "st", "text", "string", "kr", "stri", "code", "Str", "sr", "b", "err", "pass", "obj", "form", "in", "txt", "doc", "dec", "out", "strip", "coll"], "arr": ["div", "enc", "cat", "vec", "val", "test", "dict", "arm", "par", "ar", "data", "db", "fr", "Array", "r", "part", "adr", "aa", "iter", "attr", "app", "dr", "br", "order", "list", "img", "acc", "arch", "abs", "prev", "err", "abc", "gr", "aaa", "frac", "obj", "att", "av", "bar", "ab", "range", "cache", "batch", "pad", "array", "ann", "coll"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "ji", "v", "si", "ix", "a", "l", "data", "ri", "io", "init", "h", "z", "abi", "info", "attr", "f", "lc", "ci", "ui", "c", "ini", "index", "eni", "phi", "x", "mu", "uri", "m", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "inner", "n", "ii", "b", "zi", "cli", "li", "j", "oi", "in", "chi", "y", "t", "ti"], "charAt": ["charAfter", "byteAt", "characterAfter", "characterAt", " charBefore", "characterSet", "byteBefore", "byteAfter", "charSet", " charAfter", "charBefore", "characterBefore", " charSet", "byteSet"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str = br.readLine();\\n\t\tStringBuffer st = new StringBuffer(str);\\n\t\tst.reverse();\\n\t\tSystem.out.println(st);\\n\t\t\\n\t\t\\n\t}\\n\\n}", "target": "237", "substitutes": {"br": ["bl", "div", "bed", "ori", "ber", "wr", "hr", "rb", "browser", "tr", "arr", "ar", "fr", "r", "bf", "yr", "io", "bridge", "bc", "bs", "er", "dr", "mr", "BR", "sp", "bro", "HR", "img", "Br", "brush", "abs", "sr", "b", "err", "gr", "obj", "buf", "ocr", "bb", "bd", "bt", "cr", "bar", "ref", "rt"], "str": ["bl", "cl", "hr", "ss", "tr", "pr", "arr", "cur", "line", "STR", "data", "fr", "r", "iter", "input", "char", "f", "dr", "sl", "s", "sp", "text", "string", "pt", "stri", "Str", "sr", "b", "err", "obj", "in", "txt", "cr", "read", "out"], "st": ["bl", "ste", "inst", "sth", "ST", "nd", "ss", "tr", "pr", "line", "STR", "const", "ct", "fr", "std", "sv", "r", "put", "stream", "sw", "src", "dr", "sl", "s", "est", "sp", "string", "pt", "stri", "rest", "d", "Str", "sr", "b", "St", "obj", "sb", "sta", "sts", "struct", "cr", "ost", "sc", "t", "strip"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main\\n{\\n\tpublic static void main(String[] args)throws IOException {\\n\t\tInputStreamReader read=new InputStreamReader(System.in);\\n\t\tBufferedReader in=new BufferedReader(read);\\n\t\tint x=Integer.parseInt(in.readLine());\\n\t\tlong ans=0;\\n\t\twhile(x>=500)\\n\t\t{\\n\t\t    ans+=1000;\\n\t\t    x-=500;\\n\t\t}\\n\t\twhile(x>=5)\\n\t\t{\\n\t\t    ans+=5;\\n\t\t    x-=5;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "180", "substitutes": {"read": ["run", "i", "add", "data", "is", "reads", "find", "r", "start", "io", "source", "stream", "input", "get", "report", "feed", "check", "build", "w", "load", "text", "Read", "READ", "n", "sync", "b", "pass", "open", "reader", "write", "work", "parse", "lock", "play", "reading", "close", "out", "Reader"], "in": ["this", "print", "login", "ins", "din", "ex", "i", "line", "a", "data", "is", "lin", "r", "re", "init", "io", "stream", "source", "temp", "input", "resource", "In", "f", "user", "s", "inn", "ini", "c", "report", "raw", "inner", "d", "rin", "b", "err", "reader", "write", "exec", "log", "bin", "readable", "txt", "as", "inc", "IN", "out", "query"], "x": ["ace", "php", "cl", "dx", "p", "xp", "times", "id", "num", "python", "xi", "ex", "ext", "i", "xes", "ix", "l", "a", "is", "X", "es", "cross", "exp", "z", "h", "f", "ci", "s", "lex", "c", "ax", "wx", "index", "m", "an", "w", "pe", "e", "any", "en", "xxx", "max", "d", "plus", "n", "xt", "tx", "pos", "k", "xs", "xe", "mx", "xy", "y", "rx", "some", "px", "fx", "t", "xa", "xc", "xx"], "ans": ["ams", "ana", "aos", "sk", "AN", "aned", "ars", "anned", "anas", "na", "ani", "ins", "aus", "ks", "span", "anon", "lan", "anz", "aces", "a", "atan", "es", "ls", "eps", "ens", "cs", "len", "ians", "lines", "nas", "os", "ms", "cas", "ds", "ants", "ano", "an", "aid", "ANS", "ents", "ns", "cases", "ras", "ats", "pos", "anc", "xs", "scan", "san", "as", "ons", "aning", "amps", "ays", "can", "ann"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main { \\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString[] line = sc.nextLine().split(\" \");\\n\t\tlong num1 = Long.parseLong(line[0]);\\n\t\tlong num2 = Long.parseLong(line[1]);\\n\\n\t\tif(num1%2 == num2%2) {\\n\t\t\tlong num3 = num1 + num2 ;\\n\t\t\tSystem.out.println(num3/2);\\n\t\t}else {\\n\t\t\tSystem.out.println(\"IMPOSSIBLE\");\\n\t\t}\\n}\\n\\n}", "target": "31", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "sf", "pc", "class", "ch", "server", "ss", "sec", " SC", "asc", "sh", "l", "Sc", "SC", "stream", "bc", "desc", "cs", "src", "sw", "lc", "sl", "c", " scr", "sp", "acc", "ec", "uc", "se", "ner", " Sc", "reader", "anc", "scan", "sel", "osc", "rc", "cc", "cr", "spec", "out", "esc", "sync"], "line": ["message", "split", "l", "page", "data", "name", "lin", "entry", "block", "header", "source", "row", "nl", "end", "cell", "f", "lines", "shell", "lc", "user", "ne", "e", "string", "column", "frame", "code", "comment", "plus", "object", "LINE", "cle", "se", "pass", "inline", "ge", "parse", "response", "no", "in", "log", "file", "group", "non", "word", "section", "look", "Line", "out", "strip", "sync"], "num1": ["n2", "namOne", "number1", " numOne", "nam3", "sum1", " numN", "number3", "n1", "number01", "numberOne", "namN", "num01", "numOne", "sumOne", "sum2", "number2", "nOne", "numN", "n3", "n01", "sum3", "numberN", "nam1", "sum01"], "num2": ["number1", "locTwo", "sumbot", "loctwo", "numberTwo", "hom2", " numTwo", "number4", "hom1", "numbot", "sum1", "numberbot", "hom6", " num6", " numtwo", "num4", " num4", "sum2", "numtwo", "loc2", "number2", "numbertwo", "sum3", "num6", "sum6", "sum4", "numTwo", " numbot", "hom3"], "num3": ["number1", "sum93", "info3", "info1", "numThree", "numthree", "hom1", "sum1", "number93", "number3", "infothree", "infoThree", "uni93", "homThree", "uni1", "num93", " numThree", "homthree", "sum3", " numthree", "uni3", "hom3"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint input = sc.nextInt();\\n\t\tint[] arr = new int[input];\\n\t\tlong output = 0;\\n\t\tfor(int i = 0;i<input;i++)arr[i]=sc.nextInt();\\n\t\tfor(int i = 0;i<input;i++) {\\n\t\t\tfor(int j =i+1;j<input;j++) {\\n\t\t\t\toutput += arr[i]*arr[j];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(output);\\n\t}\t\\n\\n}\\n", "target": "126", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "class", "ch", "sec", "ss", "tc", "server", " SC", "cur", "asc", "sh", "Sc", "SC", "bc", "cs", "cv", "src", "lc", "ci", "dc", "c", "cer", " scr", "sp", "acc", "ec", "system", "uc", "ca", "sem", "se", "ner", " Sc", "anc", "exec", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "out", "esc", "cus"], "input": ["total", "target", "focus", "initial", "count", "prefix", "integer", "null", "id", "back", "qi", "view", "keep", "before", "inside", "path", "cur", "data", "request", "diff", "start", "init", "source", "temp", "first", "length", "image", "height", "format", "index", "weight", "base", "config", "Input", "list", "img", "col", "active", "column", "raw", "max", "ul", "alpha", "inf", "context", "current", "qa", "form", "att", "in", "type", "inc", "shape", "local", "capacity", "pull", "batch", "act"], "arr": ["enc", "cat", "arc", "ars", "p", "buffer", "na", "ani", "adv", "stack", "align", "auto", "ar", "l", "a", "data", "Array", "fr", "r", "adr", "aa", "iter", "attr", "dr", "br", "au", "air", "inter", "order", "arg", "var", "list", "x", "img", "str", "acc", "ai", "n", "prev", "result", "b", "dim", "err", "ray", "Ar", "abc", "aaa", "angle", "bb", "att", "parse", "av", "inc", "area", "avi", "cache", "batch", "act", "array", "ann"], "output": ["complete", "offset", "target", "unit", "prefix", "size", "next", "ext", "average", "version", "data", "progress", "put", "production", "value", "init", "generated", "written", "four", "length", "width", "letter", "image", "format", "weight", "index", "config", "text", "active", "left", "plain", "code", "alpha", "content", "result", "current", "write", "expression", "response", "example", "sequence", "number", "struct", "address", "Output", "batch", "out", "array"], "i": ["bi", "hi", "api", "pi", "ni", "iu", "p", "ami", "it", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "l", "is", "ri", "ik", "uli", "start", "io", "init", "z", "f", "ci", "ui", "ini", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "li", "oi", "yi", "in", "y", "fi"], "j": ["bi", "jj", "p", "it", "u", "J", "qi", "bj", "ji", "xi", "v", "jp", "si", "ix", "l", "a", "ij", "part", "z", "h", "aj", "f", "ui", "key", "index", "m", "x", "e", "di", "ja", "uj", "ie", "q", "o", "d", "n", "ii", "b", "err", "li", "js", "obj", "k", "job", "y", "out", "jo"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\t\\n\t\tint nam = in.nextInt();\\n\t\tint namber = 0;\\n\t\tint flag = 0;\\n\\n\t\tfor(long i = 0; i < nam; i++){\\n\t\t   namber =  in.nextInt();\\n\t\t   if(namber % 2 == 0){\\n\t\t        flag = 1;\\n\t\t       if(namber % 3 == 0 || namber % 5 == 0 ){\\n\t\t           flag = 0;\\n\t\t       }\\n\t\t       if(flag == 1){\\n\t\t           System.out.println(\"DENIED\");\\n\t\t           System.exit(0);\\n\t\t       }\\n\t\t   }\\n\t\t}\\n      \\n      System.out.println(\"APPROVED\");\\n\t}\\n}", "target": "113", "substitutes": {"in": ["isin", "rec", "loader", "login", "ins", "serv", "din", "server", "ex", "binary", "sub", "line", "a", "data", "is", "lin", "con", "r", "re", "init", "source", "win", "input", "In", "f", "gen", "s", "lib", "inn", "c", "ini", "er", "conn", "image", "m", "nin", "str", "token", "inf", "inner", "rin", "n", "g", "cli", "b", "err", "kin", "pass", "again", "reader", "pin", "scan", "connection", "bin", "readable", "as", "inc", "doc", "IN", "out", "thin", "query"], "nam": ["mom", "nn", "im", "dam", "imag", "comb", "hop", "gram", "num", "nan", "span", "sit", "keep", "nic", "sam", "mm", "nm", "win", " dim", "sim", "ny", "fam", "amin", "ku", "mix", "ram", "tim", "month", "lam", "gin", "nom", "nw", "mi", "dom", "dim", "dy", "sem", "iam", "nav", "cam", "am", "fee"], "namber": ["hambing", "nambed", "amber", "namper", "nambon", "dnbed", " dimuber", " spamner", "nmmber", "namener", "dimper", "hamuber", "nambr", "sammer", "dimmer", "nammer", "nambers", "hammber", "namebers", "ginber", "hanbing", "ginbers", "dimber", "rambl", "amuber", "ginbon", "hanuber", "namester", " spamster", "nambl", "namster", "rammer", "sambl", "nmbers", "ramper", "nmber", " dimster", "samber", "hamber", "dnmber", "nmuber", "samper", "nmbed", "nammber", "nambing", "ramber", "dimbl", "ambr", "hanbr", "nameber", "dnber", " dimber", "hambed", "hanber", "ambing", "namuber", "hambr", " spamber", "ginuber", "nameuber", "nmbon", " dimner", "dnuber", "namebon", " spamuber", "namner"], "flag": ["status", "offset", "count", "age", "bug", "id", "sort", "lag", "part", "sign", "start", "mask", "info", "len", "band", "char", "tag", "f", "letter", "fd", "feature", "style", "arg", "bit", "weight", "key", "fun", "flags", "code", "year", "field", "kid", "Flag", "pin", "fat", "force", "type", "file", "log", "group", "kind", "bin", "ind", "fi"], "i": ["bi", "hi", "pi", "ori", "ni", "count", "iu", "p", "ami", "it", "u", "multi", "qi", "xi", "ji", "si", "l", "uni", "ri", "io", "info", "ski", "abi", "ci", "vi", "ui", "ini", "c", "eni", "x", "mu", "di", "ip", "I", "ai", "jit", "gi", "n", "gu", "b", "ii", "zi", "li", "j", "chi", "ti", "fi"]}}
{"code": "import java.util.*;\\n \\nclass Main{\\n    public static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tList<String> list = new ArrayList<String>();\\n\\n        while(true){\\n\t\t\tint m = scan.nextInt(); //??????????\u00a8?????????\u00b0(50?????????)\\n\t\t\tint f = scan.nextInt(); //??????????\u00a8?????????\u00b0(50?????????)\\n\t\t\tint r = scan.nextInt();\t//???????\u00a8?????????\u00b0 (100?????????)\\n\\n\t\t\tif(m==-1 && f==-1 && r==-1){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\t\\n\t\t\tif(m==-1 || f==-1){ //??????????\u00a8??????????????\u00a8????????????????????\u00ac????????????\u00b4???????????? F???\\n\t\t\t\tlist.add(\"F\");\\n\t\t\t}\\n\t\t\telse if((m + f) >= 80){ //??????????\u00a8???\u00a8??????????\u00a8????????\u00a8??????\u00b0??? 80 ??\\???????????\u00b0????????? A\\n\t\t\t\tlist.add(\"A\");\\n\t\t\t}\\n\t\t\telse if((m + f) >= 65 && (m + f) < 80){ //??????????\u00a8???\u00a8??????????\u00a8????????\u00a8??????\u00b0??? 65 ??\\??? 80 ??????????????\u00b0????????? B\\n\t\t\t\tlist.add(\"B\");\\n\t\t\t}\\n\t\t\telse if((m + f) >= 50 && (m + f) < 65){ //??????????\u00a8???\u00a8??????????\u00a8????????\u00a8??????\u00b0??? 50 ??\\??? 65 ??????????????\u00b0????????? C\\n\t\t\t\tlist.add(\"C\");\\n\t\t\t}\\n\t\t\telse if((m + f) >= 30 && (m + f) < 50){ //??????????\u00a8???\u00a8??????????\u00a8????????\u00a8??????\u00b0??? 30 ??\\??? 50 ??????????????\u00b0????????? D\\n\t\t\t\tif(r >= 50){ //???????????????????\u00a8?????????\u00b0??? 50 ??\\???????????\u00b0????????? C\\n\t\t\t\t\tlist.add(\"C\");\\n\t\t\t\t}\\n\t\t\t\telse{\\n\t\t\t\t\tlist.add(\"D\");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\telse if((m + f) < 30){ //??????????\u00a8???\u00a8??????????\u00a8????????\u00a8??????\u00b0??? 30 ??????????????\u00b0????????? F\\n\t\t\t\tlist.add(\"F\");\\n\t\t\t}\\n\t\t}\\n\t\tfor(String str : list){\\n\t\t\tSystem.out.println(str);\\n\t\t}\\n    }\\n}", "target": "118", "substitutes": {"scan": ["all", "wait", "cat", "see", "conf", "watch", "connect", "walk", "server", "span", "run", "search", "l", "fan", "sign", "r", "iter", "win", "er", "send", "check", "an", "system", "read", "skip", "n", "sync", "sys", "se", "ner", "open", "reader", "exec", "in", "parse", "Scan", "log", "ans", "pan", "look", "sc", "can", "ann", "query"], "list": ["parent", "chain", "record", "test", "table", "queue", "stack", "l", "name", "entry", "source", "temp", "index", "output", "base", "set", "result", "LIST", "sequence", "tree", "type", "lists", "cache", "member", "batch", "array"], "m": [" ms", "dm", "mc", "p", "mode", "num", " nm", "M", "v", "i", " n", "name", "nm", "f", "cm", "man", "ms", "an", " p", "min", "d", "mi", "n", " M", "k", "mn", "mid", "Ms"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tchar[] inputs = scanner.nextLine().toCharArray();\\n\t\tchar[] outputs = new char[inputs.length];\\n\t\tint oIndex = 0;\\n\t\tfor (int iIndex = 0; iIndex < inputs.length; iIndex++) {\\n\t\t\twhile (iIndex < inputs.length && inputs[iIndex] == 'B') {\\n\t\t\t\toIndex--;\\n\t\t\t\tiIndex++;\\n\t\t\t}\\n\t\t\tif (iIndex >= inputs.length) break;\\n\t\t\tif (oIndex < 0) oIndex = 0;\\n\t\t\toutputs[oIndex++] = inputs[iIndex];\\n\t\t}\\n\t\tSystem.out.println(String.valueOf(Arrays.copyOf(outputs, oIndex)));\\n\t}\\n}\\n", "target": "151", "substitutes": {"scanner": [" scaner", "scanker", "sener", "anner", "scanl", "Scanl", "analyner", " scanl", "seker", "analyning", "analyker", "scaner", "Scanker", "scanning", "Scaner", "annner", "sel", " scanker", "Scanning", "analyer", "seer", "annker", "Scanner", "annning"], "inputs": ["Inputstates", "Inputes", "Inputabs", " inputlines", "outputes", "outputf", "outputlines", "inputls", " inputes", "selectments", "inputments", "selects", " inputf", "Inputf", "outputments", "selectls", "outputss", "Inputss", "outputls", "outputwords", " inputcs", "outputd", "inputlines", " inputstates", "outputstates", "inputabs", "selectlines", "inputcs", "outputabs", " inputments", "Inputs", "inputss", "Inputcs", "inputf", "inputd", "Inputd", " inputls", "outputcs", " inputss", " inputwords", "Inputlines", "inputstates", "inputes", "inputwords", "Inputwords", " inputabs", " inputd"], "outputs": ["outputches", "outputes", "outputlines", "outputstyles", "outputp", "Outputs", " outputches", "Outputes", " outputstyles", "inputches", "putp", "outputd", "Outputstyles", "inputlines", "inputp", "puts", "inputstyles", " outputp", "inputd", "Outputlines", " outputlines", "Outputd", "inputes", "putd", "putches", " outputes", " outputd"], "oIndex": [" oMass", "oMix", "oPosition", "oaMass", "oLoop", "iSize", "siIndex", "iFunction", " oFunction", "iMass", "iLength", "uLength", "oStep", "oiPath", " oMix", "oaZone", "poPosition", " oLength", "oFunction", " oPath", "poindex", "iZone", "iStep", "uPosition", "oLength", "siMix", "oPath", "uIndex", "oaindex", "poMass", "oaPosition", "oSize", " oSize", "oMass", "uLoop", "uZone", "iPath", "oaStep", "oaFunction", "oaLoop", "iMix", "iPosition", "siMass", "oiIndex", " oindex", " oStep", "oaLength", " oLoop", "oZone", "oindex", "poIndex", "iLoop", "siSize", "oiLength", "oiLoop", " oPosition", "oaIndex"], "iIndex": ["iiindex", " iHalf", "iiUnit", "xiLength", " iPosition", "oPosition", " iFound", "iiIndex", "oLoop", "oPoint", "siIndex", "ioIndex", " iLength", "iFound", "iLength", "iiLength", " iPoint", "siUnit", "xiPoint", "iPoint", "ciIndex", "iOffset", "iHalf", "riindex", "ioindex", "ioPosition", "iiPoint", "fOffset", "iZone", " iUnit", "xiIndex", "oLength", " iLoop", "uIndex", "ciindex", "riLoop", "oFound", "fIndex", "fLoop", " iZone", "uLoop", "uFound", "iUnit", "oOffset", "oHalf", " iindex", "iPosition", "ioOffset", "iiLoop", "riHalf", "iiZone", "xiZone", "uOffset", " iOffset", "oindex", "siZone", "iLoop", "riIndex", "iindex", "ciPoint", "findex", "ciLoop", "siLength"]}}
{"code": "import java.util.*;\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String[] nums = sc.nextLine().split(\" \");\\n    System.out.println(nums[2] + \" \" + nums[0] + \" \" + nums[1]);\\n  }\\n}", "target": "149", "substitutes": {"sc": ["cl", "sci", "nc", "scope", "pc", "ch", "sec", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "desc", "lc", "sl", "s", "c", " scr", "sp", "acc", "st", "uc", "se", "ner", " Sc", "scan", "sel", "osc", "rc", "cc", "cr", "parser", "spec", "ec", "esc"], "nums": ["neum", "Num", "num", "gnum", " numbers", " Num", "gnules", " namples", "neums", "Nums", "Number", "nsumbers", "Namples", "nsum", "numbers", "gnumbers", "Numbers", " Nums", "neults", " Number", " nules", " num", "Nults", "nsamples", " Numbers", "neumbers", "Nules", "nules", "number", "nults", "gnums", " nults", " number", "nsums", "namples"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    char[] S = sc.next().toCharArray();\\n    boolean isSame = true;\\n    if(N%2 != 0){\\n      System.out.print(\"No\");\\n    }else{\\n      for(int i=0; i<N/2; i++){\\n        if(S[i] != S[i+(N/2)]){\\n          isSame = false;\\n        }\\n      }\\n      if(isSame){\\n        System.out.print(\"Yes\");\\n      }else{\\n        System.out.print(\"No\");\\n      }\\n    }\\n  }\\n}\\n    \\n", "target": "161", "substitutes": {"sc": ["this", "cl", "sci", "nc", "scope", "pc", "class", "ser", "com", "ch", "tc", "ss", " SC", "cur", "asc", "search", "l", "sh", "Sc", "SC", "bc", "cs", "sw", "cer", "c", "sp", "system", "text", "sq", "uc", "sr", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus", "sync"], "N": ["Len", "Num", "No", "NA", "Count", "SN", "C", "Part", "M", "OS", " n", "Size", "U", "Y", "F", "Number", "NN", "P", "A", "OUT", "Na", "NO", "T", "I", "II", "Sn", "L", "R", "n", "B", "CNN", "V", "Ne", "NB", "Length", "ND", "D", "NT", "H", "Z", "NS", "Ns", "O", "NE", "KN", "NUM", "Name", "E", "X"], "S": ["AS", "SS", "VS", "SN", "Sample", "IS", "TS", "C", "Socket", "M", "OS", "RS", "U", "SU", "SC", "Si", "GS", "SH", "F", "Array", "X", "SA", "A", "P", "States", "Sign", "BS", "s", "POS", "IDS", "T", "I", "L", "R", "B", "Files", "V", "INS", "ES", "D", "H", "NS", "JS", "SR", "CS", "E", "Sort", "PS"], "i": ["bi", "pi", "ni", "p", "it", "u", "id", "slice", "multi", "qi", "ji", "xi", "v", "si", "ix", "a", "uni", "ri", "r", "uli", "start", "io", "z", "h", "abi", "f", "ci", "vi", "c", "ui", "ini", "index", "at", "eni", "x", "mu", "uri", "adi", "e", "di", "phi", "I", "ai", "o", "gi", "d", "n", "ii", "b", "zi", "li", "j", "k", "oi", "in", "chi", "t", "ti", "fi"], "isSame": ["aSame", "ifsame", "aCompared", "aRight", "isaDifferent", " isDifferent", "asame", "notDifferent", "isiCompared", "notSimilar", "isLike", "ifSame", "checkLike", "issame", "isisame", "isDifferent", "checkDifferent", "ifLike", " isSimilar", " issame", "isRight", " isLike", " isCompared", "ifDifferent", "isCompared", "isiRight", "notsame", "isaSame", "isasame", "checksame", "isSimilar", "isaSimilar", "isiSame", "checkSame", "notSame", " isRight"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tInputStream in = System.in;\\n\tPrintStream out = System.out;\\n\\n\tpublic void _main(String[] args) {\\n\t\tScanner sc = new Scanner(in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tint M = sc.nextInt();\\n\t\tint[] p = new int[M];\\n\t\tString[] S = new String[M];\\n\\n\t\tfor (int i = 0; i < M; i++) {\\n\t\t\tp[i] = sc.nextInt() - 1;\\n\t\t\tS[i] = sc.next();\\n\t\t}\\n\t\tsc.close();\\n\\n\t\tboolean[] ac = new boolean[N];\\n\t\tArrays.fill(ac, false);\\n\\n\t\tboolean[] b = new boolean[N];\\n\t\tfor(int i=0;i<M;i++) {\\n\t\t\tif(S[i].equals(\"AC\")) {\\n\t\t\t\tb[p[i]] = true;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\t\\n\t\tint numOfAC = 0;\\n\t\tint numOfWA = 0;\\n\\n\t\tfor (int i = 0; i < M; i++) {\\n\t\t\tif (S[i].equals(\"AC\")) {\\n\t\t\t\tif (!ac[p[i]]) { //AC\u6e08\u307f\u3067\u306a\u3044\u306a\u3089\\n\t\t\t\t\tnumOfAC++;\\n\t\t\t\t\tac[p[i]] = true;\\n\t\t\t\t}\\n\t\t\t\t//AC\u6e08\u307f\u306a\u3089\u3059\u3067\u306b\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u4f55\u3082\u3057\u306a\u3044\\n\t\t\t\t\\n\t\t\t} else { // WA\\n\t\t\t\tif (!ac[p[i]] && b[p[i]]) { //AC\u6e08\u307f\u3067\u306a\u3044\u306a\u3089\\n\t\t\t\t\tnumOfWA++; //\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u5897\u3084\u3059\\n\t\t\t\t}\\n\t\t\t\t//AC\u6e08\u307f\u306a\u3089\u30da\u30ca\u30eb\u30c6\u30a3\u306a\u3057\\n\t\t\t}\\n\t\t}\\n\\n\t\tout.println(numOfAC + \" \" + numOfWA);\\n\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main()._main(args);\\n\t}\\n}\\n", "target": "48", "substitutes": {"in": ["ic", "buffer", "ins", "din", "ex", "run", "path", "line", "data", "is", "con", "lin", "r", "init", "source", "win", "io", "input", "info", "stream", "src", "In", "f", "image", "c", "ini", "inn", "index", "m", "x", "config", "min", "read", "inf", "inner", "cli", "err", "reader", "exec", "connection", "log", "bin", "file", "inc", "error", "IN"], "out": ["print", "buffer", "ex", "res", "path", "line", "page", "data", "png", "name", "io", "results", "gen", "report", "output", "OUT", "list", "w", "str", "writer", "string", "Out", "o", "result", "object", "err", "write", "net", "obj", "log", "bin", "outs", "inc", "off", "cache", "error"], "sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "core", "slice", "ch", "server", "ss", "tc", " SC", "si", "cur", "asc", "sh", "search", "Sc", "SC", "cs", "bc", "sw", "src", "gc", "lc", "ci", "s", "c", "sp", "sa", "system", "sq", "uc", "sr", "cli", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "coll", "cam", "esc", "ctx", "cus", "sync"], "N": ["MN", "Num", "No", "NA", "C", "J", "State", " n", "Size", "U", "Node", "Y", "F", "Q", "P", "A", "NO", "T", "I", "Ni", "L", "R", "n", "B", "NM", "Ne", "V", "K", "D", "NT", "H", "Z", "O", "NS", "G", "W", "E", "X"], "M": ["MN", "IN", "MM", "DM", "JM", "Mi", "C", "Part", "J", "MC", "FM", "U", "Y", "Mass", "F", "Q", "P", "A", "MS", "Ma", "MD", "m", "T", "I", "CM", "MT", "L", "R", "OM", "n", "B", "ME", "NM", "V", "Mo", "K", "D", "H", "Z", "O", "G", "LM", "RM", "W", "E", "X"], "p": ["wp", "pi", "pc", "patch", "u", "span", "v", "a", "l", "ap", "pre", "ep", "part", "h", "P", "lp", "ps", "cp", "pa", "f", "s", "pair", "c", "pid", "m", "x", "sp", "np", "ip", "mp", "pe", "I", "hp", "q", "o", "op", "n", "tp", "k", "up", "pp", "y", "t", "bp"], "S": ["SI", "AS", "SS", "SL", "VS", "ST", "TS", "C", "U", "SU", "SC", "Sa", "Si", "Sc", "F", "SP", "Ps", "SH", "Q", "X", "GS", "P", "A", "SA", "Sign", "Spec", "s", "T", "I", "L", "R", "B", "St", "services", "V", "K", "H", "NS", "Ns", "DS", "G", "SR", "CS", "W", "Sl", "PS"], "i": ["isin", "multi", "qi", "a", "uli", "init", "info", "s", "phi", "uri", "ie", "o", "inner", "g", "cli", "ii", "zi", "me", "chi", "type", "bi", "ni", "iu", "id", "si", "ix", "name", "io", "f", "ci", "vi", "ui", "ini", "index", "eni", "d", "n", "j", "yi", "my", "fi", "pi", "it", "ei", "xi", "ji", "v", "x", "mu", "di", "I", "ai", "min", "gi", "err", "iv", "y", "ti", "hi", "ori", "ami", "u", "wei", "is", "ri", "source", "lc", "c", "m", "ip", "e", "mi", "isi", "li", "oi"], "ac": ["ace", "aw", "enc", "ic", "Acc", "oc", "rac", "Ac", "pc", "sac", "ad", "mac", "acs", "fac", "a", "ap", "aut", "aa", "bc", "app", "s", "c", "cas", "ak", "iac", "w", "bo", "sa", "acc", "uc", "ai", "alpha", "af", "n", "ca", "acl", "AC", "anc", "k", "jac", "auc", "cc", "as", "ab", "cache", "am", "ec"], "b": ["u", "pb", "abb", "rb", "v", "bol", "ba", "a", "r", "bf", "bc", "lb", "bu", "bool", "pa", "f", "s", "c", "w", "bo", "base", "sa", "e", "acc", "o", "d", "n", "g", "B", "ca", "nb", "k", "sb", "bb", "bd", "ab", "ob"], "numOfAC": ["sumofC", "numIfC", "numIfAc", "numIfAC", "numofAC", "sumofAc", "sumOfAc", "numCompac", "numOfAc", "numofC", "sumofAC", "sumOfac", "numofac", "numIfac", "numCompAC", "numOfC", "sumofac", "numOfac", "numofAc", "numCompAc", "sumOfC", "numCompC", "sumOfAC"], "numOfWA": ["numOfWP", "numOfWM", "netOfWA", "numofWI", "netOfWP", "numOrWP", "netOfWM", "numOrWM", "netOfWI", "numOrWI", "numofWA", "numOrWA", "numofWP", "numofWM", "numOfWI"]}}
{"code": "import java.util.*;\\n\\n\\n class Main\\n { \\n\tpublic static void main(String args[])\\n \t{ \\n\\n\t\tScanner sc =new Scanner(System.in);\\n\t\tlong l = sc.nextInt();\\n\t\tlong r = sc.nextInt();\\n\t\t\\n\t\tlong res = Integer.MAX_VALUE;\\n\t\t\\n\t\tif(r - l >= 2019){\\n\t\t\tSystem.out.println(0); \\n\t\t\treturn;\\n\t\t}\\n\t\t\\n\t\tfor(long i = l; i <= r; i++){\\n\t\t\tfor(long j = i+1; j <= r; j++){\\n\t\t\t\tres = Math.min(res, i*j%2019);\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(res);\\n\\n \t}\\n }", "target": "193", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "ser", "ch", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "cv", "lc", "cer", "c", " scr", "sp", "acc", "system", "sq", "uc", "soc", "se", "ner", " Sc", "ocr", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "ctx", "cus", "sync"], "l": ["p", "u", "ln", "v", "el", "lr", "ur", "ls", "lin", "lu", "h", "z", "nl", "len", "lp", "lb", "f", "lc", "loc", "sl", "c", "m", "lo", "e", "ul", "o", "L", "d", "n", "kl", "b", "li", "dl", "k", "ol", "rl", "la", "lf", "t", "ll"], "r": ["rn", "ir", "p", "u", "hr", "rb", "ro", "rs", "pr", "v", "ar", "lr", "fr", "ur", "rh", "right", "h", "row", "nr", "z", "er", "c", "m", "w", "x", "rev", "rg", "q", "rf", "R", "d", "n", "sr", "b", "err", "rr", "rel", "rd", "rc", "cr", "rx", "rt", "range", "ru", "re"], "res": ["score", "reset", "rss", "val", "rus", "rez", "pres", "id", "rep", "rs", "arr", "vals", "rh", "right", "row", "results", "reg", "ps", "RES", "mr", "os", "rows", "ms", "resp", "rev", "max", "abs", "rest", "prev", "result", "err", "gr", "ress", "ras", "ries", "js", "sol", "rel", "ret", "req", "rc", "ris", "rys", "rx", "Res", "range", "real", "resolution", "resh", "re"], "i": ["hi", "bi", "ori", "pi", "ni", "iu", "p", "it", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "ik", "ri", "start", "io", "z", "f", "lc", "ci", "ui", "c", "ini", "index", "eni", "phi", "x", "ip", "e", "I", "ie", "ai", "o", "mi", "n", "b", "ii", "zi", "li", "oi", "yi", "in", "y", "ind", "ti", "fi"], "j": ["bi", "dj", "jj", "jc", "p", "oj", "u", "J", "qi", "bj", "ji", "pr", "v", "jp", "si", "ij", "fr", "z", "h", "f", "s", "key", "x", "jo", "e", "ja", "uj", "rev", "ie", "q", "o", "d", "n", "g", "ii", "b", "li", "js", "k", "je", "kj", "rel", "job", "y", "jl", "aj"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        String Sa = scan.next();\\n        String Sb = scan.next();\\n        String Sc = scan.next();\\n \\n        boolean ok = true;\\n        char turn = 'a';\\n        char win = 'a';\\n \\n        while (ok) {\\n            switch (turn) {\\n                case 'a':\\n                    if (Sa.equals(\" \")){\\n                        win = 'A';\\n                        ok = false;\\n                    }else {\\n                        turn = Sa.charAt(0);\\n                        Sa = ret(Sa);\\n                    }\\n                    break;\\n                case 'b':\\n                    if (Sb.equals(\" \")){\\n                        win = 'B';\\n                        ok = false;\\n                    }else {\\n                        turn = Sb.charAt(0);\\n                        Sb = ret(Sb);\\n                    }\\n                    break;\\n                case 'c':\\n                    if (Sc.equals(\" \")){\\n                        win = 'C';\\n                        ok = false;\\n                    }else {\\n                        turn = Sc.charAt(0);\\n                        Sc = ret(Sc);\\n                    }\\n                    break;\\n            }\\n \\n        }\\n        System.out.println(win);\\n    }\\n \\n    public static String ret(String str) {\\n        if (str.length() != 1) {\\n            return str.substring(1);\\n        } else {\\n            return \" \";\\n        }\\n    }\\n}", "target": "11", "substitutes": {"scan": ["nn", " Scan", "see", "watch", "connect", "walk", "bug", "slice", "ln", "apply", "auto", "run", "search", "l", "fan", "r", "ban", "sin", "row", "er", "gen", "conn", "query", "feed", "match", "send", "an", " scanner", "system", "ry", "skip", "read", "n", "ignore", "sys", "se", "ner", "network", "reader", "pin", "in", "parse", "Scan", "clean", "san", "pan", "look", "dot", "sc", "out", "can", "ann", "sync"], "Sa": ["Pa", "Lu", "Cra", "Ha", "Va", "Ca", "Ak", "Os", "Ru", "za", "Ba", "a", "Cas", "SC", "Si", "Az", "Fa", "Cla", "Sav", "Yu", "Code", "SA", "Ma", "Su", "Sign", "Wan", "In", "Capt", "Se", "sea", "Na", "sa", "Ga", "Sea", "Sen", "ai", "Str", "St", "Ar", "Win", "Ra", "Ka", "Dar", "So", "Wa", "La", "Ta", "Turn", "Sah"], "Sb": ["Selb", "Stbr", " Sf", "Pa", "Pc", "Sena", "Senp", "Tbl", "Insp", "Insbl", "Ud", "Tnb", "Uf", "Osbl", "Senc", "Slb", "Sp", "Pp", "Pb", "Osnb", "Sebl", "Bwb", "Cb", "Cd", "Stb", "Slf", "Stwb", "Insb", "Cf", "Sbl", "Snb", "Sf", "Cc", "Selbl", "Osa", "Sbr", "Osb", "Insnb", "Sewb", "Osc", "Bc", "Ub", "Slbr", "Sec", "Self", "Selbr", "Tp", " Sd", "Senb", "Sd", "Uc", "Bbl", "Osp", "Seb", "Tb", "Bb", "Stc", "Stbl", "Swb", "Slbl", "Stf"], "Sc": ["Pa", "Mac", "Lu", "Cra", "S", "Loc", "Va", "Co", "C", "Cr", "Ca", "Vol", "Ru", "Cor", "Sp", "Cas", "Cla", "SC", "Az", "Config", "Sav", "Code", "Sign", "Ma", "Su", "Cle", "c", "Se", "Mc", "Ch", "Seg", "Sk", "Na", "Ga", "Col", "Sn", "Str", "Case", "Sch", "Cs", "St", "Win", "Kh", "Ka", "Dar", "Scan", "Sh", "Cash", "Cro", "Cur", "Esc", "G", "Cl", "Sw", "Ta", "Cat", "Desc", "Dec", "Go", "sc", "La", "Sl"], "turn": ["round", "direction", "transform", "effect", "call", "pen", "draw", "focus", "cost", "move", "vel", "wind", "run", "version", "circ", "mot", "ct", "sign", "con", "vine", "cross", "vert", "roll", "fall", "event", "input", "man", "winner", "session", "brand", "cas", "style", "won", "rain", "wave", "rol", "cin", "witch", "urn", "oct", "act", "miss", "rank", "feat", "cycle", "cast", "pos", "work", "bin", "correct", "inc", "dec", "play", "Turn", "pull", "turned", "can"], "win": ["pattern", "wait", "enc", "pen", "draw", "focus", "walk", "vc", "rec", "val", "ln", "world", "move", "run", "wan", "circ", "mot", "screen", "con", "ban", "vine", "cmd", "gen", "winner", "inn", "cas", "won", "wave", "rain", "wx", "build", "w", "cin", "WIN", "col", "feat", "rank", "widget", "pick", "kin", "year", "Win", "cycle", "work", "in", "lang", "vin", "bin", "clean", "word", "inc", "warn", "dec", "play", "game", "act", "can", "window"], "ok": ["all", "walk", "oc", "bug", "it", "ko", "ck", "id", "show", "fail", "allow", "auto", "cb", "ng", "valid", "good", "block", "info", "co", "Ok", "app", "ick", "loc", "f", "key", "check", "ak", "hack", "or", "load", "OK", "pull", "full", "ack", "col", "oks", "o", "err", "yes", "work", "k", "_", "found", "kit", "clean", "log", "ait", "quick", "ready", "lock", "off", "kind", "coll", "error", "ll", "sync"], "str": ["div", "enc", "ch", "tr", "pr", "arr", "cur", "res", "STR", "data", "name", "fr", "ctr", "r", "iter", "cs", "input", "char", "er", "br", "dr", "f", "lc", "c", "sp", "st", "text", "string", "kr", "rev", "stri", "Str", "inner", "result", "sr", "err", "ring", "obj", "rip", "form", "in", "txt", "struct", "cr", "out", "coll"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        System.out.println(execute(sc.nextInt(),sc.nextInt(),sc.nextInt()));\\n\\n    }\\n\\n    public static String execute(int a1,int a2,int a3) {\\n\\n        if(a1 + a2 + a3 <=21){\\n            return \"win\";\\n        }\\n        return \"bust\";\\n    }\\n}", "target": "129", "substitutes": {"sc": ["cl", "sche", "enc", "nc", "sci", "scope", "pc", "com", "ch", "ss", " SC", "cur", "asc", "sh", "search", "Sc", "SC", "ct", "bc", "cs", "sw", "cv", "src", "lc", "ci", "c", "cer", "sp", "sq", "uc", "soc", "ca", "cle", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "ec", "esc", "sync"], "a1": ["p1", "p01", " a01", " a8", "alpha8", "sa1", " aone", "alpha2", "alphaone", "sa2", "p3", "aone", "sa8", "alpha3", "alpha1", "a01", "a8", "alpha01", "pone", "sa3"], "a2": ["A1", " a5", "an2", "alpha4", "alpha2", "sa5", "an4", "sa2", "an5", "antwo", "a02", "a4", "A02", "atwo", "alpha02", "A2", " a02", " atwo", "sa4", "alpha1", "a5", "satwo", " a4", "A4"], "a3": ["p1", "p5", "A1", " a5", "A3", "alpha4", "alpha2", "a4", "p3", "A2", "alpha3", "A5", "alpha1", "a6", "a5", "p6", " a4", "A4", "A6", " a6"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\nScanner sc = new Scanner(System.in);\\n\t\tint r = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint[][] nums = new int[r + 1][c + 1];\\n\t\tfor (int i = 0; i < r; i++) {\\n\t\t\tfor (int j = 0; j < c; j++) {\\n\t\t\t\tint a = sc.nextInt();\\n\t\t\t\tnums[i][j] = a;\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor (int i = 0; i < r + 1; i++) {\\n\t\t\tfor (int j = 0; j < c + 1; j++) {\\n\t\t\t\tSystem.out.print(nums[i][j]);\\n\t\t\t\tif (j != c) {\\n\t\t\t\t\tSystem.out.print(\" \");\\n\t\t\t\t}\\n\\n\t\t\t\tif (r > i) {\\n\t\t\t\t\tnums[r][j] += nums[i][j];\\n\t\t\t\t\tnums[i][c] += nums[i][j];\\n\t\t\t\t}\\n\\n\t\t\t\tif (j == c) {\\n\t\t\t\t\tSystem.out.println();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n    }\\n}\\n\\n", "target": "23", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "com", "ch", "tc", "ss", "sec", "server", " SC", "cur", "asc", "sh", "fc", "Sc", "SC", "screen", "bc", "cs", "sw", "cv", "src", "lc", "cer", " scr", "sp", "ec", "system", "sq", "uc", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "out", "esc", "cus", "sync"], "r": ["rar", "ir", "p", "u", "ro", "rb", "tr", "rs", "pr", "v", "ar", "l", "fr", "ur", "rh", "yr", "h", "z", "nr", "f", "dr", "er", "s", "m", "w", "x", "or", "e", "rg", "q", "o", "rf", "d", "R", "n", "g", "b", "sr", "err", "rr", "k", "in", "rc", "cr", "rt", "t", "ru", "re"], "c": ["cl", "mc", "arc", "jc", "count", "p", "pc", "u", "C", "ch", "v", "cur", "l", "cu", "con", "z", "h", "cs", "cp", "cor", "f", "lc", "ci", "loc", "dc", "cm", "s", "m", "w", "x", "e", "uc", "cf", "q", "o", "ce", "d", "n", "g", "b", "ca", "ac", "k", "rc", "cc", "cr", "y", "ec", "xc"], "nums": [" nals", "numes", "cumbers", " nases", "Numps", "Num", "Nages", "locumbers", "locems", "unages", "num", "unums", " numps", "cems", " numbers", "nubs", "uums", " nubs", "cums", " nummies", "Nummies", "neums", "Nums", "nummies", "cals", "cummies", "uummies", "numbers", "unases", "unims", "numps", "nems", "Numbers", "locummies", "cum", "uumps", "Nals", "neummies", "uumbers", "locums", "Nubs", "nases", "neubs", " nims", "unumbers", "nages", " nages", "cumes", "cases", " num", "nals", "cubs", "nims", "unum", "neumbers", " nems", "unumes", " numes", "Nims"], "i": ["bi", "ir", "im", "api", "ori", "pi", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "l", "ib", "ik", "ri", "io", "z", "info", "f", "ci", "s", "ui", "ini", "eni", "m", "x", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "cli", "ii", "b", "li", "oi", "yi", "in", "y"], "j": ["java", "dj", "jj", "jc", "p", "iu", "oj", "it", "u", "adj", "J", "qi", "bj", "ji", "ch", "v", "jp", "si", "l", "ij", "io", "z", "h", "aj", "f", "ui", "w", "x", "e", "note", "jet", "ja", "uj", "ie", "q", "o", "n", "b", "ii", "li", "je", "js", "obj", "kj", "k", "job", "y", "jl", "th", "ind", "jo"], "a": ["ana", "count", "p", "ia", "ka", "na", "u", "ba", "name", "aa", "A", "ha", "oa", "pa", "f", "au", "ga", "an", "sa", "ae", "ea", "ai", "alpha", "o", "b", "ca", "ac", "sup", "fa", "as", "la", "area", "ab", "da", "ma", "am", "va", "aj"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static Scanner sc;\\n\tpublic static void main(String[] args){\\n\t\tsc=new Scanner(System.in);\\n\t\tString taro,hana;\\n\t\tint tp=0,hp=0;\\n\t\tint n=sc.nextInt();\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\ttaro=sc.next();\\n\t\t\thana=sc.next();\\n\t\t\tif(taro.compareTo(hana)==0){\\n\t\t\t\ttp+=1;\\n\t\t\t\thp+=1;\\n\t\t\t}else if(taro.compareTo(hana)>0)tp+=3;\\n\t\t\telse hp+=3;\\n\t\t}\\n\t\tSystem.out.println(tp+\" \"+hp);\\n\t}\\n}", "target": "206", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "core", "ck", "ch", "sec", "tc", " SC", "cur", "asc", "sh", "fc", "search", "Sc", "SC", "ct", "cb", "comp", "bc", "cs", "sw", "cv", "cor", "cmp", "lc", "ci", "c", "ga", "cer", "sp", "acc", "sq", "system", "uc", "cli", "ca", "sr", "se", " Sc", "anc", "exec", "sb", "scan", "isc", "osc", "rc", "cc", "cr", "cont", "sch", "ctl", "squ", "spec", "ec", "esc", "ctx", "coll"], "taro": ["tosa", "pamar", " tao", "tao", "pargo", "Taron", "targo", "hora", "hosa", "Targo", "tora", "hao", "pero", "hero", "ttero", " tosa", "tamar", "Tamar", "haron", "taaron", "Tro", "ttaro", "utao", "taaru", "paco", " taco", "haru", "taru", "Tero", " tora", "utaro", " tro", " tamar", "utora", "ttaco", "taco", "pro", "taero", "tero", "taron", "Taru", "taaro", "ttargo", "utosa", "paro", "haro", "Taro", "Taco", "tro"], "hana": ["ahala", "phana", "ohanna", " haro", "hara", "hanna", "tarin", "oharo", "tenna", "tana", " henna", "hao", " hanna", "rhanna", "tala", " hiana", "haarin", "rhao", "ahana", "ohao", "hiana", "ohana", "rhara", "rhiana", "haenna", "hala", "phanna", "ahanna", "hanaro", "ahiana", "henna", "haala", "pharo", "phara", "harin", "rhana", " hao", "haro", "hanana", "haana", "rharo", "rhala", "hanara", "hananna", " harin", " hala"], "tp": ["php", "wp", "offset", "tmp", "ppo", "pi", "p", "pc", "prefix", "pb", "qt", "dp", "bp", "jp", "esp", "ht", "gap", "ph", "bsp", "lp", "cp", "ps", "pa", "ppa", "pkg", "sp", "np", "ip", "mp", "pt", "fp", "TP", "gp", "vp", "cli", "bps", "tap", "cpp", "prot", "txt", "type", "pp", "tt", "pps", "t", "tf"], "hp": ["php", "wp", "offset", "ppo", "api", "pi", "hi", "hop", "p", "xp", "pha", "http", "dp", "mph", "jp", "uh", "pg", "ht", "bh", "rh", "ph", "h", "ha", "lp", "cp", "pa", "ah", "pai", "pkg", "np", "fp", "hyp", "gp", "hw", "hap", "padding", "ih", "cpp", "hm", "hh", "prot", "pp", "oh", "phy", "HP", "bp"], "n": ["nn", "nc", "pi", "nt", "ni", "p", "u", "num", "ln", "N", "l", "sn", "r", "z", "h", "len", "f", "fn", "s", "c", "ne", "m", "w", "x", "np", "q", "o", "d", "ns", "g", "b", "pn", "nb", "network", "j", "net", "k", "y", "en"], "i": ["api", "pi", "ori", "ni", "p", "iu", "it", "u", "multi", "qi", "xi", "v", "si", "a", "ri", "io", "z", "f", "ci", "c", "ini", "ui", "index", "eni", "phi", "x", "ip", "e", "di", "I", "ie", "ai", "o", "mi", "ii", "b", "li", "j", "oi", "in", "chi", "t", "ti"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] array = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            array[i] = sc.nextInt();\\n        }\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            while(true) {\\n                if (array[i] % 2 == 0) {\\n                    array[i] /= 2;\\n                    ans++;\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n        System.out.println(ans);\\n    }    \\n}\\n", "target": "39", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", "server", " SC", "cur", "asc", "Sc", "SC", "screen", "bc", "cs", "sw", "cv", "cor", "src", "lc", "ci", "c", "cer", "sp", "system", "sq", "uc", "set", "se", "ner", " Sc", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus", "sync"], "n": ["nn", "nc", "nt", "ni", "count", "p", "size", "u", "num", "nan", "N", "ln", "v", "l", "sn", "r", "z", "nl", "len", "f", "s", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "j", "pos", "k", "net", "no", "in", "number", "y", "en", "t"], "array": ["offset", "function", "count", "record", "database", "integer", "slice", "size", "map", "view", "allow", "align", "v", "arr", "auto", "average", "ar", "Array", "answer", "sample", "row", "book", "collection", "app", "arrow", "instance", "image", "pair", "order", "index", "an", "list", "vector", "string", "element", "result", "object", "ray", "angle", "scan", "analysis", "group", "number", "as", "address", "area", "shape", "section", "range", "square", "batch"], "i": ["bi", "hi", "api", "pi", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "ri", "io", "init", "info", "abi", "f", "ci", "ui", "ini", "index", "eni", "phi", "x", "uri", "ip", "e", "di", "I", "ie", "ai", "min", "o", "gi", "inner", "mi", "ii", "cli", "li", "j", "oi", "in", "chi", "y", "ki", "my", "ti", "fi"], "ans": ["nn", "ana", "sk", "ars", "aned", "na", "errors", "atches", "ins", "nan", "aus", "ks", "span", "ss", "lan", "anon", "aces", "a", "atan", "reads", "ions", "ls", "eps", "cs", "lines", "s", "rows", "os", "nas", "ds", "ants", "an", "x", "ops", "cons", "ANS", "leans", "ns", "ats", "anc", "scan", "outs", "as", "runs", "annot", "anners", "ons", " scans", "amps", "ays", "can", "ann"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString info = br.readLine();\\n\\n\t\tchar letter = info.charAt(0);\\n\t\tchar next = (char) (letter+1);\\n\t\tif(letter==122) {\\n\t\t\tSystem.out.println(\"a\");\\n\t\t}else {\\n\t\t\tSystem.out.println(next);\\n\t\t}\\n\t}\\n}\\n", "target": "150", "substitutes": {"br": ["div", "bi", "ori", "ber", "hr", "rb", "tr", "arr", "i", "cb", "fr", "r", "bf", "bh", "io", "iter", "bridge", "bc", "init", "bs", "dr", "report", "orb", "mr", "BR", "bro", "str", "string", "Br", "result", "b", "err", "body", "gr", "reader", "obj", "buf", "bb", "box", "bt", "cr", "bar", "ref"], "info": ["Info", "fo", "hi", "api", "now", "id", "json", "auto", "i", "information", "line", "data", "extra", "name", "about", "start", "entry", "init", "iter", "source", "f", "feed", "iso", "str", "text", "string", "inf", "INFO", "prev", "stat", "b", "result", "handler", "current", "obj", "reader", "in", "txt", "afi", "error"], "letter": ["font", "offset", "print", "flower", "sheet", "space", "id", "character", "Letter", "i", "family", "line", "point", "part", "entry", "start", "iter", "char", "f", "length", "journal", "last", "key", "style", "pointer", "index", "base", "fifth", "col", "column", "cycle", "pos", "chapter", "no", "sequence", "position", "type", "digit", "level", "word", "number", "letters", "section", "quarter"], "next": ["this", "leading", "second", "expected", "now", "future", "more", "secret", "dollar", "character", " Next", "Next", "line", "data", "start", "valid", "good", "end", "first", "char", "last", "key", "string", "code", "prev", "foo", "current", "vious", "open", "step", "sequence", "missing", "dot", "append"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tScan sc = new Scan();\\n\t\tint K = sc.scanInt();\\n\t\tSolABC162_c sol = new SolABC162_c(K);\\n\t\tsol.calcMu();\\n\t\tsol.calcGCDTuple(3);\\n\t}\\n}\\n\\nclass SolABC162_c {\\n\tint K;\\n\tint[] mu, prime;\\n\\n\tpublic SolABC162_c(int K) {\\n\t\tthis.K = K;\\n\t\tmu = new int[K + 1];\\n\t\tprime = new int[K + 1];\\n\t\tfor (int i = 1; i <= K; ++i) {\\n\t\t\tmu[i] = 1;\\n\t\t\tprime[i] = 1;\\n\t\t}\\n\t}\\n\\n\tvoid calcMu() {\\n\t\tfor (int i = 2; i <= K; ++i) {\\n\t\t\tif (prime[i] == 1) {\\n\t\t\t\tfor (int j = i; j <= K; j += i) {\\n\t\t\t\t\tif (j > i)\\n\t\t\t\t\t\tprime[j] = 0;\\n\t\t\t\t\tif (j % (i * i) == 0)\\n\t\t\t\t\t\tmu[j] = 0;\\n\t\t\t\t\tmu[j] = -mu[j];\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tvoid calcGCDTuple(int cnt) {\\n\t\tlong res = 0;\\n\t\tfor (int d = 1; d <= K; ++d) {\\n\t\t\tlong tmp = 0;\\n\t\t\tfor (int s = 1; s <= K / d; ++s) {\\n\t\t\t\ttmp += (mu[s] * Math.pow(K / (d * s), cnt));\\n\t\t\t}\\n\t\t\tres += tmp * d;\\n\t\t}\\n\t\tSystem.out.println(res);\\n\t}\\n}\\n\\nclass Scan {\\n    private byte[] buf=new byte[1024];\\n    private int index;\\n    private InputStream in;\\n    private int total;\\n\t\\n    public Scan()\\n    {\\n        in=System.in;\\n    }\\n    public int scan()throws IOException\\n    {\\n        if(total<0)\\n        throw new InputMismatchException();\\n        if(index>=total)\\n        {\\n            index=0;\\n            total=in.read(buf);\\n            if(total<=0)\\n            return -1;\\n        }\\n        return buf[index++];\\n    }\\n    public int scanInt()throws IOException\\n    {\\n        int integer=0;\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        int neg=1;\\n        if(n=='-')\\n        {\\n            neg=-1;\\n            n=scan();\\n        }\\n        while(!isWhiteSpace(n))\\n        {\\n            if(n>='0'&&n<='9')\\n            {\\n                integer*=10;\\n                integer+=n-'0';\\n                n=scan();\\n\t\t\t\t\\n            }\\n            else throw new InputMismatchException();\\n        }\\n        return neg*integer;\\n    }\\n\tpublic long scanLong()throws IOException\\n    {\\n        long integer=0;\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        int neg=1;\\n        if(n=='-')\\n        {\\n            neg=-1;\\n            n=scan();\\n        }\\n        while(!isWhiteSpace(n))\\n        {\\n            if(n>='0'&&n<='9')\\n            {\\n                integer*=10;\\n                integer+=n-'0';\\n                n=scan();\\n            }\\n            else throw new InputMismatchException();\\n        }\\n        return neg*integer;\\n    }\\n    public double scanDouble()throws IOException\\n    {\\n        double doub=0;\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        int neg=1;\\n        if(n=='-')\\n        {\\n            neg=-1;\\n            n=scan();\\n        }\\n        while(!isWhiteSpace(n)&&n!='.')\\n        {\\n            if(n>='0'&&n<='9')\\n            {\\n                doub*=10;\\n                doub+=n-'0';\\n                n=scan();\\n            }\\n            else throw new InputMismatchException();\\n        }\\n        if(n=='.')\\n        {\\n            n=scan();\\n            double temp=1;\\n            while(!isWhiteSpace(n))\\n            {\\n                if(n>='0'&&n<='9')\\n                {\\n                    temp/=10;\\n                    doub+=(n-'0')*temp;\\n                    n=scan();\\n                }\\n                else throw new InputMismatchException();\\n            }\\n        }\\n        return doub*neg;\\n    }\\n    public String scanString()throws IOException\\n    {\\n        StringBuilder sb=new StringBuilder();\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        while(!isWhiteSpace(n))\\n        {\\n            sb.append((char)n);\\n            n=scan();\\n        }\\n        return sb.toString();\\n    }\\n    private boolean isWhiteSpace(int n)\\n    {\\n        if(n==' '||n=='\\n'||n=='\\r'||n=='\\t'||n==-1)\\n        return true;\\n        return false;\\n    }\\n}\\n\\n", "target": "6", "substitutes": {"sc": ["cl", "mc", "nc", "sci", "scope", "pc", "C", "ch", " SC", "asc", "search", "Sc", "SC", "scl", "bc", "cs", "sw", "lc", "c", " scr", "sp", "sq", "uc", "sr", "ca", " Sc", "anc", "scan", "sel", "osc", "Scan", "rc", "cc", "cr", "Cl", "esc", "sync"], "K": ["KK", "S", "TH", "DK", "Ku", "C", "IK", "J", "ID", "Ak", "N", "ks", "M", "Power", "CH", "U", "Y", "X", "KB", "NK", "Work", "F", "Q", "KO", "P", "Point", "HK", "OK", "Sk", "Key", "T", "I", "AK", "Mask", "PK", "L", "unk", "Max", "B", "V", "Kind", "k", "KR", " k", "UC", "Ka", "D", "DC", "KI", "H", "Z", "O", "UK", "G", "Length", "KE", "KS", "SK", "E", "Ke", " N"], "sol": ["nn", "sche", "bel", "sci", "opt", "map", "arel", "serv", " Sol", "si", "sql", "isol", "oln", "el", "sat", "cel", "sect", "Sol", "syn", "scl", "nl", "olve", "conn", "sl", "lib", "shell", "sa", "mol", "rol", "ctrl", "sq", "ssl", "ul", "min", "ols", "olver", "soc", "sync", "cli", "ii", "util", "gr", "js", "ol", "sel", "rel", "ell", "rl", "coll", "spec", "wl", "il", "OL"], "mu": ["bi", "mas", "module", "mia", "pi", "mon", "pha", "u", "multi", "nu", "qi", "meta", "wei", "tu", "mac", "ji", "xi", "si", "vol", "mot", "cu", "mini", "uni", "mic", "mm", "hu", "lu", "mo", "mut", "perm", "loc", "ui", "wave", "wi", "m", "phi", "lambda", "mol", "fu", "num", "vu", "alpha", "o", "mi", "ju", "wa", "mega", "chi", "mn", "inv", "mean", "mus", "ho", "ima", "Mu", "ma", "po", "mag"], "prime": ["ut", "none", "py", "pi", "p", "size", "slice", "u", "mode", "nu", "po", "ji", "pr", "pot", "si", "mini", "pre", "power", "use", "sample", "zip", "ph", "info", "init", "mo", "ps", "pse", "Prime", "appa", "sum", "key", "pm", "m", "phi", "ve", "pe", "PI", "np", "mp", "ta", "max", "alpha", "mi", "tie", "se", "tp", "su", "me", "sup", "seed", "scale", "chi", "tri", "lock", "pri", "ma", "pose", "primary", "thin"], "i": ["bi", "hi", "api", "ori", "pi", "ni", "iu", "p", "it", "u", "id", "one", "multi", "qi", "iii", "ji", "xi", "ei", "v", "si", "ix", "l", "a", "ij", "ri", "ik", "uli", "start", "io", "init", "info", "z", "abi", "f", "ci", "ui", "c", "ini", "eni", "m", "x", "uri", "phi", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "li", "k", "oi", "yi", "y", "ki", "ind", "ti", "fi"], "j": ["py", "dj", "jj", "api", "ori", "ni", "p", "oj", "adj", "u", "it", "J", "qi", "bj", "ji", "v", "jp", "pr", "l", "el", "ij", "fr", "z", "aj", "f", "br", "ui", "x", "e", "di", "jet", "ja", "other", "uj", "ie", "q", "o", "b", "ii", "dy", "li", "js", "obj", "je", "k", "y", "jl", "jen", "ind", "jo"], "cnt": ["pnet", "icrt", "cNT", "icwd", "pwd", "pcrt", "fcnt", "cn", "CNT", "Cant", " cant", " cNT", "pcnet", "pnt", "crt", "Cn", "fcant", "fcNT", "icnet", "pcwd", "pcnt", "cnet", " cn", "cwd", "cant", "prt", "fcn", "Cnt", "icnt"], "res": ["p", "rez", "pres", "rep", "rs", "arr", "data", "pre", "rap", "part", "r", "rem", "bytes", "rh", "results", "nr", "ps", "RES", "mr", "ms", "Rs", "sum", "reply", "sp", "mp", "resp", "rev", "ptr", "max", "rest", "result", "err", "ras", "rex", "obj", "js", "frac", "response", "ret", "rc", "req", "our", "rx", "Res", "rt", "real", "proc", "resolution", "pad", "re"], "d": ["sd", "dx", "p", "dn", "id", "u", "nd", "ad", "od", "l", "dir", "r", "dat", "pd", "z", "h", "f", "fd", "dc", "c", "ds", "t", "m", "w", "x", "di", "e", "du", "q", "dd", "ld", "b", "dim", "dy", "dl", " dd", "dt", "k", "D", "cd", "da", "dh"], "tmp": ["buff", "fb", "py", "offset", "api", "p", "test", "emp", "rb", "stuff", "data", "extra", "pre", "part", "mm", "r", "vt", "duration", "cb", "zip", " result", "cmp", "sum", "wx", "sp", "np", "img", "mp", "resp", "ptr", "alpha", "result", "nb", "cache", "tp", "obj", "qa", "sup", "su", "flat", "amp", "beta", "bb", "txt", "qq", "req", "term", "our", "area", "rt", "proc", "out", "pad"], "s": ["S", "sd", "ts", "p", "u", "less", "ss", "v", "si", "sh", "l", "a", "qs", "is", "sv", "es", "ls", "r", "ws", "ys", "seconds", "z", "h", "cs", "ps", "f", "lines", "vs", "sl", "c", "ms", "ds", "states", "side", "m", "w", "dos", "e", "sq", "ses", "o", "g", "gs", "b", "ns", "sets", "site", "js", "k", "su", "xs", "y", "spec", "t"], "buf": ["buff", "fb", "vec", "buffer", "Buff", "pb", "queue", "rb", "Buffer", "ba", "pool", "db", "cb", "data", "bh", "bc", "cv", "br", "fd", "cas", " buff", "uf", "bag", "config", "cap", "fp", "uc", "cf", "alloc", "context", " buffer", "b", "fab", "nb", "flush", "bd", "rc", "box", "av", "ref", "wb", "proc", " buffers", "batch", "va", "pad", "ctx"], "index": ["all", "offset", "initial", "option", "count", "prefix", "slice", "id", "num", "si", "search", "page", "part", "partial", "start", "valid", "value", "iter", "error", "input", "end", "info", "len", "length", "ticket", "post", "row", "sum", "pointer", "key", "weight", "action", "x", "list", "full", "active", "token", "ind", "max", "alpha", "element", "result", "limit", "loop", "open", "current", "pos", "connection", "Index", "position", "type", "inc", "fix", "match", "batch", "default", "array", "query"], "in": ["this", "isin", "inet", "id", "login", "ins", "din", "ex", "binary", "url", "line", "data", "is", "lin", "con", "r", "part", "init", "source", "win", "input", "get", "src", "In", "f", "conn", "image", "inn", "c", "ini", "m", "nin", "cin", "socket", "ssl", "min", "gin", "inf", "inner", "read", "rin", "kin", "err", "ac", "again", "pass", "reader", "exec", "pin", "bin", "file", "as", "inc", "IN", "out"], "total": ["otal", "complete", "all", "offset", "parent", "nt", "count", "toc", "size", "html", "null", "next", "multi", "meta", "json", "page", "progress", "data", "partial", "part", "start", "valid", " Total", "iter", "info", "value", "len", "percent", "length", "f", "last", "sum", "key", "tax", "Total", "base", "list", "quant", "full", "token", "max", "translation", "comment", "zero", "result", "limit", "current", "qa", "fat", "no", "scale", "serial", "type", "error", "post"], "integer": ["nc", "initial", "count", "p", "ment", "it", "num", "N", "v", "iter", "f", "c", "m", "text", "I", "max", "inner", "b", "nb", "current", "number", " N"], "n": ["nn", "this", "all", "nc", "nt", "p", "dn", "id", "num", "ln", "N", "v", "l", "sn", "r", "init", "un", "nl", "len", "c", "ne", "m", "ns", "g", "pn", "nb", "net", "k", "_", "no", "number", "en", "t"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tint ans = 0;\\n\t\tfor(int i = 0 ; i < s.length() ; i++) {\\n\t\t\tans += Integer.valueOf(s.charAt(i) + \"\");\\n          if(ans >= 9) {\\n\t\t\t\tans %= 9;\\n\t\t\t}\\n\t\t}\\n\\n\t\tsc.close();\\n\t\tSystem.out.println(ans == 0 ? \"Yes\" : \"No\");\\n\\n\t}\\n}\\n\\n", "target": "93", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "sf", "scope", "pc", "ch", "server", "ss", "sec", "tc", "cur", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "cv", "src", "gc", "lc", "sl", "c", "cer", "sp", "str", "sq", "uc", "g", "sr", "ca", "se", "ner", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "s": ["S", "ts", "sf", "p", "u", "ins", "ss", "si", "strings", "l", "bis", "is", "sv", "es", "ls", "ws", "fs", "its", "source", "bs", "f", "sl", "c", "os", "ds", "m", "str", "e", "ses", "string", "o", "abs", "gs", "ns", "su", "sb", "xs", "as"], "ans": ["les", "acts", "sk", "ars", "aned", "vers", "na", "errors", "ins", "nan", "ks", "ss", "rs", "lan", "aces", "vals", "es", "ions", "offs", "ls", "rules", "eps", "reads", "ips", "ations", "cs", "ians", "types", "vs", "rows", "nas", "cas", "ds", "ants", "ches", "an", " means", "x", "books", "ops", "cons", "ANS", "ents", "ns", "ras", "ats", "xs", "scan", "aps", "ids", "outs", "ons", " scans", "amps", "nos", "ays", "ann"], "i": ["hi", "bi", "pi", "ori", "ni", "p", "ami", "it", "u", "id", "qi", "xi", "v", "si", "ix", "data", "ri", "start", "io", "z", "h", "info", "abi", "f", "ci", "vis", "ui", "c", "key", "ini", "at", "m", "x", "mu", "uri", "eni", "ip", "e", "di", "I", "ai", "o", "gi", "d", "n", "gu", "ii", "li", "pass", "j", "oi", "k", "in", "chi", "t", "ti"]}}
{"code": "\\nimport java.util.*;\\n\\nclass Main{\\npublic static void main(String[] args){\\nScanner sc = new Scanner(System.in);\\nint W,H;\\nfor(;;){\\nH =sc.nextInt();\\nW =sc.nextInt();\\nif(H == 0) break;\\nfor(int a=0; a<W; a++) System.out.print(\"#\");\\nSystem.out.println();\\nfor(int c=2; c<H; c++){\\nSystem.out.print(\"#\");\\nfor(int b=2; b<W; b++) System.out.print(\".\");\\nSystem.out.println(\"#\");\\n}\\nfor(int a=0; a<W; a++) System.out.print(\"#\");\\nSystem.out.println();\\nSystem.out.println();\\n}\\n}\\n}", "target": "19", "substitutes": {"sc": ["sche", "mc", "sci", "nc", "enc", "scope", "pc", "ser", "ch", "tc", "ss", " SC", "cur", "asc", "Sc", "SC", "bc", "cs", "sw", "cv", "lc", "cer", " scr", "or", "sp", "system", "sq", "uc", "soc", "cle", "sem", "se", "ner", " Sc", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "squ", "out", "esc", "ctx", "sync"], "W": ["GW", "S", "We", "C", "N", "M", "v", "U", "Y", "SH", "F", "WB", "Q", "h", "WS", "A", "P", "VW", "Wh", "Width", "TW", "CW", " w", "w", "NW", "T", "I", "SW", "MW", "Web", "DW", "L", "R", "B", "FW", "V", "wa", "K", "DC", "D", "O", "Wa", "Z", "G", "E", "wh", "X"], "H": ["DH", "S", "Ha", "HI", "MH", "C", "J", "WH", "N", "M", "CH", "FH", "U", "Y", "SH", "F", "HC", "Q", "h", "EH", "A", "P", "Wh", "NH", "Ch", "w", "T", "RH", "L", "R", "B", "HH", "V", "K", "D", "O", "Z", "HS", "G", "HP", "E", "X"], "a": ["ana", "api", "p", "na", "u", "za", "ba", "i", "ar", "ao", "aa", "mA", "h", "A", "oa", "pa", "f", "ga", "w", "an", "ata", "x", "sa", "ea", "ae", "e", "action", "ada", "ai", "alpha", "o", "n", "ca", "ac", "wa", "fa", "as", "la", "y", "area", "ab", "da", "ma", "am", "va", "aj"], "c": ["cl", "p", "C", "u", "ad", "ch", "v", "i", "cu", "l", "ct", "cb", "h", "cs", "z", "cp", "f", "cm", "ci", "s", "w", "x", "cy", "ae", "e", "col", "uc", "cf", "code", "d", "n", "g", "ca", "ac", "j", "k", "cc", "cr", "y", "t"], "b": ["bi", "fb", "ub", "p", "u", "id", "abb", "rb", "v", "ba", "i", "l", "db", "cb", "r", "aa", "be", "h", "lb", "bc", "end", "bs", "eb", "f", "br", "s", "w", "base", "ae", "e", "o", "d", "n", "B", "body", "sb", "bb", "bd", "bin", "y", "wb", "ab", "ob"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\\n    public static void main(String[] args) throws IOException {\\n        Scanner s = new Scanner(System.in);\\n        int a = s.nextInt(),b=s.nextInt(),c=s.nextInt();\\n        if(a+b+c>=22) System.out.println(\"bust\");\\n        else System.out.println(\"win\");\\n\\n    }\\n\\n\\n\\n\\n}\\n\\n\\nclass Scanner\\n{\\n    StringTokenizer st;\\n    BufferedReader br;\\n\\n    public Scanner(InputStream s){\tbr = new BufferedReader(new InputStreamReader(s));}\\n\\n    public String next() throws IOException\\n    {\\n        while (st == null || !st.hasMoreTokens())\\n            st = new StringTokenizer(br.readLine());\\n        return st.nextToken();\\n    }\\n\\n    public int nextInt() throws IOException {return Integer.parseInt(next());}\\n\\n    public long nextLong() throws IOException {return Long.parseLong(next());}\\n\\n    public String nextLine() throws IOException {return br.readLine();}\\n\\n    public double nextDouble() throws IOException\\n    {\\n        String x = next();\\n        StringBuilder sb = new StringBuilder(\"0\");\\n        double res = 0, f = 1;\\n        boolean dec = false, neg = false;\\n        int start = 0;\\n        if(x.charAt(0) == '-')\\n        {\\n            neg = true;\\n            start++;\\n        }\\n        for(int i = start; i < x.length(); i++)\\n            if(x.charAt(i) == '.')\\n            {\\n                res = Long.parseLong(sb.toString());\\n                sb = new StringBuilder(\"0\");\\n                dec = true;\\n            }\\n            else\\n            {\\n                sb.append(x.charAt(i));\\n                if(dec)\\n                    f *= 10;\\n            }\\n        res += Long.parseLong(sb.toString()) / f;\\n        return res * (neg?-1:1);\\n    }\\n\\n    public boolean ready() throws IOException {return br.ready();}\\n\\n\\n}", "target": "129", "substitutes": {"s": ["Socket", "ins", "ks", "rs", "l", "its", "r", "fs", "Service", "sw", "utils", "lines", "south", "sl", "os", "states", "ds", "Input", "sys", "Server", "as", "ers", "p", "si", "strings", "es", "h", "d", "n", "sc", "t", "aws", "S", "times", "http", "less", "qs", "sv", "ws", "ings", "gets", "ing", "ses", "gs", "se", "sym", "storage", "stats", "in", "Storage", "sync", "ts", "sf", "features", "service", "ss", "opens", "bis", "ls", "session", "Session", "m", "or", "parts", "e", "ssl", "string", "events", "abs", "Str", "ns", "services", "fts"], "a": ["count", "p", "ia", "ad", "ba", "aa", "z", "h", "A", "oa", "ak", "an", "sa", "ae", "ai", "alpha", "d", "af", "n", "ca", "ac", "aaa", "fa", "y", "la", "as", "area", "ab", "da", "am", "va", "aj"], "b": ["fb", "p", "pb", "ad", "v", "ba", "l", "db", "cb", "r", "bf", "aa", "h", "bc", "lb", "bs", "e", "d", "n", "g", "B", "nb", "j", "bb", "bd", "y", "bt", "wb", "ab"], "c": ["p", "u", "C", "v", "l", "cu", "cb", "con", "r", "h", "z", "cs", "lc", "dc", "m", "w", "e", "cf", "d", "n", "g", "ca", "ac", "k", "cc", "y", "cy"], "st": ["cl", "bl", "ut", "inst", "ste", "ust", "nt", "sth", "ST", "p", "nd", "stable", "ss", "rs", "sh", "const", "ct", "sn", "std", "fr", "r", "store", "stage", "ft", "fe", "sw", "sl", "est", "sp", "sa", "str", "ist", "string", "pt", "stri", "rest", "ld", "sr", "St", "se", "sta", "ast", "sts", "rd", "struct", "cr", "ost", "bt", "tt", "th", "sc", "t"], "br": ["bl", " fr", "ber", "p", "wr", "nor", "hr", "rb", "browser", "ch", "tr", "rs", "rob", " sr", "arr", "pr", "ar", "vr", "lr", "el", "fr", "ur", "pre", "r", "be", " str", "bridge", "bc", "src", "bs", "dr", "er", "mr", "sl", " tr", "BR", "or", "sp", "bro", "str", "img", "kr", "Br", "abs", "rest", "ver", " r", "err", "sr", "result", "gr", "bn", "obj", "buf", "bt", "cr", "next", "bar", "ref", "keeper", "fore"], "x": ["php", "p", "xp", "sex", "u", "expl", "xml", "px", "python", "xi", "xf", "ex", "v", "ext", "xes", "ix", "l", "data", "X", "r", "exp", "cross", "z", "h", "hex", "lex", "ax", "wx", "index", "pe", "str", "e", "full", "text", "string", "any", "xxx", "plus", "n", "g", "sync", "abc", "rex", "tx", "xxxx", "work", "xe", "xs", "xy", "y", "rx", "ux", "ctx", "xt", "fx", "t", "xa", "xc", "xx"], "sb": ["buff", "fb", "ub", "Bs", "sf", "bm", "sth", "mb", "SB", "pb", "abb", "rb", "bj", "obb", "rob", "zb", "si", "sh", "ib", "db", "cb", "sv", "ls", "bf", "bh", "stab", "bc", "BB", "lb", "bsp", "gb", "bs", "eb", "kb", "shell", "src", "orb", " SB", "sp", "sa", "erb", "sq", "hub", "B", "nb", "bg", "bb", "sm", "xb", "osc", "bd", "lab", "bt", "wb", "sg", "ab", "ob", "bp"], "res": ["func", "vec", "features", "p", "val", " ret", "rs", "arr", "fps", "fin", "vals", "es", "fr", "r", "fs", "F", "bytes", " result", "df", "cs", "results", "fe", "reg", "ps", "RES", "vs", "os", "ms", "Rs", "fun", "resp", "rev", "max", "q", "abs", " r", "result", " results", "err", "ras", "js", "def", "frac", "rel", "ret", "req", "Res", "resolution", "free", "resh", "re"], "f": ["function", "sf", "count", "p", "u", "xf", "v", "ff", "fin", "l", "fc", "fac", "fr", "diff", "r", "F", "fs", "bf", " F", "df", "fe", "h", "z", "fd", "fun", "m", "e", "col", "fp", "cf", "rf", "inf", "d", "n", "g", "field", "frac", "ref", "of", "fx", "t", "re"], "start": ["offset", "count", "change", "p", "id", "next", "si", "cur", "add", "l", "part", "use", "init", "info", "get", "end", "first", "sum", "check", "index", "sp", "e", "ie", "min", "max", "skip", "shift", "set", "ish", "se", "open", "j", "pos", "starting", "k", "step", "scale", "from", "art", "stop", "ind", "pad", "Start"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "mini", "ri", "io", "init", "h", "z", "info", "ci", "ui", "ini", "index", "m", "phi", "eni", "uri", "ip", "di", "e", "I", "ie", "ai", "o", "gi", "d", "inner", "n", "ii", "li", "j", "yi", "chi", "y", "ind"], "dec": ["div", "enc", "rec", "draw", "vec", "comb", "val", "DEC", "decl", "next", "sec", " desc", "cur", "sub", "der", "out", "data", "partial", "deg", "sign", "nov", "esc", "valid", "del", "desc", "de", "loc", " decode", "done", "pack", "str", "rev", "min", "oct", "big", "d", "err", "cast", "dig", "exec", "minus", "mod", "digit", "inc", "dev", "doc", "real", "disc", "Dec", "ec", "pad"], "neg": ["flag", "git", "unit", "don", "empty", "decl", "ko", "sec", "sub", "sort", "nov", "deg", "sign", "dirty", "iter", "del", "desc", "de", "bad", "sum", "ne", "flo", "Neg", "dep", "rev", "sync", "zero", "disabled", "rot", "err", "nil", "dest", "pos", "norm", "no", "minus", "rel", "negative", "digit", "off", "disc", "dev", "pull", "coll"]}}
{"code": "import java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tstatic Scanner scanner;\\n\\n\tpublic static void main(String[] args) {\\n\t    scanner = new Scanner(System.in);\\n\\n\t    int N=gi();\\n\\n\t    int m= 1;\\n\t    \\nint i=0;\\n           while(true) {\\n        \t   if(Math.pow(2, i)<=N) {\\n        \t\t   m=(int)Math.pow(2, i);\\n        \t\t   i++;\\n        \t   }else {\\n        \t\t   break;\\n        \t   }\\n           }\\n\\n\\n\t   \\n\t    System.out.print(m);\\n\\n//        if (t.equals(\"Sunny\")) {\\n//        \tSystem.out.print(\"Cloudy\");\\n//        }else if(t.equals(\"Cloudy\")){\\n//        \tSystem.out.print(\"Rainy\");\\n//        } else {\\n//        \tSystem.out.print(\"Sunny\");\\n//        }\\n\\n\\n\t}\\n\t// \u6587\u5b57\u5217\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static String gs() {\\n\t\treturn scanner.next();\\n\t}\\n\\n\t// int\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static int gi() {\\n\t\treturn Integer.parseInt(scanner.next());\\n\t}\\n\\n\t// long\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static long gl() {\\n\t\treturn Long.parseLong(scanner.next());\\n\t}\\n\\n\t// double\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static double gd() {\\n\t\treturn Double.parseDouble(scanner.next());\\n\t}\\n}", "target": "225", "substitutes": {"scanner": [" scaner", " scanener", "nerener", "scer", "scner", "caner", "nerler", "scler", "Scanler", "scener", "scanener", "nerner", "Scanener", "canler", "scaner", "nerer", "canener", "Scaner", "canner", "Scanner", "scanler", " scanler"], "N": ["Len", "S", "Num", "NA", "NL", "C", "J", "M", " n", "Size", "Y", "X", "F", "Q", "P", "SIZE", " Ne", "Ni", "I", "T", "Sn", "NC", "L", "R", "n", "NM", "Ne", "V", "K", "D", "NT", "H", "O", "NS", "Ns", "Z", "G", "NE", "NI", "W"], "m": ["counter", "dm", "mc", "module", "pi", "p", "message", "u", "meta", "M", "v", "mac", "margin", "line", "l", "mini", "mm", "r", "value", "h", "z", "machine", "mo", "info", "f", "cm", "ms", "c", "fm", "model", "w", "x", "mu", "e", "gm", "I", "month", "o", "d", "mi", "n", "b", "ii", "dim", "j", "k", "me", "in", "mn", "trace", "mean", "y", "t"], "i": ["bi", "hi", "im", "api", "pi", "ni", "p", "ami", "it", "u", "id", "multi", "qi", "xi", "v", "si", "l", "mini", "is", "ri", "mm", "io", "f", "ci", "ui", "ini", "index", "phi", "x", "mu", "uri", "di", "e", "I", "ai", "o", "mi", "n", "ii", "b", "zi", "li", "j", "in", "ti", "fi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\nimport java.util.PriorityQueue;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tstatic String[] w = { \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\" };\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n\t\tString s = in.next();\\n\t\tint i = 0;\\n\t\tfor (; i < w.length; i++)\\n\t\t\tif (s.equals(w[i]))\\n\t\t\t\tbreak;\\n\t\tSystem.out.println(7 - i);\\n\t}\\n}", "target": "136", "substitutes": {"w": ["aw", "wp", "west", "p", "now", "wal", "v", "fw", "ws", "r", "h", "sw", "f", "c", "wx", "words", "m", "x", "rw", "e", "kw", "ww", "q", "wt", "d", "hw", "nw", "g", "ow", "ew", "wa", "work", "wall", "word", "y", "wb", "we", "W", "t", "wh"], "in": ["p", "login", "ins", "din", "ln", "ex", "fin", "line", "data", "is", "fr", "lin", "con", "r", "part", "diff", "init", "sin", "win", "source", "input", "er", "In", "f", "fd", "c", "ini", "inn", "user", "conn", "OUT", "nin", "config", "min", "gin", "inner", "rin", "n", "b", "err", "ac", "pass", "again", "reader", "exec", "pin", "scan", "connection", "log", "bin", "readable", "as", "inc", "doc", "IN", "out"], "s": ["S", "p", "u", "ins", "ss", "v", "si", "strings", "l", "qs", "is", "sv", "ls", "ws", "r", "h", "sw", "ps", "f", "sl", "os", "c", "m", "e", "string", "o", "d", "n", "ns", "g", "b", "su", "js", "xs", "sg", "t"], "i": ["bi", "hi", "pi", "p", "slice", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "l", "is", "ri", "start", "io", "z", "abi", "f", "ci", "vi", "c", "ui", "ini", "vis", "index", "m", "x", "phi", "mu", "uri", "e", "ip", "di", "I", "eni", "ai", "o", "gi", "d", "mi", "n", "shift", "ii", "b", "limit", "zi", "li", "j", "k", "oi", "ti", "fi"]}}
{"code": "\\nimport java.util.*;\\n\\nclass Main {\\n\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int a = in.nextInt();\\n        int b = in.nextInt();\\n        int c = in.nextInt();\\n        if (a >= 1 && a <= 13 && b >= 1 && b <= 13 && c >= 1 && c <= 13) {\\n            if ((a + b + c) >= 22) {\\n                System.out.println(\"bust\");\\n            } else {\\n                System.out.println(\"win\");\\n            }\\n        }\\n    }\\n}\\n", "target": "129", "substitutes": {"in": ["isin", "rec", "id", "login", "ins", "serv", "ln", "din", "ex", "binary", "i", "url", "line", "l", "data", "is", "lin", "con", "r", "init", "source", "win", "input", "In", "f", "gen", "s", "conn", "inn", "ini", "user", "or", "nin", "socket", "between", "token", "inf", "inner", "rin", "n", "g", "cli", "err", "kin", "pass", "again", "reader", "pin", "scan", "connection", "bin", "readable", "as", "inc", "doc", "IN", "out", "re"], "a": ["ana", "aw", "api", "p", "na", "u", "ad", "aaaa", "ba", "i", "ar", "aa", "A", "f", "ah", "au", "ga", "ak", "an", "x", "sa", "ea", "ae", "ada", "e", "ai", "alpha", "d", "af", "n", "ca", "ac", "sta", "ama", "art", "as", "la", "y", "area", "ab", "da", "asa", "am", "va", "aj"], "b": ["fb", "bi", "ub", "p", "mb", "u", "pb", "rb", "ad", "v", "i", "ba", "l", "db", "cb", "ib", "r", "aa", "h", "z", "lb", "bs", "f", "eb", "m", "x", "ae", "e", "bur", "o", "d", "n", "B", "ca", "ac", "k", "bb", "sb", "y", "ab", "ob"], "c": ["nc", "count", "p", "pc", "u", "C", "ch", "v", "i", "l", "cu", "ct", "r", "sc", "z", "h", "cs", "cv", "cp", "f", "lc", "ci", "dc", "m", "w", "x", "cy", "e", "uc", "cf", "o", "d", "n", "ca", "ac", "k", "cc", "y", "ec"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main\\n{\\n    public static void main(String[] args)\\n    {\\n        Scanner s = new Scanner(System.in);\\n        int n = s.nextInt();\\n        int[] a = new int[n];\\n        int c = 0;\\n        for(int i=0; i<n; i++)\\n        {\\n            a[i] = s.nextInt();\\n            if(a[i]%2==0)\\n                c++;\\n        }\\n        int ch=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(a[i]%2==0)\\n            {\\n                if(a[i]%3==0||a[i]%5==0)\\n                {\\n                    ch++;\\n                }\\n            }\\n        }\\n        if(ch==c)\\n        {\\n            System.out.println(\"APPROVED\");\\n        }\\n        else System.out.println(\"DENIED\");\\n        }\\n    }", "target": "113", "substitutes": {"s": ["S", "ts", "sf", "features", "p", "http", "u", "ss", "v", "si", "strings", "l", "bis", "is", "sv", "es", "ls", "ws", "r", "fs", "h", "f", "lines", "south", "os", "t", "m", "an", "fts", "e", "ssl", "ses", "string", "o", "abs", "d", "ns", "gs", "b", "sets", "services", "sys", "se", "js", "sb", "in", "ans", "as", "out", "sync"], "n": ["nn", "all", "nc", "nt", "count", "p", "u", "num", "nan", "N", "ln", "v", "cn", "l", "sn", "r", "z", "h", "nl", "len", "f", "conn", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "nb", "j", "net", "k", "no", "in", "y", "t"], "a": ["p", "ia", "u", "na", "auto", "ba", "ar", "aa", "info", "A", "ha", "aux", "tta", "f", "au", "ga", "an", "ata", "w", "history", "sa", "ea", "ae", "e", "x", "active", "arch", "ai", "code", "alpha", "array", "ca", "b", "ac", "qa", "aaa", "wa", "work", "sta", "ama", "as", "la", "y", "area", "missing", "da", "ma", "am", "va", "aj"], "c": ["conf", "nc", "count", "p", "pc", "u", "C", "v", "cn", "cur", "l", "cu", "ct", "con", "r", "sc", "h", "z", "co", "cs", "cp", "f", "lc", "ci", "m", "x", "e", "col", "ce", "code", "o", "cf", "d", "b", "ac", "k", "cc", "y", "cr", "cont", "cy", "t", "coll"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "qi", "iii", "xi", "ji", "ei", "v", "si", "ix", "data", "ri", "uli", "io", "init", "info", "abi", "f", "lc", "ci", "ui", "ini", "eni", "phi", "x", "uri", "adi", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "cli", "ii", "b", "isi", "iv", "li", "j", "oi", "in", "chi", "y", "ki", "ti", "fi"], "ch": ["cl", "conf", "div", "nt", "count", "p", "bug", "u", "ck", "chu", "v", "anch", "cur", "CH", "sh", "l", "cha", "qu", "z", "h", "och", "cor", "char", "cp", "f", "conn", "ok", "Ch", "chan", "x", "cy", "cho", "q", "code", "d", "ach", "che", "cher", "b", "j", "k", "ich", "chi", "y", "sch", "sc", "coll"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    //SUN,MON,TUE,WED,THU,FRI,SAT\\n    String[] week = {\"\",\"SAT\",\"FRI\",\"THU\",\"WED\",\"TUE\",\"MON\",\"SUN\"};\\n    for(int i=0;i<8;i++){\\n      if(week[i].equals(s))System.out.println(i);\\n    }\\n  }\\n}", "target": "136", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "sf", "scope", "pc", "sec", "ss", " SC", "si", "asc", "sh", "Sc", "SC", "bc", "desc", "sw", "cs", "src", "ci", "sl", "c", "sp", "acc", "system", "uc", "loop", "se", "ner", "scan", "isc", "osc", "rc", "cc", "cr", "inc", "parser", "proc", "spec", "ec", "esc", "sync"], "s": [" objects", " outputs", "S", " tokens", " logs", "p", " symbols", "ss", "i", "strings", "l", "es", "ls", "r", " inputs", "f", "lines", "m", "output", "e", "ses", "d", "n", "b", " lines", " paths", " strings"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.List;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception{\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\\n\t\tString s = br.readLine();\\n\t\tList<Integer> l = new ArrayList<>();\\n\t\tfor(int i=0;i<s.length();i++)\\n\t\t{\\n\t\t\tif(s.charAt(i) == '0')\\n\t\t\t\tl.add(0);\\n\t\t\telse if(s.charAt(i) == '1')\\n\t\t\t\tl.add(1);\\n\t\t\telse\\n\t\t\t{\\n\t\t\t\tif(!l.isEmpty())\\n\t\t\t\t\tl.remove(l.size()-1);\\n\t\t\t}\\n\t\t}\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tfor(int i: l)\\n\t\t\tsb.append(i);\\n\t\tSystem.out.println(sb);\\n\t}\\n\\n}\\n", "target": "151", "substitutes": {"br": ["bl", "ori", "ber", "hr", "rb", "ch", "browser", "tr", "arr", "ar", "lr", "cb", "fr", "r", "bf", "bh", "yr", "io", "bridge", "bc", "src", "bs", "er", "dr", "orb", "mr", "BR", "sp", "her", "HR", "bro", "str", "Br", "abs", "sr", "b", "err", "gr", "ner", "reader", "obj", "buf", "ocr", "bb", "bt", "cr"], "s": ["S", "sf", "p", "u", "ins", "ss", "v", "si", "strings", "line", "a", "qs", "is", "sv", "ls", "r", "fs", "ws", "source", "info", "cs", "input", "src", "f", "sl", "c", "os", "ds", "words", "str", "e", "ssl", "string", "ses", "abs", "o", "d", "plus", "gs", "ns", "b", "sets", "services", "se", "styles", "js", "xs", "stats", "in", "as", "spec", "t", "sync"], "l": ["bl", "ml", "fl", "live", "p", "ln", "v", "le", "el", "lr", "ls", "los", "lu", "lb", "nl", "lp", "lc", "shell", "sl", "t", "lo", "list", "like", "lis", "pl", "left", "ql", "ul", "lv", "L", "n", "ld", "kl", "b", "li", "dl", "ol", "il", "ell", "la", "rl", "lf", "jl", "wl", "ll"], "i": ["bi", "hi", "pi", "ori", "iu", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "ji", "v", "si", "ix", "data", "is", "ri", "io", "h", "info", "abi", "f", "ci", "ui", "ini", "c", "index", "m", "phi", "x", "mu", "uri", "eni", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "ii", "b", "zi", "isi", "li", "j", "oi", "yi", "y", "ti"], "sb": ["nn", "fb", "bl", "ub", "sf", "bm", "sth", "mb", "SB", "pb", "rb", "bj", "obb", "usb", "db", "cb", "sn", "sv", "ls", "bf", "bh", "bridge", "bc", "BB", "lb", "src", "kb", "bs", "gb", "bsp", "lp", "sl", " SB", "sa", "sq", "ssl", "b", "nb", "bg", "su", "bb", "xb", "bt", "bar", "sg", "ab", "ob", "bp", "sync"]}}
{"code": "//import java.util.*;\\nimport java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner scn = new Scanner(System.in);\\n        char[] a = scn.next().toCharArray();\\n        int n = a.length;\\n        int hug = 0;\\n        int limit = n/2 ;\\n        for(int i = 0; i < n; i++) {\\n          \\n\t\t\tif ( i >= limit ){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tif(a[i] != a[n-i-1]){\\n\t\t\t\t//i = 0;\\n\t\t\t\t//a[n-i-1] = a[i];\\n\t\t\t\thug = hug + 1;\\n\t\t\t}\\n          \\n        }\\n\\n\t\t System.out.println(Integer.toString(hug));\\n\\n    }\\n}", "target": "115", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\n/**\\n * @author kawakami\\n *\\n */\\nclass Main {\\n\\n\t/**\\n\t * @param args\\n\t */\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner as = new Scanner(System.in);\\n\t\t\\n\t\tint n=as.nextInt();\\n\t\tlong tr,min,max,sum;\\n\t\tint j = 0,k = 0;\\n\t\tlong jug[] = new long[n];\\n\t\t\\n\t\t\\n\t\t\\n\t\tjug[0]=as.nextInt();\\n\t\t//System.out.println(\"test3 \"+jug[0]);\\n\t\tmax=jug[0];\\n\t\tmin=jug[0];\\n\t\tsum=jug[0];\\n\t\t\\n\t\t\\n\t\tfor(int i=1;i<n;i++){\\n\t\t\t//System.out.println(\"test4\");\\n\t\t\tjug[i]=as.nextInt();\\n\t\t\tsum=sum+jug[i];\\n\t\t\t//System.out.println(sum+\" test1 \"+jug[i]);\\n\t\t}\\n\t\twhile(j!=1){\\n\t\t\tj=1;\\n\t\t\t//System.out.println(\"test2\");\\n\t\t\tfor(k = 0;k<n-1;k++){\\n\t\t\t\t\\n\t\t\t\tif(jug[k]>jug[k+1]){\\n\t\t\t\t\ttr=jug[k];\\n\t\t\t\t\tjug[k]=jug[k+1];\\n\t\t\t\t\tjug[k+1]=tr;\\n\t\t\t\t\tj=0;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t\\n\t\t\t\\n\t\t}\\n\t\tSystem.out.println(jug[0]+\" \"+jug[k]+\" \"+sum);\\n\\n\t}\\n\\n}", "target": "21", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int K = sc.nextInt();\\n        int S = sc.nextInt();\\n        int total = 0;\\n        for(int i = 0;i <= K;i++){\\n            for(int j = 0;j <= K;j++){\\n                    int last = S - i - j;\\n                    if(last >= 0 && last <= K) total++;\\n            }\\n        }\\n        System.out.println(total);\\n    }\\n}\\n", "target": "29", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "pc", "ser", "com", "ch", "sec", "ss", "tc", "server", " SC", "cur", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "lc", "ci", "c", "cer", "sp", "acc", "system", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "ec", "esc", "ctx", "cus", "sync"], "K": ["KK", "Ku", "C", "Ak", "J", "N", "ks", "ke", "M", "Size", "U", "Y", "NK", "KB", "Q", "P", "length", "key", "Total", "HK", "Sk", "T", "I", "max", "PK", "L", "V", "k", "KR", "H", "Z", "KI", "KN", "KE", "KS", "SK", "Ke", "X"], "S": ["SI", "SS", "C", "J", "N", "M", "Size", "SE", "U", "ISS", "SU", "SH", "Y", "Sa", "F", "SC", "Si", "Sc", "Q", "P", "A", "Su", "s", "Sk", "T", "I", "L", "R", "V", "k", "D", "Sh", "H", "O", "NS", "SR", "KS", "SK", "CS", "X"], "total": ["otal", "all", "complete", "cat", "nt", "count", "size", "cost", "next", "average", "failed", "available", "part", "right", "start", "valid", "iter", "info", "percent", "length", "ok", "sum", "tax", "Total", "index", "base", "done", "full", "active", "max", "alpha", "set", "zero", "result", "found", "scale", "no", "basic", "local", "gross", "error", "post"], "i": ["hi", "bi", "pi", "ni", "p", "slice", "u", "id", "qi", "ji", "v", "si", "ix", "l", "ik", "start", "io", "init", "z", "f", "ci", "s", "ui", "ini", "key", "c", "index", "m", "x", "ip", "I", "ie", "ai", "o", "d", "mi", "n", "ii", "b", "li", "k", "oi", "in", "chi", "y", "ki", "ind"], "j": ["jj", "p", "oj", "u", "J", "next", "bj", "ji", "v", "jp", "si", "l", "ij", "start", "z", "h", "aj", "f", "key", "x", "e", "ja", "I", "uj", "q", "o", "d", "n", "ii", "b", "li", "je", "k", "js", "job", "y", "jl", "jo"], "last": ["offset", "parent", "count", "ending", "size", "it", "id", "cost", "next", "cur", "old", "right", "start", "end", "first", "length", "s", "key", "style", "recent", "base", "est", "full", "Last", "st", "left", "rev", "global", "max", "ul", "d", "prev", "n", "worst", "latest", "current", "k", "child", "number", "bottom"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) throws IOException {\\n\t\ttry (BufferedReader br = new BufferedReader(\\n\t\t\t\tnew InputStreamReader(System.in))) {\\n\\n\t\t\tString in = br.readLine();\\n\t\t\tString[] day = {\"SAT\",\"FRI\",\"THU\",\"WED\",\"TUE\",\"MON\",\"SUN\"};\\n\t\t\tfor(int i = 0; i < day.length; i++) {\\n\t\t\t\tif(in.equals(day[i])) {\\n\t\t\t\t\tSystem.out.println(i+1);\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "136", "substitutes": {"in": ["cl", "on", "IN", "buffer", "id", "login", "ins", "din", "ex", "inside", "line", "l", "data", "is", "name", "lin", "r", "win", "temp", "input", "In", "f", "s", "inn", "ini", "w", "nin", "str", "string", "en", "gin", "inner", "d", "rin", "n", "cli", "b", "write", "reader", "work", "connection", "pin", "log", "bin", "file", "as", "inc", "doc", "read", "out"], "day": ["none", "ward", "change", "and", "id", "nd", "date", "path", "line", "page", "name", "sign", "part", "Day", "header", "block", "row", "week", "desc", "DAY", "cond", "cell", "letter", "definition", "down", "key", "side", "index", "zone", " Day", "list", "col", "month", "column", "days", "when", "comment", "card", "year", "night", "field", "yes", "form", "no", "clean", "word", "dec", "game", "member", "default", "daily", "strip", "condition"], "i": ["bi", "hi", "pi", "it", "u", "id", "multi", "qi", "xi", "wei", "v", "si", "ix", "l", "name", "ri", "io", "info", "abi", "length", "f", "lc", "ci", "ui", "index", "m", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "esi", "ai", "o", "gi", "d", "n", "isi", "ii", "b", "zi", "li", "j", "oi", "chi", "type", "t", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tString s = sc.next();\\n\\n\t\tint pre = s.length();\\n\t\ts = s.replace(\"ABC\", \"\");\\n\t\tint post = s.length();\\n\\n\t\tSystem.out.println((pre - post) / 3);\\n\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "110", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "class", "ser", "ch", "server", "ss", "cur", "sh", "fc", "Sc", "SC", "ct", "cs", "cv", "bc", "sw", "src", "lc", "ci", "sl", "dc", "c", "cer", "sp", "sq", "uc", "sr", "ca", "se", "ner", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "sch", "proc", "ec", "esc", "sync"], "n": ["nn", "all", "nc", "pi", "nt", "ni", "p", "num", "N", "i", "l", "r", "init", "nl", "f", "c", "m", "base", "d", "ns", "b", "pn", "nb", "j", "net", "pos", "en"], "s": ["S", "sf", "p", "u", "ins", "json", "ss", "rs", "si", "strings", "i", "sub", "l", "bis", "sort", "is", "sv", "es", "ls", "ws", "fs", "series", "source", "results", "input", "ps", "f", "sl", "c", "os", "ds", "tests", "your", "m", "parts", "settings", "str", "e", "ssl", "ses", "string", "abs", "o", "d", "g", "ns", "sets", "services", "b", "details", "su", "js", "sb", "in", "as", "comments", "t", "sync"], "pre": ["nn", "all", "PRE", "on", "api", "pi", "p", "prefix", "pres", "patch", "next", "num", "before", "i", "name", "start", "cross", "syn", "len", "end", "inter", "c", "after", "base", "per", "min", "code", "skip", "prev", "Pre", "pn", "current", "j", "pos", "in", "fix", "sync"], "post": ["head", "POST", "wp", "total", "offset", "pc", "p", "prefix", "now", "patch", "null", "next", "Post", "before", "add", "sub", "start", "cross", "zip", "end", "length", "after", "ip", "text", "code", "skip", "rest", "pred", "prev", "current", "pos", "step", "mod", "type", "off", "proc", "fix", "pad", "posts", "append"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\npublic static void main(String[] args){\\nScanner scan=new Scanner(System.in);\\nString str = scan.next();\\n  \\n String[] num=str.split(\"\");\\n  \\n  int i=0;\\n  int sum=0;\\n  for(i=0;i<(num.length)/2;i++){\\n  if(num[i].equals(num[num.length-1-i])){\\n  sum=sum+1;\\n  }\\n  }\\n  System.out.println((num.length/2)-sum);\\n  \\n}\\n}", "target": "115", "substitutes": {"scan": ["nn", "all", "conf", "cat", "print", "watch", "connect", "walk", "na", "serv", "ln", "ss", "server", "split", "run", "search", "l", "sign", "con", "r", "car", "sc", "iter", "win", "er", "gen", "query", "feed", "an", "skip", "n", "stat", "util", "b", "ignore", "se", "ner", "in", "parse", "Scan", "clean", "look", "read", "out", "can", "ann", "sync"], "str": ["div", "u", "tr", "split", "arr", "strings", "line", "STR", "data", "fr", "name", "r", "exp", "init", "iter", "input", "char", "f", "br", "s", "sp", "st", "text", "string", "stri", "Str", "n", "sr", "result", "err", "pass", "ner", "obj", "su", "exec", "parse", "in", "strip", "coll"], "num": ["nn", "um", "div", "unit", "Num", "prefix", "null", "u", "nu", "multi", "om", "span", "split", "nam", "data", "uni", "name", "con", "part", "home", "valid", "init", "iter", "info", "block", "nr", "input", "loc", "check", "index", "umi", "np", "note", "text", "string", "col", "ul", "oct", "common", "nom", "n", "plus", "result", "dom", "dim", "zero", "comment", "su", "norm", "form", "pos", "no", "bin", "digit", "number", "word", "non", "inc", "missing", "NUM", "out"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "ami", "u", "id", "qi", "multi", "xi", "ji", "v", "si", "ix", "l", "io", "z", "f", "ci", "ui", "ini", "c", "index", "m", "phi", "eni", "mu", "uri", "x", "di", "e", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "zi", "b", "li", "j", "oi", "k", "chi", "ti", "fi"], "sum": ["um", "total", "offset", "share", "amount", "count", "p", "size", "u", "gram", "tu", "sec", "span", "summary", "si", "average", "ass", "vol", "sort", "sam", "fill", "diff", "sign", "mm", "start", "use", "sim", "spread", "len", "cal", "length", "f", "char", "index", "weight", "us", "min", "max", "alpha", "miss", "skip", "Sum", "n", "b", "zero", "gam", "se", "pass", "li", "fat", "su", "up", "parse", "in", "scale", "mean", "inc", "missing", "doc", "dev", "match", "out", "mem"]}}
{"code": "\\n\\n\\n\\n\\n\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Scanner;\\nimport java.util.Set;\\n\\n\\n\\npublic class Main{\\n\t\\n\t//\u6700\u5927\u516c\u7d04\u6570\u30fb\u6700\u5c0f\u516c\u500d\u6570\uff08\u30bb\u30c3\u30c8\u3067\u4f7f\u3046\uff09\\n\tpublic static long gcm(long a, long b) {\\n\t\tlong result = a;\\n\t\tlong k = 0;\\n\t\tlong n = b;\\n\t\tdo {\\n\t\t\tk = result % n;\\n\t\t\tresult = n;\\n\t\t\tn = k;\\n\t\t} while(k != 0);\\n\t\treturn result;\\n\t}\\n\t\\n\tpublic static long lcm(long a, long b) {\\n\t\tlong g;\\n\t\tg = gcm(a, b);\\n\t\treturn a/g*b;\\n\t}\\n\t\\n\tstatic long gcd (long a, long b) {\\n\t\tlong temp;\\n\t\twhile((temp = a%b)!=0) {\\n\t\t\ta = b;\\n\t\t\tb = temp;\\n\t\t}\\n\t\treturn b;\\n\t}\\n\t\\n\t//\u7b49\u5dee\u6570\u5217\\n\tstatic long tousasum(int n) {\\n\t\treturn (long)n*((long)n+1)/2;\\n\t}\\n\\n\\n\\n\t//\u7d20\u6570\u5224\u5b9a\\n\tstatic boolean isPrime (int n) {\\n\t\tif (n==2) return true;\\n\t\tif (n<2 || n%2==0) return false;\\n\t\tdouble d = Math.sqrt(n);\\n\t\tfor (int i=3; i<=d; i+=2) if(n%i==0){return false;}\\n\t\treturn true;\\n\t}\\n\\n\\n\t//\u500d\u6570\u5224\u5b9a\uff0810\u9032\u6570\u4ee5\u5916\u306e\u3068\u304d\u306b\u6709\u7528\uff09\\n\tstatic boolean isMultiple (String s, int base, int m) {\\n\t\tint temp = 0;\\n\t\tfor (int i=0; i<s.length(); i++) {\\n\t\t\ttemp = (temp*base+Character.getNumericValue(s.charAt(i)))%m;\\n\t\t}\\n\t\tif (temp==0) {return true;}\\n\t\treturn false;\\n\t}\\n\\n\\n\t//\u968e\u4e57\\n\tstatic long factorial (int i) {\\n\t\tif (i==1) {return 1;}\\n\t\telse {return i*factorial(i-1);}\\n\t}\\n\\n\\n\t//\u9032\u6570\u5909\u63db\\n\tstatic String toNbase (String sm, int m, int n) {\\n\t\treturn Long.toString(Long.parseLong(sm,m),n);\\n\t}\\n\t\\n\tpublic static final long gcd_n(long[] param) {\\n\t    final int len = param.length;\\n\t    long g = gcd(param[0], param[1]);    //gcd(a, b) \u306f\u4ee5\u524d\u4f5c\u3063\u305f\u3082\u306e\\n\t    for (int i = 1; i < len - 1; i++) {\\n\t        g = gcd(g, param[i + 1]);       //gcd(a, b) \u306f\u4ee5\u524d\u4f5c\u3063\u305f\u3082\u306e\\n\t    }\\n\t    return g;\\n\t}\\n\t\\n\tpublic static long lcm_n(long[] numbers) {\\n\t\tlong l;\\n\t\tl = numbers[0];\\n\t\tfor (int i = 1; i < numbers.length; i++) {\\n\t\t\tl = lcm(l, numbers[i]);\\n\t\t}\\n\t\treturn l;\\n\t}\\n\t\\n\t\\n public static void main(String[] args) {\\n\t Scanner sc=new Scanner(System.in);\\n\t int N=sc.nextInt();\\n\t String[] s=new String[N];\\n\t Map<String,Integer> mp=new HashMap();\\n\t for(int i=0;i<N;i++) {\\n\t\t String temp=sc.next();\\n\t\t char[] tmp=temp.toCharArray();\\n\t\t Arrays.sort(tmp);\\n\t\t s[i]=String.valueOf(tmp);\\n\t\t if(mp.containsKey(s[i])) {\\n\t\t\t mp.put(s[i],mp.get(s[i])+1);\\n\t\t }else {\\n\t\t\t mp.put(s[i],0);\\n\t\t }\\n\t\t \\n\t\t \\n\t }\\n\t long result = 0;\\n\t \\n\t for(Integer val : mp.values()){\\n\t     result+=tousasum(val);\\n\t }\\n\t \\n\t System.out.println(result);\\n\t \\n\t \\n\t \\n\t\\n\t \\n\\n\t \\n\t \\n\t \\n\t \\n\t \\n\t \\n\t\\n\t \\n\t \\n\t \\n }\\n\t\\n\\n\\n}\\n", "target": "32", "substitutes": {}}
{"code": "import java.util.*;\\n\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int i = 1;\\n    long rtn = 0;\\n\\n    while (i <= n) {\\n      if (i % 3 == 0 || i % 5 == 0){\\n        i++;\\n      } else {\\n        rtn += i;\\n        i++;\\n      }\\n    }\\n    System.out.println(rtn);\\n  }\\n}", "target": "55", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "pc", "ch", "sec", "ss", "si", "cur", "sub", "asc", "search", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "lc", "ci", "c", "sp", "str", "acc", "uc", "soc", "ca", "se", "ner", "ocr", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc"], "n": ["nn", "nc", "nt", "p", "u", "num", "N", "span", "l", "r", "init", "z", "f", "conn", "s", "c", "ne", "m", "w", "e", "o", "d", "ns", "b", "network", "nb", "j", "k", "no", "in", "number", "en", "t"], "i": ["bi", "api", "pi", "ori", "ni", "count", "p", "slice", "id", "u", "multi", "qi", "xi", "si", "ix", "l", "mini", "is", "ri", "start", "init", "z", "abi", "length", "f", "lc", "ci", "vi", "ui", "ini", "c", "index", "m", "phi", "x", "uri", "di", "ip", "e", "I", "ai", "o", "gi", "d", "cli", "ii", "zi", "li", "j", "oi", "in", "chi", "ki", "t", "ti", "fi"], "rtn": ["ttnr", "ttn", "ttr", "ntN", "ttN", "rtN", "RTr", "rotn", " ftn", "ortN", "RTn", "RTp", "nty", " ftl", "rotng", " fty", "rotnn", "rtnn", "ortng", "rtr", "ortnn", "gtnn", "gtN", "ortn", "rtnr", "RTl", "rotN", "gtng", "gtn", "rtng", "ntn", "ntp", "ntnr", "RTN", "RTnr", "rtp", "RTy", "rty", "rtl", "ntr", "ntl", " ftp"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t// TODO Auto-generated method stub\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString line = br.readLine();\\n\t\tfor (char c : line.toCharArray()) {\\n\t\t\tif (Character.isLowerCase(c)) {\\n\t\t\t\tSystem.out.print(Character.toUpperCase(c));\\n\t\t\t} else {\\n\t\t\t\tSystem.out.print(Character.toLowerCase(c));\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n\\n}", "target": "192", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception{\\n\t\tScanner br = new Scanner(System.in);\\n\t\tint x;\\n\t\tint y;\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\twhile (true){\\n\t\t\tx = br.nextInt();\\n\t\t\ty = br.nextInt();\\n\t\t\tif (x == 0&&y==0){\\n\t\t\t\tbreak;\\n\t\t\t} else if (x<y){\\n\t\t\t\tsb.append(x).append(\" \").append(y).append(\"\\n\");\\n\t\t\t} else {\\n\t\t\t\tsb.append(y).append(\" \").append(x).append(\"\\n\");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.print(sb);\\n\t}\\n}", "target": "72", "substitutes": {"br": ["bl", "bi", "ir", "ori", "oper", "ber", "wr", "next", "rb", "ch", "browser", "tr", "arr", "STR", "db", "cb", "fr", "lr", "pre", "r", "bf", "bh", "yr", "be", "iter", "bridge", "bc", "bs", "er", "orb", "BR", "sp", "bro", "str", "Br", "brush", "sr", "b", "err", "body", "ner", "obj", "buf", "bb", "cr", "bar", "bp"], "x": ["on", "dx", "p", "patch", "id", "u", "one", "xi", "ex", "v", "i", "ix", "ya", "l", "a", "old", "X", "name", "r", "z", "h", "f", "c", "ax", "key", "wx", "index", "w", "pe", "e", "xxx", "code", "d", "n", "b", "xt", "tx", "work", "pos", "wa", "xs", "in", "j", "xy", "rx", "px", "fx", "t", "xx"], "y": ["iny", "ady", "uy", "yo", "py", "ky", "gy", "p", "something", "sy", "wy", "oy", "ch", "v", "i", "vy", "ya", "a", "Y", "yt", "my", "yr", "ys", "z", "ny", "f", "ay", "c", "key", "ym", "w", "zy", "ty", "e", "ry", "o", "n", "b", "ish", "dy", "year", "yy", "fy", "ye", "j", "yi", "yu", "type", "xy", "ey", "cy", "t", "xx"], "sb": ["fb", "sk", "sf", "sth", "bm", "mb", "SB", "pb", "abb", "rb", "bj", "obb", "rob", "zb", "si", "ba", "db", "cb", "sv", "ls", "bf", "bh", "stab", "lb", "kb", "bc", "lp", "gb", "bs", "eb", "src", "bsp", " SB", "sa", "b", "nb", "bg", "buf", "bb", "xb", "bd", "bt", "wb", "sg", "ab", "amb", "ob", "bp"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        FastScanner fs = new FastScanner();\\n        char[] s = fs.next().toCharArray();\\n        int res = 0;\\n        int left = 0;\\n        int right = s.length-1;\\n        while(left<=right){\\n            if(s[left]!=s[right])res++;\\n            left++;\\n            right--;\\n        }\\n        System.out.println(res);\\n    }\\n    static class FastScanner{\\n        private final InputStream in = System.in;\\n        private final byte[] buffer = new byte[1024];\\n        private int ptr = 0;\\n        private int buflen = 0;\\n\\n        private boolean hasNextByte(){\\n            if(ptr < buflen){\\n                return true;\\n            }else{\\n                ptr = 0;\\n                try{\\n                    buflen = in.read(buffer);\\n                }catch(IOException e){\\n                    e.printStackTrace();\\n                }\\n                if(buflen <= 0){\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n\\n        private int readByte(){\\n            if(hasNextByte())return buffer[ptr++];\\n            else return -1;\\n        }\\n\\n        private boolean isPrintableChar(int c){\\n            return 33<=c && c<=126;\\n        }\\n\\n        public boolean hasNext(){\\n            while(hasNextByte() && !isPrintableChar(buffer[ptr]))ptr++;\\n            return hasNextByte();\\n        }\\n\\n        public String next(){\\n            if(!hasNext()) throw new NoSuchElementException();\\n            StringBuilder sb = new StringBuilder();\\n            int b = readByte();\\n            while(isPrintableChar(b)){\\n                sb.appendCodePoint(b);\\n                b = readByte();\\n            }\\n            return sb.toString();\\n        }\\n\\n        public long nextLong(){\\n            if(!hasNext()) throw new NoSuchElementException();\\n            long n = 0;\\n            boolean minus = false;\\n            int b = readByte();\\n            if(b == '-'){\\n                minus = true;\\n                b = readByte();\\n            }\\n            if(b < '0' || '9' < b){\\n                throw new NumberFormatException();\\n            }\\n            while(true){\\n                if('0' <= b && b<='9'){\\n                    n*=10;\\n                    n+=b-'0';\\n                }else if(b==-1 || !isPrintableChar(b)){\\n                    return minus ? -n : n;\\n                }else{\\n                    throw new NumberFormatException();\\n                }\\n                b = readByte();\\n            }\\n        }\\n        public int nextInt(){\\n            long nl = nextLong();\\n            if(nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)throw new NumberFormatException();\\n            return (int)nl;\\n        }\\n        public double nextDouble(){return Double.parseDouble(next());}\\n    }\\n}", "target": "115", "substitutes": {"fs": ["fb", "sf", "obs", "Fs", "ss", "rs", "fin", "fc", "qs", "fr", "ls", "ws", "F", "bf", "linux", "io", "ips", "df", "fe", "cs", "ps", "FS", "f", "bs", "fd", "fn", "ms", "fm", "ds", "feed", "raf", "fp", "files", "ios", "cf", "ns", " f", "lf", " FS", "fx", "fts"], "s": ["groups", "S", "sf", "blocks", "p", "u", "ins", "ss", "rs", "v", "si", "i", "strings", "l", "a", "data", "is", "sv", "es", "r", "sites", "bytes", "its", "ws", "seconds", "h", "results", "ps", "f", "tests", "states", "ds", "parts", "e", "ssl", "string", "ses", "abs", "d", "gs", "g", "ns", "services", "sym", "values", "js", "secondary", "xs", "ids", "ans", "as", "array"], "res": ["reset", "val", "pres", "rep", "ins", "rs", "arr", "progress", "rem", "r", "exp", "rh", "row", "results", "len", "reg", "ps", "resource", "RES", "rows", "os", "ms", "resp", "rand", "rev", "min", "abs", "rest", "result", "err", "ries", "ress", "gr", "rights", "response", "rel", "ret", "req", "rc", "ris", "rx", "resources", "Res", "range", "real", "resolution", "re"], "left": ["all", "cl", "offset", "low", "fl", "size", "url", "l", "le", "el", "old", "diff", "r", "roll", "lower", "len", "Left", "end", "length", "last", "width", "lc", "loc", "lo", "x", "list", "full", "label", "pl", "two", "min", "ul", "inner", "d", "plus", "small", "ner", "rights", "pos", "j", "child", "found", "rel", "ell", "level", "rl", "lf", "pull", "front", "coll"], "right": ["cl", "round", "rec", "third", "and", "patch", "one", "wrong", "back", "Right", "rem", "partial", "rh", "r", "row", "end", "method", "length", "rows", "ax", "w", "x", "rw", "rad", "ack", "red", "col", "raw", "max", "rest", "inner", "plus", "with", "rights", "work", "child", "reverse", "rel", "correct", "rew", "rx", "rt", "range", "th", "re"], "in": ["isin", "p", "val", "login", "ins", "serv", "din", "ex", "v", "i", "path", "line", "a", "l", "data", "is", "url", "con", "part", "r", "impl", "fr", "io", "source", "win", "input", "resource", "f", "In", "user", "inn", "ini", "x", "ssl", "raw", "min", "read", "inf", "inner", "err", "ac", "reader", "connection", "log", "bin", "readable", "as", "inc", "IN", "out", "re"], "buffer": ["buff", "fb", "p", "size", "message", "slice", "table", "queue", "reference", "server", "binary", "Buffer", "url", "data", "cb", "request", "store", "bytes", "value", "header", "iter", "source", "block", "input", "resource", "length", "document", "shell", "image", "base", "memory", "device", "vector", "quote", "result", "padding", "limit", "reader", "flush", "buf", "bb", "seed", "sequence", "position", "bin", "file", "address", "transfer", "bar", "shape", "cache", "uffer", "batch", "pad", "array", "window"], "ptr": ["buff", "tmp", "offset", "elt", "sth", "p", "pointers", "size", "wr", "slice", "xp", "tc", "addr", "tr", "pr", "etr", " pointer", "i", "arr", "ext", "ff", "cur", "lr", "fr", "Ptr", "ctr", "iter", "attr", "fe", "nr", "len", "src", "cp", "length", "dr", "loc", "fd", "br", "inter", "cmp", "pointer", "pty", "index", "depth", "sp", "coord", "str", "pt", "tip", "fp", "pl", "code", "shift", "rot", "dim", "xt", "dest", "grad", "pos", "buf", "prot", "req", "trace", "cr", "address", "rl", "ref", "lf", "rt", "pull", "pad"], "buflen": ["bufen", "bublin", "bublen", "crofren", "fuFleni", "bufillen", "bucllen", "buFlon", "bufan", "buFlEN", "croflen", "buFleni", "bufrian", " bullen", "bufrense", "buflEN", "bufilian", "bullen", "bufrin", "auflon", " buflEN", "buflin", "bubleni", "bufllen", "buwlense", "auFlan", "bufren", "bulllen", "buFlen", "bublun", "buFlin", "auflense", "buflens", "buflon", "buFlens", "auflen", "buflan", "buFlian", "crofrense", "bufrlen", "bufon", "buwlon", " bulllen", "buclEN", "buFlun", "bullEN", "buflun", "auflan", "bufilen", "bufreni", " bullens", " bufllen", "fuFlun", "buclens", "bufilense", "auFlon", "crofllen", "fuFlen", "auFlense", "buFlense", "bufense", "crofrlen", "fuflun", "croflense", "buwlan", "auFlen", " buflens", "fuFlin", "fuflin", "buwlen", "buflian", "bufleni", "crofrian", "buFllen", "buflense", "croflian", "bufrun", "fuflen", "buFlan", " bullEN", "bullens", "buclen", "fufleni"], "c": ["enc", "nc", "count", "p", "C", "u", "ch", "tc", "i", "l", "a", "cu", "ct", "fc", "sc", "z", "h", "cs", "cp", "f", "lc", "ci", "dc", "m", "cy", "e", "ctrl", "col", "uc", "ce", "code", "cf", "d", "g", "ca", "abc", "ac", "k", "cd", "cc", "y", "cr", "ec", "esc", "xc"], "sb": ["fb", "sf", "bm", "sth", "mb", "SB", "pb", "rb", "bj", "obb", "zb", "ib", "db", "cb", "usb", "sv", "bf", "bh", "bc", "kb", "BB", "lb", "gb", "bs", "bsp", "eb", "orb", "sp", "sa", "ssl", "sq", "nb", "bg", "su", "bb", "sm", "xb", "lab", "bt", "wb", "sg", "ob", "bp"], "b": ["buff", "fb", "bl", "bi", "function", "p", " eb", "mb", "back", "u", "abb", "rb", "pb", "binary", "v", "auto", "i", "ba", "l", "ib", "db", "cb", "a", "bis", "r", "bf", "be", "block", "z", "lb", "h", "bc", "gb", "bs", "f", "eb", "orb", "m", "w", "x", "base", "e", "o", "abs", "d", "B", "body", "nb", "bg", "aaa", "buf", "bb", "beta", "xb", "bot", "bd", "bin", "y", "bt", "bar", "ab", "wb", "emb", "ob", "t", "bp", "boot"], "n": ["nt", "count", "p", "u", "num", "ln", "N", "v", "l", "out", "sn", "r", "z", "nr", "len", "f", "m", "e", "o", "d", "ns", "pn", "j", "no", "number", "t"], "minus": ["gone", "none", "bles", "google", "prime", "one", "neg", " negative", " needs", "extra", "mini", "seconds", "partial", "sign", " signs", "exp", "sin", "zer", "bits", " neg", "ne", "credit", "ops", "carry", "Neg", "two", "min", "eros", "shift", "plus", " doesn", "zero", "small", " goes", "pos", "beta", "negative", "outs", " plus", "some", "nos", "digit", "cedes", " negatives"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    private static final Scanner scn = new Scanner(System.in);\\n    \\n    public static void main(String[] args) {\\n        int n = scn.nextInt();\\n        double d = 100;\\n        for(int i = 0; i < n; i++) {\\n            d = Math.ceil(d * 1.05);\\n        }\\n        System.out.println((int)d * 1000);\\n    }\\n}", "target": "173", "substitutes": {"scn": ["crn", "scnr", "crnn", "crN", "scN", "Scnn", "SCn", "scb", "SCr", "Scn", " scr", "Scnr", "ScN", " scb", "cran", " scan", "Scr", " scnr", "scnn", "SCnr", "SCb", "scan", "Scb", "Scan", "scr", " scN", " scnn"], "n": ["nn", "nc", "ni", "p", "size", "dn", "u", "nd", "N", "v", "l", "sn", "z", "nl", "len", "f", "conn", "s", "c", "ne", "m", "w", "x", "e", "q", "o", "ns", "nw", "b", "nb", "j", "net", "k", "mn", "number", "en", "t"], "d": ["sd", "ded", "dx", "p", "dn", "dose", "id", "nd", "did", "l", "pd", "dat", "df", "z", "gd", "de", "f", "fd", "s", "c", "dc", "t", "ds", "td", "di", "e", "dad", "md", "dd", "ld", "dy", "dl", "dt", " dd", "D", "bd", "cd", "vd", "da", "dh"], "i": ["bi", "hi", "pi", "p", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "ri", "h", "z", "f", "ci", "c", "ui", "ini", "key", "m", "w", "x", "mu", "e", "ip", "di", "I", "ai", "o", "gi", "mi", "b", "ii", "li", "j", "k", "oi", "in", "chi", "t", "ti"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner scan = new Scanner(System.in);\\n        int x,y,asi;\\n        x=scan.nextInt();\\n        y=scan.nextInt();\\n        \\n       for(int c=0; c<=x; c++){\\n           int t=x-c;\\n           asi =(c*2)+(4*t);\\n           if(asi==y){\\n               System.out.println(\"Yes\");\\n               System.exit(0);\\n           }\\n       }\\n        System.out.println(\"No\");\\n    }\\n}\\n", "target": "62", "substitutes": {"scan": ["nn", "all", "cat", "see", "watch", "connect", "walk", "gram", "server", "span", "run", "search", "l", "fan", "con", "r", "nl", "er", "gen", "south", "query", "plan", "feed", "an", "system", "ry", "skip", "read", "n", "ignore", "sys", "se", "ner", "exec", "in", "parse", "Scan", "clean", "san", "ans", "pan", "look", "sc", "out", "can", "ann", "sync"], "x": ["dx", "p", "size", "u", "id", "xi", "ex", "v", "i", "ix", "a", "l", "r", "z", "h", "f", "ci", "s", "ax", "index", "m", "w", "e", "xx", "xxx", "max", "code", "q", "d", "n", "b", "tx", "work", "time", "xs", "k", "in", "xy", "rx", "ctx", "X"], "y": ["py", "ky", "pi", "p", "gy", "id", "sy", "xi", "v", "i", "vy", "ya", "ix", "a", "Y", "ies", "z", "ny", "f", "asy", "ay", "ty", "e", "ie", "ry", "o", "n", "ish", "b", "dy", "yy", "j", "ye", "yes", "yi", "type", "xy", "ey", "cy"], "asi": ["bi", "te", "pi", "ni", "p", "ami", "pc", "asia", "xi", "za", "si", "i", "ya", "a", "aa", "asin", "ski", "z", "qua", "cs", "pa", "tta", "ity", "ci", "aci", "agi", "ini", "pai", "sa", "di", "cin", "ta", "ai", "isi", "zi", "shi", "qa", "assi", "yi", "sta", "ati", "asa", "ki", "asis", "ti", "osi"], "c": ["nc", "count", "p", "pc", "C", "u", "ch", "tc", "v", "i", "cur", "l", "cu", "a", "ct", "z", "cs", "h", "cp", "f", "cm", "ci", "lc", "dc", "m", "w", "cy", "e", "cin", "ec", "col", "uc", "ce", "cf", "o", "d", "n", "b", "ca", "ac", "k", "in", "cc", "cr", "sc", "xc"], "t": ["nt", "p", "u", "v", "i", "a", "l", "ct", "z", "h", "f", "at", "m", "e", "T", "pt", "ta", "o", "d", "n", "g", "b", "dt", "j", "type", "tt"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n \\npublic class Main {\\n \\n\tvoid submit() {\\n\\n        int N = nextInt();\\n        int[] P = new int[N];\\n        \\n        for(int i=0; i<N; i++){\\n            P[i] = nextInt();\\n        }\\n\\n        int count = 1;\\n\\n        if(N==1){\\n     \t    out.println(count);\\n     \t    return;\\n        }\\n        \\n        int min=P[0];\\n        for(int i=1; i<N; i++){\\n            if(min >= P[i]){\\n                min = P[i];\\n                count++;\\n            }\\n        }\\n     \tout.println(count);\\n\t}\\n\\n\tvoid preCalc() {\\n \\n\t}\\n \\n\tvoid stress() {\\n \\n\t}\\n \\n\tvoid test() {\\n \\n\t}\\n \\n\tMain() throws IOException {\\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\tout = new PrintWriter(System.out);\\n\t\tpreCalc();\\n\t\tsubmit();\\n\t\t//stress();\\n\t\t//test();\\n\t\tout.close();\\n\t}\\n \\n\tstatic final Random rng = new Random();\\n \\n\tstatic int rand(int l, int r) {\\n\t\treturn l + rng.nextInt(r - l + 1);\\n\t}\\n \\n\tpublic static void main(String[] args) throws IOException {\\n\t\tnew Main();\\n\t}\\n \\n\tBufferedReader br;\\n\tPrintWriter out;\\n\tStringTokenizer st;\\n \\n\tString nextToken() {\\n\t\twhile (st == null || !st.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn st.nextToken();\\n\t}\\n \\n\tString nextString() {\\n\t\ttry {\\n\t\t\treturn br.readLine();\\n\t\t} catch (IOException e) {\\n\t\t\tthrow new RuntimeException(e);\\n\t\t}\\n\t}\\n \\n\tint nextInt() {\\n\t\treturn Integer.parseInt(nextToken());\\n\t}\\n \\n\tlong nextLong() {\\n\t\treturn Long.parseLong(nextToken());\\n\t}\\n \\n\tdouble nextDouble() {\\n\t\treturn Double.parseDouble(nextToken());\\n\t}\\n}", "target": "229", "substitutes": {"N": ["Len", "S", "Num", "NA", "Count", "NL", "C", "M", " n", "Size", "Y", "F", "Number", "Q", "SIZE", "Na", "T", "I", "Ni", "NC", "L", "R", "n", "B", "NM", "Ne", "V", "Limit", "K", "NB", "D", "NT", "H", "O", "NS", "Ns", "number", "Z", "W", "X"], "P": ["PR", "IP", "S", "p", "Count", "C", "Part", "J", "PO", "M", "Power", "U", "Y", "Path", "Ps", "RP", "F", "Q", "AP", "A", "PA", "FP", "PS", "Point", "PUT", "PI", "API", "Price", "T", "I", "NP", "CP", "PIN", "TP", "L", "PP", "V", "K", "JP", "BP", "D", "H", "O", "DP", "X"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "it", "id", "u", "slice", "multi", "qi", "xi", "v", "si", "ix", "l", "mini", "is", "ri", "r", "start", "io", "init", "h", "z", "info", "length", "f", "ci", "ui", "c", "ini", "index", "phi", "x", "mu", "uri", "base", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "ii", "b", "cli", "li", "j", "oi", "in", "chi", "range", "ind", "ti"], "count": ["all", "counter", "total", "call", "second", "empty", "low", "p", "Count", "size", "test", "bug", "id", "C", "num", "keep", "pool", "old", "name", "part", "use", "start", "cond", "length", "first", "c", "sum", "key", "check", "index", "weight", "depth", "base", "list", "col", "left", "code", "max", "skip", "act", "n", "b", "only", "current", "work", "found", "child", "number", "missing", "cache", "error", "ind", "close"], "min": ["none", "unit", "don", "p", "val", "size", "id", "minute", "minimum", "next", "po", "span", "pre", "mini", "is", "part", "partial", "use", "start", "value", "init", "lower", "len", "last", "c", "sum", "ini", "key", "amin", "weight", "m", "rand", "MIN", "max", "skip", "code", "miss", "ain", "n", "small", "ress", "pos", "in", "Mini", "lock", "area", "pri", "Min", "ind", "act"], "br": ["bl", "hr", "ro", "ch", "din", "rb", "binary", "sam", "fr", "ri", "dr", "BR", "or", "by", " Reader", "gin", "err", "rr", "gr", "bb", "bin", "cr", "rl", "rx", "bar", "ref", "IN", "re"], "out": ["parent", "print", "client", "p", "next", "line", "pool", "page", "extra", "data", "name", "part", "cmd", "println", "io", "input", "temp", "outer", "user", "c", "ini", "key", "pid", "check", "m", "output", "OUT", "list", "w", "x", "str", "plain", "writer", "string", "max", "Out", "o", "inner", "comment", "n", "op", "object", "err", "again", "obj", "write", "exec", "up", "in", "log", "file", "bin", "outs", "inc", "cache", "error", "IN", "window"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\tboolean bl = true;\\n\t\tint a=0,b=0;\\n\\n\t\twhile(bl){\\n\t\t\ta = stdIn.nextInt();\\n\t\t\tb = stdIn.nextInt();\\n\\n\t\t\tif((1 <= a) && (a <= Math.pow(10, 9)) && (1 <= b) && (b <= Math.pow(10, 9)) ){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\\n\t\tint d = a / b;\\n\t\tint r = a % b;\\n\t\tdouble f = (double)a / (double)b;\\n\\n\t\tSystem.out.printf(\"%d %d %.6f\", d,r,f);\\n\t}\\n}", "target": "90", "substitutes": {"stdIn": [" stdInf", "stIns", " stdin", "astin", "ndin", "stdIns", "ndIn", "stIn", "stOut", " stdIns", "stdInf", "astIN", " stdIN", "wdIn", "sysIn", "astIn", "sysIns", "stdOut", "stdin", "wdIns", "ndIN", "ndIns", "wdIN", "sysOut", " stdOut", "sysInf", "stdIN", "wdin", "stInf"], "a": ["api", "p", "ia", "u", "ad", "ba", "i", "l", "aa", "z", "A", "app", "oa", "au", "s", "c", "ga", "m", "an", "x", "w", "ae", "sa", "e", "ea", "ai", "alpha", "af", "n", "ca", "ac", "fa", "art", "as", "y", "la", "area", "ab", "da", "am", "va", "aj"], "b": ["fb", "bi", "p", "mb", "u", "pb", "abb", "rb", "v", "i", "ba", "l", "bis", "db", "cb", "ib", "bf", "aa", "be", "z", "lb", "bc", "bs", "eb", "c", "w", "x", "base", "e", "o", "n", "g", "B", "nb", "j", "sb", "bb", "beta", "xb", "y", "wb", "ab", "emb", "ob"], "bl": ["BL", "bling", "aug", "bel", "fl", "ber", " BL", " Bl", "Bl", "ibl", " sl", "ib", "fr", "obl", " pl", "bf", "bh", "bc", "bsp", "nl", "Ble", "reg", "lb", "eb", "br", "sl", "tl", "label", "pl", "sil", "abl", " br", "ble", "dl", "bg", "bt", "la", " fl", "gl", "ill", "blast", "ob", "ll"], "d": ["sd", "dx", "p", "dn", "u", "ad", "i", "l", "db", "diff", "dat", "z", "df", "fd", "dc", "c", "ds", "m", "x", "e", "dad", "dd", "n", "dy", "dt", "in", "D", "bd", "cd", "da", "dh", "daily"], "r": ["ir", "p", "u", "hr", "rb", "rs", "pr", "v", "i", "ar", "l", "lr", "fr", "ur", "ri", "h", "z", "nr", "dr", "er", "c", "m", "w", "x", "var", "e", "ra", "rf", "R", "n", "ner", "rd", "rl", "rt", "re"], "f": ["um", "fb", "fo", "sf", "p", "u", "v", "ff", "fac", "l", "fc", "diff", "fs", "F", "h", "df", "fen", "fd", "c", "fm", "feed", "fun", "m", "e", "fp", "cf", "rf", "n", "g", "fa", "ref", "flow", "lf", "t"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        boolean color[] = new boolean[8];\\n        Arrays.fill(color, false);\\n        int rainbow = 0;\\n        int min = 0;\\n        int N = s.nextInt();\\n        for(int i = 0; i < N; i++){\\n            try{\\n                int rate = s.nextInt();\\n                if(!color[rate / 400]){\\n                    min++;\\n                    color[rate / 400] = true;\\n                }\\n            } catch(IndexOutOfBoundsException e){\\n                rainbow++;\\n            }\\n        }\\n        if(min == 0){\\n            min = 1;\\n            rainbow--;\\n        }\\n        System.out.println(min + \" \" + (min+rainbow)); //\u597d\u304d\u306a\u8272\u3063\u3066\u307b\u3093\u3068\u306b\u597d\u304d\u306a\u8272\u306a\u306e\u304b\u3088shit!!\\n    }\\n}\\n", "target": "94", "substitutes": {"s": [" is", "S", "sf", "features", "u", "ins", "server", "ss", "rs", "v", "si", "strings", "a", "bis", "is", "sv", "ls", "r", "ws", "fs", "its", "sample", "stream", "utils", "er", "f", "south", "os", "c", "rows", "ds", "us", "ops", "e", "ssl", "ses", "string", "events", "abs", "inner", "d", "n", "gs", "ns", "b", "sets", "se", "reader", "sb", "xs", "stats", "in", "ans", "as", "parser", "out"], "color": ["background", "status", "share", "blue", "option", "size", "normal", "url", "l", "orange", "stroke", "fill", "r", "colour", "value", "source", "gb", "resource", "char", "channel", "black", "pixel", "style", "index", "or", "white", "col", "state", "token", "colored", "alpha", "border", "err", "pal", "COLOR", "cycle", "Color", "scale", "position", "type", "bin", "number", "level", "light", "range", "theme", "cache", "strip", "sync"], "rainbow": ["raincore", "rainingbo", "rainbows", "rainingcore", "coinjo", "nincore", "rainboy", "blockcro", "rainingbows", "blockbow", "taskbo", "ninbows", "ninbow", "winbo", "winbow", "taskboy", "rinob", "coinob", "rinbo", "Rainboard", "gallbow", "reebo", "coinbo", "blockboard", "Rainbow", "Rainbows", "reecore", "gallob", "Raincore", "Rainbo", "taskbow", "ainbow", "rainjo", "galljo", "reeboy", "Raincro", "raincro", "rainob", "gallbo", "blockbows", "ainboard", "aincro", "coinbow", "rainbo", "rinbow", "rainboard", "taskcore", "reebow", "rainingbow", "winboy", "ainbows", "ninbo", "rinjo", "wincore"], "min": ["hide", "size", "mon", "num", "mins", "date", "diff", "init", "width", "left", "max", "limit", "foo", "bin", "worker", "area", "ni", "p", "minimum", "next", "version", "mini", "name", "value", "ini", "sum", "index", "base", "code", "n", "pos", "no", "minus", "scale", "number", "pri", "strip", "don", "second", "count", "prefix", "na", "minute", "span", "average", "sign", "partial", "part", "sin", "len", "pid", "rain", "weight", "ai", "pass", "in", "Mini", "Min", "low", "core", "ss", "page", "emin", "pre", "sort", "start", "un", "amin", "m", "MIN", "skip", "small"], "N": ["MN", "Len", "S", "Num", "Count", "NL", "C", "J", "M", " n", "Size", "Y", "F", "NN", "Q", "P", "Ni", "I", "L", "R", "n", "B", "Ne", "V", "K", "NB", "D", "H", "O", "Ns", "Z", "NS", "NE", "NI", "X"], "i": ["bi", "api", "pi", "ori", "ni", "p", "u", "id", "multi", "xi", "ji", "v", "si", "ix", "mini", "init", "z", "info", "f", "ci", "ui", "c", "ini", "index", "m", "x", "uri", "di", "I", "ai", "gi", "mi", "n", "ii", "b", "zi", "li", "j", "oi", "in", "chi", "y", "ti"], "rate": ["score", "unit", "rating", "radius", "Rate", "count", "size", "core", "id", "priority", "span", "repeat", "sample", "stage", "source", "pse", "width", "slave", "delay", "key", "order", "ate", "weight", "index", "depth", "frequency", "rat", "base", "code", "grade", "rank", "rule", "limit", "dy", "race", "cycle", "time", "pin", "seed", "scale", "type", "level", "speed", "number", "range", "rates", "fan", "sync"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\t\\n\t\tArrayList<Integer> list = new ArrayList<Integer>();\\n\t\tint count = 0;\\n\t\tfor(int i = 0; i < s.length() - t.length() + 1; i++) {\\n\t\t\tString temp = s.substring(i, i + t.length());\\n\t\t\tfor(int j = 0; j < t.length(); j++) {\\n\t\t\t\tif(temp.charAt(j) != t.charAt(j)) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tlist.add(count);\\n\t\t\tcount = 0;\\n\t\t}\\n\t\tCollections.sort(list);\\n\t\tSystem.out.println(list.get(0));\\n\t}\\n\\n}\\n", "target": "158", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args) {\\n    //\u5165\u529b\\n    Scanner sc = new Scanner(System.in);\\n//\u5168\u4f53\u306e\u500b\u6570\\nlong N =sc.nextLong();\\n//A\u306f\u9752\u306e\u500b\u6570\\nlong A =sc.nextLong();\\n//B\u306f\u8d64\u306e\u500b\u6570\\nlong B =sc.nextLong();\\n//\u30ab\u30a6\u30f3\u30c8\u5909\u6570\\nlong cnt = 0;\\n//\u9752\u3068\u8d64\u306e\u30bb\u30c3\u30c8\u306e\u6570\\nlong set = (long)(N/(A+B));\\ncnt = set*A;\\nif(N%(A+B) == 0){\\n  System.out.println(cnt);\\n}else{\\n  //\u30bb\u30c3\u30c8\u3092\u4e26\u3079\u305f\u3068\u304d\u306e\u500b\u6570\\n  long ball =set*(A+B);\\n  if(N-ball >= A){\\n    System.out.println(cnt+A);\\n  }else{\\n    System.out.println(cnt+(N-ball));\\n  }\\n  \\n}\\n\\n}\\n\\n}\\n", "target": "217", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n\\n        StringBuilder stb = new StringBuilder();\\n        for(int i = 0 ; i < s.length() ; i++){\\n            stb.append('x');\\n        }\\n        System.out.println(stb.toString());\\n    }\\n}", "target": "122", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "scope", "pc", "sec", "ss", " SC", "si", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "cor", "desc", "ci", "sl", "c", "sp", "uc", "ca", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus"], "s": ["S", "ts", "sf", "u", "ins", "ks", "ss", "rs", "si", "strings", "l", "qs", "a", "is", "sv", "ls", "input", "ps", "f", "params", "sl", "ms", "os", "c", "ds", "ings", "parts", "ses", "string", "gs", "ns", "b", "services", "sets", "shows", "su", "sb", "xs", "in", "ans", "as"], "stb": ["stsb", "stcb", " stf", " stdb", "strfb", "Stab", " stab", "stdb", "STcb", "istb", "istab", "STab", "STf", "Stfb", "stab", "Stdb", "Stbb", "strcb", "STfb", "Stb", "stbb", "Sta", "ista", "Stsb", "stfb", "STsb", "Stcb", "strb", " stbb", "istdb", "STb", "sta", " sta", "strsb", "STbb", "Stf", "stf"], "i": ["bi", "hi", "pi", "p", "id", "u", "multi", "qi", "xi", "ji", "v", "si", "ix", "a", "ri", "init", "z", "h", "abi", "end", "f", "ci", "c", "ui", "ini", "index", "phi", "x", "uri", "e", "di", "I", "ai", "o", "gi", "d", "ii", "zi", "li", "j", "k", "oi", "in", "chi", "t", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int X = Integer.parseInt(sc.next());\\n        sc.close();\\n\\n        //\u786c\u8ca8\u306e\u679a\u6570\\n        int count500 = 0;\\n        int count5 = 0;\\n        //\u6b8b\u9ad8\\n        int remain = 0;\\n        //\u5b09\u3057\u3055\u5408\u8a08\\n        int happy500 = 0;\\n        int happy5 = 0;\\n\\n        count500 = X / 500;\\n        happy500 = 1000 * count500;\\n        remain = X - (500 * count500);\\n\\n        count5 = remain / 5;\\n        happy5 = 5 * count5;\\n\\n        System.out.println(happy500 + happy5);\\n\\n    }\\n\\n}\\n", "target": "180", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "sf", "pc", "class", "ch", "tc", "ss", "server", " SC", "sub", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "cv", "src", "lc", "sl", "c", "cer", "sp", "system", "sq", "uc", "set", "soc", "sr", "se", "ner", " Sc", "anc", "sb", "scan", "isc", "osc", "rc", "cc", "cr", "sch", "parser", "spec", "ec", "esc", "sync"], "X": ["S", " N", "C", "ID", "J", "N", "M", "U", "Y", "F", "XXX", "Q", "P", "A", " x", "PI", "x", "T", "I", "L", "R", " Z", "B", "V", "K", "D", "H", "Z"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n      Scanner sc = new Scanner(System.in);\\n\t\tString s = sc.nextLine();\\n\t\tArrayList<Character> c = new ArrayList<>();\\n\t\tint a=0,b=0;\\n\t\tfor(int i=0 ; i<s.length(); i++) {\\n\t\t\tc.add(s.charAt(i));\\n\t\t}\\n\t\tfor(int i=0 ; i<c.size() ; ++i) {\\n\t\t\tif(c.get(i) == '0') {\\n\t\t\t\ta++;\\n\t\t\t}else {\\n\t\t\t\tb++;\\n\t\t\t}\\n\t\t}\\n\t\tif(a>=b) {\\n\t\t\tSystem.out.println(b*2);\\n\t\t}else {\\n\t\t\tSystem.out.println(a*2);\\n\t\t}\\n    }\\n}\\n", "target": "14", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "sf", "scope", "pc", "na", "ch", "sec", "ss", "server", " SC", "si", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "cor", "lc", " scr", "sp", "system", "sq", "uc", "soc", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cr", "cont", "sch", "spec", "esc"], "s": ["S", "sf", "p", "u", "ins", "ss", "v", "si", "strings", "l", "qs", "series", "sv", "is", "ls", "ws", "r", "fs", "its", "h", "cs", "bs", "f", "sl", "os", "ds", "m", "e", "string", "ses", "abs", "d", "gs", "ns", "g", "sets", "services", "styles", "su", "sb", "in", "ans", "as"], "c": ["cl", "enc", "cat", "nc", "mc", "ic", "oc", "p", "pc", "C", "u", "ch", "cur", "cu", "l", "cb", "ct", "fc", "cs", "co", "cp", "cm", "ci", "dc", "lc", "cy", "e", "ctrl", "col", "uc", "cf", "d", "ca", "ac", "rc", "cc", "cr", "cont", "cache", "ec", "xc", "coll"], "a": ["aw", "pi", "p", "ia", "u", "na", "ad", "aaaa", "ba", "l", "aa", "A", "oa", "pa", "f", "au", "ga", "index", "ak", "an", "sa", "e", "ea", "ada", "ae", "ai", "alpha", "d", "af", "n", "ca", "ac", "j", "aaa", "qa", "sta", "ama", "fa", "y", "la", "area", "ab", "da", "am", "va", "aj"], "b": ["fb", "p", "mb", "u", "pb", "abb", "rb", "v", "ba", "l", "db", "bis", "bf", "aa", "be", "lb", "bc", "pa", "f", "eb", "bs", "br", "base", "e", "bound", "o", "n", "B", "ca", "body", "nb", "j", "aaa", "sb", "bb", "beta", "xb", "bot", "bd", "bin", "y", "wb", "ab", "bar", "ob"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "hei", "iu", "p", "it", "u", "id", "slice", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "l", "ri", "init", "io", "abi", "f", "ci", "ui", "ini", "m", "phi", "x", "eni", "uri", "mu", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "isi", "ii", "zi", "li", "pass", "j", "oi", "yi", "y", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int[] h = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            h[i] = Integer.parseInt(sc.next());\\n        }\\n        for (int i = n - 1; i > 0; i--) {\\n            if (h[i] < h[i - 1]) {\\n                h[i - 1]--;\\n            }\\n            if (h[i] < h[i - 1]) {\\n                System.out.println(\"No\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"Yes\");\\n    }\\n}", "target": "74", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sk", "sf", "scope", "pc", "ser", "ch", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "scl", "bc", "cs", "sw", "cv", "src", "lc", "ci", "sl", "dc", "c", "cer", " scr", "sp", "ec", "system", "uc", "soc", "sr", "se", "ner", " Sc", "anc", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "squ", "spec", "out", "esc", "cus", "sync"], "n": ["nn", "none", "nc", "nt", "count", "p", "size", "dn", "u", "num", "N", "ln", "v", "cn", "l", "a", "sn", "r", "z", "len", "f", "s", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "in", "number", "y", "en", "t"], "h": ["head", "hi", "p", "he", "id", "u", "hr", "ch", "gh", "v", "help", "sh", "l", "a", "uh", "rh", "bh", "ht", "home", "r", "ph", "z", "ha", "hd", "ah", "f", "s", "c", "t", "m", "w", "x", "e", "hist", "q", "hs", "o", "d", "g", "b", "ih", "hm", "k", "hh", "host", "H", "hl", "y", "oh", "eh", "th", "dh"], "i": ["slice", "multi", "qi", "a", "l", "init", "info", "key", "phi", "uri", "ie", "o", "cli", "ii", "zi", "chi", "bi", "ni", "p", "iu", "id", "next", "anti", "si", "ix", "mini", "io", "abi", "f", "ci", "ui", "ini", "index", "eni", "adi", "j", "yi", "my", "t", "fi", "pi", "it", "xi", "ji", "v", "x", "mu", "di", "I", "ai", "gi", "b", "in", "y", "ti", "hi", "api", "ori", "u", "page", "is", "ri", "start", "c", "m", "ip", "e", "mi", "li", "oi"]}}
{"code": "import java.util.*;\\npublic class Main {\\n   public static void main(String[] args) {\\n      Scanner sc = new Scanner(System.in);\\n\\n      int x = sc.nextInt();\\n\\n      int[] n = {1, 4, 8, 9, 16, 25, 27, 32, 36, 49, 64, 81, 100, 121, 125, 128, 144, 169, 196, 216, 225, 243, 256, 289, 324, 343, 361, 400, 441, 484, 512, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1000, 1001};\\n\\n     int i = 0; \\n     \\n      for (i = 0; i < 43; i++) {\\n         if ( x < n[i]) {\\n            break;\\n         }\\n      }\\n\\n      System.out.println(n[i-1]);\\n   }\\n}", "target": "143", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "pc", "ser", "ch", "sec", "ss", " SC", "cur", "sub", "asc", "sh", "Sc", "SC", "r", "iss", "bc", "desc", "sw", "src", "cs", "lc", "ci", "c", " scr", "sp", "acc", "system", "soc", "g", "se", "ner", " Sc", "ocr", "anc", "scan", "osc", "rc", "cr", "sch", "ec", "esc"], "x": ["p", "xp", "id", "u", "num", "xi", "xf", "ex", "v", "xes", "ix", "X", "exp", "z", "f", "c", "ax", "wx", "index", "m", "e", "xxx", "max", "d", "g", "abc", "tx", "xxxx", "work", "xe", "xs", "xxxxxxxx", "y", "rx", "xt", "fx", "t", "xc", "xx"], "n": ["nn", "none", "nc", "on", "ni", "p", "dn", "na", "num", "nan", "N", "ln", "v", "cn", "l", "a", "name", "sn", "sign", "ng", "init", "nl", "fn", "s", "c", "ne", "m", "an", "np", "e", "o", "d", "ns", "g", "b", "nw", "network", "names", "pn", "nb", "j", "net", "no", "gn", "zn", "en"], "i": ["bi", "hi", "api", "pi", "p", "it", "u", "id", "slice", "multi", "qi", "xi", "v", "si", "ix", "l", "data", "mini", "ri", "r", "init", "io", "h", "info", "abi", "end", "f", "lc", "ci", "vi", "c", "ui", "ini", "index", "m", "phi", "mu", "uri", "e", "di", "I", "ai", "gi", "d", "mi", "b", "ii", "zi", "li", "j", "k", "oi", "yi", "chi", "y", "ti", "fi"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\\n\t\tString ans = \"No\";\\n\\n\t\touter:\\n\t\tfor (int i = 0; i * 4 <= n; i++) {\\n\t\t\tfor (int j = 0; i * 4 + j * 7 <= n; j++) {\\n\t\t\t\tif (i * 4 + j * 7 == n) {\\n\t\t\t\t\tans = \"Yes\";\\n\t\t\t\t\tbreak outer;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "172", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "sf", "scope", "pc", "na", "ch", "server", "ss", " SC", "sh", "Sc", "SC", "con", "bc", "cs", "sw", "src", "lc", "c", "cer", "sp", "system", "sq", "pl", "uc", "soc", "ca", "sem", "se", "ner", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "ec", "esc", "sync"], "n": ["nn", "nc", "ni", "p", "size", "u", "num", "nan", "N", "v", "l", "name", "sn", "r", "z", "un", "nl", "len", "f", "conn", "s", "c", "inn", "ne", "m", "w", "x", "e", "o", "d", "ns", "g", "b", "network", "nb", "net", "k", "in", "mn", "number", "y", "t"], "ans": ["nn", "ana", "acts", "sk", "AN", "aned", "ars", "vers", "anas", "na", "ads", "ins", "aus", "ks", "ss", "anon", "lan", "aces", "acs", "vals", "atan", "es", "reads", "ls", "eps", "ens", "olds", "aks", "cs", "vs", "s", "os", "ings", "nas", "ds", "ays", "ags", "ants", "an", "cons", "ANS", "arts", "acers", "flags", "atts", "leans", "ents", "ns", "ras", "ats", "outs", "as", "annot", "anners", "ons", "aning", "fts", "ann"], "i": ["bi", "hi", "api", "pi", "ni", "iu", "p", "ami", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "is", "io", "init", "z", "info", "ci", "ui", "c", "ini", "eni", "x", "uri", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "zi", "li", "oi", "in", "y", "fi"], "j": ["dj", "jj", "jc", "ni", "p", "oj", "it", "u", "adj", "J", "qi", "bj", "ji", "next", "v", "jp", "si", "l", "ij", "fr", "z", "h", "end", "aj", "f", "br", "vi", "ui", "key", "x", "e", "di", "ja", "ie", "o", "d", "b", "ii", "li", "js", "k", "obj", "y", "jl", "jo"]}}
{"code": "import java.io.*;\\n\\nclass Main{\\n    public static void main(String[] args) throws Exception{\\n\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String num1 = br.readLine();\\n        String[] num2 = num1.split(\" \");\\n\\n        Double a = Double.parseDouble(num2[0]);\\n\\n        double s = a * a * Math.PI;\\n        double l = (a + a) * Math.PI;\\n        String S = String.format(\"%.6f\", s);\\n        String L = String.format(\"%.6f\", l);\\n\\n        System.out.println(S + \" \" + L);\\n    }\\n}", "target": "239", "substitutes": {"br": ["bl", "div", "ber", "wr", "hr", "rb", "browser", "tr", "arr", "i", "res", "fin", "STR", "cb", "fr", "r", "yr", "bh", "io", "bridge", "stream", "nr", "src", "er", "dr", "mr", "BR", "img", "bro", "HR", "str", "Br", "abs", "sr", "b", "result", "err", "gr", "ner", "reader", "buf", "ocr", "cr", "ref", "out"], "num1": ["n2", " num0", "namOne", "number1", "numFirst", "nam01", "textFirst", "nLine", " numLine", "text1", "n1", "NUMFirst", "namFirst", "textOne", "num01", "numOne", "n0", "numLine", "number2", "NUM01", "text01", "NUM1", "num0", "nam1", "NUMOne", "numberLine", "number0"], "num2": [" num0", "n2", "um0", "nTwo", "n1", "nam2", "n0", "um2", "umTwo", "nam0", "dim1", "mun1", "um1", "mun0", "num32", "num0", "mun2", "nam1", "dim0", "mun32", "numTwo", " num32", "dim2", "dimTwo", "nam32"], "a": ["aw", "p", "u", "i", "ba", "ar", "r", "aa", "z", "A", "oa", "pa", "f", "au", "c", "ga", "m", "an", "x", "w", "sa", "e", "ae", "ea", "ai", "alpha", "d", "n", "g", "ca", "b", "ac", "qa", "sta", "y", "as", "la", "area", "da", "ma", "am", "va", "aj"], "s": ["sd", "sf", "p", "u", "ss", "si", "i", "sh", "Si", "sv", "Sa", "ls", "z", "h", "A", "cs", "ps", "f", "sl", "ds", "an", "x", "sa", "sq", "n", "ns", "b", "se", "su", "xs", "y", "as", "t"], "l": ["cl", "ly", "p", "u", "dL", "ln", "v", "le", "el", "ls", "al", "lu", "z", "lb", "nl", "lp", "len", "length", "f", "lc", "sl", "pl", "d", "n", "kl", "b", "li", "dl", "ol", "y", "la", "lf", "ll"], "S": ["SI", "AS", "SS", "AR", "SL", "ST", "SN", "TS", "C", "N", "LS", "RS", "SE", "U", "Si", "SH", "Sa", "GS", "SU", "F", "P", "A", "SA", "Su", "T", "R", "B", "V", "K", "NS", "SR", "SD", "Sl", "X"], "L": ["Lu", "VL", "SL", "NL", "EL", "Li", "TL", "N", "LS", "LIN", "LA", "LU", "Pl", "ELL", "U", "FL", "LR", "CL", "P", "GL", "RL", "LP", "ML", "DL", "UL", "LL", "B", "El", "Sl", "IL", "LD", "LT", "LM", "LB", "LI", "XL", "OL"]}}
{"code": "public class Main{\\n  public void run(java.io.InputStream in, java.io.PrintStream out){\\n    java.util.Scanner sc = new java.util.Scanner(in);\\n/*answer*/\\n    int a, b;\\n    a = sc.nextInt();\\n    b = sc.nextInt();\\n\\n    if(a < b){\\n      System.out.println(\"a < b\");\\n    }else if(a > b){\\n      System.out.println(\"a > b\");\\n    }else{\\n      System.out.println(\"a == b\");\\n    }\\n/*fin*/\\n    sc.close();\\n  }\\n  public static void main(String[] args){\\n    (new Main()).run(System.in, System.out);\\n  }\\n}", "target": "179", "substitutes": {"in": ["isin", "login", "ins", "din", "arin", "ex", "i", "data", "name", "lin", "request", "r", "io", "source", "h", "stream", "input", "init", "src", "win", "resource", "In", "f", "info", "image", "c", "ini", "inn", "m", "raw", "min", "inf", "inner", "plus", "err", "reader", "work", "up", "log", "bin", "file", "inc", "IN"], "out": ["msg", "print", "client", "buffer", "prefix", "view", "ex", "auto", "ext", "res", "line", "pool", "page", "data", "path", "name", "point", "diff", "r", "io", "co", "temp", "gen", "conn", "report", "outer", "image", "down", "key", "output", "w", "OUT", "list", "base", "str", "writer", "string", "raw", "Out", "o", "result", "err", "cli", "again", "write", "obj", "exec", "up", "log", "file", "bin", "outs", "group", "lock", "off", "dump", "copy", "cache", "post", "engine", "query"], "sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "com", "ch", "tc", "ss", "server", "cur", "search", "Sc", "SC", "sign", "cs", "bc", "sw", "src", "cv", "lc", "ci", "s", "c", "cer", "console", "sp", "sa", "acc", "system", "sq", "uc", "soc", "ca", "sem", "se", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "sch", "esc", "ctx"], "a": ["api", "p", "ia", "na", "u", "ad", "i", "ba", "aa", "A", "pa", "f", "c", "ga", "an", "x", "sa", "ae", "e", "ai", "code", "alpha", "d", "af", "n", "ca", "ac", "aaa", "fa", "as", "la", "y", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["fb", "bi", "ub", "p", "mb", "u", "pb", "abb", "rb", "v", "ba", "i", "ib", "db", "l", "bf", "be", "aa", "z", "lb", "bc", "bs", "eb", "f", "pa", "c", "ga", "x", "base", "e", "o", "d", "n", "B", "dy", "nb", "j", "sb", "bb", "beta", "bd", "y", "wb", "ab"]}}
{"code": "public class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tjava.util.Scanner sc = new java.util.Scanner(System.in);\\n\\n\t\tint a,b,c;\\n\t\ta = sc.nextInt();\\n\t\tb = sc.nextInt();\\n\t\tc = sc.nextInt();\\n\\n\t\tint count = 0;\\n\t\tfor ( int div = a; div <= b; div++) {\\n\t\t\tif ( c % div == 0 )\\n\t\t\t\tcount++;\\n\t\t}\\n\\n\t\tSystem.out.println(count);\\n\t}\\n\\n}", "target": "190", "substitutes": {}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args) {\\n\t\tint[] intList = new int[10];\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tfor (int count = 0; count < 10; count++) {\\n\t\t\tint temp = sc.nextInt();\\n\t\t\tif (temp <= 10000) {\\n\t\t\t\tintList[count] = temp;\\n\t\t\t}\\n\t\t}\\n\t\tArrays.sort(intList);\\n\t\tfor (int j = 9; j >= 7; j--) {\\n\t\t\tSystem.out.println(intList[j]);\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}", "target": "164", "substitutes": {"intList": ["strSet", "intCollection", "strCollection", "indChain", "intCount", "strlist", "partList", "IntCount", "integerlist", "intlist", "indlist", "integerCount", " intLibrary", "IntLibrary", "indCollection", "indList", "integerList", "intLibrary", " intCount", "partlist", "partCount", "IntList", " intChain", " intlist", "integerCollection", "integerLibrary", " intLIST", "intLIST", "intSet", "IntChain", "partLIST", "indLIST", "strList", "indSet", "IntLIST", "Intlist", "intChain", "integerSet"], "sc": ["cl", "sche", "mc", "sci", "nc", "sk", "sf", "scope", "pc", "class", "ch", "tc", "ss", " SC", "cur", "sh", "Sc", "SC", "ct", "bc", "cs", "sw", "src", "cp", "cv", "ci", "dc", "c", "cer", "sp", "system", "sq", "uc", "soc", "ca", "sem", "se", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "ctx", "cus", "sync"], "count": ["all", "counter", "div", "total", "cat", "call", "parent", "nt", "p", "Count", "size", "test", "now", "id", "num", "v", "keep", "i", "const", "pool", "old", "name", "start", "iter", "z", "batch", "len", "length", "f", "c", "sum", "key", "check", "index", "base", "list", "depth", "full", "col", "min", "code", "n", "b", "err", "limit", "current", "time", "child", "found", "group", "level", "number", "cc", "cache", "ind", "act", "coll"], "temp": ["div", "tmp", "offset", "total", "unit", "api", "p", "prefix", "size", "test", "id", "num", "tc", "i", "const", "extra", "point", "start", "zip", "Temp", "z", "iter", "length", "f", "lc", "loc", "alt", "c", "key", "index", "base", "ip", "pt", "min", "max", "n", "limit", "dest", "current", "frac", "type", "number", "level", "inc", "cache", "fake"], "j": ["dist", "jj", "jc", "p", "adj", "J", "num", "ji", "json", "fail", "v", "jp", "i", "vol", "l", "ij", "name", "part", "init", "block", "z", "length", "f", "br", "c", "key", "index", "x", "str", "ja", "uj", "code", "jit", "o", "d", "shift", "n", "b", "li", "pass", "js", "obj", "k", "pos", "step", "req", "job", "y", "lock", "off", "jl", "section", "iq", "ind", "aj", "sync"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main\\n{\\n  public static void main (String args[]) throws Exception\\n  {\\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt(), b = sc.nextInt();\\n    double p= a*b;\\n    if (p%2==0)\\n    \tSystem.out.println(\"Even\");\\n    else\\n    \tSystem.out.println(\"Odd\");\\n\\n    \\n  }\\n}", "target": "112", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "sf", "scope", "pc", "core", "ser", "com", "ch", "tc", "ss", "sec", "server", " SC", "cur", "asc", "search", "Sc", "SC", "bc", "cs", "sw", "src", "lc", "ci", "sl", "c", "cer", "sp", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "cont", "ec", "esc", "cus", "sync"], "a": ["count", "na", "ad", "ba", "i", "aa", "A", "oa", "pa", "f", "au", "s", "c", "an", "x", "base", "w", "sa", "e", "ae", "alpha", "d", "n", "ca", "ac", "ama", "as", "y", "la", "area", "ab", "da", "va", "aj"], "b": ["fb", "mb", "pb", "v", "ba", "i", "l", "bf", "aa", "lb", "A", "bs", "f", "pa", "eb", "s", "c", "base", "e", "o", "d", "n", "B", "nb", "j", "sb", "bb", "y", "ab", "ob", "bp"], "p": ["pi", "pc", "xp", "u", "po", "dp", "v", "jp", "pr", "l", "ap", "point", "r", "pg", "P", "lp", " ap", "cp", "pa", "c", " cp", "np", "sp", "mp", "fp", " xp", "q", "alpha", "o", "op", "n", "g", "vp", "tp", "pp", "t", "bp"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static Scanner sc = new Scanner(System.in);\\n    public void run() throws Exception {\\n\\n    \tScanner sc = new Scanner(System.in);\\n    \tlong aa[] = new long[4];\\n    \tlong a = sc.nextLong();\\n    \tlong b = sc.nextLong();\\n    \tlong c = sc.nextLong();\\n    \tlong d = sc.nextLong();\\n    \taa[0] = a*c;\\n    \taa[1] = a*d;\\n    \taa[2] = b*c;\\n    \taa[3] = b*d;\\n\\n    \tlong res = Long.MIN_VALUE;\\n    \tfor(int i=0; i<4;i++){\\n    \t\tif(res<aa[i]){\\n    \t\t\tres = aa[i];\\n    \t\t}\\n    \t}\\n\\n/*    \tint n = 5;\\n    \t\t\tint []aaa = {2, 0, 9, 0, -5};\\n    \t\t\tint res = -10000000;\\n    \t\t\tfor(int i=0; i<n;i++){\\n    \t\t\t\tif(res<aaa[i]){\\n    \t\t\t\t\tres = aaa[i];\\n    \t\t\t\t}\\n    \t\t\t}*/\\n\t\tSystem.out.println(res);\\n\t\t\\n\t\t\\n    }\\n    //\u518d\u5e30\\n    static long fib(int n){\\n\t    if (n <= 1){\\n\t    \treturn 1;\\n\t    }else{\\n\t    \treturn fib(n-1) + fib(n-2);\\n\t    }\\n\t}\\n\\n\\n    //\u52d5\u7684\u8a08\u753b\u6cd5 DP\\n    static long nCr(int n,int r) {\\n    \t  int dp[][]=new int[2001][2001];\\n    \t  for(int i=0;i<2001;i++) {\\n    \t    dp[0][i]=0;\\n    \t  }\\n    \t  for(int i=0;i<2001;i++) {\\n    \t    dp[i][0]=1;\\n    \t  }\\n    \t  for(int i=1;i<2001;i++) {\\n    \t    for(int j=1;j<2001;j++) {\\n    \t      if(i==j) {\\n    \t        dp[i][j]=1;\\n    \t      }else {\\n    \t        dp[i][j]=dp[i-1][j-1]+dp[i][j-1];\\n    \t      }\\n    \t    }\\n    \t  }\\n    \t  return dp[n][r];\\n    \t}\\n\\n    public static void main(String[] args) throws Exception {\\n        new Main().run();\\n    }\\n    //2 \u3064\u306e Key \u3092\u3082\u3064 Map.pair \u306f\u4e8c\u3064\u306e\u8981\u7d20\u3092\u5165\u308c\u308b\u5165\u308c\u7269\\n    class pair{\\n    \t  int wt,val;\\n    \t  pair(int wt,int val){\\n    \t    this.wt=wt;\\n    \t    this.val=val;\\n    \t  }\\n    }\\n}\\n", "target": "244", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "sche", "scope", "pc", "core", "com", "server", "ch", "ss", " SC", "cur", "asc", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "cor", "conn", "cer", " scr", "console", "sp", "system", "sq", "uc", "soc", "cli", "util", "sys", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "cms", "cam", "esc", "ctx", "cus", "sync"], "aa": ["ana", "xa", "pha", "na", "AA", "aaaa", "arin", "za", "arr", "ba", "ar", "ya", "data", "cca", "pa", "ah", "au", "ga", "ppa", "isa", "account", "sa", "ae", "ea", "aka", "ai", "alpha", "af", "anna", "ca", "ac", "acl", "wa", "aaa", "qa", "fa", "asha", "as", "la", "asa", "area", "da", "apa", "ma", "apy", "va", "array"], "a": ["p", "u", "ad", "ba", "ar", "r", "A", "oa", "pa", "f", "au", "at", "ata", "an", "x", "w", "sa", "ae", "ada", "ea", "e", "ai", "alpha", "o", "n", "ca", "ac", "aaa", "fa", "y", "as", "asa", "area", "ab", "da", "va", "aj"], "b": ["p", "u", "ad", "v", "ba", "l", "db", "ib", "r", "h", "z", "f", "eb", "s", "w", "x", "e", "o", "n", "g", "B", "ca", "j", "aaa", "k", "bb", "y", "ab"], "c": ["p", "C", "u", "ad", "v", "l", "cu", "r", "z", "h", "cs", "bc", "f", "ci", "dc", "s", "m", "w", "x", "cy", "e", "cf", "o", "n", "g", "ca", "ac", "j", "k", "cd", "y", "t"], "d": ["dx", "p", "u", "ad", "v", "l", "db", "r", "z", "h", "f", "dc", "s", "ds", "m", "w", "x", "e", "q", "o", "dd", "n", "g", "dy", "dt", "j", "k", "D", "y", "da", "t"], "res": ["rss", "vec", "ars", "features", "val", "rez", "rus", "pres", "default", "des", "rep", "reed", "rs", "cells", "arr", " Res", "vals", "ares", "r", "rh", "right", "results", "reg", "ps", "upper", "RES", "params", "mr", "ms", "os", "Rs", "resp", "rev", "abs", "rest", "prev", "result", "err", "details", "ras", "ress", "gr", "response", "rel", "ret", "ris", "req", "our", "cms", "Res", "real", "nos", "resolution", "rates", "re"], "i": ["bi", "hi", "api", "pi", "slice", "u", "id", "it", "multi", "qi", "xi", "v", "si", "ix", "l", "ri", "part", "start", "io", "init", "info", "f", "ci", "ui", "index", "phi", "x", "mu", "uri", "e", "di", "I", "ai", "gi", "mi", "shift", "ii", "zi", "li", "j", "oi", "chi", "y", "ti", "fi"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tInputStream in = System.in;\\n\tPrintStream out = System.out;\\n\\n\tpublic void _main(String[] args) {\\n\t\tScanner sc = new Scanner(in);\\n\\n\t\tint K = sc.nextInt();\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\t\\n\t\tsc.close();\\n\\n\t\tfor(int a=K;a<=B;a+=K) {\\n\t\t\tif(a>=A && a <= B) {\\n\t\t\t\tout.println(\"OK\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tout.println(\"NG\");\\n\t\t\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main()._main(args);\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate String join(String delimiter, int[] a) {\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\tfor (int i = 0; i < a.length; i++) {\\n\t\t\tsb.append(a[i]);\\n\t\t\tsb.append(delimiter);\\n\t\t}\\n\t\treturn sb.substring(0, Math.max(sb.length() - delimiter.length(), 0));\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate String join(String delimiter, long[] a) {\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\tfor (int i = 0; i < a.length; i++) {\\n\t\t\tsb.append(a[i]);\\n\t\t\tsb.append(delimiter);\\n\t\t}\\n\t\treturn sb.substring(0, Math.max(sb.length() - delimiter.length(), 0));\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate int max(int[] arr) {\\n\t\tif(arr == null || arr.length == 0) {\\n\t\t\tthrow new IllegalArgumentException(Arrays.toString(arr));\\n\t\t}\\n\\n\t\tint candidate = arr[0];\\n\t\tfor(int i=1;i<arr.length;i++) {\\n\t\t\tcandidate = candidate > arr[i] ? candidate : arr[i];\\n\t\t}\\n\t\treturn candidate;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate long max(long[] arr) {\\n\t\tif(arr == null || arr.length == 0) {\\n\t\t\tthrow new IllegalArgumentException(Arrays.toString(arr));\\n\t\t}\\n\\n\t\tlong candidate = arr[0];\\n\t\tfor(int i=1;i<arr.length;i++) {\\n\t\t\tcandidate = candidate > arr[i] ? candidate : arr[i];\\n\t\t}\\n\t\treturn candidate;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate int min(int[] arr) {\\n\t\tif(arr == null || arr.length == 0) {\\n\t\t\tthrow new IllegalArgumentException(Arrays.toString(arr));\\n\t\t}\\n\\n\t\tint candidate = arr[0];\\n\t\tfor(int i=1;i<arr.length;i++) {\\n\t\t\tcandidate = candidate < arr[i] ? candidate : arr[i];\\n\t\t}\\n\t\treturn candidate;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate long min(long[] arr) {\\n\t\tif(arr == null || arr.length == 0) {\\n\t\t\tthrow new IllegalArgumentException(Arrays.toString(arr));\\n\t\t}\\n\\n\t\tlong candidate = arr[0];\\n\t\tfor(int i=1;i<arr.length;i++) {\\n\t\t\tcandidate = candidate < arr[i] ? candidate : arr[i];\\n\t\t}\\n\t\treturn candidate;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate int[] nextIntArray(Scanner sc, int n) {\\n\t\tint[] result = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tresult[i] = sc.nextInt();\\n\t\t}\\n\t\treturn result;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate long[] nextLongArray(Scanner sc, int n) {\\n\t\tlong[] result = new long[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tresult[i] = sc.nextLong();\\n\t\t}\\n\t\treturn result;\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate int[] nextIntArray1origin(Scanner sc, int n) {\\n\t\tint[] result = new int[n + 1];\\n\t\tfor (int i = 1; i <= n; i++) {\\n\t\t\tresult[i] = sc.nextInt();\\n\t\t}\\n\t\treturn result;\\n\t}\\n}\\n", "target": "28", "substitutes": {"in": ["cl", "buffer", "ins", "ch", "din", "ex", "path", "line", "data", "is", "con", "r", "io", "source", "init", "stream", "input", "src", "resource", "In", "f", "ci", "image", "c", "ini", "inn", "arg", "m", "min", "read", "inf", "inner", "ai", "err", "ac", "reader", "exec", "up", "log", "bin", "rc", "inc", "IN"], "out": ["this", "conf", "parent", "msg", "print", "scope", "p", "buffer", "prefix", "ch", "ex", "line", "pool", "page", "extra", "png", "name", "println", "exp", "io", "info", "report", "outer", "sum", "arg", "check", "output", "OUT", "w", "list", "str", "string", "writer", "Out", "o", "inner", "comment", "cli", "b", "err", "again", "pass", "write", "obj", "exec", "up", "log", "outs", "exit", "inc", "lock", "dump", "cache", "error", "IN", "query"], "sc": ["cl", "enc", "mc", "sci", "nc", "sf", "scope", "pc", "ch", "sec", "ss", " SC", "si", "cur", "sub", "asc", "sh", "search", "Sc", "SC", "sv", "exp", "bc", "cs", "sw", "cv", "lc", "ci", "s", "c", "cer", " scr", "sp", "system", "sq", "uc", "soc", "sr", "ca", "cli", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "esc", "ctx", "cus", "sync"], "K": ["KK", "Ku", "C", "IK", "Ak", "N", "MK", "M", "CH", "U", "Y", "KB", "F", "Q", "P", "Sk", "T", "I", "KA", "CP", "PK", "L", "V", "k", "Ka", " k", "AC", "D", "H", "Z", "KI", "O", "G", "KE", "KS", "SK", "E", "X"], "A": ["S", "AS", "AR", "Ac", "NA", "C", "Ca", "AW", "Ak", "An", "AA", "LA", "As", "Y", "BA", "AP", "P", "SA", "Ma", "YA", "Na", "API", "AAAA", "UA", "I", "KA", "L", "HA", "Alpha", "Ar", "Ra", "AC", "Ka", "D", "CA", "G", "DA", "AB"], "B": ["AD", "BL", "Bs", "NA", "C", "SB", "J", "BF", "N", "AA", "M", "BI", "Ba", "Bi", "U", "Y", "F", "WB", "UB", "BA", "P", "BC", "BB", "T", "I", "L", "R", "b", "Ub", "BE", "V", "NB", "AB", "OB", "D", "GB", "H", "O", "Base", "Bu", "G", "MB", "W", "E", "LB", "DB"], "a": ["aaaa", "za", "ba", "l", "pa", "s", "aka", "alpha", "o", "af", "g", "ca", "sta", "ama", "as", "address", "asa", "area", "missing", "va", "aj", "all", "p", "ad", "data", "mA", "aa", "ha", "aux", "f", "index", "an", "sa", "ea", "active", "d", "wa", "la", "ma", "array", "aw", "na", "something", "access", "ao", "oa", "tta", "x", "ai", "b", "qa", "asha", "y", "da", "ana", "ka", "u", "sha", "auto", "au", "c", "ga", "m", "ata", "parts", "ae", "e", "ac", "k", "fa", "ab", "am"], "delimiter": ["Delimsinator", "elrimiterator", "Delimifier", "elimter", "delimsator", "deluminator", "Delimer", "delexiter", "delimsiter", "delimitor", "elrimner", "elrimer", "deligator", "deligifier", "delamator", "delimifier", "delrimitter", "elrimator", "delamitter", "Delamitter", "delimitter", "delipiter", "delrimiter", "elimitter", "delrimiting", "elrimitter", "delrimter", "delimmeriterator", "delimmerator", "delumator", "elimator", "delumitter", "delimsinator", "elimiterator", "delamter", "Delimser", "delrimiterator", "delimeter", "delimner", "delimmeriter", "delrimator", "delimiting", "delrimitor", "delamifier", "delumter", "delexator", "Delimitter", "delaniting", "delamiter", "delumer", "deligitter", "elrimter", "delimiterator", "delriminator", "delrimner", "elrimiter", "delumiter", "Delamiter", "delipiterator", "delrimer", "elimeter", "delaniter", "delrimifier", "delumner", "delimator", "delipeter", "delimer", "delimter", "delimmereter", "deliminator", "elimiter", "elrimeter", "Delimsator", "elimer", "Delimiter", "delexner", "delimser", "Delimator", "Delamator", "Delimitor", "elimner", "delipator", "Delimsiter", "delanitor", "delanator", "deligiter", "Delamifier", "Deliminator", "delrimeter", "delexer", "Delimiting"], "sb": ["nn", "buff", "fb", "bl", "bi", "phys", "ub", "sf", "sth", "bm", "mb", "SB", "pb", "abb", "rb", "bj", "ss", "obb", "binary", "rob", "zb", "si", "ba", "ff", "usb", "db", "cb", "sv", "bash", "ls", "bf", "cod", "bh", "ib", "bc", "lb", "BB", "src", "gb", "bs", "eb", "bsp", "lp", "orb", "kb", "ruby", " SB", "sa", "sq", "b", "nb", "bg", "su", "sup", "bb", "xb", "lab", "bt", "sg", "wb", "ob", "sound", "bp"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "it", "id", "u", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "data", "ri", "start", "io", "init", "h", "info", "abi", "z", "f", "ci", "c", "ui", "ini", "key", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "q", "o", "gi", "mi", "ii", "b", "zi", "li", "j", "oi", "yi", "chi", "y", "my", "ti", "fi"], "arr": ["all", "bl", "enc", "div", "elt", "arc", "vec", "val", "dict", "adj", "patch", "map", "par", "rs", "pr", "auto", "ar", "asc", "l", "el", "data", "Array", "fr", "r", "dat", "series", "adr", "aa", "attr", "app", "dr", "air", "br", "loc", "x", "list", "img", "acc", "str", "arch", "card", "err", "ray", "abc", "rr", "gr", "dim", "obj", "aaa", "frac", "att", "bb", "av", "range", "iq", "batch", "act", "array", "ann", "coll"], "candidate": ["mandidate", "indidation", "valididity", "decidation", "argider", "frontgrade", "cartidation", "Candidated", "mandgrade", "frontidation", "candider", "candidates", "frontidate", "Candgrade", "Candade", "Candidate", "candid", "brandidate", "charidation", "Candidates", " candidates", "candgrade", "mandidates", "candidated", "Candider", "Candide", "Candid", "Candinate", "cartide", "charidity", "cartidate", "candidity", "argidate", "cartade", "candide", " candidated", "brandidates", "frontidates", "decidate", "argidates", "arginate", "Candidation", "indade", "decale", "valididate", "decidity", "candinate", "charale", "mandidation", "valididation", "brandidated", "candale", " candid", "validale", "candidation", "charidate", "indider", "indidate", "indidates", "indide", "brandid", "indinate", "candade"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\t\tsc.close();\\n\t\tint count = 0;\\n\\n\t\tfor(int i = 0; i < 4; i++) {\\n\t\t\tString syb = S.substring(i, i + 1);\\n\t\t\tif(syb.equals(\"+\")) {\\n\t\t\t\tcount++;\\n\t\t\t}else {\\n\t\t\t\tcount--;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\\n\t}\\n}", "target": "54", "substitutes": {"sc": ["cl", "sci", "nc", "scope", "pc", "core", "ch", "sec", "ss", "server", "cur", "sub", "asc", "sh", "search", "Sc", "SC", "cs", "bc", "sw", "src", "cor", "RC", "lc", "c", "cer", "sp", "str", "sq", "soc", "g", "sr", "ca", "small", "se", "ner", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "S": ["SI", "SS", "ST", "SN", "IS", "Sample", "Socket", "C", "SB", "N", "M", "OS", "RS", "SE", "STR", "U", "SU", "SH", "GS", "As", "F", "SA", "P", "A", "In", "BS", "s", "SM", "SO", "T", "I", "L", "R", "V", "K", "H", "O", "NS", "DS", "SIGN", "SR", "SK", "X"], "count": ["counter", "total", "parent", "offset", "Count", "size", "more", "id", "num", "allow", "add", "pool", "data", "name", "part", "start", "info", "len", "length", "c", "sum", "key", "check", "weight", "index", "depth", "list", "base", "process", "string", "left", "col", "max", "code", "n", "limit", "loop", "work", "child", "force", "no", "found", "type", "log", "number", "level", "cache", "match", "out", "coll"], "i": ["hi", "bi", "pi", "ni", "p", "slice", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "a", "data", "name", "part", "ri", "start", "init", "io", "z", "h", "info", "length", "f", "ci", "ui", "c", "key", "ini", "index", "x", "base", "uri", "mu", "ip", "di", "I", "ai", "o", "gi", "d", "inner", "n", "shift", "ii", "b", "zi", "li", "j", "k", "oi", "pos", "in", "chi", "y", "t", "ti"], "syb": ["Sybb", " syh", "nyh", "sybi", "tyb", "nybb", "nyb", "sya", "tybi", " sya", "ybi", " sybi", "ybr", "tybr", "sybb", "Syb", "sybr", "yB", " sybb", " syB", "Sya", "syB", " sybr", "yb", "tyB", "syh", "Syh", "nya"]}}
{"code": "import java.io.*;\\n\\npublic class Main{\\n    public static void main(String[] args) throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String[] input = br.readLine().split(\" \");\\n        \\n        int tate = Integer.parseInt(input[0]);\\n        int yoko = Integer.parseInt(input[1]);\\n        if(tate < 1 || yoko < 1 || tate > 100 || yoko > 100){\\n            System.out.println(\"Error\");\\n        }\\n        \\n        int men = 0;\\n        int nag = 0;\\n        \\n        men = tate * yoko;\\n        nag = (tate + yoko) * 2;\\n        \\n        System.out.println(men + \" \" + nag);\\n    }\\n\\n}", "target": "92", "substitutes": {"br": ["bl", "div", "ber", "http", "hr", "rb", "browser", "tr", "arr", "res", "jar", "fr", "r", "bf", "yr", "io", "iter", "stream", "bridge", "nr", "src", "bs", "er", "dr", "report", "mr", "BR", "img", "bro", "HR", "str", "Br", "abs", "result", "sr", "b", "err", "body", "gr", "reader", "buf", "sb", "bb", "cr", "bar", "ref", "out"], "input": ["cat", "include", "empty", "xml", "json", "split", "inside", "i", "url", "path", "data", "ou", "request", "progress", "unknown", "entry", "iter", "source", "image", "key", "feed", "format", "output", "pull", "list", "img", "Input", "ip", "submit", "text", "string", "raw", "q", "inf", "inner", "op", "plus", "element", "again", "qa", "amp", "up", "parse", "in", "response", "form", "join", "file", "inc", "flow", "argument", "error", "out"], "tate": ["topame", "ttage", "ttame", "intame", "Tase", "ptate", "topate", "tage", "ttune", "Tation", "tyase", "tile", "topale", "tise", "trave", "ptay", " tame", "tale", " time", "stise", "Trave", "intale", "Tise", "Tage", "otile", "ptouse", "stase", "intation", "touse", "Tale", "Tate", "tame", "topation", " touse", "tyate", "ttrave", "ttay", "otate", "tune", "intate", "state", "ptune", "ttouse", " tile", "otime", "tyale", " tage", " tune", " trave", "ttate", "ttile", "tase", "time", "Tame", "tation", "otouse", "tyise", "tay", "stale", "ttime", " tay"], "yoko": ["syoko", "Yogi", "kyoko", "yomi", "poko", "syanto", "ytoko", "yok", "dyoko", " yok", "kyomi", " yoku", " yoki", "syoki", "kyok", "toku", "yko", "eyoko", "Yomi", "tok", "dyogi", "eyoki", "nyanto", "Yanto", "kyoki", "yogi", "toko", "Yok", "Yodo", "nyok", "Yoki", "toki", "yoki", "dyomi", "nyoko", "kyko", "syomi", "ytomi", "yoku", "eyko", "dyoki", "ytoki", "Yoko", "yodo", "poki", "eyogi", "pok", "syko", "eyomi", "tomi", "syok", "syodo", "yanto", "ytok", "nyodo", "poku"], "men": ["Men", "mom", "mates", "ven", "cats", "months", "MEN", "mens", "makers", "features", "modules", "mon", "caps", "people", "mins", "mits", "games", "ten", "circ", "pes", "phones", "ims", "verts", "models", "man", "dogs", "lines", "jobs", "cycles", "players", "pins", "mans", "per", "products", "feat", "male", "plates", "pers", "ages", "hens", "pieces", "mers", "items", "comes", "women", "you", "hers", "mes", "mult"], "nag": ["gnagger", "cags", " nager", " nig", "nnager", "nig", "nags", " nagger", "naga", " nagh", "nnag", "page", "cig", "gnag", "gnager", " naga", "pag", "ynagger", "nnagger", " nage", "innag", "nnaga", "cage", "nage", "nagger", "innagger", "ynags", "cag", "innags", "innagh", "ynagh", "ynag", "gnaga", "nager", "pags", "pig", " nags", "nagh"]}}
{"code": "import static java.lang.Integer.*;\\nimport static java.lang.Long.*;\\nimport static java.lang.System.*;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n    static void solve() throws Exception {\\n        for (int i = 1; i <= 5; i++) {\\n            if (scanInt() == 0) {\\n                System.out.println(i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    static int scanInt() throws IOException {\\n        return parseInt(scanString());\\n    }\\n\\n    static long scanLong() throws IOException {\\n        return parseLong(scanString());\\n    }\\n\\n    static String scanString() throws IOException {\\n        while (tok == null || !tok.hasMoreTokens()) {\\n            tok = new StringTokenizer(in.readLine());\\n        }\\n        return tok.nextToken();\\n    }\\n\\n    static BufferedReader in;\\n    static PrintWriter out;\\n    static StringTokenizer tok;\\n\\n    public static void main(String[] args) {\\n        try {\\n            in = new BufferedReader(new InputStreamReader(System.in));\\n            out = new PrintWriter(System.out);\\n            solve();\\n            in.close();\\n            out.close();\\n        }\\n        catch (Throwable e) {\\n            e.printStackTrace();\\n            exit(1);\\n        }\\n    }\\n}", "target": "222", "substitutes": {"i": ["bi", "hi", "pi", "count", "iu", "p", "it", "u", "id", "multi", "qi", "xi", "wei", "v", "si", "mini", "is", "ri", "start", "value", "io", "z", "abi", "f", "ci", "ui", "ini", "index", "m", "phi", "x", "uri", "ip", "di", "I", "ai", "o", "gi", "d", "mi", "n", "ii", "zi", "li", "j", "oi", "sup", "chi", "number", "t", "fi"], "tok": [" tik", "atook", "wtak", "Toke", "ttok", "atok", "thoke", "Tract", "toc", " token", "toks", "Tak", "toik", "wtok", "toak", "retaken", "ttoks", " toks", "atoc", "Task", "tooken", "Tok", "tor", "Toks", "tak", "Tick", "wtodo", " toke", " task", "Token", "Tor", " tract", "ttoc", "Toc", "tik", "tract", "taken", "retak", " todo", "ttook", "token", "took", " tak", "ttor", "task", " tor", "retok", "wtaken", "Took", "todo", "retodo", "atick", "toke", " taken", "thak", "Tik", "ttick", "thask", "tick", "thok", "ttract"], "in": ["this", "isin", "on", "id", "login", "ins", "din", "run", "inside", "path", "line", "l", "a", "data", "url", "con", "lin", "r", "ri", "part", "init", "source", "win", "input", "get", "In", "image", "inn", "ini", "c", "ax", "nin", "cin", "ra", "socket", "token", "min", "gin", "read", "inner", "ry", "rin", "kin", "err", "ac", "again", "pass", "zin", "reader", "pin", "exec", "connection", "vin", "bin", "file", "readable", "log", "rx", "inc", "lock", "la", "IN", "re"], "out": ["this", "msg", "print", "client", "call", "server", "to", "ex", "ext", "line", "page", "name", "timeout", "io", "co", "input", "temp", "gen", "conn", "user", "outer", "image", "wx", "at", "output", "OUT", "list", "w", "str", "plain", "writer", "string", "Out", "o", "n", "with", "err", "again", "write", "obj", "exec", "up", "no", "log", "file", "bin", "outs", "exit", "lock", "off", "inc", "dump", "cache", "error", "IN", "window", "sync"]}}
{"code": "import java.io.InputStream;\\nimport java.io.IOException;\\nimport java.util.NoSuchElementException;\\n\\n/*\\n*\u5165\u529b\u306fA, B, C\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3001String#toLowerCase()\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u3088\u3044\\n*\u5927\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b32\u3092\u8db3\u3059\u3068\u5c0f\u6587\u5b57\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u306a\u308b\\n*/\\npublic class Main {\\n    public static void main(String[] args) {\\n        MyScanner sc = new MyScanner();\\n        int n = sc.nextInt();\\n        int k = sc.nextInt();\\n        String s = sc.next();\\n        char[] charArray = s.toCharArray();\\n\\n        charArray[k - 1] += 32;\\n\\n        System.out.println(String.valueOf(charArray));\\n    }\\n}\\n\\nclass MyScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int pointer = 0;\\n    private int bufLength = 0;\\n\\n    private boolean hasNextByte() {\\n        if (pointer < bufLength) {\\n            return true;\\n        } else {\\n            pointer = 0;\\n            try {\\n                bufLength = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (bufLength <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int readByte() {\\n        if (hasNextByte()) {\\n            return buffer[pointer++];\\n        } else {\\n            return -1;\\n        }\\n    }\\n\\n    private static boolean isNumberChar(int c) {\\n        return '0' <= c && c <= '9';\\n    }\\n\\n    private static boolean isPrintableChar(int c) {\\n        return 33 <= c && c <= 126;\\n    }\\n\\n    public boolean hasNext() {\\n        while (hasNextByte() && !isPrintableChar(buffer[pointer])) {\\n            pointer++;\\n        }\\n        return hasNextByte();\\n    }\\n\\n    public String next() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while(isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        long num = 0;\\n        boolean isNegative = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            isNegative = true;\\n            b = readByte();\\n        }\\n        if (!isNumberChar(b)) {\\n            throw new NumberFormatException();\\n        }\\n        while (true) {\\n            if (isNumberChar(b)) {\\n                num *= 10;\\n                num += b - '0';\\n            } else if (b == -1 || !isPrintableChar(b)) {\\n                return isNegative ? -num : num;\\n            } else {\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n\\n    public int nextInt() {\\n        long temp = nextLong();\\n        if (temp < Integer.MIN_VALUE || Integer.MAX_VALUE < temp) {\\n            throw new NumberFormatException();\\n        }\\n        return (int) temp;\\n    }\\n\\n    public double nextDouble() {\\n        return Double.parseDouble(next());\\n    }\\n}\\n", "target": "71", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "scope", "pc", "class", "tc", "sec", "ss", " SC", "si", "asc", "sh", "Sc", "SC", "scl", "cs", "bc", "cv", "sw", "lc", "ci", "cer", "sp", "system", "sq", "uc", "soc", "sr", "ca", "cle", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus", "sync"], "n": ["nn", "nc", "nt", "p", "N", "v", "i", "l", "sn", "r", "z", "f", "m", "w", "np", "o", "d", "ns", "g", "pn", "nb", "j", "net", "Ns", "t"], "k": ["sk", "p", "size", "u", "ck", "N", "ks", "v", "i", "kick", "l", "ik", "r", "h", "z", "length", "f", "ok", "key", "ak", "m", "w", "x", "e", "kw", "q", "o", "unk", "d", "g", "j", "K", "y"], "s": ["S", "sf", "space", "p", "u", "ins", "service", "ss", "rs", "v", "si", "strings", "l", "data", "es", "sv", "series", "ls", "a", "ws", "f", "lines", "sl", "os", "words", "m", "parts", "e", "ssl", "string", "ses", "o", "g", "ns", "services", "se", "su", "storage", "array"], "charArray": ["utfarray", "CharString", "characterString", "byteRange", "characterArray", "charRange", "pixelArray", "charString", "utfString", "utfArray", "chararray", "characterRange", "pixelArea", "Chararray", "pixelRange", "characterarray", " charString", "byteArray", "charArea", "characterArea", "pixelString", "CharArray", "byteString", " charRange", " charArea"], "in": ["this", "inet", "null", "login", "ins", "din", "ex", "i", "path", "line", "a", "l", "data", "is", "url", "con", "r", "io", "source", "win", "init", "input", "h", "src", "resource", "In", "f", "inn", "ini", "m", "or", "socket", "ai", "read", "min", "inner", "err", "reader", "pin", "connection", "bin", "readable", "file", "as", "inc", "lock", "IN", "out", "re"], "buffer": ["buff", "offset", "size", "message", "slice", "table", "queue", "reference", "server", "binary", "Buffer", "url", "page", "data", "request", "value", "header", "iter", "source", "block", "input", "length", "resource", "image", "base", "memory", "device", "string", "border", "quote", "comment", "result", "padding", "limit", "reader", "flush", "buf", "bb", "seed", "position", "bin", "layer", "address", "bar", "shape", "copy", "cache", "uffer", "batch", "pad", "array", "window"], "pointer": ["offset", "parent", "target", "space", "wrapper", "p", "prefix", "pointers", "hole", "slice", "size", "patch", "reference", "i", "margin", "path", "point", "Ptr", "start", "timeout", "zip", "Position", "length", "inter", "width", "resource", "pixel", "key", "magic", "index", "zone", "scroll", "proxy", "axis", "Offset", "vector", "socket", "pocket", "ptr", "alpha", "context", "shift", "zero", "padding", "handler", "pos", "connection", "step", "position", "iterator", "address", "area", "starter", "cache", "argument", "default", "pad", "ctx", "slot"], "bufLength": [" bufSize", "ufOffset", "bufLen", " buflength", "bufferlength", "buffOffset", "buffLength", "buffLen", "uflength", " bufLen", "bufSize", "bufferOffset", "ufSize", " bufOffset", "bufType", "bufferSize", "buflength", "buffType", "ufLen", "bufflength", "ufLength", "ufType", "bufferLength", " bufType", "bufOffset", "bufferLen", "buffSize"], "c": ["cl", "enc", "mc", "nc", "count", "p", "C", "u", "ch", "sec", "v", "cn", "i", "cur", "l", "cu", "a", "ct", "z", "cs", "h", "bc", "cp", "char", "f", "cm", "ci", "dc", "lc", "t", "or", "x", "e", "col", "uc", "ce", "code", "d", "g", "ca", "ac", "cd", "cc", "y", "cr", "dec", "cy", "ec", "esc", "unc", "xc"], "sb": ["buff", "fb", "sf", "bm", "sth", " eb", "mb", "SB", "pb", "rb", "obb", "zb", "si", "ib", "db", "cb", "usb", "bf", "bh", "bc", "BB", "kb", "lb", "gb", "bs", "eb", "dB", "src", "orb", "bsp", " SB", "sa", "sq", "nb", "bg", "bb", "xb", "bd", "bt", "wb", "sg", "ob", "bp"], "b": ["fb", "bi", "bl", "p", "mb", "u", "pb", "abb", "rb", "binary", "v", "i", "ba", "l", "ib", "db", "a", "cb", "r", "bf", "be", "block", "h", "z", "lb", "end", "machine", "gb", "bs", "f", "br", "eb", "orb", "bc", "m", "x", "base", "e", "text", "o", "abs", "d", "g", "B", "abc", "body", "nb", "bb", "xb", "bd", "bin", "y", "number", "bar", "ab", "emb", "wb", "ob", "boot"], "num": ["um", "counter", "offset", "unit", "Num", "count", "id", "na", "nu", "name", "al", "nm", "nr", "orig", "f", "sum", "index", "w", "np", "g", "nb", "buf", "no", "bin", "number", "NUM", " number", "out"], "isNegative": ["isNative", "isMinive", "isBiatives", "isPosATIVE", " isPosive", " isPosative", "isDecATIVE", " isNegATIVE", "isPositive", "isMinitive", " isNegatives", "isNegatives", "isPosive", "isNegATIVE", " isNegitive", "isDecitive", "isBiATIVE", "isNegive", "isMinative", " isPosATIVE", "isBiitive", " isPosatives", "isNitive", "isDecive", " isPositive", "isNegitive", "isPosative", "isDecative", "isBiative", " isNegive", "isMinATIVE", "isNatives", "isPosatives", "isNATIVE"]}}
{"code": "import java.util.Scanner;\\nclass Main {\\n  public static void main(String args[]){\\n    Scanner  sc = new Scanner(System.in);\\n    long n , k ,i,t;\\n    n = sc.nextLong();\\n    k = sc.nextLong();\\n    i = n%k;\\n    t = Math.abs(k-i);\\n    if(i > t){\\n      i = t;\\n    }\\n    System.out.println(i);\\n  }\\n}\\n", "target": "22", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "sf", "scope", "pc", "core", "ser", "com", "ch", "tc", "ss", "sec", " SC", "cur", "fc", "Sc", "SC", "ct", "cs", "bc", "cv", "src", "lc", "ci", "c", "cer", "sp", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "cont", "ec", "esc", "ctx", "cus"], "n": ["nn", "nc", "nt", "ni", "p", "u", "na", "nu", "ln", "N", "v", "l", "a", "sn", "un", "z", "f", "fn", "c", "ne", "m", "an", "x", "np", "e", "o", "d", "ns", "g", "b", "pn", "network", "nb", "j", "net", "in", "mn", "number", "y", "en", " N"], "k": ["kt", "sk", "nt", "mk", "p", "u", "id", "ko", "ck", "ke", "ks", "km", "N", "v", "kick", "l", "kk", "ik", "z", "end", "dk", "f", "ok", "length", "c", "key", "w", "x", "ku", "e", "kw", "max", "q", "o", "unk", "kn", "d", "kid", "tk", "j", "K", "y", "ki"], "i": ["bi", "pi", "ori", "ni", "p", "it", "u", "id", "qi", "xi", "v", "anti", "si", "l", "mini", "start", "iter", "z", "info", "f", "ci", "s", "c", "ini", "ui", "index", "m", "eni", "x", "phi", "e", "di", "ip", "I", "ie", "ai", "o", "inf", "d", "gi", "isi", "ii", "limit", "li", "j", "oi", "in", "chi", "y", "ki", "ti"], "t": ["ot", "te", "offset", "kt", "total", "ts", "nt", "p", "test", "u", "qt", "tc", "v", "l", "start", "z", "temp", "length", "f", "m", "at", "x", "ty", "e", "T", "pt", "ta", "o", "d", "tw", "g", "dt", "j", "time", "tp", "type", "y", "tt", "ti", "tf"]}}
{"code": "import java.util.*; import java.io.*; import java.math.*;\\npublic class Main{\\n\t//Don't have to see. start------------------------------------------\\n\tstatic class InputIterator{\\n\t\tArrayList<String> inputLine = new ArrayList<String>(1024);\\n\t\tint index = 0; int max; String read;\\n\t\tInputIterator(){\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\ttry{\\n\t\t\t\twhile((read = br.readLine()) != null){\\n\t\t\t\t\tinputLine.add(read);\\n\t\t\t\t}\\n\t\t\t}catch(IOException e){}\\n\t\t\tmax = inputLine.size();\\n\t\t}\\n\t\tboolean hasNext(){return (index < max);}\\n\t\tString next(){\\n\t\t\tif(hasNext()){\\n\t\t\t\treturn inputLine.get(index++);\\n\t\t\t}else{\\n\t\t\t\tthrow new IndexOutOfBoundsException(\"There is no more input\");\\n\t\t\t}\\n\t\t}\\n\t}\\n\tstatic HashMap<Integer, String> CONVSTR = new HashMap<Integer, String>();\\n\tstatic InputIterator ii = new InputIterator();//This class cannot be used in reactive problem.\\n\tstatic PrintWriter out = new PrintWriter(System.out);\\n\tstatic void flush(){out.flush();}\\n\tstatic void myout(Object t){out.println(t);}\\n\tstatic void myerr(Object t){System.err.print(\"debug:\");System.err.println(t);}\\n\tstatic String next(){return ii.next();}\\n\tstatic boolean hasNext(){return ii.hasNext();}\\n\tstatic int nextInt(){return Integer.parseInt(next());}\\n\tstatic long nextLong(){return Long.parseLong(next());}\\n\tstatic double nextDouble(){return Double.parseDouble(next());}\\n\tstatic ArrayList<String> nextStrArray(){return myconv(next(), 8);}\\n\tstatic ArrayList<String> nextCharArray(){return myconv(next(), 0);}\\n\tstatic ArrayList<Integer> nextIntArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Integer> ret = new ArrayList<Integer>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Integer.parseInt(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic ArrayList<Long> nextLongArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Long> ret = new ArrayList<Long>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Long.parseLong(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic String myconv(Object list, int no){//only join\\n\t\tString joinString = CONVSTR.get(no);\\n\t\tif(list instanceof String[]){\\n\t\t\treturn String.join(joinString, (String[])list);\\n\t\t}else if(list instanceof ArrayList){\\n\t\t\treturn String.join(joinString, (ArrayList)list);\\n\t\t}else{\\n\t\t\tthrow new ClassCastException(\"Don't join\");\\n\t\t}\\n\t}\\n\tstatic ArrayList<String> myconv(String str, int no){//only split\\n\t\tString splitString = CONVSTR.get(no);\\n\t\treturn new ArrayList<String>(Arrays.asList(str.split(splitString)));\\n\t}\\n\tpublic static void main(String[] args){\\n\t\tCONVSTR.put(8, \" \"); CONVSTR.put(9, \"\\n\"); CONVSTR.put(0, \"\");\\n\t\tsolve();flush();\\n\t}\\n\t//Don't have to see. end------------------------------------------\\n\tstatic void solve(){//Here is the main function\\n      int A = nextInt();\\n      int B = nextInt();\\n      myout(A ^ B);\\n\t}\\n\t//Method addition frame start\\n\\n\\n\\n\t//Method addition frame end\\n}\\n", "target": "236", "substitutes": {}}
{"code": "\\nimport java.math.BigDecimal;\\nimport java.math.RoundingMode;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n    // \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\\n    BigDecimal R = new BigDecimal(sc.nextInt());\\n    BigDecimal S = R.multiply(new BigDecimal(2)).setScale(100, RoundingMode.HALF_UP);\\n\\n    System.out.println(S.multiply(new BigDecimal(\"3.1415\")).setScale(100, RoundingMode.HALF_UP));\\n  }\\n}\\n", "target": "167", "substitutes": {"sc": ["nc", "sci", "sf", "gram", "SB", "ss", "si", " rc", "Sc", "SC", "r", "bc", "sw", "f", "lc", "c", " scr", "an", "sp", "sa", " ans", "sq", " Sc", "sb", "scan", "rc", "cr", "ann"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(\\n\t\t\t\tSystem.in));\\n\t\tint x = Integer.parseInt(reader.readLine());\\n\t\tint ans = x * x * x;\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "36", "substitutes": {"reader": ["rar", "this", "buffer", "loader", "ser", "server", "i", "l", "ri", "r", "oder", "entry", "io", "iter", "stream", "row", "input", "h", "ler", "er", "feed", "bird", "her", "per", "writer", "inner", "rer", "rr", "ner", "handler", "editor", "in", "worker", "rx", "keeper", "parser", "reading", "arser", "former", "driver", "read", "builder", "Reader"], "x": ["p", "xp", "size", "id", "u", "num", "xi", "ex", "v", "i", "ix", "line", "a", "l", "es", "cross", "z", "f", "s", "lex", "c", "XX", "ax", "index", "an", "w", "any", "xx", "xxx", "q", "plus", "n", "tx", "pos", "xe", "xs", "xxxx", "in", "mx", "number", "y", "px", "read", "ctx", "xc", "X"], "ans": ["nn", "ana", "sk", "AN", "anas", "aned", "ars", "na", "ins", "nan", "anon", "lan", " spans", "linux", "asin", "cs", " ang", "ians", "ces", "man", "cas", "plan", "ants", "ano", "an", " means", "cons", " Ans", "ANS", "cus", "ns", "anc", "ane", "as", " na", " scans", "aning", "ant", "can", "ann", "anch"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tdouble s[]=new double[n];\\n\t\t\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\ts[i]=sc.nextDouble();\\n\t\t}\\n\t\tfor(int i=0;i<n-1;i++) {\\n\t\t\t\\n\t\t\tfor(int j=n-1;j>i;j--) {\\n\t\t\t\tif(s[j-1]>s[j]) {\\n\t\t\t\t\tdouble c=s[j];\\n\t\t\t\t\ts[j]=s[j-1];\\n\t\t\t\t\ts[j-1]=c;\\n\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0;i<n-1;i++) {\\n\t\t\ts[i+1]=((s[i]+s[i+1])/2);\\n\t\t}\\n\t\tSystem.out.println(s[n-1]);\\n\t\t\t\\n\t\t\\n\t\t\\n\t}\\n\\n}", "target": "232", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n        boolean isGood = true;\\n        for (int i=1; i<=s.length(); i++) {\\n            if (i % 2 == 0) {\\n                if (!(s.charAt(i-1) == 'L' || s.charAt(i-1) == 'U' || s.charAt(i-1) == 'D')) {\\n                    isGood = false;\\n                    break;\\n                }\\n            } else {\\n                if (!(s.charAt(i-1) == 'R' || s.charAt(i-1) == 'U' || s.charAt(i-1) == 'D')) {\\n                    isGood = false;\\n                    break;\\n                }\\n            }\\n        }\\n        System.out.print(isGood ? \"Yes\" : \"No\");\\n    }\\n}", "target": "205", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "nt", "sf", "scope", "pc", "ch", "sec", "ss", " SC", "sub", "asc", "search", "sh", "Sc", "SC", "stream", "bc", "desc", "sw", "sl", "c", " scr", "sp", "str", "acc", "system", "text", "uc", "g", "se", "ner", " Sc", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "ec", "esc", "ctx", "cus", "sync"], "s": ["self", "S", "ts", "p", "u", "ins", "ss", "rs", "ks", "si", "strings", "l", "bis", "a", "es", "sv", "is", "ls", "ws", "r", "its", "fs", "sin", "h", "ps", "bs", "f", "lines", "sl", "c", "os", "ds", "states", "words", "us", "m", "parts", "e", "str", "ses", "string", "o", "abs", "d", "n", "ns", "gs", "b", "g", "site", "sys", "su", "js", "sb", "in", "ans", "y", "as", "sg", "t", "qs"], "i": ["hi", "bi", "ic", "api", "pi", "ori", "count", "p", "iu", "slice", "u", "id", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "l", "a", "is", "ri", "ik", "r", "start", "io", "source", "info", "abi", "f", "lc", "ci", "c", "ui", "key", "ini", "index", "m", "phi", "x", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "n", "isi", "ii", "b", "zi", "cli", "li", "iv", "j", "k", "oi", "in", "chi", "y", "t", "ti"], "isGood": [" isGreat", "isOk", "isPoor", " isExcellent", "IsValid", "osExcellent", "asExcellent", "isiPoor", "osgood", "IsGood", "IsPoor", "isBad", " isPoor", " isBusiness", "isiGood", "idGood", "asGood", "asGreat", "IsBusiness", "osBad", "isBusiness", "IsOk", "osGood", "Isgood", "isgood", " isgood", "asOk", "IsBad", "idGreat", "isGreat", " isOk", "idgood", "asBad", " isBad", "isiValid", "isValid", " isValid", "asgood", "isiBusiness", "isExcellent", "idBad"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){ \\n\t\tScanner sc = new Scanner(System.in);\\n      \t//N\u500b\u306e\u90fd\u5e02\\n\t\tint N = sc.nextInt();\\n      \t//M\u672c\u306e\u9053\u8def\\n        int M = sc.nextInt();\\n      \t//\u6570\u5b57\u306e\u7d44\u307f\u5408\u308f\u305b\u5165\u529b\\n      \tint Road[] = new int[N];\\n      \tfor(int i = 0;i < M * 2;i++){\\n\t\t  Road[sc.nextInt()-1] += 1;\\n        }\\n      \tfor(int i = 0;i < N; i++){\\n          System.out.println(Road[i]); \\n        }\\n    }\\n}", "target": "57", "substitutes": {"sc": [" ser", " ar", "ss", " SC", " rc", " sl", "Sc", "SC", " res", " scr", " pars", " ans", "sq", " scanner", " surf", " sm", "se", " Sc", "sb", " app", "scan", " src", " arr", " sp", "parser", " scorer", "ann"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n  public static void main (String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n    \\n    int N = sc.nextInt();\\n    int M = sc.nextInt();\\n    \\n    int[] L = new int[M];\\n    int[] R = new int[M];\\n\\n    for (int i = 0; i < M; i++) {\\n      L[i] = sc.nextInt();\\n      R[i] = sc.nextInt();\\n    }\\n\\n    sc.close();\\n\\n    int min = 0;\\n    int max = N;\\n\\n    for (int i = 0; i < M; i++) {\\n      min = Math.max(L[i], min);\\n      max = Math.min(R[i], max);\\n    }\\n\\n    if (max < min){\\n      System.out.println(0);\\n    } else {\\n      System.out.println(max - min + 1);\\n    }\\n \\n  }\\n\\n}", "target": "124", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "ser", "ch", "tc", "ss", "server", " SC", "cur", "sub", "asc", "search", "sh", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "cor", "row", "lc", "c", "ga", "sp", "sa", "system", "sq", "uc", "soc", "cli", "sem", "se", "ner", "reader", "anc", "sb", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "cam", "out", "esc", "ctx", "cus", "sync"], "N": ["S", "Num", "NL", "C", "Size", "U", "Y", "F", "NN", "P", "A", "T", "I", "Ni", "MIN", "Max", "n", "B", "NM", "V", "K", "D", "NT", "O", "Z", "NS", "Ns", "G", "MAX", "W", "E", "X"], "M": ["MN", "S", "Num", "IN", "MO", "IM", "DM", "JM", "Multiple", "Mi", "C", "Part", "MM", "J", "MC", "U", "Y", "F", "Q", "P", "Ma", "MS", "MD", "m", "T", "I", "MX", "CM", "MT", "OM", "n", "Max", "B", "NM", "V", "Mo", "K", "D", "H", "O", "Z", "G", "MB", "LM", "RM", "W", "E", "X"], "L": ["BL", "Lu", "SL", "NL", "EL", "Li", "TL", "LIN", "LS", "Lo", "LA", "LU", "l", "U", "FL", "F", "LR", "CL", "Local", "RL", "LP", "I", "DL", "UL", "LL", "LO", "LOS", "IL", "LT", "XL", "LM", "LI", "LB", "X"], "R": ["RO", "RT", "S", "MR", "AR", "Range", "C", "RR", "ER", "RS", "UR", "RB", "U", "Y", "SH", "r", "RP", "F", "VR", "RC", "P", "RA", "RL", "RI", "Rs", "GR", "T", "I", "RH", "B", "NR", "V", "D", "RE", "G", "SR", "RM", "W", "X"], "i": ["multi", "qi", "l", "r", "uli", "init", "info", "s", "at", "phi", "w", "uri", "ie", "o", "inner", "cli", "ii", "bi", "ni", "p", "iu", "id", "iii", "si", "ix", "mini", "io", "h", "z", "abi", "f", "ci", "vi", "ui", "ini", "eni", "d", "n", "j", "yi", "t", "fi", "pi", "it", "ji", "xi", "v", "part", "x", "mu", "di", "I", "ai", "q", "gi", "b", "in", "y", "ti", "hi", "api", "ori", "u", "is", "ri", "start", "source", "lc", "c", "m", "e", "ip", "mi", "li", "oi", "k"], "min": ["initial", "val", "size", "mins", "a", "diff", "init", "ax", "key", "rand", "limit", "me", "mod", "area", "local", "none", "id", "minimum", "next", "mini", "value", "first", "ini", "index", "base", "shift", "Max", "n", "dim", "pos", "no", "scale", "pri", "default", "don", "na", "span", "average", "partial", "sign", "lower", "len", "cm", "weight", "rank", "only", "step", "in", "Mini", "mean", "MAX", "close", "Min", "ind", "act", "round", "low", "now", "sub", "pre", "sort", "start", "last", "m", "MIN", "skip", "zero", "mine", "small", "from", "range", "sol"], "max": ["total", "size", "nd", "num", "diff", "r", "init", "co", "ax", "key", "rand", "ca", "limit", "mod", "dot", "pad", "all", "none", "id", "next", "ad", "version", "cross", "end", "first", "sum", "index", "mad", "base", "node", "Max", "n", "dom", "edge", "pos", "no", "scale", "default", "div", "count", "average", "point", "part", "right", "q", "rest", "rank", "only", "cycle", "step", "mean", "MAX", "dec", "Min", "act", "can", "maximum", "conf", "cat", "chain", "now", "start", "last", "c", "m", "est", "k", "range"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n  \tlong k=sc.nextLong();\\n  \tint n=sc.nextInt();\\n  \tlong[] ai=new long[n];\\n  \tfor(int i=0;i<n;i++){\\n  \t\tai[i]=sc.nextLong();\\n  \t}\\n  \tlong s=0;\\n  \tlong[] si=new long[n];\\n  \tfor(int i=0;i<n;i++){\\n  \t\tif(i==n-1){\\n  \t\t\tsi[i]=k+ai[0]-ai[i];\\n  \t\t}else{\\n  \t\t\tsi[i]=ai[i+1]-ai[i];\\n  \t\t}\\n  \t}\\n  \tArrays.sort(si);\\n  \tfor(int i=0;i<n-1;i++){\\n  \t\ts+=si[i];\\n  \t}\\n  \tSystem.out.print(s);\\n  }\\n}", "target": "10", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "na", "com", "ch", "tc", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "lc", "c", "cer", "sp", "system", "sq", "uc", "sr", "ca", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "ctx", "cus", "sync"], "k": ["ky", "sk", "mk", "p", "u", "ko", "ck", "ke", "ks", "km", "v", "kick", "l", "kk", "is", "ik", "z", "h", "kb", "dk", "ok", "c", "key", "ak", "m", "x", "kw", "e", "q", "o", "d", "b", "kid", "j", "K", "work", "y", "ki"], "n": ["nn", "all", "none", "nt", "p", "size", "dn", "u", "num", "nan", "N", "ln", "v", "l", "sn", "r", "z", "un", "len", "f", "conn", "c", "inn", "ne", "m", "w", "x", "e", "o", "d", "ns", "kn", "b", "ii", "network", "nb", "ner", "j", "net", "no", "in", "mn", "non", "y", "en", "t"], "ai": ["ana", "bi", "sci", "api", "pi", "py", "ni", "ami", "ia", "adj", "na", "ani", "qi", "ji", "xi", "aii", "ba", "asc", "ar", "a", "sub", "aa", "abi", "ha", "oa", "pa", "au", "ci", "asi", "ay", "ini", "agi", "ga", "ui", "pai", "eni", "an", "index", "phi", "sa", "ae", "ta", "alpha", "mi", "af", "ii", "ca", "ac", "li", "qa", "wa", "yi", "in", "chi", "ais", "fa", "ati", "ait", "la", "address", "aj", "ann"], "i": ["bi", "hi", "isin", "api", "pi", "ori", "ni", "iu", "ami", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "anti", "ix", "a", "l", "is", "uni", "ri", "io", "init", "info", "abi", "f", "lc", "ci", "ui", "ini", "c", "index", "eni", "w", "x", "mu", "uri", "phi", "e", "di", "adi", "I", "ie", "o", "gi", "inner", "mi", "d", "ii", "b", "zi", "cli", "li", "j", "oi", "yi", "in", "y", "ti", "fi"], "s": ["sci", "S", "sd", "sie", "features", "space", "p", "size", "u", "ins", "ss", "strings", "sql", "sh", "a", "l", "is", "es", "series", "ls", "its", "ws", "sv", "sn", "z", "ps", "os", "ings", "c", "states", "sum", "w", "sp", "sa", "e", "sq", "ses", "o", "d", "g", "ns", "sets", "b", "services", "se", "sym", "su", "sup", "sb", "so", "ans", "y", "sg", "spec"], "si": ["SI", "bi", "hi", "sci", "api", "sd", "sie", "pi", "ni", "sis", "qi", "xi", "ji", "Si", "sv", "sin", "ski", "ci", "asi", "ui", "ini", "sea", "eni", "iso", "sa", "di", "esi", "ta", "isi", "ii", "zi", "li", "shi", "sb", "yi", "chi", "ati", "ti"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] arges) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString line = sc.nextLine();\\n\t\tString[] k = line.split(\" \");\\n\t\tint[] v = new int[k.length];\\n\t\tfor (int i = 0; i < v.length; i++) {\\n\t\t\tv[i] = Integer.parseInt(k[i]);\\n\t\t}\\n\t\tint count = 0;\\n\t\tfor (int i = v[0]; i <= v[1]; i++) {\\n\t\t\tif (v[2] % i == 0) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n\\n}", "target": "190", "substitutes": {"arges": ["argse", "arge", "argsed", "Argses", "Arges", "prefixe", "prefixes", "argses", "Arged", "prefixed", "argsses", "prefixses", "arged", "Arge"], "sc": ["cl", "mc", "sci", "nc", "sf", "pc", "ch", "sec", "ss", " SC", "sub", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "desc", "ci", "sl", "c", "cer", " scr", "sp", "acc", "st", "uc", "g", "se", "ner", " Sc", "ocr", "anc", "scan", "osc", "rc", "cc", "cr", "spec", "ec", "esc"], "line": ["cl", "p", "server", "l", "page", "data", "name", "lin", "r", "entry", "header", "block", "source", "row", "nl", "f", "lines", "shell", "s", "c", "key", "str", "text", "string", "code", "content", "plus", "rule", "result", "b", "reader", "inline", "parse", "in", "log", "file", "job", "section", "Line", "out"], "k": ["sk", "p", "u", "id", "ko", "ck", "json", "ks", "km", "ke", "kick", "l", "kk", "sv", "ik", "kb", "ok", "f", "s", "c", "uv", "key", "ak", "m", "ku", "kw", "e", "q", "o", "unk", "kn", "d", "n", "kl", "kin", "tk", "j", "K", "VK", "kat"], "v": ["p", "val", "size", "u", "vol", "version", "l", "vals", "video", "sv", "value", "vert", "cv", "volt", "f", "vi", "vs", "ov", "uv", "s", "vv", "t", "c", "ve", "ev", "m", "e", "vector", "q", "lv", "o", "n", "ver", "vp", "ii", "limit", "iv", "V", "j", "av", "y", "conv", "nv", "va", "array"], "i": ["bi", "hi", "pi", "ni", "hei", "p", "iu", "it", "u", "id", "slice", "multi", "qi", "ei", "xi", "ji", "si", "ix", "l", "a", "is", "ri", "r", "start", "io", "h", "info", "abi", "z", "length", "f", "ci", "ui", "c", "ini", "index", "m", "phi", "x", "eni", "uri", "mu", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "ii", "b", "zi", "li", "j", "oi", "yi", "in", "chi", "y", "ti", "fi"], "count": ["counter", "total", "parent", "offset", "nt", "second", "empty", "p", "Count", "size", "val", "more", "id", "now", "allow", "add", "cur", "part", "diff", "start", "info", "len", "length", "f", "c", "sum", "index", "weight", "depth", "base", "list", "col", "code", "b", "limit", "current", "time", "child", "found", "type", "number", "level", "cc", "ind", "coll"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u8981\u7d20\u306e\u5165\u529b\u3001\u683c\u7d0d\\n\t\tint N = sc.nextInt();\\n\t\tint a[][] = new int[2][N];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ta[0][i] = sc.nextInt();\\n\t\t}\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ta[1][i] = sc.nextInt();\\n\t\t}\\n\t\tint x = 0;\\n\t\tint ans = 0;\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tx = 0;\\n\t\t\tfor (int j = 0; j < N; j++) {\\n\t\t\t\tif (j < i) {\\n\t\t\t\t\tx += a[0][j];\\n\t\t\t\t} else if (j == i) {\\n\t\t\t\t\tx += a[0][j];\\n\t\t\t\t\tx += a[1][j];\\n\t\t\t\t} else {\\n\t\t\t\t\tx += a[1][j];\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif (ans < x) {\\n\t\t\t\tans = x;\\n\t\t\t}\\n\t\t}\\n\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "140", "substitutes": {"sc": ["nc", " ser", "gram", "ss", " cat", " SC", " rc", "Sc", " cont", "SC", "bc", " sw", "c", " inst", " scr", " pars", " ans", " scanner", "se", " Sc", "sb", " app", "scan", "rc", " src", "cr", " arr", " sp"]}}
{"code": "\\nimport java.text.DecimalFormat;\\nimport java.util.stream.LongStream;\\nimport java.util.stream.IntStream;\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        FastScanner sc = new FastScanner();\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        AtCoder problem = new AtCoder(sc);\\n        problem.solve(out);\\n\\n        out.flush();\\n    }\\n\\n}\\n\\nclass AtCoder {\\n\\n    final int N;\\n\\n    AtCoder(FastScanner sc) {\\n        N = sc.nextInt();\\n    }\\n\\n    void solve(PrintWriter out) {\\n        for (int i = 0; i <= N / 4; i++) {\\n            for (int j = 0; j <= N / 7; j++) {\\n                if (4 * i + 7 * j == N) {\\n                    out.println(\"Yes\");\\n                    return;\\n                }\\n            }\\n        }\\n        out.println(\"No\");\\n    }\\n\\n}\\n\\nclass FastScanner {\\n\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        } else {\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int readByte() {\\n        if (hasNextByte()) {\\n            return buffer[ptr++];\\n        } else {\\n            return -1;\\n        }\\n    }\\n\\n    private static boolean isPrintableChar(int c) {\\n        return 33 <= c && c <= 126;\\n    }\\n\\n    public boolean hasNext() {\\n        while (hasNextByte() && !isPrintableChar(buffer[ptr])) {\\n            ptr++;\\n        }\\n        return hasNextByte();\\n    }\\n\\n    public String next() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while (isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n        if (!hasNext()) {\\n            throw new NoSuchElementException();\\n        }\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while (true) {\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            } else if (b == -1 || !isPrintableChar(b)) {\\n                return minus ? -n : n;\\n            } else {\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n\\n    public int nextInt() {\\n        long nl = nextLong();\\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) {\\n            throw new NumberFormatException();\\n        }\\n        return (int) nl;\\n    }\\n\\n    public double nextDouble() {\\n        return Double.parseDouble(next());\\n    }\\n}\\n", "target": "172", "substitutes": {"sc": ["cl", "mc", "nc", "sci", "client", "scope", "pc", "null", "ch", "server", "ss", "sec", " SC", "asc", "fc", "Sc", "SC", "screen", "ct", "scl", "cs", "bc", "cv", "src", "lc", "ci", "dc", "cer", "cy", "config", "sp", "system", "text", "uc", "soc", "ca", "se", " Sc", "anc", "scan", "isc", "osc", "rc", "cc", "cr", "sch", "squ", "scene", "cam", "esc", "ctx", "cus", "sync"], "out": ["this", "screen", "ou", "r", "exp", "key", "check", "output", "w", "Out", "o", "inner", "result", "cli", "flush", "exec", "bin", "group", "doc", "copy", "error", "console", "window", "query", "client", "p", "server", "line", "name", "io", "input", "temp", "conn", "report", "user", "contract", "sum", "list", "str", "again", "write", "up", "file", "IN", "self", "prefix", "view", "v", "extra", "system", "writer", "raw", "err", "pass", "log", "word", "bar", "cache", "sync", "conf", "parent", "null", "table", "ch", "ex", "path", "page", "home", "outer", "password", "OUT", "string", "outs", "engine"], "problem": ["function", "application", "client", "processor", "bug", "expl", "null", "server", " Problem", "path", "control", "SC", "sim", "ocol", "plan", "check", "model", " procedure", "blems", "Problem", "system", "program", "pro", "comment", "runner", "result", "err", "object", "behavior", "handler", "obj", "ception", "controller", "reader", "job", "trial", " problems", "parser", "proc", "error"], "N": ["MN", "S", "Num", "NA", "SN", "NL", "C", "J", "num", "M", "Power", "Size", "U", "Y", "F", "NN", "Q", "P", "GN", "Na", "T", "I", "Ni", "NC", "L", "R", "B", "NR", "Ne", "V", "K", "NB", "D", "NT", "H", "O", "Ns", "NS", "Z", "NE", "G", "NG", "NI", "W", "X"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "is", "ri", "io", "init", "z", "f", "ci", "vi", "ui", "ini", "index", "x", "e", "di", "ip", "I", "ie", "ai", "gi", "mi", "ii", "zi", "li", "yi", "chi", "y", "fi"], "j": ["jj", "jc", "ni", "p", "oj", "it", "u", "J", "qi", "ji", "v", "jp", "si", "l", "ij", "z", "aj", "f", "br", "ui", "x", "jet", "ja", "uj", "ie", "q", "o", "d", "ii", "li", "js", "k", "je", "kj", "y", "jl", "jo"], "in": ["this", "isin", "inet", "val", "login", "ins", "serv", "din", "ex", "v", "path", "line", "l", "a", "data", "is", "url", "con", "lin", "r", "part", "impl", "source", "win", "input", "resource", "In", "s", "image", "inn", "ini", "or", "ssl", "raw", "min", "read", "inf", "inner", "d", "err", "ac", "reader", "exec", "connection", "bin", "readable", "as", "inc", "IN", "re"], "buffer": ["buff", "pad", "counter", "texture", "size", "message", "slice", "table", "queue", "reference", "server", "stack", "binary", "Buffer", "url", "data", "use", "header", "iter", "source", "block", "resource", "length", "document", "shell", "output", "memory", "device", "read", "comment", "result", "padding", "reader", "flush", "buf", "bb", "seed", "surface", "position", "bin", "layer", "file", "address", "transfer", "bar", "shape", "cache", "uffer", "batch", "variable", "array", "window"], "ptr": ["tmp", "inst", "slice", "qi", "addr", "ext", "fr", "tty", "ctr", "pend", "ft", "cmp", "depth", "pl", "eger", "trace", "address", "pad", "ctx", "fee", "uint", "sth", "p", "pointers", "xp", "etr", "ff", "const", "ct", "Ptr", "length", "td", "pointer", "handle", "ty", "str", "ffff", "fp", "code", "shift", "pos", "buff", "fer", "wr", "patch", "tr", " pointer", "cur", "fe", "len", "cp", "dr", "br", "pty", "tip", "ffield", "grad", "rt", "port", "offset", "butt", "attr", "src", "loc", "fd", "ect", "pt", "tp", "buf", "prot", "ref", "lf", "proc", "xt"], "buflen": ["baFlenn", "boflien", "BUflens", "buflaren", "bublin", "bublen", "bucilen", "BUllens", "bufrenc", "bovelener", "buFlon", "buflenn", "bublaren", "baFlen", "buFlEN", "baflend", "bucilenn", "bovelen", "buglens", "buvelener", "buselend", "buvelien", "buflEN", "baflEN", "fuflens", "bufron", "buFlend", "buflener", "fuFlens", "buvelens", "baFlEN", "buglenc", "bullen", "bucilEN", "BUflaren", "bufrin", "buflin", "buglen", "bufren", "fuflenc", "buFlen", "buflien", "BUflen", "baFlend", "buflens", "fuFlon", "buflon", "buFlens", "bublener", "bublien", "bufrens", "buflend", "BUllen", "fuFlenc", "buselenn", "BUllin", "bovelens", "fuFlen", "fuflon", "boflens", "bublens", "BUllaren", "buselen", "bullener", "buvelen", "bovelien", "buselEN", "bullaren", "buFlenc", "bullien", "buflenc", "bufraren", "buFlenn", "fuflen", "buglon", "bucilend", "boflen", "bullens", "bullin", "BUflin", "baflenn", "boflener", "baflen"], "c": ["enc", "nc", "vc", "count", "p", "pc", "C", "u", "ch", "sec", "v", "l", "fc", "cu", "ct", "z", "h", "cs", "cp", "f", "lc", "ci", "cm", "s", "dc", "m", "e", "col", "uc", "ce", "code", "d", "g", "abc", "ac", "k", "rc", "cc", "cy", "ec", "xc"], "sb": ["buff", "fb", "sf", "bm", "sth", "SB", "pb", "rb", "obb", "si", "usb", "db", "cb", "ib", "sv", "bf", "bc", "BB", "kb", "lb", "gb", "dB", "src", "orb", "sp", "sa", " SB", "bps", "nb", "bg", "su", "bb", "xb", "osc", "bt", "wb", "ob", "bp"], "b": ["fb", "p", " eb", "mb", "u", "pb", "abb", "rb", "binary", "v", "l", "ib", "db", "a", "cb", "bf", "r", "lb", "bs", "f", "eb", "s", "m", "base", "e", "abs", "d", "B", "nb", "bg", "obj", "bb", "xb", "bd", "bin", "y", "bar", "ab", "emb", "wb", "ob", "boot"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s=sc.nextLine();\\n      \tint count=0;\\n      \tfor(int i=0;i<s.length();i+=2){\\n          if(i+1==s.length()){\\n          \tcount+=Integer.parseInt(s)-Math.pow(10,i)+1;\\n          }else{\\n          count+=Math.pow(10,i)*9;\\n          }\\n        }\\n\t\tSystem.out.println(count);\\n\t\t\\n\t}\\n}", "target": "135", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "r", "bc", "cs", "sw", "src", "desc", "ci", "c", " scr", "sp", "acc", "system", "uc", "se", "ner", " Sc", "anc", "ocr", "scan", "osc", "rc", "cc", "cr", "parser", "ec", "esc", "sync"], "s": ["S", "p", "u", "ins", "ss", "rs", "v", "si", "strings", "l", "qs", "is", "sv", "es", "ls", "ws", "its", "bytes", "fs", "source", "input", "ps", "f", "sl", "c", "os", "ds", "m", "str", "e", "string", "ses", "abs", "hs", "d", "gs", "ns", "g", "b", "services", "su", "js", "sb", "in", "spec"], "count": ["counter", "total", "parent", "offset", "now", "Count", "size", "more", "core", "id", "num", "cur", "data", "part", "use", "start", "info", "len", "char", "length", "last", "c", "sum", "check", "index", "weight", "depth", "list", "base", "e", "string", "col", "code", "n", "stat", "work", "child", "found", "type", "log", "number", "level", "cache", "th", "error"], "i": ["hi", "bi", "api", "pi", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "is", "ri", "io", "info", "h", "z", "f", "ci", "c", "ui", "ini", "index", "m", "phi", "x", "mu", "eni", "uri", "di", "ip", "e", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "b", "zi", "li", "j", "k", "oi", "in", "chi", "t", "ti"]}}
{"code": "import java.util.*;\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner scan = new Scanner(System.in);\\n    int N = scan.nextInt();\\n    int[] A;\\n    A = new int[N+1];\\n    \\n    // \u30bd\u30fc\u30c8\u3059\u308b\\n    for (int i= 1; i <= N; i++){\\n      A[i] = scan.nextInt();\\n    }\\n    Arrays.sort(A);\\n    float result=A[1];\\n    for (int j= 2; j <= N; j++){\\n      result=result/2+(float)A[j]/2;\\n    }\\n    System.out.println(result);\\n  \\n  }\\n \\n}", "target": "232", "substitutes": {"scan": ["all", " Scan", "cat", "watch", "connect", "walk", "na", "ss", "span", "run", "search", "con", "r", "car", "iter", "win", "end", "query", "check", "feed", "chan", "an", " scanner", "system", "read", "skip", "n", "stat", "ignore", "sys", "se", "ner", "reader", "in", "parse", "Scan", "log", "clean", "pan", "parser", "look", "sc", "can", "ann", "sync"], "N": ["Len", "S", "Num", "SN", "Count", "C", "J", "M", " n", "Size", "Y", "X", "F", "Number", "NN", "P", "T", "I", "L", "R", "n", "B", "V", "K", "D", "NT", "H", "Z", "NS", "O", "Ns", "G", "W", "E"], "A": ["S", "NA", "C", "AA", "M", "Average", "LA", "a", "U", "Y", "Array", "F", "AP", "P", "API", "T", "I", "alpha", "Alpha", "B", "V", "K", "Access", "All", "D", "CA", "G", "area", "W", "X"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int c = sc.nextInt();\\n        int d = sc.nextInt();\\n\\n        int start = a > c ? a : c;\\n        int end = b < d ? b : d;\\n\\n        int time = end - start > 0 ? end - start : 0;\\n\\n        System.out.println(time);\\n    }\\n}", "target": "47", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "ser", "com", "ch", "sec", "ss", "tc", " SC", "cur", "asc", "sh", "Sc", "SC", "ct", "bc", "cs", "sw", "cv", "cor", "desc", "src", "lc", "ci", "cer", "console", "sp", "system", "sq", "uc", "soc", "sr", "cle", "se", "ner", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "parser", "coll", "esc", "ctx", "cus", "sync"], "a": ["offset", "p", "ia", "na", "u", "ad", "ba", "i", "aa", "A", "oa", "pa", "f", "au", "s", "ga", "an", "base", "sa", "ae", "ada", "ea", "e", "ai", "alpha", "af", "n", "ca", "ac", "aaa", "ama", "fa", "art", "as", "asa", "area", "ab", "da", "va", "aj"], "b": ["bi", "p", "u", "rb", "ad", "v", "i", "ba", "l", "db", "cb", "r", "bf", "aa", "be", "z", "h", "lb", "bc", "bs", "f", "eb", "w", "x", "base", "e", "o", "n", "g", "B", "nb", "j", "bb", "sb", "bd", "y", "wb", "ab", "boot"], "c": ["p", "C", "u", "ad", "v", "i", "l", "cu", "fc", "r", "aa", "z", "h", "cs", "bc", "f", "lc", "ci", "dc", "cm", "m", "an", "x", "cy", "ae", "e", "uc", "cf", "ce", "n", "ca", "ac", "k", "cd", "cc", "y", "da"], "d": ["dx", "p", "u", "nd", "ad", "v", "i", "l", "db", "r", "dat", "z", "h", "df", "f", "dc", "ud", "ds", "m", "x", "e", "di", "dd", "n", "dy", "dt", "j", "D", "bd", "cd", "y", "da", "t"], "start": ["offset", "space", "count", "p", "change", "size", "id", "next", "show", "sec", "v", "i", "add", "l", "part", "diff", "r", "use", "init", "info", "started", "length", "f", "sum", "style", "send", "delay", "index", "base", "e", "st", "max", "set", "n", "shift", "ish", "se", "open", "pos", "work", "step", "in", "parse", "no", "stop", "mid", "tick", "range", "close", "Start"], "end": ["offset", "p", "ment", "ending", "id", "next", "ad", "End", "date", "run", "END", "line", "r", "block", "pend", "z", "h", "event", "get", "f", "last", "t", "send", "w", "est", "x", "e", "max", "code", "grade", "ent", "set", "n", "inner", "prev", "ends", "day", "in", "ended", "stop", "range", "ension", "en", "tail"], "time": ["complete", "counter", "sleep", "call", "runtime", "live", "now", "rate", "size", "times", "cost", "id", "table", "date", "duration", "data", "name", "debug", "diff", "seconds", "value", "info", "length", "TIME", "inter", "Time", "ms", "delay", "m", "ime", "depth", "tim", "frame", "loop", "clock", "timer", "log", "trace", "cache", "error", "t"]}}
{"code": "public class Main {\\n\tpublic static void main(String[] args){\\n\t\tjava.util.Scanner scan = new java.util.Scanner(System.in);\\n\t\tint x = scan.nextInt();\\n\t\tfor(int i = 1;i <= x; i++){\\n\t\t\tif(i % 3 == 0){\\n\t\t\t\tSystem.out.print(\" \" + i);\\n\t\t\t}else if(i % 10 == 3){\\n\t\t\t\tSystem.out.print(\" \" + i);\\n\t\t\t}else if(String.valueOf(i).contains(\"3\")){\\n\t\t\t\tSystem.out.print(\" \" + i);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n\\n}", "target": "154", "substitutes": {"scan": ["cat", "watch", "connect", "walk", "ser", "na", "server", "view", "run", "search", "sign", "r", "start", "store", "row", "get", "er", "inter", "report", "feed", "check", "chan", "an", " scanner", "system", "read", "skip", "n", "err", "ignore", "sys", "se", "ner", "reader", "in", "parse", "Scan", "san", "look", "sc", "out", "can", "ann", "query"], "x": ["dx", "p", "id", "u", "xi", "v", "xes", "ix", "l", "X", "z", "h", "f", "width", "c", "ax", "index", "m", "w", "e", "max", "d", "n", "j", "pos", "k", "xs", "in", "number", "y", "t", "xx"], "i": ["hi", "bi", "api", "pi", "p", "iu", "slice", "u", "id", "it", "multi", "qi", "iii", "xi", "ji", "v", "si", "ix", "l", "ri", "start", "io", "init", "z", "abi", "f", "ci", "c", "ui", "index", "m", "phi", "mu", "uri", "eni", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "cli", "ii", "b", "zi", "li", "j", "oi", "yi", "in", "chi", "y", "t", "ti"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) throws java.io.IOException {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint[] a = new int [n];\\n\t\tint[] b = new int [n];\\n\t\tint[] c = new int [n];\\n\t\tfor(int d = 0; d < n ; d++){\\n\t\t\ta[d] = scan.nextInt();\\n\t\t\tb[d] = scan.nextInt();\\n\t\t\tc[d] = scan.nextInt();\\n\t\t}\\n\t\tfor(int e = 0;e < n ; e++){\\n\t\t\tif((a[e]*a[e]+b[e]*b[e]==c[e]*c[e]) || (b[e]*b[e]+c[e]*c[e]==a[e]*a[e]) || (c[e]*c[e]+a[e]*a[e]==b[e]*b[e])){\\n\t\t\t\tSystem.out.println(\"YES\");\\n\t\t\t}else{\\n\t\t\t\tSystem.out.println(\"NO\");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "65", "substitutes": {"scan": ["nn", "wait", "cat", "connect", "spin", "walk", "watch", "slice", "na", "ser", "nan", "serv", "view", "span", "v", "run", "wan", "search", "l", "fan", "sign", "con", "r", "nl", "er", "gen", "query", "conn", "chan", "check", "an", "x", " scanner", "read", "skip", "ry", "sync", "kin", "ignore", "se", "ner", "reader", "in", "parse", "Scan", "log", "clean", "san", "pan", "conv", "look", "sc", "out", "can", "ann", "re"], "n": ["nn", "none", "nc", "nt", "count", "p", "size", "adj", "u", "num", "N", "ln", "v", "i", "l", "sn", "r", "h", "z", "nl", "len", "f", "conn", "s", "ne", "m", "an", "x", "w", "en", "o", "ns", "g", "network", "nb", "j", "net", "k", "no", "in", "number", "y", "t"], "a": ["api", "p", "u", "ad", "v", "i", "ba", "ar", "l", "r", "aa", "z", "h", "A", "f", "er", "au", "s", "ga", "t", "at", "an", "x", "w", "sa", "ae", "ai", "ce", "o", "alpha", "af", "g", "ca", "ac", "aaa", "y", "as", "asa", "area", "ab", "da", "am", "va", "aj"], "b": ["fb", "bi", "ub", "p", "u", "pb", "abb", "rb", "ad", "ch", "v", "i", "ba", "l", "db", "ib", "cb", "r", "bf", "bh", "be", "aa", "z", "lb", "bc", "h", "bs", "f", "eb", "s", "m", "an", "x", "w", "or", "base", "o", "g", "B", "ca", "ac", "j", "k", "sb", "bb", "bd", "y", "wb", "ab", "ob", "t"], "c": ["cat", "p", "pc", "C", "u", "ch", "v", "i", "l", "cu", "ct", "cb", "r", "sc", "h", "z", "cs", "cp", "f", "lc", "ci", "s", "m", "w", "x", "an", "ec", "ce", "q", "o", "cf", "code", "g", "ca", "ac", "k", "cc", "y", "cr", "cy", "t"], "d": ["div", "dx", "p", "dn", "u", "id", "nd", "did", "ad", "od", "v", "l", "data", "dh", "dir", "wd", "dat", "h", "z", "de", "f", "dr", "fd", "dc", "ud", "ds", "m", "x", "di", "md", "o", "dd", "g", "ld", "dy", "dt", "j", "day", "D", "bd", "cd", "y", "vd", "da", "ed", "ind", "t"], "e": ["eye", "p", "change", "u", "ei", "v", "i", "le", "line", "l", "el", "es", "r", "E", "ele", "be", "eu", "z", "h", "fe", "end", "de", "f", "er", "t", "ne", "ev", "pe", "x", "ae", "ea", "eve", "esi", "oe", "ce", "o", "ie", "g", "element", "se", "em", "ze", "j", "je", "ye", "ge", "ee", "y", "ey", "ed", "en", "ec", "xe"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.FileReader;\\nimport java.io.InputStreamReader;\\nimport java.io.File;\\nimport java.io.FileNotFoundException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author ShekharN\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        FastScanner in = new FastScanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        TaskA solver = new TaskA();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskA {\\n        public void solve(int testNumber, FastScanner in, PrintWriter out) {\\n            String s = in.nextString();\\n            String[] arr = s.split(\"/\");\\n            out.println(2018 + \"/\" + arr[1] + \"/\" + arr[2]);\\n        }\\n\\n    }\\n\\n    static class FastScanner {\\n        private BufferedReader br;\\n        private StringTokenizer st;\\n\\n        public FastScanner(File f) {\\n            try {\\n                br = new BufferedReader(new FileReader(f));\\n            } catch (FileNotFoundException e) {\\n                e.printStackTrace();\\n            }\\n        }\\n\\n        public FastScanner(InputStream f) {\\n            br = new BufferedReader(new InputStreamReader(f));\\n        }\\n\\n        public String nextString() {\\n            while (st == null || !st.hasMoreTokens()) {\\n                String s = null;\\n                try {\\n                    s = br.readLine();\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n                if (s == null)\\n                    return null;\\n                st = new StringTokenizer(s);\\n            }\\n            return st.nextToken();\\n        }\\n\\n    }\\n}\\n\\n", "target": "18", "substitutes": {"inputStream": ["inputSteam", "outputSteam", " inputstream", "inputFile", " inputSteam", "InputSteam", "internalstream", "InputFile", "inputStreamer", "internalSteam", "Inputstream", "outputFile", "internalStreamer", "outputStreamer", "internalStream", "InputStreamer", " inputFile", "InputStream", "outputstream", "inputstream"], "outputStream": ["inputForm", "outputSteam", "inputSteam", "outStreamer", "outputForm", "Outputstream", "imagestream", "inputStreamer", "OutputStream", " outputSteam", "imageStreamer", "outSteam", "outputStreamer", "imageStream", "outStream", "outstream", "imageSteam", "OutputSteam", "outputstream", "OutputForm", " outputForm", " outputstream", "inputstream"], "in": ["this", "ic", "isin", "on", "id", "login", "ins", "din", "inside", "i", "path", "url", "l", "a", "data", "is", "request", "lin", "con", "ar", "io", "source", "win", "info", "input", "init", "sin", "get", "In", "gen", "user", "inn", "ini", "conn", "arg", "image", "x", "nin", "config", "cin", "min", "gin", "inf", "inner", "rin", "n", "cli", "kin", "err", "again", "reader", "pin", "exec", "log", "bin", "vin", "from", "inc", "IN"], "out": ["all", "this", "self", "parent", "call", "target", "client", "p", "buffer", "null", "one", "ins", "to", "ex", "v", "working", "line", "page", "data", "name", "io", "init", "temp", "conn", "outer", "writing", "down", "user", "key", "output", "OUT", "w", "x", "list", "str", "writer", "string", "global", "Out", "o", "inner", "comment", "n", "err", "again", "write", "net", "exec", "up", "work", "obj", "log", "bin", "file", "outs", "word", "exit", "inc", "off", "flow", "lock", "dump", "bar", "cache", "error", "array", "window"], "solver": ["solving", "ssolve", "setsolving", "Solver", "setsanger", "ersolve", "sector", "ssolver", "sanger", "Sector", "ssolution", "solve", "resanger", "solution", "ersector", "Solution", "ersolver", "Sanger", "setsolution", "Solving", "resolving", "Solve", "ersolution", "ssector", "resolver", "setsolver", "resolution"], "testNumber": ["trialnum", "trialNumber", "testNumbers", "testnumber", " trialnumber", " trialNumber", " testnumber", " trialNumbers", "trialNumbers", " testnum", "trialnumber", " testNumbers", "testnum", " trialnum"], "s": ["aws", "S", "ts", "space", "p", "u", "ins", "ss", "rs", "v", "si", "strings", "sql", "i", "l", "data", "es", "sv", "sign", "ls", "r", "ws", "its", "is", "sample", "ps", "bs", "lines", "session", "sl", "c", "ings", "os", "sum", "words", "shell", "m", "states", "x", "parts", "e", "str", "submit", "ssl", "string", "ses", "o", "abs", "d", "hs", "n", "ns", "g", "b", "services", "gs", "sets", "sym", "se", "body", "su", "js", "sb", "xs", "comments", "sg", "t"], "arr": ["bl", "enc", "py", "arc", "vec", "ars", "AR", "wr", "dict", "adv", "rep", "arin", "pr", "ar", "asc", "data", "el", "fr", "Array", "part", "r", "yr", "adr", "aa", "attr", "ear", "aj", "air", "ARR", "var", "list", "parts", "str", "ara", "arch", "apt", "err", "ray", "Ar", "rr", "gr", "obj", "att", "parse", "art", "array", "ann", "coll"], "br": ["bl", "fb", "bel", "bed", "ber", "p", "hr", "rb", "browser", "ch", "tr", "pr", "ar", "bre", "db", "shr", "fr", "ur", "ctr", "r", "bh", "iter", "bal", "fe", "bc", "bridge", "ler", "er", "dr", "mr", "BR", "or", "sp", "bro", "str", "bur", "Br", "brush", "abs", "rest", "ver", "sr", "b", "err", "gr", "cro", "buf", "bb", "rib", "cr", "bar", "ab", "rt"], "st": ["ut", "bl", "cl", "inst", "ste", "ust", "nt", "sf", "sth", "ST", "back", "nd", "stable", "ss", "stack", "pr", "const", "sh", "l", "ct", "sn", "std", "fr", "r", "sign", "be", "stage", "ft", "fe", "mt", "sw", "src", "bs", "dr", "sl", "stress", "est", "pe", "sp", "sa", "str", "ist", "pt", "stri", "rest", " est", "sr", "stat", "St", "b", "se", "sb", "sta", "ast", "sts", "cr", "stop", "ost", "bt", "rt", "sc", "t"], "f": ["fo", "this", "sf", "fl", "p", "v", "filename", "i", "l", "a", "data", "name", "fr", "dir", "r", "F", "fs", "el", "io", "h", "fe", "input", "z", "df", "fen", "fd", "c", "feed", "fc", "m", "w", "x", "e", "fp", "files", "inf", "o", "d", "af", "n", "g", "b", "form", "fa", "file", "ref", "lf", "t", "fi"]}}
{"code": "import java.io.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    try {\\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n      String count = new String(in.readLine());\\n      int lineCount = Integer.parseInt(count);\\n      int pFlag = 0;\\n      int result = 0;\\n      for(int i = 0; i < lineCount; i++) {\\n        String num = new String(in.readLine());\\n        int iNum = Integer.parseInt(num);\\n        pFlag = 0;\\n        for(int j = 2; j <= Math.sqrt(iNum); j++) {\\n          if(iNum % j == 0) {\\n            pFlag = 1;\\n            break;\\n          }\\n        }\\n        if(pFlag == 0) {\\n          result++;\\n        }\\n      }\\n      System.out.println(result);\\n    } catch(IOException e) {\\n    }\\n  }\\n}", "target": "226", "substitutes": {"in": ["isin", "rec", "buffer", "id", "login", "container", "ins", "serv", "din", "ex", "version", "fac", "data", "is", "name", "lin", "part", "r", "diff", "init", "source", "stream", "input", "resource", "In", "f", "session", "s", "conn", "c", "ini", "inn", "image", "gen", "m", "nin", "e", "socket", "token", "raw", "gin", "read", "inner", "n", "with", "cli", "b", "err", "ac", "again", "reader", "connection", "log", "bin", "readable", "as", "inc", "doc", "IN", "out", "re"], "count": ["all", "counter", "conf", "status", "msg", "call", "cat", "Count", "message", "size", "id", "line", "data", "name", "start", "info", "book", "length", "lines", "report", "c", "sum", "index", "list", "string", "max", "code", "content", "comment", "n", "limit", "child", "log", "file", "group", "number", "cache", "out", "array"], "lineCount": ["LineType", "LineLength", "linType", "lineCode", " lineLength", "lineNum", "LineCode", "lineSize", "linCode", "lineLength", "linNum", "LineCount", " lineType", " lineCode", " lineNum", "LineSize", "LineNum", "lineType", "linCount", "linLength", "linSize", " lineSize"], "pFlag": ["pflag", "parentNum", "cFlag", "pcStyle", "parentflag", " pNum", " pCount", "PFlag", "iCode", "iCount", "pcCount", "PBit", "PFlags", "pStyle", "iBit", "PCode", "iStyle", " pBit", " pflag", "pCount", "pcFlag", "parentCount", "cFlags", "pCode", " pStyle", "cCount", "cBit", "parentFlag", "pcCode", " pCode", "pBit", "PCount", "pFlags", " pFlags", "pNum", "iFlag", "iflag"], "result": ["counter", "direction", "total", "status", "score", "function", "message", "future", "cur", "res", "const", "page", "data", "duration", "progress", "diff", "valid", "value", "info", "results", "length", "winner", "report", "feature", "sum", "done", "grade", "Result", "success", "gi", "goal", "runner", "rank", "code", "err", "current", "response", "ret", "number", "inc", "range", "section", "error", "default"], "i": ["hi", "pi", "ori", "ni", "p", "iu", "u", "id", "qi", "xi", "ji", "v", "si", "l", "io", "z", "h", "f", "ci", "ui", "ini", "index", "x", "e", "di", "I", "ai", "o", "gi", "mi", "n", "ii", "b", "zi", "li", "oi", "chi", "ti"], "num": ["nn", "um", "unit", "Num", "mon", "u", "na", "nu", "uno", "multi", "mat", "nam", "line", "data", "uni", "con", "r", "nm", "init", "fn", "nat", "loc", "gen", "umi", "np", "str", "text", "string", "nom", "n", "b", "cli", "buf", "su", "mn", "digit", "number", "NUM", "conv", "out", "mult"], "iNum": [" iOrd", "iiLen", "idiNUM", "iTon", "siNum", "piNum", " iNUM", "iNUM", "iVal", "piLen", "xiLen", "iLen", "xiTon", "siOrd", "xiNum", "iOrig", "jTen", "piTon", "siOrig", " iTen", "piVal", "siNUM", " iOrig", "idiOrd", "jLen", "iiNum", "jOrd", " iTon", "idiOrig", "iiOrd", "jNum", "iiTen", " iLen", " iVal", "iOrd", "iTen", "idiNum", "xiVal"], "j": ["im", "dj", "jj", "jc", "ni", "p", "oj", "it", "adj", "u", "J", "bj", "ji", "v", "jp", "si", "ix", "l", "a", "ij", "fr", "ik", "z", "aj", "f", "br", "ax", "key", "m", "x", "ja", "uj", "ie", "o", "d", "n", "g", "b", "ii", "err", "li", "js", "oi", "job", "y", "off", "jl", "out", "jo"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner in = new Scanner(System.in);\\n      String k = in.nextLine();  \\n      String S = in.nextLine();\\n      int K = Integer.parseInt(k);\\n     \\n      if (S.length()<=K){\\n          System.out.println(S);\\n         }\\n         else {\\n           System.out.println(S.substring(0,K)+ \"...\");\\n                }\\n        }\\n    }\\n", "target": "248", "substitutes": {"in": ["isin", "rec", " IN", "login", "ins", "ln", "din", "arin", "inside", "i", "fin", "l", "line", "data", "is", "std", "lin", "r", "con", "init", "source", "h", "info", "input", "win", "In", "f", "conn", "s", "lib", "inn", "ini", "c", "gen", "m", "nin", "str", "socket", "inf", "inner", "rin", "n", "g", "cli", "kin", "err", "pass", "again", "reader", "exec", "connection", "log", "bin", "inc", "IN", "out", "thin"], "k": ["sk", "p", "Ku", "id", "Ak", "ko", "N", "ks", "km", "M", "v", "i", "r", "Q", "h", "P", "f", "s", "key", "m", "Key", "ku", "string", "q", "n", "g", "b", "kin", "kid", "j", "_", "work", "KS", "SK", "out"], "S": ["SI", "AS", "SS", "SL", "ST", "SN", "IS", "VS", "TS", "Standard", "Part", "N", "TEXT", "OS", "RS", "SE", "U", "SU", "SH", "GS", "Si", "SC", "Service", "Q", "CL", "SA", "P", "SAM", "OSS", "FS", "BS", "s", "SM", "SO", "T", "L", "R", "V", "O", "NS", "DS", "HS", "SR", "KS", "SK", "CS", "PS"], "K": ["KK", "C", "IK", "J", "N", "ks", "M", "U", "Y", "X", "KB", "F", "Q", "KO", "P", "KC", "HK", "Key", "OK", "T", "I", "Mask", "PK", "L", "R", "B", "V", "D", "Index", "H", "Z", "O", "G", "KS", "SK", " N"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int m = Integer.parseInt(sc.next());\\n        int[] p = new int[n];\\n        long wa = 0;\\n        long ac = 0;\\n        for (int i = 0; i < m; i++) {\\n            int pi = Integer.parseInt(sc.next());\\n            String s = sc.next();\\n            if (\"WA\".equals(s) && p[pi - 1] != -1) {\\n                p[pi - 1]++;\\n            } else if (\"AC\".equals(s) && p[pi - 1] >= 0) {\\n                ac++;\\n                wa += p[pi - 1];\\n                p[pi - 1] = -1;\\n            }\\n        }\\n        System.out.println(ac + \" \" + wa);\\n    }\\n}", "target": "48", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "com", "ch", "tc", " SC", "asc", "sh", "Sc", "SC", "cb", "r", "cs", "bc", "cv", "lc", "sl", "dc", "c", "cer", " scr", "sp", "str", "uc", "soc", "sync", "sr", "cle", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "ec", "esc", "cus", "coll"], "n": ["nn", "nc", "ni", "u", "num", "N", "v", "cn", "l", "sn", "nm", "init", "z", "h", "nr", "f", "c", "ne", "w", "x", "e", "min", "q", "o", "d", "ns", "b", "pn", "j", "k", "no", "in", "en", "t"], "m": ["dm", "mc", "u", "num", "M", "v", "l", "mm", "r", "h", "z", "f", "cm", "ms", "c", "pm", "w", "x", "q", "d", "mi", "b", "j", "hm", "k", "in", "mn", "y"], "p": ["py", "api", "pc", "patch", "u", "po", "v", "pr", "l", "a", "pre", "point", "part", "r", "P", "lp", "ps", "cp", "f", "pa", "c", "w", "x", "pe", "np", "e", "sp", "at", "per", "q", "o", "op", "ping", "vp", "b", "tp", "current", "pos", "up", "pp", "y", "post", "t"], "wa": ["aw", "Pa", "wait", "hi", "api", "wo", "na", "wal", "za", "ya", "a", "ws", "aa", "awa", "win", "ha", "sw", "pa", "au", "iw", "appa", "ga", "wx", "wave", "wi", "lambda", "w", "sa", "ww", "ta", "ai", "wt", "ca", "WA", "qa", "fa", "la", "wat", "da", "ma", "va", "Wa"], "ac": ["ace", "aw", "ana", "ic", "api", "oc", "pc", "aca", "ia", "ad", "mac", "acs", "asc", "a", "cu", "ap", "aa", "awa", "ha", "pac", "pa", "au", "ci", "c", "ax", "ak", "w", "sa", "acc", "ea", "ack", "uc", "ai", "ca", "acl", "AC", "anc", "jac", "auc", "cc", "inc", "asa", "ma", "am"], "i": ["bi", "hi", "ic", "ori", "ni", "iu", "u", "multi", "qi", "xi", "v", "si", "io", "z", "f", "ci", "vi", "c", "ui", "ini", "di", "ip", "I", "ie", "ai", "gi", "mi", "ii", "zi", "b", "j", "oi", "chi", "ti"], "pi": ["hi", "Pi", "bi", "py", "api", "ic", "ni", "pc", "slice", "po", "xi", "qi", "si", "l", "cu", "pre", "pie", "part", "diff", "dat", "ski", "lp", "pa", "pse", "lc", "ci", "vi", "asi", "c", "pid", "ini", "lane", "ui", "phi", "x", "PI", "ku", "adi", "di", "ai", "mi", "isi", "ii", "zi", "cli", "li", "pos", "oi", "chi", "ki", "ti", "osi"], "s": ["S", "sie", "sf", "u", "ss", "si", "strings", "l", "es", "ls", "r", "ws", "ips", "its", "sin", "sw", "ps", "f", "lines", "south", "params", "c", "ings", "words", "w", "ops", "e", "say", "sq", "ses", "string", "ssl", "abs", "o", "d", "g", "stat", "sets", "sys", "se", "sym", "su", "sup", "sb", "comments", "spec", "t", "sync"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        int s = sc.nextInt();\\n        /*\\n         * \u914d\u5217\u306b\u51fa\u73fe\u3057\u305f\u6570\u3092set\u306b\u683c\u7d0d\u3059\u308b\\n         * set\u306b\u5b58\u5728\u3059\u308b\u306a\u3089\u305d\u306e\u6642\u306ei\u3092\u7b97\u51fa\u3057\u3066return\\n         * */\\n\\n        int[] arr = new int[1000000];\\n        arr[0] = s;\\n        Set<Integer> set = new HashSet<>();\\n        set.add(s);\\n\\n        for (int i = 1; i < 1000000000; i++) {\\n            if (arr[i - 1] % 2 == 0) {\\n                arr[i] = arr[i - 1] / 2;\\n            } else {\\n                arr[i] = arr[i - 1] * 3 + 1;\\n            }\\n\\n            if (set.contains(arr[i])) {\\n                System.out.println(i + 1);\\n                return;\\n            } else {\\n                set.add(arr[i]);\\n            }\\n\\n        }\\n\\n    }\\n}\\n\\n\\n", "target": "166", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "pc", "com", "ch", "sec", "ss", " SC", "sub", "asc", "sh", "Sc", "SC", "iss", "bc", "cs", "sw", "src", "desc", "lc", "ci", "c", "cer", " scr", "sp", "acc", "system", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cr", "sch", "ec", "esc"], "s": ["S", "ts", "blocks", "p", "size", "slice", "id", "ments", "ks", "ss", "rs", "si", "strings", "l", "qs", "a", "es", "is", "sort", "ls", "r", "series", "start", "ens", "sample", "cs", "src", "ps", "f", "lines", "rows", "c", "states", "index", "ches", "parts", "sa", "e", "ses", "string", "o", "d", "n", "ns", "g", "sets", "b", "services", "sb", "xs", "ids", "y", "array"], "arr": ["enc", "arc", "ars", "test", "val", "arm", "na", "stack", "tr", "pr", "ar", "data", "Array", "fr", "dat", "adr", "aa", "iter", "attr", "app", "dr", "air", "au", "br", "order", "arg", "var", "list", "img", "str", "arch", "array", "err", "ray", "Ar", "rr", "abc", "gr", "frac", "att", "parse", "art", "av", "our", "inc", "war", "batch", "act", "aj", "ann", "coll"], "set": ["sche", "reset", "test", "size", "null", "id", "hash", "map", "keep", "add", "sort", "is", "sign", "use", "name", "start", "store", "init", "get", "end", "are", "order", "send", "check", "match", "list", "base", "pack", "system", "en", "clear", "op", "sets", "err", "site", "se", "ner", "push", "parse", "SET", "group", "et", "out", "array", "sync"], "i": ["bi", "api", "pi", "p", "iu", "it", "u", "id", "slice", "multi", "qi", "next", "xi", "ji", "iii", "v", "anti", "si", "ix", "l", "a", "is", "ri", "start", "io", "h", "info", "abi", "ski", "f", "lc", "ci", "c", "ui", "ini", "key", "index", "eni", "phi", "x", "mu", "uri", "ip", "di", "e", "I", "esi", "ie", "ai", "o", "gi", "d", "n", "cli", "ii", "b", "zi", "isi", "li", "iv", "j", "oi", "k", "yi", "in", "y", "t", "ti", "fi"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String r = \"R\";\\n    int count = s.indexOf(r);\\n    int lastcount = s.lastIndexOf(r);\\n    if(s.contentEquals(\"RRR\")){\\n      System.out.println(\"3\");\\n    }else if(s.contentEquals(\"SSR\")){\\n      System.out.println(\"1\");\\n    }else if(s.contentEquals(\"SRS\")){\\n      System.out.println(\"1\"); \\n    }else if(s.contentEquals(\"RSS\")){\\n      System.out.println(\"1\");\\n    }else if(count == 0 && lastcount == 1 || count == 1 && lastcount == 2){\\n      System.out.println(\"2\");\\n    }else if(count == 0 && lastcount == 2 || count == 2 && lastcount == -1|| count == 0 && lastcount == -1|| count == 1 && lastcount == -1 ){\\n      System.out.println(\"1\");\\n    }else if(s.contentEquals(\"SSS\")){\\n      System.out.println(\"0\");\\n\\n    }\\n  }\\n}\\n\\n", "target": "141", "substitutes": {"sc": ["cl", "sci", "nc", "sf", "pc", "ch", "sec", "ss", " SC", "si", "cur", "asc", "sh", "search", "Sc", "SC", "stream", "cs", "bc", "sw", "desc", "src", "c", " scr", "sp", "str", "acc", "system", "uc", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "parser", "out", "esc", "sync"], "s": ["ins", "ks", "rs", "cells", "l", "a", "its", "fs", "sites", "results", "sports", "lines", "sl", "tests", "states", "ds", "os", "o", "g", "sys", "site", "as", "p", "server", "si", "i", "strings", "es", "series", "f", "n", "stat", "sets", "details", "js", "t", "self", "S", "less", "qs", "sv", "ws", "rows", "ings", "words", "settings", "ses", "gs", "b", "se", "sb", "stats", "in", "ts", "blocks", "u", "service", "ss", "is", "ls", "source", "c", "m", "parts", "e", "ssl", "string", "abs", "ns", "services", "shows", "su", "ves", "sg", "spec"], "r": ["p", "u", "id", "rb", "rs", "pr", "v", "i", "res", "ar", "l", "fr", "name", "rh", "h", "row", "nr", "method", "f", "br", "er", "c", "m", "w", "x", "ruby", "str", "e", "string", "rg", "R", "d", "n", "result", "b", "err", "sr", "rr", "rc", "rt", "range", "t", "re"], "count": ["all", "counter", "total", "parent", "call", "second", "low", "live", "age", "Count", "size", "message", "now", "id", "cost", "more", "num", "ch", "show", "allow", "i", "name", "part", "diff", "start", "error", "len", "length", "char", "last", "c", "sum", "order", "check", "index", "weight", "filter", "key", "depth", "base", "list", "process", "text", "other", "max", "code", "content", "n", "cast", "time", "child", "force", "in", "connection", "found", "type", "group", "always", "level", "number", "cc", "flow", "cache", "match", "front", "default", "close"], "lastcount": ["nextlevel", "oldCount", "lastfound", "nextcache", "nextcount", "Lastsize", "nextlength", "lastc", "lastmatch", "maxsize", " lastlength", "maxlength", "lastsize", "finallevel", "oldlength", "oldcount", "nextfound", "finallength", "Lastcount", "lastcache", "oldc", "firstsize", "lastlength", "finalcache", "nextc", " lastfound", " lastc", "oldmatch", "maxcount", "firstcount", "lastCount", "finalcount", "Lastc", "lastlevel", " lastlevel", " lastcache", " lastsize", "finalc", "firstmatch", "maxc", "finalfound", "oldcache", " lastmatch", "Lastlength", "firstlength", "maxlevel", "firstc", " lastCount", "finalCount", "firstlevel"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tlong total = 1;\\n\t\tlong input[] = new long[N];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tinput[i] = sc.nextLong();\\n\t\t\tif (input[i] == 0) {\\n\t\t\t\ttotal = 0;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif (total != 0) {\\n\t\t\tfor (int i = 0; i < N; i++) {\\n\t\t\t\tif (input[i] > 1000000000000000000L / total) {\\n\t\t\t\t\ttotal = -1;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\ttotal *= input[i];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(total);\\n\t}\\n}", "target": "27", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "ch", "tc", "ss", "server", " SC", "si", "cur", "asc", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "src", "lc", "ci", "cer", "c", "sp", "system", "sq", "uc", "ca", "sem", "se", "ner", " Sc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus"], "N": ["Len", "S", "Num", "No", "NA", "Count", "C", "Part", "J", "M", " n", "Size", "Y", "F", "NN", "Q", "P", "Total", "T", "I", "Ni", "L", "R", "n", "B", "network", "V", "K", "NB", "D", "NT", "H", "Z", "Ns", "O", "NS", "NE", "KN", "W", "E", "X"], "total": ["otal", "all", "complete", "parent", "nt", "trans", "successful", "toc", "count", "less", "cost", "next", "multi", "json", "received", "summary", "si", "average", "available", "data", "partial", "part", "start", "valid", "value", " Total", "info", "ski", "temp", "paid", "percent", "length", "huge", "last", "sum", "tax", "key", "Total", "index", "base", "mu", "done", "full", "di", "quant", "token", "max", "translation", "alpha", "result", "current", "fat", "no", "scale", "mega", "seed", "type", "step", "basic", "number", "found", "lost", "shared", "local", "gross", "t"], "input": ["head", "parent", "target", "include", "initial", "buffer", "integer", "null", "back", "view", "keep", "ahead", "data", "request", "entry", "value", "block", "source", "error", "temp", "length", "instance", "image", "forward", "model", "index", " Input", "output", "format", "config", "Input", "str", "list", "submit", "text", "string", "inf", "inner", "context", "result", "accept", "again", "current", "qa", "form", "up", "in", "response", "type", "address", "inc", "pull", "batch", "array", "audio"], "i": ["bi", "hi", "api", "pi", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "wei", "v", "si", "ix", "l", "data", "ri", "start", "io", "init", "info", "abi", "temp", "f", "lc", "ci", "ui", "ini", "key", "c", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "cli", "ii", "b", "li", "j", "oi", "in", "chi", "y", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n\\n    int n = sc.nextInt();\\n    double ans = 0;\\n\\n    for (int i = 0; i < n; i++) {\\n      double a = sc.nextInt();\\n      ans += 1.0 / a;\\n    }\\n\\n    System.out.println(1.0 / ans);\\n\\n  }\\n}", "target": "120", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "sf", "scope", "pc", "class", "core", "ser", "ch", "tc", "ss", " SC", "cur", "asc", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "src", "cv", "lc", "ci", "sl", "c", "cer", "sp", "sq", "sr", "ca", "se", "ner", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "n": ["nn", "nc", "ni", "p", "u", "num", "nan", "N", "l", "z", "h", "f", "conn", "s", "c", "ne", "m", "w", "x", "an", "nin", "e", "o", "d", "ns", "g", "b", "ner", "j", "net", "k", "in", "mn", "number", "en", "t"], "ans": ["nn", "ana", "acts", "ars", "AN", "aned", "anas", "na", "ani", "ads", "ins", "nan", "ks", "anon", "lan", "acs", "atan", "ares", "es", "ions", "ls", "aa", "cs", "ians", "pa", "s", " an", "nas", "cas", "ds", "ants", "an", "sa", "ANS", "arts", "ns", "ents", "ras", "ats", "als", "anc", "iana", "as", "ons", " scans", "aning", "annels", "ays", "can", "ann"], "i": ["bi", "hi", "pi", "ni", "p", "it", "id", "u", "multi", "qi", "xi", "ji", "v", "si", "ri", "info", "f", "ci", "ui", "ini", "index", "m", "x", "e", "ip", "di", "I", "ai", "o", "gi", "mi", "ii", "b", "li", "j", "oi", "in", "y", "t", "ti"], "a": ["ana", "aw", "ia", "na", "ad", "aaaa", "span", "access", "ba", " fa", "aa", "A", "ha", "pa", "au", "c", "ga", "an", "ata", "sa", "ea", "ae", "ada", "alpha", "af", "b", "ca", "abc", "ac", "qa", "aaa", "fa", "as", "area", "ab", "da", "ma", "va", "aj"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\n\\n\\nimport static java.lang.Math.*;\\nimport static java.util.Arrays.*;\\nimport static java.util.Collections.*;\\n\\n\\npublic class Main{ \\n\\n\\n    static long mod=1000000007;\\n     static int dx[]={1,-1,0,0};\\n      static int dy[]={0,0,1,-1};\\n    // static int dx[]={1,-1,0,0,1,1,-1,-1};\\n    // static int dy[]={0,0,1,-1,1,-1,1,-1}; \\n\\npublic  static void main(String[] args)   throws Exception, IOException{\\n\\n    \\n    Reader sc = new Reader(System.in);\\n    PrintWriter out=new PrintWriter(System.out);\\n\\n//  int n=sc.nextInt();  \\n  int n=sc.nextInt(), m=sc.nextInt();  \\n   int d[] = new int[100];\\n   for( int i=0; i<m; i++ ){\\n    int a=sc.nextInt();\\n    int b=sc.nextInt();\\n    d[a]++; d[b]++;\\n   }\\n   for( int i=1; i<=n; i++ ){\\n    out.println(d[i]);\\n   }\\n\\n    // out.println();\\n    out.flush();\\n}\\n\\nstatic void db(Object... os){\\n\\n    System.err.println(Arrays.deepToString(os));\\n\\n}\\n\\nstatic boolean validpos(int x,int y,int r, int c){\\n    \\n    return x<r && 0<=x && y<c && 0<=y;\\n    \\n}\\n \\nstatic boolean bit(long x,int k){\\n    // weather k-th bit (from right) be one or zero\\n    return  ( 0 < ( (x>>k) & 1 )  )  ? true:false;\\n}\\n\\n}\\n\\nclass XY {\\n    int x,y,d;\\n    XY(int x, int y, int d) {\\n        this.x=x;\\n        this.y=y;\\n        this.d=d;\\n    } \\n}\\n\\nclass P implements Comparable<P>{\\n    int x,y;\\n    P(int x, int y) {\\n        this.x=x;\\n        this.y=y;\\n    } \\n      \\n    public int compareTo(P p){\\n        return x - p.x;\\n    } \\n}\\n\\nclass Reader\\n{ \\n    private BufferedReader x;\\n    private StringTokenizer st;\\n    \\n    public Reader(InputStream in)\\n    {\\n        x = new BufferedReader(new InputStreamReader(in));\\n        st = null;\\n    }\\n    public String nextString() throws IOException\\n    {\\n        while( st==null || !st.hasMoreTokens() )\\n            st = new StringTokenizer(x.readLine());\\n        return st.nextToken();\\n    }\\n    public int nextInt() throws IOException\\n    {\\n        return Integer.parseInt(nextString());\\n    }\\n    public long nextLong() throws IOException\\n    {\\n        return Long.parseLong(nextString());\\n    }\\n    public double nextDouble() throws IOException\\n    {\\n        return Double.parseDouble(nextString());\\n    }\\n}\\n\\n", "target": "57", "substitutes": {"mod": ["div", "module", "mode", "add", "amd", "asm", "ctr", "exp", "comp", "reg", "cmp", "lib", "MOD", "ms", "fun", "var", " Mod", "rad", "Mod", "min", "max", "mods", "iv", "scale", "dec", "aj", "mult"], "dx": ["dm", "xd", "dn", "deb", "dp", "db", "dq", "df", "dB", "dk", "dc", "ds", "di", "sq", "du", "d", "dd", "nw", "dra", "isd", "dl", "dt", " dd", "sup", "cd", "da", "fx", "dh"], "dy": ["dm", "dj", "py", "sd", "xd", "ded", "dn", "deb", "sy", "dp", "dq", "dat", "df", "fd", "dc", "ds", "di", "du", "dad", "md", "dd", "d", "ld", "dl", " dd", "dh"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tString[] strs;\\n\t\ttry (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))){\\n\\n\t\t\tString line = br.readLine();\\n\t\t\tstrs = line.split(\" \");\\n\t\t} catch (IOException e) {\\n\\n\t\t\treturn;\\n\t\t}\\n\t\tint p = Integer.parseInt(strs[0]);\\n\t\tint q = Integer.parseInt(strs[1]);\\n\t\tint r = Integer.parseInt(strs[2]);\\n\\n\t\tint minTime = p + q;\\n\t\tif (minTime > q + r) {\\n\\n\t\t\tminTime = q + r;\\n\t\t}\\n\t\tif (minTime > r + p) {\\n\\n\t\t\tminTime = r + p;\\n\t\t}\\n\t\tSystem.out.println(minTime);\\n\t}\\n}", "target": "89", "substitutes": {"strs": ["trs", "Strs", "STRs", "stringls", "incs", " strls", "STRls", "incves", "STRabs", " strps", "strings", " strabs", "stringp", "Strabs", "Strves", "incp", "stris", "strp", " stris", "STRws", "strws", "strls", "strves", "Strps", "textp", "stringis", "strps", "trves", "textis", " strp", "trp", "strabs", "Strls", "Strws", "trps", "Strp", "stringws", "STRp", "texts"], "line": ["unit", "buffer", "split", "i", "l", "page", "data", "lin", "entry", "value", "header", "source", "block", "row", "input", "nl", "cell", "end", "lines", "letter", "sl", "user", "output", "str", "e", "text", "string", "code", "content", "rule", "result", "b", "LINE", "reader", "write", "in", "response", "log", "file", "lf", "Line", "out"], "p": ["pi", "pc", "u", "po", "v", "pr", "i", "ar", "l", "a", "ep", "point", "z", "h", "P", "cp", "f", "br", "er", "s", "c", "pid", "m", "w", "x", "pe", "e", "ip", "per", "pt", "o", "d", "n", "b", "err", "tp", "j", "time", "k", "pp", "y", "t"], "q": ["u", "qt", "qi", "v", "pr", "i", "l", "qs", "requ", "qu", "Q", "z", "h", "P", "eq", "f", "s", "c", "m", "w", "x", "pe", "quant", "e", "sq", "ry", "d", "n", "b", "qa", "time", "k", "qq", "req", "y", "iq", "t", "query"], "r": ["rar", "ir", "u", "hr", "ro", "rb", "rs", "pr", "v", "i", "ar", "l", "a", "lr", "ur", "rh", "right", "yr", "h", "nr", "er", "f", "br", "s", "c", "m", "or", "w", "x", "e", "ry", "o", "R", "d", "n", "b", "err", "sr", "rr", "j", "k", "rc", "y", "rx", "rt", "range", "t", "ru", "re"], "minTime": ["minOnce", "MinLine", " minClock", "minClock", "rainHour", "maxLine", " minLong", "MinMoney", "mainLong", " minDuration", "minuteTime", "minimumMoney", "openClock", "minDuration", "maxTime", "minForce", "openTimer", "mainSize", " mintime", "maxLength", " minForce", "minuteTimer", " minLength", "rainTime", "minuteDuration", "MinLength", " minSize", "minMoney", "donTime", " minOnce", "minLong", "maxtime", "donSize", "mainForce", " minMoney", "minuteClock", "minuteMoney", " minTimer", "mintime", "minHistory", "minimumTime", "minuteHistory", "openTime", "openOnce", "donLong", "minHour", "donForce", "minuteOnce", "minLength", "minuteHour", "minimumHistory", "MinDuration", "raintime", " minLine", " minHistory", "minLine", "minimumClock", " minHour", "Mintime", "minSize", "mainTime", "minTimer", "MinHour", "MinTime"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\n/**\\n * Created 2017/06/01.\\n */\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    ArrayList<Integer> ary = new ArrayList<>();\\n\\n    for (int i = 0; i < 2; i++) {\\n      int input = sc.nextInt();\\n      ary.add(input);\\n    }\\n\\n    int a = ary.get(0);\\n    int b = ary.get(1);\\n\\n    if (a < b) {\\n      System.out.println(\"a < b\");\\n    } else if (a > b) {\\n      System.out.println(\"a > b\");\\n    } else {\\n      System.out.println(\"a == b\");\\n    }\\n  }\\n}", "target": "179", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "sec", " SC", "sub", "asc", "l", "Sc", "SC", "r", "bc", "cs", "sw", "src", "lc", "ci", "c", " scr", "sp", "acc", "system", "sq", "uc", "soc", "ca", "sys", "se", "ner", "exec", "scan", "osc", "rc", "cc", "sch", "spec", "out", "esc", "cus"], "ary": ["ir", "arc", "ars", "buffer", "hello", "nor", "aries", "arf", "arr", "si", "ARY", "ar", "berry", "ctor", "adr", "io", "iter", "are", "cor", "er", "ity", "air", "inter", "ay", "arya", "iw", "order", "ara", "aire", "arian", "ai", "ry", "ordered", "isco", "aria", "ario", "err", "ray", "rr", "aro", "arry", "early", "address", "ready", "area", "rx", "ery", "error", "primary", "arity", "array"], "i": ["bi", "hi", "api", "pi", "ni", "count", "p", "iu", "u", "id", "multi", "xi", "ji", "v", "si", "io", "z", "f", "ci", "c", "ui", "key", "ini", "index", "m", "x", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "n", "ii", "li", "j", "oi", "in", "chi", "y", "ti"], "input": ["target", "count", "buffer", "integer", "null", "id", "num", "ahead", "data", "request", "io", "source", "length", "f", "ity", "image", "key", "bit", "index", "weight", "output", "base", "config", "Input", "active", "alpha", "inf", "shift", "result", "qa", "step", "type", "number", "address", "inc", "area", "ref", "argument", "pull", "batch"], "a": ["api", "p", "ia", "u", "ad", "access", "auto", "ba", "aa", "A", "f", "au", "c", "ga", "index", "an", "x", "base", "sa", "e", "ae", "ada", "ea", "ai", "alpha", "d", "af", "n", "ca", "ac", "aba", "ama", "fa", "y", "as", "la", "area", "ab", "da", "am", "va", "aj"], "b": ["fb", "bi", "ub", "p", "u", "pb", "abb", "v", "ba", "l", "ib", "db", "bf", "bh", "aa", "be", "h", "lb", "bc", "f", "eb", "c", "w", "x", "base", "e", "o", "d", "n", "B", "nb", "j", "sb", "bb", "y", "wb", "ab", "ob"]}}
{"code": "import java.sql.SQLOutput;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        boolean judge = false;\\n        String s = scan.nextLine();\\n        int len = s.length();\\n        s += s;\\n        String p = scan.nextLine();\\n        for (int i = 0; i < len; i++) {\\n            if (s.substring(i, i + p.length()).equals(p)) judge = true;\\n        }\\n        if (judge) System.out.println(\"Yes\");\\n        else System.out.println(\"No\");\\n    }\\n}\\n\\n", "target": "198", "substitutes": {"scan": ["nn", "cat", "sci", "see", "connect", "walk", "slice", "ser", "gram", "server", "ln", "serv", "span", "run", "search", "sn", "r", "sin", "source", "er", "query", "report", "feed", "an", "system", "read", "skip", "n", "kin", "stat", "sys", "se", "ner", "reader", "in", "parse", "Scan", "clean", "san", "ans", "parser", "look", "sc", "out", "can", "ann", "sync"], "s": ["S", "size", "u", "ins", "ln", "ss", "v", "si", "strings", "l", "a", "qs", "is", "sv", "es", "ls", "r", "start", "sample", "source", "h", "input", "src", "ps", "length", "f", "lines", "south", "sl", "os", "tests", "ds", "c", "m", "w", "sp", "parts", "str", "e", "ssl", "string", "ses", "o", "d", "n", "ns", "g", "small", "services", "se", "su", "sb", "in", "y", "as", "sg", "t"], "len": ["all", "bl", "Len", "nt", "fl", "ln", "span", "lon", "line", "l", "el", "lin", "ls", "part", "z", "h", "lp", "end", "length", "f", "lc", "loc", "sl", "pl", "L", "n", "ld", "limit", "li", "dl", "ner", "pos", "in", "lf", "en", "ll"], "p": ["wp", "api", "pi", "u", "pb", "v", "pr", "jp", "l", "ap", "pre", "point", "part", "h", "P", "lp", "ps", "pa", "cp", "f", "params", "pat", "c", "x", "sp", "pe", "ip", "np", "e", "string", "fp", "param", "o", "n", "vp", "tp", "j", "pp", "t", "bp"], "i": ["hi", "bi", "pi", "ni", "it", "id", "u", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "data", "mini", "uni", "ri", "uli", "start", "init", "z", "info", "abi", "length", "f", "ci", "ui", "ini", "index", "m", "phi", "x", "mu", "uri", "eni", "ip", "e", "di", "I", "ai", "o", "gi", "d", "mi", "ii", "zi", "b", "li", "j", "oi", "in", "chi", "ti", "fi"], "judge": ["silgo", "mergrade", "mangate", "mango", "plugged", "judze", "Judgate", "judger", "manze", "judgrade", "judged", "pluggate", "judgate", "Judce", "Judger", "silge", "judce", "pluggo", "silgate", "purger", "mange", "Judze", "merce", "juge", "Judgrade", "juger", "juging", "judging", "purge", "merge", "plugge", "Judging", "Judge", "judgo", "manged", "mangrade", "purgate", "mance", "jugate", "purging", "silged", "merze"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) throws java.lang.Exception {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        sc.close();\\n        boolean isOdd = true;\\n        String ret = \"Yes\";\\n        for (char c : s.toCharArray()) {\\n            if (isOdd && c == 'L' || !isOdd && c == 'R') {\\n                ret = \"No\";\\n                break;\\n            }\\n            isOdd = !isOdd;\\n        }\\n        System.out.println(ret);\\n    }\\n}\\n", "target": "205", "substitutes": {"sc": ["cl", "enc", "mc", "nc", "sci", "sf", "scope", "pc", "ch", "sec", "ss", "server", " SC", "cur", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "cv", "src", "lc", "dc", "cer", "sp", "system", "ses", "sq", "uc", "sr", "se", "ner", " Sc", "exec", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "cus"], "s": ["S", "sf", "p", "u", "ins", "ss", "v", "si", "i", "strings", "l", "qs", "a", "es", "sv", "is", "ls", "r", "source", "input", "src", "ps", "f", "sl", "os", "m", "e", "sq", "ses", "string", "ssl", "o", "gs", "n", "g", "b", "services", "sets", "sys", "sb", "sg", "t"], "ret": ["ut", "flag", "status", "msg", "nt", "opt", "val", "gt", " Ret", "rep", "tr", "vict", "ext", "res", "std", "part", "bf", "re", "value", "ft", "info", "len", "f", "utf", "alt", "reply", "format", "bit", "output", "str", "text", "rev", "success", "feat", "result", "lit", "RET", "obj", "def", "sb", "det", "txt", "rets", "ref", "rt", "xt", "out", "Ret", "default"], "c": ["cl", "enc", "mc", "nc", "arc", "vc", "p", "C", "u", "ch", "tc", "v", "l", "fc", "cu", "ct", "r", "cs", "char", "f", "loc", "ci", "dc", "lc", "cmp", "at", "e", "ec", "col", "uc", "ce", "code", "o", "d", "n", "b", "abc", "ac", "k", "rc", "cc", "word", "dec", "t", "esc", "unc", "xc", "coll"], "isOdd": [" isUodd", " isUdd", " isEdd", "isEdds", "isDod", "isOdds", "hasOdd", "asOodd", " isEodd", "hasEdds", " isEd", "isObgg", "isOodd", "hasOmd", "hasOdds", "asEdd", " isDod", " isUmm", "isOOmd", "isOsd", "isOmd", "isEgg", "asEodd", "isDodds", "isUd", "isEOdds", "asEdds", "isOd", " isEgg", "asOad", "isOsdds", " isOodd", "isOgg", "isUdd", "isEOad", "isEmd", "isEdd", " isDodds", "isOOdds", "hasEmd", " isDoodd", "isUgg", "isUmd", "asOdds", "isObd", "isDoodd", " isOmm", "hasEodd", "isOad", "isEOodd", "isEmm", " isDodd", "isEd", "isEodd", " isUd", "hasEdd", "isEOdd", "asOdd", "hasOodd", " isOd", " isOgg", "isObodd", " isOdds", "isObdd", "isOsdd", "isUmm", "isOsodd", "isOmm", "isOOdd", "isEad", "isDodd", "isUdds", "asEad", "isOOodd", "isUodd"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int n = in.nextInt();\\n        int[][] a = new int[2][n];\\n        for (int i = 0; i < 2; i++) {\\n            for (int j = 0; j < n; j++) {\\n                a[i][j] = in.nextInt();\\n            }\\n        }\\n\\n        for (int i = 1; i < n; i++) {\\n            a[0][i] += a[0][i - 1];\\n        }\\n\\n        for (int i = n - 2; i >= 0; i--) {\\n            a[1][i] += a[1][i + 1];\\n        }\\n\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            int total = a[0][i] + a[1][i];\\n            ans = Math.max(ans, total);\\n        }\\n\\n        System.out.println(ans);\\n\\n    }\\n}", "target": "140", "substitutes": {"in": ["ic", "isin", "id", "login", "ins", "ln", "din", "ex", "line", "l", "data", "is", "lin", "con", "r", "init", "sin", "win", "input", "In", "er", "s", "user", "c", "ini", "inn", "lib", "image", "an", "x", "nin", "config", "str", "cin", "en", "ai", "inf", "inner", "d", "rin", "b", "kin", "err", "again", "ner", "reader", "pin", "scan", "connection", "log", "bin", "readable", "vin", "as", "fa", "inc", "IN", "out", "thin", "re"], "n": ["nn", "nc", "nt", "p", "size", "u", "num", "nan", "N", "ln", "span", "v", "cn", "l", "out", "sn", "z", "un", "nl", "len", "f", "s", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "ner", "net", "k", "y", "en", "t"], "a": ["all", "ana", "p", "ia", "u", "na", "ad", "access", "auto", "ba", "ar", "l", "data", "ao", "aa", "A", "ha", "aj", "aux", "pa", "tta", "last", "au", "oa", "app", "c", "ga", "s", "at", "an", "ata", "m", "sa", "ae", "ea", "e", "active", "ai", "code", "alpha", "o", "result", "ca", "b", "ac", "wa", "aaa", "work", "sta", "ama", "as", "la", "y", "area", "ab", "da", "ma", "am", "va", "array"], "i": ["bi", "hi", "module", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "ei", "ji", "xi", "v", "anti", "si", "ix", "l", "mini", "name", "ri", "ik", "uli", "start", "io", "init", "info", "z", "abi", "f", "ci", "ui", "ini", "index", "eni", "phi", "x", "mu", "uri", "adi", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "cli", "ii", "b", "zi", "li", "oi", "yi", "y", "ti", "fi"], "j": ["bi", "dj", "jj", "jc", "ni", "p", "oj", "it", "u", "J", "qi", "ji", "v", "jp", "si", "l", "ij", "fr", "ik", "z", "h", "aj", "f", "s", "ui", "c", "m", "x", "e", "ja", "uj", "ie", "q", "o", "d", "g", "ii", "b", "li", "ju", "je", "k", "js", "y", "jl", "t", "jo"], "ans": ["otal", "ana", "ams", "acts", "AN", "ars", "anas", "anned", "aned", "na", "ani", "ins", "aus", "ks", "span", "anon", "lan", " spans", "atan", "offs", "ions", "ations", "eps", "ians", "lines", "s", "nas", "os", "cas", "plan", "ants", "an", "ops", "cons", "ANS", "ran", "anes", "leans", "ents", "ns", "ras", "ats", "anc", "gan", "lang", "outs", "as", "ons", "aning", "amps", "annels", "can", "ann"], "total": ["otal", "complete", "all", "fo", "trans", "nt", "normal", "next", " max", "auto", "average", "part", "partial", "valid", " Total", "info", "percent", "last", "lines", "sum", "tax", "Total", "general", "base", "full", "aid", " totals", "aka", "max", "translation", "major", "pass", " whole", "fat", "als", "scale", "basic", " tot", "ma", "posts"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Iterator;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint data;\\n\t\tint cnt = 0;\\n\t\tint alice = 0;\\n\t\tint bob = 0;\\n\t\tArrayList<Integer> lists = new ArrayList<Integer>();\\n\\n\t\t//\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\\n\t\t//\t\tfor (int list : lists) {\\n\t\t//\t\t\tlists.add(sc.nextInt());\\n\t\t//\t\t}\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tlists.add(sc.nextInt());\\n\t\t}\\n\\n\t\t//\u30bd\u30fc\u30c8\\n\t\tCollections.sort(lists, Collections.reverseOrder());\\n\t\t//\t\tArrays.sort(lists, Collections.reverseOrder());\\n\\n\t\t//\u30bd\u30fc\u30c8\u3057\u305f\u3082\u306e\u3092\u8868\u793a\\n\t\tIterator<Integer> it = lists.iterator();\\n\t\twhile (it.hasNext()) {\\n\t\t\tdata = it.next();\\n\t\t\t//\t\t\tSystem.out.println(data);\\n\t\t\tif (cnt % 2 == 0) {\\n\t\t\t\talice = alice + data;\\n\t\t\t\tcnt++;\\n\t\t\t} else {\\n\t\t\t\tbob = bob + data;\\n\t\t\t\tcnt++;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(alice - bob);\\n\t}\\n\\n}\\n", "target": "132", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tstatic int INF = Integer.MAX_VALUE / 2;\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\\n\t\tint[][] adj = new int[2][N];\\n\\n\t\tfor(int i = 0; i < 2; i++) {\\n\t\t\tfor(int j = 0; j < N; j++) {\\n\t\t\t\tadj[i][j] = sc.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(dfs(adj, 0, 0, N));\\n\t}\\n\\n\tstatic int dfs(int[][] adj, int i, int j, int N) {\\n\t\tif(i == 1 && j >= N - 1) return adj[i][j];\\n\\n\t\tif(i == 1 && j < N-1) {\\n\t\t\treturn adj[i][j] + dfs(adj, i, j+1, N);\\n\t\t} else if(i==0 && j >= N-1) {\\n\t\t\treturn adj[i][j] + dfs(adj, i+1, j, N);\\n\t\t} else {\\n\t\t\treturn adj[i][j] + Math.max(dfs(adj, i+1, j, N), dfs(adj, i, j+1, N));\\n\t\t}\\n\t}\\n}", "target": "140", "substitutes": {"INF": [" inF", " inf", "inI", "InF", " inFF", "InFF", "INFF", "inF", " inI", "inf", "inFF", "INf", "InI", "INI", "Inf"], "sc": ["cl", "enc", "sche", "sci", "nc", "sf", "scope", "pc", "ch", "ss", " SC", "si", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "cor", "lc", "ci", "c", "cer", " scr", "sp", "ec", "system", "sq", "uc", "g", "sr", "ca", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "coll", "out", "esc", "cus", "sync"], "N": ["MN", "Len", "S", "Num", "IN", "No", "NA", "NL", "C", "Part", "NI", "J", "M", "CN", " n", "Size", "U", "Y", "Node", "F", "Network", "Q", "NN", "P", "GN", "Wh", "Na", "NO", "Ni", "I", "T", "II", "NC", "NP", "L", "R", "n", "B", "NM", "network", "Ne", "V", "CNN", "K", "NB", "NOR", "D", "NT", "H", "O", "Z", "NS", "Ns", "G", "NV", "NE", "NUM", "NG", "Name", "W", "E", "X"], "adj": ["ap", "diff", "info", "app", "ax", "acc", "ijk", "adjust", "g", "nb", "frac", "update", "nav", "area", "aj", "bi", "py", "dj", "p", "adv", "next", "ad", "bj", "admin", "data", "dat", "block", "z", "nl", "temp", "order", "index", "np", "note", "adi", "code", "n", "network", "js", "jac", "ann", "prefix", "patch", "ani", "ji", "span", "arr", "extra", "adr", "gap", "wx", "di", "rev", "md", "ang", "atom", "err", "obj", "cache", "ind", "bp", "append", "wp", "module", "layout", "api", "jp", "attr", "style", "config", "ja", "abc", "gov", "fake"], "i": ["bi", "api", "pi", "ori", "ni", "iu", "p", "ami", "it", "u", "id", "qi", "iii", "ji", "xi", "v", "anti", "si", "ix", "l", "a", "mini", "is", "ik", "ri", "io", "z", "h", "info", "f", "ci", "ui", "ini", "eni", "x", "uri", "di", "ip", "e", "I", "ie", "ai", "gi", "d", "mi", "n", "cli", "ii", "zi", "b", "li", "oi", "yi", "in", "chi", "y", "ind", "ti", "fi"], "j": ["dj", "jj", "jc", "ni", "p", "oj", "u", "it", "J", "qi", "bj", "ji", "next", "xi", "v", "jp", "si", "l", "ij", "fr", "ik", "part", "jon", "z", "h", "aj", "ny", "f", "br", "ui", "key", "ne", "x", "e", "note", "jet", "ja", "I", "uj", "other", "ie", "q", "o", "jit", "d", "n", "g", "ii", "b", "dy", "li", "je", "js", "obj", "k", "job", "y", "jl", "jen", "ind", "jo"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String... args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        char[] S = scanner.next().toCharArray();\\n\\n        // \u771f\u9762\u76ee\u306b\u66f8\u304f\\n        int maxCount = 0;\\n        for (int i = 0, currentCnt = 0; i < S.length; i++) {\\n            if (S[i] == 'R') {\\n                currentCnt++;\\n\\n                if (maxCount < currentCnt) {\\n                    maxCount = currentCnt;\\n                }\\n            } else {\\n                if (maxCount < currentCnt) {\\n                    maxCount = currentCnt;\\n                }\\n                currentCnt = 0;\\n            }\\n        }\\n\\n        System.out.println(maxCount);\\n    }\\n}\\n", "target": "141", "substitutes": {"scanner": [" scaner", " scanener", "Scaninner", "anner", "caner", "caninner", " scanter", "scanter", "annter", "annener", "scanener", "Scanener", "anninner", "scaner", "canener", "Scanter", "Scaner", "annner", "canner", "Scanner", "scaninner"], "S": [" R", "C", "N", " L", " V", " CHAR", "data", "Array", " SA", "A", "CHAR", " source", " C", " data", " s", " ans", " ASCII", "I", " B", " A", "L", " I", "result", " text", " N"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main\\n{\\n    static class Reader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer st;\\n \\n\t\tpublic Reader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n \\n\t\tString next() {\\n\t\t\twhile (st == null || !st.hasMoreElements()) {\\n\t\t\t\ttry {\\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\te.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n \\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n \\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n \\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n \\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n \\n\t}\\n    static class Ele implements Comparable<Ele> \\n    {  \\n        public int x,y;  \\n        Ele(int x,int y) \\n        {  \\n            this.x=x;this.y=y; \\n        }  \\n        public int compareTo(Ele ob) {  \\n        if(ob.x!=x)return x-ob.x;\\n        return this.y-ob.y;  \\n        }   \\n    }\\n    int a[][];int b[][];\\n    \\n    long gcd(long a,long b)\\n    {\\n        long min=Math.min(a,b);\\n        long max=Math.max(a,b);\\n        while (max%min!=0)\\n        {\\n            a=max%min;\\n            max=min;min=a;\\n        }\\n        return min;\\n    }\\n\tpublic static void main(String[] args) throws IOException \\n\t{\\n\t\tReader sc=new Reader();//Solution G=new Solution();\\n\t\tPrintWriter o = new PrintWriter(System.out);\\n\t\tint t=1;\\n\t\t//int t=sc.nextInt();\\n\t\t\\n\t\tint n,m,y0,x0,y1,x1,x2,y2,s0,s2;int a[],b[],in[],in1[];\\n\t\tlong k,l;boolean b1[],b2;String s1[],ss,s;\\n\t\t//long l;long a[]; \\n\t\tArrayList<ArrayList<Integer>> ll=new ArrayList<>();\\n\t\tArrayList<Integer> a1=new ArrayList<>();\\n\t\tArrayList<Integer> a2=new ArrayList<>();\\n\t\tArrayList<Integer> a3=new ArrayList<>();\\n\t\tArrayDeque<Integer> deq=new ArrayDeque<>();\\n\t\tTreeSet<Integer> h0=new TreeSet<>();\\n\t\tTreeSet<Integer> h1=new TreeSet<>();\\n\t\tHashMap<Integer,Integer> h=new HashMap<>();\\n\t\ttry{\\n\t\twhile (t-->0)\\n\t\t{\\n\t\t    ss=sc.next();s=sc.next();n=s.length();\\n\t\t    for (int i=0;i<ss.length()-s.length()+1;i++)\\n\t\t    {\\n\t\t        x0=0;\\n\t\t        for (int j=0;j<s.length();j++)\\n\t\t        {\\n\t\t            if (s.charAt(j)!=ss.charAt(i+j))\\n\t\t            x0++;\\n\t\t        }\\n\t\t        n=Math.min(n,x0);\\n\t\t    }\\n\t\t    o.println(n);\\n\t\t    //o.println(s);\\n\t\t    //o.println();\\n\t\t    //o.println();\\n\t\t    //o.println(h);\\n\t\t    //o.println(x2);\\n\t\t    //o.println();\\n\t\t    h0.clear();ll.clear();a1.clear();a2.clear();h1.clear();\\n\t\t}\\n\t\t}\\n\t\tcatch (Throwable e)\\n\t\t{\\n\t\t    e.printStackTrace();\\n\t\t}\\n\t\t//o.println(\"HI\");\\n\t\t\\n        o.flush();\\n        o.close();\\n\t}\\n}", "target": "158", "substitutes": {"br": ["bl", "bel", "bed", "ber", "p", "hr", "rb", "ch", "browser", "tr", "next", "pr", "arr", "db", "fr", "ur", "r", "bh", "be", "bridge", "bc", "fe", "src", "ler", "bs", "dr", "orb", "mr", "BR", "raf", "sp", "bro", "img", "pl", "Br", "fore", "rest", "sr", "err", "gr", "cro", "buf", "sb", "bb", "box", "bt", "cr", "bar", "ab", "rt", "ru", "boot"], "st": [" St", "cl", "ut", "bl", "ste", "inst", "nt", "sth", "ST", "nd", "stable", "stack", "ss", "pr", "const", "l", "STR", "ct", "sn", "std", "r", "fr", "start", "sign", "sv", "store", "ft", "fe", "sw", "src", "sl", "pe", "sp", "sa", "e", "est", "string", "ist", "pt", "stri", "Str", "rest", " est", "ld", "St", "se", "obj", "sb", "storage", "sta", "step", "ast", "sts", "rd", "art", "struct", "cr", "stop", "ost", " ST", "rt", "t", "strip"], "str": ["bl", "cl", "div", "status", "inst", "p", "wr", "val", "id", "hr", "next", "tr", "pr", "arr", "strings", "url", "line", "out", "l", "data", "pre", "fr", "name", "r", "STR", "entry", "exp", "z", "temp", "char", "f", "dr", "s", "sl", "c", "vis", "sp", "e", "text", "string", "plain", "Str", "inner", "n", "sr", "err", "j", "obj", "in", "doc", "t"], "x": ["this", "on", "dx", "p", "xp", "id", "u", "px", "to", "xi", "ex", "v", "i", "ix", "l", "name", "right", "value", "yx", "z", "h", "f", "width", "length", "image", "c", "ax", "key", "wx", "index", "m", "w", "e", "left", "xx", "code", "o", "d", "n", "dy", "tx", "time", "xs", "type", "xy", "rx", "xt", "xc", "X"], "y": ["ady", "yo", "py", "ky", "p", "id", "yp", "sky", "sy", "wy", "oy", "ch", "vy", "i", "ya", "l", "Y", "yt", "ies", "z", "yan", "ny", "f", "ay", "c", "index", "ym", "w", "zy", "yn", "ty", "e", "ry", "o", "iy", "d", "n", "yl", "dy", "ii", "year", "yy", "j", "ye", "yi", "type", "xy", "ey", "cy", "t"], "ob": ["bl", "Ob", "fb", "ub", "oc", "obs", "bug", "obo", "abb", "ro", "od", "oy", "obb", "rob", "om", "nob", "ib", "db", "cb", "oid", "obi", "co", "lb", "app", "eb", "loc", "orb", "lib", "or", "bo", "base", "ie", "ore", "o", "abs", "op", "object", "obj", "pos", "sb", "bb", "OB", "rib", "lab", "so", "obe", "ref", "ab", "mob"], "a": ["ana", "count", "p", "ia", "na", "ad", "auto", "i", "ba", "aa", "A", "aj", "pa", "f", "au", "c", "ga", "index", "m", "an", "w", "ae", "ea", "e", "sa", "aka", "alpha", "ai", "d", "n", "ca", "ac", "wa", "sta", "fa", "la", "as", "asa", "ab", "da", "area", "ma", "am", "va", "array"], "b": ["fb", "bi", "p", "mb", "abb", "rb", "v", "i", "ba", "l", "ib", "db", "cb", "r", "aa", "be", "z", "h", "A", "lb", "bs", "f", "s", "c", "m", "base", "e", "o", "d", "n", "g", "B", "nb", "k", "sb", "bb", "as", "wb", "ab"], "min": ["initial", "val", "size", "mins", "ba", "diff", "init", "width", "ax", "key", "drop", "rand", "left", "state", "ca", "mod", "area", "aj", "none", "on", "p", "id", "minimum", "next", "i", "version", "mini", "data", "name", "value", "first", "f", "sum", "index", "an", "base", "sa", "d", "shift", "n", "pos", "scale", "mid", "off", "default", "div", "unit", "don", "count", "change", "na", "span", "run", "average", "sign", "part", "partial", "sin", "lower", "fe", "oa", "weight", "between", "ai", "only", "step", "in", "mean", "ill", "close", "Min", "act", "low", "core", "sub", "sort", "start", "iss", "un", "c", "m", "action", "ra", "MIN", "skip", "small", "current", "from", "range", "sol"], "max": ["head", "total", "size", "con", "diff", "best", "az", "ax", "depth", "pop", "rand", "alpha", "ca", "mod", "inc", "pad", "aj", "mult", "p", "id", "next", "ad", "name", "power", "value", "end", "sum", "index", "an", "mad", "base", "Max", "plus", "n", "no", "scale", "ma", "default", "div", "count", "patch", "na", "add", "point", "right", "cut", "between", "rank", "form", "step", "mean", "wrap", "MAX", "dec", "da", "cache", "act", "out", "can", "conf", "parent", "cat", "last", "c", "action", "ra", "ac", "from", "range"], "sc": ["cl", " mc", "mc", " ser", "gram", "ro", "rs", " SC", " rc", "Sc", "SC", " res", "RC", "bc", "c", " scr", "or", " pars", "ram", "gr", "ner", " Sc", " cr", "rc", "cr", " sp", "proc", " acc"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\tString st = t.substring(0,s.length());\\n\t\tif (s.matches(st) && s.length() + 1 == t.length()) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\t\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "137", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tint A = scan.nextInt();\\n\t\tint B = scan.nextInt();\\n\t\tint C = scan.nextInt();\\n\t\tint D = scan.nextInt();\\n\\n\t\twhile (true) {\\n\t\t\tC = atk(B, C);\\n\t\t\tif (C <= 0) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\tbreak;\\n\t\t\t} else {\\n\t\t\t\tA = atk(D, A);\\n\t\t\t\tif (A <= 0) {\\n\t\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\\n\t}\\n\\n\tpublic static int atk(int atk, int hp) {\\n\\n\t\thp -= atk;\\n\\n\t\treturn hp;\\n\t}\\n\\n}\\n\\n", "target": "186", "substitutes": {"scan": ["all", "nn", "cat", "see", "connect", "watch", "walk", "bug", "slice", "serv", "ln", "view", "run", "wan", "search", "l", "fan", "sign", "r", "ban", "win", "row", "query", "gen", "conn", "report", "feed", "plan", "an", "x", "chan", "ry", "skip", "read", "n", "stat", "kin", "ignore", "se", "ner", "reader", "pin", "in", "parse", "Scan", "clean", "san", "ans", "pan", "parser", "look", "sc", "out", "can", "ann", "sync"], "A": ["AD", "S", "AN", "AM", "NA", "Ca", "AY", "AE", "An", "N", "AA", "M", "ANC", "CC", "LA", "a", "As", "U", "Y", "FA", "F", "E", "BA", "mA", "AP", "P", "Ma", "SA", "PA", "EA", "Area", "Na", "API", "T", "I", "KA", "Ab", "HA", "Alpha", "Ar", "V", "AF", "AC", "H", "CA", "AB", "X"], "B": ["Bs", "Ca", "BF", "N", "M", "U", "Y", "X", "F", "WB", "BA", "Q", "P", "BC", "BB", "CB", "T", "I", "L", "R", "b", "BE", "V", "K", "AB", "OB", "GB", "H", "O", "G", "W", "E", "LB", "DB"], "C": ["Can", "Cu", "S", "EC", "CI", "Co", "Ca", "N", "M", "CC", "CF", "VC", "U", "Y", "CE", "CR", "F", "Q", "Con", "CL", "P", "BC", "c", "Ch", "CD", "T", "I", "NC", "CM", "CP", "L", "R", "Cs", "V", "DC", "K", "AC", "H", "O", "CA", "G", "Cl", "JC", "W", "E", "X"], "D": ["AD", "DH", "S", "N", "M", "DA", "U", "Y", "X", "F", "Q", "P", "CD", "DI", "T", "I", "DF", "L", "d", "R", "Dou", "Ds", "V", "DD", "BD", "K", "DC", "H", "O", "Z", "DS", "DP", "G", "W", "E", "DB"], "atk": ["artck", "antk", " atok", " atv", "atok", "attok", "attke", "rtk", "artks", " atsk", " atkn", "attak", "gatak", " atak", "ATck", "AtK", "ATK", "Atk", " atck", "artka", "artk", "gatok", "gatk", "attk", " atka", "antks", "atak", "rtke", "attq", " atq", "Atsk", " atK", "atv", "antck", "ietkn", "ietv", " atks", "attK", "antka", "atke", "ATke", " atke", "ATk", "atq", "atks", "ietke", "atK", "atkn", "rtkn", "gatq", "atsk", "atck", "rtv", "atka", "attsk", "ietk", "attck"], "hp": ["php", "wp", "imp", "hop", "p", "http", "dp", "mph", "jp", "path", " gp", "ib", "uh", "rh", "ht", "bh", "ph", "h", "P", "lp", "ha", "cp", "pa", "pai", "pkg", " p", "np", "ip", "fp", "eth", "ai", "ahi", " xp", "hs", "gp", "hw", "hy", "padding", "foo", "cpp", "tp", "hm", "work", "pp", "phy", "HP", "bp"]}}
{"code": "\\n\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        PrintWriter out = new PrintWriter(System.out);\\n        Scanner sc = new Scanner(System.in);\\n        Task task = new Task();\\n        task.solve(sc, out);\\n        out.flush();\\n        sc.close();\\n    }\\n    static class Task{\\n        public void solve(Scanner sc, PrintWriter out){\\n            int first = nint(sc);\\n            int last = nint(sc);\\n            int count=0;\\n            for (int i = first; i <= last; i++){\\n                String num = String.valueOf(i);\\n                int strLength = num.length();\\n                boolean circle = true;\\n                for (int j=0; j<strLength/2; j++){\\n                    if (num.charAt(j) != num.charAt(strLength-j-1)){\\n                        circle = false;\\n                    }\\n                }\\n                if (circle){\\n                    count++;\\n                }\\n            }\\n            out.println(count);\\n        }\\n    }\\n\\n    static int nint(Scanner sc){\\n        return Integer.parseInt(sc.next());\\n    }\\n    static long nlong(Scanner sc){\\n        return Long.parseLong(sc.next());\\n    }\\n    static double ndouble(Scanner sc){\\n        return Double.parseDouble(sc.next());\\n    }\\n    static float nfloat(Scanner sc){\\n        return Float.parseFloat(sc.next());\\n    }\\n    static String nstr(Scanner sc){\\n        return  String.valueOf(sc.next());\\n    }\\n    static long[] longLine(Scanner sc, int size){\\n        long[] lLine = new long[size];\\n        for (int i = 0; i < size; i++) {\\n            lLine[i] = nlong(sc);\\n        }\\n        return lLine;\\n    }\\n    static int[] intLine(Scanner sc, int size){\\n        int[] iLine = new int[size];\\n        for (int i = 0; i < size; i++) {\\n            iLine[i] = nint(sc);\\n        }\\n        return iLine;\\n    }\\n    static String[] strLine(Scanner sc, int size){\\n        String[] strLine = new String[size];\\n        for (int i = 0; i < size; i++) {\\n            strLine[i] = nstr(sc);\\n        }\\n        return strLine;\\n    }\\n}", "target": "104", "substitutes": {"out": ["this", "conf", "target", "client", "scope", "buffer", "ins", "ch", "server", "ex", "ext", "path", "pool", "data", "png", "screen", "name", "r", "can", "io", "source", "timeout", "temp", "input", "channel", "In", "conn", "outer", "report", "c", "ini", "key", "user", "check", "password", "output", "w", "OUT", "config", "list", "str", "writer", "string", "raw", "Out", "o", "cli", "result", "err", "again", "pass", "write", "flush", "exec", "up", "work", "in", "log", "bin", "file", "outs", "word", "bar", "copy", "cache", "error", "IN", "esc", "console", "builder", "sync"], "sc": ["nc", "go", "slice", "com", "fc", "screen", "exp", "scl", "cs", "co", "sw", "channel", "set", "soc", "cli", "ca", "exec", "cont", "script", "ec", "console", "ctx", "cus", "server", "tc", "Sc", "ct", "bc", "gg", "conn", "ci", "contract", "kr", "ner", "anc", "parse", "isc", "osc", "usc", "squ", "scene", "cl", "cam", "scope", "pc", "sec", "cur", "sh", "SC", "cv", "de", "sp", "system", "uc", "context", "sr", " Sc", "sel", "sch", "ced", "sync", "coll", "sche", "mc", "sci", "sk", "sf", "core", "ka", "ch", "ss", "asc", "path", "desc", "src", "lc", "loc", "dc", "c", "cer", "config", "cle", "scan", "rc", "cc", "cr", "cms", "proc", "spec", "esc"], "task": ["parent", "target", "unit", "client", "test", "message", "it", "project", "tc", "server", "service", "run", "Task", "course", "ask", "block", "event", "channel", "app", "session", "t", "output", "action", "process", "system", "text", "result", "object", "tx", "work", "exec", "in", "thread", "job", "manager", "worker", "script", "proc", "sync"], "first": ["head", "parent", "second", "initial", "now", "id", "one", "next", "split", "data", "name", "start", "lower", "length", "First", "index", "depth", "full", "st", "left", "max", "code", "min", "primary", "prev", "zero", "only", "latest", "current", "top", "master", "from", "front"], "last": ["all", "total", "second", "p", "id", "one", "next", "nd", "old", "right", "start", "end", "length", "after", "base", "full", "Last", "st", "max", "code", "min", "prev", "worst", "cycle", "latest", "from", "so", "later", "needed"], "count": ["counter", "div", "total", "seq", "offset", "low", "age", "Count", "test", "now", "id", "keep", "cur", "pool", "fr", "start", "info", "len", "collection", "char", "length", "c", "sum", "key", "check", "weight", "index", "depth", "list", "base", "carry", "col", "left", "max", "code", "n", "ignore", "year", "cycle", "loop", "child", "force", "found", "number", "cache", "coll"], "i": ["this", "slice", "qi", "multi", "l", "a", "uni", "uli", "r", "get", "s", "key", "format", "phi", "uri", "ie", "o", "g", "ii", "_", "type", "bi", "ni", "iu", "p", "id", "si", "ix", "io", "h", "z", "f", "ci", "ui", "ini", "index", "eni", "d", "n", "yi", "my", "fi", "pattern", "pi", "it", "ji", "xi", "v", "ik", "x", "di", "I", "ai", "q", "gi", "b", "in", "y", "ti", "hi", "im", "ori", "u", "is", "ri", "start", "c", "m", "ip", "e", "mi", "li", "k", "oi"], "num": ["nn", "um", "mom", "unit", "Num", "mon", "u", "na", "nu", "multi", "om", "nam", "rum", "uni", "name", "con", "ng", "nm", "home", "nr", "f", "fn", "gen", "ui", "sum", "x", "mu", "umi", "np", "str", "img", "text", "string", "ram", "ul", "nom", "n", "roman", "su", "buf", "norm", "mn", "bin", "tri", "number", "inc", "missing", "NUM", "conv", "ru"], "strLength": ["expOffset", "StrLength", "arrSize", "StrSl", "striSl", "strWidth", " strlength", "StrSize", "STRWidth", "strSize", "strSl", "STRLen", "strLen", "StrWidth", "STRSl", "StrLen", "StrOffset", " strOffset", "STRLength", " strSize", "explength", "expLen", "striWidth", "striLen", "arrLength", "arrLen", " strLen", "strOffset", "expLength", "arrlength", "Strlength", "striLength", "strlength"], "j": ["dj", "jj", "jc", "ni", "p", "adj", "it", "u", "J", "qi", "ji", "v", "jp", "pr", "ix", "l", "ij", "fr", "r", "z", "h", "aj", "length", "f", "br", "c", "key", "x", "str", "ja", "uj", "ie", "o", "d", "n", "g", "ii", "b", "li", "js", "k", "obj", "y", "off", "jl", "ind", "jo"], "circle": ["round", "quad", "eye", "spin", "chain", " square", "scope", "radius", " Circle", " circles", "span", "year", "le", "circ", "line", "monkey", "center", "pie", "sign", "cross", "roll", "nr", "br", " angle", "c", "style", "sp", "left", "pocket", "rule", "fold", "loop", " arc", "ring", "cycle", "ignore", "edge", "inline", " radius", " pie", "angle", "parse", "tree", "wrap", "area", "shape", "square", "ball", "coll", " ring"], "size": ["complete", "eng", "empty", "go", "Size", "screen", "init", "any", "col", "max", "set", "ize", "iz", "type", "group", "negative", "address", "sized", "mode", "name", "block", "end", "length", "SIZE", "sum", "send", "model", "handle", "large", "like", "global", "grade", "code", "content", "body", "time", "scale", "file", "grow", "number", "enc", "second", "sec", "sh", "extra", "use", "cm", "x", "cycle", "form", "shape", "capacity", "cache", "close", "sync", "chain", "class", "core", "sort", "loc", "external", "c", "style", "zero", "small", "flow", "engine", "six"], "lLine": [" lUrl", " lCell", "cLo", "cLine", "lLink", "cEnc", " lEnc", "lSync", "llLo", "longWr", "lLo", "iEnc", "LEntry", "LSync", "llEntry", "longEntry", " lLo", "iUrl", "cUrl", "lWr", "llLin", "lEnc", "llWr", "llCell", "longLine", "lEntry", "cLin", "lCell", "lUrl", "longSync", "lLin", "cLink", "llLine", "LLine", "LWr", "llSync", " lLin", " lLink", "cCell", "iLink"], "iLine": ["iiCell", "iLin", "intFrame", " iPass", "iiLin", "iFrame", "iLo", "iBand", "cLine", " iIn", "intLine", "cPass", "liDi", "iBlock", "iiPass", "ILo", "liLo", "IIn", "iCell", " iDi", "lFrame", "iiLine", "liIn", "iPass", "iIn", "intBlock", " iFrame", "lBand", " iBand", "cLin", " iLin", " iBlock", "IDi", "iDi", " iCell", "liLine", "intBand", "ILine", "cCell", "lBlock", " iLo"], "strLine": ["strEntry", "frline", "stringLine", "trBase", "trLine", " strEntry", "brLin", "StrLine", "StrLin", "stringBase", "strLin", "stringEntry", "StrOut", "strBase", "brline", "frOut", "Strline", "trNode", "brOut", "brLine", " strNode", "frLin", "strNode", "frLine", "strOut", "stringNode", "trEntry", " strBase", "strline"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\n/**\\n * @author varun on 7/1/2018\\n * @project CompetitiveProgramming\\n */\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n        int[] arr = new int[N];\\n        for (int i = 0; i < N; ++i) arr[i] = scanner.nextInt();\\n        Arrays.sort(arr);\\n        System.out.println(arr[N-1] - arr[0]);\\n    }\\n}\\n", "target": "214", "substitutes": {"scanner": [" scaner", "Scaninner", "scanker", "caner", "scanister", "canter", "canator", "caninner", " scanter", "scanter", " scanator", "serning", "Scanister", "serner", "canker", "scaner", "serker", "Scanker", " scanning", "scanning", "scanator", "Scanter", " scanister", "Scaner", "planinner", "planker", " scanker", "Scanator", "Scanning", "serister", "planer", "canner", "Scanner", "planner", "scaninner"], "N": ["MN", "Len", "S", "Num", "No", "NA", "Count", "C", "M", " n", "Size", "Y", "Node", "F", "NN", "Number", "Q", "P", "T", "I", "Ni", "NC", "L", "R", "n", "B", "NR", "Ne", "V", "NB", "K", "Length", "ND", "D", "NT", "H", "O", "NS", "Z", "Ns", "NE", "NI", "X"], "arr": ["div", "enc", "cat", "py", "arc", "vec", "val", "dict", "na", "stack", "pr", "ar", "data", "db", "Array", "fr", "el", "r", "dat", "adr", "aa", "iter", "attr", "aj", "app", "dr", "air", "br", "au", "inter", "order", "var", "list", "img", "abc", "str", "arch", "n", "prev", "err", "dim", "Ar", "rr", "ignore", "ray", "aaa", "frac", "gr", "att", "parse", "av", "our", "bar", "cache", "batch", "act", "array", "ann", "coll"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "slice", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "ri", "part", "start", "io", "z", "h", "abi", "f", "ci", "ui", "c", "key", "index", "x", "mu", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "b", "zi", "li", "j", "k", "oi", "in", "chi", "y", "ind", "t", "ti"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String[] args)throws IOException{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\\n\t\tString str = br.readLine();\\n\t\\n\t\tString[] strAry = str.split(\" \");\\n\\n\t\tint ar[] = new int[5];\\n\\n\t\tfor(int i=0;i<5;i++){\\n\t\t\tar[i] = Integer.parseInt(strAry[i]);\\n\t\t}\\n\\n\t\tint W = ar[0];\\n\t\tint H = ar[1];\\n\t\tint x = ar[2];\\n\t\tint y = ar[3];\\n\t\tint r = ar[4];\\n\\n\t\tif( x >= r && x <= W-r){\\n\t\t\t\tif( y >= r && y <= H-r){\\n\t\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\t}else{\\n\t\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\t}\\n\t\t}else{\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t}\\n}", "target": "171", "substitutes": {"br": ["bl", "ber", "nor", "hr", "rb", "browser", "tr", "arr", "res", "fr", "yr", "io", "bridge", "bc", "nr", "bs", "er", "dr", "report", "orb", "mr", "BR", "img", "bro", "HR", "Br", "abs", "sr", "b", "err", "gr", "reader", "buf", "ocr", "bb", "cr", "bar", "out"], "str": ["hr", "tr", "pr", "arr", "res", "line", "STR", "url", "data", "fr", "entry", "h", "iter", "input", "char", "er", "f", "s", "dr", "w", "sp", "st", "text", "string", "kr", "stri", "Str", "sr", "b", "err", "obj", "in", "txt", "cr", "spec", "out", "strip"], "strAry": ["strArys", "strArury", "rAry", "strAsry", "strArry", "rAsrys", "strAsrys", "StrAry", "strPRY", "strPury", "rArys", "strArries", "rAries", "StrArrys", "rAri", "strArri", "StrAury", "strAury", "strAries", "StrArry", "strPry", "rAsries", "strAsries", "strArrys", "strARY", "StrArys", "strAri", "strAllury", "strAllry", "strAsri", "strAllrys", "StrArRY", "StrArury", "strArRY", "StrARY", "strAllRY", "rAsri", "rAsry", "strPrys"], "ar": ["rar", "ir", "arc", "ars", "AR", "p", "arm", "par", "ard", "arin", "v", "arr", "jar", "a", "l", "Array", "yr", "adr", "car", "dar", " array", "iter", "are", "ear", "ler", "er", "air", "f", "inter", "c", "gar", "star", "at", "or", "var", "list", "ara", "per", "arp", "err", "Ar", "har", "ner", "reader", "iar", "aro", "parse", "ari", "art", "area", " arr", "war", "tar", "far", "array"], "i": ["bi", "hi", "pi", "p", "slice", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "l", "a", "data", "ri", "part", "start", "io", "h", "z", "abi", "info", "temp", "f", "ci", "ui", "c", "key", "ini", "index", "w", "mu", "uri", "e", "di", "I", "ai", "o", "gi", "d", "mi", "n", "ii", "b", "zi", "li", "j", "k", "oi", "in", "ti"], "W": ["GW", "S", "We", "C", "N", "M", "U", "Y", "F", "Q", "h", "VW", "P", "A", "Wh", "Width", " w", "w", "T", "I", "MW", "L", "R", "B", "V", "K", "D", "O", "Z", "G", "Sw", "E", "X"], "H": ["Ha", "C", " h", "J", "N", "M", "CH", "HY", "U", "Y", "SH", "F", "rh", "Q", "h", "P", "A", "T", "I", "RH", "L", "R", "B", "HH", "V", "K", "D", "Sh", "Z", "O", "G", "E", "X"], "x": ["on", "p", "xp", "u", "id", "one", "xi", "wy", "ex", "v", "ix", "l", "a", "X", "yx", "z", "h", "f", "c", "ax", "wx", "index", "m", "w", "e", "ww", "o", "d", "n", "b", "wa", "_", "xs", "rx", "en", "t", "xx"], "y": ["yo", "py", "p", "gy", "u", "sy", "xi", "oy", "v", "vy", "ya", "l", "a", "Y", "z", "h", "ny", "f", "s", "ay", "c", "m", "w", "zy", "e", "ry", "o", "iy", "d", "n", "hy", "b", "dy", "yy", "j", "yi", "ey", "cy", "t", "xx"], "r": ["rar", "ir", "p", "rate", "u", "nor", "rb", "rs", "pr", "v", "l", "lr", "fr", "ur", "yr", "right", "rh", "h", "z", "nr", "er", "f", "mr", "c", "m", "or", "w", "rw", "e", "ra", "kr", "rg", "rf", "R", "d", "n", "sr", "err", "b", "rr", "k", "rd", "rc", "cr", "rl", "rx", "range", "t", "ru", "re"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Main main = new Main();\\n        main.solve(args);\\n    }\\n\\n    public void solve(String[] args) {\\n        MyScanner scanner = new MyScanner();\\n\\n        // \u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3053\u3053\u304b\u3089\\n        int ans = 0 ;\\n        String S = scanner.next();\\n        String T = scanner.next();\\n        \\n\t\tfor(int i = 0; i<3; i++) {\\n\t\t\tif(S.charAt(i)==T.charAt(i))\\n\t\t\t\tans++;\\n\t\t}\\n\\n        System.out.println(ans);\\n        \\n        // \u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3053\u3053\u307e\u3067\\n\\n    }\\n\\n    private class MyScanner {\\n        String[] s;\\n        int i;\\n        BufferedReader br;\\n        String reg = \" \";\\n        MyScanner () {\\n            s = new String[0];\\n            i = 0;\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n        public String next() {\\n            try {\\n                if (i < s.length) return s[i++];\\n                String line = br.readLine();\\n                while (line.equals(\"\")) {line = br.readLine();}\\n                s = line.split(reg, 0);\\n                i = 0;return s[i++];\\n            } catch (Exception e) {e.printStackTrace();}\\n            return null;\\n        }\\n        public int nextInt() {\\n            try {return Integer.parseInt(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n        public double nextDouble() {\\n            try {return Double.parseDouble(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n        public long nextLong()  {\\n            try {return Long.parseLong(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n    }\\n}\\n", "target": "243", "substitutes": {"scanner": ["Scaner", " scaner", "Scanler", "Scanning", "canler", "caner", "scaner", "canning", "canner", " scanning", "Scanner", "scanning", "scanler", " scanler"]}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tlong N = sc.nextLong();\\n\\n\t\tlong last = 0;\\n\\n\t\tlong i = 1;\\n\t\tlong sqrt_N = (long)Math.sqrt(N);\\n\t\twhile(i <= sqrt_N){\\n\t\t\tif(N % i == 0){\\n\t\t\t\tlast = N / i;\\n\t\t\t}\\n\t\t\ti++;\\n\t\t}\\n\\n\t\tSystem.out.println(String.valueOf(last).length());\\n\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "61", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "nt", "go", "pc", "class", "ch", "tc", "ss", "server", "cur", "sh", "l", "fc", "Sc", "SC", "ct", "cb", "bc", "cs", "sw", "src", "lc", "c", "cer", "sp", "st", "system", "sq", "uc", "sem", "se", "ner", "anc", "exec", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "N": ["Len", "S", "New", "Num", "No", "NA", "Count", "NL", "size", "C", "M", " n", "Size", "Y", "F", "Number", "NN", "Q", "P", "length", "NH", "First", "NO", "T", "I", "Ni", "Last", "NC", "L", "R", "n", "Max", "network", "Ne", "V", "Inf", "K", "NB", "Length", "D", "NT", "H", "O", "Ns", "NS", "G", "NE", "NF", "NG", "NI", "X"], "last": ["total", "nt", "count", "size", "it", "id", "cost", "next", "l", "old", "start", "value", "init", "end", "first", "length", "f", "ci", "style", "key", "index", "est", "base", "recent", "list", "full", "Last", "left", "max", "min", "code", "prev", "n", "cli", "small", "li", "latest", "current", "number", "out", "sync"], "i": ["bi", "hi", "pi", "ori", "ni", "count", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "is", "ri", "uli", "start", "io", "abi", "length", "ci", "ui", "ini", "index", "phi", "x", "uri", "di", "ip", "I", "ai", "o", "gi", "n", "cli", "ii", "b", "zi", "li", "nb", "j", "oi", "in", "chi", "ti"], "sqrt_N": ["sqrt32Q", "sqRT_P", "sqrt_n", "sqRT_M", "sqrt_Q", "sqRT_L", "sqrt_L", "sqRT_N", "sqRT_Q", "sqrt_P", "sqrt32n", "sqRT_n", "sqrt32N", "sqrt_M", "sqrt32P"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main {\\n\tpublic static void main(String args[]) throws IOException {\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tSolver solver = new Solver();\\n\t\tsolver.init();\\n\t\tsolver.readHead(in.readLine());\\n\t\t// for (; solver.hasNext();) {\\n\t\t// solver.readBody(in.readLine());\\n\t\t// }\\n\t\t// solver.solve();\\n\t}\\n}\\n\\nclass Solver {\\n\tint N;\\n\tint cnt;\\n\\n\tpublic void init() {\\n\t\tN = 0;\\n\t\tcnt = 0;\\n\t}\\n\\n\tpublic void readHead(String str) {\\n\t\tString[] strArr = str.split(\"\\\\s+\");\\n\t\t// N = Integer.parseInt(strArr[0]);\\n\t\t// System.out.println(N);\\n\t\tlong a = Long.parseLong(strArr[0]);\\n\t\tlong b = Long.parseLong(strArr[1]);\\n\t\tlong k = Long.parseLong(strArr[2]);\\n\t\tif (a > k) {\\n\t\t\ta -= k;\\n\t\t\tk = 0;\\n\t\t} else {\\n\t\t\tk -= a;\\n\t\t\ta = 0;\\n\t\t}\\n\t\tif (b > k) {\\n\t\t\tb -= k;\\n\t\t} else {\\n\t\t\tb = 0;\\n\t\t}\\n\t\tSystem.out.println(a + \" \" + b);\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\treturn cnt < N;\\n\t}\\n\\n\tpublic void readBody(String str) {\\n\t\t// System.out.println(str);\\n\t\tcnt++;\\n\t}\\n\\n\tpublic void solve() {\\n\\n\t}\\n}\\n", "target": "128", "substitutes": {"in": ["this", "conf", "isin", "rec", "client", "id", "login", "ins", "server", "din", "ex", "inside", "i", "line", "a", "data", "is", "name", "lin", "con", "r", "ri", "init", "source", "win", "input", "temp", "In", "query", "s", "inn", "ini", "arg", "OUT", "nin", "by", "socket", "gin", "read", "inner", "d", "rin", "cli", "b", "err", "kin", "again", "reader", "connection", "log", "bin", "file", "inc", "IN", "out", "re"], "solver": [" solution", "Sooter", "sooter", "ssolutions", "ssolve", " sooter", "Solver", "solutions", "ssolver", " sider", "Solutions", "ansolver", "ssolution", "ansolutions", "solve", "ssider", "solution", "Solution", "ansolution", "Solve", "sider", "ssooter", "Sider", "ansolve", " solve"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int prime = Integer.parseInt(sc.next());\\n\\n    if (prime == 2) {\\n      System.out.println(prime);\\n      return;\\n    }\\n\\n    if (prime % 2 == 0) {\\n      prime++;\\n    }\\n    \\n    while (true) {\\n      for (int i = 3; ; i+=2) {\\n        if (prime % i == 0) {\\n          prime += 2;\\n          break;\\n        }\\n        \\n        if (i > prime / 2) {\\n          System.out.println(prime);\\n          return;\\n        }\\n      }\\n    }\\n  }\\n}", "target": "183", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "sf", "scope", "pc", "ch", "ss", " SC", "asc", "sh", "Sc", "SC", "exp", "bc", "desc", "sw", "cs", "lc", "ci", "dc", "c", " scr", "sp", "acc", "uc", "soc", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "cont", "sch", " sp", "ec", "esc"], "prime": ["total", "size", "slice", "num", "ext", "init", "info", "key", "ties", "phi", "depth", "pe", "ie", "ce", "max", "alpha", "ite", "me", "seed", "type", "digit", "match", "sleep", "price", "print", "py", "p", "test", "id", "pr", "version", "power", "value", "iter", "length", "pse", "eight", "pointer", "ne", "index", "np", "chance", "ptr", "code", "grade", "shift", "plus", "edge", "scale", "square", "pee", "pire", "te", "second", "count", "patch", " Prime", "pie", "use", "ph", "Prime", "slave", "floor", "ve", "ime", "ide", "se", "ge", "die", "pose", "offset", "future", "core", "priority", "ffe", "start", "zip", "tie", "sup", "rice", "shadow", "range", "primary", "plot"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "u", "qi", "xi", "wei", "v", "si", "l", "pie", "start", "z", "f", "ci", "ui", "c", "index", "phi", "x", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "alpha", "b", "ii", "zi", "limit", "li", "j", "k", "oi", "step", "in", "t", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tsc.close();\\n\t\t\\n\t\tint ans = 0;\\n\t\t\\n\t\tfor(int i = 1;i <= N;i+=2) {\\n\t\t\tint count = 0;\\n\t\t\t\tfor(int j = 1;j <= i/2;++j)\\n\t\t\t\t\tif(i % j == 0)\\n\t\t\t\t\t\tcount++;\\n\t\t\tif(count == 7)\\n\t\t\t\tans++;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}", "target": "85", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "nt", "pc", "na", "ch", "server", "ss", " SC", "cur", "sub", "asc", "sh", "fc", "Sc", "SC", "can", "bc", "cs", "sw", "src", "cv", "ci", "conn", "c", "sp", "cus", "sq", "uc", "soc", "sr", "ca", "sys", "se", "ner", " Sc", "sem", "exec", "scan", "Scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "ctx", "ann"], "N": ["Len", "S", "Num", "Count", "NL", "C", "J", "M", "Size", "Y", "X", "F", "NN", "Q", "P", "T", "I", "Ni", "L", "R", "n", "B", "network", "Ne", "V", "K", "D", "NT", "H", "Z", "Ns", "NS", "O", "NI"], "ans": ["nn", "ana", "groups", "acts", "ars", "AN", "aned", "na", "atches", "ins", "nan", "aus", "ss", "span", "ks", "lan", "asts", "es", "ions", "ls", "cs", "ians", "lines", "s", "os", "rows", "cas", "bird", "ants", "an", "books", "cons", "ANS", "except", "ai", "n", "ns", "ents", "array", "pass", "ras", "anc", "scan", "runs", "as", " scans", "amps", "annels", "can", "ann"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "p", "u", "multi", "qi", "ji", "xi", "jp", "si", "ix", "l", "ik", "start", "io", "z", "info", "ci", "ui", "c", "ini", "index", "phi", "x", "uri", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "zi", "li", "oi", "in", "chi", "y", "fi"], "count": ["all", "counter", "total", "cat", "offset", "call", "parent", "nt", "Count", "size", "id", "num", "allow", "span", "keep", "part", "start", "info", "len", "cond", "length", "c", "sum", "check", "weight", "index", "list", "base", "depth", "carry", "col", "max", "code", "b", "err", "limit", "ignore", "child", "found", "type", "group", "number", "cc", "ind", "ann", "coll"], "j": ["bi", "jj", "jc", "ni", "p", "size", "oj", "u", "J", "qi", "ch", "ji", "xi", "sec", "v", "jp", "si", "l", "ij", "z", "aj", "f", "ci", "c", "key", "m", "x", "e", "ja", "I", "uj", "ie", "o", "d", "n", "ii", "b", "li", "js", "obj", "k", "job", "y", "jl", "ind", "jo"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n        // TODO ?????????????????????????????????????????????\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n        while(true){\\n            String tmpStr = br.readLine();\\n            if(tmpStr == null){\\n                break;\\n            }\\n\\n            String[] tmpArray = tmpStr.split(\" \");\\n\\n            int num1 = Integer.parseInt(tmpArray[0]);\\n            int num2 = Integer.parseInt(tmpArray[1]);\\n\\n            int sum = num1 + num2;\\n\\n            System.out.println(Integer.toString(num1 + num2).length());\\n        }\\n\\n\\n    }\\n\\n}", "target": "176", "substitutes": {}}
{"code": "import java.util.*;\\n \\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int k = sc.nextInt();\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    String ans = (a/k * k + k <= b || a%k == 0) ? \"OK\" : \"NG\";\\n    System.out.println(ans);\\n  }\\n}", "target": "28", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "ser", "com", "ch", "tc", "ss", " SC", "cur", "asc", "sh", "search", "Sc", "SC", "ng", "ct", "cs", "bc", "sw", "cv", "lc", "cer", "c", "sp", "acc", "sq", "uc", "soc", "sr", "ca", "se", "ner", " Sc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "esc", "cus", "sync"], "k": ["sk", "p", "kg", "u", "ko", "ck", "ad", "ks", "v", "i", "kick", "l", "kk", "ik", "r", "z", "h", "dk", "f", "ok", "c", "key", "ak", "m", "w", "x", "e", "kw", "q", "o", "alpha", "d", "n", "unk", "ac", "kid", "j", "K", "kind", "y"], "a": ["ana", "p", "ia", "ka", "na", "u", "ad", "i", "ba", "r", "aa", "z", "A", "oa", "pa", "f", "au", "s", "c", "m", "an", "x", "w", "sa", "ae", "ada", "ta", "ai", "alpha", "o", "d", "af", "n", "ca", "ac", "fa", "y", "la", "as", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["bi", "p", "u", "abb", "ad", "v", "auto", "ba", "i", "l", "r", "be", "z", "h", "A", "end", "pa", "f", "s", "c", "m", "base", "e", "bound", "o", "abs", "d", "n", "B", "nb", "j", "bb", "sb", "y", "bar", "ab", "pad"], "ans": ["ana", "annis", "AN", "anas", "aned", "ars", "na", "ins", "An", "rans", "ks", "aus", "anon", "lan", "nan", "acs", "res", "atan", "ions", "lines", "s", "nas", "ings", "ros", "cas", "ants", "an", "aid", "ANS", "ns", "ras", "ats", "anc", "scan", "san", "outs", "as", "anners", "ons", "aning", "can", "ann"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint ans = 0;\\n\t\tint rem = 10;\\n\t\tfor (int i = 0; i < 5; i++) {\\n\t\t\tint b = sc.nextInt();\\n\t\t\tif(b%10==0) {\\n\t\t\t\tans += b;\\n\t\t\t}else {\\n\t\t\t\tans += (b/10+1)*10;\\n\t\t\t\trem = Math.min(rem,b-b/10*10);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println((rem==10)?ans:ans-(10-rem));\\n\t\tsc.close();\\n\t}\\n}", "target": "63", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "sf", "scope", "pc", "class", "core", "ch", "server", "ss", "sec", "tc", " SC", "cur", "sh", "Sc", "SC", "cb", "bc", "cs", "cv", "src", "cp", "sw", "lc", "ci", "c", "cer", " scr", "sp", "system", "sq", "uc", "ca", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "coll", "cam", "esc", "ctx", "sync"], "ans": ["ana", "acts", "sk", "ars", "blocks", "aned", "oss", "na", "ases", "ins", "aus", "ks", "span", "rs", "aces", "asts", "res", "a", "ances", "es", "is", "reads", "ions", "ls", "offs", "eps", "ens", "olds", "ips", "cs", "ps", "cp", "man", "pa", "s", "os", "nas", "cas", "ds", "an", "urs", "books", "ops", "cons", "ANS", "act", "ents", "ns", "ca", "ras", "anc", "scan", "asks", "as", "ons", "ays", "can", "ann"], "rem": ["Rem", "cl", "rec", "rom", "p", "rm", "core", "pres", "num", "ex", "keep", "kept", "res", "ix", "extra", "pre", "REM", "diff", "r", "ban", "remove", "right", "reb", "len", "reg", "end", "pa", "orig", "br", "cm", "lc", "loc", "inn", "pm", "m", "recent", "pop", "left", "min", "max", "rest", "prev", "remote", "err", "k", "mod", "mn", "prom", "ret", "rc", "rx", "ref", "ab", "pull", "ind", " Rem", "resh", "re"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "iu", "it", "u", "id", "multi", "xi", "v", "si", "l", "a", "is", "io", "z", "f", "ci", "c", "ui", "x", "e", "di", "I", "ai", "o", "gi", "d", "mi", "n", "ii", "li", "j", "k", "oi", "in", "y", "t"], "b": ["bi", "fb", "bl", "count", "p", " eb", "it", "u", "pb", "abb", "rb", "num", "v", "ba", "l", "ib", "a", "cb", "bf", "r", "bh", "h", "lb", "reb", "bc", "length", "eb", "f", "br", "bs", "c", "m", "w", "x", "base", "e", "o", "common", "d", "n", "B", "body", "nb", "j", "k", "sb", "bb", "bd", "bot", "bin", "y", "ab", "emb", "ob", "batch", "bp"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tint n = Integer.parseInt(br.readLine());\\n\t\tString[] hs = br.readLine().split(\" \");\\n\t\tbr.close();\\n\\n\t\tint[] h = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\th[i] = Integer.parseInt(hs[i]);\\n\t\t}\\n\\n\t\tint cnt = h[0];\\n\t\tfor (int i = 1; i < n; i++) {\\n\t\t\tif (h[i - 1] < h[i]) {\\n\t\t\t\tcnt += h[i] - h[i - 1];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(cnt);\\n\t}\\n}\\n", "target": "77", "substitutes": {"br": ["bl", "fb", "ber", "wr", "http", "hr", "rb", "browser", "tr", "arr", "res", "vr", "lr", "cb", "fr", "r", "bf", "bh", "yr", "io", "iter", "stream", "bc", "bridge", "init", "ler", "bs", "er", "dr", "mr", "orb", "BR", "her", "bro", "HR", "erb", "Br", "brush", "sr", "b", "err", "gr", "ner", "reader", "obj", "buf", "ocr", "bb", "cr", "ref", "plug", "ab", "rt"], "n": ["nn", "nc", "nt", "count", "p", "u", "num", "N", "ln", "v", "l", "sn", "z", "nl", "f", "conn", "s", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "no", "in", "mn", "number", "y", "t"], "hs": ["hi", "obs", "http", "hes", "sha", "ks", "gh", "qs", "ges", "his", "rh", "bh", "ht", "fs", "ims", "ph", "ha", "hd", "ps", "vs", "hhh", "hand", "han", "hp", "hw", "gs", "hy", "vp", "ns", "hm", "hh", "host", "xs", "zh", "hl", "css", "HS", "pps", "th", "wh", "ctx", "hea"], "h": ["head", "hi", "count", "p", "he", "id", "u", "hr", "hash", "http", "gh", "v", "help", "sh", "l", "uh", "rh", "bh", "ht", "home", "r", "ph", "ha", "hd", "f", "ah", "s", "c", "m", "w", "x", "e", "hist", "hp", "o", "hw", "d", "b", "body", "ih", "hm", "hh", "H", "hl", "y", "oh", "th", "t", "wh"], "i": ["bi", "hi", "api", "pi", "ni", "p", "iu", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "a", "uni", "ri", "diff", "start", "io", "init", "info", "abi", "z", "f", "ci", "ui", "c", "ini", "index", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "cli", "li", "j", "oi", "yi", "in", "y", "ti", "fi"], "cnt": ["Cpt", "ccount", "cNT", "lcNT", "lcnt", "count", "lccount", "Count", "ncNT", " count", "dcrt", "CNT", "Crt", "ncount", " cNT", " cpt", "dcpt", " crt", "crt", "acount", "account", "ncnt", "acnt", "cpt", "lcount", "dcount", "acNT", "dcnt", "ncrt", "Ccount", "Cnt"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Queue;\\nimport java.util.ArrayDeque;\\nimport java.util.Arrays;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint n = sc.nextInt();\\n\t\tint[][] d = new int[2][n];\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\td[0][i] = sc.nextInt();\\n\t\t\td[1][i] = sc.nextInt();\\n\t\t}\\n\t\tString ans = \"No\";\\n\t\tfor(int i = 0; i < n - 2; i++) {\\n\t\t\tif(d[0][i]==d[1][i] && d[0][i+1]==d[1][i+1] && d[0][i+2]==d[1][i+2] ) {\\n\t\t\t\tans = \"Yes\";\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}", "target": "215", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "scope", "pc", "na", "com", "ch", "server", "ss", "tc", " SC", "asc", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "src", "lc", "ci", "dc", "c", "cer", "sp", "system", "sq", "uc", "soc", "sr", "ca", "cle", "sem", "se", "ner", " Sc", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "squ", "esc", "ctx", "cus", "coll"], "n": ["nn", "nc", "nt", "count", "p", "size", "u", "num", "N", "ln", "v", "l", "name", "sn", "r", "z", "h", "nl", "len", "f", "s", "c", "ne", "m", "w", "x", "e", "o", "ns", "b", "network", "nb", "j", "net", "k", "in", "no", "y", "en", "t"], "d": ["dist", "xd", "sd", "ded", "p", "dict", "dn", "id", "u", "it", "nd", "did", "ad", "od", "v", "l", "a", "data", "ct", "db", "pd", "dat", "wd", "z", "dr", "f", "fd", "dc", "ud", "c", "s", "ds", "t", "td", "at", "dos", "x", "m", "mad", "w", "di", "e", "du", "q", "md", "o", "dd", "ld", "dom", "b", "dim", "dl", "dt", "in", "D", "cd", "y", "da", "ind", "dh"], "i": ["bi", "hi", "api", "pi", "ni", "iu", "p", "slice", "u", "id", "multi", "qi", "xi", "v", "anti", "si", "ix", "l", "a", "mini", "is", "name", "ri", "start", "io", "init", "info", "source", "f", "ci", "ui", "ini", "c", "key", "index", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "zi", "b", "cli", "li", "iv", "site", "j", "oi", "in", "y", "ti", "fi"], "ans": ["nn", "ams", "ands", "sk", "AN", "aned", "ars", "anas", "vers", "na", "ads", "ins", "aus", "ks", "ss", "lan", "asts", "res", "atan", "reads", "ions", "ls", "ys", "ens", "olds", "vs", "s", "os", "nas", "ds", "ags", "ants", "an", "idents", "cons", "ANS", "anks", "arts", "flags", "leans", "ents", "ns", "ras", "ats", "yes", "anc", "anus", "lang", "san", "unders", "as", "anners", "ons", "aning", "amps", "annels", "ays", "ann"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    \\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new java.io.InputStreamReader(System.in));\\n        PrintWriter pw = new PrintWriter(System.out);\\n        StringTokenizer st = new StringTokenizer(br.readLine());\\n\\n        int N = Integer.parseInt(st.nextToken());\\n        String[] tall_array = br.readLine().split(\" \");\\n        int tmp = 0;\\n        long result = 0;\\n\\n        for(int i = 0; i < N; i++) {\\n\\n            int target = Integer.parseInt(tall_array[i]);\\n\\n            if(target < tmp) {\\n                result += tmp - target;\\n            } else {\\n                tmp = target;\\n            }\\n        }\\n\\n        pw.println(result);\\n        br.close();\\n        pw.close();\\n    }\\n}", "target": "202", "substitutes": {"br": ["bl", "fb", "ber", "wr", "bern", "hr", "rb", "ch", "browser", "tr", "arr", "jar", "db", "cb", "fr", "lr", "r", "yr", "bh", "io", "bridge", "src", "ler", "dr", "mr", "flash", "BR", "bro", "str", "Br", "brush", "sr", "b", "err", "gr", "reader", "obj", "buf", "sb", "bb", "cro", "cr", "bt", "bar", "rt", "fore", "front"], "pw": ["qwb", "Psh", "qw", "pwd", "px", "PW", "qm", "jpwa", "psw", "psx", " px", "ppw", "qx", "wW", " pW", "Pwr", " pwd", "pwb", "pm", "jpx", " pwa", "Pw", "pswb", "jpw", "ww", "ppx", "wwr", " psh", "psm", "ppwa", "jpwd", "ppwd", "pwr", " pm", " pwr", " pwb", "pW", "pwa", "wsh", "psh"], "st": ["cl", "ste", "inst", "ust", "ST", "stable", "stack", "sh", "const", "fr", "sv", "std", "r", "sign", "start", "stage", "ft", "fe", "src", "sl", "s", "stress", "est", "sp", "sa", "str", "string", "pt", "stri", "rest", "sr", "stand", "St", "se", "sb", "sta", "ast", "sts", "stru", "cr", "stop", "bt", "ost", "tt", "sc", "t"], "N": ["Len", "S", "Num", "NA", "C", "J", "M", "Size", "F", "NN", "Number", "Q", "P", "T", "I", "Ni", "L", "R", "n", "B", "NM", "Ne", "V", "K", "NB", "ND", "D", "NT", "O", "NS", "number", "Ns", "G", "NI", "X"], "tall_array": ["tower_string", "tower_answer", "tall_record", "tall_number", "tall_string", "tower_array", "translation_Array", "tall_answer", "tallworkArray", "tallworkarray", "tallworknumber", "tall_Array", "translation_number", "translation_array", "tower_arr", "tallworkrecord", "translation_record", "tall_arr"], "tmp": ["this", "offset", "total", "ori", "dist", "nt", "api", "parent", "count", "p", "test", "size", "now", "expected", "project", "next", "meta", "stuff", "pre", "part", "mm", "start", "timeout", "source", "temp", "nr", "src", "cp", "length", "cmp", "orig", "ticket", "pointer", "base", "np", "done", "mp", "T", "ptr", "prev", "err", "ignore", "dest", "latest", "current", "j", "obj", "top", "sup", "ref", "tt", "area", "error", "t"], "result": ["total", "dist", "score", "nt", "expected", "count", "test", "size", "message", "buffer", "next", "average", "res", "const", "page", "data", "duration", "answer", "diff", "value", "error", "info", "results", "nr", "length", "winner", "report", "feature", "order", "output", "acc", "mp", "grade", "Result", "success", "goal", "err", "dest", "current", "obj", "work", "term", "master", "ret", "number", "our", "match", "out", "array", "default"], "i": ["hi", "bi", "pi", "ori", "ni", "p", "it", "u", "id", "slice", "multi", "qi", "ji", "xi", "v", "si", "ix", "l", "ri", "io", "init", "info", "h", "abi", "end", "z", "f", "ci", "ui", "ini", "index", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ai", "gi", "shift", "ii", "li", "j", "oi", "in", "y", "t", "ti"], "target": ["direction", "total", "offset", "cat", "client", "nt", "parent", "hop", "count", "that", "test", "size", "id", "wrong", "project", "next", "reference", "path", "data", "point", "start", "Target", "value", "source", "iter", "src", "resource", "length", "width", "pixel", "pointer", "index", "base", "token", "max", "success", "goal", "arget", "task", "ARGET", "remote", "site", "dest", "latest", "current", "obj", "net", "top", "step", "master", "number", "match", "t", "tail"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        new Solver().run();\\n    }\\n}\\n\\nclass Solver {\\n\\n    private List<int[]> prime_factorize(int N) {\\n        List<int[]> res = new ArrayList<int[]>();\\n        for (int a = 2; a * a <= N; a++) {\\n            if (N % a != 0) continue;\\n            int ex = 0;\\n\\n            while (N % a == 0) {\\n                ++ex;\\n                N /= a;\\n            }\\n\\n            res.add(new int[]{a, ex});\\n        }\\n\\n        if (N != 1) res.add(new int[]{N, 1});\\n        return res;\\n    }\\n\\n    private boolean check(List<int []> list) {\\n        for (int[] a : list) {\\n            if (a[1] % 2 != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private int dist2(int[][] X, int N, int D, int i, int j) {\\n        int sum = 0;\\n        for (int k = 0; k < D; k++) {\\n            int v = X[i][k] - X[j][k];\\n            sum += v * v;\\n        }\\n        return sum;\\n    }\\n\\n    public void run() {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int D = sc.nextInt();\\n\\n        int[][] X = new int[N][D];\\n        int[][] M = new int[N][D];\\n        for (int i = 0; i < N; i++) {\\n            for (int j = 0; j < D; j++) {\\n                X[i][j] = sc.nextInt();\\n            }\\n        }\\n\\n        int cnt = 0;\\n        for (int i = 0; i < N; i++) {\\n            for (int j = i + 1; j < N; j++) {\\n                if (i != j) {\\n                    // comapring i with j.\\n                    int s = dist2(X, N, D, i, j);\\n                    if (check(prime_factorize(s))) {\\n                        cnt++;\\n                    } else {\\n                    }\\n                }\\n            }\\n        }\\n        System.out.println(cnt);\\n\\n        return;\\n    }\\n\\n}", "target": "59", "substitutes": {"N": ["Len", "S", "Num", "AN", "No", "NA", "size", "NL", "C", "na", "Part", "J", "An", "CN", " n", "Size", "Nat", "Net", "U", "Y", "Node", "None", "F", "Network", "NN", "Q", "A", "P", "Wh", "NH", " Ne", "x", "Na", "NO", "T", "I", "Ni", "Sn", "L", "R", "d", "n", "B", "Ne", "V", "CNN", "K", "DC", "ND", "NT", "H", "Z", "Ns", "NS", "O", "NE", "NV", "Ex", "G", "W", "NI", "E"], "res": ["ers", "breaks", "works", "blocks", "rez", "rus", "val", "pres", "rs", "arr", "powers", "vals", "qs", "out", "es", "boxes", "rem", "r", "rules", "right", "is", "cs", "results", "reg", "ps", "RES", "rows", "Rs", "os", "ros", "x", "cons", "Results", "resp", "rev", "ns", "result", " results", "details", "ras", "ress", "ries", "values", "obj", "err", "response", "ret", "ris", "ores", "ans", "runs", "outs", "resources", "req", "Res", "resolution", "rates", "array", "re"], "a": ["aw", "p", "ia", "na", "u", "ad", "span", "za", "ba", "ar", "data", "ao", "aa", "z", "A", "oa", "pa", "f", "au", "s", "c", "ga", "ax", "at", "an", "x", "w", "action", "sa", "e", "ae", "ea", "ata", "ai", "alpha", "act", "d", "af", "n", "o", "array", "b", "ca", "ac", "qa", "wa", "aaa", "sta", "fa", "y", "as", "la", "off", "ab", "da", "area", "ma", "am", "va", "aj"], "ex": ["EX", "test", "size", "na", "com", "ext", "ix", "is", "rem", "esc", "exp", "z", "temp", "aux", "f", "lex", "az", "ax", "us", "index", "w", "x", "base", "est", "e", "ra", "max", "min", "act", "abs", "abc", "ac", "tx", "pos", "su", "exec", "wa", "in", "ait", "as", "rx", "Ex", "exc", "ab", "out", "ru", "rex"], "list": ["all", "cl", "parent", "chain", "p", "test", "table", "queue", "map", "arr", "keep", "path", "pool", "l", "name", "r", "re", "lc", "pair", "s", "x", "string", "code", "set", "result", "li", "LIST", "group", "lists", "la", "range", "batch", "out", "array", "coll"], "X": ["Test", "S", "IP", "Co", "ZX", "C", "ID", "J", "FF", "U", "Y", "Array", "Work", "CE", "F", "Q", "Code", "P", "A", "UX", "XX", "ML", "x", "T", "I", "L", "DX", "Matrix", "Max", "R", "PH", "IX", "XP", "V", "K", "H", "Z", "Cross", "O", "G", "Value", "Weight", "W", "E", "XL"], "D": ["AD", "DH", "S", "IND", "DM", "C", "Part", "J", "Di", "DA", "DR", "U", "Y", "F", "PD", "Dr", "Q", "DN", "A", "P", "MD", "CD", "DI", "T", "I", "JD", "L", "d", "R", "Ds", "B", "DB", "V", "DD", "DC", "K", "ND", "H", "Z", "DS", "DP", "FD", "G", "DO", "O", "E", "Do"], "i": ["bi", "hi", "ic", "im", "ori", "pi", "ni", "iu", "p", "it", "u", "id", "qi", "xi", "ji", "si", "ix", "l", "mini", "ij", "ik", "ri", "r", "start", "io", "init", "z", "h", "f", "ci", "vi", "ui", "ini", "c", "m", "eni", "x", "phi", "uri", "di", "ip", "e", "I", "ie", "ai", "q", "o", "gi", "d", "mi", "n", "ii", "b", "zi", "li", "oi", "in", "y", "ki", "ti"], "j": ["all", "dj", "jj", "ori", "jc", "p", "oj", "it", "u", "adj", "J", "qi", "bj", "ji", "ch", "jp", "l", "ij", "z", "h", "aj", "ny", "f", "c", "key", "ne", "m", "x", "e", " dj", "ja", "jet", "uj", "ie", "q", "o", "d", "n", "g", "b", "ii", "li", "ju", "js", "je", "obj", "y", "jl", "jen", "jo"], "sum": ["um", "div", "total", "cat", "count", "p", "size", "cost", "gram", "u", "num", "ss", "summary", "si", "average", "vol", "add", "sh", "use", "fill", "diff", "sign", "mass", "error", "sim", "spread", "cal", "key", "index", "m", "us", "sav", "pack", "sa", "cum", "mix", "ul", "min", "alpha", "ums", "miss", "Sum", "zero", "gam", " summ", "se", "su", "norm", "up", "scale", "mean", "av", " sums", "dot", "out", "mem"], "k": ["sk", "p", "u", "id", "ck", "ad", "ke", "ks", "ch", "kk", "ik", "r", "z", "h", "dk", "ok", "ek", "c", "key", "ak", "m", "w", "x", "kw", "q", "o", "d", "kn", "n", "g", "b", "kid", "K", "uk", "y", "ki"], "v": ["p", "val", "u", " V", "l", "sv", "r", "value", "z", "h", "cv", "f", "vi", "vs", "c", "uv", "vv", "t", "m", "x", "w", "ve", "e", "q", "o", "lv", "d", "n", "g", "vp", "b", "iv", "V", "vd", "nv", "va"], "sc": ["cl", "sche", "mc", "sci", "nc", "nt", "pc", "core", "ck", "ch", "sec", "ss", "tc", " SC", "si", "sub", "asc", "sh", "Sc", "SC", "sv", "exp", "bc", "cs", "sw", "cv", "cor", "co", "src", "lc", "ci", "gg", "cer", "c", " scr", "sp", "system", "sq", "uc", "soc", "sys", "se", "ner", " Sc", "sem", "anc", "exec", "scan", "osc", "rc", "cr", "cont", "sch", "ec", "esc", "ctx", "cus", "sync"], "M": ["MN", "S", "Mi", "C", "MC", "U", "Y", "Mass", "F", "mass", "Q", "P", "A", "MS", "MD", "m", "T", "CM", "L", "Matrix", "R", "B", "V", "K", "H", "O", "Z"], "cnt": ["ccount", "lcount", "lcrt", "Crt", "lcnt", "count", "lccount", "Count", " count", " crt", " ccount", "Ccount", "Cnt", "crt"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\npublic static void main(String[] args){\\n\ttry{\\n\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\tString[] str = br.readLine().split(\" \");\\n\tList<Integer> num = new ArrayList<Integer>();\\n\t\\n\t\tfor(int i = 0; i < str.length; i++){\\n\t\tnum.add(Integer.parseInt(str[i]));\\n\t\t}\\n\t\\n\tCollections.sort(num);\\n\t\\n\t\tfor(int n = 0; n < num.size(); n++){\\n\t\t\tif(n != num.size()-1){\\n\t\t\tSystem.out.print(num.get(n) + \" \");\\n\t\t\t}else{\\n\t\t\tSystem.out.println(num.get(n));\\n\t\t\t}\\n\t\t}\\n\\n\t}catch(IOException e){\\n\tSystem.out.println(e);\\n\t}\\n}\t\\n}", "target": "37", "substitutes": {"br": ["bl", "div", "ber", "nor", "hr", "rb", "browser", "tr", "arr", "ar", "lr", "fr", "ctr", "r", "yr", "io", "stream", "bridge", "nr", "er", "dr", "report", "orb", "mr", "handle", "BR", "img", "bro", "Br", "abs", "sr", "b", "result", "err", "gr", "ner", "org", "reader", "buf", "ocr", "cr", "bar", "out"], "str": ["div", "unit", "p", "hr", "tr", "split", "pr", "arr", "url", "line", "STR", "data", "fr", "part", "r", "iter", "input", "char", "f", "lc", "sl", "s", "dr", "strike", "list", "st", "text", "string", "stri", "Str", "inner", "sr", "b", "err", "pass", "ner", "parse", "in", "cr", "dec", "read", "out", "strip"], "num": ["nn", "um", "parent", "unit", "Num", "initial", "una", "now", "mon", "null", "u", "id", "one", "nu", "na", "om", "uno", "span", "multi", "nam", "sort", "uni", "ou", "con", "known", "ng", "home", "valid", "init", "iter", "un", "fn", "winner", "lib", "unique", "sum", "index", "m", "umi", "np", "node", "ul", "common", "ums", "nom", "result", "dom", "nb", "current", "norm", "original", "no", "mn", "non", "tri", "number", "off", "later", "NUM", "en"], "i": ["hi", "bi", "pi", "ni", "p", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "l", "a", "ri", "r", "uli", "io", "h", "z", "f", "ci", "c", "ini", "ui", "index", "m", "phi", "x", "eni", "e", "ip", "di", "I", "ai", "o", "d", "mi", "ii", "b", "li", "j", "k", "oi", "yi", "in", "t", "ti"], "n": ["nn", "nc", "on", "nt", "ni", "p", "dn", "u", "na", "nor", "nu", "nd", "N", "v", "cn", "l", "out", "sn", "name", "ng", "un", "z", "nr", "len", "f", "fn", "c", "ne", "index", "an", "x", "e", "o", "d", "ns", "g", "b", "nb", "j", "net", "k", "no", "non", "number", "y", "gn", "en", "t"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner kb = new Scanner(System.in);\\n\t\tString n = kb.next();\\n\t\tif (n.contains(\"7\")) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t\tkb.close();\\n\t}\\n\\n}\\n", "target": "99", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n\\n        int n = Integer.parseInt(s.next());\\n\\n        int[] h = new int[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            h[i] = Integer.parseInt(s.next());\\n        }\\n\\n        int tmp = 0;\\n        int c = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (tmp <= h[i]) {\\n                c++;\\n                tmp = h[i];\\n            }\\n        }\\n        System.out.println(c);\\n    }\\n}", "target": "7", "substitutes": {"s": ["S", "ts", "sf", "p", "ins", "ss", "si", "strings", "l", "bis", "sv", "ls", "ws", "fs", "its", "f", "lines", "south", "sl", "os", "ds", "tests", "rows", "m", "gets", "fts", "parts", "e", "ssl", "ses", "string", "o", "abs", "d", "gs", "ns", "b", "g", "sets", "services", "se", "sym", "js", "sb", "in", "ans", "as", "t", "sync"], "n": ["nn", "nc", "nt", "count", "p", "size", "dn", "u", "num", "N", "ln", "v", "cn", "l", "sn", "z", "len", "f", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "no", "in", "number", "y", "en", "t"], "h": ["head", "p", "he", "id", "u", "hr", "ch", "gh", "v", "sh", "l", "uh", "rh", "bh", "ht", "ph", "z", "ha", "hd", "ah", "f", "t", "m", "w", "x", "e", "hist", "q", "hs", "code", "hw", "o", "g", "prev", "body", "ih", "hm", "k", "hh", "host", "H", "y", "oh", "eh", "th", "dh"], "i": ["bi", "hi", "api", "pi", "ni", "iu", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "mini", "ri", "r", "io", "init", "info", "z", "temp", "f", "lc", "ci", "ui", "ini", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "ii", "b", "li", "j", "oi", "me", "in", "chi", "y", "t", "ti", "fi"], "tmp": ["offset", "nc", "pi", "nt", "count", "p", "size", "slice", "next", "rb", "tc", "v", "a", "cu", "kk", "ct", "part", "start", "temp", "cv", "src", "cp", "f", "cmp", "ci", "cm", "m", "x", "np", "e", "mp", "ce", "alpha", "b", "nb", "cpp", "j", "rc", "pp", "t", "ctx", "xc"], "c": ["ic", "nc", "count", "pc", "p", "toc", "C", "u", "v", "cur", "const", "fc", "cu", "ct", "z", "cs", "temp", "cp", "f", "loc", "lc", "ci", "dc", "cm", "cmp", "m", "x", "cy", "e", "ec", "col", "uc", "ce", "cf", "code", "d", "b", "ac", "k", "cd", "rc", "cc", "cr", "cont", "sc", "t", "xc"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\twhile(true) {\\n\t\t\tString[] strArray = br.readLine().split(\" \");\\n\t\t\tint H = Integer.parseInt(strArray[0]);\\n\t\t\tint W = Integer.parseInt(strArray[1]);\\n\\n\t\t\tif (H ==0 && W == 0) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tfor (int i = 0; i < H; i++) {\\n\t\t\t\tfor (int j = 0; j < W; j++) {\\n\t\t\t\t\tif (i==0 || i == H-1) {\\n\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t} else if (j ==0 || j == W-1) {\\n\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t} else {\\n\t\t\t\t\t\tSystem.out.print(\".\");\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(\"\");\\n\t\t\t}\\n\t\t\tSystem.out.println(\"\");\\n\t\t}\\n\t}\\n}", "target": "19", "substitutes": {"br": ["div", "ori", "ber", "wr", "hr", "rb", "ch", "browser", "tr", "arr", "res", "STR", "cb", "fr", "r", "bf", "bh", "yr", "io", "bridge", "bc", "dr", "mr", "handle", "BR", "img", "bro", "str", "ibr", "Br", "brush", "sr", "b", "err", "gr", "reader", "obj", "buf", "ocr", "bb", "bd", "bt", "cr", "bar", "proc"], "strArray": [" strBlock", "strBlock", "stringLine", "intArray", "intList", "intString", "stringBlock", "intLine", "intAddress", "StrLine", "strLine", "stringString", " strAddress", " strList", "strAddress", "intArea", "stringArray", " strArea", "StrArea", "StrArray", " strLine", " strString", "StrString", "StrAddress", "strList", "strArea", "strString", "StrList", "StrBlock"], "H": ["DH", "TH", "Ha", "S", "HI", "MH", "C", "J", "N", "M", "CH", "HY", "FH", "U", "Y", "SH", "X", "F", "HB", "Q", "EH", "h", "P", "A", "AH", "NH", "HK", "T", "I", "RH", "L", "R", "HA", "B", "HH", "V", "HD", "K", "OH", "Z", "Hi", "HS", "HP", "E", "HC"], "W": ["GW", "S", "We", "BW", "C", "AW", "J", "WH", "N", "FF", "M", "U", "Y", "SH", "WC", "Q", "WB", "VW", "WS", "P", "EH", "Wh", "Width", "TW", "CW", "w", "Ws", "NW", "T", "Web", "I", "SW", "DW", "MW", "L", "B", "FW", "Win", "V", "DC", "Length", "EW", "Z", "WE", "WP", "RW", "Sw", "G", "Weight", "X"], "i": ["hi", "api", "pi", "ori", "ni", "iu", "p", "ami", "it", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "l", "ik", "ri", "io", "h", "z", "ci", "ui", "ini", "eni", "phi", "x", "uri", "ip", "di", "I", "ie", "ai", "gi", "mi", "ii", "b", "zi", "li", "oi", "yi", "in", "chi", "y", "ki"], "j": ["jj", "ori", "jc", "p", "oj", "u", "J", "qi", "bj", "ji", "xi", "v", "jp", "si", "ix", "l", "ij", "z", "h", "aj", "f", "ui", "w", "x", "e", "di", "jet", "ja", "I", "uj", "ie", "q", "o", "n", "b", "ii", "li", "js", "je", "k", "y", "jl", "jo"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\t// AtCoder Beginner Contest 136\\n\t// https://atcoder.jp/contests/abc136/tasks\\n\tpublic static void main(String[] args) {\\n\t\tFastReader sc = new FastReader();\\n\t\tint n = sc.nextInt();\\n\t\tint[] nums = new int[n];\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tnums[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tint count = 1;\\n\t\t\\n\t\tfor (int i = n - 1 ; i >= 1; i--) {    \\n\t\t\tif (nums[i - 1] - 1 == nums[i] ) {\\n\t\t\t\tnums[i-1]--;\\n\t\t\t\tcount++;\\n\t\t\t} else if (nums[i - 1] <= nums[i]) {\\n\t\t\t\tcount++;\\n\t\t\t} else {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tif (count == n) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n\\n\tstatic class FastReader { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() { \\n            br = new BufferedReader(new InputStreamReader(System.in)); \\n        } \\n  \\n        String next() { \\n            while (st == null || !st.hasMoreElements()) { \\n                try { \\n                    st = new StringTokenizer(br.readLine()); \\n                } catch (IOException  e) { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() { \\n            String str = \"\"; \\n            try{ \\n                str = br.readLine(); \\n            } catch (IOException e) { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n}\\n", "target": "74", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\tstatic int mod = (int) 1e9 + 7;\\n\tstatic int DX[] = { -1, 0, 1, 0 }, DY[] = { 0, -1, 0, 1 };\\n\tstatic final int INF = Integer.MAX_VALUE / 3;\\n\tstatic final long LINF = Long.MAX_VALUE / 3;\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner fs = new FastScanner(System.in);\\n\t\tString s = fs.next();\\n\t\tlong k = fs.nextLong();\\n\t\tchar ans = '1';\\n\t\t\\n\t\tfor(int i=0;i<k;i++) {\\n\t\t\tif(s.charAt(i)!='1') {\\n\t\t\t\tans = s.charAt(i);\\n\t\t\t\tSystem.out.println(ans);\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n\t//MOD culculations\\n\tstatic long plus(long x, long y) {\\n\t\tlong res = (x + y) % mod;\\n\t\treturn res < 0 ? res + mod : res;\\n\t}\\n\\n\tstatic long sub(long x, long y) {\\n\t\tlong res = (x - y) % mod;\\n\t\treturn res < 0 ? res + mod : res;\\n\t}\\n\\n\tstatic long mul(long x, long y) {\\n\t\tlong res = (x * y) % mod;\\n\t\treturn res < 0 ? res + mod : res;\\n\t}\\n\\n\tstatic long div(long x, long y) {\\n\t\tlong res = x * pow(y, mod - 2) % mod;\\n\t\treturn res < 0 ? res + mod : res;\\n\t}\\n\\n\tstatic long pow(long x, long y) {\\n\t\tif (y < 0)\\n\t\t\treturn 0;\\n\t\tif (y == 0)\\n\t\t\treturn 1;\\n\t\tif (y % 2 == 1)\\n\t\t\treturn (x * pow(x, y - 1)) % mod;\\n\t\tlong root = pow(x, y / 2);\\n\t\treturn root * root % mod;\\n\t}\\n}\\n\\n//\u9ad8\u901f\u306aScanner\\nclass FastScanner {\\n\tprivate BufferedReader reader = null;\\n\tprivate StringTokenizer tokenizer = null;\\n\\n\tpublic FastScanner(InputStream in) {\\n\t\treader = new BufferedReader(new InputStreamReader(in));\\n\t\ttokenizer = null;\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn tokenizer.nextToken();\\n\t}\\n\\n\tpublic String nextLine() {\\n\t\tif (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\treturn reader.readLine();\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn tokenizer.nextToken(\"\\n\");\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n\\n\tpublic int[] nextIntArray(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = nextInt();\\n\t\treturn a;\\n\t}\\n\\n\tpublic long[] nextLongArray(int n) {\\n\t\tlong[] a = new long[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = nextLong();\\n\t\treturn a;\\n\t}\\n}", "target": "38", "substitutes": {"mod": ["dm", "M", "CC", "amd", " m", " MOD", "cm", " C", "dc", "MOD", " len", " P", "m", " Mod", " cp", "Mod", " xp", "d", " Z", " MAX", " M", "mx", "Z", "MAX", " mods", "DA", "E"], "DX": ["EX", "Zip", "IP", "dx", "DT", "EF", "CE", "IE", "XXX", "CL", "MD", "XX", "DI", "DIR", "DF", "MX", "DEF", "DL", "XY", "DD", "DC", "ND", "DS", "DP", "Ex", "MAX", "Desc", "DA"], "DY": [" DIP", "DYY", "FY", "dYY", "DIP", " Dy", "dIP", " DYY", "Dy", "FIP", "FYY", "Fy", "dY", "dy"], "INF": ["INEF", " INMF", "InMF", "inMF", "InF", " INEF", "INMF", "inF", "inf", "inEF", "INf", " INf", "Inf", "InEF"], "LINF": ["IGNGF", "linI", "LINGF", "INGF", "LINI", "IGNf", "IGNI", "LINf", "linf", "IGNF", "linF", "INf", "linGF", "INI"], "fs": ["frames", "fb", "ir", "sf", "obs", "Fs", "ks", "ss", "rs", "fps", "bis", "fc", "fr", "ws", "F", "ls", "linux", "io", "los", "df", "fe", "cs", "ips", "FS", "f", "bs", "fd", "rows", "fm", "feed", "fits", "raf", "bf", "gets", "fp", "ios", "files", "cf", "af", "ves", "fa", " f", "finder", "lf", " FS", "fx", "fts"], "s": ["S", "sf", "features", "p", "times", "u", "ins", "ss", "ks", "opens", "si", "strings", "l", "qs", "a", "es", "sv", "is", "ls", "series", "ys", "bis", "ws", "h", "f", "os", "c", "states", "ds", "words", "parts", "e", "string", "ses", "abs", "d", "n", "ns", "sets", "services", "sys", "su", "sb", "xs", "stats", "in", "as", "sg", "fts"], "k": ["sk", "mk", "p", "ka", "ko", "ke", "ks", "kick", "ik", "z", "kb", "end", "dk", "ok", "length", "f", "c", "key", "ak", "m", "w", "x", "ku", "kw", "e", "kr", "q", "o", "kn", "n", "g", "d", "b", "kid", "tk", "j", "K", " K", "ki"], "ans": ["ana", "aos", " os", "annis", "ars", "AN", "aned", " types", "anas", "na", "ases", "ins", "nan", "aus", "ks", "anon", "lan", "aces", "asts", "acs", "atan", "ares", "reads", "los", "cs", "ians", "vs", "os", " an", " flags", "cas", "ds", "ants", "an", " means", "ANS", "anks", "anes", "leans", "ents", "ns", " scan", "ras", "ats", " lin", "anc", "san", "annot", "as", " na", "ids", " chars", "ons", " es", "anners", "aning", " a", "ctx", " names", "can", "ann"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "slice", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "a", "ri", "part", "io", "block", "info", "ski", "abi", "temp", "f", "ci", "ui", "ini", "index", "m", "phi", "x", "mu", "uri", "eni", "ip", "di", "e", "I", "ai", "gi", "n", "b", "ii", "zi", "li", "j", "oi", "in", "chi", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        // write your code here\\n        //dream dreamer erase eraser\\n        int A;\\n        int B;\\n        int C;\\n        int D;\\n        try (Scanner sc = new Scanner(System.in)) {\\n            A = sc.nextInt();\\n            B = sc.nextInt();\\n            C = sc.nextInt();\\n            D = sc.nextInt();\\n\\n        }\\n        if (B < C || D < A) {\\n            System.out.println(\"0\");\\n        } else {\\n            int start = Math.max(A, C);\\n            int end = Math.min(B, D);\\n            System.out.println(end - start);\\n        }\\n\\n    }\\n\\n}\\n", "target": "47", "substitutes": {}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Spandan Mishra\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        AMultiplication1 solver = new AMultiplication1();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class AMultiplication1 {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int a = in.readInt();\\n            int b = in.readInt();\\n\\n            System.out.println(a * b);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1)\\n                throw new RuntimeException();\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new RuntimeException();\\n                }\\n                if (numChars <= 0)\\n                    return -1;\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int readInt() {\\n            int c = read();\\n            while (isSpaceChar(c))\\n                c = read();\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n    }\\n}\\n\\n", "target": "35", "substitutes": {"inputStream": ["inputSteam", "outputSteam", " inputstream", " inputSteam", "InputSteam", "pullStreamer", "pullSteam", "inputStreamer", " inputString", "inputString", "Inputstream", "InputString", "outputStreamer", "requestStream", "InputStream", "requestStreamer", "outputstream", "requeststream", "pullstream", "pullStream", "inputstream", "outputString", "requestSteam"], "outputStream": ["outputWriter", "OutputReader", "inputSteam", "outputSteam", "inputFile", "inputReader", "OutputStream", "errorFile", "OutputWriter", " outputSteam", "errorReader", " outputView", "OutputFile", "outputFile", "outputView", "errorStream", "inputWriter", "OutputView", "errorSteam", " outputWriter", "inputView", "OutputSteam", "outputReader"], "in": ["this", "ic", "IN", "id", "login", "ins", "din", "inside", "i", "version", "path", "url", "l", "data", "is", "request", "con", "lin", "r", "part", "io", "source", "win", "sin", "input", "init", "In", "er", "conn", "user", "gen", "inn", "ini", "image", "w", "or", "nin", "cin", "socket", "string", "min", "gin", "inf", "inner", "d", "rin", "n", "plus", "kin", "err", "ac", "again", "reader", "pin", "connection", "log", "bin", "vin", "file", "as", "inc", "lock", "read"], "out": ["this", "buffer", "ou", "screen", "r", "init", "s", "key", "output", "w", "other", "left", "Out", "o", "inner", "sys", "exec", "connection", "bin", "group", "inc", "copy", "error", "console", "window", "call", "client", "p", "line", "data", "name", "io", "temp", "input", "f", "conn", "user", "list", "str", "socket", "n", "again", "write", "up", "file", "off", "to", "v", "extra", "gen", "outside", "x", "writer", "err", "net", "work", "log", "word", "cache", "sync", "parent", "ex", "page", "outer", "arg", "OUT", "string", "outs", "lock", "dump"], "solver": [" solution", "solving", "ssolving", "ssolve", " sver", "Solver", " solving", "ssolver", "ssolution", "sver", "solve", "solution", "Solution", "Sver", "Solving", "ssver", "Solve", " solve"], "testNumber": ["trialNumber", "TestNumber", "TestNo", "trialNo", "testNumbers", "testnumber", " testnumber", "Testnumber", "trialNumbers", "trialnumber", "testNo", " testNumbers", " testNo", "TestNumbers"], "a": ["ava", "count", "p", "ia", "na", "i", "ba", "l", "aa", "A", "ha", "oa", "pa", "f", "au", "s", "ga", "an", "x", "sa", "ae", "ea", "e", "ua", "alpha", "d", "n", "ca", "ac", "qa", "ama", "fa", "as", "y", "la", "area", "ab", "da", "ma", "va", "aj"], "b": ["fb", "count", "p", "u", "num", "rb", "abb", "v", "i", "ba", "l", "cb", "r", "aa", "z", "bc", "A", "bs", "f", "s", "x", "base", "e", "o", "abs", "d", "n", "g", "B", "abc", "k", "sb", "bb", "y", "wb", "ab", "bar", "ob"], "stream": ["this", "single", "round", "client", "wrapper", "buffer", "message", "null", "through", "server", "view", "stack", "v", "hold", "path", "cur", "pool", "data", "control", "source", "roll", "input", "method", "src", "channel", "resource", "post", "sw", "document", "instance", "f", "down", "feed", "model", "forward", "m", "output", "w", "ack", "socket", "string", "ssl", "per", "Stream", "context", "remote", "object", "loop", "body", "handler", "reader", "form", "host", "response", "thread", "type", "file", "from", "pipe", "speed", "driver", "port", "transform", "engine"], "buf": ["buff", "fb", "tmp", "seq", "cat", "func", "vec", "blocks", "buffer", "Buff", "pb", "queue", "rb", "Buffer", "bp", "ba", "ff", "cur", "pool", "data", "cb", "db", "bf", "bh", "bytes", "bc", "cv", "bu", "src", "gb", "cmp", "br", "uf", "bag", "cap", "uc", "cf", "raw", "fab", "bb", "bin", "rc", "wb", "ref", "exc", "conv", "batch", "pad", "ctx"], "curChar": ["Curchar", " curByte", "curCharacter", "perChar", "verChar", "CurCh", "surCh", "urChar", "perchar", "perCharacter", "curCh", "CurCor", "urchar", "CurChar", "curchar", "surchar", " curCh", "curCor", "serchar", "urCh", "CurCharacter", " curCor", "urCharacter", "CurByte", "surByte", "verCh", "curByte", "serChar", " curCharacter", "surChar", "verCor", "serCh", "verCharacter", "perCh", "serCharacter", " curchar"], "numChars": [" numCHards", "numCHarts", "nchards", "numchats", " numChats", "numChards", "numColars", " numCHannels", "curCharts", " numChARS", "numcharts", "numColannels", "numCHans", "curCHards", " numCats", " numCARS", "numColats", " numChans", " numCars", "numCannels", "numChases", "numCats", "numChARS", "numCases", "nchARS", " numChannels", "numCHats", "numCHARS", "numchars", "curCHars", "nchars", "numChats", " numCHars", "numCharts", "numChannels", "numCHannels", "numCHards", "nCharts", " numCharts", "numCHars", " numChases", " numChards", "curChards", "curChARS", "numCards", "numCarts", " numCans", "numCHases", "nChards", "numCARS", "nChARS", "numchans", "numCans", "curChars", "curCHarts", "numCars", "nChars", "ncharts", "numchards", "numchARS", "curCHARS", "numColards", "numChans", " numCHats"], "c": ["div", "enc", "cl", "nc", "mc", "arc", "vc", "chain", "ic", "count", "p", "pc", "C", "u", "ch", "tc", "v", "i", "cur", "l", "cu", "fc", "cb", "ct", "con", "r", "z", "h", "bc", "cs", "cp", "char", "f", "lc", "ci", "dc", "s", "loc", "t", "m", "w", "x", "cy", "e", "col", "uc", "ce", "code", "cf", "q", "d", "content", "n", "g", "abc", "ca", "ac", "anc", "rc", "cc", "y", "cr", "exc", "dec", "cache", "sc", "ec", "esc", "unc", "xc", "coll"], "sgn": ["sinn", "sig", "asgn", "asGN", "Sgn", "psgin", " sgin", "asgin", " sagn", " sig", "psGN", "SGN", "sagn", " sGN", "sGN", " sinn", "esGN", "Sgin", "esinn", "psgn", "psgen", "sgen", "esagn", "Sig", "Sgen", "Sagn", "rsgn", "rsig", "sgin", "asgen", "esgn", "rsgin", "Sinn", "rsGN"], "res": ["rss", "blocks", "rus", "pres", "hes", "ins", "rs", "arr", "powers", "vals", "ares", "pre", "qs", "es", " Res", "eps", "r", "rh", "cs", "results", "ps", "ces", "RES", "vs", "ms", "Rs", "os", "ches", "x", "cons", "resp", "rev", "ns", "result", "cases", "err", "ras", "ress", "ries", "values", "js", "ret", "ids", "css", "rys", "runs", "Res", "ons", "nos", "resolution", "resh", "re"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        B0Or1Swap solver = new B0Or1Swap();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B0Or1Swap {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int n = in.nextInt();\\n            int[] a = in.nextIntArray(n);\\n            int[] b = a.clone();\\n            int[] c = a.clone();\\n\\n            Arrays.sort(c);\\n\\n            boolean flag = false;\\n            for (int i = 0; i < n; i++) {\\n                for (int j = i + 1; j < n; j++) {\\n\\n                    int temp = b[i];\\n                    b[i] = b[j];\\n                    b[j] = temp;\\n                    boolean res = true;\\n\\n                    for (int k = 0; k < n; k++) {\\n                        if (c[k] != b[k]) {\\n                            res = false;\\n                            break;\\n                        }\\n                    }\\n\\n                    temp = b[i];\\n                    b[i] = b[j];\\n                    b[j] = temp;\\n\\n                    if (res == true) {\\n                        //out.println(b);\\n                        flag = true;\\n                        break;\\n                    }\\n\\n                }\\n            }\\n\\n            boolean same = true;\\n            for (int i = 0; i < n; i++) {\\n                if (b[i] != c[i]) {\\n                    same = false;\\n                    break;\\n                }\\n            }\\n\\n            if (flag || same) {\\n                out.println(\"YES\");\\n            } else {\\n                out.println(\"NO\");\\n            }\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void print(Object... objects) {\\n            for (int i = 0; i < objects.length; i++) {\\n                if (i != 0) {\\n                    writer.print(' ');\\n                }\\n                writer.print(objects[i]);\\n            }\\n        }\\n\\n        public void println(Object... objects) {\\n            print(objects);\\n            writer.println();\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public int[] nextIntArray(int n) {\\n            int[] array = new int[n];\\n            for (int i = 0; i < n; ++i) array[i] = nextInt();\\n            return array;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "82", "substitutes": {"inputStream": ["inputSteam", "outputSteam", "sourceSteam", "activestream", " inputReader", "inputThread", " inputSteam", "inputReader", "inputStreamer", " inputThread", "sourceReader", "sourceStream", "outputThread", "activeSteam", "outputStreamer", "activeStreamer", "requestStream", "requestStreamer", "outputReader", "outputstream", "requeststream", "activeStream", "inputstream", "sourceThread", "requestSteam"], "outputStream": ["outputWriter", "inputSteam", "outputSteam", " outputHandler", "Outputstream", "OutputStream", "OutputWriter", " outputSteam", "inputWriter", "writestream", "inputHandler", "OutputHandler", "writeStream", "writeSteam", " outputWriter", "OutputSteam", "outputstream", "outputHandler", "inputstream"], "in": ["this", "ic", "isin", "IN", "buffer", "id", "login", "ins", "din", "inside", "path", "line", "l", "data", "is", "request", "lin", "con", "r", "name", "part", "io", "source", "init", "info", "input", "win", "get", "In", "er", "f", "user", "s", "conn", "ini", "inn", "gen", "image", "index", "nin", "cin", "min", "gin", "inf", "inner", "o", "err", "ac", "again", "reader", "pin", "connection", "scan", "log", "bin", "from", "inc", "read"], "out": ["this", "self", "parent", "call", "target", "client", "buffer", "null", "one", "to", "server", "ex", "v", "version", "working", "page", "data", "point", "is", "extra", "r", "cmd", "io", "init", "conn", "s", "outer", "writing", "down", "user", "outside", "external", "output", "OUT", "w", "list", "plain", "writer", "left", "Out", "o", "inner", "err", "object", "again", "write", "net", "exec", "up", "no", "connection", "work", "log", "bin", "file", "outs", "inc", "off", "copy", "cache", "error", "loader", "array", "window", "sync"], "solver": [" solution", "Sugar", "ssolves", "ssolve", " sugar", "Solver", " setsolver", "ssolver", " setsolves", "ssolution", "solve", "solution", "solves", " setsolve", "Solution", " solves", "Solve", "ssugar", "sugar", " setsolution", " solve"], "testNumber": ["testGroup", " vecNumber", " sequenceGroup", " vecCounter", " testGroup", " testCounter", " vecGroup", " sequenceNumber", " sequenceCounter", "testCounter"], "n": ["nn", "nc", "nt", "ni", "count", "p", "size", "u", "na", "num", "nan", "N", "v", "l", "sn", "r", "z", "nl", "len", "f", "conn", "s", "ne", "m", "w", "x", "e", "o", "d", "ns", "network", "nb", "net", "no", "number", "y", "en", "t"], "a": ["p", "u", "ad", "span", "ba", "ar", "aa", "A", "input", "aj", "f", "au", "s", "ga", "at", "an", "sa", "ae", "e", "ai", "alpha", "o", "d", "ca", "va", "ac", "aaa", "ans", "as", "asa", "area", "ab", "da", "y", "am", "array"], "b": ["buff", "bi", "fb", "p", "mb", "bug", "u", "back", "rb", "ch", "binary", "v", "l", "db", "part", "r", "bf", "bh", "be", "h", "z", "bc", "bu", "app", "book", "bs", "f", "br", "m", "w", "x", "base", "bo", "build", "e", "o", "d", "g", "B", "body", "nb", "sb", "bb", "xb", "y", "bar", "ab", "ob", "t", "boot"], "c": ["cl", "count", "p", "C", "u", "ch", "v", "cu", "l", "con", "r", "z", "cs", "h", "bc", "cp", "f", "cm", "ci", "dc", "m", "x", "e", "col", "cf", "q", "ce", "o", "d", "code", "g", "ca", "ac", "cycle", "cd", "cc", "y", "cr", "cy", "array", "xc"], "i": ["bi", "hi", "ic", "api", "pi", "ori", "ni", "iu", "p", "ami", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "l", "mini", "is", "ri", "start", "io", "init", "info", "ci", "ui", "ini", "index", "eni", "phi", "x", "uri", "e", "di", "I", "ie", "ai", "o", "mi", "ii", "li", "yi", "chi", "y", "ki", "ind", "fi"], "j": ["jj", "jc", "p", "oj", "it", "u", "J", "ji", "v", "jp", "l", "ij", "z", "h", "end", "aj", "f", "ui", "key", "w", "x", "e", "jet", "ja", "uj", "q", "o", "d", "g", "ii", "li", "js", "je", "obj", "y", "jl", "t", "jo"], "temp": ["tmp", "offset", "empty", "count", "p", "test", "buffer", "size", "null", "emp", "id", "num", "it", "stable", "json", "tc", "v", "mini", "pre", "point", "partial", "extra", "start", "value", "init", "Temp", "z", "iter", "source", "cell", "get", "tem", "key", "style", "format", "index", "w", "base", "cut", "white", "pt", "min", "result", "err", "cycle", "current", "flat", "form", "template", "clean", "y", "wrap", "cache", "fake", "t", "pad"], "k": ["ky", "sk", "mk", "p", "ka", "it", "u", "ko", "ck", "id", "ke", "ks", "km", "v", "kick", "l", "kk", "ik", "ph", "end", "dk", "ok", "f", "ek", "key", "ak", "w", "x", "kw", "e", "kr", "q", "o", "unk", "d", "kn", "g", "kin", "kid", "K", "uk", "y", "ki"], "res": ["press", "reset", "rez", "rus", "ours", "pres", "rs", "arr", " Res", "vals", "rem", "r", "cs", "results", "reg", "ps", "RES", "vs", "rows", "os", "ms", "sum", "key", "cas", "mr", "cons", "rev", "result", " results", "err", "details", "gr", "ress", "ras", "js", "yes", "ret", "req", "ris", "rys", "Res", "nos", "resolution", "resh", "re"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tString line1 = sc.nextLine();\\n\t\tString[] string1 = line1.split(\" \");\\n\t\tint n = Integer.parseInt(string1[0]);\\n\t\tint m = Integer.parseInt(string1[1]);\\n\t\tint l = Integer.parseInt(string1[2]);\\n\\n\t\tString[][] gyouA = new String[n][m];\\n\t\tint[][] A = new int[n][m];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tString line2 = sc.nextLine();\\n\t\t\tfor (int j = 0; j < m; j++) {\\n\t\t\t\tString[] string = line2.split(\" \");\\n\t\t\t\tgyouA[i][j] = string[j];\\n\t\t\t\tA[i][j] = Integer.parseInt(gyouA[i][j]);\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tString[][] gyouB = new String[m][l];\\n\t\tint[][] B = new int[m][l];\\n\t\tfor (int i = 0; i < m; i++) {\\n\t\t\tString line3 = sc.nextLine();\\n\t\t\tfor (int j = 0; j < l; j++) {\\n\t\t\t\tString[] string = line3.split(\" \");\\n\t\t\t\tgyouB[i][j] = string[j];\\n\t\t\t\tB[i][j] = Integer.parseInt(gyouB[i][j]);\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tlong AB = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tfor (int j = 0; j < l; j++) {\\n\t\t\t\tlong C = 0;\\n\t\t\t\tfor (int k = 0; k < m; k++) {\\n\t\t\t\t\tAB = A[i][k] * B[k][j];\\n\t\t\t\t\tC += AB;\\n\t\t\t\t}\\n\t\t\t\tif (j == l - 1) {\\n\t\t\t\t\tSystem.out.print(C);\\n\\n\t\t\t\t} else {\\n\t\t\t\t\tSystem.out.print(C + \" \");\\n\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t}\\n}", "target": "204", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "sf", "scope", "pc", "class", "ch", "sec", " SC", "cur", "asc", "sh", "Sc", "SC", "ct", "stream", "bc", "cv", "cs", "sw", "src", "lc", "sl", "c", " scr", "sp", "acc", "ec", "system", "g", "sem", "se", "ner", " Sc", "ocr", "anc", "sm", "scan", "parse", "sel", "osc", "rc", "cc", "cr", "sch", "parser", "spec", "out", "esc", "sync"], "line1": ["lineOne", "linOne", "LineFirst", "LineHead", "lin1", "Line2", " lineL", "linHead", "line0", " lineOne", "lineL", "linFirst", "LineOne", "LINE1", "lineFirst", "Line0", "lin0", "lineHead", "LINEFirst", "LINEHead", "lin2", "linL", "Line1", "LineL", "LINE0"], "string1": ["lineOne", "section2", " string51", "number1", "StringOne", "String0", " stringId", "row1", "stringId", " stringOne", "sectionOne", "String2", "line0", "row5", "numberOne", "section1", " string2", "line51", "stringOne", "numberId", "row51", "line5", "String1", "string51", "string0", " string5", "string2", "StringId", "number2", "string5", "rowOne", "section0", "number0", " string0"], "n": ["nn", "nc", "p", "u", "N", "ln", "M", "v", "a", "sn", "r", "z", "h", "len", "f", "s", "c", "ne", "w", "x", "an", "e", "o", "L", "d", "ns", "g", "b", "ii", "network", "li", "net", "no", "in", "mn", "y", "en", "t", "ll"], "m": ["im", "ml", "p", "u", "om", "ln", "M", "v", "a", "mm", "r", "h", "z", "len", "f", "cm", "s", "c", "w", "x", "an", "ym", "mu", "e", "ul", "o", "L", "d", "g", "b", "li", "sm", "in", "hm", "mn", "y", "en", "t", "ll"], "l": ["fl", "p", "u", "ln", "v", "line", "el", "lin", "ls", "al", "lu", "z", "h", "nl", "len", "length", "f", "lc", "loc", "sl", "s", "c", "list", "e", "pl", "o", "L", "d", "g", "kl", "b", "ii", "li", "dl", "ol", "y", "ll", "t", "il"], "gyouA": ["ggouB", "gyaoA", "gyouP", "gyouArray", "hyouP", "hyouC", "hyouAs", "hyoufA", "gyoufAlpha", "gyaoArray", "gyouAs", "hyoufP", "gyaoCA", "hyoufAs", "hyoufC", "ghouA", "ghaoD", "gyourA", "gyoufB", "ghouArray", "ggouAlpha", "ghaoA", "gyuA", "ghaoCA", "gyooA", "ggouArray", "ghouD", "gyoufAs", "gyoufArray", "gyouCA", "ggooB", "gyoulArray", "hyouA", "gyooP", "gyuC", "gyuCA", "ggooA", "gyoufC", "ggouA", "gyourArray", "gyooB", "gyuArray", "gyourAlpha", "gyooArray", "gyaoD", "gyoufA", "ghouCA", "gyoufP", "gyourB", "gyoulCA", "gyuP", "gyooAlpha", "ghaoArray", "gyouC", "gyooAs", "ggooAlpha", "gyoulA", "gyouD", "gyooC", "gyoulD", "gyuAs", "gyouAlpha", "gyuD", "ggooArray"], "A": ["S", "AS", "AR", "AM", "NA", "An", "N", "AA", "M", "LA", "a", "As", "Y", "Array", "U", "F", "mA", "AP", "P", "SA", "Am", "API", "T", "I", "At", "alpha", "L", "Alpha", "Ar", "V", "AF", "K", "All", "CA", "G", "am", "array", "X"], "i": ["bi", "hi", "im", "api", "ori", "pi", "ni", "iu", "p", "it", "u", "id", "qi", "ji", "xi", "v", "anti", "si", "ix", "a", "ij", "is", "ik", "ri", "idi", "io", "z", "info", "f", "ci", "c", "ui", "ini", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ie", "ai", "q", "o", "gi", "d", "mi", "cli", "ii", "b", "zi", "iv", "li", "oi", "yi", "in", "chi", "y", "ki", "fi"], "line2": ["lin1", "lin8", "Line2", "line8", "Line02", "line4", "lin02", "lin4", "LineTwo", "file2", "line02", " line4", "file4", "lineTwo", "file02", " lineTwo", "file8", " line8", "lin2", "Line1", " line02", "linTwo"], "j": ["jj", "jc", "p", "oj", "it", "u", "adj", "J", "qi", "ch", "ji", "json", "v", "jp", "pr", "ix", "a", "el", "ij", "fr", "part", "jon", "z", "h", "aj", "length", "f", "ion", "br", "ui", "c", "key", "index", "w", "x", "e", "di", "jet", "ja", "pt", "uj", "col", "ie", "q", "jit", "gi", "d", "o", "g", "ii", "b", "li", "em", "js", "je", "obj", "y", "jl", "jen", "ind", "t", "jo"], "string": ["ident", "single", "unit", "function", "space", "message", "integer", "slice", "service", "binary", "date", "filename", "version", "strings", "line", "STR", "data", "page", "name", "value", "source", "resource", "letter", "list", "uri", "str", "text", "comment", "object", "site", "ring", "field", "type", "group", "file", "number", "word", "address", "struct", "area", "section", "member", "array"], "gyouB": ["gaouY", "zyauF", "gyouP", "zyouB", "gyouE", "zyauB", "ghouE", "zyouL", "gyouL", "gyaoF", "ghooP", "zyouC", "gyoupY", "gyoD", "gaouL", "gyuL", "gyauL", "gyoufB", "ghooE", "gyouF", "gaouM", "gaoufL", "gykuB", "gaoufY", "gyuB", "gyuF", "gykuL", "gaouB", "zyouF", "gyoufM", "ghouD", "gyoupM", "gyaoL", "gykuY", "gyooE", "ghooD", "gyooP", "gyuC", "gyoupL", "gyouM", "gyaoB", "gyoufY", "zyauL", "gyoufL", "gyoB", "gyooB", "zyauC", "ghouP", "gyaoC", "gyauC", "gykuM", "gyoE", "gyoupB", "gyauF", "gyauB", "gyuP", "ghooB", "gyouC", "gaoufB", "ghouB", "gyuE", "gyooD", "gyouY", "gyouD", "gaoufM", "gyoP", "gyuD"], "B": ["BL", "S", "Bs", "SB", "J", "N", "M", "BI", "U", "Y", "F", "BA", "Q", "P", "BB", "BC", "T", "I", "L", "R", "b", "BE", "V", "DB", "K", "NB", "D", "O", "Z", "G", "W", "E", "X"], "line3": [" line03", "pass3", " line103", "line103", "line23", "pass63", "liner3", "liner63", "pass03", "LineThree", "liner03", " line23", "Line03", "line03", "fileThree", " lineThree", "file03", " line63", "Line3", "lineThree", "pass103", "Line23", "file3", "line63", "file23", "liner103"], "AB": ["AD", "AV", "EC", "AR", "CO", "SB", "BF", "AE", "AA", "ACA", "TA", "CC", "CH", "CON", "CR", "QB", "UB", "BA", "CAP", "IGN", "AG", "BB", "SA", "BC", "PA", "AT", "CM", "CP", "ACC", "LAB", "Ab", "AL", "ABC", "AF", "AC", "OB", "CV", "CA", "ab", "AH", "EB", "DB"], "C": ["CU", "S", "EC", "AR", "CO", "CI", "AE", "COR", "N", "M", "CC", "CN", "CH", "CF", "CCC", "U", "CE", "CAR", "CG", "F", "CT", "CAP", "IGN", "P", "BB", "BC", "c", "KC", "CD", "T", "NC", "CM", "L", "GC", "CNN", "ABC", "AF", "AC", " c", "K", "DC", "D", "CV", "O", "CA", "G", "W", "E"], "k": ["sk", "mk", "p", "ka", "it", "u", "id", "ko", "ck", "ch", "ke", "ks", "km", "v", "kk", "ik", "z", "ok", "f", "ek", "c", "key", "ak", "w", "x", "e", "kw", "kr", "q", "o", "d", "g", "kn", "kin", "b", "ner", "K", "uk", "in", "y", "ki", " K", "th"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Stack;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in); \\n\\n\t\tStack<Integer> stack = new Stack<Integer>();\\n\t\t\\n\t\tfor (; sc.hasNext(); ) {\\n\t\t\tif (sc.hasNextInt()) {\\n\t\t\t\tstack.push(sc.nextInt());\\n\t\t\t} else {\\n\t\t\t\tchar op = sc.next().charAt(0);\\n\t\t\t\tint b = stack.pop();\\n\t\t\t\tint a = stack.pop();\\n\t\t\t\tint result;\\n\t\t\t\tswitch (op) {\\n\t\t\t\tcase '+':\\n\t\t\t\t\tresult = a + b;\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '-':\\n\t\t\t\t\tresult = a - b;\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '*':\\n\t\t\t\t\tresult = a * b;\\n\t\t\t\t\tbreak;\\n\t\t\t\tdefault:\\n\t\t\t\t\tresult = -1;\\n\t\t\t\t}\\n\t\t\t\tstack.push(result);\\n\t\t\t}\\n\t\t}\\n\t\t\\n    \tSystem.out.println(stack.pop());\\n    \t\\n        sc.close();\\n\t}\\n}", "target": "114", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "sf", "scope", "pc", "core", "com", "ch", "sec", "tc", " SC", "cur", "sub", "asc", "sh", "fc", "Sc", "SC", "screen", "cb", "cs", "bc", "cv", "src", "sw", "co", "lc", "conn", "sl", "dc", "c", "contract", " scr", "sp", "system", "uc", "soc", "sr", "se", "ner", " Sc", "anc", "scan", "osc", "cd", "rc", "cc", "cr", "cont", "sch", "parser", "coll", "spec", "ec", "esc", "ctx", "cus", "sync"], "stack": ["que", "counter", "cl", "chain", "scope", "buffer", "slice", "queue", "tc", "view", "pool", "progress", "diff", "stage", "iter", "roll", "batch", "source", "stream", "lc", "sl", "c", "via", "acks", "index", "forward", "history", "load", "list", "depth", "pack", "sp", "Stack", "ack", "st", "pop", "left", "str", "context", "set", "cli", "loop", "push", "up", "parse", "scale", "sequence", "tree", "reverse", "layer", "inc", "console", "cache", "pull", "array"], "op": ["operation", "cop", "operator", "effect", "api", "oper", "opus", "hop", "opt", "p", " OP", "class", "id", "num", "Op", "apply", "name", " operator", "comp", "vert", "app", "OP", "cmp", "loc", "gen", "key", "bit", " operation", "ops", "ip", "mp", "pop", "opp", "code", "o", "expr", "prev", "prop", "pos", "type", "proc", "fix", "error", "post", "append"], "b": ["fb", "bi", "p", "u", "pb", "abb", "rb", "ad", "v", "i", "ba", "l", "ib", "r", "bf", "aa", "be", "z", "h", "lb", "end", "A", "bs", "f", "eb", "s", "c", "ga", "or", "x", "base", "e", "o", "d", "n", "B", "ac", "j", "sb", "bb", "y", "wb", "ab"], "a": ["ana", "api", "p", "ia", "na", "ad", "auto", "ba", "i", "aa", "z", "A", "oa", "pa", "f", "au", "c", "ga", "an", "x", "sa", "ae", "ea", "e", "aka", "alpha", "n", "ca", "ac", "qa", "aaa", "sta", "ama", "fa", "as", "y", "la", "area", "ab", "da", "ma", "va", "aj"], "result": ["counter", "score", "effect", "status", "function", "successful", "compl", "expected", "val", "message", "division", "test", "id", "average", "res", "search", "page", "data", "progress", "answer", "diff", "continue", "mask", "valid", "value", "entry", "error", "results", "info", "length", "cmp", "winner", "instance", "feature", "account", "done", "acc", "grade", "Result", "success", "goal", "rank", "runner", "alpha", "err", "card", "current", "obj", "root", "ult", "step", "response", "master", "found", "type", "ret", "number", "exit", "inc", "match", "default"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main{\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int[] dish = new int[n];\\n        int[] gain = new int[n];\\n        int[] bonus = new int[n-1];\\n        for(int i=0;i<n;i++){\\n            dish[i] = Integer.parseInt(sc.next());\\n        }\\n        for(int i=0;i<n;i++){\\n            gain[i] = Integer.parseInt(sc.next());\\n        }\\n        for(int i=0;i<n-1;i++){\\n            bonus[i] = Integer.parseInt(sc.next());\\n        }\\n\\n        int sum = 0;\\n        int prev = n+1;\\n        for(int i=0;i<n;i++){\\n            sum += gain[dish[i]-1];\\n            if(dish[i]==(prev+1)){\\n                sum += bonus[prev-1];\\n            }\\n            prev = dish[i];\\n        }\\n        System.out.println(sum);\\n    }\\n}", "target": "223", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sk", "sf", "scope", "pc", "class", "ser", "ch", "tc", "sec", " SC", " rc", "asc", "sh", "Sc", "SC", "scl", "cs", "bc", "cv", "sw", "BC", "lc", "loc", "c", "cer", " scr", "sp", "spec", "ec", "system", "uc", "soc", "sync", "sr", "cli", "cle", "se", "ner", "anc", "sb", "ocr", "scan", "parse", "isc", "osc", "rc", "cc", "cr", "sch", "parser", "squ", "cam", "out", "esc", "ctx", "cus", "coll"], "n": ["nn", "nt", "count", "p", "size", "na", "u", "num", "nan", "N", "ln", "v", "cn", "l", "sn", "r", "z", "nl", "len", "f", "nat", "s", "c", "inn", "ne", "m", "w", "x", "e", "o", "d", "kn", "ns", "b", "g", "network", "nb", "j", "net", "k", "no", "in", "not", "mn", "non", "number", "y", "zn", "en", "t"], "dish": ["dic", " dishes", "datill", "datishes", "sdise", "pish", "indity", "mishing", "zish", "dedise", "dive", " ditch", "inditch", "dedish", " diss", "sdisk", "sdidy", "dished", "ddished", "madish", "zic", " dill", "ditch", " dise", " dic", "indish", "disk", " dishing", "indished", "mished", "mity", "datish", " dished", "indisk", "sditch", " didy", "indiss", "diss", "ddish", "madished", " disk", "pished", " dive", "didy", "dedishing", "dise", "pishing", "ddishing", "zishes", "datic", "dishing", "dill", "sdishing", "dity", "zill", "dishes", "mish", "dedidy", "sdish", "sdiss", "pive", "indishing", "madity", "ddive", "madishing"], "gain": ["gross", "effect", "ward", "bank", "skill", "prefix", "secret", "cost", "advant", "span", "average", "loss", "mask", "gate", "vine", "gap", "win", "charge", "fee", "gen", "winner", "feature", "improve", "password", "weight", "rain", "forward", "acc", "han", "ack", "grade", "alpha", "ain", "ean", "g", "rank", "limit", "padding", "ac", "cover", "pin", "scan", "group", "bin", "inc", "gn", "ill", "shape", "strength", "learn", "pad", "can", "thin"], "bonus": ["baas", "taxas", "taxu", "bonulus", "annus", "generus", "boninus", "taxian", "minulus", "bonics", "cashuses", "basulus", "basus", "cashics", "minius", "cashian", "bonuses", "bau", "generas", "generu", "bonius", "generuses", "generinus", "bauses", "bonian", "bonas", "annuses", "taxics", "taxus", "annics", "basius", "generulus", "minus", "basinus", "taxuses", "baus", "mininus", "generius", "bonu", "cashus", "annian"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "slice", "multi", "qi", "ei", "xi", "ji", "next", "v", "si", "ix", "l", "ik", "ri", "uli", "start", "io", "init", "info", "z", "abi", "f", "lc", "ci", "ui", "ini", "index", "m", "phi", "x", "eni", "uri", "mu", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "shift", "mi", "cli", "ii", "zi", "b", "li", "j", "oi", "yi", "chi", "y", "conv", "ti", "fi"], "sum": ["um", "total", "cat", "conf", "share", "count", "size", "cost", "num", "summary", "average", "ass", "vol", "help", "loss", "sort", "sign", "diff", "use", "exp", "aa", "cal", "percent", "last", "user", "key", "us", "index", "weight", "cos", "acc", "cum", "min", "alpha", "miss", "comment", "Sum", "result", "fat", "frac", "parse", "scale", "chi", "bin", "mean", "inc", "shape", "real", "cache", "error", "out", "fee", "mem"], "prev": ["counter", "hi", "wp", "offset", "jj", "ori", "initial", "p", "prefix", "adj", "pres", "jump", "next", "par", "neg", "v", "jp", "before", "keep", "cur", "pre", "right", "rh", "start", "gap", "block", "iter", "above", "first", "orig", "cmp", "last", "winner", "upper", "vs", "feature", "loc", "history", "np", "rev", "skip", "op", "iv", "current", "vious", "Prev", "j", "sup", "reverse", "rel", "trial", "nav", "batch", "bp"]}}
{"code": "import java.util.Scanner;\\nimport java.util.ArrayList;\\n \\npublic class Main {\\n  final static int max = 100;\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n      int i = 0;\\n      String N;     \\n        long A = scan.nextLong();\\n        double B = scan.nextDouble();\\n     //   System.out.println(a[i]);\\n        cal(A,B);\\n        scan.close();\\n    }\\n  \\n  public static void cal(long a,double b){\\n     long s = 0;\\n     long bb;\\n    bb = Math.round(b*100);\\n     s = a*bb/100;\\n     System.out.println(s);\\n  }\\n}", "target": "15", "substitutes": {"max": ["maximum", "total", "conf", "count", "size", "id", " Max", "num", " limit", "auto", "page", "std", "start", "row", "last", "ax", "w", "base", "min", "rest", "Max", " MAX", "limit", "seed", "scale", "MAX", "random", "batch"], "scan": ["nn", "cat", "see", "watch", "connect", "walk", "na", "ser", "ln", "span", "search", "l", "fan", "r", "can", "start", "row", "app", "man", "gen", "conn", "report", "plan", "feed", "an", "system", "read", "skip", "inner", "n", "sync", "kin", "ignore", "se", "ner", "reader", "pin", "in", "parse", "Scan", "clean", "san", "ans", "pan", "parser", "sc", "array", "ann", "query"], "i": ["pi", "count", "p", "it", "id", "v", "si", "l", "a", "start", "c", "index", "m", "x", "ip", "I", "ai", "d", "n", "ii", "limit", "b", "li", "j", "k", "in", "t"], "N": ["S", "SN", "NL", "C", "J", "M", "F", "P", "T", "I", "L", "R", "n", "V", "K", "NB", "D", "NT", "NV", "O", "Ns", "Z", "number", "G", "NS", "E"], "A": ["AD", "S", "AR", "NA", "C", "J", "M", "LA", "a", "U", "Y", "Array", "MA", "F", "P", "T", "I", "R", "Ar", "V", "D", "CA", "G", "W"], "B": ["BL", "Bs", "C", "SB", "J", "BF", "M", "BI", "Y", "F", "WB", "E", "BA", "BB", "P", "BC", "BS", "I", "R", "b", "V", "BD", "NB", "OB", "BM", "G", "W", "AB"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\tint a = in.nextInt();\\n\t\tint b = in.nextInt(); in.nextLine();\\n\t\tString s = in.nextLine();\\n\t\tString ans = \"No\";\\n\t\tif( s.contains(\"-\") ) {\\n\t\t\tString[] arr = s.split(\"-\");\\n\t\t\tif( arr.length == 2 ) {\\n\t\t\t\tif( arr[0].length() == a && arr[1].length() == b ) ans = \"Yes\";\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}", "target": "78", "substitutes": {"in": ["this", "isin", "rec", "p", "login", "ins", "serv", "ln", "din", "arin", "inside", "i", "line", "data", "is", "lin", "con", "r", "part", "init", "source", "input", "In", "f", "er", "conn", "inn", "ini", "c", "ax", "nin", "e", "str", "cin", "token", "inf", "inner", "rin", "n", "cli", "err", "kin", "pass", "again", "reader", "pin", "exec", "scan", "connection", "log", "bin", "readable", "as", "inc", "doc", "parser", "reading", "IN", "out", "thin", "re"], "a": ["ana", "api", "p", "ia", "na", "u", "ad", "ba", "i", "ao", "aa", "A", "oa", "pa", "au", "c", "an", "sa", "ae", "ai", "alpha", "d", "n", "ca", "ac", "wa", "aaa", "ama", "as", "la", "asa", "area", "ab", "da", "am", "va", "aj"], "b": ["fb", "p", "mb", "v", "i", "ba", "l", "ib", "bis", "r", "aa", "z", "h", "lb", "bc", "bs", "f", "pa", "c", "m", "w", "x", "e", "o", "d", "n", "B", "abc", "body", "nb", "j", "k", "sb", "bb", "beta", "bot", "bd", "y", "wb", "ab", "bar", "emb", "ob", "bp"], "s": ["aws", "S", "ts", "blocks", "sections", "p", "u", "ins", "ss", "rs", "v", "si", "i", "strings", "l", "es", "sv", "ls", "r", "fs", "ps", "f", "sl", "tests", "c", "ds", "os", "m", "parts", "e", "string", "ses", "abs", "d", "n", "ns", "sets", "su", "sb", "xs", "array", "sync"], "ans": ["nn", "ana", "aos", "annis", "AN", "ars", "aned", "anas", "ases", "na", "ins", "An", "aus", "ks", "span", "ss", "lan", "anon", "ar", "ares", "arn", "ions", "reads", "ls", "anges", "ens", "aks", "cs", "os", "nas", "cas", "ds", "plan", "ros", "ants", "an", "cons", "ANS", "anks", "arts", "Ann", "ents", "ns", "ras", "ats", "yes", "anc", "tan", "anus", "ones", "san", "unders", "as", "annot", "anners", "ons", "aning", "ays", "ant", "ann"], "arr": ["all", "div", "enc", "cat", "arc", "vec", "val", "arm", "patch", "ch", "pr", "ext", "ar", "asc", "data", "el", "fr", "part", "r", "adr", "aa", "attr", "app", "char", "dr", "air", "br", "pair", "arg", "var", "list", "parts", "img", "str", "arch", "Str", "feat", "prev", "abc", "err", "rr", "ner", "obj", "att", "art", "av", "our", "inc", "array", "ann", "coll"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint K = sc.nextInt();\\n\t\tint X = sc.nextInt();\\n\t\tfor (int i=X-K+1;i<K+X;i++) {\\n\t\t\tSystem.out.print(i);\\n\t\t\tSystem.out.print(\" \");\\n\t\t}\\n\t}\\n}\\n", "target": "207", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "pc", "class", "ser", "com", "ch", "tc", "ss", "server", " SC", "cur", "asc", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "app", "src", "c", "cer", "sp", "str", "acc", "sq", "uc", "ca", "sem", "se", "ner", " Sc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "ec", "esc", "sync"], "K": ["KK", "C", "IK", "J", "N", "M", "CH", "U", "Y", "NK", "Work", "F", "Q", "KO", "P", "A", "HK", "Sk", "T", "I", "Mask", "CP", "PK", "L", "Max", "V", "k", "D", "H", "Z", "KI", "O", "UK", "G", "KE", "KS", "SK", "E", "FK"], "X": ["S", "C", "J", "N", "M", "U", "Y", "Location", "F", "Q", "CL", "P", "A", "XX", "x", "I", "Xi", "TX", "L", "DX", "R", "IX", "XP", "V", "D", "H", "Z", "O", "G", "MAX", "W", "E", "XL"], "i": ["bi", "pi", "ni", "p", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "si", "ix", "a", "ri", "start", "io", "z", "h", "abi", "info", "f", "ci", "vi", "c", "ui", "ini", "index", "x", "uri", "ip", "e", "di", "I", "ai", "o", "gi", "d", "n", "ii", "b", "zi", "li", "j", "k", "oi", "step", "in", "chi", "number", "ti", "fi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int in = Integer.parseInt(s.nextLine());\\n        String[] in2  = s.nextLine().split(\" \");\\n        List<Integer> l = new ArrayList<Integer>();\\n        for(int i = 0;i<in;i++){\\n            l.add(Integer.parseInt(in2[i]));\\n        }\\n        List<Integer> sorted = new ArrayList<Integer>(l);\\n        Collections.sort(sorted);\\n        int count = 0;\\n        for(int i = 0;i<l.size();i++){\\n            int prev = l.get(i);\\n            int curr = sorted.get(i);\\n            if(prev != curr){\\n                count++;\\n            }\\n        }\\n        System.out.println(count == 0 || count == 2 ? \"YES\" : \"NO\");\\n    }\\n}", "target": "82", "substitutes": {"s": ["S", "p", "u", "ins", "ss", "opens", "v", "si", "strings", "bis", "qs", "is", "ls", "r", "ws", "fs", "its", "ps", "f", "er", "sl", "os", "c", "ds", "ms", "rows", "us", "w", "gets", "e", "ssl", "ses", "string", "o", "abs", "d", "n", "g", "ns", "b", "gs", "sys", "se", "sb", "ans", "as", "out"], "in": ["isin", "include", "id", "login", "ins", "din", "ex", "inside", "line", "data", "into", "lin", "std", "con", "diff", "start", "init", "win", "input", "In", "user", "inn", "ini", "arg", "index", "m", "unin", "OUT", "nin", "between", "min", "inf", "inner", "d", "n", "err", "limit", "pass", "reader", "exec", "from", "bin", "readable", "as", "inc", "IN", "out", "re"], "in2": ["insSecond", " inTwo", "ins02", "inTwo", "IN2", "in02", "INSecond", "IN02", "inc02", "INTwo", "incsecond", "inSecond", "iniTwo", "ini2", " inSecond", " insecond", "ini02", "incTwo", "inc2", "insTwo", "inisecond", "ins2", "insecond", " in02"], "l": ["bl", "les", "fl", "u", "ln", "v", "lic", "le", "el", "lr", "ls", "r", "lu", "z", "nl", "lp", "ler", "lc", "sl", "lo", "list", "e", "pl", "left", "ul", "o", "L", "lv", "ld", "kl", "li", "dl", "lt", "ol", "il", "lists", "rl", "la", "lf", "wl", "jl", "t", "ll"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "is", "ri", "r", "start", "io", "init", "h", "info", "z", "abi", "f", "ci", "ui", "ini", "c", "index", "m", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "q", "o", "inner", "d", "mi", "gi", "ii", "b", "li", "current", "j", "oi", "yi", "chi", "y", "ti", "fi"], "sorted": ["ansorted", "ansort", "unsorted", "ansorter", "sorters", "insorter", "insorted", "sorting", "isorter", "sort", "Sorting", " sorter", "isort", "insort", "ansorters", "unsorting", "unsorter", "Sorted", " sort", "unsort", "sorter", " sorting", "isorted", " sorters", "Sorter", "Sort", "isorting", "insorters"], "count": ["counter", "total", "parent", "call", "nt", "empty", "age", "Count", "size", "more", "now", "id", "next", "allow", "add", "old", "part", "diff", "start", "info", "len", "length", "last", "c", "sum", "key", "order", "check", "weight", "depth", "base", "list", "col", "state", "max", "code", "err", "loop", "cache", "current", "time", "child", "force", "found", "type", "level", "number", "cc", "close", "error", "default", "coll"], "prev": ["div", "parent", "rec", "vec", "next", "jp", "before", "cur", "pre", "info", "nr", "first", "orig", "cmp", "last", "loc", "upper", "winner", "ip", "mp", "resp", "rev", "max", "lv", "op", "pred", "iv", "current", "vious", "Prev", "sup", "obj", "root", "reverse", "rel", "Previous", "ref", "post", "coll"], "curr": ["curl", " curl", " currc", "corl", " currs", "errs", "Currc", "curb", "terrs", "Curren", "currc", "corr", "erb", "currs", "Currs", " curb", "err", "corrs", " curren", "terr", "curren", "Curr", "corb", "erl", "terrc", "terren"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\\n\t\t\\n\t\tlong a = Long.parseLong(st.nextToken());\\n\t\tdouble b = Double.parseDouble(st.nextToken());\\n\t\t\\n\t\tlong c = (long)(b * 100.0 + 0.5);\\n\t\tlong res = a * c / 100;\\n\t\tSystem.out.println(res);\\n\t}\\n\\n}", "target": "15", "substitutes": {"br": ["bl", "bed", "ber", "hr", "rb", "ch", "browser", "tr", "arr", "db", "cb", "fr", "bf", "r", "bh", "yr", "io", "bridge", "bc", "bs", "dr", "mr", "BR", "sp", "bro", "str", "Br", "abs", "sr", "err", "body", "gr", "reader", "obj", "buf", "sb", "bb", "form", "bt", "cr", "bar", "ref"], "st": ["bl", "ut", "cl", "ste", "inst", "sth", "ST", "ss", "stack", "sh", "const", "db", "ct", "sn", "std", "sv", "fr", "r", "src", "sl", "s", "est", "sp", "sa", "str", "ist", "string", "pt", "stri", "rest", "d", "ld", "sr", "St", "stand", "se", "sb", "lt", "sta", "ast", "sts", "rd", "struct", "cr", "ost", "tt", "rt", "sc", "t"], "a": ["aw", "p", "ia", "u", "ad", "ba", "i", "l", "cb", "r", "aa", "z", "A", "oa", "pa", "f", "au", "an", "sa", "ae", "ea", "alpha", "o", "d", "af", "n", "ca", "ac", "aaa", "bb", "ama", "y", "ab", "da", "am", "va", "aj"], "b": ["fb", "p", "mb", "abb", "rb", "ad", "v", "i", "ba", "l", "ib", "db", "cb", "r", "bf", "aa", "bc", "A", "gb", "bs", "eb", "f", "s", "x", "e", "d", "g", "B", "abc", "ac", "sb", "bb", "bd", "y", "ab", "ob"], "c": ["nc", "count", "p", "pc", "u", "C", "ad", "i", "l", "fc", "cu", "cb", "r", "z", "bc", "f", "lc", "ci", "dc", "x", "e", "uc", "cf", "o", "d", "n", "ca", "ac", "cd", "cc", "y", "ab", "cy", "ec", "unc"], "res": ["func", "vec", "rus", "rez", "des", "rs", "arr", " Res", "vals", "out", "es", "rh", "bytes", "exp", "cs", "results", "reg", "RES", "rows", "os", "ms", "sum", "cas", "base", "cons", "resp", "cum", "rev", "abs", "result", "err", "details", "ras", "rex", "frac", "ret", "req", "Res", "resolution", "rates", "re"]}}
{"code": "/*package whatever //do not write package name here */\\n\\nimport java.io.*;\\nimport java.util.*;\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner input = new Scanner(System.in);\\n\t\tdouble n = input.nextDouble();\\n\t\tdouble ans = (n*n*n)/27.0;\\n\t\tSystem.out.printf(\"%.12f\",ans);\\n\t\t\\n\t}\\n}", "target": "53", "substitutes": {"input": ["this", "client", "buffer", "null", "next", "view", "i", "l", "data", "request", "control", "r", "io", "iter", "stream", "method", "source", "f", "s", "image", "c", "filter", "feed", "index", "output", "config", "Input", "text", "socket", "inf", "context", "g", "result", "accept", "reader", "qa", "form", "scan", "in", "iterator", "inc", "flow", "pull", "out"], "n": ["nn", "none", "rn", "nc", "nt", "p", "nor", "na", "num", "nan", "N", "ln", "span", "anon", "cn", "i", "l", "a", "sn", "un", "h", "nl", "f", "nat", "conn", "s", "c", "ne", "m", "an", "x", "nin", "node", "o", "d", "ns", "network", "nb", "pn", "j", "net", "k", "in", "mn", "Ns", "number", "gn", "en", " N"], "ans": ["ana", " sins", "AN", "anas", "aned", " nas", "ars", "anned", "na", "ins", "An", "nan", "anon", "lan", " spans", "atan", "es", "ions", "ls", "ens", "cs", "ians", "s", " an", "os", "cas", "ds", "nes", "an", "cons", " Ans", "ANS", "Ann", "ents", "ns", "anan", "ats", "anc", "scan", " ants", "as", "ons", " scans", "aning", "ann"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String S = sc.next();\\n        String ans = \"No\";\\n        if(S.substring(S.length() / 2).equals(S.substring(0, S.length() / 2))) ans = \"Yes\";\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "161", "substitutes": {"sc": ["sche", "enc", "sci", "nc", "sf", "scope", "pc", "class", "ser", "ch", "tc", "ss", " SC", "cur", "sub", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "cv", "lc", "ci", "sl", "c", "cer", "sp", "str", "sq", "uc", "sr", "se", "ner", " Sc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "n": ["nn", "nc", "nt", "ni", "Num", "num", "ln", "N", "l", "sn", "name", "nl", "len", "nr", "f", "s", "c", "ne", "m", "ns", "pn", "nb", "j", "net", "k", "Ns", "t", " N"], "S": ["SI", "Sin", "SS", "Is", "SL", "ST", "SN", "IS", "Sample", "Socket", "C", "Standard", "Part", "VS", "TS", "US", "N", "ss", "M", "OS", "SE", "STR", "U", "SU", "SH", "GS", "None", "F", "As", "Si", "Service", "WS", "SA", "A", "P", "Single", "Su", "In", "BS", "s", "Des", "SM", "Site", "SO", "T", "I", "string", "L", "R", "B", "V", "Text", "Default", "D", "O", "NS", "DS", "SR", "SK", "W", "Source", "Sl", "X"], "ans": ["nn", "ana", "acts", " sins", "AN", "ars", "sk", "annis", "aned", "vers", "na", "ins", "An", "nan", "ks", "aus", "lan", "acs", "asts", "atan", "ions", "ls", "eps", "ips", "cs", " answers", "vs", "s", "os", "nas", "cas", "nes", "ds", "ags", "ants", "an", " means", " ann", "cons", " Ans", "ANS", "Ann", "ean", "ns", "ents", "ras", "ats", "anc", "ANN", "san", "annot", " news", " chars", "anners", "ons", " scans", "aning", "ays", "ann", " caps"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n        Scanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n        long[] harr = new long[N];\\n\\n        for (int i=0; i<N; i++) {\\n            harr[i] = scanner.nextLong();\\n        }\\n\\n        int result = 0;\\n        for (int i=0; i< N-1; i++) {\\n            if (result >= (N-1 - i)) break;\\n            int tmp = 0;\\n            for (int k=i; k< N-1; k++) {\\n                if (harr[k] >= harr[k+1]) {\\n                    tmp++;\\n                } else {\\n                    break;\\n                }\\n            }\\n            if (tmp > result) {\\n                result = tmp;\\n            }\\n        }\\n\\n        System.out.println(result);\\n    }\\n}", "target": "187", "substitutes": {"scanner": [" scaner", " scanener", "Scaninner", "hanner", "scanker", "scanr", "caner", " scanr", "canning", "caninner", "haner", "scanener", "nerner", "Scanener", "canker", "hanning", "Scanr", "scaner", "nerning", "canener", "Scanker", "nerer", "scanning", "Scaner", "hanker", "nerker", "canr", "canner", "haninner", "Scanner", "scaninner"], "N": ["MN", "Len", "S", "Num", "No", "NA", "Count", "C", "Part", "J", "M", " n", "Size", "Bi", "U", "Y", "F", "Network", "Number", "Q", "NN", "P", "Na", "T", "I", "Ni", "NC", "L", "R", "Max", "n", "B", "NR", "Ne", "Limit", "V", "K", "ND", "D", "NT", "H", "Z", "Ns", "NS", "O", "X"], "harr": [" hadr", "hbr", "hara", " hray", "shars", "Har", "iharr", "par", "Hray", "harp", "bhara", " harp", "ihars", "shray", "hrr", " hrr", "aharr", "rhara", "mar", "mray", " hbr", "hray", "parr", "sharr", "hars", "harray", " har", "ihbr", "Harr", "shbr", "ahar", "hadr", " hars", " hara", "shar", "aharray", "bharr", "bhrr", "ahray", "har", "rhray", "Harray", "rhrr", "marr", "madr", "pray", "iharp", "bhray", "parray", "rharr", "sharp", "shadr"], "i": ["bi", "ir", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "l", "is", "ik", "ri", "start", "io", "init", "info", "z", "f", "ci", "ui", "ini", "c", "index", "eni", "phi", "x", "uri", "ip", "di", "I", "ie", "ai", "o", "gi", "inf", "mi", "n", "ii", "b", "zi", "li", "j", "oi", "in", "y", "ki", "ind", "fi"], "result": ["code", "total", "score", "function", "expected", "count", "test", "future", "message", "id", "next", "v", "cur", "res", "data", "answer", "diff", "r", "value", "valid", "error", "df", "results", "iter", "end", "length", "cmp", "winner", "f", "report", "feature", "done", "di", "folder", "grade", "Result", "success", "gi", "inner", "runner", "err", "prev", "dest", "ner", "current", "limit", "su", "term", "found", "response", "master", "ret", "rc", "number", "range", "cache", "match", "default"], "tmp": ["nn", "fb", "total", "api", "sk", "nt", "mk", "p", "test", "now", "rb", "po", "v", "jp", "cur", "ff", "stuff", "tv", "kk", "extra", "point", "part", "mm", "diff", "pre", "start", "zip", "temp", "cp", "dk", "cmp", "ok", "nb", "loc", "pkg", "sp", "np", "acc", "mp", "done", "j", "opp", "prev", "race", "paper", "dest", "tp", "tk", "obj", "work", "sup", "uk", "current", "amp", "beta", "su", "pp", "ref", "tt", "front", "t", "pad"], "k": ["ky", "sk", "mk", "p", "u", "id", "ko", "ck", "ke", "ks", "v", "kh", "kick", "kk", "ik", "ph", "z", "end", "dk", "ok", "f", "ek", "c", "key", "ak", "m", "w", "ku", "kw", "ijk", "kr", "q", "o", "kn", "n", "g", "b", "kid", "j", "tk", "K", "uk", "kat", "pp", "y", "ki"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.io.PrintStream;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Eric\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        FastReader in = new FastReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ATherefore solver = new ATherefore();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ATherefore {\\n        public void solve(int testNumber, FastReader in, PrintWriter out) {\\n            String a = in.next();\\n            int c = a.charAt(a.length() - 1) - '0';\\n            if (c == 0 || c == 1 || c == 6 || c == 8) {\\n                out.println(\"pon\");\\n            } else if (c == 2 || c == 4 || c == 5 || c == 7 || c == 9) {\\n                out.println(\"hon\");\\n            } else {\\n                out.println(\"bon\");\\n            }\\n\\n\\n        }\\n\\n    }\\n\\n    static class FastReader {\\n        public BufferedReader br;\\n        public StringTokenizer st;\\n        String context = null;\\n\\n        public FastReader(InputStream in) {\\n            this(new InputStreamReader(in));\\n        }\\n\\n        public FastReader(InputStreamReader input) {\\n            br = new BufferedReader(input);\\n        }\\n\\n        public String next() {\\n            if (context != null) {\\n                System.err.print(\"[\" + context + \"] Wait for input ...\");\\n            }\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    String s = br.readLine();\\n                    if (s == null)\\n                        return null;\\n                    st = new StringTokenizer(s);\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                    throw new RuntimeException(\"Could not read\");\\n                }\\n            }\\n            String res = st.nextToken();\\n            if (context != null) {\\n                System.err.println(\"[\" + context + \"] ... received : \" + res);\\n            }\\n            return res;\\n        }\\n\\n    }\\n}\\n\\n", "target": "178", "substitutes": {"inputStream": ["referenceSteam", "inputSteam", "outputSteam", " inputstream", "inputThread", " inputSteam", "InputSteam", "referencestream", "inputStreamer", " inputThread", "referenceStream", "Inputstream", "outputThread", "InputThread", "outputStreamer", "InputStreamer", "InputStream", "outputstream", "referenceStreamer", "inputstream"], "outputStream": ["inputSteam", "outputSteam", " outputPath", "Outputstream", "responseStream", "responseSteam", "OutputStream", " outputSteam", "OutputPath", "writestream", "writeStream", "writeSteam", "inputPath", "responsestream", "OutputSteam", "outputstream", "outputPath", " outputstream", "inputstream"], "in": ["this", "ic", "isin", "on", "IN", "p", "buffer", "id", "login", "ins", "din", "arin", "inside", "i", "path", "url", "data", "is", "request", "lin", "con", "r", "name", "io", "source", "info", "win", "init", "stream", "resource", "In", "gen", "conn", "user", "image", "inn", "ini", "f", "x", "str", "min", "gin", "inf", "inner", "rin", "plus", "g", "kin", "err", "n", "d", "again", "reader", "pin", "scan", "log", "bin", "file", "from", "inc", "read"], "out": ["this", "buffer", "r", "exp", "init", "co", "key", "check", "at", "output", "w", "Out", "o", "inner", "result", "exec", "connection", "bin", "group", "inc", "doc", "copy", "error", "post", "console", "window", "query", "call", "print", "client", "server", "line", "data", "name", "io", "temp", "In", "conn", "user", "list", "str", "again", "write", "up", "file", "later", "scope", "prefix", "to", "view", "v", "pool", "extra", "part", "x", "writer", "comment", "b", "err", "obj", "net", "log", "word", "bar", "cache", "sync", "parent", "msg", "ex", "page", "pre", "outer", "OUT", "string", "problem", "outs", "exit", "lock"], "solver": ["solving", "Slier", "slier", "setsolving", "ssolve", "Solver", " solving", "Solved", "ssolver", "ssolution", "solve", "solution", "Solution", "sslier", " solved", "setsolved", "Solving", "Solve", "setsolve", "solved", "setsolver", " solve"], "testNumber": ["trialNumber", "trialNo", " trialNo", "testNumbers", "testInt", " trialNumber", " trialNumbers", " trialInt", "trialNumbers", "testNo", " testNumbers", " testInt", " testNo", "trialInt"], "a": ["p", "na", "ad", "i", "ba", "ar", "l", "cha", "aa", "A", "aux", "pa", "ga", "t", "an", "ata", "sa", "ae", "ea", "string", "alpha", "o", "n", "b", "ca", "abc", "ac", "aaa", "aba", "sta", "fa", "as", "la", "asa", "area", "ab", "da", "am", "va"], "c": ["cl", "enc", "mc", "nc", "arc", "vc", "count", "p", "pc", "C", "u", "ch", "sec", "v", "i", "fc", "cu", "l", "cb", "ct", "r", "z", "cs", "bc", "h", "char", "f", "lc", "ci", "dc", "loc", "m", "w", "x", "cy", "e", "ec", "col", "uc", "ce", "code", "cf", "o", "d", "n", "g", "b", "ca", "ac", "k", "rc", "cc", "y", "dec", "cache", "sc", "t", "unc", "xc", "coll"], "br": ["bl", "ber", "bm", "p", "wr", "http", "hr", "rb", "ch", "tr", "pr", "arr", "cur", "ar", "lr", "fr", "ur", "r", "bh", "be", "bal", "bridge", "bc", "ler", "dr", "mr", "BR", "sp", "bro", "str", "Br", "ver", "sr", "b", "err", "B", "gr", "cro", "ocr", "bb", "bt", "cr", "ru", "bp"], "st": ["ut", "bl", "inst", "ste", "rss", "nt", "ts", "sth", "ST", "p", "now", "nd", "next", "hr", "service", "stack", "ss", "tr", "pr", "v", "const", "l", "ct", "fr", "std", "sn", "r", "start", "stage", "be", "ft", "fe", "sw", "stream", "bs", "sl", "style", "est", "pe", "sp", "str", "e", "ist", "string", "pt", "stri", "rest", "d", "ld", "sr", "St", "se", "obj", "lt", "sb", "sta", "ast", "sts", "struct", "bt", "ost", "tt", "sc", "t", "ctx"], "context": ["parent", "subject", "focus", "scope", "space", "prefix", "component", "class", "id", "queue", "qi", "stack", "version", "path", "center", "request", "reason", "name", "course", "header", "timeout", "source", "event", "concept", "resource", " contexts", "document", "loc", "session", "filter", "pointer", "key", "format", "index", "config", "vector", "text", "pause", "frame", "translation", "Context", "environment", "cycle", "current", "tx", "host", "connection", "step", "sequence", "thread", "struct", "support", "address", "exc", "area", "shape", "section", "cache", "argument", "callback", "ctx", "condition"], "input": ["pattern", "parent", "client", "buffer", "back", "it", "xml", "everything", "processing", "path", "data", "request", "answer", "init", "source", "stream", "io", "get", "temp", "instance", "image", "inn", "feed", "format", "output", "list", "config", "Input", "text", "socket", "active", "token", "raw", "string", "q", "inf", "inner", "plus", "content", "result", "accept", "again", "current", "reader", "form", "connection", "response", "inc", "lock", "reading", "pull", "IN"], "s": [" objects", "groups", "S", "blocks", "p", "obs", "u", "ads", "ins", "ks", "v", "i", "strings", "l", "qs", "es", "is", "ls", "r", "fs", "h", "results", "ps", "bs", "f", "lines", "os", "rows", "states", "ds", "ings", "words", "acks", "m", "gets", "parts", "e", "ses", "string", "files", "events", "o", "abs", "d", "hs", "n", "g", "ns", "b", "gs", "sets", "members", "services", "details", "objects", "values", "js", "ids", "comments", "en", "t"], "res": ["msg", "val", "back", "rs", "data", "es", "is", "Response", "r", "info", "results", "RES", "w", "resp", "text", "rev", "Result", "rest", "Str", "result", "body", "obj", "tx", "_", "response", "Resp", "Res", "re"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\tScanner sc = new Scanner(System.in);\\n\\n\tint a = sc.nextInt();\\n\tint b = sc.nextInt();\\n\tint c = sc.nextInt();\\n\tint x = sc.nextInt();\\n\\n\tint sumv, cnt=0;\\n\tfor ( int i=0; i<a+1; i++ ) {\\n\t    for ( int j=0; j<b+1; j++ ) {\\n\t\tfor ( int k=0; k<c+1; k++ ) {\\n\t\t    sumv = 500*i + 100*j + 50*k;\\n\t\t    if ( sumv == x ) {\\n\t\t\tcnt++;\\n\t\t    }\\n\t\t}\\n\t    }\\n\t}\\n\tSystem.out.println(cnt);\\n    }\\n    \\n}", "target": "127", "substitutes": {"sc": ["sche", "mc", "sci", "nc", "sf", "scope", "pc", "ser", "com", "ch", "sec", "ss", "tc", " SC", "cur", "sub", "asc", "Sc", "SC", "exp", "cs", "bc", "sw", "cv", "cor", "src", "lc", "ci", "dc", "cer", "sp", "sq", "uc", "soc", "ca", "sem", "se", "ner", " Sc", "anc", "sb", "ocr", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "coll", "ec", "esc", "ctx", "cus", "sync"], "a": ["api", "p", "ia", "u", "ad", "ba", "aa", "z", "A", "f", "au", "ak", "an", "sa", "ada", "ae", "ai", "alpha", "n", "ca", "ac", "aaa", "sta", "ama", "fa", "y", "la", "asa", "area", "ab", "ma", "am", "va", "aj"], "b": ["count", "p", "u", "v", "ba", "l", "db", "cb", "r", "z", "h", "bc", "lb", "f", "s", "base", "e", "o", "d", "n", "B", "body", "nb", "bb", "y", "ab"], "c": ["p", "u", "C", "ch", "v", "l", "cu", "con", "r", "z", "h", "f", "lc", "ci", "s", "dc", "m", "w", "e", "uc", "q", "o", "d", "n", "ca", "ac", "cc", "y", "ec"], "x": ["ic", "xd", "dx", "p", "xp", "xa", "u", "xi", "ex", "v", "ix", "l", "X", "cross", "z", "h", "f", "ax", "index", "m", "w", "e", "xxx", "q", "d", "n", "g", "xs", "number", "y", "rx", "fx", "t", "ctx", "xc", "xx"], "sumv": ["adf", " sumV", "sumiv", "countf", "Sumf", "adv", " sumx", "sumval", "countV", "sumV", " sumf", "Sumuv", "sumf", "weightiv", "SumV", "Sumx", "weightv", " sumuv", "countuv", "Sumv", "adval", " sumval", "weightx", "Sumiv", "adV", "sumx", "weightf", "countv", "sumuv", "Sumval", " sumiv"], "cnt": ["ccount", "cct", "cNT", "scrt", "count", "lccount", "Count", "lcnt", "fret", "scno", " count", "Cno", " cnn", "CNT", "cret", "Crt", " cNT", "scNT", " cct", "fnt", "Cnn", "crt", "scct", " crt", "lcrt", "cnn", "cno", "scnt", " ccount", "scnn", "lcount", "scret", "frt", "fct", " cret", " cno", "Ccount", "Cnt"], "i": ["bi", "hi", "pi", "ori", "p", "iu", "u", "id", "qi", "ji", "v", "si", "ix", "l", "is", "ik", "io", "z", "f", "ci", "ui", "ini", "e", "ip", "I", "ai", "q", "mi", "ii", "li", "in", "y", "ki"], "j": ["jj", "jc", "p", "it", "u", "J", "ch", "ji", "v", "jp", "l", "ib", "ij", "ik", "r", "z", "h", "f", "ak", "m", "w", "e", "ja", "ie", "q", "o", "d", "n", "g", "ii", "li", "js", "je", "job", "y", "jl", "t", "aj"], "k": ["ky", "sk", "mk", "p", "isk", "ka", "u", "id", "ko", "ck", "ad", "ke", "km", "ks", "gh", "v", "kh", "kk", "ik", "z", "dk", "ok", "ek", "key", "ak", "ku", "kw", "kr", "q", "o", "kn", "kin", "kid", "K", "uk", "y", "ki"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        StringBuilder bd = new StringBuilder();\\n\\n        int n = sc.nextInt();\\n\\n        int r0 = sc.nextInt();\\n        int r1 = sc.nextInt();\\n\\n        int max = r1 - r0;\\n        int min = Math.min(r0, r1);\\n\\n        for (int i=2; i<n; i++) {\\n            int r = sc.nextInt();\\n            max = Math.max(max, r-min);\\n            min = Math.min(min, r);\\n        }\\n\\n        System.out.println(max);\\n    }\\n}\\n", "target": "208", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "nt", "scope", "go", "core", "ser", "ck", "ch", "sec", "ss", "server", " SC", "sub", "asc", "search", "Sc", "SC", "screen", "con", "exp", "bc", "cs", "sw", "desc", "cor", "src", "c", "sp", "st", "system", "sq", "uc", "soc", "g", "cle", "se", "ner", " Sc", "reader", "exec", "scan", "parse", "Scan", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "coll", "esc", "console", "sync"], "bd": ["buffer", "mb", "SB", "nd", "rb", "ss", "ba", "db", "cb", "is", "std", "ng", "bf", "ws", "bc", "BB", "gd", "gb", "bs", "sq", "d", "nb", "BD", "BG", "bb", "GB", "vd", "bp", "DB"], "n": ["nc", "nt", "count", "p", "u", "num", "N", "span", "v", "l", "z", "h", "f", "s", "c", "m", "x", "o", "q", "d", "ns", "b", "nb", "ner", "j", "net", "k", "in", "number", "y", "en", "t"], "r0": ["p1", "p5", "Rmin", "ar1", "R0", "R1", " r3", "r14", "pr14", "p2", "r3", "R14", " r14", "rmin", "ar2", "armin", "r5", "rc1", "R2", "p0", " r5", "ar0", " rmin", "rc0", "pr0", "r2", "R3", "pr1", "rc5", " r2", "rc2", "pr3"], "r1": ["p1", "R0", "r8", "R1", " r3", "sr3", "p2", " r8", "r3", "rc1", "R2", "p0", "sr1", "R8", "rc0", "sr2", "sr0", "r2", "R3", " r2", "rc8", "rc2"], "max": ["this", "total", "size", "nd", "res", "std", "diff", "init", "info", "best", "az", "ax", "w", "rand", "pop", "mod", "dot", "pad", "all", "none", "p", "id", "next", "ad", "pr", "power", "value", "h", "z", "nr", "end", "length", "sum", "base", "d", "Max", "no", "scale", "default", "self", "cl", "div", "count", "patch", "v", "average", "point", "right", "orig", "x", "rad", "between", "rev", "q", "rest", "with", "rank", "step", "in", "mean", "MAX", "dec", "bar", "Min", "conf", "radius", "now", "ng", "start", "last", "c", "build", "est", "ra", "k", "range"], "min": ["val", "size", "slice", "mins", "l", "diff", "init", "ax", "left", "limit", "mod", "area", "none", "p", "minimum", "next", "pr", "mini", "first", "f", "sum", "index", "d", "Max", "shift", "wa", "pos", "minus", "scale", "mid", "pri", "default", "div", "span", "average", "sign", "partial", "part", "sin", "lower", "len", "err", "step", "in", "rel", "mean", "MAX", "Min", "act", "just", "ss", "sub", "pre", "sort", "start", "c", "m", "ra", "MIN", "skip", "small", "from", "cr", "range", "fix", "am"], "i": ["bi", "hi", "pi", "ni", "p", "u", "id", "multi", "qi", "xi", "v", "si", "l", "mini", "ri", "init", "io", "z", "info", "f", "ci", "c", "ui", "ini", "m", "phi", "x", "di", "e", "I", "ie", "ai", "o", "gi", "d", "ii", "b", "li", "j", "oi", "t", "ti"], "r": ["radius", "p", "u", "id", "hr", "rs", "pr", "v", "ar", "l", "lr", "fr", "rh", "right", "h", "nr", "er", "f", "br", "mr", "dr", "c", "m", "or", "est", "e", "ra", "rev", "o", "rf", "d", "R", "q", "b", "err", "sr", "art", "rc", "cr", "range", "ru", "re"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String args[]) {\\n\\n        // \u5165\u529b\\n        Scanner sc = new Scanner(System.in);\\n        int x = Integer.parseInt(sc.next());\\n\\n        // \u4e3b\u51e6\u7406\\n        while (!isPrime(x)) {\\n            x += x % 2 == 0 ? 1 : 2;\\n        }\\n\\n        long result = x;\\n\\n        // \u51fa\u529b\\n        System.out.println(result);\\n        sc.close();\\n    }\\n\\n    public static boolean isPrime(long num) {\\n        if (num == 2) {\\n            return true;\\n        } else if (num < 2 || num % 2 == 0) {\\n            return false;\\n        }\\n        double sqrtNum = Math.sqrt(num);\\n        for (long i = 3; i <= sqrtNum; i += 2) {\\n            if (num % i == 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}", "target": "183", "substitutes": {}}
{"code": "/*\\n * To change this license header, choose License Headers in Project Properties.\\n * To change this template file, choose Tools | Templates\\n * and open the template in the editor.\\n */\\n\\n\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\n/**\\n *\\n * @author nai\\n */\\npublic class Main {\\n\\n    /**\\n     * @param args the command line arguments\\n     */\\n    public static void main(String[] args) throws Exception{\\n        // TODO code application logic here\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int C = sc.nextInt();\\n        int X = sc.nextInt();\\n        int cou = 0;\\n        \\n        for(int a = 0 ; a < A + 1 ; a++ ){\\n            for(int b = 0 ; b < B + 1 ; b++ ){\\n                int c = (X - 500 * a - 100 * b) / 50;\\n                if(0 <= c && c <= C){\\n                    cou++;\\n                }\\n            }\\n        }\\n        System.out.println(cou);\\n    }\\n  }\\n    \\n\\n", "target": "127", "substitutes": {}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint firstNumber = scan.nextInt();\\n\t\tint i[] = new int[3];\\n\t\tfor (int k = 0; k < firstNumber; k++) {\\n\t\t\tfor (int j = 0; j < i.length; j++) {\\n\t\t\t\ti[j] = scan.nextInt();\\n\t\t\t}\\n\t\t\tArrays.sort(i);\\n\t\t\tif ((i[2] * i[2]) == (i[1] * i[1]) + (i[0] * i[0])) {\\n\t\t\t\tSystem.out.println(\"YES\");\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(\"NO\");\\n\t\t\t}\\n\t\t}\\n\\n\t}\\n}", "target": "65", "substitutes": {"scan": ["cat", "see", "connect", "spin", "watch", "ser", "na", "serv", "server", "span", "run", "wan", "search", "l", "fan", "sort", "sn", "con", "r", "io", "sc", "sin", "row", "get", "er", "gen", "query", "chan", "plan", "check", "an", "system", "read", "skip", "n", "err", "ignore", "kin", "se", "ner", "reader", "in", "parse", "Scan", "san", "ans", "en", "out", "can", "ann", "sync"], "firstNumber": ["FirstNumbers", " firstNum", "FirstNum", "firstNumbers", "FirstNumber", "lastNum", "firstNum", "lastNumber", " firstNumbers", "lastNumbers", " firstnumber", "firstnumber", "Firstnumber", "lastnumber"], "i": ["bi", "ic", "api", "pi", "ori", "iri", "p", "iu", "slice", "u", "id", "qi", "xi", "ji", "v", "anti", "si", "l", "a", "data", "is", "ri", "uli", "idi", "io", "info", "z", "abi", "f", "ci", "s", "c", "ini", "ui", "index", "m", "phi", "x", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "n", "cli", "ii", "b", "isi", "li", "oi", "yi", "in", "y", "t"], "k": ["sk", "p", "ka", "u", "J", "ck", "ch", "ke", "km", "ks", "v", "l", "kk", "ik", "z", "ok", "f", "c", "key", "ak", "w", "x", "ku", "kw", "kr", "q", "unk", "kn", "d", "n", "b", "kid", "kj", "K", "y", "ki"], "j": ["jj", "jc", "p", "u", "J", "ch", "ji", "v", "jp", "pr", "l", "ij", "ik", "z", "h", "row", "aj", "f", "ok", "br", "c", "key", "x", "e", "ja", "uj", "q", "o", "kn", "n", "ii", "b", "li", "js", "kj", "y", "jl", "jen", "jo"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int N = in.nextInt(), flag = -1;\\n        for (int i = 1; i < 10; i++) {\\n            if (N % i == 0 && N / i < 10) flag = 1;\\n        }\\n        System.out.println(flag == 1 ? \"Yes\" : \"No\");\\n        in.close();\\n    }\\n}\\n", "target": "194", "substitutes": {"in": ["buffer", "login", "ins", "ln", "din", "ex", "binary", "inside", "l", "bis", "data", "is", "lin", "con", "r", "init", "source", "win", "input", "In", "f", "user", "image", "inn", "ini", "c", "ax", "arg", "x", "str", "socket", "ssl", "token", "inf", "inner", "rin", "n", "g", "b", "err", "kin", "again", "pass", "reader", "exec", "pin", "scan", "connection", "log", "bin", "readable", "as", "inc", "IN", "out", "query"], "N": ["MN", "Len", "S", "Num", "SN", "NL", "C", "J", "M", " n", "Size", "F", "Number", "Q", "P", "GN", "Na", "T", "I", "Ni", "NC", "NP", "L", "R", "n", "NR", "Ne", "V", "K", "NB", "D", "NT", "H", "O", "Z", "Ns", "NS", "number", "NV", "NE", "NUM", "NG", "NI", "X"], "flag": ["status", "offset", "cat", "count", "age", "bug", "id", "FLAG", "sort", "lag", "part", "sign", "start", "info", "len", "char", "tag", "f", "bad", "letter", "feature", "key", "arg", "bit", "style", "fun", "weight", "like", "ie", "flags", "code", "big", "ish", "err", "field", "Flag", "force", "type", "ret", "group", "kind", "file", "error", "ind", "fi"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "p", "it", "u", "id", "slice", "multi", "qi", "next", "xi", "v", "si", "ix", "a", "mini", "part", "ri", "r", "uli", "start", "z", "info", "abi", "length", "f", "ci", "ui", "ini", "key", "phi", "x", "mu", "e", "di", "I", "ie", "ai", "o", "gi", "d", "n", "ii", "b", "zi", "li", "field", "j", "k", "oi", "chi", "tri", "y", "ti"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        new Solver().run();\\n    }\\n}\\n\\nclass Solver {\\n\\n    public void run() {\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n\\n        for (int i = 1; i <= 10000; i++) {\\n            if ((i / 10) == B && (i * 8 / 100) == A) {\\n                System.out.println(i);\\n                return;\\n            }\\n        }\\n\\n        System.out.println(-1);\\n        return;\\n    }\\n\\n}", "target": "121", "substitutes": {"sc": ["enc", "sci", "nc", "scope", "pc", "com", "ch", "tc", "ss", "sec", " SC", "asc", "search", "Sc", "SC", "bc", "cs", "sw", "cv", "cor", "src", "lc", "ci", "s", "c", "cer", "sp", "acc", "system", "sq", "uc", "soc", "ca", "se", "ner", "anc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "cont", "ec", "esc", "cus"], "A": ["S", "AR", "C", "AA", "N", "M", "TA", "LA", "a", "U", "Y", "F", "BA", "AP", "P", "SA", "Ma", "API", "T", "I", "ACC", "L", "HA", "Alpha", "V", "AF", "AC", "AB", "D", "H", "O", "AI", "CA", "E", "X"], "B": ["BL", "C", "BF", "N", "M", "BI", "U", "Y", "X", "F", "BA", "Q", "P", "BB", "BC", "T", "I", "L", "R", "b", "V", "AB", "K", "NB", "D", "GB", "O", "Z", "G", "TB", "W", "E", "DB"], "i": ["hi", "bi", "api", "pi", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "a", "mini", "ri", "start", "io", "h", "info", "abi", "f", "ci", "ui", "c", "ini", "clip", "index", "x", "uri", "adi", "e", "ip", "di", "I", "ai", "o", "gi", "d", "mi", "n", "ii", "b", "zi", "li", "j", "k", "oi", "in", "chi", "type", "t", "ti"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint r = sc.nextInt();\\n\\n\t\tSystem.out.println(Math.PI * 2 * r);\\n\t}\\n\\n}\\n", "target": "167", "substitutes": {"sc": ["cl", "sci", "nc", "sf", "scope", "pc", "ser", "ss", " SC", "sub", "search", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "src", "ci", "s", "sl", "c", "cer", "or", "sp", "sq", "uc", "soc", "sr", "ca", "se", "ner", "exec", "scan", "osc", "rc", "cc", "cr", "spec", "ec", "esc", "sync"], "r": ["counter", "ir", "radius", "p", "u", "rs", "v", "pr", "i", "ar", "l", "fr", "ur", "entry", "h", "z", "nr", "attr", "er", "f", "c", "order", "m", "or", "w", "e", "q", "o", "R", "d", "n", "b", "result", "sr", "err", "rr", "ner", "k", "parse", "rc", "cr", "rt", "range"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        String N = sc.next();\\n\\n        //\u6587\u5b57\u5217\\n        String strN = N;\\n\\n        char[] NChar = new char[strN.length()];\\n        for(int i = 0; i<strN.length(); i++){\\n            NChar[i] = strN.charAt(i);\\n            //System.out.println(NChar[i]);\\n        }\\n\\n        int[] Nint = new int[strN.length()];\\n        for(int j = 0; j<strN.length(); j++){\\n            Nint[j] = Character.getNumericValue(NChar[j]);\\n            //Nint[j] = NChar[j];\\n            //System.out.println(Nint[j]);\\n        }\\n\\n\\n        //\u3053\u3053\u304b\u3089\u8a08\u7b97\\n        int sum = 0;\\n        //System.out.println(Nint.length);\\n        for(int k = 0;k<Nint.length; k++){\\n            sum += Nint[k];\\n        }\\n\\n        if(sum % 9 == 0){\\n            System.out.println(\"Yes\");\\n        }\\n        else{\\n            System.out.println(\"No\");\\n        }\\n\\n        \\n    }\\n}", "target": "93", "substitutes": {"sc": ["all", "cl", "sci", "nc", "scope", "pc", "na", "sec", "ss", "sh", "Sc", "SC", "bc", "cs", "sw", "desc", "src", "ci", "sl", "c", "sp", "acc", "uc", "set", "se", "ner", "ocr", "scan", "osc", "rc", "cc", "cr", "inc", "sch", "parser", "spec", "ec", "esc", "sync"], "N": [" R", "S", " S", "NA", "NL", "NAME", "C", " L", "M", " n", "path", "STR", "Path", "name", "A", "arg", "I", "L", "R", "n", " M", " Name", "Ns", "NS", "Name", "Line"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author HussienMoustafa\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BDistanceEditorial solver = new BDistanceEditorial();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BDistanceEditorial {\\n        public void solve(int testNumber, Scanner s, PrintWriter out) {\\n            int n = s.nextInt(), cnt = 0;\\n            double d = s.nextInt();\\n            while (n-- != 0) {\\n                double x = s.nextInt(), y = s.nextInt();\\n                if (Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)) <= d) {\\n                    cnt++;\\n                }\\n\\n            }\\n            out.println(cnt);\\n        }\\n\\n    }\\n\\n    static class Scanner {\\n        StringTokenizer st;\\n        BufferedReader br;\\n\\n        public Scanner(InputStream s) {\\n            br = new BufferedReader(new InputStreamReader(s));\\n        }\\n\\n        public String next() {\\n            while (st == null || !st.hasMoreTokens()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "42", "substitutes": {"inputStream": ["inputSteam", "outputSteam", " inputstream", " inputSteam", "InputSteam", "Inputstream", "inputSt", "InputSt", "InputStream", "outputstream", "inputstream", "outputSt", " inputSt"], "outputStream": ["outputWriter", "inputSteam", "outputSteam", "writeWriter", "Outputstream", "inputStreamer", "OutputStream", " outputSteam", " outputView", "outputView", "writeStreamer", "inputWriter", "writeStream", "outputStreamer", "writeSteam", "OutputView", "inputView", " outputWriter", "OutputSteam", "outputstream", " outputStreamer", " outputstream", "inputstream"], "in": ["this", "IN", "id", "ins", "din", "run", "i", "inside", "path", "url", "a", "data", "request", "con", "r", "entry", "io", "source", "info", "win", "input", "sin", "init", "In", "conn", "inn", "ini", "c", "w", "nin", "min", "gin", "inf", "inner", "kin", "err", "reader", "exec", "pin", "scan", "log", "bin", "vin", "inc", "conv", "read", "sync"], "out": ["this", "conf", "parent", "print", "p", "buffer", "null", "to", "ex", "v", "working", "line", "page", "data", "io", "init", "info", "timeout", "input", "temp", "In", "conn", "outer", "writing", "down", "user", "report", "c", "sum", "output", "OUT", "w", "list", "writer", "problem", "string", "Out", "o", "inner", "b", "err", "again", "write", "obj", "work", "exec", "up", "net", "log", "group", "bin", "outs", "file", "exit", "inc", "off", "copy", "cache", "error", "array", "window", "sync"], "solver": [" solution", "solving", "setsolving", "ssolving", "ssolve", "Solver", " solving", "ssolver", "ssolution", "solve", "solution", "Solution", "setsolution", "Solving", "Solve", "setsolve", "setsolver", " solve"], "testNumber": ["TestNumber", "TestNo", " trialNo", "testnumber", " trialnumber", " trialNumber", "TestNum", " testnumber", "Testnumber", "testNo", " testNum", " trialNum", " testNo", "testNum"], "s": ["slice", "ins", "rs", "l", "a", "its", "r", "fs", "ips", "sports", "types", "bs", "lines", "south", "sl", "os", "states", "ds", "tests", "ches", "ops", "scripts", "o", "g", "sys", "as", "ers", "p", "server", "si", "i", "strings", "es", "h", "ps", "f", "sets", "t", "aws", "S", "times", "less", "sv", "ws", "er", "ings", "ses", "gs", "b", "se", "sym", "sb", "storage", "stats", "sync", "sf", "features", "u", "ss", "opens", "reports", "bis", "is", "ions", "ls", "vs", "c", "us", "m", "parts", "e", "ssl", "sq", "abs", "ns", "services", "stores", "outs", "ans", "spec"], "n": ["nn", "nc", "nt", "count", "p", "num", "nu", "ln", "N", "v", "cn", "i", "l", "sn", "z", "nl", "nr", "len", "ny", "f", "conn", "c", "ne", "m", "o", "ns", "b", "pn", "nb", "j", "net", "mn", "number", "t"], "cnt": ["ccount", "crount", "cct", "decn", "lcnt", "count", "lccount", "ucount", "decnn", " cnd", " count", "cn", "lcnd", " cnn", "fnn", " cct", "cnd", "fn", "fnt", "cnn", "lcct", "ucnd", "ecnt", "ecnd", " ccount", "crnt", "lcount", "decnt", "decct", "ucnt", "ecct", " cn", "crcount", "fct", "ucct", "ecount", "crnd"], "d": ["sd", "ded", "dx", "p", "id", "u", "nd", "v", "i", "l", "z", "f", "fd", "dc", "c", "ds", "m", "e", "di", "dd", "g", "b", "dy", "dl", "dt", "j", "D", "cd", "t"], "x": ["ic", "dx", "p", "id", "u", "xi", "ex", "v", "i", "ix", "l", "z", "h", "f", "c", " xx", "wx", "ax", "index", "w", "e", "xx", "xxx", "b", "zi", "tx", "xs", "xy", "rx", "px", "t", "X"], "y": ["yo", "ky", "p", "gy", "sy", "oy", "v", "i", "vy", "ya", "l", "ix", "Y", "yx", "z", "ny", "f", "ay", "c", "m", "w", "zy", "e", "ry", "o", "b", "dy", "yy", "j", "ye", "yi", "xy", "ey", "cy", "t", "xx"], "st": ["cl", "ut", "bl", "inst", "ste", "ust", "nt", "sth", "ST", "p", "nd", "ss", "pr", "const", "sh", "ct", "sn", "std", "is", "r", "be", "ft", "mt", "sw", "src", "fe", "first", "sl", "est", "pe", "sp", "sa", "str", "ist", "string", "pt", "stri", "rest", " est", "St", "se", "obj", "sty", "sb", "sta", "ast", "sts", "art", "struct", "bt", "cr", "stop", "ost", "rt", "sc", "t"], "br": ["bl", "bel", " fr", "ber", "bm", "p", "hr", "rb", "browser", "ch", "tr", "serv", "pr", "arr", "cur", "ar", "fr", "obl", "ur", "r", "bf", " dr", "bal", "bridge", "bc", "bs", "dr", "mr", " tr", "BR", "sp", "bro", "str", "img", "bur", "Br", "ver", "sr", "b", "err", "obj", "cro", "buf", "bb", "rel", "rib", "bt", "cr", "bar", "ab", "rt"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\nimport java.math.BigInteger;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t// \u5165\u529b\\n\t\tint n = sc.nextInt();\\n\t\t\\n\t\t// \u8a08\u7b97\\n\t\tint result = n/2;\\n\t\tif(n%2 == 1) result++;\\n\t\t\\n\t\t\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(result);\\n\t}\\n}\\n", "target": "233", "substitutes": {"sc": ["sci", "sf", " ser", " ar", "gram", "ss", " SC", " rc", " sl", "Sc", "SC", " res", " subp", " scr", "an", " pars", "sp", "sa", " ans", "sq", " sm", " Sc", "sb", "scan", " arr", " sp", " scans", "ann"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n  public static void main(String[] args) {\\n    \\n      Scanner sc = new Scanner(System.in);\\n      \\n      int n = sc.nextInt();\\n      \\n      int x1,x2,x3;\\n      \\n      for(int i = 1; i <= n; i++){\\n          x1 = i / 10;\\n          x2 = i / 100;\\n          x3 = i / 1000;\\n     \\n        if(i % 3 == 0 || i % 10 == 3 || x1 % 10 == 3 || x2 % 10 == 3 || x3 % 10 == 3){\\n        \t\\n          System.out.print( \" \" + i );\\n          \\n        }\\n      }\\n\tSystem.out.println();\\n  }\\n}", "target": "154", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "nt", "scope", "pc", "ch", "sec", "ss", " SC", "cur", "sub", "sh", "l", "Sc", "SC", "cb", "exp", "bc", "cs", "lc", "ci", "c", " scr", "sp", "str", "acc", "system", "sq", "uc", "soc", "g", "sem", "se", "ner", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "n": ["nn", "nc", "ni", "count", "p", "size", "u", "num", "N", "l", "sn", "r", "z", "nl", "len", "f", "s", "c", "m", "w", "x", "q", "o", "d", "ns", "g", "b", "nb", "j", "net", "k", "number", "y", "en", "t"], "x1": ["p1", "x31", "x01", "ax2", "y2", " xone", " x0", "p2", "x100", "int0", "yone", "X0", "int01", "xone", "ax31", "y1", "int1", "p3", "X100", "int2", " x31", "x0", " x01", "y3", "X31", "ax1", " x100", "X2", "pone", "X01", "ax100", "X1"], "x2": ["itwo", "rxTwo", " x62", "xx2", "x4", "htwo", " xTwo", "x8", "ex1", "ex2", "h62", "xy2", " x22", "xy8", " x4", "rxtwo", "x22", "rx22", "xx3", "xx4", "extwo", "h2", "xtwo", "i22", "h1", "i2", "iTwo", "xTwo", "rx2", "xy4", " x8", "xx8", "xy3", "ex62", " xtwo", "x62"], "x3": ["sexthree", "X03", "dx3", "X53", "xx23", "dxthird", "x4", "i3", "xx53", "X3", "x53", " x03", "xthree", "sex3", " x4", "X23", "dxthree", " x53", "dx5", "xx3", "i4", "x23", "sex5", " xthree", "i2", "x03", " xthird", "X4", "sexthird", "xx03", "xthird", "i53", "X2", " x5", "x5", " x23"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "v", "si", "ix", "l", "a", "mini", "ri", "start", "io", "init", "info", "z", "abi", "f", "ci", "ui", "c", "ini", "clip", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "zi", "b", "li", "j", "oi", "yi", "chi", "y", "t", "ti", "fi"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\t\tScanner sc = new Scanner(System.in);\\n\t\t\tint n = sc.nextInt();\\n\t\t\tint m = sc.nextInt();\\n\t\t\tint []a = new int [100*n+m];\\n\t\t\t\\n\t\t\tfor(int b=0;b<n;b++){\\n\t\t\t\tfor(int c=0;c<m;c++){\\n\t\t\t\t\ta[100*b+c] = sc.nextInt();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t\\n\t\t\tint []b = new int[m];\\n\t\t\tfor(int c=0;c<m;c++){\\n\t\t\t\tb[c] = sc.nextInt();\\n\t\t\t}\\n\t\t\t\\n\t\t\t\\n\t\t\tfor(int d=0;d<n;d++){\\n\t\t\t\tint x=0;\\n\t\t\t\tfor(int c=0;c<m;c++){\\n\t\t\t\t\tx=x+a[100*d+c]*b[c];\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(x);\\n\t\t\t}\\n\t}\\n}", "target": "185", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n    \tScanner sc = new Scanner(System.in);\\n      int k = sc.nextInt();\\n      int s = sc.nextInt();\\n      int count = 0;\\n      int z = 0;\\n      for(int i = 0;i <= k && i <= s;i++){\\n      \tfor(int j = 0;j <= k && j <= s-i;j++){\\n        \tz = s-i-j;\\n          if(z >= 0&&z <= k)count++;\\n        }\\n      }\\n      System.out.println(count);\\n    }\\n}\\n", "target": "29", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "pc", "ser", "com", "ch", "tc", "ss", "server", " SC", "cur", "asc", "sh", "fc", "Sc", "SC", "cs", "bc", "cv", "sw", "src", "lc", "ci", "c", "cer", "sp", "acc", "system", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "ocr", "anc", "sb", "scan", "exec", "osc", "rc", "cc", "cr", "ec", "esc", "ctx", "cus"], "k": ["sk", "p", "size", "u", "id", "ko", "ck", "ke", "ks", "v", "kick", "l", "keys", "kk", "cs", "h", "dk", "ok", "f", "c", "key", "ak", "m", "w", "x", "ku", "kw", "e", "q", "o", "unk", "d", "n", "kn", "b", "kid", "K", "work", "kind", "y"], "s": ["S", "sk", "p", "u", "ins", "ks", "ss", "v", "si", "l", "a", "is", "es", "ls", "sites", "h", "ps", "f", "lines", "south", "os", "c", "states", "m", "w", "x", "e", "sq", "ses", "o", "d", "n", "ns", "b", "se", "js", "su", "xs", "in", "ids", "y", "sync"], "count": ["counter", "total", "offset", "seq", "second", "low", "p", "Count", "size", "slice", "id", "v", "l", "a", "data", "start", "zip", "h", "info", "len", "length", "f", "c", "sum", "check", "index", "m", "weight", "x", "depth", "base", "list", "e", "code", "q", "d", "n", "b", "ze", "current", "found", "in", "child", "cc", "y", "number", "cache", "ind"], "z": ["nz", "zen", "fl", "p", "gz", "size", "slice", "u", "id", "za", "v", "tz", "l", "a", "zip", "ez", "h", "zo", "f", "length", "c", "az", "zone", "x", "zy", "depth", "e", "q", "code", "o", "d", "cz", "n", "ld", "ii", "zi", "b", "ze", "iz", "child", "zh", "Z", "y", "ind"], "i": ["bi", "pi", "ori", "ni", "iu", "p", "slice", "u", "qi", "ji", "xi", "v", "si", "ix", "l", "ik", "io", "info", "f", "ci", "ui", "c", "ini", "eni", "m", "x", "phi", "ip", "di", "e", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "zi", "b", "li", "oi", "yi", "chi", "y", "ki", "ind", "ti", "fi"], "j": ["dj", "jj", "jc", "p", "oj", "adj", "u", "it", "J", "qi", "bj", "ji", "xi", "v", "jp", "si", "ix", "l", "ij", "aj", "f", "c", "ui", "key", "x", "e", "jet", "ja", "uj", "ie", "o", "n", "ii", "b", "li", "je", "js", "job", "y", "jl", "t", "jo"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayDeque;\\nimport java.util.Deque;\\nimport java.util.StringTokenizer;\\n\\nimport static java.lang.Integer.decode;\\nimport static java.lang.Integer.parseInt;\\n\\n/**\\n * Elementary data structures - Stack\\n */\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tDeque<Integer> stack = new ArrayDeque<Integer>();\\n\\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\\n\t\twhile (st.hasMoreTokens()) {\\n\t\t\tString str = st.nextToken();\\n\t\t\tint a, b;\\n\t\t\tswitch (str.charAt(0)) {\\n\t\t\t\tcase '+':\\n\t\t\t\t\tb = stack.pop();\\n\t\t\t\t\ta = stack.pop();\\n\t\t\t\t\tstack.push(a + b);\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '-':\\n\t\t\t\t\tb = stack.pop();\\n\t\t\t\t\ta = stack.pop();\\n\t\t\t\t\tstack.push(a - b);\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase '*':\\n\t\t\t\t\tb = stack.pop();\\n\t\t\t\t\ta = stack.pop();\\n\t\t\t\t\tstack.push(a * b);\\n\t\t\t\t\tbreak;\\n\t\t\t\tdefault:\\n\t\t\t\t\tstack.push(parseInt(str));\\n\t\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(stack.pop());\\n\t} //end main\\n}", "target": "114", "substitutes": {"br": ["bl", "hr", "rb", "ch", "browser", "tr", "arr", "res", "jar", "cb", "fr", "r", "bf", "yr", "io", "stream", "bc", "bridge", "src", "bs", "dr", "orb", "BR", "sp", "bro", "img", "Br", "abs", "err", "org", "current", "reader", "cro", "buf", "ocr", "bb", "bt", "cr", "bar"], "stack": ["counter", "buffer", "slice", "back", "diff", "exp", "lines", "sl", "check", "ops", "depth", "white", "pop", "left", "cli", "cases", "loop", "site", "push", "reverse", "sequence", "inc", "console", "function", "button", "both", "iter", "collection", "index", "base", "list", "Stack", "body", "changes", "parse", "la", "pull", "sc", "array", "cl", "scope", "change", "queue", "view", "keep", "stage", "acks", "history", "ack", "context", "work", "found", "box", "cache", "options", "wl", "api", "chain", "now", "start", "source", "roll", "stream", "lc", "vs", "where", "style", "load", "pack", "string", "files", "tree", "layer", "batch"], "st": ["cl", "bl", "ste", "inst", "ST", "nd", "ss", "tr", "pr", "sh", "fr", "std", "sn", "start", "ft", "fe", "sw", "src", "sl", "s", "est", "pe", "sp", "ist", "string", "pt", "stri", "rest", " est", "set", "ld", "sr", "St", "se", " ss", "lt", "sm", "sta", "ast", "sts", "rd", "cr", "ost", "tt", "sc", "t"], "str": ["cl", "enc", "div", "p", "id", "sec", "tr", "pr", "arr", "i", "cur", "line", "l", "STR", "data", "fr", "r", "h", "char", "f", "dr", "sl", "s", "c", "style", "sp", "text", "string", "stri", "Str", "n", "sync", "sr", "err", "se", "pass", "obj", "form", "step", "cr", "doc", "dec", "strip", "coll"], "a": ["aw", "api", "p", "ia", "na", "ad", "za", "auto", "ba", "i", "ar", "l", "r", "aa", "A", "oa", "pa", "f", "au", "c", "ga", "ak", "an", "x", "sa", "e", "ae", "ada", "ea", "active", "ai", "alpha", "o", "d", "af", "n", "array", "ca", "ac", "qa", "aaa", "another", "fa", "as", "y", "la", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["fb", "bi", "p", "mb", "u", "pb", "abb", "rb", "ad", "v", "i", "ba", "l", "db", "cb", "part", "bf", "aa", "be", "h", "lb", "bc", "end", "gb", "bs", "eb", "f", "bad", "c", "an", "x", "base", "w", "ae", "e", "o", "d", "n", "B", "ca", "nb", "j", "aaa", "sb", "bb", "beta", "xb", "bd", "fa", "y", "wb", "ab", "bar", "ob", "default"]}}
{"code": "import java.io.*;\\n\\nclass Main {\\n    public static void main (String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringBuilder cards = new StringBuilder();\\n        int count;\\n        int i;\\n        int h;\\n        while (!cards.append(br.readLine()).toString().equals(\"-\")) {\\n            count = Integer.parseInt(br.readLine());\\n            for (i = 0; i < count; i++) {\\n                h = Integer.parseInt(br.readLine());\\n                String subStr = cards.substring(0, h);\\n                cards.delete(0, h);\\n                cards.append(subStr);\\n            }\\n            System.out.println(cards);\\n            cards.delete(0, cards.length());\\n        }\\n    }\\n}", "target": "216", "substitutes": {"br": ["bl", "div", "ber", "http", "hr", "rb", "browser", "tr", "arr", "res", "jar", "lr", "cb", "fr", "db", "obl", "r", "bf", "bh", "ctr", "io", "iter", "stream", "bridge", "src", "ler", "er", "dr", "report", "mr", "handle", "BR", "sp", "bro", "str", "img", "Br", "sr", "b", "result", "err", "ger", "ner", "reader", "obj", "buf", "cr", "ref", "bar", "keeper", "ab", "front"], "cards": ["frames", "breaks", "groups", "cats", "checks", "blocks", "cuts", "lins", "caps", "parents", "writers", "arr", "cells", "strings", "lights", "fields", "reads", "boxes", "ls", "rules", "pages", "Card", "cs", "results", "types", "orders", "lines", "rows", "tests", "c", "cas", "words", "uses", "limits", "list", "codes", "books", "str", "cons", "flows", "users", "files", "events", "cf", "friends", "days", "packs", "card", "cases", "ends", "names", "pieces", "values", "buf", "stars", "lists", "css", "ids", "comments", "balls", "letters", "tags", "posts", "ards", "coll"], "count": ["counter", "hi", "div", "p", "Count", "size", "id", "u", "qi", "ch", "v", "line", "a", "l", "r", "start", "z", "len", "end", "length", "f", "s", "c", "sum", "index", "weight", "w", "m", "list", "base", "depth", "e", "col", "ind", "max", "code", "d", "n", "b", "limit", "err", "li", "j", "in", "level", "y", "number", "en", "act", "coll"], "i": ["hi", "api", "pi", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "ch", "xi", "v", "si", "ix", "l", "a", "info", "f", "ci", "c", "ini", "ui", "index", "m", "w", "x", "uri", "ip", "di", "e", "I", "ie", "ai", "q", "o", "gi", "d", "n", "b", "ii", "zi", "li", "j", "oi", "in", "chi", "y", "t", "ti"], "h": ["head", "hi", "p", "he", "u", "id", "hr", "ch", "gh", "v", "help", "sh", "l", "his", "uh", "rh", "bh", "ph", "ha", "end", "length", "f", "ah", "c", "height", "index", "m", "w", "x", "q", "hs", "d", "shift", "n", "b", "err", "ih", "k", "hm", "hh", "H", "hl", "zh", "oh", "th", "en"], "subStr": ["memberstr", "Subr", " subr", "substr", "subSTR", " substr", "newstr", "newStr", "memberSTR", "SubString", "Substr", " subString", "memberStr", "subr", "memberString", "SubStr", "subString", "newr", "SubSTR", " subSTR", "newString"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main{\\n\tstatic final int MOD=998244353;\\n\tpublic static void main(String[] args) throws IOException{\\n\t\tBufferedReader in= new BufferedReader(new InputStreamReader(System.in));\\n\t\tPrintWriter out= new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\\n\t\t\\n\t\tString s=in.readLine();\\n\t\tif(s.charAt(2)==s.charAt(3)&&s.charAt(4)==s.charAt(5))\\n\t\t\tout.append(\"Yes\\n\");\\n\t\telse\\n\t\t\tout.append(\"No\\n\");\\n\t\t\\n\t\tout.flush();\\n\t\tin.close();\\n\t\tout.close();\\n\t}\\n}     \\n", "target": "30", "substitutes": {"MOD": [" CP", " exports", " mod", " J", " L", " rc", " DUP", " CL", " VERS", " PROT", " DEBUG", " GL", " seed", " C", " minor", " P", " E", " X", " Version", " pid", " magic", " Z", " MAX", " INT", " JD", "PORT", " mods", " bits", " module", " ID"], "in": ["isin", "on", "id", "login", "ins", "serv", "din", "inside", "i", "line", "l", "data", "is", "name", "lin", "con", "r", "into", "init", "sin", "win", "source", "input", "stream", "get", "resource", "In", "er", "user", "c", "ini", "inn", "nin", "cin", "socket", "ssl", "raw", "min", "gin", "read", "inner", "plus", "n", "b", "kin", "again", "reader", "pin", "connection", "log", "bin", "file", "as", "inc", "lock", "IN", "thin"], "out": ["this", "parent", "print", "client", "buffer", "prefix", "null", "to", "ex", "v", "ext", "version", "line", "a", "data", "png", "name", "point", "extra", "r", "part", "exp", "io", "timeout", "source", "temp", "bool", "conn", "outer", "report", "style", "output", "w", "OUT", "list", "str", "plain", "writer", "string", "code", "Out", "o", "inner", "plus", "n", "b", "err", "again", "write", "obj", "exec", "flush", "no", "reader", "log", "bin", "file", "outs", "exit", "lock", "inc", "dump", "copy", "cache", "error", "console", "sync"], "s": ["S", "ts", "p", "u", "ads", "ins", "ss", "rs", "v", "si", "i", "strings", "line", "l", "qs", "data", "is", "es", "ls", "r", "its", "ws", "cs", "input", "ps", "bs", "f", "lines", "vs", "sl", "c", "ings", "ds", "rows", "words", "os", "us", "w", "ops", "str", "string", "o", "abs", "plus", "n", "ns", "gs", "b", "services", "su", "js", "xs", "ans", "as", "sc", "sync"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t// practice contest\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\tint a = 0;\\n\t\tif (s.charAt(0) == (t.charAt(0))) {\\n\t\t\ta += 1;\\n\t\t}\\n\t\tif (s.charAt(1) == (t.charAt(1))) {\\n\t\t\ta += 1;\\n\t\t}\\n\t\tif (s.charAt(2) == (t.charAt(2))) {\\n\t\t\ta += 1;\\n\t\t}\\n\t\tSystem.out.println(a);\\n\t}\\n}\\n", "target": "243", "substitutes": {}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int[] A = new int[N+1];\t// i\u753a\u306e\u6575\u306e\u6570\\n    int[] B = new int[N];\t// \u5404\u52c7\u8005\u306e\u5012\u305b\u308b\u6575\u306e\u6570\\n    \\n    for(int i=0; i<N+1; i++){\\n      A[i] = sc.nextInt();\\n    }\\n    for(int i=0; i<N; i++){\\n      B[i] = sc.nextInt();\\n    }\\n\\n    long cnt = 0;\\n    for(int i=0; i<N; i++){\\n      int rem1 = A[i] - B[i];\\n      if (B[i] > A[i]){\\n        cnt += A[i];\\n        B[i] -= A[i];\\n        int rem2 = A[i+1] - B[i];\\n        if (B[i] > A[i+1]){\\n          cnt += A[i+1];\\n          A[i+1] = 0;\\n        } else {\\n          cnt += B[i];\\n          A[i+1] = rem2;\\n        }\\n      } else {\\n      \tcnt += B[i];\\n      }\\n    }\\n    \\n    System.out.print(cnt);\\n    sc.close();\\n\t\t\\n  }\\n}", "target": "159", "substitutes": {"sc": ["cl", "sci", "nc", "nt", "sf", "scope", "pc", "class", "ser", "sec", "ss", " SC", "sub", "asc", "search", "l", "Sc", "SC", "bc", "cs", "sw", "app", "src", "sl", "c", " scr", "sp", "acc", "system", "uc", "set", "soc", "se", "ner", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "proc", "ec", "esc", "sync"], "N": ["Len", "S", "Num", "SN", "C", "J", "M", " n", "Y", "F", "NN", "Number", "Q", "P", "Na", "T", "I", "L", "R", "n", "B", "NM", "V", "K", "All", "D", "NT", "H", "Z", "NS", "Ns", "O", "G", "E", "X"], "A": ["all", "S", "AR", "NA", "C", "na", "J", "M", "a", "Array", "P", "I", "alpha", "B", "Ar", "V", "Args", "All", "K", "D", "H", "Z", "G", "area", "array"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    private static Scanner sc=new Scanner(System.in);\\n    public static void main(String[] args){\\n        int n=sc.nextInt();\\n        int[] a=new int[n];\\n        int notprime=0;\\n        for(int i=0;i<n;i++){\\n            a[i]=sc.nextInt();\\n            for(int j=2;j<=Math.sqrt(a[i]);j++){\\n                if(a[i]%j==0){\\n                    notprime++;\\n                    break;\\n                }\\n            }\\n        }\\n        System.out.println(n-notprime);\\n    }\\n}", "target": "226", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "server", "sec", "ss", " SC", "cur", "asc", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "cv", "lc", "ci", "lib", "c", " scr", "or", "sp", "config", "acc", "system", "sq", "uc", "ca", "sem", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "isc", "osc", "rc", "cc", "cr", "parser", "ctx", "ec", "esc", "console"], "n": ["nn", "nc", "nt", "ni", "count", "p", "size", "u", "num", "nan", "N", "span", "v", "l", "sn", "r", "z", "h", "nl", "len", "f", "fn", "s", "c", "ne", "m", "x", "e", "o", "d", "ns", "b", "network", "nb", "net", "k", "no", "number", "y", "en", "t"], "a": ["p", "na", "u", "auto", "ba", "aa", "A", "aj", "aux", "tta", "au", "c", "ga", "an", "ata", "sa", "ae", "ea", "alpha", "ca", "b", "ac", "qa", "aaa", "sup", "sta", "ama", "as", "ans", "la", "area", "ab", "da", "ma", "am", "va", "array"], "notprime": ["nonzero", "nitsize", "notzero", "Notprime", "notseed", " notseed", " notmatch", "hardsquare", "hardmatch", "notsize", "notmatch", "Notseed", "Notp", "nonprime", "notp", " notsize", "nonsquare", "nitseed", "notPrime", "hardPrime", "nitPrime", "Notzero", "nonPrime", "nonmatch", " notzero", " notp", "notsquare", " notPrime", "nitprime", "NotPrime", "Notsize", "nonp", "hardprime", " notsquare"], "i": ["bi", "api", "pi", "ori", "ni", "iu", "p", "slice", "u", "id", "multi", "qi", "ei", "ji", "xi", "v", "si", "ix", "is", "ri", "io", "init", "z", "h", "abi", "info", "f", "lc", "ci", "ui", "c", "ini", "key", "index", "eni", "x", "uri", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "cli", "ii", "b", "li", "oi", "in", "y", "ti", "fi"], "j": ["bi", "jj", "jc", "ni", "p", "oj", "adj", "u", "it", "J", "qi", "bj", "ji", "xi", "ch", "next", "v", "jp", "si", "ix", "l", "ij", "fr", "z", "h", "f", "br", "ci", "ui", "key", "index", "m", "x", "jo", "e", "ja", "uj", "ie", "o", "d", "g", "b", "ii", "li", "js", "k", "obj", "y", "jl", "aj"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\tint n = in.nextInt();\\n\t\tint arr[] = new int[n];\\n\t\tint max = Integer.MIN_VALUE, maxId = 0, min = Integer.MAX_VALUE, minId = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tarr[i] = in.nextInt();\\n\t\t\tif (arr[i] < min) {\\n\t\t\t\tmin = arr[i];\\n\t\t\t\tminId = i;\\n\t\t\t}\\n\t\t\tif (arr[i] > max) {\\n\t\t\t\tmax = arr[i];\\n\t\t\t\tmaxId = i;\\n\t\t\t}\\n\t\t}\\n\t\tboolean f = false, m = false;\\n\t\tif (minId == 0 && maxId == n - 1) {\\n\t\t\tfor (int i = 0; i < n - 1; i++) {\\n\t\t\t\tfor (int j = 1; j < n; j++) {\\n\t\t\t\t\tm = false;\\n\t\t\t\t\tif (arr[i] > arr[j]) {\\n\t\t\t\t\t\tint t = arr[i];\\n\t\t\t\t\t\tarr[i] = arr[j];\\n\t\t\t\t\t\tarr[j] = t;\\n\t\t\t\t\t\tm = true;\\n\t\t\t\t\t}\\n\t\t\t\t\t// check\\n\t\t\t\t\tf = check(arr);\\n\t\t\t\t\tif (f)\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\tif (m) {\\n\t\t\t\t\t\tint t = arr[i];\\n\t\t\t\t\t\tarr[i] = arr[j];\\n\t\t\t\t\t\tarr[j] = t;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\tif (f)\\n\t\t\t\t\tbreak;\\n\t\t\t}\\n\t\t} else if (min != 0 && maxId == n - 1) {\\n\t\t\tint t = arr[minId];\\n\t\t\tarr[minId] = arr[0];\\n\t\t\tarr[0] = t;\\n\t\t\tf = check(arr);\\n\t\t} else if (minId == 0 && maxId != n - 1) {\\n\t\t\tint t = arr[maxId];\\n\t\t\tarr[maxId] = arr[n - 1];\\n\t\t\tarr[n - 1] = t;\\n\t\t\tf = check(arr);\\n\t\t} else {\\n\t\t\tint t = arr[maxId];\\n\t\t\tarr[maxId] = arr[minId];\\n\t\t\tarr[minId] = t;\\n\t\t\tf = check(arr);\\n\t\t}\\n\\n\t\tif (f)\\n\t\t\tSystem.out.println(\"YES\");\\n\t\telse\\n\t\t\tSystem.out.println(\"NO\");\\n\t\tin.close();\\n\t}\\n\\n\tpublic static boolean check(int arr[]) {\\n\t\tint n = arr.length;\\n\t\tint order[] = new int[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\torder[i] = arr[i];\\n\t\tArrays.sort(order);\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tif (arr[i] != order[i])\\n\t\t\t\treturn false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}\\n", "target": "82", "substitutes": {"in": ["isin", "buffer", "loader", "login", "ins", "serv", "ln", "din", "arin", "binary", "ex", "path", "fin", "line", "data", "is", "lin", "con", "r", "init", "sin", "win", "h", "input", "In", "er", "conn", "s", "user", "inn", "ini", "image", "gen", "m", "nin", "socket", "token", "inf", "inner", "d", "rin", "kin", "err", "pass", "ner", "again", "reader", "scan", "txt", "bin", "readable", "as", "inc", "doc", "IN", "out"], "n": ["nn", "nc", "nt", "ni", "count", "p", "size", "u", "num", "nan", "N", "ln", "span", "v", "l", "sn", "r", "z", "h", "nl", "len", "un", "f", "s", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "net", "k", "no", "mn", "y", "en"], "arr": ["all", "div", "enc", "ir", "arc", "inst", "ars", "p", "val", "wr", "test", "arm", "na", "dict", "adv", "rep", "map", "par", "ch", "tr", "pr", "ext", "ar", "a", "data", "shr", "Array", "fr", "pre", "r", "dat", "adr", "aa", "iter", " array", "attr", "app", "dr", "br", "air", "inter", "order", "var", "list", "x", "img", "str", "mp", "arch", "ver", "array", "err", "Ar", "rr", "gr", "obj", "frac", "att", "art", "av", "war", "act", "aj", "ann", "coll"], "max": ["all", "div", "total", "conf", "cl", "count", "p", "size", "patch", "id", "nd", "ad", "res", "name", "ng", "right", "r", "init", "h", "z", "end", "first", "last", "c", "sum", "ax", "az", "index", "m", "w", "est", "x", "q", "rest", "d", "Max", "act", "ver", "ca", "k", "no", "scale", "mod", "cr", "MAX", "range", "cache", "dev", "default", "can"], "maxId": [" maxCount", "minid", " maxLength", "MAXId", "endMax", "minCount", "patchNum", "minNum", "maxLength", "maxCount", "MAXMax", "maxInt", "maxMax", "patchid", "minMax", "endid", " maxMax", " maxid", " maxNum", "MAXCount", "minLength", "patchId", "minInt", "maxNum", "endId", " maxInt", "endLength", "maxid", "MAXInt"], "min": ["none", "unit", "p", "size", "id", "minimum", "span", "a", "pre", "mini", "name", "sign", "partial", "r", "part", "start", "value", "init", "temp", "len", "first", "length", "f", "key", "index", "m", "x", "MIN", "skip", "zero", "small", "limit", "pos", "step", "scale", "mean", "mid", "pri", "range", "Min", "default"], "minId": ["minInfo", "MinStart", "minid", " minOrig", "maxConfig", "minCount", "sortId", " minStart", " minCount", "minStart", "maxCount", "minOrig", " minInfo", "maxMax", "maxInfo", "sortCount", "minMax", "MinId", "maxStart", " minid", "minimumId", "sortid", " minConfig", "minConfig", "minimumConfig", "MinInfo", "maxOrig", "maxid", " minMax", "minimumOrig", "sortMax", "MinMax"], "i": ["bi", "im", "api", "pi", "ori", "ni", "iu", "p", "ami", "u", "id", "multi", "qi", "iii", "xi", "ji", "v", "si", "ix", "l", "a", "data", "is", "mini", "ik", "ri", "uli", "io", "init", "info", "h", "abi", "q", "ci", "s", "vi", "ui", "ini", "index", "m", "eni", "x", "mu", "uri", "phi", "di", "ip", "e", "I", "ind", "ie", "ai", "o", "gi", "inner", "mi", "d", "cli", "ii", "b", "li", "oi", "yi", "y", "ki", "my", "ti", "fi"], "j": ["im", "jj", "jc", "p", "u", "J", "qi", "bj", "ji", "ch", "next", "v", "jp", "pr", "si", "l", "out", "a", "ij", "z", "end", "f", "br", "c", "m", "x", "e", "jo", "ja", "uj", "q", "o", "d", "g", "b", "ii", "li", "js", "k", "obj", "je", "y", "jl", "aj"], "t": ["ot", "te", "ts", "p", "test", "u", "v", "l", "a", "out", "z", "h", "f", "c", "m", "at", "w", "x", "e", "T", "pt", "ta", "tim", "q", "o", "d", "g", "b", "dt", "k", "type", "y", " T"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main{\\n    public static void main(String[] args)throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String str = br.readLine();\\n                    \\n                    String[] temp = str.split(\"\\\\s\");\\n                    \\n                    int r = Integer.parseInt(temp[0]);\\n                    int c = Integer.parseInt(temp[1]);\\n                    int[][] inp = new int[r][c];\\n                    \\n                    \\n\\n                    for(int i=0;i<r;i++){\\n                        str = br.readLine();\\n                        String[] line = str.split(\"\\\\s\");\\n                            for(int j=0; j<c; j++){\\n                                int x = Integer.parseInt(line[j]);\\n                                inp[i][j]= x;\\n                            }\\n                    }\\n\\n                    \\n                    int[] ve = new int[c];\\n                    for(int k=0; k<c ; k++){\\n                        str = br.readLine();\\n                        String[] strs = str.split(\"\\\\s\");\\n                        ve[k] = Integer.parseInt(strs[0]);\\n                        //System.out.println(ve[k]);\\n                    }\\n                    \\n                    for(int i=0;i<r;i++){\\n                        int ans =0;\\n                        int atemp = 0;\\n                        for(int j =0;j<c;j++){\\n                         atemp = inp[i][j] * ve[j];\\n                         ans += atemp;  \\n                        }\\n                        System.out.println(ans);\\n                    }\\n                        br.close();\\n    }\\n}", "target": "185", "substitutes": {"br": ["bl", "ir", "ber", "wr", "nor", "hr", "rb", "browser", "tr", "arr", "res", "jar", "mer", "lr", "cb", "fr", "ctr", "yr", "bh", "io", "iter", "stream", "bc", "bridge", "nr", "ler", "er", "dr", "orb", "mr", "handle", "BR", "img", "bro", "HR", "per", "Br", "Str", "sr", "b", "result", "err", "gr", "ner", "ger", "reader", "obj", "ocr", "our", "cr", "bar"], "str": ["div", "enc", "status", "unit", "p", "wr", "hr", "tr", "pr", "arr", "cur", "res", "STR", "url", "data", "fr", "name", "ctr", "init", "iter", "source", "input", "char", "f", "er", "s", "dr", "sl", "t", "style", "sp", "st", "text", "string", "kr", "stri", "Str", "inner", "n", "sr", "b", "err", "gr", "pass", "ner", "reader", "obj", "parse", "in", "txt", "doc", "spec", "read", "out"], "temp": ["phrase", "tmp", "unit", "ts", "p", "buffer", "size", "test", "json", "tr", "ex", "v", "path", "out", "const", "data", "part", "dat", "init", "Temp", "iter", "source", "input", "zip", "inter", "tem", "style", "key", "format", "w", "output", "base", "sp", "text", "pt", "string", "col", "code", "content", "n", "body", "flat", "time", "form", "txt", "template", "t"], "r": ["rn", "ir", "rec", "p", "u", "id", "rb", "ch", "tr", "pr", "v", "ar", "l", "fr", "ur", "rh", "right", "h", "attr", "nr", "f", "er", "dr", "m", "w", "e", "rg", "o", "d", "R", "n", "sr", "b", "err", "rr", "rc", "cr", "rx", "t", "ru", "re"], "c": ["cl", "nc", "count", "p", "pc", "C", "u", "ch", "v", "l", "a", "cu", "con", "sc", "z", "h", "co", "cs", "cor", "f", "lc", "ci", "dc", "s", "m", "w", "e", "ec", "cf", "q", "o", "ce", "d", "n", "b", "ca", "ac", "rc", "cc", "y", "cr", "t"], "inp": ["inips", "inP", "dini", "inci", "dinp", "dinps", " inps", "incp", "insp", "instp", " inP", "inccp", "initp", "ini", "incps", "intp", "insP", "iniP", " intp", " incp", "dincp", "inps", "insps", "inip", " ini"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "it", "u", "qi", "ji", "xi", "v", "si", "ix", "l", "a", "is", "ri", "ik", "io", "init", "z", "f", "ci", "ui", "ini", "phi", "ip", "di", "e", "I", "ie", "ai", "gi", "mi", "cli", "ii", "zi", "li", "oi", "in", "y"], "line": ["cl", "unit", "p", "id", "l", "page", "data", "name", "lin", "part", "entry", "block", "source", "zip", "row", "link", "end", "cell", "lines", "loc", "sl", "style", "key", "ne", "string", "frame", "code", "n", "rule", "LINE", "cle", "se", "li", "inline", "ge", "parse", "log", "file", "lf", "section", "look", "match", "Line", "sync"], "j": ["py", "jj", "jc", "p", "it", "u", "J", "ch", "ji", "xi", "v", "jp", "ix", "l", "a", "ij", "fr", "ik", "z", "f", "ax", "key", "index", "w", "e", "jo", "ja", "ie", "q", "o", "d", "n", "g", "ii", "b", "li", "js", "obj", "y", "ind", "out", "aj"], "x": ["dx", "p", "val", "u", "id", "num", "xi", "ex", "v", "ix", "l", "a", "value", "z", "h", "f", "lex", "ax", "index", "m", "w", "e", "xx", "xxx", "d", "n", "b", "xxxx", "xy", "fx", "y", "rx", "ux", "en", "X"], "ve": ["ue", "te", "he", "pect", "ke", "v", "vol", "le", "ice", "value", "Ve", "be", "cv", "ive", "de", "ne", "ev", "pe", "ode", "eve", "ide", "du", "ie", "rave", "ce", "q", "ove", "vp", "ine", "va", "iv", "ves", "ge", "ane", "so", "vd", "ave", "dev", "vet", "VE"], "k": ["ky", "sk", "mk", "p", "ka", "u", "ko", "ck", "ch", "ke", "ks", "km", "v", "kh", "kick", "kk", "ik", "z", "dk", "ok", "s", "ek", "key", "ak", "w", "kw", "e", "ack", "ijk", "kr", "q", "o", "kn", "n", "kin", "kid", "tk", "K", "work", "kj", "y", "ki"], "strs": ["structns", "Strs", " strb", "imgples", "STRs", "hrs", "structches", " strls", "STRls", "STRb", "Strb", "hrples", "imgs", "strp", "strns", "hrns", "strls", "strples", "structples", "strches", "strb", "structs", "imgns", "hrches", " strp", "Strls", "imgches", "Strp", "STRp"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String args[]){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int t = sc.nextInt();\\n\tint a = sc.nextInt();\\n    double h1 = 999;\\n    int answer = 0;\\n    for(int i = 0; i < n; i++){\\n      int h = sc.nextInt();\\n\t  double b = t-h*0.006;\\n\t  if(Math.abs(b-a) < h1){\\n\t  \th1 = Math.abs(b-a);\\n\t\tanswer = i+1;\\n\t  }\\n    }\\n    System.out.print(answer);\\n  }\\n}\\n", "target": "210", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "ser", "ch", "tc", "ss", " SC", "cur", "asc", "sh", "search", "fc", "Sc", "SC", "bc", "cs", "sw", "src", "cor", "row", "cv", "lc", "ci", "cer", "c", "sp", "system", "sq", "uc", "soc", "sr", "ca", "se", "ner", " Sc", "ocr", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "ec", "esc", "ctx", "cus"], "n": ["nn", "nc", "nt", "count", "p", "u", "N", "v", "l", "z", "nl", "f", "s", "c", "ne", "m", "w", "x", "np", "e", "q", "o", "d", "nb", "j", "net", "k", "number", "y", "en"], "t": ["ot", "total", "offset", "nt", "p", "u", "v", "l", "r", "z", "f", "s", "c", "m", "at", "x", "w", "e", "T", "ta", "o", "d", "g", "dt", "j", "k", "tp", "y"], "a": ["api", "p", "u", "ba", "l", "r", "aa", "z", "A", "pa", "f", "au", "s", "c", "ga", "at", "w", "x", "m", "an", "ae", "e", "sa", "ta", "ai", "o", "alpha", "d", "ac", "j", "aaa", "k", "art", "y", "as", "area", "ab", "aj"], "h1": ["H3", "H0", "v9", "ph1", "ehrap", "uh1", "H1", "eh9", "v3", "eh1", "H2", " h2", "uhinf", "f1", "h0", "ph0", "hrap", " h9", "H9", "ph2", "h3", "h2", "f2", "v2", "uh9", "uhrap", " h0", " hrap", "hinf", "ehinf", "f3", "h9", "v1", " hinf", "f9"], "answer": ["ace", "score", "offset", "p", "now", "message", "next", "reference", "addr", "align", "answered", "v", "average", "ahead", "question", "duration", "blank", "aa", "value", "z", "Answer", " answers", "f", "order", "activity", "reply", "index", "eni", "ae", "ai", "grade", "code", "result", "array", "username", "cover", "bb", "ee", "response", "iterator", "enna", "number", "issue", "address", "support", "area", "ab", "evidence", "word", "aj", "audio"], "i": ["bi", "hi", "api", "pi", "ni", "iu", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "v", "si", "ix", "l", "start", "io", "z", "f", "ci", "vi", "c", "ui", "ini", "index", "eni", "phi", "x", "e", "ip", "di", "I", "ie", "ai", "gi", "d", "mi", "ii", "li", "j", "oi", "chi", "y", "ti"], "h": ["hi", "pi", "p", "u", "v", "sh", "l", "bh", "ph", "z", "f", "c", "m", "w", "phi", "base", "e", "hs", "d", "ih", "j", "hm", "k", "hh", "H", "y", "th"], "b": ["buff", "fb", "p", "u", "pb", "next", "rb", "v", "l", "ib", "bis", "cb", "r", "bh", "home", "lb", "bc", "bu", "bs", "eb", "f", "bas", "c", "w", "base", "e", "big", "abs", "d", "B", "body", "nb", "sb", "bb", "beta", "bot", "bin", "y", "wb", "ab", "bar"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    int ans = 0;\\n    if(s.equals(\"SUN\")) {\\n      ans = 7;\\n    } else if(s.equals(\"MON\")) {\\n      ans = 6;\\n    } else if(s.equals(\"TUE\")) {\\n      ans = 5;\\n    } else if(s.equals(\"WED\")) {\\n      ans = 4;\\n    } else if(s.equals(\"THU\")) {\\n      ans = 3;\\n    } else if(s.equals(\"FRI\")) {\\n      ans = 2;\\n    } else{\\n      ans = 1;\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "136", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", " SC", "cur", "sub", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "desc", "cor", "c", "cer", " scr", "or", "sp", "acc", "system", "uc", "soc", "ca", "se", "ner", " Sc", "ocr", "scan", "osc", "rc", "cr", "sch", "ec", "esc", "sync"], "s": ["S", "sing", "sie", "features", "sf", "north", "p", "obs", "times", "ins", "ss", "si", "i", "strings", "l", "qs", "a", "es", "sv", "series", "ls", "ws", "is", "its", "sin", "sports", "f", "lines", "south", "sl", "c", "os", "states", "ds", "us", "m", "an", "parts", "e", "full", "submit", "ses", "string", "events", "o", "d", "plus", "n", "gs", "g", "b", "services", "ns", "sys", "su", "sb", "stats", "in", "y", "sg", "spec", "t", "sync"], "ans": ["ams", "helps", "aos", "sk", "ars", "AN", " covers", " sins", " logs", "aned", "anas", "sex", "vers", "na", " cases", "errors", "ases", "ins", "aus", "ks", "lan", " spans", "aces", " plans", " adds", "asts", "powers", "atan", "offs", "reads", "ations", "eps", "ions", "ens", "oops", "man", " an", "nas", "cas", "ds", "ros", "ants", "an", " means", "cons", "ANS", "arts", "leans", "anes", "ents", "kin", "ends", "ras", "ats", "anus", "scan", "asses", "san", "outs", "runs", "nos", "grades", " chars", "ons", "parser", " scans", "amps", "annels", "ays", "ann"]}}
{"code": "import java.util.*;\\nimport java.io.* ;\\n/*\\nNOTES:\\n-more than 10 digits (10^10), use long\\n-prefix sum of 1's and -1's to control flow of highlighting a region\\n-log(a)/log(b) = log base b of a\\n-create a position array if trying to see if elements show up next to each other sequentially\\n i.e. elements 1,2,3 are within 3 spots of each other in an array\\n      arr[scannedInt - 1] = i; (position of i at p[i] in original)\\n- use a freq array when counting instances of an element occurring\\n- increment the counter first before simulating anything turn-based (two player game)\\n\\n */\\n\\npublic class Main {\\n    static long mod = (long)(Math.pow(10, 9) + 7);\\n    public static String alpha = \"zabcdefghijklmnopqrstuvwxy\";\\n    public static void main(String[] args) throws IOException{\\n        FastReader in = new FastReader();\\n        long t= 1;\\n        while (t-- > 0) {\\n            Stack<String> stack = new Stack<>();\\n            int n = in.nextInt();\\n            boolean flag = true;\\n            stack.add(in.next());\\n            for(int i = 1; i<n; i++){\\n                String str = in.next();\\n                if(stack.contains(str)){\\n                    flag = false;\\n                    break;\\n                }\\n                if(stack.peek().charAt(stack.peek().length()-1) != str.charAt(0)){\\n                    flag = false;\\n                    break;\\n                }\\n                else stack.add(str);\\n            }\\n            if(flag) System.out.println(\"Yes\");\\n            else System.out.println(\"No\");\\n\\n        }\\n\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                }\\n                catch (IOException  e) { e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n    static ArrayList sieve(){\\n        ArrayList<Integer> primes = new ArrayList<>();\\n        int size = 1000001;\\n        int[] arr = new int[size+1];\\n        for(int i = 2; i*i<=size; i++){\\n            if(arr[i] == 0 && (long) (i*i)<=size)\\n                for(int pp = i*i; pp<=size; pp+=i) arr[pp]++;\\n        }\\n        for(int i = 2; i<=size; i++){\\n            if(arr[i]==0) primes.add(i);\\n        }\\n        return primes;\\n    }\\n\\n\\n    static boolean isPalindrome(String s){\\n        for(int i = 0; i<s.length()/2; i++){\\n            if(s.charAt(i) != s.charAt(s.length()-i-1)) return false;\\n        }\\n        return true;\\n    }\\n\\n    static ArrayList factors(long n ){\\n        ArrayList<Long> facts = new ArrayList<>();\\n        for(int i = 1; i<=(int)Math.sqrt(n); i++){\\n            if(n%i == 0){\\n                if( i == Math.sqrt(n)) facts.add((long)i);\\n                else{\\n                    facts.add((long)i);\\n                    facts.add(n/i);\\n                }\\n            }\\n        }\\n        Collections.sort(facts);\\n        return facts;\\n    }\\n\\n    static boolean isPrime (int n){\\n        if(factors(n).size() ==2) return true;\\n        else return false;\\n    }\\n\\n\\n\\n\\n\\n    static long GCD(long a, long b) {\\n        if (b==0) return a;\\n        return GCD(b,a%b);\\n    }\\n    static long LCM(long a, long b){\\n        return (a*b)/(GCD(a,b));\\n    }\\n    static String rev(String s){\\n        char[] arr = s.toCharArray();\\n        for(int i = 0; i<(s.length()+1)/2; i++){\\n            char temp = arr[i];\\n            arr[i] = arr[s.length()-i-1];\\n            arr[s.length()-i-1] = temp;\\n        }\\n        String fin = new String(arr);\\n        return fin;\\n    }\\n    static long pow(long a, long N) {\\n        if (N == 0) return 1;\\n        else if (N == 1) return a;\\n        else {\\n            long R = pow(a,N/2);\\n            if (N % 2 == 0) {\\n                return R*R;\\n            }\\n            else {\\n                return R*R*a;\\n            }\\n        }\\n    }\\n\\n    static long powMod(long a, long N) {\\n        if (N == 0) return 1;\\n        else if (N == 1) return a % mod;\\n        else {\\n            long R = powMod(a,N/2) % mod;\\n            R *= R;\\n            R %= mod;\\n            if (N % 2 == 1) {\\n                R *= a;\\n                R %= mod;\\n            }\\n            return R % mod;\\n        }\\n    }\\n\\n}\\n\\n", "target": "70", "substitutes": {"mod": ["id", " bit", " multiplier", " count", " id", "l", " m", "len", " seed", " len", " code", " exp", " counter", " p", "T", " magic", " base", " major", " mask", " sec", " mul", " seq", " module", " shift"], "alpha": [" alt", " rgb", " alphabet", " cat", " password", " desc", " escape", " beta", " lang", " title", " secret", " alias", " pad", " data", " sig", " ans", " A", " color", " magic", " prefix", " mask", " script", " constant", " hash", " sign", " rand", " letter"], "in": ["this", "cl", "ic", "isin", "p", "login", "ins", "serv", "din", "to", "arin", "ex", "v", "inside", "url", "impl", "out", "l", "data", "is", "line", "lin", "diff", "r", "init", "iter", "source", "win", "input", "resource", "f", "In", "conn", "image", "c", "ini", "inn", "nin", "e", "socket", "min", "read", "inf", "inner", "d", "rin", "cli", "kin", "err", "again", "pass", "reader", "pin", "exec", "connection", "scan", "log", "bin", "readable", "inc", "doc", "IN"], "t": ["ot", "ts", "nt", "p", "it", "qt", "v", "unt", "l", "ct", "h", "z", "f", "c", "m", "w", "x", " p", "tl", "e", "T", "pt", "ta", "d", "tn", "g", "ti", "tp", "j", " tid", "dt", "lt", "trial", "y", "tt", "ant", "tf", "window"], "stack": ["counter", "status", "function", "chain", "scope", "fl", "wrapper", "buffer", "slice", "queue", "l", "data", "fr", "r", "start", "stage", "iter", "stream", "source", "lower", "shell", "sl", "style", "acks", "index", "history", "load", "list", "base", "depth", "Stack", "config", "string", "left", "pop", "flags", "code", "context", "loop", "push", "tree", "sequence", "layer", "level", "la", "inc", "console", "cache", "out", "array", "window"], "n": ["ot", "nc", "nt", "ni", "count", "p", "u", "num", "v", "l", "sn", "r", "z", "h", "nl", "len", "f", "conn", "c", "m", "w", "x", " ni", "o", "d", "ns", "nb", "j", "net", "k", "number", "y"], "i": ["bi", "hi", "pi", "ni", "p", "u", "multi", "qi", "xi", "v", "si", "ix", "l", "ri", "io", "z", "info", "abi", "f", "ci", "ui", "ini", "index", "m", "phi", "x", "uri", "e", "di", "ip", "I", "ie", "ai", "o", "gi", "ii", "zi", "li", "j", "oi", "chi", "y", "ti", "fi"], "str": ["l", "fr", "ctr", "r", "exp", "char", "sl", "star", "stri", "g", "sta", "doc", "p", "id", "pr", "strings", "url", "line", "STR", "data", "iter", "z", "h", "f", "list", "kr", "code", "d", "j", "pos", "sc", "strip", "div", "enc", "cl", "bl", "dict", "sec", "tr", "cur", "part", "dr", "er", "x", "sp", "sr", "err", "pass", "gr", "obj", "step", "out", "sync", "coll", "hr", "start", "style", "e", "text", "string", "pt", "Str", "cr", "spec"], "flag": ["wait", "status", "cat", "offset", "live", "count", "bug", " bit", "id", "add", "ar", "line", "lag", "debug", "part", "sign", " arg", "store", "start", "mask", "info", "ag", "len", "band", "char", "f", "tag", " flags", "style", "key", "bit", "fun", "wave", "filter", "bag", "enable", "like", "string", "flags", "code", "ish", "err", "leaf", "field", "Flag", "child", "force", "die", "log", "type", "kind", "file", "group", "close", "ind"], "br": ["bl", "oper", "ber", "p", "hr", "rb", "browser", "ch", "tr", "next", "pr", "cur", "vr", "db", "fr", "ur", "r", "bh", "be", "iter", "bridge", "bc", "bal", "ler", "er", "dr", "mr", "sl", "orb", " tr", "BR", "sp", "bro", "img", "pl", "Br", "brush", "rest", "prev", "ver", "sr", "B", "err", "gr", "obj", "buf", "bb", "bt", "bar", "rt", "fore"], "st": ["bl", "ut", "cl", "ste", "inst", "ust", "nt", "sth", "ST", "nd", "stable", "ss", "rs", "pr", "const", "sh", "ct", "fr", "std", "sn", "r", "sign", "sv", "be", "ft", "fe", "sw", "src", "sl", "est", "sp", "sa", "ist", "string", "pt", "stri", "rest", "Str", " est", "sr", "St", "se", "sb", "sta", "ast", "sts", "struct", "cr", "ost", "bt", "rt", "sc"], "primes": ["Prices", " prisions", "prices", "prisions", "Primes", "trices", "Prime", "prime", " prime", " prices", "trimes", "trime", "Prisions", "trisions"], "size": ["div", "empty", "count", "p", "it", "sec", "here", "Size", "ix", "z", "len", "loc", "SIZE", "cm", "c", "sp", "large", "e", "max", "code", "shift", "g", "ize", "small", "se", "j", "k", "iz", "scale", "address", "shape", "capacity", "out", "six"], "arr": ["bl", "seq", "inst", "vec", "val", "dict", "rep", "map", "par", "pr", "pre", "Array", "dat", "exp", "aa", "iter", "attr", "len", "app", "dr", "dim", "gr", "obj", "pos", "batch", "array"], "length": ["head", "count", "slice", "character", "split", "distance", "start", "len", "end", "width", "letter", "height", "index", "text", "string", "left", "limit", "padding", "body", "pace", "pos", "angle", "Length", "sequence", "position", "type"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    System.out.println(solve());\\n  }\\n  \\n  private static int solve() {\\n    FastReader fr = new FastReader();\\n    int N = fr.nextInt();\\n    int result = 0;\\n    int current = -9999; // value of current character in Int\\n    String S = fr.next();\\n    for (int i = 0; i < N; i++) {\\n      int checking = S.charAt(i) - 'a';\\n      if (current == checking) continue; // if found the same color, it will slime to the near by color\\n      current = checking; // change current color\\n      result++; // and also add one to result since we found a new color that can not be fused\\n    }\\n    \\n    return result;\\n  }\\n}\\n\\nclass FastReader {\\n  BufferedReader br;\\n  StringTokenizer st;\\n\\n  public FastReader() {\\n    br = new BufferedReader(new\\n        InputStreamReader(System.in));\\n  }\\n\\n  String next() {\\n    while (st == null || !st.hasMoreElements())\\n    {\\n      try\\n      {\\n        st = new StringTokenizer(br.readLine());\\n      }\\n      catch (IOException e)\\n      {\\n        e.printStackTrace();\\n      }\\n    }\\n    return st.nextToken();\\n  }\\n\\n  int nextInt() {\\n    return Integer.parseInt(next());\\n  }\\n\\n  long nextLong() {\\n    return Long.parseLong(next());\\n  }\\n\\n  double nextDouble() {\\n    return Double.parseDouble(next());\\n  }\\n\\n  String nextLine() {\\n    String str = \"\";\\n    try {\\n      str = br.readLine();\\n    }\\n    catch (IOException e) {\\n      e.printStackTrace();\\n    }\\n    return str;\\n  }\\n}", "target": "218", "substitutes": {"fr": ["fb", "ir", "fer", "sf", "fl", "hr", "tr", "pr", "fin", "l", "lr", "Fr", "r", "fs", "iter", "fe", "h", "er", "f", "br", "fm", "feed", "fp", "kr", "rf", "q", "FR", "sr", "RF", "b", "util", "err", "rr", "fast", "gr", "reader", "parse", "file", "ref", "rt", "fx"], "N": ["S", "Num", "No", "Count", "C", "J", "num", "M", " n", "F", "P", "A", "T", "I", "Results", "Result", "L", "R", "Max", "n", "B", "V", "K", "D", "NT", "Ns", "Output", "Res"], "result": ["complete", "counter", "score", "total", "unit", "next", "num", "res", "error", "info", "results", "grade", "Result", "success", "inner", "R", "err", "ignore", "root", "response", "correct", "number", "MAX", "random"], "current": ["counter", "total", "currently", "Current", "parent", "nt", "count", "future", "next", "progress", "continue", "valid", "draft", "running", "temp", "recent", "active", "reported", "code", "skip", "loop", "obj", "step", "sequence", "correct", "random"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author ky112233\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BCardGameForTwo solver = new BCardGameForTwo();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BCardGameForTwo {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int n = in.nextInt();\\n            int[] a = new int[n];\\n            for (int i = 0; i < n; i++) a[i] = in.nextInt();\\n            Arrays.sort(a);\\n            int alice = 0;\\n            int bob = 0;\\n            for (int i = n - 1; i >= 0; i--) {\\n                if ((n - 1 - i) % 2 == 0) alice += a[i];\\n                else bob += a[i];\\n            }\\n            out.println(alice - bob);\\n        }\\n\\n    }\\n}\\n\\n", "target": "132", "substitutes": {"inputStream": ["inputSteam", "outputSteam", " inputstream", " inputSteam", "InputSteam", "workSteam", "Inputstream", "inputSt", "workStream", "InputSt", "InputStream", "outputstream", "workstream", "inputstream", "outputSt", " inputSt"], "outputStream": ["outputWriter", "inputSteam", "outputSteam", "inputFile", "Outputstream", "OutputStream", "OutputWriter", " outputSteam", " outputFile", "OutputFile", "outputFile", "inputWriter", "outSteam", "outStream", " outputWriter", "outstream", "OutputSteam", "outputstream", "inputstream", "outWriter"], "in": ["this", "ic", "isin", "id", "login", "ins", "din", "ln", "arin", "inside", "version", "path", "l", "data", "is", "request", "lin", "con", "r", "io", "source", "win", "init", "input", "sin", "resource", "In", "gen", "conn", "s", "image", "inn", "ini", "c", "arg", "w", "x", "nin", "e", "cin", "en", "gin", "inf", "inner", "rin", "kin", "err", "again", "ner", "reader", "pin", "vin", "bin", "file", "as", "inc", "IN", "thin", "re"], "out": ["this", "ext", "ou", "init", "win", "key", "output", "w", "Out", "o", "inner", "exec", "connection", "bin", "group", "inc", "copy", "error", "window", "call", "client", "server", "version", "line", "data", "name", "io", "timeout", "input", "temp", "conn", "user", "down", "sum", "list", "socket", "again", "write", "up", "no", "file", "off", "IN", "self", "serv", "view", "pool", "extra", "part", "gen", "outside", "writer", "err", "obj", "net", "log", "bar", "cache", "sync", "parent", "ex", "page", "inas", "outer", "password", "OUT", "string", "scan", "job", "outs", "exit"], "solver": [" solution", "dsolver", "solving", "ssolving", "ssolve", "Solver", " solving", "ssolver", "dsorter", "ssolution", "solve", "solution", "Solution", "dsolution", "Solving", "dsolve", "Solve", "ssorter", "sorter", "Sorter", " solve"], "testNumber": ["trialNumber", "testNumbers", "testnumber", " trialnumber", " trialNumber", " testnumber", " trialNumbers", "trialNumbers", "trialnumber", " testNum", " testNumbers", " trialNum", "testNum", "trialNum"], "n": ["nn", "nc", "nt", "p", "size", "dn", "u", "num", "nd", "nu", "N", "v", "l", "sn", "z", "len", "f", "s", "c", "inn", "ne", "m", "an", "x", "nin", "w", "e", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "no", "number", "y", "en", "t"], "a": ["p", "ia", "u", "na", "span", "access", "v", "auto", "ba", "Array", "aa", "A", "ha", "aj", "oa", "aux", "y", "au", "s", "c", "ga", "an", "ata", "sa", "ae", "ea", "e", "active", "ai", "o", "alpha", "ca", "b", "wa", "aaa", "another", "ama", "as", "la", "asa", "area", "ans", "da", "ab", "ma", "missing", "am", "va", "array"], "i": ["bi", "hi", "ic", "api", "pi", "ni", "iu", "p", "ami", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "anti", "si", "ix", "l", "mini", "ik", "ri", "io", "init", "z", "abi", "ci", "vi", "ui", "ini", "c", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ind", "ie", "ai", "q", "o", "min", "gi", "mi", "inner", "d", "ii", "b", "zi", "li", "j", "oi", "yi", "chi", "y", "my", "ti"], "alice": ["Alider", "salice", "ALice", "malix", "alrice", "ALci", "Alice", "alence", " alica", "Alci", " alider", "malice", "ALider", " alence", "alider", "ALix", "elix", "ALica", "ALence", " alci", " alrice", "malence", "Alica", " alix", "alci", "elence", "salix", "malrice", "alica", "salider", "elider", "elice", "salence", "alix", "salrice"], "bob": ["sbob", "abab", "abobl", "Bib", "ambib", "bib", "bobl", "Bobs", "abob", "bobs", "sbib", "bobb", "bab", "ambob", "lore", "lib", "ebib", "blib", "bore", "sbore", "ebobs", "ebobb", "blobb", "ambobl", " bib", "blob", " bobs", "lobb", " bobl", " bobb", "ambab", " bab", "blore", "sbobb", "Bob", "ebob", "abib", "lob", "Bobb"]}}
{"code": "/*package whatever //do not write package name here */\\n\\nimport java.io.*;\\nimport java.io.BufferedReader; \\nimport java.io.IOException; \\nimport java.io.InputStreamReader; \\nimport java.util.Scanner; \\nimport java.util.StringTokenizer; \\n\\nclass Main {\\n    static class FastReader{\\n        BufferedReader br;\\n        StringTokenizer st;\\n        public FastReader(){\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n        String next(){\\n            while(st==null || !st.hasMoreTokens()){\\n                try{\\n                    st = new StringTokenizer(br.readLine());\\n                }\\n                catch(IOException e){\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n        int nextInt(){\\n            return Integer.parseInt(next());\\n        }\\n    }\\n\tpublic static void main (String[] args) {\\n\t\tFastReader ob = new FastReader();\\n\t\tint n = ob.nextInt();\\n\t\tint arr[] = new int[n];\\n\t\tfor (int i=0;i<n ;i++ ) {\\n\t\t    arr[i] = ob.nextInt();\\n\t\t    //System.out.println(arr[i]);\\n\t\t}\\n\t\tint count=1;\\n\t\tint min=arr[0];\\n\t\tfor (int i=1;i<n ;i++ ) {\\n\t\t    //System.out.println(arr[i]);\\n\t\t    if(min>=arr[i]){\\n\t\t        count++;\\n\t\t        min=arr[i];\\n\t\t        \\n\t\t    }\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "229", "substitutes": {"br": ["bl", "fb", "ber", "hr", "rb", "browser", "tr", "pr", "jar", "db", "cb", "fr", "ur", "r", "bf", "obi", "bridge", "bc", "bs", "dr", "mr", "bird", "BR", "raf", "grab", "bro", "str", "bur", "Br", "brush", "b", "err", "bg", "obj", "cro", "buf", "sb", "bb", "rib", "bt", "cr", "bar", "ab", "rt", "front", "boot"], "st": ["ace", "ut", "bl", "inst", "ste", "ust", "nt", "sth", "ST", "p", "nd", "stable", "tr", "ss", "pr", "const", "l", "db", "ct", "sn", "std", "fr", "r", "start", "store", "be", "ft", "fe", "sw", "src", "bs", "sl", "style", "est", "pe", "sp", "str", "ist", "pt", "string", "stri", "rest", "Str", "ld", "b", "St", "se", "sty", "sb", "sta", "step", "ast", "sts", "art", "struct", "bt", "stop", "ost", "cr", "rt", "sc", "t"], "ob": ["que", "buff", "fb", "Ob", "over", "ub", "obs", "bug", "http", "mb", "rb", "ro", "nob", "oy", "obb", "rob", "om", "auto", "ib", "db", "cb", "obl", "bf", "io", "info", "lb", "co", "app", "bs", "eb", "orb", "lib", "raf", "img", "abs", "o", "b", "org", "obj", "sb", "bb", "OB", "job", "off", "ab", "mob", "Rob"], "n": ["nn", "nc", "nt", "ni", "count", "p", "size", "nor", "u", "num", "N", "ln", "v", "l", "sn", "r", "z", "nl", "len", "f", "s", "c", "m", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "norm", "no", "mn", "y", "t", "sync"], "arr": ["all", "cat", "val", "num", "par", "stack", "pr", "ar", "a", "data", "Array", "fr", "dat", "adr", " array", "ange", "app", "aj", "order", "index", "x", "list", "img", "var", "b", "err", "ray", "Ar", "ras", "ignore", "obj", "j", "frac", "parse", "aur", "our", "ab", "iq", "batch", "plot", "array"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "slice", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "mini", "uni", "ri", "uli", "my", "start", "io", "info", "abi", "ci", "ui", "ini", "index", "phi", "x", "mu", "uri", "ip", "di", "I", "ai", "gi", "mi", "ii", "b", "li", "j", "oi", "k", "ind", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        char input = scanner.next().charAt(0);\\n\\n        if (input >= 'a' && input <= 'z') {\\n            System.out.println('a');\\n        } else {\\n            System.out.println('A');\\n        }\\n\\n    }\\n}\\n", "target": "80", "substitutes": {"scanner": [" scaner", "Scaninner", "spaner", "scanizer", "caner", "spaninner", "spanner", "canizer", "canter", "caninner", " scanter", "scanter", "canbird", "scaner", "Scanter", "Scanbird", "scanbird", "Scaner", " scanbird", "Scanizer", "spanizer", "canner", "Scanner", "scaninner"], "input": ["pattern", "enc", "div", "empty", "null", "character", "escape", "ahead", "data", "request", "unknown", "value", "source", "but", "temp", "concept", "char", "session", "dc", "image", "key", "feed", "pointer", "magic", "output", "pull", "Input", "text", "string", "active", "raw", "anything", "alpha", "inf", "op", "comment", "element", "command", "accept", "again", "current", "amp", "qa", "word", "inc", "missing", "argument", "error", "act"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\tString[] temp = scanner.nextLine().split(\" \");\\n\t\tint k = Integer.parseInt(temp[0]);\\n\t\tint n = Integer.parseInt(temp[1]);\\n\\n\t\tfor(int i = n - k + 1; i < k + n; i ++) {\\n\\n\t\t\tSystem.out.println(i);\\n\\n\t\t}\\n\\n\\n\t}\\n\\n}\\n", "target": "207", "substitutes": {"scanner": [" scaner", "scanker", "caner", "analyner", "canter", "Scanser", " scanser", "nerter", "scanter", "analyser", "analyker", "nerner", "canker", "scaner", "nerer", "Scanker", "Scanter", "Scaner", "nerker", " scanker", "scanser", "analyer", "canner", "Scanner"], "temp": ["font", "tmp", "unit", "now", "buffer", "test", "null", "emp", "qt", "json", "split", "v", "ex", "path", "data", "cel", "part", "partial", "zip", "Temp", "iter", "source", "input", "s", "tem", "key", "format", "output", "w", "base", "pack", "str", "text", "pt", "content", "Str", "tw", "inner", "result", "current", "flat", "txt", "fake", "out"], "k": ["kt", "sk", "mk", "p", "u", "id", "ko", "ck", "km", "ks", "v", "kick", "l", "ik", "z", "h", "dk", "ok", "f", "length", "ek", "c", "key", "ak", "m", "x", "ku", "e", "kw", "kil", "q", "o", "d", "kn", "b", "j", "K", "in"], "n": ["nn", "nc", "nt", "p", "u", "num", "N", "v", "l", "sn", "r", "z", "h", "un", "nr", "f", "conn", "s", "c", "inn", "ne", "m", "w", "x", "nin", "q", "o", "d", "ns", "kn", "b", "network", "nb", "j", "net", "in", "y", "en"], "i": ["bi", "pi", "ni", "iu", "p", "it", "u", "slice", "id", "multi", "qi", "ji", "xi", "si", "ix", "ri", "start", "init", "io", "info", "z", "abi", "ci", "vi", "ui", "ini", "key", "index", "phi", "uri", "ip", "di", "I", "ai", "o", "gi", "inner", "ii", "zi", "li", "j", "oi", "chi", "number", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    final Scanner sc = new Scanner(System.in);\\n    final String s = sc.nextLine();\\n    final String t = sc.nextLine();\\n    int min_diff = s.length();\\n\\n    for (int i = 0; i <= (s.length() - t.length()); i++) {\\n      int j = 0;\\n      int diff = 0;\\n      while (j < t.length()) {\\n        if (s.charAt(i + j) != t.charAt(j)) {\\n          diff++;\\n        }\\n        j++;\\n      }\\n\\n      if (min_diff > diff) {\\n        min_diff = diff;\\n      }\\n    }\\n\\n    System.out.println(min_diff);\\n  }\\n}", "target": "158", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "pc", "core", "com", "ch", "tc", "ss", " SC", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "cor", "lc", "ci", "cer", "c", "sp", "system", "uc", "soc", "ca", "se", "ner", " Sc", "ocr", "sb", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "ctx", "cus", "sync"], "s": ["S", "ts", "sf", "p", "u", "ins", "ss", "v", "si", "strings", "a", "l", "is", "sv", "es", "ls", "source", "sin", "cs", "src", "f", "south", "os", "c", "ds", "str", "e", "string", "ses", "o", "n", "ns", "gs", "b", "services", "sets", "sys", "small", "g", "js", "su", "sb", "in", "ans", "y"], "t": ["ut", "total", "target", "ts", "nt", "p", "test", "title", "it", "u", "qt", "v", "unt", "l", "out", "r", "h", "temp", "f", "c", "tm", "at", "x", "m", "w", "ty", "e", "T", "pt", "st", "ta", "token", "text", "o", "wt", "d", "n", "g", "b", "flat", "tree", "not", "txt", "template", "art", "type", "y", "tt", "rt", "xt", "ant", "tf"], "min_diff": ["min33ignore", "min___Diff", "min_error", "minimum64ignore", "min33error", "min_old", "minimum64load", "sort_dist", "min33diff", "min__Diff", "minlexdiff", "minimum_error", "minimum_load", "min_load", " min_Diff", "min__new", " min_max", "min__diff", "min_Diff", "sort_old", "min33load", "min64load", "minimum_ignore", "minimum64diff", "minlexDiff", " min_error", "min64diff", "min_ignore", "minlexnew", "min___error", "min64ignore", "minimum64error", "sort_diff", "min___same", "min_max", "min__max", "minimum_diff", "min_dist", " min_same", "min_new", "min_same", "sort_Diff", "min___diff", "minlexmax", " min_new", "min64error"], "i": ["hi", "bi", "pi", "ori", "ni", "iu", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "ik", "io", "info", "z", "f", "ci", "ui", "ini", "index", "phi", "x", "uri", "di", "ip", "e", "I", "ie", "ai", "o", "gi", "ii", "b", "zi", "li", "in", "y", "ind"], "j": ["dj", "jj", "ori", "p", "adj", "it", "u", "bug", "J", "qi", "ji", "v", "jp", "ix", "l", "a", "ij", "fr", "r", "io", "z", "gap", "length", "f", "ci", "ui", "c", "key", "index", "m", "x", "e", "note", " dj", "uj", "ie", "o", "d", "n", "g", "ii", "b", "dy", "li", "pos", "k", "js", "_", "iff", "y", " difference", "ind", "jo"], "diff": ["none", "conf", "dist", "low", " delta", "count", "change", "test", "patch", "null", "bug", "id", "slice", "fail", "neg", "failed", "part", "fix", "block", "value", "info", "length", "cmp", "lc", "check", "note", "erence", "between", "min", "d", "shift", "Diff", "b", "err", "ii", "ignore", "field", "pos", "def", "different", "no", "found", "update", "not", "iff", " difference", " def", "missing", "ref", "range", "dev", "error", "ind", "default", "jo"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int[] h=new int[n];\\n    for(int i=0;i<n;i++){\\n      h[i]=sc.nextInt();\\n    }\\n    int ans=0;\\n    for(int i=100;i>0;i--){\\n      boolean living=false;\\n      for(int j=0;j<n;j++){\\n        if(h[j]>=i){\\n          if(!living){\\n            living=true;\\n            ans++;\\n          }\\n        }else{\\n          living=false;\\n        }\\n      }\\n    }\\n    System.out.println(ans);\\n  }\\n}\\n", "target": "77", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "cor", "lc", "ci", "c", "cer", "sp", "system", "sq", "uc", "set", "ca", "cle", "se", "ner", " Sc", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus"], "n": ["nn", "nc", "p", "u", "num", "nan", "N", "v", "l", "r", "z", "len", "f", "s", "c", "inn", "ne", "m", "w", "x", "an", "e", "o", "d", "ns", "b", "network", "nb", "net", "k", "in", "number", "y", "en", "t"], "h": ["head", "hi", "p", "he", "u", "hash", "hr", "gh", "v", "sh", "l", "uh", "rh", "bh", "ht", "header", "ph", "ha", "hd", "ah", "f", "c", "m", "w", "e", "han", "hist", "hp", "q", "hs", "o", "b", "ih", "hm", "k", "hh", "host", "H", "oh", "eh", "th"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "a", "l", "mini", "is", "ri", "io", "init", "z", "info", "f", "ci", "ui", "c", "ini", "key", "index", "eni", "phi", "x", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "cli", "zi", "li", "oi", "in", "chi", "y", "ki", "ind", "ti", "fi"], "ans": ["nn", "ams", "ana", "acts", "sk", "aned", "ni", "ars", "anned", "anas", "ia", "vers", "na", "ani", "errors", "ins", "nan", "aus", "ks", "ss", "lan", "aces", "asts", "a", "vals", "atan", "reads", "ls", "ations", "alls", "cs", "ians", "abilities", "s", "os", "ings", "nas", "ants", "an", "x", "ops", "cons", "aid", "ANS", "ai", "leans", "ents", "ns", "ats", "anc", "ids", "outs", "as", "runs", "anners", "ons", "aning", "amps", "ays", "ann"], "j": ["dj", "jj", "ori", "ni", "p", "adj", "it", "u", "J", "qi", "bj", "ji", "xi", "v", "jp", "pr", "ix", "l", "a", "ij", "old", "ik", "part", "r", "fr", "z", "end", "f", "c", "key", "m", "x", "e", "jo", " dj", "ja", "pt", "uj", "ie", "o", "d", "ii", "b", "li", "js", "k", "obj", "job", "y", "jl", "jen", "ind", "aj"], "living": ["breeding", "lived", "dropping", " popping", " loving", "facing", "being", "live", "ending", "saving", "increasing", "rising", "learning", "winning", "rolling", "anti", "iving", "existing", "working", "l", "flying", "culture", "liv", "smoking", "born", "Living", "growing", "running", "watching", "life", "keeping", "writing", "standing", "friendly", "lasting", "fighting", "ing", "like", "warming", "speaking", " staying", "bearing", " keeping", "looking", "killing", "stellar", " dying", "moving", "changing", "playing", "loading", "reading", "serving", "loving"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\tint n = scanner.nextInt();\\n\t\tint k = scanner.nextInt();\\n\t\tString s = scanner.next();\\n\\n\t\tchar conv = Character.toLowerCase(s.charAt(k - 1));\\n\t\tString pre = (k == 1 ? \"\" : s.substring(0, k - 1));\\n\t\tString next = (k == n ? \"\" : s.substring(k));\\n\\n\t\tSystem.out.println(pre + conv + next);\\n\t}\\n}", "target": "71", "substitutes": {"scanner": [" scaner", "Scaninner", "scanker", "caner", "scheer", "canning", "canatter", "canter", " scanatter", "scheker", "caninner", "Scannder", " scanter", "scanter", "nerinner", "Scanatter", "nerner", "scaner", "nerning", "Scanker", "nerer", "scanning", "Scanter", "Scaner", "scanatter", " scanker", "schener", "Scanning", "schender", "scannder", " scannder", "canner", "Scanner", "scaninner"], "n": ["nn", "nc", "nt", "p", "u", "num", "N", "ln", "v", "i", "l", "a", "sn", "r", "z", "nl", "f", "c", "ne", "m", "x", "e", "o", "d", "ns", "g", "b", "pn", "nb", "j", "net", "no", "in", "y", "en", "t"], "k": ["kt", "sk", "mk", "p", "ka", "u", "id", "ko", "ck", "ch", "ke", "km", "ks", "N", "v", "i", "kick", "l", "kk", "ik", "h", "z", "dk", "f", "ok", "length", "ek", "c", "key", "ak", "m", "x", "ku", "kw", "e", "ijk", "q", "o", "unk", "kn", "d", "kin", "g", "kid", "j", "tk", "K", "work", "kind", "kat", "y", "ki", "section", "spec", "coll"], "s": ["S", "ts", "sf", "sections", "p", "u", "ins", "ss", "ks", "v", "si", "strings", "l", "qs", "bis", "series", "sv", "es", "ls", "ws", "sites", "fs", "source", "ps", "f", "sl", "os", "tests", "ds", "c", "parts", "e", "ssl", "ses", "string", "abs", "gs", "ns", "sets", "services", "sym", "styles", "su", "sb", "xs", "sts", "ans", "letters", "t"], "conv": ["conf", "cat", "seq", "api", "func", "p", "prefix", " compat", "ln", "v", "version", "vr", "const", "bis", "con", "init", "vert", "attr", "info", "cv", "cmp", "lc", "utf", "vi", "pair", "inter", "conn", "csv", "pkg", "base", "chev", "string", "fp", "rev", "prev", "ver", "vp", "util", "current", "pos", "pin", "prot", "inv", "append"], "pre": ["none", "PRE", "py", "pen", "pc", "prefix", "patch", "pres", "po", "par", "pr", "before", "i", "name", "start", "co", "first", " pref", "pa", "inter", "base", "pe", "per", "min", "pro", "pred", "Pre", "prev", "ca", " prefix", "current", "pos", " prev", "up", "parse", "in", " previous", "rel", "prom", "pri", "prep", "fix", "post"], "next": ["complete", "self", "seq", "api", "now", "prefix", "future", "patch", "sec", "follow", "Next", "cur", "sub", "search", "const", "page", "bis", "series", "then", "continue", "start", "iter", "dot", "vert", "get", "end", "nr", "first", "desc", "last", "conn", "filter", "feed", "done", "text", "string", "en", "sen", "min", "skip", "big", "shift", "pred", "prev", "success", "latest", "current", "vious", "open", "ner", "j", "step", "parse", "scan", "prot", "iterator", "fix", "random", "read", "append", "close"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint N = Integer.parseInt(br.readLine());\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tString[] str = br.readLine().split(\" \");\\n\t\t\tint[] sides = new int[str.length];\\n\t\t\tfor (int j = 0; j < str.length; j++) {\\n\t\t\t\tsides[j] = Integer.parseInt(str[j]);\\n\t\t\t}\\n\t\t\tArrays.sort(sides);\\n\t\t\tif (Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2)) {\\n\t\t\t\tSystem.out.println(\"YES\");\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(\"NO\");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "65", "substitutes": {"br": ["bl", "div", "ber", "buffer", "wr", "hr", "rb", "browser", "tr", "arr", "jar", "lr", "cb", "fr", "bf", "r", "yr", "io", "iter", "bridge", "ler", "dr", "er", "orb", "mr", "handle", "BR", "her", "bro", "HR", "img", "per", "Br", "result", "b", "err", "ner", "reader", "obj", "buf", "ocr", "bb", "box", "cr", "bar", "ref", "array"], "N": ["S", "Num", "SN", "NL", "C", "J", "M", " n", "Y", "F", "Number", "Q", "P", "T", "I", "Ni", "L", "R", "n", "B", "NR", "network", "V", "K", "D", "NT", "H", "Z", "Ns", "O", "G", "X"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "l", "io", "z", "h", "f", "ci", "ini", "key", "index", "m", "x", "e", "I", "ai", "o", "gi", "d", "n", "ii", "b", "li", "oi", "in"], "str": ["div", "enc", "p", "wr", "hr", "sec", "tr", "split", "pr", "arr", "cur", "line", "STR", "data", "name", "fr", "part", "r", "iter", "input", "char", "f", "dr", "sl", "s", "strike", "list", "sp", "st", "text", "string", "kr", "stri", "code", "Str", "inner", "n", "sr", "b", "err", "pass", "ner", "obj", "pos", "sta", "txt", "cr", "dec", "sc", "strip", "sync"], "sides": ["pides", "asiding", "diders", "slips", " siding", "giders", "gided", "sizes", "sliders", "niders", "niding", "siding", "piders", "sided", "diding", "statIDES", " sIDES", "slided", "piding", "Siding", "statide", "pips", "servIDES", "sIDE", "asides", "dpects", "slides", "siders", "nide", "nided", "gide", "asIDE", "servides", "pIDE", "slide", "statizes", "statides", "npects", "side", "servide", " spects", "nips", "nides", "servizes", "sIDES", " sizes", "spects", "pide", "pided", "SIDE", "sips", "pizes", "dides", "aside", " side", "Sides", "pIDES", " siders", "Side", "gides"], "j": ["dj", "jj", "p", "it", "u", "J", "next", "ch", "ji", "v", "jp", "pr", "ix", "l", "el", "ij", "fr", "z", "h", "aj", "f", "key", "m", "x", "e", "jet", "ja", "uj", "ie", "q", "o", "jit", "d", "n", "g", "ii", "b", "li", "js", "k", "obj", "rel", "y", "off", "jl", "ind", "jo"]}}
{"code": "\\nimport java.util.Scanner;\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = Integer.parseInt(sc.next());\\n\t\tint D = Integer.parseInt(sc.next());\\n\\n\t\tint a = N / (2*D + 1);\\n\t\tint b = N % (2*D + 1);\\n\t\tif(b == 0) {\\n\t\t\tSystem.out.println(a);\\n\t\t} else {\\n\t\t\tSystem.out.println(a+1);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "238", "substitutes": {"sc": ["cl", "sche", "nc", "sci", "scope", "__", "pc", "class", "com", "ch", "tc", "ss", "sec", " SC", "cur", "sh", "l", "fc", "Sc", "SC", "bc", "cs", "sw", "src", "f", "lc", "c", "sp", "str", "acc", "ec", "uc", "soc", "g", "se", "ner", " Sc", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "out", "esc", "sync"], "N": ["IO", "S", "Num", "No", "NA", "C", "M", " n", "U", "Y", "Node", "F", "NN", "A", "P", "NO", "T", "I", "Ni", "NC", "L", "d", "R", "n", "B", "Ne", "V", "K", "ND", "NT", "H", "O", "Z", "Ns", "NS", "G", "NV", "NG", "E", "X"], "D": ["DH", "S", "DM", "Da", "C", "Dur", "Part", "M", "Di", "Def", "U", "Y", "Day", "F", "PD", "Q", "P", "A", "Dist", "T", "DF", " d", "Dom", "JD", "L", "d", "R", "Max", "Diff", "Ds", "B", "DB", "DD", "V", "K", "ND", "H", "Z", "DS", "O", "LD", "G", "FD", "DA", "E", "Do", "X"], "a": ["offset", "p", "na", "next", "ad", "auto", "ba", "i", "aa", "A", "oa", "au", "c", "ga", "an", "sa", "ae", "ea", "ai", "alpha", "d", "af", "n", "ca", "abc", "ac", "aaa", "sta", "as", "y", "asa", "area", "ab", "da", "la", "am", "va", "aj"], "b": ["p", "u", "rb", "ad", "v", "i", "ba", "l", "db", "bis", "aa", "h", "z", "A", "bs", "f", "eb", "s", "c", "base", "e", "o", "d", "n", "g", "B", "nb", "j", "k", "sb", "y", "number", "ab"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.*;\\nimport java.lang.Math;\\nimport java.math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        FS reader = new FS();\\n        // write reader\\n        int A = reader.nextInt();\\n        int B = reader.nextInt();\\n        if (A*B==2) System.out.println(3);\\n        else if (A*B==3) System.out.println(2);\\n        else System.out.println(1);\\n    }\\n\\n    // Read Class\\n    static class FS {\\n        private final InputStream in = System.in;\\n        private final byte[] buffer = new byte[1024];\\n        private int ptr = 0;\\n        private int buflen = 0;\\n        private boolean hasNextByte() {\\n            if (ptr < buflen) {\\n                return true;\\n            } else {\\n                ptr = 0;\\n                try {\\n                    buflen = in.read(buffer);\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n                if (buflen <= 0) {\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n    \\n        private int readByte() { return hasNextByte() ? buffer[ptr++] : -1;}\\n        private boolean isPrintableChar(int c) {return 33 <= c && c <= 126;}\\n        private void skipUnprintable() {while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}\\n    \\n        public boolean hasNext() { skipUnprintable(); return hasNextByte();}\\n        public String next() {\\n            if (!hasNext()) throw new NoSuchElementException();\\n            StringBuilder sb = new StringBuilder();\\n            int b = readByte();\\n            while(isPrintableChar(b)) {\\n                sb.appendCodePoint(b);\\n                b = readByte();\\n            }\\n            return sb.toString();\\n        }\\n        public int nextInt() {\\n            return (int)nextLong();\\n        }\\n        public long nextLong() {\\n            if (!hasNext()) throw new NoSuchElementException();\\n            long n = 0;\\n            boolean minus = false;\\n            int b = readByte();\\n            if (b == '-') {\\n                minus = true;\\n                b = readByte();\\n            }\\n            if (b < '0' || '9' < b) {\\n                throw new NumberFormatException();\\n            }\\n            while(true) {\\n                if ('0' <= b && b <= '9') {\\n                    n *= 10;\\n                    n += b - '0';\\n                } else if(b == -1 || !isPrintableChar(b)) {\\n                    return minus ? -n : n;\\n                } else {\\n                    throw new NumberFormatException();\\n                }\\n                b = readByte();\\n            }\\n        }\\n    }\\n}\\n\\n", "target": "236", "substitutes": {"reader": ["this", "ystem", " writer", "rs", "Writer", "fr", "r", "fs", "io", "df", " readers", "stream", "feed", "x", "writer", "fp", " Reader", "riter", "tx", "in", "file", " file", "Reader"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    int c = sc.nextInt();\\n    int k = sc.nextInt();\\n    int answer=0;\\n    int max=a;\\n    int other1=b;\\n    int other2=c;\\n    if(b>max){\\n      max=b;\\n      other1=a;\\n      other2=c;\\n    }\\n    if(c>max){\\n      max=c;\\n      other1=a;\\n      other2=b;\\n    }\\n    for(int i=0;i<k;i++){\\n      max *= 2;\\n    }\\n    System.out.print(max+other1+other2);\\n  }\\n}\\n", "target": "201", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "ser", "ch", "tc", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "exp", "bc", "cs", "sw", "cv", "cor", "lc", "ci", "dc", "cer", "sp", "sq", "uc", "soc", "sr", "ca", "cli", "se", "ner", " Sc", "ocr", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "cam", "esc", "ctx", "cus", "sync"], "a": ["api", "p", "na", "u", "ad", "ba", "r", "aa", "z", "A", "f", "s", "ak", "m", "an", "x", "base", "w", "sa", "e", "ae", "at", "ai", "alpha", "o", "d", "n", "ca", "ac", "aaa", "as", "y", "area", "ab"], "b": ["fb", "api", "p", "mb", "bug", "u", "rb", "ad", "v", "ba", "l", "ib", "cb", "db", "r", "bf", "aa", "h", "bc", "gb", "bs", "f", "eb", "w", "x", "base", "e", "o", "d", "n", "g", "B", "ca", "ac", "nb", "abc", "j", "sb", "bb", "bd", "y", "wb", "ab", "bar", "t"], "c": ["cat", "nc", "mc", "p", "C", "u", "ch", "v", "l", "cu", "cb", "r", "z", "h", "cs", "bc", "cp", "f", "lc", "ci", "cm", "m", "w", "x", "cy", "e", "uc", "cf", "q", "o", "ce", "d", "n", "g", "ca", "ac", "j", "cc", "y", "t"], "k": ["sk", "p", "u", "ks", "v", "keep", "l", "kk", "ik", "r", "z", "h", "dk", "ok", "f", "s", "ak", "m", "w", "x", "e", "q", "o", "d", "n", "g", "ac", "j", "K", "y"], "answer": ["all", "total", " total", "age", "now", "id", "v", " count", " n", "ix", " average", "is", " j", "init", " result", " index", "sum", "m", "est", "active", "q", "alpha", " current", "Max", "g", " sum", "current", "j", "med", "aj"], "max": ["head", "this", "total", "size", "show", "res", "init", "co", "best", "ax", "key", "w", "any", "ca", "mod", "all", "id", "next", "ad", "mac", "power", "block", "temp", "end", "first", "order", "sum", "base", "active", "code", "big", "Max", "no", "parse", "scale", "default", "self", "count", "part", "right", "huge", "orig", "x", "min", "q", "rest", "rank", "only", "cycle", "top", "work", "step", "MAX", "cache", "random", "always", "out", "can", "maximum", "conf", "parent", "cat", "chain", "now", "cost", "move", "auto", "start", "last", "m", "current"], "other1": ["otherOne", "otherA", "Other01", "OtherOne", "anotherA", " otherOne", "iron41", "iron1", "another2", "otherone", "wave1", " other41", "ironone", "iron2", "cross2", "another41", "ironA", " otherA", "waveOne", "item1", "itemone", "other101", " other01", "another1", "wave01", "iron101", "cross41", "item101", " otherone", "other41", "item2", "Other1", "cross1", "crossone", "other01", " other101"], "other2": ["otherb", "original2", "another52", "part2", " other62", "otherball", "part1", "original1", "different02", "another2", " other52", "unionTwo", " otherTwo", "original62", "different2", "other82", "other62", "different62", "anotherball", "anotherb", "union1", "another1", "union82", "another62", " otherb", "union2", "otherTwo", "partb", "original02", "different52", "partball", " otherball", "Other1", "OtherTwo", "Other82", " other82", "other02", " other02", "other52", "different1", "Other2"], "i": ["bi", "hi", "ori", "pi", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "mini", "ri", "uli", "info", "abi", "f", "ci", "ui", "ini", "index", "m", "x", "e", "ip", "di", "I", "ai", "gi", "d", "mi", "n", "ii", "zi", "li", "j", "in", "chi", "y", "ti", "fi"]}}
{"code": "/*\\n    Author: @__goku__\\n    ssrivastava990@gmail.com\\n\\n                   `\\-.   `\\n                      \\ `.  `\\n                       \\  \\ |\\n              __.._    |   \\.       S O N - G O K U\\n       ..---~~     ~ . |    Y\\n         ~-.          `|    |\\n            `.               `~~--.\\n              \\                    ~.\\n               \\                     \\__. . -- -  .\\n         .-~~~~~      ,    ,            ~~~~~~---...._\\n      .-~___        ,'/  ,'/ ,'\\          __...---~~~\\n            ~-.    /._\\_( ,(/_. 7,-.    ~~---...__\\n           _...>-  P\"\"6=`_/\"6\"~   6)    ___...--~~~\\n            ~~--._ \\`--') `---'   9'  _..--~~~\\n                  ~\\ ~~/_  ~~~   /`-.--~~\\n                    `.  ---    .'   \\_\\n                      `. \" _.-'     | ~-.,-------._\\n                  ..._../~~   ./       .-'    .-~~~-.\\n            ,--~~~ ,'...\\` _./.----~~.'/    /'       `-\\n        _.-(      |\\    `/~ _____..-' /    /      _.-~~`.\\n       /   |     /. ^---~~~~       ' /    /     ,'  ~.   \\\\n      (    /    (  .           _ ' /'    /    ,/      \\   )\\n      (`. |     `\\   - - - - ~   /'      (   /         .  |\\n       \\.\\|       \\            /'        \\  |`.           /\\n       /.'\\\\      `\\         /'           ~-\\         .  /\\\\n      /,   (        `\\     /'                `.___..-      \\\\n     | |    \\         `\\_/'                  //      \\.     |\\n     | |     |                 _Seal_      /' |       |     |\\n */\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main\\n{\\n    static PrintWriter out = new PrintWriter((System.out));\\n\\n    public static void main(String args[]) throws IOException\\n    {\\n        Kioken sc = new Kioken();\\n        int d=sc.nextInt();\\n        int t=sc.nextInt();\\n        int s=sc.nextInt();\\n        double t1=(double)d/s;\\n        if(t1<=t)\\n        {\\n            out.println(\"Yes\");\\n        }\\n        else\\n        {\\n            out.println(\"No\");\\n        }\\n        out.close();\\n    }\\n\\n    public static void kamehameha()\\n    {\\n    }\\n\\n    public static int lower_bound(ArrayList<Integer> ar, int k)\\n    {\\n        int s = 0, e = ar.size();\\n        while (s != e)\\n        {\\n            int mid = s + e >> 1;\\n            if (ar.get(mid) <= k)\\n            {\\n                s = mid + 1;\\n            }\\n            else\\n            {\\n                e = mid;\\n            }\\n        }\\n        return Math.abs(s) - 1;\\n    }\\n\\n    public static int upper_bound(ArrayList<Integer> ar, int k)\\n    {\\n        int s = 0;\\n        int e = ar.size();\\n        while (s != e)\\n        {\\n            int mid = s + e >> 1;\\n            if (ar.get(mid) < k)\\n            {\\n                s = mid + 1;\\n            }\\n            else\\n            {\\n                e = mid;\\n            }\\n        }\\n        if (s == ar.size())\\n        {\\n            return -1;\\n        }\\n        return s;\\n    }\\n\\n    static class Kioken\\n    {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st = new StringTokenizer(\"\");\\n\\n        public String next()\\n        {\\n            while (!st.hasMoreTokens())\\n            {\\n                try\\n                {\\n                    st = new StringTokenizer(br.readLine());\\n                }\\n                catch (Exception e)\\n                {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        public int nextInt()\\n        {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public long nextLong()\\n        {\\n            return Long.parseLong(next());\\n        }\\n\\n        public double nextDouble()\\n        {\\n            return Double.parseDouble(next());\\n        }\\n\\n        public String nextLine()\\n        {\\n            try\\n            {\\n                return br.readLine();\\n            }\\n            catch (Exception e)\\n            {\\n                e.printStackTrace();\\n            }\\n            return null;\\n        }\\n\\n        public boolean hasNext()\\n        {\\n            String next = null;\\n            try\\n            {\\n                next = br.readLine();\\n            }\\n            catch (Exception e)\\n            {\\n            }\\n            if (next == null || next.length() == 0)\\n            {\\n                return false;\\n            }\\n            st = new StringTokenizer(next);\\n            return true;\\n        }\\n    }\\n}", "target": "246", "substitutes": {"out": ["this", "buffer", "ins", "ext", "a", "screen", "r", "exp", "info", "co", "check", "w", "output", "Out", "o", "cli", "exec", "bin", "inc", "error", "post", "console", "window", "query", "call", "client", "server", "line", "name", "io", "input", "temp", "f", "conn", "user", "sum", "str", "again", "write", "up", "file", "IN", "self", "cl", "prefix", "serv", "view", "pool", "png", "println", "wx", "process", "writer", "comment", "err", "pass", "in", "log", "word", "sync", "conf", "parent", "ch", "ex", "path", "home", "c", "arg", "m", "OUT", "string", "outs", "lock"], "sc": ["this", "cl", "sche", "mc", "sci", "nc", "scope", "pc", "class", "ka", "ch", "ss", " SC", "si", "asc", "sh", "Sc", "SC", "scl", "cs", "bc", "cv", "sw", "src", "lc", "ci", "dc", "c", "cer", "contract", "sp", "system", "sq", "uc", "soc", "sr", "ca", "se", " Sc", "sb", "osc", "rc", "cc", "cr", "sch", "cam", "ec", "esc", "ctx", "cus", "sync"], "d": ["xd", "sd", "ded", "dx", "p", "id", "i", "l", "dh", "pd", "dat", "z", "f", "fd", "dc", "c", "ds", "m", "x", "di", "dad", "md", "dd", "n", "ld", "b", "dim", "dy", "dl", "dt", "in", "D", "cd", "da"], "t": ["ot", "total", "ts", "p", "u", "tu", "v", "tz", "i", "l", "a", "z", "h", "f", "c", "m", "at", "x", "w", "T", "ta", "o", "n", "g", "b", "dt", "j", "tp", "type", "y", "tt"], "s": ["les", "size", "slice", "ins", "ets", "ks", "rs", "ments", "l", "a", "ies", "r", "eps", "ys", "sites", "cs", "results", "lines", "south", "os", "sl", "states", "ds", "ms", "ches", "w", "ie", "o", "g", "site", "as", "sd", "p", "id", "si", "i", "ances", "es", "z", "h", "ps", "f", "n", "sets", "j", "js", "ids", "ed", "S", "sy", "v", "sh", "qs", "ws", "sin", "rows", "ings", "side", "settings", "ses", "gs", "ents", "b", "err", "ends", "se", "sym", "sb", "xs", "y", "ts", "u", "ss", "is", "ions", "seconds", "ls", "ens", "ims", "ides", "c", "us", "m", "or", "parts", "sq", "abs", "ns", "services", "su", "ans", "sg", "spec"], "t1": ["p1", "intOne", "T1", "int81", "t81", " t81", "p2", "t2", " tOne", "t11", "int1", "T11", " t2", "p81", "wt11", "wt1", "int2", "p11", "pOne", "tOne"], "ar": ["rar", "ir", "arc", "ars", "AR", "aru", "arin", "arr", "el", "ur", "r", "al", "yr", "car", "dar", "are", "ear", "mar", "ler", "er", "air", "gar", "star", "var", "list", "ara", "ra", "per", "lar", "arp", "ray", "Ar", "ras", "har", "ner", "rr", "iar", "aro", "att", "art", "far", "bar", "war", "scar", "tar", "aer", "array"], "k": ["self", "ky", "sk", "mk", "p", "u", "ko", "ck", "ch", "ke", "ks", "v", "i", "kick", "ik", "r", "h", "z", "co", "ok", "f", "er", "c", "key", "ak", "m", "w", "x", "ku", "kw", "q", "o", "n", "g", "kin", "ner", "j", "K", "work", "kind", "y", "spec"], "e": ["ace", "eng", "see", "live", "size", "equal", "l", "eps", "eu", "pe", "ie", "ce", "o", "g", "je", "me", "ee", "type", "exc", "error", "E", "ec", "p", "ise", "ke", "enter", "i", "line", "es", "ep", "ice", "z", "end", "f", "ne", "ev", "ea", "esi", "n", "element", "edge", "j", "ey", "ed", "ei", "le", "ele", "be", "fe", "de", "er", "ve", "x", "ide", "east", "oe", "ent", "b", "err", "se", "ze", "ception", "ge", "y", "en", "ue", "eye", "core", "u", "one", "ss", "el", "c", "m", "or", "est", "ae", "eve", "eff"], "mid": ["nd", "multi", "diff", "r", "ms", "uid", "key", "rand", "max", "mit", "grid", "mod", "doc", "rid", "med", "hei", "id", "mode", "Mid", "i", "line", "data", "es", "good", "middle", "end", "lim", "mr", "mad", "large", "mor", "aid", "n", "nice", "dim", "field", "pos", "scale", "la", "seq", "le", "mer", "part", "medium", "pid", "broad", "min", "md", "err", "in", "shape", "dev", "ind", "hi", "low", "meta", "sid", "sub", "mm", "ng", "start", "entry", "lc", "loc", "dc", "m", "ra", "vid", "mi", "small", "master", "kind", "ref", "spec"], "br": ["bl", " fr", "ber", "p", "wr", "hr", "rb", "ch", "tr", "pr", "arr", "res", "fr", "r", "yr", "bh", "be", "io", " dr", "stream", "bc", "bridge", "sw", "src", "ler", "er", "dr", "mr", "sl", "BR", "sp", "bro", "str", "img", "per", "pl", "kr", "ibr", "Br", "sr", "b", "err", "gr", "ner", " bra", "bt", "cr", "bar", " arr", "fore"], "st": ["bl", "cl", "ut", "inst", "ste", "ust", "nt", "sth", "ST", "nd", "ss", "sh", "const", "ct", "sn", "std", "fr", "r", "start", "be", "ft", "sl", "est", "sp", "sa", "str", "ist", "string", "pt", "rest", " est", "ld", "sr", "St", "se", "sb", "lt", "sta", "ast", "sts", "rd", "struct", "cr", "stop", "ost", "bt", "tt", "rt"], "next": ["this", "function", "second", "empty", "now", "future", "one", "sec", "apply", " Next", "Next", "line", "page", "data", "name", "continue", "entry", "start", "info", "middle", "first", "resource", "lines", "last", "gen", "image", "reply", "handle", "match", "output", "config", "true", "text", "frame", "code", "primary", "content", "quote", "same", "result", "object", "open", "write", "current", "parse", "sequence", "iterator", "readable", "number", "front", "close", "error", "read"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint count = Integer.parseInt(sc.nextLine());\\n\t\tint[] nums = new int[count];\\n\t\tString[] lines = sc.nextLine().split(\" \");\\n\\n\t\tfor(int i = 0;i < count;i++) {\\n\t\t\tnums[i] = Integer.parseInt(lines[i]);\\n\t\t}\\n\t\tint min = nums[0];\\n\t\tint max = nums[0];\\n\t\tlong sum = 0;\\n\t\tfor(int i = 1;i < count ;i++) {\\n\t\t\tif(nums[i] < min ) {\\n\t\t\t\tmin = nums[i];\\n\t\t\t} else if(nums[i] > max) {\\n\t\t\t\tmax = nums[i];\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i = 0; i < count ; i++) {\\n\t\t\tsum += nums[i];\\n\t\t}\\n\t\tSystem.out.println(min + \" \" + max + \" \" + sum);\\n\t}\\n}", "target": "21", "substitutes": {"sc": ["cl", "sci", "nc", "sf", "scope", "pc", "class", "ch", "server", "ss", " SC", "cur", "asc", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "src", "f", "sl", "c", " scr", "sp", "st", "system", "sq", "uc", "soc", "sr", "se", "ner", " Sc", "anc", "scan", "parse", "osc", "rc", "cc", "cr", "sch", "parser", "ec", "esc", "cus", "sync"], "count": ["all", "total", "conf", "call", "age", "Count", "size", "p", "now", "id", "patch", "num", "ch", "keep", "line", "l", "name", "part", "start", "len", "length", "f", "s", "c", "key", "order", "weight", "index", "depth", "list", "base", "config", "process", "col", "code", "n", "limit", "current", "work", "found", "in", "group", "number", "cache", "coll"], "nums": ["numes", "nonoms", "num", " numps", "cages", "cums", "cnums", "uummies", "cum", "mums", "unumps", " nules", " nages", "unum", "comes", " numes", "uults", "cus", "nanages", "mnumbers", " nubs", " nummies", "mnums", "cummies", "numbers", "numps", " nunks", "cubs", "nus", "uum", "nunks", "cnumbers", "nonumbers", "mnamps", "mnunks", "mum", "cumbers", "nanumps", "camps", " namps", "nanumbers", " noms", "uums", "nummies", "cults", "cules", "nonums", "noms", " num", " nomes", "unamps", "nanums", "nults", " nults", " nus", "Num", "cunks", "unums", " numbers", "nubs", "nonummies", "Nums", "Numes", "mules", "cumps", "Numbers", "coms", "cumes", "nages", "cnules", "nules", "cnubs", "mus", "nomes", "momes", "namps"], "lines": ["points", "breaks", "groups", "works", "blocks", "ines", "sections", "plugins", "lins", "ins", "ln", "split", "cells", "elines", "strings", "line", "l", "qs", "lin", "ls", "rules", "pages", "los", "nl", " Lines", "rows", "params", "words", "limits", "pins", "files", "names", "objects", "inline", "values", "items", "runs", "balls", "posts"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "one", "multi", "qi", "ei", "xi", "slice", "v", "si", "ix", "l", "a", "data", "is", "ri", "start", "io", "init", "z", "h", "info", "abi", "source", "f", "ci", "ui", "ini", "key", "index", "m", "eni", "x", "mu", "uri", "phi", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "inner", "cli", "ii", "b", "zi", "li", "iv", "field", "j", "oi", "in", "y", "ti"], "min": ["unit", "low", "p", "just", "size", "patch", "id", "one", "next", "po", "mins", "date", "average", "version", "a", "mini", "pre", "name", "sign", "part", "partial", "diff", "start", "init", "sin", "lower", "len", "first", "key", "index", "m", "base", "MIN", "miss", "n", "b", "small", "limit", "dim", "pos", "step", "in", "scale", "Mini", "from", "mean", "mid", "area", "lock", "pri", "range", "Min", "act", "default"], "max": ["head", "press", "total", "conf", "cat", "p", "size", "patch", "id", "nd", "ad", "view", "v", "auto", "vol", "part", "diff", "right", "start", "end", "huge", "last", "c", "ax", "az", "cent", "height", "or", "x", "mad", "base", "est", "q", "rest", "act", "Max", "plus", "ver", "ca", "only", "with", "k", "work", "sup", "no", "step", "mod", "from", "wrap", "MAX", "range", "cache", "dev", "always", "default", "can"], "sum": ["um", "total", "conf", "cat", "unit", " total", "size", "cost", "gram", "num", "summary", "average", "vol", "si", "ass", "sh", " average", "sort", "fill", "diff", "use", "mask", "start", "sim", "len", "cal", "style", "weight", "us", "pack", "cum", "alpha", "miss", "comment", "Sum", " mom", " summ", "se", " num", "fat", "net", "su", "up", "parse", "am", " mean", "scale", "mess", "mean", "shape", "always", " summer"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author anand.oza\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BCanYouSolveThis solver = new BCanYouSolveThis();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BCanYouSolveThis {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int n = in.nextInt(), m = in.nextInt(), c = in.nextInt();\\n\\n            int[] b = new int[m];\\n            for (int i = 0; i < m; i++) {\\n                b[i] = in.nextInt();\\n            }\\n\\n            int answer = 0;\\n            for (int test = 0; test < n; test++) {\\n                int sum = c;\\n                for (int i = 0; i < m; i++) {\\n                    int a = in.nextInt();\\n                    sum += a * b[i];\\n                }\\n                if (sum > 0) {\\n                    answer++;\\n                }\\n            }\\n\\n            out.println(answer);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "68", "substitutes": {"inputStream": ["outputWriter", "inputSteam", "outputSteam", " inputstream", " inputSteam", "InputSteam", "inputStreamer", "configstream", "configSteam", "Inputstream", "inputWriter", "outputStreamer", " inputWriter", "InputStreamer", "InputWriter", "InputStream", "outputstream", "configStream", "inputstream", "configStreamer"], "outputStream": ["inputSteam", "outputSteam", "inputForm", "outputForm", "controlForm", "Outputstream", "controlStream", "inputStreamer", "OutputStream", "controlStreamer", " outputSteam", " outputView", "outputView", "outputStreamer", "OutputView", "controlSteam", "inputView", "OutputSteam", "outputstream", " outputStreamer", " outputForm", " outputstream", "inputstream"], "in": ["this", "ic", "isin", "on", "IN", "id", "login", "ins", "din", "inside", "version", "path", "line", "l", "data", "is", "request", "con", "lin", "r", "io", "source", "init", "info", "input", "win", "sin", "get", "resource", "In", "gen", "f", "user", "s", "inn", "ini", "arg", "conn", "image", "w", "or", "nin", "config", "x", "iter", "by", "socket", "between", "min", "gin", "inf", "inner", "d", "rin", "err", "kin", "again", "pin", "up", "connection", "log", "bin", "vin", "file", "inc", "read", "thin", "re"], "out": ["this", "buffer", "ext", "r", "exp", "init", "s", "output", "w", "Out", "o", "inner", "exec", "bin", "group", "inc", "copy", "error", "window", "call", "target", "client", "print", "server", "line", "data", "io", "timeout", "input", "temp", "conn", "user", "report", "list", "socket", "again", "write", "up", "file", "off", "later", "scope", "to", "v", "pool", "gen", "outside", "x", "process", "writer", "comment", "err", "obj", "net", "log", "word", "cache", "sync", "parent", "table", "ex", "page", "session", "outer", "writing", "OUT", "problem", "job", "outs", "exit", "engine"], "solver": [" solution", "insolution", "ssolves", "saver", "ssolve", "insolved", "Solver", "ssolver", "insolver", "ssolution", "solve", "solution", "solves", "Solution", " solves", " saver", " solved", "Solve", "solved", "Solves", " solve", "insaver"], "testNumber": ["TestCounter", "TestNumber", "caseCounter", "testnumber", "TestNum", " testnumber", "casenumber", "Testnumber", "caseNumber", " testCounter", "caseNum", " testNum", "testNum", "testCounter"], "n": ["nn", "nc", "nt", "count", "p", "u", "C", "N", "v", "cn", "l", "sn", "z", "f", "cm", "s", "an", "x", "e", "o", "d", "ns", "nb", "j", "k", "mn", "number", "y", "en", "t"], "m": ["dm", "mc", "p", "rm", "u", "om", "M", "v", "l", "mm", "r", "nm", "z", "h", "machine", "f", "cm", "ms", "w", "tm", "x", "mu", "e", "md", "o", "d", "mi", "g", "dim", "j", "k", "hm", "sm", "mn", "y", "t"], "c": ["nc", "count", "p", "size", "C", "u", "v", "cn", "l", "con", "r", "z", "cs", "h", "cp", "f", "cm", "lc", "dc", "ci", "s", "w", "x", "e", "max", "d", "g", "k", "cd", "y"], "b": ["bm", "p", "mb", "u", "pb", "abb", "rb", "binary", "v", "ba", "l", "db", "bis", "ib", "r", "bf", "be", "reb", "lb", "h", "bs", "f", "br", "orb", "s", "w", "x", "base", "e", "o", "d", "g", "B", "body", "nb", "k", "sb", "bb", "bin", "number", "y", "ab", "ob", "array"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "l", "ik", "io", "init", "z", "f", "ci", "vi", "ui", "ini", "index", "phi", "x", "eni", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "li", "j", "y", "my"], "answer": ["ace", "um", "score", "offset", "amount", "age", "now", "size", "next", "answered", "average", "search", "question", "duration", "sort", "use", "ask", "entry", "value", "audio", "z", "Answer", " answers", "image", "reply", "account", "output", "say", "grade", "zero", "result", "accept", "current", "cover", "su", "term", "update", "response", "ee", "correct", "number", "word", "address", "area", "vote", "cache", "fix", "error", "array", "query"], "test": ["Test", "count", "p", "val", "size", "id", "num", "server", "v", "use", "r", "start", "valid", "stage", "temp", "testing", " trial", "tests", "key", "check", "index", "or", "est", "x", "config", "pack", "acc", "T", "ester", "max", "train", "code", "min", "ver", "err", "j", "tx", "time", "seed", "example", "scale", "type", "trial", "match", "sc", "t"], "sum": ["um", "total", "offset", "unit", "amount", "space", "count", "p", "size", "u", "sha", "num", "summary", "si", "average", "ass", "balance", "sh", "sub", "sort", "sign", "cash", "fill", "mask", "aa", "use", "spread", "f", "index", "account", "sav", "sa", "acc", "say", "alpha", "miss", "comment", "Sum", "result", "gam", "ac", "cover", "scale", "mean", "area", "cache", "am", "fee"], "a": ["div", "p", "ia", "na", "u", "auto", "ba", "data", "part", "aa", "z", "A", "ha", "f", "au", "s", "ga", "ata", "an", "sa", "ea", "ae", "e", "ai", "alpha", "ca", "ac", "ama", "y", "la", "area", "ab", "da", "ma", "am", "va", "aj"], "reader": ["client", "buffer", "it", "slice", "table", "ro", "server", "data", "r", "re", "entry", "io", "iter", "row", "input", "source", "h", "ler", "er", "report", "feed", "or", "e", "per", "writer", "socket", "read", "ry", "inner", "body", "rr", "handler", "parse", "connection", "file", "lock", "parser", "reading", "driver", "loader", "Reader"], "tokenizer": [" tokenizers", "okeniter", " tokenize", "Tokenization", "Tokenize", "Tokeniter", "Tokener", "Tokenizers", "tokenize", "serializers", "okener", "okenizer", "tokenler", " tokenization", " tokeniser", " tokeniter", "okenize", " tokenler", "Tokenized", "tokenizable", "Tokenler", "tokenization", "serialler", "okenized", "okenler", "tokenized", "tokeniter", "tokeniser", "tokener", " tokenizable", "okenization", " tokener", "tokenizers", "okenizable", "Tokeniser", " tokenized", "serializer", "okenizers", "okeniser", "serialize", "Tokenizer", "Tokenizable"], "stream": ["client", "trans", "buffer", "slice", "http", "server", "view", "path", "pool", "data", "request", "valid", "source", "row", "input", "channel", "resource", "holder", "feed", "socket", "string", "writer", "per", "raw", "Stream", "read", "context", "ream", "object", "body", "handler", "open", "form", "connection", "response", "serial", "file", "port", "lock", "driver", "loader"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\ttry (Scanner scn = new Scanner(System.in)) {\\n\t\t\tint N = scn.nextInt();\\n\t\t\tint K = scn.nextInt();\\n\\n\t\t\tint[] A = new int[N];\\n\t\t\tint[][] ak = new int[K][N+1];\\n\\n\t\t\tfor(int i = 0; i < K; i++) {\\n\t\t\t\tak[i][0] = scn.nextInt();\\n\t\t\t\tfor(int j = 1; j <= ak[i][0]; j++) {\\n\t\t\t\t\tak[i][j] = scn.nextInt();\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tfor(int i = 0; i < K; i++) {\\n\t\t\t\tfor(int j = 1; j <= ak[i][0]; j++) {\\n\t\t\t\t\tA[ak[i][j]-1] = 1;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\\n\t\t\tint cnt = 0;\\n\t\t\tfor(int i = 0; i < N; i++) {\\n\t\t\t\tif(A[i] == 0) cnt++;\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(cnt);\\n\t\t}\\n\t}\\n}", "target": "81", "substitutes": {"N": ["Len", "S", "Num", "No", "C", "Part", "J", "M", " n", "Size", "Nat", "Y", "Node", "F", "NN", "P", "Key", "T", "I", "Ni", "NC", "L", "R", "n", "B", "NR", "Ne", "V", "NB", "k", "D", "NT", "Z", "NS", "O", "Ns", "H", "NI", "E", "X"], "K": ["KK", "S", "Ku", "C", "IK", "J", "Ak", "M", "Power", "Size", "U", "Y", "NK", "KB", "F", "Q", "P", "KC", "Key", "Sk", "I", "Kent", "PK", "L", "n", "B", "Ne", "V", "k", "KR", "D", "H", "Z", "O", "KN", "KI", "G", "KE", "KS", "SK", "W", "E", "Ke", "X"], "A": ["S", "AS", "AR", "AM", "NA", "C", "Ak", "An", "AA", "M", "LA", "a", "As", "U", "Array", "Az", "AP", "P", "Am", "API", "I", "AK", "App", "At", "alpha", "L", "Alpha", "B", "Ar", "V", "AC", "D", "H", "CA", "G", "The", "Adam", "array", "X"], "ak": ["aw", "eng", "oc", "p", "Ak", "ad", "AA", "ark", "ke", "mac", "keep", "ape", "ar", "sh", "a", "ap", "Array", "ask", "block", "Q", "batch", "P", "app", "input", "ok", "ah", "ek", "c", "order", "ax", "key", "w", "an", "config", "pack", "ack", "I", "AK", "ijk", "aka", "ai", "q", "n", "b", "ac", "ake", "iv", "make", "pak", "AC", "k", "work", "anc", "asha", "art", "shape", "am", "array"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "hei", "iu", "ami", "it", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "l", "a", "mini", "ik", "ri", "start", "idi", "io", "init", "z", "info", "f", "lc", "ci", "ui", "ini", "c", "eni", "phi", "x", "mu", "uri", "ip", "di", "e", "I", "ie", "ai", "gi", "d", "mi", "n", "ii", "zi", "cli", "iv", "li", "isi", "oi", "k", "yi", "qa", "chi", "y", "ki", "ti", "fi"], "j": ["bi", "dj", "jj", "jc", "ni", "p", "iu", "oj", "adj", "it", "u", "J", "qi", "bj", "ji", "ch", "pr", "jp", "v", "ix", "l", "a", "ij", "fr", "ik", "io", "z", "aj", "f", "br", "c", "ax", "key", "x", "jet", "ja", "ijk", "uj", "ie", "o", "d", "n", "g", "ii", "b", "li", "je", "js", "k", "obj", "job", "y", "jl", "ind", "jo"], "cnt": ["Cpt", "ccount", "cNT", "lcNT", " crupt", "Crupt", "lcnt", "count", "lccount", "Count", "ncNT", "lcnn", "ncrupt", " count", " cnn", "CNT", " cNT", " cpt", "crupt", "Cnn", "acount", "cnn", "account", "ncpt", "ncnt", " ccount", "acnt", "cpt", "acNT", "Ccount", "Cnt"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint appart[][][] = new int[4][3][10];\\n\t\t\\n\t\tfor(int i = 0; i < 4; i++)\\n\t\t\tfor(int j = 0; j < 3; j++)\\n\t\t\t\tfor(int k = 0; k < 10; k++)\\n\t\t\t\t\tappart[i][j][k] = 0;\\n\t\t\\n\t\tint n = sc.nextInt();\\n\t\t\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tint b = sc.nextInt();\\n\t\t\tint f = sc.nextInt();\\n\t\t\tint r = sc.nextInt();\\n\t\t\tint v = sc.nextInt();\\n\t\t\t\\n\t\t\tappart[b-1][f-1][r-1] += v;\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0; i < 4; i++){\\n\t\t\tfor(int j = 0; j < 3; j++){\\n\t\t\t\tfor(int k = 0; k < 10; k++){\\n\t\t\t\t\tSystem.out.print(\" \" + appart[i][j][k]);\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(\"\");\\n\t\t\t}\\n\t\t\tif(i < 3)\\n\t\t\t\tSystem.out.println(\"####################\");\\n\t\t}\\n\t}\\n}", "target": "211", "substitutes": {"sc": ["cl", "sche", "sci", "scope", "pc", "na", "com", "ch", "tc", "ss", " SC", "cur", "asc", "Sc", "SC", "screen", "bc", "src", "cor", "lc", "loc", "dc", "c", " scr", "sp", "system", "sq", "uc", "soc", "sync", "cli", "sys", "se", "ner", " Sc", "sem", "anc", "sb", "exec", "scan", "parse", "Scan", "osc", "rc", "cc", "cr", "cms", "cont", "sch", "parser", "cam", "out", "esc", "ctx", "cus", "coll"], "appart": ["compart", "ippart", "Apparted", "Apppart", "ipparted", "apard", " apparts", " appard", "appART", "packart", "apparts", "apart", "instarts", "AppART", " apparted", "ipparts", "ippar", "packarts", "instart", " appert", "comparted", "aparts", "appar", "apppart", " apppart", "instert", "instarted", " appART", "Appard", "packART", "Appar", "compert", "appard", "appert", "apparted", "comparts", "Apparts", "packar", "Appart", " appar"], "i": ["bi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "si", "ix", "l", "a", "mini", "is", "ri", "ik", "io", "init", "z", "info", "ci", "vi", "ui", "c", "ini", "index", "phi", "x", "uri", "ip", "di", "e", "I", "ie", "ai", "gi", "mi", "ii", "li", "oi", "yi", "in", "chi", "y", "my", "fi"], "j": ["dj", "jj", "jc", "p", "oj", "it", "u", "J", "qi", "ch", "ji", "json", "bj", "jp", "pr", "vol", "l", "el", "ij", "fr", "ik", "z", "aj", "br", "c", "key", "w", "x", "e", "jet", "ja", "uj", "ie", "q", "o", "d", "g", "ii", "li", "js", "je", "kj", "obj", "in", "job", "y", "jl", "jo"], "k": ["ky", "kt", "sk", "mk", "p", "kg", "it", "u", "id", "ko", "ck", "ch", "ke", "ks", "ark", "kh", "kick", "l", "kk", "ik", "ph", "z", "h", "dk", "ok", "ek", "c", "key", "ak", "w", "x", "ku", "e", "kw", "kr", "q", "o", "unk", "kn", "d", "g", "kid", "K", "uk", "kat", "y", "ki", "th"], "n": ["nn", "nc", "nt", "ni", "p", "u", "num", "N", "l", "a", "sn", "z", "h", "s", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "g", "nb", "net", "y", "en", "t"], "b": ["fb", "p", "u", "ba", "l", "a", "db", "bh", "h", "z", "lb", "s", "c", "m", "w", "x", "e", "o", "d", "g", "B", "body", "nb", "bb", "y", "ab", "ob"], "f": ["fl", "p", "u", "id", "l", "a", "fr", "ef", "F", "z", "h", "fe", "s", "c", "m", "w", "x", "e", "fp", "q", "o", "inf", "d", "g", "in", "y", "t"], "r": ["ir", "p", "u", "pr", "l", "fr", "ur", "z", "h", "nr", "er", "s", "c", "m", "w", "x", "e", "q", "o", "R", "d", "g", "sr", "err", "rr", "y", "rt", "t"], "v": ["p", "val", "u", "ch", "l", "a", "tv", "sv", "z", "h", "end", "vi", "s", "vs", "c", "uv", "vv", "m", "x", "w", "ve", "e", "q", "o", "lv", "d", "g", "ii", "iv", "V", "y", "t"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint x = sc.nextInt();\\n\t\tint y = sc.nextInt();\\n\\n\t\tSystem.out.println(euclideanAlgorithm(x, y));\\n\t}\\n\\n\tpublic static int euclideanAlgorithm(int x, int y) {\\n\t\tint tmp;\\n\t\twhile (true) {\\n\t\t\ttmp = x % y;\\n\t\t\tif (tmp == 0) {\\n\t\t\t\treturn y;\\n\t\t\t}\\n\t\t\tx = y;\\n\t\t\ty = tmp;\\n\t\t}\\n\t}\\n}\\n\\n", "target": "0", "substitutes": {"sc": ["cl", "sci", "nc", "sf", "scope", "pc", "class", "com", "ch", "tc", "ss", "sec", " SC", "cur", "asc", "sh", "fc", "Sc", "SC", "bc", "cs", "cv", "sw", "src", "lc", "c", "cer", " scr", "sp", "text", "sq", "uc", "ca", "sem", "se", " Sc", "ocr", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "ctx", "cus", "sync"], "x": ["ady", "dx", "p", "val", "size", "id", "u", "num", "xi", "ex", "v", "i", "ix", "l", "a", "z", "h", "win", "temp", "width", "c", "wx", "ax", "key", "index", "w", "e", "xx", "xxx", "code", "d", "n", "dy", "xt", "tx", "work", "pos", "xs", "in", "j", "xy", "rx", "px", "t", "X"], "y": ["ot", "ady", "uy", "yo", "py", "ky", "count", "gy", "p", "yd", "sy", "python", "oy", "v", "vy", "i", "ya", "Y", "yt", "ies", "my", "yr", "ys", "z", "isy", "ny", "asy", "ay", "c", "s", "index", "ym", "or", "zy", "yn", "ty", "e", "ry", "o", "iy", "d", "n", "ish", "b", "dy", "year", "yy", "j", "ye", "yer", "yi", "type", "xy", "ey", " Y", "ed", "ery", "cy", "t"], "tmp": ["fb", "offset", "py", "elt", "nt", "p", "emp", "rb", "tc", "meta", "v", "bp", "cur", "ff", "treatment", "stuff", "i", "kk", "pre", "part", "diff", "bf", "vt", "start", "zip", "temp", "cp", "f", "perm", "cmp", "sb", "c", "xxxx", "ppa", "current", "m", "img", "done", "mp", "fp", "xxx", "ptr", "code", "max", "opp", "b", "nb", "yy", "dest", "amp", "obj", "pos", "sup", "su", "beta", "angle", "type", "qq", "xy", "pp", "buf", "tt", "proc", "fake", "t", "ppo"]}}
{"code": "/* ALDS1_1_B */\\nimport java.io.*;\\n\\nclass Main\\n{\\n  public static void main(String[] args)\\n  {\\n    try{\\n      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n      String[] str = br.readLine().split(\" \");\\n      int x = Integer.parseInt(str[0]);\\n      int y = Integer.parseInt(str[1]);\\n\\n      System.out.println(GCD(x, y));\\n\\n    }catch(Exception e){\\n      System.out.println(e);\\n    }\\n  }\\n\\n  public static int GCD(int x, int y)\\n  {\\n    int gcd;\\n    if(x % y == 0){\\n      gcd = y;\\n    }else {\\n      gcd = GCD(y, (x % y));\\n    }\\n\\n    return gcd;\\n  }\\n}", "target": "0", "substitutes": {"br": ["bl", "div", "ber", "wr", "hr", "rb", "browser", "tr", "arr", "i", "ar", "fr", "r", "yr", "bh", "io", "bridge", "stream", "src", "bs", "er", "dr", "orb", "BR", "sp", "bro", "HR", "img", "string", "Br", "brush", "abs", "sr", "b", "result", "err", "gr", "ner", "reader", "buf", "bar", "out"], "str": ["div", "enc", "dict", "tr", "pr", "arr", "line", "STR", "data", "fr", "r", "iter", "input", "char", "dr", "er", "sl", "strike", "star", "list", "sp", "st", "text", "string", "stri", "oct", "Str", "usr", "sr", "err", "gr", "ner", "pass", "obj", "txt", "doc", "spec", "read", "strip"], "x": ["hi", "on", "dx", "p", "val", "sex", "id", "u", "xi", "ex", "v", "i", "ix", "l", "a", "X", "cross", "h", "z", "f", "width", "s", "c", "ax", "wx", "index", "m", "w", "cy", "e", "xxx", "code", "d", "n", "b", "dy", "tx", "k", "wa", "xs", "work", "in", "type", "xy", "fx", "rx", "px", "en", "ctx", "xx"], "y": ["ady", "yo", "py", "p", "gy", "yd", "idy", "id", "sky", "sy", "yk", "oy", "python", "ch", "v", "i", "vy", "ya", "l", "ix", "Y", "yt", "yr", "start", "z", "h", "ny", "asy", "ay", "c", "index", "ym", "m", "zy", "ty", "e", "ry", "o", "d", "n", "b", "ish", "dy", "year", "yy", "fy", "ye", "j", "yi", "yes", "type", "xy", "ey", "ery", "cy", "t", "xx"], "gcd": [" gcod", "ergCD", " gcr", "sgcr", "gcr", "igCD", "ggCD", "igcm", "sgcd", "gcod", "ergxd", " gxd", "gecm", "ggcr", "gcm", "cdc", " gCD", "sgdc", "ggxd", "ccod", "mgdc", "ergcd", "ccd", "geCD", "gecd", "ggcd", "igcd", "gdc", " gdc", "mgcod", "ergcr", "igcod", "igdc", "mgCD", "gecod", "sgcod", "ccr", "gxd", " gcm", "gCD", "mgcd"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ABC131_b solver = new ABC131_b();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ABC131_b {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int N = in.nextInt();\\n            int L = in.nextInt();\\n\\n            int small = 999;\\n            int small_noneabs = 0;\\n            int ttl = 0;\\n            for (int i = 0; i < N; i++) {\\n                if (small > Math.abs(L + i)) {\\n                    small = Math.abs(L + i);\\n                    small_noneabs = L + i;\\n                }\\n                ttl += L + i;\\n            }\\n            out.println(ttl - small_noneabs);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "91", "substitutes": {"inputStream": ["InputChannel", "inputSteam", "outputSteam", " inputstream", "outputChannel", " inputStreamer", " inputSteam", "InputSteam", "inputStreamer", "Inputstream", " inputChannel", "outputStreamer", "InputStreamer", "InputStream", "outputstream", "inputChannel", "inputstream"], "outputStream": ["outputWriter", "inputSteam", "outputSteam", "OutputStreamer", "Outputstream", "responseStream", "responseSteam", "OutputStream", "inputStreamer", "OutputString", "OutputWriter", "inputString", " outputSteam", "responseStreamer", "inputWriter", "outputStreamer", "responseWriter", " outputString", "OutputSteam", "outputstream", " outputstream", "inputstream", "outputString"], "in": ["this", "isin", "spin", "IN", "slice", "id", "login", "ins", "din", "ln", "arin", "binary", "inside", "run", "path", "l", "data", "request", "con", "lin", "r", "io", "source", "info", "sin", "input", "win", "init", "resource", "In", "gen", "conn", "image", "inn", "ini", "c", "arg", "w", "x", "nin", "config", "cin", "between", "string", "min", "gin", "inf", "inner", "rin", "n", "kin", "err", "again", "pass", "reader", "work", "pin", "connection", "log", "bin", "vin", "file", "inc", "read"], "out": ["this", "buffer", "ext", "exp", "key", "output", "w", "left", "Out", "o", "inner", "exec", "connection", "bin", "inc", "copy", "error", "window", "call", "client", "server", "version", "line", "data", "name", "io", "timeout", "temp", "In", "conn", "user", "index", "list", "socket", "n", "again", "write", "up", "file", "IN", "scope", "prefix", "serv", "v", "pool", "extra", "png", "point", "gen", "x", "writer", "b", "err", "obj", "net", "log", "bar", "cache", "sync", "parent", "ex", "page", "inas", "source", "session", "outer", "arg", "OUT", "scan", "outs"], "solver": [" solution", "solving", "setsolving", "ssolving", "ssolve", "Solver", " solving", "ssolver", "ssolution", "solve", "solution", "Solution", "setsolution", "Solving", "Solve", "setsolve", "setsolver", " solve"], "testNumber": ["TestCounter", "TestNumber", "trialNumber", "testnumber", "TestNum", " testnumber", "Testnumber", " testCounter", "trialnumber", " testNum", "trialCounter", "testNum", "testCounter", "trialNum"], "N": ["Len", "S", "NL", "C", "J", "M", " n", "Size", "Y", "F", "NN", "Q", "P", "T", "I", "Ni", "R", "n", "B", "Ne", "V", "K", "NB", "D", "NT", "H", "O", "Ns", "NS", "Z", "NE", "NI", "E", "X"], "L": ["BL", "Lu", "S", "VL", "SL", "NL", "EL", "Li", "dL", "Low", "LS", "LA", "l", "FL", "F", "LR", "LV", "CL", "RL", "LP", "T", "I", "DL", "UL", "LL", "n", "B", "LB", "V", "D", "IL", "O", "Z", "LT", "LM", "W", "E", "PL", "LI", "XL", "X"], "small": ["cl", "tiny", "second", "low", "SL", "Small", "size", " smaller", "sub", "Size", "sh", "Little", "l", "mini", " Small", "sign", " large", "lower", "huge", "significant", "loc", "south", "sl", "simple", "medium", "lo", "large", "left", "min", "big", "shift", "n", "zero", "fast", " tiny", "lit", "li", "sup", "flat", "form", "scale", "little", "limited", "la", "local", "missing", "sharp", " size", "sc", "sized", "larg"], "small_noneabs": ["small_noneats", "small_nonbs", "small_anyab", "small_naabs", "small_Noneab", "small_neats", "small_neabs", "small_naab", "small_Noneabs", "small_noncaps", "small_nonebs", "small_necaps", "small_nonats", "small_nebs", "small_anybsp", "small_noats", "small_Noneats", "small_Nonecaps", "small_noneab", "small_noabs", "small_nacaps", "small_nonecaps", "small_nonebsp", "small_Nonebsp", "small_nonabs", "small_Nonebs", "small_anyabs", "small_anycaps", "small_noab", "small_nabsp"], "ttl": ["tti", "TTll", "tli", "ttll", "ttel", "ottil", "ottL", "ttli", "tsll", "TTel", "tsL", "settl", "setti", "ottll", "tb", "ttil", "tsl", "ettl", "tyll", "ettll", "tyil", "ottl", "ttb", "ottli", "settll", "tl", "ettL", "ettel", "tyl", "settil", "ottb", "ettb", "ttL", "otti", "ettli", "TTl", "tyi", "tL", "TTL", "tsel"], "i": ["hi", "bi", "pi", "ni", "iu", "p", "size", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "si", "ix", "l", "mini", "ri", "uli", "io", "ci", "s", "ui", "ini", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "inf", "gi", "n", "ii", "b", "zi", "err", "li", "cli", "field", "j", "sup", "chi", "needed", "t", "ti", "fi"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\nimport java.math.BigInteger;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t// \u5165\u529b\\n\t\tint n = sc.nextInt();\\n\t\tint result = Integer.MAX_VALUE;\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t    int a = sc.nextInt();\\n\t\t    int tmp = 0;\\n\t\t    while(a%2 == 0){\\n\t\t        tmp++;\\n\t\t        a /= 2;\\n\t\t    }\\n\t\t    result = min(result, tmp);\\n\t\t}\\n\t\t\\n\t\t// \u8a08\u7b97\\n\t\t\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(result);\\n\t}\\n}\\n\\n", "target": "196", "substitutes": {"sc": ["sci", "sf", " ser", " ar", "gram", "ss", " SC", " rc", " sl", "Sc", "SC", " res", " subp", " scr", "an", " pars", "sp", "sa", " ans", "sq", " sm", " Sc", "sb", "scan", " arr", " sp", " scans", "ann"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int[] a = new int[N+1];\\n        for(int i = 1;i <= N;i++){\\n            a[i] = sc.nextInt();\\n        }\\n        int count = 1;\\n        int x = a[1];\\n        for(int i = 1;i <= N;i++){\\n            if(x == 2){\\n                System.out.println(count);\\n                return;\\n            }\\n            count++;\\n            x = a[x];\\n        }\\n        System.out.println(-1);\\n    }\\n}\\n", "target": "175", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "class", "ch", "sec", "ss", "tc", " SC", "cur", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "cv", "lc", "ci", "c", " scr", "sp", "sa", "ec", "system", "sq", "uc", "ca", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "out", "esc"], "N": ["Len", "S", "Num", "Count", "C", "J", "M", " n", "Size", "Y", "X", "Node", "F", "Q", "A", "P", "Na", "T", "I", "Ni", "L", "R", "n", "B", "Ne", "V", "K", "D", "NT", "H", "Z", "Ns", "O", "NS", "G"], "a": ["ana", "p", "na", "u", "auto", "ba", "aa", "A", "aux", "oa", "tta", "au", "s", "c", "ga", "an", "ata", "sa", "ea", "ae", "alpha", "abs", "n", "ca", "b", "wa", "aaa", "qa", "sta", "ama", "as", "la", "y", "area", "ab", "da", "ma", "am", "va", "array"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "l", "is", "ri", "start", "io", "init", "info", "z", "f", "ci", "s", "ui", "c", "ini", "key", "index", "phi", "uri", "ip", "e", "di", "I", "ie", "ai", "min", "o", "gi", "inner", "mi", "n", "d", "ii", "b", "li", "j", "in", "chi", "y", "fi"], "count": ["counter", "total", "offset", "p", "Count", "size", "id", "num", "ch", "v", "start", "z", "info", "len", "length", "f", "c", "sum", "key", "index", "weight", "depth", "base", "list", "e", "left", "max", "code", "n", "g", "b", "current", "k", "child", "found", "number", "y", "cache", "error", "ind", "t", "X"], "x": ["counter", "ic", "dx", "p", "xp", "test", "u", "id", "xi", "ex", "v", "ext", "ix", "l", "X", "cross", "z", "h", "f", "c", "ax", "wx", "key", "index", "w", "pe", "e", "ww", "xxx", "q", "code", "n", "b", "j", "pos", "exec", "xs", "xy", "number", "y", "rx", "t", "ctx", "xc", "xx"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] a = new int[n+1];\\n\t\tfor (int i=1; i<=n; i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t}\\n\t\tboolean[] reachable = new boolean[n+1];\\n\t\tint cur = 1;\\n\t\tint hops = 0;\\n\t\twhile(!reachable[cur] && cur != 2) {\\n\t\t\treachable[cur] = true;\\n\t\t\tcur = a[cur];\\n\t\t\thops++;\\n\t\t}\\n\t\treachable[cur] = true;\\n\t\tSystem.out.println(reachable[2] ? hops : -1);\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "175", "substitutes": {"sc": ["sche", "mc", "sci", "nc", "enc", "sf", "scope", "pc", "ch", "tc", "ss", "sec", "server", " SC", "sub", "asc", "Sc", "SC", "con", "bc", "cs", "sw", "src", "cor", "cv", "lc", "ci", "c", "cer", "sp", "system", "sq", "uc", "soc", "ca", "sem", "se", "ner", " Sc", "sys", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "n": ["nn", "nc", "nt", "ni", "count", "p", "size", "u", "num", "N", "v", "l", "sn", "r", "init", "z", "h", "nl", "nr", "f", "s", "c", "ne", "m", "w", "x", "e", "q", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "no", "in", "y", "en", "t"], "a": ["api", "p", "u", "na", "auto", "ba", "ar", "l", "aa", "A", "input", "oa", "pa", "tta", "au", "c", "ata", "an", "x", "sa", "ai", "o", "alpha", "array", "b", "ca", "ac", "qa", "aaa", "wa", "asha", "as", "la", "asa", "area", "ab", "am", "va", "aj"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "ri", "part", "init", "h", "z", "info", "f", "ci", "ui", "c", "ini", "index", "x", "uri", "ip", "di", "e", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "li", "j", "oi", "in", "chi", "y", "ind", "ti", "fi"], "reachable": ["keepable", "broadable", "contactability", "contactible", "keepstable", "verables", "verability", "addressability", "coverables", "addressable", "keepachable", "broadstable", "hideible", "operability", "addressiable", "coverability", "reachstable", "coveriable", "reachachable", "broadability", " reachachable", "contactables", "addressables", "reachible", " reachible", "coverstable", " reachability", " reachiable", "coverable", "broadachable", "operstable", " reachstable", "contactable", "reachiable", "hideables", "coverible", "verible", "reachability", "verable", "reachables", "hideability", "operible", "keepability", "operable", " reachables", "hideable"], "cur": ["this", "quad", "seq", "currently", "ub", " circ", "fer", "hop", "oc", "sth", "ser", "cost", "next", "ch", "tr", "pr", "keep", "sur", "url", "const", "fac", "chrom", "circ", "ct", "ur", "ctr", "r", "fr", "start", "car", "iter", "desc", "cor", "char", "length", "loc", " iter", "ah", "cmp", "c", "cer", "dr", "uu", "sl", "pub", "var", "per", "rev", "uc", "ever", "rest", "prev", "ver", "result", "current", "open", " prev", "reverse", "Cur", "req", "rc", "tri", "cr", "sch", "bar", "spec", "coll"], "hops": ["frames", "breaks", "seq", "works", "orts", "cats", "hop", "vers", "count", "obs", "times", "http", "docs", "hours", "rs", "offs", "ls", "ws", "pages", "eps", "oops", "cs", "ps", "length", "loc", "vs", "rows", "bits", "planes", "jobs", "width", "cycles", "workers", "ches", "projects", "itches", "ops", "tracks", "events", "op", " hop", "bps", "loop", "ports", "ures", "aps", "pps", "has", "posts", "coll"]}}
{"code": "import java.math.BigInteger;\\nimport java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String args[]) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        while (sc.hasNext()) {\\n            BigInteger a = sc.nextBigInteger();\\n            BigInteger b = sc.nextBigInteger();\\n\\n            BigInteger gcd = a.gcd(b);\\n            BigInteger lcm = a.multiply(b).divide(gcd);\\n            System.out.println(gcd + \" \" + lcm);\\n        }\\n    }\\n}", "target": "181", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "com", "ch", "sec", "ss", "tc", " SC", "cur", "asc", "sh", "search", "fc", "Sc", "SC", "cb", "cs", "bc", "sw", "RC", "cv", "desc", "src", "lc", "ci", "dc", "loc", "cer", "c", "contract", "console", "sp", "sq", "uc", "soc", "cli", "ca", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "coll", "ec", "esc", "ctx", "sync"], "a": ["this", "api", "p", "u", "abb", "ad", "auto", "ba", "l", "cca", "aa", "A", "app", "aux", "pa", "au", "s", "c", "ga", "m", "an", "x", "sa", "ae", "ea", "aka", "alpha", "af", "array", "ca", "ac", "aaa", "aba", "ama", "as", "la", "area", "ab", "am", "va", "aj"], "b": ["fb", "bl", "p", "pb", "abb", "rb", "binary", "i", "ba", "l", "ib", "cb", "db", "r", "lb", "bc", "gb", "bs", "eb", "f", "pa", "s", "lib", "c", "x", "base", "e", "o", "d", "g", "B", "abc", "k", "sb", "bot", "bd", "y", "bar", "ab", "wb", "ob"], "gcd": [" gcod", "mde", "mcd", " gcr", "gcr", "gbde", "gbcp", "ergdd", "gbmd", "Gcd", "gcod", "gcm", "mcm", " gdd", "mgcp", "gmd", "gbcd", "Gmd", "rgdc", "Gcr", "Gcod", "ergcd", "ergcm", "rgmd", "Gdd", "Gdc", "gdd", "gbcm", "mgde", "mcr", "mcod", "gde", "gdc", "gbdc", "ergcr", "rgcd", "mgcm", "mcp", "gcp", "Gcm", " gcm", "rgcm", "mgcd"], "lcm": [" lcc", "llcc", "Lcm", "lcc", "gcr", "Lpm", " lcr", "Lcc", "lcd", "lcr", "llcm", "gcm", " lcd", "Lcr", " lpm", "llcr", "Lcd", "llcd", "gpm", "lpm"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint n        = Integer.parseInt(scanner.nextLine());\\n\t\tString[] tmp = scanner.nextLine().split(\" \");\\n\t\tint[] list   = new int[n];\\n\t\tint now   = 0;\\n\t\tint was   = 1;\\n\t\tint point = 0;\\n\t\tfor(int i = 0;i < n; i ++) {\\n\\n\t\t\tnow = Integer.parseInt(tmp[i]);\\n\\n\t\t\tif(now == was) {\\n\t\t\t\twas++;\\n\t\t\t}else {\\n\t\t\t\tpoint++;\\n\t\t\t}\\n\\n\\n\t\t}\\n\\n\t\tif(point == tmp.length) {\\n\\n\t\t\tSystem.out.println(-1);\\n\\n\t\t}else {\\n\\n\t\t\tSystem.out.println(point);\\n\\n\t\t}\\n\t}\\n}", "target": "234", "substitutes": {"scanner": [" scaner", "Scaninner", "hanner", "scanker", " scanler", "caner", "canter", "caninner", "haner", " scanter", "scanter", "nerinner", "Scanler", "nerner", "canker", "canler", "scaner", "Scanker", "nerer", "Scanter", "Scaner", "hanker", "nerker", "canner", "haninner", "Scanner", "scanler", "scaninner"], "n": ["nn", "all", "nc", "nt", "count", "p", "size", "dn", "u", "num", "N", "ln", "span", "v", "l", "sn", "z", "h", "nl", "len", "f", "s", "c", "ne", "m", "w", "x", "o", "d", "ns", "b", "network", "nb", "j", "pos", "k", "net", "no", "in", "number", "y", "en", "t"], "tmp": ["buff", "fb", "wp", "py", "api", "ppo", "elt", "nt", "inst", "p", "mb", "slice", "pb", "next", "rb", "po", "meta", "bp", "stuff", "data", "cb", "metadata", "temp", "app", "src", "cp", "perm", "pty", "cmp", "pointer", "ppa", "np", "mp", "fp", "prev", "bps", "nb", "cpp", "tp", "obj", "su", "buf", "sb", "storage", "etc", "bb", "txt", "bt", "area", "proc", "pad", "array"], "list": ["counter", "parent", "seq", "count", "val", "slice", "num", "keep", "path", "line", "part", "last", "index", "x", "base", "code", "set", "loop", "cycle", "obj", "pos", "sequence", "type", "number", "batch", "array"], "now": ["self", "this", "wait", "currently", "nt", "space", "count", "age", "size", "id", "next", "NOW", "here", "before", "old", "then", "first", "length", "got", "last", "where", "way", "pointer", "today", "after", "ww", "month", "max", "were", "when", "prev", "ow", "with", "once", "night", "cycle", "current", "day", "still", "time", "step", "found", "since", "word", "later", "Now", "of", "always"], "was": ["self", "wp", "nt", "seen", "p", "and", "patch", "next", "NOW", "did", "before", "is", "then", "start", "what", "opened", "started", "first", "present", "saw", "loc", "Was", "way", "pointer", "never", "which", "ww", "past", "were", "ago", "when", "prev", "with", "been", "once", "cycle", "still", "wa", "pos", "current", "original", "step", "found", "from", "early", "as", "later", "shape", "Now", "always"], "point": ["points", "press", "offset", "parent", "p", "pc", "patch", "slice", "next", "po", "move", "before", "line", "part", "stroke", "then", "piece", "start", "end", "length", "present", "Point", "pointer", "key", "index", "zone", "x", "pt", "month", "element", "year", "current", "day", "pos", "time", "step", "no", "position", "type", "art", "number", "word", "area", "section", "post"], "i": ["bi", "hi", "pi", "ori", "p", "it", "u", "id", "slice", "multi", "qi", "ji", "xi", "v", "si", "ix", "is", "ri", "init", "io", "z", "info", "abi", "f", "ci", "ui", "c", "ini", "index", "phi", "x", "mu", "uri", "ip", "di", "I", "ai", "o", "gi", "inner", "shift", "ii", "b", "li", "j", "oi", "you", "y", "ti", "fi"]}}
{"code": "import java.util.*;\\n \\n\tpublic class Main {\\n\t\tpublic static void main(String[] args) {\\n      \tScanner sc = new Scanner(System.in);\\n      \\n      \tlong N  =sc.nextLong();\\n       \tlong K  =sc.nextLong();\\n          \\n        if(N>K && N%K!=0){\\n           System.out.println(K-(N%K));\\n        }\\n          else if(N<K && K-N<N){\\n            System.out.println(K-N);\\n          }\\n          else if(N<K && K-N>N){\\n           System.out.println(N);\\n          }\\n          else{\\n          System.out.println(0);\\n          }\\n    }\\n}", "target": "22", "substitutes": {"sc": ["cl", "enc", "sche", "sci", "nc", "scope", "pc", "com", "ch", "tc", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "ct", "cs", "bc", "sw", "cv", "lc", "loc", "cer", "c", "sp", "system", "sq", "uc", "soc", "se", "ner", " Sc", "ocr", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "ctx", "cus", "sync"], "N": ["Len", "S", "Num", "AN", "No", "NA", "C", "Part", "J", "M", "CN", " n", "Size", "Nat", "U", "Y", "Node", "None", "F", "NN", "Q", "P", "Wh", "Na", "NO", "Ni", "T", "I", "NC", "NP", "PK", "L", "R", "n", "SK", "B", "NM", "Ne", "V", "CNN", "NB", "k", "ND", "D", "NT", "H", "O", "NS", "Ns", "Z", "G", "NE", "W", "NG", "NI", "IN", "E", "X"], "K": ["KK", "S", "EC", "No", "Ku", "C", "IK", "J", "MK", "M", "CC", "Power", "U", "Y", "X", "NK", "Work", "F", "Q", "P", "Point", "HK", "Key", "Sk", "OK", "T", "I", "KA", "AK", "Mask", "PK", "L", "n", "Ne", "V", "k", "KR", " k", "KER", "D", "KI", "KN", "Kin", "O", "H", "NE", "KE", "Z", "G", "UK", "KS", "SK", "W", "E", "Ke", "FK"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        sc.close();\\n\\n        N = Math.abs(N-10000);\\n        System.out.println(N%1000);\\n    }\\n}\\n", "target": "184", "substitutes": {"sc": ["cl", "sci", "nc", "sf", "scope", "pc", "class", "na", "ch", "server", "ss", " SC", "cur", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "cv", "lc", "ci", "c", "sp", "st", "system", "sq", "uc", "soc", "sr", "ca", "se", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "N": ["IO", "S", "Len", "No", "NA", "SN", "NL", "C", "J", "M", " n", "Size", "Y", "Node", "F", "Number", "NN", "RN", "P", "GN", "NY", "Total", "Na", "NO", "T", "I", "Ni", "L", "R", "n", "B", "Ne", "V", "CNN", "K", "NB", "D", "NT", "H", "Z", "O", "NS", "Ns", "G", "NE", "NUM", "NG", "NI", "X"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n[]=new int[5];\\n\t\tString s=\"Yay!\";\\n\\n\t\tfor(int i=0;i<=4;i++){\\n\\n\\n\\n\t\tn[i]= sc.nextInt();// n\u3053\u306e\u5e0c\u671b\\n\t\t}\\n\t\tint k=sc.nextInt();\\n\t\tfor(int i=0;i<=4;i++){\\nfor(int j=0;j<=4;j++){\\n\tif(Math.abs(n[i]-n[j])>k){\\n\t\ts=\":(\";\\n\t}\\n}\\n\t\t}\\nSystem.out.println(s);\\n\\n\t}}", "target": "66", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "nt", "sf", "scope", "pc", "class", "server", "sec", " SC", "sh", "l", "Sc", "SC", "exp", "iss", "bc", "desc", "sw", "src", "cs", "c", " scr", "sp", "config", "st", "system", "sq", "se", "ner", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "spec", "esc", "sync"], "n": ["none", "p", "u", "na", "num", "nan", "N", "ln", "span", "v", "l", "out", "name", "z", "un", "f", "lines", "fn", "c", "inn", "ne", "m", "x", "e", "node", "o", "d", "ns", "b", "network", "names", "j", "not", "Ns", "number", "y", "en", "t", " N"], "s": [" comments", " outputs", "S", " tokens", " commands", " logs", "p", " symbols", "name", "lines", " messages", " p", "e", "Str", "d", "ns", " results", " lines", " headers", " c", "Name", "out", " params"], "i": ["bi", "pi", "ni", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "mini", "ri", "part", "uli", "start", "io", "z", "h", "abi", "end", "f", "ci", "c", "ui", "key", "ini", "index", "phi", "x", "mu", "uri", "e", "di", "I", "ai", "o", "gi", "d", "ii", "b", "zi", "li", "j", "k", "oi", "in", "chi", "y", "t", "ti", "fi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main\\n{\\n\tstatic int MOD = (int) 1e9 + 7;\\n\t\\n\tstatic interface Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out);\\n\t}\\n\t\\n\tpublic static void main(String[] args)\\n\t{\\n\t\tInputStream inputStream = System.in;\\n\t\tOutputStream outputStream = System.out;\\n\t\tMyScanner in = new MyScanner(inputStream);\\n\t\tPrintWriter out = new PrintWriter(outputStream);\\n\t\tSolver solver = new A();\\n\t\tsolver.solve(1, in, out);\\n\t\tout.close();\\n\t}\\n\t\\n\tstatic class F implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t}\\n\t}\\n\\n\tstatic class E implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t}\\n\t}\\n\\n\tstatic class D implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t}\\n\t}\\n\t\\n\tstatic class C implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t}\\n\t}\\n\t\\n\tstatic class B implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t}\\n\t}\\n\\n\tstatic class A implements Solver\\n\t{\\n\t\tpublic void solve(int testNumber, MyScanner in, PrintWriter out)\\n\t\t{\\n\t\t\tint n = in.nextInt();\\n\t\t\tint x = in.nextInt();\\n\t\t\tint t = in.nextInt();\\n\t\t\tout.println(Calc.ceilInt(n, x) * t);\\n\t\t}\\n\t}\\n\t\\n\tstatic class FenwickTree\\n\t{\\n\t\t// bit[1] ~ bit[n]\\n\t\tlong[] bit;   // = new long[n+1];\\n\t\t\\n\t\tpublic FenwickTree(int n)\\n\t\t{\\n\t\t\tbit = new long[n+1];\\n\t\t}\\n\t\t\\n\t\t// bit[1] + ... + bit[r]\\n\t\tlong sum(int r)\\n\t\t{\\n\t\t\tlong s = 0;\\n\t\t\tfor( int i=r; i>0; i-=(i & -i) )\\n\t\t\t{\\n\t\t\t\ts += bit[i];\\n\t\t\t}\\n\t\t\treturn s;\\n\t\t}\\n\t\t\\n\t\tvoid add(int idx, int x)\\n\t\t{\\n\t\t\tfor( int i=idx; i<bit.length; i+=(i & -i) )\\n\t\t\t{\\n\t\t\t\tbit[i] += x;\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tstatic class UnionFind\\n\t{\\n\t\tint[] par;\\n\t\tint[] n_nodes;\\n\t\tint max = 1;\\n\t\t\\n\t\tpublic UnionFind(int n)\\n\t\t{\\n\t\t\tpar = new int[n];\\n\t\t\tn_nodes = new int[n];\\n\t\t\tfor( int i=0; i<n; i++ )\\n\t\t\t{\\n\t\t\t\tpar[i] = i;\\n\t\t\t\tn_nodes[i] = 1;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tint root(int x)\\n\t\t{\\n\t\t\tif( par[x] == x ) return x;\\n\t\t\treturn par[x] = root(par[x]);\\n\t\t}\\n\t\t\\n\t\tvoid unite(int x, int y)\\n\t\t{\\n\t\t\tint rx = root(x);\\n\t\t\tint ry = root(y);\\n\t\t\tif( rx == ry ) return;\\n\t\t\tpar[rx] = ry;\\n\t\t\tn_nodes[ry] += n_nodes[rx];\\n\t\t\tmax = Math.max(max, n_nodes[ry]);\\n\t\t}\\n\t\t\\n\t\tboolean same(int x, int y)\\n\t\t{\\n\t\t\tint rx = root(x);\\n\t\t\tint ry = root(y);\\n\t\t\treturn rx == ry;\\n\t\t}\\n\t}\\n\t\\n\tstatic class Calc\\n\t{\\n\t\tstatic int gcd(int a, int b)\\n\t\t{\\n\t\t\tif( a == 0 )\\n\t\t\t{\\n\t\t\t\treturn b;\\n\t\t\t}\\n\t\t\treturn gcd(b%a, a);\\n\t\t}\\n\t\t\\n\t\tstatic int ceilInt(int a, int b)\\n\t\t{\\n\t\t\treturn (a%b==0 ? a/b : a/b+1);\\n\t\t}\\n\\n\t\tstatic long power(long x, long n)\\n\t\t{\\n\t\t\tif( n == 0 )\\n\t\t\t{\\n\t\t\t\treturn 1;\\n\t\t\t}\\n\\n\t\t\tif( n % 2 == 0 )\\n\t\t\t{\\n\t\t\t\tlong X = (x * x) % MOD;\\n\t\t\t\treturn power(X, n/2);\\n\t\t\t}\\n\t\t\telse\\n\t\t\t{\\n\t\t\t\treturn (x * power(x, n-1)) % MOD;\\n\t\t\t}\\n\t\t}\\n\t}\\n\t\\n\tstatic class MyScanner\\n\t{\\n\t\tprivate BufferedReader in;\\n\t\tprivate StringTokenizer st;\\n\t\t\\n\t\tpublic MyScanner(InputStream stream)\\n\t\t{\\n\t\t\tin = new BufferedReader(new InputStreamReader(stream));\\n\t\t}\\n\t\t\\n\t\tpublic String next()\\n\t\t{\\n\t\t\twhile( st == null || !st.hasMoreTokens() )\\n\t\t\t{\\n\t\t\t\ttry\\n\t\t\t\t{\\n\t\t\t\t\tString rl = in.readLine();\\n\t\t\t\t\tif( rl == null )\\n\t\t\t\t\t{\\n\t\t\t\t\t\treturn null;\\n\t\t\t\t\t}\\n\t\t\t\t\tst = new StringTokenizer(rl);\\n\t\t\t\t}\\n\t\t\t\tcatch( IOException e )\\n\t\t\t\t{\\n\t\t\t\t\treturn null;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\t\t\\n\t\tpublic int nextInt()\\n\t\t{\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\t\t\\n\t\tpublic long nextLong()\\n\t\t{\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\t}\\n}\\n", "target": "34", "substitutes": {"MOD": ["Num", " steps", " mod", " J", "num", " L", "M", " test", " m", " iterations", " increment", " NUM", " seed", " C", " E", " P", " order", " p", " error", " B", "L", "B", " M", " base", " major", " factor", " complexity", " constant", " constructor"], "testNumber": ["estNo", "checkBER", "estNumber", "trialnumber", " testNumbers", "testingNumber", "trialSeven", "checkFour", "scriptBER", "estLength", "testLength", "trialNumber", "TestNumber", "TestNo", "testingnumber", "testNumbers", "checkNumber", " testnumber", "testBER", "estnumber", "scriptNumber", "TestMonth", "estSeven", "estNumbers", "testingLength", "checknumber", "testingMonth", "testingNumbers", "testNo", "testMonth", " testFour", "TestLength", "testFour", "TestNumbers", "TestFour", "scriptnumber", "testnumber", "trialLength", "Testnumber", "TestBER", "scriptMonth", "testingBER", "testSeven", " testNo", "TestSeven", " testBER"], "in": ["this", "isin", "buffer", "ins", "a", "con", "lin", "r", "init", "win", "info", "ino", "ax", "w", "inner", "connection", "bin", "as", "inc", "ic", "on", "client", "id", "din", "i", "version", "line", "data", "name", "io", "input", "In", "conn", "image", "inn", "ini", "index", "an", "socket", "kin", "again", "vin", "file", "off", "IN", "spin", "and", "run", "part", "sin", "nin", "min", "inf", "rin", "err", "reader", "pin", "log", "login", "ex", "inside", "path", "impl", "is", "inas", "source", "stream", "c", "config", "cin", "ran", "gin", "from", "read"], "out": ["this", "ort", "hard", "buffer", "back", "r", "exp", "init", "inter", "at", "output", "w", "left", "Out", "o", "inner", "exec", "connection", "group", "bin", "worker", "inc", "doc", "copy", "error", "all", "call", "target", "client", "on", "server", "version", "line", "data", "name", "cmd", "block", "io", "temp", "end", "In", "conn", "user", "image", "down", "list", "base", "str", "again", "write", "up", "no", "file", "off", "unit", "scope", "to", "v", "pool", "point", "part", "resource", "gen", "outside", "process", "writer", "raw", "err", "obj", "net", "log", "cache", "parent", "one", "table", "ex", "path", "page", "is", "outer", "writing", "OUT", "action", "string", "problem", "object", "outs", "exit", "flow", "dump"], "inputStream": ["outputWriter", "initstream", "inputSteam", "outputSteam", " inputstream", " inputSteam", "InputSteam", "initStreamer", "inputStreamer", "initStream", "Inputstream", "inputWriter", " inputWriter", "InputStreamer", "requestStream", "InputWriter", "InputStream", "requestStreamer", "initSteam", "outputstream", "requeststream", "inputstream", "requestSteam"], "outputStream": ["referenceSteam", "inputSteam", "outputSteam", "inputThread", "Outputstream", " outputThread", "referencestream", "OutputStream", " outputSteam", "referenceStream", "OutputThread", "outputThread", "OutputSteam", "outputstream", " outputstream", "inputstream"], "solver": [" solution", " sanger", "ssolve", "Solver", "sangler", "ssolver", "ssangler", "sanger", "ssolution", "Sangler", " sangler", "solve", "resanger", "solution", "resolve", "Solution", "Sanger", "Solve", "resolver", " solve", "resolution"], "n": ["nn", "nt", "p", "u", "num", "nu", "N", "v", "i", "l", "a", "r", "z", "f", "c", "ne", "m", "np", "e", "o", "d", "ns", "b", "pn", "nb", "j", "net", "k", "no", "number", "y", "en"], "x": ["on", "p", "id", "u", "num", "ex", "v", "i", "xes", "ix", "is", "r", "cross", "z", "f", "c", "wx", "index", "m", "w", " X", "e", "xx", "xxx", "q", "o", "d", "b", "j", "k", "xy", "number", "y", "xt", "en", "X"], "t": ["ot", "te", "ts", "p", "test", "u", "v", "tz", "i", "a", "l", "z", "f", "c", "m", "at", "w", "e", "T", "pt", "ta", "q", "o", "d", "g", "b", "dt", "j", "time", "type", "y", "stop", "tt", "ti"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        MyScanner sc = new MyScanner();\\n        out = new PrintWriter(new BufferedOutputStream(System.out));\\n\\n        long H = sc.nextLong();\\n        long n = 1, ans = 0;\\n        while (H > 0) {\\n            ans += n;\\n            n *= 2;\\n            H /= 2;\\n        }\\n\\n        out.println(ans);\\n\\n        out.close();\\n    }\\n\\n\\n    public static PrintWriter out;\\n\\n    public static class MyScanner {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public MyScanner() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n\\n    }\\n}\\n", "target": "51", "substitutes": {"sc": ["cl", "nc", "sci", "scope", "pc", "ch", "si", "sub", "asc", "sh", "Sc", "SC", "ct", "screen", "exp", "bc", "cs", "sw", "lc", "ci", "c", "sp", "acc", "system", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "anc", "scan", "in", "osc", "rc", "cc", "cr", "esc", "ctx", "sync"], "out": ["all", "cl", "parent", "print", "client", "p", "ins", "ch", "to", "ex", "ext", "path", "line", "ou", "name", "screen", "con", "r", "println", "io", "info", "input", "channel", "In", "f", "outer", "s", "c", "user", "wx", " output", "at", "output", "OUT", "w", "x", "console", "by", "writer", " Out", "code", "Out", "o", "inner", "cli", "b", "err", "again", "obj", "write", "exec", "up", "connection", "in", " in", "log", "file", "bin", "outs", "group", "lock", "error", "IN", "can", "sync"], "H": ["S", "HI", " N", "C", " h", "J", "N", "M", "sh", "U", "Y", "SH", "rh", "F", "Q", "h", "EH", "P", "A", "Wh", "NH", "Na", "T", "L", "R", "B", "HH", "V", "GH", "K", "D", "Z", "Ns", "HS", "G", "W", "E", "X"], "n": ["nn", "nc", "ni", "p", "u", "C", "N", "ln", "M", "v", "anon", "cn", "i", "l", "a", "sn", "r", "h", "z", "un", "f", "conn", "c", "m", "an", "x", "w", "e", "o", "L", "d", "ns", "g", "b", "j", "k", "Ns", "en", "ann", " N"], "ans": ["nn", "ana", "blocks", "AN", "aned", "vers", "NA", "na", "ins", "An", "N", "ln", "aus", "anon", "span", "cn", "a", "reads", "offs", "ls", "sn", "ens", "olds", "cs", "lines", "vs", "s", "os", "nas", "cas", "ds", "rows", "ants", "an", "ops", "Na", "cons", "ANS", "Ann", "ns", "names", "ats", "anc", "scan", "no", "Ns", "outs", "as", "NS", "ons", "nos", "can", "ann"], "br": ["bl", "bed", "ber", "bm", "p", "hr", "rb", "ch", "browser", "tr", "pr", "arr", "cur", "vr", "db", "lr", "fr", "ur", "cb", "r", "bh", "be", "iter", "bridge", "bc", "src", "ler", "dr", "mr", "orb", "BR", "raf", "sp", "bro", "pl", "Br", "ver", "sr", "b", "err", "gr", "obj", "cro", "buf", "sb", "bb", "cr", "bar", "ab", "rt", "fore", "ru"], "st": ["cl", "ut", "bl", "ste", "inst", "ust", "sth", "ST", "p", "nd", "stable", "ss", "stack", "pr", "sh", "ct", "fr", "std", "sn", "r", "sign", "store", "be", "stage", "stab", "fe", "sw", "src", "ft", "bs", "sl", "style", "est", "pe", "sp", "sa", "e", "ist", "string", "pt", "stri", "Str", "d", " est", "rest", "ld", "sr", "St", "se", "sty", "sb", "sta", "ast", "sts", "struct", "cr", "ost", "stop", "rt", "t"], "str": ["div", "p", "wr", "dict", "id", "tr", "pr", "arr", "url", "line", "STR", "data", "pre", "fr", "part", "r", "exp", "z", "iter", "char", "f", "dr", "sl", "s", "c", "style", "x", "sp", "e", "text", "string", "pt", "stri", "code", "Str", "inner", "result", "sr", "b", "err", "ner", "pos", "sta", "in", "type", "cr", "doc", "t", "re"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main\\n{\\n\tpublic static void main(String[] args)throws Exception\\n\t{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint n  = Integer.parseInt(br.readLine());\\n\t\tString[] g  = br.readLine().split(\" \");\\n\t\tint [] ar = new int[n];\\n\t\tfor( int i = 0 ; i< n ; i++){\\n\t\t\tar[i] = Integer.parseInt(g[i]);\\n\t\t}\\n\t\tint m  = Integer.parseInt(br.readLine());\\n\t\tint ans = 0;\\n\t\tg  = br.readLine().split(\" \");\\n\t\tfor(int i = 0 ; i <m; i++)\\n\t\t{\\n\t\t\tif(binarySearch(ar,Integer.parseInt(g[i])) != -1) ans++ ;\t\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\tpublic static int binarySearch(int[] c, int key)\\n\t{\\n\t\tint len = c.length;\\n\t\tint left = 0 , right = len;\\n\t\tint mid = (right + left) / 2 ;\\n\t\twhile(left < right){\\n\t\t\tif(c[mid] == key) return mid;\\n\t\t\telse if(c[mid] < key) left = mid+1;\\n\t\t\telse { right = mid;  }\\n\t\t\tmid = (right + left) / 2 ;\\n\t\t}\\n\t\treturn -1;\\n\t}\\n\t\\n}", "target": "138", "substitutes": {"br": ["bl", "oper", "ber", "wr", "nor", "http", "hr", "rb", "browser", "tr", "arr", "res", "jar", "mer", "lr", "db", "fr", "cb", "ur", "r", "bf", "yr", "bh", "obl", "io", "be", "bridge", "bc", "ler", "bs", "dr", "er", "orb", "mr", "BR", "or", "her", "bro", "per", "Br", "prev", "gor", "sr", "b", "err", "gr", "ner", "buf", "ocr", "bb", "cr", "bt", "bar", "ab", "keeper", "ref"], "n": ["nn", "all", "nc", "nt", "count", "p", "u", "na", "num", "N", "v", "cn", "l", "a", "sn", "r", "h", "z", "f", "s", "ne", "w", "x", "an", "e", "o", "d", "ns", "b", "nb", "net", "k", "no", "in", "not", "mn", "number", "y", "en"], "g": ["groups", "msg", "go", "p", "u", "gram", "alg", "gh", "v", "l", "erg", "ng", "pg", "r", "gas", "gate", "h", "ag", "gc", "gb", "gg", "f", "gen", "reg", "s", "gar", "ga", "w", "mg", "x", "agg", "e", "gm", "gre", "cfg", "rg", "q", "gin", "gi", "vg", "gp", "gs", "gu", "gam", "d", "ages", "gr", "b", "bg", "gain", "k", "ge", "greg", "group", "G", "sg", "gn", "game", "ig"], "ar": ["rar", "ir", "arc", "ars", "AR", "p", "arm", "par", "arin", "arr", "asc", "a", "el", "r", "al", "adr", "car", "dar", "are", "ear", "ag", "er", "air", "au", "gar", "ary", "star", "var", "sa", "ra", "per", "lar", "ai", "array", "ray", "Ar", "ner", "har", "iar", "parse", "cart", "ari", "art", "aur", "as", "ara"], "i": ["bi", "hi", "im", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "a", "ri", "ik", "uli", "io", "init", "h", "info", "z", "f", "ci", "vi", "ui", "ini", "phi", "x", "mu", "eni", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "cli", "ish", "li", "j", "oi", "me", "yi", "in", "y", "my", "ti", "fi"], "m": ["dm", "mc", "bm", "p", "M", "v", "l", "mm", "r", "nm", "h", "z", "f", "cm", "man", "ms", "pm", "ym", "an", "mad", "x", "o", "md", "d", "b", "dim", "j", "hm", "k", "sm", "mx", "mn", "am"], "ans": ["all", "ams", "ana", "sk", "ars", "aned", "AN", "na", "errors", "ins", "aus", "ks", "span", "rs", "lan", "ss", "asts", "a", "ares", "atan", "es", "eps", "ls", "cs", "ian", "s", "os", "ms", "cas", "ds", "plan", "nas", "ants", "an", "x", "aid", "ANS", "ai", "anes", "ents", "ns", "ras", "ats", "anc", "scan", "ids", "annot", "as", "amps", "ays", "can", "ann"], "c": ["cl", "enc", "mc", "nc", "p", "C", "u", "ch", "v", "cur", "l", "cu", "a", "ct", "con", "r", "cs", "co", "cp", "cm", "lc", "ci", "dc", "loc", "s", "w", "cy", "e", "col", "ce", "code", "cf", "d", "b", "ac", "k", "cd", "cc", "cr", "sc", "ec", "ctx", "xc", "coll"], "key": ["self", "parent", "ky", "count", "size", "id", "num", "next", "ch", "ke", "sec", "mac", "v", "search", "keys", "part", "start", "value", "row", "co", "link", "cor", "char", "cmp", "loc", "lc", "index", "x", "Key", "list", "e", "col", "ie", "q", "code", "ce", "max", "shift", "min", "KEY", "field", "k", "type", "range", "close", "match"], "len": ["all", "bl", "Len", "ni", "fl", "count", "val", "size", "low", "ln", "lon", "lan", "le", "l", "el", "lin", "ls", "end", "lim", "length", "lc", "loc", "cmp", "lo", "list", "min", "max", "li", "net", "pos", "lock", "lf", "en", "ll"], "left": ["all", "cl", "offset", "parent", "low", "size", "id", "one", "le", "l", "el", "old", "center", "partial", "part", "half", "start", "co", "middle", "end", "Left", "length", "lim", "loc", "lc", "last", "lo", "full", "two", "min", "code", "inner", "small", "limit", "li", "pos", "lt", "rel", "ell", "off", "lf"], "right": ["head", "complete", "cl", "third", "and", "patch", "one", "id", "back", "ro", "Right", "cur", "then", "mm", "r", "rh", "start", "partial", "through", "row", "middle", "co", "end", "length", "last", "down", "ax", "x", "rw", "rad", "ack", "three", "rand", "max", "rest", "inner", "plus", "rank", "rights", "no", "false", "correct", "off", "close", "error"], "mid": ["this", "live", "val", "multi", "map", "late", "mate", "co", "cor", "char", "ms", "rand", "max", "inner", "mit", "grid", "id", "next", "mode", "Mid", "line", "cmd", "value", "middle", "end", "lim", "length", "mr", "mouse", "index", "large", "coord", "code", "d", "shift", "dim", "field", "kid", "pos", "off", "default", "count", "patch", "le", "part", "partial", "medium", "pid", "broad", "min", "md", "remote", "open", "hi", "offset", "low", "one", "sub", "mm", "start", "home", "entry", "loc", "last", "mi", "small", "prop", "kind", "cd", "range"]}}
{"code": "/*\\n *  author : Atul Anand   \\n *  created on : Wed Apr 01 2020\\n */\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) throws IOException {\\n        int N = in.nextInt();\\n        if((N & 1) == 0){\\n            double p = N*1.0/(2*N);\\n            println(p);\\n        }\\n        else{\\n            double p = (N+1)*1.0/(2*N);\\n            println(p);\\n        }\\n        \\n        in.close();\\n        out.close();\\n    }\\n\\n    static int MIN = Integer.MIN_VALUE;\\n    static int MAX = Integer.MAX_VALUE;\\n    static Reader in = new Reader();\\n    static PrintWriter out = new PrintWriter(System.out);\\n\\n    static void read(int arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextInt(); \\n    \t} \\n    }\\n    \\n    static void read(long arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextLong(); \\n    \t} \\n    }\\n    \\n    static void read(String arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.next(); \\n    \t} \\n    }\\n    \\n    static void print(Object O) {  \\n    \tout.print(O); \\n    }\\n    \\n    static void println(Object O) { \\n    \tout.println(O); \\n    }\\n    \\n    static void println(int arr[]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprint(arr[i]+\" \"); \\n    \t} \\n    \tprintln(\"\"); \\n    }\\n\\n    static void println(int arr[][]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprintln(arr[i]); \\n    \t}\\n    }\\n    \\n    static void debug(Object O) { \\n    \tSystem.out.println(O); \\n    }\\n}\\n\\nclass Reader {\\n    BufferedReader reader;\\n    StringTokenizer tokenizer;\\n\\n    Reader() {\\n        reader = new BufferedReader(new InputStreamReader(System.in));\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n\\n    String next() throws IOException {\\n        while (!tokenizer.hasMoreTokens() ) { \\n            tokenizer = new StringTokenizer(reader.readLine()); \\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    int nextInt() throws IOException { \\n        return Integer.parseInt(next()); \\n    }\\n    \\n    double nextDouble() throws IOException { \\n        return Double.parseDouble(next());\\n    }\\n    \\n    long nextLong() throws IOException { \\n        return Long.parseLong(next()); \\n    }\\n    \\n    String nextLine() throws IOException { \\n        return reader.readLine(); \\n    }\\n    \\n    void close() throws IOException { \\n        reader.close(); \\n    }\\n}", "target": "64", "substitutes": {"N": ["IP", "S", "IO", "Num", "IN", "No", "NA", "NL", "Count", "C", "Part", "J", "M", "OS", " n", "Size", "Y", "Node", "None", "F", "Number", "Q", "NN", "P", "A", "GN", " P", "Na", "T", "I", "Ni", "Sn", "NC", "L", "R", "Max", "n", "B", "NM", "network", "Ne", "V", "K", "NB", "Norm", "D", "NT", "H", "Ns", "NS", "Z", "G", "NE", "Index", "NG", "Name", "W", "E", "X"], "p": ["pi", "pc", "po", "dp", "pr", "jp", "v", "ap", "l", "a", "ep", "point", "h", "P", "lp", "cp", "pa", "f", "ps", "pat", "c", "pid", "m", "np", "ip", "e", "sp", "per", "fp", " xp", "q", "o", "op", "d", "n", "g", "pn", "tp", "j", "pos", "up", "pp", "t", "pad", "bp"], "MIN": ["PR", "MN", "S", "VALUE", "NA", "minimum", "ID", "PO", "M", "ALL", "Q", "P", "SIZE", "PER", "NP", "min", "PIN", "R", "Minimum", " min", "B", "V", "PN", "VAL", "Min", "IN"], "MAX": ["VALUE", "Maximum", "EN", " max", "M", "END", "ALL", "Q", "EST", "CL", "AP", "EXT", "AST", "SIZE", "XX", "PER", "AK", "max", "R", "Max", "IT", "AX", "K", "ND", "NV", "NUM", "BER", "X"], "in": ["ic", "isin", "rec", "buffer", "loader", "login", "ins", "serv", "din", "binary", "ex", "inside", "version", "url", "path", "l", "ar", "data", "a", "lin", "con", "r", "init", "source", "win", "io", "input", "resource", "In", "er", "gen", "user", "image", "inn", "ini", "conn", "w", "x", "nin", "by", "config", "socket", "min", "read", "inner", "d", "rin", "n", "kin", "err", "again", "pass", "pin", "connection", "log", "bin", "file", "readable", "as", "inc", "doc", "IN", "thin", "query"], "out": ["buffer", "r", "init", "co", "key", "format", "output", "w", "Out", "o", "bin", "inc", "doc", "error", "window", "query", "call", "print", "client", "line", "data", "name", "io", "input", "temp", "In", "user", "report", "list", "str", "global", "code", "n", "again", "write", "file", "IN", "t", "array", "view", "v", "point", "part", "println", "resource", "gen", "x", "writer", "comment", "b", "err", "obj", "log", "cache", "dev", "parent", "ex", "Writer", "path", "page", "outer", "external", "c", "or", "OUT", "string", "object", "outs", "Output", "dump"], "arr": ["all", "enc", "cat", "arc", "vec", "ars", "AR", "buffer", "dict", "html", "arm", "archive", "rep", "xml", "map", "par", "pr", "ar", "a", "data", "shr", "Array", "fr", "r", "dat", "series", "adr", "aa", "iter", " array", "attr", "input", "app", "dr", "br", "air", "ARR", "arg", "format", "var", "list", "x", "img", "str", "abc", "arch", "atts", "Arch", "n", "arp", "err", "ray", "Ar", "rr", "gr", "ras", "obj", "aaa", "att", "parse", "av", "bar", "war", "cache", "batch", "plot", "array", "ann", "coll"], "i": ["slice", "multi", "qi", "l", "init", "info", "key", "phi", "uri", "ie", "o", "g", "cli", "ii", "zi", "me", "bi", "ni", "iu", "id", "iii", "si", "ix", "mini", "data", "name", "io", "block", "h", "z", "abi", "f", "ci", "vi", "ui", "ini", "index", "eni", "d", "n", "j", "yi", "my", "fi", "pi", "it", "ei", "xi", "ji", "v", "ik", "x", "mu", "di", "I", "ai", "q", "gi", "b", "y", "ti", "hi", "api", "u", "one", "ri", "source", "lc", "c", "ip", "e", "mi", "li", "oi"], "O": ["EO", "RO", "IO", "MO", "OU", "C", "ION", "OL", "J", "Os", "PO", "M", "OS", "Lo", "GO", "U", "Y", " o", "X", "None", "F", "VO", "Q", "P", "A", "OO", "File", "ON", "OUT", "OK", "OA", "SO", "T", "I", "o", "L", "R", "Out", "object", "B", "V", "K", "OB", "OH", "D", "H", "Other", "DO", "G", "OT", "Output", "W", "E"], "reader": ["over", "print", "buffer", "loader", "server", "auto", "before", "l", "data", "lr", "player", "r", "oder", "entry", "io", "iter", "stream", "row", "input", "source", "df", "ler", "er", "report", "feed", "or", "ruby", "her", "writer", "per", "token", "ry", "inner", "prev", "result", "rer", "rr", "handler", "ner", "editor", "parser", "reading", "Reader", "driver", "read", "re"], "tokenizer": [" tokenizers", "Tokenization", " tokenize", "Tokenize", "Tokener", "Tokenizers", "tokenize", "okener", "initialize", "okenizer", "tokenler", " tokeniser", " tokenization", "okenize", " tokenler", "Tokenler", "initialiser", "tokenization", "okenler", "tokeniser", "initializer", "tokener", "okenization", " tokener", "Tokeniser", "tokenizers", "serializer", "initialization", "okeniser", "okenizers", "serialiser", "serialize", "Tokenizer", "serialization"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main {\\n    static final String YES = \"Yes\";\\n    static final String NO = \"No\";\\n\\n    // Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\\n    public static void main(String[] args) throws Exception {\\n        final Scanner sc = new Scanner(System.in);\\n        String S;\\n        S = sc.next();\\n        solve(S);\\n    }\\n\\n    static void solve(String S){\\n        boolean isEven = true;\\n        for (char c: S.toCharArray()) {\\n            if (isEven && c == 'L') {\\n                System.out.println(\"No\");\\n                return;\\n            }\\n            if (!isEven && c == 'R') {\\n                System.out.println(\"No\");\\n                return;\\n            }\\n            isEven = !isEven;\\n        }\\n\\n        System.out.println(\"Yes\");\\n\\n    }\\n}\\n", "target": "205", "substitutes": {"YES": [" Yes", "Maybe", "SS", "No", "Yep", "N", "GO", "Y", "Yeah", "Success", "KO", "MS", "XX", "Sure", "OK", "SO", "NC", "Yes", "INFO", "Hello", "yes", "Some", "Hi", "DO", "ANY", "PS"], "NO": ["RO", "IO", "MO", "SS", "No", "NAME", "N", " No", "GO", " OK", "UE", "None", "NN", "KO", "MODE", "OUT", "OK", "SO", "Yes", "B", "NR", "Mo", "ERROR", "no", "O", "ANY"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\npublic static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int d;\\n        int r;\\n        double f;\\n        d = a /b;\\n        r = a % b;\\n        f = 1.0 * a / b;\\n        System.out.print(d + \" \" + r + \" \" );\\n        System.out.println(String.format(\"%.8f\", f));\\n}\\n\\n}\\n\\n", "target": "90", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "sf", "scope", "pc", "class", "na", "ser", "com", "ch", "tc", "ss", "sec", " SC", "cur", "asc", "sh", "fc", "Sc", "SC", "bc", "cs", "sw", "app", "src", "lc", "sl", "c", "sp", "str", "acc", "system", "sq", "uc", "soc", "sem", "se", "ner", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "ec", "esc", "ctx", "sync"], "a": ["all", "count", "p", "u", "ad", "auto", "ba", "i", "data", "aa", "z", "A", "pa", "au", "s", "c", "m", "w", "x", "base", "an", "sa", "ada", "ae", "ea", "e", "ai", "alpha", "af", "n", "array", "ca", "ac", "ama", "as", "la", "y", "area", "da", "am", "va", "aj"], "b": ["bi", "count", "p", "mb", "u", "v", "i", "l", "db", "bf", "z", "h", "length", "s", "c", "m", "w", "x", "base", "e", "o", "n", "g", "B", "nb", "j", "k", "sb", "bb", "y", "ab"], "d": ["dm", "sd", "dx", "p", "dn", "u", "ad", "v", "i", "dh", "l", "db", "dat", "wd", "z", "df", "fd", "dc", "c", "ds", "m", "w", "x", "e", "dad", "du", "md", "dd", "n", "ld", "dy", "dl", "dt", "in", "D", "bd", "y", "da", "t"], "r": ["ir", "p", "u", "rb", "pr", "v", "i", "ar", "l", "fr", "ur", "rh", "h", "z", "er", "c", "m", "w", "x", "e", "q", "o", "R", "n", "g", "sr", "rr", "j", "k", "y", "rt", "t"], "f": ["fb", "func", "function", "sf", "p", "u", "v", "i", "l", "fc", "fr", "F", "fs", "bf", "df", "fe", "h", "z", "fn", "fd", "c", "format", "fun", "m", "w", "x", "frequency", "e", " e", "rf", "q", "o", "n", "err", "fa", "y", "fx", "t", "fee"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n    \\n    public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    String str1 = in.nextLine();\\n    String str2;\\n    int num1 = Integer.parseInt(str1);\\n    int num2, max, min;\\n    max = 0;\\n    min = 0;\\n    long sum = 0;\\n    \\n    for (int i=0; i<num1; i++)\\n        {\\n        str2 = in.next();\\n        num2 = Integer.parseInt(str2);\\n        sum += num2;\\n        if (i == 0)\\n        {\\n        max = num2;\\n        min = num2;\\n        }else\\n        if (num2 > max){max = num2;}else\\n        if (num2 < min){min = num2;}\\n        }\\n    System.out.println(min +\" \"+ max +\" \"+ sum);\\n    \\n    }\\n    \\n}", "target": "21", "substitutes": {"in": ["isin", "login", "ins", "ln", "din", "ex", "fin", "l", "line", "data", "is", "lin", "std", "r", "con", "init", "io", "win", "info", "input", "stream", "source", "In", "gen", "conn", "inn", "ini", "c", "nin", "str", "socket", "read", "inf", "inner", "rin", "n", "kin", "err", "again", "reader", "exec", "connection", "log", "bin", "readable", "file", "as", "inc", "parser", "IN", "out", "thin", "re"], "str1": ["str81", " str0", "Str01", " str81", "str01", "STR2", "Str2", "Str81", "Str0", "Str1", "STR81", " str01", "string0", "string2", "string1", "string01", "str0", "STR1", "STR01"], "str2": ["intTwo", "strTwo", "striTwo", "StrTwo", "stringTwo", "Str2", "text1", "strB", "st2", "Str1", " strTwo", "strtwo", "int1", " strB", "sttwo", "stsecond", "stringsecond", "stringtwo", "StrB", "string2", "intB", "text2", "int2", "stri2", "stritwo", "stTwo", "textTwo", "strsecond", "strisecond"], "num1": ["n2", " num0", "um0", "sumart", " numart", "sum1", "n1", "n4", "num4", "sum0", "n0", " num4", "um2", "numart", "sum2", "um1", "um4", "num0", "nart"], "num2": ["umi82", "gen2", "id4", " num52", "index52", "umtwo", "num52", "um72", " numTwo", "num4", "miss52", "num62", "nam2", "index2", "um2", "int62", "nu02", "um1", "number2", "num22", "miss2", "num3", "str3", "pos62", "gentwo", "umi72", "strdb", "umi62", "umdb", "param2", "paramTwo", "umi1", " num02", " num4", "umiB", "gen82", "num256", "numbertwo", "indextwo", "nam1", "num96", "idTwo", "number96", " numB", "param4", "um32", "num82", "param32", "postwo", "index82", "umi2", "nom2", "um3", " num72", "pos96", "num02", " numtwo", "nu2", "nom22", "nu22", "numdb", "misstwo", "miss82", "numtwo", "inctwo", " num3", "inttwo", "int82", "umitwo", "nu256", "int2", " num82", "gen62", " num256", "idtwo", "inc62", "inc96", "num72", "number62", "nom02", "id2", "paramtwo", "param1", "umB", "numB", "num32", " numdb", "inc2", "nom256", " num22", "numTwo", " num32", "pos2"], "max": ["head", "self", "div", "total", "parent", "conf", "press", "ace", "chain", "count", "p", "now", "size", "patch", "id", "num", "ad", "name", "power", "part", "right", "diff", "start", "init", "temp", "end", "first", "last", "c", "ax", "key", "az", "index", "w", "x", "est", "q", "act", "Max", "n", "rank", "ca", "with", "plus", "cycle", "k", "step", "no", "mod", "parse", "scale", "from", "wrap", "MAX", "shape", "range", "cache", "out", "med", "can", "default"], "min": ["div", "unit", "low", "just", "size", "mon", "id", "num", "next", "span", "mins", "date", "sub", "version", "page", "mini", "pre", "name", "part", "sign", "partial", "diff", "start", "sort", "init", "sin", "value", "temp", "len", "first", "cm", "key", "index", "m", "MIN", "skip", "miss", "shift", "n", "dim", "small", "mit", "pos", "step", "scale", "from", "mean", "mid", "lock", "range", "Min", "am", "default", "med"], "sum": ["um", "div", "total", "conf", "unit", "count", "size", "na", "gram", "num", "span", "summary", " count", "average", "vol", "mini", "sort", "sign", " Sum", "diff", "fill", "part", "use", "info", "sim", "len", "cal", "lim", "key", "weight", "index", "sa", "cum", "alpha", "miss", "comment", "Sum", "stat", "mit", " summ", "fat", "sup", "norm", "up", "scale", "bin", "mean", "missing", "ma", "out", "med"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "mini", "io", "z", "f", "ci", "vi", "ui", "c", "ini", "index", "m", "phi", "x", "mu", "uri", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "ii", "b", "zi", "limit", "li", "j", "chi", "ti", "fi"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    private static Scanner scanner;\\n    private static final int HH_TIME = 3600;\\n    private static final int MM_TIME = 60;\\n\\n    public static void main(String[] args) {\\n        scanner = new Scanner(System.in);\\n        System.out.println(timeChangeHMS(scanner.nextInt()));\\n    }\\n\\n    /*\\n     * \u79d2\u6570\u304b\u3089HH:MM:SS\u3067\u5909\u63db\u3057\u307e\u3059\u3002\\n     */\\n    private static String timeChangeHMS(int input) {\\n        Integer hh = 0;\\n        Integer mm = 0;\\n        Integer ss = 0;\\n        if (input >= HH_TIME) {\\n            Integer mm_s = 0;\\n            hh = input / HH_TIME;\\n            mm_s = input % HH_TIME;\\n            if (mm_s >= MM_TIME) {\\n                mm = mm_s / MM_TIME;\\n                ss = mm_s % MM_TIME;\\n            } else {\\n                ss = mm_s;\\n            }\\n        } else {\\n            mm = input / MM_TIME;\\n            ss = input % MM_TIME;\\n        }\\n        return hh.toString() + \":\" + mm.toString() + \":\" + ss.toString();\\n    }\\n}", "target": "84", "substitutes": {"scanner": [" scaner", "Scaninner", "scaninner", "anner", "Scaniner", "caner", "catler", " Scaner", " Scanner", "scaniner", " Scanler", "caninner", "cater", "ScanNER", "Scanler", " Scaniner", "scancher", "anninner", "scaner", "Scancher", "scanNER", " scancher", "Scaner", "annner", "canNER", " scaniner", "catcher", "annNER", "canner", "Scanner", "catner", "scanler", " scanler"], "HH_TIME": ["MM_Time", "hh_time", "HHNSIZE", "HHPTIME", "HHNtime", "HH_Time", "HHHH_WORK", "HHNTIME", "hh_TIME", "HH_SPEC", "MM_time", "HHPTime", "HHHH_Time", "HHPtime", "hh_Time", "HH_SIZE", "MMNTime", "HHNTime", "hh_DATA", "MM_SIZE", "MMNTIME", "HHHH_time", "HHPSIZE", "MMNSIZE", "HHHH_TIME", "MM_SPEC", "MMNtime", "HH_time", "HH_WORK", "HH_DATA"], "MM_TIME": ["MMVALUSH", "HH_Time", "MW_time", "HH_TYPE", "MM_RT", "MMVALTime", "MM_time", "MW_TYPE", "MMLTIME", "HH_time", "MM_Time", "MMVALRT", "MML2000", "HH_2000", "MMVALTIME", "MM_FILE", "HH_FILE", "HH_MODE", "HH_RT", "MM_2000", "MW_TIME", "MM_MODE", "MM_TYPE", "HH_USH", "MM_USH", "MMLTime", "MW_Time", "MMLtime"], "input": ["this", "integer", "num", "multi", "python", "select", "a", "get", "instance", " Input", "format", "output", "img", "Input", "inner", "amp", "insert", "address", "inc", "audio", "um", "client", "yet", "i", "ahead", "unknown", "value", "method", "temp", "length", "image", "list", "ffff", "element", "again", "field", "up", "qq", "file", "IN", "array", "self", "amount", "keep", "month", "raw", "inf", "work", "form", "in", "now", "null", "auto", "inside", "request", "source", "m", "config", "xxx", "accept", "current"], "hh": ["zz", "php", "MM", "how", "hz", "mph", "gh", " ah", "tz", "uh", "hhhh", "rh", "ht", "bh", "ph", "h", "gg", "Hmm", "mmmm", "uid", "hhh", "HHHH", "hess", "ssl", "ww", "xx", "hp", "xxx", "hs", "hw", " HH", "HH", "ih", "yy", "hm", "micro", "qq", "hl", "pp", "oh", "dh", "ogh", "mmm"], "mm": ["nn", "um", "zz", "mc", "ml", "MM", "ami", "mb", "mon", "mph", "tom", "tz", "kk", "mass", "ph", "mo", "mma", "Hmm", "medium", "mmmm", "cm", "ms", "ds", "hhh", "pm", "ym", "m", "mu", "memory", "mp", "xxx", "md", "dd", "mi", "yy", "em", "amp", "hm", "time", "sm", "micro", "mx", "mod", "mn", "ma", "mag", "my", "ll", "mem", "mmm"], "ss": ["zz", "nn", "rss", "uss", "sk", "ts", "SS", "ssh", "\u00df", "rs", "ks", "si", "tz", "sh", "sn", "ls", "ws", "ys", "iss", "sin", "cs", "sw", "ps", "bs", "ess", "sl", "s", "ms", "vs", "ds", "sp", "hess", "mmm", "sq", "ses", "ssl", "xxx", "ns", "sys", "se", "yy", "su", "css", "spec", "xx"], "mm_s": ["mmPe", "mmDoctimes", "mmIdi", "mmIdf", "mm2e", "mmm_sum", "mm_d", "mm_h", "mm_S", "mmm_d", "mm_ses", "mmPs", "mma_times", "mm2is", "mmJi", " mm_is", "mmPsin", "mmDoci", "mm2s", " mm2e", "mma_sum", "mm_sum", " mm_sum", "mmJtimes", " mm_d", "mmIds", "mm_e", "mm5d", "mma_i", "mmJsum", "mm5s", " mm_sin", "mmm_i", " mm2is", "mem_is", "mm_f", "mma_s", "mm_is", " mm2sin", "mmIdsum", "mem_ses", "mm_times", "mmPis", "mm_sin", " mm_e", "mm5h", "mmaJi", "mmDocs", "mmDocsum", " mm_S", "mmm_h", " mm2s", "mem_s", "mm_i", "mmaJs", "mmJs", "mmaJtimes", "mmm_f", "mm5i", "mmm_s", "mem_i", "mmaJsum", "mm2sin"]}}
{"code": "import java.util.*;\\nimport java.util.TreeMap;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int cnt = 1;\\n    int min = sc.nextInt();\\n    for (int i = 0; i < N - 1; i++) {\\n      int next = sc.nextInt();\\n      if (min > next) {\\n        cnt++;\\n      }\\n      min = Math.min(min, next);\\n    }\\n    System.out.println(cnt);\\n  }\\n}\\n", "target": "229", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "core", "ser", "ch", "ss", " SC", "cur", "asc", "search", "sh", "Sc", "SC", "ct", "cs", "bc", "sw", "src", "lc", "ci", "c", "cer", "sp", "system", "sq", "uc", "soc", "sr", "se", "ner", " Sc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "cont", "parser", "ec", "esc", "ctx", "cus", "sync"], "N": ["MN", "Len", "S", "Num", "Count", "NL", "C", "J", "M", "Size", "NN", "Q", "P", "T", "Ni", "I", "NC", "L", "R", "n", "B", "Ne", "V", "K", "ND", "D", "NT", "O", "NS", "Ns", "G", "NE", "NI"], "cnt": ["rcnext", "cct", "cNT", "lcnt", "count", "Count", "scount", "rcct", "scno", " count", "fnext", "cn", "dcn", " cnn", "CNT", " cNT", "cnext", "rcrt", " cct", "lcn", "lcno", "fnt", "Cnn", "rcnt", "crt", " crt", " cnext", "cnn", "cno", "nnn", "scnt", "nNT", "scn", "nnt", "lcount", "nount", "dcount", "frt", "fct", "dcno", "dcnt", "Cnt"], "min": ["round", "div", "none", "call", "unit", "don", "ni", "low", "p", "val", "size", "patch", "na", "id", "minimum", "slice", "span", "mins", "keep", "sub", "average", "mini", "pre", "sort", "partial", "diff", "part", "start", "init", "sin", "lower", "first", "last", "pid", "sum", "amin", "pm", "ne", "key", "index", "pop", "rand", "MIN", "max", "skip", "act", "shift", "n", "prev", "mit", "small", "limit", "li", "current", "pos", "step", "sol", "scale", "Mini", "mn", "mod", "mean", "mid", "pri", "dec", "section", "Min", "ind", "default"], "i": ["bi", "hi", "pi", "ni", "p", "it", "u", "id", "ji", "xi", "v", "si", "ix", "data", "start", "init", "info", "f", "ci", "ui", "ini", "index", "x", "uri", "ip", "di", "I", "ai", "gi", "inner", "n", "ii", "b", "li", "j", "oi", "in", "chi", "ind", "ti"], "next": ["complete", "this", "seq", "offset", "second", "ni", "now", "future", "size", "id", "ise", " Next", "Next", "path", "ng", "start", "valid", "iss", "first", "last", "ne", "forward", "eni", "frame", "max", "success", "prev", "li", "latest", "current", "vious", "open", "ner", "step", "sequence", "area", "later", "missing", "dot"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void insertionSort(int[] array, int n) {\\n\t\tint v, j;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tv = array[i];\\n\t\t\tj = i - 1;\\n\t\t\twhile (j >= 0 && array[j] > v) {\\n\t\t\t\tarray[j + 1] = array[j];\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\tarray[j + 1] = v;\\n\t\t\tfor (int k = 0; k < n; k++) {\\n\t\t\t\tSystem.out.print(array[k]);\\n\t\t\t\tif (k < n - 1) {\\n\t\t\t\t\tSystem.out.print(\" \");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t}\\n\t\\n\tvoid run() {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] array = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tarray[i] = sc.nextInt();\\n\t\t}\\n\t\tinsertionSort(array, n);\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().run();\\n\t}\\n}\\n", "target": "69", "substitutes": {"array": ["integer", "archive", "hash", "map", "route", "a", "answer", "row", "app", "instance", "feature", "alpha", "result", "analysis", "group", "as", "address", "area", "section", "error", "audio", "function", "project", "allow", "data", "value", "collection", "length", "air", "image", "order", "model", "index", "list", "base", "except", "element", "number", "database", "record", "view", "arr", "average", "search", "batch", "arrow", "pair", "x", "system", "work", "expression", "form", "ash", "shape", "append", "coll", "parent", "api", "table", "move", "align", "the", "auto", "Array", "sample", "string", "object", "ray", "range", "am", "option"], "n": ["nn", "all", "nc", "nt", "ni", "p", "size", "dn", "u", "num", "nan", "ln", "N", "cn", "l", "sn", "name", "r", "init", "z", "un", "nl", "len", "h", "nr", "f", "fn", "conn", "s", "c", "ne", "m", "w", "x", "e", "node", "o", "d", "ns", "g", "b", "nw", "network", "nb", "net", "no", "in", "number", "y", "en", "t"], "v": ["p", "val", "u", "l", "a", "sv", "r", "value", "z", "h", "f", "vi", "c", "uv", "vv", "m", "x", "ve", "w", "e", "q", "o", "lv", "d", "g", "ii", "b", "va", "iv", "V", "y", "t"], "j": ["dj", "jj", "jc", "p", "size", "u", "J", "qi", "ji", "jp", "ix", "l", "ij", "z", "h", "aj", "f", "s", "c", "key", "index", "m", "x", "e", "jet", "ja", "uj", "ie", "q", "o", "d", "g", "ii", "b", "dy", "li", "js", "obj", "kj", "pos", "y", "jl", "jen", "ind", "t", "jo"], "i": ["bi", "im", "pi", "ori", "ni", "iu", "p", "u", "id", "qi", "xi", "ji", "si", "ix", "l", "mini", "is", "ik", "start", "io", "init", "z", "h", "f", "ci", "ui", "c", "ini", "index", "eni", "phi", "x", "mu", "ip", "di", "e", "I", "ie", "ai", "o", "gi", "d", "mi", "inner", "ii", "b", "g", "li", "oi", "yi", "in", "y", "my"], "k": ["ky", "sk", "mk", "p", "u", "id", "ck", "ko", "ad", "ke", "ks", "kh", "kick", "l", "kk", "ik", "block", "z", "h", "row", "end", "dk", "ok", "f", "ek", "c", "key", "ak", "w", "x", "ku", "kw", "kr", "q", "o", "unk", "d", "kn", "g", "b", "kl", "kid", "K", "work", "uk", "kat", "y", "ki", "spec"], "sc": ["cl", "sche", "mc", "nc", "sci", "scope", "pc", "ch", "sec", "ss", "tc", " SC", "cur", "sh", "Sc", "SC", "ct", "scl", "cs", "bc", "co", "cv", "lc", "ci", "c", "cer", " scr", "sp", "ec", "system", "sq", "uc", "sr", "cle", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "out", "esc", "sync"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\npublic static void main(String[] args){\\nScanner sc = new Scanner(System.in);\\nint N = sc.nextInt();\\nint T  = sc.nextInt();\\nint A = sc.nextInt();\\nint H[] = new int[N];\\nfor(int i =0;i<N;i++){\\nH[i] = sc.nextInt();\\n}\\n\\ndouble min  = H[0];\\nint minidx = 0;\\nfor(int i = 0;i < N;i++){\\ndouble tem = Math.abs(A -(T - H[i]*0.006));\\nif(min>tem){\\nmin = tem;\\nminidx = i;\\n}\\n}\\nSystem.out.println(minidx + 1);\\n\\n} \\n}", "target": "210", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "scope", "pc", "core", "ser", "ch", "tc", "ss", " SC", "cur", "asc", "search", "sh", "Sc", "SC", "screen", "cs", "bc", "sw", "cv", "cor", "src", "lc", "c", "cer", "sp", "str", "sq", "system", "uc", "soc", "sr", "ca", "cle", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "esc", "ctx", "cus", "sync"], "N": ["Len", "S", "Num", "No", "NA", "NL", "C", "J", "M", "Size", "U", "Y", "F", "NN", "Q", "P", "I", "Ni", "L", "R", "n", "B", "Ne", "V", "K", "D", "NT", "Z", "O", "NS", "Ns", "G", "NE", "W", "E", "X"], "T": ["S", "TH", "C", "J", "M", "U", "Y", "F", "E", "Q", "P", "I", "L", "R", "B", "V", "K", "D", "NT", "O", "Z", "G", "W", "t", "X"], "A": ["S", "NA", "C", "AA", "M", "TA", "LA", "a", "U", "Y", "Array", "F", "AP", "P", "SA", "Ma", "API", "Offset", "I", "At", "alpha", "L", "R", "Alpha", "B", "V", "All", "D", "Z", "AI", "CA", "W", "X"], "H": ["HQ", "Ha", "S", "HM", "HI", "MH", "C", " h", "M", "CH", "FH", "U", "Y", "SH", "F", "HC", "Q", "rh", "h", "EH", "P", "AH", "NH", "Ch", "He", "HT", "Host", "I", "RH", "Head", "L", "HTTP", "HA", "Sum", "B", "HH", "V", "K", "OH", "Z", "O", "HS", "Hi", "G", "HP", "W", "E", "X"], "i": ["hi", "bi", "api", "pi", "ori", "ni", "iu", "p", "slice", "u", "id", "it", "qi", "xi", "ji", "v", "si", "ix", "l", "a", "mini", "ri", "start", "io", "init", "h", "info", "ski", "f", "ci", "ui", "ini", "c", "index", "eni", "phi", "x", "uri", "ip", "e", "di", "I", "esi", "ie", "ai", "o", "gi", "mi", "n", "ii", "b", "zi", "cli", "li", "j", "oi", "yi", "in", "chi", "y", "ki", "ti", "fi"], "min": ["none", "conf", "unit", "don", "p", "mon", "na", "po", "a", "pool", "mini", "pre", "sort", "part", "partial", "sign", "init", "block", "h", "lower", "temp", "lim", "s", "sum", "amin", "ini", "rain", "ax", "m", "x", "base", "sa", "MIN", "max", "ai", "miss", "d", "ain", "n", "act", "small", "dim", "mit", "limit", "mine", "wa", "pos", "in", "Mini", "sal", "pri", "area", "Min", "am", "sol", "sun", "default"], "minidx": ["minideX", "minidz", "minidX", "minidex", " minidex", "minIdy", "minIdx", "minidj", "minIdj", "minidy", "minindexz", "minIDy", "minindexj", "Minidexc", " minidy", "minidxb", "minindexx", "Minidexb", " minidey", "minIDx", "minIdX", "MinIdj", "Minidex", "minidej", "minIdxc", "minidxc", " minidez", "Minidxb", "MinIdx", " minidX", "minidexb", "minIDxb", "Minidxc", "minIdz", " minideX", "minIDxc", "minidez", "MinidX", "minindexX", "Minidj", "MinIdX", "Minidx", "Minidz", " minidz", "minIdxb", "minidey", "minidexc", "Minidey", "MinIdz", "Minidy"], "tem": ["um", "tmp", "te", "see", "aki", "mon", "emp", "num", "tc", "tom", "TA", "mini", "mm", "Temp", " param", "ski", "temp", "lim", "Tem", " temp", "stem", "ui", "sum", "tm", "base", "ty", "sa", "tim", "ta", "lam", "small", "sem", "tre", "em", "se", "tan", "sm", "term", "beta", "template", "tri", "ki", "area", "tt", "ema", "t", "mem"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.List;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n\\n        InputStreamReader is = new InputStreamReader(System.in);\\n        BufferedReader reader = new BufferedReader(is);\\n\\n        List<String> mylist = new ArrayList<>();\\n\\n        // \u6a19\u6e96\u5165\u529b\u304b\u3089\u306e\u5024\u3092\u5909\u6570strinput\u306b\u4ee3\u5165\\n        String strinput = reader.readLine();\\n\\n        while (strinput != null) {\\n\\n            mylist.add(strinput);\\n            strinput = reader.readLine();\\n\\n        }\\n\\n        String arr01[] = mylist.get(0).split(\" \");\\n\\n        int n = Integer.valueOf(arr01[0]);\\n        int k = Integer.valueOf(arr01[1]);\\n        int cnt = 0;\\n        while (n >= 1) {\\n//            System.out.println(n / k);\\n            n = n / k;\\n            cnt += 1;\\n        }\\n\\n        System.out.println(cnt);\\n\\n    }\\n}\\n", "target": "219", "substitutes": {"is": ["ir", "was", "iris", "Is", "iri", "IS", "id", "serv", "i", "ar", "ri", "its", "r", "fs", "iss", "io", "init", "stream", "input", "src", "s", "os", "ui", "us", "isa", "or", "x", "ip", "lis", "ios", "ai", "inner", "isi", "util", "iv", "in", "ais", "ris", "as", "cms", "rx", "war", "has"], "reader": ["parent", "buffer", "it", "ser", "r", "init", "iter", "info", "row", "input", "io", "ler", "er", "f", "instance", "image", "or", "x", "inner", "content", "object", "handler", "in", "type", "parser", "read", "array", "Reader"], "mylist": ["somelist", " myList", "MyLIST", "MyList", "someList", "myList", "myLIST", "Mylist", " myLIST", "someLIST"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int[] a = new int[n];\\n    for(int i = 0; i<n; i++){\\n      a[i] = sc.nextInt();\\n    }\\n    int count = selectionSort(a,n);\\n    for(int i = 0; i<n; i++){\\n      if(i == n-1){\\n        System.out.println(a[i]);\\n      }else{\\n        System.out.print(a[i] + \" \");\\n      }\\n    }\\n    System.out.println(count);\\n  }\\n\\n  public static int selectionSort(int[] a, int n){\\n    int count = 0;\\n    for(int i = 0; i<n; i++){\\n      int minj = i;\\n      for(int j = i; j<n; j++){\\n        if(a[j]<a[minj]){\\n          minj = j;\\n        }\\n      }\\n      int free = a[i];\\n      a[i] = a[minj];\\n      a[minj] = free;\\n      if(a[i] != a[minj]){\\n        count++;\\n      }\\n    }\\n    return count;\\n  }\\n}", "target": "199", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sk", "pc", "na", "ch", "sec", "ss", " SC", "si", "sh", "Sc", "SC", "sn", "cs", "bc", "sw", "src", "cor", "cv", "lc", "ci", "cer", "c", " scr", "sp", "sa", "system", "sq", "uc", "sr", "ca", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "out", "esc", "cus"], "n": ["nn", "nc", "nt", "p", "size", "dn", "u", "num", "nan", "N", "ln", "v", "cn", "l", "sn", "r", "z", "len", "f", "conn", "s", "c", "ne", "m", "w", "x", "an", "e", "o", "d", "ns", "b", "network", "nb", "ner", "net", "k", "no", "in", "number", "y", "en", "t"], "a": ["ana", "self", "div", "empty", "p", "ia", "u", "na", "za", "auto", "ba", "ar", "working", "l", "data", "ao", "aa", "z", "A", "ha", "aj", "aux", "oa", "tta", "f", "au", "pa", "s", "c", "ga", "app", "an", "ata", "x", "sa", "ea", "ae", "e", "active", "ai", "o", "alpha", "d", "ca", "b", "ac", "qa", "aaa", "work", "wa", "exec", "sup", "ama", "as", "la", "y", "area", "ab", "da", "missing", "ma", "off", "error", "am", "va", "array"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "ami", "u", "id", "multi", "qi", "xi", "ji", "v", "anti", "si", "auto", "ix", "l", "mini", "is", "ri", "ik", "my", "start", "io", "init", "info", "z", "f", "ci", "ui", "ini", "key", "c", "index", "eni", "phi", "x", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "cli", "li", "oi", "yi", "in", "y", "ki", "ind", "ti", "fi"], "count": ["all", "counter", "total", "offset", "call", "parent", "flag", "nt", "low", "now", "Count", "size", "val", "empty", "id", "num", "allow", "l", "lag", "find", "diff", "start", "value", "z", "info", "len", "length", "f", "last", "c", "sum", "key", "check", "weight", "index", "match", "depth", "list", "base", "process", "e", "label", "left", "max", "code", "skip", "err", "no", "child", "found", "type", "number", "cache", "member", "error", "out", "coll"], "minj": ["smallo", "minz", "paramji", " minji", " minz", "minji", "Minjo", "smallj", "maxi", "ainji", "manJ", "inji", "Minz", "minja", "inz", " mini", "maxjo", "manji", "mini", "donJ", "mino", "maxji", "smallji", "parami", "signji", " minr", "donr", "priji", "ainja", "ini", "prij", "Mino", "minJ", "Minj", "donj", "ainj", "minr", "doni", "signja", "prii", "smallja", "maxz", "prir", "donja", "prio", "signo", "signj", " mino", "Mini", "Minji", "donji", "priz", "ainJ", "minjo", "maxj", "manja", "manj", "dono", "paramjo", "inj", "paramj"], "j": ["dj", "jj", "jc", "p", "oj", "it", "u", "J", "qi", "bj", "ji", "v", "jp", "si", "l", "ij", "part", "start", "z", "aj", "f", "br", "c", "ui", "key", "index", "x", "e", "ja", "uj", "ie", "q", "o", "g", "ii", "b", "li", "obj", "k", "js", "je", "y", "ind", "jo"], "free": ["complete", "all", "total", "offset", "empty", "hide", "size", "stable", "available", "fr", "use", "ree", "ef", "un", "fe", "info", "f", "ne", "weight", "floor", "ea", "left", "node", "code", "common", "err", "util", "open", "current", "frac", "found", "Free", "FREE", "used", "shared", "close", "random", "release", "fee"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main\\n{\\n\tpublic static void main(String [] Args)\\n\t{\\n\t\tScanner in=new Scanner(System.in);\t\t\\n\t\tlong a=in.nextLong();\\n\t\tlong b=in.nextLong();\\n\t\tlong c=in.nextLong();\\n\t\tlong d=in.nextLong();\\n\t\tlong g=gcd(c,d);\\n\t\tlong q=c*d/g;\\n\t\tlong ans=b/c-(a-1)/c;\\n\t\tans=ans+b/d-(a-1)/d;\\n\t\tans=ans-b/q+(a-1)/q;\\n\t\tans=b-a-ans+1;\\n\t\tSystem.out.println(ans);\\n\t}\\n\t\\n\tpublic static long gcd(long a,long b)\\n\t{\\n\t\tif(a%b==0)\\n\t\t\treturn b;\\n\t\treturn gcd(b,a%b);\\n\t}\\n}\\n", "target": "9", "substitutes": {"Args": ["ams", "uments", "Command", "line", "Path", "Cmd", "Array", "GS", "A", "Parts", "params", "arg", "Ext", "Input", "str", "Main", "Str", "Out", "gs", "Arg", "Flag", "G", "Ex", "Line", "Name", "Parser"], "in": ["this", "isin", "login", "ins", "ln", "din", "arin", "ex", "inside", "i", "line", "l", "data", "is", "into", "lin", "r", "init", "source", "input", "f", "In", "er", "s", "gen", "ini", "ax", "inn", "user", "conn", "OUT", "nin", "socket", "between", "token", "min", "gin", "inf", "inner", "rin", "n", "kin", "pass", "again", "ner", "reader", "sb", "exec", "scan", "connection", "pin", "log", "bin", "readable", "vin", "as", "inc", "conv", "IN", "out", "thin"], "a": ["ana", "p", "ia", "u", "na", "sha", "ad", "za", "v", "ba", "i", "l", "mA", "aa", "cca", "z", "A", "aux", "pa", "f", "au", "s", "ga", "at", "an", "x", "w", "m", "sa", "ae", "ea", "e", "ada", "ai", "alpha", "o", "af", "n", "ca", "ac", "wa", "aaa", "ama", "fa", "as", "y", "area", "ab", "da", "la", "ma", "am", "va", "aj"], "b": ["fb", "bi", "p", "u", "rb", "ad", "binary", "v", "i", "ba", "l", "ib", "db", "cb", "bis", "r", "bf", "bh", "aa", "be", "z", "h", "lb", "bs", "f", "eb", "s", "m", "w", "x", "an", "base", "e", "o", "big", "abs", "n", "B", "body", "nb", "j", "obj", "k", "sb", "bb", "bot", "y", "ab", "ob", "boot"], "c": ["p", "C", "u", "ad", "ch", "v", "cn", "i", "l", "cu", "r", "z", "h", "cs", "f", "lc", "dc", "s", "m", "w", "x", "cy", "an", "e", "cf", "o", "n", "ca", "ac", "k", "cd", "cc", "y", "ec"], "d": ["p", "u", "ad", "v", "i", "l", "db", "r", "z", "h", "df", "f", "dc", "s", "ds", "m", "w", "x", "an", "e", "o", "dd", "n", "ld", "dy", "dt", "j", "D", "cd", "y", "da", "t"], "g": ["p", "ia", "u", "ad", "v", "i", "l", "r", "h", "z", "gg", "f", "s", "ga", "m", "w", "x", "an", "e", "o", "gs", "n", "gam", "ac", "j", "group", "y", "G", "sg", "ann"], "q": ["p", "u", "ad", "ch", "v", "i", "sh", "qs", "l", "dq", "r", "qu", "Q", "z", "h", "f", "s", "m", "w", "x", "an", "e", "sq", "n", "ac", "qa", "k", "y", "da", "t", "query"], "ans": ["ars", "ads", "ins", "ks", "lan", "ba", "powers", "rules", "eps", "anges", "cs", "s", "os", "ds", "ags", "cons", "ANS", "ca", "gan", "as", "ons", "amps", "cus", "p", "ia", "ad", "es", "cb", "aa", "bc", "ci", "an", "aid", "n", "anc", "bb", "lang", "ays", "ann", "ams", "anas", "na", "nas", " means", "x", "ai", "ang", "dd", "gs", "ats", "qa", "can", "ana", "ands", "sk", "aned", "gz", "aus", "aces", "ions", "ls", "gd", "vs", "cas", "ants", "ns", "fa", "outs", "cc", "sg", "ab"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint k = scan.nextInt();\\n\t\tint[] p = new int[n];\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tp[i] = scan.nextInt();\\n\t\t}\\n\t\tArrays.sort(p);\\n\t\tint sum = 0;\\n\t\tfor(int i=0; i<k; i++){\\n\t\t\tsum += p[i];\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t}\\n}\\n", "target": "41", "substitutes": {"scan": ["nn", "see", "connect", "spin", "walk", "core", "slice", "na", "ser", "server", "span", "v", "run", "search", "l", "fan", "sort", "sign", "use", "r", "con", "car", "sin", "nl", "query", "gen", "conn", "plan", "chan", "an", "system", "skip", "ignore", "network", "se", "ner", "reader", "pin", "in", "parse", "serial", "Scan", "clean", "san", "ans", "pan", "look", "sc", "out", "can", "ann", "sync"], "n": ["nn", "nc", "nt", "u", "num", "N", "ln", "v", "l", "sn", "r", "z", "nl", "len", "f", "conn", "s", "c", "m", "w", "x", "e", "o", "d", "ns", "kn", "b", "network", "nb", "ner", "j", "net", "no", "in", "number", "y", "en", "t"], "k": ["sk", "mk", "u", "ke", "ks", "km", "v", "kick", "l", "ik", "z", "h", "ok", "f", "c", "key", "ak", "m", "w", "x", "e", "kw", "q", "o", "d", "kn", "j", "K", "in", "y", "ki"], "p": ["py", "pi", "patch", "u", "v", "jp", "a", "ap", "data", "l", "point", "part", "progress", "pre", "r", "h", "P", "lp", "ps", "cp", "params", "pair", "s", "c", "m", "x", "pe", "sp", "ip", "np", "e", "per", "fp", "q", "o", "op", "d", "g", "vp", "tp", "j", "parse", "pp", "y", "t", "array"], "i": ["bi", "hi", "pi", "ni", "iu", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "si", "ix", "is", "ik", "ri", "io", "init", "info", "abi", "f", "lc", "ci", "ui", "ini", "eni", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "ii", "zi", "li", "j", "oi", "chi", "y", "ti", "fi"], "sum": ["um", "div", "total", "cat", "py", "share", "amount", "offset", "conf", "empty", "count", "size", "cost", "num", "summary", "si", "average", "vol", "loss", "sh", "cur", "sort", "part", "diff", "mass", "error", "spread", "style", "weight", "sp", "sa", "cum", "ul", "min", "alpha", "miss", "success", "Sum", "net", "fat", "frac", "up", "parse", "scale", "bin", "mean", "doc", "dev", "always", "out", "fee", "mem"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scn = new Scanner(System.in);\\n\t\tArrayList<Character> caca = new ArrayList<Character>();\\n\t\tString n = scn.next();\\n\t\tfor(int i = 0;i<n.length();i++) {\\n\t\t\tif(n.charAt(i)=='1')caca.add('1');\\n\t\t\telse if(n.charAt(i)=='0')caca.add('0');\\n\t\t\telse if(n.charAt(i)=='B') {\\n\t\t\t\tif(!caca.isEmpty())caca.remove(caca.size()-1);\\n\t\t\t}\\n\t\t}for(int i = 0;i<caca.size();i++)System.out.print(caca.get(i));\\n\t\tSystem.out.println();\\n\t\tscn.close();\\n\t}\\n}", "target": "151", "substitutes": {"scn": ["crn", "crner", "ucnn", "scner", "scrn", "ucN", "scns", "SCner", "scN", "Scnn", "SCn", "SCr", "ucrn", "Scn", "Scrn", " scr", "ucn", "ScN", "SCnn", "SCN", "SCns", "Scr", "scnn", "crns", "Scns", " scrn", "crr", "Scner", "scr", " scN", " scnn"], "caca": ["Cacas", "Cacho", "scuca", "Casa", "lcaca", "scaca", "bacas", "lcacl", "naca", "arcacas", "scamac", "scca", "Caca", " cacl", "nac", "lcuca", "arcacho", "Cca", " cca", "cacan", " cacan", "lcca", "nuca", "cca", "camac", " camac", "arcuca", "Cacca", " casa", "bac", "cuca", "scacca", "Cacl", "scacho", "Cacan", "cacho", "arcacan", " cacca", "scac", " cacho", "buca", " cacas", "scasa", "Cuca", "arcca", "cac", "cacca", "casa", "cacl", "cacas", "baca", "Cac", "namac", " cac", " cuca", "arcaca", "Camac"], "n": ["nn", "none", "rn", "enc", "nt", "p", "dn", "u", "na", "nu", "nan", "N", "ln", "v", "cn", "l", "a", "sn", "name", "r", "un", "f", "fn", "conn", "s", "lc", "c", "inn", "t", "ne", "an", "w", "nin", "np", "e", "string", "o", "inner", "ns", "nw", "b", "network", "nb", "net", "no", "in", "not", "non", "gn", "en", "out"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "it", "id", "u", "slice", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "data", "is", "ri", "diff", "part", "io", "init", "h", "info", "temp", "f", "ci", "s", "ui", "ini", "key", "c", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "zi", "li", "j", "oi", "yi", "in", "chi", "y", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tString S = scan.next();\\n\\n\t\tSystem.out.println(S.equals(\"AAA\") || S.equals(\"BBB\")?\"No\":\"Yes\");\\n\t\tscan.close();\\n\\n\t}\\n\\n}\\n", "target": "76", "substitutes": {"scan": ["all", "nn", "cat", "see", "print", "watch", "connect", "walk", "slice", "server", "ln", "ss", "span", "keep", "search", "l", "fan", "start", "row", "end", "app", "inter", "gen", "query", "filter", "chan", "an", "system", "read", "skip", "inner", "n", "result", "ignore", "se", "ner", "open", "reader", "pin", "in", "parse", "Scan", "clean", "san", "ans", "parser", "match", "sc", "out", "can", "ann", "sync"], "S": ["SI", "SS", "SN", "IS", "Sample", "TS", "C", "N", "TEXT", "OS", "SON", "RS", "ASS", "SE", "STR", "SU", "SH", "SC", "Si", "GS", "F", "WS", "A", "P", "Su", "OSS", "Sign", "BS", "s", "SO", "T", "II", "string", "L", "CSS", "B", "INS", "D", "O", "NS", "JS", "DS", "HS", "SIGN", "SR", "DATA", "SK", "CS", "Source", "DES"]}}
{"code": "\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.util.stream.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        //\u30b3\u30fc\u30c9\\n        Scanner scanner = new Scanner(System.in);\\n        Integer n = Integer.parseInt(scanner.next());\\n        Integer d = Integer.parseInt(scanner.next());\\n        Integer[][] x = new Integer[n][d];\\n\\n        for(int i = 0; i < n; i++) {\\n            for(int j = 0; j <d; j++ ) {\\n                x[i][j] = Integer.parseInt(scanner.next());\\n            }\\n        }\\n\\n        int count = 0;\\n        ArrayList<Integer> intList = new ArrayList<Integer>();\\n        for(int i =0; i < n; i++) {\\n            for(int j = i+1; j < n; j++) {\\n                int total = 0;\\n                for(int k = 0; k < d; k++) {\\n                    total += (int) Math.pow(x[i][k] - x[j][k], 2);\\n                }\\n                intList.add(total);\\n            }\\n        }\\n\\n        count = 0;\\n        for (int i = 0; i < intList.size(); i++) {\\n            if ((Math.sqrt(intList.get(i)) == Math.floor(Math.sqrt(intList.get(i))))\\n                    && !Double.isInfinite(Math.sqrt(intList.get(i)))) {\\n                count++;\\n            }\\n        }\\n\\n        System.out.println(count);\\n    }\\n}", "target": "59", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        // \u6574\u6570\u306e\u5165\u529b\\n        int[] a= new int[5];\\n        for(int i=0;i<5;++i){\\n            a[i]=sc.nextInt();\\n        }\\n        int temp=a[0];\\n        int r=0;\\n        for(int i=1;i<5;++i){\\n            if(a[i]%10<temp%10 && a[i]%10!=0){\\n                r+=temp-temp%10+10;\\n                temp=a[i];\\n            }else if(a[i]%10==0){\\n                r+=a[i]-a[i]%10;\\n            }else{\\n                r+=a[i]-a[i]%10+10;\\n            }\\n        }\\n        System.out.println(r+temp);\\n    }\\n}\\n", "target": "63", "substitutes": {"sc": [" ser", " ar", "ss", " SC", " rc", " sl", "Sc", "SC", " res", " scr", " pars", " ans", "sq", " scanner", " surf", " sm", "se", " Sc", "sb", " app", "scan", " src", " arr", " sp", "parser", " scorer", "ann"]}}
{"code": "//package com.daimens.algorithm.june;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\n/**\\n * \\n * @author DemonSong\\n * \\n *         5.GCD and LCM\\n * \\n *         GCD and LCM Time Limit : 1 sec, Memory Limit : 65536 KB Japanese\\n *         version is here GCD and LCM Write a program which computes the\\n *         greatest common divisor (GCD) and the least common multiple (LCM) of\\n *         given a and b.\\n * \\n *         Input Input consists of several data sets. Each data set contains a\\n *         and b separated by a single space in a line. The input terminates\\n *         with EOF.\\n * \\n *         Constraints 0 < a, b ??? 2,000,000,000 LCM(a, b) ??? 2,000,000,000 The\\n *         number of data sets ??? 50 Output For each data set, print GCD and LCM\\n *         separated by a single space in a line.\\n * \\n *         Sample Input 8 6 50000000 30000000 Output for the Sample Input 2 24\\n *         10000000 150000000\\n * \\n *\\n */\\npublic class Main{\\n\\n\tpublic static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String str;\\n        long a,b;\\n \\n \\n        while((str=br.readLine()) != null){\\n            a = Long.parseLong(str.substring(0, str.indexOf(\" \")));\\n            b = Long.parseLong(str.substring(str.indexOf(\" \")+1, str.length()));\\n \\n            System.out.println(gcd(a, b) + \" \" + lcm(a,b));\\n \\n        }\\n    }\\n\t\\n\tprivate static long gcd(long a, long b){\\n\t\tif (b == 0) return a;\\n\t\treturn gcd(b, a % b);\\n\t}\\n\t\\n\tprivate static long lcm(long a, long b) {\\n\t\treturn a * b / gcd(a, b);\\n\t}\\n\\n}", "target": "181", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint a = scan.nextInt();\\n\t\tint b = scan.nextInt();\\n\t\tint c = scan.nextInt();\\n\t\tint d = Math.abs(a-b);\\n\t\tint e = Math.abs(b-c);\\n\t\tint f = Math.abs(c-a);\\n\t\tint g = d+e;\\n\t\tint h = e+f;\\n\t\tint i = f+d;\\n\t\tint min = Math.min(g, h);\\n\t\tmin = Math.min(min, i);\\n\t\tSystem.out.println(min);\\n\t}\\n}\\n", "target": "247", "substitutes": {"scan": ["all", "nn", "connect", "watch", "walk", "slice", "na", "gram", "ser", "serv", "ln", "span", "search", "l", "fan", "sign", "r", "car", "win", "query", "gen", "conn", "report", "plan", "chan", "an", "pack", "begin", "skip", "n", "util", "ignore", "se", "ner", "reader", "pin", "in", "parse", "Scan", "log", "clean", "san", "pan", "look", "sc", "can", "ann", "sync"], "a": ["p", "na", "u", "ad", "ba", "ar", "l", "aa", "A", "s", "ga", "t", "m", "an", "w", "base", "x", "sa", "ae", "ea", "ai", "alpha", "o", "n", "ca", "ac", "fa", "as", "y", "area", "ab", "da", "am", "va", "aj"], "b": ["p", "u", "rb", "ch", "v", "l", "db", "r", "be", "aa", "z", "eb", "s", "m", "w", "x", "o", "n", "B", "j", "k", "bb", "sb", "y", "ab", "t"], "c": ["p", "C", "u", "ch", "v", "l", "cu", "r", "z", "cs", "lc", "ci", "s", "dc", "t", "m", "w", "x", "cf", "q", "o", "n", "ac", "j", "k", "cc", "y", "cy", "ec"], "d": ["dx", "p", "u", "ad", "v", "l", "r", "z", "df", "fd", "s", "dc", "ds", "m", "w", "x", "o", "dd", "n", "dy", "dt", "j", "bd", "cd", "y", "da", "t"], "e": ["p", "u", "v", "l", "el", "ef", "r", "eu", "fe", "z", "t", "m", "w", "x", "pe", "ae", "ec", "o", "n", "j", "k", "ee", "y", "E"], "f": ["sf", "p", "u", "v", "l", "fc", "fr", "r", "F", "z", "fe", "df", "s", "m", "w", "x", "ie", "cf", "q", "o", "n", "j", "k", "y", "t", "fi"], "g": ["hi", "go", "p", "u", "v", "l", "r", "z", "s", "ga", "m", "w", "x", "gm", "q", "o", "gi", "n", "gu", "gs", "j", "k", "ge", "eg", "in", "group", "y", "G", "ig"], "h": ["hi", "p", "u", "gh", "v", "sh", "l", "r", "bh", "ph", "z", "hd", "s", "m", "w", "x", "q", "o", "hs", "n", "ih", "j", "k", "H", "y", "oh", "t"], "i": ["hi", "bi", "p", "iu", "u", "qi", "v", "si", "l", "r", "io", "z", "ci", "s", "vi", "ini", "m", "w", "phi", "x", "I", "ie", "o", "gi", "mi", "n", "ii", "li", "j", "k", "yi", "y", "t"], "min": ["val", "mins", "diff", "r", "bat", "init", "s", "max", "limit", "ring", "me", "type", "local", "p", "id", "minimum", "next", "ise", "version", "mini", "value", "sum", "filter", "index", "sa", "n", "nice", "stat", "j", "pos", "js", "scale", "unit", "don", "less", "minute", "po", "sec", "span", "v", "average", "search", "part", "sign", "partial", "sin", "lower", "len", "pm", "weight", "x", "ai", "in", "Mini", "mean", "dec", "close", "Min", "round", "just", "sub", "emin", "sort", "ng", "iss", "start", "un", "spread", "amin", "m", "MIN", "skip", "small", "sol"]}}
{"code": "import java.util.Scanner;\\n \\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String str = sc.nextLine();\\n    String[] strAry = str.split(\"\");\\n    \\n    int count = 0;\\n    if(strAry[0].equals(\"1\")) count++;\\n    if(strAry[1].equals(\"1\")) count++;\\n    if(strAry[2].equals(\"1\")) count++;    \\n    System.out.println(count);\\n    \\n    return;\\n  }\\n}", "target": "165", "substitutes": {"sc": ["cl", "sci", "nc", "nt", "scope", "pc", "class", "com", "sec", "ss", " SC", " rc", "sh", "l", "Sc", "SC", "r", "bc", "desc", "sw", "src", "cs", "sl", "c", " scr", "sp", "acc", "st", "ec", "uc", "g", "se", "ner", " Sc", "exec", "scan", "osc", " cur", "rc", "cc", "cr", "proc", "spec", "out", "esc", "sync"], "str": ["div", "status", "p", "tr", "pr", "arr", "strings", "line", "STR", "l", "data", "fr", "name", "r", "iter", "input", "char", "f", "br", "s", "sl", "c", "output", "list", "sp", "st", "text", "string", "Str", "result", "sr", "err", "pass", "obj", "exec", "in", "txt", "cr", "doc", "read", "out"], "strAry": ["strArys", "strDoy", "strAcy", " strTay", "arrARY", "strAsry", "strArry", "arrArRY", "strAsoy", "strTrys", "strArck", "strDrys", " strDoy", "strArcy", "strUoy", " strDry", "strAroy", "strNrys", "StrAry", "strAsrys", "arrArries", "strUck", " strArys", "strArrayries", "arrAry", "arrArry", "strUrys", "strDry", " strAries", "strAay", "strUcy", "arrArrys", "strArries", "StrArrys", "strArrayry", "strDries", " strAoy", "strAoy", "strNries", "strURY", "strAries", "StrArry", "strTRY", "strArrayrys", "strUry", " strToy", "arrAries", "strAsries", "strArrys", "strARY", " strDries", "strTcy", "strAck", "StrArys", "strUay", "strTay", "strTry", "arrArys", " strTry", "StrArck", "StrAck", "strToy", "strNRY", "strAray", "strTck", "StrArRY", "strArrayRY", " strTcy", "strArRY", "StrARY", " strAay", " strAcy", "strNry", " strDrys"], "count": ["all", "counter", "total", "call", "age", "Count", "size", "val", "more", "id", "test", "num", "now", "show", "allow", "i", "path", "data", "name", "part", "start", "iter", "info", "len", "first", "length", "c", "sum", "key", "handle", "weight", "index", "depth", "base", "list", "full", "text", "col", "left", "code", "n", "time", "work", "child", "no", "found", "type", "group", "level", "number", "cache", "match", "coll"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\npublic static void main(String[] args) {\\n\t\t\\n\t\tScanner keyboard = new Scanner(System.in); \\n\t\t\\n\t\tint X  = keyboard.nextInt();\\n\t\tint Y  = keyboard.nextInt();\\n\\n\t\tint turu = 2;\\n\t\tint kame = 4;\\n\t\t\\n\t\tString ans = \"No\";\\n\t\t\\n\t\tfor(int i=0; i<X+1; i++) {\\n\t\t\tif(i*turu + (X-i)*kame == Y) {\\n\t\t\t\tans = \"Yes\";\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\t\tkeyboard.close();\t\\n\t}\\n}\\n", "target": "62", "substitutes": {"keyboard": [" keystroke", "rowboard", "keyval", "scanreader", "quickbow", " keyboards", "toolboard", "nerdoor", "keysdoor", "keyline", "checkner", "toolBoard", "Keystroke", "scanline", "keybow", "checkdoor", "quickboard", "quickreader", "keyner", "checkboard", "kereader", "kebow", "keyshole", "keydoor", "nerner", "quickline", "keysner", "checkbo", "keysboard", "nerbo", "keline", "keyreader", "keyBoard", "keyhole", "toolbow", "scanboard", "keysBoard", "keboard", "nerboard", "keysbow", "rowval", "keystroke", "keyboards", "rowstroke", "scanhole", "rowboards", "Keyboards", "keysbo", "toolhole", "scanbow", "Keyval", " keyval", "Keyboard", "scanBoard", "keybo"], "X": ["IP", "TH", "EL", "C", "ZX", "ID", "WH", "N", "FF", "M", "Right", "Size", "CH", "U", "F", "XXX", "Q", "CL", "P", "Width", "UX", "Time", "XX", "x", "PI", "T", "I", "TX", "L", "DX", "XY", "B", "IX", "XP", "V", "K", "Length", "YY", "H", "Z", "O", "PE", "W", "XL"], "Y": ["yo", "S", "TY", "C", "AY", "J", "N", "SY", "Py", "HY", "MY", "U", "Q", "P", "A", "XX", "Type", "PI", "T", "I", "YC", "YS", "L", "XY", "KY", "B", "V", "K", "YY", "D", "H", "Z", "O", "y", "G", "W", "E"], "turu": [" tarry", "trave", "trav", "Trave", "dtomi", "zrav", "Tomi", "dtaru", " taru", "Tarry", "taru", "zrave", " tomi", "zaru", "dtarry", "karu", "Turu", "tarry", "krave", "tomi", "krav", "kuru", "Trav", "zuru", "dturu", "Taru"], "kame": [" kase", " koe", "koe", " kAME", "jame", "kAME", "ikkase", "kase", " kename", "kule", "skename", "ikkule", "kilAME", "jale", "kename", "ikkAME", "skame", "kilase", "kilule", "jename", "skale", " kule", " kale", "joe", "kilame", "ikkame", "skoe", "kale"], "ans": ["ams", "nn", "ana", "sk", "AN", "aned", "ars", "anas", "vers", "na", "ads", "ins", "rans", "aus", "ks", "anon", "lan", "acs", "atan", "reads", "ls", "anges", "ens", "olds", "aks", "s", "os", "nas", "cas", "ros", "ds", "plan", "ants", "an", "ANS", "anks", "acers", "leans", "ents", "ns", "ras", "ats", "anc", "san", "annot", "as", "anners", "ons", "aning", "ays", "ann"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "u", "one", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "a", "mini", "ri", "start", "io", "z", "info", "h", "f", "ci", "ui", "ini", "c", "index", "m", "x", "mu", "uri", "ip", "di", "e", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "zi", "li", "j", "oi", "k", "chi", "t", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\t\\n\t\tint n = stdIn.nextInt();\\n\t\tint[] a = new int[n];\\n\t\tint i;\\n\t\t\\n\t\tfor (i = 0; i < n; i++)\\n\t\t\ta[i] =stdIn.nextInt();\\n\t\t\\n\t\tint count = BubbleSort(a, n);\\n\t\t\\n\t\tSystem.out.print(a[0]);\\n\t\tfor(i = 1; i < n; i++)\\n\t\t\tSystem.out.print(\" \" + a[i]);\\n\t\tSystem.out.println();\\n\t\tSystem.out.println(count);\\n\t}\\n\t\\n\tpublic static int BubbleSort(int[] a, int n) {\\n\t\tint flag = 1, count = 0, i, t;\\n\t\twhile (flag != 0) {\\n\t\t\tflag = 0;\\n\t\t\tfor (i = n - 1; i > 0; i--) {\\n\t\t\t\tif (a[i] < a[i-1]) {\\n\t\t\t\t\tt = a[i];\\n\t\t\t\t\ta[i] = a[i-1];\\n\t\t\t\t\ta[i-1] = t;\\n\t\t\t\t\tcount++;\\n\t\t\t\t\tflag = 1;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\treturn count;\\n\t}\\n}", "target": "170", "substitutes": {"stdIn": ["adin", " stdIs", " stdin", "astOut", "dsOut", "adOut", "astIns", "astin", "stdIns", " stdIns", "dsIn", "standardIn", "astIN", " stdIN", "standardin", "astIn", "STDIn", "stdIs", "stdOut", "dsIns", "STDIns", "STDIs", "standardIN", "stdin", "STDOut", " stdOut", "dsIs", "stdIN", "adIns", "adIn"], "n": ["nn", "nc", "nt", "ni", "p", "size", "dn", "u", "num", "nan", "N", "ln", "span", "v", "cn", "l", "sn", "r", "z", "len", "f", "s", "c", "ne", "m", "w", "x", "an", "e", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "no", "in", "number", "y", "en"], "a": ["p", "ia", "u", "na", "something", "aura", "span", "za", "access", "auto", "ba", "ar", "working", "data", "aa", "z", "A", "aj", "aux", "pa", "f", "tta", "au", "s", "oa", "c", "ga", "at", "ata", "an", "action", "img", "sa", "ea", "ae", "e", "m", "ai", "alpha", "o", "ca", "b", "ac", "wa", "aaa", "sup", "work", "another", "ast", "analysis", "ama", "from", "as", "y", "la", "area", "ab", "da", "missing", "ma", "am", "va", "array"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "p", "iu", "ami", "slice", "id", "u", "it", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "l", "mini", "is", "data", "ri", "start", "io", "init", "info", "z", "temp", "f", "ci", "ui", "ini", "c", "index", "m", "phi", "x", "mu", "uri", "eni", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "ii", "b", "cli", "li", "j", "oi", "in", "chi", "y", "ki", "my", "ti", "fi"], "count": ["counter", "total", "offset", "cat", "call", "status", "nt", "second", "age", "Count", "size", "test", "p", "id", "num", "l", "old", "lag", "start", "info", "z", "h", "len", "length", "f", "c", "sum", "check", "weight", "index", "handle", "depth", "base", "list", "state", "code", "stat", "b", "err", "found", "force", "child", "no", "type", "group", "number", "cache", "error", "act", "array", "sync"], "flag": ["offset", "cat", "status", "py", "wait", "age", "p", "bug", "id", "span", "FLAG", "const", "lag", "debug", "part", "start", "init", "z", "info", "len", "maybe", "char", "f", "tag", "c", "feature", "style", "arg", "bit", "weight", "key", "state", "ie", "flags", "code", "min", "big", "err", "year", "field", "prop", "Flag", "no", "force", "type", "kind", "group", "log", "ind"], "t": ["ot", "target", "ts", "nt", "p", "u", "v", "l", "vert", "f", "s", "c", "m", "at", "x", "ty", "e", "T", "pt", "token", "ta", "o", "d", "tn", "b", "dt", "tp", "j", "flat", "ant", "bot", "template", "y", "tt", "ti", "tf"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n\tScanner sc = new Scanner(System.in);\\n\\n\tint week = sc.nextInt();\\n\\n\tdouble money = 100000;\\n\tfor(int i=0; i<week; i++){\\n\t    money = money + money*0.05;\\n\t    if(money%1000!=0){\\n\t\tmoney = money + (1000 - (money%1000));\\n\t    }\\n\t}\\n\\n\tSystem.out.println((int)money);\\n    }\\n}", "target": "173", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "scope", "pc", "com", "ch", "ss", " SC", "cur", "sub", "asc", "sh", "search", "Sc", "SC", "bc", "cs", "sw", "src", "lc", "c", "sp", "str", "acc", "sq", "uc", "soc", "se", "ner", " Sc", "scan", "osc", "rc", "cc", "cr", "sch", "parser", "ec", "esc"], "week": ["div", "unit", "second", "wk", "minute", "num", "fw", "page", "diff", "block", "win", "row", "f", "life", "eight", "key", "weight", "w", "hour", "month", "quarter", "d", "rule", "year", "cycle", "field", "day", "time", "work", "seed", "ee", "Week", "number", "worker", "flow", "weekly", "tick", "game", "fee", "window"], "money": ["total", "size", "margin", "stuff", "payment", "episode", "paid", "coin", "magic", "connection", "chi", "error", "fee", "price", "how", "currency", "bug", "every", "world", "family", "loss", "data", "mini", "power", "cash", "value", "timeout", "interest", "life", "base", "chance", "cow", "movie", "grade", "rule", "time", "scale", "number", "default", "div", "amount", "blue", "count", "change", "company", "budget", "minute", "Money", "machine", "resource", "huge", "euro", "weight", "fine", "cycle", "work", "force", "cache", "gross", "low", "dollar", "volume", "cost", "yahoo", "auto", "music", "style", "zero", "year", "rice", "flow"], "i": ["hi", "pi", "p", "it", "u", "id", "num", "multi", "xi", "wei", "ji", "v", "si", "mini", "ri", "r", "info", "f", "ci", "c", "ui", "key", "ini", "m", "x", "mu", "ip", "e", "di", "I", "ai", "o", "gi", "inner", "ii", "b", "li", "field", "j", "k", "oi", "in", "chi", "y", "t", "ti"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner std = new Scanner(System.in);\\n\t\tint n = Integer.parseInt(std.next());\\n\\n\t\tint array[];\\n\t\tarray = new int[53];\\n\t\tfor(int i=1; i<=52; i++){\\n\t\t\tarray[i] = i;\\n\t\t}\\n\\n\t\tfor(int j=1; j<=n; j++){\\n\t\t\tString suit = std.next();\\n\t\t\tint rank = Integer.parseInt(std.next());\\n\t\t\tif(suit.equals(\"S\")) {rank+=0;}\\n\t\t\telse if(suit.equals(\"H\")) {rank+=13;}\\n\t\t\telse if(suit.equals(\"C\")) {rank+=26;}\\n\t\t\telse if(suit.equals(\"D\")) {rank+=39;}\\n\\n\t\t\tarray[rank] = 0;\\n\t\t}\\n\\n\t\tfor(int i=1; i<=52; i++){\\n\t\t\tif(array[i]!=0){\\n\t\t\t\tString ret = \"\";\\n\t\t\t\tif((i-1)/13==0){ret+=\"S \";}\\n\t\t\t\telse if((i-1)/13==1){ret+=\"H \";}\\n\t\t\t\telse if((i-1)/13==2){ret+=\"C \";}\\n\t\t\t\telse if((i-1)/13==3){ret+=\"D \";}\\n\t\t\t\tif(i%13!=0){ret += i%13;}else{ret+=\"13\";}\\n\t\t\t\tSystem.out.println(ret);\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "189", "substitutes": {"std": ["cl", "sd", "uss", "live", "sth", "Standard", "nd", "ss", "fw", "db", "r", "pd", "wd", "ird", "nl", "gd", "hd", "STD", "er", "dk", "fd", "dc", "s", "td", "ds", "est", "str", "rad", "st", "usr", "d", "dd", "ld", "util", "sys", "se", "reader", "grad", "sb", "standard", "parse", "ast", "sts", "rd", "file", "vd", "rt", "parser", "da", "ctl", "th"], "n": ["nn", "nt", "ni", "count", "p", "num", "N", "l", "sn", "z", "nl", "len", "nr", "f", "s", "c", "ne", "m", "np", "e", "d", "ns", "b", "network", "nb", "net", "k", "number", "y", "en", "t"], "array": ["all", "counter", "union", "share", "function", "p", "record", "database", "test", "now", "archive", "map", "view", "allow", "align", "v", "arr", "auto", "ar", "search", "a", "page", "data", "Array", "answer", "sample", "row", "book", "collection", "app", "instance", "image", "pair", "order", "index", "list", "string", "element", "result", "object", "ray", "environment", "expression", "analysis", "type", "group", "number", "our", "address", "area", "shape", "range", "section", "cache", "error", "batch", "audio"], "i": ["slice", "multi", "qi", "init", "info", "s", "phi", "uri", "ie", "o", "inner", "g", "ii", "chi", "bi", "ic", "ni", "iu", "p", "id", "si", "ix", "line", "mini", "io", "h", "z", "temp", "f", "ci", "image", "ui", "ini", "index", "eni", "d", "my", "t", "pi", "it", "xi", "ji", "v", "ik", "x", "di", "I", "ai", "gi", "b", "in", "y", "ind", "ti", "hi", "im", "api", "ami", "u", "is", "start", "c", "ip", "e", "mi", "isi", "li", "oi"], "j": ["all", "dj", "jj", "jc", "p", "it", "u", "J", "qi", "ji", "v", "jp", "l", "ij", "z", "h", "end", "length", "f", "c", "index", "x", "ja", "ie", "jit", "q", "o", "d", "g", "b", "ii", "li", "js", "k", "je", "obj", "y", "jl", "ind", "aj"], "suit": ["abin", "sing", "atten", "sie", "unit", "vale", "test", "class", "sex", "vest", "json", "fruit", "sid", "sit", "trip", "arin", "ape", "shield", "mate", "ten", "name", "son", "inse", "sample", "vine", "sin", "isse", "fit", "pex", "kiss", "fen", "lex", "rape", "suits", "bring", "sett", "pe", "pack", "sen", "string", "miss", "gu", "site", "nette", "su", "rip", "cover", "rub", "seed", "club", "jack", "sel", "txt", "ipper", "wear", "study", "shape", "pic", "spec", "pose", "seat", "stick"], "rank": ["div", "score", "rock", "count", "division", "id", "cost", "ank", "num", "risk", "kick", "sort", "camp", "ranking", "fix", "power", "right", "name", "row", "nr", "length", "query", "deep", "c", "order", "height", "style", "check", "weight", "hack", "w", "index", "depth", "str", "ack", "max", "grade", "code", "d", "comment", "g", "rule", "adder", "ranked", "year", "pass", "root", "k", "work", "sup", "step", "anc", "scale", "seed", "clean", "level", "word", "speed", "rage", "shape", "vote", "cache", "gross", "error", "strip", "Rank"], "ret": ["complete", "ut", "flag", "cat", "msg", "opt", "val", "test", "gt", "back", "rep", "ext", "res", "search", "repl", "r", "bf", "exp", "ft", "fit", "mt", "info", "reg", "alt", "reply", "fun", "match", "pret", "str", "text", "string", "rev", "success", "rest", "usr", "feat", "result", "xt", "lit", "RET", "obj", "flat", "def", "replace", "det", "att", "txt", "job", "our", "rets", "ref", "rt", "error", "out", "let", "Ret", "re"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\n/* Name of the class has to be \"Main\" only if the class is public. */\\nclass Main\\n{\\n\tpublic static void main (String[] args) throws java.lang.Exception\\n\t{\\n\t\t// your code goes here\\n\t\ttry {\\n\t\t    Scanner sc=new Scanner(System.in);\\n\t\t    String s=sc.next();\\n\t\t    if(s.equals(\"ARC\"))\\n\t\t    System.out.println(\"ABC\");\\n\t\t    else\\n\t\t    System.out.println(\"ARC\");\\n\t\t} catch(Exception e) {\\n\t\t}\\n\t}\\n}\\n", "target": "153", "substitutes": {}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n    \t\\n    \tif (A < 10) {\\n\t        System.out.println(A);\\n    \t\treturn ;\\n    \t}\\n    \tif (A < 100) {\\n\t        System.out.println(9);\\n    \t\treturn ;\\n    \t}\\n    \tif (A < 1000) {\\n\t        System.out.println(A-10*10+9+1);\\n    \t\treturn ;\\n    \t}\\n    \tif (A < 10000) {\\n\t        System.out.println(10*10*10-10*10+9);\\n    \t\treturn ;\\n    \t}\\n    \tif (A < 100000) {\\n\t        System.out.println(A-10*10*10*10+10*10*10-10*10+9+1);\\n    \t\treturn ;\\n    \t}\\n\t    System.out.println(10*10*10*10*10-10*10*10*10+10*10*10-10*10+9);\\n    }\\n}", "target": "135", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "pc", "ch", "sec", "ss", " SC", "sub", "asc", "sh", "search", "Sc", "SC", "bc", "cs", "sw", "src", "desc", "lc", "c", " scr", "sp", "str", "acc", "ec", "uc", "soc", "g", "se", "ner", " Sc", "ocr", "scan", "osc", "rc", "cc", "cr", "sch", "parser", "out", "esc"], "A": ["S", "Ha", "AS", "Num", "AR", "NA", "C", "Ca", "An", "AA", "N", "M", "TA", "Average", "LA", "a", "As", "U", "Y", "Array", "Address", "FA", "F", "Fa", "mA", "BA", "AP", "Application", "P", "SA", "PA", "EA", "Ma", "File", "Australia", "Total", "Na", "API", "AU", "UA", "T", "I", "At", "L", "Alpha", "Bar", "B", "V", "K", "D", "H", "True", "Action", "O", "CA", "G", "Any", " a", "W", "E", "X"]}}
{"code": "import java.math.BigDecimal;\\nimport java.math.RoundingMode;\\nimport java.text.DecimalFormat;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n        int N = Integer.parseInt(sc.next());\\n        sc.close();\\n\\n        int odd = 0;\\n\\n        for (int i = 1; i <= N; i++) {\\n\\n            if(!(i % 2 == 0)) {\\n\\n                odd++;\\n            }\\n        }\\n\\n        double ans = (double)odd/(double)N;\\n\\n        BigDecimal ansBig = new BigDecimal(ans);\\n        ansBig.setScale(6, RoundingMode.HALF_UP);\\n\\n        System.out.print(decimalToString10(ansBig));\\n\\n    }\\n\\n    public static String decimalToString10(BigDecimal big) {\\n\\n        DecimalFormat format = new DecimalFormat(\"#.#\");\\n\\n        // \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6700\u5c0f\u5024\\n        format.setMinimumFractionDigits(10);\\n        // \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6700\u5927\u5024\\n        format.setMaximumFractionDigits(10);\\n\\n        return format.format(big);\\n    }\\n\\n}", "target": "64", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "scope", "pc", "ck", "ch", "ss", " SC", "si", "sh", "Sc", "SC", "ct", "cs", "bc", "sw", "src", "cv", "cor", "lc", "ci", "cer", "c", "sp", "text", "system", "sq", "uc", "soc", "sr", "small", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "can", "cus"], "N": ["S", "Num", "No", "SN", "NL", "C", "M", " n", "Size", "Y", "X", "F", "NN", "P", "A", "Ni", "T", "I", "NC", "L", "R", "n", "B", "Ne", "V", "K", "NB", "ND", "D", "NT", "H", "O", "Ns", "NS", "number", "G", "NG"], "odd": ["div", "total", "nt", "ded", "count", "and", "division", "bug", "id", "num", "nd", "ad", "od", "auto", "kick", "defined", "old", "power", "diff", "good", "own", "length", "Even", "x", " Odd", "broken", " even", "even", "month", "opp", "max", "oct", "o", "inner", "dd", "d", "n", "ow", "alpha", "night", "day", "k", "def", "no", "child", "seed", "number", "off", "dev", "error", "ant"], "i": ["hi", "bi", "pi", "p", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "a", "l", "ri", "start", "io", "init", "h", "info", "f", "ci", "c", "ui", "ini", "index", "phi", "x", "ip", "di", "I", "col", "ai", "o", "gi", "d", "mi", "n", "inner", "ii", "b", "li", "j", "k", "oi", "in", "chi", "ind", "t", "ti"], "ans": ["ams", "ana", "aos", "AN", "ars", "anas", "aned", "na", "ads", "ins", "An", "nan", "ANT", "ks", "anon", "lan", "es", "ions", "ls", "ians", "nas", "os", "cas", "ds", "ants", "an", "ANS", "arts", "Ann", "n", "ns", "ents", "ras", "ats", " ants", "ANN", "as", "ons", "amps", "ays", "ant", "ann"], "ansBig": ["adsBig", "annbig", "casLittle", "ansbig", "anLittle", "rasLittle", "anLarge", "dsBig", "casMuch", "rasBig", "dsLarge", "dsLittle", "ansLittle", "casBig", "anasLittle", "anasBig", "adsLittle", "adsSmall", "ansLarge", "casSmall", "dsSmall", "annLarge", "ansMuch", "annBig", "adsMuch", "anSmall", "anasMuch", "dsbig", "anasSmall", "anBig", "ansSmall", "rasLarge", "anbig", "rasSmall", "annLittle"], "big": ["self", "print", " fig", "num", " large", "fig", "gd", "f", "fff", "Big", " Big", " huge", " figure", "raw", "dd", "d", "dom", "result", "small", "util", "abc", "def", "number", "dec", " small"], "format": ["pattern", "print", "function", "unit", "pretty", "Format", "atter", "MAT", "version", "data", "temp", "t", "at", "output", " representation", "str", "text", "string", "d", "util", "ats", "form", "parse", "math", "txt", "type", "number", "transform"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner( System.in );\\n\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        for( int i = 0 ; i < n ; i++ ){\\n            a[i] = sc.nextInt();\\n        }\\n        sc.close();\\n        Sort s = new Sort( n, a );\\n        s.bubblesort();\\n        s.printA();\\n        System.out.println( s.count );\\n    }\\n}\\n\\nclass Sort {\\n    public int N;\\n    public int[] A;\\n    public int count;\\n\\n    Sort( int N, int[] A ){\\n        this.N = N;\\n        this.A = A;\\n        this.count = 0;\\n    }\\n\\n    public void bubblesort(){\\n        int tmp = 0;\\n        boolean flag = true;\\n        while( flag ){\\n            flag = false;\\n            for( int j = this.N-1; j > 0 ; j-- ){\\n                if( this.A[j] < this.A[j - 1] ){\\n                    tmp = this.A[j];\\n                    this.A[j] = this.A[j - 1];\\n                    this.A[j -1] = tmp;\\n                    flag = true;\\n                    this.count++;\\n                }\\n            }\\n        }\\n    }\\n\\n    public void printA(){\\n        for( int i = 0; i < this.N; i++ ){\\n            System.out.print( this.A[i] );\\n            if( i != this.N - 1 ){\\n                System.out.print(  \" \" );\\n            }\\n        }\\n        System.out.println(\"\");\\n    }\\n}\\n", "target": "170", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", " SC", "si", "sh", "Sc", "SC", "screen", "bc", "cs", "cv", "sw", "src", "lc", "sl", "cer", "c", "dc", " scr", "sp", "sa", "system", "sq", "uc", "soc", "sr", "ca", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "esc", "cus", "sync"], "n": ["nn", "nc", "nt", "ni", "p", "size", "u", "num", "nan", "v", "l", "sn", "z", "nl", "f", "c", "ne", "m", "an", "x", "nin", "e", "o", "d", "ns", "b", "network", "nb", "net", "k", "no", "in", "number", "y", "en", "t"], "a": ["p", "ia", "u", "na", "ad", "ba", "ar", "aa", "aj", "oa", "tta", "au", "c", "ga", "at", "ata", "an", "x", "sa", "ea", "ae", "ai", "alpha", "abs", "ca", "b", "ac", "wa", "aaa", "as", "asa", "area", "ab", "da", "ma", "am", "va", "array"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "it", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "mini", "ij", "uni", "ri", "ik", "io", "info", "z", "h", "f", "ci", "ui", "ini", "key", "index", "eni", "x", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "zi", "li", "oi", "in", "chi", "y", "iq", "ind", "ti", "fi"], "s": ["l", "groups", "S", "orts", "ts", "second", "p", "u", "ins", "ss", "rs", "v", "si", "strings", "qs", "sort", "es", "sv", "is", "ls", "r", "fs", "ws", "cs", "results", "ps", "bs", "f", "ows", "vs", "sl", "c", "os", "states", "ms", "ds", "rows", "settings", "sa", "e", "per", "ses", "o", "abs", "d", "g", "ns", "b", "small", "services", "sets", "se", "gs", "su", "sup", "sb", "xs", "ans", "as"], "N": ["MN", "Len", "S", "Num", "IND", "IN", "No", "NA", "Count", "C", "J", "M", "CN", "Size", "Node", "Y", "Name", "F", "Network", "Number", "NN", "Q", "Code", "DN", "P", "GN", " Ne", "Na", "Ni", "I", "T", "NC", "L", "R", "Max", "B", "NM", "Ne", "V", "NB", "K", "Length", "ND", "D", "NT", "O", "NS", "Ns", "Z", "G", "NG", "NI", "E", "X"], "A": ["Order", "Info", "AR", "C", "M", "Average", "Alias", "None", "Local", "Auth", "API", "alpha", "Alpha", "Images", "Args", "am", "K", "CA", "Everything", "E", "AS", "Es", "An", "Java", "Address", "MA", "mA", "This", "P", "At", "Space", "H", "O", "G", "Adam", "Any", "History", "array", "S", "Count", "There", "Something", "F", "Answer", "First", "Am", "Each", "L", "B", "V", "All", "Action", "DA", "X", "AD", "AM", "NA", "AA", "LA", "As", "Upload", "Y", "Array", "AP", "au", "Files", "Ar", "Access", "Default", "D", "ASC", "The", "Application"], "count": ["all", "counter", "this", "total", "offset", "cat", "nn", "call", "nt", "second", "p", "Count", "size", "null", "id", "C", "num", "allow", "old", "name", "part", "start", "z", "len", " Count", "throw", "length", "f", "last", "cond", "c", "order", "sum", "key", "index", "weight", "depth", "list", "base", "e", "max", "code", "set", "b", "limit", "ac", "nb", "write", "found", "child", "force", "log", "group", "number", "cache", "array", "close"], "tmp": ["buff", "fb", "offset", "py", "nt", " delta", "p", "test", "po", "rb", "v", "jp", "stuff", "page", "pre", "kk", "cb", "part", "vt", "zip", "temp", "cp", " temporary", "cmp", " temp", " p", "sp", "np", "mp", "b", "nb", "amp", "buf", "sb", "bb", "obj", "pos", "beta", "txt", "qq", "pp", "area", " sp", "copy", "fake", "pad", "bp"], "flag": [" bug", " bag", "offset", " alt", "status", " leaf", " pig", "spin", "fl", "bug", " bit", "id", " frag", "binary", "FLAG", " bias", "lag", "debug", "use", "continue", "part", " lag", "start", "mask", "init", "info", "z", "ag", "band", " stag", "f", "wait", " flags", "delay", "bit", "star", "style", "wave", "fun", "filter", "list", " wait", " win", "flags", "op", "ish", " border", " flagged", "leaf", "err", " Flag", "field", "prop", "Flag", "inline", " status", "force", " spin", "kind", "log", "ret", " fun", " filter", " bool", "fi", "sync"], "j": ["dj", "jj", "jc", "ni", "p", "adj", "it", "u", "J", "num", "bj", "ji", "ch", "next", "qi", "v", "jp", "pr", "ix", "l", "ij", "fr", "part", "r", "z", "h", "temp", "aj", "f", "br", "c", "key", "m", "x", "e", " dj", "ja", "jet", "pt", "uj", "ie", "code", "o", "d", "g", "b", "ii", "dy", "li", "js", "k", "obj", "je", "job", "y", "jl", "ind", "jo"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n\\n        Scanner sc = new Scanner(System.in);\\n\t\t\\n      \tString s = sc.next();\\n      \tString t = sc.next();\\n\\n      int hit = 0;\\n      for(int i = 0; i < s.length(); i++){\\n         \tchar c1 = s.charAt(i); \\n      \t\t  char c2 = t.charAt(i); \\n          \tif(c1 == c2){\\n  \t\t\t\thit++;            \\n            }\\n        }\\n      \\n      \tSystem.out.println(hit);\\n    }\\n}\\n", "target": "243", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "core", "ser", "ch", "sec", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "cv", "lc", "ci", "dc", "c", "cer", "sp", "sq", "uc", "sr", "se", " Sc", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus", "sync"], "s": ["aws", "S", "ts", "sf", "p", "u", "ins", "ss", "ks", "si", "strings", "l", "qs", "es", "sv", "is", "ls", "series", "ws", "source", "sin", "cs", "bs", "f", "sl", "c", "os", "ds", "e", "sq", "ses", "string", "ssl", "o", "n", "ns", "gs", "sets", "services", "sys", "se", "su", "js", "sb", "xs", "in", "as"], "t": ["ot", "ut", "te", "target", "ts", "nt", "p", "test", "it", "u", "qt", "tr", "the", "unt", "l", "h", "temp", "f", "c", "tm", "at", "T", "pt", "st", "ta", "text", "o", "d", "n", "g", "b", "att", "txt", "type", "y", "tt", "rt", "tf"], "hit": ["all", "quad", "cat", "status", "hop", "hide", "test", "crit", "bug", "id", "it", "num", "fail", "split", "sit", "cha", "blast", "rh", "value", "block", "iter", "error", "h", "batch", "fit", "loc", "bit", "index", "check", "col", "act", "miss", "success", "feat", "IT", "hot", "result", "b", "limit", "stat", "ac", "lit", "nit", "host", "update", "shit", "join", "job", "kat", "tick", "Hit", "match", "rit", "out"], "i": ["bi", "hi", "pi", "ori", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "ri", "part", "init", "io", "info", "abi", "f", "ci", "vis", "ui", "ini", "c", "index", "eni", "phi", "mu", "uri", "ip", "di", "e", "I", "ie", "ai", "o", "gi", "ii", "b", "li", "j", "oi", "in", "chi", "ti", "fi"], "c1": [" c5", "p1", "p5", "p91", " c91", "c0", "sc11", " c11", "p2", "c11", "c91", " c0", "lc0", "sc3", " c3", "p3", "p0", "lc2", "c5", "lc91", "c3", "p11", "lc1", "sc1", "sc5"], "c2": ["lc3", "ac2", " c82", "c82", "ac182", "sc82", "ac3", "sc3", " c3", "c182", "lc2", "sc2", "lc182", "c3", "lc82", "ac1", "lc1", "sc1", " c182"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nimport java.math.*;\\n\\npublic class Main {\\n\tScanner sc = new Scanner(System.in);\\n\tvoid run(){\\n\t\tString str = sc.next();\\n\t\tString ret = \"\";\\n\t\twhile(!str.isEmpty()){\\n\t\t\tret += str.charAt((str.length()-1));\\n\t\t\tstr = str.substring(0,str.length()-1);\\n\t\t}\\n\t\tSystem.out.println(ret);\\n\t\t\\n\t}\\n\tpublic static void main(String[] args){\\n\t\tMain m = new Main();\\n\t\tm.run();\\n\t\t\\n\t}\\n}", "target": "237", "substitutes": {"sc": ["cl", "sche", "mc", "nc", "sci", "enc", "scope", "pc", "ch", "sec", "ss", " SC", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "desc", "ci", "dc", "c", "sp", "st", "sq", "uc", "se", "ner", " Sc", "anc", "scan", "isc", "osc", "rc", "cc", "cr", "sch", "proc", "ec", "esc"], "str": ["cl", "div", "id", "hr", "next", "tr", "pr", "arr", "ext", "cur", "url", "line", "STR", "res", "data", "fr", "name", "ctr", "r", "part", "iter", "input", "temp", "char", "f", "br", "dr", "sl", "s", "orig", "lc", "style", "sp", "st", "text", "string", "kr", "rev", "stri", "Str", "inner", "sr", "result", "err", "gr", "obj", "in", "cr", "spec", "strip"], "ret": ["nt", "val", "secret", "id", "rep", "rb", "tr", "arr", "cur", "res", "search", "repl", "fin", "data", "fr", "std", "part", "r", "iter", "br", "utf", "alt", "arg", "reply", "fun", "string", "rev", "Str", "result", "sr", "lit", "RET", "pass", "txt", "rc", "rets", "rt", "match", "out", "Ret", "re"], "m": ["dm", "module", "bm", "p", "mon", "M", "i", "mm", "r", "h", "machine", "app", "f", "cm", "man", "mr", "ms", "c", "fm", "pm", "mad", "mu", "e", "mp", "gm", "vm", "md", "o", "d", "mi", "n", "hm", "me", "sm", "mod", "mn", "t"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        abc160_c solver = new abc160_c();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class abc160_c {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int K = in.nextInt();\\n            int N = in.nextInt();\\n            long A[] = new long[N];\\n            long seg[] = new long[N];\\n            long max_far = 0;\\n            long max_far_seg = -1;\\n            for (int i = 0; i < N; i++) {\\n                A[i] = in.nextInt();\\n            }\\n            max_far = (K - A[N - 1]) + A[0];\\n            max_far_seg = 0;\\n            seg[0] = max_far;\\n            for (int i = 1; i < N; i++) {\\n                long far = A[i] - A[i - 1];\\n                seg[i] = far;\\n                if (max_far < far) {\\n                    max_far = far;\\n                    max_far_seg = i;\\n                }\\n            }\\n            long ttldist = 0;\\n            for (int i = 0; i < N; i++) {\\n                if (max_far_seg != i) {\\n                    ttldist += seg[i];\\n                }\\n            }\\n            out.println(ttldist);\\n        }\\n\\n    }\\n}\\n\\n", "target": "10", "substitutes": {"inputStream": ["inputSteam", "outputSteam", " inputstream", "inputForm", "outputForm", " inputSteam", "InputSteam", "InputSocket", "outputSocket", "Inputstream", "inputSocket", "InputForm", "InputStream", "outputstream", "inputstream", " inputSocket", " inputForm"], "outputStream": ["inputForm", "outputSteam", "inputSteam", "outputForm", "Outputstream", "OutputStream", " outputSteam", "writestream", "writeStream", "writeSteam", "OutputSteam", "outputstream", "OutputForm", " outputForm", " outputstream", "inputstream"], "in": ["this", "ic", "isin", "IN", "loader", "id", "login", "ins", "serv", "din", "ln", "inside", "run", "line", "l", "a", "data", "is", "request", "con", "lin", "r", "io", "source", "init", "win", "input", "sin", "resource", "In", "er", "conn", "s", "gen", "inn", "ini", "c", "arg", "image", "user", "w", "x", "nin", "cin", "between", "min", "gin", "inf", "inner", "rin", "n", "kin", "err", "again", "reader", "pin", "connection", "log", "bin", "vin", "file", "inc", "read", "thin"], "out": ["this", "ext", "r", "exp", "init", "s", "output", "w", "max", "Out", "o", "inner", "exec", "connection", "bin", "inc", "copy", "error", "window", "call", "client", "server", "line", "data", "name", "cmd", "io", "timeout", "temp", "f", "conn", "user", "down", "str", "socket", "n", "again", "write", "up", "file", "off", "IN", "self", "scope", "prefix", "serv", "v", "pool", "png", "point", "extra", "gen", "writer", "b", "err", "obj", "net", "log", "cache", "sync", "parent", "msg", "ex", "inas", "session", "outer", "c", "OUT", "string", "scan", "outs", "exit", "dump"], "solver": ["scholution", "solving", "server", "ssolve", "unsolver", "Solver", "Solved", "scherver", "ssolver", "ssolution", "scholver", "solve", "solution", "unsolved", "Solution", "Solving", "unsolving", "scholve", "Solve", "sserver", "Server", "solved", "unsolution"], "testNumber": ["TestNumber", "testNumbers", "testnumber", " trialnumber", " trialNumber", "TestNum", " testnumber", "Testnumber", " trialNumbers", " testNum", " testNumbers", " trialNum", "testNum", "TestNumbers"], "K": ["S", "C", "J", "M", "Size", "U", "Y", "F", "Q", "P", "Sk", "T", "I", "L", "R", "n", "Max", "B", "V", "k", "KR", "D", "H", "Z", "O", "G", "KS", "SK", "W", "E", "X"], "N": ["Len", "S", "Num", "No", "NA", "C", "J", "M", " n", "Size", "U", "Y", "F", "NN", "Q", "P", " Ne", "NO", "T", "I", "Ni", "L", "R", "n", "B", "NM", "Ne", "V", "CNN", "ND", "D", "NT", "H", "O", "Ns", "NS", "Z", "G", "NE", "NI", "W", "E", "X"], "A": ["S", "AS", "AR", "AM", "NA", "C", "JA", "Java", "AA", "M", "TA", "Average", "LA", "a", "As", "U", "Y", "Array", "FA", "Address", "MA", "F", "mA", "BA", "AP", "None", "This", "P", "SA", "PA", "Ma", "Area", "First", "Na", "API", "AU", "Input", "T", "I", "App", "At", "alpha", "L", "Alpha", "B", "Ar", "Args", "AC", "All", "D", "H", "ASC", "CA", "The", "Adam", "GA", "array"], "seg": ["pega", "vegm", " segn", "sego", "psegm", "gegi", "seG", "SEga", "kegn", "segn", " segm", "SEgn", "segs", "keg", " sego", "psega", "beg", "peg", "SEgm", "bega", "vego", " segs", "vega", "begi", "kega", "psego", "SEg", " segi", "sega", "SEG", " seG", " sega", "segm", "segi", "SEgs", "keG", "pseg", "bego", "pegs", "pegm", "veg", "geg", "gega", "gego"], "max_far": [" max_are", "max_over", "max_near", "right_far", " max_over", "best_war", " max_fast", "best_far", "max_bar", "max_fast", "max_Far", "max_ver", "max_are", "max_war", "right_fare", "max_fare", " max_fare", "right_bar", " max_Far", " max_near", "best_ver", "best_Far"], "max_far_seg": ["max_far_parseg", "max_far_meg", "max_far_sem", "max_far_SEgment", "max_far_SEG", "max_far_perseG", "max_far_segm", "max_far_parsegn", "max_far_parseG", "max_far_bega", "max_far_persega", "max_far_persem", "max_far_megment", "max_far_sega", "max_far_SEgn", "max_far_mega", "max_far_sege", "max_far_begment", "max_far_parsega", "max_far_begm", "max_far_SEm", "max_far_mege", "max_far_segment", "max_far_perseg", "max_far_SEg", "max_far_beg", "max_far_megm", "max_far_segn", "max_far_SEga", "max_far_seG", "max_far_SEge", "max_far_SEgm"], "i": ["bi", "hi", "pi", "ori", "ni", "hei", "iu", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "a", "l", "mini", "is", "ik", "ri", "io", "init", "info", "z", "f", "ci", "ui", "ini", "key", "c", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "n", "b", "ii", "zi", "li", "j", "k", "me", "yi", "chi", "y", "my", "t", "ti", "fi"], "far": ["this", "ir", "fer", "ium", "vec", " Far", "hide", "allow", "world", "here", "average", "ar", "half", "r", "car", "fe", "are", "ear", "row", "char", "f", "arrow", "high", "Far", "way", "feature", "broad", "lo", "recent", " farther", "large", "mor", "fair", "folder", "fare", "result", "fast", "err", "loop", "field", "grid", "bor", "me", "scale", "many", "away", "bar", "area", "have", "later", "near", "free", "array"], "ttldist": ["ttldest", "ettfddist", "ttdIST", "ettlddist", "ottldists", "ttladest", "ttalddist", "ttledata", "ettfdist", "ttildists", "ttladdist", "ttildist", "ttleddist", "ttfddist", "ttledIST", "tdIST", "tdist", "ttledists", "ettldest", "ttldata", "ttaldIST", "ottledIST", "ottledist", "ttlfists", "ttildest", "tlddist", "ettfdata", "ttldists", "ttfdest", "ttldIST", "ttdist", "ttladata", "ottldist", "ottledest", "ttladist", "ttfdist", "ttlddist", "ttdists", "tldists", "ttfdata", "ttlfIST", "tldist", "ottledists", "ttledest", "tdists", "ottldIST", "ttledist", "ttlfist", "ttaldists", "ettldist", "ottldest", "ttaldist", "tddist", "ttddist", "ettldata", "ettfdest", "ttlfest", "tldIST", "ttildIST"]}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t//\t\tnew Main().solveA();\\n\t\tnew Main().solveB();\\n\t\t// new Main().solveC();\\n\t\t// new Main().solveD();\\n\t}\\n\\n\tprivate void solveA() {\\n\t\tScanner scanner = null;\\n\t\tint numA = 0;\\n\t\tint numB = 0;\\n\\n\t\ttry {\\n\t\t\tscanner = new Scanner(System.in);\\n\t\t\tnumA = scanner.nextInt();\\n\t\t\tnumB = scanner.nextInt();\\n\\n\t\t\tint res = numA - 1;\\n\t\t\tres += numB >= numA ? 1 : 0;\\n\\n\t\t\tSystem.out.println(res);\\n\\n\t\t} finally {\\n\t\t\tif (scanner != null) {\\n\t\t\t\tscanner.close();\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tprivate void solveB() {\\n\t\tScanner scanner = null;\\n\t\tint[] wk = new int[3];\\n\t\tint numK = 0;\\n\\n\t\ttry {\\n\t\t\tscanner = new Scanner(System.in);\\n\t\t\twk[0] = scanner.nextInt();\\n\t\t\twk[1] = scanner.nextInt();\\n\t\t\twk[2] = scanner.nextInt();\\n\t\t\tnumK = scanner.nextInt();\\n\\n\t\t\tArrays.sort(wk);\\n\\n\t\t\tint res = wk[wk.length - 1];\\n\t\t\tfor (int i = 0; i < numK; i++) {\\n\t\t\t\tres *= 2;\\n\t\t\t}\\n\t\t\twk[wk.length - 1] = res;\\n\t\t\tres = 0;\\n\t\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\t\tres += wk[i];\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(res);\\n\\n\t\t} finally {\\n\t\t\tif (scanner != null) {\\n\t\t\t\tscanner.close();\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tprivate void solveC() {\\n\t\tScanner scanner = null;\\n\t\tint numN = 0;\\n\t\tint numK = 0;\\n\t\tint numS = 0;\\n\\n\t\ttry {\\n\t\t\tscanner = new Scanner(System.in);\\n\t\t\tnumN = scanner.nextInt();\\n\\n\t\t\tSystem.out.println(\"\");\\n\\n\t\t} finally {\\n\t\t\tif (scanner != null) {\\n\t\t\t\tscanner.close();\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tprivate void solveD() {\\n\t\tScanner scanner = null;\\n\t\tint numN = 0;\\n\t\tint numK = 0;\\n\t\tint numS = 0;\\n\\n\t\ttry {\\n\t\t\tscanner = new Scanner(System.in);\\n\t\t\tnumN = scanner.nextInt();\\n\\n\t\t\tSystem.out.println(\"\");\\n\\n\t\t} finally {\\n\t\t\tif (scanner != null) {\\n\t\t\t\tscanner.close();\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "201", "substitutes": {}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\tpublic static void main(String args[]) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint p=sc.nextInt();\\n\t\tString c=sc.next();\\n\t\tchar a[]=c.toCharArray();\\n\t\tint b=0;\\n\t\tfor(int i=0;i<p/2;i++) {\\n\t\t\t\tif(a[i]!=a[i+p/2])\\n\t\t\t\t\tb++;\\n\t\t}\\n\t\tif(p%2==0){\\n\t\t\tif(b==0) {\\n\t\t\tSystem.out.print(\"Yes\");\t\\n\t\t\t}else {\\n\t\t\tSystem.out.print(\"No\");\\n\t\t\t}\\n\t\t}else\\n\t\t\tSystem.out.print(\"No\");\\n\t\t\t\\n\t}\\n}", "target": "161", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "ser", "ch", "tc", "ss", "sec", " SC", "cur", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "lc", "ci", "cer", "cy", "sp", "st", "sq", "uc", "sr", "ca", "sem", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "p": ["py", "pi", "pc", "patch", "u", "v", "jp", "l", "pre", "point", "part", "r", "z", "h", "P", "lp", "ps", "cp", "f", "pa", "s", "m", "w", "x", "sp", "e", "ip", "np", "per", "pe", "o", "d", "n", "tp", "j", "pos", "k", "pp", "y", "port", "t", "bp"], "c": ["enc", "cat", "nc", "arc", "C", "u", "ch", "v", "cn", "l", "fc", "r", "cs", "f", "lc", "s", "csv", "dc", "m", "x", "e", "ce", "cf", "o", "d", "n", "g", "ca", "abc", "ac", "in", "cc", "cr", "t", "esc"], "a": ["all", "na", "u", "ba", "ar", "data", "aa", "A", "aux", "pa", "f", "s", "ga", "ata", "sa", "ae", "ada", "ea", "e", "alpha", "n", "ca", "ac", "aaa", "ama", "fa", "as", "la", "asa", "area", "ab", "da", "y", "ma", "va", "array"], "b": ["bi", "pi", "pb", "rb", "binary", "v", "ba", "l", "db", "ib", "part", "r", "bf", "h", "z", "lb", "bc", "end", "bs", "f", "pa", "br", "s", "w", "x", "base", "e", "o", "d", "n", "B", "body", "nb", "j", "k", "sb", "bb", "beta", "y", "wb", "ab", "batch", "t", "bp"], "i": ["bi", "hi", "pi", "ni", "iu", "it", "u", "id", "slice", "multi", "qi", "ji", "xi", "v", "si", "ix", "l", "uni", "ri", "uli", "io", "z", "abi", "f", "ci", "ui", "ini", "index", "eni", "x", "uri", "ip", "e", "di", "I", "ai", "o", "gi", "ii", "zi", "li", "j", "oi", "in", "chi", "y", "fi"]}}
{"code": "\\nimport java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint data = scan.nextInt();\\n\t\tboolean b = true;\\n\t\tArrayList<Integer> a = new ArrayList<>();\\n\t\tfor(int i = 0; i<3; i ++){\\n\t\tint x=data%10;\\n\t\ta.add(x);\\n\t\tdata=data/10;\\n\t\tif(a.get(i)==7) {\\n\t\t\tb=true;\\n\t\t\tbreak;\\n\t\t}\\n\t\tb=false;\\n\t\t}\\n\t\tif(b==true) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "99", "substitutes": {"scan": ["nn", "cat", "watch", "connect", "walk", "na", "run", "search", "l", "fan", "sn", "sign", "r", "sc", "win", "row", "get", "er", "gen", "report", "feed", "an", "system", "ai", "skip", "n", "sync", "stat", "sys", "se", "ner", "pass", "reader", "ignore", "in", "parse", "Scan", "san", "ans", "parser", "read", "out", "can", "ann", "query"], "data": ["total", "offset", "count", "p", "size", "id", "next", "multi", "split", "partial", "dat", "start", "bytes", "sample", "value", "timeout", "input", "len", "results", "length", "f", "ui", "index", "ata", "base", "memory", "done", "di", "alpha", "d", "zero", "result", "limit", "pos", "no", "step", "scale", "number", "la", "area", "missing", "da", "DATA", "batch", "pad", "window"], "a": ["aw", "p", "na", "u", "access", "auto", "ba", "ao", "aa", "A", "au", "ga", "an", "ata", "list", "sa", "ea", "e", "ack", "ae", "alpha", "array", "ca", "ac", "aaa", "sta", "ama", "as", "la", "ans", "area", "ab", "da", "parser", "ma", "am", "aj"], "i": ["bi", "hi", "api", "pi", "p", "slice", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "l", "is", "io", "z", "f", "ci", "s", "ui", "c", "ini", "index", "mu", "uri", "e", "di", "ip", "I", "ai", "o", "gi", "d", "mi", "n", "ii", "zi", "li", "j", "y", "t", "ti"], "x": ["dx", "p", "val", "xp", "u", "id", "num", "xi", "ex", "v", "ix", "z", "f", "c", "ax", "index", "e", "xx", "xxx", "d", "n", "abc", "xxxx", "step", "xy", "number", "y", "rx", "px", "t", "xc", "X"], "b": ["bi", "hide", "p", "u", "pb", "rb", "binary", "v", "l", "bis", "cb", "is", "part", "ib", "db", "r", "out", "h", "bc", "bs", "f", "s", "c", "w", "base", "bo", "e", "o", "d", "n", "g", "B", "body", "nb", "bg", "j", "k", "sb", "bb", "bin", "y", "wb", "ab", "ob", "t"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tdouble answer = 0;\\n\\n\t\tfor (int i = 1; i <= N; i++) {\\n\t\t\tint sum = i;\\n\t\t\tint count = 0;\\n\t\t\twhile (sum <= K - 1) {\\n\t\t\t\tsum *= 2;\\n\t\t\t\tcount++;\\n\t\t\t}\\n\\n\t\t\tanswer += (double)1/N * Math.pow((double)1/2, count);\\n\\n\t\t}\\n\\n\t\tSystem.out.println(answer);\\n\\n\t}\\n}\\n", "target": "20", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "pc", "class", "ser", "com", "ch", "sec", "ss", "tc", " SC", "cur", "asc", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "src", "lc", "ci", "c", "cer", "sp", "str", "system", "sq", "uc", "ca", "sem", "se", "ner", " Sc", "ocr", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "ec", "esc", "ctx", "cus", "sync"], "N": ["Len", "S", "NA", "Count", "NL", "C", "M", "OS", "Size", "Y", "F", "NN", "Q", "P", "T", "I", "Ni", "NC", "L", "n", "CNN", "V", "Ne", "NB", "D", "NT", "KN", "Z", "NS", "Ns", "O", "NE", "X"], "K": ["KK", "S", "EC", "Count", "C", "J", "M", "CH", "U", "Y", "NK", "F", "Q", "P", "KC", "Sk", "I", "PK", "L", "V", "k", "NB", "D", "H", "Z", "KI", "KN", "O", "G", "KE", "KS", "SK", "X"], "answer": ["complete", "total", "offset", "score", "now", "val", "size", "message", "integer", "ani", "next", "answered", "average", "distance", "question", "data", "duration", "cash", "value", "results", "Answer", " answers", "fee", "length", "reply", "output", "done", "knowledge", "string", "grade", "code", "result", "err", "field", "energy", "cover", "update", "response", "number", "issue", "address", "area", "evidence", "cache", "array", "query"], "i": ["hi", "pi", "ni", "p", "slice", "id", "u", "num", "qi", "multi", "xi", "v", "si", "ix", "part", "start", "init", "z", "info", "f", "ci", "image", "ui", "c", "key", "ini", "index", "phi", "x", "uri", "ip", "di", "I", "ai", "o", "mi", "n", "ii", "b", "zi", "li", "j", "k", "in", "chi", "ind"], "sum": ["um", "div", "total", "conf", "offset", "unit", "share", "size", "cost", "id", "num", "add", "vol", "average", "si", "ass", "sort", "name", "part", "diff", "use", "ask", "start", "init", "sim", "spread", "len", "cal", "co", "length", "image", "c", "index", "weight", "min", "max", "alpha", "skip", "miss", "comment", "Sum", "n", "ac", "li", "pass", "scale", "group", "mean", "inc", "doc", "match", "fee", "coll"], "count": ["um", "counter", "total", "cat", "call", "conf", "offset", "div", "Count", "size", "id", "cost", "num", "keep", "add", "const", "pool", "part", "use", "start", "len", "cond", "length", "c", "key", "index", "weight", "depth", "list", "col", "max", "code", "common", "loop", "ac", "current", "child", "type", "level", "inc", "cache", "match", "ind", "coll"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner a = new Scanner(System.in);\\n        int s1 = a.nextInt();\\n        a.close();\\n        if (s1 - 111 == 0) {\\n            System.out.print(\"3\");\\n        }\\n        if (s1 - 110 == 0) {\\n            System.out.print(\"2\");\\n        }\\n        if (s1 - 101 == 0) {\\n            System.out.print(\"2\");\\n        }\\n        if (s1 - 100 == 0) {\\n            System.out.print(\"1\");\\n        }\\n        if (s1 - 11 == 0) {\\n            System.out.print(\"2\");\\n        }\\n        if (s1 - 10 == 0) {\\n            System.out.print(\"1\");\\n        }\\n        if (s1 - 1 == 0) {\\n            System.out.print(\"1\");\\n        }\\n        if (s1 - 0 == 0) {\\n            System.out.print(\"0\");\\n        }\\n    }\\n}\\n", "target": "165", "substitutes": {"a": ["aw", "ava", "aos", "p", "na", "ad", "i", "ba", "ar", "l", "r", "ao", "aa", "A", "app", "aj", "aux", "f", "au", "s", "c", "ga", "an", "x", "w", "sa", "ae", "e", "ai", "alpha", "af", "n", "b", "ac", "reader", "aaa", "another", "sta", "ast", "ama", "as", "area", "ab", "parser", "am", "va", "array"], "s1": ["ppre", "ps91", "g100", "es100", " s121", "ses0", "es1", "s6", "sumfirst", "sinf", "s2", "spec121", "i0", "usinf", " s001", " s91", "ses2", "gs1", "gsinf", "g121", " s6", "p121", "sfirst", "spec2", "p1", "espre", "sumart", "es2", "g2", "sOne", "gsOne", "gs8", "sesone", "ses001", "s001", "s121", "ses1", "spec8", "sum2", "s0", "ps2", "g1", "ses5", "i1", " s100", "s91", "p91", "ione", "sone", "sum1", "part", "s5", "specOne", "s8", "p0", "spec1", "p100", " sart", " spre", "pone", "usOne", "es5", "ps6", "us1", " s5", "sv2", "spre", "sart", "us8", "p2", "s100", "sv1", "specinf", "i2", "pfirst", " sfirst", "ps1", " s2", "ses100", "p6", "specfirst", "sv001"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nclass Main{\\n\tstatic final long MOD = 1_000_000_007; // 10^9+7\\n    static final int MAX = 2_147_483_646; // intMax \\n    static final int INF = 1_000_000_000; // 10^9  \\n    public static void main(String[] args) throws Exception {\\n\t\thayami saori = new hayami();\\n\t\tint n = saori.saori_hayami();\\n\t\tString[] s = saori.nextHayami().split(\"\");\\n\t\tint ans = 0;\\n\t\tfor(int i = 0;i < s.length - 2;i++){\\n\t\t\tif(s[i].equals(\"A\") && s[i+1].equals(\"B\") && s[i+2].equals(\"C\")){\\n\t\t\t\tans++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t\tsaori.close();\\n    }\\n}\\n\\nclass hayami implements Closeable {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] hayami = new byte[1024];\\n\tprivate int Hayami = 0;\\n\tprivate int saori = 0;\\n\tprivate boolean HayamiSaori() {\\n\t\tif (Hayami < saori) {\\n\t\t\treturn true;\\n\t\t}else{\\n\t\t\tHayami = 0;\\n\t\t\ttry {\\n\t\t\t\tsaori = in.read(hayami);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (saori <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\tprivate int SaoriHayami() { \\n\t\tif (HayamiSaori()) {\\n            return hayami[Hayami++];\\n         }else{\\n             return -1;\\n         }\\n\t}\\n\tprivate static boolean hayami_saori(int hayami) { \\n\t\treturn 33 <= hayami && hayami <= 126;\\n\t}\\n\tpublic boolean hayamisaori() { \\n\t\twhile(HayamiSaori() && !hayami_saori(hayami[Hayami])) Hayami++; return HayamiSaori();\\n\t}\\n\tpublic String nextHayami() {\\n\t\tif (!hayamisaori()) throw new NoSuchElementException();\\n\t\tStringBuilder hayamin = new StringBuilder();\\n\t\tint saori = SaoriHayami();\\n\t\twhile(hayami_saori(saori)) {\\n\t\t\thayamin.appendCodePoint(saori);\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t\treturn hayamin.toString();\\n\t}\\n\tpublic long saorihayami() {//nextLong\\n\t\tif (!hayamisaori()) throw new NoSuchElementException();\\n\t\tlong hayami = 0;\\n\t\tboolean misao = false;\\n\t\tint saori = SaoriHayami();\\n\t\tif (saori == '-') {\\n\t\t\tmisao = true;\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t\tif (saori < '0' || '9' < saori) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile(true){\\n\t\t\tif ('0' <= saori && saori <= '9') {\\n\t\t\t\thayami *= 10;\\n\t\t\t\thayami += saori - '0';\\n\t\t\t}else if(saori == -1 || !hayami_saori(saori)){\\n\t\t\t\treturn misao ? -hayami : hayami;\\n\t\t\t}else{\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t}\\n\tpublic int saori_hayami() {//nextInt\\n\t\tlong hayami = saorihayami();\\n\t\tif (hayami < Integer.MIN_VALUE || hayami > Integer.MAX_VALUE) throw new NumberFormatException();\\n\t\treturn (int) hayami;\\n\t}\\n\tpublic double Hayamin() { //nextDouble\\n\t\treturn Double.parseDouble(nextHayami());\\n\t}\\n\tpublic void close() {\\n\t\ttry {\\n\t\t\tin.close();\\n\t\t} catch (IOException e) {\\n\t\t}\\n    }\\n    \\n}", "target": "110", "substitutes": {"MOD": [" LIB", "VALUE", " BIG", " mod", "ID", "VERSION", " DUP", " DEBUG", " MAG", "SIZE", " MIN", " LOC", "MODE", " REG", " Mod", " reg", "Mod", "max", " Z", "REG", " Mem", "UID", "mod", " LR", "MAX", "NUM", " mods", " MODULE"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\\n\t\tint count = 0;\\n\t\tfor(int i=1; i<=N; i++) {\\n\t\t\tint judge = 0;\\n\t\t\tfor(int j=1; j<=i; j++) {\\n\t\t\t\tif(i % j == 0 && i % 2 == 1) {\\n\t\t\t\t\tjudge ++;\\n\t\t\t\t}\\n\t\t\t}if(judge == 8) {\\n\t\t\t\tcount ++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\\n\t}\\n\\n}\\n", "target": "85", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "sf", "pc", "ser", "ch", "ss", " SC", "sub", "sh", "Sc", "SC", "cb", "bc", "cs", "src", "ci", "sl", "c", "sp", "str", "acc", "sq", "uc", "g", "sr", "ca", "sem", "se", "ner", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "ctx"], "N": ["S", "Num", "Count", "size", "NL", "C", "J", "M", "Size", "Y", "X", "F", "NN", "Q", "P", "A", "Ni", "T", "I", "L", "R", "n", "B", "network", "V", "Limit", "K", "D", "NT", "H", "O", "Ns", "NS", "G", "NI"], "count": ["counter", "total", "call", "second", "now", "Count", "size", "test", "bug", "id", "num", "allow", "keep", "name", "start", "info", "error", "length", "c", "sum", "key", "check", "index", "weight", "depth", "list", "base", "col", "code", "n", "b", "limit", "ignore", "found", "log", "level", "number", "cc", "cache", "match", "ind", "out", "coll"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "iu", "u", "id", "qi", "xi", "ji", "v", "jp", "si", "ix", "l", "a", "is", "start", "io", "init", "z", "info", "f", "ci", "c", "ui", "ini", "index", "eni", "x", "di", "ip", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "b", "zi", "li", "oi", "k", "in", "chi", "y", "ind", "ti"], "judge": ["Judged", "juenge", "zyge", "badged", "judger", "doggest", "judenge", "hogge", "judged", "jugest", "zygest", "jucess", "doggment", "Judger", "badgment", "hogenge", "zyenge", "judgest", "judcess", "hogcess", "juge", "Judgment", "juged", "juger", "Judgest", "Judge", "zycess", "hoggest", "jugment", "dogger", "badger", "badge", "dogge", "judgment"], "j": ["dj", "jj", "pi", "jc", "p", "oj", "it", "u", "J", "bj", "ji", "ch", "v", "jp", "si", "l", "ij", "z", "aj", "f", "ci", "ui", "c", "key", "x", "e", "ja", "I", "uj", "ie", "o", "gi", "d", "n", "b", "ii", "li", "js", "obj", "k", "job", "y", "jl", "ind", "jo"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc =new Scanner(System.in);\\n\t\tint A=sc.nextInt();\\n\t\tint B=sc.nextInt();\\n\t\tif((A*B)%2==0)System.out.println(\"Even\");\\n\t\telse System.out.println(\"Odd\");\\n\t}\\n}", "target": "112", "substitutes": {"sc": ["cl", "sci", "nc", "sf", "scope", "pc", "class", "com", "ch", "tc", "ss", "sec", "server", " SC", "cur", "asc", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "cv", "src", "lc", "ci", "sl", "c", "cer", "sp", "acc", "text", "sq", "uc", "ca", "se", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "ec", "esc", "sync"], "A": ["AD", "S", "AR", "C", "Ca", "N", "AA", "M", "LA", "a", "As", "U", "Y", "F", "P", "SA", "Ang", "Am", "Na", "API", "T", "I", "L", "Ab", "Alpha", "AF", "AC", "AB", "D", "H", "O", "CA", "G", "E", "X"], "B": ["BL", "S", "Bs", "C", "SB", "J", "N", "M", "Bi", "Y", "F", "WB", "UB", "VB", "Q", "P", "T", "I", "L", "R", "b", "V", "DB", "NB", "AB", "OB", "D", "GB", "H", "O", "Z", "G", "IB", "TB", "W", "E", "LB", "X"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc =new Scanner(System.in);\\n    int A=sc.nextInt();\\n    int B=sc.nextInt();\\n    int C=sc.nextInt();\\n    if((A==B)&&\\n      (A==C)){System.out.println(\"No\");}\\n    else if((((!(A==B))&&\\n            (!(B==C)))&&\\n            (!(C==A)))){System.out.println(\"No\");}\\n    else{System.out.println(\"Yes\");}\\n  }\\n}", "target": "117", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "scope", "pc", "ser", "ck", "ch", "sec", "ss", "tc", " SC", "cur", "asc", "sh", "search", "Sc", "SC", "ct", "exp", "bc", "cs", "sw", "cor", "lc", "loc", "c", "cer", "sp", "acc", "ec", "sq", "uc", "soc", "sr", "ca", "cle", "se", "ner", " Sc", "sb", "scan", "parse", "osc", "rc", "cr", "cont", "sch", "parser", "out", "esc", "ctx", "cus", "sync"], "A": ["AD", "S", "AS", "EC", "AR", "AM", "NA", "Ac", "Ca", "An", "AA", "N", "M", "CC", "LA", "a", "As", "U", "Y", "Java", "Az", "F", "E", "BA", "AP", "This", "P", "Ma", "PA", "SA", "Area", "Na", "API", "T", "I", "App", "L", "Ab", "HA", "Alpha", "Ar", "V", "AF", "AC", "All", "D", "H", "IA", "CA", "AB", "X"], "B": ["Bs", "Ca", "BF", "N", "BI", "M", "U", "Y", "QB", "X", "F", "WB", "BA", "Q", "P", "BC", "BB", "File", "BR", "T", "I", "L", "R", "b", "BE", "V", "BD", "AB", "Be", "OB", "D", "GB", "H", "O", "CA", "G", "Cl", "W", "E", "LB", "DB"], "C": ["Cu", "FC", "CU", "S", "EC", "CI", "Ca", "N", "CC", "CF", "VC", "U", "Y", "SC", "CR", "Sc", "F", "CT", "Q", "CL", "Con", "Code", "P", "BC", "c", "Ch", "CD", "CB", "T", "NC", "CM", "CP", "L", "V", "DC", "AC", "K", "D", "O", "Z", "CA", "G", "Cl", "JC", "CS", "E", "X"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tScanner sc = new Scanner(System.in);\\n\tfinal int MOD = 1000000007;\\n\tfinal int MAX = Integer.MAX_VALUE;\\n\tfinal long LMAX = Long.MAX_VALUE;\\n\\n\tvoid doIt() {\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tSystem.out.println(Math.max(c - (a - b), 0));\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().doIt();\\n\t}\\n}\\n", "target": "45", "substitutes": {"sc": ["cl", "sche", "nc", "sci", "scope", "pc", "ch", "sec", "ss", "tc", "server", " SC", "asc", "search", "sh", "fc", "Sc", "SC", "ct", "bc", "cs", "sw", "src", "cv", "cor", "lc", "ci", "cer", "console", "sp", "system", "sq", "uc", "cli", "se", "ner", " Sc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "spec", "esc", "ctx", "cus", "sync"], "MOD": [" CC", " mod", "ID", " Max", " BC", " U", "sec", "M", "CC", "CE", "ALL", " CRC", " CL", " m", " F", "CL", "RC", "SIZE", " C", " MIN", " P", "Mod", "MIN", " M", "mod", " LC"], "MAX": ["maximum", "EC", "Maximum", "C", " Max", "N", " max", "CC", "CR", "SC", "CL", "EST", "SIZE", "RA", " C", "GE", "MIN", "max", "R", "Max", "AX", "DC", "K", "UC", "CV", "CA", "X"], "LMAX": ["lVALUE", "LMax", "LVALUE", "lMax", "lMAX", " LVALUE", "LIVALUE", "LImax", " Lmax", " LMax", "lmax", "LIMAX", "LIMax", "Lmax"], "a": ["count", "p", "na", "ad", "auto", "i", "ba", "r", "mA", "aa", "A", "f", "s", "ga", "an", "base", "sa", "e", "ae", "ea", "alpha", "d", "n", "ca", "ac", "qa", "fa", "as", "y", "la", "area", "ab", "da", "va", "aj"], "b": ["bi", "count", "p", "u", "rb", "v", "i", "ba", "l", "r", "aa", "z", "bc", "h", "A", "f", "eb", "m", "x", "e", "o", "d", "n", "B", "abc", "j", "k", "sb", "bb", "y", "ab"], "c": ["nc", "count", "p", "C", "u", "i", "l", "cu", "fc", "cb", "z", "cs", "bc", "h", "f", "lc", "ci", "dc", "cm", "m", "x", "e", "uc", "cf", "d", "n", "ca", "abc", "ac", "k", "cc", "cr", "ec"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\t\\n\t\tString s = in.next();\\n\t\tint nam = s.length();\\n\t\tchar[] s_chars = s.toCharArray();\\n\t\t\\n\t\tint nam2 = nam/2;\\n\t\tint cnt = 0;\\n\t\tfor(int i = 0;i<nam2;i++){\\n\t\t    if(s_chars[i] != s_chars[nam-i-1]){\\n\t\t        cnt++;\\n\t\t    }\\n\t\t}\\n       \\n       System.out.print(cnt);\\n      \\n\t}\\n}", "target": "115", "substitutes": {"in": ["conf", "isin", "login", "ins", "serv", "din", "ln", "arin", "ex", "binary", "line", "bis", "is", "lin", "diff", "r", "re", "init", "sin", "win", "source", "input", "In", "f", "tin", "er", "inn", "ini", "c", "t", "arg", "x", "nin", "str", "e", "string", "min", "inner", "rin", "n", "cli", "b", "err", "again", "pass", "reader", "pin", "scan", "vin", "bin", "as", "inc", "IN", "out", "query"], "s": ["S", "sf", "p", "u", "ins", "ss", "v", "si", "strings", "l", "bis", "a", "is", "sv", "es", "ls", "ws", "sin", "h", "bs", "f", "south", "sl", "c", "ds", "m", "e", "submit", "ssl", "ses", "string", "n", "ns", "b", "services", "su", "sb", "as", "t"], "nam": ["nn", "mom", "dam", "comb", "prefix", "size", "dn", "sex", "na", "gram", "num", "com", "nan", "span", "sit", "cn", "sam", "sn", "name", "my", "nm", "gap", "sim", " dim", "width", "cm", "inn", "sum", "amin", "di", "cin", "mix", "ram", "tim", "gin", "nom", "nw", "mi", "dim", "dy", "sem", "names", "sym", "jam", "nav", "shape", "missing", "cam", "am", "mem"], "s_chars": ["s_chears", "s_charars", "s_Charts", "s_cheara", "s_Chacters", "s_cheas", "s_compans", "s_chases", "s_Chas", "s_Chases", "s_compars", "s_charans", "s_chas", "s_charas", "s_cheans", "s_pas", "s_chans", "s_charts", "s_pars", "s_compara", "s_cheacters", "s_characters", "s_Chans", "s_charases", "s_chara", "s_cheases", "s_pacters", "s_compas", "s_Chars", "s_chacters", "s_charara", "s_parts", "s_chearts"], "nam2": ["num1", "cam02", "nnTwo", "nn02", "num02", "nn2", "am02", "amin2", "ram0", "ram1", "ram02", "ram2", "nam02", "amTwo", "amin1", "nam0", "amin02", "camTwo", "amin0", "num0", "cam2", "nam1", "namTwo", "num2", "am2"], "cnt": ["cnc", "acpt", "ccount", "cNT", "lcNT", "lcnt", "count", "lccount", "Count", "acent", " count", "ecrt", " cnc", "CNT", "encnt", " cNT", "acrt", "encpt", " cpt", "crt", "encount", "cent", "acount", "lcrt", "account", " cent", "ecnt", "eccount", "acnt", "cpt", "lcnc", "lcount", "Cnc", "encent", "Cnt", "ecount"], "i": ["bi", "hi", "pi", "ni", "p", "it", "u", "multi", "qi", "ji", "xi", "v", "si", "ix", "l", "a", "uni", "ri", "uli", "io", "info", "z", "f", "ci", "ui", "c", "ini", "index", "m", "eni", "x", "mu", "uri", "ip", "di", "I", "ai", "o", "gi", "n", "ii", "zi", "b", "li", "j", "oi", "k", "chi", "t", "ti"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u5165\u529b\\n            int a = Integer.parseInt(in.next());\\n            int b = Integer.parseInt(in.next());\\n            int c = Integer.parseInt(in.next());\\n            int k = Integer.parseInt(in.next());\\n            int ans = 0;\\n\\n            if (k <= a) {\\n                ans = k;\\n            } else if (k <= a + b) {\\n                ans = a;\\n            } else {\\n                ans = a - (k - a - b);\\n            }\\n\\n            // \u51fa\u529b\\n            out.println(ans);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "56", "substitutes": {"inputStream": ["InputChannel", "inputSteam", "outputSteam", " inputstream", "outputChannel", "outputCh", " inputSteam", "InputSteam", "inputCh", " inputCh", "InputCh", "Inputstream", " inputChannel", "InputStream", "outputstream", "inputChannel", "inputstream"], "outputStream": ["inputSteam", "outputSteam", "outputChannel", "OutputStreamer", "Outputstream", "responseStream", "OutputChannel", "responseSteam", "OutputStream", "inputStreamer", " outputSteam", "responseStreamer", "outputStreamer", "responsestream", "OutputSteam", "outputstream", " outputstream", "inputChannel", "inputstream", " outputChannel"], "in": ["this", "isin", "on", "id", "login", "ins", "din", "run", "i", "inside", "path", "data", "is", "request", "con", "lin", "r", "name", "io", "source", "init", "sin", "input", "win", "info", "In", "gen", "conn", "s", "image", "inn", "ini", "arg", "index", "nin", "config", "cin", "min", "gin", "inf", "inner", "plus", "n", "kin", "err", "again", "reader", "pin", "connection", "vin", "bin", "inc", "IN"], "out": ["this", "parent", "call", "client", "p", "loader", "null", "to", "server", "ex", "v", "i", "line", "page", "data", "name", "point", "io", "init", "temp", "input", "conn", "outside", "s", "outer", "user", "session", "arg", "password", "at", "output", "OUT", "w", "x", "process", "image", "writer", "string", "problem", "Out", "o", "inner", "n", "b", "err", "again", "pass", "write", "net", "exec", "connection", "no", "analysis", "log", "file", "bin", "outs", "external", "inc", "off", "cache", "error", "IN", "console", "window", "sync"], "solver": [" solution", "ssol", "solving", "ssolve", "unsolver", "ssolving", "Solver", "ssolver", "Sol", "ssolution", "solve", "solution", "Solution", " sol", "Solving", "unsolving", "Solve", "unsolve", "unsolution", " solve", "sol"], "testNumber": ["trialNumber", "TestNumber", "testNumbers", "testnumber", "TestNum", " testnumber", "Testnumber", "trialNumbers", "trialnumber", " testNum", " testNumbers", "testNum", "trialNum", "TestNumbers"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\n\\npublic class Main {\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int n = Integer.parseInt(br.readLine());\\n        \\n        //set array\\n        String[] st = br.readLine().split(\" \");\\n        int[] array = new int[n];\\n        for (int i = 0; i < n; i++){\\n            int a = Integer.parseInt(st[i]);\\n            array[i] = a;\\n        }\\n        \\n        int count = selectionSort(array);\\n        System.out.println(mkArrayString(array));\\n        System.out.println(count);\\n    }\\n    static String mkArrayString(int[] arr){\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < arr.length - 1; i++){\\n            sb.append(arr[i]);\\n            sb.append(\" \");\\n        }\\n        sb.append(arr[arr.length - 1]);\\n        return sb.toString();\\n    }\\n    static int selectionSort(int[] arr){\\n        //selectionSort and return swapcount\\n        int swapcnt = 0;\\n        for (int i = 0; i < arr.length; i++){\\n            int minj = i;\\n            for (int j = i; j < arr.length; j++){\\n                if ( arr[j] < arr[minj]){\\n                    minj = j;\\n                }\\n            }\\n            swap(arr, i, minj);\\n            if (i != minj) swapcnt += 1;\\n        }\\n        return swapcnt;\\n    }\\n    static void swap(int[] arr, int i, int j){\\n        int tmp = arr[i];\\n        arr[i] = arr[j];\\n        arr[j] = tmp;\\n    }\\n}", "target": "199", "substitutes": {"br": ["bl", "div", "p", "wr", "hr", "rb", "browser", "tr", "arr", "i", "cb", "fr", "r", "yr", "bh", "io", "bridge", "stream", "input", "src", "ler", "er", "dr", "mr", "BR", "ibr", "bro", " reader", "string", "Br", "result", "b", "err", "gr", "ner", "org", "reader", "obj", "buf", "ocr", "bb", "cr", "ref", "plug", "keeper", "Reader"], "n": ["nc", "nt", "p", "it", "num", "N", "ln", "i", "l", "sn", "r", "z", "h", "nl", "f", "s", "c", "m", "e", "o", "d", "ns", "g", "b", "nb", "j", "k", " N"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc=new Scanner(System.in);\\n        int a =sc.nextInt();\\n        int b =sc.nextInt();\\n        int c =sc.nextInt();\\n        if(a*b>c){\\n            System.out.println(c);\\n        }else if(a*b<c){\\n            System.out.println(a*b);\\n        }else{\\n            System.out.println(c);\\n        }\\n    }\\n    \\n}\\n", "target": "213", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "ser", "com", "ch", "sec", "ss", "tc", " SC", "cur", "asc", "Sc", "SC", "cs", "bc", "sw", "src", "cor", "desc", "lc", "ci", "cer", "sp", "acc", "sq", "uc", "soc", "ca", "sem", "se", " Sc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "coll", "ec", "esc", "ctx", "sync"], "a": ["api", "p", "ia", "u", "na", "ad", "auto", "ba", "i", "aa", "A", "oa", "pa", "f", "au", "ga", "an", "x", "sa", "ae", "ada", "ea", "ai", "alpha", "d", "af", "n", "ca", "ac", "aaa", "ama", "fa", "as", "la", "asa", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["fb", "bi", "p", "u", "pb", "rb", "ad", "v", "i", "ba", "l", "db", "cb", "r", "bf", "aa", "be", "h", "z", "lb", "bc", "bs", "f", "eb", "w", "x", "e", "o", "d", "n", "g", "B", "ac", "nb", "j", "sb", "bb", "bd", "fa", "y", "wb", "ab"], "c": ["cl", "cat", "count", "p", "pc", "C", "u", "ch", "v", "cn", "i", "cur", "l", "fc", "cb", "ct", "cu", "r", "h", "z", "bc", "cs", "f", "lc", "ci", "s", "dc", "x", "cy", "e", "col", "uc", "cf", "code", "o", "d", "n", "g", "ca", "ac", "cd", "rc", "cc", "y", "ec", "unc"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main{\\n    \\n \\n    public static void main(String[] args)  {\\n        new Main().solve();\\n    }\\n\\n    void solve(){\\n        Scanner sc = new Scanner(System.in);\\n        int K = Integer.parseInt(sc.next());\\n        int N = Integer.parseInt(sc.next());\\n\\n        int[] a = new int[N];\\n        for(int i=0; i<N; i++){\\n            a[i] = Integer.parseInt(sc.next());\\n        }\\n\\n        sc.close();\\n\\n        int[] b = new int[N];\\n        b[0] = a[1] - a[0];\\n        for(int i=1; i<N-1; i++){\\n            b[i] = a[i+1] - a[i];\\n        }\\n        b[N-1] = K - a[N-1] + a[0];\\n\\n        // System.out.println(Arrays.toString(b));\\n\\n        ArrayList<Integer> list = new ArrayList<>();\\n        for(int i=0; i< N; i++){\\n            list.add(b[i]);\\n        }\\n\\n        Arrays.sort(b);\\n        int result=0;\\n        for(int i=0; i<N-1; i++){\\n            result += b[i];\\n        }\\n\\n        System.out.println(result);\\n\\n    }\\n}", "target": "10", "substitutes": {"sc": ["sche", "mc", "sci", "nc", "enc", "sf", "scope", "pc", "ch", "tc", "ss", " SC", "si", "cur", "asc", "sh", "Sc", "SC", "sv", "exp", "cs", "bc", "sw", "src", "cv", "lc", "ci", "cer", "c", "sp", "system", "uc", "soc", "sr", "ca", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "scene", "spec", "ec", "esc", "cus", "sync"], "K": ["S", "C", "J", "M", "U", "Y", "X", "NK", "KB", "F", "Q", "P", "A", "Key", "I", "L", "B", "V", "k", "Ka", "D", "H", "Z", "O", "KI", "G", "KE", "KS", "SK", "W", "E"], "N": ["Len", "S", "Num", "IN", "No", "NA", "C", "Part", "J", "M", "Size", "U", "Y", "Node", "F", "Network", "NN", "Q", "P", "A", "Group", "Na", "Key", "Ni", "I", "T", "NC", "L", "R", "n", "B", "Ne", "V", "NB", "D", "NT", "H", "Z", "NS", "Ns", "O", "G", "NE", "W", "X"], "a": ["ana", "p", "ia", "u", "na", "ad", "access", "ba", "out", "aa", "A", "input", "aj", "oa", "app", "tta", "f", "au", "c", "ga", "at", "ata", "an", "x", "img", "sa", "ae", "w", "e", "active", "ai", "alpha", "d", "n", "ca", "ac", "k", "sta", "in", "as", "la", "asa", "area", "ab", "da", "y", "ma", "am", "va", "array"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "ami", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "data", "uni", "ri", "r", "start", "init", "io", "info", "z", "abi", "f", "ci", "ui", "ini", "c", "key", "index", "m", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ie", "ai", "q", "o", "gi", "d", "mi", "n", "ii", "li", "j", "oi", "k", "in", "y", "ti", "fi"], "b": ["p", "mb", "back", "u", "pb", "abb", "ad", "binary", "v", "ba", "l", "ib", "bis", "part", "r", "bf", "be", "z", "bc", "A", "f", "eb", "s", "c", "m", "base", "e", "o", "d", "n", "g", "B", "body", "nb", "j", "bb", "bin", "y", "area", "ab", "array"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStreamWriter;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    static PrintWriter out;\\n    static CF_Reader in;\\n\\n    public static void main(String[] args) throws IOException {\\n        out = new PrintWriter(new OutputStreamWriter(System.out));\\n        in = new CF_Reader();\\n\\n        out.println(in.intNext() * in.intNext());\\n\\n        out.close();\\n    }\\n\\n\\n    static class CF_Reader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public CF_Reader() throws IOException {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() throws IOException {\\n            while (st == null || !st.hasMoreTokens())\\n                st = new StringTokenizer(br.readLine().trim());\\n            return st.nextToken();\\n        }\\n\\n        long longNext() throws IOException {\\n            return Long.parseLong(next());\\n        }\\n\\n        int intNext() throws IOException {\\n            return Integer.parseInt(next());\\n        }\\n\\n        double doubleNext() throws IOException {\\n            return Double.parseDouble(next());\\n        }\\n\\n        char charNext() throws IOException {\\n            return next().charAt(0);\\n        }\\n\\n        public int[] nextIntArray(final int n) throws IOException {\\n            final int[] a = new int[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = intNext();\\n            return a;\\n        }\\n\\n        public long[] nextLongArray(final int n) throws IOException {\\n            final long[] a = new long[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = longNext();\\n            return a;\\n        }\\n\\n        String line() throws IOException {\\n            return br.readLine().trim();\\n        }\\n    }\\n}\\n\\n\\n", "target": "35", "substitutes": {"out": ["this", "parent", "print", "client", "p", "prefix", "buffer", "gz", "null", "to", "ex", "ext", "path", "line", "ou", "name", "part", "r", "io", "init", "win", "co", "input", "temp", "conn", "outer", "user", "key", "output", "w", "OUT", "base", "str", "plain", "writer", "string", "Out", "o", "inner", "cli", "b", "err", "again", "pass", "reader", "write", "net", "obj", "up", "exec", "log", "file", "bin", "outs", "inc", "copy", "error", "IN", "array", "window", "sync"], "in": ["this", "ic", "rec", "p", "id", "login", "ins", "din", "ex", "run", "inside", "before", "path", "l", "el", "into", "data", "lin", "con", "r", "line", "is", "io", "init", "stream", "h", "input", "win", "src", "source", "f", "In", "conn", "gen", "inn", "ini", "c", "index", "w", "x", "nin", "config", "str", "cin", "socket", "token", "min", "gin", "o", "inner", "read", "plus", "inf", "cli", "b", "err", "kin", "again", "current", "reader", "pin", "exec", "up", "connection", "bin", "readable", "file", "inc", "IN", "t"], "br": ["bl", "ber", "p", "hr", "rb", "serv", "ch", "tr", "rs", "pr", "arr", "vr", "lr", "el", "fr", "ctr", "r", "bh", "iter", "bridge", "bc", "bal", "src", "ler", "dr", "mr", "BR", "sp", "bro", "str", "kr", "Br", "brush", "ver", "sr", "b", "err", "result", "gr", "reader", "j", "buf", "sb", "bb", "cr", "bt", "bar", "rt", "fore", "ru"], "st": ["bl", "ut", "cl", "inst", "ste", "trans", "sth", "ST", "nd", "stable", "ss", "tr", "pr", "const", "STR", "sh", "ct", "fr", "std", "sn", "r", "start", "ft", "fe", "sw", "src", "first", "dr", "sl", "s", "est", "sp", "sa", "str", "ist", "string", "pt", "stri", "rest", "ld", "sr", "b", "St", "se", "sb", "lt", "sta", "ast", "sts", "rd", "struct", "cr", "ost", "bt", "tt", "rt", "th", "sc", "t"], "n": ["all", "none", "nc", "nt", "count", "p", "size", "null", "na", "num", "nan", "N", "span", "v", "l", "name", "sn", "init", "z", "f", "nat", "c", "ne", "m", "an", "x", "w", "e", "left", "o", "d", "ns", "b", "g", "network", "nb", "j", "net", "k", "no", "not", "number", "y", "en", "t"], "a": ["all", "aw", "div", "anta", "p", "ia", "na", "ad", "span", "ba", "data", "r", "aa", "z", "h", "A", "ha", "aux", "tta", "f", "au", "c", "ga", "at", "ata", "an", "action", "m", "sa", "ea", "ae", "e", "code", "alpha", "o", "g", "array", "ca", "b", "ac", "aaa", "ama", "as", "la", "y", "area", "ab", "da", "ma", "am", "va", "aj"], "i": ["bi", "hi", "ic", "pi", "ni", "iu", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "mini", "ri", "io", "z", "h", "info", "f", "ci", "ui", "ini", "eni", "phi", "x", "mu", "m", "uri", "e", "ip", "di", "I", "ie", "ai", "q", "o", "gi", "mi", "g", "ii", "b", "li", "field", "j", "oi", "yi", "y", "my", "fi"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\t\tString b = \"ABC\";\\n\t\tString r = \"ARC\";\\n\\n\t\tif(S.equals(b))\\n\t\tSystem.out.println(\"ARC\");\\n\t\telse if(S.equals(r))\\n\t\tSystem.out.println(\"ABC\");\\n\t\t\\n\t}\\n}", "target": "153", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", " SC", "sub", "asc", "sh", "search", "Sc", "SC", "ct", "exp", "bc", "cs", "sw", "desc", "ci", "s", "c", "cer", "sp", "acc", "system", "uc", "soc", "ca", "se", "ner", " Sc", "ocr", "exec", "scan", "osc", "rc", "cc", "cr", "spec", "esc", "sync"], "S": ["SI", "AS", "SS", "SL", "ST", "SN", "VS", "IS", "TS", "C", "SB", "US", "N", "ss", "M", "RS", "SE", "U", "Sc", "SH", "Si", "STR", "SU", "F", "SC", "Y", "GS", "WS", "A", "SA", "P", "Sign", "BS", "s", "SO", "T", "string", "L", "R", "B", "St", "V", "NS", "SR", "SD", "SK", "Sl"], "b": ["bi", "fb", "u", "pb", "rb", "ba", "a", "l", "db", "cb", "bf", "bh", "lb", "BB", "bc", "bs", "f", "eb", "bas", "s", "c", "base", " B", "d", "n", "B", "abc", "nb", "sb", "bb", "xb", "bd", "bot", "bt", "wb", "ab", "emb", "ob"], "r": ["rar", "rn", " R", "ir", "p", "u", "hr", "rb", "rs", "v", "pr", "arr", "vr", "ar", "l", "a", "fr", "ur", "ri", "rh", "nr", "er", "br", "f", "s", "c", "x", "R", "d", "sr", "err", "abc", "rr", "ner", "rel", "rd", "cr", "rl", "rt", "range"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Comparator;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n\\n        List<Integer> list = new ArrayList<>();\\n        for (int i = 0; i < n; i++) list.add(sc.nextInt());\\n\\n        int min = list.stream().min(Comparator.naturalOrder()).get();\\n        int max = list.stream().max(Comparator.naturalOrder()).get();\\n        System.out.println(max-min);\\n    }\\n}", "target": "214", "substitutes": {"sc": ["cl", "sci", "nc", "scope", "pc", "ch", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "cor", "cv", "lc", "ci", "c", "cer", "sp", "system", "uc", "sr", "ca", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "spec", "ec", "esc", "cus", "sync"], "n": ["nn", "nc", "nt", "count", "p", "u", "num", "N", "ln", "v", "l", "r", "z", "h", "len", "f", "s", "c", "m", "w", "x", "q", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "number", "y", "en", "t"], "list": ["all", "cl", "bl", "parent", "lat", "chain", "low", "live", "test", "and", "null", "table", "queue", "view", "stack", "keep", "search", "l", "pool", "iter", "stream", "get", "collection", "lc", "index", "load", "full", "st", "left", "L", "set", "cli", "loop", "li", "LIST", "sequence", "tree", "group", "lists", "la", "cont", "lock", "cache", "batch", "act", "array", "coll"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "id", "u", "multi", "qi", "xi", "v", "si", "io", "info", "h", "abi", "f", "ci", "ui", "ini", "index", "m", "phi", "ip", "e", "di", "I", "ai", "o", "gi", "inner", "gu", "ii", "zi", "li", "j", "oi", "in", "chi", "ti", "fi"], "min": ["all", "div", "none", "low", "p", "size", "id", "minimum", "next", "span", "mins", "v", "average", "emin", "sort", "name", "mini", "pre", "r", "diff", "start", "value", "init", "un", "lower", "get", "len", "first", "f", "last", "sum", "weight", "base", "sa", "e", "MIN", "skip", "prev", "small", "js", "in", "sol", "Mini", "position", "from", "mean", "local", "range", "Min", "en", "default"], "max": ["all", "head", "cl", "total", "cat", "conf", "none", "chain", "count", "p", "and", "now", "patch", "id", "nd", "next", "ad", "auto", "add", "average", "res", "line", "std", "right", "info", "end", "first", "length", "last", "az", "sum", "ax", "load", "mad", "base", "depth", "pop", "active", "big", "rest", "plus", "Max", "ver", "rank", "with", "limit", "ca", "top", "step", "scale", "mod", "parse", "from", "mean", "MAX", "dec", "range", "post", "out", "pad", "default"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = scanner.nextInt();\\n        int[] h = new int[n];\\n        int[] curH = new int[n];\\n        \\n        for (int i = 0; i < n; i++) {\\n            h[i] = scanner.nextInt();\\n        }\\n        int count = 0;\\n        outer:\\n        while (true) {\\n            int start = 0, end = 0;\\n            for (start = 0; start < n; start++) {\\n                if (curH[start] < h[start]) {\\n                    break;\\n                }\\n            }\\n            if (start >= n) {\\n                break;\\n            }\\n            count++;\\n            int i;\\n            for (i = start; i < n; i++) {\\n                if (curH[i] < h[i]) {\\n                    curH[i]++;\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        System.out.println(count);\\n    }\\n}\\n", "target": "77", "substitutes": {"scanner": [" scaner", " scanener", "scanker", "anner", "caner", "scanister", "nerter", "scanter", "annter", "Scanister", "Scanler", "scanener", "nerner", "Scanener", "canler", "scaner", "nerer", "canener", "Scanker", " scanister", "Scanter", "Scaner", "annner", "nerker", "annker", "canner", "Scanner", "canister", "scanler", " scanler"], "n": ["nn", "none", "nc", "nt", "ni", "p", "size", "na", "u", "num", "N", "ln", "v", "l", "out", "sn", "r", "init", "z", "len", "f", "nat", "conn", "s", "c", "ne", "m", "w", "x", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "no", "in", "number", "y", "stop", "en", "t"], "h": ["head", "hi", "p", "he", "id", "u", "hr", "ch", "gh", "v", "help", "path", "sh", "l", "uh", "rh", "bh", "ht", "home", "header", "ph", "ha", "ah", "f", "c", "m", "w", "x", "hand", "han", "hist", "q", "o", "hs", "d", "hw", "g", "b", "ih", "hm", "k", "hh", "host", "H", "y", "oh", "t", "wh"], "curH": ["curh", "parseH", "varh", "varHK", "prevP", "parseHK", "prevH", " curP", "curHM", "CurH", "trih", "curP", "parseHM", "curHC", "drV", " curh", "prevh", "CurP", "triH", "prevV", "drH", "varHM", "Curh", "triV", " curV", "CurHC", "curV", " curHK", "drh", "curHK", "CurV", "CurHM", "parseh", "triHM", "drHC", " curHC", "varH", " curHM"], "i": ["bi", "hi", "pi", "ni", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "v", "si", "ix", "l", "a", "line", "is", "name", "mini", "ri", "init", "io", "info", "get", "z", "f", "ci", "ui", "ini", "key", "c", "index", "eni", "phi", "x", "base", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "g", "ii", "b", "li", "j", "oi", "k", "child", "in", "chi", "y", "ind"], "count": ["counter", "total", "offset", "call", "nt", "p", "Count", "size", "test", "id", "num", "keep", "name", "part", "info", "len", "cond", "length", "f", "last", "c", "sum", "key", "check", "index", "depth", "base", "list", "col", "max", "code", "skip", "inner", "d", "b", "loop", "cache", "child", "found", "number", "stop", "close", "ind"], "start": ["offset", "p", "change", "size", "it", "id", "next", "ad", "cur", "add", "l", "data", "old", "name", "use", "part", "find", "diff", "init", "source", "info", "get", "vert", "first", "length", "c", "key", "check", "index", "w", "x", "base", "st", "ie", "min", "read", "rest", "d", "set", "shift", "skip", "se", "open", "j", "pos", "starting", "k", "step", "in", "no", "from", "art", "type", "stop", "ind", "Start"], "end": ["offset", "ending", "size", "id", "nd", "wind", "length", "last", "c", "order", "send", "index", "e", "en", "max", "rest", "set", "limit", "ends", "open", "pos", "ended", "stop", "range", "ind", "append"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\nclass Main{\\n    private static final Scanner sc = new Scanner(System.in);\\n    private static final PrintWriter out = new PrintWriter(System.out);\\n    public static void main(String[] Args){\\n        while(true){\\n            final int h = Integer.parseInt(sc.next());\\n            final int w = Integer.parseInt(sc.next());\\n            if(h==0&&w==0) break;\\n            for(int i = 0; i<h; i++){\\n                for(int j = 0; j<w; j++){\\n                    out.print(\"#\");\\n                }\\n                out.println();\\n            }\\n            out.println();\\n        }\\n        out.flush();\\n    }\\n}", "target": "87", "substitutes": {"sc": ["this", "cl", "enc", "mc", "sci", "nc", "scope", "pc", "server", "ch", "ss", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "lc", "ci", "c", "cer", "sp", "acc", "system", "sq", "uc", "soc", "cli", "ca", "cle", "se", "ner", "scan", "in", "osc", "rc", "cc", "cr", "cont", "inc", "scene", "spec", "esc", "ctx", "sync"], "out": ["all", "this", "parent", "client", "buffer", "size", "null", "to", "ex", "auto", "line", "pool", "page", "a", "ou", "png", "point", "name", "part", "io", "timeout", "source", "temp", "input", "conn", "outer", "external", "down", "key", "output", "OUT", "list", "plain", "writer", "socket", "Out", "o", "comment", "cli", "result", "err", "again", "write", "flush", "exec", "up", "obj", "in", "log", "bin", "group", "outs", "word", "exit", "inc", "off", "copy", "cache", "error", "IN", "console", "window", "sync"], "Args": ["ams", "func", "ars", "arr", "line", "Cmd", "Array", "name", " arg", "cmd", "In", "loc", "params", "arg", "config", "str", "Out", "Str", "gs", "cli", "command", "Arg", "parser", "Line", "Name", "ctx"], "h": ["hi", "p", "he", "id", "hr", "gh", "v", "sh", "l", "uh", "rh", "bh", "ht", "ph", "z", "ha", "length", "f", "c", "height", "m", "x", "hs", "o", "hw", "n", "b", "ih", "wa", "hm", "k", "hh", "H", "y", "oh", "eh", "th", "dh"], "w": ["aw", "wp", "how", "p", "u", "v", "fw", "sh", "l", "wd", "ws", "rh", "z", "win", "sw", "width", "c", "wx", "weight", "m", "x", "ww", "wt", "d", "hw", "n", "ow", "b", "ew", "wa", "k", "work", "wall", "y", "we", "W", "wh"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "it", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "ik", "ri", "io", "init", "z", "f", "ci", "vi", "c", "ini", "ui", "index", "phi", "e", "ip", "di", "I", "ai", "gi", "n", "ii", "b", "zi", "li", "oi", "k", "y"], "j": ["dj", "jj", "jc", "p", "oj", "J", "qi", "bj", "ji", "ch", "v", "jp", "si", "l", "el", "ij", "is", "r", "z", "end", "aj", "length", "f", "br", "width", "ui", "key", "index", "str", "ja", "pt", "uj", "ie", "q", "o", "d", "g", "ii", "b", "li", "js", "k", "obj", "job", "y", "jl", "jo"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n   \tScanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    Integer p[] = new Integer[n];\\n    for(int i=0;i<n;i++){\\n      p[i] = sc.nextInt();\\n    }\\n    int d = 0;\\n    Integer q[] = new Integer[n];\\n    for(int i=0;i<n;i++){\\n      q[i] = i+1;\\n    }\\n\\n\\n\\n    for(int i=0;i < n ;i++){\\n      if(p[i] != q[i]){\\n        d ++;\\n      }\\n    }\\n    if(d == 2 || d == 0){\\n      System.out.println(\"YES\");\\n    }else{\\n      System.out.println(\"NO\");\\n    }\\n\\n    }\\n\\n  }\\n", "target": "82", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", "server", " SC", "cur", "asc", "sh", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "lc", "ci", "c", "cer", "sp", "system", "sq", "uc", "ca", "sys", "se", "ner", " Sc", "sem", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus"], "n": ["nn", "nc", "nt", "size", "dn", "u", "na", "num", "N", "ln", "v", "l", "name", "sn", "init", "z", "f", "conn", "s", "c", "ne", "m", "an", "x", "w", "e", "o", "ns", "b", "network", "nb", "j", "net", "k", "no", "in", "y", "en", "t", "sync"], "p": ["pi", "pc", "u", "pect", "project", "v", "pr", "jp", "l", "a", "ap", "point", "r", "h", "z", "P", "lp", "ps", "pa", "f", "s", "c", "pid", "m", "w", "sp", "pe", "e", "ip", "o", "b", "tp", "j", "k", "pp", "y", "t"], "i": ["bi", "hi", "api", "pi", "ni", "iu", "it", "u", "id", "one", "multi", "qi", "iii", "xi", "ji", "ei", "v", "si", "ix", "a", "l", "data", "ri", "r", "init", "io", "info", "z", "abi", "f", "ci", "ui", "ini", "c", "index", "eni", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "li", "j", "oi", "in", "y", "ti", "fi"], "d": ["sd", "ded", "dx", "dn", "u", "id", "nd", "did", "ad", "v", "l", "ct", "pd", "z", "h", "de", "f", "fd", "dc", "c", "td", "t", "ds", "s", "m", "w", "x", "di", "e", "md", "o", "dd", "ld", "dom", "b", "dim", "dy", "dl", "dt", "k", "D", "cd", "da", "dh"], "q": ["u", "qt", "id", "qi", "ch", "v", "l", "qs", "a", "dq", "question", "r", "qu", "Q", "z", "h", "P", "f", "c", "m", "w", "x", "quant", "e", "ip", "sq", "o", "g", "b", "j", "k", "qa", "qq", "y", "t", "query"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int enemy = sc.nextInt();\\n    int pp = sc.nextInt();sc.nextLine();\\n    String[] string = sc.nextLine().split(\" \");\\n    long[] input = new long[enemy];\\n    \\n    for(int i = 0; i < enemy; i++){\\n      input[i] = Long.parseLong(string[i]);\\n    }\\n    Arrays.sort(input);\\n    while(pp > 0){\\n      enemy--;\\n      pp--;\\n    }\\n    long sum = 0;\\n    for(int i = 0; i < enemy; i++){\\n      sum += input[i];\\n    }\\n    \\n    \\n    System.out.println(sum);\\n  }\\n}", "target": "230", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "ser", "ch", "tc", "ss", " SC", "asc", "sh", "Sc", "SC", "cb", "cs", "bc", "sw", "cv", "src", "lc", "ci", "cer", "c", "sp", "sq", "uc", "soc", "sr", "ca", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "ec", "esc", "ctx", "cus", "sync"], "enemy": ["aunt", "effect", "eye", "target", "unit", "against", "ppe", "p", "yp", "num", "po", "ei", "farm", "mpire", "page", "upp", "player", "piece", "pg", "nick", "episode", "nr", "kill", "ick", "winner", "life", "league", "inn", "ne", "weight", "eni", "axis", "pe", "np", "ip", "eve", "chance", "pocket", "wife", "ie", "oe", "opp", "grade", "max", "goal", "rank", "nice", "ince", "pei", "ignore", "evil", "edge", "ner", "race", "qa", "force", "boss", "type", "issue", "iff", "axe", "attack", "shape", "keeper", "starter", "backer", "pee", "front", "act"], "pp": ["nn", "ace", "pi", "ppe", "p", "yp", "po", "par", "ppy", "jp", "kk", "upp", "ep", "point", "pg", "ipp", "P", "lp", "app", "cp", "ps", "pa", "pm", "ppa", "pe", "sp", "np", "ip", "mp", "pl", "opp", "ie", "q", "gp", "PP", "cpp", "push", "qa", "pos", "k", "inc", "pps", "ppo"], "string": ["ident", "single", "unit", "p", "buffer", "slice", "id", "queue", "next", "service", "stack", "filename", "line", "STR", "data", "part", "start", "value", "source", "stream", "params", "list", "str", "socket", "object", "ring", "parse", "response", "sequence", "file", "number", "word", "address", "struct", "section", "array", "strip"], "input": ["pattern", "buffer", "integer", "id", "view", "binary", "keep", "inside", "ahead", "data", "progress", "entry", "value", "source", "info", "length", "image", "index", "output", "list", "img", "Input", "config", "base", "text", "submit", "inf", "inner", "rank", "result", "object", "accept", "again", "current", "qa", "form", "parse", "in", "up", "type", "issue", "number", "support", "inc", "word", "shape", "address", "argument", "error", "batch", "out", "array"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "iu", "it", "u", "id", "qi", "ei", "xi", "ji", "v", "anti", "si", "jp", "ix", "l", "data", "ri", "uli", "io", "info", "abi", "f", "ci", "vi", "ui", "ini", "c", "index", "eni", "phi", "x", "mu", "uri", "di", "ip", "e", "I", "ie", "ai", "gi", "d", "n", "cli", "ii", "zi", "b", "li", "j", "oi", "me", "in", "chi", "y", "ti", "fi"], "sum": ["um", "total", "unit", "amount", " total", "count", "size", "cost", "gram", "hash", "num", "summary", " count", "average", "vol", "ass", "sh", "loss", "add", " average", "cur", "use", "sign", "cash", "mass", "spread", "what", "cal", "style", "weight", "index", "us", "pack", "acc", "cum", "ums", "alpha", "miss", "comment", "Sum", "success", "result", "zero", " summ", " SUM", "fat", "sup", "up", "scale", "mean", "inc", "real", " sums", "out", "fee"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        new Main().solve();\\n    }\\n\\n    void solve() {\\n        Scanner sc = new Scanner(System.in);\\n        int N=sc.nextInt();\\n        boolean[] A=new boolean[N];\\n        Arrays.fill(A, false);\\n        int M=sc.nextInt();\\n        int X=sc.nextInt();\\n        X--;\\n        for(int i=0;i<M;i++){\\n            int a=sc.nextInt();\\n            a--;\\n            A[a]=true;\\n        }\\n        int ans=0;\\n        for(int i=X;i<N;i++){\\n            if(A[i]==true)ans++;\\n        }\\n        int answer=0;\\n        for(int i=X;i>=0;i--){\\n            if(A[i]==true)answer++;\\n        }\\n        System.out.println(Math.min(ans, answer));\\n    }\\n}", "target": "197", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "scope", "pc", "ser", "ck", "ch", "sec", "ss", "tc", " SC", "cur", "sub", "asc", "sh", "search", "Sc", "SC", "r", "cs", "bc", "sw", "src", "cor", "cv", "lc", "ci", "loc", "dc", "cer", "c", " scr", "sp", "system", "sq", "uc", "soc", "sync", "cli", "ca", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "ctx", "cus", "coll"], "N": ["MN", "S", "Num", "No", "C", "J", " n", "Size", "U", "Y", "F", "Q", "P", "x", "Ni", "I", "T", "L", "R", "n", "B", "NM", "NR", "V", "K", "D", "NT", "H", "Z", "Ns", "O", "NS", "number", "NUM", "W", "E"], "A": ["S", "New", "AS", "AN", "AR", "AM", "NA", "If", "C", "An", "AA", "LA", "As", "U", "Y", "Array", "Java", "MA", "F", "mA", "BA", "Q", "AP", "P", "EA", "SA", "PA", "Answer", "Ma", "Auth", "Am", "Na", "API", "Input", "T", "I", "At", "alpha", "L", "HA", "Alpha", "B", "Ar", "V", "Args", "Access", "K", "D", "H", "IA", "CA", "G", "The", "Adam", "E", "array"], "M": ["MN", "S", "C", "J", "MC", "U", "Y", "F", "Q", "P", "MD", "m", "T", "I", "MX", "L", "R", "n", "B", "NM", "V", "Mo", "K", "D", "H", "Z", "O", "G", "W", "E"], "X": ["S", "No", "IM", "size", "C", "ID", "J", "xi", "U", "Y", "F", "XXX", "Q", "P", "XX", "x", "T", "I", "MX", "L", "R", "n", "B", "IX", "XP", "V", "IV", "K", "My", "Length", "D", "H", "Z", "O", "NS", "G", "W", "E", "XL"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "ei", "xi", "ji", "v", "anti", "si", "ix", "ij", "ri", "io", "abi", "f", "ci", "ui", "c", "ini", "index", "m", "phi", "x", "mu", "uri", "eni", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "b", "zi", "li", "j", "oi", "sup", "yi", "in", "y", "ti", "fi"], "a": ["ana", "p", "ia", "u", "na", "ad", "mac", "ba", "ar", "mA", "aa", "oa", "pa", "f", "c", "m", "an", "ata", "x", "at", "sa", "ea", "ae", "e", "ai", "alpha", "o", "b", "ca", "ac", "j", "aaa", "y", "as", "area", "da", "ma", "am", "va", "aj"], "ans": ["ana", "works", "ars", "anas", "aned", "na", "ani", "ins", "aus", "span", "anon", "lan", "aces", "ares", "es", "offs", "reads", "ations", "eps", "ens", "cs", "ians", "s", "os", "nas", "cas", "ants", "ches", "an", "x", "cons", "ANS", "arts", "ai", "ran", "n", "ns", "ents", "ras", "ats", "anc", "ids", "outs", "as", "ons", "amps", "ays", "ant", "ann"], "answer": ["ace", "complete", "score", "offset", "see", "age", "message", "size", "integer", "ani", "next", "answered", "average", "page", "question", "use", "consider", "ask", " answers", "Answer", "oa", "order", "reply", "side", "account", "string", "knowledge", "adjust", "grade", "zero", "result", "err", "anova", "agree", "response", "ee", "update", "issue", "number", "swers", "address", "area", "respond", "support", "rage", "avoid", "fix", "error", "array", "query"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main{\\n    public static void main(String[] args)throws Exception {\\n        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer tokenizer = new StringTokenizer(input.readLine());\\n        int k = Integer.parseInt(tokenizer.nextToken());\\n        int s = Integer.parseInt(tokenizer.nextToken());\\n        int count = 0;\\n        for (int i = 0; i <= k; i++) {\\n            for (int j = 0; j <= k; j++) {\\n                if (s >= i+j && s-(i+j) <= k){\\n                    count++;\\n                }\\n                if (s < i+j)\\n                    break;\\n            }\\n            if (s < i)\\n                break;\\n        }\\n        System.out.println(count);\\n\\n    }\\n}\\n", "target": "29", "substitutes": {"input": ["this", "php", "IO", "client", "buffer", "http", "xml", "server", "inside", "data", "request", "r", "radio", "io", "source", "stream", "iter", "temp", "er", "f", "image", "feed", "output", "Input", "socket", "text", "ssl", "writer", "inf", "context", "handler", "current", "reader", "form", "parse", "in", "iterator", "flow", "parser", "pull", "IN", "out"], "tokenizer": ["Tokenator", "Tokenizing", " tokenizing", "Tokenization", " tokenize", "Tokenize", "tokenize", "hanizing", "initialize", " tokenization", "hanator", "initialner", "vectorize", "hanizer", "tokenizable", "vectorizer", "tokenization", " tokenner", "tokenator", " tokenator", "initializer", " tokenizable", "hanization", "Tokenner", "tokenner", "initialization", "vectorization", "tokenizing", "vectorizable", "Tokenizer", "Tokenizable"], "k": ["sk", "mk", "p", "size", "id", "u", "ko", "ck", "ke", "ks", "v", "kick", "keys", "kk", "ik", "h", "z", "kb", "cs", "end", "dk", "ok", "f", "c", "key", "ak", "m", "w", "x", "ku", "kw", "e", "max", "q", "o", "d", "n", "kid", "K", "in", "kind", "y", "ki"], "s": ["S", "sk", "sf", "p", "size", "u", "ins", "ks", "ss", "v", "si", "strings", "l", "a", "es", "is", "r", "start", "z", "cs", "ps", "f", "lines", "session", "os", "c", "rows", "states", "south", "m", "w", "sp", "e", "string", "o", "n", "ns", "b", "services", "ends", "js", "sb", "stats", "y", "spec", "sync"], "count": ["counter", "total", "seq", "offset", "p", "Count", "size", "now", "test", "id", "keep", "add", "l", "data", "part", "start", "z", "info", "len", "length", "f", "report", "c", "sum", "key", "check", "index", "weight", "depth", "base", "list", "state", "code", "d", "set", "n", "stat", "b", "work", "found", "number", "cache", "ind", "coll"], "i": ["bi", "api", "pi", "ori", "ni", "iu", "p", "ami", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "l", "is", "ik", "ri", "io", "init", "z", "info", "ci", "ui", "ini", "c", "eni", "phi", "x", "w", "uri", "di", "ip", "I", "ie", "ai", "inf", "gi", "d", "mi", "ii", "b", "zi", "li", "oi", "yi", "in", "chi", "y", "ki", "fi"], "j": ["dj", "jj", "p", "oj", "it", "u", "J", "qi", "bj", "ji", "v", "jp", "si", "l", "ij", "jon", "z", "h", "aj", "length", "f", "c", "key", "m", "x", "e", "jet", "ja", "uj", "ie", "q", "o", "d", "n", "ii", "b", "li", "js", "je", "y", "jl", "jen", "t", "jo"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = new String();\\n\t\ts = sc.nextLine();\\n\t\tchar c[] = new char[s.length()];\\n\t\tc = s.toCharArray();\\n\t\tfor(int i=0; i<s.length(); i++){\\n\t\t\tif(Character.isLowerCase(c[i])){\\n\t\t\t\tSystem.out.print(Character.toUpperCase(c[i]));\\n\t\t\t} else if(Character.isUpperCase(c[i])){\\n\t\t\t\tSystem.out.print(Character.toLowerCase(c[i]));\\n\t\t\t} else {\\n\t\t\t\tSystem.out.print(c[i]);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n}", "target": "192", "substitutes": {"sc": ["sci", "nc", "sf", "scope", "pc", "server", "sec", " SC", "search", "sh", "Sc", "SC", "r", "cs", "bc", "sw", "src", "ci", "sl", "cer", " scr", "or", "sp", "str", "acc", "st", "system", "uc", "g", "se", "ner", " Sc", "scan", "osc", "rc", "cc", "spec", "out", "esc", "sync"], "s": ["S", "sf", "p", "u", "ins", "ss", "v", "si", "strings", "l", "a", "is", "sv", "series", "ls", "r", "ws", "fs", "source", "cs", "ps", "bs", "f", "lines", "sl", "sum", "ds", "m", "w", "str", "e", "ssl", "string", "ses", "o", "d", "n", "ns", "g", "b", "gs", "site", "se", "su", "sb", "xs", "in", "sg", "t", "sync"], "c": ["cl", "enc", "ic", "nc", "mc", "chain", "count", "p", "pc", "C", "u", "ch", "v", "l", "cu", "a", "ct", "out", "center", "r", "h", "cs", "collection", "f", "lc", "ci", "dc", "csv", "m", "x", "cy", "config", "str", "e", "ec", "string", "col", "ce", "code", "o", "q", "d", "cf", "n", "g", "b", "ca", "ac", "k", "rc", "cr", "y", "cache", "t", "coll"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "ei", "ji", "xi", "v", "si", "ix", "l", "ri", "start", "io", "init", "h", "abi", "f", "ci", "ui", "key", "ini", "index", "x", "mu", "uri", "e", "di", "I", "ie", "ai", "code", "o", "gi", "n", "cli", "b", "ii", "zi", "iv", "li", "j", "oi", "yi", "in", "chi", "y", "ti", "fi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args ) throws Exception {\\n    Scanner sc = new Scanner(System.in);\\n    String str1 = sc.next();\\n    String str2 = sc.next();\\n    int A = Integer.valueOf(str1);\\n    int B = Integer.valueOf(str2);\\n    \\n    int ans =  A * B;\\n    System.out.println(ans);\\n  }\\n}", "target": "35", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "core", "ser", "ch", "sec", "ss", " SC", "cur", "sh", "Sc", "SC", "cs", "bc", "sw", "lc", "ci", "dc", "c", "cer", "sp", "sq", "uc", "soc", "se", "ner", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "spec", "ec", "esc", "cus", "sync"], "str1": ["stringFirst", "strOne", "strone", "STRFirst", "strA", "dr1", "Str2", "stringA", "Str1", "stringOne", "STRA", "strFirst", "drA", "int1", "Strone", "intone", "drFirst", "string1", "drOne", "int2", "STR1", "STROne", " strone"], "str2": ["STRTwo", " strb", "STRB", "str5", "int5", " str0", "strTwo", "stringb", "STR2", "errB", "strB", "int0", " strTwo", "err2", " strB", "string0", "string2", "intb", "strb", "errTwo", "int2", " str3", "str3", "STR3", "str0", "err3", " str5", "string5"], "A": ["AV", "S", "AS", "AN", "AR", "AM", "C", "An", "N", "AA", "M", "LA", "a", "As", "Java", "U", "Y", "BA", "P", "SA", "API", "OA", "AU", "I", "L", "Ab", "HA", "V", "AF", "AC", "D", "O", "AB", "X"], "B": ["EB", "BL", "S", "Bs", "C", "SB", "FB", "N", "BI", "U", "Y", "QB", "F", "E", "UB", "BA", "P", "BB", "BC", "BS", "CB", "T", "I", "L", "R", "Ab", "b", "NB", "OB", "D", "GB", "O", "G", "IB", "AB", "LB", "DB"], "ans": ["ana", "AS", "AN", "ars", "aned", "anned", "NA", "ases", "na", "ins", "ANT", "An", "aus", "span", "lan", "a", "LAN", "ions", "ls", "cs", "types", "s", "ants", "an", "ops", "ANS", "Ann", "ns", "ca", "CNN", "CAN", "scan", "Scan", "ASC", "ANN", "as", "annot", "amps", "CS", "can", "ann"]}}
{"code": "import java.util.*;\\npublic class Main  \\n{ \\n    static boolean isPalindrome(String str)\\n    {\\n      \tStringBuilder sb = new StringBuilder(str);\\n      \tString st = sb.reverse().toString();\\n      \treturn st.equals(str);\\n    }  \\n    public static void main(String[] args) \\n    { \\n        Scanner sc =new Scanner(System.in);\\n        String str = sc.next();\\n        int N = str.length();\\n      \tString s = str + \" \";\\n      \tint q =(N-1)/2 , p = (N+3)/2;\\n        if(isPalindrome(str) && isPalindrome(str.substring(0,q)) && isPalindrome(s.substring(p-1,str.length())))\\n        {\\n          \tSystem.out.println(\"Yes\");\\n        }\\n      else\\n      {\\n        System.out.println(\"No\");\\n      }\\n    } \\n}", "target": "123", "substitutes": {"str": ["pattern", "a", "div", "enc", "status", "empty", "space", "test", "wr", "id", "u", "hr", "tr", "rs", "pr", "arr", "v", "i", "strings", "path", "cur", "STR", "url", "l", "name", "std", "ctr", "r", "fr", "is", "init", "iter", "input", "char", "f", "br", "dr", "sl", "c", "er", "style", "x", "sp", "e", "text", "string", "kr", "stri", "code", "Str", "inner", "n", "sr", "err", "b", "obj", " Str", "pos", "form", "in", "txt", "spec", "t"], "sb": ["fb", "Bs", "sf", "mb", "SB", "pb", "abb", "rb", "bj", "obb", "zb", "si", "usb", "db", "cb", "ib", "std", "ls", "bf", "stab", "bc", "BB", "lb", "src", "bsp", "bs", "gb", " SB", "sp", "sa", "b", "B", "nb", "bg", "bb", "xb", "bd", "bt", "sg", "ab", "bp"], "st": ["bl", "ust", "ste", "inst", "sth", " ste", "ST", "SB", "ss", "pr", "const", "ct", "sv", "std", "r", "stab", "fe", "src", "sl", "est", "sp", "sa", "string", "d", " est", "sr", "b", "St", "se", " ts", " ss", "sta", "sts", "bt", "ost", " ST", "t"], "sc": ["cl", "sci", "nc", "pc", "ch", "sec", "ss", " SC", "si", "sub", "asc", "sh", "Sc", "SC", "is", "r", "bc", "cs", "sw", "src", "ci", "c", "cer", " scr", "sp", "sq", "uc", "se", " Sc", "scan", "osc", "rc", "cc", "cr", "sch", "spec", "ec", "esc", "cus", "sync"], "N": ["Len", "S", "Num", "Count", "C", "Part", "M", " n", "Size", "U", "Node", "F", "Q", "P", "A", "T", "I", "Sn", "L", "R", "n", "B", "Ne", "V", "K", "D", "NT", "H", "Z", "Ns", "O", "W", "X"], "s": ["S", "u", "ss", "si", "i", "strings", "search", "l", "is", "sv", "ls", "r", "h", "cs", "ps", "f", "sl", "c", "sp", "sa", "string", "o", "n", "gs", "g", "b", "ns", "su", "js", "sts", "as", "sg", "spec", "t", "sync"], "q": ["count", "u", "id", "qt", "qi", "ch", "v", "i", "sh", "l", "qs", "U", "dq", "r", "qu", "Q", "z", "h", "P", "f", "c", "x", "quant", "e", "sq", "d", "n", "b", "qa", "k", "j", "qq", "y", "iq", "query"], "p": ["pi", "u", "po", "ch", "pr", "v", "jp", "i", "pu", "a", "l", "r", "z", "h", "P", "ps", "pa", "cp", "f", "c", "m", "x", "sp", "np", "ip", "e", "o", "n", "b", "tp", "j", "pos", "k", "pp", "y", "t", "pad"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tString s = scan.next();\\n\\n\t\tString alphabet = \"abcdefghijklmnopqrstuvwxyz\";\\n\t\tfor (int i = 0; i < alphabet.length(); i++) {\\n\t\t\tif (s.equals(alphabet.substring(i, i + 1))) {\\n\t\t\t\tSystem.out.println(alphabet.substring(i + 1, i + 2));\\n\t\t\t}\\n\t\t}\\n\t\tscan.close();\\n\t}\\n\\n}\\n", "target": "150", "substitutes": {"scan": ["nn", "all", "cat", "watch", "connect", "walk", "na", "server", "span", "run", "sub", "search", "fan", "con", "r", "start", "sc", "source", "row", "app", "query", "gen", "report", "send", "chan", "feed", "an", "ai", "read", "skip", "inner", "n", "result", "b", "stat", "err", "se", "ner", "reader", "parse", "in", "Scan", "log", "san", "ans", "sch", "parser", "cache", "look", "match", "en", "out", "can", "ann", "sync"], "s": ["S", "sf", "space", "p", "u", "ss", "span", "opens", "si", "strings", "search", "l", "es", "sv", "sign", "ls", "r", "ws", "is", "h", "f", "sl", "c", "an", "ops", "e", "ssl", "string", "o", "abs", "n", "g", "b", "services", "su", "sb", "as", "ans", "sg", "ab"], "alphabet": ["aliab", "eleregation", "allabet", "alphaagram", "isalphabet", "alregation", "isalab", "alphab", "alphagram", "elephabet", "phabet", "alphaphabet", "aliatin", "operabetic", "aliabetic", "assabet", "alphaabet", "operregation", "eleabet", "phabetic", "octabet", "isalabetic", "alphabetic", "assphabet", "phatin", "operabet", "aliabet", "phagram", "assagram", "octphabet", "operphabet", "allabetic", "eleabetic", "alphaabetic", "alabet", "alphregation", "isalabet", "assabetic", "alphatin", "allatin", "octabetic", "alabetic", "alphphabet", "allab", "octab", "phphabet", "phab"], "i": ["hi", "bi", "api", "pi", "ni", "iri", "p", "iu", "ami", "it", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "a", "l", "ri", "start", "io", "z", "info", "abi", "f", "lc", "ci", "ui", "c", "ini", "index", "at", "phi", "x", "m", "uri", "eni", "e", "di", "I", "ai", "o", "gi", "n", "ii", "b", "zi", "isi", "li", "cli", "j", "oi", "yi", "in", "chi", "ti", "fi"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in Actual solution is at the top\\n *\\n * @author Silviase\\n */\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    InputStream inputStream = System.in;\\n    OutputStream outputStream = System.out;\\n    Scanner in = new Scanner(inputStream);\\n    PrintWriter out = new PrintWriter(outputStream);\\n    DCaracalVsMonster solver = new DCaracalVsMonster();\\n    solver.solve(1, in, out);\\n    out.close();\\n  }\\n\\n  static class DCaracalVsMonster {\\n\\n    public void solve(int testNumber, Scanner in, PrintWriter out) {\\n      long h = in.nextLong();\\n      out.println(fun(h));\\n    }\\n\\n    long fun(long h) {\\n      return h == 1 ? 1 : fun(h / 2) * 2 + 1;\\n    }\\n\\n  }\\n}\\n\\n", "target": "51", "substitutes": {"inputStream": ["outputWriter", "inputSteam", "outputSteam", " inputstream", "inputThread", " inputSteam", "InputSteam", " inputThread", "Inputstream", "outputThread", "InputThread", "inputWriter", " inputWriter", "InputWriter", "InputStream", "outputstream", "inputstream"], "outputStream": ["referenceSteam", "outputWriter", "inputSteam", "outputSteam", "outputForm", "Outputstream", "referencestream", "OutputStream", "OutputWriter", " outputSteam", "applicationWriter", "applicationStream", "referenceStream", "applicationSteam", "applicationForm", " outputWriter", "OutputSteam", " outputForm", "OutputForm", "outputstream", "inputstream"], "in": ["this", "isin", "rec", "IN", "id", "login", "ins", "din", "run", "i", "inside", "path", "l", "data", "is", "request", "con", "lin", "r", "io", "source", "win", "sin", "input", "init", "In", "f", "image", "inn", "ini", "c", "arg", "index", "w", "x", "nin", "cin", "en", "min", "gin", "inf", "inner", "rin", "n", "kin", "err", "again", "reader", "pin", "scan", "log", "bin", "inc", "read"], "out": ["parent", "call", "client", "scope", "loader", "to", "ex", "ext", "line", "pool", "page", "data", "name", "point", "ng", "obj", "exp", "io", "init", "temp", "gen", "conn", "outside", "outer", "c", "user", "session", "key", "password", "at", "output", "OUT", "w", "x", "list", "socket", "writer", "string", "left", "global", "Out", "o", "inner", "plus", "n", "comment", "err", "again", "write", "work", "exec", "up", "connection", "scan", "net", "log", "bin", "file", "outs", "job", "exit", "inc", "off", "copy", "cache", "error", "IN", "sync"], "solver": ["insolution", "solving", "ssolving", "ssolve", "unsolver", "Solver", "searcher", "insolve", "ssolver", "insearcher", "ssearcher", "ssolution", "insolver", "solve", "solution", "Solution", "Solving", "unsolving", "Solve", "Searcher", "unsolve", "unsolution"], "testNumber": ["unitNumbers", "TestNumber", "testNumbers", "testnumber", "unitFactor", "TestFactor", "testFactor", "Testnumber", " testnumber", " testFactor", " testNumbers", "unitNumber", "unitnumber", "TestNumbers"], "h": ["hi", "p", "id", "hash", "hr", "u", "ch", "gh", "v", "i", "kh", "sh", "l", "r", "rh", "uh", " H", "uth", "ht", "ph", "z", "ha", "bh", "f", "ah", "c", "hhh", "m", "w", "x", "history", "lo", "e", "hist", "hp", "q", "hs", "o", "ith", "n", "g", "b", "HH", "ih", "hm", "work", "hh", "H", "hl", "ho", "oh", "eh", "th"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tInputStream in = System.in;\\n\tPrintStream out = System.out;\\n\\n\tpublic void _main(String[] args) {\\n\t\tScanner sc = new Scanner(in);\\n\\n\t\tint A1 = sc.nextInt();\\n\t\tint A2 = sc.nextInt();\\n\t\tint A3 = sc.nextInt();\\n\\n\t\tsc.close();\\n\\n\t\tif (A1 + A2 + A3 >= 22) {\\n\t\t\tout.println(\"bust\");\\n\t\t} else {\\n\t\t\tout.println(\"win\");\\n\t\t}\\n\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main()._main(args);\\n\t}\\n}\\n", "target": "129", "substitutes": {"in": ["buffer", "ins", "din", "ex", "i", "url", "line", "data", "is", "con", "lin", "r", "init", "source", "info", "io", "input", "stream", "src", "In", "f", "conn", "ci", "image", "c", "ini", "inn", "arg", "user", "index", "m", "min", "gin", "inf", "inner", "read", "cli", "err", "reader", "exec", "log", "bin", "file", "rc", "as", "inc", "IN"], "out": ["this", "print", "client", "buffer", "prefix", "null", "ins", "view", "ex", "path", "line", "pool", "page", "name", "part", "io", "info", "results", "conn", "user", "report", "sum", "output", "OUT", "list", "base", "str", "string", "writer", "Out", "o", "cli", "result", "err", "pass", "again", "obj", "exec", "up", "log", "bin", "outs", "word", "inc", "lock", "copy", "cache", "error", "window", "query"], "sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", "si", "cur", "sub", "asc", "search", "Sc", "SC", "screen", "exp", "can", "bc", "cs", "sw", "src", "cor", "lc", "ci", "cer", "c", "sp", "spec", "ec", "sq", "uc", "soc", "cli", "ca", "sr", "sem", "se", "ner", "reader", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "cam", "esc", "ctx", "cus", "sync"], "A1": ["U1", "A61", "a51", "a61", "A11", "As1", "A51", "a11", " A11", "U11", "a2", " A6", " A61", "U6", "As51", "As61", "As2", "a6", "U2", " A51", "a1", "A6"], "A2": ["a62", "NA02", "B2", "NA4", " A62", "NA6", " A5", "aTwo", " A4", "a2", " A6", "B02", "B6", " A02", "B4", "LA2", "A02", "LATwo", "LA62", "LA5", "A5", "A62", "a5", "ATwo", " ATwo", "A4", "NA2", "A6"], "A3": ["Ma2", " A393", "Ma3", "a393", "a03", " AThree", "CA2", "a3", "Ma03", "A03", "Ma393", "aThree", "a2", "CAThree", "A393", "a9", "CA9", "CA3", " A9", " A03", "AThree", "A9"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    final static int COST_MAX = 1001;\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        int N = scanner.nextInt();\\n        int T = scanner.nextInt();\\n        int cost = COST_MAX;\\n\\n        for (int i = 0; i < N; i ++){\\n            int c = scanner.nextInt();\\n            int t = scanner.nextInt();\\n\\n            if (t <= T){\\n                cost = Math.min(cost, c);\\n            }\\n        }\\n\\n        if (cost == COST_MAX){\\n            System.out.println(\"TLE\");\\n        } else {\\n            System.out.println(cost);\\n        }\\n    }\\n}\\n", "target": "8", "substitutes": {"COST_MAX": ["COST_MIN", "COLL_MAX", "COSTIDmax", "COSTNmax", "COSTNMAX", "COSTIDMax", "COST_Max", "COLL_MIN", "COAST_LINE", "COAST_max", "COSTNLINE", "COSTNMax", "COAST_MAX", "COLL_max", "COLL_Max", "COST_LINE", "COST_max", "COSTIDMAX", "COSTNMIN", "COAST_Max"], "scanner": ["Scaninner", "scanker", "nerser", "anner", "aninner", "verener", "caner", "analyner", "canter", "caninner", " scanser", "aner", "scanter", "anser", "nerinner", "analyker", "Scanler", "scanener", "nerner", "Scanener", "canker", "canler", "analyinner", "scaner", "nerning", "canener", "nerer", "Scanker", "scanning", " scanning", "Scanter", "analyter", "Scaner", "verler", "nerker", "verner", " scanker", "anning", "scanser", "anker", "verer", "canner", "Scanner", "scanler", "scaninner"], "N": ["S", "Num", "nt", "NA", "SN", "NL", "C", "M", " n", "Size", "U", "Y", "F", "NN", "CL", "P", "I", "NC", "L", "R", "n", "B", "Ne", "V", "K", "NB", "D", "NT", "Z", "NS", "O", "Ns", "NE", "E", "X"], "T": ["S", "TS", "C", "J", "M", "TT", "U", "Y", "F", "E", "CT", "P", "TC", "I", "TN", "L", "R", "n", "V", "K", "D", "NT", "H", "Z", "O", "G", "W", "X"], "cost": ["ace", "score", "Cost", "call", "effect", "parent", "price", "CO", "count", "function", "size", "back", "C", "CC", "risk", "loss", "use", "right", "start", "comp", "value", "co", "end", "length", "loc", "dc", "style", "tax", "weight", "load", "depth", " costs", "ack", "grade", "code", "d", "shift", "err", "ac", "demand", "cycle", "time", "work", "k", "step", "scale", "position", "clean", "trial", "cc", "number", "total", "level", "address", "gross", "error", "fee", "coll"], "i": ["pi", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "l", "start", "io", "z", "info", "f", "ci", "ui", "ini", "index", "w", "x", "mu", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "b", "ii", "li", "j", "k", "in", "chi", "y", "ti"], "c": ["mc", "nc", "nt", "count", "p", "toc", "C", "u", "tc", "v", "l", "cu", "ct", "z", "co", "cp", "f", "lc", "ci", "dc", "x", "cy", "e", "I", "uc", "cf", "ce", "o", "d", "n", "b", "k", "cc", "y", "cr", "sc"], "t": ["total", "ts", "nt", "p", "u", "C", "tc", "v", "l", "ct", "z", "h", "f", "at", "m", "x", "e", "ta", "o", "d", "n", "ti", "b", "dt", "j", "k", "type", "y", "tt", "ant"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n \\n\t\tint A,B,C,K;\\n\t\tA=sc.nextInt();\\n\t\tB=sc.nextInt();\\n\t\tC=sc.nextInt();\\n\t\tK=sc.nextInt();\\n\t\tint sum=A;\\n\t\tif(A>=K) {\\n\t\t\tsum = K;\\n\t\t}\\n\t\telse if(A+B>=K) {\\n\t\t\tsum=A;\\n\t\t}else {\\n\t\t\tsum=A-(K-A-B);\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t\t\\n\t}\\n}\\n \\n \\n", "target": "56", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "scope", "pc", "class", "core", "ser", "ch", "tc", "ss", "sec", " SC", "sub", "asc", "sh", "l", "Sc", "SC", "ws", "exp", "bc", "cv", "sw", "app", "src", "lc", "c", "cer", " scr", "console", "sp", "acc", "system", "text", "sq", "uc", "soc", "cli", "se", " Sc", "sb", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "spec", "esc", "ctx", "cus", "sync"], "A": ["AD", "S", "AS", "AN", "AR", "AM", "NA", "Ca", "AW", "ACE", "AA", "N", "M", "TA", "FA", "LA", "a", "As", "U", "Y", "Array", "Java", "Az", "MA", "F", "mA", "BA", "AP", "P", "Ma", "SA", "PA", "EA", "Area", "Am", "Na", "API", "Offset", "T", "I", "KA", "App", "AK", "alpha", "L", "Sum", "Alpha", "Bar", "HA", "Ar", "V", "AF", "AC", "All", "D", "H", "O", "IA", "CA", "G", "The", "W", "AH", "AB", "X"], "B": ["Bs", "BF", "J", "AA", "N", "M", "BI", "Bi", "U", "Y", "X", "F", "WB", "UB", "BA", "Q", "P", "BB", "BC", "T", "I", "L", "R", "Bar", "b", "BE", "V", "BD", "NB", "AB", "OB", "D", "GB", "H", "O", "Z", "G", "MB", "Rob", "BER", "TB", "W", "E", "LB", "DB"], "C": ["Cu", "Can", "CU", "S", "N", "M", "CC", "CF", "CE", "U", "SC", "CR", "Y", "F", "Q", "P", "BC", "c", "T", "L", "R", "Cs", "V", "AC", "D", "H", "CA", "G", "CS", "W", "E", "X"], "K": ["AD", "KK", "S", "Ku", "Ak", "J", "N", "M", "CH", "U", "Y", "F", "Q", "P", "KC", "HK", "OK", "Key", "Sk", "T", "KA", "AK", "PK", "L", "V", "k", "KR", "Ka", "VK", "AC", "D", "H", "Z", "O", "G", "KE", "KS", "SK", "W", "E", "Ke", "X"], "sum": ["um", "total", "cat", "offset", "unit", "count", "size", "cost", "hash", "gram", "num", "summary", "si", "average", "add", "ass", "loss", "help", "a", "sort", "use", "fill", "diff", "ask", "aa", "info", "error", "what", "spread", "cal", "length", "user", "key", "style", "weight", "an", "sa", "acc", "alpha", "miss", "skip", "rank", "Sum", "comment", "result", "plus", "zero", "ac", "commit", "fat", "work", "up", "parse", "scale", "mean", "ash", "shape", "missing", "real", "cache", "match", "am", "out"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tint result = 0;\\n\t\tArrayList<Integer> h = new ArrayList<Integer>();\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\th.add(sc.nextInt());\\n\t\t\tif(h.get(i) >= K) {\\n\t\t\t\tresult++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(result);\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "145", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "sf", "scope", "pc", "ser", "ch", "tc", "ss", "server", " SC", "cur", "sub", "asc", "sh", "Sc", "SC", "con", "bc", "cs", "sw", "src", "cv", "lc", "loc", "c", "cer", "sp", "system", "sq", "uc", "soc", "ca", "se", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "proc", "spec", "ec", "esc", "ctx", "sync"], "N": ["S", "No", "NA", "SN", "NL", "C", "M", "OS", " n", "Size", "U", "Y", "F", "NN", "RN", "Q", "P", "T", "I", "NC", "L", "n", "NM", "Ne", "V", "D", "NT", "H", "Z", "NS", "O", "KN", "NE", "Ns", "NI", "E", "X"], "K": ["S", "C", "J", "M", "CH", "U", "Y", "kernel", "F", "Q", "P", "Sk", "T", "I", "PK", "L", "R", "B", "V", "k", "D", "H", "Z", "O", "G", "KS", "SK", "W", "E", "X"], "result": ["counter", "score", "total", "function", "count", "message", "integer", "future", "test", "core", "cur", "distance", "res", "page", "data", "r", "F", "valid", "info", "row", "results", "length", "upper", "winner", "report", "feature", "order", "match", "I", "code", "Result", "success", "goal", "zero", "card", "err", "major", "current", "k", "work", "response", "ret", "rc", "number", "our", "inc", "range", "error", "default"], "h": ["head", "hi", "p", "he", "http", "id", "hr", "ch", "gh", "v", "help", "hat", "sh", "l", "FH", "r", "rh", "uh", "ht", "bh", "header", "ph", "ha", "ah", "c", "m", "history", "w", "her", "hand", "e", "hist", "hp", "ul", "q", "o", "err", "HH", "enh", "ih", "hm", "host", "H", "hl", "oh", "eh"], "i": ["bi", "hi", "pi", "ni", "p", "slice", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "ri", "part", "io", "z", "info", "abi", "f", "ci", "ui", "ini", "index", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "n", "ii", "zi", "b", "li", "j", "oi", "k", "in", "chi", "ti", "fi"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.*;\\n\\npublic class Main {\\n\tint mod = 1000000007;\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tout = new PrintWriter(new BufferedOutputStream(System.out));\\n\t\tint a=sc.nextInt();\\n\t\tint b=sc.nextInt();\\n\t\tint c=sc.nextInt();\\n\t\tint x=sc.nextInt();\\n\t\tint y=sc.nextInt();\\n\t\tint ans=a*x+b*y;\\n\t\tint n=1;\\n\t\twhile(a*Math.max(0,(x-n))+b*Math.max((y-n),0)+2*n*c<=ans) {\\n\t\t\tans=a*Math.max(0,(x-n))+b*Math.max((y-n),0)+2*n*c;\\n\t\t\tn++;\\n\t\t}\\n\t\tout.println(ans);\\n\t\tout.close();\\n\t}\\n\\n\t// ----------------------------------------------------------\\n\tstatic int l_min(int[] a) {\\n\t\tArrays.sort(a);\\n\t\treturn a[0];\\n\t}\\n\\n\tstatic int l_max(int[] a) {\\n\t\tint l = a.length;\\n\t\tArrays.sort(a);\\n\t\treturn a[l - 1];\\n\t}\\n\\n\tstatic int gcd(int a, int b) {\\n\t\tif (a == 0) {\\n\t\t\treturn b;\\n\t\t}\\n\t\treturn gcd(b % a, a);\\n\\n\t}\\n\\n\tpublic static PrintWriter out;\\n\\n}\\n\\nclass UnionFind {\\n\tint parent[];\\n\tint rank[];\\n\tint size[];\\n\\n\tUnionFind(int n) {\\n\t\tparent = new int[n];\\n\t\trank = new int[n];\\n\t\tsize = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tparent[i] = i;\\n\t\t\trank[i] = 0;\\n\t\t\tsize[i] = 1;\\n\t\t}\\n\t}\\n\\n\tvoid union(int x, int y) {\\n\t\tint xRoot = find(x);\\n\t\tint yRoot = find(y);\\n\\n\t\tif (xRoot != yRoot) {\\n\\n\t\t\tif (rank[xRoot] > rank[yRoot]) {\\n\t\t\t\tparent[yRoot] = xRoot;\\n\t\t\t\tsize[xRoot] += size[yRoot];\\n\\n\t\t\t} else if (rank[xRoot] < rank[yRoot]) {\\n\t\t\t\tparent[xRoot] = yRoot;\\n\t\t\t\tsize[yRoot] += size[xRoot];\\n\\n\t\t\t} else {\\n\t\t\t\tparent[yRoot] = xRoot;\\n\t\t\t\trank[xRoot]++;\\n\t\t\t\tsize[xRoot] += size[yRoot];\\n\t\t\t}\\n\t\t}\\n\\n\t}\\n\\n\tint find(int x) {\\n\t\tif (parent[x] == x) {\\n\t\t\treturn x;\\n\t\t} else {\\n\t\t\treturn find(parent[x]);\\n\t\t}\\n\\n\t}\\n\\n\tboolean same(int x, int y) {\\n\t\treturn find(x) == find(y);\\n\t}\\n\\n}\\n\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "125", "substitutes": {"mod": ["module", "pc", "p", "id", "num", "sec", " rc", "version", "name", "debug", " m", " pc", "dc", "m", " p", "Mod", "min", "max", "d", "ver", " ver", "scale", " fn", "rc", " f", " module"], "sc": ["this", "cl", "sche", "mc", "sci", "nc", "scope", "pc", "core", "ser", "com", "ch", "sec", "ss", "tc", " SC", "si", "cur", "sub", "asc", "sh", "Sc", "SC", "screen", "con", "exp", "bc", "cs", "sw", "src", "cor", "co", "desc", "lc", "ci", "cer", "console", "sp", "system", "uc", "soc", "sr", "ca", "cli", "cle", "sem", "se", "ner", " Sc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "esc", "ctx", "cus", "sync"], "out": ["parent", "client", "p", "buffer", "prefix", "null", "ch", "ex", "path", "line", "pool", "page", "ou", "name", "screen", "r", "exp", "can", "io", "source", "info", "stream", "temp", "input", "channel", "resource", "conn", "outer", "user", "sum", "model", "output", "OUT", "w", "system", "writer", "raw", "Out", "o", "result", "object", "err", "again", "pass", "write", "obj", "reader", "exec", "up", "connection", "in", "log", "file", "bin", "outs", "cache", "error", "IN", "engine", "console", "sync"], "a": ["ana", "count", "p", "ia", "u", "na", "ad", "i", "ba", "ar", "aa", "z", "A", "f", "au", "s", "ga", "index", "m", "an", "w", "at", "sa", "e", "ae", "o", "alpha", "d", "af", "ac", "j", "qa", "as", "asa", "area", "ab", "da", "la", "am", "va", "aj"], "b": ["fb", "bi", "p", "u", "rb", "ad", "v", "i", "ba", "l", "db", "cb", "ib", "r", "z", "h", "bc", "lb", "gb", "bs", "f", "eb", "s", "w", "e", "o", "d", "g", "B", "j", "bb", "sb", "wb", "ab", "ob"], "c": ["nc", "count", "p", "u", "C", "v", "cn", "i", "ar", "l", "cu", "con", "r", "z", "h", "cs", "f", "lc", "ci", "s", "dc", "m", "w", "an", "cy", "e", "cf", "q", "o", "d", "g", "ac", "j", "k"], "x": ["p", "sex", "u", "id", "xi", "wy", "ex", "v", "i", "ix", "l", "name", "r", "yx", "z", "h", "f", "width", "s", "ax", "wx", "index", "m", "w", "an", "e", "xx", "max", "o", "d", "j", "k", "work", "xs", "time", "xy", "rx", "px", "t", "X"], "y": ["p", "u", "sy", "oy", "v", "i", "vy", "ya", "l", "Y", "ix", "yr", "z", "h", "ny", "f", "s", "m", "w", "zy", "e", "ry", "o", "q", "d", "dy", "yy", "j", "ye", "k", "ey", "cy", "t"], "ans": ["ana", "les", "ars", "aned", "anas", "anned", "p", "AN", "na", "ani", "ins", "nan", "aus", "ks", "rs", "anon", "lan", "aces", "acs", "atan", "es", "ions", "eps", "ls", "ens", "cs", "ians", "ps", "vs", "s", "os", "cas", "ds", "nas", "ants", "an", "cus", "cons", "ANS", "ents", "ns", "ras", "ats", "anc", "xs", "san", "outs", "as", "ons", " scans", "ays", "can", "ann"], "n": ["nn", "all", "none", "nc", "on", "nt", "don", "p", "u", "one", "na", "nor", "nan", "N", "v", "cn", "i", "l", "sn", "r", "syn", "z", "un", "ny", "f", "fn", "ci", "s", "conn", "ne", "m", "an", "w", "e", "min", "max", "o", "d", "g", "ns", "pn", "nb", "ac", "j", "k", "in", "no", "en", "t"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint d = sc.nextInt();\\n\t\tint e = sc.nextInt();\\n\\n\t\tint a1 = a % 10;\\n\t\tint b1 = b % 10;\\n\t\tint c1 = c % 10;\\n\t\tint d1 = d % 10;\\n\t\tint e1 = e % 10;\\n\\n\t\tint a10 = a;\\n\t\tif(a%10 != 0) {\\n\t\t\ta10 = (a/10 + 1) * 10;\\n\t\t}\\n\t\tint b10 = b;\\n\t\tif(b%10 != 0) {\\n\t\t\tb10 = (b/10 + 1) * 10;\\n\t\t}\\n\t\tint c10 = c;\\n\t\tif(c%10 != 0) {\\n\t\t\tc10 = (c/10 + 1) * 10;\\n\t\t}\\n\t\tint d10 = d;\\n\t\tif(d%10 != 0) {\\n\t\t\td10 = (d/10 + 1) * 10;\\n\t\t}\\n\t\tint e10 = e;\\n\t\tif(e%10 != 0) {\\n\t\t\te10 = (e/10 + 1) * 10;\\n\t\t}\\n\t\tint last = a;\\n\t\tint last1 = a1;\\n\t\tint last10 = a10;\\n\t\tint other = b10 + c10 + d10 + e10;\\n\\n\t\tif(b1 != 0 && b1 < last1) {\\n\t\t\tlast = b;\\n\t\t\tlast1 = b1;\\n\t\t\tother = other - b10 + last10;\\n\t\t\tlast10 = b10;\\n\t\t}\\n\t\tif(c1 != 0  && c1 < last1) {\\n\t\t\tlast = c;\\n\t\t\tlast1 = c1;\\n\t\t\tother = other - c10 + last10;\\n\t\t\tlast10 = c10;\\n\t\t}\\n\t\tif(d1 != 0 && d1 < last1) {\\n\t\t\tlast = d;\\n\t\t\tlast1 = d1;\\n\t\t\tother = other - d10 + last10;\\n\t\t\tlast10 = d10;\\n\t\t}\\n\t\tif(e1 != 0 && e1 < last1) {\\n\t\t\tlast = e;\\n\t\t\tother = other - e10 + last10;\\n\t\t}\\n\\n\t\tSystem.out.println(other + last);\\n\t}\\n\\n}", "target": "63", "substitutes": {"sc": ["sche", "mc", "sci", "nc", "sf", "scope", "pc", "ser", "ck", "com", "ch", "tc", "ss", "sec", " SC", "cur", "asc", "sh", "Sc", "SC", "con", "exp", "cs", "bc", "sw", "cv", "cor", "gc", "src", "lc", "ci", "sl", " scr", "sp", "sq", "uc", "soc", "sr", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "coll", "cam", "esc", "ctx", "cus", "sync"], "a": ["ace", "api", "p", "ia", "na", "u", "ad", "ba", "ar", "l", "aa", "A", "pa", "f", "ah", "au", "s", "ga", "ak", "at", "an", "sa", "ae", "ada", "ea", "ai", "alpha", "af", "n", "ca", "ac", "aaa", "ast", "ama", "fa", "art", "as", "y", "asa", "area", "ab", "da", "la", "ma", "am", "va", "array"], "b": ["bi", "p", "u", "rb", "ad", "ch", "v", "ba", "i", "l", "db", "cb", "ib", "r", "bf", "aa", "be", "h", "bc", "z", "eb", "f", "s", "m", "w", "x", "o", "n", "g", "B", "ac", "nb", "j", "k", "bb", "sb", "bd", "y", "wb", "ab", "ob", "t"], "c": ["cat", "nc", "ic", "p", "C", "u", "ch", "v", "cn", "i", "l", "cu", "ct", "con", "r", "z", "h", "co", "cp", "f", "lc", "ci", "dc", "s", "cm", "t", "m", "w", "x", "cin", "uc", "ce", "q", "o", "cf", "n", "g", "ca", "ac", "k", "cd", "cc", "y", "cr", "cy", "ec"], "d": ["dx", "p", "dn", "u", "id", "nd", "ad", "v", "i", "l", "db", "r", "dat", "z", "h", "f", "dr", "dc", "s", "ds", "m", "w", "x", "di", "du", "q", "o", "dd", "n", "g", "ld", "dy", "dt", "j", "k", "in", "D", "cd", "y", "da", "t"], "e": ["ace", "p", "u", "v", "i", "l", "el", "r", "E", "be", "eu", "z", "fe", "h", "end", "de", "f", "er", "s", "ne", "m", "w", "x", "pe", "ev", "ae", "ea", "est", "oe", "ie", "o", "ce", "n", "g", "err", "se", "ee", "y", "ey", "ed", "en", "ec"], "a1": ["ba1001", "A1001", "A1", "baOne", "aHead", "area1", "areaOne", "a11", "baHead", "a1001", "ba1", "ga10", "e11", "ga11", "areaHead", "AHead", "aOne", "AOne", "b11", "ga1", "area1001"], "b1": ["u1001", "db1001", "b251", "u6", "chpu", "bur1001", "e6", "ch1", "b01", "B1", "bpu", "c1001", "b1001", " bone", " b11", " b251", "B251", "c11", "db1", "c6", " b3", "done", "ch11", "db01", "chone", "b3", "dpu", "b6", "bur01", "bur11", " bpu", "db11", "d251", "c01", "bur1", "u1", "b11", "d11", "bone", "e1001", "B3", "d3"], "c1": ["d9", "cann", "t3", "e9", "e6", "u31", " cOnce", "eann", " c11", "c31", "c11", "d51", "u01", " c31", "c6", " c3", " c51", "e11", "t31", "c9", "d6", "t51", "t01", "c3", " cann", " c6", "u51", " c9", "c01", "u1", "d11", "c51", "dOnce", " c01", "cOnce", "tOnce", "dann", "t1", "d3"], "d1": ["dOne", "z31", "z1", "t3", "c8", "d81", "da1", "daOnce", "z11", "da01", "b01", "d8", "d31", " done", "gOne", "d91", "t81", "kOnce", "e31", " dOne", "bOnce", "t91", "e3", "zone", " d31", "done", "e11", "t8", "k01", " d11", "g91", "c3", " d91", "eone", "d01", "g81", "d11", "g1", "e8", "k1", "eOnce", "dOnce", "cOnce", "tOnce", "t1", "tOne", " d81", "d3"], "e1": ["yOnce", "dOne", "y61", " e251", "z1", "eOne", "u91", "r61", "ee1", "e91", " eOnce", "eeOne", " e91", "r1", "f1", " e61", "zone", "fOne", " eone", "y1", "e11", "r251", "rOnce", "e61", "eone", "uone", "z91", "d11", "u1", "eOnce", "y251", "f11", "e251", "ee11"], "a10": [" a11", "ar11", "p10", "aTen", "alpha11", "alpha100", " a40", " aTen", "ar110", "da2010", "ac10", "a11", "p110", "c11", "e40", "alpha10", "ac100", "da40", "ac11", "da10", "c110", "a2010", "a40", "eTen", "pTen", "acTen", " a2010", "cTen", "ar10", " a100", "p11", "a110", "a100", "arTen", "alphaTen", "e2010", "daTen"], "b10": ["f20", "db10", "d50", "b2010", "body10", "p10", "b40", "db110", "e100", "c15", "db2010", "f10", "r10", "c40", "c50", "f110", "a90", "r100", "p50", "c100", "p20", "b50", "body15", "e110", "db15", "f50", "c20", "b20", "b90", "c2010", "d20", " b50", "b15", "c110", "body110", "p40", "d90", "r110", "c90", "d110", "r2010", "body2010", " b40", " b20", "a110", "b110", "b100", "e2010"], "c10": ["cr11", "b2010", "cr15", "cr2010", "l10", "p10", "c15", "f10", "f110", "bTen", "cc15", "l110", "p110", "e110", "c11", "p2010", "e90", "dTen", "b90", "c2010", "cc2010", "cc11", "c110", "eTen", "d90", "cTen", "c90", "fTen", "d110", "lTen", "d11", "cr10", "b110", "cc10", "d15", "e2010", "d2010"], "d10": ["h100", "b30", "d50", "p10", " d110", "e50", "h10", "h11", "c50", "c100", "a11", " d010", "b50", "d30", "p110", "e110", "c11", "e010", "c30", "e90", "b90", "c010", "p90", "d010", "c110", "h110", "d90", "p100", "c90", "e30", "d110", "d11", "a110", "b110", "a100", "b100", " d90", "d100"], "e10": ["f40", "ee10", "f2010", " e110", " e50", " e990", "e990", "e50", "c1000", "f10", "c40", "c50", "d40", "f110", "oe1000", "oe110", "v110", "ee2010", "e110", "ee110", "e40", "oe10", "c2010", "oe990", "ec1000", "ec50", "c110", "ee090", " e1000", "e1000", "e090", "d110", "v2010", "v10", "c090", "c990", "v090", "ec110", "e2010", "d2010", "ec10"], "last": ["total", "parent", "empty", "scope", "count", "size", "back", "one", "next", "cost", "show", "old", "use", "right", "event", "end", "first", "best", "after", "style", "key", "build", "recent", "base", "est", "depth", "full", "str", "Last", "any", "left", "global", "max", "code", "prev", "worst", "same", "cycle", "latest", "current", "j", "child", "master", "bottom", "close", "pull", "default"], "last1": ["first9", "last0", "thisOnce", " lastOnce", " last4", "worst81", "est1", " last0", "next4", "first3", "next9", "this2", "next10", "first81", "Last11", "final6", "last2", "last6", "this1", "worst1", "final1", "shortOne", "Last10", "worstOne", "nextOnce", "short1", "est6", "first1", "Last61", " last2", "last4", " last11", "last61", "Last1", "next1", " lastOne", " last9", " last6", "LastOne", "finalId", "estId", "lastOne", "last81", " lastId", "last3", " last61", "last11", "thisOne", "first0", "lastId", " last81", "firstOne", "max11", "next0", "first4", "next3", "last9", "next2", "maxOne", " last3", "nextOne", "short61", "max1", "lastOnce", "first10", "first2", "max10"], "last10": ["first110", "deepTen", "expected11", "last09", "full9", "end30", "end10000", " last110", "first40", "full110", " last9", "first9", "final30", "next8", "bottom10", "last10000", "first8", " last8", "endTen", "bottom30", "expected2010", "next11", "next2010", "next40", "first09", "bottomTen", "final40", "last2010", "final10", "parent09", "final12", "current10", "next30", "first2010", "parent8", "last9", "full10", "last8", "deep10", "last110", "last40", "current8", "expected10", "parent12", "parent10", "first12", "lastTen", "last11", "current110", "expectedTen", "end10", " last12", "last12", "deep2010", "next10", "nextTen", "first11", " last11", "first10000", "current11", "first30", "deep110", "final09", "next110", "bottom10000", "final8", "first10", "firstTen", "full12", "last30"], "other": ["this", "total", "back", "show", "date", "key", "output", "o", "inner", "same", "result", "sharing", "another", "me", "original", "Other", "group", "error", "union", "how", "next", "server", "data", "value", "block", "iter", "end", "user", "image", "order", "base", "like", "global", "element", "time", "later", "shared", "real", "self", "iron", "it", "http", "to", "extra", "old", "part", "right", "resource", "er", "full", "OTHER", "ose", "common", "open", "different", "child", "false", "bar", "out", "also", "coll", "parent", "more", "existing", "loc", "outer", "item", "or", "object", "current", "master", "layer"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt(), M = sc.nextInt(), total=0;\\n    int A[] = new int[M];\\n    for(int i=0; i<M; i++) {\\n      A[i] = 0;\\n    }\\n    \\n    for(int j=0; j<N; j++) {\\n      int L = sc.nextInt();\\n      for(int k=0; k<L; k++) {\\n        int f = sc.nextInt();\\n        A[f-1] ++;\\n      }\\n    }\\n    \\n    for(int l=0; l<M; l++) {\\n      if(A[l] == N) {\\n        total++;\\n      }\\n    }\\n    System.out.println(total);\\n  }\\n}", "target": "169", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "sf", "pc", "ser", "ch", "server", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "con", "exp", "bc", "cs", "sw", "cor", "lc", "loc", "c", "cer", "sp", "system", "sq", "uc", "soc", "g", "cle", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "esc", "ctx", "sync"], "N": ["S", "Num", "No", "NA", "NL", "C", "J", "num", " n", "Size", "U", "Y", "F", "NN", "P", " Ne", "m", "T", "I", "Ni", "R", "n", "B", "Ne", "V", "Mo", "K", "ND", "D", "NT", "H", "Z", "O", "Ns", "NS", "W", "E", "X"], "M": ["MN", "S", "Num", "MM", "DM", "JM", "NA", "Mi", "C", "J", "U", "Y", "F", "Q", "P", "MD", "m", "T", "I", "MX", "CM", "MT", "R", "OM", "n", "B", "NM", "V", "K", "D", "H", "O", "Z", "number", "LM", "W", "E", "X"], "total": ["all", "otal", "complete", "nt", "pi", "count", "null", "less", "cost", "num", "average", "a", "part", "partial", "valid", "iter", "info", "temp", "length", "ok", "last", "sum", "key", "tax", "Total", "m", "done", "full", "active", "max", "alpha", "n", "result", "current", "no", "scale", "found", "number", "shared", "real", "error", "t"], "A": ["S", "NA", "C", "Part", "J", "AA", "Average", "LA", "a", "As", "U", "Y", "Array", "F", "P", "Ma", "Total", "API", "And", "T", "I", "At", "alpha", "Max", "Sum", "Alpha", "B", "Ar", "V", "Args", "K", "Access", "All", "D", "H", "O", "CA", "G", "The", "W", "E"], "i": ["bi", "hi", "im", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "is", "ri", "ik", "uli", "start", "init", "z", "ci", "ui", "ini", "index", "m", "x", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "b", "li", "in", "y", "ki", "ind", "fi"], "j": ["jj", "jc", "p", "it", "u", "J", "ji", "v", "jp", "ij", "z", "h", "c", "key", "m", "w", "x", "e", "I", "ja", "ie", "q", "kn", "n", "g", "b", "ii", "li", "js", "y", "jl", "ind", "aj"], "L": ["Lu", "Len", "S", "NL", "Li", "J", "ln", "v", "LA", "LU", "U", "F", "LR", "z", "P", "m", "I", "LL", "n", "kl", "B", "V", "K", "D", "H", "Z", "G", "LT", "lf", "LM", "W", "E", "ll", "LI", "X"], "k": ["sk", "p", "it", "u", "id", "ko", "ck", "ke", "ks", "v", "kk", "ik", "ph", "z", "h", "end", "dk", "ok", "ek", "c", "key", "w", "q", "d", "kn", "g", "kl", "b", "kin", "kid", "K", "uk", "y", " K", "ki"], "f": ["fo", "fb", "sf", "fl", "id", "u", "ln", "v", "ff", "fc", "fr", "ef", "F", "fs", "h", "fe", "z", "end", "info", "fen", "fd", "c", "m", "w", "e", "col", "fp", "ie", "cf", "q", "o", "rf", "d", "inf", "g", "n", "b", "fold", "found", "fx", "t", "fi"], "l": ["cl", "bl", "fl", "p", "u", "ln", "v", "le", "el", "lin", "ls", "lu", "z", "lb", "nl", "lp", "len", "lc", "sl", "c", "m", "x", "e", "pl", "ul", "o", "d", "lv", "n", "kl", "b", "li", "dl", "ol", "il", "ell", "la", "lf", "jl", "ll"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc=new Scanner(System.in);\\n        String S=sc.next();\\n        int[] A=new int[4];\\n        A[0]=Character.getNumericValue(S.charAt(0));\\n        A[1]=Character.getNumericValue(S.charAt(1));\\n        A[2]=Character.getNumericValue(S.charAt(2));\\n        A[3]=Character.getNumericValue(S.charAt(3));\\n        \\n        int ans=A[0];\\n        \\n        for(int i=0;i<(1<<3);i++){\\n            for(int j=0;j<3;j++){\\n                if((1&(i>>j))==1){\\n                    ans+=A[j+1];\\n                }else{\\n                    ans-=A[j+1];\\n                }\\n            }\\n            \\n            if(ans==7){\\n                System.out.print(A[0]);\\n                for(int j=0;j<3;j++){\\n                    if((1&(i>>j))==1){\\n                        System.out.print(\"+\"+A[j+1]);\\n                    }else{\\n                        System.out.print(\"-\"+A[j+1]);\\n                    }\\n                }\\n                System.out.println(\"=7\");\\n                break;\\n            }\\n            \\n            ans=A[0];\\n        }\\n    }\\n}", "target": "152", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "nt", "scope", "proc", "ch", "sec", "ss", " SC", "si", "cur", "asc", "sh", "Sc", "SC", "r", "iss", "bc", "desc", "s", "c", " scr", "sp", "acc", "system", "sq", "uc", "g", "sem", "se", "ner", " Sc", "reader", "anc", "exec", "scan", "Scan", "osc", "rc", "cr", "sch", "parser", "Desc", "out", "esc", "cus", "sync"], "S": ["SI", "AS", "Sin", "SS", "New", "ST", "SN", "IS", "VS", "Socket", "C", "TS", "Standard", "US", "Unit", "Fs", "N", "Os", "Regular", "OS", "RS", "SE", "U", "SU", "SH", "SC", "GS", "Screen", "Sync", "Us", "Si", "Service", "WS", "Single", "Su", "Sign", "In", "BS", "s", "Session", "SM", " s", "Ws", "Site", "SO", "T", "I", "Sing", "Stream", "As", "L", "R", "Space", "St", "Text", "Sl", "NS", "DS", "SR", "CS", "Characters", "Source", "Start", "SER"], "A": ["Info", "AR", "C", "Ca", "M", "Average", "a", "None", "AST", "Area", "Auth", "API", "Ab", "Alpha", "Args", "K", "CA", "W", "E", "AS", "Part", "An", "Java", "FA", "Address", "MA", "This", "Code", "P", "Ma", "PA", "Ast", "Na", "At", "HA", "O", "History", "AN", "Content", "F", "SA", "Answer", "File", "Entry", "UA", "AU", "And", "I", "KA", "L", "B", "V", "Action", "GA", "X", "Ha", "Basic", "AM", "NA", "AA", "N", "LA", "As", "Y", "Array", "AP", "au", "App", "Files", "Ar", "Access", "Default"], "ans": ["ams", "ana", "acts", "sk", "ars", "aned", "vers", "anas", "AN", "na", "errors", "ases", "ins", "An", "aus", "ss", "ks", "anz", "lan", "anon", "aces", "asts", "actions", "powers", "atan", "ions", "ations", "eps", "ls", "ips", "ens", "cs", "ians", "types", "results", "vs", "s", "os", "ings", "cas", "ds", "nas", "ants", "ches", "an", " means", "ops", "cons", "ANS", "ai", "flags", "ents", "ns", "ras", "ats", "faces", "anc", "ids", "outs", "as", "la", "annot", "ons", " scans", "amps", "ays", "can", "ann"], "i": ["bi", "hi", "ori", "pi", "ni", "iu", "p", "u", "id", "qi", "ei", "ji", "xi", "v", "si", "ix", "l", "is", "ri", "io", "z", "f", "ci", "s", "vi", "ui", "ini", "c", "phi", "x", "ip", "e", "I", "ie", "ai", "o", "gi", "mi", "ii", "zi", "b", "li", "oi", "yi", "in", "y", "ind"], "j": ["oj", "adj", "qi", "l", "fr", "ny", "ah", "key", "jan", "w", "jet", "ie", "o", "g", "ii", "je", "section", "aj", "bi", "py", "dj", "jc", "ni", "p", "J", "bj", "pr", "ix", "z", "h", "f", "jay", "uj", "d", "n", "js", "jo", "jj", "it", "ji", "v", "ij", "ik", "jon", "br", "x", "q", "gi", "b", "err", "dy", "obj", "y", "jl", "jen", "out", "u", "ch", "gh", "jp", "el", "c", "e", "ja", "pt", "li", "k", "job"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static Scanner scanner = new Scanner(System.in);\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tStringBuilder text = new StringBuilder(input());\\n\t\ttext.reverse();\\n\t\tSystem.out.println(text);\\n\\n\t\tclose();\\n\\n\t}\\n\\n\tpublic static String input() {\\n\\n\t\treturn scanner.nextLine();\\n\\n\t}\\n\\n\tpublic static void close() {\\n\\n\t\tif (scanner != null) {\\n\\n\t\t\tscanner.close();\\n\\n\t\t}\\n\t}\\n}", "target": "237", "substitutes": {"scanner": [" scaner", " scanener", "Scaninner", "scanker", "baninner", "anner", "aninner", "caner", "banner", "canter", "canator", "caninner", " scanter", "banener", "aner", "scanter", " scanator", "scanener", "Scanener", "canker", "anninner", "scaner", "canener", "Scanker", "scanator", "Scanter", "banker", "Scaner", "annner", "Scanator", "anker", "annker", "canner", "Scanner", "scaninner"], "text": ["font", "pattern", "this", "ut", "print", "buffer", "class", "TEXT", "url", "line", "data", "start", "source", "info", "vert", "input", "method", "length", "letter", "image", "contract", "feed", "format", "output", "config", "str", "string", "writer", "translation", "code", "content", "context", "element", "result", "object", "Text", "editor", "in", "connection", "not", "txt", "template", "struct", "out", "builder"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in=new Scanner(System.in);\\n\t\tint n=in.nextInt(), k = in.nextInt();\\n\t\tint[] a=new int[n];\\n\t\tfor (int i=0;i<n;++i) a[i]=in.nextInt();\\n\t\tint[] dp = new int[n];\\n        dp[1] = Math.abs(a[1] - a[0]);\\n\t\tfor (int i=2;i<n;++i) {\\n          dp[i] = dp[i-1] + Math.abs(a[i] - a[i-1]);\\n          for(int j = 2; j <=k; j++) {\\n            if(i - j < 0) {\\n              break;\\n            }\\n            dp[i] = Math.min(dp[i], dp[i-j] + Math.abs(a[i] - a[i-j]));\\n          }\\n\t\t}\\n\t\tSystem.out.println(dp[n-1]);\\n\t}\\n}", "target": "241", "substitutes": {"in": ["isin", "rec", "p", "id", "login", "ins", "serv", "ln", "din", "ex", "sub", "line", "l", "is", "lin", "con", "r", "init", "input", "er", "In", "f", "s", "user", "c", "ini", "inn", "conn", "image", "nin", "str", "cin", "socket", "token", "ai", "gin", "inf", "inner", "d", "rin", "g", "b", "err", "kin", "again", "reader", "pin", "scan", "connection", "log", "bin", "readable", "txt", "as", "inc", "doc", "conv", "IN", "out", "thin", "re"], "n": ["nn", "nc", "nt", "p", "size", "u", "num", "N", "v", "cn", "l", "out", "sn", "r", "z", "f", "c", "ne", "m", "an", "x", "e", "o", "d", "ns", "b", "network", "nb", "ner", "net", "no", "mn", "number", "y", "en", "t"], "k": ["sk", "p", "u", "num", "N", "ks", "v", "l", "z", "h", "f", "ok", "c", "key", "ne", "m", "w", "x", "e", "kw", "max", "q", "o", "d", "g", "b", "K", "y"], "a": ["api", "p", "ia", "u", "na", "ad", "span", "auto", "ba", "ar", "aa", "A", "aux", "oa", "pa", "f", "aj", "au", "c", "ga", "ata", "an", "x", "w", "sa", "ea", "ae", "ada", "e", "active", "ai", "alpha", "d", "ca", "b", "ac", "aaa", "work", "wa", "sta", "ama", "as", "address", "asa", "area", "ans", "da", "ab", "ma", "y", "la", "am", "va", "array", "audio"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "ani", "multi", "qi", "ei", "xi", "ji", "v", "anti", "si", "ix", "l", "mini", "is", "ik", "ri", "io", "init", "info", "z", "abi", "f", "ci", "vi", "ui", "ini", "c", "index", "eni", "phi", "x", "mu", "uri", "adi", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "zi", "cli", "li", "isi", "oi", "yi", "y", "ki", "ti", "fi"], "dp": ["direction", "dm", "wp", "api", "pi", "p", "pb", "deb", "ap", "db", "data", "dq", "point", "wd", "dat", "adr", "gap", "df", "reb", "lp", "dB", "cp", "pa", "dr", "cm", "params", "dc", "ga", "ds", "pm", "password", "pkg", "sp", "np", "ip", "di", "ea", "e", "fp", "dep", "hp", "alpha", "d", "gp", "vp", "b", "dim", "dl", "dt", "tp", "beta", "DP", "pp", "address", "da", "port", "pad", "bp"], "j": ["bi", "ori", "jj", "ni", "jc", "p", "adj", "it", "u", "one", "J", "qi", "ch", "xi", "ji", "v", "jp", "si", "ix", "l", "ij", "ik", "start", "z", "h", "f", "br", "ui", "c", "key", "m", "w", "x", "e", "di", "jo", "ja", "ie", "q", "o", "d", "g", "ii", "b", "dy", "li", "js", "oi", "obj", "je", "y", "jl", "t", "aj"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tString input = br.readLine();\\n\t\tString s = input + input.substring(0, input.length()-1);\\n\t\tString p = br.readLine();\\n\t\tif (s.indexOf(p) > -1) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "198", "substitutes": {"br": ["bl", "ber", "wr", "hr", "rb", "browser", "tr", "arr", "res", "jar", "lr", "cb", "fr", "r", "bf", "bh", "yr", "io", "iter", "bridge", "ler", "dr", "er", "mr", "orb", "BR", "her", "bro", "HR", "img", "str", "string", "Br", "abs", "b", "err", "gr", "ger", "reader", "cro", "buf", "obj", "bb", "box", "cr", "ref", "bar"], "input": ["single", "parent", "initial", "prefix", "null", "u", "http", "xml", "json", "binary", "inside", "i", "path", "url", "a", "data", "request", "header", "source", "stream", "init", "temp", "f", "image", "c", "format", "output", "w", "pull", "img", "Input", "str", "text", "string", "active", "raw", "xxx", "q", "inf", "inner", "comment", "plus", "result", "current", "reader", "amp", "form", "qa", "in", "bin", "address", "inc", "argument", "error", "audio"], "s": ["S", "sf", "space", "u", "ins", "ss", "ks", "si", "i", "strings", "l", "qs", "a", "es", "sv", "ls", "ps", "f", "sl", "os", "c", "sp", "parts", "sq", "string", "ssl", "o", "d", "n", "ns", "g", "b", "services", "styles", "su", "sb", "in", "ans", "sg", "t"], "p": ["py", "api", "pi", "pc", "u", "po", "pr", "v", "jp", "i", "ap", "l", "pre", "r", "P", "ps", "pa", "f", "cp", "pat", "c", "sp", "np", "ip", "pt", "string", "fp", "q", "o", "op", "n", "vp", "b", "tp", "j", "pin", "pp", "t", "pad", "bp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\tString input = scanner.nextLine();\\n\\n\t\tString AB[] = input.split(\" \");\\n\\n\t\tint A = Integer.parseInt(AB[0]);\\n\\n\t\tint B = Integer.parseInt(AB[1]);\\n\\n\t\tint[] result = new int[3];\\n\\n\t\tresult[0] = A + B;\\n\\n\t\tresult[1] = A - B;\\n\\n\t\tresult[2] = A * B;\\n\\n\t\tint max = result[0];\\n\\n\t\tfor (int i:result){\\n\t\t\tif(i > max) {\\n\t\t\t\tmax = i;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(max);\\n\t}\\n\\n}", "target": "188", "substitutes": {}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.InputMismatchException;\\nimport java.util.LinkedList;\\nimport java.util.PriorityQueue;\\nimport java.util.TreeSet;\\n \\n \\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    InputReader sc = new InputReader(System.in);\\n \\n \\n    int n = sc.nextInt();\\n\t\tint[] nums = new int[n];\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tnums[i] = sc.nextInt();\\n\t\t}\\n \\n \t\tint ans = 0;\\n\t\tfor(int i = 1; i < n - 1; i++){\\n\t\t\tif((nums[i-1] < nums[i] && nums[i] < nums[i+1]) || (nums[i-1] > nums[i] && nums[i] > nums[i+1])){\\n\t\t\t\tans++;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n \\n \\n  }\\n \\n //\u3053\u3053\u304b\u3089\u30c6\u30f3\u30d7\u30ec\\n  static class InputReader {\\n      private InputStream stream;\\n      private byte[] buf = new byte[1024];\\n      private int curChar;\\n      private int numChars;\\n      private SpaceCharFilter filter;\\n \\n      public InputReader(InputStream stream) {\\n          this.stream = stream;\\n      }\\n \\n      public int next() {\\n          if (numChars == -1)\\n              throw new InputMismatchException();\\n          if (curChar >= numChars) {\\n              curChar = 0;\\n              try {\\n                  numChars = stream.read(buf);\\n              } catch (IOException e) {\\n                  throw new InputMismatchException();\\n              }\\n              if (numChars <= 0)\\n                  return -1;\\n          }\\n          return buf[curChar++];\\n      }\\n \\n      public String nextStr() {\\n        int c = next();\\n        while(isSpaceChar(c)){c = next();}\\n        StringBuffer str = new StringBuffer();\\n        do{\\n          str.append((char)c);\\n          c = next();\\n        }while(!isSpaceChar(c));\\n        return str.toString();\\n      }\\n \\n      public char nextChar() {\\n        int c = next();\\n        while(isSpaceChar(c)){c = next();}\\n        char ret;\\n        do{\\n          ret = (char)c;\\n          c = next();\\n        }while(!isSpaceChar(c));\\n        return ret;\\n      }\\n \\n      public int nextInt() {\\n          int c = next();\\n          while (isSpaceChar(c))\\n              c = next();\\n          int sgn = 1;\\n          if (c == '-') {\\n              sgn = -1;\\n              c = next();\\n          }\\n          int res = 0;\\n          do {\\n              if (c < '0' || c > '9')\\n                  throw new InputMismatchException();\\n              res *= 10;\\n              res += c - '0';\\n              c = next();\\n          } while (!isSpaceChar(c));\\n          return res * sgn;\\n      }\\n \\n      public boolean isSpaceChar(int c) {\\n          if (filter != null)\\n              return filter.isSpaceChar(c);\\n          return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n      }\\n \\n      public interface SpaceCharFilter {\\n          public boolean isSpaceChar(int ch);\\n      }\\n  }\\n}", "target": "96", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "sche", "scope", "pc", "com", "ch", "tc", "ss", " SC", "asc", "sh", "fc", "Sc", "SC", "ct", "stream", "bc", "cs", "cv", "sw", "src", "lc", "ci", "dc", "c", "cer", "cy", "sp", "system", "uc", "soc", "ca", "sem", " Sc", "exec", "isc", "osc", "rc", "cc", "cr", "cont", "cms", "ec", "esc", "ctx", "cus"], "n": ["nn", "nc", "nt", "count", "p", "dn", "u", "num", "nan", "N", "ln", "v", "l", "a", "sn", "name", "z", "nl", "len", "f", "s", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "names", "j", "net", "k", "no", "in", "mn", "y", "en", "t"], "nums": ["numes", "neum", "cumers", "num", " numps", "numers", "cums", "nrams", "cum", "Nubs", " nules", "unum", "uumpy", " numes", "nsums", "cus", "Nans", " nubs", "tums", "numbers", " numers", "unims", "numps", "codes", "nodes", "neumers", "cubs", "nus", "unodes", "uum", "nsumes", "nans", "nanum", "nsans", "cumbers", "tumbers", "uums", "unules", "nsumbers", "cumpy", "unals", " nrams", "cules", "nanules", " num", "nals", "cims", "Nules", "nanums", "nanus", " nals", " nus", "tules", " nans", "numpy", "Numps", "Num", "tum", "crams", "unums", " numbers", "nubs", "neums", "Nums", "Numes", "cals", "tumes", "cumps", "Numbers", "neims", "trams", "Numpy", "uumbers", " nodes", "cumes", " nims", "nims", "nules"], "i": ["bi", "hi", "isin", "api", "pi", "ori", "ni", "iu", "p", "ami", "slice", "u", "id", "it", "multi", "qi", "ei", "xi", "ji", "v", "anti", "si", "ix", "a", "page", "ik", "ri", "uli", "io", "init", "info", "source", "abi", "f", "ci", "ui", "ini", "key", "index", "eni", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "cli", "site", "li", "iv", "isi", "j", "oi", "yi", "in", "y", "ki", "ti", "fi"], "ans": ["nn", "ana", "sk", "ars", "anas", "aned", "AN", "na", "ins", "nan", "aus", "ks", "span", "anon", "lan", "aces", "a", "atan", "es", "ions", "offs", "ls", "eps", "ens", "s", "os", "nas", "cas", "ds", "ants", "an", "x", "cons", "ANS", "ai", "ums", "anes", "leans", "ents", "ns", "ras", "ats", "anus", "anc", "san", "annot", "as", "outs", "ons", "aning", "amps", "annels", "ann"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[]args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t\\n\t\tint[] A = new int[3];\\n\t\t\\n\t\tfor(int i = 0;i<3;i++){\\n\t\t\tA[i] = scan.nextInt();\\n\t\t}\\n\t\t\\n\t\tArrays.sort(A);//\u6607\u9806\u306b\u30bd\u30fc\u30c8\\n\t\t\\n\t\tif(A[0]==5&&A[1]==5&&A[2]==7)\\n\t\t\tSystem.out.println(\"YES\");\\n\t\telse\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t\\n\t\t\\n\t\t\\n\t\t\\n\t}\\n\\n}\\n", "target": "16", "substitutes": {"scan": ["nn", "watch", "connect", "walk", "na", "v", "run", "search", "l", "sort", "r", "can", "start", "sc", "syn", "win", "store", "nl", "get", "query", "gen", "chan", "an", "system", "skip", "n", "stat", "ignore", "se", "ner", "open", "reader", "pin", "in", "parse", "Scan", "clean", "san", "ans", "pan", "read", "array", "ann", "sync"], "A": ["AV", "S", "AR", "AM", "NA", "Count", "C", "N", "AA", "M", "Average", "LA", "a", "As", "U", "Y", "Array", "F", "AP", "P", "AST", "API", "T", "I", "L", "R", "Alpha", "Bar", "B", "Files", "Ar", "V", "Args", "K", "Access", "AB", "D", "H", "ASC", "AI", "CA", "G", "The", "Adam", "DATA", "Items", "W", "E", "X"], "i": ["bi", "hi", "pi", "ni", "p", "slice", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "a", "l", "part", "ri", "r", "start", "block", "init", "h", "z", "abi", "end", "io", "info", "f", "ci", "c", "ui", "key", "ini", "index", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ai", "gi", "inner", "n", "ii", "b", "li", "j", "k", "oi", "in", "chi", "strength", "my", "ti"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    long N = Long.parseLong(sc.next());\\n    \\n    long min = N-1;\\n    long sqrt = (long)Math.sqrt(N);\\n    for(long i=2;i<=sqrt;i++){\\n      if(N%i==0){\\n        if(i-1+N/i-1<min){\\n          min = i-1+N/i-1;\\n        }\\n      }\\n    }\\n    System.out.print(min);\\n    System.out.flush();\\n  }\\n}", "target": "157", "substitutes": {"sc": ["enc", "sci", "nc", "nt", "pc", "class", "ch", "ss", " SC", "cur", "sub", "Sc", "SC", "cb", "exp", "bc", "cs", "sw", "desc", "lc", "dc", "c", " scr", "or", "sp", "acc", "ec", "system", "uc", "soc", "g", "se", "ner", " Sc", "exec", "scan", "osc", " cur", "rc", "cc", "cr", "sch", " sp", "out", "esc", "sync"], "N": ["MN", "Len", "S", "Num", "IN", "NA", "SN", "NL", "C", "J", "M", "OS", " n", "Size", "U", "Y", "F", "Number", "Q", "NN", "P", "GN", "TW", "length", "T", "I", "Ni", "II", "L", "R", "n", "ns", "B", "NM", "network", "Ne", "V", "CNN", "K", "NB", "Length", "D", "NT", "H", "O", "Ns", "NS", "Z", "NE", "NI", "X"], "min": ["none", "unit", "don", "initial", "low", "count", "val", "size", "na", "minimum", "next", "span", "mins", "version", "mini", "pre", "sort", "sign", "diff", "ng", "partial", "start", "value", "init", "un", "lower", "len", "length", "last", "pm", "rain", "m", "spec", "left", "MIN", "max", "skip", "act", "shift", "n", "small", "limit", "ignore", "dim", "pos", "scale", "Mini", "mn", "little", "mean", "pri", "area", "Min", "sol", "default"], "sqrt": ["squrt", "infrf", "sqr", "shRT", "shrf", "negrf", "qrt", " sqr", "negRT", " sqRT", "squnt", "infRT", " sqrf", "qort", "shrt", "qRT", "qnt", "infr", "squRT", "negort", "sqnt", " sqnt", "sqRT", "sqrf", "qr", "infrt", "squrf", "sqort", "negrt", "qrf"], "i": ["bi", "hi", "api", "pi", "ni", "p", "iu", "ami", "u", "id", "multi", "qi", "ei", "xi", "ji", "v", "anti", "si", "ix", "l", "mini", "uni", "ri", "r", "uli", "start", "init", "io", "z", "h", "abi", "length", "f", "ci", "s", "c", "ui", "ini", "index", "m", "phi", "x", "eni", "uri", "mu", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "cli", "ii", "b", "zi", "li", "j", "oi", "chi", "t", "ti", "fi"]}}
{"code": "import java.util.Map;\\nimport java.util.Scanner;\\nimport java.util.TreeMap;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n\\n        Map<String, Integer> wordmap = new TreeMap<>();\\n        int max = 0;\\n        for (int i=0;i<N;i++) {\\n            String S_n = sc.next();\\n            if (wordmap.containsKey(S_n)) {\\n                int count = wordmap.get(S_n);\\n                wordmap.put(S_n, count + 1);\\n                if (max <= count) max = count + 1;\\n            } else {\\n                wordmap.put(S_n, 1);\\n                if (max == 0) max = 1;\\n            }\\n        }\\n\\n        for (String key : wordmap.keySet()) {\\n            if (wordmap.get(key) == max) System.out.println(key);\\n        }\\n\\n    }\\n}", "target": "235", "substitutes": {"sc": ["cl", "mc", "nc", "sci", "scope", "pc", "ch", "sec", "ss", " SC", "asc", "search", "sh", "Sc", "SC", "screen", "RC", "cs", "bc", "sw", "cv", "src", "ci", "dc", "c", "cer", "sp", "system", "sq", "uc", "sr", "sem", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "isc", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus", "sync"], "N": ["Len", "S", "Num", "NA", "Count", "C", "M", " n", "Size", "Y", "F", "NN", "Q", "P", "T", "Ni", "I", "L", "R", "n", "B", "network", "Ne", "V", "K", "NB", "D", "NT", "H", "Z", "NS", "O", "Ns", "NG", "W", "X"], "wordmap": [" wordhash", "stringopen", "woodmap", "letterMAP", "Wordset", "woodcode", "Wordmap", "lettermap", "keydict", "wardmap", "wordset", "stringshape", "stringlist", "keymap", "wordsopen", "playpad", "wordsMAP", "playapp", " wordblock", "woodMap", "WordMap", " wordper", "keyset", "woodset", "gramper", "wordopen", "Wordcode", "keyper", "wordslist", "wordpad", "wincache", "wordblock", "wordper", "wordMap", "Wordcache", "letterfile", " wordopen", "wardapp", "letterhash", "letterblock", "wardshape", "wordview", " wordpad", "worddict", " wordview", "Wordblock", " wordfile", "wordcache", " wordMAP", "letterapp", "wordshash", "wordlist", " worddict", "keyfile", "wardpad", "gramview", " wordset", "gramset", "Wordlist", "grammap", "playmap", " wordcache", " wordMap", "wordhash", "stringmap", "playshape", "winlist", "wordapp", " wordapp", "keyview", " wordlist", "wordsshape", "winmap", "wordsmap", "wordcode", " wordcode", "wordsblock", "letterdict", "winblock", " wordshape", "keyapp", "wordfile", "wordMAP", "wordshape"], "max": ["total", "size", "num", "init", "co", "row", "ax", "w", "depth", "pop", "rand", "limit", "mod", "all", "none", "p", "id", "next", "name", "end", "first", "sum", "index", "list", "active", "node", "Max", "n", "dom", "parse", "no", "scale", "number", "default", "patch", "part", "right", "cp", "x", "min", "q", "rest", "rank", "with", "only", "work", "step", "force", "wrap", "MAX", "cache", "always", "out", "act", "can", "maximum", "conf", "parent", "cat", "chain", "now", "auto", "start", "last", "c", "k", "cr", "range"], "i": ["bi", "pi", "ni", "p", "iu", "ami", "it", "u", "id", "multi", "qi", "xi", "v", "si", "uli", "io", "h", "info", "f", "ci", "ui", "c", "ini", "index", "m", "x", "mu", "uri", "adi", "ip", "di", "I", "ai", "o", "gi", "d", "n", "ii", "b", "zi", "li", "j", "oi", "chi", "ind", "ti"], "S_n": ["SIDp", "S_nb", "NS_ne", " S__n", "NS___n", "s_nb", "S_nr", "S_d", "SIDname", " S__name", "SIXnb", "SIDN", "S___nw", "NS_n", "S___ne", "s_ne", "S_nw", "SOCKp", "s_nor", "SOCKn", "s_cn", "S_N", "SOCKN", "SIXp", " S_p", "S__N", "S___p", "s_nr", "S_ne", "s_d", "SIXnor", "NS_nw", "SESSn", "NS___ne", "S__n", "S__name", "S___n", "S_cn", "S_p", "SESSnb", "S_name", "s_p", " S_N", "NS___p", "S_nor", "s_n", "NS___nw", "SESSnor", "SIXn", "NS_p", " S__p", " S_name", "SIDn", " S__N", "SOCKname", "S__p", "SESSp"], "count": ["all", "counter", "cat", "call", "parent", "age", "Count", "size", "class", "core", "id", "num", "add", "name", "part", "start", "len", "length", "cmp", "c", "sum", "index", "weight", "depth", "base", "list", "process", "carry", "large", "code", "common", "content", "current", "found", "child", "type", "group", "number", "level", "cc", "inc", "ref", "area", "cache", "act", "coll"], "key": ["ace", "p", "id", "next", "v", "path", "keys", "name", "point", "use", "part", "ask", "entry", "exp", "value", "source", "row", "link", "co", "char", "pair", "index", "w", "x", "Key", "list", "by", "str", "ip", "text", "string", "col", "ry", "code", "KEY", "q", "n", "rule", "pick", "object", "k", "connection", "step", "word", "lock", "act", "query"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] d = new int[n];\\n\t\tint count = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\td[i] = sc.nextInt();\\n\t\t}\\n\t\tArrays.sort(d);\\n\t\tint min = d[n / 2 - 1];\\n\t\tint max = d[n / 2];\\n\t\tfor (int i = min; i < max; i++) {\\n\t\t\tcount++;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "119", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "na", "ser", "ch", "server", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "ct", "screen", "cs", "bc", "cv", "src", "lc", "ci", "c", "cer", "sp", "system", "sq", "uc", "set", "soc", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "parser", "ec", "esc", "cus", "sync"], "n": ["nn", "nc", "nt", "p", "size", "u", "nor", "num", "N", "v", "l", "a", "sn", "r", "z", "nl", "len", "f", "conn", "s", "c", "ne", "m", "w", "x", "e", "left", "o", "ns", "b", "network", "nb", "j", "net", "k", "no", "in", "not", "number", "y", "en", "t"], "d": ["dist", "sd", "ded", "p", "dn", "dict", "id", "u", "did", "ad", "l", "defined", "data", "db", "sort", "a", "diff", "dat", "start", "z", "dr", "dc", "s", "c", "ds", "index", "m", "dos", "done", "di", "e", "md", "dd", "ld", "dom", "b", "dim", "dt", "in", "D", "da", "ind", "t"], "count": ["counter", "div", "total", "parent", "nt", "second", "now", "Count", "size", "test", "id", "num", "keep", "cur", "ct", "name", "use", "diff", "start", "info", "z", "len", "length", "f", "last", "c", "sum", "weight", "index", "depth", "list", "base", "process", "label", "col", "code", "stat", "err", "limit", "nb", "work", "child", "found", "type", "cc", "number", "cache", "th", "ind", "coll"], "i": ["bi", "api", "pi", "ni", "iu", "slice", "u", "id", "it", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "ri", "init", "io", "info", "source", "f", "ci", "vi", "ui", "ini", "c", "index", "m", "phi", "x", "mu", "uri", "ip", "di", "e", "I", "ie", "ai", "o", "gi", "inner", "mi", "ii", "b", "li", "j", "oi", "in", "chi", "y", "my", "ti", "fi"], "min": ["low", "size", "id", "next", "mins", "a", "l", "sort", "mini", "part", "r", "start", "init", "lower", "len", "first", "length", "s", "index", "m", "x", "base", "left", "b", "small", "pos", "in", "from", "area", "off", "range", "Min", "ind"], "max": ["total", "nt", "p", "size", "u", "id", "nd", "v", "part", "r", "right", "start", "z", "h", "end", "length", "f", "s", "c", "ax", "index", "m", "w", "x", "q", "Max", "b", "k", "step", "no", "MAX", "range"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int Q = sc.nextInt();\\n        String S = sc.next();\\n        int[] l = new int[Q];\\n        int[] r = new int[Q];\\n        for(int i = 0; i < Q; i++){\\n            l[i] = sc.nextInt()-1;\\n            r[i] = sc.nextInt()-1;\\n        }\\n        int[] a = new int[N];\\n        for(int i = 0; i < N; i++){\\n            if(S.charAt(i) == 'A')\\n                a[i] = 1;\\n            if(S.charAt(i) == 'C')\\n                a[i] = -1;\\n        }\\n        int[] dp = new int[N];\\n        dp[0] = 0;\\n        for(int i = 0; i < N-1; i++){\\n            if(a[i] == 1 && a[i+1] == -1)\\n                dp[i+1] = dp[i] + 1;\\n            else\\n                dp[i+1] = dp[i];\\n        }\\n        for(int i = 0; i < Q; i++){\\n            System.out.println(dp[r[i]] - dp[l[i]]);\\n        }\\n    }\\n}\\n", "target": "52", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "sf", "scope", "pc", "com", "ch", "sec", "ss", " SC", "cur", "asc", "sh", "search", "Sc", "SC", "cs", "bc", "sw", "cv", "cor", "row", "src", "lc", "loc", "s", "desc", "c", " scr", "sp", "system", "sq", "uc", "soc", "sr", "cli", "cle", "sem", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "parse", "Scan", "osc", "rc", "cc", "cr", "cont", "sch", "squ", "cam", "esc", "ctx", "sync"], "N": ["Len", "Num", "No", "NA", "C", "J", "M", " n", "Size", "Nat", "U", "Y", "Node", "None", "F", "Network", "NN", "P", "A", "T", "I", "Ni", "L", "R", "n", "B", "NM", "Ne", "V", "K", "D", "NT", "H", "Z", "NS", "O", "Ns", "G", "E", "X"], "Q": ["Num", "IQ", "C", "J", "M", "U", "Y", "Qu", "F", "CL", "P", "A", "QU", "T", "I", "NC", "q", "L", "R", "Query", "n", "B", "V", "K", "D", "H", "O", "Z", "G", "Flow", "MQ", "W", "E", "Que", "X"], "S": ["SI", "AS", "SS", "VS", "SN", "IS", "TS", "C", "Socket", "M", "RS", "SE", "U", "SU", "SC", "SH", "GS", "Si", "F", "P", "A", "Single", "BS", "s", " s", "SO", "T", "I", "Sing", "L", "R", "CSS", "B", "V", "D", "H", "Z", "NS", "HS", "DS", "G", "W", "E"], "l": ["p", "u", "ln", "v", "ar", "el", "lin", "al", "z", "h", "nl", "len", "f", "lc", "s", "sl", "c", "x", "e", "q", "o", "L", "d", "n", "g", "kl", "b", "li", "dl", "j", "ol", "y", "la", "t", "ll"], "r": ["ir", "p", "u", "hr", "ro", "rb", "rs", "v", "pr", "ar", "fr", "ur", "ri", "z", "h", "nr", "er", "f", "dr", "s", "c", "m", "x", "e", "q", "R", "d", "n", "g", "sr", "b", "rr", "j", "k", "y", "rt", "t", "ru"], "i": ["multi", "qi", "uni", "uli", "init", "info", "s", "w", "phi", "uri", "ie", "o", "inner", "cli", "ii", "zi", "chi", "bi", "ni", "hei", "p", "iu", "id", "anti", "si", "ix", "mini", "data", "name", "idi", "io", "h", "abi", "f", "ci", "vi", "ui", "ini", "index", "eni", "n", "j", "yi", "my", "fi", "pi", "it", "ei", "xi", "ji", "v", "x", "di", "I", "ai", "q", "gi", "b", "in", "y", "ti", "hi", "api", "ori", "ami", "u", "is", "ri", "source", "c", "e", "ip", "mi", "isi", "li", "oi"], "a": ["ana", "api", "p", "ia", "u", "na", "ad", "ba", "ar", "aa", "A", "oa", "au", "s", "c", "at", "an", "sa", "ae", "ada", "ea", "e", "ai", "alpha", "o", "d", "n", "b", "ca", "ac", "aaa", "ama", "as", "ans", "asa", "area", "la", "da", "y", "am", "va", "aj"], "dp": ["dm", "wp", "dist", "xd", "api", "p", "u", "pb", "id", "deb", "ad", "v", "dh", "data", "db", "dq", "eps", "dat", "pg", "adr", "gap", "wd", "ph", "df", "lp", "dB", "cp", "pa", "dr", "cm", "vs", "dc", "s", "pid", "c", "ds", "sl", "pm", "drop", "at", "pkg", "sp", "np", "e", "di", "ip", "dep", "alpha", "d", "gp", "dd", "vp", "b", "dim", "dl", "dt", "tp", "qa", "beta", "type", "cd", "DP", "pp", "da", "default", "pad"]}}
{"code": "public class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tjava.util.Scanner sc = new java.util.Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint l = sc.nextInt();\\n\t\tsc.nextLine(); // nextInt()??????????????\u00a3?????????\"\\n\"????\u00b6????????????????\\n\\n\t\tint[][] A = new int[n][m];\\n\t\tint[][] B = new int[m][l];\\n\t\tlong[][] C = new long[n][l];\\n\\n\t\tfor (int i=0; i < n; i++) {\\n\\n\t\t\tString[] data = sc.nextLine().split(\" \");\\n\\n\t\t\tfor (int j=0; j < m; j++) {\\n\t\t\t\tA[i][j] = Integer.parseInt(data[j]);\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tfor (int j=0; j < m; j++) {\\n\\n\t\t\tString[] data = sc.nextLine().split(\" \");\\n\\n\t\t\tfor (int k=0; k < l; k++) {\\n\t\t\t\tB[j][k] = Integer.parseInt(data[k]);\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\t// C[i][k] = sigma(j : 0 -> m) A[i][j] * B[j][k]\\n\\n\t\tfor (int i=0; i < n; i++) {\\n\\n\t\t\tfor (int k=0; k < l; k++) {\\n\\n\t\t\t\tfor (int j=0; j < m; j++) {\\n\t\t\t\t\tC[i][k] += A[i][j] * B[j][k];\\n\t\t\t\t}\\n\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tfor (int i=0; i < n; i++) {\\n\t\t\tfor (int k=0; k < l-1; k++) {\\n\t\t\t\tSystem.out.print(C[i][k] + \" \");\\n\t\t\t}\\n\t\t\tSystem.out.println(C[i][l-1]);\\n\t\t}\\n\\n\t}\\n\\n}", "target": "204", "substitutes": {}}
{"code": "import java.util.HashMap;\\nimport java.util.ArrayList;\\nimport java.util.Scanner;\\nimport java.util.regex.Pattern;\\nimport java.util.Collections;\\nimport java.math.BigDecimal;\\n\\npublic class Main {\\n    public static Scanner sc = new Scanner(System.in);\\n    public static void main(String[] args) throws Exception {\\n        String s = sc.next();\\n        String p = sc.next();\\n        for (int i = 0; i < s.length(); i++) {\\n            s = s.substring(s.length()-1, s.length()) + s.substring(0, s.length()-1);\\n            if (s.indexOf(p) != -1) {\\n                System.out.println(\"Yes\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"No\");\\n    }\\n}", "target": "198", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "ch", "server", "ss", " SC", "si", "sub", "Sc", "SC", "cs", "bc", "sw", "src", "lc", "ci", "c", "sp", "system", "uc", "soc", "sem", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "scene", "spec", "ec", "esc", "ctx", "cus", "sync"], "s": ["S", "sing", "ts", "u", "less", "ins", "ss", "rs", "v", "si", "strings", "l", "a", "qs", "es", "sv", "is", "ls", "ws", "its", "source", "h", "cs", "sin", "results", "ps", "f", "os", "c", "sl", "ds", "x", "parts", "sp", "str", "e", "ssl", "string", "ses", "o", "abs", "d", "n", "ns", "gs", "sets", "services", "b", "sys", "se", "site", "g", "su", "js", "sb", "xs", "sup", "in", "ans", "sg", "t", "posts", "sync"], "p": ["py", "api", "pi", "pr", "jp", "v", "ap", "l", "pre", "point", "part", "eps", "P", "lp", "ps", "pa", "f", "cp", "c", "sp", "np", "ip", "pe", "per", "string", "fp", "n", "vp", "b", "tp", "j", "pos", "pp", "y", "parser", "t", "bp"], "i": ["bi", "pi", "ni", "iu", "it", "u", "id", "slice", "multi", "xi", "v", "si", "ix", "a", "ri", "start", "z", "h", "f", "ci", "c", "ui", "ini", "x", "mu", "uri", "e", "ip", "di", "I", "ai", "o", "d", "ii", "b", "li", "j", "k", "oi", "t", "ti"]}}
{"code": "import java.util.*; \\nimport java.io.*; \\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n     Scanner sc = new Scanner(System.in);\\n     int n = sc.nextInt(); \\n     int m = sc.nextInt(); \\n     if(n<m) {\\n    \t for(int i = 0; i<m; i++) System.out.print(n);\\n     }\\n     else for(int i = 0;i<n; i++) System.out.print(m);\\n   }\\n}", "target": "24", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "com", "ch", "tc", "ss", "sec", " SC", "cur", "asc", "search", "fc", "Sc", "SC", "bc", "cs", "sw", "src", "cv", "lc", "ci", "s", "c", "cer", "sp", "system", "sq", "uc", "cle", "se", "ner", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "coll", "ec", "esc", "ctx", "cus", "sync"], "n": ["nn", "nc", "nt", "ni", "p", "dn", "u", "na", "num", "nu", "N", "ln", "v", "cn", "l", "a", "sn", "name", "ng", "nm", "z", "h", "nl", "un", "f", "c", "ne", "an", "x", "w", "e", "q", "o", "d", "ns", "b", "network", "nb", "j", "pos", "k", "net", "no", "in", "mn", "number", "y", "en"], "m": ["mc", "p", "size", "dn", "u", "num", "N", "M", "v", "l", "a", "mini", "mm", "nm", "z", "h", "f", "cm", "man", "s", "ms", "c", "pm", "an", "x", "e", "q", "md", "o", "d", "mi", "b", "j", "k", "me", "in", "mn", "y", "mobile"], "i": ["bi", "hi", "pi", "ni", "p", "ami", "iu", "it", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "mini", "uni", "ri", "init", "io", "z", "abi", "f", "ci", "ui", "ini", "c", "index", "eni", "x", "phi", "uri", "mu", "ip", "e", "di", "I", "ai", "o", "gi", "inner", "mi", "g", "ii", "zi", "li", "j", "oi", "in", "chi", "ti", "fi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\n\\npublic class Main {\\n  public static void main(String[] args) throws IOException {\\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n    String[] str = in.readLine().split(\" \");\\n    int n = Integer.parseInt(str[0]);\\n    int d = Integer.parseInt(str[1]);\\n    int[][] p = new int[n][d];\\n    for(int i=0; i<n; i++) {\\n      str = in.readLine().split(\" \");\\n      for(int j=0; j<d; j++) {\\n        p[i][j] = Integer.parseInt(str[j]);\\n      }\\n    }\\n    int count = 0;\\n    for(int i=0; i<n; ++i) {\\n      for(int j=i+1; j<n; ++j) {\\n        if(f(p[i],p[j],d))\\n          ++count;\\n      }\\n    }\\n    System.out.println(count);\\n  }\\n  \\n  private static boolean f(int[] p,int[] p2,int n) {\\n    int sum = 0;\\n    for(int i=0; i<n; ++i) \\n      sum += (p[i]-p2[i]) * (p[i]-p2[i]);\\n    return Math.abs(Math.pow((int)Math.sqrt(sum),2)-sum)<0.001;\\n  }\\n}", "target": "59", "substitutes": {"in": ["isin", "buffer", "it", "id", "login", "container", "ins", "din", "ex", "url", "fin", "l", "a", "data", "is", "line", "lin", "con", "r", "part", "init", "source", "win", "stream", "input", "resource", "f", "er", "In", "s", "c", "ini", "inn", "or", "nin", "by", "cin", "socket", "token", "min", "gin", "read", "inner", "rin", "with", "b", "err", "kin", "again", "reader", "write", "connection", "log", "bin", "file", "as", "inc", "doc", "IN", "out", "thin", "re"], "str": ["div", "enc", "status", "unit", "wr", "id", "hr", "sec", "tr", "pr", "arr", "url", "line", "STR", "data", "fr", "name", "r", "part", "iter", "input", "char", "dr", "er", "br", "sl", "s", "style", "key", "star", "list", "sp", "st", "text", "string", "stri", "oct", "Str", "sr", "err", "pass", "ner", "parse", "step", "txt", "cr", "spec", "strip", "sync"], "n": ["nn", "nc", "on", "nt", "dn", "u", "na", "num", "nd", "N", "ln", "v", "cn", "l", "sn", "r", "z", "h", "un", "fn", "conn", "s", "c", "ne", "m", "w", "x", "an", "e", "o", "ns", "b", "g", "network", "nb", "pn", "net", "k", "no", "y", "en", "t"], "d": ["div", "dist", "sd", "dn", "dict", "u", "id", "nd", "ad", "od", "dp", "v", "l", "dir", "r", "dat", "pd", "z", "h", "dr", "f", "dc", "s", "c", "ds", "m", "w", "x", "e", "di", "du", "dd", "ld", "b", "dim", "dy", "dt", "day", "k", "D", "cd", "y", "da", "ind", "t"], "p": ["py", "pi", "pc", "u", "po", "par", "v", "pr", "jp", "path", "ap", "a", "l", "point", "part", "r", "z", "P", "lp", "ps", "cp", "f", "s", "c", "pid", "after", "m", "at", "x", "pe", "sp", "ip", "np", "e", "per", "hp", "q", "o", "g", "b", "tp", "k", "up", "pp", "y", "t", "array"], "i": ["bi", "hi", "ic", "api", "pi", "ori", "ni", "iu", "it", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "l", "a", "mini", "is", "ri", "ik", "r", "my", "start", "io", "init", "z", "info", "end", "f", "ci", "ui", "ini", "c", "index", "eni", "phi", "x", "mu", "uri", "ip", "di", "e", "I", "ie", "ai", "q", "o", "gi", "mi", "inner", "ii", "b", "zi", "g", "li", "oi", "yi", "y", "en", "fi"], "j": ["dj", "api", "jj", "jc", "oj", "it", "u", "J", "qi", "next", "ji", "xi", "ch", "bj", "v", "jp", "si", "l", "a", "ij", "fr", "r", "z", "h", "aj", "length", "f", "ion", "er", "c", "ui", "x", "e", "di", "ja", "uj", "ie", "q", "o", "jit", "g", "ii", "b", "err", "li", "js", "je", "k", "obj", "y", "jl", "jo"], "count": ["counter", "total", "parent", "call", "age", "Count", "size", "more", "core", "id", "val", "num", "add", "data", "ct", "find", "diff", "part", "start", "comp", "info", "len", "length", "c", "check", "weight", "index", "depth", "list", "base", "process", "col", "code", "b", "err", "loop", "current", "found", "child", "type", "group", "mean", "number", "cache", "th", "match", "act", "array", "coll"], "p2": ["P8", "P2", "p1", "P1", "n2", " p1", "pb", " p0", " pb", " p8", "db", "Pb", "P0", "n1", "d2", "d1", "n8", "p0", "i2", "i0", "i1", "p8"], "sum": ["um", "total", "space", "val", "size", "cost", "u", "summary", "si", "ass", "average", "add", "sh", "loss", "vol", "cur", "sign", "fill", "diff", "use", "ame", "mass", "mask", "error", "spread", "sim", "cal", "au", "ay", "key", "match", "style", "weight", "sav", "cum", "ul", "max", "alpha", "miss", "plus", "Sum", "zero", "li", "fat", "su", "norm", "up", "scale", "mean", "av", "dev", "dot", "am", "out", "default"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main\\n{\\n\tpublic static void main(String[] args)\\n\t{\\n\t\tdouble[] d = new double[50];\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tString str = scan.nextLine();\\n\\n\t\tint n = str.length();\\n\\n\t\tString ans = \"\";\\n\t\tfor (int i=0; i<n; i++) {\\n\t\t\tans = ans + \"x\";\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "122", "substitutes": {"d": ["dm", "xd", "sd", "draw", "dn", "dict", "ad", "dp", "dir", "std", "pd", "df", "gd", "fd", "dc", "ds", "di", "dd", "dim", "dy", "dl", " dd", "dt", " df", "D", "cd", " da"], "scan": ["nn", "cat", "connect", "na", "ser", "server", "ln", "ss", "serv", "run", "search", "sign", "start", "io", "sin", "iter", "er", "feed", "chan", "check", "an", "system", "read", "skip", "sync", "ignore", "sys", "se", "ner", "pass", "reader", "in", "parse", "Scan", "san", "parser", "look", "sc", "out", "can", "ann", "query"], "str": ["cat", "tr", "pr", "arr", "strings", "line", "STR", "search", "data", "fr", "name", "r", "iter", "input", "char", "er", "br", "s", "sp", "st", "text", "string", "kr", "stri", "Str", "inner", "sr", "err", "ner", "ocr", "exec", "in", "parse", "txt", "doc", "read", "out", "strip"], "n": ["nn", "nc", "ni", "p", "dn", "u", "num", "N", "ln", "l", "sn", "z", "nl", "len", "f", "conn", "s", "c", "ne", "m", "x", "nin", "o", "ns", "b", "network", "nb", "ner", "j", "net", "k", "in", "mn", "number", "en", "t"], "ans": ["ana", "acts", "sk", "AN", "ars", "aned", "anned", "vers", "na", "ads", "ins", "ln", "ks", "ss", "aus", "lan", "aces", "asts", "vals", "atan", "inas", "ls", "eps", "cs", "lines", "s", "os", "rows", "cas", "ds", "ants", "an", "parts", "ANS", "anks", "arts", "except", "flags", "dd", "ents", "ns", "eds", "ends", "ras", "ats", "anc", "xs", "ids", "outs", "as", "anners", "ons", " scans", "amps", "ays", "can", "ann"], "i": ["bi", "hi", "pi", "ni", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "a", "ri", "uli", "z", "h", "info", "abi", "f", "ci", "ui", "ini", "m", "x", "mu", "uri", "ip", "e", "di", "I", "ai", "q", "o", "gi", "mi", "ii", "li", "j", "oi", "chi", "ti", "fi"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main{\\n\tpublic static void main(String args[]){\\n        int key = 1;\\n        Scanner sc = new Scanner(System.in);\\n        String str = sc.nextLine();\\n        String[] array = new String[str.length()];\\n        for(int i = 0; i < str.length(); i++){\\n            String str2 = String.valueOf(str.charAt(i));\\n            array[i] = str2;\\n        }\\n        if( (str.length() % 2) == 0){\\n            for(int j = 0; j < str.length() / 2; j++){\\n                if(array[2*j].equals(\"L\")){\\n                    key = 0;\\n                }\\n                if(array[2*j+1].equals(\"R\")){\\n                    key = 0;\\n                }\\n            }\\n        }else{\\n            for(int j = 0; j < (str.length() / 2) + 1; j++){\\n                if(array[2*j].equals(\"L\")){\\n                    key = 0;\\n                }\\n            }\\n            for(int j = 0; j < str.length() / 2; j++){\\n                if(array[2*j+1].equals(\"R\")){\\n                    key = 0;\\n                }\\n            }\\n        }\\n        if(key == 1){\\n            System.out.println(\"Yes\");\\n        }else{\\n            System.out.println(\"No\");\\n        }\\n    }\\n}", "target": "205", "substitutes": {"key": ["ace", "parent", "count", "change", "size", "bug", "id", "num", "keep", "keys", "name", "right", "value", "info", "link", "row", "char", "length", "ok", "role", "where", "order", "sum", "match", "index", "check", "x", "Key", "base", "any", "col", "code", "KEY", "skip", "pick", "nice", "rule", "result", "ignore", "loop", "field", "k", "seed", "step", "no", "type", "quick", "number", "y", "box", "lock", "play", "close", "fix", "error", "my", "default"], "sc": ["cl", "sche", "mc", "sci", "nc", "pc", "ch", "sec", "ss", " SC", "si", "cur", "asc", "sh", "Sc", "SC", "screen", "r", "iss", "bc", "cs", "sw", "c", " scr", "sp", "st", "system", "uc", "se", "ner", " Sc", "ocr", "anc", "scan", "osc", "rc", "cr", "sch", "out", "esc"], "str": ["div", "enc", "module", "arc", "p", "wr", "hr", "server", "sec", "tr", "pr", "arr", "strings", "url", "line", "STR", "cur", "data", "path", "fr", "name", "part", "r", "iter", "input", "hex", "char", "f", "br", "dr", "sl", "s", "c", "last", "style", "list", "sp", "st", "text", "string", "stri", "code", "Str", "inner", "sr", "b", "err", "result", "pass", "ner", "form", "parse", "in", "txt", "file", "word", "war", "strip", "coll"], "array": ["api", "function", "p", "database", "one", "archive", "project", "hash", "table", "map", "allow", "view", "arr", "ar", "a", "Array", "r", "value", "audio", "row", "book", "collection", "app", "arrow", "air", "instance", "image", "pair", "order", "index", "var", "list", "base", "sa", "ack", "system", "string", "ram", "complex", "result", "object", "ray", "pass", "obj", "form", "parse", "analysis", "group", "number", "as", "address", "area", "bar", "shared", "range", "section", "cache", "error", "coll"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "l", "is", "ri", "start", "io", "h", "z", "f", "ci", "vi", "ui", "ini", "c", "eni", "x", "uri", "ip", "di", "e", "I", "ie", "ai", "o", "gi", "mi", "ii", "zi", "b", "li", "oi", "yi", "in", "ti"], "str2": ["str02", "br0", " str0", "str1", "Str2", "br1", "Str3", "Str0", "st2", "br3", "Str1", "st1", "br2", "Str02", "st02", "st3", " str3", "str3", "str0", " str1", " str02"], "j": ["dj", "py", "jj", "jc", "p", "oj", "adj", "u", "it", "J", "bj", "ji", "tr", "json", "v", "jp", "pr", "ix", "l", "el", "ij", "fr", "ik", "jon", "z", "h", "f", "br", "ax", "x", "jo", "jet", "ja", "e", "uj", "ie", "left", "jing", "o", "jit", "d", "n", "g", "b", "ii", "dy", "li", "em", "js", "k", "je", "obj", "jam", "kj", "rel", "job", "y", "off", "jl", "jen", "ind", "out", "aj"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  \\n  public static void main(String args[]){\\n    \\n    Scanner sc = new Scanner(System.in);\\n    \\n    long x = sc.nextLong();\\n    long year = 0;\\n    \\n    double kingaku = 100;\\n    \\n    do{\\n      \\n      kingaku = kingaku * 1.01;\\n      kingaku = Math.floor(kingaku);\\n      year++;\\n    }while(kingaku < x);\\n    \\n    System.out.println(year);\\n    \\n  }\\n  \\n}", "target": "107", "substitutes": {"sc": ["enc", "sci", "nc", "scope", "pc", "com", "ch", "sec", "ss", " SC", "cur", "sub", "asc", "Sc", "SC", "exp", "bc", "desc", "sw", "src", "lc", "ci", "c", "cer", "sp", "acc", "system", "uc", "soc", "ca", "se", "ner", " Sc", "ocr", "anc", "scan", "osc", "rc", "cc", "cr", "ec", "esc"], "x": ["dx", "p", "test", "val", "xp", "na", "xi", "ex", "i", "ix", "l", "cross", "z", "win", "event", "week", "f", "c", " xx", "ax", "wx", "index", "m", "w", "xx", "xxx", "d", "n", "b", "night", "tx", "day", "time", "xs", "step", "number", "y", "rx", "tick", "t", "X"], "year": ["ana", "season", "yo", "yard", "EAR", "age", "val", "Year", "size", "bug", "id", "minute", "ko", "ad", "sy", "oy", "ya", "Y", "name", "course", "color", "yr", "win", "row", "week", "ear", "length", "years", "c", "hour", "month", "ry", " years", "ver", "dy", "cycle", "ner", "day", "time", "k", "ye", "angle", "yes", "no", "number", "y", "word", "tick", "range", "my", "quarter"], "kingaku": ["akingaka", "kuaki", "kedaku", "keoku", "keduku", "pingaku", "kenau", "kingaroo", "kenaka", "Kingaku", "keroku", "pinguku", "kedku", "kinguru", "kingoku", "kenaku", "kuuru", "akingaku", "ukaru", "kinguku", "kedappa", "pingaroo", "Kingappa", "ukuku", "kingaki", "kiaka", "kerau", "kenuru", "akinguru", "ningaku", "kedaki", "kiku", "keraka", "keuku", "kerku", "kuappa", "kingaru", "kingau", " askingaki", "kuuku", "kiaku", "keaku", "kuaru", "keruku", "ukaku", "Kinguku", " askinguru", "ningaru", "ukaki", "keraku", "kuaka", "kearoo", "kedaka", "kingappa", "kiaki", "kuaku", "kingaka", " askingaku", "akingaki", "kuau", "Kingaka", "kingku", "keraki", "keraroo", "pingoku", "ninguku", " askingaka", "ningaki", "keruru"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tScanner sc = new Scanner(System.in);\\n\tfinal int MOD = 998244353;\\n\tfinal int MAX = Integer.MAX_VALUE;\\n\tfinal long LMAX = Long.MAX_VALUE;\\n\tint len = 200001;\\n\\n\\n\tvoid doIt() {\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint C = sc.nextInt();\\n\t\tint D = sc.nextInt();\\n\t\twhile(true) {\\n\t\t\tC -= B;\\n\t\t\tif(C <= 0) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t\tA -= D;\\n\t\t\tif(A <= 0) {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().doIt();\\n\t}\\n}\\n", "target": "186", "substitutes": {"sc": ["sche", "sci", "nc", "sf", "scope", "pc", "slice", "ser", "sec", "ss", " SC", "cur", "sub", "asc", "search", "sh", "Sc", "SC", "screen", "r", "bc", "cs", "sw", "src", "cor", "cv", "row", "lc", "desc", "s", "c", " scr", "sp", "sq", "uc", "soc", "cli", "cle", "se", "ner", " Sc", "reader", "anc", "sb", "scan", "parse", "Scan", "osc", "rc", "cr", "cont", "sch", "parser", "coll", "esc", "ctx", "cus", "sync"], "MOD": ["AD", " MEM", " mod", " J", "ID", " IS", "ORT", "CC", "VERSION", "ARM", "ALL", " CL", "CL", " NUM", " MIN", " LOC", "MODE", " Mod", "Mod", "MIN", "UID", "SPEC", "LIB", "mod", "MAG", "PORT", "NUM", " MODULE"], "MAX": ["maximum", "TYPE", "VALUE", "AR", "AM", "DEC", "AW", " max", "FAULT", "CR", "ALL", "MA", "CL", "AP", "EST", "SIZE", "RA", "GEN", "MIN", "max", "Max", "AX", "DC", "AC", "VAL", "NUM", "AGE", "X"], "LMAX": ["LMax", "lMax", "Nmax", "lMAX", "NMax", " Lmax", " LMax", "lmax", "NMAX", "Lmax"], "len": ["all", "seq", "Len", "offset", " length", "val", "EL", "EN", "ln", "line", "l", "el", "ALL", "CL", "lim", "length", " Len", "lib", "delay", "base", "limit", "Length", "VAL", "en", "ll", "LI", "mem"], "A": ["AD", "S", "AN", "AR", "NA", "Ca", "AW", "AY", "N", "AA", "M", "CC", "LA", "As", "U", "Y", "FA", "MA", "F", "BA", "Q", "AP", "P", "SA", "PA", "API", "AU", "And", "T", "I", "L", "R", "HA", "V", "AF", "AB", "AC", "DC", "H", "O", "CA", "G", "W", "E"], "B": ["Bs", "BF", "N", "M", "BI", "U", "Y", "F", "BA", "Q", "P", "BB", "BC", "CB", "T", "I", "L", "R", "b", "LB", "Ub", "BE", "V", "BD", "OB", "GB", "O", "CA", "G", "W", "E", "BBC", "DB"], "C": ["Cu", "CU", "S", "EC", "CI", "Ca", "N", "M", "CC", "CN", "CF", "U", "Y", "SC", "CR", "F", "Q", "CL", "P", "BC", "c", "CD", "CB", "T", "I", "NC", "CM", "L", "R", "Cs", "V", "DC", "K", "AC", "H", "O", "CA", "G", "Cl", "W", "E", "X"], "D": ["AD", "DH", "S", "DM", "N", "DE", "M", "DA", "Def", "U", "Y", "F", "Q", "P", "MD", "CD", "DI", "T", "I", "DF", "JD", "DL", "L", "d", "R", "Ds", "V", "DD", "DB", "BD", "K", "DC", "H", "O", "Z", "DS", "FD", "G", "DP", "W", "E", "X"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tvoid insertionSort(int[] A) {\\n\t\tfor (int i = 1; i < A.length; i++) {\\n\t\t\tint v = A[i];\\n\t\t\tint j = i - 1;\\n\t\t\twhile (j >= 0 && A[j] > v) {\\n\t\t\t\tA[j+1] = A[j];\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\tA[j+1] = v;\\n\t\t\tprintArray(A);\\n\t\t}\\n\t}\\n\\n\tvoid printArray(int[] A) {\\n\t\tSystem.out.print(A[0]);\\n\t\tfor (int i = 1; i < A.length; i++) {\\n\t\t\tSystem.out.print(\" \" + A[i]);\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n\\n\tvoid run() {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint[] A = new int[n];\\n\t\tfor (int i = 0; i < A.length; i++) {\\n\t\t\tA[i] = scan.nextInt();\\n\t\t}\\n\t\tprintArray(A);\\n\t\tinsertionSort(A);\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tnew Main().run();\\n\t}\\n\\n}\\n\\n", "target": "69", "substitutes": {"A": ["Order", "Info", "If", "C", "Points", "M", "Average", "a", "None", "Australia", "Parts", "AST", "Area", "Total", "API", "Input", "Alpha", "Bar", "Args", "K", "True", "CA", "W", "E", "Part", "An", "Java", "U", "Address", "MA", "mA", "Code", "This", "P", "Ma", "In", "You", "At", "H", "O", "G", "Adam", "Any", "General", "array", "S", "New", "There", "Something", "F", "SA", "Answer", "File", "First", "Entry", "Each", "AU", "T", "I", "II", "L", "B", "V", "All", "Action", "X", "Ha", "AM", "NA", "N", "AA", "LA", "As", "Path", "Y", "Array", "AP", "au", "App", "Files", "Ar", "Access", "D", "The"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "si", "ix", "a", "l", "mini", "is", "ri", "start", "io", "init", "z", "info", "h", "f", "ci", "vi", "ui", "ini", "key", "index", "m", "phi", "x", "base", "uri", "mu", "ip", "e", "di", "I", "ie", "ai", "q", "o", "gi", "d", "mi", "ii", "b", "li", "oi", "yi", "in", "y", "t"], "v": ["p", "val", "u", "si", "l", "a", "sv", "r", "value", "h", "z", "f", "vi", "s", "c", "uv", "t", "vv", "m", "x", "w", "ev", "ve", "e", "q", "o", "lv", "d", "ii", "b", "iv", "li", "V", "k", "y", "va"], "j": ["jj", "jc", "p", "adj", "u", "J", "qi", "ji", "jp", "si", "ix", "l", "a", "ij", "h", "z", "aj", "f", "br", "vi", "c", "ui", "key", "m", "x", "e", "ja", "uj", "rev", "ie", "q", "o", "d", "ii", "b", "dy", "li", "je", "k", "obj", "js", "y", "ind", "jo"], "scan": ["nn", "cat", "sci", "watch", "slice", "na", "ser", "span", "run", "search", "l", "con", "sign", "r", "sin", "er", "gen", "query", "vis", "conn", "feed", "chan", "an", "or", "plan", " scanner", "read", "skip", "err", "sr", "stat", "se", "ner", "kin", "reader", "pass", "in", "parse", "Scan", "log", "clean", "san", "ans", "sc", "out", "can", "ann", "sync"], "n": ["nn", "all", "nc", "ni", "p", "u", "nor", "na", "num", "N", "l", "r", "init", "z", "len", "f", "conn", "s", "c", "ne", "m", "x", "e", "o", "d", "ns", "b", "nb", "net", "k", "pos", "no", "in", "y", "en", "t"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String S = sc.next();\\n    System.out.println((S.charAt(0) != S.charAt(1) && S.charAt(1) != S.charAt(2) && S.charAt(2) != S.charAt(3)) ? \"Good\" : \"Bad\");\\n  }\\n}", "target": "73", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "scope", "pc", "sec", "ss", " SC", "sub", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "desc", "cor", "s", "c", "cer", " scr", "sp", "acc", "ec", "text", "uc", "soc", "g", "se", "ner", " Sc", "ocr", "anc", "scan", "osc", "rc", "cc", "cr", "Desc", "out", "esc", "sync"], "S": ["SI", "AS", "SS", "VS", "SN", "IS", "TS", "Standard", "SB", "US", "Socket", "N", "OS", "RS", "SE", "STR", "SU", "SH", "GS", "Si", "SC", "U", "F", "None", "Y", "WS", "SA", "P", "Single", "OSS", "Su", "FS", "BS", "Sign", "s", "SM", "SO", "T", "Sing", "L", "CSS", "St", "Sl", "K", "ES", "D", "H", "O", "NS", "DS", "JS", "G", "HS", "SR", "CS", "E", "SER", "PS"]}}
{"code": "import java.util.*;\\npublic class Main { \\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        String str = sc.next();\\n        if(str.charAt(a) != '-') {\\n          System.out.println(\"No\");\\n          return;\\n        }\\n        if(!isValid(str.substring(0, a), a) || !isValid(str.substring(a+1), b)) {\\n          System.out.println(\"No\");\\n          return;\\n        }\\n        System.out.println(\"Yes\");\\n    }\\n\\n    private static boolean isValid(String str, int len) {\\n      if(str.length() != len) return false;\\n      for(char c : str.toCharArray()) {\\n        if(!Character.isDigit(c)) return false;\\n      }\\n      return true;\\n    }\\n}", "target": "78", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "ser", "ch", "tc", "ss", " SC", "cur", "sub", "asc", "sh", "search", "Sc", "SC", "ct", "screen", "bc", "cs", "sw", "cv", "cor", "lc", "ci", "cer", "sp", "sq", "uc", "sr", "ca", "sem", "se", "ner", " Sc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "esc", "cus", "sync"], "a": ["all", "aw", "p", "na", "ad", "aaaa", "ba", "i", "ar", "l", "part", "aa", "A", "aux", "oa", "pa", "f", "au", "ga", "ak", "isa", "an", "x", "sa", "ae", "e", "ea", "ada", "active", "aka", "ai", "alpha", "d", "af", "n", "ca", "ac", "qa", "aaa", "sta", "ama", "fa", "art", "as", "y", "la", "area", "asa", "da", "ab", "am", "va", "aj"], "b": ["bi", "p", "mb", "abb", "ad", "v", "i", "ba", "l", "ib", "cb", "r", "be", "z", "h", "lb", "bc", "bs", "f", "eb", "m", "w", "x", "base", "e", "o", "d", "n", "B", "body", "j", "k", "bb", "beta", "bd", "y", "wb", "ab", "ob", "bp"], "str": ["this", "div", "enc", "cl", "inst", "wr", "val", "id", "hr", "tr", "ss", "pr", "arr", "cur", "strings", "url", "l", "STR", "data", "fr", "name", "ctr", "r", "iter", "input", "char", "f", "dr", "lc", "sl", "s", "br", "er", "list", "sp", "st", "text", "string", "stri", "oct", "code", "Str", "g", "result", "sr", "err", "gr", "pass", "obj", "form", "in", "txt", "cr", "dec", "spec", "out", "strip", "coll"], "len": ["seq", "Len", "elt", "nt", "fl", "count", "val", "id", "ln", "span", "split", "line", "l", "el", "part", "ls", "lin", "iter", "lp", "length", "lim", "loc", "lc", "list", "sp", "base", "string", "ind", "min", "code", "limit", "body", "li", "pos", "lt", "ol", "lang", "lf", "en", "ll"], "c": ["enc", "ic", "arc", "p", "C", "u", "ch", "character", "v", "i", "l", "cu", "ct", "r", "char", "f", "ci", "s", "dc", "m", "x", "e", "col", "string", "ce", "code", "d", "n", "ac", "k", "cc", "cr", "ec", "esc", "coll"]}}
{"code": "import java.io.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]){\\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint num[] = new int[10];\\n\t\tfor(int i=0;i<10;i++){\\n\t\t\ttry{\\n\t\t\t\tnum[i] = Integer.parseInt(reader.readLine());\\n\t\t\t}\\n\t\t\tcatch(IOException e){\\n\t\t\t\t\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0;i<10;i++){\\n\t\t\tfor(int k=0;k<10-1;k++){\\n\t\t\t\tif(num[k]<num[k+1]){\\n\t\t\t\t\tint tmp = num[k];\\n\t\t\t\t\tnum[k] = num[k+1];\\n\t\t\t\t\tnum[k+1] = tmp;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor(int i=0;i<3;i++){\\n\t\t\tSystem.out.println(num[i]);\\n\t\t}\\n\t}\\n}", "target": "164", "substitutes": {"reader": ["rar", "this", "buffer", "loader", "rb", "l", "ri", "r", "oder", "io", "iter", "stream", "actor", "input", "temp", "ler", "resource", "f", "er", "upper", "director", "filter", "feed", "bird", "e", "writer", "per", " Reader", "b", "result", "rer", "handler", "ner", "editor", "in", "iterator", "worker", "keeper", "parser", "former", "driver", "read", "out", "Reader"], "num": ["comb", "initial", "umber", "mon", "multi", "con", "valid", "init", "info", "param", "max", "result", "update", "mod", "bin", "digit", "inc", "mult", "nn", "um", "test", "nu", "data", "name", "value", "block", "temp", "f", "sum", "index", "np", "note", "node", "grade", "code", "n", "dom", "dim", "pos", "norm", "no", "file", "number", "NUM", "array", "mom", "unit", "count", "prefix", "na", "span", "umi", "mu", "done", "comment", "rank", "form", "dec", "en", "out", "parent", "Num", "u", "one", "nam", "sort", "mm", "home", "m", "config", "text", "begin", "ul", "nom"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "mini", "is", "ik", "start", "init", "io", "info", "z", "temp", "end", "f", "ci", "ui", "ini", "key", "c", "index", "eni", "phi", "x", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "n", "cli", "ii", "b", "li", "j", "oi", "in", "chi", "y", "ki", "my", "ti", "fi"], "k": ["ky", "kt", "sk", "mk", "p", "kg", "ka", "u", "id", "ko", "ck", "ke", "ks", "v", "kh", "kick", "kk", "ik", "ask", "z", "h", "dk", "ok", "f", "ek", "c", "key", "ak", "x", "ku", "kw", "acc", "ack", "ijk", "kr", "aka", "q", "unk", "kn", "g", "b", "kin", "kid", "j", "tk", "K", "work", "uk", "y", "ki"], "tmp": ["fb", "py", "jj", "now", "abb", "rb", "tc", "next", "ff", "stuff", "tv", "db", "pre", "kk", "vt", "temp", "cp", "np", "acc", "mp", "vm", "opp", "alpha", " ff", "nb", "yy", "obj", "su", "sup", "bb", "amp", "txt", "pp", "area", "tt", "pad", "ppo", "mmm"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u5165\u529b\\n            int c[] = new int[5];\\n            int sum[] = new int[5];\\n            for (int i = 0; i < 5; i++) {\\n                c[i] = Integer.parseInt(in.next());\\n            }\\n\\n\\n            for (int i = 0; i < 5; i++) {\\n                sum[i] = c[i];\\n                for (int j = 0; j < 5; j++) {\\n                    if (j != i) {\\n                        if (c[j] % 10 == 0) {\\n                            sum[i] += c[j];\\n                        } else {\\n                            sum[i] += c[j] + 10 - c[j] % 10;\\n                        }\\n                    }\\n                }\\n            }\\n            // \u51fa\u529b\\n            Arrays.sort(sum);\\n            out.println(sum[0]);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "63", "substitutes": {"inputStream": ["outputWriter", "inputSteam", "outputSteam", " inputstream", " inputSteam", "InputSteam", "singlestream", "Inputstream", "inputWriter", "singleStream", "InputWriter", "InputStream", "outputstream", "singleSteam", "inputstream", "singleWriter"], "outputStream": ["outputWriter", "inputSteam", "outputSteam", "OutputStreamer", "Outputstream", "inputStreamer", "OutputStream", "OutputString", "OutputWriter", "inputString", " outputSteam", "applicationWriter", "applicationStream", "applicationSteam", "inputWriter", "outputStreamer", " outputString", "applicationStreamer", "OutputSteam", "outputstream", " outputstream", "inputstream", "outputString"], "in": ["this", "conf", "isin", "on", "id", "login", "ins", "din", "ln", "run", "i", "inside", "path", "data", "name", "request", "con", "r", "diff", "io", "init", "win", "source", "input", "sin", "info", "In", "conn", "s", "image", "inn", "ini", "index", "nin", "config", "cin", "en", "min", "gin", "inf", "inner", "rin", "n", "kin", "err", "reader", "work", "pin", "connection", "vin", "bin", "file", "inc", "IN"], "out": ["parent", "call", "client", "p", "loader", "null", "one", "to", "server", "ex", "v", "version", "line", "page", "data", "ou", "name", "kernel", "io", "init", "In", "outside", "conn", "external", "outer", "down", "user", "password", "destroy", "at", "output", "OUT", "w", "x", "nin", "writer", "string", "problem", "Out", "o", "inner", "plus", "n", "b", "err", "again", "write", "net", "exec", "up", "connection", "no", "analysis", "log", "bin", "file", "outs", "inc", "off", "cache", "error", "IN", "engine", "window", "sync"], "solver": ["sesolve", "solving", "sesolver", "ssolving", "ssolve", "Solver", "ssolver", "sector", "ansolver", "Sector", "ssolution", "solve", "solution", "Solution", "ansolution", "Solving", "sesolution", "Solve", "ssector", "sesector", "ansolve", "ansolving"], "testNumber": ["trialNumber", "TestNumber", "testNumbers", "testnumber", "TestNum", " testnumber", "Testnumber", "trialNumbers", "trialnumber", " testNum", " testNumbers", "testNum", "trialNum", "TestNumbers"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc=new Scanner(System.in);\\n\t\t\\n\t\tint n=sc.nextInt();\t\t//ID\u30ab\u30fc\u30c9\\n\t\tint m=sc.nextInt();\t\t//\u30b2\u30fc\u30c8\\n\t\t\\n\t\tint l=0;\\n\t\tint r=n;\\n\t\t\\n\t\tfor(int i=0;i<m;i++) {\\n\t\t\tint l2=sc.nextInt();\\n\t\t\tint r2=sc.nextInt();\\n\t\t\t\\n\t\t\tl=Math.max(l,l2);\\n\t\t\tr=Math.min(r,r2);\\n\t\t}\\n\t\tint ans=r-l+1;\\n\t\tif(ans>0) System.out.println(ans);\\n\t\telse System.out.println(0);\\n\t}\\n}", "target": "124", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\tScanner sca = new Scanner(System.in);\\n\tint a = sca.nextInt();\\n\tint b = sca.nextInt();\\n\tint answer;\\n\tif(a > b) {\\n\t\tif(a == 3 && b == 2) {\\n\t\t\tanswer = 1;\\n\t\t}\\n\t\telse if(a == 3 && b == 1) {\\n\t\t\tanswer = 2;\\n\t\t}\\n\t\telse {\\n\t\t\tanswer = 3;\\n\t\t}\\n\t}\\n\telse {\\n\t\tif(b == 3 && a == 2) {\\n\t\t\tanswer = 1;\\n\t\t}\\n\t\telse if(b == 3 && a == 1) {\\n\t\t\tanswer = 2;\\n\t\t}\\n\t\telse {\\n\t\t\tanswer = 3;\\n\t\t}\\n\t}\\n\\n\tSystem.out.println(answer);\\n\\n\tsca.close();\\n\t}\\n}", "target": "236", "substitutes": {"sca": ["ucar", "sci", " sci", "bcb", " scaa", "SCa", " scas", "bcan", "scaa", "bca", "scb", " scai", "SCaa", "SCas", "SCan", "ucas", "Sci", " scar", " scb", "scas", "Scai", "ucb", " scan", "Scas", "Scar", "scai", "SCb", "scan", "Scb", "Scaa", "Scan", "Sca", "bcai", "scar", "SCi", "uca"], "a": ["aw", "p", "u", "ad", "ba", "i", "l", "name", "r", "aa", "A", "pa", "f", "au", "s", "c", "m", "an", "x", "w", "sa", "ae", "e", "ea", "ai", "alpha", "o", "d", "n", "ca", "ac", "aaa", "ama", "fa", "art", "as", "y", "area", "ab", "am", "aj"], "b": ["fb", "p", "mb", "u", "abb", "rb", "ad", "v", "i", "ba", "ib", "db", "cb", "l", "bf", "aa", "be", "z", "bc", "bs", "eb", "f", "s", "pa", "c", "ga", "t", "m", "w", "x", "base", "e", "o", "d", "n", "B", "body", "nb", "j", "k", "sb", "bb", "beta", "bd", "y", "as", "wb", "ab", "emb", "ob", "out"], "answer": ["complete", "ace", "over", "empty", "option", "now", "message", "val", "size", "offer", "archive", "next", "answered", "average", "search", "stuff", "question", "duration", "asm", "video", "blank", "about", "consider", "value", "aa", "Answer", " answers", "oa", "length", "query", "maybe", "after", "order", "activity", "reply", "eni", "an", "ae", "done", "string", "knowledge", "grade", "comment", "adder", "result", "err", "username", "open", "current", "cover", "update", "response", "ee", "practice", "number", "issue", "address", "word", "area", "evidence", "ell", "close", "fix", "error", "array", "audio"]}}
{"code": "import java.io.*;\\n\\nclass Main\\n{\\n    public static void main (String[ ] args) throws Exception\\n    {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String str[] = br.readLine().split(\" \");\\n        \\n        int n = Integer.parseInt(str[0]);\\n        int m = Integer.parseInt(str[1]);\\n\\n        int[][] a = new int[n][m];\\n        int[] b = new int[m];\\n\\n        for(int i = 0; i < n; i++)\\n        {\\n            String str2[] = br.readLine().split(\" \");\\n            for(int j = 0; j < m; j++)\\n            {\\n                a[i][j] = Integer.parseInt(str2[j]);\\n            }\\n        }\\n        \\n        for(int k = 0; k < m; k++)\\n        {\\n            String str3 = br.readLine();\\n            b[k] = Integer.parseInt(str3);\\n        }\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            int ans = 0;\\n            for(int j = 0; j < m; j++)\\n            {\\n                ans += a[i][j] * b[j];\\n            }\\n            System.out.println(ans);\\n        }\\n    }\\n}", "target": "185", "substitutes": {"br": ["bl", "ber", "wr", "nor", "http", "hr", "rb", "browser", "tr", "arr", "res", "jar", "mer", "lr", "cb", "fr", "ctr", "r", "bf", "yr", "bh", "io", "stream", "bridge", "ler", "bs", "er", "dr", "orb", "mr", "BR", "sp", "bro", "HR", "img", "per", "Br", "sr", "err", "gr", "ner", "ger", "reader", "buf", "sb", "bb", "file", "cr", "bar", "later", "out"], "str": ["enc", "wr", "id", "sec", "tr", "v", "arr", "pr", "strings", "line", "STR", "data", "l", "fr", "part", "r", "iter", "input", "char", "f", "dr", "s", "sl", "c", "list", "sp", "st", "text", "string", "stri", "oct", "Str", "sr", "err", "pass", "ner", "gr", "obj", "parse", "in", "txt", "spec", "strip"], "n": ["nn", "nc", "nt", "ni", "p", "u", "num", "N", "ln", "M", "v", "cn", "l", "sn", "z", "h", "un", "f", "s", "c", "ne", "an", "x", "w", "e", "o", "d", "kn", "ns", "network", "nb", "ner", "net", "no", "in", "mn", "y", "en", "t"], "m": ["mc", "im", "p", "mon", "u", "num", "M", "v", "l", "mm", "r", "z", "h", "f", "cm", "s", "c", "fm", "w", "x", "an", "ym", "mu", "e", "o", "md", "d", "mi", "g", "am", "hm", "sm", "in", "mn", "y", "en", "t"], "a": ["ana", "p", "ia", "u", "ad", "ba", "ar", "l", "aa", "A", "aj", "f", "au", "s", "c", "ga", "an", "x", "at", "sa", "ae", "ai", "alpha", "d", "af", "ca", "ac", "aaa", "ama", "la", "as", "area", "y", "am", "va", "array"], "b": ["fb", "bm", "p", "mb", "u", "abb", "rb", "ad", "binary", "v", "zb", "ba", "l", "ib", "db", "bis", "r", "z", "h", "lb", "bs", "eb", "f", "s", "c", "x", "e", "bur", "o", "d", "g", "B", "sb", "bb", "beta", "bd", "y", "ab", "ob"], "i": ["bi", "pi", "ori", "ni", "iu", "p", "ami", "it", "u", "id", "ani", "multi", "qi", "xi", "ji", "v", "si", "ix", "mini", "is", "ik", "ri", "io", "init", "info", "z", "f", "ci", "c", "ui", "ini", "key", "eni", "x", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "li", "oi", "yi", "in", "y", "ki", "my", "fi"], "str2": ["str02", "charTwo", "strTwo", "str1", "StrTwo", "name62", "str62", "Str2", "name2", "Str1", " strTwo", "char1", "name1", "Str62", "name4", " str62", "str4", "Str02", " str4", "char02", "char2", "Str4", " str1", " str02"], "j": ["jj", "jc", "p", "oj", "it", "u", "id", "J", "bj", "ji", "ch", "v", "jp", "pr", "l", "el", "ij", "z", "h", "aj", "f", "c", "key", "w", "x", "e", "jet", "ja", "pt", "uj", "ie", "q", "o", "d", "ii", "li", "js", "je", "obj", "y", "jl", "jen", "out", "jo"], "k": ["ky", "sk", "mk", "p", "ka", "u", "id", "ck", "ch", "ke", "ks", "km", "v", "l", "ik", "z", "h", "ok", "f", "ek", "c", "key", "ak", "w", "x", "an", "e", "kw", "kr", "q", "o", "kn", "d", "g", "kin", "kid", "K", "in", "y", "ki"], "str3": ["Str5", "str5", "int5", "str1", "fileThird", "dr3", "st5", "dr1", "Str2", " str53", "int53", "Str3", "st2", "Str1", "dr2", "st1", "str53", "intThird", " strThird", "int3", "strThird", "file3", "dr5", "file53", "st3", "file5", " str5"], "ans": ["ana", "ands", "AN", "ars", "aned", "anas", "na", "ani", "ins", "aus", "ks", "span", "anon", "lan", "anz", "aces", "acs", "atan", "ares", "es", "ions", "ls", "ians", "ps", "s", "os", "nas", "cas", "ds", "ants", "ano", "an", "cons", "ANS", "ran", "anes", "ents", "ns", "ca", "ras", "ats", "anus", "anc", "ids", "as", "ons", "amps", "ays", "can", "ann"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.List;\\n\\npublic class Main {\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\\n        String s = stdin.readLine();\\n        List<String> weathers = Arrays.asList(\"Sunny\", \"Cloudy\", \"Rainy\");\\n        int x = (weathers.indexOf(s) + 1) % 3;\\n        System.out.println(weathers.get(x));\\n    }\\n}\\n", "target": "60", "substitutes": {"stdin": ["STDins", " STDout", "stdout", "rhin", "stdinner", "stdins", "STDin", "rhIN", " stdout", " stdIN", " STDIN", "STDinner", " stdinner", "rhinner", " stdins", " STDins", " STDin", "rhout", "STDIN", "STDout", "stdIN"], "s": ["aws", "S", "sf", "p", "u", "less", "ln", "ss", "si", "i", "line", "l", "es", "sv", "ls", "ws", "r", "h", "input", "src", "f", "south", "sl", "c", "ings", "ds", "words", "m", "w", "sq", "string", "ses", "o", "d", "n", "ns", "gs", "sym", "js", "sb", "xs", "in", "sg", "t"], "weathers": ["countp", " weatherp", "windn", "countls", "Weathern", "Weatherings", "Weatheres", " weatherings", "wellless", "drawings", "counts", "weathern", "windes", "weatherls", " weatherls", "weatherings", " weatherless", "Weathers", "winds", "countes", "countings", "welln", " weatheres", "welles", "countless", "weatheres", "weatherless", "draws", "windings", "drawes", "wells", "wellls", "wellings", "weatherp", "drawp"], "x": ["dx", "change", "p", "xp", "xi", "ex", "v", "i", "ix", "ct", "name", "X", "point", "my", "exp", " index", "z", "h", "fe", "f", "lex", "c", "index", "e", "xxx", "max", "b", "tx", "pos", "k", "j", "xs", "y", "rx", "ux", "fix", "px", "fx", "t", "ctx", "xc", "xx"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint D = sc.nextInt();\\n\t\tint N = sc.nextInt();\\n\t\tsc.close();\\n\t\t\\n\t\tint ans = 1;\\n\t\tif(D == 1)\\n\t\t\tans = 100;\\n\t\telse if(D == 2)\\n\t\t\tans = 10000;\\n\t\tans *= N + N/100;\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "245", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "pc", "ser", "com", "ch", "tc", "ss", " SC", "cur", "sub", "asc", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "cv", "lc", "ci", "cm", "c", "cer", "sp", "sq", "uc", "soc", "sr", "ca", "se", "ner", "reader", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "cus", "sync"], "D": ["S", "DM", "DT", "C", "Part", "DE", "Do", "M", "Di", "Y", "F", "STD", "MD", "ds", "CD", "DI", "DOS", "DIR", "T", "DF", "I", "JD", "DL", "L", "d", "Dir", "Dou", "Ds", "V", "DD", "DC", "DOM", "ND", "O", "DS", "Z", "DP", "DO", "FD", "DA", "E", "DES", "DR", "DB"], "N": ["S", "AN", "NL", "C", "J", "M", "CN", " n", "U", "Y", "F", "NN", "Q", "P", "A", "T", "I", "Ni", "L", "R", "n", "NM", "CNN", "V", "Ne", "K", "NT", "O", "Ns", "NS", "G", "W", "E", "X"], "ans": ["nn", "ana", "acts", "S", "sk", "AN", "ars", "aned", "vers", "na", "errors", "ins", "nan", "ks", "span", "ss", "lan", "aces", "actions", "ares", "reads", "ions", "ls", "eps", "anges", "cs", "ians", "man", "lines", "vs", "rows", "os", "nas", "cas", "ds", "plan", "ants", "an", "Na", "ops", "cons", "cus", "ANS", "arts", "anes", "ents", "ns", "cases", "ras", "ats", "anc", "scan", "ANN", "outs", "as", "runs", "ons", " scans", "aning", "ays", "can", "ann"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        solve(System.in, System.out);\\n    }\\n\\n    static void solve(InputStream is, PrintStream os) {\\n        // Your code here!\\n        Scanner scan = new Scanner(is);\\n        int A = scan.nextInt();\\n        int B = scan.nextInt();\\n\\n        long ans = lcm(A, B);\\n\\n        os.println(ans);\\n    }\\n\\n    static public long lcm(long a, long b) {\\n        if(a == b)\\n            return a;\\n\\n        if(a > b) {\\n            long tmp = a;\\n            a = b;\\n            b = tmp;\\n        }\\n\\n        long answer =  a*(b/(gcd(a, b)));\\n        return answer;\\n    }\\n\\n    static public long gcd(long a, long b) {\\n        while(a > 0) {\\n            long tmpa = a;\\n            a = b % a;\\n            b = tmpa;\\n        }\\n        return b;\\n    }\\n}", "target": "67", "substitutes": {"is": ["ir", "im", "ic", "Is", "IS", "it", "aris", "isl", "ar", "ib", "ou", "ri", "its", "iss", "irc", "us", "isa", "ip", "ist", "ai", "isi", "ii", "iv", "ais", "ris", "cms", "ics", "il"], "os": ["ot", "aos", "oss", "Os", "ro", "OS", "es", "oid", "ri", " o", "fs", "los", "bos", "ps", "us", "or", "iso", "ops", "ios", "o", "pro", "op", "ow", "obj", "pos", "ol", "ost", "proc"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main{\\n     static int dp[];\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        int N=sc.nextInt(),M=sc.nextInt();\\n        int arr[]=new int[N];\\n        for (int i=0;i<M;i++) arr[i]=sc.nextInt();\\n        int sum=0;\\n        for (int i=0;i<M;i++)\\n        {\\n            sum+=arr[i];\\n        }\\n        if ( sum<=N ) System.out.println(N-sum);\\n        else System.out.println(-1);\\n    }\\n}\\n/*\\n\\n */", "target": "108", "substitutes": {"dp": [" pairs", " arguments", " ar", " pos", "STR", "Array", " STR", " arg", " pair", " param", " stack", " len", " code", " data", " split", " tr", " p", " d", " obj", " buf", "Str", " dest", " Str", " par", " var", " number", " argument", " rest", " params"], "br": ["bl", "bel", "ber", "hr", "rb", "ch", "browser", "tr", "pr", "jp", "db", "lr", "fr", "ur", "r", "bh", "be", "bridge", "bc", "src", "bs", "dr", "orb", "BR", "sp", "bro", "img", "pl", "Br", "brush", "abs", "sr", "b", "err", "body", "gr", "obj", "cro", "buf", "sb", "bb", "ocr", "bd", "bt", "cr", "bar", "ab", "rt", "ob"], "st": ["ut", "bl", "cl", "ste", "inst", "ust", "nt", "sth", "ST", "p", "nd", "ss", "pr", "const", "l", "ct", "sn", "std", "part", "r", "sign", "store", "stage", "ft", "fe", "sw", "src", "dr", "sl", "style", "est", "pe", "sp", "sa", "e", "ist", "string", "pt", "stri", "Str", "rest", " est", "ld", "sr", "St", "se", "sb", "sta", "ast", "sts", "struct", "cr", "ost", "bt", "tt", "rt", "t"], "str": ["div", "enc", "bl", "inst", "p", "u", "id", "hr", "tr", "pr", "v", "strings", "url", "line", "STR", "data", "fr", "r", "exp", "z", "char", "f", "dr", "sl", "s", "style", "m", "sp", "e", "text", "string", "pt", "kr", "stri", "code", "Str", "inner", "n", "sr", "b", "err", "obj", "pos", "doc", "t"], "sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "com", "ch", "tc", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "RC", "bc", "cs", "sw", "src", "gb", "scl", "cv", "lc", "desc", "loc", "c", "cer", " scr", "sp", "acc", "sq", "NC", "uc", "sr", "ca", "cle", "se", "ocr", "osc", "rc", "cc", "cr", "cont", "ec", "esc", "ctx", "cus", "sync"], "N": ["MN", "Len", "S", "Num", "No", "NA", "NL", "C", "J", " n", "Size", "Y", "F", "NN", "Q", "P", "A", "Na", "NO", "T", "I", "Ni", "L", "R", "n", "Sum", "NM", "Ne", "V", "K", "NB", "ND", "D", "NT", "H", "Z", "O", "NS", "Ns", "G", "NE", "NUM", "NI", "E", "X"], "M": ["MN", "S", "MM", "DM", "JM", "C", "J", "MC", "U", "Y", "X", "F", "Q", "P", "MS", "MD", "m", "T", "I", "CM", "L", "R", "n", "B", "NM", "ME", "V", "Mo", "K", "D", "H", "O", "Z", "G", "LM", "W", "E"], "arr": ["div", "enc", "cat", "bl", "vec", "dict", "na", "num", "map", "stack", "v", "pr", "ar", "res", "data", "Array", "fr", "dat", "adr", "aa", "iter", "attr", "app", "dr", "index", "list", "img", "b", "err", "dim", "Ar", "gr", "ray", "obj", "frac", "att", "parse", "av", "inc", "array", "coll"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "si", "vol", "ix", "ri", "ik", "my", "init", "io", "info", "z", "f", "ci", "ui", "ini", "key", "index", "m", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "zi", "li", "j", "oi", "me", "in", "chi", "y", "ind", "ti", "fi"], "sum": ["um", "div", "total", "conf", "offset", "cat", "space", "count", "size", "cost", "hash", "num", "stack", "neg", "summary", "si", "average", "vol", "sh", "data", "use", "diff", "sign", "mask", "mass", "sim", "spread", "len", "cal", "style", "match", "weight", "us", "di", "cum", "alpha", "miss", "Sum", "n", "dim", "commit", "li", "se", "fat", "net", "norm", "sup", "parse", "seed", "scale", "beta", "mean", "av", "shape", "dev", "dot", "out", "coll"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6Scanner scan = new Scanner(System.in);\\n\\n        Scanner scan = new Scanner(System.in);\\n\\n        // \u5165\u529b\u5024\u306e\u500b\u6570\\n        int n = scan.nextInt();\\n\\n        // \u30ab\u30a6\u30f3\u30c8\\n        int count = 0;\\n\\n        boolean flag = true;\\n\\n        // \u5165\u529b\u5024\u306e\u30ea\u30b9\u30c8\\n        ArrayList<Integer> list = new ArrayList();\\n\\n        for(int i = 0; i < n; i++) {\\n        \tlist.add(scan.nextInt());\\n        }\\n\\n        // \u5165\u529b\u3055\u308c\u305f\u5024\u3092\u8868\u793a\\n        for(int i = 0; i < list.size(); i++) {\\n\\n        \t// \u5024\u304c\u5947\u6570\u306a\u3089\u30d5\u30e9\u30b0flase\\n        \tif((int)list.get(i)%2 != 0) {\\n        \t\tflag = false;\\n        \t}\\n\\n        \t//System.out.println(\"list\u306e\"+ i + \"\u756a\u76ee => \" + list.get(i));\\n        }\\n\\n\\n        while(flag) {\\n        \tfor(int i = 0; i < list.size(); i++) {\\n\\n\\n            \tlist.set(i, (int)list.get(i)/2);\\n            \t//System.out.println(\"list\u306e\"+ i + \"\u756a\u76ee => \" + list.get(i));\\n            \tif((int)list.get(i)%2 != 0) {\\n            \t\tflag = false;\\n            \t}\\n\\n\\n            }\\n        \tcount++;\\n        }\\n\\n        System.out.println(count);\\n\t}\\n\\n}\\n", "target": "196", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n \\npublic class Main {\\n \\n\tvoid submit() {\\n\t    \\n\t    double L = nextDouble();\\n\t    \\n\t    out.println((L/3)*(L/3)*(L/3));\\n\t    \\n\t}\\n \\n\tvoid preCalc() {\\n \\n\t}\\n \\n\tvoid stress() {\\n \\n\t}\\n \\n\tvoid test() {\\n \\n\t}\\n \\n\tMain() throws IOException {\\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\tout = new PrintWriter(System.out);\\n\t\tpreCalc();\\n\t\tsubmit();\\n\t\t//stress();\\n\t\t//test();\\n\t\tout.close();\\n\t}\\n \\n\tstatic final Random rng = new Random();\\n \\n\tstatic int rand(int l, int r) {\\n\t\treturn l + rng.nextInt(r - l + 1);\\n\t}\\n \\n\tpublic static void main(String[] args) throws IOException {\\n\t\tnew Main();\\n\t}\\n \\n\tBufferedReader br;\\n\tPrintWriter out;\\n\tStringTokenizer st;\\n \\n\tString nextToken() {\\n\t\twhile (st == null || !st.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn st.nextToken();\\n\t}\\n \\n\tString nextString() {\\n\t\ttry {\\n\t\t\treturn br.readLine();\\n\t\t} catch (IOException e) {\\n\t\t\tthrow new RuntimeException(e);\\n\t\t}\\n\t}\\n \\n\tint nextInt() {\\n\t\treturn Integer.parseInt(nextToken());\\n\t}\\n \\n\tlong nextLong() {\\n\t\treturn Long.parseLong(nextToken());\\n\t}\\n \\n\tdouble nextDouble() {\\n\t\treturn Double.parseDouble(nextToken());\\n\t}\\n}", "target": "53", "substitutes": {"L": ["BL", "Lu", "VL", "SL", "NL", "EL", "C", "LG", "dL", "Li", "N", "ln", " l", "M", "LA", "l", "U", "FL", "LR", "LV", "CL", "P", "RL", "LP", "ML", "T", "I", "DL", "UL", "LL", "R", "AL", "LC", "LO", "B", "V", "D", "IL", "O", "G", "LT", "LE", "Line", "LM", "LB", "E", "LI", "XL", "OL"], "br": ["bl", "hr", "ro", "ch", "din", "rb", "binary", "sam", "fr", "ri", "dr", "BR", "or", "by", "str", " Reader", "gin", "R", "gr", "rr", "bin", "cr", "rx", "bar", "ref", "rt", "IN", "Reader"], "out": ["parent", "print", "client", "p", "buffer", "prefix", "ex", "line", "pool", "page", "data", "name", "io", "temp", "input", "In", "user", "report", "ui", "style", "bit", "at", "w", "OUT", "list", "x", "output", "writer", "Out", "o", "comment", "err", "again", "obj", "write", "up", "no", "in", "log", "bin", "file", "outs", "inc", "doc", "copy", "cache", "error", "IN", "window"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tint N = 3;\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint[] As = new int[N];\\n\t\tAs[0] = sc.nextInt();\\n\t\tAs[1] = sc.nextInt();\\n\t\tAs[2] = sc.nextInt();\\n\\n\t\tint minCost = Integer.MAX_VALUE;\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tfor (int j = 0; j < N; j++) {\\n\t\t\t\tfor (int k = 0; k < N; k++) {\\n\t\t\t\t\tif ( i != j && j != k && k != i ) {\\n\t\t\t\t\t\tint cost = 0;\\n\t\t\t\t\t\tcost += 0;\\n\t\t\t\t\t\tcost += Math.abs(As[i] - As[j]);\\n\t\t\t\t\t\tcost += Math.abs(As[j] - As[k]);\\n\\n//\t\t\t\t\tSystem.out.println(i +\",\"+ j + \",\" + k + \",\" + cost);\\n//\\n\t\t\t\t\t\tif (cost < minCost) {\\n\t\t\t\t\t\t\tminCost = cost;\\n\t\t\t\t\t\t}\\n//\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(minCost);\\n\t}\\n}", "target": "247", "substitutes": {"N": ["Len", "S", "Num", "No", "NA", "C", "Part", "J", "M", " n", "Size", "Y", "X", "Node", "F", "Network", "Q", "A", "P", "Ni", "I", "T", "L", "R", "n", "network", "Ne", "V", "CNN", "K", "Index", "NT", "D", "O", "NS", "Ns", "Z", "H", "NI", "E"], "sc": ["cl", "sche", "mc", "nc", "sci", "enc", "nt", "scope", "na", "ch", "tc", "ss", "sec", " SC", "cur", "search", "Sc", "SC", "screen", "con", "cs", "bc", "sw", "src", "cv", "lc", "ci", "cer", "c", " scr", "sp", "system", "sq", "uc", "soc", "sr", "sem", "se", "ner", " Sc", "anc", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "esc", "ctx", "cus", "sync"], "As": ["ams", "Order", "Can", "S", "AS", "Es", "Like", "Is", "Las", "Ac", "If", "ases", "Adds", "Os", "An", "ss", "Points", "Average", "Power", "Ass", "rays", "Cas", "Use", "Address", "Array", "Ps", "A", "Parts", "For", "Settings", "Values", "Auth", "asi", "Rs", "Products", "Rules", "Am", "Shape", "Using", "Ws", "And", "Numbers", "Services", "Results", "App", "Names", "At", "Result", "Ash", " as", "Sum", "Information", "Ar", "ras", "Images", "All", "Which", "Sh", "as", "ans", "Has", "The", "Or", "Types", "Any", "Above", "Ms", "Are", "With", "Should"], "minCost": ["maxLength", "minimumLength", "minWeight", "MINLength", "maxWeight", "mincost", "maxcost", "MINcost", "minimumcost", "maxCost", "minimumWeight", "minLength", "MINWeight", "minimumCost", "MINCost"], "i": ["bi", "ori", "pi", "ni", "iu", "p", "ami", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "l", "is", "ij", "ik", "z", "f", "ci", "ui", "c", "ini", "m", "phi", "x", "ip", "di", "e", "I", "ie", "ai", "q", "o", "mi", "n", "ii", "b", "li", "oi", "in", "chi", "false", "y", "ki"], "j": ["jj", "ori", "jc", "p", "iu", "u", "J", "qi", "ji", "v", "jp", "l", "ij", "ik", "z", "h", "aj", "f", "ah", "c", "ui", "key", "jan", "ak", "m", "w", "x", "e", "ja", "ijk", "uj", "I", "ie", "q", "o", "d", "n", "g", "b", "ii", "li", "js", "je", "job", "y", "jl", "t", "jo"], "k": ["ky", "sk", "p", "isk", "ka", "u", "id", "ko", "ck", "ch", "ke", "ks", "km", "v", "kh", "kk", "ik", "ask", "z", "ok", "f", "ek", "c", "key", "ak", "w", "x", "ku", "kw", "ijk", "q", "kn", "n", "kin", "b", "kid", "kj", "K", "uk", "y", "ki"], "cost": ["ace", "score", "Cost", "price", "parent", "func", "draw", "CO", "function", "size", "risk", "add", "loss", "income", "use", "find", "right", "start", "charge", "co", "cal", "length", "resource", "care", "c", "sum", "style", "key", " Cost", "weight", " costs", "label", "ack", "left", "oe", "grade", "code", "eff", "rank", "work", "time", "step", "child", "scale", "position", "clean", "cc", "level", "address", "gross", "error", "fee", "coll"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.*;\\n\\npublic class Main\\n{\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt() % 10;\\n        if (n == 3) {\\n            System.out.println(\"bon\");\\n        }\\n        else if (n == 0 || n == 1 || n == 6 || n == 8) {\\n            System.out.println(\"pon\");\\n        }\\n        else {\\n            System.out.println(\"hon\");\\n        }\\n    }\\n}\\n", "target": "178", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", " SC", "sub", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "desc", "lc", "ci", "c", "cer", "sp", "uc", "soc", "ca", "se", "ner", " Sc", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "n": ["nn", "nc", "nt", "don", "p", "u", "na", "nor", "num", "nu", "nan", "N", "v", "cn", "i", "l", "sn", "z", "h", "nl", "len", "un", "f", "fn", "conn", "s", "nat", "c", "inn", "ne", "m", "an", "x", "nin", "byn", "o", "d", "ns", "kn", "b", "nw", "pn", "nb", "g", "j", "k", "not", "mn", "non", "number", "y", "coll", "en", "t", " N"]}}
{"code": "import java.util.*;\\n// cin=sc.nextInt();\\n// List<Integer> a = new ArrayList<Integer>(n);\\n \\npublic class Main {\\n    public static void main(String args[]){\\n\t\t    Scanner sc = new Scanner(System.in);\\n            String s = sc.next();\\n            if(s.charAt(1) == 'O'){\\n                System.out.println(6);\\n            }\\n            else if(s.charAt(1) == 'E'){\\n                System.out.println(4);\\n            }\\n            else if(s.charAt(1) == 'H'){\\n                System.out.println(3);\\n            }\\n            else if(s.charAt(1) == 'R'){\\n                System.out.println(2);\\n            }\\n            else if(s.charAt(1) == 'A'){\\n                System.out.println(1);\\n            }\\n            else if(s.charAt(0) == 'S'){\\n                System.out.println(7);\\n            }\\n            else if(s.charAt(0) == 'T'){\\n                System.out.println(5);\\n            }\\n\t}\\n}\\n", "target": "136", "substitutes": {}}
{"code": "// ITP1_4\\n\\nimport java.util.Scanner;\\nimport java.io.*;\\n\\nclass Main\\n{\\n\tpublic static void main ( String[] args ) {\\n\t\tScanner sc = new Scanner ( System.in );\\n\\n\t\tdouble a = 0.0;\\n\t\tdouble b = 0.0;\\n\t\tint d = 0;\\n\t\tint r = 0;\\n\t\tdouble f = 0.0;\\n\\n\t\ta = sc.nextInt ();\\n\t\tb = sc.nextInt ();\\n\t\t\\n\t\td = ( int )a / ( int )b;\\n\t\tr = ( int )a % ( int )b;\\n\t\tf = a / b;\\n\\n\t\tSystem.out.println ( d + \" \" + r + \" \" + String.format ( \"%7f\", f ) );\\n\t}\\n}", "target": "90", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\\n\t\tlong a = in.nextLong();\\n\t\tlong b = in.nextLong();\\n\t\tlong k = in.nextLong();\\n\\n\t\tif (a > k)\\n\t\t\tSystem.out.println((a-k) + \" \" + b);\\n\t\telse if (a <= k && k < (a+b))\\n\t\t\tSystem.out.println(0 + \" \" + (a + b - k));\\n\t\telse\\n\t\t\tSystem.out.println(\"0 0\");\\n\t}\\n}\\n\\n", "target": "128", "substitutes": {"in": ["isin", "login", "ins", "din", "ln", "arin", "ex", "inside", "i", "fin", "l", "is", "lin", "con", "r", "re", "init", "source", "info", "win", "input", "f", "er", "In", "s", "gen", "inn", "c", "ini", "conn", "OUT", "nin", "e", "socket", "between", "token", "min", "inf", "inner", "rin", "n", "g", "err", "kin", "pass", "again", "reader", "exec", "pin", "scan", "connection", "log", "bin", "readable", "as", "inc", "doc", "IN", "out", "thin", "query"], "a": ["p", "ka", "na", "u", "ad", "za", "ba", "i", "l", "aa", "z", "A", "oa", "pa", "f", "au", "c", "ga", "ak", "an", "x", "w", "sa", "ae", "e", "ea", "aka", "ai", "alpha", "d", "af", "n", "ca", "ac", "qa", "aaa", "sta", "ama", "fa", "y", "la", "as", "area", "ab", "da", "am", "va", "aj"], "b": ["fb", "bi", "p", "u", "pb", "abb", "rb", "v", "ba", "i", "l", "cb", "r", "bf", "aa", "z", "h", "lb", "A", "bc", "length", "ok", "f", "eb", "c", "m", "w", "x", "base", "e", "o", "d", "n", "B", "j", "sb", "bb", "y", "ab", "ob", "boot"], "k": ["ky", "sk", "mk", "p", "ka", "u", "ko", "ch", "ke", "ks", "ad", "v", "i", "kick", "l", "kk", "ik", "r", "z", "h", "dk", "ok", "f", "ek", "c", "key", "ak", "m", "w", "x", "e", "kw", "q", "o", "d", "n", "ac", "kid", "j", "K", "y", "ki", "t"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint[] dishes = new int[5];\\n\t\tint sum = 0;\\n\t\tfor(int i = 0; i < 5; i++) {\\n\t\t\tdishes[i] = sc.nextInt();\\n\t\t\tsum += dishes[i];\\n\t\t\tdishes[i] = (10 - (dishes[i] % 10)) % 10;\\n\t\t}\\n\t\tArrays.sort(dishes);\\n\t\tfor(int i = 0; i < 4; i++) {\\n\t\t\tsum += dishes[i];\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t}\\n}", "target": "63", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "sf", "scope", "pc", " SC", "sub", "asc", "Sc", "SC", "screen", "exp", "bc", "cs", "sw", "src", "desc", "lc", "ci", "c", " scr", "sp", "acc", "system", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cr", "sch", "out", "esc", "cus", "sync"], "dishes": [" dises", "lishing", "bishers", "pish", "diffs", "Dished", "ddaughters", " dish", "ndished", "niffs", " dances", "ndises", "nishing", "ddishers", "dishers", "dished", "nished", "ddished", "Dishers", "ddises", "idishing", "Dish", "bished", "lish", "daughters", "bishes", " dished", "nances", " dishing", "lishes", "ddributes", "Dishes", "pishers", "lished", "dish", "idributes", "nributes", "pished", "idishes", "nishers", "pishing", "nishes", "ddances", "ndaughters", "ddishing", "idises", "bishing", "dishing", " dishers", "idiffs", "dises", "nish", "Dishing", "ddishes", "dributes", "pishes", "idaughters", "idished", " dributes", "dances", " diffs", "ndishes"], "sum": ["all", "um", "total", "conf", "unit", "amount", "sk", "count", "size", "cost", "hash", "num", "summary", "si", "average", "vol", "ass", "add", "sh", "loss", "sort", "cur", "name", "fill", "diff", "part", "use", "start", "sign", "info", "spread", "what", "cal", "style", "weight", "index", "us", "pack", "di", "sa", "cum", "min", "alpha", "miss", "skip", "comment", "Sum", "result", "stat", "fat", "up", "seed", "parse", "scale", "mean", "cache", "dot", "out", "fee"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "data", "uni", "ri", "start", "io", "init", "info", "abi", "temp", "f", "ci", "ui", "ini", "key", "c", "index", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "ii", "cli", "b", "li", "field", "j", "oi", "in", "ti", "fi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try(Scanner scn = new Scanner(System.in)) {\\n            int n;\\n            while((n = scn.nextInt()) > 0) {\\n                double sum = 0, sd = 0;\\n                double[] s = new double[n];\\n\\n                for(int i = 0; i < n; i++) {\\n                    s[i] = scn.nextDouble();\\n                    sum += s[i];\\n                }\\n                double avg = sum / n;\\n                for(int i = 0; i < n; i++) {\\n                    sd += Math.pow((s[i] - avg), 2);\\n                }\\n                System.out.println(Math.sqrt(sd / n));\\n            }\\n        }\\n    }\\n}", "target": "203", "substitutes": {"n": ["nn", "nc", "nt", "ni", "count", "p", "size", "dn", "u", "nor", "na", "num", "nan", "N", "ln", "v", "cn", "l", "sn", "init", "h", "z", "len", "f", "fn", "conn", "c", "ne", "m", "w", "x", "e", "o", "d", "g", "ns", "b", "pn", "network", "nb", "j", "net", "k", "no", "in", "mn", "y", "en", "t"], "sum": ["um", "total", "sk", "sf", "count", "size", "cost", "na", "ss", "summary", "si", "average", "vol", "ass", "sh", "add", "a", "sam", "sat", "sign", "diff", "sc", "sin", "sim", "spread", "weight", "sav", "sa", "min", "alpha", "d", "plus", "Sum", "g", "se", "pass", "su", "sm", "parse", "scale", "mean", "av", "dev", "am"], "sd": ["dist", "sk", "ness", "sf", "size", "sky", "sec", "ss", "si", "sh", "sam", "sv", "sat", "std", "wd", "sin", "gd", "fd", "sl", "au", "ds", "sea", "sp", "sa", "sq", "dd", "d", "dy", "se", "dl", "sb", "sm", "mean", "av", "vd", "sg", "SD", "sc", "fee"], "s": ["aws", "S", "ts", "p", "u", "ins", "ks", "ss", "si", "strings", "sh", "l", "a", "is", "sv", "es", "ls", "ws", "fs", "its", "cs", "ps", "lines", "sl", "c", "ds", "os", "words", "tests", "ms", "us", "sa", "sq", "ses", "abs", "d", "g", "ns", "sets", "services", "b", "gs", "su", "js", "sb", "xs", "ans", "as"], "i": ["bi", "hi", "api", "pi", "ni", "hei", "iu", "p", "it", "u", "id", "multi", "qi", "iii", "xi", "ji", "v", "si", "ix", "l", "ri", "r", "io", "init", "z", "info", "f", "lc", "ci", "vi", "ui", "c", "ini", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "zi", "li", "j", "oi", "qa", "yi", "in", "y", "ind", "ti", "fi"], "avg": ["AVG", "avern", "averg", "averkg", "avergs", "overG", " avG", "avp", "avn", " avgs", "overg", "overn", " avn", "averG", "avG", " avp", " avkg", "avkg", "AVp", "overkg", "AVgs", "avgs", "AVg", "averp"]}}
{"code": "import java.io.*;\\n\\nclass Main {\\n    public static void main (String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int n = Integer.parseInt(br.readLine());\\n        boolean[][] cards = new boolean[4][13];\\n        String[] card;\\n        int i, j;\\n        char c;\\n        for (i = 0; i < 4; i++) for (j = 0; j < 13; j++) cards[i][j] = false;\\n        for (i = 0; i < n; i++) {\\n            card = br.readLine().split(\" \");\\n            if (card[0].equals(\"S\")) {\\n                cards[0][Integer.parseInt(card[1]) - 1] = true;\\n            } else if (card[0].equals(\"H\")) {\\n                cards[1][Integer.parseInt(card[1]) - 1] = true;\\n            } else if (card[0].equals(\"C\")) {\\n                cards[2][Integer.parseInt(card[1]) - 1] = true;\\n            } else if (card[0].equals(\"D\")) {\\n                cards[3][Integer.parseInt(card[1]) - 1] = true;\\n            }\\n        }\\n        for (i = 0; i < 4; i++) {\\n            for (j = 0; j < 13; j++) {\\n                if (!cards[i][j]) {\\n                    if (i == 0) c = 'S';\\n                    else if (i == 1) c = 'H';\\n                    else if (i == 2) c = 'C';\\n                    else c = 'D';\\n                    System.out.println(c + \" \" + (j + 1));\\n                }\\n            }\\n        }\\n    }\\n}", "target": "189", "substitutes": {"br": ["bl", "ber", "bm", "wr", "hr", "rb", "browser", "serv", "tr", "arr", "ar", "jar", "lr", "cb", "fr", "r", "bf", "bh", "yr", "io", "iter", "stream", "bc", "bridge", "src", "ler", "er", "dr", "orb", "mr", "BR", "sp", "bro", "img", "str", "Br", "sr", "b", "err", "gr", "ner", "ger", "reader", "buf", "sb", "bb", "ocr", "cr", "bar", "Reader"], "n": ["nn", "nc", "nt", "ni", "p", "num", "N", "ln", "l", "a", "is", "sn", "r", "z", "h", "nl", "nr", "f", "s", "ne", "m", "an", "x", "e", "o", "d", "ns", "b", "pn", "nb", "ner", "network", "net", "k", "mn", "en", " N"], "cards": ["citizens", "groups", "breaks", "cats", "draw", "holes", "checks", "features", "blocks", "tags", "images", "quarters", "cuts", "charges", "caps", "parents", "levels", "cells", "games", "lights", "fields", "rules", "ls", "phones", "pages", "dates", "Card", "cs", "orders", "types", "lines", "planes", "rows", "tests", "cas", "words", "notes", "cos", "limits", "codes", "books", "ways", "cons", "users", "flows", "files", "events", "days", "cases", "services", "ends", "names", "birds", "pieces", "styles", "stars", "lists", "ids", "comments", "balls", "letters", "bands", "ays", "array", "ards"], "card": ["crit", "C", "character", "valid", "co", "row", "char", "letter", "key", "check", "star", "folder", "ce", "g", "match", "post", "call", "arc", "p", "component", "bug", "id", "line", "center", "name", "Card", "book", "ci", "user", "index", "str", "note", "node", "code", "content", "d", "element", "field", "day", "parse", "file", "pattern", "cl", "and", "record", "add", "cel", "sign", "cell", "pair", "x", "column", "comment", "pass", "ge", "word", "shape", "can", "coll", "condition", "cat", "draw", "custom", "service", "request", "entry", "car", "event", "cond", "style", "load", "e", "text", "string", "token", "cf", "ul", "cle", "cart", "cc"], "i": ["bi", "im", "api", "ori", "pi", "ni", "iu", "p", "ami", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "anti", "si", "ix", "l", "a", "is", "ri", "ik", "my", "ali", "io", "init", "z", "info", "h", "f", "ci", "vi", "ui", "ini", "index", "eni", "phi", "x", "uri", "e", "di", "ip", "I", "ie", "ai", "o", "gi", "d", "mi", "g", "cli", "ii", "b", "zi", "li", "oi", "me", "yi", "in", "chi", "y", "ind", "ti", "fi"], "j": ["dj", "jj", "jc", "p", "adj", "it", "u", "oj", "J", "qi", "ch", "ji", "v", "jp", "pr", "si", "l", "ij", "ali", "r", "z", "h", "aj", "f", "ui", "key", "index", "m", "w", "x", "e", "note", "jet", "ja", "uj", "ie", "q", "o", "jit", "d", "g", "b", "ii", "li", "je", "k", "js", "jam", "obj", "kj", "job", "y", "jl", "ind", "out", "jo"], "c": ["enc", "cat", "ic", "arc", "count", "p", "pc", "it", "C", "u", "tc", "v", "cur", "line", "l", "a", "cu", "ct", "name", "r", "sc", "z", "co", "h", "end", "cs", "char", "f", "lc", "ci", "s", "dc", "m", "w", "x", "at", "e", "str", "ec", "col", "string", "cf", "ce", "o", "code", "d", "g", "b", "ac", "k", "type", "cd", "cc", "word", "y", "cr", "cache", "cy", "t", "unc"]}}
{"code": "import java.io.*;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\n\\nimport static java.lang.Long.max;\\n\\npublic class Main {\\n  static class Pair {\\n    int num;\\n    int cut;\\n\\n    Pair(int num, int cut) {\\n      this.num = num;\\n      this.cut = cut;\\n    }\\n\\n    double getVal() {\\n      return -num / (double) cut;\\n    }\\n  }\\n\\n  public static void main(String[] args) throws IOException {\\n    sc = new MScanner(System.in);\\n    pw = new PrintWriter(System.out);\\n    int N = sc.nextInt();\\n    int[] as = sc.intArr(N);\\n    long m = 0;\\n    long total = 0;\\n    for(int h: as) {\\n        total += max(0, m - h);\\n        m = max(h, m);\\n    }\\n\\n\\n    pw.println(total);\\n\\n    // pw.println(\"end\");\\n    // pw.println();\\n\\n    pw.flush();\\n    // System.out.println(cnt);\\n  }\\n\\n  /**\\n   * https://www.slideshare.net/hcpc_hokudai/binary-indexed-tree A space efficient version segment\\n   * tree. Usually for range sum. Or the required metric can be calulated in that:\\n   *\\n   * <p>right_metric = parant_metric - left_metric Only then, we can stop memoizing right_metric\\n   *\\n   * <p>The internal structure is a 1-base array, to simplify calculation of parent node's idx. lsb\\n   * = 3 & -3 = 2 (0x0011 & 0x1101 = 0x0001) lastParentOf3 = 3 - lsb = 2 curParentOf3 = 3 + lsb = 4\\n   */\\n  static class FenwickTree {\\n    private final long[] state;\\n    private final int size;\\n\\n    FenwickTree(int size) {\\n      this.size = size;\\n      state = new long[size + 1];\\n    }\\n\\n    @Override\\n    public String toString() {\\n      return Arrays.toString(state);\\n    }\\n\\n    long queryRangeSumFromZeroTo(int idx) {\\n      long sum = 0;\\n      while (idx != 0) {\\n        sum += state[idx];\\n        idx -= (idx & -idx);\\n      }\\n      return sum;\\n    }\\n\\n    /** @param val can be negative */\\n    void updateElement(int idx, long val) {\\n      while (idx <= size) {\\n        state[idx] += val;\\n        idx += (idx & -idx);\\n      }\\n    }\\n  }\\n\\n  // sc.close();\\n  // pw.println(cnt);\\n  // pw.flush();\\n\\n  static PrintWriter pw;\\n  static MScanner sc;\\n\\n  static class MScanner {\\n    StringTokenizer st;\\n    BufferedReader br;\\n\\n    public MScanner(InputStream system) {\\n      br = new BufferedReader(new InputStreamReader(system));\\n    }\\n\\n    public MScanner(String file) throws Exception {\\n      br = new BufferedReader(new FileReader(file));\\n    }\\n\\n    public String next() throws IOException {\\n      while (st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());\\n      return st.nextToken();\\n    }\\n\\n    public int[] intArr(int n) throws IOException {\\n      int[] in = new int[n];\\n      for (int i = 0; i < n; i++) in[i] = nextInt();\\n      return in;\\n    }\\n\\n    public long[] longArr(int n) throws IOException {\\n      long[] in = new long[n];\\n      for (int i = 0; i < n; i++) in[i] = nextLong();\\n      return in;\\n    }\\n\\n    public int[] intSortedArr(int n) throws IOException {\\n      int[] in = new int[n];\\n      for (int i = 0; i < n; i++) in[i] = nextInt();\\n      shuffle(in);\\n      Arrays.sort(in);\\n      return in;\\n    }\\n\\n    public long[] longSortedArr(int n) throws IOException {\\n      long[] in = new long[n];\\n      for (int i = 0; i < n; i++) in[i] = nextLong();\\n      shuffle(in);\\n      Arrays.sort(in);\\n      return in;\\n    }\\n\\n    public Integer[] IntegerArr(int n) throws IOException {\\n      Integer[] in = new Integer[n];\\n      for (int i = 0; i < n; i++) in[i] = nextInt();\\n      return in;\\n    }\\n\\n    public Long[] LongArr(int n) throws IOException {\\n      Long[] in = new Long[n];\\n      for (int i = 0; i < n; i++) in[i] = nextLong();\\n      return in;\\n    }\\n\\n    public String nextLine() throws IOException {\\n      return br.readLine();\\n    }\\n\\n    public int nextInt() throws IOException {\\n      return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() throws IOException {\\n      return Double.parseDouble(next());\\n    }\\n\\n    public char nextChar() throws IOException {\\n      return next().charAt(0);\\n    }\\n\\n    public long nextLong() throws IOException {\\n      return Long.parseLong(next());\\n    }\\n\\n    public boolean ready() throws IOException {\\n      return br.ready();\\n    }\\n\\n    public void waitForInput() throws InterruptedException {\\n      Thread.sleep(3000);\\n    }\\n  }\\n\\n  static void shuffle(int[] in) {\\n    for (int i = 0; i < in.length; i++) {\\n      int idx = (int) (Math.random() * in.length);\\n      int tmp = in[i];\\n      in[i] = in[idx];\\n      in[idx] = tmp;\\n    }\\n  }\\n\\n  static void shuffle(long[] in) {\\n    for (int i = 0; i < in.length; i++) {\\n      int idx = (int) (Math.random() * in.length);\\n      long tmp = in[i];\\n      in[i] = in[idx];\\n      in[idx] = tmp;\\n    }\\n  }\\n}\\n", "target": "202", "substitutes": {"num": ["um", "offset", "unit", "on", "comb", "Num", "count", "prefix", "crit", "val", "id", "one", "na", "nu", "multi", "split", "sort", "uni", "name", "con", "start", "nm", "value", "init", "valid", "un", "home", "temp", "end", "len", "mut", "f", "gen", "cmp", "sum", "index", "umi", "mu", "np", "coord", "text", "col", "node", "max", "nom", "n", "b", "dim", "lit", "nb", "net", "norm", "nit", "no", "pos", "term", "mod", "form", "buf", "number", "mid", "off", "ref", "NUM", "en", "out"], "cut": ["um", "cat", "call", "unit", "offset", "focus", "count", "hide", "crit", "core", "cuts", "slice", "it", "split", "run", "ext", "cur", "edit", "circ", "sort", "ctr", "diff", "init", "fit", "end", "ract", "nat", "width", "cm", "alt", "c", "contract", "key", "format", "check", "clip", "output", "nut", "bit", "config", "take", "ctrl", "text", "category", "shift", "set", "limit", "lit", "Cut", "frac", "form", "rib", "tick", "out", "uit", "crop", "option"], "sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "ch", "tc", " SC", "cur", "sub", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "cv", "lc", "dc", "c", "cer", "sp", "st", "sq", "uc", "sem", "se", "sb", "scan", "isc", "osc", "rc", "cc", "cr", "sch", "inc", "squ", "ec", "esc", "ctx", "cus"], "pw": ["Pws", "ppW", "PW", "Pv", " pws", "ppws", "ppw", "ph", "pv", "pws", " pW", "Ph", " pv", "pwb", "Pwb", "hW", "Pw", " ph", "hw", "hv", "hh", " pwb", "pW", "ppwb"], "N": ["S", "Num", "No", "p", "C", "M", " n", "a", "U", "X", "F", "Q", "P", "A", "Total", "x", "Na", "Ni", "I", "L", "R", "Max", "n", "ns", "B", " M", "V", "K", "no", "H", "O", "Ns", "NS", "G", "nos"], "as": ["all", "um", "mas", "was", "AS", "rs", "ass", "ar", "a", "As", "asm", "is", "his", "al", "r", "ask", "aa", "man", "ms", "us", "an", "sa", "ai", "ums", "n", "las", "ac", "ras", "asha", "av", "ans", "asa", "ash", "la", "ma", "has", "am"], "m": ["um", "media", "p", "u", "multi", "meta", "M", "v", "auto", "i", "sh", "l", "a", "mm", "r", "mt", "mo", "f", "s", "ms", "c", "sum", "pm", "w", "tm", "mad", "base", "mu", "e", "memory", "x", "max", "min", "o", "md", "d", "mi", "n", "q", "b", "j", "hm", "mx", "mean", "mid", "ma", "am", "t"], "total": ["otal", "this", "all", "complete", "count", "eta", "more", "cost", "mon", "actual", "multi", "meta", "M", "average", "available", "mm", "partial", " Total", "valid", "value", "mt", "mma", "percent", "length", "last", "ms", "c", "sum", " all", "Total", "mu", "base", "full", "max", "md", "result", " sum", " whole", "current", "no", "mega", "scale", "micro", "bar", "shared", "ma", "real", "gross", "t"], "h": ["hi", "p", "u", "hr", "ch", "M", "v", "i", "sh", "a", "l", "r", "rh", "bh", "ph", "z", "ha", "f", "ah", "s", "c", "w", "x", "e", "max", "q", "hs", "d", "n", "g", "b", "ih", "j", "hm", "k", "hh", "H", "y", "ho", "am", "t"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\t\tpublic static void main(String[] args) {\\n\t\t\tScanner sc = new Scanner(System.in);\\n\\n\t\t\tString str = sc.next();\\n\\n\t\t\tString[] strArray = str.split(\"\");\\n\t\t\tint num = 0;\\n\\n\t\t\tfor(int i =0;i < strArray.length;i++) {\\n\\n\t\t\t\tif(strArray[i].equals(\"+\")) {\\n\t\t\t\t\tnum++;\\n\t\t\t\t}else {\\n\t\t\t\t\tnum--;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(num);\\n\\n\\n\\n\t}\\n\\n\\n}\\n\\n\\n", "target": "54", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "nt", "scope", "pc", "ch", "sec", "ss", " SC", "sub", "sh", "search", "Sc", "SC", "bc", "cs", "sw", "src", "cor", "desc", "ci", "sl", "c", "sp", "st", "uc", "g", "se", "ner", " Sc", "anc", "exec", "ocr", "scan", "osc", "rc", "cc", "cr", "sch", "spec", "ec", "esc"], "str": ["this", "div", "p", "next", "tr", "pr", "arr", "strings", "url", "STR", "data", "fr", "r", "iter", "input", "char", "f", "br", "s", "c", "list", "sp", "st", "text", "string", "Str", "n", "sr", "result", "err", "obj", "in", "txt", "doc", "strip"], "strArray": ["intBuffer", "errString", "strNumber", "StrNumber", "intArray", "strIndex", "intList", "StrApp", "StrBuffer", "StrIndex", "errArray", " strAr", "strRest", "StrAr", " strList", " strIndex", " strBuffer", "intRest", "strBuffer", " strRest", "strAr", "errNumber", "StrRest", "intAr", "StrArray", " strString", "StrString", "strList", " strNumber", "strString", "intIndex", "StrList", " strApp", "intApp", "strApp"], "num": ["um", "div", "none", "parent", "total", "unit", "counter", "offset", "Num", "ni", "count", "test", "u", "id", "nu", "multi", "hom", "span", "cu", "uni", "con", "valid", "block", "iter", "nr", "len", "f", "gen", "loc", "sum", "check", "index", "x", "umi", "done", "coord", "du", "col", "ul", "max", "miss", "nom", "n", "zero", "result", "dim", "loop", "nb", "pos", "no", "in", "die", "bin", "non", "number", "inc", "off", "NUM", "en"], "i": ["bi", "hi", "pi", "ni", "p", "slice", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "l", "ri", "uli", "start", "io", "init", "h", "abi", "f", "ci", "ui", "c", "ini", "index", "x", "mu", "uri", "ip", "di", "e", "I", "ai", "o", "gi", "d", "n", "ii", "b", "li", "j", "k", "oi", "in", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tString s = new Scanner(System.in).next();\\n\t\tSystem.out.println(s.equals(\"RRR\") ? 3 : s.contains(\"RR\") ? 2 : s.contains(\"R\") ? 1 : 0);\\n\t}\\n}\\n", "target": "141", "substitutes": {"s": ["S", "ts", "safe", "p", "u", "http", "signed", "ins", "ss", "rs", "si", "i", "strings", "l", "a", "es", "sv", "is", "ls", "ws", "r", "fs", "ps", "f", "sl", "c", "ings", "os", "t", "ds", "parts", "str", "e", "ssl", "string", "ses", "hs", "abs", "d", "o", "n", "ns", "g", "b", "sets", "services", "gs", "sym", "su", "js", "sb", "xs", "in", "as", "out", "sync"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner scn=new Scanner(System.in);\\n\t\tString str=scn.next();\\n\t\tint num=10,x=10;\\n\t\tnum*=str.charAt(0)-'0';\\n\t\tnum+=str.charAt(1)-'0';\\n\t\tnum*=10;\\n\t\tnum+=str.charAt(2)-'0';\\n\t\tnum*=10;\\n\t\tnum+=str.charAt(3)-'0';\\n\t\tx*=str.charAt(5)-'0';\\n\t\tx+=str.charAt(6)-'0';\\n\t\tif(num>=2019&&x>4) {\\n\t\t\tSystem.out.println(\"TBD\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"Heisei\");\\n\t\t}\\n\t}\\n\\n}\\n", "target": "163", "substitutes": {}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint ans = 0;\\n\t\t\\n\t\tif(a % 2 == 0  && b % 2 == 1)\\n\t\t\tout.println(\"IMPOSSIBLE\");\\n\t\telse if(a % 2 == 1 && b % 2 == 0)\\n\t\t\tout.println(\"IMPOSSIBLE\");\\n\t\telse {\\n\t\t\tint n = Math.abs(a - b) / 2;\\n\t\t\tans = Math.max(a, b) - n;\\n\t\t\tout.println(ans);\\n\t\t}\t\t\\n\t}\\n}\\n", "target": "31", "substitutes": {"sc": ["sche", "mc", "sci", "nc", "scope", "pc", "com", "ch", "tc", "ss", "sec", "cur", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "cv", "cor", "lc", "ci", "cer", "c", "sp", "ec", "system", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "out", "esc", "ctx", "cus", "sync"], "a": ["aw", "api", "p", "ia", "na", "u", "ad", "ba", "i", "l", "aa", "z", "A", "f", "au", "s", "c", "ga", "m", "an", "x", "sa", "ae", "e", "ea", "ai", "alpha", "o", "d", "abs", "ca", "ac", "ama", "fa", "as", "la", "y", "area", "ab", "da", "asa", "am", "va", "aj"], "b": ["fb", "bi", "p", "mb", "pb", "abb", "rb", "v", "i", "ba", "l", "db", "cb", "ib", "bf", "aa", "be", "z", "lb", "h", "bc", "bs", "f", "eb", "br", "s", "c", "x", "base", "e", "o", "d", "B", "body", "nb", "j", "sb", "bb", "bot", "bd", "y", "wb", "ab", "ob", "bp"], "ans": ["nn", "ana", "sk", "ars", "AN", "anas", "aned", "ines", "vers", "na", "ani", "errors", "ins", "nan", "aus", "ks", "ln", "anon", "lan", "atan", "ions", "offs", "ls", "cs", "ians", "lines", "s", "nas", "cas", "ants", "an", "x", "cons", "ANS", "anes", "leans", "ns", "ents", "anne", "ras", "ats", "anus", "outs", "as", "ons", "aning", "annels", "can", "ann"], "n": ["nn", "nc", "nt", "p", "num", "nan", "N", "ln", "anon", "cn", "i", "l", "sn", "un", "f", "nat", "s", "c", "ne", "m", "an", "nin", "e", "max", "min", "o", "d", "ns", "g", "pn", "nb", "j", "k", "in", "en", "ann"]}}
{"code": "import java.util.Scanner;\\n\\n// https://atcoder.jp/contests/abc155/tasks/abc155_b\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] array = new int[N];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tarray[i] = sc.nextInt();\\n\t\t}\\n\t\tsc.close();\\n\\n\t\tboolean flag = true;\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tint n = array[i];\\n\t\t\tif(n%2==0) {\\n\t\t\t\tif((n%3==0)||(n%5==0)) {\\n\\n\t\t\t\t}else {\\n\t\t\t\t\tflag = false;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tif(flag) {\\n\t\t\tSystem.out.println(\"APPROVED\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"DENIED\");\\n\t\t}\\n\\n\\n\\n\t}\\n\\n}\\n", "target": "113", "substitutes": {}}
{"code": "import java.util.*;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n        long snack1 = sc.nextLong();\\n        long snack2 = sc.nextLong();\\n        long min = Math.min(snack1,snack2);\\n        long max = Math.max(snack1,snack2);\\n        \\n        long num = 1;\\n        \\n        long ans = 0;\\n        \\n        while(true){\\n            if((min * num)%max == 0){\\n                ans = min * num;\\n                break;\\n            } \\n            num++;\\n        }\\n  System.out.println(ans);\\n    }\\n}", "target": "67", "substitutes": {"sc": ["cl", "enc", "sche", "sci", "nc", "scope", "pc", "na", "com", "ch", "sec", "ss", "tc", "server", " SC", "cur", "Sc", "SC", "cs", "bc", "sw", "cv", "src", "lc", "ci", "dc", "cer", "c", "sp", "acc", "system", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "anc", "exec", "sb", "scan", "osc", "rc", "cc", "cr", "cam", "ec", "esc", "ctx", "sync"], "snack1": ["snACKone", "nck3", "SnACK2", "snackerOne", "nack0", "snACK2", "snacks0", "snace2", "snacks3", "snace3", "Snackone", "snack3", "snrockOne", "nack3", "snck3", "snck1", "snACK1", "snack01", "snck0", "SnACKOne", "snacksone", "snACK01", "snacksOne", "snackone", "innackerone", "innacker1", "nack2", "snace0", "snck2", "snacks01", "SnACKone", "snrockone", "innackOne", "snacks2", "innacker01", "innackerOne", "innackone", "snace1", "SnackOne", "snacker1", "snackOne", "Snack1", "snrock2", "snacker01", "SnACK1", "nck1", "snrock1", "nck2", "snacks1", "snACKOne", "innack01", "Snack2", "snack0", "snackerone", "nack1", "innack1", "nck0"], "snack2": ["snckTwo", " snacks0", "snax2", "snarkB", "snax0", "knackB", "snackTwo", " snacksTwo", "knacksB", "flacktwo", "snacks0", "snacksTwo", "flackTwo", "snark0", "knackTwo", "flack2", "snark2", "flacker2", "flackerTwo", "snackerTwo", "snck0", " snackTwo", "flack0", "knacks2", "knack2", "snacksB", "snacktwo", " snacks2", "snarktwo", "snck2", "snaxTwo", "snacker0", "snackerB", "knacksTwo", "snaxtwo", "snacks2", "snackertwo", "flackertwo", "snacker2", "snackstwo", "snarkTwo", "flacker0", "sncktwo", "snack0", " snack0", " snackstwo", "snackB", " snacktwo"], "min": ["all", "unit", "don", "low", "prefix", "size", "mon", "na", "minimum", "next", "nan", "span", "mins", "average", "sub", "pre", "sort", "name", "sign", "diff", "mini", "part", "start", "block", "init", "sin", "lower", "un", "len", "first", "oa", "man", "loc", "alt", "sum", "amin", "index", "m", "mind", "between", "rand", "left", "MIN", "skip", "miss", "n", "limit", "small", "only", "pass", "pos", "step", "in", "position", "mean", "mid", "area", "off", "range", "Min", "en"], "max": ["head", "all", "div", "total", "conf", "count", "val", "size", "patch", "id", "add", "out", "point", "diff", "right", "end", "last", "best", "gen", "sum", "ax", "index", "w", "x", "cap", "between", "rand", "q", "Max", "n", "rank", "plus", "work", "k", "frac", "step", "scale", "form", "mod", "in", "wrap", "inc", "MAX", "off", "range", "fix", "default", "array"], "num": ["nn", "um", "offset", "unit", "Num", "ni", "count", "mon", "id", "na", "nu", "multi", "hom", "uni", "con", "valid", "init", "un", "len", "mut", "gen", "fn", "loc", "sum", "index", "an", "umi", "ul", "common", "miss", "feat", "n", "ai", "dom", "dim", "nb", "fat", "pos", "no", "scan", "lang", "mn", "bin", "san", "number", "inc", "NUM", "en", "ann", "mult"], "ans": ["nn", "ana", "aned", "ars", "vers", "AN", "anas", "na", "ins", "nan", "aus", "anon", "lan", " numbers", "a", "atan", "ions", "con", "gen", "nas", "os", " len", "cas", "plan", "ants", "an", "x", " means", "umi", "cons", "ANS", "ran", "ain", "ents", "ns", "anan", " scan", "ras", "anus", "anc", "scan", "san", "annot", "ids", " na", "as", "ons", " number", "aning", "can", "ann"]}}
{"code": "\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Scanner;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int k= 1;\\n        HashMap<String,Integer> hashMap = new HashMap<>();\\n        hashMap.put(\"SUN\",7);\\n        hashMap.put(\"MON\",6);\\n        hashMap.put(\"TUE\",5);\\n        hashMap.put(\"WED\",4);\\n        hashMap.put(\"THU\",3);\\n        hashMap.put(\"FRI\",2);\\n        hashMap.put(\"SAT\",1);\\n        String s1;\\n        int a,b;\\n        while(k-->0){\\n            a=s.nextInt();\\n            System.out.println(1-a);\\n        }\\n    }\\n\\n    private static int binary_search(\\n            int arr[], int l,\\n            int h, int x)\\n    {\\n        while (l <= h) {\\n            int mid = (l + h) / 2;\\n            if (arr[mid] <= x)\\n                l = mid + 1;\\n            else\\n                h = mid - 1;\\n        }\\n        return h;\\n    }\\n    static int gcd(int a, int b)\\n    {\\n        if(b==0) {\\n            return a;\\n        }\\n        return gcd(b,a%b);\\n    }\\n    private static boolean isPrime(int n) {\\n        if (n == 2)\\n            return true;\\n        else if ((n % 2 == 0 && n > 2) || n < 2)\\n            return false;\\n        else {\\n            for (int i = 3; i <= (int) Math.sqrt(n); i += 2) {\\n                if (n % i == 0)\\n                    return false;\\n            }\\n            return true;\\n        }\\n\\n\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new\\n                    InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n}", "target": "148", "substitutes": {"s": ["aws", "conf", "S", "sf", "p", "obs", "u", "ins", "v", "si", "bis", "sv", "ls", "r", "ws", "utils", "f", "er", "sl", "c", "os", "ings", "m", "w", "ssl", "ses", "o", "d", "g", "gs", "services", "sys", "js", "as", "out"], "k": ["sk", "mk", "p", "u", "ck", "num", "ad", "km", "ks", "v", "kick", "kk", "ik", "ok", "ek", "c", "key", "ak", "m", "kw", "ack", "q", "unk", "d", "g", "kid", "j", "K", "work", " K", "t"], "hashMap": ["ashData", "mymap", "switchList", "switchmap", "mySet", "hashData", " hashArray", "hexmap", "searchTable", "HashFile", "hashArray", "headerFile", "ashmap", "allMap", "hashCache", "ashList", "macInfo", "hashTable", "HashInfo", " hashFile", "myMap", " hashData", "headermap", "HashArray", " hashTable", "searchMap", "HashList", " hashModel", "ashCache", " hashCache", "hexFile", "macmap", "hashModel", " hashInfo", "myInfo", " hashSet", "hashCode", "switchCache", "searchCode", "hashList", "HashData", "ashFile", "hexCache", "searchArray", "allModel", "hashFile", "ashMap", "hexMap", "allList", "hashmap", "HashCode", "Hashmap", "ashSet", "macSet", "switchMap", " hashList", " hashmap", "headerMap", "macMap", "hashSet", "HashTable", "headerSet", " hashCode", "hashInfo", "allmap", "ashModel"], "s1": [" s2", " s0", "r2", "sOne", "p1", "p0", "p2", " sOne", "s2", "s0", "r1", "rOne", "pOne", "r0"], "a": ["p", "ia", "ka", "na", "sha", "u", "ad", "v", "ba", "ar", "r", "aa", "z", "A", "ha", "oa", "f", "au", "c", "ga", "m", "w", "an", "action", "sa", "e", "ea", "ack", "ae", "ai", "alpha", "o", "d", "g", "array", "ca", "ac", "j", "qa", "wa", "aaa", "fa", "y", "la", "as", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["bl", "fb", "p", "mb", "bug", "u", "pb", "abb", "rb", "v", "ba", "db", "r", "bf", "bh", "aa", "be", "value", "lb", "z", "bs", "f", "c", "m", "w", "e", "o", "d", "g", "B", "body", "nb", "j", "bb", "sb", "bd", "y", "wb", "ab"], "arr": ["div", "enc", "bl", "arc", "record", "dict", "arm", "rep", "map", "par", "tr", "align", "ar", "fr", "Array", "r", "dat", "attr", "app", "dr", "air", "list", "img", "arch", "prev", "err", "ray", "Ar", "gr", "rr", "abc", "obj", "frac", "av", "bar", "batch", "array"], "l": ["hi", "low", "p", "u", "ln", "v", "le", "el", "lin", "ls", "r", "z", "lb", "len", "f", "lc", "loc", "sl", "c", "m", "w", "lo", "e", "pl", "ul", "o", "L", "d", "g", "kl", "li", "dl", "j", "ol", "y", "ll"], "h": ["hi", "p", "id", "ch", "gh", "v", "sh", "r", "rh", "bh", "ht", "ph", "z", "ha", "end", "f", "c", "m", "w", "e", "ul", "q", "hs", "o", "d", "g", "ih", "hm", "hh", "H", "hl", "y", "oh", "th"], "x": ["on", "p", "xp", "u", "xi", "ex", "v", "ix", "search", "X", "r", "z", "f", "c", "ax", "m", "w", "e", "xxx", "q", "o", "d", "g", "array", "xs", "y", "rx", "t", "xa", "xc", "xx"], "mid": ["hi", "offset", "low", "hei", "patch", "id", "nd", "multi", "ad", "Mid", "sub", "line", "mm", "part", "rh", "start", "entry", "exp", "middle", "co", "len", "end", "lim", "loc", "lc", "pid", "key", "bid", "m", "lo", "coord", "rad", "aid", "max", "min", "md", "d", "mi", "shift", "ii", "dim", "li", "grid", "field", "pos", "rel", "lab", "rid", "dev", "ind", "pad"], "n": ["nn", "all", "nc", "on", "nt", "count", "p", "size", "dn", "u", "nor", "na", "num", "nu", "nan", "N", "v", "cn", "sn", "r", "z", "un", "f", "fn", "conn", "c", "ne", "m", "w", "an", "e", "o", "d", "g", "ns", "network", "pn", "j", "net", "no", "non", "number", "y", "en", "t"], "i": ["bi", "hi", "pi", "p", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "mini", "ri", "uli", "z", "ci", "c", "ui", "ini", "index", "m", "phi", "ip", "e", "di", "I", "ai", "o", "gi", "d", "mi", "ii", "zi", "li", "j", "oi", "in", "chi", "y", "ti", "fi"], "br": ["bl", "ber", "bm", "p", "wr", "tra", "bern", "hr", "rb", "ch", "next", "tr", "rs", "pr", "bre", "db", "fr", "ctr", "r", "bf", "bh", "bal", "bridge", "bc", "fe", "dr", "mr", "BR", "img", "bro", "Br", "brush", "result", "err", "obj", "j", "buf", "ocr", "bb", "bt", "cr", "bar", "fore", "front"], "st": ["cl", "bl", "ut", "inst", "ste", "ts", "nt", "ust", "sth", "ST", "nd", "stack", "const", "ct", "sn", "std", "r", "start", "be", "ft", "fe", "first", "style", "est", "sp", "ist", "pt", "stri", "rest", "Str", "d", "ld", "St", "sb", "sta", "ast", "sts", "rd", "struct", "cr", "stop", "ost", "bt", "tt", "rt", "sc", "t", "strip"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String args[]) {\\n\\n        // \u5165\u529b\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int k = Integer.parseInt(sc.next());\\n        int q = Integer.parseInt(sc.next());\\n        int[] a = new int[q];\\n        int[] score = new int[n];\\n        for (int i = 0; i < q; i++) {\\n            a[i] = Integer.parseInt(sc.next());\\n            score[a[i] - 1]++;\\n        }\\n\\n        // \u4e3b\u51e6\u7406\\n        String[] result = new String[n];\\n        int sum = Arrays.stream(score).sum();\\n        for (int i = 0; i < n; i++) {\\n            result[i] = k <= sum - score[i] ? \"No\" : \"Yes\";\\n        }\\n\\n        // \u51fa\u529b\\n        System.out.println(String.join(\"\\r\\n\", result));\\n        sc.close();\\n    }\\n}", "target": "102", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n      \tint CONST_MOD = (int) (Math.pow(10, 9) + 7);\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        ArrayList<Integer> dp = new ArrayList<Integer>();\\n      \\n      \tfor(int i=0; i<n+1; i++)\\n        {\\n          dp.add(1);\\n        }\\n        \\n        for(int i = 0; i < m; i++)\\n        {\\n            dp.set(sc.nextInt(), 0);\\n        }\\n        \\n        for(int i = 2; i < n+1; i++)\\n        {\\n            if( dp.get(i) != 0 )\\n            { \\n            \tdp.set(i, (dp.get(i-1) + dp.get(i-2))%CONST_MOD);\\n            }\\n        }\\n        \\n        System.out.println(dp.get(n));\\n    }\\n}", "target": "174", "substitutes": {"CONST_MOD": ["CONCE_Mod", "CONST__RM", "CONSTNMOD", "CONST_RM", "CONST__MOD", "CONSTNRM", "CONCE_OK", "CONST__Mod", "CONSTRUCT_MOD", "CONSTRUCT_Mod", "CONCE_MOD", "CONSTNMod", "CONST_Mod", "CONST_OK", "CONSTRUCT_RM"], "sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "ser", "ch", "sec", "ss", "cur", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "cor", "cv", "lc", "ci", "loc", "c", "cer", "sp", "system", "sq", "uc", "cle", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "ctx", "ec", "esc", "console", "cus", "sync"], "n": ["nn", "nc", "nt", "count", "p", "u", "num", "N", "ln", "v", "cn", "l", "out", "sn", "r", "z", "h", "un", "len", "f", "s", "c", "ne", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "no", "in", "mn", "number", "y", "en", "t"], "m": ["mc", "p", "u", "num", "wm", "M", "v", "l", "mm", "r", "h", "z", "machine", "f", "man", "s", "c", "w", "x", "e", "o", "d", "b", "ii", "j", "k", "in", "mn", "y"], "dp": ["dm", "wp", "imp", "api", "pi", "p", "dict", "pb", "rep", "deb", "jp", "db", "data", "dq", "VP", "eps", "wd", "pg", "pd", "adr", "df", "lp", "dB", "cp", "dr", "dc", "uv", "ds", "password", "dos", "pkg", "projects", "pins", "di", "ip", "np", "iper", "dep", "hp", "d", "gp", "vp", "dim", "dl", "dt", "tp", "grad", "sup", "up", "DP", "manager", "address", "dh", "bp"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "l", "mini", "is", "ri", "io", "h", "z", "abi", "info", "f", "ci", "ui", "ini", "c", "phi", "x", "mu", "uri", "eni", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "zi", "cli", "li", "isi", "j", "oi", "yi", "chi", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint x1 = sc.nextInt();\\n\t\tint x2 = sc.nextInt();\\n\t\tint x3 = sc.nextInt();\\n\t\tint x4 = sc.nextInt();\\n\t\tint x5 = sc.nextInt();\\n\t\tif (x1 == 0) {\\n\t\t\tSystem.out.println(1);\\n\t\t} else if (x2 == 0) {\\n\t\t\tSystem.out.println(2);\\n\t\t} else if (x3 == 0) {\\n\t\t\tSystem.out.println(3);\\n\t\t} else if (x4 == 0) {\\n\t\t\tSystem.out.println(4);\\n\t\t} else {\\n\t\t\tSystem.out.println(5);\\n\t\t}\\n\t}\\n}\\n", "target": "222", "substitutes": {}}
{"code": "// ?????????????????? compareTo\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\t\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t// ?????\u00b0??????????????\u00b0???\\n\t\tint n = scan.nextInt();\\n\t\t// ???????????????????\u00b4????????????\u00b0\\n\t\tint taro = 0;\\n\t\tint hanako = 0;\\n\t\t// ?????????????????????????????\u00a7??\u00b0?????????\\n\t\tfor(int i = 0; i<n; i++) {\\n\t\t\t// ??????????????????\\n\t\t\tString taroCard = scan.next();\\n\t\t\tString hanakoCard = scan.next();\\n\t\t\t// ??????????????????????????????\\n\t\t\tint x = taroCard.compareTo(hanakoCard);\\n\t\t\t\\n\t\t\tif (x > 0) taro = taro +3;\\n\t\t\telse if (x < 0) hanako = hanako +3;\\n\t\t\telse{\\n\t\t\t\ttaro = taro + 1;\\n\t\t\t\thanako = hanako +1;\\n\t\t\t}\\n\t\t}\\n\t\t// ??????\\n\t\tSystem.out.println(taro + \" \" + hanako);\\n\\n\t}\\n\\n}", "target": "206", "substitutes": {}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        long N = sc.nextLong();\\n        long cnt = 0;\\n        long ans = 0;\\n        \\n        while(N!=0){\\n            N/=2;\\n            ans = ans + (long)Math.pow(2,cnt);\\n            cnt++;\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "51", "substitutes": {"sc": ["enc", "mc", "sci", "nc", "scope", "pc", "na", "sec", "ss", " SC", "sub", "asc", "Sc", "SC", "bc", "cs", "sw", "src", "ci", "c", "cer", "sp", "acc", "system", "uc", "soc", "ca", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus", "sync"], "N": ["MN", "Len", "S", "Num", "SN", "NL", "Count", "C", "M", "OS", "CN", " n", "Size", "Y", "F", "NN", "Q", "P", "NO", "T", "Ni", "I", "NC", "L", "R", "n", "B", "Ne", "V", "K", "D", "NT", "O", "Ns", "NS", "G", "NE", "NG", "E", "X"], "cnt": ["Cpt", "cnc", "cct", "cNT", "lcNT", "lcnt", "count", "Count", "acnc", " count", "Cno", "ucpt", " cnc", "CNT", "ucNT", " cNT", " cct", " cpt", "lcno", "Cct", "acount", "cno", "acnt", "cpt", "ucnt", "acNT", "Cnc", "ucct", "lcpt", " cno", "Cnt"], "ans": ["nn", "ana", "sk", "AN", "aned", "ars", "NA", "na", "ins", "nan", "An", "ks", " cs", "ss", "lan", " spans", "anon", "atan", "ions", "reads", "ls", "ations", "sn", "cs", "results", " answers", "s", "os", "nas", "cas", " ads", "plan", "ds", "ants", "an", " means", "ops", "cons", " Ans", "ANS", "ents", "ns", "cases", "CNN", "ats", " lines", "anc", "scan", " ants", "Ns", "NS", "outs", "as", " chars", "ons", " scans", "amps", "nos", "can", "ann"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    private static final String REGIX_COMMA = \",\";\\n\\n    public static void main(String[] args) {\\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n        int wide = 0;\\n        int num = 0;\\n\\n        try {\\n            wide = Integer.valueOf(in.readLine());\\n            num = Integer.valueOf(in.readLine());\\n\\n            int[] lot = new int[wide];\\n\\n            for (int i = 0; i < lot.length; i++) {\\n                lot[i] = i + 1;\\n            }\\n\\n            for (int j = 0; j < num; j++) {\\n\\n                String[] changePosition = in.readLine().split(REGIX_COMMA);\\n                int left = Integer.valueOf(changePosition[0]) - 1;\\n                int right = Integer.valueOf(changePosition[1]) - 1;\\n\\n                int temp = lot[left];\\n                lot[left] = lot[right];\\n                lot[right] = temp;\\n            }\\n\\n            for (int answer : lot) {\\n                System.out.println(answer);\\n            }\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        } finally {\\n            try {\\n                in.close();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n        }\\n    }\\n}", "target": "156", "substitutes": {"REGIX_COMMA": ["REGIX_OMG", "REGIX_FEMA", "REGIXPCOMLA", "REGIX_CZA", "REGIX_GREM", "REGIX_GREMA", "REGIX_CLA", "REGIX_GRELA", "REGIX_COMLA", "REGIX_FETA", "REGIX_GREZA", "REGIX_OMLA", "REGIX_COMTA", "REGIX_FELA", "REGIX_OMM", "REGIX_OMTA", "REGIX_COMM", "REGIX_OMZA", "REGIX_COMG", "REGIXPCOMMA", "REGIX_OMMA", "REGIX_CM", "REGIX_CMA", "REGIXPCOMTA", "REGIXPCOMG", "REGIX_FEG", "REGIX_COMZA"], "in": ["this", "ic", "isin", "rec", "buffer", "id", "login", "ins", "din", "ex", "inside", "url", "impl", "l", "a", "data", "is", "name", "lin", "con", "r", "io", "init", "win", "stream", "input", "source", "resource", "In", "f", "s", "user", "c", "ini", "inn", "image", "w", "nin", "e", "cin", "socket", "ssl", "gin", "read", "inner", "b", "err", "kin", "again", "reader", "connection", "log", "bin", "readable", "as", "inc", "IN", "out", "thin"], "wide": ["all", "hi", "wp", "layout", "who", "live", "id", "regular", "wal", "wy", "lon", "route", "name", "ng", "ws", "piece", "both", "win", "week", "channel", "length", "lane", "loc", "width", "Wide", "winner", "broad", "side", "index", "w", "recent", "large", "wh", "full", "coord", "ww", "global", "raw", "small", "dim", " wider", "nil", "tight", "wa", "gain", "day", "standard", "wall", "nine", "level", "lvl", "local", "range", "wl"], "num": ["nn", "um", "mom", "union", "im", "unit", "Num", "ni", "mon", "u", "id", "ani", "nu", "multi", "om", "na", "nam", "uni", "con", "nm", "init", "un", "nr", "end", "gen", "inn", "ui", "index", "umi", "np", "du", "month", "ul", "nom", "n", "dim", "nb", "current", "norm", "no", "mn", "nine", "many", "non", "number", "inc", "NUM", "en", "mult"], "lot": ["live", "val", "size", "split", "l", "piece", "win", "spot", "format", "col", "pl", "quote", "set", "hot", "limit", "position", "bin", "tick", "slot", "nt", "poll", "p", "bug", "project", "thing", "line", "but", "contract", "list", "large", "like", "base", "pick", "pos", "parse", "not", "la", "share", "unit", "patch", "it", "queue", "po", "kids", "part", "lib", "pid", "lit", "cycle", "place", "trial", "game", "hit", "act", "cat", "offset", "lat", "just", "table", "entry", "start", "loc", "lc", "league", "item", "bit", "zone", "lo", "sett", "pit", "year", "job", "lock", "range", "plot", "boot"], "i": ["bi", "hi", "pi", "ori", "ni", "it", "u", "id", "qi", "xi", "ji", "v", "si", "l", "is", "ri", "start", "io", "init", "info", "f", "ci", "ui", "ini", "index", "eni", "phi", "x", "uri", "ip", "e", "di", "I", "ie", "ai", "gi", "d", "mi", "ii", "zi", "li", "oi", "ti", "fi"], "j": ["jj", "jc", "p", "it", "u", "J", "ji", "xi", "v", "jp", "l", "ij", "z", "end", "aj", "f", "br", "c", "ui", "key", "x", "e", "jet", "ja", "uj", "q", "o", "d", "n", "g", "b", "ii", "li", "js", "k", "y", "jl", "jo"], "changePosition": [" changeposition", " changeLine", "switchPoint", "switchLine", "patchposition", "changesPosition", "changeposition", "matchPosition", "changesLocation", "changePoint", "changePos", "matchposition", "changeLocation", "matchLocation", "patchPosition", " changeLocation", "errorposition", "ChangePosition", "changeLine", "errorPosition", "ChangeLine", "changeRange", " changePoint", "changesPos", "switchPosition", "errorPoint", "ChangePos", "changesLine", "errorLine", "switchposition", "matchRange", " changeRange", "patchRange", " changePos", "ChangeLocation", "patchLocation"], "left": ["all", "self", "cl", "this", "second", "low", "size", "id", "one", "less", "fail", "le", "line", "l", "data", "old", "el", "center", "diff", "both", "row", "nl", "len", "Left", "own", "length", "lower", "last", "width", "loc", "down", "lo", "base", "full", "label", "two", "min", "code", "inner", "plus", "small", "li", "current", "pos", "from", "quick", "level", "ell", "bottom", "local", "front"], "right": ["head", "this", "third", "p", "and", "back", "one", "id", "wrong", "Right", "res", "r", "both", "rh", "through", "row", "end", "length", "ax", "w", "x", "rad", "three", "red", "max", "inner", "rest", "plus", "prev", "rank", "result", "rights", "k", "reverse", "art", "rc", "rew", "off", "th"], "temp": ["tmp", "wait", "ic", "api", "parent", "offset", "test", "size", "emp", "tc", "ex", "pre", "extra", "mini", "partial", "Temp", "source", " temporary", "alt", "tem", "c", "holder", "base", "ip", "cut", "pt", "raw", "shift", "limit", "current", "flat", "frac", "form", "clean", "porary", "wrap", "flow", "needed", "cache", "fake", "sol"], "answer": ["offset", "empty", "option", "prefix", "size", "back", "archive", "choice", "next", "offer", "edit", "page", "data", "question", "argument", "partial", "entry", " result", "event", "Answer", " answers", "length", "ticket", "air", "winner", "reply", "format", "q", "grade", "result", "object", "response", "place", "trial", "ell", "word", "address", "exit", "area", "number", "fix", "random", "array", "query"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int K = s.nextInt();\\n        int gcd = 0;\\n\\n        for (int i = 1; i <= K; i++) {\\n            for (int j = 1; j <= K; j++) {\\n                for (int k = 1; k <= K; k++) {\\n                    gcd += gcd(gcd(j, k), i);\\n                }\\n            }\\n        }\\n\\n        System.out.println(gcd);\\n        s.close();\\n    }\\n\\n    public static int gcd(int p, int q) {\\n        if (p % q == 0) {\\n            return q;\\n        }\\n        return gcd(q, p % q);\\n    }\\n}", "target": "6", "substitutes": {"s": ["S", "ts", "features", "ins", "ks", "ss", "rs", "v", "si", "strings", "l", "qs", "is", "es", "ls", "r", "fs", "ws", "utils", "ps", "f", "south", "os", "c", "ms", "session", "m", "or", "settings", "ops", "e", "ssl", "ses", "o", "abs", "d", "n", "g", "gs", "b", "sets", "ns", "sys", "se", "services", "js", "sb", "storage", "stats", "in", "ans", "parser", "out"], "K": ["S", "Ku", "C", "ID", "J", "N", "M", "Power", "U", "KB", "Y", "NK", "F", "Q", "P", "HK", "Sk", "T", "I", "Mask", "Kent", "PK", "L", "Max", "B", "V", "D", "H", "Z", "KI", "O", "G", "KE", "KS", "SK", "E", "X"], "gcd": ["agdc", " gcod", " gcr", "gcr", "gbcp", "igCD", "ggdc", "gbmd", "igcm", "Gcd", "gcod", "ggcr", "gbcod", "gcm", "cdc", " gCD", "rgcod", "gvd", "gbcb", "ccm", "cmd", "gmd", "gbcd", "rgcp", "rgcm", "rgvd", "rgcr", "Gcr", " gvd", "igcb", "agvd", "ccd", "Gdc", "ggcm", "gbcm", " gmd", "ggcd", "agcr", " gcb", "igcd", "gdc", " gdc", "agcd", "gbdc", "agcp", "igdc", "igcod", "rgcd", " gcp", "gcb", "agcb", "gcp", "gbCD", "Gcm", " gcm", "gCD", "igcr"], "i": ["bi", "pi", "ni", "iu", "it", "u", "id", "qi", "ji", "xi", "v", "jp", "si", "ix", "l", "ik", "start", "io", "init", "z", "f", "ci", "ui", "ini", "key", "index", "x", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "li", "in", "y", "ki"], "j": ["jj", "jc", "oj", "it", "u", "J", "qi", "ch", "ji", "xi", "v", "jp", "si", "l", "ij", "is", "ik", "r", "z", "aj", "f", "ui", "key", "ak", "index", "x", "e", "ja", "ijk", "uj", "ie", "o", "jit", "n", "g", "b", "ii", "li", "js", "je", "y", "jl", "jo"], "k": ["ky", "sk", "mk", "ka", "u", "id", "ko", "ck", "ch", "ke", "ks", "km", "gh", "v", "kh", "kick", "kk", "ik", "z", "dk", "ok", "f", "ek", "c", "key", "ak", "ku", "kw", "ijk", "unk", "kn", "n", "g", "kin", "b", "kid", "kj", "uk", "y", "ki"], "p": ["pi", "pc", "u", "v", "jp", "l", "ap", "a", "point", "pre", "pg", "Q", "h", "z", "P", "ps", "cp", "pa", "f", "c", "pid", "pm", "m", "x", "pe", "np", "ip", "e", "per", "o", "d", "n", "g", "b", "tp", "pp", "y", "t", "bp"], "q": ["age", "count", "integer", "id", "u", "qt", "queue", "qi", "ch", "view", "v", "aq", "sh", "ix", "qs", "question", "point", "dq", "a", "qu", "Q", "z", "h", "P", "charge", "eq", "f", "c", "m", "w", "x", "quant", "sq", "max", "code", "d", "n", "g", "qa", "qq", "req", "quick", "pp", "y", "iq", "t", "pad", "bp", "query"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner scan = new Scanner(System.in);\\n    char alpha = scan.next().charAt(0);\\n    int code = (int)(alpha);\\n    if (65<=code && code<=90){\\n      System.out.println(\"A\");\\n    }else{\\n      System.out.println(\"a\");\\n    }\\n  }\\n}\\n", "target": "80", "substitutes": {"scan": ["nn", "all", "cat", "watch", "connect", "walk", "na", "gram", "ink", "serv", "server", "span", "run", "search", "fan", "sign", "con", "r", "car", "sc", "win", "row", "app", "gen", "chan", "check", "an", "ai", "read", "n", "sync", "stat", "se", "ner", "pass", "reader", "in", "parse", "Scan", "ans", "parser", "en", "out", "can", "ann", "query"], "alpha": ["offset", " Alpha", "alias", "pha", "sha", "auto", "average", "asc", "a", "data", "name", "cca", "aa", "A", "aci", "filter", "pointer", "star", "index", "lambda", "base", "Alpha", "ca", "abc", "ac", "alph", "qa", "angle", "amp", "beta", "scale", "type", "rc", "ASC", "address", "la", "area", "lla", "array"], "code": ["score", "count", "age", "go", "size", "buffer", "rate", "id", "one", "next", "line", "const", "cod", "value", "zip", "Code", "co", "info", "char", "length", "loc", "c", "order", "key", "index", "x", "codes", "acc", "e", "state", "ce", "grade", "result", "ca", "b", "angle", "no", "scale", "beta", "type", "rc", "number", "cc", "address", "range", "error", "xx"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\t\tfor(int i=1;;i++){\\n\t\t\t\tint n = scan.nextInt();\\n\t\t\t\tif(n != 0)\\n\t\t\t\t\tSystem.out.println(\"Case \" + i + \": \" + n);\\n\t\t\t\telse if(n == 0){\\n\t\t\t\t\tscan.close();\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t}\\n}", "target": "97", "substitutes": {"scan": ["nn", "all", "cat", "watch", "walk", "core", "slice", "na", "ser", "server", "run", "search", "l", "fan", "con", "sign", "store", "start", "sc", "iter", "sin", "row", "get", "app", "query", "gen", "filter", "feed", "check", "an", "x", "chan", "skip", "inner", "ignore", "se", "ner", "reader", "pin", "in", "parse", "Scan", "san", "read", "out", "can", "ann", "sync"], "i": ["counter", "bi", "pi", "ori", "ni", "count", "p", "slice", "u", "id", "qi", "xi", "v", "si", "mini", "name", "part", "start", "io", "z", "f", "ci", "ui", "c", "ini", "key", "index", "phi", "x", "ip", "e", "di", "I", "ai", "gi", "d", "ii", "zi", "li", "j", "oi", "in", "y", "ind", "t", "ti"], "n": ["nn", "none", "rn", "nc", "nt", "ni", "count", "p", "dn", "null", "u", "na", "nor", "num", "nd", "nu", "N", "v", "cn", "l", "sn", "ng", "r", "z", "nr", "len", "ny", "fn", "conn", "c", "ne", "x", "nin", "e", "o", "d", "ns", "b", "pn", "nb", "j", "k", "no", "not", "number", "y", "gn", "en"]}}
{"code": "import java.util.*;\\nimport java.lang.Math;\\n\\npublic class Main{\\n    \\n    \\n        \\n    public static void main(String[] args){\\n        Scanner sc=new Scanner(System.in);\\n        int t=sc.nextInt();\\n        int s=sc.nextInt();\\n        int result=0;\\n        result=t*s;\\n        System.out.println(result);\\n        \\n    }\\n}", "target": "35", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "com", "ch", "sec", "ss", "tc", " SC", "cur", "asc", "Sc", "SC", "ct", "cs", "bc", "sw", "src", "cv", "lc", "ci", "cer", "c", "sp", "system", "sq", "uc", "sr", "ca", "se", "ner", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "ec", "esc", "cus"], "t": ["total", "target", "ts", "nt", "count", "p", "test", "u", "v", "i", "out", "l", "a", "start", "z", "h", "temp", "f", "c", "at", "m", "x", "T", "pt", "ta", "o", "d", "n", "dt", "j", "pos", "tp", "in", "type", "y", "tt", "ant", "tf"], "s": ["groups", "S", "ts", "features", "sections", "p", "size", "u", "ss", "si", "i", "l", "es", "is", "seconds", "ls", "its", "ips", "ens", "cs", "results", "ps", "f", "ms", "c", "os", "tests", "states", "settings", "e", "sq", "ses", "d", "n", "ns", "b", "services", "sets", "tips", "als", "stats", "steps"], "result": ["complete", "score", "status", "parent", "total", "target", "expected", "test", "message", "si", "average", "res", "search", "data", "diff", "value", "error", "source", "results", "length", "instance", "report", "feature", "sum", "style", "acc", "Result", "success", "goal", "sr", "pass", "root", "su", "term", "response", "master", "ret", "trace", "number", "rc", "section", "spec", "match", "default"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String[] inputStr = sc.next().split(\"\");\\n        int result = 0;\\n        if(\"1\".equals(inputStr[0])){\\n            result++;\\n        }\\n        if(\"1\".equals(inputStr[1])){\\n            result++;\\n        }\\n        if(\"1\".equals(inputStr[2])){\\n            result++;\\n        }\\n\\n        System.out.println(result);\\n    }\\n}\\n", "target": "165", "substitutes": {"sc": ["cl", "sci", "nc", "sf", "scope", "pc", "class", "server", "sec", "ss", " SC", "sh", "search", "Sc", "SC", "bc", "cs", "sw", "src", "desc", "ci", "sl", "c", "cer", " scr", "sp", "str", "acc", "uc", "se", "ner", " Sc", "anc", "exec", "scan", "isc", "osc", "rc", "cc", "cr", "spec", "ec", "esc"], "inputStr": ["outputStr", "inputText", " inputstr", "formSt", " inputString", "inputString", "InputStr", "formStr", "formstr", "inputSt", "InputText", "formString", "InputString", "InputSt", " inputText", "inputLine", " inputLine", "InputLine", "Inputstr", "outputText", "outputstr", "inputstr", "outputLine", "outputString", "outputSt", " inputSt"], "result": ["counter", "score", "total", "function", "count", "test", "future", "division", "id", "num", "cup", "date", "res", "search", "use", "diff", "valid", "error", "row", "results", "event", "source", "length", "feature", "order", "key", "done", "true", "folder", "code", "Result", "success", "goal", "zero", "runner", "card", "err", "pass", "current", "ver", "ult", "found", "response", "step", "ret", "number", "section", "match", "front", "default"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int M = sc.nextInt();\\n    int[] K = new int[N];\\n    int[][] A = new int[N][M];\\n    int[] count = new int[M];\\n    int ans =0;\\n    for (int i=0; i<N; i++) {\\n      K[i] = sc.nextInt();\\n      for (int j=0; j<K[i]; j++) {\\n        A[i][j] = sc.nextInt();\\n      }\\n    }\\n    for (int i=1; i<=M; i++) {\\n      for (int j=0; j<N; j++) {\\n        for (int k=0; k<K[j]; k++) {\\n          if(A[j][k] == i) {\\n            count[i-1]++;\\n          }\\n        }\\n      }\\n    }\\n    for (int i=1; i<=M; i++) {\\n      if (count[i-1] == N) ans++;\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "169", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "na", "com", "ch", "tc", "ss", "sec", " SC", "cur", "asc", "Sc", "SC", "screen", "scl", "bc", "cs", "cv", "sw", "cor", "desc", "src", "lc", "loc", "c", "cer", " scr", "sp", "ec", "system", "sq", "uc", "soc", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "Scan", "osc", "rc", "cc", "cr", "cont", "sch", "squ", "out", "esc", "ctx", "cus", "sync"], "N": ["MN", "Len", "S", "Num", "AN", "No", "NA", "NL", "C", "Part", "J", "CN", " n", "Size", "Nat", "Y", "F", "Network", "NN", "Q", "P", "Na", "T", "I", "Ni", "NC", "L", "R", "n", "B", "NM", "NR", "Ne", "V", "Mo", "CNN", "NB", "ND", "D", "NT", "KN", "O", "NS", "Z", "Ns", "NE", "W", "E", "X"], "M": ["MN", "S", "MO", "MM", "DM", "Mi", "C", "J", "MC", "MU", "U", "Y", "MA", "F", "Q", "P", "MS", "MD", "m", "T", "I", "CM", "L", "R", "OM", "n", "B", "NM", "V", "Mo", "D", "H", "O", "Z", "G", "LM", "W", "E", "X"], "K": ["KK", "Mac", "S", "No", "Ku", "DK", "C", "IK", "J", "MK", "CC", "MC", "Power", "U", "Y", "KB", "Work", "F", "Q", "P", "Ch", "HK", "Key", "Sk", "T", "I", "KA", "Mask", "CP", "PK", "L", "Context", "V", "KR", "Ka", "D", "H", "Z", "O", "Kin", "KI", "G", "KE", "KN", "KS", "SK", "He", "W", "E", "X"], "A": ["AD", "S", "AS", "AR", "AM", "NA", "Count", "C", "An", "AA", "Average", "LA", "a", "U", "Y", "Array", "MA", "mA", "BA", "Q", "AP", "P", "Ma", "Na", "API", "KA", "I", "Advanced", "At", "alpha", "Alpha", "B", "Ar", "V", "AC", "Access", "Ka", "D", "O", "CA", "am", "array"], "count": ["counter", "offset", "cat", "p", "Count", "size", "age", "id", "num", "ch", "span", "add", "a", "part", "z", "len", "app", "length", "c", "sum", "weight", "m", "index", "depth", "list", "base", "process", "carry", "state", "max", "q", "code", "rank", "n", "limit", "only", "time", "child", "type", "number", "support", "cache"], "ans": ["ana", "S", "sk", "AN", "ars", "aned", "na", "errors", "ins", "aus", "ks", "span", "ss", "lan", "a", "es", "ions", "reads", "ls", "cs", "results", "types", "lines", "s", "ms", "os", "chan", "ants", "an", "ops", "cons", "ANS", "any", "ents", "ns", "n", "ats", "scan", "ids", "mean", "runs", "annot", "outs", "as", "ons", " scans", "amps", "rors", "can", "ann"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "anti", "si", "vol", "ix", "a", "mini", "is", "ij", "ik", "ri", "my", "start", "io", "init", "z", "info", "f", "ci", "ui", "ini", "key", "index", "m", "eni", "x", "phi", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "n", "ii", "b", "cli", "li", "oi", "yi", "in", "y", "ki", "ind", "ti", "fi"], "j": ["bi", "jj", "jc", "ni", "p", "oj", "it", "u", "J", "qi", "bj", "ji", "xi", "ch", "pr", "jp", "v", "ix", "l", "a", "ij", "fr", "ik", "r", "io", "z", "h", "aj", "f", "br", "ui", "key", "ak", "m", "w", "x", "e", "jet", "ja", "ijk", "uj", "ie", "q", "o", "d", "n", "ii", "b", "li", "ju", "js", "je", "obj", "job", "y", "jl", "jen", "jo"], "k": ["ky", "sk", "mk", "p", "kg", "ka", "it", "u", "id", "ko", "ck", "ch", "ke", "ks", "v", "kh", "kick", "l", "kk", "ik", "ph", "z", "ok", "f", "ek", "c", "key", "ak", "m", "w", "x", "kw", "kr", "q", "o", "kn", "n", "b", "kid", "uk", "y", "ki"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String args[]) {\\n        final Scanner lineScanner = new Scanner(System.in);\\n        final int A = lineScanner.nextInt();\\n        final int B = lineScanner.nextInt();\\n        final int needIndex = lineScanner.nextInt();\\n \\n        List<Integer> numList = new ArrayList<>();\\n        for (int i = 1; i <= A && i <= B; i++) {\\n            if (A % i == 0 && B % i == 0) {\\n                numList.add(i);\\n            }\\n        }\\n        Collections.sort(numList, Collections.reverseOrder());\\n        System.out.println(numList.get(needIndex - 1));\\n    }\\n}", "target": "134", "substitutes": {"lineScanner": ["lineScner", "lineSynger", "linescanriter", "lineScanline", "lineCorker", "linescanner", "linescanning", "lineGarmer", "lineScning", "lineCorver", "lescaner", " lineGarline", "lineGenerator", "inScanner", "lineGarner", "linescaner", "lineAnalyinner", "inScanator", "LineAnalyger", "lineScanator", "lineAnalyator", "LineScanger", "lescanver", "inAnalyner", " lineScanline", "lineGenerker", "lineParmer", "lineScanver", "lineParner", "lineGenerer", " lineGarner", "lineScer", "LineAnalyinner", "inScaner", "lineScanmer", "linescanmer", "lineAnalyker", "lineScanger", "lineGarline", "lineScanning", "lineScaninner", "lineScanriter", "linescaninner", "lescanner", "inAnalyator", "inScanker", "lineSynner", "leScanver", "lineScver", " lineGarmer", "lineAnalyriter", "lineParter", "LineAnalyriter", "linescanline", "lescanning", "lineSyninner", "lineCorer", "LineScaninner", "linescanver", "lineAnalyer", "lineCorator", "linescanger", "lineAnalyner", "lineAnalyger", "LineScanner", "lineScanker", "leScanning", "lineCorner", "leScanner", "lineScaner", " lineGarter", "leScaner", " lineScanter", "lineGenerner", "linescanter", "LineScanriter", "lineCorning", "lineSynriter", "LineAnalyner", "lineParline", " lineScanmer", "lineGarter", "inAnalyker", "lineScanter", "inAnalyer"], "A": ["AD", "AR", "NA", "C", "Ca", "N", "AA", "M", "LA", "Java", "a", "U", "Y", "Array", "Az", "MA", "F", "mA", "AP", "P", "SA", "PA", "EA", "AST", "Area", "Ma", "RA", "API", "I", "L", "Alpha", "Ar", "AC", "Index", "D", "H", "IA", "CA", "DATA", "DA", "AB", "X"], "B": ["EB", "BL", "Bs", "C", "SB", "J", "BF", "N", "M", "BI", "Bi", "U", "Y", "QB", "F", "WB", "UB", "Number", "BA", "P", "BB", "BC", "BS", "BR", "API", "I", "BU", "L", "R", "Ab", "b", "BE", "DB", "NB", "AB", "OB", "D", "GB", "H", "O", "G", "MB", "IB", "BER", "W", "E", "LB", "X"], "needIndex": ["NeedI", " needindex", "needOrder", " needI", "wantindex", "NeedIndex", "needPosition", "needI", "NeedOrder", "needNumber", "needsPosition", "Needindex", "needsIndex", "wantOrder", " needOrder", " needNumber", "NeedNumber", "wantPosition", "NeedPosition", "needsI", "needindex", " needPosition", "wantIndex", "needsNumber"], "numList": ["unitlist", "numberL", "numLIST", "splitL", "numberArray", "numberlist", "splitLIST", "numberCode", "splitList", " numLine", " numLIST", " numGroup", "numL", "sumList", "numberSet", "NumL", "sumCode", "sumL", "unitList", " numlist", "numberGroup", " numL", "numSet", "numLine", "numlist", "sumLine", "NumArray", "splitSet", " numArray", "numArray", "numCode", "NumList", " numSet", "unitL", "NumSet", "numberLine", " numCode", "numGroup", "numberList", "numberLIST", "unitGroup"], "i": ["bi", "hi", "api", "pi", "ori", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "ji", "v", "si", "ix", "a", "data", "is", "ri", "start", "init", "io", "info", "abi", "f", "lc", "ci", "ui", "c", "ini", "index", "phi", "x", "mu", "uri", "adi", "e", "ip", "di", "I", "ie", "ai", "q", "o", "gi", "d", "ii", "b", "zi", "err", "li", "j", "js", "oi", "yi", "in", "chi", "y", "ti", "fi"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    Scanner sc = new Scanner(System.in);\\n\\n    PrintWriter out = new PrintWriter(System.out);\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    void run() {\\n\\n        String s = sc.next();\\n        char[] arr = s.toCharArray();\\n\\n        for (int i=0; i<s.length()/2; i++) {\\n            if (arr[i]!=arr[s.length()-1-i]) {\\n                out.print(\"No\");\\n                out.flush();\\n                return;\\n            }\\n        }\\n\\n        for (int i=0; i<s.length()/2-1; i++) {\\n            if (arr[i]!=arr[(s.length()/2)-1-i]) {\\n                out.print(\"No\");\\n                out.flush();\\n                return;\\n            }\\n     \\n        }\\n\\n        out.print(\"Yes\");\\n        out.flush();\\n    }\\n\\n}\\n", "target": "123", "substitutes": {"sc": ["cl", "sche", "mc", "nc", "sci", "scope", "pc", "ch", "sec", "ss", " SC", "si", "sub", "asc", "sh", "Sc", "SC", "screen", "cs", "bc", "sw", "ci", "c", "cer", "sp", "acc", "system", "uc", "sys", "se", "sem", " Sc", "anc", "scan", "isc", "osc", "rc", "cc", "cr", "scene", "spec", "esc", "ctx", "cus"], "out": ["buffer", "ext", "ou", "r", "ask", "exp", "co", "app", "key", "check", "output", "w", "Out", "o", "inner", "cli", "flush", "exec", "connection", "bin", "group", "inc", "doc", "copy", "error", "post", "query", "all", "call", "client", "p", "line", "name", "cmd", "io", "temp", "input", "conn", "user", "warning", "list", "base", "str", "again", "write", "up", "no", "file", "off", "prefix", "and", "pool", "extra", "png", "point", "part", "gen", "x", "process", "full", "writer", "raw", "comment", "with", "b", "err", "pass", "in", "log", "word", "bar", "cache", "sync", "parent", "null", "ex", "page", "source", "outer", "c", "arg", "OUT", "gin", "outs", "lock", "boot"], "s": ["S", "p", "u", "ins", "ss", "rs", "v", "si", "strings", "l", "a", "data", "is", "sv", "es", "r", "ws", "fs", "ls", "source", "h", "cs", "src", "bs", "f", "vs", "sl", "c", "states", "os", "your", "ds", "m", "str", "e", "string", "ses", "abs", "o", "d", "n", "ns", "gs", "b", "services", "sets", "sys", "sym", "g", "su", "sb", "xs", "in", "ans", "as", "y", "spec", "t", "array"], "arr": ["enc", "arc", "vec", "ars", "p", "val", "arm", "adv", "ch", "par", "v", "ar", "a", "data", "db", "Array", "fr", "r", "part", "el", "adr", "aa", "attr", "app", "char", "f", "br", "air", "dr", "c", "order", "arg", "x", "list", "var", "img", "str", "arch", "b", "err", "ray", "abc", "rr", "Ar", "ras", "aaa", "gr", "att", "av", "war", "ab", "array", "ann", "coll"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "one", "multi", "qi", "slice", "xi", "ji", "v", "si", "ix", "l", "data", "mini", "ri", "io", "init", "z", "info", "abi", "f", "ci", "vi", "ui", "ini", "c", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "inner", "ii", "zi", "b", "li", "j", "oi", "yi", "in", "y", "ti", "fi"]}}
{"code": "import java.io.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args)throws IOException{\\n\t\t\\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str=br.readLine();\\n\t\t\\n\t\tString[] text=str.split(\" \");\\n\t\tint a=Integer.parseInt(text[0]);\\n\t\tString b=text[1];\\n\t\tint c=Integer.parseInt(text[2]);\\n\t\t\\n\t\twhile (b.equals(\"?\") == false){\\n\t\t\t\tif(b.equals(\"+\")){\\n\t\t\t\tSystem.out.println(a+c);\\n\t\t\t}else if(b.equals(\"-\")){\\n\t\t\t\tSystem.out.println(a-c);\\n\t\t\t}else if(b.equals(\"*\")){\\n\t\t\t\tSystem.out.println(a*c);\\n\t\t\t}else if(b.equals(\"/\")){\\n\t\t\t\tSystem.out.println(a/c);\\n\t\t\t}\\n\t\t\tstr=br.readLine();\\n\t\t\ttext=str.split(\" \");\\n\t\t\ta=Integer.parseInt(text[0]);\\n\t\t\tb=text[1];\\n\t\t\tc=Integer.parseInt(text[2]);\\n\t\t}\\n\t}\\n}", "target": "139", "substitutes": {"br": ["bl", "ber", "wr", "hr", "rb", "browser", "tr", "arr", "res", "jar", "lr", "cb", "fr", "ctr", "bf", "r", "bh", "yr", "io", "bridge", "bc", "stream", "ler", "dr", "er", "orb", "mr", "handle", "BR", "sp", "her", "bro", "HR", "img", "per", "Br", "sr", "err", "gr", "ger", "ner", "obj", "reader", "cr", "bar", "out"], "str": ["div", "p", "it", "u", "ch", "tr", "v", "arr", "ext", "cur", "url", "line", "STR", "l", "data", "is", "fr", "ctr", "r", "block", "iter", "source", "input", "char", "f", "er", "sl", "s", "dr", "sp", "st", "string", "raw", "stri", "code", "Str", "inner", "n", "prev", "result", "sr", "err", "gr", "pass", "reader", "obj", "form", "in", "doc", "read", "out"], "text": ["font", "pattern", "ut", "unit", "function", "trans", "nt", "test", "class", "id", "next", "select", "service", "split", "TEXT", "ext", "path", "url", "search", "data", "name", "entry", "start", "value", "source", "vert", "info", "desc", "input", "iter", "event", "char", "letter", "image", "contract", "key", "filter", "format", "output", "list", "config", "string", "left", "code", "oct", "content", "context", "element", "object", "iv", "dest", "pass", "Text", "term", "form", "step", "thread", "not", "txt", "type", "seed", "struct", "word", "number", "off", "section", "post", "act"], "a": ["ana", "aw", "api", "anta", "p", "ia", "na", "u", "ad", "za", "access", "auto", "ba", "mA", "aa", "A", "ha", "aux", "oa", "pa", "au", "ga", "an", "ata", "w", "x", "sa", "ada", "ea", "active", "aka", "ai", "alpha", "ca", "ac", "wa", "aaa", "qa", "sta", "ama", "fa", "y", "la", "asa", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["bi", "fb", "bl", "api", "ub", "p", "mb", "u", "http", "pb", "abb", "rb", "v", "ba", "i", "url", "l", "db", "cb", "ib", "part", "bis", "bf", "home", "be", "bh", "block", "h", "bc", "lb", "bs", "f", "bas", "orb", "lib", "eb", "s", "base", "verb", "e", "o", "d", "n", "g", "B", "abc", "object", "nb", "body", "bg", "sb", "bb", "xb", "bd", "bot", "y", "wb", "ab", "emb", "bar", "ob", "bp"], "c": ["nc", "arc", "oc", "p", "u", "C", "ch", "sec", "v", "i", "l", "cu", "cb", "ct", "sc", "z", "h", "cs", "bc", "cp", "f", "lc", "ci", "dc", "cm", "w", "x", "e", "ec", "uc", "ce", "cf", "o", "code", "d", "q", "n", "g", "ca", "ac", "cd", "cc", "y", "cache", "cy", "t", "esc", "unc"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Main main = new Main();\\n    main.solve();\\n    main.show();\\n  }\\n\\n  List<Deque<Integer>> a;\\n  int ans;\\n  int turn = 0;\\n  boolean win = false;\\n  static final int A = 0;\\n  static final int B = 1;\\n  static final int C = 2;\\n  static final int N = 3;\\n\\n  public Main() {\\n    Scanner sc = new Scanner(System.in);\\n    try {\\n      a = new ArrayList<Deque<Integer>>();\\n      a.add(read(sc));\\n      a.add(read(sc));\\n      a.add(read(sc));\\n    } finally {\\n      sc.close();\\n    }\\n  }\\n\\n  private static Deque<Integer> read(Scanner sc) {\\n    Deque<Integer> ans = new ArrayDeque<Integer>();\\n    String s = sc.next();\\n    int n = s.length();\\n    for (int i = 0; i < n; i++) {\\n      if (s.charAt(i) == 'a' ) ans.addLast(A);\\n      if (s.charAt(i) == 'b' ) ans.addLast(B);\\n      if (s.charAt(i) == 'c' ) ans.addLast(C);\\n    }\\n    return ans;\\n  }\\n  \\n  void solve() {\\n    while (!win) play();\\n  }\\n\\n  void play() {\\n    if (a.get(turn).size() == 0) {\\n      win = true;\\n      ans = turn;\\n      return;\\n    }\\n    turn = a.get(turn).pollFirst();\\n  }\\n\\n  void show() {\\n    if (ans == A) System.out.println(\"A\");\\n    if (ans == B) System.out.println(\"B\");\\n    if (ans == C) System.out.println(\"C\");\\n  }\\n}\\n", "target": "11", "substitutes": {"a": ["ams", "aw", "ars", "window", "p", "ia", "now", "na", "ad", "auto", "ba", "ar", "ap", "ao", "mA", "aa", "aj", "app", "pa", "ora", "au", "c", "ga", "ants", "an", "ata", "w", "sa", "ae", "ea", "e", "alpha", "o", "ca", "b", "ac", "wa", "as", "la", "area", "ab", "da", "y", "ma", "parser", "am", "va", "array", "ann", "audio"], "ans": ["ace", "ars", "vers", "ads", "ins", "ks", "lan", "ations", "cs", "results", "lines", "os", "ds", "cycles", "cons", "ANS", "ras", "_", "as", "ons", "amps", "cus", "p", "ia", "ad", "plays", "acs", "asts", "es", "ps", "plan", "an", "sa", "aid", "anc", "ones", "la", "anners", "ays", "ann", "ams", "AN", "anas", "na", "ani", "ases", "span", "anon", "actions", "atan", "oa", "nas", "x", "ils", "ai", "ents", "ats", "xs", "ant", "can", "ana", "aos", "sk", "aned", "ss", "aces", "ions", "ls", "ens", "ians", "au", "cas", "ros", "chan", "ants", "arts", "leans", "ns", "scan", "outs", "annot"], "turn": ["round", "div", "call", "draw", "connect", "sk", "count", "patch", "id", "ch", "vel", "wind", "version", "circ", "sh", "sign", "ask", "start", "timeout", "roll", "input", "row", "channel", "length", "event", "man", "session", "order", "won", "chan", "index", "ak", "output", "an", "depth", "config", "w", "socket", "active", "token", "month", "urn", "oct", "act", "shift", "rank", "ver", "year", "cycle", "pass", "time", "pos", "clock", "step", "number", "address", "ash", "shape", "vo", "Turn", "pull", "turned", "can", "ann", "anch"], "A": ["Apple", "S", "AS", "AN", "AR", "AM", "NA", "AY", "An", "AA", "M", "LA", "As", "U", "Y", "Array", "BA", "mA", "AP", "This", "P", "SA", "AST", "API", "T", "I", "App", "L", "HA", "Alpha", "Ar", "V", "AC", "D", "IA", "O", "AI", "CA", "The", "AH", "AB", "X"], "B": ["BL", "Bs", "BF", "M", "BI", "U", "Y", "QB", "PB", "X", "F", "WB", "BA", "Q", "P", "BC", "BB", "BS", "T", "I", "L", "R", "b", "Ub", "BE", "V", "NB", "AB", "OB", "D", "Bu", "H", "O", "G", "Blue", "W", "E", "LB", "DB"], "C": ["CU", "S", "EC", "Count", "CC", "VC", "U", "Y", "SC", "F", "CT", "Q", "CL", "P", "BC", "c", "Ch", "T", "I", "NC", "L", "R", "GC", "V", "K", "DC", "AC", "D", "Cow", "H", "O", "Z", "CA", "G", "W", "E", "X"], "N": ["S", "M", "Size", "U", "Y", "F", "Q", "P", "T", "I", "NC", "L", "R", "V", "K", "D", "H", "O", "Z", "Ns", "G", "W", "E"], "sc": ["cl", "sche", "nc", "sci", "scope", "pc", "ch", "server", "ss", "sec", "si", "sub", "asc", "search", "sh", "out", "l", "Sc", "SC", "screen", "r", "can", "syn", "stream", "cs", "bc", "sw", "src", "lc", "ci", "dc", "c", "cer", "scrib", " scr", "or", "sp", "system", "uc", "soc", "sr", "ca", "cli", "sem", "se", "ner", "reader", "anc", "scan", "osc", "rc", "cr", "cms", "cont", "sch", "parser", "scene", "cam", "ec", "esc", "ctx", "cus", "sync"], "s": ["S", "ts", "p", "u", "http", "ins", "ss", "rs", "v", "si", "strings", "l", "qs", "bis", "is", "sv", "es", "ls", "ws", "r", "fs", "sin", "h", "info", "input", "f", "lines", "os", "c", "ms", "ds", "words", "m", "w", "ops", "e", "str", "string", "ses", "o", "abs", "plus", "ns", "g", "b", "gs", "stat", "sys", "su", "js", "sb", "stats", "in", "comments", "as", "spec", "sync"], "n": ["nn", "nc", "nt", "ni", "p", "dn", "u", "num", "nu", "ln", "span", "l", "sn", "r", "z", "h", "len", "f", "conn", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "nb", "ner", "j", "k", "mn", "en"], "i": ["bi", "pi", "ori", "ni", "iu", "p", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "is", "name", "ri", "io", "info", "z", "f", "ci", "ui", "c", "ini", "key", "index", "eni", "phi", "x", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "inner", "gi", "ii", "b", "zi", "li", "j", "oi", "chi", "y", "ti"], "win": ["all", "wait", "pen", "draw", "connect", "spin", "login", "ad", "run", "wine", "wan", "game", "screen", "con", "sign", "vine", "init", "close", "get", "gen", "winner", "inn", "won", "wave", " Win", "build", "w", "x", "an", "like", "WIN", "han", "max", "ain", "kin", "Win", "cycle", "open", "wa", "scan", "in", "parse", "clean", "bin", "vin", "lock", "warn", "play", "cache", "act", "can", "ann", "sync"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int[] list = new int[26];\\n        int i, c;\\n        String str;\\n        \\n        //list = null;\\n        \\n        while(sc.hasNext()) {\\n        \tstr = sc.nextLine();\\n        \t\\n        \tfor(i = 0; i < str.length(); i++) {\\n        \t\tc = str.toLowerCase().charAt(i) - 97;\\n        \t\tif(c >= 0) list[c]++;\\n        \t}\\n        }\\n        \\n        for(i = 0; i < 26; i++) {\\n        \tSystem.out.printf(\"%s : %d\\n\", (char)(i + 97), list[i]);\\n        }\\n    }\\n}\\n", "target": "242", "substitutes": {"sc": ["cl", "nc", "inst", " ser", "gram", "ch", "ss", " SC", " rc", "Sc", "SC", "bc", "lc", " scr", " pars", "sp", "sq", "sys", "se", " Sc", "sb", "scan", "parse", "rc", " src", "cr", "out", "ann"], "list": ["cl", "conf", "cat", "count", "null", "ch", "v", "path", "l", "is", "con", "entry", "len", "lc", "index", "config", "base", "I", "en", "code", "L", "set", "j", "parse", "type", "batch", "array"], "i": ["pi", "count", "p", "iu", "it", "u", "v", "si", "is", "z", "f", "ci", "key", "index", "m", "x", "e", "I", "ai", "d", "n", "ii", "b", "j", "k", "in", "t"], "c": ["cat", "nc", "count", "p", "pc", "C", "v", "l", "cu", "con", "h", "cs", "cp", "f", "lc", "ci", "dc", "loc", "m", "x", "e", "uc", "n", "k", "rc", "cc", "t", "xc"], "str": ["cl", "enc", "next", "tr", "arr", "strings", "STR", "data", "name", " substr", "r", "char", "br", "lc", "st", "text", "string", "Str", "err", "obj", " Str", "txt", " arr", "out"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic void main(Scanner sc) {\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\\n\t\tSystem.out.println(a * b);\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tnew Main().main(sc);\\n\t}\\n}\\n", "target": "35", "substitutes": {"sc": ["this", "cl", "enc", "mc", "sci", "nc", "scope", "sf", "pc", "server", "sec", "ss", "ch", "cur", "sh", "fc", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "gb", "lc", "ci", "c", "cer", "contract", "sp", "config", "acc", "system", "sq", "uc", "soc", "ca", "se", "anc", "sb", "exec", "scan", "isc", "osc", "rc", "cc", "cr", "spec", "ec", "esc", "ctx", "cus", "sync"], "a": ["count", "p", "id", "i", "ba", "l", "aa", "h", "A", "aux", "oa", "pa", "f", "au", "c", "ga", "x", "sa", "ae", "ea", "e", "alpha", "d", "n", "ac", "aaa", "fa", "as", "la", "y", "area", "ab", "da", "va", "aj"], "b": ["fb", "count", "p", "mb", "pb", "rb", "v", "ba", "i", "l", "db", "cb", "r", "z", "h", "lb", "bs", "f", "eb", "c", "w", "x", "base", "e", "o", "d", "n", "B", "abc", "k", "sb", "bb", "beta", "bot", "y", "wb", "ab", "ob"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int m = sc.nextInt();\\n\\n    int[] a = new int[m];\\n    int[] b = new int[m];\\n\\n    for (int i = 0; i < m; i++) {\\n      a[i] = sc.nextInt();\\n      b[i] = sc.nextInt();\\n    }\\n\\n    int[] c = new int[n];\\n\\n    for (int i = 0; i < n; i++) {\\n      for (int j = 0; j < m; j++) {\\n        if (a[j] == i+1 || b[j] == i+1) {\\n          c[i]++;\\n        }\\n      }\\n    }\\n\\n    for (int i = 0; i < n; i++) {\\n      System.out.println(c[i]);\\n    }\\n\\n  }\\n\\n}\\n", "target": "57", "substitutes": {"sc": ["cl", "sche", "mc", "nc", "sci", "sf", "scope", "pc", "core", "ser", "com", "ch", "sec", "ss", "tc", " SC", "sub", "asc", "sh", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "lc", "ci", "s", "loc", "dc", " scr", "sp", "sq", "system", "uc", "soc", "sr", "cli", "cle", "sem", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "ec", "esc", "ctx", "cus", "sync"], "n": ["nn", "nc", "nt", "p", "dn", "u", "num", "N", "M", "v", "l", "nm", "z", "h", "f", "s", "ne", "w", "x", "an", "e", "o", "d", "g", "ns", "network", "net", "k", "in", "mn", "y", "en", "t"], "m": ["mc", "p", "rm", "mon", "u", "num", "N", "M", "v", "l", "mm", "r", "nm", "h", "z", "f", "cm", "man", "ms", "w", "x", "an", "e", "o", "md", "d", "mi", "g", "ii", "dim", "k", "hm", "in", "mn", "y", "am", "t"], "a": ["api", "p", "ia", "u", "na", "ba", "ar", "r", "ao", "aa", "A", "f", "au", "s", "an", "x", "at", "sa", "ae", "e", "ai", "alpha", "o", "d", "af", "array", "ac", "aaa", "in", "ama", "as", "la", "asa", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["fb", "bi", "p", "mb", "u", "abb", "belt", "rb", "v", "ba", "l", "db", "cb", "r", "bf", "aa", "be", "bridge", "lb", "h", "bc", "bs", "f", "bas", "s", "x", "e", "bur", "o", "d", "g", "B", "k", "sb", "bb", "bd", "y", "ab", "ob"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "qi", "xi", "ji", "v", "jp", "si", "ix", "l", "mini", "ij", "is", "ri", "ik", "start", "io", "init", "info", "z", "f", "ci", "vi", "ui", "ini", "eni", "x", "phi", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "cli", "ii", "zi", "li", "isi", "oi", "yi", "in", "y", "ki", "fi"], "c": ["cat", "count", "p", "pc", "C", "u", "ch", "v", "l", "cu", "con", "r", "z", "cs", "bc", "co", "f", "cm", "ci", "s", "dc", "lc", "x", "cy", "e", "ec", "col", "uc", "cf", "ce", "o", "d", "ca", "ac", "rc", "cc", "cr", "y", "out", "xc"], "j": ["api", "jj", "jc", "ni", "p", "it", "u", "id", "J", "ji", "xi", "v", "jp", "si", "ix", "l", "ij", "ik", "r", "z", "aj", "f", "x", "e", "ja", "ie", "q", "o", "d", "g", "ii", "li", "je", "k", "js", "y", "jl", "ind", "jo"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tfloat sum = 0;\\n\t\tfor(int i=1; i<=N; i++) {\\n\t\t\tsum+=1/(sc.nextFloat());\\n\t\t}\\n\t\tSystem.out.println(1/sum);\\n\t}\\n}\t\\n", "target": "120", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "class", "ser", "ch", "tc", "ss", "server", " SC", "cur", "asc", "sh", "l", "search", "Sc", "SC", "bc", "cs", "sw", "app", "src", "lc", "ci", "instance", "sl", "c", "cer", "sp", "sq", "uc", "g", "sr", "ca", "se", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "N": ["S", "Num", "NA", "Count", "NL", "C", "M", " n", "Size", "F", "NN", "Q", "P", "T", "I", "NC", "L", "R", "Sum", "n", "B", "NM", "Ne", "V", "K", "NB", "D", "NT", "H", "O", "NS", "Z", "Ns", "NI", "E", "X"], "sum": ["all", "um", "total", "offset", "count", "val", "size", "u", "cost", "gram", "num", "fail", "si", "average", "loss", "vol", "sh", "a", "ass", "ct", "fill", "sign", "use", "diff", "start", "spread", "f", "s", "index", "weight", "us", "max", "min", "alpha", "miss", "ul", "plus", "Sum", "n", "se", "fat", "net", "frac", "up", "parse", "scale", "mean", "av", "out"], "i": ["bi", "hi", "pi", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "a", "ri", "r", "z", "h", "info", "abi", "f", "ci", "c", "ui", "ini", "index", "x", "mu", "e", "ip", "di", "I", "min", "ai", "o", "gi", "d", "mi", "n", "ii", "b", "li", "j", "k", "oi", "in", "chi", "ti", "fi"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n    public static String Y = \"Yes\";\\n    public static String N = \"No\";\\n    public static long MOD = (long) (Math.pow(10, 9) + 7);\\n    public static Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n\\n        int n = ni();\\n        int[] ar = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            ar[i] = ni();\\n        }\\n        Arrays.sort(ar);\\n        int sum = 0;\\n        int sum1 = 0;\\n        for (int i = n - 1; i >= 0; i -= 2) {\\n            sum += ar[i];\\n        }\\n        for (int i = n - 2; i >= 0; i -= 2) {\\n            sum1 += ar[i];\\n        }\\n        int ans = sum - sum1;\\n\\n        out(ans);\\n    }\\n\\n    /*\\n     * \u4ee5\u4e0b\u30e1\u30bd\u30c3\u30c9\u96c6\\n     */\\n\\n    public static void permutation(String q, String ans) {\\n\\n        // Base Case\\n        if (q.length() <= 1) {\\n            System.out.println(ans + q);\\n        }\\n        // General Case\\n        else {\\n            for (int i = 0; i < q.length(); i++) {\\n                permutation(q.substring(0, i) + q.substring(i + 1), ans + q.charAt(i));\\n            }\\n        }\\n    }\\n\\n    static char[][] same(char[][] c, int h, int w) {\\n\\n        char[][] a = new char[h][w];\\n        for (int i = 0; i < h; i++) {\\n            for (int j = 0; j < w; j++) {\\n                a[i][j] = c[i][j];\\n            }\\n        }\\n        return a;\\n\\n    }\\n\\n    static int countkuro(char[][] c) {\\n\\n        int count = 0;\\n        for (char[] cc : c) {\\n            for (char ccc : cc) {\\n                if ('#' == ccc) {\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n\\n    static void debug() {\\n\\n        out(\"---\");\\n    }\\n\\n    static void debug(Object a) {\\n\\n        out(\"-------\");\\n        out(a);\\n        out(\"-------\");\\n    }\\n\\n    static int ketasuu(int n) {\\n\\n        String str = \"\" + n;\\n        return str.length();\\n    }\\n\\n    static int account(String str) {\\n\\n        String target = \"AC\";\\n        int count = 0;\\n        int len = str.length();\\n        for (int i = 0; i < len - 1; i++) {\\n            if (target.equals(str.substring(i, i + target.length()))) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    static int ni() {\\n\\n        return sc.nextInt();\\n    }\\n\\n    static long nl() {\\n\\n        return sc.nextLong();\\n    }\\n\\n    static double nd() {\\n\\n        return sc.nextDouble();\\n    }\\n\\n    static String n() {\\n\\n        return sc.next();\\n    }\\n\\n    static char[] nc() {\\n\\n        return sc.next().toCharArray();\\n    }\\n\\n    static int kaijo(int n) {\\n\\n        if (n == 0 || n == 1) {\\n            return 1;\\n        } else {\\n            return n * kaijo(n - 1);\\n        }\\n    }\\n\\n    static int fib(int n) {\\n\\n        return (n == 1 || n == 0) ? n : fib(n - 2) + fib(n - 1);\\n    }\\n\\n    static long lcm(long m, long n) {\\n\\n        return m * n / gcd(m, n);\\n    }\\n\\n    static int lcm(int m, int n) {\\n\\n        return m * n / gcd(m, n);\\n    }\\n\\n    static long gcd(long a, long b) {\\n\\n        return (b == 0) ? a : gcd(b, a % b);\\n    }\\n\\n    static int gcd(int a, int b) {\\n\\n        return (b == 0) ? a : gcd(b, a % b);\\n    }\\n\\n    static void out(Object obj) {\\n\\n        System.out.println(obj);\\n    }\\n\\n    static void outn(Object obj) {\\n\\n        System.out.print(obj);\\n    }\\n\\n    static double max(double d, double e) {\\n\\n        return Math.max(d, e);\\n    }\\n\\n    static long max(long a, long b) {\\n\\n        return Math.max(a, b);\\n    }\\n\\n    static long min(long d, long e) {\\n\\n        return Math.min(d, e);\\n    }\\n\\n    static int min(int a, int b) {\\n\\n        return Math.min(a, b);\\n    }\\n}\\n\\n\\nclass XY {\\n\\n    int h;\\n    int c;\\n\\n    XY(int h, int c) {\\n        this.h = h;\\n        this.c = c;\\n    }\\n}\\n", "target": "132", "substitutes": {"Y": ["S", "C", "J", "M", "U", "F", "Q", "P", "A", "Type", "T", "I", "L", "R", " y", "B", "V", "K", "YY", "D", "H", "Z", "O", "y", "G", "W", "E", "X"], "N": ["S", "No", "NA", "SN", "NL", "C", "J", "M", "U", "F", "NN", "Q", "P", "I", "L", "R", "V", "K", "NT", "O", "NS", "G", "W", "NI", "IN", "E", "X"], "MOD": [" R", " mod", " max", " rc", " z", " m", " dim", " mult", " C", " P", " w", " gn", " exp", " order", " p", " B", " norm", " weight", " Z", " r", " base", " M", " factor", " dd", " c", " scale", " gamma", " f", " sign", " bits"], "sc": [" sa", " ser", "ch", "ss", " cat", " SC", "si", " rc", "Sc", "SC", " res", " subp", "cs", "s", " sw", " scr", " pars", " us", "se", " Sc", " c", "scan", "in", "Scan", " cr", " sp", "out", "ann"], "n": ["nn", "nc", "nt", "ni", "count", "p", "u", "num", "span", "v", "l", "a", "sn", "r", "z", "h", "un", "len", "f", "s", "c", "ne", "m", "w", "x", " ni", "an", "e", "en", "o", "d", "ns", "b", "nb", "ner", "j", "net", "k", "in", "non", "Ns", "y", "t"], "ar": ["rar", "ir", "arc", "ars", "AR", "p", "arm", "par", "arin", "arr", "jar", "a", "el", "r", "al", "car", "dar", "are", "ear", "er", "air", "s", "order", "arg", "star", "at", "an", "var", "list", "or", "sa", "ra", "lar", "ai", "array", "err", "ray", "Ar", "ner", "har", "aro", "in", "ari", "art", "area", "far", "ara"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "ami", "slice", "u", "id", "multi", "qi", "ei", "xi", "ji", "v", "anti", "si", "ix", "a", "mini", "is", "ri", "r", "start", "io", "init", "info", "abi", "f", "ci", "vi", "asi", "ui", "ini", "eni", "phi", "x", "mu", "uri", "adi", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "cli", "isi", "li", "j", "oi", "yi", "in", "y", "my", "ti", "fi"], "sum": ["um", "total", "count", "size", "u", "cost", "na", "num", "gram", "summary", "si", "ass", "vol", "average", "add", "sam", "sign", "fill", "use", "mass", "spread", "sim", "len", "cal", "s", "c", "weight", "an", "index", "sav", "sa", "acc", "cum", "ram", "state", "min", "max", "alpha", "ul", "miss", "comment", "Sum", "pass", "fat", "su", "in", "scale", "mean", "inc", "area", "play", "am", "out", "mem"], "sum1": ["sum61", "sumone", "match1", "sort1", " sumone", "match3", "sortOne", "Sumone", "play61", "comment01", " sum3", "play01", "sumOne", "match2", "sum2", " sumup", "comment61", "um1", "sortup", "play2", "comment2", " sum61", "umOne", " sumOne", "sum3", "sumup", "umup", " sum01", "play1", "comment1", "Sum1", "matchone", "Sum2", " sum2", "Sum3", "sum01"], "ans": ["ana", "AN", "aned", "ars", "ia", "na", "ins", "An", "aus", "ks", "nan", "anon", "lan", " spans", "si", "sub", "vals", "a", "cs", "ians", "params", "nas", "s", "os", "ds", "plan", "chan", "ants", "ms", "an", "cons", "ANS", "ai", "Ann", "ents", "ns", "ras", "ats", "scan", "lang", "ids", "outs", "as", "san", "mean", "ons", " scans", "amps", "ays", "ann"], "q": ["ue", "p", "id", "qt", "u", "qi", "v", "sh", "ig", "qs", "dq", "r", "qu", "Q", "h", "f", "c", "m", "w", "sq", "ql", "Query", "g", "qa", "qq", "iq", "query"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        int x = Integer.parseInt(sc.next());\\n        int primeNum;\\n        while (true) {\\n            if (isPrimeNumber(x)) {\\n                primeNum = x;\\n                break;\\n            }\\n            x++;\\n        }\\n        out.println(primeNum);\\n        \\n        out.flush();\\n    }\\n  \\n    static boolean isPrimeNumber(int target) {\\n        int sqrt = (int)Math.sqrt(target);\\n        boolean result = true;\\n        for (int i = 2; i <= sqrt; i++) {\\n            if (target % i == 0) {\\n                result = false;\\n                break;\\n            }\\n        }\\n        return result;\\n    }\\n  \\n}", "target": "183", "substitutes": {"sc": ["cl", "mc", "nc", "sci", "scope", "pc", "ch", "ss", " SC", "sub", "asc", "sh", "Sc", "SC", "screen", "iss", "stream", "bc", "cs", "sw", "src", "desc", "cv", "lc", "ci", "c", "sp", "system", "sq", "uc", "soc", "ner", " Sc", "anc", "exec", "scan", "in", "osc", "rc", "cr", "sch", "esc", "cus"], "out": ["self", "this", "parent", "client", "buffer", "serv", "ch", "ex", "ext", "path", "pool", "extra", "png", "name", "screen", "exp", "io", "temp", "input", "gen", "conn", "report", "outer", "user", "sum", "arg", "output", "w", "OUT", "list", "str", "full", "writer", "string", "raw", "Out", "o", "inner", "cli", "err", "again", "write", "obj", "exec", "up", "flush", "in", "log", "bin", "file", "outs", "word", "inc", "copy", "cache", "error", "IN", "console", "window"], "x": ["dx", "p", "test", "xp", "xa", "id", "u", "num", "python", "xi", "ex", "v", "ext", "ix", "cross", "value", "z", "f", "width", "lex", "c", "key", "ax", "bit", "index", "m", "e", "xx", "xxx", "min", "d", "n", "b", "xt", "rex", "tx", "k", "xs", "xy", "number", "y", "rx", "px", "fx", "t", "ctx", "xc", "X"], "primeNum": [" primeNumber", "seedVal", "testVal", "seNum", "testNumber", "primeInt", "squareNumber", "PrimeNum", "testNum", " primeVal", "primeNumber", " primenum", "PrimeVal", "Primenum", "seNumber", "squareVal", "senum", "squareNum", "seednum", "seedNum", " primeInt", "PrimeNumber", "seVal", "PrimeInt", "primenum", "seedNumber", "testnum", "squareInt", "primeVal"], "target": ["direction", "total", "parent", "function", "nt", "expected", "p", "test", "size", "core", "null", "project", "num", "distance", "data", "Target", "source", "value", "src", "length", "resource", "width", "pointer", "weight", "base", "large", "string", "max", "grade", "goal", "arget", "object", "limit", "dest", "current", "top", "scale", "type", "number", "range", "match", "transform"], "sqrt": ["squrt", "sqr", "shRT", "integrent", "integr", "qrt", " sqr", "sqrent", " sqRT", "shr", "squnt", "shrt", "squr", "qRT", "qnt", "shnt", "squRT", "sqnt", " sqnt", "integrt", "qrent", "qr", " sqrent", "integRT", "sqRT"], "i": ["bi", "hi", "pi", "p", "u", "id", "multi", "qi", "ei", "xi", "v", "si", "ix", "l", "ri", "uli", "init", "info", "abi", "length", "f", "ci", "ui", "c", "ini", "phi", "mu", "uri", "ip", "di", "I", "ai", "gi", "d", "ii", "zi", "b", "li", "j", "oi", "in", "chi", "y", "t", "ti", "fi"], "result": ["score", "function", "func", "test", "future", "division", "truth", "cup", "ault", "res", "data", "product", "use", "continue", "mask", "valid", "value", "results", "winner", "instance", "feature", "sum", "or", "Result", "success", "goal", "comment", "runner", "ver", "err", "dest", "current", "ult", "term", "math", "found", "ret", "rc", "false", "range", "match", "default"]}}
{"code": "import java.util.Scanner;\\n    \\n    public class Main {\\n    \tpublic static void main(String[] args){\\n    \t\tScanner sc = new Scanner(System.in);\\n    \t\t// \u6574\u6570\u306e\u5165\u529b\\n    \t\tint a = sc.nextInt();\\n    \t\tint b = sc.nextInt();\\n    \t\tdouble c = sc.nextDouble();\\n    \t\tdouble d = sc.nextDouble();\\n    \t\tdouble kaku = 0;\\n    \t\tdouble answer = 0;\\n    \t\t\\n    \t\t\\n    \t\tc=30*c+0.5*d;\\n    \t\td=6*d;\\n    \t\tif(c>d) {\\n    \t\t\tkaku=c-d;\\n    \t\t}else {\\n    \t\t\tkaku=d-c;\\n    \t\t}\\n    \t\tkaku=Math.cos(Math.toRadians(kaku));\\n    \t\t\\n    \t\tanswer=a*a+b*b-2*a*b*kaku;\\n    \t\tSystem.out.println(Math.sqrt(answer));\\n    \t\t\\n    \t}\\n    }", "target": "86", "substitutes": {"sc": ["nc", " ser", "gram", "ss", " cat", " SC", " rc", "Sc", " cont", "SC", "bc", " sw", "c", " inst", " scr", " pars", " ans", " scanner", "se", " Sc", "sb", " app", "scan", "rc", " src", "cr", " arr", " sp"]}}
{"code": "/*\\nRoses are red\\nMemes are neat\\nAll my test cases time out\\nLmao yeet\\n*/\\nimport java.util.*;\\nimport java.io.*;\\n\\n   public class Main\\n   {\\n      public static void main(String args[]) throws Exception\\n      {\\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \\n         StringTokenizer st = new StringTokenizer(infile.readLine());\\n         int N = Integer.parseInt(st.nextToken());\\n         int[] arr = new int[N+1];\\n         st = new StringTokenizer(infile.readLine());\\n         for(int i=0; i <= N; i++)\\n            arr[i] = Integer.parseInt(st.nextToken());\\n         int[] brr = new int[N];\\n         st = new StringTokenizer(infile.readLine());\\n         for(int i=0; i < N; i++)\\n            brr[i] = Integer.parseInt(st.nextToken());\\n         long res = 0L;\\n         for(int i=0; i < N; i++)\\n         {\\n            int pow = brr[i];\\n            if(pow <= arr[i])\\n            {\\n               res += pow;\\n               arr[i] -= pow;\\n               brr[i] = 0;\\n            }\\n            else\\n            {\\n               res += arr[i];\\n               pow -= arr[i];\\n               arr[i] = 0;\\n               if(arr[i+1] >= pow)\\n               {\\n                  res += pow;\\n                  arr[i+1] -= pow;\\n               }\\n               else\\n               {\\n                  res += arr[i+1];\\n                  arr[i+1] = 0;\\n               }\\n            }\\n         }\\n         System.out.println(res);\\n      }\\n   }", "target": "159", "substitutes": {"infile": ["infiles", "incfiles", "Infile", "incfile", "INloader", "INfile", "incstream", "INstream", "infolder", "insstream", "inFile", "Inloader", "insfile", "instream", "insfolder", "incfolder", "insfiles", "inloader", "InFile", " infolder", " inloader", " inFile", "INFile", "Infiles", "INfiles", "Instream", " instream", " infiles"], "st": ["bl", "ut", "cl", "ste", "inst", "ust", "nt", "sth", "ST", "test", "ser", "nd", "ss", "sh", "ct", "sn", "std", "fr", "r", "sect", "start", "gest", "store", "part", "ft", "sw", "src", "sl", "s", "stress", "est", "sp", "sa", "str", "ist", "pt", "stri", "rest", "set", "ld", "b", "St", "stand", "se", "sb", "lt", "sta", "parse", "ast", "sts", "step", "rd", "sm", "ost", "stop", "tt", "th", "sc", "t"], "N": ["MN", "Len", "S", "Num", "nt", "No", "NA", "C", "J", "M", " n", "Size", "Y", "F", "Number", "Q", "NN", "P", "Na", "T", "I", "NC", "L", "R", "n", "B", "Ne", "V", "NB", "K", "D", "NT", "H", "Z", "NS", "O", "Ns", "NE", "W", "E", "X"], "arr": ["all", "rar", "enc", "cat", "ir", "arc", "nt", "ars", "p", "dict", "arm", "adv", "rep", "ch", "par", "rs", "pr", "ar", "asc", "pre", "data", "Array", "fr", "r", "dat", "yr", "adr", "aa", "part", "attr", "z", "row", "app", "aj", "dr", "br", "au", "air", "arg", "var", "list", "img", "x", "str", "acc", "arch", "n", "err", "dim", "Ar", "rr", "ray", "gr", "ras", "aaa", "att", "parse", "req", "ait", "av", "our", "inc", "war", "rt", "cache", "iq", "ind", "array", "ann", "coll"], "i": ["hi", "bi", "api", "pi", "ori", "ni", "iu", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "ji", "v", "anti", "si", "ix", "line", "mini", "data", "is", "ik", "ri", "r", "diff", "io", "init", "info", "abi", "f", "ci", "ui", "ini", "key", "index", "eni", "phi", "x", "mu", "uri", "adi", "ip", "e", "di", "I", "esi", "ie", "ai", "o", "gi", "mi", "n", "ii", "zi", "b", "cli", "li", "iv", "j", "oi", "inline", "yi", "chi", "y", "my", "ti", "fi"], "brr": ["grp", "drr", " brar", "brf", "crrt", "prc", "brp", " brp", "grrc", "forel", " brsr", "brar", "prrs", "crl", " brrs", "brrt", " brc", "crrr", "frar", "brc", "forerr", " brf", "brsr", "brl", "prr", "forer", "frrc", "brrc", "frrs", "prp", "grr", "frr", "drrr", "prrc", "drl", " brrc", "crr", "brrr", "prf", "grc", "grsr", "prar", "drrt", "prsr", "grar", "grf", "brrs", "forert"], "res": ["points", "breaks", "rec", "vec", "blocks", "features", "rez", "rus", "ours", "pres", "hes", "des", "rep", "reed", "rs", "cells", " Res", "vals", "out", "powers", "es", "rh", "r", "exp", "bytes", "right", "error", "cs", "results", "reg", "ps", "RES", "ms", "os", "ros", "Rs", "cons", "resp", "rev", "rest", "result", "cases", "err", "details", "ras", "gr", "ress", "ries", "js", "response", "ret", "req", "ris", "our", "rx", "css", "rc", "Res", "ons", "nos", "resolution", "rates", "resh", "re"], "pow": ["spox", "cpowe", "opow", " power", "pows", "cpw", "pmowed", "opowed", "pmower", " prow", "perows", "spowed", " pcow", "peraw", "ppow", "Paw", "ppcow", "perew", "parew", "lpower", "how", "cpowed", "pcow", "hrow", "cpaw", "paode", "power", "phowe", " pame", "phow", "peow", "cow", "opox", " powed", "paw", "pame", "phw", "phowed", "paaw", "pew", "pw", "uowe", " pows", "perox", "pmox", "pox", "cowe", "parow", "ppows", "pmow", " paw", "peaw", "cox", "opower", "hows", "parowe", "pprow", "paow", "perowe", "perow", "lpowed", "hcow", "Pew", "cower", "Pows", " pw", "powed", "spower", " pode", " pew", "peode", "lpaw", "prow", "peame", "cpower", "Pow", "parows", "uox", " powe", "perower", "uow", "cpow", "Powe", "spow", "lpow", "paame", "pode", "uower", "powe"]}}
{"code": "import java.io.*;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) throws IOException {\\n       Scanner in = new Scanner(System.in);\\n       double r = in.nextDouble();\\n       System.out.printf(\"%f %f\\n\", Math.PI * r * r,\\n\t\t       \t\t    2 * Math.PI * r);\\n    }\\n}", "target": "239", "substitutes": {"in": ["this", "isin", "p", "buffer", "id", "login", "ins", "ln", "din", "ex", "v", "binary", "i", "path", "line", "l", "a", "data", "is", "lin", "con", "init", "source", "win", "input", "resource", "f", "In", "gen", "s", "lib", "c", "ini", "inn", "conn", "m", "x", "nin", "inner", "d", "rin", "n", "b", "err", "kin", "again", "reader", "exec", "pin", "connection", "log", "bin", "inc", "IN", "out"], "r": [" R", "rating", "radius", "p", "u", "rb", "rs", "pr", "i", "ar", "l", "fr", "ur", "rh", "nr", "f", "br", "er", "s", "c", "m", "x", "e", "kr", "rg", "rf", "q", "R", "d", "rank", "n", "sr", "b", "err", "rr", "j", "k", "rd", "rc", "cr", "rl", "rx", "rt", "range", "t", "ru", "re"]}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tstatic Scanner scanner;\\n\\n\tpublic static void main(String[] args) {\\n\t    scanner = new Scanner(System.in);\\n\\n        int N=gi();\\n        int X=gi();\\n        int M=0;\\n\\n        int min=Integer.MAX_VALUE;\\n \\n        for (int i=0; i<N;i++) {\\n            int m=gi();\\n            M+=m;\\n            if(m<min) {\\n            \tmin=m;;\\n            }\\n        }\\n        \\n        int k=N;\\n        X=X-M;\\n        \\n        while(X>=min) {\\n        \tX-=min;\\n        \tk++;\\n        }\\n\\n\\n\t    System.out.println(k);\\n\\n//\t    if (isNumber(s1) && isNumber(s2) && s.charAt(a) == '-') {\\n//\t    \tSystem.out.print(\"Yes\");\\n//\t    }else {\\n//\t    \tSystem.out.print(\"No\");\\n//\t    }\\n\\n\\n\\n\t}\\n\\n\tpublic static long d(long n) {\\n\t\tString a=String.valueOf(n);\\n\t\treturn (long)a.length();\\n\t}\\n\\n\t// \u6587\u5b57\u5217\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static String gs() {\\n\t\treturn scanner.next();\\n\t}\\n\\n\t// int\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static int gi() {\\n\t\treturn Integer.parseInt(scanner.next());\\n\t}\\n\\n\t// long\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static long gl() {\\n\t\treturn Long.parseLong(scanner.next());\\n\t}\\n\\n\t// double\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static double gd() {\\n\t\treturn Double.parseDouble(scanner.next());\\n\t}\\n}", "target": "3", "substitutes": {"scanner": ["scanker", "anner", "caner", "canter", "scanter", "nerler", "annter", "annler", "Scanler", "nerner", "canler", "scaner", "verker", "nerer", "Scanker", "Scanter", "Scaner", "annner", "nerker", "verler", "verner", "verer", "canner", "Scanner", "scanler"], "N": ["S", "Num", "No", "NA", "NL", "C", "J", "Size", "U", "Y", "NN", "Q", "P", "Ni", "I", "T", "NC", "max", "L", "R", "Max", "n", "NM", "Ne", "V", "K", "NB", "D", "NT", "H", "Z", "Ns", "NS", "O", "G", "KN"], "X": ["IP", "S", "IM", "Sample", "C", "ID", "J", "WH", "Do", "MC", "Size", "U", "Y", "XXX", "F", "Q", "CL", "P", "A", "MD", "XX", "x", "T", "I", "MX", "MIN", "L", "R", "Max", "IX", "XP", "V", "K", "XM", "D", "H", "Z", "NS", "O", "G", "MAX", "Value", "Min", "W", "E", "XL"], "M": ["MN", "S", "MM", "Mi", "C", "J", "LM", "U", "Y", "F", "Q", "P", "A", "MD", "x", "mu", "T", "I", "MIN", "L", "R", "n", "B", "NM", "V", "K", "D", "H", "Z", "O", "G", "mid", "Min", "E"], "min": ["none", "unit", "initial", "p", "val", "size", "mon", "id", "na", "minimum", "span", "mini", "sort", "partial", "sign", "r", "start", "value", "f", "man", "cm", "s", "ini", "key", "pm", "model", "x", "MIN", "max", "skip", "d", "Minimum", "n", "limit", "small", "dim", "mit", "ignore", "mine", "j", "pos", "me", "in", "Mini", "mn", "mod", "mean", "mid", "MAX", "Min", "am", "default"], "i": ["hi", "bi", "im", "pi", "ni", "p", "it", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "mini", "ri", "z", "f", "ci", "ui", "ini", "x", "mu", "ip", "di", "I", "ai", "o", "mi", "n", "ii", "li", "j", "in", "chi", "y", "my"], "m": ["um", "dm", "mc", "im", "module", "bm", "p", "multi", "om", "v", "l", "mini", "mm", "r", "nm", "z", "h", "f", "cm", "ms", "c", "fm", "pm", "ym", "x", "mu", "w", "e", "gm", "max", "md", "o", "d", "mi", "n", "g", "b", "dim", "em", "j", "hm", "sm", "mod", "mn", "y", "ma", "am", "t"], "k": ["ky", "sk", "mk", "p", "id", "u", "ko", "num", "ck", "ke", "ks", "km", "v", "keep", "kick", "kk", "ik", "z", "ok", "ek", "c", "key", "ak", "x", "ku", "kw", "max", "q", "unk", "d", "kn", "n", "kl", "kin", "kid", "j", "K", "work", "scan", "y", " K", "ki"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner kb = new Scanner(System.in);\\n\t\tint n = kb.nextInt();\\n\t\tString k = \"YES\";\\n\t\tArrayList<Integer> a = new ArrayList<>();\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint j = kb.nextInt();\\n\t\t\ta.add(j);\\n\t\t}\\n\t\tCollections.sort(a);\\n\t\t//System.out.println(a.get(0));\\n\t\t//System.out.println(a.get(1));\\n\t\tfor (int i = 0; i < n - 1; i++) {\\n\t\t\t//System.out.println(i);\\n\t\t\t//System.out.println(a.get(i).equals(a.get(i + 1)));\\n\t\t\tif (a.get(i).equals(a.get(i + 1))) {\\n\t\t\t\tk = \"NO\";\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(k);\\n\t\tkb.close();\\n\t}\\n}\\n", "target": "44", "substitutes": {"kb": ["ky", "sk", "mk", "kg", "ka", "core", "ck", "rb", "abb", "ke", "ks", "km", "obb", "zb", " KB", "usb", "db", "KB", "kernel", "cb", "bh", "cmd", "ph", "bc", "nl", "BB", "gb", "dk", "eb", "ok", "conn", "ku", "KA", "kr", "oks", "q", "kn", "b", "kin", "nb", "bg", "tk", "obj", "sb", "bb", "uk", "kB", "bd", "ki", "lf", "ab", "ctx", "bp"], "n": ["nn", "nc", "ni", "p", "dn", "u", "num", "N", "v", "l", "z", "h", "nl", "len", "f", "conn", "s", "c", "ne", "m", "x", "e", "o", "d", "ns", "b", "network", "net", "in", "number", "y", "en", "t"], "k": [" reply", "ck", " l", " init", " ask", " q", " o", " m", "ok", "s", " w", " u", " v", " p", " s", " d", " key", "q", " r", "b", " mask", "K", " c", " ok", " b", " K", " check"], "a": ["aw", "ana", "ava", "p", "na", "u", "span", "ba", "ar", "ao", "aa", "A", "aj", "aux", "tta", "au", "c", "ga", "ata", "an", "parts", "sa", "ea", "alpha", "o", "af", "b", "ac", "aaa", "ama", "asha", "ans", "la", "asa", "area", "as", "da", "ab", "ma", "am", "va", "array"], "i": ["bi", "api", "pi", "ori", "ni", "u", "qi", "ji", "xi", "v", "jp", "si", "ix", "mini", "ri", "uli", "io", "z", "h", "info", "abi", "f", "ci", "ui", "ini", "index", "m", "phi", "e", "ip", "di", "I", "ie", "ai", "jit", "o", "gi", "inner", "b", "ii", "zi", "li", "oi", "in", "chi", "ti", "fi"], "j": ["bi", "dj", "jj", "ori", "jc", "p", "J", "qi", "ji", "xi", "v", "jp", "si", "ix", "ij", "ik", "z", "aj", "f", "ion", "index", "e", "ja", "I", "uj", "ie", "jit", "o", "d", "ii", "b", "li", "js", "y", "jl", "jo"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main {\\n    public static void main(String[] args) throws IOException{\\n    \t// Solution sol = new Solution();\\n    \tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    \tStringTokenizer st = new StringTokenizer(br.readLine());\\n    \tint N = Integer.parseInt(st.nextToken());\\n    \tdouble k = (double)N/3;\\n    \tSystem.out.println(Math.pow(k,3));\\n\\n    }\\n}", "target": "53", "substitutes": {}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        FastReader in = new FastReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BGoldenCoins solver = new BGoldenCoins();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BGoldenCoins {\\n        public void solve(int testNumber, FastReader s, PrintWriter out) {\\n            long x = s.nextLong();\\n            long ans = 0;\\n            ans += (1000 * (x / 500));\\n            x %= 500;\\n            ans += 5 * (x / 5);\\n            out.println(ans);\\n        }\\n\\n    }\\n\\n    static class FastReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private FastReader.SpaceCharFilter filter;\\n\\n        public FastReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public long nextLong() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            long res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "180", "substitutes": {"inputStream": ["inputSteam", "outputSteam", " inputstream", " inputBuffer", " inputSteam", "InputSteam", "inputSession", "outputBuffer", "Inputstream", "inputBuffer", " inputSession", "InputStream", "outputstream", "InputBuffer", "outputSession", "inputstream", "InputSession"], "outputStream": ["outputWriter", "inputSteam", "outputSteam", " outputSt", "OutputStreamer", "Outputstream", "controlStream", "inputStreamer", "OutputStream", "controlStreamer", "OutputWriter", " outputSteam", "inputWriter", "outSteam", "outputStreamer", "outStream", "OutputSt", "controlSteam", "outstream", "OutputSteam", "outputstream", " outputstream", "outSt", "controlWriter", "outputSt"], "in": ["this", "cl", "isin", "IN", "id", "ins", "din", "inside", "i", "path", "l", "a", "data", "request", "lin", "con", "r", "io", "source", "win", "info", "input", "sin", "init", "resource", "In", "f", "conn", "image", "inn", "ini", "arg", "w", "config", "inf", "inner", "d", "rin", "n", "err", "ac", "reader", "work", "pin", "log", "bin", "inc", "read"], "out": ["this", "conf", "parent", "call", "print", "client", "p", "buffer", "prefix", "to", "server", "ex", "v", "ext", "line", "a", "page", "name", "r", "exp", "io", "init", "temp", "gen", "conn", "image", "outer", "user", "report", "password", "output", "OUT", "w", "process", "list", "writer", "string", "problem", "Out", "o", "inner", "n", "g", "cli", "b", "err", "again", "pass", "write", "net", "exec", "up", "connection", "work", "obj", "log", "file", "bin", "outs", "word", "inc", "bar", "cache", "error", "window"], "solver": ["insolution", "solving", "insolving", "ssolving", "ssolve", "unsolver", "Solver", "insolve", "ssolver", "ssolution", "insolver", "solve", "solution", "Solution", "Solving", "unsolving", "Solve", "unsolve", "unsolution"], "testNumber": ["TestCounter", "TestNumber", "testnumber", " trialnumber", " trialNumber", "TestNum", " testnumber", "Testnumber", " trialCounter", " testCounter", " testNum", " trialNum", "testNum", "testCounter"], "s": ["S", "sf", "p", "ss", "v", "si", "i", "l", "sv", "ls", "r", "ws", "fs", "scl", "f", "sl", "os", "ings", "ds", "m", "w", "ing", "ssl", "ses", "sq", "abs", "o", "n", "g", "ns", "b", "sys", "se", "sb", "storage", "scan", "outs", "sc", "t"], "x": ["dx", "p", "xp", "xa", "sex", "na", "num", "xi", "ex", "i", "xes", "ix", "l", "X", "con", "ens", "cross", "z", "lex", "rows", "ax", " xx", "wx", "index", "m", "w", "XX", "xxx", "plus", "n", "sync", "xt", "tx", "work", "xs", "xy", "number", "y", "rx", "xxxxxxxx", "ux", "px", "t", "ctx", "xc", "xx"], "ans": ["ams", "ana", "sk", "ars", "anas", "aned", "na", "ads", "ani", "ins", "aus", "ss", "span", "ks", "lan", " spans", "aces", "vals", "atan", "ase", "es", "ls", "eps", "ens", "cs", "ians", "len", "ms", "os", "cas", "ds", "nas", "ants", "an", " means", "cus", "ANS", "anes", "leans", "ents", "ns", "ras", "ats", "anc", "xs", "outs", "as", "ons", " es", "amps", "ays", "can", "ann"], "stream": ["this", "round", "transform", "single", "client", "message", "through", "http", "server", "view", "stack", "v", "cur", "path", "pool", "data", "request", "control", "source", "row", "input", "sw", "src", "channel", "resource", "f", "document", "length", "post", "method", "user", "feed", "model", "forward", "output", "w", "e", "system", "string", "socket", "ssl", "per", "Stream", "track", "context", "object", "loop", "body", "handler", "reader", "form", "host", "response", "thread", "file", "speed", "port", "engine", "window"], "buf": ["buff", "fb", "tmp", "seq", "bed", "func", "vec", "buffer", "Buff", "pb", "queue", "rb", "map", "Buffer", "bp", "ff", "db", "cb", "bh", "bc", "cv", "bu", "src", "fam", "br", "fd", " buff", "uf", "bag", "img", "cap", "uc", "cf", "b", "fab", "bg", "bb", "bd", "rc", "box", "la", "wb", "ab", "conv", "batch", "ctx"], "curChar": ["Curchar", "keepChar", "curCharacter", "CurCh", "surCh", "constCh", "curCh", "CurCor", "surCharacter", "CurChar", "constchar", "curchar", "constCharacter", " CurCh", "keepCh", "surchar", " curCh", " CurChar", "curCor", "CurCharacter", " curCor", " curCharacter", "surChar", "keepCor", " CurCharacter", " Curchar", "constChar", "keepCharacter", " curchar"], "numChars": [" numCHards", " numCarts", "maxchards", "numCHarts", "numClats", " numChats", "numchats", "maxChars", "maxChARS", "numClannels", "numChards", " numChARS", "numcharts", "numCHans", " numCARS", "maxchats", "maxchARS", " numChans", " numCars", "numChARS", "numClans", "numCHats", " numChannels", "numCHARS", "maxChards", "numchars", "numChats", " numCHars", "numCharts", "numChannels", "numCHannels", "numCHards", " numCHARS", " numCharts", " numChards", "numCHars", "maxChats", " numCHarts", "numCards", "numCarts", "numCARS", "numClars", "numCars", "numchARS", "numchards", "numChans", "maxchars", " numCards"], "filter": ["pattern", "cl", "chain", "fl", "p", "buffer", "fil", " Filter", "fac", "bis", "Filter", "cb", "reg", "f", " filters", " filtering", "g", "b", "ac", "acl", "cache", "handler", "pass", "bb", "sel", "ref", "proc", " filtered"], "c": ["cl", "enc", "ic", "nc", "rec", "arc", "vc", "chain", "mc", "p", "C", "u", "character", "v", "cur", " rc", "i", "fc", "l", "cu", "ct", "cb", "con", "r", "sc", "h", "z", "cs", "end", "bc", "cp", "char", "f", "lc", "ci", "dc", " C", "cm", "t", "loc", "m", "e", "col", "uc", "ce", "code", "cf", "d", "n", "g", "b", "abc", "ac", "anc", "rc", "cc", "cr", "y", "cont", "dec", "cache", "cy", "ec", "esc", "unc", "xc", "coll"], "sgn": ["this", "sbn", "nsgp", "Sgn", "psgin", " sgin", "nsbn", "wsgn", "r", "bytes", "wsgp", " sden", "psGN", "SGN", " sGN", "wsbn", "sgp", "sGN", " sbn", "Sgin", "psgn", "psgen", "sden", "sgen", "_", "Sgen", "wsden", "number", "nsgn", " sgp", "sgin", "nsden", " sgen"], "res": ["rss", "blocks", "p", "rus", "pres", "ks", "rs", "arr", "powers", "vals", "qs", "es", "rem", "r", "bytes", "cs", "results", "reg", "ps", "RES", "vs", "rows", "ms", "os", "ros", "Rs", "cons", "resp", "rev", "ns", "result", "err", "details", "ras", "ress", "ries", "values", "js", "ret", "req", "ris", "css", "ids", "Res", "ons", "nos", "resolution", "resh", "re"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        try{\\n            int w = Integer.parseInt(reader.readLine());\\n            int n = Integer.parseInt(reader.readLine());\\n            int[] x = new int[w];\\n            for(int i = 0; i< w; i++){\\n                x[i] = i + 1;\\n            }\\n            int a ;\\n            int b ;\\n            for(int i = 0; i < n; i++){\\n                String line = reader.readLine();\\n                String[] s = line.split(\",\");\\n                a = Integer.parseInt(s[0]);\\n                b = Integer.parseInt(s[1]);\\n                int temp = x[a-1];\\n                x[a-1] = x[b-1];\\n                x[b-1] = temp;\\n            }\\n            for(int i = 0; i < w; i++){\\n                System.out.println(x[i]);\\n            }\\n        }catch(IOException e){\\n\\n        }\\n    }\\n}\\n", "target": "156", "substitutes": {"reader": ["rar", "over", "buffer", "loader", "http", "ro", "server", "rator", "l", "player", "r", "oder", "io", "iter", "stream", "h", "input", "ler", "upper", "f", "er", "feed", "bird", "magic", "ruby", "her", "e", "writer", "per", "system", "inner", "context", "rer", "rr", "handler", "ner", "ger", "editor", "in", "finder", "worker", "rx", "keeper", "parser", "reading", "driver", "read", "out", "Reader"], "w": ["wp", "p", "wo", "u", "v", "fw", "l", "wd", "r", "ws", "win", "z", "h", "sw", "f", "width", "c", "wx", "m", "e", "kw", "ww", "max", "q", "o", "wt", "d", "hw", "ow", "ew", "wa", "k", "work", "wall", "y", "wl", "we", "W", "t", "wh", "window"], "n": ["nn", "nc", "nt", "p", "u", "N", "v", "l", "sn", "r", "z", "h", "f", "c", "e", "o", "d", "ns", "network", "nb", "j", "net", "k", "in", "y", "en", "t"], "x": ["php", "status", "p", "xp", "test", "sex", "slice", "id", "u", "xml", "px", "python", "xf", "xi", "ex", "v", "ext", "xes", "ix", "nex", "data", "es", "X", "cross", "value", "z", "info", "event", "f", "c", "XX", "ax", "wx", "index", "list", "pe", "e", "full", "xxx", "q", "code", "o", "rex", "tx", "work", "xs", "in", "xy", "y", "rx", "ux", "ctx", "xt", "my", "t", "array", "xc", "xx"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "it", "u", "id", "slice", "multi", "qi", "xi", "v", "si", "ix", "l", "mini", "ri", "ik", "part", "start", "io", "z", "info", "f", "ci", "ui", "ini", "c", "key", "index", "eni", "phi", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "g", "ii", "zi", "li", "j", "oi", "yi", "y", "ti", "fi"], "a": ["api", "p", "u", "na", "access", "ba", "l", "aa", "A", "pa", "f", "au", "c", "ga", "ak", "an", "sa", "e", "ae", "ai", "alpha", "o", "d", "ca", "ac", "wa", "aaa", "sta", "y", "la", "as", "area", "ab", "ma", "am", "va", "aj"], "b": ["fb", "bl", "bi", "p", "mb", "u", "pb", "abb", "rb", "v", "ba", "l", "ib", "db", "cb", "bf", "r", "aa", "h", "lb", "bc", "bs", "eb", "f", "pa", "br", "c", "base", "e", "o", "d", "B", "nb", "j", "sb", "bb", "beta", "bd", "y", "ab", "emb", "ob"], "line": ["cl", "p", "val", "id", "v", "le", "l", "page", "data", "name", "lin", "r", "entry", "block", "source", "row", "nl", "f", "lines", "letter", "sl", "c", "base", "e", "str", "text", "string", "code", "o", "se", "inline", "no", "in", "Line", "out"], "s": ["S", "p", "u", "service", "ss", "split", "v", "si", "strings", "l", "qs", "is", "sv", "es", "ls", "r", "info", "ps", "f", "lines", "sl", "c", "os", "side", "us", "m", "parts", "e", "str", "string", "ses", "o", "d", "ns", "se", "pass", "su", "spec", "t", "sync"], "temp": ["div", "tmp", "ic", "offset", "empty", "count", "p", "buffer", " tmp", "size", "null", "u", "num", "stable", "ex", "v", "data", "diff", "Temp", "z", "input", "orig", " temporary", "lc", "dc", "c", "f", "var", "base", "pack", "cut", "ctrl", "gi", "shift", " Temp", "current", "frac", "y", "inc", "cache", "dev", "fake", "pad"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\t// \u672b\u5c3e\u306b\u8ffd\u52a0\u53ef\u80fd\u306a\u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3057\u305f\u6587\u5b57\u5217\\n\tprivate static final String REVERSE_DREAM = new StringBuilder(\"dream\").reverse().toString();\\n\tprivate static final String REVERSE_DREAMER = new StringBuilder(\"dreamer\").reverse().toString();\\n\tprivate static final String REVERSE_ERASE = new StringBuilder(\"erase\").reverse().toString();\\n\tprivate static final String REVERSE_ERASER = new StringBuilder(\"eraser\").reverse().toString();\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\t// \u51e6\u7406\u5bfe\u8c61\u6587\u5b57\u5217\u306e\u5165\u529b\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\t// \u6700\u5f8c\u5c3e\u304b\u3089\u8ffd\u52a0\u53ef\u80fd\u306a\u6587\u5b57\u5217\u3092\u691c\u7d22\u3059\u308b\u305f\u3081\u3001\u51e6\u7406\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3055\u305b\u308b\\n\t\tStringBuilder targetString = new StringBuilder(sc.next()).reverse();\\n\t\tsc.close();\\n\\n\t\tint bak = 0;\\n\t\t// \u51e6\u7406\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u306e\u6700\u5f8c\u5c3e\u304b\u3089\u3001\u8ffd\u52a0\u53ef\u80fd\u3067\u3042\u308b\u6587\u5b57\u5217\u3092\u53ef\u80fd\u306a\u9650\u308a\u524a\u9664\u3059\u308b\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\\n\t\t// \u203b\u52b9\u7387\u5316\u306e\u305f\u3081\u6587\u5b57\u5217\u306f\u53cd\u8ee2\u3057\u3066\u51e6\u7406\\n\t\twhile(bak != targetString.length()) {\\n\t\t\tbak = targetString.length();\\n\t\t\ttargetString = checkTopString(targetString);\\n\t\t}\\n\\n\t\t// \u51fa\u529b\\n\t\tif(targetString.length() == 0) {\\n\t\t\tSystem.out.println(\"YES\");\\n\t\t}else{\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\\n\t}\\n\\n\t// \u51e6\u7406\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u306e\u6700\u5f8c\u5c3e\u306b\u8ffd\u52a0\u53ef\u80fd\u306a\u6587\u5b57\u5217\u304c\u3042\u308b\u306a\u3089\u524a\u9664\u3059\u308b\u95a2\u6570(\u52b9\u7387\u5316\u306e\u305f\u3081\u51e6\u7406\u306f\u53cd\u8ee2\u3057\u3066\u884c\u3046)\\n\tstatic StringBuilder checkTopString(StringBuilder targetString){\\n\t\tif(targetString.indexOf(REVERSE_DREAM) == 0){\\n\t\t\treturn targetString.delete(0,REVERSE_DREAM.length());\\n\t\t}\\n\\n\t\tif(targetString.indexOf(REVERSE_DREAMER) == 0){\\n\t\t\treturn targetString.delete(0,REVERSE_DREAMER.length());\\n\t\t}\\n\\n\t\tif(targetString.indexOf(REVERSE_ERASE) == 0){\\n\t\t\treturn targetString.delete(0,REVERSE_ERASE.length());\\n\t\t}\\n\\n\t\tif(targetString.indexOf(REVERSE_ERASER) == 0){\\n\t\t\treturn targetString.delete(0,REVERSE_ERASER.length());\\n\t\t}\\n\\n\t\treturn targetString;\\n\\n\t}\\n\\n}", "target": "50", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner input = new Scanner(System.in);\\n        int n = input.nextInt();\\n        int[] a = new int[55];\\n        for(int i = 1; i <= n; ++i){\\n            a[i] = input.nextInt();\\n        }\\n        int[][] b = new int[55][2];\\n        int sum = 0;\\n        for(int i = 1; i <= n; ++i){\\n            if(a[i] != i){\\n                b[sum][0] = i;\\n                b[sum][1] = a[i];\\n                sum++;\\n            }\\n        }\\n        if(sum <= 2) System.out.println(\"YES\");\\n        else System.out.println(\"NO\");\\n    }\\n}\\n", "target": "82", "substitutes": {"input": ["counter", "this", "upload", "buffer", "null", "http", "next", "select", "server", "service", "view", "json", "enter", "search", "l", "kernel", "request", "control", "io", "iter", "stream", "source", "method", "temp", "event", "get", "f", "session", "instance", "image", "c", " Input", "output", "list", "Input", "str", "text", "system", "inf", "context", "util", "again", "current", "reader", "form", "connection", "in", "up", "analysis", "scan", "iterator", "file", "flow", "error", "out", "array"], "n": ["nn", "nt", "ni", "count", "p", "size", "u", "num", "N", "v", "l", "out", "sn", "z", "h", "nl", "len", "f", "fn", "s", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "network", "nb", "j", "net", "k", "in", "y", "t"], "a": ["api", "p", "u", "na", "auto", "ba", "l", "data", "aa", "A", "aj", "tta", "f", "s", "c", "ga", "ata", "an", "x", "sa", "e", "ai", "alpha", "o", "ca", "ac", "aaa", "qa", "sup", "in", "ama", "as", "la", "asa", "area", "ab", "da", "y", "ma", "ans", "am", "va", "array"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "p", "iu", "ami", "it", "u", "id", "slice", "multi", "qi", "next", "xi", "ji", "v", "auto", "si", "ix", "l", "ri", "uli", "init", "io", "info", "z", "abi", "f", "ci", "ui", "c", "ini", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "li", "j", "me", "oi", "in", "y", "ki", "my", "ti", "fi"], "b": ["buff", "bi", "fb", "p", "mb", "u", "abb", "rb", "binary", "v", "ba", "bis", "l", "cb", "db", "part", "r", "be", "block", "bc", "gb", "bs", "bas", "f", "c", "m", "an", "base", "e", "o", "B", "body", "j", "sb", "bb", "beta", "bd", "bin", "y", "ab", "ob"], "sum": ["all", "um", "SI", "total", "cat", "unit", "share", "who", "space", "count", "size", "null", "u", "gram", "cost", "num", "select", "fail", "ss", "summary", "si", "average", "add", "help", "sh", "ix", "sort", "vol", "loss", "sign", "diff", "mm", "ame", "mass", "sc", "init", "info", "error", "sim", "length", "f", "c", "key", "match", "weight", "us", "index", "by", "sp", "sa", "acc", "alpha", "skip", "miss", "comment", "Sum", "zero", "util", "li", "pass", "ass", "fat", "su", "seed", "scale", "mean", "doc", "cache", "iq", "am", "out", "mem"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\tScanner sca = new Scanner(System.in);\\n\t// \u5165\u529b\\n\tlong a = sca.nextLong();\\n\tlong b = sca.nextLong();\\n\tlong k = sca.nextLong();\\n\\n\t// \u51e6\u7406\\n\ta = a - k;\\n\tif(a < 0) {\\n\t\tk = -a;\\n\t\tb = b - k;\\n\t\ta = 0;\\n\t\tif(b < 0) {\\n\t\t\tb = 0;\\n\t\t}\\n\t}\\n\\n\t// \u51fa\u529b\\n\tSystem.out.print(a);\\n\tSystem.out.print(\" \");\\n\tSystem.out.println(b);\\n\\n\t// \u5f8c\u59cb\u672b\\n\tsca.close();\\n\t}\\n}", "target": "128", "substitutes": {"sca": ["scA", "bcas", " scA", " scsa", "SCas", "SCA", "scsa", "bcsa", "SCsa", "scas", "SCa", " scas", "bca", "bcA"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    List<String> words;\\n    words=new ArrayList<>(Arrays.asList(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\"\\n                                        ,\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\"\\n                                        ,\"W\",\"X\",\"Y\",\"Z\"));\\n    int num = Integer.parseInt(sc.next());\\n    String line = sc.next();\\n    for(int i = 0; i < line.length(); i++){\\n      String word = line.substring(i,i+1);\\n      if(words.indexOf(word)+num > 25){\\n        System.out.print(words.get(words.indexOf(word)+num-26));\\n      }else{\\n        System.out.print(words.get(words.indexOf(word)+num));\\n      }\\n    }\\n    System.out.println();\\n  }\\n}", "target": "13", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "ch", "tc", "ss", "server", " SC", "sub", "asc", "sh", "fc", "Sc", "SC", "cs", "bc", "sw", "src", "cv", "s", "c", "cer", " scr", "sp", "ec", "system", "uc", "soc", "cli", "cle", "se", " Sc", "anc", "sb", "ocr", "scan", "isc", "Scan", "osc", "auc", "rc", "cr", "cc", "sch", "parser", "out", "esc", "cus", "sync"], "words": ["points", "frames", "wp", "works", "cats", "months", "wcs", "features", "blocks", "images", "authors", "writers", "games", "cells", "reports", "strings", "working", "verbs", "rules", "pages", "ws", "phones", "WS", "results", "lines", "params", "planes", "vs", "tests", "cards", "cycles", "password", "w", "workers", "books", "parts", "codes", "users", "text", "writer", "files", "events", "windows", "weights", "cases", "members", "names", "Words", "changes", "pieces", "styles", "items", "lists", "terms", "comments", "letters", "tools", "we", "english", "W", "tags", "wh", "posts"], "num": ["mom", "um", "unit", "on", "comb", "Num", "nt", "count", "size", "id", "nu", "multi", "hom", "span", "nam", "uni", "name", "con", "ctr", "nr", "len", "lim", "fam", "loc", "cm", "fen", "sum", "index", "x", "mu", "umi", "coord", "col", "begin", "lam", "miss", "nom", "n", "feat", "dom", "rank", "dim", "nb", "pos", "norm", "no", "in", "mn", "bin", "number", "inc", "NUM", "en", "mem"], "line": ["message", "le", "l", "page", "name", "lin", "part", "entry", "home", "block", "zip", "header", "link", "row", "co", "cell", "end", "lane", "nl", "lines", "letter", "item", "key", "style", "lo", "pe", "str", "text", "string", "frame", "code", "office", "comment", "rule", "ine", "LINE", "cle", "ring", "pass", "se", "inline", "parse", "log", "non", "file", "lock", "lf", "section", "plugin", "Line", "strip", "sync"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "it", "u", "id", "slice", "multi", "qi", "xi", "v", "si", "ix", "l", "a", "is", "ri", "r", "start", "io", "z", "end", "f", "ci", "vi", "ui", "ini", "c", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "inner", "ii", "b", "zi", "li", "j", "oi", "in", "y", "ti", "fi"], "word": ["ana", "phrase", "enc", "eng", "Word", "function", "hop", "space", "prefix", "character", "page", "name", "point", "part", "wd", "stroke", "piece", "start", "co", "row", "lower", "week", "first", "char", "tag", "f", "letter", "pair", "feature", "way", "key", "w", "x", "str", "text", "string", "token", "language", "month", "hyp", "office", "work", "term", "position", "layer", "number"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception{\\n\t\tScanner scn = new Scanner(System.in);\\n\t\tint d = scn.nextInt();\\n\t\tint n = scn.nextInt();\\n      \tint ans = 0;\\n        int dd = (int)Math.pow(100,d);\\n        ans = dd*n;\\n      \tif(n==100){\\n      \t\tans = ans + dd;\\n    \t}\\n      \tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "245", "substitutes": {"scn": ["ccn", "scyn", "scner", "SCf", "ccb", " scner", " scyn", "schn", "schyn", " scf", "SCner", "SCyn", "scN", "SCna", "SCn", "scb", "SCr", "ccna", "Scn", "ccN", "scf", " scr", "schf", "ScN", "SCnn", "SCN", " scna", " scb", "Scr", "scna", "scnn", "SCb", "schnn", "Scner", "scr", " scN", " scnn"], "d": ["sd", "dx", "p", "dn", "nd", "dp", "ad", "od", "i", "dh", "l", "dat", "z", "df", "dr", "fd", "s", "dc", "c", "ds", "m", "x", "di", "md", "ld", "b", "dim", "dy", "dl", "j", "dt", "in", "D", "cd", "da", "t"], "n": ["nn", "nc", "p", "dn", "u", "nd", "num", "nan", "N", "ln", "cn", "i", "l", "sn", "z", "h", "len", "ny", "f", "s", "c", "m", "w", "x", "an", "e", "q", "o", "ns", "g", "b", "nb", "j", "k", "in", "mn", "number", "y", "en", "t"], "ans": ["nn", "acts", "sk", "ars", "aned", "na", "ads", "ins", "nan", "ks", "span", "lan", " spans", "ions", "offs", "ls", "eps", "rules", "ips", "reads", "cs", "ps", "lines", "s", "os", "nas", "cas", "ds", "posts", "rows", "ants", "an", " means", "books", "cus", "aid", "ANS", "anks", "ents", "ns", "ras", "ats", "anc", "xs", "ids", "outs", " scans", "aning", "amps", "annels", "ays", "can", "ann"], "dd": ["nn", "ady", "dist", "xd", "sd", "ded", "dx", "nd", "ck", "ad", "od", "dds", "der", "pd", "ding", "df", "gd", "dk", "fd", "ud", "dc", "ds", "di", "du", "md", "ld", "edd", "dl", "DD", "bd", "cd", "vd", "da", "odd"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.List;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n        String inputData;\\n        List<Integer> resultList = new ArrayList<Integer>();\\n        try {\\n\\n\t        while(true){\\n\t\t\t\t\tinputData = reader.readLine();\\n\t            if(inputData.indexOf(\" ? \") > 0){\\n\t            \tbreak;\\n\t            }else{\\n\t\t\t\t\tString[] strNumber = inputData.split(\" \");\\n\t\t\t\t\tint a = Integer.parseInt(strNumber[0]);\\n\t\t\t\t\tString op = strNumber[1];\\n\t\t\t\t\tint b = Integer.parseInt(strNumber[2]);\\n\\n\t\t\t\t\tresultList.add(outputCalc(a , b, op));\\n\\n\t            }\\n\t        }\\n\t        for(Integer val: resultList){\\n\t        \tSystem.out.println(val);\\n\t        }\\n\\n\t\t} catch (IOException e) {\\n\t\t\t// TODO ????????????????????? catch ????????????\\n\t\t\te.printStackTrace();\\n\t\t}\\n\\n\t}\\n\t/**\\n\t * ?????????????????????\\n\t * @param a\\n\t * @param b\\n\t * @param op\\n\t * @return result\\n\t */\\n\tprivate static Integer outputCalc(int a , int b , String op){\\n\\n\t\tint result = 0;\\n\t\tif(\"+\".equals(op)){\\n\t\t\tresult = a + b;\\n\t\t}else if(\"-\".equals(op)){\\n\t\t\tresult = a - b;\\n\t\t}else if(\"*\".equals(op)){\\n\t\t\tresult = a * b;\\n\t\t}else if(\"/\".equals(op)){\\n\t\t\tresult = a / b;\\n\t\t}\\n\t\treturn result;\\n\t}\\n\\n\\n}", "target": "139", "substitutes": {"reader": ["rar", "this", "client", "buffer", "loader", "server", "i", "l", "data", "ri", "r", "oder", "io", "iter", "stream", "input", "ler", "upper", "er", "f", "director", "e", "writer", "per", "inner", "result", "rer", "rr", "ner", "handler", "editor", "in", "iterator", "worker", "keeper", "driver", "parser", "reading", "read", "builder", "Reader"], "inputData": ["dataLine", "requestNumber", "inputText", "responseContent", " inputDATA", "submitDATA", "responseName", " inputInfo", "responseData", "readData", "requestData", "dataData", "inputAction", " inputString", "inputPart", "readContent", "InputDATA", "submitData", "dataAction", "InputAction", "inputString", "requestText", "InputNumber", "readName", " inputAction", " inputContent", "responseDATA", "InputText", "dataPart", "InputString", "inputContent", "inputInfo", " inputText", "submitInfo", "inputLine", "inputName", "InputUnit", " inputLine", " inputName", "requestString", "InputLine", "InputInfo", "InputPart", " inputPart", "inputDATA", "inputNumber", "inputUnit", "InputData", "submitUnit", "readDATA", " inputUnit", " inputNumber"], "resultList": ["arrayList", "ResultArray", "numberArray", "arrayLine", "finalData", "finalList", "arrayLi", "resultsList", "Resultlist", "resultsSet", "resultsData", "numberData", "resultLi", " resultData", "resultArray", "finalLi", "numberGroup", "finalLine", "resultData", " resultLi", "resultlist", "resultGroup", "resultSet", " resultlist", "ResultGroup", "ResultList", " resultSet", "resultslist", " resultGroup", "ResultData", "resultLine", "ResultSet", "numberList", " resultArray", "arrayData", " resultLine"], "strNumber": ["stringNum", "intnumber", "StrNumber", "STRGroup", "intNumbers", "intNum", "intString", " strNum", "strNumbers", " strBER", "STRNum", "stringString", "strGroup", " strPart", "stringNumber", "stringCode", "stringGroup", "intPart", "strUnit", " strnumber", "stringnumber", "stringBER", "intNumber", "strPart", "STRBER", " strGroup", " strNumbers", "StrPart", "intCode", " strCode", "stringUnit", "intUnit", "stringNumbers", "strnumber", " strString", "StrString", "strNum", "strString", "STRNumber", "StrNum", " strUnit", "strBER", "strCode"], "a": ["ana", "api", "p", "na", "ba", "i", "aa", "A", "oa", "pa", "f", "au", "s", "x", "sa", "ada", "aka", "alpha", "o", "d", "n", "af", "ca", "ac", "qa", "sta", "ama", "asha", "as", "la", "asa", "area", "da", "apa", "va"], "op": ["operation", "cop", "operator", "cat", "oper", "opus", "opt", "hop", "oc", "p", "id", "Op", "om", "ope", "auto", "i", "ap", "name", "comp", "vert", "app", "OP", "orb", "c", "bit", "ops", "ip", "opp", "o", "ac", "k", "type", "pp", "ob", "option"], "b": ["fb", "p", "mb", "pb", "abb", "rb", "v", "zb", "i", "ba", "l", "ib", "r", "bf", "aa", "h", "lb", "BB", "bs", "f", "pa", "s", "c", "x", "base", "e", "o", "d", "n", "g", "B", "nb", "k", "sb", "bb", "beta", "xb", "bot", "y", "ab", "ob"], "val": ["live", "count", "p", " eval", " ret", "num", "v", "arr", "vl", " Val", "data", "vals", "el", "Val", "r", "entry", "valid", "value", "al", "exp", "f", "loc", "sl", "key", "arg", " v", "x", "base", "e", "str", "resp", "code", "result", "li", "obj", "grad", "exec", "in", "sel", "rel", "ret", "VAL", "rl", "la", "eval"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\n\\npublic class Main {\\n    private static final int MOD = (int) Math.pow(10, 9);\\n    private static final long EIGHT = (long) 1e18;\\n    private static final int[][] DIRS = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\\n\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        String str = sc.next();\\n        if (str.equals(\"ABC\")) {\\n            print(\"ARC\");\\n        } else {\\n            print(\"ABC\");\\n        }\\n    }\\n\\n    /*\\n     * Check if a * b is overflow or not\\n     */\\n    static Boolean isOverflowByMul(long a, long b) {\\n        if (a == 0 || b == 0) {\\n            return false;\\n        }\\n\\n        long result = a * b;\\n        if (a == result / b) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    static private void swap(int[] nums, int x, int y) {\\n        int tmp = nums[x];\\n        nums[x] = nums[y];\\n        nums[y] = tmp;\\n    }\\n\\n    static  private void reverse(int[] nums, int left, int right) {\\n        while (left < right) {\\n            swap(nums, left, right);\\n            left++;\\n            right--;\\n        }\\n    }\\n\\n    static private boolean findNextPermutation(int[] nums) {\\n        if (nums.length <= 1) {\\n            return false;\\n        }\\n\\n        int last = nums.length - 2;\\n\\n        while (last >= 0) {\\n            if (nums[last] < nums[last + 1]){\\n                break;\\n            }\\n            last--;\\n        }\\n\\n        if (last < 0) { return false; }\\n        int nextGenerater = nums.length - 1;\\n\\n        for (int i = nums.length - 1; i > last; i--) {\\n            if (nums[i] > nums[last]) {\\n                nextGenerater = i;\\n                break;\\n            }\\n        }\\n\\n        swap(nums, nextGenerater, last);\\n        reverse(nums, last + 1, nums.length - 1);\\n        return true;\\n    }\\n\\n    static private int[] generateNArray(int n) {\\n        int[] res = new int[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            res[i] = i + 1;\\n        }\\n\\n        return res;\\n    }\\n\\n    static  private void print(String s) {\\n        System.out.println(s);\\n    }\\n\\n    static private void printArray(int[] e) {\\n        for (int s: e) {\\n            System.out.print(s + \" \");\\n        }\\n        print(\"\");\\n    }\\n\\n    static private int log2(int x) {\\n        return (int)(Math.log(x) / Math.log(2));\\n    }\\n\\n    static private long gcd(long m, long n) {\\n        if (m < n) { return gcd(n, m); }\\n        if (m % n == 0) { return n; }\\n        return gcd(n, m%n);\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException  e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try{\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n}\\n", "target": "153", "substitutes": {"MOD": [" CP", " R", " LEVEL", " W", " mod", " degree", " J", " power", " F", " dim", " C", " minor", " MIN", " E", " EXP", " POWER", " P", " omega", " depth", " exp", " D", " strength", " Z", " MAX", " M", " K", " Y", " mods"], "EIGHT": [" BEights", " Eights", " EDighth", " EDIGHT", " BEighth", " EIRD", " eights", " BEIGHT", " BEIRD", " eIGHT", " EDights", " Eighth", " eIRD", " eighth", " EDIRD"], "DIRS": ["DIRD", "LOADS", "dirS", "DIRGS", "LOADD", "DIRs", "COLGS", "LOADGS", "COLD", "COLs", "LOADs", "dirs", "COLS", "dirGS", "dirD"], "sc": ["mc", "nc", "arc", "sci", "pc", "C", "tc", "ch", "sec", " SC", "asc", "Sc", "SC", "RC", "bc", "desc", "sw", "src", "BC", "irc", "cs", "ci", "dc", "c", "cer", "uc", "soc", "ca", " Sc", "reader", "isc", "osc", "cd", "rc", "cc", "cr", "usc", "spec", "ec", "esc", "cus"], "str": ["div", "arc", "func", "next", "pr", "arr", "ext", "ar", "STR", "out", "data", "fr", "name", "r", "entry", "exp", "char", "f", "er", "c", "star", "sp", "text", "string", "stri", "code", "Str", "expr", "prev", "err", "obj", "frac", "txt", "dec", "t"], "a": ["p", "ia", "u", "na", "ad", "ba", "l", "mA", "aa", "A", "pa", "f", "au", "c", "ga", "an", "sa", "ae", "ea", "ai", "alpha", "d", "ca", "ac", "wa", "aaa", "sta", "ama", "fa", "la", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["fb", "bi", "bel", "p", "null", "u", "pb", "abb", "rb", "v", "ba", "l", "ib", "cb", "bis", "r", "bf", "bh", "be", "h", "lb", "bc", "end", "bs", "f", "c", "w", "base", "other", "o", "d", "g", "B", "abc", "body", "sb", "bb", "wb", "ab", "ob", "bp"], "result": ["counter", "total", "future", "back", "next", "page", "data", "answer", "diff", "r", "valid", "results", "length", "sum", "output", "acc", "Result", "success", "alpha", "card", "err", "response", "master", "math", "rc", "number", "bar", "match", "array", "mult"], "nums": ["numes", " nump", " nubes", "inems", "num", " numps", "notums", "inums", "cums", "nrams", "enodes", "Nummies", "unubs", "enumer", "notumer", "unummies", "mnules", "mums", "unumps", "Nubs", "nanoms", " nules", "unum", "mames", "gnums", "nubes", " names", "nanames", "inummies", "mnems", "gnems", "enubs", "mnumbers", "unrams", " nubs", "toms", " nummies", "gnubs", "tums", "mnums", "tenummies", "cummies", "numbers", "gnumbers", "numps", "codes", "Noms", "nodes", "enubes", "tenums", "cubs", "neumbers", "unodes", "numer", "cumbers", "nanacs", "cames", "unoms", "inumes", "cems", "unults", " noms", "mults", "unules", "gnules", "nummies", "tenum", "inumbers", "gnummies", "enumes", "nump", "unumer", "notubs", "cules", "enumbers", "noms", "enumpy", "mumbers", "enacs", " num", "unumpy", "cubes", "unams", "gnams", "nanums", " nems", "enrams", "nults", " nults", "numpy", "nams", "inoms", "Num", "enams", "crams", "unums", "tenumbers", "unames", " numbers", "enumps", "nubs", "enames", "nacs", "gnumps", "tames", "enoms", "neums", "enummies", "Nums", "cump", "cumps", "nems", "Numbers", "neummies", "enems", "coms", "notoms", "unumbers", "neubs", "names", "tacs", "gnumes", "inump", "nules", " numpy", "enules", "enums"], "x": ["on", "dx", "p", "test", "u", "id", "one", "num", "xi", "xf", "ex", "v", "ix", "l", "z", "h", "f", "width", "c", "ax", "wx", "index", "w", "xx", "xxx", "d", "xt", "tx", "xe", "xs", "xb", "xy", "rx", "px", "t", "xc", "X"], "y": ["py", "ky", "p", "u", "sy", "oy", "v", "vy", "ya", "Y", "yt", "yr", "z", "h", "ny", "ay", "c", "w", "zy", "yn", "xxx", "ry", "o", "d", "hot", "ii", "dy", "yy", "j", "ye", "yi", "xy", "ey", "cy", "t", "xx"], "tmp": ["fb", "nt", "test", "rb", "stack", "v", "jp", "stuff", "extra", "data", "kk", "vt", "zip", "temp", "cmp", " temp", "wx", "img", "np", "acc", "mp", "xxx", "ptr", "alpha", "foo", "nb", "yy", "cache", "obj", "su", "buf", "sup", "xxxx", "amp", "bb", "beta", "txt", "qq", "xy", "xxxxxxxx", "proc", "pad"], "left": ["all", "none", "cl", "second", "low", "fl", "size", "one", "id", "wrong", "url", "le", "l", "el", "old", "part", "partial", "diff", "both", "z", "lower", "Left", "cell", "length", "width", "loc", "lc", "down", "ax", "leave", "index", "lo", "list", "full", "label", "pl", "two", "col", "ul", "min", "L", "plus", "small", "li", "pos", "top", "child", "from", "level", "bottom", "local", "close", "front", "coll"], "right": ["all", "round", "none", "cl", "rec", "third", "p", "patch", "one", "id", "wrong", "back", "Right", "gh", "before", "rem", "r", "cross", "rh", "value", "both", "row", "end", "length", "arrow", "down", "ax", "key", "w", "rw", "ack", "ra", "red", "three", "max", "rest", "d", "plus", "prev", "inner", "with", "rights", "child", "reverse", "rel", "rew", "rx", "bottom", "bar"], "last": ["this", "total", "empty", "size", "best", "after", "key", "depth", "any", "max", "worst", "push", "needed", "variable", "id", "next", "server", "good", "value", "end", "first", "length", "index", "Last", "code", "j", "bottom", "later", "real", "pull", "div", "second", "scope", "count", "it", "cur", "old", "use", "full", "prev", "cycle", "se", "highest", "child", "close", "cache", "always", "sync", "parent", "each", "now", "future", "table", "one", "start", "event", "style", "or", "recent", "est", "cle", "latest", "current", "period", "from"], "nextGenerater": [" nextGenATER", "nextOperator", "nextOperaser", "nextGenerator", "nextgenerator", "nextIteratter", " nextGenaser", "nextGenerATER", " nextGenter", "nextgeneraler", "nextGenater", "nextGeneraser", "nextgenerater", "nextTerminATER", "nextGenaler", " nextGenerter", "nextGenATER", "nextTerminator", "nextGenaser", "nextGenter", "nextGenerter", " nextGenerator", "nextIteraler", "nextgenerATER", "nextGenatter", "nextgeneratter", "nextOperATER", "nextOperater", " nextGenaler", "nextIterter", " nextGenator", "nextgenerter", "nextGeneraler", "nextGenator", " nextGenater", " nextGenatter", "nextIterATER", " nextGeneraler", "nextTerminaser", "nextGeneratter", " nextGenerATER", " nextGeneratter", "nextIterater", "nextIterator", " nextGeneraser", "nextTerminater"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "it", "id", "u", "slice", "multi", "qi", "xi", "v", "si", "ix", "l", "mini", "ri", "ik", "start", "io", "h", "z", "abi", "info", "f", "ci", "ui", "ini", "c", "eni", "phi", "uri", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "li", "j", "oi", "k", "in", "my", "t", "ti", "fi"], "n": ["nn", "nc", "nt", "p", "num", "ln", "N", "v", "l", "name", "z", "f", "nat", "c", "list", "d", "g", "ns", "nb", "names", "net", "k", "number", "t", " N"]}}
{"code": "\\n\\nimport java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    static class FS {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st = new StringTokenizer(\"\");\\n\\n        String next() {\\n            while (!st.hasMoreTokens())\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        int[] readArray(int n) {\\n            int[] a = new int[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = nextInt();\\n            return a;\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        public long[] readLongArray(int n) {\\n            long[] a = new long[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = nextLong();\\n            return a;\\n        }\\n    }\\n\\n    static final FS sc = new FS();\\n    static final PrintWriter out = new PrintWriter(System.out);\\n    static final int mod = 1000000007;\\n\\n    public static void main(String[] args) {\\n\\n        solve();\\n        out.close();\\n\\n    }\\n\\n    static void solve() {\\n        int n = sc.nextInt();\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        if (n % a == 0) {\\n            out.println((n / a) * b);\\n        } else {\\n            out.println(((n / a) * b) + b );\\n        }\\n\\n    }\\n}\\n\\n\\n", "target": "34", "substitutes": {"br": ["bl", "bel", "bed", "ber", "p", "hr", "rb", "ch", "browser", "tr", "arr", "vr", "fr", "r", "bh", "io", "stream", "bc", "bridge", "sw", "src", "bs", "er", "dr", "mr", "orb", "BR", "sp", "img", "str", "bro", "Br", "sr", "err", "body", "gr", "reader", "obj", "buf", "bt", "cr", "bar", "ob", "boot"], "st": ["bl", "cl", "ut", "ste", "inst", "ust", "nt", "sth", "ST", "nd", "stable", "ss", "const", "ct", "sn", "std", "fr", "r", "start", "ft", "fe", "sw", "src", "first", "sl", "s", "est", "sp", "sa", "str", "ist", "string", "pt", "stri", "rest", " est", "ld", "sr", "St", "se", "sb", "sta", "ast", "sts", "rd", "cr", "stop", "bt", "ost", "rt", "th", "t"], "n": ["all", "nn", "none", "nc", "on", "nt", "ni", "count", "p", "size", "dn", "adj", "u", "na", "one", "num", "nu", "nan", "N", "span", "v", "cn", "l", "sn", "name", "r", "z", "un", "ny", "f", "s", "c", "inn", "ne", "m", "an", "x", "w", "np", "e", "left", "o", "d", "ns", "g", "ii", "network", "nb", "nw", "j", "net", "k", "norm", "no", "in", "not", "mn", "number", "y", "en", "t"], "a": ["ana", "aw", "anta", "p", "ia", "na", "u", "ad", "span", "za", "auto", "ba", "ar", "l", "data", "r", "aa", "z", "ha", "A", "aj", "aux", "oa", "tta", "f", "au", "s", "c", "ga", "at", "an", "ata", "action", "x", "sa", "ae", "ea", "e", "w", "ua", "ai", "code", "alpha", "o", "d", "ca", "ac", "j", "aaa", "ama", "as", "la", "ans", "area", "ab", "da", "y", "ma", "am", "va", "array"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "ri", "init", "io", "z", "info", "h", "abi", "f", "ci", "ui", "ini", "c", "key", "index", "m", "phi", "x", "mu", "uri", "w", "e", "ip", "di", "I", "eni", "ie", "ai", "q", "o", "gi", "d", "mi", "inner", "ii", "li", "field", "j", "oi", "me", "yi", "in", "y", "my", "ti", "fi"], "sc": ["this", "cl", "sche", "sci", "nc", "scope", "pc", "com", "ch", "sec", "server", " SC", "sub", "asc", "sh", "Sc", "SC", "screen", "exp", "io", "bc", "cs", "sw", "desc", "lc", "ci", "c", "console", "cy", "sp", "ec", "system", "uc", "cf", "soc", "zero", "cli", "sys", "sem", "se", "exec", "scan", "isc", "osc", "rc", "cc", "cms", "cam", "CS", "esc", "ctx", "cus", "sync"], "out": ["go", "buffer", "size", "ext", "ou", "screen", "r", "exp", "co", "check", "output", "w", "Out", "o", "result", "exec", "bin", "doc", "copy", "error", "post", "console", "window", "call", "print", "p", "line", "data", "name", "io", "input", "temp", "report", "user", "sum", "str", "again", "write", "up", "file", "IN", "self", "to", "sh", "point", "println", "x", "writer", "raw", "comment", "err", "pass", "obj", "in", "log", "cache", "can", "conf", "null", "table", "ch", "ex", "auto", "path", "page", "outer", "c", "OUT", "op", "object", "outs", "lock"], "mod": ["module", "pc", "id", "mode", "num", "sec", "amd", "asm", "debug", "ctr", "dc", "lib", "ms", "MOD", "fun", "m", "Mod", "min", "max", " ver", "loop", "gr", "scale", "log", "lock", " module"], "b": ["count", "p", "u", "rb", "ad", "v", "l", "ib", "r", "bf", "h", "z", "lb", "A", "f", "eb", "c", "ga", "m", "w", "x", "base", "an", "e", "o", "d", "g", "B", "ca", "body", "nb", "j", "sb", "bb", "bot", "y", "bar", "ab", "wb", "ob", "boot"]}}
{"code": "import java.util.Scanner;\\nimport java.util.HashMap;\\n \\nclass Main {\\n\tpublic static void main(String[] args) {\\n \\n\t    Scanner sc = new Scanner(System.in);\\n\t    int N = sc.nextInt();\\n\t    HashMap<Integer, Integer> map = new HashMap<>();\\n\t    for (int i = 1; i < N; i++) {\\n\t      int temp = sc.nextInt();\\n\t      Integer count = map.get(temp);\\n\t      if (count == null) { count = 1;} else { count++;}\\n\t      \\n\t      map.put(temp, count);\\n\t    }\\n\t    \\n\t    int ans = 0;\\n\t    for (int j = 1; j <= N; j++) {\\n\t      if (map.get(j) == null) { ans = 0;} else { ans = map.get(j);}\\n\t      System.out.println(ans);\\n\t    }\\n\t  }\\n}", "target": "12", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "ser", "sec", "ss", " SC", "sub", "asc", "sh", "Sc", "SC", "screen", "cs", "bc", "sw", "cv", "src", "ci", "c", "cer", " scr", "sp", "system", "sq", "uc", "ca", "cle", "sem", "se", "ner", " Sc", "anc", "exec", "scan", "osc", "rc", "cc", "cont", "sch", "ec", "esc", "ctx", "cus", "coll"], "N": ["MN", "Len", "S", "NA", "Count", "NL", "C", "J", "M", " n", "Size", "Y", "F", "Number", "Q", "NN", "P", "A", "Na", "Ni", "T", "I", "L", "R", "n", "B", "NR", "NM", "Ne", "V", "K", "NB", "D", "NT", "H", "Z", "NS", "Ns", "O", "number", "NI", "X"], "map": ["over", "module", "comb", "MAP", "scope", "age", "apper", "size", "dict", "rate", "table", "hash", "move", "mate", "le", "ap", "data", "maps", "mm", "use", "block", "co", "app", "cm", "pose", "where", "down", "wave", "model", "m", "list", "pack", "cap", "mp", "per", "min", "code", "set", "prev", "make", "open", "work", "up", "parse", "master", "scale", "type", "group", "address", "lock", "shape", "cache", "match", "batch", "pad", "array"], "i": ["hi", "pi", "ni", "p", "it", "u", "id", "xi", "ji", "v", "si", "ix", "ik", "start", "io", "iter", "z", "h", "f", "ci", "ui", "c", "index", "x", "ip", "di", "I", "ie", "ai", "gi", "mi", "n", "ii", "li", "oi", "in", "y", "ind"], "temp": ["tmp", "py", "unit", "api", "p", "test", "size", "id", "num", "multi", "tc", "stable", "tr", "v", "cu", "point", "start", "Temp", "z", "iter", "input", "cp", "length", "lc", "ci", "cm", "c", "tem", "pointer", "index", "w", "base", "I", "pt", "max", "gi", "shift", "n", "ii", "cli", "current", "thread", "template", "porary", "level", "fake"], "count": ["counter", "total", "cat", "parent", "p", "Count", "size", "core", "id", "num", "keep", "add", "path", "const", "l", "pool", "data", "name", "partial", "part", "start", "info", "len", "get", "length", "last", "s", "c", "sum", "key", "check", "weight", "depth", "list", "base", "carry", "col", "max", "code", "common", "n", "limit", "current", "found", "child", "type", "group", "level", "cc", "number", "inc", "cache", "batch", "act", "coll"], "ans": ["ana", "acts", "ars", "AN", "aned", "anas", "p", "vers", "anned", "na", "ases", "ins", "aus", "ks", "span", "anon", "lan", "acs", "aces", "asts", "a", "atan", "es", "ions", "ations", "ls", "eps", "cs", "ians", "lines", "s", "nas", "os", "cas", "ants", "an", "x", "cons", "ANS", "act", "leans", "n", "ns", "ents", "ras", "ats", "js", "anc", "aps", "outs", "as", "annot", "ons", "aning", "amps", "ays", "can", "ann"], "j": ["dj", "jj", "jc", "p", "size", "oj", "adj", "id", "u", "J", "bj", "ji", "v", "jp", "ix", "l", "ij", "fr", "ik", "part", "z", "h", "aj", "length", "f", "br", "journal", "c", "key", "jan", "m", "x", "jet", "ja", "ijk", "uj", "ie", "jit", "o", "jing", "d", "n", "aji", "ii", "b", "li", "js", "k", "obj", "jam", "jack", "kj", "job", "y", "jl", "jen", "jo"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tint wa,tuginoSaidai,hozon;\\n\t\twa = 0;\\n\t\tfinal int KOSU = N;\\n\t\tint[] kakaku = new int[KOSU];\\n\t\tint[] narabi = new int[KOSU]; \\n\t\tfor (int i=0;i<KOSU;i++) {\\n\t\t\tkakaku[i] = sc.nextInt();\\n\t\t}\\n\t\tArrays.sort(kakaku);\\n\t\tfor(int i=0;i<K;i++) {\\n\t\t\twa = wa +kakaku[i];\\n\t\t}\\n\t\tSystem.out.println(wa);\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "41", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "sf", "scope", "pc", "na", "ser", "com", "ch", "tc", "ss", "sec", "server", " SC", "cur", "sub", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "cv", "src", "lc", "lib", "cer", "c", "sp", "sa", "system", "sq", "uc", "sr", "ca", "sem", "se", "ner", "anc", "sb", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "parser", "spec", "ec", "esc", "sync"], "N": ["S", "NL", "C", "J", "M", " n", "Size", "U", "Y", "F", "NN", "P", "A", "T", "I", "Ni", "NC", "NP", "L", "R", "n", "Ne", "V", "NB", "ND", "D", "NT", "O", "Ns", "NS", "Z", "NE", "NI", "E", "X"], "K": ["KK", "S", "C", "J", "M", "U", "Y", "X", "F", "Q", "P", "T", "I", "KA", "PK", "L", "n", "V", "k", "D", "H", "Z", "O", "KI", "UK", "G", "KE", "W", "E"], "wa": ["aw", "hi", "wait", "www", "NA", "wo", "wr", "na", "sha", "wal", "wy", "aii", "za", "ba", "wan", "ya", "aa", "awa", "win", "ha", "sw", "pa", "appa", " w", "iw", "wake", "wave", "sea", "wi", "lambda", "w", "mu", "Na", "sa", "ja", "ww", "ta", "ai", "wt", "ca", "WA", "sem", "qa", "fa", "la", "wat", "da", "we", "ma", "W", "va", "xa", "Wa"], "tuginoSaidai": ["tuginoohao", "tuginoharhai", "tuginoohahi", "tugotojahi", "tuginoarai", "tugotojhai", "tugotoohhai", "tugotojao", "tuginoohai", "tuginoharai", "tuginojhai", "tuginoharahi", "tugotoohao", "tuginoohhai", "tuginojai", "tugotojai", "tugotoohai", "tuginoarao", "tuginojao", "tuginoarahi", "tuginojahi", "tuginoharao", "tugotoohahi", "tuginoarhai"], "hozon": ["shuzen", "shozan", "hozoin", "shuzan", "huzen", "hohen", "huzoin", "shozoin", "shozen", "shuzoin", "huzan", "shozon", "hrazen", "hozan", "hrazon", "hohan", "hohoin", "hohon", "huzon", "hozen", "shuzon", "hrazan", "hrazoin"], "KOSU": ["KoSu", "KOSUC", "KoSU", "kOVu", "NOSUP", "kOCu", "KosU", "KoSUP", "kOCU", "KosUC", "KOVUP", " KoSC", "kOSU", " KOSC", "KOTUP", "kOVUP", "KoSUC", "KOTC", "KOTu", "KOSUP", "kOVUC", "KOTUC", "KOVUC", "NOSu", "NOTU", "KoSC", "KASC", "KOsU", "kOSUME", "KOSu", " KoSU", "NOSU", "KOCUC", "KOVU", "KOTU", "KOCUP", "kOCUME", "kOCUP", "KosUP", "kOSUC", "kOSUP", "NOSUC", "kOVU", "NOTu", "KOSC", "KASU", " KOSu", "KOsu", " KoSUC", "KOsUP", "KOCu", "KASu", "KOCU", "KOSUME", " KOSUC", "KOCUME", "NOTUP", "KASUC", " KoSu", "KOsUME", "NOTUC", "KOVu", "kOSu", "KosUME", "Kosu"], "kakaku": ["kokuku", "akakedaku", "kerkaka", "kakeaku", "kadaku", "akakaka", "karaksaka", "kaksakra", "kakuku", " kamatsu", " kakoko", "karakaka", " kamaku", " kakakra", "kakeaka", "akakedatsu", "kanoko", "kekaku", "kakoko", " kadaku", "kakama", "kokaka", "kakeatsu", "kekatsu", "kamaku", "kekaki", "kakaki", "karakaru", " kakatsu", "karaksaru", "kakyatsu", "kamatsu", "kakedaki", "kakatsu", " kadama", "kaksoko", "kaksatsu", "kaksaru", "kaksaki", "kerkuku", "akakaku", "kakedaku", "kakyaka", "kakedaka", "karaksuku", "akakaki", "kerkaku", "kakakra", "kakedatsu", "kadama", "kokaku", "kakyaku", "kaksuku", "kakeama", "kamama", "kakaka", "kamaka", "kanaku", " kamama", "kekaka", " kakama", "akakedaka", "kadoko", "kokaru", "akakedaki", "kanakra", "kanama", " kadakra", "kerkaru", " kamaka", "akakatsu", " kakaka", "kakaru", "kadakra", "karaksaku", "kaksaku", "karakuku", "kaksaka", "kakyama", "kaksama", " kadoko", "karakaku"], "narabi": ["murabi", "rhaba", "rhabis", "narabis", "murabis", "usrabis", "naraba", "murabo", "usrabo", "rhabo", "usrabi", "muraba", "rhabi", "usraba", "narabo"], "i": ["bi", "pi", "ni", "iu", "p", "ami", "it", "u", "id", "qi", "xi", "wei", "ji", "v", "si", "ix", "l", "ri", "io", "z", "info", "f", "ci", "vi", "ui", "ini", "c", "index", "eni", "m", "x", "mu", "w", "uri", "e", "ip", "di", "I", "phi", "ie", "o", "gi", "d", "mi", "g", "ii", "b", "zi", "li", "j", "k", "oi", "yi", "in", "chi", "y", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tlong K = sc.nextLong();\\n\t\tint Q = sc.nextInt();\\n\t\t\\n\t\tlong[] seikai = new long[N];\\n\t\tfor (int i=0; i<Q; i++) {\\n\t\t\tint A = sc.nextInt();\\n\t\t\tseikai[A-1]++;\\n\t\t}\\n\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tfor (int i=0; i<N; i++) {\\n\t\t\tsb.append((K - (Q - seikai[i]) <= 0 ? \"No\" : \"Yes\") + \"\\n\");\\n\t\t}\\n\t\tSystem.out.println(sb);\\n\t}\\n}", "target": "102", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "sf", "scope", "pc", "class", "ch", "tc", "ss", "server", "sec", " SC", "cur", "asc", "sh", "search", "Sc", "SC", "bc", "cs", "sw", "cv", "src", "lc", "c", "cer", " scr", "sp", "str", "ec", "system", "sq", "uc", "ca", "se", "ner", " Sc", "anc", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "out", "esc", "ctx", "sync"], "N": ["Len", "S", "Num", "No", "NA", "NL", "C", "J", "M", "Size", "U", "Y", "F", "NN", "P", "T", "I", "Ni", "L", "R", "n", "B", "V", "D", "H", "Z", "O", "NS", "G", "W", "E", "X"], "K": ["S", "C", "J", "M", "U", "Y", "F", "P", "Sk", "T", "I", "KA", "PK", "L", "R", "B", "V", "k", "KR", "D", "H", "Z", "O", "G", "KS", "SK", "W", "E", "X"], "Q": ["S", "C", "J", "QL", "M", "Size", "CH", "U", "Y", "Qu", "F", "P", "Ma", "Ch", "T", "I", "q", "L", "R", "Query", "B", "V", "NB", "D", "H", "Z", "O", "G", "MQ", "W", "E", "X"], "seikai": ["seeka", "seekao", "seikhao", "seikhau", "seikka", "peikkao", "peikkau", "seikau", "seikkao", "peicai", "seicai", "seikkasi", "seekasi", "meikai", "seikae", "peikkai", "seikkai", "meikau", "meekasi", "peica", "seiskai", "seikha", "seiska", "meekai", "peicae", "peikka", "seicau", "seekau", "seikkae", "seiskasi", "meekau", "peikao", "seikhai", "meikasi", "peika", "meeka", "peikau", "seekai", "seikkau", "peikae", "seika", "seiskau", "seikao", "seicae", "seiskae", "seica", "peikai", "meika", "seikasi", "peicau"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "jp", "si", "ix", "a", "l", "ri", "io", "z", "info", "abi", "f", "ci", "ui", "ini", "index", "phi", "x", "mu", "uri", "adi", "ip", "e", "di", "I", "ie", "ai", "q", "o", "gi", "mi", "n", "ii", "b", "zi", "li", "j", "k", "oi", "yi", "in", "chi", "y", "ki", "ti", "fi"], "A": ["Info", "S", "NA", "C", "J", "AA", "M", "Next", "LA", "a", "U", "Y", "Array", "Si", "Sa", "F", "P", "Ma", "Ang", "Na", "API", "PI", "II", "I", "ai", "L", " I", "Alpha", "B", "Ar", "V", "O", "Z", "AI", "CA", "G", "X"], "sb": ["bl", "java", "ub", "sf", "bm", "sth", "buffer", "mb", "SB", "pb", "abb", "rb", "bj", "obb", "zb", "usb", "ib", "cb", "sv", "db", "ls", "bf", "bh", "bc", "BB", "kb", "lb", "gb", "bsp", "eb", "bs", "src", "s", "orb", "bag", " SB", "sa", "b", "bps", "nb", "bg", "su", "buf", "bb", "BP", "xb", "bd", "lab", "bt", "sg", "wb", "bp"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main\\n{\\n    public static void main(String []args) throws IOException {\\n    \tFastScanner in  = new FastScanner(System.in);\\n    \tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false);\\n    \tsolve(in, out);\\n    \tin.close();\\n    \tout.close();\\n    }\\n    static long gcd(long a, long b){ return (b==0) ? a : gcd(b, a%b); }\\n    static int gcd(int a, int b){ return (b==0) ? a : gcd(b, a%b); }\\n    static class FastScanner{\\n\tBufferedReader reader;\\n\tStringTokenizer st;\\n\tFastScanner(InputStream stream){reader=new BufferedReader(new InputStreamReader(stream));st=null;}\\n\tString next(){while(st == null || !st.hasMoreTokens()){try{String line = reader.readLine();if(line == null){return null;}\\n\t     st = new StringTokenizer(line);}catch (Exception e){throw new RuntimeException();}}return st.nextToken();}\\n\tString nextLine()  {String s=null;try{s=reader.readLine();}catch(IOException e){e.printStackTrace();}return s;}\\n\tint    nextInt()   {return Integer.parseInt(next());}\\n\tlong   nextLong()  {return Long.parseLong(next());}\\n\tdouble nextDouble(){return Double.parseDouble(next());}\\n\tchar   nextChar()  {return next().charAt(0);}\\n\tint[]  nextIntArray(int n)         {int[] arr= new int[n];   int i=0;while(i<n){arr[i++]=nextInt();}  return arr;}\\n\tlong[] nextLongArray(int n)        {long[]arr= new long[n];  int i=0;while(i<n){arr[i++]=nextLong();} return arr;}\\n\tint[]  nextIntArrayOneBased(int n) {int[] arr= new int[n+1]; int i=1;while(i<=n){arr[i++]=nextInt();} return arr;}\\n\tlong[] nextLongArrayOneBased(int n){long[]arr= new long[n+1];int i=1;while(i<=n){arr[i++]=nextLong();}return arr;}\\n\tvoid   close(){try{reader.close();}catch(IOException e){e.printStackTrace();}}\\n    }\\n    \\n    /********* SOLUTION STARTS HERE ************/\\n    \\n    private static void solve(FastScanner in, PrintWriter out){\\n        int n = in.nextInt();\\n        while(true){\\n            if(isPrime(n)) {out.println(n);break;}\\n            ++n;\\n        }\\n        \\n    }\\n    public static boolean isPrime(int n){\\n        for(int i=2;i*i<=n;i++){\\n            if(n%i==0) return false;\\n        }\\n        return true;\\n    }\\n    /************* SOLUTION ENDS HERE **********/\\n}", "target": "183", "substitutes": {"in": ["self", "this", "isin", "buffer", "id", "login", "ins", "ln", "din", "inside", "path", "url", "l", "data", "name", "con", "lin", "r", "init", "sin", "win", "h", "input", "source", "method", "In", "f", "image", "c", "ini", "inn", "arg", "nin", "cin", "ssl", "socket", "gin", "inf", "inner", "err", "kin", "again", "work", "exec", "pin", "scan", "log", "bin", "file", "inc", "pull", "IN"], "out": ["this", "parent", "call", "client", "buffer", "null", "server", "ex", "v", "path", "png", "name", "r", "io", "init", "timeout", "temp", "input", "conn", "outer", "image", "user", "output", "w", "x", "OUT", "str", "plain", "writer", "string", "code", "Out", "o", "inner", "cli", "err", "again", "write", "net", "exec", "obj", "connection", "log", "bin", "file", "outs", "lock", "inc", "doc", "cache", "error", "IN", "window", "sync"], "a": ["p", "ia", "null", "u", "na", "sha", "ad", "za", "ba", "l", "name", "aa", "h", "A", "oa", "pa", "f", "au", "c", "ga", "an", "sa", "ae", "e", "ea", "alpha", "o", "d", "ca", "ac", "wa", "aaa", "qa", "aba", "ama", "fa", "as", "la", "y", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["buff", "bi", "fb", "count", "p", "mb", "u", "pb", "id", "rb", "ad", "binary", "v", "ba", "l", "db", "ib", "r", "bf", "bh", "bytes", "be", "aa", "z", "h", "A", "lb", "gb", "bs", "f", "bad", "eb", "c", "ga", "m", "w", "x", "base", "e", "o", "d", "g", "B", "body", "nb", "sb", "bb", "bd", "fa", "bin", "y", "as", "bar", "ab", "wb"], "reader": ["client", "trans", "buffer", "loader", "null", "ser", "server", "l", "player", "ri", "r", "oder", "io", "iter", "row", "input", "ler", "er", "dr", "feed", "w", "or", "e", "writer", "per", "ry", "inner", "rot", "rer", "riter", "rr", "ner", "handler", "layer", "rc", "worker", "rx", "keeper", "parser", "driver", "reading", "read", "Reader"], "st": ["ut", "ste", "inst", "space", "sth", "ST", "p", "nd", "stable", "ss", "pr", "const", "l", "sh", "ct", "fr", "std", "sn", "r", "sign", "store", "start", "stage", "ft", "fe", "sw", "src", "mt", "dr", "sl", "style", "stress", "x", "pe", "sp", "sa", "str", "est", "ist", "string", "pt", "stri", "rest", "d", "Str", "ld", "sr", "St", "se", "sty", "sb", "storage", "sta", "step", "ast", "sts", "rd", "struct", "cr", "ost", "stop", "tt", "rt", "sc", "t", "strip"], "stream": ["this", "transform", "client", "trans", "buffer", "null", "server", "view", "v", "pool", "data", "r", "io", "source", "row", "input", "temp", "sw", "channel", "resource", "f", "document", "user", "feed", "m", "output", "w", "e", "socket", "string", "writer", "raw", "Stream", "inner", "result", "handler", "form", "connection", "response", "serial", "file", "lock", "driver", "port"], "line": ["cl", "unit", "p", "character", "url", "l", "page", "data", "le", "lin", "part", "r", "entry", "block", "iter", "row", "link", "end", "cell", "char", "f", "lines", "letter", "sl", "lc", "c", "style", "shell", "lo", "pe", "str", "e", "text", "string", "frame", "code", "LINE", "se", "pass", "inline", "up", "word", "cr", "lf", "Line", "strip", "sync"], "s": [" objects", "S", "ts", " parts", "space", "p", "less", "ins", "ss", "rs", "si", "strings", "l", "is", "sign", "ls", "r", "ws", "h", "ps", "bs", "f", "lines", "session", "sl", "ings", "c", "states", "shell", "os", "ds", "m", "e", "str", "ssl", "string", "ses", "abs", "o", "d", "ns", "g", "sync", "services", " samples", "gs", "sym", " lines", " ss", "js", "storage", "as", "comments", "spec", "t", " strings"], "n": ["all", "ot", "none", "nn", "nt", "count", "p", "size", "u", "nor", "na", "num", "nan", "N", "span", "v", "l", "sn", "name", "ng", "r", "init", "z", "f", "nat", "c", "ne", "m", "w", "x", "an", "nin", "e", "node", "o", "d", "g", "ns", "network", "j", "net", "k", "norm", "no", "not", "number", "y", "en", "t", " N"], "arr": ["bl", "enc", "cat", "ml", "val", "dict", "arm", "adj", "hr", "ch", "par", "map", "stack", "addr", "ar", "data", "el", "Array", "fr", "db", "r", "dat", "yr", "adr", "aa", "ask", "iter", "attr", "batch", "app", "aj", "dr", "air", "br", "au", "arg", "var", "list", "img", "ev", "str", "acc", "cap", "arch", "err", "abc", "gr", "rr", "j", "aaa", "frac", "att", "ait", "av", "bar", "war", "cache", "iq", "ind", "act", "array", "ann"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "ami", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "l", "mini", "is", "ri", "io", "init", "info", "z", "abi", "f", "lc", "ci", "vi", "ui", "ini", "key", "index", "m", "phi", "x", "eni", "uri", "di", "ip", "e", "I", "ie", "ai", "o", "gi", "d", "mi", "g", "ii", "li", "j", "oi", "y", "ki", "ti", "fi"]}}
{"code": "import java.math.BigInteger;\\nimport java.math.BigDecimal;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner input=new Scanner(System.in);\\n\t\tint n,f=0;\\n\t\tBigInteger a[]=new BigInteger[100005];\\n\t\tn=input.nextInt();\\n\t\tBigInteger b=new BigInteger(\"1\");\\n\t\tBigInteger c=new BigInteger(\"1000000000000000000\");\\n\t\tBigInteger d=new BigInteger(\"0\");\\n\t\tfor(int i=1;i<=n;i++){\\n\t\t\ta[i]=input.nextBigInteger();\\n\t\t\tif(a[i].equals(d)){\\n\t\t\t\tf=2;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(f==2){\\n\t\t\tSystem.out.println(\"0\");\\n\t\t}\\n\t\telse{\\n\t\t\tfor(int i=1;i<=n;i++){\\n\t\t\t\tb=b.multiply(a[i]);\\n\t\t\t\tif(b.compareTo(c)>0){\\n\t\t\t\t\tf=1;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif(f==1){\\n\t\t\tSystem.out.println(\"-1\");\\n\t\t}\\n\t\t\telse{\\n\t\t\tSystem.out.println(b);\\n\t\t}\\n\t\t}\\n\t\t\\n\t\t\\n\t}\\n\\n\\n}\\n", "target": "27", "substitutes": {"input": ["this", "self", "IO", "client", "focus", "initial", "buffer", "loader", "http", "regular", "next", "server", "view", "json", "l", "kernel", "request", "control", "r", "io", "iter", "source", "method", "batch", "error", "machine", "stream", "session", "s", "image", "instance", "feed", "forward", "output", "config", "Input", "submit", "system", "inf", "inner", "context", "again", "reader", "form", "parse", "in", "storage", "child", "iterator", "inc", "flow", "driver", "pull", "IN", "out"], "n": ["nn", "nc", "nt", "ni", "p", "size", "u", "num", "nan", "N", "v", "l", "out", "sn", "r", "z", "un", "fn", "s", "ne", "m", "w", "x", "e", "o", "ns", "g", "network", "nb", "j", "net", "k", "in", "y", "en", "t"], "f": ["fo", "conf", "function", "sf", "fl", "p", "u", "v", "ff", "l", "F", "fs", "z", "h", "info", "df", "fit", "fen", "fd", "s", "fn", "feed", "fun", "m", "w", "x", "e", "full", "fp", "q", "rf", "o", "inf", "g", "fold", "j", "flat", "form", "found", "fa", "y", "lf", "of", "t", "free"], "a": ["p", "u", "na", "ad", "auto", "ba", "l", "r", "aa", "A", "app", "aux", "au", "s", "ga", "at", "an", "sa", "ada", "ea", "ae", "e", "alpha", "o", "ca", "ac", "aaa", "ama", "as", "la", "area", "ab", "da", "ma", "am", "va", "array", "audio"], "b": ["fb", "bi", "p", "u", "rb", "ad", "binary", "v", "auto", "ba", "l", "db", "cb", "ib", "r", "bf", "be", "h", "bc", "lb", "gb", "bs", "s", "m", "x", "base", "e", "o", "g", "B", "body", "nb", "k", "sb", "bb", "bd", "y", "wb", "ab", "bar", "ob", "boot"], "c": ["cat", "p", "C", "u", "ch", "v", "l", "cu", "con", "r", "sc", "z", "cs", "h", "ci", "dc", "m", "x", "e", "col", "cf", "q", "o", "g", "ca", "ac", "k", "cd", "cc", "y", "cr", "cy"], "d": ["sd", "ded", "p", "u", "nd", "ad", "v", "dh", "l", "db", "r", "df", "z", "fd", "dc", "s", "ds", "m", "e", "di", "dad", "o", "dd", "g", "dy", "j", "D", "bd", "cd", "da", "dev", "t"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "slice", "u", "id", "one", "multi", "qi", "xi", "ji", "v", "si", "ix", "line", "page", "is", "ri", "io", "init", "info", "z", "abi", "source", "h", "lc", "ci", "ui", "ini", "key", "index", "eni", "phi", "mu", "uri", "e", "di", "ip", "I", "ie", "ai", "o", "gi", "mi", "inner", "cli", "ii", "li", "j", "oi", "yi", "in", "y", "my", "t", "ti", "fi"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] srgs){\\n        Scanner sc=new Scanner(System.in);\\n\\n        int n=sc.nextInt();\\n        String a=sc.next(),b=sc.next();\\n        for(int i=0;i<n;i++){\\n            System.out.print(a.charAt(i));\\n            System.out.print(b.charAt(i));\\n        }\\n    }\\n}\\n", "target": "200", "substitutes": {"srgs": ["srG", "crg", "srg", "crgin", "rg", "rgin", "srgin", "crgs", "rG", " srgin", " srg", "rgs", " srG", "crG"], "sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "ser", "ch", "server", "ss", "cur", "asc", "sh", "search", "Sc", "SC", "cs", "bc", "sw", "src", "lc", "ci", "c", "cer", "sp", "sq", "uc", "soc", "ca", "sem", "se", "ner", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "cus", "sync"], "n": ["nn", "nc", "ni", "p", "adj", "u", "nor", "num", "N", "v", "l", "r", "z", "h", "f", "conn", "s", "c", "ne", "m", "w", "x", "nin", "e", "o", "d", "ns", "nb", "ner", "j", "net", "k", "in", "number", "en"], "a": ["p", "ad", "ba", "data", "name", "aa", "A", "input", "aux", "pa", "tta", "s", "c", "ga", "an", "ata", "base", "sa", "ae", "aka", "alpha", "af", "ca", "abc", "ac", "aaa", "sta", "ama", "art", "as", "la", "asa", "area", "ab", "da", "am", "va", "array", "audio"], "b": ["fb", "bing", "p", "mb", "pb", "abb", "ba", "l", "bis", "db", "cb", "r", "be", "bs", "f", "bas", "eb", "s", "br", "c", "base", "e", "erb", "string", "o", "B", "sb", "bb", "beta", "bin", "y", "wb", "ab", "emb", "bar", "ob"], "i": ["bi", "pi", "ori", "ni", "p", "iu", "slice", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "l", "ri", "io", "h", "z", "f", "ci", "vi", "ui", "ini", "m", "eni", "x", "uri", "e", "di", "I", "ai", "o", "gi", "d", "ii", "zi", "li", "j", "oi", "in", "chi", "ti", "fi"]}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.Comparator;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    static int[] w = new int[100010];\\n    static int[] v = new int[100010];\\n    static int[][] dp = new int[110][100010];\\n    static int k;\\n\\n    static int chmin(int a, int b) {\\n        if (a > b) {\\n            a = b;\\n            return a;\\n        }\\n        return a;\\n    }\\n\\n    static int chmax(int a, int b) {\\n        if (a < b) {\\n            a = b;\\n            return a;\\n        }\\n        return a;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int k = sc.nextInt();\\n        int count = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            if (sc.nextInt() >= k)\\n                count++;\\n        }\\n\\n        System.out.println(count);\\n    }\\n}\\n", "target": "145", "substitutes": {"w": ["aw", "wp", "u", "ad", "fw", "wd", "ws", "win", "h", "z", "sw", "f", "width", "wx", "weight", "x", "kw", "ww", "max", "q", "hw", "g", "ow", "wa", "work", "wb", "we", "W", "window"], "v": ["p", "u", "l", "sv", "value", "h", "f", "vi", "vs", "uv", "c", "vv", "m", "x", "e", "vm", "q", "o", "g", "vp", "ii", "iv", "V", "j", "y", "vd", "va"], "dp": ["nc", "pi", "p", "jp", "ap", "db", "ep", "aa", "ph", "cp", "pa", "dc", "ga", "np", "ip", "mp", "hp", "alpha", "gp", "dd", "tp", "dt", "push", "sup", "bb", "beta", "pp", "da", "dev"], "k": ["sk", "p", "ka", "u", "id", "ko", "ad", "ch", "ks", "ke", "l", "z", "h", "f", "ok", "s", "c", "key", "ak", "m", "an", "x", "e", "kw", "q", "o", "d", "kn", "g", "ac", "j", "K", "_", "in", "as", "y"], "a": ["p", "ia", "u", "na", "ad", "access", "auto", "ba", "ar", "l", "aa", "h", "z", "A", "app", "oa", "pa", "f", "au", "c", "ga", "ak", "x", "an", "sa", "ae", "e", "ea", "ada", "active", "ai", "code", "alpha", "o", "af", "ca", "ac", "qa", "aaa", "wa", "ama", "fa", "as", "y", "la", "area", "ab", "da", "am", "va", "aj"], "b": ["bi", "fb", "p", "u", "pb", "rb", "ba", "l", "ib", "db", "bf", "r", "aa", "z", "h", "lb", "bc", "bs", "f", "eb", "s", "c", "x", "base", "an", "ae", "e", "o", "d", "B", "nb", "j", "sb", "bb", "y", "as", "wb", "ab"], "sc": ["cl", "sche", "enc", "sci", "nc", "sk", "scope", "pc", "core", "ser", "com", "ch", "ss", " SC", "si", "cur", "sub", "asc", "sh", "search", "Sc", "SC", "r", "bc", "cs", "src", "cor", "lc", "s", "c", "cer", "sp", "str", "system", "sq", "uc", "soc", "sr", "ca", "se", "ner", " Sc", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "cus", "sync"], "n": ["nn", "nc", "nt", "p", "u", "nor", "num", "N", "l", "z", "h", "len", "f", "s", "c", "ne", "m", "x", "e", "min", "o", "d", "ns", "nb", "j", "net", "number", "y", "en"], "count": ["counter", "total", "offset", "call", "nt", "age", "Count", "size", "p", "now", "id", "keep", "add", "part", "start", "h", "info", "cond", "length", "f", "c", "sum", "key", "check", "index", "weight", "depth", "base", "list", "active", "left", "code", "d", "limit", "work", "child", "found", "type", "group", "level", "number", "cache", "out", "coll"], "i": ["bi", "hi", "on", "pi", "ni", "p", "it", "u", "id", "qi", "xi", "ji", "si", "ix", "ri", "init", "h", "abi", "f", "ci", "ui", "c", "ini", "index", "phi", "x", "ip", "di", "I", "ie", "ai", "q", "o", "gi", "mi", "ii", "li", "j", "oi", "chi", "y", "ind", "fi"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        FastScanner sc = new FastScanner(System.in);\\n        int n = sc.nextInt();\\n        int digit = String.valueOf(n).length();\\n        int count = 0;\\n        for (int i = 1; i < digit; i++) {\\n            if (i % 2 == 1) {\\n                int ten = 1;\\n                for (int j = 1; j < i; j++) {\\n                    ten *= 10;\\n                }\\n                count += 9 * ten;\\n            }\\n        }\\n        if (digit % 2 == 1) {\\n            int ten = 1;\\n            for (int i = 1; i < digit; i++) {\\n                ten *= 10;\\n            }\\n\\n            count += ((n / ten - 1) * ten) + n % ten + 1;\\n        }\\n\\n        System.out.println(count);\\n    }\\n\\n\\n    static class FastScanner {\\n        private BufferedReader reader;\\n        private StringTokenizer tokenizer;\\n\\n        public FastScanner(InputStream in) {\\n            reader = new BufferedReader(new InputStreamReader(in));\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public String nextLine() {\\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    return reader.readLine();\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n\\n            return tokenizer.nextToken(\"\\n\");\\n        }\\n\\n        public long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n\\n        public long[] nextLongArray(int n) {\\n            long[] a = new long[n];\\n            for (int i = 0; i < n; i++)\\n                a[i] = nextLong();\\n            return a;\\n        }\\n    }\\n}", "target": "135", "substitutes": {"sc": ["this", "cl", "mc", "nc", "sci", "scope", "pc", "sec", " SC", "cur", "sub", "asc", "sh", "Sc", "SC", "ct", "bc", "cs", "sw", "lc", "ci", "c", "sp", "acc", "ec", "system", "sq", "uc", "ca", "ner", " Sc", "ocr", "anc", "scan", "osc", "rc", "cc", "cr", "out", "esc", "sync"], "n": ["nn", "nc", "nt", "ni", "p", "size", "dn", "u", "num", "nu", "N", "ln", "v", "cn", "l", "sn", "name", "ng", "r", "z", "nr", "len", "f", "fn", "s", "c", "ne", "m", "x", " ni", "nin", "e", "o", "d", "ns", "g", "b", "network", "nb", "pn", "net", "k", "no", "mn", "number", "y", "en", "t"], "digit": ["pattern", "div", "unit", "nt", "integer", "it", "bug", "id", "num", "xi", "character", "span", "date", "version", "uni", "part", "init", "iter", "vert", "h", "significant", "letter", "feature", "pointer", "format", "index", "x", "depth", "numbered", "di", "month", "xxx", "dimension", "oct", "alpha", "d", "zero", "major", "dt", "dig", "frac", "position", "factor", "number", "trial", "tri", "inc", "central", "starter", "dec", "dot", "t"], "count": ["counter", "total", "cat", "offset", "nt", "age", "Count", "size", "p", "test", "id", "one", "num", "more", "cur", "const", "start", "z", "batch", "len", "info", "length", "f", "c", "sum", "check", "weight", "depth", "base", "list", "carry", "col", "max", "code", "d", "b", "limit", "now", "current", "work", "child", "found", "log", "number", "cache", "th", "en", "t"], "i": ["bi", "pi", "ori", "ni", "iu", "p", "integer", "it", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "l", "mini", "ij", "ik", "ri", "start", "io", "init", "z", "info", "f", "ci", "vi", "ui", "ini", "c", "index", "eni", "phi", "x", "m", "uri", "e", "ip", "di", "I", "ind", "ie", "ai", "q", "o", "gi", "d", "mi", "inf", "ii", "b", "zi", "li", "oi", "yi", "chi", "y", "my", "ti", "fi"], "ten": ["total", "zen", "num", "ctr", "fort", "put", "width", "tin", "issa", "mult", "atten", "opt", "ena", "test", "project", "next", "version", "const", "center", "wen", "z", "length", "eight", "eni", "ta", "pent", "number", "off", "t", "te", "amount", "don", "duration", "four", "ele", "fe", "floor", "even", "wt", "tan", "flat", "den", "nine", "en", "ti", "ven", "lat", "een", "one", "five", "inth", "vert", "fen", "teen", "text", "two", "token", "rent", "zero", "fat", "Ten", "factor", "tri", "six"], "j": ["bi", "jj", "jc", "ni", "p", "it", "u", "J", "qi", "bj", "ji", "v", "jp", "si", "l", "ij", "r", "z", "end", "f", "vi", "ui", "key", "x", "e", "ja", "ie", "q", "o", "gi", "d", "g", "ii", "b", "li", "js", "k", "y", "ind", "aj"], "reader": ["rar", "this", "client", "buffer", "processor", "null", "table", "ro", "server", "url", "line", "l", "data", "ri", "r", "oder", "entry", "io", "iter", "stream", "row", "input", "source", "ler", "resource", "er", "f", "report", "feed", "or", "e", "writer", "per", "socket", "token", "read", "ry", "inner", "content", "rer", "rr", "handler", "ner", "ger", "connection", "layer", "rc", "manager", "worker", "file", "parser", "driver", "reading", "loader", "builder", "Reader"], "tokenizer": [" tokenizers", "normalization", "authorener", "tokenener", " tokenizing", "initialiter", "okeniter", "characterizing", " tokenener", "Tokenization", " tokenize", "Tokenize", "tokeniner", "okenizing", "tokenize", "initialize", "okenizer", "recognener", "recognizer", "tokenler", " tokeniser", " tokenization", "optimener", " tokeniter", "authoriser", "initialner", "authoriner", "okenize", "recogniner", "optimiter", "optimizer", " tokenler", "Tokenized", "authoriter", "initialiser", "tokenization", "characterize", "okenner", "okenler", " tokenner", "okenized", "tokenized", "tokeniter", "tokeniser", "initializer", "optimler", "normalizer", "normaliser", "authorizers", "authorizer", "okeniner", "okenization", "authorner", "recogniter", "initializers", "Tokenner", "Tokeniser", "tokenner", "tokenizers", "characteriser", " tokenized", "characterizer", "okeniser", "okenizers", "normalize", "tokenizing", "authorize", "Tokenizer", "okenener"], "in": ["p", "buffer", "it", "id", "login", "ins", "din", "ex", "path", "line", "l", "data", "is", "lin", "r", "io", "source", "win", "stream", "input", "resource", "In", "f", "user", "image", "inn", "ini", "c", "m", "OUT", "x", "socket", "string", "inf", "inner", "d", "b", "err", "pass", "connection", "log", "bin", "readable", "file", "as", "inc", "doc", "IN", "out"], "a": ["p", "ia", "na", "u", "ad", "span", "ba", "aa", "z", "A", "aj", "tta", "au", "c", "ga", "at", "an", "ata", "sa", "ae", "ea", "ai", "alpha", "abs", "b", "abc", "ac", "aaa", "ama", "as", "la", "y", "area", "ab", "da", "ma", "am", "va", "array"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    Scanner stdin = new Scanner(System.in);\\n    int n = stdin.nextInt();\\n    int min = 0;\\n    int max = 0;\\n    long sum = 0;\\n\\n    for (int i = 0; i < n; i++) {\\n      int m = stdin.nextInt();\\n      sum += m;\\n\\n      if (i == 0) {\\n        min = m;\\n        max = m;\\n      } else {\\n        min = Math.min(min, m);\\n        max = Math.max(max, m);\\n      }\\n    }\\n\\n    System.out.printf(\"%d %d %d%n\", min, max, sum);\\n  }\\n\\n}", "target": "21", "substitutes": {"stdin": ["adin", "sthin", "sthins", "sthbin", "astn", "stdbin", "stdout", "stdins", "rdIn", "STDn", "stdn", "astin", "STDin", " stdn", " stdout", " stdIN", "astIN", "rdout", " stdins", "adins", "rdins", "rdin", "adbin", "adout", "STDIN", "STDout", "stdIN", " stdbin", "stdIn", "sthout", "astout", " stdIn", "adIn"], "n": ["nn", "nc", "nt", "ni", "count", "p", "u", "N", "span", "l", "sn", "z", "h", "len", "f", "s", "c", "ne", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "mn", "y", "en", "t"], "min": ["module", "don", "count", "p", "size", "id", "minute", "minimum", "span", "mins", "date", "average", "version", "pre", "sort", "name", "partial", "sign", "mini", "diff", "start", "sample", "init", "sin", "lower", "first", "length", "f", "cm", "index", "x", "base", "rand", "ind", "MIN", "skip", "code", "d", "mine", "dim", "small", "limit", "pos", "in", "scale", "position", "from", "mean", "address", "mid", "range", "Min", "en", "default"], "max": ["pad", "head", "total", "conf", "cat", "count", "p", "size", "patch", "id", "nd", "ad", "v", "average", "out", "point", "part", "diff", "r", "power", "start", "right", "end", "first", "last", "best", "az", "c", "ax", "key", "index", "w", "x", "mad", "base", "depth", "cap", "rand", "pop", "q", "rest", "d", "Max", "plus", "with", "rank", "cover", "k", "work", "step", "scale", "mod", "mean", "y", "wrap", "MAX", "range", "ma", "act", "med"], "sum": ["um", "div", "total", "cat", "conf", "unit", " total", "count", "size", "cost", "num", "multi", "span", "si", "average", "vol", " count", "sh", "part", "diff", "mm", "start", "mass", "spread", "sim", "len", "cal", "cm", "c", "weight", "mu", "cum", "ram", "mix", "alpha", "miss", "skip", "Sum", "mit", "dim", "norm", "frac", "scale", "mod", "mean", "ma", "am", "out", "mem"], "i": ["bi", "im", "pi", "ni", "p", "iu", "u", "id", "qi", "xi", "v", "si", "l", "mini", "start", "z", "f", "ci", "ui", "ini", "c", "index", "phi", "x", "mu", "e", "ip", "di", "I", "ai", "gi", "d", "mi", "ii", "li", "j", "chi", "y", "ind", "t", "ti", "fi"], "m": ["um", "dm", "im", "module", "p", "mon", "u", "multi", "om", "span", "M", "v", "l", "mm", "part", "h", "z", "f", "cm", "ms", "c", "fm", "pm", "tm", "x", "mu", "w", "e", "gm", "month", "md", "o", "d", "mi", "b", "dim", "j", "k", "me", "sm", "hm", "mn", "y", "am", "t"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\ttry {\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(\\n\t\t\t\t\tSystem.in));\\n\\n\t\t\tString[] strs = (String[]) br.readLine().split(\" \");\\n\t\t\tint num1 = Integer.parseInt(strs[0]);\\n\t\t\tint num2 = Integer.parseInt(strs[1]);\\n\t\t\tint num3 = Integer.parseInt(strs[2]);\\n\\n\t\t\tif (num1 < num2 && num2< num3) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t}\\n\t\t} catch (Exception e) {\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t}\\n\\n}", "target": "168", "substitutes": {"br": ["div", "ber", "nor", "hr", "rb", "browser", "tr", " sr", "arr", " Br", "res", "ar", "cb", "fr", "r", "yr", "io", " str", "bridge", "bc", "bs", "er", "dr", "orb", "mr", " tr", "BR", "img", "ibr", "str", "HR", "bro", "erb", "Br", "abs", "sr", "b", "B", "err", "buf", "ocr", "bd", "cr", "bar", "bp", "Reader"], "strs": ["striabs", "Strs", "stuments", "dicts", "stril", "brp", "strt", " strls", "hrs", "stringabs", " strl", "stves", "strl", " strS", "strings", " strv", " strabs", "strS", "strp", "stringS", "stris", "iters", " strves", "brlines", "dictt", "struments", " strlines", "hrv", "strls", "strv", " struments", "dictv", " strp", "strabs", "brs", "Strls", "striS", "sts", "iterves", " strt", "hrt", "stringl", "strlines", "Strlines", "Strp", "brls", "iteruments", "strves"], "num1": ["noOne", "text001", "textone", "number1", " numOne", " num8", "sumone", "int001", "num001", "sum1", "text1", "no1", "sum001", "numberOne", "numOne", "no2", "num8", "int1", "sum2", "number2", "numone", "intone", "text2", "number8", "int2", "no8"], "num2": ["num42", "intTwo", "NumB", "NUM82", "int42", "number62", " num42", "numberTwo", " numTwo", "NUMTwo", " num62", "no42", "sum1", "no82", " num5", "Num2", "number82", "num62", "no2", "Num5", "sum2", "sumB", "numB", "Num1", "number2", "NUM2", "int82", "int2", "noTwo", "numTwo", "num5", " num82", "sum5", " numB", "NUM62", "num82"], "num3": ["um3", " num7", "NumThird", "miss7", " numThird", "numThree", "numThird", " num5", "norm3", "missThree", "num4", "miss3", "Num3", " num4", "um2", "norm5", "Num5", "umThree", " numThree", "miss2", "Num4", "norm4", "normThird", "num7", "um7", "num5"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString str = sc.next();\\n\t\tint n = str.length();\\n\t\tString s1 = str.substring(0, (n - 1) / 2);\\n\t\tString s2 = str.substring((n + 3) / 2 - 1, n);\\n\t\t//System.out.println(s1);\\n\t\t//System.out.println(s2);\\n\t\tchar[] a = s1.toCharArray();\\n\t\tchar[] b = s2.toCharArray();\\n\t\tint a1 = 0;\\n\t\tint b1 = 0;//\u56de\u6587\u306b\u306a\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u2460\u5897\u3084\u3059\u21920\u306a\u3089\u3070\u56de\u6587\\n\t\tfor (int i = 0; i < (n - 1) / 4; i++) {\\n\t\t\tif (a[i] != a[(n - 1) / 2 - 1 - i]) {\\n\t\t\t\ta1++;\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = 0; i < (n - 1) / 4; i++) {\\n\t\t\tif (b[i] != b[(n - 1) / 2 - 1 - i]) {\\n\t\t\t\tb1++;\\n\t\t\t}\\n\t\t}\\n\t\tchar[] c = str.toCharArray();\\n\t\tint c1 = 0;\\n\t\tfor (int i = 0; i < (n - 1) / 2; i++) {\\n\\n\t\t\tif (c[i] != c[n - 1 - i]) {\\n\t\t\t\tc1++;\\n\t\t\t}\\n\t\t}\\n\t\tif (a1 == 0 && b1 == 0 && c1 == 0) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t}\\n\\n}\\n", "target": "123", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "pc", "ch", "sec", "ss", " SC", "sub", "sh", "Sc", "SC", "cb", "r", "bc", "desc", "sw", "cs", "src", "ci", "sl", "c", " scr", "sp", "acc", "st", "uc", "g", "se", "ner", " Sc", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "spec", "esc", "sync"], "str": ["div", "enc", "p", "wr", "hr", "tr", "pr", "arr", "i", "strings", "cur", "STR", "data", "fr", "name", "r", "iter", "input", "char", "f", "br", "dr", "sl", "s", "c", "x", "sp", "st", "text", "string", "kr", "stri", "Str", "inner", "sync", "sr", "err", "gr", "ner", "obj", "in", "txt", "cr", "doc", "strip", "coll"], "n": ["nn", "nc", "nt", "ni", "count", "p", "size", "u", "na", "nor", "num", "nu", "N", "v", "i", "l", "a", "sn", "name", "ng", "r", "z", "nl", "len", "nr", "length", "f", "conn", "s", "c", "ne", "m", "w", "x", "o", "d", "ns", "b", "nb", "j", "net", "k", "no", "in", "mn", "t"], "s1": ["s3", " s0", "ls3", "sFirst", " sFirst", "lsFirst", "ss0", "ls1", "ssFirst", "ss1", "s0", "ss3", "ls0", " s3"], "s2": [" s4", "s256", "ses4", " s82", "ubs2", "s82", "ses82", "ses256", "s4", "ubs4", "ubs256", "ubs82", " s256", "ses2"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String args[]) {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = Integer.parseInt(sc.next());\\n        int k = Integer.parseInt(sc.next());\\n        \\n        int counter = 0;\\n        int tmp = n;\\n        while(tmp > 0) {\\n            tmp = tmp / k;\\n            ++counter;\\n        }\\n        \\n        System.out.println(counter);\\n        \\n    }\\n}", "target": "219", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "na", "ser", "com", "ch", "tc", "ss", "server", " SC", "cur", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "lc", "ci", "cer", "c", "sp", "sq", "uc", "soc", "sr", "ca", "cle", "se", "ner", " Sc", "scan", "parse", "osc", "rc", "cc", "cr", "parser", "ec", "esc", "cus"], "n": ["nn", "rn", "nc", "nt", "count", "p", "u", "num", "N", "v", "keep", "cn", "i", "l", "sn", "r", "z", "h", "nr", "f", "c", "m", "w", "x", "np", "o", "d", "ns", "b", "kn", "nw", "nb", "j", "net", "number", "en", "t"], "k": ["sk", "mk", "p", "ko", "ck", "km", "ks", "v", "keep", "i", "kick", "kk", "r", "h", "dk", "ok", "f", "length", "c", "key", "ak", "m", "x", "ku", "kw", "q", "unk", "kn", "d", "j", "K", "y"], "counter": ["offset", "total", "count", "processor", "test", "num", "keep", "const", "page", "ctr", "continue", "entry", "repeat", "iter", "info", "nr", "temp", "inter", "cmp", "outer", "instance", "pointer", "sp", "per", "code", "result", "ter", "loop", "race", "ner", "current", "field", "Counter", "time", "step", "seed", "no", "timer", "number", "stop", "cache", "match"], "tmp": ["nn", "cop", "offset", "total", "amount", "nt", "count", "now", "p", "test", "prefix", "next", "po", "rb", "keep", "treatment", "stuff", "kk", "part", "start", "sample", "temp", "nr", "len", "cp", "cmp", "pointer", "sp", "np", "mp", "fp", "ptr", "kn", " np", "foo", "ignore", "nb", "tp", "amp", "pos", "obj", "sup", "step", "seed", "current", "number", "pp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int[] h = new int[N];\\n    int count =0;\\n    for (int i =0; i<N; i++) {\\n      h[i] = sc.nextInt();\\n    }\\n    \\n    int a =0; int b=0;\\n    L:while (a<= N-1 && b<= N-1) {\\n      if (h[a] ==0) {\\n        a++;\\n        continue;\\n      }\\n      //a\u3092\u6c7a\u5b9a\\n      b = a;\\n      while (b <= N-1) {\\n        if (h[b] !=0 && b != N -1) {\\n          b++;\\n          continue;\\n        } else {\\n          for (int i =a; i<=b; i++) {\\n            h[i]--;\\n            if (h[i] <0) {\\n              h[i] =0;\\n            }\\n          }\\n        }\\n        count++;\\n        continue L;\\n      }\\n    }\\n    System.out.println(count);\\n  }\\n}", "target": "77", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "server", "sec", "ss", " SC", "cur", "asc", "sh", "l", "Sc", "SC", "screen", "cs", "bc", "sw", "src", "lc", "ci", "c", "cer", " scr", "sp", "sa", "acc", "system", "sq", "uc", "soc", "sem", "se", "ner", " Sc", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus"], "N": ["Len", "S", "Num", "No", "Count", "C", "M", " n", "Size", "U", "Y", "Node", "F", "Network", "NN", "Q", "P", "A", "T", "I", "Ni", "NC", "L", "R", "n", "B", "NR", "network", "Ne", "V", "K", "ND", "D", "NT", "H", "Z", "Ns", "O", "NS", "G", "number", "E", "X"], "h": ["head", "p", "he", "u", "hr", "gh", "v", "help", "sh", "l", "uh", "rh", "bh", "ht", "header", "ph", "r", "ha", "hd", "ah", "f", "c", "m", "w", "e", "hist", "hp", "q", "hs", "o", "d", "plus", "n", "HH", "ih", "hm", "hh", "host", "H", "y", "oh", "eh", "th"], "count": ["all", "total", "nt", "p", "Count", "size", "C", "id", "ch", "start", "z", "length", "f", "c", "depth", "base", "e", "col", "max", "code", "ac", "found", "child", "ab", "cache", "batch", "act"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "io", "init", "z", "info", "ci", "ui", "c", "ini", "index", "phi", "x", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "n", "ii", "li", "j", "oi", "in", "chi", "y", "ind", "ti", "fi"], "a": ["ana", "api", "p", "ia", "u", "na", "ad", "ba", "l", "ao", "aa", "A", "oa", "pa", "f", "au", "c", "ga", "an", "sa", "ea", "ae", "e", "ai", "alpha", "af", "n", "ca", "ac", "wa", "aaa", "sta", "ama", "fa", "as", "la", "asa", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["fb", "p", "u", "rb", "ad", "v", "ba", "l", "r", "z", "lb", "bc", "bs", "f", "eb", "s", "c", "w", "x", "e", "o", "d", "n", "g", "B", "j", "k", "sb", "y", "wb", "ab", "bp"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\npublic class Main{\\n\tpublic static void main (String[] args) throws java.lang.Exception{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t    int n = Integer.parseInt(br.readLine());\\n\t    long money = 100000;\\n\t    while(n!=0){\\n\t        money *= 1.05;\\n\t        if(money%1000>0){\\n\t        \tmoney+=1000;\\n\t        }\\n\t        money /= 1000;\\n\t        money *= 1000;\\n\t        --n;\\n\t    }\\n        System.out.println(money);\\n\t}\\n}", "target": "173", "substitutes": {"br": ["bl", "div", "hr", "rb", "ch", "browser", "tr", "arr", "i", "fr", "r", "bf", "bh", "yr", "io", "bridge", "stream", "input", "er", "dr", "report", "mr", "BR", "img", "bro", "str", "Br", "result", "b", "err", "gr", "ner", "reader", "obj", "buf", "ocr", "bb", "txt", "cr", "ref", "plug", "keeper", "out", "Reader"], "n": ["nn", "nc", "nt", "count", "p", "size", "u", "num", "nu", "nan", "N", "ln", "v", "i", "l", "mini", "sn", "z", "nr", "len", "c", "inn", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "limit", "g", "nb", "j", "net", "k", "no", "mn", "number", "y", "en", "t"], "money": ["counter", "div", "total", "fortune", "price", "amount", "how", "currency", "count", "size", "company", "dollar", "cost", "buy", "volume", "yahoo", "change", "budget", "auto", "i", "margin", "loss", "data", "power", "cash", "payment", "value", "Money", "timeout", "machine", "book", "coin", "p", "length", "life", "c", "sum", "euro", "weight", "lot", "m", "depth", "fine", "cho", "zero", "limit", "time", "no", "chi", "type", "number", "fee", "coll"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int N = scan.nextInt();\\n        List<String> list = new ArrayList<>();\\n        for (int i = 0; i < N; i++) list.add(scan.next());\\n        Collections.sort(list);\\n        int cnt = 0, now = 0;\\n        String before = \"\";\\n        for (int i = 0; i < N; i++) {\\n            if (!before.equals(list.get(i))) {\\n                cnt = Math.max(cnt, now);\\n                now = 1;\\n            } else {\\n                now++;\\n                cnt = Math.max(cnt, now);\\n            }\\n            before = list.get(i);\\n        }\\n        now = 0;\\n        before = \"\";\\n        for (int i = 0; i < N; i++) {\\n            if (!before.equals(list.get(i))) {\\n                now = 1;\\n                if (now == cnt) System.out.println(list.get(i));\\n            } else {\\n                now++;\\n                if (now == cnt) System.out.println(list.get(i));\\n            }\\n            before = list.get(i);\\n        }\\n    }\\n}", "target": "235", "substitutes": {"scan": ["nn", "cat", "see", "watch", "connect", "walk", "spin", "bug", "ser", "server", "ln", "serv", "span", "run", "search", "l", "mer", "r", "sc", "get", "er", "query", "report", "chan", "an", "system", "skip", "n", "sr", "ignore", "sys", "se", "ner", "stat", "reader", "err", "parse", "in", "Scan", "log", "clean", "non", "ans", "pan", "parser", "look", "read", "can", "ann", "sync"], "N": ["MN", "Len", "S", "Num", "No", "NL", "C", "J", "M", " n", "Size", "Y", "F", "NN", "Q", "P", "NH", "NY", "T", "I", "L", "R", "n", "B", "NR", "CNN", "V", "K", "NB", "D", "NT", "H", "Z", "O", "Ns", "KN", "NS", "W", "X"], "list": ["this", "see", "live", "multi", "stack", "l", "diff", "info", "get", "key", "left", "state", "set", "result", "cli", "sequence", "we", "ll", "all", "none", "p", "test", "data", "nl", "collection", "order", "plan", "index", "base", "like", "st", "n", "LIST", "later", "default", "array", "self", "cl", "record", "and", "dict", "queue", "view", "keep", "history", "system", "L", "form", "log", "cache", "out", "coll", "sync", "parent", "module", "chain", "low", "null", "table", "json", "listed", "the", "sort", "source", "lc", "last", "load", "config", "string", "li", "current", "tree", "lists", "batch"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "one", "multi", "qi", "slice", "xi", "ji", "next", "v", "anti", "si", "ix", "mini", "is", "name", "ri", "start", "io", "init", "info", "end", "f", "ci", "ui", "ini", "index", "eni", "phi", "x", "base", "uri", "mu", "ip", "e", "di", "I", "adi", "ie", "ai", "o", "gi", "mi", "n", "ii", "zi", "b", "gu", "li", "current", "j", "oi", "yi", "in", "chi", "you", "y", "my", "ti", "fi"], "cnt": ["mcnv", "cnc", "cct", "cNT", "lcNT", "cnv", "lcnt", "Cnv", "lcnn", " cnv", "scant", " cnd", "ecNT", "cn", "ecrt", " cnn", "CNT", " cnc", "Crt", "mcnt", "Cant", " cant", " cNT", "scNT", " cct", "scnd", " cwd", "cnd", "Cnd", "Cnn", "Cct", "crt", " crt", "Cn", "cnn", "lcct", "ecnt", "scnt", "lcnc", "scnn", "Cwd", "ecct", "ecn", "mcNT", " cn", "Cnc", "cwd", "scwd", "cant", "mcnn", "Cnt"], "now": ["this", "self", "wait", "currently", "low", "how", "count", "just", "size", "and", "NOW", "next", "here", "cur", "stuff", "search", "old", "then", "mm", "ws", "both", "info", "maybe", "length", "where", "today", "after", "order", "way", "hack", "or", "never", "done", "hand", "kw", "sometimes", "ww", "max", "when", "with", "ow", "only", "once", "current", "still", "day", "time", "wow", "no", "found", "force", "not", "seed", "quick", "since", "ready", "off", "we", "Now", "always", "default", "wh"], "before": ["head", " inside", "self", "below", "this", "parent", "After", "just", "Before", "back", "id", "normal", "next", " already", " after", "here", "auto", "inside", " above", "pre", "then", "data", "right", "start", "old", "init", "panel", "info", "above", "post", "length", "last", "around", "outside", "after", "flash", " around", "like", "between", "string", "system", "ago", "plus", "prev", "with", " prefix", "current", "without", "root", "original", "form", "seed", "in", " BEFORE", "from", "fix", "plugin", "front", "transform", "strip"]}}
{"code": "import java.io.*;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){ \\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString str = sc.nextLine();\\n\t\tchar[] let = str.toCharArray();\\n\t\tfor (int i = 0 ; i<let.length ; i ++ ) {\\n\t\t\tif (Character.isUpperCase(let[i])) {\\n\t\t\t\tlet[i] = Character.toLowerCase(let[i]);\\n\t\t\t}else{\\n\t\t\t\tlet[i] = Character.toUpperCase(let[i]);\\n\t\t\t}\\n\t\t\tSystem.out.print(let[i]);\\n\t\t}\\n\t\tSystem.out.println(\"\");\\n\t}\\n}", "target": "192", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", " SC", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "cor", "ci", "sl", "c", "cer", "sp", "st", "system", "uc", "soc", "sr", "ner", " Sc", "ocr", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc"], "str": ["cl", "enc", "wr", "tr", "pr", "arr", "line", "STR", "l", "data", "fr", "r", "iter", "input", "char", "f", "er", "br", "s", "sl", "c", "list", "sp", "st", "text", "string", "kr", "stri", "Str", "expr", "sr", "err", "pass", "ner", "parse", "in", "txt", "out", "strip"], "let": ["font", "single", "cl", "parent", "elt", "lat", "layout", "unit", "print", "cat", "class", "patch", "id", "lett", "it", "split", "le", "line", "l", "data", "el", "name", "part", "ct", "point", "cel", "bat", "vert", "get", "pat", "char", "letter", "alt", "lex", "vet", "key", "style", "format", "model", "list", "base", "jet", "lets", "Let", "text", "pt", "ie", "string", "set", "delete", "lit", "variable", "flat", "lt", "ge", "tree", "ant", "place", "LET", "file", "art", "lang", "la", "local", "section", "et", "plot"], "i": ["hi", "bi", "pi", "p", "iu", "slice", "u", "id", "it", "multi", "qi", "ji", "xi", "v", "si", "ix", "l", "data", "name", "ri", "r", "start", "io", "init", "z", "h", "info", "length", "f", "ci", "ui", "c", "key", "ini", "index", "x", "mu", "uri", "e", "di", "I", "ie", "ai", "code", "o", "gi", "d", "n", "b", "ii", "cli", "iv", "li", "j", "oi", "k", "in", "type", "ti", "fi"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        FastScanner sc = new FastScanner(System.in);\\n        int k = sc.nextInt();\\n        int s = sc.nextInt();\\n        long ans = 0;\\n        for(int i = 0; i <= k; i++){\\n            for(int j = 0; j <= k; j++){\\n                int z = s-i-j;\\n                if(z >= 0 && z <= k){\\n                    ans++;\\n                }\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n    \\n    public static int beamSearch(long[] arr, long target){\\n        int left = 0;\\n        int right = arr.length;\\n        while(right-left > 1){\\n            int mid = (left+right)/2;\\n            if(arr[mid] > target){\\n                right = mid;\\n            }else{\\n                left = mid;\\n            }\\n        }\\n        return left;\\n    }\\n}\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    } \\n}\\n", "target": "29", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "scope", "pc", "class", "ch", "ss", " SC", "asc", "search", "sh", "Sc", "SC", "scl", "bc", "cs", "sw", "cv", "src", "lc", "c", "cer", " scr", "sp", "acc", "system", "sq", "uc", "ca", "cle", "sem", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "ec", "esc", "cus"], "k": ["sk", "p", "size", "ka", "u", "ko", "ck", "ch", "ke", "ks", "km", "kick", "l", "ik", "h", "kb", "dk", "ok", "f", "c", "key", "ak", "m", "w", "x", "ku", "e", "kw", "q", "d", "g", "b", "kn", "kid", "K", "y"], "s": ["S", "sk", "p", "size", "u", "ins", "ks", "ss", "sh", "l", "qs", "es", "ls", "eps", "ips", "ens", "cs", "h", "ps", "f", "rows", "c", "states", "os", "ds", "ches", "m", "e", "q", "abs", "o", "d", "gs", "g", "ns", "b", "ends", "xs", "ids", "outs"], "ans": ["nn", "sk", "ars", "na", "errors", "ins", "nan", "ln", "ks", "ss", "span", "lan", "atan", "es", "ions", "ls", "eps", "ens", "lines", "params", "os", "rows", "cas", "ds", "plan", "ants", "ches", "an", " means", "ops", "cons", "cus", "ANS", "ns", "ras", "ats", "scan", "ids", "outs", "as", "ons", "ctx", " scans", "amps", "can", "ann"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "ik", "ri", "uli", "start", "io", "init", "abi", "f", "ci", "ui", "ini", "c", "index", "m", "phi", "x", "ip", "e", "di", "I", "ie", "ai", "q", "o", "gi", "d", "mi", "ii", "zi", "b", "li", "oi", "chi", "y", "ind", "ti"], "j": ["jj", "ni", "p", "oj", "it", "u", "J", "qi", "ji", "xi", "v", "jp", "si", "ix", "l", " ii", "ij", "start", "end", "f", "m", "w", "x", "e", "ja", "uj", "ie", "q", "o", "d", "g", "b", "ii", "li", "js", "je", "iz", "y", "jl", "aj"], "z": ["zz", "nz", "zen", "fl", "p", "gz", "zx", "za", "v", "tz", "ix", "l", "exp", "zip", "ez", "h", "zo", "f", "ci", "os", "c", "az", "zone", "w", "x", "zy", "oz", "q", "cz", "d", "g", "zero", "b", "ii", "zi", "ze", "iz", "uz", "zh", "Z", "y", "zn", "ind"], "arr": ["rar", "enc", "arc", "test", "arm", "rep", "stack", "align", "ar", "db", "data", "Array", "fr", "el", "r", "dat", "adr", "aa", "iter", "attr", "app", "dr", "br", "air", "list", "img", "str", "acc", "arch", "rest", "arp", "err", "ray", "abc", "ras", "rr", "gr", "obj", "aaa", "frac", "att", "ab", "range", "batch", "array", "ann", "coll"], "target": ["parent", "offset", "expected", "gt", "class", "size", "core", "next", "to", "auto", "path", "data", "Target", "source", "value", "end", "src", "length", "pointer", "large", "string", "max", "goal", "arget", "result", "object", "padding", "limit", "dest", "current", "obj", "top", "master", "scale", "type", "range", "real", "match", "t", "array"], "left": ["all", "cl", "offset", "low", "hide", "size", "one", "id", "le", "line", "l", "center", "partial", "diff", "part", "start", "half", "value", "r", "middle", "lower", "end", "Left", "len", "length", "co", "last", "lc", "width", "lex", "loc", "down", "leave", "index", "x", "lo", "list", "full", "pl", "min", "max", "inner", "d", "plus", "small", "limit", "li", "rights", "pos", "lt", "no", "little", "rel", "ell", "la", "lf"], "right": ["all", "head", "third", "patch", "id", "ro", "Right", "then", "mm", "r", "cross", "rh", "partial", "row", "middle", "end", "length", "last", "down", "ax", "broad", "m", "x", "rw", "rad", "ra", "ack", "max", "rest", "d", "plus", "inner", "rank", "rights", "child", "rel", "rd", "correct", "rew", "rx", "off", "rt", "range"], "mid": ["pad", "hi", "seq", "lat", "low", "rm", "patch", "id", "nd", "multi", "mode", "Mid", "lan", "late", "sub", "mini", "mm", "ng", "part", "partial", "start", "middle", "end", "lim", "medium", "char", "mr", "pid", "m", "mad", "large", "aid", "rand", "min", "md", "shift", "mi", "remote", "small", "dim", "major", "grid", "pos", "rel", "kind", "rid", "range", " middle", "med"], "reader": ["rar", "client", "loader", "buffer", "table", "ro", "to", "server", "enter", "url", "line", "l", "data", "ri", "r", "re", "oder", "io", "iter", "stream", "row", "input", "source", "header", "ler", "upper", "er", "f", "resource", "report", "holder", "feed", "pointer", "magic", "or", "e", "writer", "per", "socket", "token", "string", "ry", "inner", "ter", "rer", "rr", "ner", "handler", "serial", "layer", "file", "manager", "worker", "parser", "driver", "reading", "read", "Reader"], "tokenizer": [" tokenizers", "normalization", "Tokenizing", "tokenener", " tokenizing", "okeniter", " tokenener", " tokenize", "Tokenization", "Tokenize", "Tokeniter", "recogniser", "Tokenizers", "okenizing", "tokenize", "serializers", " tokeniz", "serializing", "initialize", "okenizer", "tokenler", "recognizer", "regulariser", " tokenization", " tokeniser", "personalizer", "optimener", " tokeniter", "optimiter", "optimizer", "okenize", "initialner", "regularner", " tokenler", "tokenizable", "Tokenler", "optimize", "tokenization", "initialiser", "okenner", "okenler", "personalization", "tokeniz", " tokenner", "regularize", "tokeniser", "tokeniter", "regularizer", "initializer", "normalizer", "normaliser", "normalener", " tokenizable", "okenization", "Tokeniz", "serialiter", "recognner", "tokenizers", "tokenner", "serializer", "personaliz", "okeniser", "okenizers", "serialener", "personalizable", "recognize", "tokenizing", "serialize", "Tokenizer", "okenener", "Tokenizable"], "in": ["p", "buffer", "record", "id", "ins", "ex", "path", "line", "data", "is", "lin", "r", "init", "source", "io", "h", "input", "stream", "win", "resource", "In", "f", "image", "inn", "ini", "c", "m", "OUT", "str", "e", "socket", "inf", "inner", "d", "err", "loop", "pass", "exec", "connection", "log", "bin", "file", "as", "inc", "lock", "IN", "out"], "n": ["nn", "count", "p", "size", "num", "N", "v", "l", "sn", "r", "h", "nl", "f", "c", "ne", "m", "x", "e", "o", "d", "g", "ns", "b", "nb", "net", "no", "number", "y", "t", " N"], "a": ["p", "na", "u", "ad", "span", "access", "ba", "ar", "l", "data", "aa", "A", "tta", "f", "au", "c", "ga", "m", "ata", "an", "list", "x", "sa", "ae", "ea", "alpha", "array", "b", "ca", "ac", "aaa", "sta", "as", "la", "y", "area", "ab", "da", "ma", "am", "va", "aj"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u5165\u529b\\n            int n = Integer.parseInt(in.next());\\n            int h[] = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                h[i] = Integer.parseInt(in.next());\\n            }\\n            // \u6700\u521d\u306e\u65c5\u9928\u306f\u5fc5\u305a\u898b\u3048\u308b\u306e\u30671\\n            int ans = 1;\\n\\n            for (int i = 1; i < n; i++) {\\n                int cnt = 0;\\n                for (int j = 0; j <= i - 1; j++) {\\n                    if (h[i] >= h[j]) ++cnt;\\n                }\\n                if (cnt >= i) ans++;\\n            }\\n            // \u51fa\u529b\\n            out.println(ans);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "7", "substitutes": {"inputStream": ["InputChannel", "inputSteam", "outputSteam", " inputstream", "outputChannel", "outputCh", " inputSteam", "InputSteam", "inputCh", " inputCh", "InputCh", "Inputstream", " inputChannel", "InputStream", "outputstream", "inputChannel", "inputstream"], "outputStream": ["inputSteam", "outputSteam", "outputChannel", "OutputStreamer", "Outputstream", "responseStream", "OutputChannel", "responseSteam", "OutputStream", "inputStreamer", " outputSteam", "responseStreamer", "outputStreamer", "responsestream", "OutputSteam", "outputstream", " outputstream", "inputChannel", "inputstream", " outputChannel"], "in": ["this", "isin", "on", "id", "login", "ins", "din", "run", "i", "inside", "path", "data", "is", "request", "con", "lin", "r", "name", "io", "source", "init", "sin", "input", "win", "info", "In", "gen", "conn", "s", "image", "inn", "ini", "arg", "index", "nin", "config", "cin", "min", "gin", "inf", "inner", "plus", "n", "kin", "err", "again", "reader", "pin", "connection", "vin", "bin", "inc", "IN"], "out": ["this", "parent", "call", "client", "p", "loader", "null", "to", "server", "ex", "v", "i", "line", "page", "data", "name", "point", "io", "init", "temp", "input", "conn", "outside", "s", "outer", "user", "session", "arg", "password", "at", "output", "OUT", "w", "x", "process", "image", "writer", "string", "problem", "Out", "o", "inner", "n", "b", "err", "again", "pass", "write", "net", "exec", "connection", "no", "analysis", "log", "file", "bin", "outs", "external", "inc", "off", "cache", "error", "IN", "console", "window", "sync"], "solver": [" solution", "ssol", "solving", "ssolve", "unsolver", "ssolving", "Solver", "ssolver", "Sol", "ssolution", "solve", "solution", "Solution", " sol", "Solving", "unsolving", "Solve", "unsolve", "unsolution", " solve", "sol"], "testNumber": ["trialNumber", "TestNumber", "testNumbers", "testnumber", "TestNum", " testnumber", "Testnumber", "trialNumbers", "trialnumber", " testNum", " testNumbers", "testNum", "trialNum", "TestNumbers"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tString string = sc.next();\\n\t\tchar c = ' ';\\n\t\tint ans = 0;\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tchar target = string.charAt(i);\\n\t\t\tif (c != target) {\\n\t\t\t\tans++;\\n\t\t\t\tc = target;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}", "target": "218", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "ser", "ch", "server", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "cv", "ci", "cer", "sp", "str", "st", "sq", "uc", "sr", "ca", "sem", "se", "ner", " Sc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "N": ["S", "Num", "NA", "SN", "NL", "C", "J", "M", "OS", " n", "F", "NN", "Q", "RN", "P", "T", "Ni", "I", "NC", "NP", "L", "R", "n", "Ne", "V", "K", "D", "NT", "H", "Z", "NS", "Ns", "O", "NE", "NI", "E", "X"], "string": ["ident", "single", "space", "p", "slice", "null", "service", "character", "strings", "version", "line", "STR", "data", "series", "name", "r", "value", "source", "input", "char", "f", "letter", "s", "str", "text", "writer", "result", "object", "ring", "expression", "connection", "in", "sequence", "number", "word", "section", "array"], "c": ["enc", "cat", "nc", "arc", "mc", "pc", "p", "C", "u", "ch", "cn", "fc", "l", "a", "r", "cs", "cp", "f", "lc", " C", "ci", "dc", "csv", "pointer", "s", "conn", "cas", "cy", "e", "cin", "ec", "cus", "category", "uc", "cf", "content", "d", "n", "b", "ca", "ac", "anc", "rc", "cc", "cr", "ctx", "t", "unc", "xc", "coll"], "ans": ["ana", "ars", "AN", "nt", "aned", "vers", "na", "ins", "aus", "ks", "lan", "aces", "asts", "acs", "es", "ions", "ls", "eps", "ens", "cs", "lines", "vs", "s", "os", "rows", "cas", "ds", "ros", "ants", "ches", "an", "x", "ops", "cus", "cons", "ANS", "n", "ns", "ents", "ca", "ends", "ras", "anc", "outs", "as", "annot", "ctx", " scans", "CS", "ays", "can", "ann"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "it", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "ri", "io", "init", "info", "abi", "f", "ci", "vis", "ui", "ini", "index", "eni", "phi", "x", "uri", "ip", "di", "I", "ai", "o", "gi", "n", "ii", "b", "li", "pass", "j", "oi", "in", "ti", "fi"], "target": ["pattern", "enc", "cat", "parent", "nt", "class", "component", "null", "it", "id", "next", "ch", "reference", "character", "cn", "path", "const", "data", "point", "name", "compatible", "Target", "source", "value", "iter", "concept", "char", "letter", "pixel", "pointer", "match", " character", "text", "token", "content", "arget", "che", "result", "b", "current", "type", "address", "et"]}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner in = new Scanner(System.in);\\n\\n\t\twhile(true) {\\n\\n\t\t\tint middle = in.nextInt();\\n\t\t\tint term_end = in.nextInt();\\n\t\t\tint retest = in.nextInt();\\n\t\t\tint sum = middle + term_end;\\n\\n\t\t\tif(middle == -1 && term_end == -1 && retest == -1) {\\n\\n\t\t\t\tbreak;\\n\\n\t\t\t}else if(middle == -1 || term_end == -1) {\\n\\n\t\t\t\tSystem.out.println(\"F\");\\n\\n\t\t\t}else if(sum >= 80) {\\n\\n\t\t\t\tSystem.out.println(\"A\");\\n\\n\t\t\t}else if(sum < 80 && sum >= 65) {\\n\\n\t\t\t\tSystem.out.println(\"B\");\\n\\n\t\t\t}else if(sum < 65 && sum >= 50) {\\n\\n\t\t\t\tSystem.out.println(\"C\");\\n\\n\t\t\t}else if(sum < 50 && sum >= 30) {\\n\\n\t\t\t\tif(retest >=  50) {\\n\\n\t\t\t\t\tSystem.out.println(\"C\");\\n\\n\t\t\t\t}else {\\n\\n\t\t\t\t\tSystem.out.println(\"D\");\\n\\n\t\t\t\t}\\n\\n\t\t\t}else if(sum < 30) {\\n\\n\t\t\t\tSystem.out.println(\"F\");\\n\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "118", "substitutes": {"in": ["isin", "loader", "login", "ins", "serv", "ln", "din", "arin", "i", "l", "a", "is", "con", "lin", "r", "init", "source", "h", "win", "input", "f", "In", "gen", "s", "lib", "inn", "ini", "conn", "nin", "str", "socket", "token", "inner", "rin", "n", "g", "cli", "b", "err", "kin", "again", "pass", "reader", "exec", "pin", "scan", "connection", "up", "log", "bin", "readable", "fa", "as", "inc", "doc", "IN", "out"], "middle": ["div", "offset", "module", "chain", "space", "age", "size", "normal", "slice", "minute", "next", "span", "align", "family", "mer", "mini", "center", "part", "start", "header", "lower", "end", "spread", "first", "medium", "upper", "care", "cm", "mouse", "width", "after", "send", "min", "shift", "mage", "dim", "field", "angle", "master", "scale", "group", "Middle", "front", "mid", "mean", "range", "pad", "window"], "term_end": ["term0end", "term_start", "word_end", "term0ending", "term_ending", "term0start", "term00index", "term00begin", "terms_begin", "term_End", " term_start", "word_End", "terms_index", "word_ending", "term00end", "terms_ending", "term_index", "terms_end", "term0End", "term00start", "term_begin", "word_start", "terms_start", " term_ending"], "retest": [" retend", "retested", "pretend", "Retense", "litester", "Retend", "pretests", "littest", "retester", "Rettest", "detest", "detested", "RETested", "litend", "litest", "retEST", "RETest", "retests", "pretester", "rettest", "prettest", "Retest", "RETests", "detEST", "retense", " retester", "pretest", "pretEST", "Retester", "detests", " retense", "retend", "RETEST", "pretested", "pretense"], "sum": ["all", "um", "total", "call", "unit", "space", "count", "rate", "size", "mon", "cost", "gram", "num", "date", "summary", "si", "average", "vol", "loss", "mer", "sort", "sam", "fill", "part", "use", "sign", "start", "mass", "gate", "mask", "info", "spread", "sim", "len", "cal", "lim", "error", "length", "user", "key", "weight", "depth", "sp", "cum", "ram", "text", "min", "skip", "alpha", "shift", "miss", "Sum", "comment", "mit", "dim", "fat", "cover", "frac", "net", "seed", "parse", "scale", "bin", "mean", "sal", "mid", "range", "match", "out", "fee", "tail"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Main main = new Main();\\n    main.solve();\\n    main.show();\\n  }\\n\\n  int n;\\n  int k;\\n  int[] p;\\n  int ans;\\n\\n  public Main() {\\n    Scanner sc = new Scanner(System.in);\\n    try {\\n      n = sc.nextInt();\\n      k = sc.nextInt();\\n      p = new int[n];\\n      for (int i = 0; i < n; i++) p[i] = sc.nextInt();\\n    } finally {\\n      sc.close();\\n    }\\n  }\\n  \\n  void solve() {\\n    Arrays.sort(p);\\n    for (int i = 0; i < k; i++) ans += p[i];\\n  }\\n\\n  void show() {\\n    System.out.println(ans);\\n  }\\n}\\n", "target": "41", "substitutes": {"n": ["nn", "rn", "nc", "nt", "ni", "count", "u", "na", "num", "nan", "N", "v", "l", "sn", "r", "un", "z", "nl", "len", "ny", "f", "conn", "s", "c", "ne", "m", "an", "x", "w", "e", "o", "d", "ns", "b", "kn", "network", "nb", "ner", "j", "net", "no", "in", "mn", "y", "en"], "k": ["sk", "mk", "u", "id", "ck", "ke", "ks", "kick", "l", "ik", "z", "h", "dk", "ok", "f", "s", "ek", "c", "key", "ak", "m", "w", "x", "kw", "e", "q", "o", "d", "kn", "b", "j", "K", "in", "y", "ki"], "p": ["php", "api", "pi", "pc", "patch", "u", "po", "v", "jp", "path", "ap", "l", "a", "point", "eps", "pg", "P", "lp", "ps", "pa", "cp", "f", "params", "s", "pid", "c", "m", "at", "x", "pe", "np", "ip", "sp", "mp", "per", "e", "fp", "hp", "o", "op", "vp", "array", "b", "tp", "j", "pp", "y", "parser", "t", "bp"], "ans": ["ana", "sk", "ars", "anas", "na", "ins", "nan", "aus", "ks", "ss", "anon", "lan", "span", "asts", "l", "a", "atan", "es", "is", "ions", "eps", "ls", "ips", "cs", "ps", "pa", "au", "s", "os", "cas", "plan", "ants", "an", "x", "ops", "parts", "cons", "ANS", "flags", "ns", "ents", "ats", "anc", "xs", "ids", "annot", "as", "ons", "parser", "amps", "can", "ann"], "sc": ["cl", "sche", "enc", "nc", "sci", "sf", "scope", "pc", "ser", "ch", "sec", "ss", "si", "cur", "sub", "asc", "search", "sh", "Sc", "SC", "screen", "bc", "cs", "sw", "cv", "cor", "lc", "ci", "s", "c", "cer", "sp", "system", "uc", "sem", "se", "ner", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "ec", "esc", "ctx", "cus", "sync"], "i": ["bi", "hi", "pi", "ori", "iu", "it", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "ri", "ik", "io", "init", "z", "h", "abi", "info", "f", "dr", "ci", "ui", "ini", "key", "c", "index", "m", "phi", "x", "eni", "uri", "mu", "ip", "e", "di", "I", "ie", "ai", "q", "o", "gi", "mi", "g", "ii", "b", "li", "j", "oi", "in", "y", "my", "ti", "fi"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/*\\n * AtCoder Beginner Contest 088 C \"Takahashi's Information\"\\n *   https://abc088.contest.atcoder.jp/tasks/abc088_c/\\n */\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tInputScanner in = new InputScanner(System.in);\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\\n\t\tint[][] c = in.nextIntArray(3, 3);\\n\\n\t\tint[] a = new int[3];\\n\t\tint[] b = new int[3];\\n\\n\t\ta[0] = 0;\\n\t\tb[0] = c[0][0] - a[0];\\n\t\tb[1] = c[0][1] - a[0];\\n\t\tb[2] = c[0][2] - a[0];\\n\t\ta[1] = c[1][0] - b[0];\\n\t\ta[2] = c[2][0] - b[0];\\n\\n\t\tString ans = \"Yes\";\\n\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\tfor (int j = 0; j < 3; j++) {\\n\t\t\t\tif (c[i][j] != a[i] + b[j]) {\\n\t\t\t\t\tans = \"No\";\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tout.println(ans);\\n\\n\t\tin.close();\\n\t\tout.close();\\n\t}\\n\\n\t/*\\n\t * extends java.util.Scanner\\n\t */\\n\tstatic class InputScanner {\\n\\n\t\tScanner scanner;\\n\\n\t\tpublic InputScanner(InputStream inputStream) {\\n\t\t\tthis.scanner = new Scanner(inputStream);\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\treturn scanner.nextInt();\\n\t\t}\\n\\n\t\tpublic long nextLong() {\\n\t\t\treturn scanner.nextLong();\\n\t\t}\\n\\n\t\tpublic double nextDouble() {\\n\t\t\treturn scanner.nextDouble();\\n\t\t}\\n\t\tpublic String next() {\\n\t\t\treturn scanner.next();\\n\t\t}\\n\\n\t\tpublic int[] nextIntArray(int n) {\\n\t\t\tint[] ret = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.nextInt();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic int[][] nextIntArray(int h, int w) {\\n\t\t\tint[][] ret = new int[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.nextInt();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic long[] nextLongArray(int n) {\\n\t\t\tlong[] ret = new long[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.nextLong();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic long[][] nextlongArray(int h, int w) {\\n\t\t\tlong[][] ret = new long[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.nextLong();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic double[] nextDoubleArray(int n) {\\n\t\t\tdouble[] ret = new double[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.nextDouble();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic double[][] nextDoubleArray(int h, int w) {\\n\t\t\tdouble[][] ret = new double[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.nextLong();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[] nextStringArray(int n) {\\n\t\t\tString[] ret = new String[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tret[i] = scanner.next();\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[] nextStringArray(String split) {\\n\t\t\tString[] ret = scanner.next().split(split);\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[][] nextStringArray(int h, int w) {\\n\t\t\tString[][] ret = new String[h][w];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\tret[i][j] = scanner.next();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic String[][] nextStringArray(int h, String split) {\\n\t\t\tString[][] ret = new String[h][];\\n\t\t\tfor (int i = 0; i < h; i++) {\\n\t\t\t\tret[i] = scanner.next().split(split);\\n\t\t\t}\\n\t\t\treturn ret;\\n\t\t}\\n\\n\t\tpublic void close() {\\n\t\t\tscanner.close();\\n\t\t}\\n\\n\t}\\n\\n}\\n", "target": "88", "substitutes": {"in": ["id", "login", "ins", "din", "ln", "path", "line", "l", "data", "is", "con", "lin", "init", "sin", "win", "source", "input", "In", "s", "user", "inn", "ini", "arg", "image", "nin", "config", "cin", "ai", "read", "inf", "inner", "min", "rin", "cli", "kin", "err", "again", "pass", "reader", "pin", "connection", "scan", "log", "bin", "as", "inc", "IN", "thin"], "out": ["self", "this", "conf", "parent", "call", "client", "p", "ch", "to", "ex", "v", "res", "path", "pool", "png", "name", "r", "io", "temp", "outer", "user", "arg", "m", "output", "OUT", "x", "list", "str", "process", "writer", "string", "max", "Out", "o", "err", "again", "ger", "obj", "exec", "up", "connection", "log", "file", "bin", "outs", "word", "lock", "inc", "cache", "error", "can", "window"], "c": ["enc", "cat", "mc", "arc", "count", "p", "pc", "C", "u", "ch", "v", "l", "cu", "ct", "r", "cs", "z", "cp", "f", "cm", "lc", "ci", "dc", "s", "m", "x", "e", "ec", "cf", "ce", "code", "q", "d", "o", "g", "ca", "ac", "k", "cc", "y", "cr", "sc", "t"], "a": ["this", "api", "p", "ia", "na", "u", "ad", "auto", "ba", "ar", "aa", "A", "pa", "f", "ah", "au", "s", "ga", "at", "an", "x", "sa", "e", "ae", "ea", "ai", "code", "alpha", "o", "d", "array", "ca", "ac", "aaa", "another", "y", "as", "area", "ab", "da", "ma", "am", "va", "aj"], "b": ["bi", "fb", "p", "u", "pb", "rb", "ad", "v", "ba", "l", "ib", "db", "r", "aa", "be", "z", "bs", "f", "eb", "ga", "m", "an", "x", "base", "e", "o", "d", "g", "B", "ca", "body", "ac", "k", "sb", "bb", "bot", "y", "wb", "ab", "emb", "ob", "t"], "ans": ["nn", "ams", "ana", "aos", "sk", "ars", "aned", "anas", "vers", "AN", "na", "ads", "ins", "caps", "aus", "ks", "opens", "lan", "acs", "asts", "atan", "reads", "ls", "eps", "ens", "olds", "aks", "cs", "vs", "s", "os", "ings", "cas", "ds", "nas", "ags", "ants", "an", "urs", "ANS", "arts", "jas", "ents", "ns", "ras", "ats", "anc", "san", "annot", "as", "anners", "ons", "amps", "ann"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "qi", "ei", "ji", "xi", "v", "si", "ix", "l", "is", "ij", "ik", "ri", "io", "init", "z", "f", "ci", "ui", "ini", "key", "index", "eni", "m", "x", "phi", "mu", "ip", "di", "e", "I", "ie", "ai", "q", "o", "gi", "d", "mi", "g", "ii", "zi", "li", "oi", "k", "yi", "chi", "y", "ki", "my", "ti", "fi"], "j": ["dj", "jj", "jc", "p", "oj", "adj", "u", "it", "J", "qi", "bj", "ji", "v", "jp", "pr", "l", "ij", "z", "aj", "f", "br", "ui", "key", "m", "x", "di", "e", "jet", "ja", "uj", "ie", "q", "o", "d", "g", "ii", "li", "js", "k", "obj", "je", "not", "y", "off", "jl", "jen", "t", "jo"], "scanner": ["Scaninner", "scinner", "scanker", "scanlier", "anner", "statener", "scner", "scanizer", "caner", "generner", "canizer", "Scanlier", "canter", "scaniner", "caninner", "anlier", "verter", "produker", " scanter", "sclier", "produener", "scanter", " scaninner", "aniner", " scanlier", "produner", "produter", "caniner", "statlier", "Scanler", "scanener", "Scanener", "canker", "canler", "generlier", "canlier", "statner", "scaner", "canener", "Scanker", "generker", "Scanter", "Scaner", "verler", "verner", " scanker", "statker", "generter", " scaniner", "anker", "Scanizer", "scizer", "verer", "canner", "Scanner", "scanler", "scaninner"], "inputStream": ["outputWriter", " inputstream", " inputBuffer", "controlstream", "controlStream", "inputStreamer", "controlStreamer", "outputBuffer", "Inputstream", "inputWriter", "outputStream", "outputStreamer", "inputBuffer", " inputWriter", "InputStreamer", "InputWriter", "InputStream", "outputstream", "InputBuffer", "inputstream", "controlBuffer"], "n": ["all", "count", "p", "nor", "na", "num", "N", "v", "l", "r", "z", "f", "nat", "s", "ne", "m", "x", "an", "e", "q", "o", "d", "g", "ns", "net", "k", "no", "y", "en", "t"], "ret": ["all", "union", "ut", "rec", "p", "val", "gt", "back", "id", "hash", "arr", "ext", "res", "data", "rem", "part", "r", "bf", "value", "iter", "ft", "info", "get", "len", "reg", "f", "alt", "arg", "reply", "bit", "fun", "list", "str", "rev", "q", "g", "result", "xt", "lit", "RET", "mem", "obj", "def", "det", "att", "group", "rets", "ref", "rt", "match", "en", "default", "Ret", "re"], "h": ["p", "he", "id", "u", "num", "hr", "ch", "v", "sh", "l", "r", "rh", "ht", "z", "end", "f", "m", "x", "e", "max", "q", "o", "d", "g", "wa", "k", "hm", "H", "y", "we", "t"], "w": ["p", "u", "v", "fw", "sh", "l", "ws", "r", "z", "win", "sw", "f", "width", "s", "wn", "wx", "m", "x", "e", "kw", "ww", "max", "q", "wt", "d", "hw", "g", "nw", "tw", "ew", "wa", "k", "y", "wb", "wl", "we", "W", "t", "wh"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        sc.close();\\n\\n        if (a >= 13) {\\n            System.out.println(b);\\n        } else if(a >= 6) {\\n            System.out.println(b / 2);\\n        } else {\\n            System.out.println(0);\\n        }\\n    }\\n}\\n", "target": "249", "substitutes": {}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\t\tpublic static void main(String[] args) {\\n\t\t\tScanner teclado = new Scanner (System.in);\\n\t\t\tint trem = teclado.nextInt();\\n\t\t\tint taxi = teclado.nextInt();\\n\t\t\tint minimo= teclado.nextInt();\\n\t\t\t\\n\t\t\tint cal= trem*taxi;\\n\t\t\t\\n\t\t\tif (trem*taxi<minimo) {\\n\t\t\t\tSystem.out.println(trem*taxi);\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(minimo);\\n\t\t\t\t\t\t\\n\t\t\t\t\t}\\n\t\t\t\\n}\\n}", "target": "213", "substitutes": {"teclado": ["Teblao", "Teblado", "tecado", " teplato", "teblato", " teclada", "teclato", "teflada", "tecelara", "quecelao", "teceladia", "tellado", "tearchara", "tearchados", "teplada", "textados", "technao", "tecla", "teblados", "teca", "technadia", "tefla", "teclara", "tecato", " teplado", "Teblados", " teplados", "tearchadia", "queclara", "Teclados", "textaron", "tellato", "teclados", "teblada", "teblao", "teblado", "teclao", "tellada", " teplada", "textado", "tearchao", "Teclado", "quecelara", "queclado", "textao", "tearcharon", "technado", "Tecla", "Teblaron", "technara", "teplados", "tellados", "teplato", "Teclao", "tecelao", "Teplato", "quecelado", "teflado", "Teclaron", "queceladia", "tearchado", " teclato", "tecelado", "teflato", "Teplada", "teclaron", "Teclada", "teplado", " teclados", "Tepla", "Teclato", "tecladia", "Teplado", "quecladia", "teclada", "tecada", "tepla", "teblaron", "queclao"], "trem": ["ttroll", "Troy", "TREM", "ttroy", " troy", "trip", "ttre", "Tour", " tres", "tres", " troll", "ttREM", "Tcp", " tREM", "Trip", "terip", " trm", "troll", " trip", "tcp", "ttrem", " tour", "Trem", "Trm", "trm", " tcp", "Tre", "tour", "terem", " tre", "ttres", "tre", "teour", "term", "tREM", "ttcp", "troy", "Troll", "Tres", "ttrm"], "taxi": [" taxo", "oxe", " taxa", " taxe", "taxe", "taxa", "axo", "Taxio", "tagi", "Taxi", "tago", "taxiu", "axio", "Taxa", "Taxe", "oxa", "Taxiu", " taxiu", " taxio", "axa", "axi", "taxo", "tagiu", "Taxo", "taxio", "oxi", "oxo", "taga"], "minimo": ["minima", "partimi", "partimus", "minimi", "intimo", "maxime", "Minimus", " mini", "intimus", "mini", " minuli", "maximo", "milliano", " minima", "millimo", " miniano", "maxuli", "minuli", "partimo", "millime", " minimi", "minime", " minime", "millimus", "intimi", "miniano", "milluli", "Minimo", "minimus", "millima", "intima", "Mini", " minimus", "maxima", "Miniano", "partima", "milli"], "cal": ["ace", "cale", "pha", "mon", "cost", " col", "date", "circ", "chrom", "diff", "al", "comp", " calendar", "co", "roll", "ract", "loc", " recal", "sum", "rol", "grade", "pal", "su", "scale", "Cal"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main{\\n\tstatic FastScanner sc = new FastScanner();\\n\tstatic PrintWriter out = new PrintWriter(System.out);\\n\t//static String S;\\n\tstatic int n;\\n\tstatic long b;\\n\t//static char a [][];\\n\t//final static int mod = 1_000_000_007;\\n\t//static int dx [] = {1, 0};\\n\t//static int dy [] = {0, 1};\\n\t//static double p [];\\n\t//static LinkedList <Integer> adj []; \\n\t//static TreeMap <Integer, Integer> map;\\n\t//static PriorityQueue <Integer> q;\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tn = sc.nextInt();\\n\t\t\\n\t\tif (n%2==0)\\n\t\t\tout.println(n/2);\\n\t\telse\\n\t\t\tout.println(n/2+1);\\n\t\t\t\\n\t\t\\n\t\t\\n\t\tout.flush();\\n\t}\\n\t\\n\t\\n\t\tstatic class FastScanner {\\n\t\t    private final InputStream in = System.in;\\n\t\t    private final byte[] buffer = new byte[1024];\\n\t\t    private int ptr = 0;\\n\t\t    private int buflen = 0;\\n\\n\t\t    private boolean hasNextByte() {\\n\t\t      if (ptr < buflen) {\\n\t\t        return true;\\n\t\t      } else {\\n\t\t        ptr = 0;\\n\t\t        try {\\n\t\t          buflen = in.read(buffer);\\n\t\t        } catch (IOException e) {\\n\t\t          e.printStackTrace();\\n\t\t        }\\n\t\t        if (buflen <= 0) {\\n\t\t          return false;\\n\t\t        }\\n\t\t      }\\n\t\t      return true;\\n\t\t    }\\n\\n\t\t    private int readByte() {\\n\t\t      if (hasNextByte()) return buffer[ptr++];\\n\t\t      else return -1;\\n\t\t    }\\n\\n\t\t    private static boolean isPrintableChar(int c) {\\n\t\t      return 33 <= c && c <= 126;\\n\t\t    }\\n\\n\t\t    private void skipUnprintable() {\\n\t\t      while (hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;\\n\t\t    }\\n\\n\t\t    public boolean hasNext() {\\n\t\t      skipUnprintable();\\n\t\t      return hasNextByte();\\n\t\t    }\\n\\n\t\t    public String next() {\\n\t\t      if (!hasNext()) throw new NoSuchElementException();\\n\t\t      StringBuilder sb = new StringBuilder();\\n\t\t      int b = readByte();\\n\t\t      while (isPrintableChar(b)) {\\n\t\t        sb.appendCodePoint(b);\\n\t\t        b = readByte();\\n\t\t      }\\n\t\t      return sb.toString();\\n\t\t    }\\n\\n\t\t    public long nextLong() {\\n\t\t      if (!hasNext()) throw new NoSuchElementException();\\n\t\t      long n = 0;\\n\t\t      boolean minus = false;\\n\t\t      int b = readByte();\\n\t\t      if (b == '-') {\\n\t\t        minus = true;\\n\t\t        b = readByte();\\n\t\t      }\\n\t\t      if (b < '0' || '9' < b) {\\n\t\t        throw new NumberFormatException();\\n\t\t      }\\n\t\t      while (true) {\\n\t\t        if ('0' <= b && b <= '9') {\\n\t\t          n *= 10;\\n\t\t          n += b - '0';\\n\t\t        } else if (b == -1 || !isPrintableChar(b)) {\\n\t\t          return minus ? -n : n;\\n\t\t        } else {\\n\t\t          throw new NumberFormatException();\\n\t\t        }\\n\t\t        b = readByte();\\n\t\t      }\\n\t\t    }\\n\\n\t\t    public int nextInt() {\\n\t\t      return (int) nextLong();\\n\t\t    }\\n\t\t    \\n\t\t    public double nextDouble(){\\n\t\t    \treturn Double.parseDouble(next());\\n\t\t    }\\n\\n\t\t    public int[] nextIntArray(int N, boolean oneBased) {\\n\t\t      if (oneBased) {\\n\t\t        int[] array = new int[N + 1];\\n\t\t        for (int i = 1; i <= N; i++) {\\n\t\t          array[i] = sc.nextInt();\\n\t\t        }\\n\t\t        return array;\\n\t\t      } else {\\n\t\t        int[] array = new int[N];\\n\t\t        for (int i = 0; i < N; i++) {\\n\t\t          array[i] = sc.nextInt();\\n\t\t        }\\n\t\t        return array;\\n\t\t      }\\n\t\t    }\\n\\n\t\t    public long[] nextLongArray(int N, boolean oneBased) {\\n\t\t      if (oneBased) {\\n\t\t        long[] array = new long[N + 1];\\n\t\t        for (int i = 1; i <= N; i++) {\\n\t\t          array[i] = sc.nextLong();\\n\t\t        }\\n\t\t        return array;\\n\t\t      } else {\\n\t\t        long[] array = new long[N];\\n\t\t        for (int i = 0; i < N; i++) {\\n\t\t          array[i] = sc.nextLong();\\n\t\t        }\\n\t\t        return array;\\n\t\t      }\\n\t\t    }\\n\t\t  }\\n\\n\t\t}\t \\n\\n\\n\\n", "target": "233", "substitutes": {"sc": ["cl", "sci", "nc", "pc", " sr", " SC", " rc", "Sync", "Sc", "SC", "bc", "cs", "sw", "lc", "ci", "cer", "c", " scr", "st", "sq", "uc", "se", "scan", "sel", "Scan", "rc", "cr", "sync"], "out": ["client", "p", "prefix", "buffer", "to", "ex", "v", "i", "path", "page", "data", "is", "name", "r", "cmd", "println", "io", "input", "session", "s", "report", "c", "t", "output", "OUT", "x", "w", "string", "writer", "Out", "o", "object", "err", "cache", "write", "obj", "in", "log", "file", "bin", "outs", "proc", "error", "console"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        FastScanner sc = new FastScanner(System.in);\\n        PrintWriter pw = new PrintWriter(System.out);\\n        String[] s = sc.next().split(\"/\");\\n        if(Integer.parseInt(s[0]) > 2019){\\n            pw.println(\"TBD\");\\n        }else if(Integer.parseInt(s[0]) < 2019){\\n            pw.println(\"Heisei\");\\n        }else if(Integer.parseInt(s[1]) < 5){\\n            pw.println(\"Heisei\");\\n        }else{\\n            pw.println(\"TBD\");\\n        }\\n        pw.flush();\\n    }\\n}\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    } \\n}\\n", "target": "163", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "sf", "scope", "pc", "sec", "ss", " SC", "asc", "sh", "Sc", "SC", "exp", "scl", "bc", "cs", "sw", "desc", "src", "lc", "ci", "dc", "c", "cer", "sp", "acc", "system", "uc", "ca", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "parser", "spec", "ec", "esc", "sync"], "pw": ["pwo", "apwa", "pwt", "Pws", "apW", " pwt", "epW", "pwd", "pb", "Pv", "PW", "prwt", "bpw", "opb", "jpwa", " pws", "psw", " pb", "spws", "Pl", "prw", "Pb", "spW", " pl", "prwo", "bpwt", "lpl", "pv", "lpwa", "lpW", "pws", " pW", "bpb", "opwa", "epws", " pwd", "opwd", "pwb", "epw", "lpw", " pwo", "prwb", " pwa", "Pw", "pswb", "jpw", "pl", "apw", "pswo", "spw", "apb", "apws", "jpb", "apwt", "jpwd", "epv", "Pwa", "pswt", "spv", " pwb", "bpws", "pW", "pwa", "opw"], "s": ["aws", "S", "blocks", "p", "u", "v", "strings", "l", "qs", "is", "sv", "seconds", "r", "sites", "fs", "its", "h", "sports", "f", "lines", "os", "c", "ms", "states", "words", "m", "w", "fts", "e", "ssl", "string", "ses", "abs", "d", "gs", "g", "ns", "b", "services", "sets", "sym", "js", "sb", "xs", "stats", "t", "sync"], "reader": ["rar", "this", "client", "loader", "buffer", "null", "table", "server", "service", "url", "line", "l", "data", "ri", "r", "oder", "entry", "io", "iter", "stream", "row", "input", "source", "ler", "resource", "er", "f", "report", "pointer", "feed", "format", "e", "writer", "per", "socket", "token", "ry", "inner", "context", "content", "rer", "rr", "handler", "ner", "connection", "file", "rc", "manager", "worker", "lock", "keeper", "parser", "driver", "reading", "read", "out", "Reader"], "tokenizer": [" tokenizers", "authorization", "Tokenizing", "tokenener", "generer", "initialister", "okeniter", " tokenizing", " tokenener", "Tokenization", " tokenize", "generizer", "Tokenize", "Tokeniter", "Tokener", "Tokenizers", "okenizing", "generizing", "serializers", "okener", "tokenize", "initialize", "okenizer", "Tokenener", "capitalize", "recognizer", "regularization", " tokenization", " tokeniter", "capitalization", "serialner", "okenize", "tokenizable", "authoriter", "tokenization", "okenner", " tokenner", "generiter", "serializable", "tokeniter", "regularize", "regularizer", "initializer", "regularister", "tokener", "capitalizer", "authorizer", " tokenizable", "okenization", "recogniter", "serialiter", "Tokenner", " tokener", "tokenizers", "tokenner", "serializer", "initialization", "recognner", "okenizers", "recognize", "tokenister", "tokenizing", "authorize", "serialize", "capitalister", "Tokenizer", "okenener", "Tokenizable", "serialization"], "in": ["IN", "p", "it", "id", "ins", "ex", "path", "line", "l", "data", "is", "name", "lin", "r", "init", "source", "info", "stream", "input", "h", "io", "win", "resource", "In", "f", "user", "image", "c", "ini", "inn", "m", "w", "str", "socket", "string", "inf", "inner", "o", "d", "err", "pass", "connection", "log", "bin", "file", "inc", "doc", "read", "out"], "n": ["nn", "none", "nc", "nt", "count", "p", "size", "adj", "na", "num", "N", "span", "v", "l", "sn", "name", "r", "init", "z", "h", "f", "nat", "c", "inn", "ne", "m", "w", "x", "an", "e", "node", "o", "d", "g", "ns", "b", "nb", "j", "net", "k", "norm", "no", "Ns", "number", "y", "en", "t", " N"], "a": ["aw", "div", "ava", "p", "ia", "xa", "na", "ad", "span", "za", "access", "ba", "ar", "data", "aa", "z", "A", "ha", "aux", "input", "tta", "f", "au", "c", "ga", "at", "ata", "action", "an", "w", "sa", "ae", "ea", "ua", "ai", "alpha", "array", "ca", "b", "ac", "aaa", "ama", "as", "la", "area", "ab", "da", "ma", "am", "va", "aj"], "i": ["this", "val", "slice", "num", "qi", "l", "r", "init", "get", "key", "format", "phi", "ie", "o", "inner", "ii", "_", "bi", "on", "ni", "p", "iu", "id", "si", "ix", "io", "z", "h", "f", "ci", "ui", "ini", "index", "d", "j", "yi", "my", "t", "fi", "pi", "it", "xi", "v", "x", "di", "I", "ai", "q", "gi", "b", "y", "ind", "ti", "hi", "u", "ri", "start", "c", "m", "e", "ip", "mi", "li", "k", "oi"]}}
{"code": "\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\n\\nclass Main{\\n    public static void main(String[] args) {\\n        InputReader in = new InputReader(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        int N = in.nextInt();\\n        int M = in.nextInt();\\n        int[] arr = new int[M];\\n        int sum = 0;\\n        for (int i = 0; i < M; i++) {\\n            //arr[i] = in.nextInt();\\n            sum = sum + in.nextInt();\\n        }\\n\\n        System.out.println((sum <= N )?((N-sum)):(-1));\\n\\n\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n", "target": "108", "substitutes": {"in": ["this", "isin", "login", "ins", "din", "arin", "inside", "path", "line", "l", "data", "is", "name", "con", "lin", "r", "into", "init", "source", "win", "info", "input", "In", "er", "gen", "user", "conn", "inn", "ini", "c", "image", "x", "nin", "e", "raw", "min", "read", "gin", "inner", "rin", "n", "kin", "err", "again", "reader", "pin", "connection", "log", "bin", "vin", "as", "inc", "IN", "thin", "query"], "out": ["p", "ch", "ex", "res", "path", "page", "name", "part", "r", "init", "io", "temp", "nr", "gen", "user", "output", "OUT", "w", "x", "list", "str", "writer", "Out", "o", "n", "b", "err", "write", "obj", "net", "exec", "log", "bin", "outs", "lock", "cache", "error"], "N": ["S", "Num", "NL", "C", "J", " n", "Size", "U", "F", "P", "A", "T", "I", "L", "R", "n", "B", "NM", "V", "K", "D", "NT", "O", "Z", "Ns", "NS", "G"], "M": ["MN", "S", "DM", "JM", "Mi", "C", "J", "U", "Y", "X", "F", "Q", "P", "MS", "MD", "m", "T", "I", "MT", "L", "R", "n", "B", "dim", "NM", "V", "K", "D", "H", "O", "Z", "G", "LM", "RM", "W", "E"], "arr": ["counter", "enc", "cat", "dict", "rep", "mat", "ch", "par", "stack", "map", "data", "Array", "dat", "aa", "iter", "len", "au", "list", "pack", "str", "prev", "dim", "Ar", "gr", "batch", "array", "append", "coll"], "sum": ["all", "nz", "total", " total", "Num", "count", "size", "na", "num", " count", "mer", " Sum", "diff", " diff", " dim", "len", " len", "mu", "rand", "max", "Sum", "mem", " num", "pos", " mean", "mean", " sums", " acc"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "ami", "u", "multi", "qi", "xi", "v", "si", "mini", "ri", "uli", "z", "abi", "f", "ci", "ui", "c", "m", "phi", "x", "mu", "uri", "adi", "e", "ip", "di", "I", "ai", "gi", "mi", "ii", "b", "zi", "j", "oi", "ind", "ti", "fi"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n      int P = sc.nextInt();\\n      int Q = sc.nextInt();\\n      int R = sc.nextInt();\\n      if(P>=Q && P>=R){\\n        System.out.println(Q+R);\\n      }else if(Q>=P && Q>=R){\\n        System.out.println(P+R);\\n      }else if(R>=P && R>=Q){\\n        System.out.println(P+Q);\\n      }\\n    }\\n}", "target": "89", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "ser", "ch", "tc", "ss", "sec", " SC", "cur", "asc", "sh", "Sc", "SC", "ct", "cs", "bc", "sw", "cv", "desc", "src", "lc", "loc", "cer", "c", "sp", "acc", "system", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "ctx", "sync"], "P": ["IP", "S", "p", "C", "Part", "N", "PO", "M", "Power", "Py", "Pl", "U", "Y", "PU", "Ps", "Path", "RP", "F", "Port", "A", "PA", "PS", "PT", "Point", "PC", "PI", "Pro", "T", "I", "TP", "CP", "PIN", "PK", "L", "PP", "Per", "B", "V", "PF", "K", "D", "H", "O", "Pat", "DP", "WP", "G", "PE", "E", "X"], "Q": ["IP", "S", "AR", "p", "C", "ID", "J", "N", "M", "Py", "UR", "U", "Y", "Qu", "QB", "r", "F", "A", "Ph", "Point", "Ch", "QU", "T", "I", "q", "L", "Query", "B", "V", "PG", "K", "JP", "Int", "D", "RE", "H", "O", "Z", "G", "Cl", "PE", "MQ", "W", "E", "Que", "X"], "R": ["RO", "PR", "RT", "S", "AR", "RG", "C", "N", "RR", "M", "Right", "ER", "RS", "UR", "Rh", "U", "Y", "CR", "r", "RP", "F", "AP", "RC", "A", "RA", "RL", "Rs", "GR", "JR", "BR", "T", "RH", "TR", "L", " r", "Re", "B", "NR", "V", "Ra", "D", "RE", "H", "G", "SR", "RM", "W", "E", "DR", "X"]}}
{"code": "\\nimport java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String args[]){\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t//\u4e2d\u9593\u8a66\u9a13m\u3001\u671f\u672b\u8a66\u9a13f\u3001\u518d\u8a66\u9a13r\u306e\u70b9\u6570\u3092\u53d7\u3051\u53d6\u308b\\n\t\twhile(true){\\n\t\t\tString s1 = sc.next();\\n\t\t\tint m = Integer.parseInt(s1);\\n\t\t\tString s2 = sc.next();\\n\t\t\tint f = Integer.parseInt(s2);\\n\t\t\tString s3 = sc.next();\\n\t\t\tint r = Integer.parseInt(s3);\\n\t\t\t//\u5168\u3066-1\u304c\u5165\u529b\u3055\u308c\u305f\u3068\u304d\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3059\u308b\\n\t\t\tif(m == -1 && f == -1){\\n\t\t\t\tif(r == -1){\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t//\u4e2d\u9593\u3001\u671f\u672b\u306e\u3069\u3061\u3089\u304b\u4f11\u3093\u3060\u5834\u5408\u306fF\u3068\u8868\u793a\\n\t\t\tif(m == -1 || f == -1){\\n\t\t\t\tSystem.out.println(\"F\");\\n\t\t\t}\\n\t\t\t//80\u70b9\u4ee5\u4e0a\u306fA\\n\t\t\telse if(80 <= m + f){\\n\t\t\t\tSystem.out.println(\"A\");\\n\t\t\t}\\n\t\t\t//65\u70b9\u4ee5\u4e0a\u306fB\\n\t\t\telse if(65 <= m + f && m + f < 80){\\n\t\t\t\tSystem.out.println(\"B\");\\n\t\t\t}\\n\t\t\t//50\u70b9\u4ee5\u4e0a\u306fC\\n\t\t\telse if(50 <= m + f && m + f < 65){\\n\t\t\t\tSystem.out.println(\"C\");\\n\t\t\t}\\n\t\t\t//30\u70b9\u4ee5\u4e0a\u306fD\uff08\u305f\u3060\u3057\u518d\u8a66\u9a13\u304c50\u70b9\u4ee5\u4e0a\u306a\u3089C\uff09\\n\t\t\telse if(30 <= m + f && m + f < 50){\\n\t\t\t\tif(50 <= r){\\n\t\t\t\t\tSystem.out.println(\"C\");\\n\t\t\t\t}\\n\t\t\t\telse{\\n\t\t\t\t\tSystem.out.println(\"D\");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t//30\u70b9\u672a\u6e80\u306fF\\n\t\t\telse{\\n\t\t\t\tSystem.out.println(\"F\");\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n}", "target": "118", "substitutes": {"sc": [" ser", "gram", "ss", " SC", " rc", " sl", "Sc", "SC", " res", "s", "c", " scr", " pars", " ans", "sq", " scanner", " surf", " sm", "se", " Sc", "sb", " app", "scan", " src", " arr", " sp", "ann"]}}
{"code": "import static java.lang.Character.*;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str;\\n\t\twhile ((str = br.readLine()) != null) {\\n\t\t\tfor (int i = 0; i < str.length(); i++) {\\n\t\t\t\tchar c = str.charAt(i);\\n\t\t\t\tif (isLetter(c)) {\\n\t\t\t\t\tif (isUpperCase(c)) {\\n\t\t\t\t\t\tSystem.out.print(toLowerCase(c));\\n\t\t\t\t\t} else {\\n\t\t\t\t\t\tSystem.out.print(toUpperCase(c));\\n\t\t\t\t\t}\\n\t\t\t\t} else {\\n\t\t\t\t\tSystem.out.print(c);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t}\\n\\n}", "target": "192", "substitutes": {"br": ["div", "p", "hr", "rb", "ch", "browser", "tr", "pr", "arr", "res", "ar", "cb", "fr", "r", "yr", "io", "stream", "bc", "bs", "er", "dr", "orb", "mr", "BR", "sp", "bro", "HR", "Br", "abs", "b", "err", "gr", "reader", "obj", "buf", "ocr", "bb", "bd", "cr", "bt", "bar"], "str": ["cl", "div", "enc", "p", "u", "hr", "ch", "tr", "pr", "arr", "strings", "url", "line", "STR", "cur", "data", "fr", "name", "r", "entry", "iter", "input", "char", "f", "dr", "sl", "lc", "sp", "e", "st", "text", "string", "kr", "stri", "Str", "result", "sr", "err", "pass", "obj", "in", "txt", "spec", "sc", "coll"], "i": ["bi", "hi", "pi", "ori", "p", "iu", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "out", "l", "ri", "io", "f", "ci", "ui", "ini", "index", "eni", "x", "mu", "uri", "e", "ip", "di", "I", "ai", "o", "gi", "d", "n", "b", "ii", "zi", "li", "j", "oi", "t", "ti", "fi"], "c": ["cl", "enc", "ic", "nc", "arc", "vc", "p", "C", "u", "ch", "character", "v", "cur", "l", "cu", "ct", "r", "cs", "co", "bc", "cp", "char", "f", "lc", "ci", "s", "dc", "m", "x", "e", "ec", "col", "string", "cf", "code", "ce", "d", "n", "g", "b", "abc", "ac", "current", "in", "rc", "cc", "cr", "cont", "sc", "t", "esc", "xc", "coll"]}}
{"code": "\\n\\nimport java.util.Scanner;\\nimport java.util.Stack;\\n\\npublic class Main {\\n\\n\tpublic static void main(String argsw[])\\n\t{\\n\t\tScanner scan=new Scanner(System.in);\\n\t\tStack<Integer> stk=new Stack<Integer>();\\n\t\tString eg=scan.next();\\n\t\tlong count=0;\\n\t\tstk.add(eg.charAt(0)-'0');\\n\t\tfor(int i=1;i<eg.length();i++)\\n\t\t{\\n\t\t\tif( !stk.isEmpty() && (eg.charAt(i)-'0')!=stk.peek())\\n\t\t\t{\\n\t\t\t\tstk.pop();\\n\t\t\t\tcount+=2;\\n\t\t\t}else {\\n\t\t\t\tstk.add(eg.charAt(i)-'0');\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n", "target": "14", "substitutes": {"argsw": ["arggen", "encsw", "encph", "iggen", "wph", "encss", "igsw", "encgen", "wsw", "wgen", "igss", "argph", "wss", "argss", "igph"], "scan": ["cat", "sci", "watch", "connect", "walk", "server", "ln", "span", "run", "search", "sign", "r", "start", "store", "sc", "iter", "win", "er", "gen", "chan", "feed", "an", "system", "skip", "n", "g", "sync", "ignore", "stat", "se", "ner", "reader", "in", "parse", "Scan", "log", "read", "out", "can", "ann", "query"], "stk": ["stok", "estke", "estsk", "estks", "Stsk", "ste", "Stck", "stq", "sth", "Stk", "STk", "stkg", "Stok", " stb", "Stact", "este", "STke", " sth", "ctwork", "STh", " stok", "Stq", " stak", "Stks", "putq", "Stak", "stke", "Ste", "putk", "Stke", "stcr", " stcr", "Stwork", "STok", "Stb", "stwork", "putkg", " stkg", "esth", "estok", " stq", "stb", "stsk", "stact", "ctcr", "STe", "ctok", "STks", "estak", " stck", "stck", "STb", "Stkg", "estck", "stks", "Stcr", " stwork", "ctk", "STwork", "Sth", "estk", "STsk", "putact", " stact", "stak"], "eg": ["enc", "eng", "rag", "leg", "EG", "alg", "yg", "ext", "cur", "ega", "ep", "deg", "ef", "erg", "pg", "ag", "reg", "gg", "gb", "eb", "gen", "loc", "conn", "peg", "arg", "meg", "og", "agg", "e", "cfg", "rg", "ie", "gin", "gi", "gs", "g", "ug", "gu", "abc", "fg", " rg", "edge", "org", "bg", "ge", "tg", "rig", "sg", "rog", "ec", "esc", "ig"], "count": ["counter", "total", "parent", "second", "low", "empty", "age", "Count", "size", "p", "test", "id", "l", "part", "diff", "start", "info", "len", "length", "f", "last", "char", "c", "sum", "key", "check", "index", "weight", "match", "list", "base", "depth", "e", "code", "b", "err", "current", "time", "child", "found", "type", "number", "error", "coll"], "i": ["bi", "hi", "api", "pi", "ori", "p", "iu", "ami", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "ri", "uli", "start", "io", "info", "abi", "f", "ci", "ui", "c", "ini", "index", "at", "x", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "n", "b", "ii", "zi", "li", "j", "k", "oi", "in", "t", "fi"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n      String a = sc.next();\\n      if(a.contains(\"B\")){\\n        System.out.println(a.replace(\"B\",\"R\"));\\n      }else if(a.contains(\"R\")){\\n        System.out.println(a.replace(\"R\",\"B\"));\\n      }\\n    }\\n}", "target": "153", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "scope", "pc", "ch", "sec", "ss", " SC", "sub", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "desc", "cor", "src", "lc", "ci", "s", "dc", "c", "cer", "sp", "acc", "uc", "g", "ca", "se", "ner", " Sc", "ocr", "scan", "osc", "rc", "cr", "spec", "ec", "esc", "sync"], "a": ["ana", "empty", "expected", "p", "title", "na", "u", "something", "access", "auto", "i", "l", "data", "name", "r", "valid", "aa", "A", "app", "aux", "f", "tta", "s", "c", "ga", "password", "an", "ata", "author", "sa", "text", "string", "active", "aka", "any", "alpha", "abs", "d", "n", "result", "b", "abc", "ac", "aaa", "sup", "work", "sta", "ast", "as", "la", "address", "area", "ab", "missing", "va"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.nio.charset.StandardCharsets;\\n\\npublic class Main {\\n\tpublic static void main (String[] args) throws IOException{\\n\t    InputStreamReader reader = new InputStreamReader(System.in, StandardCharsets.UTF_8);\\n\t    BufferedReader in = new BufferedReader(reader);\\n\t\tString[] str = in.readLine().split(\" \");\\n\t\tint X = Integer.parseInt(str[0]);\\n\t\tint Y = Integer.parseInt(str[1]);\\n\t\tif((Y-2*X)%2 == 0 && (Y-2*X)/2 >= 0 && X-((Y-2*X)/2) >= 0) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else\\n\t\t\tSystem.out.println(\"No\");\\n\t}\\n}", "target": "62", "substitutes": {"reader": ["rar", "client", "iner", "buffer", "loader", "i", "l", "r", "entry", "io", "source", "stream", "iter", "input", "ler", "resource", "er", "f", "ino", "bird", "feed", "ruby", "e", "ra", "writer", "per", "read", "inner", "b", "rr", "handler", "ner", "connection", "editor", "file", "parser", "reading", "driver", "IN", "out", "Reader"], "in": ["buffer", "loader", "id", "login", "ins", "to", "din", "ex", "inside", "i", "sql", "line", "l", "data", "is", "r", "re", "io", "source", "stream", "input", "In", "er", "f", "s", "inn", "ini", "per", "writer", "socket", "read", "gin", "inner", "d", "cli", "b", "err", "exec", "log", "bin", "file", "as", "inc", "parser", "Reader", "IN", "out", "query"], "str": ["enc", "tr", "split", "arr", "i", "cur", "line", "STR", "data", "name", "part", "fr", "r", "ctr", "entry", "block", "iter", "input", "char", "dr", "f", "br", "sl", "er", "strike", "list", "sp", "st", "text", "string", "stri", "oct", "Str", "inner", "usr", "sr", "pass", "ner", "parse", "step", "txt", "tri", "strip"], "X": ["EX", "IP", "S", "IS", "EL", "ZX", "C", "ID", "J", "WH", "N", "FF", "M", "U", "Location", "F", "XXX", "Q", "P", "A", "UX", "Width", " x", "XX", "x", "T", "I", "CP", "TX", "LL", "L", "DX", "XY", "PH", "IX", "XP", "V", "Int", "K", "Length", "DOM", "YY", "D", "Index", "H", "Z", "O", "WR", "G", "Ex", "W", "E", "XL"], "Y": ["IP", "IO", "S", "Year", "C", "ID", "J", "N", "M", "Py", "Size", "U", "Country", "IE", "F", "Cy", "Q", "A", "P", "Yang", "NY", "x", "ISO", "T", "I", "L", "XY", " y", "B", "V", "K", "YY", "D", "H", "Z", "O", "y", "G", "Python", "W", "E"]}}
{"code": "import java.io.*;\\npublic class Main{\\n    public static void main(String[] args) throws IOException{\\n        BufferedReader bf = \\n            new BufferedReader(new InputStreamReader(System.in));\\n        int N = Integer.parseInt(bf.readLine());\\n        String[] str = bf.readLine().split(\" \");\\n        int[] h = new int[N];\\n        for(int i = 0; i < N; i++){\\n            h[i] = Integer.parseInt(str[i]);\\n        }\\n        int answer = h[0];\\n        for(int i = 0; i < N-1; i++){\\n            int value = h[i+1] -h[i];\\n            if(value > 0){\\n                answer += value;\\n            }\\n        }\\n        System.out.println(answer);\\n    }\\n}", "target": "77", "substitutes": {"bf": ["buff", "fb", "bart", "sf", "BF", "FB", "rb", "Fs", "xf", "arf", "zb", "ff", "FH", "fc", "db", "F", "bh", "fs", "df", "fe", "BB", "bc", "abi", "bs", "f", "elf", "fd", "eb", "orb", "fm", "uf", "raf", "fp", "cf", "rf", "RF", "b", "fab", "sb", "bb", "alf", "xb", "bd", "fa", "bt", "orf", "wb", "lf", "ref", "ab", "ob"], "N": ["MN", "Len", "S", "Num", "No", "NA", "C", "J", "M", " n", "Size", "U", "Y", "F", "Network", "Number", "Q", "NN", "P", "Ni", "I", "T", "L", "R", "n", "B", "Ne", "V", "K", "ND", "D", "NT", "H", "Z", "Ns", "NS", "O", "G", "NE", "NUM", "NI", "W", "E", "X"], "str": ["cl", "enc", "div", "p", "id", "u", "hr", "ch", "sec", "tr", "pr", "arr", "url", "line", "STR", "data", "name", "fr", "r", "iter", "input", "char", "dr", "br", "f", "sl", "c", "list", "sp", "st", "text", "string", "stri", "Str", "d", "n", "sr", "err", "in", "out"], "h": ["head", "p", "he", "u", "id", "hr", "http", "ch", "hash", "gh", "v", "sh", "l", "uh", "rh", "bh", "ht", "home", "r", "ph", "ha", "f", "ah", "c", "m", "w", "x", "e", "hist", "hp", "q", "hs", "o", "n", "g", "b", "HH", "ih", "auth", "hm", "work", "hh", "H", "hl", "y", "oh", "eh", "t"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "l", "mini", "ri", "io", "init", "z", "info", "abi", "ci", "ui", "ini", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "b", "zi", "li", "j", "oi", "in", "chi", "y", "ti", "fi"], "answer": ["ace", "score", "offset", "age", "message", "size", "id", "offer", "archive", "next", "answered", "here", "v", "average", "help", "question", "data", "duration", "r", " answers", "Answer", "length", "query", "ah", "image", "activity", "reply", "eni", "output", "memory", "string", "knowledge", "grade", "comment", "zero", "result", "cover", "energy", "response", "issue", "number", "address", "support", "area", "evidence", "range", "vote", "error", "default", "array", "option"], "value": ["offset", "parent", "function", "media", "VALUE", "count", "age", "val", "message", "size", "id", "one", "volume", "num", "cost", "reference", "character", "v", "version", "balance", "a", "data", "diff", "entry", "end", "length", "image", "feature", "won", "key", "index", "weight", "large", "min", "grade", "d", "current", "values", "child", "response", "position", "type", "job", "number", "level", "area", "Value", "flow", "va", "fee", "default"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = Integer.parseInt(sc.next());\\n\t\tint b = Integer.parseInt(sc.next());\\n\t\tint c = Integer.parseInt(sc.next());\\n\t\tint d = Integer.parseInt(sc.next());\\n\t\tint e = Integer.parseInt(sc.next());\\n\t\tint k = Integer.parseInt(sc.next());\\n\t\tsc.close();\\n\\n\t\tif(e - a <= k) {\\n\t\t\tSystem.out.println(\"Yay!\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\":(\");\\n\t\t}\\n\t}\\n}", "target": "66", "substitutes": {"sc": ["this", "cl", "sche", "mc", "sci", "nc", "scope", "cgi", "pc", "class", "ser", "ch", "tc", "ss", " SC", "cur", "sub", "asc", "fc", "Sc", "SC", "ws", "exp", "bc", "cs", "cv", "app", "cor", "src", "desc", "lc", "ci", "dc", "cer", "console", "sp", "system", "uc", "soc", "sync", "sr", "cli", "se", "ner", " Sc", "scan", "parse", "osc", "rc", "cc", "cr", "cms", "sch", "cont", "parser", "scene", "cam", "ec", "esc", "ctx", "cus", "coll"], "a": ["p", "u", "ad", "ba", "i", "ar", "l", "aa", "z", "h", "A", "pa", "f", "au", "s", "m", "an", "x", "w", "ae", "sa", "ea", "ai", "o", "alpha", "af", "n", "ca", "ac", "aaa", "fa", "y", "as", "area", "ab", "da", "ma", "va"], "b": ["p", "u", "ad", "v", "i", "ba", "l", "r", "aa", "h", "bc", "f", "x", "ae", "o", "n", "g", "B", "nb", "j", "bb", "y", "ab"], "c": ["p", "C", "u", "ch", "l", "r", "z", "h", "f", "w", "x", "ae", "cf", "q", "o", "n", "g", "ac", "cd", "cc", "y", "ec"], "d": ["p", "u", "ad", "v", "i", "l", "db", "r", "z", "h", "f", "dc", "m", "w", "x", "q", "o", "n", "g", "dy", "j", "D", "cd", "y", "t"], "e": ["ace", "p", "u", "v", "i", "l", "el", "es", "r", "z", "h", "fe", "end", "f", "eb", "dc", "ne", "m", "w", "x", "ev", "ae", "ea", "ec", "oe", "q", "o", "ce", "n", "g", "se", "ze", "j", "ee", "y", "E"], "k": ["ky", "sk", "p", "u", "ck", "ad", "ke", "ks", "v", "i", "kick", "kk", "ik", "z", "h", "dk", "ok", "f", "dc", "ek", "m", "x", "kw", "q", "o", "n", "kn", "j", "K", "y", "ki"]}}
{"code": "class Main{\\n    \\n    public static void main(String[] args){\\n        java.util.Scanner in = new java.util.Scanner(System.in);\\n        int t = in.nextInt();\\n        System.out.println(getFormattedTime(t));\\n    }\\n    \\n    public static String getFormattedTime(int sec){\\n        int h = sec / 3600;\\n        int rest_h = sec - h * 3600;\\n        int m = rest_h / 60;\\n        int s = rest_h - m * 60; \\n        return String.format(\"%d:%d:%d\", h, m, s);\\n    }\\n    \\n}", "target": "84", "substitutes": {"in": ["this", "isin", "login", "ins", "serv", "ln", "din", "ex", "v", "i", "path", "line", "l", "a", "data", "is", "lin", "r", "init", "win", "input", "f", "In", "conn", "c", "ini", "inn", "ax", "nin", "socket", "en", "min", "cf", "inf", "inner", "d", "rin", "n", "b", "err", "kin", "again", "reader", "scan", "connection", "log", "bin", "readable", "as", "inc", "IN", "out", "re"], "t": ["te", "offset", "total", "ts", "count", "p", "test", "v", "the", "tz", "i", "l", "ct", "start", "z", "f", "Time", "c", "w", "x", "e", "T", "pt", "o", "d", "n", "g", "dt", "j", "time", "type", "tt", "rt", "tf"], "sec": ["cl", "seq", "second", "ch", "km", "cur", "sh", "ct", "seconds", "mm", "sc", "SEC", "cs", "src", "cond", "lc", "loc", "cm", "c", "str", "days", "code", "inf", "min", "d", "n", "year", "se", "Sec", "day", "time", "clock", "dec", "isec", "th", "ec"], "h": ["hi", "p", "u", "hr", "v", "i", "sh", "l", "r", "rh", "bh", "ht", "ph", "z", "ha", "hd", "f", "c", "w", "x", "e", "q", "hs", "md", "d", "n", "b", "j", "hm", "time", "day", "hh", "H", "y", "th"], "rest_h": ["Rest_h", "Rest_l", "rest_hh", " rest_c", "Rest_c", " rest_d", "Rest_hh", "Rest_d", " rest_m", "Rest_m", "rest_l", "rest_m", "rest_c", "rest_d"], "m": ["p", "mon", "u", "minute", "M", "v", "i", "mill", "l", "a", "mm", "r", "z", "end", "f", "ms", "c", "mr", "w", "ym", "e", "mp", "month", "min", "o", "md", "d", "n", "g", "b", "j", "day", "hm", "time", "sm", "y", "am"], "s": ["S", "sd", "ts", "p", "ss", "v", "si", "sh", "l", "a", "is", "es", "mm", "ls", "seconds", "sv", "ps", "f", "sl", "ms", "c", "ds", "w", "e", "o", "d", "n", "ns", "g", "b", "ends", "ages", "se", "hm", "sm", "ans", "y"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\npublic class Main{\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString[] line = br.readLine().split(\" \");\\n\t\tint a = Integer.parseInt(line[0]);\\n\t\tint b = Integer.parseInt(line[1]);\\n\t\tint c = Integer.parseInt(line[2]);\\n\t\tint cnt = 0;\\n\t\tfor(int i= a; i <= b; i++){\\n\t\t\tint x = c % i;\\n\t\t\tif( x==0) cnt++;\\n\t\t}\\n\t\tSystem.out.println( cnt );\\n\t}\\n}", "target": "190", "substitutes": {"br": ["bl", "div", "ber", "p", "hr", "rb", "browser", "tr", "arr", "res", "ar", "cb", "fr", "r", "yr", "io", "stream", "bridge", "ler", "er", "dr", "report", "mr", "BR", "bro", "str", "HR", "erb", "Br", "abs", "sr", "result", "err", "gr", "ner", "reader", "obj", "buf", "cr", "bar", "ref", "Reader"], "line": ["status", "message", "split", "date", "l", "page", "data", "lin", "part", "entry", "block", "header", "source", "row", "nl", "end", "cell", "link", "f", "lc", "shell", "user", "key", "ne", "load", "str", "string", "column", "frame", "code", "comment", "nice", "ine", "object", "LINE", "cle", "se", "pass", "inline", "ge", "parse", "response", "no", "log", "file", "word", "look", "error", "Line", "strip", "sync"], "a": ["p", "ia", "u", "ad", "ba", "l", "r", "aa", "z", "A", "f", "au", "s", "an", "sa", "e", "ae", "ea", "ada", "ai", "alpha", "d", "n", "ca", "ac", "aaa", "ama", "from", "fa", "y", "la", "asa", "area", "ab", "da", "as", "am", "va"], "b": ["bi", "fb", "count", "p", "abb", "rb", "v", "ba", "l", "ib", "cb", "r", "aa", "be", "z", "h", "bc", "lb", "length", "f", "bs", "s", "base", "e", "o", "d", "n", "g", "B", "body", "nb", "j", "sb", "bb", "y", "ab", "ob", "bp"], "c": ["count", "p", "u", "C", "ad", "v", "l", "cu", "r", "z", "h", "cs", "f", "lc", "ci", "dc", "m", "cy", "e", "uc", "cf", "ce", "o", "d", "n", "g", "ca", "ac", "cc", "y"], "cnt": ["ecno", "ccount", "cint", "cct", "cNT", "scrt", "cny", "Cint", "scno", " cnd", "acno", " cny", "Cno", "CNT", "Crt", " cNT", "scNT", "intct", " cct", "ecint", "cnd", " crt", "crt", "intnt", "account", "cno", "intny", "acint", "nny", "nct", "ecnt", "eccount", "scnt", "intnd", "acnt", "nnt", "nnd", " cno", "Ccount", "Cnt"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "u", "id", "qi", "ei", "xi", "ji", "v", "si", "ix", "l", "ri", "start", "io", "init", "z", "info", "length", "f", "ci", "ui", "ini", "index", "phi", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "d", "ii", "zi", "li", "j", "oi", "chi", "y", "ti", "fi"], "x": ["dx", "p", "xp", "sex", "id", "u", "num", "xi", "ex", "v", "ix", "cross", "z", "h", "fe", "f", "ci", "lex", "ax", "wx", "index", "w", "e", "xx", "xxx", "d", "xt", "rex", "tx", "xe", "work", "xs", "xxxx", "xy", "xxxxxxxx", "y", "rx", "px", "fx", "xc", "X"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\t \\n\t\t        int n = scanner.nextInt();\\n\t\t        int tarop = 0;\\n\t\t        int hanakop = 0;\\n\t\t        String tarow;\\n\t\t        String hanakow;\\n\t\t \\n\t\t        for(int i = 0; i < n; i++){\\n\t\t            tarow=scanner.next();\\n\t\t            hanakow=scanner.next();\\n\t\t            if(tarow.compareTo(hanakow) < 0)  {      hanakop =hanakop+ 3;}\\n\t\t            else if(tarow.compareTo(hanakow) > 0)   tarop = tarop+3;\\n\t\t            else {\\n\t\t                hanakop=hanakop+1;\\n\t\t                tarop=tarop+1;\\n\t\t            }\\n\t\t        }\\n\t\t \\n\t\t        System.out.println(tarop + \" \" + hanakop);\\n\t\t    }\\n\\n}\\n\\n", "target": "206", "substitutes": {"scanner": ["Scanfer", "nerfer", " scaner", "Scaninner", "scanr", "anner", "kinning", " scanfer", "aninner", "nerr", "caner", " scanr", " scanper", "canter", " scanNER", "anter", "caninner", "ScanNER", "kinkeeper", "aner", "scanter", " scaninner", " scankeeper", "scanfer", "nerner", "canper", "Scanper", "Scanr", "scaner", "kinner", "nerer", " scanning", "scanning", "scanNER", "Scanter", "Scaner", "scankeeper", "canNER", "Scanning", "scanper", "canner", "Scankeeper", "Scanner", "kininner", "scaninner"], "n": ["nn", "nc", "nt", "p", "dn", "u", "num", "N", "ln", "l", "sn", "r", "z", "h", "nl", "len", "f", "s", "c", "m", "w", "x", "o", "d", "ns", "g", "b", "network", "nb", "ner", "j", "net", "k", "in", "y", "t"], "tarop": ["tanop", "ratap", "harow", "katop", "ratipop", "katoper", "tanhop", "warop", "talow", " taropy", " tarhop", "karopy", "Taroper", "kathop", "staripop", "tarhop", "hanop", "taroper", " taripop", "ratoper", "haroop", "haripop", "hanopy", "haroper", "katopy", "haropy", "Tarip", "tanoper", "starop", " tarcop", "hanip", "karoper", "taroop", "harip", "karop", " tarip", "taloop", " taroper", "harhop", "starcop", "tarcop", "taropy", "hanoper", "tarap", " taroop", "talopy", "harop", "waroper", "taripop", "starhop", "karip", "talop", "ratop", " tarap", "warap", "waripop", "Taropy", "tanopy", "Tarop", "tarip", "harcop"], "hanakop": ["hanakeope", "homakop", "hanakcop", "harackOP", "harakoper", "hanackoop", "hanakyop", "harako", "hanafoop", "yanakeop", "hanackoper", "hanacko", "harakope", "yanakhop", "hanackop", "hanaxoop", "hanakoped", "kinekop", "kinakopy", "hanazoop", "hanakedo", "kinakoop", "hanavcop", "hanarkop", "hanackhop", "hanarkope", "harakeope", "harackow", "hanakecop", "hanaxop", "hanakopy", "kinakop", "hanakeop", "hanafoped", "hanarkoper", "hanaroper", "hanakyopy", "hanakeow", "hanakyoop", "hanafopy", "hanarop", "harakoop", "harakeop", "hanakope", "hanazoper", "hanekcop", "yanakehop", "hanakOP", "harakop", "harakOP", "hanakeoop", "homackoop", "harakeoper", "hanafop", "hanakopt", "hanaxoper", "hanado", "homackhop", "hanazopt", "hanakeopt", "hanekoop", "homakhop", "hanahhop", "kinekoop", "hanackOP", "hanahoop", "hanakehop", "hanakoper", "harackop", "hanahop", "hanadOP", "hanakedop", "hanarkoop", "homackop", "hanavhop", "hanekop", "hanakeoper", "hanakedow", "hanako", "homakoper", "hanakyoped", "haracko", "kinekoped", "hanakoop", "harakow", "hanekhop", "hanaxopt", "hanackow", "hanekopy", "yanakow", "harakopt", "hanazop", "hanekow", "yanakeow", "harakeoop", "yanakop", "hanakedOP", "kinakoped", "hanavow", "hanaroop", "homakoop", "yanakcop", "harakeopt", "homackoper", "hanekoped", "kinekopy", "hanavop", "hanahoper", "hanakhop", "yanakecop", "hanarope", "hanadop", "hanekoper", "hanadow"], "tarow": ["starow", "harOW", "tarowed", "tanop", "starower", "Tarower", "karow", "harow", " taroyd", "tarown", "tanoop", "tarower", "karoop", "iarOW", "karown", "harown", "atarOW", "Tarow", "starowed", "taxop", "hanow", "hanop", "tarOW", "haroop", "Tarowed", "tanoo", "iaroyd", "harant", "starop", "taroyd", "hanant", "tanow", "tanant", "atarow", "atarop", "taroop", "tanOW", "hanoo", "taroo", "haroo", "karOW", "tanown", "iarop", "ataroyd", " tarOW", "harop", "taxow", "taxowed", "taxower", "Tarop", "tarant", "iarow"], "hanakow": ["kinakowe", "hankode", "hanekoo", "kinahaw", "hanokode", "kinahowe", "hanahowe", "hankoo", "hanagopy", "hanakott", "hanarode", "anakow", "hanahaw", "hanakeov", "hanaxown", "hanakerow", "henakowe", "sanekoo", "hanankott", "hanokow", "hanankowe", "ankown", "sanakov", "ankOW", "sanekov", "kinahow", "henakow", "henakop", "kinahott", "hanakopy", "hanakeopy", "hanekov", "hanakeow", "hankop", "hanagow", "hanarop", "kinakaw", "hanakOW", "hanagoo", "hanakowe", "hanahow", "hanakerowe", "hanakeoo", "hankOW", "anakOW", "sanakow", "henkow", "hanakaw", "hanagov", "hanakerott", "henkowe", "hanakoo", "hanokop", "hanarowe", "ankow", "hankowe", "hanakeraw", "hanokowe", "henakode", "hanaxoo", "sanekopy", "hanahott", "hanaxow", "hanakeown", "hanarow", "ankoo", "anakown", "hanakode", "hanekopy", "henkode", "hanekow", "hanakown", "hanaxOW", "hanakeOW", "hankow", "hanakov", "hanankow", "sanekow", "sanakoo", "hanankaw", "hankown", "henkop", "kinakow", "anakoo", "sanakopy", "kinakott"], "i": ["bi", "pi", "ori", "ni", "p", "iu", "u", "id", "multi", "qi", "xi", "v", "si", "a", "io", "z", "ci", "c", "ui", "ini", "index", "eni", "adi", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "zi", "li", "j", "oi", "in", "chi", "ti", "fi"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\npublic static void main(String[] args){\\n\tScanner sc = new Scanner(System.in);\\n\tint a = sc.nextInt();\\n\tint b = sc.nextInt();\\n\tint c = sc.nextInt();\\n\tint d = sc.nextInt();\\n\tif(a >= c) {\\n\t\tif(a >= d) {\\n\t\t\tSystem.out.println(0);\\n\t\t} else if(a <= d && b >= d) {\\n\t\t\tSystem.out.println(d - a);\\n\t\t} else if(b <= d) {\\n\t\t\tSystem.out.println(b - a);\\n\t\t}\\n\t} else {\\n\t\tif(c >= b) {\\n\t\t\tSystem.out.println(0);\\n\t\t} else if(c <= b && b <= d) {\\n\t\t\tSystem.out.println(b- c);\\n\t\t} else if(b >= d) {\\n\t\t\tSystem.out.println(d - c);\\n\t\t}\\n\t}\\n}\\n}\\n", "target": "47", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "core", "ser", "ck", "ch", "tc", "ss", " SC", "cur", "asc", "sh", "search", "Sc", "SC", "exp", "bc", "cs", "sw", "cv", "cor", "lc", "cer", "ga", "sp", "sq", "uc", "soc", "sr", "ca", "se", "ner", " Sc", "sb", "scan", "parse", "osc", "cr", "cont", "sch", "parser", "esc", "ctx", "cus", "sync"], "a": ["p", "u", "na", "ad", "ba", "i", "ar", "l", "r", "aa", "A", "f", "au", "s", "ga", "ak", "m", "an", "x", "w", "sa", "ae", "e", "ada", "ea", "ai", "alpha", "o", "af", "n", "ca", "ac", "aaa", "fa", "art", "as", "y", "area", "ab", "da", "am", "aj"], "b": ["fb", "bl", "bi", "p", "u", "rb", "ad", "v", "i", "ba", "l", "db", "ib", "r", "bf", "bh", "aa", "be", "h", "lb", "bc", "z", "bs", "f", "eb", "s", "dc", "m", "w", "x", "e", "o", "n", "g", "B", "ca", "dy", "nb", "body", "j", "k", "bb", "sb", "bd", "fa", "y", "wb", "ab", "t"], "c": ["nc", "p", "C", "u", "ad", "ch", "v", "i", "l", "cu", "con", "r", "z", "h", "cs", "f", "lc", "ci", "dc", "s", "t", "m", "w", "x", "an", "e", "cf", "ce", "o", "n", "g", "ca", "ac", "k", "cd", "cc", "y", "ec"], "d": ["sd", "p", "u", "id", "nd", "ad", "dp", "v", "i", "l", "db", "data", "r", "dat", "z", "h", "f", "fd", "dc", "s", "ds", "m", "w", "x", "an", "e", "o", "dd", "n", "g", "ld", "dy", "dl", "dt", "j", "bb", "in", "D", "bd", "cd", "y", "da", "t"]}}
{"code": "\\n\\nimport java.io.*;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    public static void main(String[] args) throws IOException {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        Task solver = new Task();\\n//        int t = in.nextInt();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class Task {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) throws IOException {\\n            int n = in.nextInt();\\n            for (int i = 0; i < n; i++) {\\n                int num = in.nextInt();\\n                // if it is even number\\n                if ((num & 1) == 0){\\n                    if (!(num % 3 == 0 || num % 5 == 0)){\\n                        out.println(\"DENIED\");\\n                        return;\\n                    }\\n                }\\n            }\\n            out.println(\"APPROVED\");\\n        }\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        public double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public char nextChar() {\\n            return next().charAt(0);\\n        }\\n\\n        public String nextLine() throws IOException {\\n            return reader.readLine().trim();\\n        }\\n    }\\n}\\n", "target": "113", "substitutes": {"inputStream": ["inputSteam", "outputSteam", " inputstream", "sourceSteam", " inputReader", " inputSteam", "InputSteam", "inputReader", "sourceReader", "sourceStream", "Inputstream", "sourcestream", "requestStream", "InputStream", "outputReader", "outputstream", "requeststream", "inputstream", "requestSteam"], "outputStream": ["outputWriter", "outputSteam", "outStreamer", "resourcestream", " outputPath", "Outputstream", "responseStream", "responseSteam", "OutputStream", "resourceSteam", " outputSteam", "responseStreamer", "OutputPath", "outSteam", "outputStreamer", "responseWriter", "resourceStream", "outStream", " outputWriter", "OutputSteam", "outputstream", " outputStreamer", "outputPath", " outputstream", "outWriter", "resourcePath"], "in": ["IN", "class", "login", "ins", "din", "run", "i", "path", "line", "l", "data", "request", "con", "r", "io", "source", "info", "init", "input", "sin", "win", "In", "f", "gen", "s", "inn", "ini", "arg", "x", "socket", "inner", "n", "kin", "err", "reader", "pin", "connection", "log", "bin", "inc", "read"], "out": ["buffer", "ex", "i", "path", "line", "page", "data", "name", "point", "cmd", "io", "init", "info", "temp", "In", "gen", "outer", "external", "writing", "output", "OUT", "w", "x", "writer", "string", "Out", "o", "err", "write", "net", "exec", "log", "bin", "outs", "off", "Output", "copy", "error", "IN"], "solver": [" resolver", " resolve", "resolve", "Solution", " resolutions", "resolver", "resolutions", " resolution", "Solutions", "Solver", "solve", "resolution", "solution", "Solve", "solutions"]}}
{"code": "import java.util.Scanner;\\n\\n\\nclass Solve{\\n\tstatic int INF = 10000;\\n\t\\n\t public void solve() {\\n\t\t Scanner sc = new Scanner(System.in) ;\\n\t\t int S = sc.nextInt();\\n\t\t int f=S/100;\\n\t\t int b = S%10+((S/10)%10)*10;\\n\t\t \\n\t\t if(b>0 &&b<=12) {\\n\t\t\t \\n\t\t\t if(f==0||f>12) {\\n\t\t\t\t System.out.println(\"YYMM\");\\n\t\t\t\t \\n\t\t\t }else {\\n\t\t\t\t System.out.println(\"AMBIGUOUS\");\\n\t\t\t }\\n\t\t }else if(f>=1&&f<=12) {\\n\t\t\t if(b==0||b>12) {\\n\t\t\t\t System.out.println(\"MMYY\");\\n\t\t\t }else {\\n\t\t\t\t System.out.println(\"AMBIGUOUS\");\\n\t\t\t }\\n\t\t }else {\\n\t\t\t System.out.println(\"NA\");\\n\t\t }\\n\t\t \\n\t\t \\n\\n;\\n\t}\\n}\\n\\n\\n\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tSolve s= new Solve();\\n\t\ts.solve();\\n\\n\t}\\n}", "target": "5", "substitutes": {"INF": [" INFF", "INV", "InF", "inV", "InFF", "INFF", "inF", " INV", "inf", "inFF", "INf", "InV", " INf", "Inf"], "sc": ["cl", "enc", "nc", "sci", "sf", "scope", "pc", "ch", "sec", "ss", " SC", "cur", "sub", "sh", "search", "Sc", "SC", "cs", "bc", "sw", "src", "ci", "c", " scr", "sp", "acc", "ec", "system", "sq", "uc", "sem", "se", "ner", " Sc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "out", "esc"], "S": ["SI", "SS", " N", "Sample", "TS", "C", "Part", "Fs", "N", " L", "M", "i", "RS", "SE", "U", "Y", "Si", "SU", "F", " F", "Q", "P", "A", "Su", "T", "I", " B", "L", "R", " SF", "B", "V", " SS", "K", "D", "H", "O", "NS", "Ns", "G", "SK", "W", "X"], "f": ["conf", "fb", "sf", "fl", "p", "u", "v", "i", "l", "a", "fc", "fr", "r", "F", "fs", "bf", "h", "z", "fe", "fen", "fn", "fd", "c", "m", "w", "x", "e", "fp", "cf", "q", "o", "frame", "d", "n", "g", "j", "k", "fa", "file", "y", "ab", "fx", "t"], "b": ["fb", "p", "mb", "u", "rb", "v", "i", "l", "a", "ib", "cb", "db", "bf", "F", "r", "block", "h", "z", "bs", "eb", "bas", "c", "m", "w", "x", "base", "e", " B", "o", "d", "n", "g", "B", "dy", "limit", "nb", "body", "j", "k", "sb", "bb", "y", "wb", "ab", "ob", "batch", "t", "bp"], "s": ["ts", "p", "obs", "ins", "ss", "rs", "opens", "v", "l", "es", "is", "ls", "r", "fs", "cs", "ps", "os", "sl", "ms", "c", "rows", "m", "gets", "ops", "e", "ssl", "ses", "abs", "n", "ns", "g", "services", "gs", "sys", "se", "details", "js", "ans", "ubs", "t"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int A[] =new int[N];\\n        int num=1;\\n        int count=0;\\n        \\n        for(int i=0;i<N;i++){\\n            A[i]=sc.nextInt();\\n            \\n        }\\n        \\n        for(int j=0;j<N;j++){\\n            if(num==2){\\n                System.out.println(count);\\n                return;\\n            }\\n            num=A[num-1];\\n            count++;\\n            \\n        }\\n        \\n        System.out.println(-1);\\n        \\n        \\n        \\n    }\\n}\\n", "target": "175", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "server", "sec", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "lc", "ci", "c", "cer", "sp", "acc", "ec", "system", "sq", "uc", "ca", "sem", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "out", "esc", "cus"], "N": ["MN", "Len", "S", "Num", "Count", "C", "J", "M", " n", "Size", "Y", "F", "NN", "Q", "P", "T", "I", "Ni", "L", "n", "B", "NR", "Ne", "V", "K", "D", "NT", "Z", "Ns", "NS", "O", "X"], "A": ["S", "Amount", "Ha", "Num", "NA", "Count", "C", "J", "AA", "M", "LA", "a", "As", "U", "Y", "Array", "Si", "Sa", "F", "AP", "P", "Na", "API", "And", "T", "I", "II", "At", "alpha", "L", "Max", "Sum", "Alpha", "B", "Ar", "V", "K", "All", "D", "O", "ASC", "CA", "G", "NUM", "E", "array", "X"], "num": ["nn", "um", "offset", "unit", "comb", "Num", "nt", "p", "u", "id", "na", "nu", "multi", "a", "uni", "con", "init", "iter", "temp", "len", "nr", "f", "loc", "c", "sum", "index", "m", "x", "mu", "np", "col", "ul", "code", "d", "n", "b", "nb", "pos", "no", "in", "mn", "number", "inc", "NUM", "mult"], "count": ["counter", "total", "offset", "call", "parent", "nt", "p", "Count", "size", "id", "a", "old", "start", "z", "info", "error", "len", "temp", "length", "f", "c", "sum", "key", "index", "list", "base", "col", "max", "code", "n", "b", "limit", "err", "nb", "current", "k", "no", "child", "found", "number", "missing", "cache", "match", "ind", "coll"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "is", "ri", "start", "io", "init", "z", "info", "f", "ci", "ui", "c", "ini", "index", "eni", "phi", "x", "uri", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "zi", "li", "oi", "k", "in", "ind"], "j": ["jj", "jc", "p", "u", "J", "ji", "v", "jp", "l", " ii", "ij", "part", "r", "z", "h", "f", "c", "key", "x", "jo", "ja", "col", "q", "o", "d", "n", "g", "ii", "b", "li", "js", "k", "pos", "y", "ind", "aj"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.math.*;\\n\\npublic class Main {\\n    private static Scanner sc;\\n\\n    public static void main(final String[] args) {\\n        final Main instance = new Main();\\n        sc = instance.new Scanner();\\n        instance.solve();\\n    }\\n\\n    private class Scanner {\\n        String[] s;\\n        int i;\\n        BufferedReader br;\\n        String regex = \" \";\\n\\n        public Scanner() {\\n            s = new String[0];\\n            i = 0;\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        @Override\\n        protected void finalize() throws Throwable {\\n            try {\\n                super.finalize();\\n            } finally {\\n                destruction();\\n            }\\n        }\\n\\n        private void destruction() throws IOException {\\n            if (br != null)\\n                br.close();\\n        }\\n\\n        public String next() throws IOException {\\n            if (i < s.length)\\n                return s[i++];\\n            String st = br.readLine();\\n            while (st == \"\")\\n                st = br.readLine();\\n            s = st.split(regex, 0);\\n            i = 0;\\n            return s[i++];\\n        }\\n\\n        public int nextInt() throws NumberFormatException, IOException {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public Long nextLong() throws NumberFormatException, IOException {\\n            return Long.parseLong(next());\\n        }\\n\\n        public Double nextDouble() throws NumberFormatException, IOException {\\n            return Double.parseDouble(next());\\n        }\\n    }\\n\\n    private void solve() {\\n        try {\\n\\n            int n = sc.nextInt();\\n            long[] A = new long[n];\\n            for (int i = 0; i < n; i++) {\\n                A[i] = sc.nextLong();\\n            }\\n            int count = 0;\\n            for (long l : A) {\\n                while (l % 2 == 0) {\\n                    l /= 2;\\n                    count++;\\n                }\\n            }\\n            System.out.println(count);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n\\n}\\n", "target": "39", "substitutes": {"sc": ["cl", "enc", "mc", "nc", "inst", "sci", "scope", "pc", "gram", "server", "ch", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "scl", "bc", "cs", "sw", "src", "desc", "cv", "lc", "ci", "loc", "c", "cer", "contract", "config", "sp", "acc", "sq", "uc", "soc", "sr", "ca", " Sc", "reader", "anc", "scan", "parse", "osc", "rc", "cc", "cr", "inc", "spec", "ec", "esc", "ctx", "sync"], "instance": ["this", "parent", "inst", "client", "initial", " instances", "test", "class", "core", "component", "custom", "ro", "server", "performance", "init", "app", "Instance", "ance", "image", " inst", "c", "definition", "config", "e", "system", "uc", "context", "runner", "result", "command", "ca", "obj", "reader", "sup", "anc", "connection", "master", "example", "rc", "manager", "usage", "shared", "parser", "section", "loader", "default", "array"], "s": ["ins", "ments", "rs", "ks", "its", "r", "sites", "ips", "fs", "sw", "bs", "sl", "ms", "states", "ds", "os", "ches", "ops", "o", "g", "sts", "ores", "space", "p", "si", "strings", "es", "h", "ps", "f", "shell", "d", "sets", "ids", "t", "aws", "S", "v", "search", "qs", "sv", "ws", " signs", "rows", "ings", " ads", "izes", "sp", "ses", "gs", "b", "sym", "ures", "sb", "xs", "storage", "resses", "ts", "u", "ss", "is", "ions", "ls", "iss", "ims", "c", "parts", "e", "ssl", "string", "sq", "abs", "hs", "ns", "services", "objects", "su", "ves", "outs", "ans", "spec"], "i": ["slice", "multi", "qi", "diff", "init", "info", "key", "phi", "w", "uri", "left", "ie", "o", "inner", "g", "cli", "ii", "inline", "bi", "ni", "p", "iu", "id", "si", "ix", "data", "mini", "io", "z", "abi", "temp", "ci", "vi", "ui", "ini", "index", "shift", "d", "field", "j", "my", "fi", "pi", "it", "xi", "v", "ik", "x", "mu", "di", "I", "ai", "q", "gi", "b", "y", "ti", "hi", "u", "ri", "start", "lc", "c", "load", "ip", "e", "mi", "li", "sup", "oi"], "br": ["bl", "bi", "ber", "p", "hr", "rb", "ch", "browser", "tr", "rs", " sr", "arr", "pr", "jp", "vr", "lr", "fr", "ur", "r", "bh", "io", "bal", "bridge", "bc", "src", "ler", "er", "dr", "mr", "orb", "BR", "or", "sp", "bro", "str", "img", "ra", "pl", "kr", "Br", "brush", "ver", "result", "b", "sr", "err", "gr", "org", "ger", "reader", "obj", "buf", "sb", "bb", "ocr", "cr", "bar", "coll"], "regex": ["rru", "resreg", "Reex", "syex", " repo", "resntax", "rext", "sereg", "reex", "Rext", " rereg", "rereg", " rentax", "respo", "segex", "syxt", "sygex", "sentax", "rgex", "reru", "sepo", "resgex", "rentax", "repo", "Reru", "Regex", "rxt", "syru", "rex"], "st": ["bl", "ste", "inst", "sth", "ST", "p", "nd", "stack", "ss", "v", "pr", "butt", "sh", "line", "ct", "sn", "std", "fr", "r", "part", "start", "stage", "sw", "src", "sl", "c", "strike", "stress", "est", "sp", "str", "text", "string", "pt", "stri", "rest", "d", " est", "Str", "ld", "sr", "b", "St", "se", " ss", "sty", "sb", "sta", "ast", "sts", "rd", "struct", "cr", "t"], "n": ["all", "nn", "ot", "nc", "p", "size", "u", "na", "num", "N", "a", "name", "sn", "r", "z", "len", "f", "c", "ne", "m", "x", "e", "o", "d", "ns", "b", "body", "nb", "j", "net", "k", "pos", "no", "number", "t", " N"], "A": ["S", "Amount", "Count", "C", "An", "N", "AA", "M", "LA", "a", "As", "U", "Y", "Array", "Val", "F", "P", "SA", "au", "API", "T", "I", "L", "Alpha", "B", "Ar", "V", "Args", "K", "D", "H", "O", "CA", "G", "The", "W", "E", "array", "X"], "count": ["all", "counter", "total", "parent", "offset", "second", "low", "p", "Count", "size", "test", "id", "data", "old", "lag", "part", "start", "z", "error", "len", "cond", "length", "f", "c", "sum", "key", "index", "weight", "list", "depth", "base", "col", "code", "b", "err", "current", "child", "type", "group", "log", "level", "number", "la", "cache", "match", "coll"], "l": [" ls", "bl", "p", "u", "ln", " L", "v", " el", "a", "el", "lr", "r", "al", "lu", "h", "z", "lb", "lp", "f", "lc", "sl", "c", "m", "e", "pl", "ul", " la", "o", "L", "d", "lv", "kl", "b", "li", "dl", "j", "k", "ol", " b", "ell", "rl", "la", " fl", "wl", "lf", "jl", "t", "ll"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n  public static void heisei(){\\n    System.out.println(\"Heisei\");\\n  }\\n\\n  public static void tbd(){\\n    System.out.println(\"TBD\");\\n  }\\n\\n\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n\\n    String s = sc.next();\\n    String ss = s.replace(\"/\",\"\");\\n\\n    if(ss.compareTo(\"20190430\")<=0){\\n      heisei();\\n    }else{\\n      tbd();\\n    }\\n\\n  }\\n}", "target": "163", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "sf", "scope", "pc", "ch", "sec", " SC", "asc", "sh", "Sc", "SC", "ct", "cs", "bc", "sw", "src", "desc", "ci", "cer", "c", "sp", "acc", "st", "uc", "se", "ner", " Sc", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "spec", "ec", "esc", "sync"], "s": ["S", "rss", "sf", "p", "u", "ins", "rs", "v", "si", "i", "strings", "l", "is", "sv", "ls", "ws", "h", "src", "ps", "f", "sl", "c", "ds", "e", "str", "ssl", "string", "ses", "sq", "d", "n", "b", "services", "su", "stats", "in", "t"], "ss": ["rss", "S", "uss", "ts", "SS", "sf", "test", "class", "oss", "\u00df", "rs", "si", "i", "ass", "tz", "sv", "ls", "ws", "fs", "iss", "cs", "ps", "ess", "sl", "ms", "vs", "ds", "est", "hess", "str", "text", "string", "ses", "ssl", "CSS", "se", "su", "css", "DS", "fts", "eus", "xx"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try (Scanner sc = new Scanner(System.in)) {\\n            int n = sc.nextInt();\\n            int m = sc.nextInt();\\n\\n            int ll = 0;\\n            int rr = n;\\n            for (int i = 0; i < m; i++) {\\n                int li = sc.nextInt();\\n                int ri = sc.nextInt();\\n                if (li > ll) {\\n                    ll = li;\\n                }\\n                if (ri < rr) {\\n                    rr = ri;\\n                }\\n            }\\n            int ans = rr - ll + 1;\\n            if (ans < 0) {\\n                ans = 0;\\n            }\\n            System.out.println(ans);\\n        }\\n    }\\n}", "target": "124", "substitutes": {"n": ["nn", "all", "nc", "nt", "p", "u", "num", "N", "l", "sn", "r", "z", "nl", "nr", "ny", "f", "s", "c", "x", "e", "o", "d", "ns", "b", "nb", "j", "k", "in", "mn", "y", "en"], "m": ["all", "dm", "mc", "p", "rm", "u", "M", "v", "l", "mm", "r", "h", "z", "f", "cm", "ms", "c", "x", "e", "q", "o", "md", "d", "mi", "ii", "b", "j", "k", "in", "mn", "y"], "ll": ["nn", "cl", "nt", "fl", "ln", "vel", "le", "vl", "l", "el", "oll", "llo", "lin", "lr", "ls", "mm", "cel", "fr", "lu", "z", "lb", "nl", "len", "lp", "dr", "lc", "lli", "rell", "rol", "vell", "col", "pl", "ql", "ul", "q", "lv", "LL", "kn", "ld", "kl", "ii", "err", "dl", "sol", "ol", "ell", "rl", "lf", "ill", "lla", "wl", "coll"], "rr": ["rar", "rn", "ir", "rss", "rm", "rb", "RR", "rs", "pr", "arr", "ar", "ru", "lr", "fr", "r", "rh", "nr", "dr", "raise", "mr", "raf", "rell", "rol", "ra", "kr", "rg", "q", "rf", "rin", "sr", "rer", "err", "gr", "ner", "rd", "req", "ris", "rc", "cr", "rl", "rx", "ell", "rt"], "i": ["hi", "bi", "pi", "ori", "ni", "p", "u", "multi", "qi", "ji", "xi", "si", "l", "ik", "r", "uli", "io", "z", "vi", "ci", "ui", "ini", "eni", "uri", "ip", "di", "I", "ai", "gi", "mi", "ii", "zi", "j", "oi", "chi", "ki", "ti", "fi"], "li": ["ly", "bi", "pi", "ori", "ni", "Li", "qi", "ji", "si", "lic", "le", "l", "el", "lin", "uli", "ali", "lu", "lie", "len", "ler", "lc", "vi", "ci", "loc", "ui", "ini", "lo", "uri", "lli", "ie", "lv", "mi", "ili", "cli", "ii", "zi", "ti", "dl", "j", "ell", "la", "lf", "lla", "LI", "coll"], "ri": ["bi", "pi", "ori", "ni", "iri", "id", "qi", "xi", "si", "le", "l", "lin", "r", "uli", "io", "lie", "nr", "dr", "ci", "RI", "vi", "ini", "eni", "lo", "uri", "ra", "ai", "ry", "gi", "mi", "rin", "ili", "rio", "ii", "zi", "ner", "in", "ari", "rel", "ris", "la", "ki", "rid", "ti"], "ans": ["nn", "ana", "ace", "acts", "rss", "sk", "ars", "aned", "na", "ins", "ks", "rs", "arin", "lan", "span", "aces", "asts", "ar", "vals", "ares", "offs", "ls", "rules", "anges", "eps", "cs", "lines", "s", "os", "nas", "cas", "ds", "ros", "ants", "an", "x", "cus", "aid", "ANS", "ns", "ras", "ats", "anc", "scan", "aps", "ids", "annot", "as", "la", "amps", "ays", "ann"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n  public static void main (String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n    \\n    long A = sc.nextLong();\\n    long B = sc.nextLong();\\n    long C = sc.nextLong();\\n    long D = sc.nextLong();\\n\\n    sc.close();\\n\\n    long ansA = func(A-1,C,D);\\n\\n    long ansB = func(B,C,D);\\n\\n    System.out.println((long)(ansB - ansA));\\n    \\n  }\\n\\n  public static long func(long x, long c, long d){\\n\\n    long gcd = gcd(c,d);\\n    \\n    long lcm = c / gcd * d;\\n    \\n    long ans = x - x/c - x/d + x/lcm;\\n\\n    return ans;\\n  \\n  }\\n\\n  public static long gcd(long x, long y){\\n\\n    if (x < y) {\\n      long t = x;\\n      x = y;\\n      y = t;\\n    }\\n\\n    while (y > 0) {\\n      long r = x % y;\\n      x = y;\\n      y = r;\\n    }\\n\\n    return x;\\n    \\n  }\\n\\n}", "target": "9", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "mc", "scope", "pc", "na", "ser", "gram", "ch", "tc", "ss", " SC", "cur", "sub", "asc", "sh", "search", "fc", "Sc", "SC", "ct", "con", "exp", "bc", "cs", "sw", "cv", "cor", "desc", "lc", "loc", "dc", "cer", "sp", "system", "sq", "uc", "soc", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "proc", "cam", "esc", "ctx", "cus", "sync"], "A": ["AD", "S", "AR", "AM", "Ac", "Ca", "An", "AA", "N", "M", "LA", "a", "As", "U", "Y", "MA", "mA", "BA", "P", "PA", "Am", "Na", "API", "AU", "T", "Ab", "L", "Alpha", "Ar", "V", "AF", "AC", "H", "CA", "G", "AB", "X"], "B": ["AD", "Bs", "AR", "BF", "N", "M", "BI", "Bi", "U", "Y", "F", "BA", "P", "BC", "BB", "CB", "T", "I", "L", "R", "Ab", "b", "BE", "V", "BD", "AB", "NB", "OB", "O", "G", "W", "E", "DB"], "C": ["Can", "Cu", "CU", "S", "CI", "Ca", "N", "M", "CC", "U", "Sc", "SC", "CR", "Y", "CE", "F", "Cy", "Con", "P", "BC", "CD", "T", "I", "CM", "L", "R", "Cs", "DC", "K", "O", "CA", "G", "W", "E", "X"], "D": ["AD", "DH", "S", "DM", "N", "DE", "M", "DA", "DR", "U", "Y", "F", "Q", "P", "CD", "DI", "T", "DF", "L", "R", "Ds", "V", "DD", "DB", "DC", "H", "O", "DS", "DP", "G", "W", "E", "Do", "X"], "ansA": ["onsE", "ANSAA", "ANSE", "onsA", "ANSa", "ansAA", "anC", "anA", "annE", "ansa", "anAA", "onsAA", "annA", "annB", "lanA", "ANSA", "lanB", "lanAA", "anna", "ansE", "lanC", "anB", "onsa", "annC", "annAA", "ansC"], "ansB": ["annD", "ANSD", "ansL", "anA", "anonB", "ansD", "anonD", "anL", "nsb", "annB", "anasB", "nsL", "ansb", "anasb", "ANSA", "nsD", "anasD", "nsB", "annL", "ANSL", "anasL", "anonL", "ANSB", "annb", "anonA", "anB", "anD"], "x": ["ady", "ic", "dx", "p", "u", "id", "one", "ch", "python", "xi", "wy", "ex", "v", "i", "ix", "l", "a", "data", "X", "yx", "z", "h", "f", "cm", "ci", "s", "ax", "wx", "key", "index", "m", "w", "ty", "e", "xxx", "code", "q", "o", "ry", "n", "g", "b", "xt", "tx", "k", "time", "xs", "wa", "in", "xe", "cd", "xy", "rx", "px", "cy", "ctx", "xc", "xx"], "c": ["p", "u", "ch", "v", "i", "l", "a", "ct", "con", "z", "h", "cs", "f", "cm", "ci", "dc", "s", "lc", "m", "w", "cy", "e", "o", "n", "g", "b", "ac", "k", "cd", "ec", "xc"], "d": ["sd", "dx", "p", "u", "ad", "v", "i", "l", "a", "db", "z", "f", "fd", "dc", "s", "ds", "m", "w", "e", "q", "o", "dd", "n", "g", "b", "dy", "dt", "day", "j", "cd", "da"], "gcd": [" gcod", " gcr", "gcr", "gbcp", "lxd", "ogbd", "Gcd", "gcod", "lcd", " gxd", "ogcd", "rgxd", "fbd", "gcm", "gbcr", "gmd", "fcod", "gbcd", "Gmd", "rgdc", "Gcr", "ldc", "rgcr", "gbd", "ogcod", "rgmd", "Gdc", "Gcp", " gmd", "gbcm", " gbd", "fmd", "gdc", " gdc", "rgcd", "fcd", " gcp", "gcp", "gxd", "Gcm", " gcm", "ogmd", "rgcm"], "lcm": ["klcr", " lcc", "lcc", "gcc", "gcr", "lpc", "lcd", "lcr", "klcm", "llcm", " lgc", "gcm", "lgc", " lcd", "ggc", "klcd", "ulgc", "ulcm", "gpc", "klpc", "llpc", "llcr", "ulcd", "ulcc", "llcd"], "ans": ["ana", "nz", "mas", "AN", "na", "ins", "nan", " nan", "lan", "a", "vals", "es", "ions", "ls", "ens", "cs", "ians", "gd", "lines", "s", "ay", "XX", "ds", "an", " means", "cons", "ANS", "dd", "ns", "g", "abc", "anc", "xs", "lang", "as", "ons", "ctx", "ays", "can", "ann", "xx"], "y": ["ady", "py", "p", "gy", "u", "ch", "sy", "oy", "wy", "python", "v", "i", "vy", "ya", "l", "a", "Y", "yt", "ies", "yr", "ys", "z", "h", "yan", "ny", "f", "ay", "m", "w", "ty", "e", "ry", "o", "iy", "n", "g", "b", "ish", "dy", "err", "rot", "yy", "year", "j", "ye", "k", "yi", "yu", "type", "ey", "cy", "xx"], "t": ["nt", "p", "u", "v", "i", "l", "a", "z", "h", "f", "m", "at", "w", "ty", "e", "T", "st", "pt", "ta", "q", "o", "n", "g", "b", "k", "type", "tt", "rt"], "r": ["p", "rate", "hr", "rb", "rs", "ar", "res", "l", "ur", "rh", "right", "yr", "h", "nr", "dr", "er", "mr", "m", "rw", "e", "q", "rf", "ry", "R", "n", "sr", "err", "b", "rr", "rd", "rc", "cr", "rx", "bar", "rt", "range", "re"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args) {\\n\tScanner scan = new Scanner(System.in);\\n\twhile (scan.hasNext()) {\\n\t    int count = 0;\\n\t    int n = scan.nextInt();\\n\t    int x = scan.nextInt();\\n\t    if (n == 0 && x == 0) {\\n\t\tbreak;\\n\t    }\\n\t    for (int i = 1; i < n - 1; i++) {\\n\t\tif (i > x) {\\n\t\t    break;\\n\t\t}\\n\t\tfor (int j = i + 1; j < n; j++) {\\n\t\t    if (j + i > x) {\\n\t\t\tbreak;\\n\t\t    }\\n\t\t    for (int k = j + 1; k < n + 1; k++) {\\n\t\t\tif (j + i + k > x) {\\n\t\t\t    break;\\n\t\t\t}\\n\t\t\tif (j + i + k == x) {\\n\t\t\t    count++;\\n\t\t\t    break;\\n\t\t\t}\\n\t\t    }\\n\t\t}\\n\t    }\\n\t    System.out.println(count);\\n\t}\\n    }\\n}", "target": "116", "substitutes": {"scan": ["nn", "all", "cat", "see", "watch", "connect", "walk", "na", "ser", "server", "ln", "serv", "span", "run", "wan", "search", "l", "fan", "con", "r", "ban", "sc", "iter", "row", "er", "gen", "conn", "report", "feed", "plan", "an", "chan", "read", "ry", "skip", "err", "kin", "ignore", "se", "ner", "reader", "in", "parse", "die", "Scan", "clean", "san", "ans", "pan", "look", "en", "can", "ann", "sync"], "count": ["counter", "total", "cat", "second", "p", "Count", "size", "test", "id", "num", "span", "data", "part", "start", "z", "info", "length", "f", "last", "c", "order", "key", "sum", "check", "index", "weight", "depth", "base", "list", "e", "text", "col", "max", "code", "d", "b", "work", "child", "found", "group", "number", "y", "cache", "match", "ind", "coll"], "n": ["nn", "nc", "nt", "ni", "p", "u", "num", "nu", "nan", "N", "v", "cn", "l", "a", "sn", "z", "h", "ny", "f", "s", "c", "ne", "m", "w", "an", "e", "q", "o", "d", "ns", "ii", "b", "network", "nb", "net", "in", "mn", "y", "en", "t"], "x": ["on", "p", "u", "id", "one", "na", "px", "xi", "ex", "v", "xes", "ix", "l", "a", "X", "r", "cross", "z", "h", "f", "c", "ax", "wx", "index", "m", "w", "e", "xxx", "q", "o", "d", "b", "work", "xs", "in", "y", "rx", "ux", "xt", "t", "xx"], "i": ["bi", "ir", "pi", "ori", "ni", "p", "iu", "ami", "it", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "l", "a", "is", "ri", "io", "init", "z", "f", "ci", "vi", "ui", "c", "ini", "eni", "phi", "ip", "di", "e", "I", "ie", "ai", "o", "mi", "ii", "b", "zi", "li", "yi", "in", "y", "ki", "ti"], "j": ["py", "dj", "jj", "java", "jc", "p", "oj", "it", "u", "id", "J", "ji", "json", "v", "jp", "si", "ix", "l", "ij", "is", "ik", "start", "init", "jon", "z", "h", "aj", "f", "br", "c", "key", "jan", "index", "e", "jet", "ja", "uj", "ie", "q", "o", "jit", "ii", "b", "li", "js", "je", "job", "y", "jl", "jen", "jo"], "k": ["ky", "sk", "p", "kg", "ka", "u", "id", "ko", "ck", "ke", "ks", "v", "kh", "kick", "l", "kk", "ik", "r", "ph", "z", "dk", "ok", "f", "ek", "c", "key", "ak", "m", "w", "ijk", "kr", "q", "o", "d", "kn", "b", "kin", "kid", "K", "uk", "y", "ki"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String s = sc.next();\\n        int cnt = 0;\\n        String ABC = \"ABC\";\\n        for (int i = 0; i < n - 2; i++) {\\n            char a = s.charAt(i);\\n            char b = s.charAt(i + 1);\\n            char c = s.charAt(i + 2);\\n            String tmp = String.valueOf(a) + String.valueOf(b) + String.valueOf(c);\\n            if (tmp.equals(ABC) ) {\\n                cnt++;\\n            }\\n        }\\n        System.out.println(cnt);\\n    }\\n}\\n", "target": "110", "substitutes": {"sc": ["cl", "sche", "mc", "nc", "sci", "scope", "pc", "ser", "ch", "server", "ss", " SC", "cur", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "cor", "lc", "ci", "cer", "sp", "mp", "sq", "uc", "sr", "ca", "sem", "se", "ner", "anc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "cus"], "n": ["nn", "nc", "nt", "ni", "p", "adj", "na", "nor", "num", "N", "ln", "l", "sn", "z", "un", "nl", "len", "f", "fn", "conn", "inn", "ne", "m", "x", "d", "ns", "network", "nb", "ner", "j", "net", "k", "in", "en", "t"], "s": ["S", "features", "blocks", "p", "u", "ins", "ss", "si", "strings", "bis", "qs", "es", "sv", "is", "ls", "ws", "r", "fs", "its", "series", "sin", "bs", "f", "vs", "sl", "ings", "ds", "os", "words", "ops", "e", "str", "string", "ses", "abs", "gs", "g", "ns", "services", "su", "js", "sb", "xs", "in", "as", "ans", "letters"], "cnt": ["counter", "ccount", "cnc", "cNT", "lcnt", "lccount", "encNT", "crnn", "fret", "fpt", "crret", "Cno", " cnn", "CNT", "encnn", "cret", "Cnt", " cNT", "fnn", " cpt", "lcno", "fnt", "Cnn", "cnn", " counter", "cno", "crpt", "cpt", "dccount", "dcnc", "lcnc", "crnt", "Counter", "dcno", "Cnc", " cret", "dcnt", "Ccount", "encnt", "encounter"], "ABC": ["fb", "FC", "AAA", "C", "AW", "AA", "aaaa", "ACA", "CC", "LA", "PB", "Array", "XXX", "BA", "RC", "A", "BC", "ARR", "ARC", "AAAA", "AU", "CLA", "ACC", "TX", "ERA", "abc", "AAF", "AX", "aaa", "AC", "AF", "CBC", "CA", "XXXX", "AB", "BBC", "X"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "ami", "it", "u", "id", "slice", "multi", "qi", "ji", "xi", "v", "si", "ix", "is", "ri", "io", "info", "f", "ci", "ui", "ini", "index", "eni", "mu", "uri", "ip", "di", "e", "I", "ie", "ai", "gi", "isi", "ii", "zi", "li", "j", "oi", "in", "chi", "y", "ti", "fi"], "a": ["api", "p", "ia", "ba", "l", "name", "aa", "A", "pa", "f", "au", "at", "an", "ata", "sa", "e", "ada", "ae", "aka", "ai", "alpha", "af", "abc", "ca", "ac", "aaa", "sta", "ama", "fa", "asha", "asa", "area", "ab", "va"], "b": ["bi", "p", "u", "pb", "rb", "v", "ba", "l", "ib", "cb", "db", "r", "aa", "bc", "lb", "bs", "f", "eb", "bas", "x", "base", "e", "d", "B", "abc", "nb", "sb", "bb", "wb", "ab", "ob"], "c": ["enc", "vc", "p", "C", "u", "ch", "v", "l", "cu", "ct", "r", "z", "bc", "h", "cs", "f", "lc", "ci", "dc", "e", "col", "uc", "ce", "cf", "d", "ca", "abc", "ac", "cd", "cc", "cr", "ec", "esc"], "tmp": ["fb", "py", "api", "ppo", "elt", "upe", "nt", "p", "MP", "now", "rb", "stuff", "kk", "cb", "vt", "temp", "src", "cmp", "ppa", "np", "mp", "fp", "opp", "vp", "result", "appy", "abc", "nb", "cpp", "amp", "su", "aaa", "sb", "bb", "sup", "etc", "storage", "xb", "txt", "bt", "LT", "mobi", "TB", "bp", "BBC", "mmm"]}}
{"code": "import java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String line = br.readLine();\\n        double r = Double.parseDouble(line);\\n        System.out.println(String.format(\"%.6f %.6f\", r*r*Math.PI, 2*r*Math.PI));\\n    }\\n}", "target": "239", "substitutes": {"br": ["bl", "div", "ori", "ber", "wr", "hr", "rb", "browser", "tr", "arr", "i", "res", "fr", "bf", "bh", "yr", "io", "bridge", "nr", "er", "dr", "orb", "mr", "BR", "her", "bro", "str", "Br", "abs", "sr", "b", "err", "gr", "reader", "obj", "buf", "ocr", "bb", "cro", "bt", "cr", "rt"], "line": ["cl", "p", "val", "url", "l", "page", "data", "lin", "entry", "value", "block", "source", "row", "input", "nl", "cell", "end", "f", "lines", "lc", "sl", "c", "output", "str", "text", "string", "column", "code", "rule", "b", "LINE", "reader", "inline", "write", "parse", "in", "response", "log", "file", "look", "Line", "out"], "r": [" R", "rating", "pi", "radius", "p", "u", "hr", "rs", "pr", "i", "ar", "cur", "l", "lr", "rh", "h", "nr", "f", "er", "mr", "c", "m", "e", "rg", "rf", "R", "d", "n", "sr", "b", "result", "err", "rr", "j", "k", "rd", "rc", "cr", "rl", "rt", "range", "t", "ru", "re"]}}
{"code": "// package div2658.dpatcoder;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    static class FastReader {\\n\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        }\\n\\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        }\\n\\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n\\n    }\\n\\n    public static void main(String[] args) {\\n        FastReader fs = new FastReader();\\n        int n = fs.nextInt();\\n        int k = fs.nextInt();\\n        int[] h = new int[n];\\n        \\n        for (int i = 0; i < n; i++) {\\n            h[i] = fs.nextInt();\\n        }\\n\\n        int[] dp = new int[n];\\n\\n        dp[n-1] = 0;\\n\\n        for (int i = n-2; i >= 0; i--) {\\n            int curr = Integer.MAX_VALUE;\\n            for (int l = 1; l <= k; l++) {\\n                if (i+l < dp.length) {\\n                    curr = Math.min(curr, Math.abs(h[i] - h[i+l]) + dp[i+l]);\\n                }\\n            }\\n            dp[i] = curr;\\n        }\\n\\n        System.out.println(dp[0]);\\n\\n    }\\n\\n\\n\\n\\n}\\n", "target": "241", "substitutes": {}}
{"code": "import java.util.*;\\nclass Main{\\n  public static void main(String[] args){\\n\tScanner stdIn = new Scanner(System.in);\\n\tString s = stdIn.next();\\n    for(int i=0;i<s.length();i++){\\n\tSystem.out.print(\"x\");\\n    }\\n    System.out.println(\"\");\\n  }\\n}", "target": "122", "substitutes": {"stdIn": ["intIn", "stIns", "STDins", " stdin", "intOut", "stdins", "stdIns", "STDin", "stIn", "stOut", " stdIns", "intins", "intin", " stdins", "STDIn", "stdOut", "STDIns", "STDOut", "stdin", "stin", " stdOut"], "s": ["S", "sf", "sections", "p", "ins", "ss", "rs", "si", "strings", "l", "qs", "es", "sv", "is", "ls", "ws", "seconds", "fs", "input", "ps", "f", "os", "c", "ds", "codes", "parts", "ses", "string", "hs", "gs", "ns", "b", "sets", "services", "shows", "su", "js", "sb", "xs", "in", "ans", "fts"], "i": ["bi", "hi", "pi", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ri", "uli", "h", "z", "abi", "f", "ci", "c", "ui", "key", "index", "m", "phi", "x", "base", "uri", "e", "di", "I", "ai", "o", "gi", "d", "n", "ii", "b", "zi", "li", "j", "oi", "in", "chi", "t", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\nimport java.lang.Math;\\npublic class Main{\\n    public static void main(String[] args) {\\n\tScanner scan = new Scanner(System.in);\\n\twhile (scan.hasNext()) {\\n\t    String input = scan.nextLine();\\n\t    String[] inputs = input.split(\" \");\\n\t    int height = Integer.parseInt(inputs[0]);\\n\t    int width = Integer.parseInt(inputs[1]);\\n\t    if (height == 0 && width == 0) {\\n\t\tbreak;\\n\t    }\\n\t    printsharp(width);\\n\t    for (int i = 0; i < height - 2; i++) {\\n\t\tSystem.out.print(\"#\");\\n\t\tfor (int j = 0; j < width - 2; j++) {\\n\t\t    System.out.print(\".\");\\n\t\t}\\n\t\tSystem.out.println(\"#\");\\n\t    }\\n\t    printsharp(width);\\n\t    System.out.println();\\n\t}\\n    }\\n    public static void printsharp(int width) {\\n\tfor (int i = 0; i < width; i++) {\\n\t    System.out.print(\"#\");\\n\t}\\n\tSystem.out.println();\\n    }\\n}", "target": "19", "substitutes": {"scan": ["nn", "cat", "see", "print", "watch", "connect", "walk", "sci", "bug", "ser", "gram", "span", "run", "search", "l", "fan", "con", "r", "sin", "row", "report", "feed", "check", "an", "system", "read", "skip", "inner", "ry", "n", "sync", "util", "stat", "ignore", "se", "ner", "pass", "reader", "in", "parse", "Scan", "clean", "san", "look", "match", "sc", "out", "can", "ann", "query"], "input": ["message", "buffer", "intel", "null", "next", "picture", "path", "line", "data", "name", "answer", "request", "entry", "value", "header", "source", "row", "s", "image", "key", "feed", "format", "password", "output", "config", "Input", "str", "img", "submit", "text", "string", "raw", "plus", "result", "qa", "work", "form", "expression", "in", "word", "argument", "pull", "out"], "inputs": ["Inputparts", "selectits", "colparts", " inputb", "initialn", "Inputn", "initials", "selects", " inputf", "Inputits", "Inputf", "colb", " inputits", " inputparts", "Inputi", "inputparts", "selectf", "inputb", " inputi", "Inputb", "inputi", "Inputs", "inputf", "inputits", "cols", "inputn", " inputn", "initiali"], "height": ["head", "hi", "layout", "radius", "window", "inches", "images", "size", "slice", "id", "view", "Height", "gh", "family", "fw", "data", "png", "ht", "gap", "header", "h", "above", "length", "deep", "image", "style", "x", "depth", "img", "memory", "crop", "padding", "dim", "density", "angle", "gravity", "y", "bottom", "level", "shape", "th", "pull", "resolution", "thin"], "width": ["message", "size", "description", "sw", "format", "w", "output", "depth", "left", "brush", "area", "section", "window", "target", "function", "filename", "url", "line", "data", "name", "value", "z", "method", "length", "down", "index", "memory", "large", "content", "n", "dim", "body", "wa", "write", "file", "number", "crop", "west", "count", "span", "lon", "duration", "fill", "idth", "len", "Width", "wave", "weight", "x", "cut", "weights", "padding", "platform", "work", "word", "shape", "capacity", "port", "wl", "thin", "wp", "layout", "null", "wm", "fw", "page", "gender", "spread", "style", "strike", "text", "string", "two", "widget", "fat", "design", "flow"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "si", "ix", "mini", "ri", "ik", "uli", "io", "init", "z", "info", "abi", "f", "ci", "ui", "ini", "index", "phi", "x", "mu", "uri", "di", "e", "ip", "I", "ie", "ai", "gi", "inner", "mi", "n", "ii", "zi", "b", "li", "yi", "in", "chi", "y", "my", "fi"], "j": ["jj", "jc", "p", "it", "u", "J", "qi", "ji", "xi", "v", "jp", "ix", "l", "ij", "z", "h", "end", "length", "f", "c", "index", "x", "e", "di", "ja", "q", "o", "d", "n", "g", "ii", "b", "li", "js", "k", "y", "jl", "aj"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author maheshwari29\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        BBalance solver = new BBalance();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BBalance {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int i, j;\\n            int n = in.ni();\\n            int w[] = in.nia(n);\\n            int temp[] = new int[105];\\n            int sum = 0;\\n            int ans = Integer.MAX_VALUE;\\n            for (int c : w)\\n                sum += c;\\n            int temp2 = 0;\\n            for (i = 0; i < n; i++) {   //out.println(sum+\" \"+temp2);\\n                int y = sum - temp2;\\n                ans = Math.min(ans, Math.abs(y - temp2));\\n                temp2 += w[i];\\n                y = sum - temp2;\\n                ans = Math.min(ans, Math.abs(y - temp2));\\n            }\\n\\n\\n            out.println(ans);\\n            //out.println(\"______________________\");\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n        public void println(int i) {\\n            writer.println(i);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int ni() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public int[] nia(int n) {\\n            int[] array = new int[n];\\n            for (int i = 0; i < n; ++i) array[i] = ni();\\n            return array;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "2", "substitutes": {"inputStream": ["loadStreamer", "loadSteam", "inputSteam", "outputSteam", " inputstream", "readerStream", "readerDocument", " inputSteam", "InputSteam", "inputStreamer", "loadStream", "inputDocument", "inputInterface", "loadDocument", " inputInterface", "Inputstream", "outputDocument", "outputStreamer", "readerSteam", "InputInterface", "InputStream", "readerStreamer", "outputstream", "outputInterface", "inputstream"], "outputStream": ["outputWriter", "inputSteam", "outputSteam", "writerWindow", "OutputStreamer", "Outputstream", "connectionWriter", "inputWindow", "inputStreamer", "OutputStream", "OutputWriter", "writerstream", "writerSteam", "connectionSteam", "inputWriter", "outputStreamer", "OutputWindow", "outputWindow", "connectionStream", "OutputSteam", "outputstream", "inputstream", "writerStream", "connectionStreamer"], "in": ["this", "ic", "isin", "IN", "line", "id", "login", "ins", "din", "inside", "run", "path", "url", "l", "a", "data", "is", "request", "lin", "con", "r", "name", "diff", "io", "init", "win", "info", "input", "sin", "source", "get", "In", "f", "session", "conn", "image", "inn", "ini", "gen", "m", "config", "cin", "ie", "min", "gin", "inf", "inner", "rin", "kin", "err", "again", "reader", "work", "exec", "pin", "log", "bin", "vin", "from", "as", "rx", "inc", "read"], "out": ["this", "buffer", "ext", "init", "at", "output", "left", "Out", "o", "inner", "exec", "connection", "bin", "inc", "copy", "error", "window", "call", "target", "client", "version", "data", "name", "cmd", "io", "timeout", "conn", "user", "list", "socket", "plain", "plus", "again", "write", "up", "file", "off", "later", "array", "scope", "to", "point", "outside", "process", "writer", "err", "net", "work", "writ", "log", "cache", "sync", "parent", "one", "ex", "page", "is", "inas", "session", "outer", "external", "writing", "OUT", "cin", "string", "problem", "job", "outs", "exit"], "solver": ["solving", "esolution", "ssolving", "ssolve", "unsolver", "Solver", "ssolver", "esolver", "ssolution", "solve", "solution", "Solution", "esolve", "Solving", "unsolving", "Solve", "unsolve", "esolving", "unsolution"], "testNumber": ["trialNumber", "testNumbers", "testnumber", " trialnumber", " trialNumber", " testnumber", " trialNumbers", "trialNumbers", "trialnumber", " testNum", " testNumbers", " trialNum", "testNum", "trialNum"], "i": ["bi", "pi", "ni", "p", "ami", "iu", "it", "u", "multi", "qi", "xi", "v", "si", "ix", "l", "mini", "ri", "uli", "io", "z", "info", "abi", "f", "ci", "ini", "ui", "index", "m", "phi", "x", "uri", "ip", "e", "di", "I", "ie", "o", "inner", "d", "mi", "gi", "gu", "ii", "b", "li", "k", "yi", "ind", "fi"], "j": ["jj", "jc", "p", "J", "ch", "ji", "v", "jp", "l", "ij", "z", "key", "m", "e", "note", "ja", "uj", "ie", "o", "b", "obj", "k", "pos", "kj", "job", "jl", "jo"], "n": ["nn", "nc", "nt", "ni", "p", "size", "u", "num", "nu", "N", "v", "l", "sn", "r", "z", "len", "f", "s", "ne", "m", "x", "e", "q", "o", "d", "ns", "b", "pn", "nb", "network", "k", "mn", "y", "en", "t"], "w": ["aw", "wp", "wo", "p", " W", "u", "v", "wan", "ws", "wd", "win", "z", "sw", "width", "iw", "t", "wx", "weight", "wi", "x", "m", "rw", "kw", "ww", "q", "wt", "hw", "tw", "wu", "ow", "d", "ew", "wa", "y", "wb", "we", "W", "wl", "wh"], "temp": ["tmp", "total", "count", "p", "buffer", "test", "emp", "num", "stack", "extra", "partial", "perature", "Temp", "z", "cond", "tem", "weight", "var", "base", "mp", "tp", "current", "wa", "thread", "wrap", "cache", "t"], "sum": ["um", "total", "count", "p", "size", "cost", "gram", "num", "v", "si", "average", "vol", "ass", "sh", "sam", "fill", "use", "mass", "spread", "cal", "weight", "m", "index", "sp", "acc", "cum", "max", "alpha", "miss", "Sum", "g", "ac", "su", "norm", "scale", "mean"], "ans": ["all", "nc", "p", "cost", "C", "span", "a", "es", "ens", "init", "len", "cond", " C", "s", " len", "an", "x", "base", " s", "ta", "ac", "current", " mean", "mean", " rand"], "c": ["mc", "nc", "ic", "cat", "count", "p", "C", "u", "ch", "v", "cu", "ct", "r", "co", "cs", "f", "lc", "ci", "dc", "cm", "m", "x", "cy", "e", "ce", "cf", "d", "b", "ac", "k", "cc", "cr", "sc", "ec", "xc"], "temp2": ["Temp2", "temp1", "emp2", "Temp1", "emp1", " temp1"]}}
{"code": "import java.util.HashSet;\\nimport java.util.Scanner;\\nimport java.util.Set;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint n = scanner.nextInt(); \\n\t\tSet<String> set = new HashSet<String>();\\n\t\tscanner.nextLine();\\n\t\tString s;\\n\t\tfor(int i =0;i<n;i++) {\\n\t\t\ts = scanner.nextLine();\\n\t\t\tset.add(s);\\n\t\t}\\n\t\\n\t\tSystem.out.println(set.size());\\n\t}\\n}", "target": "98", "substitutes": {"scanner": ["Scaninner", "scer", "scanker", "anner", "aninner", "scner", "caner", "canning", "analyner", "caninner", "analyning", "nerter", "aner", "scanter", "scanorer", "analyker", "annener", "scener", "scanener", "nerner", "Scanener", "anninner", "scaner", "nerning", "canener", "Scanorer", "scanning", "Scanker", "Scanter", "analyter", "Scaner", "annner", "nerker", "scorer", "anning", "Scanning", "canorer", "canner", "Scanner", "scaninner"], "n": ["nn", "nc", "nt", "ni", "count", "p", "size", "u", "num", "N", "ln", "v", "l", "sn", "z", "h", "nl", "len", "f", "c", "m", "w", "x", "q", "o", "d", "ns", "b", "nb", "j", "net", "k", "in", "number", "y", "en", "t"], "set": ["reset", "setup", "size", "seen", "null", "id", "keep", "add", "sort", "name", "use", "sign", "is", "store", "start", "init", "sc", "get", "collection", "end", "key", "send", "check", "list", "settings", "base", "setting", "site", "se", "ge", "parse", "SET", "update", "no", "type", "group", "section", "cache", "et", "en", "sync"], "s": ["single", "S", "ts", "p", "message", "u", "ins", "ss", "rs", "si", "strings", "l", "a", "data", "es", "is", "ls", "fs", "ws", "its", "r", "source", "h", "f", "your", "c", "m", "settings", "str", "e", "string", "o", "abs", "d", "ns", "sets", "b", "pass", "js", "su", "in", "ids", "ans", "address", "comments", "as", "spec", "t"], "i": ["bi", "hi", "pi", "ni", "p", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ri", "h", "z", "info", "abi", "f", "ci", "ui", "ini", "phi", "mu", "uri", "ip", "e", "di", "I", "ai", "o", "gi", "d", "ii", "b", "zi", "li", "j", "oi", "chi", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner x  = new Scanner(System.in);\\n\t\tint n = x.nextInt();\\n\t\tint[] price = new int[n];\\n\t\tfor(int m = 0 ; m < n ; m++){\\n\t\t\tprice[m] = x.nextInt();\\n\t\t}\\n\t\tSystem.out.print(price[n-1]);\\n\t\tfor(int g = n-2 ; g >= 0 ; g--){\\n\t\t\tSystem.out.print(\" \" + price[g]);\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n}", "target": "79", "substitutes": {"x": ["php", "print", "p", "xp", "na", "python", "xi", "ex", "v", "ext", "xes", "ix", "l", "X", "r", "cross", "io", "z", "get", "hex", "f", "er", "s", "lex", "c", "wx", "ax", "check", "index", "e", "read", "inner", "sync", "b", "rex", "tx", "work", "exec", "xs", "in", "rx", "ux", "parser", "fx", "t", "ctx", "xc", "xx"], "n": ["nn", "nc", "nt", "count", "p", "size", "u", "nor", "num", "N", "v", "i", "l", "sn", "r", "z", "h", "nl", "un", "f", "conn", "s", "c", "ne", "w", "an", "e", "q", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "no", "in", "mn", "number", "y", "en", "t"], "price": ["market", "currency", "change", "rate", "count", "val", "buy", "cost", "offer", "patch", " prices", "priced", "pr", "version", "data", "point", "pie", "value", "info", "error", "ps", "length", "order", "style", "key", "index", "pe", "Price", "per", "grade", "code", "quote", "profit", "trade", "cycle", "pos", "time", "parse", "scale", "position", "type", "money", "range", "options", "fee"], "m": ["dm", "mc", "im", "bm", "p", "u", "om", "M", "v", "i", "l", "mm", "r", "nm", "h", "f", "cm", "mr", "ms", "c", "fm", "pm", "w", "ym", "mu", "tm", "e", "gm", "md", "o", "d", "mi", "b", "em", "j", "k", "sm", "mn", "y", "am", "t"], "g": ["msg", "age", "p", "gt", "gy", "go", "u", "gh", "l", "ng", "r", "pg", "erg", "gas", "gap", "h", "ag", "gc", "gb", "reg", "gg", "f", "gen", "s", "c", "ga", "arg", "w", "mg", "agg", "e", "gm", "cfg", "rg", "q", "gi", "gp", "ang", "d", "gu", "b", "gam", "gs", "vg", "gr", "j", "gain", "k", "ge", "eg", "group", "G", "sg", "gn", "game", "ig"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n      \\n      Scanner sc = new Scanner(System.in);\\n      \\n      int A = sc.nextInt();\\n      int B = sc.nextInt();\\n   \t  int C = sc.nextInt();\\n      int X = sc.nextInt();\\n      \\n      int y = 0;\\n      int count = 0;\\n      for(int i=0; i <= A ; i++){\\n      \tfor(int j=0; j <= B; j++){\\n        \ty = (X-500*i-100*j)/50;\\n            if(y >= 0 && y <= C){\\n            \tcount = count+1;\\n            }\\n               \\n        }\\n      }\\n\tSystem.out.println(count);\\n    }\\n}\\n", "target": "127", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "ser", "ch", "tc", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "exp", "can", "bc", "cs", "sw", "cv", "cor", "src", "lc", "ci", "cer", "c", "sp", "sq", "uc", "soc", "sr", "ca", "se", "ner", " Sc", "anc", "sb", "ocr", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "ec", "esc", "ctx", "cus", "sync"], "A": ["AD", "S", "AR", "NA", "If", "Ca", "AA", "N", "M", "LA", "a", "As", "U", "Y", "Array", "Az", "AP", "P", "SA", "EA", "Ma", "Area", "Am", "Na", "API", "I", "KA", "App", "At", "Alpha", "Ar", "AF", "AC", "D", "IA", "AI", "CA", "DA", "AB"], "B": ["BL", "Bs", "J", "BF", "N", "M", "BI", "Bi", "Y", "F", "WB", "BA", "Q", "P", "BC", "BB", "CB", "I", "L", "R", "b", "BE", "DB", "V", "BD", "NB", "D", "GB", "O", "G", "MB", "W", "E", "LB"], "C": ["Cu", "S", "EC", "CI", "N", "M", "CC", "CF", "CCC", "U", "Y", "SC", "F", "Q", "P", "BC", "c", "KC", "T", "I", "L", "R", "V", "K", "DC", "D", "O", "Z", "G", "JC", "CS", "W", "E"], "X": ["S", "ID", "J", "N", "M", "CC", "U", "Y", "F", "Q", "batch", "P", "width", "XX", "x", "I", "Xi", "CP", "L", "R", "Max", "IX", "V", "K", "D", "H", "Z", "O", "G", "MAX", "W", "E"], "y": ["ady", "yo", "ky", "py", "p", "gy", "id", "sky", "sy", "oy", "vy", "ya", "a", "l", "Y", "yt", "start", "z", "h", "isy", "ny", "f", "ay", "c", "index", "m", "x", "cy", "zy", "ty", "e", "ry", "iy", "d", "n", "b", "ish", "dy", "year", "yy", "ye", "yi", "type", "ey", "ind", "t"], "count": ["counter", "total", "cat", "parent", "offset", "status", "second", "low", "p", "Count", "size", "more", "id", "l", "a", "old", "part", "start", "z", "info", "length", "f", "c", "sum", "key", "check", "index", "x", "list", "base", "depth", "e", "carry", "label", "col", "max", "code", "d", "n", "b", "limit", "err", "cycle", "work", "child", "found", "force", "type", "number", "error", "ind"], "i": ["bi", "hi", "pi", "ori", "iu", "p", "it", "u", "id", "J", "qi", "ji", "xi", "v", "si", "ix", "l", "a", "is", "z", "h", "f", "ci", "c", "ui", "m", "phi", "x", "ip", "I", "ai", "o", "d", "mi", "n", "ii", "b", "li", "k", "in", "chi", "ki", "ti"], "j": ["py", "jj", "pi", "jc", "p", "oj", "it", "u", "J", "ch", "ji", "v", "jp", "si", "ix", "l", "ij", "fr", "r", "z", "h", "aj", "f", "ci", "c", "ui", "key", "m", "x", "e", "ja", "I", "ie", "q", "o", "d", "n", "g", "b", "ii", "dy", "li", "js", "k", "jl", "jo"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        FastScanner sc = new FastScanner(System.in);\\n        int n = sc.nextInt();\\n        int cnt = 0;\\n        while(n >= 2){\\n            n/=2;\\n            cnt++;\\n        }\\n        System.out.println((int)Math.pow(2,cnt));\\n    }\\n}\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    } \\n}", "target": "225", "substitutes": {"sc": ["cl", "mc", "nc", "sci", "scope", "pc", "ch", "sec", "ss", " SC", "si", "sub", "asc", "search", "sh", "Sc", "SC", "bc", "cs", "sw", "lc", "ci", "dc", "s", "c", "cer", "sp", "acc", "system", "sq", "uc", "ca", "se", "ner", " Sc", "ocr", "anc", "scan", "osc", "rc", "cc", "ec", "esc", "cus", "sync"], "n": ["nn", "all", "none", "rn", "nc", "nt", "ni", "count", "p", "size", "dn", "u", "nor", "na", "num", "nu", "nan", "N", "ln", "span", "v", "cn", "l", "sn", "name", "ng", "init", "z", "un", "nl", "len", "f", "fn", "conn", "s", "nat", "c", "ne", "m", "an", "x", "w", "e", "left", "node", "o", "d", "ns", "b", "g", "network", "nb", "names", "j", "net", "k", "norm", "no", "not", "non", "number", "y", "en", "t"], "cnt": ["cnc", "pnd", "cNT", "cct", "lcnt", "count", "Count", " cnd", " count", "pNT", "c0", "Cno", " cnc", "CNT", "C0", " cNT", "pnc", " cct", "pnt", "cnd", " c0", "lcno", "Cnd", "Cct", "cno", "lcct", "p0", "pno", "lcount", "Cnc", " cno", "Cnt"], "reader": ["rar", "counter", "over", "buffer", "loader", "processor", "server", "enter", "url", "l", "data", "r", "oder", "entry", "io", "iter", "stream", "row", "input", "source", "ler", "resource", "er", "pointer", "feed", "writer", "per", "ry", "inner", "context", "rer", "riter", "rr", "handler", "ner", "editor", "iterator", "rc", "manager", "worker", "readable", "file", "keeper", "parser", "driver", "reading", "read", "Reader"], "tokenizer": ["authorization", " tokenizers", "normalization", "tokenener", " tokenener", "Tokenization", " tokenize", "tokenoser", "okenoser", "Tokenize", "Tokener", "tokenize", "serializers", "okener", "initialize", "okenizer", " tokeniser", " tokenization", "authoriser", "initialner", "okenize", "tokenizable", "Tokenized", "Tokenoser", "tokenization", "okenner", "okenized", " tokenner", "tokenized", "tokeniser", "initializer", "tokener", "authorizers", "normalner", "normalizer", "normaliser", " tokenoser", " tokenizable", "okenization", "authorner", "Tokenner", " tokener", "tokenizers", "okenizable", "tokenner", "initialization", "serializer", " tokenized", "okeniser", "okenizers", "serialener", "Tokeniser", "normalize", "authorized", "serialiser", "authorize", "Tokenizer", "authorizer", "Tokenizable", "okenener"], "in": ["this", "buffer", "null", "id", "it", "login", "ins", "server", "din", "ex", "path", "line", "url", "data", "is", "lin", "r", "io", "source", "info", "stream", "input", "resource", "In", "f", "image", "inn", "ini", "c", "or", "OUT", "x", "str", "socket", "string", "raw", "inf", "inner", "rin", "b", "err", "pass", "connection", "log", "bin", "readable", "file", "as", "inc", "lock", "doc", "IN", "out"], "a": ["all", "aw", "ana", "parent", "anta", "count", "p", "ia", "na", "ad", "span", "auto", "ba", "data", "r", "aa", "h", "A", "ha", "f", "tta", "au", "instance", "c", "ga", "index", "m", "ata", "an", "action", "sa", "ea", "active", "code", "alpha", "o", "g", "array", "ca", "b", "ac", "aaa", "k", "ama", "as", "y", "la", "area", "ab", "da", "ma", "am", "va", "aj"], "i": ["hi", "bi", "pi", "ori", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "l", "mini", "is", "data", "ri", "r", "io", "init", "z", "info", "abi", "f", "lc", "ci", "ui", "c", "ini", "eni", "phi", "x", "mu", "uri", "e", "di", "ip", "I", "ie", "ai", "q", "o", "gi", "d", "mi", "g", "b", "ii", "li", "field", "j", "oi", "me", "yi", "chi", "y", "my", "ti", "fi"]}}
{"code": "import java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\ttry (Scanner scanner = new Scanner(System.in)) {\\n\t\t\tchar[] S = scanner.next().toCharArray();\\n\\n\t\t\tMap<Character, Integer> map = new HashMap<>();\\n\\n\t\t\tfor (char c : S) {\\n\t\t\t\tmap.put(c, map.getOrDefault(c, 0) + 1);\\n\t\t\t}\\n\\n\t\t\tString ans = \"No\";\\n\t\t\tif (map.size() == 2) {\\n\\n\t\t\t\tif (map.get(S[0]) == 2) {\\n\t\t\t\t\tans = \"Yes\";\\n\t\t\t\t}\\n\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\t}\\n}\\n", "target": "33", "substitutes": {"S": ["SI", "AS", "SS", "SN", "C", "N", "M", "SE", "U", "Si", "SC", "STR", "SH", "GS", "F", "SU", "Array", "WS", "SA", "P", "A", "s", "T", "string", "L", "R", "B", "V", "ES", "D", "H", "NS", "DS", "G", "SR", "Characters", "Sl", "X"], "map": ["press", "complete", "module", "comb", "MAP", "age", "apper", "size", "dict", "one", "hash", "table", "show", "move", "le", "ap", "data", "maps", "mm", "use", "block", "row", "app", "ms", "sum", "index", "m", "list", "pack", "cap", "mp", "per", "state", "code", "set", "open", "work", "me", "up", "ge", "parse", "scale", "place", "master", "type", "group", "address", "lock", "shape", "copy", "cache", "match", "default", "pad", "array"], "c": ["cl", "enc", "cat", "nc", "ic", "p", "C", "u", "id", "ch", "character", "v", "i", "l", "cu", "ct", "name", "r", "cs", "cp", "char", "f", "loc", "ci", "dc", "lc", "s", " character", "m", "x", "e", "string", "col", "uc", "ce", "code", "cf", "n", "b", "ac", " char", "k", "in", "cc", "cr", "cont", "sc", "ec", "esc", "coll"], "ans": ["ams", "ana", "acts", "sk", "aned", "AN", "ars", "anas", "vers", "ases", "ads", "ins", "caps", "aus", "ks", "ss", "lan", "acs", "ar", "atan", "eps", "olds", "aks", "cs", "man", "vs", "s", "os", "nas", "cas", "ds", "ants", "an", "cons", "ANS", "anks", "arts", "Ann", "leans", "ean", "ents", "ns", "ras", "ats", "yes", "anus", "as", "ons", "aning", "amps", "annels", "ays", "ant", "ann"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    final Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    private void run() {\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        int[] b = new int[n];\\n        int[] c = new int[n];\\n\\n        for (int i = 0; i < n; i++) {\\n            a[i] = sc.nextInt() - 1;\\n        }\\n\\n        for (int i = 0; i < n; i++) {\\n            b[i] = sc.nextInt();\\n        }\\n\\n        for (int i = 0; i < n - 1; i++) {\\n            c[i] = sc.nextInt();\\n        }\\n\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            ans += b[a[i]];\\n\\n            if (i > 0 && a[i] - a[i - 1] == 1) {\\n                ans += c[a[i - 1]];\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n\\n", "target": "223", "substitutes": {"sc": ["cl", "sche", "sci", "cam", "scope", "pc", "class", "com", "tc", "sec", "ss", " SC", "sub", "asc", "Sc", "SC", "screen", "cs", "bc", "sw", "cv", "lc", "loc", "s", "lib", " scr", "or", "config", "sp", "ec", "system", "uc", "soc", "g", "sr", "cli", "sem", "se", " Sc", "anc", "sb", "exec", "scan", "isc", "parse", "Scan", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "ctx", "spec", "out", "esc", "console", "cus", "sync"], "n": ["nn", "nc", "nt", "ni", "count", "p", "size", "dn", "u", "na", "num", "nan", "N", "ln", "v", "l", "name", "sn", "r", "z", "nl", "len", "f", "conn", "s", "ne", "m", "an", "x", "w", "e", "en", "o", "d", "ns", "g", "network", "nb", "j", "net", "k", "no", "in", "y", "zn", "t"], "a": ["all", "api", "p", "ia", "u", "na", "ba", "ar", "l", "data", "aa", "z", "A", "pa", "f", "au", "s", "ga", "at", "an", "x", "w", "sa", "ae", "e", "ea", "ai", "o", "alpha", "d", "af", "array", "ca", "ac", "qa", "aaa", "wa", "in", "y", "as", "area", "asa", "da", "ab", "ma", "la", "am", "va", "aj"], "b": ["fb", "ub", "p", "u", "abb", "rb", "ad", "ch", "binary", "v", "auto", "ba", "l", "db", "cb", "bis", "r", "bh", "be", "h", "bc", "lb", "gb", "bs", "f", "eb", "br", "s", "m", "x", "e", "o", "d", "g", "B", "nb", "sb", "bb", "beta", "bd", "y", "wb", "ab", "emb", "ob"], "c": ["cat", "nc", "p", "u", "C", "ch", "v", "l", "cu", "con", "r", "z", "h", "cs", "co", "f", "lc", "ci", "s", "dc", "m", "an", "x", "cy", "e", "cin", "uc", "ce", "cf", "o", "d", "g", "ca", "ac", "k", "rc", "cc", "y", "t"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "slice", "multi", "qi", "ei", "xi", "ji", "v", "anti", "si", "ix", "mini", "ik", "ri", "r", "part", "start", "io", "init", "info", "source", "abi", "f", "ci", "ui", "ini", "index", "eni", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "g", "cli", "ii", "li", "field", "j", "oi", "yi", "y", "ti", "fi"], "ans": ["nn", "ana", "ams", "sk", "ars", "anas", "aned", "na", "ads", "ani", "errors", "ins", "ln", "ks", "ss", "span", "aus", "lan", "aces", "actions", "ares", "offs", "reads", "ls", "eps", "ens", "olds", "cs", "len", "lines", "vs", "s", "os", "nas", "cas", "ds", "ags", "ants", "an", "x", "cons", "cus", "ANS", "anes", "ents", "ns", "ras", "ats", "anc", "aps", "outs", "as", "la", "ons", "amps", "can", "ann"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner (System.in);\\n\t\twhile(sc.hasNext()){\\n\t\t\tlong a = sc.nextLong();\\n\t\t\tlong a1 = a;\\n\t\t\tlong b = sc.nextLong();\\n\t\t\tlong b1 = b;\\n\t\t\tlong i;\\n\t\t\tif(a > b){\\n\t\t\t\tfor(;;){\\n\t\t\t\t\tif(a1 % b == 0){\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t\ta1 += a;\\n\t\t\t\t}\\n\t\t\t\tif(a % b == 0){\\n\t\t\t\t\tSystem.out.println(b + \" \" + a1 );\\n\t\t\t\t}\\n\t\t\t\telse{\\n\t\t\t\t\tfor(i = b / 2; i > 0; i--){\\n\t\t\t\t\t\tif(a % i == 0 && b % i == 0){\\n\t\t\t\t\t\t\tbreak;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tSystem.out.println(i + \" \" + a1 );\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\telse if(a < b){\\n\t\t\t\tfor(;;){\\n\t\t\t\t\tif(b1 % a == 0){\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t\tb1 += b;\\n\t\t\t\t}\\n\t\t\t\tif(b % a == 0){\\n\t\t\t\t\tSystem.out.println(a + \" \" + b1 );\\n\t\t\t\t}\\n\t\t\t\telse{\\n\t\t\t\t\tfor(i = a / 2; i > 0; i--){\\n\t\t\t\t\t\tif(a % i == 0 && b % i == 0){\\n\t\t\t\t\t\t\tbreak;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tSystem.out.println(i + \" \" + b1 );\\n\t\t\t\t}\t\\n\t\t\t}\\n\t\t\telse{\\n\t\t\t\tSystem.out.println(b + \" \" + b1 );\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n}", "target": "181", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "scope", "pc", "ck", "ch", "sec", "ss", "tc", " SC", "cur", "asc", "sh", "Sc", "SC", "ng", "ct", "bc", "cs", "sw", "cv", "cor", "cmp", "lc", "c", "sp", "st", "sq", "uc", "soc", "cle", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "cd", "rc", "cc", "cr", "cont", "sch", "coll", "esc", "ctx", "cus", "sync"], "a": ["api", "p", "ia", "u", "na", "ad", "v", "ba", "ar", "l", "ap", "ao", "aa", "z", "A", "oa", "pa", "f", "au", "s", "c", "ga", "t", "at", "an", "x", "w", "m", "sa", "ae", "ea", "e", "ada", "ai", "alpha", "o", "d", "n", "ca", "ac", "j", "aaa", "qa", "wa", "ama", "fa", "art", "as", "y", "asa", "area", "ab", "da", "la", "ma", "am", "va", "aj"], "a1": ["alphaOne", "as5", "area3", "ar1", "area2", " a5", "b001", "area71", "b2", "ar7", "area001", "ar91", "a91", "aa3", "area5", " a9", "area1", "areaOne", " a7", "an9", "a3", "a001", "a2", "fa2", "aa1", "an1", "alpha5", " a71", "alpha71", " a91", " aOne", "an7", "ar9", "aa2", "b3", "aOne", "cOne", "a9", "alpha1", "an91", "a5", "a71", "aa001", "as1", "c1", "c2", "fa1", "bOne", "faOne", "a7", "asOne"], "b": ["bi", "fb", "ub", "api", "p", "u", "pb", "rb", "ad", "binary", "v", "ba", "l", "ib", "db", "cb", "r", "bf", "aa", "be", "z", "h", "lb", "bc", "A", "bu", "bs", "f", "eb", "br", "s", "pa", "c", "ga", "m", "w", "x", "base", "an", "ae", "e", "o", "d", "n", "g", "B", "ca", "body", "nb", "j", "k", "sb", "bb", "xb", "bin", "y", "wb", "ab", "area", "bar", "ob", "t"], "b1": ["wbix", "i100", "wb151", "p10", "l10", "p1", "l1", "rb1", "ibOne", "l100", "bix", "aOnce", " b2", "ib2", "bbone", "baOnce", "b2", "B1", "rbOnce", "wbone", "rb2", " bone", "ib1", "aaix", "bOnce", "bb2", "ib4", "i10", "wb1", "cone", "a2", "aa1", "ba2", " bOne", "ba1", " bix", "b151", "a4", " b4", "Bone", "aone", "aa151", "aOne", "p100", "rbone", "baone", "bbOnce", " b151", "b4", "bone", "bOne", "i1", "bb1", "b100", "aaone", "c1", "b10"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "p", "iu", "ami", "it", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "l", "mini", "is", "ri", "io", "z", "info", "f", "ci", "c", "ini", "ui", "key", "index", "m", "phi", "x", "uri", "e", "di", "ip", "I", "ie", "ai", "q", "o", "gi", "d", "mi", "n", "g", "ii", "zi", "iv", "li", "j", "k", "oi", "yi", "in", "chi", "y", "my", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\n\\nfinal class Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner std = new Scanner(System.in);\\n\t\tint a = std.nextInt();\\n\t\tint b = std.nextInt();\\n\t\tSystem.out.println(a * b);\\n\t}\\n\\n}\\n", "target": "35", "substitutes": {"std": ["cl", "sd", "Standard", "gram", "nd", "ad", "ss", "line", "const", "db", "data", "ct", "debug", "pd", "wd", "ng", "cmd", "nl", "gd", "utils", "AST", "pat", "td", "dc", "ds", "x", "est", "str", "st", "writer", "d", "dd", "g", "ld", "se", "reader", "obj", "grad", "sb", "standard", "parse", "ast", "rd", "file", "cr", "vd", "sg", "parser", "ctl", "dev", "act", "console", "xx"], "a": ["count", "ia", "na", "za", "i", "ba", "aa", "A", "aux", "oa", "pa", "au", "c", "ga", "x", "base", "sa", "ea", "ae", "alpha", "d", "ca", "ac", "qa", "aaa", "ama", "fa", "la", "area", "ab", "da", "ma", "va", "aj"], "b": ["p", "abb", "v", "ba", "i", "l", "ib", "cb", "db", "aa", "z", "h", "lb", "bc", "bs", "f", "eb", "c", "x", "base", "e", "o", "d", "n", "B", "nb", "k", "bb", "sb", "bin", "y", "wb", "ab", "emb", "ob"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String argv[]) {\\n    int n;\\n    Scanner sc = new Scanner(System.in);\\n    n = Integer.parseInt(sc.next());\\n    System.out.println((n % 2 == 0 ? n/2:n/2 + 1) / (double)n);\\n  }\\n}", "target": "64", "substitutes": {"argv": ["argvs", "enV", "argV", "Argvs", "envs", "env", "Argve", " argvs", "argve", "ArgV", " argV", "Argv", " argve", "enve"], "n": ["nn", "none", "nc", "nt", "ni", "count", "p", "size", "dn", "adj", "na", "u", "num", "nu", "nan", "N", "ln", "v", "cn", "i", "l", "sn", "ng", "z", "un", "nl", "len", "f", "fn", "conn", "c", "inn", "ne", "m", "an", "x", "nin", "min", "o", "d", "ns", "g", "b", "nw", "pn", "nb", "j", "net", "k", "no", "not", "mn", "non", "number", "y", "gn", "en", "t"], "sc": ["cl", "enc", "nc", "sci", "nt", "__", "pc", "class", "sec", "ss", " SC", "sub", "Sc", "SC", "cb", "exp", "bc", "cs", "desc", "lc", "ci", "sl", "c", " scr", "sp", "acc", "ec", "uc", "soc", "se", " Sc", "scan", "osc", "rc", "cc", "cr", "spec", "out", "esc", "sync"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws NumberFormatException, IOException {\\n        // TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n        String[] input = br.readLine().split(\" \");\\n        int m = Integer.parseInt(input[0]);\\n        int n = Integer.parseInt(input[1]);\\n        int[][] matrix = new int[m][n];\\n        int[] num = new int[n];\\n\\n\\n        for(int i = 0;i < m;i++){\\n            String[] line = br.readLine().split(\" \");\\n            for(int j = 0;j < n;j++){\\n                matrix[i][j] = Integer.parseInt(line[j]);\\n            }\\n        }\\n        for(int i = 0;i < n;i++){\\n            num[i] = Integer.parseInt(br.readLine());            ;\\n        }\\n\\n        for(int i = 0;i < m;i++){\\n            int result = 0;\\n            for(int j = 0;j < n;j++){\\n            result += matrix[i][j] * num[j];\\n            }\\n            System.out.println(result);\\n        }\\n\\n    }\\n\\n}\\n", "target": "185", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n    \\n    public static void main(String[] args) {\\n\tScanner sc = new Scanner(System.in);\\n\tint N = sc.nextInt();\\n\tint A[] = new int[N];\\n\tfor(int i = 0;i < N;i++){\\n\t    A[i] = sc.nextInt();\\n\t}\\n\tint cnt = 0, tmp, minj;\\n\tfor(int i = 0;i <= N - 1;i++){\\n\t    minj = i;\\n\t    int flag = 0;\\n\t    for(int j = i;j <= N - 1;j++){\\n\t\tif(A[j] < A[minj]){\\n\t\t    minj = j;\\n\t\t}\t\t\\n\t    }\\n\t    tmp = A[i];\\n\t    A[i] = A[minj];\\n\t    A[minj] = tmp;\\n\t    if(i == minj){\\n\t\tflag = 1;\\n\t    }\\n\t    if(flag == 0){\\n\t\tcnt++;\\n\t\t}\t   \\n\t}\t\\n\tfor(int k = 0;k < N;k++){\\n\t    System.out.print(A[k]);\\n\t    if(k == N - 1) break;\\n\t    System.out.print(\" \");\\n\t}\\n\tSystem.out.println(\"\\n\" + cnt);\\n    }\\n}\\n\\n", "target": "199", "substitutes": {"sc": ["cl", "enc", "sci", "nc", "nt", "scope", "pc", "class", "ch", "sec", "ss", " SC", "cur", " rc", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "cv", "src", "lc", "c", " scr", "sp", "ec", "system", "sq", "uc", "sr", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "osc", " cur", "rc", "cc", "cr", "sch", " sp", "out", "esc", "sync"], "N": ["MN", "Len", "S", "IO", "Num", "No", "NA", "SN", "NL", "C", "Part", "J", "M", " n", "Size", "Y", "Node", "F", "Network", "NN", "Q", "P", "GN", "Na", "T", "I", "Ni", "II", "Sn", "NP", "Not", "L", "R", "n", "B", "NR", "Ne", "V", "K", "NB", "ND", "D", "NT", "H", "Z", "O", "NS", "Ns", "number", "NE", "KN", "NV", "NI", "W", "X"], "A": ["S", "New", "NA", "C", "AA", "M", "Average", "LA", "a", "As", "U", "Y", "Array", "Address", "MA", "F", "mA", "BA", "AP", "P", "Ma", "Answer", "Area", "Auth", "API", "And", "T", "I", "App", "At", "Attack", "alpha", "L", "Alpha", "B", "Ar", "V", "Args", "K", "D", "H", "O", "Action", "CA", "G", "The", "Adam", " a", "W", "E", "array", "X"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "ami", "it", "u", "id", "qi", "ji", "xi", "v", "jp", "si", "ix", "a", "l", "mini", "is", "ij", "ik", "ri", "part", "io", "init", "h", "z", "f", "ci", "vi", "ui", "ini", "key", "index", "eni", "phi", "x", "uri", "ip", "e", "di", "I", "ie", "ai", "jit", "gi", "mi", "n", "ii", "zi", "cli", "li", "oi", "in", "chi", "y", "ki", "ind", "fi"], "cnt": ["ccount", "cnc", "lcout", "lcnt", "count", "lccount", "Count", "Cret", " count", " cout", " cnc", "cret", " ccount", "lcnc", "cout", "lcount", "lcret", "Cnc", " cret", "Cout", "Ccount", "Cnt"], "tmp": ["offset", "api", "jj", "py", "p", "test", "prefix", "next", "ji", "v", "jp", "stuff", "mini", "kk", "data", "part", "pre", "start", "Temp", "z", "temp", "f", "cmp", "sp", "np", "mp", "I", "ie", "ai", "xxx", "alpha", "shift", "prev", "result", "b", "foo", "nb", "pos", "amp", "obj", "beta", "txt", "area", "fake", "pad"], "minj": ["skipjo", "ailji", "ailja", "priji", "miniJ", "minJ", "Minj", "intji", "keyj", "Minji", "keyji", "prik", "iduj", "smallJ", "priJ", "intja", "minz", " minie", "ainji", "mainJ", "minja", "idj", "ainja", "mainjo", "minuj", "MinJ", "smallk", "intie", "Minie", "smallja", "smalljo", "skipji", " minJ", "mainja", "minji", " minuj", "minie", "minl", "prijo", "keyJ", "idji", "intj", "skipk", "minij", "actj", " minja", "ailJ", "ainj", "mink", "priz", "ainJ", "minjo", "minil", "smallz", "actja", " minji", "smallj", " minjo", "idJ", "skipz", "Minl", "actJ", "smallji", "prija", "prij", "mainji", " minl", "mainj", "miniji", "skipj", "keyuj", "ailj", "actji", "skipJ", "Minja"], "flag": ["offset", "py", "count", "adj", "bug", "id", "v", "FLAG", "sort", "lag", "sign", "part", "mask", "start", "zip", "z", "info", "len", "band", "char", "f", "tag", "fd", "bad", "style", "arg", "bit", "key", "flags", "code", "q", "big", "d", "g", "b", "err", "nb", "field", "kid", "prop", "Flag", "force", "kind", "type", "group", "ind", "fi"], "j": ["dj", "jj", "jc", "ni", "p", "oj", "it", "u", "J", "qi", "bj", "ji", "v", "jp", "si", "l", "ij", "r", "z", "h", "aj", "f", "ui", "key", "x", "e", "ja", "uj", "ie", "jit", "o", "n", "g", "ii", "b", "li", "je", "obj", "js", "y", "jl", "ind", "t", "jo"], "k": ["ky", "kt", "sk", "p", "ka", "u", "id", "ck", "ko", "ch", "ke", "ks", "km", "v", "kh", "kick", "kk", "ik", "z", "h", "ok", "ek", "c", "key", "ak", "x", "ku", "kw", "ack", "kr", "q", "unk", "kn", "n", "g", "kl", "b", "kin", "kid", "K", "work", "kat", "y", "ki"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n \\n \\npublic class Main{\\nstatic int mod = (int)(Math.pow(10, 9) + 7);\\n   public static void main(String[] args) {\\n      MyScanner sc = new MyScanner();\\n      out = new PrintWriter(new BufferedOutputStream(System.out));\\n      int n = sc.nextInt() % 10;\\n      if (n == 2 || n == 4 || n == 5 || n == 7 || n== 9){\\n        out.println(\"hon\");\\n      }\\n      else if (n == 3){\\n        out.println(\"bon\");\\n      }\\n      else out.println(\"pon\");\\n      \\n      out.close();\\n   }\\n   \\n   static long pow(long a, long N) {\\n\t   if (N == 0) return 1;\\n\t   else if (N == 1) return a;\\n\t   else {\\n\t\t   long R = pow(a,N/2);\\n\t\t   if (N % 2 == 0) {\\n\t\t\t   return R*R;\\n\t\t   }\\n\t\t   else {\\n\t\t\t   return R*R*a;\\n\t\t   }\\n\t   }\\n   }\\n   \\n   static long powMod(long a, long N) {\\n\t   if (N == 0) return 1;\\n\t   else if (N == 1) return a % mod;\\n\t   else {\\n\t\t   long R = powMod(a,N/2) % mod;\\n\t\t   R *= R % mod;\\n\t\t   if (N % 2 == 0) {\\n\t\t\t   R *= a % mod;\\n\t\t   }\\n\t\t\t   return R % mod;\\n\t   }\\n   }\\nstatic void mergeSort(int[] A){ // low to hi sort, single array only\\n      int n = A.length;\\n      if (n < 2) return;\\n      int[] l = new int[n/2];\\n      int[] r = new int[n - n/2];\\n \\n      for (int i = 0; i < n/2; i++){\\n        l[i] = A[i];\\n      }\\n \\n      for (int j = n/2; j < n; j++){\\n        r[j-n/2] = A[j];\\n      }\\n \\n      mergeSort(l);\\n      mergeSort(r);\\n      merge(l, r, A);\\n    }\\n \\n    static void merge(int[] l, int[] r, int[] a){\\n      int i = 0, j = 0, k = 0;\\n      while (i < l.length && j < r.length && k < a.length){\\n        if (l[i] < r[j]){\\n          a[k] = l[i];\\n          i++;\\n        }\\n        else{\\n          a[k] = r[j];\\n          j++;\\n        }\\n        k++;\\n      }\\n      while (i < l.length){\\n        a[k] = l[i];\\n        i++;\\n        k++;\\n      }\\n \\n      while (j < r.length){\\n        a[k] = r[j];\\n        j++;\\n        k++;\\n      }\\n    }\\n\\n   \\n\\n   //-----------PrintWriter for faster output---------------------------------\\n   public static PrintWriter out;\\n      \\n   //-----------MyScanner class for faster input----------\\n   public static class MyScanner {\\n      BufferedReader br;\\n      StringTokenizer st;\\n \\n      public MyScanner() {\\n         br = new BufferedReader(new InputStreamReader(System.in));\\n      }\\n \\n      String next() {\\n          while (st == null || !st.hasMoreElements()) {\\n              try {\\n                  st = new StringTokenizer(br.readLine());\\n              } catch (IOException e) {\\n                  e.printStackTrace();\\n              }\\n          }\\n          return st.nextToken();\\n      }\\n \\n      int nextInt() {\\n          return Integer.parseInt(next());\\n      }\\n \\n      long nextLong() {\\n          return Long.parseLong(next());\\n      }\\n \\n      double nextDouble() {\\n          return Double.parseDouble(next());\\n      }\\n \\n      String nextLine(){\\n          String str = \"\";\\n\t  try {\\n\t     str = br.readLine();\\n\t  } catch (IOException e) {\\n\t     e.printStackTrace();\\n\t  }\\n\t  return str;\\n      }\\n\\n   }\\n   //--------------------------------------------------------\\n}\\n\\n\\n\\n\\n\\n", "target": "178", "substitutes": {"mod": ["div", "module", "im", "comb", "mag", "rom", "low", "change", "rm", "rod", "num", "modified", "mode", "od", "com", "M", "add", "sub", "rim", "rem", "diff", "cod", "comp", "exp", "z", " MOD", "row", "len", "reg", "cond", "length", "lex", "MOD", "order", "lib", "magic", "model", "fun", "m", " Mod", "depth", "cum", "Mod", "max", "min", "mods", "d", "comment", "loop", "trade", "grad", "dig", "norm", "form", "step", "scale", "rib", "req", "log", "lock", " mods", "dev", "post", "mult"], "sc": ["cl", "sci", "nc", "scope", "pc", "core", "gram", "ch", "ss", "ex", " SC", "si", "sub", "asc", "sh", "Sc", "SC", "screen", "ou", "io", "bc", "cs", "src", "s", "c", "cer", "sp", "ec", "sq", "uc", "g", "soc", "se", "ner", " Sc", "anc", "scan", "in", "osc", "rc", "sch", "squ", "esc", "ctx"], "out": ["this", "buffer", "ext", "screen", "ou", "r", "exp", "co", "s", "check", "at", "output", "w", "by", "Out", "o", "inner", "flush", "exec", "group", "copy", "error", "console", "builder", "call", "client", "p", "line", "name", "io", "temp", "input", "conn", "user", "image", "ui", "sum", "down", "list", "str", "plain", "code", "plus", "again", "write", "up", "no", "file", "IN", "serv", "pool", "point", "println", "system", "writer", "raw", "comment", "b", "err", "pass", "obj", "net", "in", "log", "word", "cache", "sync", "parent", "null", "ch", "ex", "path", "page", "outer", "c", "OUT", "string", "object", "ac", "outs", "lock"], "n": ["nn", "all", "none", "nc", "nt", "ni", "don", "p", "dn", "na", "nor", "u", "num", "nu", "nan", "span", "v", "cn", "i", "l", "sn", "ng", "un", "nr", "nl", "len", "ny", "f", "fn", "conn", "s", "nat", "c", "inn", "ne", "m", "an", "x", "w", "np", "o", "d", "ns", "kn", "b", "pn", "nb", "k", "nit", "no", "in", "not", "non", "number", "y", "en", "t", "ann"], "a": ["all", "ana", "p", "ia", "one", "na", "u", "ad", "ba", "i", "ar", "Array", "r", "mA", "aa", "z", "aj", "f", "au", "s", "image", "c", "ga", "at", "an", "x", "Na", "w", "ae", "sa", "e", "m", "ra", "alpha", "o", "d", "b", "ca", "ac", "aaa", "as", "y", "asa", "area", "ab", "da", "am", "va", "array"], "N": ["Order", "Len", "S", "Num", "No", "NA", "C", "Part", "J", "Version", "M", "Size", "Nat", "U", "Node", "Y", "Location", "None", "F", "Network", "Number", "Q", "P", "Wh", "Na", "T", "I", "Ni", "Sn", "L", "Max", "Sum", "B", "Ne", "V", "K", "Norm", "D", "H", "O", "Ns", "Z", "G", "Name", "W", "E", "X"], "R": ["RO", "S", "AR", "p", "RG", "C", "J", "RR", "M", "Right", "ER", "Return", "UR", "U", "Y", "r", "F", "RN", "Q", "P", "RA", "Rs", "GR", "BR", "x", "T", "I", "RH", "TR", "L", " r", "B", "NR", "Re", "V", "Ra", "K", "D", "RE", "H", "O", "G", "Res", "RM", "W", "E", "DR", "X"], "A": ["all", "S", "C", "U", "Array", "name", "P", "au", "an", "T", "I", "alpha", "L", "B", "Ar", "Args", "parse", "ast", "D", "H", "ASC", "G"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tint n,x,m=0;\\n\t\tint a[] = new int[256];\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\twhile(true)\\n\t\t{\\n\t\t\tint cnt=0;\\n\t\t\tn = scan.nextInt();\\n\t\t\tx = scan.nextInt();\\n\\n\t\t\tif( (n|x) == 0) break;\\n\\n\t\t\tfor(int i=1; i<=n; i++)\\n\t\t\t{\\n\t\t\t\tfor(int j=i+1; j<=n; j++)\\n\t\t\t\t{\\n\t\t\t\t\tfor(int k=j+1; k<=n; k++)\\n\t\t\t\t\t{\\n\t\t\t\t\t\tif(i+j+k == x)\\n\t\t\t\t\t\t{\\n\t\t\t\t\t\t\t//System.out.printf(\"%d %d %d\\n\", i, j, k);\\n\t\t\t\t\t\t\tcnt++;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\ta[m++] = cnt;\\n\t\t}\\n\\n\t\tscan.close();\\n\\n\t\tfor(int i=0; i<m; i++) System.out.println(a[i]);\\n\t}\\n}", "target": "116", "substitutes": {"n": ["nn", "rn", "nc", "nt", "ni", "p", "dn", "u", "na", "nu", "nan", "N", "ln", "v", "cn", "l", "sn", "r", "un", "z", "len", "f", "conn", "s", "c", "ne", "w", "an", "byn", "e", "o", "d", "ns", "b", "pn", "network", "net", "no", "in", "mn", "y", "en", "out"], "x": ["dx", "p", "xp", "u", "na", "id", "xi", "ex", "v", "ix", "l", "cross", "z", "h", "f", "cm", "c", "wx", "ax", "index", "w", "pe", "e", "xx", "xxx", "q", "o", "d", "b", "work", "xs", "in", "xy", "y", "rx", "t", "xa", "xc", "X"], "m": ["mc", "p", "u", "num", "M", "v", "l", "mini", "mm", "r", "man", "cm", "f", "mr", "ms", "c", "w", "mu", "e", "left", "o", "d", "mi", "g", "mx", "mod", "mid"], "a": ["all", "ana", "p", "na", "num", "span", "data", "Array", "mA", "aa", " ma", "A", "c", "index", "an", "ata", "list", "sa", "ea", " A", "b", "ac", " b", "area", "ma", "array"], "scan": ["all", "nn", "cat", "see", "watch", "walk", "slice", "na", "ser", "server", "serv", "span", "run", "search", "l", "fan", "sn", "sign", "con", "r", "sc", "syn", "win", "row", "sin", "er", "gen", "conn", "plan", "chan", "an", "or", " scanner", "system", "ry", "skip", "read", "b", "se", "ner", "reader", "in", "parse", "Scan", "san", "ans", "pan", "en", "out", "can", "ann", "sync"], "cnt": ["cnc", "ncnd", "cNT", " cnc", "ncnc", "acNT", "ncNT", " cNT", "acnc", "ncnt", "cnd", "acnt", " cnd", "acnd"], "i": ["bi", "ir", "pi", "ni", "iu", "p", "ami", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "l", "is", "ik", "ri", "io", "init", "z", "f", "ci", "s", "ui", "c", "ini", "eni", "e", "ip", "di", "I", "ie", "ai", "o", "mi", "ii", "b", "li", "yi", "y", "ki"], "j": ["jj", "jc", "p", "oj", "it", "u", "J", "qi", "ji", "v", "jp", "l", "out", "ij", "ik", "z", "h", "end", "f", "c", "key", "ak", "w", "e", "ja", "ijk", "uj", "ie", "q", "o", "ii", "b", "li", "je", "js", "kj", "job", "y", "jl", "t", "jo"], "k": ["ky", "jj", "sk", "mk", "p", "ka", "u", "id", "ko", "ck", "ke", "ks", "km", "gh", "v", "kh", "kick", "kk", "ik", "z", "h", "dk", "ok", "f", "ek", "c", "key", "ak", "w", "kw", "ijk", "kr", "q", "kn", "g", "b", "kid", "kj", "K", "uk", "y", "ki"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint N = scanner.nextInt();\\n\t\tList<Integer> A = new ArrayList<>();\\n\t\tList<Integer> B = new ArrayList<>();\\n\t\tList<Integer> C = new ArrayList<>();\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tA.add(scanner.nextInt());\\n\t\t}\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tB.add(scanner.nextInt());\\n\t\t}\\n\t\tfor (int i = 0; i < N - 1; i++) {\\n\t\t\tC.add(scanner.nextInt());\\n\t\t}\\n\t\tscanner.close();\\n\t\tint score = 0;\\n\t\tint tmp = 0;\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tint num = A.get(i);\\n\t\t\tint current_score = B.get(num - 1);\\n\t\t\tscore += current_score;\\n\t\t\tif (i != 0 && tmp + 1 == num) {\\n\t\t\t\tscore += C.get(tmp - 1);\\n\t\t\t}\\n\t\t\ttmp = num;\\n\t\t}\\n\t\tSystem.out.println(score);\\n\t}\\n}", "target": "223", "substitutes": {"scanner": [" scaner", "Scaninner", "hanner", "scanker", "scanlier", " scanler", "anner", "aninner", "caner", "scanister", "analyner", "Scanlier", "canter", "anter", "caninner", "Scannder", "nernder", "verter", " scanter", "aner", "scanter", " scanlier", "analyker", "Scanister", "Scanler", "anister", "scanener", "nerner", "canker", "analyinner", "Scanener", "canlier", "scaner", "Scanker", "nerer", " scanister", "Scanter", "Scaner", "verler", "hanker", "nerker", "verner", "hanener", " scanker", "analyener", "anker", " scannder", "scannder", "verer", "canner", "haninner", "Scanner", "scanler", "scaninner"], "N": ["MN", "Len", "S", "Num", "No", "NA", "NL", "Part", "J", "M", " n", "Size", "Bi", "Y", "Node", "None", "F", "Network", "NN", "P", "Na", "T", "I", "Ni", "Sn", "L", "R", "n", "NM", "network", "CNN", "V", "Ne", "K", "NB", "ND", "D", "NT", "H", "Z", "O", "NS", "Ns", "G", "W", "E", "X"], "A": ["AD", "S", "Acc", "AS", "AAA", "AR", "AM", "NA", "AA", "Average", "LA", "a", "As", "FA", "Array", "AMI", "BA", "AP", "P", "SA", "AST", "PA", "API", "AU", "I", "App", "ACC", "Ab", "HA", "Alpha", "Ar", "AF", "AC", "IA", "CA", "The", "Adam", "GA", "AB"], "B": ["EB", "BL", "Bs", "SB", "BF", "BI", "Beta", "Bi", "Both", "RB", "PB", "QB", "Block", "WB", "BA", "VB", "BB", "BS", "CB", "T", "But", "L", "R", "b", "BD", "BG", "NB", "Two", "BP", "OB", "D", "GB", "G", "Blue", "MB", "IB", "BER", "TB", "BE", "AB", "LB", "DB"], "C": ["Cu", "Can", "FC", "CU", "S", "EC", "CI", "CO", "Co", "Ca", "CC", "MC", "VC", "CCC", "CF", "U", "CR", "CE", "SC", "F", "WC", "CT", "CL", "P", "BC", "CW", "Cons", "c", "Ch", "KC", "T", "YC", "NC", "CM", "CP", "L", "R", "GC", "Cs", "CNN", "V", "K", "DC", "D", "CV", "CA", "G", "Custom", "JC", "CS", "W", "E"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "a", "is", "uni", "ri", "start", "io", "init", "info", "abi", "f", "ci", "ui", "c", "ini", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "cli", "ii", "b", "zi", "li", "nb", "j", "oi", "yi", "in", "chi", "y", "ind", "ti", "fi"], "score": ["vec", "ni", "count", "test", "size", "core", "message", "rate", "cost", "si", "risk", "loss", "distance", "duration", "diff", "zip", "info", "fit", "temp", "scoring", "length", "cmp", "winner", "f", "feature", "sum", "style", "order", "match", "check", "Score", "better", "code", "grade", "success", "rank", "runner", "worst", "result", "zi", "err", "race", "nice", "su", "confidence", "number", "speed", "word", "cache", "error", "sc", "fee", "crop", "orer"], "tmp": ["mom", "um", "offset", "py", "nt", "count", "p", "test", "size", "slice", "rb", "tc", "stuff", "kk", "cb", "uni", "part", "ctr", "diff", "start", "extra", "zip", "temp", "len", "nr", "cp", "cmp", "loc", "perm", "sp", "np", "img", "mp", "ptr", "nom", "n", "mi", "result", "nb", "dest", "current", "obj", "pos", "j", "sup", "bb", "beta", "txt", "number", "area", "proc", "front", "pad", "crop"], "num": ["nn", "um", "offset", "unit", "comb", "Num", "nt", "ni", "count", "p", "test", "mon", "id", "nu", "multi", "cur", "uni", "name", "con", "batch", "temp", "nr", "len", "lim", "f", "loc", "cmp", "sum", "index", "x", "mu", "np", "col", "ind", "node", "success", "nom", "n", "mi", "b", "nb", "current", "pos", "su", "net", "no", "bin", "tri", "number", "inc", "NUM", "proc", "en", "mem"], "current_score": ["Current_grade", "current_winner", "Current_index", "current_index", "current_message", "current__message", "current_core", "current__core", " current_winner", " current_message", "Current_score", "current__winner", "currentHotgrade", " current_core", "current_grade", "currentHotindex", "currentHotscore", "current__score"]}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner cin = new Scanner(System.in);\\n        int n = cin.nextInt();\\n        int q = cin.nextInt();\\n        String s = cin.next();\\n        int cnt[] = new int[n];\\n        for (int i = 0; i < n - 1; i++) {\\n            if (s.charAt(i) == 'A' && s.charAt(i + 1) == 'C') {\\n                cnt[i + 1]++;\\n            }\\n        }\\n        for (int i = 0; i < n - 1; i++) {\\n            cnt[i + 1] = cnt[i] + cnt[i + 1];\\n        }\\n        for (int i = 0; i < q; i++) {\\n            int l = cin.nextInt();\\n            int r = cin.nextInt();\\n            l--; r--;\\n            out.println(cnt[r] - cnt[l]);\\n        }\\n    }\\n}\\n", "target": "52", "substitutes": {"cin": ["mc", "cat", "ic", "colo", "vc", "isin", "iris", "lein", "__", "aco", "ck", "pod", "chu", "arin", "circ", "cu", "pie", "lin", "cry", "rup", "cia", "asin", "sin", "init", "cs", "cand", "pex", "coin", "lc", "tin", "ci", "cone", "c", "cas", "cer", "roc", "cook", "conn", "cos", "dc", "zy", "magic", "ini", "reci", "ce", "Lin", "cli", "kin", "abc", "zi", "zin", "cil", "doctor", "in", "chi", "vin", "auc", "rys", "rx", "cit", "proc", "uin", "cy", "cus"], "n": ["nc", "nt", "p", "u", "num", "nu", "N", "ln", "v", "a", "sn", "z", "h", "len", "f", "c", "ne", "m", "w", "x", "e", "o", "d", "g", "ns", "b", "nb", "j", "k", "no", "in", "y", "en", "t"], "q": ["count", "p", "u", "id", "num", "v", "qs", "qu", "Q", "z", "h", "length", "f", "c", "m", "w", "x", "e", "o", "d", "g", "b", "j", "k", "in", "y", "t", "query"], "s": ["S", "ts", "sf", "features", "p", "u", "ins", "ss", "v", "si", "strings", "bis", "qs", "a", "es", "sv", "is", "ls", "ws", "fs", "its", "src", "f", "sl", "os", "c", "ds", "words", "fts", "e", "sq", "ses", "string", "o", "abs", "hs", "gs", "b", "services", "su", "js", "sb", "xs", "stats", "in", "ans", "comments", "as", "spec", "t"], "cnt": ["ccount", "cct", "cNT", "ccrt", "ucwd", "count", "rNT", "Count", "rcct", "pct", " count", "dcrt", "pNT", "Cno", " cnn", "CNT", "Crt", "ucNT", "krt", "ccno", " cNT", "rcrt", " cct", "rgt", "pnt", "knn", " cwd", " crt", "Cnn", "crt", "Cct", "rcnt", "cnn", "cno", " cgt", "kNT", "dcNT", "pount", " ccount", "rnt", "cgt", "dccount", "ccNT", "Cwd", "ccnt", "knt", "ucnt", "ucrt", "cwd", "dcnt", "Cgt", "rct", " cno", "Ccount", "Cnt", "rcNT"], "i": ["bi", "hi", "ir", "api", "pi", "ori", "ni", "p", "iu", "ami", "it", "u", "id", "slice", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "a", "data", "mini", "ri", "io", "init", "z", "info", "f", "ci", "vi", "ui", "c", "ini", "eni", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "esi", "ie", "ai", "o", "gi", "d", "mi", "inner", "isi", "ii", "zi", "b", "cli", "li", "j", "oi", "yi", "in", "y", "ti", "fi"], "l": ["p", "u", "ln", "v", "a", "el", "z", "lb", "nl", "len", "lp", "f", "lc", "sl", "c", "w", "x", "e", "ul", "o", "L", "d", "kl", "b", "li", "dl", "j", "k", "ol", "rel", "rl", "t", "ll"], "r": ["ir", "p", "u", "rs", "v", "pr", "ar", "a", "lr", "fr", "ur", "yr", "rh", "z", "h", "nr", "f", "er", "br", "c", "m", "w", "x", "e", "o", "d", "R", "b", "sr", "err", "rr", "j", "k", "rel", "rc", "cr", "rl", "range", "ru"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n\\n        Scanner scan = new Scanner(System.in);\\n        System.out.println(Integer.parseInt(scan.nextLine()) * 2 * 3.141592);\\n        \\n    }\\n}", "target": "167", "substitutes": {"scan": ["nn", "cat", "print", "watch", "connect", "class", "server", "ln", "span", "run", "search", "l", "fan", "sign", "sc", "row", "win", "app", "query", "report", "chan", "feed", "an", "system", "skip", "n", "util", "result", "sys", "se", "ner", "stat", "reader", "exec", "in", "parse", "Scan", "san", "parser", "read", "out", "can", "ann", "sync"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner input = new Scanner(System.in);\\n        int A;\\n        A = input.nextInt();\\n        int B = input.nextInt();\\n        if (A==1 && B==2)\\n        System.out.print(3);\\n        else  if (A==2 && B==3) {\\n            System.out.println(1);\\n        } else  if (A==3 && B==2) {\\n            System.out.println(1);\\n        } else  if (A==2 && B==1) {\\n            System.out.println(3);\\n        } else  if (A==1 && B==3) {\\n            System.out.println(2);\\n        } else  if (A==3 && B==1)\\n            System.out.println(2);\\n    }\\n}\\n", "target": "236", "substitutes": {"input": ["this", "print", "upload", "buffer", "null", "server", "view", "i", "url", "l", "kernel", "request", "io", "iter", "stream", "info", "method", "source", "event", "f", "session", "instance", "image", "c", "feed", " Input", "output", "list", "config", "Input", "text", "socket", "context", "result", "util", "reader", "up", "form", "in", "parse", "connection", "iterator", "file", "inc", "flow", "parser", "reading", "out", "array", "audio"], "A": ["S", "Ha", "Num", "AR", "NA", "Count", "If", "C", "Ca", "Part", "An", "AA", "N", "M", "LA", "a", "As", "U", "Y", "Java", "Array", "Az", "MA", "F", "BA", "AP", "This", "Australia", "P", "Ma", "EA", "PA", "Area", "Auth", "Am", "API", "Offset", "OA", "AU", "T", "I", "App", "L", "Ab", "HA", "Alpha", "b", "Ar", "V", "K", "AC", "D", "H", "O", "IA", "CA", "G", "The", "GA", "W", "E", "X"], "B": ["S", "Bs", "C", "SB", "J", "BF", "M", "BI", "U", "Y", "X", "Block", "F", "WB", "UB", "BA", "Q", "P", "BB", "BC", "Builder", "CB", "T", "I", "Sub", "L", "Ab", "R", "b", "BE", "V", "BD", "AB", "NB", "Two", "K", "OB", "D", "H", "O", "Other", "G", "Blue", "W", "E", "DB"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u6574\u6570\u306e\u5165\u529b\\n            int N = Integer.parseInt(in.next());\\n            String S = in.next();\\n            int ans = 0;\\n\\n            for (int i = 0; i < N - 2; i++) {\\n                if ('A' == S.charAt(i) && 'B' == S.charAt(i + 1) && 'C' == S.charAt(i + 2)) {\\n                    ans++;\\n                }\\n            }\\n\\n            // \u51fa\u529b\\n            out.println(ans);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "110", "substitutes": {"inputStream": ["InputChannel", "inputSteam", "outputSteam", " inputstream", "outputChannel", "outputCh", " inputSteam", "InputSteam", "inputCh", " inputCh", "InputCh", "Inputstream", " inputChannel", "InputStream", "outputstream", "inputChannel", "inputstream"], "outputStream": ["inputSteam", "outputSteam", "outputChannel", "OutputStreamer", "Outputstream", "responseStream", "OutputChannel", "responseSteam", "OutputStream", "inputStreamer", " outputSteam", "responseStreamer", "outputStreamer", "responsestream", "OutputSteam", "outputstream", " outputstream", "inputChannel", "inputstream", " outputChannel"], "in": ["this", "isin", "on", "id", "login", "ins", "din", "run", "i", "inside", "path", "data", "is", "request", "con", "lin", "r", "name", "io", "source", "init", "sin", "input", "win", "info", "In", "gen", "conn", "s", "image", "inn", "ini", "arg", "index", "nin", "config", "cin", "min", "gin", "inf", "inner", "plus", "n", "kin", "err", "again", "reader", "pin", "connection", "vin", "bin", "inc", "IN"], "out": ["this", "parent", "call", "client", "p", "loader", "null", "to", "server", "ex", "v", "i", "line", "page", "data", "name", "point", "io", "init", "temp", "input", "conn", "outside", "s", "outer", "user", "session", "arg", "password", "at", "output", "OUT", "w", "x", "process", "image", "writer", "string", "problem", "Out", "o", "inner", "n", "b", "err", "again", "pass", "write", "net", "exec", "connection", "no", "analysis", "log", "file", "bin", "outs", "external", "inc", "off", "cache", "error", "IN", "console", "window", "sync"], "solver": [" solution", "ssol", "solving", "ssolve", "unsolver", "ssolving", "Solver", "ssolver", "Sol", "ssolution", "solve", "solution", "Solution", " sol", "Solving", "unsolving", "Solve", "unsolve", "unsolution", " solve", "sol"], "testNumber": ["trialNumber", "TestNumber", "testNumbers", "testnumber", "TestNum", " testnumber", "Testnumber", "trialNumbers", "trialnumber", " testNum", " testNumbers", "testNum", "trialNum", "TestNumbers"]}}
{"code": "import java.io.*;\\nimport java.util.Scanner;\\npublic class Main{\\n    public static void main(String args[]){\\n      Scanner sc=new Scanner(System.in);\\n        int N=sc.nextInt();\\n        int []array=new int[N];\\n        for(int i=0;i<N;i++)array[i]=sc.nextInt();\\n        int num=0;\\n        for(int i=0;i<N;i++){\\n            int minj=i;\\n            for(int j=i;j<N;j++){\\n                if(array[minj]>array[j]){\\n                    minj=j;\\n                }\\n            }\\n            if(array[minj]!=array[i]){\\n            int tmp=array[minj];\\n            array[minj]=array[i];\\n            array[i]=tmp;\\n            num++;\\n           }\\n        }\\n        for(int i=0;i<N;i++){\\n            System.out.print(array[i]);\\n            if(i<N-1)System.out.print(\" \");\\n        }\\n        System.out.println();\\n        System.out.println(num);\\n    }\\n}\\n", "target": "199", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "na", "ser", "com", "ch", "sec", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "lc", "ci", "c", " scr", "sp", "system", "sq", "uc", "sr", "sem", "se", "ner", " Sc", "sb", "scan", "osc", "rc", "cc", "cr", "sch", "out", "esc", "cus"], "N": ["MN", "Len", "S", "Num", "No", "NA", "NL", "C", "Part", "J", "M", "INT", " n", "Size", "Y", "Node", "F", "Network", "NN", "Q", "P", "Na", "T", "I", "Ni", "NP", "L", "R", "n", "NM", "Ne", "V", "CNN", "K", "D", "NT", "H", "Z", "Ns", "O", "NS", "NV", "NUM", "W", "E", "X"], "array": ["this", "integer", "archive", "a", "answer", "row", "instance", "feature", "format", "alpha", "result", "analysis", "group", "address", "area", "section", "error", "union", "function", "allow", "version", "data", "center", "value", "block", "input", "collection", "book", "air", "image", "order", "index", "list", "base", "except", "element", "ignore", "field", "angle", "number", "database", "record", "view", "arr", "average", "repeat", "arrow", "pair", "system", "form", "word", "shape", "module", "now", "one", "table", "reference", "move", "align", "the", "auto", "Array", "sample", "throw", "action", "string", "object", "ray", "current", "our", "range", "option"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "si", "ix", "a", "is", "ij", "ik", "ri", "start", "io", "init", "z", "info", "f", "ci", "ui", "ini", "index", "eni", "x", "uri", "ip", "e", "di", "I", "ie", "ai", "q", "o", "gi", "mi", "n", "ii", "zi", "li", "oi", "sup", "yi", "in", "chi", "y", "ind", "ti", "fi"], "num": ["nn", "um", "seq", "unit", "spin", "Num", "nt", "count", "id", "na", "nu", "multi", "span", "uni", "valid", "iter", "info", "nr", "len", "temp", "post", "f", "fn", "loc", "sum", "index", "np", "done", "coord", "col", "max", "nom", "n", "result", "b", "dim", "nb", "pos", "su", "norm", "no", "mn", "bin", "number", "inc", "NUM", "en", "out"], "minj": ["minii", "Minje", " minji", "donje", "missji", "minji", "Minjo", "smallj", "maxi", "mitj", "minjp", "mitn", " minjo", "MINi", "maxb", "missj", "minl", " mini", "maxjo", "mini", "maxJ", "missjo", "MINJ", "Minb", "minn", "smallji", "maxji", "smalli", "missje", "maxjp", "blockj", "minij", "Minn", " minn", "Miny", "minJ", "mity", "Minj", "donj", " minjp", "blockl", " minl", "minb", " miny", "MINji", "MINj", "maxl", "minijp", "mitji", "miniji", "donjo", "Mini", "Minji", "miny", "donji", "minjo", "maxj", "blockjo", "minje", " minb", "smallJ", "blocki"], "j": ["bi", "hi", "jj", "ni", "p", "oj", "it", "u", "id", "J", "qi", "bj", "ji", "xi", "next", "v", "jp", "si", "l", "a", "ij", "start", "z", "h", "aj", "f", "ui", "key", "index", "x", "e", "ja", "uj", "ie", "o", "d", "n", "g", "ii", "b", "ju", "li", "je", "js", "k", "y", "jl", "jen", "ind", "jo"], "tmp": ["nn", "nt", "p", "now", "test", "next", "ji", "ff", "stuff", "tv", "const", "kk", "vt", "z", "temp", "app", " temporary", "cmp", "np", "mp", " backup", "st", "xxx", "ie", "alpha", "ii", "b", "foo", "nb", "yy", "dest", "obj", "sup", "su", "amp", "txt", "qq", "tri", "pp", "area", "front", "pad"]}}
{"code": "import java.io.*;\\npublic class Main{\\n    public static void main(String[] args) throws IOException{\\n        Reader r = new Reader();        \\n        String S = r.s();\\n        char[] T = S.toCharArray();\\n        T[3] = '8';\\n        S = String.valueOf(T);\\n        println(S);\\n    }\\n    static void print(Object o){\\n        System.out.print(o.toString());\\n    }\\n    static void println(Object o){\\n        System.out.println(o.toString());\\n    }\\n    static int Int(String s){\\n        return Integer.parseInt(s);\\n    }\\n    static long Long(String s){\\n        return Long.parseLong(s);\\n    }\\n    static class Reader extends BufferedReader{\\n        Reader(){\\n            super(new InputStreamReader(System.in));\\n        }\\n        String s() throws IOException{\\n            return readLine();\\n        }\\n        String[] ss() throws IOException{\\n            return s().split(\" \");\\n        }\\n        int i() throws IOException{\\n            return Int(s());\\n        }\\n        int[] ii() throws IOException{\\n            String[] ss = ss();\\n            int size = ss.length;\\n            int[] ii = new int[size];\\n            for(int j = 0; j < size; j++) ii[j] = Int(ss[j]);\\n            return ii;\\n        }\\n        long l() throws IOException{\\n            return Long(s());\\n        }\\n        long[] ll() throws IOException{\\n            String[] ss = ss();\\n            int size = ss.length;\\n            long[] ll = new long[size];\\n            for(int j = 0; j < size; j++) ll[j] = Long(ss[j]);            \\n            return ll;\\n        }\\n    }\\n}", "target": "18", "substitutes": {"r": ["rar", "p", "u", "rb", "ro", "rs", "v", "ar", "l", "fr", "ur", "io", "h", "resource", "er", "f", "Rs", "c", "mr", "m", "w", "or", "e", "rg", "q", "R", "d", "n", "g", "sr", "b", "reader", "cr", "rt", "t", "Reader"], "S": ["SS", "SL", "ST", "SN", "Sample", "TS", "C", "Socket", "N", "M", "TEXT", "OS", "SON", "RS", "SE", "U", "SU", "SH", "Array", "Si", "SC", "JSON", "F", "Q", "P", "SA", "Su", "SAM", "A", "oS", "STR", "SO", "I", "string", "L", "R", "B", "St", "V", "Text", "Sl", "D", "O", "NS", "DS", "SR", "SER", "X"], "T": ["ST", "DT", "TS", "C", "N", "PO", "M", "TT", "TA", "U", "Y", "F", "E", "CT", "Target", "Q", "CL", "P", "A", "Token", "PT", "TC", "Type", "Total", "TN", "TX", "TR", "L", "R", "TF", "WT", "B", "V", "XT", "D", "NT", "H", "O", "Z", "LT", "TB", "W", "t", "TE", "X"], "o": ["Obj", " os", "go", "p", "null", "u", "obo", "po", "ro", "to", "v", "auto", "i", "l", "out", "ou", "oid", " object", "ao", "io", "oa", "f", "OO", "os", "or", "bo", "output", "oo", "lo", "e", "op", "office", "n", "object", "obj", "no", "O", "so", "y", "vo", "ob", "t"], "s": ["slice", "ins", "rs", "l", "a", "its", "fs", "lines", "os", "sl", "ds", "w", "g", "p", "si", "i", "strings", "line", "data", "es", "bytes", "z", "input", "ps", "Bytes", "f", "sum", "sa", "str", "d", "n", "sets", "js", "ed", "t", "sie", "second", "less", "Fs", "serv", "v", "le", "sv", "ws", "sin", "er", "ings", "words", "ing", "ses", "min", "gs", "b", "sym", "se", "sb", "y", "out", "ts", "sf", "u", "service", "\u00df", "is", "ls", "source", "c", "m", "parts", "e", "ssl", "string", "abs", "Str", "ns"], "ss": ["vers", "ins", "rs", "sites", "fs", "ys", "ips", "cs", "bs", "lines", "ess", "sl", "os", "ms", "ds", "tests", "sts", "tt", "pps", "hers", "mes", "xx", "SS", "si", "ass", "strings", "ff", "es", "ct", "cross", "z", "ps", "codes", "str", "st", "ress", "pos", "js", "struct", "sc", "uss", "www", "oss", "less", "na", "serv", "sh", "sv", "ws", "pg", "sp", "ses", "gs", "sr", "pass", "xs", "stats", "css", "rss", "ts", "sk", "sf", "\u00df", "tes", "is", "ng", "ls", "iss", "ens", "vs", "style", "us", "hess", "sq", "ssl", "mys", "ns", "services", "names", "styles", "su", "fts"], "size": ["eng", "empty", "Size", "ny", "width", "ku", "any", "left", "col", "max", "set", "ize", "iz", "type", "group", "address", "sized", "age", "si", "i", "ix", "data", "name", "ice", "z", "length", "SIZE", "ci", "sum", "model", "handle", "large", "like", "global", "code", "grade", "n", "nice", "time", "scale", "enc", "unit", "second", "count", "sy", "sec", "keep", "sh", "use", "sea", "weight", "min", "se", "ge", "form", "speed", "shape", "capacity", "close", "member", "en", "sync", "low", "core", "page", "start", "loc", "last", "c", "style", "zero", "small", "six"], "ii": ["bi", "sci", "pi", "ni", "fl", "integer", "id", "qi", "ins", "ji", "iii", "v", "si", "i", "ix", "l", "mini", "iss", "ice", "zip", "lu", "z", "iter", "oa", "vi", "ci", "ui", "ini", "eni", "di", "II", "ie", "ai", "min", "inf", "ti", "zi", "iv", "li", "yi", "iz", "chi", "iq", "ind", "fi"], "j": ["bl", "dj", "jj", "jc", "p", "oj", "it", "adj", "J", "next", "ch", "ji", "bj", "v", "jp", "pr", "i", "ix", "l", "a", "el", "ij", "old", "name", "z", "cell", "f", "br", "ah", "key", "jan", "w", "x", "jo", "e", "jet", "ja", "str", "en", "uj", "left", "ie", "code", "d", "n", "g", "b", "dy", "li", "je", "js", "obj", "k", "in", "kj", "job", "y", "off", "jl", "jen", "ind", "out", "aj"], "ll": ["bl", "cl", "ly", "uss", "ml", "fl", "ln", "vel", "vl", "l", "yll", "el", "oll", "llo", "cel", "ls", "ys", "lu", "z", "nl", "lp", "sl", "\u0142", "tl", "yn", "rell", "vell", "pl", "LL", "lv", "n", "ld", "kl", "yl", "ull", "dl", "sol", "ol", "hl", "ell", "iel", "rl", "gl", "lf", "ill", "jl", "gn", "la", "lla", "wl", "il", "coll"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        FastScanner sc = new FastScanner(System.in);\\n        char[] s = sc.next().toCharArray();\\n        s[3] = '8';\\n        System.out.println(new String(s));\\n    }\\n}\\n\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    } \\n}\\n", "target": "18", "substitutes": {"sc": ["cl", "sci", "nc", "sf", "scope", "pc", "ch", "sec", " SC", "si", "asc", "sh", "Sc", "SC", "scl", "bc", "cs", "sw", "src", "lc", "ci", "c", "config", "sp", "acc", "system", "uc", "ca", "se", "ner", " Sc", "anc", "exec", "scan", "osc", "rc", "cc", "cr", "parser", "spec", "ec", "esc", "sync"], "s": ["S", "ts", "p", "u", "ins", "ss", "rs", "v", "si", "strings", "l", "data", "es", "sv", "is", "ls", "r", "ws", "fs", "bytes", "input", "ps", "f", "rows", "c", "ds", "w", "e", "str", "string", "ses", "o", "abs", "d", "ns", "b", "sets", "su", "js", "sb", "buf", "ans", "t", "array", "sync"], "reader": ["rar", "over", "client", "buffer", "processor", "container", "server", "url", "l", "lr", "data", "ri", "r", "oder", "entry", "io", "iter", "stream", "row", "input", "source", "ler", "resource", "er", "pointer", "feed", "e", "writer", "per", "system", "read", "ry", "inner", "context", "rer", "rr", "handler", "ner", "editor", "scan", "layer", "rc", "manager", "worker", "file", "keeper", "parser", "driver", "reading", "loader", "Reader"], "tokenizer": [" tokenizers", "authorization", "localizer", "tokenener", " tokenizing", " tokenener", " tokenize", "Tokenize", "recogniser", "tokeniner", "Tokener", "Tokenizers", "okenizing", "tokenize", "serializers", "okener", "initialize", "initializing", "okenizer", "tokenler", "recognizer", " tokeniner", " tokeniser", " tokenization", "serialiner", "authoriser", "okenize", "initialer", " tokenler", "tokenizable", "initialiser", "localize", "tokenization", "Tokenler", "okenner", "okenized", " tokenner", "okenler", "serializable", "tokenized", "tokeniser", "localized", "initializer", "localizable", "tokener", "okeniner", " tokenizable", "authorizer", "okenization", "recogner", " tokener", "Tokenner", "tokenizers", "okenizable", "serializer", " tokenized", "initialization", "tokenner", "okeniser", "recognizing", "serialener", "okenizers", "tokenizing", "authorize", "serialize", "Tokenizer", "okenener", "Tokenizable"], "in": ["this", "p", "buffer", "it", "id", "login", "ins", "server", "din", "ex", "path", "line", "l", "data", "is", "lin", "r", "io", "source", "info", "stream", "input", "win", "resource", "In", "f", "user", "c", "ini", "inn", "image", "e", "str", "socket", "inf", "inner", "d", "b", "err", "pass", "log", "file", "bin", "as", "inc", "IN", "out"], "n": ["all", "nn", "none", "nc", "nt", "count", "p", "size", "nor", "na", "u", "num", "N", "v", "l", "sn", "name", "ng", "r", "init", "z", "len", "f", "nat", "c", "inn", "ne", "m", "an", "x", "w", "e", "left", "o", "d", "ns", "g", "b", "network", "j", "net", "k", "norm", "no", "not", "number", "y", "en", "t", " N"], "a": ["all", "aw", "anta", "count", "p", "ia", "val", "na", "ad", "span", "za", "auto", "ba", "ar", "data", "aa", "z", "h", "A", "ha", "aux", "tta", "f", "au", "c", "ga", "at", "ata", "an", "action", "m", "sa", "ae", "ea", "e", "active", "code", "alpha", "o", "g", "array", "ca", "b", "ac", "aaa", "k", "ama", "as", "la", "area", "ab", "da", "ma", "am", "va", "aj"], "i": ["hi", "bi", "pi", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "l", "mini", "name", "ri", "r", "io", "z", "h", "info", "f", "ci", "ui", "c", "ini", "eni", "m", "x", "mu", "uri", "e", "di", "ip", "I", "ie", "ai", "q", "o", "gi", "d", "mi", "g", "b", "ii", "li", "j", "oi", "yi", "k", "y", "my", "t", "ti", "fi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  \\n  public static void main(String[] args) {\\n    \\n    Scanner scan = new Scanner(System.in);\\n    int X = scan.nextInt();\\n    int Y = scan.nextInt();\\n        \\n    if ((Y-2*X) >= 0 && (Y-2*X)%2 == 0 && (4*X-Y) >= 0) {\\n      System.out.println(\"Yes\");\\n      return;\\n    }\\n    System.out.println(\"No\");\\n  }\\n}\\n", "target": "62", "substitutes": {"scan": ["all", "nn", "cat", "see", "watch", "connect", "walk", "bug", "ser", "gram", "serv", "ln", "span", "run", "search", "fan", "r", "car", "sc", "row", "query", "gen", "inter", "feed", "chan", "an", "pack", "system", "read", "skip", "n", "ignore", "se", "ner", "pin", "in", "parse", "Scan", "log", "clean", "san", "pan", "look", "match", "en", "out", "can", "ann", "sync"], "X": ["EX", "IP", "TH", "S", "EL", "ZX", "ID", "N", "FF", "M", "U", "Location", "F", "Q", "CL", "P", "A", "Position", "Width", "UX", "XX", "ML", "x", "Offset", "PI", "T", "I", "TX", "L", "DX", "XY", "PH", "B", "IX", "IV", "V", "K", "YY", "D", "H", "Z", "O", "PE", "W", "E", "XL"], "Y": ["IP", "TY", "Year", "C", "AY", "ID", "J", "N", "Height", "M", "Py", "HY", "MY", "U", "F", "Cy", "Q", "A", "P", "Time", "NY", "Type", "x", "PI", "T", "I", "Col", "L", "XY", "B", "V", "K", "Length", "YY", "D", "H", "Z", "O", "y", "G", "Python", "W", "E"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        try (Scanner scanner = new Scanner(System.in)) {\\n            int a, b;\\n            while ((a = scanner.nextInt()) != 0 && (b = scanner.nextInt()) != 0) {\\n                for (int i = 0; i < a; i++) {\\n                    for (int j = 0; j < b; j++) {\\n                        if ((i % 2 == j % 2)) {\\n                            System.out.print(\"#\");\\n                        } else {\\n                            System.out.print('.');\\n                        }\\n                    }\\n                    System.out.println();\\n                }\\n                System.out.println();\\n            }\\n        }\\n    }\\n}", "target": "131", "substitutes": {"a": ["api", "count", "p", "ia", "u", "ad", "ba", "aa", "A", "pa", "f", "au", "s", "c", "ak", "an", "x", "sa", "ae", "e", "ea", "ai", "alpha", "af", "n", "ca", "aaa", "sta", "ama", "fa", "y", "as", "la", "area", "ab", "da", "am", "va", "aj"], "b": ["fb", "bi", "bl", "p", "mb", "u", "abb", "v", "ba", "l", "db", "ib", "bis", "cb", "bf", "be", "lb", "bc", "bs", "f", "eb", "br", "c", "base", "e", "o", "n", "B", "body", "nb", "sb", "bb", "beta", "bot", "bd", "job", "y", "wb", "ab", "bar", "emb", "ob", "boot"], "i": ["bi", "hi", "pi", "p", "iu", "u", "id", "qi", "ji", "v", "jp", "si", "ix", "l", "z", "info", "f", "ci", "ui", "c", "phi", "x", "e", "ip", "I", "ai", "o", "mi", "ii", "li", "oi", "in", "y", "ki"], "j": ["bi", "py", "jj", "jc", "p", "oj", "it", "u", "J", "qi", "bj", "ji", "ch", "v", "jp", "l", "ib", "ij", "part", "r", "z", "end", "aj", "length", "f", "c", "key", "x", "e", "ja", "uj", "q", "o", "d", "n", "ii", "li", "js", "k", "obj", "job", "y", "jl", "jo"]}}
{"code": "import java.util.Scanner;\\n\\n/**\\n * Tap Dance\\n */\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n        try (Scanner sc = new Scanner(System.in)) {\\n            String S = sc.next();\\n\\n            for (int i = 1; i <= S.length(); i++) {\\n                char c = S.charAt(i - 1);\\n\\n                if (i % 2 == 1) {\\n                    if (c == 'R' || c == 'U' || c == 'D') {\\n                    } else {\\n                        System.out.println(\"No\");\\n                        System.exit(0);\\n                    }\\n                } else {\\n                    if (c == 'L' || c == 'U' || c == 'D') {\\n                    } else {\\n                        System.out.println(\"No\");\\n                        System.exit(0);\\n                    }\\n                }\\n            }\\n\\n            System.out.println(\"Yes\");\\n        }\\n    }\\n\\n}\\n", "target": "205", "substitutes": {"S": ["SI", "SS", "SL", "ST", "SN", "IS", "VS", "Socket", "C", "Sample", "N", "ss", "TEXT", "RS", "RAW", "SE", "U", "SU", "SH", "Si", "F", "Service", "WS", "SA", "P", "Su", "A", "FS", "BS", "s", "SM", " s", "SO", "T", "I", "ITS", "L", "R", "CSS", "D", "NS", "SR", "CS", "Source", "DES", "X"], "i": ["hi", "bi", "api", "pi", "ni", "count", "p", "iu", "it", "u", "id", "slice", "multi", "qi", "xi", "v", "si", "ix", "l", "part", "r", "start", "io", "z", "h", "abi", "info", "f", "ci", "s", "ini", "ui", "index", "m", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ai", "o", "gi", "d", "mi", "n", "b", "ii", "zi", "li", "j", "k", "oi", "in", "chi", "y", "t", "ti"], "c": ["cl", "enc", "mc", "nc", "arc", "ic", "vc", "p", "C", "u", "ch", "tc", "v", "cur", "l", "a", "cu", "ct", "r", "h", "cs", "bc", "char", "f", "loc", "ci", "dc", "lc", "cmp", "m", "w", "x", "str", "e", "ec", "col", "string", "uc", "code", "o", "d", "n", "g", "b", "cli", "ac", "k", "in", "rc", "cc", "cr", "cont", "inc", "dec", "sc", "t", "esc", "unc", "xc", "coll"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] p = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            p[i] = sc.nextInt();\\n        }\\n        int key = 0;\\n        int value = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (p[i] == i + 1) {\\n                continue;\\n            }\\n            if (key == 0) {\\n                key = i + 1;\\n                value = p[i];\\n                continue;\\n            }\\n            if (key != p[i] || value != i + 1) {\\n                System.out.println(\"NO\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"YES\");\\n    }\\n\\n}\\n\\n", "target": "82", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "ch", "sec", "ss", "tc", " SC", "cur", "asc", "sh", "Sc", "SC", "cs", "bc", "sw", "src", "cv", "lc", "ci", "cer", "c", " scr", "sp", "system", "sq", "uc", "sr", "ca", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "n": ["nn", "nc", "nt", "count", "size", "dn", "u", "num", "N", "ln", "v", "l", "sn", "r", "z", "len", "f", "conn", "s", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "b", "network", "nb", "j", "net", "k", "in", "no", "number", "y", "en", "t"], "p": ["wp", "py", "api", "pi", "patch", "u", "po", "python", "v", "jp", "a", "ap", "l", "pre", "point", "part", "progress", "P", "lp", "ps", "cp", "f", "pa", "params", "s", "c", "pid", "m", "at", "x", "pe", "np", "ip", "sp", "mp", "per", "e", "o", "op", "prev", "vp", "b", "tp", "j", "k", "up", "pp", "y", "t", "bp"], "i": ["bi", "hi", "parent", "api", "pi", "ori", "ni", "iu", "it", "u", "id", "slice", "multi", "qi", "xi", "v", "anti", "si", "ix", "mini", "is", "ri", "diff", "io", "init", "z", "info", "ski", "f", "ci", "ui", "ini", "c", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "iv", "li", "j", "oi", "yi", "in", "y", "ki", "ti"], "key": ["ace", "parent", "count", "change", "val", "size", "id", "num", "date", "v", "mac", "keys", "name", "use", "point", "sign", "start", "info", "row", "length", "char", "ci", "pair", "order", "index", "weight", "x", "Key", "base", "ip", "note", "e", "label", "col", "ie", "code", "max", "q", "inner", "nice", "ignore", "year", "kid", "j", "k", "no", "in", "connection", "seed", "type", "number", "y", "lock", "fix"], "value": ["total", "parent", "unit", "function", "VALUE", "count", "change", "val", "size", "message", "null", "id", "volume", "num", "reference", "v", "version", "data", "name", "part", "diff", "entry", "valid", "start", "info", "what", "end", "letter", "image", "index", "m", "x", "base", "label", "element", "result", "b", "va", "current", "values", "write", "child", "position", "type", "number", "Value", "range", "section", "default", "variable"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter pw = new PrintWriter(System.out);\\n\\n        int n = Integer.parseInt(sc.next());\\n        int m = Integer.parseInt(sc.next());\\n        int nSum = 0;\\n        int mSum = 0;\\n        for (int i = 0; i < n; i++)\\n            nSum += i;\\n        for (int i = 0; i < m; i++)\\n            mSum += i;\\n        pw.println(nSum + mSum);\\n        \\n        pw.flush();\\n    }\\n}", "target": "49", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "sf", "scope", "pc", "ch", "tc", "ss", " SC", "cur", "asc", "Sc", "SC", "cs", "cv", "bc", "sw", "src", "lc", "ci", "loc", "c", "cer", "sp", "uc", "soc", "ca", "cle", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "sch", "squ", "spec", "ec", "esc", "cus"], "pw": ["ppwr", "Pws", "ppW", "PW", "pow", " pws", "ppws", "spws", "ppw", "spW", "Pow", "spwr", "ppwh", "pws", " pW", "Pwr", " pow", "Pw", "Pwh", "spw", "ppow", "pwh", "pwr", " pwr", "spwh", "pW"], "n": ["nn", "nc", "nt", "p", "u", "num", "nan", "N", "v", "cn", "l", "sn", "r", "h", "z", "f", "fn", "s", "c", "ne", "an", "x", "e", "o", "d", "ns", "b", "nb", "j", "net", "k", "no", "in", "mn", "number", "y", "en"], "m": ["um", "mc", "pi", "p", "u", "M", "v", "l", "mini", "mm", "r", "mass", "h", "z", "f", "man", "ms", "c", "an", "x", "mu", "memory", "mp", "md", "o", "d", "mi", "j", "k", "hm", "sm", "in", "mx", "mn", "y", "ma", "am"], "nSum": ["pAverage", "pWeight", "mScore", "nAverage", "nTotal", "bStyle", " nStyle", "bsum", "NScore", "NAverage", "pStyle", " nTotal", "bSum", "nWeight", "NSum", "nsum", "NTotal", " nScore", "pSum", "nStyle", "psum", "mAverage", " nWeight", "bAverage", " nAverage", "nScore", "mTotal", " nsum", "bWeight"], "mSum": ["pWeight", "Msum", "nIndex", " mTotal", "iFirst", " mWeight", "mWeight", "nWeight", "pTotal", " mFirst", "isum", "nsum", "MSum", "pSum", "pFirst", "mIndex", "mGam", "psum", "iSum", " msum", "dmsum", "msum", "MGam", "dmSum", "mFirst", "dmGam", "mTotal", "iTotal", " mIndex", " mGam", "pIndex"], "i": ["bi", "hi", "pi", "p", "iu", "it", "u", "id", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "mini", "ri", "io", "init", "z", "info", "f", "ci", "ui", "c", "ini", "index", "phi", "x", "mu", "uri", "eni", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "zi", "li", "j", "oi", "yi", "chi", "ti", "fi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.PriorityQueue;\\nimport java.util.Scanner;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n\t\tlong n = in.nextLong();\\n\t\tSystem.out.println(solve(n));\\n\t\tin.close();\\n\t}\\n \\n\tprivate static long solve(long n) {\\n\t\tlong r = (long) (Math.pow(n, 0.5) + 1);\\n\t\tfor (; r > 1; r--)\\n\t\t\tif (n % r == 0)\\n\t\t\t\treturn n / r + r - 2;\\n\t\treturn n - 1;\\n\t}\\n}", "target": "157", "substitutes": {"in": ["isin", "login", "ins", "serv", "din", "ln", "ex", "inside", "i", "fin", "l", "data", "is", "into", "lin", "con", "init", "sin", "source", "win", "input", "asin", "resource", "In", "er", "conn", "inn", "ini", "nin", "cin", "socket", "ssl", "read", "inner", "d", "rin", "b", "err", "kin", "again", "reader", "pin", "connection", "scan", "log", "bin", "as", "inc", "IN", "out"], "n": ["nn", "rn", "nc", "on", "nt", "p", "dn", "nor", "na", "u", "num", "nu", "nan", "N", "ln", "v", "cn", "i", "l", "sn", "ng", "z", "h", "nr", "nl", "un", "f", "fn", "s", "c", "ne", "m", "w", "x", "an", "nin", "e", "o", "d", "ns", "g", "b", "network", "nb", "pn", "j", "net", "k", "no", "Ns", "number", "y", "gn", "en", "t", " N"], "r": ["rn", "ir", "p", "u", "hr", "rb", "ro", "rs", "pr", "arr", "v", "i", "ar", "l", "a", "lr", "fr", "ur", "rh", "yr", "right", "adr", "h", "row", "nr", "er", "dr", "br", "mr", "c", "m", "or", "x", "rw", "e", "kr", "rev", "rg", "o", "R", "d", "sr", "b", "err", "rr", "j", "k", "rd", "rc", "cr", "rl", "rt", "range", "ru", "re"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\\n            args = reader.readLine().split(\" \");\\n            int N = Integer.parseInt(args[0]);\\n            int Y = Integer.parseInt(args[1]);\\n\\n            for (int i = 0; i <= (Y / 10000); i++) {\\n                for (int j = 0; j <= ((Y - 10000 * i) / 5000); j++) {\\n                    int y = 10000 * i + 5000 * j + 1000 * (N - i - j);\\n                    if (y == Y) {\\n                        System.out.println(i + \" \" + j + \" \" + (N - i - j));\\n                        System.exit(0);\\n                    }\\n                }\\n            }\\n\\n            System.out.println(\"-1 -1 -1\");\\n        }\\n    }\\n\\n}\\n", "target": "133", "substitutes": {"N": ["S", "Num", "No", "NL", "C", "J", "M", " n", "Size", "U", "F", "NN", "Q", "P", "PI", "T", "I", "L", "R", "n", "B", "V", "K", "D", "NT", "H", "O", "NS", "Z", "Ns", "KN", "NG", "SK", "W", "E", "X"], "Y": ["IP", "S", "IO", "TY", "Num", "No", "Count", "Year", "C", "FFFF", "ID", "J", "M", "Py", "Size", "MY", "U", "F", "Q", "z", "P", "A", "NY", "XX", "x", "PI", "T", "I", "Ni", "L", "R", "XY", "n", "B", "year", "V", "yy", "My", "K", "Length", "YY", "D", "H", "Z", "O", "G", "W", "E", "X"], "i": ["bi", "hi", "api", "ori", "pi", "ni", "iu", "p", "ami", "it", "u", "id", "qi", "ei", "ji", "xi", "v", "si", "ix", "a", "l", "ri", "start", "io", "z", "f", "ci", "vi", "ui", "ini", "c", "eni", "phi", "x", "m", "uri", "ip", "di", "e", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "ii", "zi", "b", "li", "oi", "yi", "in", "ind", "fi"], "j": ["dj", "jj", "ori", "jc", "ni", "p", "oj", "it", "u", "one", "J", "qi", "ji", "xi", "v", "jp", "si", "ix", "l", "ij", "io", "z", "h", "aj", "f", "ci", "vi", "c", "x", "e", "jet", "ja", "I", "uj", "ie", "q", "o", "gi", "d", "jit", "n", "g", "b", "ii", "dy", "li", "js", "k", "je", "yi", "job", "jl", "t", "jo"], "y": ["py", "p", "sy", "oy", "vy", "ya", "a", "yr", "z", "ny", "f", "s", "ay", "c", "key", "m", "x", "e", "ie", "ry", "n", "b", "ii", "dy", "year", "yy", "ye", "yi", "type", "ey", "cy"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport static java.lang.System.out;\\n\\npublic class Main{\\n    static MyReader in = new MyReader();\\n\\n    public static void main(String[] args){\\n        final int N = in.i();\\n        long D = in.l();\\n        D *= D;\\n        int ans = 0;\\n        for (int i = 0; i < N; i++) {\\n            long x = in.l();\\n            long y = in.l();\\n            long d = x * x + y * y;\\n            if (d <= D) {\\n                ans++;\\n            }\\n        }\\n        out.println(ans);\\n    }\\n\\n    static class MyReader extends BufferedReader {\\n        char[] cbuf = new char[1024];\\n        int head = 0;\\n        int tail = 0;\\n\\n        MyReader(){\\n            super(new InputStreamReader(System.in));\\n        }\\n\\n        char next() {\\n            if (head == tail) {\\n                try {\\n                    tail = super.read(cbuf, 0, cbuf.length);\\n                } catch (IOException e) {}\\n                head = 0;\\n            }\\n            return cbuf[head++];\\n        }\\n\\n        void back() {\\n            head--;\\n        }\\n\\n        boolean minus() {\\n            boolean minus;\\n            while (true) {\\n                char c = next();\\n                if (c != ' ' && c != '\\n' && c != '\\r') {\\n                    if (!(minus = c == '-')) back();\\n                    return minus;\\n                }\\n            }\\n        }\\n\\n        int i() {\\n            boolean minus = minus();\\n            int n = 0;\\n            while (true) {\\n                int k = next() - '0';\\n                if (k < 0 || 9 < k) break;\\n                n = 10 * n + k;\\n            }\\n            return minus ? -n : n;\\n        }\\n\\n        int[] ii(final int N) {\\n            int[] a = new int[N];\\n            for (int j = 0; j < a.length; j++) a[j] = i();\\n            return a;\\n        }\\n\\n        long l() {\\n            boolean minus = minus();\\n            long n = 0;\\n            while (true) {\\n                int k = next() - '0';\\n                if (k < 0 || 9 < k) break;\\n                n = 10 * n + k;\\n            }\\n            return minus ? -n : n;\\n        }\\n    }\\n}\\n", "target": "42", "substitutes": {"in": ["this", "ic", "isin", "client", "inet", "buffer", "id", "login", "ins", "din", "binary", "ex", "inside", "line", "l", "data", "con", "lin", "r", "part", "init", "io", "source", "win", "input", "sin", "src", "stream", "resource", "In", "f", "gen", "s", "image", "ini", "inn", "conn", "m", "nin", "e", "socket", "string", "min", "read", "inf", "inner", "plus", "b", "err", "kin", "ac", "again", "pass", "reader", "exec", "connection", "from", "bin", "log", "as", "inc", "IN", "out", "thin"], "N": ["Len", "S", "Num", "NA", "NL", "C", "J", "M", "Size", "Y", "F", "NN", "Q", "P", "A", " Ne", "Ni", "I", "T", "NC", "L", "R", "B", "Ne", "V", "K", "NB", "Length", "NT", "H", "O", "Ns", "NS", "Z", "G", "number", "NE", "W", "E", "X"], "D": ["S", "DM", "DT", "C", "DE", "M", "U", "Y", "X", "F", "PD", "Q", "P", "A", "MD", "DI", "T", "I", "DF", "DL", "JD", "L", "R", "DX", "B", "Ds", "dy", "V", "DD", "K", "DC", "Z", "DS", "O", "G", "DO", "W", "DA", "E", "Do"], "ans": ["nn", "ana", "sk", "AN", "ars", "aned", "na", "errors", "ins", "An", "ks", "span", "ss", "lan", "anon", "es", "ls", "eps", "lines", "s", "os", "cas", "ds", "plan", "ants", "an", " means", "ops", "cons", "ANS", "dd", "ents", "ns", "ras", "ats", "pass", "anc", "scan", "ids", "outs", "as", "annot", "runs", "ons", "amps", "ays", "can", "ann"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "is", "r", "io", "init", "z", "h", "info", "f", "ci", "vi", "ini", "ui", "index", "m", "e", "di", "ip", "I", "ai", "o", "L", "mi", "g", "ii", "b", "iv", "li", "chi", "ki", "t", "ti"], "x": ["on", "xd", "dx", "p", "u", "id", "xi", "ex", "v", "ix", "l", "data", "z", "h", "f", "width", "ax", "m", "w", "e", "xx", "xxx", "q", "o", "b", "dy", "tx", "xy", "rx", "ux", "px", "t", "X"], "y": ["p", "yd", "u", "sy", "oy", "v", "vy", "ya", "l", "Y", "yt", "z", "h", "ny", "f", "s", "m", "w", "ym", "ty", "e", "ry", "o", "g", "b", "dy", "yy", "ye", "yi", "xy", "ey", "cy", "t"], "d": ["xd", "sd", "dx", "p", "dn", "u", "nd", "v", "l", "dat", "z", "h", "df", "f", "fd", "dc", "s", "ds", "m", "w", "e", "di", "o", "g", "b", "dy", "dl", "dt", "vd", "da", "t"], "cbuf": ["cbbuff", "bbull", "rbuc", "buc", "bcull", "CBbuf", "gbuc", "cbush", "bcue", "gbuf", "cfuf", "rbuff", "cduf", "bbuf", "rbull", "CBush", "CBuf", "bcbuf", "cfuff", "cdbuf", "cbbuf", "cbuc", "bcuf", "gbbuf", "bbbuf", "cbue", "CBbuff", "cbuff", "buf", "cdush", "gbuff", "bbuff", "rbuf", "rbbuf", "cbull", "bue", "cfbuf", "rbue", "bcuc", "rbbuff", "cdbuff", "bcuff", "cfuc", "rbush"], "head": ["offset", "count", "size", "back", "heads", "id", "ck", "view", "keep", "run", "before", "then", "right", "start", "header", "block", "h", "row", "end", "first", "length", "tag", "key", "ax", "index", "weight", "depth", "cap", "left", "ind", "max", "Head", "rest", "shift", "limit", "body", "HEAD", "push", "pos", "clean", "off", "foot", "pull", "front", "pad", "anch"], "tail": ["offset", "tails", "prefix", "size", "next", "ext", "l", "mini", "start", "iter", "h", "len", "end", "length", "lim", "tag", "sum", "index", "col", "left", "max", "rev", "rest", "shift", "b", "limit", "ail", "body", "dy", "nil", "cycle", "fat", "da", "foot", "pull", "ll"], "minus": ["this", "empty", "go", "size", "prime", "ins", "equal", "diff", "exp", "lines", "pop", "left", "reverse", "inv", "mod", "negative", "digit", "missing", "cedes", "nos", "dot", "gone", "none", "bi", "leading", "normal", "next", "neg", " negative", "version", "mini", "offs", "remove", "timeout", "z", "pse", "sum", "down", "ne", "pointer", "index", "carry", "shift", "plus", "js", "pos", "no", "beta", "number", "off", "later", "pull", "div", "second", "don", "una", "times", "less", "na", "ji", "optional", "span", "extra", "sign", "sin", "de", "nin", "done", "min", "only", "so", "nothing", "letters", "member", "out", "parent", "one", "signed", "sub", "is", "start", "zip", "vert", "last", "us", "Neg", "text", "two", "ogo", "skip", "delete", "zero", "small", "nil", "without", "non", "six"], "c": ["cl", "enc", "nc", "arc", "count", "p", "C", "u", "ch", "character", "v", "l", "cu", "ct", "r", "sc", "h", "z", "co", "cp", "char", "f", "lc", "ci", "dc", "s", "pointer", "m", "e", "ctrl", "col", "uc", "ce", "code", "o", "cf", "comment", "g", "b", "ca", "content", "ac", "cycle", "cc", "cr", "dec", "cy", "ec", "esc", "xc", "coll"], "n": ["nn", "on", "p", "dn", "u", "na", "num", "nu", "nan", "ln", "span", "v", "cn", "l", "out", "name", "sn", "ng", "r", "sign", "z", "h", "un", "f", "br", "conn", "inn", "ne", "m", "w", "nin", "e", "left", "max", "min", "o", "g", "ns", "b", "pn", "nw", "ner", "network", "net", "no", "not", "mn", "en", "t"], "k": ["ky", "sk", "mk", "p", "ka", "it", "u", "id", "ko", "ck", "ch", "ke", "ks", "v", "kick", "ik", "r", "z", "h", "dk", "ok", "f", "ek", "key", "ak", "m", "w", "ku", "e", "kw", "ijk", "kr", "max", "q", "o", "g", "kin", "ner", "kid", "K", "uk", "ki", "th"], "a": ["all", "ana", "p", "ia", "u", "na", "ad", "ba", "ar", "l", "data", "Array", "mA", "aa", "z", "A", "oa", "pa", "au", "s", "an", "ata", "sa", "ae", "ea", "active", "ta", "ai", "alpha", "abs", "act", "array", "ca", "b", "ac", "aaa", "ama", "as", "la", "area", "ab", "da", "am", "va", "aj"], "j": ["dj", "jj", "jc", "p", "oj", "adj", "u", "it", "J", "num", "ji", "v", "jp", "pr", "l", "ij", "z", "h", "f", "ion", "key", "ne", "m", "e", "jo", "ja", "uj", "ie", "q", "o", "g", "b", "ii", "li", "js", "obj", "je", "off", "jl", "ind", "aj"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n       Scanner sc = new Scanner(System.in);\\n       double r = sc.nextDouble();\\n       double x,y,z;\\n       x=Math.PI;\\n       y=2*r*x;\\n       z=r*r*x;\\n       System.out.printf(\"%f \",z);\\n       System.out.printf(\"%f\\n\",y);\\n\t}\\n\\n}", "target": "239", "substitutes": {}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint A = Integer.parseInt(sc.next());\\n\t\tint B = Integer.parseInt(sc.next());\\n//\t\tString s = sc.next();\\n\\n\t\tList<Integer> list = new ArrayList();\\n\\n\t\tlist.add(A+B);\\n\t\tlist.add(A-B);\\n\t\tlist.add(A*B);\\n\\n\t\tCollections.sort(list);\\n\t\tCollections.reverse(list);\\n\\n\t\tSystem.out.println(list.get(0));\\n\\n\\n\t}\\n\\n}\\n\\n", "target": "188", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "class", "com", "ch", "tc", "ss", "sec", " SC", "asc", "Sc", "SC", "sv", "cs", "bc", "sw", "lc", "ci", "c", "cer", "sp", "acc", "system", "sq", "uc", "soc", "ca", "se", "ner", "ocr", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "sch", "parser", "spec", "ec", "esc", "cus", "sync"], "A": ["AD", "S", "AR", "AM", "NA", "C", "AW", "N", "AA", "M", "LA", "a", "Y", "Array", "F", "AP", "P", "API", "I", "AL", "Alpha", "AF", "AC", "D", "CA", "AB"], "B": ["BL", "Bs", "SB", "BF", "J", "BI", "M", "Y", "USB", "WB", "UB", "BA", "BB", "P", "BC", "BS", "CB", "b", "V", "BD", "NB", "BP", "OB", "BM", "BER", "BE", "AB", "DB"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scanner = new Scanner(System.in);\\n\\n\t\tArrayList<Integer> list = new ArrayList<Integer>();\\n\\n\t\tboolean  flg = true;\\n\\n\t\twhile (flg) {\\n\t        list.add(Integer.valueOf(scanner.nextInt()));\\n\t        for(int i=0; i<list.size(); i++){\\n\t        \tif(list.get(i) == 0){\\n\t        \t\tlist.remove(i);\\n\t        \t\tflg = false;\\n\t        \t\tbreak;\\n\t        \t}\\n\t        }\\n\t\t}\\n\\n\t\t//Case 1: 3\\n\t\tfor(int i=0; i<list.size(); i++){\\n\t\t\tSystem.out.println(\"Case \" + (i+1) + \": \" + list.get(i));\\n\t\t}\\n\\n\t}\\n}", "target": "97", "substitutes": {"scanner": [" scanener", "scanker", "heler", "helner", "caner", " scanper", "helper", "analyner", "canter", "scanter", "analyker", "helter", "analyper", "scanener", "canper", "Scanener", "Scanper", "scaner", "Scanker", "Scanter", "Scaner", " scanker", "analyener", "scanper", "canner", "Scanner"], "list": ["all", "this", "cl", "parent", "see", "chain", "test", "null", "table", "queue", "server", "view", "stack", "listed", "keep", "pool", "l", "part", "iter", "source", "collection", "lc", "lex", "index", "base", "e", "full", "left", "code", "L", "set", "sync", "cli", "loop", "li", "current", "LIST", "sequence", "tree", "group", "la", "lock", "we", "cache", "pull", "batch", "ll", "array", "coll"], "flg": ["flga", "Flg", "Flga", "lfm", "Flig", "lfg", "flig", " flm", "FLG", " flu", "flgs", "lfga", "lfgs", "fu", "flG", " flga", "Flu", "fg", "flu", "FLig", " flgs", " flig", "fga", " flG", "Flm", "flm", "fG", "FLga", "FLu", "FLg", "Flgs"], "i": ["bi", "pi", "ori", "p", "iu", "slice", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "ri", "start", "io", "z", "abi", "length", "f", "ci", "ui", "ini", "key", "index", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ai", "o", "gi", "d", "n", "ii", "b", "zi", "li", "j", "oi", "k", "in", "chi", "off", "ti", "fi"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner s=new Scanner(System.in);\\n        String str=s.next();\\n        long sum=0;\\n        for(int i=0;i<str.length();i++){\\n            int num=str.charAt(i)-'0';\\n            sum+=num;\\n        }\\n            \\n        if(sum%9==0){\\n            System.out.print(\"Yes\");\\n        }\\n        else{\\n            System.out.print(\"No\");\\n        }\\n\\n    }\\n}", "target": "93", "substitutes": {"s": [" ls", "S", "ts", "p", "obs", "ins", "ss", "si", "l", "bis", "qs", "is", "es", "ls", "r", "ws", "fs", "ps", "bs", "f", "er", "south", "sl", "os", "c", "ms", "m", "parts", "ops", "e", "ssl", "ses", "abs", "n", "g", "gs", "b", "services", "ns", "se", "js", "sb", "xs", "in", "as"], "str": ["div", "enc", "prefix", "next", "hr", "tr", "pr", "arr", "strings", "line", "STR", "data", "fr", "name", "part", "r", "iter", "input", "char", "dr", "f", "br", "sl", "c", "sp", "st", "text", "string", "kr", "stri", "oct", "Str", "n", "prev", "sr", "result", "err", "obj", "in", "txt", "dec", "doc", "spec", "out", "coll"], "sum": ["um", "total", "who", "count", "size", "u", "gram", "cost", "si", "average", "vol", "ass", "cur", "sam", "sign", "fill", "use", "info", "sim", "len", "cal", "char", "index", "weight", "sa", "acc", "text", "max", "alpha", "miss", "skip", "Sum", "n", "result", "ac", "fat", "su", "pos", "seed", "scale", "bin", "mean", "doc", "match", "out", "fee"], "i": ["hi", "bi", "pi", "ni", "p", "it", "u", "id", "slice", "multi", "qi", "xi", "si", "ix", "ri", "start", "io", "h", "info", "abi", "f", "ci", "vis", "ui", "c", "key", "ini", "index", "eni", "phi", "x", "mu", "uri", "ip", "di", "I", "ai", "o", "gi", "d", "n", "ii", "zi", "li", "j", "pos", "k", "oi", "in", "chi", "ti"], "num": ["mom", "um", "enc", "offset", "cat", "unit", "Num", "ni", "count", "mon", "u", "id", "nu", "sec", "uni", "init", "iter", "len", "cal", "f", "gen", "c", "index", "us", "mu", "umi", "coord", "text", "col", "oct", "nom", "n", "b", "pos", "buf", "net", "bin", "digit", "number", "inc", "off", "dec", "NUM"]}}
{"code": "import java.util.Scanner;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = Integer.parseInt(sc.nextLine());\\n\t\tint tarou_point = 0;\\n\t\tint hanako_point = 0;\\n\t\t\\n\t\tfor (int i = 0; i < n; i++){\\n\t\t    String []words = sc.nextLine().split(\" \");\\n\t\t    char tarou[] = words[0].toCharArray();\\n\t\t    char hanako[] = words[1].toCharArray();\\n\t\t    int flag = 2;\\n\t\t    \\n\t\t    int length = hanako.length;\\n\t\t    \\n\t\t    if (tarou.length < hanako.length){\\n\t\t        length = tarou.length;\\n\t\t    }\\n\t\t    \\n\t\t    for (int l = 0; l < length; l++){\\n\t\t        if (tarou[l] < hanako[l]){\\n\t\t            flag = 0;\\n\t\t            break;\\n\t\t        }else if(tarou[l] > hanako[l]){\\n\t\t            flag = 1;\\n\t\t            break;\\n\t\t        }\\n\t\t    }\\n\t\t    \\n\t\t    if (flag == 0){\\n\t\t        hanako_point += 3;\\n\t\t    }else if(flag == 1){\\n\t\t        tarou_point += 3;\\n\t\t    }else{\\n\t\t        if (tarou.length > hanako.length){\\n\t\t            tarou_point += 3;\\n\t\t        }else if (tarou.length < hanako.length){\\n\t\t            hanako_point += 3;\\n\t\t        } else{\\n\t\t            hanako_point += 1;\\n\t\t            tarou_point  += 1;\\n\t\t        }\\n\t\t        \\n\t\t    }\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(tarou_point + \" \" + hanako_point);\\n\t}\\n}\\n", "target": "206", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\n    import java.io.IOException;\\n    import java.io.InputStreamReader;\\n\\n    public class Main {\\n\\n        public static void main(String[] args) throws IOException {\\n\\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n            int K = Integer.parseInt(br.readLine());\\n            String [] l = br.readLine().split(\" \");\\n            int A = Integer.parseInt(l[0]);\\n            int B = Integer.parseInt(l[1]);\\n\\n            if(A%K == 0 || B%K == 0){\\n                System.out.println(\"OK\");\\n            }\\n            else {\\n                int x = A/K + 1;\\n                if((x*K) > B){\\n                    System.out.println(\"NG\");\\n                }\\n                else {\\n                    System.out.println(\"OK\");\\n                }\\n            }\\n        }\\n    }", "target": "28", "substitutes": {"br": ["bl", "ber", "wr", "http", "hr", "rb", "browser", "tr", "arr", "jar", "db", "cb", "fr", "r", "bf", "yr", "bh", "io", "bridge", "bc", "ler", "bs", "dr", "er", "mr", "orb", "BR", "her", "bro", "HR", "str", "sp", "Br", "abs", "sr", "b", "err", "ner", "org", "reader", "obj", "buf", "bb", "bd", "cr", "ref", "bar", "keeper"], "K": ["S", "Ku", "C", "Ak", "J", "IK", "ID", "N", "MK", "M", "CC", "CH", "CF", "U", "Y", "KB", "Work", "F", "Q", "KO", "P", "Point", "HK", "OK", "Sk", "Key", "T", "I", "AK", "CP", "PK", "L", "Max", "Kick", "V", "k", "Ka", " k", "KR", "D", "H", "Z", "O", "KI", "UK", "G", "KS", "Flow", "SK", "W", "E", "Ke", "X"], "l": ["bl", "fl", "p", "u", "ln", "split", "v", "i", "le", "line", "el", "lin", "ls", "los", "lu", "z", "nl", "lp", "f", "lc", "lines", "sl", "s", "c", "t", "lo", "list", "e", "pl", "left", "lv", "L", "o", "n", "kl", "b", "li", "dl", "lt", "la", "rl", "lf", "wl", "ll"], "A": ["AD", "Ad", "S", "AR", "AM", "C", "AW", "An", "AA", "LA", "a", "U", "Y", "Az", "BA", "AP", "P", "EA", "SA", "PA", "Am", "API", "Offset", "T", "I", "L", "HA", "Alpha", "AF", "AC", "AB", "Access", "D", "H", "IA", "O", "CA", "E", "X"], "B": ["EB", "BL", "Bs", "C", "SB", "J", "N", "M", "U", "Y", "QB", "F", "WB", "UB", "Q", "P", "BB", "BC", "OP", "T", "I", "L", "R", "b", "V", "DB", "AB", "NB", "OB", "D", "GB", "H", "O", "Z", "G", "MB", "IB", "BER", "W", "E", "LB", "X"], "x": ["nz", "dx", "p", "xp", "u", "num", "xi", "ex", "v", "i", "xes", "ix", "X", "z", "h", "f", "lex", "c", "XX", "ax", "index", "m", "w", "ww", "xxx", "d", "n", "j", "tx", "k", "xe", "xs", "y", "rx", "ux", "px", "fx", "xa", "xc", "xx"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int c = sc.nextInt();\\n        int d = a-b;\\n        \\n        if (d > c) {\\n            System.out.println(\"0\");\\n        } else {\\n            System.out.println(c-d);\\n        }\\n    }\\n}\\n", "target": "45", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n \\npublic class Main {\\n    static boolean[][] used;\\n    static int[] ans;\\n    public static void main(String[] args) throws Exception {\\n        long mod = (long)Math.pow(10,9)+7;\\n        FastScanner sc = new FastScanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n        int n = sc.nextInt();\\n        int[] d = sc.nextIntArray(n);\\n        \\n        long ans = 0;\\n        for(int i = 0; i < n; i++){\\n            for(int j = i+1; j < n; j++){\\n                ans += d[i] * d[j];\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    } \\n}", "target": "126", "substitutes": {"used": ["failed", "pu", "checked", "sent", "available", "use", "loaded", "written", "locked", "end", "started", "supported", "Used", "user", "uses", "us", "added", "users", "using", "usable", "context", "disabled", "ended", "initialized", "usage", "needed", "shared", "required"], "ans": ["nn", "ana", "sk", "AN", "ars", "anned", "aned", "anas", "na", "ani", "ads", "ins", "nan", "ln", "ss", "span", "aus", "lan", " spans", "anon", "ks", " fa", "atan", "es", "ions", "reads", "ens", " ang", "len", "outs", "man", "params", "s", "nas", "ds", "ants", "an", " means", "cons", " Ans", "ANS", "ai", "anes", "ents", "ns", "anan", "ras", "ats", "anus", "anc", "scan", " ants", "lang", "ids", "mean", "annot", "as", "san", " chars", "ons", "parser", " scans", "unks", "amps", "ann"], "mod": ["Len", "S", "id", "num", "ln", " max", " count", " id", "l", " m", "len", " ins", "ian", "man", " flags", " len", " gn", "m", "x", " p", " min", " mask", "k", "mn", " fn", " chars", " bits"], "sc": ["cl", "mc", "sci", "nc", "scope", "ch", "sec", "ss", " SC", "si", "cur", "asc", "sh", "Sc", "SC", "screen", "scl", "bc", "cs", "sw", "cv", "src", "lc", "ci", "c", "cer", "sp", "acc", "system", "sq", "uc", "sr", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "sch", "esc", "cus"], "out": ["cl", "nc", "sci", "nt", "p", "buffer", "ch", "server", "ex", "path", "line", "page", "screen", "name", "r", "io", "gen", "conn", "outer", "report", "c", "t", "key", "w", "output", "x", "sp", "OUT", "str", "list", "writer", "string", "code", "Out", "o", "g", "b", "err", "sys", "ger", "write", "exec", "up", "log", "bin", "file", "outs", "lock", "ctx", "cache", "error", "IN", "console"], "n": ["nn", "none", "nc", "nt", "ni", "don", "count", "p", "dn", "adj", "nor", "u", "na", "num", "nan", "N", "ln", "span", "v", "cn", "l", "sn", "name", "r", "z", "h", "nl", "len", "f", "fn", "conn", "s", "nat", "c", "inn", "ne", "m", "w", "x", "an", "e", "node", "left", "o", "ns", "b", "g", "network", "nb", "names", "pn", "net", "k", "norm", "no", "mn", "not", "number", "y", "en", "t", "sync"], "d": ["sd", "ded", "p", "dict", "dn", "id", "u", "nd", "did", "dp", "ad", "v", "l", "data", "dat", "dates", "z", "dr", "f", "dc", "s", "c", "ds", "t", "m", "dos", "x", "w", "di", "e", "dad", "du", "md", "o", "dd", "dom", "b", "dy", "dl", "dt", "D", "cd", "da", "ind", "dh"], "i": ["bi", "hi", "pi", "ori", "ni", "iu", "p", "ami", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "mini", "data", "ri", "uli", "io", "init", "h", "z", "abi", "info", "f", "ci", "vi", "ui", "ini", "c", "eni", "phi", "x", "mu", "uri", "adi", "e", "ip", "di", "I", "ie", "ai", "q", "o", "gi", "mi", "inner", "ii", "b", "zi", "g", "li", "oi", "k", "yi", "y", "my", "udi", "ti", "fi"], "j": ["bi", "dj", "jj", "ni", "p", "oj", "it", "u", "J", "qi", "next", "ji", "v", "jp", "ix", "l", " ii", "ij", "ik", "r", "z", "h", "end", "aj", "f", "ui", "c", "key", "m", "x", "e", "jet", "ja", "uj", "ie", "q", "o", "ii", "b", "li", "js", "job", "y", "jl", "jo"], "reader": ["rar", "over", "wrapper", "loader", "buffer", "null", "table", "server", "url", "line", "l", "ri", "r", "oder", "io", "iter", "stream", "row", "input", "source", "ler", "resource", "er", "f", "report", "pointer", "feed", "format", "ruby", "e", "writer", "per", "socket", "token", "ry", " Reader", "inner", "context", "rer", "rot", "riter", "rr", "ner", "handler", "file", "rc", "manager", "worker", "lock", "parser", "driver", "reading", "read", "Reader"], "tokenizer": [" tokenizers", "authorization", "Tokenizing", "tokenener", " tokenizing", "randomize", "okeniter", " tokenize", "Tokenization", "organizing", "optimner", "Tokenize", "Tokenizers", "okenizing", "tokenize", "serializers", "okener", "initialize", "serializing", "okenizer", "organiter", " tokenization", " tokeniser", " tokeniter", "optimizer", "randomiter", "okenize", "optimiter", "serialner", "optimize", "authoriter", "tokenization", "okenner", "optimer", " tokenner", "tokeniter", "tokeniser", "initializer", "randomizer", "tokener", "authorizer", "optimization", "okenization", "initialener", "initializers", "serialiter", " tokener", "Tokenner", "tokenner", "tokenizers", "serializer", "organizer", "Tokeniser", "organization", "serialener", "okenizers", "randomizing", "tokenizing", "authorize", "serialiser", "serialize", "Tokenizer", "okenener", "serialization"], "in": ["this", "p", "buffer", "id", "login", "ins", "din", "path", "line", "l", "data", "is", "lin", "r", "io", "source", "win", "input", "resource", "In", "f", "user", "image", "inn", "ini", "c", "x", "str", "socket", "string", "inf", "inner", "rin", "o", "pass", "exec", "connection", "log", "bin", "file", "as", "inc", "doc", "IN"], "a": ["p", "ia", "xa", "na", "ad", "span", "access", "ba", "data", "aa", "z", "A", "ha", "aux", "tta", "f", "au", "instance", "s", "c", "ga", "at", "ata", "x", "an", "w", "sa", "ea", "active", "ua", "ta", "ai", "alpha", "abs", "g", "array", "b", "ca", "ac", "aaa", "ama", "as", "la", "area", "ab", "da", "ma", "am", "va", "aj"]}}
{"code": "\\nimport java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String args[]){\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t//\u60c5\u5831\u304c\u4f55\u4ef6\u5165\u529b\u3055\u308c\u308b\u304bn\u3067\u53d7\u3051\u53d6\u308b\\n\t\tString s1 = sc.next();\\n\t\tint n = Integer.parseInt(s1);\\n\t\t\\n\t\t//3\u6b21\u5143\u914d\u5217\u30671\u30d5\u30ed\u30a210\u90e8\u5c4b3\u968e\u5efa\u3066\u306e\u516c\u820e4\u68df\u306e\u305d\u308c\u305e\u308c\u306e\u5165\u5c45\u72b6\u6cc1\u3092\u683c\u7d0d\u3059\u308b\uff08\u521d\u671f\u5024\u306f\uff10\u306b\u3059\u308b\uff09\\n\t\tint A[][][] = new int[10][3][4];\\n\t\tfor(int i = 0; i < 4; i++){\\n\t\t\tfor(int j = 0; j < 3; j++){\\n\t\t\t\tfor(int k = 0; k < 10; k++){\\n\t\t\t\t\tA[k][j][i] = 0;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\t//\u5165\u529b\u3055\u308c\u305f\u60c5\u5831\u3092\u53d7\u3051\u53d6\u308a\u5165\u5c45\u72b6\u6cc1\u3092\u66f4\u65b0\u3059\u308b\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tString s2 = sc.next();\\n\t\t\tint b = Integer.parseInt(s2);\\n\t\t\tString s3 = sc.next();\\n\t\t\tint f = Integer.parseInt(s3);\\n\t\t\tString s4 = sc.next();\\n\t\t\tint r = Integer.parseInt(s4);\\n\t\t\tString s5 = sc.next();\\n\t\t\tint v = Integer.parseInt(s5);\\n\t\t\tA[r-1][f-1][b-1] += v;\\n\t\t}\\n\t\t\\n\t\t//\u66f4\u65b0\u3057\u305f\u5165\u5c45\u72b6\u6cc1\u3092\u8868\u793a\u3059\u308b\\n\t\tfor(int i = 0; i < 4; i++){\\n\t\t\tfor(int j = 0; j < 3; j++){\\n\t\t\t\tfor(int k = 0; k < 10; k++){\\n\t\t\t\t\tSystem.out.print(\" \" + A[k][j][i]);\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(\"\");\\n\t\t\t}\\n\t\t\tif(i != 3){\\n\t\t\t\tSystem.out.println(\"####################\");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "211", "substitutes": {"sc": [" ser", "gram", "ss", " SC", " rc", " sl", "Sc", "SC", " res", "s", "c", " scr", " pars", " ans", "sq", " scanner", " surf", " sm", "se", " Sc", "sb", " app", "scan", " src", " arr", " sp", "ann"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String agrs[]){\\nScanner sc = new Scanner(System.in);\\n\t\tint s = sc.nextInt();\\n\t\tint m = sc.nextInt();\\nif(s>m){\\n\t\tSystem.out.println(\"a > b\");\\n}else if(s<m){\\n\t\tSystem.out.println(\"a < b\");\\n}else{\\n\t\tSystem.out.println(\"a == b\");\\n}\\n\t}\\n}", "target": "179", "substitutes": {"agrs": ["Erres", "attri", " expri", " expros", "attro", "lres", "lri", "attres", "lros", " expro", "Erros", "lro", "attros", " expres", "Erro", "Erri"], "sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "ser", "com", "ch", "tc", "ss", "sec", "server", " SC", "si", "cur", "asc", "Sc", "SC", "cs", "bc", "sw", "desc", "cor", "lc", "dc", "c", "cer", "sp", "acc", "sq", "uc", "ca", "se", "ner", " Sc", "exec", "scan", "osc", "rc", "cc", "cr", "sch", "ec", "esc", "sync"], "s": ["S", "p", "size", "u", "ins", "ss", "si", "i", "l", "a", "sam", "is", "es", "ls", "ws", "sites", "ims", "h", "cs", "sim", "ps", "f", "south", "ms", "c", "states", "ds", "an", "sa", "e", "sq", "ses", "o", "abs", "d", "n", "ns", "g", "b", "gs", "services", "sym", "sb", "sm", "xs", "ans"], "m": ["um", "dm", "mc", "im", "p", "u", "om", "M", "v", "i", "l", "a", "mm", "h", "machine", "f", "ms", "c", "an", "ym", "mu", "mad", "e", "md", "o", "d", "mi", "n", "g", "b", "sym", "j", "sm", "mn", "y", "ma", "am"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n  public static void main(String args[]) {\\n    Scanner sc = new Scanner(System.in);\\n\\n    int N = sc.nextInt();\\n    int M = sc.nextInt();\\n    int G[] = new int[N+2];\\n    for (int i = 0; i < M; i++) {\\n      G[sc.nextInt()]++;\\n      G[sc.nextInt()+1]--;\\n    }\\n    int count = 0;\\n    for (int i = 1; i < N+2; i++) {\\n      if (i > 0) {\\n        G[i] += G[i - 1];\\n      }\\n      if (G[i] == M) count++;\\n    }\\n    System.out.println(count);\\n  }\\n}\\n", "target": "124", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "ser", "com", "ch", "tc", "ss", "server", " SC", "cur", "asc", "search", "sh", "Sc", "SC", "cb", "ws", "exp", "cs", "bc", "sw", "src", "cv", "lc", "ci", "loc", "dc", "c", "sp", "str", "sq", "uc", "soc", "sr", "cli", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cr", "cont", "sch", "parser", "ctx", "spec", "esc", "console", "cus", "sync"], "N": ["MN", "Len", "S", "IO", "Num", "Count", "NL", "C", "Part", "J", "Size", "U", "Y", "F", "NN", "P", "Na", "T", "I", "Ni", "II", "NC", "L", "R", "n", "B", "NM", "network", "Ne", "V", "K", "ND", "D", "NT", "H", "Z", "NS", "O", "Ns", "E", "X"], "M": ["MN", "S", "MM", "DM", "JM", "Mi", "C", "J", "MC", "U", "Y", "F", "Q", "P", "A", "MD", "m", "T", "I", "CM", "L", "R", "n", "B", "NM", "V", "K", "D", "H", "O", "Z", "MB", "LM", "W", "E", "X"], "G": ["GV", "S", "Gs", "IG", "FG", "Count", "C", "Gener", "LG", "J", "GP", "Game", "GU", "GO", "U", "Y", "GS", "CG", "F", "P", "A", "GG", "GR", "Group", "GE", "T", "I", "Grid", "L", "R", "Gu", "GI", "g", "GC", "B", "Guard", "V", "MG", "GH", "Global", "GD", "D", "GB", "H", "O", "Ge", "General", "GA", "Go", "W", "E"], "i": ["bi", "hi", "api", "pi", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "next", "xi", "ji", "v", "anti", "si", "ix", "l", "mini", "is", "r", "io", "init", "info", "abi", "f", "lc", "ci", "ui", "ini", "c", "index", "m", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "g", "cli", "ii", "b", "li", "j", "oi", "in", "chi", "ti"], "nextInt": [" nextInteger", "parseInt", "deepint", " nextShort", "Nextint", "parseint", "curInt", "shiftInteger", "curint", "curInteger", "deepInt", "nextShort", "searchShort", "NextShort", "deepShort", "NextInt", "deepINT", "nextint", "NextInteger", "curINT", "nextINT", "nextInteger", " nextint", " nextINT", "searchInteger", "shiftint", "parseINT", "searchInt", "shiftINT", "shiftInt", "searchint", "parseShort", "NextINT"], "count": ["counter", "total", "nt", "second", "p", "Count", "size", "test", "more", "id", "core", "now", "progress", "diff", "start", "h", "info", "length", "f", "last", "c", "sum", "key", "index", "weight", "depth", "base", "list", "code", "n", "g", "b", "limit", "current", "child", "found", "group", "level", "number", "age", "cache", "match", "ind"]}}
{"code": "\\nimport java.io.*;\\nimport java.math.*;\\nimport java.security.*;\\nimport java.text.*;\\nimport java.util.*;\\nimport java.util.concurrent.*;\\nimport java.util.regex.*;\\npublic class Main{\\n\tstatic BufferedReader br;\\n\tstatic int cin() throws Exception\\n\t{\\n\t\treturn Integer.valueOf(br.readLine());\\n\t}\\n\tstatic int[] split() throws Exception\\n\t{\\n\t\tString[] cmd=br.readLine().split(\" \");\\n\t\tint[] ans=new int[cmd.length];\\n\t\tfor(int i=0;i<cmd.length;i++)\\n\t\t{\\n\t\t\tans[i]=Integer.valueOf(cmd[i]);\\n\t\t}                                              \\n\t\treturn ans;\\n\t} \\n\tstatic long mod=1000000007;\\n\tstatic long power(long x,long y) \\n    { \\n        long res = 1; \\n        x = x % mod; \\n        while (y > 0) { \\n            if (y % 2 == 1) \\n                res = (res * x) % mod; \\n            y = y >> 1;\\n            x = (x * x) % mod; \\n        } \\n        return res%mod; \\n    } \\n    static long modInverse(long n) \\n    { \\n        return power(n, mod-2); \\n    } \\n    static int digits(int n)\\n    {\\n    \tint ans=0;\\n    \twhile(n!=0)\\n    \t{\\n    \t\tans++;\\n    \t\tn=n/10;\\n    \t}\\n    \treturn ans;\\n    }\\n    static int[] dp;\\n    static int min(int[]h,int ind,int k)\\n    {\\n    \tif(ind==h.length-1)\\n    \t\treturn 0;\\n    \tif(ind>=h.length)\\n    \t\treturn 1000000000;\\n    \tif(dp[ind]!=-1)\\n    \t\treturn dp[ind];\\n    \tint res=1000000000;\\n    \tfor(int i=1;i<=k;i++)\\n    \t{\\n    \t\tif(ind+i<h.length)\\n    \t\t\tres=Math.min(res,Math.abs(h[ind+i]-h[ind])+min(h,ind+i,k));\\n    \t}\\n    \tdp[ind]=res;\\n    \treturn res;\\n    }\\n    public static void main(String[] args) throws Exception {\\n        br = new BufferedReader(new InputStreamReader(System.in));\\n        int[]ar=split();\\n        int n=ar[0];\\n        int k=ar[1];\\n        int[]h=split();\\n        dp=new int[n+1];\\n        Arrays.fill(dp, -1);\\n        System.out.println(min(h,0,k));\\n    }\\n}", "target": "241", "substitutes": {"br": ["bl", "div", "ir", " fr", "ber", "p", "buffer", "wr", "http", "hr", "rb", "browser", "ch", "tr", "arr", "jp", "jar", "db", "lr", "fr", "r", "yr", "io", "init", "stream", "bc", "input", "bridge", "ler", "er", "dr", "mr", "orb", " tr", "BR", "img", "bro", "str", "HR", " reader", "Br", "ver", "result", "b", "err", "sr", "gr", "ger", "reader", "obj", "buf", "ocr", "j", "bin", "cr", "bar", "plug", " ab"], "cmd": ["cl", "cat", "seq", "msg", "prefix", "dict", "id", "xml", "ck", "mac", "path", "Cmd", "name", "part", "cb", "std", "header", "mand", "input", "src", "cp", "char", "conn", "shell", "comm", "c", "pid", "pkg", "config", "img", "ack", "text", "col", "cfg", "cf", "code", "md", "q", "op", "command", "cli", "dom", "acl", "grad", "host", "txt", "req", "bin", "cd", "batch", "ctx"], "ans": ["nn", "ana", "ands", "groups", "nz", "ars", "aned", "p", "na", "ani", "ads", "ins", "rans", "aus", "ks", "span", "anon", "lan", "nan", "acs", "asts", "powers", "atan", "a", "ions", "sn", "ls", "eps", "ips", "ens", "ations", "cs", "ps", "man", "params", "s", "ms", "ings", "os", "ds", "ants", "an", "list", "Na", "ops", "cons", "ANS", "any", "arts", "ents", "ns", "ras", "ats", "names", "anc", "no", "ids", "outs", "Ns", "as", "ons", "ctx", "amps", "nos", "ays", "can", "ann"], "i": ["bi", "hi", "on", "pi", "ni", "p", "it", "id", "u", "slice", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "l", "name", "ri", "ik", "io", "z", "abi", "info", "f", "ci", "c", "ui", "ini", "index", "m", "phi", "mu", "uri", "eni", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "zi", "li", "j", "oi", "yi", "in", "ti", "fi"], "mod": ["div", "module", "dist", "comb", "low", "rod", "rep", "mode", "modified", "od", "tr", "sec", "num", "sub", "sign", "rem", "comp", "exp", "row", "temp", "reg", "cond", "length", "perm", "man", "cm", "ms", "c", "MOD", "fun", "m", "or", "lo", "base", " Mod", "rad", "cum", "mix", "Mod", "max", "oct", "md", "o", "mods", "d", "min", "ver", "ow", "dim", "loop", "ac", "grad", "dig", "j", "form", "step", "term", "scale", "norm", "log", "req", "grow", "lock", "off", "dec", "post", "pad", "mult"], "x": ["on", "dx", "p", "xp", "size", "u", "na", "id", "xi", "wy", "ex", "v", "ix", "l", "a", "ya", "X", "r", "yx", "z", "f", "width", "ci", "c", "ax", "wx", "index", "m", "w", "e", "xxx", "min", "q", "o", "d", "b", "tx", "wa", "xs", "xy", "rx", "px", "fx", "t", "xc", "xx"], "y": ["ady", "yo", "py", "on", "ky", "p", "gy", "u", "sky", "sy", "wy", "oy", "ch", "v", "vy", "ya", "l", "a", "ix", "Y", "r", "yr", "re", "z", "ny", "ay", "c", "wx", "m", "w", "ty", "xxx", "ry", "o", "d", "b", "ish", "dy", "yy", "j", "ye", "yi", "xy", "ey", "cy", "t", "xx"], "res": ["rus", "ins", "ks", "rs", "powers", "vals", "eps", "r", "win", "cs", "results", "row", "reg", "s", "ms", "os", "resp", "max", "result", "ras", "ris", "rys", "xx", "poly", "reset", "id", "ix", "es", "rem", "z", "nr", "ps", "RES", "mr", "sum", "base", "resolution", "ry", "plus", "ver", "ries", "ress", "js", "yes", "req", "ret", "real", "resh", "pres", "hes", "arr", "right", "rh", "rows", "fun", "rev", "err", "gr", "obj", "css", "rx", "rates", "rss", "rep", "vs", "Rs", "ns", "Res", "range", "spec", "sol", "re"], "n": ["nn", "nc", "on", "nt", "ni", "p", "dn", "na", "u", "num", "nu", "nan", "N", "ln", "v", "cn", "l", "a", "sn", "ng", "r", "z", "len", "ny", "f", "fn", "s", "c", "inn", "ne", "m", "w", "an", "byn", "e", "o", "d", "ns", "g", "b", "bn", "pn", "j", "net", "mn", "non", "number", "en"], "dp": ["dm", "wp", "dist", "imp", "p", "pb", "sh", "db", "duration", "dq", "sv", "pd", "bh", "adr", "ph", "df", "reb", "lp", "cp", "ps", "dr", "params", "dc", "vs", "csv", "ds", " DP", "pkg", " p", "sp", "np", "ip", "di", "e", " cp", " tcp", "fp", "hp", "dep", "mp", "gp", "d", "vp", "dim", "dl", "tp", "dt", "xs", "hh", "bb", "DP", "pp", "port", "dh"], "h": ["p", "u", "http", "hr", "ch", "gh", "v", "sh", "l", "a", "r", "rh", "bh", "ht", "ph", "z", "ha", "hd", "cp", "f", "ah", "s", "c", "m", "w", "e", "hp", "q", "hs", "o", "d", "hw", "g", "b", "adh", "ih", "hm", "hh", "host", "H", "hl", "oh", "t"], "ind": ["inst", "IND", "nd", "qi", "wind", "fr", "exp", "init", "app", "left", "o", "set", "ld", "ii", "ord", "push", "inc", "post", "nn", "nt", "id", "ad", "ff", "ix", "ct", "z", "need", "end", "bind", "inn", "ne", "index", "d", "pred", "und", "edge", "j", "pos", "req", "mid", "pull", "ann", "div", "v", "add", "old", "find", "sign", "cand", "dr", "mind", "min", "q", "inf", "md", "dd", "err", "in", "pp", "act", "dist", "ded", "ch", "Ind", "dir", "start", "vert", "cond", "loc", "pt", "kind"], "k": ["sk", "mk", "p", "u", "ch", "ke", "ks", "km", "v", "sh", "kk", "ik", "r", "z", "end", "dk", "ok", "c", "key", "ak", "m", "w", "kw", "e", "q", "o", "d", "g", "kn", "b", "j", "K", "work", "ki"], "ar": ["rar", "ir", "cat", "arc", "ars", "AR", "par", "ard", "arin", "arr", "jar", "ap", "el", "part", "al", "r", "adr", "car", "dar", "are", "ear", "mar", "ler", "er", "air", "ay", "arg", "star", "at", "var", "ara", "ra", "lar", "arp", "ac", "Ar", "ner", "iar", "parse", "art", "far", "area", "bar", "tar", "aer", "array"]}}
{"code": "import java.util.*;\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner scanner = new Scanner(System.in);\\n        int n = scanner.nextInt();\\n        long ans = 0;\\n        HashMap<String, Integer> map = new HashMap<>();\\n        for(int i = 0; i < n; i++){\\n            String s = scanner.next();\\n            char sa[] = s.toCharArray(); \\n            Arrays.sort(sa);\\n            String sorted = new String(sa);\\n            ans += map.getOrDefault(sorted, 0);\\n            map.put(sorted, map.getOrDefault(sorted, 0)+1);\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n\\n", "target": "32", "substitutes": {"scanner": [" scaner", "hanner", "scanker", "iner", "anner", "hann", "analyner", "anter", "haner", "Scann", "analyning", " scanter", "scann", "aner", "scanter", " scanator", "inn", "analyker", "hanning", "inner", "scaner", "Scanker", "scanning", "scanator", "Scanter", "Scaner", "annner", "Scanator", "Scanning", "analyer", "anator", "annker", "inning", "Scanner", "annning"], "n": ["nn", "nc", "nt", "p", "dn", "u", "num", "nan", "N", "ln", "l", "sn", "r", "z", "h", "nl", "len", "f", "fn", "conn", "c", "ne", "m", "x", "o", "d", "ns", "b", "network", "nb", "ner", "j", "net", "k", "in", "mn", "number", "en", "t"], "ans": ["ams", "ana", "acts", "aos", "sk", "ars", "AN", "aned", "anas", "vers", "na", "ins", "aus", "ss", "rs", "ks", "lan", "aces", "asts", "acs", "ions", "offs", "ls", "ations", "ens", "cs", "ians", "au", "nas", "os", "cas", "ds", "ros", "ants", "an", "cons", "ANS", "leans", "ents", "ns", "ras", "ats", "aps", "ids", "ores", "ons", " scans", "aning", "amps", "ann"], "map": ["over", "module", "parent", "APP", "MAP", "scope", "age", "apper", "size", "dict", "hash", "move", "arr", "mate", "le", "ap", "ase", "maps", "mm", "use", "block", "batch", "app", "man", "ms", "order", "down", "m", "list", "pack", "cap", "mp", "per", "state", "set", "open", "work", "ge", "parse", "replace", "up", "place", "master", "group", "address", "lock", "cache", "port", "pad", "array"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "iu", "u", "multi", "qi", "xi", "ji", "v", "si", "is", "io", "z", "info", "abi", "f", "ci", "ui", "c", "ini", "index", "m", "mu", "ip", "di", "I", "ie", "ai", "d", "mi", "ii", "zi", "li", "j", "oi", "chi", "ti", "fi"], "s": ["S", "p", "u", "ins", "ss", "rs", "si", "strings", "a", "l", "es", "sv", "ls", "ws", "h", "bs", "f", "sl", "c", "os", "ings", "ds", "str", "e", "ses", "string", "o", "ns", "se", "su", "sb", "xs", "as"], "sa": [" ca", "ana", "mas", " pa", "sac", "na", "sha", "ss", " cs", " sac", "za", "si", "acs", " fa", "a", " si", "data", "sam", "Sa", "ls", "aa", " SA", "SA", "pa", "ity", "au", "asi", "sea", "isa", "ata", "ra", " ra", "ta", " la", "osa", "ca", "sr", "ray", "se", "sb", "issa", "sta", "ama", "fa", "as", " na", "asa", "area", "da", "sc", "va"], "sorted": ["Saved", " sifted", "insorter", "ssifted", "insorted", "sorting", "sort", "Sorting", "sifted", " sorts", "sorts", " sorter", "Splaced", "insort", "ssort", "insaved", "Sorts", "ssorts", "saved", "ssorted", "insifted", "Sorted", "ssaved", "splaced", " sort", " splaced", "ssorter", " saved", "sorter", " sorting", "Sorter", "Sort"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t\\n\t\tint n = scan.nextInt();\\n\t\tint[] a = new int[n];\\n\\n\t\tfor (int i = 0; i < n -1; i++) {\\n\t\t\ta[scan.nextInt() - 1]++;\\n\t\t}\\n\t\tfor (int i : a) {\\n\t\t\tSystem.out.println(i);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "12", "substitutes": {"scan": ["nn", "all", "cat", "see", "watch", "connect", "walk", "slice", "na", "ln", "span", "run", "search", "l", "sort", "is", "sign", "con", "r", "sin", "nl", "app", "query", "gen", "conn", "man", "vis", "plan", "chan", "an", "x", "skip", "sr", "ignore", "se", "ner", "pin", "in", "parse", "Scan", "clean", "san", "ans", "pan", "sc", "out", "can", "ann", "sync"], "n": ["nn", "all", "nc", "nt", "ni", "count", "p", "u", "na", "nor", "num", "N", "span", "v", "l", "sn", "r", "init", "z", "un", "nl", "len", "f", "conn", "s", "c", "inn", "ne", "m", "w", "an", "x", "o", "d", "ns", "b", "network", "nb", "j", "pos", "k", "net", "in", "no", "number", "y", "en", "t"], "a": ["all", "ana", "ava", "count", "p", "u", "na", "ba", "ar", "data", "aa", "z", "A", "oa", "pa", "tta", "au", "c", "ga", "an", "ata", "sa", "ea", "ae", "e", "active", "ai", "alpha", "array", "ca", "b", "wa", "aaa", "qa", "as", "y", "ans", "area", "ab", "la", "am", "va", "aj"], "i": ["bi", "hi", "on", "pi", "ni", "p", "it", "u", "id", "slice", "multi", "qi", "xi", "ji", "v", "si", "ri", "start", "io", "init", "z", "h", "info", "f", "ci", "ui", "c", "ini", "pointer", "index", "phi", "x", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "ii", "b", "li", "j", "oi", "in", "chi", "number", "y"], "nextInt": ["currentInt", "skipInt", "Nextint", "currentINT", "NextInt", "skipint", "nextint", "skipINT", "nextINT", "nextLong", "NextLong", "thisLong", " nextint", "currentint", " nextINT", "skipLong", "thisInt", "thisint", "thisINT", "currentLong", "NextINT", " nextLong"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.InputMismatchException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tTask task = new Task();\\n\t\ttask.solve();\\n\t}\\n\\n\tpublic static class Task {\\n\t\tstatic final long MOD = (long) 1e9 + 7;\\n\\n\t\tpublic void solve() {\\n\t\t\tScan sc = new Scan();\\n\t\t\tlong n = sc.scanLong();\\n\t\t\tlong i = (long) Math.sqrt(n);\\n\t\t\tfor (; i >= 1; --i) {\\n\t\t\t\tif (n % i == 0) {\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tlong other = n / i;\\n\t\t\tlong res = Math.max(String.valueOf(i).length(), String.valueOf(other).length());\\n\t\t\tSystem.out.println(res);\\n\t\t}\\n\t}\\n\\n\tpublic static class Scan {\\n\t\tprivate byte[] buf = new byte[1024];\\n\t\tprivate int index;\\n\t\tprivate InputStream in;\\n\t\tprivate int total;\\n\\n\t\tpublic Scan() {\\n\t\t\tin = System.in;\\n\t\t}\\n\\n\t\tpublic int scan() {\\n\t\t\tif (total < 0)\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\tif (index >= total) {\\n\t\t\t\tindex = 0;\\n\t\t\t\ttry {\\n\t\t\t\t\ttotal = in.read(buf);\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t\t}\\n\t\t\t\tif (total <= 0)\\n\t\t\t\t\treturn -1;\\n\t\t\t}\\n\t\t\treturn buf[index++];\\n\t\t}\\n\\n\t\tpublic long scanLong() {\\n\t\t\tlong integer = 0;\\n\t\t\tint n = scan();\\n\t\t\twhile (isWhiteSpace(n))\\n\t\t\t\tn = scan();\\n\t\t\tint neg = 1;\\n\t\t\tif (n == '-') {\\n\t\t\t\tneg = -1;\\n\t\t\t\tn = scan();\\n\t\t\t}\\n\t\t\twhile (!isWhiteSpace(n)) {\\n\t\t\t\tif (n >= '0' && n <= '9') {\\n\t\t\t\t\tinteger *= 10;\\n\t\t\t\t\tinteger += n - '0';\\n\t\t\t\t\tn = scan();\\n\t\t\t\t} else\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\treturn neg * integer;\\n\t\t}\\n\\n\t\tpublic double scanDouble() throws IOException {\\n\t\t\tdouble doub = 0;\\n\t\t\tint n = scan();\\n\t\t\twhile (isWhiteSpace(n))\\n\t\t\t\tn = scan();\\n\t\t\tint neg = 1;\\n\t\t\tif (n == '-') {\\n\t\t\t\tneg = -1;\\n\t\t\t\tn = scan();\\n\t\t\t}\\n\t\t\twhile (!isWhiteSpace(n) && n != '.') {\\n\t\t\t\tif (n >= '0' && n <= '9') {\\n\t\t\t\t\tdoub *= 10;\\n\t\t\t\t\tdoub += n - '0';\\n\t\t\t\t\tn = scan();\\n\t\t\t\t} else\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tif (n == '.') {\\n\t\t\t\tn = scan();\\n\t\t\t\tdouble temp = 1;\\n\t\t\t\twhile (!isWhiteSpace(n)) {\\n\t\t\t\t\tif (n >= '0' && n <= '9') {\\n\t\t\t\t\t\ttemp /= 10;\\n\t\t\t\t\t\tdoub += (n - '0') * temp;\\n\t\t\t\t\t\tn = scan();\\n\t\t\t\t\t} else\\n\t\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn doub * neg;\\n\t\t}\\n\\n\t\tpublic String scanString() {\\n\t\t\tStringBuilder sb = new StringBuilder();\\n\t\t\tint n = scan();\\n\t\t\twhile (isWhiteSpace(n))\\n\t\t\t\tn = scan();\\n\t\t\twhile (!isWhiteSpace(n)) {\\n\t\t\t\tsb.append((char) n);\\n\t\t\t\tn = scan();\\n\t\t\t}\\n\t\t\treturn sb.toString();\\n\t\t}\\n\\n\t\tpublic char scanChar() {\\n\t\t\tint n = scan();\\n\t\t\twhile (isWhiteSpace(n))\\n\t\t\t\tn = scan();\\n\t\t\treturn (char) n;\\n\t\t}\\n\\n\t\tprivate boolean isWhiteSpace(int n) {\\n\t\t\tif (n == ' ' || n == '\\n' || n == '\\r' || n == '\\t' || n == -1)\\n\t\t\t\treturn true;\\n\t\t\treturn false;\\n\t\t}\\n\t}\\n}\\n", "target": "61", "substitutes": {"task": ["complete", "this", "self", "java", "target", "unit", "test", "class", "message", "project", "tc", "to", "server", "run", "Task", "ask", "input", "method", "app", "event", "instance", "slave", "contract", "t", "process", "config", "device", "T", "system", "ack", "command", "object", "network", "work", "thread", "job", "worker", "transfer", "game", "out"], "MOD": [" log", "nt", " delta", "size", " ret", "num", "N", " test", " init", " count", " id", " m", " j", " seed", " window", " exp", " p", " norm", " e", " weight", " r", " base", " c", " scale", " f", " seq", " timeout", "t", " N"], "sc": ["cl", "mc", "sci", "nc", "scope", "pc", "ch", "sec", " SC", "si", "asc", "sh", "Sc", "SC", "screen", "scl", "bc", "cv", "sw", "src", "lc", "ci", "s", "c", "sp", "acc", "system", "sq", "uc", "ca", " Sc", "scan", "Scan", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "can"], "n": ["nc", "size", "adj", "num", "cn", "l", "a", "r", "init", "s", "w", "o", "inner", "g", "pn", "nb", "original", "mn", "nn", "all", "none", "rn", "on", "nt", "ni", "p", "dn", "nu", "name", "z", "h", "nl", "f", "conn", "inn", "ne", "an", "np", "node", "d", "network", "ner", "j", "nit", "norm", "no", "not", "number", "t", "don", "na", "nan", "span", "anon", "v", "sn", "sign", "len", "br", "x", "nin", "min", "b", "net", "y", "en", "u", "one", "N", "ln", "ng", "un", "fn", "c", "m", "e", "ns", "current", "k", "non"], "i": ["bi", "hi", "ic", "pi", "ori", "ni", "iri", "p", "iu", "u", "id", "qi", "ei", "xi", "v", "anti", "si", "ix", "l", "mini", "is", "ri", "uli", "io", "z", "abi", "f", "ci", "s", "c", "ini", "ui", "m", "phi", "x", "eni", "uri", "e", "di", "I", "ai", "o", "gi", "d", "mi", "cli", "ii", "b", "zi", "isi", "li", "j", "oi", "yi", "chi", "t", "ti", "fi"], "other": [" others", "seq", "unit", "iron", "second", "initial", "more", "one", "next", "server", "thing", "extra", "then", "r", "iter", "length", "resource", "loc", "outer", "x", "iso", "which", "e", "OTHER", "string", "two", "o", "with", "result", "b", "another", "work", "original", "rice", "Other", "number", "later", "shared", "also", "coll"], "res": ["func", "vec", "rus", "pres", "reed", "rs", "arr", "vals", "es", "is", "rem", "r", "right", "exp", "rh", "results", "reg", "ps", "RES", "rows", "ms", "os", "mr", "base", "full", "resp", "rev", "rest", "result", "err", "ras", "ress", "rex", "js", "response", "rel", "ret", "req", "ris", "Res", "resolution", "resh", "re"], "buf": ["buff", "fb", "tmp", "seq", "vec", "buffer", "Buff", "mb", "pb", "queue", "rb", "map", "Buffer", "bp", "ba", "ff", "cur", "pool", "db", "cb", "data", "bh", "bytes", "bc", "cv", "bu", "src", "gb", "orig", "br", "fd", "uf", "bag", "config", "img", "text", "uc", "b", "bb", "log", "bin", "rc", "wb", "ab", "conv", "batch", "ctx", "mem"], "index": ["all", "offset", "initial", "count", "prefix", "buffer", "slice", "id", "num", "multi", "version", "search", "page", "part", "partial", "start", "exp", "value", "iter", "info", "input", "batch", "post", "length", "resource", "ticket", "width", "item", "pointer", "key", "flash", "weight", "match", "x", "base", "action", "full", "active", "token", "max", "alpha", "element", "result", "loop", "body", "current", "open", "pos", "no", "connection", "Index", "position", "type", "number", "inc", "error", "ind", "default", "option"], "in": ["this", "isin", "client", "inet", "p", "pc", "id", "login", "ins", "din", "binary", "ex", "url", "l", "data", "is", "lin", "con", "r", "source", "win", "input", "src", "channel", "In", "f", "conn", "session", "c", "ini", "inn", "socket", "ssl", "gin", "read", "inner", "rin", "b", "kin", "err", "again", "pass", "reader", "pin", "connection", "log", "bin", "file", "port", "readable", "as", "inc", "IN", "out"], "total": ["otal", "complete", "all", "offset", "none", "cat", "trans", "nt", "count", "toc", "buffer", "size", "normal", "null", "html", "multi", "meta", "page", "partial", "part", "start", "valid", "value", "iter", "info", "percent", "length", "sum", "tax", "Total", "base", "list", "quant", "full", "active", "token", "max", "translation", "zero", "result", "stat", "limit", "current", "open", "net", "fat", "no", "scale", "stats", "found", "type", "number", "error", "t"], "integer": ["operator", "offset", "nt", "initial", "uint", "count", "p", "ment", "null", "num", "character", "binary", "auto", "unsigned", "value", "init", "input", "length", "f", "image", "c", "pixel", "m", "quant", "text", "string", "atomic", "oct", "inf", "inner", "integ", "element", "zero", "object", "util", "field", "current", "term", "bin", "digit", "number", "negative", "odd", "error", "array"], "neg": ["empty", "size", "omin", "diff", "valid", "exp", "col", "occup", "term", "position", "negative", "digit", "missing", "error", "all", "none", "uint", "bug", " negative", "anti", "iter", "sum", "ne", "plus", "pos", "norm", "no", "minus", "beta", "not", "number", "origin", "unit", "count", "nor", "nan", "isu", "nov", "sign", "sin", "bad", "orig", "gen", "flo", "ack", "comment", "rot", "err", "util", "iv", "dest", "rel", "dec", "coll", "offset", "oc", "u", "unsigned", "un", "ok", "loc", "c", "or", "axis", "Neg", "op", "zero", "nil", "ac", "anim", "non"], "doub": ["dicturacy", "sduracy", "puracy", "purations", "sdrib", "dicturations", "brib", "buracy", "bimage", "prib", "dictimage", "sdimage", "sdurations", "burations", "pimage", "dictrib"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\t\\n\t\tint N = sc.nextInt();\\n\t\tint[] A;\\n\t\tA = new int[N];\\n\\n\t\tfor(int i = 0; i < N; i++){\\n\t\t \tA[i]= sc.nextInt();\\n\t\t}\\n\t\tint minj;\\n\t\tint count = 0;\\n\t\tfor(int i = 0; i < N; i++){\\n\t\t\tminj = i;\\n\t\t\tfor(int j = i; j < N; j++){\\n\t\t\t\tif(A[j] < A[minj]){\\n\t\t\t\t\tminj = j;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif(minj != i){\\n\t\t\t\tint temp = A[i];\\n\t\t\t\tA[i] = A[minj];\\n\t\t\t\tA[minj] = temp;\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\\n\\n\t\tfor(int k = 0; k < N; k++){\\n\t\t\tSystem.out.printf(\"%d\",A[k]);\\n\t\t\tif(k != N - 1){\\n\t\t\t\tSystem.out.printf(\" \");\\n\t\t\t}\t\\n\t\t}\\n\t\tSystem.out.printf(\"\\n%d\\n\",count);\\n\\n\t}\\n}\\n", "target": "199", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "nt", "scope", "pc", "class", "ser", "ch", "sec", "ss", " SC", " rc", "asc", "sh", "Sc", "SC", "io", "bc", "cs", "sw", "cv", "src", "lc", "lib", "c", " scr", "sp", "acc", "ec", "system", "sq", "soc", "sr", "sem", "se", "ner", " Sc", "sys", "anc", "sb", "scan", "osc", " cur", "rc", "cc", "cr", "cont", "sch", "out", "esc", "ctx"], "N": ["Len", "S", "Num", "No", "NA", "Count", "C", "Part", "J", "M", " n", "Size", "Y", "Node", "F", "NN", "Q", "P", "Na", "T", "I", "Ni", "L", "R", "n", "B", "NM", "network", "Ne", "V", "CNN", "K", "NB", "D", "NT", "H", "Z", "Ns", "O", "NS", "G", "NE", "NI", "W", "X"], "A": ["S", "Ha", "NA", "Count", "C", "AA", "M", "TA", "Average", "LA", "a", "As", "U", "Y", "Array", "Java", "Address", "MA", "F", "mA", "Q", "AP", "This", "P", "Ma", "Answer", "Area", "API", "And", "T", "I", "At", "Attack", "alpha", "L", "Alpha", "B", "Ar", "V", "Args", "K", "D", "H", "O", "Action", "CA", "G", "area", "The", "Adam", "DATA", "W", "E", "array", "X"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "p", "ami", "u", "id", "qi", "xi", "ji", "v", "anti", "si", "ix", "l", "a", "mini", "is", "ij", "ik", "ri", "start", "io", "init", "info", "z", "f", "ci", "vi", "ui", "ini", "c", "index", "eni", "phi", "x", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "n", "ii", "cli", "li", "in", "false", "y", "ki", "ind", "fi"], "minj": ["minz", " minji", " minz", "minf", "minji", "Minjo", "smallj", " minuj", "minx", "maxi", "mitj", "blockx", " minjo", "maxja", "rainji", " mink", "mainJ", "rainja", "Minz", "minja", "Minx", "rainj", "sortj", " mini", "mini", "MINJ", "smallji", "smalli", "MINk", "sortuj", "blockj", "blockji", "minuj", "smallf", " minja", "mainjo", "MinJ", "sortjo", "maxk", "raink", "minJ", "Minj", "mitja", " minf", "mainji", "Minf", "MINji", "MINj", "Minuj", "sortji", "mainj", "smallja", "mainx", "mink", "mitji", "mitk", "Minji", "Mini", "minjo", "maxj", "blockjo", "Mink", "smallz", "maink", " minJ", "Minja", "smallJ"], "count": ["counter", "total", "call", "nt", "p", "Count", "size", "test", "now", "id", "num", "old", "z", "info", "h", "len", "cond", "length", "c", "sum", "key", "check", "weight", "index", "list", "base", "max", "code", "b", "err", "current", "work", "child", "found", "number", "cache", "ind"], "j": ["dj", "api", "jj", "jc", "p", "adj", "it", "u", "J", "qi", "ji", "v", "jp", "si", "l", "ij", "start", "z", "length", "f", "c", "key", "x", "jo", "e", "ja", "uj", "ie", "o", "d", "n", "g", "b", "ii", "li", "obj", "js", "job", "y", "jl", "ind", "aj"], "temp": ["div", "tmp", "unit", "age", "now", "size", "adj", "emp", "id", "stable", "tc", "pre", "mini", "point", "diff", "init", "Temp", "z", "iter", "source", "lc", "c", "key", "w", "base", "pack", "ip", "max", "n", "err", "current", "flat", "frac", "level", "y", "inc", "area", "flow", "dev", "fake"], "k": ["sk", "mk", "p", "ka", "u", "id", "ko", "ck", "ch", "ke", "ks", "km", "v", "kh", "kick", "kk", "ik", "ask", "z", "h", "ok", "f", "ek", "c", "key", "ak", "ku", "kw", "q", "o", "unk", "d", "kn", "n", "g", "kl", "b", "kid", "K", "work", "kind", "kat", "y", "ki"]}}
{"code": "import java.io.ByteArrayInputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.ArrayDeque;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.InputMismatchException;\\nimport java.util.Map;\\nimport java.util.Queue;\\n\\npublic class Main {\\n\tInputStream is;\\n\tPrintWriter out;\\n\tString INPUT = \"\";\\n\\n\tvoid solve() {\\n\t\tchar[] s = ns(3);\\n\t\tchar[] t = ns(3);\\n\t\tint ct = 0;\\n\t\tfor(int i = 0; i < 3; i++) {\\n\t\t\tif(s[i] == t[i]) ct++;\\n\t\t}\\n\t\tout.println(ct);\\n\t}\\n\t\t\\n\t\t\\n\tvoid run() throws Exception {\\n\t\tis = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());\\n\t\tout = new PrintWriter(System.out);\\n\\n\t\tlong s = System.currentTimeMillis();\\n\t\tsolve();\\n\t\tout.flush();\\n\t\tif (!INPUT.isEmpty())\\n\t\t\ttr(System.currentTimeMillis() - s + \"ms\");\\n\t}\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tnew Main().run();\\n\t}\\n\\n\tprivate byte[] inbuf = new byte[1024];\\n\tpublic int lenbuf = 0, ptrbuf = 0;\\n\\n\tprivate int readByte() {\\n\t\tif (lenbuf == -1)\\n\t\t\tthrow new InputMismatchException();\\n\t\tif (ptrbuf >= lenbuf) {\\n\t\t\tptrbuf = 0;\\n\t\t\ttry {\\n\t\t\t\tlenbuf = is.read(inbuf);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tif (lenbuf <= 0)\\n\t\t\t\treturn -1;\\n\t\t}\\n\t\treturn inbuf[ptrbuf++];\\n\t}\\n\\n\tprivate boolean isSpaceChar(int c) {\\n\t\treturn !(c >= 33 && c <= 126);\\n\t}\\n\\n\tprivate int skip() {\\n\t\tint b;\\n\t\twhile ((b = readByte()) != -1 && isSpaceChar(b))\\n\t\t\t;\\n\t\treturn b;\\n\t}\\n\\n\tprivate double nd() {\\n\t\treturn Double.parseDouble(ns());\\n\t}\\n\\n\tprivate float nf() {\\n\t\treturn Float.parseFloat(ns());\\n\t}\\n\\n\tprivate char nc() {\\n\t\treturn (char) skip();\\n\t}\\n\\n\tprivate String ns() {\\n\t\tint b = skip();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\twhile (!(isSpaceChar(b))) { // when nextLine, (isSpaceChar(b) && b != ' ')\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tprivate char[] ns(int n) {\\n\t\tchar[] buf = new char[n];\\n\t\tint b = skip(), p = 0;\\n\t\twhile (p < n && !(isSpaceChar(b))) {\\n\t\t\tbuf[p++] = (char) b;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn n == p ? buf : Arrays.copyOf(buf, p);\\n\t}\\n\\n\tprivate char[][] nm(int n, int m) {\\n\t\tchar[][] map = new char[n][];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\tmap[i] = ns(m);\\n\t\treturn map;\\n\t}\\n\\n\tprivate int[] na(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = ni();\\n\t\treturn a;\\n\t}\\n\\n\tprivate int ni() {\\n\t\tint num = 0, b;\\n\t\tboolean minus = false;\\n\t\twhile ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))\\n\t\t\t;\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\\n\t\twhile (true) {\\n\t\t\tif (b >= '0' && b <= '9') {\\n\t\t\t\tnum = num * 10 + (b - '0');\\n\t\t\t} else {\\n\t\t\t\treturn minus ? -num : num;\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tprivate long nl() {\\n\t\tlong num = 0;\\n\t\tint b;\\n\t\tboolean minus = false;\\n\t\twhile ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))\\n\t\t\t;\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\\n\t\twhile (true) {\\n\t\t\tif (b >= '0' && b <= '9') {\\n\t\t\t\tnum = num * 10 + (b - '0');\\n\t\t\t} else {\\n\t\t\t\treturn minus ? -num : num;\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tprivate static void tr(Object... o) {\\n\t\tSystem.out.println(Arrays.deepToString(o));\\n\t}\\n}", "target": "243", "substitutes": {"is": ["ic", "isin", "im", "ir", "was", "Is", "IS", "it", "id", "isl", "http", "ins", "serv", "si", "ar", "impl", "bis", "ib", "isu", "ri", "ls", "its", "fs", "iss", "init", "io", "are", "get", "src", "ps", "app", "ci", "os", "ms", "us", "isa", "or", "ils", "iso", "uri", "ip", "ios", "ie", "ai", "abs", "inner", "isi", "iv", "sys", "isc", "ais", "ris", "as", "rx", "has"], "out": ["self", "this", "parent", "client", "null", "table", "server", "ex", "ext", "line", "pool", "page", "extra", "data", "name", "part", "r", "exp", "io", "co", "temp", "input", "conn", "report", "outer", "image", "down", "user", "key", "session", "output", "w", "OUT", "x", "list", "str", "plain", "writer", "string", "Out", "o", "inner", "op", "result", "err", "again", "write", "flush", "obj", "exec", "up", "net", "in", "work", "log", "group", "bin", "outs", "manager", "word", "inc", "bar", "doc", "cache", "error", "IN", "array", "window"], "INPUT": ["InLINE", " InHTML", "InFILE", "INENT", "INFFER", "INFILE", "ANLINE", "MNInput", "MNFFER", "ANPUT", "ANUT", "inFILE", "MNPUT", " INUT", " INLINE", " inUT", " inInput", "INInput", "inInput", " INENT", "MNENT", " inPUT", "InUT", "InFFER", " InPUT", "inLINE", " INFFER", "inPUT", " InUT", " INInput", "InPUT", " InInput", "INHTML", "InInput", " INFILE", "InENT", "INLINE", " INHTML", "ANInput", "INUT", " inHTML"], "s": ["S", "sd", "ts", "second", "p", "u", "ins", "ets", "ss", "ks", "sid", "v", "uts", "si", "strings", "l", "a", "sv", "es", "seconds", "r", "ls", "ips", "its", "sites", "h", "cs", "ps", "f", "ows", "os", "tests", "ds", "states", "m", "x", "parts", "ils", "e", "sp", "sq", "ses", "ssl", "o", "abs", "d", "n", "g", "ns", "sets", "gs", "ages", "services", "ures", "sym", "als", "su", "xs", "in", "outs", "y"], "t": ["ot", "total", "ts", "nt", "p", "u", "v", "l", "a", "r", "h", "z", "f", "m", "w", "x", "at", "ty", "e", "T", "pt", "ta", "q", "o", "d", "n", "g", "tp", "type", "y", "tt", "rt"], "ct": ["cl", "ut", "cat", "nc", "kt", "nt", "count", "pc", "sth", "sec", "const", "ced", "ctr", "pg", "CT", "ft", "lc", "ci", "dc", "cent", "ect", "bit", "x", "acc", "st", "pt", "Ct", "col", "oct", "ld", "pass", "obj", "att", "txt", "cd", "cc", "cr", "cont", "tt", "rt", "th", "et", "sc", "act", "ant", "xx"], "i": ["bi", "hi", "pi", "p", "slice", "u", "id", "it", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "a", "ri", "uli", "io", "info", "abi", "ci", "vi", "ui", "ini", "m", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ai", "o", "gi", "d", "n", "ii", "li", "j", "oi", "in", "y", "ti", "fi"], "inbuf": ["Inbuff", "Inpad", "lenuf", "inpad", "inbuffer", "incuf", "INpool", "INuf", "insbuff", "Inbuf", "enbuffer", " inpad", "Inbuffer", "inpool", " inbuffer", "INbuf", "insbuf", "INbuffer", "enbuf", "incbuf", "lenbuff", "insuf", "incbuffer", "enpad", "inbuff", "lenbuffer", "Inpool", "enbuff", "inuf", "incpool", "insbuffer", "Inuf", " inbuff"], "lenbuf": ["lengthbuf", "lenpool", "flbuff", "lenuf", "flbuf", "lfbuffer", "encb", "lncb", "lbuf", "Lenuf", "lenfb", " lenpool", " lenbuff", "lnpool", "lfcb", "lencb", "lfb", "fluf", "Lencb", " lenbuffer", "Lenbuffer", "lnbuf", "flpool", "enbuf", "lenbuff", "lcb", "lfuf", "lnbuff", "Lenbuf", "lnfb", " lenuf", "lenbuffer", "lnuf", "enbuff", "luf", "lengthuf", "lengthbuff", "enuf", "lbuff", "lffb", "lfbuf", "lfbuff", "lengthcb", " lencb"], "ptrbuf": ["padbuff", "lenuf", "rtbuff", "refbuf", "pointerbuff", "padcb", "drbuf", "padbuf", "ptrbuff", "paduf", "rtrb", "pointerrb", "reftab", "refbuffer", "pointeruf", "pointertab", "ptrbuffer", " ptrbuff", "druf", "lenqueue", "refuf", "refqueue", " ptruf", "rtcb", "rtqueue", "lenbuffer", "rtuf", "ptruf", "pointerbuf", "ptrtab", "drbuff", "drrb", "rtbuf", "pointercb", "refbuff", " ptrtab", "rtbuffer", "ptrqueue", "ptrcb", "ptrrb"], "c": ["enc", "nc", "vc", "count", "p", "C", "u", "ch", "v", "cur", "l", "a", "z", "cs", "cp", "f", "lc", "ci", "dc", "m", "w", "x", "cy", "e", "ctrl", "col", "ce", "code", "d", "n", "g", "ca", "ac", "k", "y", "cr", "dec", "sc", "xc", "coll"], "b": ["buff", "bi", "fb", "bl", "p", "buffer", "mb", "abb", "rb", "binary", "v", "ba", "l", "ib", "db", "cb", "a", "bf", "r", "be", "h", "reb", "lb", "end", "bc", "z", "bs", "eb", "f", "br", "base", "e", "bound", "abs", "d", "n", "B", "abc", "body", "nb", "obj", "bb", "bd", "bin", "y", "bar", "ab", "wb", "ob", "bp"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] emp = new int[N];\\n\t\tint A;\\n\t\tfor(int i = 2 ; i < N + 1; i++) {\\n\t\t\tA = sc.nextInt() -1;\\n\t\t\temp[A]++; \\n\t\t} \\n\t\tfor(int res : emp) {\\n\t\t\tSystem.out.println(res);\\n\t\t}\\n\t}\\n\t\\n}", "target": "12", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "ser", "ch", "tc", "ss", "sec", " SC", "cur", "asc", "sh", "fc", "Sc", "SC", "ct", "bc", "cs", "sw", "src", "cv", "lc", "ci", "cer", "c", "sp", "sq", "uc", "ca", "se", "ner", " Sc", "anc", "sb", "exec", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "sync"], "N": ["MN", "S", "Num", "NA", "SN", "C", "M", "Size", "U", "Y", "F", "Q", "P", "T", "Ni", "I", "II", "NC", "L", "R", "n", "B", "NR", "NM", "Ne", "V", "K", "NB", "D", "NT", "H", "Z", "Ns", "O", "NS", "NE", "NI", "W", "E", "X"], "emp": ["ace", "empt", "tmp", "offset", "imp", "IP", "seq", "effect", "hop", "oc", "p", "test", "arm", "patch", "acs", "ape", "asc", "ap", "ep", "rap", "eps", "adr", "attr", "temp", "P", "app", "ps", "cp", "length", "loc", "params", "instance", "ak", "m", "pai", "output", "acc", "mp", "ip", "cum", "ai", "eff", "atom", "ac", "race", "mount", "iv", "amp", "up", "EMP", "position", "address", "inc", "imm"], "A": ["S", "Ha", "NA", "C", "na", "J", "AA", "M", "LA", "a", "As", "U", "Y", "Si", "Sa", "Array", "F", "mA", "AP", "P", "SA", "PA", "Ma", "RA", "Area", "Am", "Na", "Offset", "API", "T", "I", "II", "At", "L", "R", "B", "V", "AC", "K", "Access", "D", "H", "O", "IA", "AI", "CA", "G", "Action", "area", "E", "X"], "i": ["bi", "hi", "pi", "ni", "p", "ami", "u", "id", "num", "qi", "multi", "xi", "ji", "v", "si", "ix", "a", "ri", "z", "h", "info", "f", "ci", "ui", "c", "ini", "index", "phi", "x", "DI", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "n", "b", "ii", "zi", "li", "j", "oi", "in", "chi", "y", "ind", "ti"], "res": ["rss", "rez", "Abs", "id", "rep", "ex", "arr", " Res", "data", "pre", "rap", "rh", "r", "results", "reg", "RES", "resolution", "acc", "ack", "resp", "arch", "rev", "Result", "abs", "act", "R", "prev", "result", "err", "ac", "gr", "ress", "ras", "obj", "pass", "rr", "response", "RE", "ret", "req", "Res", "out", "re"]}}
{"code": "import java.util.Scanner;\\nimport static java.lang.System.out;\\n\\nclass SmallLargeOrEqual {\\n    private int a;\\n    private int b;\\n\\n    SmallLargeOrEqual(int a, int b) {\\n        this.a = a;\\n        this.b = b;\\n    }\\n\\n    @Override\\n    public String toString() {\\n        return String.format((this.a == this.b) ? \"==\" : ((this.a > this.b) ? \">\" : \"<\"));\\n    }\\n}\\n\\npublic class Main {\\n    public static void main(String... args) {\\n        Scanner scan = new Scanner(System.in);\\n        int a = scan.nextInt();\\n        int b = scan.nextInt();\\n\\n        out.println(\"a \" + new SmallLargeOrEqual(a, b) + \" b\");\\n    }\\n}", "target": "179", "substitutes": {"a": ["ava", "this", "api", "p", "ia", "na", "ad", "ba", "i", "amd", "l", "aa", "A", "ha", "app", "oa", "pa", "f", "au", "s", "c", "ga", "an", "x", "sa", "ea", "ae", "e", "ada", "ai", "alpha", "o", "d", "abs", "n", "ca", "ac", "aaa", "sta", "ama", "fa", "art", "as", "la", "y", "area", "ab", "da", "address", "asa", "ma", "am", "va", "aj"], "b": ["fb", "bi", "ub", "p", "mb", "pb", "abb", "rb", "ad", "binary", "v", "i", "ba", "url", "ib", "db", "cb", "l", "part", "bis", "bf", "r", "bh", "be", "aa", "z", "lb", "bc", "gb", "bs", "eb", "f", "bas", "br", "c", "ben", "w", "x", "base", "e", "o", "d", "n", "B", "body", "nb", "obj", "sb", "bb", "xb", "bd", "bin", "job", "y", "wb", "ab", "bar", "amb", "emb", "ob", "bp"], "scan": ["nn", " Scan", "cat", "watch", "connect", "walk", "span", "run", "search", "fan", "sign", "r", "car", "iter", "sin", "row", "er", "query", "s", "lex", "feed", "an", "pack", " scanner", "ry", "skip", "read", "set", "n", "stat", "err", "kin", "se", "ner", "ignore", "reader", "sr", "in", "parse", "Scan", "clean", "join", "ans", "parser", "look", "match", "sc", "out", "can", "ann", "sync"]}}
{"code": "\\nimport java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n    /**\\n     * @param args the command line arguments\\n     */\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        //System.out.print(\"\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044 > \");\\n        //int    x = Integer.parseInt(scanner.nextLine());\\n        //int n = Integer.parseInt(scanner.nextLine());\\n        String d = scanner.nextLine();\\n        \\n        if(d.equals(\"SUN\")) System.out.println(7);\\n        if(d.equals(\"MON\")) System.out.println(6);\\n        if(d.equals(\"TUE\")) System.out.println(5);\\n        if(d.equals(\"WED\")) System.out.println(4);\\n        if(d.equals(\"THU\")) System.out.println(3);\\n        if(d.equals(\"FRI\")) System.out.println(2);\\n        if(d.equals(\"SAT\")) System.out.println(1);\\n                \\n        \\n        // Scanner\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30af\u30ed\u30fc\u30ba\\n        scanner.close();\\n    }\\n}", "target": "136", "substitutes": {"scanner": ["Scaner", "annner", "canator", "annener", "scanener", "Scanator", "anner", "annator", "Scanener", "caner", "scaner", "canner", "canener", "Scanner", "scanator"]}}
{"code": "import java.math.BigInteger;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        BigInteger[] a = new BigInteger[n];\\n        BigInteger aa = new BigInteger(\"1000000000000000000\");\\n        BigInteger sum = new BigInteger(\"1\");\\n        boolean flg = false;\\n        for (int i = 0; i < n; i++) {\\n            a[i] = sc.nextBigInteger();\\n            if(a[i].equals(BigInteger.ZERO)) {\\n                flg = true;\\n            }\\n        }\\n        if(flg) {\\n            System.out.println(0);\\n            return;\\n        }\\n        for (int i = 0; i < n; i++) {\\n            sum = sum.multiply(a[i]);\\n            if(sum.compareTo(aa) > 0) {\\n                System.out.println(-1);\\n                return;\\n            }\\n        }\\n        System.out.println(sum);\\n    }\\n}", "target": "27", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "sk", "sf", "scope", "pc", "na", "ch", "sec", "ss", " SC", "sh", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "cv", "lc", "loc", "c", "cer", "sp", "ec", "system", "sq", "uc", "soc", "sem", "se", "ner", " Sc", "anc", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "out", "esc", "sync"], "n": ["nn", "nc", "nt", "p", "size", "u", "num", "nan", "ln", "N", "v", "cn", "l", "name", "sn", "z", "len", "f", "conn", "s", "c", "ne", "m", "x", "np", "e", "o", "d", "g", "ns", "b", "network", "nb", "ner", "j", "net", "k", "no", "in", "number", "y", "t"], "a": ["p", "u", "na", "ad", "aaaa", "access", "auto", "ba", "ar", "ao", "A", "aj", "aux", "pa", "tta", "au", "s", "c", "ga", "at", "an", "ata", "sa", "ae", "ea", "e", "ai", "alpha", "o", "ca", "b", "ac", "aaa", "ama", "asha", "as", "la", "asa", "area", "ab", "da", "am", "va", "array"], "aa": ["ava", "ana", "amount", "xa", "pha", "na", "AA", "aaaa", "ba", "average", "A", "ah", "au", "ga", "sa", "ae", "ea", "acc", "ta", "aka", "ai", "alpha", "af", "array", "ca", "ac", "qa", "aaa", "beta", "asha", "as", "area", "da", "am", "va", "aj"], "sum": ["um", "total", "amount", "count", "size", "u", "sha", "gram", "na", "cost", "ad", "volume", "summary", "si", "average", "ass", "sh", "add", "sam", "data", "mm", "sign", "ali", "use", "mass", "ame", "cal", "ay", "key", "an", "account", "sp", "sa", "ae", "acc", "ai", "alpha", "comment", "Sum", "g", "gam", "b", "ac", "result", "alph", "aaa", "su", "sm", "up", "beta", "scale", "mean", "as", "ash", "inc", "ma", "dev", "error", "am", "out", "fee"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "is", "uni", "ri", "uli", "io", "init", "attr", "info", "abi", "f", "lc", "ci", "ui", "ini", "index", "eni", "phi", "x", "mu", "uri", "e", "ip", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "ii", "zi", "iv", "li", "j", "oi", "me", "yi", "in", "chi", "y", "ti", "fi"], "flg": ["flga", "fb", "lfq", "Flg", "Flb", "Flga", " flq", " flgh", "lfg", "Flge", "slgh", "slgs", "Flgg", " flge", "slg", "flge", "Flq", "flgs", "Flgh", "lfge", "flgg", "flb", " flb", " flga", "fg", "flq", " flgs", "fga", "flgh", "slga", "fgh", " flgg", "lfgg", "Flgs"]}}
{"code": "import java.util.*;\\n\\npublic class Main\\n{\\n    public static void main(String[] args)\\n    {\\n        //Compute c1 = new Compute();//calc\\n\\n        int count = 0;\\n        boolean sw = false;\\n        int max = Integer.MIN_VALUE;\\n        int min = Integer.MAX_VALUE;\\n        double dMax = Double.MIN_VALUE;\\n        double dMin = Double.MAX_VALUE;\\n        //StringBuilder answer=new StringBuilder();\\n\\n        //input\\n        Scanner sc = new Scanner(System.in);\\n        int k = sc.nextInt();\\n        int s = sc.nextInt();\\n\\n        for (int i=0;i<=k;++i)\\n        {\\n            for (int j = 0;j<=k;++j)\\n            {\\n                int a=s-i-j;\\n                if (a<=k && a>=0)\\n                {\\n                    ++count;\\n                }\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}", "target": "29", "substitutes": {}}
{"code": "import java.io.*;\\n\\nclass Main {\\n    public static void main (String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringBuilder sb = new StringBuilder(br.readLine());\\n        for (int i = 0; i < sb.length(); i++) {\\n            char c = sb.charAt(i);\\n            if (Character.isUpperCase(c)) {\\n                sb.setCharAt(i, Character.toLowerCase(c));\\n            } else {\\n                sb.setCharAt(i, Character.toUpperCase(c));\\n            }\\n        }\\n        System.out.println(sb.toString());\\n    }\\n}", "target": "192", "substitutes": {"br": ["bl", "div", "ori", "ber", "wr", "hr", "rb", "browser", "tr", "arr", "ar", "jar", "db", "cb", "fr", "r", "bf", "bh", "yr", "io", "stream", "bc", "bridge", "src", "bs", "er", "dr", "orb", "BR", "sp", "bro", "str", "img", "Br", "abs", "sr", "b", "err", "gr", "reader", "buf", "bb", "cr", "bar"], "sb": ["buff", "fb", "bl", "sf", "bm", "mb", "SB", "pb", "abb", "rb", "bj", "obb", "binary", "rob", "zb", "si", "usb", "db", "cb", "sv", "ib", "bf", "pg", "bh", "stab", "bc", "BB", "lb", "src", "gb", "bs", "eb", "kb", "s", "orb", " SB", "sp", "sa", "erb", "abs", "b", "bps", "nb", "bg", "bb", "sm", "xb", "bd", "lab", "bt", "wb", "ab", "sg", "amb", "ob", "bp"], "i": ["hi", "bi", "pi", "ori", "p", "slice", "u", "id", "it", "multi", "qi", "ch", "xi", "ji", "v", "si", "ix", "l", "data", "ri", "init", "h", "info", "abi", "temp", "z", "f", "lc", "ci", "s", "ui", "ini", "index", "eni", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "n", "ii", "b", "li", "j", "oi", "k", "in", "chi", "t", "fi"], "c": ["cl", "enc", "ic", "vc", "p", "C", "u", "ch", "character", "v", "cur", "l", "cu", "ct", "name", "r", "h", "cs", "char", "f", "lc", "ci", "dc", "m", "x", "e", "ec", "col", "uc", "ce", "code", "cf", "n", "b", "ca", "ac", "k", "in", "cd", "rc", "cc", "cr", "cont", "dec", "cy", "t", "esc", "xc", "coll"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int X = sc.nextInt();\\n        int Y = sc.nextInt();\\n        \\n        String a = null;\\n        \\n        if(Y%2 != 0){\\n            a = \"No\";\\n        } else if(X*2 <= Y && Y <= X*4){\\n            a = \"Yes\";\\n        } else {\\n            a = \"No\";\\n        }\\n        System.out.println(a);\\n    }\\n}\\n", "target": "62", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tint intJudge = 0;\\n\t\tint intCount = 0;\\n\\n\t\tint inta = 0;\\n\t\tint intb = 0;\\n\t\tint intc = 0;\\n\\n\t\ttry {\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\tString strInput = br.readLine();\\n\\n\t\t\tArrayList<Integer> NumList = new ArrayList<Integer>();\\n\\n\t\t\tString[] strNumList = strInput.split(\" \", 0);\\n\\n\t\t\tfor (int i = 0; i < strNumList.length; i++) {\\n\t\t\t\tNumList.add(Integer.parseInt(strNumList[i]));\\n\\n\t\t\t}\\n\\n\t\t\tinta = NumList.get(0);\\n\t\t\tintb = NumList.get(1);\\n\t\t\tintc = NumList.get(2);\\n\\n\t\t\tfor (int i =inta ; i <= intb; i++) {\\n\t\t\t\tintJudge = intc % i;\\n\t\t\t\tif (intJudge == 0) {\\n\t\t\t\t\t//?\u00b4???\u00b0???????????????\\n\t\t\t\t\tintCount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t//???????????????\\n\t\t\tSystem.out.println(intCount);\\n\\n\t\t} catch (IOException e1) {\\n\t\t\tSystem.out.println(e1);\\n\t\t}catch (NumberFormatException e2) {\\n\t\t\tSystem.out.println(e2);\\n\t\t}\\n\t}\\n\\n}", "target": "190", "substitutes": {"intJudge": ["uintJud", "IntJudge", "uintGear", "ntRule", "indrage", "interRule", "IntGear", "floatJudge", "ntrage", "floatPower", "interJudge", " intJud", "ntJudge", "intPower", " intPower", "interrage", "floatTotal", " intGear", "intrage", "ntTotal", "indJudge", "intJud", " intTotal", "intRule", "indCount", "IntJud", "intGear", "intTotal", "ntPower", "indRule", "interCount", "ntCount", "uintJudge"], "intCount": ["IntCheck", " intCheck", "uintcount", "intCheck", "IntCount", " intCode", "Intcount", "uintCode", "uintCount", "uintCheck", "IntCode", " intcount", "intCode", "intcount"], "inta": ["intera", "intaa", "indb", " inti", "inti", "nti", "inda", "indc", "indp", "indaa", "interc", " intaa", "intp", "ntp", "nta", "indi", "ntc", "interb", " intp", "ntaa"], "intb": [" intba", "intba", "indb", " inti", "uintB", "inti", "nti", "indc", "ressba", "interi", " intf", "interc", "interf", "ietf", "interB", "ietc", "indB", "ressc", "indi", "uinti", "ntc", "ntb", "ietb", "intB", "uintc", "intf", "interb", "ntba", "uintb", "ieti", "ressb", "ressi"], "intc": ["intd", " intC", "argC", "Inta", "Intp", "argd", "indb", "argp", "inti", "IntC", "inda", "idb", "indc", "ida", "idi", "idc", "interc", "Intc", "Inti", "intp", "indi", "Intd", "intC", "interb", " intd", "argc", "Intb", " intp", "interC"], "br": ["bl", "div", "ir", "wr", "hr", "rb", "ch", "browser", "tr", "arr", "ar", "jar", "fr", "r", "yr", "bh", "io", "bridge", "bc", "er", "dr", "mr", "handle", "BR", "sp", "bro", "str", "HR", "img", "Br", "abs", "sr", "b", "err", "gr", "org", "reader", "obj", "buf", "ocr", "bb", "cr", "ref", "bar", "Reader"], "strInput": ["STRString", "intText", " strOutput", "STRInput", "intString", "strinput", "StrText", "intInput", "strOutput", " strinput", " strList", "intinput", "Strinput", "STROutput", "STRList", " strString", "StrString", "strText", "strList", "strString", "StrInput", " strText", "StrList", "StrOutput"], "NumList": [" NumPool", "Nilist", " NumLine", "UnitList", "numPost", "numCollection", "NUMRest", "UnitLine", "numPool", "NUMCollection", "NiCollection", "TonObj", " NumObj", "Numlist", "numList", "TuPool", " NumL", "numL", "TuList", "TuCollection", "NumL", "NUML", "NumEx", " NumLayer", "NUMObj", "NiList", "numLayer", "NUMPool", "NUMEx", " NumEx", "NumCollection", "TonList", "numLine", "NUMLine", "numlist", "Unitlist", "NiLine", "NUMList", "NumLine", "UnitCollection", "NUMLayer", "TuLine", "TonRest", "NumObj", "numRest", "TonPost", "numObj", "NumRest", "NumPool", "NumPost", "NumLayer", "numEx", "NUMPost"], "strNumList": ["strNumL", "arrNumString", "strNumberList", "strnumLine", "strStrL", "strStrLine", "strNumSet", "strNUMLine", "arrNumList", "strUnitL", "arrNumLine", "strNUMSet", "strStrSet", "arrStrString", " strnumString", " strnumL", " strStrList", " strStrString", "arrStrLine", " strNumString", "strNumberString", "strStrString", "strUnitLine", " strnumList", "strNumLine", "strnumL", "arrStrList", "strUnitString", "strNumString", " strStrLine", "arrStrSet", "strNumberSet", "strNUMString", " strStrL", "strStrList", "strUnitList", " strnumLine", "arrNumSet", "strnumList", "strnumString", "strNumberLine", "strNUMList", " strNumLine", "strNumberL", " strNumL"], "i": ["bi", "hi", "ic", "pi", "ori", "ni", "iu", "p", "slice", "u", "id", "one", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "l", "a", "data", "is", "ri", "io", "info", "z", "abi", "length", "f", "ci", "ui", "c", "key", "ini", "index", "eni", "m", "x", "phi", "uri", "di", "ip", "e", "I", "ie", "ai", "o", "gi", "d", "mi", "inner", "ii", "b", "ish", "zi", "li", "j", "oi", "yi", "in", "y", "ti", "fi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sn = new Scanner(System.in);\\n        \\n        int s = sn.nextInt();\\n        int w = sn.nextInt();\\n        \\n        if(s <= w) {\\n            System.out.print(\"unsafe\");\\n            return;\\n        }\\n        \\n        System.out.print(\"safe\");\\n    }\\n}\\n", "target": "177", "substitutes": {"sn": ["nn", "sk", "sf", "SN", "na", "ser", "serv", "ln", "ss", "si", "i", "cn", "bis", "sv", "syn", "ski", "nl", "sw", "nr", "inter", "fn", "conn", "sl", "inn", "eni", "st", "sq", "sen", "Sn", "ssl", "kn", "n", "ns", "sr", "nw", "util", "cli", "se", "nb", "su", "sb", "sm", "sc", "sync"], "s": ["aws", "S", "ts", "p", "size", "ins", "ss", "ks", "v", "si", "i", "sh", "l", "a", "es", "is", "ls", "ws", "sites", "ips", "ens", "bytes", "h", "ps", "f", "south", "rows", "os", "states", "ds", "c", "e", "sq", "ses", "o", "d", "n", "ns", "b", "services", "se", "sym", "sb", "xs", "sync"], "w": ["aw", "wp", "p", " W", "u", "wal", "v", "fw", "l", "wed", "ws", "z", "win", "h", "sw", "f", "width", "wx", "m", "x", "rw", "kw", "e", "ww", "q", "wt", "o", "d", "hw", "n", "g", "ow", "b", "ew", "wa", "k", "y", "wb", "we", "W", "t"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner t = new Scanner(System.in);\\n        \\n        int n = t.nextInt();\\n        int x = t.nextInt();\\n        int d[] = new int[n+1];\\n        d[0] = 0;\\n        for (int i = 0; i < n; i++) {\\n            int y = t.nextInt();\\n            d[i+1] = d[i]+y;\\n        }\\n        int count = 0;\\n        for (int i = 0; i <= n; i++) {\\n            if (d[i] <= x){\\n                count++;\\n            }\\n        }\\n        System.out.println(count);\\n    }   \\n}", "target": "130", "substitutes": {"t": ["this", "ut", "te", "ts", "nt", "trans", "p", "it", "u", "qt", "tc", "v", "unt", "the", "l", "tty", "r", "iter", "h", "ft", "utils", "f", "er", "s", "c", "m", "at", "w", "e", "T", "text", "pt", "o", "wt", "g", "rot", "b", "se", "att", "in", "tree", "prot", "bot", "txt", "tt", "rt", "parser", "out", "ant", "tf"], "n": ["nn", "nc", "nt", "p", "size", "u", "num", "N", "ln", "v", "l", "sn", "r", "z", "h", "nr", "len", "f", "s", "c", "ne", "m", "w", "e", "o", "ns", "b", "network", "nb", "j", "net", "k", "no", "in", "number", "en"], "x": ["dx", "p", "size", "u", "id", "xi", "ex", "v", "ix", "l", "cross", "z", "h", "f", "c", "index", "m", "w", "e", "xx", "q", "o", "b", "j", "k", "xs", "in", "number", "X"], "d": ["sd", "ded", "p", "dict", "dn", "id", "u", "did", "v", "a", "l", "data", "dat", "start", "z", "dr", "f", "fd", "s", "dc", "c", "ds", "index", "m", "dos", "done", "di", "e", "o", "md", "dd", "ld", "b", "dim", "dy", "dt", "j", "in", "D", "cd", "da", "ind"], "i": ["hi", "bi", "on", "pi", "api", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "a", "mini", "data", "ri", "r", "uli", "io", "init", "z", "info", "abi", "f", "ci", "c", "ui", "ini", "key", "index", "eni", "phi", "mu", "uri", "disk", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "ii", "b", "li", "j", "oi", "in", "my", "ti", "fi"], "y": ["p", "u", "sy", "xi", "oy", "v", "vy", "ix", "l", "a", "Y", "start", "z", "h", "ny", "f", "c", "m", "w", "e", "o", "b", "ish", "dy", "ii", "year", "yy", "j", "yi", "xy", "ey", "cy", "xx"], "count": ["counter", "total", "parent", "offset", "nt", "Count", "size", "more", "id", "num", "allow", "keep", "line", "pool", "part", "start", "info", "len", "length", "last", "c", "sum", "key", "order", "weight", "index", "depth", "list", "base", "col", "left", "code", "b", "limit", "loop", "ignore", "time", "child", "found", "type", "level", "number", "error", "ind", "coll"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] ags) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tArrayList<String> list = new ArrayList<>\\n\t\t(Arrays.asList(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"\\n\t\t\t\t,\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"));\\n\t\tString str = sc.next();\\n\t\tint n = list.indexOf(str);\\n\t\tSystem.out.println(list.get(n+1));\\n\t}\\n}", "target": "150", "substitutes": {"ags": ["ars", "agents", " line", "filename", "name", " arg", " tags", "ag", "tag", "lines", "params", " flags", "arg", "config", "cfg", "gs", "command", " cmd", "Args", "att", "txt", "ids", " chars", "options", "tags"], "sc": ["cl", "mc", "nc", "sci", "scope", "pc", "ch", "sec", " SC", "si", "sub", "asc", "search", "Sc", "SC", "exp", "cs", "bc", "sw", "src", "desc", "ci", "c", "sp", "config", "acc", "system", "uc", "g", "ca", "se", "ner", " Sc", "scan", "isc", "osc", "rc", "cc", "cr", "spec", "ec", "esc"], "list": ["cl", "bl", "see", "chain", "live", "p", "record", "test", "null", "table", "queue", "server", "view", "listed", "v", "yet", "i", "l", "pool", "pre", "name", "entry", "lp", "index", "x", "base", "string", "left", "set", "result", "cli", "loop", "li", "LIST", "sequence", "tree", "log", "lists", "we", "batch", "out", "array", "coll"], "str": ["div", "wr", "id", "next", "tr", "pr", "arr", "strings", "line", "STR", "data", "fr", "r", "z", "iter", "cs", "f", "er", "br", "s", "sl", "c", "m", "sp", "e", "st", "string", "kr", "stri", "code", "Str", "g", "sr", "err", "ress", "j", "obj", "in", "cr", "spec", "out"], "n": ["nn", "nc", "on", "nt", "p", "adj", "u", "nor", "num", "nu", "ln", "N", "i", "l", "sn", "r", "un", "h", "nr", "z", "nl", "f", "fn", "conn", "c", "ne", "index", "m", "x", "e", "o", "d", "g", "b", "nb", "j", "k", "pos", "no", "t"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = Integer.parseInt(sc.next());\\n        int b = Integer.parseInt(sc.next());\\n        int ans;\\n        if(a > b) {\\n            ans = a;\\n            a--;\\n        }else {\\n            ans = b;\\n            b--;\\n        }\\n        if(a > b) {\\n            ans += a;\\n            a--;\\n        }else {\\n            ans += b;\\n            b--;\\n        }\\n        System.out.println(ans);\\n        \\n    }\\n}", "target": "75", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "scope", "pc", "na", "ser", "com", "ch", "tc", "ss", "sec", " SC", "cur", "sh", "Sc", "SC", "bc", "cs", "src", "lc", "ci", "cer", "c", "or", "sp", "uc", "soc", "ca", "se", "ner", " Sc", "reader", "anc", "ocr", "scan", "parse", "osc", "rc", "cc", "cr", "sch", "parser", "spec", "ec", "esc", "cus"], "a": ["all", "aw", "api", "p", "ia", "na", "u", "ad", "auto", "ba", "i", "ar", "ap", "aa", "A", "oa", "pa", "f", "au", "c", "ga", "ak", "m", "an", "x", "at", "sa", "e", "ae", "ai", "alpha", "o", "d", "af", "n", "ca", "ac", "j", "k", "aaa", "fa", "art", "as", "la", "y", "area", "da", "ab", "asa", "am", "va", "aj"], "b": ["fb", "bi", "api", "p", "mb", "u", "pb", "abb", "rb", "ad", "binary", "v", "ba", "i", "l", "db", "cb", "ib", "bf", "bh", "aa", "be", "h", "lb", "bc", "gb", "bs", "eb", "f", "s", "c", "ga", "an", "x", "base", "e", "o", "big", "d", "n", "g", "B", "body", "nb", "j", "sb", "bb", "bot", "y", "as", "ab", "ob", "t", "bp"], "ans": ["ams", "ana", "acts", "sk", "ars", "blocks", "vers", "aned", "na", "ads", "ases", "errors", "ins", "nan", "aus", "ks", "span", "anon", "lan", "aces", "asts", "acs", "vals", "atan", "ions", "reads", "ls", "eps", "olds", "cs", "ians", "man", "lines", "vs", "nas", "os", "cas", "ds", "ants", "an", "books", "cons", "ANS", "ents", "ns", "ca", "ras", "ats", "anc", "lang", "ids", "outs", "comments", "ons", "aning", "amps", "ays", "can", "ann"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint d[];\\n\t\td = new int[100]; \\n\t\tfor(int i=0;i<m;i++)\\n\t\t{\\n\t\t\tint a = sc.nextInt();\\n\t\t\tint b = sc.nextInt();\\n\t\t\td[a]++;\\n\t\t\td[b]++;\\n\t\t}\\n\t\tfor(int i=1;i<=n;i++)\\n\t\t\tSystem.out.println(d[i]);\\n\t}\\n}\\n", "target": "57", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "class", "ser", "ch", "tc", "ss", "sec", "server", " SC", "cur", "asc", "sh", "l", "fc", "Sc", "SC", "con", "bc", "cs", "sw", "app", "src", "cor", "cv", "lc", "ci", "loc", "c", " scr", "sp", "system", "text", "uc", "soc", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "coll", "ec", "esc", "ctx", "cus", "sync"], "n": ["nn", "nc", "nt", "p", "u", "N", "v", "l", "init", "z", "len", "f", "s", "c", "w", "x", "e", "o", "ns", "nb", "j", "k", "mn", "number", "y", "en", "t"], "m": ["mc", "p", "u", "num", "M", "v", "l", "mm", "r", "z", "h", "f", "cm", "c", "w", "x", "an", "e", "o", "md", "mi", "g", "dim", "j", "k", "hm", "mn", "y", "t"], "d": ["sd", "ded", "p", "dn", "dict", "u", "id", "did", "ad", "v", "out", "data", "db", "l", "dh", "pd", "dat", "dash", "z", "f", "fd", "s", "c", "dc", "ds", "dos", "x", "done", "e", "di", "q", "o", "md", "dd", "g", "dom", "dim", "dy", "ld", "dl", "dt", "j", "k", "in", "D", "digit", "da", "t"], "i": ["bi", "hi", "pi", "ni", "iu", "p", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "l", "mini", "diff", "io", "init", "info", "z", "abi", "f", "ci", "c", "ui", "ini", "index", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "mi", "inner", "ii", "li", "j", "oi", "in", "y", "ti"], "a": ["p", "u", "ad", "ba", "aa", "z", "A", "oa", "pa", "f", "s", "c", "an", "x", "sa", "e", "ae", "ai", "o", "ca", "ac", "j", "k", "fa", "y", "as", "ab", "da", "va", "aj"], "b": ["fb", "bi", "p", "mb", "u", "rb", "v", "ba", "l", "r", "aa", "be", "z", "h", "lb", "bs", "f", "eb", "s", "c", "e", "o", "B", "body", "j", "sb", "bot", "y", "wb", "ab", "ob", "bp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner scanner = new Scanner(System.in); \\n\t\tint a = Integer.parseInt(scanner.next());\\n\t\tif(a<=3){\\n\t\t\tSystem.out.println(\"1\");\\n\t\t\treturn;\\n\t\t}\\n\t\t\\n\t\tint maxBeki=0;\\n\t\tint i =0;\\n\t\tint j =0;\\n\t\tfor(i=2;;i++){\\n\t\t\tint maxBekiLine=0;\\n\t\t\tint tmpBekiLine=i;\t\t\t\\n\t\t\tfor(j=2;;j++){\\n\t\t\t\ttmpBekiLine =tmpBekiLine*i; \\n\t\t\t\tif(tmpBekiLine>a){\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tmaxBekiLine=tmpBekiLine;\\n\t\t\t}\t\t\t\\n\t\t\t\\n\t\t\tif(maxBekiLine>maxBeki){\\n\t\t\t\tmaxBeki = maxBekiLine;\\n\t\t\t}\\n\t\t\tif(j==2){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(maxBeki);\t\t\\n\t}\\n}\\n", "target": "143", "substitutes": {}}
{"code": "import java.math.BigDecimal;\\nimport java.math.RoundingMode;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String[] lines = sc.nextLine().split(\" \");\\n        long num1 = Integer.parseInt(lines[0]);\\n        long num2 = Integer.parseInt(lines[1]);\\n\\n        long ans1 = num1 / num2;\\n        long ans2 = num1 % num2;\\n        double ans3 = (double)num1 / (double)num2;\\n\\n        System.out.println(ans1 + \" \" + ans2 + \" \" + String.format(\"%.9f\", ans3));\\n\\n\\n    }\\n}", "target": "90", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "sf", "scope", "pc", "ch", "sec", "ss", " SC", "asc", "sh", "Sc", "SC", "bc", "cs", "sw", "src", "desc", "cor", "lc", "ci", "s", "c", "sp", "str", "uc", "sr", "se", "ner", "anc", "sb", "scan", "osc", "rc", "cc", "sch", "parser", "spec", "ec", "esc", "cus", "sync"], "lines": ["points", "groups", "breaks", "blocks", "ines", "plugins", "lins", "ins", "ks", "split", "cells", "elines", "strings", "line", "l", "qs", "data", "lin", "rules", "ls", "pages", "its", "bytes", "los", " Lines", "rows", "s", "liners", "years", "words", "codes", "pins", "users", "files", "shows", "objects", "values", "in", "items", "ids", "runs", "letters", "Line", "posts"], "num1": [" num9", " num0", "um0", "sumone", "en0", "enone", "sum9", "sum1", "um9", "num4", "en1", "len01", "num01", "sum0", " num4", " num01", "um2", "umone", "sum2", "num9", "len1", "dim1", "um1", "lenone", "numone", "en01", "um01", "dim4", "num0", "dim01", "sum4", "dim2", " numone", "sum01"], "num2": ["minTwo", "umtwo", "numberTwo", "sum02", " numTwo", "sum1", "num02", "number32", "con82", " numtwo", "min2", "sum82", " num02", "num4", "inc4", "con2", "dim02", "con1", "no2", "sum0", "no4", "um2", "umTwo", "sum2", "inctwo", "numtwo", "dim1", "notwo", "um4", " num3", "num32", "incTwo", "number2", "numbertwo", "sum3", "inc2", "num0", "noTwo", "con0", "num3", "mintwo", "numTwo", "long2", " num32", "dim3", "dim2", "min32", "long0", "long1", "num82", "long82"], "ans1": ["lang3", "versOne", "annone", "an2", "langOne", "ann3", "ns3", "vers1", "ansone", "an3", "anOne", "an1", "versone", "vers3", "ann2", "ns2", "ansOne", "anone", "lang1", "ns1", "ann1", "nsone", "langone"], "ans2": ["ens1", "annTwo", "lang2", "anon2", "an2", "ans82", "ens2", "ansb", "anon1", "an1", "ens62", "ensb", "ann2", "anb", "anonTwo", "ans62", "ann62", "annb", "lang1", "lang82", "an62", "ann82", "ann1", "langTwo", "ansTwo", "anon82"], "ans3": [" sins03", " ans6", "ann03", " ans03", "an2", "ann3", "alpha2", "ans6", " sins3", "ann6", "an3", "an1", "ann2", "ansthree", "anthree", "alpha3", "alpha1", " sins6", " sins1", "ann1", "annthree", "alphathree", "ans03"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner scan = new Scanner(System.in);\\n        String S = scan.nextLine();\\n        String T = scan.nextLine();\\n        char[] yohou = S.toCharArray();\\n        char[] tenki = T.toCharArray();\\n        int ans=0;\\n        for(int i=0;i<3;i++) {\\n            if(yohou[i]==tenki[i]){\\n                ans++;\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "243", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tstatic int[] S ;\\n\tpublic static void main(String[] args) throws Exception {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString W = in.readLine();\\n\\n\t\tlong N = Long.parseLong(W);\\n\\n\t\tlong ans = N-1;\\n\t\tdouble sq = Math.sqrt(N);\\n\t\tlong i = (long)sq;\\n\\n\t\tfor(;i>0;i--){\\n\t\t\tif(N%i==0){\\n\t\t\t\tans = Math.min(ans, i+N/i-2);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "157", "substitutes": {"S": ["SI", "unit", "second", "C", "service", "N", "STR", "sort", "P", "src", "SIZE", "session", "s", "params", "instance", "send", "save", "I", "L", "object", "services", "sym", "V", "parse", "file", "array"]}}
{"code": "import java.util.*;\\nimport java.lang.Math;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    \\n   \tint num = sc.nextInt();\\n    int ans = 0;\\n    \\n    ans = 1000*(num/500);\\n    num %= 500;\\n    ans += num - num%5;\\n    \\n    System.out.println(ans);\\n\\n  }\\n}\\n", "target": "180", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "scope", "pc", "sec", "ss", " SC", "asc", "sh", "Sc", "SC", "cb", "bc", "cs", "sw", "src", "lc", "ci", "c", "cer", " scr", "sp", "acc", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "scan", "osc", "rc", "cc", "cr", "ec", "esc", "cus", "sync"], "num": ["nn", "um", "all", "total", "offset", "nc", "unit", "conf", "Num", "nt", "ni", "count", "cat", "size", "mon", "id", "na", "nu", "multi", "om", "span", "i", "cu", "name", "con", "init", "iter", "un", "len", "end", "f", "loc", "conn", "sum", "ne", "index", "an", "umi", "text", "min", "max", "common", "skip", "nom", "n", "ns", "dim", "nb", "pos", "su", "anc", "net", "no", "in", "norm", "mn", "bin", "non", "number", "inc", "NUM", "en", "out", "anch"], "ans": ["nn", "ana", "acts", "sk", "ars", "vers", "aned", "AN", "oss", "na", "errors", "ins", "nan", "ln", "ks", "span", "ss", "lan", "aus", "aces", "acs", "offs", "ions", "ls", "anges", "eps", "ens", "cs", "len", "ians", "lines", "s", "os", "ms", "cas", "ds", "nas", "chan", "ants", "an", "cons", "cus", "ANS", "anes", "n", "ns", "ents", "ras", "ats", "anc", "outs", "ons", " scans", "amps", "can", "ann"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    sc.useDelimiter(\",|\\n\");\\n\\n    int w=sc.nextInt();\\n    int string[] = new int[w];\\n\\n    for(int i=0; i<w; i++) string[i] = i+1;\\n\\n    int n=sc.nextInt();\\n    int a[] = new int [n];\\n    int b[] = new int [n];\\n    int times=0;\\n    int chg=0;\\n\\n    while(times<n){\\n      a[times]=sc.nextInt();\\n      b[times]=sc.nextInt();\\n\\n      chg=string[(a[times]-1)];\\n      string[(a[times]-1)]=string[(b[times]-1)];\\n      string[(b[times]-1)]=chg;\\n\\n      times++;\\n    }\\n\\n    for(int i=0; i<w; i++) System.out.println(string[i]);\\n  }\\n}\\n\\n", "target": "156", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "ser", "com", "ch", "tc", "ss", " SC", "cur", "asc", "sh", "Sc", "SC", "ct", "screen", "cs", "bc", "sw", "cv", "cor", "src", "lc", "loc", "dc", "c", " scr", "sp", "ec", "system", "sq", "uc", "ca", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "proc", "out", "esc", "cus", "sync"], "w": ["aw", "wp", "p", "u", "v", "fw", "l", "win", "z", "h", "sw", "f", "width", "iw", "c", "t", "wn", "weight", "m", "x", "kw", "e", "ww", "max", "q", "wt", "d", "tw", "hw", "nw", "g", "wa", "work", "k", "time", "wall", "y", "wb", "we", "W", "wl", "wh", "window"], "string": ["div", "union", "single", "complete", "function", "space", "message", "integer", "database", "slice", "null", "buffer", "service", "character", "date", "v", "filename", "strings", "version", "escape", "STR", "data", "name", "value", "source", "row", "input", "length", "char", "resource", "letter", "pair", "strip", "wave", "list", "base", "str", "text", "comment", "result", "object", "ring", "field", "time", "expression", "serial", "sequence", "file", "group", "number", "word", "support", "address", "area", "basic", "section", "match", "variable", "array", "window"], "i": ["bi", "hi", "pi", "ni", "p", "iu", "it", "u", "id", "multi", "qi", "xi", "v", "si", "ix", "l", "mini", "is", "name", "ik", "diff", "ri", "start", "io", "init", "info", "z", "f", "ci", "ui", "ini", "c", "index", "eni", "phi", "x", "m", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "inner", "mi", "d", "ii", "li", "j", "k", "yi", "in", "chi", "y", "t", "ti"], "n": ["nn", "nc", "nt", "ni", "p", "u", "num", "nu", "N", "ln", "v", "cn", "l", "sn", "r", "z", "h", "len", "f", "s", "c", "ne", "m", "x", "nin", "an", "e", "o", "d", "g", "ns", "nb", "j", "k", "no", "number", "y", "en", "t"], "a": ["p", "ia", "u", "na", "ba", "l", "r", "mA", "aa", "A", "aj", "oa", "pa", "f", "au", "s", "c", "an", "x", "sa", "e", "ae", "ea", "ai", "o", "alpha", "af", "g", "ca", "ac", "qa", "sta", "ama", "fa", "as", "la", "asa", "area", "ab", "da", "ma", "am", "va", "array"], "b": ["fb", "ub", "p", "mb", "u", "rb", "v", "ba", "l", "ib", "db", "r", "bf", "lb", "book", "gb", "bs", "f", "eb", "br", "s", "lib", "c", "x", "base", "e", "o", "d", "g", "B", "nb", "j", "k", "sb", "bb", "beta", "bd", "y", "ab", "ob", "bp"], "times": ["points", "groups", "acts", "works", "months", "ts", "checks", "Times", "blocks", "features", "yrs", "places", "ins", "hours", "tc", "ks", "rs", "cells", "xes", "qs", "series", "reads", "ls", "pages", "sites", "dates", "its", "exp", "cs", "results", "types", "ps", "icks", "imes", "lines", "rows", "ms", "s", "tests", "cycles", "itions", "uses", "words", "acks", "ops", "ways", "books", "files", "events", "tracks", "days", "cases", "ports", "shows", "values", "styles", "time", "ones", "ids", "runs", "outs", "steps", "ths"], "chg": ["shgb", "chgb", " chgi", "ichgi", "chgs", "shyg", "chergi", "cherga", "ichgy", " chyg", " chga", "chga", " chrg", "chyg", "chergy", "chgn", " chgm", " chgn", "chergn", " chgs", "shgs", "chergb", " chgb", "chrg", "cherg", "ichgn", "cheryg", "cherrg", "chergm", "ichga", "ichg", "ichgm", "chgy", "ichrg", "shg", "chergs", " chgy", "chgi", "chgm"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tlong a=sc.nextLong();\\n\t\tlong b=sc.nextLong();\\n\t\tlong k=sc.nextLong();\\n\t\tif(a>=k){\\n\t\t\tSystem.out.println(a-k+\" \"+b);\\n\t\t}else{\\n\t\t\tlong p=Math.max((b-(k-a)),0);\\n\t\t\tSystem.out.println(0+\" \"+p);\\n\t\t}\\n\t}\\n}\\n", "target": "128", "substitutes": {"sc": ["sche", "mc", "sci", "nc", "enc", "scope", "pc", "core", "com", "ch", "tc", "ss", "sec", " SC", "cur", "asc", "sh", "search", "Sc", "SC", "ct", "cs", "bc", "sw", "cv", "cor", "src", "lc", "ci", "s", "c", "cer", "sp", "acc", "sq", "system", "uc", "ca", "se", "ner", " Sc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "sch", "ec", "esc", "ctx", "cus", "sync"], "a": ["ka", "u", "na", "ad", "ba", "i", "l", "r", "aa", "A", "oa", "pa", "f", "au", "c", "ga", "ak", "m", "an", "x", "w", "sa", "ae", "ada", "e", "ai", "alpha", "d", "af", "n", "ca", "ac", "fa", "y", "la", "as", "area", "ab", "da", "am", "va"], "b": ["u", "pb", "rb", "ad", "v", "i", "ba", "l", "ib", "cb", "r", "bf", "aa", "z", "h", "lb", "bs", "f", "eb", "pa", "c", "ga", "x", "base", "e", "o", "d", "n", "B", "nb", "j", "sb", "bb", "y", "ab", "bp"], "k": ["ky", "sk", "ka", "u", "ko", "ck", "ad", "ke", "ks", "v", "i", "l", "kk", "ik", "z", "h", "dk", "f", "ok", "c", "key", "ak", "m", "w", "x", "kw", "e", "max", "q", "d", "n", "kn", "ac", "kid", "j", "K", "y", "ki"], "p": ["py", "pi", "pc", "u", "pb", "pr", "jp", "v", "ap", "l", "pre", "point", "ep", "r", "h", "P", "cp", "pa", "ps", "c", "m", "np", "e", "ip", "per", "pl", "fp", "q", "o", "op", "d", "n", "g", "vp", "pn", "tp", "pp", "t", "bp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\t\t\\n\t\tString s [] = S.split(\"/\");\\n\t\t\\n\t\t\\n\t\tif (s[0].equals(\"2019\")!=true)\\n\t\t\tSystem.out.println(\"Heisei\");\\n\t\t\\n\t\telse {\\n\t\t\tif (s[1].equals(\"01\") || s[1].equals(\"02\") || s[1].equals(\"03\") || s[1].equals(\"04\"))\\n\t\t\t\tSystem.out.println(\"Heisei\");\\n\t\t\telse\\n\t\t\t\tSystem.out.println(\"TBD\");\\n\t\t}\\n\t\tsc.close();\\n\\n\t}\\n\\n}\\n", "target": "163", "substitutes": {"sc": ["cl", "sci", "nc", "sf", "scope", "pc", "class", "ch", "server", "ss", "sec", "tc", " SC", "cur", "asc", "l", "Sc", "SC", "con", "cs", "bc", "src", "lc", "c", "cer", "sp", "ec", "system", "sq", "uc", "soc", "sem", "se", "ner", "anc", "scan", "osc", "rc", "cr", "sch", "parser", "proc", "out", "esc", "sync"], "S": ["SI", "SS", "SL", "SN", "IS", "Sample", "TS", "C", "SB", "N", "M", "Summary", "RS", "SE", "U", "SU", "SC", "SH", "GS", "Si", "F", "SA", "P", "A", "BS", "SM", "SO", "T", "I", "L", "R", "B", "V", "NS", "DS", "SD"], "s": ["ts", "p", "u", "ins", "ss", "v", "i", "strings", "l", "a", "es", "is", "bis", "ls", "ws", "r", "its", "fs", "h", "ps", "f", "lines", "south", "sl", "c", "tests", "os", "ds", "side", "words", "m", "an", "x", "parts", "ops", "e", "ssl", "string", "ses", "o", "abs", "d", "plus", "n", "ns", "g", "b", "sets", "gs", "se", "su", "js", "sb", "in", "y", "ans", "t", "qs", "sync"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {  \\n  \t\tScanner sc = new Scanner(System.in);\\n\t\tString n = sc.next();\\n      \tchar[] ary = new char[n.length()];\\n      \t\\n      \tfor(int i = 0; i < n.length(); i++) {\\n         \tary[i] = n.charAt(i); \\n          \t\\n          \tif(ary[i] == '1') {\\n\t            ary[i] = '9';\\n            } else if(ary[i] == '9') {\\n            \tary[i] = '1';\\n            }\\n        \tSystem.out.print(ary[i]);\\n        }\\n    }\\n}", "target": "111", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "nt", "scope", "pc", "na", "ch", "sec", "ss", " SC", "sub", "asc", "sh", "search", "Sc", "SC", "iss", "bc", "cs", "sw", "desc", "src", "lc", "s", "c", "cer", "sp", "acc", "system", "uc", "se", "ner", " Sc", "ocr", "anc", "scan", "osc", "rc", "cc", "cr", "spec", "esc", "sync"], "n": ["nn", "none", "rn", "enc", "initial", "p", "dn", "null", "na", "u", "next", "nan", "ln", "N", "anon", "v", "cn", "l", "sn", "name", "r", "f", "fn", "conn", "s", "c", "inn", "ne", "m", "np", "e", "string", "node", "o", "ns", "nw", "b", "object", "net", "in", "not", "non", "y", "gn", "en", "out", "ann"], "ary": ["arc", "buffer", "prefix", "hello", "na", "next", "aries", "sky", "reference", "server", "binary", "arr", "si", "ARY", "ar", "bare", "request", "adr", "cross", "iter", "info", "are", "ear", "cor", "dr", "air", "inter", "er", "ay", "pair", "external", "key", "pointer", "broad", "index", "list", "coord", "vector", "system", "string", "ry", "inf", "aria", "card", "ray", "rr", "ner", "secondary", "aro", "arial", "type", "early", "number", "rx", "address", "area", "bar", "ref", "ror", "square", "ery", "error", "primary", "default", "arity", "array"], "i": ["bi", "hi", "api", "pi", "ori", "p", "iu", "slice", "u", "id", "it", "multi", "qi", "ei", "xi", "ji", "v", "si", "ix", "l", "data", "uni", "is", "ri", "uli", "start", "io", "init", "h", "z", "abi", "info", "attr", "f", "lc", "ci", "s", "c", "ui", "key", "ini", "index", "m", "eni", "x", "mu", "uri", "phi", "e", "di", "I", "ai", "o", "gi", "d", "ii", "b", "cli", "li", "j", "oi", "in", "chi", "y", "t", "ti", "fi"]}}
{"code": "import java.util.*;\\nclass Main{\\n    Scanner sc=new Scanner(System.in);\\n    void main(){\\n\tint w=sc.nextInt();\\n\tint h=sc.nextInt();\\n\tint x=sc.nextInt();\\n\tint y=sc.nextInt();\\n\tint r=sc.nextInt();\\n\tString ans=\"Yes\";\\n\tif(x-r<0||x+r>w||y-r<0||y+r>h)ans=\"No\";\\n\tSystem.out.println(ans);\\n    }\\n    public static void main(String[]ag){\\n\tnew Main().main();\\n    }\\n}", "target": "171", "substitutes": {"sc": ["cl", "sche", "mc", "nc", "sci", "sf", "scope", "pc", "na", "ch", "tc", "ss", " SC", "cur", "asc", "Sc", "SC", "con", "screen", "exp", "bc", "cs", "sw", "cv", "cor", "src", "lc", "ci", "s", "c", " scr", "acc", "sq", "uc", "soc", "cli", "ca", "se", "ner", " Sc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "coll", "cam", "esc", "ctx", "cus", "sync"], "w": ["p", "u", "v", "i", "fw", "l", "a", "ws", "win", "z", "end", "sw", "f", "width", "s", "c", "wi", "m", "e", "ww", "q", "o", "d", "hw", "n", "g", "nw", "b", "tw", "wa", "we", "W", "t"], "h": ["hi", "p", "he", "u", "hr", "hz", "ch", "gh", "v", "i", "sh", "l", "rh", "bh", "ht", "uh", "ph", "z", "end", "f", "c", "m", "max", "q", "o", "hs", "d", "n", "b", "j", "hm", "hh", "in", "H", "oh", "eh", "th", "t"], "x": ["p", "u", "ex", "v", "i", "ix", "l", "a", "X", "z", "f", "c", "ax", "index", "m", "e", "max", "q", "o", "d", "n", "b", "j", "k", "tx", "xs", "time", "in", "px", "t", "xx"], "y": ["hi", "yo", "py", "p", "u", "ch", "oy", "v", "i", "vy", "ya", "l", "a", "Y", "yt", "yr", "z", "f", "s", "c", "m", "ty", "e", "ry", "o", "q", "d", "n", "g", "b", "dy", "yy", "j", "yi", "cy", "t"], "r": ["ir", "p", "u", "hr", "rb", "rs", "v", "pr", "i", "ar", "l", "lr", "fr", "ur", "ri", "yr", "right", "rh", "z", "nr", "er", "f", "dr", "mr", "c", "m", "or", "e", "ry", "o", "rf", "R", "d", "n", "b", "err", "sr", "rr", "j", "rd", "rc", "t", "re"], "ans": ["ana", "aos", "AN", "ars", "aned", "anned", "vers", "na", "ins", "rans", "aus", "ks", "lan", "aces", "acs", "atan", "ares", "vals", "ls", "eps", "cs", "s", "os", "cas", "ros", "ants", "an", " means", "fts", "cons", " Ans", "ANS", "arts", "flags", "ean", "ents", "ns", "ras", "ats", "anc", "scan", "ones", "outs", "annot", "anners", "ons", "aning", "amps", "annels", "ays", "can", "ann"], "ag": ["enc", "msg", "ts", "ars", "agents", "message", " tag", "arr", "ext", "ar", "lag", " tags", " word", "AG", "tag", "arg", "ags", " pars", "ang", "gs", "ages", "pass", "att", "aps", "sg", "tags", "ig"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString string = sc.next();\\n\t\tint ans=0;\\n\t\tfor(int i=0;i<string.length();i++){\\n\t\t\tans=ans+Integer.parseInt(string.substring(i,i+1));\\n\t\t\tif(ans>=9){ans=ans-9;}\\n\t\t}\\n\t\tif(ans==0){System.out.println(\"Yes\");}\\n\t\telse{System.out.println(\"No\");}\\n\t}\\n}", "target": "93", "substitutes": {"sc": ["cl", "enc", "mc", "sci", "nc", "sf", "scope", "pc", "ch", "sec", "ss", " SC", "sub", "sh", "Sc", "SC", "bc", "desc", "cs", "src", "cor", "ci", "sl", "c", "sp", "str", "acc", "system", "uc", "ca", "se", "ner", " Sc", "anc", "exec", "ocr", "scan", "osc", "rc", "cc", "cr", "spec", "ec", "esc", "cus"], "string": ["ident", "single", "function", "space", "database", "class", "null", "slice", "next", "service", "binary", "thing", "filename", "strings", "line", "data", "series", "name", "source", "stream", "input", "resource", "arrow", "s", "format", "list", "str", "text", "meaning", "result", "object", "ring", "parse", "in", "connection", "sequence", "iterator", "number", "word", "address", "parser", "section", "driver", "array", "strip", "setting"], "ans": ["acts", "sk", "ars", "aned", "vers", "anas", "na", "errors", "ads", "ins", "nan", "ks", "ss", "lan", "aces", "acs", "es", "ions", "reads", "ls", "eps", "anges", "ens", "ips", "rules", "cs", "ians", "lines", "vs", "s", "rows", "cas", "ds", "ants", "ches", "an", "ops", "offs", "cons", "aid", "ANS", "flags", "ents", "ns", "ras", "ats", "faces", "xs", "aps", "ids", "as", "grades", "ons", " scans", "amps", "ays", "can", "ann"], "i": ["bi", "hi", "pi", "ni", "p", "it", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "ri", "r", "start", "io", "z", "h", "info", "end", "f", "ci", "ui", "ini", "c", "index", "at", "m", "x", "eni", "uri", "phi", "di", "ip", "e", "I", "ai", "o", "gi", "d", "n", "ii", "zi", "li", "j", "oi", "k", "in", "chi", "ti"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.stream.IntStream;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.util.InputMismatchException;\\nimport java.io.BufferedReader;\\nimport java.util.OptionalInt;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        TaskB solver = new TaskB();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskB {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int[] a = in.nextIntArray(3);\\n            int k = in.nextInt();\\n\\n            int max = IntStream.of(a).max().getAsInt();\\n            int sum = IntStream.of(a).sum();\\n\\n            long t = (long) Math.pow(2, k) * max;\\n\\n            out.println(sum - max + t);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        BufferedReader in;\\n        StringTokenizer tok;\\n\\n        public String nextString() {\\n            while (!tok.hasMoreTokens()) {\\n                try {\\n                    tok = new StringTokenizer(in.readLine(), \" \");\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n            }\\n            return tok.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(nextString());\\n        }\\n\\n        public int[] nextIntArray(int n) {\\n            int[] res = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                res[i] = nextInt();\\n            }\\n            return res;\\n        }\\n\\n        public InputReader(InputStream inputStream) {\\n            in = new BufferedReader(new InputStreamReader(inputStream));\\n            tok = new StringTokenizer(\"\");\\n        }\\n\\n    }\\n}\\n\\n", "target": "201", "substitutes": {"inputStream": ["readableStream", "outputWriter", "inputSteam", "outputSteam", " inputstream", " inputReader", " inputSteam", "InputSteam", "inputReader", "inputStreamer", "instream", "readableStreamer", "Inputstream", "InputReader", "inStreamer", "readablestream", "inStream", "inputWriter", "outputStreamer", " inputWriter", "InputStreamer", "readableReader", "InputWriter", "InputStream", "outputReader", "outputstream", "inSteam", "inputstream"], "outputStream": ["outputWriter", "inputSteam", "outputSteam", "inputForm", "outputForm", "OutputStream", "OutputWriter", " outputSteam", " outputView", "outputView", "inputWriter", "OutputView", " outputWriter", "inputView", "OutputSteam", " outputForm", "OutputForm"], "in": ["this", "buffer", "ins", "l", "con", "lin", "r", "init", "info", "win", "get", "o", "inner", "g", "connection", "bin", "inc", "doc", "ic", "on", "id", "din", "url", "line", "data", "name", "io", "input", "In", "f", "conn", "user", "image", "inn", "ini", "index", "str", "socket", "d", "kin", "again", "up", "file", "IN", "cl", "it", "part", "sin", "resource", "gen", "nin", "min", "inf", "rin", "err", "reader", "work", "pin", "log", "rec", "login", "ex", "inside", "path", "is", "request", "source", "c", "arg", "m", "config", "cin", "gin", "ac", "from", "read"], "out": ["parent", "call", "print", "client", "scope", "p", "buffer", "prefix", "table", "to", "ex", "v", "line", "pool", "page", "data", "png", "point", "r", "cmd", "io", "init", "timeout", "input", "temp", "gen", "conn", "outer", "user", "report", "down", "output", "OUT", "w", "x", "list", "process", "socket", "writer", "string", "problem", "Out", "o", "inner", "err", "again", "write", "net", "exec", "up", "connection", "obj", "log", "group", "bin", "outs", "file", "inc", "off", "doc", "bar", "copy", "cache", "error", "window"], "solver": ["statesistor", "statesolving", "solving", "setsistor", "ssolving", "sistor", "ssolve", "Solver", "unsolver", "setsolving", "ssolver", "ssistor", "ssolution", "solve", "statesolve", "solution", "Solution", "statesolver", "Solving", "unsolving", "Solve", "setsolve", "unsolve", "setsolver", "unsolution"], "testNumber": ["TestNumber", "exampleIndex", "examplenumber", "exampleNumber", "testnumber", "TestNum", "exampleNum", " testnumber", "Testnumber", "TestIndex", " testNum", " testIndex", "testNum", "testIndex"], "a": ["p", "na", "u", "ad", "access", "auto", "ba", "aa", "A", "ha", "aj", "oa", "pa", "aux", "app", "s", "c", "ga", "m", "an", "action", "x", "sa", "ea", "aka", "alpha", "d", "b", "ca", "ac", "as", "la", "asa", "area", "y", "da", "missing", "ma", "am", "va", "array"], "k": ["sk", "count", "p", "u", "id", "num", "ad", "ks", "v", "kick", "h", "f", "ok", "c", "key", "ak", "m", "w", "x", "e", "kw", "q", "o", "d", "g", "b", "kid", "j", "K", "y"], "max": ["head", "all", "div", "total", "conf", "cat", "count", "p", "now", "size", "u", "map", "ad", "v", "auto", "sh", "power", "diff", "right", "h", "len", "end", "first", "length", "last", "c", "ax", "key", "cent", "m", "w", "x", "mad", "st", "rand", "q", "min", "d", "Max", "rank", "shift", "b", "limit", "plus", "se", "work", "top", "scale", "mod", "mean", "MAX", "shape", "da", "mult"], "sum": ["all", "um", "div", "total", " total", "count", "p", "size", "u", "volume", "cost", "num", "v", "average", "add", "sub", "sh", "vol", "sign", "diff", "std", "con", "use", "h", "spread", "co", "len", "cal", "f", "s", "c", "ax", "weight", "m", "w", "x", "cum", "rand", "min", "alpha", "rank", "Sum", "g", "se", "norm", "net", "parse", "scale", "mod", "mean", " sums", "th", "dot", "mult"], "t": ["ot", "total", "ts", "p", "u", "tc", "tu", "v", "l", "r", "z", "h", "f", "s", "c", "m", "w", "tm", "x", "ty", "e", "T", "ta", "q", "d", "g", "b", "dt", "j", " tot", "y", "tt", "tf"], "tok": ["Tot", "ttok", "intoken", "poken", "attok", "Tod", "Tock", "intak", "toks", "pod", "Tak", "attak", "ttoks", " toks", "Tok", "tak", "Toks", "Token", "itoken", "itoks", "tot", "tod", "itak", "ttot", "intok", "token", " tak", "ttoken", "ttak", "attod", "pak", "attoks", "pok", "tock", "ttock", " tot", " tock", "poks", "intoks", "itok"], "n": ["count", "p", "size", "u", "num", "N", "v", "l", "sn", "r", "z", "h", "len", "f", "s", "c", "m", "w", "x", "e", "q", "o", "d", "g", "ns", "b", "nb", "j", "net", "no", "number", "y", " N"], "res": ["blocks", "rez", "rus", "val", "pres", "rs", "arr", "fields", "vals", "data", "es", "rem", "r", "cs", "results", "ps", "RES", "vs", "params", "ms", "Rs", "ros", "rows", "os", "us", "cons", "Results", "resp", "rev", "pers", "result", " results", "err", "details", "ras", "ress", "ries", "values", "js", "ret", "ids", "ris", "Res", "ons", "nos", "resolution", "resh", "re"], "i": ["bi", "hi", "pi", "ni", "p", "it", "u", "id", "qi", "xi", "v", "si", "ix", "mini", "ri", "uli", "start", "init", "h", "info", "z", "f", "ci", "ui", "c", "key", "index", "m", "phi", "x", "ip", "e", "di", "I", "min", "ai", "o", "gi", "d", "mi", "inner", "ii", "b", "li", "j", "oi", "chi", "y", "my", "ti", "fi"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author srikanth\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        abc174_b solver = new abc174_b();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class abc174_b {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int n = in.nextInt();\\n            int d = in.nextInt();\\n            int count = 0;\\n\\n            while (n-- > 0) {\\n                double x = in.nextInt();\\n                double y = in.nextInt();\\n\\n                if (Math.sqrt(x * x + y * y) <= d) {\\n                    count++;\\n                }\\n            }\\n            System.out.println(count);\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n//        System.out.println(\"numchars \"+numChars);\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "42", "substitutes": {"inputStream": ["outputWriter", "currentStream", "inputSteam", "outputSteam", " inputstream", "getStream", "currentStreamer", " inputSteam", "InputSteam", "inputStreamer", "getSteam", "Inputstream", "inputWriter", "outputStreamer", " inputWriter", "currentSteam", "currentstream", "getstream", "InputWriter", "InputStream", "getStreamer", "outputstream", "inputstream"], "outputStream": ["outputWriter", "inputSteam", "outputSteam", "inputForm", "outputForm", "inputFile", " outputPath", "InputSteam", "OutputStream", "OutputWriter", " outputSteam", "OutputFile", "outputFile", " outputFile", "OutputPath", "inputWriter", "outSteam", "outStream", "inputPath", "InputWriter", " outputWriter", "InputStream", "OutputSteam", " outputForm", "OutputForm", "outputPath", "outWriter"], "in": ["this", "ic", "isin", "id", "login", "ins", "din", "arin", "inside", "i", "version", "url", "line", "l", "a", "data", "is", "name", "lin", "con", "r", "io", "source", "win", "sin", "input", "init", "resource", "In", "er", "gen", "user", "conn", "inn", "ini", "c", "arg", "image", "nin", "config", "cin", "between", "ai", "gin", "inf", "inner", "rin", "cli", "kin", "err", "ac", "again", "reader", "pin", "connection", "from", "bin", "file", "vin", "inc", "IN"], "out": ["this", "counter", "buffer", "size", "exp", "init", "s", "key", "output", "w", "state", "Out", "o", "inner", "sys", "exec", "connection", "group", "bin", "inc", "doc", "copy", "error", "window", "target", "client", "server", "line", "data", "io", "temp", "In", "conn", "user", "report", "list", "plain", "global", "again", "write", "up", "file", "off", "later", "self", "to", "v", "pool", "point", "gen", "sp", "remote", "err", "obj", "net", "work", "log", "cache", "sync", "parent", "ex", "outer", "external", "c", "OUT", "problem", "object", "outs", "lock"], "solver": [" solution", "solving", "ssolve", "unsolver", "setsolving", "Solver", "ssolving", " solving", "ssolver", "Sol", "ssolution", "solve", "solution", "unsol", "Solution", " sol", "setsolution", "Solving", "unsolving", "Solve", "setsolve", "setsolver", "unsolution", "sol"], "testNumber": ["TestNumber", "TestNo", " trialNo", "testnumber", " trialnumber", " trialNumber", "TestNum", " testnumber", "Testnumber", "testNo", " testNum", " trialNum", " testNo", "testNum"], "n": ["nn", "rn", "nc", "nt", "p", "size", "num", "N", "v", "cn", "i", "l", "sn", "name", "z", "nr", "len", "length", "s", "c", "m", "o", "ns", "b", "nb", "j", "k", "non", "number", "en", "t"], "d": ["sd", "dx", "p", "dn", "id", "v", "i", "l", "dh", "data", "a", "z", "f", "dc", "c", "s", "ds", "m", "w", "depth", "e", "md", "dd", "b", "dy", "dl", "dt", "j", "D", "cd", "da", "ind", "t"], "count": ["counter", "total", "offset", "nt", "second", "p", "Count", "size", "now", "id", "num", "keep", "i", "data", "part", "start", "value", "z", "info", "len", "length", "c", "sum", "index", "list", "depth", "carry", "max", "code", "result", "b", "child", "found", "no", "type", "number", "error", "ind", "coll"], "x": ["hi", "dx", "p", "xp", "id", "u", "num", "xi", "ex", "v", "i", "ix", "l", "a", "z", "h", "f", "ci", "c", "ax", "wx", "w", "xx", "xxx", "q", "code", "b", "dy", "k", "xs", "xy", "rx", "px", "xc", "X"], "y": ["ady", "yo", "py", "ky", "gy", "p", "id", "u", "sy", " dy", "oy", "v", "vy", "i", "ya", "ix", "l", "Y", "z", "h", "ny", "f", "ay", "c", "w", "zy", "e", "axy", "ry", "o", "q", "b", "ish", "dy", "yy", "j", "ye", "yi", "xy", "ey", "ery", "cy", "xx"], "writer": ["this", "unit", "draw", "client", "window", "wrapper", "buffer", "wr", "core", "null", "it", "message", "xml", "server", "writers", "Writer", "keep", "wire", "page", "data", "player", "entry", "source", "written", "creator", "ler", "er", "document", "width", "director", "report", "writing", "winner", "key", "format", "output", "w", "rw", "author", "socket", "string", "inner", "with", "ter", "object", "riter", "handler", "reader", "write", "wa", "term", "ee", "writ", "thread", "connection", "master", "type", "log", "file", "worker", "rew", "word", "later", "we", "driver", "script", "cache", "engine", "builder", "close"], "stream": ["client", "seek", "each", "wrapper", "buffer", "message", "size", "queue", "server", "view", "stack", "path", "pool", "draft", "source", "input", "temp", "method", "channel", "resource", "sw", "document", "row", "down", "style", "feed", "model", "output", "w", "socket", "string", "Stream", "context", "ream", "object", "body", "handler", "reader", "form", "host", "response", "thread", "file", "iterator", "level", "port", "transform", "engine", "console", "window"], "buf": ["buff", "seq", "vec", "blocks", "buffer", "queue", "rb", "Buffer", "ba", "pool", "cb", "bc", "cv", "len", "cp", "fam", "fd", "uf", "bag", "cap", "ptr", "alloc", "pos", "flush", "box", "port", "ctx", "mem"], "curChar": ["CurLine", "Curchar", "curLine", "curchar", " curToken", " curLine", "skipchar", "curToken", "CurChar", "skipLine", "CurToken", "skipToken", " curchar", "skipChar"], "numChars": ["numchats", "NumChats", "numCHans", "numCharans", "numChases", "numCHats", "numchars", "Numchases", "numChats", "Numchars", "numCHars", "numchases", "numCHases", "numCharars", "numchans", "numCharats", "numCharases", "NumChars", "Numchats", "NumChases", "Numchans", "numChans", "NumChans"], "filter": ["pattern", "this", "processor", "buffer", "val", "null", "class", "map", "pool", "Filter", "block", "f", "format", "output", "bag", "list", "string", "set", "object", "only", "handler", "file", "false", "cache", "loader", "ters", "builder"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try (Scanner in = new Scanner(System.in)) {\\n//            while (true)\\n                solve(in);\\n        }\\n    }\\n\\n    private static void solve(Scanner in) {\\n        int n = in.nextInt();\\n        int[] R = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            R[i] = in.nextInt();\\n        }\\n        int min = Integer.MAX_VALUE;\\n        int diff = Integer.MIN_VALUE;\\n        for (int i = 0; i < n; i++) {\\n            if (diff < R[i] - min) {\\n                diff = R[i] - min;\\n            }\\n            if (min > R[i]) {\\n                min = R[i];\\n            }\\n        }\\n        System.out.println(diff);\\n    }\\n}", "target": "208", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n  public static void main(String[] args) throws Exception {\\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n    String s = new String(in.readLine());\\n    int N = Integer.parseInt(s);\\n    int sumN = 0;\\n    \\n    for(int i = 0; i < s.length(); i++){\\n      sumN += Character.getNumericValue(s.charAt(i));\\n    }\\n    \\n    if(N % sumN == 0){\\n      System.out.println(\"Yes\");\\n    }else{\\n      System.out.println(\"No\");\\n    }\\n  }\\n}\\n", "target": "195", "substitutes": {"in": ["isin", "p", "buffer", "login", "ins", "serv", "din", "ex", "line", "l", "a", "data", "is", "r", "init", "source", "stream", "win", "input", "temp", "resource", "er", "In", "f", "user", "c", "inn", "t", "ini", "conn", "w", "nin", "ssl", "string", "min", "gin", "n", "b", "err", "again", "reader", "exec", "connection", "log", "bin", "readable", "as", "inc", "IN", "out", "thin"], "s": ["S", "blocks", "p", "u", "ins", "ss", "rs", "si", "strings", "sql", "l", "a", "es", "sv", "is", "ls", "ws", "r", "its", "fs", "source", "cs", "input", "src", "ps", "f", "os", "c", "ds", "e", "string", "ses", "raw", "abs", "o", "d", "gs", "n", "ns", "b", "sets", "services", "su", "sb", "as"], "N": ["Len", "S", "Num", "NA", "SN", "C", "M", " n", "Size", "U", "Node", "F", "Number", "Q", "P", "A", "Na", "T", "I", "Ni", "NC", "L", "R", "n", "NM", "V", "Length", "ND", "D", "NT", "Index", "O", "Z", "NS", "Ns", "H", "NUM", "NF", "NG", "X"], "sumN": ["SumF", "meanN", "sumJ", "Sumn", " sumC", " sumJ", "meanK", "umJ", " sumK", "sumL", " sumF", "sumC", "meanF", "SumN", " sumL", "SumL", "sumK", "meanJ", "totalL", "totaln", "sumn", "totalC", " sumn", "umN", "umK", "totalF", "SumC", "umF", "totalN", "sumF"], "i": ["hi", "bi", "pi", "p", "it", "u", "id", "slice", "multi", "qi", "volume", "xi", "ji", "v", "si", "ix", "l", "ri", "r", "io", "z", "h", "abi", "info", "f", "ci", "ui", "c", "ini", "index", "m", "phi", "x", "mu", "uri", "eni", "ip", "di", "e", "I", "ai", "o", "gi", "d", "n", "ii", "b", "zi", "li", "pass", "j", "k", "oi", "chi", "t", "ti"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner scn = new Scanner(System.in);\\n        int Bills = scn.nextInt();\\n        int Sum = scn.nextInt();\\n\\n        if(Check(Sum, Bills) == 1){\\n            System.out.println(\"-1 -1 -1\");\\n        }\\n    }\\n\\n    public static int Check(int Y, int N){\\n\\n        for(int x=0; x<=N; x++){\\n            for(int y=0; y<=N-x; y++){\\n                int z = N-x-y;\\n                if(x*10000 + y*5000 + z*1000 == Y){\\n                    System.out.println(x + \" \" + \" \" + y + \" \" +z);\\n                    return 0;\\n                }\\n            }\\n        }\\n        return 1;\\n    }\\n}", "target": "133", "substitutes": {"scn": ["bcner", "scner", "bcan", "span", " scner", "bcN", "skn", "spN", "skc", "scN", "SCn", "Scnn", "scb", "Scc", "scc", "SCr", "spner", "Scn", " scc", " scr", "bcn", "ScN", "sknn", "SCN", " scb", "skr", " scan", "Scr", "scnn", "SCb", "spn", "scan", "Scb", "scr", " scN", " scnn"], "Bills": ["billing", "Buffalls", "Billes", "Billed", "BFilled", "Kills", "Buffills", "Killing", "Killes", "Buffilled", "Bries", "bills", " Billes", "Countilles", "Kries", "Countills", "Countries", "Billing", "BFills", "Balls", "BFilling", "billed", " Billing", "BFalls", "balls", "Buffilling", "Countilling", " Bries"], "Sum": ["Cost", "Balance", "S", "Num", "Count", "Part", "Vol", "Summary", "Average", "Size", "Full", "Hash", "Number", "Code", "Sign", "First", "sum", "Total", "Score", "Sk", "Fill", "Stack", "Conf", "Sub", "Max", "Diff", " sum", "Length", "Avg", "Spread", "Index", "Square", "Cash", "Base", "Weight", "Min", "Start", "Mask"], "Y": ["yo", "S", "C", "J", "M", "vy", "i", "U", "Q", "P", "A", "ny", "XX", "Type", "T", "I", "xx", "L", "YN", "B", "V", "yy", "K", "YY", "D", "H", "Z", "O", "xy", "G", "W", "E", "X"], "N": ["S", "Len", "Num", "No", "NA", "C", "M", " n", "Size", "U", "Node", "F", "Network", "NN", "Q", "P", "NO", "T", "I", "Ni", "L", "R", "n", "B", "Ne", "V", "K", "D", "NT", "H", "Z", "NS", "Ns", "O", "NE", "NI", "W", "X"], "x": ["ady", "py", "on", "dx", "p", "xp", "id", "u", "xi", "ex", "v", "i", "ix", "l", "ya", "a", "X", "name", "yx", "h", "f", "width", "c", "ax", "wx", "key", "index", "m", "w", "an", "e", "xxx", "code", "q", "d", "n", "b", "dy", "j", "time", "tx", "xs", "in", "xy", "rx", "ey", "px", "fx", "t", "wh", "xc", "xx"], "y": ["yo", "ky", "py", "p", "gy", "id", "sy", "wy", "oy", "v", "i", "vy", "ya", "yt", "yr", "h", "yan", "ny", "s", "ay", "ym", "w", "zy", "yn", "ty", "xx", "ry", "iy", "o", "d", "n", "ii", "b", "dy", "year", "yy", "j", "ye", "yi", "xy", "ey", "cy", "t", "X"], "z": ["zz", "p", "gy", "id", "u", "v", "tz", "i", "vy", "ix", "l", "ez", "zip", "h", "ny", "zo", "c", "w", "zy", "q", "cz", "d", "n", "ii", "b", "zi", "ze", "j", "k", "yi", "iz", "zh", "Z", "xx"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main{\\n    public static Scanner scn=new Scanner(System.in);\\n    public static void main(String args[]){\\n        ans();\\n    }\\n    public static void ans(){\\n        int n=scn.nextInt();\\n        long count=0;\\n        // if(n>=1000000)\\n        // System.out.print(266666333332);\\n        \\n      for(int i=1;i<=n;i++){\\n      \\n          if(i%3!=0 && i%5!=0){\\n         count+=i;       \\n    }\\n}\\n// if(n<1000000)\\nSystem.out.print(count);\\n}\\n}", "target": "55", "substitutes": {"scn": ["scner", " scner", "scns", "SCner", "scN", "SCn", "rcn", "Scnn", "rcner", "Scn", "ScN", "rcnn", "rcN", "SCN", "SCns", "scnn", "Scns", " scns", "Scner", " scN", " scnn"], "n": ["nn", "nc", "nt", "ni", "p", "na", "num", "ln", "N", "i", "l", "sn", "r", "z", "f", "conn", "s", "c", "ne", "m", "d", "ns", "b", "nb", "j", "k", " c", " N"], "count": ["counter", "offset", "call", "nt", "Count", "test", "size", "id", "num", "name", "start", "info", "len", "last", "sum", "match", "index", "weight", "list", "process", "state", "max", "code", "found", "cache", "error", "ind", "act"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\tfinal static long MOD = 1000000007;\\n\tpublic static String[] Ws = null;\\n\tpublic static int wsIndx = 0;\\n\tpublic static BufferedReader in = null;\\n\tpublic static long cnt=0;\\n\tpublic static PrintWriter pw = new PrintWriter(System.out);\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tsolution(args);\\n\t\tif(in!=null){\\n\t\t\tin.close();\\n\t\t}\\n\t\tpw.flush();\\n\t\tpw.close();\\n\t}\\n\\n\tpublic static void solution(String[] args) throws Exception{\\n\\n\t\tString s = nextString();\\n\t\tString[] base = {\"resare\",\"remaerd\",\"esare\",\"maerd\"};\\n\t\tStringBuffer S = (new StringBuffer()).append(s).reverse();\\n\\n\t\tString ans = \"NO\";\\n\t\tboolean flg = true;\\n\t\twhile(flg){\\n\t\t\tflg=false;\\n\t\t\tfor(int i=0;i<base.length;i++){\\n\t\t\t\tif(S.length()>=base[i].length()&&S.substring(0,base[i].length()).equals(base[i])){\\n\t\t\t\t\tS.delete(0, base[i].length());\\n\t\t\t\t\tflg=true;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tif(S.length()==0){\\n\t\t\tans=\"YES\";\\n\t\t}\\n\\n\t\tpw.println(ans);\\n\\n\t}\\n\\n\tpublic static void dfs(int n,int cnt,ArrayList<Integer>[] tree,int parent,int[] set){\\n\t\tif(n!=parent&&tree[n].size()==1){\\n\t\t\tset[n]=cnt;\\n\t\t\treturn;\\n\t\t}\\n\t\tfor(int x:tree[n]){\\n\t\t\tif(x==parent){\\n\t\t\t\tcontinue;\\n\t\t\t}\\n\t\t\tdfs(x,cnt+1,tree,n,set);\\n\t\t}\\n\t}\\n\\n\\n\tpublic static void check() throws Exception{\\n\t\tif(in == null){\\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tif(Ws==null || Ws.length<=wsIndx){\\n\t\t\tWs = in.readLine().split(\" \");\\n\t\t\twsIndx=0;\\n\t\t}\\n\t}\\n\tpublic static int nextInt()throws Exception{\\n\t\tcheck();\\n\t\treturn Integer.parseInt(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static long nextLong()throws Exception{\\n\t\tcheck();\\n\t\treturn Long.parseLong(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static String nextString()throws Exception{\\n\t\tcheck();\\n\t\treturn Ws[wsIndx++];\\n\t}\\n\\n\tpublic static int[] nextInts()throws Exception{\\n\t\tcheck();\\n\t\tint[] tmp = new int[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Integer.parseInt(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static long[] nextLongs()throws Exception{\\n\t\tcheck();\\n\t\tlong[] tmp = new long[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Long.parseLong(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static String[] nextStrings()throws Exception{\\n\t\tcheck();\\n\t\twsIndx=Ws.length;\\n\t\treturn Ws;\\n\t}\\n\\n}\\n\\n", "target": "50", "substitutes": {"MOD": [" R", " indent", "id", " Max", "ID", "num", "N", " max", " L", " rc", " seed", " pc", " window", " C", " E", "c", " Version", " counter", " epoch", " pid", " PID", " clen", "max", "L", "d", " MS", " K", " seq", " timeout", " N"], "Ws": ["Word", "wcs", "Pages", "Es", "Socket", "Fs", "wy", "Writer", "Path", "Array", "Ps", "ws", "wd", "WC", "WB", "Wr", "WS", "win", "Parts", "Width", "File", "Bytes", "CW", "Rs", "Wars", "wx", "words", "w", "rw", "NW", "Stack", "Input", "Wi", "writer", "ww", "wt", "Str", " WS", "Wo", "ns", "WT", "Win", "Text", "wa", "Windows", "Base", "Ns", "WP", "RW", "wb", "Line", "W", "fts", "Wa"], "wsIndx": ["WSIdx", "wsIDs", "wsCondy", "wsID\n", "WSIndX", "wsindex", "wsInd\n", "wsindx", "wsIndy", "WSIndi", "wsIndex", "wsMidy", "wsIndi", "WSInds", "wsIdx", "wsLens", "WSIdi", "wsIdc", "WSInd\n", "wsindy", "WSIndx", "wsIdy", "wsinds", "WSIndy", "wsMidi", "WSIdc", "wsMidx", "wsindc", "wsIdex", "wsInds", "WSIdex", "WSIndc", "WSIdX", "wsIdX", "WSIndex", "WSinds", "wsCondx", "wsLen\n", "WSind\n", "wsMidc", "wsIdi", "wsCondex", "wsind\n", "wsCondX", "wsindX", "WSIdy", "wsIndX", "wsindi", "wsIndc"], "in": ["cl", "isin", "client", "p", "buffer", "it", "id", "login", "ins", "din", "ex", "path", "line", "a", "l", "data", "is", "request", "con", "inas", "r", "init", "source", "win", "h", "input", "get", "resource", "In", "f", "image", "inn", "c", "ini", "user", "m", "w", "nin", "config", "cin", "socket", "ssl", "token", "min", "gin", "read", "inner", "inf", "rin", "b", "kin", "err", "ac", "again", "pass", "reader", "pin", "connection", "bin", "as", "inc", "pull", "IN", "out"], "cnt": ["Cpt", "cnc", "ccount", "cNT", "lcNT", "lcnt", "count", "Count", "acnc", " count", " cnc", "CNT", "Crt", "ucNT", " cNT", " cpt", " cwd", "crt", " crt", "ucnc", "account", " ccount", "cpt", "acnt", "lcnc", "lcwd", "lcount", "Cwd", "ucnt", "ucrt", "acNT", "Cnc", "cwd", "lcpt", "Ccount", "Cnt"], "pw": ["lpv", "pwt", " pwt", "Pws", " pew", "pwd", "ppW", "PW", " pws", "ppws", "ppw", "spW", "cwb", "cw", "pv", "pws", " pW", " pv", "pwb", "lpw", "Pwb", "jpwt", "lpew", "spwb", " pwa", "Pw", "jpw", "Pwh", "Pwd", "jpew", "spw", "spwd", " pwh", "ppwa", "cW", "Pwa", "pwh", "pew", "cwd", "spwh", "pW", "pwa", " pwb", "jpv", "lpwt"], "s": ["p", "secret", "u", "ins", "ss", "v", "si", "strings", "l", "a", "es", "series", "ls", "r", "ws", "sample", "h", "ps", "f", "params", "sl", "ings", "os", "m", "w", "parts", "e", "str", "string", "o", "gs", "g", "ns", "b", "services", "site", "se", "js", "shared", "array"], "base": ["bi", "unit", "api", "space", "p", "buffer", "prefix", "normal", "core", "ases", "id", "http", "server", "service", "version", "url", "line", "bare", "ase", "db", "name", "part", "pre", "old", "store", "home", "sample", "source", "bas", "params", "ui", "key", "style", "model", "index", "build", "iso", "list", "string", "b", "body", "site", "se", "root", "original", "scale", "type", "Base", "file", "basic", "from", "area", "bar", "range", "cache", "array"], "S": ["SI", "SF", "AS", "SS", "VS", "SN", "Sample", "Socket", "C", "Part", "TS", "SB", "N", "M", "RS", "SE", "U", "SU", "Si", "SH", "GS", "As", "F", "WS", "P", "SA", "A", "Single", "Su", "FS", "BS", "OSS", "Support", "SM", "SO", "T", "I", "L", "R", "B", "Space", "V", "Copy", "D", "H", "O", "NS", "DS", "HS", "G", "SR", "SK", "W", "URI", "PS"], "ans": ["ana", "AS", "AN", "aned", "ars", "sk", "oss", "na", "ins", "An", "aus", "ss", "ks", "anon", "lan", "rans", "res", "atan", "As", "ls", "eps", "ens", "cs", "man", "vs", "os", "ings", "cas", "ds", "nas", "ants", "an", " means", "cons", " Ans", "ANS", "cus", "flags", "anse", "Ann", "ents", "ns", "ras", "su", "tan", "anc", "lang", "ANN", "san", "as", "ons", "ant", "can", "ann"], "flg": ["Flg", "velgs", "plgs", "elp", "lk", " flgi", " flgh", "eld", "plg", "flp", "flgi", "relgi", "relp", "llg", "llG", "clgc", "elgs", "flx", "velgh", "lp", "Flk", "fld", "ild", "relg", "plgh", " flgc", "relgc", "velx", "flgs", "lg", "clg", "Flp", "elg", "plx", "llk", "clgi", "flG", " flgs", "flgh", "FlG", "clp", "ilp", "ilgs", " flp", "lG", "ilg", "llp", "flgc", " fld", "flk", "velg", " flx"], "i": ["bi", "hi", "api", "pi", "ni", "iu", "slice", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "l", "line", "data", "ri", "part", "uli", "io", "init", "info", "z", "abi", "temp", "f", "lc", "ci", "ui", "ini", "key", "index", "m", "phi", "mu", "uri", "di", "ip", "e", "I", "ie", "ai", "code", "gi", "inner", "d", "shift", "ii", "zi", "b", "li", "field", "j", "oi", "y", "ti", "fi"], "n": ["nn", "all", "nc", "on", "nt", "p", "null", "u", "na", "num", "nu", "N", "v", "cn", "l", "a", "sn", "name", "part", "un", "z", "f", "nat", "c", "ne", "index", "m", "w", "e", "node", "o", "inner", "d", "ns", "g", "b", "pn", "nb", "network", "j", "net", "k", "current", "no", "number", "y", "en", "t"], "tree": ["complete", "div", "single", "module", "et", "dict", "slice", "table", "id", "stack", "split", "rees", "data", "forest", "pre", "ree", "store", "stage", "zip", "tag", "document", "down", "key", "model", "index", "list", "note", "token", "node", "Tree", "code", "wt", "rule", "body", "cycle", "root", "flat", "update", "parse", "type", "level", "wrap", "section", "cache", "match", "t", "let", "tail"], "parent": ["all", "complete", "offset", "unit", "nc", "nt", "scope", "empty", "p", "size", "null", "id", "na", "num", "parents", "path", "pa", "nat", "dc", "c", "pid", "pointer", "m", "depth", "np", "e", "Parent", "any", "left", "node", "max", "o", "g", "zero", "current", "root", "pos", "k", "child", "parse", "port", "out", "ctx"], "set": ["ut", "et", "on", "create", "p", "patch", "slice", "id", "split", "add", "sort", "use", "sign", "store", "start", "vert", "get", "end", "post", "order", "key", "list", "settings", "en", "node", "ind", "clear", "ver", "sets", "se", "write", "net", "j", "update", "parse", "graph", "scale", "SET", "no", "wrap", "section", "match", "sc", "let", "sync"], "x": ["xd", "p", "xp", "id", "px", "xi", "ex", "v", "xes", "ix", "X", "exp", "cross", "z", "h", "event", "lex", "c", "wx", "ax", "index", "w", " X", "e", "xxx", "d", "abc", "tx", "j", "xe", "work", "xs", "xxxx", "xy", "y", "rx", "xt", "t", "xa", "xc", "xx"]}}
{"code": "import java.util.Scanner;\\n \\nclass Main{\\n \\n    public static void main(String[] args){\\n \\n        Scanner scanner = new Scanner(System.in);\\n        int a = scanner.nextInt();\\n        int b = scanner.nextInt();\\n        int c = scanner.nextInt();\\n        int k = scanner.nextInt();\\n        scanner.close();\\n        \\n        int sum = 0;\\n        if(a>=k){\\n            sum = k;\\n            System.out.println(sum);\\n            return;\\n        }else{\\n            sum += a;\\n            if(b>=k-a){\\n                System.out.println(sum);\\n                return;\\n            }else{\\n                sum -= k-a-b;\\n                System.out.println(sum);\\n            }\\n        }\\n    }\\n \\n}", "target": "56", "substitutes": {"scanner": [" scaner", "Scaninner", "scanker", "anner", " scanin", "aninner", "caner", "Scanmer", "analyner", "canter", "anter", "caninner", "analyning", " scanter", "aner", "scanter", " scaninner", " scanmer", "scanmer", "canmer", "annter", "canin", "analyker", "annener", "scanener", "Scanener", "canker", "scaner", "Scanker", "canener", "scanning", "Scanter", "scanin", "Scaner", "annner", "anning", "Scanning", "analyer", "anker", "canner", "Scanner", "Scanin", "scaninner"], "a": ["offset", "api", "p", "ka", "u", "ad", "ks", "v", "ba", "i", "l", "aa", "z", "A", "f", "au", "ga", "ak", "m", "an", "x", "sa", "ae", "e", "ai", "alpha", "d", "n", "ca", "ac", "ama", "as", "la", "y", "area", "ab", "da", "am", "va", "aj"], "b": ["fb", "p", "u", "rb", "ad", "v", "i", "ba", "l", "cb", "r", "aa", "z", "h", "bc", "lb", "f", "eb", "w", "x", "e", "o", "d", "n", "g", "B", "ac", "nb", "j", "sb", "bb", "y", "ab"], "c": ["p", "C", "u", "ch", "v", "i", "l", "r", "z", "h", "end", "f", "m", "w", "x", "e", "q", "o", "d", "n", "ac", "cc", "y"], "k": ["sk", "p", "u", "ko", "ck", "ad", "ke", "ks", "v", "i", "kk", "ik", "z", "h", "dk", "ok", "f", "key", "ak", "m", "w", "x", "kw", "e", "kr", "max", "q", "o", "unk", "d", "n", "g", "ac", "j", "K", "y"], "sum": ["um", "div", "total", "cat", "conf", "unit", "empty", "count", "size", "cost", "hash", "gram", "num", "fail", "summary", "si", "average", "ass", "loss", "add", "vol", "help", "sort", "use", "diff", "ask", "start", "mass", "dot", "info", "cal", "cmp", "key", "weight", "us", "sa", "pack", "mix", "cum", "alpha", "miss", "skip", "rank", "Sum", "comment", "result", "zero", "commit", "se", "su", "fat", "frac", "parse", "net", "scale", "work", "mean", "word", "av", "doc", "play", "cache", "error", "am", "out", "fee", "mem", "coll"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\n//6/9\u30b3\u30f3\u30c6\u30b9\u30c8\\n\\npublic class Main {\\n\tpublic static void main(String[]args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint sa=100;\\n\t\tint konkai=1000;\\n\t\tList<Integer> list= new ArrayList<Integer>();\\n\t\tfor(int i=0;n>i;i++) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tlist.add(a);\\n\t\t}\\n\t\t//System.out.println(list.get(1));\\n\t\tfor(int i=0;n-1>i;i++) {\\n\t\t\tint one=0;\\n\t\t\tint two=0;\\n\t\t\tfor(int l=0;i+1>l;l++) {\\n\t\t\t\tone=one+list.get(l);\\n\t\t\t}\\n\t\t\tfor(int t=0;n-1-i>t;t++) {\\n\t\t\t\ttwo=two+list.get(n-1-t);\\n\t\t\t}\\n\\n\t\t\tkonkai=Math.abs(one-two);\\n\t\t\tif(konkai<sa) {\\n\t\t\t\tsa=konkai;\\n\t\t\t}\\n\\n\t\t}\\n\t\tSystem.out.println(sa);\\n\\n\\n\\n\t}\\n\\n}\\n", "target": "2", "substitutes": {}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int N = Integer.parseInt(sc.next());\\n        int[] l = new int[N];\\n        int max = -1;\\n        int second_max = -1;\\n        for(int i = 0; i< N; i++){\\n            int num = Integer.parseInt(sc.next());\\n            if(num > max){\\n                second_max = max;\\n                max = num;\\n            }else{\\n                if(num > second_max){\\n                    second_max = num;\\n                }\\n            }\\n            l[i] = num;\\n        }\\n        for(int elem :l){\\n            if(max != elem){\\n                System.out.println(max);\\n            }else{\\n                System.out.println(second_max);\\n            }\\n        }\\n    }\\n}", "target": "142", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "sf", "scope", "pc", "class", "ch", "server", "ss", " SC", "sub", "sh", "Sc", "SC", "bc", "cs", "desc", "src", "lc", "ci", "dc", "c", "cer", "sp", "system", "cle", "sem", "se", "ner", " Sc", "reader", "anc", "exec", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "coll", "spec", "ec", "esc", "cus", "sync"], "N": ["MN", "Len", "S", "Num", "No", "NA", "Count", "C", "J", "M", " n", "Size", "Y", "F", "Number", "Q", "NN", "P", "T", "I", "Ni", "L", "R", "Max", "n", "NR", "Ne", "V", "K", "ND", "D", "NT", "Z", "Ns", "O", "NS", "NE", "NI", "X"], "l": ["ml", "fl", "p", "u", "ln", "v", "le", "el", "ls", "r", "z", "nl", "len", "lp", "lc", "sl", "c", "t", "m", "lo", "e", "ul", "o", "L", "lv", "n", "kl", "b", "li", "dl", "k", "lt", "ol", "la", "lf", "wl", "ll"], "max": ["total", "comb", "size", "r", "init", "row", "instance", "ax", "w", "rand", "alpha", "limit", "root", "mod", "all", "none", "p", "id", "next", "name", "nr", "end", "first", "sum", "mad", "node", "Max", "n", "no", "parse", "scale", "default", "div", "count", "and", "prefix", "right", "orig", "x", "min", "rest", "rank", "prev", "only", "obj", "work", "step", "in", "wrap", "MAX", "cache", "random", "out", "wh", "can", "maximum", "conf", "parent", "cat", "chain", "now", " Max", "start", "last", "c", "est", "current", "k", "master", "from"], "second_max": ["secondary_count", "second_hand", "secondlexmax", "secondlexmin", "secondIDmin", "secondIDmax", "second_size", "second_rest", "second_no", " second_size", "secondary_min", "second_parent", " second_min", "secondLogmin", "second_Max", "secondlexparent", " second_rest", "secondary_max", "secondIDhand", "secondLogmax", "second_count", " second_Max", "secondlexrest", "secondLogparent", " second_parent", "secondary_size", "secondIDno", " second_no", "secondLogrest", "second_min", " second_conf", "second_conf", " second_hand"], "i": ["bi", "hi", "pi", "ni", "p", "u", "id", "qi", "multi", "xi", "si", "ix", "ri", "r", "start", "io", "f", "ci", "ui", "c", "ini", "index", "eni", "m", "x", "uri", "ip", "di", "I", "ie", "ai", "min", "gi", "d", "mi", "n", "cli", "ii", "zi", "li", "j", "oi", "in", "ind", "ti"], "num": ["nn", "um", "mom", "cat", "parent", "unit", "Num", "ni", "p", "mon", "na", "id", "one", "nu", "multi", "nam", "uni", "known", "nm", "init", "iter", "nr", "temp", "f", "nat", "fn", "gen", "index", "m", "x", "umi", "np", "coord", "text", "col", " nu", "node", "min", "ul", "d", "nom", "n", "inal", "b", "dim", "nil", "nb", "buf", "net", "term", "no", "mn", "bin", "non", "number", "NUM", "conv", "en"], "elem": ["elelements", "elelect", "selement", "eelem", "elelem", "Element", "eelements", "selem", "sele", "ele", "eq", "Ele", "eelect", " elect", " ele", "element", "eeq", "Elements", " elements", "Elem", "elements", " element", " eq", "selements", "elect", "eleq"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tint m=sc.nextInt();\\n\t\tint c=sc.nextInt();\\n\t\tint i,j,k,cc=0;\\n\t\tint[]a=new int[m];\\n\t\tint[][]b=new int [n][m]; \\n\t\t\\n\t\tfor(k=0;k<m;k++) {\\n\t\t\ta[k]=sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tfor( i=0;i<n;i++) {\\n\t\t\tfor(j=0;j<m;j++) {\\n\t\t\t\tb[i][j]=sc.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tint []ans=new int[n];\\n\t\t\\n\t\tfor(i=0;i<n;i++) {\\n\t\t\tfor(j=0;j<m;j++) {\\n\t\t\t\tans[i]+=b[i][j]*a[j];\\n\t\t\t}\\n\t\t\tans[i]+=c;\\n\t\t}\\n\t\t\\n\t\tfor(i=0;i<n;i++) {\\n\t\t\tif(ans[i]>0) {\\n\t\t\t\tcc++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(cc);\\n\t\t\\n\t}\\n\\n}\\n", "target": "68", "substitutes": {"sc": ["cl", "sche", "enc", "sci", "nc", "scope", "pc", "class", "na", "ser", "com", "ch", "tc", "ss", "sec", " SC", "cur", "asc", "sh", "Sc", "SC", "screen", "scl", "bc", "cs", "sw", "cv", "lc", "loc", "cer", " scr", "sp", "ec", "system", "sq", "uc", "soc", "cle", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cr", "cont", "sch", "squ", "cam", "out", "esc", "cus", "sync"], "n": ["nn", "none", "nc", "nt", "ni", "p", "u", "na", "num", "N", "ln", "M", "v", "cn", "l", "sn", "r", "nm", "z", "un", "f", "s", "ne", "an", "x", "e", "q", "o", "d", "ns", "kn", "network", "nb", "ner", "net", "no", "in", "mn", "y", "zn", "en", "t"], "m": ["um", "mc", "im", "p", "mon", "u", "num", "N", "om", "M", "v", "cn", "l", "mm", "r", "nm", "h", "z", "f", "cm", "s", "ms", "an", "x", "w", "mu", "e", "o", "md", "d", "mi", "g", "am", "hm", "sm", "mn", "y", "en", "t"], "c": ["mc", "p", "pc", "size", "C", "u", "ch", "v", "l", "con", "z", "h", "cs", "cp", "f", "cm", "ci", "s", "dc", "lc", "x", "e", "uc", "cf", "q", "o", "d", "g", "unc"], "i": ["bi", "ir", "im", "api", "pi", "ori", "ni", "iu", "p", "ami", "it", "u", "id", "qi", "ji", "xi", "v", "si", "ix", "l", "mini", "uni", "ik", "ri", "r", "io", "init", "z", "info", "f", "ci", "s", "ui", "ini", "eni", "x", "mu", "uri", "phi", "e", "ip", "di", "I", "ie", "ai", "q", "o", "gi", "d", "mi", "cli", "ii", "li", "oi", "yi", "in", "chi", "y", "ki", "my", "fi"], "j": ["jj", "jc", "p", "oj", "it", "u", "J", "qi", "ch", "ji", "bj", "xi", "v", "jp", "si", "l", "ij", "ik", "r", "z", "h", "aj", "f", "ui", "key", "ak", "w", "x", "e", "jet", "ja", "uj", "ie", "q", "o", "d", "g", "ii", "li", "ju", "je", "js", "obj", "job", "y", "jl", "jen", "jo"], "k": ["sk", "mk", "p", "ka", "it", "u", "id", "ck", "ke", "ks", "v", "l", "kk", "ik", "r", "z", "h", "dk", "ok", "f", "s", "ek", "key", "ak", "w", "x", "e", "kw", "kr", "q", "o", "kn", "d", "g", "kin", "K", "uk", "y", "ki"], "cc": ["ace", "cl", "mc", "cci", " CC", "func", "nc", "count", "pc", "ck", "tc", "CC", "cn", "ff", "cb", "ct", "con", "cca", "cs", "cv", "bc", "fee", "co", "ces", "cmp", "cm", "ci", "dc", "lc", "ucc", "cas", "cy", "acc", "ack", "uc", "cf", "ce", "q", "ca", "ac", "pass", "sup", "anc", "cd", "rc", "cr", "inc", "ec", "unc", "cus"], "a": ["ana", "aw", "p", "ia", "u", "na", "ad", "v", "ba", "ar", "l", "aa", "z", "A", "aj", "oa", "pa", "f", "s", "ga", "an", "x", "sa", "ae", "ai", "o", "alpha", "g", "ca", "ac", "aaa", "sup", "ama", "as", "la", "area", "asa", "ab", "da", "ma", "am", "va", "array"], "b": ["fb", "p", "mb", "u", "abb", "rb", "binary", "v", "ba", "l", "ib", "cb", "db", "r", "aa", "z", "lb", "bc", "gb", "bs", "bas", "f", "eb", "w", "x", "base", "e", "o", "d", "g", "B", "sb", "bd", "y", "ab", "ob", "bp"], "ans": ["ana", "ars", "anas", "aned", "AN", "p", "sex", "na", "ani", "ins", "aus", "ks", "span", "anon", "lan", "acs", "actions", "ions", "eps", "ls", "ens", "cs", "ians", "man", "s", "nas", "ms", "cas", "plan", "ants", "an", "books", "idents", "cus", "cons", "ANS", "ns", "ents", "ca", "cases", "ats", "anc", "xs", "ids", "as", "ons", "aning", "amps", "ays", "can", "ann"]}}
{"code": "import java.util.ArrayDeque;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Queue;\\nimport java.util.Scanner;\\n \\n\\n\\npublic class Main {\\n\tstatic int a1[]= {0,-1,0,1};\\n\tstatic int b1[]= {-1,0,1,0};\\n\tprivate static         Scanner sc = new Scanner(System.in);\\n\t//result = Math.pow(num1, num3)\\n\t//StringBuffer str = new StringBuffer(hoge1);\\n\t//String hoge2 = str.reverse().toString();\\n\t//map.containsKey(A)\\n\\n\t//Map<String, Integer> map = new HashMap<String, Integer>(n);\\n\t/*for ( \u30ad\u30fc\u306e\u30c7\u30fc\u30bf\u578b key : \u30de\u30c3\u30d7\u306e\u540d\u524d.keySet() ) {\\n\t\t\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u578b data = \u30de\u30c3\u30d7\u306e\u540d\u524d.get( key );\\n\t\t\\n\t\t// key\u3084data\u3092\u4f7f\u3063\u305f\u51e6\u7406;\\n\t}*/\\n\t//int i = Integer.parseInt(s);\\n\t//Queue<String> qq=new ArrayDeque<>(); //add,poll,peek\\n\t//Deque<String> qq=new ArrayDeque<>();//push,pop,peek\\n\t//ArrayList<String> cc = new ArrayList<>(n);\\n\t//Collections.sort(list);\\n\t//Array.sort(list);   cc.contains(tmp)\\n\t//Arrays.asList(c).contains(\"a\")\\n\t//list.set(1,\"walk\");//1 1 2 3 5\\n\tstatic int K,N;\\n\tstatic long mod =1000000007;\\n\tpublic static void main(String[] args) {\\n\t\t\tint N=sc.nextInt();\\n\t\t\tint D=sc.nextInt();\\n\t\t\t\\n\t\t\tint v[][]=new int[N][D]; \\n\t\t\t\\n\t\t\tfor(int i=0;i<N;i++) {\\n\t\t\t\tfor(int b=0;b<D;b++) {\\n\t\t\t\t\tv[i][b]=sc.nextInt();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tint sum;\\n\t\t\tint ans=0;\\n\t\t\tfor(int i=0;i<N;i++) {\\n\t\t\t\tfor(int b=i+1;b<N;b++) {\\n\t\t\t\t\t\\n\t\t\t\t\tsum=0;\\n\t\t\t\t\tfor(int a=0;a<D;a++) {\\n\t\t\t\t\t\tsum+=(v[i][a]-v[b][a])*(v[i][a]-v[b][a]);\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t\tfor(int t=1;t<=sum;t++) {\\n\t\t\t\t\t\tif(t*t==sum) {\\n\t\t\t\t\t\t\tans++;\\n\t\t\t\t\t\t\tbreak;\\n\t\t\t\t\t\t}else if(t*t>sum)break;\\n\t\t\t\t\t}\\n\t\t\t\t\t//p(i+\"    \"+b+\"   \"+sum);\\n\t\t\t\t\t\\n\t\t\t\t}\\n\t\t\t}p(ans);\\n\t}\\n\\n\t\\n\t//static ArrayList<Integer> cc = new ArrayList<>(10001);\\n\t\\n\tstatic void p(String ans) {System.out.println(ans);};\\n\tstatic void p(int ans) {System.out.println(ans);};\\n\tstatic void p() {System.out.println();};\\n\tstatic void p(long ans) {System.out.println(ans);};\\n\tstatic void p(double ans) {System.out.println(ans);};\\n\tpublic static int gcd(int a, int b) {\\n        return b == 0 ? a: gcd(b, a % b);\\n\t}\\n\tstatic String nextPermutation(String s) {\\n\t\tArrayList<Character> list=new ArrayList<>();\\n\t\tfor(int i=0;i<s.length();i++) {\\n\t\t\tlist.add(s.charAt(i));\\n\t\t}\\n\t\tint pivotPos=-1;\\n\t\tchar pivot=0;\\n\t\tfor(int i=list.size()-2;i>=0;i--) {\\n\t\t\tif(list.get(i)<list.get(i+1)) {\\n\t\t\t\tpivotPos=i;\\n\t\t\t\tpivot=list.get(i);\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(pivotPos==-1&&pivot==0) {\\n\t\t\treturn \"Final\";\\n\t\t}\\n\t\tint L=pivotPos+1,R=list.size()-1;\\n\t\t\\n\t\t\\n\t\t\\n\t\tint minPos=-1;\\n\t\tchar min =Character.MAX_VALUE;\\n\t\t\\n\t\tfor(int i=R;i>=L;i--) {\\n\t\t\tif(pivot<list.get(i)) {\\n\t\t\t\tif(list.get(i)<min) {\\n\t\t\t\t\tmin=list.get(i);\\n\t\t\t\t\tminPos=i;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tCollections.swap(list, pivotPos, minPos);\\n\t\tCollections.sort(list.subList(L, R+1));\\n\t\t\\n\t\t\\n\t\tStringBuilder sb=new StringBuilder();\\n\t\tfor(int i=0;i<list.size();i++) {\\n\t\t\tsb.append(list.get(i));\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n}\\n\t\\n", "target": "59", "substitutes": {"a1": ["l4", "v4", "l11", "a4", "v11", "l1", "sa1", "sa11", "v2", "a11", "v1", "l2", "sa2", "a2", "sa4"], "b1": ["c6", " b6", "l1", "l6", "c1", "l2", "c2", " b2", "b6", "b2"], "sc": ["cl", "sci", "nc", "gram", "ss", " SC", " rc", " sl", "Sc", "SC", " gl", "bc", "cs", "sw", "src", "lc", " sw", " scr", "sp", "sq", " Sc", "sb", "scan", "rc", "cr", "ctx", "ann", "sync"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint num = scan.nextInt();\\n\t\tList<Integer> list = new ArrayList<Integer>();\\n\t\tStringBuffer sb = new StringBuffer();\\n\\n\t\tfor(int i=0; i<num; i++){\\n\t\t\tlist.add(scan.nextInt());\\n\t\t}\\n\t\tCollections.reverse(list);\\n\t\t/*for(int i: list){\\n\t\t\tsb.append(i + \" \");\\n\t\t}*/\\n\t\tfor(int i=0; i<num; i++){\\n\t\t\tif((i+1)==num){\\n\t\t\t\tsb.append(list.get(i));\\n\t\t\t}\\n\t\t\telse{\\n\t\t\t\tsb.append(list.get(i) + \" \");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sb);\\n\t}\\n}", "target": "79", "substitutes": {"scan": ["all", "nn", "cat", "see", "watch", "connect", "walk", "ser", "server", "ln", "serv", "run", "search", "sn", "sign", "con", "r", "sin", "get", "er", "query", "conn", "plan", "chan", "an", "or", "system", "en", "read", "skip", "ry", "n", "err", "sys", "se", "ner", "in", "parse", "Scan", "clean", "log", "san", "non", "ans", "look", "sc", "out", "can", "ann", "sync"], "num": ["all", "um", "total", "unit", "Num", "ni", "count", "mon", "u", "id", "nu", "multi", "nam", "uni", "name", "con", "nm", "valid", "block", "init", "un", "len", "end", "mut", "f", "loc", "sum", "index", "m", "umi", "mu", "coord", "max", "nom", "n", "zero", "dom", "dim", "mi", "limit", "nb", "pos", "norm", "form", "no", "in", "mn", "bin", "number", "inc", "NUM", "conv", "en", "out", "mult"], "list": ["all", "que", "bl", "cl", "parent", "chain", "ml", "live", "fl", "null", "id", "queue", "multi", "stack", "listed", "keep", "l", "pool", "sort", "part", "ls", "diff", "iter", "source", "collection", "lp", "len", "lc", "best", "last", "index", "ist", "pl", "left", "state", "ul", "lv", "set", "prev", "cli", "loop", "li", "dl", "current", "LIST", "sequence", "tree", "lists", "number", "la", "cont", "batch", "ll", "array", "coll"], "sb": ["nn", "buff", "fb", "sk", "sf", "bm", "sth", "buffer", "mb", "SB", "pb", "rb", "bj", "obb", "binary", "zb", "si", "usb", "db", "cb", "sv", "ls", "ws", "bf", "bh", "bc", "BB", "lp", "src", "gb", "bs", "eb", "bsp", "lb", "kb", "sa", "ssl", "erb", "fp", "b", "nb", "bg", "cover", "buf", "bb", "xb", "txt", "bd", "lab", "bt", "wb", "sg", "ab", "bp"], "i": ["bi", "hi", "api", "pi", "ori", "ni", "iu", "ami", "slice", "u", "id", "multi", "qi", "xi", "ji", "v", "si", "ix", "data", "is", "uni", "ri", "io", "init", "h", "info", "abi", "z", "length", "f", "ci", "ui", "ini", "index", "eni", "phi", "x", "mu", "uri", "ip", "e", "di", "I", "ie", "ai", "o", "gi", "d", "mi", "shift", "ii", "b", "zi", "li", "j", "oi", "in", "chi", "ti", "fi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main{\\n\\n\tpublic static void main(String[] args) throws IOException\\n\t{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in) );\\n\t\t\\n\t\tString strS = br.readLine();\\n\t\tString strP = br.readLine();\\n\t\t\\n\t\tStringBuffer sb = new StringBuffer(strS);\\n\t\t\\n\t\tsb.append(strS);\\n\t\t\\n\t\tSystem.out.println( (sb.indexOf(strP) == -1 ? \"No\" : \"Yes\") );\\n\t}\\n}", "target": "198", "substitutes": {"br": ["bl", "ber", "hr", "rb", "browser", "next", "tr", "pr", "arr", "jar", "lr", "cb", "fr", "bf", "r", "yr", "bh", "io", "iter", "bridge", "bc", "src", "ler", "bs", "dr", "er", "mr", "BR", "her", "bro", "str", "HR", "sp", "per", "Br", "brush", "abs", "sr", "b", "gr", "reader", "cro", "buf", "ocr", "bb", "obj", "bt", "cr", "ref"], "strS": [" strU", "STRB", " strL", " strSI", "stringSI", "StrT", "STRL", "STRP", "strSS", "stSS", "strL", "strB", "stringS", "StrSI", "stP", "StrS", " strB", "STRSS", "StrL", "StrB", "strU", "stS", "STRT", "StrP", "STRS", "stT", "strT", "stringB", "strSI", "StrSS", "StrU", "stringU"], "strP": [" strU", "STRP", "drB", "strM", "drM", "StrN", "strp", "strB", " strM", "StrM", "StrS", " strB", "StrB", " strp", " strN", "strU", "drP", "StrP", "strN", "STRS", "drU", "Strp", "StrU", "STRp", "STRN"], "sb": ["buff", "fb", "SF", "sf", "bm", "buffer", "mb", "SB", "pb", "abb", "rb", "obb", "zb", "si", "db", "cb", "sv", "ls", "bf", "bh", "stab", "bc", "BB", "lb", "bsp", "gb", "bs", "eb", "dB", "s", "sl", "kb", " SB", "sa", "erb", "b", "B", "bps", "nb", "bg", "buf", "bb", "BP", "xb", "bd", "bt", "sg", "ob", "bp"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args)throws Exception{\\n        Scanner sc=new Scanner(System.in);\\n        int a=sc.nextInt(),b=sc.nextInt(),c=sc.nextInt();\\n        if((a==b&&a!=c)||(b==c&&b!=a)||(c==a&&c!=b)){\\n            System.out.println(\"Yes\");\\n        }else{\\n            System.out.println(\"No\");\\n        }\\n    }\\n}", "target": "117", "substitutes": {"sc": ["sche", "enc", "sci", "nc", "sf", "scope", "pc", "core", "com", "tc", "sec", "ss", "server", " SC", "cur", "asc", "search", "Sc", "SC", "bc", "cs", "sw", "cv", "src", "lc", "ci", "cer", "sp", "acc", "system", "sq", "uc", "soc", "ca", "se", "ner", " Sc", "anc", "sb", "scan", "osc", "rc", "cc", "cr", "cont", "ec", "esc", "ctx", "cus", "sync"], "a": ["api", "count", "p", "u", "ad", "i", "ba", "ar", "l", "aa", "A", "pa", "f", "au", "s", "ga", "t", "an", "x", "sa", "ea", "e", "ae", "ai", "alpha", "o", "d", "af", "n", "ca", "ac", "aaa", "k", "ast", "fa", "art", "as", "y", "la", "area", "ab", "da", "asa", "am", "va", "aj"], "b": ["fb", "bi", "p", "mb", "u", "rb", "ad", "v", "ba", "i", "l", "db", "cb", "ib", "bf", "r", "bh", "aa", "be", "bc", "cp", "bs", "f", "eb", "base", "e", "o", "d", "n", "B", "ca", "ac", "nb", "k", "sb", "bb", "xb", "bd", "fa", "y", "wb", "ab", "ob", "t"], "c": ["cat", "nc", "vc", "oc", "count", "p", "C", "u", "ch", "v", "cn", "i", "cu", "l", "ct", "cb", "con", "r", "cs", "bc", "cp", "f", "cm", "ci", "dc", "lc", "s", "w", "x", "e", "uc", "ce", "cf", "o", "d", "n", "ca", "ac", "k", "cc", "y", "cy", "ec"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport static java.lang.Math.*;\\n\\npublic class Main {\\n\\n    private static final int MOD = (int)1e9 + 7; //998244353;\\n    private static final long INF = (long)1e15;\\n\\n    public Main(FastScanner in, PrintWriter out) {\\n        int X = in.nextInt();\\n        int Y = 2 * X;\\n        boolean[] notPrime = new boolean[Y + 1];\\n        int i = 0;\\n        for (i = 2; i <= Y; i++) {\\n            if (notPrime[i]) continue;\\n            if (i >= X) break; \\n            for (int j = i; j <= Y; j += i)\\n                notPrime[j] = true;\\n        }\\n        out.println(i);\\n    }\\n\\n    private int gcd(int a, int b) {\\n        while (true) {\\n            if (b == 0) return a;\\n            int tmp = a;\\n            a = b;\\n            b = tmp % b;\\n        }\\n    }\\n\\n    private long powm(long x, long p) {\\n        long res = 1;\\n        while (p > 0) {\\n            if (p % 2 == 1)\\n                res = res * x % MOD;\\n            x = x * x % MOD;\\n            p /= 2;\\n        }\\n        return res;\\n    }\\n\\n    public static void main(String[] args) {\\n        PrintWriter out = new PrintWriter(System.out);\\n        // Scanner in = new Scanner(\\n                // new BufferedReader(new InputStreamReader(System.in)));\\n        FastScanner in = new FastScanner(System.in);\\n\\n        Main sol = new Main(in, out);\\n        out.close();\\n    }\\n}\\n\\n// Pair\\nclass Pair<T extends Comparable<? super T>, U extends Comparable<? super U>> implements Comparable<Pair<T, U>> {\\n    T a;\\n    U b;\\n    Pair() { }\\n    Pair(T a, U b) {\\n        this.a = a;\\n        this.b = b;\\n    }\\n\\n    @Override\\n    public String toString() { return \"(\"+a.toString()+\", \"+b.toString()+\")\"; }\\n\\n    @Override\\n    public int hashCode() { return Objects.hash(a, b); }\\n\\n    @Override\\n    public boolean equals(Object obj) {\\n        if(this == obj) return true;\\n        if(obj == null) return false;\\n        if(this.getClass() != obj.getClass()) return false;\\n        Pair that = (Pair) obj;\\n        if(this.a.getClass() != that.a.getClass()) return false;\\n        if(this.b.getClass() != that.b.getClass()) return false;\\n        if(!this.a.equals(that.a)) return false;\\n        if(!this.b.equals(that.b)) return false;\\n        return true;\\n    }\\n\\n    @Override\\n    public int compareTo(Pair<T, U> that) {\\n        int c = (this.a).compareTo(that.a);\\n        if(c == 0) c = (this.b).compareTo(that.b);\\n        return c;\\n    }\\n}\\n\\n\\nclass FastScanner{\\n    private InputStream stream;\\n    private byte[] buf = new byte[1024];\\n    private int curChar;\\n    private int numChars;\\n\\n    public FastScanner(InputStream stream)\\n    {\\n        this.stream = stream;\\n    }\\n\\n    int read()\\n    {\\n        if (numChars == -1)\\n            throw new InputMismatchException();\\n        if (curChar >= numChars){\\n            curChar = 0;\\n            try{\\n                numChars = stream.read(buf);\\n            } catch (IOException e) {\\n                throw new InputMismatchException();\\n            }\\n            if (numChars <= 0)\\n                return -1;\\n        }\\n        return buf[curChar++];\\n    }\\n\\n    boolean isSpaceChar(int c)\\n    {\\n        return c==' '||c=='\\n'||c=='\\r'||c=='\\t'||c==-1;\\n    }\\n\\n    boolean isEndline(int c)\\n    {\\n        return c=='\\n'||c=='\\r'||c==-1;\\n    }\\n\\n    int nextInt()\\n    {\\n        return Integer.parseInt(next());\\n    }\\n\\n    long nextLong()\\n    {\\n        return Long.parseLong(next());\\n    }\\n\\n    double nextDouble()\\n    {\\n        return Double.parseDouble(next());\\n    }\\n\\n    String next(){\\n        int c = read();\\n        while (isSpaceChar(c))\\n            c = read();\\n        StringBuilder res = new StringBuilder();\\n        do{\\n            res.appendCodePoint(c);\\n            c = read();\\n        }while(!isSpaceChar(c));\\n        return res.toString();\\n    }\\n\\n    String nextLine(){\\n        int c = read();\\n        while (isEndline(c))\\n            c = read();\\n        StringBuilder res = new StringBuilder();\\n        do{\\n            res.appendCodePoint(c);\\n            c = read();\\n        }while(!isEndline(c));\\n        return res.toString();\\n    }\\n}\\n", "target": "183", "substitutes": {"MOD": [" modular", " R", " LEVEL", " mod", " J", " rc", " MA", " BASE", " mode", " F", " mult", " C", " E", " exp", " Mod", " X", " B", " D", " I", " Z", " modifier", " MAX", " M", "mod", " GF", " mods", " module", " shift"]}}
{"code": "import java.util.*;\\n \\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int Num = sc.nextInt();\\n    int Dis = sc.nextInt();\\n    int[] Xa = new int[Num];\\n    int[] Ya = new int[Num];\\n    for(int i=0;i<Num;i++){\\n      Xa[i] = sc.nextInt();\\n      Ya[i] = sc.nextInt();\\n    }\\n    int R = 0;\\n    for(int k=0;k<Num;k++){\\n      if(Math.pow(Xa[k],2)+Math.pow(Ya[k],2)<=Math.pow(Dis,2))R++;\\n    }\\n    System.out.println(R);\\n  }\\n}", "target": "42", "substitutes": {"sc": ["cl", "sche", "mc", "sci", "nc", "enc", "scope", "pc", "ser", "com", "ch", "tc", "ss", "sec", " SC", "cur", "sub", "asc", "Sc", "SC", "screen", "bc", "cs", "sw", "src", "cor", "lc", "loc", "c", "cer", "sp", "str", "system", "sq", "uc", "soc", "cli", "cle", "sem", "se", "ner", " Sc", "anc", "sb", "scan", "parse", "osc", "rc", "cc", "cr", "cont", "sch", "parser", "coll", "cam", "esc", "cus", "sync"], "Num": ["Mon", "Non", "Len", "Loc", "ni", "No", "Multiple", "Count", "Mi", "Kim", "Unit", "Part", "num", "nu", "N", "M", "Ul", "Multi", "Pos", "Size", "Nat", "Lim", "Name", "Val", "Block", "Number", "Un", "Gen", "nr", "Ton", "Dim", "Dist", "Ext", "Param", "Ni", "Nob", "Four", "Out", "Min", "Str", "Dir", "Sum", "Mat", "Mult", "Dou", "dim", "Win", "Ne", "Limit", " num", "Ub", "Norm", "Ten", "Ord", "Two", "Du", "Bu", "NUM", "Mu", "Hom", "Desc", "Net"], "Dis": ["Non", "Len", "dis", "Rad", "Is", "Dur", "Li", "DIS", "Di", "Multi", "Pos", "Py", "Lo", "Bi", "Sync", "Com", "Less", "Wr", "Se", "Des", "Dist", "De", "Na", "Ni", "Conf", "Dir", "Pre", "Re", "Ds", "Rel", "Det", "El", "Mis", "Du", "ris", "Dem", "Resp", "Ex", "Res", "Im", "Er", "Ret"], "Xa": ["Yasa", "Pa", "NA", "Ysa", "Xau", "XXu", " Xz", " Xsa", "Pau", "YA", "PA", "XXa", "Nasa", "Xasa", "Na", "Xsa", "Yau", "Theu", " Xu", "Xz", " XA", " Xasa", " Xau", "Xu", "XXA", "XA", "Nsa", "Psa", "XXz", "Thea", "TheA", "Thez"], "Ya": ["Uas", "TYA", "Zp", "Ua", "Shp", "Zar", "YYa", "Sha", "YYas", "Yar", "Zb", "Za", "ya", "Shas", "Yp", "Xb", "Xas", "YA", "Yas", "yar", "Zas", "UA", "Yb", "TYa", "ShA", "Xar", "Ub", "yA", "TYas", "XA", "TYb", "yb", "ZA", "YYA", "YYp"], "i": ["bi", "hi", "pi", "ori", "ni", "p", "iu", "it", "u", "id", "qi", "xi", "ji", "v", "si", "ix", "a", "l", "is", "ri", "r", "uli", "start", "io", "init", "h", "f", "ci", "s", "c", "ini", "ui", "index", "m", "x", "uri", "ip", "di", "e", "I", "ie", "ai", "o", "gi", "d", "mi", "n", "ii", "b", "li", "j", "oi", "in", "chi", "y", "ki", "ti", "fi"], "R": ["RO", "S", "AR", "RG", "C", "J", "N", "RR", "M", "Right", "RS", "Rh", "U", "CR", "r", "F", "LR", "RP", "RN", "Q", "RC", "P", "RA", "Rs", "GR", "BR", "HR", "T", "Result", "L", "Max", " r", "B", "Re", "NR", "V", "K", "KR", "D", "RE", "H", "O", "WR", "RW", "G", "SR", "Res", "W", "X"], "k": ["ky", "sk", "p", "ka", "u", "id", "ko", "ck", "ad", "ke", "km", "ks", "ch", "v", "kh", "kick", "l", "kk", "ik", "r", "block", "z", "dk", "ok", "f", "ek", "c", "key", "ak", "w", "x", "ku", "kw", "kr", "q", "o", "kn", "d", "g", "kl", "b", "n", "kid", "j", "K", "work", "uk", "y", " K", "ki", "spec"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static void main(String[] $){\\n\t\tScanner s=new Scanner(System.in);\\n\t\tint n=s.nextInt();\\n\t\tlong r=0;\\n\t\tint[] b=new int[n];\\n\t\tArrays.fill(b,100000);\\n\t\tfor(int i=1;i<n;++i){\\n\t\t\tint a=s.nextInt();\\n\t\t\tb[i-1]=Math.min(b[i-1],a);\\n\t\t\tb[i]=Math.min(b[i],a);\\n\t\t}\\n\t\tSystem.out.println(Arrays.stream(b).sum());\\n\t}\\n}\\n", "target": "240", "substitutes": {"s": ["S", "ts", "sf", "p", "obs", "ins", "ss", "ks", "rs", "v", "strings", "l", "bis", "is", "es", "qs", "ls", "ws", "fs", "h", "ps", "f", "lines", "os", "c", "ms", "ds", "m", "e", "ses", "abs", "d", "g", "ns", "sets", "gs", "services", "se", "sym", "js", "sb", "xs", "stats", "in", "ans", "parser", "fts", "sync"], "n": ["nn", "nc", "nt", "count", "p", "u", "num", "N", "v", "l", "sn", "z", "h", "len", "f", "c", "ne", "m", "w", "x", "e", "o", "d", "ns", "nb", "j", "net", "k", "in", "number", "y", "en", "t"], "r": ["counter", "p", "rate", "u", "rs", "ar", "res", "l", "lr", "h", "nr", "f", "c", "m", "w", "e", "o", "R", "d", "result", "err", "k", "rc", "range", "t"], "b": ["library", "bi", "fb", "p", "buffer", "mb", "u", "pb", "abb", "rb", "binary", "v", "ba", "l", "db", "ib", "cb", "part", "home", "be", "reb", "lb", "gb", "bs", "f", "br", "orb", "c", "m", "w", "x", "base", "e", "o", "big", "d", "g", "result", "B", "body", "nb", "k", "sb", "bb", "bd", "bin", "y", "bar", "ab", "emb", "wb", "ob", "batch", "t", "array", "boot"], "i": ["bi", "pi", "ori", "ni", "p", "iu", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "l", "data", "mini", "ri", "io", "z", "abi", "f", "ci", "ui", "c", "ini", "index", "eni", "x", "uri", "e", "di", "I", "ie", "ai", "min", "o", "gi", "d", "mi", "ii", "zi", "li", "j", "oi", "k", "in", "y", "t", "ti"], "a": ["api", "p", "na", "u", "next", "span", "ba", "ar", "aa", "z", "A", "pa", "f", "c", "ga", "m", "an", "sa", "ae", "e", "ea", "ai", "min", "alpha", "d", "ca", "ac", "qa", "wa", "aaa", "another", "sta", "j", "fa", "as", "la", "area", "da", "va", "aj"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\tboolean b = false;\\n\t\tfor (int i = 0; i < s.length(); i++) {\\n\t\t\tif ((s.substring(i) + s.substring(0, i)).equals(t)) {\\n\t\t\t\tb = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif (b) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}\\n", "target": "220", "substitutes": {"sc": ["cl", "sche", "sci", "nc", "scope", "pc", "core", "ch", "server", "ss", " SC", "sub", "asc", "sh", "search", "Sc", "SC", "cs", "bc", "sw", "src", "cor", "lc", "c", "cer", " scr", "sp", "st", "system", "uc", "se", "ner", " Sc", "anc", "k", "scan", "osc", "rc", "cc", "cr", "cont", "ec", "esc", "sync"], "sb": [" kb", "Bs", "sf", "bm", "mb", "SB", "abb", "rb", "ss", "si", "db", "cb", "sv", "bf", "bh", "bc", "BB", "gb", "bs", " SB", "sa", "nb", "bb", "bd", "bt", "sg", "ab", "TB", "bp"], "s": ["S", "ts", "sf", "p", "u", "ins", "ss", "rs", "v", "si", "strings", "a", "l", "qs", "series", "sv", "ls", "r", "source", "cs", "ps", "f", "sl", "c", "os", "ds", "tests", "sp", "parts", "e", "str", "string", "ses", "o", "d", "n", "gs", "ns", "sets", "services", "sys", "g", "se", "styles", "js", "xs", "in", "as", "ans"], "t": ["te", "ts", "p", "test", "it", "u", "null", "tr", "the", "unt", "v", "l", "name", "r", "h", "temp", "f", "c", "at", "w", "x", "m", "T", "pt", "string", "ta", "st", "text", "wt", "n", "type", "template", "y", "tt", "rt", "ant", "tf"], "i": ["hi", "bi", "pi", "p", "it", "u", "id", "multi", "qi", "ji", "xi", "v", "si", "ix", "a", "l", "data", "mini", "name", "ri", "part", "r", "io", "z", "info", "abi", "length", "f", "ci", "ui", "c", "ini", "index", "at", "m", "x", "mu", "uri", "e", "ip", "di", "I", "ai", "o", "gi", "shift", "n", "ii", "zi", "li", "j", "oi", "in", "chi", "ti", "fi"], "b": ["bi", "fb", "p", "mb", "u", "pb", "abb", "rb", "v", "zb", "out", "bis", "db", "cb", "l", "a", "ib", "r", "be", "h", "bc", "lb", "bs", "f", "eb", "c", "w", "bo", "base", "e", "o", "d", "n", "g", "B", "nb", "bg", "bb", "xb", "bd", "bt", "y", "wb", "ab", "emb", "ob"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString line = sc.nextLine();\\n\t\tString[] split = line.split(\" \");\\n\t\tint a = Integer.parseInt(split[0]);\\n\t\tint b = Integer.parseInt(split[1]);\\n\t\tint c = Integer.parseInt(split[2]);\\n\t\tString output = null;\\n\t\tif (a < b && b < c) {\\n\t\t\toutput = \"Yes\";\\n\t\t} else {\\n\t\t\toutput = \"No\";\\n\t\t}\\n\t\tSystem.out.println(output);\\n\t\tsc.close();\\n\t}\\n}", "target": "168", "substitutes": {"sc": ["cl", "mc", "sci", "nc", "sf", "scope", "pc", "class", "ch", "sec", "ss", "tc", " SC", "cur", "asc", "sh", "Sc", "SC", "con", "bc", "cs", "cv", "src", "sw", "lc", "ci", "sl", " scr", "sp", "ec", "system", "pl", "uc", "se", " Sc", "scan", "parse", "isc", "osc", "rc", "cc", "cr", "sch", "parser", "cam", "out", "esc", "sync"], "line": ["message", "buffer", "next", "server", "l", "page", "data", "name", "lin", "entry", "value", "header", "source", "block", "row", "input", "cell", "f", "lines", "shell", "letter", "base", "str", "text", "string", "code", "content", "LINE", "reader", "write", "inline", "parse", "in", "log", "file", "job", "word", "Line", "out"], "split": ["single", "arc", "unit", "live", "slice", "it", "multi", "fail", "license", "sit", "sub", "edit", "l", "data", " explode", "search", "part", "its", "piece", "sort", "start", "iter", "source", "fit", "Split", "band", "first", "loc", "lc", "sl", "pair", "filter", "strike", "parts", "pack", "ip", "cut", "broken", "sp", "ie", "set", "fold", "lit", "se", "pieces", "spl", "angle", "up", "parse", "exec", "step", "sel", "join", "file", "word", "section", "separ", "hit", "read", "strip", "sync"], "a": ["api", "p", "u", "ad", "i", "ba", "l", "r", "aa", "A", "pa", "f", "au", "an", "x", "sa", "ae", "ea", "e", "alpha", "d", "n", "ca", "ac", "aaa", "k", "fa", "as", "y", "area", "da", "va", "aj"], "b": ["fb", "bi", "p", "mb", "u", "abb", "rb", "ad", "i", "ba", "l", "ib", "db", "cb", "r", "aa", "be", "z", "bc", "h", "bu", "A", "bs", "eb", "f", "x", "base", "e", "o", "d", "n", "B", "ca", "abc", "ac", "nb", "j", "k", "sb", "bb", "fa", "y", "wb", "ab", "emb", "ob"], "c": ["p", "C", "u", "v", "i", "l", "cu", "cb", "r", "z", "h", "bc", "cs", "f", "dc", "w", "cy", "e", "uc", "cf", "code", "o", "d", "n", "ca", "ac", "k", "cc", "y", "ec"], "output": ["operation", "complete", "status", "generation", "target", "unit", "module", "hidden", "message", "prefix", "null", "next", "xml", "binary", "summary", "ext", "version", "help", "edit", "name", "control", "reason", "continue", "production", "generated", "value", "written", "input", "bool", "document", "letter", "export", "filter", "key", "format", "model", "config", "cut", "text", "string", "left", "plain", "content", "result", "display", "current", "write", "response", "type", "respond", "Output", "section", "out", "console", "default"]}}
{"code": "import java.util.Scanner;\\n\\n/**\\n * B - Golden Coins\\n */\\npublic class Main {\\n  @SuppressWarnings(\"resource\")\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int val = 0;\\n    if (N != 0) {\\n      val = (N / 500) * 1000;\\n      val += (N % 500) / 5 * 5;\\n    }\\n\\n    System.out.println(val);\\n  }\\n}", "target": "180", "substitutes": {"sc": ["cl", "enc", "nc", "sci", "sf", "scope", "pc", "na", "ch", "sec", "ss", " SC", "sub", "sh", "Sc", "SC", "sv", "cb", "bc", "cs", "sw", "src", "cv", "lc", "ci", "sl", "c", "cer", "sp", "acc", "sq", "uc", "ca", "se", "exec", "scan", "osc", "rc", "cc", "cr", "spec", "ec", "esc", "sync"], "N": ["Len", "S", "Num", "NA", "SN", "NL", "C", "Part", "M", " n", "Size", "Y", "Val", "F", "NN", "Q", "P", "NY", "Na", "NO", "T", "Ni", "Col", "NC", "L", "R", "n", "Sum", "Ne", "V", "K", "NB", "D", "NT", "H", "O", "Ns", "NS", "NE", "NG", "NI", "X"], "val": ["bl", "py", "fat", "live", "count", "NL", "num", "serv", "fail", "v", "vel", "pr", "vol", "vl", "line", "vals", "el", "pre", "cel", "db", "Val", "valid", "value", "iter", "bc", "len", "cal", "length", "f", "loc", "sl", "key", "arg", "x", "base", "text", "pt", "col", "min", "max", "n", "V", "pol", "pos", "def", "tx", "obj", "ol", "sel", "rel", "log", "VAL", "doc", "eval", "ind"]}}
