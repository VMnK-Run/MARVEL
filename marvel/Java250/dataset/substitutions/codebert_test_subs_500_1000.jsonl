{"code": "\\nimport java.io.*;\\n\\n/**\\n * ??\u00b4??\u00b0?????\\??? \"x\" ????????????x???3????????????????????????\\n * (1 ??? x ??? 100)\\n * \\n * (ex)\\n * 1 -> 1\\n * 3 -> 27\\n * 100 -> 1000000\\n * \\n * @author shirakawa_d\\n */\\nclass Main {\\n    public static void main(String[] args) {\\n        try {\\n            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n            String line = br.readLine();\\n            System.out.println(getCubicOf(line));\\n        } catch (Exception e) {\\n            System.out.println(e);\\n        }\\n    }\\n\\n    /**\\n     * @param line\\n     *            ??\u00b4??\u00b0x?????\\???\\n     * @return x???3???\\n     */\\n    private static long getCubicOf(String line) {\\n        long x = Long.parseLong(line);\\n        return (long)Math.pow(x, 3);\\n    }\\n}", "target": "36", "substitutes": {"br": ["nr", "ch", "err", "Br", "img", "brush", "string", "tr", "sr", "er", "buf", "yr", "result", "BR", "r", "browser", "cr", "arr", "b", "dr", "gr", "ocr", "ibr", "bar", "obj", "iter", "mr", "fr", "stream", "HR", "bridge", "out", "bro", "wr", "Reader", "bh", "str", "hr", "div", "reader", "i", "bl", "rb"], "line": ["Line", "file", "number", "inline", "cell", "LINE", "string", "code", "base", "name", "lined", "log", "letter", "ine", "le", "r", "ln", "sl", "model", "frame", "b", "entry", "lo", "in", "lines", "url", "obj", "data", "row", "page", "cl", "el", "l", "e", "out", "text", "lin", "source", "look", "parse", "str", "val", "len", "buffer", "f", "server", "nl", "i"], "x": ["xi", "number", "px", "n", "base", "p", "ic", "s", "fx", "index", "t", "z", "b", "xxxx", "xy", "xc", "rx", "data", "lex", "ax", "l", "num", "c", "e", "xes", "h", "X", "bit", "tx", "xs", "xx", "dx", "val", "y", "ix", "xxx", "ex", "xp", "f", "i", "plex"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint A = scanner.nextInt();\\n\t\tint B = scanner.nextInt();\\n\t\tint ans = 0;\\n\t\tif (A < B) {\\n\t\t\tans = B;\\n\t\t\tB -= 1;\\n\t\t} else {\\n\t\t\tans = A;\\n\t\t\tA -= 1;\\n\t\t}\\n\t\tans += Math.max(A, B);\\n\t\tSystem.out.println(ans);\\n\t\tscanner.close();\\n\t}\\n}", "target": "75", "substitutes": {"scanner": ["scaner", "analyinner", " scaninner", "analyer", "scer", "analyner", "anner", "Scanper", "analyter", "anninner", "Scanrator", " scanper", "canrator", "scrator", "scanter", "canner", "Scaner", "Scanner", "caninner", "canker", "canper", "caner", "scanrator", "scanker", "annner", "scner", "Scanker", "canter", "Scanter", "annter", " scanter", "scanper", "scter", "analyker", "scaninner", "Scaninner"], "A": ["a", "API", "Alpha", "U", "E", "I", "O", "HA", "Ang", "AC", "As", "Ab", "AU", "AF", "AB", "AN", "Ca", "C", "AM", "Array", "AMI", "PA", "LA", "AA", "AI", "N", "Adam", "IA", "AS", "D", "Y", "NA", "L", "M", "SA", "Az", "X", "AD", "Area", "Args", "AR", "mA", "BA", "S", "P", "F", "TA", "AV", "AP", "ASC", "An", "FA", "CA"], "B": ["O", "U", "E", "I", "BS", "Ab", "Bi", "ONE", "AB", "J", "C", "T", "BF", "FF", "BE", "NB", "SB", "TB", "MB", "LA", "b", "N", "QB", "R", "BC", "GB", "D", "UB", "Y", "DB", "Z", "L", "M", "X", "LB", "Bs", "BA", "OB", "F", "P", "V", "EB", "BB", "AP", "BL", "BER", "WB", "BI", "BM"], "ans": ["span", " scans", "atches", "ks", "ants", "cons", "Na", "ca", "blocks", "AN", "lan", "anon", "s", "vers", "amps", "offs", "na", "arts", "ANS", "aid", "nan", "ents", "ana", "outs", "an", "aces", "ann", "ars", "ls", "sk", "ds", "ins", "lines", "AS", "cas", "actions", "nn", "ns", "anes", "ases", "plan", "acts", "faces", "reads", "S", "ats", "eps", "aus", "ids", "ions", "aned", "scan", "ons", "as", "features", "asts", "An", "ays", "nas", "rows"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n    static Scanner sc = new Scanner(System.in);\\n    \\n    private static boolean binarySearch(int[] array, int key){\\n        int left = 0;\\n        int right = array.length;\\n        int mid = 0;\\n        while(left < right){\\n            mid = (left + right) / 2;\\n            if(array[mid] == key) return true;\\n            if(array[mid] < key){\\n                left = mid + 1;\\n            }else if(array[mid] > key){\\n                right = mid;\\n            }\\n        }\\n        return false;\\n    }\\n    \\n    private static int[] inputArray(){\\n        int num = sc.nextInt();\\n        int[] array = new int[num];\\n        for(int i = 0; i < num; i++){\\n            array[i] = sc.nextInt();\\n        }\\n        return array;\\n    }    \\n    \\n    public static void main(String[] args){\\n        int[] s = inputArray();\\n        int[] t = inputArray();\\n        int count = 0;\\n        \\n        for(int i = 0; i < t.length; i++){\\n            if(binarySearch(s, t[i])){\\n                count++;\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}\\n", "target": "138", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "screen", "ctx", "cam", "cc", "sec", "soc", "enc", "system", "cr", "osc", "config", "ec", "lc", "sq", "cont", " scr", "bc", "sci", "ci", "cus", "cl", "scope", "se", "c", "src", "isc", "Sc", "asc", "or", "sche", "sem", "cv", " SC", "sch", "slice", "console", "scan", "nc", "uc", "anc", "sp", "sb", "parse", "SC"], "array": ["word", "Array", "index", "pair", "coll", "order", "archive", "data", "map", "id", "allow", "view", "rows", "ram", "window", "ar", "form", "string", "section", "result", "length", "error", "row", "cache", "instance", "area", "database", "element", "number", "collection", "union", "value", "answer", "arrow", "alpha", "sample", "model", "hash", "object", "range", "air", "function", "message", "current", "as", "host", "project", "expression", "a", "list", "file", "address", "group", "batch", "app", "default", "arr", "repeat", "image", "ray", "audio", "align", "grid", "val", "shape", "integer", "auto", "record"], "key": ["search", "char", "value", "code", "string", "ref", "name", "mode", "KEY", "query", "low", "part", "Key", "index", "default", "primary", "one", "link", "entry", "max", "length", "order", "inner", "match", "size", "row", "keys", "range", "min", "q", "type", "param", "x", "next", "id", "field", "y", "shift", "rule", "start", "k"], "left": ["old", "pos", "n", "line", "middle", "diff", "low", "two", "width", "pl", "index", "le", "loc", "fail", "lc", "partial", "max", "rel", "lo", "in", "length", "lower", "inner", "end", "url", "li", "size", "data", "all", "small", "min", "full", "el", "cl", "l", "lt", "half", "last", "limit", "id", "offset", "off", "len", "label", "start"], "right": ["method", "correct", "rc", "rank", "raw", "through", "middle", "r", "one", "work", "partial", "max", "rel", "length", "rand", "rx", "rights", "end", "inner", "error", "row", "order", "range", "ax", "min", "nd", "child", "x", "rh", "head", "third", "Right", "id", "rt", "rad", "three", "progress", "art", "rest", "off", "then", "ack", "hand", "patch", "gh", "day", "round", "start", "rd", "rw"], "mid": ["pid", "pos", "mit", "lim", "ms", "cmd", "sub", "code", "mode", "line", "middle", "low", "m", "hi", "req", "part", "cd", "index", "r", "loc", "doc", "mor", "medium", "partial", "max", "ind", "rel", "start", "in", "meta", "nm", "end", "multi", "rand", "med", "row", "rid", "mr", "min", "no", "cm", "nd", "data", "month", "my", "mi", "master", "module", "id", "grid", "parse", "dev", "mod", "offset", "uid", "len", "Mid", "mad", "dim", "md", "mm", "spec"], "num": ["nu", "number", "nr", "NUM", "cur", "lim", "um", "n", "unit", "umi", "nb", "nt", "index", "loc", "ul", "mn", "mu", "coord", "mat", "mon", "nm", "end", "multi", "nn", "no", "Num", "node", "en", "fn", "init", "sum", "id", "nom", "block", "inc", "con", "uni", "off", "om", "div", "f", "us", "dim"], "i": ["gi", "xi", "I", "is", "io", "si", "n", "di", "p", "oi", "m", "ii", "hi", "on", "chi", "j", "r", "index", "ni", "z", "ini", "mu", "b", "ind", "ai", "in", "phi", "multi", "li", "ci", "data", "ti", "ri", "l", "u", "qi", "c", "bi", "e", "init", "iu", "it", "my", "mi", "x", "pi", "h", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "f", "o", "ui", "info", "g", "start"], "s": ["a", "parts", "w", "si", "n", "string", "p", "m", "os", "r", "sq", "b", "ls", "ds", "ss", "size", "q", "ns", "l", "u", "c", "e", "h", "ts", "types", "id", "S", "d", "y", "v", "f", "o", "g", "strings"], "t": ["test", "token", "the", "w", "target", "n", "pt", "at", "string", "tr", "p", "T", "m", "r", "z", "b", "tree", "tt", "port", "total", "q", "l", "u", "c", "e", "tp", "type", "term", "it", "x", "ts", "text", "h", "ta", "id", "ty", "tail", "d", "y", "v", "ant", "f", "o", "wt"], "count": ["test", "list", "number", "core", "weight", "cur", "err", "n", "code", "base", "loop", "low", "part", "handle", "index", "default", "counter", "ind", "coll", "length", "more", "match", "size", "cache", "use", "total", "data", "child", "c", "other", "type", "last", "limit", "process", "text", "sum", "id", "depth", "age", "offset", "Count", "len", "label", "add", "info", "second", "found", "start", "col", "check"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n    \tScanner sc = new Scanner(System.in);\\n      \tint N = sc.nextInt();\\n      \tint K = sc.nextInt();\\n      \tint count = 1;\\n      \twhile(N >= K){\\n        \tN = N / K;\\n          \tcount++;\\n        }\\n      \tSystem.out.println(count);\\n    }\\n}", "target": "219", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "com", "cc", "tc", "soc", "enc", "osc", "cr", "sq", "ec", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", " SC", "sch", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "sb", "SC"], "N": ["O", "Part", "E", "I", "number", "NG", "NUM", "Na", "NP", "n", "Ns", "NR", "Len", "C", "T", "Ni", "NT", "Ne", "NB", "NY", "Sum", "G", "CN", "NN", "Size", "R", "NO", "D", "size", "Y", "NA", "Z", "Num", "L", "NI", "GN", "M", "NC", "X", "No", "NE", "S", "P", "F", "SIZE", "CNN", "V", "Count", "NS", "NL", "MN"], "K": ["O", "U", "E", "I", "KR", "J", "C", "Sk", "MAX", "KI", "Length", "T", "Key", "SK", "G", "Q", "length", "R", "H", "D", "Y", "KK", "Z", "L", "KE", "M", "PK", "KS", "X", "HK", "CP", "S", "P", "F", "ID", "V", "KO", "NK", "k"], "count": ["test", "number", "i", "weight", "n", "code", "base", "name", "p", "C", "nb", "nt", "part", "index", "counter", "max", "coll", "length", "now", "level", "error", "size", "total", "no", "cache", "child", "num", "c", "type", "last", "out", "keep", "sum", "id", "depth", "d", "offset", "cond", "Count", "key", "found", "info", "call", "start", "check"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\\n            int N = Integer.parseInt(reader.readLine());\\n            String[] array = reader.readLine().split(\" \");\\n            int[] H = new int[N];\\n            for (int i = 0; i < N; i++) {\\n                H[i] = Integer.parseInt(array[i]);\\n            }\\n\\n            boolean ret = true;\\n\\n            for (int i = N - 1; i > 0; i--) {\\n                if (H[i] <= H[i - 1] - 2) {\\n                    ret = false;\\n                    break;\\n                }\\n\\n                if (H[i] == H[i - 1] - 1) {\\n                    H[i - 1]--;\\n                }\\n            }\\n\\n            System.out.println(ret ? \"Yes\" : \"No\");\\n        }\\n    }\\n\\n}\\n", "target": "74", "substitutes": {"N": ["O", "K", "I", "n", "Ns", "Len", "C", "Ni", "T", "J", "Length", "NT", "Ne", "NB", "SN", "W", "Size", "Q", "R", "D", "Y", "NA", "Num", "Z", "B", "L", "NI", "M", "NC", "X", "No", "NE", "S", "P", "F", "Node", "V", "Count", "NS", "Number", "KN", " n"], "array": ["expression", "ash", "list", "number", "address", "value", "string", "angle", "unit", "answer", "section", "arrow", "alpha", "Array", "channel", "arr", "pair", "response", "image", "ray", "analysis", "archive", "object", "instance", "range", "stack", "audio", "area", "h", "rh", "database", "align", "function", "block", "record", "throw", "sequence"], "H": ["O", "K", "U", "E", "I", "HA", "HQ", "He", "DH", "J", "Host", "T", "HTTP", "C", "GH", "AH", "RH", "Array", "CL", "FH", "NH", "G", "HP", "W", "HS", "Q", "PH", "HT", "SHA", "Y", "Ha", "Hi", "Hash", "Z", "B", "L", "HR", "M", "TH", "h", "rh", "X", "MH", "HK", "HH", "Head", "S", "P", "HC", "F", "OH", "ID", "HD", "V", "History", "HM", "EH", "HE", "Ch", "HB", "SH", "CH", "HI"], "i": ["xi", "gi", "adi", "I", "is", "io", "si", "n", "ie", "di", "oi", "cli", "abi", "ii", "hi", "index", "j", "ki", "ni", "z", "mini", "ini", "mu", "b", "isi", "ai", "in", "phi", "multi", "ji", "li", "ti", "ci", "data", "page", "l", "ri", "u", "bi", "qi", "e", "ori", "iu", "eni", "it", "mi", "x", "pi", "h", "fi", "init", "source", "id", "ip", "uri", "d", "y", "v", "ix", "api", "slice", "key", "shift", "anti", "f", "ui", "o", "info", "start"], "ret": ["et", "res", "gt", "re", "fit", "cur", "feat", "ref", "fun", "ft", "exit", "grad", "nt", "result", "Ret", " continue", "rev", "r", "lit", "rets", "cont", "pret", "pat", "dig", "match", "iter", "opt", "det", " result", " fun", "lt", "inter", "success", "rf", "pub", "out", "att", "bit", "rt", "alt", "art", "val", "RET", " alt", "bf", "f", "reg", "flag"]}}
{"code": "import java.util.Scanner;\\nimport java.lang.Math;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner scan = new Scanner(System.in);\\n    long N = scan.nextLong();\\n    long K = scan.nextLong();\\n    scan.close();\\n\\n    long x = N % K;\\n    System.out.println(Math.min(x, K-x));\\n  }\\n}", "target": "22", "substitutes": {"scan": ["pan", "span", "pin", "core", "search", "n", "connect", "query", "ner", "log", "sc", "man", "app", "na", "sync", "skip", "system", "an", "ann", "fan", "start", "in", "inner", "nn", "row", "san", "read", "se", "l", "can", "out", "print", "source", "cat", "ans", "open", "feed", "clean", "server", "Scan", "walk", "watch", "ignore", "reader", "dot", "parse", "gram", "con"], "N": ["O", "U", "E", "I", "NG", "n", "Ns", "J", "C", "T", "NT", "NB", "A", "SN", "G", "W", "NN", "Size", "Q", "R", "D", "Y", "NF", "B", "L", "NM", "NI", "GN", "M", "NC", "X", "NE", "S", "P", "F", "V", "NS", "NL", "MN", " n", "k"], "K": ["O", "U", "E", "I", "ks", "n", "KR", "J", "C", "T", "Key", "SK", "G", "W", "Q", "R", "D", "H", "Work", "Y", "KK", "Z", " k", "L", "KE", "M", "PK", "KS", "X", "HK", "S", "P", "F", "ID", "V", "KN", "k"], "x": ["xi", "wx", "number", "w", "n", "step", "p", "s", " xx", "cross", "index", "j", "na", "z", "XX", "xy", "xc", "rx", "inner", "size", "Y", "ax", "u", "c", "xes", "xs", "X", "h", "tx", "dx", "xx", " X", "id", "d", "ng", "y", "v", "ix", "xxx", "ex", "xp", "f", "i", "k"]}}
{"code": "//package EducationalDPContest;\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\tstatic class FastReader \\n    { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() \\n        { \\n            br = new BufferedReader(new\\n                     InputStreamReader(System.in)); \\n        } \\n  \\n        String next() \\n        { \\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n        \\n        int[] nextIntArray(int n)\\n        {\\n        \tint a[]=new int[n];\\n        \tfor(int i=0;i<n;i++)\\n        \t{\\n        \t\ta[i]=Integer.parseInt(next()); \\n        \t}\\n        \treturn a;\\n        }\\n    } \\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tFastReader sc=new FastReader();\\n\t\tint n=sc.nextInt();\\n\t\tint k=sc.nextInt();\\n\t\tint a[]=sc.nextIntArray(n);\\n\t\t\\n\t\t\\n\t\t//Now we have two changing variables n and k;\\n\t\t//for each i we have k choices;\\n\t\t//I need to reach from 0 to end;\\n\t\tint dp[]=new int[n+1];\\n\t\tArrays.fill(dp, Integer.MAX_VALUE);\\n\t\t//cost to reach 0 will be 0 only;\\n\t\tdp[0]=0;\\n\t\t\\n\t\tfor(int i=0;i<n;i++)\\n\t\t{\\n\t\t\t//now to cost to reach 1; \\n\t\t\t//dp[i];\\n\t\t\t//we can take k steps;\\n\t\t\t//we are already at i;\\n\t\t\tfor(int j=i+1;j<=i+k;j++)\\n\t\t\t{\\n\t\t\t\tif(j<n)\\n\t\t\t\t{\\n\t\t\t\t\tint cost=Math.abs(a[j]-a[i])+dp[i];\\n\t\t\t\t\tdp[j]=Math.min(dp[j],cost);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(dp[n-1]);\\n\\n\t}\\n\t\\n\t\\n\\n}\\n", "target": "241", "substitutes": {}}
{"code": "import java.util.Scanner;\\n         \\n        public class Main {\\n         \\n        \tpublic static void main(String[] args) {\\n                Scanner scan = new Scanner(System.in);\\n                String price = scan.nextLine();\\n                scan.close();\\n         \\n                int otsuri = Integer.parseInt(price) % 1000;\\n                if (otsuri == 0) {\\n                    System.out.println(otsuri);\\n                } else {\\n                    System.out.println(1000 - otsuri);\\n                }\\n            }\\n        }", "target": "184", "substitutes": {"scan": ["chan", "run", "span", "search", "ser", "n", "sr", "er", "see", "connect", "query", "ner", "sc", "app", "r", "pass", "ln", "sync", "system", "an", "report", "ann", "fan", "in", "kin", "inner", "nn", "row", "sin", "san", "all", "read", "se", "can", "out", "keep", "cat", "ans", "feed", "clean", "server", "Scan", "watch", "ignore", "reader", "parser", "parse", "con"], "price": ["pos", "address", "offer", "value", "string", "currency", "version", "name", "base", "line", "query", "options", "grade", "product", " prices", "index", "money", "pie", "seller", "order", "data", "stats", "Price", "point", "position", "priced", "series", "market", "type", "pr", "uri", "style", "val", "quote", "fee", "sp", "info", "cost", "start", "buy", "rice"], "otsuri": ["osURI", "oturi", "osui", "opensiri", "otsuin", "otsui", "opensuin", "hotsuin", "osori", "rotsURI", "ottui", "opsiri", "otturi", "hotsuri", "rotsuin", "opsori", "opensri", "otsiri", "ottori", "opsuri", "osuri", "otiri", "opsURI", "otsori", "opsri", "opensuri", "opsui", "otsURI", "rotsuri", "hotsri", "hotsiri", "ottURI", "otURI", "rotsri", "opensURI", "rotsiri", "otri", "otsri"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tint n;\\n\t\tn = scan.nextInt();\\n\t\tString ss = scan.next();\\n\t\tchar[] c = ss.toCharArray();\\n\\n\t\tint ans = 0;\\n\t\tfor(int i = 0; i <= n-3; i ++) {\\n\t\t\tif(c[i] == 'A' && c[i+1] == 'B' && c[i+2] == 'C') {\\n\t\t\t\tans++;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(ans);\\n\\n\t}\\n}\\n", "target": "110", "substitutes": {"scan": ["run", "pin", "search", "gen", "ser", "see", "connect", "query", "ner", "sc", "na", "r", "ln", "skip", "sync", "system", "an", "ann", "fan", "in", "sci", "inner", "nn", "all", "sign", "san", "win", "read", "se", "l", "inter", "conn", "can", "out", "print", "cat", "look", "slice", "feed", "clean", "server", "Scan", "nl", "walk", "watch", "reader", "iter", "parse", "con"], "n": ["a", "network", "nr", "non", "p", "nb", "s", "nt", "m", "nor", "ne", "j", "nan", "ln", "r", "t", "ni", "z", "sn", "b", "N", "max", "in", "nn", "ns", "l", "en", "fn", "e", "num", "conn", "h", "x", "d", "un", "y", "len", "nc", "f", "o", "net", "g", "k"], "ss": ["sw", "css", "cs", "ms", "si", "string", "sf", "rs", "p", "s", "SS", "sc", "null", "sync", "sv", "sl", "sn", "ls", "lc", "ds", "iss", "ws", "hess", "cus", "ass", "ns", "rss", "ses", "series", "bs", "ess", "su", "self", "S", "WS", "ps", "str", "f", "as", "us", "sb"], "c": ["a", "pc", "esc", "rc", "ch", "cs", "ca", "char", "code", "word", "p", "C", "s", "cc", "ac", "sc", "enc", "loc", "r", "cross", "t", "cr", "ec", "lc", "b", "cf", "xc", "ci", "arc", "cl", "l", "dec", "u", "e", "ce", "ct", "d", "v", "dc", "mc", "nc", "cp", "f", "cu", "uc", "cy", "g", "con", "co"], "ans": ["a", "span", "ks", "ants", "cons", "ations", "cs", "AN", "lan", "s", "ros", "annot", "amps", "offs", "na", "ents", "os", "nan", "ens", "ANS", "anas", "ana", "outs", "an", "aces", "ann", "ars", "ls", "ins", "nas", "atan", "cas", "nn", "san", "ns", "ends", "plan", "can", "acts", "x", "reads", " spans", "ats", "eps", "aus", "es", "ions", "aned", "ons", "anc", "as", "asts", " scans", "runs", "ras"], "i": ["a", "gi", "xi", "I", "is", "io", "si", "di", "p", "oi", "cli", "diff", "m", "ii", "hi", "index", "j", "chi", "t", "ni", "z", "uli", "ini", "mu", "b", "lc", "ai", "phi", "multi", "inner", "li", "ci", "ti", "ji", "data", "l", "qi", "u", "bi", "e", "init", "iu", "eni", "it", "pi", "x", "fi", "source", "id", "ip", "uri", "left", "v", "ix", "api", "slice", "f", "ui", "o", "info"]}}
{"code": "import java.math.BigDecimal;\\nimport java.util.Scanner;\\n\\n \\npublic class Main {\\n \\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint L = sc.nextInt();\\n\t\t\\n\t\tdouble temp = Math.pow(L, 3) / 27;\\n\t\tSystem.out.println(BigDecimal.valueOf(temp));\\n\t\tsc.close();\\n\t\t\\n\t}\\n\t\\n}", "target": "53", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "core", "cur", "cs", "ca", "sub", "cer", "sf", "sr", "cc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "sl", "bc", "sci", "ss", "ci", "cl", "scope", "se", "syn", "c", "src", "Sc", "sche", "sem", "ssl", "sch", "scan", "nc", "uc", "sh", "sp", "sb", "SC"], "L": ["RL", "K", "LG", "E", "I", "Li", "LU", "LV", "C", "T", "Len", "CL", "FL", "LP", "LA", "G", "N", "LC", "R", "LT", "Lo", "Z", "EL", "l", "LI", "UL", "IL", "LM", "dL", "LL", "M", "LD", "X", "DL", "LB", "SL", "P", "S", "F", "V", "ML", "lf", "NL", "LO", " l", "Lu"], "temp": ["flat", "test", "parent", "value", "n", "base", "pt", "elt", "p", "T", "diff", "result", "tem", "letter", "fake", "let", "null", "t", " Temp", "lc", "emp", "cel", "input", "level", "stable", "size", "iter", "ctrl", "min", "l", "dec", "c", "tmp", "out", "offset", "key", "vol", "Temp", "f", "i", "cut"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String str = sc.next();\\n        String[] str2 = new String[3];\\n        str2 = str.split(\"\");\\n        Arrays.sort(str2);\\n        if( !(str2[1].equals(str2[2])) && str2[0].equals(str2[1]) && str2[2].equals(str2[3])) {\\n            System.out.println(\"Yes\");\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n    }\\n}", "target": "33", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "cor", "cc", "ner", "sec", "acc", "enc", "osc", "cr", "ec", "lc", "ocr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", " SC", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC", "spec"], "str": ["br", "err", "char", "n", "string", "code", "tr", "p", "sr", "er", "name", "s", "ner", "result", "exp", "enc", "r", "txt", "pass", "sl", "st", "arr", "b", "doc", "in", "input", "obj", "Str", "data", "fr", "c", "out", "text", "pr", "next", "f", "sp", "STR", "iter", "strings"], "str2": ["Str25", " str5", "br2", "Str52", "stringtwo", "Str0", "arr5", "strone", "formone", "str1", " str12", "form1", "str25", "str5", "string1", "arrtwo", "arr12", "st2", "stringTwo", "arr3", "str52", "string2", "Str5", "brone", "string3", " str1", " strTwo", "err2", "sectwo", "dr2", "sec25", " strone", "Str3", "STR2", "arr1", "strTwo", "errone", "STR1", "strtwo", "str12", "br0", "br1", "str02", "arr2", "dr52", "dr1", "st52", "Str02", "drTwo", "Str2", "Str1", "st1", " str52", "STR25", "Str12", "str0", "dr02", "Strtwo", "err1", "sec1", "str3", "Strone", "STRtwo", "st3", "sec2", "form3", "form2", "StrTwo", " str0", "dr0", " str02", " str3", "err3"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int d = sc.nextInt();\\n        int[][] x = new int[n][d];\\n        int ans = 0;\\n        for (int i=0;i<n;i++)for (int j=0;j<d;j++)x[i][j]=sc.nextInt();\\n        for (int i=0;i<n-1;i++){\\n            for (int j=i+1;j<n;j++){\\n                int data = 0;\\n                for (int k=0;k<d;k++)data+=(x[i][k]-x[j][k])*(x[i][k]-x[j][k]);\\n                if (Math.floor(Math.sqrt(data))==Math.ceil(Math.sqrt(data)))ans++;\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "59", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "cor", "cer", "screen", "com", "cc", "ner", "tc", "soc", "na", "sync", "system", "osc", "cr", "sq", "lc", "cont", " scr", "bc", "sci", "ss", "cus", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "SC", "squ"], "n": ["network", "w", "p", "s", "nb", "m", "cn", "nt", "ne", "r", "ln", "nan", "t", "mn", "z", "an", "sn", "b", "N", "in", "nn", "no", "dan", "ns", "nd", "q", "l", "u", "en", "c", "num", "e", "h", "dn", "un", "y", "v", "len", "nc", "f", "o", "net", "inn"], "d": ["dd", "w", "di", "dy", "p", "s", "m", "ii", "cd", "t", "du", "z", "dt", "b", "ind", "ds", "in", "D", "dh", "nd", "da", "l", "u", "c", "e", "dp", "h", "dn", "dx", "id", "dl", "dc", "dir", "f", "dat", "dim", "sd"], "x": ["xi", "wx", "list", "test", "is", "w", "xe", "code", "expl", "p", "s", "xt", "m", "on", "cross", "index", "na", "fx", "t", "z", "one", "work", "image", "in", "xc", "xy", "rx", "pe", "ax", "q", "l", "u", "c", "e", "xes", "xs", "tx", "X", "h", "xx", "id", "y", "ix", "xxx", "v", "ex", "sex", "xp", "f", "plus", "array"], "ans": ["ks", "ants", "cons", "ations", "AN", "lan", "ops", "s", "nos", "vers", "amps", "offs", "na", "ents", "nan", "os", "ANS", "anas", "an", "sk", "ann", "ars", "ls", "ds", "ins", "atan", "ss", "cas", "nn", "unks", "san", "ns", "can", "reads", "ats", "eps", "aus", "ids", "es", "ions", "aned", "scan", "ons", "anc", "as", "features", " scans", "errors", "nas", "ras"], "i": ["xi", "gi", "I", "is", "io", "si", "di", "ie", "p", "oi", "ii", "hi", "ki", "ni", "z", "ini", "b", "ai", "in", "ji", "li", "ci", "ik", "q", "zi", "l", "qi", "u", "ri", "bi", "c", "e", "ori", "iu", "eni", "it", "mi", "h", "pi", "yi", "id", "ip", "uri", "y", "v", "ix", "api", "f", "ui", "o"], "j": ["xi", "bj", "w", "job", "ja", "jc", "dj", "ie", "dy", "J", "p", "m", "jo", "ii", "ij", "r", "jet", "t", "z", "jj", "js", "jl", "b", "ji", "end", "li", "obj", "ik", "q", "el", "l", "qi", "u", "aj", "oj", "e", "it", "uj", "je", "y", "v", "jen", "ix", "f", "ui", "o", "jp"], "data": ["a", "number", "pos", "dist", "value", "di", "step", "au", "p", "alpha", "result", "batch", "na", "ada", "ul", "memory", "zero", "qa", "valid", "length", "li", "ata", "size", "da", "u", "e", "area", "next", "sum", "la", "id", "function", "style", "offset", "DATA", "ady", "beta", "len", "key", "aa", "shift", "dat", "f", "ui", "o", "ad", "pad"], "k": ["K", "kn", "ask", "kr", "ks", "ch", "w", "ak", "p", "mk", "uk", "ki", "z", "sk", "ek", "b", "ck", "kk", "ke", "ky", "ik", "q", "l", "u", "c", "e", "it", "ka", "dk", "kw", "id", "y", "kid", "v", "kick", "key", "ko", "ok", "f", "o", "g"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    static Scanner scanner = new Scanner(System.in);\\n\\n    public static void main(String[]$) {\\n        int n = scanner.nextInt();\\n        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;\\n        for (int i = 0; i < n; i++) {\\n            int a = scanner.nextInt();\\n            min = Math.min(min, a);\\n            max = Math.max(max, a);\\n        }\\n        System.out.println(max - min);\\n    }\\n}", "target": "214", "substitutes": {"scanner": ["schening", "scaner", "Scanener", "scheker", "nerker", "verer", "scheer", " scanrunner", "nerning", "canener", "scanter", "canner", "Scaner", "Scanner", "nerer", "scanrunner", "Scanrunner", "caner", "scanker", "Scanker", "canter", "verener", " scanning", "Scanter", "verning", "verter", "scanning", "verrunner", "verner", "scanener", "nerner", " scaner", "schener", "Scanning"], "n": ["span", "number", "p", "nb", "s", "m", "nt", "ne", "j", "t", "mn", "z", "ni", "b", "N", "count", "nn", "size", "ns", "l", "u", "en", "c", "num", "e", "conn", "x", "d", "y", "v", "len", "f", "o", "net", "k"], "min": ["span", "MIN", "parent", "minimum", "pos", "initial", "value", "base", "code", "step", "p", "name", "diff", "sort", "average", "m", "sol", "part", "first", "na", "minus", "index", "r", "default", "sa", "mini", "skip", "none", "an", "local", "partial", " Min", "only", "in", "lower", "mean", "small", "size", "sign", "range", "sin", "en", "c", "Min", "e", "init", "area", "x", "next", "sum", "id", "scale", "Mini", "left", "d", "pre", "val", "len", "current", "shift", "act", "div", "f", "from", "mins", "start"], "max": ["best", "res", "pop", "w", "big", "ca", "step", "name", "MAX", "wrap", "diff", "ac", "maximum", "alpha", "part", "first", "wa", "power", "largest", "default", "with", "ma", "Max", "std", "conf", "count", "end", "large", "no", "total", "size", "cache", "ax", "q", "range", "da", "top", "aj", "dec", "init", "can", "last", "and", "limit", "head", "x", "dev", "id", "cat", "sum", "mod", "scale", "inc", "right", "press", "act", "mad", "add", "k", "az", "patch", "active", "plus", "array", "div", "as", "ad", "pad"], "i": ["xi", "gi", "I", "si", "di", "ami", "ie", "p", "oi", "m", "abi", "ii", "on", "hi", "index", "j", "ni", "z", "ini", "b", "ai", "in", "multi", "li", "ci", "ti", "qi", "u", "bi", "e", "iu", "mi", "pi", "x", "fi", "id", "d", "y", "v", "f", "o", "ui", "info"], "a": ["span", "sta", "ga", "ca", "oa", "p", "ac", "alpha", "m", "na", "sup", "index", "A", "sa", "ana", "ma", "z", "an", "ab", "abs", "b", "ai", "ba", "data", "pa", "da", "aj", "area", "am", "next", "la", "d", "va", "aa", "div", "as", "auto", "array", "active", "au"]}}
{"code": "/*\\n* Author. Silviase(@silviasetitech)\\n* For AtCoder\\n*/\\n\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.math.*;\\n\\n\\npublic class Main {\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = sc.nextInt();\\n        int variety = sc.nextInt();\\n        int[] k = new int[n];\\n        int[] preference = new int[variety];\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            k[i] = sc.nextInt();\\n            for (int j = 0; j < k[i]; j++) {\\n                int tmp = sc.nextInt();\\n                preference[tmp-1]++;\\n            }\\n        }\\n        for (int i = 0; i < variety; i++) {\\n            if (preference[i] == n) {\\n                ans++;\\n            } \\n        }\\n        System.out.println(ans);\\n        sc.close();\\n    }\\n    private static int gcd(int m, int n) {\\n        if(m < n) {\\n            return gcd(n, m);\\n        }\\n        if(n == 0){\\n            return m;\\n        } \\n        return gcd(n, m % n);\\n    }\\n}", "target": "169", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "screen", "sr", "ctx", "com", "cam", "cc", "ner", "tc", "soc", "na", "loc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "cont", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "c", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "SC", "con", "spec"], "n": ["a", "network", "nu", "number", "kn", "nr", "w", "p", "nb", "s", "ner", "nt", "cn", "on", "nan", "ne", "ln", "r", "mn", "ni", "z", "t", "an", "sn", "b", "N", "one", "in", "pn", "rn", "nm", "nn", "normal", "no", "ns", "l", "u", "en", "c", "num", "e", "conn", "np", "x", "dn", "nw", "d", "un", "y", "v", "nc", "f", "nl", "o", "net", "g", "inn"], "variety": ["generality", "variiosity", "parieties", "radieties", "varietal", " varietal", "variosity", "variieties", " varially", "pariety", "radiety", "pariosity", "variality", "varius", "parially", "varially", " varieties", " variosity", "variiety", "Variosity", "radially", "varality", "Varius", "parietal", "parius", " varius", "Varieties", "generiety", "generieties", "varieties", "generiosity", "Variety", "radietal", " varality"], "k": ["per", "K", "kn", "ask", "kr", "ks", "w", "ak", "p", "mk", "r", "ki", "km", "z", "sk", "b", "ck", "kk", "kin", "ke", "context", "ku", "ky", "ik", "q", "ijk", "l", "u", "c", "knowledge", "e", "ka", "x", "dk", "kw", "y", "v", "kick", "key", "ko", "ack", "ok", "o", "g"], "preference": ["forevision", "preerences", "refference", "preferred", " prevention", "prevision", "perference", "parknowledge", "interknowledge", " precision", "parreference", "refvention", " prereference", "pererences", "interferred", "prereference", "parference", "parcision", "prevention", "intercision", "precision", "pervision", "percision", "forecision", "references", "interreference", "intervision", "foreference", "refcision", " preerences", " preknowledge", "preknowledge", "foreferred", "pervention", "interference", "perferred"], "ans": ["a", "span", "vals", "ks", "ants", "cons", "params", "cs", "ani", "ations", "blocks", "AN", "lan", "p", "s", "nt", "annot", "amps", "nos", "na", "ents", "nan", "ANS", "os", "ens", "ana", "ni", "outs", "an", "sk", "ann", "vs", "aces", "idents", "ars", "ins", "ls", "ds", "cas", "ians", "ns", "acts", "ams", "x", "types", "faces", "reads", "activation", "ats", "eps", "aus", "ids", "ions", "scan", "ons", "anc", "features", "errors", "nas", "ras"], "i": ["gi", "xi", "a", "I", "is", "io", "ani", "si", "di", "ie", "p", "oi", "cli", "ii", "hi", "ij", "ki", "ni", "uli", "jj", "ini", "b", "ind", "ai", "in", "phi", "ji", "li", "ci", "ti", "ri", "qi", "u", "bi", "l", "c", "e", "ori", "iu", "init", "eni", "mi", "x", "pi", "fi", "id", "ip", "uri", "y", "v", "ix", "api", "uni", "vi", "f", "ui"], "j": ["bj", "pos", "ja", "ani", "si", "ie", "pt", "dj", "J", "p", "jo", "ii", "part", "ij", "ni", "z", "js", "jj", "jl", "b", "ind", "ji", "end", "li", "obj", "l", "aj", "py", "oj", "bi", "u", "it", "pi", "next", " dj", "je", "y", "v", "f", "ui", "jp"], "tmp": ["test", "append", "qq", "nb", "part", "attr", "acc", "sup", "qa", "bp", "vm", "jj", "yy", "mp", "kk", "nm", "ji", "proc", "obj", "perm", "cmp", "aj", "src", "np", "area", "su", "ff", "next", "nom", "pp", "beta", "uni", "seed", "cp", "const", "jp", "temp", "pad", "rb"], "m": ["a", "pm", "ms", "um", "p", "fm", "s", "me", "bm", "man", "mn", "gm", "z", "mini", "an", "mu", "hm", "b", "nm", "dm", "ym", "im", "mr", "cm", "l", "u", "num", "c", "e", "M", "mi", "x", "h", "am", "dn", "sm", "d", "y", "v", "mc", "om", "wm", "f", "o", "g", "md", "mm", "mid"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\t@SuppressWarnings(\"resource\")\\n\tpublic static void main(String args[]) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint n = scanner.nextInt();\\n\t\tint m = scanner.nextInt();\\n\t\tint[] l = new int[n];\\n\\n\t\tfor (int i = 0; i < m; i++) {\\n\t\t\tl[scanner.nextInt() - 1]++;\\n\t\t\tl[scanner.nextInt() - 1]++;\\n\t\t}\\n\\n\t\tfor (int i = 0; i < l.length; i++) {\\n\t\t\tSystem.out.println(l[i]);\\n\t\t}\\n\\n\t}\\n}", "target": "57", "substitutes": {"scanner": ["scaner", "scanr", "Scanener", " scaninner", "parsener", "nerinner", "canler", "scaniner", "Scanr", "nerker", "nerr", "kinner", "parseinner", "anner", "annker", "verer", "scanler", "anninner", "parseer", "verler", "kininer", "hanning", "nerning", "parseker", "canener", "scanter", "canner", "Scaner", "kinker", "Scanler", "Scanner", "nerer", "caninner", "canker", "caner", " scanr", "hanker", "scanker", "annner", "Scanker", "canter", " scanning", "Scanter", "caniner", "verter", "scanning", "kinener", "verner", "scanener", "haner", "Scaniner", "nerner", "scaninner", "Scaninner", "hanner", "Scanning"], "n": ["w", "p", "nb", "ii", "j", "r", "ln", "t", "mn", "z", "sn", "b", "N", "in", "count", "nn", "size", "u", "en", "c", "num", "e", "h", "x", "d", "y", "v", "len", "nc", "f", "nl", "o", "net", "k"], "m": ["w", "p", "s", "j", "r", "mn", "z", "hm", "b", "in", "length", "nm", "size", "all", "cm", "u", "en", "c", "e", "M", "mi", "h", "x", "d", "y", "v", "f", "o", "dim", "mm", "k"], "l": ["list", "wl", "p", "lb", "le", "ul", "ln", "r", "t", "sl", "ls", "lc", "b", "jl", "lo", "length", "lv", "li", "lis", "el", "rl", "lp", "u", "fl", "L", "c", "e", "lt", "lr", "kl", "lin", "la", "left", "dl", "ll", "v", "ol", "lf", "like", "nl", "o"], "i": ["xi", "gi", "I", "si", "ie", "di", "p", "oi", "ii", "hi", "chi", "j", "index", "ni", "z", "mini", "mu", "b", "lc", "ai", "phi", "ji", "multi", "li", "ti", "ci", "data", "zi", "ri", "qi", "u", "bi", "c", "e", "init", "iu", "it", "mi", "x", "pi", "fi", "id", "ip", "uri", "d", "v", "ix", "key", "f", "ui", "o", "info", "start"], "nextInt": ["NextShort", "firstInt", "lastint", "nextLong", "lastExt", "NextInteger", "nextShort", "prevInteger", " nextInteger", "firstint", " nextLong", "deepint", "lastINT", " nextint", "NextINT", "firstINT", "lastLong", "nextExt", " nextExt", " nextINT", "lastInt", "lastInteger", "prevInt", "NextLong", "nextINT", " nextShort", "prevLong", "nextint", "NextExt", "NextInt", "prevShort", "deepInteger", "Nextint", "firstExt", "deepINT", "nextInteger", "deepInt"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main\\n{\\n    public static void main(String []args) throws IOException {\\n    \tFastScanner in  = new FastScanner(System.in);\\n    \tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false); \\n    \tsolve(in, out);\\n    \tin.close();\\n    \tout.close();\\n    }\\n    static long gcd(long a, long b){ return (b==0) ? a : gcd(b, a%b); }\\n    static int gcd(int a, int b){ return (b==0) ? a : gcd(b, a%b); }\\n    \\n    public static int[] generatePrimes(int n) {\\n\t\tboolean[] prime = new boolean[n + 1];\\n\t\tArrays.fill(prime, 2, n + 1, true);\\n\t\tfor (int i = 2; i * i <= n; i++)\\n\t\t\tif (prime[i])\\n\t\t\t\tfor (int j = i * i; j <= n; j += i)\\n\t\t\t\t\tprime[j] = false;\\n\t\tint[] primes = new int[n + 1];\\n\t\tint cnt = 0;\\n\t\tfor (int i = 0; i < prime.length; i++)\\n\t\t\tif (prime[i])\\n\t\t\t\tprimes[cnt++] = i;\\n\t\treturn Arrays.copyOf(primes, cnt);\\n\t}\\n    static class FastScanner{\\n\tBufferedReader reader;\\n\tStringTokenizer st;\\n\tFastScanner(InputStream stream){reader=new BufferedReader(new InputStreamReader(stream));st=null;}\t\\n\tString next(){while(st == null || !st.hasMoreTokens()){try{String line = reader.readLine();if(line == null){return null;}\t\t    \\n\t     st = new StringTokenizer(line);}catch (Exception e){throw new RuntimeException();}}return st.nextToken();}\\n\tString nextLine()  {String s=null;try{s=reader.readLine();}catch(IOException e){e.printStackTrace();}return s;}\t    \t  \t\\n\tint    nextInt()   {return Integer.parseInt(next());}\\n\tlong   nextLong()  {return Long.parseLong(next());}\t\t\\n\tdouble nextDouble(){return Double.parseDouble(next());}\\n\tchar   nextChar()  {return next().charAt(0);}\\n\tint[]  nextIntArray(int n)         {int[] arr= new int[n];   int i=0;while(i<n){arr[i++]=nextInt();}  return arr;}\\n\tlong[] nextLongArray(int n)        {long[]arr= new long[n];  int i=0;while(i<n){arr[i++]=nextLong();} return arr;}\t\\n\tint[]  nextIntArrayOneBased(int n) {int[] arr= new int[n+1]; int i=1;while(i<=n){arr[i++]=nextInt();} return arr;}\t    \t\\n\tlong[] nextLongArrayOneBased(int n){long[]arr= new long[n+1];int i=1;while(i<=n){arr[i++]=nextLong();}return arr;}\t    \t\\n\tvoid   close(){try{reader.close();}catch(IOException e){e.printStackTrace();}}\t\t\t\t\\n    }\\n    \\n    /********* SOLUTION STARTS HERE ************/\\n    \\n    private static void solve(FastScanner in, PrintWriter out){\\n        int n = in.nextInt();\\n        int a[] = new int[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            a[i] = in.nextInt();\\n        }\\n        long sum=0L;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=i+1;j<n;j++)\\n            {\\n                sum += 1L*a[i]*a[j];\\n            }\\n        }\\n        \\n        out.println(sum);\\n    }\\n    /************* SOLUTION ENDS HERE **********/\\n}", "target": "126", "substitutes": {"in": ["run", "exec", "din", "method", "file", "pin", "err", "In", "bin", "er", "socket", "log", "r", "pass", "ln", "this", "cin", "ini", "work", "ins", "inside", "inf", "input", "inner", "kin", "image", "url", "data", "sin", "win", "l", "c", "init", "h", "x", "lin", "source", "id", "inc", "d", "con", "path", "gin", "again", "nin", "login", "isin", "ssl", "buffer", "scan", "f", "g", "IN", "inn"], "out": ["Out", "plain", "exec", "parent", "timeout", "io", "w", "client", "window", "err", "png", "In", "bin", "string", "code", "output", "write", "cli", "user", "log", "r", "sync", "outs", "copy", "ini", "doc", "writer", "image", "lib", "input", "inner", "error", "obj", "cache", "lock", "outer", "init", "conn", "source", "inc", "call", "path", "OUT", "v", "again", "buffer", "ex", "connection", "server", "o", "net", "temp", "IN"], "a": ["fa", "ga", "ar", "ca", "au", "p", "oa", "ia", "alpha", "ac", "aaa", "na", "wa", "A", "sa", "ea", "qa", "aba", "ma", "ab", "an", "ai", "ae", "ba", "pa", "da", "l", "aj", "u", "c", "e", "am", "x", "area", "la", "d", "va", "y", "aa", "f", "o", "ama", "ad"], "b": ["w", "fa", "ga", "bin", "base", "bb", "gb", "p", "nb", "lb", "m", "bd", "eb", "r", "A", "bytes", "wb", "ab", "ib", "bad", "pb", "bc", "ba", "B", "l", "u", "bi", "c", "mb", "e", "binary", "fb", "bs", "x", "h", "id", "d", "bh", "y", "db", "v", "bf", "aa", "f", "as", "o", "sb", "g", "be", "ad", "rb"], "n": ["network", "p", "nb", "m", "cn", "nt", "ne", "r", "nan", "t", "none", "z", "sn", "N", "count", "no", "size", "normal", "nn", "ns", "l", "u", "num", "c", "en", "e", "x", "d", "y", "v", "len", "nc", "f", "o", "g", "net", "k"], "prime": ["test", "force", "tri", "ure", "live", "pure", "code", "ve", "priority", "exe", "power", "pose", "slave", "pse", "proxy", "te", "primary", "note", "tie", "fake", "thin", "ge", "sample", "nice", "none", "ate", "ite", "tree", "pie", "edge", "match", "size", "chy", "multiple", "pe", "use", "ne", " Prime", "map", "ape", "se", "date", "profile", "archive", "pr", "index", "urse", "Prime", "orate", "square", "scale", "zero", "slice", "seed", "key", "shadow", "une", "zip", "ignore", "stage", "info", "rice"], "i": ["xi", "gi", "I", "is", "io", "si", "ie", "di", "p", "oi", "abi", "ii", "hi", "chi", "index", "ni", "z", "ini", "mu", "ind", "ai", "phi", "ji", "multi", "li", "ci", "ti", "ik", "q", "zi", "l", "qi", "u", "bi", "ri", "c", "e", "init", "iu", "it", "ori", "mi", "x", "pi", "h", "fi", "yi", "id", "ip", "uri", "y", "v", "ix", "api", "vi", "f", "ui", "o", "info", "k"], "j": ["xi", "bj", "ch", "br", "job", "ja", "si", "ie", "di", "dy", "dj", "J", "m", "jo", "ii", "ij", "ni", "z", "js", "jj", "jl", "ind", "ji", "li", "obj", "fr", "l", "aj", "u", "oj", "bi", "qi", "e", "ori", "h", "x", "adj", "uj", "d", "y", "v", "uni", "vi", "key", "o", "ui", "k", "jp"], "primes": ["preizes", "Prizes", "plime", "preimes", "ptimes", "pimes", "pizes", " prtimes", "prions", " prizes", "pions", "preime", "pltimes", "Prions", "plises", "Prises", "prizes", "pime", " prises", " pruses", "puses", "plimes", "prtimes", "preuses", "pruses", "Prime", " prions", "Primes", "Prtimes", "prises"], "cnt": ["ecnt", "pnt", "Cnt", "acnt", "ecNT", "pnc", "cct", "Ccount", "pct", "cpt", " cnc", "acnc", "CNT", "Cpt", "cnd", " cnd", "acct", "ecpt", " cNT", "lcpt", "lcnd", "acNT", "Cnd", "eccount", " cpt", "cnc", "lcNT", " cct", "cNT", "lcnt", "pNT", "ccount", " ccount"], "reader": ["per", "dd", "file", "rc", "re", "io", "w", "ro", "handler", "rot", "parser", "er", "ner", "loader", "player", "r", "driver", "this", "dr", "writer", "reading", "port", "manager", "input", "inner", "rer", "keeper", "rx", "data", "read", "e", "it", "h", "or", "rr", "oder", "Reader", "ler", "ry", "rest", "slice", "feed", "buffer", "enter", "f", "server", "iter", "parse"], "st": ["sw", "sta", "string", "pt", "step", "stop", "store", "ste", "sts", "ft", "nt", "strip", "sc", " est", "first", "sth", "service", "inst", "r", "sa", "stri", "t", "est", "cr", "sl", "sn", "ost", "ld", "fe", "std", "tt", "ss", "end", "pe", "fr", "nd", "l", "se", "ast", "ist", "stress", "ts", "mt", "pr", "ct", "rt", "d", "str", "rest", "ut", "const", "sh", "sp", "ST", "start", "bl", "St"], "stream": ["test", "file", "sw", "is", "io", "w", "Stream", "client", "handler", "string", "raw", "output", "socket", "m", "user", "r", "valid", "channel", "this", "resource", "document", "writer", "response", "port", "transform", "input", "context", "serial", "data", "row", "object", "trans", "pool", "h", "source", "body", "v", "feed", "buffer", "connection", "f", "server", "host", "temp", "view"], "line": ["Line", "inline", "cell", "LINE", "string", "code", "base", "name", "p", "value", "letter", "r", "le", "pass", "sl", "one", "link", "frame", "lc", "entry", "lo", "comment", "lines", "end", "error", "data", "row", "pe", "page", "cl", "l", "c", "e", "text", "lin", "block", "d", "style", "str", "val", "v", "lf", "character", "shell", "f", "o", "up", "co"], "s": ["comments", "is", "si", "string", "space", "rs", "p", "ings", "m", "gs", "os", "r", "sets", "bytes", "t", "sl", "storage", "js", "abs", "ls", "ds", "ins", " objects", "lines", "ss", "ws", "letters", "ns", "l", " strings", "se", "c", "e", "ses", "h", "ts", "ans", "S", "d", "ps", "str", "es", "shell", "f", "services", "as", "o", "array", "g", "sb", "strings"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tchar[] c = s.toCharArray();\\n\t\tchar[] start_black = new char[s.length()];\\n\t\tchar[] start_white = new char[s.length()];\\n\t\tint bCount = 0;\\n\t\tint wCount = 0;\\n\t\tfor(int i = 0; i <s.length(); i++) {\\n\t\t\tif(i%2==0) {\\n\t\t\t\tstart_black[i] = '0';\\n\t\t\t\tstart_white[i] = '1';\\n\t\t\t}\\n\t\t\telse {\\n\t\t\t\tstart_black[i] = '1';\\n\t\t\t\tstart_white[i] ='0';\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i = 0; i < s.length(); i++) {\\n\t\t\tif(c[i] != start_black[i]) {\\n\t\t\t\tbCount++;\\n\t\t\t}\\n\t\t\tif(c[i] != start_white[i]) {\\n\t\t\t\twCount++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(Math.min(wCount, bCount));\\n\t}\\n}\\n", "target": "146", "substitutes": {"sc": ["pc", "esc", "rc", "ch", "desc", "cur", "sf", "cc", "ner", "sec", "acc", "enc", "r", "sync", "system", "sl", "cr", "osc", "ec", " scr", "bc", "sci", "ss", "proc", "cus", "cl", "scope", "se", "stream", "src", "Sc", "asc", "out", " SC", "scan", "nc", " Sc", "f", "uc", "anc", "sh", "sp", "sb", "g", "SC"], "s": ["a", "fs", "parts", "is", "settings", "w", "cs", "si", "n", "string", "sf", "space", "p", "m", "gs", "os", "r", "sets", "t", "south", "sv", "sl", "b", "ls", "ins", "in", "ss", "ws", "letters", "ns", "l", "sys", "se", "u", "ses", "e", "src", "h", "su", "xs", "source", "S", "d", "str", "v", "sites", "f", "services", "o", "sb", "g", "strings"], "c": ["ch", "w", "cs", "csv", "char", "n", "code", "color", "p", "C", "ctx", "cc", "m", "r", "t", "config", "b", "lc", "xc", "ci", "l", "u", "e", "ce", "x", "h", "d", "y", "v", "dc", "f", "cu", "cy", "g", "k", "col"], "start_black": ["start___white", "startPwhite", "start_gray", "start_brown", "startPgray", "start_puff", " start_puff", "startPblack", "start_alpha", "start___gray", "startPlight", "end_ady", " start_alpha", "start___ady", "end_black", "start___black", "start_light", "end_gray", "start_ady", "start___brown", "end_white", "end_light", "end_brown"], "start_white": ["start67white", "start_brown", "stop_wh", "stop_brown", "start67scale", " start_scale", "start_wh", "start_scale", "stop_white", "end_black", "start_square", "start67black", "end_wh", "stop_square", "stop_black", "end_white"], "bCount": ["bCast", "bbCast", "bWidth", " bCast", "uFlag", "bSize", "wWidth", "bGroup", "bbCount", " bSize", " bcount", "bcount", "wGroup", "wFlag", "ucount", "bbSize", "bbWidth", " bWidth", "uCount", "bbcount", "wcount", " bFlag", "wSize", "uGroup", "bFlag", "wCast", " bGroup"], "wCount": ["fTime", "wbcount", "fTable", "fGroup", "wTime", "bSize", "wbCount", "bTime", "wTable", "fcount", "wbCounter", "bcount", "wGroup", " wTime", " wTable", "hCount", "fSize", " wcount", "fwcount", "fCount", "fwGroup", "wcount", "fwCount", "hcount", "bCounter", "hCounter", " wGroup", "wSize", " wSize", "wCounter", "fwTable"], "i": ["xi", "I", "io", "si", "di", "index", "ini", "b", "multi", "iu", "it", "pi", "fi", "id", "ix", "off", "ui", "info", "is", "ie", "p", "cli", "ii", "mu", "lc", "ai", "phi", "ji", "li", "u", "mi", "h", "yi", "uri", "ip", "o", "gi", "ei", "m", "hi", "sup", "chi", "l", "init", "eni", "my", "x", "field", "api", "vi", "a", "oi", "abi", "j", "t", "ni", "z", "in", "ci", "ti", "zi", "ri", "qi", "bi", "e", "source", "block", "d", "y", "v", "slice", "f"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner scan = new Scanner(System.in);\\n\\n    int n = scan.nextInt();\\n    int cnt = 0;\\n\\n    outside:for(int i = 0; i <= n/4; i++){\\n      for(int j = 0; j <= n/7; j++){\\n        if(4*i + 7*j == n){\\n          System.out.println(\"Yes\");\\n          cnt++;\\n          break outside;\\n      }\\n    }\\n  }\\n\\n    if(cnt==0)\\n      System.out.println(\"No\");\\n    }\\n  }\\n", "target": "172", "substitutes": {"scan": ["run", "chan", "get", "search", "store", "connect", "query", "ner", "log", "sc", "wait", "r", "skip", "system", "sync", "sn", "ann", "an", "in", "ss", "nn", "san", "win", "read", "se", "sys", "can", "out", "cat", "look", "feed", "server", "Scan", "nl", "walk", "watch", "stat", "iter", "parse", "check"], "n": ["nu", "network", "a", "number", "nr", "w", "p", "nb", "s", "nt", "m", "ne", "r", "ln", "mn", "t", "ni", "z", "sn", "b", "N", "in", "nn", "size", "no", "ns", "l", "u", "num", "c", "fn", "e", "conn", "x", "d", "y", "v", "len", "nc", "f", "nl", "o", "net", "g", "k"], "cnt": ["Cnt", "lcnc", "cct", "Cno", "ucNT", "Cnc", "cint", "pcnd", "cno", "lcount", "pcnt", "pcct", " count", "pcount", "count", "CNT", " cnd", "cnd", " cint", "ucount", "ucnt", " cno", "Cnd", "Cct", "cnc", "lcNT", " cct", "pcint", "Count", "ucnc", "Cint", "pcno", "cNT", "lcnt"], "i": ["gi", "xi", "I", "is", "io", "si", "di", "ie", "p", "ii", "hi", "index", "ni", "z", "ini", "mu", "ai", "in", "phi", "ji", "li", "ci", "zi", "qi", "u", "bi", "init", "iu", "eni", "mi", "pi", "yi", "x", "id", "ip", "y", "ix", "v", "ui", "info"], "j": ["bj", "ja", "si", "jc", "dj", "J", "p", "jo", "ii", "ij", "ni", "z", "jj", "js", "jl", "b", "ji", "li", "obj", "q", "l", "qi", "u", "oj", "c", "bi", "e", "aj", "it", "x", "h", "kj", "uj", "d", "je", "y", "v", "f", "o", "ui", "k", "jp"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\n/**\\n * Created by Ayushi on 16 Feb 2020.\\n * Problem:\\n * Round:\\n */\\n\\npublic class Main {\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String temp = br.readLine();\\n        int n = Integer.parseInt(temp);\\n        String[] ans = new String[n];\\n        int a = 0;\\n        int m = 1;\\n        HashMap<String, Integer> hmap = new HashMap<>();\\n        hmap.put(\"\", 0);\\n        for (int i = 0; i < n; i++) {\\n            temp = br.readLine();\\n\\n            if (hmap.containsKey(temp)) {\\n                hmap.replace(temp, hmap.get(temp)+1);\\n                m = Math.max(m, hmap.get(temp));\\n                ans[i] = \"\";\\n            }\\n            else {\\n                hmap.put(temp, 1);\\n                ans[i] = temp;\\n                a++;\\n            }\\n        }\\n        br.close();\\n\\n        Arrays.sort(ans);\\n        for (int j = n-a; j < n; j++) {\\n            if (hmap.get(ans[j]) != m) {\\n                ans[j] = \"\";\\n            }\\n        }\\n        Arrays.sort(ans);\\n        for (int k = 0; k < n; k++) {\\n            if (!(ans[k].equals(\"\"))) System.out.println(ans[k]);\\n        }\\n    }\\n}\\n", "target": "235", "substitutes": {"br": ["ctr", "io", "err", "Br", "img", "tr", "sr", "er", "buf", "fm", "yr", "ner", "BR", "nor", "handle", "r", "browser", "jar", "cr", "arr", "ab", "abs", "b", "dr", "bar", "gr", "ocr", "bc", "mr", "cm", "fr", "HR", "bs", "ber", "bridge", "lr", "wr", "bro", "ler", "fore", "bh", "hr", "sp", "orb", "reader", "cb", "bl", "rb"], "temp": ["old", "get", "err", "pt", "make", "dest", "index", "txt", "null", "mini", "copy", "empty", "partial", "emp", "data", "full", "font", "tmp", "id", "style", "thread", "str", "pre", "buffer", "json", "cp", "time", "md", "zip", "iter", "xml", "w", "form", "base", "request", "raw", "name", "p", "unit", "item", "write", "result", "loc", "valid", "lc", "cont", "M", "mi", "out", "h", "path", "ex", "phrase", "dat", "pattern", "mm", "wr", "gi", "test", "pm", "mag", "output", "tem", "fake", "model", "original", "input", "now", "cm", "tw", "num", "c", "type", "body", "format", "api", "amp", "current", "clean", "Temp", "stuff", "wrap", "flat", "exec", "parent", "template", "magic", "modified", "tt", "prefix", "py", "text", "source", "content", "v", "seed", "key"], "n": ["network", "number", "w", "p", "s", "nb", "nt", "cn", "ne", "nan", "ln", "t", "ni", "z", "mn", "an", "sn", "b", "N", "max", "count", "nn", "no", "ns", "l", "u", "num", "c", "en", "e", "h", "x", "d", "un", "y", "v", "len", "nc", "f", "o", "net"], "ans": ["span", "ants", "asters", "outs", "ars", "atts", "atan", "works", "anes", "anners", "antis", "names", "aned", "angs", "ays", "lan", "man", "ANS", "ens", "ins", "grades", "ians", "ases", "plan", "can", "eps", "aos", "ions", "anks", "nas", "parts", "ks", "ations", "cs", "params", "ani", "oss", "ones", "s", "amps", "na", "ents", "ands", "os", "anas", "ana", "ann", "leans", "cas", "aning", "ns", "ams", "xs", "words", "ats", "ps", "anc", "as", "ras", "vals", "cons", "AN", "anon", "vers", "an", "vs", "ls", "ds", "cases", "ads", "acers", "aus", "ids", "photos", "ons"], "a": ["span", "w", "ak", "ami", "p", "au", "s", "ia", "ac", "alpha", "ima", "wa", "r", "A", "sa", "ana", "z", "ma", "an", "b", "ai", "count", "all", "da", "l", "aj", "u", "c", "e", "am", "h", "x", "area", "mA", "la", "d", "y", "mac", "len", "aa", "f", "o", "active", "ama"], "m": ["pm", "w", "ms", "um", "p", "fm", "s", "r", "t", "mn", "z", "ma", "an", "mu", "b", "gm", "mini", "max", "in", "mean", "im", "cm", "min", "l", "u", "num", "c", "e", "M", "am", "h", "pi", "x", "mi", "sm", "d", "y", "v", "mc", "om", "mad", "f", "o", "g", "mm"], "hmap": ["HMap", "bhpack", "hhmap", "hrcode", "shMAP", "hpack", "rhmap", "uhap", "uhhash", "mpack", " hgroup", "hhhash", " hmaps", "hashgroup", "bhblock", "mblock", "shMap", "uhapper", "hblock", "hrmap", "hdict", " hmm", " hcode", "Hmm", " hblock", "happer", "hMap", " hcap", "bhmap", "Hcap", "mm", " hap", "shmap", "mcode", "hmaps", " hdict", "phMAP", "uhmap", "hashmap", "hrmodule", "rhgroup", "Hgroup", "shmaps", "phmodule", "rhap", "hrMAP", "hashcap", "hap", "shm", "mmap", "bhcode", "Hdict", "Hmaps", "hmodule", "hMAP", "Hap", " hmodule", "shdict", " hMap", "shap", "mdict", " hhash", "Hmap", "hashMap", " hMAP", "phmap", "hgroup", "rhMap", "hcode", "hhapper", "phcode", " hpack", " happer", "hm", "hcap", "rhdict", "hmm", "hhap", "mMAP", " hm", "rhmm", "hhash"], "i": ["gi", "xi", "I", "is", "io", "si", "ie", "di", "p", "oi", "cli", "ii", "index", "ni", "z", "ini", "b", "ai", "ji", "multi", "li", "ci", "zi", "ri", "qi", "u", "bi", "e", "ori", "iu", "mi", "pi", "h", "fi", "id", "ip", "uri", "y", "v", "ix", "api", "f", "ui"], "j": ["bj", "err", "ja", "job", "ani", "jc", "ie", "dj", "J", "p", "jo", "ii", "ij", "rev", "jet", "z", "js", "jj", "b", "jl", "ind", "ji", "li", "obj", "ik", "all", "q", "fr", "el", "l", "aj", "qi", "oj", "c", "other", "it", "out", "x", "pr", "adj", " dj", "uj", "je", "y", "v", "jen", "ix", "key", "f", "o", "ui", "g", "jp"], "k": ["K", "kn", "ask", "kr", "ks", "w", "ak", "p", "unk", "uk", "kh", "ki", "z", "km", "work", "ek", "sk", "ck", "kk", "kin", "ke", "ku", "ky", "ik", "kat", "q", "ijk", "u", "c", "ka", "h", "dk", "x", "kw", "kj", "id", "d", "y", "kid", "v", "kick", "key", "ack", "ko", "ok", "f", "o", "gh", "g"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n    \tScanner sc = new Scanner(System.in);\\n    \ttry {\\n    \t\tfinal int A1 = sc.nextInt();\\n    \t\tfinal int A2 = sc.nextInt();\\n    \t\tfinal int A3 = sc.nextInt();\\n\\n    \t\tif (A1 + A2 + A3 >= 22) {\\n    \t\t\tSystem.out.println(\"bust\");\\n    \t\t} else {\\n    \t\t\tSystem.out.println(\"win\");\\n    \t\t}\\n\\n    \t} finally {\\n    \t\tsc.close();\\n    \t}\\n    }\\n}\\n", "target": "129", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "core", "cur", "desc", "cs", "ser", "ca", "cer", "sf", "ctx", "com", "cam", "cc", "sec", "tc", "exp", "cli", "enc", "this", "osc", "system", "cr", "sq", "ec", "lc", "sync", "class", "cont", "coll", "bc", "sci", "ss", "proc", "cus", "cl", "scope", "se", "l", "c", "src", "Sc", "asc", "sche", "cv", " SC", "sch", "scan", "nc", "uc", "anc", "server", "sp", "sb", "parse", "SC"], "A1": ["aPart", "C3", " A6", "a7", " A7", "a2", "C1", "A7", "a1", "Ca1", "A6", " APart", "C2", "APart", "a6", "CaPart", "C6", "Ca7", "Ca2", "a3"], "A2": [" A92", "A02", "a02", " A4", " A02", "A4", "a2", "A92", "a1", "P3", "As2", "As92", "a92", "As4", "a4", "As02", "P2", "P4", "a3", "P1"], "A3": ["alpha6", "Athird", "alphathird", " A6", "a5", " A4", "alpha3", "NA5", "A4", " A5", "a2", " Athird", "A5", "alpha2", "NA2", "A6", "a4", "NA4", "a6", "NA3", "athird", "a3"]}}
{"code": "import java.util.Map.Entry;\\nimport java.util.*;\\nimport java.math.*;\\nimport org.w3c.dom.css.Counter;\\n  \\npublic class Main{\\n    public static void main(final String[] args){\\n       \\n        final Scanner sc = new Scanner(System.in);\\n        //int N =sc.nextInt();\\n        ArrayList<Integer>  allmen =new ArrayList <Integer>();\\n        //HashSet doubled =new HashSet<Integer>();\\n        \\n        //Set<?> yourHashSet = new HashSet<>();\\n        //List<?> sortedList = new ArrayList<>(yourHashSet);\\n        \\n        int N = sc.nextInt();\\n        int K = sc.nextInt();\\n        int counter =0;\\n        //HashSet doubled =new HashSet<Integer>();\\n        for(int i =0;i <N;i++){\\n            allmen.add(i, sc.nextInt());\\n        }\\n        Collections.sort(allmen);\\n        for(int i =0;i <K;i++){\\n            counter += allmen.get(i);\\n        }\\n\\n        System.out.println(counter);\\n\\n\\n        //System.out.println(ans);\\n    }\\n}\\n    \\n\\n/*         for(int i=0;i<N-1;i++){\\n            int target = sc.nextInt();\\n            if(target < blocker){\\n                blocker = target;\\n            }\\n            if(allmen.contains(target)==false){\\n                if(target%blocker!=0){\\n                    allmen.add(target);\\n                } \\n            }\\n                else{\\n                    doubled.add(target);\\n                }       \\n            \\n        }\\n        Collections.sort(allmen);\\n         //\u753b\u9762\u8868\u793a\\n        for(int i=0;i <=allmen.size()-1;i++){\\n            boolean judge = true;\\n            int target = allmen.get(i);\\n            if(doubled.contains(target)==false){\\n                for(int X= 0;X<i;X++){\\n                    if(target% allmen.get(X)==0){\\n                        judge = false;\\n                        break;\\n                    }\\n                }\\n            }else{\\n                judge = false;\\n            }\\n            if(judge == true){\\n                ans++;\\n            }\\n        } */\\n\\n", "target": "41", "substitutes": {"sc": [" src", " sn", "sf", "SB", "sa", "sq", "ann", " ser", " scr", " cr", "ss", " arr", "se", "Sc", " surf", " ar", " SC", " res", " ans", "scan", " scorer", " Sc", " sl", "sb", " rc", " cur", "SC", " br"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\ttry(Scanner sc = new Scanner(System.in)) {\\n\t\t\\n\t\t\tint n = sc.nextInt();\\n\t\t\tString s = sc.next();\\n\t\t\tString t = sc.next();\\n\t\t\t\\n\t\t\tfor(int i = 0 ; i < n ; i++ ) {\\n\t\t\t\tSystem.out.print(s.charAt(i));\\n\t\t\t\tSystem.out.print(t.charAt(i));\\n\t\t\t}\\n\\n\t\t}\\n\t}\\n\\n}", "target": "200", "substitutes": {"n": ["network", "number", "ot", "p", "nb", "ner", "nt", "m", "nor", "ne", "j", "r", "ln", "ni", "z", "b", "N", "in", "nn", "ns", "l", "u", "en", "c", "fn", "num", "conn", "x", "d", "y", "v", "nc", "f", "o", "nl", "net", "k"], "s": ["a", "styles", "is", "ks", "cs", "si", "string", "rs", "p", "cells", "os", "sv", "js", "ls", "b", "ds", "ins", "in", "ws", "ss", "ns", "l", "u", "c", "ses", "ves", "series", "h", "su", "ts", "S", "f", "services", "as", "features", "sb", "ans", "strings", "spec"], "t": ["test", "the", "target", "pt", "at", "tr", "p", "T", "template", "nt", "m", "j", "txt", "te", "st", "b", "tt", "in", "unt", "l", "u", "c", "it", "type", "x", "ts", "text", "tm", "rt", "art", "d", "qt", "y", "v", "ut", "tf", "f", "to", "o", "temp"], "i": ["gi", "xi", "I", "io", "si", "di", "p", "oi", "abi", "ii", "hi", "chi", "j", "index", "z", "ini", "b", "ai", "in", "ji", "multi", "li", "ci", "ti", "data", "zi", "ri", "qi", "u", "bi", "e", "init", "ori", "eni", "my", "pi", "x", "id", "ip", "uri", "block", "d", "v", "ix", "slice", "f", "o", "ui", "info", "temp", "start"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint a=sc.nextInt();\\n\t\tint b=sc.nextInt();\\n\t\tString x=\"\",y=\"\";\\n\t\tfor(int i=0;i<b;i++) {\\n\t\t\tx+=a;\\n\t\t}\\n\t\tfor(int i=0;i<a;i++) {\\n\t\t\ty+=b;\\n\t\t}\\n\t\tString[] n= {x,y};\\n\t\tArrays.parallelSort(n);\\n\t\tSystem.out.print(n[0]);\\n\t}\\n}", "target": "24", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "com", "ctx", "cc", "ner", "tc", "sec", "soc", "na", "sync", "system", "osc", "cr", "sq", "ec", "lc", "ocr", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "ct", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "server", "sb", "SC"], "a": ["w", "fa", "ga", "ca", "au", "p", "aaa", "alpha", "ac", "m", "na", "wa", "A", "sa", "ea", "z", "an", "ab", "ai", "ae", "ba", "pa", "da", "l", "u", "c", "e", "am", "h", "area", "la", "d", "va", "aa", "f", "as", "array", "ad"], "b": ["w", "base", "bb", "p", "nb", "s", "lb", "m", "j", "wb", "z", "ab", "ba", "ob", "boot", "B", "l", "u", "mb", "c", "e", "fb", "bs", "h", "body", "d", "db", "v", "emb", "bf", "f", "o", "sb", "ad"], "x": ["xi", "w", "string", "code", "name", "p", "s", "fx", "index", "r", "t", "z", "in", "xy", "rx", "data", "ax", "l", "u", "c", "e", "h", "python", "tx", "X", "xs", "dx", "xx", "id", "d", "v", "ix", "xxx", "key", "ex", "f", "k"], "y": ["iy", "xi", "ny", "dy", "ay", "yn", "vy", "j", "gy", "oy", "t", "z", "yl", "yy", "xy", "ym", "ya", "Y", "yo", "py", "u", "c", "ey", "e", "yt", "zy", "yi", "ty", "uy", "ry", "isy", "ady", "fy", "sy", "o", "cy", "ye"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "mu", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "c", "e", "ori", "iu", "init", "pi", "yi", "fi", "id", "ix", "v", "f", "ui", "o", "info"], "n": ["network", "span", "number", "br", "nat", "p", "nb", "m", "cn", "nor", "na", "ne", "nan", "j", "r", "ln", "z", "arr", "sn", "N", "pn", "nn", "sign", "ns", "syn", "l", "c", "fn", "e", "np", "out", "adj", "nw", "d", "v", "f", "o", "nl", "array", "g", "net", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args){\\n        Scanner scanner = new Scanner(System.in);\\n        int h = scanner.nextInt();\\n        int a = scanner.nextInt();\\n\\n        int result = h / a;\\n        result = (h % a) == 0 ? result : result + 1;\\n\\n        System.out.println(result);\\n    }\\n}", "target": "147", "substitutes": {"scanner": ["kerer", "scaner", "kerinner", "analyinner", "Scanener", "analyer", "analyner", "annler", "canler", "anner", "scanler", "canener", "canner", "Scaner", "Scanler", "Scanner", "annener", "caninner", "canker", "caner", "annner", "scanker", "Scanker", "kerizer", "canizer", "scanizer", "scanener", "analyker", "scaninner", "Scanizer", "Scaninner", "kerner"], "h": ["th", "uh", "hs", "w", "n", "p", "header", "s", "m", "hi", "r", "z", "hm", "b", "max", "length", "count", "ah", "H", "ih", "q", "l", "u", "c", "e", "hp", "x", "rh", "ph", "oh", "d", "eh", "bh", "y", "v", "hr", "ha", "hh", "f", "o", "gh", "i", "k", "adh"], "a": ["w", "fa", "ga", "ca", "n", "au", "p", "ia", "alpha", "aaa", "m", "na", "wa", "r", "A", "sa", "ao", "ea", "qa", "z", "ma", "an", "ab", "b", "ai", "ae", "ba", "pa", "ava", "l", "aj", "u", "c", "e", "af", "area", "x", "am", "la", "d", "y", "va", "v", "ha", "aa", "f", "as", "o", "array", "i"], "result": ["ash", "test", "number", "results", "res", "rc", "direction", "status", "err", "score", "winner", "value", "answer", "header", "diff", "alpha", "grade", "effect", "feature", "index", "r", "zero", "default", "counter", "report", "response", "length", "count", "cup", "comment", "error", "data", "match", "total", "page", "goal", "expected", "success", "num", "knowledge", "date", "Result", "rh", "next", "sum", "id", "root", "current", "aa", "div", "ret", "math", "array", "info"]}}
{"code": "import java.util.Scanner;\\n\\npublic  class Main  {\\n\\n\tpublic static void main(String args[]) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint  A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint T = sc.nextInt();\\n\t\tint sum = 0;\\n\t\tfor(int i = 1; i<=T; i++) {\\n\t\t\tif(i%A==0) {\\n\t\t\t\tsum += B;\\n\t\t\t}\\n\t\t\t\\n\t\t\t\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t\t\\n\t}\\n\t\\n\\n}\\n", "target": "4", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "desc", "ca", "ser", "cer", "sf", "com", "cc", "sec", "tc", "soc", "acc", "enc", "sync", "cr", "sl", "osc", "sq", "ec", "lc", "class", "cont", "coll", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "Sc", "asc", "sche", "str", " SC", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "parse", "SC"], "A": ["a", "API", "Alpha", "U", "O", "I", "HA", "As", "Na", "AB", "Ca", "C", "alpha", "All", "Array", "PA", "LA", "AA", "G", "N", "D", "H", "NA", "L", "M", "SA", "Area", "Ar", "Ma", "mA", "S", "P", "F", "V", "AP", "CA"], "B": ["O", "K", "E", "I", "AB", "J", "C", "TB", "SB", "G", "AA", "b", "N", "W", "Q", "R", "BC", "D", "UB", "CB", "Y", "H", "DB", "L", "M", "LB", "Bs", "BA", "P", "F", "V", "BB", "BL", "BI"], "T": ["O", "U", "E", "I", "J", "C", "NT", "TB", "t", "G", "W", "N", "TS", "Q", "R", "D", "H", "Y", "Z", "L", "M", "TH", "UT", "X", "TA", "S", "P", "F", "V"], "sum": ["a", "weight", "cur", "um", "si", "n", "output", "diff", "alpha", "help", "result", "average", "sort", "index", "zero", "Sum", "b", "max", "loss", "length", "count", "comment", "mean", "cum", "match", "size", "total", "data", "miss", "min", "ass", "use", "pack", "error", "u", "num", "out", "scale", "depth", "style", "parse", "offset", "spread", "beta", "vol", "fat", "fee", "sp", "summary", "up", "sh", "info", "cost", "start", "gram", "cal"], "i": ["a", "xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "index", "j", "chi", "t", "ni", "z", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "zi", "ri", "l", "u", "bi", "c", "qi", "init", "it", "mi", "x", "pi", "id", "ip", "block", "d", "v", "slice", "f", "o", "ui", "info", "start"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tlong nam = sc.nextLong();\\n\t\tlong ans = Long.MAX_VALUE;\\n\t\t\\n\t\tlong j = 0;\\n\t\tfor(long i = 1; i*i <= nam; i++){\\n\t\t    if(nam % i != 0){continue;}\\n\t\t    j = nam/i;\\n\t\t    ans = Math.min(ans,i + j -2);\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "157", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "desc", "cs", "ca", "sub", "cer", "com", "cc", "ner", "sec", "soc", "na", "acc", "system", "osc", "cr", "ec", "lc", "ocr", "bc", "sci", "ss", "ci", "cl", "se", "c", "src", "Sc", "asc", "sem", " SC", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "nam": ["span", "ram", "tri", "ani", "ny", "n", "ami", "name", "oa", "unit", "amin", "na", "nan", "chi", "pal", "dam", "mn", "ni", "an", "sn", "ann", "max", "ind", "ai", "conf", "in", "count", "nm", "prefix", "ku", "cas", "nn", "size", "small", "miss", "sam", "san", "ns", "min", "dan", "num", "am", "mi", "keep", "nw", "sum", "gin", "nit", "names", "scan", "nav", "anc", "jam", "lam", "sim", "dim", "sd", "nas", "inn"], "ans": ["vals", "annis", "ks", "ants", "cons", "cs", "Na", "ani", "blocks", "AN", "lan", "s", "amps", "na", "ents", "ANS", "nan", "anas", "ana", "outs", "an", "ian", "ann", "ars", "ls", "olds", "ds", "ins", "ai", "atan", "cas", "ians", "sam", "san", "ns", "anes", "lins", "can", "am", "x", "ams", "acts", "powers", "banks", "alls", "aus", "jen", "ions", "iana", "aned", "scan", "ons", "anc", "as", "asin", "asts", "errors", "nas"], "j": ["jing", "ak", "ja", "ani", "ny", "si", "n", "jc", "dj", "J", "m", "ark", "ii", "jo", "ij", "na", "mn", "ni", "z", "js", "jj", "jl", "ind", "max", "ai", "ji", "li", "nn", "size", "pa", "ax", "l", "aj", "qi", "bi", " n", "jack", "adj", "uj", "jit", "jam", "jon", "jan", "k", "inn", "jp"], "i": ["gi", "a", "xi", "I", "ei", "io", "si", "n", "di", "ie", "step", "p", "oi", "s", "m", "ii", "hi", "index", "chi", "ki", "ni", "z", "uli", "ini", "b", "ind", "ai", "in", "length", "count", "phi", "ji", "multi", "li", "ci", "ti", "min", "zi", "l", "qi", "u", "bi", "c", "ri", "iu", "eni", "mi", "x", "pi", "yi", "fi", "id", "uri", "d", "y", "v", "f", "ui", "o", "start", "k", "jp"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[]args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\t\tint a = sc.nextInt();\\n\t\t\t\tint b = sc.nextInt();\\n\t\t\t\tint c = sc.nextInt();\\n\t\t\t\tint d = a-b;\\n\t\t\t\tint e = c-d;\\n      if(e<=0){\\n        System.out.println('0');\\n      }else{\\n\t\t\t\tSystem.out.println(e);\\n      }\\n\t}\\n}", "target": "45", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "desc", "cs", "ser", "ca", "search", "cer", "sr", "com", "cc", "ner", "sec", "tc", "soc", "acc", "enc", "sync", "osc", "cr", "sq", "ec", "lc", "ocr", "cont", "coll", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "Sc", "asc", "sche", "ct", "cv", " SC", "dc", "mc", "scan", "nc", " Sc", "uc", "sh", "sb", "SC"], "a": ["ca", "n", "name", "p", "oa", "au", "s", "ac", "alpha", "m", "A", "sa", "z", "an", "ab", "ae", "ba", "pa", "da", "l", "aj", "af", "area", "x", "h", "am", "la", "y", "va", "aa", "f", "as", "i", "ad"], "b": ["w", "n", "bb", "p", "nb", "s", "eb", "j", "r", "wb", "z", "ab", "ae", "ba", "B", "l", "u", "bs", "x", "h", "y", "db", "v", "aa", "f", "o", "sb", "g", "i", "k", "rb"], "c": ["w", "ca", "n", "p", "C", "s", "ac", "m", "r", "z", "lc", "count", "l", "u", "x", "h", "y", "v", "dc", "f", "o", "g", "i", "k"], "d": ["dd", "w", "n", "dy", "p", "s", "m", "cd", "j", "r", "t", "z", "dt", "ds", "in", "D", "nd", "da", "l", "u", "x", "y", "db", "v", "f", "k", "o", "g", "i", "ad"], "e": ["E", "ei", "ee", "oe", "w", "n", "ie", "p", "ffe", "m", "eb", "ne", "j", "r", "ea", "z", "ed", "ec", "cr", "fe", "ace", "count", "ae", "edge", "end", "size", "pe", "l", "u", "esi", "ce", "h", "x", "escape", "element", "y", "es", "f", "o", "g", "i", "ze"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\t\t\t//\u6587\u5b57\u306e\u5165\u529b\\n\\n\t\tint n = sc.nextInt();\\n\t\tint k = sc.nextInt()-1;\\n\t\tString str = sc.next();\\n\t\t\\n\t\tStringBuffer sb = new StringBuffer(str);\\n\t\tchar cc = str.toLowerCase().charAt(k);\\n\t\tsb.setCharAt(k, cc);\\n\t\tSystem.out.print(sb.toString());\\n\t\t\\n\t\t\\n\t\t\\n\t\t\\n\t}\\n\t\\n\t\\n\tstatic int gcd(int a,int b){\t\t\t\t//\u6700\u5927\u516c\u7d04\u6570\u3092\u8fd4\u3059\\n\t\tif(b == 0){\\n\t\t\treturn a;\\n\t\t}else{\\n\t\t\treturn gcd(b, a%b);\\n\t\t}\\n\t}\\n\t\\n\\n\\n\\n\\nstatic String deletestr(String base,String remove){\\n\tboolean flag = true;\\n\tfor(int i = 0;i < remove.length();i++){\\n\t\tif(i == base.length()){\\n\t\t\tflag = false;\\n\t\t\tbreak;\\n\t\t}\\n\t\tif(base.charAt(i) - remove.charAt(i) != 0 && base.charAt(i) - remove.charAt(i) != 32 &&remove.charAt(i) - base.charAt(i)  != 32){\\n\t\t\tflag = false;\\n\t\t\tbreak;\\n\t\t}\\n\t}\\n\\n\tif(flag){\\n\t\tbase = base.substring(remove.length());\\n\t}\\n\\n\treturn base;\\n\\n}\\n\\n\\n\\n}\\n\\n\\nclass Pair implements Comparable{\\n\tint from;\\n\tint end;\\n\t@Override\\n\tpublic int compareTo(Object other) {\\n\t\tPair otherpair = (Pair)other;\\n\\n\t\treturn from - otherpair.from;\\n\t}\\n}\\n\\n\\n", "target": "71", "substitutes": {"sc": [" pars", " src", "rc", " sp", "inst", "r", "ann", " ser", " scr", "bc", "ss", " arr", "se", "c", " app", "Sc", " SC", " res", "scan", " Sc", " cont", " sl", "sb", " rc", "parser", "SC", "gram"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tArrayList array = new ArrayList();\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = sc.nextInt();\\n\t\tboolean ans = true;\\n\t\tString w=sc.next();\\n\t\tarray.add(w);\\n\t\tfor(int i=0; i<a-1; i++) {\\n\t\t\tString w2=sc.next();\t\t\\n\t\t\tif(array.contains(w2)) {\\n\t\t\t\tans = false;\\n\t\t\t}\\n\t\t\tif(w.charAt(w.length()-1)!= w2.charAt(0)) {\\n\t\t\t\tans = false;\\n\t\t\t}\\n\t\t\tarray.add(w2);\\n\t\t\tw=w2;\\n\t\t}\\n\t\tif(ans) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n\\n}", "target": "70", "substitutes": {"array": ["list", "collection", "ar", "search", "string", "p", "group", "section", "s", "arrow", "alpha", "result", "Array", "app", "part", "r", "this", "system", "arr", "counter", "pair", "shared", "coll", "image", "ray", "analysis", "book", "order", "alias", "now", "error", "row", "object", "instance", "all", "range", "stack", "l", "aw", "ays", "audio", "area", "x", "am", "database", "element", "air", "function", "allow", "v", "shape", "scan", "ack", "server", "as", "auto", "record", "parser"], "sc": ["pc", "esc", "sw", "rc", "ch", "cs", "si", "ca", "cer", "cor", "screen", "s", "cc", "ner", "sec", "acc", "enc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "bc", "sci", "cle", "ci", "cus", "cl", "scope", "se", "c", "Sc", "asc", "sche", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "SC"], "a": ["tta", "sta", "fa", "ga", "ca", "asha", "p", "aaa", "ia", "alpha", "ac", "m", "wa", "ada", "A", "sa", "ea", "qa", "ma", "an", "b", "ai", "aux", "ba", "all", "pa", "aj", "aw", "c", "af", "area", "am", "la", "va", "aa", "as", "ama", "au"], "w": ["wl", "sw", "west", "ww", "n", "string", "ew", "word", "value", "p", "name", "s", "wd", "home", "m", "wa", "r", "wh", "t", "wb", "work", "W", "b", "writer", "ws", "wave", "way", "war", "l", "ow", "u", "aw", "c", "password", "e", "we", "x", "kw", "wp", "widget", "d", "y", "v", "wan", "f", "hw", "o", "g", "wall", "fw", "wal", "rw"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "chi", "j", "t", "ni", "z", "ini", "mu", "b", "ai", "phi", "multi", "ji", "li", "ti", "ci", "zi", "ri", "qi", "u", "bi", "c", "iu", "it", "mi", "pi", "x", "yi", "ip", "d", "v", "ix", "f", "o", "ui"], "w2": ["W0", "h2", "r02", "work2", "W2", "wa2", "w1", "r5", "sw1", "ewTwo", " wtwo", "r3", "r2", "sw2", " w1", "h52", "wa1", "w0", "waTwo", "ew2", "work02", "r1", "wTwo", "ew52", "watwo", "swTwo", "w3", "worktwo", "wa02", "rTwo", "kw52", "wa5", "W02", "htwo", "ew02", "w5", "w02", "wtwo", " w3", "w52", " w02", "sw5", "wa3", "kwtwo", "kw2", "ewtwo", "WTwo", "wa0", "ew0"], "ans": [" pars", " scans", "ks", "ants", "ar", "AN", "lan", " can", "anon", "ros", "annot", "amps", "na", " es", "ANS", "ents", "arts", "ens", "anas", "ran", "aid", "an", "aces", "ann", " sins", "ars", "acs", "sk", "ins", "nas", " means", "leans", "atan", " news", "aning", "san", "ns", " ads", "ean", " ann", "acts", "ams", "can", " works", "acers", "urs", " spans", " ang", " names", "ions", "anus", " cases", "aned", "ons", "anc", "asin", "An", "ays", " sin", "ras", " pan", " wins"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint a[] = new int[N];\\n\t\tboolean can = false;\\n\t\tint nextId = 0;\\n\t\tint count = 0;\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t}\\n\\n\t\twhile (count != N) {\\n\t\t\tnextId = a[nextId] - 1;\\n\t\t\tcount++;\\n\t\t\tif (nextId == 1) {\\n\t\t\t\tcan = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\\n\t\tif (can) {\\n\t\t\tSystem.out.println(count);\\n\t\t} else {\\n\t\t\tSystem.out.println(-1);\\n\t\t}\\n\t}\\n}\\n", "target": "175", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ca", "cer", "sf", "sr", "cc", "ner", "tc", "soc", "sa", "system", "osc", "cr", "sq", "ec", "lc", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "sem", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "server", "uc", "sp", "sb", "SC"], "N": ["O", "K", "number", "I", "NR", "n", "Ns", "Len", "C", "T", "Ni", "NT", "Ne", "NB", "A", "NN", "Size", "R", "D", "H", "size", "Y", "NA", "Z", "B", "Num", "L", "M", "NC", "X", "No", "NE", "S", "F", "P", "V", "Count", "NS", "RN", "Number", " n"], "a": ["list", "tta", "sta", "ar", "ga", "ca", "n", "p", "oa", "alpha", "ac", "na", "wa", "ada", "A", "sa", "ea", "ana", "qa", "an", "ab", "b", "ba", "data", "ata", "da", "aj", "c", "area", "am", "asa", "d", "va", "aa", "as", "auto", "array", "ama", "ans"], "nextId": ["intInt", "currentid", "intID", "startIndex", "nextStart", "nextID", " nextid", "previd", " nextCount", "lastid", "startid", "nextInt", " nextStart", "lastId", "currentPart", "NextCount", "lastID", "intCount", " nextID", "NextStart", "currentInt", " nextIndex", "NextId", "prevID", " nextInt", "nextPart", "prevId", "NextIndex", "intId", "lastInt", "NextID", " nextPart", "startStart", "currentID", "Nextid", "prevInt", "nextid", "lastPart", "currentId", "nextIndex", "startId", "NextInt", "nextCount"], "count": ["number", "list", "parent", "old", "weight", "err", "n", "code", "base", "p", "ac", "nt", "part", "index", "counter", "b", "partial", "ind", "coll", "conf", "length", "order", "now", "size", "total", "cache", "no", "child", "num", "c", "other", "type", "area", "h", "limit", "keep", "next", "cat", "id", "sum", "depth", "inc", "call", "Count", "len", "current", "key", "clean", "act", "found", "start", "col"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "ie", "p", "m", "ii", "hi", "part", "index", "j", "chi", "ni", "z", "ini", "b", "ind", "ai", "in", "multi", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "e", "init", "it", "eni", "mi", "x", "pi", "id", "ip", "uri", "y", "v", "ix", "slice", "key", "f", "ui", "o", "info", "start"], "can": ["chan", "pan", "pc", "parent", "Can", "ca", "n", "lan", "ac", "cc", "annot", "cn", "could", "valid", "cover", "an", "sk", "ann", "fan", "bc", "ban", "CAN", "cas", "ci", "all", "c", "out", "keep", "cat", "allow", "know", "gan", "scan", "uc", "anc", "cu", "ok", "han", "ans", "call", "con", "co"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner s = new Scanner(System.in);\\n\\n        // \u9ad8\u6a4b\u3001\u9752\u6728\u30e2\u30f3\u30b9\u30bf\u30fc\u8a2d\u5b9a\\n        int takaMHp = s.nextInt();\\n        final int TAKA_M_ATK = s.nextInt();\\n        int aokiMHp = s.nextInt();\\n        final int AOKI_M_ATK = s.nextInt();\\n\\n        int x = 1;\\n        while (true) {\\n            if (x % 2 == 1) {\\n                // \u9ad8\u6a4b\u30bf\u30fc\u30f3\\n                aokiMHp -= TAKA_M_ATK;\\n            } else {\\n                // \u9752\u6728\u30bf\u30fc\u30f3\\n                takaMHp -= AOKI_M_ATK;\\n            }\\n\\n            if (aokiMHp <= 0 || takaMHp <= 0) {\\n                break;\\n            }\\n            x += 1;\\n        }\\n\\n        if (takaMHp > 0) {\\n            System.out.println(\"Yes\");\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n  }\\n}", "target": "186", "substitutes": {"s": ["i", "n", "p", "r", "browser", "ln", "t", "sl", "sn", "b", "ls", " objects", "lib", "ns", "l", "c", "e", "ing", "h", "S", "d", "v", "es", "f", "o", "sb", "g", "parser"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tString weather = scan.next();\\n\t\tString re = \"\";\\n\\n\t\tswitch (weather) {\\n\t\tcase \"Sunny\":\\n\t\t\tre = \"Cloudy\";\\n\t\t\tbreak;\\n\t\tcase \"Cloudy\":\\n\t\t\tre = \"Rainy\";\\n\t\t\tbreak;\\n\t\tcase \"Rainy\":\\n\t\t\tre = \"Sunny\";\\n\t\t\tbreak;\\n\t\t}\\n\\n\t\tSystem.out.println(re);\\n\t\tscan.close();\\n\\n\t}\\n\\n}\\n", "target": "60", "substitutes": {"scan": ["run", "pan", "span", "chan", "random", "pin", "search", "ser", "n", "connect", "query", "car", "ner", "log", "sc", "app", "na", "r", "ln", "sync", "skip", "an", "report", "ann", "fan", "in", "inner", "match", "nn", "row", "san", "all", "win", "read", "se", "can", "out", "cat", "look", "ry", "server", "Scan", "walk", "watch", "stat", "reader", "ignore", "parse", "con"], "weather": [" Weather", "season", "w", "err", "cmd", "string", "word", "condition", "name", "gro", "loc", "location", "filename", "city", "build", "coll", "length", "input", "prefix", "year", "wake", "row", "month", "winter", "wood", "dec", "Weather", "community", "c", "type", "rr", "rh", "cool", "warm", "warning", "content", "format", "past", "town", "draw", "hum", "hello", "rew", "reg", "day", "record", "pattern", "round"], "re": ["run", "bre", "res", "regular", "nr", "comb", "ro", "err", "ar", "string", "repre", "ref", "name", "p", "code", "Re", "result", "gro", "rev", "loc", "r", "arr", "report", "model", "ren", "rex", "rel", "replace", "genre", "rec", "match", "gre", "row", "rl", "rem", "type", "rep", "rr", "resp", "x", "cre", "RE", "ru", "warm", "block", "pre", "continue", "ret", "f", " rec", "reg", "rew", "record"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.lang.reflect.Array;\\nimport java.util.*;\\n\\npublic class Main {\\n    static class FastReader{\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader(){\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next(){\\n            while(st==null || !st.hasMoreElements()){\\n                try{\\n                    st=new StringTokenizer(br.readLine());\\n                }\\n                catch(IOException e){\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt(){\\n            return Integer.parseInt(next());\\n        }\\n\\n        Long nextLong(){\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble(){\\n            return Double.parseDouble(next());\\n        }\\n        String nextLine(){\\n            String str=\"\";\\n            try{\\n                str=br.readLine();\\n            }\\n            catch(IOException e){\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n    public static void main(String[] args) throws IOException {\\n       FastReader in = new FastReader();\\n      int n=in.nextInt();\\n      int b[]=new int [n+1];\\n      Arrays.fill(b,0);\\n\\n      for(int i=1;i<n;i++){\\n          b[in.nextInt()]++;\\n      }\\n      for(int i=1;i<=n;i++){\\n          System.out.println(b[i]);\\n      }\\n\\n    }\\n}\\n", "target": "12", "substitutes": {"br": ["ch", "err", "Br", "img", "bb", "tr", "sr", "buf", "bd", "BR", "r", "browser", "cr", "arr", "ab", "bar", "dr", "gr", "ocr", "bc", "obj", "raf", "mr", "fr", "fb", "src", "bs", "ber", "bridge", "bt", "pr", "lr", "bro", "bed", "ru", "rt", "bh", "db", "box", "hr", "cro", "sp", "sb", "be", "orb", "cb", "ur", "bl", "rb"], "st": ["sw", "sta", "string", "pt", "stop", "struct", "sr", "ste", "sts", "ft", "s", "tr", "nt", " est", "sc", "sth", "r", "inst", "sa", "stri", "t", "est", "sty", "sl", "sn", "ost", "ld", "cr", "std", "Str", "pe", "sign", "fr", "nd", "l", "ast", "ist", "se", "lt", "e", "src", "bt", "pr", "ct", "rt", "art", "style", "rest", "ut", "sp", "ST", "sb", "be", "stage", "bl", "St"], "str": ["kr", "pos", "err", "char", "string", "code", "pt", "tr", "p", "line", "sr", "value", "s", "m", "exp", "enc", "r", "inst", "stri", "t", "cr", "sl", "arr", "z", "dr", "doc", "url", "inner", "Str", "data", "fr", "cl", "l", "u", "e", "x", "text", "pr", "id", "style", "v", "hr", "div", "f", "sp", "STR", "iter", "strings", "bl"], "in": ["exec", "din", "is", "re", "pin", "err", "In", "gen", "bin", "at", "p", "ic", "query", "s", "m", "log", "on", "user", "serv", "r", "ini", "fe", "doc", "ins", "rin", "readable", "input", "inner", "rec", "by", "data", "win", "fr", "ax", "cl", "l", "c", "init", "conn", "out", "lin", "source", "inc", "d", "con", "gin", "again", "nin", "login", "isin", "ex", "connection", "f", "as", "g", "reader", "IN", "inn"], "n": ["network", "w", "p", "s", "nb", "m", "nt", "j", "r", "ln", "t", "none", "z", "sn", "N", "count", "nn", "ns", "l", "u", "num", "c", "en", "e", "conn", "x", "d", "y", "v", "len", "nc", "f", "o", "net", "k"], "b": ["a", "w", "bin", "base", "bb", "gb", "p", "s", "nb", "bd", "batch", "buff", "r", "z", "ab", "ib", "bar", "ba", "obj", "ob", "boot", "B", "bug", "l", "bi", "c", "mb", "e", "binary", "bs", "x", "h", "bis", "bit", "id", "body", "d", "y", "db", "v", "emb", "buffer", "bf", "f", "sb", "g", "cb", "rb"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "p", "oi", "ii", "hi", "hei", "index", "j", "ni", "mini", "z", "ini", "uli", "ind", "ai", "inner", "ji", "phi", "li", "ci", "ti", "multi", "ik", "ri", "qi", "u", "bi", "c", "l", "e", "init", "iu", "it", "my", "mi", "pi", "x", "eni", "fi", "id", "ip", "uri", "y", "v", "ix", "slice", "vi", "key", "vol", "f", "ui", "o", "info", "g", "temp", "k"], "nextInt": ["NextShort", "firstInt", "nextLong", "NextInteger", "currentLong", "firstInteger", "currentShort", "nextShort", "readLong", " nextInteger", "readExt", "firstint", " nextLong", "readShort", "currentInt", "firstLong", " nextint", "readInt", "currentint", "nextExt", " nextExt", "NextLong", " nextShort", "nextint", "NextInt", "NextExt", "Nextint", "nextInteger"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        \\n        //int n = Integer.parseInt(sc.next());\\n        String s = sc.next();\\n        boolean[] isDNA = new boolean[s.length()];\\n        char c = '\\0';\\n        for(int i = 0;i<s.length();i++){\\n            c = s.charAt(i);\\n            if((c == 'A')||(c == 'C')||(c == 'G')||(c == 'T')) isDNA[i] = true;\\n        }\\n        int j =0, max=0;\\n        for(int i = 0;i<isDNA.length;i++){\\n            j=i;\\n            while((j<isDNA.length)&&isDNA[j]) j++;\\n            max = (j-i)>max ? j-i : max;\\n        }\\n        \\n        System.out.println(max);\\n    }\\n}", "target": "100", "substitutes": {"sc": [" pars", " src", " sch", " sm", "sq", "ann", " scr", " eng", "ss", " arr", " subp", "se", "sys", "c", "Sc", " SC", " res", " ans", "scan", " scorer", " Sc", " cont", " sl", "sb", " rc", "SC", "gram"]}}
{"code": "import java.io.*;\\n\\nclass Main{\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\twhile(true){\\n\t\t\tString lns[] = br.readLine().split(\" \");\\n\t\t\tint ln[] = parseInts(lns);\\n\t\t\tif(ln[0]==0 && ln[1]==0) break;\\n\t\t\tfor(int x=0; x<ln[0] ;x++){\\n\t\t\t\tfor(int y=0; y<ln[1]; y++){\\n\t\t\t\t\tif(y==ln[1]-1){\\n\t\t\t\t\t\tSystem.out.println(\"#\");\\n\t\t\t\t\t}else if(y==0 || x==0 || x==ln[0]-1){\\n\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t}else{\\n\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t}\\n\tstatic int[] parseInts(String[] s){\\n\t\tint[] x = new int[s.length];\\n\t\tfor(int i=0;i<s.length;i++){\\n\t\t\tx[i] = Integer.parseInt(s[i]);\\n\t\t}\\n\t\treturn x;\\n\t}\\n}", "target": "87", "substitutes": {"br": ["res", "nr", "io", "ch", "img", "Br", "err", "tr", "sr", "buf", "yr", "BR", "nor", "r", "browser", "cr", "arr", "b", "bar", "gr", "ocr", "bl", "dr", "bc", "obj", "fr", "stream", "HR", "src", "ori", "bs", "ber", "bridge", "lr", "bro", "Reader", "ler", "str", "hr", "bf", "div", "sp", "orb", "reader", "wr", "rb"], "lns": ["ells", "Lrs", "dlxs", " lrs", "intls", "elxs", " lls", "dlls", "Ln", "lnNS", "intrs", "lnns", "dlNS", "intns", "lnxs", "elNS", "lxs", "intn", "lnls", "lrs", "lNS", "Lns", "Lls", "dlns", "lls", "elns"], "ln": ["list", "kn", "wl", "il", "yll", "n", "string", "base", "lan", "p", "line", "nb", "sol", "cn", "ii", "loc", "ul", "ni", "z", "sn", "ls", "lc", "b", "ld", "in", "lines", "lv", "rn", "kin", "li", "nn", "fen", "vin", "ns", "el", "rl", "l", "lins", "en", "fn", "fl", "lon", "kl", "lin", "hn", "left", "dl", "ll", "v", "lf", "sql", "NL", "len", "oln", "f", "nl", "lu", "han", "zon", "inn"], "x": ["xi", "a", "wx", "px", "w", "xb", "xd", "xe", "n", "dy", "name", "p", "ay", "ic", "ctx", "xt", "m", "exp", "on", "width", " xx", "wa", "index", "t", "z", "arr", "b", "in", "xy", "xc", "rx", "ya", "xf", "data", "wy", "ax", "q", "l", "u", "c", "e", "ey", "xa", "h", "xs", "X", "tx", "xes", "dx", "xx", "id", "yx", "d", "v", "ix", "xxx", "key", "ex", "xp", "f", "time", "o", "abc", "plus", "g", "k"], "y": ["iy", "ch", "w", "ny", "n", "dy", "p", "ay", "yr", "vy", "j", "gy", "oy", "t", "z", "hy", "yl", "yy", "ish", "b", "xy", "ym", "ya", "ky", "Y", "wy", "yo", "py", "c", "ey", "yt", "type", "h", "zy", "yi", "id", "ty", "d", "ry", "v", "ady", "key", "f", "sy", "o", "cy", "ye"], "s": ["a", "parts", "qs", "ks", "address", "si", "n", "string", "p", "sts", "m", "gs", "os", "r", "sets", "t", "z", "abs", "sv", "b", "ds", "ins", "input", "ss", "ns", "l", "c", "e", "ses", "bs", "h", "ts", "source", "d", "ps", "str", "ids", "es", "v", "f", "services", "o", "sb", "g", "ans", "strings", "rows"], "i": ["xi", "gi", "a", "I", "io", "si", "n", "ie", "di", "p", "oi", "abi", "ii", "hi", "index", "j", "t", "ini", "b", "ai", "phi", "multi", "ji", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "c", "l", "e", "iu", "it", "my", "mi", "pi", "h", "fi", "id", "ip", "uri", "ix", "v", "key", "f", "o", "ui", "info"]}}
{"code": "import java.io.*;\\nimport java.util.HashSet;\\nimport java.util.Set;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n        init();\\n\\n        int N = nextInt(), M = nextInt();\\n        Set<Integer> vals = new HashSet<>();\\n        for (int i = 0; i < M; i++) vals.add(nextInt());\\n\\n        long mod = 1000000007;\\n        long[] ways = new long[N + 1];\\n\\n        ways[0] = 1;\\n\\n        for (int i = 1; i < ways.length; i++) {\\n            if (vals.contains(i)) ways[i] = 0;\\n            else ways[i] = (ways[i - 1] + (i - 2 >= 0 ? ways[i - 2] : 0)) % mod;\\n        }\\n\\n        System.out.println(ways[N]);\\n    }\\n\\n    //Input Reader\\n    private static BufferedReader reader;\\n    private static StringTokenizer tokenizer;\\n\\n    private static void init() {\\n        reader = new BufferedReader(new InputStreamReader(System.in));\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n\\n    private static String next() throws IOException {\\n        String read;\\n        while (!tokenizer.hasMoreTokens()) {\\n            read = reader.readLine();\\n            if (read == null || read.equals(\"\"))\\n                return \"-1\";\\n            tokenizer = new StringTokenizer(read);\\n        }\\n\\n        return tokenizer.nextToken();\\n    }\\n\\n    private static int nextInt() throws IOException {\\n        return Integer.parseInt(next());\\n    }\\n}", "target": "174", "substitutes": {"N": ["O", "K", "U", "E", "I", "NG", "NR", "n", "Ns", "J", "C", "T", "Ni", "Length", "NT", "Ne", "A", "G", "W", "NN", "Q", "Size", "R", "H", "D", "Y", "Z", "B", "Num", "L", "NI", "X", "NE", "S", "P", "F", "V", "Count", "NS", "NL", "MN", " n"], "M": ["K", "U", "I", "E", "n", "J", "C", "T", "m", "W", "DM", "Q", "R", "H", "D", "Y", "MS", "Z", "B", "L", "LM", "MI", "X", "MM", "S", "P", "F", "MD", "V", "MN", "Mi", "CM", "MC"], "vals": ["fs", "points", "els", "ants", "levels", "ms", "ones", "lights", "flows", "bys", "nos", "vers", "bles", "gs", "os", "valid", "ports", "ples", "vs", "ls", "tests", "ds", "values", "lines", "als", "multi", "ils", "lv", "ns", "ims", "Val", "lins", "works", "groups", "ves", "bs", "lets", "xs", "posts", "states", "alls", "ps", "val", "planes", "v", "mas", "es", "ids", "vv", "pres", "steps", "rules"], "i": ["gi", "xi", "a", "I", "io", "si", "n", "di", "ie", "iv", "p", "oi", "cli", "m", "ii", "hi", "index", "j", "chi", "r", "ni", "z", "mini", "mu", "ini", "b", "isi", "ai", "in", "phi", "multi", "inner", "li", "ci", "ti", "ji", "zi", "l", "qi", "u", "bi", "ri", "c", "e", "ori", "iu", "it", "init", "mi", "x", "pi", "h", "fi", "eni", "id", "ip", "uri", "d", "y", "v", "ix", "api", "slice", "anti", "shift", "f", "o", "ui", "info"], "mod": ["mag", "ms", "form", "value", "mult", "step", "mode", "grad", "loop", "m", "log", "index", "r", "mut", "var", " Mod", "modified", " module", "max", "dig", "lex", "row", "range", "min", "month", "dec", "MOD", "mods", "Mod", "x", "module", "id", "scale", "rad", "d", "val", "od", "div", " MOD", "dim", "reg", "temp", "ver"], "ways": ["points", "lights", "roads", "cards", "road", "order", "works", "trans", "ours", "many", "trip", "shows", "steps", "ays", "we", "rows", "direction", "orders", "houses", "w", "wei", "days", "www", "route", "cross", " routes", "ws", "grades", "changes", " walks", "path", " trips", " roads", " guides", " travels", "tracks", "ows", " how", "flows", "pass", "ravel", "lines", "wards", " means", " directions", " way", "projects", "eways", "ards", "forces", " journeys", "words", "posts", "walk", " posts", "how", " gateway", " buses", "ges", " highways", "home", "vers", "uses", "show", "cases", "way", "things", "holes", "travel", "grid", "rooms", "planes", "photos", "guide", "card"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint m,f,r;\\n\t\twhile(true){\\n\t\t\tm = scan.nextInt();\\n\t\t\tf = scan.nextInt();\\n\t\t\tr = scan.nextInt();\\n\t\t\tif(m+f+r==-3) break;\\n\t\t\tint s = m+f;\\n\t\t\tif(m==-1||f==-1) {System.out.println(\"F\"); continue;}\\n\t\t\tif(s>=80) System.out.println(\"A\");\\n\t\t\tif(s>=65&&s<80) System.out.println(\"B\");\\n\t\t\tif(s>=50&&s<65) System.out.println(\"C\");\\n\t\t\tif(s>=30&&s<50){\\n\t\t\t\tif(r>=50) System.out.println(\"C\");\\n\t\t\t\telse System.out.println(\"D\");\\n\t\t\t}\\n\t\t\tif(s<30) System.out.println(\"F\");\\n\t\t}\\n\t}\\n}", "target": "118", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n \\npublic class Main{\\n  public static void main(String[] args) throws Exception{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String s=br.readLine();\\n        String[] spl=s.split(\" \");\\n        int a=Integer.parseInt(spl[0]);\\n        int b=Integer.parseInt(spl[1]);\\n        int c=Integer.parseInt(spl[2]);\\n \\n \t\tArrays.sort(spl);\\n \t\tSystem.out.println(spl[0]+\" \"+spl[1]+\" \"+spl[2]);\\n \\n    }\\n}", "target": "37", "substitutes": {"br": ["res", "io", "err", "Br", "img", "tr", "p", "sr", "er", "buf", "yr", "result", "BR", "nor", "r", "browser", "jar", "cr", "arr", "abs", "report", "gr", "dr", "ocr", "bar", "bc", "obj", "fr", "stream", "HR", "bs", "ber", "bridge", "bro", "ler", "str", "hr", "div", "sp", "reader", "cb", "i", "bl", "rb"], "s": ["fs", "sw", "is", "n", "string", "sf", "rs", "p", "line", "submit", "service", "os", "sv", "sl", "sample", "ls", "side", "in", "input", "ss", "ws", "data", "ns", "l", "ses", "su", "ssl", "ps", "str", "v", "f", "services", "sp", "sb", "g", "i", "strings"], "spl": ["plug", "sw", "ipl", "lim", "sub", "sf", "expl", "pol", "sol", "log", "ima", "pl", "loc", "cil", "packs", "pieces", "sl", "arr", "Pl", "pel", "bl", "cel", "zip", "rel", "sci", "url", "bsp", "split", "elf", "pack", "tw", "cl", "el", "l", "Spl", "ipp", "fl", "kl", "kw", "repl", "look", "piece", "inc", "dl", "PL", "pp", "impl", "lf", "sel", "sp", " sl", "sb", "owl", "sil", "ml", "squ", "isl"], "a": ["ar", "ca", "n", "p", "ac", "m", "r", "A", "sa", "z", "ab", "ae", "ba", "u", "x", "va", "y", "v", "aa", "f", "as", "o", "i", "ad"], "b": ["n", "bb", "p", "j", "r", "z", "ab", "ib", "bc", "ba", "B", "l", "u", "e", "x", "h", "d", "y", "v", "f", "o", "g", "i", "bl"], "c": ["fc", "ca", "n", "p", "C", "ac", "cc", "r", "z", "ec", "cr", "cf", "ci", "q", "l", "u", "e", "h", "d", "v", "dc", "f", "o", "g", "i"]}}
{"code": "//package com.company;\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static class Task {\\n\\n        public void solve(Scanner sc, PrintWriter pw) throws IOException {\\n            int n = sc.nextInt();\\n            int l = sc.nextInt();\\n            String[] strings = new String[n];\\n            for (int i = 0; i < n; i++) {\\n                strings[i] = sc.next();\\n            }\\n            Arrays.sort(strings);\\n            StringBuilder sb = new StringBuilder();\\n            for (String x: strings) sb.append(x);\\n            pw.println(sb.toString());\\n\\n        }\\n    }\\n\\n    static long TIME_START, TIME_END;\\n\\n    public static void main(String[] args) throws IOException {\\n        Scanner sc = new Scanner(System.in);\\n//        Scanner sc = new Scanner(new FileInputStream(\"input\"));\\n        PrintWriter pw = new PrintWriter(new BufferedOutputStream(System.out));\\n//        PrintWriter pw = new PrintWriter(new FileOutputStream(\"input\"));\\n\\n        Runtime runtime = Runtime.getRuntime();\\n        long usedMemoryBefore = runtime.totalMemory() - runtime.freeMemory();\\n        TIME_START = System.currentTimeMillis();\\n        Task t = new Task();\\n        t.solve(sc, pw);\\n        TIME_END = System.currentTimeMillis();\\n        long usedMemoryAfter = runtime.totalMemory() - runtime.freeMemory();\\n        pw.close();\\n        System.err.println(\"Memory increased: \" + (usedMemoryAfter - usedMemoryBefore) / 1000000);\\n        System.err.println(\"Time used: \" + (TIME_END - TIME_START) + \".\");\\n    }\\n\\n    static class Scanner {\\n        StringTokenizer st;\\n        BufferedReader br;\\n\\n        public Scanner(InputStream s) {\\n            br = new BufferedReader(new InputStreamReader(s));\\n        }\\n\\n        public Scanner(FileReader s) throws FileNotFoundException {\\n            br = new BufferedReader(s);\\n        }\\n\\n        public String next() throws IOException {\\n            while (st == null || !st.hasMoreTokens())\\n                st = new StringTokenizer(br.readLine());\\n            return st.nextToken();\\n        }\\n\\n        public int nextInt() throws IOException {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public long nextLong() throws IOException {\\n            return Long.parseLong(next());\\n        }\\n\\n        public String nextLine() throws IOException {\\n            return br.readLine();\\n        }\\n\\n        public double nextDouble() throws IOException {\\n            return Double.parseDouble(next());\\n        }\\n\\n        public boolean ready() throws IOException {\\n            return br.ready();\\n        }\\n    }\\n}", "target": "224", "substitutes": {}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint a = scanner.nextInt();\\n\t\tint b = scanner.nextInt();\\n\t\tint c = scanner.nextInt();\\n\t\tint k = scanner.nextInt();\\n\t\tint ans = 0;\\n\t\tint max = 0;\\n\t\t\\n\t\tans = cal(a, b, c, k);\\n\t\tSystem.out.println(ans);\\n\t\t\\n\t\t\\n\t\tscanner.close();\\n\\n\t}\\n\t\\n\tpublic static int cal(int a, int b, int c, int n) {\\n\t\tint max = 0;\\n\t\tif (n == 0) {\\n\t\t\treturn a + b + c;\\n\t\t}\\n\t\tmax = Math.max(max, cal(a*2, b, c, n-1));\\n\t\tmax = Math.max(max, cal(a, b*2, c, n - 1));\\n\t\tmax = Math.max(max, cal(a, b, c*2, n - 1));\\n\t\treturn max;\\n\t}\\n\\n}\\n", "target": "201", "substitutes": {"scanner": ["schening", "scaner", "Scanener", "latning", "scheker", "nerNER", "latner", "nerker", "anner", "latster", "anener", "verer", "scanNER", "scheer", "scanler", "scanorer", "nerning", "scanster", "scanter", "canner", "Scaner", "Scanner", "Scanler", "anster", " scanorer", "nerler", "nerter", "anNER", "scheter", "caner", "anker", " scanler", "nerster", "scanker", "latNER", "verker", "Scanker", "verener", "canter", " scanker", " scanning", "Scanter", "verter", "scanning", "anorer", " scanter", "verner", "anning", "scanener", "aner", "nerner", "scheorer", "canker", "schener"], "a": ["sta", "ga", "ar", "ca", "at", "au", "p", "oa", "ia", "ac", "alpha", "app", "na", "ada", "A", "sa", "ea", "qa", "ma", "an", "ab", "ai", "in", "ae", "ba", "aka", "pa", "da", "aj", "u", "e", "af", "area", "am", "x", "la", "asa", "inc", "art", "va", "y", "api", "aa", "f", "as", "auto", "ama", "i", "ad"], "b": ["w", "ca", "bb", "p", "nb", "lb", "ac", "bd", "eb", "m", "r", "j", "wb", "abb", "bp", "z", "ab", "ib", "pb", "bc", "ub", "ba", "ob", "common", "B", "l", "u", "bi", "e", "fb", "bs", "x", "h", "d", "y", "db", "v", "bf", "aa", "f", "o", "sb", "be", "cb", "i", "rb"], "c": ["fc", "ch", "w", "cs", "ca", "p", "C", "s", "ac", "m", "cn", "sc", "r", "j", "z", "ec", "lc", "cf", "count", "bc", "ci", "cm", "q", "l", "u", "e", "ce", "x", "h", "ct", "d", "y", "v", "dc", "nc", "uc", "f", "cu", "o", "cy", "i", "con"], "k": ["K", "ks", "w", "ak", "p", "s", "m", "j", "r", "z", "sk", "q", "l", "u", "e", "h", "x", "kw", "d", "y", "v", "ok", "f", "o", "i"], "ans": ["span", "ks", "ants", "cons", "cs", "ops", "lan", "ctx", "s", "amps", "na", "ents", "os", "nan", "ANS", "ana", "outs", "an", "sk", "ann", "ars", "ls", "acs", "ins", "vs", "lines", "ss", "cas", "ax", "ns", "plan", "can", "ams", "x", "eps", "ions", "es", "len", "aned", "scan", "ons", "anc", "as", "asts", "errors", "ras", "rows"], "max": ["best", "res", "big", "ca", "rank", "step", "power", "index", "ace", "rand", "cum", "total", "min", "last", "id", "scale", "ng", "az", "call", "ad", "co", "comb", "pop", "w", "base", "worst", "p", "MAX", "largest", "cross", "work", "count", "ax", "can", "and", "act", "add", "plus", "cost", " Max", "cycle", "maximum", "average", "m", "Max", "std", "conf", "only", "now", "size", "all", "range", "q", "top", "num", "x", "next", "cat", "mod", "push", "current", "div", "wrap", "pad", "parent", "bottom", "exp", "part", "r", "default", "none", "an", "end", "no", "point", "sum", "right", "d", "rest", "key", "patch", "dot", "auto", "parse", "con"], "n": ["network", "span", "w", "non", "p", "s", "nb", "nt", "m", "cn", "nor", "na", "ne", "r", "j", "t", "none", "z", "an", "sn", "N", "in", "nn", "no", "ns", "l", "u", "en", "e", "conn", "x", "d", "un", "y", "v", "len", "nc", "f", "o", "g", "net", "i", "con"]}}
{"code": "import java.io.*;\\n\\npublic class Main{\\n    public static void main(String[]args)throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String str;\\n\\n        while((str = br.readLine()) != null){\\n            String[] str2 = str.split(\" \");\\n            int a = Integer.parseInt(str2[0]);\\n            int b = Integer.parseInt(str2[1]);\\n\\n            int digits = Integer.toString(a + b).length();\\n            System.out.println(digits);\\n        }\\n    }\\n}", "target": "176", "substitutes": {"br": ["res", "io", "ch", "err", "Br", "bb", "tr", "sr", "er", "buf", "yr", "BR", "r", "browser", "cr", "arr", "report", "bar", "dr", "ibr", "bl", "ocr", "gr", "obj", "fr", "stream", "HR", "bs", "ber", "bridge", "bro", "hr", "div", "sp", "reader", "iter", "wr", "rb"], "str": ["kr", "cur", "err", "char", "n", "string", "rs", "pt", "tr", "p", "line", "sr", "er", "result", "strip", "r", "STR", "inst", "txt", "stri", "cr", "st", "sl", "arr", "dr", "gr", "doc", "coll", "in", "input", "url", "obj", "Str", "data", "iter", "fr", "cl", "rr", "text", "pr", "hr", "div", "sp", "reader", "i", "bl"], "str2": ["brB", " strB", " str6", "strTwo", "str0", "stri02", "br2", "int2", "str6", "Str0", "stri0", "br1", "str02", "StrB", "int0", " str1", "int1", "Str02", "str1", "stri2", " strTwo", "Str2", "strB", "brTwo", "Str6", "StrTwo", "stri1", "Str1", "int02", "float6", "float1", "float2"], "a": ["fa", "ga", "ca", "base", "oa", "s", "alpha", "ac", "ia", "na", "ada", "A", "sa", "ea", "ma", "an", "ab", "ae", "ba", "aka", "pa", "da", "l", "aj", "c", "area", "x", "asa", "la", "va", "za", "aa", "as", "ama", "i", "ad"], "b": ["xb", "n", "bb", "gb", "p", "lb", "nb", "eb", "zb", "j", "r", "wb", "abb", "z", "ab", "ib", "pb", "length", "ba", "ob", "B", "l", "mb", "c", "bi", "e", "fb", "bs", "x", "h", "bis", "obb", "d", "y", "v", "aa", "f", "abc", "o", "sb", "cb", "i", "rb"], "digits": ["duets", "decings", "Digets", " digets", "octs", "Digities", "dues", "digings", "digps", "Diges", "decits", "decities", "octities", "dups", "diges", "Digings", "decs", "Digits", "digs", "digities", "digets", " digps", " diges", "octits", "octings", "duits", "Digps", "Digs"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint earliest = 1200;\\n\t\tfor(int i = 1; i <= 9; i++) {\\n\t\t\tint j = i * 111;\\n\t\t\tif(N <= j && j < earliest) {\\n\t\t\t\tearliest = j;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(earliest);\\n\t}\\n\\n}\\n", "target": "106", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "cur", "cs", "search", "ca", "ser", "sub", "cer", "cc", "ner", "sec", "soc", "app", "na", "acc", "osc", "sq", "ec", "cr", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "str", " SC", "sch", "scan", "nc", " Sc", "sh", "sp", "g", "cb", "SC"], "N": ["O", "K", "I", "NG", "NR", "n", "Ns", "J", "C", "Ni", "T", "NT", "Ne", "A", "SN", "NN", "Size", "Q", "R", "D", "Y", "B", "Num", "L", "NI", "M", "NC", "X", "No", "S", "P", "F", "V", "NS", "NL", " n"], "earliest": ["emerlest", "emerlier", "elliest", "Earest", "ellier", "everliest", "earlier", "interliest", "emerliest", "earslier", "learliest", "yearlast", "earlest", "arstal", "earsliest", "yearstal", "learlier", "Earliest", "interstal", "arlest", "Earlast", "everstal", "everest", "arprise", "learlast", "earslest", "arliest", "everlast", "emerstal", "everlier", "arli", "ellast", "earprise", "Earlier", "learstal", "arlier", "interprise", "emerprise", "earlast", "yearlier", "earsli", "yearliest", "earest", "elest", "emerli", "interlier", "earli", "earstal"], "i": ["xi", "gi", "I", "io", "si", "n", "at", "ie", "di", "ami", "p", "oi", "m", "ii", "hi", "ni", "z", "ini", "b", "ai", "in", "phi", "ji", "li", "ci", "q", "l", "ri", "u", "bi", "qi", "e", "init", "it", "ori", "x", "pi", "id", "ip", "d", "y", "v", "ix", "api", "f", "o", "ui", "info", "start", "k"], "j": ["bj", "job", "ja", "si", "n", "pt", "dj", "ie", "J", "jo", "ii", "ij", "ne", "note", "ni", "jj", "js", "z", "jl", "b", "ind", "ji", "li", "obj", "q", "l", "aj", "qi", "oj", "bi", "point", "it", "x", "next", "kj", "adj", "uj", "jit", "y", "v", "ix", "jen", "json", "o", "k", "jp"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.ArrayList;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int inputCount = Integer.parseInt(br.readLine());\\n        for( int i = 0; i < inputCount; i++) {\\n            String line = br.readLine();\\n            List<Integer> sideLengthList = new ArrayList<>();\\n            for( String s : line.split(\" \")  ) {\\n                sideLengthList.add( Integer.parseInt(s) );\\n            }\\n            Collections.sort(sideLengthList, Collections.reverseOrder());\\n            int cSide = sideLengthList.get(0);\\n            int aSide = sideLengthList.get(1);\\n            int bSide = sideLengthList.get(2);\\n            if( cSide * cSide == aSide * aSide + bSide * bSide) {\\n                System.out.println(\"YES\");\\n            } else {\\n                System.out.println(\"NO\");\\n            }\\n        }\\n    }\\n}\\n\\n", "target": "65", "substitutes": {"br": ["plug", "per", "res", "io", "err", "Br", "bb", "ref", "tr", "sr", "er", "buf", "yr", "result", "BR", "ner", "handle", "r", "browser", "bp", "cr", "arr", "b", "gr", "dr", "ocr", "bar", "org", "keeper", "ob", "mr", "her", "fr", "stream", "HR", "src", "ber", "bridge", "lr", "bro", "ler", "bh", "hr", "current", "bf", "orb", "reader", "cb", "bl", "rb"], "inputCount": ["lengthcount", "lengthList", "InputLength", "lengthCount", "outputCounter", " inputcount", "inputCounter", "inputLength", "inputSum", " inputList", "Inputcount", "lengthSum", " inputCounter", "outputCode", " inputCode", "outputLength", "inputCode", "InputSum", " inputSum", "inputList", " inputLength", "InputList", "InputCount", "InputCounter", "inputcount", "outputCount", "InputCode"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "m", "ii", "index", "j", "t", "ini", "mu", "b", "ai", "count", "phi", "multi", "li", "ti", "ci", "zi", "ri", "qi", "u", "bi", "c", "e", "iu", "mi", "pi", "x", "h", "id", "ip", "uri", "v", "slice", "f", "ui", "o", "k"], "line": ["Line", "file", "inline", "cell", "LINE", "string", "code", "word", "name", "item", "section", "header", "part", "pass", "sync", "sl", "one", "b", "entry", "side", "lc", "in", "lines", "split", "data", "row", "page", "l", "out", "text", "lin", "source", "style", "str", "lf", "nl"], "sideLengthList": [" sideLengthType", " sidelengthL", "sideLengthType", "sideNumberMap", " sideLengthUnit", "sidelengthMap", "sidelengthString", " sideNumberlist", "sidePositionList", "sideOffsetList", " sideNumberMap", "sideSideOrder", " sideLengthOrder", "sideTypeLine", "sideNumberL", "sideNumberList", " sideNumberOrder", "sideNumberlist", " sidelengthList", "sideCountMap", "sideAmountList", "sideLengthString", " sideNumberLine", "sideLengthlist", "sideLengthLine", "sidelengthL", "sideLenlist", "sidelengthPart", " sideLengthPart", "sideTypeL", "sideAmountType", "sideTypeList", "sideLengthObj", "sideSizeUnit", " sideNumberObj", "sideSizeObj", "sideSideL", "sideLengthSet", "sideAmountL", " sideLengthMap", " sideNumberUnit", "sideSizeList", "sideSizeString", "sideNumberUnit", "sideLengthL", "sideNumberOrder", "sideLenString", "sideLengthPart", "sideSizeL", "sideNumberPart", " sideLengthSet", "sideSidePart", "sideNumberObj", "sideSideList", "sidePositionObj", "sideSizeMap", "sideOffsetL", " sideNumberList", "sideOffsetMap", "sideLengthUnit", "sideCountList", " sideNumberPart", "sidePositionL", "sideTypeType", "sideNumberType", "sideNumberSet", "sideLengthOrder", "sideSizelist", "sideLengthMap", "sideOffsetSet", "sideLenL", " sidelengthString", "sidelengthOrder", "sideNumberLine", " sideLengthlist", " sideNumberSet", "sideCountL", " sideLengthL", "sideCountSet", "sidelengthList", " sideLengthLine", " sideNumberL", "sideLenList", " sideLengthObj", "sidePositionUnit", "sideAmountLine", " sidelengthlist", "sidelengthlist", " sideLengthString", " sideNumberType"], "s": ["a", "fs", "less", "is", "si", "n", "string", "name", "p", "os", "r", "pass", "sync", "js", "b", "ls", "side", "lines", "ss", "ws", "ns", "l", "u", "c", "e", "h", "id", "S", "d", "str", "v", "es", "feed", "f", "o", "strings", "k", "spec"], "cSide": ["cShape", "bMode", " cIDE", "bHalf", "ciLength", "CHalf", "bShape", "aMode", "ciDay", "cLength", " cHalf", " cDay", "cDay", "ciIDE", "iDay", "aHalf", "CMode", "cIDE", "aShape", "cMode", "iSide", "iIDE", " cShape", "CSide", "ciSide", "cHalf", "iLength", " cLength"], "aSide": ["uHalf", "bHalf", "bIDE", "aaHalf", "aside", "bDone", "aIDE", "uSource", "aHalf", "cDone", "cside", " aIDE", "bside", " aside", "aDone", "aSource", " aSource", " aHalf", "aaSide", "bSource", "cHalf", "uIDE", "uSide", "aaside", " aDone"], "bSide": ["bbside", "bHalf", "BPart", "aside", "bDone", " bPart", " bDone", "aHalf", "cDone", "bbSide", "BSide", "cside", "Bside", "BHalf", "bside", "pPart", "pSide", "pside", "bbDone", " bHalf", " bside", "bPart"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        String str = sc.next();\\n        char[] c = str.toCharArray();\\n        \\n        boolean ok = false;\\n        if (c[0] == c[1] && c[2] == c[3] && c[0] != c[2]) {\\n            ok = true;\\n        } else if (c[0] == c[2] && c[1] == c[3] && c[0] != c[1]) {\\n            ok = true;\\n        } else if (c[0] == c[3] && c[1] == c[2] && c[0] != c[1]) {\\n            ok = true;\\n        }\\n        \\n        if (ok) {\\n            System.out.println(\"Yes\");\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n    }\\n}", "target": "33", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tint a,b,s=0;\\n\t\tString op=\"+\";\\n\t\tScanner scan = new Scanner(System.in);\\n\t\twhile(true)\\n\t\t{\\n\t\t\ta=scan.nextInt();\\n\\n\t\t\top=scan.next();\\n\t\t\tb=scan.nextInt();\\n\t\t\tif(op.equals(\"?\"))\\n\t\t\t\tbreak;\\n\t\t\t\\n\t\t\tswitch (op){\\n\t\t\t  case \"+\":\\n\t\t\t\t  s=a+b;\\n\t\t\t\t  break;\\n\t\t\t  case \"-\":\\n\t\t\t\t  s=a-b;\\n\t\t\t\t  break;\\n\t\t\t  case \"*\":\\n\t\t\t\t  s=a*b;\\n\t\t\t\t  break;\\n\t\t\t  case \"/\":\\n\t\t\t\t  s=a/b;\\n\t\t\t\t  break;\\n\t\t\t\t    default :\\n\t\t\t\t    break;\\n\t\t\t}\\n\t\tSystem.out.println(s);\\n\t\t\\n\t\t}\\n\t\t\\n\t}\\n\t}", "target": "139", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport static java.lang.Math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t// \u5165\u529b\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\t\\n\t\t// \u8a08\u7b97\\n\t\tint result = 100000;\\n\t\tfor(int i = 0; i < s.length()-t.length()+1; i++){\\n\t\t    int tmp = 0;\\n\t\t    for(int j = 0; j < t.length(); j++){\\n\t\t        if(s.charAt(i+j) != t.charAt(j)) tmp++;\\n\t\t    }\\n\t\t    result = min(result, tmp);\\n\t\t}\\n\t\t\\n\t\t\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(result);\\n\t}\\n\t\\n\tpublic static class Scanner {\\n\t\tprivate BufferedReader br; private StringTokenizer tok;\\n\t\tpublic Scanner(InputStream is) throws IOException { br = new BufferedReader(new InputStreamReader(is));}\\n\t\tprivate void getLine() throws IOException { while(!hasNext()) tok = new StringTokenizer(br.readLine());}\\n\t\tprivate boolean hasNext() { return tok != null && tok.hasMoreTokens();}\\n\t\tpublic String next() throws IOException { getLine(); return tok.nextToken();}\\n\t\tpublic int nextInt() throws IOException { return Integer.parseInt(next());}\\n\t\tpublic long nextLong() throws IOException { return Long.parseLong(next());}\\n\t\tpublic double nextDouble() throws IOException { return Double.parseDouble(next());}\\n\t}\\n}\\n", "target": "158", "substitutes": {"sc": [" src", " sn", " z", " sm", " ir", " r", " ser", " scr", "ss", " arr", "SC", "Sc", " surf", " cur", " SC", " res", " ans", "scan", " scorer", " Sc", " iter", "Scan", " sl", "sb", " rc", " scans", " ar", " br"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\\n\t\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\twhile(true){\\n\t\t\tint num = 0;\\n\t\t\tString moji = scan.next();\\n\t\t\tint moji_len = moji.length();\\n\t\t\t//??\u00a7????????\u00a8?\u00b0????????????\\??????????????????\\n\t\t\tfor(int cnt_len = 0; cnt_len < moji_len; cnt_len++){\\n\t\t\t\tchar moji_one = moji.charAt(cnt_len);\\n\t\t\t\tString moji_str = String.valueOf(moji_one);\\n\t\t\t\tint moji_int = Integer.decode(moji_str);\\n\t\t\t\tnum += moji_int;\\n\t\t\t}\\n\t\t\t//0?????\\???????????????????????\u00a8?????????????????????\\n\t\t\tif(num == 0)\\n\t\t\t\tbreak;\\n\t\t\telse\\n\t\t\t\tSystem.out.println(num);\\n\t\t}\\n\t\t//????\u00a7????\\n\t\tscan.close();\\n\t}\\n}", "target": "144", "substitutes": {"scan": ["run", "chan", "span", "pin", "search", "n", "connect", "loop", "ner", "result", "serv", "r", "pass", "ln", "sync", "skip", "an", "ann", "fan", "send", "start", "in", "conf", "inner", "ss", "end", "nn", "all", "sign", "win", "sin", "read", "se", "l", "can", "cat", "open", "clean", "add", "server", "Scan", "util", "walk", "stat", "reader", "watch", "iter", "parse", "con"], "num": ["nu", "number", "nr", "NUM", "gen", "name", "set", "nb", "m", "result", "lang", "counter", "max", "count", "inner", "multi", "obj", "cmp", "Num", "child", "init", "out", "sum", "id", "orig", "add", "mem"], "moji": [" mojo", "gooji", " moja", "goobi", "poji", "koja", "poja", "moobi", "goja", "moja", "mooji", "mojo", "goji", " mooji", "koobi", "gojo", "pooji", "kooji", "poobi", "pojo", "koji"], "moji_len": ["moji_pos", "mooji_length", "moji2len", "moji2length", "mooji2length", "mooji_len", "moji_length", "moji2pos", "mooji2pos", "mooji2Len", "mooji_Len", "mooji2len", "mooji_pos", "moji_Len", "moji2Len"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long N = sc.nextLong();\\n        long K = sc.nextLong();\\n            if(N%K < K - N%K){\\n                System.out.println(N%K);\\n            }else{\\n                System.out.println(K-N%K);\\n            }\\n    }\\n}", "target": "22", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "sr", "ctx", "com", "cc", "ner", "tc", "enc", "sync", "osc", "cr", "sq", "ec", "lc", "bc", "sci", "ss", "cus", "cl", "se", "c", "src", "Sc", "asc", "sche", "ct", " SC", "sch", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "SC"], "N": ["O", "U", "E", "NG", "NR", "n", "Ns", "AN", "ND", "J", "C", "T", "NT", "Ne", "A", "SN", "G", "CN", "NN", "W", "Q", "R", "D", "H", "Y", "NF", "NA", "Z", "L", "NM", "M", "NC", "UN", "X", "No", "NE", "S", "P", "F", "Node", "V", "CNN", "NS", "NL", "MN", "Number", " n", "IN"], "K": ["O", "U", "E", "I", "Part", "NG", "Kick", "UK", "CC", "KR", "AK", "J", "C", "Sk", "T", "Kat", "Length", "MK", "Key", "SK", "G", "Max", "W", "Q", "Point", "R", "H", "D", "Work", "KK", "Y", "Mask", "DC", "NA", "Z", " k", "Even", "L", "ANK", "KE", "M", "TH", "PK", "KS", "X", "HK", "CP", "S", "P", "F", "ID", "IK", "V", "Ke", "KN", "Power", "Start", "NK", "k"]}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\t\\n\t\t//????????\u00a3????????????\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t//??????????????\u00a3?\u00a8?\\n\t\tboolean [][] cards = new boolean[4][13];\\n\t\t//???????????????????????? ???????????????????????????\\n\t\t//String mark = new String();\\n\t\t//????????????????????\u00b0\\n\t\tint num =sc.nextInt();\\n\t\t//??\\????????????????????????????????\u00b0????????????\\n\t\tfor(int i=0; i < num; i++){\\n\t\t\t//????????????????????????\\n\t\t\tString mark = sc.next();\\n\t\t\t//??????????????????????????\u00b0????????\\?????????????????????true\\n\t\t\tif(mark.equals(\"S\")){\\n\t\t\t\tcards[0][sc.nextInt()-1] = true;\\n\t\t\t}else if(mark.equals(\"H\")){\\n\t\t\t\tcards[1][sc.nextInt()-1] = true;\\n\t\t\t}else if(mark.equals(\"C\")){\\n\t\t\t\tcards[2][sc.nextInt()-1 ]= true; \\n\t\t\t}else if(mark.equals(\"D\")){\\n\t\t\t\tcards[3][sc.nextInt()-1] = true;\\n\t\t\t}\\n\t\t}\\n\t\t//?????????????????????????????\u00a8???\\n\t\tfor(int i = 0; i< cards.length;i++){\\n\t\t\tfor(int j=0; j< cards[0].length;j++){\\n\t\t\t\t//true??\u00a7????????????????????\u00a8???\\n\t\t\t\tif(!cards[i][j]){\\n\t\t\t\t\tif(i == 0){\\n\t\t\t\t\t\tSystem.out.println(\"S \" + (j+1));\\n\t\t\t\t\t}else if(i == 1 ){\\n\t\t\t\t\t\tSystem.out.println(\"H \" + (j+1));\\n\t\t\t\t\t}else if(i == 2){\\n\t\t\t\t\t\tSystem.out.println(\"C \" + (j+1));\\n\t\t\t\t\t}else if(i == 3){\\n\t\t\t\t\t\tSystem.out.println(\"D \" + (j+1));\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t}\\n}", "target": "189", "substitutes": {}}
{"code": "import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc=new Scanner(System.in);\\n    int A=sc.nextInt();\\n    int B=sc.nextInt();\\n    int C=sc.nextInt();\\n    int X=sc.nextInt();\\n\\n    int res=0;\\n    for (int a=0; a<=A; a++) {\\n      for (int b=0; b<=B; b++) {\\n        int c=(X-a*500-b*100)/50;\\n        if (c>=0 && c<=C)\\n          res++;\\n      }\\n    }\\n    System.out.println(res);\\n  }\\n}\\n", "target": "127", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "search", "cer", "cor", "sr", "ctx", "cc", "ner", "sec", "tc", "soc", "acc", "sync", "osc", "cr", "sq", "lc", "ocr", "cont", "bc", "sci", "ss", "cus", "cl", "scope", "se", "src", "Sc", "asc", "sche", "cv", " SC", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "parser", "parse", "SC"], "A": ["API", "Alpha", "U", "I", "AC", "As", "CC", "Ca", "LA", "AA", "G", "N", "D", "Y", "NA", "M", "SA", "Az", "EA", "Area", "Ar", "S", "P", "F", "Am", "CA"], "B": ["O", "E", "I", "Bi", "AB", "BF", "BE", "NB", "TB", "MB", "G", "N", "Q", "R", "BC", "GB", "D", "CB", "Y", "DB", "L", "M", "LB", "Bs", "BA", "OB", "P", "F", "EB", "BB", "BI", "WB"], "C": ["O", "U", "E", "I", "FC", "AC", "CC", "T", "EC", "CF", "G", "N", "W", "R", "BC", "D", "Y", "Cu", "M", "JC", "Sc", "S", "P", "F", "uc", "SC"], "X": ["K", "U", "E", "I", "J", "T", "PC", "G", "W", "N", "IX", "Q", "XX", "R", "H", "D", "Y", "Z", "L", "M", "Sc", "x", "S", "P", "F", "V"], "res": ["results", "Res", "re", "cons", "css", "err", "ms", "cs", "params", "blocks", "rs", "cms", "ress", "result", "nos", "req", "ras", "rev", "os", "bytes", "report", "ES", "gr", "max", "response", "rel", "rus", "Rs", "rx", "RES", "cas", "real", "row", "range", "ns", "reset", "rss", "out", "resp", "pre", "ps", "val", "rest", "es", "rez", "ret", "resolution", "details", " Res", "ries", "pres", "seq", "rows"], "a": ["fa", "ak", "ga", "ar", "ca", "n", "au", "p", "oa", "aaa", "alpha", "ac", "sa", "ea", "this", "an", "ab", "ace", "ai", "ae", "ba", "pa", "da", "l", "aj", "e", "af", "am", "x", "area", "asa", "y", "va", "api", "aa", "f", "as", "auto", "i", "ad"], "b": ["br", "base", "bb", "gb", "p", "lb", "nb", "s", "eb", "j", "r", "abb", "bp", "ab", "ib", "bc", "ba", "l", "u", "bi", "e", "fb", "bs", "x", "d", "y", "db", "v", "aa", "bf", "f", "o", "sb", "be", "cb", "i", "rb"], "c": ["pc", "fc", "rc", "core", "ca", "n", "code", "cor", "oc", "p", "cc", "ac", "sec", "enc", "loc", "r", "cr", "ec", "lc", "cf", "count", "bc", "xc", "ci", "cache", "cus", "l", "u", "e", "ce", "x", "unc", "ct", "d", "dc", "v", "nc", "uc", "f", "cu", "anc", "abc", "o", "cy", "cb", "i", "k"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n  static InputReader in;\\n  static PrintWriter out;\\n\\n \\n\\n\\n  static class Solution {\\n    void solve() throws IOException {\\n      int[] cnt = new int[26];\\n      char[] alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u',\\n                          'v','w','x','y','z'};\\n      Scanner sc = new Scanner(System.in);\\n      while (sc.hasNext()) {\\n        String word = sc.next(); \\n        for (int i = 0; i < word.length(); i++) {\\n          for (int j = 0; j < 26; j++) {            \\n            if(alphabet[j] == word.toLowerCase().charAt(i)) {\\n              cnt[j]++;\\n            }\\n          }\\n        }\\n        \\n      }\\n      for (int i = 0; i < 26; i++) {\\n        out.println(alphabet[i] + \" : \" + cnt[i]);\\n      }\\n//      End solve()\\n    }\\n//    End Solution\\n}\\n\\n\\n  public static void main(String[] args) throws IOException {\\n    in = new InputReader(System.in);\\n    out = new PrintWriter(System.out);\\n    Solution solver = new Solution();\\n    solver.solve();\\n    out.close();\\n}\\n\\n\\n  static class InputReader {\\n    public BufferedReader br;\\n    public StringTokenizer st;\\n\\n    public InputReader(InputStream stream) {\\n      br = new BufferedReader(new InputStreamReader(stream));\\n    }\\n\\n    public int nextInt() throws IOException {\\n      while (st == null || !st.hasMoreTokens()) {\\n        st = new StringTokenizer(br.readLine());\\n      }\\n      return Integer.parseInt(st.nextToken());\\n    }\\n\\n    public long nextLong() throws IOException {\\n      while (st == null || !st.hasMoreTokens()) {\\n        st = new StringTokenizer(br.readLine());\\n      }\\n      return Long.parseLong(st.nextToken());\\n    }\\n\\n    public String next() throws IOException {\\n      while (st == null || !st.hasMoreTokens()) {\\n        st = new StringTokenizer(br.readLine());\\n      }\\n      return st.nextToken();\\n    }\\n\\n    public double nextDouble() throws IOException {\\n      while (st == null || !st.hasMoreTokens()) {\\n        st = new StringTokenizer(br.readLine());\\n      }\\n      return Double.parseDouble(st.nextToken());\\n    }\\n\\n  }\\n\\n}", "target": "242", "substitutes": {"in": ["run", "file", "din", "table", "is", "io", "In", "bin", "raw", "line", "s", "query", "user", "world", "index", "r", "resource", "ini", "entry", "b", "ins", "input", "inner", "readable", "data", "read", "c", "stream", "e", "or", "source", "id", "inc", "path", "buffer", "ex", "f", "as", "info", "reader", "IN", "con"], "out": ["Out", "exec", "list", "parent", "timeout", "op", "at", "string", "raw", "name", "screen", "line", "output", "write", "user", "exp", "index", "outs", "bar", "comment", "prefix", "error", "data", "obj", "object", "point", "pool", "ou", "process", "print", "sum", "id", "str", "OUT", "path", "again", "off", "console", "ex", "to", "up", "temp"], "cnt": ["ecnt", "Cnt", "ecrt", " cant", "nno", "knt", "nnt", "decnt", "Cno", "Cannot", "decint", "ecint", "cint", "cpt", "cno", "nint", "Cant", "kannot", "CNT", "Cpt", " cNT", " cint", "decno", " cno", "decrt", " cannot", "kNT", "nant", "kpt", " cpt", " crt", "Cint", "cant", "cannot", "crt", "cNT", "ecno"], "alphabet": ["alacters", "alphacters", "alphaabetic", "alphaabet", "archacters", "alphphabet", "alphabetic", "asinabet", "alphaacters", "alagram", "isalabet", "isalgebra", "alphaagram", "archabet", "alabet", "alphatin", "isalabetic", "asinatin", "alphagram", "alphagebra", "asinphabet", "archphabet", "alphaphabet", "alphaatin", "operabet", "isalphabet", "operatin", "asinabetic", "operabetic", "alphgebra", "archagram", "alabetic", "algebra", "operphabet"], "sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "search", "ser", "cer", "sf", "sr", "cc", "ner", "cr", "osc", "sl", "system", "ec", "lc", "st", "go", "ck", "ocr", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "se", "c", "isc", "Sc", "asc", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "word": ["token", "list", "number", "w", "char", "string", "space", "Word", "name", "line", "language", "wd", "man", "letter", "feature", "r", "hyp", "work", "W", "input", "wave", "voice", "bug", "layer", "point", "password", "c", "term", "can", "or", "text", "x", "next", "words", "str", "v", "message", "ring", "character", "wig", "key", "f", "phrase", "gram", "tag", "card"], "i": ["a", "xi", "gi", "I", "ei", "io", "si", "n", "di", "ie", "ami", "p", "oi", "cli", "m", "ii", "hi", "index", "ni", "z", "mini", "ini", "jj", "b", "ai", "phi", "ji", "multi", "li", "ci", "zi", "ri", "l", "u", "bi", "c", "qi", "e", "ori", "iu", "it", "eni", "mi", "pi", "x", "h", "yi", "init", "my", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "slice", "api", "vi", "f", "o", "ui", "info", "start", "k"], "j": ["bj", "ch", "br", "ja", "n", "jc", "ie", "dj", "J", "p", "m", "jo", "ii", "ij", "index", "r", "jet", "z", "js", "jj", "b", "jl", "ind", "ji", "li", "obj", "fr", "l", "aj", "u", "oj", "qi", "e", "it", "x", "pr", "next", "adj", "uj", "d", "je", "y", "v", "jen", "ix", "key", "f", "o", "ui", "g", "k", "jp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\t// \u5165\u529b\u5024\u306e\u53d6\u5f97\\n\t\tString S = sc.next();\\n\t\t\\n\t\t// \u7d50\u679c\u306e\u51fa\u529b\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tfor (int i = 0; i < S.length(); i++) {\\n\t\t\tsb.append(\"x\");\\n\t\t}\\n\t\tSystem.out.println(sb.toString());\\n\t\t\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "122", "substitutes": {"sc": [" pars", " src", "rc", " sp", "cr", " sw", " ser", " scr", "bc", "ss", " arr", "se", "c", " app", "Sc", " cat", " scanner", " inst", " SC", " ans", "scan", "nc", " Sc", " cont", "sb", " rc", "SC", "gram"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\nclass Main{\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st  = new StringTokenizer(br.readLine());\\n\\n        int A = Integer.parseInt(st.nextToken());\\n        int B = Integer.parseInt(st.nextToken());\\n        int H = Integer.parseInt(st.nextToken());\\n        int M = Integer.parseInt(st.nextToken());\\n\\n        int mins = 60*H+M;\\n\\n        double M_angle = M*6;\\n        double H_angle = mins*0.5;\\n\\n        double x1 = A*Math.cos(Math.toRadians(H_angle));\\n        double y1 = A*Math.sin(Math.toRadians(H_angle));\\n        double x2 = B*Math.cos(Math.toRadians(M_angle));\\n        double y2 = B*Math.sin(Math.toRadians(M_angle));\\n\\n        System.out.println(Math.sqrt((x2-x1)*(x2-x1)  + (y2-y1)*(y2-y1)));\\n\\n\\n\\n    }\\n\\n}", "target": "86", "substitutes": {"br": ["res", "io", "err", "Br", "img", "bb", "tr", "sr", "er", "buf", "yr", "BR", "fin", "r", "browser", "cr", "arr", "b", "bar", "dr", "gr", "bc", "obj", "mr", "fr", "stream", "src", "bs", "ber", "out", "bt", "bridge", "bro", "bed", "Reader", "rt", "str", "db", "hr", "sp", "sb", "reader", "prot", "bl", "rb"], "st": ["dd", "sw", "sta", "gest", "ser", "pt", "sr", "ste", "sts", "set", "s", "stand", "ft", "nt", "sc", "first", "sth", "inst", "r", "sa", "stri", "t", "est", "sv", "sl", "sn", "ost", "ld", "std", "tt", "ss", "fr", "stack", "nd", "cl", "se", "ast", "ist", "src", "stress", "ct", "d", "str", "rest", "again", "ut", "const", "sh", "sp", "ST", "sb", "start", "rd", "bl", "St"], "A": ["a", "API", "Alpha", "U", "O", "I", "AC", "As", "AF", "GA", "C", "T", "Ca", "AM", "Array", "LA", "AA", "W", "N", "IA", "AS", "D", "Y", "NA", "OA", "L", "Min", "X", "AD", "Area", "Offset", "AR", "mA", "BA", "S", "P", "F", "AH", "AP", "At", "An", "CA"], "B": ["O", "U", "E", "I", "BS", "AB", "J", "C", "T", "BE", "BR", "MB", "G", "b", "W", "N", "Q", "R", "BC", "GB", "D", "Y", "L", "X", "Bs", "BA", "S", "P", "F", "OB", "V", "EB", "Number", "BB", "BI", "WB", "BM"], "H": ["O", "K", "U", "E", "I", "C", "T", "G", "W", "HS", "N", "Q", "R", "D", "Y", "L", "h", "X", "MH", "HH", "S", "F", "P", "HC", "V", "HM", "EH", "HI"], "M": ["O", "K", "U", "E", "I", "J", "C", "T", "m", "G", "W", "N", "Q", "R", "D", "Y", "MS", "Z", "L", "Min", "X", "S", "P", "F", "MD", "V", "MN", "Ms", "CM"], "mins": ["MIN", "parts", "lim", "ms", "Hours", "days", "INS", "s", "m", "mini", "minute", "ins", "Age", "lines", "radius", "min", "hours", "lins", "Min", "mods", "Apr", "MI", "Mini", "Days", "eps", "S", "ints", "limits", "dim", "times", "md", "Ms", "features"], "M_angle": ["M_angles", "M2length", "N_angles", "MJoblock", "N_angle", "M__angled", "M__angular", "MJobmiddle", "M2angles", "M_lock", "M_length", "MAMangles", "H_angular", "MAMlock", "MJobangles", "H_angles", "MAMmiddle", "M_angled", "H_lock", "H_length", "N_length", "MJobangle", "M__angle", "M2angle", "M_middle", "M2angled", "H_middle", "M_angular", "MAMangle", "N_angled", "M__length", "H_angled"], "H_angle": ["M_angles", "H5angle", "M_angler", "H_align", "H67angled", "H2radius", "H67align", "M_radius", "H_angular", "H_radius", "M_edge", "H_angles", "H_angled", "M_angled", "H2angler", "H5edge", "H_edge", "H67edge", "H_angler", "H5angled", "M_align", "M_angular", "H2angle", "H2angular", "H67angle", "H5align"], "x1": ["Xone", "y71", "yfirst", " xone", "image1", "image1001", "xfirst", "imagefirst", "xone", "x0", "ix71", "y1001", "X1", "Y1", "y0", "yone", " x0", "x71", "X0", "Y1001", "ix1", "Yfirst", "image2", "X71", "X2", "ix2", "Y2", "x1001"], "y1": ["h2", "m1", "zyONE", "yfirst", "h1", "z2", "xone", "ya1", "yaONE", "y01", "Y1", "m2", "yONE", "yiONE", "YOne", "yOne", "yone", "xOne", "hOne", "yipart", "x01", "Yone", "ypart", "zyfirst", "zy1", "hone", "z1", "yi1", "Y2", "m01", "zypart", "z01", "yafirst", "yifirst", "yapart"], "x2": ["wd1", "h2", "zII", "y72", "h1", "h72", "yII", "z2", "xII", "ax4", "x0", "ax2", "x4", "x72", "y0", " x02", " x0", "h0", "ax02", "ztwo", "X4", "x02", "wd2", " x4", "wdtwo", "xtwo", "X02", "ytwo", "z1", "X2", "wdII", " x72"], "y2": ["y8", "Ytwo", "y62", "y182", "x62", "sy182", "z2", "Y1", "sytwo", "vy62", "ztwo", "sy2", "z62", " y8", "xtwo", " ytwo", "x8", "ytwo", "vytwo", "z1", "vy2", "Y182", "Y2", "z8", "vy182", "sy1", "vy1"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\npublic static void main(String[] args){\\nScanner sc = new Scanner(System.in);\\nint x =sc.nextInt();\\nint y=1;\\nfor(int i=0; i<3; i++) y *=x;\\nSystem.out.println(y);\\n}\\n}\\n\\n", "target": "36", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "search", "ca", "sub", "cc", "sec", "soc", "acc", "sync", "osc", "cr", "sq", "ec", "lc", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", "ct", "ng", " SC", "scan", "nc", "uc", "sh", "sp", "SC"], "x": ["xi", "a", "number", "px", "w", "pos", "n", "step", "p", "m", "index", "t", "z", "b", "in", "xy", "Y", "l", "c", "e", "h", "xs", "X", "python", "dx", "xx", "id", "d", "v", "ix", "ex", "f"], "y": ["iy", "a", "ny", "n", "dy", "p", "yan", "m", "index", "j", "vy", "gy", "t", "oy", "z", "yy", "count", "xy", "ya", "ky", "Y", "wy", "ys", "yo", "py", "c", "ey", "yt", "yi", "zy", "pi", "python", "ty", "d", "ry", "isy", "sky", "sy", "cy", "ye"], "i": ["xi", "a", "gi", "I", "io", "w", "si", "n", "di", "p", "oi", "m", "ii", "hi", "chi", "j", "t", "ni", "z", "mu", "ini", "ai", "multi", "ji", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "c", "e", "pi", "id", "ip", "d", "v", "ix", "f", "o", "ui"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        double a[] = new double[n];\\n        for (int i = 0; i < n; i++) {\\n            a[i] = sc.nextDouble();\\n        }\\n        sc.close();\\n\\n        double sum = 0;\\n        for (int i = 0; i < n; i++) {\\n            sum = sum + 1.0 / a[i];\\n        }\\n\\n        System.out.println(1.0 / sum);\\n    }\\n}\\n", "target": "120", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "cc", "ner", "sync", "system", "sl", "cr", "osc", "ec", "sq", "lc", "cont", "bc", "sci", "ss", "cl", "scope", "se", "c", "src", "conn", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "dc", "mc", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "SC"], "n": ["network", "span", "w", "p", "s", "nb", "m", "nt", "ii", "ne", "j", "r", "ln", "nan", "t", "z", "sn", "b", "N", "in", "count", "nn", "size", "no", "ns", "l", "u", "num", "c", "e", "conn", "x", "d", "y", "v", "len", "nc", "f", "o", "net", "g", "k"], "a": ["tta", "ga", "ca", "p", "aaa", "ac", "alpha", "s", "na", "A", "sa", "ea", "t", "ana", "ma", "abs", "an", "b", "count", "ae", "ba", "ata", "total", "da", "l", "u", "aw", "c", "e", "area", "h", "x", "am", "ta", "la", "d", "va", "aa", "as", "array", "ama", "au"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "oi", "cli", "abi", "ii", "hi", "attr", "chi", "j", "index", "ni", "z", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "zi", "l", "ri", "u", "bi", "c", "qi", "e", "init", "iu", "it", "eni", "mi", "pi", "x", "fi", "id", "uri", "ip", "d", "y", "v", "ix", "slice", "key", "f", "o", "ui", "info"], "sum": ["weight", "fill", "um", "bin", "si", "unit", "diff", "alpha", "average", "result", "help", "sort", "index", "pal", "ul", "pass", "default", "Sum", "b", "max", "doc", "conf", "comment", "count", "av", "loss", "mean", "ss", "match", "size", "total", "miss", "pack", "error", "ass", "use", "sign", "se", "u", "c", "share", "out", "su", "scale", "cat", "dev", "style", "offset", "spread", "fat", "vol", "add", "sh", "sp", "fee", "up", "summary", "cost", "parse", "cal"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception {\\n        Scanner stdin = new Scanner(System.in);\\n\\n        int N = stdin.nextInt();\\n        double sum=0;\\n        for(int i=1;i<=N;i++) {\\n        \tif(i%2!=0) {\\n        \t\tsum+=1;\\n        \t}\\n        }\\n        System.out.println(sum/N);\\n    }\\n}\\n", "target": "64", "substitutes": {"stdin": [" stdout", " STDout", "stdine", "STDin", " stdner", " stdine", "STDIN", " stdIN", "stdIN", "sdout", "stdner", "stdout", "stdins", "STDner", "STDine", "sdner", "STDout", "sdIN", " STDine", " STDin", "sdin", "STDins", " stdins", " STDins"], "N": ["O", "K", "U", "Part", "I", "E", "n", "Ns", "J", "C", "T", "Len", "NT", "Ne", "All", "NB", "A", "SN", "Sum", "NN", "W", "Size", "Q", "R", "D", "Y", "NA", "Z", "L", "M", "NC", "X", "NE", "S", "P", "F", "V", "Count", "NS", "NL", "MN", " n"], "sum": ["cost", "weight", "um", "si", "n", "unit", "diff", "alpha", "average", "result", "index", "chi", "Sum", "b", "max", "count", "mean", "li", "size", "total", "sign", "min", "ass", "se", "u", "num", "out", "su", "scale", "SI", "parse", "offset", "spread", "key", "fat", "vol", "sim", "f", "sh", "fee", "summary", "net", "info", "start", "cal"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "m", "ii", "hi", "index", "r", "j", "chi", "ni", "ini", "mu", "b", "ai", "in", "length", "phi", "ji", "multi", "li", "ci", "ti", "zi", "l", "ri", "u", "bi", "c", "qi", "e", "it", "x", "pi", "ip", "id", "d", "v", "ix", "f", "o", "ui", "start", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tchar[] c = sc.next().toCharArray();\\n\t\t\\n\t\tSystem.out.println((char)(((int)c[0])+1));\\n\t\t\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "150", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "core", "cur", "cs", "ca", "cer", "sf", "cc", "sec", "tc", "sync", "cr", "sl", "ec", "osc", "sq", "lc", "class", "bc", "sci", "ss", "ci", "cl", "scope", "se", "l", "src", "Sc", "cv", "str", " SC", "dc", "mc", "scan", "nc", " Sc", "uc", "server", "anc", "sh", "sp", "sb", "SC"], "c": ["a", "pc", "esc", "rc", "ch", "cs", "n", "p", "C", "s", "cc", "ac", "m", "enc", "r", "cr", "ec", "b", "lc", "cf", "xc", "input", "ci", "l", "u", "e", "d", "v", "dc", "cp", "nc", "f", "cu", "array", "g", "i", "k"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.StringTokenizer;\\n\\n/**\\n * Built using CHelper plug-in Actual solution is at the top\\n */\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tInputStream inputStream = System.in;\\n\t\tOutputStream outputStream = System.out;\\n\t\tInputReader in = new InputReader(inputStream);\\n\t\tPrintWriter out = new PrintWriter(outputStream);\\n\t\tTask solver = new Task();\\n\t\tsolver.solve(1, in, out);\\n\t\tout.close();\\n\t}\\n\\n\tstatic class Task {\\n\t\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\\n\t\t\tint N = in.nextInt();\\n\t\t\tString L = in.next();\\n\t\t\tList<String> list = new ArrayList<>();\\n\t\t\tfor(int i = 0; i < N; i++) {\\n\t\t\t\tlist.add(in.next());\\n\t\t\t}\\n\t\t\tCollections.sort(list);\\n\t\t\tfor(int i = 0; i < N; i++) {\\n\t\t\t\tout.print(list.get(i));\\n\t\t\t}\\n\t\t}\\n\t}\\n\t\\n\tstatic class InputReader {\\n\t\tpublic BufferedReader reader;\\n\t\tpublic StringTokenizer tokenizer;\\n\\n\t\tpublic InputReader(InputStream stream) {\\n\t\t\treader = new BufferedReader(new InputStreamReader(stream), 32768);\\n\t\t\ttokenizer = null;\\n\t\t}\\n\\n\t\tpublic String next() {\\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn tokenizer.nextToken();\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\\n\t}\\n}\\n", "target": "224", "substitutes": {"inputStream": ["connectionstream", " inputFile", "inputStreamer", "outputFile", "connectionSteam", " inputSteam", "inputFile", "outputStreamer", "inputSteam", "connectionStream", "outputstream", "connectionStreamer", "InputStream", "inputstream", "InputSteam", " inputstream", "InputStreamer", "InputFile", "Inputstream", "outputSteam"], "outputStream": ["OutputWriter", "outputSocket", "outputWriter", "inputSocket", "inputSteam", " outputSteam", "OutputSocket", "outputstream", "Outputstream", "inputstream", " outputstream", "inputWriter", "OutputSteam", " outputWriter", " outputSocket", "OutputStream", "outputSteam"], "in": ["exec", "din", "pin", "io", "is", "err", "In", "gen", "bin", "request", "arg", "version", "line", "ic", "diff", "socket", "user", "log", "index", "r", "inn", "this", "cin", "ini", "config", "ins", "inside", "inf", "input", "inner", "image", "url", "kin", "data", "sin", "win", "min", "read", "init", "conn", "it", "x", "lin", "source", "id", "pull", "inc", "d", "path", "gin", "str", "again", "nin", "login", "isin", "scan", "connection", "f", "up", "from", "info", "IN", "con"], "out": ["Out", "exec", "writing", "file", "timeout", "io", "w", "client", "parent", "err", "window", "In", "bin", "string", "problem", "word", "group", "line", "output", "exit", "write", "set", "user", "log", "memory", "null", "this", "sync", "outs", "copy", "one", "writer", "prefix", "inner", "error", "data", "cache", "page", "lock", "outer", "pool", "init", "conn", "process", "print", "inc", "down", "OUT", "again", "off", "buffer", "ex", "to", "server", "o", "up", "info", "net", "temp", "call"], "solver": ["ssolve", "ssolution", "ssner", "solution", " solution", "Solve", "resolved", "resolve", "sner", "Solved", " solve", "Solution", "ssolver", "ssolved", "Sner", " sner", "Solver", "solved", "solve", "resolution", "resolver"], "testNumber": [" testnumber", "TestNumber", "testNum", "TestNumbers", " trialnumber", " trialNumber", " trialNumbers", "testnumber", " testNum", "Testnumber", " testNumbers", "TestNum", " trialNum", "testNumbers"], "N": ["O", "K", "U", "E", "I", "NG", "Na", "n", "Ns", "Len", "C", "T", "Ni", "NT", "Ne", "NB", "NN", "W", "Size", "Q", "R", "D", "Y", "NA", "Z", "Num", "NM", "M", "X", "S", "P", "Node", "V", "NS", "NL", "MN", " n", "IN"], "L": ["O", "Line", " M", "I", "Name", "line", "C", "T", "s", " l", " S", "ln", "W", "R", "Str", "l", " LIST", "M", " NL", "S", "F", "V", "NL", "LIST", " language"], "list": ["chain", "collection", "table", "member", "n", "base", "string", "p", "group", "set", "diff", "low", "result", "batch", "part", "null", "st", "entry", "lc", "queue", "tree", "coll", "cont", "li", "lists", "data", "map", "all", "obj", "stack", "lock", "cl", "l", "pool", "and", "listed", "la", "left", "pull", "key", "array", "info", "LIST", "sequence"], "i": ["xi", "gi", "I", "is", "io", "si", "n", "di", "ie", "name", "oi", "abi", "ii", "hi", "chi", "j", "index", "ni", "z", "ini", "mu", "b", "ai", "phi", "ji", "multi", "li", "ti", "ci", "data", "q", "zi", "ri", "qi", "u", "bi", "l", "e", "init", "iu", "it", "eni", "ori", "x", "pi", "id", "ip", "uri", "v", "ix", "slice", "key", "shift", "f", "o", "ui", "info", "start"], "reader": ["per", "iterator", "table", " Reader", "io", "ro", "handler", "parser", "er", "loader", "rar", "service", "r", "driver", "this", "resource", "cr", "entry", "writer", "book", "pointer", "reading", "input", "inner", "url", "rer", "row", "object", "instance", "read", "ri", "wrapper", "or", "filter", "oder", "source", "Reader", "ry", "slice", "feed", "buffer", "server", "iter", "parse"], "tokenizer": ["Tokenization", "Tokenize", "recognizer", "okenizer", "initialiser", "okeniter", " tokenifier", "recognization", "tagifier", "initializer", "okenizable", "tagizers", "okenizing", "Tokener", " tokenner", "normalizer", "tokener", "okener", "tokenizers", "initialize", " tokenizable", "Tokenizer", "Tokenizable", "authorization", "tokenizable", "normalization", " tokenizers", " tokenizing", "tokenize", "authorize", "initialization", "recognize", " tokenize", " tokeniter", "okenization", "tokenifier", "okeniser", "tokenization", "recogniser", "tagizer", "authoriter", "tokeniser", "authorizer", "Tokeniser", "normaliter", "tagiser", "Tokenizers", " tokeniser", "Tokenner", "okenize", "tokeniter", "tokenner", "Tokenifier", "Tokenizing", "normalize", "okenner", " tokenization", " tokener", "tokenizing"], "stream": ["per", "file", "w", "Stream", "client", "handler", "form", "string", "raw", "output", "socket", "m", "loader", "draft", "user", "r", "driver", "channel", "resource", "document", "response", "writer", "length", "port", "input", "serial", "data", "row", "lock", "read", "trans", "ream", "pool", "e", "source", "body", "path", "v", "feed", "buffer", "connection", "server", "temp", "view"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    Set<Integer> d = new HashSet<>();\\n    for (int i = 0; i < n; i++) {\\n        d.add(sc.nextInt());\\n    }\\n    System.out.println(d.size());\\n  }\\n}", "target": "105", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "sr", "set", "s", "cc", "ner", "soc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "str", "dc", "sch", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "SC"], "n": ["network", "number", "w", "p", "nb", "s", "m", "j", "r", "t", "mn", "z", "ni", "sn", "b", "N", "in", "nn", "ns", "l", "u", "en", "c", "num", "e", "conn", "x", "h", "y", "len", "nc", "f", "net", "k"], "d": ["dd", "vd", "dos", "di", "p", "s", "m", "cd", "pd", "ld", "dr", "ind", "ds", "std", "dds", "dom", "dict", "de", "ded", "D", "data", "dh", "da", "l", "c", "e", "did", "id", "db", "dc", "dat", "f", "fd", "o", "dim", "md", "sd", "rd", "ad"], "i": ["xi", "gi", "I", "io", "si", "di", "p", "oi", "abi", "ii", "hi", "chi", "j", "ni", "z", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "inner", "ri", "u", "bi", "c", "e", "pi", "x", "h", "id", "ip", "block", "uri", "v", "slice", "f", "o", "ui", "k"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n\tScanner sc;\\n\tString s;\\n\\n\tMain() {\\n\t\tsc = new Scanner(System.in);\\n\t}\\n\t\\n\tvoid calc() {\\n\t\ts = sc.next();\\n\t\tfor (int i = 0; i < s.length(); i++) {\\n\t\t\tchar c = s.charAt(i);\\n\t\t\tif ((i%2)==0) {\\n\t\t\t\tif (c != 'R' && c != 'U' && c != 'D') {\\n\t\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\t\treturn;\\n\t\t\t\t}\\n\t\t\t} else {\\n\t\t\t\tif (c != 'L' && c != 'U' && c != 'D') {\\n\t\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\t\treturn;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(\"Yes\");\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().calc();\\n\t}\\n}", "target": "205", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "search", "si", "cer", "C", "cc", "sec", "acc", "enc", "osc", "cr", "ec", "config", "lc", "ck", "bc", "sci", "ss", "ci", "cl", "scope", "l", "se", "src", "isc", "Sc", "asc", "RC", "inc", " SC", "dc", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "g", "SC", "spec"], "s": ["fs", "hs", "qs", "results", "is", "ks", "settings", "cs", "ms", "n", "string", "rs", "aws", "p", "sts", "m", "gs", "r", "sets", "js", "sq", "sl", "abs", "ls", "b", "ds", "ins", "in", "your", "ss", "ws", "its", "ns", "l", "u", "ses", "e", "series", "opens", "bs", "ts", "su", "S", "ps", "str", "es", "f", "services", "as", "sb", "ans", "strings"], "i": ["xi", "gi", "I", "clip", "io", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "index", "chi", "j", "r", "t", "z", "ini", "mu", "b", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "end", "zi", "ri", "qi", "u", "bi", "l", "e", "iu", "it", "x", "pi", "h", "id", "ip", "uri", "d", "y", "v", "slice", "ix", "key", "f", "o", "ui", "start", "col"], "c": ["pc", "esc", "fc", "rc", "ch", "w", "cur", "cs", "char", "n", "code", "string", "oc", "p", "C", "cc", "tc", "m", "ac", "enc", "loc", "r", "vc", "t", "cr", "ec", "b", "lc", "cont", "coll", "cf", "in", "xc", "bc", "ci", "ctrl", "arc", "cl", "l", "u", "e", "ce", "x", "h", "unc", "ct", "d", "y", "v", "dc", "mc", "nc", "uc", "f", "cu", "abc", "cp", "o", "cy", "g", "cb", "k", "col", "co"]}}
{"code": "import java.util.Scanner;\\n\\n/**\\n * @author ??\\???\\n *\\n */\\npublic class Main {\\n\\n\t/**\\n\t * @param args\\n\t */\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint W = scanner.nextInt();\\n\t\tint H = scanner.nextInt();\\n\t\tint x = scanner.nextInt();\\n\t\tint y = scanner.nextInt();\\n\t\tint r = scanner.nextInt();\\n\t\tscanner.close();\\n\t\t\\n\t\tif (((0 + r) <= x) && (x <= (W - 1))\\n\t\t\t\t&& ((0 + r) <= y) && (y <= (H - 1))) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "171", "substitutes": {"scanner": ["scaner", "Scanener", " scanNER", "Scanlier", "parsener", " scanlier", "haninner", "parseter", "nerinner", "aninner", "annker", "verNER", "nerker", "seer", "sener", "statner", "scanlier", "anner", "statning", "scanNER", "verer", "sein", "statinner", "scanler", "anninner", "seker", "canning", "hanning", "nerning", "scanter", "canner", "Scaner", "Scanner", "Scanler", "nerer", "anter", "statker", "nerter", "canker", "anker", " scanler", "hanker", " scanener", "annner", "scanker", "Scanker", "verener", "Scanin", "parselier", "canter", "Scanter", "annter", "scanin", "scanning", " scanter", "verner", "anning", "scanener", "nerner", "ScanNER", " scaner", "scaninner", "nerin", "Scaninner", "hanner", "Scanning", "parseler"], "W": ["O", "K", "U", "E", "I", "w", "WR", "C", "T", "Wh", "G", " w", "N", "Q", "Width", "R", "WC", "D", "Y", "Z", "B", "L", "TW", "M", "SW", "h", "X", "We", "S", "F", "P", "WS", "V", "WB", "SH"], "H": ["K", "U", "E", "DH", "J", "C", "T", "CL", " h", "G", "N", "Q", "R", "D", "Y", "Ha", "Hi", "Z", "B", "L", "M", "h", "X", "MH", "Rh", "HH", "F", "P", "HC", "V", "EH", "Ch", "CH"], "x": ["xi", "w", "n", "p", "m", "width", "index", "t", "z", "work", "b", "in", "xy", "rx", "data", "ax", "l", "u", "c", "e", "h", "X", "dx", "xx", "id", "d", "v", "xxx", "ex", "f", "o", "i", "k"], "y": ["a", "w", "height", "ny", "n", "dy", "p", "ay", "m", "hi", "j", "vy", "gy", "t", "oy", "z", "ish", "yy", "b", "ery", "in", "xy", "ya", "ky", "Y", "l", "py", "u", "yo", "c", "ey", "yt", "h", "zy", "yi", "xx", "ty", "d", "ry", "v", "f", "o", "sy", "cy", "i"], "r": ["nr", "rc", "kr", "re", "w", "rw", "err", "ar", "ra", "n", "rs", "p", "sr", "er", "yr", "m", "rar", "j", "z", "b", "dr", "R", "rx", "ir", "mr", "q", "fr", "l", "u", "c", "e", "h", "or", "rr", "pr", "rh", "right", "rt", "d", "ry", "v", "hr", "f", "o", "i", "rd", "rb"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        MyScanner sc = new MyScanner();\\n\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int h = sc.nextInt();\\n        int m = sc.nextInt();\\n\\n        double angH = 30 * h + 0.5 * m;\\n        double angM = 6 * m;\\n        double disAng = Math.abs(angH - angM);\\n\\n        if (disAng == 0) {\\n            System.out.println(Math.abs(a - b));\\n            return;\\n        }\\n\\n        double angC = disAng;\\n        if (disAng > 180)\\n            angC = 360 - disAng;\\n        double cosC = Math.cos(Math.toRadians(angC));\\n        double c = a * a + b * b - 2 * a * b * cosC;\\n\\n        System.out.println(Math.sqrt(c));\\n    }\\n\\n    static class MyScanner {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in), 1 << 15);\\n        StringTokenizer tokenizer;\\n\\n        String next() {\\n            try {\\n                while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                }\\n            } catch (IOException ignored) {\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n    }\\n}\\n", "target": "86", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "core", "ch", "cur", "desc", "cs", "ca", "cor", "cer", "ctx", "com", "cam", "cc", "ner", "sec", "exp", "soc", "tc", "cli", "this", "system", "sq", "osc", "sync", "cr", "lc", "cont", "bc", "sci", "ci", "instance", "cus", "cl", "scope", "se", "src", "Sc", "asc", "sche", "self", "sem", "cv", " SC", "mc", "scan", "nc", " Sc", "uc", "sh", "sb", "parser", "SC"], "a": ["i", "w", "ga", "ca", "n", "base", "p", "s", "alpha", "ac", "aaa", "ia", "r", "A", "sa", "z", "an", "ab", "ai", "ae", "ba", "pa", "da", "l", "aj", "u", "aw", "e", "am", "x", "area", "la", "d", "va", "y", "aa", "f", "as", "o", "g", "au", "ad"], "b": ["w", "n", "bb", "p", "lb", "s", "ac", "j", "r", "A", "t", "z", "ab", "an", "B", "l", "u", "mb", "e", "ad", "x", "d", "bh", "y", "v", "aa", "f", "o", "sb", "g", "i", "k"], "h": ["w", "n", "p", "hi", "j", "r", "t", "z", "hm", "H", "l", "u", "e", "M", "x", "rh", "ph", "body", "d", "bh", "y", "v", "f", "ang", "o", "sh", "g", "i", "k"], "m": ["w", "ms", "n", "p", "s", "j", "r", "mn", "z", "hm", "mu", "cm", "q", "l", "u", "e", "M", "am", "x", "d", "y", "v", "f", "o", "g", "md", "i", "mm", "k"], "angH": ["langU", "ngG", "AngM", "angB", "hangM", "hangH", "ngP", "ngH", "angU", "angG", "AngU", "langB", "ngU", "hangP", "AngG", "langM", "ngB", "ngM", "AngH", "hangB", "angP", "langH", "langP", "langG"], "angM": ["angMA", "annm", " angD", "ngC", "annC", "langMA", "ongM", "ngH", "ongC", "ongH", " angMN", "annH", "ongMN", "langM", "angMN", "ongMA", "ongD", "ngM", " angMA", "langMN", "langD", "angD", "angm", "ngm", "annM", "ongm"], "disAng": ["DisAnn", "DisMag", "disAy", "desAc", "distApp", "badC", "noAnn", "badAnn", "Disang", "noC", "badRad", "DisC", "disCirc", "desMag", " disAx", "noCam", "noAng", "disCam", "DisRad", "disRad", "DisAy", "disang", "badAx", "noang", "disApp", " disAy", "desCirc", "DisCirc", "DisAx", "distAx", "badAng", "distAng", "badCam", "distRad", "disC", "badApp", "DisAng", "noAc", "badang", "noMag", "DisApp", "disAc", "disAnn", "disMag", "badAy", "badMag", " disang", "desAng", "DisCam", "disAx", "DisAc", "noCirc"], "angC": ["AngM", "langR", "cosP", "angleP", "cosc", "angc", "angN", "angleN", "AngC", "cosN", "angG", "Angc", "langc", "angleG", "angleC", "anglec", "angR", "langN", "langC", "cosR", "angP", "langP", "angleR", "langG", "cosG", "angleM", "cosM"], "cosC": ["cosCC", "cosc", "Cosc", "cosD", "sinM", " cosc", "sinD", " cosCC", " cosD", "sinB", "cosB", " cosB", "circc", "CosC", "CosCC", "circM", "circC", "circB", "CosD", "cosM", " cosM", "sinC", "sinc", "sinCC"], "c": ["cur", "cs", "ca", "n", "p", "C", "cc", "ac", "cn", "cd", "enc", "cr", "ec", "lc", "cf", "xc", "cas", "ci", "arc", "l", "e", "ce", "unc", "ct", "d", "dc", "mc", "nc", "f", "cu", "anc", "cy", "cb", "co"], "reader": ["per", "iterator", "io", "ro", "handler", "rot", "parser", "upper", "er", "ner", "result", "loader", "worker", "player", "r", "this", "system", "reading", "writer", "in", "input", "rx", "inner", "rer", "keeper", "data", "iter", "row", "read", "ri", "stream", "ruby", "editor", "or", "rr", "Reader", "feed", "buffer", "f", "i"], "tokenizer": ["Tokenize", "Tokenization", "okenizer", "serialiser", "Tokener", " tokenner", "tokener", "okener", "tokenizers", "Tokenizer", " tokenizers", "tokenize", "serialization", " tokenize", "okenizers", "okenization", "serializer", "okeniser", "tokenization", "Tokenizers", "Tokeniser", "tokeniser", " tokeniser", "serialize", "Tokenner", "okenize", "serialner", "tokenner", "okenner", " tokenization", " tokener"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int size = 0, time = 0, minij, b = 0;\\n        size = sc.nextInt();\\n        int[] a = new int[size];\\n        for (int i = 0; i < size; i++) {\\n            a[i] = sc.nextInt();\\n        }\\n        for (int v = 0; v < size; v++) {\\n            minij = v;\\n            for (int w = v; w < size; w++) {\\n                if (a[w] < a[minij]) minij = w;\\n            }\\n            if (v != minij) {\\n                b = a[v];\\n                a[v] = a[minij];\\n                a[minij] = b;\\n                time++;\\n            }\\n        }\\n\\n        for (int k = 0; k < size; k++) {\\n            System.out.print(a[k]);\\n            if (k != (size - 1)) System.out.print(\" \");\\n        }\\n        System.out.print(\"\\n\");\\n        System.out.println(time);\\n\\n\\n    }\\n}\\n\\n", "target": "199", "substitutes": {"sc": ["pc", "esc", "rc", "ch", "cs", "cer", "sf", "screen", "sr", "ctx", "cc", "ner", "soc", "system", "osc", "cr", "sq", "lc", "cont", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "sys", "c", "src", "Sc", "asc", "out", "sche", "sem", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "sb", " rc", "SC"], "size": ["core", "weight", "address", "n", "code", "form", "cycle", "name", "p", "group", "mode", "s", "sec", "m", "loc", "j", "zero", "sync", "z", "empty", "go", "max", "Size", "in", "count", "six", "order", "now", "year", "end", "ci", "small", "use", "win", "sized", "en", "c", "e", "we", "x", "sum", "scale", "ize", "capacity", "age", "SIZE", "eng", "len", "shape", "key", "f", "sh", "second"], "time": ["table", "timeout", "live", "value", "code", "cycle", "name", "timer", "delay", "speed", "rate", "t", "z", "clock", "work", "Time", "start", "length", "count", "now", "year", "end", "q", "date", "tim", "type", "x", "h", "ime", "id", "scale", "depth", "block", "trace", "age", "y", "back", "shape", "shift", "f", "times", "info", "how", "cost", "sleep"], "minij": [" miniov", "missaj", "signiov", "smallaj", "mainaxy", "Minij", "smalliji", "miniera", "missija", "miniiv", "minija", "donij", "maxij", "minijk", "Minija", "minaj", "doniera", "doniv", "manij", " minjj", "manijk", "minjj", "priaj", "minaxy", "donaj", "smalliov", "missij", "donish", " minaxy", "signiji", "miniij", "signijk", "priiv", "minji", "maxijk", "Miniji", "smalljj", "mainij", " minji", "manaj", " miniera", " minaj", "miniaj", "signij", "smalliera", "smallij", "priij", " minetr", "smallji", " miniji", "priish", "miniov", "maniji", "mainetr", "missjj", "mainijk", "manji", " minija", "minib", "donijk", "donib", "miniv", "smallija", "miniish", "maxaxy", "smallijk", "manija", "minetr", "miniji", " minijk", "maxetr", "Minijk", " minib", "minish", "smallib"], "b": ["xb", "n", "base", "bb", "p", "s", "nb", "bd", "m", "eb", "r", "j", "wb", "t", "z", "ab", "ib", "clock", "work", "bc", "ob", "B", "l", "u", "c", "fb", "binary", "e", "bs", "x", "h", "function", "d", "y", "bf", "f", "o", "sb", "g", "rb"], "a": ["missing", "tta", "access", "ga", "ca", "at", "n", "p", "ia", "ac", "alpha", "aaa", "s", "m", "na", "wa", "A", "sa", "ao", "qa", "this", "ma", "z", "an", "ab", "ea", "action", "aux", "count", "ae", "ba", "pa", "l", "u", "c", "e", "area", "am", "x", "la", "d", "va", "y", "ha", "aa", "f", "as", "up", "auto", "array", "ama", "o", "info", "au"], "i": ["xi", "gi", "I", "is", "io", "si", "n", "ie", "di", "p", "ii", "hi", "index", "j", "ni", "z", "ini", "ai", "in", "li", "ci", "im", "qi", "u", "bi", "c", "e", "init", "iu", "eni", "mi", "x", "pi", "fi", "id", "ip", "uri", "y", "ix", "vi", "f", "ui", "o"], "v": ["n", "value", "iv", "p", "s", "ve", "m", "ii", "uv", "j", "r", "vc", "t", "z", "sv", "vs", "ov", "av", "lv", "end", "q", "vin", "l", "u", "c", "e", "h", "x", "vt", "d", "val", "y", "va", "V", "ev", "vi", "vol", "f", "vv", "o", "g", "ver"], "w": ["wx", "sw", "wo", "window", "ww", "n", "ew", "p", "wd", "width", "wa", "r", "wk", "j", "wh", "t", "z", "work", "W", "max", "ws", "win", "q", "ow", "l", "u", "aw", "c", "e", "we", "x", "h", "nw", "d", "y", "wt", "f", "hw", "g", "fw", "wal", "iw"], "k": ["K", "kn", "ks", "ch", "ak", "n", "p", "j", "kh", "t", "z", "work", "sk", "ek", "ck", "kk", "kin", "ke", "end", "ku", "ky", "ik", "q", "ijk", "u", "c", "h", "ka", "x", "kl", "kw", "id", "d", "kid", "y", "kick", "key", "ko", "ack", "ok", "f", "gh", "g"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\n/**\\n * Created by khrom on 2017/06/29.\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        List<String> nums = new ArrayList<>();\\n        int index = scanner.nextInt();\\n        for (int i = 0; i < index; i++) {\\n            nums.add(scanner.next());\\n        }\\n        StringBuilder strb = new StringBuilder();\\n        for (int i = nums.size() - 1; i >= 0; i--) strb.append(nums.get(i) + \" \");\\n        strb.deleteCharAt(strb.length() - 1);\\n        System.out.println(strb.toString());\\n    }\\n}", "target": "79", "substitutes": {"scanner": ["scaner", "scer", "annker", "annning", "nerker", "anner", "nfer", "ner", "Scanorer", "scanorer", "nerning", "Scanfer", "Scaner", "Scanner", "nerer", "norer", "anker", "scanfer", "scanker", "annner", "planer", "scner", "Scanker", "planker", "planning", "scanning", "anning", "scfer", "aner", "nerner", "scorer", "nner", "Scanning", "planner"], "nums": ["cumbers", "uims", "Noms", "enumbers", "ununks", "Nims", "nims", "uoms", "cims", "Numbers", "cames", "unumbers", "cums", "nunks", "enumps", "unumps", " num", " nunks", "noms", "Names", "numps", " numps", "cum", " noms", "Num", "enunks", "num", "enums", "uum", "numbers", "Nums", " names", "uumbers", "names", "unums", "uums", " numbers"], "index": ["number", "list", "I", "weight", "si", "value", "di", "base", "version", "name", "width", "part", "loc", "action", "ind", "length", "in", "count", "end", "level", "ci", "size", "page", "point", "position", "num", "type", "x", "id", "inc", "offset", "ix", "key", "Index", "start"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "batch", "hei", "j", "ni", "z", "ini", "mu", "b", "lc", "ind", "ai", "phi", "ji", "multi", "li", "ti", "ci", "zi", "ri", "qi", "u", "bi", "l", "e", "iu", "mi", "x", "pi", "h", "yi", "fi", "id", "ip", "uri", "d", "v", "ix", "api", "slice", "f", "o", "ui", "info"], "strb": [" strab", "strbf", "stribf", "strcb", "Strsb", "strf", "Strbb", "trsb", "stribb", " strf", " strcb", "STRbf", "rbb", "trab", "strfb", "strip", "Strfb", "STRlb", "trybb", "Strbf", "Strf", " strbf", "Strcb", "strlb", "trbb", "trybf", " strp", "strisb", "strsb", "strilb", "trfb", " strsb", "Strb", "trylb", "rab", "strbb", " strbb", "strab", "strib", "tryb", "strp", "rbf", "Strp", "strif", " strfb", "STRbb", "STRb", "trcb", "trb", "Strab", "rb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int t = scanner.nextInt();\\n        int ans = t+(int)Math.pow(t,2)+(int)Math.pow(t,3);\\n        System.out.println(ans);\\n    }\\n}", "target": "162", "substitutes": {"scanner": ["scaner", " Scanner", "Scanener", " Scanler", "canler", "caniter", "anner", "scanler", "anninner", " Scanener", "canener", "scanter", "canner", "Scaniter", "Scaner", "Scanner", "Scanler", "caninner", " Scaniter", "caner", "annner", "canter", "Scanter", "scaniter", "annter", "scanener", "scaninner", "Scaninner"], "t": ["a", "test", "target", "n", "pt", "ot", "p", "T", "s", "m", "nt", "tools", "z", "dt", "tt", "in", "unt", "total", "l", "c", "tp", "type", "x", "ts", " T", "python", "ta", "ty", "rt", "d", "qt", "tz", "y", "offset", "v", "tf", "f", "o", "i", "start", "wt"], "ans": ["ks", "ants", "ations", "cs", "AN", "lan", "anon", "s", "annot", "amps", "na", "ents", "ANS", "nan", "an", "sk", "ann", "ars", "ls", "acs", "ds", "ins", "annels", "cas", "ns", "ases", "types", "urs", " spans", "ats", "aus", "ions", "aned", "scan", "ons", "les", "anc", "asts", " scans", "ras"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] input = new int[N + 1];\\n\t\tfor (int i = 1; i <= N; i++) {\\n\t\t\tint tmp = sc.nextInt();\\n\t\t\tinput[i] = tmp;\\n\t\t}\\n\t\tint index = 1;\\n\t\tint res = 0;\\n\t\twhile (index != 2) {\\n\t\t\tif (input[index] == 0) {\\n\t\t\t\tSystem.out.println(-1);\\n\t\t\t\tSystem.exit(0);\\n\t\t\t}\\n\t\t\tint tmp = input[index];\\n\t\t\tinput[index] = 0;\\n\t\t\tindex = tmp;\\n\t\t\tres++;\\n\t\t}\\n\t\tSystem.out.println(res);\\n\\n\t}\\n}\\n", "target": "175", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cs", "cor", "cer", "sf", "ctx", "cc", "ner", "sec", "system", "cr", "osc", "ec", "sq", "lc", "class", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "N": ["O", "K", "I", "NR", "n", "Ns", "ND", "Len", "C", "T", "Ni", "J", "NT", "Ne", "NB", "NN", "Size", "Q", "R", "D", "H", "NA", "Num", "L", "num", "NM", "NI", "M", "NC", "X", "S", "P", "F", "V", "Count", "NS", "MN", "Index"], "input": ["issue", "focus", "parent", "img", "address", "search", "target", "form", "request", "value", "output", "submit", "result", "insert", "batch", "qa", "config", "inside", "image", "in", "inf", "context", "inner", "select", "data", "error", "state", "object", "instance", "child", "point", "init", "forward", "out", "keep", "next", "Input", "source", "id", "pull", "inc", "field", "argument", "down", "again", "shape", "current", "integer", "plus", "include", "up", "active", "array", "info", "temp", "view", "progress"], "i": ["gi", "xi", "I", "io", "si", "n", "ie", "di", "p", "oi", "ii", "hi", "sup", "chi", "j", "t", "ni", "mini", "ini", "b", "ind", "ai", "in", "li", "ci", "ti", "qi", "u", "bi", "ori", "it", "eni", "mi", "x", "pi", "fi", "id", "ip", "y", "v", "ix", "uni", "key", "ui", "info"], "tmp": ["test", "old", "our", "pos", "img", "base", "ref", "p", "qq", "buf", "nb", "diff", "nt", "m", "ii", "part", "app", "sup", "txt", "something", "st", "yy", "mp", "kk", "pointer", "prefix", "now", "obj", "nn", "data", "cache", "cmp", "py", "extra", "src", "np", "area", "ff", "next", "stuff", "ptr", "front", "pre", "pp", "offset", "v", "xxx", "amp", "api", "seed", "sp", "temp", "start", "pad"], "index": ["fix", "test", "number", "find", "timeout", "weight", "pos", "append", "update", "search", "address", "base", "condition", "ref", "section", "diff", "loop", "exp", "part", "loc", "default", "sync", "primary", "action", "ind", "pointer", "in", "prefix", "count", "length", "end", "obj", "size", "error", "inner", "page", "cache", "full", "data", "match", "position", "num", "success", "init", "area", "x", "out", "element", "module", "id", "inc", "pre", "path", "offset", "ix", "slice", "current", "key", "patch", "Index", "active", "info", "array", "temp", "start"], "res": ["results", "rc", "Res", "re", "our", "pos", "err", "ms", "params", "base", "rs", "ress", "result", "part", "req", "rev", "os", "r", "resource", "arr", "rex", "max", "response", "post", "rx", "RES", "match", "obj", "real", "range", "reset", "rss", "success", "init", "out", "resp", "rep", "tx", "id", "pre", "ps", "rest", "rez", "ret", "reply", "resolution", "active", "pres", "ras"]}}
{"code": "\\nimport java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String args[]){\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t//\u6574\u6570\u306e\u6570n\u3092\u53d7\u3051\u53d6\u308b\\n\t\tString s1 = sc.next();\\n\t    int n = Integer.parseInt(s1);\\n\t    int a[] = new int[n];\\n\t    long sum = 0;\\n\t    \\n\t    //\u6574\u6570n\u304c\u6761\u4ef6\u306b\u3042\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\\n\t    if(0 <= n && n <= 10000){\\n\t    \\n\t        //n\u56de\u3001\u6574\u6570\u3092\u8aad\u307f\u53d6\u308a\u3001\u914d\u5217\u306b\u5165\u308c\u308b\\n\t        for(int i = 0; i <= n-1; i++){\\n\t        \tString s2 = sc.next();\\n\t\t        int j = Integer.parseInt(s2);\\n\t\t        \\n\t\t        //\u5165\u529b\u3055\u308c\u305f\u6574\u6570\u304c\u6761\u4ef6\uff08\u2212\uff11\uff10\uff10\uff10\uff10\uff10\uff10\u304b\u3089\uff11\uff10\uff10\uff10\uff10\uff10\uff10\uff09\u5185\u304b\u78ba\u8a8d\\n\t\t        if(-1000000 <= j && j <=1000000){\\n\t\t            a[i] = j;\\n\t\t        }\\n\t        }\\n\t    \\n\t        //\u914d\u5217\u306e\uff10\u756a\u76ee\u306b\u5927\u304d\u306a\u6570\u3001\u6700\u5f8c\u306b\u5c0f\u3055\u306a\u6570\u304c\u6765\u308b\u3088\u3046\u306b\u4e26\u3079\u5909\u3048\u308b\\n\t        for(int i = 0; i <= a.length-1; i++){\\n\t        \tfor(int j = 0; j <= a.length-2; j++){\\n\t    \t\t    if(a[j] < a[j+1]){\\n\t    \t\t    \t    int w = a[j];\\n\t    \t\t    \t    a[j] = a[j+1];\\n\t    \t\t    \t    a[j+1] = w;\\n\t    \t    \t}\\n\t    \t    }\\n\t        }\\n\t    \\n\t        //\u914d\u5217\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u6574\u6570\u306e\u5408\u8a08\u3092\u8a08\u7b97\\n\t        for(int i = 0; i < a.length; i++){\\n\t    \t    sum = sum + (long)a[i];\\n\t        }\\n\t    }\\n\t    \\n\t    //\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3001\u5408\u8a08\u3092\u8868\u793a\\n\t    System.out.println(a[a.length-1] + \" \" + a[0] + \" \" + sum);\\n\t}\\n}", "target": "21", "substitutes": {"sc": [" pars", " src", "rc", " sp", "inst", "r", "ann", " ser", " scr", "bc", "ss", " arr", "se", "c", " app", "Sc", " SC", " res", "scan", " Sc", " cont", " sl", "sb", " rc", "parser", "SC", "gram"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\t\twhile(true){\\n            String x = sc.next();\\n\t\t\tint ans = 0;\\n\t\t\tif(x.equals(\"0\")){\\n\t\t\t\tbreak;\\n\t\t\t}else{\\n\t\t\t\tfor(int i=0; i<x.length(); i++){\\n\t\t\t\t\tans += Integer.parseInt(String.valueOf(x.charAt(i)));\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\t}\\n}\\n\\n", "target": "144", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cs", "ca", "sf", "cc", "ner", "sec", "acc", "osc", "st", "cr", "ec", "lc", "ocr", "bc", "sci", "ss", "ci", "cus", "scope", "se", "c", "src", "Sc", "str", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC", "spec"], "x": ["xi", "wx", "string", "expl", "p", "ctx", "xt", "anything", "fx", "cross", "index", "something", "z", "lc", "rex", "XX", "in", "xc", "xy", "rx", "xf", "data", "lex", "pe", "l", "u", "c", "e", "h", "xs", "tx", "X", "xx", "val", "y", "v", "xxx", "ix", "ex", "sex", "xp", "f", "plus", "abc", "xml"], "ans": ["span", "ks", "ants", "cons", "ations", "cs", "AN", "lan", "anon", "s", "amps", "offs", "na", "ents", "ANS", "os", "nan", "ana", "an", "aces", "ann", "ars", "sk", "ls", "anch", "ins", "atan", "cas", "ians", "san", "ns", "plan", "can", "types", " spans", "ats", "eps", "es", "ions", "aned", "scan", "ons", "anc", "asts", " scans", "flags", "ras"], "i": ["xi", "gi", "I", "io", "si", "di", "p", "oi", "m", "abi", "ii", "hi", "vis", "index", "j", "chi", "pass", "z", "ini", "mu", "ai", "in", "phi", "ji", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "e", "it", "mi", "pi", "h", "id", "ip", "uri", "d", "v", "ix", "key", "f", "ui", "o"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main { //\u30af\u30e9\u30b9\u540d\u306fMain\\n    public static void main(String[] args) {\\n    Scanner scan = new Scanner(System.in);\\n    String n = scan.next();\\n    String d = scan.next();\\n    int N = Integer.parseInt(n);\\n    int D = Integer.parseInt(d);\\n    \\n    int ans = (N + 2*D) / (2*D +1);\\n    \\n    System.out.println(ans);\\n \\n \\n    }\\n}", "target": "238", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = Integer.parseInt(sc.next());\\n\t\tint B = Integer.parseInt(sc.next());\\n\t\tsc.close();\\n\\n\t\tint ans = 0;\\n\t\tint num = 1;\\n\t\twhile(num < B) {\\n\t\t\tans++;\\n\t\t\tnum = A * ans - (ans - 1);\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n}\\n", "target": "101", "substitutes": {"sc": ["pc", "esc", "fc", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "sr", "com", "cc", "ner", "tc", "sec", "soc", "enc", "cr", "osc", "ec", "sq", "lc", "class", "cont", "bc", "sci", "ss", "ci", "cus", "cm", "cl", "scope", "se", "c", "src", "Sc", "sche", "cv", "str", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "server", "sp", "sb", "parser", "parse", "SC"], "A": ["a", "API", "Alpha", "U", "I", "HA", "AC", "As", "Na", "Ab", "AU", "AN", "AB", "AF", "Ca", "C", "AM", "LA", "AA", "AI", "N", "IA", "AS", "H", "NA", "M", "AD", "AR", "BA", "S", "P", "AP", "ASC", "Am", "An", "CA"], "B": ["O", "U", "E", "I", "number", "NUM", "Ab", "AB", "C", "T", "BF", "Ub", "NB", "MB", "G", "b", "N", "R", "BC", "GB", "D", "UB", "CB", "Y", "L", "M", "LB", "Bs", "BA", "S", "F", "P", "OB", "BB", "BL", "BI", "WB"], "ans": ["a", "chan", "span", "number", "results", "i", "ants", "cs", "ani", "bin", "n", "AN", "blocks", "lan", "oa", "ops", "bits", "anon", "s", "nos", "vers", "offs", "na", "ANS", "os", "index", "nan", "ana", "outs", "an", "anch", "ann", "b", "ls", "ars", "ins", "ai", "in", "lines", "nas", "cas", "nn", "ns", "groups", "plan", "can", "x", "reads", "id", "ats", "cats", "aus", "ids", "es", "ions", "len", "aned", "scan", "ons", "anc", "as", " scans", "errors", "runs", "rows"], "num": ["nu", "span", "number", "nr", "NUM", "pos", "um", "bin", "n", "name", "umi", "nb", "anon", "nt", "part", "na", "index", "ul", "skip", "an", "ann", "max", "ai", "in", "count", "bc", "end", "no", "nn", "min", "Num", "u", "en", "init", "x", "out", "su", "sum", "id", "con", "un", "offset", "uni", "len", "off", "anc", "us", "i", "col"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String args[]) throws Exception {\\n        Scanner s = new Scanner(System.in);\\n        int n = s.nextInt();\\n        int y = s.nextInt();\\n        boolean f = false;\\n        int i = 0;\\n        int j = 0;\\n        int k = 0;\\n        for (i = 0; i <= n; i++) {\\n            for (j = 0; j <= (n - i); j++) {\\n                k = n - i - j;\\n                if (y == 10000 * i + 5000 * j + 1000 * k) {\\n                    if (n == i + j + k ) {\\n                        f = true;\\n                        break;\\n                    }\\n                }\\n            }\\n            if (f) {\\n                break;\\n            }\\n        }\\n        if (f) {\\n            System.out.println(i + \" \" + j + \" \" + k);\\n        } else {\\n            System.out.println(\"-1 -1 -1\");\\n        }\\n    }\\n}", "target": "133", "substitutes": {"s": ["fs", "a", "qs", "is", "sf", "rs", "p", "m", "gets", "http", "serv", "r", "os", "utils", "gs", "t", "sync", "abs", "b", "ls", "ds", "in", "ws", "ss", "fts", "ns", "l", "se", "sys", "u", "c", "e", "ses", "h", "out", "bis", "ts", "S", "d", "ssl", "v", "services", "o", "sb", "g", "ans", "strings"], "n": ["nu", "network", "w", "ny", "p", "nb", "m", "nt", "ne", "ln", "t", "z", "sn", "b", "N", "in", "nn", "size", "no", "ns", "l", "u", "en", "c", "num", "e", "x", "h", "dn", "d", "v", "len", "o", "net"], "y": ["a", "w", "ny", "dy", "p", "yr", "m", "ii", "t", "z", "yy", "b", "in", "count", "year", "Y", "q", "l", "py", "u", "c", "e", "ey", "x", "h", "pi", "id", "d", "v", "o", "sy"], "i": ["xi", "gi", "I", "is", "io", "ani", "si", "di", "ami", "ie", "p", "oi", "m", "ii", "t", "ni", "z", "ki", "ini", "b", "ai", "in", "ji", "li", "ci", "ik", "zi", "l", "qi", "u", "bi", "c", "e", "ori", "iu", "eni", "mi", "x", "pi", "yi", "fi", "id", "ip", "d", "v", "ix", "ui", "o"], "j": ["xi", "job", "ja", "si", "jc", "dj", "ie", "J", "p", "m", "jo", "ii", "ij", "r", "jet", "t", "z", "jj", "js", "b", "jl", "ji", "li", "ci", "q", "l", "aj", "u", "oj", "c", "qi", "e", "it", "x", "h", "yi", "kj", "uj", "d", "je", "jit", "v", "ix", "key", "o", "g", "jp"], "k": ["K", "kn", "ks", "w", "ak", "p", "unk", "mk", "m", "uk", "ki", "z", "km", "sk", "work", "b", "kt", "ck", "kk", "ke", "kind", "ky", "ik", "q", "l", "ijk", "u", "c", "e", "x", "h", "dk", "kw", "kj", "id", "d", "kid", "v", "key", "ok", "o"], "f": ["fs", "a", "flat", "fc", "w", "fa", "form", "sf", "p", "fun", "fp", "m", "fast", "r", "t", "z", "b", "fe", "cf", "inf", "df", "fen", "l", "u", "c", "fn", "e", "rf", "fb", "af", "h", "x", "function", "F", "d", "v", "lf", "bf", "tf", "of", "fd", "o", "info", "found", "g"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\tfinal static long MOD = 1000000007;\\n\tpublic static String[] Ws = null;\\n\tpublic static int wsIndx = 0;\\n\tpublic static BufferedReader in = null;\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tsolution(args);\\n\t\tif(in!=null){\\n\t\t\tin.close();\\n\t\t}\\n\t}\\n\\n\tpublic static void solution(String[] args) throws Exception{\\n\\n\t\tint N=nextInt();\\n\\n\\n\t\tSystem.out.printf(\"%.6f\\n\",(N+1)/2/(double)N);\\n\\n\t}\\n\tpublic static String[] toStringArray(String s) {\\n\t\tString[] tmp = new String[s.length()];\\n\t\tchar[] c = s.toCharArray();\\n\t\tfor (int i = 0; i < tmp.length; i++) {\\n\t\t\ttmp[i] = String.valueOf(c[i]);\\n\t\t}\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static void check() throws Exception{\\n\t\tif(in == null){\\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tif(Ws==null || Ws.length<=wsIndx){\\n\t\t\tWs = in.readLine().split(\" \");\\n\t\t\twsIndx=0;\\n\t\t}\\n\t}\\n\tpublic static int nextInt()throws Exception{\\n\t\tcheck();\\n\t\treturn Integer.parseInt(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static long nextLong()throws Exception{\\n\t\tcheck();\\n\t\treturn Long.parseLong(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static String nextString()throws Exception{\\n\t\tcheck();\\n\t\treturn Ws[wsIndx++];\\n\t}\\n\\n\tpublic static int[] nextInts()throws Exception{\\n\t\tcheck();\\n\t\tint[] tmp = new int[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Integer.parseInt(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static long[] nextLongs()throws Exception{\\n\t\tcheck();\\n\t\tlong[] tmp = new long[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Long.parseLong(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static String[] nextStrings()throws Exception{\\n\t\tcheck();\\n\t\twsIndx=Ws.length;\\n\t\treturn Ws;\\n\t}\\n\\n\\n}\\n", "target": "64", "substitutes": {"MOD": [" start", " E", " H", " timestamp", " M", " D", " Num", " Max", "n", " O", " Z", " ND", " J", " Number", " R", " MS", " SN", " U", " L", " weight", " pid", " base", " max", " P", " counter", " seq", " X", "ID", " ID", " K"], "Ws": ["wx", "Cs", "Line", "Pages", "w", "Es", "ww", "Ns", "wn", "Ps", "Wi", "aws", "Word", "Cas", "Js", "Words", "wa", "VS", "wb", "Bytes", "Values", "Os", "W", "ls", "vs", "Settings", "Rs", "WC", "WW", "ws", "Str", "CW", "wy", "Writer", "ns", "War", "Fs", "NW", "Vs", "Win", "Sys", "Wars", "Connection", "GW", "Socket", "Args", "Input", "Bs", "RW", " WS", "WS", "Wa", "Windows", "Wr", "Us", "Text", "BW", "Wire", "Temp", "Services", "LS", "WP", "Web", "WB", "WT", "wcs", "Wo", "wt", "rw"], "wsIndx": ["Wsindz", "wsCondX", "WSIdex", "WSIndex", "Wsindy", "wsIDX", "wsIny", "WSIndX", "wsIdx", "wsIndX", "WsIndi", "wsCondex", "wsIdz", "wsIDi", "WsIndz", "wsindX", "Wsindx", "wsInz", "WSIdix", "wsIndix", "WsIdz", "wsInX", "wsCondy", "Wsindi", "wsINDex", "wsindi", "wsIndex", "wsIdX", "WsIdy", "wsindz", "wsINDy", "wsCondx", "WsIndx", "wsInx", "WSIdz", "WsIdx", "wsIDy", "wsIdex", "wsCondix", "WSIndix", "wsIndi", "WsIndy", "WsIndX", "wsIndz", "WSIdX", "WSIndz", "wsindx", "wsindex", "wsIDx", "WsindX", "WSIndx", "wsCondz", "Wsindex", "wsINDx", "WSIdy", "WsIdX", "wsIdy", "wsIdi", "wsINDX", "wsIdix", "WsIndex", "wsindix", "wsindy", "wsIndy", "WSIndy", "WSIdx"], "in": ["a", "din", "token", "pin", "is", "w", "client", "pid", "err", "In", "bin", "n", "p", "socket", "ac", "m", "log", "serv", "r", "pass", "inn", "cin", "resource", "ini", "b", "doc", "ins", "rin", "image", "input", "inner", "kin", "ws", "session", "data", "win", "min", "ax", "cl", "read", "l", "init", "src", "conn", "cgi", "out", "x", "source", "id", "inc", "ssl", "d", "gin", "v", "again", "login", "isin", "nin", "inet", "connection", "ex", "f", "as", "o", "fd", "reader", "IN", "con"], "N": ["O", "K", "E", "I", "n", "Ns", "C", "T", "SN", "G", "W", "Size", "R", "D", "H", "Y", "Z", "B", "L", "M", "X", "S", "F", "P", "V", "NS", "Number", " n"], "s": ["is", "cs", "obs", "si", "n", "string", "rs", "ms", "p", "ings", "cells", "gs", "os", "r", "sets", "bytes", "t", "sv", "js", "abs", "b", "ls", "ds", " objects", "ss", "ws", "ns", "l", "e", "ses", "bs", "h", "ts", "xs", "S", "d", "ps", "v", "es", "f", "services", "sb", "g", "array", "strings"], "tmp": ["nb", "dest", "txt", "copy", "b", "mp", "data", "fb", "tp", "su", "cv", "buffer", "cp", "cu", "array", "sb", "zip", "rb", "tab", "vp", "pos", "csv", "string", "base", "p", "usr", "www", "result", "TB", "loc", "bp", "var", "pb", "lc", "meta", "cache", "cmp", "src", "ext", "ott", "wp", "sp", "cpp", "params", "bb", "buf", "output", "fp", "attr", "buff", "MP", "sup", "Mp", "vm", "storage", "now", "proc", "java", "api", "current", "Temp", "cb", "stuff", "pad", "jp", "wx", "img", "tc", "nt", "part", "default", "wb", "t", "vs", "tt", "obj", "np", "bt", "source", "vt", "v", "f", "vv", "temp"], "c": ["pc", "esc", "ch", "cs", "csv", "char", "n", "p", "C", "cc", "ac", "m", "cn", "sc", "cd", "enc", "r", "t", "cr", "ec", "lc", "b", "cf", "xc", "ci", "l", "u", "e", "ce", "d", "v", "cp", "nc", "f", "cu", "k"], "i": ["xi", "gi", "I", "io", "w", "si", "n", "ie", "di", "device", "name", "p", "oi", "m", "abi", "ii", "attr", "index", "j", "r", "ni", "z", "ini", "mu", "b", "ai", "phi", "inner", "multi", "li", "ci", "ti", "data", "ji", "q", "l", "ri", "u", "bi", "qi", "e", "init", "it", "eni", "iu", "mi", "h", "x", "pi", "fi", "my", "id", "uri", "ip", "d", "field", "y", "v", "slice", "ix", "ori", "vi", "key", "f", "o", "ui", "info", "g", "k"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    double l = sc.nextDouble();\\n\\n    double x = l/3;\\n    double y = l/3;\\n    double z = l-x-y;\\n\\n    System.out.println(x*y*z);\\n\\n  }\\n\\n}\\n", "target": "53", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ca", "sf", "s", "cc", "ner", "sec", "soc", "acc", "loc", "osc", "sl", "cr", "ec", "lc", "ocr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", " SC", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "l": ["wl", "w", "n", "p", "line", "m", "pl", "le", "j", "ln", "r", "t", "sl", "ls", "lc", "b", "lo", "length", "lines", "li", "el", "rl", "L", "lp", "fl", "u", "c", "e", "h", "kl", "lin", "la", "dl", "ll", "d", "v", "ell", "ol", "len", "ly", "shell", "f", "nl", "o", "i"], "x": ["xi", "a", "px", "w", "n", "base", "dy", "p", "m", "fx", "index", "j", "t", "b", "xy", "rx", "ax", "u", "c", "e", "h", "X", "dx", "xx", "yx", "d", "v", "ix", "xxx", "xp", "f", "o", "i"], "y": ["iy", "a", "w", "ny", "n", "dy", "p", "m", "j", "vy", "gy", "oy", "t", "yl", "yy", "b", "xy", "ym", "ya", "ky", "Y", "wy", "yd", "yo", "u", "py", "c", "ey", "yt", "zy", "yi", "xx", "d", "ry", "v", "ady", "sy", "cy", "i", "ye"], "z": ["w", "n", "dy", "p", "ii", "zo", "j", "vy", "gy", "t", "cz", "b", "q", "Z", "zi", "zz", "u", "c", "zy", "h", "yi", "xx", "iz", "d", "zen", "v", "yz", "f", "cy", "zip", "i", "k", "ze"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int a = 0;\\n\\n    for(int i=n ; i>0 ; i--){\\n      if(String.valueOf(i).length() %2 !=0){\\n        a++;\\n      }\\n    }\\n    System.out.println(a);\\n  }\\n}\\n", "target": "135", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "cs", "search", "ca", "sub", "cer", "ser", "cc", "ner", "sec", "soc", "acc", "cr", "osc", "ec", "lc", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", "ng", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "n": ["span", "number", "w", "p", "s", "nb", "m", "cn", "ne", "j", "t", "mn", "ni", "z", "b", "N", "in", "nn", "size", "min", "ns", "l", "u", "en", "c", "num", "e", "x", "d", "y", "nin", "nc", "f", "o", "net", "k"], "a": ["span", "tta", "sta", "fa", "ga", "ca", "p", "ua", "ia", "alpha", "ac", "aaa", "na", "wa", "A", "sa", "ea", "ana", "ma", "an", "ab", "ai", "count", "ae", "ba", "ata", "pa", "da", "ava", "aj", "aw", "c", "af", "am", "area", "ta", "la", "va", "aa", "as", "au"], "i": ["xi", "gi", "I", "si", "di", "p", "oi", "m", "abi", "ii", "hi", "chi", "j", "index", "ni", "z", "ini", "b", "ai", "in", "phi", "ji", "li", "ci", "ti", "q", "ri", "l", "u", "bi", "c", "qi", "e", "iu", "it", "mi", "x", "pi", "id", "ip", "uri", "d", "y", "v", "api", "f", "o", "ui", "start"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.lang.*;\\npublic class Main{\\n\t/*static double res=0;\\n\t static void help(int p,int r,int n){\\n\t\tdouble tmp=p;\\n\t\tfor(int i=1;i<=n;i++){\\n\t\t\tdouble x=1+(double)r/1200 ;\\n\t\t\ttmp*=x;\\n\t\t}\\n\t\tres+=tmp;\\n\t\tint k=100000,m=360;\\n\t\tfor(int i=m;i>0;i--){\\n\t\t\thelp(k,5,i);\\n\t\t}\\n\t\tSystem.out.println(\"paid amount \"+k*m+\" \");\\n\t\tSystem.out.println((long)res);\\n\t}\\n*/\\npublic static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int n=s.nextInt();\\n\t\tint[] arr=new int[n+1];\\n\t\t//Set<Integer>set=new HashSet<>();\\n\t\tMap<Integer,Integer>map=new HashMap<>();\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\tint x=s.nextInt();\\n\t\t\t\\n\t\t\tmap.put(x,i+1);\\n\t\t}\\n\t\t\\n\t\tStringBuilder sb=new StringBuilder();\\nfor(int i=1;i<=n;i++){\\n\tsb.append(map.get(i)+\" \");\\n\t\\n}\t\t\\nSystem.out.println(sb);\\n\t\t}\\n    }\\n\t\\n\t\t\\n\t\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "target": "227", "substitutes": {"s": ["fs", "w", "ms", "si", "parser", "sf", "ops", "p", "er", "m", "http", "gs", "r", "os", "sets", "south", "sv", "sl", "sync", "js", "b", "tests", "ls", "ds", "ins", "in", "ws", "ss", "stats", "se", "sys", "c", "e", "ses", "h", "bis", "S", "d", "ssl", "ps", "v", "f", "sb", "g", "i"], "n": ["number", "nr", "w", "p", "nb", "m", "nt", "index", "j", "r", "t", "z", "sn", "b", "N", "in", "count", "nn", "ns", "l", "u", "num", "c", "init", "x", "h", "d", "v", "len", "nc", "f", "o", "nl", "i", "k"], "arr": ["prev", "list", "ch", "br", "ar", "arg", "batch", "Array", "enc", "r", "gr", "dr", "mat", "iq", "par", "stack", "Ar", "vec", "cat", "str", "len", "aa", "dim", "array", "au", "jp"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.io.IOException;\\nimport java.util.NoSuchElementException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ATheNumberOfEvenPairs solver = new ATheNumberOfEvenPairs();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ATheNumberOfEvenPairs {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int n = in.nextInt();\\n            int m = in.nextInt();\\n            int total = n + m;\\n            int pattern = calcNumOfCombination(total, 2);\\n            int pair = n * m;\\n\\n            if (n == 0 || m == 0) {\\n                out.println(pattern);\\n            } else {\\n                out.println(pattern - pair);\\n            }\\n\\n\\n        }\\n\\n        int calcNumOfCombination(int n, int r) {\\n            int num = 1;\\n            for (int i = 1; i <= r; i++) {\\n                num = num * (n - i + 1) / i;\\n            }\\n            return num;\\n        }\\n\\n    }\\n\\n    static class Scanner {\\n        private final InputStream in;\\n        private final byte[] buffer;\\n        private int ptr;\\n        private int buflen;\\n\\n        public Scanner(InputStream in) {\\n            this.in = in;\\n            this.buffer = new byte[1024];\\n            this.ptr = 0;\\n            this.buflen = 0;\\n        }\\n\\n        private boolean hasNextByte() {\\n            if (ptr < buflen) return true;\\n            else {\\n                ptr = 0;\\n                try {\\n                    buflen = in.read(buffer);\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n                if (buflen <= 0) return false;\\n            }\\n            return true;\\n        }\\n\\n        private byte readByte() {\\n            if (hasNextByte()) return buffer[ptr++];\\n            return -1;\\n        }\\n\\n        private boolean isPrintableChar(byte c) {\\n            return '!' <= c && c <= '~';\\n        }\\n\\n        private void skipUnprintable() {\\n            while (hasNextByte() && !isPrintableChar(buffer[ptr])) {\\n                ptr++;\\n            }\\n        }\\n\\n        public boolean hasNext() {\\n            skipUnprintable();\\n            return hasNextByte();\\n        }\\n\\n        public int nextInt() {\\n            if (!hasNext()) throw new NoSuchElementException();\\n            int n = 0;\\n            boolean minus = false;\\n            byte b = readByte();\\n            if (b == '-') {\\n                minus = true;\\n                b = readByte();\\n            }\\n            if (b < '0' || '9' < b) throw new NumberFormatException();\\n            while (true) {\\n                if ('0' <= b && b <= '9') {\\n                    n *= 10;\\n                    n += b - '0';\\n                } else if (b == -1 || !isPrintableChar(b)) {\\n                    return minus ? -n : n;\\n                } else {\\n                    throw new NumberFormatException();\\n                }\\n                b = readByte();\\n            }\\n        }\\n\\n    }\\n}\\n\\n", "target": "49", "substitutes": {"inputStream": ["inputStreamer", "inputSt", " inputSt", " inputSteam", "errorStreamer", "outputStreamer", "errorStream", "inputSteam", "outputstream", "errorSteam", "InputStream", "errorstream", "inputstream", "InputSteam", " inputstream", "InputStreamer", "Inputstream", "InputSt", "outputSt", "outputSteam"], "outputStream": ["inputStreamer", "OutputWriter", "targetStream", "outStream", "outputWriter", "referenceStream", "outputStreamer", "inputSteam", "targetSteam", "referenceSteam", "outputstream", "outstream", "Outputstream", "inputstream", "inputWriter", "OutputSteam", "outSteam", "referenceStreamer", "outWriter", "OutputStream", "targetStreamer", "outputSteam"], "in": ["din", "io", "get", "err", "arg", "index", "ini", "inner", "url", "rec", "data", "win", "lock", "min", "it", "lin", "id", "str", "gin", "info", "is", "bin", "request", "string", "name", "p", "er", "socket", "log", "on", "resource", "work", "config", "ins", "inside", "cache", "h", "ssl", "path", "reader", "inn", "pin", "gen", "ince", "ic", "s", "this", "cin", "thin", "input", "kin", "sin", "vin", "read", "l", "init", "x", "or", "inc", "arin", "asin", "a", "exec", "file", "token", "In", "version", "diff", "part", "ln", "image", "rin", "source", "val", "again", "slice", "login", "isin", "connection", "f", "IN", "con"], "out": ["io", "err", "user", "null", "sync", "outs", "copy", "lib", "inner", "data", "lock", "outer", "pool", "print", "OUT", "call", "table", "window", "w", "bin", "string", "name", "p", "line", "write", "socket", "cli", "query", "log", "work", "error", "cache", "extra", "conn", "ext", "ex", "o", "ch", "gen", "at", "output", "s", "pass", "comment", "object", "scope", "init", "x", "inc", "to", "server", "Out", "exec", "file", "list", "parent", "timeout", "client", "In", "exp", "part", "later", "writer", "image", "prefix", "obj", "v", "again", "key", "connection", "f", "up", "net", "temp"], "solver": ["ssolve", "ssolution", " sparse", "solution", " solution", "Solve", "searcher", " searcher", "ssparse", " solve", "Solution", "ssolver", "ssearcher", "Searcher", "Solver", "solve", "Sparse", "sparse"], "testNumber": [" testnumber", "TestNumber", "testNum", "TestNumbers", "trialNumber", "trialnumber", "trialNum", "testnumber", " testNum", "Testnumber", " testNumbers", "trialNumbers", "TestNum", "testNumbers"], "n": ["nu", "network", "a", "number", "nr", "w", "p", "nb", "ner", "nt", "on", "cn", "na", "ne", "j", "t", "mn", "ni", "sn", "N", "rn", "pn", "nn", "no", "ns", "l", "u", "en", "fn", "e", "conn", "x", "dn", "d", "un", "y", "v", "nc", "f", "o", "net", "k"], "m": ["w", "ms", "mult", "p", "s", "j", "mn", "t", "mu", "mon", "multi", "cm", "l", "u", "en", "e", "M", "mi", "h", "x", "mt", "tm", "d", "y", "v", "mc", "f", "o", "dim", "md", "mm", "k"], "total": ["number", "parent", "base", "mult", "p", "nt", "part", "na", "valid", "t", "mini", "ma", "mu", "partial", "max", "length", "count", "mon", "multi", "no", "all", "normal", "min", "full", "common", "u", "Total", "complete", "global", "master", "major", "sum", "cat", "scale", "current", "mad", "o", "net"], "pattern": ["expression", "regular", "number", "random", "parent", "dist", "form", "string", "feat", "condition", "group", "p", "batch", "part", "chi", "counter", "model", "config", "length", "pat", "count", "prefix", "url", "match", "data", "pixel", "Pattern", "child", "password", "quant", "x", "print", "ph", "cat", "path", "format", "character", "key", "f", "example", "patch", "rule", "array", "info", "mask"], "pair": ["per", "number", "comb", "pin", "mult", "p", "group", "batch", "part", "channel", "counter", "coord", "repeat", "par", "length", "pn", "prefix", "comp", "multi", "match", "reference", "component", "pixel", "common", "np", " pairs", "cat", "air", "piece", "format", "key", "cp", "patch", "pad"], "r": ["a", "nr", "rc", "re", "w", "br", "err", "rs", "p", "sr", "s", "ner", "j", "t", "R", "rn", "mr", "range", "q", "l", "u", "x", "or", "h", "rh", "ru", "right", "rt", "d", "v", "f", "o", "k"], "num": ["nu", "gi", "number", "NUM", "pos", "um", "bin", "p", "unit", "umi", "nb", "exp", "mom", "na", "index", "loc", "valid", "ul", "mn", "one", "coord", "mu", "count", "mon", "multi", "split", "error", "nn", "iter", "no", "Num", "norm", "en", "x", "text", "sum", "id", "nom", "cat", "con", "inc", "val", "str", "offset", "uni", "len", "f", "dim", "col", "cal"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "ii", "hi", "index", "chi", "j", "t", "ni", "mini", "ini", "ai", "phi", "ji", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "l", "e", "iu", "eni", "mi", "x", "pi", "fi", "id", "ip", "uri", "d", "y", "ix", "f", "ui", "o", "info", "start"], "buffer": ["number", "table", "timeout", "window", "FFER", "append", "transfer", "address", "device", "uf", "base", "bb", "buf", "header", "write", "batch", "vector", "buff", "memory", "resource", "copy", "entry", "queue", "writer", "uffer", "length", "port", "reference", "url", "input", "comment", "temp", "wave", "data", "cache", "bc", "read", "layer", "position", "fb", "binary", "limit", "Buffer", "source", "block", "slice", "message", "console", "server", "array", "reader", "iter", "flush"], "ptr": ["fif", "plug", "addr", "ctr", "br", "pos", "tips", "cur", "address", "rot", "elt", "code", "pt", "pend", "tr", "buf", "ft", "xt", "attr", "sth", "req", "loc", "inst", "buff", "pl", "arr", "coord", "dr", "fe", "mp", "pointer", "length", "port", "context", " pointer", "count", "proc", "pointers", "tip", "cmp", "inter", "tp", "tmp", "ext", "src", "ff", "pr", "Ptr", "pull", "depth", "rt", "offset", "push", "len", "lf", "shift", "fd", "patch", "fee", "prot", "wr", "pad"], "buflen": [" buflan", "buFlan", "fuflen", " bullens", "fuplened", "fuFllen", "BUflon", "laFlen", "buplEN", "buvelen", "laflien", "bufilen", "buplened", "buvelenn", " bullig", "bufolength", "fuFlenn", "bufolen", "fuflEN", "BUflen", " buflens", "buvellen", "fuflened", "buflength", "buFLen", "buvelens", "buFLine", "laFllen", "buflEN", "fuFlen", "buflened", "bufilens", "buFlon", "bufllen", "buFlien", "buvelEN", "laFlien", "fuplEN", "BUFlon", "bucilenn", "bufength", "BUFlen", "fuplen", "buFlig", "buFline", "bufened", " buflig", "fuplength", "buflan", "buFLens", "buFlen", " bullan", "fufllen", "BUfline", "bufline", "bufEN", "buplength", "buFlEN", "bucilien", "laflen", "bufolEN", "bufen", "lafllen", "bufilEN", "laflenn", "buflens", "bucilen", "BUflens", "bullen", "bufilien", "bullens", "buFllen", "buFlenn", "bucillen", "fuFlEN", "buflien", "bullig", " bullen", "BUFlens", "buflig", "buFLon", "buflon", "fuflenn", "bufilig", "BUFline", "bullan", "buveline", "buFlens", "bufillen", "fuflength", "buflenn", "bufilan", "buvelon", "laFlenn", "bufolened", "bufilenn", "buplen"], "c": ["a", "fc", "rc", "ch", "cs", "ca", "char", "code", "p", "C", "s", "ac", "cc", "sc", "cr", "ec", "lc", "cont", "comment", "xc", "bc", "ci", "l", "u", "e", "can", "x", "h", "ct", "content", "d", "con", "v", "dc", "character", "uc", "f", "cu", "abc", "cy", "cb", "k", "col"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String args[]) {\\n    Scanner sc = new Scanner(System.in);\\n    \\n    int N = sc.nextInt();\\n    int[] x = new int[N];\\n    for (int i = 0; i < N; i++) {\\n      x[i] = sc.nextInt();\\n      if (isMultiples(2, x[i])) {\\n        if (isMultiples(3, x[i]) || isMultiples(5, x[i])) {\\n          continue;\\n        }\\n\t    System.out.println(\"DENIED\");\\n        return;\\n      }\\n    }\\n    \\n    System.out.println(\"APPROVED\");\\n  }\\n  public static boolean isMultiples(int multiples, int n) {\\n    return ((n % multiples) == 0);\\n  }\\n}", "target": "113", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "sf", "screen", "ctx", "cc", "ner", "sec", "sync", "system", "cr", "osc", "sq", "ec", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "cv", " SC", "sch", "scan", "nc", " Sc", "anc", "server", "sh", "sp", "SC"], "N": ["O", "K", "I", "Na", "Ns", "Len", "C", "T", "J", "Ni", "NT", "Ne", "NN", "Size", "Q", "R", "H", "D", "Y", "NA", "Z", "B", "Num", "L", "M", "X", "NE", "S", "F", "P", "V", "Count", "NS", "Number"], "x": ["xi", "test", "list", "number", "wx", "is", "status", "xe", "p", "ctx", "s", "na", "index", "cross", "t", "z", "work", "xxxx", "XX", "in", "xy", "xc", "rx", "xf", "data", "size", "lex", "q", "ax", "u", "c", "e", "xes", "xs", "tx", "X", "xx", "d", "ux", "y", "v", "ix", "xxx", "key", "ex", "sex", "xp", "plus", "array"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "oi", "cli", "m", "ii", "hi", "part", "index", "j", "t", "ni", "z", "ini", "mu", "b", "ai", "in", "ji", "multi", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "e", "init", "it", "iu", "mi", "pi", "h", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "f", "o", "ui", "info", "k"], "multiples": ["multiities", "Multiiles", "multiases", "Multibles", "triple", " multibles", "trips", "multiiles", "multibles", "Multiple", "triples", "multiple", "Multiples", "Multiities", "tubles", " multiases", "tuples", "Multips", " multiiles", "Multiases", " multips", " multiple", " multiities", "multips", "tuases", "tuities", "triiles"], "n": ["nu", "network", "number", "nr", "w", "Ns", "p", "name", "nb", "m", "nt", "ne", "j", "t", "z", "sn", "b", "max", "in", "size", "ns", "l", "u", "en", "c", "num", "e", "d", "ng", "v", "nc", "nl", "o", "g", "net", "k"]}}
{"code": "import java.util.HashMap;\\nimport java.util.Scanner;\\nimport java.util.stream.IntStream;\\nimport java.lang.Math;\\n\\npublic class Main {\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int d = sc.nextInt();\\n\\n        int ans = 0;\\n        for(int i = 0; i < n; i++){\\n            double key = sc.nextDouble();\\n            double value = sc.nextDouble();\\n            double r = Math.pow(key, 2) + Math.pow(value, 2);\\n            double a = Math.sqrt(r);\\n            if(a <= d){\\n                ans++;\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "42", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "core", "cur", "cs", "ser", "ca", "cor", "cer", "search", "sub", "ctx", "cli", "cc", "ner", "soc", "loc", "sync", "system", "cr", "sq", "osc", "lc", "cont", "coll", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "cv", " SC", "sch", "mc", "scan", "nc", "uc", "sp", "sb", "parse", "SC"], "n": ["network", "p", "s", "ner", "nt", "m", "ne", "j", "t", "z", "sn", "b", "N", "in", "ns", "l", "u", "en", "c", "num", "e", "conn", "x", "h", "y", "v", "nc", "f", "o", "net", "k"], "d": ["dd", "w", "di", "dy", "p", "s", "m", "cd", "j", "t", "z", "dt", "ind", "ds", "ded", "D", "data", "dh", "nd", "da", "l", "u", "c", "e", "ad", "x", "dx", "dl", "dc", "f", "dim", "md", "sd", "k"], "ans": ["span", "annis", "ants", "cons", "AN", "rs", "errors", "lan", "anon", "s", "annot", "vers", "amps", "na", "os", "ANS", "aid", "anas", "ares", "ana", "an", "ann", "ars", "ls", "ores", "ds", "ins", "lines", "nas", "atan", "cas", "nn", "ns", "ases", "x", "anz", "reads", "ats", "eps", "aus", "ids", "es", "ions", "anus", "aned", "scan", "ons", "anc", "as", " scans", "ays", "runs", "ras", "rows"], "i": ["gi", "xi", "I", "is", "si", "di", "ie", "p", "ii", "j", "ki", "ni", "ini", "b", "ai", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "c", "ori", "iu", "eni", "mi", "pi", "ip", "uri", "y", "v", "vi", "f", "ui", "info"], "key": ["core", "score", "search", "char", "ie", "code", "name", "query", "Key", "index", "j", "ki", "pair", "link", "entry", "length", "count", "ke", "keys", "size", "row", "q", "point", "qi", "e", "x", "id", "ip", "field", "ry", "val", "y", "seed", "info", "k"], "value": ["number", "Value", "weight", "search", "iv", "version", "name", "p", "volume", "s", "m", "feature", "index", "default", "resource", "one", "b", "VALUE", "values", "data", "q", "l", "e", "x", "element", "dev", "function", "scale", "id", "field", "val", "v", "f", "k"], "r": ["nr", "rc", "kr", "re", "err", "ar", "ra", "rs", "p", "sr", "er", "s", "m", "rar", "cr", "b", "R", "rx", "radius", "mr", "fr", "u", "c", "rf", "e", "rr", "rh", "pr", "or", "ru", "rt", "v", "hr", "f", "rb"], "a": ["tta", "ar", "ra", "ca", "p", "ia", "ac", "alpha", "aaa", "A", "sa", "ea", "ana", "an", "ab", "b", "ae", "ba", "ata", "pa", "da", "aj", "c", "e", "am", "area", "x", "ta", "va", "aa", "as", "au", "ad"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n    public static void main(String[]arg){\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        while(true){\\n            int n = sc.nextInt();\\n            if(n == 0) break;\\n            int[] s = new int[n];\\n\\n            int sum = 0;\\n\\n            for(int i =0; i < n; i++){\\n                s[i] = sc.nextInt();\\n                sum = sum + s[i];\\n            }\\n            double ave = 0, var = 0;\\n\\n            ave = sum / (double)n;\\n\\n            double sum2 = 0;\\n\\n            for(int k = 0; k < n; k++){\\n                sum2 = sum2 + (s[k] - ave) * (s[k] - ave);\\n            }\\n\\n            var = sum2 / (double)n;\\n\\n            System.out.printf(\"%.8f\\n\",Math.sqrt(var));\\n\\n        }\\n\\n    }\\n}\\n", "target": "203", "substitutes": {"arg": [" arguments", "ig", "params", "err", "name", "line", "Arg", "sec", "ark", "gs", "loc", "enc", "pass", "debug", "arr", "config", "input", "inter", "param", "Args", "argument", "str", "path", "array", "g", "parse"], "sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "sf", "cc", "ner", "nt", "sec", "sa", "sync", "osc", "cr", "ec", "sl", "sk", "sq", "lc", "st", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "l", "c", "src", "Sc", "asc", "out", "sem", "cv", " SC", "sch", "scan", "nc", " Sc", "anc", "sh", "sp", "sb", "SC"], "n": ["network", "nr", "w", "p", "nb", "m", "nt", "na", "ne", "j", "nan", "ln", "t", "ni", "z", "sync", "an", "sn", "b", "N", "in", "nn", "no", "size", "ns", "l", "u", "en", "num", "c", "e", "init", "conn", "x", "h", "dn", "nw", "d", "ng", "y", "v", "nit", "len", "nc", "f", "nl", "o", "g"], "s": ["a", "parts", "qs", "is", "ks", "w", "cs", "si", "rs", "p", "gs", "os", "sets", "sv", "abs", "b", "ls", "ds", "ins", "in", "ss", "ws", "size", "its", "ns", "ims", "l", "u", "groups", "c", "ses", "e", "ts", "xs", "states", "S", "d", "ps", "y", "v", "es", "ints", "sites", "services", "f", "g", "ans", "rows", "strings", "spec"], "sum": ["cost", "sav", "fill", "um", "si", "ny", "name", "unit", "sort", "alpha", "ac", "average", "part", "na", "index", "pass", "ul", "sa", "Sum", "skip", "mass", "max", "av", "count", "mean", "size", "total", "miss", "sign", "sam", "ass", "use", "se", "u", "num", "c", "init", "am", "scale", "parse", "val", "v", "len", "shape", "fat", "vol", "sim", "plus", "sh", "sp", "g", "start", "ad"], "i": ["gi", "xi", "I", "si", "ie", "di", "p", "oi", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "b", "ind", "ai", "multi", "li", "ci", "ti", "ik", "qi", "u", "bi", "c", "e", "init", "mi", "pi", "x", "fi", "id", "ip", "uri", "y", "v", "ix", "slice", "f", "ui", "o"], "ave": ["sav", "ak", "iv", "ay", "alpha", "average", "ve", "ac", "aved", "na", " average", "pass", "rat", "an", "aving", "ai", "save", "adjust", "av", "vae", "mean", "aves", "alias", "each", "aver", "ax", "stage", "aw", "adapt", "af", "aug", "ta", "air", "scale", "cv", "age", "val", "va", "off", "ale", "AV", "aa", "ack", "al", "au", "saving"], "var": ["sav", "err", "ar", "ser", "rank", "star", "iv", "sr", "alpha", "grad", "man", "r", "dr", "adjust", "par", "av", "year", "error", "aver", "pack", "sign", "init", "type", "vari", "cat", "dev", "scale", "mod", "val", "y", "v", "ady", "Var", "mad", "op", "ad", "spec", "ver"], "sum2": ["ass5", "sav2", "cal2", "sumTwo", " sumTwo", "scale5", "Sum4", "sum82", " sum0", "sum1", "sum3", "calTwo", " sum3", "miss3", "scale1", "ass0", "sp82", "Sum1", "ass2", "sum0", "Sum2", "sum4", "sav1", "cal82", "scale2", "spTwo", " sum62", "miss1", "miss62", "sp1", "Sum3", "mean1", "miss2", "sum5", "scale0", "sum62", "mean4", " sum1", " sum4", "cal1", "sav62", " sum82", "ass1", "sav3", " sum5", "mean2", "sp2", "mean3"], "k": ["K", "kn", "kr", "ks", "w", "ak", "p", "mk", "uk", "j", "kh", "r", "ki", "z", "work", "sk", "ek", "b", "ck", "kk", "ke", "end", "ku", "ky", "ik", "q", "ijk", "l", "u", "c", "ad", "ka", "x", "dk", "kw", "id", "d", "kid", "v", "kick", "key", "ko", "ack", "ok", "kg", "o", "gh", "g", "spec"]}}
{"code": "import java.util.Scanner;\\n\\n//AtCoder Beginner Contest 148\\n//B\tStrings with the Same Length\\npublic class Main {\\n\\n\tstatic final int MOD = 1000000007;\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = Integer.parseInt(sc.next());\\n\t\tString S = sc.next();\\n\t\tString T = sc.next();\\n\t\tsc.close();\\n\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tsb.append(S.charAt(i));\\n\t\t\tsb.append(T.charAt(i));\\n\t\t}\\n\t\tSystem.out.println(sb.toString());\\n\t}\\n}\\n", "target": "200", "substitutes": {}}
{"code": "import java.io.*;\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str = br.readLine();\\n\t\tString[] strs = str.split(\" \");\\n\t\tint a = Integer.parseInt(strs[0]);\\n\t\tint b = Integer.parseInt(strs[1]);\\n\t\tint x = a * b;\\n\t\tint y = (a*2)+(b*2);\\n\t\tSystem.out.println(x + \" \" + y);\\n\t\tbr.close();\\n\t}\\n}", "target": "92", "substitutes": {"br": ["io", "err", "Br", "img", "brush", "string", "bb", "tr", "sr", "buf", "yr", "BR", "r", "browser", "jar", "cr", "arr", "ab", "bar", "dr", "gr", "coll", "ob", "mr", "fr", "HR", "bridge", "ber", "lr", "bro", "wr", "bed", "ler", "bh", "hr", "bf", "reader", "cb", "iter", "bl", "rb"], "str": ["cur", "msg", "err", "char", "string", "tr", "p", "line", "sr", "s", "strip", "enc", "r", "txt", "stri", "sl", "st", "arr", "dr", "gr", "in", "input", "obj", "Str", "data", "iter", "fr", "read", "l", "c", "out", "text", "pr", "div", "f", "sp", "STR", "i"], "strs": ["Strs", "grs", "Strls", "colls", "Strlines", "collS", " stres", "STRs", "intp", "StrS", "collls", "strS", "strb", " strp", "arrs", "STRls", "strls", "strlines", "grls", "arrls", "Strb", "intes", " strlines", "stres", "arrS", "ints", "strp", "grb", "intlines", "Strp", "STRb", "Stres"], "a": ["fa", "ca", "n", "au", "p", "oa", "s", "alpha", "ia", "m", "ac", "r", "A", "sa", "ea", "z", "ma", "an", "ab", "one", "ae", "ba", "pa", "da", "l", "aj", "u", "c", "e", "am", "area", "la", "asa", "d", "va", "aa", "f", "as", "o", "i"], "b": ["n", "base", "bb", "p", "s", "lb", "bot", "j", "r", "z", "ab", "length", "count", "bc", "ba", "ob", "B", "l", "u", "bi", "c", "e", "bs", "h", "body", "d", "db", "v", "aa", "f", "o", "sb", "g", "i", "k", "bl"], "x": ["px", "w", "n", "base", "p", "hi", "fx", "index", "r", "t", "z", "xy", "xc", "rx", "ya", "ax", "l", "u", "c", "e", "h", "xs", "X", "tx", "dx", "xx", "yx", "d", "v", "ix", "xxx", "ex", "xp", "f", "patch", "o", "i"], "y": ["iy", "w", "ny", "n", "base", "bb", "dy", "p", "s", "m", "j", "vy", "t", "z", "yy", "xy", "ym", "ya", "Y", "wy", "yd", "l", "u", "bi", "c", "e", "ey", "yt", "h", "yi", "zy", "d", "v", "ady", "f", "o", "sy", "g", "i"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tint intSumNum = 0;\\n\\n\t\tint r = scan.nextInt();\\n\t\tint c = scan.nextInt();\\n\t\tint[][] ary = new int[r+1][c+1];\\n\\n\t\t//r*c\\n\t\tfor(int i =0; i < r ; i++){\\n\\n\t\t\tfor(int j = 0; j < c; j++ ){\\n\\n\t\t\t\tary[i][j] = scan.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\tfor(int k = 0; k < r + 1; k++){\\n\t\t\tfor(int l = 0; l < c + 1; l++){\\n\t\t\t\t//?????????????????????????????????????????????\\n\t\t\t\tif(l != c && k != r){\\n\t\t\t\t\tary[k][c] += ary[k][l];\\n\t\t\t\t}\\n\t\t\t\t//???????????????????????????\\n\t\t\t\tif(k != r){\\n\t\t\t\t\tary[r][l] += ary[k][l];\\n\t\t\t\t}\\n\\n\t\t\t\tSystem.out.print(ary[k][l]);\\n\t\t\t\tif(l != c){\\n\t\t\t\t\tSystem.out.print(\" \");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t}\\n}", "target": "23", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.Math;\\n\\npublic class Main {\\n    static boolean check(String s){\\n        int n = s.length();\\n        for(int i = 0; i < n ; ++i){\\n            if(s.charAt(i) != s.charAt(n-1-i)){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        int n = s.length();\\n        String a = s.substring(0, (n-1)/2);\\n        String b = s.substring((n+3)/2-1, n);\\n        String ans = \"No\";\\n        if(check(s) && check(a) && check(b)) ans = \"Yes\";\\n        System.out.println(ans);\\n    }\\n}", "target": "123", "substitutes": {"s": ["fs", "is", "si", "string", "sf", "aws", "p", "ings", "m", "service", "gs", "os", "r", "t", "south", "sv", "js", "abs", "sl", "ls", "ds", "ins", "in", "input", "ss", "your", "ws", "its", "sin", "ns", "l", "sys", "u", "se", "c", "e", "ses", "h", "ts", "xs", "su", "bis", "x", "source", "S", "d", "str", "y", "v", "es", "f", "services", "plus", "o", "as", "sb", "g", "us", "strings"], "n": ["network", "nu", "w", "non", "name", "p", "nb", "m", "nt", "cn", "nor", "ne", "j", "r", "ln", "t", "none", "z", "mn", "an", "sn", "N", "ni", "in", "nn", "no", "ns", "l", "u", "en", "c", "num", "e", "init", "conn", "x", "d", "un", "y", "v", "len", "nc", "f", "o", "net", "k", "inn"], "i": ["xi", "gi", "I", "si", "di", "ie", "p", "oi", "m", "abi", "ii", "hi", "index", "j", "mini", "z", "one", "ini", "ai", "in", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "l", "e", "ori", "it", "iu", "eni", "mi", "x", "pi", "h", "id", "ip", "uri", "d", "y", "v", "ix", "slice", "f", "o", "ui", "info", "start"], "sc": ["esc", "exec", "rc", "ch", "desc", "cs", "si", "sub", "cer", "cor", "screen", "sr", "cc", "ner", "sec", "soc", "r", "cr", "osc", "system", "ec", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "Sc", "asc", "str", " SC", "sch", "scan", "nc", " Sc", "uc", "sp", "SC", "spec"], "a": ["ar", "ga", "ca", "au", "p", "ia", "ac", "alpha", "na", "A", "sa", "an", "ab", "ae", "ba", "c", "am", "la", "asa", "art", "y", "va", "aa", "f", "as", "ama", "ad"], "b": ["bas", "bb", "p", "nb", "bd", "lb", "bing", "bot", "r", "abb", "wb", "ab", "ba", "ob", "bel", "B", "l", "u", "c", "fb", "e", "bs", "bis", "d", "y", "v", "emb", "f", "abc", "o", "sb", "cb", "rb"], "ans": ["ks", "ants", "cons", "AN", "lan", "ings", "annot", "cross", "ANS", "nan", "lang", "ents", "anas", "an", "sk", "ann", "aces", " sins", "ars", "ds", "ins", "ls", "support", " means", "atan", "ss", "cas", "leans", "nn", "aning", "ads", "anned", "san", "ns", "anners", "ean", "ends", "ays", "plan", "can", "ats", "eps", "aus", "es", "anus", "aned", "scan", "ons", "anc", "anks", "asts", " scans", "errors", "nas", "ras"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        int[] w = new int[n+1];\\n        for(int i = 1;i<=n;i++){\\n            w[i] += w[i-1] + Integer.parseInt(sc.next());\\n        }\\n        int min = Integer.MAX_VALUE;\\n        for(int i = 1;i<=n;i++){\\n            if(min > Math.abs(w[n] - w[i] * 2)){\\n                min = Math.abs(w[n] - w[i] * 2);\\n            }\\n        }\\n        System.out.println(min);\\n    }\\n}", "target": "2", "substitutes": {"sc": ["pc", "esc", "scl", "sw", "rc", "ch", "cs", "cer", "sf", "sr", "cc", "ner", "sync", "system", "cr", "osc", "ec", "sl", "lc", "st", " scr", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "isc", "src", "Sc", "asc", "or", "sm", "cv", " SC", "sch", "dc", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "parser", "SC", "squ"], "n": ["a", "network", "p", "nb", "s", "m", "nt", "ii", "ne", "j", "r", "t", "mn", "z", "sn", "b", "N", "max", "in", "count", "nn", "size", "ns", "l", "u", "en", "c", "num", "e", "fn", "x", "h", "d", "un", "y", "v", "len", "nc", "f", "o", "net", "k"], "w": ["wx", "wl", "sw", "west", "window", "weight", "ww", "wu", "ew", "word", "p", "s", "m", "width", "wa", "r", "weights", "wh", "t", "z", "work", "W", "max", "b", "ws", "now", "way", "win", "tw", "q", "ow", "l", "u", "aw", "c", "e", "working", "x", "h", "kw", "wp", "widget", "nw", "d", "y", "v", "fw", "f", "k", "hw", "g", "wall", "iw", "we", "wal", "wt", "rw"], "i": ["xi", "gi", "I", "is", "io", "si", "ie", "di", "p", "oi", "ii", "hi", "index", "j", "ni", "z", "mini", "ini", "mu", "b", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "l", "e", "init", "iu", "it", "mi", "x", "pi", "fi", "id", "ip", "uri", "y", "v", "ix", "slice", "api", "f", "ui", "o", "info", "start"], "min": ["a", "MIN", "span", "is", "core", "minimum", "pos", "weight", "value", "version", "unit", "diff", "sol", "sort", "m", "amin", "on", "part", "na", "pass", "default", "mine", "mini", "this", "none", "partial", "max", "ind", "lower", "ss", "rain", "size", "don", "use", "small", "ax", "sign", "miss", "dec", "pri", "Min", "init", "e", "am", "limit", "next", "id", "scale", "d", "pre", "val", "len", "key", "shift", "act", "dim", "mins", "start"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint max = 1;\\n\t\tint sum = 0;\\n\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\tint tmp = sc.nextInt();\\n\t\t\tsum += tmp;\\n\t\t\tif (tmp > max) {\\n\t\t\t\tmax = tmp;\\n\t\t\t}\\n\t\t}\\n\t\tsum -= max;\\n\\n\t\tint k = sc.nextInt();\\n\t\tfor (int i = 0; i < k; i++) {\\n\t\t\tmax *= 2;\\n\t\t}\\n\\n\t\tSystem.out.println(sum + max);\\n\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "201", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "sr", "ctx", "cam", "cc", "ner", "sec", "tc", "loop", "sync", "system", "cr", "osc", "ec", "sq", "lc", "class", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "sem", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "sb", "SC", "spec"], "max": ["parent", "w", "height", "cur", "rank", "base", "step", "mode", "MAX", "alpha", "m", "strip", "first", "sup", "index", "power", "default", "Max", "always", "std", "conf", "in", "count", "mean", "now", "end", "size", "total", "cache", "no", "min", "range", "ax", "top", "num", "c", "init", "can", "last", "out", "x", "limit", "id", "scale", "right", "mod", "dev", "orig", "current", "key", "div", "plus", "cu", "sh", "auto", "from", "temp", "cost", "start", "wrap", "co"], "sum": ["mem", "parent", "um", "si", "rank", "diff", "alpha", "average", "sort", "part", "first", "sup", "index", "default", "ul", "Sum", "skip", "mix", "always", "doc", "conf", "count", "mean", "cum", "size", "total", "cache", "use", "min", "sign", "ass", "se", "num", "init", "out", "su", "scale", "cat", "mod", "dev", "parse", "spread", "seed", "key", "vol", "div", "add", "plus", "cu", "up", "sh", "auto", "temp", "cost", "start", "gram"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "p", "oi", "cli", "ii", "hi", "part", "hei", "chi", "j", "ni", "mini", "ini", "ai", "in", "ji", "li", "ci", "ti", "min", "zi", "l", "qi", "u", "bi", "c", "e", "init", "iu", "mi", "x", "pi", "id", "ip", "uri", "v", "api", "ix", "uni", "vi", "f", "ui", "info"], "tmp": ["a", "test", "pos", "done", "img", "ppo", "ie", "pt", "p", "po", "buf", "tc", "nt", "ii", "attr", "sup", "dest", "j", "txt", "t", "mp", "emp", "kk", "count", "meta", "mmm", "obj", "data", "size", "opt", "cmp", "extra", "fb", "np", "area", "su", "keep", "ff", "next", "source", "stuff", "ptr", "option", "pp", "offset", "v", "api", "beta", "foo", "current", "seed", "cp", "const", "md", "zip", "temp", "start", "pad", "rb"], "k": ["K", "kn", "ks", "ch", "w", "ak", "n", "p", "unk", "mk", "m", "tk", "j", "z", "km", "sk", "b", "ck", "count", "ke", "size", "q", "l", "u", "c", "x", "kw", "d", "kid", "y", "v", "kick", "key", "ok", "f"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n\t\\n    public static void main(String[] args) {\\n    \tScanner sc = new Scanner(System.in);\\n    \tint S = sc.nextInt();\\n    \tList<Integer> list = new ArrayList<>();\\n    \tlist.add(S);\\n    \twhile (true) {\\n        \tif (S%2 == 0) {\\n        \t\tS /= 2;\\n        \t\tif (list.contains(S)) {\\n        \t\t\tbreak;\\n        \t\t} else {\\n        \t\t\tlist.add(S);\\n        \t\t}\\n        \t} else {\\n        \t\tS = 3*S+1;\\n        \t\tif (list.contains(S)) {\\n        \t\t\tbreak;\\n        \t\t} else {\\n        \t\t\tlist.add(S);\\n        \t\t}\\n        \t}\\n    \t}\\n    \tSystem.out.println(list.size()+1);\\n    }\\n}", "target": "166", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "ca", "sub", "cer", "com", "s", "cc", "ner", "sec", "soc", "acc", "enc", "system", "osc", "cr", "ec", "ocr", "bc", "sci", "ss", "ci", "cl", "se", "c", "Sc", "asc", "sem", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sp", "SC"], "S": ["O", "SEC", "SE", "U", "K", "I", "Si", "E", "IS", "Part", "Shift", "II", "SY", "Sample", "Sing", "SU", "C", "T", "SP", "SS", "s", "Second", "Source", "SK", "SN", "A", "Service", "G", "Id", "W", "N", "TS", "R", "Sort", "AS", "D", "H", "SD", "Y", "MS", "OSS", "B", "L", "LESS", "Single", "M", "SA", "Socket", "X", "SR", "SI", "P", "F", "SL", "DS", "WS", "US", "V", "ID", "NS", "SG", "OS", "ASC", "Sl", "SH", "SC"], "list": ["chain", "test", "collection", "table", "parent", "get", "search", "si", "value", "string", "code", "base", "group", "see", "set", "s", "sort", "low", "loop", "log", "batch", "part", "cli", "diff", "index", "null", "sync", "this", "counter", "ls", "lc", "entry", "queue", "tree", "coll", "li", "lists", "size", "data", "all", "map", "cache", "stack", "full", "cl", "l", "L", "pool", "join", "listed", "out", "keep", "source", "lat", "la", "left", "pre", "add", "server", "array", "i", "LIST", "we", "sequence"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\nclass Main{\\n    public static void main(String args[])throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int num1=0,num2=0;\\n        String s = br.readLine();\\n        String[] str = s.split(\" \");\\n        int[] x = new int[str.length];\\n        for(int i=0; i<str.length; i++){\\n            x[i] = Integer.parseInt(str[i]);\\n        }\\n        Arrays.sort(x);\\n        for(int i=0; i<str.length-1; i++){\\n            System.out.print(x[i] +\" \");\\n        }\\n        System.out.println(x[str.length-1]);\\n    }\\n}", "target": "37", "substitutes": {"br": ["res", "io", "err", "Br", "ar", "img", "tr", "p", "sr", "er", "buf", "yr", "ner", "BR", "nor", "r", "STR", "browser", "cr", "arr", "b", "gr", "dr", "ocr", "bar", "obj", "mr", "fr", "stream", "HR", "bs", "out", "ber", "bridge", "bro", "Reader", "ler", "hr", "div", "reader", "cb", "bl", "rb"], "num1": [" numA", "umA", "um0", "index3", "num3", " num3", "um1", "um3", "index0", "indexA", "numA", " num0", "num0", "index1"], "num2": ["umSecond", "umCount", "duSecond", "numSecond", "duCount", "um2", "umTwo", " numCount", " numSecond", "duTwo", "numCount", "du2", " numTwo", "numTwo"], "s": ["a", "si", "n", "string", "rs", "p", "line", "ings", "m", "r", "sl", "b", "in", "input", "ss", "sg", "lines", "data", "Str", "ns", "l", "se", "u", "c", "e", "out", "su", "source", "v", "f", "services", "o", "sp", "sb", "strings"], "str": ["list", "err", "char", "n", "string", "code", "form", "name", "p", "tr", "line", "sr", "er", "step", "ner", "strip", "exp", "part", "sc", "cross", "index", "r", "pass", "stri", "t", "arr", "st", "sl", "dr", "in", "input", "url", "inner", "Str", "data", "fr", "ns", "c", "ext", "text", "self", "style", "v", "hr", "ix", "key", "div", "f", "sp", "STR", "iter", "parse", "spec"], "x": ["xi", "wx", "list", "number", "search", "value", "string", "code", "p", "ic", "xt", "exp", "cross", "index", "fx", "php", "t", "z", "arr", "work", "rex", "XX", "xy", "xc", "rx", "data", "ax", "xxxxxxxx", "l", "u", "e", "xa", "ext", "xes", "xs", "X", "tx", "python", "xx", "id", "y", "ix", "v", "xxx", "ex", "sex", "xp", "plus", "array"], "i": ["xi", "a", "gi", "I", "io", "si", "n", "di", "ie", "p", "oi", "m", "abi", "ii", "hi", "r", "j", "uli", "z", "ini", "b", "lc", "ai", "in", "length", "phi", "ji", "multi", "li", "ti", "ci", "q", "ri", "l", "u", "bi", "c", "qi", "e", "iu", "eni", "mi", "pi", "h", "yi", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "vi", "key", "f", "o", "ui", "info", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\npublic static void main(String args[]) {\\n\tint x;\\n\tint j;\\n\tint key;\\n\tScanner num = new Scanner(System.in);\\n\tx = num.nextInt();\\n\tint a[] = new int[x];\\n\tfor (int i=0;i<a.length;i++) {\\n\t\ta[i]=num.nextInt();\\n\t}\\n\t\\n\tfor(int k=0;k<a.length;k++) {\\n\t\tif(k<a.length-1)\\n\t\t\tSystem.out.printf(a[k]+\" \");\\n\t\telse\\n\t\t\tSystem.out.printf(a[k]+\"\\n\");\\n\t}\\n    \\n\tfor(int i=1;i<a.length;i++) {\\n\t\tkey = a[i];\\n\t\tj = i - 1;\\n\t\twhile (a[j]>key && j>=0) {\\n\t\t\ta[j+1]=a[j];\\n\t\t\tj--;\\n\t\t\tif (j<0) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\ta[j+1]= key;\\n\t\tfor(int k=0;k<a.length;k++) {\\n\t\t\tif(k<a.length-1)\\n\t\t\t\tSystem.out.printf(a[k]+\" \");\\n\t\t\telse\\n\t\t\t\tSystem.out.printf(a[k]+\"\");\\n\t\t}\\n\t\tSystem.out.println(\"\");\\n\t}\\n}\\n}", "target": "69", "substitutes": {"x": ["xi", "wx", "is", "ww", "n", "p", "xt", "m", "fx", "index", "r", "cross", "na", "t", "sync", "z", "work", "mix", "b", "max", "in", "xy", "xc", "rx", "lex", "pe", "q", "ax", "l", "u", "c", "e", "h", "xes", "X", "tx", "xs", "dx", "xx", "id", "any", "d", "y", "v", "ix", "xxx", "ex", "xp", "f", "array"], "j": ["bj", "ch", "br", "ak", "job", "ja", "n", "ie", "jc", "dy", "dj", "J", "p", "section", "m", "jo", "ii", "part", "ij", "jump", "jet", "note", "z", "js", "jj", "b", "jl", "ind", "length", "ji", "li", "obj", "im", "ik", "q", "fr", "ijk", "l", "aj", "qi", "u", "e", "kj", "adj", "uj", "d", "je", "y", "jit", "v", "ix", "jen", "json", "ok", "f", "o", "jp"], "key": ["ch", "w", "ak", "ee", "char", "n", "code", "ie", "value", "name", "p", "J", "step", "m", "jo", "Key", "index", "ki", "z", "ek", "b", "ck", "length", "ke", "_", "ji", "ky", "ik", "row", "min", "q", "ax", "point", "c", "e", "ce", "next", "id", "ry", "val", "y", "kid", "v", "shift", "f", "o", "cy", "start"], "num": ["nu", "bn", "number", "nr", "NUM", "um", "n", "non", "umi", "m", "result", "uno", "man", "na", "r", "mn", "mu", "ann", "b", "sn", "mon", "gnu", "nm", "nn", "no", "Num", "u", "init", "ou", "np", "out", "su", "am", "nam", "nw", "nom", "ru", "sum", "un", "uni", "tun", "ut", "om", "f", "gener", "util", "g", "net", "temp", "conv", "gram", "con", "norm"], "a": ["access", "ca", "Array", "ao", "ea", "something", "ab", "b", "aux", "ba", "ata", "data", "pa", "password", "va", "za", "array", "ama", "info", "missing", "w", "fa", "p", "ac", "result", "ada", "work", "da", "u", "area", "am", "o", "au", "at", "code", "aaa", "alpha", "ia", "s", "na", "wa", "ana", "ae", "input", "all", "object", "l", "c", "words", "la", "any", "api", "current", "as", "active", "exec", "img", "ga", "oa", "home", "app", "A", "sa", "ma", "z", "an", "e", "audio", "y", "aa", "f", "auto"], "i": ["xi", "gi", "I", "is", "io", "si", "n", "ie", "di", "p", "oi", "ii", "hi", "index", "ki", "ni", "z", "ini", "b", "ai", "phi", "ji", "li", "ci", "ik", "ri", "qi", "u", "bi", "e", "ori", "iu", "eni", "it", "mi", "pi", "yi", "my", "id", "ip", "uri", "y", "v", "ix", "slice", "f", "o", "ui", "info", "start"], "k": ["th", "K", "kn", "kr", "ks", "ch", "w", "ak", "n", "p", "mk", "unk", "m", "uk", "kh", "ki", "z", "km", "sk", "ek", "b", "work", "ck", "kk", "kin", "ke", "kind", "ku", "ky", "ik", "kat", "row", "q", "ijk", "u", "c", "e", "it", "h", "dk", "ka", "kw", "ph", "id", "block", "d", "pp", "y", "kid", "v", "kick", "ko", "kg", "ok", "f", "o", "gh", "g", "spec"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint X = sc.nextInt();\\n\t\tint array[] = new int[N];\\n\t\tint msum = 0;\\n\t\tint mmin = 100000;\\n\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tarray[i] = sc.nextInt();\\n\t\t\tmsum += array[i];\\n\t\t\tif(mmin > array[i]) {\\n\t\t\t\tmmin = array[i];\\n\t\t\t}else {\\n\t\t\t\tmmin = mmin;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println((X-msum)/mmin + N);\\n\t}\\n\\n}\\n", "target": "3", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "sf", "cc", "ner", "tc", "enc", "sync", "system", "osc", "cr", "sq", "ec", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", "str", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "server", "sh", "sp", "sb", "SC"], "N": ["O", "K", "U", "E", "I", "Part", "n", "Ns", "J", "C", "T", "NT", "Ne", "NB", "A", "NN", "W", "Size", "Q", "XX", "R", "D", "H", "Y", "NA", "Z", "Num", "B", "L", "Network", "NM", "NI", "M", "NC", "No", "NE", "S", "P", "F", "V", "NS", "NL", "Number"], "X": ["O", "K", "U", "I", "J", "C", "Length", "XL", "CL", "A", "G", "IX", "Q", "XX", "Size", "R", "XP", "H", "D", "Y", "XXX", "NA", "Z", "TX", "L", "MX", "M", "x", "S", "P", "F", "ID", "V", "ML", "NS", "Number"], "array": ["a", "list", "file", "collection", "number", "parent", "address", "ar", "value", "string", "word", "group", "section", "arrow", "result", "ance", "batch", "Array", "vector", "feature", "index", "null", "channel", "complex", "arr", "sample", "model", "pair", "coll", "image", "ray", "length", "book", "order", "data", "row", "object", "all", "instance", "carry", "share", "area", "x", "database", "align", "element", "function", "allow", "v", "shape", "integer", "auto", "record"], "msum": ["ssum", "tsum", "msam", "tsm", "rsum", "msumm", " msam", "msm", "msul", "msub", "mesum", "Msul", "mesumm", "msuna", "mesumer", "Msums", "Msub", " msuna", "mmul", "ssam", " msumm", "tsuna", "ssuna", "ssumer", "mmum", " msumer", "ssumm", "mesam", "ssm", "mmums", "rsums", "rsub", "msums", "mmub", "msumer", " msm", "tsumm", "Msum", "rsul"], "mmin": ["mdmins", " mai", "mmMin", " mMin", "mcmins", "Minit", "mdmini", "mmax", " mlimit", " mmax", "mmmin", "lai", "amMin", "mmins", " mmins", " mamin", "mcmin", "amrain", " mmini", "minit", "mamin", "llimit", "mmindex", "aminit", "cmmin", "mindex", "mrain", "mMin", "lmin", "ymmin", "mmini", "mcMin", "mai", "mmai", "mmmax", "lMIN", "cmMin", "Mmin", "MMin", "lMin", "ymMIN", "Mindex", "Mamin", "mMIN", "ymrain", "amMIN", "ammini", " minit", " mindex", " mdiff", "cminit", "mdiff", "ammin", "mmdiff", "mmlimit", "mdinit", "mdmin", "ammins", "Mmax", "mcdiff", "cmmax", "lrain", "mmmins", "mlimit", "mmamin", "ymMin"], "i": ["xi", "gi", "a", "I", "io", "si", "n", "di", "ie", "p", "oi", "cli", "m", "ii", "hi", "part", "index", "j", "r", "z", "ini", "ai", "in", "multi", "ji", "li", "ci", "ti", "min", "l", "qi", "u", "ri", "c", "e", "it", "mi", "x", "pi", "fi", "id", "ip", "uri", "y", "v", "ix", "slice", "f", "ui", "o"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n       try {\\n\t\t\tScanner sc=new Scanner(System.in);\\n\t\t\tint d=sc.nextInt();\\n\t\t\tint t=sc.nextInt();\\n\t\t\tint s=sc.nextInt();\\n\t\t\tint k=t*s;\\n\t\t\tif(k>=d) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t}\\n\t\t\telse {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t}\\n\t\t}catch(Exception e) {\\n\t\t\t\\n\t\t}\\n\\n    }\\n}", "target": "246", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "cs", "ca", "cor", "cer", "sf", "sr", "com", "ctx", "cc", "sec", "tc", "soc", "sync", "system", "cr", "osc", "ec", "sq", "lc", "class", "cont", "coll", "bc", "sci", "ss", "ci", "cus", "cl", "se", "c", "src", "Sc", "asc", "sche", "ct", " SC", "mc", "scan", "nc", "uc", "sp", "sb", "parse", "SC"], "d": ["a", "dd", "done", "n", "dy", "p", "m", "cd", "pd", "z", "dt", "ds", "in", "ded", "D", "dh", "da", "l", "u", "c", "dp", "e", "did", "dx", "id", "dl", "db", "dc", "o", "dim", "sd", "i", "start"], "t": ["a", "w", "at", "n", "pt", "p", "T", "m", "nt", "j", "z", "dt", "b", "l", "u", "c", "e", "type", "x", "ts", "h", "ta", "ty", "y", "v", "ant", "f", "o", "i", "start"], "s": ["a", "points", "parts", "ks", "w", "tips", "ms", "cs", "n", "p", "m", "os", "z", "sq", "sk", "ls", "b", "ds", "ns", "l", "u", "groups", "c", "e", "ts", "states", "S", "ps", "v", "es", "f", "services", "features", "steps", "g", "i"], "k": ["K", "ks", "i", "ak", "n", "p", "tk", "j", "ki", "z", "sk", "kt", "ck", "kk", "ke", "kind", "ku", "ik", "q", "l", "c", "ad", "dk", "kw", "id", "y", "kid", "dc", "kick", "ok", "o", " n", "start", "spec", " K"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int m = sc.nextInt();\\n    int c = 0, pen = 0;\\n    int[] r = new int[n + 1];\\n    for(int i = 0; i < m; i++){\\n      int p = sc.nextInt();\\n      if(sc.next().equals(\"WA\")){\\n        if(r[p] >= 0)r[p]++;\\n      }else{\\n        if(r[p] >= 0){\\n          pen += r[p];\\n          c++;\\n          r[p] = -1;\\n        }\\n      }\\n    }\\n    System.out.println(c+\" \"+pen);\\n  }\\n}", "target": "48", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "sf", "com", "cc", "ner", "tc", "app", "enc", "sync", "cr", "osc", "sq", "sv", "ec", "lc", "sl", "class", "cont", "st", "bc", "sci", "cle", "ss", "cl", "scope", "se", "l", "src", "Sc", "asc", "or", "sche", "sem", "ct", "str", " SC", "dc", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "g", "sb", "SC", "con"], "n": ["network", "nr", "w", "s", "nb", "nt", "cn", "na", "ne", "j", "t", "z", "b", "N", "in", "no", "ns", "l", "u", "en", "num", "x", "h", "d", "y", "v", "nc", "f", "o", "net", "k"], "m": ["w", "s", "j", "mn", "z", "hm", "mu", "b", "in", "nm", "cm", "l", "u", "en", "num", "e", "M", "x", "h", "d", "y", "v", "mc", "f", "o", "dim", "g", "mm", "k"], "c": ["a", "pc", "ch", "w", "col", "cur", "cs", "ca", "color", "C", "ac", "enc", "t", "z", "cr", "b", "lc", "in", "count", "xc", "pointer", "ci", "size", "center", "q", "arc", "cl", "l", "u", "e", "x", "h", "d", "v", "dc", "mc", "f", "cu", "o", "cy", "g", "start", "k", "con"], "pen": ["pc", "per", "span", "fac", "pin", "w", "pid", "pos", "padding", "mer", "pol", "Pen", "wa", "pse", "margin", "par", "pointer", "pn", "phi", "ping", "fen", "row", "pe", "sign", "q", "pa", "sten", "en", "pi", "pr", "inc", "pre", "len", "character", "fat", "press", "f", "cap", "sp", "g", "start", "k", "con", "pad"], "r": ["per", "res", "nr", "rc", "kr", "re", "adr", "w", "br", "ar", "rs", "sr", "er", "rate", "rar", "t", "cr", "arr", "b", "dr", "R", "ir", "range", "fr", "rl", "l", "u", "e", "rf", "x", "rh", "or", "pr", "h", "rr", "ru", "rt", "d", "v", "hr", "f", "o", "g", "ur", "k", "rb"], "i": ["a", "xi", "I", "si", "di", "ie", "ii", "chi", "j", "t", "ni", "z", "ini", "b", "ai", "in", "multi", "li", "ci", "ti", "u", "bi", "e", "it", "iu", "mi", "x", "pi", "ip", "d", "y", "v", "ix", "f", "o", "ui", "jp"], "p": ["a", "pc", "per", "ap", "w", "pos", "op", "part", "j", "t", "z", "b", "port", "pn", "ping", "pa", "l", "point", "u", "lp", "e", "tp", "np", "h", "pi", "x", "pr", "ip", "d", "P", "pre", "y", "v", "api", "cp", "f", "change", "patch", "o", "sp", "g"]}}
{"code": "import java.util.*;\\nclass Main{\\n\tstatic Scanner s = new Scanner(System.in);\\n\tpublic static void main(String[] args) {\\n\t\tint a=Integer.parseInt(s.next()),\\n\t\t    b=Integer.parseInt(s.next()),\\n\t\t    c=Integer.parseInt(s.next()),\\n\t\t    cnt=0;\\n\t\tfor(int i=a;i<=b;i++) {\\n\t\t\tif(c%i==0)\\n\t\t\t\tcnt++;\\n\t\t}\\n\t\tSystem.out.println(cnt);\\n\t}\\n}", "target": "190", "substitutes": {"s": ["fs", "parts", "qs", "si", "n", "string", "sf", "ops", "sym", "gets", "gs", "r", "utils", "t", "south", "abs", "js", "ls", "tests", "ds", "in", "ss", "ws", "its", "fts", "ns", "se", "sys", "l", "u", "e", " ls", "ses", "out", "or", "bis", "ts", "states", "S", "ssl", "events", "v", "es", "f", "services", "as", "sb", "parser", "parse", "strings"], "a": ["fa", "ga", "ca", "n", "base", "au", "p", "oa", "alpha", "ia", "ac", "aaa", "ada", "A", "sa", "ea", "z", "ab", "ai", "count", "ae", "ba", "data", "da", "aj", "u", "area", "x", "la", "id", "asa", "d", "va", "y", "offset", "aa", "f", "as", "ad"], "b": ["n", "base", "bb", "p", "lb", "nb", "eb", "bot", "j", "wb", "abb", "ab", "length", "count", "bc", "ba", "ob", "B", "l", "mb", "fb", "e", "bs", "x", "body", "d", "y", "db", "v", "aa", "f", "sb", "cb"], "c": ["cur", "cs", "ca", "n", "p", "C", "ac", "cc", "m", "z", "cr", "lc", "count", "ci", "cm", "l", "u", "e", "ce", "x", "unc", "ct", "d", "y", "dc", "uc", "f", "cu", "o", "cy", "g", "k", "col"], "cnt": ["Cnt", "acnt", "Ccount", "cct", "Cnc", "cpt", "fcount", " cnc", " count", "count", "Cpt", "acct", "account", "acpt", "acount", "fnc", "Cct", " cpt", "cnc", " cct", "Count", "fnt", "fct", "ccount", " ccount"], "i": ["gi", "xi", "I", "io", "si", "ie", "di", "p", "oi", "abi", "ii", "chi", "j", "index", "t", "ni", "z", "ini", "mu", "ai", "length", "phi", "ji", "multi", "li", "ti", "ci", "zi", "ri", "l", "u", "bi", "e", "iu", "pi", "x", "fi", "ip", "block", "uri", "d", "v", "slice", "f", "o", "ui"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.math.BigDecimal;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner(System.in);\\n\t\tlong a = sc.nextLong();\\n\t\tString b = sc.next();\\n\t\tBigDecimal x = new BigDecimal(a);\\n\t\tBigDecimal y = new BigDecimal(b);\\n\t\tBigDecimal q = x.multiply(y);\\n\t\tBigDecimal ans = q.setScale(0, BigDecimal.ROUND_DOWN);\\n\t\tSystem.out.println(ans);\\n\t}\\n\t\\n\tstatic class FastScanner {\\n\t\tprivate BufferedReader reader = null;\\n\t    private StringTokenizer tokenizer = null;\\n\t    public FastScanner(InputStream in) {\\n\t        reader = new BufferedReader(new InputStreamReader(in));\\n\t        tokenizer = null;\\n\t    }\\n\\n\t    public String next() {\\n\t        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t            try {\\n\t                tokenizer = new StringTokenizer(reader.readLine());\\n\t            } catch (IOException e) {\\n\t                throw new RuntimeException(e);\\n\t            }\\n\t        }\\n\t        return tokenizer.nextToken();\\n\t    }\\n\\n\t    public String nextLine() {\\n\t        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t            try {\\n\t                return reader.readLine();\\n\t            } catch (IOException e) {\\n\t                throw new RuntimeException(e);\\n\t            }\\n\t        }\\n\\n\t        return tokenizer.nextToken(\"\\n\");\\n\t    }\\n\\n\t    public long nextLong() {\\n\t        return Long.parseLong(next());\\n\t    }\\n\\n\t    public int nextInt() {\\n\t        return Integer.parseInt(next());\\n\t    }\\n\\n\t    public double nextDouble() {\\n\t         return Double.parseDouble(next());\\n\t     }\\n\\n\t    public int[] nextIntArray(int n) {\\n\t        int[] a = new int[n];\\n\t        for (int i = 0; i < n; i++)\\n\t            a[i] = nextInt();\\n\t        return a;\\n\t    }\\n\\n\t    public long[] nextLongArray(int n) {\\n\t        long[] a = new long[n];\\n\t        for (int i = 0; i < n; i++)\\n\t            a[i] = nextLong();\\n\t        return a;\\n\t    }\\n\t}\\n}\\n", "target": "15", "substitutes": {"sc": ["esc", "exec", "sw", "rc", "ch", "core", "cs", "ca", "cer", "screen", "cc", "ner", "sec", "na", "acc", "this", "system", "cr", "osc", "ec", "sync", "lc", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sem", "cv", "sch", "scan", "nc", "uc", "sh", "sp", "parse", "SC"], "a": ["span", "tta", "sta", "ga", "ca", "p", "oa", "ia", "alpha", "ac", "m", "aaa", "na", "wa", "ada", "A", "sa", "ea", "z", "ma", "ab", "an", "action", "ai", "aux", "ae", "ba", "ata", "data", "instance", "pa", "da", "l", "aj", "aw", "c", "area", "am", "h", "mA", "la", "d", "va", "offset", "v", "ha", "aa", "div", "f", "as", "active", "array", "ama", "g", "auto", "au", "ad"], "b": ["big", "base", "bb", "p", "s", "eb", "bot", "r", "j", "ab", "ib", "bc", "ba", "ob", "B", "l", "bi", "c", "e", "fb", "bs", "h", "d", "v", "f", "o", "sb", "g", "be", "cb", "k", "rb"], "x": ["xi", "w", "p", "s", "alpha", "fx", "r", "t", "z", "xy", "xc", "rx", "ax", "l", "u", "c", "e", "h", "xs", "X", "tx", "dx", "xx", "d", "ux", "v", "ix", "xxx", "ex", "xp", "f"], "y": ["w", "ny", "dy", "p", "m", "vy", "r", "j", "oy", "t", "z", "ish", "yy", "xy", "ya", "ky", "Y", "l", "ys", "u", "py", "c", "ey", "e", "yi", "h", "d", "ry", "isy", "v", "f", "cy", "k"], "q": ["qs", "w", "cs", "ca", "p", "qq", "s", "query", "m", "qa", "z", "sq", "dq", "qu", "Q", "iq", "eq", "bird", "qi", "u", "c", "id", "d", "ix", "v", "aq", "sh", "o", "g", "k", "co"], "ans": ["span", "vals", "qs", "regular", "ants", "cons", "cs", "ca", "AN", "rs", "lan", "ctx", "ia", "annot", "flags", "na", "ANS", "aid", "ana", "an", "ian", "ann", "ars", "ls", "ins", "cas", "bird", "ians", "ns", " sa", " na", "can", " fa", " ang", "eps", " an", "aus", " af", "es", "anc", "as", " ants", "An", "ays", "nas", "ras", " pan"], "reader": ["per", "file", "rc", "io", "handler", "rot", "line", "er", "socket", "ner", "loader", "worker", "more", "rar", "r", "driver", "resource", "report", "entry", "writer", "reading", "pointer", "manager", "input", "inner", "rer", "keeper", "readable", "url", "data", "row", "iter", "context", "lock", "read", "l", "ri", "stream", "e", "out", "rr", "or", "oder", "source", "ler", "Reader", "right", "content", "ry", "feed", "buffer", "connection", "f", "server", "parser", "parse"], "tokenizer": ["Tokenize", "Tokenization", "okenizer", "okeniter", "optimer", "authorner", "serializers", "serialiser", "okenizing", "Tokener", " tokenner", "normalizer", "tokener", "okener", "tokenizers", "Tokenizer", "normalization", " tokenizers", " tokenizing", "tokenize", "authorize", "serialization", " tokenize", " tokeniter", "okenization", "okenizers", "serializer", "optimizer", "tokenization", "optimner", "normalizers", "optimize", "optimizers", "okeniser", "authoriter", "tokeniser", "normaliser", "authorizer", "Tokeniser", "Tokenizers", "authorer", " tokeniser", "optimiser", "Tokenner", "okenize", "optimization", "tokenner", "tokeniter", "Tokenizing", "serialize", "serialner", "okenner", " tokenization", " tokener", "serialiter", "tokenizing", "authoriser"], "in": ["din", "file", "is", "io", "err", "In", "bin", "string", "query", "socket", "user", "log", "m", "world", "r", "resource", "ini", "ins", "image", "inf", "input", "inner", "readable", "data", "session", "win", "lock", "read", "l", "c", "stream", "it", "out", "source", "inc", "d", "path", "str", "login", "ex", "connection", "f", "server", "as", "from", "IN", "inn"], "n": ["network", "span", "number", "nat", "Ns", "name", "p", "s", "nb", "m", "nt", "na", "ne", "j", "r", "nan", "ln", "t", "none", "z", "an", "sn", "N", "count", "no", "nn", "size", "all", "ns", "not", "node", "l", "u", "num", "c", "en", "e", " N", "dn", "adj", "left", "d", "v", "nc", "f", "o", "g", "net", "k", "inn", "norm"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "p", "oi", "cli", "m", "abi", "ii", "hi", "j", "mini", "z", "uli", "ini", "ni", "mu", "lc", "ai", "phi", "ji", "multi", "li", "ci", "ti", "inner", "data", "min", "l", "ri", "u", "bi", "qi", "e", "init", "iu", "eni", "my", "mi", "pi", "h", "fi", "yi", "source", "id", "ip", "uri", "field", "d", "v", "slice", "f", "o", "ui", "info"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n\tScanner sc = new Scanner(System.in);\\n    int x = Integer.parseInt(sc.next());\\n    int coin500 = x / 500;\\n    int remain = x - coin500 * 500;\\n    System.out.println(coin500 * 1000 + (remain / 5) * 5);\\n    }\\n      \\n      \\n}", "target": "180", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "cc", "ner", "soc", "acc", "enc", "sync", "system", "cr", "osc", "ec", "sq", "lc", " scr", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "isc", "Sc", "asc", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "parse", "SC"], "x": ["xi", "wx", "number", "px", "w", "xe", "n", "base", "code", "p", "ctx", "m", "fx", "index", "cross", "t", "z", "rex", "in", "xy", "xc", "rx", "ci", "size", "pe", "ax", "c", "e", "xa", "xs", "tx", "X", "dx", "xx", "id", "y", "v", "ix", "xxx", "ex", "xp", "f", "i", "k"], "coin500": ["Coin500", "token150", "coin600", "Coin1000", "token600", " coin50", "token500", "coins50", " coin600", "crypt500", "win200", "coin50", "win300", "token300", "coin1000", "Coin300", " coin200", "coins150", " coin1000", " coin150", "bitcoin50", "bitcoin150", "coin150", "crypt600", "coin200", " coin300", "win1000", "crypt300", "win500", "coin300", "Coin200", "coins500", "bitcoin500", "crypt150"], "remain": [" remaining", "remains", "Remains", "Remained", "Remain", "REMain", "Remaining", "remained", "REMaining", "remaining", "REMained", "REMains", " remained", " remains"]}}
{"code": "import java.io.BufferedInputStream;\\nimport java.io.BufferedOutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.HashSet;\\nimport java.util.Scanner;\\nimport java.util.Set;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n        try (BufferedInputStream in = new BufferedInputStream(System.in);\\n             PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out))) {\\n\\n            Scanner sc = new Scanner(in);\\n\\n            // 10:42-\\n\\n            int mod = 1_000_000_007;\\n            int n = sc.nextInt();\\n            int m = sc.nextInt();\\n            int[] as = new int[m];\\n\\n            Set<Integer> broken = new HashSet<>();\\n            for (int i = 0; i < as.length; i++) broken.add(sc.nextInt());\\n\\n            int[] dp = new int[n + 1];\\n            dp[0] = 1;\\n\\n            for (int i = 1; i <= n; i++) if (!broken.contains(i)) {\\n                dp[i] += dp[i - 1];\\n                dp[i] %= mod;\\n                if (i - 2 >= 0) dp[i] += dp[i - 2];\\n                dp[i] %= mod;\\n            }\\n\\n            out.println(dp[n]);\\n        }\\n    }\\n}\\n", "target": "174", "substitutes": {"sc": ["pc", "rc", "cs", "ca", "cc", "acc", "sync", "cr", "lc", "ck", "bc", "sci", "cl", "c", "src", "Sc", "asc", "cv", "gc", "inc", " SC", "sch", "mc", "scan", "nc", "uc", "anc", "SC"]}}
{"code": "import java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\n/**\\n * B - ROT N\\n */\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner( System.in );\\n        // \u6587\u5b57\u5217\u306e\u6841\u6570\\n        int n = sc.nextInt();\\n        String s = sc.next();\\n        String result = \"\";\\n\\n        List<String> alphabetsList = Arrays.asList( \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\" );\\n\\n        for( int i = 0; i < s.length(); i++ ) {\\n//            System.out.println(\"charat : \" + s.charAt( i ));\\n            int key = alphabetsList.indexOf( String.valueOf( s.charAt( i ) ) );\\n            if( key + n >= 26 ) {\\n                key -= 26;\\n            }\\n//            System.out.println(\"key : \" + key );\\n            result += alphabetsList.get( key + n );\\n        }\\n\\n        System.out.println( result );\\n\\n        sc.close();\\n    }\\n}", "target": "13", "substitutes": {"sc": [" sp", " sm", "sf", "SB", "sa", "sq", "an", "ann", " ser", " scr", " cr", "ss", " subp", " f", " ann", "Sc", " SC", " res", " sk", " ans", "scan", " scorer", " Sc", " cont", " sl", "sb", " rc", "SC"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author David Wu\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        TaskC solver = new TaskC();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskC {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int picks = 0;\\n            int[] ratings = new int[8];\\n            int n = in.readInt();\\n            for (int i = 0; i < n; i++) {\\n                int k = in.readInt();\\n                if (k <= 399) {\\n                    ratings[0] = 1;\\n                    continue;\\n                }\\n                if (k <= 799) {\\n                    ratings[1] = 1;\\n                    continue;\\n                }\\n                if (k <= 1199) {\\n                    ratings[2] = 1;\\n                    continue;\\n                }\\n                if (k <= 1599) {\\n                    ratings[3] = 1;\\n                    continue;\\n                }\\n                if (k <= 1999) {\\n                    ratings[4] = 1;\\n                    continue;\\n                }\\n                if (k <= 2399) {\\n                    ratings[5] = 1;\\n                    continue;\\n                }\\n                if (k <= 2799) {\\n                    ratings[6] = 1;\\n                    continue;\\n                }\\n                if (k <= 3199) {\\n                    ratings[7] = 1;\\n                    continue;\\n                }\\n                picks++;\\n            }\\n\\n            int counter = 0;\\n            for (int i : ratings) {\\n                if (i == 1) {\\n                    counter++;\\n                }\\n            }\\n            if (counter == 0) {\\n                out.print(1);\\n            } else {\\n                out.print(counter);\\n            }\\n            counter += picks;\\n            out.print(\" \" + counter);\\n\\n\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int readInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void print(Object... objects) {\\n            for (int i = 0; i < objects.length; i++) {\\n                if (i != 0) {\\n                    writer.print(' ');\\n                }\\n                writer.print(objects[i]);\\n            }\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n        public void print(int i) {\\n            writer.print(i);\\n        }\\n\\n    }\\n}\\n\\n", "target": "94", "substitutes": {"inputStream": ["inputStreamer", " inputThread", "currentStreamer", "getstream", " inputSteam", "currentStream", "InputThread", "outputStreamer", "inputSteam", "outputstream", "getStream", "outputThread", "currentstream", "InputStream", "getSteam", "inputstream", "getStreamer", "InputSteam", " inputstream", "inputThread", "Inputstream", "currentSteam", "outputSteam"], "outputStream": ["OutputWriter", "applicationStream", "outputWriter", " outputForm", "applicationstream", "inputSteam", "inputForm", " outputSteam", "applicationSteam", "outputstream", "OutputForm", "applicationWriter", "Outputstream", "inputstream", "inputWriter", "OutputSteam", " outputWriter", "outputForm", "OutputStream", "outputSteam"], "in": ["din", "file", "pin", "io", "re", "err", "In", "gen", "bin", "request", "arg", "string", "name", "version", "ic", "socket", "ac", "log", "loader", "part", "r", "inn", "this", "cin", "ini", "config", "inside", "ins", "image", "inf", "input", "inner", "rin", "url", "data", "sin", "win", "lock", "read", "min", "l", "init", "e", "lin", "source", "id", "inc", "path", "gin", "str", "again", "nin", "login", "isin", "buffer", "connection", "ex", "from", "info", "reader", "IN", "con"], "out": ["plain", "io", "err", "exit", "user", "outs", "copy", "inner", "data", "page", "full", "outer", "pool", "print", "str", "OUT", "off", "buffer", "call", "view", "table", "window", "w", "bin", "cmd", "string", "name", "line", "write", "socket", "log", "work", "error", "cache", "extra", "conn", "ext", "ex", "o", "wr", "writing", "png", "gen", "at", "output", "loader", "this", "object", "scope", "init", "x", "process", "inc", "console", "to", "check", "Out", "exec", "file", "list", "parent", "timeout", "client", "version", "group", "exp", "part", "r", "later", "image", "prefix", "obj", "again", "v", "connection", "up", "net", "temp"], "solver": ["ssolve", "setsolve", "setsolution", "ssolution", "setsolving", "solution", " solution", "Solve", "ssolving", "solving", " solve", "setsolver", "Solution", "ssolver", "Solver", " solving", "solve", "Solving"], "testNumber": [" testnumber", "TestNumber", "testNum", "TestNumbers", " trialnumber", " trialNumber", " trialNumbers", "testnumber", " testNum", "Testnumber", " testNumbers", "TestNum", " trialNum", "testNumbers"], "picks": ["nickets", "compixels", "prix", "spixels", "nicks", "compicks", "hicking", "nickers", "ticker", "npickers", "hixels", "nixels", "pricks", "spicking", "hicks", "nicker", "ticks", "ticking", "npicks", "prickers", "pickets", "npickets", "prixels", "nix", "compix", "pixels", "pickers", "npicker", "tickers", "compickers", "picking", "tixels", "tickets", "hickets", "spicks", "spickets", "pix", "picker"], "ratings": ["rubers", "laters", "buckistics", "raters", "piting", "pitning", "hatifying", "rensions", "rations", "ratensions", "reportings", "Ratistics", " raticing", "ratifications", "riters", "bucking", "pitistics", "rubing", "raticing", "lations", " ratning", "buckings", "Ratifying", "ratifying", "latins", " ratensions", "Ratifications", "Rating", "Ratings", "rions", "savings", "hatifications", "hating", "Ratins", "ratistics", "hatning", "latistics", "latings", "rubings", "ritensions", "Raticing", "latifying", "rubions", "hations", " rating", "Ratning", " ratifications", " ratins", "hatings", " rations", "savins", "buckning", "rubning", "pitings", "ritions", "Rations", "ratins", "reportistics", "riting", "ring", "ritings", "savifying", "reporting", "reportins", "saving", "Raters", "rings", "rating", "lating", " ratifying", " raters", "ratning", "ricing", "ritins"], "n": ["number", "p", "s", "nb", "m", "j", "t", "mn", "z", "sn", "b", "N", "count", "nn", "size", "q", "ns", "l", "num", "en", "e", "x", "h", "d", "y", "len", "nc", "f", "nl", "o", "g", "net"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "wei", "m", "ii", "index", "j", "chi", "ki", "ni", "z", "mini", "ini", "b", "ai", "phi", "inner", "multi", "li", "ci", "ti", "ik", "ri", "qi", "u", "bi", "l", "init", "e", "iu", "mi", "pi", "x", "ip", "d", "y", "v", "ix", "anti", "key", "f", "ui", "o", "info", "inn"], "k": ["K", "kn", "ks", "ak", "p", "mk", "tk", "uk", "j", "kh", "ki", "t", "km", "work", "sk", "ek", "b", "lc", "ck", "kk", "ke", "ku", "ky", "ik", "kat", "q", "ijk", "l", "u", "e", "it", "ka", "h", "dk", "x", "kw", "id", "d", "kid", "y", "v", "kick", "key", "ko", "ok", "f", "o", "g", "spec"], "counter": ["number", "parent", "timeout", "fork", "currency", "value", "step", "name", "stop", "timer", "ner", "result", "loader", "batch", "vector", "starter", "chart", "index", "default", "cover", "clock", "entry", "lc", "repeat", "coll", "book", "pointer", "count", "comment", "reference", "match", "row", "total", "page", "cmp", "inter", "outer", "num", "cher", "walker", "type", "Counter", "keep", "master", "sum", "continue", "offset", "message", "seed", "key", "current", "const", "phrase", "server", "time", "ter", "hello", "info", "second", "cookie", "iter", "progress", "ver"], "stream": ["per", "file", "method", "client", "Stream", "string", "output", "socket", "channel", "resource", "system", "model", "document", "port", "context", "input", "data", "object", "pool", "type", "source", "open", "path", "v", "message", "feed", "buffer", "reader"], "buf": ["rc", "window", "img", "cmd", "uf", "blocks", "ctx", "fp", "batch", "buff", "queue", "iter", "pool", "limit", "Buffer", "alloc", "cv", "ptr", "bag", "box", "buffer", "fd", "cap", "cb", "conv", "flush", "seq", "rb"], "curChar": ["number", "r", "this", "_", "pack", "x", "parse"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n\t\tScanner scan=new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n\t\tint x=scan.nextInt();\\n\t\tint s=x%60;\\n\t\tx=x/60;\\n\t\tint m=x%60;\\n\t\tint h=x/60;\\n\\n\t\tSystem.out.println(h+\":\"+m+\":\"+s);\\n\\n\t}\\n\\n}", "target": "84", "substitutes": {"br": ["run", "ch", "err", "ar", "bin", "car", "vr", "BR", "bor", "browser", "r", "abb", "arr", "report", "ann", "gr", "bar", "dr", "rus", "ray", "ir", "raf", "fr", "read", "rr", "or", "ry", "feed"], "scan": ["run", "re", "ch", "train", "err", "search", "bin", "n", "sr", "er", "car", "query", "ner", "log", "sc", "serv", "r", "an", "report", "ann", "rus", "row", "raf", "san", "range", "read", "se", "c", "can", "or", "open", "v", "feed", "server", "Scan", "aur", "stat", "info", "reader", "ignore", "parse", "con"], "x": ["xi", "wx", "px", "w", "pos", "n", "expl", "p", "event", "on", "width", "fx", "index", "wa", "cross", "t", "z", "work", "b", "max", "in", "xc", "rx", "size", "lex", "ax", "l", "u", "c", "e", "xs", "X", "xes", "tx", "dx", "xx", "bit", "d", "ux", "y", "v", "ix", "ex", "xp", "f", "plus", "i"], "s": ["a", "w", "ms", "cs", "n", "sf", "p", "os", "r", "t", "z", "b", "ss", "ns", "ys", "l", "u", "c", "e", "xs", "su", "S", "d", "ps", "y", "v", "es", "ix", "f", "o", "us", "g", "i", "k", "rows"], "m": ["a", "w", "ms", "um", "n", "p", "j", "r", "t", "z", "hm", "b", "mp", "q", "l", "u", "c", "e", "M", "sm", "d", "y", "v", "f", "o", "g", "i", "k"], "h": ["hs", "ht", "w", "n", "p", "header", "hi", "index", "t", "z", "hm", "b", "end", "H", "ih", "q", "l", "u", "c", "e", "hp", "head", "ph", "id", "oh", "d", "bh", "y", "v", "shift", "hh", "f", "sh", "han", "host", "g", "i"]}}
{"code": "import java.util.Scanner;\\nimport java.util.ArrayList;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        System.out.print(a*b);\\n        System.out.print(\" \");\\n        System.out.println((a+b)*2);\\n    }\\n}", "target": "92", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "com", "ctx", "cc", "tc", "sec", "soc", "enc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "cont", "bc", "sci", "ss", "ci", "scope", "se", "c", "src", "Sc", "asc", "sche", "ct", "cv", " SC", "dc", "scan", "nc", " Sc", "uc", "console", "sp", "sb", "SC"], "a": ["access", "fa", "sha", "ga", "ca", "n", "base", "au", "p", "oa", "s", "ac", "alpha", "aaa", "ia", "na", "A", "sa", "ea", "qa", "ma", "an", "ab", "count", "ae", "ba", "aka", "pa", "da", "ava", "aj", "c", "area", "x", "mA", "la", "asa", "d", "va", "aa", "as", "ama", "i", "ad"], "b": ["n", "base", "bb", "p", "s", "nb", "lb", "eb", "bot", "batch", "zb", "j", "r", "ab", "ib", "pb", "length", "count", "bc", "ub", "ba", "ob", "B", "l", "mb", "c", "e", "fb", "bs", "x", "h", "obb", "d", "y", "db", "v", "aa", "bf", "f", "o", "sb", "cb", "i", "rb"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\t\\n\t\tint n = scanner.nextInt();\\n\t\tint m = scanner.nextInt();\\n\t\t\\n\t\tint[][] a = new int[n][m];\\n\t\tint[] b = new int[m];\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tfor (int j = 0; j < m; j++)\\n\t\t\t\ta[i][j] = scanner.nextInt();\\n\t\t}\\n\t\t\\n\t\tfor (int i = 0; i < m; i++)\\n\t\t\tb[i] = scanner.nextInt();\\n\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint c = 0;\\n\t\t\tfor (int j = 0; j < m; j++) {\\n\t\t\t\tc += (a[i][j] * b[j]);\\n\t\t\t}\\n\t\t\tSystem.out.println(c);\\n\t\t}\\n\t}\\n\\n}\\n\\n", "target": "185", "substitutes": {"scanner": ["scaner", "Scanener", "scancer", " scancer", "nerker", "anner", "hanter", "planter", "nerener", "hancer", "canener", "scanter", "canner", "Scaner", "Scanner", "nerer", "annener", "Scancer", "caner", "hanker", " scanener", "annner", "scanker", "planer", "Scanker", "canter", " scanker", "Scanter", "annter", "planker", " scanter", "scanener", "haner", "nerner", " scaner", "canker", "hanner", "planner"], "n": ["w", "p", "s", "nb", "ner", "cn", "nt", "ne", "r", "mn", "t", "z", "an", "sn", "N", "in", "nn", "no", "ns", "l", "u", "en", "num", "e", "x", "h", "dn", "d", "un", "y", "v", "nc", "f", "o", "net", "k"], "m": ["rm", "w", "ms", "p", "fm", "s", "man", "r", "mn", "mini", "z", "t", "an", "hm", "N", "mu", "in", "ym", "dm", "nm", "im", "size", "all", "cm", "l", "u", "num", "en", "e", "M", "mi", "h", "x", "sm", "d", "y", "v", "mc", "f", "o", "g", "md", "mm", "k"], "a": ["ga", "ca", "p", "oa", "s", "ac", "ia", "aaa", "alpha", "na", "ada", "A", "sa", "ea", "z", "ma", "an", "ab", "ai", "ae", "ba", "da", "l", "aj", "u", "e", "am", "area", "la", "asa", "va", "y", "aa", "f", "as", "o", "auto", "array", "ama", "ans", "au", "ad"], "b": ["br", "bin", "base", "bb", "gb", "p", "nb", "lb", "bd", "eb", "r", "abb", "wb", "ab", "ba", "ob", "B", "l", "u", "bi", "e", "fb", "bs", "x", "h", "body", "d", "y", "db", "v", "bf", "f", "o", "sb", "g", "cb", "rb"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "oi", "cli", "ii", "hi", "ki", "ni", "z", "ini", "ai", "phi", "ji", "li", "ci", "ir", "ik", "zi", "l", "qi", "u", "bi", "ri", "e", "ori", "iu", "init", "eni", "mi", "pi", "x", "yi", "fi", "it", "id", "ip", "uri", "y", "v", "ix", "api", "f", "ui", "o", "info"], "j": ["xi", "bj", "ch", "w", "job", "ja", "si", "jc", "ie", "dj", "J", "p", "ion", "jo", "ii", "ij", "jet", "z", "jj", "js", "jl", "ji", "li", "obj", "ik", "q", "l", "aj", "u", "oj", "qi", "e", "it", "iu", "h", "x", "adj", "uj", "id", "d", "je", "y", "v", "ix", "f", "o", "ui", "g", "jp"], "c": ["pc", "fc", "w", "cur", "cs", "ca", "code", "p", "C", "ac", "cc", "sc", "cd", "enc", "r", "t", "z", "ec", "cr", "lc", "cf", "bc", "end", "ci", "arc", "l", "u", "e", "ce", "h", "cat", "ct", "d", "y", "v", "dc", "nc", "uc", "f", "cu", "cp", "o", "cy", "g", "cb", "k", "col"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tint a[] = new int[n];\\n\t\tint count = 0;\\n\t\tint precount = 0;\\n\\n\t\tfor (int i = 0;i<n ;i++ ) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t}\\n\\n\t\tfor (int i = 0;i<n ;i++ ) {\\n\t\t\tif (a[i]%2==0) {\\n\t\t\t\tprecount++;\\n\t\t\t\tif (a[i]%3==0||a[i]%5==0) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tif (count==precount) {\\n\t\t\tSystem.out.println(\"APPROVED\");\\n\t\t}else{\\n\t\t\tSystem.out.println(\"DENIED\");\\n\t\t}\\n\\n\t}\\n}\\n", "target": "113", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "screen", "cc", "ner", "system", "cr", "osc", "sq", "st", "lc", "ec", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", " SC", "sch", "mc", "scan", "nc", "uc", "anc", "sh", "sp", "sb", "SC"], "n": ["network", "number", "w", "p", "s", "nb", "m", "nt", "cn", "ne", "j", "r", "nan", "ln", "t", "sync", "z", "sn", "b", "N", "in", "size", "nn", "no", "ns", "l", "u", "num", "c", "en", "x", "d", "y", "v", "len", "nc", "f", "o", "net", "k"], "a": ["missing", "list", "tta", "access", "sta", "ga", "ca", "code", "au", "p", "ua", "s", "alpha", "ac", "aaa", "na", "wa", "index", "A", "sa", "ea", "qa", "z", "ma", "an", "ab", "work", "b", "aux", "data", "ata", "da", "l", "aj", "u", "c", "e", "am", "area", "x", "la", "va", "ha", "za", "aa", "as", "auto", "array", "ama", "active"], "count": ["test", "number", "list", "force", "parent", "code", "base", "name", "p", "part", "index", "counter", "always", "max", "coll", "length", "in", "more", "level", "error", "size", "total", "all", "cache", "carry", "c", "type", "process", "limit", "id", "depth", "age", "offset", "cond", "Count", "len", "f", "call", "start"], "precount": ["postcache", "proCount", "prevcast", " precode", "pretcond", "prevcode", "presize", "perCount", "precounter", "percache", "prec", "procache", " precounter", "Precode", "precast", "prevcount", "pretcode", "postCount", "procount", "PREcode", "PREcounter", "Precount", "PREcond", " precast", " precond", " prec", "persize", "precache", "precode", "PREcount", "precond", "prevc", "percount", "prosize", "Prec", "pretcounter", "postsize", "Precast", "postcount", "preCount", "pretcount"], "i": ["xi", "gi", "I", "ei", "is", "io", "si", "di", "ie", "p", "oi", "cli", "m", "abi", "ii", "hi", "index", "j", "r", "chi", "iii", "ni", "z", "uli", "ini", "isi", "b", "lc", "ai", "in", "inner", "ji", "phi", "li", "ci", "ti", "multi", "l", "qi", "u", "bi", "c", "ri", "e", "init", "it", "iu", "eni", "mi", "x", "pi", "yi", "fi", "id", "ip", "uri", "field", "y", "v", "ix", "api", "f", "o", "ui", "info", "start"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\n\\npublic class Main{\\npublic static void main(String[] args){\\nScanner scan=new Scanner(System.in);\\nint n=scan.nextInt();\\nint m=scan.nextInt();\\nint[] p=new int[m];\\nString[] s=new String[m];\\n\\nint i=0;\\nfor(i=0;i<m;i++){\\n    p[i]=scan.nextInt();\\n    s[i]=scan.next();\\n}\\n  \\nint[] a=new int[n];\\nint[] b=new int[n];\\nfor(i=0;i<n;i++){\\n    a[i]=0;\\n    b[i]=0;\\n}\\n  \\nfor(i=0;i<m;i++){\\n    if(s[i].equals(\"WA\")&&b[p[i]-1]==0){\\n        a[p[i]-1]=a[p[i]-1]+1;\\n    }\\n    if(s[i].equals(\"AC\")&&b[p[i]-1]==0){\\n        b[p[i]-1]=b[p[i]-1]+1;\\n    }\\n}\\n\\nint sum=0;\\nint summ=0;\\nfor(i=0;i<n;i++){\\n  if(b[i]==1){\\n  sum=sum+a[i];\\n  }\\n  summ=summ+b[i];\\n}\\n\\nSystem.out.println(summ+\" \"+sum);\\n}\\n}", "target": "48", "substitutes": {"scan": ["run", "pan", "span", "chan", "search", "ser", "gen", "mer", "er", "see", "connect", "query", "ner", "sc", "man", "na", "serv", "nan", "r", "ln", "skip", "system", "sync", "an", "ann", "fan", "in", "sci", "ban", "serial", "inner", "nn", "row", "sign", "san", "sin", "read", "bug", "se", "sys", "l", "en", "conn", "plan", "can", "out", " scanner", "cat", "ry", "slice", "wan", "clean", "Scan", "nl", "watch", "ignore", "reader", "spin", "view", "parse", "con", "check"], "n": ["network", "w", "nb", "nt", "ne", "r", "j", "t", "mn", "z", "an", "N", "in", "nn", "no", "ns", "l", "u", "en", "c", "num", "e", "x", "h", "d", "y", "v", "nc", "f", "o", "k"], "m": ["rm", "w", "ms", "man", "r", "j", "mn", "t", "z", "an", "hm", "mu", "N", "in", "nm", "dm", "im", "cm", "l", "u", "num", "c", "e", "M", "mi", "h", "x", "d", "y", "v", "mc", "f", "o", "dim", "g", "mm", "k"], "p": ["pc", "per", "ap", "pid", "w", "op", "ar", "at", "po", "er", "part", "r", "j", "t", "z", "port", "data", "pe", "pa", "l", "point", "u", "ist", "c", "lp", "e", "tp", "it", "x", "pi", "ip", "P", "ps", "d", "y", "pre", "v", "api", "pp", "cp", "f", "o", "sp", "g", "up", "k"], "s": ["parts", "is", "w", "si", "string", "sym", "gs", "os", "r", "sa", "sets", "t", "south", "z", "sl", "ab", "sync", "abs", "ls", "ins", "ss", "q", "l", "sys", "u", "se", "c", "e", "ses", "bs", "ts", "states", "S", "ps", "y", "v", "es", "f", "services", "o", "sp", "sb", "g", "ans", "strings"], "i": ["xi", "I", "io", "si", "di", "index", "mini", "ini", "inner", "multi", "iu", "it", "pi", "fi", "id", "ix", "ui", "info", "start", "is", "ie", "line", "cli", "ii", "ki", "isi", "mu", "ai", "phi", "ji", "li", "ik", "u", "ori", "mi", "yi", "ip", "uri", "o", "gi", "ei", "ami", "ic", "hi", "chi", "l", "c", "init", "eni", "my", "x", "api", "iv", "oi", "j", "ni", "ci", "ti", "ri", "qi", "bi", "e", "source", "d", "y", "v", "isin", "f"], "a": ["ap", "w", "ak", "ar", "ga", "ca", "at", "ac", "ia", "aaa", "alpha", "wa", "A", "sa", "an", "ai", "ae", "ba", "ata", "pa", "da", "l", "u", "c", "e", "am", "x", "area", "asa", "la", "art", "va", "y", "api", "aa", "f", "as", "auto", "ama", "ans", "au", "ad"], "b": ["number", "is", "w", "big", "br", "bin", "base", "bb", "nb", "bd", "lb", "r", "j", "t", "z", "ab", "an", "ib", "bu", "ba", "ob", "pa", "B", "l", "u", "bi", "c", "e", "fb", "bs", "x", "h", "d", "y", "db", "v", "api", "back", "bf", "f", "o", "sb", "g", "be", "k", "rb"], "sum": ["sav", "um", "si", "space", "diff", "average", "result", "ums", "user", "alpha", "umm", "Sum", "cover", "skip", "mass", "doc", "conf", "comment", "count", "mean", "cum", "error", "size", "total", "miss", "use", "sam", "cache", "sign", "num", "sh", "gam", "out", "su", "scale", "style", "parse", "spread", "fat", "sim", "vol", "add", "fee", "us", "summary", "up", "dot", "mem", "cost", "loss", "info", "gram", "cal"], "summ": ["ssum", "summer", "insum", "sumption", "pumm", "pum", " sumption", " soug", "insumm", "puc", "insummer", "setsum", " soup", "psane", "psoug", " suc", "smiss", "sssum", " sane", "pssum", "inssum", "setsumm", "soug", "suc", "pumption", "ssmiss", "soup", "ssumm", "psummer", "setsuc", "psumm", "ssoup", "ssummer", "sane", "psum", " smiss", "setsumption"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringBuilder sb = new StringBuilder();\\n        \\n        String symbol = \"#\";\\n        String dot = \".\";\\n        \\n        while (true) {\\n            String[] ary = br.readLine().split(\" \");\\n            int numH = Integer.parseInt(ary[0]);\\n            int numW = Integer.parseInt(ary[1]);\\n            \\n            if(numH == 0 && numW == 0){\\n                break;\\n            }\\n            \\n            for (int i = 0; i < numH; i++) {\\n                for (int j = 0; j < numW; j++) {\\n                    if (i == 0 || i == (numH - 1)) {\\n                        sb.append(symbol);\\n                    } else if (j == 0 || j == (numW - 1)) {\\n                        sb.append(symbol);\\n                    } else if (numW > 2 && numH > 2){\\n                        sb.append(dot);\\n                    } else {\\n                        sb.append(symbol);\\n                    }\\n                }\\n                sb.append(\"\\n\");\\n            }\\n            sb.append(\"\\n\");\\n        }\\n        \\n        System.out.print(sb);\\n    }\\n}", "target": "19", "substitutes": {"br": ["res", "ctr", "ch", "io", "err", "Br", "img", "ar", "erb", "bb", "tr", "sr", "er", "buf", "yr", "BR", "http", "r", "browser", "cr", "arr", "abs", "b", "dr", "bar", "ocr", "gr", "bc", "obj", "ob", "mr", "fr", "ori", "bs", "ber", "lr", "bro", "bh", "str", "db", "hr", "orb", "reader", "cb", "ur", "bl", "rb"], "sb": ["bj", "xb", "bash", " SB", "si", "erb", "bb", "gb", "sf", " eb", "sr", "nb", "lb", "bd", "home", "eb", "sc", "soc", "bm", "bot", "bg", "SB", "zb", "sup", "sa", "abb", "sth", "bp", "sv", "sync", "ab", "storage", "ib", "b", "pb", "ls", "lab", "lc", "bc", "sg", "bsp", "ub", "ba", "nn", "ob", "bi", "mb", "fb", "binary", "src", "bs", "bridge", "su", "bt", "lr", "obb", "kb", "ssl", "bh", "db", "api", "login", "bf", "shell", "BB", "sp", "orb", "ruby", "cb", "bl", "rb"], "symbol": ["Symbol", "Symb", " syph", "submbol", "stymbol", " syntax", "Syntax", "psyntax", "opntax", "stypt", "schentax", "schemb", "syntax", "sykey", "symb", "psymbol", "symletter", "opmbol", "symmbol", "subkey", "syletter", "thembol", "scheph", "psyph", "symph", "Syletter", " sykey", "symntax", " sypt", "theletter", "scheletter", "subpt", "opph", "stykey", " syletter", "themb", "subletter", "thentax", "opmb", "sypt", " symb", "syph", "schembol", "psyletter", "styletter"], "dot": ["fix", "dump", "flat", "quad", "drop", "gt", "parent", "dollar", "css", "ot", "rot", "di", "step", "cot", "diff", "sym", "bot", "feature", "cross", "chart", "debug", "digit", "hash", " dots", "comment", "prefix", " dotted", "not", "bug", "top", "dash", "password", "poly", " Dot", "python", "die", "atom", "depth", "style", "sql", "patch", "auto", "shadow", "sy", "dirty", "op"], "ary": ["are", "list", "ear", "ARY", "err", "ar", "ordered", "si", "cor", "erb", "dy", "raw", "ref", "aro", "er", "header", "ner", "nor", "bare", "arr", "pair", "entry", "ery", "dr", "ere", "ray", "rx", "ir", "error", "iter", "arry", "arc", "ri", "sys", "inter", "ario", "binary", "area", "arity", "rr", "next", "air", "ctor", "ry", "buffer", "json", "hello", "array", "aries", "info", "early"], "numH": ["Numh", "maxh", "commonHH", "maxG", "maxHH", "numJ", "sumJ", "umHH", "blockJ", "NumW", "umH", " numHH", "NumH", "numHH", "NumY", "sumW", "commonh", "sumH", "umHi", " numY", "nh", "umW", "numX", "sumHH", "nH", " numX", "blockF", "umY", "sumF", "nW", "blockW", " numJ", "blockH", " numh", "sumh", "commonH", " numHi", "umh", "numF", "numY", "numHi", "commonG", "nX", "sumX", "numG", "maxH", "sumHi", " numF", " numG", "numh"], "numW": ["homW", "numw", "numP", "manw", " numL", "umP", "sumP", "umH", "sumI", "umiF", "naL", "sumL", "sumW", "sumH", " numY", "umW", " numw", "numberWe", "umiH", "umY", "manW", "naWe", "umiW", "homH", " numWh", " numI", "numberw", "numberI", "numWh", "homw", "numI", "numberH", "numberWh", "homF", " numP", "numF", "numWe", " numWe", "numL", "umiw", "numY", "sumw", "umL", "manY", "numberW", "naW", "umw", "naWh", "numberL", " numF", "manH"], "i": ["xi", "a", "I", "is", "io", "si", "ie", "di", "ami", "p", "oi", "ii", "hi", "index", "chi", "ki", "ni", "ini", "b", "ai", "in", "phi", "ji", "li", "ci", "ti", "ik", "zi", "ri", "qi", "u", "bi", "e", "ori", "iu", "eni", "mi", "h", "x", "pi", "fi", "yi", "id", "ip", "uri", "y", "v", "ix", "api", "vi", "f", "ui"], "j": ["bj", "w", "ja", "si", "n", "jc", "ie", "J", "p", "jo", "ii", "ij", "z", "js", "jj", "b", "jl", "ji", "li", "q", "l", "qi", "u", "aj", "e", "it", "h", "x", "pr", "uj", "d", "je", "y", "v", "f", "o", "ui", "g", "k", "jp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\npublic static void main(String[] args) {\\nScanner sc = new Scanner(System.in);\\n\\n\\nwhile(true){\\nint i,j,k;\\ndouble sum=0,ave,s=0,sg=0; \\n\\n\\nj = sc.nextInt();\\nint[] intarray = new int[j];\\n\\nif (j == 0 ){\\n    break;\\n}\\n\\nfor(i=0;i<j;i++){\\n\\n intarray[i] = sc.nextInt();\\n\\nsum = sum + intarray[i];\\n}\\nave = sum/j;\\n\\nfor(k=0;k<j;k++){\\n\\n    s =  s + (intarray[k]-ave)*(intarray[k]-ave);\\n}\\n\\n\\n\\nsg = Math.sqrt(s/j);\\n\\nSystem.out.println(sg);\\n\\n}\\n}\\n}\\n", "target": "203", "substitutes": {"sc": ["pc", "esc", "exec", "rc", "ch", "core", "cs", "ca", "cer", "sf", "screen", "ctx", "com", "cc", "ner", "sec", "tc", "sa", "sync", "system", "sq", "cr", "osc", "sk", "ec", " scr", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "out", "sche", "sem", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "server", "anc", "sh", "sp", "SC"], "i": ["xi", "gi", "I", "is", "io", "si", "n", "di", "ami", "ie", "p", "oi", "m", "ii", "index", "ki", "ni", "z", "ini", "b", "ind", "ai", "ji", "li", "ci", "ik", "ri", "qi", "u", "bi", "c", "e", "ori", "iu", "mi", "x", "pi", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "api", "f", "o", "ui", "g", "info"], "j": ["ch", "job", "ja", "si", "n", "ie", "dj", "jc", "J", "p", "section", "m", "jo", "ii", "part", "ij", "index", "jet", "note", "z", "jj", "js", "dt", "b", "jl", "ind", "length", "ji", "li", "obj", "size", "q", "l", "qi", "u", "oj", "aj", "c", "e", "java", "x", "kj", "adj", "uj", "d", "jit", "y", "v", "key", "json", "f", "o", "sh", "start", "jp"], "k": ["K", "kn", "kr", "ks", "ch", "w", "ak", "n", "p", "mk", "m", "uk", "kh", "ki", "z", "work", "sk", "ek", "b", "ck", "kk", "ke", "ku", "ky", "ik", "q", "ijk", "l", "u", "c", "e", "x", "ka", "dk", "kw", "id", "y", "kid", "v", "kick", "key", "ko", "ack", "ok", "f", "o", "gh"], "sum": ["ash", "cost", " sums", "sav", "um", "si", "sat", "ay", "alpha", "average", "ac", "ums", "sort", "na", "sup", "ul", "sa", "Sum", "sk", "mass", "save", "av", "mean", "ss", "size", "total", "sin", "sam", "min", "ass", "sign", "se", "u", "say", "am", "su", "sem", "scale", "spread", "vol", "sim", "sh", "up", "summary", "ans", "cal"], "ave": ["sav", "ak", "sha", "si", "iv", "ay", "ac", "average", "alpha", "ve", "aved", "acc", "anne", "slave", "sa", "sq", "Sa", "aving", "ai", "save", "asi", "av", "adjust", "ae", "ss", "aves", "mean", "length", "ah", "aver", "ax", "stage", "opus", "se", "aw", "asm", "af", "asc", "su", "ag", "ta", "air", "scale", "age", "ake", "AV", "ice", "aa", "ack", "as", "sb", "al", "au", "ad"], "s": ["ks", "is", "cs", "si", "n", "rs", "p", "gs", "os", "sa", "sync", "sv", "sl", "js", "sk", "sq", "ls", "ds", "ss", "ws", "size", "sin", "ns", "l", "se", "u", "rss", "ses", "bs", "ess", "su", "xs", "ans", "S", "ssl", "ps", "y", "as", "sh", "sp", "sb", "g", "sd", "us", "spec"], "sg": ["sw", "kr", "sav", "msg", "sat", "si", "ser", "sf", "sr", "cc", "acc", "gs", "sup", "sa", "gm", "sv", "sq", "storage", "sk", "std", "ss", "size", "sin", "se", "sys", "aw", "gam", "su", "ag", "pg", "ain", "ssl", "sql", "kg", "gg", "rg", "sh", "sp", "sb", "g", "sd", "stat", "gram", "spec"], "intarray": ["interbase", " intray", "incArray", "intv", "interv", " intv", " intArray", "incarray", "inccache", "IntArray", "intcache", "extarray", "intArray", "Intarr", "integerarray", "incray", " intbase", "interray", "integercache", "Intcache", "extray", "intbase", "Intarray", "integerArray", "intray", "extArray", "extv", " intarr", "incbase", "interarray", "interArray", "intarr", "interarr", "incarr", "integerarr", "Intray"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n        double W = sc.nextDouble();\\n        double H = sc.nextDouble();\\n        double x = sc.nextDouble();\\n        double y = sc.nextDouble();\\n\\n        double area = W*H/2;\\n        int isMulti = 0;\\n        if (x == W/2 && y == H/2) {\\n            isMulti = 1;\\n        }\\n\\n        System.out.println(String.format(\"%.6f\", area) + \" \" + isMulti);\\n    }\\n\\n}", "target": "182", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "desc", "cs", "cor", "cer", "sf", "ctx", "cli", "cc", "ner", "tc", "sec", "soc", "na", "enc", "loc", "sync", "cr", "osc", "sq", "ec", "lc", "class", "ocr", "cont", "coll", "bc", "sci", "ss", "cus", "cl", "se", "l", "c", "src", "Sc", "asc", "sche", "ct", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "parse", "SC"], "W": ["O", "K", "U", "WD", "w", "MW", "Wi", "DW", "WR", "C", "T", "width", "Wh", "A", "G", "N", "Q", "Weight", "Width", "WC", "World", "AW", "Y", "WF", "CW", "VW", "Z", "NW", "L", "TW", "M", "SW", "GW", "X", "OW", "Area", "We", "WS", "P", "F", "V", "BW", "FW", "SH"], "H": ["K", "U", "E", "I", "HA", "DH", "J", "C", "T", "RH", "FH", "A", "NH", "G", "HP", "N", "HS", "Q", "R", "D", "Y", "Ha", "Z", "B", "L", "M", "h", "X", "HH", "AH", "S", "P", "F", "OH", "HD", "V", "EH", "HY", "HE", "SH", "CH", "HI"], "x": ["xi", "px", "w", "pos", "height", "n", "p", "m", "width", "on", "fx", "wa", "z", "work", "b", "xy", "rx", "data", "ax", "l", "c", "h", "xs", "X", "dx", "xx", "d", "ix", "v", "ex", "f", "o", "i"], "y": ["ch", "w", "height", "ny", "n", "dy", "angle", "p", "ay", "hi", "vy", "j", "oy", "z", "ish", "yy", "b", "ym", "ya", "ky", "Y", "l", "py", "yo", "ey", "h", "zy", "yi", "ty", "v", "ady", "sky", "sy", "cy", "i", "ye"], "area": ["a", " areas", "n", "base", "space", "color", "angle", "p", "region", "oa", "section", "lambda", "alpha", "axis", "part", "appa", "flow", "gap", "A", "quality", "z", "LA", "radius", "Y", "state", "range", "sea", "zone", "SA", "pi", "Area", "scale", "format", "shape", "aa", "f", "as", "array", "zip", "i"], "isMulti": ["areTwo", "areMulti", "hasSingle", "areMultiple", "Ismulti", "isSingle", "hasMultiple", "hasNum", " isNum", "areSingle", "hasMulti", " isMult", "isTwo", "areNum", " isSingle", "hasmulti", "aremulti", "ismulti", "IsMulti", " isTwo", "hasTwo", "isMult", " isMultiple", "asSingle", " ismulti", "asmulti", "asMulti", "isMultiple", "IsSingle", "isNum", "asMult", "IsMult"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        int c = 0;\\n        if (s.substring(0,1).equals(\"1\")) c++;\\n        if (s.substring(1,2).equals(\"1\")) c++;\\n        if (s.substring(2,3).equals(\"1\")) c++;\\n        System.out.println(c);\\n\t}\\n}", "target": "165", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "desc", "cs", "ca", "sub", "cer", "cc", "ner", "sec", "acc", "enc", "r", "osc", "cr", "ec", "lc", "ocr", "bc", "sci", "ss", "proc", "cl", "scope", "se", "src", "Sc", "asc", " SC", "sch", "mc", "scan", "nc", "uc", "sh", "sp", "g", "parser", "SC"], "s": ["fs", "parts", "qs", "is", "w", "si", "n", "string", "aws", "p", "gs", "os", "t", "sync", "sv", "sl", "abs", "ls", "b", "ds", "ins", "in", "sg", "ss", "ws", "lines", "your", "ns", "l", "u", "ses", "e", "su", "ts", "words", "self", "S", "d", "ssl", "str", "es", "json", "f", "services", "plus", "o", "us", "sb", "g", "i", "strings", "spec"], "c": ["pc", "fc", "rc", "cur", "cs", "oc", "n", "code", "p", "C", "ic", "cc", "ac", "tc", "enc", "vc", "t", "z", "ec", "cr", "b", "lc", " C", "cf", "coll", "count", "bc", "xc", "ci", "cache", "l", "dec", "u", "e", "ce", "h", "unc", "ct", "gc", "inc", "d", "v", "dc", "mc", "nc", "uc", "f", "cu", "o", "cy", "g", "i", "k", "col"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint l = sc.nextInt();\\n\t\tint r = sc.nextInt();\\n\\n\t\tlong min = 9999;\\n\\n\t\tfor (long i = l; i < r; i++) {\\n\t\t\tfor (long j = i + 1; j <= r; j++) {\\n\t\t\t\tlong num = (i * j) % 2019;\\n\t\t\t\tif (min > num) {\\n\t\t\t\t\tmin = num;\\n\t\t\t\t\tif (min == 0) {\\n\t\t\t\t\t\tSystem.out.println(min);\\n\t\t\t\t\t\treturn;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(min);\\n\\n\t}\\n\\n}\\n", "target": "193", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "cur", "cs", "ser", "com", "ctx", "cc", "ner", "tc", "soc", "app", "acc", "enc", "cr", "osc", "ec", "sq", "lc", "class", "ocr", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "Sc", "asc", "sche", "sem", "str", " SC", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "SC"], "l": ["n", "p", "lb", "s", "m", "loc", "ln", "t", "z", "b", "lc", "ls", "length", "li", "rl", "L", "u", "c", "e", "h", "lr", "kl", "lin", "la", "dl", "ll", "d", "v", "ol", "len", "f", "nl", "o", "k"], "r": ["nr", "w", "ar", "n", "tr", "p", "sr", "er", "s", "m", "z", "b", "R", "rn", "end", "ir", "q", "u", "c", "e", "h", "x", "rr", "pr", "rh", "ru", "right", "rt", "d", "v", "f", "o", "ur", "k", "rb"], "min": ["MIN", "span", "minimum", "pos", "err", "bin", "n", "value", "version", "name", "p", "unit", "ress", "section", "sol", "diff", "amin", "m", "sort", "low", "sec", "default", "null", "mn", "mini", "skip", "none", "partial", "max", "lower", "rain", "small", "don", "size", "miss", "range", "lock", "sign", "dec", "pri", "Min", "init", "am", "limit", "next", "id", "little", "block", "Mini", "d", "pre", "un", "val", "ng", "len", "key", "div", "stat", "dim", "mins", "start"], "i": ["xi", "I", "io", "si", "n", "di", "p", "ii", "hi", "index", "ni", "z", "ini", "b", "lc", "ai", "in", "ji", "li", "ci", "im", "ir", "zi", "qi", "u", "bi", "ri", "ori", "iu", "eni", "mi", "x", "pi", "ip", "y", "v", "ix", "vi", "f", "ui", "o", "k"], "j": ["w", "pos", "job", "ja", "si", "n", "ie", "J", "p", "m", "jo", "ii", "ij", "ni", "z", "jj", "js", "b", "jl", "ji", "end", "li", "q", "fr", "qi", "u", "oj", "c", "aj", "e", "it", "x", "h", "kj", "adj", "d", "y", "v", "ix", "f", "o", "ui", "g", "k", "jp"], "num": ["nu", "bn", "number", "NUM", "nat", "lim", "um", "bin", "n", "gen", "name", "unit", "umi", "nb", "mom", "na", "loc", "index", "ul", "lit", "mn", "mu", "b", "mon", "prefix", "multi", "obj", "no", "miss", "common", "Num", "node", "u", "fn", "init", "term", "conn", "text", "id", "nom", "inc", "con", "un", "offset", "uni", "f", "net", "col"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint employee = sc.nextInt();\\n\t\tint[] results = new int[employee];\\n\t\tfor (int i = 0; i < employee - 1; i++) {\\n\t\t\tint boss = sc.nextInt();\\n\t\t\tresults[boss - 1]++;\\n\t\t}\\n\t\tsc.close();\\n\t\tfor (int result : results) {\\n\t\t\tSystem.out.println(result);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "12", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "search", "ca", "cer", "sf", "sr", "ctx", "cc", "ner", "tc", "app", "sync", "cr", "osc", "sq", "ec", "lc", "cont", "bc", "sci", "ss", "cl", "scope", "se", "c", "src", "conn", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "parser", "parse", "SC"], "employee": ["EmployEE", "obee", "eedement", "employEE", "obeed", "employement", "organees", "Employey", "Employee", "employment", "employeed", "obey", "organee", "workeed", "employees", "organEE", "Employette", "Employement", "eedment", "employette", "guee", "workees", "eedee", "guees", "obees", "guement", "uppette", "workey", "Employees", "uppees", "gument", "organette", "uppEE", "employey", "Employment", "eedees", "Employeed", "uppee", "workee"], "results": ["res", "vals", "files", "reports", "Results", "blocks", "includes", "vers", "boxes", "places", "packs", "outs", "tests", "ores", "values", "workers", "helps", "rules", "grades", "stats", "success", "ches", "groups", "items", "friends", "measures", "words", "reads", "posts", "jobs", "events", "forms", "roots", "runners", "stores", "pages", "features", "details", "errors", "runs", "RESULTS", "rows"], "i": ["gi", "xi", "I", "io", "si", "ie", "di", "ami", "p", "oi", "ii", "sup", "index", "j", "ni", "ini", "b", "ai", "in", "multi", "ji", "li", "ci", "l", "ri", "u", "bi", "c", "e", "ori", "it", "init", "mi", "pi", "x", "h", "id", "ip", "uri", "v", "ix", "f", "ui", "info", "start", "k"], "boss": ["gross", "icus", "job", "winner", " supervisor", "ress", "unit", "effect", "bot", "worker", "enemy", "slave", "sup", "guard", "cross", "driver", "Boss", "shield", "flower", "keeper", "mot", "usa", "ass", "goal", "opp", "ross", "fall", "pool", "fox", "tackle", "task", "gate", "master", "bus", "pg", "pull", "father", "week"], "result": ["test", "number", "res", "score", "job", "winner", "event", "ner", "grade", "part", "particip", "feature", "product", "r", "default", "counter", "resource", "var", "one", "entry", "view", "class", "response", "obj", "match", "row", "data", "page", "error", "goal", "success", "Result", "type", "id", "successful", "ret", "runner", "info", "card"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint X = sc.nextInt();\\n\t\twhile (!isPrime(X)) {\\n\t\t\tX++;\\n\t\t}\\n\t\tSystem.out.println(X);\\n\t\tsc.close();\\n\t}\\n\\n\t//\u7d20\u6570\u5224\u5b9a\\n\t//\u8a08\u7b97\u91cfO(\u221aN)\\n\tpublic static boolean isPrime(long n) {\\n\t\tif (n == 1) {\\n\t\t\treturn false;\\n\t\t}\\n\t\tfor (long i = 2; i * i <= n; i++) {\\n\t\t\tif (n % i == 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n}", "target": "183", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "cur", "cs", "ca", "cer", "sf", "sr", "cc", "sync", "cr", "sq", "ec", "osc", "system", "lc", "class", "bc", "sci", "ss", "ci", "cl", "scope", "se", "l", "syn", "c", "src", "Sc", "ct", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "server", "anc", "sh", "sp", "sb", "SC"], "X": ["OK", "K", "E", "I", "AX", "FC", "Step", "Sample", "CC", "XXXX", "J", "C", "T", "FF", "Length", "PC", "XL", "CL", "Int", "A", "Max", "IX", "N", "VALUE", "Q", "XX", "DX", "Width", "R", "XY", "Test", "Exp", "XP", "H", "Rex", "Y", "XXX", "Z", "TX", "Cross", "L", "Location", "MX", "M", "x", "JSON", "P", "F", "ID", "V", "IP", "XT", "Code", "PE", "Index"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws NumberFormatException,\\n\t\t\tIOException {\\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(\\n\t\t\t\tSystem.in));\\n\t\tStringBuilder builder = new StringBuilder();\\n\t\tStringTokenizer tokenizer;\\n\t\tint a = Integer.parseInt(reader.readLine());\\n\t\tint n = Integer.parseInt(reader.readLine());\\n\t\tint[] nums = new int[a];\\n\t\tfor (int i = 0; i < a; i++) {\\n\t\t\tnums[i] = i + 1;\\n\t\t}\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ttokenizer = new StringTokenizer(reader.readLine(), \",\");\\n\t\t\tint x = Integer.parseInt(tokenizer.nextToken()) - 1;\\n\t\t\tint y = Integer.parseInt(tokenizer.nextToken()) - 1;\\n\t\t\tint tmp = nums[x];\\n\t\t\tnums[x] = nums[y];\\n\t\t\tnums[y] = tmp;\\n\t\t}\\n\t\tfor (int i = 0; i < a; i++) {\\n\t\t\tbuilder.append(nums[i]).append('\\n');\\n\t\t}\\n\t\tSystem.out.print(builder);\\n\\n\t}\\n\\n}", "target": "156", "substitutes": {"reader": ["per", " Reader", "io", "re", "kernel", "handler", "parser", "upper", "bb", "er", "ner", "loader", "worker", "rar", "folder", "http", "player", "r", "driver", "magic", "system", "report", "b", "writer", "reading", "in", "rer", "inner", "rx", "keeper", "input", "context", "bird", "row", "machine", "read", "l", "layer", "stream", "ruby", "editor", "out", "rr", "database", "oder", "Reader", "ler", "right", "ger", "slice", "feed", "buffer", "f", "server", "hello", "iter", "rb"], "builder": ["job", "handler", "string", "base", "upper", "er", "board", "result", "r", "driver", "utils", "this", "build", "b", "builders", "atter", "writer", "manager", "url", "inner", "keeper", "office", "row", "iter", "instance", "layer", "wrapper", "editor", "Builder", "or", "oder", "built", "square", "block", "building", "db", "v", "message", "buffer", "f", "runner", "sb", "info", "array", "parser"], "tokenizer": ["Tokenize", "Tokenization", "okenizer", "okeniter", "Tokener", " tokenner", "tokener", "okener", "equaliter", "Tokenizer", "Tokenator", "tokenize", " tokenize", "okenization", "okeniser", "tokenization", "equalize", "Tokeniser", "tokeniser", " tokeniser", "equaliser", "Tokeniter", "tokeniter", "okenize", "tokenner", "Tokenner", "tokenator", " tokenator", "equalizer", "okenner", " tokenization", " tokener", "okenator"], "a": ["w", "fa", "ca", "p", "oa", "s", "alpha", "ac", "m", "aaa", "na", "wa", "index", "ada", "A", "sa", "ea", "z", "an", "ab", "b", "ai", "count", "ae", "ba", "all", "l", "aj", "u", "c", "e", "am", "h", "area", "la", "asa", "d", "va", "za", "aa", "f", "as", "array", "au", "k"], "n": ["network", "number", "w", "ny", "p", "s", "m", "nt", "j", "t", "z", "an", "b", "N", "in", "nn", "no", "ns", "l", "u", "en", "c", "e", "h", "d", "v", "f", "o", "net", "k"], "nums": ["cumbers", "cubs", " nules", "nubes", "unups", "unum", "kums", "Numbers", "cules", "unules", "Nubs", "kumbers", "cums", "nubs", "numpy", "cubes", "kubes", " num", " nubes", "numps", "cum", " numps", "Numpy", "nules", "Num", "num", "nups", " nubs", "cups", "cumpy", "numbers", "Nums", "Numps", "unums", "cumps", " nups", "kules", " numpy", " numbers"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "p", "oi", "abi", "ii", "hi", "part", "sup", "index", "j", "chi", "ni", "z", "ini", "mu", "b", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "data", "ik", "inner", "zi", "ri", "qi", "u", "bi", "c", "e", "init", "iu", "it", "eni", "mi", "pi", "ori", "fi", "yi", "my", "id", "ip", "uri", "ix", "v", "api", "vi", "key", "ui", "info"], "x": ["xi", "w", "pos", "xe", "p", "m", "index", "t", "qa", "z", "one", "work", "b", "xc", "xy", "rx", "ax", "q", "l", "u", "num", "c", "en", "e", "my", "xa", "h", "xs", "X", "dx", "xx", "id", "d", "v", "ix", "xxx", "ex", "f", "o"], "y": ["w", "ny", "ie", "dy", "p", "ay", "s", "yr", "m", "ii", "j", "vy", "t", "oy", "z", "yy", "b", "ya", "ky", "Y", "l", "py", "u", "sys", "ey", "e", "yt", "h", "yi", "zy", "xx", "id", "ty", "d", "ry", "isy", "v", "f", "o"], "tmp": ["wx", " param", "xb", "img", "qq", "nb", "alpha", "nt", " beta", "sup", "txt", "yy", "xxxx", "mp", " temp", " temporary", "kk", "mmm", "proc", "obj", " np", "cmp", "xxxxxxxx", "py", "fb", "np", "area", "su", "ff", "vt", "option", "pp", "xxx", "beta", "amp", "mm", "cp", "zip", "temp", "stuff", "pad", "rb"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint a[] = new int[114514];\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[i] = scan.nextInt();\\n\t\t}\\n\t\t\\n\t\tint q = scan.nextInt();\\n\t\tint ans = 0;\\n\t\tfor (int i=0; i<q; i++) {\\n\t\t\tint key = scan.nextInt();\\n\t\t\tint ng = -1; int ok = n;\\n\t\t\twhile (Math.abs(ok-ng) > 1) {\\n\t\t\t\tint mid = (ok+ng)/2;\\n\t\t\t\tif (a[mid] >= key) ok = mid;\\n\t\t\t\telse ng = mid;\\n\t\t\t}\\n\t\t\tif (a[ok]==key) ans++;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n\\n\\n", "target": "138", "substitutes": {"scan": ["run", "pan", "re", "get", "search", "gen", "ser", "sr", "er", "see", "connect", "query", "ner", "yan", "log", "sc", "man", "na", "serv", "r", "skip", "sync", "system", "an", "ann", "fan", "in", "nn", "row", "sign", "san", "read", "bug", "se", "sys", "l", "en", "conn", "plan", "can", "out", "cat", "look", "ry", "slice", "clean", "server", "Scan", "spin", "watch", "ignore", "reader", "stat", "parser", "parse", "con"], "n": ["network", "w", "p", "s", "nb", "m", "nt", "ne", "j", "r", "index", "t", "z", "an", "b", "N", "max", "in", "rn", "nn", "no", "all", "ns", "l", "u", "num", "c", "en", "e", "x", "d", "un", "y", "v", "nc", "f", "o", "net", "g", "k"], "a": ["tta", "access", "sta", "ants", "w", "ga", "ca", "base", "p", "aura", "aaa", "ac", "alpha", "s", "m", "na", "wa", "ao", "sa", "A", "ana", "ea", "ma", "qa", "an", "ab", "b", "ae", "ba", "ata", "all", "pa", "da", "aj", "u", "c", "e", "area", "am", "la", "va", "y", "aa", "f", "as", "array", "ama", "au"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "oi", "ii", "hi", "index", "chi", "j", "ki", "ni", "z", "ini", "b", "ind", "ai", "in", "phi", "li", "ci", "ti", "ik", "ri", "qi", "u", "bi", "c", "l", "e", "init", "iu", "it", "my", "mi", "x", "pi", "id", "ip", "uri", "d", "y", "ix", "v", "f", "ui", "o", "info", "start", "k"], "q": ["qs", "ch", "w", "p", "qq", "query", "m", "j", "z", "sq", "max", "qu", "Q", "iq", "in", "count", "ns", "qi", "u", "c", "x", "h", "id", "d", "qt", "y", "v", "f", "o", "g", "k"], "ans": ["annis", "results", "ks", "ants", "ations", "ms", "cs", "nz", "blocks", "AN", "errors", "ops", "lan", "s", "ros", "nt", "amps", "na", "ents", "os", "nan", "ens", "ANS", "ase", "ana", "aid", "outs", "an", "sk", "ann", "ars", "ins", "ai", "nas", "ss", "leans", "cas", "nn", "ians", "ns", "ases", "can", "ats", "eps", "ids", "es", "ions", "aned", "ons", "anc", "features", " scans", "ays", "runs", "rows"], "key": ["ask", "ks", "ro", "ak", "code", "req", "Key", "index", "loc", "ki", "ek", "sk", "max", "ck", "ind", "kk", "ke", "keys", "no", "row", "ik", "ky", "error", "king", "my", "x", "next", "kw", "id", "ip", "ry", "y", "kid", "ack", "ko", "o", "ink", "k"], "ng": ["ig", "nr", "NG", "big", "ms", "gen", "low", "nt", "ning", "nor", "hi", "na", "thing", "loc", "index", "lang", "ne", "os", "mn", "ong", "ind", "max", "ai", "ck", "rand", "ping", "no", "row", "king", "sam", "win", "nd", "ing", "my", "ick", "next", "id", "inc", "gin", "ring", "nc", "ang", "md", "nce", "k", "nz"], "ok": ["OK", "ask", "yes", "nr", "oko", "kr", "ks", "ro", "ak", "big", "ms", "gen", "oc", "cor", "oa", "oks", "nt", "req", "loc", "index", "os", "wk", "mn", "nice", "sync", "ek", "sk", "ind", "Ok", "ck", "coll", "kk", "kind", "ku", "error", "no", "row", "way", "ob", "nd", "bug", "good", "ori", "ick", "next", "id", "kid", "od", "off", "ko", "nc", "ack", "ang", "o", "kg", "ready", "md", "info", "k", "nz"], "mid": ["pid", "lim", "pos", "mit", "ms", "sub", "ra", " Mid", "mode", "line", "middle", "diff", "low", "hi", "part", "mate", "aid", "mini", "one", "medium", "entry", "ind", "max", "doc", "start", "mo", "rand", "end", "multi", "map", "no", "rid", "small", "mr", "min", "way", "nd", "large", "py", "micro", "mi", "next", "dev", "id", "la", "grid", "field", "Mid", "bid", "reg", "md", "net", "mm", "seq", "co"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        MyScanner sc = new MyScanner();\\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\\n        String s = sc.next();\\n        int ans = 0; int run = 0;\\n        for (int i = 0; i < 3; i++) {\\n            if (s.charAt(i) == 'R') {\\n                run++;\\n            } else {\\n                ans = Math.max(ans, run);\\n              \trun = 0;\\n            }\\n        }\\n        ans = Math.max(ans, run);\\n        out.println(ans);\\n        out.close();\\n    }\\n\\n\\n    //-----------MyScanner class for faster input----------\\n    public static class MyScanner {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public MyScanner() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n\\n\\n    }\\n\\n}", "target": "141", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "search", "sub", "ca", "cer", "screen", "cc", "ner", "sec", "system", "cr", "osc", "lc", "bc", "sci", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC", "spec"], "out": ["Out", "a", "exec", "list", "parent", "io", "w", "client", "window", "err", "bin", "string", "name", "screen", "line", "group", "output", "write", "result", "log", "user", "home", "app", "r", "channel", "this", "system", "outs", "report", "copy", "config", "writer", "image", "in", "input", "inner", "error", "data", "cache", "scope", "outer", "pool", "ext", "process", "next", "str", "OUT", "path", "again", "buffer", "ex", "console", "scan", "connection", "o", "auto", "up", "temp", "call", "IN"], "s": ["is", "w", "params", "si", "n", "string", "aws", "p", "m", "os", "r", "sv", "ls", "b", "ins", "in", "input", "ss", "ws", "stats", "ns", "l", "u", "groups", "c", "ses", "e", "su", "states", "S", "str", "v", "f", "services", "as", "o", "features", "sb", "g", "strings", "rows"], "ans": ["a", "span", "results", "except", "ants", "pos", "cons", "params", "cs", "blocks", "AN", "lan", "na", "arts", "os", "ANS", "cross", "anas", "ran", "ana", "anges", "outs", "an", "ann", "ars", "olds", "ds", "ins", "lines", "ss", "atan", "cas", "rules", "nn", "actions", "anned", "ians", "nas", "ns", "works", "groups", "plan", "can", "x", " runs", "words", "reads", "alls", "eps", "ats", "aus", "ids", "ions", "names", "aned", "scan", "anc", "as", "features", "han", "anks", " scans", "ays", "runs", "ras", "rows"], "run": ["regular", "ram", "old", "pos", "running", "ra", "rank", "n", "raw", "name", "fun", "unit", "race", "sort", "Run", "route", "man", "index", "pass", "r", "ran", "skip", "one", "an", "work", "model", "ann", "max", "length", "order", "play", "don", "row", "use", "nn", "range", "win", "min", "read", "num", "type", "id", "ru", "block", "un", "len", "clean", "scan", "dir", "add", "runner", "array", "une", "call", "runs", "rows"], "i": ["gi", "xi", "I", "io", "si", "n", "di", "p", "oi", "ii", "hi", "part", "index", "chi", "j", "ni", "z", "ini", "ai", "in", "multi", "ji", "li", "ci", "zi", "ri", "qi", "u", "bi", "l", "ori", "eni", "mi", "x", "pi", "id", "ip", "uri", "v", "slice", "ix", "vi", "f", "ui", "info", "start"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n public static void main(String args[]) {\\n   Scanner sc = new Scanner(System.in);\\n   int n = sc.nextInt();\\n   char[] nChar = String.valueOf(n).toCharArray();\\n   int sn = 0;\\n   for (int i = 0; i < nChar.length; i++) {\\n          sn += Integer.parseInt(String.valueOf(nChar[i]));\\n   }\\n   if(n % sn == 0) {\\n      System.out.println(\"Yes\");\\n      return;\\n   } \\n   System.out.println(\"No\");\\n }\\n}", "target": "195", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "cur", "desc", "cs", "ca", "sub", "com", "cc", "ner", "nt", "sec", "na", "acc", "enc", "sync", "system", "osc", "cr", "sq", "ec", "lc", " scr", "bc", "sci", "ss", "ci", "scope", "se", "c", "src", "Sc", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "n": ["missing", "network", "nu", "number", "nr", "Ns", "name", "p", "s", "nb", "nt", "m", "cn", "nan", "ne", "j", "ln", "t", "sync", "b", "N", "in", "pn", "rn", "nn", "size", "normal", "ns", "l", "u", "num", "c", "fn", "conn", "np", "dn", "d", "len", "nc", "f", "o", "nl", "k", "norm"], "nChar": ["cCharacter", "nCor", " nExt", "NExt", "nExt", "NCh", "nbCharacter", "cCat", "nArray", " nCor", "NCharacter", "nbCh", "nbChar", "nbArray", "cCor", " nCat", " nCh", "nCh", "cChar", "NCor", "cCh", "nsCharacter", "NCat", "nCat", " nCharacter", "nsArray", "NChar", "cExt", "nCharacter", "nsChar", "nsCh", " nArray"], "sn": ["nu", "span", "kn", "number", "sw", "pos", "ny", "si", "oss", "wn", "p", "sr", "nt", "cn", "ii", "loc", "SN", "ln", "ni", "sv", "sl", "sk", "lc", "eno", "coll", "ss", "li", "nn", "size", "no", "zi", "syn", "num", "fn", "eni", "su", "unc", "sm", "ll", "Sn", "len", "scan", "nc", "oln", "nl", "sp", "sh", "sd", "inn"], "i": ["xi", "gi", "I", "io", "si", "di", "p", "oi", "m", "abi", "ii", "hi", "chi", "j", "r", "pass", "ni", "z", "ini", "mu", "b", "lc", "ai", "phi", "ji", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "l", "e", "eni", "x", "pi", "h", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "slice", "vi", "f", "ui", "o"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tList<Integer> list=new ArrayList<Integer>();\\n\t\tint c=1000;\\n\t\twhile(c>0) {\\n\t\t\tif(n>=c) {\\n\t\t\t    list.add(n/c);\\n\t\t\t}else {\\n\t\t\t\tlist.add(0);\\n\t\t\t}\\n\t\t\tn%=c;\\n\t\t\tc/=10;\\n\t\t}\\n\\n\\n\t\tfor(int i=0;i<=7;i++) {\\n\t\t\tString s=Integer.toBinaryString(i);\\n\\n\t\t\tint a=Integer.valueOf(s);\\n\t\t\tString b=String.format(\"%03d\",a);\\n\t\t\t;\\n\t\t\tchar[] e=b.toCharArray();\\n\t\t\tint k=keisan(list,e);\\n\t\t\tif(k==7) {\\n\t\t\t\te[0]=(e[0]=='1')?'+':'-';\\n\t\t\t\te[1]=(e[1]=='1')?'+':'-';\\n\t\t\t\te[2]=(e[2]=='1')?'+':'-';\\n\t\t\t\tfor(int j=0;j<3;j++) {\\n\t\t\t\t\tSystem.out.print(list.get(j));\\n\t\t\t\t\tSystem.out.print(e[j]);\\n\t\t\t\t}\\n\t\t\t\tSystem.out.print(list.get(3)+\"=7\");\\n\t\t\t\tbreak;\\n\t\t\t}\\n\\n\\n\t\t}\\n\\n\\n\\n\t}\\n\\n\tpublic static int keisan(List<Integer> list,char[] e) {\\n\t\tint k=list.get(0);\\n\t\tif(e[0]=='1') {\\n\t\t\tk+=list.get(1);\\n\t\t}else {\\n\t\t\tk-=list.get(1);\\n\t\t}\\n\t\tif(e[1]=='1') {\\n\t\t\tk+=list.get(2);\\n\t\t}else {\\n\t\t\tk-=list.get(2);\\n\t\t}\\n\t\tif(e[2]=='1') {\\n\t\t\tk+=list.get(3);\\n\t\t}else {\\n\t\t\tk-=list.get(3);\\n\t\t}\\n\t\treturn k;\\n\\n\t}\\n\\n\\n\\n}\\n", "target": "152", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "ca", "sub", "cc", "ner", "nt", "sec", "acc", "sync", "system", "osc", "sq", "cr", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "Sc", "asc", "sem", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "n": ["nu", "w", "p", "nb", "ac", "cn", "nt", "m", "ne", "r", "t", "z", "sn", "N", "in", "count", "ci", "size", "ns", "l", "u", "num", "en", "conn", "x", "d", "un", "y", "v", "nc", "f", "o", "net", "con"], "list": ["old", "get", "word", "see", "low", "user", "le", "null", "sync", "system", "pair", "entry", "queue", "tree", "coll", "data", "pe", "stack", "full", "join", "keep", "left", "pre", "str", "array", "view", "call", "we", "bl", "chain", "table", "live", "form", "base", "string", "p", "line", "cli", "result", "log", "lc", "cont", "li", "lists", "and", "can", "out", "add", "test", "load", "code", "com", "loop", "m", "fail", "this", "que", "all", "object", "range", "q", "state", "cl", "l", "se", "x", "self", "la", "server", "LIST", "wx", "parent", "the", "client", "set", "diff", "batch", "default", "none", "z", "st", "el", "lp", "L", "listed", "source", "right", "d", "ll", "v", "key", "f", "record", "parse"], "c": ["ch", "col", "cs", "code", "p", "C", "ac", "cc", "m", "cn", "r", "t", "cr", "z", "ec", "lc", "max", "cf", "count", "ci", "size", "cm", "l", "u", "ce", "x", "h", "ct", "d", "v", "dc", "nc", "f", "cu", "cy", "con"], "i": ["xi", "gi", "I", "is", "io", "si", "di", "ie", "m", "ii", "hi", "index", "ni", "ini", "ai", "in", "phi", "li", "ci", "ti", "ik", "ri", "qi", "u", "bi", "iu", "mi", "h", "pi", "fi", "id", "ip", "uri", "d", "ix", "slice", "v", "f", "ui", "info"], "s": ["is", "si", "string", "rs", "p", "m", "gs", "r", "sa", "sq", "ls", "ds", "in", "lines", "ss", "ns", "l", "u", "ses", "bs", "h", "su", "bis", "xs", "S", "d", "str", "v", "es", "f", "as", "o", "sb", "g", "seconds", "strings"], "a": ["sta", "sha", "ar", "ga", "ca", "au", "p", "oa", "alpha", "ia", "na", "A", "sa", "ea", "z", "ma", "an", "ab", "ai", "aux", "ba", "pa", "da", "l", "am", "x", "area", "d", "y", "va", "aa", "f", "as", "o", "array"], "b": ["w", "xb", "string", "bb", "gb", "p", "nb", "buff", "r", "abb", "wb", "bp", "ab", "pb", "ba", "ob", "B", "l", "bi", "fb", "bs", "out", "h", "bt", "d", "bh", "y", "db", "v", "es", "f", "o", "sb", "g", "orb", "cb", "be", "rb"], "e": ["E", "ei", "ee", "oe", "xe", "ie", "p", "line", "er", "see", "event", "m", "ne", "r", "le", "ea", "ue", "note", "none", "ed", "ec", "est", "one", "fe", "ge", "entry", "ae", "edge", "end", "error", "entity", "pe", "object", "el", "l", "se", "u", "en", "eve", "ile", "esi", "ce", "h", "eu", "x", "ele", "element", "body", "d", "je", "y", "v", "es", "ev", "enter", "f", "elect", "o", "be", "g", "ze"], "k": ["K", "ask", "ks", "ch", "w", "ak", "p", "unk", "mk", "m", "r", "kh", "ki", "sync", "z", "km", "work", "sk", "ek", "max", "ck", "kk", "ke", "ku", "ky", "ik", "kat", "q", "ijk", "l", "u", "it", "h", "x", "dk", "kl", "kw", "id", "d", "kb", "pp", "y", "kid", "v", "kick", "key", "ko", "ok", "f", "o", "g", "check"], "j": ["bj", "br", "job", "ja", "op", "err", "jc", "ie", "J", "p", "section", "m", "jo", "ii", "part", "ij", "index", "jet", "z", "js", "jj", "byn", "jl", "rel", "ji", "li", "obj", "im", "q", "fr", "el", "syn", "l", "aj", "py", "oj", "num", "out", "pr", "adj", "uj", "d", "jit", "y", "str", "v", "je", "key", "o", "g", "jp"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\nimport java.util.Scanner;\\nimport java.math.BigInteger;\\n   \\npublic class Main {\\n\tstatic final long mod = (int)(1e9+7);\\n\tstatic final int inf=(int)(1e9);\\n\tstatic final int maxn=(int)(1e5+10);\\n\tstatic long ksm(long a,long b) {\\n\t\tlong ret=1;\\n\t\twhile(b!=0) {\\n\t\t\tif(b%2==1) {\\n\t\t\t\tret=ret*a%mod;\\n\t\t\t}\\n\t\t\tb>>=1;\\n\t\t\ta=a*a%mod;\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tpublic static void main(String[] args) {\\n    \tScanner cin=new Scanner(System.in);\\n    \tString s=cin.next();\\n    \tint len=s.length();\\n    \tint cnt=0,ans=0;\\n    \tfor(int i=0;i<len;i++) {\\n    \t\tif(s.charAt(i)=='A'||s.charAt(i)=='C'||s.charAt(i)=='G'||s.charAt(i)=='T') {\\n    \t\t\tcnt++;\\n    \t\t}else {\\n    \t\t\tcnt=0;\\n    \t\t}\\n    \t\tans=Math.max(ans, cnt);\\n    \t}\\n    \tSystem.out.println(ans);\\n    }\\n}", "target": "100", "substitutes": {"mod": ["mag", "sub", "form", "base", "mult", "step", "mode", "fun", "section", "delay", "diff", "grad", "sec", "m", "exp", "log", "loop", "low", "mut", "ment", "max", "lib", "post", "comp", "row", "cmp", "lock", "bug", "dec", "aj", "MOD", "ow", "norm", "mods", "Mod", "sem", "module", "id", "scale", "rad", "d", "odd", "od", "cond", "off", "orig", "div", "add", "f", "md", "pad", "ver"], "inf": ["rc", "ref", "diff", "exp", "log", "acc", "sup", "abb", "abs", "ab", "Inf", "bar", "std", "conf", "rec", "opt", "bug", "frac", "init", "aug", "inc", "bf", "abc", "auto", "ignore", "info", "iter"], "maxn": ["maxN", "minn", "minp", "maxp", "MaxN", " maxp", "mind", "minN", "Maxn", " maxd", "Maxd", "Maxp", "maxd", " maxN"], "a": ["fa", "ga", "ar", "ca", "n", "au", "p", "ac", "alpha", "m", "aaa", "r", "A", "sa", "j", "z", "an", "ab", "ai", "ae", "ba", "da", "l", "aj", "u", "aw", "c", "e", "af", "am", "x", "next", "d", "art", "y", "offset", "aa", "f", "k", "as", "g", "ad"], "b": ["bin", "n", "bb", "p", "nb", "lb", "m", "eb", "r", "abb", "t", "ab", "ib", "pb", "ba", "obj", "ob", "B", "l", "u", "bi", "c", "e", "fb", "binary", "bs", "x", "next", "d", "y", "v", "beta", "buffer", "bf", "f", "sb", "g", "ad", "rb"], "ret": ["prev", "rc", "re", "arg", "ref", "fun", "result", "Ret", "nt", "rev", "r", "sa", "t", "abs", "ab", "ib", "rets", "max", "aux", "bc", "end", "opt", "al", "def", "num", "success", "ad", "af", "ext", "x", "bis", "auth", "bit", "next", "cat", "id", "alt", "rt", "val", "continue", "offset", "RET", "back", "bf", "reply", "f", "abc", "active", "reg", "g", "cb", "flag"], "cin": ["pc", "cs", "cer", "jc", "cn", "cia", "chi", "cit", "vc", "ini", "lc", "in", "xc", "kin", "circ", "cas", "ci", "sin", "cus", "vin", " cis", "arc", "win", "se", "sys", "zi", "c", "ce", "cgi", "lin", "tin", "zin", "rys", "cos", "mc", "cci", "scan", "arin", "cu", "asin", "cy", "con"], "s": ["hs", "qs", "res", "is", "cs", "si", "n", "string", "rs", "p", "sym", "gs", "os", "r", "http", "sv", "sl", "abs", "js", "ls", "ds", "ins", "tests", "in", "lines", "ss", "ws", "its", "sin", "ns", "l", "sys", "u", "c", "ses", "e", "su", "bis", "xs", "ts", "words", "source", "S", "ssl", "ps", "str", "es", "f", "as", "o", "stat", "sb", "g", "times", "rows", "strings", "spec"], "len": ["list", "lim", "n", "dy", "lan", "Len", "line", "ner", "nt", "part", "pl", "fin", "loc", "le", "ln", "z", "lc", "ld", "length", "end", "li", "lock", "lt", "l", "lp", "en", "lon", "fn", "lin", "vl", "dl", "ll", "lf", "nl", "bl"], "cnt": [" ccount", "Cnt", "pcrt", "tNT", "lcct", "pccount", "tnet", "lcrt", "tct", "cct", "Cno", "counter", "cno", "lcount", "pcnt", "pcct", " count", "pcount", "CNT", " cwd", "lccount", "count", " cNT", "pcounter", "lcounter", " cno", "cwd", "lcno", "Cct", " counter", "lcwd", "cnet", "tnt", " cct", "Cwd", " crt", " cnet", "crt", "cNT", "lcnt", "ccount", "Cnet"], "ans": ["yrs", "ks", "ants", "cons", "cs", "AN", "lan", "errors", "anon", "vers", "amps", "offs", "na", "ents", "ANS", "os", "anas", "ana", "anges", "an", "sk", "ann", "ars", "ls", "ds", "ins", "atan", "ss", "cas", "leans", "aning", "san", "ns", "anes", "can", "ams", "urs", "ats", "eps", "aus", "ids", "ions", "photos", "aned", "ons", "anc", "ays", "nas", "ras"], "i": ["gi", "xi", "I", "is", "io", "si", "ie", "di", "string", "name", "p", "oi", "ii", "hi", "index", "j", "t", "ni", "z", "ini", "isi", "ai", "in", "phi", "multi", "inner", "li", "ti", "ci", "data", "ji", "zi", "ri", "qi", "u", "bi", "c", "e", "ori", "iu", "it", "type", "mi", "pi", "x", "id", "ip", "uri", "v", "ix", "f", "ui", "info"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args)throws Exception {\\n\\n\t    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t    String line = br.readLine();\\n\t    //\u6587\u5b57\u5217\u306b\u5148\u982d\u53c8\u306f\u6700\u5f8c\u306b\u7a7a\u767d\u6587\u5b57\u304c\u304f\u3063\u4ed8\u3044\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u5168\u3066\u53d6\u308a\u9664\u304d\u307e\u3059\u3002\\n\t    line = line.trim();\\n\t    //\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3092\u533a\u5207\u308a\u6587\u5b57\u3068\u3057\u3066\u6271\u3046\\n\t    String[] readLineArray = line.split(\"[\\\\s+]\");\\n\t    //\u5909\u6570\u306b\u914d\u5217\u3092\u4ee3\u5165\\n\t    int count = 0;\\n\t    int a = Integer.parseInt(readLineArray[0]);\\n\t    int b = Integer.parseInt(readLineArray[1]);\\n\t    int c = Integer.parseInt(readLineArray[2]);\\n\t    for (int i = a;i<=b;i++){\\n\t    \tif(c%i ==0){\\n\t    \t\tcount++;\\n\t    \t}\\n\t    }\\n\t    System.out.println(count);\\n\t}\\n\\n}", "target": "190", "substitutes": {"br": [" Br", "io", "err", "Br", "ar", "bb", "tr", "sr", "buf", "er", "yr", "bd", "ner", "BR", "r", "browser", "cr", "arr", "b", "gr", "bar", "ibr", "ocr", "bc", "obj", "mr", "fr", "HR", "bs", "bridge", "ber", "bro", "Reader", "ler", "str", "db", "hr", "bf", "div", "reader", "cb", "iter", "wr", "rb"], "line": ["Line", "file", "status", "err", "base", "name", "output", "header", "result", "log", "response", "lines", "url", "obj", "data", "page", "cl", "l", "text", "lin", "source", "block", "body", "content", "str", "message", "buffer", "f"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tint[] data = new int[10];\\n\t\tfinal String BR = System.getProperty(\"line.separator\");\\n\t\tint first = 0, second = 0, third = 0;\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tfor (int i = 0; i < 10; i++) {\\n\t\t\tdata[i] = Integer.parseInt(in.readLine());\\n\t\t}\\n\t\tfor (int datum : data) {\\n\t\t\tint temp1 = 0, temp2 = 0;\\n\t\t\tfor (int j = 1; j <= 3; j++) {\\n\t\t\t\tif (first < datum) {\\n\t\t\t\t\ttemp1 = first;\\n\t\t\t\t\ttemp2 = second;\\n\t\t\t\t\tfirst = datum;\\n\t\t\t\t\tsecond = temp1;\\n\t\t\t\t\tthird = temp2;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tif (second < datum) {\\n\t\t\t\t\ttemp2 = second;\\n\t\t\t\t\tsecond = datum;\\n\t\t\t\t\tthird = temp2;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tif (third < datum) {\\n\t\t\t\t\tthird = datum;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(first + BR + second + BR + third);\\n\t}\\n}", "target": "164", "substitutes": {"data": ["a", "list", "number", "results", "pos", "code", "output", "alpha", "result", "batch", "breaks", "index", "memory", "arr", "empty", "response", "values", "length", "count", "input", "lines", "multi", "split", "map", "size", "no", "multiple", "last", "next", "body", "content", "style", "left", "str", "format", "DATA", "api", "buffer", "div", "dat", "array", "info", "start", "pad"], "BR": ["RL", "br", "BT", "Br", "LINE", "RGB", "string", "AB", "KR", "CR", "line", "LE", "GR", "BE", "CL", "SB", "R", "BC", "prefix", "MR", "FR", "RB", "B", "DB", "TR", "HTML", "HR", "TH", "LR", "SR", "PER", "RE", "IE", "UR", "PL", "str", "DATA", "VC", "REL", "DR", "BB", "RR", "URL", "FIR", "BL", "CHAR", "BER", "STR", "BM", "CM", "BRE"], "first": ["prev", "th", "a", "parent", "initial", "value", "star", "space", "name", "p", "header", "alpha", "same", "part", "this", "primary", "one", "st", "minute", "leading", "length", "only", "count", "now", "split", "First", "fourth", "min", "central", "full", "top", "other", "last", "head", "next", "self", "standard", "right", "left", "front", "fifth", "before", "again", "latest", "back", "current", "then", "f", "start", "middle"], "second": ["member", "secret", "soft", "unit", "section", "Second", "sort", "two", "sec", "low", "ii", "part", "company", "after", "south", "leading", "later", "video", "both", "six", "lower", "foreign", "small", "size", "fourth", "common", "central", "extra", "between", "another", "secondary", "other", "term", "last", "zone", "next", "global", "standard", "division", "father", "left", "front", "fifth", "alt", "again", "latest", "billion", "beta", "them", "server", "seconds", "future", "middle"], "third": ["th", "missing", "td", "dd", "critical", "quarter", "cell", "deep", "also", "star", "ultimate", "step", "through", "diff", "alpha", "same", "fred", "part", "sup", "default", "Three", "digit", "primary", "shared", "entry", "modified", "thirds", "contained", "component", "fourth", "instance", "way", "central", "def", "nd", "extra", "secondary", "half", "last", "sometimes", "Third", "three", "division", "right", "standard", "fifth", "column", "argument", "back", " Third", "div", "array", "important", "stage", "rd", "middle", "card"], "in": ["a", "exec", "din", "fac", "re", "is", "client", "err", "In", "bin", "s", "cli", "socket", "user", "log", "part", "serv", "r", "inn", "this", "resource", "ini", "b", "doc", "ins", "rin", "input", "inner", "readable", "rec", "kin", "win", "min", "read", "l", "c", "stream", "init", "out", "h", "lin", "id", "inc", "ssl", "gin", "again", "nin", "login", "isin", "buffer", "ex", "connection", "f", "as", "reader", "IN", "con"], "i": ["xi", "gi", "I", "is", "io", "si", "di", "oi", "m", "abi", "ii", "hi", "index", "t", "ni", "uli", "z", "ini", "b", "lc", "ai", "phi", "multi", "ji", "li", "ci", "ti", "ri", "qi", "u", "bi", "l", "init", "iu", "it", "mi", "pi", "fi", "id", "ip", "uri", "y", "v", "api", "f", "ui", "info", "start"], "datum": [" datums", "batumption", "latums", "datom", "catpace", "catumb", "assUM", "intetime", " datumb", "datrum", "datumption", "assum", "Datrum", " datumo", "datumer", "variumm", "Datumption", "quantumer", " datnum", "catum", "quantumption", " datpace", "dateumer", "batnum", "assumb", "intrum", " datetime", "assumption", "latum", "variumption", "batum", " datom", "batenum", "batrum", "variumo", "datumm", "datums", "Datenum", "dateumption", "Datetime", "datepace", "quantumb", " datrum", "Datumb", "dateumb", "datenum", "dateom", " datumption", "varium", "datumo", "catom", "batUM", "indumm", "indum", "dateum", "Datum", "Datumeric", "batumb", "datUM", "datpace", " datumeric", "latnum", "datumb", "intnum", "indumo", "datumeric", " datumm", "datetime", " datenum", " datUM", "Datums", "Datnum", "datnum", "latumeric", "Datumer", "quantum", "indumption", "intum"], "temp1": [" temp0", "temp3", "Temp1", "caseone", "temp0", "fake0", "tempone", "Temp2", "Temp0", "Tempone", "fake2", "case3", "case2", " temp3", "case1", "Temp3", "fake3", "fake1", " tempone", "case0"], "temp2": ["variabletwo", "variable1", "Temp4", "itertwo", " temptwo", "lat5", " tempSecond", "iter62", "const62", "Temp1", "latSecond", "const1", "consttwo", "lat1", " temp62", "mixsecond", "tem2", "variablesecond", "temp4", "mixtwo", "temp62", "tempsecond", " tempsecond", "Temp2", "tempSecond", "temptwo", "mix1", "iter1", "variable2", "cache4", "const2", "temSecond", "Temptwo", " temp4", "lat2", "tem1", " temp5", "case4", "cache2", "case1", "mix2", "iter2", "temp5", "casetwo", "tem5", "cachetwo", "case2", "cache1"], "j": ["th", "br", "ja", "n", "jc", "ie", "J", "p", "section", "m", "jo", "ii", "part", "ij", "z", "jj", "js", "b", "jl", "ji", "end", "li", "obj", "l", "aj", "u", "c", "it", "x", "adj", "left", "d", "v", "key", "f", "g", "k", "jp"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.InputMismatchException;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tstatic PrintWriter out;\\n\tstatic InputReader ir;\\n\tstatic long[] f, fi;\\n\\n\tstatic void solve() {\\n\t\tint n = ir.nextInt();\\n\t\tint a = ir.nextInt();\\n\t\tint b = ir.nextInt();\\n\t\tout.println((int) Math.min(n * a, b));\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tir = new InputReader(System.in);\\n\t\tout = new PrintWriter(System.out);\\n\t\tsolve();\\n\t\tout.flush();\\n\t}\\n\\n\tstatic class InputReader {\\n\\n\t\tprivate InputStream in;\\n\t\tprivate byte[] buffer = new byte[1024];\\n\t\tprivate int curbuf;\\n\t\tprivate int lenbuf;\\n\\n\t\tpublic InputReader(InputStream in) {\\n\t\t\tthis.in = in;\\n\t\t\tthis.curbuf = this.lenbuf = 0;\\n\t\t}\\n\\n\t\tpublic boolean hasNextByte() {\\n\t\t\tif (curbuf >= lenbuf) {\\n\t\t\t\tcurbuf = 0;\\n\t\t\t\ttry {\\n\t\t\t\t\tlenbuf = in.read(buffer);\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\t}\\n\t\t\t\tif (lenbuf <= 0)\\n\t\t\t\t\treturn false;\\n\t\t\t}\\n\t\t\treturn true;\\n\t\t}\\n\\n\t\tprivate int readByte() {\\n\t\t\tif (hasNextByte())\\n\t\t\t\treturn buffer[curbuf++];\\n\t\t\telse\\n\t\t\t\treturn -1;\\n\t\t}\\n\\n\t\tprivate boolean isSpaceChar(int c) {\\n\t\t\treturn !(c >= 33 && c <= 126);\\n\t\t}\\n\\n\t\tprivate void skip() {\\n\t\t\twhile (hasNextByte() && isSpaceChar(buffer[curbuf]))\\n\t\t\t\tcurbuf++;\\n\t\t}\\n\\n\t\tpublic boolean hasNext() {\\n\t\t\tskip();\\n\t\t\treturn hasNextByte();\\n\t\t}\\n\\n\t\tpublic String next() {\\n\t\t\tif (!hasNext())\\n\t\t\t\tthrow new NoSuchElementException();\\n\t\t\tStringBuilder sb = new StringBuilder();\\n\t\t\tint b = readByte();\\n\t\t\twhile (!isSpaceChar(b)) {\\n\t\t\t\tsb.appendCodePoint(b);\\n\t\t\t\tb = readByte();\\n\t\t\t}\\n\t\t\treturn sb.toString();\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\tif (!hasNext())\\n\t\t\t\tthrow new NoSuchElementException();\\n\t\t\tint c = readByte();\\n\t\t\twhile (isSpaceChar(c))\\n\t\t\t\tc = readByte();\\n\t\t\tboolean minus = false;\\n\t\t\tif (c == '-') {\\n\t\t\t\tminus = true;\\n\t\t\t\tc = readByte();\\n\t\t\t}\\n\t\t\tint res = 0;\\n\t\t\tdo {\\n\t\t\t\tif (c < '0' || c > '9')\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\tres = res * 10 + c - '0';\\n\t\t\t\tc = readByte();\\n\t\t\t} while (!isSpaceChar(c));\\n\t\t\treturn (minus) ? -res : res;\\n\t\t}\\n\\n\t\tpublic long nextLong() {\\n\t\t\tif (!hasNext())\\n\t\t\t\tthrow new NoSuchElementException();\\n\t\t\tint c = readByte();\\n\t\t\twhile (isSpaceChar(c))\\n\t\t\t\tc = readByte();\\n\t\t\tboolean minus = false;\\n\t\t\tif (c == '-') {\\n\t\t\t\tminus = true;\\n\t\t\t\tc = readByte();\\n\t\t\t}\\n\t\t\tlong res = 0;\\n\t\t\tdo {\\n\t\t\t\tif (c < '0' || c > '9')\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\tres = res * 10 + c - '0';\\n\t\t\t\tc = readByte();\\n\t\t\t} while (!isSpaceChar(c));\\n\t\t\treturn (minus) ? -res : res;\\n\t\t}\\n\\n\t\tpublic double nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tpublic int[] nextIntArray(int n) {\\n\t\t\tint[] a = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextInt();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic long[] nextLongArray(int n) {\\n\t\t\tlong[] a = new long[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextLong();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic char[][] nextCharMap(int n, int m) {\\n\t\t\tchar[][] map = new char[n][m];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\tmap[i] = next().toCharArray();\\n\t\t\treturn map;\\n\t\t}\\n\t}\\n\\n\tstatic void tr(Object... o) {\\n\t\tout.println(Arrays.deepToString(o));\\n\t}\\n}\\n", "target": "213", "substitutes": {"out": ["Out", "exec", "file", "parent", "io", "w", "window", "client", "err", "img", "br", "bin", "string", "name", "p", "line", "output", "write", "cli", "result", "log", "user", "r", "outs", "report", "bar", "doc", "writer", "input", "inner", "obj", "println", "error", "opt", "cache", "page", "data", "gz", "outer", "pool", "init", "conn", "ou", "ext", "print", "self", "inc", "str", "OUT", "cfg", "path", "again", "key", "ex", "up", "net", "temp", "op", "flush"], "ir": ["din", "wl", "rc", "ear", "adr", "err", "ar", "rir", "oir", "oc", "iv", "sr", "yr", "irs", "irc", "http", "finder", "r", "iron", "ini", "ire", "ai", "rin", "input", "inner", "iper", "iris", "iter", "iri", "her", "fr", "ris", "IR", "ri", "mir", "inter", "Ir", "rr", "lr", "pr", "ira", "irt", "hr", "pir", "dir", "arin", "nir", "vir", "reader", "ur", "rb"], "f": ["fs", "file", "fc", "form", "fun", "fm", "s", "fp", "cf", "family", "fg", "fr", "fn", "rf", "e", "fb", "h", "fff", "F", "format", "v", "feed", "fd", "fo", "info", "g", "fw"], "fi": ["fs", "fc", "afi", "ig", "fa", "sf", "fm", "fp", "ii", "fin", "ni", "ini", "fe", "rin", "wi", "ci", "fg", "fl", "fn", "rf", "fb", "ff", "vi", "foo", "fd", "fo", "fw"], "n": ["nu", "number", "p", "oa", "s", "nb", "nan", "j", "r", "t", "z", "an", "sn", "N", "count", "nn", "ns", "da", "l", "u", "num", "e", "x", "h", "d", "y", "v", "aa", "nc", "nl", "k"], "a": ["w", "fa", "sha", "ga", "ca", "p", "oa", "s", "ac", "alpha", "aaa", "na", "wa", "r", "A", "sa", "ea", "qa", "z", "ma", "an", "ab", "ai", "ba", "da", "l", "aj", "e", "area", "x", "la", "d", "y", "va", "aa", "as", "ad"], "b": ["w", "fa", "br", "xb", "bin", "base", "bb", "p", "lb", "s", "nb", "bd", "eb", "j", "r", "abb", "wb", "z", "abs", "ab", "ib", "func", "pb", "bar", "reb", "bound", "ba", "ob", "object", "B", "l", "mb", "bi", "e", "fb", "bs", "h", "x", "bis", "function", "body", "d", "y", "va", "v", "db", "aa", "bf", "be", "cb", "bl", "rb"], "in": ["din", "file", "is", "io", "pin", "err", "In", "ar", "bin", "ie", "request", "arg", "socket", "query", "cli", "diff", "req", "pass", "r", "this", "resource", "ini", "config", "ins", "rin", "image", "input", "inner", "url", "data", "cache", "win", "l", "stream", "init", "e", "it", "src", "lin", "source", "id", "inc", "ssl", "path", "gin", "str", "again", "login", "isin", "connection", "ex", "arin", "include", "from", "reader", "IN", "inn", "xml"], "buffer": ["file", "number", "table", "timeout", "window", "transfer", "address", "request", "bb", "border", "buf", "header", "output", "result", "batch", "buff", "memory", "channel", "resource", "copy", "document", "queue", "image", "length", "uffer", "comment", "input", "url", "reference", "data", "cache", "page", "layer", "position", "fb", "binary", "cube", "limit", "Buffer", "source", "block", "capacity", "quote", "offset", "message", "shape", "seed", "server", "array", "reader", "iter", "flush"], "curbuf": ["cuffbuf", "cauruff", "curtula", "ecurdug", "cuberbuf", "Curbull", "caurula", "dcobluf", "ecurbuff", "dcurbuf", "caurbuf", "Curbuf", "acurbuff", "dcoblff", "curum", "curduff", "acurbum", "acauranc", "coblul", "cubuf", "curdug", "cobluf", "curbue", "cuffue", "Curtull", "acurbanc", "cubum", "ecurduff", "coblur", "acuruff", "curbul", "cuffuff", "curtuf", "cauruf", "Curtuf", "curguff", "caurue", "curbull", "curdbuf", "curduf", "curbur", "curbbuf", "cuberug", "caurum", "caurull", "acurum", "curbrow", "coblbuf", "curtuff", "acuruf", "cuberull", "curuf", "curbum", "curanc", "acurbul", "ecurdbuf", "curtul", "ecurbbuf", "buffbuf", "curganc", "cubbuf", "acaurbuf", "dcobluff", "cubuff", "acaurul", "buffue", "caurur", "Curbuff", "curbanc", "curbug", "curguf", "curtbuf", "cuberuf", "acurbbuf", "dcurbur", "curtull", "dcoblur", "caurff", "curtff", "ecurbug", "dcurbuff", "curbff", "burbbuf", "curue", "curbula", "Curbula", "Curtula", "burbuf", "burbue", "acurbuf", "curuff", "curtur", "acauruff", "curtrow", "coblff", "cuffuf", "cobluff", "dcurbff", "ecurduf", "caurul", "burbuff", "buffuf", "acurbrow", "buffuff", "cauranc", "Curtuff", "cuberula", "curgbuf", "curug", "curbuff", "acauruf", "caurrow", "coblrow", "acaurrow", "ecurbuf", "cuberuff"], "lenbuf": ["lenqueue", "lcmd", "lengthbuf", " lenqueue", "lenmax", "Lenbuff", "lancv", "Lenuf", "lonbuf", "lnbuffer", "lenrb", "lonbuffer", "lenbuff", " lenbuffer", "elbuff", " lenuf", "lanmax", "lncap", "linbuff", "flbuff", "limbuf", "flbuf", "linbuf", "lenbuffer", "lanuf", "linqueue", "lanbuff", "lanbuffer", "lbuffer", "lengthbuffer", "lbuf", "elbuffer", "elcv", "linbuffer", "lencmd", "lnbuff", "Lenbuffer", "lincap", " lenbuff", "lnbuf", "linrb", "limbuffer", "flcmd", "lonbuff", "lencv", "limqueue", "lanbuf", "Lenbuf", "elbuf", "lbuff", "lengthbuff", "Lenmax", "lencap", "Lencap", "limrb", "lenuf", " lenrb", "flbuffer", "loncv", " lenmax", "lengthcmd"], "c": ["rc", "ch", "cs", "code", "p", "C", "cc", "ac", "sec", "sc", "enc", "vc", "t", "z", "ec", "cr", "lc", "cont", "count", "xc", "bc", "ci", "cm", "cl", "l", "u", "e", "ce", "x", "h", "ct", "d", "y", "v", "dc", "nc", "cp", "div", "cu", "uc", "cy", "g", "k", "col"], "sb": ["xb", " SB", "bb", "sf", "gb", " eb", "lb", "nb", "bd", "bm", "eb", "sth", "zb", "SB", "bg", "sa", "wb", "abb", "bp", "sq", "ib", "ls", "pb", "bc", "sg", "ob", "B", "mb", "fb", "bs", "su", "usb", "bt", "bps", "sm", "obb", "kb", "stab", "bh", "db", "bf", "BB", "sp", "orb", "cb", "rb"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tprivate static final Scanner scan = new Scanner(System.in);\\n\\n\tpublic static void main(String[] args){\\n\t\tint N = scan.nextInt();\\n\t\tfor(int i = 0; i < N; i++){\\n\t\t\tint a = scan.nextInt();\\n\t\t\tint b = scan.nextInt();\\n\t\t\tint c = scan.nextInt();\\n\t\t\tif(a * a == b * b + c * c | b * b == a * a + c * c | c * c == a * a + b * b){\\n\t\t\t\tSystem.out.println(\"YES\");\\n\t\t\t} else{\\n\t\t\t\tSystem.out.println(\"NO\");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "65", "substitutes": {"scan": ["run", "pan", "span", "chan", "pin", "io", "begin", "gen", "search", "n", "ser", "store", "er", "see", "connect", "query", "sort", "ner", "user", "log", "sc", "na", "r", "pass", "skip", "system", "sync", "report", "ann", "an", "fan", "in", "kin", "ban", "nn", "sign", "san", "read", "bug", "se", "sys", "l", "inter", "plan", "can", "conn", "out", "or", " scanner", "cat", "ans", "look", "v", "slice", "wan", "clean", "server", "Scan", "walk", "watch", "ignore", "reader", "conv", "parse"], "N": ["O", "K", "I", "NR", "n", "Ns", "J", "C", "T", "NT", "Ne", "A", "G", "Size", "Q", "R", "D", "H", "Y", "NA", "Z", "B", "Num", "L", "NI", "M", "X", "NE", "S", "F", "P", "V", "Count", "RN", "Number", " n"], "i": ["gi", "xi", "I", "si", "n", "ie", "di", "p", "oi", "m", "ii", "hi", "index", "j", "chi", "ni", "z", "ai", "in", "phi", "li", "ci", "ti", "u", "bi", "e", "iu", "it", "mi", "pi", "id", "d", "y", "v", "ix", "f", "ui", "info"], "a": ["w", "fa", "ar", "ca", "n", "at", "bb", "au", "p", "ia", "ac", "alpha", "aaa", "s", "na", "r", "A", "sa", "j", "ea", "z", "an", "ab", "ai", "count", "ae", "ah", "ba", "ci", "pa", "da", "l", "aj", "u", "aw", "e", "area", "x", "pi", "am", "d", "y", "aa", "f", "as", "o", "ad"], "b": ["ch", "w", "ca", "n", "bb", "p", "nb", "ac", "lb", "m", "eb", "j", "r", "wb", "t", "z", "ab", "ib", "an", "bc", "ba", "B", "l", "u", "bi", "e", "fb", "bs", "h", "x", "d", "y", "db", "v", "aa", "f", "o", "sb", "be", "g", "cb", "ad", "rb"], "c": ["pc", "ch", "w", "cs", "ca", "n", "p", "C", "s", "ac", "cc", "cn", "j", "r", "t", "z", "ec", "lc", "cf", "count", "ci", "q", "l", "u", "e", "ce", "h", "x", "unc", "d", "y", "v", "dc", "uc", "f", "cu", "o", "cy", "g", "k", "con"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint n = 0;\\n\t    double avg = 0;\\n\t\t  \\n\t\twhile((n = Integer.parseInt(input.readLine())) != 0){\\n\t\t  String line = input.readLine();\\n\t\t  String[] str = line.split(\" \");\\n\t\t  double[] data = new double[n];\\n\t\t  \\n\t\t  double sum = 0 , scat = 0 , dev = 0;\\n\t\t  for(int i = 0 ; i < n ; i ++){\\n\t\t\t  data[i] = Double.parseDouble(str[i]);\\n\t\t\t  sum += data[i];\\n\t\t\t  avg = sum / (double)n ;\\n\t\t  }\\n\t\t  for(int j = 0 ; j < n ; j++){\\n\t\t\t  scat += Math.pow(avg - data[j], 2); \\n\t\t  }\\n\t\t  \\n\t\t  dev = Math.sqrt(scat/(double)n);\\n\t\t  sb.append(dev + \"\\n\");\\n\t\t  \\n\t\t}\\n\t\tSystem.out.print(sb);\\n\t\t\\n\t}\\n\\n}", "target": "203", "substitutes": {"input": ["exec", "io", "client", "hub", "initial", "form", "request", "output", "s", "socket", "flow", "http", "r", "driver", "this", "config", "inside", "reading", "in", "inf", "context", "inner", "image", "error", "iter", "instance", "read", "l", "IO", "stream", "binary", "af", "out", "keep", "source", "Input", "self", "pull", "inc", "ssl", "again", "current", "buffer", "connection", "f", "reader", "temp", "IN"], "sb": ["bj", "xb", " SB", "si", "sf", "bb", "gb", "s", "nb", "lb", "bd", "bm", "eb", "dB", "sth", "zb", "SB", "bg", "sa", "wb", "abb", "bp", "sv", "abs", "ab", "sk", "ib", "b", "ls", "pb", "std", "bc", "sg", "bsp", "mb", "fb", "src", "tmp", "bs", "bt", "bps", "obb", "kb", "bh", "db", "bf", "BB", "sp", "cb", "rb"], "n": ["nu", "network", "span", "number", "w", "p", "nb", "s", "m", "cn", "nt", "na", "ne", "r", "ln", "mn", "ni", "t", "z", "sn", "b", "N", "in", "count", "nn", "size", "no", "ns", "l", "u", "num", "c", "conn", "x", "dn", "d", "y", "v", "len", "nc", "f", "nl", "o", "g", "net", "k"], "avg": ["avpg", " avm", "avgy", "afpg", "avgi", "avalg", "varm", "varG", "avalG", "averm", "vargy", " avG", "avG", "AVgs", "varg", " avgu", "avalpg", " avgs", "afgen", "avergi", "avalgen", "AVgen", "AVg", "afg", "AVpg", "avm", "vargs", "avgen", "vargi", " avgi", "vargu", "avergy", " avgy", "avgu", "afG", "AVgu", "averg", "avgs", "AVG"], "line": ["Line", "inline", "cell", "LINE", "string", "raw", "p", "unit", "header", "s", "result", "part", "r", "le", "sl", "b", "entry", "lc", "response", "in", "lines", "end", "split", "row", "page", "el", "l", "c", "e", "out", "h", "text", "lin", "block", "val", "lf", "key", "f", "nl", "reader"], "str": ["list", "pos", "char", "string", "step", "name", "p", "tr", "sr", "s", "ner", "sec", "strip", "enc", "r", "pass", "inst", "sl", "st", "arr", "b", "entry", "dr", "url", "split", "dict", "obj", "Str", "fr", "l", "out", "text", "block", "v", "div", "f", "dat", "sp", "STR", "iter", "parse", "strings", "spec"], "data": ["number", "results", "dd", "pos", "done", "dist", "value", "di", "step", "p", "s", "alpha", "average", "result", "batch", "na", "default", "sample", "mu", "dt", "count", "multi", "dict", "size", "cache", "total", "da", "dec", "extra", "series", "area", "scale", "la", "cat", "d", "style", "val", "DATA", "aa", "div", "draw", "dat", "info", "pad"], "sum": ["sav", "weight", "pos", "um", "si", "sub", "space", "au", "unit", "diff", "alpha", "average", "sc", "na", "pass", "ul", "sa", "Sum", "start", "count", "av", "mean", "cum", "li", "total", "size", "miss", "sam", "ass", "sign", "se", "su", "cat", "scale", "parse", "offset", "spread", "vol", "div", "fat", "add", "sh", "summary", "g", "cost", "loss", "cal"], "scat": ["uscat", "scatch", " scap", "scare", "spant", "scAT", "uscar", "bcap", "bcant", "bcatch", "Scare", "scash", "Scash", "SCash", " scant", "scar", "SCat", "spAT", "scant", "spatch", "uscAT", "scap", "Scau", "Scat", "Scar", "SCAT", "escare", "escAT", "ScAT", "escat", "SCau", "spap", "spau", "spat", "spash", "bcat", " scatch", "escar", "uscare", "scau"], "dev": ["test", "dd", "adv", "desc", "err", "dist", "device", "slow", "diff", "grad", "development", "debug", "valid", "var", "priv", "std", "deb", "mean", "error", "Dev", "def", "bug", "dec", "sd", "DEV", "scale", "rad", "gu", "ev", "vol", "div", "neg", "dot", "gh", "dim", "info", "dem", "cost", "pad", "ver"], "i": ["xi", "gi", "I", "is", "io", "si", "di", "ie", "p", "oi", "ii", "hi", "index", "ni", "ini", "b", "ind", "ai", "in", "li", "ci", "ri", "qi", "u", "bi", "c", "e", "ori", "iu", "eni", "mi", "x", "pi", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "f", "ui", "o", "info", "g"], "j": ["bj", "ch", "w", "br", "ja", "jc", "dj", "ie", "J", "p", "jo", "ii", "ij", "z", "jj", "js", "b", "jl", "ji", "end", "li", "obj", "q", "fr", "el", "l", "aj", "qi", "oj", "bi", "e", "x", "out", "next", "adj", "uj", "d", "y", "v", "ix", "key", "f", "o", "g", "k", "jp"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt(); //n\u3068\u3044\u3046\u5909\u6570\u3092\u4f5c\u308a\u3001\u6a19\u6e96\u5165\u529b\u304b\u3089\u6570\u5b57\u3092\u4e00\u3064\u8aad\u307f\u53d6\u3063\u3066\u3001n\u306b\u5165\u308c\u308b\\n        int q = sc.nextInt();\\n\\n        String s = sc.next();\\n\\n        int[] l = new int[q];\\n        int[] r = new int[q];\\n        int[] t = new int[n];\\n\\n        for (int i = 0; i < q; i++) {\\n            l[i] = sc.nextInt();\\n            r[i] = sc.nextInt();\\n        }\\n\\n        for (int i = 0; i < n - 1; i++) {\\n            t[i + 1] = s.substring(i, i+2).equals(\"AC\") ? t[i] + 1 : t[i];\\n        }\\n\\n        for (int i = 0; i < q; i++) {\\n            int res = t[r[i] - 1] - t[l[i] - 1];\\n\\n            System.out.println(res);\\n        }\\n    }\\n}\\n", "target": "52", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "desc", "cs", "ca", "sub", "sf", "com", "cc", "ner", "sec", "soc", "acc", "sync", "system", "osc", "cr", "ec", "ocr", "bc", "sci", "ss", "proc", "ci", "cl", "scope", "se", "c", "src", "Sc", "sche", "inc", "scan", "nc", "uc", "sp", "parser", "SC", "spec"], "n": ["name", "p", "nb", "m", "nt", "ne", "j", "r", "ln", "sn", "b", "N", "in", "ns", "l", "num", "fn", "c", "init", "conn", "it", " N", "un", "nc", "f", "o", "g", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.nextLine();\\n\\n        char[] chars = s.toCharArray();\\n\\n        int sum = 0;\\n        for (int i = 0; i <chars.length; i++) {\\n            sum += Character.getNumericValue(chars[i]);\\n        }\\n\\n        if (sum % 9 == 0) {\\n            System.out.println(\"Yes\");\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n\\n\\n\\n    }\\n}", "target": "93", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "sf", "cc", "ner", "sec", "acc", "enc", "sync", "system", "sl", "cr", "st", "osc", "ec", "class", " scr", "bc", "sci", "ss", "cl", "scope", "se", "c", "stream", "src", "Sc", "asc", "text", "str", " SC", "scan", "nc", " Sc", "uc", "sh", "sp", "SC", "spec"], "s": ["fs", "a", "w", "si", "n", "string", "sf", "p", "m", "r", "sv", "sl", "ls", "b", "ins", "in", "input", "ss", "ws", "lines", "ns", "l", "se", "u", "c", "ses", "e", "h", "su", "S", "str", "v", "f", "services", "o", "sb", "g", "strings"], "chars": ["hars", "chacters", "charars", "chats", "hans", "colans", "ChARS", "chARS", "Chars", "chrs", "characters", "hats", "charARS", "Chrs", "Chans", "quans", "colars", "hARS", "colacters", "quars", "charats", "chans", "Chats", "charrs", "charans", "quats", "colrs", "quacters", "Chacters"], "sum": ["weight", "fill", "pos", "um", "si", "n", "value", "oss", "char", "diff", "alpha", "average", "result", "sort", "acc", "Sum", "skip", "mass", "conf", "length", "count", "mean", "match", "size", "total", "error", "sign", "min", "miss", "ass", "use", "num", "text", "percent", "scale", "style", "offset", "spread", "len", "key", "vol", "sim", "fat", "up", "sp", "fee", "info", "cost", "start", "gram", "cal"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "part", "index", "j", "chi", "pass", "t", "z", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ti", "ci", "ri", "qi", "u", "bi", "l", "e", "pi", "x", "h", "fi", "id", "ip", "uri", "v", "slice", "ix", "key", "f", "ui", "o", "info", "k"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    \\n    int[] list = new int[5];\\n    for (int i=0; i<list.length; i++) {\\n      list[i] = sc.nextInt();\\n    }\\n    int k = sc.nextInt();\\n    \\n    int max = 0;\\n    for (int i=0; i<list.length; i++) {\\n      for (int j=i+1; j<list.length; j++) {\\n        max = Math.max(max, list[j]-list[i]);\\n      }\\n    }\\n    \\n    if (max > k) {\\n      System.out.println(\":(\");\\n    }\\n    else {\\n      System.out.println(\"Yay!\");\\n    }\\n  }\\n}", "target": "66", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "ctx", "com", "cc", "ner", "tc", "soc", "system", "osc", "cr", "sq", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "sb", "SC", "spec"], "list": ["chain", "test", "load", "table", "parent", "live", "string", "base", "code", "name", "p", "group", "set", "cli", "diff", "sort", "detail", "result", "batch", "part", "index", "default", "null", "none", "system", "lc", "view", "queue", "tree", "start", "count", "lists", "map", "data", "size", "range", "stack", "full", "cl", "l", "ist", "type", "listed", "out", "keep", "source", "id", "block", "left", "parse", "pre", "rest", "like", "key", "json", "server", "array", "info", "LIST", "bl"], "i": ["xi", "gi", "I", "is", "io", "si", "ie", "di", "ami", "p", "oi", "ii", "hi", "index", "ki", "ni", "ini", "b", "ind", "ai", "in", "phi", "ji", "li", "ci", "ik", "l", "ri", "u", "bi", "qi", "e", "ori", "iu", "init", "eni", "mi", "x", "pi", "h", "it", "yi", "id", "ip", "uri", "d", "y", "v", "ix", "api", "key", "f", "ui", "o", "info"], "k": ["K", "ks", "w", "n", "p", "mk", "unk", "m", "z", "sk", "b", "ck", "count", "ke", "end", "q", "c", "e", "x", "kw", "id", "d", "kid", "y", "v", "kick", "key", "ok", "o", "g", "check"], "max": ["chain", "gt", "parent", "pop", "height", "pos", "rank", "n", "star", "step", "code", "p", "MAX", "diff", "maximum", "average", "m", "exp", "alpha", "part", "cross", "power", "default", "sync", "Max", "work", "std", "conf", "length", "count", "rand", "mean", "end", "size", "total", "no", "min", "ax", "range", "q", "cl", "top", "c", "can", "last", "out", "limit", "x", "sum", "id", "scale", "right", "mod", "depth", "rest", "v", "key", "div", "add", "dot", "auto", "call", "parse", "pad"], "j": ["ja", "si", "n", "jc", "ie", "dj", "J", "p", "m", " ii", "ii", "jo", "ij", "r", "ni", "z", "jj", "js", "b", "jl", "ji", "end", "li", "obj", "ik", "q", "fr", "l", "qi", "u", "aj", "bi", "e", "it", "h", "x", "out", "next", "adj", "uj", "d", "je", "y", "v", "off", "key", "f", "o", "ui", "g", "jp"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.*;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[]a=new int[n+4];\\n\t\tint[]b =new int[n];\\n\t\tfor(int i =0;i<n;i++)b[i]=sc.nextInt();\\n\t\tfor(int i =n-1;i>=0;i--) {\\n\t\t\ta[b[i]]=Math.max(a[b[i]],1+a[b[i]+1] );\\n\t\t}\\n\t\tif(a[1]==0) {\\n\t\t\tSystem.out.println(-1);\\n\t\t}else System.out.println(n-a[1]);\\n\t}\\n\tstatic int gcd(int a,int b) {\\n\t\tif(a==0)return b;\\n\t\treturn gcd(b%a,a);\\n\t}\\n\t  static class Scanner {\\n\t        StringTokenizer st;\\n\t        BufferedReader br;\\n\t \\n\t        public Scanner(FileReader r) {\\n\t            br = new BufferedReader(r);\\n\t        }\\n\t \\n\t        public Scanner(InputStream s) {\\n\t            br = new BufferedReader(new InputStreamReader(s));\\n\t        }\\n\t \\n\t        public String next() throws IOException {\\n\t            while (st == null || !st.hasMoreTokens())\\n\t                st = new StringTokenizer(br.readLine());\\n\t            return st.nextToken();\\n\t        }\\n\t \\n\t        public int nextInt() throws IOException {\\n\t            return Integer.parseInt(next());\\n\t        }\\n\t \\n\t        public long nextLong() throws IOException {\\n\t            return Long.parseLong(next());\\n\t        }\\n\t \\n\t        public String nextLine() throws IOException {\\n\t            return br.readLine();\\n\t        }\\n\t \\n\t        public double nextDouble() throws IOException {\\n\t            String x = next();\\n\t            StringBuilder sb = new StringBuilder(\"0\");\\n\t            double res = 0, f = 1;\\n\t            boolean dec = false, neg = false;\\n\t            int start = 0;\\n\t            if (x.charAt(0) == '-') {\\n\t                neg = true;\\n\t                start++;\\n\t            }\\n\t            for (int i = start; i < x.length(); i++)\\n\t                if (x.charAt(i) == '.') {\\n\t                    res = Long.parseLong(sb.toString());\\n\t                    sb = new StringBuilder(\"0\");\\n\t                    dec = true;\\n\t                } else {\\n\t                    sb.append(x.charAt(i));\\n\t                    if (dec)\\n\t                        f *= 10;\\n\t                }\\n\t            res += Long.parseLong(sb.toString()) / f;\\n\t            return res * (neg ? -1 : 1);\\n\t        }\\n\t \\n\t        public boolean ready() throws IOException {\\n\t            return br.ready();\\n\t        }\\n\t    }\\n}\\n", "target": "234", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ca", "si", "screen", "cc", "ner", "nt", "sec", "sa", "sync", "system", "cr", "osc", "sq", "lc", "cont", "bc", "sci", "ss", "proc", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sem", "ct", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "n": ["network", "span", "number", "w", "name", "p", "nb", "m", "nt", "nor", "ne", "j", "nan", "t", "ni", "z", "an", "sn", "N", "in", "count", "nn", "size", "no", "ns", "l", "u", "num", "c", "en", "e", "conn", "d", "y", "v", "len", "nc", "nl", "o", "net", "k"], "a": ["tta", "sta", "fa", "ga", "ca", "au", "p", "oa", "aaa", "alpha", "ac", "app", "na", "wa", "index", "A", "sa", "ea", "qa", "z", "ma", "ab", "an", "action", "ai", "aux", "ae", "ba", "aka", "pa", "da", "l", "aj", "u", "c", "e", "am", "area", "la", "d", "y", "va", "api", "aa", "as", "o", "auto", "array", "ama", "active", "ad"], "b": ["number", "w", "bin", "base", "bb", "p", "gb", "nb", "lb", "bd", "eb", "m", "app", "j", "abb", "wb", "bp", "z", "abs", "ab", "an", "ib", "bar", "bc", "ba", "obj", "ob", "boot", "B", "bug", "l", "u", "bi", "c", "mb", "e", "fb", "bs", "area", "h", "body", "d", "y", "db", "v", "beta", "buffer", "aa", "o", "be", "cb", "k", "rb"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "iv", "p", "oi", "cli", "m", "abi", "ii", "hi", "j", "t", "ni", "ini", "mu", "lc", "ai", "phi", "multi", "ji", "li", "ci", "ti", "q", "l", "qi", "u", "bi", "c", "ri", "e", "ori", "iu", "eni", "it", "mi", "h", "pi", "yi", "fi", "id", "uri", "ip", "d", "y", "v", "ix", "api", "vi", "ui", "o", "info"], "st": ["th", "sw", "sta", "pt", "stop", "struct", "sr", "ste", "sts", "store", "ft", "nt", "first", "sth", "inst", "sa", "stri", "t", "est", "cr", "sl", "sn", "ost", "ld", "fe", "dr", "std", "tt", "ss", "stable", "fr", "stack", "nd", "cl", "ast", "ist", "src", "bt", "pr", "ct", "rt", "str", "ust", "rest", "ut", "const", "sh", "sp", "ST", "be", "stage", " ss", "rd", "bl", "St"], "br": ["bre", "ver", " str", "ch", "bur", "err", "Br", "bb", "tr", "p", "sr", "BR", "pl", "browser", "cr", "arr", "sl", "ab", "dr", "bar", "gr", "bsp", "bel", "mr", "fr", " tr", " dr", " sr", "bs", "ber", "bridge", "bt", "pr", "bro", "rib", "or", "ru", "fore", "rt", "str", "bh", " fr", " barr", "rest", "hr", "ut", "sp", "ur", "bl", "rb"], "r": ["rc", "w", "ar", "rs", "p", "sr", "er", "m", "rar", "t", "writer", "R", "Rs", "ir", "mr", "fr", "l", "u", "c", "e", "h", "rr", "ru", "rt", "d", "o", "g", "reader", "rb"], "s": ["fs", " streams", "si", "rs", "p", "ings", "sr", "m", "gs", "os", "t", "sv", "sl", "js", "storage", "ins", "in", "lines", "ws", "ss", "its", "ns", "l", "ers", "c", "ses", "ing", "e", "bs", "h", "or", "bis", "S", "d", "ps", "str", "ssl", "es", "services", "server", "o", "g", "strings"], "x": ["xi", "w", "search", "string", "p", "hex", "xt", "exp", "index", "t", "z", "rex", "xxxx", "xc", "xy", "rx", "input", "data", "ax", "u", "c", "e", "text", "xs", "X", "xx", "str", "y", "v", "xxx", "ix", "ex", "xp", "plus", "xml"], "sb": ["sw", " SB", "si", "sf", "gb", "bb", "lb", "nb", "bm", "sth", "SB", "sa", "bp", "sv", "vm", "ib", "pb", "bc", "sg", "src", "tmp", "bt", "sm", "db", "bf", "sp", "sd", "cb", "rb"], "res": [" z", " abs", " ret", "z", " w", " count", " num", " stop", " fs", " len", " sum", " result", "frac", " sign", " max", " val", " finish", " col", "val", "y", "len", " ans", " cs", " out", " total"], "f": ["flat", "fc", "fac", "fit", "w", "fill", "sf", "p", "fun", "diff", "t", "inf", "df", "fg", "def", "frac", "c", "e", "rep", "F", "d", "free", "fd", "g", "found", "progress"], "start": ["find", "pos", "cur", "begin", "si", "ie", "base", "step", "stop", "set", "diff", " end", "Start", "sec", "part", "first", "index", "ind", "max", "starting", "count", " stop", "end", "use", "min", "init", "it", "limit", "sum", "id", "scale", "art", "y", "offset", "len", "shift", "change", "from", "sp", "info", "pad"], "dec": [" dim", " bad", " enc", "Dec", "sec", " win", " inc", "zero", " reverse", " inv", "ind", " num", " len", " sign", " disp", " max", " val", " div", " cancel", " desc", "val", " ind", " delta", " odd", " dup", "g", " exp", " rev"], "neg": ["prev", "spl", "reverse", "pos", "desc", "err", "sub", "rot", "diff", "grad", "sort", "minus", "rev", "ne", "loc", "nan", "dest", "decl", "bad", "rel", "coll", "kind", "negative", "no", "size", "disabled", "sin", "sign", "Neg", "dev", "sum", "dep", "offset", "orig", "plus", "iter", "flag", "norm"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n  public static void main (String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n    \\n    long A = sc.nextLong();\\n    long B = sc.nextLong();\\n    long C = sc.nextLong();\\n    long D = sc.nextLong();\\n\\n    sc.close();\\n\\n    long lcm_ = lcm(C, D);\\n\\n    long A1 = A / C;\\n    long B1 = B / C;\\n    long AB1 = B1 - A1;\\n    if (A % C == 0) {\\n      AB1++;\\n    }\\n\\n    long A2 = A / D;\\n    long B2 = B / D;\\n    long AB2 = B2 - A2;\\n    if (A % D == 0) {\\n      AB2++;\\n    }\\n\\n    long A3 = A / lcm_;\\n    long B3 = B / lcm_;\\n    long AB3 = B3 - A3;\\n    if (A % lcm_ == 0) {\\n      AB3++;\\n    }\\n\\n    long AB = AB1 + AB2 - AB3;\\n\\n    System.out.println(B - A + 1 - AB);\\n\\n  }\\n\\n  public static long gcd(long x, long y){\\n\\n    if (y == 0) {\\n      return x;\\n    }\\n    \\n    return gcd(y, x % y);\\n    \\n  }\\n\\n  public static long lcm(long x, long y) {\\n\\n\t\treturn x / gcd(x, y) * y;\\n  \\n  }\\n\\n}", "target": "9", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "search", "sub", "cor", "cer", "ser", "screen", "sr", "ctx", "cam", "ner", "tc", "exp", "soc", "sync", "system", "osc", "cr", "sq", "sv", "lc", "cont", "bc", "sci", "ss", "row", "sign", "cus", "cl", "scope", "se", "c", "Sc", "asc", "can", "sche", "sem", "ct", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "Scan", "reader", "parser", "parse", "SC", "gram"], "A": ["a", "API", "Alpha", "U", "K", "I", "This", "E", "HA", "AC", "As", "Na", "Ab", "AU", "AF", "Ca", "T", "GA", "AM", "Auth", "PA", "LA", "AA", "G", "W", "N", "UA", "Adam", "IA", "If", "H", "Y", "NA", "L", "Ma", "MA", "M", "Java", "SA", "Az", "X", "AD", "EA", "Ar", "AR", "The", "BA", "AH", "P", "S", "mA", "Ra", "F", "AL", "V", "Area", "AP", "Fa", "Australia", "Am", "At", "An", "JA", "Ac", "CA"], "B": ["O", "U", "E", "I", "Bar", "Ab", "Bi", "J", "T", "BF", "BE", "BD", "NB", "SB", "MB", "G", "PB", "b", "N", "W", "QB", "R", "BC", "Big", "GB", "UB", "H", "Y", "DB", "L", "M", "Bu", "X", "Bs", "BA", "OB", "P", "F", "S", "V", "BB", "BL", "BI", "WB"], "C": ["O", "Cs", "U", "E", "I", "K", "Con", "AC", "CC", "Ca", "T", "CL", "G", "CN", "N", "W", "Q", "R", "Co", "H", "Y", "CD", "CW", "DC", "L", "Cu", "c", "CE", "M", "Sc", "X", "S", "P", "F", "d", "CNN", "V", "VC", "Code", "ASC", "Ch", "CA"], "D": ["O", "U", "E", "I", "Day", "J", "T", "Dou", "Di", "G", "DN", "W", "N", "DM", "Q", "DE", "Dar", "R", "H", "Y", "CD", "JD", "DC", "DB", "Z", "L", "DI", "DD", "M", "X", "Ds", "AD", "S", "d", "F", "P", "DS", "V", "DA", "Do", "DF"], "lcm_": ["lmc_", "lcm2", "lcre2", "lcomm_", "slcm___", "Lpm_", "lrm_", "klcd_", "lorm___", "lmm_", "lmc___", "slmc_", "lcd2", "klcm_", "Lcm_", "lcd_", "lmn_", "lorm_", "klcd2", "lcm___", "slmc___", "slcm_", "lmb_", "lcre_", " lmm_", "lpm_", "klcm2", "lpm2"], "A1": ["EA001", "EA1", "B11", "Uone", " A11", "Aone", " A6", "B6", "ACOne", "EAOne", "U1", "A11", "AC1", "AB11", "AOne", "A001", "AB6", "A6", "EAone", "U001", "UOne", "AC001", "ACone"], "B1": ["AR4", "BA01", "b81", "B81", "Ab81", "Ab1", "D1", "AB81", "barts", "B1001", "B4", "b91", "b1", "Barts", "AB91", "B01", "ABarts", "D01", "Ab91", "B91", "AR1", "AR01", "AR1001", "D1001", "D4", "BA1001", "BA1", "BA4", "Abarts"], "AB1": ["AR4", "AMOne", "ABone", "AH001", "B11", "AVOne", "OB1", "OBone", "AM1", "AHOne", "AHart", "B4", "AR3", "ABOne", "AF3", "AB001", "ABart", "AB11", "AB4", "AF4", "AR11", "AF11", "AM001", "OBOne", "OBONE", "ABONE", "AVone", " AB001", "AH1", "AR1", "AMart", "AHone", "AVONE", "AHONE", "AF1", " ABOne", "AV1", " ABart"], "A2": ["AC2", "B14", "AA02", "A02", "AB14", "A8", " A8", " A4", "B4", " A02", "A4", "AB4", "AC8", "AA2", " A14", "AC02", "AA8", "A14", "AC4", "AA4"], "B2": ["BB4", "AB62", " B6", "D1", "D6", "BB6", "B6", "B4", " B4", "D2015", "BB2", "AB4", "BB62", " B62", "B62", "AB6", "B2015", "A6", "AF2015", "AF6", "AF1", "D2", "A2015", "AF2"], "AB2": ["AC2", "AC5", "AH6", "AB82", "AB5", "OB4", "OB02", "AH0", "AB52", "AH5", "B82", "AB0", "OB2", "B4", "AH02", "AF52", "B52", "AB4", "AF4", "Ab52", "OB0", "AC02", "AF82", "AC4", "AB6", "AF6", "Ab2", "AH2", "Ab82", "Ab4", "AC0", "AF5", "AB02", "AF2", "AC6", "AH4", "AF0"], "A3": ["A83", "AB73", "AA03", "AM53", "AF83", "AF53", "AM83", "AM3", "A73", " A73", "AF3", "AM03", "AA3", "B73", "AF03", "A53", "AA83", "A03", "AA53"], "B3": ["M3", "IB3", "BE03", "IBThird", "Miii", " B03", "b03", "M03", "Biii", "AB03", "BThird", "BEThird", "biii", "ABThree", " B23", " Biii", "IB03", "BEThree", "b3", "b23", "BE3", "IBThree", "ABThird", "B23", "B03", "M23", "BThree"], "AB3": ["BA3", " AB53", "AH003", "BB53", "AH3", "AB5", "AF53", "AB83", "Ab003", "AThird", "AH03", "BA53", " ABThird", "AFThird", "AF3", " AB83", "AB003", "AB03", "AB53", "BB3", "BB83", "Ab53", "AF003", "A5", "AH53", "BA03", "BA83", "ABThird", "Ab3", "AF1", "AF5", "Ab03", "AF03", " AB03", " AB5", "BB03"], "AB": ["AST", "ACH", "AC", "Ab", "Tab", "AF", "AK", "AM", "SB", "LAB", "AE", "ab", "AA", "PH", "UB", "AG", "CB", "DB", "SA", "IB", "AD", "AR", "BA", "AH", "OB", "AL", "ANC", "AV", "EB", "BB", "AY", "AP", "ABC", "CH", "CA"], "x": ["xi", "a", "wx", "number", "px", "w", "n", "code", "p", "m", "width", " xx", "on", "index", "cross", "t", "z", "one", "b", "length", "xy", "xc", "rx", "xf", "Y", "wy", "ax", "l", "u", "c", "e", "ey", "h", "xs", "X", "dx", "xx", "lat", "id", " X", "yx", "d", "val", "ix", "xxx", "v", "ex", "xp", "f", "time", "g", "i"], "y": ["a", "ch", "w", "ny", "n", "dy", "p", "ay", "yr", "m", "vy", "j", "oy", "t", "z", "ish", "yy", "b", "xy", "ya", "year", "ky", "Y", "wy", "yd", "yo", "py", "ys", "l", "c", "ey", "e", "yt", "type", "zy", "yi", "X", "h", "xx", "ty", "yx", "d", "ry", "v", "ady", "key", "time", "sy", "o", "cy", "g", "i", "ye"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        FastReader in = new FastReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ALucky7 solver = new ALucky7();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ALucky7 {\\n        public void solve(int testNumber, FastReader s, PrintWriter out) {\\n            int n = s.nextInt();\\n            String str = n + \"\";\\n            if (str.charAt(0) == '7' || str.charAt(1) == '7' || str.charAt(2) == '7') {\\n                out.println(\"Yes\");\\n            } else {\\n                out.println(\"No\");\\n            }\\n        }\\n\\n    }\\n\\n    static class FastReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private FastReader.SpaceCharFilter filter;\\n\\n        public FastReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "99", "substitutes": {"inputStream": ["outputVideo", "readerStream", "outputString", "readerstream", " inputSteam", "readerSteam", "InputVideo", " inputString", "inputSteam", "outputstream", "inputVideo", "inputString", "InputStream", "InputString", "inputstream", "InputSteam", " inputstream", "readerVideo", "Inputstream", "outputSteam"], "outputStream": ["controlStreamer", "outStreamer", "inputStreamer", "OutputWriter", "outStream", "controlSteam", "outputWriter", "controlStream", "outputStreamer", "inputSteam", " outputSteam", "OutputStreamer", "outputstream", "controlWriter", "outstream", "Outputstream", " outputstream", "inputWriter", "OutputSteam", "outSteam", " outputStreamer", "OutputStream", "outputSteam"], "in": ["a", "din", "pin", "io", "w", "err", "In", "bin", "request", "arg", "ac", "user", "log", "r", "inn", "this", "resource", "ini", "config", "work", "ins", "rin", "inf", "input", "inner", "url", "data", "sin", "win", "read", "l", "init", "conn", "conv", "source", "tin", "id", "inc", "ssl", "d", "path", "gin", "isin", "f", "info", "reader", "i", "IN", "con"], "out": ["io", "err", "word", "user", "sync", "outs", "copy", "b", "lib", "inner", "session", "page", "win", "full", "outer", "password", "pool", "OUT", "off", "buffer", "g", "call", "window", "w", "bin", "string", "p", "line", "write", "socket", "query", "log", "work", "error", "cache", "extra", "conn", "ext", "ex", "o", "gen", "output", "req", "pass", "this", "bar", "conf", "comment", "input", "scope", "init", "x", "inc", "console", "to", "server", "flush", "Out", "exec", "file", "list", "parent", "client", "group", "exp", "part", "r", "writer", "post", "prefix", "obj", "no", "v", "again", "connection", "f", "up", "net", "temp"], "solver": ["ssolve", "ssolution", "solution", " solution", "Solve", "ssolving", "siver", "solving", " solve", "Solution", "ssiver", "ssolver", "Siver", "Solver", " solving", "solve", " siver", "Solving"], "testNumber": [" testnumber", "testNum", "testSN", " exampleSN", " trialnumber", " exampleNumber", " trialNumber", " testSN", " examplenumber", "testnumber", " testNum", " trialSN", " trialNum", " exampleNum"], "s": ["w", "si", "sf", "p", "ings", "m", "sc", "gs", "os", "r", "t", "sv", "sl", "abs", "outs", "sq", "ls", "b", "ds", "ins", "ws", "ss", "ns", "l", "se", "ses", "ing", "h", "S", "ssl", "v", "f", "o", "sp", "sb", "g", "i"], "n": ["nu", "a", "number", "p", "nb", "m", "index", "j", "r", "ln", "ne", "mn", "ni", "z", "t", "sn", "N", "count", "pn", "nn", "size", "min", "ns", "l", "u", "num", "e", "x", "d", "y", "len", "nc", "nl", "o", "net", "g", "i"], "str": ["kr", "sta", "br", "err", "char", "string", "form", "tr", "name", "p", "er", "sr", "hex", "usr", "sec", "strip", "exp", "enc", "r", "inst", "pass", "stri", "st", "sl", "arr", "b", "dr", "gr", "doc", "coll", "ocr", "input", "Str", "data", "fr", "cl", "l", "dec", "num", "oct", "text", "pr", "hr", "div", "f", "sp", "STR", "spec"], "stream": ["file", "method", "sw", "window", "client", "Stream", "w", "cur", "handler", "form", "string", "output", "socket", "loop", "log", "speed", "http", "channel", "this", "resource", "model", "document", "response", "port", "transform", "context", "input", "roll", "row", "object", "track", "stack", "trans", "pool", "forward", "engine", "src", "h", "process", "source", "body", "control", "down", "path", "thread", "ssl", "message", "feed", "buffer", "f", "server", "host", "round", "reader", "temp", "view", "progress", "through", "hold"], "buf": ["fab", "mem", "rc", " buff", "br", "lim", "img", "cmd", "uf", "bin", "bb", "ctx", "bd", "batch", "buff", "wb", "ab", "b", " bc", "queue", "cf", "port", "bu", "bc", "input", "temp", "cas", "map", "data", " aux", "fb", "src", "tmp", "Buff", "ff", "Buffer", "bed", "vec", "cat", "cv", "bag", "bh", "db", "fam", "buffer", "uc", "fd", "cap", "cb", "conv", "flush", "seq", "rb"], "curChar": ["CurCh", "serChar", "serCh", "curCharacter", "surCharacter", "CurCor", "surchar", "verchar", "curchar", " curCharacter", "serchar", "surCor", "CurChar", "CurInt", "serInt", " curchar", " curInt", "surByte", " curCh", " curCor", "curInt", "verCharacter", "curByte", "verChar", "surChar", "surCh", "curCor", "Curchar", " curByte", "CurByte", "verCh", "curCh"], "numChars": [" numChunks", "numPhashes", "umCards", "umCans", "numcharts", "numChards", "sumCars", "umChans", "numCards", "numQuunks", "numCarts", "numCans", "numChararts", "numQuars", "memChARS", " numchars", "sumChars", " numChARS", "sumChARS", "numCHards", "numchans", "numCHarts", "sumChards", "umChars", "numchashes", "numQuarts", "numQuARS", "memChars", " numcharts", "sumCards", "numCHars", "numCARS", "numChans", "numchunks", "memCHarts", "numCharars", "memCHars", " numCharts", "numchars", "numPhars", "numChashes", "numCHARS", "memChans", "sumCarts", "numchARS", "numPharts", "umCars", " numchashes", "numCHans", "memCharts", " numChashes", "numChARS", "numPhARS", "umChARS", "memCHARS", "numCharashes", "umCARS", "sumCARS", " numchARS", "memCHans", "numCharts", "numCars", "numChunks", "numCharARS", "numchards", "sumCharts", "umChards"], "filter": ["chain", "fac", "w", "fil", "handler", "bb", "p", "ac", " filtering", " filtered", "pass", "func", " filters", "b", " chain", " callback", " Filter", "proc", "map", "cl", "Filter", "buffer", " compressor", "f", "g", "cb", "conv", "ters"], "c": ["chain", "esc", "rc", "w", "cur", "cs", "char", "code", "word", "p", "C", "ac", "cc", "m", "sc", "enc", "loc", "r", "vc", "cr", "ec", "z", "lc", "b", "cont", "coll", "cf", "count", "xc", "bc", "rec", "ci", "ctrl", "cache", "cm", "arc", "cl", "l", "dec", "u", "e", "ce", "h", "x", "unc", "ct", "con", "d", "content", "y", "dc", "v", "mc", "character", "nc", "uc", "f", "cu", "abc", "cy", "g", "cb", "i", "k", "col"], "sgn": [" sagn", "sden", "psgn", "sesgn", "sesden", "sesGN", "psgin", "psagn", "sagn", " sGN", " sng", " sbn", "sesbn", "sbn", "psbn", "psng", "sGN", "sgin", "psGN", "sng", " sden", "psden", " sgin"], "res": ["results", "vals", "qs", "Res", "re", "cons", "ks", "css", "ms", "cs", "blocks", "rs", "cms", "ress", "result", "nos", "ents", "os", "rev", "js", "arr", "max", "ins", "Rs", "cases", "RES", "ns", "reset", "rss", "rem", "resp", "eps", "pre", "ps", "rys", "es", "ces", "ret", "ons", "resolution", "pres", "ries", "resh", "ras"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sca = new Scanner(System.in);\\n\t\tString str = sca.next();\\n\\n\t\tint result = 0;\\n\t\tfor(int i = 0; i < str.length(); i++) {\\n\t\t\tif(str.charAt(i) != str.charAt(str.length() - 1 - i)) {\\n\t\t\t\tresult++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(result/2);\\n\t}\\n}\\n", "target": "115", "substitutes": {}}
{"code": "import java.util.*;\\nimport static java.lang.Integer.*;\\nimport static java.lang.Long.*;\\nimport static java.lang.Math.*;\\nimport static java.lang.System.*;\\n\\npublic class Main {\\n\tpublic static int N = 3;\\n\tpublic static void main(String[] args) {\\n\t\tint i,j;\\n\t\tScanner sc = new Scanner(in);\\n\t\tint[] a = new int[3];\\n\t\ta[0] = parseInt(sc.next());\\n\t\ta[1] = parseInt(sc.next());\\n\t\ta[2] = parseInt(sc.next());\\n\t\tsc.close();\\n\t\tArrays.parallelSort(a);\\n\t\tif(a[0]==5&&a[1]==5&&a[2]==7) {\\n\t\t\tout.println(\"YES\");\\n\t\t} else {\\n\t\t\tout.println(\"NO\");\\n\t\t}\\n\t}\\n}\\n", "target": "16", "substitutes": {"N": ["K", "number", "I", "n", "Ns", "J", "C", "T", "NT", "nt", "A", "R", "D", "B", "Num", "L", "num", "M", "S", "P", "F", "OUT", "V", "Count", "NS", "NL", "Index", " n"], "i": ["I", "n", "p", "m", "ii", "index", "r", "b", "ai", "in", "ci", "l", "u", "c", "e", "x", "id", "d", "v", "key", "f", "o", "k"], "j": ["pos", "job", "ja", "n", "J", "p", "jump", "jo", "m", "r", "z", "js", "jj", "jl", "b", "ji", "obj", "q", "l", "je", "offset", "v", "key", "f", "o", "k", "jp"], "sc": ["pc", "esc", "scene", "rc", "ch", "cs", "search", "ca", "si", "cer", "sub", "cms", "ctx", "s", "cc", "ner", "cam", "sec", "soc", "cli", "tc", "this", "cr", "sq", "osc", "system", "sync", "lc", "coll", "in", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "sem", " SC", "sch", "scan", "uc", "f", "sp", "parser", "parse", "SC", "spec"], "a": ["missing", "tta", "ga", "ar", "ca", "parser", "at", "n", "code", "p", "oa", "ua", "ac", "alpha", "app", "na", "A", "sa", "ea", "ma", "an", "ab", "b", "action", "aux", "ai", "ae", "ba", "ata", "data", "pa", "da", "l", "aj", "u", "aw", "c", "e", "area", "am", "la", "va", "v", "aa", "as", "o", "auto", "array", "ama", "active", "au", "ad"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tArrayList<String> lines = new ArrayList<String>();\\n\t\tint c = 0;\\n\\n\t\twhile (true) {\\n\t\t\tString next = sc.nextLine();\\n\\n\t\t\tif (next.equals(\"0\")) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tlines.add(next);\\n\t\t\tc++;\\n\t\t}\\n\\n\t\tfor (int i = 0; i < c; i++) {\\n\t\t\tString s = lines.get(i);\\n\t\t\tint sum = 0;\\n\t\t\tfor (int j = 0; j < s.length(); j++) {\\n\t\t\t\tint in = Integer.parseInt(s.substring(j, j + 1));\\n\t\t\t\tsum += in;\\n\t\t\t}\\n\t\t\tSystem.out.println(sum);\\n\t\t}\\n\\n\t}\\n\\n}", "target": "144", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int D = sc.nextInt();\\n    int N = sc.nextInt();\\n    output(D, N);\\n  }\\n  public static void output(int D, int N) {\\n    if (N != 100) {\\n      System.out.println((int) (N * Math.pow(100, D)));\\n    } else {\\n      System.out.println((int) ((N + 1) * Math.pow(100, D)));\\n    }\\n  }\\n}\\n", "target": "245", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "com", "cc", "ner", "sec", "tc", "soc", "sync", "osc", "system", "cr", "ec", "sq", "lc", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "SC"], "D": ["O", "U", "E", "I", "WD", "ND", "DH", "C", "T", "FD", "IND", "BD", "A", "DE", "DM", "Q", "R", "Y", "CD", "JD", "DC", "Z", "B", "DB", "L", "DI", "DD", "M", "LD", "X", "Ds", "DL", "S", "d", "F", "DS", "P", "MD", "DP", "V", "DR", "DA", "DO", "Do", "DF", "DT"], "N": ["O", "K", "U", "E", "I", "Part", "NG", "Na", "n", "Ns", "ND", "Len", "C", "T", "Ni", "NT", "Ne", "NB", "G", "Max", "W", "NN", "Q", "Size", "R", "H", "Y", "NA", "Z", "Num", "L", "NM", "NI", "M", "NC", "X", "No", "NE", "S", "P", "F", "V", "NS", "NL", "MN", "RN", "Number", " n"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main{\\n  public static void main(String args[]) throws IOException{\\n   BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n   String line = br.readLine();\\n   String[] token = line.split(\"\");\\n\\n\\n   for (int i = 0; i < token.length; i++){\\n\t   if( Character.isUpperCase(line.charAt(i) )){\\n\t\t   token[i] = token[i].toLowerCase();\\n\t   }else if( Character.isLowerCase(line.charAt(i)) ){\\n\t\t   token[i] = token[i].toUpperCase();\\n\t   }\\n\t   System.out.print(token[i]);\\n   }\\n\\n   System.out.println();\\n\\n  }\\n}", "target": "192", "substitutes": {"br": ["io", "ch", "err", "Br", "ar", "brush", "bb", "tr", "er", "buf", "yr", "BR", "r", "browser", "cr", "arr", "abs", "b", "gr", "dr", "ocr", "bc", "obj", "mr", "fr", "stream", "HR", "src", "bs", "out", "bridge", "ber", "bro", "Reader", "ler", "str", "bh", "hr", "div", "orb", "reader", "cb", "bl", "rb"], "line": ["chain", "Line", "file", "inline", "number", "cell", "status", "LINE", "value", "string", "code", "word", "raw", "non", "name", "output", "header", "write", "log", "letter", "pass", "le", "sync", "sl", "base", "b", "lc", "side", "entry", "response", "lo", "in", "lines", "url", "end", "phase", "data", "row", "page", "lock", "cl", "l", "out", "zone", "text", "lin", "source", "id", "block", "body", "content", "parse", "style", "str", "message", "character", "buffer", "connection", "reader"], "token": ["network", "list", "number", "oken", "value", "string", "word", "char", "name", "color", "variable", "header", "socket", "strip", "part", "letter", "service", "vector", "index", "pass", "channel", "note", "sync", "digit", "bar", "tree", "response", "comment", "prefix", "url", "split", "level", "total", "sign", "scope", "Token", "password", "date", "type", "out", "text", "atom", "element", "source", "id", "uri", "tick", "block", "style", "column", "quote", "character", "seed", "key", "o", "rule", "project", "iter", "tag", "wt"], "i": ["xi", "gi", "I", "is", "io", "si", "n", "di", "ie", "iv", "p", "oi", "s", "cli", "m", "ii", "hi", "index", "j", "uli", "isi", "mu", "b", "lc", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "data", "q", "ri", "qi", "u", "bi", "c", "l", "e", "init", "iu", "eni", "ori", "it", "x", "pi", "h", "fi", "yi", "id", "uri", "d", "y", "v", "slice", "ix", "api", "vi", "key", "f", "o", "ui", "info", "k"]}}
{"code": "\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputReader in = new InputReader(System.in);\\n        PrintWriter w = new PrintWriter(System.out);\\n        long n = in.nextLong();\\n        StringBuilder result = new StringBuilder();\\n        while (n > 0) {\\n            n--;\\n            result.insert(0, (char) ('a' + n % 26));\\n            n /= 26;\\n        }\\n        w.println(result.toString());\\n        w.close();\\n    }\\n\\n    static class InputReader {\\n\\n        private final InputStream stream;\\n        private final byte[] buf = new byte[8192];\\n        private int curChar, snumChars;\\n        private SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int snext() {\\n            if (snumChars == -1)\\n                throw new InputMismatchException();\\n            if (curChar >= snumChars) {\\n                curChar = 0;\\n                try {\\n                    snumChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (snumChars <= 0)\\n                    return -1;\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = snext();\\n            while (isSpaceChar(c)) {\\n                c = snext();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = snext();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9')\\n                    throw new InputMismatchException();\\n                res *= 10;\\n                res += c - '0';\\n                c = snext();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public long nextLong() {\\n            int c = snext();\\n            while (isSpaceChar(c)) {\\n                c = snext();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = snext();\\n            }\\n            long res = 0;\\n            do {\\n                if (c < '0' || c > '9')\\n                    throw new InputMismatchException();\\n                res *= 10;\\n                res += c - '0';\\n                c = snext();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public int[] nextIntArray(int n) {\\n            int a[] = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                a[i] = this.nextInt();\\n            }\\n            return a;\\n        }\\n\\n        public long[] nextLongArray(int n) {\\n            long a[] = new long[n];\\n            for (int i = 0; i < n; i++) {\\n                a[i] = this.nextLong();\\n            }\\n            return a;\\n        }\\n\\n        public String readString() {\\n            int c = snext();\\n            while (isSpaceChar(c)) {\\n                c = snext();\\n            }\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = snext();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public String nextLine() {\\n            int c = snext();\\n            while (isSpaceChar(c))\\n                c = snext();\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = snext();\\n            } while (!isEndOfLine(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null)\\n                return filter.isSpaceChar(c);\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        private boolean isEndOfLine(int c) {\\n            return c == '\\n' || c == '\\r' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n        }\\n    }\\n}", "target": "191", "substitutes": {"in": ["din", "is", "err", "In", "bin", "arg", "name", "line", "s", "ac", "user", "log", "serv", "r", "inn", "t", "resource", "ini", "ins", "inf", "input", "inner", "readable", "rec", "data", "win", "read", "cl", "l", "init", "binary", "src", "conn", "out", "h", "lin", "source", "inc", "d", "path", "nin", "login", "connection", "f", "as", "reader", "IN", "con"], "w": ["wx", "wl", "sw", "window", "ww", "p", "s", "wa", "r", "wb", "t", "wh", "work", "W", "b", "writer", "ws", "wave", "tw", "ow", "war", "l", "u", "aw", "wal", "e", "out", "h", "wp", "nw", "d", "wt", "v", "fw", "f", "hw", "o", "g", "we", "wr", "iw", "rw"], "n": ["nu", "number", "nr", "pos", "non", "p", "nb", "s", "m", "nt", "cn", "na", "ne", "r", "j", "ln", "t", "z", "sn", "b", "N", "count", "nn", "size", "no", "ns", "nd", "l", "u", "num", "en", "fn", "e", "conn", "x", "dn", "d", "un", "v", "len", "nc", "f", "nl", "o", " p", "net", "g", "temp", "k"], "result": ["results", "table", "br", "builder", "err", "winner", "value", "string", "word", "line", "usr", "output", "part", "r", "memory", "report", "b", "response", "writer", "transform", "length", "comment", "manager", "url", "data", "row", "html", "page", "range", "fr", "Result", "out", "rh", "source", "sum", "str", "v", "message", "buffer", "ret", "json", "up", "runner", "array", "reader"], "stream": ["per", "file", "method", "sw", "iterator", "window", "Stream", "client", "cur", "handler", "form", "string", "raw", "output", "socket", "m", "user", "speed", "r", "null", "channel", "this", "resource", "model", "document", "view", "writer", "response", "length", "port", "input", "context", "transform", "rec", "data", "row", "track", "stack", "trans", "pool", "e", "src", "engine", "out", "h", "or", "source", "self", "control", "thread", "path", "ssl", "v", "feed", "buffer", "current", "f", "server", "host", "round", "reader"], "buf": ["rc", " buff", "br", "img", "bin", "uf", "ra", "bb", "gb", "ctx", "bd", "batch", "buff", "bg", "wb", "func", "ab", "b", "pb", "queue", "xff", "bu", "bc", "map", "data", " aux", "pool", "fb", "src", "tmp", "Buff", "ff", "Buffer", " buffer", "vec", "cv", "bag", "bh", "db", "buffer", "uc", "fd", "cap", "sb", "cb", "flush", "seq", "rb"], "curChar": ["CurCh", "serChar", "surInt", "serCh", "curCharacter", " CurByte", "urChar", "surchar", "crCh", "curchar", " curCharacter", "serchar", "CurChar", "CurInt", "crCharacter", "crPar", " curchar", "urPar", " curInt", " curCh", "curInt", "curByte", "curPar", "urCharacter", "surChar", "crChar", "surCh", " CurChar", "Curchar", " curByte", "serByte", "CurByte", " Curchar", " curPar", "urCh", " CurCh", "curCh"], "snumChars": ["snumColars", "snumChararts", "snumAcarts", "snumColacters", "snumCorARS", "snumberCHars", "snumCars", "snumchans", "snumCards", "snumChases", "snumCoracters", "snumCHarts", "snumChARS", "snomChases", "snumCHans", "snumchARS", "snumchars", "snumberChars", "snomCars", "snomCarts", "snumCorans", "snumChacters", "snomChars", "snomChards", "snumQuats", "snumechARS", "snumCharts", "snumberChashes", "snumsCarts", "snumCharases", "snumQuashes", "snumChats", "snumchacters", "snomCharts", "snumQuans", "snumeChARS", "snumsCats", "snumCats", "snumchards", "snumCans", "snumsChars", "snumCARS", "snumsChans", "snumChards", "snumsCacters", "snumberCHans", "snumAcans", "snumAcars", "snumCHashes", "snumechans", "snumechacters", "snumberChans", "snumAcacters", "snumChashes", "snumeChars", "snumQuarts", "snumsCans", "snumCHats", "snumCarts", "snumCorars", "snumCacters", "snumeChacters", "snumColans", "snumberCHashes", "snumechars", "snumberCharts", "snumberCHarts", "snumChans", "snumsCharts", "snumeChans", "snumColarts", "snumsCars", "snomCases", "snumQuars", "snomCards", "snumcharts", "snumsChacters", "snumCases", "snumchases", "snumsChats", "snumCharards", "snumCharars", "snumchashes", "snumCHars"], "filter": ["chain", "fac", "fil", "handler", "bb", "ref", "callback", "fp", "loader", "pass", "func", " filters", "proc", " Filter", "map", "cache", "fl", "fn", "bis", "orig", "Filter", "feed", "abc", "reg", "cb", "conv", "ters", "col"], "c": ["cur", "err", "ca", "cc", "b", "coll", "rec", "arc", "nc", "cp", "cu", "abc", "g", "pc", "chain", "fc", "rc", "char", "oc", "p", "ac", "loc", "vc", "ec", "lc", "cont", "count", "cache", "u", "conn", "h", "unc", "o", "col", "esc", "exc", "cs", "code", "ic", "s", "sec", "m", "enc", "cr", "xc", "cl", "l", "x", "inc", "dc", "mc", "anc", " rc", "C", "tc", "sc", "t", "z", "bc", "ci", "dec", "e", "ce", "ct", "d", "y", "v", "uc", "f", "cy", "k", "con"], "sgn": ["stringsgn", "isgp", "swin", "nsGN", " sagn", "stringsbn", "psgn", " swin", "asgen", "psgen", "psgp", "Swin", "isgen", "stringsgen", "sgain", "psgain", "nsgain", "asgin", "nsng", "smn", "sgen", "sagn", " sGN", "isgn", "isGN", " sng", "Sagn", "asgn", "psmn", " sbn", " sgain", "sbn", "psbn", "nsgn", "psng", "sGN", "sgp", " smn", "sgin", "Sgin", "stringsmn", "Sgn", " sgp", "psGN", "sng", "Sgen", "Sgp", "aswin", " sgin", " sgen"], "res": ["results", "vals", "qs", "Res", "re", "cons", "ks", "css", "err", "ms", "cs", "params", "blocks", "rs", "ress", "sol", "nos", "req", " results", "rev", "os", "pass", "bytes", "js", "arr", "ins", "rus", "values", "Rs", "response", "fields", "cases", "RES", "proc", "reset", "ns", "ris", "rss", "ches", "resp", "ps", "val", "rys", "rest", "es", "ces", "ret", "ons", "resolution", "reg", "pres", "ries", "details", "resh", " Res", "ras", "net"]}}
{"code": "import java.util.*;\\n\\n/**\\n * A\\n */\\n\\n// bubble sort\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        \\n        Scanner sc  = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        int count=0;\\n        int array[] = new int[n];\\n\\n        for(int i=0; i<n; i++) {\\n            array[i] = sc.nextInt();\\n        }\\n\\n        sc.close();\\n\\n        /**\\n        * 1 bubbleSort(A, N) // N \u500b\u306e\u8981\u7d20\u3092\u542b\u3080 0-\u30aa\u30ea\u30b8\u30f3\u306e\u914d\u5217 A\\n        * 2   flag = 1 // \u9006\u306e\u96a3\u63a5\u8981\u7d20\u304c\u5b58\u5728\u3059\u308b\\n        * 3   while flag\\n        * 4     flag = 0\\n        * 5     for j \u304c N-1 \u304b\u3089 1 \u307e\u3067\\n        * 6       if A[j] < A[j-1]\\n        * 7         A[j] \u3068 A[j-1] \u3092\u4ea4\u63db\\n        * 8         flag = 1\\n        */\\n\\n        boolean flag = true;\\n\\n        while(flag) {\\n\\n            flag = false;\\n            \\n            for(int j=n-1; j>=1; j--) {\\n\\n                if(array[j] < array[j-1]) {\\n\\n                    int tmp = array[j];\\n                    array[j] = array[j-1];\\n                    array[j-1] = tmp;\\n\\n                    count++;\\n                    flag = true;\\n                    \\n                }\\n\\n            }\\n\\n        }\\n\\n        for(int i=0; i<n; i++) {\\n            \\n            System.out.print(array[i]);\\n\\n            if(i != n-1) {\\n                System.out.print(\" \");\\n            }\\n\\n        }\\n\\n        System.out.println();\\n        System.out.println(count);\\n    \\n    }\\n}\\n", "target": "170", "substitutes": {}}
{"code": "import java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Map.Entry;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tString[] t  = sc.nextLine().split(\" \");\\n\t\tint n       = Integer.parseInt(t[0]);\\n\t\tint m       = Integer.parseInt(t[1]);\\n\t\tint a;\\n\t\tString b;\\n\t\tboolean[] x = new boolean[n];\\n\t\tArrays.fill(x, false);\\n\t\tMap<Integer, Integer> map = new HashMap<>();\\n\\n\t\tfor(int i = 0; i < m; i++) {\\n\\n\t\t\ta = sc.nextInt() - 1;\\n\t\t\tb = sc.next();\\n\t\t\tif(!x[a]) {\\n\t\t\t\tif(b.equals(\"WA\")) {\\n\t\t\t\t\tif(map.containsKey(a)) {\\n\t\t\t\t\t\tmap.put(a, map.get(a) + 1);\\n\t\t\t\t\t}else {\\n\t\t\t\t\t\tmap.put(a, 1);\\n\t\t\t\t\t}\\n\t\t\t\t}else {\\n\t\t\t\t\tx[a] = true;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tint c = 0;\\n\t\tint d = 0;\\n\\n\t\tfor(boolean q : x) {\\n\t\t\tif(q)c++;\\n\t\t}\\n\t\tfor(Entry<Integer, Integer> w : map.entrySet()) {\\n\t\t\tif(x[w.getKey()]) {\\n\t\t\t\td += w.getValue();\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(c + \" \" + d);\\n\t}\\n}", "target": "48", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "si", "sf", "ctx", "ner", "sec", "tc", "sync", "cr", "system", "sv", "osc", "sq", "lc", "st", " scr", "bc", "sci", "cle", "ss", "cus", "cl", "scope", "se", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "SC"], "t": ["at", "pt", "p", "T", "ft", "template", "s", "nt", "r", "txt", "te", "z", "st", "dt", "kt", "tt", "unt", "iter", "tty", "l", "lt", "u", "e", "tp", "it", "ts", "att", "ta", "tu", "ty", "rt", "qt", "y", "v", "ut", "ant", "tn", "tf", "f", "o"], "n": ["number", "p", "s", "cn", "ne", "j", "r", "mn", "z", "sn", "N", "in", "count", "nn", "no", "all", "min", "ns", "l", "u", "num", "e", "h", "y", "v", "len", "nc", "f", "o", "k"], "m": ["p", "fm", "s", "j", "r", "mn", "z", "hm", "in", "dm", "end", "cm", "l", "u", "en", "e", "M", "h", "y", "v", "f", "o", "g", "mm", "k"], "a": ["sta", "fa", "ak", "ga", "ar", "ca", "au", "p", "oa", "s", "ac", "ia", "alpha", "na", "r", "A", "sa", "ea", "ana", "ma", "an", "ab", "ai", "ae", "ba", "aka", "pa", "da", "aj", "u", "e", "af", "am", "area", "la", "va", "y", "api", "aa", "f", "as", "k"], "b": ["ga", "base", "bb", "p", "lb", "s", "eb", "part", "app", "r", "abb", "bp", "verb", "abs", "ab", "pb", "bar", "bu", "ba", "ob", "pa", "B", "l", "u", "bi", "mb", "e", "fb", "bs", "body", "bh", "y", "v", "bf", "f", "o", "sb", "g", "be", "cb", "orb", "k", "rb"], "x": ["xi", "per", "wx", "test", "list", "is", "xb", "xe", "p", "ic", "event", "s", "exp", "on", "co", "cross", "index", "na", "php", "z", "work", "rex", "xxxx", "xc", "xy", "rx", "xf", "data", "match", "ax", "cl", "mx", "e", "xa", "h", "xs", "X", "tx", "xes", "xx", "id", "nex", "y", "ix", "xxx", "v", "check", "ex", "sex", "xp", "f", "change", "o", "array", "g", "xml"], "map": ["prev", "per", "comb", "pm", "list", "ap", "table", "maps", "address", "code", "p", "set", "app", "pose", "copy", "work", "cover", "one", "ge", "mp", "hash", "replace", "MAP", "dict", "data", "cache", "pe", "use", "match", "lock", "pack", "move", "apper", "node", "state", "mx", "master", "module", "scale", "block", "open", "age", "pre", "down", "shape", "mm", "place", "change", "cap", "host", "array", "record", "view", "parse", "pad", "co"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "oi", "ii", "hi", "index", "j", "chi", "ni", "ini", "ai", "multi", "li", "ci", "ti", "ri", "u", "bi", "e", "iu", "it", "mi", "pi", "id", "ip", "y", "v", "ix", "f", "o", "ui"], "c": ["pc", "fc", "cur", "cs", "ca", "p", "C", "cc", "ac", "cd", "r", "cent", "z", "cr", "ec", "lc", "cf", "count", "bc", "ci", "cm", "da", "l", "u", "e", "ce", "h", "ct", "y", "v", "dc", "cp", "uc", "f", "cu", "nc", "o", "cy", "cb", "k", "con", "co"], "d": ["dd", "di", "dy", "p", "s", "bd", "cd", "pd", "j", "z", "dt", "ld", "ds", "dad", "in", "D", "dh", "da", "l", "u", "e", "did", "h", "dx", "id", "ct", "dl", "db", "v", "dc", "f", "dat", "fd", "o", "k", "sd", "ad"], "q": ["force", "core", "form", "p", "ic", "qq", "query", "s", "ve", "r", "complex", "qa", "z", "sq", "Q", "iq", "eq", "u", "quant", "e", "h", "self", "id", "y", "v", "ix", "like", "f", "o", "sh", "g", "k", "check"], "w": ["wx", "wl", "sw", "wo", "gen", "ew", "won", "p", "wd", "r", "wh", "z", "work", "W", "writer", "ws", "web", "data", "way", "tw", "ow", "l", "u", "aw", "e", "we", "h", "kw", "nw", "y", "wt", "v", "fw", "wan", "ex", "hw", "o", "g", "wall", " W", "k", "wal", "iw"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        Multiplication3 solver = new Multiplication3();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class Multiplication3 {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n\\n            String[] inputs = in.nextLine().split(\" \");\\n            long a = Long.parseLong(inputs[0]);\\n            long b = Long.parseLong(inputs[1].replaceAll(\"\\\\.\", \"\"));\\n\\n            out.append(String.valueOf(a * b / 100));\\n\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "15", "substitutes": {"inputStream": ["inputPath", "outputSocket", " inputSteam", "inputSocket", "InputPath", " inputSocket", "inputSteam", "outputstream", "outputPath", "InputStream", "inputstream", "InputSteam", " inputstream", " inputPath", "Inputstream", "InputSocket", "outputSteam"], "outputStream": ["responseStreamer", "inputStreamer", "OutputWriter", "responseWriter", " outputForm", "outputWriter", "outputStreamer", "inputSteam", "inputForm", " outputSteam", "OutputStreamer", "outputstream", "OutputForm", "responseStream", "responseSteam", "Outputstream", " outputstream", "inputstream", "inputWriter", "OutputSteam", "outputForm", "OutputStream", "outputSteam"], "in": ["din", "pin", "io", "w", "err", "In", "bin", "n", "arg", "request", "s", "log", "on", "r", "ln", "this", "cin", "ini", "config", "ins", "inside", "inf", "input", "inner", "kin", "image", "url", "data", "sin", "win", "vin", "min", "read", "l", "rin", "c", "init", "conn", "x", "lin", "source", "reading", "id", "inc", "con", "ssl", "gin", "again", "nin", "login", "isin", "ex", "arin", "as", "spin", "reader", "i", "IN", "inn"], "out": ["io", "err", "arg", "exit", "user", "index", "null", "sync", "outs", "copy", "lib", "inner", "data", "session", "page", "outer", "password", "pool", "ou", "OUT", "off", "scan", "call", "is", "window", "w", "job", "bin", "string", "name", "line", "write", "socket", "log", "error", "cache", "extra", "conn", "ex", "plus", "o", "n", "output", "this", "scope", "init", "self", "inc", "to", "server", "flush", "Out", "exec", "file", "parent", "timeout", "client", "version", "exp", "writer", "image", "obj", "point", "again", "connection", "up", "net", "temp", "IN"], "solver": ["ssolve", "ssolution", "solution", " solution", "insolve", "Solve", "sol", " solve", "Solution", "Saver", "ssolver", "insol", "Solver", "ssol", "insolution", "Sol", "saver", " saver", "solve", "insolver", "ssaver"], "testNumber": [" testnumber", "TestNumber", "testNum", "TestNumbers", " trialnumber", " trialNumber", " trialNumbers", "testnumber", " testNum", "Testnumber", " testNumbers", "TestNum", " trialNum", "testNumbers"], "inputs": ["inputls", " inpute", "inpute", "Inputls", "Inputlines", " inputos", "integs", "Inputs", "intege", "selects", "inputS", "Inpute", "Inputos", "InputS", "Inputwords", " inputS", "selectlines", "columns", "inputwords", "selectls", "columnlines", "columnwords", "inputlines", " inputwords", "selectS", " inputlines", " inputls", "inputos", "integS", "columnos"], "a": ["sta", "fa", "ga", "ca", "n", "asha", "p", "oa", "ua", "alpha", "ac", "ada", "A", "sa", "ea", "ma", "an", "ab", "ae", "ba", "aka", "pa", "da", "aj", "c", "area", "x", "la", "asa", "d", "va", "y", "za", "aa", "abc", "ama", "i", "ad"], "b": ["xb", "bin", "n", "bb", "p", "s", "nb", "lb", "bd", "eb", "bot", "zb", "abb", "z", "ab", "bc", "ba", "ob", "pa", "B", "l", "u", "c", "fb", "bs", "x", "bis", "d", "y", "v", "bf", "aa", "f", "o", "sb", "g", "be", "cb", "i", "ad", "rb"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = 0;\\n\\n\t\twhile(1+c*(a-1) < b) c++;\\n\\n\t\tSystem.out.println(c);\\n\t}\\n}", "target": "101", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "com", "cc", "ner", "tc", "sec", "acc", "enc", "sync", "osc", "cr", "sq", "ec", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "Sc", "asc", "cv", " SC", "sch", "dc", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "a": ["w", "ca", "n", "p", "s", "ac", "alpha", "aaa", "m", "r", "A", "sa", "z", "an", "ab", "count", "ae", "ba", "da", "l", "u", "e", "area", "x", "h", "next", "d", "y", "va", "aa", "f", "as", "i"], "b": ["w", "ca", "n", "base", "bb", "p", "s", "ac", "lb", "eb", "j", "r", "A", "z", "ab", "bc", "ba", "B", "l", "e", "fb", "ad", "bs", "x", "h", "d", "y", "v", "aa", "bf", "f", "o", "sb", "g", "cb", "i", "k"], "c": ["pc", "fc", "rc", "ch", "cur", "cs", "ca", "n", "code", "p", "C", "ac", "cc", "m", "cd", "z", "ec", "cr", "ab", "lc", "cf", "count", "xc", "ci", "cm", "l", "u", "e", "ad", "ce", "x", "unc", "ct", "inc", "d", "y", "dc", "aa", "cp", "uc", "f", "cu", "nc", "cy", "g", "cb", "i", "k", "col"]}}
{"code": "\\nimport java.util.*;\\nimport java.text.*;\\n\\n\\npublic class Main\\n{\\n\tpublic static void main(String[] args)\\n\t{\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint counter = 0;\\n\t\t// # of friends\\n\t\tint a = sc.nextInt();\\n\t\t// min height\\n\t\tint b = sc.nextInt();\\n\\n\\n\t\tfor(int i = 1; i <= a ; i++)\\n\t\t{\\n\t\t\t// height in cm.\\n\t\t\tint c = sc.nextInt();\\n\t\t\t\tif(c >= b)\\n\t\t\t\t{\\n\t\t\t\t\tcounter++;\\n\\n\t\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(counter);\\n\t}\\n}", "target": "145", "substitutes": {"sc": [" src", "sf", "s", "an", "ann", " ser", " scr", " err", "ss", " arr", " subp", "Sc", " SC", " res", " ans", "scan", " scorer", " Sc", " iter", " cont", "Scan", " sl", "sb", " rc", " scans", "parser", "SC", "gram"], "counter": ["number", "parent", "handler", "name", "timer", "loop", "result", "loader", "skip", "entry", "bar", "pointer", "count", "inner", "error", "match", "instance", "page", "inter", "num", "Counter", "trace", "offset", "buffer", "server", "time", "parser"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n \\n\tpublic static final MyScanner in = new MyScanner();\\n \\n\tpublic static void main(String[] args) {\\n \\n\t\tchar[] s = in.nextLine().toCharArray();\\n\t\tSystem.out.println(s[0] == s[1] && s[0] == s[2] ? \"No\" : \"Yes\");\\n\t}\\n\\n\tpublic static class MyScanner{\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString nextLine() {return sc.nextLine();}\\n\t\tString next() {return sc.next();}\\n\t\tint nextInt() {return Integer.valueOf(sc.next());}\\n\t\tlong nextLong() { return Long.valueOf(sc.next());}\\n\t}\\n\\n}", "target": "76", "substitutes": {"in": ["exec", "din", "is", "io", "err", "In", "ar", "bin", "n", "line", "cli", "m", "world", "r", "inn", "ini", "doc", "ins", "rin", "inf", "kin", "inner", "input", "data", "win", "min", "ax", "l", "init", "conn", "out", "x", "lin", "source", "inc", "again", "login", "isin", "iner", "ex", "f", "arin", "as", "reader", "i", "IN", "con"], "s": ["a", "parts", "hs", "qs", "is", "si", "n", "string", "blocks", "raw", "p", "line", "aws", "gs", "r", "t", "sync", "abs", "b", "ls", "tests", "ds", "ins", "lines", "ss", "ws", "its", "ns", "l", "u", "c", "ses", "e", "su", "xs", "ts", "words", "S", "str", "y", "es", "f", "plus", "as", "us", "o", "array", "ans", "i", "strings"], "sc": ["pc", "esc", "scl", "fc", "rc", "ch", "cur", "cs", "ca", "cer", "sr", "com", "cli", "cc", "ner", "tc", "soc", "enc", "loc", "sync", "cr", "osc", "ec", "lc", "ocr", "coll", "cont", "usc", "bc", "sci", "spec", "ss", "ci", "cus", "cmp", "cl", "scope", "se", "c", "src", "isc", "Sc", "asc", "sche", "ct", "cv", " SC", "dc", "sch", "console", "scan", "nc", "uc", " Sc", "sp", "SC", "scene"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try (InputReader in = new InputReader(); PrintWriter out = new PrintWriter(System.out)) {\\n            new Main().solve(in, out);\\n        }\\n    }\\n\\n    private void solve(InputReader in, PrintWriter out) {\\n        ArrayList<Integer> list = new ArrayList<>();\\n        list.add(in.nextInt());\\n        list.add(in.nextInt());\\n        list.add(in.nextInt());\\n        list.add(in.nextInt());\\n        list.add(in.nextInt());\\n\\n        ArrayList<Integer> nextTImeList = new ArrayList<>();\\n        for (Integer i : list) {\\n            nextTImeList.add((i % 10 == 0) ? i : i - (i % 10) + 10);\\n        }\\n\\n        int min = Integer.MAX_VALUE;\\n        for (int i = 0; i < list.size(); i++) {\\n            int sum = 0;\\n            for (int j = 0; j < list.size(); j++) {\\n                sum += (i == j) ? list.get(j) : nextTImeList.get(j);\\n            }\\n\\n            min = Math.min(min, sum);\\n        }\\n\\n        out.println(min);\\n    }\\n}\\n\\nclass InputReader implements AutoCloseable {\\n    private final Scanner sc = new Scanner(System.in);\\n\\n    String next() {\\n        return this.sc.next();\\n    }\\n\\n    int nextInt() {\\n        return Integer.parseInt(this.sc.next());\\n    }\\n\\n    long nextLong() {\\n        return Long.parseLong(this.sc.next());\\n    }\\n\\n    double nextDouble() {\\n        return Double.parseDouble(this.sc.next());\\n    }\\n\\n    @Override\\n    public void close() {\\n        this.sc.close();\\n    }\\n}\\n", "target": "63", "substitutes": {"in": ["din", "file", "re", "io", "pin", "is", "err", "In", "bin", "string", "version", "raw", "line", "er", "inf", "s", "cli", "socket", "world", "index", "r", "inn", "this", "cin", "ini", "b", "ins", "rin", "image", "kin", "input", "inner", "inside", "url", "data", "readable", "win", "vin", "l", "between", "c", "stream", "init", "binary", "lin", "source", "self", "id", "inc", "d", "path", "gin", "again", "nin", "login", "buffer", "connection", "ex", "f", "plus", "as", "arin", "info", "reader", "IN", "con"], "out": ["Out", "dump", "file", "exec", "is", "io", "window", "w", "client", "png", "err", "gen", "bin", "value", "string", "name", "line", "output", "write", "cli", "home", "log", "result", "exp", "this", "outs", "copy", "max", "writer", "input", "inner", "prefix", "error", "data", "obj", "cache", "extra", "pool", "c", "init", "conn", "ou", "ext", "print", "source", "path", "OUT", "str", "again", "buffer", "ex", "key", "connection", "to", "o", "up", "array", "temp", "view", "IN"], "list": ["chain", "test", "collection", "table", "load", "is", "parent", "get", "code", "base", "name", "set", "cli", "loop", "low", "diff", "batch", "part", "index", "null", "counter", "none", "st", "pair", "copy", "lc", "entry", "this", "queue", "tree", "cont", "coll", "count", "lv", "li", "lists", "data", "cache", "all", "map", "range", "stack", "full", "cl", "lock", "l", "pool", "other", "it", "type", "and", "listed", "last", "la", "left", "pre", "key", "add", "array", "info", "view", "LIST", "we", "bl", "sequence"], "nextTImeList": ["nextTImeL", "nextPImeL", "nextTIMEList", "nextTIMEL", "nextTIpeList", "nextTIMEString", "nextPIMEL", "nextPIMeMap", "nextTImeString", "nextTImesMap", "nextTImesList", "nextTImesString", "nextTImeArray", "nextTIMEArray", "nextTIMeMap", "nextPIMEArray", "nextPImeString", "nextTIMeString", "nextPIMeList", "nextTIpeArray", "nextPIMEQueue", "nextTIpeQueue", "nextPImeArray", "nextTIMeArray", "nextTImeMap", "nextPImeQueue", "nextTIMEQueue", "nextTIpeL", "nextTImesArray", "nextPImeList", "nextPImeMap", "nextPIMeString", "nextTIMEMap", "nextPIMeArray", "nextTImeQueue", "nextTIMeL", "nextTIMeList", "nextPIMeL", "nextPIMEList", "nextTImesL", "nextTIMeQueue"], "i": ["xi", "gi", "a", "I", "io", "si", "n", "ie", "di", "p", "oi", "abi", "ii", "hi", "index", "ni", "z", "mini", "ini", "ai", "length", "phi", "ji", "li", "ci", "ti", "ik", "q", "zi", "l", "qi", "u", "bi", "ri", "c", "e", "ori", "iu", "it", "eni", "mi", "pi", "x", "yi", "fi", "h", "id", "ip", "uri", "d", "y", "v", "ix", "uni", "vi", "f", "o", "ui", "start", "k"], "min": ["span", "sort", "mini", "partial", "lower", "rand", "lock", "lt", "id", "scale", "left", "len", "round", "just", "start", "cut", "pop", "minimum", "pos", "mit", "unit", " minimum", "MAX", "me", "cross", "js", "ind", "count", "iss", "mean", "li", "sign", "area", "pm", "n", "value", "sol", "average", "m", "skip", " Min", "conf", "ss", "now", "size", "small", "miss", "sin", "aj", "Min", "init", "limit", "next", "mod", "div", "mins", "MIN", "sub", "version", "diff", "part", "serv", "default", "mine", "none", "max", "Mini", "d", "val", "slice", "key", "shift"], "sum": [" sums", "um", "si", "sub", "value", "bin", "sort", "diff", "average", "alpha", "ums", "sec", "part", "sa", " summ", "Sum", "mass", "max", "conf", "count", "av", "mean", "cum", "error", "size", "total", "use", "sign", "miss", "ass", "pack", "sam", "norm", "num", "am", "su", "scale", "inc", "spread", "key", " Sum", "sim", "vol", "sh", "dot", "summary", "up", "mem", "cost", "cal"], "j": ["xi", "bj", "ch", "w", "ja", "si", "n", "ie", "dj", "J", "p", "m", "jo", "ii", "ij", "z", "js", "jj", "jl", "b", "ji", "li", "obj", "all", "q", "l", "qi", "u", "oj", "aj", "bi", "e", "c", "it", "ori", "other", "last", "x", "h", "pr", "next", "uj", "d", "je", "y", "v", "key", "f", "o", "k", "jp"], "sc": ["pc", "esc", "fc", "sw", "rc", "ch", "desc", "cs", "ser", "sub", "si", "cer", "cor", "ca", "com", "cam", "cc", "sec", "tc", "exp", "enc", "loc", "sa", "sync", "cr", "system", "osc", "ec", "lc", "cont", "coll", "bc", "sci", "ss", "ci", "cm", "cus", "cl", "scope", "se", "dec", "c", "isc", "src", "Sc", "asc", "sche", "sem", "gc", "cv", "sch", "dc", "mc", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "reader", "parser", "parse", "SC", "co"]}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    void run() {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        int[] aArr = new int[n];\\n        int[] bArr = new int[n];\\n        int[] cArr = new int[n - 1];\\n\\n        for (int i = 0; i < n; i++) {\\n            aArr[i] = sc.nextInt() - 1;\\n        }\\n        for (int i = 0; i < n; i++) {\\n            bArr[i] = sc.nextInt();\\n        }\\n        for (int i = 0; i < n - 1; i++) {\\n            cArr[i] = sc.nextInt();\\n        }\\n\\n        int sum = 0;\\n        sum += bArr[aArr[0]];\\n        for (int i = 1; i < n; i++) {\\n            sum += bArr[aArr[i]];\\n            boolean hoge = aArr[i - 1] + 1 == aArr[i];\\n            if (hoge) {\\n//                System.out.println(i + \" x\");\\n                sum += cArr[aArr[i] - 1];\\n            }\\n        }\\n\\n        // write your code\\n        System.out.println(sum);\\n    }\\n\\n    void debug(Object... os) {\\n        System.err.println(Arrays.deepToString(os));\\n    }\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n}\\n", "target": "223", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cs", "ser", "cor", "sub", "cer", "sf", "screen", "com", "cli", "cc", "ner", "tc", "sec", "soc", "loc", "sync", "system", "cr", "osc", "ec", "lc", "cont", "coll", "ck", "bc", "sci", "ss", "cus", "cl", "se", "c", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", "uc", " Sc", "anc", "sh", "sp", "sb", "parse", "SC", "squ"], "n": ["a", "network", "number", "w", "nat", "zn", "non", "p", "nb", "s", "m", "nt", "cn", "na", "ne", "j", "r", "nan", "ln", "t", "none", "z", "sn", "an", "b", "N", "in", "count", "nn", "no", "size", "ns", "not", "l", "u", "num", "c", "en", "e", "init", "h", "x", "dn", "d", "y", "v", "len", "nc", "f", "o", "net", "k", "inn"], "aArr": [" aArw", "bErd", "aarp", " aEnn", "aCorr", "aCorner", "aArp", "aAttc", "caUrr", "aErp", "cArner", "aarre", "caArr", "caArner", "caUrner", "aarr", "aCordr", "aARw", "aErner", " aEnw", "aArd", "caUrar", "bErp", "aarrrn", "bErdr", "aArner", "aArar", " aArdr", " aEndr", "cErre", "aUrr", "caArar", "aErrn", "bArner", "cArp", "aEnn", "bErr", "aErb", "aArdr", "aArn", "aARner", "aarner", "aarrn", "cArre", "bErner", "aErdr", "caArc", "aArb", "bArd", "bArb", "aArc", "aarn", "aAttner", "aEndr", "aARr", " aArn", "aUrner", "aErr", "aErd", "aArw", " aEnr", "bArp", "aARb", "aARdr", "aarrd", "aARp", "aAttar", "bArrn", "aard", "aarrr", "aArrn", "cErr", "aardr", "aEnw", "bErrn", "aErre", "bArdr", "aarw", "aAttr", "aArre", "cErner", "aUrc", "aarrner", "aCorp", "aARn", "aUrar", "caUrc", "aEnr", "cErp"], "bArr": ["bArrange", " bArrc", "aArp", "bARrange", "bUrrc", "bARn", "bARrc", "bUrc", "bUrdr", " bArar", "bAcv", "bErp", "baseArrc", "baseARn", "bAcner", "bErdr", "aArner", "aArar", "barrrange", "bUrp", "bArner", "bArar", "bUrrange", "bErr", "bARar", "aArdr", "bARr", "barr", "barrr", "aArc", "bDarr", "baseARrange", "bAcar", "bDarar", "baseARrc", "barar", "barv", "bArv", "bUrr", "bArp", "bAcr", "barner", "bArn", "bArc", "bArdr", "bARner", "bErc", "bDarner", "barrrc", " bArner", "bUrn", "baseArrange", "baseArn", "bArrc", "baseARr", "baseArr", "barrn", "aArv", "bDarrc"], "cArr": ["cArrayrc", "kARdr", "bArc", "cARn", "kARn", "cArrayp", "cArrayre", "bAttp", "bAttr", "kArre", "cAttc", "kArr", "bAttrc", "cArp", "bAttc", "cARdr", "cAttr", "cArrayn", "cArrayc", "cIntr", "cIntdr", "cArraydr", "kARre", "cArn", "bArrc", "bArp", "cArre", "cArrc", "cARr", "cArdr", "cIntn", "kArdr", "kARr", "cIntre", "cAttrc", "cARre", "kArn", "cArc", "cAttp", "cArrayr"], "i": ["gi", "xi", "a", "I", "ei", "io", "si", "ie", "di", "p", "oi", "cli", "abi", "ii", "hi", "chi", "j", "index", "ni", "z", "mini", "ini", "mu", "b", "ai", "phi", "ji", "multi", "li", "ti", "ci", "inner", "ik", "ri", "qi", "u", "bi", "c", "e", "ori", "iu", "it", "eni", "mi", "pi", "x", "yi", "fi", "init", "id", "ip", "uri", "y", "ix", "v", "api", "f", "ui", "o", "info", "start"], "sum": ["fill", "weight", "um", "space", "unit", "volume", "diff", "alpha", "average", "ums", "part", "index", "Sum", "mass", "max", "start", "conf", "count", "comment", "mean", "ss", "error", "size", "total", "use", "miss", "sign", "ass", "all", "frac", "num", "c", "init", "share", "su", "scale", "depth", "offset", "spread", "seed", "shift", "div", "vol", "plus", "add", "sh", "summary", "info", "cost", "parse"], "hoge": ["Hoge", "woze", "hogment", "HOze", " hoges", "hose", "hoges", "Hoging", "hoging", "Hose", "hoze", "wogment", "HOge", "Hoze", "HOgh", "hige", "Hogh", "higing", "higes", "hogh", "HOgment", " hose", "hise", "woge", "wogh", " hoging", "Hoges", "Hogment"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author niko\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        Task solver = new Task();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class Task {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            String c = in.readString();\\n            if (c.charAt(0) >= 'A' && c.charAt(0) <= 'Z') {\\n                out.println('A');\\n            } else\\n                out.println('a');\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private final InputStream stream;\\n        private final byte[] buf = new byte[8192];\\n        private int curChar;\\n        private int snumChars;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (snumChars == -1)\\n                throw new InputMismatchException();\\n            if (curChar >= snumChars) {\\n                curChar = 0;\\n                try {\\n                    snumChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (snumChars <= 0)\\n                    return -1;\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public String readString() {\\n            int c = read();\\n            while (isSpaceChar(c)) c = read();\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n    }\\n}\\n\\n", "target": "80", "substitutes": {"inputStream": ["outputSync", " inputSync", "audioSteam", "outputSc", " inputSteam", "InputSc", "audioStream", "inputSteam", "audioSc", "audiostream", "outputstream", "InputSync", "inputSync", "InputStream", "inputstream", "InputSteam", " inputstream", "inputSc", "Inputstream", "outputSteam"], "outputStream": ["outStreamer", "inputStreamer", "OutputWriter", "outStream", "protectedSteam", "outputWriter", "outputStreamer", "protectedWriter", "inputSteam", "protectedStream", " outputSteam", "OutputStreamer", "protectedStreamer", "inputWriter", "OutputSteam", "outSteam", " outputStreamer", " outputWriter", "outWriter", "OutputStream", "outputSteam"], "in": ["a", "exec", "din", "pin", "io", "is", "err", "In", "gen", "bin", "n", "request", "arg", "er", "s", "ac", "socket", "user", "log", "r", "inn", "this", "cin", "resource", "ini", "config", "ins", "inside", "inf", "input", "inner", "url", "image", "rin", "data", "sin", "win", "vin", "read", "min", "l", "init", "conn", "x", "lin", "source", "id", "inc", "d", "path", "gin", "again", "nin", "login", "ex", "f", "info", "reader", "i", "IN", "con"], "out": ["plain", "io", "err", "word", "exit", "user", "sync", "outs", "copy", "b", "inner", "data", "page", "lock", "outer", "pool", "it", "OUT", "off", "buffer", "table", "window", "w", "bin", "string", "raw", "name", "line", "write", "socket", "log", "memory", "error", "cache", "extra", "conn", "ext", "ex", "o", "ch", "at", "output", "s", "pass", "this", "comment", "init", "x", "process", "inc", "to", "server", "i", "Out", "exec", "file", "list", "parent", "timeout", "client", "group", "exp", "serv", "r", "writer", "post", "prefix", "obj", "source", "again", "v", "connection", "up", "net", "temp"], "solver": ["ssolve", "ssolution", "solution", "insolve", "Solve", "ssolving", "sol", "solving", " solve", "Solution", "ssolver", "insol", "Solver", "insolution", "Sol", " solving", "solve", "insolver", "Solving", "insolving", " sol"], "testNumber": [" testnumber", "TestNumber", "testNum", "TestNumbers", " trialnumber", " trialNumber", " trialNumbers", "testnumber", " testNum", "Testnumber", " testNumbers", "TestNum", " trialNum", "testNumbers"], "c": ["a", "pc", "esc", "fc", "rc", "ch", "cur", "err", "cs", "char", "n", "code", "string", "ca", "word", "p", "C", "ic", "s", "cc", "ac", "tc", "m", "sc", "enc", "loc", "r", "vc", "t", "cr", "ec", "z", "b", "lc", "cf", "coll", "count", "bc", "xc", "ci", "cache", "cm", "arc", "cl", "l", "dec", "u", "e", "ce", "h", "x", "unc", "ct", "content", "d", "inc", "y", "dc", "v", "mc", "nc", "uc", "f", "cu", "abc", "o", "cy", "g", "i", "k", "col"], "stream": ["per", "file", "method", "sw", "load", "window", "w", "Stream", "get", "client", "handler", "form", "string", "output", "socket", "loop", "http", "channel", "this", "resource", "system", "model", "document", "post", "port", "transform", "input", "context", "level", "data", "row", "object", "stack", "trans", "pool", "e", "forward", "engine", "src", "wrapper", "self", "source", "open", "body", "control", "down", "path", "ssl", "v", "message", "feed", "buffer", "ack", "f", "server", "plus", "host", "from", "round", "reader", "view", "through", "hold"], "buf": ["comb", "fab", "exc", "rc", " buff", "br", "lim", "cur", "uf", "gb", "bb", "ctx", "bd", "buff", "bg", "wb", "bp", "cr", "ab", "b", "pb", "queue", "cf", "xff", "bu", "bc", "map", "data", "pool", "fb", "src", "tmp", "Buff", "ff", "Buffer", " buffer", "vec", "la", "cv", "bag", "bh", "db", "box", "buffer", "bf", "uc", "fd", "cap", "abc", "cb", "conv", "seq", "pad", "rb"], "curChar": ["CurCh", "serChar", "serCh", "curCharacter", "srCor", "srDouble", "crCh", "serCharacter", "curchar", " curCharacter", "serchar", "surCor", "CurChar", "crCharacter", " curchar", "constchar", "CurCharacter", "CurVar", "constChar", " curCh", " curCor", "constCh", "curDouble", " curVar", "surChar", "crChar", "srchar", "surCh", "srVar", "curCor", "crchar", "Curchar", "constCharacter", " curDouble", "curVar", "srChar", "surDouble", "curCh", "srCh"], "snumChars": ["snumbcharts", "snumbChrs", "snumChar", "snumHar", "snumColars", "snubChar", "snubChars", "snumCars", "snumchans", "snumChases", "snumInsticks", "snumCHarts", "snumCHans", "snumChares", "snubSkannels", "snumchars", "snomChares", "snomCars", "snomCarts", "snomChars", "snumCHarters", "snumChrs", "snumCharts", "snumSkannels", "snomCares", "snumbchats", "snumerChards", "snumchats", "snubSkar", "snomChats", "snumbchases", "snumbCharts", "snumerInstats", "snumChats", "snubCharters", "snomCharts", "snumerChats", "snumSkars", "snumNarts", "snumCats", "snumHannels", "snumchards", "snumCans", "snumChards", "snumerInsticks", "snumCares", "snumInstards", "snumColats", "snumChannels", "snumColases", "snumCharters", "snumChicks", "snumSkar", "snubSkarters", "snumCHats", "snumchicks", "snumCHannels", "snumerInstars", "snumCarts", "snumHarters", "snumbchans", "snumCHases", "snumNares", "snumchrs", "snumColrs", "snubChannels", "snumerInstards", "snumChans", "snumNats", "snumSkarters", "snumbChases", "snumNars", "snomCats", "snubSkars", "snumbChans", "snumInstats", "snumHars", "snumcharts", "snumbchrs", "snumerChicks", "snumchases", "snumerChars", "snumbchars", "snumbChats", "snumInstars", "snumCHar", "snumbChars", "snumCHrs", "snumCHars"], "res": ["results", "vals", "rc", "Res", "re", "is", "ks", "css", "ms", "cs", "rs", "p", "ress", "s", "RS", "result", "ros", "nos", "rev", "r", "js", "arr", "gr", "rex", "response", "rus", "Rs", "RES", "obj", "mr", "reset", "ris", "ns", "rss", "bs", "resp", "str", "rys", "rez", "ret", "as", "resolution", "us", "reg", "pres", " Res", "details", "ras"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n        Scanner s = new Scanner(System.in);\\n        System.out.println((char)(s.next().charAt(0)+1));\\n\\n    }\\n\\n}\\n\\n\\n\\n\\nclass Scanner\\n{\\n    StringTokenizer st;\\n    BufferedReader br;\\n\\n    public Scanner(InputStream s){\tbr = new BufferedReader(new InputStreamReader(s));}\\n\\n    public String next() throws IOException\\n    {\\n        while (st == null || !st.hasMoreTokens())\\n            st = new StringTokenizer(br.readLine());\\n        return st.nextToken();\\n    }\\n\\n    public int nextInt() throws IOException {return Integer.parseInt(next());}\\n\\n    public long nextLong() throws IOException {return Long.parseLong(next());}\\n\\n    public String nextLine() throws IOException {return br.readLine();}\\n\\n    public double nextDouble() throws IOException\\n    {\\n        String x = next();\\n        StringBuilder sb = new StringBuilder(\"0\");\\n        double res = 0, f = 1;\\n        boolean dec = false, neg = false;\\n        int start = 0;\\n        if(x.charAt(0) == '-')\\n        {\\n            neg = true;\\n            start++;\\n        }\\n        for(int i = start; i < x.length(); i++)\\n            if(x.charAt(i) == '.')\\n            {\\n                res = Long.parseLong(sb.toString());\\n                sb = new StringBuilder(\"0\");\\n                dec = true;\\n            }\\n            else\\n            {\\n                sb.append(x.charAt(i));\\n                if(dec)\\n                    f *= 10;\\n            }\\n        res += Long.parseLong(sb.toString()) / f;\\n        return res * (neg?-1:1);\\n    }\\n\\n    public boolean ready() throws IOException {return br.ready();}\\n\\n\\n}", "target": "150", "substitutes": {"s": ["fs", "less", "a", "is", " streams", "cs", "si", "n", "sf", "p", "ings", "er", "sc", "serv", "gs", "os", "r", "sa", "t", "sync", "sv", "sl", "js", "sq", "south", "b", "ls", "storage", "ds", "ins", "in", "iss", "lines", "ss", "ws", "Server", "its", "ns", "se", "l", "c", "ers", "ses", "e", "src", "ing", "bs", "h", "bis", "or", "Socket", "Input", "S", "d", "ssl", "ps", "es", "services", "server", "strings"], "st": ["sw", "sta", "string", "pt", "stop", "p", "store", "ste", "sts", "struct", "ft", "nt", "sc", " est", "sth", "r", "inst", "sa", "est", "t", "stri", "sl", "sn", "ost", "b", "fe", "ld", "std", "ss", "stable", "fr", "cl", "nd", "l", "se", "ast", "ist", "lt", "src", "stress", "bt", "pr", "ct", "rt", "art", "str", "ust", "rest", "ut", "const", "sh", "sp", "ST", "be", "rd", "bl", "St"], "br": ["prev", "bre", "bn", "ver", "kr", " str", "ro", "err", "Br", "ar", "shr", "img", "rs", "ref", "tr", "p", "sr", "er", "sts", "buf", "bb", "yr", "ner", "vr", "BR", "bm", " r", "fin", "r", "browser", "bp", "cr", "arr", "b", "gr", "bar", "dr", "bc", "mr", "fr", " tr", " dr", "src", "bs", "ber", "bridge", "rib", "pr", "bro", "lr", "repl", "bt", "or", "next", "fore", "wr", "rt", "str", "bh", "db", "rest", " barr", "cro", "hr", "sp", "reader", "ur", "bl", "rb"], "x": ["xi", "wx", "px", "w", "xb", "xe", "n", "string", "p", "xt", "exp", "co", "fx", "cross", "index", "php", "t", "sync", "z", "work", "b", "view", "rex", "xy", "xc", "rx", "xf", "data", "lex", "pe", "ax", "l", "u", "c", "e", "xa", "xes", "xs", "tx", "X", "python", "xx", "str", "y", "ix", "xxx", "v", "check", "ex", "sex", "plus", "o", "xml"], "sb": ["sbm", "bj", "xb", "hub", "si", "bb", "sf", "gb", "buf", "lb", "nb", "bd", "bm", "eb", "dB", "buff", "sth", "zb", "SB", "bg", "soc", "sa", "wb", "abb", "bp", "sv", "sq", "ib", "b", "ls", "pb", "lab", "lib", "bc", "sg", "bsp", "ub", "ob", "mb", "fb", "src", "rob", "bs", "su", "bt", "usb", "bps", "obb", "sm", "gc", "vt", "kb", "bh", "db", "bf", "BB", "orb", "cb", "rb"], "res": ["fs", "results", "vals", "Res", "re", "err", "cs", "ms", "rs", "ress", "result", "nos", "des", " r", " results", "rev", "os", "r", "bytes", "cr", "arr", "func", "abs", "js", "gr", "max", "vs", "values", "rus", "df", "Rs", "RES", "fr", "def", "ns", "rep", "resp", "vec", "ps", "val", "es", "rez", "ret", "resolution", "features", "reg", "resh", "runs", "ras", "ver"], "f": ["fs", "fc", "fac", "re", "fit", "n", "sf", "ref", "p", "fun", "fm", "diff", "fp", "m", "fold", "fx", "fin", "r", "t", "b", "fe", "cf", "df", "fen", "fre", "fr", "q", "l", "frac", "c", "e", "rf", "ff", "function", "d", "F", "field", "v", "bf", " F", "tf", "fd", "fee", "g"], "start": ["pos", "cur", "get", "si", "ie", "step", "stop", "set", "grade", "Start", "part", "first", "index", "j", "skip", "ind", "max", "starting", "in", "count", "end", "no", "min", "se", "en", "init", "next", "id", "art", "parse", "offset", "rest", "len", "shift", "add", "from", "sp", "info", "pad"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "ie", "p", "oi", "ii", "hi", "part", "index", "j", "ni", "z", "mini", "ini", "b", "ind", "ai", "inner", "phi", "end", "li", "ci", "ji", "ri", "qi", "u", "bi", "c", "init", "e", "it", "iu", "eni", "pi", "h", "fi", "id", "ip", "uri", "y", "v", "ix", "slice", "shift", "ui", "o", "info"], "dec": ["exec", "reverse", "big", "desc", "done", "cur", "pos", "sub", "Dec", "diff", "sec", "minus", "rev", "loc", "enc", "disc", "digit", "decl", "ec", "bad", "partial", "bar", "del", "dig", "rec", "de", "data", "der", "sign", "min", "oct", "next", "dev", " desc", "mod", "inc", "block", "dc", "draw", "div", "deg"], "neg": ["prev", "pos", "desc", "big", "err", "sub", "non", "unit", "sort", "sec", "log", "minus", "rev", "ne", "loc", "valid", "disc", "empty", "priv", "go", "del", "rel", "coll", "den", "kind", "rec", "de", "negative", "no", "sign", "sin", "Neg", "nov", "next", "dev", "sum", "cos", "ko", "div", "ok", "deg", "dot", "dirty", "iter", "flag"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n= sc.nextInt();\\n        int k= sc.nextInt();\\n        double ans= 0.0;\\n        ans+=Math.max(0.0,(double)(n-k)/n);\\n\\n        for (int i=1; i<=Math.min(n,k); i++)\\n        {\\n            int tmp=i;\\n            int count=0;\\n            while(tmp<k)\\n            {\\n                tmp*=2;\\n                count++;\\n            }\\n            ans+=(Math.pow(0.5,(double)count)*(double)1/n);\\n\\n        }\\n        System.out.println(String.format(\"%.10f\", ans));\\n\\n\\n    }\\n}", "target": "20", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "sr", "ctx", "com", "cc", "ner", "sec", "tc", "soc", "na", "sync", "system", "cr", "osc", "sq", "ec", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "scope", "se", "c", "src", "Sc", "asc", "sche", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "n": ["nu", "a", "network", "kn", "number", "w", "ny", "p", "s", "nb", "m", "nt", "na", "ne", "j", "ln", "mn", "z", "sn", "b", "N", "max", "in", "pn", "nn", "no", "all", "min", "ns", "l", "u", "en", "c", "num", "conn", "x", "h", "d", "un", "y", "v", "nc", "f", "o", "net"], "k": ["K", "kn", "ks", "w", "ak", "p", "mk", "s", "m", "j", "ki", "z", "km", "sk", "max", "ck", "length", "ke", "ku", "size", "ik", "q", "l", "u", "c", "x", "h", "dk", "kw", "d", "y", "v", "kick", "key", "ko", "ok", "f", "o"], "ans": ["a", "span", "dd", " scans", "ks", "ants", "ations", "cs", "ani", "AN", "ops", "lan", "s", "offs", "man", "na", "ents", "os", "nan", "ANS", "arts", "anas", "ana", "ares", "anges", "outs", "an", "ann", "vs", "ls", "ars", "ds", "ins", "aux", "annels", " means", "ss", "mean", "cas", "atan", "aning", "ads", "ians", "ns", "asks", "anners", "ross", "acts", "ams", "anz", "reads", "ats", "eps", "aus", "ions", "es", "aned", "ons", "anc", "as", " averages", "ays", "nas", "ras"], "i": ["xi", "I", "si", "ie", "di", "p", "oi", "ii", "part", "index", "j", "chi", "t", "ni", "ini", "ind", "ai", "ji", "multi", "li", "ci", "ti", "zi", "qi", "u", "bi", "c", "e", "init", "iu", "it", "mi", "pi", "x", "id", "ip", "v", "ix", "slice", "f", "ui", "start"], "tmp": ["test", "nr", "dist", "ie", "p", "nb", "diff", "nt", "ii", "part", "sup", "dest", "j", "txt", "t", "jj", "mp", "kk", "order", "now", "proc", "obj", "nn", "size", "total", "cmp", "opp", "c", "area", "next", "nom", "ptr", "pre", "pp", "v", "api", "beta", "current", "duration", "const", "cp", "f", "temp", "start"], "count": ["test", "number", "list", "core", "cur", "code", "base", "p", "race", "cc", "nt", "batch", "part", "acc", "b", "ind", "coll", "length", "order", "size", "cache", "total", "page", "common", "cmp", "child", "c", "type", "out", "sum", "id", "ct", "cond", "ount", "Count", "len", "current", "seed", "shape", "cp", "add", "const", "patch", "zip", "start", "seq", "col"]}}
{"code": "\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.math.*;\\n\\npublic class Main {\\n\t\\n\tScanner sc = new Scanner(System.in);\\n\t\\n\tvoid run() {\\n\t\t\\n\t\tString s = sc.next();\\n\t\t\\n\t\tStringBuffer strBuf = new StringBuffer(s);\\n\t\t\\n\t\tstrBuf = strBuf.reverse();\\n\t\t\\n\t\ts = strBuf.toString();\\n\t\t\\n\t\tSystem.out.println(s);\\n\t\t\\n\t\t\\n\t\t\\n\t}\\n\t\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tnew Main().run();\\n\t\t\\n\t}\\n}", "target": "237", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "search", "cer", "cc", "ner", "sec", "acc", "enc", "cr", "osc", "ec", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "isc", "src", "Sc", "asc", "cv", " SC", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC", "spec"], "s": ["a", "fs", "parts", "results", "is", "si", "string", "sf", "rs", "p", "aws", "submit", "result", "os", "r", "sets", "t", "sync", "sv", "sl", "abs", "js", "b", "ls", "ds", "input", "ss", "ws", "sg", "data", "its", "ns", "l", "u", "c", "ses", "e", "src", "su", "S", "d", "ps", "str", "v", "f", "services", "o", "sb", "g", "i", "strings"], "strBuf": ["strCuf", " strbundle", " strbuf", "strFraf", "strBBbuf", "strBuffob", "strBundle", "StrBbuf", "strBuffraf", "strFundle", "strCob", "strBBuff", "StrBuf", "strbuf", "strBuffuf", "strBackab", "StrFuf", "strBuffer", "strBuff", " strbuff", "StrBraf", "strFuf", "strbuff", " strBuff", "strBackuffer", "strCraf", "StrBuffer", " strBundle", "strBuffbuf", "strFuffer", "strBackuf", "strBob", "strFob", "strFbuf", "StrFbuf", "strBackbuf", " strbbuf", "StrBab", "StrFuffer", "strCuff", "StrFab", "strbbuf", "strBraf", "strBuffab", "StrBob", "StrFob", "strFuff", "StrFuff", "strCab", "StrFraf", "strbundle", "strBBuf", "strCbuf", " strBbuf", "strFab", "strBuffuff", "strBBundle", "StrBuff", "strBab", "strBbuf"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString str = sc.nextLine();\\n\t\tString[] strArray = new String[3];\\n\\n\t\tstrArray = str.split(\" \");\\n\t\tArrays.sort(strArray);\\n\\n\t\tif (\"557\".equals(String.join(\"\", strArray))) {\\n\t\t\tSystem.out.println(\"YES\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\t}\\n}\\n", "target": "16", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "desc", "cs", "sf", "cc", "ner", "sec", "acc", "system", "sl", "osc", "ec", "cr", "class", " scr", "bc", "sci", "ss", "proc", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", " SC", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC", "spec"], "str": ["br", "err", "char", "string", "arg", "name", "p", "line", "sr", "er", "tr", "s", "result", "exp", "enc", "rev", "r", "txt", "pass", "sync", "arr", "sl", "st", "b", "entry", "in", "input", "prefix", "obj", "Str", "data", "fr", "l", "c", "out", "text", "pr", "f", "sp", "STR", "iter"], "strArray": ["strAll", "StrArray", "stringArray", "arString", "strString", "StrAll", "arrString", "arrList", "StrAr", "strList", "arAr", "StrString", "strAr", "stringList", " strList", "arrArray", "arArray", "stringAll", "arrAr", " strAll", "stringString", "StrList", " strString", " strAr", "arList"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tString[] array=new String[n];\\n\t\tString buff1=\"\",buff2=\"\";\\n\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\tarray[i]=sc.next();\\n\t\t}\\n\t\tfor(int i=0;i<n-1;i++) {\\n\t\t\tfor(int j=i+1;j<n;j++) {\\n\t\t\t\tif(array[i].equals(array[j])) {\\n\t\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\t\tSystem.exit(0);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0;i<n-1;i++) {\\n\t\t\tbuff1=array[i].substring(array[i].length()-1,array[i].length());\\n\t\t\tbuff2=array[i+1].substring(0,1);\\n\t\t\tif(!buff1.equals(buff2)) {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\tSystem.exit(0);\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(\"Yes\");\\n\t}\\n}\\n\\n\\n", "target": "70", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ser", "sf", "ctx", "cc", "ner", "nt", "system", "osc", "cr", "sq", "sk", "lc", "ec", "st", " scr", "bc", "sci", "ss", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "sem", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "sh", "sp", "SC", "squ"], "n": ["network", "number", "w", "name", "p", "nb", "s", "m", "nt", "part", "ne", "r", "ln", "nan", "t", "z", "sn", "b", "N", "in", "count", "nn", "size", "no", "all", "ns", "l", "u", "en", "c", "num", "e", "x", "dn", "adj", "d", "y", "v", "len", "nc", "f", "nl", "o", "net", "k", "inn"], "array": ["expression", "a", "list", "number", "collection", "table", "the", "our", "params", "address", "value", "string", "word", "project", "group", "answer", "section", "arrow", "alpha", "result", "batch", "Array", "app", "index", "complex", "system", "arr", "pair", "sample", "one", "image", "ray", "book", "analysis", "order", "now", "archive", "error", "row", "object", "instance", "range", "audio", "area", "database", "align", "element", "function", "allow", "air", "format", "message", "api", "shape", "integer", "auto", "ignore", "record", "view", "environment"], "buff1": ["feed8", "bb0", "buf8", "Buffb", "ufb", "buffer64", " buffb", "bb1", "Buff01", "buf2", "uf1", "Buff1", "feed1", "buffer1", "bb64", "uf2", "buff8", " buff64", " buff0", "buf01", "feed2", "buf1", "feed01", "buff64", "Buff2", "buffer2", "Buff8", "buff01", "Buff0", "buffb", "bb2", "buff0", "buffer0", "uf0"], "buff2": ["buffer4", "alph4", "bufferout", "uf1", "Buff1", "ob2", "fb2", "buffer1", "alph2", "alph1", "uf2", "Bufftwo", " buffTwo", " buffii", "refii", "obii", "fb0", "Buff4", "buffTwo", "alphout", "fbtwo", "bufftwo", "buffout", "fb1", "obTwo", "Buff2", "buffer2", "refTwo", "Buff0", "ref2", "buff4", "uftwo", "buffii", "Buffout", "buff0", "uf0"], "i": ["xi", "gi", "a", "I", "ei", "is", "io", "si", "ie", "di", "ami", "p", "oi", "cli", "ii", "hi", "chi", "index", "ni", "z", "jj", "ini", "isi", "b", "ai", "image", "in", "phi", "ji", "multi", "li", "ci", "ti", "inner", "ik", "zi", "ri", "qi", "u", "bi", "c", "e", "init", "iu", "eni", "it", "mi", "pi", "x", "yi", "fi", "ori", "source", "id", "ip", "uri", "y", "ix", "v", "api", "slice", "f", "ui", "o", "info", "start", "jp"], "j": ["a", "ja", "si", "jc", "ie", "dj", "J", "p", "m", "jo", "ii", "ij", "r", "z", "js", "jj", "b", "jl", "ji", "end", "li", "ik", "q", "l", "u", "e", "it", "h", "x", "out", "next", "d", "jit", "y", "v", "key", "f", "o", "ui", "g", "k", "jp"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scn=new Scanner(System.in);\\n\t\tint n=scn.nextInt();\\n\t\tint k=scn.nextInt();\\n\t\tint[] arr=new int[n];\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\tarr[i]=scn.nextInt();\\n\t\t}\\n\t\tSystem.out.println(frog1(arr,k));\\n\t\t\\n\t\t\\n\t}\\n\tpublic static int frog1(int[] heights,int k) {\\n\t\t\\n\t\tint[] dp=new int[heights.length];\\n\t\tdp[0]=0;\\n\t\tdp[1]=Math.abs(heights[0]-heights[1]);\\n\t\t\\n\t\tint min=0;\\n\t\tfor(int vidx=2;vidx<heights.length;vidx++) {\\n\t\t\tmin=Integer.MAX_VALUE;\\n\t\t\tfor(int j=vidx-k;j<vidx;j++) {\\n\t\t\t\tif((j)<0) {\\n\t\t\t\t\tcontinue;\\n\t\t\t\t}\\n\t\t\\n\t\t\t\tint val=Math.abs(heights[vidx]-heights[j])+dp[j];\\n\t\t\t\t\\n\t\t\t\tif(min>val) {\\n\t\t\t\t\tmin=val;\\n\t\t\t\t\tdp[vidx]=min;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t}\\n\t\t\t\\n\t\t\t\\n\t\t}\\n\t\t\\n\t\treturn dp[heights.length-1];\\n\t\t\t\\n\t}\\n\\n}\\n", "target": "241", "substitutes": {"scn": ["ScN", "scyn", "csN", "csn", "Scnn", "sacnn", "escyn", "scr", " scnl", "escr", "SCn", "sacn", " scinner", "sacyn", "csnn", "Scn", "Scr", "Scyn", "csns", "escinner", "scnn", "rcnn", " scr", "Scns", "scns", "SCns", " scyn", "rcinner", "rcn", "escnn", "rcnl", "SCN", " scnn", "scnl", "SCnn", "escnl", "sacr", "escn", "scinner", "scN"], "n": ["network", "w", "p", "s", "nb", "ner", "m", "nt", "ne", "r", "z", "sn", "b", "N", "in", "nn", "all", "q", "ns", "l", "u", "en", "c", "num", "e", "conn", "x", "h", "d", "y", "v", "f", "o", "net"], "k": ["K", "kn", "kr", "ks", "w", "ak", "p", "unk", "mk", "ner", "m", "r", "ki", "z", "km", "sk", "b", "ck", "ke", "ku", "size", "ik", "q", "l", "ijk", "u", "c", "e", "h", "x", "dk", "kl", "kw", "id", "d", "y", "v", "kick", "key", "ko", "ok", "f", "o", "g"], "arr": ["list", "arch", "adr", "br", "img", "ar", "err", "au", "p", "batch", "attr", "app", "na", "enc", "r", "var", "ab", "ann", "dr", "ind", "gr", "coll", "iq", "av", "ray", "order", "obj", "data", "cache", "map", "q", "fr", "frac", "aj", "rep", "rr", "att", "aug", "pr", "vec", "cat", "air", "str", "db", "aa", "act", "dat", "abc", "sh", "dim", "array", "aur", "iter"], "i": ["xi", "gi", "I", "is", "io", "si", "di", "ie", "p", "oi", "abi", "ii", "hi", "chi", "r", "index", "ni", "ini", "mu", "ind", "ai", "in", "inner", "ji", "li", "ci", "ti", "ri", "qi", "u", "bi", "e", "init", "iu", "mi", "pi", "fi", "id", "ip", "y", "v", "ix", "f", "ui", "o", "info"], "heights": ["pealth", "weighters", "veights", "keighters", "shealth", "sheeks", "height", "weight", "ealth", "eigh", "keight", "meights", "youeks", "Heaks", "health", "keeks", "shecks", "weights", "Heights", "wecks", "eIGHT", "peigh", " heaks", "peths", "keigh", "vealth", "pecks", "youights", "heths", "youight", " health", "peults", "weigh", "keights", "heeks", "weeks", "youalth", "peaks", "mealth", "sheights", "eights", "hecks", " heigh", "peight", " height", "meight", "weults", "veths", "sheighters", "sheths", "wealth", "heIGHT", "Heigh", "youigh", "sheults", "sheigh", "heaks", "veight", "heults", "weIGHT", "heighters", "sheIGHT", "sheight", "heigh", "Heeks", "Height", "kealth", "meaks", "peights"], "dp": ["vp", "gp", "pm", "dd", "pkg", "px", "pid", " df", "xd", " di", "address", "dos", "di", "p", "density", "grad", "fp", "dB", "pd", "uv", " DP", "proxy", "bp", "pair", "dt", "pb", "vs", "dq", "ds", "deb", "dr", "port", "df", "dm", " d", "data", " np", "pa", "lp", "py", "tp", "hp", "bps", " dep", "wp", "ip", "dl", "d", "DP", "ps", "db", "dc", "dep", "api", "eps", "yp", "duration", "cp", " delta", " tcp", "dim", "sp", " p", "imp", "pad"], "min": ["MIN", "pm", "span", "pid", "pos", "minimum", "err", "mit", "member", "value", "version", "p", "po", "unit", "diff", "amin", "sol", "m", "sort", "on", "part", "na", "pass", "default", "mine", "mini", "skip", "none", "fail", "partial", "ind", "max", "fe", "conf", "mean", "small", "don", "use", "size", "ax", "sign", "miss", "pri", "Min", "init", "am", "area", "limit", "next", "id", "Mini", "ain", "mod", "pre", "len", "key", "div", "act", "dim", "mins", "start", "mid"], "vidx": ["visionx", "vidn", "uidex", "visionex", "vidy", "verty", "idi", "vinx", "virtX", "pidxi", "visioni", "pidy", "pidX", "visiony", "vertxi", "idex", "videx", "vinz", "pidx", "idX", "virtn", "idxi", "vertz", "pidex", "vidxi", "vertn", "virty", "idz", "vinex", "virti", "visionn", "vertx", "vinX", "visionxx", "uidx", "visionX", "idx", "vdi", "vidxx", "vinxx", "uidX", "vdx", "idy", "idxx", "uidz", "idn", "virtx", "vdy", "vidz", "vidX", "vdn", "viny", "virtex", "pidz", "virtz", "vidi", "vertX", "vdX"], "j": ["bj", "ch", "old", "job", "ja", "err", "dist", "ie", "dj", "pt", "J", "p", "jo", "part", "ij", "index", "jet", "ni", "z", "js", "jj", "jl", "b", "max", "ind", "ji", "end", "li", "fr", "syn", "l", "aj", "c", "other", "it", "last", "x", "h", "pr", "next", "adj", "uj", "d", "y", "jit", "v", "jen", "key", "f", "g", "start", "jp"], "val": ["vals", "pos", "il", "live", "value", "elt", "led", "p", "co", "loc", "pass", "valid", "late", "fail", "ana", "fe", "max", "vel", "rel", "doc", "lib", "li", "data", "def", "el", "Val", "l", "py", "num", "x", "slot", "eval", "dev", "la", "lat", "alt", "d", "v", "VAL", "ol", "len", "slice", "vol", "sel", "f", "az", "al", "cal"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try (Scanner scanner = new Scanner(System.in);) {\\n            int x = scanner.nextInt();\\n            int ans = 0;\\n            if (x == 0) {\\n                ans = 1;\\n            }\\n            System.out.println(ans);\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}", "target": "148", "substitutes": {"x": ["xi", "wx", "px", "w", "pos", "n", "p", "axis", "cross", "index", "fx", "z", "an", "in", "lex", "ax", "num", "c", "xes", "xs", "X", "tx", "xx", "id", "y", "ix", "ex", "scan", "xp", "f", "i", "icing", "k"], "ans": ["span", "vals", "ks", "ants", "cs", "AN", "lan", "vers", "ents", "ANS", "os", "aid", "na", "ana", "an", "sk", "ann", "ars", "ls", "ace", "aces", "ins", "acs", "lines", "ss", "cas", "nn", "ians", "ns", "acts", "xs", "reads", " spans", "ats", "eps", "aus", "ions", "es", "aned", "scan", "sex", "ons", "act", "as", " scans", "ays", "rows"]}}
{"code": "\\nimport java.util.*;\\npublic class Main{\\n public static void main(String[] args) {\\n   Scanner kbd = new Scanner(System.in);\\n   int n=kbd.nextInt();\\n   String[] A= new String[n];\\n   for(int i=0;i<n;i++){\\n     A[i]=kbd.next();\\n}\\nint x=1;\\nArrays.sort(A);\\nfor(int i=0;i<n-1;i++){\\nif(!(A[i].equals(A[i+1]))){\\n  x=x+1;\\n}\\n}\\nSystem.out.println(x);\\n}\\n}\\n", "target": "98", "substitutes": {"kbd": ["okbd", "kypd", "kybf", "Kbd", " kbf", "Knd", "kcb", " kcb", "kode", "kond", "kbb", "mnd", "okbb", " kbb", "okpd", "okbf", "mpd", "kobd", "Kde", " kpd", "kybd", " knd", "kocb", " kBD", "mbd", " kde", "KBD", "mBD", "Kcb", "kde", "kBD", "Kpd", "kbf", "kybb", "kpd", "knd"], "n": ["network", "number", "w", "p", "nb", "s", "m", "nt", "ne", "j", "r", "t", "z", "sn", "b", "N", "nn", "size", "no", "ns", "l", "u", "en", "c", "fn", "num", "e", "conn", "h", "d", "y", "v", "len", "nc", "f", "nl", "o", "net", "k"], "A": ["O", "API", "K", "U", "Alpha", "I", "a", "AST", "E", "Action", "This", "AC", "As", "AN", "AB", "Access", "Items", "GA", "C", "T", "AM", "Array", "LA", "AA", "N", "Adam", "AS", "Names", "H", "D", "Y", "Ha", "NA", "B", "L", "Average", "MA", "M", "SA", "Args", "X", "Ar", "AR", "The", "Parts", "Address", "S", "P", "F", "Ma", "Abs", "V", "AP", "array", "At", "An", "Answer", "Files", "CA"], "i": ["xi", "gi", "a", "I", "io", "si", "di", "ie", "oi", "cli", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "mu", "b", "isi", "ai", "in", "phi", "multi", "ji", "li", "ci", "inner", "ti", "min", "zi", "ri", "qi", "u", "bi", "c", "e", "init", "iu", "eni", "ori", "mi", "pi", "yi", "fi", "id", "ip", "uri", "y", "v", "ix", "f", "ui", "o", "info"], "x": ["xi", "fix", "wx", "w", "pos", "status", "xe", "ww", "search", "code", "expl", "p", "ic", "xt", "m", "exp", "width", "hi", "cross", "index", "j", "wa", "fx", "z", "work", "rex", "xxxx", "XX", "max", "xy", "xc", "rx", "xf", "lex", "ax", "e", "xa", "xs", "X", "tx", "dx", "xx", "id", "y", "ix", "v", "xxx", "check", "key", "ex", "sex", "xp", "f", "g", "xml"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tBufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString s;\\n\t\tint inCnt = 0;\\n\t\twhile ((s = stdIn.readLine()) != null) {\\n\t\t\tinCnt++;\\n\t\t\tif (inCnt % 2 == 1)\\n\t\t\t\tcontinue;\\n\t\t\tString[] se = s.split(\" \");\\n\t\t\t// int e = Integer.valueOf(se[0]);\\n\t\t\tdoMain(inCnt, se);\\n\t\t}\\n\t\tSystem.exit(0);\\n\t}\\n\\n\tprivate static void doMain(int inCnt, String[] se) {\\n\t\tSystem.out.print(se[se.length - 1]);\\n\t\tfor (int i = se.length - 2; i >= 0; i--) {\\n\t\t\tSystem.out.print(\" \" + se[i]);\\n\t\t}\\n\t\tSystem.out.println(\"\");\\n\\n\t}\\n}", "target": "79", "substitutes": {"stdIn": ["stdId", "intOut", "stdOut", "intIn", "intins", "stin", "stIn", " stdId", " stdIN", "stdIN", "STDOut", "ddin", "stdin", "STDIn", "intId", "ddIn", "ddIN", "stIN", " stdin", "STDId", " stdOut", "stOut", "STDins", "ddOut", " stdins", "stdins"], "s": ["is", "w", "si", "n", "string", "sf", "p", "sym", "m", "service", "r", "null", "t", "sv", "sl", "sq", "sample", "site", "ls", "b", "ins", "in", "input", "ss", "split", "sg", "ws", "data", "session", "ns", "l", "u", "c", "ses", "e", "su", "sum", "S", "d", "ssl", "str", "v", "es", "f", "o", "sb", "g", "second", "i", "strings", "spec"], "inCnt": ["inDecnt", "inNtx", "inNn", " inCwd", "inCsOUNT", "inContx", "inCsnt", "inCswd", "InCnt", "inCrt", "inConount", "inNount", "inLCn", " inNOUNT", " inNwd", "InCn", "InCrt", "InNnt", "InNn", " inCOUNT", "inNarry", "inCn", " inCarry", " inCount", "inDecn", "inCtx", "inNOUNT", "inWrt", "inCsarry", "inNrt", "inCxt", "inCarry", "inCount", "InNxt", "inScnt", "inDecount", " inNnt", "inConnt", "inScOUNT", " inNtx", "inDectx", " inCtx", "inLCrt", "inWnt", "inNxt", "inCwd", "inConn", " inNarry", "InNrt", "inWxt", "inNnt", " inNn", "inScarry", "inCOUNT", "inScwd", " inCn", " inNount", "inLCnt", "inNwd", "inLCxt", "inWn", "InCxt"], "se": ["th", "SE", "ch", "ser", "line", "see", "me", "sec", "loc", "sl", "arr", "ge", "entry", "ls", "cle", "ws", "ss", "pe", "fr", "ses", "e", "su", "spe", "body", "ps", "es", "sel", "parse"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n\\n        int min = 1000000000;\\n        int max = 0;\\n        for (int i = 0; i < N; i++) {\\n            int A = sc.nextInt();\\n            if (A < min) {\\n                min = A;\\n            }\\n            if(A > max) {\\n                max = A;\\n            }\\n        }\\n        System.out.println(max - min);\\n\\n    }\\n}\\n", "target": "214", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "rc", "ch", "cur", "cs", "ser", "sf", "ctx", "cc", "ner", "sec", "tc", "app", "enc", "sync", "system", "cr", "osc", "ec", "sq", "lc", "class", "cont", "bc", "sci", "ss", "ci", "cl", "se", "l", "c", "src", "Sc", "asc", "text", "sche", "cv", "ct", " SC", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "SC"], "N": ["O", "K", "U", "I", "n", "J", "C", "T", "NT", "Ne", "NB", "NN", "Q", "R", "NO", "D", "H", "Y", "NA", "Z", "Num", "L", "NM", "NI", "M", "NC", "X", "No", "NE", "S", "F", "P", "V", "NS", " n"], "min": ["a", "MIN", "span", "minimum", "pos", "initial", "n", "value", "base", "step", "name", "p", "delay", "sort", "amin", "m", "width", "first", "na", "wa", "index", "default", "mini", "skip", "none", "local", "minute", "partial", "in", "lower", "mean", "size", "no", "small", "sign", "range", "pri", "Min", "init", "area", "limit", "scale", "id", "Mini", "d", "pre", "val", "len", "f", "from", "mins", "start"], "max": ["huge", "height", "ca", "n", "base", "rank", "step", "name", "p", "MAX", "line", "diff", "alpha", "first", "wa", "index", "default", "with", "ma", "Max", "work", "view", "std", "conf", "count", "end", "size", "total", "no", "ax", "range", "cache", "ad", "can", "last", "x", "limit", "X", "sum", "scale", "right", "id", "mod", "d", "latest", "act", "mad", "plus", "k", "patch", "auto", "az", "active", "call", "wrap", "pad"], "i": ["a", "gi", "xi", "PI", "I", "si", "n", "ie", "di", "p", "J", "oi", "ii", "hi", "index", "j", "chi", "ni", "ini", "mu", "b", "ai", "in", "multi", "li", "ci", "ti", "B", "l", "u", "bi", "c", "iu", "M", "x", "pi", "h", "id", "ip", "d", "P", "f", "o", "ui", "info", "start", "k"], "A": ["a", "API", "Alpha", "U", "O", "I", "Si", "Action", "HA", "Ang", "II", "AC", "As", "Na", "Ca", "C", "T", "alpha", "AM", "All", "Array", "AMI", "ana", "PA", "LA", "AA", "Sa", "Max", "AI", "ai", "IA", "Adam", "AS", "AW", "Y", "Ha", "NA", "B", "Num", "L", "Average", "Min", "MA", "M", "Java", "SA", "Ma", "mA", "BA", "S", "P", "F", "DA", "AP", "Next", "Am", "ICA", "CA"]}}
{"code": "import java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Map.Entry;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\tint n = in.nextInt();\\n\t\tMap<String, Long> map = new HashMap<>();\\n\t\tlong total = 0;\\n\t\tfor ( int i = 0; i < n; i++ ) {\\n\t\t\tchar[] s = in.next().toCharArray();\\n\t\t\tArrays.sort(s);\\n\t\t\tString key = new String(s);\\n\t\t\tLong cnt = (map.containsKey(key) ? map.get(key) + 1 : 1);\\n\t\t\tmap.put(key, cnt);\\n\t\t}\\n\\n\t\tfor ( Entry<String, Long> en : map.entrySet() ) {\\n\t\t\tLong v = en.getValue();\\n\t\t\ttotal += v * (v - 1) / 2;\\n\t\t}\\n\\n\t\tSystem.out.println(total);\\n\t\tin.close();\\n\t}\\n}", "target": "32", "substitutes": {"in": ["a", "din", "token", "is", "pin", "io", "err", "In", "gen", "bin", "line", "diff", "m", "log", "user", "on", "fin", "r", "pass", "ln", "index", "this", "ini", "inside", "ins", "ai", "rin", "input", "inner", "kin", "readable", "image", "win", "inas", "min", "c", "stream", "init", "out", "or", "lin", "source", "id", "inc", "con", "ssl", "str", "again", "nin", "login", "isin", "scan", "ex", "connection", "as", "reader", "IN", "inn"], "n": ["network", "w", "p", "nb", "ner", "m", "nt", "j", "r", "ln", "t", "ni", "z", "sn", "b", "N", "q", "ns", "l", "u", "num", "c", "fn", "conn", "h", "x", "d", "len", "nc", "f", "nl", "o", "net", "k"], "map": ["per", "comb", "list", "ap", "table", "maps", "address", "code", "group", "set", "m", "make", "batch", "part", "app", "le", "cover", "work", "copy", "one", "build", "ge", "hash", "replace", "meta", "MAP", "dict", "data", "cache", "menu", "pack", "state", "lock", "size", "move", "apper", "min", "share", "complete", "over", "master", "module", "scale", "open", "block", "age", "down", "shape", "mm", "place", "change", "cap", "up", "array", "parse", "pad"], "total": ["number", "token", "parent", "done", "value", "base", "reported", "average", "result", "nt", "otal", "valid", "t", "shared", "local", "partial", "translation", "length", "count", "error", "size", "no", "html", "toc", "all", "data", "full", "Total", "complete", "type", "last", "sum", "scale", "percent", "available", "current", "fat", "json", "tf", "stat", "info", "found", "temp"], "i": ["gi", "a", "xi", "I", "is", "si", "di", "p", "oi", "m", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "mu", "b", "ai", "multi", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "ori", "iu", "eni", "mi", "pi", "x", "id", "ip", "uri", "d", "f", "ui", "info"], "s": ["a", "fs", "is", "ks", "ges", "si", "string", "rs", "aws", "p", "acks", "os", "r", "sets", "bytes", "js", "abs", "b", "ls", "ds", "ins", "ss", "ws", "keys", "its", "ns", "l", "u", "ches", "c", "ses", "e", "ves", "su", "xs", "d", "str", "roots", "sections", "f", "services", "as", "array", "ans", "strings", "k"], "key": ["parent", "is", "ee", "search", "char", "ie", "string", "base", "value", "name", "p", "iv", "exp", "Key", "cross", "index", "r", "default", "sync", "link", "entry", "ray", "keys", "by", "row", "pe", "cache", "lock", "sign", "point", "c", "e", "ey", "type", "x", "id", "ip", "field", "ry", "path", "str", "y", "ring", "kid", "hop", "root", "seed", "ex", "act", "f", "fee", "net", "ink", "temp", "k"], "cnt": ["Cnt", "lcnc", "rcnd", "rcNT", "scNT", "Cnc", "cpt", " cnc", "CNT", "Cpt", "cnd", " cnd", "rcpt", " cNT", "rcnt", "lcnd", "scnt", "Cnd", "scnd", "scpt", "cnc", "lcNT", "cNT", "lcnt"], "en": ["et", "ent", "ense", "ee", "nen", "equ", "sen", "ken", "line", "er", "vert", "man", "enc", "ens", "ea", "ec", "an", "ren", "ena", "een", "den", "En", "fen", "atten", "her", "ener", "el", "e", "eni", "aren", "pen", "open", "ene", "ven", "zen", "ell", "eng", "len", "env", "EN", "net"], "v": ["vid", "vp", "vals", "value", "iv", "version", "p", "ve", "m", "rev", "uv", "j", "t", "sv", "z", "vs", "b", "ov", "count", "lv", "size", "q", "l", "u", "c", "e", "conv", "x", "h", "sum", "cv", "nv", "val", "va", "V", "ev", "vi", "tv", "f", "vv", "o", "k"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner((System.in));\\n\t\tint[] a = new int[3];\\n\t\tint sum = 0;\\n\\n\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tArrays.sort(a);\\n\t\t\\n\t\tsum = (a[1] - a[0]) + (a[2] - a[1]);\\n\t\t\\n\t\tSystem.out.println(sum);\\n\t\t\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "247", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ca", "sub", "cer", "sf", "sr", "set", "cc", "ner", "soc", "na", "sa", "sync", "system", "cr", "sq", "osc", "class", "bc", "sci", "ss", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sem", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "sb", "parser", "SC", "squ"], "a": ["missing", "access", "tta", "sta", "ga", "at", "n", "p", "s", "ac", "alpha", "na", "index", "A", "sa", "ea", "something", "this", "ma", "t", "an", "ab", "empty", "b", "aux", "count", "ae", "ba", "ata", "data", "all", "pa", "da", "l", "aj", "u", "aw", "c", "e", "area", "am", "la", "d", "va", "v", "aa", "add", "f", "as", "auto", "array", "ama", "active", "au", "ad"], "sum": ["ash", "weight", "cur", "um", "si", "n", "sort", "alpha", "average", "diff", "ac", "result", "acc", "zero", "sa", "ame", "Sum", "empty", "doc", "conf", "count", "mean", "match", "size", "total", "error", "miss", "min", "ass", "cache", "sign", "real", "num", "am", "out", "scale", "dev", "style", "parse", "offset", "spread", "vol", "fat", "sh", "up", "info", "cost", "loss"], "i": ["gi", "xi", "I", "io", "si", "n", "di", "ie", "p", "oi", "abi", "ii", "hi", "part", "index", "j", "chi", "t", "ni", "z", "uli", "ini", "mu", "b", "ai", "phi", "multi", "li", "ci", "ti", "l", "qi", "u", "bi", "ri", "e", "it", "mi", "x", "pi", "h", "fi", "id", "ip", "y", "v", "key", "f", "o", "ui", "info", "k"]}}
{"code": "import java.util.*;\\nimport java.math.BigInteger;\\nclass Main{\\n\\n     public static void main(String []args){\\n      Scanner scan = new Scanner(System.in);\\n      int x = scan.nextInt();\\n      for(int i = 6 ; i >=0 ; i--){\\n          if(Math.pow(2,i)<=x){\\n            System.out.println((int)Math.pow(2,i));\\n            break;\\n          }\\n      }\\n    }\\n}", "target": "225", "substitutes": {"scan": ["run", "reader", "get", "err", "search", "n", "store", "query", "ner", "sc", "na", "r", "skip", "system", "sync", "an", "ann", "in", "ss", "nn", "san", "win", "read", "se", "sys", "can", "out", "cat", "check", "feed", "server", "Scan", "walk", "watch", "stat", "ans", "parse"], "x": ["xi", "w", "pos", "n", "p", "m", "cross", "index", "j", "fx", "t", "z", "rx", "ax", "u", "c", "e", "h", "xs", "X", "tx", "xx", "id", "d", "val", "y", "v", "ix", "xxx", "ex", "f", "k"], "i": ["xi", "gi", "I", "io", "si", "n", "base", "di", "p", "oi", "ii", "hi", "index", "r", "j", "chi", "t", "ni", "z", "ini", "mu", "ai", "in", "phi", "multi", "li", "ti", "ci", "zi", "ri", "qi", "u", "bi", "mi", "pi", "yi", "fi", "id", "uri", "d", "y", "v", "ix", "slice", "vi", "f", "ui", "info", "start"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        int sum = 0;\\n        while (scanner.hasNextInt()) {\\n            int a = scanner.nextInt();\\n            int b = scanner.nextInt();\\n            System.out.println(getDigit(a + b));\\n        }\\n    }\\n\\n    static int getDigit(int value) {\\n        if (value == 0) { return 1; }\\n\\n        int digit = 0;\\n\\n        while (value > 0) {\\n            value /= 10;\\n            digit++;\\n        }\\n\\n        return digit;\\n    }\\n\\n}", "target": "176", "substitutes": {"scanner": ["scaner", "Scanener", "haninner", "annker", "sanker", "sanning", "hanter", "Scaninner", "anninner", "canning", "scancher", "sanner", "scanter", "canner", "Scaner", "Scanner", "caninner", "annener", "canker", "caner", "cancher", " scancher", "planinner", "hanker", "scanker", "saninner", "annner", "verker", "Scanker", "canter", "verener", "Scanter", "verinner", "planker", "planning", "scanning", " scanter", "verner", "scanener", " scaner", "scaninner", "Scancher", "hanner", "planner"], "sum": ["number", "bin", "base", "alpha", "ac", "result", "acc", "zero", "ana", "max", "count", "bc", "data", "total", "all", "da", "dec", "num", "init", " alpha", "dev", " amount", "beta", "aa", "abc", "auto", "info"], "a": ["sta", "sha", "ga", "ca", "n", "base", "name", "p", "au", "oa", "aaa", "alpha", "ac", "na", "A", "sa", "ea", "z", "ma", "an", "ab", "count", "ba", "data", "aka", "pa", "da", "l", "aj", "c", "area", "id", "la", "d", "va", "y", "aa", "f", "as", "i", "ad"], "b": ["w", "n", "base", "bb", "p", "lb", "nb", "bd", "eb", "bot", "zb", "abb", "wb", "z", "ab", "ib", "bc", "ba", "B", "l", "num", "c", "bi", "e", "fb", "bs", "h", "id", "d", "y", "db", "v", "beta", "aa", "bf", "f", "abc", "sb", "g", "cb", "i", "k", "rb"], "value": ["number", "trial", "Value", "vote", "cost", "parent", "dollar", "variable", "base", "version", "p", "unit", "volume", "width", "letter", "index", "feature", "default", "zero", "null", "valid", "something", "money", "VALUE", "values", "length", "count", "image", "data", "total", "size", "amount", "child", "position", "num", "limit", "element", "function", "scale", "id", "d", "age", "val", "distance", "offset", "v", "message", "character", "i", "tax"], "digit": ["fix", "number", "dimension", "bin", "winner", "char", "version", "factor", "p", "unit", "alpha", "vert", "result", "part", "letter", "feature", "index", "power", "zero", "valid", "count", "inner", "significant", "data", "frac", "dec", "u", "num", "point", "even", "it", "cision", "oct", "bit", "element", "id", "division", "inc", "d", "argument", "val", "beta", "character", "div", "f", "integer", "iter"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tsolve(s, s.length());\\n\t}\\n\\n\tprivate static void solve(String s, int len) {\\n\t\t// TODO Auto-generated method stub\\n\t\tlong sum = 0;\\n\t\tfor(int i = 0; i < len; i++) {\\n\t\t\tsum += s.charAt(i) - '0';\\n\t\t}\\n\t\tif (sum % 9 == 0) \\n\t\t\tSystem.out.println(\"Yes\");\\n\t\telse \\n\t\t\tSystem.out.println(\"No\");\\n\t}\\n\\n}\\n", "target": "93", "substitutes": {}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int s = Integer.parseInt(scan.next());\\n        int w = Integer.parseInt(scan.next());\\n        scan.close();\\n\\n        if (w >= s) {\\n            System.out.println(\"unsafe\");\\n        } else {\\n            System.out.println(\"safe\");\\n        }\\n\\n    }\\n}", "target": "177", "substitutes": {"scan": ["chan", "run", "pin", "search", "gen", "n", "base", "see", "query", "ner", "result", "log", "sc", "app", "serv", "ln", "sync", "system", "skip", "an", "ann", "report", "fan", "replace", "in", "inner", "match", "nn", "row", "all", "san", "sign", "read", "bug", "se", "l", "can", "out", "x", "filter", "look", "ry", "slice", "feed", "clean", "server", "Scan", "util", "stat", "watch", "reader", "parser", "parse"], "s": ["less", "sw", "ks", "is", "si", "n", "space", "aws", "p", "wa", "os", "t", "sync", "sv", "z", "sq", "ls", "W", "ds", "ss", "ws", "ns", "ow", "l", "u", "c", "e", "h", "ts", "xs", "S", "d", "ps", "y", "v", "o", "sh", "g", "sd", "i", "rw"], "w": ["wx", "wl", "sw", "weight", "ww", "n", "ew", "p", "width", "wa", "wh", "t", "z", "W", "wi", "ws", "win", "q", "tw", "ow", "u", "aw", "we", "x", "h", "kw", "wp", "d", "y", "v", "es", "hw", "o", "sh", "g", "fw", "wal", "wt", "rw"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\n\\npublic class Main{\\n\\n    static int INFTY = Integer.MAX_VALUE;\\n    public static void main (String args[]){\\n        //\u521d\u671f\u51e6\u7406\\n        Scanner sc=new Scanner(System.in);\\n        // BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        // try{\\n            // int n = Integer.parseInt(br.readLine());\\n            \\n        int N = sc.nextInt();\\n        int L = sc.nextInt();\\n        int[] arr = new int[N+1];\\n        int minAbs=INFTY;\\n        int minNum=0;\\n        int ans=0;\\n        for(int i=1;i<=N;i++){\\n            arr[i]=L+i-1;\\n            ans+=arr[i];\\n            if(minAbs>Math.abs(arr[i])){\\n                minAbs=Math.abs(arr[i]);\\n                minNum=i;\\n            }\\n        }\\n        ans=ans-arr[minNum];\\n        System.out.println(ans);\\n\\n    }\\n\\n\\n}", "target": "91", "substitutes": {"INFTY": [" PINCTIES", " INOVERY", " INFTIES", " INUTies", " INUTY", " INOVERies", " PINFTY", " INCTy", " PINFTies", " INUTIES", " INCTies", " INFTy", " INOVERy", " PINFTy", " PINCTies", " INOVERIES", " PINFTIES", " INCTIES", " INCTY", " INUTy", " PINCTy", " INFTies", " PINCTY"]}}
{"code": "import java.io.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]) throws IOException{\\n\t\tBufferedReader buf = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\\n\t\twhile(true){\\n\t\t\tString[] str = buf.readLine().split(\" \");\\n\t\t\tint H = Integer.parseInt(str[0]);\\n\t\t\tint W = Integer.parseInt(str[1]);\\n\t\t\tif(H==0 && W==0)\\n\t\t\t\tbreak;\\n\t\t\tfor(int i=1; i<=H; i++){\\n\t\t\t\tfor(int j=1; j<=W; j++){\\n\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println();\\n\t\t\t}\\n                  System.out.println();\\n      \\n\t\t}\\n\t}\t\\n}", "target": "87", "substitutes": {"buf": ["br", "job", "cmd", "uf", "bb", "ctx", "fp", "home", "buff", "r", "wb", "abb", "this", "func", "ab", "b", "queue", "cf", "bc", "proc", "obj", "fb", "src", "tmp", "Buff", "out", "h", "text", "ff", "Buffer", "bed", "ered", "bag", "bh", "v", "buffer", "f", "fd", "cb", "iter", "rb"], "str": ["br", "cur", "err", "char", "n", "string", "star", "tr", "line", "sr", "output", "usr", "s", "ner", "result", "strip", "part", "r", "txt", "pass", "stri", "arr", "sl", "st", "b", "entry", "dr", "input", "split", "dict", "obj", "Str", "data", "fr", "read", "c", "oct", "text", "pr", "div", "f", "sp", "STR", "iter", "strike", "spec"], "H": ["K", "WH", "U", "I", "HA", "DH", "J", "RH", "T", "GH", "Length", "CL", "FH", "NH", "HP", "HS", "HT", "Q", "PH", "Y", "Hi", "Ha", "L", "TH", "h", "X", "HK", "MH", "HH", "AH", "OH", "HC", "HD", "EH", "HY", "HE", "Ch", "HB", "SH", "CH", "HI"], "W": ["K", "WH", "U", "I", "WD", "w", "Sw", "DW", "J", "C", "T", "EW", "Length", "Wh", "WE", "G", "N", "Q", "Width", "R", "WC", "GB", "AW", "Y", "VW", "Z", "B", "L", "TW", "SW", "GW", "X", "We", "RW", "S", "WS", "P", "F", "V", "BW", "FW", "EH", "WP", "Web", "SH"], "i": ["a", "xi", "gi", "I", "io", "w", "si", "di", "p", "oi", "ii", "hi", "ni", "z", "ini", "b", "ai", "in", "phi", "ji", "li", "ci", "zi", "ri", "qi", "u", "l", "c", "init", "iu", "mi", "h", "x", "pi", "id", "ip", "y", "v", "ix", "vi", "f", "ui", "k"], "j": ["xi", "bj", "is", "ch", "br", "job", "ja", "si", "ie", "jc", "dj", "J", "p", "jo", "ii", "ij", "z", "js", "jj", "b", "jl", "length", "ji", "end", "li", "q", "l", "aj", "u", "oj", "qi", "h", "pr", " dj", "uj", "d", "y", "v", "key", "f", "o", "g", "k", "jp"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\\n\t\t\\n\t\tint H = Integer.parseInt(st.nextToken());\\n\t\tint A = Integer.parseInt(st.nextToken());\\n\t\tint i;\\n\t\tfor(i=1; i<10001; i++) {\\n\t\t\tH -= A;\\n\t\t\tif(H <= 0)\\n\t\t\t\tbreak;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(i);\\n\t}\t\\n\\n}", "target": "147", "substitutes": {"br": ["res", "ch", "io", "err", "Br", "form", "bb", "tr", "sr", "yr", "BR", "r", "browser", "jar", "cr", "arr", "ab", "abs", "b", "bar", "dr", "gr", "bc", "obj", "mr", "fr", "src", "bs", "bridge", "ber", "bt", "bro", "bed", "body", "bh", "str", "db", "hr", "bf", "div", "sb", "orb", "reader", "cb", "bl", "rb"], "st": ["sw", "sta", "gest", "string", "pt", "struct", "sr", "ste", "sts", "s", "stand", "strip", "sc", "part", "sth", "inst", "r", "sa", "stri", "t", "est", "sv", "sl", "sn", "cr", "ost", "std", "tt", "ss", "obj", "fr", "stack", "se", "ast", "lt", "ist", "stream", "src", "stress", "bt", "rt", "str", "ust", "rest", "ut", "const", "sh", "sp", "ST", "sb", "stage", "rd", "bl", "St"], "H": ["O", "K", "U", "E", "I", "HA", "He", "DH", "RH", "C", "HTTP", "T", "GH", "Length", "NH", "G", "HP", "HS", "N", "Q", "R", "D", "Y", "Ha", "Hi", "B", "L", "M", "TH", "h", "X", "MH", "AH", "HH", "F", "P", "HC", "ID", "V", "EH", "SH", "CH", "HI"], "A": ["a", "API", "Alpha", "U", "O", "I", "K", "HA", "AC", "J", "C", "T", "AM", "Array", "PA", "LA", "AA", "AI", "RA", "W", "N", "IA", "R", "AS", "D", "Y", "NA", "B", "Z", "L", "M", "X", "AR", "mA", "BA", "S", "P", "AL", "V", "AP", "Am", "At", "CA"], "i": ["gi", "a", "xi", "adi", "I", "io", "si", "di", "p", "oi", "cli", "abi", "ii", "hi", "index", "j", "r", "chi", "ini", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "zi", "ri", "qi", "u", "bi", "c", "e", "init", "it", "pi", "x", "h", "fi", "id", "ip", "uri", "d", "v", "api", "f", "ui", "o", "info", "jp", "start"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException{\\n\t\tInputStreamReader in = new InputStreamReader(System.in);\\n\t\tBufferedReader br = new BufferedReader(in);\\n\t\tString[] line = br.readLine().split(\" \");\\n\t\tint a = Integer.parseInt(line[0]);\\n\t\tint b = Integer.parseInt(line[1]);\\n\t\t\\n\t\tbr.close();\\n\\n\t\tfloat price;\\n\t\t\\n\t\tfor(int i = 0;i<10000;i++) {\\n\t\t\tif((int)(i*0.08) == a && (int)(i*0.10) == b) {\\n\t\t\t\tSystem.out.println(i);\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(-1);\\n\t}\\n}\\n", "target": "121", "substitutes": {"in": ["exec", "din", "is", "io", "err", "In", "ar", "bin", "n", "er", "s", "socket", "m", "log", "user", "r", "resource", "ini", "dr", "ins", "input", "inner", "readable", "ir", "data", "fr", "read", "lock", "c", "stream", "init", "src", "out", "lin", "source", "id", "inc", "str", "ex", "f", "as", "fd", "reader", "IN", "inn"], "br": ["file", "ctr", "io", "err", "Br", "erb", "bb", "ref", "tr", "p", "sr", "er", "buf", "yr", "BR", "fin", "r", "browser", "cr", "arr", "ab", "dr", "gr", "bc", "rx", "ir", "mr", "raf", "fr", "fb", "bridge", "ber", "out", "rr", "bro", "wr", "lr", "bh", "hr", "ridge", "reader", "cb", "bl", "rb"], "line": ["Line", "file", "inline", "cell", "LINE", "code", "word", "name", "header", "write", "user", "log", "strip", "ine", "ne", "pass", "sync", "sl", "link", "frame", "entry", "ge", "lc", "response", "comment", "cle", "end", "split", "error", "data", "row", "object", "page", "range", "no", "cl", "l", "se", "e", "bang", "lin", "source", "ip", "block", "look", "column", "parse", "key", "shell", "nl", "zip"], "a": ["sta", "fa", "ga", "ca", "p", "ia", "ac", "aaa", "alpha", "na", "wa", "ada", "A", "sa", "ea", "ma", "an", "ab", "ai", "ae", "ba", "pa", "da", "aj", "c", "area", "am", "la", "d", "va", "api", "aa", "ama", "au", "ad"], "b": ["n", "erb", "bb", "base", "p", "s", "lb", "nb", "bot", "j", "r", "abb", "wb", "ab", "ib", "pb", "bc", "ba", "ob", "B", "l", "u", "mb", "c", "e", "fb", "bs", "x", "h", "bis", "d", "y", "v", "emb", "aa", "f", "o", "sb", "cb", "k", "rb"], "price": [" dist", " payoff", " cost", " df", " data", " percentage", " r", " x", " average", " ratio", " distance", " temp", " weight", " sum", " result", " f", " loss", " multiplier", " val", " response", " score", " rate", " res", " ans", " success", " acc", " error", " total"], "i": ["gi", "xi", "adi", "I", "clip", "io", "si", "ie", "di", "p", "wei", "oi", "ii", "hi", "sup", "chi", "j", "index", "uli", "ini", "mu", "isi", "lc", "ai", "pointer", "phi", "multi", "ji", "li", "ci", "ti", "data", "zi", "ri", "qi", "u", "bi", "c", "e", "init", "iu", "it", "pi", "x", "bis", "fi", "yi", "id", "ip", "uri", "d", "v", "slice", "api", "ix", "vi", "ui", "info", "start", "jp"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n \\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\t\\n\t\tint count=0;\\n\t\tlong blueCount=0;\\n\t\tlong aAmari=0;\\n\t\t\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tlong N=sc.nextLong();\\n\t\tlong A=sc.nextLong();\\n\t\tlong B=sc.nextLong();\\n\t\t//\u4f55\u56de\u3001A+B\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u7d9a\u304f\u304b\\n\t\tlong syou=N/(A+B);\\n\t\t//A+B\u306e\u3042\u307e\u308a\\n\t\tlong kaisu=N%(A+B);\\n\t\t\\n\t\t\tif(kaisu==0) {\\n\t\t\t\tblueCount=A*syou;\\n\t\t\t}else {\\n\t\t\t\tif(kaisu<A) {\\n\t\t\t\t\tblueCount=(A*syou)+kaisu;\\n\t\t\t\t}else {\\n\t\t\t\taAmari=kaisu-A;\\n\t\t\t\tif(aAmari<B) {\\n\t\t\t\t\tblueCount=(A*syou)+A;\\n\t\t\t\t}else {\\n\t\t\t\t\taAmari=aAmari-B;\\n\t\t\t\t\tblueCount=(A*syou)+A+aAmari;\\n\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\tSystem.out.println(blueCount);\\n\t\t\\n\t}\\n \\n}", "target": "217", "substitutes": {}}
{"code": "/*\\n *created by Kraken on 19-04-2020 at 17:29\\n */\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    FastReader sc = new FastReader();\\n    long n = sc.nextLong();\\n    int m = sc.nextInt();\\n    long sum = 0;\\n    for (int i = 0; i < m; i++) sum += sc.nextLong();\\n    System.out.println((sum <= n) ? n - sum : \"-1\");\\n  }\\n\\n  static class FastReader {\\n\\n    BufferedReader br;\\n\\n    StringTokenizer st;\\n\\n    public FastReader() {\\n      br = new BufferedReader(new InputStreamReader(System.in));\\n    }\\n\\n    String next() {\\n      while (st == null || !st.hasMoreElements()) {\\n        try {\\n          st = new StringTokenizer(br.readLine());\\n        }\\n        catch (IOException e) {\\n          e.printStackTrace();\\n        }\\n      }\\n      return st.nextToken();\\n    }\\n\\n    int nextInt() {\\n      return Integer.parseInt(next());\\n    }\\n\\n    long nextLong() {\\n      return Long.parseLong(next());\\n    }\\n\\n    double nextDouble() {\\n      return Double.parseDouble(next());\\n    }\\n\\n    String nextLine() {\\n      String str = \"\";\\n      try {\\n        str = br.readLine();\\n      }\\n      catch (IOException e) {\\n        e.printStackTrace();\\n      }\\n      return str;\\n    }\\n  }\\n}\\n", "target": "108", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ca", "cer", "sr", "cc", "tc", "sync", "cr", "sq", "osc", "ec", "sl", "lc", "cont", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "self", "ct", "cv", " SC", "sch", "dc", "mc", "nc", " Sc", "uc", "sh", "sp", "SC"], "n": ["number", "w", "p", "nb", "s", "nt", "cn", "ne", "r", "ln", "t", "sync", "z", "sn", "b", "N", "count", "size", "nn", "ns", "l", "u", "en", "c", "e", "h", "x", "dn", "d", "un", "y", "v", "len", "nc", "f", "nl", "o", "net", "k"], "m": ["ms", "p", "s", "ii", "j", "r", "mn", "z", "hm", "b", "in", "size", "cm", "l", "u", "c", "e", "M", "h", "x", "sm", "tm", "d", "y", "v", "mc", "f", "o", "dim", "g", "md", "mm", "k"], "sum": ["sav", "weight", "um", "si", "diff", "alpha", "average", "acc", "na", "index", "ne", "sa", "Sum", "max", "doc", "coll", "count", "av", "mean", "cum", "li", "size", "total", "miss", "sign", "sam", "min", "se", "u", "num", "c", "norm", "su", "tu", "dev", "scale", "offset", "spread", "seed", "vol", "sim", "fat", "f", "sh", "sp", "summary", "net", "dot", "mem", "cost", "parse", "gram", "cal"], "i": ["xi", "gi", "I", "si", "di", "ami", "p", "ii", "chi", "j", "ni", "z", "mini", "ini", "mu", "b", "ai", "multi", "li", "ti", "ci", "zi", "l", "qi", "u", "bi", "c", "e", "iu", "mi", "pi", "x", "fi", "ip", "d", "v", "gu", "ix", "f", "ui", "o", "info"], "br": ["plug", "ctr", "bas", "ch", "cur", "img", "Br", "bb", "tr", "p", "sr", "buf", "vr", "bd", "BR", "bm", "pl", "obl", "r", "browser", "cr", "arr", "ab", "b", "fe", "bar", "dr", "ocr", "bc", "obj", "raf", "mr", "fr", "src", "rob", "bridge", "ber", "bt", "pr", "lr", "bro", "ru", "fore", "rt", "bh", "db", "rest", "hr", "cro", "sp", "sb", "be", "orb", "cb", "ur", "bl", "rb"], "st": ["sw", "sta", "string", "pt", "p", "struct", "ste", "sts", "ft", "store", "sr", "nt", " est", "sth", "inst", "r", "stri", "t", "est", "cr", "sl", "sn", "ost", "b", "fe", "ld", "std", "ss", "stable", "pe", "fr", "stack", "cl", "nd", "l", "se", "ist", "ast", "e", "src", "pr", "ct", "rt", "style", "ust", "rest", "ut", "sh", "sp", "ST", "be", "sb", "stage", "rd", "bl", "St"], "str": ["pos", "err", "char", "string", "pt", "name", "tr", "line", "sr", "s", "result", "exp", "enc", "r", "j", "pass", "t", "z", "sl", "arr", "b", "dr", "doc", "in", "url", "dict", "obj", "Str", "data", "fr", "e", "out", "text", "pr", "next", "id", "body", "style", "pre", "hr", "key", "div", "f", "sp", "STR", "iter", "bl"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();    \\n    ArrayList<Integer> list = new ArrayList<>();\\n    int sum = 0;\\n    \\n    for(int i=0; i<N; i++) {\\n      list.add(sc.nextInt());\\n    }\\n    Collections.sort(list, Collections.reverseOrder());\\n    for(int j=0; j<list.size(); j++) {\\n      if(j % 2 == 0) {\\n        sum += list.get(j);\\n      } else {\\n        sum -= list.get(j);\\n      }\\n    }\\n    System.out.println(sum);\\n  }\\n}\\n", "target": "132", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "cc", "ner", "enc", "sa", "system", "cr", "osc", "ec", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "or", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "cb", "SC"], "N": ["O", "K", "I", "n", "Ns", "J", "C", "T", "Ni", "Len", "NT", "Ne", "NN", "Size", "Q", "R", "D", "H", "Z", "B", "Num", "L", "NI", "M", "X", "NE", "S", "F", "P", "V", "Count", "NS", "NL", " n"], "list": ["chain", "test", "collection", "table", "parent", "get", "n", "base", "p", "set", "sort", "loop", "low", "diff", "cli", "batch", "result", "pl", "index", "null", "later", "ls", "lc", "entry", "queue", "coll", "tree", "que", "count", "cont", "order", "now", "lv", "li", "lists", "size", "iter", "all", "stack", "full", "cl", "l", "L", "lp", "pool", "ist", "listed", "last", "out", "keep", "lat", "la", "left", "parse", "slice", "key", "array", "LIST", "bl", "sequence"], "sum": ["weight", "cur", "err", "um", "si", "n", "sort", "diff", "alpha", "result", "average", "help", "part", "na", "sup", "index", "Sum", "mass", "hash", "length", "count", "mean", "ss", "cum", "li", "error", "size", "total", "all", "miss", "min", "sign", "ass", "pack", "se", "stack", "num", "stat", "out", "su", "scale", "parse", "spread", "fat", "vol", "sim", "plus", "fee", "sp", "up", "info", "net", "sh", "cost", "loss", "summary", "us", "cal"], "i": ["xi", "I", "is", "si", "n", "di", "oi", "ii", "hi", "chi", "index", "ni", "z", "b", "ind", "ai", "in", "ji", "li", "ci", "ri", "qi", "u", "bi", "e", "ori", "iu", "it", "init", "pi", "x", "h", "id", "ip", "d", "y", "v", "ix", "f", "o", "ui", "start"], "j": ["gi", "br", "pos", "job", "ja", "n", "jc", "dj", "ie", "J", "p", "section", "m", "jo", "ii", "ij", "z", "js", "jj", "b", "jl", "length", "ji", "li", "obj", "size", "ik", "q", "fr", "l", "aj", "u", "c", "e", "it", "h", "x", "pr", "adj", "uj", "d", "je", "y", "jit", "v", "ix", "jen", "key", "json", "f", "o", "g", "k", "jp"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int[] result = {a + b, a - b, a * b};\\n        int max = result[0];\\n        for (int i = 0; i < 3; i++) {\\n            if (max < result[i]) {\\n                max = result[i];\\n            }\\n        }\\n        System.out.println(max);\\n        sc.close();\\n    }\\n}", "target": "188", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "com", "ctx", "cc", "ner", "tc", "sec", "enc", "sync", "cr", "osc", "ec", "sq", "system", "lc", "class", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", "uc", "f", "anc", "server", "sh", "sp", "sb", "parser", "SC"], "a": ["w", "fa", "ga", "ca", "n", "base", "au", "p", "aaa", "ac", "alpha", "na", "index", "A", "sa", "ea", "ma", "an", "ab", "count", "ba", "all", "min", "aka", "pa", "da", "aj", "u", "c", "af", "area", "x", "am", "mA", "la", "d", "va", "api", "aa", "f", "as", "auto", "ama", "ad"], "b": ["w", "n", "base", "bb", "gb", "p", "nb", "lb", "m", "j", "r", "A", "z", "ab", "ib", "length", "count", "q", "B", "l", "u", "c", "e", "ad", "bs", "h", "x", "d", "y", "v", "aa", "f", "sb", "g", "k", "rb"], "result": ["prev", "test", "res", "results", "number", "err", "search", "value", "request", "rank", "group", "event", "diff", "grade", "part", "feature", "product", "r", "default", "pair", "report", "bar", "response", "length", "order", "error", "data", "match", "row", "page", "range", "total", "cache", "pack", "Result", "filter", "next", "block", "format", "shape", "current", "array", "found", "parse", "card"], "max": ["best", "number", "list", "parent", "height", "rank", "base", "value", "step", "MAX", "maximum", "part", "default", "with", "Max", "work", "always", "conf", "length", "count", "end", "size", "total", "cache", "min", "ax", "range", "q", "full", "top", "c", "can", "last", "x", "limit", "out", "next", "id", "scale", "right", "rest", "orig", "latest", "div", "auto", "info", "parse", "wrap"], "i": ["xi", "gi", "I", "io", "w", "si", "di", "p", "oi", "ii", "hi", "index", "j", "z", "ini", "mu", "ai", "phi", "multi", "li", "ci", "ti", "min", "l", "qi", "u", "bi", "c", "e", "mi", "x", "pi", "h", "fi", "id", "ip", "uri", "d", "y", "v", "api", "ix", "shift", "f", "o", "ui", "info", "start", "k"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args){\\n    \tScanner sc = new Scanner(System.in);\\n    \tint n=sc.nextInt();\\n        int m =sc.nextInt();\\n        int r;\\n        for(;;){\\n            r=n%m;\\n            if(r==0){\\n            \tSystem.out.println(m);\\n            \tbreak;\\n            }\\n            n=m;\\n            m=r;\\n        }\\n\\n    }\\n}\\n", "target": "0", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "sr", "com", "cc", "ner", "tc", "na", "enc", "cr", "osc", "sq", "ec", "lc", "bc", "sci", "ss", "ci", "cus", "scope", "se", "c", "src", "Sc", "asc", "sche", "cv", " SC", "mc", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "sb", "SC"], "n": ["a", "number", "nr", "w", "p", "s", "nb", "ne", "j", "mn", "z", "an", "b", "N", "in", "nm", "rn", "nn", "min", "q", "ns", "l", "u", "en", "c", "num", "e", "M", "x", "dn", "d", "un", "y", "v", "nc", "f", "o", "g", "i", "k"], "m": ["a", "rm", "span", "pm", "nr", "w", "ms", "um", "p", "fm", "mode", "me", "j", "mn", "mini", "z", "mu", "an", "b", "nm", "dm", "mr", "range", "cm", "l", "u", "num", "c", "e", "M", "mi", "h", "x", "am", "d", "y", "v", "f", "o", "md", "g", "i", "mm", "k", "mid"], "r": ["nr", "rc", "kr", "re", "w", "err", "ar", "rs", "p", "sr", "er", "result", "j", "t", "cr", "b", "dr", "gr", "R", "rn", "rx", "row", "mr", "range", "fr", "l", "u", "c", "e", "rf", "x", "h", "lr", "pr", "rr", "rh", "or", "right", "rt", "d", "v", "rg", "o", "g", "i", "ur", "k", "rb"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner stdIn = new Scanner(System.in);\\n    int n = stdIn.nextInt();\\n    int x = stdIn.nextInt();\\n    int[] l = new int[n];\\n    for(int i = 0;i<n;i++) {\\n      l[i] = stdIn.nextInt();\\n    }\\n    int count = 0;\\n    int current = 0;\\n     while(true) {\\n       if(current<=x) {\\n         count += 1;\\n         if(count-1==l.length) break;\\n         current = current + l[count-1];\\n       } else {\\n         break;\\n       }\\n     }\\n     System.out.println(count);\\n  }\\n}\\n", "target": "130", "substitutes": {"stdIn": ["adOut", "dOut", "stdOut", "adin", "STDin", "astin", "stdIns", "astOut", "STDIns", "standardin", "stIns", "gradIns", "adIn", "standardIN", "stin", "gradIn", "STDIN", "stIn", "astIN", " stdIN", "stdIN", "STDOut", "stdin", "STDIn", " stdIns", "adIN", "astIn", "gradin", "gradIN", "dIN", "stIN", "standardIn", " stdin", "dIn", " stdOut", "standardOut", "dIns"], "n": ["number", "w", "p", "s", "nb", "m", "nt", "j", "r", "ln", "t", "z", "sn", "b", "N", "in", "nn", "no", "size", "u", "en", "c", "num", "e", "d", "y", "v", "len", "nc", "f", "o", "nl", "net", "k"], "x": ["number", "old", "w", "pos", "initial", "code", "p", "index", "j", "t", "z", "one", "b", "rx", "size", "q", "u", "c", "e", "h", "xs", "X", "xx", "id", "left", "d", "y", "v", "ix", "xxx", "ex", "f", "o", "k"], "l": ["list", "wl", "il", "p", "lb", "s", "m", "ml", "loc", "le", "r", "ln", "t", "z", "sl", "local", "lc", "ls", "lo", "lv", "li", "el", "rl", "L", "lp", "fl", "c", "u", "lt", "ql", "lr", "kl", "la", "left", "dl", "ll", "v", "ol", "len", "like", "f", "o", "lu", "nl", "al"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "oi", "m", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "b", "ind", "ai", "multi", "li", "ci", "ti", "qi", "u", "bi", "c", "e", "init", "mi", "pi", "id", "ip", "uri", "y", "v", "ix", "slice", "f", "o", "ui", "info", "start"], "count": ["list", "number", "force", "parent", "core", "cur", "code", "base", "p", "loop", "cc", "nt", "reported", "log", "part", "handle", "index", "counter", "b", "partial", "max", "coll", "length", "now", "level", "match", "size", "total", "use", "cache", "full", "child", "carry", "c", "close", "other", "complete", "type", "last", "out", "limit", "next", "sum", "id", "allow", "depth", "left", "content", "path", "cond", "Count", "f", "patch", "active", "found", "info", "temp", "start", "progress", "col"], "current": ["per", "parent", "cur", "running", "variable", "code", "request", "reported", "result", " continue", "index", "valid", "counter", "resource", "local", "partial", "Current", "queue", "length", "now", "currently", "total", "common", "child", "c", "complete", "last", "global", "next", "open", "capacity", "content", "left", "urrent", "continue", "latest", "recent", "const", "active", "future", "follow", "temp", "existing", "progress"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner scanner = new Scanner(System.in);\\n\\n        String input = scanner.nextLine();\\n\\n        String[] values = input.split(\" \");\\n        int A = Integer.parseInt(values[0]);\\n        int B = Integer.parseInt(values[1]);\\n        int C = Integer.parseInt(values[2]);\\n\\n        int x = A - B;\\n        int answer;\\n        if (x <= C) {\\n            answer = C - x;\\n        } else {\\n            answer = 0;\\n        }\\n\\n        System.out.println(answer);\\n    }\\n}\\n", "target": "45", "substitutes": {"scanner": ["scaner", "nerker", "scanter", "canner", "Scaner", "Scanner", "nerer", "nerter", "caner", "scanker", " scanker", "Scanker", "canter", "Scanter", " scanter", "nerner", " scaner", "canker"], "input": ["file", "list", "value", "string", "form", "request", "line", "output", "header", "s", "result", "this", "work", "config", "response", "in", "inf", "context", "data", "password", "stream", "init", "out", "text", "source", "Input", "content", "str", "format", "feed", "buffer", "key", "array", "info", "reader", "i"], "values": ["parts", "vals", "results", "ks", "settings", "maps", "params", "value", "iv", "flows", "codes", "cells", "objects", "s", "vers", "breaks", "gets", "places", "ports", "bytes", "versions", "Values", "vs", "tests", "lines", "fields", "lists", "uments", "data", "keys", "its", "changes", "grades", "pins", "docs", "groups", "items", "measures", "words", "verts", "drivers", "events", "roots", "v", "es", "ints", "stores", "members", "vi", "json", "services", "frames", "errors", "rules", "strings", "boxes"], "A": ["a", "O", "U", "E", "I", "HA", "AC", "As", "AF", "AB", "Ca", "T", "PA", "G", "AA", "LA", "N", "IA", "D", "Y", "Num", "L", "X", "AD", "Area", "Ar", "Offset", "mA", "BA", "S", "P", "F", "At", "An", "CA"], "B": ["O", "K", "E", "I", "AB", "J", "T", "BF", "BE", "G", "b", "N", "W", "Q", "R", "BC", "D", "H", "Y", "DB", "Z", "L", "M", "X", "Bs", "BA", "F", "P", "V", "BB", "BL"], "C": ["O", "Cs", "U", "E", "I", "FC", "AC", "CC", "CR", "T", "Ca", "CU", "CL", "EC", "CF", "G", "N", "W", "Q", "R", "D", "H", "Y", "CD", "DC", "Z", "L", "Cu", "Cl", "c", "CE", "M", "JC", "X", "CP", "S", "F", "P", "V", "CA"], "x": ["a", "xi", "number", "w", "pos", "n", "code", "p", "ctx", "alpha", "m", "fx", "index", "cross", "t", "z", "b", "XX", "xc", "ci", "Y", "ax", "u", "c", "e", "xa", "xes", "xs", "X", "tx", "dx", "xx", "id", "d", "y", "v", "ix", "xxx", "ex", "xp", "f", "i"], "answer": ["issue", "fix", "ask", "number", "expression", "correct", "accept", "score", "address", "err", "update", "value", "string", "code", "word", "version", "balance", "output", "query", "answered", "grade", "result", "average", " answers", "zero", "cover", "ace", "response", "length", "ae", "archive", "data", "size", "evidence", "pixel", "even", "knowledge", "complete", "audio", "eni", "align", "next", "square", "Answer", "format", "offset", "message", "energy", "duration", "reply", "fee", "array", "question", "cash"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main\\n{\\n  static class FastScanner\\n  {\\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    StringTokenizer st = new StringTokenizer(\"\");\\n    \\n    String next() {\\n      while(!st.hasMoreTokens()) {\\n        try {\\n          st = new StringTokenizer(br.readLine());\\n        } catch (IOException e) {}\\n      }\\n      return st.nextToken();\\n    }\\n    \\n    int nextInt() {\\n      return Integer.parseInt(next());\\n    }\\n    \\n    long nextLong() {\\n      return Long.parseLong(next());\\n    }\\n    \\n  }\\n  \\n  public static void main(String[] args) {\\n    FastScanner fs = new FastScanner();\\n    int n = fs.nextInt();\\n    int k = fs.nextInt();\\n    int[] arr = new int[n];\\n    for(int i = 0; i < n; ++i) {\\n      arr[i] = fs.nextInt();\\n    }\\n    int[] dp = new int[n];\\n    for(int i = 1; i < n; ++i) {\\n      int min = Integer.MAX_VALUE;\\n      for(int j = 1; j <= k; ++j) {\\n        int val = Integer.MAX_VALUE;\\n        if(i-j >= 0) {\\n          val = dp[i-j] + (int)Math.abs(arr[i-j]-arr[i]);\\n        }\\n        if(val < min) {\\n          min = val;\\n        }\\n        \\n      }\\n      dp[i] = min;\\n    }\\n    PrintWriter out = new PrintWriter(System.out);\\n    out.println(dp[n-1]);\\n    out.close();\\n  }\\n}\\n", "target": "241", "substitutes": {"br": ["bas", "io", "ch", "err", "Br", "brush", "bb", "tr", "p", "sr", "buf", "BR", "r", "browser", "cr", "abs", "b", "dr", "bar", "ocr", "gr", "bc", "obj", "mr", "fr", "boot", "src", "bs", "ber", "bridge", "bt", "bis", "bro", "str", "bh", "hr", "cro", "bf", "sb", "orb", "bl", "rb"], "st": ["th", "sw", "sta", "pt", "string", "step", "stop", "struct", "sr", "ste", "sts", "ft", "s", "nt", "strip", "sc", " est", "first", "sth", "inst", "r", "sa", "est", "t", "sty", "stri", "sl", "sn", "ost", "ld", "cr", "fe", "std", "tt", "ss", "stable", "fr", "nd", "se", "ast", "ist", "stress", "bt", "ct", "rt", "art", "str", "ust", "rest", "ut", "const", "sh", "sp", "ST", "sb", "start", "rd", "bl", "St"], "fs": ["fc", "qs", "ios", "files", "cs", "ms", "obs", "sf", "rs", "gb", "flows", "fm", "s", "fp", "fast", "vers", "fx", "gets", "utils", "ls", "fe", "vs", "cf", "ds", "df", "ws", "ss", "ils", "raf", "fts", "fr", "Fs", "FS", " f", "fn", "ours", "fb", "af", "linux", "bs", "bis", "F", "ps", "fits", "fps", "lf", "feed", "bf", "f", "fd", "frames"], "n": ["w", "p", "nb", "s", "ner", "m", "nt", "ne", "r", "t", "ni", "z", "sn", "b", "N", "in", "nn", "no", "size", "q", "ns", "l", "u", "num", "c", "en", "e", "x", "h", "d", "un", "y", "v", "len", "nc", "f", "nl", "o", "net"], "k": ["K", "ks", "w", "p", "s", "m", "r", "z", "sk", "b", "N", "max", "size", "ik", "q", "l", "u", "c", "e", "x", "h", "id", "d", "y", "v", "ok", "f", "o", "g"], "arr": ["a", "list", "ap", "arch", "adr", "pos", "img", "ar", "err", "p", "attr", "Array", "na", "enc", "app", "r", "ann", "gr", "dr", "ds", "ai", "av", "ray", "df", "par", "nn", "data", "fr", "aj", "py", "arp", "ext", "x", "pi", "rr", "pr", "att", "rep", "Ar", "air", "pre", "str", "db", "v", "aa", "dat", "dim", "array", "iter", "parse"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "p", "oi", "ii", "hi", "ij", "index", "ni", "z", "mini", "ini", "b", "ind", "ai", "in", "phi", "ji", "multi", "li", "ci", "ik", "q", "ri", "qi", "u", "bi", "c", "l", "init", "e", "iu", "eni", "ori", "mi", "pi", "yi", "x", "id", "ip", "d", "y", "v", "ix", "api", "f", "ui", "o", "info"], "dp": ["vp", "gp", "pm", "dd", "pkg", "adr", "pid", "address", "NP", "di", "p", "fp", "pd", "bp", "var", "dt", "dq", "dr", "pb", "deb", "ds", "ep", "df", "mp", "dm", "data", "lp", "py", "tp", "np", "pi", "hp", "wp", "ip", "d", "dl", "DP", "dep", "db", "dc", "pp", "dir", "cp", "dat", "dim", "array", "pad"], "min": ["MIN", "pm", "minimum", "pos", "value", "version", "p", "unit", "po", "sol", "me", "low", "m", "sort", "diff", "part", "serv", "na", "r", "mine", "default", "mini", "skip", "thin", "local", "ind", "max", "in", "lower", "_", "li", "small", "size", "miss", "ax", "el", "close", "Min", "e", "init", "area", "x", "limit", "id", "little", "scale", "d", "pre", "v", "len", "key", "vol", "act", "stat", "dim", "just", "start", "mid"], "j": ["ch", "ja", "si", "ie", "p", "J", " ii", "ii", "jo", "ij", "r", "ni", "z", "js", "jj", "b", "jl", "ind", "rel", "ji", "li", "ci", "obj", "ik", "fr", "q", "l", "qi", "aj", "oj", "u", "c", "e", "x", "adj", "uj", "d", "je", "y", "v", "ix", "jen", "key", "f", "o", "ui", "jp"], "val": ["vals", "ee", "pos", "aval", "il", "live", "value", "pt", "p", "unit", "sol", "na", "pass", "valid", "default", "fail", "sl", "max", "ind", "rel", "doc", "av", "li", "data", "def", "el", "Val", "py", "fl", "x", "pr", "slot", "eval", "sum", "lat", "dev", "alt", "v", "VAL", "ol", "len", "vol", "aa", "sel", "dim", "al", "bal", "bl", "cal"], "out": ["Out", "plain", "file", "list", "table", "io", "w", "pid", "ch", "err", "address", "bin", "cmd", "raw", "name", "p", "line", "group", "output", "write", "socket", "user", "log", "exp", "part", "r", "outs", "report", "one", "copy", "b", "doc", "writer", "in", "input", "obj", "error", "page", "full", "child", "point", "password", "outer", "init", "over", "x", "h", "print", "sum", "down", "str", "OUT", "path", "v", "again", "key", "buffer", "ex", "f", "o", "sp", "up", "temp", "call", "IN", "flush", "co"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main { \\n\tpublic static void main(String[] args){\\n        // \u5909\u6570\u3068\u914d\u5217\\n\tString str;\\n        int inNumber1, inNumber2, inNumber3;\\n \\n        // \u5404\u6570\u5b57\u306e\u5165\u529b\\n        Scanner scan = new Scanner(System.in);\\n        str = scan.next();\\n        inNumber1 = Integer.parseInt(str);\\n        str = scan.next();\\n        inNumber2 = Integer.parseInt(str);\\n        str = scan.next();\\n        inNumber3 = Integer.parseInt(str);\\n\\n        // \u6761\u4ef6\u5224\u5b9a\\n        if(inNumber1 < inNumber2 && inNumber2 < inNumber3)\\n                System.out.println(\"Yes\");\\n        else\\n                System.out.println(\"No\");\\n\t}\\n}", "target": "168", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] arges) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString line = sc.nextLine();\\n\t\tString[] k = line.split(\" \");\\n\t\tint v = Integer.parseInt(k[0]);\\n\t\tint v2 = Integer.parseInt(k[1]);\\n\t\tif (v == v2) {\\n\t\t\tSystem.out.println(\"a == b\");\\n\t\t} else if (v > v2) {\\n\t\t\tSystem.out.println(\"a > b\");\\n\t\t} else if (v < v2) {\\n\t\t\tSystem.out.println(\"a < b\");\\n\t\t}\\n\\n\t}\\n}", "target": "179", "substitutes": {"arges": ["argses", "argss", "arguments", "passs", "argsed", "arged", "paramuments", "parames", "params", "argsuments", "paramed", "passed", "passes", "passuments"], "sc": ["pc", "esc", "exec", "rc", "ch", "desc", "cs", "sub", "sf", "cc", "ner", "sec", "acc", "enc", "sync", "osc", "sl", "cr", "ec", "ocr", " scr", "bc", "sci", "ss", "ci", "cl", "se", "l", "c", "src", "Sc", "out", "text", " SC", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "g", "SC", "spec"], "line": ["Line", "file", "inline", "status", "job", "value", "string", "code", "word", "name", "p", "output", "header", "s", "section", "user", "log", "strip", "r", "pass", "b", "lc", "entry", "in", "comment", "lines", "data", "row", "pe", "page", "cl", "l", "c", "out", "text", "lin", "source", "block", "str", "message", "buffer", "shell", "f", "server", "reader", "i"], "k": ["K", "kn", "ks", "ak", "n", "p", "unk", "mk", "s", "m", "tk", "r", "j", "sk", "ek", "work", "rek", "ck", "kin", "ke", "ku", "ky", "ik", "kat", "q", "l", "u", "c", "e", "x", "kw", "look", "d", "kb", "y", "kick", "key", "ko", "json", "ok", "ack", "f", "o", "g", "i"], "v": ["vid", "a", "w", "n", "value", "p", "s", "ve", "vert", "m", "uv", "j", "sv", "z", "var", "b", "ov", "av", "lv", "q", "l", "u", "c", "e", "x", "h", "conv", "d", "y", "va", "V", "ev", "vi", "vol", "tv", "f", "vv", "o", "g", "i", "ver"], "v2": ["vb", " vb", "m1", "lvb", "p2", "f8", "mv", "v8", " vv", "lv2", "m2", "pb", "f1", " v4", "p8", "lv1", "lv8", "fb", " v8", "Vv", " v1", "V2", "v4", "m8", "V8", "Vb", "V4", "V1", "vv", "p1", "f2", "v1", "f4"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tlong X = Long.parseLong(sc.next());\\n\\n\t\tlong yokin = 100;\\n\t\tint counter = 0;\\n\t\twhile (!(yokin >= X)) {\\n\t\t\tyokin *= 1.01;\\n\t\t\tcounter++;\\n\t\t}\\n\\n\t\tSystem.out.println(counter);\\n\t}\\n}", "target": "107", "substitutes": {"sc": ["pc", "exec", "esc", "rc", "desc", "cs", "cer", "sf", "cc", "ner", "exp", "soc", "acc", "system", "cr", "ec", "osc", "sq", "class", "bc", "sci", "ss", "ci", "cl", "scope", "se", "l", "c", "Sc", "or", "str", " SC", "sch", "dc", "scan", "nc", " Sc", "uc", "server", "Scan", "sp", "cb", "SC", "spec"], "X": ["OK", "K", "U", "PI", "I", "CI", "MIN", "value", "C", "MAX", "FF", "Length", "XL", "A", "zero", "G", "Max", "WORK", "W", "N", "IX", "Q", "XX", "Size", "VALUE", "R", "max", "length", "XP", "ANY", "H", "Y", "XXX", "TX", "L", "IO", "MX", "x", "F", "P", "Xi", "V", "Number"], "yokin": [" yotin", "yilton", "dyokin", "yotin", " yilton", "yrock", "Yaho", "yyokin", "yoshi", "yaho", "nyoko", "Yoko", "nyaho", "yoko", " yoshi", " yofi", "yofi", "Yrock", "Yilton", "nyokin", "yyoko", " yoko", "nyrock", "dyotin", " yaho", "Yotin", "Yokin", "Yoshi", "yyoshi", "Yofi", "dyoko", " yrock", "yyilton", "dyofi"], "counter": ["expression", "per", "number", "ver", "nr", "true", "currency", "code", "step", "stop", "er", "timer", "exit", "loop", "ner", "result", "index", "skip", "cover", "clock", "entry", "repeat", "count", "inner", "error", "match", "total", "page", "pixel", "instance", "inter", "outer", "num", "type", "Counter", "keep", "square", "field", "continue", "offset", "card", "current", "const", "time", "hello", "ter", "info", "check"]}}
{"code": "import java.io.*;\\n  \\n  \\npublic class Main {  \\n    public static void main(String[] args)throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        Main m = new Main();\\n        String line = br.readLine();\\n        int[] num = m.splitIntChange(line);\\n          \\n        if(num[0] < num[1]){\\n            System.out.println(\"a < b\");\\n        }\\n        else if(num[0] > num[1]){\\n            System.out.println(\"a > b\");\\n        }\\n        else if(num[0] == num[1]){\\n            System.out.println(\"a == b\");\\n        } \\n    }\\n \\n    public int[] splitIntChange(String str){\\n        String[] str_ = str.split(\" \");\\n        int strlen = str_.length;\\n        int[] numarray = new int[strlen];\\n         \\n        for(int i = 0;i < strlen;i++){\\n            numarray[i] = Integer.parseInt(str_[i]); \\n        }\\n         \\n        return numarray;\\n    }\\n}", "target": "179", "substitutes": {"br": ["ch", "io", "err", "Br", "img", "bb", "tr", "sr", "buf", "yr", "bm", "BR", "r", "browser", "cr", "arr", "b", "bar", "gr", "ocr", "dr", "bc", "obj", "ob", "mr", "fr", "HR", "bs", "ber", "bro", "wr", "Reader", "hr", "bf", "div", "sp", "sb", "orb", "reader", "bl", "rb"], "m": ["a", "pm", "w", "ms", "n", "p", "fm", "s", "bm", "r", "j", "mn", "b", "dm", "machine", "monitor", "mr", "cm", "l", "c", "e", "M", "am", "h", "tm", "d", "y", "v", "mc", "f", "o", "g", "md", "mm"], "line": ["Line", "file", "cell", "err", "LINE", "string", "code", "output", "header", "result", "log", "r", "pass", "frame", "b", "entry", "in", "input", "url", "lines", "end", "data", "row", "page", "fr", "cl", "l", "out", "text", "lin", "source", "id", "block", "message", "buffer", "f", "sp", "reader"], "num": ["nu", "span", "number", "col", "update", "um", "bin", "n", "code", "form", "non", "name", "unit", "umi", "nb", "home", "mom", "index", "loc", "ul", "null", "digit", "note", "coord", "mu", "b", "max", "count", "mon", "end", "split", "dom", "multi", "no", "size", "miss", "Num", "node", "bug", "u", "norm", "init", "term", "np", "out", "oct", "text", "nam", "sum", "id", "nom", "block", "cat", "inc", "uni", "len", "off", "f", "dim", "info", "temp", "iter", "con", "check"], "str": ["res", "status", "char", "n", "string", "expr", "code", "name", "p", "tr", "result", "exp", "enc", "r", "st", "arr", "entry", "dr", "doc", "input", "url", "obj", "Str", "data", "fr", "l", "u", "c", "text", "pr", "source", "id", "path", "div", "f", "STR", "temp", "parse"], "str_": [" strout", "str0", "int2", " str2", "Str_", "Str0", "arr_", "strip_", "str2", "int_", "int0", "strout", "Str2", "strikeout", "stripout", "stri_", " str0", "strike_"], "strlen": ["Strlen", "rLen", " strlength", "divlen", " strlimit", "rlength", "rlimit", "strlimit", "strLen", "intlen", "rlen", "divLen", "Strlength", "intlength", "divlength", "intLen", " strLen", "strlength", "divlimit", "StrLen"], "numarray": ["sumlist", " numstring", "strarr", "sumarray", "numarr", " numarr", "numberlist", "intarray", "numberarr", "intb", "strb", "numstring", " numb", "numberspace", "strarray", "numberarray", "sumarr", "strstring", "intspace", "numcollection", "sumcollection", "numlist", "numb", "numbercollection", "intarr", "numspace", "intlist", " numspace", " numlist", " numcollection", "intstring"], "i": ["a", "xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "abi", "ii", "index", "r", "j", "t", "uli", "z", "ini", "mu", "b", "ai", "phi", "multi", "ji", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "l", "e", "it", "iu", "eni", "mi", "pi", "x", "fi", "id", "ip", "uri", "field", "val", "y", "v", "slice", "ix", "key", "f", "ui", "o", "info", "k"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{  \\n\t\\n \tpublic static final Scanner in =new Scanner(System.in);\\n \tpublic static void main(String args []){\\n\\n \t\t\tint a [] = new int [3];\\n \t\t\t a[0] = in.nextInt();\\n \t\t\t  a[1] = in.nextInt();\\n \t\t\t   a[2] = in.nextInt();\\n \t\t\t  int temp = a[0];\\n \t\t\t  a[0]=a[1];\\n \t\t\t  a[1]=temp;\\n \t\t\t  int tem = a[2];\\n \t\t\t  a[2]=a[0];\\n \t\t\t  a[0]=tem;\\n \t\t\t  System.out.print(a[0]+\" \"+a[1]+\" \"+a[2]);\\n \t\t\\n \t}\\n\\n\\n}", "target": "149", "substitutes": {"in": ["din", "is", "pin", "err", "In", "gen", "bin", "n", "parser", "line", "er", "s", "cli", "m", "r", "txt", "pass", "this", "cin", "ini", "thin", "b", "ins", "rin", "inf", "inner", "input", "inside", "kin", "into", "data", "sin", "vin", "inas", "l", "between", "en", "c", "init", "conn", "out", "x", "lin", "inc", "str", "OUT", "gin", "again", "nin", "login", "isin", "buffer", "scan", "ex", "f", "arin", "as", "asin", "g", "reader", "i", "IN", "inn"], "a": ["tta", "sta", "fa", "ga", "at", "n", "base", "ca", "au", "p", "oa", "s", "alpha", "ac", "app", "na", "wa", "ada", "A", "sa", "something", "t", "this", "ma", "ea", "an", "ab", "b", "work", "aux", "ae", "ba", "ata", "data", "pa", "da", "l", "aj", "u", "ast", "c", "aw", "e", "area", "am", "h", "x", "out", "la", "d", "va", "y", "za", "aa", "f", "k", "as", "o", "auto", "array", "active", "i", "ad"], "temp": ["test", "flat", "exc", "except", "stem", "perature", "pt", "base", "tr", "p", "template", "s", "diff", "tc", "fake", "t", "this", " Temp", "emp", " temporary", "level", "stable", "iter", "cache", "Temperature", "tw", "font", "c", "Tem", "tmp", "out", "warm", "v", "ex", "Temp", "f", "i", "porary"], "tem": ["separ", "flat", "cold", "tri", "stem", "non", "template", "cli", "tc", "cation", "fake", "t", "ted", "EMP", "emp", " temporary", "input", "stable", "tw", "font", "Tem", "term", "em", "tmp", "tim", "out", "ta", "sem", "cool", "warm", "tm", "alt", "sex", "Temp", "iter", "stuff", " temperature", "porary"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args ) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint gameCount = Integer.parseInt(sc.nextLine());\\n\\n\t\tint totalPointTaro = 0;\\n\t\tint totalPointHanako = 0;\\n\\n\t\tfor (int i = 0; i < gameCount; i++) {\\n\t\t\tString[] cards = sc.nextLine().split(\" \");\\n\t\t\tif (cards[0].compareTo(cards[1]) == 0 ) {\\n\t\t\t\ttotalPointTaro += 1;\\n\t\t\t\ttotalPointHanako += 1;\\n\t\t\t} else if (cards[0].compareTo(cards[1]) > 0) {\\n\t\t\t\ttotalPointTaro += 3;\\n\t\t\t} else {\\n\t\t\t\ttotalPointHanako += 3;\\n\t\t\t}\\n\\n\t\t}\\n\t\tsc.close();\\n\\n\t\tSystem.out.printf(\"%d %d\\n\", totalPointTaro, totalPointHanako);\\n\\n\t}\\n}\\n", "target": "206", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "cms", "cam", "cc", "ner", "tc", "soc", "enc", "sync", "system", "cr", "osc", "ec", "lc", "class", " scr", "usc", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "isc", "src", "Sc", "asc", "cv", "gc", "RC", " SC", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "sb", " rc", "parser", "SC", "scene"], "gameCount": ["GameSize", "gameSize", " gameLength", "GameLength", "gamesSize", "gamesCount", " gameSize", "gamesNumber", "gameNumber", "gameId", "GameNumber", " gameNum", "GameCount", "gameLength", "GameId", " gameId", "GameNum", "gamesId", " gameNumber", "gamesNum", "gameNum", "gamesLength"], "totalPointTaro": ["totalPointBro", "totalPointStara", "totalPartTaro", "totalLineFara", "totalLineFargo", "totalPointStargo", "totalPointDaro", "totalPointFara", "totalPointDargo", "totalPointBargo", "totalPartTro", "totalLineTara", "totalPointFaro", "totalPointTro", "totalPointDoko", "totalPointsStargo", "totalPointLara", "totalPartTharo", "totalPointDara", "totalPointTargo", "totalPointsTara", "totalPointsStara", "totalPartTargo", "totalPointFoko", "totalPointThara", "totalPointLoko", "totalPointFaco", "totalPartThara", "totalPointStaco", "totalPointLaro", "totalLineFaro", "totalLineToko", "totalPointLargo", "totalPointsTargo", "totalLineTargo", "totalLineFoko", "totalPointStaro", "totalPointDro", "totalPointsStaco", "totalPointToko", "totalPartTara", "totalLineTaro", "totalPointTara", "totalPointDaco", "totalPointsStaro", "totalPartThargo", "totalPointFargo", "totalPointsTaro", "totalPointThargo", "totalPointTharo", "totalPartThro", "totalPointTaco", "totalPointBaro", "totalPointBara", "totalPointsTaco", "totalPointThro"], "totalPointHanako": ["totalPointKenako", "totalPointKenzo", "totalLineHanoko", "totalLineHanako", "totalPointKinoto", "totalpointKenako", "totalPointKuzo", "totalPointDanako", "totalPointsKinakov", "totalPointMacacho", "totalPointsHanzo", "totalPointKuoko", "totalPointDanoko", "totalpointHanakov", "totalPointWanako", "totalPointKinako", "totalPointMacako", "totalPointMacoko", "totalPointWanakov", "totalPointKuakov", "totalPointHanacho", "totalPointKinoko", "totalpointKenoko", "totalpointKenakov", "totalLineKinoto", "totalpointHanoko", "totalPointsKinako", "totalPointsKinoko", "totalPointKuako", "totalpointKenzo", "totalLineKinoko", "totalPointHanoko", "totalPointHanzo", "totalPointWanzo", "totalPointsHanako", "totalpointHanako", "totalPointKenoko", "totalPointHanakov", "totalPointDanacho", "totalLineHanacho", "totalLineKinacho", "totalLineKinako", "totalPointDanoto", "totalPointsKinzo", "totalLineHanoto", "totalPointKinakov", "totalPointsHanoko", "totalPointHanoto", "totalpointHanzo", "totalPointKinzo", "totalPointKenakov", "totalPointKinacho", "totalPointMacoto", "totalPointsHanakov", "totalPointWanoko"], "i": ["gi", "xi", "I", "io", "si", "n", "di", "ie", "p", "oi", "m", "ii", "hi", "chi", "j", "index", "t", "ni", "mu", "b", "ai", "phi", "multi", "ji", "li", "ti", "ci", "inner", "ri", "u", "e", "iu", "pi", "x", "id", "ip", "uri", "d", "v", "slice", "f", "ui", "o", "info", "k"], "cards": ["comments", "points", "months", "styles", "orders", "cons", "cs", "lights", "codes", "cells", "games", "yards", "breaks", "stars", "scenes", "quarters", "ips", "bands", "tags", "charges", "pieces", "tests", "devices", "fields", "lines", "clips", "cases", "lists", "letters", "data", "checks", "holes", "players", "groups", "citizens", "ards", "series", "caps", "friends", "words", "cuts", "events", "balls", "cats", "ids", "strings", "names", "books", "photos", "kids", "features", "videos", "phones", "frames", "times", "rules", "plays", "boxes", "card"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        int A = in.nextInt();\\n        int B = in.nextInt();\\n\\n        System.out.println(A * B);\\n        in.close();\\n    }\\n}", "target": "35", "substitutes": {"in": ["a", "exec", "din", "token", "is", "pin", "err", "In", "gen", "bin", "line", "er", "s", "socket", "user", "log", "serv", "r", "with", "ini", "b", "doc", "ins", "inside", "rin", "input", "inner", "kin", "data", "inas", "read", "l", "between", "c", "init", "conn", "out", "lin", "source", "id", "inc", "con", "ssl", "str", "gin", "again", "nin", "login", "isin", "buffer", "connection", "ex", "scan", "f", "arin", "as", "asin", "reader", "i", "IN", "inn"], "A": ["a", "API", "U", "I", "HA", "AC", "AB", "Access", "Ca", "C", "T", "PA", "LA", "AA", "G", "N", "RA", "IA", "R", "D", "Y", "Ha", "NA", "L", "MA", "Java", "SA", "X", "EA", "Ma", "AR", "mA", "BA", "TA", "P", "F", "DA", "AP", "FA", "CA"], "B": ["I", "BS", "VB", "AB", "J", "C", "T", "NB", "SB", "G", "AA", "FB", "b", "N", "Q", "QB", "R", "BC", "GB", "D", "UB", "BU", "Y", "H", "DB", "L", "IB", "LB", "Bs", "BA", "OB", "P", "F", "BB", "BL", "BER", "WB", "BI"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        String s = sc.next();\\n        String[] str = new String[4];\\n        str = s.split(\"\");\\n        if (str[0].equals(str[1]) && str[2].equals(str[3]) && !str[1].equals(str[2]))\\n            System.out.println(\"Yes\");\\n        else if (str[0].equals(str[2]) && str[1].equals(str[3]) && !str[1].equals(str[2]))\\n            System.out.println(\"Yes\");\\n        else if (str[0].equals(str[3]) && str[1].equals(str[2]) && !str[1].equals(str[0]))\\n            System.out.println(\"Yes\");\\n        else\\n            System.out.println(\"No\");\\n    }\\n}", "target": "33", "substitutes": {"sc": ["pc", "esc", "sw", "rc", " sp", "ch", "desc", "cs", "cc", "ner", "sec", "acc", "enc", "r", "sync", "system", "sl", "cr", "st", "osc", "ec", "class", " scr", "bc", "sci", "ss", "cl", "scope", "se", "c", "stream", "Sc", "asc", "out", " SC", "scan", "nc", " Sc", "f", "uc", "anc", "sh", "sp", "SC", "spec"], "s": ["fs", "parts", "w", "si", "n", "string", "p", "m", "r", "bytes", "t", "sv", "sl", "ls", "b", "in", "ss", "ws", "Str", "ns", "l", "sys", "c", "ses", "series", "bs", "su", "ts", "S", "d", "ps", "v", "f", "services", "o", "sp", "sb", "g", "strings"], "str": ["cur", "err", "word", "step", "user", "inst", "tree", "inner", "it", "last", "ts", "id", "style", "STR", "iter", "strike", "spec", "ar", "char", "form", "string", "name", "p", "line", "er", "sr", "strip", "sl", "u", "ext", "out", "oct", "hr", "sp", "wr", "ctr", "ch", "br", "kr", "n", "sec", "enc", "pass", "stri", "cr", "input", "Str", "fr", "read", "c", "x", "or", "self", "inc", "div", "i", "check", "a", "list", "tr", "diff", "exp", "part", "r", "t", "st", "arr", "dr", "doc", "in", "obj", "dec", "e", "text", "pr", "d", "v", "key", "vol", "f", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] h = new int[n];\\n        for(int i = 0;i < n;i++) h[i] = sc.nextInt();\\n        long[] memo = new long[n];\\n        for(int i = 0;i < n;i++) memo[i] = -1;\\n        System.out.println(dp(n, h, n - 1, memo));\\n    }\\n\\n    private static long dp(int n, int[] h, int i, long[] memo) {\\n        if(memo[i] != -1) return memo[i];\\n        else {\\n            long cost1;\\n            long cost2;\\n            if(i == 0) {\\n                cost1 = 0;\\n                cost2 = 0;\\n            }\\n            else if(i == 1) {\\n                cost1 = dp(n, h, i - 1, memo) + Math.abs(h[i] - h[i - 1]);\\n                cost2 = Long.MAX_VALUE;\\n            }\\n            else {\\n                cost1 = dp(n, h, i - 1, memo) + Math.abs(h[i] - h[i - 1]);\\n                cost2 = dp(n, h, i - 2, memo) + Math.abs(h[i] - h[i - 2]);  \\n            }\\n            long result = Long.min(cost1, cost2);\\n            memo[i] = result;\\n            return result;\\n        }\\n    }\\n\\n}\\n", "target": "1", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cs", "cor", "cer", "sf", "sr", "cc", "ner", "sec", "system", "osc", "cr", "sq", "st", "lc", "cont", " scr", "bc", "sci", "ss", "ci", "se", "c", "src", "Sc", "asc", "sche", "sem", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "sh", "sp", "SC"], "n": ["a", "kn", "is", "w", "name", "p", "s", "nb", "m", "nt", "on", "cn", "na", "ne", "j", "ln", "t", "mn", "z", "sn", "an", "b", "N", "in", "nn", "no", "min", "ns", "l", "u", "en", "c", "num", "e", "conn", "x", "dn", "d", "un", "y", "v", "nc", "f", "o", "net", "g", "k"], "h": ["uh", "th", "hist", "hs", "ht", "ch", "w", "p", "history", "s", "m", "home", "hi", "http", "r", "kh", "ul", "wh", "t", "z", "hm", "b", "hash", "in", "ah", "H", "ih", "html", "q", "l", "u", "zh", "c", "he", "e", "hp", "rh", "x", "auth", "ph", "id", "hn", "oh", "d", "bh", "y", "hl", "v", "hr", "ha", "hh", "f", "hw", "o", "han", "sh", "gh", "host", "hd", "k", "adh"], "i": ["xi", "I", "io", "si", "di", "index", "mini", "ini", "b", "multi", "page", "iu", "it", "pi", "fi", "id", "ix", "ui", "info", "start", "is", "ie", "p", "cli", "ii", "ij", "ki", "isi", "mu", "ind", "ai", "phi", "ji", "li", "ik", "u", "ori", "mi", "yi", "ip", "uri", "anti", "o", "gi", "ei", "ami", "m", "hi", "chi", "l", "c", "init", "eni", "my", "x", "api", "a", "iv", "oi", "abi", "j", "r", "ni", "z", "in", "ci", "ti", "ri", "qi", "bi", "e", "source", "y", "v", "slice", "key", "f"], "memo": ["remon", "emorno", "memorno", "emoin", " memology", "ramoko", "mempo", "Membo", "memoryone", "temo", "memoin", "Meme", "Memoo", "monpo", "servlo", "servo", " memlo", "emo", "processo", " memzo", "memoryorno", "accessol", "memmo", "ramo", " memolo", "memlo", " mempo", "Memo", "memoryo", "linkmo", "emio", " memi", "remone", "linko", "demolo", "rampo", " memone", "processmo", " memmo", "roypo", "memu", "aimbo", "demmo", "memone", "aimi", "emu", "combol", "memos", "temology", "rammo", "accesso", "monoo", "ramro", " memro", "membo", "memoko", "memoryos", "accessbo", "aimo", "demu", " memio", "royoo", "combo", "monu", "memi", "servolo", "ramoo", "royoko", "processro", "memoo", " memoin", "mono", " memol", "royo", "memolo", "linke", "processoo", "Memi", "remos", " memos", "memio", "memoryoin", "servology", "temlo", "memology", "demio", "demo", "temolo", "memol", "memzo", " memoo", " memorno", " membo", "deme", "aime", "accesszo", "linkolo", " meme", " memoko", "combzo", "memoryon", "memorye", "eme", "memro", "meme", "embo", " memu", "Mempo", "dembo", "combbo", "Memu", "memon", " memon", "remo"], "cost1": ["Cost1", "risk2", "call1", "risk6", "cost4", "risk1", "length2", "costOne", "coll4", "call2", " costone", "coll1", " cost3", "call6", "Cost2", "CostOne", "coone", "co4", "coll2", "cost6", "co2", "coll6", "costone", "risk4", "co3", "cost3", " cost6", "length1", "riskone", "callone", "lengthOne", " cost4", "co1", "lengthone", "Costone", "coll3", "Cost4", " costOne"], "cost2": ["type1", "Cost1", "risk2", "shapeTwo", "risk6", "cast96", "typeto", "cost4", "shape4", "risk1", "cost20", "costtwo", "type2", "fee20", "co6", "func2", "coverTwo", "shape1", "coTwo", "Cost2", "costto", "cover1", "cost62", "co4", "func1", "feeTwo", "cast62", "cost6", " cost96", "Cost96", "co2", "risk4", " costTwo", "cover2", "cover20", " costtwo", "cast2", "typetwo", " cost62", "Cost62", "cast1", "cost96", " cost20", "fee1", " cost6", "functwo", "functo", "costTwo", "shape2", "fee2", " cost4", "co1", " costto"], "result": ["res", "results", "number", "cost", "desc", "done", "err", "true", "search", "score", "value", "answer", "diff", "grade", "average", "attr", "acc", "product", "pass", "default", "r", "resource", "arr", "ge", "response", "length", "df", "match", "data", "cache", "page", "range", "account", "cmp", "goal", "success", "date", "complete", "Result", "sum", "function", "continue", "root", "current", "duration", "ret", "found", "cash"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        //\u5909\u6570\u5b9a\u7fa9\\n        int h,m;\\n        String str,str1,tmp;\\n        StringBuffer sb;\\n\\n        while(true){\\n            //\u30ab\u30fc\u30c9\u306e\u5c71\u6587\u5b57\u5217\u53d7\u53d6\\n            str = sc.nextLine();\\n\\n            //\u7d42\u4e86\u6761\u4ef6\u5b9a\u7fa9\\n            if(str.equals(\"-\")) break;\\n            \\n            //\u30b7\u30e3\u30c3\u30d5\u30eb\u56de\u6570\u53d7\u53d6\\n            str1 = sc.nextLine();\\n            m = Integer.parseInt(str1);\\n\\n            //String\u30af\u30e9\u30b9\u2192StringBuffer\u30af\u30e9\u30b9\\n            sb = new StringBuffer(str);\\n\\n            for(int i = 0;i < m;i++){\\n                //h\u53d7\u53d6\\n                str1 = sc.nextLine();\\n                h = Integer.parseInt(str1);\\n                //\u6587\u5b57\u5217\u5206\u5272\\n                tmp = sb.substring(0,h);\\n                //\u672b\u5c3e\u306b\u6587\u5b57\u5217\u8ffd\u52a0\\n                sb.append(tmp);\\n                //\u982d\u306e\u6587\u5b57\u5217\u524a\u9664\\n                sb.delete(0,h);\\n            }\\n            System.out.println(sb);\\n        }\\n    }\\n}\\n", "target": "216", "substitutes": {"sc": [" pars", " src", " sp", " sm", "s", "sq", "ann", " ser", " scr", "ss", " arr", " scan", "se", " app", "Sc", " scanner", " SC", " res", " ans", "scan", " scorer", " Sc", " reader", " sl", "sb", " rc", "SC", "gram"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tlong n=sc.nextLong();\\n\t\tString s=sc.next();\\n\t\tint count=0;\\n\t\tfor(int i=1;i<s.length();i++) {\\n\t\t\tif(s.substring(i-1, i).equals(s.substring(i, i+1))) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(n-count);\\n\\n\t}\\n}\\n\\n", "target": "218", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ca", "sub", "cer", "sf", "sr", "cc", "ner", "sync", "osc", "cr", "ec", "sq", "class", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "str", " SC", "sch", "mc", "scan", "nc", "uc", "server", "sh", "sp", "sb", "SC"], "n": ["missing", "span", "number", "nr", "w", "p", "nb", "nt", "m", "r", "j", "ln", "t", "z", "b", "N", "length", "nn", "size", "ns", "l", "num", "c", "fn", "e", "x", "limit", "left", "d", "y", "v", "len", "f", "nl", "o", "g", "k"], "s": ["a", "fs", "parts", "qs", "is", "si", "string", "aws", "p", "m", "gets", "gs", "os", "t", "sv", "sl", "js", "abs", "ls", "ds", "ins", "in", "ws", "ss", "its", "ns", "l", "u", "c", "ses", "e", "su", "xs", "words", "S", "str", "es", "f", "services", "as", "o", "sb", "strings"], "count": ["test", "number", "list", "parent", "weight", "code", "base", "name", "p", "group", "index", "counter", "coll", "length", "more", "level", "match", "size", "no", "all", "child", "l", "num", "c", "type", "h", "limit", "keep", "sum", "id", "allow", "depth", "left", "offset", "check", "Count", "len", "current", "key", "f", "info", "found", "second", "start", "col"], "i": ["xi", "gi", "I", "is", "io", "si", "base", "di", "ami", "ie", "p", "oi", "ii", "hi", "part", "index", "chi", "j", "t", "mini", "z", "ni", "ini", "isi", "b", "lc", "ai", "in", "length", "inner", "multi", "phi", "li", "ci", "ti", "ji", "page", "zi", "ri", "qi", "u", "bi", "c", "l", "e", "init", "it", "iu", "eni", "x", "pi", "h", "yi", "fi", "id", "ip", "uri", "d", "v", "ix", "f", "ui", "o", "info", "start"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint D = sc.nextInt();\\n\t\tint N = sc.nextInt();\\n\t\tint answer = 0;\\n\\n\t\tanswer = (int)Math.pow(100, D) * (N + N / 100);\\n\\n\t\tSystem.out.println(answer);\\n\t}\\n}\\n", "target": "245", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "cer", "sf", "com", "cc", "tc", "sec", "soc", "acc", "enc", "sync", "cr", "sl", "sq", "osc", "ec", "lc", "class", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", "text", "sche", " SC", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "SC"], "D": ["O", "U", "E", "C", "T", "FD", "DE", "DM", "Q", "DX", " d", "Y", "CD", "JD", "DC", "DB", "Z", "L", "DI", "dL", "DD", "M", "X", "Ds", "PD", "S", "d", "P", "DS", "DP", "F", "MD", "DA", "DO", "Do", "DF", "DT"], "N": ["O", "K", "U", "E", "I", "n", "Ns", "C", "Ni", "T", "NT", "Ne", "A", "G", "NN", "Size", "Q", "R", "H", "Y", "NA", "Z", "L", "NM", "NI", "M", "NC", "X", "NE", "S", "P", "F", "V", "NS", "NL", "Answer"], "answer": ["fix", "ask", "number", "correct", "score", "err", "address", "value", "n", "output", "sort", "answered", "average", "grade", "result", " answers", "zero", "NN", "support", "response", "length", "order", "size", "evidence", "data", "knowledge", "complete", "area", "next", "square", "Answer", "age", "field", "distance", "offset", "ix", "duration", "draw", "reply", "integer", "round", "array", "question"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner scanner = new Scanner(System.in);\\n\t    int N = scanner.nextInt();\\n\t    \\n\t    for(int i=0;i<N;i++) {\\n\t\t    int A = scanner.nextInt();\\n\t\t    if(A%2==0 && A%3!=0 && A%5!=0) {\\n\t    \t\tSystem.out.println(\"DENIED\");\\n\t    \t\tSystem.exit(0);\\n\t\t    }\\n\t    }\\n    \tSystem.out.println(\"APPROVED\");\\n\t  \\n  \t\tscanner.close();\\n\t}\\n\\n}", "target": "113", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        \\n        int num = N % 10;\\n        String a = null;\\n        \\n        if(num == 3){\\n            a = \"bon\";\\n        } else if(num == 0||num==1||num==6||num==8){\\n            a = \"pon\";\\n        } else {\\n            a =\"hon\";\\n        }\\n        \\n        System.out.println(a);\\n    }\\n}\\n", "target": "178", "substitutes": {}}
{"code": "\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tString s[] = new String[N];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ts[i] = sc.next();\\n\t\t}\\n\t\tString t[] = new String[N];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tchar[] chars = s[i].toCharArray();\\n\t\t\tArrays.sort(chars);\\n\t\t\tt[i] = new String(chars);\\n\t\t}\\n\t\tArrays.sort(t);\\n\t\tlong ans = 0;\\n\t\tint tmp = 0;\\n\t\tfor (int i = 0; i < N - 1; i++) {\\n\t\t\tif (t[i].equals(t[i + 1])) {\\n\t\t\t\ttmp++;\\n\t\t\t} else {\\n\t\t\t\tans += ((long)(tmp+1)*tmp)/2; \\n\t\t\t\ttmp = 0;\\n\t\t\t}\\n\t\t}\\n\t\t\tans += ((long)(tmp+1)*tmp)/2; \\n\t\t\ttmp = 0;\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "32", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "si", "sf", "com", "cc", "ner", "system", "cr", "sq", "osc", "lc", "class", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "sem", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "server", "anc", "sh", "sp", "SC", "squ"], "N": ["O", "network", "K", "Part", "I", "II", "Na", "n", "Ns", "Len", "C", "Ni", "T", "J", "NT", "Ne", "NB", "SN", "NY", "W", "NN", "Q", "Size", "R", "NO", "H", "D", "Y", "NA", "Z", "Num", "B", "L", "NI", "M", "NC", "X", "NE", "None", "S", "F", "P", "V", "Sn", "NS", "NL", "MN", "KN", " n"], "s": ["a", "parts", "ks", "is", "w", "si", "n", "string", "aws", "p", "gs", "os", "sa", "sets", "sv", "ls", "b", "ds", "ins", "iss", "ss", "ws", "sign", "ns", "l", "u", "c", "ses", "bs", "h", "ts", "su", "S", "ssl", "ps", "v", "f", "services", "as", "sp", "sb", "strings"], "i": ["gi", "xi", "I", "is", "io", "si", "n", "ie", "di", "p", "oi", "cli", "abi", "ii", "hi", "part", "chi", "j", "index", "ni", "ki", "ini", "mu", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "l", "e", "init", "iu", "eni", "ori", "mi", "pi", "x", "it", "fi", "my", "id", "ip", "uri", "d", "y", "v", "ix", "slice", "api", "uni", "f", "ui", "o", "info"], "t": ["test", "token", "table", "the", "at", "n", "string", "target", "pt", "p", "T", "template", "xt", "m", "r", "txt", "te", "st", "b", "tt", "unt", "total", "l", "u", "c", "e", "tp", "type", "it", "h", "ts", "x", "ta", "ty", "rt", "d", "y", "v", "ant", "tf", "f", "o", "g", "temp", "wt"], "chars": ["chacters", "charars", "charads", " chaks", "Chars", "chads", "characters", "chaks", "chases", "unicases", "Chans", "Chads", "Chunks", "chros", "unicars", " chacters", "cacters", " chunks", "cars", "Chases", "chans", "Chaks", "chunks", "cros", " chads", "unicacters", " chros", "charans", "cunks", "unicaks", "Chros", " chans", " chases", "Chacters"], "ans": ["parts", " subs", " parts", "ks", " changes", "ants", " types", "cons", "lan", "ops", "aps", " cats", "amps", " es", " answers", "ents", "arts", " ops", "ens", "ANS", "anas", "outs", "an", "aces", "ann", "ls", "sk", "acs", "ds", "ars", "nas", " means", "ss", " angles", "actions", " news", "cas", "ads", "ns", "trans", "works", " ads", "groups", " spaces", " span", " pairs", "ams", " caps", "xs", "types", " signs", "reads", " spans", " cs", " ang", "ats", "eps", "cats", "aus", "ions", "aned", "ons", "asts", " ants", " scans", "errors", "ras"], "tmp": ["old", "nb", "dest", "txt", "mp", "emp", "kk", "data", "trans", "tp", "ptr", "treatment", "pre", "offset", "cp", "md", "zip", "start", "rb", "tab", "pos", "p", "loc", "config", "meta", "cache", "cmp", "area", "ff", "pp", "beta", "sp", "mm", "porary", "prev", "test", "sup", "fake", "now", "proc", "perm", "boot", "pot", "x", "next", "rt", "api", "amp", "current", "const", "tf", "cb", "stuff", "pad", "img", "race", "diff", "xt", "tc", "nt", "part", "app", "j", "wb", "qa", " temporary", "tt", "mmm", "obj", "nn", "py", "np", "vt", "front", "v", "temp"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        FastReader in = new FastReader(System.in);\\n        PrintWriter pw = new PrintWriter(System.out);\\n        // Code starts from here //\\n        String s = in.next();\\n        if(s.contains(\"7\")) pw.println(\"Yes\");\\n        else pw.println(\"No\");\\n        pw.close();\\n    }\\n\\n\\n\\n\\n\\n\\n    /****************************************\\n     ******* IO STUFF STARTS FROM HERE ******\\n     ****************************************/\\n\\n    static void debug(Object... obj) {\\n        System.err.println(Arrays.deepToString(obj));\\n    }\\n\\n    static class FastReader {\\n        InputStream is;\\n        private byte[] inbuf = new byte[1024];\\n        private int lenbuf = 0, ptrbuf = 0;\\n\\n        public FastReader(InputStream is) {\\n            this.is = is;\\n        }\\n\\n        public int readByte() {\\n            if (lenbuf == -1) throw new InputMismatchException();\\n            if (ptrbuf >= lenbuf) {\\n                ptrbuf = 0;\\n                try {\\n                    lenbuf = is.read(inbuf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (lenbuf <= 0) return -1;\\n            }\\n            return inbuf[ptrbuf++];\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            return !(c >= 33 && c <= 126);\\n        }\\n\\n        private boolean isEndOfLine(int c) {\\n            return c == '\\n' || c == '\\r' || c == -1;\\n        }\\n\\n        public int skip() {\\n            int b;\\n            while ((b = readByte()) != -1 && isSpaceChar(b)) ;\\n            return b;\\n        }\\n\\n        public String next() {\\n            int b = skip();\\n            StringBuilder sb = new StringBuilder();\\n            while (!(isSpaceChar(b))) {\\n                sb.appendCodePoint(b);\\n                b = readByte();\\n            }\\n            return sb.toString();\\n        }\\n\\n\\n        public String nextLine() {\\n            int c = skip();\\n            StringBuilder sb = new StringBuilder();\\n            while (!isEndOfLine(c)) {\\n                sb.appendCodePoint(c);\\n                c = readByte();\\n            }\\n            return sb.toString();\\n        }\\n\\n        public int nextInt() {\\n            int num = 0, b;\\n            boolean minus = false;\\n            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;\\n            if (b == '-') {\\n                minus = true;\\n                b = readByte();\\n            }\\n            while (true) {\\n                if (b >= '0' && b <= '9') {\\n                    num = (num << 3) + (num << 1) + (b - '0');\\n                } else {\\n                    return minus ? -num : num;\\n                }\\n                b = readByte();\\n            }\\n        }\\n\\n        public long nextLong() {\\n            long num = 0;\\n            int b;\\n            boolean minus = false;\\n            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;\\n            if (b == '-') {\\n                minus = true;\\n                b = readByte();\\n            }\\n\\n            while (true) {\\n                if (b >= '0' && b <= '9') {\\n                    num = (num << 3) + (num << 1) + (b - '0');\\n                } else {\\n                    return minus ? -num : num;\\n                }\\n                b = readByte();\\n            }\\n        }\\n\\n        public double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        public char[] next(int n) {\\n            char[] buf = new char[n];\\n            int b = skip(), p = 0;\\n            while (p < n && !(isSpaceChar(b))) {\\n                buf[p++] = (char) b;\\n                b = readByte();\\n            }\\n            return n == p ? buf : Arrays.copyOf(buf, p);\\n        }\\n\\n        public char readChar() {\\n            return (char) skip();\\n        }\\n    }\\n}", "target": "99", "substitutes": {"in": ["a", "pc", "din", "re", "io", "err", "In", "bin", "arg", "name", "er", "s", "socket", "m", "home", "user", "r", "ln", "inn", "resource", "ini", "b", "ins", "ai", "lib", "rin", "input", "inner", "inf", "data", "win", "ax", "read", "c", "init", "out", "source", " din", "inc", "path", "login", "f", "info", "reader", "i", "IN", "con"], "pw": ["cpwd", "pW", "ppW", "ppwd", "ppb", " pW", " pb", "cpb", "pb", "pwd", "cpw", "ppw", "cpW", " pwd"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    Main(){\\n\tScanner sc = new Scanner(System.in);\\n\tint[] a = new int[3];\\n\\n\twhile(sc.hasNext()){\\n\t    int n = sc.nextInt();\\n\t    for(int cs = 0; cs < n; cs++){\\n\t\tfor(int i = 0; i < 3; i++){\\n\t\t    a[i] = sc.nextInt();\\n\t\t    a[i] *= a[i];\\n\t\t}\\n\t\tArrays.sort(a);\\n\t\tString s = \"NO\";\\n\t\tif(a[0]+a[1] == a[2]) s = \"YES\";\\n\t\tSystem.out.println(s); \\n\t    }\\n\t}\\n    }\\n    public static void main(String[] args){\\n\tnew Main();\\n    }\\n}", "target": "65", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "search", "ca", "ctx", "cc", "ner", "soc", "enc", "sync", "cr", "sq", "ec", "osc", "lc", "ck", "coll", "cont", "bc", "sci", "ss", "ci", "cus", "cmp", "cl", "scope", "se", "c", "src", "Sc", "asc", "cv", "RC", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "SC"], "a": ["missing", "parts", "exec", "tta", "ga", "ca", "at", "parser", "code", "p", "aaa", "ac", "alpha", "ia", "m", "na", "A", "sa", "ea", "qa", "ma", "an", "ab", "action", "b", "work", "aux", "count", "ae", "ba", "ata", "all", "pa", "da", "l", "ast", "u", "aw", "c", "e", "working", "area", "am", "x", "la", "d", "va", "y", "v", "es", "aa", "f", "as", "o", "auto", "array", "ama", "ans", "au"], "n": ["w", "Ns", "p", "nb", "ner", "m", "cn", "nt", "j", "z", " c", "sn", "b", "N", "in", "nn", "ns", "l", "u", "en", "c", "num", "e", "conn", "d", "len", "nc", "f", "o", "net", "k"], "cs": ["pc", "rc", "ks", "core", "is", "css", "ms", "oc", "rs", "CS", "p", "C", "cells", "cc", "ac", "ii", "os", " c", "ec", "js", "ls", "lc", "vs", "cf", "ins", "ds", "bc", "spec", "ss", "ci", "ns", "c", "bs", "x", "ps", "ix", "dc", "nc", "cp", "f", "k", "col", "rows", "co"], "i": ["gi", "xi", "I", "is", "io", "si", "di", "p", "oi", "abi", "ii", "sup", "index", "j", "ni", "z", "ini", "b", "lc", "ai", "coll", "multi", "li", "ci", "zi", "ri", "l", "u", "bi", "c", "qi", "e", "init", "x", "pi", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "slice", "f", "cu", "ui", "o", "k"], "s": ["fs", "ms", "si", "string", "aws", "p", "ings", "m", "result", "os", "r", "sets", "t", "js", "abs", "b", "ls", "ds", "sg", "ss", "ws", "ns", "u", "groups", "c", "ses", "e", "ves", "out", "su", "ts", "sum", "S", "d", "ssl", "str", "v", "es", "f", "as", "o", "sb", "g", "ans", "details", "strings"]}}
{"code": "\\n\\nimport java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException{\\n\t\tBufferedReader br =new BufferedReader(new InputStreamReader(System.in));\\n\t\tString i1[]=br.readLine().split(\" \");\\n\t\tint n=Integer.parseInt(i1[0]);\\n\t\tint k=Integer.parseInt(i1[1]);\\n\t\t\\n\t\tlong a[]=new long[n+1];\\n\t\tint count=0;\\n\t\tString line = br.readLine();\\n\t\twhile ( line != null  &&  !line.equals(\"\")) {\\n\t\t    \\n\t    \tint snack=Integer.parseInt(line);\\n\t\t\tString users[]=br.readLine().split(\" \");\\n\t\t\tfor(int i=0;i<users.length;i++)\\n\t\t\t{\\n\t\t\t\ta[Integer.parseInt(users[i])-1]++;\\n\t\t\t}\\n\t\t\t\\n\t\t\tline=br.readLine();\\n\t\t}\\n\t\tfor(int i=0;i<n;i++)\\n\t\t{\\n\t\t\tif(a[i]==0)\\n\t\t\t{\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(count);\\n\t}\\n\\n}\\n", "target": "81", "substitutes": {"br": ["res", "ctr", "io", "err", "Br", "img", "erb", "mer", "tr", "sr", "buf", "er", "yr", "ner", "result", "BR", "nor", "handle", "http", "obl", "r", "browser", "jar", "cr", "arr", "report", "b", "dr", "gr", "bar", "mr", "her", "fr", "stream", "HR", "ber", "out", "lr", "bridge", "wr", "bro", "bed", "ler", "bh", "str", "db", "ger", "hr", "box", "bf", "orb", "reader", "cb", "be", "bl", "rb"], "i1": ["idi71", "i2", "I71", "gi11", "inOne", " i64", " iOne", "lOne", "i71", "i0", " i11", "idione", "I1", "in1", "iOne", "i64", "gi1", "gi2", " i71", "Ione", " i2", "in0", "l64", "ione", " i0", "in64", "l0", "I11", " ione", "I2", "l1", "idi1", "i11"], "n": ["network", "number", "w", "p", "nb", "s", "nt", "m", "j", "t", "z", "sn", "b", "N", "in", "nn", "no", "q", "ns", "l", "u", "en", "c", "num", "x", "h", "d", "y", "v", "f", "o", "net"], "k": ["K", "ks", "w", "p", "m", "j", "z", "b", "N", "ik", "q", "l", "u", "c", "e", "it", "h", "d", "y", "v", "ok", "f", "g"], "a": ["ga", "asha", "au", "p", "aura", "s", "alpha", "ac", "na", "r", "A", "sa", "ana", "ab", "an", "b", "ae", "ba", "ata", "data", "l", "u", "c", "e", "area", "am", "asa", "la", "va", "ha", "aa", "as", "array", "ama", "ans"], "count": ["test", "number", "list", "weight", "code", "base", "p", "group", "nt", "result", "user", "part", "index", "counter", "z", "work", "b", "coll", "length", "level", "size", "cache", "total", "data", "no", "child", "c", "out", "h", "keep", "sum", "id", "allow", "depth", "age", "offset", "Count", "len", "key", "add", "time", "stat", "active", "info", "found", "check"], "line": ["Line", "file", "inline", "cell", "status", "err", "LINE", "string", "code", "raw", "name", "word", "non", "base", "header", "user", "log", "home", "strip", "letter", "ine", "on", "pass", "le", "sync", "sl", "link", "one", "entry", "lc", "lo", "comment", "in", "lines", "url", "end", "cle", "error", "data", "row", "page", "no", "use", "lock", "cl", "pe", "l", "e", "text", "lin", "source", "id", "block", "body", "look", "style", "parse", "str", "lf", "nl", "rule", "ino", "zip", "online"], "snack": [" snpack", "svpack", "svicks", "svak", "sexicks", "sexack", "snicks", " snak", "svack", "snpack", " snicks", "sexak", "snak", "sexpack"], "users": ["people", "list", "results", "files", "cons", "parents", "apps", "Users", "string", "usr", "user", "vers", "ums", "stars", "home", "lbs", "uses", "bugs", "ins", "lines", "split", "lists", "data", "use", "stats", "usa", "players", "u", "groups", "ers", "projects", "used", "words", "plugins", "rows", "ru", "jobs", "drivers", "str", "staff", "ids", "username", "names", "runners", "members", "mates", "us", "features", "info", "array", "phones", "agents", "rules", "strings", "boxes"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "name", "p", "oi", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "b", "ai", "in", "phi", "multi", "inner", "li", "ci", "ti", "data", "ik", "ji", "ri", "qi", "u", "bi", "c", "e", "init", "iu", "it", "eni", "mi", "pi", "x", "fi", "id", "ip", "uri", "y", "v", "ix", "slice", "shift", "f", "ui", "o", "info"], "parseInt": ["parserString", " parseLong", "packLong", "readInteger", "formatDouble", " parseString", "packInt", "parseInteger", "readLong", "parseLong", " parseDouble", "parseDouble", "readINT", "parserInteger", "formatLong", " parseINT", "pingInteger", "formatInteger", "packDouble", "readInt", " parseInteger", "seInteger", "seINT", "parserInt", "pingINT", "parseString", "seLong", "seInt", "parseINT", "matchINT", "matchInteger", "packInteger", "pingLong", "packString", "parserLong", "matchInt", "pingInt", "formatInt", "matchLong"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint h = sc.nextInt();\\n\t\tint n = sc.nextInt();\\n\t\tint sum = 0;\\n\\n\t\tfor(int i = 0; i < n ; i++) {\\n\t\t\tsum += sc.nextInt();\\n\t\t}\\n\\n\t\tif(sum >= h) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n\\n}\\n", "target": "95", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "sf", "ctx", "com", "cc", "ner", "sec", "tc", "enc", "sync", "system", "cr", "sq", "osc", "ec", "lc", "sl", "class", "cont", "coll", "bc", "sci", "ss", "ci", "cus", "cl", "se", "c", "src", "Sc", "asc", "sche", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "SC"], "h": ["hs", "ch", "w", "p", "s", "m", "j", "t", "z", "hm", "b", "in", "count", "ah", "end", "H", "ih", "total", "dh", "q", "l", "u", "num", "c", "e", "d", "bh", "v", "hr", "hh", "f", "o", "sh", "k"], "n": ["number", "w", "ny", "p", "s", "nb", "m", "ne", "j", "ln", "ni", "z", "b", "N", "count", "nm", "nn", "ns", "l", "u", "c", "conn", "x", "dn", "d", "y", "v", "nc", "f", "o", "net", "k"], "sum": ["weight", "fill", "sav", "um", "si", "unit", "help", "alpha", "average", "index", "wh", "Sum", "hash", "conf", "count", "av", "mean", "error", "size", "total", "miss", "use", "min", "ass", "carry", "num", "am", "out", "su", "scale", "depth", "d", "offset", "v", "spread", "vol", "fat", "div", "hum", "sh", "summary", "cost", "start", "norm"], "i": ["gi", "xi", "I", "si", "di", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "ni", "z", "uli", "ini", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "it", "mi", "pi", "x", "fi", "id", "ip", "uri", "v", "ix", "f", "ui", "o"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main\\n{\\n    \\n\tpublic static void main(String[] args) throws Exception{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString[] s = br.readLine().trim().split(\" \");\\n\t\tint a = Integer.parseInt(s[0]);\\n\t\tint b = Integer.parseInt(s[1]);\\n\t\tint c = Integer.parseInt(s[2]);\\n\t\tint k = Integer.parseInt(s[3]);\\n\t\tint ans = 0;\\n\t    if(k >= a){\\n\t        ans += a;\\n\t        k -= a;\\n\t    }\\n\t    else{\\n\t        ans = k;\\n\t        k = 0;\\n\t    }\\n\\n\t    if(k >= b){\\n\t        k -= b;\\n\t    }\\n\t    else{\\n\t        k = 0;\\n\t    }\\n\t\\n\t    if(k >= c){\\n\t        ans -= c;\\n\t        k -= c;\\n\t    }\\n\t    else{\\n\t        ans = ans-k;\\n\t    }\\n\t    System.out.println(ans);\\n\t}\\n}\\n\\n", "target": "56", "substitutes": {"br": ["res", "nr", "io", "err", "Br", "ar", "img", "erb", "tr", "sr", "er", "buf", "yr", "result", "BR", "r", "browser", "jar", "cr", "arr", "abs", "report", "gr", "bar", "ocr", "dr", "obj", "mr", "fr", "stream", "HR", "bs", "out", "ber", "bridge", "bro", "wr", "bed", "ler", "str", "hr", "reader", "i", "bl", "rb"], "s": ["fs", "parts", "comments", "qs", "is", "ks", "w", "ms", "string", "aws", "p", "sts", "gs", "os", "r", "sets", "t", "sl", "js", "abs", "ls", "tests", "ds", "lines", "ss", "ws", "its", "fts", "ns", "l", "u", "ses", "ves", "e", "bs", "su", "ts", "bis", "words", "bes", "d", "ps", "y", "v", "es", "f", "services", "as", "o", "times", "sb", "g", "i", "strings", "rows"], "a": ["fa", "ak", "ar", "ca", "n", "au", "p", "alpha", "ac", "aaa", "r", "A", "sa", "z", "an", "ab", "ai", "ae", "ba", "da", "l", "u", "e", "ad", "af", "am", "x", "h", "area", "d", "va", "aa", "f", "as", "o", "i"], "b": ["w", "n", "base", "bb", "p", "lb", "r", "j", "z", "ab", "bc", "ba", "ob", "B", "l", "u", "e", "x", "h", "d", "y", "db", "v", "aa", "ok", "f", "o", "sb", "i"], "c": ["ch", "w", "cs", "ca", "n", "p", "C", "ac", "cc", "cn", "sc", "r", "z", "ec", "lc", "cf", "ci", "q", "l", "u", "e", "ce", "h", "x", "d", "y", "v", "dc", "f", "cu", "o", "g", "cb", "i"], "k": ["K", "ask", "kn", "kr", "ks", "w", "ak", "cs", "n", "p", "mk", "unk", "ac", "m", "ark", "uk", "j", "pass", "ki", "z", "km", "sk", "ek", "an", "work", "ck", "ace", "kk", "kin", "ke", "ku", "ky", "ik", "q", "cl", "ijk", "l", "u", "e", "ad", "can", "ka", "x", "dk", "h", "kw", "keep", "id", "d", "y", "kid", "kick", "key", "ko", "ack", "ok", "f", "o", "g", "i"], "ans": ["ks", "ants", "cons", "ak", "aks", "cs", "ani", "ca", "lan", "ops", "ctx", "ark", "amps", "offs", "na", "ents", "ANS", "arts", "ens", "os", "anas", "ana", "ki", "qa", "nan", "an", "sk", "ann", "ars", "acs", "aces", "ds", "ins", "ls", "vs", "kes", "kin", "atan", "leans", "cas", "keys", "aning", "ads", "ians", "cus", "ns", "anes", "acts", "ams", "can", "la", "ats", "eps", "cats", "aus", "ids", "es", "kick", "anus", "aned", "scan", "ons", "anc", "as", "nas", "ras", "ad"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\t\\n\t\tint n = in.nextInt();\\n\t\tint d = in.nextInt();\\n\t\t\\n\t\t// \u5b88\u5099\u7bc4\u56f2\\n\t\td = d*2 +1;\\n\t\t\\n\t\tif(n%d == 0) {\\n\t\t\tSystem.out.println(n/d);\\n\t\t} else {\\n\t\t\tSystem.out.println(n/d +1);\\n\t\t}\\n\t\t\\n\t\tin.close();\\n\t}\\n}\\n", "target": "238", "substitutes": {"in": ["din", "token", "file", "is", "io", "err", "In", "gen", "bin", "arg", "string", "line", "s", "socket", "m", "loader", "serv", "r", "pass", "ln", "ini", "doc", "ins", "lib", "inf", "input", "inner", "rin", "inside", "image", "data", "kin", "win", "l", "c", "init", "binary", "out", "x", "inc", "con", "path", "login", "isin", "buffer", "scan", "connection", "f", "include", "as", "g", "reader", "info", "i", "IN", "inn"], "n": ["p", "nb", "nt", "m", "ne", "j", "mn", "ni", "z", "b", "N", "pn", "nn", "q", "ns", "l", "en", "c", "e", "h", "v", "nc", "f", "o", "g", "i", "k"], "d": ["dd", "xd", "di", "dy", "p", "m", "cd", "dt", "ind", "ds", "dm", "D", "nd", "e", "did", "dn", "dx", "id", "dc", "f", "fd", "o", "dim", "md", "sd", "i", "ad"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int num = scan.nextInt();\\n        String str = scan.next();\\n        String alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\\n        String result = \"\";\\n\\n        for (int i = 0; i < str.length(); i++) {\\n            char c = str.charAt(i);\\n            int wantGet = (alpha.indexOf(c) + num) % 26;\\n            String[] alphaList = alpha.split(\"\");\\n            result += alphaList[wantGet];\\n        }\\n\\n        System.out.println(result);\\n    }\\n}", "target": "13", "substitutes": {"scan": ["run", "span", "search", "gen", "n", "parser", "ser", "er", "see", "connect", "query", "ner", "sc", "na", "r", "ln", "sync", "system", "skip", "an", "ann", "south", "fan", "in", "inner", "row", "sin", "san", "read", "se", "en", "conn", "can", "out", " scanner", "cat", "ans", "look", "feed", "server", "Scan", "walk", "watch", "reader", "iter", "parse", "gram", "con"], "num": ["nu", "number", "nr", "NUM", "pos", "um", "n", "name", "unit", "umi", "nb", "nt", "index", "loc", "max", "in", "count", "nm", "end", "multi", "no", "nn", "size", "Num", "dec", "en", "init", "np", "nam", "sum", "id", "inc", "con", "offset", "uni", "len", "off", "div", "f", "temp", "start", "col"], "str": ["list", "br", "char", "form", "string", "code", "name", "tr", "sr", "s", "part", "enc", "r", "txt", "stri", "st", "arr", "in", "input", "url", "obj", "Str", "data", "iter", "fr", "text", "pr", "cat", "id", "path", "div", "f", "sp", "STR", "parse", "strings", "spec"], "alpha": ["Alpha", "a", "acl", "aci", "padding", "sha", "pha", "si", "string", "parser", "name", "p", "ra", "ca", "lambda", "star", "ac", "abi", "attr", "na", "index", "A", "ma", "char", "prefix", "alias", "data", "arc", "da", "alph", "type", "xa", "asc", "la", "ara", "format", "va", "api", "beta", "amp", "attribute", "aa", "abc", "auto", "array", "title"], "result": ["test", "res", "results", "list", "rc", "status", "err", "search", "char", "winner", "string", "answer", "output", "attr", "acc", "feature", "r", "valid", "arr", "report", "work", "response", "replace", "transform", "comment", "url", "match", "data", "page", "goal", "alph", "success", "Result", "asc", "su", "text", "sum", "function", "message", "root", "rap", "current", "ret", "runner", "array"], "i": ["gi", "xi", "I", "io", "si", "di", "p", "oi", "ii", "hi", "index", "j", "ni", "z", "ini", "ai", "phi", "multi", "ji", "li", "ci", "zi", "ri", "qi", "u", "bi", "e", "iu", "eni", "it", "pi", "conv", "h", "fi", "id", "ip", "uri", "d", "v", "ix", "f", "ui", "o", "info"], "c": ["a", "esc", "rc", "ch", "char", "n", "code", "p", "C", "ac", "cc", "sc", "r", "vc", "cr", "b", "lc", "xc", "ci", "l", "u", "e", "ce", "x", "cat", "d", "v", "nc", "uc", "f", "cu", "abc", "cp", "g", "k", "col"], "wantGet": ["needExtra", "neededGet", "needget", "WantExtra", "wantLike", " wantExtra", " wantGive", "wantWant", "wantget", "wantGive", "WantGet", "Wantget", "WantGive", " wantLike", " wantWant", "neededGive", "needGet", "WantWant", "wantExtra", " wantget", "neededWant", "needLike", "WantLike"], "alphaList": ["AlphaL", "alphalist", "maDesc", " alphaDesc", " alphaL", "shalist", "alphaString", " alphalist", "Alphalist", "alphaL", "AlphaDesc", " alphaString", "shaL", "AlphaSet", "maString", "AlphaList", "shaList", "alphaDesc", "maSet", "AlphaString", "alphaSet", "maList", " alphaSet"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\\n\tpublic static void main(String[] args) {\\n\t\t(new Main()).execute();\\n\t}\\n\tpublic void execute() {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u6574\u6570\u306e\u5165\u529b\\n\t\tint  N = sc.nextInt();\\n\t\tLong A[] = new Long[N+2] ;\\n\t\tLong B[] = new Long[N+1] ;\\n\\n\t\tfor( int i = 1 ; i <= N + 1; i ++ ) {\\n\t\t\tA[i] = sc.nextLong();\\n\t\t}\\n\t\tfor( int i = 1 ; i <= N ; i ++ ) {\\n\t\t\tB[i] = sc.nextLong();\\n\t\t}\\n\\n\t\t//\\n\t\tLong yoryoku = 0L ;\\n\t\tLong mCountSum = 0L ;\\n\t\tfor( int i = 1 ; i <= N ; i ++ ) {\\n\t\t\tLong mCount = 0L ;//\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u5012\u3057\u3066\u3082\u3089\u3048\u308b\u4eba\u6570\\n\t\t\tif(yoryoku <= A[i]) {//\u4f59\u529b\u3088\u308a\u591a\u3044\u5834\u5408\\n\t\t\t\tmCount =  yoryoku ;//\u307e\u305a\u4f59\u529b\u5206\u3092\u5012\u3059\\n\t\t\t\tLong nokori = A[i] - yoryoku ;//\u6b8b\u308a\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u6570\\n\t\t\t\tif(nokori <= B[i]) {//\u6b8b\u308a\u3092\u5012\u305b\u308b\u306a\u3089\\n\t\t\t\t\tmCount = A[i] ;//\u5168\u6ec5\u3055\u305b\u308b\\n\t\t\t\t\tyoryoku = B[i] - nokori ; //\u4f59\u529b\u3092\u66f4\u65b0\\n\t\t\t\t}else {//\u5012\u305b\u306a\u3044\u306a\u3089\u5012\u305b\u308b\u3060\u3051\\n\t\t\t\t\tmCount += B[i] ;\\n\t\t\t\t\tyoryoku = 0L ;\\n\t\t\t\t}\\n\t\t\t}else {//\u4f59\u529b\u3088\u308a\u5c11\u306a\u3044\u30e2\u30f3\u30b9\u30bf\u30fc\u306a\u3089\\n\t\t\t\tmCount = A[i] ; //\u5168\u6ec5\u3055\u305b\u308b\\n\t\t\t\tyoryoku = B[i] ; //\u3059\u3079\u3066\u3092\u4f59\u529b\u306b\u3059\u308b\\n\t\t\t}\\n\t\t\tmCountSum += mCount ;\\n\t\t}\\n\t\t//\u6700\u5f8c\u306e\u753a\\n\t\tif(0 < yoryoku) {\\n\t\t\tif(yoryoku <= A[N+1]) {//\u4f59\u529b\u3088\u308a\u591a\u3044\u5834\u5408\\n\t\t\t\tmCountSum += yoryoku ;\\n\t\t\t}else {\\n\t\t\t\tmCountSum += A[N+1] ; //\u5168\u6ec5\u3055\u305b\u308b\\n\t\t\t}\\n\t\t}\\n\\n\\n\t\tSystem.out.println(mCountSum);\\n\t}\\n}\\n", "target": "159", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main {\\n    static InputStreamReader r;\\n    public static void main(String[] args) throws Exception {\\n        r = new InputStreamReader(System.in);\\n        int c = r.read();\\n        int nextC = c + 1;\\n\\n        System.out.println((char)nextC);\\n    }\\n\\n    public static String nextString() throws Exception {\\n        String res = \"\";\\n        while (true) {\\n            int c = r.read();\\n            if (c == 32 || c == 0 || c == -1) {\\n                break;\\n            }\\n            res += (char)c;\\n        }\\n        return res;\\n    }\\n\\n    public static int nextInt() throws Exception {\\n        return Integer.parseInt(nextString());\\n    }\\n\\n    public static long nextLong() throws Exception {\\n        return Long.parseLong(nextString());\\n    }\\n}", "target": "150", "substitutes": {"r": ["run", "nr", "rc", "kr", "re", "w", "br", "err", "ar", "n", "rs", "p", "sr", "er", "m", "http", "t", "cr", "b", "gr", "dr", "writer", " R", "in", "R", "rx", "ir", "fr", "rl", "l", "u", "e", "h", "rh", "lr", "pr", "rr", "Reader", "ru", "rt", "d", "hr", "f", "rg", "o", "reader", "i", "ur", "rb"], "c": ["pc", "esc", "fc", "rc", "ch", "w", "cs", "char", "n", "code", "oc", "p", "C", "ic", "s", "cc", "ac", "m", "sc", "enc", "vc", "t", "z", "ec", "cr", "b", "lc", "coll", "in", "count", "xc", "bc", "end", "ci", "cm", "arc", "cus", "cl", "l", "u", "e", "ce", "x", "h", "unc", "ct", "d", "v", "dc", "mc", "nc", "uc", "f", "cu", "anc", "o", "abc", "cy", "cp", "cb", "i", "k", "col"], "nextC": ["NextC", "prevN", "nextc", "NextU", "prevC", "niceC", "nextCC", "niceN", "nextU", " nextCC", "niceU", "NextCC", "nextN", " nextN", "Nextc", " nextc", "NextN", "nicec", "prevc", "prevCC", " nextU"], "res": ["results", "vals", "rc", "Res", "re", "i", "cons", "css", "err", "cs", "ms", "string", "rs", "cms", "raw", "ress", "s", "result", "breaks", "req", "rev", "enc", "bytes", "cr", "resource", "vs", "rex", "response", "rus", "rx", "RES", "data", "reset", "out", "resp", "vec", "remote", "str", "rest", "rap", "es", "rez", "ret", "reply", "uc", "resolution", "details", "pres", "ries", "reg", "ras"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        int N = scanner.nextInt();\\n        long[] A = new long[N + 1];\\n        long[] B = new long[N];\\n\\n        for (int i = 0 ; i < N + 1 ; i++) {\\n            A[i] = scanner.nextLong();\\n        }\\n\\n        for (int i = 0 ; i < N ; i++) {\\n            B[i] = scanner.nextLong();\\n        }\\n\\n        long answer = 0;\\n        for (int i = 0 ; i < N ; i++) {\\n            answer += Math.min(A[i], B[i]);\\n            B[i] = B[i] - Math.min(A[i], B[i]);\\n            answer += Math.min(A[i + 1], B[i]);\\n            A[i + 1] -= Math.min(A[i + 1], B[i]);\\n        }\\n\\n        System.out.println(answer);\\n      }\\n}\\n", "target": "159", "substitutes": {"scanner": ["scaner", " Scanner", "Scanener", " scaninner", " Scanler", "nerinner", "nerker", " scanin", "scannder", "scanler", " Scanener", "scanter", "canner", "Scaner", "Scanner", "Scanler", "caninner", "Scannder", "nerter", "canker", "caner", " scanler", " scanener", "scanker", "Scanker", "canter", "Scanin", " scanker", "Scanter", "cannder", "scanin", " Scaner", "canin", "scanener", "nerner", " scaner", "scaninner", "Scaninner", " scannder"], "N": ["O", "network", "K", "Part", "E", "I", "Na", "n", "Ns", "ND", "Len", "C", "T", "Ni", "J", "NT", "Ne", "NB", "NY", "G", "W", "NN", "Size", "Q", "R", "D", "H", "Y", "NA", "Z", "Num", "L", "Network", "IO", "NM", "M", "X", "NE", "None", "S", "F", "P", "CNN", "V", "Node", "NS", "Nat", "Number", "KN", " n"], "A": ["a", "API", "Alpha", "U", "AST", "I", "Bar", "HA", "AC", "As", "Ab", "AU", "AF", "AB", "GA", "Ca", "C", "alpha", "AM", "Array", "Auth", "Input", "LA", "AA", "AI", "Adam", "IA", "AS", "The", "Image", "There", "Y", "Ha", "NA", "Act", "L", "Average", "MA", "Java", "Bu", "Az", "X", "Args", "Area", "Ma", "Ar", "AR", "BA", "S", "P", "F", "App", "mA", "Wa", "AV", "AP", "Australia", "Am", "At", "An", "Answer", "Ac", "CA"], "B": ["O", "Part", "E", "I", "BS", "Bar", "But", "Ab", "VB", "Bi", "AB", "J", "C", "BF", "T", "BE", "BD", "BR", "NB", "SB", "TB", "Base", "Other", "MB", "G", "FB", "PB", "b", "W", "Q", "QB", "R", "Both", "BC", "GB", "Big", "D", "UB", "CB", "Y", "RB", "Beta", "DB", "Z", "L", "Far", "Rest", "M", "Builder", "Sub", "BG", "LB", "Bs", "BA", "OB", "F", "P", "Back", "V", "EB", "Number", "BB", "New", "Band", "BL", "BER", "WB", "BI", "BM", "Answer"], "i": ["a", "gi", "xi", "I", "ei", "io", "w", "si", "n", "ie", "di", "p", "oi", "cli", "m", "abi", "ii", "hi", "sup", "chi", "j", "ki", "ni", "mini", "ini", "mu", "b", "ai", "phi", "ji", "multi", "li", "ci", "ti", "l", "qi", "u", "bi", "ri", "e", "ori", "iu", "eni", "it", "mi", "x", "pi", "h", "fi", "init", "yi", "source", "module", "id", "ip", "uri", "my", "d", "y", "v", "api", "ix", "slice", "vi", "f", "ui", "o", "info", "g"], "answer": ["issue", "expression", "number", "ee", "score", "address", "err", "update", "value", "string", "word", "search", "balance", "output", "exit", "query", "alpha", "answered", "result", "average", "grade", " answers", "zero", "memory", "z", " Answer", "empty", "support", "response", "length", "ae", "now", "error", "size", "use", "evidence", "cache", "account", " result", "knowledge", "complete", "term", "eni", "blank", "area", "audio", " answered", "next", "Answer", "age", "option", "field", "offset", "message", "ell", "energy", "duration", "reply", "integer", "fee", "array", "question"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\t//new Main().printHelloWorld();\\n\t\tSystem.out.println(new Main().ITP1_1_B(Integer.parseInt(new Scanner(System.in).next())));\\n\t}\\n\\n\tpublic void printHelloWorld(){\\n\t\tSystem.out.println(\"Hello World\");\\n\t}\\n\\n\tpublic int ITP1_1_B(int x){\\n\t\treturn x*x*x;\\n\t}\\n}", "target": "36", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n  public static void main (String[] args) {\\n\\n    Scanner sc = new Scanner(System.in);\\n    \\n    int N = sc.nextInt();\\n    String[] W = new String[N];\\n\\n    for (int i = 0; i < N; i++) {\\n      W[i] = sc.next();\\n    }\\n\\n    sc.close();\\n\\n    String result = \"Yes\";\\n\\n    for (int i = 0; i < N; i++) {\\n      for (int j = i + 1; j < N; j++) {\\n        if (W[i].equals(W[j])) {\\n          result = \"No\";\\n          break;\\n        }\\n      }\\n      if (result == \"No\") {\\n        break;\\n      }\\n    }\\n\\n    String start = \"\";\\n\\n    if (result == \"Yes\") {\\n      for (int i = 0; i < N; i++) {\\n        if (i != 0) {\\n          String[] s_ = W[i].split(\"\");\\n          if (s_[0].equals(start)) {\\n            start = s_[s_.length - 1];\\n          } else {\\n            result = \"No\";\\n            break;\\n          }\\n        } else {\\n          String[] s_ = W[i].split(\"\");\\n          start = s_[s_.length - 1];\\n        }\\n      } \\n    }\\n\\n    System.out.println(result);\\n\\n  }\\n\\n}", "target": "70", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "search", "si", "screen", "sr", "cc", "ner", "sa", "sync", "system", "cr", "osc", "sq", "st", "lc", "bc", "sci", "cle", "ss", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "sem", "ng", " SC", "sch", "dc", "mc", "scan", "nc", " Sc", "anc", "uc", "server", "sh", "sp", "sb", "parser", "parse", "SC", "k", "squ"], "N": ["O", "network", "K", "Part", "E", "I", "NR", "Na", "n", "Ns", "J", "C", "T", "Len", "NT", "Ne", "NB", "SN", "G", "NN", "Size", "Q", "length", "R", "NO", "H", "D", "Y", "NA", "Z", "B", "Num", "L", "NM", "M", "X", "No", "S", "F", "P", "Node", "V", "NS", " n"], "W": ["O", "U", "Widget", "I", "Write", "E", "w", "MW", "Sw", "DW", "WR", "Word", "T", "C", "Wh", "WA", "WAR", "Array", "WE", "Ws", "G", "Q", "Weight", "R", "WC", "H", "AW", "D", "WF", "Y", "CW", "VW", "B", "NW", "L", "Win", "TW", "M", "SW", "GW", "X", "Only", "We", "RW", "WS", "S", "F", "P", "Windows", "V", "ML", "BW", "FW", "West", "New", "WP", "Web", "WB", "WER"], "i": ["xi", "gi", "a", "I", "is", "io", "w", "si", "n", "ie", "di", "ami", "p", "oi", "ii", "hi", "part", "index", "chi", "ni", "ini", "mu", "b", "ind", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "ik", "zi", "ri", "qi", "u", "bi", "l", "c", "e", "ori", "iu", "init", "eni", "mi", "pi", "x", "h", "it", "fi", "yi", "id", "ip", "uri", "y", "ix", "v", "api", "slice", "vi", "key", "f", "ui", "o", "info", "jp"], "result": ["test", "res", "results", "ver", "our", "status", "err", "reason", "winner", "search", "string", "mer", "word", "sr", "answer", "diff", "effect", "grade", "folder", "feature", "pass", "valid", "default", "r", "report", "work", "response", "replace", "comment", "order", "now", "mark", "match", "error", "use", "page", "expected", "success", "join", "date", "complete", "Result", "su", "str", "division", "compl", "format", "message", "continue", "root", "current", "enter", "card", "ret", "json", "future", "info", "cash"], "j": ["ja", "n", "ie", "dj", "J", "p", "jo", "ii", "ij", "r", "jet", "ni", "z", "js", "jj", "b", "jl", "ind", "ji", "end", "li", "obj", "ik", "l", "aj", "u", "e", "it", "h", "out", "x", "pr", "next", " dj", "uj", "d", "y", "v", "ix", "key", "f", "o", "ui", "k", "jp"], "start": ["test", "find", "fill", "pos", "cur", "get", "search", "base", "string", "step", "stop", "name", "space", "unit", "line", "p", "help", "set", "Start", "part", "first", "st", "work", "show", "starting", "length", "end", "split", "match", "data", "use", "range", "stack", "se", "join", "init", "it", "type", "text", "next", "sum", "id", "scale", "open", "style", "parse", "before", "offset", "str", "art", "current", "seed", "shift", "sp", "from", "info"], "s_": ["your__", " sApp", "servicesRes", "s___", "sP", "stringsIP", "services_", "ses__", "sck", "SApp", "your___", "SP", "singleck", "c_", "S__", "sApp", "d2", "ns_", "dRes", "sRes", "services2", " s___", "ts_", " sIP", "ns5", "d_", "nsck", "s__", "your_", "s5", "blocksP", "stringsck", "S_", " s2", "single_", "S___", "strings_", "ses_", "sesApp", "sIP", "single5", "cP", "ts2", "blocks_", "tsIP", "strings5", "s2", " s__", " sRes", "strings2"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tint D = sc.nextInt() * 2 + 1;\\n\t\tint ans =0;\\n\t\tans = N/D;\\n\t\tif (N%D > 0) {ans++;}\\n\\n\t\tSystem.out.println(ans);\\n\\n\t}\\n}\\n", "target": "238", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "sf", "com", "cc", "ner", "tc", "sec", "soc", "na", "acc", "enc", "sync", "cr", "osc", "ec", "sq", "lc", "class", "bc", "sci", "ss", "ci", "cl", "se", "c", "src", "Sc", "asc", "text", "sche", "cv", " SC", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "SC"], "N": ["O", "K", "Part", "E", "I", "n", "Ns", "ND", "Len", "C", "T", "Ni", "NT", "Ne", "A", "NN", "Size", "R", "H", "Y", "Z", "B", "Num", "L", "NM", "GN", "M", "NC", "X", "S", "P", "F", "CNN", "V", "NS", "NL", "MN"], "D": ["O", "K", "E", "I", "OD", "DH", "C", "T", "FD", "BD", "Di", "A", "G", "DM", "Q", "ds", "R", " d", "Y", "CD", "JD", "Z", "L", "DI", "dL", "DD", "M", "LD", "X", "Ds", "S", "d", "F", "DS", "P", "MD", "DP", "V", "DA", "DO", "Do", "DF"], "ans": ["span", "ks", "ants", "cs", "Na", "n", "AN", "CS", "lan", "anon", "s", "vers", "na", "ents", "ANS", "nan", "ana", "outs", "an", "sk", "ann", "ars", "ls", "ds", "ins", "lines", "atan", "cas", "nn", "anned", "ians", "NA", "ns", "anes", "can", "acts", "reads", "S", "ats", "eps", "ions", "es", "aned", "scan", "ons", "anc", "as", " scans", "ays", "nas", "ras"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tString[] days={\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\",\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\"};\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString W = in.readLine();\\n\\n\t\tlong ans =-1;\\n\t\tfor(int i = 0;i<days.length;i++){\\n\t\t\tif(W.equals(days[i])){\\n\t\t\t\tans=1;\\n\t\t\t\tfor(int k=i+1;k<days.length;k++){\\n\t\t\t\t\tif(\"SUN\".equals(days[k])){\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t\tans++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif(ans != -1){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\\n\t}\\n\\n\\n}\\n", "target": "136", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.util.PriorityQueue;\\n\\npublic class Main\\n{\\n  public static void main(String[] args)\\n  {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    PriorityQueue<Double> q = new PriorityQueue<Double>();\\n    for(int i = 0; i < n; ++i)\\n    {\\n      double x = sc.nextDouble();\\n      q.add(x);\\n    }\\n    while(q.size() > 1)\\n    {\\n      double a = q.poll();\\n      double b = q.poll();\\n      q.add((a+b)/2.0);\\n    }\\n    double ans = q.poll();\\n\\n    System.out.println(ans);\\n  }\\n\\n}\\n", "target": "232", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "core", "cur", "cs", "ca", "cor", "cer", "sf", "screen", "sr", "ctx", "s", "cc", "ner", "enc", "r", "sync", "system", "cr", "sq", "osc", "ec", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "SC"], "n": ["network", "w", "p", "nb", "s", "m", "nt", "ne", "j", "r", "ln", "t", "ni", "z", "sn", "N", "in", "nn", "ns", "l", "u", "en", "c", "num", "fn", "conn", "h", "d", "y", "len", "nc", "f", "nl", "net", "k"], "q": ["question", "list", "qs", "quad", "ch", "w", "p", "qq", "ctx", "query", "req", "ue", "qa", "sync", "z", "sq", "dq", "qu", "que", "queue", "Q", "iq", "ck", "eq", "bird", "cache", "row", "cl", "l", "qi", "u", "quick", "c", "e", "h", "qt", "v", "ack", "f", "sh", "o", "g", "progress", "k", "quit", "check"], "i": ["xi", "I", "is", "io", "w", "si", "ie", "p", "m", "ii", "hi", "index", "j", "chi", "z", "mu", "ai", "in", "phi", "ji", "li", "ci", "ti", "zi", "qi", "u", "c", "e", "iu", "mi", "pi", "yi", "id", "y", "v", "ix", "f", "o", "ui", "info"], "x": ["xi", "wx", "px", "w", "p", "xt", "fx", "cross", "t", "z", "xxxx", "XX", "xy", "xc", "rx", "ax", "l", "u", "c", "e", "xs", "X", "dx", "xx", "val", "y", "ux", "ix", "v", "xxx", "ex", "xp", "f", "abc"], "a": ["fa", "ga", "ca", "au", "p", "aaa", "ac", "alpha", "ia", "na", "A", "ea", "sa", "ma", "an", "ab", "ae", "ba", "da", "aj", "c", "e", "af", "am", "area", "la", "d", "y", "va", "aa", "as", "ama", "ad"], "b": ["bin", "bb", "p", "nb", "s", "bd", "eb", "zb", "j", "r", "abb", "z", "ab", "ib", "bc", "ub", "ba", "ob", "pa", "B", "l", "mb", "c", "fb", "e", "bs", "d", "y", "db", "bf", "aa", "f", "sb", "ad"], "ans": ["chan", "ks", "ants", "fa", "ca", "AN", "lan", "anan", "anon", "ia", "na", "ANS", "os", "nan", "anas", "ana", "outs", "an", "ann", "ls", "ars", "ds", "ins", "ss", "atan", "cas", "leans", "aning", "ns", "pa", " na", "can", "argo", "aos", "aus", "ions", "es", "anus", "aned", "scan", "ons", "anc", "as", " scans", "ays", "nas", "ras"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int num = s.nextInt();\\n        int[] a = new int[num];\\n        int cnt = 0;\\n        for (int i = 0; i < num; i++) {\\n            a[i] = s.nextInt();\\n        }\\n\\n        while (allEven(a)) {\\n            division(a);\\n            cnt++;\\n        }\\n        System.out.println(cnt);\\n        s.close();\\n    }\\n\\n    public static void division(int[] num) {\\n        for (int i = 0; i < num.length; i++) {\\n            num[i] /= 2;\\n        }\\n    }\\n\\n    public static boolean allEven(int[] num) {\\n        int cnt = 0;\\n        boolean ret = false;\\n        for (int i = 0; i < num.length; i++) {\\n            if (num[i] % 2 == 0) {\\n                cnt++;\\n            }\\n        }\\n        if (cnt == num.length) {\\n            ret = true;\\n        }\\n        return ret;\\n    }\\n}", "target": "196", "substitutes": {"s": ["fs", "qs", "is", "ms", "si", "n", "parser", "sf", "aws", "p", "ops", "m", "gs", "os", "http", "sets", "south", "sv", "sl", "abs", "js", "sync", "ls", "b", "storage", "ds", "ins", "in", "ss", "ws", "ns", "se", "sys", "l", "u", "c", "e", "ses", "out", "bis", "ts", "xs", "S", "d", "ssl", "ps", "es", "ions", "services", "f", "o", "sb", "ans"], "num": ["span", "four", "tri", "begin", "um", "mult", "nb", "mom", "index", "b", "mon", "multi", "split", "total", "common", "Num", "id", "ng", "off", "len", "info", "missing", "comb", "pos", "lim", "bin", "form", "name", "unit", "umi", "loc", "valid", "mu", "length", "count", "u", "oct", "unc", "nam", "uni", "om", "draw", "col", "nu", "number", "gen", "n", "alpha", "m", "na", "ul", "zero", "digit", "du", "note", "coord", "gnu", "input", "size", "c", "type", "inc", "div", "dim", "project", "NUM", "initial", "ga", "hex", "two", "max", "nm", "dom", "no", "nn", "node", "dec", "param", "np", "sum", "nom", "block", "f", "con", "norm"], "a": ["span", "access", "sta", "fa", "ga", "ar", "ca", "p", "aaa", "alpha", "ac", "na", "A", "sa", "qa", "ma", "z", "an", "ab", "b", "ai", "aux", "input", "ae", "ba", "ata", "da", "aj", "u", "aw", "c", "e", "area", "am", "x", "va", "y", "aa", "div", "as", "array", "ama", "au", "ad"], "cnt": ["ecnt", "Cnt", "scct", "ecnc", " cant", "cachekt", "cachept", " cOUNT", "acnt", "acant", "scNT", "ecNT", "lcnn", "Ccount", "cct", "ucNT", "Cnc", "ckt", "cpt", "ecnn", "Cant", "ucOUNT", " count", "lccount", "CNT", "Cpt", "cnd", "COUNT", "ecpt", "uccount", " cNT", "cachenn", "count", "eckt", "cOUNT", "ucnt", "acount", "cachent", "scnt", "scnc", "acNT", "Cnd", "Cct", "scnd", " cpt", "lcNT", "scpt", " cct", "cnc", "Count", "cant", " cnn", "cNT", "lcnt", "ecnd", "cnn", "ccount", "Cnn", " ccount", " ckt"], "i": ["xi", "gi", "I", "ei", "io", "si", "ie", "n", "di", "p", "oi", "cli", "abi", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "data", "ik", "inner", "ri", "qi", "u", "bi", "l", "e", "init", "iu", "eni", "my", "mi", "pi", "x", "yi", "fi", "source", "id", "ip", "uri", "y", "v", "ix", "slice", "f", "ui", "o", "info"], "ret": ["res", "rc", "re", "cur", "true", "arg", "ref", "fun", "ft", "exit", "nt", "result", "Ret", "rev", "default", "valid", "lit", "pass", "r", "rets", "replace", "bc", "match", "error", "full", "det", "success", "ext", "bit", "flag", "id", "cat", "alt", "rt", "val", "continue", "len", "back", "bf", "reply", " Ret", "f", "reg", "info", "ur", "RET"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        int[] A = new int[3];\\n\\n        for(int i = 0; i < 3; i++ ) A[i] = sc.nextInt();\\n        \\n        Arrays.sort(A);\\n        int ans = A[2] - A[0];\\n        \\n        System.out.println(ans);\\n    }\\n}\\n", "target": "247", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "desc", "cs", "search", "ca", "sub", "cer", "ner", "nt", "sec", "soc", "exp", "acc", "enc", "system", "osc", "cr", "sq", "bc", "sci", "ss", "ci", "sign", "cl", "scope", "se", "c", "src", "Sc", "sche", " SC", "sch", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "A": ["Alpha", "API", "a", "U", "AST", "I", "Action", "Part", "Ant", "AC", "As", "Except", "AU", "AN", "AF", "AB", "Access", "C", "T", "AM", "Array", "LA", "AA", "AI", "N", "UA", "Adam", "IA", "AS", "H", "NA", "B", "L", "Average", "MA", "SA", "Args", "X", "Ar", "AR", "Address", "S", "P", "None", "And", "V", "AP", "ASC", "array", "At", "An", "Act", "CA"], "i": ["a", "xi", "gi", "I", "io", "si", "at", "n", "di", "ie", "p", "oi", "abi", "ii", "hi", "part", "index", "r", "j", "chi", "ni", "mini", "ini", "mu", "b", "ind", "ai", "in", "ji", "multi", "li", "ci", "ti", "l", "qi", "u", "bi", "c", "ri", "e", "type", "x", "h", "pi", "id", "ip", "uri", "v", "ix", "key", "f", "ui", "o", "k"], "ans": [" errors", "An", "ants", "cs", "AN", "lan", "anan", "anon", "annot", " Ans", "amps", "na", " plans", "ANS", "nan", " averages", "anas", "outs", "an", "sk", "ann", " sins", "ars", "anch", "ins", "nas", " means", "aning", "anned", "ians", "rors", "anes", " na", "ases", "acts", " stats", " fa", " spans", " genes", "aus", "ions", " cases", "aned", "scan", " scans", " chars", "ras"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int cnt_all = 0;\\n        for(int i=1; i<=n; i+=2){\\n            int cnt = 0;\\n            for(int j=1;j<=n;j++){\\n                if(i>=j && i%j==0){\\n                    cnt++;\\n                }\\n            }\\n            if(cnt == 8){\\n                cnt_all++;\\n            }\\n        }\\n        System.out.println(cnt_all);\\n    }\\n}", "target": "85", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "cs", "ca", "sub", "cer", "com", "cc", "ner", "sec", "soc", "acc", "enc", "sync", "system", "cr", "osc", "ec", "sq", "lc", "bc", "sci", "ss", "ci", "scope", "se", "c", "src", "Sc", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "n": ["a", "network", "w", "p", "nb", "s", "m", "nt", "r", "t", "ni", "z", "b", "N", "in", "count", "nn", "size", "q", "ns", "l", "u", "num", "c", "e", "conn", "x", "h", "d", "y", "len", "nc", "f", "nl", "o", "net", "k"], "cnt_all": ["cnt_0", "cno_all", "count_All", "count_8", "cnt_All", "cnt_alls", "count_alls", "cnt_8", "cno_64", "cnt_64", "count_0", "cno_All", "count_all"], "i": ["gi", "xi", "I", "io", "si", "ie", "di", "p", "oi", "ii", "hi", "ij", "index", "ni", "z", "jj", "ini", "b", "ind", "ai", "in", "phi", "ji", "li", "ci", "ti", "ik", "zi", "ri", "qi", "u", "bi", "c", "ori", "iu", "eni", "mi", "pi", "x", "yi", "fi", "id", "ip", "uri", "jit", "v", "api", "ix", "ui", "o", "info", "start", "jp"], "cnt": ["Cnt", "cgt", "lcnc", "lcct", "ancgt", "lcrt", "cfNT", "cct", "Cnc", "cpt", "rcount", " cnc", "lcount", "CNT", "count", "rcpt", " cNT", "lcpt", "curpt", "cfnt", "rcnt", "ancrt", "currt", "Cct", "cfrt", "cnc", "lcNT", " cct", "cfgt", "curnt", "crt", "cNT", "lcnt", "ancnt", "ancNT", "lcgt", "rcrt", "curount"], "j": ["bj", "ch", "err", "ja", "si", "jc", "dj", "J", "p", "oi", "jo", "ii", "ij", "index", "z", "jj", "js", "jl", "b", "ji", "li", "ci", "obj", "l", "qi", "u", "oj", "c", "aj", "bi", "x", "adj", "uj", "d", "je", "y", "v", "key", "f", "ui", "o", "start", "k", "jp"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        String S = sc.next();\\n        int zeroCnt = 0;\\n        int oneCnt = 0;\\n        int min = 0;\\n        for(int i = 0;i <S.length();i++){\\n            if(S.charAt(i) == '0'){\\n                zeroCnt++;\\n            }\\n        }\\n        oneCnt = S.length()-zeroCnt;\\n        min = Math.min(zeroCnt,oneCnt);\\n        System.out.println(min*2);\\n    }\\n}\\n", "target": "14", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String S = sc.next();\\n    String T = sc.next();\\n    int A = sc.nextInt();\\n    int B = sc.nextInt();\\n    String U = sc.next();\\n    if (U.equals(S)){\\n      System.out.printf(\"%d %d\", A-1, B);\\n    }else{\\n      System.out.printf(\"%d %d\", A, B-1);\\n    }\\n  }\\n}\\n", "target": "155", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "core", "cur", "cs", "ser", "ca", "sub", "cer", "sf", "cor", "search", "sr", "ctx", "cc", "ner", "tc", "soc", "sync", "osc", "cr", "sq", "lc", "cont", "coll", "bc", "sci", "cle", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "can", "sche", "ct", "cv", " SC", "sch", "scan", "nc", "uc", "anc", "sh", "sp", "sb", "parser", "parse", "SC", "co"], "S": ["O", "I", "Si", "SU", "C", "SP", "SS", "s", "SK", "SN", "G", "N", "TS", "R", "AS", "D", "H", "Y", "OSS", "L", "M", "SA", "UT", "SR", "SI", "P", "SL", "F", "V", "NS", "ST", "SH", "SC"], "T": ["O", "K", "E", "I", "Name", "C", "NT", "TB", "t", "G", "W", "N", "TS", "Q", "R", "D", "H", "Y", "Z", "L", "M", "X", "Type", "TT", "P", "F", "V"], "A": ["a", "API", "Alpha", "Part", "I", "AC", "As", "Ab", "AB", "C", "AM", "Array", "PA", "LA", "AA", "AI", "N", "W", "D", "AW", "Y", "NA", "L", "SA", "Az", "X", "AD", "Area", "Ar", "AR", "EA", "Ma", "P", "F", "TA", "mA", "Count", "DA", "AP", "CA"], "B": ["O", "a", "E", "I", "Ab", "AB", "C", "BF", "BD", "SB", "TB", "Base", "MB", "G", "AA", "b", "N", "W", "Q", "QB", "R", "BC", "GB", "D", "Y", "Beta", "DB", "Z", "L", "M", "X", "Bs", "BA", "OB", "P", "F", "V", "EB", "Number", "BB", "BI", "WB"], "U": ["O", "UE", "TM", "E", "I", "MU", "Su", "SU", "C", "CU", "UP", "PU", "UV", "G", "W", "N", "Q", "R", "UI", "H", "D", "Y", "UL", "L", "u", "UC", "UTC", "M", "UT", "X", "TC", "UR", "OU", "UG", "P", "F", "V", "GU", "US"]}}
{"code": "import java.util.Scanner;\\n\\n \\npublic class Main {\\n \\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint H = sc.nextInt();\\n\t\tint N = sc.nextInt();\\n\t\t\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tH = H - sc.nextInt();\\n\t\t}\\n\\n\t\tif(H <= 0) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\tsc.close();\\n\t}\\n\t\\n}", "target": "95", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "cer", "sf", "sr", "ctx", "com", "cam", "cc", "tc", "sec", "soc", "app", "acc", "sync", "system", "cr", "osc", "ec", "sq", "lc", "class", "bc", "sci", "ss", "ci", "cl", "scope", "se", "l", "c", "src", "Sc", "asc", "out", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "uc", "f", "server", "anc", "sh", "sp", "sb", "parser", "SC"], "H": ["O", "K", "U", "E", "I", "HA", "HQ", "DH", "J", "C", "T", "GH", "Length", "CL", "A", "G", "W", "SHA", "Q", "HS", "D", "Y", "Hi", "B", "Z", "L", "M", "TH", "h", "X", "Limit", "MH", "HH", "S", "F", "P", "ID", "HD", "V", "EH", "HE", "HY", "SH", "CH", "HI"], "N": ["O", "K", "U", "E", "I", "n", "Ns", "J", "C", "T", "Ni", "NT", "Ne", "NB", "G", "W", "Q", "R", "D", "Y", "Z", "B", "L", "NM", "NI", "M", "X", "No", "NE", "S", "P", "F", "V", "NS", "NL", "MN"], "i": ["a", "xi", "gi", "I", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "part", "index", "j", "chi", "z", "ini", "mu", "b", "ai", "in", "inner", "ji", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "c", "e", "init", "it", "x", "h", "pi", "id", "d", "v", "slice", "f", "o", "ui", "info", "start", "k"]}}
{"code": "import java.util.*;\\n\\n \\nclass Main {\\n \\n    private static Scanner sc = new Scanner(System.in);\\n \\n    public static void main(String[] args) {\\n        String s[] =new String[5];\\n        for(int i=0;i<5;i++){\\n            s[i]=sc.next();\\n        }\\n        int k=Integer.parseInt(sc.next());\\n        int antn[] =new int[5];\\n        for(int i=0;i<5;i++){\\n            antn[i]=Integer.parseInt(s[i]);\\n        }\\n        for(int r=0;r<5;r++){\\n            for(int t=0;t<4;t++){\\n                if(Math.abs(antn[r]-antn[t])>k){\\n                    System.out.println(\":(\");\\n                    return;\\n                }\\n            }\\n        }\\n        System.out.println(\"Yay!\");\\n    }\\n}", "target": "66", "substitutes": {"sc": ["pc", "scl", "esc", "sw", "rc", "ch", "core", "cs", "search", "sf", "cc", "ner", "sa", "cr", "st", "system", "sq", "osc", "lc", "config", "bc", "sci", "spec", "ss", "cl", "scope", "se", "c", "src", "Sc", "or", "sche", "cv", " SC", "sch", "mc", "console", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "sb", "g", "parser", "SC", "scene"], "s": ["a", "fs", "parts", "qs", "is", "files", "si", "n", "string", "rs", "aws", "p", "m", "gs", "os", "sets", "sv", "abs", "b", "ls", "tests", "scripts", "ins", "ss", "ws", "letters", "its", "fts", "ns", "l", "u", "c", "ses", "e", "opens", "ts", "states", "S", "ssl", "ps", "v", "f", "services", "as", "ans", "strings"], "i": ["xi", "gi", "I", "is", "io", "err", "si", "n", "di", "ie", "p", "oi", "me", "ii", "hi", "index", "j", "iii", "ni", "uli", "ini", "mu", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "l", "e", "init", "it", "eni", "iu", "mi", "x", "pi", "fi", "id", "ip", "uri", "y", "v", "ix", "slice", "api", "f", "ui", "o", "info"], "k": ["K", "kn", "kr", "ks", "ak", "n", "p", "m", "j", "z", "km", "work", "sk", "b", "max", "kk", "end", "ik", "q", "point", "u", "c", "e", "x", "h", "dk", "kw", "d", "y", "v", "kick", "key", "ok", "f", "o", "check"], "antn": ["fortn", "antp", "atN", "antno", "antsns", "appm", "fortp", "ntno", "ANTl", "antsu", "antnn", "ntns", "ntna", "ntnn", "ntN", "atno", "antns", "fortns", "antm", "antsno", "antsna", "appnn", "fortu", "ntn", " antnn", "antsn", "ANTn", "ntu", "atn", "antN", "appns", "appn", "antna", " antns", "antl", "ntm", "ntp", "antu", "antsl", "atna", "antsN", "ANTp", "antsp", "ntl", " antm", "ANTns"], "r": ["nr", "rc", "w", "br", "ar", "n", "rs", "tr", "p", "sr", "er", "yr", "ner", "m", "j", "b", "R", "ir", "l", "ri", "u", "c", "e", "rf", "x", "or", "h", "pr", "rr", "ru", "right", "id", "rt", "d", "v", "f", "ter", "rb"], "t": ["et", "test", "the", "err", "at", "n", "ot", "pt", "tr", "p", "T", "nt", "m", "j", "te", "z", "st", "dt", "b", "tt", "port", "ti", "tw", "l", "lt", "u", "c", "e", "term", "out", "h", "ts", "x", "ta", "ct", "rt", "d", "y", "v", "f", "o", "wt"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    private static Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String args[]) {\\n\\n        String s = sc.nextLine();\\n\\n        int l = s.length();\\n\\n        String ans1, ans2;\\n\\n        StringBuilder sb1 = new StringBuilder();\\n        StringBuilder sb2 = new StringBuilder();\\n\\n        for (int i=0; i < l; i++) {\\n            sb1.append(i % 2 == 0 ? \"1\" : \"0\");\\n            sb2.append(i % 2 != 0 ? \"1\" : \"0\");\\n        }\\n\\n        ans1 = sb1.toString();\\n        ans2 = sb2.toString();\\n\\n        int d1 = distance(s, ans1);\\n        int d2 = distance(s, ans2);\\n\\n        System.out.println(d1 > d2 ? d2 : d1);\\n\\n    }\\n\\n    private static int distance(String s, String target) {\\n        int c = 0;\\n        char[] s1 = s.toCharArray();\\n        char[] s2 = target.toCharArray();\\n        for (int i=0; i < s.length(); i++) {\\n            if (s1[i] != s2[i])\\n                c++;\\n        }\\n        return c;\\n    }\\n\\n}\\n", "target": "146", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "cs", "si", "screen", "sr", "cc", "ner", "sec", "r", "cr", "osc", "system", "sq", "lc", " scr", "bc", "sci", "ss", "ci", "cl", "scope", "se", "src", "Sc", "asc", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "parser", "SC"], "s": ["a", "parts", "qs", "is", "address", "cs", "si", "n", "string", "sf", "aws", "p", "rs", "submit", "m", "gs", "os", "sets", "null", "t", "south", "sv", "sl", "sync", "sample", "js", "b", "ls", "tests", "ds", "ins", "abs", "in", "sg", "ss", "ws", "session", "stats", "ns", "sys", "se", "u", "secondary", "ses", "e", "series", "src", "bs", "h", "ts", "su", "bis", "single", "xs", "source", "states", "S", "d", "ssl", "es", "f", "server", "services", "host", "sb", "ans", "strings"], "l": ["n", "p", "pl", "ln", "t", "z", "sl", "b", "ls", "lc", "ld", "length", "li", "el", "cl", "L", "lp", "fl", "lt", "kl", "lin", "la", "dl", "ll", "d", "v", "ell", "ol", "lf", "len", "f", "nl", "lu", "bl"], "ans1": ["ans0", "ani", "ANS3", "ann3", "aned81", "aned1", "ans81", "ANSone", "ann2", "an2", "anone", "ss2", "aned2", "annone", "an81", "ss0", "ss1", "anedi", "ans3", "ANS1", "an1", "ants1", "an3", "ants2", "ansi", "ssone", "ann0", "ants81", "ANS2", "antsi", "ansone", "an0", "ann1"], "ans2": ["anontwo", "ANS02", "an4", "antsTwo", "ann2", "anntwo", "an2", "ss02", "annb", "ss2", "annTwo", "anstwo", "aned2", "anonTwo", "ss4", "ss1", "ANStwo", "ANS1", "sstwo", "an1", "antwo", "ants2", "anonb", "antsb", "antstwo", "ans4", "anon2", "anedtwo", "ansb", "ANS2", "aned4", "ansTwo", "an02", "ans02", "aned1"], "sb1": ["ls1", "bb0", "sth0", "gbOne", "sth2", "bb1", "SB1", "SB0", "lbFirst", "SB2", "bbOne", "bbFirst", "gb81", "lsOne", "gb2", "abb1", "lb0", "SBOne", "ls2", "sb81", "sbOne", "lb2", "abb2", "ls81", "sb0", "abbOne", "gb1", "lb1", "SB81", "abb0", "sth1", "sthFirst", "sbFirst", "bb2"], "sb2": ["kbtwo", "bb0", "kb1", "wb2", "bbsecond", "ub2", "bbb", "cbTwo", "bb1", "SB1", "SB2", "bbtwo", "sbb", "wb1", "sbtwo", "lb0", "kbsecond", "ub1", "lb2", "cb0", "sb0", "wbb", "cb1", "lb1", "sbTwo", "kb2", "sbsecond", "cb2", "SBb", "bbTwo", "ubsecond", "ubtwo", "lbTwo", "bb2"], "i": ["gi", "xi", "a", "I", "io", "si", "n", "di", "ie", "p", "oi", "cli", "m", "abi", "ii", "hi", "chi", "j", "index", "t", "ni", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ti", "ci", "data", "zi", "ri", "u", "bi", "qi", "e", "init", "it", "iu", "ori", "mi", "pi", "x", "h", "fi", "yi", "eni", "id", "ip", "uri", "v", "slice", "ix", "vi", "f", "ui", "o", "info"], "d1": [" d01", "sd1", "sd01", "da3", "d3", "done", "dd3", "c2", "c1", "D1", " d64", "da1", "D0", "sd3", "D3", "d0", "ds2", "ds64", "sdOne", " dOne", "dOne", "d64", "daOne", "ds1", "dsone", "dd0", "d01", "c64", "cone", " d0", "dd1", "D2", "dd2", "da01", " d3", " done"], "d2": ["dt2", "dttwo", "etwo", "e0", "D1", "id2", "idtwo", "dsecond", "e1", "D0", "ded2", "d0", "ded1", "dedsecond", "Dsecond", "Dtwo", " dtwo", " d72", "ded0", " dsecond", "e2", "id1", "dt1", " d0", "id72", "D2", "d72", "dt72", "dtwo"], "target": ["token", "the", "address", "string", "base", "p", "output", "result", "that", "null", "t", "this", "resource", "b", "class", "Target", "length", "port", "input", "reference", "alias", "large", "match", "object", "range", "goal", "join", "src", "conn", "h", "text", "next", "source", "content", "ssl", "path", "v", "root", "buffer", "f", "host", "array", "shadow", "project"], "c": ["pc", "fc", "rc", "cs", "oc", "n", "code", "p", "C", "cc", "sec", "ac", "tc", "enc", "cd", "r", "t", "cr", "ec", "b", "lc", "coll", "in", "count", "bc", "xc", "ci", "cache", "cm", "arc", "cmp", "u", "e", "ce", "x", "unc", "ct", "d", "v", "dc", "mc", "nc", "uc", "f", "cu", "anc", "cy", "k", "col", "co"], "s1": ["sone", "ds3", "p2", "ans001", "ps3", "cs1", "ds001", "s100", "ps1", "p100", "s001", "psone", "ans3", "cs2", "ps001", "ds1", "dsone", " s100", "s3", "cs100", "p1", "ansone"], "s2": ["p2", " s4", "pTwo", "ds2", "p4", "ds1", "dsB", "pB", "sB", " sTwo", "s4", " sB", "dsTwo", "p1", "sTwo"]}}
{"code": "import java.util.Scanner;\\n  \\nclass Main{\\n  public static void main(String[] arg){\\n    int n, m, l;\\n    int [][] a,b;\\n    long [][] c;\\n \\n    Scanner in = new Scanner(System.in);\\n\\n    n = in.nextInt();\\n    m = in.nextInt();\\n    l = in.nextInt();\\n\\n    a = new int[n][m];\\n    b = new int[m][l];\\n    c = new long[n][l];\\n\\n    for(int i=0; i<a.length; i++){\\n        in.nextLine();\\n        for(int j=0; j<a[0].length; j++)\\n            a[i][j] = in.nextInt();\\n    }\\n\\n    for(int i=0; i<b.length; i++){\\n        in.nextLine();\\n        for(int j=0; j<b[0].length; j++)\\n            b[i][j] = in.nextInt();\\n    }\\n\\n    for(int i=0; i<c.length; i++)\\n        for(int j=0; j<c[0].length; j++)\\n            c[i][j] = 0;\\n\\n    for(int i=0; i<n; i++)\\n        for(int j=0; j<l; j++)\\n            for(int k=0; k<m; k++)\\n                c[i][j] += a[i][k]*b[k][j];\\n \\n    for(int i=0,j; i<c.length; i++){\\n        for(j=0; j<c[0].length-1; j++)\\n            System.out.print(c[i][j] + \" \");\\n        System.out.println(c[i][j]);\\n    }\\n \\n  }\\n}", "target": "204", "substitutes": {"arg": ["ig", "params", "err", "gen", "word", "line", "Arg", "gs", "loc", "pass", "enc", "lang", "pl", "config", "match", "param", "Args", "argument", "path", "cfg", "key", "host", "g", "pattern", "flag", "con"], "n": ["w", "p", "s", "nt", "na", "nan", "r", "ln", "ne", "mn", "t", "z", "an", "sn", "ann", "N", "li", "nn", "no", "q", "ns", "u", "en", "e", "x", "h", "d", "un", "y", "v", "len", "nc", "f", "o", "g", "net", "inn"], "m": ["w", "ms", "p", "s", "ml", "r", "ln", "t", "mn", "z", "an", "mu", "im", "all", "q", "u", "en", "e", "M", "mi", "x", "h", "lin", "sm", "d", "y", "v", "mc", "f", "o", "g", "md", "mm"], "l": ["il", "p", "s", "ul", "ln", "z", "sl", "lc", "ls", "length", "li", "all", "q", "el", "L", "u", "e", "x", "kl", "lin", "la", "d", "ll", "dl", "y", "v", "ol", "len", "f", "o", "nl", "lu", "al"], "a": ["ap", "sta", "w", "fa", "ar", "ga", "ca", "at", "au", "p", "ia", "ac", "alpha", "s", "aaa", "A", "sa", "ea", "ao", "ma", "z", "an", "ab", "ai", "ae", "ba", "ata", "pa", "da", "aj", "u", "e", "am", "area", "x", "asa", "la", "d", "va", "y", "api", "aa", "f", "as", "o", "ans", "ad"], "b": ["bas", "br", "bin", "base", "bb", "p", "lb", "s", "bd", "eb", "nb", "r", "wb", "t", "abb", "z", "ab", "ib", "pb", "bar", "ba", "ob", "boot", "q", "B", "u", "mb", "bi", "e", "fb", "bs", "x", "h", "body", "d", "bh", "y", "db", "v", "beta", "bf", "aa", "f", "o", "sb", "be", "g", "rb"], "c": ["ch", "w", "col", "cs", "ca", "code", "p", "C", "s", "ac", "cc", "cn", "cd", "r", "t", "z", "ec", "lc", "cf", "count", "ci", "cache", "q", "cl", "u", "e", "ce", "x", "h", "cat", "ct", "d", "y", "v", "f", "cu", "o", "cy", "g", "con", "co"], "in": ["exec", "din", "token", "is", "pin", "get", "err", "In", "bin", "line", "er", "ic", "ner", "part", "fin", "r", "ln", "cin", "ini", "thin", "doc", "ins", "rin", "inf", "conf", "inner", "kin", "readable", "input", "by", "sin", "win", "vin", "min", "init", "conn", "out", "lin", "tin", "id", "zin", "inc", "str", "gin", "OUT", "path", "nin", "login", "again", "isin", "ex", "scan", "arin", "as", "g", "reader", "IN", "inn"], "i": ["xi", "gi", "I", "is", "io", "idi", "si", "ie", "di", "p", "oi", "cli", "ii", "hi", "ij", "ki", "ni", "z", "ini", "ai", "phi", "ji", "li", "ci", "ti", "ik", "q", "zi", "ri", "qi", "u", "bi", "e", "ori", "iu", "it", "eni", "mi", "x", "pi", "yi", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "api", "vi", "f", "o", "ui", "info"], "j": ["bj", "io", "si", "dj", "jo", "data", "it", "pi", "adj", "str", "jit", "ju", "ix", "off", "json", "ui", "g", "w", "job", "ja", "ie", "J", "p", "ii", "ij", "js", "jl", "ld", "length", "ji", "li", "ik", "u", "h", "uj", "o", "gh", "gi", "ch", "br", "jc", "q", "fr", "aj", "oj", "x", "je", "api", "jp", "dy", "r", "jet", "ni", "z", "jj", "obj", "el", "qi", "bi", "e", "pr", "d", "y", "v", "jen", "key", "f"], "k": ["K", "kn", "ks", "ch", "w", "ak", "p", "uk", "ki", "z", "ek", "sk", "ck", "kk", "ke", "ji", "ky", "ik", "q", "u", "e", "it", "h", "ka", "x", "kw", "id", "d", "y", "v", "key", "ko", "ok", "f", "o", "g"]}}
{"code": "\\nimport java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n      String[] nyu=sc.nextLine().split(\" \");\\n   //  String nyu=sc.nextLine();\\n\\nint A=Integer.parseInt(nyu[0]);\\nint B=Integer.parseInt(nyu[1]);\\n\\nString ny[]=sc.nextLine().split(\"\");\\n\\nfor(int i=0;i<ny.length;i++){\\nif(i==B-1){\\nSystem.out.print(ny[i].toLowerCase());\\n}else{\\nSystem.out.print(ny[i]);\\n}\\n\\n}\\n\\n\t}\\n}", "target": "71", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "desc", "cs", "sf", "cc", "ner", "sec", "log", "acc", "sync", "system", "cr", "ec", "sl", " scr", "bc", "sci", "ss", "cl", "scope", "se", "l", "c", "src", "Sc", "or", "str", " SC", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "reader", "parser", "SC", "spec"], "nyu": ["niu", "nnu", "nnd", "nycu", "nyus", "nicu", "snu", "nid", "snd", "nnus", "snus", "nncu", "nyd", "nius", "sncu"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint x = sc.nextInt();\\n\t\tint n = sc.nextInt();\\n\t\tString[] nums = new String[n];\\n\t\tfor (int i = 0; i < n; i++){\\n\t\t\tnums[i] = sc.next();\\n\t\t}\\n\t\tsc.close();\\n\t\tfor(int count = 0;;count++){\\n\t\t\tif (!(Arrays.asList(nums).contains(String.valueOf(x-count)))){\\n\t\t\t\tSystem.out.println(x-count);\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tif (!(Arrays.asList(nums).contains(String.valueOf(x+count)))){\\n\t\t\t\tSystem.out.println(x+count);\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t}\\n}\\n", "target": "228", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "sf", "sr", "set", "cc", "ner", "tc", "sync", "system", "osc", "cr", "sq", "lc", "cont", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", "str", "sch", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "parser", "SC"], "x": ["test", "number", "wx", "w", "pos", "xe", "code", "step", "p", "hex", "exp", "width", "on", "cross", "index", "j", "fx", "t", "z", "work", "b", "max", "rex", "XX", "length", "size", "lex", "ax", "num", "c", "e", "ext", "h", "xs", "X", "python", "tx", "xes", "xx", "id", "d", "y", "ix", "v", "key", "ex", "sex", "draw", "f", "plus", "check"], "n": ["number", "w", "p", "s", "nb", "m", "nt", "ne", "j", "t", "z", "sn", "b", "N", "in", "size", "nn", "no", "all", "ns", "l", "u", "en", "c", "num", "h", "d", "y", "v", "len", "f", "o", "net", "k"], "nums": ["ynums", "enumbers", " nores", "nores", "Numbers", " numeric", " nrams", "ynumbers", "nams", "ynams", "Numeric", " nams", "nonumbers", "nonrams", " num", "Names", "numeric", "enames", "Num", "nonumeric", "Nores", "nrams", "num", "ynores", "nonums", "enums", "Nrams", "nonum", "Nams", "numbers", "Nums", " names", "names", " numbers"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "b", "ind", "ai", "in", "phi", "multi", "inner", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "e", "init", "it", "iu", "mi", "pi", "fi", "id", "ip", "uri", "y", "v", "slice", "ix", "f", "o", "ui", "info", "start"], "count": ["number", "list", "find", "parent", "old", "weight", "dist", "code", "base", "cycle", "name", "cc", "loop", "nt", "part", "handle", "index", "age", "counter", "z", "b", "max", "coll", "only", "length", "order", "level", "now", "match", "size", "cache", "all", "common", "child", "num", "c", "other", "type", "ext", "out", "process", "sum", "id", "depth", "cat", "content", "d", "thread", "y", "inc", "check", "cond", "Count", "format", "current", "key", "label", "act", "f", "patch", "time", "found", "call", "start", "seq", "col"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main  {\\n    public static void main(String args[]) {\\n      FastScanner fs=new FastScanner();    \\n      PrintWriter out=new PrintWriter(System.out);\\n        int x=fs.nextInt();\\n        out.println(x==1?0:1);\\n        out.flush();\\n        out.close();\\n    }\\n\tstatic void ruffleSort(int[] a) {\\n \t\tRandom random=new Random();\\n\t\tint n=a.length;\\n\t\tfor (int i=0; i<n; i++) {\\n\t\t\tint oi=random.nextInt(n), temp=a[oi];\\n\t\t\ta[oi]=a[i]; a[i]=temp;\\n\t\t}\\n\t\tArrays.sort(a);\\n\t}\\n}\\n        class FastScanner {\\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n\t\tStringTokenizer st=new StringTokenizer(\"\");\\n\t\t\\n\t\tString next() {\\n\t\t\twhile (!st.hasMoreTokens())\\n\t\t\t\ttry {\\n\t\t\t\tst=new StringTokenizer(br.readLine());\\n\t\t\t\t}\\n\t\t\t\tcatch (IOException e) {\\n\t\t\t\t\te.printStackTrace();\\n\t\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\t\tString nextLine() {\\n\t\t    String str=\"\";\\n\t\t    try {\\n\t\t        str=br.readLine();\\n\t\t    }\\n\t\t    catch (IOException e) {\\n\t\t        e.printStackTrace(); \\n\t\t    }\\n\t\t    return str;\\n\t\t}\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\t\tdouble nextDouble() {\\n\t\t    return Double.parseDouble(next());\\n\t\t}\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\t\tint[] readArray(int n) {\\n\t\t\tint[] a=new int[n];\\n\t\t\tfor (int i=0; i<n; i++) a[i]=nextInt();\\n\t\t\treturn a;\\n\t\t}\\n\t}", "target": "148", "substitutes": {"fs": ["fif", "res", "fc", "qs", "file", "ios", "io", "files", "cs", "obs", "ms", "sf", "fm", "s", "fp", " FS", "fx", "os", "arf", "vs", "fe", "cf", "ds", "aux", "df", "ss", "ws", "raf", "fts", "fr", "ns", "Fs", "FS", "fn", "af", "linux", "bs", "F", "ps", "fps", "feed", "f", "fd", "fw"], "out": ["Out", "plain", "file", "io", "client", "window", "err", "In", "gen", "bin", "string", "base", "code", "name", "output", "s", "write", "socket", "log", "user", "serv", "flow", "pass", "this", "outs", "report", "writer", "in", "input", " in", "inner", "prefix", "error", "obj", "cache", "page", "outer", "fn", "fb", "conn", "editor", "print", "source", "OUT", "path", "again", "buffer", "ex", "key", "f", "o", "auto", "up", "info", "IN", "flush"], "x": ["xi", "wx", "w", "pos", "code", "p", "ctx", "fx", "index", "j", "t", "z", "max", "xy", "xc", "ax", "q", "u", "num", "c", "xs", "X", "dx", "xx", "id", "d", "y", "ix", "v", "xxx", "ex", "xp", "f", "k", "check"], "a": ["list", "tta", "access", "parent", "w", "address", "ga", "ar", "at", "ca", "au", "p", "s", "alpha", "ac", "aaa", "Array", "na", "r", "A", "sa", "something", "ea", "z", "arr", "an", "ab", "ma", "b", "abs", "aux", "ae", "input", "ba", "ata", "data", "object", "instance", "pa", "ava", "l", "aj", "u", "c", "e", "area", "am", "next", "id", "la", "d", "y", "va", "aa", "f", "as", "o", "auto", "array", "ama", "ans", "active", "g", "ad"], "random": ["token", "regular", "reverse", "andom", "Rand", "gen", "winner", " rand", "p", "user", "worker", "rar", "r", "sample", "max", "in", "rand", "serial", "inner", "gradient", "bird", "normal", "min", "range", " randomly", "pick", "right", "open", "ng", "v", "monkey", "seed", "gener", "selection"], "n": ["network", "w", "nat", "name", "p", "nb", "s", "m", "nt", "ii", "na", "nan", "j", "ne", "r", "t", "ni", "z", "an", "sn", "b", "N", "max", "in", "count", "nn", "size", "no", "ns", "nd", "l", "u", "num", "c", "en", "e", "h", "dn", "d", "y", "v", "names", "len", "nc", "f", "nl", "o", "net", "g", "k"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "name", "p", "cli", "m", "ii", "hi", "index", "j", "ki", "ni", "z", "mini", "ini", "b", "ai", "ogi", "in", "phi", "ji", "multi", "li", "ci", "ti", "inner", "q", "zi", "l", "ri", "u", "bi", "c", "qi", "e", "ori", "iu", "eni", "it", "mi", "pi", "yi", "my", "id", "ip", "uri", "d", "y", "v", "api", "vi", "key", "f", "ui", "o", "info", "k"], "oi": ["xi", " bi", "adi", " si", "ei", "io", " pi", "si", "di", "oa", " ii", "ii", "abi", "agi", "lli", "ois", "j", "ki", "ni", "z", "ini", " vi", "ai", "ogi", "phi", "ji", "li", "ci", "ti", "ik", "oni", "zi", "qi", "u", "bi", "aji", "ori", "eni", "mi", "pi", "yi", "next", "uri", "o", "ui", " ki"], "temp": ["test", "flat", "base", "tr", "output", "diff", "tc", "ii", "fake", "default", "null", "mini", "z", "copy", " Temp", "empty", "lc", "partial", "emp", "input", "now", "stable", "data", "iter", "cache", "extra", "init", "tmp", "sem", "source", "v", "current", "key", "clean", "div", "Temp", "zip"], "br": ["res", "io", "ro", "cur", "err", "Br", "tr", "p", "sr", "er", "buf", "vr", "yr", "result", "BR", "pl", "r", "browser", "cr", "arr", "b", "dr", "bar", "gr", "ocr", "obj", "raf", "mr", "fr", "src", "ber", "or", "bt", "pr", "bro", "next", "lr", "ler", "fore", "rt", "bh", "db", "hr", "cro", "sp", "reader", "ur", "bl", "rb"], "st": ["sw", "sta", "string", "pt", "stop", "tr", "sr", "ste", "sts", "ft", "s", "struct", "nt", "sc", "first", "sth", "r", "sty", "inst", "stri", "t", "est", "cr", "sl", "ost", "b", "fe", "std", "ss", "stable", "fr", "stack", "cl", "nd", "l", "se", "ist", "ast", "src", "stress", "bt", "pr", "ct", "rt", "d", "ust", "rest", "ut", "sh", "sp", "ST", "sb", "start", "rd", "bl", "St"], "str": ["kr", "re", "cur", "err", "char", "string", "code", "tr", "p", "line", "sr", "s", "exp", "r", "stri", "t", "z", "sl", "arr", "cr", "dr", "gr", "doc", "in", "url", "dict", "obj", "Str", "data", "fr", "cl", "l", "e", "text", "pr", "id", "v", "div", "f", "sp", "STR"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n public static void main(String[] args){\\n  int S;\\n  Scanner scn = new Scanner(System.in);\\n  S = scn.nextInt();\\n  int hour;\\n  int minute;\\n  int second;\\n  hour = S/3600;\\n  minute = (S-3600*hour)/60;\\n  second = S-3600*hour-minute*60;\\n\\n  System.out.println(hour+\":\"+minute+\":\"+second);\\n}\\n}", "target": "84", "substitutes": {"S": ["O", "SE", "U", "K", "E", "I", "SU", "C", "T", "SS", "s", "RS", "Second", "SK", "A", "G", "W", "N", "TS", "Q", "Size", "R", "H", "D", "Y", "MS", "B", "L", "M", "SA", "Hour", "X", "SI", "P", "F", "SIZE", "V", "NS", "OS", "SH"], "scn": ["spr", "Scann", "scr", "scb", "SCb", "SCn", " scann", "Scn", "Scr", " scr", "scann", " scb", "spn", "scm", " scm", "SCm", "Scm", "spann", "SCr", "Scb", "spb"], "hour": ["direction", "quarter", "OUR", "value", "ute", "color", "section", "header", "volume", "sec", "user", "mile", "first", "clock", "edge", "inner", "year", "row", "page", "min", "month", "hours", "layer", "date", "night", "author", "half", "Hour", "h", "oct", "element", "block", "noon", "age", "d", "offset", "hr", "character", "key", "week", "server", "time", "sh", "rule", "day", "patch", " Hour"], "minute": ["direction", "quarter", "century", "value", "cycle", "unit", "volume", "sec", "m", "part", "first", "service", "man", "mini", "sample", "mon", "inner", "now", "year", "page", "min", "month", "pixel", "range", "micro", "date", "night", "half", "mi", "zone", "Hour", "third", " minutes", "element", "major", "noon", "d", "distance", "morning", "column", "message", "mm", "duration", "week", "shift", "time", "day", "seconds", "start", "ute", "mid"], "second": ["si", "code", "cycle", "step", "secret", "unit", "section", "Second", "sec", "two", "low", "part", "letter", "count", "year", "error", "size", "page", "min", "pixel", "position", "secondary", "term", " seconds", "zone", "left", "offset", "duration", "time", "seconds", "day"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint nam = sc.nextInt();\\n\t\t\\n\t\tString ans = \"No\";\\n\t\tfor(int i = 1; i <= 9; i++){\\n\t\t    for(int j = 1; j <= 9;j++){\\n\t\t        if(i * j == nam){\\n\t\t            ans = \"Yes\";\\n\t\t            break;\\n\t\t        }\\n\t\t    }\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "194", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "cur", "cs", "ca", "sub", "cer", "com", "cc", "ner", "sec", "soc", "na", "acc", "osc", "cr", "ec", "lc", "ocr", " scr", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", " SC", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "nam": ["span", " dim", "ram", "stan", "ny", "n", "di", "ami", "name", "cam", "amin", "sym", "cn", "acc", "na", "nan", "imag", "dam", "mn", "ni", "cin", "sn", "ai", "nm", "nn", "sam", "num", "asm", "param", "my", "am", "dn", "nw", "nom", "sem", "names", "nav", "jam", "lam", "dim", "mis", "inn"], "ans": ["span", "yes", "ks", "cons", "ants", "aks", "ani", "AN", "lan", "s", "vers", "ents", "ANS", "nan", "ens", "anas", "ana", "anges", "an", "sk", "ann", "ars", "ls", "olds", "acs", "ins", "tan", "ss", "atan", "cas", "nn", "aning", "artifacts", "ads", "sam", "san", "ns", "fts", "anners", "plan", "can", "ams", "acts", "abilities", "acers", "eps", "ats", "aus", "names", "anus", "aned", "ons", "anc", "as", "asts", "ays", "nas", "ras"], "i": ["gi", "xi", "a", "I", "io", "si", "ie", "di", "ami", "n", "p", "ii", "hi", "ij", "index", "ki", "ni", "z", "ini", "ai", "in", "ji", "li", "ci", "zi", "ri", "qi", "u", "bi", "l", "c", "init", "iu", "mi", "x", "pi", "yi", "id", "ip", "y", "v", "ix", "vi", "f", "ui", "info", "start"], "j": ["xi", "bj", "ja", "si", "ie", "jc", "dj", "n", "J", "p", "jo", "ii", "ij", "ni", "z", "jj", "js", "jl", "b", "ji", "end", "li", "q", "l", "qi", "u", "aj", "c", "e", "it", "x", "h", "out", "kj", "uj", "d", "y", "v", "jen", "f", "jam", "o", "start", "k", "jp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString t = sc.next();\\n\t\tString[] target = t.split(\"\");\\n\t\tint ans = 0;\\n\t\tfor (String a : target) {\\n\t\t\tans += Integer.parseInt(a);\\n\t\t}\\n\t\tif (ans % 9 == 0) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\t\\n\t}\\n}\\n", "target": "93", "substitutes": {}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\nclass Main {\\n    \\n    public static void main(String args[]){\\n        Scanner scanner = new Scanner(System.in);\\n        int n = scanner.nextInt();\\n        int m = scanner.nextInt();\\n        \\n        int[][] A = new int[n][m];\\n        int[] b = new int[m];\\n        int[] sum = new int[m];\\n\\n        scanner.nextLine();\\n        for(int i=0;i<n;i++){\\n            String input = scanner.nextLine();\\n            String inputTmp[] = input.split(\" \");\\n            int j = 0;\\n            for (String num : inputTmp) {\\n                A[i][j] = Integer.parseInt(num);\\n                j++;\\n            }\\n        }\\n\\n        for(int i=0;i<m;i++){\\n            int num = scanner.nextInt();\\n            b[i] = num;\\n        }\\n        \\n        for(int[] a: A){\\n            int val = 0;\\n            for(int k = 0;k<m;k++){\\n                val += a[k] * b[k];\\n            }\\n            System.out.println(val);\\n        }\\n    }\\n}\\n\\n", "target": "185", "substitutes": {"scanner": ["scaner", "Scann", "Scanener", " scaninner", " scanNER", "cann", "parsener", "analyer", "parseter", "analyner", "anner", "scanri", "scanNER", " scann", "canNER", "analyter", "Scaninner", "parseer", "canning", "parseker", "analyning", "canener", "scann", "scanter", "canner", "Scaner", "annri", "Scanner", "caninner", "caner", " scanener", "scanker", "annner", "Scanker", "canter", "Scanter", "annter", "scanning", " scanri", " scanter", "scanener", "analyker", "ScanNER", " scaner", "scaninner", "canker", "Scanri", "Scanning"], "n": ["network", "w", "p", "nb", "s", "cn", "nt", "ne", "r", "ln", "t", "mn", "z", "an", "sn", "N", "in", "nm", "nn", "ns", "l", "u", "c", "en", "e", "M", "np", "x", "d", "y", "v", "nc", "f", "net"], "m": ["w", "p", "fm", "s", "r", "mn", "mini", "z", "an", "hm", "mu", "in", "ym", "dm", "nm", "size", "cm", "l", "u", "c", "e", "M", "mi", "x", "h", "sm", "tm", "d", "y", "v", "mc", "f", "o", "dim", "g", "mm"], "A": ["O", "API", "K", "Alpha", "I", "U", "As", "Na", "C", "T", "alpha", "Array", "G", "AA", "LA", "N", "ai", "D", "H", "Y", "B", "Num", "L", "M", "am", "Args", "X", "Input", "Ar", "mA", "S", "P", "V", "aa", "array", "Am", "At", "An", "au", "CA"], "b": ["sub", "base", "bb", "bin", "p", "lb", "nb", "s", "bm", "bd", "r", "bp", "ab", "ib", "pb", "bc", "ub", "ba", "ob", "B", "l", "u", "mb", "c", "e", "binary", "bs", "x", "h", "body", "d", "y", "v", "beta", "bf", "f", "o", "sb", "g", "cb", "rb"], "sum": ["w", "um", "sub", "bin", "nb", "ac", "alpha", "bm", "acc", "sup", "index", "sa", "Sum", "ab", "mu", "max", "count", "bc", "mean", "size", "total", "data", "min", "am", "h", "su", "beta", "aa", "div"], "i": ["gi", "xi", "I", "io", "si", "ie", "di", "p", "oi", "cli", "ii", "hi", "index", "ni", "ini", "mu", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "im", "ik", "ri", "qi", "u", "bi", "c", "init", "iu", "it", "eni", "mi", "x", "pi", "fi", "id", "ip", "uri", "y", "v", "ix", "f", "ui", "info"], "input": ["list", "accept", "img", "bin", "form", "string", "value", "name", "output", "header", "null", "qa", "work", "entry", "inside", "image", "in", "inf", "data", "out", "text", "source", "Input", "id", "ip", "inc", "path", "format", "str", "amp", "json", "f", "up"], "inputTmp": ["InputDup", "InputTmp", "InputTtmp", "inputDtmp", "InputDsp", "InputDtmp", "inputDsp", "inputTamp", "InputDamp", "inputSsp", "inputLMP", "inputFMP", "inputTtmp", "inputDMP", "inputLamp", "InputTsp", "InputTup", "inputTsp", "inputNtmp", "InputTamp", "inputSMP", "inputLsp", "inputSmp", "inputNMP", "inputTMP", "inputLmp", "inputFup", "InputTMP", "inputFtmp", "inputTup", "inputNmp", "inputNup", "inputSamp", "InputDMP", "inputFmp", "inputDup", "inputDamp", "inputDmp", "InputDmp"], "j": ["ja", "si", "jc", "ie", "J", "p", "jo", "ii", "ij", "ne", "r", "ni", "z", "js", "jj", "jl", "ind", "ji", "li", "ci", "im", "l", "aj", "u", "c", "qi", "x", "d", "y", "v", "ix", "key", "f", "o", "ui", "g", "jp"], "num": ["nu", "gi", " unit", "number", " dim", "nr", "missing", " param", "tri", "NUM", "pos", "lim", "um", "bin", "gen", " NUM", "name", "unit", " numeric", "umi", "alpha", " coord", "mom", "na", "index", "lit", "loc", "ul", "digit", "umber", "mn", "mu", "max", "mon", "nm", "nn", "no", "Num", "node", "u", " numer", "fn", "init", "param", "np", "text", "nam", "nom", "id", "inc", "d", "ng", "uu", "offset", "uni", " digit", " nib", "f", " nu", "dim", "iter", "inn", " number"], "a": ["sta", "ar", "ga", "at", "ca", "au", "p", "aaa", "ac", "alpha", "ia", "sa", "ma", "an", "ai", "ae", "ba", "da", "u", "c", "am", "area", "la", "va", "aa", "f", "as", "array", "ama", "ad"], "val": ["vals", "pid", "pos", "ee", "err", "rot", "value", "pt", "base", "ref", "elt", "p", "unit", "pol", "grad", "pl", "index", "loc", "valid", "ana", "fail", "sl", "fe", "ind", "bl", "cel", "count", "split", "li", "data", "win", "el", "Val", "l", "py", "fl", "eval", "la", "v", "VAL", "ol", "len", "key", "vol", "fat", "sel", "f", "dim", "reg", "al", "col", "cal"], "k": ["th", "per", "K", "kn", "ask", "ks", "ch", "w", "cur", "p", "uk", "r", "kh", "pass", "ki", "z", "km", "sk", "work", "ck", "kk", "kin", "ke", "end", "ku", "ky", "ik", "kat", "row", "q", "u", "c", "ad", "it", "ka", "x", "kw", "id", "d", "y", "kid", "v", "kick", "key", "ko", "ack", "ok", "gh", "g", "spec"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n\\n    String strDate = sc.next();\\n\\n    String[] dates = strDate.split(\"/\");\\n    int month = Integer.parseInt(dates[1]);\\n\\n    if (month > 4) {\\n      System.out.println(\"TBD\");\\n    } else {\\n      System.out.println(\"Heisei\");\\n    }\\n  }\\n}\\n", "target": "163", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "ser", "cor", "cc", "ner", "sec", "enc", "sync", "osc", "cr", "st", "ec", "bc", "sci", "ss", "proc", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "text", "sche", "str", "ng", "sch", "mc", "scan", "nc", "uc", "sh", "sp", "parser", "SC"], "strDate": ["Strdate", " strDay", "StrMonth", "stringMonth", "striYear", " strdate", "stringdate", " strMonth", "strYear", "strDay", "stridate", "stringDay", "StrYear", "striDate", "strdate", " strYear", "stringDate", "striMonth", "StrDate", "StrDay", "strMonth"], "dates": ["ages", "points", "vals", "months", "parts", "ates", "notes", "dated", "days", "breaks", "ports", "anges", "bugs", "values", "lines", "keys", "data", "works", "hours", "date", "ches", "series", "next", "states", "shows", "jobs", "events", "alls", "forms", "years", "ints", "week", "dat", "rates", "features", "times", "steps", "users", "rules", "strings", "rows"], "month": ["number", "months", "method", "regular", "season", "string", "cycle", "step", "name", "m", "length", "mon", "year", "family", "data", "row", "range", "February", "Month", "bug", "dec", "date", "num", "type", "tag", "hour", "element", "id", "block", "mod", "d", "key", "week", "weekly", "time", "day", "period", "col"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.math.*;\\nimport java.math.BigInteger;\\nclass Main\\n{    \\n    public static void main(String args[])\\n    {\\n        StringBuilder ans=new StringBuilder();\\n        FastReader in=new FastReader();    \\n        int N=in.nextInt();\\n        int A[]=new int[N];\\n       // Arrays.fill(A,0);\\n        for(int i=0; i<N; i++)A[i]=in.nextInt();\\n        //start at 0 and finish at\\n       // int i=0;\\n        long cost=0;\\n        int dp[]=new int[N];\\n        \\n        for(int i=0; i<N; i++)\\n        {\\n            if(i==0)\\n            {dp[0]=0;continue;\\n            }\\n            if(i==1)\\n            {\\n                dp[1]=Math.abs(A[1]-A[0]);\\n                continue;\\n            }\\n           \\n            dp[i]=Math.min((Math.abs(A[i]-A[i-1])+dp[i-1]),(Math.abs(A[i]-A[i-2])+dp[i-2]));\\n        }\\n        System.out.println(dp[N-1]);\\n    }\\n\\n\\n    static  long pow(long a,long b)\\n    {\\n        long mod=1000000007;\\n        long pow=1;\\n        long x=a;\\n        while(b!=0)\\n        {\\n            if((b&1)!=0)pow=(pow*x)%mod;\\n            x=(x*x)%mod;\\n            b/=2;\\n        }\\n        return pow;\\n    }\\n\\n    static int bits(long x)\\n    {\\n        int n=(int)(Math.floor(Math.log(x)/Math.log(2)))+1;\\n        return (1<<n);\\n    }\\n\\n    static long rev(long x)\\n    {\\n        int n=(int)(Math.floor(Math.log(x)/Math.log(2)))+1;\\n\\n        return ((1<<n)-1)^x;\\n    }\\n    //fucntions\\n    //fucntions\\n    //fucntions\\n    //fucntions\\n    static int[] input(int A[]) //input of Int Array\\n    {\\n        FastReader in=new FastReader();\\n        int N=A.length;\\n        for(int i=0; i<N; i++)\\n        {\\n            A[i]=in.nextInt();\\n        }\\n        return A;\\n    }\\n\\n    static long[] input(long A[]) //Input of long Array\\n    {\\n        FastReader in=new FastReader();\\n        for(int i=0; i<A.length; i++)A[i]=in.nextLong();\\n        return A;\\n    }\\n\\n    static long lcm(long a,long b)\\n    {\\n        return (a*b)/GCD(a,b);\\n    }\\n\\n    static long GCD(long a,long b) //wrong output if a ||b are intially zero\\n    {\\n        if(b==0)\\n        {\\n            return a;\\n        }\\n        else return GCD(b,a%b );\\n    }\\n\\n    static boolean isPrime(int N)\\n    {\\n        for(int i=2; i*i<N; i++)\\n            if(N%i==0)return false;\\n        return true;\\n    }\\n\\n}\\n//Code For FastReader\\n//Code For FastReader\\n//Code For FastReader\\n//Code For FastReader\\nclass FastReader\\n{\\n    BufferedReader br;\\n    StringTokenizer st;\\n    public FastReader()\\n    {\\n        br=new BufferedReader(new InputStreamReader(System.in));\\n    }\\n\\n    String next()\\n    {\\n        while(st==null || !st.hasMoreElements())\\n        {\\n            try\\n            {\\n                st=new StringTokenizer(br.readLine());\\n            }\\n            catch(IOException e)\\n            {\\n                e.printStackTrace();\\n            }\\n        }\\n        return st.nextToken();\\n    }\\n\\n    int nextInt()\\n    {\\n        return Integer.parseInt(next());\\n    }\\n\\n    long nextLong()\\n    {\\n        return Long.parseLong(next());\\n    }\\n\\n    double nextDouble()\\n    {\\n        return Double.parseDouble(next());\\n    }\\n\\n    String nextLine()\\n    {\\n        String str=\"\";\\n        try\\n        {\\n            str=br.readLine();\\n        }\\n        catch (IOException e)\\n        {\\n            e.printStackTrace();\\n        }\\n        return str;\\n    }\\n\\n}", "target": "1", "substitutes": {"ans": [" dest", " subs", " buff", " name", " logger", "builder", " stub", " outs", "buf", "s", " sup", " ret", " buf", " Builder", " arg", "Str", " substr", " log", " dst", " std", "out", " outp", "str", " res", " fmt", " banner", " msg", " out"], "in": ["a", "din", "io", "err", "In", "bin", "n", "p", "s", "m", "r", "pass", "t", "this", "thin", "ini", "config", "ins", "rin", "conf", "input", "inner", "rec", "data", "win", "l", "c", "init", "x", "out", "or", "inc", "d", "con", "str", "path", "nin", "login", "f", "g", "reader", "i", "IN", "inn"], "N": ["O", "K", "I", "n", "Ns", "Len", "C", "Ni", "T", "J", "NT", "NN", "Q", "Size", "R", "D", "H", "Y", "NA", "Num", "Z", "B", "L", "NI", "M", "NC", "X", "S", "P", "F", "Node", "V", "NS", " n"], "A": ["a", "API", "Alpha", "K", "U", "I", "C", "T", "All", "Array", "LA", "AA", "R", "NA", "B", "Z", "M", "AR", "BA", "S", "P", "F", "V", " B", "CA"]}}
{"code": "\\nimport java.util.*;\\nclass Main{\\n public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n      int a = sc.nextInt();\\n      int b = sc.nextInt();\\n      int c = sc.nextInt();\\n      int d = sc.nextInt();\\n      int t = 0;\\n   for(int i = 0;i <= a;i++){\\n    for(int q = 0;q <= b;q++){\\n      for(int h = 0; h <= c; h++){\\n        if(d == i * 500 + q * 100 + h * 50){\\n        t++;\\n        }\\n      }  \\n     }\\n    }\\n   System.out.println(t);\\n } \\n}", "target": "127", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "search", "cer", "cor", "sr", "ctx", "cc", "ner", "sec", "tc", "soc", "exp", "acc", "sync", "osc", "cr", "sq", "lc", "cont", "coll", "ocr", "ck", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "se", "Sc", "asc", "sche", "cv", "str", " SC", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "parser", "parse", "SC"], "a": ["fa", "ga", "ca", "n", "au", "p", "oa", "ia", "ac", "alpha", "m", "ada", "A", "sa", "ea", "an", "ab", "ai", "ae", "ba", "pa", "da", "aj", "u", "area", "x", "am", "la", "va", "y", "api", "aa", "f", "as", "ad"], "b": ["w", "ca", "n", "bb", "p", "s", "nb", "lb", "j", "r", "z", "ab", "bc", "ba", "B", "l", "u", "e", "bs", "x", "y", "db", "v", "aa", "f", "o", "sb", "cb", "k"], "c": ["ch", "w", "cs", "ca", "n", "p", "C", "s", "cc", "ac", "cd", "r", "z", "ec", "cf", "ci", "l", "u", "e", "x", "y", "v", "dc", "cp", "nc", "f", "cu", "o", "cy", "g", "cb", "k"], "d": ["dd", "w", "n", "dy", "p", "s", "m", "pd", "j", "r", "z", "dt", "ds", "df", "D", "da", "l", "u", "e", "ad", "x", "dn", "dx", "id", "y", "db", "v", "dc", "f", "o", "g", "md", "k"], "t": ["test", "tta", "the", "w", "at", "n", "pt", "ot", "tr", "p", "T", "m", "nt", "j", "te", "z", "st", "dt", "tt", "unt", "total", "l", "u", "e", "type", "x", "out", "ts", "ta", "id", "ty", "rt", "tz", "y", "v", "ut", "tn", "ret", "tf", "f", "o", "g", "wt"], "i": ["I", "is", "io", "si", "ie", "di", "p", "m", "ii", "hi", "chi", "j", "ki", "z", "ini", "ai", "in", "li", "ci", "ik", "l", "qi", "u", "bi", "e", "init", "iu", "mi", "x", "id", "ip", "y", "v", "ix", "f", "ui", "o", "k"], "q": ["qs", "ch", "w", "cur", "n", "p", "qq", "query", "j", "r", "qa", "z", "sq", "dq", "Q", "qu", "l", "qi", "u", "quant", "e", "x", "ph", "id", "qt", "y", "v", "f", "sh", "gh", "k"], "h": ["uh", "th", "hs", "ch", "w", "err", "n", "p", "m", "hi", "j", "kh", "r", "z", "hm", "ah", "H", "ih", "l", "u", "he", "e", "it", "rh", "x", "pr", "head", "ph", "id", "oh", "eh", "bh", "y", "hl", "v", "hr", "ha", "hh", "f", "sh", "gh", "k"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n    \tScanner scanner = new Scanner(System.in);\\n      \\n      \tint five = 0;\\n      \tint seven = 0;\\n      \\n      \tfor(int i = 0; i < 3; i++) {\\n        \tint number = scanner.nextInt();\\n          \\n          \tif(number == 5) {\\n            \tfive = five + 1;\\n            } else if(number == 7) {\\n            \tseven = seven + 1;\\n            }\\n        }\\n         \\n      \tif(five == 2 && seven == 1) {\\n        \tSystem.out.println(\"YES\");\\n          \treturn;\\n        }\\n          \\n       \tSystem.out.println(\"NO\");  \t\\n\t}\\n}\\n \\n\\n \\n\\n", "target": "16", "substitutes": {"scanner": ["scaner", "Scanener", "anner", "Scankeeper", "ankeeper", " scankeeper", "canener", "scanter", "canner", "Scaner", "Scanner", "annener", "scankeeper", "caner", "anker", "annner", "scanker", "Scanker", "canter", " scanker", "Scanter", "annter", "scanener", "aner", " scaner"], "five": ["fif", "less", "quarter", "dollar", "numbered", "two", "jo", "letter", "starter", "power", "zero", "one", "length", "pie", "six", "family", "li", "office", "pe", "multiple", "league", "eight", "tto", "nine", "half", "three", "little", "fifth", "style", "knife", "ski", "slice", "billion", "seed", " fifty", "plus", " Five", "ten", "Five", "technology"], "seven": ["four", "dollar", "Seven", "female", "begin", "also", "phone", "maximum", "two", "that", "iron", "zero", "follow", "umber", "one", "document", "meet", "truth", "manager", "into", "multi", "each", "pe", "another", "even", "verse", "approximately", "many", "other", "eight", "you", "nine", "ward", "three", "square", "father", "fifth", "down", " seventh", "billion", "mill", "mother", "law", "ten", "hello", "ruby", "meg", "children"], "i": ["gi", "xi", "I", "io", "si", "n", "code", "di", "p", "oi", "ii", "part", "hi", "index", "j", "chi", "ni", "mu", "b", "ai", "in", "multi", "ji", "li", "ci", "ti", "l", "layer", "u", "bi", "c", "num", "it", "mi", "x", "pi", "id", "ip", "y", "f", "o", "ui", "info", "start"], "number": ["span", "token", "nr", "four", "parent", "numbered", "n", "string", "version", "non", "line", "phone", "two", "result", "part", "letter", "iron", "zero", "hen", "digit", "umber", "note", "work", "document", "b", "length", "count", "reference", "family", "li", "data", "total", "object", "size", "month", "layer", "position", "point", "num", "bi", "type", "eni", "nine", "x", "next", "function", "square", "block", "ski", "billion", "key", "Number", "gender"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int v[] = new int[n];\\n    int c[] = new int[n];\\n    int ans = 0;\\n    for(int i=0;i<n;i++){\\n      v[i] = sc.nextInt();\\n    }\\n    for(int j=0;j<n;j++){\\n      c[j] = sc.nextInt();\\n    }\\n    for(int k=0;k<n;k++){\\n      if(v[k] - c[k] >= 0){\\n        ans += v[k] - c[k];\\n      }\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "26", "substitutes": {"sc": ["pc", "esc", "rc", "ch", "cur", "cs", "ca", "cer", "screen", "ctx", "com", "cc", "ner", "na", "acc", "enc", "system", "cr", "osc", "sq", "ec", "lc", "coll", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "se", "src", "Sc", "asc", "out", "sche", "sem", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "sb", "SC", "spec"], "n": ["network", "kn", "w", "p", "s", "nb", "m", "nt", "ne", "nan", "ln", "t", "sync", "z", "an", "sn", "b", "N", "in", "nn", "no", "size", "ns", "l", "u", "en", "num", "e", "x", "dn", "d", "y", "len", "nc", "f", "o", "g", "net", "inn"], "v": ["vp", "w", "value", "p", "s", "ve", "vert", "m", "ii", "uv", "r", "t", "z", "sv", "var", "b", "vs", "ov", "av", "lv", "q", "l", "u", "e", "volt", "x", "h", "conv", "cv", "nv", "d", "y", "va", "V", "vi", "vol", "f", "vv", "o", "g"], "c": ["a", "pc", "rc", "ch", "w", "cs", "p", "C", "ac", "cc", "m", "cent", "t", "z", "b", "lc", "cf", "xc", "ci", "q", "l", "u", "e", "x", "h", "cat", "cv", "inc", "d", "y", "dc", "uc", "f", "cu", "o", "g"], "ans": ["a", "ks", "ants", "cs", "AN", "lan", "anan", "s", "annot", "vers", "amps", "offs", "na", "ents", "nan", "ANS", "os", "anas", "ki", "ana", "an", "sk", "ann", "ars", "ls", "aces", "olds", "ins", "ds", "lines", "atan", "cas", "nn", "artifacts", "san", "ns", "can", "x", "ats", "eps", "aus", "ids", "ions", "aned", "scan", "ons", "anc", "as", "asts", " scans", "errors", "nas", "ras", "rows"], "i": ["gi", "xi", "a", "I", "io", "si", "di", "ie", "p", "ii", "index", "r", "ki", "ni", "z", "ini", "b", "ai", "in", "phi", "ji", "li", "ci", "im", "ik", "ri", "qi", "u", "bi", "e", "init", "ori", "mi", "h", "pi", "id", "ip", "y", "ix", "key", "f", "ui", "o", "g"], "j": ["job", "ja", "jc", "ie", "J", "p", "m", "jo", "ii", "ij", "r", "t", "z", "js", "jj", "b", "jl", "ind", "ji", "end", "li", "obj", "q", "l", "aj", "u", "oj", "e", "it", "h", "x", "uj", "d", "je", "y", "key", "f", "o", "g", "jp"], "k": ["K", "kn", "kr", "ks", "w", "ak", "p", "uk", "kh", "ki", "z", "km", "sk", "ek", "b", "kt", "ck", "kk", "ke", "ku", "ky", "ik", "q", "l", "ijk", "u", "ka", "x", "dk", "kl", "kw", "id", "block", "d", "kid", "y", "kick", "key", "ko", "ack", "ok", "gh", "g", "spec"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int k = sc.nextInt();\\n    int x = sc.nextInt();\\n    int min = -1000000;\\n    int max = 1000000;\\n    int black[] = new int[2*k-1];\\n    for(int i=0;i<2*k-1;i++){\\n      black[i]=x-k+i+1;\\n    }\\n    for(int i=0;i<2*k-1;i++){\\n      if(black[i]>=min&&black[i]<=max){\\n        System.out.print(black[i]+\" \");\\n      }\\n    }    \\n  }\\n}", "target": "207", "substitutes": {"sc": ["esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "sr", "com", "ctx", "cc", "ner", "tc", "soc", "acc", "system", "osc", "cr", "sq", "ec", "lc", "ocr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "sb", "SC"], "k": ["K", "kn", "ks", "w", "n", "p", "mk", "unk", "s", "m", "j", "r", "t", "z", "km", "sk", "b", "in", "end", "ik", "q", "l", "u", "num", "c", "e", "h", "dk", "kw", "id", "block", "d", "y", "v", "kick", "key", "ok", "f", "o", "g"], "x": ["xi", "w", "n", "p", "m", "index", "j", "z", "b", "in", "rx", "_", "size", "q", "ax", "l", "u", "c", "e", "h", "X", "tx", "xx", "id", "d", "y", "v", "ix", "ex", "f", "o"], "min": ["a", "MIN", "minimum", "pos", "n", "name", "p", "s", "low", "m", "first", "index", "r", "mine", "mini", "in", "lower", "size", "small", "range", "Min", "init", "limit", "id", "val", "v", "f", "from", "mins", "start", "mid"], "max": ["height", "w", "n", "p", "MAX", "alpha", "index", "r", "default", "none", "Max", "show", "in", "end", "size", "total", "ax", "q", "range", "c", "last", "limit", "out", "id", "right", "scale", "d", "v", "rest", "f", "plus", "az", "view", "start", "mid"], "black": ["missing", "list", "grey", "ady", "bin", "blocks", "star", "bb", "rank", "color", "border", "alpha", "result", "feature", "cross", "burn", "zero", "hack", "skip", "white", "shared", "ck", "tan", "comment", "stroke", "ban", "rock", "match", "data", "gray", "pack", "stack", "above", "bug", "dash", "num", "blank", "blue", "clear", "id", "square", "block", "grid", "trace", "disable", "dark", "check", "slice", "kick", "back", "seed", "buffer", "Black", "scan", "ack", "shape", "red", "flash", "array", "info", "ans", "colour", "shadow", "mask", "pad"], "i": ["gi", "xi", "a", "I", "ei", "is", "io", "si", "ie", "di", "p", "oi", "s", "cli", "m", "abi", "ii", "hi", "index", "r", "j", "iii", "ki", "uli", "z", "ini", "isi", "b", "lc", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "c", "ri", "e", "iu", "it", "eni", "mi", "pi", "yi", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "isin", "f", "ui", "o", "info"]}}
{"code": "import java.util.*;\\nimport java.lang.Math;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        long n = s.nextLong();\\n        long l = 1;\\n        for (int i= 1; i <= Math.sqrt(n); i ++) {\\n            if (n % i == 0)\\n                l=i;\\n        }\\n        System.out.println(l + (n / l) - 2);\\n    }\\n}", "target": "157", "substitutes": {"s": ["fs", "is", "ms", "si", "sf", "p", "er", "m", "gs", "os", "r", "http", "south", "sl", "b", "ls", "ds", "ins", "in", "ws", "ss", "stats", "ns", "sys", "se", "u", "c", "ses", "e", "opens", "out", "h", "xs", "S", "ssl", "ps", "v", "f", "services", "sb"], "n": ["nu", "a", "number", "w", "p", "nb", "m", "nt", "cn", "ne", "r", "j", "ln", "t", "ni", "z", "sn", "b", "N", "length", "count", "li", "nn", "size", "ns", "el", "u", "num", "c", "fn", "e", "en", "x", "h", "dn", "d", "ll", "y", "v", "len", "nc", "f", "nl", "o", "net", "k"], "l": ["wl", "p", "lb", "m", "pl", "j", "ul", "ln", "le", "t", "z", "sl", "b", "lc", "ls", "length", "li", "el", "rl", "L", "u", "lp", "fl", "lt", "x", "h", "limit", "kl", "lr", "lin", "left", "dl", "ll", "d", "y", "v", "ell", "ol", "len", "f", "nl", "o", "lu", "al"], "i": ["a", "gi", "xi", "I", "clip", "io", "si", "di", "p", "oi", "m", "abi", "ii", "hi", "chi", "j", "r", "index", "t", "z", "ini", "mu", "b", "ai", "in", "length", "phi", "multi", "li", "ci", "ti", "zi", "ri", "u", "bi", "c", "qi", "e", "it", "x", "pi", "h", "fi", "id", "ip", "d", "field", "y", "v", "ix", "slice", "f", "o", "ui", "info"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint length = scanner.nextInt(), minimum = 0, maximum = 0;\\n\t\tlong total = 0;\\n\\n\t\tfor (int i = 0; i < length; i++) {\\n\t\t\tint number = scanner.nextInt();\\n\\n\t\t\tif (i == 0) {\\n\t\t\t\tminimum = number;\\n\t\t\t\tmaximum = number;\\n\t\t\t}\\n\\n\t\t\ttotal += number;\\n\\n\t\t\tif (number < minimum)\\n\t\t\t\tminimum = number;\\n\t\t\tif (number > maximum)\\n\t\t\t\tmaximum = number;\\n\t\t}\\n\\n\t\tSystem.out.println(minimum + \" \" + maximum + \" \" + total);\\n\t}\\n}", "target": "21", "substitutes": {"scanner": ["scaner", "Scanener", " scaninner", "anner", "Scanher", "scannder", "annder", "canener", "scanter", "canner", "Scaner", "Scanner", "annener", "caninner", "Scannder", "scanher", "canher", "caner", "anker", "annner", " scanher", "scanker", "Scanker", "canter", " scanker", "Scanter", "annter", "scanener", "aner", "scaninner", " scaner", "Scaninner", " scannder"], "length": ["collection", "value", "base", "angle", "line", "section", "Length", "frequency", "width", "part", "filename", "count", "url", "level", "size", "range", "full", "lock", "l", "position", "type", "pi", "limit", "ph", "id", "depth", "tail", "style", "distance", "path", "slice", "len", "shape", "duration", "sequence"], "minimum": ["per", "method", "initial", "begin", "address", "dimension", "variable", "termination", "unit", "diff", "average", "frequency", "width", "first", "largest", "zero", "filename", "location", "material", "none", "resource", "minute", "when", "starting", "operation", "only", "manager", "Minimum", "lower", "url", "negative", "small", "multiple", "min", "amount", "common", "layer", "position", "approximately", "nil", "left", "required", "within", "message", "current", "username", "duration", "until", "summary", "sufficient", "second", "description", "period", "information"], "maximum": ["expression", "positive", "higher", "initial", "begin", "variable", "which", "termination", "volume", "average", "Maximum", "may", "width", "perfect", "largest", "filename", "memory", "cover", "medium", "document", "max", "operation", "prefix", "large", "size", "multiple", "great", "amount", "highest", "position", "approximately", "forward", "limit", "master", "increasing", "latest", "within", "message", "required", "current", "actual", "until", "summary", "period", "information", "sequence"], "total": ["token", "random", "cost", "gross", "tax", "value", "base", "alpha", "average", "result", "media", "part", "otal", "index", "valid", "product", "null", "resource", "document", "eta", "partial", "max", "translation", "count", "prefix", "multi", "size", "data", "full", "position", "Total", "complete", "type", "sequence", "last", "master", "major", "sum", "scale", "current", "duration", "summary", "start"], "i": ["xi", "span", "I", "direction", "si", "n", "di", "p", "oi", "volume", "ii", "part", "index", "j", "chi", "ni", "mini", "mu", "b", "ai", "in", "count", "phi", "multi", "ji", "li", "ti", "iter", "layer", "position", "u", "num", "bi", "qi", "e", "c", "eni", "x", "pi", "h", "limit", "id", "ip", "uri", "v", "key", "f", "ui", "o", "info", "start", "k"], "number": ["expression", "span", "token", "nr", "parent", "address", "numbered", "value", "n", "string", "version", "name", "factor", "unit", "step", "word", "phone", "nb", "two", "result", "batch", "part", "letter", "index", "zero", "digit", "umber", "resource", "one", "note", "none", "document", "b", "work", "count", "port", "prefix", "reference", "non", "nn", "size", "page", "object", "amount", "no", "month", "layer", "position", "point", "num", "date", "forward", "type", "x", "source", "function", "block", "message", "beta", "current", "key", "duration", "Number", "integer", "start"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int d = s.nextInt();\\n        // int  a = d % 10;\\n\\n        // if(a == 3) {\\n        //     System.out.println(\"bon\");\\n        // } else if( a== 0 || a == 1 || a == 6 || a == 8) {\\n        //     System.out.println(\"pon\");\\n        // } else {\\n        //     System.out.println(\"hon\");\\n        // }\\n        String str = s.next();\\n        char c[] = str.toCharArray();\\n        if(c.length>d) {\\n            StringBuilder sb = new StringBuilder();\\n            for (int i = 0; i < d; i++) {\\n                sb.append(c[i]);\\n            }\\n            sb.append(\"...\");\\n            System.out.println(sb.toString());\\n        } else {\\n            System.out.println(str);\\n        }\\n    }\\n}", "target": "248", "substitutes": {"s": ["fs", "is", "settings", "w", "ms", "si", "n", "parser", "sf", "rs", "ops", "p", "ings", "os", "r", "sets", "sync", "js", "abs", "b", "tests", "ls", "ds", "ins", "in", "ss", "ws", "stats", "ns", "l", "se", "c", "ses", "h", "bis", "states", "S", "ssl", "ps", "events", "v", "es", "f", "services", "as", "features", "sb", "ans", "i"], "d": ["dd", " D", "pid", "name", "m", "cd", "pd", "debug", "Id", "ds", "dm", "ded", "D", " dd", " od", " f", "did", "ard", "id", "mod", "dc", "dir", "f", "fd", "md"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner stdIn = new Scanner(System.in);\\n        int n = stdIn.nextInt();\\n        int[] a = new int[n];\\n        int[] b = new int[n];\\n        int[] c = new int[n-1];\\n        for(int i = 0;i<n;i++) {\\n            a[i] = stdIn.nextInt();\\n        }\\n\\n        for(int i = 0;i<n;i++) {\\n            b[i] = stdIn.nextInt();\\n        }\\n\\n        for(int i = 0;i<n-1;i++) {\\n            c[i] = stdIn.nextInt();\\n        }\\n\\n        int count = 0;\\n\\n        for(int i = 0;i<b.length;i++) {\\n            count += b[i];\\n        }\\n        //System.out.println(count);\\n\\n        for(int i = 0;i<b.length-1;i++) {\\n            if(a[i]!=n && a[i]+1 == a[i+1]) {\\n                count += c[a[i]-1];\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}", "target": "223", "substitutes": {"stdIn": ["STDInit", "adOut", "gradOut", "stdOut", "adin", "sysin", "stdIns", "STDIns", "standardin", "gradIns", "StandardOut", "StandardIns", "adIn", "standardIN", "gradIn", "stdInit", " stdIN", "stdIN", "STDOut", "directin", "adIns", "stdin", "StandardInit", "STDIn", " stdIns", " stdInit", "directInit", "directIn", "gradin", "gradIN", "sysIN", "standardIn", "sysIn", " stdin", "gradInit", " stdOut", "standardOut", "StandardIn", "directIN"], "n": ["network", "span", "number", "nr", "w", "p", "s", "nb", "m", "nt", "cn", "na", "ne", "j", "r", "nan", "ln", "t", "ni", "z", "an", "sn", "N", "in", "size", "no", "nn", "ns", "not", "l", "u", "en", "num", "e", "x", "dn", "d", "un", "y", "v", "len", "f", "o", "g", "net", "k", "inn"], "a": ["fa", "ca", "p", "aaa", "s", "ac", "alpha", "ada", "A", "sa", "ea", "an", "ab", "ai", "in", "ae", "ba", "pa", "da", "l", "aj", "u", "af", "area", "x", "am", "asa", "y", "va", "aa", "f", "as", "o", "array", "ama", "ans", "ad"], "b": ["number", "bas", "ch", "xb", "br", "w", "bin", "base", "bb", "gb", "p", "string", "lb", "nb", "bd", "m", "eb", "r", "abb", "wb", "ab", "pb", "bar", "build", "ba", "ob", "boot", "B", "l", "u", "mb", "fb", "binary", "e", "bs", "x", "bis", "h", "obb", "rb", "body", "d", "y", "db", "bf", "f", "abc", "o", "auto", "sb", "be", "array", "cb"], "c": ["ca", "p", "C", "ac", "cc", "m", "r", "t", "z", "cin", "cr", "cf", "ci", "q", "l", "u", "e", "ce", "h", "x", "cat", "d", "y", "v", "f", "o", "cy", "g", "cb", "k"], "i": ["xi", "gi", "I", "ei", "is", "io", "si", "di", "ie", "p", "oi", "cli", "abi", "ii", "hi", "iii", "r", "j", "t", "ni", "z", "ini", "mu", "ai", "in", "phi", "multi", "ji", "li", "ti", "ci", "ik", "zi", "l", "qi", "u", "bi", "ri", "e", "init", "iu", "it", "eni", "mi", "x", "pi", "yi", "fi", "ori", "id", "ip", "uri", "d", "y", "v", "ix", "api", "f", "ui", "o", "g", "info"], "count": ["number", "list", "parent", "weight", "code", "base", "group", "balance", "cc", "batch", "part", "index", "counter", "empty", "max", "length", "level", "error", "size", "total", "cache", "child", "carry", "num", "type", "limit", "process", "cat", "sum", "id", "depth", "age", "path", "offset", "Count", "len", "call", "start", "check"]}}
{"code": "\\nimport java.util.*;\\n\\n/**\\n * Main\\n */\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u6574\u6570\u306e\u5165\u529b\\n\t\tint N = sc.nextInt();\\n\t\tint V[] = new int[N];\\n\t\tint C[] = new int[N];\\n\t\tint mouke[] = new int[N];\\n\t\tint ans = 0;\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tV[i] = sc.nextInt();\\n\t\t}\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tC[i] = sc.nextInt();\\n\t\t\tans += Math.max(V[i] - C[i], 0);\\n\t\t}\\n\\n\t\tSystem.out.println(ans);\\n\\n\t\tsc.close();\\n\t}\\n};", "target": "26", "substitutes": {"sc": [" pars", " src", " sp", " sm", "sq", "ann", " ser", " scr", "ss", " arr", "se", " app", "Sc", " surf", " ar", " scanner", " SC", " res", " ans", "scan", " scorer", " Sc", " sl", "sb", " rc", "parser", "SC"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine();\\n        char[] line1 = line.toCharArray();\\n        if(line1[0] == line1[1]){\\n            if(line1[2] != line1[1]){\\n                if(line1[2] == line1[3])\\n                System.out.println(\"Yes\");\\n                else\\n                System.out.println(\"No\");\\n            }\\n            else\\n            System.out.println(\"No\");\\n        }\\n        else if(line1[0] == line1[2]){\\n            if(line1[0] != line1[1]){\\n                if(line1[1] == line1[3])\\n                System.out.println(\"Yes\");\\n                else\\n                System.out.println(\"No\");\\n            }\\n            else\\n            System.out.println(\"No\");\\n        }\\n        else if(line1[0] == line1[3]){\\n            if(line1[0] != line1[1]){\\n                if(line1[1] == line1[2])\\n                System.out.println(\"Yes\");\\n                else\\n                System.out.println(\"No\");\\n            }\\n            else\\n            System.out.println(\"No\");\\n        }\\n        else if(line1[1] == line1[2]){\\n            if(line1[0] != line1[1]){\\n                if(line1[0] == line1[3])\\n                System.out.println(\"Yes\");\\n                else\\n                System.out.println(\"No\");\\n            }\\n            else\\n            System.out.println(\"No\");\\n        }\\n        else if(line1[1] == line1[3]){\\n            if(line1[0] != line1[1]){\\n                if(line1[0] == line1[2])\\n                System.out.println(\"Yes\");\\n                else\\n                System.out.println(\"No\");\\n            }\\n            else\\n            System.out.println(\"No\");\\n        }\\n        else if(line1[2] == line1[3]){\\n            if(line1[1] != line1[2]){\\n                if(line1[0] == line1[1])\\n                System.out.println(\"Yes\");\\n                else\\n                System.out.println(\"No\");\\n            }\\n            else\\n            System.out.println(\"No\");\\n        }\\n        else\\n        System.out.println(\"No\");\\n    }\\n}", "target": "33", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "cc", "ner", "nt", "sec", "acc", "r", "sync", "system", "cr", "osc", "ec", "lc", " scr", "bc", "sci", "cl", "scope", "se", "l", "c", "stream", "Sc", "asc", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "SC", "spec"], "line": ["Line", "file", "inline", "cell", "LINE", "string", "code", "word", "name", "p", "unit", "header", "result", "log", "letter", "sl", "frame", "lc", "entry", "in", "comment", "lines", "data", "row", "object", "page", "l", "out", "text", "lin", "source", "block", "str", "message", "lf", "buffer", "shell", "f", "nl", "sp", "info", "reader"], "line1": ["cellone", "source1", "codeone", " line4", "sourceone", "lineName", "Line71", "ine001", "line0", "file0", "lin9", "line100", "link16", "link3", "lin18", "ine51", "lined01", " line51", "ineX", "caseone", "LineOne", "fileU", "inlineup", "cell41", "Line17", "inline11", "_", " lineone", "linX", " lineOne", "Line81", "ineone", "ge0", "lines1", "line91", "geU", " line100", " line2", "case81", " line17", "None", " line8", "str", "look1", "lineX", "lineup", "link4", "blockone", "lined41", " line0", "laneone", " line9", "line71", "link91", " line31", "linOne", "linesone", "sche1", "site01", "lin0", " line6", "Line6", "lined1", "ge1", "inline31", "lane18", "line16", "code01", "inline17", "ine80", "LINE18", "lane71", "code18", "linone", "siteup", "lineone", "inline1", "lin51", " line18", "code61", "LINE01", "lin3", "lane0", "ine1", "site61", "sche91", "sche4", "wordName", "link2", "code1", "inline100", "LINE1", "line41", "linFirst", "line3", "ine2", " line61", "line80", "sourceOne", "wordOne", "ineOne", "LINE41", "lookone", "ine16", "ine18", "Line001", "group1", "Line18", "link11", "lin100", "lane2", "ineU", "code100", "line6", "lin1", "lin01", "ine91", "s", "LINE2", "ine6", " line91", "link8", "wordone", "line2", "line61", "this", "ine11", "code81", " lineFirst", " lineX", "groupone", "Lineone", " line11", "LineName", " lineName", "cell1", "line31", "lin2", "ine61", "inline81", "inlineone", "line17", "ine01", "look01", "ine4", "case1", "lane91", "inline91", "Line0", "group80", "link1", "file91", "block1", "case2", "lane81", " line3", "link100", "line81", " line81", "word1", "laneOne", "lined18", "lines31", " line41", "line4", "blockOne", "ine0", "line001", " lineOnce", "line18", "inlineOne", "site1", "line9", "lineOnce", "lin61", "linkone", "inline4", "inline61", "Line100", "code71", "lin81", "lin91", "link18", "code41", " line01", "line01", " lineup", "lineU", "inline01", "line8", "Line1", "Line2", "laneFirst", "lin31", "LINE91", "inlineOnce", "inline8", "Line80", "look31", "block81", "line11", "lineFirst", "ge91", "link61", "inline2", "group001", " line16", "file1", "Line9", "ine17", "lane1", "scheOnce", "cell01", "line51", "lineOne", "link01", "link81", "ine41", "lines2", "link31"]}}
{"code": "import java.math.BigInteger;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.Comparator;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Map.Entry;\\nimport java.util.PriorityQueue;\\nimport java.util.Scanner;\\n\\nclass Main {\\n    static final int MOD = 1000000007;\\n    static final int INF = 1 << 30;\\n    static final int ALF = 26;\\n\\n    Main() {\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        System.out.println(1+2+3-A-B);\\n    }\\n\\n    public static void main(String[] args) {\\n        new Main();\\n    }\\n}\\n", "target": "236", "substitutes": {"MOD": ["MODE", "MIN", " M", " MAX", "DIR", "OR", "LIB", "OD", "AMD", "Mods", " Mod", "ION", "MAG", " ARM", "ARM", "MS", "Module", " mod", "Mod", "AD", "mod", "MD", "LOD", " MA", "Mode", "COR", "RM", "MA"], "INF": ["INEF", " INEF", "inEF", " INPF", "InEF", "inPF", " INf", "Inf", "INPF", "InPF", "InF", "inF", "inf", "INf"], "ALF": ["WARM", "ILF", "WARf", "ALI", " ALf", "WARI", " ALI", " ALM", "ILI", "ALM", "WARF", "ALf", "ILM", "ILf"], "sc": ["pc", "esc", "rc", "cur", "desc", "cs", "ser", "ca", "si", "cer", "cor", "search", "sr", "com", "s", "cc", "ner", "sec", "acc", "sync", "system", "osc", "sq", "cr", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "sem", "cv", " SC", "sch", "console", "scan", "nc", " Sc", "uc", "sp", "SC", "spec"], "A": ["a", "O", "K", "U", "E", "I", "AF", "C", "T", "Array", "G", "AA", "LA", "W", "N", "RA", "D", "H", "Y", "L", "M", "X", "AD", "AR", "BA", "S", "P", "F", "V", "CA"], "B": ["O", "U", "E", "I", "BS", "Bi", "J", "C", "T", "NB", "G", "b", "N", "W", "Q", "R", "D", "UB", "Y", "L", "M", "X", "LB", "Bs", "BA", "P", "F", "V", "BB", "BI", "WB"]}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n\t  Scanner sc = new Scanner(System.in);\\n\t  \\n\t  int N = sc.nextInt();\\n\t  int[] A = new int[N+1];\\n\t  int[] B = new int[N];\\n\t  long count = 0;  \\n\t  for(int i=0; i<N+1; i++) {\\n\t\t  A[i] = sc.nextInt();\\n\t  }\\n\t  for(int i=0; i<N; i++) {\\n\t\t  B[i] = sc.nextInt();\\n\t  }\\n\t  \\n\t  for(int i=0; i<N; i++) {\\n\t\t  int n = Math.min(A[i], B[i]);\\n\t\t  count += n;\\n\t\t  B[i] -= n;\\n\t\t  A[i] -= n;\\n\t\t  int m = Math.min(A[i+1], B[i]);\\n\t\t  count += m;\\n\t\t  A[i+1] -= m;\\n\t  }\\n\t  out.println(count);  \\n\t  \\n  }\\n}", "target": "159", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "cor", "screen", "sr", "com", "ctx", "s", "cc", "ner", "sec", "loc", "sync", "system", "cr", "osc", "sq", "sv", "lc", "cont", "bc", "sci", "ss", "ci", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "sem", "gc", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "parser", "parse", "SC"], "N": ["O", "network", "K", "Part", "E", "I", "II", "Na", "Ns", "ND", "Len", "C", "T", "Ni", "J", "NT", "Ne", "NB", "G", "Max", "W", "NN", "Size", "R", "H", "D", "Y", "DC", "NA", "Z", "Num", "L", "Network", "NM", "M", "X", "NE", "S", "F", "P", "Node", "V", "CNN", "NS", "Count", "Nat", "KN", "Power"], "A": ["a", "API", "Alpha", "AST", "U", "I", "Action", "Ant", "AC", "As", "Ab", "AU", "AB", "Ca", "C", "GA", "AM", "Array", "Auth", "AMI", "LA", "AA", "AI", "Adam", "IA", "D", "AW", "Y", "Ha", "NA", "Num", "Act", "Average", "Ma", "MA", "M", "Java", "mA", "Az", "X", "AD", "Area", "Ar", "AR", "The", "Address", "Input", "S", "P", "F", "App", "Art", "AH", "AP", "Am", "At", "Ac", "CA"], "B": ["O", "API", "Library", "Bar", "Part", "BS", "I", "Block", "But", "Ab", "VB", "Bi", "AB", "BF", "BE", "BD", "BR", "NB", "SB", "TB", "Base", "Other", "MB", "FB", "PB", "b", "QB", "Both", "BC", "GB", "Big", "UB", "CB", "Y", "RB", "Beta", "DB", "L", "Rest", "M", "Builder", "Sub", "Bs", "BA", "OB", "P", "EB", "BB", "File", "Band", "AP", "BL", "BI", "WB", "BP", "BM"], "count": ["a", "test", "list", "number", "weight", "err", "address", "code", "diff", "nt", "log", "part", "cast", "index", "counter", "max", "length", "more", "now", "error", "size", "cache", "all", "total", "state", "data", "carry", "num", "c", "throw", "type", "last", "process", "sum", "cat", "id", "depth", "allow", "age", "check", "Count", "len", "current", "label", "key", "f", "time", "array", "info", "found", "call", "start"], "i": ["a", "gi", "xi", "adi", "I", "ei", "is", "io", "si", "ie", "di", "ami", "p", "oi", "cli", "abi", "ii", "hi", "chi", "r", "j", "index", "ki", "ni", "mini", "ini", "mu", "isi", "b", "ai", "phi", "ji", "multi", "li", "ci", "ti", "l", "qi", "u", "bi", "c", "ri", "e", "ori", "iu", "it", "eni", "mi", "pi", "x", "h", "fi", "init", "yi", "source", "my", "id", "ip", "uri", "y", "v", "ix", "api", "slice", "anti", "f", "ui", "o", "info"], "n": ["a", "network", "p", "s", "cn", "nt", "na", "nan", "r", "ne", "ln", "j", "mn", "ni", "z", "none", "an", "one", "ann", "b", "sn", "nn", "no", "min", "ns", "l", "u", "num", "c", "en", "e", "conn", "x", "dn", "d", "un", "y", "ng", "v", "nin", "nc", "o", "net", "k"], "m": ["a", "pm", "ms", "p", "fm", "bm", "j", "r", "mn", "gm", "z", "mini", "mu", "b", "mon", "dm", "mr", "cm", "l", "u", "c", "e", "M", "mi", "h", "am", "sm", "d", "y", "v", "mc", "om", "mad", "o", "md", "mm", "k"]}}
{"code": "import java.util.*;\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\n\\n/*\\n* Problem : 151A\\n* Acknowledgement : None\\n* Author : Deathnaught_\\n* Github : www.github.com/DeathNaughT-GitHub\\n* Complexity : O(1)\\n*/\\n\\npublic class Main\\n{\\n    static class FastReader \\n    { \\n\\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() \\n        { \\n            br = new BufferedReader(new InputStreamReader(System.in)); \\n        } \\n  \\n        String next() \\n        { \\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n\\n        char nextChar()\\n        {\\n            return next().charAt(0);\\n        }\\n  \\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n\\n        int[] nextArray(int rows)\\n        {\\n            int arr[] = new int[rows];            \\n            for (int i = 0; i < rows; i++)\\n            arr[i] = nextInt();\\n            return arr;\\n        }\\n\\n        long[] nextLongArray(int rows)\\n        {\\n            long arr[] = new long[rows];            \\n            for (int i = 0; i < rows; i++)\\n            arr[i] = nextLong();\\n            return arr;\\n        }\\n\\n        char[] nextCharArray(int rows)\\n        {\\n            char arr[] = new char[rows];\\n            for (int i = 0; i < rows; i++)\\n            arr[i] = next().charAt(0);\\n            return arr;\\n        }\\n\\n        int[][] nextMatrix(int rows, int columns)\\n        {\\n            int mat[][] = new int[rows][columns];\\n            for (int i = 0; i < rows; i++)\\n            {\\n                for (int j = 0; j < columns; j++)\\n                {\\n                    mat[i][j] = nextInt();\\n                }\\n            }\\n            return mat;\\n        }\\n\\n        char[][] nextCharMatrix(int rows, int columns)\\n        {\\n            char mat[][] = new char[rows][columns];\\n            for (int i = 0; i < rows; i++)\\n            {\\n                for (int j = 0; j < columns; j++)\\n                {\\n                    mat[i][j] = nextChar();\\n                }\\n            }\\n            return mat;\\n        }\\n    } \\n\\n    public static void main(String[] args) \\n    {\\n        \\n        FastReader sc = new FastReader();\\n     \tchar C = sc.nextChar();\\n      \tSystem.out.println((char)(C + 1));\\n    }\\n}", "target": "150", "substitutes": {"br": ["kr", "ctr", "ch", "cur", "err", "Br", "img", "brush", "bb", "tr", "sr", "buf", "vr", "bd", "BR", "pl", "r", "browser", "ab", "b", "dr", "bar", "gr", "bc", "obj", "mr", "fr", "B", "src", "bs", "ber", "bridge", "bt", "pr", "bro", "rib", "lr", "ler", "rt", "bh", "db", "rest", "hr", "sp", "sb", "be", "reader", "orb", "ur", "bl", "rb"], "st": ["sw", "sta", "string", "pt", "step", "stop", "struct", "store", "ste", "sts", "ft", "s", "sr", "nt", "strip", "sth", "r", "inst", "sa", "est", "t", "stri", "cr", "sl", "sn", "ost", "ld", "fe", "std", "tt", "ss", "stable", "Str", "pe", "sign", "stack", "fr", "nd", "l", "ast", "ist", "src", "mt", "bt", "pr", "STR", "ct", "rt", "ust", "rest", "ut", "const", "sp", "ST", "sb", "stage", "start", "bl", "St"], "str": ["list", "pos", "err", "char", "n", "string", "code", "tr", "struct", "line", "sr", "result", "exp", "r", "pass", "t", "z", "sl", "cr", "dr", "bar", "doc", "url", "inner", "dict", "obj", "Str", "data", "fr", "e", "text", "pr", "id", "body", "style", "hr", "div", "f", "sp", "STR", "bl"], "rows": ["hs", "qs", "results", "maps", "ks", "files", "orders", "locks", "OWS", "ries", "obs", "blocks", "rs", "flows", "cells", "acks", "days", "relations", "s", "loads", "classes", "breaks", "heads", "tracks", "boxes", "versions", "ports", "ips", "tests", "rics", "values", "length", "ins", "lines", "cases", "fields", "ws", "checks", "keys", "ensions", "row", "holes", "ends", "docs", "groups", "ches", "ows", "many", "items", "rices", "views", "xs", "types", "faces", "reads", "posts", "planes", "eps", "events", "roots", "members", "pages", "dates", "features", "users", "times", "frames", "errors", "runs", "models"], "arr": ["list", "res", "ap", "arch", " array", "plot", "err", "ar", "img", "arg", "bb", "tr", "result", "batch", "attr", "Array", "acc", "enc", "pl", "r", "app", "ml", "var", "ann", "ars", "gr", "dr", "bar", "coll", "par", "ray", "av", "dict", "obj", "map", "cache", "iter", "all", "fr", "arc", "el", "frac", "aj", "arp", "rep", "rr", "att", "pr", "align", "arm", "Ar", "cat", "air", "db", "hr", "aa", "div", "far", "dat", "ang", "array", "au", "parse", "bl"], "i": ["xi", "gi", "I", "is", "io", "si", "n", "ie", "di", "iv", "p", "oi", "cli", "ii", "hi", "ij", "r", "ni", "z", "uli", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "im", "ik", "q", "zi", "l", "ri", "u", "bi", "c", "qi", "e", "ori", "iu", "init", "my", "mi", "pi", "x", "h", "fi", "it", "eni", "yi", "id", "ip", "uri", "d", "y", "v", "ix", "api", "f", "ui", "o", "g", "info", "k"], "columns": ["cold", "coles", "columnd", "contines", "columnviews", "cols", " cold", "Columnes", "Columnps", "Columns", "subjects", "colns", "continviews", "characters", "contins", "subjectes", "colviews", " coles", "methodd", "methodns", "continations", "methods", " cols", "colps", "columnations", "methodes", "colations", "columnes", "columnps", "columnns", " colps", "subjectations", "characterd", "subjectviews", "characterns", "characteres", "Columnd"], "mat": ["tab", "flat", "list", "table", "plot", "cal", "pos", "nat", "at", "feat", "mult", "struct", "unit", "vert", "man", "loc", "ma", "config", "par", "pat", "graph", "mon", "match", "map", "mot", "num", "Matrix", "vec", "cat", "lat", " matrix", "grid", "sum", "format", "mas", "ut", "stat", "dim", "math", "Mat", "seq", "mol"], "j": ["a", "bj", "ja", "n", "jc", "pt", "dj", "J", "p", "m", " ii", "ii", "jo", "ij", "index", "r", "t", "jet", "z", "js", "jj", "b", "jl", "ind", "ji", "end", "li", "fr", "q", "el", "l", "aj", "u", "e", "it", "h", "x", "pr", "uj", "d", "y", "v", "off", "key", "f", "o", "g", "k", "jp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n    \t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u6574\u6570\u306e\u5165\u529b\\n\t\tint N = sc.nextInt();\\n\t\t\\n\t\tint intArray[] = new int[N];\\n\\n\t\tfor(int i = 0 ;i < N;i++){\\n\t\t\tintArray[i] = sc.nextInt();\\n\t\t}\\n\\n\t\tint cnt = 0;\\n\t\tfor(int i = 0 ;i < N-2;i++){\\n\t\t\tif(intArray[i]<intArray[i+1]) {\\n\t\t\t\tif(intArray[i+1]<intArray[i+2]) {\\n\t\t\t\t\tcnt ++;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t}else {\\n\t\t\t\tif(intArray[i]>intArray[i+1]) {\\n\t\t\t\t\tif(intArray[i+1]>intArray[i+2]) {\\n\t\t\t\t\t\tcnt ++;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(cnt);\\n\\n   \t\tsc.close();\\n        return ;\\n\\n    }\\n    \\n}\\n\\n", "target": "96", "substitutes": {"sc": [" pars", " src", "rc", " sp", "cr", " sw", " ser", " scr", "bc", "ss", " arr", "se", "c", " app", "Sc", " cat", " scanner", " inst", " SC", " ans", "scan", "nc", " Sc", " cont", "sb", " rc", "SC", "gram"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n  private static int solve(int n, int[] as) {\\n    boolean[] visited = new boolean[n];\\n    int index = 0;\\n    int count = 0;\\n    while (true) {\\n      visited[index] = true;\\n      count++;\\n      index = as[index] - 1;\\n      if (visited[index]) {\\n        return -1;\\n      }\\n      if (index == 1) {\\n        return count;\\n      }\\n    }\\n  }\\n  \\n  private static void execute(ContestReader reader, PrintWriter out) {\\n    int n = reader.nextInt();\\n    int[] as = reader.nextInt(n);\\n    out.println(solve(n, as));\\n  }\\n  \\n  public static void main(String[] args) {\\n    ContestReader reader = new ContestReader(System.in);\\n    PrintWriter out = new PrintWriter(System.out);\\n    execute(reader, out);\\n    out.flush();\\n  }\\n}\\n\\nclass ContestReader {\\n  private BufferedReader reader;\\n  private StringTokenizer tokenizer;\\n  \\n  ContestReader(InputStream in) {\\n    reader = new BufferedReader(new InputStreamReader(in));\\n  }\\n  \\n  public String next() {\\n    while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n      try {\\n        tokenizer = new java.util.StringTokenizer(reader.readLine());\\n      } catch (Exception e) {\\n        throw new RuntimeException(e);\\n      }\\n    }\\n    return tokenizer.nextToken();\\n  }\\n  \\n  public int nextInt() {\\n    return Integer.parseInt(next());\\n  }\\n  \\n  public long nextLong() {\\n    return Long.parseLong(next());\\n  }\\n  \\n  public double nextDouble() {\\n    return Double.parseDouble(next());\\n  }\\n  \\n  public String[] next(int n) {\\n    String[] array = new String[n];\\n    for (int i = 0; i < n; i++) {\\n      array[i] = next();\\n    }\\n    return array;\\n  }\\n  \\n  public int[] nextInt(int n) {\\n    int[] array = new int[n];\\n    for (int i = 0; i < n; i++) {\\n      array[i] = nextInt();\\n    }\\n    return array;\\n  }\\n  \\n  public long[] nextLong(int n) {\\n    long[] array = new long[n];\\n    for (int i = 0; i < n; i++) {\\n      array[i] = nextLong();\\n    }\\n    return array;\\n  }\\n  \\n  public double[] nextDouble(int n) {\\n    double[] array = new double[n];\\n    for (int i = 0; i < n; i++) {\\n      array[i] = nextDouble();\\n    }\\n    return array;\\n  }\\n  \\n  public char[] nextCharArray() {\\n    return next().toCharArray();\\n  }\\n  \\n  public int[][] nextInt(int n, int m) {\\n    int[][] matrix = new int[n][m];\\n    for (int i = 0; i < n; i++) {\\n      for (int j = 0; j < m; j++) {\\n        matrix[i][j] = nextInt();\\n      }\\n    }\\n    return matrix;\\n  }\\n  \\n  public long[][] nextLong(int n, int m) {\\n    long[][] matrix = new long[n][m];\\n    for (int i = 0; i < n; i++) {\\n      for (int j = 0; j < m; j++) {\\n        matrix[i][j] = nextLong();\\n      }\\n    }\\n    return matrix;\\n  }\\n  \\n  public double[][] nextDouble(int n, int m) {\\n    double[][] matrix = new double[n][m];\\n    for (int i = 0; i < n; i++) {\\n      for (int j = 0; j < m; j++) {\\n        matrix[i][j] = nextDouble();\\n      }\\n    }\\n    return matrix;\\n  }\\n  \\n  public char[][] nextCharArray(int n) {\\n    char[][] matrix = new char[n][];\\n    for (int i = 0; i < n; i++) {\\n      matrix[i] = next().toCharArray();\\n    }\\n    return matrix;\\n  }\\n}\\n", "target": "175", "substitutes": {"n": ["network", "span", "get", "nb", "nos", "cn", "b", "_", "min", "id", "left", "ng", "nc", "g", "pos", "Ns", "name", "p", "on", "ne", "sn", "config", "rn", "not", "u", "en", "conn", "o", "inn", "number", "nat", "s", "nor", "na", "this", "size", "all", "ns", "l", "num", "c", "init", "x", "function", "un", "format", "a", "nt", "r", "ln", "t", "mn", "z", "none", "an", "N", "nn", "no", "node", "fn", "e", "dn", "d", "y", "v", "f", "nl", "net", "parse", "k"], "as": ["a", "ask", "ap", "is", "ak", "As", "ar", "at", "ms", "asha", "ac", "axis", "os", "ase", "sa", "with", "abs", "acs", "using", "an", "ars", "AS", "ss", "cas", "ata", "use", "all", "ass", "ns", "inas", "ast", "asc", "am", "area", "asa", "was", "ng", "es", "aa", "act", "to", "us", "ans", "al", "nas", "ras"], "visited": ["navited", "servitted", "servited", "VISit", "naviting", "VISiting", "serviter", "visiter", "Visiter", "captended", "Visit", "visended", "servit", "VISited", " visended", "captitted", "captited", "visitted", "VISiter", "navit", "visit", "Visited", " visored", " visitted", "Visiting", "VISitted", "Visended", "Visored", "captored", "visiting", "visored", "navitted", "Visitted"], "index": ["expression", "number", "find", "parent", "weight", "pos", "address", "search", "si", "value", "condition", "name", "diff", "part", "loc", "sync", "action", "config", "ind", "coll", "pointer", "length", "prefix", "input", "level", "end", "match", "size", "row", "position", "num", "other", "type", "area", "x", "element", "xx", "id", "depth", "inc", "column", "thread", "path", "pull", "offset", "ix", "slice", "left", "call", "len", "key", "connection", "label", "add", "f", "host", "Index", "active", "start", "col"], "count": ["a", "test", "number", "list", "parent", "weight", "code", "base", "name", "nt", "part", "first", "counter", "b", "ind", "coll", "max", "length", "more", "level", "match", "size", "cache", "use", "all", "no", "child", "num", "c", "type", "last", "limit", "sum", "id", "depth", "val", "offset", "cond", "Count", "len", "key", "add", "found", "call", "start", "col"], "reader": ["per", "rc", "re", "io", "client", "ro", "cur", "err", "handler", "er", "socket", "ner", "loader", "worker", "rar", "r", "driver", "this", "system", "resource", "report", "ruby", "entry", "writer", "reading", "manager", "pointer", "rer", "inner", "input", "context", "rx", "ir", "bird", "row", "iter", "url", "q", "read", "container", "ri", "l", "stream", "e", "wrapper", "it", "author", "over", "editor", "rr", "or", "h", "oder", "Reader", "ler", "ry", "ger", "slice", "enter", "buffer", "f", "server", "auto", "ignore", "parser"], "out": ["Out", "exec", "file", "list", "timeout", "io", "w", "client", "window", "err", "gen", "bin", "string", "base", "raw", "name", "p", "line", "output", "write", "user", "log", "part", "r", "null", "this", "outs", "report", "copy", "doc", "writer", "comment", "prefix", "inner", "input", "error", "obj", "data", "cache", "page", "outer", "point", "pool", "c", "conn", "ext", "source", "self", "inc", "str", "OUT", "path", "again", "buffer", "ex", "connection", "server", "o", "up", "temp", "view", "co"], "tokenizer": ["Tokenize", "Tokenization", "okenizer", "initialiser", "okeniter", "optimer", "initializer", "Tokener", "initialiter", "tokener", "okener", "tokenizers", "initialize", " tokenizable", "Tokenizer", "Tokenizable", "tokenizable", " tokenizers", "optimizable", "tokenize", "initialization", " tokenize", "okenizers", " tokeniter", "okenization", "okeniser", "tokenization", "optimizer", "optimize", "Tokenizers", "tokeniser", "Tokeniser", " tokeniser", "optimization", "okenize", "tokeniter", " tokenization", " tokener"], "in": ["a", "din", "file", "is", "client", "err", "In", "bin", "request", "name", "line", "socket", "user", "r", "pass", "ini", "b", "doc", "ins", "image", "inner", "input", "data", "win", "read", "l", "stream", "init", "e", "h", "lin", "source", "id", "inc", "d", "path", "str", "v", "buffer", "connection", "f", "from", "IN", "inn"], "array": ["expression", "list", "file", "collection", "parent", "our", "address", "value", "string", "session", "raw", "group", "store", "answer", "section", "arrow", "alpha", "batch", "Array", "vector", "app", "attr", "pass", "channel", "arr", "pair", "work", "hash", "image", "ray", "book", "coll", "archive", "data", "cache", "object", "all", "instance", "range", "row", "container", "map", "node", "account", "each", "stack", "throw", "area", "database", "align", "element", "air", "allow", "function", "option", "format", "external", "api", "message", "back", "server", "auto", "record", "view", "environment"], "i": ["xi", "gi", "I", "io", "w", "si", "ie", "di", "p", "oi", "ii", "hi", "chi", "r", "t", "ni", "mini", "z", "ini", "b", "ai", "phi", "ji", "multi", "li", "ci", "q", "l", "qi", "u", "bi", "c", "ri", "e", "init", "it", "iu", "my", "mi", "x", "h", "pi", "eni", "fi", "id", "ip", "uri", "d", "field", "y", "v", "ix", "slice", "f", "o", "ui", "info", "k"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\n/**\\n *\\n * @author lenovo\\n */\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner scanner = new Scanner(System.in);\\n        int a = scanner.nextInt();\\n        int b = scanner.nextInt();\\n        int c = scanner.nextInt();\\n\\n        int[] array = {a, b, c};\\n        Arrays.sort(array);\\n        String s=\"\"+array[0]+\" \"+array[1]+\" \"+array[2];\\n        System.out.println(s);\\n    }\\n}", "target": "37", "substitutes": {"scanner": ["schening", "scaner", "analyinner", "Scanbird", " scaninner", "scheinner", "analyer", "haninner", "hanbird", "analyner", "hanner", "nerinner", "nerker", "scanbird", "analyter", "canning", "analyger", "nerning", "analyning", "scanter", "canner", "Scaner", "Scanner", "caninner", "scheter", "hanker", "scanker", "Scanker", " scanker", "schener", "canter", "Scanter", "scanning", " scanter", "scanger", " scanger", " scanbird", "nerner", "analyker", " scaner", "scaninner", "Scaninner", "Scanger", "Scanning"], "a": ["ca", "n", "au", "p", "ac", "alpha", "A", "sa", "ea", "z", "an", "ab", "ai", "count", "ae", "da", "aj", "e", "area", "x", "asa", "d", "art", "y", "va", "offset", "aa", "f", "as", "ama", "i"], "b": ["n", "bb", "p", "lb", "j", "r", "z", "ab", "ib", "count", "bc", "ba", "B", "l", "e", "bs", "x", "h", "d", "y", "db", "v", "aa", "f", "o", "sb", "be", "i", "k", "rb"], "c": ["ca", "n", "p", "C", "ac", "cc", "cn", "r", "z", "cr", "count", "ci", "size", "cm", "l", "u", "e", "h", "x", "d", "y", "v", "f", "cu", "cy", "cb", "i", "k"], "array": ["expression", "list", "number", "collection", "address", "value", "string", "word", "angle", "p", "answer", "section", "average", "result", "Array", "vector", "part", "index", "complex", "null", "arr", "pair", "sample", "one", "coll", "image", "ray", "book", "hash", "order", "alias", "archive", "data", "row", "object", "range", "error", "instance", "area", "python", "database", "element", "air", "v", "api", "integer", "record", "parse"], "s": ["parts", "n", "string", "aws", "p", " string", "r", "sets", "t", "sv", "arr", "ls", "tests", "ds", " objects", "sg", "ss", "your", "ws", "data", "ns", "l", " strings", "u", "ses", "e", "types", "S", "d", "ps", "str", "v", "f", "services", "o", "as", "g", "i", "strings", "rows"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n \\npublic class Main {\\n\tpublic static void main (String[] args) {\\n      Scanner in = new Scanner(System.in);\\n      int N = in.nextInt();\\n      int K = in.nextInt();\\n      int[] a = new int[N];\\n      for (int i = 0; i < N; i++) {\\n        a[i] = in.nextInt();\\n      }\\n      int[] dp = new int[N];\\n      dp[0] = 0;\\n      dp[1] = Math.abs(a[0] - a[1]);\\n      for(int i = 2; i< N ;i++){\\n        int k = 1;\\n        int temp = Integer.MAX_VALUE;\\n        while(k <= K && i-k >=0){\\n          temp = Math.min(temp, dp[i-k] + Math.abs(a[i] - a[i-k]));\\n          k++;\\n        }\\n        dp[i] = temp;\\n      }\\n      System.out.println(dp[N-1]);\\n\t}\\n}\\n", "target": "241", "substitutes": {"in": ["din", "token", "is", "re", "pin", "err", "In", "gen", "bin", "n", "line", "er", "s", "query", "ner", "user", "log", "cli", "socket", "loader", "serv", "fin", "r", "pass", "ln", "ini", "thin", "b", "doc", "ins", "rin", "inf", "inside", "input", "readable", "inner", "kin", "rec", " IN", "c", "init", "conn", "out", "h", "conv", "lin", "source", "id", "inc", "d", "con", "OUT", "gin", "again", "nin", "login", "isin", "buffer", "scan", "connection", "ex", "f", "as", "g", "reader", "IN", "inn"], "N": ["O", "E", "I", "Part", "n", "Ns", "ND", "J", "C", "T", "Len", "Ni", "NT", "Ne", "NB", "A", "G", "NN", "Size", "Q", "R", "D", "H", "Y", "NA", "Z", "B", "Num", "L", "Network", "NI", "M", "NC", "X", "No", "NE", "S", "P", "F", "Node", "V", "NS", "NL", "MN", "Number", " n"], "K": ["O", "U", "E", "I", "n", "J", "C", "T", "SK", "A", "G", "W", "Q", "R", "H", "D", "Y", "Z", "B", "L", "M", "PK", "KS", "X", "S", "P", "F", "V"], "a": ["tta", "sta", "img", "ga", "ar", "ca", "n", "asha", "au", "p", "aaa", "alpha", "ia", "ac", "m", "app", "na", "ada", "A", "sa", "ea", "ana", "ma", "an", "work", "b", "ab", "ai", "ae", "ba", "ata", "pa", "da", "aj", "u", "c", "e", "audio", "area", "am", "x", "asa", "mA", "la", "d", "va", "api", "aa", "f", "as", "array", "ama"], "i": ["gi", "xi", "I", "is", "io", "si", "ie", "n", "di", "p", "oi", "ii", "hi", "chi", "j", "index", "ki", "ni", "z", "mini", "ini", "mu", "b", "ai", "phi", "ji", "multi", "li", "ci", "ti", "ik", "min", "q", "ri", "qi", "u", "bi", "l", "e", "iu", "eni", "it", "mi", "x", "pi", "yi", "fi", "id", "ip", "uri", "y", "v", "ix", "vi", "key", "f", "ui", "o", "info", "g"], "dp": ["vp", "gp", "direction", "adr", "params", "address", "target", "di", "p", "alpha", "fp", "gap", "proxy", "bp", "pair", "dt", "b", "dr", "pb", "ds", "mp", "deb", "port", "df", "ep", "dm", "data", "cm", "pa", "da", "lp", "point", "py", "e", "tp", "np", "pi", "wp", "ip", "d", "P", "DP", "pp", "db", "dc", "api", "beta", "amp", "dep", "cp", "dat", "patch", "dim", "sp", "pad"], "k": ["th", "w", "ak", "n", "p", "ic", "mk", "ac", "m", "j", "kh", "ki", "z", "sk", "ek", "max", "ck", "ke", "ku", "ik", "kat", "q", "l", "u", "c", "e", "x", "dk", "kw", "id", "inc", "d", "y", "kid", "v", "kick", "key", "ko", "ok", "f", "o", "g"], "temp": ["test", "flat", "w", "cur", "err", "n", "pt", "base", "form", "tr", "p", "raw", "wrap", "tc", "part", "fake", "j", "t", "z", "cr", "lc", "partial", "max", "emp", "size", "cache", "total", "min", "point", "c", "e", "init", "tmp", "x", "pi", "dev", "id", "ip", "inc", "d", "pre", "y", "offset", "v", "current", "key", "clean", "cp", "Temp", "f", "iter"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        long N = sc.nextLong();\\n        long min = Long.MAX_VALUE;\\n        long rootN = (long) Math.sqrt(N);\\n        for(long i =  2; i <= rootN; i++){\\n            if(N % i == 0){\\n                long n = N / i;\\n                min = Math.min(min, (n-1)+ (i - 1));\\n            }\\n        }\\n        if(min > N){\\n            min = N -1;\\n        }\\n        System.out.println(min);\\n    }\\n}\\n", "target": "157", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "sub", "cer", "cc", "ner", "sec", "exp", "soc", "acc", "enc", "sync", "system", "osc", "cr", "sq", "ec", "lc", "cont", "bc", "sci", "ss", "ci", "se", "c", "src", "Sc", "asc", "out", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "N": ["O", "K", "MIN", "I", "NG", "Ns", "ONE", "Len", "C", "T", "J", "Ni", "NT", "Ne", "SN", "G", "NN", "Size", "Q", "length", "R", "D", "size", "H", "Y", "NA", "Z", "Num", "B", "L", "NM", "NI", "Min", "GN", "M", "X", "No", "NE", "S", "P", "F", "Node", "V", "CNN", "NS", "NL"], "min": ["span", "sort", "low", "mini", "nice", "partial", "rand", "lower", "id", "scale", "pull", "ng", "len", "round", "start", "spec", "pop", "minimum", "pos", "name", "p", "MAX", "section", "on", "ne", "mean", "rain", "don", "sign", "act", "add", "ignore", "nat", "value", "sol", "m", "na", "skip", "ss", "small", "sin", "range", "Min", "init", "x", "limit", "next", "mod", "un", "div", "mins", "pad", "MIN", "initial", "sub", "version", "diff", "amin", "part", "r", "default", "mn", "ni", "z", "none", "max", "nn", "dec", "sum", "Mini", "d", "val", "slice", "key", "shift"], "rootN": ["rootNs", "rootn", "rootK", "RootNs", "rootI", " rootO", "RootN", "minK", "RootI", "Rootn", "eqN", "eqO", "minN", " rootI", "eqNs", " rootn", "minn", "rootO", " rootNs", "eqI", "RootO", " rootK", "RootK"], "i": ["gi", "xi", "I", "io", "si", "di", "ie", "p", "oi", "m", "ii", "hi", "index", "j", "chi", "t", "ni", "z", "uli", "ini", "mini", "one", "b", "ai", "in", "length", "phi", "ji", "multi", "li", "ti", "ci", "zi", "l", "qi", "u", "bi", "ri", "iu", "x", "pi", "fi", "id", "ip", "uri", "d", "v", "ix", "f", "ui", "o"], "n": ["network", "p", "nb", "s", "m", "nan", "ne", "j", "t", "ni", "z", "mini", "sn", "b", "max", "count", "nn", "no", "size", "ns", "l", "u", "num", "c", "x", "next", "y", "nin", "len", "f", "o", "net", "k"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\npublic static void main(String[] args){\\nScanner scan =new Scanner(System.in);\\n\\nint a=scan.nextInt();\\nint b=scan.nextInt();\\nint c,d;\\ndouble e;\\nc=a/b;\\nd=a%b;\\ne=(double)a/(double)b;\\nSystem.out.print(c+\" \"+d+\" \");\\nSystem.out.printf(\"%f\\n\",e);\\n}\\n}", "target": "90", "substitutes": {"scan": ["pan", "span", "exec", "pin", "search", "ser", "n", "bin", "connect", "car", "query", "ner", "sc", "app", "na", "serv", "r", "sync", "skip", "system", "an", "ann", "fan", "in", "nn", "row", "all", "san", "sign", "read", "se", "l", "conn", "can", "out", "x", "conv", "cat", "look", "slice", "feed", "clean", "server", "Scan", "util", "walk", "watch", "reader", "ignore", "iter", "parse", "gram", "con"], "a": ["w", "fa", "ca", "n", "p", "s", "alpha", "ac", "m", "aaa", "na", "ada", "A", "sa", "ea", "ma", "z", "an", "ab", "ai", "ae", "ba", "pa", "da", "l", "aj", "u", "aw", "am", "area", "x", "la", "va", "y", "aa", "f", "as", "auto", "i", "ad"], "b": ["w", "n", "base", "bb", "p", "lb", "nb", "s", "m", "eb", "bd", "j", "r", "wb", "abb", "z", "ab", "ib", "length", "bc", "ba", "B", "l", "u", "bi", "fb", "bs", "x", "h", "body", "y", "db", "v", "aa", "bf", "f", "o", "sb", "g", "be", "i", "rb"], "c": ["w", "cs", "ca", "n", "p", "C", "ac", "cc", "m", "sc", "cd", "r", "cent", "z", "cr", "ec", "lc", "cf", "count", "ci", "cm", "l", "u", "ce", "x", "h", "y", "v", "dc", "cp", "uc", "f", "cu", "nc", "o", "cy", "g", "cb", "i", "k"], "d": ["dd", "w", "n", "di", "dy", "p", "s", "m", "cd", "r", "j", "t", "du", "z", "dt", "ds", "dad", "ded", "D", "dh", "nd", "da", "l", "u", "dp", "x", "dn", "dx", "dl", "y", "db", "dc", "f", "dat", "o", "g", "i", "ad"], "e": ["E", "ee", "oe", "w", "ie", "n", "p", "er", "m", "eb", "ne", "r", "ea", "t", "z", "ed", "ec", "fe", "ae", "de", "pe", "el", "se", "l", "u", "ce", "x", "y", "v", "es", "f", "o", "be", "g"]}}
{"code": "import java.util.*; import java.io.*; import java.math.*;\\npublic class Main{\\n\t//Don't have to see. start------------------------------------------\\n\tstatic class InputIterator{\\n\t\tArrayList<String> inputLine = new ArrayList<String>(1024);\\n\t\tint index = 0; int max; String read;\\n\t\tInputIterator(){\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\ttry{\\n\t\t\t\twhile((read = br.readLine()) != null){\\n\t\t\t\t\tinputLine.add(read);\\n\t\t\t\t}\\n\t\t\t}catch(IOException e){}\\n\t\t\tmax = inputLine.size();\\n\t\t}\\n\t\tboolean hasNext(){return (index < max);}\\n\t\tString next(){\\n\t\t\tif(hasNext()){\\n\t\t\t\treturn inputLine.get(index++);\\n\t\t\t}else{\\n\t\t\t\tthrow new IndexOutOfBoundsException(\"There is no more input\");\\n\t\t\t}\\n\t\t}\\n\t}\\n\tstatic HashMap<Integer, String> CONVSTR = new HashMap<Integer, String>();\\n\tstatic InputIterator ii = new InputIterator();//This class cannot be used in reactive problem.\\n\tstatic PrintWriter out = new PrintWriter(System.out);\\n\tstatic void flush(){out.flush();}\\n\tstatic void myout(Object t){out.println(t);}\\n\tstatic void myerr(Object t){System.err.print(\"debug:\");System.err.println(t);}\\n\tstatic String next(){return ii.next();}\\n\tstatic boolean hasNext(){return ii.hasNext();}\\n\tstatic int nextInt(){return Integer.parseInt(next());}\\n\tstatic long nextLong(){return Long.parseLong(next());}\\n\tstatic double nextDouble(){return Double.parseDouble(next());}\\n\tstatic ArrayList<String> nextStrArray(){return myconv(next(), 8);}\\n\tstatic ArrayList<String> nextCharArray(){return myconv(next(), 0);}\\n\tstatic ArrayList<Integer> nextIntArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Integer> ret = new ArrayList<Integer>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Integer.parseInt(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic ArrayList<Long> nextLongArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Long> ret = new ArrayList<Long>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Long.parseLong(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic String myconv(Object list, int no){//only join\\n\t\tString joinString = CONVSTR.get(no);\\n\t\tif(list instanceof String[]){\\n\t\t\treturn String.join(joinString, (String[])list);\\n\t\t}else if(list instanceof ArrayList){\\n\t\t\treturn String.join(joinString, (ArrayList)list);\\n\t\t}else{\\n\t\t\tthrow new ClassCastException(\"Don't join\");\\n\t\t}\\n\t}\\n\tstatic ArrayList<String> myconv(String str, int no){//only split\\n\t\tString splitString = CONVSTR.get(no);\\n\t\treturn new ArrayList<String>(Arrays.asList(str.split(splitString)));\\n\t}\\n\tpublic static void main(String[] args){\\n\t\tCONVSTR.put(8, \" \"); CONVSTR.put(9, \"\\n\"); CONVSTR.put(0, \"\");\\n\t\tsolve();flush();\\n\t}\\n\t//Don't have to see. end------------------------------------------\\n\tstatic void solve(){//Here is the main function\\n\t\tArrayList<Integer> one = nextIntArray();\\n\t\tint H = one.get(0);\\n\t\tint N = one.get(1);\\n\t\tArrayList<Integer> list = nextIntArray();\\n\t\tfor(int i = 0; i < N; i++){\\n\t\t\tH -= list.get(i);\\n\t\t\tif(H <= 0){\\n\t\t\t\tmyout(\"Yes\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tmyout(\"No\");\\n\t}\\n\t//Method addition frame start\\n\\n\\n\\n\t//Method addition frame end\\n}\\n", "target": "95", "substitutes": {}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n \tpublic static void main(String[] args){\\n    \tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] A = new int[N];\\n\t\tint[] B = new int[N-1];\\n\t\tint sum=0;\\n\\n\t\tfor(int i=0; i<N-1; i++){\\n\t\t\tB[i] = sc.nextInt();\\n\t\t}\\n\t\tA[0] = B[0];\\n\t\tsum += A[0];\\n\t\tfor(int i=1; i<N-1; i++){\\n\t\t\tA[i] = Math.min(B[i-1],B[i]);\\n\t\t\tsum += A[i];\\n\t\t}\\n\t\tA[N-1] = Math.max(A[N-2], B[N-2]);\\n\t\tsum += A[N-1];\\n\\n        System.out.println(sum);\\n\t\t//System.out.println(Arrays.toString(A));\\n    }\\n}", "target": "240", "substitutes": {"sc": ["esc", "sw", "rc", "ch", "cur", "cs", "ser", "cor", "search", "cer", "sr", "ner", "soc", "na", "r", "sa", "sync", "system", "cr", "osc", "sq", "ec", "lc", "st", "sn", " scr", "bc", "sci", "ss", "cus", "scope", "se", "c", "src", "Sc", "asc", "out", "or", "sche", "sem", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "g", "parser", "SC", "gram", "squ"], "N": ["O", "network", "K", "E", "I", "T", "Size", "Q", "D", "Y", "Num", "NI", "None", "F", "Sn", "Count", "Ns", "Bi", "ND", "J", "Length", "NT", "NY", "R", "Z", "M", "P", "Class", "Node", "NS", "Group", "Code", "KN", " n", "Part", "U", "Na", "Name", "n", "Len", "Ni", "All", "Order", "G", "Max", "NN", "H", "NA", "Network", "X", "NE", "Not", "V", "Nat", "Number", "Line", "Multi", "In", "State", "C", "Ne", "Key", "NB", "L", "NC", "No", "S", "Band", "Power", "IN"], "A": ["a", "API", "Alpha", "U", "This", "I", "Part", "Action", "HA", "AC", "As", "Na", "Ab", "Any", "AB", "Ca", "C", "alpha", "AM", "True", "Array", "Auth", "Sum", "LA", "AA", "G", "b", "W", "Adam", "First", "Y", "NA", "Num", "L", "Average", "MA", "Java", "Bu", "SA", "Az", "X", "Area", "Ma", "Ar", "AR", "BA", "S", "P", "F", "The", "App", "mA", "And", "V", "Info", "AP", "Am", "At", "An", "CA"], "B": ["O", "API", "Bar", "E", "I", "BS", "Library", "Part", "U", "Block", "As", "Ab", "Bi", "AB", "J", "C", "T", "BE", "Now", "BD", "Order", "Array", "NB", "TB", "Base", "Other", "Sum", "MB", "G", "PB", "b", "R", "Both", "BC", "GB", "First", "D", "UB", "H", "Y", "RB", "Beta", "DB", "Num", "L", "M", "Bu", "Builder", "X", "Area", "Bs", "BA", "OB", "P", "F", "S", "V", "Number", "BB", "Band", "New", "BI", "WB", "BM", "Bah"], "sum": ["a", "missing", "weight", "um", "si", "bin", "n", "unit", "diff", "alpha", "average", "help", "result", "ac", "part", "sa", "null", "Sum", "skip", "what", "mu", "mass", "an", "max", "conf", "comment", "count", "length", "mean", "ss", "cum", "error", "size", "total", "use", "miss", "min", "ass", "cache", "sam", "num", "gam", "am", "out", "su", "dev", "scale", "offset", "spread", "beta", " Sum", "sim", "add", "fat", "up", "summary", "info", "mem", "cost", "loss", "gram", "cal"], "i": ["a", "gi", "xi", "I", "io", "w", "si", "ie", "n", "di", "p", "oi", "cli", "m", "abi", "ii", "hi", "index", "r", "chi", "j", "ni", "z", "mini", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "ri", "e", "init", "iu", "it", "mi", "pi", "x", "h", "id", "ip", "uri", "y", "v", "ix", "f", "ui", "o", "info", "start"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static Scanner sc = new Scanner(System.in);\\n    public static void main(String[] args) throws Exception {\\n    \tint i, j, k;\\n    \tint count = 0;\\n    \tString w = sc.next();\\n    \tw = w.toLowerCase();\\n    \twhile(true) {\\n    \t\tString t = sc.next();\\n    \t\tif(t.contains(\"END_OF_TEXT\")) break;\\n    \t\tt = t.toLowerCase();\\n    \t\tif(t.equals(w)) count++;\\n    \t}\\n    \tSystem.out.println(count);\\n    }\\n}\\n", "target": "46", "substitutes": {"sc": ["pc", "esc", "scl", "exec", "sw", "rc", "ch", "cur", "desc", "cs", "sf", "screen", "ctx", "com", "cc", "ner", "sec", "soc", "acc", "enc", "sync", "cr", "osc", "ec", "sq", "lc", "coll", "bc", "sci", "ss", "cl", "scope", "se", "c", "src", "Sc", "asc", " SC", "sch", "mc", "console", "scan", "nc", " Sc", "uc", "anc", "sp", "sb", "SC", "con", "spec"], "i": ["a", "I", "si", "n", "p", "ii", "index", "r", "b", "ind", "in", "li", "ci", "l", "u", "c", "e", "x", "pi", "id", "d", "y", "v", "f"], "j": ["pos", "job", "n", "jc", "ie", "J", "p", "m", "ij", "z", "js", "b", "ji", "obj", "q", "l", "e", "je", "y", "v", "key", "f", "o", "g", "jp"], "k": ["K", "ks", "n", "name", "p", "m", "r", "z", "sk", "b", "max", "end", "q", "num", "c", "e", "x", "kw", "id", "d", "y", "v", "key", "ok", "f", "o", "g"], "count": ["test", "list", "number", "parent", "weight", "n", "code", "base", "word", "loop", "low", "width", "part", "index", "counter", "work", "coll", "length", "match", "size", "total", "cache", "c", "type", "limit", "text", "sum", "id", "depth", "content", "val", "offset", "check", "v", "Count", "len", "key", "f", "info", "second", "found", "iter", "start", "tag"], "w": ["wx", "wl", "sw", "ww", "n", "ew", "word", "string", "name", "p", "s", "wa", "wh", "wb", "work", "W", "ws", "tw", "ow", "l", "u", "aw", "c", "password", "we", "working", "x", "h", "text", "kw", "wp", "self", "nw", "d", "y", "v", "f", "hw", "iw", "fw", "wal", "wt"], "t": ["et", "test", "token", "the", "at", "n", "pt", "string", "tr", "p", "T", "template", "s", "txt", "te", "z", "st", "tt", "ti", "q", "l", "u", "c", "e", "it", "type", "h", "ts", "text", "ta", "ct", "d", "qt", "y", "v", "ant", "tf", "f", "to", "o", "title", "temp", "wt"]}}
{"code": "import java.io.*;\\nimport java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n\tprivate static Scanner sc;\\n\tprivate static Printer pr;\\n\\n\tprivate static void solve() {\\n\t\tint n = sc.nextInt();\\n\\n\t\tint[] h = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\th[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tint cnt = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tboolean flag = true;\\n\t\t\tfor (int j = 0; j < i; j++) {\\n\t\t\t\tif (h[j] > h[i]) {\\n\t\t\t\t\tflag = false;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif (flag) {\\n\t\t\t\tcnt++;\\n\t\t\t}\\n\t\t}\\n\\n\t\tpr.println(cnt);\\n\t}\\n\\n\t// ---------------------------------------------------\\n\tpublic static void main(String[] args) {\\n\t\tsc = new Scanner(System.in);\\n\t\tpr = new Printer(System.out);\\n\t\t\t\\n\t\tsolve();\\n\t\t\t\\n\t\tpr.close();\\n\t\tsc.close();\\n\t}\\n\\n\tstatic class Printer extends PrintWriter {\\n\t\tPrinter(OutputStream out) {\\n\t\t\tsuper(out);\\n\t\t}\\n\t}\\n}\\n", "target": "7", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "desc", "cs", "si", "screen", "ctx", "cc", "soc", "enc", "loc", "sync", "cr", "osc", "ec", "sq", "system", "lc", " scr", "bc", "sci", "ci", "cl", "scope", "c", "src", "Sc", "asc", "sche", "ct", "cv", "inc", " SC", "scan", "nc", " Sc", "uc", "anc", "sp", "SC", "con", "spec"], "pr": ["spr", "pc", "kr", "tri", "cur", "err", "ar", "expr", "pt", "tr", "p", "sr", "fp", "serv", "pl", "r", "cr", "arr", "gr", "mp", "ocr", "par", "rx", "proc", "fr", "syn", "inter", "por", "rr", "lr", "pro", "repl", "ptr", "Pr", "rt", "pp", "str", "inc", "PR", "sp", "prot", "wr", "jp"], "n": ["a", "w", "p", "s", "nb", "m", "nt", "ne", "r", "ln", "t", "mn", "z", "sn", "b", "N", "in", "nn", "size", "ns", "l", "u", "en", "c", "num", "e", "conn", "x", "dn", "d", "y", "v", "len", "nc", "f", "o", "net", "k"], "h": ["uh", "th", "hs", "ht", "w", "p", "header", "m", "home", "hi", "r", "z", "hm", "b", "ah", "ih", "H", "dh", "q", "l", "u", "he", "c", "e", "x", "rh", "head", "ph", "id", "oh", "eh", "d", "bh", "hl", "y", "v", "hr", "ha", "hh", "f", "hw", "sh", "han", "gh", "o", "host", "g", "k"], "i": ["xi", "gi", "a", "I", "is", "io", "si", "di", "ie", "p", "oi", "ii", "hi", "ij", "index", "ni", "z", "ini", "b", "ind", "ai", "in", "phi", "ji", "li", "ci", "ik", "zi", "ri", "qi", "u", "bi", "c", "l", "e", "init", "iu", "ori", "eni", "mi", "x", "pi", "it", "fi", "id", "ip", "uri", "y", "v", "ix", "key", "f", "ui", "o"], "cnt": ["pcent", "Cnt", "pcrt", "lcnc", "ucnd", "encent", "pcpt", "lcrt", "Ccount", "ucNT", "cent", "cint", "cpt", " cnc", "pcnt", "encnt", "encpt", "CNT", " cnd", "cnd", "uccount", " cNT", " cint", "pcNT", "ucnt", "encint", "Cnd", " cent", " cpt", "cnc", "lcNT", "pcint", " crt", "crt", "cNT", "lcnt", "ccount", " ccount", "pcnc"], "j": ["a", "bj", "ch", "br", "job", "ja", "err", "si", "jc", "pt", "ie", "di", "J", "p", " ii", "ii", "jo", "ij", "part", "r", "z", "js", "jj", "b", "jl", "ind", "ji", "end", "li", "obj", "ik", "fr", "l", "qi", "aj", "oj", "e", "it", "x", "out", "uj", "id", "d", "je", "y", "v", "key", "f", "o", "ui", "k", "jp"], "flag": ["force", "char", "code", "arg", " bit", "group", "line", "flags", "wait", "part", "feature", "let", "debug", "sync", "ish", " flags", " count", "count", "kind", "year", " bug", "bool", "bug", "l", "close", "prop", "binary", "af", "type", "and", "FLAG", "filter", "bit", "ag", "cat", "leaf", "id", "band", "bag", "field", "style", "lag", "offset", "v", "Flag", "key", "ret", " lag", "f", "start", "mask"]}}
{"code": "import java.util.*; import java.io.*; import java.math.*;\\npublic class Main{\\n\t//Don't have to see. start------------------------------------------\\n\tstatic class InputIterator{\\n\t\tArrayList<String> inputLine = new ArrayList<String>(1024);\\n\t\tint index = 0; int max; String read;\\n\t\tInputIterator(){\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\ttry{\\n\t\t\t\twhile((read = br.readLine()) != null){\\n\t\t\t\t\tinputLine.add(read);\\n\t\t\t\t}\\n\t\t\t}catch(IOException e){}\\n\t\t\tmax = inputLine.size();\\n\t\t}\\n\t\tboolean hasNext(){return (index < max);}\\n\t\tString next(){\\n\t\t\tif(hasNext()){\\n\t\t\t\treturn inputLine.get(index++);\\n\t\t\t}else{\\n\t\t\t\tthrow new IndexOutOfBoundsException(\"There is no more input\");\\n\t\t\t}\\n\t\t}\\n\t}\\n\tstatic HashMap<Integer, String> CONVSTR = new HashMap<Integer, String>();\\n\tstatic InputIterator ii = new InputIterator();//This class cannot be used in reactive problem.\\n\tstatic PrintWriter out = new PrintWriter(System.out);\\n\tstatic void flush(){out.flush();}\\n\tstatic void myout(Object t){out.println(t);}\\n\tstatic void myerr(Object t){System.err.print(\"debug:\");System.err.println(t);}\\n\tstatic String next(){return ii.next();}\\n\tstatic boolean hasNext(){return ii.hasNext();}\\n\tstatic int nextInt(){return Integer.parseInt(next());}\\n\tstatic long nextLong(){return Long.parseLong(next());}\\n\tstatic double nextDouble(){return Double.parseDouble(next());}\\n\tstatic ArrayList<String> nextStrArray(){return myconv(next(), 8);}\\n\tstatic ArrayList<String> nextCharArray(){return myconv(next(), 0);}\\n\tstatic ArrayList<Integer> nextIntArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Integer> ret = new ArrayList<Integer>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Integer.parseInt(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic ArrayList<Long> nextLongArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Long> ret = new ArrayList<Long>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Long.parseLong(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic String myconv(Object list, int no){//only join\\n\t\tString joinString = CONVSTR.get(no);\\n\t\tif(list instanceof String[]){\\n\t\t\treturn String.join(joinString, (String[])list);\\n\t\t}else if(list instanceof ArrayList){\\n\t\t\treturn String.join(joinString, (ArrayList)list);\\n\t\t}else{\\n\t\t\tthrow new ClassCastException(\"Don't join\");\\n\t\t}\\n\t}\\n\tstatic ArrayList<String> myconv(String str, int no){//only split\\n\t\tString splitString = CONVSTR.get(no);\\n\t\treturn new ArrayList<String>(Arrays.asList(str.split(splitString)));\\n\t}\\n\tpublic static void main(String[] args){\\n\t\tCONVSTR.put(8, \" \"); CONVSTR.put(9, \"\\n\"); CONVSTR.put(0, \"\");\\n\t\tsolve();flush();\\n\t}\\n\t//Don't have to see. end------------------------------------------\\n\tstatic void solve(){//Here is the main function\\n  int N = nextInt();\\n  ArrayList<Integer> list = nextIntArray();\\n  int output = 0;\\n  for(int i = 0; i < N - 1; i++){\\n    for(int j = i + 1; j < N; j++){\\n      output += list.get(i) * list.get(j);\\n    }\\n  }\\n  myout(output);\\n\t}\\n\t//Method addition frame start\\n\\n\\n\\n\t//Method addition frame end\\n}\\n", "target": "126", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint x = scan.nextInt();\\n\t\tint total = 0;\\n\t\tint num = 0;\\n\t\tint min = 0;\\n\t\tint a[] = new int[n];\\n\\n\t\tfor (int m=0; m < n; m++) {\\n\t\t\ta[m] = scan.nextInt();\\n\t\t\ttotal += a[m];\\n\t\t}\\n\\n\t\tmin = a[0];\\n\t\tfor (int i=1; i < n; i++) {\\n\t\t\tif (a[i] < min) {\\n\t\t\t\tmin = a[i];\\n\t\t\t}\\n\t\t}\\n\\n\t\ttotal = x - total;\\n\\n\t\tnum = total/min;\\n\t\tnum += n;\\n\\n\t\tSystem.out.println(num);\\n\\n\t\tscan.close();\\n\\n\t}\\n\\n}\\n", "target": "3", "substitutes": {"scan": ["run", "pan", "span", "chan", "is", "pin", "search", "gen", "ser", "parser", "er", "see", "connect", "query", "ner", "sc", "man", "na", "nan", "r", "ln", "skip", "sync", "system", "an", "report", "ann", "fan", "in", "kin", "inner", "nn", "all", "sin", "san", "sign", "read", "row", "bug", "se", "l", "en", "plan", "can", "out", " scanner", "source", "cat", "ans", "ski", "slice", "wan", "clean", "server", "Scan", "spin", "watch", "ignore", "reader", "walk", "iter", "parse", "con"], "n": ["number", "p", "s", "nb", "cn", "nt", "nan", "j", "ne", "t", "mn", "z", "an", "sn", "b", "N", "max", "in", "nn", "size", "no", "all", "ns", "l", "u", "c", "en", "e", "d", "y", "v", "nc", "f", "o", "net", "k"], "x": ["network", "number", "w", "p", "on", "na", "index", "j", "t", "z", "an", "b", "max", "in", "no", "all", "ax", "l", "u", "c", "e", "h", "xs", "X", "id", "d", "y", "v", "ex", "f", "k"], "total": ["token", "number", "cost", "pos", "done", "value", "mult", "non", "diff", "alpha", "nt", "part", "na", "wa", "index", "otal", "valid", "null", "t", "mini", "ma", "mu", "partial", "max", "translation", "length", "mon", "count", "in", "meta", "multi", "no", "all", "data", "full", "trans", "da", "u", "Total", "complete", "ta", "sum", "scale", "tu", "current", "o", "fo", "info", "net", "temp", "mm"], "num": ["nu", "number", "pos", "NUM", "um", "mult", "name", "p", "unit", "umi", "nb", "index", "valid", "zero", "mn", "ni", "mu", "max", "mon", "nm", "in", "multi", "inner", "count", "no", "nn", "iter", "common", "miss", "Num", "en", "init", "mi", "sum", "nom", "id", "inc", "offset", "uni", "len", "dim", "net", "temp", "col"], "min": ["MIN", "span", "minimum", "pos", "mit", "si", "version", "name", "p", "unit", "step", "diff", "amin", "man", "na", "wa", "sa", "mn", "mini", "ni", "skip", "ini", "an", "minute", "partial", "max", "none", "ai", "in", "mon", "mean", "ss", "small", "don", "miss", "ax", "aj", "pri", "Min", "init", "mi", "am", "area", "limit", "next", "sum", "id", "scale", "Mini", "mod", "val", "nin", "len", "act", "dim", "mins", "net", "start", "mid"], "a": ["tta", "sta", "ga", "p", "oa", "s", "alpha", "ac", "na", "wa", "ada", "A", "sa", "ea", "ana", "ma", "an", "ab", "work", "b", "ai", "aux", "ae", "ba", "ata", "data", "pa", "da", "aj", "u", "c", "area", "am", "la", "va", "y", "ha", "aa", "as", "o", "auto", "array", "ama", "au"], "m": ["pm", "w", "p", "fm", "man", "r", "j", "mn", "mini", "z", "an", "hm", "b", "mu", "in", "mon", "mo", "ym", "dm", "nm", "im", "mr", "cm", "month", "l", "u", "c", "e", "em", "M", "mi", "h", "am", "sm", "d", "y", "v", "mc", "om", "f", "o", "md", "g", "mm", "k"], "i": ["gi", "xi", "I", "is", "io", "si", "di", "ie", "p", "oi", "abi", "ii", "hi", "chi", "j", "t", "ni", "z", "uli", "ini", "mu", "mini", "b", "ai", "phi", "multi", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "init", "e", "mi", "pi", "fi", "id", "uri", "y", "ix", "f", "ui", "info"]}}
{"code": "import java.io.*;\\nimport java.math.BigInteger;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\tstatic class FastReader \\n    { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() \\n        { \\n            br = new BufferedReader(new\\n                     InputStreamReader(System.in)); \\n        } \\n  \\n        String next() \\n        { \\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n\tstatic PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\\n\tpublic static long mod = (long) (1e9+7);\\n\tpublic static long[] fac,inv;\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tFastReader sc = new FastReader();\\n\t    String n = sc.next();\\n\t    int k = sc.nextInt();\\n\t    BigInteger ans = new BigInteger(n);\\n\t    out.print(ans.toString(k).length());\\n\t    out.close();\\n\\n\t}\\n\\n}\\n", "target": "219", "substitutes": {"br": ["ch", "bur", "err", "Br", "cur", "img", "bb", "tr", "buf", "bd", "BR", "pl", "obl", "r", "browser", "bp", "arr", "ab", "abs", "b", "bar", "dr", "gr", "bc", "ob", "raf", "mr", "fr", "bel", "B", "fb", "src", "bs", "ber", "bridge", "bt", "pr", "bro", "next", "bed", "fore", "body", "rt", "bh", "db", "rest", "hr", "box", "sp", "sb", "be", "orb", "cb", "iter", "ur", "bl", "rb"], "st": ["sw", "sta", " St", "string", "pt", "step", "stop", "struct", "sr", "ste", "sts", "ft", "store", "nt", "strip", " est", "sc", "sth", "r", "inst", "sa", "est", "t", "stri", "cr", "sl", "sn", "ost", "ld", "fe", "ace", "std", "ss", "stable", "Str", "pe", "sign", "stack", "cl", "nd", "l", "ist", "ast", "stream", "e", "src", "x", "bt", "pr", "ct", "rt", "art", "rest", "ut", "const", "sh", "sp", "ST", "be", "sb", "rd", "bl", "St"], "str": ["ctr", "sta", "w", "pos", "err", "char", "n", "string", "pt", "tr", "line", "sr", "exp", "enc", "r", "j", "inst", "stri", "t", "pass", "z", "sl", "arr", "b", "gr", "dr", "doc", "in", "url", "inner", "dict", "obj", "Str", "data", "fr", "cl", "l", "c", "e", "x", "text", "pr", "id", "style", "hr", "div", "f", "sp", "STR", "temp", "iter", "strings", "bl"], "out": ["Out", "exec", "file", "table", "io", "w", "window", "err", "bin", "cmd", "string", "raw", "name", "p", "line", "output", "write", "log", "exe", "r", "t", "outs", "report", "work", "b", "class", "in", " in", "input", "obj", "error", "cache", "session", "page", "ax", "l", "conn", "x", "inc", "OUT", "path", "v", "ex", "f", "to", "sp", "temp", "i", "IN"], "mod": [" dim", " ord", " mant", " sig", " rad", " imm", " sup", " ac", " imp", " fab", " mult", " Mod", " modular", " mem", " norm", " sum", " sign", " circ", " fun", " shift", " div", " sim", " pow", " cov", " mul", " co", " exp", " perm"], "fac": ["Fac", "cur", "eff", "fun", "ac", "acc", "auc", "complex", "ran", "var", "abs", "func", "circ", "im", "ax", "frac", "aj", "aug", "ag", "lag", " acc", "lam", "cap", "dim", "deg", "au", "con", "co"], "inv": ["nr", "tri", "eff", "fun", "grad", "log", "ii", "vis", "ij", "rev", "var", "abs", "mu", "vs", "ov", "iq", "qv", "av", "sign", "Inv", "aj", " inverse", "adj", "dev", "sum", "V", " cov", "temp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        for(int i = 0;i < n;i++) a[i] = sc.nextInt();\\n        boolean[] history = new boolean[n];\\n        boolean success = false;\\n\\n        int i = 0;\\n        int count = 0;\\n        while(true) {\\n            if(history[i]) break;\\n            if(i == 1) {\\n                success = true;\\n                break;\\n            }\\n\\n            history[i] = true;\\n            i = a[i] - 1;\\n            count++;\\n        }\\n\\n        String ans = success ? String.valueOf(count) : \"-1\";\\n        System.out.println(ans);\\n    }\\n\\n\\n}", "target": "175", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cs", "si", "cer", "sf", "cc", "ner", "sec", "na", "sa", "system", "cr", "osc", "ec", "st", "sq", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "or", "sche", "sem", " SC", "sch", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "SC"], "n": ["network", "span", "number", "w", "p", "nb", "s", "nt", "m", "na", "ne", "j", "r", "t", "ni", "z", "an", "sn", "b", "N", "in", "nn", "size", "no", "all", "ns", "l", "u", "num", "c", "en", "x", "d", "y", "len", "nc", "f", "o", "net", "k"], "a": ["ga", "address", "ca", "au", "p", "aaa", "s", "alpha", "ia", "na", "ada", "A", "sa", "qa", "ma", "z", "an", "ab", "b", "ai", "ba", "da", "aj", "u", "c", "area", "x", "am", "asa", "la", "y", "va", "aa", "as", "o", "auto", "array", "ama"], "i": ["xi", "gi", "I", "io", "status", "si", "ie", "di", "code", "p", "cli", "diff", "ii", "hi", "part", "index", "j", "ni", "z", "ini", "b", "ind", "ai", "in", "length", "phi", "multi", "li", "ci", "ri", "qi", "u", "bi", "c", "l", "e", "init", "iu", "it", "mi", "pi", "x", "limit", "id", "ip", "uri", "y", "ix", "v", "api", "key", "f", "ui", "o", "info", "start"], "history": ["prev", "hist", "list", "table", "reverse", "status", "code", "ctx", "command", "loop", "log", "batch", "index", "sync", "config", "model", "support", "queue", "coll", "comment", "graph", "context", "dict", "rec", "error", "roll", "cache", "state", "data", "menu", "stack", "c", "h", "text", "path", "past", "History", "chron", "stat", "active", "array", "info", "stage", "progress"], "count": ["list", "number", "parent", "old", "weight", "code", "base", "name", "p", "nt", "batch", "first", "index", "counter", "work", "seq", "ind", "coll", "support", "length", "ci", "size", "cache", "all", "total", "error", "state", "child", "c", "type", "last", "sum", "id", "cat", "inc", "Count", "len", "current", "act", "active", "info", "found", "ignore", "call", "start", "progress"], "ans": ["res", "ks", "ants", "cs", "AN", "lan", "ings", "anon", "s", "amps", "na", "ents", "ANS", "os", "ln", "an", "ann", "ars", "ls", "ins", "lines", "nas", "cas", "aning", "ns", "ases", "acts", "can", " stats", " spans", "ats", "aus", "es", "ions", "len", "aned", "scan", "act", "ons", "anus", "as", "anc", " scans", " chars"], "success": ["method", "accept", "status", "code", "rolled", "stop", "ceed", "loop", "result", "fast", "log", "first", "index", "pass", "valid", "null", "fail", "primary", "exist", "seq", "support", "construct", "length", "error", "match", "size", "sign", "use", "cess", "good", "pred", "complete", "last", "text", "Success", "continue", "successful", "ok", "plus", "future", "found", "follow", "successfully", "array", "connect", "progress"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args)throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String str;\\n\\n        int count = 0;\\n\\n        str = br.readLine();\\n        String W = str.toLowerCase();\\n        while((str = br.readLine()) != null){\\n           String x = str.toLowerCase();\\n           String[] temp = x.split(\"\\\\s\");\\n           for(int i =0;i<temp.length;i++){\\n                if(temp[i].equals(\"END_OF_TEXT\")){\\n                    break;\\n                }\\n               if(W.equals(temp[i])){\\n                   count++;\\n               }\\n           }\\n        } \\n        br.close();\\n        System.out.println(count);\\n    }\\n}", "target": "46", "substitutes": {"br": ["res", "ctr", "io", "err", "Br", "brush", "erb", "bb", "tr", "sr", "er", "buf", "yr", "result", "BR", "handle", "r", "browser", "jar", "cr", "arr", "report", "ab", "b", "dr", "bar", "gr", "bc", "obj", "mr", "fr", "stream", "bs", "out", "ber", "bridge", "lr", "wr", "bro", "bed", "ler", "hr", "orb", "reader", "cb", "iter", "bl", "rb"], "str": ["w", "reader", "err", "char", "string", "raw", "name", "tr", "line", "er", "sr", "ner", "strip", "part", "r", "txt", "stri", "t", "cr", "st", "arr", "b", "dr", "gr", "writer", "in", "input", "obj", "Str", "data", "iter", "fr", "read", "e", "out", "text", "pr", "print", "style", "hr", "ex", "div", "f", "sp", "STR", "strike", "bl", "spec"], "count": ["test", "number", "list", "parent", "weight", "err", "code", "base", "name", "loop", "low", "result", "part", "handle", "index", "counter", "work", "empty", "max", "coll", "length", "order", "level", "size", "total", "cache", "data", "read", "child", "c", "type", "limit", "text", "sum", "id", "depth", "content", "check", "Count", "len", "key", "time", "info", "found", "second", "start"], "W": ["U", "WD", "I", "w", "MW", "Name", "word", "Word", "WR", "C", "T", "DW", "WAR", "A", "Ws", "G", " w", "N", "Q", "R", "WW", "TEXT", "H", "WF", "CW", "B", "NW", "L", "WT", "TW", "M", "SW", "GW", "X", "WS", "F", "P", "END", "V", "BW", "FW", "WB"], "x": ["xi", "wx", "test", "w", "ww", "n", "string", "p", "s", "xt", "index", "r", "txt", "t", "rex", "in", "rx", "data", "l", "text", "tx", "xs", "X", "xx", "y", "v", "ix", "xxx", "ex", "xp", "f", "xml"], "temp": ["test", "list", "flat", "w", "err", "base", "pt", "tr", "p", "unit", "template", "diff", "tc", "tem", "wait", "part", "dest", "index", "fake", "txt", "let", "valid", "loc", "empty", "lc", "partial", "emp", "input", "context", "now", "split", "iter", "pack", "full", "tw", "font", "tmp", "out", "source", "content", "pre", "path", "v", "ix", "current", "buffer", "ex", "json", "Temp", "sp", "zip", "wrap"], "i": ["gi", "xi", "I", "io", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "index", "j", "r", "t", "b", "in", "length", "phi", "multi", "inner", "li", "ci", "ti", "ji", "ri", "l", "u", "bi", "qi", "c", "e", "init", "it", "pi", "h", "fi", "id", "ip", "uri", "d", "y", "v", "slice", "ix", "f", "ui", "o", "info"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan=new Scanner(System.in);\\n\t\twhile(true) {\\n\t\t\tint n=scan.nextInt();\\n\t\t\tint a=scan.nextInt();\\n\t\t\tint sum=0,count=0;\\n\t\t\tfor(int i=1;i<=n;i++) {\\n\t\t\t\tfor(int j=2;j<=n;j++) {\\n\t\t\t\t\tfor(int k=3;k<=n;k++) {\\n\t\t\t\t\t\tif(i == j || j == k || i == k) {\\n\t\t\t\t\t\t}else {\\n\t\t\t\t\t\t\tsum = i+j+k;\\n\t\t\t\t\t\tif (sum == a && i<j && j<k) {\\n\t\t\t\t\t\t\tcount += 1;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif(n==0 && a==0) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tSystem.out.println(count);\\n}\\n\t\tscan.close();\\n}\\n}\\n", "target": "116", "substitutes": {"scan": ["run", "pan", "span", "chan", "pin", "search", "gen", "ser", "parser", "er", "see", "connect", "query", "ner", "sc", "na", "serv", "r", "skip", "sync", "south", "an", "report", "ann", "fan", "start", "in", "inner", "nn", "all", "sin", "san", "row", "read", "bug", "se", "en", "plan", "can", "conn", "out", "filter", "source", "cat", "ans", "slice", "feed", "clean", "server", "Scan", "walk", "watch", "stat", "reader", "iter", "parse", "con"], "n": ["network", "nu", "number", "w", "p", "s", "nb", "m", "nt", "cn", "ne", "r", "nan", "t", "ni", "z", "an", "b", "N", "in", "nn", "size", "no", "ns", "l", "u", "en", "c", "num", "e", "x", "h", "nw", "d", "y", "v", "len", "nc", "f", "o", "net"], "a": ["access", "w", "ak", "ar", "ca", "au", "p", "ia", "alpha", "ac", "m", "na", "A", "sa", "ea", "ana", "z", "an", "ab", "b", "ai", "ba", "aj", "u", "c", "area", "x", "am", "ka", "d", "y", "api", "aa", "f", "o", "as", "ad"], "sum": ["weight", "um", "si", "p", "unit", "sort", "alpha", "average", "ac", "part", "acc", "index", "ul", "sa", "Sum", "skip", "an", "sk", "mass", "b", "max", "coll", "loss", "in", "length", "comment", "mean", "use", "size", "total", "all", "sign", "min", "account", "miss", "ass", "frac", "carry", "u", "num", "c", "h", "scale", "parse", "offset", "seed", "key", "f", "cost", "start", "cal"], "count": ["test", "list", "number", "parent", "ch", "code", "base", "cast", "part", "index", "counter", "work", "empty", "max", "coll", "conf", "length", "now", "size", "cache", "total", "data", "child", "carry", "num", "c", "process", "cat", "id", "depth", "offset", "Count", "len", "key", "add", "found", "info", "call", "start", "check"], "i": ["xi", "I", "is", "io", "si", "di", "ie", "p", "oi", "m", "ii", "ki", "ni", "z", "ini", "b", "ai", "phi", "ji", "li", "ci", "ik", "zi", "l", "qi", "u", "bi", "c", "ri", "e", "ori", "iu", "mi", "x", "pi", "id", "ip", "d", "y", "v", "ix", "f", "ui", "o", "jp"], "j": ["ak", "job", "ja", "si", "jc", "ie", "dj", "J", "p", "m", "jo", "ii", "ij", "jet", "z", "jj", "js", "b", "jl", "ji", "li", "ik", "q", "l", "qi", "u", "oj", "c", "aj", "e", "pi", "x", "uj", "d", "je", "y", "v", "key", "f", "o", "jp"], "k": ["K", "kn", "kr", "ks", "ch", "w", "ak", "p", "mk", "m", "r", "ki", "z", "km", "sk", "ek", "b", "kt", "ck", "kk", "ke", "ku", "ky", "ik", "q", "ijk", "l", "u", "c", "e", "ka", "x", "dk", "kw", "id", "d", "y", "v", "key", "ko", "ok", "f", "o", "gh", "g"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\n\\nclass Main{\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.nextLine());\\n        String[] line = sc.nextLine().split(\" \");\\n        int[] data =new int[n];\\n        for(int i=0; i < n; i++){\\n            data[i] = Integer.parseInt(line[i]);\\n        }\\n\\n        int q = Integer.parseInt(sc.nextLine());\\n        String[] line2 = sc.nextLine().split(\" \");\\n        int[] searcher = new int[q];\\n        for(int i=0; i < q; i++){\\n            searcher[i] = Integer.parseInt(line2[i]);\\n        }\\n\\n        \\n        int result = 0;\\n        for(int search : searcher){\\n            int left = 0;\\n            int right = n;\\n            int mid;\\n            while(left < right){\\n                mid = (left + right) / 2;\\n                if(search == data[mid]){\\n                    result++;\\n                    break;\\n                }else if(search < data[mid]){\\n                    right = mid;\\n                }else if(search > data[mid]){\\n                    left = mid + 1;\\n                }\\n            }\\n        }\\n        System.out.println(result);\\n        \\n\\n\\n\\n    }\\n    static void bubble(int[] arr, int n){\\n\\n    }\\n    static void selection(int[] arr, int n){\\n\\n    }\\n    static void insertionSort(int[] arr, int n, int g,int count){\\n        for(int i = g; i < n; i++){\\n            int v = arr[i];\\n            int j = i - g;\\n            while(j >= 0 && arr[j] > arr[i]){\\n                arr[i] = arr[j];\\n                j-=g;\\n                count++;\\n            }\\n            arr[j + g] = v;\\n        }\\n    }\\n    static void shellsort(int[] arr, int n){\\n\\n        for(int i = 1; ; ){\\n            if(i > n){\\n                break;\\n            }\\n\\n            i = (i * 3) + 1;\\n        }\\n    }\\n}\\nclass Struct{\\n    String name;\\n    int time;\\n    public Struct(String n, int t){\\n        name = n;\\n        time = t;\\n    }\\n}", "target": "138", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cs", "com", "cli", "cc", "ner", "sec", "tc", "soc", "loc", "sync", "system", "cr", "osc", "ec", "lc", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "isc", "Sc", "asc", "sche", "cv", " SC", "sch", "mc", "console", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "cb", "SC"], "n": ["a", "network", "span", "number", "nu", "w", "nat", "gen", "Ns", "p", "nb", "s", "nt", "m", "cn", "nor", "na", "ne", "r", "nan", "ln", "z", "an", "sn", "b", "N", "in", "nn", "no", "all", "ns", "node", "l", "u", "en", "c", "num", "e", "conn", "np", "x", "h", "dn", " N", "nw", "d", "y", "names", "nc", "f", "o", "net", "k"], "line": ["Line", "file", "list", "inline", "cell", "LINE", "string", "code", "unit", "section", "user", "log", "ine", "ne", "le", "sync", "link", "frame", "entry", "ge", "definition", "cle", "url", "lines", "split", "end", "row", "no", "cl", "l", "date", "text", "lin", "source", "band", "block", "look", "style", "column", "parse", "message", "nl", "rule"], "data": ["a", "test", "list", "results", "parent", "window", "done", "code", "space", "base", "p", "group", "alpha", "batch", "media", "na", "index", "memory", "sample", "action", "entry", "response", "input", "inner", "actions", "size", "cache", "no", "row", "map", "match", "all", "complete", "series", "area", "next", "block", "body", "content", "style", "open", "DATA", "len", "buffer", "shift", "div", "key", "dat", "change", "json", "array", "info", "start"], "i": ["xi", "I", "io", "si", "di", "mini", "ini", "b", "multi", "iu", "it", "pi", "fi", "id", "ix", "ui", "info", "start", "is", "ie", "p", "cli", "ii", "ij", "mu", "ai", "phi", "ji", "li", "ik", "u", "ori", "mi", "yi", "ip", "uri", "anti", "o", "gi", "ic", "m", "hi", "chi", "ish", "im", "l", "c", "init", "eni", "my", "x", "api", "current", "vi", "a", "oi", "abi", "ni", "z", "ti", "ci", "ri", "qi", "bi", "e", "y", "slice", "f", "k"], "q": ["qs", "quad", "ch", "w", "p", "qq", "query", "m", "r", "quality", "qa", "z", "sq", "max", "Q", "qu", "cl", "l", "qi", "u", "c", "quant", "h", "x", "id", "depth", "d", "qt", "y", "f", "sh", "k"], "line2": ["lin0", "Line3", "line0", "lin1", "lineTwo", "LineTwo", "cell2", "cell3", "line1", "Line1", "Line2", "cell1", "lin2", "lin3", " line1", " lineTwo", "cell0", "linTwo", "Line0", "line3", " line3"], "searcher": ["seerner", "searedcher", "seearner", "seercher", "searaner", "searacher", "sharner", "seerter", "searter", "sherner", "seasches", "seearchers", " seasner", "seearch", "searachers", " searchers", "Searchers", "seerchers", "separter", "seasner", "seaschers", "searedchers", "separcher", "searencher", "searedche", "searenche", "Seearche", "Seearch", " searner", "shercher", "separchers", "seearter", "seearche", "Seearchers", "searchers", "searches", "separner", "searaches", "searedches", " seaschers", "Searcher", "searner", "sharchers", "sharter", " searches", "searche", "Seearcher", "seascher", " seascher", "searenchers", " seasches", "sherter", "seearcher", "searench", "sherchers", "searedner", "sharcher", "Search", "searedch", "Searche"], "result": ["test", "res", "results", "ver", "err", "score", "value", "mer", "diff", "grade", "ner", "feature", "r", "valid", "default", "leave", "zero", "counter", "report", "entry", "response", "length", "order", "end", "match", "total", "use", "page", "range", "error", "row", "success", "complete", "Result", "term", "limit", "major", "function", "successful", "card", "current", "ret", "future", "found"], "search": ["test", "list", "find", "parent", "pos", "err", "sub", "code", "space", "query", "me", "sol", "m", "exp", "wait", "sort", "index", "loc", "default", "resource", "sq", "b", "entry", "rel", "replace", "scroll", "start", "comp", "earch", "lower", "match", "map", "use", "way", "range", "cl", "child", "scope", "close", "complete", "id", "open", "look", "key", "scan", "shift", "place", "plus", "array", "found", "Search", "parse", "where", "spec"], "left": ["parent", "col", "old", "pos", "lim", "cell", "middle", "diff", "low", "m", "part", "pl", "loc", "r", "ul", "le", "leave", "lc", "partial", "rel", "lo", "both", "length", "lower", "inner", "end", "url", "li", "center", "small", "min", "full", "el", "cl", "l", "child", "lt", "Left", "last", "limit", "id", "la", "d", "offset", "ell", "len", "shift", "found", "start"], "right": ["th", "wx", "correct", "rc", "w", "ro", "ra", "cmd", "form", "raw", "arrow", "m", "co", "r", "resource", "one", "partial", "max", "rel", "rand", "rx", "rights", "end", "inner", "row", "ax", "child", "x", "rh", "third", "Right", "rad", "rt", "d", "art", "progress", "rest", "off", "red", "ack", "hand", "patch", "gh", "rew", "round", "rd", "middle", "rw"], "mid": ["per", "pid", "lim", "pos", "cur", "ms", "sub", "cmd", "char", "mode", "low", "m", "nt", "home", "part", "co", "hi", "loc", "index", "r", "valid", "late", "nice", "medium", "coord", "entry", "partial", "doc", "rel", "start", "ind", "meta", "xy", "rand", "end", "multi", "kind", "large", "small", "med", "miss", "mr", "min", "month", "rid", "nd", "match", "quick", "mi", "x", "master", "lat", "id", "la", "grid", "dev", "module", "ng", "offset", "key", "Mid", "shift", "patch", "dim", "md", "net", "remote", "mm", "middle", "spec", "card"], "arr": ["test", "list", "ap", "arch", "adr", "ch", "br", "adv", "err", "ar", "img", "p", "aaa", "batch", "attr", "app", "Array", "enc", "acc", "r", "var", "ann", "gr", "dr", "coll", "par", "ray", "av", "order", "map", "cache", "obj", "fr", "arc", "el", "war", "arp", "rep", "rr", "att", "pr", "align", "arm", "vec", "Ar", "air", "str", "format", "db", "aa", "div", "dat", "array", "au", "xml"], "g": ["gi", "gp", "ig", "gt", "w", "ga", "gen", "gb", "p", "group", "ic", "s", "m", "gs", "bg", "gap", "gm", "z", "G", "ge", "b", "gr", "go", "sg", "size", "l", "u", "vg", "c", "e", "h", "ag", "d", "ng", "eg", "f", "gg", "gh", "gn", "k"], "count": ["a", "parent", "ch", "w", "weight", "gen", "code", "group", "p", "m", "index", "counter", "z", "b", "size", "all", "child", "l", "num", "c", "gl", "e", "last", "h", "sum", "id", "cat", "age", "d", "Count", "div", "f", "flag", "col"], "v": ["a", "vals", "w", "vd", "value", "iv", "p", "ve", "m", "ii", "uv", "r", "z", "sv", "var", "b", "vs", "av", "lv", "li", "l", "u", "c", "e", "x", "h", "d", "val", "y", "va", "V", "vi", "vol", "f", "vv", "o", "k"], "j": ["a", "br", "job", "ja", "si", "jc", "pt", "ie", "J", "p", "dj", "m", "jo", "ii", "ij", "jet", "z", "jj", "js", "b", "jl", "ind", "ji", "li", "fr", "l", "aj", "u", "oj", "c", "bi", "e", "x", "h", "adj", "uj", "d", "je", "y", "ix", "vi", "f", "o", "k", "jp"], "name": ["number", "parent", "Name", "string", "base", "value", "version", "word", "header", "m", "part", "NAME", "model", "class", "length", "prefix", "size", "no", "object", "date", "type", "x", "id", "path", "str", "names", "named", "key", "label", "title", "info"], "time": ["test", "method", "timeout", "value", "form", "timer", "event", "delay", "m", "clock", "Time", "class", "length", "size", "total", "date", "tim", "type", "x", "text", "ime", "id", "scale", "depth", "field", "val", "tz", "path", "shape", "duration", "times", "info", "temp", "start"], "t": ["a", "test", "w", "at", "p", "T", "s", "m", "r", "z", "dt", "b", "tt", "l", "u", "c", "e", "it", "type", "x", "ts", " T", "h", "ta", "d", "y", "f", "o"]}}
{"code": "import java.util.*;\\nimport java.lang.Math;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\\n  \t\t\\n      \tint a = sc.nextInt();\\n      \tint b = sc.nextInt();\\n      \tint c = sc.nextInt();\\n      \tint d = sc.nextInt();\\n      \tboolean twin = false;\\n      \tboolean awin = false;\\n      \tString str = \" \";\\n      \\n      \tfor(int i = 0;!twin && !awin;i++) {\\n\t\t\tif(i % 2 == 0){\\n              c -= b;\\n              if(c <= 0) {\\n                twin = true;\\n              \tstr = \"Yes\";\\n              }\\n            } else {\\n              a -= d;\\n              if(a <= 0) {\\n                awin = true;\\n                str = \"No\";\\n              }\\n            }        \\n        }     \t\\n      \t\\n      \tSystem.out.println(str);\\n        \\n\t}\\n}\\n", "target": "186", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "core", "cur", "cs", "ca", "cor", "cer", "sr", "ctx", "cc", "ner", "sec", "tc", "soc", "acc", "sync", "cr", "osc", "sq", "lc", "cont", "coll", " scr", "bc", "sci", "ss", "ci", "cus", "scope", "se", "src", "Sc", "asc", "sche", "cv", " SC", "mc", "scan", "nc", " Sc", "uc", "anc", "sp", "sb", "parse", "SC"], "a": ["w", "fa", "ca", "n", "base", "p", "s", "ac", "alpha", "ia", "m", "r", "A", "sa", "z", "ab", "an", "ai", "ae", "ba", "pa", "da", "l", "aj", "u", "aw", "e", "am", "x", "y", "dc", "aa", "f", "as", "o", "ad"], "b": ["ca", "n", "bb", "p", "s", "bd", "r", "j", "ab", "ib", "bc", "ba", "B", "l", "u", "bi", "e", "fb", "bs", "x", "h", "y", "v", "f", "k", "o", "sb", "g", "be", "cb", "ad", "rb"], "c": ["w", "cs", "ca", "n", "code", "p", "C", "s", "ac", "cc", "m", "cn", "r", "t", "z", "lc", "bc", "ci", "cm", "l", "u", "e", "ad", "ce", "x", "h", "y", "dc", "mc", "nc", "cp", "f", "uc", "cu", "o", "cy", "g", "k"], "d": ["dd", "w", "n", "di", "p", "s", "m", "cd", "j", "r", "t", "z", "dt", "ds", "in", "D", "da", "l", "u", "e", "ad", "dp", "x", "h", "dx", "id", "y", "v", "dc", "f", "o", "k"], "str": ["prev", "list", "kr", "w", "br", "cur", "err", "ar", "char", "string", "star", "step", "tr", "p", "sr", "name", "code", "s", "result", "strip", "exp", "rev", "r", "txt", "pass", "stri", "t", "this", "st", "func", "arr", "lc", "dr", "gr", "ocr", "tree", "doc", "obj", "Str", "data", "fr", "u", "out", "x", "text", "pr", "print", "style", "progress", "hr", "vol", "div", "f", "sp", "STR", "iter", "strings", "wr", "spec"], "i": ["gi", "xi", "adi", "I", "is", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "index", "j", "chi", "z", "ini", "ai", "phi", "ji", "li", "ci", "ti", "zi", "l", "u", "bi", "e", "iu", "x", "pi", "fi", "id", "ip", "y", "v", "f", "o"], "twin": ["wwin", "wwinn", "rewinner", "whoin", "Twin", "wwoin", "rewinn", "twinn", "whinn", "rewout", " twoin", "twinner", " twout", "twout", " twinn", "Twout", "rewin", "Twinn", "wwinner", " twinner", "whins", "twoin", "twins", "wwout", "whin", "wwins", " twins", "rewoin", "Twins", "rewins"], "awin": ["awino", "wwin", "afi", "rewinc", " awino", "afin", "ewi", "hawinc", " awoin", "afins", "avalin", "awins", "rewout", "ewine", "avaloin", "owine", "awi", "awIn", "hawout", "rewin", "hawin", " awIn", "ewin", "owin", "wwout", "hawoin", "awout", "wwins", "awoin", "ewins", "hawIn", "avalino", "awine", "awinc", "rewins", "hawino", "wwinc", "owins", "afine", "avalIn", "owi", "hawins"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner scan = new java.util.Scanner(System.in);\\n        long a = scan.nextLong();\\n        long b = scan.nextLong();\\n        long k = scan.nextLong();\\n        \\n        if(a >= k){\\n            a = a - k;\\n        }else{\\n            b = b - k + a; \\n            a = 0;\\n        }\\n        if(a < 0 || b < 0){\\n            a = 0;\\n            b = 0;\\n        }\\n        System.out.println(a + \" \" + b);\\n    }\\n}", "target": "128", "substitutes": {"scan": ["chan", "span", "begin", "gen", "search", "n", "rank", "er", "connect", "query", "ner", "log", "sc", "batch", "na", "r", "skip", "system", "sync", "an", "report", "ann", "south", "fan", "in", "kin", "nn", "all", "pack", "sign", "read", "bug", "se", "l", "en", "conn", "can", "out", "cat", "ans", "look", "ry", "slice", "feed", "clean", "Scan", "walk", "watch", "ignore", "reader", "parse", "gram"], "a": ["sta", "i", "w", "fa", "ak", "ga", "ca", "n", "p", "oa", "aaa", "ac", "alpha", "m", "na", "j", "A", "sa", "ea", "z", "an", "ab", "ai", "ae", "ba", "aka", "pa", "da", "aj", "u", "aw", "c", "e", "af", "area", "am", "x", "la", "asa", "mA", "art", "va", "y", "offset", "api", "aa", "f", "as", "auto", "ama", "au", "ad"], "b": ["n", "base", "bb", "p", "lb", "nb", "bd", "eb", "zb", "j", "r", "abb", "wb", "ab", "ib", "bar", "bc", "ba", "ob", "pa", "B", "l", "u", "bi", "c", "mb", "e", "fb", "ad", "bs", "h", "x", "d", "y", "db", "v", "beta", "aa", "bf", "ok", "f", "o", "auto", "sb", "be", "cb", "i", "rb"], "k": ["K", "ks", "w", "ak", "n", "p", "m", "j", "r", "z", "sk", "length", "kk", "ke", "q", "l", "u", "c", "e", "ad", "h", "x", "id", "d", "y", "v", "key", "ok", "f", "o", "g", "i"]}}
{"code": "import java.io.*;\\nimport java.util.Arrays;\\nclass Main{\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tint i;\\n\t\tint n;\\n\t\tString str;\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tfor(i=1; ;i++){\\n\t\t\tstr = in.readLine();\\n\t\t\tn = Integer.parseInt(str);\\n\t\t\tif(n==0) break;\\n\t\t\tSystem.out.println(\"Case \"+(i)+\": \"+n);\\n\t\t}\\n\t}\\n}", "target": "97", "substitutes": {"i": ["gi", "xi", "I", "is", "io", "si", "di", "ie", "p", "line", "oi", "m", "ii", "index", "j", "t", "ni", "counter", "z", "ini", "b", "ind", "ai", "multi", "li", "ci", "ti", "iter", "zi", "l", "qi", "u", "bi", "c", "e", "iu", "eni", "type", "x", "pi", "id", "uri", "d", "y", "v", "ix", "slice", "key", "f", "ui", "o", "info", "start", "k"], "n": ["nu", "number", "nr", "w", "pos", "p", "nb", "s", "ner", "m", "nt", "nor", "na", "ne", "j", "index", "ln", "t", "ni", "none", "z", "an", "sn", "mn", "N", "count", "inner", "nn", "no", "ns", "not", "l", "u", "en", "c", "fn", "e", "init", "num", "out", "x", "h", "dn", "d", "ng", "y", "v", "len", "nc", "f", "o", "nl", "g", "gn", "k"], "str": ["kr", "br", "pos", "cur", "err", "reader", "char", "string", "pt", "rs", "name", "p", "line", "er", "tr", "sr", "ner", "enc", "r", "j", "pass", "stri", "t", "z", "st", "arr", "sl", "sn", "b", "dr", "ld", "cr", "gr", "input", "Str", "data", "iter", "fr", "cl", "l", "u", "c", "e", "out", "text", "pr", "id", "d", "nc", "div", "f", "sp", "STR", "k", "wr"], "in": ["exec", "din", "is", "err", "In", "bin", "line", "s", "socket", "ac", "user", "log", "part", "serv", "r", "t", "resource", "ini", "b", "doc", "ins", "rin", "input", "readable", "rec", "data", "min", "read", "l", "stream", "init", "conn", "out", "or", "lin", "source", "id", "inc", "d", "con", "gin", "again", "nin", "login", "connection", "ex", "f", "as", "fd", "reader", "temp", "IN", "inn"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tsc.close();\\n\\n\t\tif (A >= 10 || B >= 10) {\\n\t\t\tSystem.out.println(\"-1\");\\n\t\t} else {\\n\t\t\tSystem.out.println(A * B);\\n\t\t}\\n\t}\\n}\\n", "target": "58", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "search", "cer", "sr", "cc", "ner", "tc", "soc", "enc", "sync", "cr", "sq", "osc", "ec", "system", "lc", "cont", "coll", "bc", "sci", "ss", "cus", "cm", "cl", "scope", "se", "c", "Sc", "asc", "sche", "ct", "cv", "scan", "nc", "uc", "sh", "sp", "sb", "parser", "SC"], "A": ["Alpha", "API", "a", "U", "AST", "I", "HA", "AC", "As", "AF", "AB", "Ca", "C", "GA", "AM", "Array", "AMI", "PA", "LA", "AA", "RA", "Adam", "IA", "AW", "Y", "NA", "OA", "L", "MA", "SA", "X", "AD", "Area", "EA", "AR", "TA", "mA", "S", "P", "BA", "ID", "DA", "AP", "FA", "CA"], "B": ["O", "E", "I", "BS", "Ab", "VB", "AB", "C", "T", "BF", "BE", "NB", "SB", "TB", "MB", "G", "b", "N", "QB", "R", "BC", "GB", "D", "UB", "CB", "Y", "DB", "L", "IB", "X", "LB", "AR", "Bs", "BA", "OB", "P", "F", "V", "EB", "BB", "AP", "BI", "WB", "BER"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n      Scanner scan = new Scanner(System.in);\\n      int n = scan.nextInt();\\n      String a = scan.next();\\n      String b = scan.next();\\n    StringBuilder sb = new StringBuilder();\\n    for (int i = 0; i < n; i++){\\n      if(!a.isEmpty()){\\n          sb.append(a.charAt(i));\\n      }\\n      if(!b.isEmpty()){\\n          sb.append(b.charAt(i));\\n      }\\n    }\\n    System.out.println(sb.toString());\\n  }\\n}", "target": "200", "substitutes": {"scan": ["chan", "pin", "search", "ser", "non", "rou", "sr", "er", "see", "connect", "query", "ner", "sc", "na", "r", "ln", "sync", "skip", "system", "an", "ann", "report", "fan", "south", "in", "kin", "match", "nn", "apply", "san", "read", "se", "sys", "l", "en", "conn", "can", "filter", "cat", "ans", "look", "feed", "clean", "server", "Scan", "nl", "walk", "watch", "reader", "iter", "parse", "gram"], "n": ["network", "w", "ny", "p", "nb", "s", "ner", "m", "j", "r", "t", "z", "N", "in", "nn", "ns", "l", "u", "en", "c", "fn", "e", "x", "h", "adj", "d", "y", "v", "len", "nc", "f", "o", "net", "k"], "a": ["sta", "fa", "ga", "ca", "au", "p", "s", "ac", "alpha", "aaa", "ada", "A", "sa", "ao", "ea", "qa", "an", "ab", "cha", "apa", "ae", "ba", "ata", "aka", "pa", "da", "ava", "u", "audio", "area", "am", "la", "asa", "art", "va", "api", "za", "aa", "as", "ama", "ad"], "b": ["bas", "hub", "job", "bin", "base", "bb", "gb", "erb", "nb", "lb", "bd", "s", "eb", "bing", "buff", "wb", "abb", "abs", "ab", "ib", "pb", "url", "ba", "ob", "B", "bi", "mb", "fb", "bs", "bis", "usb", "obb", "db", "beta", "emb", "bf", "f", "business", "orb", "cb", "rb"], "sb": ["fab", "bj", "xb", "si", "sf", "bb", "gb", "s", "lb", "nb", "bd", "eb", "sth", "zb", "SB", "bg", "sup", "sa", "wb", "abb", "bp", "sv", "sq", "sk", "ib", "ls", "pb", "bc", "sg", "bsp", "amb", "nn", "mb", "bi", "fb", "src", "bs", "usb", "bt", "bps", "sm", "obb", "kb", "bh", "stab", "db", "bf", "BB", "sp", "cb", "bl", "rb"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "t", "ni", "z", "ini", "mu", "isi", "ai", "ji", "multi", "li", "ti", "ci", "data", "zi", "ri", "qi", "u", "bi", "c", "e", "ori", "it", "eni", "iu", "pi", "x", "fi", "id", "ip", "uri", "d", "v", "ix", "slice", "vi", "key", "f", "ui", "o", "info"]}}
{"code": "\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String args[]) {\\n\\n    Scanner sc = new Scanner(System.in);\\n\\n    int N = sc.nextInt();\\n    int H[] = new int[N];\\n    int count = 0;\\n    List<Integer> list = new ArrayList<Integer>();\\n\\n    for (int i = 0; i < N; i++) {\\n      H[i] = sc.nextInt();\\n    }\\n\\n    for (int i = 0; i < N - 1; i++) {\\n      if (H[i] >= H[i + 1]) {\\n        count++;\\n      } else {\\n        list.add(count);\\n        count = 0;\\n      }\\n\\n      if (i == N - 2) {\\n        list.add(count);\\n      }\\n\\n    }\\n\\n    int max = 0;\\n    for (int i = 0; i < list.size(); i++) {\\n      if (max <= list.get(i)) {\\n        max = list.get(i);\\n      }\\n    }\\n\\n    System.out.println(max);\\n\\n    sc.close();\\n  }\\n}\\n", "target": "187", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "screen", "sr", "s", "cc", "ner", "sec", "tc", "soc", "enc", "loc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "cont", "coll", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sem", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "SC", "con", "co"], "N": ["O", "K", "Part", "I", "U", "n", "Ns", "Len", "C", "T", "Ni", "J", "NT", "Ne", "A", "W", "NN", "Size", "Q", "R", "D", "Y", "NA", "Z", "Num", "B", "L", "NI", "M", "NC", "X", "No", "NE", "S", "P", "F", "Node", "V", "Count", "NS", "Number", " n"], "H": ["O", "K", "U", "E", "I", "HA", "He", "DH", "J", "C", "T", "Host", "RH", "Length", "NH", "G", "Max", "HP", "W", "HS", "Q", "R", "D", "Y", "Hi", "Ha", "Z", "L", "M", "h", "rh", "X", "MH", "HK", "HH", "Head", "P", "F", "HC", "OH", "HD", "V", "Count", "HM", "EH", "Ch", "HB", "SH", "CH", "HI"], "count": ["number", "parent", "weight", "n", "code", "base", "name", "p", "group", "nt", "batch", "part", "index", "counter", "b", "coll", "length", "more", "level", "error", "size", "cache", "total", "large", "full", "child", "carry", "pool", "c", "type", "last", "h", "limit", "keep", "sum", "id", "depth", "left", "offset", "Count", "len", "key", "add", "info", "found", "call", "start", "check"], "list": ["chain", "test", "per", "table", "load", "parent", "live", "n", "base", "group", "set", "loop", "low", "result", "diff", "batch", "part", "cli", "index", "default", "null", "this", "later", "lc", "queue", "tree", "coll", "cont", "lv", "now", "dict", "li", "size", "cache", "all", "stack", "lock", "cl", "full", "l", "L", "pool", "listed", "x", "limit", "h", "keep", "source", "left", "pull", "ll", "pre", "rest", "array", "view", "LIST", "we", "bl"], "i": ["gi", "xi", "I", "io", "si", "n", "ie", "di", "ami", "p", "oi", "cli", "abi", "ii", "hi", "index", "j", "chi", "ni", "z", "mini", "ini", "mu", "b", "lc", "counter", "ind", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "data", "min", "zi", "l", "qi", "u", "bi", "c", "ri", "e", "init", "iu", "it", "ori", "mi", "x", "pi", "h", "fi", "next", "id", "ip", "uri", "y", "ix", "v", "api", "slice", "key", "f", "ui", "o", "info", "start"], "max": ["chain", "number", "force", "parent", "core", "height", "huge", "rank", "base", "step", "MAX", "wrap", "line", "alpha", "maximum", "index", "default", "with", "Max", "work", "always", "conf", "length", "end", "size", "total", "cache", "no", "min", "q", "ax", "range", "top", "init", "last", "limit", "master", "self", "sum", "id", "scale", "depth", "right", "mod", "rest", "orig", "div", "active", "info", "parse", "k"]}}
{"code": "import java.util.*;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String s = sc.next();\\n        String t = sc.next();\\n\\n        for(int i = 0;i<n;i++){\\n            System.out.print(s.charAt(i)+\"\"+t.charAt(i));\\n        }\\n        \\n    }\\n}\\n", "target": "200", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "search", "sr", "ctx", "cc", "ner", "sync", "osc", "cr", "sq", "lc", "cont", "coll", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "se", "c", "Sc", "asc", "sche", "sem", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "sb", "SC"], "n": ["network", "number", "w", "p", "nb", "ner", "m", "nor", "ne", "j", "r", "ln", "ni", "z", "b", "N", "in", "nn", "ns", "l", "u", "en", "c", "num", "e", "fn", "conn", "x", "d", "y", "v", "nin", "len", "nc", "f", "o", "net", "k"], "s": ["a", "qs", "cs", "si", "string", "sf", "p", "os", "r", "sets", "sv", "sl", "ls", "b", "ds", "ins", "in", "ss", "ws", "l", "u", "c", "ses", "e", "su", "ts", "S", "ssl", "v", "f", "services", "as", "sb", "g", "strings"], "t": ["test", "token", "w", "target", "at", "pt", "tr", "p", "T", "m", "r", "txt", "te", "st", "b", "tt", "unt", "l", "u", "c", "it", "x", "ts", "ta", "tm", "ty", "rt", "d", "qt", "str", "y", "v", "tf", "f", "o", "temp", "wt"], "i": ["xi", "gi", "I", "io", "si", "di", "p", "oi", "m", "ii", "chi", "j", "ini", "b", "ai", "length", "multi", "ji", "li", "ci", "ti", "zi", "ri", "l", "u", "bi", "qi", "e", "iu", "eni", "esi", "mi", "pi", "x", "h", "fi", "id", "uri", "ip", "d", "v", "ix", "slice", "key", "f", "ui", "o", "start", "k"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int M = sc.nextInt();\\n        int[] L = new int[M];\\n        int[] R = new int[M];\\n        int max=N+1;\\n        int min=0;\\n        for(int i=0; i<M; i++){\\n            L[i]=sc.nextInt();\\n            R[i]=sc.nextInt();\\n            min = Math.max(min,L[i]);\\n            max = Math.min(max,R[i]);\\n        }\\n        //int K = sc.nextInt();\\n        //long N = sc.nextLong();\\n        int res = Math.max(max-min+1,0);\\n        \\n\\n        \\n        System.out.println(res);\\n        }\\n    }", "target": "124", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "desc", "cs", "ser", "search", "sub", "cer", "cor", "screen", "ctx", "cli", "cc", "ner", "tc", "sec", "soc", "cam", "enc", "loc", "sync", "system", "cr", "osc", "ec", "lc", "cont", " scr", "bc", "sci", "ss", "cl", "scope", "se", "c", "src", "Sc", "asc", "or", "sche", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "server", "sp", "sb", "parser", "parse", "SC"], "N": ["O", "K", "U", "E", "I", "Part", "n", "J", "C", "T", "Ni", "NB", "G", "Max", "NN", "Size", "D", "H", "Y", "Z", "B", "Num", "Min", "X", "No", "S", "P", "F", "V", "NS"], "M": ["O", "K", "U", "I", "E", "n", "PIN", "J", "C", "T", "OM", "m", "JM", "Mo", "G", "DM", "Q", "D", "H", "Y", "MS", "B", "LM", "X", "MT", "MM", "S", "P", "F", "MD", "V", "MN", "Mi", "RM", "CM", "MC"], "L": ["RL", "U", "VL", "I", "Li", "LU", "TL", "XL", "CL", "FL", "OL", "LA", "LT", "HL", "Y", "Lo", "EL", "LI", "l", "UL", "IL", "LM", "LL", "LD", "X", "LR", "DL", "LB", "SL", "PL", "ML", "LO", "NL", "LS", "BL", "Lu"], "R": ["RL", "U", "Res", "NR", "GR", "RH", "T", "CR", "J", "C", "RS", "r", "G", "RP", "Max", "W", "RA", "Q", "Rs", "MR", "D", "H", "Y", "B", "HR", "Range", "X", "SR", "AR", "RE", "Rh", "RC", "Ra", "P", "RT", "S", "RO", "V", "DR", "RN", "RR", "RM"], "max": ["pop", "w", " Max", "ca", "base", "rank", "step", "p", "MAX", "wrap", "diff", "alpha", "average", "part", "peak", "cross", "r", "default", "with", "none", "z", "Max", "std", "conf", "edge", "mean", "end", "size", "total", "no", "range", "ax", "nd", "point", "between", "c", "Min", "ad", "last", "out", "limit", "x", "sum", "id", "scale", "right", "mod", "cat", "rest", "slice", "div", "mad", "crop", "act", "patch", "az", "from", "view", "start", "k", "pad"], "min": ["MIN", "span", "minimum", "pos", "initial", "weight", "sub", "n", "value", "code", "step", "space", "p", "MAX", "sort", "diff", "average", "m", "part", "first", "minus", "index", "r", "default", "skip", "mini", "in", "lower", "prefix", "mean", "rand", "size", "small", "sign", "range", "Min", "init", "limit", "sum", "scale", "Mini", "left", "pre", "val", "slice", "key", "mins", "start", "mid"], "i": ["gi", "xi", "I", "io", "si", "n", "di", "ie", "p", "oi", "cli", "s", "m", "abi", "ii", "hi", "part", "chi", "j", "ni", "z", "ini", "b", "lc", "ai", "multi", "li", "ci", "ti", "zi", "l", "qi", "u", "ri", "c", "bi", "e", "ori", "iu", "it", "mi", "x", "pi", "fi", "ip", "uri", "y", "v", "slice", "ix", "f", "ui", "o", "info"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[]args){\\n      Scanner sc = new Scanner(System.in);\\n\\n      long a = sc.nextLong();\\n      long b = sc.nextLong();\\n      long k = sc.nextLong();\\n\\n\\n      if (a<k) {\\n        System.out.print(0);\\n        System.out.print(\" \");\\n        if (b-(k-a)<0) {\\n          System.out.print(0);\\n          System.out.println();\\n          System.exit(0);\\n        }else{\\n          System.out.print(b-(k-a));\\n          System.out.println();\\n          System.exit(0);\\n        }\\n      }else{\\n        System.out.print(a-k);\\n        System.out.print(\" \");\\n        System.out.print(b);\\n        System.out.println();\\n      }\\n\\n    }\\n}\\n", "target": "128", "substitutes": {"sc": ["pc", "esc", "sw", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "ctx", "cam", "cc", "ner", "tc", "soc", "enc", "sync", "system", "osc", "cr", "sq", "ec", "lc", "cont", "bc", "sci", "ss", "cus", "scope", "se", "c", "Sc", "asc", "out", "sche", "sem", "ct", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "parse", "SC"], "a": ["sta", "w", "ak", "ga", "ca", "n", "p", "aaa", "alpha", "ac", "m", "s", "na", "ada", "A", "sa", "an", "ab", "ai", "aux", "ae", "ba", "aka", "pa", "da", "l", "aj", "u", "c", "e", "af", "area", "am", "x", "ka", "la", "d", "y", "va", "aa", "f", "as", "auto", "ama", "au", "ad"], "b": ["ga", "n", "base", "bb", "p", "nb", "m", "eb", "j", "A", "r", "null", "ab", "pb", "ba", "ob", "B", "l", "u", "bi", "c", "e", "ad", "fb", "bs", "x", "h", "d", "y", "db", "v", "aa", "bf", "f", "BB", "o", "auto", "sb", "g", "cb", "i", "rb"], "k": ["K", "ks", "w", "ak", "n", "p", "m", "j", "ki", "z", "sk", "an", "ek", "kk", "ke", "ik", "q", "l", "u", "c", "e", "ad", "h", "x", "dk", "kw", "id", "d", "y", "kid", "v", "kick", "key", "ko", "ok", "f", "o", "g", "i"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        String S = sc.next();\\n\\n        int forward = 0;\\n        int backward = 0;\\n\\n        for (int i = 0; i < S.length(); i++) {\\n            if (S.charAt(i) == (48 + i % 2 )) {\\n                forward++;\\n            }\\n            if (S.charAt(i) != (48 + i % 2)) {\\n                backward++;\\n            }\\n        }\\n\\n        System.out.println(Math.min(forward, backward));\\n    }\\n}\\n", "target": "146", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "desc", "cur", "search", "sub", "cer", "cc", "ner", "sec", "acc", "enc", "sync", "system", "cr", "osc", "ec", "lc", "class", " scr", "bc", "sci", "ss", "cl", "scope", "se", "c", "Sc", "asc", "or", "text", "str", " SC", "scan", "nc", " Sc", "uc", "anc", "sp", "g", "SC"], "S": ["O", "SE", "U", "Part", "Si", "IS", "BS", "I", "Su", "II", "Sample", "SU", "SP", "T", "SS", "s", "RS", "SO", "SN", "VS", "Service", "HS", "TS", "ss", "TEXT", "OSS", "SM", "FS", "L", "Single", "SA", "JSON", "SER", "SR", "SI", "SL", "WS", "DS", "P", "Text", "F", "Standard", "NS", "Is", "GS", "OS", "ASC", "Sl", "ST", "STR", "SH", "SC"], "forward": ["correct", "reverse", "west", "positive", "accept", "weight", "fill", "initial", "higher", "oward", "linear", "sort", "maximum", "width", "first", "forth", "pass", "length", "foreign", "prefix", "wards", "flower", "lower", "attack", "into", "range", "full", "central", "outer", "complete", "Forward", "ahead", "north", "western", "ward", "single", "next", "respect", "control", "gain", "continue", "path", "down", "back", "current", "plus", "until", "strike"], "backward": [" backforward", "Backend", "frontwards", "Backwards", "frontward", " backwards", "backforward", "Backward", "Backforward", "Backword", "backwards", " backword", " backend", "frontend", "backword", "backend", "frontword", "frontforward"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "ie", "p", "oi", "s", "abi", "ii", "hi", "index", "j", "chi", "t", "uli", "z", "ini", "mu", "b", "lc", "ai", "in", "length", "inner", "multi", "ji", "li", "ci", "ti", "phi", "zi", "l", "ri", "u", "bi", "c", "qi", "e", "ori", "iu", "eni", "pi", "x", "h", "fi", "id", "ip", "uri", "d", "v", "ix", "slice", "f", "o", "ui", "info", "k"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.HashSet;\\nimport java.util.List;\\nimport java.util.Scanner;\\nimport java.util.Set;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n\\n//    \tFile file = new File(\"test.txt\");\\n//    \tScanner sc = new Scanner(file);\\n    \tScanner sc = new Scanner(System.in);\\n    \tint n = sc.nextInt();\\n    \tString[] ary = new String[n];\\n    \tList<String> ans = new ArrayList<String>();\\n    \tfor(int i = 0; i < n; i++){\\n    \t\tString s = sc.next();\\n    \t\tary[i] = s;\\n    \t}\\n    \tsc.close();\\n    \tArrays.sort(ary);\\n    \tSet<String> set = new HashSet<String>(Arrays.asList(ary));\\n    \tif(ary.length == set.size()){\\n    \t\tfor(int i = 0; i < ary.length; i++){\\n        \t\tSystem.out.println(ary[i]);\\n        \t}\\n    \t\treturn;\\n    \t}\\n    \tint maxcnt = 0;\\n    \tint cnt = 0;\\n    \tans.add(ary[0]);\\n    \tfor(int i = 0; i < n-1; i++){\\n    \t\tif(ary[i].equals(ary[i+1])){\\n    \t\t\tcnt++;\\n    \t\t}else{\\n    \t\t\tcnt = 0;\\n    \t\t}\\n    \t\tif(maxcnt == cnt){\\n    \t\t\tans.add(ary[i]);\\n    \t\t}else if(maxcnt < cnt){\\n    \t\t\tmaxcnt = cnt;\\n    \t\t\tans.clear();\\n    \t\t\tans.add(ary[i]);\\n    \t\t}\\n    \t}\\n    \tfor(int i = 0; i < ans.size(); i++){\\n    \t\tSystem.out.println(ans.get(i));\\n    \t}\\n    }\\n}", "target": "235", "substitutes": {}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        final Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        String s = in.next().trim();\\n        String t = in.next().trim();\\n        int sCount = in.nextInt();\\n        int tCount = in.nextInt();\\n        String u = in.next();\\n        if (s.equals(u)) {\\n            sCount -= 1;\\n        } else {\\n            tCount -= 1;\\n        }\\n        System.out.println(sCount + \" \" + tCount);\\n    }\\n}\\n", "target": "155", "substitutes": {"in": ["a", "exec", "din", "is", "pin", "get", "err", "In", "gen", "bin", "n", "line", "er", "cli", "ac", "m", "log", "socket", "loader", "serv", "r", "pass", "this", "resource", "ini", "thin", "doc", "ins", "rin", "inside", "inner", "input", "kin", "into", "data", "iter", "win", "min", "l", "c", "init", "conn", "it", "out", "lin", "source", "id", "inc", "con", "str", "gin", "again", "nin", "login", "isin", "scan", "ex", "connection", "f", "arin", "as", "g", "reader", "i", "IN", "inn"], "s": ["a", "is", "w", "si", "n", "sf", "p", "m", "os", "r", "sing", "sv", "sl", "st", "b", "ds", "ins", "ss", "l", "c", "e", "ses", "ts", "su", "xs", "S", "d", "ps", "v", "f", "as", "o", "sb", "g", "i", "strings"], "t": ["a", "w", "n", "string", "name", "p", "tr", "T", "tc", "m", "r", "b", "l", "c", "it", "type", "x", "ts", "h", "out", "text", "str", "y", "v", "f", "g", "i", "ur"], "sCount": ["pForce", "tsCast", "stringsBase", " sBase", "stringsDiv", " sDeep", "tsCount", "tsForce", "sLen", "scount", " scount", "pCast", "psCount", "sCast", "pcount", "tscount", " sLen", "stringsLen", " sDiv", "psDeep", "ucount", "sDiv", "uDiv", " sCast", "pscount", "uCount", " sForce", "sForce", "uBase", "pCount", "sDeep", "sBase", "uLen", "uDeep", "stringsCount"], "tCount": ["pCode", "tsNumber", "tsCounter", "tCode", "pCounter", "tsCode", "tsCount", " tcount", "scount", "tFlow", " tCode", "tcount", " tNumber", "pcount", "sCode", "TCounter", "pFlow", "tSize", "TNumber", " tFlow", "tCounter", "pSize", "rtcount", "rtFlow", "tNumber", "pCount", "rtCount", " tSize", "rtSize", " tCounter", "TCount", "sCounter", "TCode"], "u": ["nu", "U", "n", "string", "p", "m", "uv", "ul", "b", "bu", "l", "c", "iu", "ou", "out", "su", "tu", "id", "ru", "un", "uu", "v", "uid", "ut", "f", "cu", "us", "ui", "lu", "up", "o", "i", "ur"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main{\\n\\n\tpublic static void main(String[] args) throws Exception{\\n\t\tint num = 998244353;\\n\\n\t\t// TODO Auto-generated method stub\\n \t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\\n \t\tPrintWriter out = new PrintWriter(System.out);\\n \t\tint n = Integer.parseInt(bf.readLine());\\n \t\tArrayList<Integer> array = new ArrayList<Integer>();\\n \t\tint min = Integer.MAX_VALUE;\\n \t\tStringTokenizer st = new StringTokenizer(bf.readLine());\\n \t\tfor(int i = 0;i<n;i++){\\n \t\t\tarray.add(Integer.parseInt(st.nextToken()));\\n \t\t}\\n \t\tfor(int i = 1;i<=100;i++){\\n \t\t\tint sum = 0;\\n \t\t\tfor(int j= 0;j<array.size();j++){\\n \t\t\t\tsum+= (array.get(j)-i)*(array.get(j)-i);\\n \t\t\t}\\n \t\t\tmin = Math.min(sum,  min);\\n \t\t}\\n \t\t\\n \t\t\\n \t\tout.println(min);\\n\t \t\t\\n \t\tout.close();\\n \t\t\\n \t\t\\n \t\t\\n \t}\\n}\\n \t\\n \\n//StringJoiner sj = new StringJoiner(\" \"); \\n//sj.add(strings)\\n//sj.toString() gives string of those stuff w spaces or whatever that sequence is\\n\\n \t\t\\n \t\t\\n \t\t\\n \t\t\\n\t\\n\\n\\n", "target": "17", "substitutes": {"num": ["nu", "number", "pid", "NUM", "msg", "gen", "bin", "n", "name", "nb", "result", "lang", "counter", "class", "in", "proc", "error", "obj", "Num", "init", "out", "id", "orig", "mem", "i", "con", " number"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        final Scanner sc = new Scanner(System.in);\\n        final long A = Long.parseLong(sc.next());\\n        final long B = Long.parseLong(sc.next());\\n        final long K = Long.parseLong(sc.next());\\n        sc.close();\\n\\n        long a = A;\\n        long b = B;\\n        long k = K;\\n        if (a>=k) {\\n            a -= k;\\n            k = 0;\\n        } else {\\n            k -= a;\\n            a = 0;\\n        }\\n        if (b>=k) {\\n            b -= k;\\n            k = 0;\\n        } else {\\n            k -= b;\\n            b = 0;\\n        }\\n\\n        System.out.println(a + \" \" + b);\\n    }\\n}", "target": "128", "substitutes": {"sc": ["pc", "esc", "rc", "ch", "cur", "cs", "ser", "ca", "search", "cer", "sf", "sr", "ctx", "cam", "cli", "ner", "result", "sec", "soc", "tc", "exp", "cc", "sync", "system", "cr", "osc", "lc", "cont", "coll", "bc", "sci", "cle", "ss", "cus", "cl", "scope", "se", "l", "c", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", "uc", "anc", "sh", "sp", "reader", "parser", "parse", "SC"], "A": ["API", "Alpha", "U", "AC", "As", "Na", "AB", "Ca", "C", "alpha", "LA", "AA", "Ka", "AAA", "AS", "AW", "H", "Y", "NA", "L", "Java", "Az", "Ar", "AR", "mA", "Ma", "BA", "App", "P", "Ak", "Am", "At", "CA"], "B": ["O", "E", "I", "BS", "AB", "C", "BF", "BE", "BR", "Blue", "Ub", "NB", "SB", "TB", "G", "PB", "N", "QB", "R", "BC", "D", "UB", "BU", "DB", "L", "BBC", "M", "IB", "LB", "Bs", "BA", "OB", "F", "P", "BB", "Bur", "BL", "BER", "WB", "Ber", "BI", "Gb"], "K": ["U", "E", "KR", "J", "C", "Sk", "T", "KB", "SK", "G", "KA", "W", "N", "Q", "R", "D", "H", "Y", "KK", "Z", "L", "M", "PK", "X", "HK", "S", "P", "F", "V", "Ku", "Ke", "VK"], "a": ["sta", "fa", "ak", "ga", "ca", "at", "au", "p", "oa", "ia", "ac", "alpha", "s", "na", "sa", "ea", "ma", "an", "ab", "ai", "ae", "ah", "ba", "aka", "da", "aj", "u", "aw", "e", "af", "area", "am", "x", "la", "mA", "art", "va", "y", "api", "aa", "ack", "as", "ama", "i", "ad"], "b": ["bas", "br", "xb", "ak", "job", "n", "base", "bb", "p", "lb", "bd", "m", "eb", "bot", "app", "zb", "j", "r", "wb", "abb", "bp", "z", "ab", "ib", "bc", "url", "ba", "ob", "boot", "l", "u", "mb", "bi", "c", "e", "ad", "fb", "bs", "h", "d", "y", "db", "v", "bf", "aa", "f", "BB", "o", "sb", "be", "cb", "i", "rb"], "k": ["kn", "ask", "ks", "w", "ak", "n", "p", "mk", "unk", "s", "ac", "m", "uk", "j", "r", "zero", "ki", "none", "z", "sk", "work", "ek", "ck", "kk", "ke", "ik", "q", "l", "u", "c", "e", "ad", "x", "ka", "dk", "keep", "kw", "id", "d", "y", "kid", "v", "kick", "off", "key", "ko", "ok", "f", "o", "auto", "g", "i", "check"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        TaskB solver = new TaskB();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskB {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n        \tint n = in.nextInt();\\n        \tint a[] = new int [n];\\n        \tfor (int i = 0; i < a.length; i++) {\\n        \t\ta[i] = in.nextInt();\\n        \t}\\n        \t\\n        \tint num = 0;\\n        \tboolean flag = true;\\n        \twhile (flag) {\\n        \t\tflag = false;\\n        \t\tfor (int i = a.length - 1; i > 0; i --) {\\n        \t\t\tif (a[i] < a[i-1]) {\\n        \t\t\t\tint t = a[i];\\n        \t\t\t\ta[i] = a[i-1];\\n        \t\t\t\ta[i-1] = t;\\n        \t\t\t\tflag = true;\\n        \t\t\t\tnum += 1;\\n        \t\t\t}\\n        \t\t}\\n        \t}\\n        \t\\n        \tString s = new String();\\n        \tfor (int i = 0; i < a.length; i++) {\\n        \t\ts = s.concat(Integer.toString(a[i]));\\n        \t\tif (i + 1 != a.length) s = s.concat(\" \");\\n        \t}\\n        \t\\n        \tout.println(s);\\n        \tout.println(num);\\n        }\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n    }\\n}", "target": "170", "substitutes": {"inputStream": [" inputFile", "inputStreamer", "outputFile", "outputReader", " inputSteam", "inputFile", "outputStreamer", "inputSteam", "learningStreamer", "learningstream", "outputstream", "learningStream", "InputStream", "inputstream", "InputSteam", "InputReader", " inputstream", "inputReader", "InputStreamer", "learningReader", "InputFile", "Inputstream", "outputSteam"], "outputStream": ["controlStreamer", "inputStreamer", "OutputWriter", "controlSteam", "outputWriter", "controlStream", "outputStreamer", "inputSteam", " outputSteam", "OutputStreamer", "controlWriter", "inputWriter", "OutputSteam", " outputStreamer", " outputWriter", "OutputStream", "outputSteam"], "in": ["exec", "din", "pin", "io", "is", "err", "In", "gen", "bin", "request", "arg", "ac", "query", "log", "r", "inn", "this", "resource", "ini", "thin", "ins", "image", "rin", "input", "inner", "inside", "url", "data", "sin", "win", "lock", "read", "min", "vin", "l", "en", "c", "init", "conn", "lin", "source", "id", "inc", "d", "path", "gin", "again", "nin", "login", "isin", "scan", "connection", "info", "IN", "con"], "out": ["io", "err", "word", "outside", "user", "outs", "copy", "b", "inner", "data", "page", "outer", "password", "pool", "print", "OUT", "off", "buffer", "array", "call", "view", "window", "w", "bin", "cmd", "string", "name", "p", "line", "write", "socket", "cli", "log", "work", "error", "cache", "conn", "ext", "path", "ex", "o", "wr", "gen", "at", "problem", "output", "input", "object", "scope", "init", "x", "process", "inc", "console", "server", "Out", "exec", "list", "file", "parent", "timeout", "client", "In", "group", "exp", "part", "r", "doc", "writer", "obj", "sum", "v", "again", "connection", "up", "net", "temp"], "solver": ["ssolve", "ssolution", "solution", " solution", "Solve", "ssolving", "solving", " solve", "Solution", "Saver", "ssolver", "Solver", "saver", " saver", " solving", "solve", "Solving", "ssaver"], "testNumber": [" testNo", "TestNumber", "testNum", "TestNumbers", " trialNo", " trialNumber", " trialNumbers", " trialNum", " testNum", "testNo", " testNumbers", "TestNum", "TestNo", "testNumbers"], "n": ["nu", "number", "p", "nb", "nt", "m", "na", "ne", "j", "ni", "z", "sn", "b", "N", "count", "nn", "size", "no", "ns", "l", "u", "c", "en", "e", "x", "d", "y", "len", "nc", "f", "o", "net", "k"], "a": ["missing", "tta", "access", "img", "ga", "address", "ca", "at", "code", "p", "oa", "ua", "aaa", "alpha", "result", "Array", "app", "na", "wa", "sup", "index", "A", "sa", "ea", "qa", "something", "z", "ma", "an", "ab", "action", "b", "work", "aux", "count", "ae", "input", "ba", "ata", "all", "pa", "da", "u", "c", "e", "working", "area", "x", "am", "h", "la", "va", "y", "v", "ha", "za", "aa", "div", "f", "as", "o", "active", "array", "ama", "auto", "g"], "i": ["xi", "I", "io", "si", "di", "index", "mini", "ini", "b", "multi", "page", "iu", "it", "pi", "fi", "id", "ix", "ui", "info", "g", "ie", "p", "cli", "ii", "ki", "mu", "ind", "ai", "length", "phi", "li", "ik", "u", "mi", "yi", "ip", "uri", "anti", "o", "gi", "ami", "m", "hi", "q", "l", "c", "init", "eni", "my", "x", "api", "oi", "abi", "j", "ni", "z", "ci", "ti", "zi", "ri", "qi", "bi", "e", "source", "d", "y", "v", "slice", "f"], "num": ["nu", "span", "number", "col", "NUM", "pos", "msg", "um", "bin", "gen", "p", "unit", "fun", "nb", "sec", "nt", "index", "valid", "ni", "b", "count", "multi", "nn", "total", "no", "size", "Num", "bug", "u", "en", "term", "x", "sum", "id", "inc", "d", "offset", "uni", "len", "off", "f", "o", "spin", "ui", "temp", "con", "norm"], "flag": [" pig", "neutral", "inline", "focus", "force", "status", " flagged", " bool", " debug", " field", "star", "arg", " bit", "fun", "group", "event", " char", " win", "wait", "log", " continue", "feature", "part", "debug", "valid", "sync", "func", " flags", " count", "start", "count", " group", "kind", "year", " arg", "wave", " force", " bug", "sign", "bug", "child", "binary", "FLAG", "tag", "bit", " wait", "ag", " status", "standard", "leaf", "band", "id", "sum", "cat", "field", "lag", "continue", "offset", " alt", "Flag", "key", " lag", "f", "info", " error", "flags", "mask"], "t": ["et", "the", "w", "at", "pt", "p", "T", "tc", "m", "nt", "j", "te", "z", "b", "ti", "l", "u", "c", "e", "it", "type", "you", "x", "h", "ts", "ta", "id", "d", "y", "v", "f", "o", "k"], "s": ["res", "hs", "results", "qs", "si", "string", "rs", "ops", "p", "ings", "sym", "m", "gs", "os", "r", "sets", "sv", "abs", "js", "ls", "b", "ds", "ins", "sg", "ws", "ss", "its", "ns", "l", "u", "groups", "c", "ses", "e", "h", "su", "ts", "xs", "words", "states", "posts", "S", "ssl", "ps", "str", "es", "sites", "services", "f", "as", "us", "times", "sb", "g", "ans", "strings"], "reader": ["per", "file", "io", "client", "handler", "parser", "er", "socket", "ner", "result", "loader", "worker", "r", "driver", "null", "this", "resource", "report", "writer", "reading", "manager", "input", "inner", "row", "read", "ri", "layer", "e", "ruby", "it", "author", "over", "editor", "or", "filter", "oder", "source", "Reader", "ler", "ry", "slice", "feed", "buffer", "server", "iter"], "tokenizer": ["Tokenize", "Tokenization", "okenizer", "tokenized", " tokenifier", "serialler", "authorner", "initializer", "tokenler", "Tokener", " tokenner", "okenized", "tokener", "okener", " tokenler", "initialize", "Tokenizer", " tokenizing", "tokenize", "serialer", "Tokenler", "initialization", " tokenize", " tokeniter", "tokenifier", "okenization", "serializer", "tokenization", "authoriter", "authorizer", "authorifier", "serialize", "Tokeniter", "tokeniter", "Tokenner", "tokenner", "Tokenifier", "Tokenizing", "okenize", "initializing", "okenner", "initialized", " tokenization", " tokenized", " tokener", "tokenizing"], "stream": ["per", "file", "sw", "client", "Stream", "form", "string", "output", "socket", "user", "loader", "draft", "driver", "channel", "resource", "model", "document", "response", "writer", "length", "port", "input", "context", "serial", "data", "row", "object", "lock", "trans", "pool", "source", "path", "message", "feed", "buffer", "connection", "console", "server", "view"]}}
{"code": "import java.util.Scanner;\\nimport java.util.ArrayList;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tArrayList<Double> data = new ArrayList<>();\\n\t\twhile (true) {\\n\t\t\tint n = sc.nextInt();\\n\t\t\tif (n == 0) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tint sum = 0;\\n\t\t\tint[] s = new int[n];\\n\t\t\tdouble m;\\n\t\t\tdouble a;\\n\t\t\tdouble sigma = 0;\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\ts[i] = sc.nextInt();\\n\t\t\t\tsum += s[i];\\n\t\t\t}\\n\t\t\tm = (double) sum / n;\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tsigma += Math.pow(s[i] - m, 2) / n;\\n\t\t\t}\\n\t\t\ta = Math.sqrt(sigma);\\n\t\t\tdata.add(a);\\n\t\t}\\n\t\tfor (int i = 0; i < data.size(); i++) {\\n\t\t\tSystem.out.printf(\"%f%n\", data.get(i));\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "203", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "ctx", "cc", "ner", "sec", "tc", "enc", "loc", "pl", "sa", "sync", "system", "cr", "osc", "sq", "sk", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sem", "sm", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "SC", "squ"], "data": ["parts", "list", "results", "done", "di", "blocks", "p", "output", "alpha", "result", "wa", "index", "memory", "mu", "response", "input", "multi", "actions", "ata", "size", "cache", "state", "da", "u", "e", "series", "database", "la", "posts", "body", "events", "d", "DATA", "api", "slice", "buffer", "div", "dat", "dates", "change", "o", "as", "array", "info", "nas"], "n": ["network", "span", "w", "p", "nb", "nt", "cn", "ne", "j", "ln", "t", "ni", "z", "mn", "sn", "b", "N", "in", "count", "nn", "size", "no", "ns", "l", "u", "num", "c", "en", "fn", "e", "x", "dn", "d", "y", "v", "len", "nc", "f", "nl", "o", "g", "net", "k"], "sum": ["sav", "ms", "um", "si", "alpha", "average", "diff", "na", "pass", "sa", " summ", "Sum", "skip", "ni", "ma", "mass", "mu", "count", "av", "mean", "ss", "size", "total", "sign", "min", "miss", "se", "u", "num", "am", "out", "sm", "scale", "vol", "sim", "sh", "sp", "net", "g", "parse", "norm"], "s": ["parts", "is", "ks", "ms", "si", "p", "sym", "gs", "os", "sets", "ips", "js", "ls", "b", "ds", "ins", "ss", "size", "ns", "l", "u", "c", "ses", "e", "su", "S", "d", "v", "es", "sites", "services", "f", "o", "seconds", "ans", "strings", "spec"], "m": ["w", "p", "j", "r", "mn", "ma", "z", "an", "mu", "b", "mean", "size", "cm", "l", "u", "c", "e", "M", "am", "x", "h", "mi", "sm", "d", "y", "v", "mc", "mad", "f", "o", "g", "md", "mm"], "a": ["access", "sha", "ga", "ca", "p", "alpha", "ac", "ia", "na", "wa", "A", "sa", "ea", "ma", "an", "b", "ae", "ba", "ata", "pa", "da", "aj", "u", "aw", "c", "e", "am", "area", "ta", "mA", "la", "d", "va", "ha", "aa", "f", "au", "ad"], "sigma": ["sma", "psig", "sigm", " sig", " slambda", "ssalpha", "salpha", "ssma", "pslambda", "psigm", " sma", "pigm", "sig", "ssig", " salpha", "slambda", " sigm", "ssigma", "pig", "pigma", "ssigm", "psigma", "plambda"], "i": ["xi", "I", "io", "si", "di", "hei", "mini", "ini", "b", "inner", "multi", "iu", "it", "pi", "fi", "id", "ix", "ui", "info", "start", "ie", "p", "me", "cli", "ii", "mu", "lc", "ai", "phi", "ji", "li", "ik", "u", "mi", "yi", "ip", "uri", "o", "gi", "load", "ei", "hi", "chi", "l", "c", "init", "eni", "x", "field", "oi", "abi", "j", "r", "qa", "ni", "z", "in", "ci", "ti", "zi", "ri", "qi", "bi", "e", "d", "y", "v", "slice", "f", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = Integer.parseInt(sc.next());\\n\t\tint B = Integer.parseInt(sc.next());\\n\t\tint C = Integer.parseInt(sc.next());\\n\t\tint D = Integer.parseInt(sc.next());\\n\t\tsc.close();\\n\\n\t\twhile (true) {\\n\t\t\tC -= B;\\n\t\t\tif (C <= 0) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tA -= D;\\n\t\t\tif (A <= 0) {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\\n\t}\\n\\n}", "target": "186", "substitutes": {"sc": ["pc", "esc", "fc", "rc", "ch", "core", "desc", "cur", "cs", "ser", "cor", "cer", "sr", "ctx", "cam", "cc", "ner", "tc", "sec", "soc", "app", "cli", "sync", "system", "cr", "osc", "lc", "class", "cont", "coll", "bc", "sci", "ss", "cus", "cl", "scope", "se", "l", "c", "src", "Sc", "cgi", "asc", "or", "sche", "sem", "cv", "str", " SC", "sch", "dc", "mc", "scan", "nc", " Sc", "anc", "uc", "server", "sp", "sb", "parser", "parse", "SC"], "A": ["a", "API", "O", "U", "E", "I", "Alpha", "AC", "As", "CC", "AF", "AB", "Ca", "T", "All", "LA", "AA", "G", "W", "N", "Q", "R", "Both", "Y", "NA", "L", "M", "SA", "AD", "Ar", "AR", "The", "Input", "BA", "S", "P", "F", "Ma", "ID", "d", "And", "AP", "At", "CA"], "B": ["O", "U", "E", "I", "AB", "Ca", "T", "BF", "BE", "BD", "G", "b", "W", "N", "R", "BC", "GB", "UB", "Y", "DB", "L", "M", "Bs", "BA", "OB", "F", "P", "BB", "BI", "WB", "CA"], "C": ["O", "K", "U", "E", "I", "CI", "Cs", "AC", "CC", "CR", "T", "Ca", "CL", "EC", "CF", "G", "N", "W", "Q", "R", "BC", "H", "CB", "Y", "CD", "DC", "L", "Cu", "Cl", "c", "M", "JC", "X", "CP", "S", "F", "P", "V", "VC", "Ch", "CM", "CA"], "D": ["O", "Def", "U", "E", "DH", "J", "T", "FD", "Dou", "BD", "G", "W", "N", "DE", "Q", "DM", "R", "H", "Y", "CD", "DC", "DB", "Z", "L", "DI", "DD", "M", "X", "AD", "S", "d", "F", "P", "DS", "DP", "MD", "V", "DA", "Do", "DF"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String [] args){\\n        Scanner sc =new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int ans =0;\\n        for (Integer i =A;i<=B;i++){\\n            String[] s = i.toString().split(\"\");\\n            if (s[0].equals(s[4]) && s[1].equals(s[3])){\\n                ans++;\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "104", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "com", "cc", "ner", "tc", "sec", "soc", "app", "acc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "class", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "l", "c", "src", "Sc", "asc", "sem", "cv", " SC", "scan", "nc", " Sc", "uc", "anc", "server", "sp", "SC"], "A": ["a", "API", "Alpha", "U", "K", "I", "HA", "Ang", "AC", "As", "AF", "AB", "Ca", "C", "T", "AMI", "LA", "AA", "G", "AI", "N", "H", "Y", "NA", "L", "M", "SA", "X", "AD", "Area", "Ma", "AR", "mA", "Ar", "S", "P", "AP", "At", "An", "CA"], "B": ["O", "K", "E", "I", "C", "T", "BD", "NB", "SB", "G", "b", "N", "Q", "QB", "R", "GB", "D", "UB", "Y", "DB", "L", "M", "X", "LB", "Bs", "BA", "F", "P", "V", "Number", "BB", "BL", "BI", "WB"], "ans": ["a", "ks", "ants", "cons", "cs", "blocks", "AN", "lan", "aps", "ros", "vers", "amps", "offs", "na", "ents", "ANS", "os", "outs", "an", "ann", "ls", "aces", "olds", "ars", "ins", "ds", "lines", "atan", "cas", "ns", "anes", "ches", "acts", "can", "x", "reads", "S", "ats", "eps", "aus", "es", "ions", "aned", "scan", "ons", "anc", "as", "asts", " scans", "ays", "nas", "ras", "rows"], "i": ["a", "gi", "xi", "I", "io", "si", "n", "di", "ie", "p", "oi", "ii", "index", "j", "chi", "ni", "z", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "zi", "l", "ri", "u", "bi", "c", "qi", "e", "iu", "type", "it", "mi", "pi", "x", "h", "fi", "id", "ip", "uri", "y", "v", "api", "vi", "f", "ui", "info", "k"], "s": ["a", "span", "parts", "hs", "is", "ks", "cs", "si", "string", "rs", "p", "gs", "os", "sup", "sets", "t", "sync", "sv", "sq", "js", "sl", "abs", "b", "ls", "ds", "ss", "ws", "its", "ns", "l", "se", "u", "c", "e", "ses", "bs", "ts", "xs", "words", "sum", "S", "ps", "str", "es", "ions", "plus", "o", "strings", "spec"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        \\n        \\n        List<Long> number = new ArrayList<Long>(){\\n            {\\n                add(Long.parseLong(sc.next()));\\n                add(Long.parseLong(sc.next()));\\n                add(Long.parseLong(sc.next()));\\n            }\\n        };\\n        \\n        Collections.sort(number, Comparator.reverseOrder());\\n        \\n        long K = Long.parseLong(sc.next());\\n        \\n        for(long i=0; i<K; i++){\\n            number.set(0, number.get(0)*2);\\n        }\\n        \\n        System.out.println(number.get(0) + number.get(1) + number.get(2));\\n    }\\n}", "target": "201", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ser", "cer", "set", "cli", "cc", "ner", "sec", "log", "soc", "tc", "scenes", "contract", "sync", "system", "cr", "osc", "sq", "ec", "lc", "bc", "sci", "cle", "ss", "cus", "cl", "scope", "se", "c", "src", "isc", "Sc", "asc", "or", "sic", "sche", "sem", " SC", "sch", "dc", "scan", "nc", " Sc", "anc", "uc", "sp", "sb", "parser", "parse", "SC", "scene"], "number": ["expression", "per", "list", "collection", "token", "parent", "initial", "address", "numbered", "value", "string", "currency", "version", "word", "group", "unit", "factor", "output", "phone", "language", "result", "log", "vector", "letter", "part", "zero", "default", "null", "digit", "counter", "resource", "pair", "money", "umber", "document", "one", "work", "book", "length", "count", "reference", "order", "now", "url", "normal", "no", "object", "size", "total", "amount", "sign", "not", "layer", "position", "point", "num", "date", "even", "over", "source", "function", "square", "block", "message", "current", "Number", "integer", "change", "plus", "dot", "array"], "K": ["O", "U", "E", "I", "KR", "J", "C", "T", "CL", "KB", "NB", "G", "N", "Q", "R", "H", "D", "KK", "Y", "Z", " k", "B", "L", "M", "KS", "X", " N", "HK", "S", "P", "F", "V", "k"], "i": ["xi", "gi", "I", "io", "si", "di", "p", "oi", "m", "abi", "ii", "hi", "index", "j", "r", "chi", "t", "ini", "mu", "b", "ai", "phi", "ji", "multi", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "c", "ri", "e", "ori", "iu", "init", "pi", "x", "id", "uri", "d", "v", "f", "o", "ui", "k"]}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint t = sc.nextInt();\\n\t\tint ans = t / a * b;\\n\t\tout.println(ans);\\n\t\t\\n\t\tout.close();\\n\t}\\n\\nstatic class FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        }else{\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\\n    public boolean hasNext() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\\n    public String next() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while(isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n    public long nextLong() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while(true){\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            }else if(b == -1 || !isPrintableChar(b)){\\n                return minus ? -n : n;\\n            }else{\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n    public int nextInt() {\\n        long nl = nextLong();\\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\\n        return (int) nl;\\n    }\\n    public double nextDouble() { return Double.parseDouble(next());}\\n}\\n}", "target": "4", "substitutes": {"sc": ["pc", "esc", "scl", "sw", "rc", "cur", "cs", "si", "ca", "cer", "sr", "ctx", "s", "cc", "ner", "tc", "sec", "soc", "cli", "sync", "cr", "system", "osc", "sq", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "src", "Sc", "asc", "sche", "cv", " SC", "scan", "nc", "uc", " Sc", "sh", "sp", "SC"], "out": ["Out", "exec", "file", "table", "parent", "io", "w", "ch", "client", "png", "err", "In", "bin", "string", "cmd", "name", "p", "line", "screen", "output", "cli", "s", "write", "log", "user", "r", "pass", "this", "system", "copy", "outs", "report", "config", "writer", "conf", "bc", "input", "error", "println", "cache", "obj", "outer", "conn", "can", "ext", "sum", "path", "OUT", "str", "again", "ex", "console", "o", "sp", "up", "IN", "flush"], "a": ["fa", "ca", "base", "au", "p", "oa", "s", "alpha", "aaa", "m", "wa", "index", "A", "sa", "qa", "ma", "an", "ab", "ai", "ae", "ba", "pa", "da", "aj", "e", "af", "area", "ta", "la", "d", "va", "aa", "f", "as", "i", "ad"], "b": ["bas", "xb", "gb", "nb", "eb", "null", "ab", "ba", "mb", "fb", "abc", "g", "bl", "rb", "bin", "base", "p", "bp", "abs", "ib", "pb", "bound", "ob", "not", "u", "h", "back", "emb", "o", "number", "value", "bb", "buf", "s", "lb", "buff", "bg", "abb", "bar", "boot", "l", "x", "body", "cb", "i", "fab", "bd", "bot", "r", "wb", "z", "bc", "B", "e", "binary", "bs", "bis", "bt", "block", "d", "y", "db", "v", "bf", "aa", "f", "be"], "t": ["w", "at", "pt", "p", "T", "s", "m", "nt", "j", "r", "z", "an", "dt", "q", "l", "u", "e", "type", "h", "x", "ta", "ty", "d", "y", "offset", "v", "f", "o", "g", "i", "k"], "ans": ["span", "tta", "ks", "ants", "cons", "cs", "AN", "ops", "p", "lan", "s", "amps", "offs", "na", "ents", "ANS", "os", "ens", "A", "an", "acs", "ann", "ls", "ars", "ds", "ins", "atan", "cas", "ns", "ases", "can", "ats", "eps", "ano", "aus", "ions", "es", "scan", "ant", "les", "anc", "as", "au"], "in": ["exec", "din", "file", "is", "re", "err", "In", "bin", "raw", "p", "line", "socket", "ac", "m", "r", "this", "resource", "ini", "ins", "inf", "input", "inner", "readable", "url", "data", "win", "min", "read", "lock", "l", "lin", "source", "inc", "con", "ssl", "path", "impl", "login", "ex", "connection", "as", "reader", "i", "IN", "inn"], "buffer": ["file", "table", "window", "padding", "transfer", "address", "base", "bb", "code", "buf", "header", "output", "result", "batch", "vector", "buff", "memory", "resource", "document", "queue", "image", "length", "uffer", "reference", "input", "url", "data", "size", "cache", "page", "stack", "read", "position", "binary", "limit", "Buffer", "source", "block", "quote", "slice", "message", "shape", "seed", "server", "array", "reader", "iter", "flush", "pad", "sequence"], "ptr": ["tips", "cur", "pt", "ref", "grad", "dest", "index", "pl", "pe", "inter", "tmp", "pull", "offset", "len", "lf", "cp", "iter", "prot", "pos", "pend", "p", "ft", "loc", "pb", "fe", "length", "port", " pointer", "dig", "cmp", "rl", "src", "ext", "lr", "ff", "sp", "wr", "addr", "nr", "ctr", "br", "rot", "code", "buf", "fp", "attr", "buff", "req", "cr", "size", "pointers", "fr", "depth", "Ptr", "rt", "push", "const", "fd", "dim", "i", "rd", "pad", "td", "butt", "address", "tr", "xt", "tc", "nt", "sth", "dr", "pointer", "tip", "slice", "shift", "xp", "f"], "buflen": ["bucolEN", "busellen", "bucolens", "rublen", "bublen", "luflsten", "rufllen", "auFlon", "buFLeng", "bufilen", "rublain", "buvalsten", "bubllen", " buflens", "auFleng", "bucollen", "lublen", "buvalent", "buFLen", "bufilain", "buFLEN", "bublenn", "buflEN", "buflent", "auFlEN", " bufllen", "buvalen", "luflen", "bufllen", "buFlon", "aufleng", " bufEN", "ruflen", "auflEN", " bufen", "buclon", "buFlent", "ruflin", "buflin", "buFleng", "buFlen", "ruflain", "bublsten", "lublsten", "bufEN", "buclen", "buFlEN", "buflain", "bufen", "buvalenn", "buflens", "luflenn", "buselen", "auflen", "auFlen", "buFllen", "buFlenn", " bufens", "bublent", "bufilin", "rublin", "buselain", "buselin", "bufleng", "rubllen", "buFLon", "lublenn", "buflon", "bufens", "lublent", "bucolen", "buflsten", "buFlens", "bufillen", "buFlsten", "bublin", "buflenn", "buclEN", "auflon", "luflent", " buflEN", "bublain", "bucleng"], "c": ["pc", "fc", "ch", "cs", "char", "ca", "code", "p", "C", "s", "cc", "ac", "m", "enc", "cd", "z", "ec", "cr", "lc", "cf", "count", "xc", "ci", "l", "u", "e", "ce", "x", "h", "ct", "d", "dc", "v", "cp", "uc", "f", "cu", "abc", "nc", "cy", "g", "i", "k", "col"], "sb": ["xb", "gb", "bb", "sf", "nb", "lb", "bm", "eb", "sth", "bg", "SB", "zb", "sa", "wb", "bp", "sv", "sq", "osc", "ib", "pb", "lab", "bc", "sg", "bsp", "ob", "mb", "fb", "su", "bt", "usb", "obb", "kb", "ssl", "bh", "db", "bf", "BB", "sp", "orb", "cb", "rb"], "n": ["number", "nr", "p", "nb", "m", "nt", "r", "j", "ln", "z", "sn", "N", "count", "pn", "no", "ns", "l", "u", "num", "e", "d", "v", "len", "f", "o", "g"], "minus": [" negative", "Na", "bits", " plus", " doesn", "diff", "two", "nos", "bles", "exp", "undo", "ne", "below", "zero", "prime", "digit", "mini", "none", "some", "one", "gone", "zer", "partial", "dad", "negative", "small", "sin", "carry", "extra", "Neg", "cedes", " goes", "Plus", " negatives", "beta", "shift", "plus", "eros", "neg", "credit", " neg", "without", "seconds", " needs"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.util.Collections;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Jaynil\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        CDivideTheProblems solver = new CDivideTheProblems();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CDivideTheProblems {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int n = in.nextInt();\\n            ArrayList<Integer> a = new ArrayList<>();\\n            for (int i = 0; i < n; i++) a.add(in.nextInt());\\n            if (n % 2 == 1) {\\n                out.println(0);\\n                return;\\n            }\\n            Collections.sort(a);\\n            out.println(a.get(n / 2) - a.get(n / 2 - 1));\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "119", "substitutes": {"inputStream": ["connectionstream", "inputStreamer", "InputForm", " inputInterface", "connectionInterface", " inputSteam", "outputStreamer", "inputSteam", "inputForm", "connectionStream", " inputStreamer", "outputInterface", "outputstream", "connectionStreamer", "inputInterface", "InputStream", "inputstream", "InputSteam", " inputstream", "Inputstream", "outputForm", " inputForm", "outputSteam"], "outputStream": ["inputStreamer", "parentStream", "applicationStream", "referenceStream", "outputStreamer", "applicationstream", "inputSteam", "parentSteam", "parentStreamer", "OutputStreamer", "referenceSteam", "applicationSteam", "outputstream", "applicationStreamer", "Outputstream", "inputstream", "OutputSteam", "referenceStreamer", "OutputStream", "outputSteam"], "in": ["per", "din", "file", "pin", "io", "is", "err", "In", "gen", "bin", "request", "arg", "version", "name", "line", "er", "ic", "log", "on", "index", "r", "pass", "inn", "this", "resource", "cin", "ini", "ins", "inside", "inf", "input", "inner", "url", "image", "by", "data", "sin", "win", "min", "read", "vin", "l", "c", "init", "conn", "x", "lin", "source", "id", "inc", "path", "gin", "again", "nin", "login", "isin", "connection", "f", "up", "info", "IN", "con"], "out": ["dump", "io", "err", "outside", "user", "null", "sync", "outs", "copy", "b", "inner", "data", "page", "lock", "outer", "pool", "print", "OUT", "off", "buffer", "array", "call", "table", "window", "w", "job", "bin", "string", "name", "p", "line", "write", "log", "one", "work", "error", "cache", "extra", "conn", "path", "ex", "o", "wr", "writing", "output", "s", "this", "comment", "object", "init", "x", "process", "inc", "down", "to", "server", "flush", "check", "Out", "exec", "list", "file", "parent", "client", "part", "doc", "writer", "prefix", "obj", "point", "again", "v", "connection", "up", "net", "temp"], "solver": ["ssolve", "setsolve", "setsolution", "ssolution", "sistor", "solution", "Solve", "searcher", "setsolver", "setsistor", "Solution", "ssolver", "Sistor", "ssearcher", "Searcher", "Solver", "solve", "ssistor"], "testNumber": [" testnumber", "TestNumber", "TestNumbers", " trialCounter", " trialnumber", "testCounter", "testnumber", "Testnumber", " testNumbers", " trialNumbers", "testNumbers", " testCounter", " trialNumber", "TestCounter"], "n": ["nu", "network", "number", "nr", "span", "ny", "non", "p", "s", "nb", "nt", "m", "cn", "nor", "na", "ne", "j", "ln", "mn", "ni", "z", "t", "sn", "b", "N", "count", "pn", "nn", "size", "no", "ns", "l", "u", "num", "c", "en", "e", "conn", "x", "dn", "d", "ng", "un", "y", "v", "len", "nc", "f", "nl", "o", "net", "k"], "a": ["tta", "ga", "ar", "ca", "oa", "p", "aaa", "alpha", "s", "na", "wa", "ao", "sa", "A", "ea", "ana", "ma", "an", "ab", "b", "aux", "analysis", "ae", "ba", "ata", "pa", "da", "l", "aj", "u", "c", "e", "working", "am", "area", "x", "la", "va", "y", "v", "api", "ha", "aa", "as", "o", "up", "array", "ama", "ans", "au"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "m", "abi", "ii", "chi", "j", "ni", "z", "mini", "ini", "b", "ai", "phi", "inner", "multi", "li", "ti", "ci", "zi", "ri", "qi", "u", "bi", "c", "e", "iu", "pi", "fi", "ip", "uri", "v", "ix", "f", "ui", "info"], "reader": ["per", "file", "table", "io", "client", "handler", "rot", "er", "socket", "loader", "worker", "r", "driver", "this", "resource", "cr", "report", "entry", "writer", "reading", "input", "readable", "inner", "rer", "data", "iter", "row", "lock", "read", "e", "it", "h", "or", "source", "Reader", "ry", "slice", "feed", "buffer", "f", "server", "parser", "parse"], "tokenizer": ["initialener", "Tokenize", "Tokenization", "okenizer", "characterner", "serializers", "initializer", " tokenener", "okenizing", "Tokener", "characterization", " tokenner", "tokener", "okener", "tokenizers", "characterizers", "initialize", "okenener", "Tokenizer", "tokenener", "initialner", " tokenizers", " tokenizing", "tokenize", "serialization", " tokenize", "serializer", "optimizer", "tokenization", "optimize", "Tokenizers", "Tokeniser", "tokeniser", " tokeniser", "serialize", "Tokenner", "okenize", "optimiser", "tokenner", "optimization", "Tokenizing", "characterizer", "okenner", " tokenization", " tokener", "tokenizing"], "stream": ["file", "w", "Stream", "client", "form", "string", "raw", "output", "socket", "user", "r", "valid", "holder", "channel", "resource", "document", "response", "writer", "port", "image", "input", "context", "serial", "data", "row", "object", "lock", "trans", "ream", "pool", "source", "open", "body", "content", "path", "v", "slice", "feed", "buffer", "connection", "f", "server", "temp", "view"]}}
{"code": "import java.security.cert.CollectionCertStoreParameters;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String args[]) {\\n\\n        // \u5165\u529b\\n        Scanner sc = new Scanner(System.in);\\n        int x = Integer.parseInt(sc.next());\\n        sc.close();\\n\\n        // \u4e3b\u51e6\u7406\\n        int maxRoot = (int) Math.sqrt(1000);\\n        List<Integer> list = new ArrayList<>();\\n        list.add(1);\\n        for (int i = 2; i <= maxRoot; i++) {\\n            int num = i * i;\\n            while (num <= 1000) {\\n                list.add(num);\\n                num *= i;\\n            }\\n        }\\n        Collections.sort(list);\\n\\n        int result = 0;\\n        for (int num : list) {\\n            if (x < num) {\\n                break;\\n            }\\n            result = num;\\n        }\\n\\n        // \u51fa\u529b\\n        System.out.println(result);\\n    }\\n}\\n", "target": "143", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tMain mainObj = new Main();\\n\t\tmainObj.solve();\\n\t}\\n\\n\tpublic void solve() throws IOException {\\n\t\tFastScanner fs = new FastScanner();\\n\t\t\\n\t\tString first = fs.next();\\n\t\tString second = fs.next();\\n\t\t\\n\t\tint firstNum = fs.nextInt();\\n\t\tint secondNum = fs.nextInt();\\n\t\t\\n\t\tString thrown = fs.next();\\n\t\t\\n\t\tif(thrown.equals(first)) {\\n\t\t\tfirstNum--;\\n\t\t}else {\\n\t\t\tsecondNum--;\\n\t\t}\\n\t\t\\n\t\t\\n\t\tSystem.out.println(String.format(\"%d %d\", firstNum, secondNum));\\n\t}\\n\\n\t\\n\\n\tpublic class FastScanner {\\n\\n\t\tBufferedReader reader;\\n\t\tprivate StringTokenizer st;\\n\\n\t\tpublic FastScanner() {\\n\t\t\tst = null;\\n\t\t\treader = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\\n\t\tpublic String next() throws IOException {\\n\t\t\tif (st == null || !st.hasMoreElements()) {\\n\t\t\t\tst = new StringTokenizer(reader.readLine());\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\\n\t\tpublic String nextLine() throws IOException {\\n\t\t\tst = null;\\n\t\t\tString readLine = null;\\n\t\t\treadLine = reader.readLine();\\n\t\t\treturn readLine;\\n\t\t}\\n\\n\t\tpublic int nextInt() throws NumberFormatException, IOException {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\\n\t\tpublic long nextLong() throws NumberFormatException, IOException {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\\n\t\tpublic int[] nextIntArr(int n) throws NumberFormatException, IOException {\\n\t\t\tint[] retArr = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tretArr[i] = nextInt();\\n\t\t\t}\\n\t\t\treturn retArr;\\n\t\t}\\n\\n\t\tpublic long[] nextLongArr(int n) throws NumberFormatException, IOException {\\n\t\t\tlong[] retArr = new long[n];\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tretArr[i] = nextLong();\\n\t\t\t}\\n\t\t\treturn retArr;\\n\t\t}\\n\\n\t\tpublic void close() throws IOException {\\n\t\t\treader.close();\\n\t\t}\\n\t}\\n\\n}\\n", "target": "155", "substitutes": {"mainObj": ["finalobj", "finalPr", "playerPub", "mainPr", " mainInfo", "parentobj", "parentObj", " mainobj", "parentInfo", " mainPub", "playerObj", "Mainobj", "MainObject", "mainInfo", "MainPub", "playerObject", "mainObject", "MainObj", "parentPr", " mainPr", "playerobj", "mainPub", "finalObj", "mainobj", " mainObject", "finalInfo"], "fs": ["fc", "ks", "files", "fa", "cs", "obs", "sf", "flows", "fm", "ft", "fp", "irs", "fast", "vers", " FS", "fx", "os", "arf", "gets", "utils", "ips", "uses", "finder", "ls", "fe", "vs", "cf", "df", "lines", "ss", "ws", "ils", "frames", "ir", "los", "raf", "fts", "fr", "Fs", "FS", " f", "fn", "fb", "rf", "af", "linux", "bs", "ves", "bis", "F", "ps", "fps", "fits", "lf", "feed", "bf", "far", "f", "fd", "fw"], "first": ["th", "prev", "the", "initial", "string", "upper", "name", "header", "home", "same", "part", "this", "primary", "one", "leading", "lower", "now", "First", "split", "data", "top", "success", "src", "last", "third", "single", "next", "right", "fifth", "path", "latest", "root", "current", "then", "title", "start"], "second": ["secret", "Second", "two", "sec", "letter", "below", "after", "later", "lower", "split", "fourth", "another", "secondary", "other", "last", "next", "Fourth", "fifth", "again", "latest", "seconds", "follow", "special", "middle"], "firstNum": [" firstOrd", "secondVal", "FirstLen", "firstVal", " firstNumber", "lastOrd", "secondOrd", "topNumber", "topMor", "secondLen", "topNum", "firstSum", "secondSum", "firstMor", "firstOrd", "lastSum", "lastNum", "FirstNumber", "secondNumber", "Firstnum", "FirstMor", " firstMor", "topnum", "FirstVal", "firstnum", "firstLen", "firstNumber", " firstLen", " firstVal", " firstnum", "lastNumber", " firstSum", "FirstNum"], "secondNum": ["secondVal", " secondMsg", "secondnum", " secondNumber", "secondOrd", "southNum", "secondarySum", "secondaryOrd", " secondId", "secondMon", "firstSum", "firstMsg", " secondMon", "secondMsg", "southNumber", "secondSum", "secondId", "secondaryId", " secondOrd", "SecondOrd", "secondaryMsg", "secondaryNumber", "secondaryMon", "secondMu", "secondarynum", " secondMu", "SecondVal", "secondNumber", " secondVal", "secondaryVal", "SecondMu", " secondSum", "firstnum", "southMon", "secondaryNum", "southId", "SecondNum", "secondaryMu", " secondnum"], "thrown": ["thsrown", " throred", "threw", "Throred", " threw", "ethrawn", "Throwing", "Thrawn", "ethrown", "thsrew", "throwing", "hrowing", "Threw", "ethrew", "thrawn", "hrown", "thsrawn", "thsrowing", "Thrown", "throred", "ethrowing", "hrew", "hrored", " throwing"], "reader": ["per", "iterator", "io", "client", "ro", "handler", "ser", "rot", "parser", "string", "er", "ner", "result", "loader", "worker", "rar", "service", "r", "driver", "null", "this", "system", "resource", "report", "dr", "reading", "writer", "in", "riter", "input", "readable", "inner", "rer", "data", "read", "l", "ri", "layer", "stream", "over", "editor", "h", "oder", "source", "Reader", "right", "ty", "ry", "str", "rest", "feed", "buffer", "enter", "f", "server", "iter"], "st": ["sw", "sta", "Stream", "string", "pt", "stop", "p", "struct", "ste", "sts", "ft", "sr", "s", "sc", "part", "sth", "dest", "service", "inst", "STR", "sa", "est", "t", "stri", "cr", "sl", "sn", "ost", "ld", "fe", "dr", "std", "cont", "tt", "ss", "stable", "Str", "state", "sign", "nd", "cl", "l", "ast", "ist", "se", "src", "stress", "pr", "ct", "ptr", "rt", "art", "str", "style", "ust", "rest", "ut", "const", "null", "sh", "sp", "ST", "sb", "stage", "start", "rd", "bl", "St"], "readLine": ["readingSpace", "nextline", " readline", "readBlock", "readableLine", "readData", "readableData", "readableline", " readBlock", "loadline", "nextRow", "writeFile", "nextMessage", "nextSpace", "readString", " readData", " readRow", "rawLine", " readSpace", "writeData", "readingline", " readLin", "nextLine", " readString", "loadBlock", " readFile", "readableString", "readingMessage", "readMessage", "rawLin", "nextBlock", "readableLin", "loadRow", "rawline", "writeline", "readLin", "writeLine", "loadLine", " readMessage", "readline", "readRow", "readSpace", "loadFile", "rawString", "readingLine", "writeLin", "readFile"], "n": ["a", "network", "span", "number", "kn", "nat", "name", "p", "nb", "s", "m", "nt", "nor", "na", "ne", "j", "r", "t", "none", "z", "an", "sn", "b", "N", "in", "count", "no", "size", "all", "min", "ns", "not", "l", "num", "c", "en", "e", "init", "conn", "x", "adj", "left", "d", "un", "y", "v", "names", "len", "nc", "f", "o", "net", "g", "k", "inn", "norm"], "retArr": ["retCurr", "retErn", "retArrayrs", "retARry", "retChr", "retErrd", "retCurd", "optArdr", "retArv", "RetErrs", "retRm", "retARv", "optARr", "retArrd", "RetArrd", "retARrs", "retDerner", "altARr", "RetArrs", "retArtr", "retArp", "RetArd", " retArm", "optARdr", "optARrs", "retAvry", "retARp", "retARner", "altArry", "RetArn", "altArr", "retArrs", "RetArr", "retArner", "retARgr", "retErray", "optARner", "retAvr", "retChrd", " retArray", "retDerrs", "retArry", "retRrs", "retErrs", "retDerdr", "RetErp", "altArv", "retRgr", "optArrs", " retArrs", "retErd", "retArrayner", "retRr", "retCurrs", "retRry", "retErm", "retChrs", "retArtn", "retArd", "retErp", "retArraydr", "RetErrd", "RetErr", "altARry", "retArgr", "retArn", "optArner", "RetErd", "optArr", "retArray", "altArgr", "altARgr", "retRv", "retARdr", "RetErn", "retArdr", "retChn", "altARv", "retArm", "retErr", "retAvv", "retARr", "retRray", "retAvgr", "retArrayr", "retCurp", "retDerr", "RetArp", "retArtrd", "retARd", "retArtrs"], "i": ["xi", "gi", "adi", "I", "io", "si", "ie", "di", "name", "p", "oi", "abi", "ii", "hi", "attr", "chi", "j", "ni", "mini", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "min", "q", "zi", "l", "ri", "u", "bi", "qi", "e", "iu", "eni", "my", "mi", "x", "pi", "h", "fi", "yi", "id", "ip", "uri", "d", "field", "y", "v", "ix", "slice", "key", "f", "o", "ui", "info", "g"]}}
{"code": "/*\\n * To change this license header, choose License Headers in Project Properties.\\n * To change this template file, choose Tools | Templates\\n * and open the template in the editor.\\n */\\n\\n\\nimport java.util.*;\\n\\n/**\\n *\\n * @author Admin\\n */\\npublic class Main {\\n    \\n    \\n    public static void main(String args[])\\n    {\\n    Scanner s=new Scanner(System.in);\\n    \\n    int ss=s.nextInt();\\n    \\n    int w=s.nextInt();\\n    \\n    if(ss>w)\\n        System.out.println(\"safe\");\\n    else\\n    System.out.println(\"unsafe\");\\n   \\n         \\n    \\n    \\n    \\n    }\\n    \\n    \\n}\\n", "target": "177", "substitutes": {"s": ["fs", "qs", "ks", "is", "ms", "si", "n", "parser", "rs", "ops", "p", "ings", "er", "os", "r", "utils", "sync", "sl", "js", "abs", "ls", "b", "ds", "ins", "in", "ws", "stats", "its", "ns", "se", "l", "c", "ses", "e", "out", "bis", "ts", "xs", "S", "d", "ssl", "ps", "es", "f", "services", "as", "o", "sb", "i", "strings"], "ss": ["sw", "ks", "uss", "css", "cs", "ms", "si", "oss", "rs", "aws", "ress", "SS", "sv", "sq", "sk", "ds", "iss", "ws", "nn", "ass", "ns", "rss", "se", "ess", "ts", "ff", "xx", "S", "WS", "ps", "ng", "eps", "sch", "sh", "sp", "us", "sd"], "w": ["wx", "wl", "sw", "ww", "wu", "n", "ew", "wn", "p", "wd", "width", "wa", "wh", "wb", "z", "work", "W", "max", " sw", "wi", "ws", "win", "q", "tw", "ow", "u", "aw", "we", "x", "h", "kw", "wp", "nw", "d", "y", "v", "fw", "f", "hw", "wed", "k", "wt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        char[] s = sc.next().toCharArray();\\n        long k = sc.nextLong();\\n        \\n        char ans = '1';\\n        long oneIdx = 0;\\n        for(char str : s) {\\n            if(str != '1') {\\n                ans = str;\\n                break;\\n            }\\n            oneIdx++;\\n        }\\n        \\n        if(k <= oneIdx) ans = '1';\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "38", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "cs", "ser", "ca", "cer", "sf", "ctx", "com", "cc", "ner", "sec", "sync", "system", "osc", "cr", "ec", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "sche", " SC", "sch", "mc", "scan", "nc", "uc", "server", "sh", "sp", "sb", "SC"], "s": ["a", "parts", "qs", "is", "ks", "apps", "cs", "si", "n", "string", "rs", "p", "ings", "gs", "os", "sets", "t", "sv", "ls", "ds", "ins", "in", "ss", "letters", "keys", "fts", "ns", "l", "u", "c", "ses", "S", "v", "es", "f", "services", "sb", "i", "strings"], "k": ["K", "kn", "kr", "ks", "ak", "n", "p", "mk", "unk", "m", "tk", "j", "z", "work", "sk", "b", "kk", "ke", "ku", "ik", "q", "l", "u", "c", "e", "x", "dk", "kw", "id", "d", "kb", "kid", "y", "v", "key", "ko", "ok", "f", "g", "i"], "ans": ["ks", "ants", "ations", "cs", "AN", "lan", "ings", "vers", "amps", "breaks", "offs", "ras", "ents", "ANS", "os", "ens", "na", "arts", "ana", "nan", "outs", "an", "aces", "ann", "ls", "ars", "acs", "ds", "ins", "sk", "vs", "nas", " means", "atan", "cas", "aning", "ads", "san", "ns", " strings", "can", "acts", " pairs", "reads", " spans", " ang", "ats", "eps", " names", "ids", "ions", "aus", "aned", "ons", "anc", "as", "asts", " scans", " chars", "strings"], "oneIdx": ["oneIDz", "otherIdxi", "oneIdl", "oneIdz", "OneIDr", "otherIdz", "oneidxx", "OneIDc", "oneIDxs", "oneFy", "otherIndy", "caseIdz", "oneFz", "oneIndxi", "OneIdx", "OneIdc", "oneIndx", "otherIndz", "oneFxx", "caseIDz", "OneIDx", "oneIDr", "oneIDxx", "oneIDl", "caseIDxx", "oneIDc", "oneIndz", "oneidl", "oneIdxs", "oneInz", "oneIdr", "otherIndx", "oneidx", "OneIdr", "OneIDxs", "oneFl", "caseIdx", "oneIny", "oneIdc", "oneidz", "oneByIdr", "oneidxs", "otherIndxi", "oneidr", "otherIdx", "oneIndy", "oneIdxx", "oneFxi", "oneInx", "oneByIdx", "caseIDx", "oneIDx", "oneFx", "otherIdy", "caseIdl", "oneidc", "oneIdxi", "oneByIdxs", "caseIDl", "oneByIdc", "caseIdxx", "OneIdxs", "oneInxi", "oneIdy"], "str": ["ctr", "sta", "br", "ch", "err", "ar", "cs", "char", "si", "string", "star", "step", "tr", "name", "sr", "er", "line", "strip", "letter", "enc", "inst", "r", "stri", "cr", "arr", "st", "lc", "dr", "entry", "inner", "ss", "obj", "Str", "data", "cl", "c", "sense", "oct", "text", "cat", "ct", "id", " Str", "sp", "STR", "iter", "start", "strings", "spec"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint total = 0;\\n\t\tfor (int i=0; i<3; i++) {\\n\t\t\ttotal += sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(total > 21 ? \"bust\" : \"win\");\\n    }\\n}\\n", "target": "129", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "cs", "ca", "sub", "sf", "cc", "sec", "exp", "acc", "enc", "sync", "cr", "sl", "osc", "ec", "lc", "sq", "bc", "sci", "ss", "ci", "sign", "cl", "scope", "se", "l", "c", "src", "Sc", " SC", "scan", "nc", " Sc", "uc", "sh", "sp", "SC", "spec"], "total": ["number", "token", "random", "gross", "parent", "done", "base", "failed", "non", "general", "average", "result", "nt", "part", "index", "valid", "null", "basic", "shared", "always", "partial", "max", "translation", "length", "count", "error", "data", "size", "toc", "full", "no", "Total", "complete", "type", "last", "next", "percent", "sum", "scale", "available", "current", "active", "info", "found", "tax"], "i": ["gi", "xi", "I", "si", "di", "p", "oi", "abi", "ii", "hi", "index", "chi", "j", "t", "ini", "mu", "b", "ai", "in", "count", "phi", "multi", "ji", "li", "ci", "ti", "zi", "ri", "u", "bi", "c", "e", "it", "x", "pi", "h", "id", "ip", "uri", "v", "api", "f", "ui", "info", "k"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        char[] c = sc.next().toCharArray();\\n        int ans = 0;\\n        for (int i=0;i<n;i++){\\n            while (i<n-1&&c[i]==c[i+1])i++;\\n            ans++;\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "218", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "search", "sr", "cc", "ner", "sync", "cr", "osc", "sq", "ec", "lc", "bc", "sci", "ss", "ci", "cl", "scope", "se", "Sc", "asc", " SC", "sch", "dc", "mc", "scan", "nc", "uc", "anc", "sh", "sp", "sb", "parse", "SC"], "n": ["network", "span", "p", "s", "nb", "ner", "m", "nt", "na", "ne", "j", "r", "ln", "t", "ni", "z", "sn", "b", "N", "in", "nn", "ns", "l", "u", "en", "num", "e", "fn", "conn", "x", "d", "un", "y", "v", "len", "nc", "f", "o", "net", "k"], "c": ["pc", "chain", "fc", "rc", "ch", "cs", "ca", "char", "code", "p", "C", "ctx", "cc", "ac", "enc", "r", "cr", "ec", "config", "lc", "b", "cf", "in", "xc", "ci", "cache", "arc", "l", "u", "e", "cat", "ct", "d", "v", "dc", "mc", "uc", "f", "cu", "o", "cy", "g", "cb", "col"], "ans": ["a", "span", "ks", "ants", "cs", "ani", "si", "AN", "lan", "s", "annot", "na", "ents", "ANS", "os", "aid", "anas", "ana", "ni", "outs", "an", "acs", "ann", "ars", "ls", "ai", "ins", "ss", "atan", "cas", "ci", "nn", "leans", "ns", "x", "reads", "ats", "aus", "ids", "es", "ions", "aned", "scan", "anc", "as", "asin", " scans", "errors", "nas", "ras"], "i": ["gi", "xi", "I", "io", "ani", "si", "di", "ami", "p", "oi", "cli", "m", "abi", "ii", "hi", "chi", "j", "index", "ki", "ni", "z", "uli", "ini", "mini", "b", "ati", "ai", "asi", "multi", "ji", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "e", "init", "it", "eni", "iu", "mi", "pi", "x", "h", "ori", "id", "ip", "uri", "y", "v", "uni", "vi", "f", "ui", "o", "info"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint x = sc.nextInt();\\n\t\tint n = sc.nextInt();\\n\t\tif (n == 0) {\\n\t\t\tSystem.out.println(x);\\n\t\t\treturn;\\n\t\t}\\n\t\tint[] pArray = new int[100];\\n\t\tfor (int i = 0; i < 100; i++) {\\n\t\t\tpArray[i] = 0;\\n\t\t}\\n\t\tint p = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tp = sc.nextInt();\\n\t\t\tpArray[p - 1] = 1;\\n\t\t}\\n\t\tint ans = 101;\\n\\n\t\tfor (int i = x - 1; i < 100; i++) {\\n\t\t\tif (pArray[i] == 0) {\\n\t\t\t\tans = i + 1;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = x - 1; i >= 0; i--) {\\n\t\t\tif (pArray[i] == 0) {\\n\t\t\t\tif (Math.abs(x - ans) < Math.abs(x - (i + 1))) {\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tans = i + 1;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tif (i == 0 && Math.abs(x - ans) >= x) {\\n\t\t\t\tans = 0;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "228", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ca", "cor", "cer", "sf", "com", "cc", "ner", "sec", "tc", "enc", "loc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "cont", "ck", " scr", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "dc", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "SC"], "x": ["xi", "test", "number", "wx", "px", "w", "pos", "xe", "code", "hex", "s", "xt", "www", "on", "cross", "index", "na", "php", "fx", "zero", "t", "z", "work", "max", "xxxx", "XX", "in", "xy", "xc", "rx", "data", "lex", "pe", "min", "ax", "full", "no", "u", "c", "e", "working", "h", "xs", "X", "python", "tx", "xes", "xx", "id", "any", "d", "y", "ix", "v", "xxx", "ex", "sex", "xp", "f", "plus", "array", "k", "xml"], "n": ["nu", "network", "a", "number", "w", "ny", "nb", "s", "m", "nt", "nan", "j", "t", "z", "b", "N", "max", "in", "nn", "all", "ns", "l", "u", "en", "c", "num", "e", "np", "h", "d", "y", "v", "len", "nc", "f", "o", "g", "net", "k"], "pArray": ["npArray", "npMax", " pAddress", "paAverage", "piAr", "xInteger", "cAddress", " parray", " pIndex", "piInteger", "pInteger", " pAction", "ipArray", "cArray", "intArray", "aAction", "pArea", "pMax", " pMatrix", " pAbs", "xArray", "xAr", "privatearray", "parray", "xRange", "npAr", "aArray", "aMatrix", "piIndex", " pMax", "privateAr", "privateMax", "pAbs", "intArea", "intAr", "pAction", " pCache", " pInteger", "pAr", "paArray", "nparray", "ipAction", "pAverage", "privateArray", "xArea", "paAddress", "aCache", " pAr", "pCache", "cAverage", "xIndex", "cAbs", "intRange", " pArea", "ipMatrix", " pRange", "paAbs", "piArray", "pMatrix", "pIndex", "ipCache", "pAddress", "pRange", " pAverage"], "i": ["xi", "gi", "a", "I", "is", "io", "si", "ie", "di", "ami", "oi", "cli", "s", "ii", "hi", "index", "j", "ni", "z", "ini", "mu", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "ik", "q", "zi", "l", "qi", "u", "bi", "c", "ri", "e", "init", "iu", "it", "eni", "mi", "pi", "yi", "fi", "ori", "id", "ip", "uri", "y", "ix", "v", "api", "anti", "f", "ui", "o", "info", "g"], "p": ["a", "pc", "per", "ap", "pid", "op", "pt", "s", "m", "part", "pl", "r", "j", "pass", "t", "z", "an", "b", "par", "pn", "pa", "pot", "lp", "l", "u", "point", "c", "tp", "np", "h", "pi", "pr", "ip", "P", "d", "pp", "y", "ps", "v", "api", "pre", "cp", "f", "patch", "k", "jp"], "ans": ["a", "span", "ks", "ants", "cons", "cs", "parser", "ones", "rs", "lan", "ops", "aps", "s", "amps", "man", "offs", "na", "ANS", "os", "ens", "ips", "ana", "ares", "anas", "outs", "an", "aces", "ann", "ars", "ls", "ds", "ins", "ai", "annels", "ss", "cases", "cas", "ads", "ians", "san", "ns", "opus", "works", "ays", "plan", "can", "ams", "xs", "powers", "ats", "eps", "ps", "aus", "ids", "mas", "ions", "names", "aned", "photos", "scan", "ons", "anc", "as", "features", "asts", "errors", "nas", "ras", "rows"]}}
{"code": "import java.util.Scanner;\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\npublic class Main{\\n    public static void main(final String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int n = scan.nextInt();\\n        int[] a = new int[n];\\n        Map<Integer, Integer> mp = new HashMap<Integer, Integer>();\\n        for (int i = 0; i < n; i++) {\\n            a[i] = scan.nextInt();\\n            mp.put(a[i], 1);\\n        }\\n        int q = scan.nextInt();\\n        int ans = 0;\\n        while (q > 0) {\\n            final int s = scan.nextInt();\\n            if(mp.containsKey(s)) ans++;\\n            q--;\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "138", "substitutes": {"scan": ["run", "chan", "span", "is", "search", "ser", "rank", "sr", "er", "connect", "query", "ner", "log", "sc", "man", "na", "serv", "r", "pass", "ln", "skip", "system", "sync", "an", "ann", "fan", "in", "kin", "serial", "nn", "sign", "san", "sin", "read", "se", "sys", "l", "conn", "can", "plan", "out", "or", "cat", "look", "open", "ry", "v", "slice", "clean", "Scan", "stat", "watch", "ignore", "reader", "spin", "parse", "con", "check"], "n": ["network", "nr", "w", "p", "nb", "m", "nt", "ne", "j", "t", "ni", "z", "an", "sn", "b", "N", "in", "nn", "size", "all", "no", "ns", "l", "u", "num", "c", "en", "e", "x", "h", "d", "y", "v", "len", "nc", "f", "o", "net", "k"], "a": ["tta", "ga", "ca", "p", "oa", "aura", "ia", "ac", "alpha", "aaa", "m", "na", "sup", "A", "sa", "ea", "ana", "ma", "an", "ab", "b", "ai", "ba", "ata", "pa", "da", "aj", "u", "c", "area", "am", "asa", "va", "aa", "as", "auto", "array", "ama", "au"], "mp": ["vp", "pm", "isp", "ap", "pkg", "ms", "orp", "um", "p", "aps", "pps", "m", "mom", "MP", "Mp", "sup", "JP", "ma", "appy", "MB", "pb", "map", "ape", "mb", "mx", "wp", "ph", "eps", "omp", "pp", "ps", "cop", "upp", "mc", "amp", "rap", "cp", "up", "sp", "imp", "meg", "mm", "jp"], "i": ["gi", "xi", "I", "io", "si", "di", "ie", "oi", "m", "abi", "ii", "hi", "index", "j", "chi", "ni", "uli", "z", "ini", "ai", "inner", "multi", "phi", "li", "ci", "ti", "ik", "ri", "qi", "u", "bi", "e", "it", "mi", "pi", "x", "fi", "id", "ip", "uri", "d", "ix", "f", "ui", "o", "info"], "q": ["qs", "ch", "p", "qq", "query", "sc", "j", "qa", "t", "z", "sq", "an", "dq", "quest", "max", "Q", "qu", "ck", "iq", "count", "que", "_", "pe", "ns", "cl", "l", "qi", "u", "c", "e", "x", "h", "id", "y", "v", "sh", "g", "seq", "k", "co"], "ans": ["span", "qs", "ks", "ants", "cs", "p", "amps", "na", "os", "ANS", "aid", "ase", "ips", "qa", "ana", "an", "sk", "ann", "ars", "ls", "vs", "acs", "ai", "ins", "ds", "ss", "cas", "ns", "l", "can", "x", "reads", "eps", "ps", "aus", "ids", "es", "ions", "anc", "as", " scans", "au", "k", "rows"], "s": ["qs", "ks", "is", " changes", "cs", "si", "ops", "p", "os", "sets", "ips", "z", "sq", "abs", "ls", "ds", "ins", "conf", "ss", "its", "ns", "l", "u", "ches", "c", "ql", "xs", "id", "S", "ps", "es", "ice", "as", "o", "g"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tString S = sc.next();\\n\\n\t\tList <String> kekka = new ArrayList<String>();\\n\t\tString [] alphabet = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\\n\\n\t\tfor(int i=0; i < S.length();i++) {\\n\\n\t\t\tString Sone = String.valueOf(S.charAt(i));\\n\\n\t\t\tfor(int j=0; j < 26;j++) {\\n\t\t\t\tString alphabetOne = alphabet[j];\\n\t\t\t\tif(Sone.equals(alphabetOne)) {\\n\\n\t\t\t\t\tif((j+N)<26) {\\n\t\t\t\t\t\tkekka.add(alphabet[j+N]);\\n\t\t\t\t\t}else {\\n\t\t\t\t\t\tint N2 = N - 26;\\n\t\t\t\t\t\tkekka.add(alphabet[j+N2]);\\n\t\t\t\t\t}\\n\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor(String a:kekka) {\\n\t\t\tSystem.out.print(a);\\n\t\t}\\n\\n\\n\t}\\n\\n}\\n", "target": "13", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "search", "si", "ser", "sf", "sr", "ner", "system", "osc", "cr", "sv", "sq", "sl", "bc", "sci", "ss", "ci", "cus", "cl", "se", "c", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "N": ["O", "K", "E", "I", "n", "Ns", "ND", "J", "C", "Ni", "T", "NT", "Ne", "A", "SN", "G", "CN", "W", "Size", "Q", "R", "H", "D", "One", "Y", "Z", "B", "L", "M", "NC", "X", "NE", "P", "F", "Node", "V", "CNN", "NS", "NL", "EN", " n"], "S": ["O", "SE", "U", "Part", "I", "IS", "Si", "K", "Su", "SU", "C", "T", "SS", "s", "RS", "A", "SN", "Service", "G", "PS", "W", "Q", "SHA", "R", "H", "D", "B", "L", "FS", "M", "SA", "Socket", "X", "SI", "P", "F", "DATA", "V", "NS", "DES", "STR", "SH"], "kekka": ["kekja", "keskpa", "keekpa", "kekyla", " kekala", "kekkpa", " kepku", "kekeka", "keukma", "kekpa", "pekkla", "kekkki", "pekksea", "pekoa", "kepka", "keekla", "peksea", "kekeoa", "kekkala", "kepla", "pekka", "kesksea", " kepla", "keeksea", "kekyala", "keskki", "kekyku", " kekki", "kekma", "kekema", "keukoa", "keukka", "pekkoa", " kekeka", " kekla", " kepala", " kekeki", "pekma", "keksea", "kekyka", "kekku", " kekja", "kekla", "keekka", "kekeja", "kekala", "kekkja", "pekla", "kekeki", "keukla", "pekkpa", "keskla", "kepala", "kepku", "pekkma", "kekksea", " kekeja", " kekku", " kepka", "kekkoa", "kekoa", "pekkka", "kekkku", "keskka", " kekela", "kekkka", "kekkma", "keskja", "pekpa", "kekela", "kekkla", "kekki"], "alphabet": ["occupphabet", "operophon", "formabet", "alphaabetic", "formabetic", "equabetic", "alphalog", "alphaabet", "phabetic", "eightatin", "alphphabet", "phphabet", "alphabetic", "transparent", "phation", "occupparent", "alphation", "alabet", "alphatin", "transant", "alphaparent", "alphparent", "alphaant", "alphant", "eightophon", "alalog", "alphaphabet", "operabet", "eightabet", "eightabetic", "equation", "formatin", "transabet", "operatin", "alphaation", "operabetic", "transphabet", "occupabet", "alation", "alabetic", "phabet", "phalog", "equalog", "occupant", "equabet", "formophon", "alphophon"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "ami", "p", "oi", "ii", "hi", "ij", "index", "ni", "z", "ini", "b", "ind", "ai", "ji", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "e", "ori", "iu", "eni", "mi", "pi", "yi", "id", "ip", "y", "ix", "v", "slice", "vi", "key", "f", "ui", "o"], "Sone": ["sone", "Hones", "SOne", "F1", " SONE", "sOne", "FOne", " S1", "Mone", "Hone", "FONE", "S1", "HOne", "Fone", "M1", "MONE", "MOne", " Sones", "Sones", " SOne", "SONE", "sones"], "j": ["jing", "bj", "pop", "br", "job", "ja", "ny", "n", "jc", "ie", "dj", "J", "p", "aja", "jo", "ii", "ij", "index", "jet", "ni", "z", "js", "jj", "byn", "b", "jl", "ind", "ji", "li", "obj", "ali", "ax", "fr", "l", "aj", "u", "oj", "e", "x", "pr", "next", "kj", "adj", "uj", "d", "jit", "y", "je", "v", "ix", "jen", "key", "f", "jam", "o", "g", "k", "jp"], "alphabetOne": ["alphabetone", "alphphabetone", "alphatonTwo", "alphaabetone", "alphaabetTwo", "alphabetTwo", "alphaphabetone", "alphationOne", "alphabeticZero", "alphaphabetOne", "alphationone", "alphaphabetTwo", "alphphabet1", "alphatonOne", "alphphabetFive", "alphphabetTwo", "alphabeticOne", "alphabeticFive", "alphabetFive", "alphabet1", "alphabeticone", "alphphabetOne", "alphatonZero", "alphatonFive", "alphabetZero", "alphaabetZero", "alphaphabetFive", "alphationTwo", "alphaabetOne", "alphation1", "alphaphabet1", "alphphabetZero", "alphatonone", "alphaabet1", "alphaton1", "alphaphabetZero", "alphaabetFive"], "N2": ["nTwo", "n4", " Nsecond", "Ssecond", "CTwo", "Nsecond", "C4", "KTwo", "Qsecond", "C1", "Q2", " NTwo", "N62", "N1", "N4", "K2", "STwo", "S2", "S62", " N62", "K1", "K4", "n2", "C2", "NTwo", "Q62", "QTwo", "n1"], "a": ["span", "tta", "sta", "ak", "img", "script", "ar", "at", "ga", "name", "p", "s", "alpha", "result", "na", "A", "sa", "ea", "ana", "ma", "an", "ab", "b", "ae", "data", "ata", "instance", "\u00e0", "aka", "ava", "password", "c", "e", "param", "area", "am", "text", "la", "va", "aa", "f", "as", "abc", "title", "au"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\n\\npublic class Main\\n{\\n\\n\tpublic static void main(String[] args)\\n\t{\tScanner s = new Scanner(System.in);\\n                int n = s.nextInt();\\n          //    int d = s.nextInt();\\n                int i=0,j=0,k=0,ans=0,ss=0,r=0;\\n                for(i=1;i<=n;i++){\\n                    if(i%2!=0){\\n                       r = i;\\n                       for(j=1;j<=n;j++){\\n                           if(r%j==0){\\n                              ss++;\\n                           }\\n                       }\\n                       if(ss==8){\\n                          ans++;\\n                       }\\n                       ss = 0;\\n                    }\\n                }\\n                System.out.println(ans);\\n\t}\\n}", "target": "85", "substitutes": {"s": ["fs", "a", "si", "parser", "sf", "rs", "ops", "p", "er", "gs", "r", "sets", "sync", "js", "sl", "abs", "storage", "b", "ls", "tests", "ds", "ins", "in", "ss", "ws", "stats", "ns", "se", "l", "groups", "c", "ses", "bis", "ans", "S", "d", "ssl", "ps", "v", "f", "services", "o", "sb", "reader", "i"], "n": ["i", "p", "nb", "m", "nt", "ne", "j", "r", "ln", "ni", "z", "b", "N", "rn", "ns", "l", "u", "num", "c", "init", "e", "it", "nc", "f", "o", "g", "net", "k"]}}
{"code": "\\n\\nimport java.io.*;\\nimport java.math.BigInteger;\\nimport java.util.*;\\nimport java.util.Stack;\\n\\npublic class Main{\\n\tpublic static class FastReader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer root;\\n\t\t\\n \\n\t\tpublic FastReader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n \\n\t\tString next() {\\n\t\t\twhile (root == null || !root.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\troot = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (Exception r) {\\n\t\t\t\t\tr.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn root.nextToken();\\n\t\t}\\n \\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n \\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n \\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n \\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (Exception r) {\\n\t\t\t\tr.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t}\\n\t\\n\tpublic static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));\\n\tstatic int mod = (int) (1e9+7),n;\\n\tstatic long cf = 998244353;\\n    static final int MAX = (int) 1e6;\\n    public static List<Integer>[] edges;\\n    public static int[][] parent;\\n    public static int col = 20;\\n    public static long[] Bit;\\n    public static long[] fac,inv;\\n    public  static int[] prime; \\n    public static long[] dp;\\n\tpublic static FastReader sc = new FastReader();\\n\tpublic static void main(String[] args) {\\n\t//\tScanner sc = new Scanner(System.in);\\n \\n\t\tint n = sc.nextInt();\\n\t\tchar[] s = sc.next().toCharArray();\\n\t\tfor(int i=0;i<s.length;++i) {\\n\t\t\tint shift = (s[i]-'A') + n;\\n\t\t\tif(shift > 25) s[i] = (char) ((shift-26)+'A');\\n\t\t\telse s[i]+=n;\\n\t\t}\\n\t\tout.print(new String(s));\\n\t\tout.close();\\n\t}\\n\t\\n\t\\n}", "target": "13", "substitutes": {"br": ["plug", "nr", "io", "ro", "ch", "err", "Br", "reader", "rot", "bb", "tr", "p", "sr", "er", "buf", "yr", "result", "BR", "bot", "r", "browser", "cr", "arr", "report", "b", "dr", "gr", "bar", "ocr", "bc", "obj", "raf", "mr", "fr", "boot", "bel", "fb", "rob", "ber", "bridge", "lr", "pr", "bro", "ler", "rt", "bh", "db", "box", "hr", "div", "runner", "orb", "jp", "bolt", "ur", "bl", "rb"], "root": ["prev", "ree", "token", "iterator", "nr", "rc", "ver", "re", "ro", "err", "string", "raw", "name", "p", "er", "result", "loader", "loc", "r", "null", "arr", "b", "dr", "writer", "tree", "av", "bc", "inner", "url", "rec", "error", "obj", "row", "mr", "boot", "fr", "node", "Root", "child", "wire", "src", "type", "head", "pr", "id", "right", "rt", "roots", "ng", "db", "box", "owner", "div", "server", "o", "util", "array", "round", "reader", "parser", "rb"], "str": ["ctr", "kr", "status", "pos", "err", "char", "string", "raw", "tr", "p", "line", "sr", "s", "result", "exp", "rev", "r", "inst", "j", "stri", "t", "sl", "st", "arr", "b", "dr", "gr", "doc", "entry", "in", "url", "inner", "dict", "Str", "fr", "cl", "l", "u", "c", "x", "or", "text", "pr", "style", "hr", "div", "sp", "STR", "iter"], "out": ["Out", "exec", "file", "dump", "io", "w", "err", "bin", "string", "raw", "name", "p", "line", "output", "write", "m", "log", "t", "outs", "report", "b", "writer", "in", " in", "input", "error", "obj", "cache", "println", "data", "session", "gz", "c", "conn", "x", "d", "OUT", "v", "ex", "o", "sp", "info", "temp", "i", "IN"], "mod": ["ver", "ctr", "code", "mult", "version", "sec", "m", "j", "mn", " Mod", "cm", "nd", "dec", "MOD", "num", "mods", "Mod", "M", "module", "id", "scale", "depth", "d", "dc", "nc", "dim", "mem", "norm"], "n": ["nu", "nr", "i", "w", "p", "nb", "m", "cn", "j", "r", "t", "b", "N", "nm", "ns", "l", "u", "num", "c", "e", "np", "x", "d", "nc", "f", "o", "g", "k"], "cf": ["fc", " gcc", "ctr", " ce", "ref", " cc", "fp", " CF", "ul", "CF", "cr", "ec", "ef", " cr", "cm", " const", "gc", "cv", " dc", "dc", "cp", "nc", "const", "cap", " var", "cb", " CR", "cal"], "MAX": ["MIN", "K", "CC", " Max", "gen", "C", "CL", "var", "Max", "cr", "N", "max", "Q", "count", "min", "ax", "cl", "dec", "num", " max", "X", "F", "dc", "mem", "seq", "ver"], "edges": ["endedwards", "Edged", "Edwards", "ledge", "edwards", "Edges", "Edge", "ledwards", "endedges", "ledges", "edged", "ledged", "endedged", "edge", "endedge"], "parent": ["Parent", "pid", "pos", "parents", "class", "max", "port", "count", "large", "all", "child", "node", "pool", "num", "init", "type", "id", "ip", "depth", "block", "shape", "key", "div", "g", "iter", "children"], "col": ["pos", "COL", " Col", "ref", "group", "co", "loc", "coll", "rel", "level", "row", "child", "num", "pool", "cat", "ct", "block", "grid", "column", "val", "ol", "Col", "act", "sel", "dim", "seq", "ver"], "Bit": ["Fac", "big", "bin", "Bi", "bits", "exp", "Int", "Max", "Big", "nn", "Mask", "bi", "num", "Min", "init", "bit", "Prime", "gc", "free", "nc", "abc", "util", "Power", "net", "mem", "flag", "mask"], "fac": ["quad", "ig", "Fac", "cur", "mult", "ac", "acc", "complex", "inf", "mask", "circ", "real", "fre", "pack", "frac", "bi", "gam", "fi", "adj", "len", "const", "dat", "abc", "cap", "dim", "lu", "con", "co"], "inv": ["nu", "quad", "nr", "tri", "eff", "vis", "rev", "le", "abs", "vs", "ov", "iq", "av", "Inv", "cl", "bi", "init", "np", "adj", "dev", "sum", "ip", "block", "orig", "V", "len", "ev", "net"], "prime": ["fix", "tri", "big", "pos", "tr", "exp", "sup", "power", "pose", "zero", "primary", "inf", "rand", "real", "use", "pe", "pack", "pri", "init", "sum", "Prime", "scale", "depth", "seed", "shift", "div", "dim", "Power", "mask"], "dp": ["gp", "pm", "drop", "pkg", "pid", "dist", "di", "delay", "sup", "dt", "ep", "port", "comp", "DC", "tp", "np", "ip", "dep", "dl", "DP", "pp", "eps", "dc", "duration", "cp", "dat", "dim", "imp", "pad"], "sc": [" src", "rc", " sp", "ch", " scratch", "rs", "sr", "cr", " c", " ch", "gr", " scr", " cr", "cl", "rl", "c", "src", "Sc", " scanner", "rb", " SC", " res", " Sc", "sh", " rc", "SC", " ss", "rw"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int x = sc.nextInt();\\n    int t = sc.nextInt();\\n    int d = n/x;\\n    if(n%x!=0){\\n      d=d+1;\\n    }\\n    System.out.println(d*t);\\n  }\\n}", "target": "34", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "search", "cer", "sr", "ctx", "cc", "ner", "tc", "soc", "enc", "sync", "osc", "cr", "sq", "lc", "ocr", "coll", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "se", "c", "Sc", "asc", "sche", "ct", "cv", " SC", "sch", "mc", "scan", "nc", "uc", "sh", "sp", "sb", "parse", "SC"], "n": ["a", "nu", "number", "nr", "w", "ny", "p", "s", "nb", "m", "nt", "cn", "ne", "j", "r", "z", "sn", "b", "N", "max", "in", "nn", "ns", "nd", "l", "u", "en", "c", "num", "e", "init", "dn", "y", "v", "nit", "nc", "f", "o", "i", "k"], "x": ["xi", "wx", "number", "dd", "w", "step", "p", "s", "xt", "m", "cross", "index", "j", "r", "z", "b", "max", "in", "xy", "xc", "rx", "ax", "l", "u", "en", "c", "e", "h", "xs", "X", "xes", "dx", "xx", "id", "y", "v", "ix", "ex", "xp", "f", "o", "i"], "t": ["td", "dd", "at", "pt", "ot", "p", "T", "m", "nt", "j", "r", "z", "st", "dt", "b", "tt", "l", "lt", "u", "c", "e", "h", "ts", "ta", "ty", "y", "v", "f", "time", "o", "i", "k", "wt"], "d": ["td", "dd", " D", "vd", "dist", "di", "dy", "p", "diff", "bd", "cd", "j", "du", "z", "dt", "ld", "dr", "ds", "ded", "D", " dd", "dh", "nd", "da", "l", "u", "c", "e", "did", "dn", "dx", "id", "depth", "dl", "dc", "dat", "f", "fd", "dim", "md", "sd", "i", "ad"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int C = sc.nextInt();\\n\\n        if ((A != B && B != C && A != C) || A == B && B == C)\\n            System.out.println(\"No\");\\n        else\\n            System.out.println(\"Yes\");\\n    }\\n}\\n", "target": "117", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "search", "sr", "ctx", "cc", "ner", "sec", "tc", "soc", "acc", "sync", "osc", "cr", "sq", "sl", "lc", "cont", "bc", "sci", "ss", "cl", "scope", "se", "c", "Sc", "asc", "sche", "cv", "str", " SC", "scan", "nc", "uc", "sh", "sp", "sb", "parser", "parse", "SC"], "A": ["a", "API", "This", "U", "E", "I", "HA", "AC", "As", "Ab", "AF", "AB", "Ca", "T", "AM", "Array", "PA", "LA", "AA", "N", "IA", "AW", "H", "Y", "L", "MA", "SA", "X", "AD", "Area", "Ar", "AR", "BA", "S", "P", "F", "AP", "Am", "Ac", "CA"], "B": ["O", "K", "U", "E", "I", "BS", "Ab", "AB", "T", "BF", "BE", "SB", "MB", "G", "b", "N", "W", "QB", "R", "BC", "GB", "D", "UB", "H", "Y", "DB", "L", "M", "X", "LB", "Bs", "BA", "OB", "P", "F", "V", "BB", "File", "BI", "WB"], "C": ["O", "K", "U", "E", "I", "CI", "FC", "AC", "CC", "Ca", "T", "CR", "CU", "CL", "G", "N", "W", "R", "BC", "D", "Y", "DC", "L", "Cl", "Cu", "c", "CE", "M", "JC", "NC", "X", "KC", "S", "P", "F", "V", "VC", "Ch", "SC", "CH", "CA"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    long L = sc.nextInt();\\n    long R = sc.nextInt();\\n    int result = 2019;\\n    int tmp = 0;\\n    loop: for (; L < R; L++) {\\n      if (L % 2019 == 0) {\\n        result = 0;\\n        break;\\n      }\\n      for (long i = L + 1; i <= R; i++) {\\n        if (i % 2019 == 0) {\\n          result = 0;\\n          break loop;\\n        }\\n        tmp = (int) ((L * i) % 2019);\\n        if (tmp < result)\\n          result = tmp;\\n      }\\n    }\\n    System.out.println(result);\\n  }\\n}", "target": "193", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ser", "cor", "cer", "com", "cc", "ner", "tc", "soc", "acc", "enc", "sync", "system", "osc", "sl", "sq", "ec", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "se", "l", "c", "src", "Sc", "asc", "sche", "sem", " SC", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "g", "SC", "con"], "L": ["O", "RL", "LG", "U", "E", "I", "Li", "LU", "LV", "T", "LE", "XL", "CL", "FL", "LP", "LA", "G", "W", "N", "LC", "length", "LT", "D", "H", "Lo", "EL", "LI", "l", "Z", "B", "IL", "UL", "LM", "dL", "LL", "M", "LD", "X", "LR", "LB", "DL", "SL", "P", "PL", "F", "S", "V", "NL", "LO", "BL", "Lu"], "R": ["RL", "U", "I", "J", "GR", "T", "RH", "C", "CR", "RS", "BR", " r", "r", "RG", "G", "W", "N", "RA", "Q", "Rs", "D", "H", "Y", "B", "Z", "JR", "HR", "M", "X", "LR", "SR", "Rh", "Right", "RW", "S", "P", "RT", "V", "RO", "RR", "RM"], "result": ["prev", "test", "number", "results", "res", "status", "append", "err", "score", "cur", "winner", "value", "code", "step", "diff", "grade", "folder", "feature", "r", "valid", "default", "func", "cover", "report", "max", "doc", "replace", "length", "count", "comment", "order", "match", "data", "size", "total", "page", "range", "error", "goal", "cmp", "use", "expected", "success", "Result", "term", "su", "lr", "function", "division", "compl", "orig", "card", "current", "duration", "ret", "runner", "future", "info", "temp"], "tmp": ["prev", "test", "number", "trial", "done", "job", "elt", "step", "p", "oi", "diff", "nb", "fp", "route", "part", "app", "sup", "acc", "r", "loc", "qa", "max", "mp", "length", "count", "kk", "tt", "proc", "obj", "total", "cmp", "l", "term", "src", "cb", "x", "pi", "ff", "next", "stuff", "ptr", "front", "vt", "pre", "treatment", "pp", "offset", "api", "beta", "slice", "seed", "duration", "const", "sb", "temp", "start", "rb"], "i": ["gi", "xi", "I", "si", "ie", "di", "p", "oi", "m", "ii", "hi", "j", "r", "t", "uli", "z", "ini", "b", "lc", "ai", "in", "phi", "ji", "li", "ci", "ti", "zi", "l", "ri", "u", "bi", "c", "qi", "ori", "it", "iu", "mi", "x", "pi", "h", "id", "ip", "d", "v", "ix", "vi", "f", "ui"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        while (sc.hasNext()) {\\n            String s = sc.next();\\n            int left = s.indexOf('A');\\n            int right = s.lastIndexOf('Z');\\n            System.out.println(right - left + 1);\\n        }\\n    }\\n}\\n", "target": "109", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "search", "ca", "cer", "sf", "sr", "cc", "sec", "sync", "cr", "sl", "sq", "osc", "st", "lc", "ec", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "cv", " SC", "sch", "mc", "scan", "nc", "uc", "anc", "sh", "sp", "cb", "SC"], "s": ["a", "is", "search", "si", "n", "string", "sf", "rs", "ops", "p", "service", "os", "sync", "sv", "sl", "js", "abs", "south", "ls", "ins", "in", "your", "ws", "ss", "letters", "ns", "l", "u", "c", "e", "su", "next", "source", "S", "d", "str", "v", "es", "services", "f", "o", "sb", "i", "strings", "spec"], "left": ["less", "joined", "diff", "two", "first", "pl", "index", "rel", "lo", "length", "url", "inner", "level", "small", "all", "min", "child", "l", "L", "Left", "half", "last", "next", "Right", "down", "offset", "lf", "len", "plus", "nl", "found", "wrong", "start"], "right": ["correct", "w", "p", "bottom", "just", "cross", "index", "r", "with", "max", "rel", "length", "inner", "rights", "end", "row", "range", "ax", "and", "last", "rh", "third", "Right", "three", "id", "d", "down", "rest", "back", "shift", "ack", "plus", "round", "wrong", "rw"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = Integer.parseInt(sc.next());\\n\t\tint b = Integer.parseInt(sc.next());\\n\t\tsc.close();\\n\t\tsc = null;\\n\t\tint ans = a <= 5 ? 0 : (a <= 12 ? b /2 : b);\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "249", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "cs", "ser", "ca", "cer", "sr", "cli", "cc", "ner", "tc", "sec", "soc", "na", "enc", "loc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "sv", "cont", "ocr", "coll", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "stream", "src", "Sc", "sche", "cv", " SC", "sch", "scan", "nc", "uc", "anc", "server", "sp", "sb", "parser", "parse", "SC"], "a": ["sta", "sha", "ga", "ca", "n", "au", "p", "oa", "s", "ac", "alpha", "ia", "aaa", "na", "ada", "A", "sa", "ea", "ana", "ma", "an", "ab", "ai", "aux", "ae", "ba", "pa", "da", "aj", "c", "e", "af", "am", "area", "asa", "la", "mA", "d", "y", "va", "aa", "f", "as", "ama", "i", "ad"], "b": ["big", "fa", "n", "base", "bb", "p", "s", "nb", "lb", "bd", "eb", "bot", "r", "bp", "z", "ab", "ib", "pb", "ba", "pa", "B", "l", "bi", "c", "e", "bs", "x", "d", "y", "db", "v", "beta", "bf", "aa", "f", "o", "sb", "g", "i", "k"], "ans": ["chan", "span", "parts", "vals", "ants", "fa", "cons", "cs", "ca", "AN", "lan", "ops", "ctx", "ia", "annot", "na", "ents", "ANS", "aid", "ana", "an", "anch", "ann", "ars", "ins", "anned", "ns", " na", "ases", "can", "la", " fa", " spans", " ang", "aus", "ids", " af", "ions", "aned", "scan", "ons", "anc", "ang", " scans"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] p = new int[N];\\n\t\tint[] s = new int[N];\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tp[i] = sc.nextInt();\\n\t\t\ts[i] = p[i];\\n\t\t}\\n\t\tsc.close();\\n\t\tArrays.sort(s);\\n\t\t// System.out.println(Arrays.toString(p));\\n\t\t// System.out.println(Arrays.toString(s));\\n\t\tint r = 0;\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tif(p[i] != s[i]) r++;\\n\t\t}\\n\t\t// System.out.println(r);\\n\t\tSystem.out.println(r == 0 || r == 2 ? \"YES\" : \"NO\");\\n\t}\\n}\\n", "target": "82", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "sr", "cc", "ner", "tc", "soc", "enc", "sync", "system", "cr", "osc", "ec", "sq", "lc", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "sche", " SC", "sch", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "g", "parser", "SC"], "N": ["O", "network", "K", "E", "I", "Part", "NR", "n", "Ns", "Len", "C", "T", "Ni", "J", "NT", "Ne", "NB", "ne", "SN", "NN", "Size", "length", "R", "H", "D", "Y", "NA", "Z", "Num", "B", "L", "NI", "M", "NC", "X", "No", "S", "P", "F", "Node", "V", "NS", "NL", "Number", "KN", " n"], "p": ["a", "per", "pc", "vp", "ap", "pid", "pos", "at", "n", "m", "os", "j", "t", "ips", "z", "ss", "pe", "ns", "l", "py", "point", "u", "c", "e", "tp", "np", "x", "pi", "h", "ip", "P", "ps", "pp", "y", "d", "v", "eps", "cp", "f", "o", "sp", "g", "jp"], "s": ["a", "parts", "qs", "results", "is", "ups", "params", "cs", "si", "n", "aws", "ops", "os", "sets", "ips", "t", "z", "ls", "ds", "ins", "ss", "ws", "stats", "ns", "l", "u", "groups", "c", "ses", "items", "xs", "words", "states", "S", "P", "ps", "v", "es", "sections", "sites", "services", "sp", "ans", "strings"], "i": ["a", "xi", "gi", "I", "is", "io", "w", "si", "n", "di", "ie", "oi", "m", "ii", "hi", "chi", "r", "j", "t", "uli", "z", "ni", "ini", "mu", "b", "ind", "ai", "in", "end", "multi", "li", "ci", "ti", "l", "qi", "u", "bi", "c", "ri", "e", "init", "it", "mi", "x", "h", "pi", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "f", "ui", "o", "info", "start", "k"]}}
{"code": "import java.util.Scanner;\\nclass Main {\\n    public void kami() {\\n                Scanner sc = new Scanner(System.in);\\n\t\tint d,r;\\n\t\tdouble f;\\n\t\tdouble a = sc.nextInt();\\n\t\tdouble b = sc.nextInt();\\n\t\t\\n\t\td = (int)(a / b);\\n\t\tr = (int)(a % b);\\n\t\tf = a / b;\\n\t\t\\n\t\t\\n\t\tSystem.out.printf(\"%d %1d %.5f \",d , r , f);\\n\\n    }\\n\tpublic static void main(String[] args ) {\\n    new Main().kami();\\n\t}\\n\\n}", "target": "90", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "com", "ctx", "cam", "cc", "ner", "sec", "tc", "soc", "acc", "enc", "osc", "sq", "ec", "lc", "class", "cont", "coll", "bc", "sci", "ss", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "ct", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "d": ["dd", "w", "n", "di", "dy", "p", "bd", "cd", "z", "dt", "ld", "dr", "ds", "df", "in", "D", "data", "nd", "da", "l", "u", "c", "e", "x", "dn", "dx", "rad", "dl", "y", "db", "dc", "v", "k", "fd", "dat", "md", "sd", "i", "ad"], "r": ["nr", "w", "err", "ar", "n", "rs", "p", "sr", "er", "m", "j", "t", "z", "R", "ir", "range", "fr", "l", "u", "c", "e", "rf", "x", "rr", "h", "pr", "rad", "rt", "y", "v", "hr", "o", "i", "ur", "rd", "k", "rb"], "f": ["fs", "fc", "w", "fa", "err", "n", "sf", "eff", "bb", "p", "fun", "fp", "m", "fx", "j", "t", "z", "fe", "df", "fen", "fr", "l", "u", "fl", "c", "e", "rf", "af", "h", "function", "F", "v", "fd", "o", "g", "info", "ef", "i", "k"], "a": ["i", "w", "fa", "ga", "ca", "n", "p", "oa", "ia", "ac", "alpha", "aaa", "na", "ada", "A", "sa", "ea", "ma", "an", "ab", "ai", "ae", "ba", "pa", "da", "aj", "u", "c", "e", "af", "area", "am", "x", "la", "va", "y", "aa", "as", "auto", "au", "ad"], "b": ["w", "br", "n", "base", "bb", "p", "s", "m", "eb", "j", "ab", "ib", "max", "bc", "ba", "B", "l", "u", "mb", "c", "e", "ad", "fb", "bs", "x", "h", "body", "y", "db", "v", "aa", "bf", "o", "sb", "be", "g", "cb", "i", "k", "rb"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String args[]) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint v[] = new int[n];\\n\t\tfor (int i = 0; i < n; ++i)\\n\t\t\tv[i] = sc.nextInt();\\n\t\tfor (int i = 0; i < n; ++i) {\\n\t\t\tint c = sc.nextInt();\\n\t\t\tv[i] -= c;\\n\t\t}\\n\t\tsc.close();\\n\t\tArrays.sort(v);\\n\t\tint ans = 0;\\n\t\tfor (int i = n - 1; i >= 0; --i) {\\n\t\t\tif (v[i] > 0)\\n\t\t\t\tans += v[i];\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "26", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "cor", "search", "cer", "sf", "screen", "sr", "cc", "ner", "sec", "na", "sync", "system", "cr", "osc", "sq", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "src", "Sc", "asc", "sche", "sem", "cv", "sch", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "g", "parser", "SC"], "n": ["network", "w", "p", "nb", "s", "m", "nt", "cn", "ne", "r", "j", "ln", "nan", "t", "z", "sn", "b", "N", "in", "no", "nn", "ns", "l", "u", "en", "num", "e", "init", "x", "d", "y", "len", "nc", "f", "o", "nl", "net", "k"], "v": ["a", "vp", "value", "iv", "version", "p", "s", "ve", "vert", "m", "vector", "uv", "j", "t", "sv", "z", "vm", "vs", "ov", "b", "values", "av", "count", "lv", "order", "size", "q", "l", "u", "e", "volt", "x", "cv", "nv", "val", "y", "va", "V", "ev", "vi", "vol", "tv", "f", "vv", "o", "array", "inv", "k"], "i": ["xi", "gi", "a", "adi", "I", "io", "w", "si", "di", "ie", "p", "oi", "cli", "abi", "ii", "chi", "j", "ni", "z", "ini", "b", "lc", "ai", "in", "phi", "multi", "li", "ci", "ti", "ik", "zi", "l", "qi", "u", "bi", "e", "init", "iu", "eni", "it", "mi", "x", "pi", "yi", "fi", "ori", "id", "ip", "uri", "y", "ix", "api", "anti", "f", "o", "ui", "info", "start", "col"], "c": ["a", "ch", "cs", "p", "C", "ic", "s", "cc", "ac", "m", "enc", "t", "z", "ec", "b", "lc", "cf", "count", "xc", "ci", "size", "l", "u", "e", "ce", "h", "x", "d", "nc", "uc", "f", "cu", "cp", "o", "cy", "g", "k"], "ans": ["span", "ks", "ants", "cs", "AN", "lan", "amps", "na", "ents", "ANS", "nan", "ens", "arts", "anas", "ana", "outs", "an", "sk", "ann", "ars", "vs", "aces", "ls", "ins", "acs", "cas", "anned", "ians", "cus", "ns", "can", "ats", "aus", "ids", "ions", "aned", "scan", "ons", "as", "anks", " scans", "ays", "nas"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main (String[] args) {\\n    Scanner in = new Scanner(System.in);\\n\\n    while (in.hasNext()) {\\n      int N = in.nextInt();\\n      int currMax = 0;\\n      int view = 0;\\n\\n      for (int i = 0; i < N; ++i) {\\n        int Hi = in.nextInt();\\n\\n        if (Hi >= currMax) {\\n           ++view;\\n        }\\n\\n        currMax = Math.max(currMax, Hi);\\n      }\\n \\n      System.out.println(view);\\n    }\\n  }\\n}", "target": "7", "substitutes": {"in": ["exec", "din", "token", "is", "pin", "re", "fa", "err", "In", "bin", "n", "query", "diff", "m", "log", "serv", "r", "txt", "ln", "pass", "ini", "b", "doc", "ins", "lib", "rin", "inner", "input", "kin", "rec", "data", "win", "min", "fr", "l", "c", "init", "conn", "out", "h", "or", "lin", "source", "inc", "con", "str", "again", "nin", "login", "isin", "scan", "ex", "connection", "f", "as", "include", "reader", "IN", "inn"], "N": ["O", "K", "I", "n", "Ns", "Len", "C", "Ni", "T", "J", "NT", "Ne", "NB", "Max", "Size", "Q", "R", "H", "D", "NA", "Num", "Z", "L", "NI", "M", "NC", "X", "No", "NE", "S", "P", "V", "NS", "NL"], "currMax": ["currePrime", " currMin", " currRest", "CurrMin", "currymax", "CurrHeight", "curreMod", "currdMax", "curryMod", " curryPrime", " curryMod", "curremax", "curryPrime", "curberMin", "CurrMax", "CurreMin", "currnMod", "currsMax", "curreMax", "CurreHeight", "curreMid", "currdPrime", "currMod", " curremax", "CurreMid", "currPrime", "currnMax", " curreMin", "currnMin", "curryRest", "currdRest", "curreHeight", "curryMin", "curberMax", "currMid", "curryMax", "currHeight", "currsMin", "currMin", "currdHeight", "currRest", " curryMax", "curberHeight", " curryRest", "currdMid", " currPrime", " currmax", "curberMid", " curryMin", " curreMax", " currMod", "curreMin", "CurreMax", "CurrMid", "currsmax", "currdMin", "currmax", "curreRest"], "view": ["col", "value", "di", "version", "line", "see", "low", "ii", "View", "vis", "hi", "sc", "index", "loc", "feature", "ki", "qa", "model", "show", "max", "image", "length", "layout", "inner", "seen", "large", "size", "row", "im", "page", "range", "iter", "min", "VIEW", "data", "se", "num", "views", "x", "keep", "X", "global", "id", "la", "block", "look", "uri", "v", "V", "slice", "f", "hello", "ui", "dim", "parse", "HI"], "i": ["xi", "gi", "I", "io", "si", "di", "p", "oi", "ii", "hi", "chi", "j", "ki", "ni", "z", "ini", "mu", "ai", "phi", "ji", "li", "ti", "ci", "zi", "l", "ri", "u", "bi", "qi", "c", "it", "iu", "mi", "x", "h", "pi", "id", "y", "v", "ix", "vi", "ui", "o", "info"], "Hi": ["xi", "I", "Si", "Li", "Pi", "lim", " hi", "di", "Wi", "Ni", "High", "cli", "hi", "hei", "ki", "ni", "eye", "Max", "ini", "Ti", "lo", "Ho", "Co", "li", "H", "Ha", "Lo", "L", "mi", "h", "pi", "high", "Limit", "Va", "mid", "limit", "ph", "Mini", "Xi", "ha", "vi", "Po", "Mid", "Mi", "Next", "hello", "ui", "Index", "Hist", "Hub", "HI", "Ko"]}}
{"code": "import java.util.*;\\n \\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner scanner = new Scanner(System.in);\\n    int rows = scanner.nextInt();\\n    int cols = scanner.nextInt();\\n    int constant = scanner.nextInt();\\n    \\n    int[] code = new int[cols];\\n    for (int ix = 0; ix < cols; ix++) {\\n      code[ix] = scanner.nextInt();\\n    }\\n    \\n    int matches = 0;\\n    for (int row = 0; row < rows; row++) {\\n      int result = 0;\\n      for (int col = 0; col < cols; col++) {\\n        result += scanner.nextInt() * code[col];\\n      }\\n      \\n      if (result + constant > 0) matches++;\\n    }\\n    \\n    System.out.println(matches);\\n  }\\n}", "target": "68", "substitutes": {"scanner": ["scanoser", "scaner", "analyinner", "Scanoser", "Scanener", "analyer", "analyner", "nerinner", "nerker", "anner", "anninner", " scanizer", "canning", " scanoser", "hanning", "analyning", "canener", "scanter", "canner", "Scaner", "Scanner", "nerer", "annener", "caninner", "canker", "caner", " scanener", "annner", "scanker", "Scanker", "canter", " scanning", "Scanter", "annter", "canizer", "scanning", "hanoser", " scanter", "scanizer", "scanener", "haner", "nerner", "scaninner", " scaner", "Scanizer", "Scaninner", "hanner", "Scanning"], "rows": ["points", "results", "months", "ks", "orders", "locks", "cs", "obs", "blocks", "rs", "flows", "cells", "headers", "s", "vers", "ports", "ls", "ins", "values", "lines", "workers", "fields", "frames", "keys", "ches", "ows", "items", "views", "xs", "types", "rooms", "planes", "sections", "pages", "features", "users", "times", "ries", "tracks", "runs"], "cols": [" colops", " colows", "cold", "coles", "columnd", " cold", "colls", "colln", "Collines", "Colops", "actn", "colows", "Cols", "Colows", "collines", "colp", "Coles", "coln", "columnn", " colp", "columns", "columnows", " coles", "columnlines", "actp", "actes", "acts", "columnes", " collines", "Cold", "columnp", " coln", "colops", "colles", "Coln", "collows", "columnops"], "constant": ["contractant", "contractiant", "constancy", "constants", "conant", "ConstANT", "Constants", "conANT", "contractants", "variant", "contractor", " constiant", "Constancy", "variancy", "constiant", "Constant", "affiant", "variANT", "affants", "conants", " constor", "affant", "affor", "constANT", "constor", "variants", "conancy", " constants"], "code": ["test", "list", "table", "core", "score", "address", "value", "codes", "line", "header", "cross", "index", "loc", "config", "frame", "que", "length", "count", "order", "map", "data", "cache", "page", "range", "match", "size", "c", "type", "ce", "x", "source", "id", "block", "content", "check", "message", "buffer", "key", "const", "Code", "patch", "array", "zip", "sequence"], "ix": ["fix", "wx", "rc", "px", "pos", "err", "cs", "nz", "rank", "p", "batch", "req", "fx", "cross", "index", "loc", "z", "jj", "coord", "ind", "ck", "coll", "doc", "iq", "prefix", "ci", "lex", "min", "q", "ax", "pixel", "bug", "num", "c", "init", "x", "tx", "dx", "id", "ip", "cat", " index", "xx", "call", "y", "xxx", "Col", "ice", "ex", "act", "draw", "patch", "ox", "zip", "i", "start", "check"], "matches": ["patchers", "latries", "attters", "batcs", "marches", "attries", "matcs", "latches", "latchers", "catries", "marters", "attcs", "Matcs", "matchers", "attchers", "patters", "patches", "attures", "matures", "Matches", "Matchers", "mathes", "Matures", "matters", "latures", "catches", "marchers", "catchers", "batures", "matries", "atthes", "pathes", "batchers", "catures", "attches", "batches", "marhes"], "row": ["prev", "rc", "ro", "cur", "rank", "step", "dy", "tr", "ref", "diff", "ner", "co", "sc", "req", "index", "loc", "Row", "entry", "max", "coll", "post", "order", "rx", "error", "roll", "nn", "page", "range", "month", "ow", "bug", "num", "c", "x", "rr", "keep", "block", "ry", "val", "y", "box", "feed", "key", "f", "round", "zip", "k", "ver"], "result": ["test", "res", "results", "rc", "our", "err", "score", "search", "feat", "diff", "attr", "particip", "feature", "acc", "loc", "pass", "valid", "default", "counter", "mat", "coll", "length", "cup", "match", "error", "total", "page", "pack", "cmp", "goal", "success", "complete", "Result", "term", "next", "master", "sum", "function", "ult", "val", "compl", "card", "const", "ret", "math", "round", "runner", "future", "ignore", "ver"], "col": ["ver", "fc", "file", "ch", "cell", "cur", "il", "COL", "oc", "cor", "po", "co", "part", "pl", "loc", "coll", "rol", "count", "rel", "roll", "win", "cl", "rl", "fl", "c", "num", "conn", "keep", "pr", "cat", "ct", "block", "inc", "column", "ll", "val", "con", "cond", "ol", "Col", "fat", "div", "sel", "act", "dir", "patch", "f", "round", "uc", "seq", "cal"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) throws IOException {\\n\t\ttry (BufferedReader br = new BufferedReader(\\n\t\t\t\tnew InputStreamReader(System.in))) {\\n\\n\t\t\tString in = br.readLine();\\n\t\t\tString chr[] = in.split(\" \");\\n\t\t\tint a = Integer.parseInt(chr[0]);\\n\t\t\tint b = Integer.parseInt(chr[1]);\\n\t\t\t System.out.println(Math.max(a+b, Math.max(a-b, a*b)));\\n\t\t}\\n\t}\\n}", "target": "188", "substitutes": {"in": ["exec", "din", "file", "is", "pin", "br", "err", "In", "bin", "n", "p", "line", "cli", "s", "user", "log", "r", "resource", "cin", "ini", "ins", "rin", "input", "inner", "data", "fr", "read", "c", "stream", "init", "it", "out", "text", "lin", "source", "id", "inc", "d", "str", "gin", "again", "nin", "login", "isin", "buffer", "ex", "connection", "f", "as", "reader", "temp", "i", "IN", "inn"], "chr": ["charr", "charbr", "charrt", "char", "shr", "schrt", " char", " chrt", "chn", "chrs", "chp", "schbr", "shrs", "shrt", "charb", "intp", "intar", "charar", "chrt", "intr", "schrs", "cherr", "cherrt", " chp", "charp", "intn", "charrs", "cherb", "cherrs", " chbr", "chbr", " chrs", "chb", "shb", " chn", "schr", "charn"], "a": ["sta", "w", "fa", "sha", "ga", "ca", "au", "p", "aaa", "alpha", "ac", "m", "sup", "r", "A", "sa", "ea", "j", "ma", "ab", "an", "max", "aux", "ae", "ba", "aka", "da", "ava", "aj", "u", "l", "c", "area", "x", "h", "asa", "la", "mA", "d", "va", "y", "aa", "f", "as", "auto", "ama", "g", "i", "ad"], "b": ["br", "w", "n", "base", "bb", "p", "s", "lb", "nb", "m", "eb", "zb", "j", "r", "abb", "z", "ab", "ib", "length", "ba", "B", "l", "u", "mb", "c", "e", "fb", "ad", "bs", "x", "h", "d", "bh", "y", "v", "aa", "f", "o", "sb", "g", "be", "i", "k", "rb"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.math.BigDecimal;\\n\\npublic class Main {\\n\\n\t/** ?????? */\\n\tstatic final BigDecimal capital = BigDecimal.valueOf(100000);\\n\\n\t/** ?????? */\\n\tstatic final BigDecimal interest = BigDecimal.valueOf(0.05);\\n\\n\t/** ??? */\\n\tstatic final BigDecimal rate = BigDecimal.valueOf(1).add(interest);\\n\\n\t/**\\n\t * ????????\u00b0???????????\u00b0???????????????\\n\t * ????\u00b4???\u00a8???Debt Hell(????????\u00b0???)\\n\t * @param args\\n\t * @throws IOException\\n\t */\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tInputStreamReader is = new InputStreamReader(System.in);\\n\t\tBufferedReader br = new BufferedReader(is);\\n\t\tString input = br.readLine();\\n\\n\t\t// ????????\u00b6?????\\???????????\u00b1????????????????????????????????????\\n\t\tint weeks = Integer.valueOf(input);\\n\\n\t\t// ?\u00a8??????????????????????????????????????\u00b4?\\n\t\tBigDecimal result = capital;\\n\t\tfor (int i = 0; i < weeks; i++) {\\n\t\t\t// ????????????????????????????????????1000???????????????????????????\\n\t\t\tresult = roundUpLowerThousand(rate.multiply(result).setScale(0, BigDecimal.ROUND_UP));\\n\t\t}\\n\\n\t\tSystem.out.println(result);\\n\t}\\n\\n\t/**\\n\t * ????\u00a7\u00b0?????\u00b0??????1000???????????????????????????????????\u00b4\\n\t *\\n\t * @param target ????\u00a7\u00b0??\u00b0???\\n\t * @return ????????????????????????\\n\t */\\n\tprivate static BigDecimal roundUpLowerThousand(BigDecimal target) {\\n\t\t// ?\u00a8????????????\u00a8??????????????\u00b0???1000???\\n\t\tBigDecimal basisNumber = BigDecimal.valueOf(1000);\\n\t\tBigDecimal result = target.divide(basisNumber).setScale(0, BigDecimal.ROUND_UP);\\n\\n\t\treturn result.multiply(basisNumber);\\n\t}\\n}", "target": "173", "substitutes": {"capital": ["trial", "life", "fork", "trade", "cycle", "balance", "average", "frequency", "budget", "work", "profit", "rx", "year", "stock", "account", "frac", "micro", "share", "income", "market", "gain", "growth", "beta", "free", "change", "credit", "fee", "tax", "cash"], "interest": ["risk", "life", "force", "weight", "dollar", "fork", "strength", "value", "cycle", "efficiency", "balance", "interested", "low", "feature", "service", "power", "activity", "money", "fund", "ind", "profit", "length", "year", "family", "range", "amount", "fine", "invest", "income", "hour", "air", "freedom", "growth", "seed", "fee", "consider", "ignore", "price", "cost", "Interest", "rice"], "rate": ["rc", "core", "weight", "cycle", "grade", "frequency", "speed", "power", "r", "prime", "resource", "cr", "report", "rand", "Rate", "rx", "error", "range", "rr", "percent", "scale", "gain", "ry", "seed", "rates", "fee", "cost", "rice"], "is": ["IS", "io", "ios", "ar", "isa", "ais", "p", "s", "serv", "http", "os", "r", "abs", "isi", "b", "vs", "in", "iss", "rx", "ir", "iris", "iter", "its", "ris", "war", "ri", "stream", "ori", "src", "isc", "bs", "out", "bis", "was", "Is", "as", "us", "ui", "i", "has", "isl"], "br": ["res", "nr", "io", "i", "err", "Br", "bb", "rs", "tr", "sr", "er", "buf", "yr", "BR", "http", "r", "browser", "arr", "b", "gr", "dr", "bar", "ocr", "in", "lines", "obj", "mr", "fr", "src", "bs", "bridge", "ber", "bis", "bro", "str", "bh", "hr", "div", "reader", "iter", "rb"], "input": ["list", "rc", "request", " Input", "base", "raw", "string", "line", "output", " source", "inf", "data", "src", "type", " inf", "out", "text", "source", "Input", "id", "str", "format", "buffer", " inputs", "f", "reader", "temp"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n//        DecimalFormat df = new DecimalFormat(\"0.00000000\");\\n        \\n        final int N = Integer.parseInt(sc.next());\\n        final int K = Integer.parseInt(sc.next());\\n        long[] a = new long[N];\\n        long sum = 0;\\n        for (int i=0; i<N; i++)\\n            a[i] = Long.parseLong(sc.next());\\n        Arrays.sort(a);\\n        for (int i=0; i<N-K; i++)\\n            sum += a[i];\\n        out.println(sum);\\n        \\n        out.flush();\\n    }\\n}", "target": "230", "substitutes": {"sc": ["pc", "rc", "ch", "cs", "sub", "si", "cer", "txt", "cr", " scr", "bc", "sci", "ss", "ci", "se", "c", "src", "Sc", " SC", " ans", "scan", "nc", " Sc", "sel", "anc", "sp", "sb", "SC"], "out": ["Out", "exec", "file", "io", "w", "err", "op", "bin", "cmd", "string", "name", "p", "output", "s", "write", "log", "r", "t", "outs", "report", "b", "writer", "in", "input", "_", "error", "data", "cache", "obj", "page", "c", "tmp", "x", "inc", "OUT", "v", "off", "ex", "f", "o", "info", "temp", "i"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\\n\\n\tpublic static void bubble_sort(int[] a) {\\n\t\tint num_swaps = 0;\\n\t\tfor (int i = 0; i < a.length; i++) {\\n\t\t\tfor (int j = a.length - 1; j >= i+1; j--) {\\n\t\t\t\tif (a[j] < a[j-1]) {\\n\t\t\t\t\tint tmp = a[j];\\n\t\t\t\t\ta[j] = a[j-1];\\n\t\t\t\t\ta[j-1] = tmp;\\n\t\t\t\t\tnum_swaps++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tdisplay(a);\\n\t\tSystem.out.println(num_swaps);\\n\t}\\n\\n\tpublic static void display(int[] a) {\\n\t\tfor (int i = 0; i < a.length; i++) {\\n\t\t\tSystem.out.print(a[i]);\\n\t\t\tif (i != a.length - 1)\\n\t\t\t\tSystem.out.print(\" \");\\n\t\t\telse\\n\t\t\t\tSystem.out.print(\"\\n\");\\n\t\t}\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner s = new Scanner(System.in);\\n\t\tint n = s.nextInt();\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[i] = s.nextInt();\\n\t\t}\\n\t\tbubble_sort(a);\\n\t}\\n\\n}\\n\\n", "target": "170", "substitutes": {"a": ["missing", "tta", "sta", "w", "img", "ga", "address", "ca", "p", "oa", "aaa", "alpha", "ac", "m", "result", "ia", "na", "wa", "A", "ea", "sa", "ao", "qa", "ma", "z", "an", "work", "something", "b", "ab", "aux", "input", "ae", "ba", "ata", "data", "all", "da", "l", "aj", "u", "aw", "c", "another", "e", "audio", "area", "am", "x", "la", "asa", "d", "va", "y", "v", "api", "ha", "za", "aa", "f", "as", "o", "auto", "array", "ama", "ans", "active", "au"], "num_swaps": ["num_scats", "num_snats", "num_wsap", "num__swap", "num_scapes", "num__swaps", "num_swapes", "num_wsaps", "num__swats", "num_flats", "num_Swapes", "num_twaps", "num_swats", "num_waps", "num_collapes", "num_snapped", "num_snops", "num_wsats", "num_flaps", "num_Swats", "num_twapped", "num__switches", "num_swapped", "num_Swap", "num__wsap", "num_swops", "num_switches", "num__wsitches", "num_wops", "num_Swaps", "num_Switches", "num_scap", "num__wsaps", "num_flap", "num_scaps", "num_collaps", "num__wsats", "num_wapped", "num_twops", "num_wsitches", "num_collap", "num_collats", "num_swap", "num_snaps", "num_twats", "num_flitches", "num_wats"], "i": ["xi", "gi", "I", "is", "io", "si", "ie", "di", "name", "p", "oi", "cli", "ii", "hi", "ij", "index", "chi", "ki", "ni", "mini", "z", "ini", "mu", "b", "ai", "in", "phi", "ji", "li", "ci", "ti", "data", "ik", "zi", "ri", "l", "u", "bi", "qi", "c", "e", "ori", "iu", "it", "init", "mi", "x", "pi", "yi", "fi", "my", "eni", "id", "ip", "uri", "y", "v", "api", "ix", "f", "o", "ui", "info"], "j": ["bj", "old", "br", "ja", "si", "ie", "dy", "J", "p", "oi", "m", "jo", "ii", "part", "ij", "jet", "ni", "z", "js", "jj", "t", "b", "jl", "length", "ji", "li", "obj", "q", "l", "qi", "u", "oj", "aj", "e", "it", "x", "h", "next", "uj", "d", "je", "y", "ju", "v", "api", "key", "f", "o", "g", "k", "jp"], "tmp": ["addr", "test", "img", "ie", "space", "bb", "angle", "p", "buf", "diff", "alpha", "m", "part", "app", "sup", "txt", "fake", "copy", "vm", "jj", "mp", "lab", "kk", "now", "obj", "data", "cache", "page", "opp", "fb", "area", "su", "vt", "front", "pre", "pp", "v", "xxx", "amp", "tv", "cp", "f", "temp", "stuff", "pad", "rb"], "s": ["fs", "qs", "is", "ms", "si", "sf", "rs", "p", "er", "m", "gets", "gs", "os", "r", "sets", "sv", "sl", "abs", "b", "ls", "ds", "ins", "in", "ws", "ss", "fts", "ns", "se", "l", "sys", "u", "c", "ches", "ses", "e", "out", "bis", "ts", "xs", "S", "ssl", "es", "as", "o", "sb", "g", "strings"], "n": ["nu", "pos", "p", "nb", "nt", "m", "nor", "ne", "ln", "t", "ni", "z", "an", "sn", "b", "N", "in", "count", "nn", "no", "ns", "l", "u", "num", "c", "en", "e", "init", "conn", "h", "x", " N", "d", "un", "v", "len", "nc", "f", "nl", "o", "g", "net", "k"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tstatic BufferedReader in;\\n\tstatic PrintWriter out;\\n\tstatic StringTokenizer tok;\\n\\n\tvoid solve() throws IOException {\\n\t\tint[] a = nia( ni());\\n\t\tArrays.sort(a);\\n\t\tout.println(a[a.length-1]-a[0]);\\n\t}\\n\\n\tString ns() throws IOException {\\n\t\twhile (!tok.hasMoreTokens()) {\\n\t\t\ttok = new StringTokenizer(in.readLine(), \" \");\\n\t\t}\\n\t\treturn tok.nextToken();\\n\t}\\n\\n\tint ni() throws IOException {\\n\t\treturn Integer.parseInt(ns());\\n\t}\\n\\n\tlong nl() throws IOException {\\n\t\treturn Long.parseLong(ns());\\n\t}\\n\\n\tdouble nd() throws IOException {\\n\t\treturn Double.parseDouble(ns());\\n\t}\\n\\n\tString[] nsa(int n) throws IOException {\\n\t\tString[] res = new String[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tres[i] = ns();\\n\t\t}\\n\t\treturn res;\\n\t}\\n\\n\tint[] nia(int n) throws IOException {\\n\t\tint[] res = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tres[i] = ni();\\n\t\t}\\n\t\treturn res;\\n\t}\\n\\n\tlong[] nla(int n) throws IOException {\\n\t\tlong[] res = new long[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tres[i] = nl();\\n\t\t}\\n\t\treturn res;\\n\t}\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\tout = new PrintWriter(System.out);\\n\t\ttok = new StringTokenizer(\"\");\\n\t\tMain main = new Main();\\n\t\tmain.solve();\\n\t\tout.close();\\n\t}\\n}", "target": "214", "substitutes": {"in": ["din", "file", "pin", "io", "w", "is", "err", "In", "bin", "name", "socket", "m", "log", "part", "r", "pass", "this", "resource", "copy", "ini", "config", "ins", "lo", "rin", "input", "inner", "kin", "data", "win", "min", "read", "cl", "l", "init", "conn", "x", "lin", "source", "id", "inc", "con", "d", "path", "again", "login", "isin", "connection", "ex", "as", "reader", "IN", "inn"], "out": ["Out", "exec", "dump", "file", "list", "timeout", "io", "w", "client", "parent", "err", "png", "In", "bin", "window", "op", "string", "name", "line", "output", "cli", "write", "nt", "exp", "log", "part", "user", "outs", "max", "doc", "writer", "prefix", "input", "error", "data", "obj", "println", "cache", "page", "lock", "win", "outer", "pool", "init", "conn", "ou", "ext", "self", "left", "path", "OUT", "str", "again", "off", "key", "ex", "buffer", "to", "o", "up", "net", "temp", "call", "co"], "tok": ["token", "untok", "talk", "tak", "Tek", "ttek", " tek", "pak", "itock", "Tak", "untoken", "Tock", "Toks", "untak", "retoken", "tock", "stoken", "stok", "itok", " token", "toks", " tock", "ttask", "poken", "tkey", "ttoken", "stak", "retak", "Token", "ttalk", "Tkey", " tkey", "ttok", "task", "itak", "itkey", "retok", " task", "Task", "pok", "tek", " tak", "Talk", "retalk", "untek", "ttak", "stoks", "poks", "Tok"], "a": ["missing", "span", "tta", "sta", "fa", "ga", "ca", "code", "p", "oa", "ua", "s", "alpha", "aaa", "m", "na", "wa", "A", "sa", "ea", "ana", "ma", "ab", "an", "b", "aux", "ae", "ba", "actions", "ata", "pa", "da", "l", "aj", "u", "aw", "c", "e", "area", "am", "asa", "events", "d", "va", "y", "ha", "za", "aa", "f", "as", "active", "array", "ama", "auto", "au"], "n": ["network", "w", "ron", "name", "p", "nb", "s", "m", "cn", "on", "nt", "nan", "j", "le", "ne", "ln", "t", "ni", "z", "r", "none", "one", "b", "N", "sn", "an", "count", "no", "all", "min", "ns", "not", "node", "l", "u", "en", "c", "num", "e", "fn", "conn", "init", "x", "h", "left", "d", "y", "v", "len", "nc", "f", "o", "g", "net", "k"], "res": ["results", "vals", "qs", "Res", "re", "maps", "cons", "css", "ries", "ms", "cs", "params", "blocks", "msg", "rs", "ress", "ros", "result", "exp", "des", "resources", "req", "rev", "os", "r", "pass", "resource", "arr", "gr", "ores", "max", "response", "rus", "values", "Rs", "rel", "fields", "RES", "rec", "data", "cache", "ks", "mr", "changes", "ris", "rss", "rem", "bs", "resp", "right", "ps", "val", "models", "rap", "rest", "ids", "rez", "pers", "ret", "json", "rates", "resolution", "features", "reg", "pres", "details", "runs", "ras", "rows"], "i": ["gi", "xi", "adi", "I", "is", "io", "si", "di", "ie", "ami", "oi", "me", "abi", "ii", "hi", "index", "j", "mini", "z", "uli", "ini", "mu", "b", "ai", "phi", "ji", "multi", "li", "ci", "ik", "q", "zi", "ri", "qi", "u", "bi", "e", "ori", "iu", "it", "my", "mi", "x", "pi", "yi", "fi", "eni", "init", "h", "id", "ip", "uri", "field", "y", "v", "ix", "vi", "anti", "f", "ui", "o", "info"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint maxNum = scan.nextInt();\\n\t\tList<Integer> numArray = new ArrayList<Integer>();\\n\t\tfor(int i = 0; i < maxNum; ++i) {\\n\t\t\tnumArray.add(scan.nextInt());\\n\t\t}\\n\t\tscan.close();\\n\\n\t\tint count = 0;\\n\t\twhile(true) {\\n\t\t\tboolean finishFlg = false;\\n\t\t\tfor(int i=0; i < numArray.size(); ++i) {\\n\t\t\t\t// 2\u3067\u5272\u308c\u308b\u306a\u3089\u5272\u3063\u3066\u66f4\u65b0\\n\t\t\t\tif(numArray.get(i) % 2 == 0) {\\n\t\t\t\t\tnumArray.set(i, numArray.get(i) / 2);\\n\t\t\t\t} else {\\n\t\t\t\t\tfinishFlg = true;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif(finishFlg) break;\\n\t\t\tcount++;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n", "target": "196", "substitutes": {"scan": ["chan", "span", "get", "search", "ser", "n", "sr", "er", "see", "connect", "query", "sort", "ner", "sc", "man", "serv", "r", "ln", "sync", "system", "an", "ann", "report", "in", "inner", "match", "nn", "cache", "sin", "win", "san", "read", "sign", "se", "sys", "l", "conn", "can", "plan", " scanner", "source", "cat", "look", "ry", "slice", "vi", "clean", "server", "Scan", "spin", "watch", "ignore", "reader", "stat", "parse", "con", "check"], "maxNum": ["totalNum", "totalLen", "maxnum", " maxnum", "MaxDist", "axnum", "axLen", "axNum", "totalnum", "maxNumber", "MaxNumber", "totalDist", "maxLen", " maxNumber", "maxDist", "MaxLen", "totalNumber", " maxDist", "MaxNum", " maxLen", "axNumber"], "numArray": ["checkSquare", "origArray", "intSquare", "uniqueMatrix", "origarray", "uniquearray", " numAr", " numarray", "uniqueArray", "initArray", "numInstance", " numSquare", "numMatrix", "numarray", "intArray", "intarray", " numAccess", "intOrder", "origAr", "intInstance", "numSquare", "checkArray", " numOrder", "initarray", "intAr", "checkAr", "numAr", "numOrder", "uniqueInstance", "checkOrder", "origAccess", " numInstance", "initAr", "initAccess", " numMatrix", "intMatrix", "numAccess"], "i": ["gi", "xi", "I", "io", "si", "ie", "di", "p", "oi", "m", "abi", "ii", "hei", "chi", "j", "index", "ni", "z", "mini", "ini", "mu", "uli", "b", "ai", "phi", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "c", "e", "ori", "iu", "eni", "esi", "mi", "x", "pi", "h", "yi", "fi", "id", "ip", "uri", "y", "v", "ix", "slice", "f", "ui", "o", "info"], "count": ["list", "force", "parent", "weight", "code", "base", "diff", "loop", "nt", "counter", "length", "cache", "child", "pool", "c", "process", "sum", "id", "depth", "offset", "Count", "len", "found", "call"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main\\n{\\n\tpublic static void main(String [] Args)\\n\t{\\n\t\tScanner in=new Scanner(System.in);\\n\t\tint n=in.nextInt();\\n\t\tdouble ans;\\n\t\tans=n/2;\\n\t\tans=ans+(double)(n%2);\\n\t\tSystem.out.println(ans/(double)n);\\n\t\t\\n\t}\\n}\\n", "target": "64", "substitutes": {"Args": ["Out", "Line", "Ex", "Ext", "params", "err", "Name", "arg", "line", "Arg", "buf", "Array", "gs", "Main", "lang", " Arg", "lines", "Path", " arg", "Str", "Cmd", "Input", "Parts", "str", "ex", "Parser", " Main"], "in": ["exec", "din", "fa", "err", "In", "gen", "bin", "p", "line", "s", "query", "socket", "m", "log", "serv", "r", "pass", "ln", "an", "ini", "b", "doc", "ins", "rin", "inf", "inner", "input", "lib", "data", "sin", "win", "min", "c", "init", "conn", "out", "lin", "tin", "inc", "d", "con", "path", "again", "nin", "login", "isin", "buffer", "scan", "ex", "f", "as", "reader", "i", "IN", "inn"], "n": ["a", "network", "number", "nat", "Ns", "non", "p", "anon", "s", "nb", "nt", "m", "na", "anne", "ne", "nan", "j", "ln", "mn", "ni", "z", "an", "sn", "ann", "b", "N", "pn", "rn", "nn", "ns", "l", "num", "c", "en", "conn", "x", " N", "nw", "d", "nin", "len", "nc", "f", "o", "nl", "net", "i", "k"], "ans": ["a", "span", "vals", "ks", "ants", "cs", "AN", "lan", "anon", "s", "nos", " Ans", "offs", "na", "ents", "ANS", "os", "nan", "ln", "ens", "ana", "anas", "nes", "outs", "an", "sk", "ann", "ars", "anges", "ls", "ds", "ins", "vs", "aces", "anne", " means", "ss", "cas", "nn", "aning", "ns", "anes", "ends", "ches", "plan", "can", "acts", "reads", " spans", "ats", "ions", "es", "len", "aned", "scan", "ons", "anc", "as", " ants", " scans", "errors", "nas", "rows"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main\\n{\\n\tpublic static void main(String [] Args)\\n\t{\\n\t\tScanner in=new Scanner(System.in);\t\t\\n\t\tint n=in.nextInt();\\n\t\tint flag=0;\\n\t\tif(n>81)\\n\t\t{\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\telse\\n\t\t{\\n\t\t\tfor(int i=1;i<=9;i++)\\n\t\t\t{\\n\t\t\t\tif(n%i==0&&n/i<10)\\n\t\t\t\t{\\n\t\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\t\tflag=1;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif(flag==0)\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}\\n", "target": "194", "substitutes": {"Args": ["Out", "Line", "Ex", "Ext", "params", "err", "Name", "cmd", "arg", "line", "Arg", "buf", "Array", "gs", "Main", "lang", " Arg", "lines", "Path", " arg", "Str", "Cmd", "Input", "Parts", "str", "Flag", " Main"], "in": ["exec", "din", "is", "re", "err", "In", "bin", "er", "s", "query", "socket", "user", "log", "serv", "fin", "r", "pass", "ln", "inn", "ini", "b", "fe", "doc", "ins", "rin", "inf", "input", "inner", "readable", "sin", "win", "min", "c", "init", "conn", "out", "bis", "lin", "tin", "inc", "str", "again", "nin", "login", "isin", "scan", "ex", "connection", "f", "as", "g", "reader", "IN", "con"], "n": ["nu", "network", "span", "number", "a", "nr", "w", "p", "nb", "s", "nt", "j", "t", "ni", "z", "sn", "b", "N", "max", "count", "nn", "size", "all", "no", " ni", "ns", "l", "u", "num", "en", "c", "e", "conn", "x", "dn", "nw", "d", "y", "v", "len", "nc", "f", "o", "nl", "net", "k"], "flag": ["force", "pin", "weight", "status", "big", "err", "char", "ie", "arg", "code", "group", "fun", "sort", "log", "wait", "part", "feature", "debug", "sync", "ish", "ind", "start", "count", "kind", "bug", "child", "af", "type", "ag", "bit", "fi", "id", "option", "style", "field", "lag", "age", "offset", "len", "like", "Flag", "key", "f", "fd", "info", "draft", "flags", "tag"], "i": ["gi", "xi", "I", "tri", "si", "di", "ie", "p", "oi", "cli", "m", "abi", "ii", "hi", "chi", "j", "t", "ni", "z", "ini", "mu", "ai", "length", "phi", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "c", "l", "e", "iu", "pi", "x", "h", "fi", "ip", "uri", "d", "v", "ix", "slice", "f", "ui", "o"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int C = sc.nextInt();\\n        int X = sc.nextInt();\\n\\n        System.out.println(solve(A, B, C, X));\\n\\n        sc.close();\\n    }\\n\\n    static int solve(int A, int B, int C, int X) {\\n        int result = 0;\\n        for (int i = 0; i <= A; ++i) {\\n            for (int j = 0; j <= B; ++j) {\\n                for (int k = 0; k <= C; ++k) {\\n                    if (i * 500 + j * 100 + k * 50 == X) {\\n                        ++result;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n}", "target": "127", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "cs", "ser", "ca", "search", "cer", "sf", "cor", "sub", "sr", "ctx", "cc", "ner", "tc", "exp", "soc", "sec", "sync", "system", "cr", "osc", "sq", "lc", "class", "cont", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "dc", "mc", "scan", "nc", " Sc", "anc", "uc", "server", "sh", "sp", "sb", "parse", "SC"], "A": ["a", "API", "Alpha", "U", "K", "I", "This", "HA", "Ang", "AC", "Ant", "As", "Na", "Ab", "Ca", "Array", "AMI", "LA", "AA", "AI", "Adam", "IA", "The", "Y", "Java", "Az", "AD", "Area", "Ar", "AR", "Ma", "BA", "S", "P", "App", "mA", "F", "Art", "AP", "Ak", "Am", "At", "Ac", "CA"], "B": ["O", "K", "U", "E", "I", "Ab", "Bi", "AB", "J", "T", "BE", "NB", "TB", "MB", "G", "b", "W", "N", "R", "BC", "GB", "D", "H", "CB", "Y", "DB", "L", "M", "Bu", "Job", "LB", "Bs", "BA", "P", "F", "V", "BB", "BI", "WB"], "C": ["O", "K", "U", "E", "I", "Cs", "CI", "Con", "AC", "CC", "CS", "CR", "T", "CU", "CL", "Cy", "CF", "G", "N", "W", "R", "BC", "D", "Y", "DC", "Z", "L", "Cu", "c", "CE", "Sc", "JC", "M", "KC", "CP", "S", "P", "F", "V", "Ch", "SC", "CM", "CA"], "X": ["O", "xi", "K", "U", "E", "I", "Ex", "CI", "CC", "J", "T", "CR", "MAX", "FF", "PC", "XL", "CL", "G", "Max", "WORK", "W", "N", "IX", "Q", "XX", "DX", "VALUE", "R", "XY", "XP", "H", "D", "Check", "Y", "XXX", "Work", "Z", "TX", "Location", "L", "CE", "M", "x", "xx", "S", "P", "F", "ID", "ix", "V", "PE", "Code", "ZX"], "result": ["gi", "test", "number", "results", "rc", "our", "score", "true", "err", "value", "rank", "code", "diff", "grade", "rate", "average", "feature", "r", "valid", "default", "counter", "response", "length", "df", "cup", "end", "match", "data", "total", "use", "row", "range", "page", "instance", "goal", "success", "Result", "global", "master", "function", "compl", "message", "root", "card", "current", "duration", "ret", "const", "runner", "rule", "future", "found", "start"], "i": ["gi", "xi", "a", "I", "is", "io", "si", "ie", "ami", "p", "oi", "ii", "ki", "ni", "z", "ini", "b", "ai", "in", "ji", "li", "ci", "ik", "ri", "qi", "u", "bi", "c", "l", "init", "ori", "iu", "e", "mi", "x", "pi", "h", "id", "ip", "y", "ix", "v", "api", "f", "ui"], "j": ["a", "I", "ch", "br", "n", "jc", "ie", "J", "p", "jo", "ii", "ij", "r", "jet", "z", "js", "jj", "ib", "b", "ji", "li", "ik", "q", "l", "aj", "u", "qi", "c", "e", "x", "h", "d", "je", "y", "v", "key", "f", "o", "jp"], "k": ["K", "kn", "kr", "ks", "ak", "p", "mk", "uk", "kh", "ki", "z", "sk", "ek", "b", "ck", "kk", "ke", "ky", "ik", "q", "ijk", "u", "c", "ka", "x", "dk", "kw", "ph", "id", "d", "y", "kid", "v", "key", "ko", "ok", "o", "g"]}}
{"code": "import java.io.*;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) throws IOException{\\n\t\tBufferedReader buf = new BufferedReader(new InputStreamReader(System.in));\\n\tint a,b;\\n\tString s = buf.readLine();\\n\tString[] strlAry =s.split(\" \");\\n\tfor(int i=0;i<strlAry.length;i++){\\n\t}\t\\n\ta= Integer.parseInt(strlAry[0]);\\n\tb= Integer.parseInt(strlAry[1]);\\n\tSystem.out.println(a*b+\" \"+2*(a+b));\t\\n\t}\\n}", "target": "92", "substitutes": {"buf": ["fs", "tab", "pkg", "br", "rw", "job", "cmd", "uf", "bb", "ctx", "fp", "buff", "r", "txt", "wb", "abb", "func", "ab", "cf", "queue", "proc", "fb", "src", "tmp", "Buff", "out", "h", "text", "ff", "Buffer", "bed", "ered", "cv", "bag", "buffer", "f", "fd", "reader", "cb", "fw", "rb"], "a": ["sta", "fa", "ga", "ca", "base", "p", "oa", "ac", "ia", "aaa", "alpha", "na", "ada", "A", "sa", "ea", "ma", "an", "ab", "ai", "ae", "ba", "aka", "da", "l", "aj", "u", "c", "e", "af", "am", "x", "area", "la", "d", "va", "api", "aa", "as", "auto", "ama", "au", "ad"], "b": ["xb", "br", "base", "bb", "lb", "nb", "eb", "batch", "bot", "r", "A", "abb", "ab", "ib", "bar", "pb", "length", "bu", "bc", "url", "ub", "ba", "ob", "pa", "B", "l", "mb", "c", "bi", "e", "fb", "bs", "x", "h", "d", "y", "db", "v", "emb", "aa", "bf", "f", "sb", "be", "cb", "ad", "rb"], "s": ["fs", "is", "n", "string", "p", "line", "m", "os", "r", "t", "sl", "abs", "sample", "ls", "in", "input", "sg", "ss", "data", "l", "u", "c", "ses", "e", "su", "str", "v", "f", "services", "sb", "array", "ans", "g", "strings"], "strlAry": ["strlArrayRY", "strlAcck", "strlsArys", "strlcAry", "strlcArying", "strlBric", "strlcAccy", "strlsArry", "strlArrayck", "strlExcy", "strlsArrys", "strlsArcy", "strlAcries", "strlAcry", "strlArrying", "strlsAries", "strlFry", "strsArric", "strlAcrying", "strlArys", "strlAcRY", "strlAsry", "strlArRY", "strlArrayry", "strlExry", "strlcAcy", "strlFRY", "strsArry", "strlsArries", "strlsAry", "strlAries", "strlAric", "strlsAcRY", "strlArric", "strlcAcrying", "strlArry", "strlAck", "strlBry", "strsAric", "strlAcrys", "strlsAcck", "strlArcy", "strlAsries", "strsAry", "strlcAcries", "strlExrying", "strlBrys", "strsARY", "strlcAcry", "strlExries", "strlAcy", "strlsAcy", "strlARY", "strlsAcrys", "strlAsRY", "strlArrys", "strlFrys", "strlAscy", "strlArrayrys", "strsArrys", "strsArys", "strlBRY", "strlcAries", "strlArying", "strlsARY", "strlsAcry", "strlAccy", "strlAsrys", "strlsAck", "strlFck", "strlArries", "strsArRY", "strlAsric"], "i": ["xi", "gi", "I", "si", "n", "di", "p", "oi", "ii", "index", "j", "t", "ni", "z", "ai", "ji", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "c", "e", "ori", "iu", "pi", "x", "h", "fi", "id", "d", "v", "f", "ui", "o", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.nextLine();\\n\t\tchar a = s.charAt(0);\\n\t\tchar b = s.charAt(1);\\n\t\tchar c = s.charAt(2);\\n\t\tchar d = s.charAt(3);\\n\t\tchar[] chars = new char[] { a, b, c, d };\\n\\n\t\tfor (int i = 0; i <= 3; i++) {\\n\t\t\tint con = 0;\\n\t\t\tfor (int n = 0; n <= 3; n++) {\\n\t\t\t\tif (chars[i] == chars[n]) {\\n\t\t\t\t\tcon += 1;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif (con == 2) {\\n\t\t\t\tif (i == 3) {\\n\t\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "33", "substitutes": {"sc": ["pc", "esc", "rc", "ch", "desc", "cs", "sf", "cc", "ner", "sec", "soc", "acc", "enc", "r", "system", "sl", "osc", " scr", "bc", "sci", "ss", "cl", "scope", "se", "src", "Sc", "asc", "out", "text", "str", " SC", "scan", "nc", " Sc", "uc", "server", "anc", "sh", "sp", "sb", "g", "parser", "SC"], "s": ["fs", "is", "ks", "w", "si", "string", "sf", "space", "p", "m", "service", "gs", "os", "t", "sync", "sv", "sl", "abs", "ls", "in", "your", "ws", "ss", "stats", "its", "ns", "l", "se", "u", "sys", "ses", "e", "bs", "h", "su", "ts", "y", "json", "shell", "f", "as", "o", "us", "sb", "g", "strings", "k"], "a": ["fa", "ak", "ar", "ca", "at", "base", "name", "p", "au", "ac", "alpha", "ada", "r", "A", "sa", "ab", "an", "ai", "ae", "ba", "da", "l", "e", "area", "x", "am", "la", "art", "va", "api", "aa", "f", "as", "k"], "b": ["bas", "bb", "p", "nb", "bd", "eb", "r", "ab", "bc", "ba", "B", "l", "u", "e", "ad", "fb", "bs", "x", "y", "db", "v", "aa", "f", "o", "sb", "g", "be", "cb", "k", "rb"], "c": ["ch", "w", "col", "p", "C", "ac", "cd", "r", "z", "ec", "cr", "lc", "cf", "ci", "l", "u", "e", "x", "cat", "ct", "y", "dc", "cp", "f", "o", "cy", "g", "k"], "d": ["dd", "di", "dy", "bd", "cd", "j", "t", "du", "z", "dt", "dr", "ds", "dom", "D", "da", "l", "u", "e", "h", "x", "v", "dc", "f", "k"], "chars": ["Chas", "chacters", "charars", "shars", "phas", "phacters", "shunks", "candacters", "shards", "shacters", "Chars", "characters", "phars", " chards", "chases", "comparts", "compans", "chas", "compacters", "candases", " chunks", " chacters", "charts", "constarts", "chararts", "phases", "constans", "compars", "Chases", "charards", "chans", "candas", "constacters", "chunks", "chards", "candars", "charunks", "charans", "constars", "Chacters"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "oi", "axis", "ii", "part", "index", "j", "chi", "t", "ni", "z", "mini", "ini", "ind", "ai", "phi", "multi", "li", "ci", "ti", "ri", "qi", "u", "bi", "l", "e", "init", "iu", "ori", "type", "mi", "x", "pi", "limit", "conv", "ip", "id", "y", "v", "ix", "f", "ui", "o"], "con": ["pc", "fc", "Con", "w", "cons", "union", "non", "p", "ic", "ion", "ac", "cn", "nt", "on", "m", "cross", "auc", "r", "ran", "an", "lc", "conf", "in", "count", "ci", "no", "don", "common", "syn", "l", "en", "num", "conn", "can", "x", "pen", "inc", "un", "len", "connection", "const", "nc", "f", "free", "CON", "aff", "conv", "connect"], "n": ["nu", "ny", "name", "p", "nb", "ner", "yn", "m", "on", "nt", "cn", "na", "ne", "j", "mn", "ni", "z", "an", "sn", "N", "pn", "rn", "nn", "ns", "l", "u", "num", "en", "e", "conn", "out", "dn", "un", "y", "v", "nc", "f", "o", "net", "g"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tfor(;;){\\n\t\t\tint H = sc.nextInt();\\n\t\t\tint W = sc.nextInt();\\n\t\t\t\\n\t\t\tif(H == 0 && W == 0)\\n\t\t\t\tbreak;\\n\t\t\\n\t\t\tfor(int i = 0;i < H;i++){\\n\t\t\t\tif(i == 0 || i == H - 1){\\n\t\t\t\t\tfor(int j = 0;j < W;j++){\\n\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t}\\n\t\t\t\t}else{\\n\t\t\t\t\tfor(int j = 0;j < W;j++){\\n\t\t\t\t\t\tif(j == 0 || j == W - 1)\\n\t\t\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t\t\telse\\n\t\t\t\t\t\t\tSystem.out.print(\".\");\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\t\tSystem.out.print(\"\\n\");\\n\t\t\t\t}\\n\t\t\tSystem.out.print(\"\\n\");\\n\t\t}\\n\t}\\n}", "target": "19", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "cs", "ser", "si", "cor", "cer", "screen", "sr", "ctx", "com", "cc", "ner", "sec", "enc", "sync", "system", "osc", "cr", "sq", "cont", " scr", "bc", "sci", "cle", "ss", "ci", "cus", "scope", "se", "c", "src", "Sc", "asc", "out", "or", "sche", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "server", "parser", "SC"], "H": ["O", "K", "U", "I", "HA", "w", "He", "J", "C", "T", "RH", "GH", "A", "G", "N", "Q", "R", "Y", "Ha", "Hi", "B", "Z", "L", "M", "TH", "h", "X", "MH", "HK", "Rh", "HH", "S", "F", "HC", "P", "V", "EH", "HY", "SH", "CH", "HI"], "W": ["K", "U", "E", "I", "WH", "w", "MW", "Sw", "Wi", "DW", "J", "WR", "T", "Wh", "WE", "G", "N", "Q", "Width", "R", "WC", "D", "AW", "Y", "VW", "B", "Z", "NW", "L", "Win", "TW", "M", "SW", "GW", "h", "X", "Rh", "We", "RW", "S", "P", "WS", "F", "Wa", "V", "FW", "WP", "Web", "WB", "SH"], "i": ["a", "xi", "I", "io", "si", "n", "di", "ami", "p", "oi", "m", "ii", "hi", "ij", "chi", "r", "index", "ki", "ni", "z", "ini", "b", "ai", "ji", "li", "ci", "ik", "zi", "l", "ri", "u", "bi", "qi", "ori", "iu", "it", "eni", "mi", "h", "x", "pi", "yi", "id", "y", "v", "ix", "vi", "f", "ui", "o", "jp"], "j": ["bj", "w", "job", "ja", "si", "n", "jc", "ie", "dj", "J", "p", "jo", "ii", "ij", "jet", "z", "js", "jj", "jl", "b", "ji", "end", "li", "obj", "ik", "l", "aj", "u", "oj", "qi", "e", "it", "h", "x", "pr", "adj", "uj", "d", "je", "y", "jit", "jen", "v", "ix", "key", "f", "o", "g", "k", "jp"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    static PrintWriter out = new PrintWriter(System.out);\\n    static Scanner sc = new Scanner(System.in);\\n    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n    int maxn;\\n    long[] frac,inv;\\n    long mod = 1000000000+7;\\n    public static void main(String[] args) throws IOException {\\n        Main main = new Main();\\n//        main.solve();\\n        System.out.println(main.solve());\\n    }\\n    long solve() throws IOException {\\n        int n = sc.nextInt();\\n        return (n+1)/2;\\n    }\\n}\\n\\n", "target": "233", "substitutes": {"out": ["Out", "exec", "file", "res", "din", "io", "w", "err", "bin", "parser", "string", "name", "output", "s", "write", "m", "log", "r", "outs", "report", "b", "writer", "ins", "in", " in", "input", "proc", "error", "data", "all", "c", "source", "inc", "OUT", "buffer", "console", "ex", "f", "o", "info", "i", "IN"], "sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ser", "cer", "sr", "ctx", "cr", "sq", "lc", " cr", " scr", "bc", "sci", "ss", "ci", "cl", "Sc", "sch", "nc", "sel", "anc", "sp", "SC", "spec"], "reader": ["pc", "rc", " Reader", "io", "w", "i", "er", "ner", " r", "r", "writer", "R", "input", "inner", "proc", "read", "l", "c", "stream", "e", "x", "or", "Reader", "buffer", "f", "ino", "iter"], "maxn": ["maxN", "axN", "maxp", "axp", "MaxN", "axn", " maxp", "Maxn", "Maxp", " maxN"], "frac": ["fs", "cost", "fac", "exc", "err", "bin", "diff", "exp", "auc", "arr", "abs", "mu", "fe", "df", "comp", "rand", "circ", "cache", "fr", "fn", "init", "vec", "adj", "scale", "str", " fr", "f", "au", "norm"], "inv": ["nu", "nr", "reverse", "random", "eff", "log", "rev", "chi", "le", "ln", "arr", "sq", "mu", "abs", "rel", "conf", "q", "cl", "init", " inverse", "sum", "dev", "block", "inc", "len", "shift", "au"], "mod": ["fac", "mult", "step", "tr", "fun", "mode", "ac", "sec", "m", "exp", "complex", "mix", "comp", "fre", "pack", "ow", "norm", "num", "Mod", "dev", "scale", "str", "div", "add", "mad", "reg", "mem", "ver"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tInteger a[] = new Integer[N];\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t}\\n\t\tsc.close();\\n\t\tArrays.sort(a, Collections.reverseOrder());\\n\t\tint A = a[0], B = 0;\\n\\n\t\tfor (int i = 1; i < N; i++) {\\n\t\t\tif (i % 2 == 0) {\\n\t\t\t\tA += a[i];\\n\t\t\t} else {\\n\t\t\t\tB += a[i];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(A - B);\\n\t}\\n}\\n", "target": "132", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "core", "cs", "search", "ca", "cor", "cer", "sf", "ser", "sr", "s", "cc", "ner", "sec", "soc", "enc", "sa", "sync", "system", "cr", "osc", "sq", "lc", "bc", "sci", "ss", "ci", "small", "sign", "cus", "cl", "scope", "se", "c", "src", "Sc", "or", "sche", "sem", "cv", "sch", "mc", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "reader", "SC"], "N": ["O", "K", "U", "E", "I", "Part", "NR", "Na", "n", "Ns", "Len", "C", "T", "Ni", "J", "NT", "Ne", "NB", "Size", "Q", "R", "D", "H", "Y", "NA", "Z", "Num", "L", "M", "X", "No", "NE", "None", "S", "P", "F", "Node", "V", "Count", "NS", "Number", " n"], "a": ["missing", "tta", "ar", "ga", "n", "code", "au", "p", "s", "ac", "alpha", "aaa", "Array", "na", "r", "sa", "ea", "t", "ma", "abs", "an", "ab", "work", "b", "aux", "count", "ba", "data", "ata", "ava", "l", "aj", "u", "c", "e", "working", "area", "x", "am", "va", "y", "aa", "f", "as", "o", "auto", "array", "ama"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "ie", "p", "oi", "m", "ii", "hi", "index", "r", "j", "chi", "ni", "ini", "b", "mu", "ai", "in", "phi", "li", "ci", "ti", "q", "zi", "l", "qi", "u", "bi", "c", "ri", "e", "init", "it", "iu", "mi", "x", "pi", "h", "fi", "id", "ip", "uri", "y", "v", "ix", "slice", "api", "f", "o", "ui", "start", "k"], "A": ["API", "O", "U", "E", "I", "Alpha", "This", "HA", "AC", "As", "Ab", "AF", "AB", "Ca", "C", "T", " I", "Array", "AMI", "PA", "LA", "AA", "G", "AI", "IA", "D", "H", "AW", "NA", "L", "Average", "MA", "M", "Bu", "Area", "Ar", "Offset", "TA", "The", "BA", "S", "P", "Ma", "mA", "AP", "Am", "At", "CA"], "B": ["Bar", "E", "I", "BS", "Block", "Bal", "Ab", "Bi", "AB", "BF", "BE", "Blue", "NB", "TB", "Base", "MB", "b", "QB", "Both", "BC", "GB", "D", "UB", "Y", "Beta", "DB", "L", "M", "IB", "LB", "Bs", "BA", "OB", "F", "V", "BB", "BI", "WB", "BER"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\\n    private static int pow(int base,int os) {\\n        if(os == 0)\\n            return 1;\\n        int temp = pow(base, os/2);\\n        if (os % 2 == 0)\\n            return temp * temp;\\n        else\\n            return (base * temp * temp);\\n    }\\n\\n    public static void main(String[] args) {\\n\\n        Scanner input = new Scanner(System.in);\\n        int x = input.nextInt();\\n        int ans = 0;\\n        for(int i=1;i<=x;++i) {\\n            for (int j = 2; j <= x; ++j) {\\n                int num = pow(i, j);\\n                if (num > x)\\n                    break;\\n                ans = Math.max(ans, pow(i, j));\\n            }\\n        }\\n        System.out.println(x==1?1:ans);\\n\\n    }\\n}\\n", "target": "143", "substitutes": {"base": ["a", "flat", "bas", "io", "ios", "pos", "core", "parent", "old", "padding", "n", "bin", "name", "p", "bot", "letter", "http", "Base", "index", "ase", "null", "fake", "local", "site", "b", "count", "prefix", "size", "cache", "object", "total", "normal", "init", "tmp", "bs", "area", "id", "scale", "pre", "offset", "iso", "es", "root", "kit", "f", "o", "auto", "info", "start"], "os": ["fs", "is", "ios", "io", "pos", "bos", "op", "cs", "oss", "dos", "si", "ops", "oa", "ose", "oi", "s", "oS", "nos", "des", "pse", "z", "outs", "Os", "ls", "ss", "no", "los", "object", "so", "sys", "bs", "oct", "bis", "mos", "ps", "osi", "offset", "iso", "cos", "ol", "es", "oid", "OS", "of", "o", "auto", "us", "oes"], "temp": ["test", "number", "flat", "comb", "parent", "w", "pos", "perature", "n", "p", "unit", "wrap", "diff", "tem", "ii", "fake", "zero", "null", "this", "mini", "copy", " Temp", "empty", "local", "partial", "lc", "emp", "max", " temporary", "count", "prefix", "now", "cum", "stable", "level", "size", "cache", "opt", "py", "c", "init", "tmp", "out", "or", " tmp", "format", "offset", "es", "current", "draw", "const", "Temp", "f", "ui", "iter", "stuff", "fort", "porary"], "input": ["file", "iterator", "io", "client", "parser", "string", " Input", "form", "request", "output", "ner", "flow", "http", "r", "index", "null", "this", "view", "image", "in", "inf", "inner", "context", "data", "object", "instance", "container", "stream", "out", "text", "filter", "print", "Input", "source", "control", "feed", "buffer", "f", "util", "reader", "iter", "parse", "IN"], "x": ["xi", "wx", "px", "w", "pos", "xe", "n", "p", "ic", "ctx", "s", "xt", "m", "cross", "index", "zero", "t", "z", "one", "work", "an", "max", "xxxx", "rex", "XX", "xc", "xy", "rx", "lex", "ax", "l", "u", "c", "e", "xa", "xes", "xs", "tx", "X", "python", "xx", "yx", "d", "ux", "y", "ix", "v", "xxx", "ex", "xp", "f", "plus", "array", "k"], "ans": ["a", "span", "ants", "ations", "cs", "n", "lan", "ops", "errors", "anon", "s", "amps", "na", "ANS", "ens", "nan", "anas", "ana", "outs", "an", "aces", "ann", "ars", "ls", "acs", "vs", "ins", "lines", "ss", "ians", "ns", "plan", "acts", "can", "xs", "reads", "ats", "eps", "aus", "ids", "ions", "es", "aned", "scan", "ons", "as", "features", " scans", "ays", "rows"], "i": ["xi", "gi", "a", "I", "is", "io", "si", "ie", "di", "p", "cli", "ii", "hi", "index", "ni", "z", "ini", "b", "ai", "in", "phi", "ji", "li", "ci", "zi", "ri", "qi", "u", "bi", "c", "l", "init", "ori", "iu", "eni", "mi", "pi", "yi", "ip", "uri", "id", "y", "v", "ix", "ui", "info"], "j": ["bj", "pos", "job", "ja", "si", "n", "jc", "ie", "code", "J", "p", "jo", "ii", "ij", "index", "ni", "z", "js", "jj", "b", "jl", "ji", "end", "li", "obj", "q", "l", "aj", "u", "bi", "c", "h", "out", " dj", "uj", "d", "y", "v", "api", "key", "f", "o", "ui", "k", "jp"], "num": ["nu", "span", "number", "comb", "nr", "col", "err", "um", "bin", "n", "gen", "non", "unit", "nb", "mom", "na", "index", "loc", "ul", "ni", "coord", "b", "bc", "mon", "nn", "Num", "norm", "init", "conv", "nam", "sum", "id", "cat", "nom", "inc", "uni", "len", "nc", "net", "mem", "iter", "seq", "con", "cal"]}}
{"code": "import java.io.FileNotFoundException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws FileNotFoundException {\\n\\n\t\t//    \tFile file = new File(\"src/in.txt\");\\n\t\t//    \tScanner sc = new Scanner(file);\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tString S = sc.next();\\n\t\tsc.close();\\n\\n\t\tchar[] s = S.toCharArray();\\n\\n\t\tint[] count = new int[4];\\n\\n\t\tfor(int i=0;i<S.length();i++) {\\n\t\t\tfor(int j=0;j<S.length();j++) {\\n\t\t\t\tif(s[i]==s[j]) {\\n\t\t\t\t\tcount[i]++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tboolean result = true;\\n\t\tfor(int i=0;i<S.length();i++) {\\n\t\t\tif(count[i]!=2) {\\n\t\t\t\tresult=false;\\n\t\t\t}\\n\t\t}\\n\t\tif(result) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "33", "substitutes": {}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\t\\n\t\tString[] s = stdIn.next().split(\"\");\\n\t\t\\n\t\tlong a = 0;\\n\t\tfor(int i = 0; i < s.length; i++) {\\n\t\t\ta += Integer.parseInt(s[i]);\\n\t\t}\\n\t\tif(a % 9 == 0) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\t\\n\t\t\\n\\n\t}\\n\\n}\\n", "target": "93", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\t  public static void judge(int m,int f,int r) {\\n\t\t  if(m==-1 && f==-1 && r==-1) {\\n\t\t\t  System.exit(0);\\n\t\t  }\\n\t\t  if(m==-1 || f == -1) {\\n\t\t\t  System.out.print(\"F\");\\n\t\t  }else {\\n\t\\n\t\t  if(m+f>=80) {\\n\t\t \\n\t\t  System.out.print(\"A\");\\n\t      }\\n\t\t  else if(m+f<80 && m+f>=65) {\\n\t\t\t\\n\t\t  System.out.print(\"B\");\\n\t      }\\n\t\t  else  if(m+f<65 && m+f>=50) {\\n\t\t\t \\n\t\t  System.out.print(\"C\");\t\t \\n\t      }\\n\t\t  else if(m+f<50 && m+f>=30 && r<50) {\\n\t\t\t\\n\t\t  System.out.print(\"D\");\\n\t\t  }else if(r>=50) {\\n\t\t\t \\n\t\t  System.out.print(\"C\");\\n\t\t  }\\n\t\t  else  if(m+f<30 || r!=-1) {\\n\t\t\t  \\n\t\t  System.out.print(\"F\");\\n\t\t  }\\n\t\t  \\n\t\t  }\\n\t}\\n\t\t  \\n\t  public static void main(String[] args) {\\n\t\t  Scanner x = new Scanner(System.in);\\n\t\t  for(;;) {\\n\t\t  int data [] = new int[3];\\n\t\t  for(int i = 0;i<3;i++) {\\n\t\t\t\tdata[i]=x.nextInt();\\n\t\t\t}\t\t \\n\t\t judge(data[0],data[1],data[2]);\\n\t\t System.out.println();\\n\t\t  }\\n\t  }\\n\t}\\n", "target": "118", "substitutes": {"m": ["a", "pm", "w", "ms", "um", "n", "p", "fm", "s", "bm", "man", "j", "mn", "t", "z", "mini", "hm", "mu", "b", "an", "in", "ym", "dm", "im", "cm", "fr", "l", "u", "num", "c", "e", "em", "M", "mi", "h", "am", "sm", "module", "tm", "mod", "d", "y", "v", "om", "wm", "o", "g", "md", "k"], "f": ["a", "fs", "file", "w", "um", "n", "fer", "sf", "form", "uf", "p", "fm", "fun", "ft", "s", "fx", "j", "t", "z", "b", "fe", "cf", "in", "df", "inf", "fen", "fort", "q", "fr", "l", "u", "fl", "c", "e", "h", "F", "d", "field", "y", "v", "far", "tf", "of", "fd", "o", "fo", "g", "ur", "k"], "r": ["nr", "re", "w", "br", "err", "ar", "n", "rs", "p", "sr", "er", "s", "j", "t", "cr", "b", "R", "end", "ir", "row", "range", "fr", "q", "l", "u", "c", "e", "rr", "or", "pr", "h", "rh", "right", "d", "y", "v", "o", "g", "ur", "rd", "k", "rb"], "x": ["xi", "wx", "re", "w", "search", "n", "er", "s", "xt", "wa", "index", "z", "work", "rex", "in", "xc", "six", "rx", "xy", "lex", "ax", "mx", "c", "e", "python", "xs", "tx", "X", "dx", "xx", "ux", "y", "ix", "ex", "plus"], "data": ["missing", "a", "number", "list", "results", "vals", "window", "pos", "apps", "blocks", "value", "code", "raw", "result", "batch", "breaks", "index", "bytes", "memory", "this", "arr", "empty", "frame", "response", "values", "image", "input", "actions", "ata", "size", "map", "cache", "items", "series", "and", "next", "id", "body", "events", "d", "style", "DATA", "images", "ids", "slice", "key", "shift", "json", "div", "dat", "dates", "pages", "features", "array", "info", "start"], "i": ["xi", "gi", "I", "si", "n", "di", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "b", "ai", "phi", "li", "ci", "ti", "ri", "qi", "u", "l", "c", "init", "iu", "it", "you", "pi", "fi", "id", "ip", "uri", "y", "v", "slice", "key", "o", "ui", "info", "start", "k"]}}
{"code": "import java.util.*;\\nclass Main{\\n\tpublic static void main(String[]args){\\n    \tScanner in = new Scanner(System.in);\\n      \tint h = in.nextInt();\\n      \tint a = in.nextInt();\\n      \tint i = 0;\\n        while(h>0){\\n        \th-=a;i++;\\n        }\\n      \tSystem.out.println(i);\\n    }\\n}", "target": "147", "substitutes": {"in": ["din", "token", "is", "pin", "err", "In", "gen", "bin", "n", "arg", "p", "line", "s", "socket", "diff", "log", "serv", "r", "pass", "ln", "ini", "b", "doc", "ins", "lib", "inf", "input", "inner", "readable", "rin", "kin", "data", "rec", "win", "l", "between", "c", "init", "conn", "out", "lin", "source", "inc", "con", "str", "path", "again", "nin", "login", "isin", "ex", "connection", "f", "reader", "IN", "inn"], "h": ["hs", "ch", "w", "n", "p", "m", "hi", "r", "j", "z", "hm", "b", "ho", "length", "ah", "H", "ih", "q", "l", "u", "c", "he", "e", "hp", "x", "rh", "head", "pi", "ph", "id", "oh", "d", "bh", "y", "hl", "v", "hr", "ha", "hh", "f", "sh", "o", "gh", "k"], "a": ["w", "ca", "n", "p", "oa", "alpha", "ac", "m", "j", "A", "sa", "ea", "z", "an", "b", "ai", "ba", "da", "u", "c", "e", "area", "x", "am", "pi", "next", "d", "y", "offset", "v", "va", "ha", "aa", "f", "as", "o"], "i": ["xi", "gi", "I", "ei", "si", "n", "di", "p", "m", "ii", "hi", "hei", "index", "j", "ni", "z", "ini", "b", "ai", "phi", "li", "ci", "zi", "ri", "qi", "u", "bi", "x", "pi", "fi", "id", "ip", "d", "y", "v", "ui", "o", "info"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\tstatic PrintWriter out;\\n\tstatic StringBuilder sb;\\n\tstatic long mod = 998244353;\\n\tstatic int inf = (int) 1e15;\\n\tstatic ArrayList<Integer>[] ad;\\n\tstatic int n, k;\\n\tstatic long[][] memo;\\n\tstatic char[][] g;\\n\tstatic boolean[] vis;\\n\tstatic long ans, tem;\\n\tstatic long[] a;\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tout = new PrintWriter(System.out);\\n\t\tint x=sc.nextInt();\\n\t\tint y=sc.nextInt();\\n\t\tSystem.out.println(x*(x-1)/2+y*(y-1)/2);\\n\t\tout.close();\\n\t}\\n\\n\tstatic long cal(int i, int u, int p) {\\n\t\tif (memo[i][u] != -1)\\n\t\t\treturn memo[i][u];\\n\t\tlong ans = 1;\\n\t\tfor (int v : ad[i]) {\\n\t\t\tif (v == p)\\n\t\t\t\tcontinue;\\n\t\t\tif (u == 0) {\\n\t\t\t\tlong tem = 0;\\n\t\t\t\ttem = (2 * cal(v, 0, i)) % mod;\\n\t\t\t\ttem = (tem + 2 * cal(v, 1, i)) % mod;\\n\t\t\t\ttem = (tem - cal(v, 2, i) + mod) % mod;\\n\t\t\t\tans = ans * tem % mod;\\n\t\t\t} else if (u == 1) {\\n\t\t\t\tlong tem = 0;\\n\t\t\t\ttem = (2 * cal(v, 0, i)) % mod;\\n\t\t\t\ttem = (tem + cal(v, 1, i)) % mod;\\n\t\t\t\ttem = (tem - cal(v, 2, i) + mod) % mod;\\n\t\t\t\tans = ans * tem % mod;\\n\t\t\t} else {\\n\t\t\t\tlong tem = 0;\\n\t\t\t\ttem = cal(v, 0, i) % mod;\\n\t\t\t\ttem = (tem + cal(v, 1, i)) % mod;\\n\t\t\t\ttem = (tem - cal(v, 2, i) + mod) % mod;\\n\t\t\t\tans = ans * tem % mod;\\n\t\t\t}\\n\t\t}\\n\t\treturn memo[i][u] = ans;\\n\t}\\n\\n\tstatic class Scanner {\\n\t\tStringTokenizer st;\\n\t\tBufferedReader br;\\n\\n\t\tpublic Scanner(InputStream system) {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(system));\\n\t\t}\\n\\n\t\tpublic Scanner(String file) throws Exception {\\n\t\t\tbr = new BufferedReader(new FileReader(file));\\n\t\t}\\n\\n\t\tpublic String next() throws IOException {\\n\t\t\twhile (st == null || !st.hasMoreTokens())\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\\n\t\tpublic String nextLine() throws IOException {\\n\t\t\treturn br.readLine();\\n\t\t}\\n\\n\t\tpublic int nextInt() throws IOException {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\\n\t\tpublic double nextDouble() throws IOException {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tpublic char nextChar() throws IOException {\\n\t\t\treturn next().charAt(0);\\n\t\t}\\n\\n\t\tpublic Long nextLong() throws IOException {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\\n\t\tpublic int[] nextArrInt(int n) throws IOException {\\n\t\t\tint[] a = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextInt();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic long[] nextArrLong(int n) throws IOException {\\n\t\t\tlong[] a = new long[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextInt();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic boolean ready() throws IOException {\\n\t\t\treturn br.ready();\\n\t\t}\\n\\n\t\tpublic void waitForInput() throws InterruptedException {\\n\t\t\tThread.sleep(3000);\\n\t\t}\\n\t}\\n}", "target": "49", "substitutes": {"out": ["dump", "io", "err", "word", "screen", "user", "sync", "outs", "b", "page", "ou", "print", "str", "OUT", "buffer", "window", "w", "string", "base", "name", "line", "cli", "write", "result", "log", "error", "cache", "conn", "path", "ex", "o", "sp", "ch", "builder", "msg", "gen", "output", "s", "bar", "conf", "comment", "input", "scope", "inc", "console", "project", "Out", "exec", "list", "parent", "client", "In", "exp", "r", "doc", "writer", "in", "bc", "prefix", "obj", "println", "gz", "point", "sum", "again", "key", "up", "sh", "net", "temp", "IN"], "sb": [" sm", " SB", "si", "sf", "gb", "bb", "SB", "sa", "SN", "sv", "sq", "bc", "sg", "ss", "ws", "ub", "sam", "bs", "su", "sm", "SI", "stab", "BB", "sh", "sp", "cb", "SC", " ss", "rb"], "mod": ["access", "ref", "step", "grad", "debug", "mix", "class", "lib", "lo", "order", "cum", "pack", "min", "lock", "common", "ow", "MOD", "rem", "term", "mods", "id", "scale", "thread", "time", "reg", "md", "dem", "tag", "rm", "comb", "pos", "form", "base", "fun", "log", "rom", "port", "dig", "crit", "lex", "row", "module", "lat", "option", "cond", "draw", "add", "mag", "dist", "code", "mode", "loop", "sec", "m", "pur", "req", "model", "comment", "im", "perm", "cm", "Mod", "od", "sim", "div", "dim", "check", "tr", "stim", "exp", "part", "complex", "cod", "max", "modified", "post", "comp", "ci", "put", "rib", "d", "temp", "op"], "inf": ["mag", " z", "w", " lim", " e", "m", "z", " c", "sk", "Inf", " w", " mag", " limit", " log", "min", "q", " len", "bug", " f", "num", "pi", "limit", "id", "d", "f", " l", " m"], "ad": ["exec", "dd", "quad", "ud", "client", "ar", "bb", "ay", "ac", "ada", "ed", "ind", "ace", "ai", "ci", "data", "jad", "ads", "ass", "nd", "att", "ag", "AD", "ard", "rad", "d", "Ad", "db", "od", "mad", "dat", "add", "md", "sd", "al", "pad", "adh"], "n": ["w", "nt", "m", "j", "r", "t", "z", "b", "N", "pn", "q", "ns", "l", "en", "c", "e", "np", "h", "d", "nc", "f", "o"], "k": ["K", "kn", "ks", "w", "m", "j", "ki", "km", "z", "sk", "max", "kk", "kin", "ke", "ik", "q", "c", "e", "h", "ka", "kw", "key", "ko", "ok", "f"], "memo": ["aimo", "homoo", "demov", "remro", " membo", "aimbo", " memology", "ramolo", "mempo", "morto", "memov", "memoro", "morti", "emos", "homi", "demos", "memi", "remology", "ramoo", "homo", "glov", "mortolo", "emo", "memoo", "glpo", "remov", "aimology", "remoro", "memolo", "memro", "memos", "glos", "ramo", "remos", "rami", "rembo", "embo", "rempo", "emoro", " memro", "glo", "demoro", "dembo", "membo", "mortoo", "aimro", "memology", "demo", "homolo", "dempo", "remo"], "g": ["gi", "gp", "ig", "gt", "w", "ga", "gen", "gb", "group", "m", "gs", "bg", "gy", "debug", "gm", "G", "ge", "go", "gui", "q", "l", "gl", "gam", "h", "gc", "gu", "f", "reg"], "vis": ["sudo", "regular", "cur", "um", "gen", "raw", "fast", "log", "wa", "local", "view", "circ", "cas", "im", "cache", "visible", "num", "gl", "keep", "ph", "gc", "dc", "gu", "scan", "sim", "visual", "conv", "mm", "human"], "ans": ["comments", "span", "vals", "ks", "ants", "params", "ms", "stan", "ani", "AN", "lan", "errors", "anon", "s", "ia", "annot", "amps", "man", "na", " es", "nan", "ents", "ens", "ANS", "sa", "ana", "outs", "an", "sk", "ann", "ls", "acs", "ars", "aces", "ins", "sn", "ds", "nas", "cases", "atan", "atts", "cas", "actions", "ads", "san", "sam", "ns", "groups", "plan", "can", "ams", "types", "faces", "reads", "ats", "eps", "ano", "aos", "aus", "mas", "ions", "names", "ane", "aned", "anus", "ant", "ons", "as", "asin", "ays", " chars", "ras"], "tem": ["tri", "um", "see", "tom", "http", "mini", "white", "mix", "emp", "mon", "multi", "cum", "aqu", "html", "session", "font", "rem", "term", "tmp", "em", "ou", "cool", "ty", "style", "thread", "program", "fat", "cu", "time", "ui", "anim", "view", "tab", "ram", "tur", "lim", "form", "base", "non", "umi", "sym", "tan", "cache", "am", "mi", "atom", "ta", "nam", "lat", "warm", "tm", "om", "lam", "ten", "mm", "mag", "stem", "color", "timer", "com", "m", "buff", "wa", "chi", "thin", "ema", "tim", "Tem", "ams", "sem", "sm", "tu", "sim", "sex", "dim", "mem", "cal", "htm", "fac", "the", "template", "home", "t", "qu", "tt", "layout", "imm", "san", "sam", "prom", "gam", "ph", "sum", "sh", "temp"], "a": ["span", "access", "sha", "ga", "ca", "aaa", "ac", "ia", "alpha", "m", "na", "wa", "A", "sa", "ao", "ana", "ma", "an", "ann", "ai", "ae", "all", "param", "am", "att", "asa", "amp", "as"], "sc": ["pc", "esc", "scl", "sw", "rc", "ch", "cur", "desc", "cs", "si", "com", "ctx", "s", "cc", "tc", "nt", "sv", "cr", "osc", "sq", "lc", "cont", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "Sc", "asc", "sem", " SC", "sch", "dc", "scan", "nc", " Sc", "uc", "ex", "sh", "sp", "up", "imp", "SC"], "x": ["xi", "wx", "px", "w", "pos", "height", "ww", "m", "on", "hi", "fx", "index", "t", "z", "b", "xy", "xc", "rx", "ax", "l", "en", "c", "e", "h", "xs", "X", "tx", "dx", "xx", "id", "d", "ix", "ex", "xp", "f"], "y": ["w", "ny", "dy", "ay", "m", "j", "vy", "t", "oy", "z", "yl", "yy", "b", "in", "xy", "ya", "ky", "Y", "wy", "q", "l", "py", "yo", "c", "ey", "e", "yt", "h", "yi", "xx", "ty", "d", "ry", "f", "o", "sy", "cy"], "i": ["gi", "xi", "I", "is", "io", "idi", "si", "di", "ie", "ic", "oi", "cli", "m", "ii", "ij", "index", "j", "ki", "mini", "z", "ini", "ish", "b", "lc", "ai", "in", "phi", "multi", "li", "ci", "ti", "ik", "q", "l", "qi", "bi", "c", "ri", "e", "ori", "iu", "eni", "it", "mi", "h", "yi", "pi", "id", "ip", "uri", "d", "ix", "api", "f", "o", "ui", "info"], "u": ["nu", "U", "w", "unit", "m", "uv", "j", "ul", "ue", "t", "du", "z", "mu", "b", "q", "l", "c", "e", "ou", "iu", "h", "eu", "su", "tu", "ru", "uri", "d", "un", "uu", "gu", "uni", "uid", "pu", "uc", "f", "cu", "ui", "us", "o", "up", "lu", "ur", "una"], "p": ["pc", "vp", "w", "m", "j", "r", "t", "z", "b", "pe", "q", "l", "c", "e", "tp", "pi", "h", "ip", "P", "d", "pp", "cp", "f", "o", "sp"], "v": ["vp", "ch", "w", "live", "iv", "version", "s", "ve", "vert", "m", "ii", "vic", "http", "uv", "j", "r", "t", "z", "sv", "video", "b", "vs", "ov", "qu", "view", "av", "lv", "li", "html", "q", "vin", "l", "en", "c", "e", "volt", "van", "h", "nv", "d", "va", "V", "gu", "api", "vi", "ev", "vol", "tv", "f", "o", "ver"], "st": ["sw", "is", "sr", "ft", "sts", " fe", "sth", "sa", " ta", "t", "ost", " sts", "fe", " scr", "ss", "ti", "Str", "lt", "se", " ts", "ts", "ct", "str", "St", " ft", "ST", "STR", "ze"], "br": ["kr", "rw", "Br", "rs", "bb", "tr", "sr", "buf", "ner", "result", "bm", "BR", "r", "browser", "bp", "cr", "arr", "b", "dr", "gr", "bc", "ba", "mr", "fr", "bi", "bs", "ber", "bridge", "bt", "pr", "wr", "lr", "str", "bh", "hr", "bf", "reader", "bal", "bl", "rb"], "system": ["fs", "ram", "re", "ch", "io", "is", "ar", "ser", "si", "cms", "sr", "null", "storage", "input", "proc", "sam", "rss", "sys", "stream", "src", "it", "or", "text", "Input", "buffer", "scan"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t    String line = br.readLine();\\n\t    //\u6587\u5b57\u5217\u306b\u5148\u982d\u53c8\u306f\u6700\u5f8c\u306b\u7a7a\u767d\u6587\u5b57\u304c\u304f\u3063\u4ed8\u3044\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u5168\u3066\u53d6\u308a\u9664\u304d\u307e\u3059\u3002\\n\t    line = line.trim();\\n\t    //\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3092\u533a\u5207\u308a\u6587\u5b57\u3068\u3057\u3066\u6271\u3046\\n\t    String[] readLineArray = line.split(\"[\\\\s+]\");\\n\t    //\u5909\u6570\u306b\u914d\u5217\u3092\u4ee3\u5165\\n\t    int a = Integer.parseInt(readLineArray[0]);\\n\t    int b = Integer.parseInt(readLineArray[1]);\\n\t \\n\t    int d = a/b;\\n\t    int r = a%b;\\n\t    double f = (double)a/(double)b;\\n\t    System.out.printf(\"%d %d %.5f\\n\",d,r,f);\\n\t}\\n\\n}", "target": "90", "substitutes": {"br": [" Br", "io", "err", "Br", "ar", "bb", "tr", "sr", "buf", "er", "yr", "bd", "ner", "BR", "r", "browser", "cr", "arr", "b", "gr", "bar", "ibr", "ocr", "bc", "obj", "mr", "fr", "HR", "bs", "bridge", "ber", "bro", "Reader", "ler", "str", "db", "hr", "bf", "div", "reader", "cb", "iter", "wr", "rb"], "line": ["Line", "file", "status", "err", "base", "name", "output", "header", "result", "log", "response", "lines", "url", "obj", "data", "page", "cl", "l", "text", "lin", "source", "block", "body", "content", "str", "message", "buffer", "f"]}}
{"code": "import java.io.*;\\nimport java.math.*;\\nimport java.util.*;\\npublic class Main { //Read the question silly billy\\n \\n\tpublic static void main(String[] args) { \\n\t\tFastScanner I = new FastScanner(); //Input\\n\t\tOutPut O = new OutPut(); //Output\\n\t\tint N = I.nextInt();\\n\t\tint[] a = new int[N];\\n\t\tfor (int i = 0; i < N; i++) a[i] = I.nextInt();\\n\t\tArrays.sort(a);\\n\t\tint A = 0;\\n\t\tint B = 0;\\n\t\tint ptr = N-1;\\n\t\twhile (ptr>=0) {\\n\t\t\tA+=a[ptr];\\n\t\t\tptr-=2;\\n\t\t}\\n\t\tptr = N-2;\\n\t\twhile (ptr>=0) {\\n\t\t\tB+=a[ptr];\\n\t\t\tptr-=2;\\n\t\t}\\n\t\tO.pln(A-B);\\n\t}\\n\tpublic static long ceil(long num, long den) {long ans = num/den; if (num%den!=0) \\n\tans++; return ans;}\\n\tpublic static long GCD(long a, long b) {\\n\t\tif (a==0||b==0) return Math.max(a,b);\\n\t\treturn GCD(Math.min(a, b),Math.max(a, b)%Math.min(a, b));\\n\t}\\n\tpublic static long FastExp(long base, long exp, long mod) {\\n\t\tlong ans=1;\\n\t\twhile (exp>0) {\\n\t\t\tif (exp%2==1) ans*=base;\\n\t\t\texp/=2;\\n\t\t\tbase*=base;\\n\t\t\tbase%=mod;\\n\t\t\tans%=mod;\\n\t\t}\\n\t\treturn ans;\\n\t}\\n\tpublic static long ModInv(long num,long mod) {return FastExp(num,mod-2,mod);}\\n\tstatic class FastScanner {\\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n\t\tStringTokenizer st=new StringTokenizer(\"\");\\n\t\tString next() {\\n\t\t\twhile (!st.hasMoreTokens())\\n\t\t\t\ttry {\\n\t\t\t\t\tst=new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\te.printStackTrace();\\n\t\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\t\tint nextInt() {return Integer.parseInt(next());}\\n\t\tlong nextLong() {return Long.parseLong(next());};\\n\t}\\n\tstatic class OutPut{\\n\t\tPrintWriter w = new PrintWriter(System.out);\\n\t\tvoid pln(int x) {w.println(x);w.flush();}\\n\t\tvoid pln(long x) {w.println(x);w.flush();}\\n\t\tvoid pln(String x) {w.println(x);w.flush();}\\n\t\tvoid pln(char x) {w.println(x);w.flush();}\\n\t\tvoid pln(StringBuilder x) {w.println(x);w.flush();}\\n\t\tvoid p(int x) {w.print(x);w.flush();}\\n\t\tvoid p(long x) {w.print(x);w.flush();}\\n\t\tvoid p(String x) {w.print(x);w.flush();}\\n\t\tvoid p(char x) {w.print(x);w.flush();}\\n\t\tvoid p(StringBuilder x) {w.print(x);w.flush();}\\n\t}\\n}\\n\\n", "target": "132", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int T = sc.nextInt();\\n        int A = sc.nextInt();\\n        double[] H = new double [N];\\n        for (int i = 0; i < N; ++i) {\\n            H[i] = sc.nextInt();\\n        }\\n\\n        double[] dif = new double [N];\\n        int ans = 0;\\n        for (int i = 0; i < N; ++i) {\\n            dif[i] = Math.abs(T - H[i] * 0.006 - A);\\n            if(dif[i] < dif[ans]) {\\n                ans = i;\\n            }\\n        }\\n\\n        System.out.println(ans + 1);\\n\t}\\n}\\n", "target": "210", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "core", "cur", "cs", "ser", "cor", "search", "cer", "screen", "sr", "ctx", "cc", "ner", "tc", "soc", "na", "enc", "sync", "system", "cr", "osc", "sq", "lc", "cont", "coll", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "ct", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "parse", "SC"], "N": ["O", "K", "U", "E", "I", "Part", "II", "Na", "n", "Ns", "AN", "ND", "Len", "C", "Ni", "J", "NT", "Ne", "SN", "Max", "NN", "Size", "R", "D", "Y", "NA", "B", "Z", "Num", "L", "M", "NC", "X", "No", "NE", "S", "P", "F", "CNN", "V", "NS", "NL", "KN", " n"], "T": ["O", "K", "U", "E", "I", "J", "C", "TN", "TB", "TF", "t", "G", "W", "TS", "Q", "R", "D", "Y", "Z", "B", "L", "Total", "M", "X", "TA", "TT", "S", "P", "F", "V"], "A": ["Alpha", "API", "a", "U", "E", "I", "As", "AF", "C", "alpha", "Array", "G", "AA", "LA", "W", "AI", "R", "AS", "D", "Y", "NA", "B", "Z", "M", "SA", "X", "Offset", "TA", "S", "P", "F", "V", "An", "CA"], "H": ["O", "K", "U", "E", "I", "HA", "He", "DH", "RH", "C", "GH", "FH", "NH", " h", "G", "HP", "HT", "HS", "Q", "W", "R", "D", "Ha", "Y", "Z", "B", "L", "M", "h", "X", "MH", "AH", "HH", "S", "F", "P", "HC", "OH", "HD", "V", "HF", "HM", "EH", "HB", "SH", "CH", "HI"], "i": ["a", "xi", "gi", "adi", "I", "ei", "is", "io", "si", "n", "di", "ie", "p", "oi", "cli", "abi", "ii", "hi", "chi", "j", "index", "t", "ni", "ki", "ini", "mu", "b", "lc", "ai", "in", "phi", "multi", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "ri", "c", "e", "ori", "iu", "eni", "init", "mi", "x", "h", "pi", "yi", "fi", "it", "id", "ip", "uri", "d", "y", "v", "ix", "slice", "anti", "f", "ui", "o", "info", "start"], "dif": ["fif", "Def", "Dit", "dify", " diff", "adIF", "ddit", "Daf", "dinc", " dit", "diff", " def", "fiff", "adaf", "DIF", "adify", " daf", "daf", "taf", "fef", "def", "sdif", "sdiff", "sdIF", "tif", "Dinc", "Dif", "Diff", " dIF", "tIF", "dit", "dIF", "sdinc", "ddif", "ddIF", "fIF", " dinc", "adif", "ddaf", " dify", "tify"], "ans": ["a", "An", "ks", "ants", "ations", "ani", "parser", "AN", "lan", "s", "annot", "amps", "offs", "na", "ents", "ANS", "os", "arts", "anas", "ana", "outs", "an", "sk", "ann", "ars", "ls", "ds", "ai", "ins", "atan", "ians", "ns", "anes", "anners", "ends", "plan", "can", "ams", "x", "xs", "types", "ats", "eps", "aus", "ids", "es", "names", "ions", "aned", "act", "ons", "anc", "as", "auto", " scans", "ays", "nas"]}}
{"code": "import java.util.*;\\n \\nclass Main{\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    \\n    int[][] a = new int[3][3];\\n    int[] x = new int[3];\\n    int[] y = new int[3];\\n    int max = Integer.MIN_VALUE;\\n    for(int i=0; i<3; i++){\\n      for(int j=0; j<3; j++){\\n        a[i][j] = sc.nextInt();\\n        if(a[i][j] > max){\\n          max = a[i][j];\\n        }\\n      }\\n    }\\n    String f = \"Yes\";\\n    \\n    x[0] = 0;\\n    for(int j=0; j<3; j++){\\n      y[j] = a[0][j] - x[0];\\n    }\\n    for(int j=0; j<3; j++){\\n      x[j] = a[j][0] - y[0];\\n    }\\n    for(int i=0; i<3; i++){\\n      for(int j=0; j<3; j++){\\n        if(a[i][j] != x[i]+y[j]){\\n          f = \"No\";\\n        }\\n      }\\n    }\\n    System.out.println(f);\\n\\n    sc.close();\\n  }\\n}\\n", "target": "88", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ca", "sub", "cer", "screen", "sr", "cc", "ner", "soc", "acc", "sa", "sync", "system", "cr", "osc", "sq", "st", "lc", "bc", "sci", "ss", "cl", "scope", "se", "sys", "c", "src", "Sc", "asc", "out", "sem", "cv", " SC", "sch", "slice", "mc", "scan", "nc", " Sc", "uc", "ok", "sh", "sp", "sb", "parser", "SC", "gram", "squ"], "a": ["missing", "ap", "sta", "ga", "ca", "at", "p", "ia", "alpha", "aaa", "ac", "s", "app", "na", "sup", "wa", "A", "sa", "ma", "z", "an", "ab", "work", "b", "ai", "aux", "ae", "ba", "da", "u", "c", "e", "area", "am", "la", "va", "api", "aa", "as", "o", "auto", "array", "ama", "au", "ad"], "x": ["xi", "number", "px", "w", "n", "string", "dy", "p", "ay", "m", "na", "index", "cross", "t", "z", "an", "work", "b", "in", "xy", "data", "Y", "pe", "q", "ax", "l", "u", "c", "e", "h", "xs", "X", "xx", "id", "yx", "d", "v", "ix", "xxx", "ex", "sex", "o", "array"], "y": ["ch", "w", "n", "dy", "p", "ay", "m", "vy", "t", "oy", "z", "yy", "b", "xy", "ya", "data", "Y", "q", "ys", "py", "c", "e", "ey", "yt", "type", "area", "h", "yi", "id", "ty", "d", "v", "ady", "ix", "sky", "sy", "o", "cy", "g", "ye"], "max": ["parent", "height", " Max", "n", "step", "p", "MAX", "maximum", "alpha", "m", "ac", "first", "default", "t", "Max", "std", "conf", "count", "rand", "end", "size", "total", "no", "cache", "min", "q", "ax", "range", "num", "c", "ad", "can", "last", "limit", "next", "id", "scale", "right", "mod", "d", "rest", "v", "orig", "mad", "as", "az", "auto", "k"], "i": ["xi", "gi", "I", "ei", "io", "si", "ie", "di", "p", "oi", "ii", "hi", "ij", "ki", "ni", "z", "ini", "mu", "b", "ai", "ji", "li", "ci", "ik", "q", "zi", "l", "qi", "u", "bi", "c", "ri", "e", "ori", "iu", "init", "it", "mi", "pi", "h", "yi", "my", "fi", "id", "ip", "uri", "d", "v", "ix", "api", "vi", "ui", "o", "info", "start"], "j": ["th", "bj", "ch", "br", "job", "ja", "ie", "jc", "dj", "dy", "n", "J", "p", "s", "jo", "ii", "ij", "jet", "t", "z", "jj", "js", "ni", "jl", "b", "ah", "ji", "li", "obj", "ik", "q", "el", "fr", "l", "aj", "qi", "oj", "u", "c", "e", "it", "h", "pr", "next", "kj", "adj", "uj", "id", "d", "je", "jit", "v", "jen", "ju", "key", "json", "ui", "o", "g", "jan", "k", "jp"], "f": ["fs", "flat", "fc", "w", "fa", "n", "form", "sf", "p", "fun", "fp", "m", "r", "t", "z", "func", "b", "fe", "cf", "conf", "inf", "df", "fen", "fr", "def", "l", "c", "fn", "e", "fb", "rf", "h", "ff", "function", "F", "d", "str", "format", "v", "feed", "bf", "free", "tf", "g", "info"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int x = scan.nextInt();\\n        float y = scan.nextInt();\\n\\n        float z1 = (y -2*x) / 2;\\n        float z2 = (4 * x - y) / 2;\\n\\n        if (z1 >= 0 && z2 >= 0 && z1%1 ==0 && z2%1 == 0){\\n            System.out.println(\"Yes\");\\n        }else {\\n            System.out.println(\"No\");\\n        }\\n\\n\\n    }\\n}\\n", "target": "62", "substitutes": {"scan": ["chan", "pan", "span", "run", "pin", "search", "gen", "n", "ser", "see", "connect", "car", "query", "ner", "result", "log", "sc", "na", "serv", "ln", "sync", "skip", "system", "an", "ann", "fan", "in", "nn", "all", "sign", "san", "win", "sin", "read", "se", "l", "can", "out", "look", "feed", "clean", "server", "Scan", "util", "walk", "watch", "reader", "ignore", "parse", "gram", "con"], "x": ["px", "w", "pos", "n", "base", "p", "s", "m", "width", "cross", "index", "j", "t", "z", "b", "in", "xy", "size", "Y", "ax", "q", "l", "u", "c", "h", "X", "dx", "xx", "id", "d", "v", "ix", "ex", "f", "time", "i", "k"], "y": ["w", "height", "ny", "n", "dy", "p", "m", "j", "vy", "t", "oy", "z", "yy", "b", "ya", "Y", "wy", "q", "l", "py", "c", "ey", "yt", "h", "zy", "xx", "ty", "d", "ry", "v", "f", "sy", "o", "cy", "i", "col"], "z1": ["zip3", "y1", "zOne", "y8", "Zone", "Z3", "zz2", "z61", "y4", "xone", "zz3", "y3", "yOne", "zip61", " z4", "zipone", " z3", "x61", "zone", "zz4", "z4", "zip1", " z8", "x1", "Z61", "z3", " zOne", "zip8", "zz1", "z8", "Z1", "y2", "x3", "zipOne"], "z2": ["y02", " zTwo", "iz02", "izTwo", "Z2", "iz2", "zsecond", "zipB", "z6", "zTwo", "z182", " z6", "Zsecond", "iz182", "izB", "zip2", "zipsecond", " z02", "izsecond", "Z182", "yTwo", "zB", "ZB", "x2", "z02", " z182", "iz6", "zip182", "y6", "x182", "y2", "xTwo"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long A = sc.nextLong();\\n        long B = sc.nextLong();\\n        long K = sc.nextLong();\\n        StringBuilder sb = new StringBuilder();\\n\\n        if (A >= K) {\\n            sb.append(A-K);\\n            sb.append(\" \");\\n            sb.append(B);\\n            System.out.println(sb.toString());\\n        } else if (B >= K - A) {\\n            sb.append(0);\\n            sb.append(\" \");\\n            sb.append(B- K + A);\\n            System.out.println(sb.toString());\\n        } else {\\n            System.out.println(\"0 0\");\\n        }\\n    }\\n}\\n", "target": "128", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "core", "cur", "cs", "ser", "ca", "cor", "cer", "sf", "screen", "sr", "ctx", "s", "cc", "ner", "tc", "soc", "acc", "enc", "sync", "cr", "osc", "sq", "system", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "scope", "se", "c", "src", "Sc", "asc", "sche", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sp", "parse", "SC"], "A": ["a", "API", "Alpha", "AST", "This", "O", "Part", "U", "E", "HA", "Na", "AF", "AB", "GA", "C", "Ca", "AM", "Array", "PA", "LA", "AA", "KA", "W", "N", "Offset", "IA", "AW", "H", "D", "Y", "NA", "Num", "L", "M", "SA", "Az", "X", "AD", "Area", "Ar", "AR", "EA", "BA", "S", "P", "F", "mA", "Parts", "TA", "V", "DA", "AP", "Am", "An", "CA"], "B": ["O", "U", "E", "I", "Bi", "AB", "C", "T", "BF", "BE", "NB", "SB", "MB", "G", "LA", "FB", "b", "N", "W", "Q", "QB", "R", "BC", "GB", "D", "H", "UB", "Y", "DB", "Z", "L", "M", "X", "LB", "Bs", "BA", "S", "P", "F", "OB", "Number", "BB", "BI", "WB", "CA"], "K": ["O", "U", "E", "I", "KR", "AK", "J", "C", "Sk", "T", "Key", "SK", "G", "KA", "W", "N", "Q", "Ka", "D", "H", "Y", "KK", "Z", "L", "KE", "M", "PK", "KS", "X", "S", "P", "F", "V", "Ak", "Ku", "Ke", "Power", "VK", "k"], "sb": ["bj", "xb", "bash", " SB", "si", "bb", "sf", "gb", "lb", "nb", "bd", "eb", "bm", "buff", "sth", "bg", "SB", "zb", "soc", "sa", "abb", "wb", "bp", "sv", "sq", "ab", "ib", "abs", "b", "ls", "pb", "lab", "lc", "bc", "sg", "ss", "ub", "bsp", "amb", "nn", "ob", "ba", "lp", "bi", "mb", "fb", "src", "rob", "bs", "su", "usb", "lr", "obb", "kb", "ssl", "bh", "db", "bf", "BB", "cb", "bl", "rb"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\nclass Main{\\n\tpublic static void main(String[] args) throws IOException{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\twhile(true){\\n\t\t\tString[] line = br.readLine().split(\" \");\\n\t\t\tint a = Integer.parseInt(line[0]);\\n\t\t\tint b = Integer.parseInt(line[2]);\\n\t\t\tif( line[1].equals(\"?\") ){\\n\t\t\t\tbreak;\\n\t\t\t}else if( line[1].equals(\"+\") ){\\n\t\t\t\tsb.append((a + b)+\"\\n\");\\n\t\t\t}else if( line[1].equals(\"-\") ){\\n\t\t\t\tsb.append((a - b)+\"\\n\");\\n\t\t\t}else if( line[1].equals(\"*\") ){\\n\t\t\t\tsb.append((a * b)+\"\\n\");\\n\t\t\t}else if( line[1].equals(\"/\") ){\\n\t\t\t\tsb.append((a / b)+\"\\n\");\\n\t\t\t}else if( line[1].equals(\"%\") ){\\n\t\t\t\tsb.append((a % b)+\"\\n\");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.print(sb);\\n\t}\\n}", "target": "139", "substitutes": {"br": ["plug", "ch", "io", "err", "Br", "img", "brush", "bb", "tr", "sr", "er", "buf", "yr", "bd", "BR", "http", "r", "browser", "jar", "cr", "arr", "abs", "bar", "dr", "gr", "bc", "obj", "mr", "fr", "HR", "ori", "bs", "bridge", "ber", "bt", "bro", "bh", "str", "hr", "bf", "div", "be", "cb", "bl", "rb"], "sb": ["bj", "xb", " SB", "si", "bb", "gb", "sf", "nb", "lb", "bd", "bm", "eb", "sth", "zb", "SB", "bg", "sa", "wb", "abb", "bp", "sv", "sync", "ab", "sk", "sl", "pb", "ls", "lab", "ib", "bc", "sg", "bsp", "amb", "lp", "mb", "fb", "src", "rob", "bs", "bridge", "su", "usb", "bt", "bps", "lr", "obb", "kb", "ssl", "bh", "db", "login", "bf", "BB", "orb", "cb", "bl", "rb"], "line": ["word", "header", "user", "le", "sync", "entry", "url", "split", "match", "data", "pe", "page", "lin", "id", "style", "str", "lf", "rule", "co", "string", "non", "name", "p", "section", "log", "strip", "ne", "sl", "one", "lc", "error", "row", "load", "LINE", "code", "po", "pass", "frame", "ge", "comment", "lines", "cle", "object", "range", "cl", "l", "se", "band", "shell", "Line", "file", "inline", "cell", "group", "part", "r", "link", "post", "phase", "end", "no", "el", "source", "block", "look", "column", "key", "f", "nl", "auto", "day", "parse"], "a": ["access", "fa", "sha", "ga", "ar", "ca", "au", "oa", "p", "ia", "alpha", "ac", "na", "wa", "sup", "A", "sa", "ea", "ana", "aba", "ma", "an", "aux", "ae", "ba", "aka", "pa", "da", "aj", "c", "e", "af", "area", "x", "am", "la", "mA", "asa", "va", "api", "za", "aa", "active", "auto", "ama", "i", "ad"], "b": ["w", "job", "n", "base", "bb", "p", "s", "lb", "nb", "m", "eb", "bd", "j", "r", "hide", "wb", "z", "ab", "ib", "pb", "lib", "length", "ob", "B", "l", "u", "mb", "c", "bi", "e", "fb", "x", "h", "body", "d", "y", "v", "bf", "f", "o", "g", "i", "ur", "rb"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        String[] lines = getStdin();\\n        String line = lines[0];\\n        String[] a = line.split(\" \");\\n        int term = Integer.parseInt(a[0]);\\n        int num = Integer.parseInt(a[1]);\\n\\n        String line1 = lines[1];\\n        String[] b = line1.split(\" \");\\n        //int cost = Integer.parseInt(b[i]);\\n\\n        for (int i = 0; i < num; i++){\\n            int cost = Integer.parseInt(b[i]);\\n            term = term - cost;\\n        }\\n        if (term < 0){\\n            System.out.println(\"-1\");\\n        } else if (term >= 0){\\n            System.out.println(term);\\n        }\\n\\n\\n\\n\\n    }\\n  \\n  private static String[] getStdin() {\\n    Scanner scanner = new Scanner(System.in);\\n    ArrayList<String> lines = new ArrayList<>();\\n    while (scanner.hasNext()) {\\n      lines.add(scanner.nextLine());\\n    }\\n    return lines.toArray(new String[lines.size()]);\\n  }\\n  \\n}\\n", "target": "108", "substitutes": {"lines": ["Line", "file", "vals", "points", "parts", "files", "elines", "blocks", "codes", "cells", "objects", "mails", "s", "headers", "breaks", "gets", "ipes", "sl", "ls", "tests", "ins", "values", "rules", "data", "lists", "works", "l", "docs", "groups", "items", "ines", "bs", "links", "shows", "posts", "ids", "es", "limits", "f", "pages", "nl", "users", "frames", "runs", "strings", "rows"], "line": ["Line", "file", "inline", "cell", "LINE", "string", "code", "base", "name", "p", "non", "header", "log", "first", "one", "link", "entry", "lc", "url", "data", "row", "page", "l", "e", "text", "lin", "source", "block", "body", "str", "message", "shell", "f", "nl", "up", "i"], "a": ["parts", "tta", "sta", "fa", "ga", "at", "n", "string", "p", "ua", "aaa", "ac", "alpha", "s", "part", "na", "A", "sa", "ea", "ma", "an", "aux", "ae", "ba", "ata", "da", "ast", "c", "area", "am", "words", "la", "va", "za", "aa", "auto", "array", "ama", "ans", "active", "au", "ad"], "term": ["tab", "test", "fac", "w", "pos", "err", "color", "sec", "nt", "loc", "size", "total", "opt", " len", "Term", " t", "terms", "sum", "ct", "mod", "fat", "act", "f", " size", "k"], "num": ["nu", "span", "number", "nr", "gen", "bin", "name", "unit", "nb", "grade", "nt", "part", "loc", "index", "doc", "count", "nm", "split", "Num", "init", "np", "nam", "sum", "id", "orig", "uni", "len", "nc"], "line1": ["group1", "linesOne", "group01", "line2", "LineOne", "line01", "groupone", " lineFirst", "lineone", "Lineone", "Line1", "Line2", "file01", "LineFirst", "fileone", " lineOne", "Line01", "group2", "lines1", "linesFirst", " line2", "lineFirst", "file1", "file2", "lineOne", "lines2"], "b": ["n", "base", "name", "p", "nb", "s", "r", "ab", "pb", "split", "ba", "B", "l", "c", "e", "binary", "bs", "body", "d", "y", "v", "f", "o", "be", "cb", "i", "rb"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tInteger n = sc.nextInt();\\n\t\tInteger d = sc.nextInt();\\n\t\tInteger count = 0;\\n\\n\t\tfor (Integer i = 0; i < n; i++) {\\n\t\t\tLong x = sc.nextLong();\\n\t\t\tLong y = sc.nextLong();\\n\\n\t\t\tLong z = x * x + y * y;\\n\t\t\tif (z < 0) {\\n\t\t\t\tz *= -1;\\n\t\t\t}\\n\\n\t\t\tDouble distance = Math.sqrt(z);\\n\\n\t\t\tif (distance <= d) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tSystem.out.println(count);\\n\\n\t}\\n\\n}", "target": "42", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "core", "cur", "desc", "cs", "ser", "cor", "sub", "cer", "sf", "ctx", "cli", "cc", "ner", "sec", "tc", "soc", "enc", "sync", "system", "osc", "sq", "cr", "ec", "lc", "class", "cont", "coll", "bc", "sci", "ss", "ci", "cus", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "uc", "sp", "sb", "parse", "SC"], "n": ["network", "number", "p", "nb", "s", "nt", "m", "ne", "j", "t", "ni", "sn", "b", "N", "in", "nn", "size", "no", "ns", "l", "u", "num", "c", "en", "e", "conn", "v", "nc", "k", "inn"], "d": ["a", "dd", "direction", "xd", "done", "dist", "di", "dy", "m", "cd", "j", "dt", "dq", "ind", "ds", "ded", "D", "nd", "da", "l", "c", "dp", "e", "dn", "dx", "id", "dl", "dc", "dim", "md", "sd", "g"], "count": ["test", "number", "list", "force", "parent", "weight", "score", "dist", "base", "code", "group", "low", "nt", "index", "counter", "work", "ind", "coll", "length", "order", "now", "size", "total", "data", "cache", "common", "child", "l", "carry", "num", "c", "type", "last", "sum", "id", "depth", "call", "check", "Count", "len", "key", "info", "found", "second", "start"], "i": ["xi", "I", "io", "si", "di", "p", "oi", "ii", "index", "j", "chi", "ni", "ini", "b", "ind", "ai", "in", "multi", "li", "ci", "ti", "zi", "qi", "u", "bi", "c", "iu", "pi", "fi", "id", "v", "ix", "f", "ui"], "x": ["xi", "a", "px", "w", "p", "j", "b", "length", "xy", "rx", "phi", "data", "q", "ax", "l", "u", "c", "e", "h", "xs", "X", "dx", "xx", "ix", "v", "xxx", "ex", "f", "o"], "y": ["a", "w", "ny", "dy", "p", "s", "vy", "j", "t", "oy", "yy", "b", "phi", "ya", "Y", "q", "zi", "l", "yo", "u", "c", "ey", "e", "zy", "yi", "h", "pi", "iz", "ry", "v", "f", "cy", "ye"], "z": ["xi", "w", "dist", "p", "density", "m", "ii", "zo", "cd", "j", "t", "south", "cz", "b", "ld", "length", "xy", "size", "data", "radius", "q", "Z", "zi", "l", "gz", "u", "zh", "c", "zz", "e", "zy", "zone", "id", "iz", "depth", "zen", "tz", "ix", "yz", "za", "f", "az", "zip", "ze"], "distance": ["direction", "height", "weight", "score", "dist", "address", "di", "relative", "dy", "angle", "diff", "grade", "m", "ance", "width", "service", "gap", "driver", "work", "definition", "Distance", "length", "edge", "pointer", "data", "size", "radius", "range", "q", "zi", "point", "c", "dx", "division", "depth", "duration", "dim", "near", "cost", "progress", "phy"]}}
{"code": "import java.util.*;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    String[] words = new String[]{\"dream\",\"dreamer\",\"erase\",\"eraser\"};\\n    int n = s.length();\\n    boolean[] dp = new boolean[n+1];\\n    dp[n] = true;\\n    for (int i = n-1; i >= 0; i--){\\n      for (String word: words){\\n        if (s.substring(i).startsWith(word)){\\n          dp[i] = dp[i] || dp[i+word.length()];\\n        }\\n      }\\n    }\\n    if (dp[0] == true){\\n      System.out.println(\"YES\");\\n    }else{\\n      System.out.println(\"NO\");\\n    }\\n  }\\n}", "target": "50", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "sub", "cc", "ner", "sec", "acc", "enc", "r", "sync", "osc", "cr", "ec", "lc", "ocr", " scr", "iss", "bc", "sci", "ss", "proc", "cl", "scope", "se", "c", "stream", "src", "Sc", "asc", "text", "str", " SC", "scan", "nc", " Sc", "sel", "uc", "sh", "sp", "SC"], "s": ["fs", "ks", "w", "si", "string", "sf", "p", "m", "gs", "os", "r", "t", "sv", "sl", "ls", "b", "ds", "ins", "in", "lines", "ws", "ss", "ns", "l", "se", "u", "c", "ses", "e", "opens", "h", "su", "ts", "xs", "S", "d", "ps", "v", "es", "f", "o", "sb", "g", "strings"], "words": ["comments", "ages", "parts", "months", "sw", "w", "windows", "params", "ms", "blocks", "ings", "games", "wd", "Words", "wa", "weights", "pieces", "tags", "devices", "ds", "lines", "ws", "letters", "ns", "works", "password", "x", "terms", "wp", "events", "names", "services", "pages", "features", "frames", "rules", "strings", "we"], "n": ["a", "network", "span", "w", "name", "p", "nb", "m", "cn", "ii", "nt", "j", "ln", "t", "ni", "z", "sn", "b", "N", "count", "nn", "size", "ns", "l", "u", "num", "c", "en", "e", "conn", "x", "h", "dn", "d", "y", "len", "nc", "f", "nl", "o", "g", "net", "k"], "dp": ["vp", "gp", "pm", "isp", "drop", "pkg", "direction", "pos", "params", "dist", "address", "target", "di", "p", "grad", "fp", "advert", "alpha", "eb", "gap", "null", "bp", "hyp", "pair", "primary", "dt", "pb", "dr", "deb", "ds", "mp", "pointer", "zip", "dm", "bsp", "data", "pa", "lp", "point", "password", "tp", "type", "hp", "np", "wp", "dependent", "ip", "dl", "d", "DP", "pp", "db", "dc", "api", "amp", "dep", "cp", "patch", "dim", "sp", "imp", "jp"], "i": ["gi", "xi", "adi", "I", "io", "si", "ie", "di", "p", "oi", "abi", "ii", "hi", "chi", "j", "index", "pass", "ni", "z", "ini", "mu", "lc", "ai", "pointer", "phi", "ji", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "l", "c", "init", "ori", "iu", "eni", "e", "mi", "pi", "x", "it", "id", "ip", "d", "y", "ix", "api", "slice", "v", "ui", "o", "info"], "word": ["prev", "token", "number", "old", "w", "char", "device", "string", "space", "Word", "name", "line", "wd", "part", "letter", "feature", "enc", "man", "du", "hyp", "work", "ish", "W", "entry", "writer", "in", "stroke", "bug", "l", "layer", "point", "x", "out", "text", "ward", "square", "piece", "d", "v", "ring", "wig", "character", "hop", "key", "f", "phrase", "o", "dot", "k", "tag"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main {\\n    static int res;\\n    static int n;\\n    static int[] arr;\\n    \\n    public static void main(String args[]) throws IOException {\\n        Scan sc = new Scan();\\n        n = sc.scanInt();\\n        arr = new int[n];\\n        for(int i= 0; i < n; ++i)\\n            arr[i] = sc.scanInt();\\n        recur(0,n-1,0);\\n        System.out.println(res);\\n    }\\n    \\n    static void recur(int l, int r, int sofar){\\n        if(l < 0 || r == n || r < l)\\n            return;\\n        int min = Integer.MAX_VALUE;\\n        int ind_l = -1;\\n        int ind_r = -1;\\n        int prev = -1;\\n        for(int i = l ; i <= r; ++i){\\n            int curr = arr[i];\\n            if(curr < min){\\n                ind_l = i;\\n                ind_r = i;\\n                min = curr;\\n            }\\n            if(curr == prev && curr == min){\\n                ind_r++;\\n            }\\n            prev = curr;\\n        }\\n        res += min-sofar;\\n        \\n        recur(l,ind_l-1, min);\\n        recur(ind_r+1,r, min);\\n    }\\n}\\n\\nclass Scan\\n{\\n    private byte[] buf=new byte[1024];\\n    private int index;\\n    private InputStream in;\\n    private int total;\\n    public Scan()\\n    {\\n        in=System.in;\\n    }\\n    public int scan()throws IOException\\n    {\\n        if(total<0)\\n        throw new InputMismatchException();\\n        if(index>=total)\\n        {\\n            index=0;\\n            total=in.read(buf);\\n            if(total<=0)\\n            return -1;\\n        }\\n        return buf[index++];\\n    }\\n    public int scanInt()throws IOException\\n    {\\n        int integer=0;\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        int neg=1;\\n        if(n=='-')\\n        {\\n            neg=-1;\\n            n=scan();\\n        }\\n        while(!isWhiteSpace(n))\\n        {\\n            if(n>='0'&&n<='9')\\n            {\\n                integer*=10;\\n                integer+=n-'0';\\n                n=scan();\\n            }\\n            else throw new InputMismatchException();\\n        }\\n        return neg*integer;\\n    }\\n    public long scanLong() throws IOException {\\n        long integer=0;\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        int neg=1;\\n        if(n=='-')\\n        {\\n            neg=-1;\\n            n=scan();\\n        }\\n        while(!isWhiteSpace(n))\\n        {\\n            if(n>='0'&&n<='9')\\n            {\\n                integer*=10;\\n                integer+=n-'0';\\n                n=scan();\\n            }\\n            else throw new InputMismatchException();\\n        }\\n        return neg*integer;\\n    }\\n    public double scanDouble()throws IOException\\n    {\\n        double doub=0;\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        int neg=1;\\n        if(n=='-')\\n        {\\n            neg=-1;\\n            n=scan();\\n        }\\n        while(!isWhiteSpace(n)&&n!='.')\\n        {\\n            if(n>='0'&&n<='9')\\n            {\\n                doub*=10;\\n                doub+=n-'0';\\n                n=scan();\\n            }\\n            else throw new InputMismatchException();\\n        }\\n        if(n=='.')\\n        {\\n            n=scan();\\n            double temp=1;\\n            while(!isWhiteSpace(n))\\n            {\\n                if(n>='0'&&n<='9')\\n                {\\n                    temp/=10;\\n                    doub+=(n-'0')*temp;\\n                    n=scan();\\n                }\\n                else throw new InputMismatchException();\\n            }\\n        }\\n        return doub*neg;\\n    }\\n    public String scanString()throws IOException\\n    {\\n        StringBuilder sb=new StringBuilder();\\n        int n=scan();\\n        while(isWhiteSpace(n))\\n        n=scan();\\n        while(!isWhiteSpace(n))\\n        {\\n            sb.append((char)n);\\n            n=scan();\\n        }\\n        return sb.toString();\\n    }\\n    private boolean isWhiteSpace(int n)\\n    {\\n        if(n==' '||n=='\\n'||n=='\\r'||n=='\\t'||n==-1)\\n        return true;\\n        return false;\\n    }\\n}\\n", "target": "77", "substitutes": {"res": ["results", "nr", "rc", "Res", "re", "err", "ms", "rs", "ress", "result", "req", "rev", "os", "cr", "z", "N", "max", "gr", "rel", "response", "R", "spec", "rec", "RES", "row", "range", "q", "ns", "reset", "rem", "rep", "resp", "pre", "val", "rest", "ret", "reply", "resolution", "reg", "pres", "ries", "details", "resh", "ras", "rows"], "n": ["network", "span", "nb", "cn", "null", "b", "inner", "adj", "ng", "len", "nc", "g", "w", "pos", "non", "name", "p", "ner", "ne", "sn", "rn", "not", "u", "en", "conn", "nit", "o", "inn", "nu", "bn", "number", "nr", "s", "m", "nor", "na", "enc", "nan", "all", " ni", "ns", "num", "c", "init", "x", " N", "un", "ol", "initial", "nt", "j", "ln", "t", "ni", "z", "none", "an", "N", "nn", "no", "node", "fn", "e", "np", "dn", "d", "y", "v", "nin", "f", "nl", "net", "k"], "arr": ["list", "nr", "arch", "adr", "br", "our", "img", "ar", "err", "rs", "tr", "batch", "attr", "app", "acc", "na", "Array", "enc", "rar", "cr", "ab", "ann", "ars", "dr", "gr", "coll", "ray", "par", "ir", "data", "cache", "arc", "fr", "cmp", "rep", "rr", "att", "pr", "arm", "Ar", "air", "pre", "str", "val", "aa", "array", "record", "bl"], "sc": ["pc", "esc", "scl", "sw", "rc", "ch", "cs", "search", "ca", "cor", "cer", "com", "cc", "sec", "acc", "sync", "osc", "sq", "cr", "lc", "ocr", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "Sc", "asc", "NC", "sche", "cv", "dc", "mc", "scan", "nc", "uc", "anc", "sh", "sp", "cb", "SC"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "ii", "ij", "chi", "j", "ni", "uli", "z", "ini", "mu", "b", "mini", "ind", "ai", "phi", "multi", "li", "ci", "ti", "ik", "qi", "ri", "bi", "u", "c", "e", "ori", "iu", "eni", "it", "mi", "pi", "x", "id", "ip", "uri", "y", "ix", "v", "slice", "vi", "f", "ui", "o"], "l": ["p", "s", "lb", "m", "pl", "loc", "ul", "le", "ln", "j", "sl", "lc", "b", "ls", "length", "li", "el", "rl", "L", "u", "fl", "c", "e", "h", "x", "lr", "kl", "la", "left", "d", "ll", "dl", "v", "ell", "ol", "len", "f", "nl", "o", "k"], "r": ["nr", "rc", "re", "w", "br", "cur", "err", "ar", "ra", "p", "sr", "er", "s", "m", "rar", "nor", "rev", "j", "cr", "b", "rel", "R", "rn", "ir", "fr", "ri", "u", "c", "e", "rf", "x", "rr", "rh", "pr", "or", "h", "lr", "ru", "right", "rb", "rt", "d", "v", "hr", "f", "rg", "o", "ur", "rd", "rw"], "sofar": ["comb", "rc", "ctr", "lim", "img", "raw", "low", "exp", "ii", "nor", "rev", "loc", "bytes", "wh", "max", "original", "inf", "rx", "rec", "no", "row", "small", "pack", "range", "nd", "rf", "needed", "or", "rr", "resp", "rb", "ng", "orig", "shift", "recent", "rg", "f", "duration", "cb", "seq", "nz", "rw"], "min": ["MIN", "span", "old", "minimum", "pos", "initial", "err", "ra", "sub", "ref", "version", "p", "sol", "me", "low", "m", "diff", "sort", "man", "part", "na", "rev", "wa", "j", "default", "null", "mini", "cr", "skip", "none", "partial", "max", "ind", "rel", "mean", "rec", "small", "don", "sign", "range", "cm", "c", "pri", "Min", "init", "e", "rem", "last", "x", "limit", "next", "id", "mod", "d", "pre", "un", "val", "len", "div", "dim", "reg", "just", "start", "mid"], "ind_l": ["nd_l", "indJl", "nd__la", "loc_l", "ind_la", "ind__b", "int_l", "nd_la", "nd_b", "indJv", "int_i", "loc5r", "nd__l", "ind__l", "ind_vel", "loc_r", "ind__vel", "ind_li", "ind__la", "ind5l", "ind5v", "indJr", "ind_lc", "loc5l", "loc5v", "loc_v", "nd_vel", "int_lc", "loc_li", "nd__vel", "int_r", "nd__b", "indLogl", "ind5li", "ind_i", "loc5li", "ind_v", "ind_b", "indLogi", "indLoglc", "ind5r", "indJli", "indLogr"], "ind_r": ["indlexr", "indPur", "ind7or", "IndJpr", "ind_ur", "indJr", "indlexpr", "ind_n", "Ind_n", "indJn", "Ind_er", "indPf", "Ind_pr", "ind_ra", "ind_pr", "ind_er", "Ind_or", "IndJf", "indPrl", "ind7r", " ind_ur", "Ind_f", "indPrh", "indJpr", "ind_f", "ind_rh", "indLogl", "indPn", "ind_rl", "indlexn", "indLogr", "indJf", "indlexf", "ind\u00b7rev", "indPpr", " ind_rh", "int_ra", "indLogrev", "indLogra", "ind_or", "ind\u00b7r", "ind7i", "ind\u00b7ra", "int_rev", "ind_i", "ind_rev", "ind7er", "indPr", "int_l", " ind_rl", "Ind_i", "ind\u00b7l", "IndJr", "int_r", "Ind_r", "IndJn"], "prev": ["nr", "reverse", "re", "old", "cur", "err", "initial", "ra", "upper", "iv", "ref", "p", "req", "first", "rev", "loc", "default", "var", "max", "original", "rel", "par", "rec", "iter", "range", "cmp", "pri", "init", "rem", "ori", "last", "rep", "resp", "pr", "next", "vious", "master", "Prev", "right", "pre", "before", "rest", "orig", "root", "vi", "reg", "pres", "resh", "start", "seq", "mid"], "curr": ["derr", "curre", "currs", " curre", "surp", "derre", "corvr", "cerru", "currer", "perp", " curl", "curri", "schru", "agern", "mirp", " curp", "prpr", "currin", "urrs", "schri", "corre", "agerr", "terpr", "prru", " curpr", "prr", "curru", "curl", "curpr", "derrer", "agerp", " currs", "derrs", "urr", "corrs", "mirrin", "perl", "derpr", "surc", "terrs", "curp", "surr", "curc", "cerr", "curvr", "schpr", "perr", "cerpr", "perrin", "surn", "terrer", "curn", " curn", "agerc", "prri", "corr", " curvr", "urre", "urvr", "terr", " currin", "mirr", " curc", " currer", "correr", "cerri", "schr", "mirl"], "buf": ["comb", "fab", "rc", " buff", "br", "cur", "img", "cmd", "uf", "bin", "bb", "header", "ctx", "batch", "buff", "bytes", "wb", "ab", "config", "b", "queue", "port", "bu", "bc", "context", "ba", "map", "data", " aux", "pool", "fb", "tmp", "Buff", "ff", "Buffer", "vec", "cv", "bag", "bh", "db", "box", "buffer", "uc", "fd", "cap", "array", "cb", "flush", "seq", "pad", "rb"], "index": ["number", "token", "end", "window", "weight", "pos", "append", "initial", "search", "value", "version", "name", "alpha", "exp", "batch", "part", "default", "action", "partial", "ind", "post", "pointer", "length", "input", "count", "multi", "serial", "prefix", "match", "error", "iter", "page", "object", "full", "position", "num", "type", "area", "x", "element", "ticket", "id", "open", "inc", "option", "offset", "slice", "key", "connection", "Index", "active", "zip", "start"], "in": ["a", "din", "is", "pin", "err", "In", "bin", "p", "line", "inf", "socket", "s", "log", "on", "pass", "inn", "this", "cin", "ini", "b", "ins", "image", "rin", "input", "kin", "url", "rec", "inner", "data", "readable", "ci", "win", "read", "cl", "c", "binary", "conn", "out", "lin", "source", "id", "inc", "d", "ssl", "val", "gin", "impl", "login", "isin", "ex", "f", "as", "reader", "IN", "con"], "total": ["token", "list", "padding", " Total", "base", "nt", "result", "part", "otal", "valid", "zero", "null", "t", "qa", "shared", "always", "partial", "max", "doc", "translation", "post", "length", "count", "comment", "meta", "serial", "multi", "error", "no", "all", "size", "toc", "full", "normal", "data", "quant", "Total", "complete", "type", "percent", "sum", "scale", "cat", "open", "offset", "available", " TOTAL", "current", "key", "fat", "json", "server", "active", "info", "tax"], "integer": ["number", "initial", "value", "string", "raction", "p", "operator", "m", "zero", "null", "digit", "atomic", "ment", "image", "length", "inf", "inner", "significant", "unsigned", "error", "object", "multiple", "pixel", "not", "u", "num", "quant", "c", "binary", "term", "element", "option", "odd", "offset", "integ", "current", "util", "auto", "array", "iter"], "neg": ["pos", "err", " negative", "iv", "unit", "ac", "axis", "minus", "loc", "ne", "valid", "zero", "null", "digit", "flo", "empty", "coll", "inf", "error", "negative", "not", "bug", "dec", "num", "init", "Neg", "nov", "or", "global", "sum", "uu", "beta", "anti", "plus", "iter", "origin", "tag"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main\\n{\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\twhile(true)\\n\t\t{\\n\t\t\ttry\\n\t\t\t{\\n\t\t\t\tint n = sc.nextInt() + sc.nextInt();\\n\t\t\t\tint i = 1;\\n\t\t\t\twhile (n >= 10)\\n\t\t\t\t{\\n\t\t\t\t\tn /= 10;\\n\t\t\t\t\ti++;\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(Integer.toString(i));\\n\t\t\t}\\n\t\t\tcatch(Exception e)\\n\t\t\t{\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "176", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "cs", "com", "cc", "ner", "sec", "tc", "app", "enc", "sync", "cr", "sq", "ec", "osc", "lc", "bc", "sci", "ss", "ci", "cl", "se", "l", "c", "src", "Sc", "or", " SC", "dc", "scan", "nc", "uc", "sh", "sp", "g", "SC", "con"], "n": ["nu", "network", "number", "nat", "p", "s", "nb", "nt", "ii", "na", "ne", "r", "j", "t", "ni", "none", "ini", "b", "N", "in", "count", "ci", "nn", " ni", "ns", "l", "u", "en", "c", "num", "e", "fn", "conn", "eni", "x", "next", "d", "ng", "y", "nit", "nin", "len", "nc", "f", "o", " p", "net"], "i": ["gi", "number", "I", "nr", "io", "si", "di", "p", "oi", "m", "nt", "ii", "index", "j", "r", "ni", "ini", "ai", "in", "phi", "li", "ci", "ti", "iter", "min", "ri", "qi", "u", "bi", "c", "e", "x", "pi", "id", "ip", "uri", "d", "ng", "y", "v", "api", "nit", "f", "o", "ui", "start", "k"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tint num;\\n\t\tString[] weight;\\n\t\ttry (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))){\\n\\n\t\t\tString n = br.readLine();\\n\t\t\tString w = br.readLine();\\n\\n\t\t\tnum = Integer.parseInt(n);\\n\t\t\tweight = w.split(\" \");\\n\t\t} catch (IOException e) {\\n\\n\t\t\treturn;\\n\t\t}\\n\t\tint minDiff = Integer.MAX_VALUE;\\n\t\tfor (int t = 1; t < num; t++) {\\n\\n\t\t\tint s1 = 0;\\n\t\t\tfor (int index = 0; index < t; index ++) {\\n\\n\t\t\t\ts1 += Integer.parseInt(weight[index]);\\n\t\t\t}\\n\t\t\tint s2 = 0;\\n\t\t\tfor (int index = t; index < num; index ++) {\\n\\n\t\t\t\ts2 += Integer.parseInt(weight[index]);\\n\t\t\t}\\n\t\t\tif (minDiff > Math.abs(s1 - s2)) {\\n\\n\t\t\t\tminDiff = Math.abs(s1 - s2);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(minDiff);\\n\t}\\n}\\n", "target": "2", "substitutes": {"num": ["nu", "th", "span", "number", "test", "NUM", "pos", "um", "feat", "mult", "name", "p", "unit", "T", "umi", "nb", "nt", "m", "mu", "b", "in", "count", "length", "end", "no", "nn", "miss", "total", "all", "Num", "u", "en", "type", "np", "x", "out", "tu", "sum", "id", "nom", "d", "thread", "un", "offset", "off", "len", "om", "f", "dim", "net", "temp", "i", "col", "norm"], "weight": ["network", "number", "method", "wl", "load", "force", "value", "strength", "word", "rank", "name", "string", "unit", "raw", "condition", "version", "wd", "grade", "speed", "width", "flow", "weights", "quality", "lang", "default", "work", "mass", "Weight", "length", "count", "input", "sword", "wave", "match", "error", "sign", "wallet", "layer", "font", "password", "aw", "type", "sum", "scale", "style", "age", "distance", "shape", "key", "sex", "wall", "cost", "fw"], "n": ["number", "i", "p", "line", "s", "nb", "m", "cn", "ne", "r", "ln", "sn", "b", "N", "in", "rn", "nn", "no", "ns", "l", "u", "c", "en", "e", "dn", "nw", "d", "v", "f", "o", "net", "k"], "w": ["wx", "wl", "sw", "ww", "wu", "ew", "word", "won", "p", "width", "wa", "wh", "work", "W", "ws", "wave", "CW", "q", "u", "password", "wal", "aw", "e", "h", "wp", "words", "nw", "widget", "d", "v", "fw", "k", "hw", "wed", "we", "wr", "wt", "rw"], "minDiff": [" minDelta", " mindiff", "smallDifferent", "smallDiff", "minimumDist", "maxDiff", "MinError", "minLength", " minLength", "minError", "Mindiff", "minimumDifferent", " minDist", "minDifferent", "MinLength", "minimumDiff", " minError", "MinDelta", "MinDiff", " minDifferent", "mindiff", "minDelta", "maxDist", "MinDist", "maxError", "smallDist", "smallLength", "minimumLength", "maxdiff", "minDist", "maxLength", "maxDelta"], "t": ["a", "test", "the", "ot", "pt", "target", "p", "unit", "T", "template", "s", "tc", "nt", "m", "j", "z", "st", "dt", "b", "tt", "end", "ti", "tw", "l", "u", "c", "e", "tp", "type", "x", "ts", "out", "h", "task", "ta", "d", "y", "v", "off", "f", "to", "time", "o", "g", "temp", "i", "start"], "s1": ["sone", "s0", "ppre", "rs1", "p2", "f3", "minpre", "fOne", "fpre", "s16", "rsOne", "ss2", "ss16", "sOne", "ssOne", "spre", " sOne", "f1", " sone", "rsfirst", "ss0", "ss1", " sfirst", "min2", " s0", "ffirst", " s16", "s3", "ssone", "rs2", "sfirst", "p3", "p1", "f2", "min1", "min3"], "index": ["expression", "list", "number", "token", "i", "pos", "update", "version", "step", "name", "unit", "condition", "ion", "diff", "loop", "axis", "width", "part", "loc", "body", "action", "site", "ind", "coll", "edit", "pointer", "length", "input", "prefix", "end", "level", "count", "match", "data", "size", "column", "page", "degree", "point", "position", "date", "c", "x", "head", "element", "id", "inc", "tail", "field", "thread", "path", "offset", "ix", "slice", "left", "option", "current", "key", "label", "connection", "f", "Index", "temp", "iter", "start", "col"], "s2": ["tsTwo", " s256", " s72", "ts72", "fTwo", "wssecond", "ts4", " s212", "ds212", " s4", "ds256", "ssecond", "f1", "ps1", "stwo", " stwo", "ps256", "ds2", "dssecond", "ws212", "vtwo", "ps2", "ftwo", "ds72", "ts2", "s256", "pstwo", "S2", "STwo", "S256", "vTwo", "ds4", "s4", " sTwo", "s212", "psTwo", "dsTwo", "s72", "ws2", "ws256", " ssecond", "Stwo", "f2", "v2", "v1", "sTwo"]}}
{"code": "\\nimport java.util.Scanner;\\n\\n/*\\n * To change this license header, choose License Headers in Project Properties.\\n * To change this template file, choose Tools | Templates\\n * and open the template in the editor.\\n */\\n\\n/**\\n *\\n * @author otsuhata\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    \\n    if(-1000 <= a && a <= 1000 && -1000 <= b && b <= 1000 && a < b) {\\n        System.out.println(\"a < b\");\\n    }else if(-1000 <= a && a <= 1000 && -1000 <= b && b <= 1000 && a > b) {\\n        System.out.println(\"a > b\");\\n    }else if(-1000 <= a && a <= 1000 && -1000 <= b && b <= 1000 && a == b) {\\n        System.out.println(\"a == b\");\\n    }else {\\n        System.out.println(\"Please enter a number from -1000 to 1000.\");\\n    }\\n  }    \\n}", "target": "179", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "is", "ch", "cur", "cs", "ser", "ca", "com", "cc", "ner", "tc", "na", "acc", "sync", "osc", "cr", "sl", "sq", "ec", "lc", "bc", "sci", "ss", "cl", "scope", "se", "c", "src", "Sc", "asc", "sem", "cv", "str", " SC", "mc", "scan", "nc", " Sc", "anc", "server", "uc", "sh", "sp", "sb", "SC"], "a": ["sta", "w", "fa", "ak", "ga", "ar", "ca", "n", "sub", "au", "p", "s", "alpha", "ac", "m", "aaa", "ia", "na", "ada", "A", "sa", "ea", "t", "ma", "an", "ab", "ai", "aux", "ae", "ba", "all", "common", "pa", "l", "aj", "u", "c", "another", "e", "num", "am", "area", "x", "la", "d", "va", "y", "api", "aa", "f", "as", "o", "abc", "ama", "i", "ad"], "b": ["br", "w", "n", "base", "bb", "p", "nb", "s", "bd", "m", "eb", "bot", "r", "j", "wb", "t", "ab", "ib", "an", "bar", "bc", "ba", "ob", "B", "l", "u", "bi", "c", "fb", "e", "bs", "x", "h", "out", "body", "d", "y", "db", "v", "aa", "bf", "f", "k", "o", "sb", "g", "be", "cb", "i", "ad", "rb"]}}
{"code": "import java.util.*;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        \\n\t\tScanner sc=new Scanner(System.in);\\n\\n\t\tint A=sc.nextInt();\\n\t\tint B=sc.nextInt();\\n\t\tint ans;\\n\t\t\\n\t\tif (A==B){\\n\t\t    ans=A+B;\\n\t\t}else{\\n\t\t    if (A<B){A=B;}\\n\t\t    ans=A*2-1;\\n\t\t}\\n\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "75", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "ctx", "com", "cc", "ner", "tc", "sec", "soc", "acc", "enc", "system", "cr", "osc", "sq", "lc", "cont", "coll", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "cv", " SC", "sch", "scan", "nc", "uc", "sp", "sb", "parser", "SC"], "A": ["a", "API", "U", "E", "I", "HA", "Ang", "AC", "As", "Na", "Ab", "AU", "AF", "AB", "AN", "GA", "C", "T", "AM", "Array", "ANS", "ana", "PA", "LA", "AA", "an", "N", "SHA", "UA", "IA", "AS", "H", "AW", "Y", "NA", "OA", "L", "MA", "Java", "M", "SA", "Az", "X", "AD", "Area", "EA", "AR", "Parts", "S", "P", "F", "AV", "AP", "ASC", "An", "FA", "CA"], "B": ["O", "U", "E", "I", "BS", "Ab", "Bi", "AB", "J", "C", "BF", "T", "BE", "NB", "SB", "TB", "PB", "b", "N", "QB", "BC", "GB", "D", "UB", "CB", "Y", "H", "DB", "L", "M", "X", "LB", "Bs", "BA", "OB", "P", "BP", "F", "V", "EB", "BB", "AP", "BL", "BER", "WB", "BI", "BM"], "ans": ["a", "span", "vals", "results", "ks", "ants", "cons", "ca", "blocks", "AN", "parser", "errors", "ops", "lan", "anon", "annot", "amps", "man", "na", "arts", "ANS", "os", "aid", "offs", "ana", "nan", "outs", "an", "ann", "ars", "ls", "ins", "lines", "atan", "AS", "cas", "actions", "NA", "ns", "ends", "ases", "can", "acts", "types", "reads", "la", "ats", "eps", "aus", "ids", "ions", "books", "aned", "scan", "anc", "as", "ays", "ras", "rows"]}}
{"code": "import java.io.*;\\nclass Main{\\npublic static void main(String[] args){\\nString[] data = new String[3];\\nint output = 0;\\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\ntry {\\nwhile (true){\\ndata = (br.readLine()).split(\" \");\\nif (data[1].equals(\"?\")) break;\\nswitch(data[1]){\\ncase \"+\":\\noutput = Integer.parseInt(data[0]) + Integer.parseInt(data[2]);\\nbreak;\\ncase \"-\":\\noutput = Integer.parseInt(data[0]) - Integer.parseInt(data[2]);\\nbreak;\\ncase \"*\":\\noutput = Integer.parseInt(data[0]) * Integer.parseInt(data[2]);\\nbreak;\\ncase\"/\":\\noutput = Integer.parseInt(data[0]) / Integer.parseInt(data[2]);\\nbreak;\\n}\\nSystem.out.println(output);\\n}\\n} catch (IOException e) {\\ne.printStackTrace();\\n} finally {\\ntry {\\nbr.close();\\n} catch(IOException e) {\\ne.printStackTrace();\\n}\\n}\\n}\\n}", "target": "139", "substitutes": {"data": ["results", "step", "index", "video", "multi", "split", "ata", "join", "id", "style", "str", "buffer", "json", "ui", "array", "info", "zip", "start", "missing", "dd", "pos", "string", "name", "line", "write", "result", "valid", "work", "config", "error", "da", "database", "uri", "draw", "dat", "o", "number", "load", "done", "params", "value", "code", "alpha", "media", "resources", "na", "ul", "bytes", "fail", "response", "comment", "input", "type", "cat", "la", "function", "body", "format", "message", "api", "feed", "div", "i", "pad", "a", "list", "file", "script", "version", "template", "diff", "batch", "part", "letter", "default", "text", "source", "content", "DATA", "key", "parse"], "output": ["run", "number", "writing", "respond", "hidden", "done", "job", "address", "update", "value", "string", "version", "generation", "name", "unit", "exit", "write", "sort", "result", "width", "letter", "default", "resource", "config", "model", "response", "operation", "length", "image", "input", "error", "display", "export", "outer", "success", "generated", "written", "complete", "other", "type", "out", "put", "text", "block", "content", "style", "control", "continue", "format", "offset", "external", "feed", "console", "foo", "current", "example", "Output", "dot", "summary", "production", "progress", "information"], "br": ["plug", "res", "ctr", "oper", "io", "ch", "cur", "err", "Br", "img", "tr", "sr", "er", "buf", "yr", "result", "BR", "handle", "http", "r", "browser", "jar", "cr", "arr", "report", "ab", "b", "bar", "dr", "gr", "ocr", "bc", "obj", "mr", "raf", "fr", "stream", "bridge", "lr", "bro", "wr", "fore", "str", "bh", "hr", "cro", "sp", "reader", "cb", "bl", "rb"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n      \tScanner sc = new Scanner(System.in);\\n    \tint n = sc.nextInt();\\n      \tint k = sc.nextInt();\\n      \tString s = sc.next();\\n      \ts = s.substring(0,k-1) + s.substring(k-1,k).toLowerCase() + s.substring(k, n);\\n      \tSystem.out.println(s);\\n    }\\n}", "target": "71", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "sub", "sr", "cc", "ner", "tc", "acc", "enc", "sync", "osc", "cr", "sq", "ec", "lc", "cont", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "se", "c", "Sc", "asc", "sche", " SC", "sch", "mc", "scan", "nc", "uc", "server", "sh", "sp", "sb", "parse", "SC"], "n": ["a", "K", "kn", "p", "nb", "m", "nt", "na", "ne", "j", "r", "z", "sn", "b", "N", "in", "nn", "no", "ns", "l", "u", "en", "c", "num", "conn", "x", "d", "v", "nc", "f", "nl", "i", "inn"], "k": ["K", "kn", "ks", "w", "ak", "p", "mk", "m", "j", "r", "ki", "z", "sk", "N", "in", "kk", "length", "ke", "level", "ik", "q", "l", "u", "c", "x", "dk", "kw", "id", "d", "kid", "y", "v", "kick", "key", "ko", "ok", "f", "o", "i"], "s": ["fs", "parts", "results", "is", "ms", "cs", "si", "string", "rs", "aws", "p", "ings", "m", "gs", "os", "sets", "bytes", "t", "sv", "js", "abs", "ls", "b", "ds", "ins", "your", "ws", "ss", "sg", "its", "ns", "l", "u", "c", "ses", "e", "bs", "h", "su", "ts", "S", "d", "ps", "str", "es", "json", "f", "services", "as", "o", "array", "g", "ans", "sb", "strings"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(final String[] args) {\\n\t\t@SuppressWarnings(\"resource\")\\n\t\tfinal Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n\t\tfinal String S = in.next();\\n\t\tString judge = solve(S);\\n\t\tSystem.out.println(judge.trim());\\n\t}\\n\\n\tpublic static boolean isPossibleMonth(String m) {\\n\t\tfinal int val = Integer.parseInt(m);\\n\t\treturn val <= 12 && val >= 1;\\n\t}\\n\\n\tstatic String solve(final String S) {\\n\t\tfinal boolean headIsMonth = isPossibleMonth(S.substring(0, 2));\\n\t\tfinal boolean tailIsMonth = isPossibleMonth(S.substring(2, 4));\\n\t\tif (headIsMonth) {\\n\t\t\tif (tailIsMonth) {\\n\t\t\t\treturn \"AMBIGUOUS\";\\n\t\t\t} else {\\n\t\t\t\treturn \"MMYY\";\\n\t\t\t}\\n\t\t} else {\\n\t\t\tif (tailIsMonth) {\\n\t\t\t\treturn \"YYMM\";\\n\t\t\t} else {\\n\t\t\t\treturn \"NA\";\\n\t\t\t}\\n\t\t}\\n\t}\\n}\\n", "target": "5", "substitutes": {"in": ["a", "din", "is", "pin", "err", "In", "bin", "n", "p", "line", "er", "log", "r", "ln", "ini", "doc", "ins", "rin", "inf", "input", "inner", "kin", "data", "session", "min", "win", "read", "l", "c", "stream", "init", "binary", "out", "or", "source", "inc", "d", "ssl", "str", "again", "nin", "login", "isin", "buffer", "scan", "ex", "connection", "as", "g", "reader", "i", "IN", "inn"], "S": ["O", "SE", "U", "Si", "IS", "I", "Su", "Sample", "Sing", "SU", "C", "T", "SS", "s", "RS", "Source", "SO", "SB", "SN", "Session", "Service", "G", "W", "N", "TS", "SHA", "R", "URI", " s", "SAM", "D", "Y", "Sync", "SM", "L", "Single", "M", "SA", "Socket", "SER", "SR", "The", "SI", "SL", "P", "WS", "DS", "F", "V", "Standard", "NS", "GS", "Sl", "ST", "STR", "SH", "SC"], "judge": ["Judgee", "juge", "Judger", "judce", "JudGE", "badged", "Judge", "judgement", "judger", "judgee", "suitgement", "juce", "mungement", "juger", "mungee", "judGE", "juged", "badger", "suitge", "suitgee", "judged", "Judce", "badce", "munge", "Judgement", "munGE", "Judged", "suitGE", "badge"], "m": ["a", "ms", "n", "p", "s", "r", "mn", "gm", "hm", "b", "input", "ym", "dm", "imm", "data", "machine", "mr", "month", "cm", "l", "u", "num", "c", "e", "M", "mi", "x", "h", "sm", "id", "tm", "d", "str", "v", "f", "o", "md", "Ms", "i", "mm"], "val": ["vals", "ee", "aval", "il", "rot", "value", "pt", "base", "ref", "elt", "p", "unit", "index", "r", "valid", "sl", "abl", "b", "ind", "vel", "doc", "rol", "count", "bc", "oo", "data", "el", "Val", "l", "dec", "num", "af", "x", "eval", "la", "alt", "rt", "v", "VAL", "ol", "len", "sel", "f", "az", "al", "seq", "cal"], "headIsMonth": [" headisYear", "headWasYear", " headIsHalf", "tailISMonth", "headisYear", "headWasHalf", "headWasMonth", "headIsYear", "headEsWeek", "tailISRegular", "tailISMM", "headISMM", "tailISmonth", "headOsMM", " headisMonth", "tailIsMM", "headOsRegular", "headEsYear", "tailIsmonth", "headisWeek", " headisHalf", " headIsYear", "tailIsRegular", " headIsWeek", "headEsHalf", "headisHalf", "headisMonth", "headIsmonth", "headEsMonth", "headIsRegular", "headISMonth", "headOsmonth", " headisWeek", "headISmonth", "headISRegular", "headWasWeek", "headIsHalf", "headIsMM", "headOsMonth", "headIsWeek"], "tailIsMonth": ["tailAsmonth", "tailInfomonth", "tailISMonth", "headisYear", "tailOsmonth", "tailIsModule", "headIsYear", "tailISRegular", "headismonth", "tailInfoMoon", "tailsISYear", "endIsmonth", "endISMoon", "tailisMonth", "tailISmonth", "tailAsMoon", "tailOsYear", "tailIsMoon", "endIsMoon", "tailIsmonth", "endIsMonth", "tailIsRegular", "tailAsMonth", "endISmonth", "headisMonth", "tailInfoMonth", "headIsmonth", "tailISYear", "tailsISmonth", "headIsRegular", "tailsIsMonth", "endISMonth", "tailISModule", "headisRegular", "tailsIsmonth", "tailsISMonth", "tailIsYear", "tailsIsYear", "tailOsMonth", "tailisModule", "tailismonth", "tailsISModule", "tailOsModule", "tailISMoon", "tailisRegular", "tailsIsModule", "tailisYear"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner((System.in));\\n\t\tint n = sc.nextInt();\\n\t\tint[] a = new int[n];\\n\t\tint ans = 0, o = 0, e = 0;\\n\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint x = sc.nextInt();\\n\t\t\tif (x % 2 == 0) {\\n\t\t\t\ta[e] = x;\\n\t\t\t\te++;\\n\t\t\t} else {\\n\t\t\t\to++;\\n\t\t\t}\\n\t\t}\\n\t\tif (o != n) {\\n\t\t\tfor (int i = 0; i < e; i++) {\\n\t\t\t\twhile (a[i] % 2 == 0) {\\n\t\t\t\t\tans++;\\n\t\t\t\t\ta[i] = a[i] / 2;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "39", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ca", "sub", "cer", "sf", "screen", "cc", "ner", "sec", "tc", "na", "enc", "sync", "system", "osc", "cr", "ec", "sq", "lc", "cont", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "or", "sche", "sem", "cv", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "server", "sh", "sp", "sb", "SC"], "n": ["w", "p", "nb", "s", "ner", "m", "nt", "on", "ne", "j", "t", "z", "an", "b", "N", "in", "nn", "size", "all", "no", "ns", "l", "u", "en", "c", "num", "d", "y", "v", "len", "nc", "f", "net", "k"], "a": ["access", "tta", "sta", "ants", "ar", "ga", "ca", "au", "p", "oa", "aaa", "ia", "alpha", "ac", "s", "na", "wa", "A", "sa", "ea", "ana", "ma", "z", "an", "ab", "work", "b", "ai", "aux", "ae", "ba", "ata", "pa", "da", "l", "u", "aw", "c", "area", "am", "asa", "la", "y", "va", "aa", "f", "as", "auto", "array"], "ans": ["vals", "ks", "ants", "rs", "ops", "oa", "p", "errors", "lan", "au", "s", "nos", "ii", "amps", "na", "ents", "os", "ANS", "ens", "A", "aid", "ana", "outs", "an", "sk", "ann", "ars", "ls", "ds", "ins", "ies", "lines", "atan", "cas", "nn", "no", "ns", "l", "can", "xes", "xs", "la", "eps", "es", "ions", "ons", "anc", "as", "asts", "ays", "rows"], "o": ["O", "io", "oe", "ie", "oa", "p", "po", "oi", "s", "m", "os", "j", "t", "z", "an", "b", "go", "in", "oo", "no", "l", "so", "u", "en", "c", "out", "d", "y", "v", "ol", "f", "to", "co"], "e": ["E", "ei", "ee", "oe", "ie", "oa", "p", "s", "m", "ii", "ne", "j", "os", "ea", "z", "ec", "in", "ae", "end", "size", "el", "l", "se", "u", "en", "c", "ey", "ce", "eu", "d", "y", "v", "es", "ice", "f", "ze"], "i": ["xi", "gi", "I", "ei", "is", "io", "si", "ie", "di", "p", "oi", "cli", "m", "ii", "hi", "index", "j", "ki", "ni", "z", "mini", "ini", "b", "ai", "in", "inner", "li", "ci", "l", "qi", "u", "bi", "c", "ri", "ori", "it", "iu", "eni", "mi", "pi", "fi", "id", "ip", "uri", "y", "v", "ix", "f", "ui", "info"], "x": ["xi", "wx", "w", "code", "p", "oa", "m", "na", "index", "j", "cross", "t", "z", "an", "b", "xy", "xc", "rx", "pe", "ax", "l", "u", "c", "h", "xs", "X", "xx", "id", "d", "y", "v", "ix", "xxx", "ex", "xp", "f", "k"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\n\\n/**\\n * 0001\uff1aList of Top 3 Hills\\n * \\n * @author Lyu\\n * @version 2015/06/21\\n */\\npublic class Main {\\n\\n    /**\\n     * 10\u500b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u9ad8\u3044\u9806\u306b3\u3064\u51fa\u529b\u3059\u308b\u3002\\n     * \\n     * @param args\\n     * @throws IOException \\n     * @throws NumberFormatException \\n     */\\n    public static void main(String[] args) throws NumberFormatException, IOException {\\n\\n        // \u6a19\u6e96\u5165\u529b\u8aad\u53d6\u308a\\n        int[] heightOfHills = getHeightOfHills();\\n        \\n        // \u9ad8\u3044\u9806\u306b3\u3064\u3092\u8868\u793a\\n        printTop3(heightOfHills);\\n    }\\n\\n    \\n    /**\\n     * \u6a19\u6e96\u5165\u529b\u3092\u8aad\u307f\u53d6\u308a\u3001\u5c71\u306e\u9ad8\u3055\u3092\u8868\u3059\u30c7\u30fc\u30bf\u3092\u8981\u7d20\u657010\u306e\u914d\u5217\u3067\u8fd4\u3059\u3002\\n     * \\n     * @return \u5c71\u306e\u9ad8\u3055\u3092\u8868\u3059\u914d\u5217\\n     * @throws NumberFormatException\\n     * @throws IOException\\n     */\\n    private static int[] getHeightOfHills() throws NumberFormatException, IOException {\\n        // \u5165\u529b\u8aad\u53d6\u308a\\n        InputStreamReader streamReader = new InputStreamReader(System.in);\\n        BufferedReader bufferedReader = new BufferedReader(streamReader);\\n\\n        String line = null;\\n        int[] heightOfHills = new int[10];\\n        int count = 0;\\n\\n        try {\\n            while ((line = bufferedReader.readLine()) != null) {\\n                heightOfHills[count] = Integer.parseInt(line);\\n                ++count;\\n            }\\n        } finally {\\n            bufferedReader.close();\\n            streamReader.close();\\n        }\\n        return heightOfHills;\\n    }\\n\\n    /**\\n     * \u53d7\u3051\u53d6\u3063\u305fint\u578b\u914d\u5217\u8981\u7d20\u3092\u3001\u6570\u5024\u306e\u5927\u304d\u3044\u9806\u306b3\u3064\u51fa\u529b\u3059\u308b\u3002\\n     * \\n     * @param array int\u578b\u306e\u914d\u5217\\n     */\\n    private static void printTop3(int[] array) {\\n        // \u30bd\u30fc\u30c8\\n        Arrays.sort(array);\\n        \\n        // \u9ad8\u3044\u9806\u306b3\u3064\u3092\u51fa\u529b\\n        for (int i = 1; i <= 3; ++i) {\\n            System.out.println(array[array.length - i]);\\n        }\\n    }\\n}", "target": "164", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main{\\n    public static void main(String[] args) throws IOException{\\n    \tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    \twhile(true){\\n            String[] strArr = br.readLine().split(\" \");\\n\\n            int a = Integer.parseInt(strArr[0]);\\n            String op = strArr[1];\\n            int b = Integer.parseInt(strArr[2]);\\n\\n            if(op.equals(\"?\")) break;\\n\\n            switch(op){\\n            \tcase \"+\":\\n            \t\tSystem.out.println(a + b);\\n            \t\tbreak;\\n            \tcase \"-\":\\n            \t\tSystem.out.println(a - b);\\n            \t\tbreak;\\n            \tcase \"*\":\\n            \t\tSystem.out.println(a * b);\\n            \t\tbreak;\\n            \tcase \"/\":\\n            \t\tSystem.out.println(a / b);\\n            \t\tbreak;\\n            \tdefault:\\n            \t\tbreak;\\n            }\\n    \t}\\n    }\\n}", "target": "139", "substitutes": {"br": ["nr", "io", "ch", "img", "Br", "err", "ar", "bb", "tr", "p", "sr", "er", "buf", "yr", "bd", "BR", "r", "browser", "cr", "arr", "dr", "bar", "ocr", "gr", "bc", "obj", "mr", "fr", "ori", "ber", "bt", "bro", "wr", "str", "hr", "bf", "div", "sp", "reader", "cb", "bl", "rb"], "strArr": ["strARrl", "strErp", "strCurn", "strErn", "strArp", "strErr", "strAln", "strARbr", " strARb", " strArbr", "strArb", "strCurr", "strArl", " strARrl", "strParl", " strArp", " strARr", "strErl", "strAttb", "strAttr", " strARbr", "strARr", "strARn", "strARw", "strAttp", " strArw", "strArn", "strAlp", "strARrs", "strArw", " strArrs", " strArb", "strCurw", "strArrl", "strAlr", " strArl", "strErrs", "strParrl", " strARrs", " strARn", "strErb", "strParr", "strParb", "strARp", " strARp", "strErrl", "strAlbr", "strCurb", "strErbr", " strARw", "strErw", " strArrl", "strArbr", "strARb", "strArrs", " strArn", "strAttrs", "strARl", " strARl"], "a": ["access", "sta", "ga", "ca", "au", "p", "oa", "ia", "ac", "alpha", "aaa", "na", "aaaa", "ada", "A", "sa", "ea", "qa", "ana", "ma", "aba", "an", "valid", "ai", "aux", "apa", "ba", "ata", "aka", "da", "aj", "c", "af", "area", "x", "am", "asa", "la", "mA", "va", "y", "api", "za", "aa", "o", "auto", "ama", "i", "ad"], "op": ["oper", "oop", "io", "pop", "pos", "orp", "oc", "expr", "ops", "p", "po", "ic", "name", "operator", "bot", "app", "http", "loc", "OP", "class", "ipop", "operation", "comp", "ype", "obj", "opt", "rip", "cmp", "opus", "opp", "it", "ope", "type", "ext", "or", "oct", "bit", "id", "ip", "option", "pp", "format", "cop", "api", "hop", "oid", "o", "Op", "sp", "orb"], "b": ["w", "n", "base", "bb", "gb", "p", "lb", "nb", "bd", "s", "eb", "bot", "r", "j", "wb", "bp", "z", "ab", "ib", "pb", "ba", "ob", "B", "l", "u", "c", "e", "fb", "x", "h", "d", "y", "db", "v", "f", "o", "sb", "g", "i", "rb"]}}
{"code": "import java.util.*;\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tsc.nextLine();\\n\t\tint[] A = castToInt(sc.nextLine().split(\" \"));\\n\t\tint[] B = castToInt(sc.nextLine().split(\" \"));\\n\t\tint[] C = castToInt(sc.nextLine().split(\" \"));\\n\t\tint total = 0;\\n\t\tint pre = 999;\\n\t\tfor (int a : A) {\\n\t\t\ttotal += B[a-1];\\n\t\t\tif (a - pre == 1) {\\n\t\t\t\ttotal += C[a-2];\\n\t\t\t}\\n        \tpre = a;\\n\t\t}\\n      System.out.println(total);\\n\t}\\n\tstatic int[] castToInt(String[] s) {\\n\t\tint[] ret = new int[s.length];\\n\t\tfor (int i = 0; i < s.length; i++) {\\n\t\t\tret[i] = Integer.parseInt(s[i]);\\n\t\t}\\n\t\treturn ret;\\n\t}\\n}", "target": "223", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "cor", "sub", "screen", "sr", "ctx", "cli", "cc", "ner", "sec", "exp", "soc", "sync", "cr", "osc", "sq", "lc", "cont", "bc", "sci", "cle", "ss", "ku", "proc", "ws", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "can", "text", "sche", "cv", "str", " SC", "dc", "sch", "mc", "console", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "parser", "SC"], "N": ["O", "K", "I", "n", "J", "T", "NT", "Max", "R", "D", "NA", "Z", "Num", "L", "num", "Total", "M", "No", "S", "P", "F", "V", "NS", " n", "Par"], "A": ["Alpha", "O", "I", "Na", "AF", "Ca", "T", "alpha", "Array", "LA", "AA", "G", "D", "H", "NA", "L", "Total", "M", "area", "SA", "Ma", "Ar", "AR", "BA", "S", "P", "mA", "array", "Am", "CA"], "B": ["O", "U", "E", "I", "BS", "Bi", "AB", "T", "BE", "G", "LA", "PB", "b", "QB", "R", "BC", "D", "UB", "Y", "DB", "L", "BBC", "M", "X", "Bs", "BA", "OB", "P", "F", "EB", "BB", "BL", "BI", "WB", "HB"], "C": ["K", "U", "E", "I", "Can", "CC", "CS", "T", "CU", "CL", "EC", "G", "Q", "R", "CO", "D", "Y", "Z", "L", "c", "M", "JC", "NC", "X", "KC", "S", "P", "F", "CNN", "V", "GC", "SC", "CH"], "total": ["per", "token", "parent", "done", "cur", "n", "base", "non", "p", "alpha", "nt", "result", "part", "otal", "valid", "t", "mini", "basic", "shared", "eta", "partial", "max", "bar", "translation", "post", "length", "count", "meta", "prefix", "error", "no", "all", "real", "toc", "full", "data", "trans", "da", "Total", "complete", "type", "last", "ta", "sum", "cat", "scale", "la", "info", "temp", "tax", "progress"], "pre": ["prev", "pc", "per", "PRE", "pos", "ca", "base", "ref", "p", "po", "alpha", "on", "part", "after", "j", "r", "partial", "max", "post", "par", "count", "prefix", "now", "pe", "min", "pa", "py", "inter", "pri", "last", "pi", "area", "next", "Pre", "d", "before", "offset", "current", "key", "aa", "f", "o", "auto", "prep", "temp", "start", "pad"], "a": ["prev", "sta", "ga", "ca", "at", "n", "oa", "p", "alpha", "ac", "part", "na", "wa", "ada", "sup", "sa", "ea", "qa", "an", "ab", "b", "ae", "ba", "ata", "data", "pa", "da", "aj", "u", "c", "af", "am", "area", "x", "next", "la", "va", "y", "offset", "api", "ha", "off", "aa", "f", "o", "ama", "start", "ad"], "s": ["parts", "qs", "is", "w", "address", "si", "string", "p", "sym", "m", "gs", "sets", "t", "sv", "b", "ls", "ds", "ss", "ws", "ns", "l", "u", "c", "e", "ses", "ts", "xs", "su", "source", "S", "d", "ps", "str", "y", "ssl", "v", "es", "f", "services", "o", "sb", "g", "strings", "spec"], "ret": ["res", "re", "live", "value", "arg", "base", "ref", "p", "result", "Ret", "nt", "part", "lit", "r", "arr", "rets", "rel", "count", "rec", "match", "data", "obj", "det", "def", "py", "num", "success", "en", "out", "limit", "sum", "id", "cat", "alt", "rt", "val", "offset", "rest", "len", "key", "reply", "bf", "f", "reg", "iter", "RET"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "abi", "ii", "hi", "index", "j", "t", "mini", "z", "uli", "ini", "mu", "b", "ai", "phi", "multi", "inner", "li", "ci", "ti", "ji", "q", "l", "ri", "u", "bi", "qi", "e", "iu", "it", "mi", "pi", "x", "fi", "id", "ip", "uri", "y", "v", "ix", "key", "f", "ui", "o", "k"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner keyboard = new Scanner(System.in);\\n\\n\t\tint K = keyboard.nextInt();\\n\t\tint A = keyboard.nextInt();\\n\t\tint B = keyboard.nextInt();\\n\t\t\\n\t\tString ans =\"NG\"; \\n\t\tfor(int x=A; x<=B; x++) {\\n\t\t\tif(x%K == 0)\\n\t\t\tans = \"OK\";\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\t\tkeyboard.close();\\n\t}\\n}\\n", "target": "28", "substitutes": {"keyboard": ["Keyhole", "wifeBoard", "keypath", "scandown", "kBoard", "corener", "kboard", "Keyboy", "feedbeat", "wifeboard", "Keyboard", "keyboards", "krow", "kingner", "Keypath", "callpoint", "scanBoard", "keybeat", "Keyner", "kdown", "callner", "keyrow", "feeddown", "Keybeat", "feedboard", "kingrow", "Keypoint", " keypath", "kbeat", "coreboards", "callboard", "kingboy", " keyner", "scanner", "scanboards", "keydown", "wifener", "coreboard", "scanhole", "kboy", "khole", "wakehole", "wakeBoard", "Keydown", "callpath", "coreBoard", "Keyrow", "wakeboard", "wifeboards", "keyboy", "keypoint", "keyhole", "kingboard", " keypoint", "keyBoard", "kner", "wakedown", "scanboard", "keyner", "feedhole"], "K": ["O", "U", "E", "I", "CC", "CH", "J", "C", "Sk", "unk", "MK", "KB", "SK", "G", "N", "Q", "D", "H", "Y", "KK", " k", "Z", "L", "M", "PK", "KS", "X", "KC", "CP", "S", "P", "F", "V", "Ak", "k"], "A": ["O", "a", "U", "E", "I", "HA", "AC", "As", "Na", "Ab", "AF", "AB", "C", "G", "AA", "LA", "KA", "W", "N", "RA", "D", "H", "AW", "Y", "L", "M", "SA", "X", "AD", "Ma", "mA", "S", "P", "F", "Ad", "DA", "AP", "At", "An", "CA"], "B": ["O", "U", "E", "I", "J", "C", "T", "BD", "NB", "SB", "G", "b", "N", "W", "Q", "QB", "R", "BC", "D", "UB", "H", "Y", "DB", "Z", "L", "M", "X", "LB", "BA", "OB", "P", "F", "V", "BB", "BL"], "ans": ["a", "ks", "cons", "ants", "AN", "lan", "anon", "s", "annot", "na", "ents", "ANS", "os", "arts", "ens", "ana", "ares", "anges", "outs", "an", "sk", "ann", "ls", "ars", "aces", "ds", "ins", "acs", "atan", "cas", "aning", "anned", "ads", "ns", "anners", "plan", "can", "reads", "ats", "eps", "aos", "aus", "ions", "aned", "scan", "ons", "anc", "as", "anks", "asts", "ays", "ras"], "x": ["xi", "wx", "sw", "px", "w", "pos", "xb", "ww", "n", "p", "ctx", "xt", "m", "fx", "index", "r", "j", "wa", "t", "z", "b", "fe", "in", "xc", "xy", "rx", "lex", "pe", "ax", "u", "num", "c", "e", "xa", "h", "xs", "X", "tx", "dx", "xx", "id", "d", "val", "y", "ux", "v", "ix", "xxx", "ex", "xp", "f", "i", "k"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) {\\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\\n        try {\\n            Integer dataNum = Integer.valueOf(in.readLine());\\n\\n            for (int i = 0; i < dataNum.intValue(); i++) {\\n\\n                String[] problemData = in.readLine().split(\"\\\\s\");\\n\\n                int max = 0;\\n\\n                int other1 = 0;\\n\\n                int other2 = 0;\\n\\n                for (String data : problemData) {\\n\\n                    int dataInt = Integer.valueOf(data);\\n\\n                    other2 = other1;\\n\\n                    if (dataInt > max) {\\n                        other1 = max;\\n                        max = dataInt;\\n                    } else {\\n                        other1 = dataInt;\\n                    }\\n                }\\n\\n                if ((max * max) == (other1 * other1 + other2 * other2)) {\\n                    System.out.println(\"YES\");\\n                } else {\\n                    System.out.println(\"NO\");\\n                }\\n            }\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        } finally {\\n            try {\\n                in.close();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n        }\\n    }\\n}", "target": "65", "substitutes": {"in": ["a", "exec", "din", "is", "pin", "io", "err", "In", "bin", "er", "ic", "s", "ac", "socket", "m", "log", "loader", "serv", "r", "inn", "resource", "ini", "thin", "b", "inet", "ins", "inside", "image", "rin", "input", "readable", "kin", "inner", "session", "win", "read", "l", "c", "stream", "e", "init", "out", "lin", "source", "id", "inc", "d", "ssl", "gin", "again", "nin", "login", "isin", "impl", "ex", "connection", "f", "as", "reader", "IN", "con"], "dataNum": ["errorNum", "DataSum", "dataNUM", "DataNUM", "DataNumber", "idSum", "idNum", "dataNumber", "DataNum", " dataNUM", "errorNumber", "errorNUM", "idNumber", "idNUM", "errorSum", " dataNumber", " dataSum", "dataSum"], "i": ["gi", "I", "io", "si", "n", "di", "p", "oi", "ii", "hi", "index", "j", "chi", "ni", "ini", "mu", "b", "ind", "ai", "count", "multi", "li", "ti", "ci", "zi", "ri", "u", "e", "iu", "pi", "x", "h", "id", "ip", "d", "v", "ix", "f", "ui", "k"], "problemData": [" ProblemDATA", " problemText", "ProblemList", " ProblemData", "ProblemDATA", "ProblemData", "ProblemArray", "systemString", "problemArray", "problemString", " problemList", " problemDATA", " problemArray", "ProblemText", " ProblemArray", "problemDATA", " problemString", " problemLine", "systemText", "systemLine", "problemList", "systemData", " ProblemList", "ProblemString", "problemLine", "problemText", "ProblemLine"], "max": ["chain", "res", "parent", "huge", "w", "code", "step", "p", "MAX", "alpha", "maximum", "first", "default", "this", "none", "Max", "work", "always", "conf", "count", "only", "rand", "now", "end", "size", "total", "cache", "range", "ax", "min", "no", "node", "q", "all", "num", "c", "init", "and", "last", "x", "out", "limit", "can", "next", "self", "id", "scale", "right", "mod", "d", "rest", "check", "key", "cu", "auto", "active", "temp", "parse", "wrap", "co"], "other1": ["other3", "event1", "more1", "key1", "length0", "more2", "length2", "otherL", "keyone", " otherone", "this1", " otherOne", " otherStep", "moreOne", "more0", "otherStep", "Other3", "this2", "anotherStep", "eventone", "Otherone", "Other2", "thisOne", "event2", " other3", "otherone", "OtherStep", "thisL", "outer1", "eventOne", "other0", "outerL", " otherL", "OtherOne", "another2", "length1", " other0", "Other1", "otherOne", "lengthone", "key3", "another1", "Other0", "key2", "outerOne", "outer2"], "other2": ["othersecond", " otherCopy", " othersecond", "otherTwo", "OtherCopy", "otherSecond", "otherCopy", "OTHERSecond", "one62", "OtherTwo", "result32", "OtherSecond", "othertwo", " otherTwo", "anotherTwo", "OTHER1", "other52", "one2", "member2", "anothersecond", "member62", "resultsecond", "Other2", "result1", "Other52", " other52", "OTHER2", "onetwo", " othertwo", "OTHER52", "member1", " otherSecond", "result2", "other62", " other62", "another32", "another2", "one1", "membertwo", "Other1", " other32", "other32", "another1", "anotherCopy"], "data": ["a", "missing", "number", "append", "value", "string", "code", "base", "p", "alpha", "media", "part", "first", " DATA", "valid", "default", "this", "one", "partial", "input", "end", "li", "error", "ata", "da", "join", "type", "area", "id", "function", "la", "d", "str", "format", "DATA", "xxx", "feed", "dat", "ui", "as", "reader", "pad"], "dataInt": [" dataPoint", "infoInt", " dataId", "dataInteger", "infoCond", "dataExt", "thisInt", "infoData", "DATAInt", "laShort", "dataMid", "dataVal", " dataInteger", "dataData", " dataCond", "messageI", "infoVal", "errorInt", "errorMid", " dataData", "dataId", "messageId", "messageData", "dataShort", "DATAData", "thisInteger", "valueExt", "thisPoint", "laVal", "valuePoint", "DATAI", " dataMid", "infoMid", "dataPoint", "dataCond", "valueInt", "errorShort", "valueInteger", " dataI", "dataI", "laData", "DATAId", " dataVal", "messageInt", " dataExt", "thisExt", "errorCond", "infoShort", " dataShort", "laInt"]}}
{"code": "import java.io.*;\\nclass Main\\n{\\n    public static void main(String[] args) \\n    {\\n\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\tString line=null;\\n\ttry {\\n\t    line = br.readLine();\\n\t} catch (IOException e){\\n\t    System.out.println(e);\\n\t}\\n\\n\tint x = Integer.parseInt(line);\\n\tint y = x * x * x;\\n\tSystem.out.println(y);\\n    }\\n}", "target": "36", "substitutes": {"br": ["io", "err", "Br", "ref", "tr", "sr", "buf", "er", "yr", "result", "BR", "handle", "r", "browser", "cr", "abs", "arr", "b", "dr", "gr", "bar", "lines", "obj", "data", "iter", "mr", "fr", "stream", "HR", "ber", "bridge", "bro", "str", "hr", "reader", "cb", "i", "bl", "rb"], "line": ["Line", "file", "inline", "cell", "LINE", "value", "string", "code", "base", "write", "log", "part", "letter", "ine", "ne", "le", "r", "pass", "sl", "one", "b", "lc", "response", "lo", "comment", "lines", "url", "data", "row", "pe", "page", "cl", "el", "l", "e", "out", "text", "lin", "source", "block", "body", "look", "style", "parse", "val", "str", "lf", "f", "nl", "i"], "x": ["number", "px", "w", "pos", "xe", "n", "value", "code", "p", "cross", "index", "t", "z", "b", "xxxx", "in", "xy", "xc", "ci", "size", "Y", "ax", "q", "u", "c", "e", "my", "h", "X", "xx", "id", "yx", "d", "val", "v", "ix", "xxx", "ex", "xp", "f", "g", "i", "check"], "y": ["iy", "ny", "n", "dy", "p", "ay", "vy", "gy", "oy", "z", "yy", "b", "ya", "Y", "yd", "ys", "py", "yo", "c", "e", "ey", "yt", "zy", "yi", "id", "ty", "d", "ry", "ix", "ady", "ice", "fy", "yk", "sy", "cy", "i", "ye"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint r = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint[][] spreadsheet = new int[r][c];\\n\t\tint[][] sumSpreadsheet = new int[r + 1][c + 1];\\n\t\tfor (int i = 0; i < r; i++) {\\n\t\t\tfor (int j = 0; j < c; j++) {\\n\t\t\t\tspreadsheet[i][j] = sc.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = 0; i < r; i++) {\\n\t\t\tfor (int j = 0; j < c; j++) {\\n\t\t\t\tsumSpreadsheet[i][j] = spreadsheet[i][j];\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = 0; i < r; i++) {\\n\t\t\tfor (int j = 0; j < c; j++) {\\n\t\t\t\tsumSpreadsheet[i][c] += sumSpreadsheet[i][j];\\n\t\t\t}\\n\t\t}\\n\t\tfor (int j = 0; j < c; j++) {\\n\t\t\tfor (int i = 0; i < r; i++) {\\n\t\t\t\tsumSpreadsheet[r][j] += sumSpreadsheet[i][j];\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = 0; i < r; i++) {\\n\t\t\tfor (int j = 0; j < c; j++) {\\n\t\t\t\tsumSpreadsheet[r][c] += sumSpreadsheet[i][j];\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = 0; i < r + 1; i++) {\\n\t\t\tfor (int j = 0; j < c + 1; j++) {\\n\t\t\t\tif (j == c) {\\n\t\t\t\t\tSystem.out.print(sumSpreadsheet[i][j]);\\n\t\t\t\t} else {\\n\t\t\t\t\tSystem.out.print(sumSpreadsheet[i][j] + \" \");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "23", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "screen", "com", "cam", "cc", "ner", "tc", "sync", "system", "osc", "cr", "sq", "ec", "lc", " scr", "bc", "sci", "cl", "scope", "se", "src", "Sc", "asc", "out", "sche", "sem", "cv", "gc", "con", " SC", "sch", "mc", "mac", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "g", "SC", "squ"], "r": ["res", "nr", "rc", "re", "w", "br", "err", "ar", "ra", "n", "rs", "tr", "p", "sr", "er", "yr", "ner", "m", "t", "cr", "z", "b", "dr", "R", "rn", "ir", "range", "fr", "q", "cl", "l", "u", "e", "rf", "h", "rr", "x", "pr", "rh", "ru", "right", "rt", "d", "v", "f", "rg", "ur", "k", "rb"], "c": ["rc", "ch", "w", "col", "cur", "err", "cs", "ca", "n", "cor", "code", "jc", "p", "C", "s", "ac", "cc", "m", "cn", "cd", "t", "z", "cr", "ec", "b", "lc", "cf", "count", "xc", "rec", "ci", "cm", "q", "arc", "cl", "l", "u", "e", "ce", "x", "h", "ct", "d", "y", "v", "dc", "mc", "nc", "uc", "f", "cu", "cy", "k", "con", "co"], "spreadsheet": ["spreadspread", "stylespread", "spreadfile", "preadsheet", "styleheet", " spreadbook", "sheetfile", "spreadheet", "sheetbook", " spreadette", " spreadfile", "spreadette", "schesheet", "spreadsheets", "preadsheets", "stylefile", "preadette", "stylesheet", " spreadsheets", "schesheets", "sheetspread", "spreadbook", " spreadspread", " spreadheet", "preadheet", "sheetheet", "scheette", "scheheet", "sheetsheets", "sheetsheet", "schebook", "preadbook"], "sumSpreadsheet": [" sumWorkbook", "sumXsheets", "sumSumsheet", "sumPartsheet", "sumFrontspread", "sumSpreadsheets", " sumFrontsheets", " sumPartsheet", "sumSpreadbook", " sumSpreadheet", "sumWorkbook", "SumWorkbook", " sumFrontbook", "sumXheet", " sumWorksheet", "SumXsheets", "sumSumsheets", "sumPartsheets", " sumWorkspread", " sumFrontheet", "sumXsheet", "sumSumheet", "SumXspread", "sumFrontsheets", "SumSpreadsheets", " sumWorksheets", "SumWorksheet", "SumSpreadspread", "SumWorksheets", "sumFrontsheet", " sumPartspread", "sumWorkheet", "sumSumbook", "SumXsheet", "sumSumspread", "sumPartspread", " sumSpreadspread", " sumFrontsheet", "sumBandsheets", " sumPartheet", "SumSpreadsheet", "SumXheet", "sumWorksheets", "sumXbook", "sumSpreadspread", "sumCopheet", " sumSpreadbook", "sumWorksheet", "sumWorkspread", "sumBandsheet", "sumSpreadheet", " sumPartsheets", "sumCopsheet", "sumFrontheet", "sumFrontbook", "SumSpreadbook", " sumSpreadsheets", "sumBandbook", " sumWorkheet", "SumWorkheet", "sumXspread", "sumCopsheets", "sumPartbook", "SumSpreadheet", "sumPartheet", "sumBandheet"], "i": ["xi", "gi", "a", "I", "io", "err", "ja", "ar", "si", "ie", "di", "n", "at", "p", "ic", "oi", "cli", "ii", "hi", "ij", "ni", "z", "ini", "b", "ai", "in", "phi", "ji", "li", "ci", "ir", "ti", "ik", "q", "zi", "ri", "qi", "l", "bi", "u", "e", "ori", "iu", "eni", "it", "mi", "pi", "yi", "x", "fi", "id", "ip", "uri", "y", "ix", "api", "v", "f", "ui", "o", "info"], "j": ["bj", "ch", "br", "job", "ja", "si", "ie", "jc", "n", "dj", "dy", "J", "p", "ion", "s", "jo", "ii", "ij", "index", "jet", "ni", "z", "js", "jj", "t", "jl", "b", "ind", "ji", "li", "obj", "ci", "ik", "q", "fr", "el", "l", "aj", "qi", "oj", "bi", "e", "u", "it", "java", "iu", "x", "pr", "adj", "uj", "d", "je", "y", "jit", "jen", "v", "api", "ju", "key", "f", "ui", "o", "jon", "k", "col", "jp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tString s=sc.next();\\n\t\tString str=\"\";\\n\t\tString temp=\"\";\\n\t\t\\n\t\tfor(int i=1;i<=s.length();i++){\\n\t\t\t\t\\n\t\t\t\tif(s.charAt(i-1)=='0'){\\n\t\t\t\t\tstr+=\"0\";\\n\t\t\t\t\t\\n\t\t\t\t}else if(s.charAt(i-1)=='1'){\\n\t\t\t\t\tstr+=\"1\";\\n\t\t\t\t\t\\n\t\t\t\t}else if(s.charAt(i-1)=='B'){\\n\t\t\t\t\t\\n\t\t\t\t\tfor(int j=0;j<str.length()-1;j++){\\n\t\t\t\t\t\ttemp+=str.charAt(j);\\n\t\t\t\t\t}\\n\t\t\t\t\tstr=temp;\\n\t\t\t\t\ttemp=\"\";\\n\t\t\t\t}\\n\t\t}\\n\t\t\\n\t\tsc.close();\\n\t\tSystem.out.print(str);\\n\t}\\n}", "target": "151", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "rc", "ch", "cur", "cs", "ca", "cer", "ctx", "cc", "ner", "sec", "tc", "soc", "enc", "sync", "system", "cr", "osc", "ec", "sq", "lc", "bc", "sci", "ss", "proc", "ci", "cl", "scope", "se", "c", "src", "Sc", "sem", " SC", "sch", "dc", "mc", "scan", "nc", "uc", "anc", "server", "sh", "sp", "g", "SC", "con"], "s": ["fs", "a", "parts", "is", "status", "cs", "si", "n", "string", "rs", "p", "sr", "part", "gs", "os", "r", "t", "sync", "sv", "sl", "st", "ls", "b", "ds", "in", "sg", "ss", "ws", "lines", "multi", "Str", "input", "ns", "l", "sys", "u", "c", "ses", "e", "bs", "su", "xs", "ts", "bis", "words", "text", "S", "y", "es", "f", "as", "o", "sp", "sb", "g", "strings", "spec"], "str": ["prev", "test", "exec", "ctr", "sta", "br", "cur", "err", "char", "si", "string", "tr", "sr", "cli", "diff", "result", "strip", "part", "enc", "r", "txt", "pass", "stri", "t", "cr", "st", "arr", "var", "lc", "dr", "b", "sl", "tree", "input", "inner", "stable", "obj", "Str", "data", "iter", "fr", "u", "c", "init", "e", "ext", "stress", "out", "x", "text", "id", "style", "div", "sp", "STR", "wr", "spec"], "temp": ["test", "flat", "pure", "value", "base", "pt", "tr", "p", "unit", "output", "template", "tc", "result", "tem", "part", "dest", "fake", "txt", "null", "t", "var", "white", "empty", "shared", "b", "partial", "lc", "emp", "tt", "prefix", "stable", "total", "font", "extra", "c", "tmp", "sequence", "out", "text", "single", "content", "style", "pre", "path", "v", "api", "current", "clean", "json", "Temp", "f", "zip", "iter", "wrap"], "i": ["xi", "gi", "I", "is", "io", "si", "ie", "di", "p", "oi", "m", "ii", "hi", "index", "ni", "mini", "z", "ini", "isi", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "zi", "ri", "qi", "u", "bi", "c", "e", "ori", "iu", "it", "mi", "pi", "x", "id", "ip", "uri", "y", "v", "ix", "f", "ui", "o", "info", "start"], "j": ["br", "job", "ja", "n", "jc", "ie", "dj", "J", "p", "m", "jo", "ii", "ij", "r", "z", "js", "jj", "b", "jl", "ind", "ji", "li", "obj", "ik", "all", "fr", "el", "child", "l", "aj", "u", "oj", "qi", "c", "it", "out", "x", "pr", "uj", "d", "y", "ix", "v", "jen", "key", "f", "o", "g", "k", "jp"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\tpublic static int n, l;\\n\tpublic static void main(String[] args){\\n    \tScanner sc = new Scanner(System.in);\\n      \tn = sc.nextInt();\\n      \tl = sc.nextInt();\\n      \t\\n      \tif(l > 0) {\\n      \t\tSystem.out.println(sum(1));\\n      \t}else if((l + n-1) < 0) {\\n      \t\tSystem.out.println(sum(n));\\n      \t}else {\\n      \t\tSystem.out.println(sum(1-l));\\n      \t}\\n    }\\n\t\\n\tpublic static int sum(int m) {\\n\t\tint sum = 0;\\n\t\tfor(int i = 1; i <= n; i++) {\\n\t\t\tif(i == m) continue;\\n\t\t\t//System.out.print(l+i-1);\\n\t\t\t//System.out.println();\\n\t\t\tsum += (l + i-1);\\n\t\t}\\n\t\treturn sum;\\n\t}\\n}", "target": "91", "substitutes": {"n": ["a", "network", "w", "p", "s", "nt", "ne", "r", "j", "ln", "ni", "z", "b", "N", "in", "li", "nn", "no", "all", "ns", "el", "L", "u", "en", "c", "num", "e", "x", "h", "d", "ll", "un", "y", "v", "ol", "len", "f", "nl", "o", "net", "k", "inn"], "l": ["il", "p", "s", "loc", "j", "ul", "ln", "t", "z", "sl", "lc", "b", "ls", "length", "li", "el", "cl", "L", "lp", "fl", "c", "u", "e", "lt", "kl", "lin", "la", "left", "dl", "ll", "y", "v", "ell", "ol", "len", "lf", "f", "o", "nl", "lu", "al"], "sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "search", "sr", "com", "cc", "ner", "tc", "na", "sync", "system", "osc", "cr", "sq", "ec", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "Sc", "asc", "sche", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "m": ["ms", "p", "s", "index", "j", "r", "mn", "z", "one", "mu", "b", "N", "nm", "cm", "month", "u", "num", "c", "e", "M", "mi", "x", "h", "sm", "d", "y", "v", "len", "f", "o", "dim", "mm", "k"], "sum": ["number", "weight", "fill", "um", "bin", "rank", "mult", "si", "unit", "sort", "alpha", "average", "ac", "log", "ums", "acc", "index", "zero", "sa", "sing", "Sum", " summ", "mass", "mu", "max", "class", "hash", "comment", "count", "mean", "cum", "error", "size", "total", "all", "sign", "miss", "use", "match", "min", "dash", "ass", "num", "text", "cat", "scale", "depth", "style", "val", "spread", "fat", "vol", " Sum", "dot", "summary", "info", "net", "mem", "cost", "parse", "gram", "mask"], "i": ["xi", "gi", "I", "si", "di", "p", "oi", "ii", "hi", "index", "j", "chi", "ni", "uli", "ini", "b", "ai", "phi", "ji", "multi", "li", "ti", "ci", "zi", "ri", "qi", "u", "bi", "c", "iu", "eni", "mi", "pi", "fi", "id", "ip", "uri", "d", "y", "v", "api", "ui", "o", "start"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        //\u5165\u529b\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n      \t//B\u306e\u914d\u5217\u683c\u7d0d\\n        int[] B = new int[N-1];\\n        for (int i = 0; i < (N-1); ++i){\\n            B[i]= sc.nextInt();\\n        }\\n        \\n        int sum = B[0] + B[N-2];\\n      \t\\n        for (int i = 0; i < (N-2); ++i){\\n          \t//\u6bd4\u8f03\u3057\u3066\u5c0f\u3055\u3044\u65b9\u3092\u52a0\u7b97\\n            sum += Math.min(B[i],B[i+1]);\\n        }\\n        \\n        //\u51fa\u529b\\n        System.out.println(sum);\\n        \\n    }\\n}", "target": "240", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tString s = sc.next();\\n\t\tint ans = 0;\\n\t\tfor(int i = 0; i < 3; i++) {\\n\t\t\tint local = 0;\\n\t\t\tif(s.charAt(i) == 'R') {\\n\t\t\t\tint j = i;\\n\t\t\t\tlocal = 0;\\n\t\t\t\twhile(j < 3 && s.charAt(j) == 'R') {\\n\t\t\t\t\tj++;\\n\t\t\t\t\tlocal++;\\n\t\t\t\t}\\n\t\t\t\ti = j;\\n\t\t\t}\\n\t\t\tans = Math.max(ans, local);\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "141", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "cor", "cer", "cc", "ner", "sec", "enc", "system", "osc", "cr", "ec", "lc", "ocr", "bc", "sci", "cle", "ss", "ci", "cus", "scope", "se", "c", "src", "Sc", "or", "sch", "mc", "scan", "nc", "uc", "sh", "sp", "g", "parser", "SC"], "s": ["fs", "comments", "qs", "is", "re", "si", "blocks", "string", "p", "m", "gs", "os", "r", "t", "sv", "sl", "abs", "ls", "ds", "ins", "in", "sg", "ws", "ss", "input", "ns", "l", "u", "c", "ses", "e", "src", "su", "bis", "words", "source", "states", "S", "str", "es", "services", "f", "as", "features", "sb", "g", "strings", "rows"], "ans": ["parts", "results", "atches", "ks", "ants", "cons", "ations", "cs", "blocks", "AN", "ones", "lan", "parser", "rs", "aps", "ags", "anon", "vers", "amps", "na", "ents", "ANS", "os", "anas", "ana", "anges", "outs", "an", "ann", "ars", "sk", "ls", "ins", "atan", "ians", "inas", "ches", "can", "acts", "caps", "ats", "eps", "aus", "ions", "es", "aned", "ons", "anc", "as", "features", "asts", "ays", "nas", "ras", "rows"], "i": ["xi", "gi", "I", "is", "io", "ani", "si", "ie", "di", "ami", "p", "oi", "jo", "ii", "hi", "index", "r", "ni", "z", "ini", "ind", "ai", "in", "phi", "multi", "ji", "li", "ci", "inner", "ik", "q", "ri", "qi", "u", "l", "init", "ori", "it", "iu", "pi", "x", "h", "fi", "id", "ip", "uri", "y", "v", "api", "ix", "vi", "anti", "f", "ui", "o", "info", "start", "jp"], "local": ["xi", "list", "regular", "parent", "ja", "n", "base", "relative", "raw", "internal", "p", "lan", "m", "jo", "ii", "http", "loc", "ional", "ul", "valid", "south", "z", "js", "shared", "lang", "b", "jl", "partial", "an", "count", "foreign", "inner", "multi", "small", "total", "all", "common", "central", "full", "el", "child", "l", "u", "java", " locals", "global", "tx", "la", "external", "ions", "available", "current", "json", "Local", "f", "auto", "active", "array", "remote", "k", "where", "jp"], "j": ["a", "ch", "job", "ja", "ani", "n", "jc", "dj", "ie", "J", "p", "jo", "ii", "ij", "loc", "r", "index", "z", "jj", "js", "shared", "jl", "b", "ind", "ji", "end", "li", "small", "fr", "el", "l", "aj", "u", "oj", "qi", "e", "other", "it", "x", "h", "global", "next", "adj", "uj", "remote", "y", "v", "ix", "f", "ui", "o", "k", "jp"]}}
{"code": "/* package whatever; // don't place package name! */\\n\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\n/* Name of the class has to be \"Main\" only if the class is public. */\\nclass Main\\n{\\n\t\\n    static class FastReader \\n    { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() \\n        { \\n            br = new BufferedReader(new\\n                     InputStreamReader(System.in)); \\n        } \\n  \\n        String next() \\n        { \\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n  \\n    public static void main(String[] args) \\n    { \\n        FastReader sc=new FastReader(); \\n\t\tint n=sc.nextInt();\\n\t\tint[] a=new int[n];\\n\t\t\\n\t\tfor(int i=0;i<n;i++) a[i]=sc.nextInt();\\n\t\tlong sum=0;\\n\t\tfor(int i=1;i<n;i++){\\n\t\t\tif(a[i]<a[i-1]){\\n\t\t\t\tsum+=a[i-1]-a[i];\\n\t\t\t\ta[i]=a[i-1];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t\\n    \t\\n    }\\n}", "target": "202", "substitutes": {"br": ["plug", "ver", "bas", "cur", "err", "Br", "img", "bb", "tr", "sr", "buf", "jp", "bd", "BR", "bm", "r", "browser", "cr", "arr", "ab", "b", "fe", "bar", "dr", "gr", "bc", "ob", "mr", "raf", "fr", "bel", "fb", "src", "bs", "ber", "bridge", "bt", "pr", "lr", "bro", "bed", "ler", "fore", "body", "rt", "bh", "db", "box", "hr", "cro", "bf", "sb", "be", "orb", "ur", "bl", "rb"], "st": ["sw", "sta", "string", "pt", "step", "stop", "struct", "sr", "ste", "sts", "ft", "s", "store", "nt", " est", "sth", "inst", "r", "sa", "stri", "t", "est", "cr", "sl", "sn", "ost", "storage", "fe", "b", "std", "ld", "dr", "ss", "Str", "pe", "sign", "fr", "cl", "nd", "l", "ist", "ast", "lt", "e", "src", "bs", "x", "bt", "pr", "ct", "rt", "style", "rest", "ut", "const", "sh", "sp", "ST", "be", "sb", "rd", "bl", "St"], "str": ["status", "pos", "err", "char", "string", "code", "pt", "tr", "p", "line", "sr", "s", "ner", "exp", "enc", "r", "inst", "j", "stri", "t", "z", "sl", "arr", "b", "gr", "dr", "doc", "entry", "url", "inner", "obj", "Str", "data", "fr", "cl", "l", "c", "e", "text", "pr", "id", "style", "val", "key", "div", "f", "sp", "STR", "iter", "bl"], "sc": ["pc", "esc", "scl", "sw", "rc", " sp", "ch", "cs", "cer", "sr", "cc", "tc", "sec", "soc", "r", "cr", "osc", "sq", "ec", "lc", "go", "ocr", "cont", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "mc", "nc", "sh", "sp", "sb", " rc", "SC"], "n": ["network", "span", "w", "p", "s", "nb", "m", "cn", "nt", "nor", "ne", "j", "ln", "mn", "ni", "z", "t", "an", "none", "sn", "b", "N", "in", "count", "nn", "no", "ns", "l", "u", "num", "c", "en", "e", "x", "d", "y", "v", "len", "nc", "f", "nl", "o", "net", "g", "k"], "a": ["missing", "tta", "ga", "ca", "at", "code", "au", "p", "oa", "ua", "aaa", "s", "ia", "alpha", "na", "wa", "sup", "A", "sa", "ea", "ma", "z", "an", "ab", "b", "ai", "aux", "ae", "input", "ba", "ata", "data", "all", "pa", "da", "l", "aj", "u", "c", "e", "area", "am", "x", "la", "d", "va", "y", "ha", "aa", "div", "f", "to", "as", "o", "active", "array", "ama", "ans", "auto", "ad"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "p", "ic", "oi", "cli", "m", "ii", "hi", "index", "j", "chi", "ki", "ni", "mini", "uli", "ini", "mu", "b", "ind", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "page", "q", "ri", "l", "u", "bi", "c", "qi", "e", "init", "iu", "it", "ori", "mi", "x", "pi", "my", "fi", "yi", "eni", "id", "ip", "uri", "y", "v", "ix", "slice", "api", "vi", "anti", "f", "ui", "o", "info", "start"], "sum": ["cal", " sums", "sav", "weight", "um", "diff", "alpha", "average", "ac", "result", "index", "ul", "sa", " summ", "Sum", "conf", "loss", "count", "av", "mean", "cum", "error", "size", "total", "miss", "pack", "sam", "ass", "sign", "use", "u", "num", "norm", "gam", "out", "cat", "scale", "dev", "spread", "aa", "vol", "fat", "add", "neg", "dot", "fee", "info", "mem", "cost", "parse", "gram", " total"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n\\n        // long startTime = System.currentTimeMillis();\\n\\n        Scanner scanner = new Scanner(System.in);\\n\\n        int x = scanner.nextInt();\\n\\n        scanner.close();\\n\\n        System.out.println(calc(x));\\n\\n        // System.out.println(System.currentTimeMillis() - startTime);\\n    }\\n\\n    private static int calc(int x) {\\n        int s = (int) Math.sqrt(x);\\n        int max = 1;\\n        for (int i = 2; i <= s; i++) {\\n            int j = i;\\n            int k = 2;\\n            while (j <= x) {\\n                if (max < j) {\\n                    max = j;\\n                }\\n                j = (int) Math.pow(i, k);\\n                k++;\\n            }\\n        }\\n\\n        return max;\\n    }\\n}\\n", "target": "143", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n\\nimport static java.lang.System.in;\\n\\nclass Main {\\n    public static void main(String[] args)throws IOException {\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\\n        int N = Integer.parseInt(reader.readLine());\\n        switch(N%10){\\n            case 2:\\n                System.out.println(\"hon\");\\n                break;\\n            case 4:\\n                System.out.println(\"hon\");\\n                break;\\n            case 5:\\n                System.out.println(\"hon\");\\n                break;\\n            case 7:\\n                System.out.println(\"hon\");\\n                break;\\n            case 9:\\n                System.out.println(\"hon\");\\n                break;\\n            case 0:\\n                System.out.println(\"pon\");\\n                break;\\n            case 1:\\n                System.out.println(\"pon\");\\n                break;\\n            case 6:\\n                System.out.println(\"pon\");\\n                break;\\n            case 8:\\n                System.out.println(\"pon\");\\n                break;\\n            case 3:\\n                System.out.println(\"bon\");\\n                break;\\n\\n        }\\n    }\\n}\\n", "target": "178", "substitutes": {"reader": ["per", "file", "arser", " Reader", "io", "client", "handler", "builder", "parser", "er", "ner", "result", "loader", "worker", "finder", "r", "driver", "b", "writer", "in", "input", "rx", "inner", "keeper", "rer", "bird", "iter", "her", "read", "l", "director", "stream", "editor", "out", "rr", "h", "oder", "Reader", "ler", "feed", "buffer", "f", "server", "i"], "N": ["O", "K", "E", "I", "n", "Ns", "ND", "C", "T", "NT", "SN", "G", "W", "Q", "R", "D", "H", "Y", "Z", "Num", "L", "M", "X", "S", "P", "F", "SIZE", "V", "NS", "NL", "MN", "Number", " n"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.nio.charset.StandardCharsets;\\nimport java.util.ArrayList;\\nimport java.util.List;\\n\\npublic class Main {\\n\tpublic static void main (String[] args) throws IOException{\\n\t    InputStreamReader reader = new InputStreamReader(System.in, StandardCharsets.UTF_8);\\n\t    BufferedReader in = new BufferedReader(reader);\\n\t    String[] str1 = in.readLine().split(\" \");\\n\t    int num1 = Integer.parseInt(str1[0]);\\n\t    int num2 = Integer.parseInt(str1[1]);\\n\\n\t    if(num2==0) {\\n\t\t\tSystem.out.println(num1);\\n\t    }else {\\n\t\t    String[] str2 =in.readLine().split(\" \");\\n\t\t    List<Integer> arrays = new ArrayList<Integer>();\\n\t\t    for(int i = 0; i<num2; i++) {\\n\t\t    \tarrays.add(Integer.parseInt(str2[i]));\\n\t\t    }\\n\t\t\tif(!arrays.contains(num1)) {\\n\t\t\t\tSystem.out.println(num1);\\n\t\t\t}else {\\n\t\t\t\tfor(int i=1; i<num2+1; i++) {\\n\t\t\t\t\tif(num1>0) {\\n\t\t\t\t\t}\\n\t\t\t\t\tif(!arrays.contains(num1-i)) {\\n\t\t\t\t\t\tSystem.out.println(num1-i);\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}else if(!arrays.contains(num1+i)) {\\n\t\t\t\t\t\tSystem.out.println(num1+i);\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t    }\\n\t}\\n}", "target": "228", "substitutes": {"reader": ["per", "file", "io", "client", "handler", "parser", "er", "ner", "loader", "worker", "rar", "r", "driver", "resource", "reading", "writer", "manager", "input", "inner", "rx", "bird", "iter", "read", "stream", "e", "editor", "out", "rr", "h", "Reader", "ler", "feed", "buffer", "connection", "f", "server", "ino", "IN"], "in": ["per", "exec", "din", "file", "is", "ios", "re", "io", "err", "In", "bin", "parser", "raw", "line", "er", "ic", "s", "cli", "socket", "log", "loader", "worker", "r", "driver", "this", "resource", "ini", "thin", "ins", "inside", "reading", "writer", "readable", "input", "inner", "image", "data", "read", "l", "c", "stream", "out", "source", "id", "Reader", "inc", "ssl", "str", "gin", "again", "buffer", "ex", "connection", "f", "as", "info", "temp", "IN", "inn"], "str1": ["STR8", "string8", "str0", "STR1", "Str8", "Str0", "strOne", "string2", "stringOne", "dr3", "str8", " strOne", " str8", "str3", "dr1", "STRFirst", "Str2", "StrOne", "string1", "StrFirst", "dr2", " strFirst", "Str1", " str0", "dr0", "Str3", "strFirst", " str3", "STR2"], "num1": ["noteCard", "num4", "dim11", "sum1", "numpart", "index1", "num6", "nam1", "con61", "numOnce", "Num2", "sum4", "miss61", "miss1", "note61", "note1", "nam11", "namone", "nOnce", "um1", "dimOne", "index2", "number6", " numOne", "nOne", "numOne", "NumOne", "indexone", "Numb", "sum0", "numCard", "rubOne", "namU", " numb", "num61", " numU", "nam0", "num0", "sum6", "number4", "sum2", "n2", "n1", "num11", "sumU", "dimOnce", "hom1", "dim2", "rub0", "misspart", "number2", "conpart", "namOne", "conCard", "con1", "rubOnce", "dim1", "um0", "numone", "um2", " numone", "numU", "number1", "um6", "dim0", "numberOne", "rub1", "homOne", "numberone", "n0", "sumone", "notepart", "numberb", "numb", "index4", "number0", "Num1", "hom0", "missCard", "hom11"], "num2": ["intTwo", "number1", "homTwo", "numii", "sumpage", "number02", "sum10", "sumii", "sum1", "hom1", "hom02", "int2", "intpage", " numTwo", "numTwo", " numii", "num10", "number2", " num10", " num62", "numpage", "num62", "int1", "umTwo", "um02", "intii", "number10", "hom2", "sum2", " numpage", "um2", " num02", "int02", "um1", "hom62", "int62", "num02", "sum02"], "str2": ["dr182", "dr4", "dict4", "fr1", "str0", "dratter", "Str0", " str4", "str4", "dict2", " str182", "str02", "dict182", "dictatter", "fr0", "Str02", "stratter", "Str2", "str182", "dr2", "Str1", " str0", " stratter", "fr2", " str02", "fr02"], "arrays": ["arrayrays", "brays", "arrums", "collars", "errars", "brons", "archays", "arrances", "parums", "errays", "arrayances", "errables", "latrays", "arrrays", "appays", "arrayubes", "brayers", "archrays", "arases", " arrrays", "collases", "parubes", "collrays", "arays", "latays", "arayers", "arrayums", "arrayons", " arrubes", "comprays", "brances", "latars", "arrars", "arrases", "archars", "compars", "brrays", "arrons", "arrayers", "errrays", "arrables", "arons", "appars", "arrubes", "brars", "collays", "arances", "archases", " arrums", "parrays", "compays", "arars", "parays", "arrayays", "appables", "compables", "latayers", "apprays"], "i": ["xi", "gi", "a", "I", "ei", "io", "si", "ie", "di", "n", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "mu", "b", "ai", "phi", "ji", "multi", "li", "ti", "ci", "ali", "zi", "ri", "qi", "u", "bi", "c", "l", "e", "iu", "it", "eni", "mi", "pi", "yi", "x", "fi", "id", "ip", "uri", "d", "y", "v", "slice", "api", "ix", "key", "f", "ui", "o", "info", "g"]}}
{"code": "import java.util.*;\\nimport java.util.Arrays;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String a = sc.next();\\n        String x= \"ABC\";\\n        String y = \"ARC\";\\n        if(a.equals(x)){\\n            System.out.println(\"ARC\");\\n        }\\n        else{\\n            System.out.println(\"ABC\");\\n\\n        }\\n\\n    \\n\\n    }\\n   \\n    \\n       \\n    \\n}", "target": "153", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "desc", "cs", "ga", "ca", "s", "ner", "sec", "soc", "acc", "sync", "osc", "cr", "ec", "sq", "lc", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "Sc", "asc", "sch", "scan", "nc", "uc", "sh", "sp", "g", "parser", "SC", "spec"], "a": ["ga", "ca", "string", "name", "p", "aaa", "ac", "alpha", "s", "na", "wa", "A", "sa", "something", "z", "an", "ab", "b", "ai", "aux", "ae", "ba", "l", "c", "e", "xa", "area", "am", "va", "aa", "f", "as", "abc", "array", "i", "asia", "ad"], "x": ["xi", "wx", "code", "string", "name", "ay", "s", "cross", "na", "vy", "z", "yy", "b", "xxxx", "xc", "xy", "rx", "ya", "Y", "ax", "u", "c", "e", "ey", "xa", "yi", "xs", "X", "dx", "xx", "id", "ix", "xxx", "foo", "key", "ex", "xp", "f", "abc", "sy", "i"], "y": ["dy", "p", "s", "m", "vy", "j", "t", " ya", "z", "yl", "yy", "xy", "ya", "Y", "ys", "py", "ey", "e", "type", "my", "yi", "ady", "xxx", "fy", "sy", "o", "cy", "i"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.Random;\\nimport java.util.StringTokenizer;\\n\\n/*\\n1\\n4\\n0011\\n */\\npublic class Main{\\n\\n    public static void main(String[] args) {\\n        FastScanner fs=new FastScanner();\\n        int T=fs.nextInt();\\n        long D=fs.nextLong();\\n        int ans=0;\\n//        PrintWriter out=new PrintWriter(System.out);\\n        for (int tt=0; tt<T; tt++) {\\n            //solve\\n            long x=fs.nextLong();\\n            long y=fs.nextLong();\\n            long distance=x*x+y*y;\\n            if(distance<=D*D){\\n                ans++;\\n            }\\n        }\\n        System.out.println(ans);\\n\\n\\n    }\\n\\n    static final Random random=new Random();\\n\\n    static void ruffleSort(int[] a) {\\n        int n=a.length;//shuffle, then sort\\n        for (int i=0; i<n; i++) {\\n            int oi=random.nextInt(n), temp=a[oi];\\n            a[oi]=a[i]; a[i]=temp;\\n        }\\n        Arrays.sort(a);\\n    }\\n\\n    static class FastScanner {\\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st=new StringTokenizer(\"\");\\n        String next() {\\n            while (!st.hasMoreTokens())\\n                try {\\n                    st=new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n        int[] nextArray(int n) {\\n            int[] a=new int[n];\\n            for (int i=0; i<n; i++) a[i]=nextInt();\\n            return a;\\n        }\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n    }\\n\\n\\n}", "target": "42", "substitutes": {"fs": ["qs", "fc", "files", "fa", "cs", "sf", "flows", "fm", "fp", "fast", " FS", "FH", "arf", "fx", "gets", "utils", "ips", "ls", "fe", "cf", "df", "wards", "ws", "ss", "ils", "raf", "fts", "Fs", "FS", "fn", "fb", "ves", "PF", "af", "linux", "opens", "bis", "F", "fits", "fps", "feed", "bf", "f", "fd", "frames", "rows"], "T": ["O", "U", "E", " M", "I", "C", "t", "N", "TS", "Q", "R", "Y", "Z", "B", "L", "M", " P", " t", " N", "X", "TT", "S", "P", "F", "V", " F"], "D": ["O", "E", "C", "DE", "DM", "Q", "R", " d", "DC", "Z", "DI", "DD", "M", "X", "Ds", "DL", "S", "d", "P", "DS", "DP", "F", "V", "DR", "DA", "Do", "DF", "DT"], "ans": ["O", " M", " I", "s", "All", "A", " S", "t", " c", " C", "N", "TS", " R", " s", " scan", "Val", "M", " t", " P", " stats", " N", " A", "S", "ID", " offsets", " scans"]}}
{"code": "import java.io.*;\\n  \\nclass Main{\\n\tpublic static void main(String[] args) throws IOException{\\n\\n\t\tint x,\\n\t\tmax=-1000000,\\n\t\tmin=1000000,\\n\t\ttemp;\\n\t\tlong sum=0;\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tx = Integer.parseInt(br.readLine());\\n\t\tString[] str = br.readLine().split(\" \");\\n\\n\t\tfor(int i = 0; i < x; i ++){\\n\t\t\ttemp = Integer.parseInt(str[i]);\\n\t\t\tif(temp>max){\\n\t\t\t\tmax = temp;\\n\t\t\t}\\n\t\t\tif(temp<min){\\n\t\t\t\tmin = temp;\\n\t\t\t}\\n\t\tsum = sum + temp;\\n\t\t}\\n\t\tSystem.out.println(min + \" \" + max + \" \" +sum);\\n  \t}\\n}", "target": "21", "substitutes": {"x": ["xi", "wx", "number", "w", "pos", "n", "code", "p", "xt", "m", "width", "wa", "index", "t", "z", "in", "xc", "length", "rx", "xy", "size", "lex", "ax", "u", "num", "c", "mx", "e", "h", "xs", "X", "tx", "dx", "xx", "id", "d", "y", "ix", "v", "xxx", "ex", "sex", "f", "time"], "max": ["comb", "except", "parent", "height", "ca", "code", "base", "step", "name", "cycle", "MAX", "wrap", "first", "index", "default", "cent", "wh", "with", "est", "Max", "conf", "in", "end", "size", "total", "med", "ax", "range", "cl", "cache", "top", "c", "ad", "can", "last", "limit", "dev", "right", "mod", "orig", "current", "clean", "ex", "act", "plus", "cu", "az", "from", "auto", "patch", "view", "start", "k"], "min": ["MIN", "span", "parent", "pos", "n", "version", "name", "p", "sort", "just", "diff", "m", "low", "part", "wa", "index", "mini", "skip", "none", "thin", "partial", "in", "lower", "mean", "size", "small", "med", "sign", "range", "miss", "sin", "pri", "Min", "area", "limit", "scale", "sun", "mod", "Mini", "pre", "val", "key", "vol", "act", "dim", "mins", "start", "mid"], "temp": ["get", "cur", "err", "pt", "delay", "width", "dest", "index", "txt", "mini", "partial", "emp", "cel", "stable", "total", "full", "it", "tmp", "term", "pi", "id", "pre", "thread", "json", "time", "zip", "iter", "w", "request", "unit", "wait", "minus", "valid", "var", "lc", "length", "count", "cache", "extra", "out", "atom", "dev", "lat", "draw", "test", "weight", "output", "alpha", "tem", "fake", "model", "input", "now", "size", "num", "init", "type", "needed", "inc", "api", "orig", "current", "clean", "Temp", "flat", "parent", "diff", "tc", "t", "prefix", "level", "ci", "py", "single", "source", "seed", "key"], "sum": ["mem", "parent", "weight", "fill", "um", "si", "sat", "unit", "diff", "alpha", "average", "sort", "sol", "part", "index", "sa", " summ", "Sum", "skip", "cache", "mini", "empty", "comment", "count", "mean", "cum", "size", "total", "miss", "sign", "sam", "sin", "use", "frac", "se", "ass", "num", "su", "med", "sun", "scale", "mod", "offset", "spread", "seed", "clean", "vol", "sim", "div", "fat", "stat", "cost", "start", "gram", "cal"], "br": ["res", "io", "err", "bb", "ref", "tr", "sr", "er", "buf", "yr", "ner", "result", "BR", "handle", "fin", "r", "browser", "cr", "abs", "arr", "b", "dr", "bar", "mr", "her", "fr", "stream", "bs", "out", "ber", "bridge", "bro", "ler", "rt", "bh", "hr", "bf", "sp", "reader", "cb", "iter", "bl", "rb"], "str": ["spr", "exec", "list", "err", "char", "string", "name", "tr", "sr", "line", "unit", "ner", "r", "pass", "stri", "st", "arr", "sl", "dr", "input", "dict", "data", "Str", "fr", "dec", "out", "text", "pr", "next", "style", "div", "STR", "iter", "strike", "strings"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "ii", "hi", "index", "j", "t", "z", "ini", "ai", "in", "inner", "li", "ci", "ti", "iter", "zi", "l", "qi", "u", "bi", "c", "e", "init", "it", "mi", "pi", "id", "ip", "y", "v", "ix", "slice", "f", "ui", "info"]}}
{"code": "import java.io.BufferedWriter;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStreamWriter;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\\n\\n    public static void main(String[] args) {\\n       Scanner sc = new Scanner(System.in);\\n      int test = sc.nextInt();\\n        HashMap<String,Integer> hm = new HashMap<>();\\n        int max =0; int count=0;\\n      for(int ii=0; ii<test; ii++) {\\n          String s = sc.next();\\n          if (hm.containsKey(s)) {\\n              Integer x = hm.get(s);\\n              x++;\\n              hm.put(s, x);\\n              if (x == max)\\n                  count++;\\n              if (x > max)\\n                  max = x;\\n          } else {\\n              hm.put(s, 1);\\n              if (1 == max)\\n                  count++;\\n              if (1 > max)\\n                  max = 1;\\n          }\\n      }\\n    List<String> al = new ArrayList<>();\\n      for(Map.Entry<String,Integer> map : hm.entrySet()){\\n          int y = map.getValue();\\n          if(y == max)\\n            al.add(map.getKey());\\n      }\\n      Collections.sort(al);\\n      for(String xx : al)\\n          System.out.println(xx);\\n\\n    }\\n}", "target": "235", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ser", "cer", "screen", "sr", "cc", "ner", "sec", "system", "cr", "sq", "osc", "ec", "lc", "st", "bc", "sci", "cle", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "test": ["fix", "trial", "load", "train", "live", "code", "diff", "query", "index", "debug", "valid", "est", "show", "tests", "repeat", "length", "Test", "match", "use", "pack", "min", "type", "master", "testing", "scale", "seed", "example", "server", "temp", "stage", "start", "check"], "hm": ["uh", "ohm", "rm", "hs", "ich", "ht", "fm", "Hmm", "him", "umi", "m", "bm", "harm", "rpm", "helm", "gm", "km", "hy", "ham", "utm", "dq", "adh", "rah", "amm", "dm", "mmm", "imm", "dh", "hom", "zh", "mph", "hp", "h", "rh", "MH", "sm", "hn", "tm", "hz", "oh", "rooms", "bh", "hl", "hr", "fam", "drm", "HM", "wm", "hh", "hw", "han", "gh", "hd", "ym", "mm", "phy", "htm"], "max": ["rank", "step", "first", "index", "wh", "with", "sync", "always", "rand", "total", "min", "last", "id", "scale", "cu", "call", "start", "co", "huge", "w", "base", "name", "MAX", "work", "error", "cache", "ax", "force", "value", "code", "cycle", "n", "Max", "conf", "only", "now", "size", "range", "c", "limit", "process", "X", "next", "self", "depth", "mod", "orig", "active", "wrap", "list", "random", "parent", "part", "default", "show", "end", "no", "sum", "right", "rest", "patch", "auto", "temp", "parse"], "count": ["list", "number", "load", "force", "parent", "w", "n", "code", "p", "ac", "index", "counter", "z", "sync", "work", "one", "show", "b", "coll", "length", "more", "_", "error", "size", "all", "q", "child", "c", "sum", "id", "depth", "cat", "call", "allow", "Count", "clean", "add", "f", "maybe", "array", "i", "start", "check"], "ii": ["xi", "i", "ee", "II", "si", "n", "code", "di", "ie", "hi", "index", "j", "chi", "iii", "ni", "z", "mini", "ini", "ind", "ai", "image", "inf", "iq", "sci", "li", "ci", "ti", "nn", "min", " i", "q", "zi", "qi", "py", "pi", "out", "fi", "id", "v", "ix", "ice", "vi", "ui", "info", "zip", "iter"], "s": ["qs", "is", "ks", "ges", "si", "n", "string", "rs", "aws", "p", "ops", "name", "m", "gs", "os", "r", "sets", "sing", "sync", "shared", "sl", "js", "abs", "site", "b", "ls", "ds", "ins", "in", "lines", "ss", "ws", "session", "its", "ns", "l", "u", "c", "ches", "ses", "ves", "e", "xs", "single", "words", "id", "S", "d", "ps", "str", "ssl", "v", "es", "f", "services", "as", "o", "i", "strings", "spec"], "x": ["xi", "wx", "number", "px", "w", "ww", "n", "value", "p", "m", "exp", "width", "cross", "index", "na", "php", "z", "one", "work", "xxxx", "XX", "xy", "length", "rx", "xc", "size", "lex", "pe", "ax", "full", "l", "xxxxxxxx", "u", "mx", "c", "e", "python", "xa", "h", "xs", "X", "xes", "tx", "dx", "id", "yx", "ix", "xxx", "v", "check", "key", "ex", "act", "xp", "f", "sex", "i", "xml"], "al": ["hal", "list", "gal", "ap", "mal", "aval", "il", "ales", "ar", "au", "pal", "ala", "alis", "arr", "sl", "isal", "als", "ali", "all", "bel", "ass", "el", "l", "lp", "af", "chal", "alist", "att", "sal", "ag", "align", "la", "alls", "AL", "ell", "ol", "ale", "fal", "Al", "bal", "dal", "wal", "ail", "cal"], "map": ["per", "list", "comb", "ap", "table", "maps", "address", "code", "mer", "set", "result", "m", "batch", "part", "app", "mate", "le", "pair", "copy", "one", "entry", "ge", "hash", "MAP", "dict", "match", "cache", "data", "pack", "use", "lock", "apper", "complete", "type", "bridge", "master", "module", "open", "block", "down", "slice", "key", "change", "up", "cap", "record", "where", "pad", "card"], "y": ["err", "ny", "n", "dy", "p", "ay", "yr", "vy", "gy", "oy", "z", "hy", "yy", "b", "ies", "xy", "ya", "year", "ky", "Y", "yd", "yo", "py", "c", "ey", "type", "yi", "zy", "ty", "d", "ry", "isy", "ady", "key", "sky", "sy", "cy", "i"], "xx": ["xi", "wx", "gen", "ww", "code", " cc", "zzy", "inx", "fx", "cross", "yy", "fe", "xxxx", "XX", " XX", " code", "ck", "xy", "rx", "ss", "nn", "XXX", "ax", "zz", "xxxxxxxx", " cat", "xs", "X", "cat", "yx", "ll", "str", "pp", "val", "xxx", "foo", "ex", "pattern"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int x = sc.nextInt();\\n        \\n        //\u4e0e\u3048\u3089\u308c\u305f\u6570\u304c\u7d20\u6570\u304b\u7d20\u6570\u3067\u306a\u3044\u304b\u3092\u898b\u5206\u3051\u308b\u306b\u306f\uff0c2\u304b\u3089N\u22121\u307e\u3067\u306e\u6574\u6570\u3067\u5272\u308a\u5207\u308c\u308b\u304b\u3069\u3046\u304b\\n        for (int n=x; ; n++) {\\n            if (judgeNumber(n)) {\\n                System.out.println(n);\\n                break;\\n            }\\n        }\\n    }\\n    \\n    private static boolean judgeNumber(int n) {\\n        for (int i=2; i<=n-1; i++) {\\n            if (n%i == 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}", "target": "183", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "ctl", "cs", "ser", "sf", "set", "cc", "sec", "soc", "app", "acc", "sync", "osc", "sl", "st", "cr", "ec", "bc", "sci", "ss", "proc", "ci", "cl", "scope", "se", "c", "src", "isc", "Sc", "sche", "inc", " SC", "dc", "scan", "nc", "uc", "sp", "sb", "SC"], "x": ["xi", "w", "pos", "xe", "name", "ctx", "event", "axis", "index", "j", "z", "xc", "rx", "ax", " i", "ick", "xs", "tx", "X", "dx", "xx", " index", "y", "ix", "xxx", "ex", "xp", "Index"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    \\n    String s = sc.next();\\n    \\n    char[] c = s.toCharArray();\\n    \\n    System.out.println(\"2018/01/\" + c[8] + c[9]);\\n  }\\n}\\n", "target": "18", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "desc", "cs", "cur", "si", "sf", "cc", "ner", "sec", "acc", "enc", "r", "sync", "osc", "sl", "cr", "ec", "lc", "ocr", "bc", "sci", "ss", "cus", "cl", "scope", "se", "l", "src", "Sc", "asc", " SC", "scan", "nc", "uc", "sh", "sp", "sb", "g", "SC"], "s": ["a", "cs", "si", "n", "string", "sf", "p", "os", "r", "sv", "sl", "js", "ls", "b", "ds", "ins", "in", "ws", "ss", "ns", "l", "u", "ses", "e", "bs", "h", "su", "S", "ps", "str", "v", "es", "f", "o", "sb", "i", "strings"], "c": ["a", "pc", "esc", "rc", "ch", "cs", "ca", "n", "string", "code", "char", "p", "C", "cc", "ac", "m", "enc", "r", "t", "cr", "ec", "b", "lc", "cf", "xc", "ci", "l", "u", "e", "ce", "h", "x", "ct", "content", "d", "v", "dc", "mc", "nc", "f", "cu", "anc", "array", "g", "cy", "i"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\npublic static void main(String[]srgs) {\\n\tScanner scan=new Scanner(System.in);\\n\tint a=scan.nextInt();\\n\tint b=scan.nextInt();\\n\tint ans=0;\\n\tfor(int i=a;i<=b;i++) {\\n\t\tint x=i;\\n\t\tint c=x%10;\\n\t\tx/=10;\\n\t\tint d=x%10;\\n\t\tx/=10;\\n\t\tx/=10;\\n\t\tint f=x%10;\\n\t\tx/=10;\\n\t\tint g=x%10;\\n\t\tif(c==g&&d==f) {\\n\t\t\tans++;\\n\t\t}\\n\t}\\n\tSystem.out.println(ans);\\n\tscan.close();\\n}\\n}", "target": "104", "substitutes": {"srgs": ["srga", "vrges", " srges", "vrgin", " srga", "srges", "yrges", " srgin", "srgin", "yrgin", "yrga", "vrga", "yrgs", "vrgs"], "scan": ["chan", "pan", "span", "exec", "run", "is", "io", "pin", "reader", "gen", "search", "n", "ser", "see", "connect", "query", "ner", "sc", "na", "r", "skip", "system", "sync", "an", "report", "ann", "fan", "in", "ban", "match", "nn", "all", "sign", "win", "san", "read", "bug", "se", "en", "plan", "can", "out", "filter", "source", "cat", "open", "slice", "clean", "server", "Scan", "walk", "watch", "ignore", "parser", "parse"], "a": ["fa", "ga", "ca", "n", "p", "oa", "s", "ac", "alpha", "m", "index", "A", "sa", "ea", "an", "ab", "ai", "ae", "ba", "da", "e", "am", "area", "h", "la", "y", "va", "aa", "as", "ama"], "b": ["n", "base", "bb", "p", "s", "lb", "nb", "j", "r", "abb", "z", "ab", "ib", "length", "end", "ob", "boot", "B", "l", "e", "fb", "bs", "h", "body", "y", "db", "v", "emb", "sb", "be", "cb", "k", "rb"], "ans": ["span", "vals", "annis", "ks", "ants", "cons", "cs", "lan", "errors", "s", "nos", "vers", "amps", "offs", "flags", "na", "ents", "ANS", "os", "ens", "outs", "an", "aces", "ann", "ls", "ars", "sk", "ds", "ins", "vs", "annels", "atan", "cas", "nn", "ians", "ns", "ends", "ches", "ats", "eps", "aus", "ids", "es", "ions", "aned", "ons", "anc", "as", "asts", " scans", "ays", "runs", "ras", "rows"], "i": ["gi", "xi", "I", "io", "si", "ie", "di", "p", "m", "ii", "hi", "index", "j", "t", "ni", "z", "ini", "ai", "in", "multi", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "inter", "e", "iu", "mi", "pi", "fi", "id", "ip", "y", "v", "ix", "o", "ui", "info", "start", "k"], "x": ["xi", "wx", "px", "w", "n", "code", "p", "event", "s", "m", "width", "cross", "index", "j", "na", "wa", "t", "z", "one", "work", "max", "rex", "image", "in", "xc", "rx", "data", "min", "ax", "q", "full", "l", "u", "e", "xa", "my", "h", "xs", "X", "tx", "xes", "ph", "xx", "id", "any", "ux", "y", "v", "ix", "back", "ex", "plus", "time", "times", "k"], "c": ["fc", "w", "ca", "n", "p", "C", "s", "m", "cn", "sc", "cd", "r", "z", "ec", "cf", "ci", "q", "l", "u", "e", "h", "y", "v", "dc", "cu", "o", "k"], "d": ["dd", "w", "n", "dy", "p", "s", "m", "cd", "j", "z", "dt", "ld", "dr", "ds", "df", "D", "q", "da", "l", "u", "e", "h", "dn", "dx", "id", "y", "v", "dc", "fd", "k", "gd"], "f": ["fc", "w", "n", "sf", "p", "s", "m", "j", "t", "z", "fe", "cf", "df", "fg", "q", "l", "u", "e", "h", "fi", "F", "y", "v", "o", "k"], "g": ["gi", "gar", "gp", "ig", "w", "ga", "n", "di", "gb", "p", "group", "ic", "m", "gs", "j", "gm", "G", "ge", "go", "sg", "fg", "q", "l", "u", "e", "h", "gc", "pg", "ng", "eg", "cfg", "v", "gu", "gg", "rg", "gh", "gn", "gd"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in); \\n\\n\t\tint n = sc.nextInt();\\n\\n\t\tcall(n);\\n\\n\t\tsc.close();\\n\t}\\n\\n\tprivate static void call(int n) {\\n\t\tfor (int i = 1; i <= n; i++) {\\n\t\t\tint x = i;\\n\t\t\tif (x % 3 == 0) {\\n\t\t\t\tSystem.out.print(\" \" + i);\\n\t\t\t} else {\\n\t\t\t\twhile (x != 0) {\\n\t\t\t\t\tif (x % 10 == 3) {\\n\t\t\t\t\t\tSystem.out.print(\" \" + i);\\n\t\t\t\t\t\tx = 0;\\n\t\t\t\t\t}\\n\t\t\t\t\tx /= 10;\\n\t\t\t\t}\t\t\t\t\t\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(\"\");\\n\t}\\n\\n}", "target": "154", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ca", "sr", "cc", "soc", "na", "system", "osc", "cr", "sq", "ec", "lc", "bc", "sci", "ss", "ci", "cm", "cl", "scope", "se", "syn", "c", "src", "Sc", "text", "sem", "cv", "str", " SC", "sch", "console", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "sb", "SC"], "n": ["a", "network", "number", "nr", "w", "pos", "p", "s", "nb", "m", "on", "ne", "r", "j", "t", "z", "b", "N", "in", "count", "nn", "size", "ns", "l", "u", "en", "c", "num", "e", "init", "fn", "call", "d", "y", "v", "nc", "f", "o", "net", "g", "k"], "i": ["xi", "gi", "I", "is", "io", "si", "ie", "di", "p", "ii", "hi", "part", "index", "j", "t", "ni", "z", "ini", "mu", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "c", "e", "mi", "pi", "yi", "fi", "id", "ip", "uri", "y", "v", "ix", "f", "integer", "o", "ui", "info", "start"], "x": ["xi", "wx", "number", "px", "w", "xb", "xe", "ww", "search", "p", "xt", "m", "index", "fx", "cross", "php", "t", "z", "work", "max", "rex", "xc", "xy", "rx", "lex", "ax", "q", "l", "u", "c", "e", "h", "xs", "X", "tx", "dx", "xx", "id", "d", "y", "ix", "v", "xxx", "ex", "sex", "xp", "f"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    static long gcd (long a, long b) {return b>0?gcd(b,a%b):a;}\\n    static long lcm (long a, long b) {return a*b/gcd(a,b);}\\n\\n    \\n    public static void main(String args[]) {\\n\\n        Scanner sc = new Scanner(System.in);\\n        long A = sc.nextLong()-1;\\n        long B = sc.nextLong();\\n        long C = sc.nextLong();\\n        long D = sc.nextLong();\\n        \\n        long cc = (B/C)-(A/C);\\n        long dc = (B/D)-(A/D);\\n        long lcm = lcm(C, D);\\n        \\n        long ccd = (B/lcm)-(A/lcm);\\n        System.out.println(B-A-cc-dc+ccd);\\n    }\\n}", "target": "9", "substitutes": {"a": ["i", "fa", "ga", "ca", "n", "p", "aaa", "alpha", "ac", "ia", "na", "aaaa", "sa", "ea", "ab", "an", "ai", "count", "ae", "ba", "pa", "da", "aj", "c", "e", "af", "am", "area", "x", "d", "va", "api", "aa", "f", "as", "au", "ad"], "b": ["w", "n", "base", "bb", " eb", "p", "lb", "nb", "m", "eb", "batch", "r", "wb", "abb", "z", "ab", "ib", "an", "bar", "pb", "count", "bc", "ae", "end", "ba", "ob", "l", "u", "bi", "c", "mb", "e", "fb", "bs", "x", "body", "d", "y", "db", "v", "bf", "aa", "f", "as", "BB", "sb", "be", "g", "cb", "i", "ad", "rb"], "sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "cs", "ser", "cor", "si", "cer", "sf", "screen", "sr", "ctx", "cam", "cli", "ner", "soc", "enc", "sync", "cr", "osc", "sq", "sv", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "l", "c", "Sc", "can", "asc", "sche", "cv", " SC", "console", "scan", " Sc", "uc", "anc", "sp", "sb", "g", "parse", "SC"], "A": ["Alpha", "This", "U", "API", "E", "I", "K", "AC", "As", "Na", "Ab", "AU", "Any", "AB", "Ca", "T", "ac", "AM", "Array", "G", "AA", "LA", "N", "W", "IA", "R", "BC", "The", "H", "Y", "DC", "L", "c", "Old", "M", "Bu", "Java", "Az", "AD", "Area", "Ar", "Ma", "AR", "BA", "S", "P", "F", "AH", "mA", "App", "BB", "AP", "Am", "An", "CA"], "B": ["O", "U", "E", "I", "Ab", "AB", "T", "BF", "BD", "SB", "TB", "MB", "G", "PB", "W", "N", "QB", "R", "BC", "GB", "Big", "H", "CB", "Y", "Beta", "DB", "L", "M", "Bu", "X", "LB", "Bs", "BA", "S", "P", "F", "V", "EB", "BB", "BI", "WB"], "C": ["O", "Cs", "U", "E", "I", "CI", "K", "Es", "AC", "CC", "CS", "CR", "T", "Ca", "CL", "EC", "G", "N", "W", "R", "BC", "Co", "H", "CD", "Y", "CV", "DC", "L", "Cu", "c", "CE", "Sc", "M", "S", "P", "F", "V", "VC", "Count", "Code", "Ch", "SC", "CM", "CA"], "D": ["O", "Def", "U", "E", "I", "T", "Dou", "Di", "G", "W", "N", "DM", "Q", "DX", "R", "Dr", "H", "Y", "CD", "DC", "DB", "Z", "L", "DI", "CE", "DD", "M", "X", "Ds", "S", "d", "F", "P", "DS", "MD", "DP", "V", "DK", "DA", "Do", "DF"], "cc": ["pc", "fc", "rc", "cca", "AC", "cs", "CC", "ca", "ac", "PC", "acc", "cd", "cr", "ec", "lc", "LC", "cf", "ck", "bc", "BC", "ci", "CD", "cm", "DC", "da", "c", "inc", "CCC", "mc", "nc", "uc", "cp", "cu", "co"], "dc": ["dd", "rc", "cdn", "cca", "cs", "CC", "ca", "jc", "ac", "dB", " DC", "cd", "cr", "ec", "lc", "cf", "ds", "df", "bc", "xc", "ci", "cm", "DC", "da", "c", "dp", "ce", "inc", "d", "mc", "nc", "uc", "fd", "dim", "md", "sd", "cb"], "lcm": ["licm", "llcp", "Lkm", "fcd", "bcm", "lkm", "Lcm", "lmm", "lpm", "lccd", "ccr", " lcf", "fcm", " lcd", "bcp", "Lcd", "lccm", "llcm", "lcf", "Lpm", "lcmm", "Lmm", "lctr", " lctr", "llmm", "llkm", "llcf", "limm", "lictr", "cpm", "lcd", "lcr", "llmod", " lmm", " lmod", "ccm", "limod", "llctr", "bkm", "fcf", "llcd", " lcr", " lkm", "lcpm", "ckm", "bmm", " lcp", "lmod", "fmm", " lpm", "Lcr", "lcp"], "ccd": ["ccc", " ccl", "cfc", "BCl", "cmd", "cfn", "cmm", "cmc", "BCc", "ctm", " ccc", "ctc", " ccn", "ctd", "ccl", "CCdc", "CCm", "CCc", "ccdc", "ccn", "cfl", "cfd", "CCd", "ccm", "cmdc", "BCn", "BCd", "ctdc"]}}
{"code": "\\n\\nimport java.text.ParseException;\\nimport java.text.SimpleDateFormat;\\nimport java.time.LocalDate;\\nimport java.time.format.DateTimeFormatter;\\nimport java.util.Date;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws ParseException {\\n        Scanner sc = new Scanner(System.in);\\n\\n        String s = sc.next();\\n\\n\\n\\n//        if (date.equals(LocalDate.of(2019, 4, 30))) {\\n//            System.out.println(\"Heisei\");\\n//        } else if (date.isBefore(LocalDate.of(2019, 4, 30))) {\\n//            System.out.println(\"Heisei\");\\n//        } else {\\n//            System.out.println(\"TBD\");\\n//        }\\n\\n        int y = Integer.parseInt(s.substring(0, 4));\\n        int m = Integer.parseInt(s.substring(5, 7));\\n        int d = Integer.parseInt(s.substring(8, 10));\\n\\n        if (y == 2019 && m == 4 && d == 30) {\\n            System.out.println(\"Heisei\");\\n            return;\\n        }\\n\\n        if (y > 2019) {\\n            System.out.println(\"TBD\");\\n            return;\\n        }\\n        if (y == 2019 && m > 4) {\\n            System.out.println(\"TBD\");\\n            return;\\n        }\\n        System.out.println(\"Heisei\");\\n\\n    }\\n}\\n", "target": "163", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cs", "sf", "cc", "ner", "sec", "enc", "sa", "sync", "system", "sl", "cr", "osc", "ec", "bc", "sci", "ss", "proc", "ci", "cl", "scope", "se", "c", "src", "Sc", "text", "scan", "nc", " Sc", "uc", "sh", "sp", "sd", "parser", "SC", "spec"], "s": ["n", "string", "p", "m", "r", "b", "ls", "lines", " lines", "ns", "l", " strings", "u", "e", "S", "d", "ps", "v", "es", " logs", " inputs", "f", "sb", "g", "i", "strings", " tokens"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\t\\n\t\tint m =scanner.nextInt();\\n\t\tString a = scanner.next();\\n\t\tint n= a.length();\\n\t\t\\n\t\tchar[] c = a.toCharArray();\\n\t\t\\n\t\tfor(int i = 0 ;i<n;i++) {\\n\t\t\tif(i>m-1) {\\n\t\t\t\tif(n>m) {\\n\t\t\t\tSystem.out.println(\"...\");\\n\t\t\t\t}\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tSystem.out.print(c[i]);\\n\t\t}\t\t\\n\t}\\n}", "target": "248", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {\\n            \\n            String s = br.readLine();\\n            String t = br.readLine();\\n            t = t.substring(0, s.length());\\n            \\n            PrintWriter pw = new PrintWriter(System.out);\\n            pw.println((s.equals(t)) ? \"Yes\" : \"No\");\\n            pw.flush();\\n            \\n        }\\n    }\\n}", "target": "137", "substitutes": {"s": ["qs", "w", "cs", "si", "n", "string", "p", "sc", "gs", "os", "sets", "sync", "sv", "sl", "b", "ls", "ds", "ins", "in", "ss", "ws", "letters", "ns", "se", "l", "u", "sys", "ses", "bs", "ts", "su", "xs", "S", "d", "ps", "str", "ssl", "es", "services", "o", "sp", "sb", "strings"], "t": ["test", "token", "the", "w", "at", "n", "pt", "string", "target", "ot", "p", "tr", "T", "m", "txt", "te", "z", "st", "b", "tt", "tty", "l", "u", "c", "e", "type", "out", "ts", "h", "text", "x", "ta", "tm", "d", "str", "y", "v", "tf", "f", "o", "title", "i", "wt"], "pw": ["pW", "PW", " pb", " pp", "cpwh", " pwh", " pws", "pwh", "ppws", "pb", "lpb", "ppwh", "lpW", "cpw", "lpw", " pW", "ppW", "lpp", "Pw", "ppw", "cpws", "pp", "Pwh", "Pp", "Pws", "Pb", "cpW", "pws"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String args[]){\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\\n\t\tint n = scan.nextInt();\\n\t\tint k = scan.nextInt();\\n\t\tlong sum = 0;\\n\t\t\\n\t\tArrayList<Long> h = new ArrayList<Long>();\\n\t\t\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\th.add(scan.nextLong()); \\n\t\t}\\n\t\t\\n\t\tCollections.sort(h,Collections.reverseOrder());\\n\t\t\\n\t\tfor(int i = k; i < n; i++){\\n\t\t\tsum += h.get(i);\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(sum);\\n\t\t\\n\t}\\n}", "target": "230", "substitutes": {"scan": ["chan", "run", "span", "pin", "search", "ser", "non", "er", "connect", "query", "ner", "sc", "serv", "na", "ln", "skip", "system", "sync", "sn", "ann", "an", "fan", "in", "serial", "nn", "use", "sign", "san", "read", "se", "sys", "l", "c", "conn", "plan", "can", "out", "conv", "cat", "look", "v", "clean", "server", "Scan", "watch", "ignore", "ans", "iter", "parse", "con"], "n": ["kn", "w", "p", "s", "nb", "ner", "nt", "m", "nan", "j", "ne", "ln", "t", "z", "b", "N", "in", "nn", "ns", "l", "u", "en", "c", "e", "x", "out", "d", "y", "v", "f", "o", "net"], "k": ["K", "kn", "ks", "w", "get", "p", "mk", "s", "m", "j", "r", "z", "km", "sk", "b", "N", "in", "end", "size", "ik", "q", "l", "u", "c", "e", "dk", "d", "y", "v", "key", "ok", "f", "o", "start"], "sum": ["fill", "weight", "um", "name", "unit", "help", "alpha", "average", "result", "home", "user", "sup", "index", "Sum", "skip", "shared", "sk", "mass", "hash", "count", "mean", "cum", "error", "size", "total", "cache", "miss", "use", "ass", "pack", "u", "num", "su", "dev", "scale", "style", "who", "spread", "vol", "fat", "plus", "hum", "sh", "stat", "fee", "info", "summary", "dot", "cost", "loss", "us"], "h": ["uh", " H", "hist", "hs", "th", "ht", "ch", "um", "p", "history", "header", "headers", "help", "m", "home", "kh", "hm", "hash", "ah", "dict", "H", "ih", "q", "l", "zh", "he", "c", "e", "hp", "rh", "ph", "body", "oh", "eh", "bh", "v", "hr", "ha", "f", "hw", "host", "gh", "sh", "o", "has"], "i": ["gi", "xi", "I", "io", "si", "di", "ie", "p", "oi", "abi", "ii", "hi", "hei", "chi", "j", "index", "ki", "ni", "ini", "mu", "ai", "phi", "ji", "multi", "li", "ci", "ti", "data", "zi", "ri", "qi", "u", "bi", "c", "l", "e", "ori", "iu", "init", "eni", "mi", "pi", "x", "yi", "fi", "id", "ip", "uri", "ix", "slice", "v", "api", "f", "ui", "o", "info", "start"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.*;\\nimport java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(\\n\t\t\tnew InputStreamReader(System.in));\\n\t\ttry {\\n\t\t\tString nandk[] = br.readLine().split(\" \");\\n\t\t\tint n = Integer.parseInt(nandk[0]);\\n\t\t\tint k = Integer.parseInt(nandk[1]);\\n\t\t\tString[] h = br.readLine().split(\" \");\\n\t\t\tint count = 0;\\n\\n\t\t\tfor(int i = 0; i < n; i++) {\\n\t\t\t\tif(Integer.parseInt(h[i]) >= k) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(count);\\n\t\t\tbr.close();\\n\t\t} catch(IOException e) {\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t}\\n}\\n", "target": "145", "substitutes": {"br": ["ctr", "io", "err", "Br", "erb", "bb", "tr", "sr", "er", "buf", "jp", "yr", "ner", "BR", "handle", "r", "browser", "cr", "arr", "ab", "abs", "later", "b", "dr", "gr", "bar", "bc", "mr", "her", "fr", "raf", "HR", "src", "bs", "ber", "bridge", "wr", "bro", "ler", "bh", "str", "ger", "hr", "cro", "bf", "orb", "reader", "cb", "iter", "bl", "rb"], "nandk": ["Nandn", "Nandks", " nandK", "nandn", "nandsn", "nAndks", "NAndke", " nandsks", "nandske", "nandK", "Nandsn", "Nandke", "nAndn", "nwithk", "nANDk", "nAndke", "Nandsks", "Nandsk", "nwithke", "NandsK", "nandsK", " nandsK", "NAndK", " nandq", "nANDks", "nAndK", "NAndks", "nandsks", " nandsq", "NAndk", "nandq", "nandsk", "nwithK", "nandke", "nAndk", "Nandk", "nANDq", "nandks", " nandks", "nANDK", "nandsq", "NandK", "nwithks", " nandsk"], "n": ["network", "number", "w", "p", "nb", "s", "ner", "m", "ne", "j", "r", "ln", "mn", "z", "b", "N", "in", "nn", "no", "ns", "l", "u", "num", "c", "en", "e", "x", "d", "y", "v", "nc", "f", "o", "net"], "k": ["K", "number", "ks", "w", "ak", "p", "s", "m", "make", "j", "r", "z", "sk", "work", "b", "in", "end", "q", "l", "point", "u", "c", "e", "x", "kw", "id", "d", "y", "v", "key", "f", "o"], "h": ["uh", "hs", "ht", "ch", "w", "p", "history", "help", "home", "m", "r", "work", "hm", "b", "hash", "ah", "ih", "H", "q", "u", "c", "he", "e", "hp", "rh", "ph", "id", "body", "bh", "v", "hr", "ha", "f", "sh", "host", "gh", "o", "hd"], "count": ["test", "number", "list", "force", "parent", "ch", "weight", "code", "base", "line", "nt", "index", "counter", "work", "b", "coll", "length", "order", "now", "level", "size", "total", "data", "cache", "no", "child", "carry", "c", "e", "type", "last", "keep", "sum", "id", "allow", "depth", "age", "Count", "len", "current", "key", "add", "f", "info", "second", "found", "start", "check"], "i": ["gi", "xi", "a", "I", "si", "ie", "di", "oi", "abi", "ii", "hi", "chi", "j", "index", "uli", "ini", "mu", "b", "ai", "length", "phi", "ji", "multi", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "l", "e", "init", "it", "pi", "x", "fi", "id", "ip", "uri", "field", "v", "ix", "f", "ui", "o", "info"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.Comparator;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.Iterator;\\nimport java.util.Map.Entry;\\nimport java.util.PriorityQueue;\\nimport java.util.Scanner;\\n\\nclass Main {\\n\\n    static final int MOD = 1000000007;\\n    static final int INF = 1 << 30;\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int M = sc.nextInt();\\n        boolean[] AC = new boolean[N];\\n        int[] WA = new int[N];\\n        int acc = 0;\\n        int wac = 0;\\n        for (int i = 0; i < M; i++) {\\n            int p = sc.nextInt()-1;\\n            boolean ac = sc.next().equals(\"AC\");\\n\\n            if (AC[p])\\n                continue;\\n            if (ac) {\\n                acc++;\\n                wac += WA[p];\\n                AC[p]=true;\\n            } else {\\n                WA[p]++;\\n            }\\n        }\\n        System.out.println(acc + \" \" + wac);\\n    }\\n}\\n", "target": "48", "substitutes": {"MOD": ["MIN", " DEBUG", " PHP", " Max", " Z", "MAX", " EXT", " JD", " GN", " MIN", " Mod", " ARM", " DM", " MS", " CC", " mod", " MEM", "Mod", " DEC", " LOC", " CP", "SIZE", " MA", " CL", " EXP", " MODULE", " LOG", " CR"], "INF": ["InI", "inN", "InN", "inI", " INf", "Inf", " INN", " INI", "InF", "inF", "inf", "INI", "INN", "INf"], "sc": ["pc", "esc", "fc", "rc", "ch", "cur", "cs", "ser", "ca", "sub", "cer", "sf", "com", "cli", "cc", "ner", "tc", "enc", "loc", "sync", "cr", "osc", "ec", "sq", "lc", "class", "cont", "ck", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", "inc", " SC", "dc", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "parse", "SC"], "N": ["O", "K", "E", "I", "NR", "Na", "n", "Ns", "ND", "J", "C", "T", "Len", "NT", "Ne", "NB", "A", "G", "W", "Size", "R", "D", "DC", "NA", "B", "Z", "Num", "L", "NM", "X", "No", "NE", "S", "F", "P", "Node", "V", "CNN", "NL", "MN", "KN", " n"], "M": ["O", "K", "U", "I", "E", "n", "J", "C", "T", "m", "A", "G", "W", "Q", "R", "D", "H", "Y", "MS", "B", "Z", "L", "NM", "LM", "X", "MM", "S", "F", "P", "MD", "V", "MN", "CM", "MC"], "AC": ["ACH", "ACT", "HA", "ACP", "ACK", "CC", "MAC", "FC", "AF", "AN", "AK", "C", "AT", "AM", "PC", "CA", "A", "EC", "AA", "W", "ACE", "CAP", "BC", "AS", "AW", "AG", "Acc", "UC", "X", "AR", "ANG", "P", "ANC", "AV", "AP", "OC", "ASC", "ACC", "SC", "Ac", "ACA", "MC"], "WA": ["WH", "WD", "HA", "MW", "AGE", "WR", "GA", "ACA", "ZA", "WAR", "CA", "wa", "WN", "WE", "PA", "WI", "AA", "AE", "W", "RA", "ACE", "SHA", "WC", "WW", "WM", "AW", "AG", "VW", "NW", "SW", "SA", "TA", "WS", "Wa", "RAW", "VA", "FW", "DA", "WP", "WB", "WT", "FA", "MA"], "acc": ["fac", "ak", "CC", "oc", "ca", "eff", "cc", "alpha", "enc", "auc", "pass", "sup", "qa", "ace", "ai", "rac", "bc", "circ", "cas", "pack", "Acc", "ass", "agg", "account", "charge", "alph", "aw", "c", "asc", "aug", "att", "adj", "sum", "inc", "gain", "dc", "amp", "feed", "shape", "aa", "ack", "uc", "abc", "ACC", "occ", "seq"], "wac": ["WAC", "wanc", "ewanc", "swad", "waf", "swaf", "Wace", "Wacc", "awad", "owanc", "awacc", "awaf", "Wanc", "owac", "wace", "awace", "ewac", " wace", "owacc", "wAC", " waf", "ewace", "ewAC", "wacc", "Wac", "ewacc", "awac", " wad", "swac", "owAC", "wad", "swace", "awAC"], "i": ["a", "gi", "xi", "I", "io", "si", "n", "di", "ie", "m", "ii", "hi", "chi", "j", "t", "ni", "z", "ini", "mu", "ai", "in", "multi", "li", "ci", "ti", "qi", "u", "c", "e", "iu", "it", "mi", "pi", "x", "fi", "id", "ip", "P", "y", "ix", "v", "o", "sp", "ui", "start"], "p": ["a", "pc", "vp", "per", "ap", "parent", "pid", "pos", "op", "n", "code", "po", "s", "fp", "m", "part", "pl", "j", "t", "bp", "port", "pe", "q", "pa", "lp", "point", "u", "l", "c", "e", "tp", "np", "pi", "x", "pr", "wp", "ip", "pg", "P", "pre", "pp", "v", "api", "pu", "cp", "f", "patch", "o", "sp", "k", "jp"], "ac": ["a", "pc", "fac", "acl", "ak", "oc", "ic", "cc", "enc", "sac", "loc", "disc", "acs", "ec", "ace", "rac", "iac", "cache", "all", "aw", "c", "am", "ag", "ct", "inc", "dc", "mac", "ant", "aa", "act", "uc", "anc", "ack", "op", "ad", "Ac"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int N = in.nextInt();\\n\\n        System.out.println(Math.min(N * in.nextInt(), in.nextInt()));\\n    }\\n}", "target": "213", "substitutes": {"in": ["exec", "din", "token", "is", "pin", "err", "In", "gen", "bin", "n", "line", "s", "query", "socket", "user", "log", "r", "pass", "ln", "with", "cin", "ini", "thin", "b", "doc", "ins", "rin", "inf", "inner", "input", "inside", "kin", "lib", "data", "sin", "win", "c", "init", "binary", "conn", "out", "lin", "source", "tin", "id", "inc", "d", "con", "path", "gin", "again", "nin", "login", "isin", "slice", "buffer", "scan", "ex", "connection", "f", "as", "reader", "i", "IN", "inn"], "N": ["O", "K", "I", "NR", "n", "Ns", "Len", "C", "T", "J", "NT", "Ne", "NB", "A", "SN", "NH", "NY", "G", "NN", "Q", "Size", "R", "D", "H", "Y", "NA", "Z", "B", "L", "M", "X", "S", "P", "F", "SIZE", "V", "NS", "Number", " n"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        if(s.equals(\"SUN\")){\\n            System.out.println(7);\\n        }else if(s.equals(\"MON\")){\\n            System.out.println(6);\\n        }else if(s.equals(\"TUE\")){\\n            System.out.println(5);\\n        }else if(s.equals(\"WED\")){\\n            System.out.println(4);\\n        }else if(s.equals(\"THU\")){\\n            System.out.println(3);\\n        }else if(s.equals(\"FRI\")){\\n            System.out.println(2);\\n        }else if(s.equals(\"SAT\")){\\n            System.out.println(1);\\n        }\\n        System.out.println();\\n        sc.close();\\n    }\\n}", "target": "136", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "cor", "cer", "sf", "screen", "cc", "ner", "sec", "cam", "tc", "pl", "sync", "system", "cr", "osc", "ec", "lc", "bc", "sci", "ci", "cl", "scope", "se", "c", "src", "Sc", "out", "sem", "gc", " SC", "dc", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "SC", "con"], "s": ["a", "qs", "is", "obs", "si", "n", "string", "p", "sym", "m", "service", "gs", "os", "r", "t", "south", "sync", "sl", "sing", "site", "js", "ls", "b", "side", "ds", "ins", "sg", "ws", "lines", "ss", "session", "stats", "its", "full", "ns", "l", "sys", "u", "c", "ses", "e", "series", "su", "ts", "states", "S", "d", "ssl", "str", "y", "es", "f", "services", "plus", "o", "times", "sb", "g", "i", "strings", "spec"]}}
{"code": "import java.util.*;\\nimport java.util.stream.*;\\n\\npublic class Main {\\n\tScanner sc;\\n\tint A, B;\\n\t\\n\tpublic Main() {\\n\t\tsc = new Scanner(System.in);\\n\t}\\n\t\\n\tprivate void calc() {\\n\t\tA = sc.nextInt();\\n\t\tB = sc.nextInt();\\n\t\tint add = A + B;\\n\t\tint sub = A - B;\\n\t\tint mul = A * B;\\n\t\t\\n\t\tout(max(add, max(sub, mul)));\\n\t}\\n\t\\n\tprivate int max(int a, int b) {\\n\t\treturn (a>b)?a:b;\\n\t}\\n\t\\n\tprivate void out(Object o) {\\n\t\tSystem.out.println(o);\\n\t\tSystem.out.flush();\\n\t}\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tMain m = new Main();\\n\t\tm.calc();\\n\t}\\n\\n}", "target": "188", "substitutes": {"sc": ["pc", "esc", "rc", "ch", "cur", "desc", "cs", "si", "ctx", "cli", "cc", "ner", "soc", "acc", "loc", "r", "cr", "sq", "config", "ec", "lc", "osc", "cont", "bc", "sci", "ss", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "SC", "gram", "spec"], "A": ["O", "Alpha", "U", "API", "I", "HA", "AC", "As", "Na", "Ab", "AU", "AF", "AB", "Ca", "C", "T", "AM", "ADD", "PA", "LA", "AA", "N", "IA", "D", "H", "Y", "Add", "NA", "L", "MA", "M", "SA", "Az", "X", "AD", "Area", "Ma", "AR", "mA", "BA", "S", "P", "F", "None", "AP", "CA"], "B": ["O", "U", "E", "I", "BS", "Bal", "Ab", "VB", "Bi", "AB", "C", "BF", "T", "BE", "BD", "Ub", "NB", "TB", "SB", "MB", "G", "W", "N", "QB", "Both", "BC", "GB", "D", "UB", "CB", "Y", "H", "Beta", "DB", "Z", "L", "M", "Sub", "IB", "X", "LB", "Bs", "BA", "OB", "P", "F", "V", "BB", "BI", "WB"], "add": ["pos", "append", "address", "s", "ac", "diff", "insert", "index", "ADD", "work", "added", "build", "max", "in", "end", "apply", "Add", "num", "en", "init", "and", "x", "sum", "id", "mod", "inc", "d", "push", "back", "div", "plus", "call", "start", "ad", "pad"], "sub": ["remove", "per", "big", "um", "mult", "s", "diff", "insert", "sup", "pl", "r", "ul", "sing", "fail", "ab", "build", "ai", "in", "ub", "split", "apply", "min", "l", "Sub", "sum", "mod", "inc", "ubs", "shift", "div", "f", "plus", "change", "start", "mid"], "mul": ["mub", "cmUL", " mur", "amuli", "Mub", "amub", "amUL", "Mur", " mUL", "cmuli", "mmul", "muli", "mur", "mUL", "mmUL", "MUL", " muli", "mmuli", "cmul", "cmur", "mmub", "Mul", "amul", "Muli"], "a": ["fa", "ga", "ca", "n", "au", "p", "oa", "ac", "alpha", "na", "sa", "ea", "ma", "an", "ab", "ai", "ae", "ba", "min", "pa", "da", "aj", "u", "c", "e", "area", "x", "la", "d", "y", "va", "za", "aa", "f", "as", "auto", "ama", "i", "ad"], "b": ["n", "base", "bb", "gb", "p", "s", "lb", "nb", "bd", "eb", "r", "abb", "wb", "bp", "z", "ab", "ib", "bc", "ae", "ub", "ba", "ob", "l", "u", "mb", "c", "bi", "e", "fb", "bs", "x", "h", "d", "y", "bf", "aa", "f", "sb", "g", "be", "i", "rb"], "o": ["O", "i", "io", "bo", "vo", "n", "p", "po", " object", "oi", "os", "r", "null", "t", "oo", "obj", "ooo", "object", "ob", "l", "so", "yo", "c", "e", "ou", "out", "h", "or", "oco", "d", "ol", "ko", "f", "oid", "to", " os"], "m": [" M", "w", "ms", "n", "p", "fm", "s", "r", "j", "mn", "t", "mu", "manager", "dm", "machine", "cm", "l", "u", "c", "e", "em", "M", "h", "module", "d", "y", "v", "mc", "f", "g", "md", "i", "mm", "co"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        if(N==0){\\n            System.out.println(1);\\n        }else{\\n            System.out.println(0);\\n        }\\n    }\\n}\\n", "target": "148", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "cs", "ca", "sub", "cc", "ner", "sec", "acc", "enc", "sync", "osc", "cr", "ec", "sl", "lc", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", " SC", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "SC", "spec"], "N": ["O", "K", "E", "I", "n", "Ns", "J", "C", "T", "NT", "Ne", "A", "SN", "G", "Q", "R", "D", "H", "Y", "Z", "Num", "B", "L", "GN", "M", "NC", "X", "S", "P", "F", "V", "NS", "Number", " n"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\n\\nclass Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\\n\t\tScanner scane = new Scanner(System.in);\\n\\n\t\tint r = 0, c = 0;\\n\\n\t\tr = scane.nextInt();\\n\t\tc = scane.nextInt();\\n\\n\t\tint[][] rc = new int[r][c];\\n\\n\t\tint[] r1 = new int[r];\\n\t\tint[] c1 = new int[c];\\n\\n\t\tfor(int i=0; i<rc.length; i++){\\n\t\t\tfor(int j=0; j<rc[0].length; j++){\\n\\n\t\t\t\trc[i][j] = scane.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\tint nums =0;\\n\\n\t\tfor(int i=0; i<rc.length; i++){\\n\t\t\tfor(int j=0; j<rc[0].length; j++){\\n\\n\t\t\t\tr1[i] += rc[i][j];\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0; i<rc[0].length; i++){\\n\t\t\tfor(int j=0; j<rc.length; j++){\\n\\n\t\t\t\tc1[i] += rc[j][i];\\n\t\t\t}\\n\t\t\tnums += c1[i];\\n\t\t}\\n\\n\\n\t\tfor(int i=0; i<rc.length; i++){\\n\t\t\tfor(int j=0; j<rc[0].length; j++){\\n\\n\t\t\t\tSystem.out.print(rc[i][j]+\" \");\\n\t\t\t}\\n\t\t\tSystem.out.println(r1[i]+\"\");\\n\t\t}\\n\t\tfor(int num : c1){\\n\t\t\tSystem.out.print(num+\" \");\\n\t\t}\\n\t\tSystem.out.print(nums+\"\\n\");\\n\\n\t}\\n}", "target": "23", "substitutes": {"scane": ["SCaine", "ScANE", "Scane", "Scaine", "caine", "cense", "SCene", "scause", "Scene", " scanne", "cane", "scanne", "SCANE", " scaine", "Scense", " scause", "Scause", "cANE", " scene", "SCause", "scANE", "canne", "scaine", " scense", " scANE", "SCane", "Scanne", "scense", "scene"], "r": ["nr", "re", "w", "br", "err", "ar", "n", "rs", "p", "sr", "er", "yr", "ner", "m", "t", "cr", "b", "R", "rn", "rx", "order", "rec", "ir", "row", "range", "q", "fr", "l", "u", "e", "rf", "x", "rr", "h", "pr", "rh", "ru", "rt", "d", "v", "f", "rg", "o", "ur", "k", "rb"], "c": ["pc", "ch", "w", "cs", "ca", "n", "p", "C", "ac", "cc", "m", "cn", "sc", "t", "z", "cr", "cin", "lc", "b", "cf", "count", "ci", "q", "cl", "l", "u", "e", "x", "ct", "con", "d", "v", "dc", "nc", "uc", "f", "cu", "cy", "k", "col"], "rc": ["pc", "fc", "reverse", "core", "cur", "cs", "ra", "oc", "rs", "color", "ic", "cc", "alpha", "roc", "sc", "irc", "sup", "loc", "sync", "cr", "config", "lc", "view", "ck", "rac", "coll", "in", "comment", "bc", "xc", "rx", "url", "rec", "ci", "error", "arc", "ource", "q", "rect", "init", "ruby", "src", "asc", "rr", "source", "ru", "right", "RC", "rt", "inc", "front", "hl", "dc", "root", "mc", "ack", "nc", "uc", "anc", "cu", "reg", "remote", "ras", "rb"], "r1": ["rc1", "r5", "c2", "rc0", " r0", "rb5", "c0", "r2", "rc5", "ru0", " r91", "ar5", "r91", "rc2", "r8", "ru91", "rb1", "rc8", "ar8", "r0", "ar1", "rb8", "ru2", " r2", "c91", "ru1"], "c1": [" c2", "ic11", "rc1", "uc11", "ic81", "c2", "rc0", "rec2", "lc2", "rec001", "c0", "rcone", " cone", "r2", "cc1", " c11", "cc2", "rc001", "uc1", " c0", "r001", "rc2", "cc81", "uc81", "c11", "r0", "c81", "c001", "recone", "uc91", " c81", "r81", "lc81", "rone", "cone", "c91", " c91", "ic1", "lc1", "rec1", "ic91"], "i": ["xi", "gi", "I", "ei", "is", "io", "si", "ie", "di", "n", "oi", "cli", "ii", "hi", "ij", "ki", "ni", "z", "ini", "isi", "b", "ai", "phi", "ji", "multi", "li", "ci", "ir", "ik", "q", "zi", "ri", "qi", "u", "bi", "l", "e", "ori", "iu", "it", "eni", "mi", "pi", "x", "yi", "fi", "id", "ip", "uri", "y", "ix", "v", "api", "vi", "f", "ui", "o", "info", "start"], "j": ["xi", "ch", "io", "err", "ja", "si", "ie", "jc", "dj", "n", "J", "p", "ion", "jo", "ii", "ij", "jet", "ni", "z", "js", "jj", "t", "jl", "b", "ji", "li", "obj", "ci", "ik", "q", "fr", "el", "l", "aj", "qi", "oj", "py", "u", "e", "it", "eni", "bi", "x", "pr", "uj", "d", "je", "y", "jen", "v", "ix", "key", "f", "o", "ui", "k", "jp"], "nums": ["cumbers", "snum", "Noms", "noes", "coes", " noes", "Numbers", "ntumbers", "cums", "nats", "noms", "ntums", "cum", "coms", "snats", " noms", "Num", "snums", " nats", "snumbers", "ntoms", "ntoes", "numbers", "Nums", "cats", " numbers"], "num": ["gi", "nu", "number", "nr", "tri", "um", "n", "di", "name", "unit", "nb", "nt", "na", "index", "qa", "none", "coord", "ind", "end", "obj", "data", "no", "nn", "ci", "Num", "node", "init", "it", "np", "nam", "cat", "id", "nil", "inc", "str", "offset", "dc", "uni", "nc", "info", "iter", "col"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    static private Scanner scan = new Scanner(System.in);\\n    public static void main(String args[]) {\\n        int int1 = Integer.parseInt(scan.next());\\n        int int2 = Integer.parseInt(scan.next());\\n\\n//        String str1 = scan.next();\\n//        int int3 = Integer.parseInt(scan.next());\\n//        String str1 = scan.next();\\n\\n        int ans_int = 0;\\n        double ans_dob = 0;\\n        String ans = \"\";\\n\\n        if(int1 >= 6){\\n            if(int1 <= 12){\\n                ans_int = int2/2;\\n            }else{\\n                ans_int = int2;\\n            }\\n            //        StringBuilder sb = new StringBuilder(str1);\\n        }else{\\n            ans_int = 0;\\n        }\\n\\n//        sb.replace(0,4,\"2018\");\\n        PrintWriter out = new PrintWriter(System.out);\\n        out.println(ans_int);\\n        out.flush();\\n        scan.close();\\n    }\\n}\\n", "target": "249", "substitutes": {"scan": ["span", "pin", "io", "search", "bin", "n", "er", "connect", "query", "ner", "result", "log", "sc", "user", "app", "r", "null", "this", "system", "sync", "config", "ann", "skip", "fan", "in", "inner", "serial", "match", "san", "read", "se", "l", "can", "out", "or", "filter", "false", "print", " scanner", "source", "process", "look", "parse", "slice", "server", "Scan", "walk", "array", "watch", "reader", "parser"], "int1": [" int0", "ints0", "int0", "index4", "ints1", "ints4", "int4", "index0", " int4", "index1"], "int2": ["intTwo", "INTTwo", " intii", "valii", "val2", "INT2", " intTwo", "INTii", "intii", "valTwo"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int a = scan.nextInt(), b = scan.nextInt() , c = scan.nextInt();\\n        int count = 0;\\n        for(int i = 1; i <= c; i++) {\\n            if(a <= i && i <= b) {\\n                if(c % i == 0) {\\n                count++ ;\\n                }\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}", "target": "190", "substitutes": {"scan": ["run", "pan", "span", "chan", "pin", "search", "gen", "n", "ser", "parser", "sr", "er", "see", "connect", "query", "ner", "sc", "na", "serv", "r", "ln", "sync", "skip", "south", "an", "report", "ann", "fan", "in", "nn", "all", "sign", "san", "read", "se", "l", "conn", "can", "out", "cat", "look", "slice", "feed", "clean", "Scan", "util", "nl", "walk", "ans", "ignore", "iter", "parse", "watch"], "a": ["ca", "n", "base", "p", "ia", "ac", "alpha", "A", "sa", "ab", "an", "ai", "ae", "ba", "data", "pa", "da", "u", "af", "area", "am", "h", "asa", "d", "y", "api", "aa", "f", "as", "start", "ad"], "b": ["n", "bb", "p", "lb", "nb", "j", "r", "ab", "length", "bc", "ba", "B", "l", "u", "e", "fb", "bs", "x", "h", "limit", "d", "y", "db", "v", "f", "sb", "cb", "k"], "c": ["ch", "col", "cur", "cs", "ca", "n", "cycle", "p", "C", "ac", "cc", "m", "sc", "z", "cr", "ab", "lc", "cf", "ci", "size", "cm", "l", "u", "e", "x", "h", "d", "y", "dc", "v", "uc", "f", "cu", "o", "cy", "g", "k", "con"], "count": ["test", "number", "list", "force", "parent", "err", "n", "code", "base", "p", "ac", "index", "counter", "coll", "length", "level", "match", "size", "error", "total", "cache", "e", "type", "last", "limit", "keep", "sum", "id", "depth", "offset", "check", "Count", "len", "key", "f", "info", "found", "second", "start", "col"], "i": ["gi", "xi", "I", "io", "si", "n", "di", "ie", "p", "oi", "ii", "index", "j", "chi", "t", "ni", "z", "ini", "mu", "ai", "length", "phi", "ji", "multi", "li", "ci", "ti", "ri", "qi", "u", "bi", "l", "e", "init", "mi", "x", "pi", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "slice", "api", "f", "o", "ui", "info"]}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\n\\nclass Main {\\n  public static final int MOD = 1000000007;\\n  public static final int INF = 1000000000;\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(in);\\n    int N = sc.nextInt();\\n    int A = N / 1000;\\n    int B = N % 1000 / 100;\\n    int C = N % 100 / 10;\\n    int D = N % 10;\\n    boolean check = true;\\n    for(int i=0; i<2; i++){\\n      if(check == false) break;\\n      for(int j=0; j<2; j++){\\n        if(check == false) break;\\n        for(int k=0; k<2; k++){\\n          int tmp;\\n          if(i == 0) tmp = A+B;\\n          else tmp = A-B;\\n          if(j == 0) tmp += C;\\n          else tmp -= C;\\n          if(k == 0) tmp += D;\\n          else tmp -= D;\\n          if(tmp == 7){\\n            String op1, op2, op3;\\n            if(i == 0) op1 = \"+\";\\n            else op1 = \"-\";\\n            if(j == 0) op2 = \"+\";\\n            else op2 = \"-\";\\n            if(k == 0) op3 = \"+\";\\n            else op3 = \"-\";\\n            out.println(A + op1 + B + op2 + C + op3 + D + \"=7\");\\n            check = false;\\n            break;\\n          }\\n        }\\n      }\\n    }\\n      \\n  }\\n\\n  public static int gcd(int a, int b){\\n    if(b == 0) return a;\\n    return gcd(b, a%b);\\n  }\\n}", "target": "152", "substitutes": {"MOD": [" E", " M", " MAX", "CC", " Z", "MAX", " GC", " EXT", " MIN", " TIME", " R", " DM", "ARM", " MM", "Z", " mod", " INST", "Mod", " PI", "M", " P", " CP", " X", "mod", " MA", " F", " CL", " CR"], "INF": ["InI", "InFE", "INf", "CONFE", "inI", "CONF", "CONI", "Inf", "inFE", "InF", "inF", "inf", "CONf", "INI", "INFE"], "sc": ["pc", "esc", "sw", "rc", "ch", "io", "cs", "sub", "cc", "ner", "sec", "acc", "sync", "cr", "system", "osc", "sq", "in", " scr", "bc", "sci", "iss", "ci", "cl", "scope", "se", "syn", "c", "Sc", "asc", "out", "sem", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "SC", "spec"], "N": ["O", "K", "U", "E", "I", "n", "Ns", "J", "Ni", "T", "NT", "Ne", "SN", "G", "NN", "Size", "R", "NO", "H", "Y", "NA", "Num", "L", "NM", "M", "X", "None", "S", "F", "P", "CNN", "V", "NS", "NL", " n"], "A": ["API", "Alpha", "K", "U", "I", "O", "AC", "Na", "AU", "J", "T", "AM", "Array", "PA", "LA", "AA", "G", "AI", "IA", "H", "Y", "NA", "L", "MA", "M", "X", "AD", "Ar", "AR", "TA", "BA", "S", "P", "F", "App", "AP", "Am", "At", "CA"], "B": ["O", "K", "U", "E", "I", "AB", "J", "T", "BD", "NB", "TB", "SB", "G", "PB", "W", "Q", "R", "BC", "GB", "UB", "CB", "Y", "H", "DB", "L", "M", "X", "LB", "Bs", "BA", "S", "F", "P", "OB", "V", "BB", "WB"], "C": ["K", "U", "E", "I", "CI", "Cs", "AC", "CC", "CR", "T", "CU", "CL", "EC", "CF", "G", "W", "Q", "R", "BC", "CD", "CW", "Y", "DC", "Cu", "L", "c", "CE", "M", "JC", "NC", "X", "KC", "CP", "S", "F", "P", "CNN", "CT", "VC", "Ch", "CM", "CA"], "D": ["O", "K", "U", "E", "DH", "J", "T", "G", "W", "DM", "Q", "R", "H", "Y", "DC", "DB", "Z", "L", "DI", "DD", "M", "X", "Ds", "S", "d", "F", "P", "MD", "V", "DA", "Do", "DF"], "i": ["xi", "I", "io", "si", "n", "di", "ie", "ami", "p", "oi", "m", "ii", "chi", "ki", "ni", "z", "ini", "ai", "in", "ji", "li", "ci", "im", "l", "qi", "u", "bi", "c", "ori", "iu", "it", "mi", "x", "pi", "yi", "fi", "id", "ip", "d", "y", "v", "ix", "api", "f", "ui", "o"], "check": ["fix", "test", "find", "load", "update", "color", "stop", "checked", "set", "loop", "wait", "pass", "valid", "fail", "sync", "work", "ck", "count", "error", "Check", "match", "pack", "lock", "read", "cl", "bug", "x", "kill", "keep", "print", "id", "block", "pull", "look", "clean", "key", "ack", "ok", "add", "scan", "walk", "stat", "info", "ignore", "call", "start"], "j": ["I", "op", "ja", "n", "jc", "ie", "dy", "dj", "J", "p", "m", "jo", "ii", "ij", "jet", "t", "z", "js", "jj", "jl", "ji", "end", "li", "ik", "q", "l", "aj", "u", "c", "e", "it", "x", "uj", "d", "je", "y", "v", "key", "f", "jam", "o", "g", "jp"], "k": ["K", "ks", "ak", "n", "p", "mk", "unk", "s", "m", "uk", "kh", "ki", "z", "sk", "ek", "ck", "kk", "ke", "ky", "ik", "q", "ijk", "l", "u", "c", "ka", "h", "x", "kw", "d", "y", "kid", "v", "kick", "key", "ko", "ok", "f", "o", "g"], "tmp": ["nb", "inst", "txt", "copy", "appy", "mp", "emp", "kk", "data", "position", "tp", "treatment", "pre", "offset", "xxx", "cp", "array", "zip", "start", "rb", "pos", "p", "config", "count", "meta", "cache", "cmp", "not", "extra", "area", "pp", "beta", "sp", "test", "number", "pm", "ppo", "code", "po", "aaa", "alpha", "m", "media", "MP", "sup", "this", "ppa", "vm", "now", "proc", "num", "x", "att", "next", "api", "amp", "foo", "const", "cb", "pad", "jp", "img", "diff", "tc", "nt", "part", "metadata", "jj", "tt", "obj", "no", "opt", "py", "np", "vt", "v", "key", "temp", "pty"], "op1": ["rop1", "apOne", "op61", "cat61", "Op1", " op61", "Op2", "cat1", "opOne", " opOne", "optOne", "Op3", "rop81", "copOne", "OP1", "cat81", "cop4", "OpOne", "oper1", "OP2", "OPOne", "ap2", " op4", " op81", "opt2", "rop2", "opt1", "ap3", "cat2", "ap1", "rop61", "OP3", "cop1", "cop3", "opt3", "oper4", "oper3", "op4", "operOne", "op81"], "op2": ["op02", "op5", "option5", " op6", "op6", "opTwo", "pop4", "opt5", "cop2", "cop6", "popTwo", " op02", "optionTwo", "oper2", "cop4", "opt02", "pop2", "option4", "opt4", " op4", "option2", "pop5", "opt2", "opt1", "optTwo", "cop1", "oper6", "cop3", "opt6", "oper3", "oper4", "oper02", "op4", "oper1"], "op3": ["op5", " op6", "op6", "hop5", "opThree", "opt5", " op5", "cop6", "cop2", "ep6", "OP4", "hop1", "ep3", "copThree", "hop3", "OP1", "oper2", "OP2", "opt4", "hop4", "opt2", "opt1", "OP3", "cop1", "opt6", "cop3", "oper6", "opt3", "oper3", " opThree", "OP5", "op4", "epThree", "oper1"], "a": ["fa", "ga", "ca", "value", "n", "p", "ia", "ac", "alpha", "aaa", "na", "sa", "ea", "z", "ma", "an", "ab", "abs", "ai", "ae", "ba", "pa", "da", "aj", "c", "e", "am", "x", "area", "la", "d", "y", "va", "aa", "f", "as", "ama", "ad"], "b": ["bin", "n", "base", "bb", "p", "nb", "eb", "bot", "r", "abb", "z", "ab", "ib", "bar", "pb", "length", "ba", "l", "bi", "c", "e", "fb", "bs", "x", "h", "d", "y", "db", "v", "bf", "f", "sb", "be", "cb", "ad", "rb"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\tpublic static void main(String[] args)throws Exception{\\n\t\tInputStreamReader isr = new InputStreamReader(System.in);\\n        BufferedReader br = new BufferedReader(isr);\\n        \\n        while (true)\\n        {\\n        \tString input = br.readLine();\\n        \tif (input.equals(\"0\"))\\n        \t\tbreak;\\n        \tint sum = 0;\\n        \tfor (int i = 0; i < input.length(); i++)\\n        \t{\\n        \t\tString a = String.valueOf(input.charAt(i));\\n        \t\tsum += Integer.parseInt(a);\\n        \t}\\n        \tSystem.out.println(sum);\\n        \t\\n        }\\n    \t\\n\t}\\n\\n}", "target": "144", "substitutes": {"isr": ["isrs", " isrr", "ISrr", "islr", "issrb", "isrc", "issrc", "isrb", "issr", " isrs", "irs", "isrr", "ilr", "ISrb", "irr", "ISr", "ir", " islr", "ISrc", " isrc", " isrb", "ISrs", "ISlr", "issrs"], "br": ["res", "ctr", "io", "ch", "err", "Br", "bb", "ref", "tr", "sr", "er", "buf", "yr", "BR", "http", "r", "browser", "cr", "abs", "arr", "b", "dr", "gr", "ibr", "ocr", "bar", "bc", "obj", "mr", "fr", "stream", "HR", "bs", "bridge", "rr", "pr", "bro", "body", "str", "hr", "bf", "div", "runner", "reader", "rb"], "input": ["initial", "cur", "char", "form", "string", "word", "raw", "line", "output", "header", "s", "submit", "result", "batch", "first", "null", "qa", "empty", "entry", "b", "image", "in", "inf", "comment", "url", "unknown", "inner", "error", "data", "q", "c", "out", "text", "keep", "single", "source", "Input", "pull", "inc", "str", "format", "again", "api", "feed", "buffer", "current", "json", "div", "f", "act", "plus", "up", "active", "info", "reader"], "sum": ["weight", "um", "si", "value", "n", "unit", "volume", "alpha", "average", "result", "ums", "sup", "index", "zero", "sa", "Sum", "mass", "b", "max", "loss", "length", "count", "mean", "cum", "size", "total", "no", "miss", "amount", "ass", "u", "num", "out", "su", "scale", "SI", "spread", "vol", "sim", "fat", "f", "fee", "up", "summary", "info", "mem", "cost", "parse", "gram"], "i": ["xi", "gi", "I", "io", "si", "di", "ami", "p", "oi", "m", "abi", "ii", "hi", "index", "j", "ini", "b", "ai", "ji", "li", "ci", "ti", "data", "ri", "qi", "u", "bi", "e", "it", "eni", "mi", "x", "pi", "id", "ip", "uri", "v", "ix", "f", "ui", "o"], "a": ["sta", "sha", "ga", "ca", "sub", "asha", "alpha", "ac", "na", "sup", "aaaa", "A", "sa", "ea", "an", "b", "cha", "entry", "aux", "ba", "data", "ata", "aka", "pa", "da", "l", "ava", "u", "c", "e", "area", "la", "va", "ha", "aa", "f", "as", "auto", "ama"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tPrintWriter pw = new PrintWriter(System.out);\\n\t\tString x=sc.next();\\n\t\tfor(int i=0;i<x.length();i++) {\\n\t\t\tx=x.replace(x.charAt(i), 'x');\\n\t\t}\\n\t\tpw.print(x);\\n\t\tpw.close();\\n\t}\\n\tstatic class Scanner {\\n\t\tStringTokenizer st;\\n\t\tBufferedReader br;\\n\t\tpublic Scanner(InputStream s) {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(s));\\n\t\t}\\n\t\tpublic Scanner(String file) throws FileNotFoundException {\\n\t\t\tbr = new BufferedReader(new FileReader(file));\\n\t\t}\\n\t\tpublic String next() throws IOException {\\n\t\t\twhile (st == null || !st.hasMoreTokens())\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\t\tpublic int nextInt() throws IOException {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\t\tpublic long nextLong() throws IOException {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\t\tpublic String nextLine() throws IOException {\\n\t\t\treturn br.readLine();\\n\t\t}\\n\t\tpublic double nextDouble() throws IOException {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\t\tpublic boolean ready() throws IOException {\\n\t\t\treturn br.ready();\\n\t\t}\\n\t}\\n}", "target": "122", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "ca", "sub", "cer", "screen", "cc", "ner", "sec", "acc", "enc", "sync", "cr", "osc", "lc", "bc", "sci", "cle", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", "sem", "sch", "mc", "scan", "nc", " Sc", "sel", "uc", "anc", "sh", "sp", "SC", "spec"], "pw": [" pwr", "apwb", "PW", "pW", "cw", "paw", "phw", "apw", "pow", "pwa", "Pow", " praw", " phw", "spwa", "pshw", "craw", "spwb", "apwa", "spaw", " pW", "opw", "praw", "Pwr", "opaw", "spw", "Pw", "cW", "apaw", "opwb", "psW", "Phw", "opwa", "psw", "pswr", "pwb", " pow", "Praw", "pwr", "cow"], "x": ["xi", "wx", "sw", "w", "xb", "xd", "xe", "n", "string", "code", "name", "p", "xt", "fx", "index", "cross", "php", "t", "z", "work", "b", "rex", "xxxx", "in", "xy", "xc", "rx", "input", "xf", "data", "lex", "pe", "l", "u", "c", "e", "python", "xs", "tx", "X", "text", "xx", "content", "str", "y", "ix", "xxx", "v", "ex", "act", "xp", "f", "plus", "o", "array", "xml"], "i": ["xi", "gi", "I", "si", "n", "di", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "t", "uli", "z", "mini", "ini", "mu", "b", "ai", "in", "multi", "ji", "li", "ci", "ti", "data", "zi", "ri", "qi", "u", "bi", "c", "e", "mi", "pi", "h", "fi", "id", "uri", "v", "ix", "vi", "key", "f", "o", "ui", "start", "k"], "st": ["th", "sw", "sta", "pt", "tr", "struct", "sr", "ste", "sts", "store", "ft", "nt", "sth", "r", "inst", "sa", "stri", "t", "est", "cr", "sl", "sn", "ost", "b", "fe", "std", "tt", "ss", "stable", "pe", "fr", "cl", "nd", "se", "ast", "ist", "src", "bt", "pr", "ct", "rt", "str", "ust", "rest", "ut", "const", "sh", "sp", "ST", "be", "sb", "rd", "bl", "St"], "br": ["ver", "kr", "ctr", "ch", "cur", "err", "Br", "bur", "bo", "bb", "tr", "p", "sr", "er", "buf", "vr", "BR", "bor", "obl", "r", "browser", "fin", "cr", "arr", "ab", "b", "bar", "gr", "dr", "bc", "ob", "mr", "raf", "fr", "src", "ber", "or", "lr", "pr", "bro", "bridge", "repl", "ler", "ru", "fore", "rt", "str", "bh", "db", "hr", "sp", "sb", "be", "ur", "bl", "rb"], "s": ["a", "less", "fs", " streams", "settings", "files", "si", "n", "sf", "ings", "p", "socket", "gs", "os", "r", "ips", "t", "sync", "ed", "sl", "storage", "b", "ls", " files", "ds", "ins", "in", "lines", "its", "l", "ers", "e", "ses", "out", "S", "d", "ps", "ssl", "es", "f", "services", "g", "strings", "spec"], "file": ["files", "io", "string", "base", "name", "p", "line", "fp", "log", "filename", "resource", "model", "entry", " files", "class", "image", "input", "url", "data", "cache", "object", "lock", "full", "l", "ile", "stream", "e", "type", "source", "id", "uri", "content", "path", "feed", "key", " filename", "f", "FILE", "File", "from", "info"]}}
{"code": "import static java.lang.Math.ceil;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.nextLine();\\n//        int k = sc.nextInt();\\n//        int n = sc.nextInt();\\n//        int a = sc.nextInt();\\n//        int b = sc.nextInt();\\n//        int c = sc.nextInt();\\n//          int a1 = sc.nextInt();\\n//          int a2 = sc.nextInt();\\n//          int a3 = sc.nextInt();\\n//        int c = sc.nextInt(); \\n//        int r = sc.nextInt();\\n//        int x = sc.nextInt();\\n//        int s = sc.nextInt();\\n//        double n = sc.nextDouble(); \\n//        int r = sc.nextInt(); \\n//        String s = sc.next();\\n//        String t = sc.next();\\n//        int n = sc.nextInt();\\n//        int m = sc.nextInt();\\n//        char c = sc.next().charAt(0);\\n        sc.close();\\n        String[] array =  s.split(\"\");\\n        Arrays.sort(array); // \u6607\u9806\\n//        System.out.println(\"[0]: \"+array[0]);\\n//        System.out.println(\"[1]: \"+array[1]);\\n//        System.out.println(\"[2]: \"+array[2]);\\n//        System.out.println(\"[3]: \"+array[3]);\\n        if(array[0].equals(array[1]) && array[2].equals(array[3]) && !array[0].equals(array[3])){\\n            System.out.println(\"Yes\");\\n        }else{\\n            System.out.println(\"No\");\\n        }\\n//        a *= n;\\n//        if(a <= b){\\n//            System.out.println(a);\\n//        }else{\\n//            System.out.println(b);\\n//        }\\n//        System.out.println();\\n//        double k = (a+b)/2.0;\\n//        if(k == ceil(k)){\\n//            System.out.println((int)k);\\n//        }else{\\n//            System.out.println(\"IMPOSSIBLE\");\\n//        }\\n        \\n//        if(c-(a-b) >= 0 ){\\n//            System.out.println(c-(a-b));\\n//        }else{\\n//            System.out.println(0);\\n//        }\\n//        Integer array[] = {a+b,a-b,a*b};\\n//        Arrays.sort(array); // \u6607\u9806\\n//        Arrays.sort(array, Collections.reverseOrder()); // \u964d\u9806\\n//        System.out.println(array[0]);\\n//        if(a>=3200){\\n//            System.out.println(s);\\n//        }else{\\n//            System.out.println(\"red\");\\n//        }\\n//        String[] s_arr =  s.split(\"\");\\n//        String[] t_arr =  t.split(\"\");\\n//        int count=0;\\n//        for(int i = 0;i<s_arr.length;i++){\\n//            if(s_arr[i].equals(t_arr[i])){\\n//                count++;\\n//            }\\n//        }\\n//        System.out.println(count);\\n//        switch (s) {\\n//            case \"Sunny\":\\n//                System.out.println(\"Cloudy\");\\n//                break;\\n//            case \"Rainy\":\\n//                System.out.println(\"Sunny\");\\n//                break;\\n//            case \"Cloudy\":\\n//                System.out.println(\"Rainy\");\\n//                break;\\n//        }\\n//        String array[] = {\"SAT\",\"FRI\",\"THU\",\"WED\",\"TUE\",\"MON\",\"SUN\"};\\n//        int count = 0;\\n//        for(int i = 1;i<array.length;i++){\\n//            if(s.equals(array[i])){\\n//                count += i;\\n//            }\\n//        }\\n//        if(n%2 == 0){\\n//            System.out.println(0.5000000000);\\n//        }else{\\n//            System.out.println(((n+1)/2)/n);\\n//        }\\n//        if(a<=b*2){\\n//            System.out.println(0);\\n//        }else{\\n//            System.out.println(a - 2*b);\\n//        }\\n//        if(a1 + a2 + a3 <= 21){\\n//            System.out.println(\"win\");\\n//        }else{\\n//            System.out.println(\"bust\");\\n//        }\\n//        Integer array[] = {a,b};\\n//        if(!Arrays.asList(array).contains(1)){\\n//            System.out.println(1);\\n//        }else if(!Arrays.asList(array).contains(2)){\\n//            System.out.println(2);\\n//        }else{\\n//            System.out.println(3);\\n//        }\\n//        if(k * 500 >= x){\\n//            System.out.println(\"Yes\");\\n//        }else{\\n//            System.out.println(\"No\");\\n//        }\\n//        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\\n//        int i = 0;\\n//        for(;;){\\n//            if(alphabet[i] == c){\\n//                break;\\n//            }\\n//            i ++;\\n//        }\\n//        System.out.println(alphabet[i+1]);\\n//        if(n == m){\\n//            System.out.println(\"Yes\");\\n//        }else{\\n//            System.out.println(\"No\");\\n//        }\\n//        int count = 0;\\n//        for(;;){\\n//            if(h<=0){\\n//                break;\\n//            }\\n//            h -= a;\\n//            count ++;\\n//        }\\n////        System.out.println(h);\\n//        System.out.println(count);\\n//        String[] arr =  s.split(\" \");\\n////        System.out.println(arr[0]);\\n//        System.out.println(arr[1]);\\n//        System.out.println(a);\\n//        System.out.println(b);\\n//        System.out.println(u);\\n//        if(arr[0].equals(u)){\\n//            a -= 1;\\n//            System.out.println(a+\" \"+b);\\n//        }else{\\n//            b -= 1;\\n//            System.out.println(a+\" \"+b);\\n//        }\\n//        List<Integer> list = Arrays.asList(a,b,c);\\n////        System.out.println(list);\\n//        List<Integer> list2 = new ArrayList<Integer>(new HashSet<>(list));\\n//        if(list2.size() == 2){\\n//            System.out.println(\"Yes\");\\n//        }else{\\n//            System.out.println(\"No\");\\n//        }\\n//        System.out.println(list2);\\n//        if(n >= 10){\\n//            System.out.println(r);\\n//        }else{\\n//            System.out.println(r + 100*(10-n));\\n//        }\\n//        if(n % 2 == 0){\\n//            n = (n/2);\\n//            System.out.println(n);\\n//        }else{\\n//            n = n/2 + 1;\\n//            System.out.println(n);\\n//        }\\n//        int sum = 0;\\n//        sum = n*(n-1)/2 + m*(m-1)/2;\\n//        System.out.println(sum);\\n//        String[] arr =  s.split(\"\");\\n//         System.out.println(\"arr[2]: \"+arr[2]);\\n//          System.out.println(\"arr[3]: \"+arr[3]);\\n//           System.out.println(\"arr[4]: \"+arr[4]);\\n//            System.out.println(\"arr[5]: \"+arr[5]);\\n//        if(arr[2].equals(arr[3]) && arr[4].equals(arr[5])){\\n//            System.out.println(\"Yes\");\\n//        }else{\\n//            System.out.println(\"No\");\\n//        }\\n//        System.out.println(z + \" \" + x + \" \" + y);\\n//        if(n.contains(\"7\")){\\n//            System.out.println(\"Yes\");\\n//        }else{\\n//            System.out.println(\"No\");\\n//        }\\n//        System.out.println(n);\\n//        if(s <= w){\\n//            System.out.println(Math.PI);\\n//        }else{\\n//            System.out.println(\"safe\");\\n//        }\\n//        System.out.println(s);\\n//        if(s.contains(\"RRR\")){\\n//            System.out.println(3);\\n//        }else if(s.contains(\"RR\")){\\n//            System.out.println(2); \\n//        }else if(s.contains(\"R\")){\\n//            System.out.println(1);\\n//        }else{\\n//             System.out.println(0);\\n//        }\\n//        String s = sc.nextLine();\\n//        String t = sc.next();\\n//        String[] arr =  s.split(\"\u3000\");\\n//        sc.close();\\n//        System.out.println(\"input: \"+ s);\\n//        System.out.println(\"k:\" + k);\\n//        System.out.println(\"a:\" + a);\\n//        System.out.println(\"b:\" + b);\\n//        String ans = \"NG\";\\n//        for(int x = a; x<=b; x++){\\n//            if(x%k == 0){\\n//                ans = \"OK\";\\n//            }\\n//        }\\n//        System.out.println(ans);\\n//        \\\\n//        System.out.println(\"arr[1]:\" + arr[1]);\\n//\\n//        if(s.equals(\"ABC\")){\\n//            System.out.println(\"ARC\");\\n//        }else{\\n//            System.out.println(\"ABC\");\\n//        }\\n//        String[] arr1 =  s.split(\"\");\\n//        String[] arr2 =  t.split(\"\");\\n////        List<String> list1 = Arrays.asList(s.split(\"\"));\\n//        List list1 = new LinkedList(Arrays.asList(s.split(\"\")));\\n////        List<String> list2 = Arrays.asList(t.split(\"\"));\\n//        List list2 = new LinkedList(Arrays.asList(t.split(\"\")));\\n////        int num = Integer.parseInt(arr[arr.length - 1]);\\n//        list2.remove(arr2.length - 1);\\n////        System.out.println(list1);\\n////        System.out.println(list2);\\n//         if(list1.toString().contentEquals(list2.toString())){\\n//             System.out.println(\"Yes\");\\n//         }else{\\n//             System.out.println(\"No\");\\n//         }\\n//        switch(num){\\n//            case 3:\\n//                System.out.println(\"bon\");\\n//                break;\\n//            case 0:\\n//            case 1:\\n//            case 6:\\n//            case 8:\\n//                System.out.println(\"pon\");\\n//                break;\\n//            default:\\n//                System.out.println(\"hon\");\\n//                break;\\n//        }\\n//        String[] array = str.split(\" \");\\n//        int sum = 0;\\n//        for(int i=0; i<array.length; i++) {\\n//            int num = Integer.parseInt(array[i]);\\n//            sum += num;\\n//        }\\n//        System.out.println(15-sum);\\n    }\\n}\\n", "target": "33", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "desc", "cs", "search", "si", "sf", "set", "cc", "ner", "sec", "sa", "sync", "system", "sl", "osc", "st", "ec", "cr", "bc", "sci", "arc", "cl", "scope", "se", "c", "src", "Sc", "asc", " SC", "sch", "scan", "nc", " Sc", "uc", "sp", "sb", "parser", "SC"], "s": ["a", "n", "string", "p", "output", "m", "r", "ln", "t", "b", "ls", "lines", " lines", "l", "c", "e", " commands", "S", "d", "v", "es", " logs", "f", "g", " comments", "i"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int k = sc.nextInt();\\n        int n = sc.nextInt();\\n        ArrayList<Integer> array = new ArrayList<>();\\n        for (int i = 0; i < n; i++) {\\n            array.add(sc.nextInt());\\n        }\\n        int max = 0;\\n        for (int i = 0; i < n - 1 ; i++) {\\n            if ((array.get(i + 1) - array.get(i)) > max){\\n                max = (array.get(i + 1) - array.get(i));\\n            }\\n        }\\n        int b = array.get(0) + (k - array.get(n - 1));\\n        max = max < b ? b : max;\\n        System.out.println(k - max);\\n    }\\n}", "target": "10", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "cor", "cer", "screen", "cc", "ner", "tc", "enc", "system", "cr", "osc", "sq", "ec", "lc", "cont", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", "str", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "parser", "SC"], "k": ["K", "number", "ks", "ak", "p", "unk", "m", "j", "z", "km", "sk", "ck", "in", "length", "ke", "size", "q", "l", "u", "c", "e", "x", "h", "dk", "kw", "id", "d", "y", "v", "key", "ok", "f", "o", "g"], "n": ["nu", "network", "number", "w", "name", "p", "s", "ner", "m", "nt", "nor", "nan", "j", "r", "ne", "t", "none", "z", "sn", "N", "in", "length", "count", "no", "nn", "size", "ns", "l", "u", "en", "c", "num", "e", "x", "h", "d", "un", "y", "v", "len", "f", "o", "net"], "array": ["expression", "a", "list", "number", "collection", "table", "parent", "our", "initial", "union", "address", "base", "group", "section", "arrow", "average", "result", "batch", "Array", "app", "vector", "index", "r", "this", "system", "arr", "pair", "work", "one", "coll", "image", "ray", "book", "analysis", "order", "archive", "error", "cache", "all", "instance", "range", "row", "object", "e", "audio", "area", "global", "database", "element", "air", "allow", "function", "square", "external", "api", "v", "server", "auto", "record", "environment"], "i": ["xi", "gi", "a", "I", "is", "io", "si", "di", "ie", "ami", "p", "oi", "ii", "index", "j", "chi", "ni", "ini", "mu", "isi", "ai", "in", "phi", "ji", "li", "ci", "ti", "l", "qi", "u", "bi", "c", "ri", "e", "ori", "iu", "init", "it", "mi", "x", "pi", "eni", "yi", "id", "ip", "uri", "y", "v", "ix", "f", "ui", "o", "info", "g"], "max": ["a", "best", "chain", "parent", "w", "big", "cur", "ca", "value", "base", "step", "rank", "p", "MAX", "code", "wrap", "diff", "maximum", "first", "j", "default", "r", "est", "Max", "work", "always", "conf", "count", "length", "end", "now", "size", "total", "cache", "no", "min", "ax", "range", "q", "cl", "c", "init", "can", "last", "out", "limit", "x", "next", "id", "right", "mod", "rest", "v", "orig", "key", "az", "auto", "g", "parse", "ad"], "b": ["a", "bas", "w", "bin", "base", "bb", "p", "nb", "lb", "eb", "zb", "j", "r", "abb", "z", "ab", "ib", "now", "ba", "ob", "boot", "B", "l", "u", "bi", "c", "mb", "e", "fb", "bs", "h", "d", "y", "v", "bf", "ok", "f", "auto", "sb", "g", "cb", "ad", "rb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint x=Integer.parseInt(sc.next());\\n\t\tint y=Integer.parseInt(sc.next());\\n\t\twhile(x!=0 || y!=0){\\n\t\t\tif(x<y) System.out.println(x+\" \"+y);\\n\t\t\telse System.out.println(y+\" \"+x);\\n\t\t\tx=Integer.parseInt(sc.next());\\n\t\t\ty=Integer.parseInt(sc.next());\\n\t\t}\\n\\n\t}\\n\\n}", "target": "72", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int D = sc.nextInt();\\n        int N = sc.nextInt();\\n        \\n        int powD = 1;\\n        for(int i = 0; i < D; i++){\\n            powD *= 100;\\n        }\\n        int ans = N * powD;\\n        if((ans == 100 && powD == 1) || (ans == 10000 && powD == 100) || (ans == 1000000 && powD == 10000)){\\n            System.out.println(ans + 1 * powD);\\n        }else{\\n            System.out.println(ans);\\n        }\\n        \\n    }\\n}\\n", "target": "245", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "cur", "cs", "ser", "ca", "cer", "ctx", "com", "cc", "ner", "sec", "tc", "soc", "na", "acc", "sync", "osc", "cr", "sq", "ec", "bc", "sci", "ss", "ci", "cus", "cl", "se", "c", "src", "Sc", "asc", "sche", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "SC"], "D": ["O", "K", "E", "I", "DIR", "C", "T", "FD", "Di", "G", "DE", "DM", "ds", "Size", "Q", "Y", "CD", "JD", "DC", "B", "Z", "DB", "L", "DI", "DD", "M", "X", "Ds", "S", "d", "P", "DS", "F", "DP", "MD", "V", "DA", "DO", "Do", "DF"], "N": ["O", "K", "U", "E", "I", "NP", "n", "Ns", "AN", "J", "C", "T", "NT", "A", "G", "CN", "NN", "Q", "Size", "R", "H", "Y", "NA", "Z", "B", "Num", "L", "M", "X", "S", "P", "F", "V", "NS"], "powD": ["poyL", "powsD", "powerF", " pewd", "pOWd", "pOWDo", "PowD", "pewD", "powerA", "PowI", " pewD", "poxDs", "poyD", "powedd", "PowL", "POWDs", " pOWd", "pOWDs", "powsI", "powDs", "pOWF", "powL", "PowF", " pewL", " powF", "POWDo", " pOWF", "poyDone", "powF", "pOWD", "pOWI", "PowDo", "pewF", "powDone", "powA", "POWI", "poweL", "POWD", "powerL", " pewF", "powerD", "poxL", "powsF", "poweD", " pOWL", "powedDs", "powedD", "PowDone", "powedL", "powd", "poxD", "powsL", " powL", " pOWD", "POWL", "powedDo", "powI", "PowA", "pewd", "pewA", "poxDo", "pewDo", "POWA", "pOWA", "POWDone", "pOWL", "pOWDone", "POWF", "powedF", "pewL", "pewI", "powDo", "PowDs", "poweDone", " powd"], "i": ["gi", "xi", "I", "io", "pos", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "part", "chi", "j", "index", "uli", "ini", "ai", "in", "phi", "ji", "li", "ci", "ti", "q", "ri", "qi", "u", "e", "init", "it", "iu", "mi", "pi", "x", "h", "fi", "id", "ip", "uri", "d", "v", "ix", "f", "o", "ui", "info"], "ans": ["span", "ks", "cons", "ants", "cs", "Na", "ani", "AN", "ops", "lan", "anon", "amps", "offs", "na", "ents", "ANS", "nan", "A", "ens", "anas", "ana", "outs", "an", "sk", "ann", "ls", "ars", "aces", "ds", "ins", "annels", "lines", "cases", "atan", "cas", "grades", "aning", "ads", "cus", "ns", "ases", "can", "xs", "types", "ats", "eps", "cats", "aos", "ids", "ions", "names", "anus", "aned", "ant", "ons", "anc", "as", "anks", "ays", "nas", "ras"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic Main(int opt1, int opt2) {\\n\t\tMap<Integer, Integer> map = new HashMap<>();\\n\t\tmap.put(1, 1);\\n\t\tmap.put(2, 2);\\n\t\tmap.put(3, 3);\\n\t\tmap.remove(opt1);\\n\t\tmap.remove(opt2);\\n\t\tSystem.out.println(map.entrySet().iterator().next().getValue());\\n\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint opt1 = sc.nextInt();\\n\t\tint opt2 = sc.nextInt();\\n\t\tMain m = new Main(opt1, opt2);\\n\\n\t}\\n\t\\n}", "target": "236", "substitutes": {"opt1": ["rop0", " optOne", "rop1", "Option1", "optim1", "optim61", "cho1", "step1", "optCard", "opOne", "choOne", "op1", "op3", "optionCard", "step3", "optionOne", "option1", "optOne", "op01", "step2", "option0", "opCard", "option01", "optim0", "opt0", "option2", "opt61", "OptionOne", "rop2", " opt01", "ort2", "ortOne", "rop61", "optim2", "option3", "ort1", "opt01", "ortCard", "op2", "opt3", "cho01", "step01", "option61", "Option01"], "opt2": ["op02", "option02", "Opt8", " opt02", "Opt4", " opt0", "opTwo", "op102", "op1", "Opt1", "option1", "optionTwo", " opt102", "opt02", "opt8", "opt4", "opt0", " opt8", "option4", "opt102", "option102", "option2", "Opt0", "optTwo", "op8", "Opt2", "op2", " opt4", "op0", "op4", " optTwo", "OptTwo"], "map": ["remove", "per", "file", "comb", "list", "ap", "table", "maps", "address", "ms", "code", "group", "set", "me", "make", "part", "app", "index", "pose", "copy", "work", "one", "cover", "ge", "go", "build", "mp", "hash", "replace", "MAP", "dict", "data", "cache", "use", "pack", "min", "lock", "object", "move", "apper", "complete", "module", "block", "age", "pre", "path", "down", "push", "key", "add", "place", "change", "cap", "up", "array", "rule", "view", "parse", "where", "pad"], "sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "search", "si", "ca", "cer", "screen", "sr", "ctx", "cc", "ner", "sec", "cr", "sv", "osc", "sq", "ec", "lc", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "inc", " SC", "sch", "scan", "nc", " Sc", "uc", "sp", "sb", "SC", "scene"], "m": [" rm", " M", " um", " mm", "ms", "n", "man", " man", "r", "an", "gr", " module", "manager", " eng", "cm", "l", " f", "c", " fn", "M", " adm", " manager", " o", "d", "mc", "f", " n", " l"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String args[]) throws Exception{\\n        BufferedReader stdR = new BufferedReader(new InputStreamReader(System.in));\\n        String[] s = stdR.readLine().split(\" \");\\n        int N = Integer.parseInt(s[0]);\\n        int A = Integer.parseInt(s[1]);\\n        int B = Integer.parseInt(s[2]);\\n        int num = 0;\\n        for(int i = 1 ; i <= N; i++) {\\n            String str = String.valueOf(i);\\n            int count = 0;\\n            for(int j = 0 ; j < str.length(); j++) {\\n                count += Character.digit(str.charAt(j), 10);\\n            }\\n            if(A <= count && count <= B) num+=i;\\n        }\\n        System.out.println(num);\\n    }\\n}\\n", "target": "212", "substitutes": {"stdR": ["STDW", "stReader", "stR", "standardRW", "stdI", "stdW", " stdN", "STDR", "inputW", "stdRW", "standardR", "inputR", "stdN", "STDI", " stdReader", "stdE", " stdE", "standardN", "standardReader", "inputE", " stdW", "STDE", "stdReader", "inputI", "stN", "stRW", " stdI", " stdRW"], "s": ["fs", "a", "parts", "qs", "is", "w", "n", "string", "rs", "aws", "p", "m", "gs", "os", "r", "t", "sv", "sl", "abs", "b", "ls", "tests", "ds", "in", "lines", "ss", "split", "its", "fts", "ns", "l", "u", "groups", "c", "ses", "e", "su", "ts", "S", "d", "ps", "es", "f", "services", "o", "us", "sb", "seconds", "g", "strings", "rows"], "N": ["O", "U", "E", "I", "NUM", "NR", "n", "Ns", "J", "C", "T", "Ni", "NT", "G", "W", "Q", "R", "D", "Y", "Num", "Z", "L", "M", "X", "No", "S", "P", "F", "V", "Count", "NS", "Number", " n"], "A": ["a", "API", "Alpha", "U", "O", "I", "K", "NUM", "AC", "C", "T", "alpha", "Array", "PA", "G", "AA", "AI", "RA", "D", "H", "Y", "NA", "L", "M", "SA", "X", "AR", "BA", "S", "P", "F", "ID", "V", "Count", "At"], "B": ["O", "E", "I", "NUM", "Bi", "AB", "J", "C", "T", "BF", "Blue", "SB", "MB", "G", "b", "W", "Q", "R", "BC", "GB", "D", "Y", "Num", "L", "M", "X", "BA", "OB", "P", "F", "S", "V", "Count", "Number", "BL", "BI", "WB", "BER"], "num": ["nu", "span", "number", "col", "NUM", "pos", "msg", "status", "um", "bin", "n", "gen", "unit", "umi", "nb", "result", "nt", "hi", "na", "index", "valid", "ni", "mu", "b", "multi", "nn", "total", "no", "common", "Num", "u", "init", "text", "sum", "id", "cat", "nom", "inc", "nit", "uni", "len", "f", "dim", "info", "temp", "con"], "i": ["xi", "gi", "a", "number", "I", "io", "si", "n", "di", "ie", "p", "oi", "abi", "ii", "index", "ni", "z", "ini", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "iter", "ik", "zi", "ri", "qi", "u", "bi", "c", "l", "init", "iu", "pi", "id", "ip", "uri", "ix", "v", "slice", "key", "f", "ui", "info", "start"], "str": ["br", "cur", "err", "char", "n", "string", "tr", "p", "sr", "strip", "sc", "r", "txt", "stri", "cr", "st", "arr", "b", "dr", "gr", "coll", "in", "input", "Str", "iter", "fr", "cl", "l", "dec", "u", "c", "text", "pr", "next", "id", "v", "hr", "div", "f", "sp", "g", "STR", "strings"], "count": ["a", "th", "number", "list", "weight", "cur", "char", "n", "code", "base", "name", "p", "C", "nt", "index", "counter", "b", "ind", "coll", "length", "level", "size", "total", "no", "cache", "fr", "child", "l", "c", "out", "cat", "id", "sum", "left", "offset", "Count", "len", "current", "key", "act", "const", "f", "info", "found", "start", "col", "check"], "j": ["ch", "br", "ja", "n", "jc", "dj", "ie", "J", "p", "oi", "jo", "ii", "ij", "z", "js", "jj", "b", "jl", "ji", "li", "obj", "q", "el", "l", "aj", "u", "oj", "c", "e", "it", "x", "h", "pr", "adj", "uj", "d", "y", "v", "off", "f", "o", "k", "jp"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n\\npublic class Main {\\n\tpublic static void main(String args[]) throws IOException{\\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n\t\tStringBuilder builder = new StringBuilder();\\n\t\tint i=1;\\n\t\twhile(true){\\n\t\t\tint data= Integer.parseInt(reader.readLine());\\n\t\t\tif(data==0)\\n\t\t\t\tbreak;\\n\t\t\t\\n\t\t\tbuilder.append(\"Case \").append(Integer.toString(i++)).append(\": \").append(Integer.toString(data)).append(\"\\n\");\\n\t\t}\\n\t\tSystem.out.print(builder);\\n\t}\\n}", "target": "97", "substitutes": {"reader": ["per", "rc", "io", "handler", "parser", "upper", "er", "ner", "loader", "worker", "rar", "r", "driver", "this", "report", "writer", "reading", "in", "rer", "input", "inner", "row", "iter", "bird", "read", "ri", "stream", "editor", "rr", "oder", "source", "Reader", "ler", "feed", "buffer"], "builder": ["handler", "address", "string", "base", "upper", "er", "result", "worker", "letter", "bean", "r", "txt", "driver", "holder", "this", "build", "b", "builders", "atter", "writer", "url", "keeper", "row", "iter", "instance", "object", "layer", "outer", "wrapper", "editor", "Builder", "or", "oder", "built", "block", "trace", "building", "str", "message", "api", "buffer", "runner", "info", "parser"], "i": ["xi", "I", "si", "n", "di", "p", "cli", "abi", "ii", "sup", "index", "j", "mini", "counter", "ini", "ind", "ai", "count", "in", "length", "phi", "multi", "li", "ci", "ti", "ri", "u", "bi", "x", "pi", "id", "ip", "uri", "ski", "api", "f", "ui", "info"], "data": ["missing", "number", "pos", "done", "value", "string", "n", "line", "result", "batch", "index", "valid", "length", "count", "input", "li", "error", "size", "ata", "no", "da", "num", "type", "next", "id", "function", "la", "d", "style", "val", "offset", "DATA", "api", "len", "buffer", "aa", "key", "div", "dat", "f", "ui", "info", "start", "pad"]}}
{"code": "import java.io.FileInputStream;\\nimport java.io.FileNotFoundException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.InputMismatchException;\\nimport java.util.List;\\n\\npublic class Main {\\n    InputStream is;\\n\\n    int __t__ = 1;\\n    int __f__ = 0;\\n    int __FILE_DEBUG_FLAG__ = __f__;\\n    String __DEBUG_FILE_NAME__ = \"src/E2\";\\n\\n    FastScanner in;\\n    PrintWriter out;\\n\\n    public void solve() {\\n        int n = in.nextInt(), q = in.nextInt();\\n        String s = in.next();\\n        int[] cnt = new int[n+1];\\n        for (int i = 0; i < n - 1; i++) {\\n            if (s.substring(i, i + 2).equals(\"AC\")) {\\n                cnt[i+2]++;\\n            }\\n        }\\n        for (int i = 0; i < n; i++) {\\n            cnt[i+1] += cnt[i];\\n        }\\n\\n        for (int i = 0; i < q; i++) {\\n            int l = in.nextInt(), r = in.nextInt();\\n            System.out.println(cnt[r] - cnt[l]);\\n        }\\n    }\\n\\n    public void run() {\\n        if (__FILE_DEBUG_FLAG__ == __t__) {\\n            try {\\n                is = new FileInputStream(__DEBUG_FILE_NAME__);\\n            } catch (FileNotFoundException e) {\\n                // TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f catch \u30d6\u30ed\u30c3\u30af\\n                e.printStackTrace();\\n            }\\n            System.out.println(\"FILE_INPUT!\");\\n        } else {\\n            is = System.in;\\n        }\\n        in = new FastScanner(is);\\n        out = new PrintWriter(System.out);\\n\\n        solve();\\n    }\\n\\n    public static void main(final String[] args) {\\n        new Main().run();\\n    }\\n\\n    class FastScanner {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n\\n        public FastScanner(InputStream stream) {\\n            this.stream = stream;\\n            // stream = new FileInputStream(new File(\"dec.in\"));\\n\\n        }\\n\\n        int read() {\\n            if (numChars == -1)\\n                throw new InputMismatchException();\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0)\\n                    return -1;\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        boolean isSpaceChar(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        boolean isEndline(int c) {\\n            return c == '\\n' || c == '\\r' || c == -1;\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        int[] nextIntArray(int n) {\\n            int[] array = new int[n];\\n            for (int i = 0; i < n; i++)\\n                array[i] = nextInt();\\n\\n            return array;\\n        }\\n\\n        int[][] nextIntMap(int n, int m) {\\n            int[][] map = new int[n][m];\\n            for (int i = 0; i < n; i++) {\\n                map[i] = in.nextIntArray(m);\\n            }\\n            return map;\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        long[] nextLongArray(int n) {\\n            long[] array = new long[n];\\n            for (int i = 0; i < n; i++)\\n                array[i] = nextLong();\\n\\n            return array;\\n        }\\n\\n        long[][] nextLongMap(int n, int m) {\\n            long[][] map = new long[n][m];\\n            for (int i = 0; i < n; i++) {\\n                map[i] = in.nextLongArray(m);\\n            }\\n            return map;\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        double[] nextDoubleArray(int n) {\\n            double[] array = new double[n];\\n            for (int i = 0; i < n; i++)\\n                array[i] = nextDouble();\\n\\n            return array;\\n        }\\n\\n        double[][] nextDoubleMap(int n, int m) {\\n            double[][] map = new double[n][m];\\n            for (int i = 0; i < n; i++) {\\n                map[i] = in.nextDoubleArray(m);\\n            }\\n            return map;\\n        }\\n\\n        String next() {\\n            int c = read();\\n            while (isSpaceChar(c))\\n                c = read();\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        String[] nextStringArray(int n) {\\n            String[] array = new String[n];\\n            for (int i = 0; i < n; i++)\\n                array[i] = next();\\n\\n            return array;\\n        }\\n\\n        String nextLine() {\\n            int c = read();\\n            while (isEndline(c))\\n                c = read();\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = read();\\n            } while (!isEndline(c));\\n            return res.toString();\\n        }\\n    }\\n}\\n", "target": "52", "substitutes": {"is": ["IS", "ios", "get", "css", "ar", "isa", "oss", "ais", "p", "isu", "ii", "serv", "ois", "os", "sis", "ib", "ls", "ins", "ai", "iss", "inner", "ss", "ci", "iris", "its", "lis", "nis", "ris", "ri", "init", "it", "x", "bis", "or", "ip", "was", "ps", "iso", "isin", "Is", "as", "ise", "mis", "info", "has"], "__t__": [" __t___", "__d___", " __f____", "__t____", "__tf___", "__d____", "__p___", "__t___", "__d__", "__p__", "__tf____", "__tf__", "__f___", "__f____", " __f___", " __t____"], "__f__": ["__rf__", " __t___", "__F___", "__l__", "__rf____", "__rf_____", "__file__", " __f____", "__t____", "__l___", "__F__", "__t___", "__l_____", "__t_____", "__f_____", " __t_____", "__rf___", "__file___", "__f___", "__l____", "__f____", " __f_____", " __f___", " __t____"], "__FILE_DEBUG_FLAG__": ["__FILE_DEBUG_PORT___", "__FILE_DEBUG_BIT__", "__FILE_DEBUG_PORT____", "__FILE_DEBUG_FLAG____", "__FILE_DEBUG_PORT__", "__FILE_DEBUG_BIT___", "__FILE_DEBUG_BIT____", "__FILE_DEBUG_FLAG___", "__FILE_DEBUG_PL__", "__FILE_DEBUG_PL___", "__FILE_DEBUG_PL____"], "__DEBUG_FILE_NAME__": ["__DEBUG_FILEPName_", "__DEBUG_FILE_PATH_", "__DEBUG_FILE_NAME____", "__DEBUG_FILE_PATH____", "__DEBUG_FILEPName__", "__DEBUG_FILE_Name_", "__DEBUG_FILEPName___", "__DEBUG_FILERENAME____", "__DEBUG_FILE_DATA__", "__DEBUG_FILE_PATH__", "__DEBUG_FILE_name____", "__DEBUG_FILE_Name___", "__DEBUG_FILEPNAME_", "__DEBUG_FILE_name_", "__DEBUG_FILE_name___", "__DEBUG_FILEREname__", "__DEBUG_FILE_Name__", "__DEBUG_FILE_NAME_", "__DEBUG_FILEPNAME___", "__DEBUG_FILERENAME__", "__DEBUG_FILE_PATH___", "__DEBUG_FILEREname____", "__DEBUG_FILE_DATA____", "__DEBUG_FILE_NAME___", "__DEBUG_FILE_name__", "__DEBUG_FILEPNAME__"], "in": ["din", "pin", "the", "get", "re", "err", "In", "gen", "bin", "line", "ic", "socket", "serv", "inn", "this", "resource", "thin", "inside", "ins", "rin", "image", "input", "inner", "kin", "rec", "by", "data", "sin", "win", "vin", "min", "init", "it", "bis", "lin", "source", "id", "inc", "gin", "again", "login", "isin", "scan", "arin", "reader", "IN", "con"], "out": ["Out", "dump", "list", "file", "io", "w", "client", "err", "png", "cmd", "name", "screen", "line", "output", "write", "query", "user", "log", "outs", "report", "bar", "writer", "conf", "error", "obj", "cache", "println", "page", "lock", "point", "sys", "init", "conn", "print", "str", "OUT", "again", "v", "console", "buffer", "ex", "server", "o"], "n": ["nu", "network", "a", "w", "p", "nb", "nt", "m", "on", "cn", "ne", "j", "t", "z", "sn", "b", "N", "nn", "ns", "u", "en", "c", "e", "x", "h", "dn", "d", "y", "v", "nc", "f", "o", "net", "k"], "q": ["qs", "w", "p", "query", "m", "j", "t", "z", "sq", "b", "Q", "qu", "count", "inf", "qi", "u", "c", "e", "x", "h", "id", "d", "qt", "y", "v", "f", "o", "g", "k"], "s": ["qs", "w", "ms", "si", "string", "rs", "p", "m", "os", "sets", "t", "sl", "abs", "b", "ls", "ins", "ss", "ws", "u", "c", "e", "ses", "su", "S", "ps", "str", "v", "f", "services", "o", "features", "sb", "g", "strings", "spec"], "cnt": ["ecnt", "pnt", "Cnt", "cnot", "ecrt", "pnot", " cant", "rcNT", "ecNT", "cnn", "lcrt", "pnc", "cct", "Cno", "scno", "ucNT", "Cnc", "Cnot", "cint", "crrt", "lcnot", "cno", "Cant", "crnt", "ecnot", "CNT", " cnd", "cnd", "scant", " cNT", " cint", "pnd", "rcnt", "ucnt", " cno", "lcnd", "ucct", "scnt", "Cct", "Cnn", "cnc", " cct", "rcint", " crt", " cnot", "crNT", "cant", "Cint", " cnn", "crt", "cNT", "scrt", "lcnt", "ucnn", "crnc", "pNT", "Crt", "rcrt", "prt"], "i": ["xi", "gi", "I", "io", "err", "si", "di", "ie", "ami", "p", "oi", "cli", "ii", "hi", "chi", "j", "index", "ni", "z", "mini", "ini", "b", "ai", "phi", "multi", "inner", "li", "ti", "ci", "ir", "ji", "zi", "ri", "qi", "u", "bi", "c", "e", "init", "iu", "it", "eni", "mi", "pi", "x", "yi", "fi", "h", "id", "ip", "uri", "y", "v", "ix", "slice", "vi", "o", "ui", "info", "start"], "l": ["il", "p", "j", "ln", "z", "sl", "b", "lc", "li", "el", "rl", "L", "u", "en", "c", "e", "h", "kl", "d", "ll", "dl", "v", "ol", "len", "f", "nl", "o", "k"], "r": ["nr", "rc", "re", "w", "br", "err", "ar", "p", "er", "yr", "m", "j", "z", "b", "reb", "R", "ir", "range", "fr", "rl", "u", "c", "e", "h", "rr", "pr", "ru", "d", "v", "hr", "f", "o", "ur", "k", "rb"]}}
{"code": "\\nimport java.math.BigDecimal;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int w = s.nextInt();\\n        int h = s.nextInt();\\n        int x = s.nextInt();\\n        int y = s.nextInt();\\n        BigDecimal b = (new BigDecimal(w).multiply(new BigDecimal(h))).divide(new BigDecimal(2),6,BigDecimal.ROUND_HALF_UP);\\n        System.out.println(b.toPlainString()+\" \"+((x+x==w&&y+y==h) ? \"1\":\"0\"));\\n    }\\n}\\n", "target": "182", "substitutes": {"s": ["fs", "a", "qs", "is", "obs", "si", "n", "parser", "sf", "rs", "p", "er", "m", "http", "r", "utils", "t", "south", "sl", "abs", "js", "ls", "ds", "ins", "in", "lines", "ss", "ws", "stats", "its", "fts", "ns", "se", "sys", "l", "u", "c", "ses", "e", "out", "bis", "ts", "words", "states", "S", "d", "ssl", "es", "f", "as", "us", "features", "sb", "ans", "i", "strings"], "w": ["a", "wx", "sw", "ww", "n", "ew", "p", "wd", "m", "width", "wa", "r", "wh", "t", "z", "W", "ws", "size", "win", "q", "l", "u", "c", "e", "we", "d", "v", "f", "k", "o", "sh", "hw", "wall", "i", "fw", "wt"], "h": ["th", "hs", "ht", "height", "n", "p", "m", "hi", "j", "r", "t", "z", "work", "hm", "in", "length", "H", "q", "l", "u", "c", "e", "rh", "ph", "oh", "d", "v", "hh", "f", "o", "sh", "gh", "i", "k"], "x": ["a", "xi", "wx", "ww", "n", "dy", "p", "m", "on", "hi", "width", "index", "j", "t", "z", "xy", "rx", "ax", "l", "u", "c", "e", "ey", "X", "dx", "xx", "d", "ix", "v", "ex", "f", "o", "i", "k"], "y": ["a", "ch", "ny", "n", "dy", "p", "ay", "m", "j", "vy", "r", "t", "oy", "z", "ish", "yy", "ya", "Y", "q", "l", "py", "u", "c", "ey", "ty", "d", "ry", "v", "f", "o", "sy", "cy", "g", "i", "k"], "b": ["a", "n", "base", "bb", "p", "nb", "bd", "m", "r", "this", "ab", "pb", "bc", "ba", "ob", "B", "l", "c", "e", "fb", "binary", "body", "d", "db", "v", "buffer", "f", "sb", "g", "orb", "cb", "i", "k", "rb"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint n = Integer.parseInt(br.readLine());\\n\t\tString[] strs = br.readLine().split(\" \");\\n\t\tint[] inputData = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tinputData[i] = Integer.parseInt(strs[i]);\\n\t\t}\\n\t\tint swapCnt = bubbleSort(inputData, n);\\n\t\tprintArray(inputData);\\n\t\tSystem.out.println(swapCnt);\\n\\n\t}\\n\\n\tpublic static int bubbleSort(int[] A, int N) {\\n\t\tint swapCnt = 0;\\n\t\tboolean flag = true;\\n\t\twhile (flag) {\\n\t\t\tflag = false;\\n\t\t\tfor (int i = N - 1; i > 0; i--) {\\n\t\t\t\tif (A[i] < A[i - 1] ) {\\n\t\t\t\t\tint temp = A[i];\\n\t\t\t\t\tA[i] = A[i - 1];\\n\t\t\t\t\tA[i - 1] = temp;\\n\t\t\t\t\tswapCnt++;\\n\t\t\t\t\tflag = true;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\treturn swapCnt;\\n\t}\\n\\n\tpublic static void printArray(int[] target) {\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tfor (int i = 0; i < target.length; i++) {\\n\t\t\tsb.append(target[i]);\\n\t\t\tif (i < target.length - 1) {\\n\t\t\t\tsb.append(\" \");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sb.toString());\\n\t}\\n}", "target": "170", "substitutes": {"br": ["res", "io", "err", "Br", "img", "brush", "ref", "tr", "sr", "er", "buf", "yr", "ner", "BR", "bm", "http", "r", "browser", "jar", "cr", "arr", "b", "dr", "bar", "gr", "bc", "keeper", "obj", "data", "mr", "her", "fr", "HR", "src", "bs", "ber", "bridge", "wr", "bro", "ler", "bh", "str", "hr", "bf", "sp", "orb", "reader", "bl", "rb"], "n": ["network", "number", "w", "Ns", "p", "nb", "m", "nt", "cn", "ne", "j", "mn", "t", "z", "ni", "sn", "b", "count", "nn", "no", "size", "ns", "l", "u", "num", "en", "fn", "c", "conn", "x", "h", "dn", "d", "y", "v", "len", "nc", "f", "nl", "o", "net", "k"], "strs": ["Strs", "signs", " stri", "strps", "Strlines", "STRlines", "stri", "inputs", "STRs", "signi", "signS", "inputS", "StrS", "STRps", "Strings", "strS", "strlines", "signings", " strps", "inputings", " strlines", "inputi", "Strps", "STRi", "strings", "Stri"], "inputData": ["entryString", "batchList", "pullList", " inputArray", "contextString", "pullDATA", "InputBuffer", "outputData", "pullData", "rawData", "inputBuffer", " inputDATA", "outputString", "entryDATA", "inputDATA", "rawdata", " inputdata", "intdata", "batchdata", " inputString", "Inputdata", "contextData", "inputInfo", "intDATA", "InputData", "outputInfo", "requestInfo", "rawBuffer", "intList", "inputArray", "entryDat", "requestString", "batchData", "pulldata", "entryData", "contextDATA", "outputArray", "requestArray", "inputString", "inputCount", "intData", "inputList", " inputBuffer", "contextDat", " inputDat", " inputCount", "InputCount", "rawCount", " inputInfo", "requestData", "inputdata", "batchDATA", "inputDat"], "i": ["xi", "gi", "a", "I", "io", "si", "di", "ie", "p", "ic", "oi", "cli", "abi", "ii", "hi", "chi", "j", "index", "ni", "z", "mini", "ini", "mu", "b", "ai", "phi", "ji", "multi", "li", "ci", "ti", "inner", "ik", "zi", "ri", "qi", "u", "bi", "l", "c", "e", "init", "iu", "it", "my", "mi", "x", "pi", "fi", "id", "ip", "uri", "y", "v", "api", "ix", "slice", "vi", "anti", "uni", "f", "ui", "o", "info"], "swapCnt": ["swAPAcnt", "swappingWount", "swappingCnt", "swrapCct", "swrapWcount", "swapFct", "swappingCNT", "swrapCcount", "swappingCct", "swAPCount", "swapCNT", "swapAcCount", "swrapAcount", "swapCcount", "swapAcct", "swrapCpt", "swapcnt", "swAPCnt", "swapRcount", "swapAcpt", "swrapWount", "swapcct", "swapWount", "swrapCnt", "swrapAcNT", "swapFcount", "swapRct", "swapCn", "swapFn", "swapAcn", "swrapAcnt", "swAPCct", "swapAccount", "swapAcNT", "swrapCount", "swrapCNT", "swappingWnt", "swapWn", "swapRnt", "swapWct", "swapCount", "swapAcount", "swrapCCount", "swrapWct", "swapFNT", "swappingCount", "swAPAcct", "swapCct", "swAPCn", "swapCCount", "swapcCount", "swapCpt", "swapWNT", "swapRount", "swapRCount", "swappingWNT", "swAPAcn", "swapccount", "swapWnt", "swAPAcount", "swapFnt", "swappingWct", "swrapAcCount", "swrapAccount", "swapcount", "swapWpt", "swrapWnt", "swrapAcpt", "swapWcount", "swapFpt", "swapRNT", "swapFount", "swapAcnt"], "A": ["O", "API", "a", "U", "E", "I", "This", "Alpha", "K", "As", "In", "C", "T", "alpha", "Array", "LA", "G", "AA", "W", "D", "H", "Y", "NA", "B", "L", "Each", "Single", "Average", "Total", "MA", "M", "Args", "X", "Area", "Ar", "Input", "Ma", "mA", "The", "S", "P", "F", "And", "V", "AP", "At", "An", "Answer", "CA"], "N": ["O", "K", "E", "I", "Ns", "Len", "C", "T", "Ni", "J", "NT", "W", "Q", "Size", "R", "D", "H", "Y", "B", "Z", "Num", "L", "M", "X", "S", "P", "F", "Node", "V", "NS", "NL", "Number"], "flag": [" pig", "list", "force", "status", " flagged", " bool", " debug", " field", "true", " bit", "fun", "event", "wait", "part", " continue", "feature", "debug", "valid", "sync", " filter", "ish", " flags", "func", " count", "ind", "start", "count", " type", "kind", "wave", "disabled", " bug", " weight", "bool", "bug", " fun", "fl", "init", " leaf", "af", "and", "FLAG", "bit", " bias", "ag", " status", "band", "leaf", "bag", "want", "field", "lag", "offset", " alt", "Flag", "safety", "const", " lag", "f", "key", "spin", " error", "flags", "mask"], "temp": ["test", "w", "err", "base", "p", "wrap", "diff", "tc", "wait", "flow", "fake", "mini", "z", "empty", "partial", "max", "emp", "cel", "input", "now", "level", "size", "pack", "min", "extra", "c", "init", "tmp", "area", "source", "dev", "id", "ip", "inc", "offset", "dc", "v", "clean", "ex", "Temp", "iter", "cut", "pad"], "target": ["number", "token", "force", "compatible", "parent", "weight", "address", "value", "arg", "string", "output", "event", "template", "result", "route", "width", "service", "dest", "gap", "default", "null", "resource", "view", "response", "Target", "transform", "input", "reference", "match", "data", "total", " Target", "object", "range", "large", "component", "goal", "size", "expected", "date", "other", "blank", "type", "text", "master", "source", "content", "path", "message", "shape", "current", "wrong", "host", "array", "project", "remote", "tag"], "sb": ["bj", "xb", "bash", " SB", "si", "bb", "sf", "gb", "buf", "nb", "lb", "bm", "eb", "sth", "zb", "SB", "bg", "sa", "wb", "abb", "bp", "sv", "sq", "ab", "ib", "b", "ls", "pb", "lab", "bc", "sg", "bsp", "ub", "amb", "mb", "fb", "src", "bs", "su", "bt", "usb", "ff", "obb", "sm", "kb", "bh", "db", "bf", "BB", "orb", "ruby", "cb", "rb"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\npublic class Main{\\npublic static void main (String[] args){\\n\tScanner sc = new Scanner(System.in);\\n\tint n = sc.nextInt();\\n\tint k = sc.nextInt();\\n\tString s = sc.next();\\n\t\\n\tfor(int i = 0; i < n; i++){\\n\t\tif(i != k-1){\\n\t\t\tSystem.out.printf(s.substring(i,i+1));\\n\t\t}else{\\n\t\t\tSystem.out.printf(s.substring(i,i+1).toLowerCase());\\n\t\t}\\n\t}\\n}\\n}\\n", "target": "71", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "search", "cor", "ca", "cer", "sr", "cc", "ner", "tc", "sync", "cr", "osc", "sq", "ec", "lc", "cont", "bc", "sci", "ss", "ws", "ci", "cus", "scope", "se", "cers", "c", "Sc", "asc", "sche", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "SC"], "n": ["w", "p", "nb", "ner", "m", "nt", "j", "ln", "t", "ni", "z", "sn", "b", "N", "in", "nn", "ns", "l", "u", "en", "c", "num", "conn", "x", "h", "d", "y", "v", "nc", "f", "nl", "o", "net"], "k": ["K", "ks", "w", "p", "m", "j", "ki", "z", "sk", "work", "b", "ck", "in", "ke", "ku", "ik", "q", "l", "u", "c", "h", "x", "dk", "d", "y", "v", "kick", "key", "ok", "f"], "s": ["fs", "parts", "qs", "is", "params", "cs", "si", "string", "blocks", "aws", "p", "rs", "gs", "os", "sv", "abs", "ls", "ds", "ins", "in", "sg", "ss", "ws", "its", "ns", "l", "u", "c", "ses", "e", "bs", "su", "ts", "states", "S", "str", "v", "es", "f", "services", "sb", "ans", "strings"], "i": ["gi", "xi", "I", "io", "si", "di", "ami", "ie", "p", "oi", "ii", "hi", "index", "j", "chi", "ki", "ni", "z", "mini", "ini", "isi", "b", "ai", "inner", "multi", "ji", "li", "ti", "ci", "zi", "ri", "qi", "u", "bi", "e", "init", "iu", "eni", "ori", "pi", "x", "yi", "id", "ip", "uri", "d", "v", "ix", "slice", "anti", "f", "ui", "o"]}}
{"code": "import java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\t\t    Scanner sc = new Scanner(System.in);\\n\t\t\t    String s = sc.next();\\n\t\t\t    List<String> week = Arrays.asList(\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\");\\n\t\t\t    System.out.println(7 - week.indexOf(s));\\n\t\t\t    sc.close();\\n\t\t\t  }\\n\\n\t\t\t}\\n", "target": "136", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner scan = new Scanner(System.in);\\n        int a = scan.nextInt();\\n        int b = scan.nextInt();\\n        int c = scan.nextInt();\\n        int x = scan.nextInt();\\n        int count = 0;\\n        if(x%50!=0)\\n        {\\n            System.out.println(0);\\n            return;\\n        }\\n        \\n        for(int i=0;i<=a;i++)\\n        {\\n            for(int j=0;j<=b;j++)\\n            {\\n                for(int k=0;k<=c;k++)\\n                {\\n                    if(500*i+100*j+50*k==x)\\n                    {\\n                        count++;\\n                    }\\n                }\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}", "target": "127", "substitutes": {"scan": ["run", "pan", "chan", "pin", "search", "gen", "n", "ser", "parser", "sr", "er", "see", "connect", "query", "ner", "sc", "r", "sync", "south", "system", "an", "ann", "report", "fan", "in", "kin", "ban", "nn", "all", "sign", "san", "read", "bug", "se", "sys", "l", "join", "plan", "can", "out", " scanner", "cat", "ans", "look", "slice", "feed", "clean", "gener", "Scan", "walk", "watch", "ignore", "reader", "iter", "parse"], "a": ["fa", "ca", "n", "base", "p", "oa", "aaa", "ac", "alpha", "ada", "A", "sa", "ea", "an", "ab", "ai", "ae", "ba", "da", "aj", "u", "area", "am", "la", "asa", "y", "va", "api", "aa", "f", "as", "ama", "au", "ad"], "b": ["n", "p", "s", "lb", "nb", "eb", "r", "z", "ab", "pb", "bc", "ba", "ob", "B", "l", "u", "bi", "mb", "e", "fb", "bs", "h", "d", "y", "db", "v", "f", "o", "sb", "cb"], "c": ["w", "cs", "ca", "n", "p", "C", "s", "ac", "cc", "m", "sc", "r", "z", "lc", "ci", "q", "l", "u", "e", "h", "d", "y", "v", "uc", "f", "cu", "o", "cb"], "x": ["xi", "wx", "number", "w", "n", "code", "p", "ic", "m", "cross", "index", "fx", "t", "z", "max", "xc", "size", "q", "ax", "l", "u", "e", "h", "xs", "X", "dx", "xx", "id", "d", "y", "v", "ix", "xxx", "ex", "xp", "f", "o"], "count": ["test", "number", "list", "force", "parent", "weight", "err", "n", "code", "base", "p", "group", "cc", "low", "part", "index", "counter", "z", "work", "coll", "length", "more", "now", "match", "size", "total", "cache", "child", "other", "type", "limit", "process", "sum", "id", "depth", "left", "age", "offset", "check", "Count", "len", "f", "found", "second", "info", "call", "start"], "i": ["xi", "I", "is", "io", "si", "ie", "n", "di", "p", "m", "ii", "hi", "mini", "z", "ni", "ini", "ai", "in", "phi", "ji", "li", "ci", "ik", "l", "qi", "u", "bi", "e", "init", "iu", "mi", "pi", "yi", "id", "ip", "uri", "d", "y", "v", "ix", "api", "f", "ui"], "j": ["ch", "job", "ja", "ie", "jc", "n", "J", "p", "jo", "ii", "ij", "jet", "z", "js", "jj", "ji", "end", "li", "ci", "ik", "q", "l", "aj", "u", "oj", "e", "it", "pi", "h", "d", "je", "y", "v", "key", "f", "o", "jp"], "k": ["K", "kn", "kr", "ks", "ch", "w", "ak", "n", "p", "m", "uk", "ki", "z", "jj", "sk", "ek", "ck", "kk", "ke", "ky", "ik", "q", "ijk", "u", "dk", "kw", "id", "d", "kid", "y", "v", "key", "ko", "ok", "f", "o", "gh"]}}
{"code": "import java.util.ArrayDeque;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.LinkedList;\\nimport java.util.Map;\\nimport java.util.Queue;\\nimport java.util.Scanner;\\nimport java.util.Set;\\n\\npublic class Main {\\n\\n\tstatic Scanner sc = new Scanner(System.in);\\n\\n\tpublic static void main(String[] args){\\n\\n\t\tsolve_abc150_b();\\n\t}\\n  \\n  \tpublic static void solve_abc150_b(){\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint N = sc.nextInt();\\n\t\tString S = sc.next();\\n\t\tString keyword = \"ABC\";\\n\t\tint count = 0;\\n\t\t\\n\t\tfor(int i=0;i<N-(keyword.length()-1);i++){\\n\t\t\t\\n\t\t\tif(S.substring(i, i+keyword.length()).equals(keyword)){\\n\t\t\t\tcount++;\\n\t\t\t\ti += keyword.length() - 1;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(count);\\n\t\tsc.close();\\n\t\t\\n\t}\\n}", "target": "110", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "core", "ch", "cs", "search", "cer", "ctx", "cli", "cc", "ner", "loc", "sync", "system", "sq", "cr", "ec", "osc", "lc", "cont", "bc", "sci", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "dc", "mc", "scan", "nc", "uc", " Sc", "server", "sh", "sp", "sb", "parser", "SC", "spec"], "N": ["O", "K", "E", "I", "NG", "n", "C", "T", "Ni", "NT", "G", "NN", "Size", "Q", "R", "D", "H", "Y", "B", "Z", "L", "NM", "NI", "M", "X", "P", "F", "V", "Count", "NS", "NL", "MN", "Number", " n"], "S": ["O", "K", "U", "SE", "I", "IS", "SU", "C", "T", "SP", "INS", "SS", "s", "SK", "SN", "A", "G", "ESS", "W", "R", "SIGN", "OSS", "B", "L", "M", "SA", "X", "SI", "P", "F", "WS", "V", "NS", "SH", "SC"], "keyword": [" keystring", "Keywords", " keywd", "catchpoint", "raywords", "rayword", " keyletter", "KEYword", "Keykey", " keymbol", "cyword", "KEYwd", "catchword", "dayword", "rayward", " keyward", "KeyWord", "Keyward", "KEYWord", " keyterm", "keystring", "keyward", "bareWord", " keywords", "raykey", "Keypoint", "keyletter", "keykey", "keymbol", "Keystring", "cyward", "Keyterm", "catchwords", "KEYmbol", "cywords", "bareword", "keyterm", "cyWord", "Keyletter", " keykey", "keypoint", "keywd", "keywords", "barewd", "daywords", "barembol", " keypoint", "Keyword", "catchstring", " keyWord", "dayletter", "keyWord", "dayterm"], "count": ["test", "number", "list", "core", "weight", "score", "n", "code", "base", "name", "nt", "result", "handle", "index", "counter", "work", "b", "ind", "coll", "length", "now", "error", "size", "total", "child", "c", "type", "limit", "sum", "id", "depth", "left", "call", "age", "offset", "Count", "len", "key", "info", "found", "ignore", "start", "second", "check"], "i": ["gi", "a", "xi", "I", "io", "si", "di", "oi", "abi", "ii", "hi", "index", "j", "chi", "ni", "mini", "ini", "b", "ai", "in", "length", "inner", "multi", "phi", "li", "ci", "ti", "ji", "zi", "ri", "l", "u", "bi", "c", "qi", "e", "ori", "iu", "it", "eni", "mi", "x", "pi", "yi", "id", "ip", "uri", "v", "ix", "uni", "f", "ui", "o", "info", "start"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main {\\n\tpublic static void main(String args[]) throws IOException {\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tSolver solver = new Solver();\\n\t\tsolver.init();\\n\t\tsolver.readHead(in.readLine());\\n\t\tfor (; solver.hasNext();) {\\n\t\t\tsolver.readBody(in.readLine());\\n\t\t}\\n\t\tsolver.solve();\\n\t}\\n}\\n\\nclass Solver {\\n\tint N;\\n\tint cnt;\\n\\n\tpublic void init() {\\n\t\tN = 0;\\n\t\tcnt = 0;\\n\t}\\n\\n\tpublic void readHead(String str) {\\n\t\tString[] strArr = str.split(\" \");\\n\t\tN = Integer.parseInt(strArr[0]);\\n\t\t// System.out.println(N);\\n\t\tBtn = new int[N + 1];\\n\t}\\n\\n\tint[] Btn;\\n\\n\tpublic boolean hasNext() {\\n\t\treturn cnt < N;\\n\t}\\n\\n\tpublic void readBody(String str) {\\n\t\t// System.out.println(str);\\n\t\tcnt++;\\n\t\tBtn[cnt] = Integer.parseInt(str);\\n\t}\\n\\n\tpublic void solve() {\\n\t\t// for (int i = 1; i <= N; i++)\\n\t\t// System.out.println(Btn[i]);\\n\t\tint ans = 0;\\n\t\tfor (int b = 1; b != 2 && ans < N; b = Btn[b]) {\\n\t\t\tans++;\\n\t\t}\\n\t\tif (ans < N)\\n\t\t\tSystem.out.println(ans);\\n\t\telse\\n\t\t\tSystem.out.println(-1);\\n\t}\\n}\\n", "target": "175", "substitutes": {"in": ["a", "din", "re", "err", "In", "bin", "n", "arg", "name", "line", "er", "ic", "s", "cli", "socket", "log", "on", "r", "txt", "inn", "with", "cin", "ini", "b", "ins", "inside", "image", "input", "inner", "kin", "rec", "by", "data", "win", "min", "l", "c", "stream", "init", "out", "h", "lin", "source", "id", "inc", "d", "gin", "OUT", "again", "nin", "login", "isin", "ex", "as", "from", "reader", "i", "IN", "con"], "solver": ["ssolve", "opensoker", "nsector", "ssolution", "nsolution", "ansver", "ksolver", "unsolver", "ksolution", "ansolver", "ssoker", "opensolve", "solution", "opensector", "Solve", "ssolving", "Sector", "nsolve", "unsolution", "solving", "ssector", "Sver", "ssver", "ksoker", "unsolve", "Solution", "ansolution", "sver", "soker", "ssolver", "ksolve", "opensolution", "Solver", "unsector", "solve", "Solving", "ansolve", "sector", "nsolver", "opensolver"], "N": ["O", "K", "I", "NUM", "n", "Ns", "J", "C", "T", "Ni", "NT", "A", "SN", "G", "NN", "Q", "R", "NO", "D", "H", "Y", "NA", "Num", "Z", "L", "NM", "M", "X", "No", "NE", "S", "P", "F", "Node", "V", "NS", "Number", " n"], "cnt": ["Cnt", "lcnc", "lcnn", "Cnc", " cnc", "lcount", " count", "CNT", "count", " cNT", "cnc", "lcNT", "Count", " cnn", "cNT", "lcnt", "cnn", "Cnn"], "str": ["res", "w", "br", "char", "n", "string", "expr", "arg", "name", "p", "line", "er", "tr", "strip", "part", "r", "stri", "arr", "st", "input", "url", "obj", "Str", "data", "fr", "l", "c", "out", "text", "pr", "id", "path", "f", "STR", "temp", "i", "parse", "strings"], "strArr": ["strErp", "strArp", "strDerrs", "strErr", "strDerner", " strArner", " strArp", "strArner", " strARr", "strAttr", " strErw", "strARr", "strARw", "strAttp", " strArw", "strARrs", "strArw", " strArrs", "strAttw", "strErrs", "strDerp", " strARrs", "strARner", "strARp", " strARp", " strARner", " strErr", "strDerr", "strErw", " strErp", "strArrs", " strErrs", "strAttrs", "strErner"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tdouble a = sc.nextDouble();\\n\t\tdouble b = sc.nextDouble();\\n\t\tdouble c = sc.nextDouble();\\n\t\t\\n\t\tif(a/c<=b) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\t\\n\t}\\n\\n}\\n", "target": "246", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        // \u6a19\u6e96\u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\\n        Scanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n\\n        // N\u304c111\u306e\u500d\u6570\u3068\u306a\u308b\u307e\u30671\u3092\u8db3\u3057\u7d9a\u3051\u308b\\n        while (N % 111 != 0){\\n            N++;\\n        }\\n\\n        // \u5168\u3066\u306e\u6841\u306e\u6570\u304c\u7b49\u3057\u304f\u306a\u3063\u305fN\u3092\u6a19\u6e96\u51fa\u529b\\n        System.out.println(N);\\n\\n    }\\n\\n}", "target": "106", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\\n\tpublic static void main(String args[]) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint num = scan.nextInt();\\n\t\tint[] array = new int[num];\\n\t\tint count = 0;\\n\\n\t\tfor (int i = 0; i < num; i++) {\\n\t\t\tarray[i] = scan.nextInt();\\n\t\t\tif(isprime(array[i])) {\\n\t\t\t\tcount+=1;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\\n\t\tscan.close();\\n\t}\\n\\n\tprivate static boolean isprime(int x) {\\n\t\tif (x == 2) {\\n\t\t\treturn true;\\n\t\t}\\n\\n\t\tif (x < 2 || x % 2 == 0) {\\n\t\t\treturn false;\\n\t\t}\\n\t\tint i = 3;\\n\t\twhile (i <= Math.sqrt(x)) {\\n\t\t\tif (x % i == 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t\ti += 2;\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n}\\n", "target": "226", "substitutes": {"scan": ["run", "chan", "is", "io", "get", "search", "ser", "n", "er", "see", "connect", "query", "ner", "sc", "man", "na", "serv", "r", "pass", "ln", "sync", "system", "skip", "an", "ann", "in", "inner", "match", "nn", "row", "sin", "san", "read", "bug", "se", "sys", "inter", "plan", "can", "out", "or", "filter", " scanner", "cat", "ans", "ry", "clean", "server", "Scan", "spin", "watch", "ignore", "reader", "stat", "parser", "parse", "con"], "num": ["number", "comb", "col", "pos", "NUM", "um", "bin", "n", "mult", "name", "unit", "nb", "m", "batch", "part", "index", "loc", "ul", "zero", "b", "max", "in", "length", "end", "split", "multi", "no", "total", "all", "Num", "en", "init", "out", "sum", "id", "block", "inc", "offset", "len", "current", "div", "f", "dim", "temp", "con"], "array": ["expression", "a", "list", "number", "collection", "search", "value", "group", "section", "result", "Array", "app", "index", "counter", "arr", "sample", "pair", "view", "coll", "image", "ray", "book", "length", "order", "archive", "data", "row", "object", "instance", "range", "carry", "area", "database", "element", "function", "allow", "integer", "ignore", "record"], "count": ["test", "number", "list", "collection", "force", "parent", "core", "weight", "n", "code", "name", "p", "low", "part", "handle", "index", "counter", "work", "max", "coll", "conf", "length", "error", "size", "total", "data", "cache", "no", "child", "carry", "c", "type", "sum", "id", "depth", "offset", "check", "Count", "len", "key", "info", "ignore", "found", "start", "second", "col"], "i": ["xi", "gi", "I", "ei", "is", "io", "si", "ie", "di", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "ni", "ini", "mu", "lc", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "c", "l", "e", "iu", "it", "mi", "pi", "yi", "fi", "id", "ip", "uri", "y", "ix", "v", "slice", "vi", "f", "ui", "o", "temp"], "x": ["xi", "wx", "number", "px", "w", "xe", "n", "code", "p", "ic", "m", "fx", "index", "cross", "wa", "php", "t", "sync", "z", "one", "work", "b", "xxxx", "xy", "xc", "rx", "size", "wy", "ax", "l", "u", "c", "e", "xa", "xes", "xs", "X", "h", "tx", "python", "xx", "id", "dx", "d", "y", "ix", "v", "xxx", "ex", "xp", "f", "plus"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String needle = sc.nextLine().toLowerCase();\\n        int c = 0;\\n        while (sc.hasNextLine()) {\\n            String line = sc.nextLine();\\n            if (\"END_OF_TEXT\".equals(line)) {\\n                break;\\n            }\\n            String[] hashstack = line.split(\" \");\\n            for (int i = 0, l = hashstack.length; i < l; i++) {\\n                String s = hashstack[i];\\n                if (s.toLowerCase().equals(needle)) {\\n                    c++;\\n                }\\n            }\\n        }\\n        System.out.println(c);\\n    }\\n}", "target": "46", "substitutes": {"sc": ["pc", "esc", "rc", "ch", "core", "cur", "cs", "search", "ca", "sub", "cer", "sf", "cor", "sr", "ctx", "cc", "ner", "sec", "tc", "sync", "cr", "sl", "osc", "ec", "st", "lc", "bc", "sci", "ss", "ci", "cl", "scope", "se", "src", "Sc", "asc", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "needle": ["kindole", "oodole", "hipLE", "NeedLE", "kindles", "needles", "hiple", "kindle", "Needles", "Needle", "nobles", "Needl", "needler", "hiples", "needl", "needLE", "needole", "kindler", "oodles", "oodle", "oodler", "Needler", "Needole", "nobLE", "noble", "nobl", "hipl"], "c": ["pc", "fc", "rc", "cur", "cs", "oc", "n", "code", "jc", "p", "C", "ac", "sec", "cc", "loc", "counter", "cr", "b", "lc", "cf", "coll", "comment", "count", "bc", "ci", "toc", "cl", "u", "e", "x", "h", "unc", "ct", "d", "dc", "nc", "uc", "f", "cu", "cp", "o", "cy", "k", "col", "co"], "line": ["Line", "file", "inline", "cell", "LINE", "value", "string", "code", "word", "name", "section", "header", "log", "part", "letter", "le", "sl", "link", "frame", "entry", "lc", "lo", "comment", "lines", "url", "end", "cle", "error", "data", "row", "page", "out", "text", "next", "lin", "source", "block", "look", "style", "parse", "str", "message", "lf", "nl"], "hashstack": [" hashst", "blockpack", "blockStack", "hashpack", "ashstack", " hashline", " hashbase", "ashpack", " hasharray", "hashline", "sumarray", "blockbase", "sumstack", "sumst", "dictbase", "blockarray", "hasharray", " hashpack", "asharray", "blockstack", "dictStack", "blockline", "dictarray", "ashStack", " hashStack", "hashStack", "hashst", "dictstack", "ashst", "ashline", "sumStack", "hashbase"], "i": ["gi", "xi", "I", "is", "si", "n", "di", "p", "oi", "m", "ii", "hi", "index", "j", "t", "this", "ini", "b", "ai", "in", "length", "phi", "multi", "li", "ci", "ti", "ri", "u", "qi", "e", "it", "mi", "pi", "x", "id", "ip", "uri", "d", "y", "v", "ix", "shift", "f", "o", "ui"], "l": ["w", "n", "p", "pl", "j", "le", "ln", "z", "sl", "b", "lc", "ls", "length", "level", "li", "el", "cl", "L", "u", "lp", "fl", "e", "h", "lr", "kl", "d", "ll", "dl", "ell", "ol", "len", "lf", "f", "nl", "o", "bl"], "s": ["a", "less", "fs", "cs", "si", "n", "string", "p", "m", "os", "r", "sync", "sl", "js", "site", "b", "ls", "ss", "ns", "u", "e", "h", "id", "S", "d", "str", "v", "f", "o", "g", "conv", "strings", "k"]}}
{"code": "import java.util.*;\\nclass Main{\\n\tstatic Scanner s = new Scanner(System.in);\\n\tpublic static void main(String[] args) {\\n\t\tint in1,in2;\\n\t\twhile(true) {\\n\t\t\tin1 = Integer.parseInt(s.next());\\n\t\t\tin2 = Integer.parseInt(s.next());\\n\t\t\tif((in1|in2)==0)\\n\t\t\t\treturn;\\n\t\t\tif(in1<=in2)\\n\t\t\t\tSystem.out.printf(\"%d %d\\n\",in1,in2);\\n\t\t\telse\\n\t\t\t\tSystem.out.printf(\"%d %d\\n\",in2,in1);\\n\t\t}\\n\t}\\n}", "target": "72", "substitutes": {"s": ["a", "parts", "is", "i", "si", "n", "string", "sf", "ops", "p", "sym", "m", "gets", "http", "os", "r", "gs", "utils", "south", "sl", "js", "abs", "b", "ls", "tests", "in", "ss", "stats", "its", "fts", "ns", "se", "sys", "l", "u", "c", "stream", "ses", "e", "out", "or", "bis", "states", "S", "d", "ssl", "v", "f", "services", "as", "o", "features", "sb", "parser", "strings"], "in1": ["inc01", "int81", "inc3", "incone", "IN1", "inOne", "in01", " inOne", "inc1", "inc81", "int2", " in81", "in3", "int01", " in01", " in0", "IN3", "inone", "inc0", "incOne", "in0", "INone", "int0", " inone", "int1", " in3", "intOne", "in81", "INOne", "int3", "inc2"], "in2": ["intTwo", " in02", "con002", "isin1", "iniTwo", "consecond", "ini02", "inc1", "int2", "inisecond", "in002", " intwo", "vin002", "contwo", "inTwo", " inTwo", "insecond", "isin2", "ins2", "in02", "ins4", "intsecond", " insecond", "ini2", "inttwo", "vinsecond", "in4", "con2", "int4", " in002", "ins02", "isintwo", "int02", "inctwo", "intwo", "vintwo", "instwo", " in4", "vin2", "inc2"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\t\\n\t\tboolean flag = false;\\n\t\tfor(int i = 0; i < s.length(); i++) {\\n\t\t\tif (s.equals(t)){\\n\t\t\t\tflag = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tCharacter c = s.charAt(0);\\n\t\t\ts = s.substring(1, s.length()) + c;\\n\t\t}\\n\t\t\\n\t\tif(flag) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t}\\n\\n}\\n", "target": "220", "substitutes": {"sc": ["pc", "rc", "ch", "cur", "cs", "ca", "sub", "cer", "sf", "cor", "sr", "cc", "ner", "sync", "osc", "cr", "ec", "system", "lc", "bc", "sci", "ss", "cl", "scope", "se", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "SC"], "s": ["a", "parts", "qs", "styles", "is", "cs", "si", "n", "string", "sf", "p", "gs", "os", "sets", "sv", "sl", "js", "abs", "site", "ls", "b", "tests", "ds", "ins", "in", "sg", "ss", "ws", "sin", "ns", "se", "l", "u", "sys", "ses", "e", "su", "ts", "xs", "single", "words", "source", "S", "d", "ssl", "ps", "es", "f", "services", "as", "o", "sb", "g", "strings"], "t": ["token", "the", "at", "n", "string", "target", "tr", "p", "T", "r", "txt", "te", "j", "z", "st", "b", "tt", "l", "u", "e", "type", "x", "ts", "h", "text", "ta", "ty", "rt", "d", "y", "v", "tf", "f", "g", "wt"], "i": ["xi", "gi", "I", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "index", "chi", "j", "ni", "z", "ini", "mu", "b", "ai", "in", "count", "multi", "li", "ci", "ti", "zi", "qi", "u", "bi", "iu", "x", "pi", "h", "id", "d", "v", "ix", "f", "o", "ui", "k"], "c": ["a", "esc", "rc", "ch", "cs", "ca", "char", "p", "C", "cc", "ac", "cd", "enc", "r", "vc", "cr", "ec", "lc", "cf", "xc", "ci", "l", "u", "e", "ce", "unc", "ct", "d", "v", "dc", "nc", "uc", "f", "cu", "cy", "g", "col"], "flag": ["file", "focus", "force", "status", "err", "char", "string", "code", "arg", "fun", "group", "car", "log", "wait", "part", "debug", "valid", "fail", "sync", "ish", "bad", "start", "count", "kind", "error", "wave", "sign", "agg", "bool", "bug", "init", "fb", "af", "type", "FLAG", "filter", "fi", "ag", "bit", "die", "band", "leaf", "id", "bag", "style", "field", "continue", "lag", "offset", "len", "like", "Flag", "key", "ret", "f", "fd", "flags", "tag"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString n = sc.next();\\n\t\t\\n\t\tint sum = 0;\\n\t\tfor (int i = 0; i < n.length(); i++) {\\n\t\t\tint num = Integer.valueOf(n.substring(i, i + 1));\\n\t\t\tsum += num;\\n\t\t}\\n\t\t\\n\t\tString ans = sum % 9 == 0 ? \"Yes\" : \"No\";\\n\t\tSystem.out.println(ans);\\n\t\t\\n\t\tsc.close();\\n\t}\\n\\n}\\n\\n\\n", "target": "93", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ca", "sub", "cer", "cc", "ner", "sec", "na", "pl", "sync", "osc", "cr", "ec", "sq", "sl", "lc", "st", "bc", "sci", "ss", "cl", "scope", "se", "c", "Sc", "sem", "sch", "dc", "mc", "scan", "nc", "uc", "anc", "sh", "sp", "sb", "g", "SC"], "n": ["nu", "network", "non", "p", "s", "nt", "m", "cn", "na", "enc", "ne", "nan", "ln", "t", "an", "sn", "ann", "b", "N", "in", "rn", "nn", "ns", "not", "l", "u", "en", "c", "fn", "e", "conn", "dn", "nw", "d", "un", "v", "nc", "f", "o", "nl", "net", "gn", "inn"], "sum": ["span", "fill", "weight", "pos", "um", "si", "name", "alpha", "average", "index", "ul", "sa", "Sum", "skip", "an", "mass", "max", "conf", "in", "count", "av", "mean", "ss", "match", "size", "total", "miss", "sign", "min", "sam", "se", "u", "tu", "scale", "offset", "spread", "len", "vol", "sim", "fat", "up", "info", "mem", "gram", "cal"], "i": ["xi", "gi", "I", "io", "pos", "si", "di", "ie", "name", "p", "oi", "ii", "hi", "part", "index", "j", "chi", "r", "ni", "ini", "mu", "b", "ind", "ai", "in", "ji", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "c", "bi", "it", "eni", "mi", "x", "pi", "h", "id", "ip", "uri", "d", "ix", "key", "shift", "f", "ui", "start"], "num": ["nu", "number", "parent", "NUM", "pos", "um", "bin", "gen", "unit", "umi", "mom", "index", "loc", "ul", "digit", "ni", "mu", "b", "mon", "data", "no", "miss", "Num", "node", "u", "en", "text", "nam", "id", "cat", "nom", "inc", "un", "uni", "off", "f", "us", "net", "info", "iter", "col", "cal"], "ans": ["a", "chan", "span", "vals", "annis", "ks", "ants", "cs", "AN", "lan", "ings", "ops", "anon", "annot", "amps", "na", "ents", "nan", "ANS", "ln", "ana", "an", "ann", "ls", "ars", "ins", "ban", "ss", "atan", "nn", "san", "ns", "anners", "plan", "can", "ain", "ats", "aus", "ions", "aned", "scan", "ons", "anc", "nas"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint N = scan.nextInt();\\n\t\tint K = scan.nextInt();\\n\\n\t\tString sn = Integer.toString(N,K);\\n\t\tSystem.out.println(sn.length());\\n\\n\\n\t}\\n}", "target": "219", "substitutes": {"scan": ["run", "pin", "gen", "search", "n", "see", "connect", "car", "query", "ner", "sc", "man", "na", "serv", "r", "ln", "sync", "skip", "south", "an", "ann", "fan", "in", "match", "nn", "all", "row", "san", "pack", "read", "bug", "se", "sys", "en", "can", "out", "cat", "look", "clean", "server", "Scan", "walk", "watch", "ignore", "ans", "iter", "parse", "gram", "con"], "N": ["O", "U", "I", "NR", "Na", "n", "Ns", "Len", "C", "T", "Ni", "NT", "A", "SN", "NH", "CN", "NN", "Q", "Size", "R", "D", "H", "Y", "NA", "Z", "L", "M", "NC", "X", "No", "S", "P", "F", "CNN", "V", "NS", " n"], "K": ["U", "E", "KR", "AK", "J", "Sk", "T", "CL", "KB", "SK", "NB", "Kent", "Q", "R", "D", "H", "Y", "KK", "Mask", "Z", " k", "L", "KE", "M", "PK", "KS", "X", "HK", "S", "P", "V", "KN", "NK", "k"], "sn": ["nu", "bn", "kn", "number", "sw", "si", "n", "string", "wn", "name", "sen", "sr", "s", "nb", "cn", "sc", "SN", "ln", "sync", "sv", "sl", "sk", "NN", "ls", "ann", "ss", " SN", "nn", "Str", "ns", "syn", "num", "fn", " Sn", "fl", "su", "dn", "str", "Sn", "nc", "nl", "gn", "inn"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tInputStream in = System.in;\\n\tPrintStream out = System.out;\\n\\n\tpublic void _main(String[] args) {\\n\t\tScanner sc = new Scanner(in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tint[][] A = new int[2][N];\\n\t\tA[0] = nextIntArray(sc, N);\\n\t\tA[1] = nextIntArray(sc, N);\\n\\n\t\tsc.close();\\n\\n\t\tint[][] dp = new int[2][N];\\n\t\tdp[0][0] = A[0][0];\\n\t\tdp[1][0] = dp[0][0] + A[1][0];\\n\\n\t\tfor (int i = 1; i < N; i++) {\\n\t\t\tdp[0][i] = dp[0][i - 1] + A[0][i];\\n\t\t\tdp[1][i] = Math.max(dp[0][i], dp[1][i - 1]) + A[1][i];\\n\t\t}\\n\\n\t\tout.println(dp[1][N - 1]);\\n\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main()._main(args);\\n\t}\\n\\n\t@SuppressWarnings(\"unused\")\\n\tprivate int[] nextIntArray(Scanner sc, int n) {\\n\t\tint[] result = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tresult[i] = sc.nextInt();\\n\t\t}\\n\t\treturn result;\\n\t}\\n}\\n", "target": "140", "substitutes": {"in": ["a", "exec", "din", "rc", "is", "io", "err", "In", "bin", "arg", "name", "line", "cli", "ac", "log", "r", "inn", "ini", "b", "ins", "ai", "inf", "input", "inner", "image", "error", "data", "min", "read", "cl", "c", "stream", "init", "src", "lin", "source", "inc", "path", "buffer", "scan", "ex", "f", "as", "info", "reader", "IN", "con"], "out": ["Out", "exec", "list", "file", "table", "io", "w", "ch", "client", "err", "cmd", "bin", "string", "name", "p", "line", "output", "exit", "user", "log", "outs", "report", "writer", "error", "no", "obj", "object", "println", "cache", "lock", "point", "conn", "can", "print", "source", "sum", "inc", "str", "OUT", "off", "buffer", "ex", "server", "to", "o", "up", "temp", "view", "IN"], "sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "cs", "ca", "cor", "cer", "si", "screen", "sr", "ctx", "set", "cam", "cc", "ner", "cli", "exp", "enc", "loc", "this", "cr", "system", "osc", "sq", "ec", "lc", "cont", "ck", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "ct", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC", "scene", "co"], "N": ["O", "K", "Part", "I", "E", "U", "NG", "II", "Na", "Ns", "Len", "C", "T", "Ni", "J", "Length", "NT", "Ne", "NB", "Max", "W", "NN", "Q", "Size", "R", "D", "H", "Y", "NA", "Z", "B", "Num", "L", "M", "NC", "X", "No", "NE", "S", "P", "F", "Node", "V", "Count", "NS", "Number"], "A": ["a", "API", "Alpha", "U", "E", "I", "K", "ap", "This", "HA", "As", "Ab", "AU", "Any", "AF", "AB", "p", "C", "T", "Ca", "alpha", "AM", "Array", "Auth", "PA", "G", "AA", "LA", "KA", "AI", "W", "IA", "AS", "D", "H", "Y", "Ha", "NA", "B", "L", "MA", "M", "SA", "Az", "X", "AD", "Ar", "Ma", "AR", "BA", "S", "P", "F", "Ad", "App", "AL", "And", "V", "AV", "AP", "array", "Am", "At", "An", "CA"], "dp": ["gp", "pkg", "adr", "di", "pair", "ep", "mp", "dm", "D", "data", "dh", "pa", "tp", "pi", "dl", "cp", " p", "price", "vp", "direction", "p", "cd", "bp", "config", "pb", "port", "manager", "src", "hp", "wp", "ip", "P", "pp", "hr", "beta", "dat", "sp", "pm", "params", "dist", "alpha", "fp", "sup", "gap", "proxy", "du", "deb", "c", "projects", "dep", "dc", "api", "div", "dim", "project", "a", "parent", "xd", "address", "ga", "target", "wd", "channel", "qa", "dt", "dr", "ds", "df", "lp", "DI", "pg", "d", "DP", "db", "up"], "i": ["a", "xi", "gi", "list", "I", "io", "si", "ie", "di", "p", "oi", "cli", "ii", "hi", "chi", "j", "index", "ki", "ni", "z", "mini", "ini", "b", "ai", "phi", "ji", "li", "ti", "ci", "ri", "qi", "u", "bi", "e", "ori", "iu", "it", "mi", "x", "pi", "fi", "id", "ip", "uri", "y", "v", "ix", "api", "key", "f", "ui", "o", "g", "info", "start", "k"], "n": ["a", "network", "w", "nat", "Ns", "name", "p", "nb", "s", "m", "ii", "ne", "j", "t", "z", "sn", "b", "max", "count", "nn", "size", "ns", "l", "u", "en", "c", "num", "x", "y", "v", "len", "nc", "f", "o", "g", "net", "k", "inn"], "result": ["res", "results", "list", "number", "weight", "err", "true", "search", "target", "member", "value", "answer", "event", "feature", "product", "index", "default", "config", "view", "response", "length", "df", "comment", "input", "order", "end", "dict", "match", "data", "use", "total", "object", "range", "account", "page", "date", "success", "profile", "Result", "filter", "master", "sum", "function", "id", "count", "val", "root", "card", "key", "ret", "up", "features", "array", "found"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tfinal String[] abc = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\\n\t\tint[] cnt = new int[abc.length];\\n\t\t\\n\t\twhile(sc.hasNext()){\\n\t\t\tString[] text = sc.nextLine().split(\"\");\\n\t\t\t\\n\t\t\tfor(int i=0; i<text.length; i++){\\n\t\t\t\tfor(int j=0; j<abc.length; j++){\\n\t\t\t\t\tif(text[i].equals(abc[j]) || text[i].equals(abc[j].toUpperCase())){\\n\t\t\t\t\t\tcnt[j]++;\\n\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor(int j=0; j<abc.length; j++){\\n\t\t\tSystem.out.println(abc[j] + \" : \" + cnt[j]);\\n\t\t}\\n\t}\\n\\n}", "target": "242", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cur", "cs", "search", "sub", "sf", "sr", "cc", "ner", "system", "sl", "cr", "osc", "ec", "lc", "st", " scr", "bc", "sci", "ss", "cl", "scope", "se", "c", "stream", "src", "isc", "Sc", "asc", "out", "cv", " SC", "scan", "nc", " Sc", "f", "uc", "anc", "sh", "sp", "server", "SC", "con", "spec"], "abc": ["esc", "fc", "exc", "rc", "acl", "except", "oc", "ic", "border", "aaa", "ac", "alpha", "acc", "cross", "loc", "auc", "irc", "contract", "txt", "icc", "abs", "ab", "ec", "lc", "pb", "cf", "aux", "lab", "lib", "zip", "bc", "xc", "url", "circ", "org", "etc", "arc", "account", "font", "frac", "canon", "c", "fb", "asc", "area", "atom", "abet", "inc", "dc", "mc", "ex", "const", "uc", "anc", "array", "ignore", "ABC", "cb", "seq", "rb"], "cnt": ["Cnt", "pcrt", "rcnd", " cant", "rcNT", "acnt", "Cnc", "rcount", " cnc", "acnc", "pcnt", "lcount", " count", "lcant", "CNT", "count", " cnd", "cnd", "rcnc", " cNT", "rcnt", "pcNT", "lcnd", "acNT", "Cnd", "cnc", "acnd", " crt", "cant", "crt", "cNT", "lcnt", "rcant", "Crt", "pcnc"], "text": ["test", "sub", "form", "string", "word", "code", "name", "struct", "p", "iv", "section", "event", "vert", "nt", "txt", "contract", "ab", "config", "entry", "class", "comment", "zip", "input", "url", "TEXT", "select", "data", "object", "account", "font", "ext", "area", "editor", "ff", "ct", "Text", "content", "concept", "path", "aut", "inc", "ut", "feed", "key", "character", "act", "uc", "ant", "info", "pattern", "project"], "i": ["a", "xi", "I", "is", "si", "n", "di", "p", "oi", "jo", "ii", "hi", "ij", "r", "ni", "z", "jj", "ini", "b", "ai", "in", "ji", "li", "ci", "zi", "ri", "l", "u", "bi", "c", "qi", "e", "ori", "it", "iu", "eni", "mi", "x", "pi", "h", "yi", "id", "ip", "uri", "d", "y", "v", "ix", "vi", "f", "o", "ui", "start", "k", "jp"], "j": ["xi", "th", "bj", "br", "job", "ja", "n", "jc", "dj", "ie", "J", "p", "section", "jo", "ii", "ij", "r", "jet", "z", "jj", "js", "jl", "b", "ah", "ji", "li", "obj", "q", "fr", "l", "qi", "aj", "oj", "bi", "u", "e", "ri", "other", "h", "x", "pr", "next", "kj", "adj", " dj", "uj", "d", "je", "y", "jit", "v", "ix", "key", "f", "o", "ui", "g", "k", "jp"]}}
{"code": "import java.io.*;\\n\\npublic class Main {\\n  public static void main(String[] args) throws IOException {\\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    \\n    String[] data = br.readLine().split(\" \");\\n    \\n    int a = Integer.parseInt(data[0]);\\n    int b = Integer.parseInt(data[1]);\\n    \\n    if (a<10 && b<10){\\n      System.out.println(a*b);\\n    } else {\\n      System.out.println(-1);\\n    }\\n  }\\n}", "target": "58", "substitutes": {"br": ["nr", "io", "err", "Br", "img", "string", "bb", "ref", "tr", "sr", "er", "buf", "yr", "result", "BR", "r", "browser", "jar", "cr", "arr", "abs", "bar", "gr", "dr", "fr", "stream", "HR", "src", "bs", "ber", "bridge", "bro", "str", "hr", "bf", "div", "reader", "cb", "iter", "bl", "rb"], "data": ["missing", "parts", "list", "results", "load", "i", "value", "string", "code", "raw", "p", "line", "output", "buf", "write", "batch", "part", "first", "na", "bytes", "fail", "arr", "entry", "response", "start", "input", "lines", "split", "ata", "da", "dec", "extra", "text", "next", "la", "body", "content", "style", "format", "DATA", "message", "feed", "buffer", "json", "dat", "array", "info", "reader", "parse", "pad"], "a": ["sta", "fa", "ga", "ca", "n", "bb", "au", "p", "oa", "s", "alpha", "ac", "ia", "aaa", "A", "sa", "ea", "qa", "an", "ab", "aux", "ae", "ba", "pa", "da", "l", "aj", "u", "c", "e", "af", "area", "x", "la", "d", "va", "ha", "aa", "f", "as", "ama", "i", "ad"], "b": ["n", "base", "bb", "p", "nb", "lb", "bd", "aaa", "eb", "abb", "wb", "bp", "ab", "ib", "pb", "bc", "ba", "ob", "B", "l", "bi", "c", "mb", "e", "fb", "bs", "x", "d", "y", "db", "v", "aa", "bf", "f", "o", "sb", "cb", "i", "rb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tpartC100();\\n\t}\\n\\n\\n\tpublic static void partC100() {\\n\t\tScanner scC = new Scanner(System.in);\\n\t\tboolean bool = false;\\n\t\tint count = 0;\\n\t\tint N = scC.nextInt();\\n\t\tint[] a = new int[N];\\n\\n\t\tfor(int i = 0 ; i < N ; i++) {\\n\t\t\ta[i] = scC.nextInt();\\n\t\t}\\n\\n\\n\t\tfor(int j = 0 ; j < N ; j++) {\\n\t\t\tif(a[j] % 2 == 0) {\\n\t\t\t\twhile(a[j] % 2 == 0) {\\n\t\t\t\t\ta[j] /= 2;\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t\tbool = true;\\n\t\t\t}\\n\t\t}\\n\\n\\n\t\tif(bool) {\\n\t\t\tSystem.out.println(count);\\n\t\t}else {\\n\t\t\tSystem.out.println(0);\\n\t\t}\\n\\n\t}\\n}", "target": "39", "substitutes": {"scC": ["ScN", " scCC", "SCW", " scG", "ScG", "SCCC", " scI", " scc", "scM", "sciC", "scI", "sciW", "SCI", "scc", "ScCC", "SCG", "scG", "SCC", "SCM", "scCC", " scW", "SCN", "sciN", "SCT", "ScI", "sciT", " scM", "ScC", "ScM", "Scc", "scT", " scN", " scT", "SCc", "scN", "scW"], "count": ["test", "number", "list", "n", "code", "base", "soft", "p", "nt", "ii", "index", "counter", "z", "work", "b", "ind", "max", "length", "in", "level", "size", "data", "total", "l", "num", "c", "en", "e", "limit", "sum", "id", "offset", "v", "Count", "len", "key", "f", "array", "found", "start", "col"], "N": ["O", "K", "number", "Part", "I", "n", "Ns", "J", "C", "T", "Len", "Ni", "NT", "Ne", "NB", "A", "G", "NN", "Q", "Size", "R", "D", "NA", "B", "Num", "Z", "L", "M", "X", "NE", "S", "F", "P", "V", "Count", "NS", "Number", " n"], "a": ["missing", "access", "img", "ga", "n", "code", "p", "oa", "ia", "aaa", "ac", "alpha", "m", "na", "wa", "A", "sa", "ana", "z", "abs", "an", "ab", "b", "work", "aux", "image", "ba", "ata", "da", "aj", "u", "c", "area", "am", "x", "la", "d", "va", "y", "aa", "f", "as", "o", "auto", "array", "ama", "active", "au"], "i": ["xi", "gi", "I", "is", "io", "si", "n", "di", "ie", "p", "oi", "ii", "hi", "index", "chi", "ni", "z", "ini", "b", "ind", "ai", "in", "phi", "ji", "li", "ci", "zi", "ri", "qi", "u", "bi", "c", "e", "iu", "it", "eni", "mi", "x", "pi", "id", "ip", "d", "y", "v", "ix", "f", "o", "ui"], "j": ["bj", "job", "ja", "n", "jc", "dj", "ie", "J", "p", "jo", "ii", "ij", "z", "js", "jj", "b", "jl", "ind", "length", "ji", "li", "obj", "q", "l", "aj", "u", "oj", "c", "x", "h", "adj", " dj", "uj", "je", "y", "jit", "v", "jen", "key", "f", "o", "g", "k", "jp"], "bool": ["bn", "number", "list", "force", "parent", "weight", "true", "bo", "bits", "expr", "string", "soft", "loop", "ool", "null", "sync", "fail", "ish", "always", "b", "lean", "comment", "bc", "olean", "bel", "bil", "not", "l", "fl", "pool", "binary", "out", "false", "bit", "optional", "flag", "offset", "cond", "integer", "array", "bill", "sleep", "bl"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString line = sc.nextLine();\\n\t\tString[] lines = line.split(\"\");\\n\\n\t\tint max = 0;\\n\t\tint count = 0;\\n\t\tfor(int i = 0; i < lines.length; i++) {\\n\t\t\tif(lines[i].equals(\"A\") || lines[i].equals(\"T\") || lines[i].equals(\"C\") || lines[i].equals(\"G\")) {\\n\t\t\t\tcount++;\\n\t\t\t\tif(i == lines.length - 1 && max < count) {\\n\t\t\t\t\tmax = count;\\n\t\t\t\t}\\n\t\t\t}else {\\n\t\t\t\tif(max < count) {\\n\t\t\t\t\tmax = count;\\n\t\t\t\t}\\n\t\t\t\tcount = 0;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(max);\\n\t}\\n\\n}\\n", "target": "100", "substitutes": {}}
{"code": "\\nimport java.util.Scanner;\\n\\n\\npublic class Main \\n{ \\n    public static void main(String[] args) \\n    {\\n        Scanner sc = new Scanner(System.in);\\n        float n = sc.nextInt();\\n        float dim = n/3;\\n        System.out.printf(\"%f\\n\",dim*dim*dim);\\n    }\\n}\\n", "target": "53", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cs", "ser", "ca", "sub", "sf", "cc", "soc", "acc", "enc", "sync", "cr", "sl", "ec", "sq", "osc", "lib", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "str", " SC", "scan", "nc", " Sc", "uc", "sh", "sp", "g", "SC"], "n": ["network", "number", "w", "Ns", "p", "s", "nb", "nt", "m", "cn", "nor", "na", "nan", "j", "ne", "t", "ni", "b", "N", "count", "nm", "nn", "size", "dan", "ns", "nd", "l", "num", "c", "init", "conn", "x", " N", "adj", "d", "ng", "nit", "nc", "f", "g", "net", "i", "k"], "dim": ["span", "weight", "dimension", "dist", "di", "space", "step", "dy", "p", "m", "width", "mn", "dm", "Dim", "im", "mi", "np", "dn", "scale", "depth", "d", "format", "dc", "shape", "div", "dat", " dimension", "iter"]}}
{"code": "import java.util.*;\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    String s = sc.next();\\n    String t = sc.next();\\n    String st = \"\";\\n    for(int i = 0 ; i < n ; ++i){\\n      st += s.charAt(i);\\n      st += t.charAt(i);\\n    }\\n   \\n    System.out.println(st);\\n    \\n  }\\n}", "target": "200", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "sr", "cc", "ner", "tc", "acc", "enc", "sync", "cr", "osc", "sq", "ec", "lc", "cont", "coll", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "SC"], "n": ["network", "number", "w", "zn", "p", "nb", "m", "ne", "j", "r", "ln", "ni", "z", "b", "N", "in", "nn", "ns", "l", "u", "en", "c", "fn", "num", "conn", "x", "h", "d", "y", "v", "nin", "len", "nc", "f", "o", "net", "k"], "s": ["a", "qs", "is", "cs", "si", "string", "p", "ress", "sts", "os", "r", "sa", "sv", "sl", "ls", "b", "ds", "ins", "in", "ss", "ns", "l", "u", "c", "ses", "e", "bs", "su", "ts", "S", "d", "v", "f", "as", "o", "sp", "sb", "ans", "strings"], "t": ["et", "test", "at", "pt", "ot", "tr", "p", "T", "nt", "r", "txt", "j", "b", "tt", "l", "u", "c", "it", "x", "ts", "out", "text", "ta", "ty", "tm", "rt", "d", "art", "str", "y", "qt", "v", "ut", "tf", "f", "temp", "wt"], "st": ["sw", "sta", "butt", "string", "pt", "step", "stop", "p", "struct", "ste", "ft", "sts", " est", "sth", "r", "sty", "stri", "est", "sv", "storage", "sn", "ost", "b", "ld", "sl", "std", "tt", "pat", "ss", "Str", "sign", "l", "ist", "u", "ast", "c", "src", "x", "mt", "text", "put", "ct", "d", "str", "ust", "rest", "ut", "const", "f", "sh", "sp", "ST", "sb", "stage", "start", "St"], "i": ["xi", "gi", "I", "io", "si", "di", "ie", "p", "oi", "m", "ii", "hi", "part", "chi", "j", "pass", "z", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "q", "zi", "ri", "qi", "u", "bi", "c", "l", "e", "ori", "iu", "eni", "init", "pi", "x", "h", "fi", "id", "ip", "uri", "field", "y", "v", "slice", "ix", "f", "ui", "o", "info"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\t/**\\n\t * @param args\\n\t */\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint num = 0;\\n\t\tint ans = 0;\\n\t\tfor(int i = 1; i < 6; i++) {\\n\t\t\tnum = scan.nextInt();\\n\t\t\tif(num == 0) {\\n\t\t\t\tans = i;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t\t\\n\t\t\\n\t}\\n\\n}\\n", "target": "222", "substitutes": {"scan": ["run", "pin", "get", "search", "gen", "n", "store", "er", "connect", "query", "ner", "vis", "app", "na", "r", "pass", "ln", "skip", "sync", "an", "ann", "fan", "ai", "in", "nn", "all", "use", "san", "read", "se", "l", "can", "out", "cat", "server", "Scan", "stat", "watch", "ignore", "reader", "parse", "con", "check"], "num": ["nu", "number", "nr", "pos", "NUM", "um", "n", "non", "name", "unit", "umi", "anon", "result", "nt", "mom", "na", "index", "mn", "ni", "an", "ann", "max", "in", "kin", "mon", "end", "no", "nn", "size", "miss", "Num", "u", "en", "x", "su", "sum", "id", "nom", "inc", "uni", "len", "fat", "nc", "anc", "us", "info", "con"], "ans": ["span", "ants", "cons", "cs", "ani", "n", "lan", "anon", "s", "annot", "vers", "amps", "offs", "nos", "na", "ents", "ANS", "os", "lang", "nan", "ips", "anas", "ana", "issues", "outs", "an", "idents", "ann", "ars", "ls", "sn", "ins", "in", " means", "atan", "cas", "nn", "ians", "san", "ns", "acts", "can", "x", "ln", "xs", "ats", "aus", "ids", "ions", "es", "aned", "ons", "anc", " scans", "ras", "rows"], "i": ["gi", "xi", "number", "I", "io", "si", "n", "di", "p", "oi", "ii", "hi", "chi", "j", "index", "ki", "ni", "z", "ini", "mu", "ind", "ai", "in", "multi", "li", "ci", "ti", "ri", "qi", "u", "bi", "c", "init", "it", "eni", "mi", "x", "pi", "id", "ip", "uri", "y", "v", "api", "ix", "f", "ui", "o", "info", "start"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString sline = sc.next();\\n\t\tint n = sline.length();\\n\t\tsc.close();\\n\t\tStringBuffer sb = new StringBuffer(sline);\\n\t\tString reversed = sb.reverse().toString();\\n\t\t\\n\t\tboolean ans = true;\\n\t\tString[] words = {\"maerd\", \"remaerd\", \"esare\", \"resare\"};\\n\t\tfor (int i = 0; i < n;) {\\n\t\t\tboolean can = false;\\n\t\t\tfor(String w: words){\\n\t\t\t\tint end = w.length();\\n\t\t\t\tif (i + end > n) continue;\\n\t\t\t\tif (reversed.substring(i, i + end) .equals(w)) {\\n\t\t\t\t\ti += end;\\n\t\t\t\t\tcan = true;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tif (can == false) {\\n\t\t\t\tans = false;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif (ans){\\n\t\t\tSystem.out.println(\"YES\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\t\t\\n\t}\\n\\n}\\n", "target": "50", "substitutes": {}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner in = new Scanner(System.in);\\n\\n\t\tint num = in.nextInt();\\n\t\tint count = 1;\\n\\n\t\tfor (count = 1; count <= num; count++) {\\n\\n\t\t\t// 3??\u00a7?????????????????\u00b0?????\u00a8???\\n\t\t\tif (count % 3 == 0) {\\n\\n\t\t\t\tSystem.out.print(\" \" + count);\\n\\n\t\t\t\t// ???????????????3?????\u00b0?????\u00a8???\\n\t\t\t} else if (count % 10 == 3) {\\n\\n\t\t\t\tSystem.out.print(\" \" + count);\\n\\n\t\t\t\t// else if(count / 10 == 3)\\n\t\t\t} else {\\n\\n\t\t\t\tint x = count;\\n\t\t\t\tint display = 0;\\n\\n\t\t\t\twhile (x > 10) {\\n\t\t\t\t\tx /= 10;\\n\\n\t\t\t\t\tif (x % 10 == 3) {\\n\t\t\t\t\t\tdisplay = count;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\tif(display != 0) {\\n\t\t\t\t\tSystem.out.print(\" \" + display);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(\"\");\\n\t}\\n\\n}", "target": "154", "substitutes": {"in": ["exec", "din", "file", "is", "get", "err", "In", "bin", "n", "arg", "line", "cli", "s", "socket", "m", "r", "pass", "ln", "ini", "doc", "ins", "lib", "inf", "kin", "inner", "input", "data", "win", "min", "l", "c", "init", "out", "x", "inc", "d", "con", "again", "login", "isin", "buffer", "scan", "as", "include", "g", "reader", "info", "i", "start", "IN", "inn"], "num": ["nu", "missing", "span", "number", "NUM", "um", "bin", "n", "mult", "name", "nb", "loop", "nt", "index", "loc", "max", "nm", "multi", "length", "nn", "no", "common", "Num", "init", "nam", "sum", "id", "nom", "block", "inc", "offset", "off", "len", "div", "f", "dim", "i", "col", "cal"], "count": ["test", "number", "list", "find", "force", "parent", "i", "col", "weight", "old", "um", "n", "code", "base", "name", "ac", "loop", "nt", "cast", "part", "index", "default", "counter", "coll", "conf", "length", "now", "end", "match", "size", "cache", "session", "child", "c", "other", "type", "process", "sum", "id", "cat", "depth", "cond", "Count", "current", "key", "connection", "f", "time", "call", "start", "con", "check"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    \\n    int n = sc.nextInt();\\n\\n    ArrayList<Integer> a = new ArrayList<Integer>(n);\\n\\n    for (int i=0 ; i<n ; i++){\\n      a.add(sc.nextInt());\\n    }\\n\\n    int cnt=0;\\n    int ans=0;\\n\\n    for (int i=0 ; i<n ; i++){\\n      if (i+1==n){break;}\\n      if(a.get(i)>=a.get(i+1)){\\n          cnt++;\\n          ans = (ans<cnt) ? cnt:ans;\\n      }else{\\n          ans = (ans<cnt) ? cnt:ans;\\n          cnt=0;\\n      }\\n    }\\n\\n\\n    System.out.println(ans);\\n  }\\n}", "target": "187", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "si", "screen", "s", "cc", "ner", "sec", "soc", "na", "sync", "system", "cr", "osc", "sq", "ec", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "sys", "c", "src", "Sc", "asc", "sche", "sem", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "parser", "SC"], "n": ["network", "number", "w", "Ns", "p", "s", "nb", "m", "nt", "ne", "j", "nan", "ln", "t", "mn", "z", "none", "an", "sn", "b", "N", "in", "nn", "no", "ns", "l", "u", "en", "c", "num", "e", "conn", "x", "d", "y", "v", "len", "nc", "f", "o", "net", "k"], "a": ["ants", "ar", "ga", "ca", "ra", "p", "oa", "ia", "alpha", "ac", "aaa", "s", "na", "A", "sa", "ao", "ana", "ma", "an", "b", "ai", "ba", "ata", "pa", "da", "l", "aj", "u", "aw", "c", "e", "area", "am", "la", "asa", "va", "aa", "f", "as", "array", "ama", "au"], "i": ["xi", "gi", "I", "is", "io", "si", "ie", "di", "ami", "p", "oi", "abi", "ii", "hi", "part", "index", "j", "ni", "z", "mini", "ini", "b", "ai", "in", "phi", "inner", "ji", "li", "ci", "ri", "qi", "u", "bi", "l", "e", "init", "iu", "it", "ori", "mi", "pi", "x", "yi", "eni", "id", "ip", "uri", "y", "ix", "v", "api", "slice", "anti", "f", "ui", "o", "info"], "cnt": ["ecnt", "pnt", "pcant", "scct", "lcct", " cant", "sccount", "lcrc", "acnt", "ancant", "cnn", "lcnn", "cct", "ecwd", "scno", "cpt", "ecnn", "cno", "lcount", "pcnt", " cnc", " count", "lcant", "scnn", "acrt", "rcnn", "lccount", "count", "ecpt", "pcount", " cwd", " cNT", "acnn", "rcnt", " crc", "ucnt", " cno", "pcrc", "cwd", "acNT", "scnt", "ancrt", "crc", "lcno", "pnn", "ucct", "eccount", "scnc", "lcwd", " cpt", "scpt", "cnc", " cct", "ucnc", " crt", "cant", " cnn", "crt", "cNT", "ecct", "lcnt", "ancnn", "ancnt", "ecno", "rcant", "pNT", "ccount", " ccount", "rcrt", "prt", "ucno"], "ans": ["span", "atches", "ants", "ops", "ips", "outs", "ars", "atan", "works", "names", "aned", "ays", "lan", "ANS", "ens", "ins", "grades", "ians", "acts", "can", " spans", "eps", "ions", "nas", "ks", "params", "cs", "ations", "s", "amps", "na", "ents", "os", "nan", "anne", "anas", "ana", "ares", "sk", "ann", "lines", " means", "ss", "cas", "aning", "ns", " na", "ends", "ams", "x", "xs", "ats", "anc", "as", " scans", "ras", "cons", "AN", "anon", "nt", "vers", "offs", "arts", "an", "aces", "ls", "anned", "ads", " len", "inas", "aus", "ids", "ons"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint X = sc.nextInt();\\n\t\tint ans = 0;\\n\t\t\\n\t\tfor (int i = 1; i < 33; i++){\\n\t\t\t\\n\t\t\tint tmp = i;\\n\t\t\t\\n\t\t\tfor (int j = 0; j < 9; j++){\\n\t\t\t\ttmp *= i;\\n\t\t\t\t\\n\t\t\t\tif (ans < tmp && tmp <= X){\\n\t\t\t\t\tans = tmp;\\n\t\t\t}\\n\t\t\t\\n\t\t\t}\\n\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ans);\\n\\n\t}\\n}", "target": "143", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cs", "ser", "ca", "sub", "cer", "sr", "cc", "ner", "sec", "na", "acc", "cr", "st", "ec", "sq", "osc", " scr", "bc", "sci", "ss", "ci", "cl", "se", "c", "src", "Sc", "str", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "cb", "SC"], "X": ["K", "PI", "U", "I", "XXXX", "J", "MAX", "T", "C", "FF", "XL", "A", "Max", "IX", "N", "Q", "XX", "XY", "XP", "Y", "XXX", "ax", "Z", "TX", "Cross", "L", "Rest", "M", "x", "xs", "RC", "S", "P", "F", "V", "PE"], "ans": ["ks", "ants", "cons", "ations", "cs", "blocks", "ones", "AN", "anon", "s", "annot", "amps", "offs", "na", "ents", "ANS", "os", "nan", "ips", "ana", "outs", "an", "sk", "ann", "ls", "vs", "aces", "ars", "ins", "ds", "XX", "lines", "ss", "atan", "cas", "nn", "artifacts", "anned", "ns", "forces", "acts", "x", "xs", "types", "asa", "eps", "ats", "aus", "ions", "aned", "ons", "anc", "as", "features", " scans", "nas", "ras", "rows"], "i": ["gi", "xi", "a", "I", "is", "io", "si", "n", "di", "ie", "p", "oi", "ii", "hi", "ij", "index", "t", "ni", "z", "ini", "b", "ind", "ai", "in", "ji", "li", "ci", "l", "u", "bi", "c", "init", "ori", "e", "type", "mi", "x", "pi", "id", "ip", "pp", "y", "v", "ix", "api", "vi", "key", "f", "ui", "info", "start", "jp"], "tmp": ["a", "test", "pos", "img", "code", "project", "p", "qq", "buf", "nb", "xt", "nt", "ii", "part", "sup", "app", "txt", "dest", "t", "bp", "z", "jj", "yy", "config", "b", "qa", "mp", "kk", "tt", "prefix", "now", "obj", "nn", "extra", "src", "tp", "np", "x", "area", "ext", "ff", "next", "source", "stuff", "rb", "rt", "pp", "offset", "v", "xxx", "beta", "slice", "mm", "current", "shift", "cp", "tf", "const", "crop", "sp", "zip", "temp", "start", "jp"], "j": ["bj", "pos", "ja", "si", "n", "ie", "J", "p", "m", "jo", "ii", "nt", "ij", "part", "z", "jj", "js", "b", "ind", "ji", "end", "li", "obj", "l", "aj", "u", "e", "it", "x", "next", "uj", "y", "v", "ix", "f", "o", "start", "k", "jp"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\tScanner sc = new Scanner(System.in);\\n\tint N = sc.nextInt();\\n\tint T = sc.nextInt();\\n\tint []hairetu1 = new int[N];\\n\tint []hairetu2 = new int[N];\\n\tfor(int i=0;i<N;i++) {\\n\t\thairetu1[i]=sc.nextInt();\\n\t\thairetu2[i]=sc.nextInt();\\n\t}\\nint count=0;\\n\tfor(int i=0;i<N;i++) {\\n\tif(hairetu2[i]<=T){\\n\t\tcount++;\\n\t}\\n\t\t}\\n\tif(count==0){\\n\t\tSystem.out.println(\"TLE\");\\n\t\tSystem.exit(0);\\n\t}\\n\t\\n\tint z=0;\\n\tint []hairetu3 = new int[count];\\n\tfor(int i=0;i<N;i++) {\\n\t\tif(hairetu2[i]<=T){\\n\t\t\thairetu3[z]=hairetu1[i];\\n\t\t\tz++;\\n\t\t}\\n\t}\\n\tint min = hairetu3[0];\\n\tfor(int i=0;i<count;i++){\\n\t\tif(min>hairetu3[i]){\\n\t\t\tmin=hairetu3[i];\\n\t\t}\\n\t}\\n\tSystem.out.println(min);\\n\t}\\n\t}\\n\\n", "target": "8", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "desc", "cs", "search", "screen", "com", "ctx", "cam", "cc", "ner", "tc", "acc", "sync", "cr", "system", "osc", "sq", "sv", "lc", "ec", "cont", "ck", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "ct", "cv", " SC", "dc", "mc", "scan", "nc", " Sc", "uc", "anc", "server", "sp", "sb", "cb", "SC", "spec"], "N": ["O", "network", "K", "E", "I", "number", "Part", "Na", "n", "Ns", "J", "C", "Len", "Ni", "NT", "Ne", "NB", "SN", "Max", "W", "NN", "Q", "Size", "R", "D", "H", "Y", "NA", "Z", "B", "Num", "L", "M", "NC", "X", "NE", "S", "P", "F", "V", "Count", "NS", "NL", "MN", "KN"], "T": ["O", "K", "U", "E", "I", "J", "C", "TN", "NT", "TB", "t", "G", "W", "TS", "Q", "Time", "LT", "H", "D", "Y", "Z", "L", "Zero", "Total", "M", "TH", "X", "TC", "TA", "TT", "S", "P", "F", "V", "CT", "TO", "Count", "WT"], "hairetu1": ["hairecit4", "haorechu3", "haireu8", "hairedtu8", "hairechu4", "haoretu0", "haorechu4", "haIREcu4", "haireti4", "hairechu3", "hairedtu1", "hairechu0", "haoretu3", "haireti8", "hairedtu3", "hairecit0", "hairecu3", "hairetu8", "haIREtu2", "haireti1", "haoretu4", "haIREcu1", "hairecu1", "haIREtu1", "hairecu2", "hairedti3", "haIREtu3", "haIREtu4", "hairedti8", "haoretu1", "haireu3", "haireti0", "hairecu4", "haIREcu3", "hairedti1", "hairechu1", "haorechu1", "haorechu0", "hairecit3", "haIREcu2", "haireu1", "hairetu0", "haireti3", "hairetu4", "hairechu2", "hairechu8", "hairecit1"], "hairetu2": ["haireta1", "hairecit4", "hairecum2", "haorechu3", "hairut3", "haireut2", "hairetaTwo", "hairut4", "hairechu4", "haorecu2", "hairetu5", "haoretu2", "hairecu5", "hairechu5", "hairecum5", "haireeu2", "hairecuSecond", "hairutTwo", "haireti4", "hairechu3", "hairecit2", "haorecuTwo", "haoretu3", "hairecuTwo", "hairecu3", "haorechu2", "haoretuTwo", "haorecu4", "haoretu4", "haireta2", "hairecu1", "hairetaSecond", "haireeu1", "hairecu2", "hairut2", "hairecitTwo", "hairecitSecond", "haireut4", "haoretu1", "hairetuSecond", "hairtu2", "haoretu5", "hairetuTwo", "hairetiTwo", "haireti2", "haorecu1", "haorechu5", "hairecu4", "haireeu4", "hairtu3", "haireut3", "hairechu1", "haorechu1", "hairecum3", "haireeuTwo", "haoretuSecond", "hairtuTwo", "hairecum1", "haireti3", "haorecuSecond", "hairetu4", "hairechu2", "haireutTwo", "hairtu4", "hairechuTwo", "hairecit1"], "i": ["xi", "I", "io", "si", "di", "index", "mini", "ini", "b", "multi", "iu", "it", "pi", "fi", "id", "ix", "ui", "info", "start", "is", "ie", "name", "p", "me", "ii", "one", "mu", "lc", "ind", "ai", "phi", "ji", "li", "u", "ori", "mi", "ip", "uri", "o", "gi", "n", "s", "m", "hi", "chi", "q", "l", "c", "init", "eni", "my", "x", "api", "vi", "oi", "abi", "j", "t", "ni", "in", "ci", "ti", "zi", "ri", "qi", "bi", "e", "d", "y", "v", "f"], "count": ["number", "list", "ch", "weight", "w", "n", "code", "base", "p", "group", "C", "nt", "part", "index", "j", "counter", "b", "ind", "coll", "max", "length", "in", "order", "level", "size", "total", "cache", "all", "q", "child", "l", "num", "c", "pool", "last", "x", "keep", "limit", "zone", "sum", "id", "allow", "depth", "left", "y", "v", "Count", "len", "label", "key", "add", "f", "found", "zip", "call", "start", "k", "check"], "z": ["w", "get", "n", "code", "p", "m", "zo", "j", "cz", "ind", "q", "Z", "zi", "gz", "l", "zh", "u", "c", "fl", "zone", "zy", "h", "x", "id", "iz", "depth", "d", "zen", "tz", "y", "v", "slice", "f", "az", "ez", "zip", "start", "k", "ze"], "hairetu3": ["hairingtu31", "hairedtur3", "haireu53", "hairecu5", "haeretu15", "hairedtu6", "hairontu3", "hairechu3", "hairedtu1", "hairingta31", "hairecu3", "hairetu6", "hailetu1", "hairetu31", "hairet6", "haeretu3", "haireta15", "hairingtu3", "hairetu9", "haireti9", "hairetu03", "hairet1", "haereta33", "haireti3", "hairedtur31", "haireta5", "hairetur53", "haireta31", "hailetu3", "hairingta2", "hailetu03", "hairedtur6", "hairechu33", "hairontur53", "haereta5", "haeretu5", "hairedtu3", "haireta33", "haireti1", "hairontu15", "haireta2", "hairecu31", "haereta15", "hairechu15", "hairetu53", "hairechu1", "haileti3", "hairedtur1", "hairechu2", "hairontu53", "hairontur3", "hairecu6", "hairet3", "haireti53", "hairechu5", "hairontur15", "hairingta5", "haireti5", "hairingtu5", "haireti33", "hairetur6", "haireti15", "hairetur1", "hairontur9", "haireti03", "hairetur9", "haeretu33", "hairingta3", "hairetu33", "hailetu2", "haereta3", "hairedtu31", "haileti2", "haireu9", "hairontu9", "hairetur3", "haireti31", "hairetu5", "hairetu15", "hairingtu2", "haileti1", "hairecu03", "hairet31", "hairecu1", "hairecu2", "hairetur31", "haileti03", "haireu3", "hairechu03", "haireti2", "hairetur15", "haireu15", "haireta3"], "min": ["a", "MIN", "pm", "core", "minimum", "pos", "weight", "n", "code", "value", "version", "p", "ress", "po", "diff", "sort", "low", "m", "sol", "part", "j", "default", "pass", "mine", "ana", "none", "mini", "skip", "fe", "max", "ind", "partial", "in", "iss", "rand", "size", "don", "small", "sign", "lock", "c", "pri", "Min", "e", "close", "area", "x", "limit", "sum", "id", "Mini", "d", "pre", "val", "un", "key", "shift", "div", "f", "start"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner input = new Scanner(System.in);\\n\t\tint A = input.nextInt();\\n\t\tint B = input.nextInt();\\n\t\tSystem.out.println(A<10&&B<10?A*B:-1);\\n\t}\\n}", "target": "58", "substitutes": {"input": ["exec", "list", "method", "iterator", "file", "io", "i", "client", "kernel", "address", "n", "request", " Input", "form", "event", "socket", "http", "flow", "null", "this", "view", "image", "in", "inf", "context", "data", "instance", "object", "l", "c", "stream", "binary", "out", "text", "print", "Input", "source", "inc", "str", "feed", "buffer", "current", "f", "server", "util", "Output", "array", "reader", "iter"], "A": ["a", "API", "O", "U", "E", "I", "Alpha", "HA", "AC", "As", "AF", "AB", "C", "T", "PA", "LA", "AA", "N", "RA", "UA", "IA", "R", "D", "H", "Y", "NA", "L", "Average", "MA", "M", "Java", "SA", "X", "AD", "EA", "Area", "AR", "mA", "BA", "S", "F", "P", "Ma", "TA", "DATA", "V", "AV", "AP", "FA", "CA"], "B": ["O", "U", "E", "I", "BS", "VB", "Bi", "AB", "J", "C", "T", "BE", "BR", "NB", "SB", "G", "b", "N", "Q", "QB", "R", "BC", "GB", "D", "UB", "H", "Y", "Beta", "DB", "L", "M", "IB", "LB", "Bs", "BA", "OB", "F", "P", "V", "EB", "BB", "AP", "BL", "BER", "WB", "BI"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint n = sc.nextInt()+1;\\n\t\tint[] a = new int[n];\\n\t\tint[] b = new int[n - 1];\\n\t\tlong sum = 0;\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = sc.nextInt();\\n\t\tfor (int i = 0; i < n - 1; i++)\\n\t\t\tb[i] = sc.nextInt();\\n\t\tfor (int i = 0; i < n-1; i++) {\\n\t\t\tif (b[i] > a[i]) {\\n\t\t\t\tsum += a[i];\\n\t\t\t\tb[i] = b[i] - a[i];\\n\t\t\t\tif (b[i] > a[i + 1]) {\\n\t\t\t\t\tsum += a[i + 1];\\n\t\t\t\t\ta[i + 1] = 0;\\n\t\t\t\t} else {\\n\t\t\t\t\tsum += b[i];\\n\t\t\t\t\ta[i + 1] = a[i + 1] - b[i];\\n\t\t\t\t}\\n\t\t\t}else {\\n\t\t\t\tsum += b[i];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t}\\n}", "target": "159", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cs", "si", "sf", "screen", "ctx", "cc", "ner", "sec", "tc", "soc", "r", "sync", "system", "cr", "osc", "sq", "lc", " sw", "cont", " scr", "bc", "sci", "ss", "cl", "scope", "se", "l", "c", "src", "Sc", "sem", "cv", " SC", "sch", "scan", "nc", " Sc", "anc", "server", "uc", "Scan", "sp", "sh", " rc", "SC", "squ"], "sb": [" sm", "si", "sf", "gb", "bb", "nb", "s", "SB", "sa", "sv", "pb", "bc", "sg", "SF", "ss", "ws", "ub", "mb", "src", "bs", "su", "sm", "SI", "db", "bf", "sh", "sp", "cb", "rb"], "n": ["network", "non", "p", "s", "nb", "m", "nt", "na", "ne", "j", "nan", "t", "ni", "z", "an", "sn", "N", "in", "count", "nn", "no", "size", "all", "ns", "l", "u", "en", "c", "num", "e", "conn", "x", "dn", "adj", "d", "un", "y", "v", "len", "nc", "f", "nl", "o", "g", "net", "k", "inn"], "a": ["sta", "ar", "ga", "at", "ca", "au", "p", "aaa", "s", "alpha", "ia", "ac", "app", "na", "r", "A", "sa", "ea", "qa", "this", "ma", "an", "ab", "ai", "aux", "in", "ae", "ba", "data", "pa", "da", "l", "aj", "u", "c", "e", "am", "x", "area", "asa", "la", "d", "y", "va", "api", "aa", "f", "as", "o", "array", "ama", "ad"], "b": ["br", "big", "base", "bb", "gb", "p", "lb", "nb", "bd", "m", "eb", "part", "app", "j", "r", "sa", "abb", "wb", "ab", "ib", "an", "pb", "bar", "ba", "ob", "B", "l", "u", "mb", "c", "bi", "fb", "e", "binary", "bs", "bis", "function", "body", "d", "bh", "y", "db", "v", "api", "beta", "emb", "bf", "aa", "f", "o", "auto", "be", "g", "cb", "ad", "rb"], "sum": ["mem", "cal", "weight", "cur", "um", "si", "bin", "unit", "diff", "alpha", "average", "result", "help", "user", "sort", "part", "ul", "sa", "Sum", " summ", "an", "max", "hash", "conf", "comment", "count", "length", "mean", "ss", "cum", "error", "size", "total", "miss", "sign", "sam", "ass", "cache", "use", "all", "pack", "success", "num", "gam", "scale", "parse", "key", "vol", "sim", "fat", "plus", "add", "sh", "up", "stat", "info", "g", "fee", "cost", "loss", "summary", "gram", "net", "norm"], "i": ["xi", "I", "io", "si", "di", "index", "mini", "ini", "multi", "iu", "it", "pi", "fi", "id", "ix", "ui", "info", "g", "is", "ie", "p", "cli", "ii", "ki", "mu", "ai", "phi", "ji", "li", "u", "ori", "mi", "h", "yi", "ip", "uri", "o", "gi", "adi", "ei", "ami", "m", "hi", "l", "c", "init", "eni", "my", "x", "api", "oi", "abi", "j", "ni", "site", "ci", "ti", "ali", "zi", "ri", "qi", "bi", "e", "source", "d", "y", "v", "slice", "key", "f"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\n\\npublic class Main {\\n    private static Scanner sc;\\n    public static void main(String[] args) {\\n        Main instance = new Main();\\n        sc = instance.new Scanner();\\n        instance.solve();\\n    }\\n\\n    private void solve() {\\n        try {\\n            int N = sc.nextInt();\\n            int Q = sc.nextInt();\\n            String S = sc.next();\\n            String R = new StringBuffer(S).reverse().toString();\\n            int[] l = new int[S.length()];\\n            int[] r = new int[S.length()];\\n            Arrays.fill(l, 0);\\n            Arrays.fill(r, 0);\\n            int tmpl = 0;\\n            int tmpr = 0;\\n            for (int i = 1; i < S.length(); i++) {\\n                l[i] = tmpl;\\n                if (S.charAt(i-1) == 'A' && S.charAt(i) == 'C') {\\n                    tmpl++;\\n                    l[i] = tmpl;\\n                }\\n\\n                r[i] = tmpr;\\n                if (R.charAt(i-1) == 'C' && R.charAt(i) == 'A') {\\n                    tmpr++;\\n                    r[i] = tmpr;\\n                }\\n            }\\n            int a, b;\\n            for (int i = 0; i < Q; i++) {\\n                a = sc.nextInt();\\n                b = sc.nextInt();\\n                System.out.println(tmpl - l[a-1] - r[S.length()-b]);\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n\\n    private class Scanner {\\n        String[] s;\\n        int i;\\n        BufferedReader br;\\n        String regex = \" \";\\n\\n        public Scanner() {\\n            s = new String[0];\\n            i = 0;\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        @Override\\n        protected void finalize() throws Throwable {\\n            try {\\n                super.finalize();\\n            } finally {\\n                destruction();\\n            }\\n        }\\n\\n        private void destruction() throws IOException {\\n            if (br != null) br.close();\\n        }\\n\\n        public String next() throws IOException {\\n            if (i < s.length) return s[i++];\\n            String st = br.readLine();\\n            while (st == \"\") st = br.readLine();\\n            s = st.split(regex, 0);\\n            i = 0;\\n            return s[i++];\\n        }\\n\\n        public int nextInt() throws NumberFormatException, IOException {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public Long nextLong() throws NumberFormatException, IOException {\\n            return Long.parseLong(next());\\n        }\\n\\n        public Double nextDouble() throws NumberFormatException, IOException {\\n            return Double.parseDouble(next());\\n        }\\n    }\\n}", "target": "52", "substitutes": {"sc": ["pc", "exec", "esc", "sw", "rc", "ch", "desc", "cur", "cs", "ca", "cer", "ctx", "com", "cli", "cc", "sec", "tc", "exp", "soc", "pl", "inst", "sync", "cr", "osc", "ec", "config", "system", "lc", "cont", "bc", "sci", "cle", "ci", "cus", "cl", "scope", "c", "src", "Sc", "asc", "NC", "sche", "sem", "cv", "RC", "inc", "parse", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "server", "sh", "sp", "sb", "parser", "SC", "spec"], "instance": ["test", "rc", "parent", "client", " instances", "section", "command", "result", "ance", "sup", "inst", "default", "this", "system", "shared", "Instance", "config", "class", "image", "manager", "bc", "context", "inner", "center", "component", "performance", "scope", "ssh", "c", "e", "master", "self", "root", "connection", "example", "server", "anc", "runner", "auto", "reader", "parser"], "N": ["O", "K", "U", "E", "I", "n", "Ns", "J", "C", "T", "G", "Size", "D", "H", "Y", "B", "Z", "Num", "L", "M", "X", "P", "F", "V", "NS", "NL", " n"], "Q": ["O", "K", "U", "E", "I", "n", "QU", "J", "C", "T", "CL", "G", "W", "D", "H", "Y", "q", "Z", "B", "L", "M", "MQ", "X", "F", "P", "V", "Qu", "CH"], "S": ["O", "SE", "U", "Part", "Si", "I", "BS", "Su", "Sample", "SU", "C", "T", "SS", "RS", "SSL", "Source", "SK", "Session", "SN", "A", "VS", "Service", "G", "Space", "JS", "Rs", "Sort", "URI", "H", "D", "B", "L", "FS", "Single", "Sc", "M", "SA", "Socket", "JSON", "SR", "SI", "SL", "P", "DS", "WS", "F", "Text", "V", "Standard", "NS", "GS", "OS", "Sl", "ST", "STR", "SH", "SC", "Lu", "Files", "St"], "R": ["K", "U", "E", "I", "Res", "NR", "KR", "RH", "C", "T", "RIP", "Re", "CR", "RS", "BR", "A", "G", "RP", "W", "RA", "Rs", "D", "H", "Y", "B", "JR", "L", "M", "Repl", "Range", "X", "SR", "Rh", "AR", "UR", "Reader", "Right", "P", "F", "RC", "RE", "V", "RO", "RN", "RR"], "l": ["il", "n", "p", "m", "log", "pl", "loc", "le", "ln", "t", "z", "sl", "lc", "ls", "lv", "li", "q", "el", "rl", "L", "u", "fl", "c", "lp", "e", "x", "kl", "lin", "la", "left", "d", "ll", "dl", "ur", "v", "ol", "f", "nl", "o", "lu", "al", "bl"], "r": ["res", "nr", "rc", "adr", "re", "w", "ro", "err", "ar", "n", "rs", "tr", "p", "sr", "er", "m", "t", "cr", "arr", "dr", "rx", "ir", "range", "q", "fr", "rl", "u", "c", "e", "h", "rr", "rh", "pr", "ru", "right", "rt", "d", "v", "g", "ur", "k", "rb"], "tmpl": ["tomper", "hampr", "ttply", "httcl", "smbl", "temper", "template", "mmply", "tmph", "tomcl", "htmpr", "htmplate", "smple", "ttpl", "timpl", "http", "htmple", "temply", "httpl", "mmcl", "temcl", "ttper", "tmplate", "ttbl", "htmpl", "htmbl", "mmpr", "tmper", "hamph", "tmply", "tomplate", "htmply", "templ", "timplates", "tomply", "tembl", "hamply", "tempr", "tmp", "htmplates", "tompl", "timple", "htmp", "tombl", "mmp", "hampl", "httpr", "smpl", "timbl", "tmple", "tmbl", "htmph", "htmcl", "mmpl", "tompr", "smplates", "tmplates", "mmph", "tmcl"], "tmpr": ["TMpr", "mmpo", "tmpt", "TMpl", "tmbr", "htmpt", "htmpr", "sumpl", "sump", "htmrt", "htmpo", "tmpo", "sumpr", "htmpl", "mmpr", "mmpt", "tembr", "templ", "tempr", "tmp", "htmbr", "TMpt", "smpo", "smpl", "htmp", "mmp", "tmrt", "TMbr", "smpr", "mmrt", "smp", "mmpl", "sumrt", "smpt", "tempt"], "i": ["xi", "gi", "I", "ei", "is", "io", "si", "ie", "n", "di", "p", "line", "ic", "oi", "cli", "diff", "ii", "hi", "index", "j", "chi", "t", "ni", "ini", "mu", "isi", "ai", "phi", "multi", "li", "ci", "ti", "data", "ik", "zi", "qi", "ri", "bi", "c", "u", "e", "ori", "iu", "it", "eni", "mi", "pi", "x", "yi", "my", "id", "ip", "uri", "y", "ix", "api", "v", "slice", "key", "f", "ui", "o", "info"], "a": ["sta", "fa", "ca", "n", "p", "ia", "alpha", "na", "wa", "ada", "A", "sa", "ea", "qa", "ma", "an", "ab", "ba", "pa", "da", "aj", "u", "c", "e", "area", "x", "am", "la", "va", "y", "za", "aa", "f", "o", "ama", "ad"], "b": ["xb", "bin", "n", "bb", "p", "nb", "aaa", "lb", "m", "j", "A", "abb", "wb", "z", "ab", "bar", "pb", "ba", "ob", "B", "u", "mb", "c", "bi", "e", "fb", "binary", "bs", "x", "h", "d", "y", "db", "v", "beta", "aa", "f", "sb", "g", "be", "cb", "rb"], "s": ["fs", "hs", "qs", "ms", "n", "string", "aws", "p", "sym", "m", "gs", "sets", "ips", "sync", "sv", "js", "tests", "ls", "ds", "ins", "ss", "session", "ns", "groups", "c", "ses", "e", "series", "h", "ts", "xs", "su", "states", "ssl", "ps", "es", "names", "services", "f", "strings"], "br": ["bre", "res", "ctr", "ch", "err", "Br", "img", "rs", "tr", "sr", "buf", "vr", "result", "BR", "browser", "j", "cr", "arr", "dr", "gr", "ibr", "ocr", "rus", "bc", "mr", "fr", "HR", "ber", "or", "lr", "pr", "bro", "erer", "bridge", "ler", "str", "hr", "bal", "ur", "bl", "rb"], "regex": [" Repattern", "rgex", "rece", " Rerex", "repattern", "REce", "RErex", "rerex", "REpattern", "rrex", " Rece", "REgex", " Regex", "rce", "rpattern"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\nimport java.math.BigInteger;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t// \u5165\u529b\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\t\\n\t\t// \u8a08\u7b97\\n\t\tString result = \"No\";\\n\t\tfor(int i = 0; i < s.length(); i++){\\n\t\t    String now = s.substring(i, s.length()) + s.substring(0, i);\\n\t\t    if(now.equals(t)) result = \"Yes\";\\n\t\t}\\n\t\t\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(result);\\n\t}\\n}\\n", "target": "220", "substitutes": {"sc": [" pars", " sp", " sm", "sf", "sa", "sq", "an", "ann", " ser", " scr", "sci", "ss", " arr", " subp", "Sc", " ar", " SC", " res", " ans", "scan", " Sc", "sp", "sb", " sl", " rc", " scans", "SC", "gram"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A=sc.nextInt(),B=sc.nextInt();\\n\t\tint temp = A+B;\\n\t\tif(A-B > temp) temp = A-B;\\n\t\tif(A*B > temp) temp = A*B;\\n\t\tSystem.out.println(temp);\\n\t}\\n}\\n", "target": "188", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "cur", "cs", "ser", "ca", "cer", "sf", "sr", "com", "cc", "tc", "soc", "app", "acc", "enc", "sync", "cr", "sl", "sq", "osc", "lc", "cont", "bc", "sci", "ss", "ci", "instance", "cl", "scope", "se", "c", "Sc", "sem", "str", " SC", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "SC"], "A": ["a", "API", "Alpha", "U", "E", "I", "This", "HA", "AC", "As", "Ab", "AF", "AB", "Ca", "C", "T", "alpha", "EA", "AMI", "PA", "LA", "AA", "G", "W", "N", "IA", "AS", "ANY", "D", "H", "AW", "Y", "NA", "L", "Average", "AR", "MA", "M", "SA", "Az", "X", "AD", "Area", "Offset", "Ma", "mA", "TA", "AH", "S", "P", "F", "BA", "AP", "Fa", "FA", "CA"], "B": ["O", "U", "E", "I", "BS", "Block", "Ab", "Bi", "Tab", "AB", "J", "C", "T", "BF", "BE", "NB", "SB", "MB", "G", "FB", "PB", "b", "N", "W", "Q", "QB", "R", "BC", "GB", "D", "UB", "H", "Y", "DB", "Z", "L", "M", "X", "LB", "Bs", "BA", "OB", "F", "P", "V", "EB", "BB", "BI", "WB"], "temp": ["old", "status", "get", "T", "index", "null", "copy", "empty", "W", "EMP", "partial", "emp", "cel", "stable", "data", "pack", "Temperature", "tmp", "keep", "pre", "offset", "iter", "cut", "w", "base", "unit", "wait", "valid", "length", "count", "cache", "porary", "test", "n", "output", "tem", "wa", "fake", "zero", "this", "input", "now", "size", "num", "c", "init", "api", "current", "clean", "Temp", "i", "wrap", "a", "flat", "diff", "tc", "default", " Temp", "max", "level", "key", "shift", "f"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n        String s=br.readLine().trim();\\n        long res=0;\\n        for(int i=0;i<s.length();i++){\\n            res+=(Integer.parseInt(String.valueOf(s.charAt(i))));\\n        }\\n        if(res%9==0){\\n            System.out.println(\"Yes\");\\n        }\\n        else{\\n            System.out.println(\"No\");\\n        }\\n\\n\\n\\n\\n\\n    }\\n\\n\\n\\n\\n\\n\\n\\n}\\n", "target": "93", "substitutes": {"br": ["io", "err", "Br", "img", "bb", "ref", "tr", "sr", "er", "buf", "yr", "result", "BR", "http", "r", "browser", "cr", "arr", "b", "gr", "bar", "ocr", "dr", "org", "bc", "obj", "fr", "stream", "HR", "src", "bs", "ber", "bridge", "bt", "bro", "str", "hr", "cro", "div", "sp", "reader", "cb", "wr", "rb"], "s": ["a", "fs", "qs", "results", "cs", "si", "blocks", "string", "rs", "p", "line", "sc", "gs", "os", "r", "sets", "sync", "sv", "sl", "js", "abs", "ls", "b", "ds", "ins", "in", "input", "ss", "ws", "its", "ns", "l", "u", "ses", "e", "bs", "xs", "source", "S", "ps", "str", "v", "es", "f", "as", "o", "sp", "sb", "uns", "strings", "rows"], "res": ["results", "nr", "vals", "number", "Res", "re", "cons", "err", "cs", "ms", "blocks", "rs", "ress", "result", "nos", "req", "ras", "rev", "os", "r", "gr", "max", "rex", "response", "rus", "Rs", "RES", "mr", "ris", "rss", "acts", "x", "resp", "right", "ps", "val", "rest", "ids", "es", "rez", "ret", "ons", "json", "resolution", "features", "reg", "pres", "ries", "details", "seq", "rows", "ver"], "i": ["xi", "gi", "I", "io", "si", "di", "p", "oi", "volume", "abi", "ii", "hi", "index", "chi", "j", "pass", "t", "z", "ini", "mu", "b", "ai", "in", "length", "ji", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "c", "e", "eni", "x", "h", "pi", "id", "ip", "uri", "d", "v", "ix", "slice", "f", "o", "ui", "k"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint integerX = sc.nextInt();  //\u5143\u306e\u6574\u6570\\n\t\tint youso = sc.nextInt();  //\u6574\u6570\u5217\u306e\u8981\u7d20\u6570\\n\t\tList<Integer> list = new ArrayList<Integer>();  //\u6574\u6570\u5217\u3092\u5165\u308c\u308b\u30ea\u30b9\u30c8\\n\\n\t\t//\u914d\u5217\u3092\u5165\u529b\\n\t\tfor(int i=0 ; i<youso ; i++) {\\n\t\t\tlist.add(sc.nextInt());\\n\t\t}\\n\\n\t\t//\u914d\u5217\u304c\u7a7a\u307e\u305f\u306f\u6574\u6570X\u304c\u542b\u307e\u308c\u306a\u3044\u5834\u5408\\n\t\tif(list.isEmpty() || ! list.contains(integerX)) {\\n\t\t\tSystem.out.println(integerX);\\n\t\t\treturn;\\n\t\t}\\n\\n\t\t//\u6574\u6570X\u304b\u30891\u305a\u3064\u8db3\u3057\u5f15\u304d\u3057\u3066\u3044\u304f\\n\t\tfor(int i=1 ; i<=100 ; i++) {\\n\t\t\tif(! list.contains(integerX-i)) {\\n\t\t\t\tSystem.out.println(integerX-i);\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\telse if(! list.contains(integerX+i)) {\\n\t\t\t\tSystem.out.println(integerX+i);\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}", "target": "228", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "desc", "cs", "search", "ca", "sf", "cc", "ner", "sec", "soc", "sync", "osc", "system", "cr", "sq", "ec", "bc", "sci", "ss", "ci", "cmp", "cl", "scope", "se", "c", "isc", "Sc", "asc", " SC", "scan", "nc", " Sc", "uc", "sp", "sb", "cb", "parser", "SC", "spec"], "integerX": [" integerN", "integerN", "numX", " integerx", "IntegerX", "integerx", "IntegerN", "numx", "Integerx", "numN"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String n = sc.next();\\n        sc.close();\\n\\n        String ans = \"\";\\n        for (int i = 0; i < n.length(); i++) {\\n            if (n.charAt(i) == '1') {\\n                ans += \"9\";\\n            } else {\\n                ans += \"1\";\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n\\n}\\n", "target": "111", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sr", "cc", "ner", "sec", "soc", "na", "sync", "cr", "sl", "osc", "ec", "st", "lc", "sq", "ocr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "Sc", "asc", "can", "ct", "cv", " SC", "sch", "mc", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "SC"], "n": ["nu", "network", "a", "Ns", "name", "p", "s", "nt", "cn", "na", "enc", "ne", "nan", "ln", "none", "an", "sn", "ann", "N", "in", "rn", "nn", "no", "ns", "not", "node", "l", "u", "en", "c", "fn", "e", "conn", "dn", "next", "nw", "v", "nc", "o", "nl", "net", "gn", "g"], "ans": ["annis", "ks", "ants", "cs", "AN", "lan", "ings", "anon", "s", "vers", "amps", "na", "ents", "ANS", "os", "nan", "ln", "ens", "ips", "ana", "an", "sk", "ann", "ls", "aces", "ars", "ds", "ins", "vs", "olds", "atan", "cas", "nn", "artifacts", "ads", "san", "ns", "can", "acts", "reads", "ats", "eps", "aus", "ions", "aned", "scan", "ons", "anc", "asts", "ays", "ras"], "i": ["a", "xi", "gi", "I", "io", "si", "di", "p", "oi", "m", "abi", "ii", "hi", "part", "index", "j", "chi", "ni", "z", "ini", "mu", "b", "ai", "in", "phi", "end", "multi", "li", "ci", "ti", "data", "ji", "ri", "qi", "u", "bi", "c", "ori", "it", "eni", "x", "pi", "h", "fi", "id", "ip", "uri", "d", "v", "ix", "key", "f", "o", "ui"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint a,b;\\n\t\tint d,r;\\n\t\tdouble f;\\n\\n\t\ta = scan.nextInt();\\n\t\tb = scan.nextInt();\\n\\n\t\td = a / b;\\n\t\tr = a % b;\\n\t\tf = (double)a / (double)b;\\n\\n\t\tSystem.out.printf(\"%d %d %.5f\\n\", d, r, f);\\n\t}\\n}", "target": "90", "substitutes": {"scan": ["pan", "span", "pin", "gen", "search", "n", "bin", "connect", "query", "ner", "result", "sc", "app", "na", "ln", "skip", "sync", "an", "sn", "ann", "fan", "in", "end", "nn", "all", "sign", "san", "not", "se", "l", "inter", "conn", "can", "x", "out", "conv", "cat", "look", "slice", "clean", "server", "Scan", "util", "nl", "walk", "ignore", "watch", "iter", "parse", "con"], "a": ["w", "fa", "ar", "ga", "ca", "n", "au", "p", "s", "ac", "ia", "m", "aaa", "alpha", "wa", "ada", "A", "sa", "ea", "ma", "an", "ab", "ai", "ae", "ba", "pa", "da", "l", "aj", "u", "aw", "c", "e", "af", "am", "x", "area", "la", "art", "aa", "as", "auto", "g", "i", "ad"], "b": ["bas", "w", "xb", "bur", "n", "base", "bb", "p", "lb", "nb", "bd", "eb", "j", "wb", "abb", "z", "ab", "ib", "length", "bc", "ba", "B", "l", "u", "bi", "c", "e", "fb", "bs", "x", "h", "y", "db", "v", "bf", "aa", "o", "sb", "be", "cb", "i", "ad", "rb"], "d": ["dd", "w", "n", "di", "dy", "p", "wd", "bd", "m", "t", "z", "dt", "ds", "dad", "in", "D", "da", "l", "u", "c", "e", "x", "dx", "id", "y", "db", "dat", "fd", "md", "i", "ad"], "r": ["nr", "w", "err", "ar", "n", "p", "sr", "er", "s", "m", "j", "t", "z", "R", "range", "fr", "q", "l", "u", "c", "e", "x", "rr", "pr", "rad", "rt", "y", "v", "o", "i", "ur", "rd", "k", "rb"], "f": ["fs", "fc", "w", "fa", "n", "sf", "p", "fp", "m", "j", "t", "z", "func", "fe", "df", "end", "fr", "q", "l", "u", "c", "e", "fb", "rf", "h", "x", "function", "F", "y", "v", " F", "fd", "o", "g", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        String wrongA;\\n        String wrongB;\\n\\n        Scanner scanner = new Scanner(System.in);\\n        wrongA = scanner.nextLine();\\n        wrongB = scanner.nextLine();\\n        scanner.close();\\n\\n        if (!\"1\".equals(wrongA) && !\"1\".equals(wrongB)) {\\n            System.out.println(\"1\");\\n        } else if (!\"2\".equals(wrongA) && !\"2\".equals(wrongB)) {\\n            System.out.println(\"2\");\\n        } else if (!\"3\".equals(wrongA) && !\"3\".equals(wrongB)) {\\n            System.out.println(\"3\");\\n        }\\n\\n    }\\n}", "target": "236", "substitutes": {"wrongA": ["wrongAM", " incorrectA", "yeahAM", "wrongAA", "correctAA", "badC", "correctB", "wrongE", "correcta", "wronga", "yeahA", "broken1", "missinga", "badCA", "yeahAc", " wrongAM", "correctCA", " wrongCA", " incorrectAc", "badE", "rightB", " wrongE", "correct1", "wrongC", "missingA", "correctC", "wrongCA", " wrongAA", " incorrectAM", "missingB", "badA", "rightAA", "right1", "correctE", "brokenA", "correctA", " wrongC", "brokena", " incorrectC", "brokenB", "wrongAc", "wrong1", " wrongAc", "rightA", "righta", "yeahC"], "wrongB": ["errorWB", "errorA", "correctb", "differentWB", "rightb", "correctEB", "rightEB", "correctB", "nothingBB", "differentBB", "errorB", "rightWB", "rightBB", "wrongBB", "rightB", "correctWB", "workA", "workB", "missingA", "workb", "wrongAb", "wrongEB", "missingWB", "nothingB", "missingB", "wrongb", "missingb", "correctBB", "errorEB", "correctAb", "correctA", "nothingAb", "differentA", "differentB", "rightAb", "rightA", "nothingA", "wrongWB"], "scanner": ["scaner", "analyer", "nerinner", "analyner", "aninner", "nerker", "anner", "nerning", "analyning", "scanter", "canner", "Scaner", "Scanner", "nerer", "caninner", "nerter", "canker", "caner", "anker", "scanker", "Scanker", "canter", "Scanter", "scanning", "aner", "nerner", "analyker", "scaninner", "Scaninner", "Scanning"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\n\\npublic class Main {\\n    private static Scanner sc;\\n    public static void main(String[] args) {\\n        Main instance = new Main();\\n        sc = instance.new Scanner();\\n        instance.solve();\\n    }\\n\\n    private void solve() {\\n        try {\\n            int n = sc.nextInt();\\n            int[] d = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                d[i] = sc.nextInt();\\n            }\\n            Arrays.sort(d);\\n\\n            int count = 0;\\n\\n            System.out.println(d[n/2] - d[n/2-1]);\\n\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n\\n    private class Scanner {\\n        String[] s;\\n        int i;\\n        BufferedReader br;\\n        String regex = \" \";\\n\\n        public Scanner() {\\n            s = new String[0];\\n            i = 0;\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        @Override\\n        protected void finalize() throws Throwable {\\n            try {\\n                super.finalize();\\n            } finally {\\n                destruction();\\n            }\\n        }\\n\\n        private void destruction() throws IOException {\\n            if (br != null) br.close();\\n        }\\n\\n        public String next() throws IOException {\\n            if (i < s.length) return s[i++];\\n            String st = br.readLine();\\n            while (st == \"\") st = br.readLine();\\n            s = st.split(regex, 0);\\n            i = 0;\\n            return s[i++];\\n        }\\n\\n        public int nextInt() throws NumberFormatException, IOException {\\n            return Integer.parseInt(next());\\n        }\\n\\n        public Long nextLong() throws NumberFormatException, IOException {\\n            return Long.parseLong(next());\\n        }\\n\\n        public Double nextDouble() throws NumberFormatException, IOException {\\n            return Double.parseDouble(next());\\n        }\\n    }\\n}", "target": "119", "substitutes": {"sc": ["pc", "exec", "esc", "sw", "rc", "ch", "cs", "ca", "sub", "cer", "ctx", "cli", "cc", "contract", "null", "sync", "cr", "osc", "ec", "system", "sq", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "ct", "cv", "RC", " SC", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "parser", "parse", "SC", "spec"], "instance": ["test", "rc", "parent", "client", "builder", " instances", "command", "section", "result", "ance", "app", "sup", "inst", "default", "system", "Instance", "config", "class", "image", "manager", "context", "inner", "obj", "center", "performance", "component", "c", "init", "master", "self", " inst", "impl", "root", "connection", "example", "server", "util", "reader", "parser", "project"], "n": ["network", "number", "non", "p", "nb", "m", "nt", "ne", "j", "r", "t", "ni", "z", "sn", "b", "N", "in", "nn", "size", "no", "ns", "l", "u", "en", "c", "num", "e", "h", "out", "x", "dn", "left", "y", "v", "len", "nc", "f", "nl", "o", "net", "k"], "d": ["dd", "done", "dos", "di", "p", "m", "cd", "j", "r", "t", "du", "dt", "b", "dr", "ind", "ds", "dom", "dict", "ded", "data", "D", "dh", "nd", "da", "l", "u", "c", "e", "did", "and", "x", "dn", "dx", "id", "db", "dc", "v", "dir", "dat", "f", "fd", "o", "dim", "md", "sd", "rd", "ad", "defined"], "i": ["xi", "gi", "a", "I", "is", "io", "si", "ie", "di", "p", "oi", "cli", "diff", "m", "ii", "index", "j", "t", "ni", "z", "ini", "mu", "b", "ai", "in", "phi", "inner", "multi", "li", "ti", "ci", "data", "ik", "q", "ri", "qi", "u", "bi", "c", "l", "e", "init", "it", "iu", "ori", "mi", "pi", "x", "id", "ip", "uri", "left", "y", "v", "ix", "slice", "vi", "key", "f", "ui", "o", "info", "temp"], "count": ["list", "number", "parent", "code", "base", "ref", "name", "set", "diff", "counter", "order", "size", "cache", "total", "all", "num", "c", "last", "depth", "left", "Count", "len", "current", "found", "call", "start", "seq", "col"], "s": ["comments", "izes", "si", "space", "ops", "ips", "sv", "outs", "b", "ims", "ches", "ses", "ves", "ts", "su", "states", "uns", "rows", "qs", "is", "ms", "p", "sts", "sym", "resses", "sl", "js", "abs", "ins", "ws", "u", "h", "ssl", "forms", "ions", "services", "o", "fs", "parts", "ks", "m", "os", "sets", "ss", "ns", "l", "ends", "c", "xs", "words", "ps", "sites", "shell", "ans", "a", "ments", "rs", "ings", "acks", "gs", "r", "t", "ls", "ds", "ists", "e", "opens", "bs", "S", "v", "es", "ids", "f", "seconds", "strings"], "br": ["plug", "ver", "io", "ro", "ch", "err", "Br", "ar", "img", "bb", "rs", "tr", "p", "sr", "er", "buf", "vr", "yr", "result", "BR", "http", "r", "browser", "jar", "cr", "arr", "b", "dr", "gr", "bar", "rel", "org", "bc", "obj", "mr", "raf", "fr", "fb", "HR", "src", "bs", "ber", "bridge", "or", "pr", "bro", "ler", "fore", "str", "bh", "db", "ger", "hr", "cro", "div", "sp", "reader", "bal", "ur", "bl", "rb"], "regex": ["Regex", "replex", "fregex", "REpattern", "rege", "recpattern", "Replex", "REgex", "refpattern", "Repattern", "repattern", "recgex", "frepattern", "rerex", "frerex", "refgex", "recplex", "REse", "reggex", "Rerex", "refse", "freplex", "rese", "regse", "recrex", "regge", "REge", "refge", "regpattern"], "st": ["sw", "sta", "butt", "stru", "string", "pt", "stop", "p", "struct", "ste", "sts", "set", "ft", "stand", "sth", "sty", "r", "stri", "t", "est", "sl", "sn", "ost", "b", "ld", "fe", "std", "dr", "tt", "ss", "Str", "stack", "fr", "nd", "cl", "se", "ast", "ist", "c", "stress", "text", "pr", "ct", "str", "rest", "ut", "sh", "sp", "ST", "sb", "stage", "start", "rd", "bl", "St"]}}
{"code": "\\nimport java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tlong a=sc.nextLong();\\n\t\tlong b=sc.nextLong();\\n\t\tlong c=sc.nextLong();\\n\t\tlong d=sc.nextLong();\\n\t\t\\n\t\tlong x=0;\\n\t\t\\n\t\tif(b<=0 && c<=0) {\\n\t\t\tx=a*c;\\n\t\t}\\n\t\telse if(a>=0&&d>=0){\\n\t\t\tx=b*d;\\n\t\t}\\n\t\telse if(b<=0&&c>=0) {\\n\t\t\tx=b*c;\\n\t\t}\\n\t\telse if(a>=0&&d<=0){\\n\t\t\tx=a*d;\\n\t\t}\\n\t\telse if(a<=0&&b>=0&&c<=0&&d>=0) {\\n\t\t\tif(a*c>=b*d) {\\n\t\t\t\tx=a*c;\\n\t\t\t}\\n\t\t\telse {\\n\t\t\t\tx=b*d;\\n\t\t\t}\\n\t\t}\\n\t\telse if(a<=0&&b>=0&&d<=0) {\\n\t\t\tx=a*c;\\n\t\t}\\n\t\telse if(a<=0&&b>=0&&c>=0) {\\n\t\t\tx=b*d;\\n\t\t}\\n\t\tSystem.out.println(x);\\n\t\tsc.close();\\n\t}\\n}", "target": "244", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "ca", "cor", "cer", "sf", "cms", "sub", "com", "ctx", "cam", "cc", "ner", "tc", "cli", "soc", "exp", "enc", "pl", "sync", "osc", "cr", "sq", "lc", "cont", "coll", "bc", "sci", "ss", "cus", "cl", "scope", "se", "sys", "src", "Sc", "asc", "sche", "sem", "sm", "cv", "sch", "mc", "scan", "nc", "uc", "anc", "sim", "sh", "sp", "sb", "g", "cb", "parser", "SC", "con"], "a": ["w", "ga", "ar", "at", "n", "ca", "p", "ia", "alpha", "ac", "m", "s", "na", "r", "A", "sa", "ea", "t", "an", "ab", "ai", "ae", "ah", "ba", "pa", "da", "l", "aj", "u", "another", "e", "af", "area", "am", "art", "y", "va", "api", "aa", "f", "as", "o", "au", "ad"], "b": ["w", "ca", "n", "base", "bb", "p", "s", "nb", "ac", "bd", "eb", "r", "j", "wb", "t", "z", "ab", "ib", "an", "pb", "bar", "bc", "ae", "ba", "ob", "B", "l", "u", "bi", "e", "fb", "bs", "h", "y", "db", "v", "api", "aa", "bf", "f", "o", "sb", "g", "be", "cb", "i", "ad", "rb"], "c": ["ch", "w", "col", "cs", "ca", "n", "code", "p", "C", "s", "ac", "cc", "m", "cd", "r", "t", "z", "ec", "lc", "cf", "count", "bc", "ci", "q", "l", "u", "e", "ce", "h", "y", "v", "dc", "cp", "nc", "f", "k", "o", "cu", "cy", "g", "i", "ad", "con"], "d": ["dd", "w", "n", "dy", "p", "s", "bd", "m", "cd", "r", "j", "t", "z", "dt", "ds", "df", "D", "data", "dh", "nd", "da", "l", "u", "e", "h", "dn", "dx", "dl", "y", "db", "v", "dc", "f", "dat", "fd", "o", "g", "sd", "i", "ad"], "x": ["xi", "fix", "wx", "best", "px", "xb", "fill", "w", "xe", "p", "ctx", "xt", "exp", " xx", "fx", "index", "cross", "wa", "php", "t", "some", "z", "work", "config", "rex", "xc", "xy", "rx", "xf", "data", "lex", "wy", "ax", "full", "l", "xxxxxxxx", "e", "xa", "ext", "xes", "xs", "X", "tx", "h", "dx", "xx", "python", "val", "y", "v", "xxx", "ix", "key", "ex", "sex", "xp", "f", "plus", "abc", "xml", "check"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    String x = s.substring(0,2);\\n    String l = s.substring(2,4);\\n    int y = Integer.parseInt(x);\\n    int m = Integer.parseInt(l);\\n    // System.out.println(y + \" \" + m);\\n    if(0<y && y<=12 && 0<m && m<=12){\\n      System.out.println(\"AMBIGUOUS\");\\n    }else if(0<m && m<=12){\\n      System.out.println(\"YYMM\");\\n    }else if(0<y && y<=12){\\n      System.out.println(\"MMYY\");\\n    }else{\\n      System.out.println(\"NA\");\\n    }\\n  }\\n}\\n", "target": "5", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "desc", "cs", "si", "sub", "sf", "cc", "ner", "sec", "acc", "enc", "sync", "osc", "cr", "ec", "ocr", "bc", "sci", "ss", "proc", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "str", " SC", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "parser", "SC", "spec"], "s": ["fs", "a", "is", "w", "si", "n", "string", "sf", "space", "p", "aws", "gs", "os", "t", "south", "sv", "sl", "abs", "ls", "in", "your", "ws", "ss", "sports", "ns", "u", "c", "ses", "e", "series", "h", "su", "bis", "d", "es", "shell", "f", "services", "as", "o", "sb", "g", "ans", "i", "strings"], "x": ["a", "xi", "wx", "px", "w", "n", "p", "index", "r", "t", "z", "b", "in", "xy", "rx", "size", "q", "ax", "u", "c", "e", "h", "xs", "X", "tx", "dx", "xx", "v", "ix", "ex", "f", "i", "k"], "l": ["n", "loc", "le", "ul", "ln", "z", "sl", "ls", "lc", "lo", "length", "li", "el", "L", "lp", "fl", "c", "u", "lr", "kl", "lin", "la", "dl", "ll", "v", "ly", "len", "shell", "nl", "i", "bl"], "y": ["a", "w", "n", "p", "yr", "j", "t", "z", "yy", "b", "ym", "Y", "py", "u", "ys", "c", "e", "yt", "h", "xx", "d", "f", "o", "i"], "m": ["ms", "man", "mn", "ma", "mu", "mass", "b", "nm", "dm", "cm", "min", "mx", "e", "em", "M", "mi", "my", "sm", "mod", "d", "v", "mad", "f", "o", "md", "ym", "mm", "mid"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner(System.in);\\n\\n\t\tString line = sc.nextLine();\\n\t\tint count = 0;\\n\t\tfor (int i = 0; i < line.length(); i++) {\\n\t\t\tif (line.charAt(i) == '1') {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n\\n\tstatic class FastScanner {\\n\\n\t\tprivate BufferedReader reader = null;\\n\t    private StringTokenizer tokenizer = null;\\n\\n\t    public FastScanner(InputStream in) {\\n\t        reader = new BufferedReader(new InputStreamReader(in));\\n\t        tokenizer = null;\\n\t    }\\n\\n\t    public String next() {\\n\t        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t            try {\\n\t                tokenizer = new StringTokenizer(reader.readLine());\\n\t            } catch (IOException e) {\\n\t                throw new RuntimeException(e);\\n\t            }\\n\t        }\\n\t        return tokenizer.nextToken();\\n\t    }\\n\\n\t    public String nextLine() {\\n\t        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t            try {\\n\t                return reader.readLine();\\n\t            } catch (IOException e) {\\n\t                throw new RuntimeException(e);\\n\t            }\\n\t        }\\n\\n\t        return tokenizer.nextToken(\"\\n\");\\n\t    }\\n\\n\t    public long nextLong() {\\n\t        return Long.parseLong(next());\\n\t    }\\n\\n\t    public int nextInt() {\\n\t        return Integer.parseInt(next());\\n\t    }\\n\\n\t    public double nextDouble() {\\n\t         return Double.parseDouble(next());\\n\t     }\\n\\n\t    public int[] nextIntArray(int n) {\\n\t        int[] a = new int[n];\\n\t        for (int i = 0; i < n; i++)\\n\t            a[i] = nextInt();\\n\t        return a;\\n\t    }\\n\\n\t    public long[] nextLongArray(int n) {\\n\t        long[] a = new long[n];\\n\t        for (int i = 0; i < n; i++)\\n\t            a[i] = nextLong();\\n\t        return a;\\n\t    }\\n\\n\t}\\n\\n\\n}\\n", "target": "165", "substitutes": {"sc": ["pc", "esc", "rc", "ch", "cs", "search", "ca", "sub", "cer", "cc", "ner", "sec", "r", "system", "osc", "cr", "config", "ec", "lc", "bc", "sci", "cle", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "parse", "SC"], "line": ["Line", "file", "number", "inline", "cell", "LINE", "value", "string", "code", "word", "section", "header", "log", "strip", "letter", "ine", "le", "pass", "sync", "sl", "frame", "entry", "lc", "lines", "url", "end", "error", "data", "row", "page", "el", "cl", "l", "e", "out", "text", "next", "lin", "source", "block", "look", "style", "message", "character", "lf", "buffer", "f", "rule", "info"], "count": ["test", "number", "list", "parent", "core", "weight", "old", "char", "code", "string", "base", "group", "index", "counter", "max", "coll", "length", "level", "error", "size", "use", "cache", "total", "read", "child", "l", "num", "c", "other", "limit", "keep", "text", "sum", "id", "depth", "offset", "Count", "len", "add", "f", "time", "stat", "info", "second", "ignore", "start", "found", "col"], "i": ["xi", "gi", "I", "is", "io", "si", "di", "ie", "ami", "name", "p", "oi", "m", "ii", "hi", "index", "j", "r", "ni", "z", "mini", "ini", "b", "ai", "length", "phi", "multi", "inner", "li", "ci", "q", "ri", "qi", "u", "bi", "c", "l", "e", "init", "ori", "eni", "iu", "mi", "x", "pi", "h", "it", "yi", "my", "id", "ip", "uri", "d", "y", "v", "ix", "slice", "key", "f", "o", "ui", "info", "k"], "reader": ["per", "file", "rc", "io", "builder", "handler", "cur", "parser", "er", "ner", "loader", "worker", "rar", "service", "r", "driver", "system", "resource", "entry", "writer", "reading", "input", "inner", "rer", "url", "bird", "row", "data", "lock", "read", "l", "ri", "stream", "e", "ruby", "editor", "out", "rr", "oder", "source", "ler", "Reader", "ry", "processor", "feed", "buffer", "enter", "server", "ter", "iter"], "tokenizer": ["Tokenize", "Tokenization", "okenizer", "initialiser", "Tokenener", "serializers", "initializer", "okenizable", " tokenener", "okenizing", " tokenner", "tokener", "okener", "tokenizers", "initialize", " tokenizable", "Tokenizer", "Tokenizable", "tokenener", "okenener", "tokenizable", " tokenizers", " tokenizing", "tokenize", "authorize", "serialer", "serialization", "initialization", " tokenize", "okenizers", "okenization", "serializer", "okeniser", "tokenization", "authorizer", "tokeniser", "Tokeniser", " tokenister", " tokeniser", "authorister", "serialize", "Tokenner", "okenize", "tokenner", "Tokenizing", "tokenister", "okenner", "okenister", " tokenization", " tokener", "tokenizing", "authoriser"], "in": ["exec", "din", "file", "is", "io", "err", "In", "bin", "string", "socket", "loop", "m", "log", "r", "resource", "ini", "b", "doc", "ins", "image", "inf", "input", "inner", "data", "lock", "read", "l", "c", "stream", "init", "e", "it", "out", "lin", "source", "id", "inc", "path", "str", "login", "buffer", "ex", "connection", "f", "server", "as", "from", "IN", "inn"], "n": ["network", "span", "number", "w", "nat", "name", "p", "s", "m", "nt", "nor", "na", "ne", "j", "r", "t", "none", "z", "an", "sn", "N", "no", "size", "all", "ns", "not", "node", "l", "u", "en", "c", "num", "e", "init", "x", " N", "dn", "left", "d", "y", "v", "names", "f", "o", "net", "g", "k", "norm"], "a": ["span", "tta", "fac", "parent", "ga", "ar", "ca", "code", "p", "ia", "ac", "alpha", "s", "aaa", "na", "index", "A", "sa", "ea", "ana", "ma", "z", "an", "action", "ab", "b", "ai", "aux", "ba", "anta", "ata", "data", "all", "da", "aj", "aw", "c", "area", "am", "ka", "la", "val", "va", "y", "ha", "aa", "f", "k", "as", "o", "active", "array", "ama", "g", "auto", "au", "ad"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\\n\t\tint N=sc.nextInt();\\n\\n\t\tint[] W=new int[N+1];\\n\t\tW[0]=0;\\n\\n\t\tfor(int i=0;i<N;i++)  W[i+1]=sc.nextInt()+W[i];\\n\\n\t\tint ans=1000000;\\n\\n\t\tfor(int i=1;i<N;i++) {\\n\t\t\tint S1=W[i];\\n\t\t\tint S2=W[N]-W[i];\\n\t\t\tans=Math.min(Math.abs(S1-S2), ans);\\n\t\t}\\n\\n\t\tSystem.out.println(ans);\\n\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "2", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "sub", "cer", "sr", "cc", "ner", "sec", "tc", "na", "enc", "sync", "system", "cr", "osc", "ec", "sq", "lc", "cont", "bc", "sci", "ss", "ci", "scope", "se", "c", "src", "Sc", "can", "out", "asc", "sche", "sem", "cv", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "server", "sh", "sp", "sb", "parser", "SC", "con"], "N": ["O", "K", "Part", "E", "I", "U", "Na", "n", "Ns", "Len", "C", "T", "Ni", "NT", "Ne", "A", "G", "NN", "Size", "Q", "R", "H", "D", "Y", "Z", "B", "Num", "L", "Network", "M", "X", "No", "S", "P", "F", "Node", "V", "Count", "NS", "CNN", "KN", "Index", " n"], "W": ["O", "U", "E", "I", "Write", "w", "MW", "Sw", "Word", "WR", "DW", "T", "C", "Wh", "WA", "WE", "Ws", "G", "Q", "Weight", "R", "WC", "H", "AW", "Y", "CW", "VW", "Z", "NW", "B", "L", "TW", "M", "SW", "GW", "X", "We", "WS", "S", "F", "P", "V", "ML", "West", "FW", "New", "WP", "Web", "we"], "i": ["a", "xi", "gi", "I", "is", "io", "w", "si", "n", "ie", "di", "p", "oi", "s", "abi", "ii", "hi", "part", "index", "r", "chi", "j", "ni", "mini", "ini", "mu", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "inner", "ri", "qi", "u", "bi", "e", "init", "iu", "it", "ori", "mi", "x", "pi", "id", "ip", "uri", "d", "y", "v", "ix", "slice", "api", "key", "f", "ui", "o", "info"], "ans": ["a", "span", "annis", "ANN", "ants", "cons", "ations", "cs", "AN", "lan", "s", "ros", "annot", "amps", "offs", "na", "ANS", "os", "nan", "anas", "ana", "ares", "anges", "outs", "an", "sk", "ann", "ars", "ls", "ins", "annels", "lines", " means", "AS", "cas", "ss", "atan", "anned", "cus", "san", "ns", "acts", "can", "x", "ams", " spans", "S", "ats", "eps", "aus", "es", "ions", "aned", "scan", "ons", "anc", "as", "asin", " scans", "ays", "nas", "ras"], "S1": ["SOne", "COne", "U8", " S3", "N2", "U1", "s1", "U2", "N3", "C8", "S8", "S3", "C1", "N1", "s3", "s2", "C2", " S8", "UOne", " SOne"], "S2": ["s6", "N02", "SS2", "N2", " S5", "SS6", "s1", "SS02", "S02", "S6", "s5", "s02", "SS1", "N1", "S5", "s2", " S02", "N5", " S6"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint dishes[] = new int[5];\\n\\n\t\tfor(int i = 0; i < 5; i++) {\\n\t\t\t dishes[i] = Integer.parseInt(sc.nextLine());\\n\t\t}\\n\\n\t\tint diffmax = 0;\\n\t\tint diffmaxindex = 0;\\n\t\tint diff = 0;\\n\t\tfor(int i = 0; i < 5; i++) {\\n\t\t\tif(dishes[i]%10 != 0) {\\n\t\t\t\tdiff = (dishes[i]/10 + 1) * 10 - dishes[i];\\n\t\t\t}\\n\\n\t\t\tif(diffmax < diff) {\\n\t\t\t\tdiffmax = diff;\\n\t\t\t\tdiffmaxindex = i;\\n\t\t\t}\\n\t\t}\\n\\n\t\tint sumTime = 0;\\n\\n\t\tfor(int i = 0; i < 5; i++) {\\n\t\t\tif(i != diffmaxindex) {\\n\t\t\t\tif(dishes[i]%10 != 0) {\\n\t\t\t\t\tsumTime = sumTime + ((dishes[i]/10 + 1) * 10);\\n\t\t\t\t}else {\\n\t\t\t\t\tsumTime = sumTime + dishes[i];\\n\t\t\t\t}\\n\\n\t\t\t}\\n\t\t}\\n\\n\t\tsumTime = sumTime + dishes[diffmaxindex];\\n\\n\t\tSystem.out.println(sumTime);\\n\t}\\n\\n}", "target": "63", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "io", "desc", "sub", "sf", "cc", "ner", "nt", "sec", "soc", "exp", "irc", "cd", "sync", "system", "cr", "st", "osc", "ec", " scr", "bc", "sci", "se", "c", "src", "isc", "Sc", "or", "text", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "dishes": ["lills", "tances", "ldished", "bishes", "indills", "bishers", "dishers", "ldills", "lishing", "indishers", "Dances", " dills", " dishing", "pishers", "bances", "lishers", "dities", "pishes", "Dishes", "nishers", "lish", " dish", "Dirts", " dishers", "pills", "lishes", "Dishers", "bishing", "bished", "indities", "nities", "Dished", "tishes", "tills", " dances", "dills", "tirts", "dished", "nills", "dishing", "nishing", "Dities", "bills", "nances", "dirts", "indishes", "lances", "ldishes", "Dishing", " dirts", "dish", "Dish", "ldishing", "pishing", "nishes", "dances", "Dills"], "i": ["xi", "I", "io", "si", "di", "index", "mini", "ini", "b", "inner", "multi", "iu", "it", "pi", "fi", "id", "ix", "ui", "info", "g", "start", "ie", "name", "p", "cli", "ii", "mu", "lc", "ind", "ai", "phi", "ji", "li", "u", "ori", "mi", "yi", "module", "ip", "uri", "anti", "o", "gi", "m", "hi", "chi", "l", "c", "init", "eni", "my", "x", "field", "api", "a", "oi", "j", "ni", "in", "ci", "ti", "ri", "qi", "bi", "e", "source", "d", "y", "v", "slice", "key", "f"], "diffmax": [" differencepos", "refrest", "differentMAX", "differentlast", "refmax", "differentdefault", "diffrest", " diffMAX", "iffheight", " differencemin", " diffrest", " differencemod", " differencemax", "differentmin", "iffmax", "diffmod", "refMAX", "refmin", "errorheight", "errordefault", "iffpos", "diffmin", "ifflast", "diffdefault", "errormax", "diffheight", "diffpos", "difflast", "differentrest", "errorlast", " diffmin", "iffmin", " diffpos", " diffmod", "iffmod", "iffdefault", "diffMAX", "differentheight", "differentmax"], "diffmaxindex": ["difflastIndex", "diffMaxind", "diffparentx", "difflastx", "DiffmaxIndex", "diffindexindex", "diffMaxindex", "diffmaxposition", "diffmaxpos", "difflastind", "Diffaxind", "DiffaxIndex", "Diffaxindex", "Diffmaxx", "diffaxx", "diffaxindex", "difflastindex", "diffmaxind", "Diffmaxindex", "Diffmaxind", "diffMaxx", "diffmaxIndex", "diffindexposition", "diffaxind", "diffMaxposition", "Diffaxx", "diffparentpos", "diffmaxx", "Diffmaxposition", "diffindexIndex", "diffindexind", "Diffmaxpos", "diffparentIndex", "diffMaxIndex", "diffparentindex", "diffaxIndex", "diffMaxpos"], "diff": ["missing", "test", "old", "desc", "dist", "err", "value", "ref", " def", "low", " difference", "part", "flow", "default", "fail", "mix", "config", "show", "partial", "danger", "rel", "max", "count", "length", "comment", "conf", "end", "split", "error", "range", "cmp", "def", "not", "extra", "Diff", "dev", "d", "field", "slice", "different", "shift", "add", "f", "change", "info", "ignore", "found", "iff"], "sumTime": ["SumDuration", "matchCost", "umTimes", "sumCost", "summaryCost", "sumTimes", "sumLength", "SumTimes", "lossTime", " sumHours", "diffMax", "lossTimes", "umTime", "umPercent", "countTimes", " sumDuration", "scaleTimes", "summaryHours", "umLength", "sumHours", "sumDuration", "SumTime", " sumPercent", " sumSpeed", " sumMax", "sumSpeed", "SumPercent", "summarytime", "difftime", " sumMoney", "scaleTime", "matchMoney", "diffTime", "SumMax", " sumTimes", "summaryTimes", "Sumtime", " sumHour", "sumtime", "matchTimes", "lossMoney", "countHours", "diffTimes", "sumMax", "lossLength", "matchTime", " sumCost", "countTime", "sumMoney", "summaryMoney", " sumLength", "sumHour", "summaryTime", "SumSpeed", "umMoney", "scaletime", "SumHour", "summarySpeed", "sumPercent", "umHour", " sumtime", "umDuration", "counttime"]}}
{"code": "import java.io.*;\\nclass Main{\\n\tpublic static void main(String args[])throws Exception{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str = br.readLine();\\n\t\tString array[] = str.split(\" \");\\n\t\t\\n\t\t int x = Integer.parseInt(array[0]);\\n\t\tint y = Integer.parseInt(array[1]);\\n\t\t\\n\t\tif(x > y){\\n\t\t\tSystem.out.println(\"a\" + \" > \"+ \"b\");\\n\t\t}\\n\t\t\telse if(x == y){\\n\t\t\t\tSystem.out.println(\"a\" + \" == \" +\"b\");\\n\t\t\t\t}\\n\t\t\t\telse if(x < y){\\n\t\t\t\t\tSystem.out.println(\"a\" + \" < \" +\"b\");\\n\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\t}\\n", "target": "179", "substitutes": {"br": ["io", "err", "Br", "img", "brush", "string", "bb", "ref", "tr", "sr", "buf", "yr", "BR", "r", "STR", "browser", "cr", "arr", "b", "bar", "gr", "obj", "fr", "stream", "HR", "ori", "src", "bs", "ber", "out", "bridge", "bro", "wr", "bh", "hr", "div", "orb", "reader", "cb", "bl", "rb"], "str": ["list", "err", "char", "n", "string", "raw", "tr", "p", "line", "er", "sr", "s", "result", "strip", "enc", "r", "pass", "stri", "cr", "arr", "st", "sl", "b", "gr", "doc", "in", "input", "obj", "data", "Str", "fr", "read", "l", "c", "e", "out", "text", "pr", "f", "STR", "i", "strings", "wr"], "array": ["a", "list", "number", "collection", "ar", "address", "value", "string", "base", "p", "answer", "section", "result", "Array", "part", "r", "arr", "pair", "sample", "b", "entry", "bar", "coll", "image", "ray", "analysis", "multi", "map", "data", " arr", "object", "row", "range", "instance", "archive", "error", "binary", "type", "audio", "area", "element", "air", "format", "api", "record"], "x": ["a", "xi", "wx", "px", "w", "pos", "n", "code", "dy", "p", "m", "on", "wa", "index", "cross", "t", "z", "b", "xy", "xc", "rx", "ci", "lex", "pe", "ax", "q", "l", "u", "c", "e", "h", "xs", "X", "tx", "dx", "xx", "id", "d", "ix", "xxx", "v", "ex", "f", "o", "i"], "y": ["a", "ch", "w", "ny", "n", "dy", "p", "ay", "yan", "on", "j", "vy", "t", "oy", "z", "yy", "b", "in", "ym", "ya", "ky", "Y", "q", "l", "yo", "py", "u", "c", "ey", "e", "type", "yt", "h", "zy", "yi", "out", "xx", "d", "ry", "v", "f", "o", "sy", "cy", "i", "ye", "yu"]}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\t\tScanner sc = new Scanner(System.in);\\n\t\t\tString n = sc.next();\\n\\n\t\t\tn = n.replace('9', '*');\\n\t\t\tn = n.replace('1', '9');\\n\t\t\tn = n.replace('*', '1');\\n\t\t\tSystem.out.println(n);\\n\t\t}\\n\t}", "target": "111", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "desc", "search", "ca", "sub", "cer", "cc", "ner", "sec", "na", "enc", "acc", "sync", "osc", "cr", "sl", "st", "ec", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", "ng", "mc", "scan", "nc", "sel", "uc", "anc", "sh", "sp", "SC", "spec"], "n": ["nu", "network", "nr", "i", "br", "string", "non", "name", "p", "s", "nb", "nt", "cn", "na", "ne", "nan", "r", "ln", "j", "t", "none", "null", "ni", "an", "sn", "ann", "N", "original", "in", "pn", "inner", "rn", "nm", "nn", "no", "sign", "min", "ns", "not", "node", "l", "u", "en", "c", "fn", "e", "out", "text", "next", "dn", "nw", "d", "un", "y", "ng", "v", "nin", "nc", "o", "nl", "gn", "g", "k", "inn"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        String str = sc.next();\\n        char c = str.charAt(0);\\n        c++;\\n    System.out.println(c);\\n    }\\n}\\n", "target": "150", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\n \\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        String[] sl = new String[2];\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        Arrays.fill(sl,\"\");\\n        for(int i = 0; i < b; i++){\\n            sl[0] += a;\\n        }\\n        for(int i = 0; i < a; i++){\\n            sl[1] += b;\\n        }\\n        Arrays.sort(sl);\\n        System.out.println(sl[0]);\\n    }\\n}\\n", "target": "24", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "si", "cer", "sr", "ctx", "cc", "ner", "sec", "soc", "enc", "cr", "osc", "sq", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "su", "sche", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sp", "sb", "SC"], "sl": ["spl", "sw", "ser", "si", "string", "sf", "sr", "s", "sort", "sol", "serv", "pl", "loc", "le", "ul", "sa", "sv", "sk", "sn", "ls", "lc", "coll", "cel", "length", "zip", "ss", "split", "li", "cl", "rl", "l", "se", "sle", "fl", "el", "gl", "su", "lr", "kl", "la", "ct", "SL", "ssl", "dl", "str", "ll", "style", "sch", "slice", "sel", "sh", "Sl", "nl", "sb", "sil", "bl", "isl"], "a": ["w", "fa", "ga", "ca", "n", "base", "au", "p", "oa", "s", "alpha", "ac", "aaa", "na", "j", "A", "sa", "ea", "an", "ab", "ai", "ae", "ba", "pa", "da", "l", "aj", "u", "c", "e", "af", "area", "x", "h", "am", "asa", "la", "d", "y", "va", "aa", "f", "as", "o", "ama", "ad"], "b": ["w", "n", "base", "bb", "p", "s", "lb", "eb", "j", "r", "wb", "z", "ab", "ba", "ob", "boot", "B", "l", "u", "c", "e", "fb", "bs", "h", "x", "bis", "body", "d", "y", "v", "f", "abc", "o", "sb", "g", "k", "rb"], "i": ["gi", "xi", "I", "ei", "io", "si", "ie", "di", "p", "oi", "ii", "index", "j", "chi", "ni", "z", "ini", "mu", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "data", "zi", "ri", "qi", "u", "bi", "c", "e", "ori", "iu", "it", "init", "eni", "x", "pi", "fi", "id", "ip", "uri", "y", "ix", "api", "v", "f", "ui", "o", "info"]}}
{"code": "import java.util.*;\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    int max = 0,count=0,len=s.length();\\n    for(int i = 0;i < len;i++){\\n      switch(s.charAt(i)){\\n        case 'A':\\n          count++;\\n          break;\\n        case 'T':\\n          count++;\\n          break;\\n        case 'G':\\n          count++;\\n          break;\\n        case 'C':\\n          count++;\\n          break;\\n        default:\\n          count=0;\\n      }\\n      if(max < count)max=count;\\n    }\\n    System.out.println(max);\\n  }\\n}", "target": "100", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cur", "cs", "search", "ca", "cer", "cc", "ner", "sec", "acc", "enc", "osc", "cr", "ec", "lc", "ocr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", " SC", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "g", "SC"], "s": ["a", "qs", "is", "si", "n", "string", "rs", "blocks", "p", "m", "gs", "os", "r", "sets", "bytes", "t", "sv", "sl", "abs", "ls", "b", "ds", "in", "ws", "ss", "ns", "l", "u", "c", "ses", "e", "su", "bis", "xs", "words", "source", "S", "ssl", "d", "v", "es", "f", "services", "features", "sb", "g", "strings"], "max": ["chain", "list", "number", "load", "force", "parent", "height", "pos", "rank", "base", "code", "name", "MAX", "index", "default", "est", "with", "Max", "conf", "length", "size", "total", "no", "min", "ax", "range", "cl", "cache", "extra", "num", "c", "can", "last", "out", "limit", "x", "cat", "id", "sum", "depth", "right", "str", "rest", "key", "div", "act", "const", "info", "start", "wrap"], "count": ["test", "list", "number", "find", "force", "parent", "ch", "weight", "char", "code", "base", "name", "group", "p", "loop", "low", "cast", "part", "handle", "index", "default", "counter", "show", "coll", "length", "order", "multi", "match", "size", "cache", "total", "min", "amount", "full", "position", "num", "c", "close", "type", "limit", "keep", "sum", "id", "cat", "depth", "style", "offset", "cond", "Count", "key", "label", "const", "add", "act", "active", "found", "call", "start", "col", "check"], "len": ["span", "pos", "lim", "n", "elt", "base", "Len", "line", "nt", "part", "pl", "loc", "le", "ln", "sl", "lc", "ld", "length", "split", "li", "size", "total", "min", "l", "en", "num", "lon", "limit", "lin", "sum", "id", "depth", "dl", "ll", "val", "lf", "f", "iter"], "i": ["a", "xi", "gi", "I", "io", "si", "di", "p", "ii", "part", "index", "j", "chi", "t", "ni", "z", "ini", "b", "lc", "ai", "in", "length", "phi", "multi", "ji", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "c", "e", "it", "eni", "pi", "h", "x", "id", "ip", "uri", "d", "v", "ix", "slice", "f", "ui", "o", "info", "start", "k"]}}
{"code": "import java.io.PrintWriter;\\nimport java.io.FileNotFoundException;\\nimport java.util.InputMismatchException;\\nimport java.io.InputStream;\\nimport java.io.FileInputStream;\\nimport java.io.IOException;\\n\\npublic class Main {\\n    InputStream is;\\n\\n    int __t__ = 1;\\n    int __f__ = 0;\\n    int __FILE_DEBUG_FLAG__ = __f__;\\n    String __DEBUG_FILE_NAME__ = \"src/main/java/A1\";\\n\\n    FastScanner in;\\n    PrintWriter out;\\n\\n    public void solve() {\\n        String s = in.next();\\n        String t = in.next();\\n        int res = t.length();\\n        for (int i = 0; i < s.length(); i++) {\\n            for (int j = i + 1; j <= s.length(); j++) {\\n                String u = s.substring(i, j);\\n                if (u.length() != t.length()) continue;\\n\\n                int cnt = 0;\\n                for (int k = 0; k < u.length(); k++) {\\n                    if (u.charAt(k) != t.charAt(k)) cnt++;\\n                }\\n                res = Math.min(res, cnt);\\n            }\\n        }\\n        System.out.println(res);\\n    }\\n\\n    public void run() {\\n        if (__FILE_DEBUG_FLAG__ == __t__) {\\n            try {\\n                is = new FileInputStream(__DEBUG_FILE_NAME__);\\n            } catch (FileNotFoundException e) {\\n                e.printStackTrace();\\n            }\\n            System.out.println(\"FILE_INPUT!\");\\n        } else {\\n            is = System.in;\\n        }\\n        in = new FastScanner(is);\\n        out = new PrintWriter(System.out);\\n\\n        solve();\\n    }\\n\\n    public static void main(final String[] args) {\\n        new Main().run();\\n    }\\n}\\n\\n\\nclass FastScanner {\\n    private InputStream stream;\\n    private byte[] buf = new byte[1024];\\n    private int curChar;\\n    private int numChars;\\n\\n    public FastScanner(InputStream stream) {\\n        this.stream = stream;\\n        // stream = new FileInputStream(new File(\"dec.in\"));\\n    }\\n\\n    int read() {\\n        if (numChars == -1)\\n            throw new InputMismatchException();\\n        if (curChar >= numChars) {\\n            curChar = 0;\\n            try {\\n                numChars = stream.read(buf);\\n            } catch (IOException e) {\\n                throw new InputMismatchException();\\n            }\\n            if (numChars <= 0)\\n                return -1;\\n        }\\n        return buf[curChar++];\\n    }\\n\\n    public boolean isSpaceChar(int c) {\\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n    }\\n\\n    public boolean isEndline(int c) {\\n        return c == '\\n' || c == '\\r' || c == -1;\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] array = new int[n];\\n        for (int i = 0; i < n; i++)\\n            array[i] = nextInt();\\n\\n        return array;\\n    }\\n\\n    public int[][] nextIntMap(int n, int m) {\\n        int[][] map = new int[n][m];\\n        for (int i = 0; i < n; i++) {\\n            map[i] = nextIntArray(m);\\n        }\\n        return map;\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] array = new long[n];\\n        for (int i = 0; i < n; i++)\\n            array[i] = nextLong();\\n\\n        return array;\\n    }\\n\\n    public long[][] nextLongMap(int n, int m) {\\n        long[][] map = new long[n][m];\\n        for (int i = 0; i < n; i++) {\\n            map[i] = nextLongArray(m);\\n        }\\n        return map;\\n    }\\n\\n    public double nextDouble() {\\n        return Double.parseDouble(next());\\n    }\\n\\n    public double[] nextDoubleArray(int n) {\\n        double[] array = new double[n];\\n        for (int i = 0; i < n; i++)\\n            array[i] = nextDouble();\\n\\n        return array;\\n    }\\n\\n    public double[][] nextDoubleMap(int n, int m) {\\n        double[][] map = new double[n][m];\\n        for (int i = 0; i < n; i++) {\\n            map[i] = nextDoubleArray(m);\\n        }\\n        return map;\\n    }\\n\\n    public String next() {\\n        int c = read();\\n        while (isSpaceChar(c))\\n            c = read();\\n        StringBuilder res = new StringBuilder();\\n        do {\\n            res.appendCodePoint(c);\\n            c = read();\\n        } while (!isSpaceChar(c));\\n        return res.toString();\\n    }\\n\\n    public String[] nextStringArray(int n) {\\n        String[] array = new String[n];\\n        for (int i = 0; i < n; i++)\\n            array[i] = next();\\n\\n        return array;\\n    }\\n\\n    public String nextLine() {\\n        int c = read();\\n        while (isEndline(c))\\n            c = read();\\n        StringBuilder res = new StringBuilder();\\n        do {\\n            res.appendCodePoint(c);\\n            c = read();\\n        } while (!isEndline(c));\\n        return res.toString();\\n    }\\n\\n    public int[][] nextPackedIntArrays(int packN, int size) {\\n        int[][] res = new int[packN][size];\\n        for (int i = 0; i < size; i++) {\\n            for (int j = 0; j < packN; j++) {\\n                res[j][i] = nextInt();\\n            }\\n        }\\n        return res;\\n    }\\n}\\n", "target": "158", "substitutes": {"is": ["fs", "IS", "ios", "get", "ar", "isa", "ie", "iv", "cms", "ais", "p", "isu", "serv", "irc", "os", "est", "js", "isi", "ib", "vs", "ins", "iss", "image", "input", "inner", "ss", "ils", "im", "its", "lis", "ris", "ri", "ist", "init", "ori", "it", "or", "bis", "id", "ip", "was", "ics", "ps", "path", "iso", "es", "ints", "api", " IS", "Is", "act", "as", "us", "info", "has", "isl"], "__t__": [" __t___", "__d___", "__T__", "__f_______", " __f____", "__t_______", "__t____", "__j__", "__tf___", "__j___", "__d____", "__j____", "__t___", "__T_______", "__T____", " __t_______", "__d__", "__tf_______", "__tf____", "__tf__", "__f___", "__T___", "__f____", " __f___", " __f_______", " __t____"], "__f__": [" __t___", "__e__", "__d___", "__l__", " __f____", "__t____", "__l___", "__d____", "__t___", "__d__", "__e___", "__e____", "__f___", "__l____", "__f____", " __f___", " __t____"], "__FILE_DEBUG_FLAG__": ["__FILE_DEBUG_PORT___", "__FILE_DEBUG_PORT____", "__FILE_DEBUG_FLAG____", "__FILE_DEBUG_DIR__", "__FILE_DEBUGINGLOG__", "__FILE_DEBUG_PORT__", "__FILE_DEBUG_AG__", "__FILE_DEBUGINGFLAG__", "__FILE_DEBUG_AG____", "__FILE_DEBUG_LOG__", "__FILE_DEBUG_FLAG___", "__FILE_DEBUG_AG___", "__FILE_DEBUG_PL__", "__FILE_DEBUG_FILE__", "__FILE_DEBUG_PL___", "__FILE_DEBUG_PL____"], "__DEBUG_FILE_NAME__": ["__DEBUG_FILE_SIZE_", "__DEBUG_FILE_PATH_", "__DEBUG_FILE_NAME____", "__DEBUG_FILENName___", "__DEBUG_FILE_PATH____", "__DEBUG_FILENNAME___", "__DEBUG_FILE_Name_", "__DEBUG_FILE_SIZE____", "__DEBUG_FILENName____", "__DEBUG_FILE_SIZE___", "__DEBUG_FILE_PATH__", "__DEBUG_FILE_Name___", "__DEBUG_FILENName__", "__DEBUG_FILE_Name__", "__DEBUG_FILE_NAME_", "__DEBUG_FILE_SIZE__", "__DEBUG_FILE_PATH___", "__DEBUG_FILENNAME__", "__DEBUG_FILENNAME____", "__DEBUG_FILE_Name____", "__DEBUG_FILE_NAME___"], "in": ["a", "din", "pin", "re", "ios", "In", "bin", "n", "version", "p", "ic", "m", "null", "this", "cin", "ini", "thin", "b", "ins", "rin", "image", "input", "inner", "kin", "ai", "ci", "inf", "cache", "sin", "min", "win", "ax", "vin", "el", "c", "init", "binary", "src", "ina", "lin", "source", "inc", "con", "gin", "login", "isin", "f", "spin", "reader", "IN", "inn"], "out": ["Out", "dump", "list", "exec", "table", "parent", "io", "w", "window", "client", "err", "bin", "n", "string", "code", "name", "p", "line", "group", "output", "store", "write", "query", "exit", "result", "log", "user", "serv", "r", "default", "sync", "outs", "copy", "b", "doc", "writer", "post", "comment", "input", "error", "no", "obj", "object", "page", "cache", "lock", "all", "outer", "point", "pool", "init", "ou", "x", "call", "str", "OUT", "v", "again", "key", "ex", "connection", "to", "server", "o", "up", "net", "temp", "view", "IN", "co"], "s": ["a", "ks", "cs", "si", "n", "string", "p", "gs", "os", "r", "sets", "sv", "sl", "js", "abs", "b", "ls", "ds", "ins", "ss", "ns", "l", "se", "e", "ses", "series", "bs", "h", "su", "xs", "ts", "S", "ps", "y", "v", "es", "f", "services", "as", "o", "us", "sb", "ans", "strings"], "t": ["et", "a", "test", "flat", "token", "w", "at", "n", "pt", "string", "tr", "p", "T", "template", "m", "txt", "r", "this", "st", "b", "tt", "unt", "l", "c", "e", "it", "tp", "type", "x", "ts", "ta", "tu", "tm", "rt", "d", "qt", "str", "y", "v", "ut", "ant", "tf", "f", "to", "o", "temp", "wt"], "res": ["results", "vals", "rc", "nr", "Res", "re", "cons", "css", "err", "ms", "cs", "rs", "ress", "cells", "sol", "result", "nos", "req", "rev", "os", "r", "cr", "arr", "js", "ores", "gr", "rus", "Rs", "rx", "RES", "mr", "range", "reset", "ns", "ris", "rss", "rep", "resp", "rh", "vec", "rest", "ids", "es", "rez", "ret", "rates", "resolution", "details", "reg", "ries", "resh", "ras", "ver"], "i": ["xi", "gi", "I", "io", "si", "n", "ie", "di", "p", "ii", "hi", "index", "ki", "ni", "ini", "b", "ai", "ji", "li", "ci", "ik", "ri", "l", "bi", "qi", "ori", "iu", "it", "mi", "x", "pi", "yi", "id", "ip", "uri", "y", "v", "ix", "vi", "f", "ui"], "j": ["a", "ch", "ja", "si", "n", "ie", "dj", "J", "p", "jo", "ii", "ij", "r", "z", "js", "jj", "b", "jl", "ji", "end", "li", "q", "l", "ri", "c", "e", "it", "x", "h", "pr", "d", "y", "v", "ix", "key", "f", "o", "ui", "g", "jp"], "u": ["nu", "U", "w", "n", "uf", "p", "uv", "ul", "ue", "du", "mu", "b", "bu", "q", "l", "hu", "c", "e", "ou", "su", "eu", "tu", "ru", "uri", "un", "uu", "v", "gu", "uni", "ut", "uc", "cu", "us", "up", "ui", "o", "lu", "util", "ur"], "cnt": ["ecnt", "pnt", "ccount", "rnt", "conct", " cant", "uncant", "nnt", " cret", "cct", "cpt", "ecnn", "rcount", "ppt", "pcount", " cwd", "connn", "nrt", "uncrt", "conret", "nant", "cwd", "cret", "uncnt", " cpt", "connt", "rrt", "ecret", " cct", " crt", "cant", " cnn", "crt", "ecct", "uncwd", "cnn", "nwd", " ccount", "prt", "rpt"], "k": ["th", "K", "kn", "kr", "ks", "ch", "ak", "p", "unk", "mk", "uk", "tk", "kh", "ki", "z", "sk", "ek", "work", "ck", "length", "kk", "ke", "end", "ku", "ky", "ik", "kat", "q", "l", "c", "it", "dk", "kl", "kw", "ph", "id", "kid", "v", "kick", "key", "ko", "ok", "o", "gh", "g"], "stream": ["file", "iterator", "method", "sw", "window", "client", "Stream", "form", "string", "raw", "output", "socket", "m", "speed", "http", "channel", "this", "resource", "model", "document", "view", "queue", "response", "image", "port", "transform", "cont", "context", "input", "data", "row", "object", "instance", "stack", "pool", "forward", "engine", "source", "control", "thread", "path", "down", "v", "message", "feed", "buffer", "console", "f", "server", "host", "reader", "temp", "stage", "through"], "buf": ["rc", "br", "pos", "uf", "blocks", "ctx", "batch", "buff", "wb", "func", "queue", "data", "Buffer", "vec", "alloc", "cv", "block", "bag", "box", "len", "buffer", "fd", "cap", "cb", "conv", "flush", "seq", "rb"], "curChar": ["CurSplit", "CurChar", "curPoint", "prevChar", " curchar", "curSplit", " curSplit", "CurPoint", "prevPoint", " curPoint", "Curchar", "curchar", "prevchar", "prevSplit"], "numChars": [" numCHards", "numCHards", " numChunks", " numCHases", "numCHases", "numChards", "numCars", "numCHars", "numCases", "numCards", "numChunks", " numChases", "numChases", "numCunks", " numCHunks", " numCHars", " numChards", "numCHunks"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n\t\\n\t\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\t\\n\t\tint ans = 100000;\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\tans *= 1.05;\\n\t\t\tif(ans%1000>0){\\n\t\t\t\tans = ((ans/1000)+1) * 1000;\\n\t\t\t}\\n\t\t}\\n\t\tcout(ans);\\n\t}\\n\t\\n\t\\n\t\\n\tpublic static void cout(int n){\\n\t\tSystem.out.println(n);\\n\t}\\n}", "target": "173", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "cur", "cs", "search", "ca", "sub", "cer", "com", "cc", "ner", "soc", "acc", "system", "osc", "cr", "ec", "sq", "lc", "ocr", "bc", "sci", "ss", "ci", "cl", "se", "c", "src", "Sc", "asc", "ct", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "n": ["a", "network", "kn", "number", "Ns", "p", "s", "nb", "m", "nt", "on", "cn", "na", "nan", "r", "ens", "ln", "ne", "mn", "z", "ni", "an", "sn", "ann", "b", "N", "in", "pn", "nn", "ns", "l", "u", "en", "c", "num", "e", "x", "d", "un", "len", "nc", "f", "o", "nl", "net", "g", "k", "inn"], "ans": ["span", "ks", "ants", "cons", "cs", "ani", "AN", "lan", "errors", "anon", "s", "cn", "vers", "amps", "offs", "na", "ents", "ANS", "nan", "ens", "os", "ips", "ana", "outs", "an", "aces", "ann", "ls", "ars", "sk", "ds", "ins", "vs", "sn", "annels", "lines", " means", "cas", "actions", "nn", "ians", "ns", "ends", "plan", "acts", "can", "xs", "eps", "ats", "aus", "ids", "ions", "es", "aned", "scan", "ons", "anc", " scans", "nas"], "i": ["gi", "xi", "I", "io", "ani", "si", "di", "p", "oi", "m", "ii", "hi", "chi", "j", "ki", "ni", "z", "uli", "ini", "ai", "in", "multi", "li", "ci", "ti", "qi", "u", "bi", "c", "e", "mi", "x", "pi", "id", "ip", "uri", "v", "ix", "f", "ui", "o", "info"]}}
{"code": "import java.util.*;\\npublic class Main\\n{\\n    public static void main(String[] args)\\n    {\\n        int count = 0;\\n        boolean sw = false;\\n        int max = Integer.MIN_VALUE;\\n        int min = Integer.MAX_VALUE;\\n        double dMax = Double.MIN_VALUE;\\n        double dMin = Double.MAX_VALUE;\\n        //\\n        Scanner sc = new Scanner(System.in);\\n        int a1 = sc.nextInt();\\n        int a2 = sc.nextInt();\\n        int a3 = sc.nextInt();\\n\\n        if (a1+a2+a3 <= 21)\\n        {\\n            System.out.println(\"win\");\\n        }else\\n        {\\n            System.out.println(\"bust\");\\n        }\\n\\n        sc.close();\\n    }\\n\\n    public class Pair<F,S>\\n    {\\n        private final F first;\\n        private final S second;\\n\\n        Pair(F first,S second)\\n        {\\n            this.first = first;\\n            this.second = second;\\n        }\\n\\n        public void print() { System.out.println(\"(\"+this.first+\",\"+this.second+\")\"); }\\n\\n        //get\\n        public F first() {return this.first;}\\n        public S second() {return this.second;}\\n\\n        @Override\\n        public boolean equals(Object object)\\n        {\\n            if (object instanceof Pair)\\n            {\\n                Pair pair = (Pair)object;\\n                return this.first==pair.first && this.second==pair.second;\\n            }else\\n            {\\n                return false;\\n            }\\n        }\\n\\n        @Override\\n        public int hashCode()\\n        {\\n            return Objects.hash(first,second);\\n        }\\n    }\\n}", "target": "129", "substitutes": {"count": ["test", "parent", "weight", "code", "base", "first", "index", "counter", "length", "error", "size", "cache", "total", "page", "pool", "c", "num", "last", "process", "next", "sum", "id", "offset", "Count", "len", "start", "col"], "max": ["parent", "w", "step", "MAX", "est", "cr", "Max", "std", "conf", "end", "rec", "size", "total", "range", "ax", "dec", "last", "self", "sum", "dev", "scale", "mod", "ng", "rest", "div", "wrap"], "min": ["MIN", "pos", "n", "value", "step", "name", "po", "s", "m", "default", "mini", "skip", "Max", "only", "ax", "Min", "emin", "id", "pre", "len", "mins", "start", "cut", "mid"], "dMax": [" dmax", "fmax", "bMax", "fMin", "fMax", "bmax", "fMAX", "bMAX", "dMAX", "bMin", " dMAX", "dmax"], "dMin": [" dMinor", "dlMIN", "dtMax", "dMinor", "dlMax", "dMIN", "dlMin", "dtMin", "dlMinor", " dMIN", "dtMinor", "dtMIN"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t// \u5165\u529b\\n\t\tint[][] c  = new int[3][3];\\n\t\tfor(int i = 0; i < 3; i++){\\n\t\t    for(int j = 0; j < 3; j++){\\n\t\t        c[i][j] = sc.nextInt();\\n\t\t    }\\n\t\t}\\n\t\t\\n\t\t// \u8a08\u7b97\\n\t\tString result = \"No\";\\n\t\tfor(int a1 = -200; a1 <= 200; a1++){\\n\t\t    boolean bool = true;\\n\t\t    int b1 = c[0][0] - a1;\\n\t\t    int b2 = c[0][1] - a1;\\n\t\t    int b3 = c[0][2] - a1;\\n\t\t    int a2 = c[1][0] - b1;\\n\t\t    int a3 = c[2][0] - b1;\\n\t\t    if(c[1][1] != a2 + b2) bool = false;\\n\t\t    if(c[1][2] != a2 + b3) bool = false;\\n\t\t    if(c[2][1] != a3 + b2) bool = false;\\n\t\t    if(c[2][2] != a3 + b3) bool = false;\\n\t\t    if(bool){\\n\t\t        result = \"Yes\";\\n\t\t        break;\\n\t\t    }\\n\t\t}\\n\t\t\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(result);\\n\t\t\\n\t}\\n}\\n\\n\\n", "target": "88", "substitutes": {"sc": [" pars", " sm", " annot", "sq", "an", "ann", " ser", " scr", " eng", "ss", " arr", " subp", " ann", "Sc", " SC", " res", " ans", "scan", " scorer", " Sc", " acc", " cont", "Scan", " sl", "sb", " rc", "SC", "gram"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws NumberFormatException,\\n\t\t\tIOException {\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint n = Integer.parseInt(in.readLine()), maximum = Integer.MIN_VALUE, minimum;\\n\t\tint[] timeRate = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ttimeRate[i] = Integer.parseInt(in.readLine());\\n\t\t}\\n\t\tminimum = timeRate[0];\\n\t\tfor (int x = 1; x < n; x++) {\\n\t\t\tif (maximum < timeRate[x] - minimum) {\\n\t\t\t\tmaximum = timeRate[x] - minimum;\\n\t\t\t}\\n\t\t\tif (minimum > timeRate[x]) {\\n\t\t\t\tminimum = timeRate[x];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(maximum);\\n\t}\\n}", "target": "208", "substitutes": {"in": ["a", "din", "token", "file", "is", "pin", "err", "In", "bin", "line", "s", "cli", "socket", "m", "log", "ac", "part", "loader", "serv", "r", "inn", "resource", "ini", "b", "doc", "ins", "rin", "image", "input", "kin", "inner", "data", "win", "read", "container", "l", "c", "stream", "init", "conn", "out", "h", "lin", "source", "id", "inc", "d", "ssl", "gin", "again", "nin", "login", "isin", "buffer", "ex", "connection", "f", "server", "as", "reader", "IN", "con"], "n": ["network", "span", "number", "w", "name", "p", "nb", "s", "m", "ne", "j", "r", "ln", "t", "z", "local", "sn", "b", "N", "max", "count", "nn", "size", "no", "min", "ns", "l", "u", "en", "c", "num", "fn", "e", "limit", "h", "ize", "d", "y", "v", "len", "current", "f", "nl", "o", "net", "k", "inn"], "maximum": ["expression", "network", "number", "positive", "higher", "initial", "dimension", "variable", "value", "name", "termination", "average", "Maximum", "frequency", "width", "may", "largest", "default", "filename", "est", "material", "reasonable", "length", "Minimum", "large", "pe", "multiple", "great", "instance", "highest", "position", "approximately", " Maximum", "forward", "limit", "high", "optional", "capacity", "content", "increasing", "message", "within", "available", "current", "buffer", "actual", "until", "summary", "sufficient", "middle", "information", "sequence"], "minimum": ["expression", "number", "method", "pm", "initial", "begin", "dimension", "member", "variable", "value", "name", "termination", "unit", "diff", "average", "m", "Maximum", "nor", "largest", "default", "filename", "est", "material", "none", "reasonable", "medium", "minute", "when", "length", "manager", "Minimum", "lower", "reference", "large", "small", "min", "range", "common", "highest", "position", "approximately", "severe", "secondary", "between", "enabled", "other", "master", "nil", "distance", "message", "within", "latest", "required", "current", "duration", "until", "effective", "summary", "second", "sufficient", "description", "period", "middle"], "timeRate": ["lengthRate", "timeScale", "userrate", "userRate", "clockrate", "lengthRange", "imerate", "speedRating", "playRate", "clockRate", "TimeTime", "speedScale", "playrate", "lengthScale", "speedRate", "userScale", "nameRate", "moneyRate", " timeFactor", "clockTime", "dateTime", "timeUnit", " timeRange", "TimeRate", "imeRate", "daterate", " timeRating", "TimeRange", "imeFactor", "timeRating", "memoryTime", "liveTime", "TimeFactor", "liverate", "memoryRate", "timerate", "dateRate", "timeFactor", " timeScale", "lengthRating", "Timerate", "liveFactor", "timeRange", "memoryrate", "memoryScale", "timeTime", "dateFactor", "playRating", "moneyRating", " timeTime", "speedRange", "nameRange", " timerate", " timeUnit", "clockFactor", "moneyrate", "liveRate", "userTime", "namerate", "imeUnit", "TimeUnit"], "i": ["xi", "gi", "I", "is", "io", "si", "ie", "di", "oi", "m", "ii", "hi", "chi", "j", "ni", "z", "ini", "b", "ai", "phi", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "c", "e", "init", "iu", "mi", "pi", "h", "yi", "id", "ip", "uri", "d", "y", "ix", "v", "f", "o", "ui", "info"], "x": ["xi", "test", "wx", "w", "xe", "ww", "code", "name", "p", "xt", "m", "exp", "on", "width", "fx", "index", "j", "cross", "t", "sync", "z", "work", "b", "max", "xy", "xc", "rx", "ya", "xf", "by", "lex", "pe", "min", "ax", "l", "u", "c", "e", "xa", "my", "h", "xs", "X", "tx", "dx", "xx", "id", "yx", "any", "ux", "y", "v", "ix", "xxx", "key", "ex", "xp", "f", "change", "plus", "k"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\t\tString S1 = S.replace(\"0\",\"\");\\n\t\tint n1 = S1.length();\\n\t\tint n0 = S.length() - n1;\\n\t\tint min = Math.min(n1,n0);\\n\t\t\tSystem.out.println( 2 * min);\\n\\n\t}\\n\\n}", "target": "14", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "desc", "cur", "cs", "cor", "cer", "s", "ner", "sec", "soc", "na", "enc", "osc", "cr", "ec", "bc", "sci", "ss", "cus", "cmp", "cl", "scope", "se", "l", "c", "Sc", "asc", "out", "text", "str", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "parser", "SC"], "S": ["O", "SE", "U", "Part", "Si", "Sample", "Sing", "SU", "string", "C", "T", "SP", "SS", "s", "RS", "SK", "SO", "SB", "SN", "A", "VS", "N", "TS", "R", "SAM", "D", "B", "L", "Single", "M", "SA", "Socket", "JSON", "X", "SR", "SI", "SL", "P", "F", "V", "NS", "ST", "STR", "SH", "SC"], "S1": ["S81", " N2", "SOne", " N121", "N2", "sOne", "SS81", "s1", "s01", "RS01", " S2", " S121", "S01", "SS1", "SSOne", "N1", "S121", " N1", "S2", "SS01", "RSOne", "RS1", "N121", "RS81", "s81"], "n1": ["sn3", "N01", "p2", "nOne", " n2", "N2", "n01", " nOne", "N3", "sn1", "sn01", "N0", "NOne", "pOne", "N1", " n3", "n2", "p3", "n3", "p0", "sn0", "p1", " n01"], "n0": ["nn1", "p2", "nn5", " n2", "N2", " n5", "N0", "nn2", "N1", "n5", "nn0", "n2", "N5", "p0", "p1"], "min": ["MIN", "span", "pop", "minimum", "pos", "err", "sub", "n", "bin", "unit", "po", "section", "diff", "amin", "sort", "m", "sol", "mini", "none", "partial", "max", "ind", "in", "lower", "mean", "rain", "small", "size", "don", "sign", "ax", "sin", "lt", "pri", "Min", "init", "close", "emin", "limit", "next", "sum", "id", "scale", "mod", "pull", "d", "Mini", "un", "ng", "slice", "shift", "act", "f", "dot", "round", "mins", "just"]}}
{"code": "// package app;\\n\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\nimport java.util.stream.Stream;\\n\\npublic class Main {\\n\\n    public static void main(final String[] args) throws Exception {\\n        final Scanner sc = new Scanner(System.in);\\n\\n        final String S = sc.next();\\n        // final int A = sc.nextInt();\\n        // final int A = sc.nextInt();\\n        // final int B = sc.nextInt();\\n        // final int C = sc.nextInt();\\n\\n        // System.out.println();\\n        StringBuffer sb = new StringBuffer(S);\\n        sb.setCharAt(3, '8');\\n        System.out.println(sb.toString());\\n\\n        // System.out.println(A <= X && A + B >= X ? \"YES\" : \"NO\");\\n\\n    }\\n}", "target": "18", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String wk = sc.next();\\n    String[] ballArray = wk.split(\"\");\\n    int ballNum = 0;\\n    for (int i = 0;i < ballArray.length;i++){\\n      if (ballArray[i].equals(\"1\")) {\\n        ballNum = ballNum + 1;\\n      }\\n    }\\n\tSystem.out.println(ballNum);\\n  }\\n}", "target": "165", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "cor", "cer", "sr", "cc", "ner", "sec", "enc", "sync", "osc", "cr", "ec", "lc", "ocr", "bc", "sci", "ss", "cl", "scope", "se", "c", "Sc", "asc", "ng", " SC", "sch", "mc", "scan", "nc", " Sc", "sel", "uc", "sh", "sp", "g", "SC"], "wk": ["kn", "wl", "kr", "w", "ww", "wn", "won", "Word", "wd", "wic", "wa", "wb", "km", "work", "kt", "W", "wi", "ws", "wave", "WF", "mr", "wy", "war", "wire", "rr", "kl", "wr", "kw", "wp", "nw", "WS", "wt", "wig", "fw", "week", "ko", "hw", "wcs", "wal", "iw", "rw"], "ballArray": ["ballList", " ballNumber", "ballNumber", "cellAr", " ballAr", " ballList", "cellNumber", "cellOrder", "BallNumber", "fillNumber", "wallNumber", "wallList", "wallRing", " ballRing", " ballAmount", "cellArray", "ballAmount", "fillAmount", "ballAr", "BallRing", "indexNumber", "fillArray", "BallOrder", "indexLength", "fillLength", "BallList", "ballRing", "ballLength", "indexAmount", "wallArray", "indexArray", "BallAr", " ballLength", "BallArray", "ballOrder", " ballOrder"], "ballNum": ["goalSum", " ballNumber", "matchnum", " ballnum", "ballsNum", "leaguenum", "ballsSum", "ballNumber", " ballSum", " ballInfo", "BallNumber", "fillNumber", "ballCount", "ballnum", "levelNum", "ballSum", "ballLen", " ballNUM", "angleNum", "angleLen", "goalNUM", "ballsNumber", "BallNum", "BallOrder", "goalNum", "leagueSum", "fillNum", "ballInfo", "ballNUM", "leagueCount", "angleOrder", "levelInfo", "fillInfo", "goalNumber", "ballsNUM", "matchNum", "levelNumber", "levelnum", " ballLen", "leagueNum", "angleNumber", "BallLen", "fillnum", " ballCount", "matchSum", "matchCount", "ballOrder", " ballOrder"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "m", "abi", "ii", "part", "hi", "index", "j", "t", "ni", "z", "uli", "mu", "ini", "b", "ai", "in", "multi", "li", "ci", "ti", "ri", "l", "u", "bi", "c", "qi", "init", "e", "x", "pi", "h", "id", "uri", "d", "v", "ix", "f", "ui", "o", "info", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tStringBuilder text = new StringBuilder();\\n\t\tint count = 1;\\n\t\twhile (true) {\\n\t\t\tint num = scan.nextInt();\\n\t\t\tif (num == 0) {\\n\t\t\t\tscan.close();\\n\t\t\t\ttext.deleteCharAt(text.lastIndexOf(\"\\n\"));\\n\t\t\t\tSystem.out.println(text.toString());\\n\t\t\t\tbreak;\\n\t\t\t} else {\\n\t\t\t\ttext.append(\"Case \").append(count).append(\": \").append(num).append(\"\\n\");\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n}", "target": "97", "substitutes": {"scan": ["run", "pan", "exec", "chan", "io", "get", "search", "n", "stop", "er", "see", "connect", "query", "ner", "log", "sc", "vis", "app", "na", "pass", "sync", "skip", "an", "ann", "in", "inner", "match", "nn", "sin", "san", "sign", "read", "reach", "se", "conn", "can", "out", "cat", "ans", "slice", "feed", "server", "Scan", "walk", "watch", "stat", "reader", "iter", "parse", "con", "check"], "text": ["test", "span", "number", "append", "form", "string", "code", "name", "struct", "output", "template", "result", "log", "vert", "buff", "service", "txt", "contract", "utils", "this", "report", "config", "class", "writer", "translation", "in", "comment", "image", "input", "context", "TEXT", "end", "inner", "select", "data", "html", "object", "url", "font", "password", "init", "binary", "term", "editor", "ext", "out", "print", "source", "id", "left", "Text", "content", "path", "str", "format", "ut", "feed", "buffer", "connection", "math", "info", "pattern", "start", "check"], "count": ["test", "number", "parent", "i", "weight", "n", "code", "base", "name", "loop", "index", "counter", "max", "coll", "length", "match", "size", "cache", "child", "c", "type", "last", "sum", "id", "cat", "depth", "thread", "offset", "check", "Count", "len", "key", "const", "found", "call", "start", "seq"], "num": ["nu", "span", "number", "nr", "col", "pos", "NUM", "cur", "um", "bin", "n", "non", "name", "unit", "umi", "nb", "loop", "nt", "index", "loc", "valid", "mn", "ni", "digit", "coord", "end", "multi", "nn", "no", "miss", "iter", "Num", "en", "su", "ident", "sum", "id", "inc", "un", "offset", "uni", "len", "off", "temp", "i", "start", "con"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner kbs = new Scanner(System.in);\\n\t\tString S = kbs.next();\\n\t\tString T = kbs.next();\\n\t\tint A = kbs.nextInt();\\n\t\tint B = kbs.nextInt();\\n\t\tString U = kbs.next();\\n\t\tif(U.equals(S)){\\n\t\t\tA -= 1;\\n\t\t}\\n\t\tif(U.equals(T)){\\n\t\t\tB -= 1;\\n\t\t}\\n\t\tSystem.out.printf(\"%d %d\\n\", A,B);\\n\t\tkbs.close();\\n\t}\\n\\n}\\n", "target": "155", "substitutes": {"kbs": [" kbis", "Kouts", "cheb", "ksbis", "chebi", "kebi", "kbase", "Kss", " kb", "ksbs", "okb", "kebs", "chebo", "kbi", "keb", "Kbo", " kbo", " kjs", " kbi", "chebs", "okbes", "Kbase", "kebes", "kbes", " kss", "Kbis", " kbes", "kkb", "kouts", "kejs", "kbc", "Kbi", "kkbase", "Kbc", " kouts", "kkss", " kbase", "kbis", "kb", "kss", "okouts", "okbs", "ksbc", "Kjs", " kbc", "Kbs", "Kb", "kbo", "kjs", "ksb", "Kbes", "kkbs"], "S": ["API", "SE", "Si", "BS", "Su", "SU", "CS", "SP", "C", "SS", "s", "RS", "Source", "SK", "SO", "SN", "G", "Sa", "W", "N", "TS", "R", "AS", "L", "M", "SA", "SR", "SI", "P", "SL", "F", "DS", "NS", "Sl", "ST"], "T": ["O", "K", "E", "Tu", "C", "TN", "PT", "NT", "TB", "TF", "t", "N", "TS", "R", "LT", "D", "H", "Y", "TX", "L", "TR", "TG", "TH", "UT", "TC", "X", "TA", "TT", "P", "F", "TV", "Pat", "ST", "WT"], "A": ["a", "API", "Alpha", "I", "HA", "AC", "As", "Na", "Ab", "AU", "AB", "C", "AM", "CA", "PA", "LA", "AA", "AI", "N", "IA", "D", "Y", "NA", "L", "SA", "X", "Area", "Ar", "AR", "EA", "TA", "P", "F", "AL", "DA", "AP", "AY", "FA", "MA"], "B": ["O", "E", "I", "AB", "J", "C", "BF", "BE", "BR", "NB", "TB", "Base", "G", "AA", "b", "N", "W", "Q", "QB", "R", "BC", "GB", "D", "UB", "Y", "Beta", "DB", "L", "M", "IB", "X", "Bs", "BA", "OB", "P", "F", "V", "BB", "BI", "WB"], "U": ["O", "UE", "K", "E", "MU", "UTF", "Tu", "Su", "LU", "SU", "C", "CU", "UP", "PU", "UD", "UV", "G", "UID", "W", "N", "Q", "UA", "R", "Unit", "UI", "H", "D", "Y", "UU", "UL", "L", "u", "UC", "M", "UN", "UT", "X", "UR", "OU", "F", "P", "V", "UF", "GU", "US", "Lu"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int[] H = new int[N];\\n    for (int i = 0; i < N; i++) {\\n      H[i] = sc.nextInt();\\n    }\\n\\n    for (int i = N-2; i >= 0; i--) {\\n      if (H[i] - H[i+1] > 1) {\\n        System.out.println(\"No\");\\n        return;\\n      }\\n      if (H[i] > H[i+1]) {\\n        H[i]--;\\n      }\\n    }\\n    System.out.println(\"Yes\");\\n  }  \\n}", "target": "74", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cor", "cer", "screen", "cc", "ner", "sync", "system", "cr", "osc", "sq", "ec", "sn", "cont", "bc", "sci", "ss", "ci", "cl", "se", "sys", "c", "src", "Sc", "asc", "out", "or", "sche", "sem", " SC", "sch", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "N": ["O", "K", "E", "I", "NR", "n", "Ns", "ND", "Len", "C", "T", "Ni", "J", "NT", "Ne", "NB", "SN", "G", "W", "NN", "Size", "Q", "D", "Y", "NA", "Z", "B", "Num", "L", "M", "NC", "X", "No", "NE", "S", "P", "F", "V", "Count", "NS", "NL", " n"], "H": ["K", "U", "E", "I", "HA", "HQ", "RH", "HTTP", "Host", "C", "GH", "T", "CL", "FH", "NH", "G", "HP", "HT", "HS", "Q", "PH", "R", "Path", "D", "Y", "Ha", "Hi", "Hash", "Z", "B", "L", "HR", "M", "TH", "h", "X", "HK", "MH", "HH", "Head", "OH", "P", "F", "ID", "HD", "V", "History", "HM", "EH", "Ch", "HB", "SH", "CH", "HI"], "i": ["a", "xi", "gi", "I", "io", "si", "n", "di", "ie", "ami", "p", "oi", "cli", "diff", "ii", "hi", "chi", "r", "index", "j", "pass", "ni", "z", "mini", "ini", "mu", "b", "ai", "in", "inner", "ji", "multi", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "c", "ri", "e", "init", "iu", "ori", "it", "mi", "h", "x", "pi", "fi", "limit", "source", "id", "ip", "uri", "y", "v", "ix", "slice", "api", "key", "anti", "f", "o", "ui", "info", "temp", "k"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n \\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] rate = new int[8];\\n\t\tint hi = 0;\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tint col = sc.nextInt();\\n\t\t\tif (col < 400) {\\n\t\t\t\trate[0]++;\\n\t\t\t} else if (col < 800) {\\n\t\t\t\trate[1]++;\\n\t\t\t} else if (col < 1200) {\\n\t\t\t\trate[2]++;\\n\t\t\t} else if (col < 1600) {\\n\t\t\t\trate[3]++;\\n\t\t\t} else if (col < 2000) {\\n\t\t\t\trate[4]++;\\n\t\t\t} else if (col < 2400) {\\n\t\t\t\trate[5]++;\\n\t\t\t} else if (col < 2800) {\\n\t\t\t\trate[6]++;\\n\t\t\t} else if (col < 3200) {\\n\t\t\t\trate[7]++;\\n\t\t\t} else {\\n\t\t\t\thi++;\\n\t\t\t}\\n\t\t}\\n\t\tint min = 0;\\n\t\tfor (int i : rate) {\\n\t\t\tif (i != 0) {\\n\t\t\t\tmin++;\\n\t\t\t}\\n\t\t}\\n\t\tif (hi != 0 && min == 0) {\\n\t\t\tSystem.out.println(1 + \" \" + hi);\\n\t\t} else {\\n\t\t\tint max = min + hi;\\n\t\t\tSystem.out.println(min + \" \" + max);\\n\t\t}\\n\t}\\n}", "target": "94", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "cur", "cs", "ser", "si", "cor", "cer", "screen", "cc", "ner", "sync", "cr", "osc", "sq", "st", "ck", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "sys", "c", "src", "Sc", "asc", "out", "sche", "sm", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "SC"], "N": ["O", "K", "I", "n", "Ns", "Len", "C", "Ni", "J", "NT", "Ne", "G", "NN", "Size", "Q", "R", "D", "H", "Y", "B", "Num", "L", "NM", "NI", "M", "NC", "X", "S", "P", "F", "V", "NS", "NL"], "rate": ["test", "ram", "nr", "rc", "core", "weight", "score", "ga", "gen", "rank", "cer", "cycle", "value", "code", "mode", "unit", "step", "race", "delay", "line", "grade", "frequency", "speed", "feature", "ride", "index", "r", "rated", "late", "sync", "skip", "rat", "report", "cr", "fan", "count", "Rate", "order", "rx", "level", "play", "rand", "rec", "iter", "state", "range", "row", "date", "num", "term", "type", "mi", "process", "pr", "id", "scale", "depth", "ry", "seed", "feed", "rates", "time", "rule", "rating", "zip", "stage", "con"], "hi": ["lim", "base", "dy", "di", "cli", "low", "home", "ii", "hei", "wa", "chi", "loc", "index", "hide", "ni", "mini", "HI", "hy", "ini", "go", "ho", "lo", "phi", "end", "li", "ci", "no", "row", "Hi", "size", "bug", "py", "init", "mi", "pi", "limit", "h", "x", "high", "rh", "la", "id", "inc", "api", "ha", "hop", "ui", "dim", "how", "mid"], "i": ["xi", "I", "is", "io", "si", "n", "di", "ie", "p", "oi", "cli", "ii", "chi", "j", "index", "ni", "z", "mini", "ini", "lc", "b", "ind", "ai", "coll", "in", "inner", "multi", "phi", "li", "ci", "ti", "zi", "qi", "u", "bi", "c", "num", "e", "ori", "it", "eni", "mi", "x", "pi", "h", "id", "ip", "uri", "y", "ix", "f", "ui", "o", "info", "k"], "col": ["th", "fc", "file", "ch", "cell", "cur", "COL", "gen", "cor", "code", "cycle", "color", "word", "p", "line", "po", "ac", "co", "log", "loc", "lc", "cf", "coll", "cel", "count", "mon", "bc", "year", "ci", "row", "win", "cl", "bug", "l", "num", "c", "fl", "fact", "conn", "x", "keep", "ct", "cat", "block", "con", "column", "inc", "val", "y", "cond", "ell", "ol", "Col", "key", "nc", "act", "f", "cp", "day", "zip", "k", "cal"], "min": ["MIN", "is", "pid", "pos", "mit", "sub", "n", "po", "sort", "amin", "sol", "m", "diff", "low", "part", "na", "on", "hide", "mine", "index", "mini", "skip", "none", "ini", "minute", "fe", "when", "ai", "ind", "mon", "small", "size", "don", "sign", "lock", "date", "c", "pri", "Min", "init", "mi", "am", "area", "mid", "sum", "id", "Mini", "pre", "un", "len", "vi", "key", "stat", "mins", "second", "start", "con"], "max": ["pop", "w", "ca", "base", "cycle", "po", "diff", "ase", "z", "Max", "work", "conf", "rand", "rx", "end", "size", "row", "ax", "range", "win", "nd", "c", "last", "h", "head", "x", "id", "right", "mod", "rest", "k", "az", "view", "start", "ad", "mid", "co"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tMain main = new Main();\\n\t\tmain.solve();\\n\t}\\n\\n\tvoid solve() {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = Integer.parseInt(sc.next());\\n\t\tint b = Integer.parseInt(sc.next());\\n\t\tint cnt=0;\\n\t\tfor(int i=a;i<=b;i++) {\\n\t\t\t//n1: i\u3092\u53cd\u8ee2\u3057\u305f\uff11\u3064\u76ee\u306e\u6841\\n\t\t\tint n1 = i%10,n5=i/10000%10;\\n\t\t\tint n2 = i/10%10,n4=i/1000%10;\\n\t\t\tif(n1==n5&&n2==n4)cnt++;\\n\t\t}\\n\t\tSystem.out.println(cnt);\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "104", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cs", "ca", "sub", "cer", "ctx", "cc", "ner", "tc", "soc", "enc", "sync", "system", "cr", "sq", "osc", "ec", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", "RC", " SC", "mc", "scan", "nc", " Sc", "uc", "Scan", "sp", "sb", "parse", "SC", "spec"], "a": ["fa", "ga", "ca", "n", "p", "s", "alpha", "ac", "aaa", "ia", "ada", "A", "sa", "ea", "qa", "an", "ab", "ai", "ae", "pa", "da", "aj", "u", "c", "am", "area", "ka", "la", "asa", "d", "va", "api", "aa", "f", "as", "ama", "au"], "b": ["br", "n", "base", "bb", "p", "s", "nb", "lb", "eb", "j", "r", "abb", "wb", "ab", "ib", "pb", "length", "bc", "ba", "ob", "boot", "B", "l", "c", "e", "bs", "x", "h", "body", "d", "y", "db", "v", "emb", "f", "o", "cb", "k"], "cnt": ["cct", " cct", "acnd", "pcNT", "pcnd", "pcnt", "cNT", "pcct", "acnt", "acNT", " cnd", "cnd", "acct", " cNT"], "i": ["gi", "xi", "adi", "I", "io", "si", "n", "di", "ami", "ie", "abi", "ii", "hi", "j", "ni", "uli", "ini", "mu", "ai", "phi", "ji", "multi", "li", "ti", "ci", "zi", "ri", "qi", "u", "bi", "c", "e", "iu", "mi", "pi", "x", "yi", "fi", "ip", "uri", "d", "v", "gu", "f", "ui", "o", "info"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        int f = 2;\\n        int s = 1;\\n        String str = null;\\n        InputStreamReader isr = new InputStreamReader(System.in);\\n        BufferedReader br = new BufferedReader(isr);\\n\\n        try {\\n            str = br.readLine();\\n\\n            String[] i = str.split(\" \");\\n\\n\\n            for (int j = 0; j < 3; j++) {\\n                if (i[j].equals(\"5\")) {\\n                    --f;\\n                } else if (i[j].equals(\"7\")) {\\n                    --s;\\n                }\\n            }\\n        } catch (NumberFormatException e) {\\n            System.out.println(\"NO\");\\n        } catch (IOException e) {\\n            System.out.println(\"NO\");\\n        }\\n        if (f == 0 && s == 0) {\\n            System.out.println(\"YES\");\\n        } else {\\n            System.out.println(\"NO\");\\n        }\\n    }\\n}", "target": "16", "substitutes": {"f": ["fs", "w", "n", "sf", "p", "fm", "fun", "fp", "m", "fold", "fx", "r", "t", "z", "b", "fe", "cf", "conf", "inf", "df", "fen", "l", "u", "c", "e", "rf", "h", "x", "ff", "F", "d", "field", "y", "v", "lf", "feed", "tf", "o", "fo", "info", "g", "k"], "s": ["fs", "a", "is", "w", "cs", "si", "n", "p", "m", "gs", "os", "r", "sets", "t", "z", "outs", "sl", "b", "vs", "ds", "ins", "in", "lines", "ss", "als", "ws", "ims", "ns", "l", "u", "c", "ses", "e", "ts", "xs", "states", "S", "d", "ats", "ps", "y", "v", "sites", "services", "o", "sp", "strings"], "str": ["reader", "err", "char", "string", "pt", "tr", "p", "sr", "name", "er", "line", "result", "part", "enc", "r", "txt", "stri", "z", "sl", "arr", "st", "b", "dr", "in", "input", "obj", "Str", "data", "iter", "fr", "read", "l", "u", "e", "text", "pr", "id", "div", "sp", "STR"], "isr": ["issrar", "isrs", "ispr", " ispr", "issrb", "Isrs", "isrb", "israr", "Ispr", "issr", " isrs", "Iscr", "Isrb", " iscr", "isspr", "Isr", " israr", "Israr", "isscr", " isrb", "iscr", "issrs"], "br": ["res", "io", "err", "Br", "ar", "bb", "tr", "p", "sr", "er", "buf", "yr", "ner", "result", "BR", "r", "browser", "jar", "cr", "arr", "b", "gr", "dr", "ibr", "ocr", "bar", "obj", "mr", "fr", "stream", "HR", "bs", "ber", "bro", "ler", "rt", "bh", "hr", "div", "reader", "cb", "bl", "rb"], "i": ["xi", "gi", "a", "I", "is", "io", "idi", "si", "ie", "di", "p", "cli", "abi", "ii", "r", "t", "ini", "b", "in", "phi", "split", "li", "ci", "iri", "ri", "qi", "u", "bi", "c", "e", "iu", "it", "pi", "x", "id", "ip", "uri", "d", "v", "api", "vi", "ui", "o", "info"], "j": ["ch", "err", "ja", "job", "n", "jc", "dj", "dy", "code", "J", "p", "section", "m", "jo", "ii", "part", "ij", "jet", "t", "z", "js", "jj", "dt", "b", "jl", "ind", "ji", "li", "obj", "fr", "q", "el", "l", "aj", "oj", "e", "out", "x", "pr", "next", "adj", "uj", "d", "je", "y", "jit", "v", "jen", "ix", "key", "o", "k", "jp"]}}
{"code": "\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tMain main = new Main();\\n\t\tmain.run();\\n\t}\\n\\n\\n\\n\tpublic void run() {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tint y=sc.nextInt();\\n\\n\t\tfor(int i=0; i<=n; i++) {\\n\t\t\tfor(int j=0; j<=n; j++) {\\n\t\t\t\tif(i+j>n)continue;\\n\t\t\t\tint k=n-(i+j);\\n\t\t\t\tif(10000*i + 5000*j + 1000*k == y) {\\n\t\t\t\t\tSystem.out.println(i+\" \"+j+\" \"+k);\\n\t\t\t\t\tsc.close();\\n\t\t\t\t\treturn;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(\"-1 -1 -1\");\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "133", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "search", "ca", "cor", "cer", "screen", "ctx", "com", "cam", "cc", "ner", "tc", "soc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "conn", "Sc", "asc", "sche", "cv", "dc", "mc", "console", "scan", "nc", "uc", "anc", "server", "sp", "sb", "SC"], "n": ["network", "w", "ny", "p", "s", "nb", "m", "ii", "nan", "ln", "t", "mn", "z", "ni", "sn", "b", "N", "in", "nn", "no", "ns", "l", "u", "en", "c", "num", "e", "x", "h", "d", "v", "nc", "f", "o", "net", "inn"], "y": ["a", "ch", "w", "ny", "dy", "p", "yr", "m", "ii", "vy", "t", "oy", "z", "yy", "b", "in", "ym", "ky", "Y", "q", "l", "py", "u", "yo", "c", "e", "ey", "x", "h", "yi", "id", "d", "ry", "v", "key", "f", "o", "sy", "cy"], "i": ["xi", "a", "gi", "I", "io", "ani", "si", "ie", "di", "ami", "p", "oi", "m", "ii", "chi", "ki", "ni", "z", "ini", "b", "ind", "ai", "in", "phi", "ji", "li", "ci", "ik", "zi", "l", "qi", "u", "bi", "c", "e", "iu", "eni", "it", "mi", "x", "pi", "yi", "id", "ip", "v", "ix", "f", "ui", "start"], "j": ["bj", "ch", "job", "ja", "jc", "dj", "dy", "ie", "J", "p", "jo", "ii", "ij", "jet", "ni", "z", "jj", "js", "jl", "b", "ji", "end", "li", "ci", "obj", "ik", "q", "l", "qi", "u", "oj", "aj", "c", "e", "ori", "it", "x", "h", "pi", "yi", "kj", "adj", "uj", "d", "jit", "je", "jen", "v", "ix", "vi", "key", "f", "o", "g", "jp"], "k": ["K", "ks", "w", "ak", "p", "unk", "m", "ki", "z", "sk", "kt", "b", "ck", "kk", "kin", "ke", "ik", "q", "ijk", "u", "c", "e", "x", "h", "dk", "kw", "id", "d", "kid", "v", "kick", "key", "ko", "ok", "o", "g"]}}
{"code": "import java.util.*;\\nclass Main{\\n    public static void main(String[] args){\\nScanner in = new Scanner(System.in);\\n       int a = in.nextInt();\\n       int b = in.nextInt();\\n       int c = in.nextInt();\\n       \\n       if (a == 5 || a==7 || b == 5 || b == 7 || c == 5 || c == 7)\\n           if (a + b + c == 17)\\n                System.out.printf(\"YES\");\\n            else\\n                System.out.printf(\"NO\");\\n       else\\n            System.out.printf(\"NO\");\\n       \\n       \\n               \\n    }\\n    \\n}", "target": "16", "substitutes": {"in": ["exec", "din", "token", "is", "pin", "re", "err", "In", "bin", "n", "er", "s", "query", "cli", "diff", "user", "socket", "loader", "serv", "r", "pass", "ln", "ini", "doc", "ins", "rin", "inf", "input", "inner", "readable", "kin", "rec", "url", "l", "between", "en", "init", "binary", "conn", "out", "lin", "source", "id", "inc", "con", "str", "again", "nin", "login", "isin", "scan", "connection", "f", "as", "reader", "i", "IN", "inn"], "a": ["ak", "ar", "ca", "n", "au", "p", "s", "ac", "alpha", "na", "ada", "A", "sa", "ea", "qa", "ma", "an", "ab", "ai", "ae", "ba", "da", "l", "aj", "u", "af", "am", "x", "area", "h", "la", "asa", "d", "y", "va", "api", "aa", "f", "as", "i", "ad"], "b": ["ca", "n", "base", "bb", "p", "lb", "s", "nb", "eb", "j", "r", "t", "z", "ab", "ib", "pb", "bc", "ba", "B", "l", "u", "e", "ad", "bs", "x", "h", "d", "y", "v", "aa", "f", "o", "sb", "cb", "i", "k", "rb"], "c": ["pc", "ch", "w", "cs", "ca", "n", "p", "C", "s", "ac", "cc", "m", "r", "j", "z", "ec", "lc", "cf", "count", "ci", "q", "l", "u", "e", "x", "h", "d", "y", "v", "f", "cu", "cy", "g", "i", "k", "col"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt(), a = sc.nextInt(),b=sc.nextInt();\\n\t\t//int x=sc.nextInt();//,k=sc.nextInt();\\n\t\tlong sum=0,count=0,flag=0,max=-999999,min=99999;\\n\t\tlong[] array=new long[101];\\n\t\t//String s=sc.next(),t=sc.next();\\n\t\tString buff;\\n\t\t//String[] arrays = new String[a];\\n\t\tfor(int i=1;i<=n;i++) {\\n\t\t\tbuff = String.valueOf(i);\\n\t\t\tfor(int j=0;j<buff.length();j++) {\\n\t\t\t\tsum+=Integer.parseInt(buff.substring(j,j+1));\\n\t\t\t}\\n\t\t\t//System.out.println(sum);\\n\t\t\tif(sum>=a&&sum<=b)count+=i;\\n\t\t\tsum=0;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\\n\\n\\n\t}\\n\tpublic static int sample(int n) {\\n\t\treturn n;\\n\t}\\n\\n}\\n", "target": "212", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "cur", "cs", "ser", "cer", "sf", "sr", "ctx", "com", "cc", "ner", "tc", "sec", "soc", "app", "sync", "system", "sl", "cr", "osc", "ec", "lc", "sq", "class", "cont", "bc", "sci", "ss", "ci", "cl", "scope", "se", "l", "c", "src", "Sc", "asc", "sche", " SC", "dc", "console", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "parser", "SC", "spec"], "n": ["number", "nr", "name", "p", "nb", "s", "nt", "m", "j", "z", " c", "N", "nn", "ns", "l", "num", "c", "init", " N", "d", "v", "nc", "f", "nl", "g", "k"], "a": ["w", "ga", "ca", "p", "s", "alpha", "ac", "m", "aaa", "A", "sa", "an", "ab", "ai", "ae", "ba", "aw", "c", "area", "am", "y", "aa", "f", "as", "auto", "ad"], "b": ["w", "base", "bb", "p", "nb", "r", "bp", "ab", "ob", "B", "l", "mb", "c", "e", "bs", "bis", "d", "y", "v", "bf", "f", "abc", "i", "k"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A=sc.nextInt();\\n\t\tint B=sc.nextInt();\\n\t\tint plug=A;\\n\t\tint ans=1;\\n\\n\t\tif(B==1) {\\n\t\t\tans=0;\\n\t\t\tSystem.out.println(ans);\\n\t\t\treturn;\\n\t\t}\\n\\n\t\twhile(true) {\\n\t\t\tif(B<=plug) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tplug+=A-1;\\n\t\t\tans++;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "101", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "com", "cc", "ner", "tc", "soc", "acc", "enc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "class", " scr", "bc", "sci", "ss", "ci", "cl", "se", "c", "src", "Sc", "asc", "sem", "str", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sp", "sb", "SC"], "A": ["a", "Alpha", "API", "O", "U", "I", "K", "AC", "As", "Ab", "AF", "AB", "C", "T", "Array", "PA", "LA", "AA", "G", "N", "H", "D", "Y", "L", "M", "SA", "X", "AD", "Area", "Ma", "AR", "BA", "S", "P", "None", "Count", "AV", "AP", "At", "au", "CA"], "B": ["O", "K", "I", "BS", "Ab", "Bi", "AF", "AB", "C", "BF", "BE", "BD", "Ub", "NB", "MB", "PA", "G", "LA", "b", "N", "Plug", "QB", "Q", "BC", "Big", "GB", "D", "UB", "DB", "L", "M", "AD", "LB", "AR", "Bs", "BA", "OB", "P", "F", "S", "PL", "EB", "BB", "AP", "BL", "BI", "BP", "Gb"], "plug": ["a", "Pull", "clip", "i", "io", "big", "AB", "p", "loop", "log", "Pack", "pl", "PA", "abs", "ab", "b", "ace", "Plug", "Q", "CAP", "length", "bc", "Rob", "li", "plugin", "UB", "pack", "bug", "af", "plan", "Bug", "CP", "plugins", "la", "bus", "BA", "pull", "block", "Plugin", "PL", "P", "pp", "cop", "BUG", "BB", "cap", "auto", "au", "pad"], "ans": ["span", "parts", "ks", "ab", "cons", "ants", "cs", "blocks", "AN", "lan", "ops", "aps", "s", "ros", "vers", "amps", "offs", "na", "arts", "ANS", "os", "aid", "man", "ana", "abs", "an", "sk", "ann", "ars", "outs", "ls", "aces", "ins", "ds", "vs", "ace", "lines", "atts", "atan", "cas", "ads", "unks", "ns", "rss", "af", "plan", "can", "ays", "reads", "la", "S", "ats", "eps", "alls", "aus", "books", "aned", "anc", "as", "au", "nas", "ras"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\tint n = stdIn.nextInt();\\n\t\tint x;\\n\t\tfor (int i = 1; i <= n; i++) {\\n\t\t\tx = i;\\n\t\t\tif (x % 3 == 0) {\\n\t\t\t\tSystem.out.print(\" \" + i);\\n\t\t\t\tcontinue;\\n\t\t\t}\\n\t\t\t\\n\t\t\tdo {\\n\t\t\t\tif (x % 10 == 3) {\\n\t\t\t\t\tSystem.out.print(\" \" + i);\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tx /= 10;\\n\t\t\t} while(x != 0);\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n}\\n\\n", "target": "154", "substitutes": {"stdIn": [" stdConn", "adOut", "stdOut", "stdIns", " stdReader", "adIn", "standardIN", " stdIN", "stdIN", "STDOut", "stdConn", "adIns", " STDOut", "STDIn", " STDReader", " stdIns", "adIN", "STDReader", "stdReader", " STDConn", "standardIns", "standardIn", "STDConn", " stdOut", "standardOut", " STDIn"], "n": ["number", "w", "pos", "p", "s", "nb", "m", "index", "j", "r", "t", "ni", "z", "b", "N", "in", "nn", "ns", "l", "u", "num", "c", "en", "d", "y", "len", "nc", "f", "o", "net", "k"], "x": ["xi", "a", "fix", "wx", "px", "w", "xb", "xe", "ww", "p", "xt", "m", "wait", "exp", "width", "wa", "index", "j", "fx", "cross", "php", "t", "z", "work", "max", "rex", "xy", "xc", "rx", "xf", "lex", "pe", "ax", "q", "u", "num", "c", "e", "h", "xs", "X", "tx", "xes", "dx", "xx", "val", "y", "v", "ix", "xxx", "ex", "xp", "f", "temp", "check"], "i": ["xi", "gi", "I", "is", "io", "si", "di", "ie", "p", "m", "ii", "hi", "part", "index", "j", "chi", "t", "ni", "z", "mu", "ai", "in", "phi", "multi", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "c", "e", "iu", "pi", "yi", "fi", "id", "d", "y", "v", "ix", "f", "ui", "o", "info", "start", "k"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int count=0;\\n        String str = sc.next();\\n        for(int i=0; i<str.length();i++){\\n            if(str.charAt(i) == '1'){\\n                count++;\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}\\n", "target": "165", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "cc", "ner", "sec", "osc", "st", "ec", "cr", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "sche", " SC", "dc", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC", "spec"], "count": ["test", "number", "list", "parent", "weight", "err", "char", "n", "code", "base", "string", "name", "part", "index", "counter", "b", "max", "coll", "length", "now", "level", "error", "size", "total", "cache", "no", "child", "num", "c", "type", "out", "limit", "sum", "id", "depth", "Count", "len", "current", "key", "add", "f", "info", "found", "start", "col", "check"], "str": ["prev", "ctr", "br", "err", "char", "string", "name", "tr", "line", "sr", "s", "result", "strip", "part", "enc", "r", "txt", "stri", "cr", "sl", "st", "arr", "lc", "dr", "entry", "coll", "in", "input", "inner", "obj", "Str", "data", "fr", "dec", "c", "out", "rr", "text", "pr", "next", "hr", "div", "f", "sp", "STR", "iter", "wr", "spec"], "i": ["a", "xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "m", "abi", "ii", "hi", "index", "j", "chi", "t", "uli", "z", "ini", "mu", "b", "ai", "in", "inner", "multi", "ji", "li", "ci", "ti", "phi", "l", "qi", "u", "ri", "c", "bi", "init", "it", "x", "pi", "h", "id", "ip", "uri", "d", "v", "ix", "slice", "key", "f", "ui", "o", "info", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main\\n{\\n    public static void main(String[] args)\\n    {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] xs = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            xs[i] = sc.nextInt();\\n        }\\n\\n        int hit = 0;\\n        int count = 0;\\n        int expected = 1;\\n        for (int i = 0; i < n; i++) {\\n            if (xs[i] == expected) {\\n                hit++;\\n                expected++;\\n            }\\n            else {\\n                count++;\\n            }\\n        }\\n\\n        if (hit == 0) {\\n            System.out.println(-1);\\n        }\\n        else {\\n            System.out.println(count);\\n        }\\n    }\\n}\\n", "target": "234", "substitutes": {"sc": ["pc", "esc", "exec", "fc", "sw", "rc", "ch", "cs", "ca", "cer", "sf", "sr", "ctx", "cc", "ner", "sec", "tc", "sync", "system", "cr", "osc", "ec", "sq", "lc", "cont", " scr", "bc", "sci", "ss", "ci", "cl", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "SC"], "n": ["network", "nr", "w", "p", "s", "nb", "nt", "m", "ne", "r", "j", "ln", "t", "sync", "z", "sn", "b", "N", "in", "size", "nn", "no", "ns", "l", "u", "en", "c", "num", "init", "conn", "limit", "x", "h", "d", "y", "v", "len", "nc", "f", "o", "net", "k"], "xs": ["hs", "qs", "params", "obs", "bits", "ops", "codes", "aps", "pps", "breaks", "gs", "quarters", "ips", "issues", "bugs", "pects", "vs", "iffs", "ls", "ds", "ins", "inches", "tests", "lines", "rx", "ss", "checks", "changes", "fts", "ns", "ims", "ches", "items", "forces", "xes", "x", "xx", "posts", "reads", "events", "eps", "ps", "cats", "xxx", "ints", "icks", "xp", "features", "strings"], "i": ["xi", "gi", "a", "I", "io", "si", "ie", "di", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "ni", "z", "ini", "mu", "ai", "in", "phi", "inner", "ji", "li", "ci", "ti", "data", "multi", "ri", "qi", "u", "bi", "c", "e", "ori", "iu", "init", "eni", "mi", "x", "pi", "it", "fi", "id", "ip", "uri", "y", "ix", "v", "f", "ui", "o", "info"], "hit": ["fit", "job", "feat", "base", "unit", "ac", "batch", "feature", "index", "lit", "loc", "nice", "counter", "view", "ite", "split", "pect", "match", "size", "error", "miss", "total", "seen", "lock", "bug", "it", "Hit", "h", "bit", "limit", "cat", "id", "inc", "kid", "hop", "feed", "act", "hot", "stat", "iter", "start", "check"], "count": ["test", "number", "force", "err", "code", "base", "cc", "reported", "index", "loc", "counter", "b", "max", "coll", "length", "more", "end", "match", "size", "error", "miss", "cache", "all", "total", "full", "bug", "child", "carry", "c", "it", "h", "limit", "cat", "id", "sum", "depth", "left", "inc", "offset", "know", "Count", "patch", "found", "info", "call", "start", "progress", "col", "check"], "expected": ["missing", "test", "force", "done", "err", "target", "base", "failed", "pected", "checked", "event", "diff", "nt", "feature", "index", "always", " unexpected", "view", " expect", " expecting", "length", "inner", "kind", "seen", "pect", "error", "size", "iter", "miss", "bug", "needed", "last", "used", "next", "id", "allowed", "inc", "confirmed", "offset", "current", "actual", "found", "ignore", "wrong", " error", "ception", " expectation"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\t//?????\u00a3?????????\\n\t\tint numN;\\n\\n\t\ttry {\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\t\tString line = br.readLine();\\n\\n\t\t\tnumN = Integer.parseInt(line);\\n\\n\t\t\t//????????\u00a8\\n\t\t\tString outputNum = \"\";\\n\\n\t\t\tfor (int i = 1; i <= numN; i++) {\\n\\n\\n\\n\t\t\t\t//3????????\u00b0????????\u00a7??????\\n\t\t\t\tif(i % 3 == 0){\\n\t\t\t\t\toutputNum +=\" \" + i;\\n\\n\t\t\t\t//3???????????\u00b0???????????\u00a7??????\\n\t\t\t\t}else if (String.valueOf(i).indexOf(\"3\") != -1) {\\n\t\t\t\t\toutputNum +=\" \" + i;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t//???????????????\\n\t\t\tSystem.out.println(outputNum);\\n\t\t}catch (NumberFormatException e) {\\n\t\t\tSystem.out.println(e);\\n\t\t} catch (IOException e) {\\n\t\t\tSystem.out.println(e);\\n\t\t}\\n\\n\t}\\n\\n}", "target": "154", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner scanner = new Scanner(System.in);\\n        int value = scanner.nextInt();\\n        int maxTime = scanner.nextInt();\\n        int tempCost = 1001;\\n        for(int k = 0;k < value;k++){\\n            int cost = scanner.nextInt();\\n            int time = scanner.nextInt();\\n            if(time <= maxTime&&cost <= tempCost){\\n                tempCost = cost;\\n            }\\n        }\\n        if(tempCost == 1001) System.out.println(\"TLE\");\\n        else System.out.println(tempCost);\\n    }\\n}\\n", "target": "8", "substitutes": {"scanner": ["scanoser", "scaner", "Scanoser", "scheker", " scaninner", "neroser", "scheinner", "nerinner", "aninner", "annker", "annning", "nerker", "anner", "scanNER", "scheer", " scanoser", "scanter", "canner", "Scaner", "Scanner", "anter", "canker", "anNER", "scheter", "caner", "anker", "scheNER", "scanker", "annner", " scanker", "Scanker", "canter", "Scanter", "annter", "scanning", " scanter", "anning", "nerner", "ScanNER", " scaner", "scaninner", "Scaninner", "schener", "Scanning"], "value": ["number", "trial", "Value", "timeout", "weight", "job", "cycle", "version", "name", "volume", "event", "flow", "index", "power", "memory", "money", "VALUE", "values", "length", "end", "level", "size", "total", "use", "min", "child", "position", "type", "limit", "function", "scale", "sleep", "age", "val", "v", "duration", "price", "start"], "maxTime": ["minValue", "maxValue", "lastValue", " maxTimes", "minCost", "maxCost", "minTime", "MaxTime", "Maxtime", " maxtime", "maxTimes", "mintime", " maxValue", "minTimes", "MaxTimes", "lastTime", "lastCost", "maxtime", "MaxValue", "lastTimes", " maxCost"], "tempCost": ["effectiveCO", "currentCO", "maxcost", "tempHalf", "tempWork", "singlePrice", " tempLength", "TempCo", "temCost", "maxHalf", "TempPrice", "tempcost", "maxCost", "poraryCost", "singleCo", "tempSk", "TempHalf", "tempCo", " tempCO", " tempCo", "tempPrice", "singleCost", " tempHalf", "tempCO", "maxPrice", "Tempcost", "effectiveCost", "currentSk", "currentCost", " tempcost", "porarySk", "currentLength", " tempPrice", "effectiveLength", " tempWork", "temcost", "currentWork", "temPrice", "TempLength", "TempCost", "tempLength", " tempSk", "maxLength", "temLength", "poraryWork", "singlecost"], "k": ["K", "kn", "ask", "ks", "w", "n", "p", "event", "j", "kh", "ki", "z", "sk", "ek", "b", "ck", "kk", "kin", "ke", "ku", "ky", "ik", "q", "u", "c", "x", "keep", "kw", "id", "d", "y", "kid", "v", "kick", "key", "ko", "ok", "f", "i"], "cost": ["number", "risk", "trial", "tax", "weight", "char", "rank", "eff", "step", "Cost", "delay", "cc", "grade", "cast", "speed", "rate", "service", "power", "work", "wage", "ace", "coll", "length", "count", "end", "level", "year", "error", "size", "point", "demand", "position", "c", "income", "ce", "scale", "depth", "sleep", "style", "distance", "key", "ack", "shift", "add", "duration", "fee", "rule", "price", "start", "co"], "time": ["risk", "timeout", "weight", "name", "delay", "volume", "event", "rate", "cast", "service", "money", "clock", "work", "Time", "ace", "TIME", "start", "length", "count", "order", "level", "size", "runtime", "date", "c", "type", "ime", "hour", "id", "depth", "right", "age", "ice", "duration", "shift", "times", "rule", "price", "sleep"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\\n\t\t\t\tint n = sc.nextInt();\\n\\n\t\t\t\tint array[] = new int[n];\\n\\n\t\t\t\tfor(int i = 0; i < n; i++) {\\n\t\t\t\t\tint a = sc.nextInt();\\n\t\t\t\t\tarray[i] = a;\\n\t\t\t\t}\\n\\n\t\t\t\tfor(int i = 0; i < n; i++) {\\n\t\t\t\t\tSystem.out.print(array[(n - 1) - i]);\\n\t\t\t\t\tif(i == n - 1) {\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\t}\\n\t\t\t\t\tSystem.out.print(\" \");\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println();\\n\t}\\n}", "target": "79", "substitutes": {"sc": ["pc", "esc", "exec", "rc", "ch", "cur", "cs", "ca", "cor", "cer", "sf", "ctx", "cc", "ner", "sec", "tc", "sync", "system", "cr", "osc", "ec", "sq", "lc", "class", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "text", "sche", "sem", "cv", " SC", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "n": ["network", "number", "w", "p", "s", "nb", "m", "nt", "ne", "j", "r", "ln", "nan", "t", "z", "sn", "b", "N", "in", "count", "size", "nn", "no", "ns", "l", "u", "en", "c", "num", "e", "x", "dn", "d", "y", "v", "len", "nc", "f", "o", "net", "k"], "array": ["list", "number", "collection", "parent", "address", "string", "base", "angle", "p", "group", "section", "result", "batch", "Array", "vector", "part", "index", "r", "arr", "sample", "model", "pair", "b", "image", "ray", "analysis", "order", "archive", "data", "row", "object", "instance", "range", "c", "area", "x", "align", "element", "offset", "v", "slice", "current"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "p", "oi", "abi", "ii", "hi", "index", "j", "r", "chi", "ni", "z", "ed", "ini", "b", "ai", "in", "phi", "ji", "multi", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "c", "ri", "e", "init", "iu", "eni", "mi", "x", "pi", "fi", "id", "ip", "uri", "y", "v", "ix", "f", "o", "ui", "info", "start"], "a": ["access", "pos", "fa", "ca", "oa", "p", "ac", "alpha", "na", "j", "A", "sa", "ea", "z", "an", "ab", "b", "ai", "ba", "ata", "data", "u", "c", "e", "area", "h", "x", "pi", "d", "y", "va", "offset", "aa", "f", "as", "o"]}}
{"code": "// Problem Matrix Maltiple\\n\\nimport java.util.Scanner;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    // Config\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Input\\n    String[] rowIn = sc.nextLine().split(\" \");\\n    int n = Integer.parseInt(rowIn[0]);\\n    int m = Integer.parseInt(rowIn[1]);\\n    int l = Integer.parseInt(rowIn[2]);\\n\\n    // Initialization\\n    int[][] A = new int[n][m];\\n    int[][] B = new int[m][l];\\n    long[][] C = new long[n][l];\\n    for(int i=0; i<n; i++){\\n      String[] tmp = sc.nextLine().split(\" \");\\n      for(int j=0; j<m; j++){\\n        A[i][j] = Integer.parseInt(tmp[j]);\\n      }\\n    }\\n    for(int i=0; i<m; i++){\\n      String[] tmp = sc.nextLine().split(\" \");\\n      for(int j=0; j<l; j++){\\n        B[i][j] = Integer.parseInt(tmp[j]);\\n      }\\n    }\\n\\n    // Matrix Multiple\\n    for(int i=0; i<n; i++){\\n      for(int j=0; j<l; j++){\\n        long tmp = 0;\\n        for(int k=0; k<m; k++){\\n          tmp += A[i][k] * B[k][j];\\n        }\\n        C[i][j] = tmp;\\n      }\\n    }\\n\\n    // Output\\n    for(int i=0; i<n; i++){\\n      for(int j=0; j<l-1; j++){\\n        System.out.print(C[i][j] + \" \");\\n      }\\n      System.out.print(C[i][l-1]);\\n      System.out.println();\\n    }\\n  }\\n}\\n\\n", "target": "204", "substitutes": {}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n     Scanner sc=new Scanner(System.in);\\n     int n=sc.nextInt();\\n     int T=sc.nextInt();\\n\\n     int answer=1001;\\n     for(int i=0;i<n;i++){\\n       int c=sc.nextInt();\\n       int t=sc.nextInt();\\n       if(c<answer&&t<=T){\\n         answer=c;\\n       }\\n     }\\n     System.out.println(answer!=1001?answer:\"TLE\");\\n  }\\n}", "target": "8", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "search", "cer", "sr", "ctx", "cc", "ner", "enc", "sync", "osc", "cr", "sq", "ec", "lc", "cont", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "se", "src", "Sc", "asc", "sche", "ct", "cv", "str", " SC", "scan", "nc", "uc", "sh", "sp", "sb", "parser", "parse", "SC"], "n": ["network", "number", "ot", "p", "C", "s", "nb", "m", "nt", "ne", "r", "j", "z", "b", "N", "in", "nn", "ns", "l", "u", "num", "en", "e", "conn", "x", "d", "y", "v", "nin", "f", "o", "net", "k"], "T": ["O", "test", "number", "E", "I", "p", "C", "PT", "TN", "NT", "A", "z", "W", "N", "Q", "R", "length", "TI", "H", "D", "total", "B", "L", "type", "M", "X", " N", "TC", "Type", "TA", "TT", "S", "P", "F", "d", "v", "V", "question"], "answer": ["err", "grade", "answered", "entry", "ace", "order", "archive", "term", "su", "offset", "time", "Answer", "question", "issue", "p", "result", "sn", "length", "replace", "evidence", "complete", "option", "reply", "ten", "description", "sequence", "test", "number", "iterator", "ee", "value", "average", "cover", "response", "comment", "reference", "size", "knowledge", "type", "eni", "install", "next", "ell", "message", "current", "ice", "a", "token", "trial", "address", "version", "equ", "r", "z", "about", "prefix", "e", "v", "username", "duration", "temp"], "i": ["gi", "xi", "I", "io", "si", "di", "p", "oi", "ii", "chi", "j", "ni", "z", "ini", "b", "ai", "in", "li", "ci", "ti", "qi", "u", "e", "iu", "pi", "x", "id", "ip", "y", "v", "ix", "f", "o", "ui", "start", "k"], "c": ["fc", "cs", "ca", "code", "p", "C", "ic", "ac", "cc", "enc", "r", "vc", "z", "ec", "b", "lc", "cf", "in", "bc", "xc", "end", "ci", "cm", "l", "u", "e", "it", "ce", "x", "ct", "d", "y", "v", "dc", "ice", "nc", "uc", "f", "cu", "o", "cy", "k"], "t": ["test", "token", "ot", "pt", "p", "C", "nt", "m", "j", "r", "te", "z", "dt", "b", "in", "tt", "ti", "l", "u", "en", "e", "type", "x", "h", "ta", "ct", "d", "y", "v", "f", "o"]}}
{"code": "\\n\\nimport java.util.*;\\nimport java.math.*;\\nimport java.util.Scanner;\\nimport java.math.BigInteger;\\n\\npublic class Main {\\n\tstatic final long mod = (int) (1e9 + 7);\\n\tstatic final int inf = (int) (1e9);\\n\tstatic final int maxn = (int) (1e5 + 10);\\n\\n\tstatic long ksm(long a, long b) {\\n\t\tlong ret = 1;\\n\t\twhile (b != 0) {\\n\t\t\tif (b % 2 == 1) {\\n\t\t\t\tret = ret * a % mod;\\n\t\t\t}\\n\t\t\tb >>= 1;\\n\t\t\ta = a * a % mod;\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\\n\tstatic int n, q;\\n\tstatic String s;\\n\tstatic int sum[] = new int[maxn];\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner cin = new Scanner(System.in);\\n\t\tn = cin.nextInt();\\n\t\tq = cin.nextInt();\\n\t\ts = cin.next();\\n\t\tfor (int i = 1; i < n; i++) {\\n\t\t\tsum[i+1] = sum[i];\\n\t\t\tif (s.charAt(i) == 'C' && s.charAt(i - 1) == 'A') {\\n\t\t\t\tsum[i+1]++;\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = 1; i <= q; i++) {\\n\t\t\tint l = cin.nextInt(), r = cin.nextInt();\\n\t\t\tint ans = sum[r] - sum[l];\\n\t\t\tSystem.out.println(ans);\\n\t\t}\\n\t}\\n}", "target": "52", "substitutes": {"mod": ["mag", "sub", "form", "base", "ref", "step", "mode", "fun", "delay", "diff", "loop", "sec", "m", "log", "exp", "mut", "mix", "max", "lib", "length", "post", "comp", "row", "perm", "sign", "lock", "bug", "dec", "aj", "MOD", "ow", "mods", "Mod", "module", "id", "scale", "inc", "d", "odd", "od", "cond", "off", "orig", "div", "add", "f", "reg", "pad"], "inf": ["rc", "ref", "sec", "log", "exp", "acc", "sup", "abb", "qa", "abs", "ab", "Inf", "bar", "ind", "conf", "rec", "bug", "frac", "aj", "bi", "init", "bit", "inc", "offset", "f", "abc", "auto", "info"], "maxn": [" maxne", "MaxN", "MAXp", "Maxn", "limitn", "limitp", "maxne", "Maxnt", "Maxne", "limitN", "MAXn", " maxp", "MAXnt", "limitne", "Maxp", "maxnt", "maxp", " maxnt", "maxN", " maxN", "MAXN"], "a": ["w", "fa", "ga", "ar", "ca", "p", "ia", "alpha", "ac", "m", "aaa", "A", "sa", "ea", "t", "j", "z", "ab", "an", "ai", "ae", "ba", "da", "aj", "u", "c", "e", "af", "am", "x", "next", "d", "y", "offset", "aa", "f", "as", "abc", "auto", "ad"], "b": ["bb", "p", "nb", "lb", "m", "eb", "abb", "t", "ab", "ib", "ba", "obj", "ob", "B", "u", "bi", "c", "e", "binary", "bs", "x", "h", "next", "d", "y", "v", "beta", "bf", "f", "sb", "cb", "ad", "rb"], "ret": ["prev", "rc", "re", "arg", "ref", "fun", "ft", "nt", "result", "Ret", "rev", "sa", "t", "abs", "ab", "rets", "max", "bc", "end", "opt", "al", "success", "af", "ext", "x", "bis", "bit", "next", "cat", "flag", "id", "alt", "rt", "val", "offset", "v", "RET", "len", "back", "bf", "reply", "f", "abc", "active", "reg", "g", "cb", "ad"], "n": ["network", "w", "p", "nb", "nt", "m", "nan", "j", "ne", "t", "mn", "z", "N", "in", "nn", "ns", "u", "en", "c", "num", "e", "x", "h", "d", "un", "y", "v", "nc", "f", "o", "g", "net", "k"], "q": ["qs", "w", "p", "qq", "query", "m", "j", "qa", "t", "z", "sq", "dq", "qu", "Q", "iq", "in", "count", "qi", "u", "c", "quant", "x", "id", "d", "qt", "y", "v", "f", "g", "k"], "s": ["comments", "fs", "hs", "is", "w", "params", "cs", "obs", "si", "string", "space", "ops", "p", "m", "sc", "gs", "os", "sa", "sets", "sing", "sync", "sv", "sl", "abs", "sk", "js", "ls", "tests", "ds", "ins", "in", "sg", "ss", "ws", "stats", "its", "ns", "se", "u", "c", "ses", "opens", "su", "xs", "ts", "words", "states", "S", "ps", "v", "es", "f", "as", "sp", "sb", "g", "times", "strings", "spec"], "sum": ["ash", " sums", "weight", "pos", "um", "si", "sub", "space", "sort", "average", "result", "user", "index", "pass", "ul", "sa", "null", "by", "Sum", " summ", "skip", "mass", "hash", "conf", "comment", "count", "mean", "match", "size", "total", "all", "stats", "miss", "use", "sign", "pack", "se", "num", "su", "scale", "cat", "parse", "spread", "ut", "vol", "sim", "add", "plus", "up", "sh", "summary", "info", "dot", "mem", "net", "start", "us", "gram", "mask"], "cin": ["Lin", "pc", "din", "CI", "cell", "cs", "cer", "aco", "cry", "cli", "vine", "pod", "cn", "cia", "cil", "chi", "cit", "colo", "vc", "none", "ini", "lc", "coll", "conf", "pie", "in", "xc", "kin", "circ", "ku", "ci", "reci", "sin", "cus", "vin", " cis", "zi", "rup", "se", "sys", "c", "conn", "ce", "cgi", "bis", "zy", "die", "lin", "cat", "tin", "zin", "rys", "cos", "cone", "mc", "isin", "coin", "scan", "arin", "cu", "cy", "vir", " sin"], "i": ["xi", "gi", "I", "is", "io", "err", "si", "ie", "di", "p", "oi", "cli", "diff", "ii", "chi", "j", "index", "ni", "z", "uli", "ini", "isi", "ai", "in", "inner", "multi", "ji", "li", "ti", "ci", "phi", "ik", "zi", "ri", "qi", "u", "bi", "c", "init", "e", "iu", "it", "eni", "mi", "x", "pi", "h", "yi", "fi", "id", "ip", "uri", "y", "ix", "v", "api", "slice", "vi", "ori", "anti", "f", "ui", "o", "info", "k"], "l": ["p", "m", "j", "ul", "z", "sl", "lc", "li", "el", "rl", "L", "u", "lp", "c", "e", "x", "h", "kl", "d", "ll", "dl", "ur", "v", "ol", "f", "o", "nl", "al", "k"], "r": ["nr", "w", "ar", "p", "sr", "er", "yr", "m", "j", "z", "R", "fr", "ri", "u", "c", "e", "x", "rr", "rh", "ru", "d", "v", "f", "o", "g", "ur", "k", "rb"], "ans": [" scans", " errors", "ks", "ants", "cons", "cs", "AN", "lan", "amps", "offs", "ents", "ANS", "nan", "lang", "anas", "ana", "outs", "ian", "an", "ann", " sins", "ars", "ins", "lines", " means", "atan", "cas", "aning", "ians", "ns", "rors", " spans", " ang", "ats", "aus", "ids", "ions", "anus", "aned", "scan", "les", "ons", "anc", "asts", "An", "nas"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tString inStr;\\n\t\tinStr = inp();\\n\t\tString[] in;\\n\t\tin = inStr.split(\" \");\\n\\n\t\tint a = Integer.valueOf(in[0]);\\n\t\tint b = Integer.valueOf(in[1]);\\n\\n\t\tif (a < b)\\n\t\t\tSystem.out.println(\"a < b\");\\n\t\telse if (a > b)\\n\t\t\tSystem.out.println(\"a > b\");\\n\t\telse\\n\t\t\tSystem.out.println(\"a == b\");\\n\\n\t}\\n\\n\tprivate static String inp() throws Exception {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\treturn br.readLine();\\n\t}\\n\\n}", "target": "179", "substitutes": {"inStr": ["outSt", "outTr", "inputSt", " inString", "Instr", "inTr", "inBr", "ninStr", "outText", "inText", " inText", "ninString", " instr", "outStr", "InSt", "InBr", "incstr", " inTr", "incBr", "inputString", "inputText", "outString", "inString", " inSt", "incSt", "inputStr", "InStr", "instr", "outstr", "ninTr", " inBr", "incStr", "inSt", "ninstr"], "in": ["exec", "din", "pin", "re", "In", "bin", "n", "string", "name", "line", "diff", "cli", "m", "log", "part", "index", "pass", "with", "digit", "cin", "ini", "doc", "ins", "rin", "inside", "image", "input", "inner", "kin", "into", "data", "readable", "sin", "vin", "read", "init", "out", "lin", "source", "id", "inc", "con", "str", "gin", "again", "nin", "login", "isin", "ex", "f", "plus", "include", "as", "temp", "i", "IN", "inn"], "a": ["fa", "ga", "n", "au", "p", "oa", "s", "alpha", "ac", "aaa", "ia", "na", "ada", "r", "A", "sa", "ea", "ma", "an", "ab", "count", "ae", "ba", "pa", "da", "l", "aj", "u", "c", "e", "af", "am", "x", "h", "area", "d", "y", "va", "api", "aa", "f", "as", "o", "ama", "i"], "b": ["n", "base", "bb", "p", "nb", "eb", "r", "j", "z", "ab", "ib", "bc", "ub", "ba", "ob", "B", "l", "u", "c", "e", "fb", "bs", "h", "x", "d", "bh", "y", "v", "bf", "aa", "f", "o", "sb", "g", "i", "rb"], "br": ["plug", " Br", "nr", "kr", "i", "err", "Br", "shr", "brush", "tr", "line", "er", "buf", "sr", "yr", "result", "BR", " bra", "r", "browser", "cr", "arr", "dr", " BR", "ibr", "bc", "keeper", "obj", "mr", "fr", "HR", " bio", "ber", "pr", "bro", "erer", "ler", " ab", "str", "hr", "STR", "iter", "bl", "rb"]}}
{"code": "\\nimport java.util.*;\\nimport java.io.*;\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int c = sc.nextInt();\\n        int count = 0;\\n        for(int i = b; i<=c;i++){\\n            if(i%a==0){\\n               count++;\\n               break;\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n        if(count>0) System.out.println(\"OK\");\\n        else System.out.println(\"NG\");\\n    }\\n}\\n", "target": "28", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "cer", "sr", "ctx", "com", "cc", "ner", "sec", "tc", "soc", "system", "cr", "osc", "sq", "ec", "lc", "cont", " scr", "bc", "sci", "ss", "ci", "cus", "scope", "se", "src", "Sc", "asc", "sche", "ct", "cv", " SC", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "sb", "SC"], "a": ["span", "fa", "ca", "n", "base", "p", "oa", "s", "ac", "alpha", "aaa", "index", "A", "sa", "ea", "z", "ab", "an", "ai", "ae", "ba", "data", "da", "ava", "aj", "area", "next", "la", "d", "va", "y", "api", "current", "aa", "f", "as", "o"], "b": ["n", "base", "bb", "p", "lb", "j", "r", "bp", "z", "ab", "bound", "length", "bc", "ba", "B", "l", "u", "e", "fb", "x", "h", "next", "d", "y", "v", "f", "o", "g", "cb", "start", "k", "rb"], "c": ["n", "p", "C", "s", "cc", "ac", "m", "r", "z", "ec", "lc", "cf", "ci", "size", "l", "u", "e", "x", "h", "d", "y", "v", "uc", "f", "cu", "o", "g", "k", "con"], "count": ["test", "number", "list", "force", "parent", "weight", "n", "code", "base", "name", "p", "group", "loop", "low", "nt", "batch", "part", "index", "counter", "z", "coll", "length", "level", "match", "size", "total", "error", "num", "type", "x", "h", "limit", "sum", "id", "allow", "depth", "call", "d", "check", "Count", "key", "f", "second", "found", "start", "col"], "i": ["gi", "xi", "I", "si", "n", "di", "p", "cli", "m", "abi", "ii", "hi", "chi", "j", "index", "t", "z", "mu", "lc", "ai", "length", "phi", "ji", "multi", "li", "ci", "ti", "zi", "qi", "u", "bi", "e", "it", "iu", "pi", "x", "fi", "ip", "uri", "d", "y", "v", "ix", "slice", "f", "o", "ui", "info"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u6574\u6570\u306e\u5165\u529b\\n\t\tint a = sc.nextInt();\\n\t\tString f = sc.next();\\n\t\tString b = sc.next();\\n\t\tString[] c = new String[a];\\n\t\tString[] d = new String[a];\\n\t\tString e = \"\";\\n\t\tfor(int i = 0; i < a; i++){\\n\t\t\tc[i] = f.substring(i, i + 1);\\n\t\t} \\n\t\tfor(int i = 0; i < a; i++){\\n\t\t\td[i] = b.substring(i, i + 1);\\n\t\t}\\n\t\tfor(int i = 0; i < a; i++){\\n\t\t\te += c[i] + d[i];\\n\t\t}\\n\t\tSystem.out.println(e);\\n\t\t\\n\t\t\\n\t}\\n}", "target": "200", "substitutes": {"sc": [" pars", " src", " sp", " sm", "sq", "ann", " ser", " scr", "ss", " arr", "se", " app", "Sc", " surf", " ar", " scanner", " SC", " res", " ans", "scan", " scorer", " Sc", " sl", "sb", " rc", "parser", "SC"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint cnt5=0, cnt7=0;\\n\t\tfor(int i=0; i<3; ++i)\\n\t\t{\\n\t\t\tint x=sc.nextInt();\\n\t\t\tif(x==5) ++cnt5;\\n\t\t\telse if(x==7) ++cnt7;\\n\t\t}\\n\t\tSystem.out.println((cnt5==2 && cnt7==1)?\"YES\":\"NO\");\\n\t\tsc.close(); \\n\t}\\n\\n}", "target": "16", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "ctx", "cc", "sec", "tc", "pl", "sync", "system", "cr", "sq", "osc", "lc", "class", "bc", "sci", "ss", "ci", "cl", "scope", "se", "l", "c", "src", "Sc", "ct", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "cp", "server", "sh", "sp", "sb", "anc", "SC"], "cnt5": ["crt5", "crt55", "cNT2", "cct7", "cct95", "cmp25", "CNT5", "cno5", "cct5", "cno2", "cNT6", "cntfive", "cnt25", "crent5", "Cct20", "Cct5", "cnt20", "Cnt2", " cint55", "cNT7", "crt15", " cntfive", "cct6", "cct2", "cmp5", " cnt15", "cnt15", "crent15", "cint55", "cnt6", "crent55", "cct25", "cmp20", "crt20", "Cnt5", "cNT5", " cint5", "cint5", "Cnt95", "Cnt7", "Cnt20", "Cnt6", "CNT6", "Cnt25", "Cct25", "crtfive", "CNT7", "cnt95", "crt25", " cnt55", "cmp95", "CNT2", "crt95", "crentfive", " cint15", "Cct95", "cintfive", "cct20", "cint15", "cnt2", "cnt55", "cno6", " cintfive", "cno7"], "cnt7": ["cnc13", " cnt07", "cct707", "cct7", " cnt67", "Cnt67", "cct5", "ccount67", "ccount07", "cNT707", "cnc5", " cint07", " cnc7", "cndseven", "cct67", "cNT13", "cNT7", "ccount5", "cncseven", "cct07", " cnc5", "CNT67", "cnc707", "cintseven", " cint5", "cint5", "cnd5", " cint67", "Cnt7", "cnd7", " cncseven", "cnt707", "cNT67", "cint7", "cint07", "cint67", "CNT7", " cnc67", "cct13", "CNT13", "cntseven", "CNT707", "ccount7", "cnc67", "Cnt707", "cnd67", "cnt13", "cnt07", "cnt67", " cntseven", "cnc7", "Cnt13", " cint7"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "p", "oi", "ii", "hi", "part", "index", "j", "chi", "t", "mu", "b", "ai", "in", "li", "ci", "ti", "l", "u", "c", "e", "it", "iu", "mi", "pi", "id", "ip", "y", "v", "ix", "key", "f", "o", "ui", "info", "start", "k"], "x": ["xi", "wx", "px", "w", "pos", "xe", "ww", "n", "p", "ctx", "m", "fx", "index", "cross", "t", "z", "work", "b", "max", "xxxx", "xy", "rx", "lex", "pe", "ax", "l", "num", "c", "e", "h", "xs", "X", "tx", "dx", "xx", "id", "d", "y", "v", "ix", "xxx", "ex", "sex", "xp", "f", "plus", "k"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String args[]) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint x = sc.nextInt();\\n\t\tsc.close();\\n\t\tfor (int a = 1; a <= 9; a++) {\\n\t\t\tif (x % a == 0 && x / a <= 9) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(\"No\");\\n\t}\\n}\\n", "target": "194", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ca", "sub", "sf", "sr", "cc", "ner", "soc", "cr", "sl", "ec", "sq", "osc", "lc", "st", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "sem", "cv", "str", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "sb", "SC"], "x": ["wx", "px", "w", "pos", "code", "base", "p", "ctx", "axis", "width", "fx", "index", "t", "qa", "z", "one", "work", "b", "max", "xy", "xc", "rx", "ax", "u", "c", "h", "xs", "tx", "X", "dx", "xx", "y", "ix", "v", "xxx", "ex", "act", "xp", "f", "abc", "i"], "a": ["span", "access", "sta", "fa", "sha", "ga", "ca", "au", "p", "oa", "ua", "aaa", "alpha", "ac", "m", "ia", "part", "na", "wa", "aaaa", "j", "A", "sa", "ea", "ao", "qa", "z", "ma", "an", "ab", "b", "ai", "aux", "count", "ae", "ba", "ata", "pa", "da", "ava", "aj", "num", "c", "aw", "e", "af", "xa", "area", "am", "index", "la", "va", "ha", "aa", "div", "f", "as", "i", "k"]}}
{"code": "\\nimport java.io.*;\\nimport java.util.StringTokenizer;\\npublic class Main{\\n    public static void main(String[] args) throws IOException {\\n        scanner sc = new scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        int n = sc.nextInt();\\n        double sum = 0;\\n        for (int i = 0; i < n; i++) {\\n            sum+= 1/sc.nextDouble();\\n        }\\n        out.print(1/sum);\\n\\n        out.flush();\\n\\n    }\\n}\\nclass scanner{\\n    StringTokenizer st;\\n    BufferedReader br;\\n    public scanner(InputStream s){\\n        br = new BufferedReader(new InputStreamReader(s));\\n    }\\n    public scanner (String s) throws FileNotFoundException { br = new BufferedReader(new FileReader(s));}\\n\\n    public String next() throws IOException {\\n        while (st == null || !st.hasMoreTokens())\\n            st = new StringTokenizer(br.readLine());\\n        return st.nextToken();\\n    }\\n\\n    public int nextInt() throws IOException {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public long nextLong() throws IOException {\\n        return  Long.parseLong(next());\\n    }\\n\\n    public String nextLine() throws IOException {\\n        return br.readLine();\\n    }\\n\\n    public double nextDouble() throws IOException {\\n        return Double.parseDouble(next());\\n    }\\n\\n    public boolean ready() throws IOException {\\n        return br.ready();\\n    }\\n}", "target": "120", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "cs", "cer", "sr", "ctx", "cc", "enc", "sync", "cr", "sq", "osc", "lc", "bc", "sci", "cle", "ci", "sign", "cus", "cl", "ssh", "se", "scope", "c", "Sc", "asc", "sem", "ct", "cv", " SC", "dc", "sch", "mc", "scan", "nc", "uc", " Sc", "sh", "sp", "sb", "SC", "squ"], "out": ["Out", "exec", "file", "io", "w", "ch", "client", "err", "In", "window", "word", "name", "p", "line", "screen", "output", "write", "cli", "m", "log", "user", "serv", "r", "pass", "null", "sync", "outs", "report", "b", "writer", "in", "input", "prefix", "error", "cache", "outer", "pool", "c", "conn", "ou", "x", "print", "inc", "str", "OUT", "v", "again", "buffer", "ex", "console", "o", "sp", "up", "temp", "IN", "flush"], "n": ["span", "w", "p", "nb", "m", "nt", "ne", "j", "ln", "mn", "ni", "z", "t", "sn", "b", "N", "in", "count", "size", "ns", "l", "u", "num", "c", "en", "conn", "x", "d", "v", "len", "nc", "f", "nl", "o", "g", "net", "k"], "sum": ["cost", "ram", "weight", "um", "si", "value", "diff", "alpha", "average", "pass", "ul", "Sum", "max", "doc", "count", "av", "mean", "cum", "size", "total", "miss", "data", "sam", "ass", "sign", "se", "num", "am", "su", "scale", "cat", "offset", "spread", "vol", "sim", "fat", "act", "div", "sh", "us", "dot", "up", "info", "net", "parse", "gram", "cal"], "i": ["a", "xi", "gi", "I", "si", "di", "p", "oi", "m", "ii", "hi", "chi", "j", "index", "t", "z", "ini", "mu", "b", "ai", "multi", "li", "ci", "ti", "zi", "l", "ri", "u", "bi", "c", "qi", "e", "init", "it", "mi", "x", "pi", "h", "id", "ip", "d", "v", "ix", "f", "o", "ui", "info", "k"], "st": ["th", "sw", "is", "sta", "string", "sf", "pt", "tr", "p", "struct", "ste", "sts", "ft", "nt", " est", "sth", "r", "inst", "sa", "stri", "t", "est", "cr", "sl", "sn", "ost", "b", "fe", "std", "ss", "stable", "pe", "fr", "cl", "nd", "ast", "ist", "src", "bt", "pr", "ct", "rt", "str", "ust", "rest", "ut", "const", "sh", "sp", "sb", "ST", "be", "ur", "rd", "bl", "St"], "br": ["ver", "ctr", "ch", "bur", "err", "Br", "cur", "bo", "ar", "bb", "ref", "tr", "p", "sr", "er", "buf", "BR", "bor", "r", "browser", "cr", "arr", "ab", "sl", "b", "fe", "bar", "dr", "gr", "bc", "ob", "raf", "bel", "fr", "mr", "fb", "src", "bs", "ber", "or", "bridge", "pr", "bro", "lr", "repl", "bt", "rib", "ler", "ru", "fore", "str", "bh", "rest", "hr", "sp", "sb", "be", "ur", "bl", "rb"], "s": ["a", "less", "file", "settings", "si", "string", "name", "ings", "p", "Name", "sym", "ner", "Storage", "Source", "m", "Manager", "gs", "service", "r", "Resources", "sets", "null", "Service", "south", "ed", "sl", "storage", "b", "in", "input", "Path", "ss", "Str", "Server", "Location", "l", "u", "ers", "c", "e", "ing", "ses", "Url", "opens", "Socket", "or", "single", "source", "S", "d", "ssl", "path", "es", "f", "services", "server", "strings", "Files"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String [] args) throws IOException{\\n        FastScanner sc=new FastScanner();\\n        PrintWriter out=new PrintWriter(System.out);\\n        int n=sc.nextInt();\\n        char [] ch=sc.next().toCharArray();\\n        int cnt=0;\\n        char p=ch[0];\\n        for(int i=1;i<n;i++){\\n            if(ch[i]!=p){\\n                cnt++;\\n                p=ch[i];\\n            }\\n        }\\n        cnt++;\\n        out.println(cnt);\\n        out.close();\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nclass FastScanner{\t\\n    private int BUFFER_SIZE = 1 << 16;\\n   \\n   private  DataInputStream din;\\n   \\n   private  byte[] buffer;\\n   \\n   private int bufferPointer, bytesRead;\\n   \\n   public FastScanner() {\\n       din = new DataInputStream(System.in);\\n       buffer = new byte[BUFFER_SIZE];\\n       bufferPointer = bytesRead = 0;\\n   }\\n\\n   public FastScanner( String file_name) throws IOException {\\n       din = new DataInputStream(new FileInputStream(file_name));\\n       buffer = new byte[BUFFER_SIZE];\\n       bufferPointer = bytesRead = 0;\\n   }\\n   \\n   public String readLine() throws IOException {\\n        byte[] buf = new byte[64];\\n       int cnt = 0, c;\\n       while ((c = read()) != -1) {\\n           if (c == '\\n')\\n               break;\\n           buf[cnt++] = (byte) c;\\n       }\\n       return new String(buf, 0, cnt);\\n   }\\n   \\n   public String next() throws IOException{\\n\\n       byte c = read();\\n       while(Character.isWhitespace(c)){\\n           c = read();\\n       }\\n       \\n        StringBuilder builder = new StringBuilder();\\n       builder.append((char)c);\\n       c = read();\\n       while(!Character.isWhitespace(c)){\\n           builder.append((char)c);\\n           c = read();\\n       }\\n       \\n       return builder.toString();\\n   }\\n\\n   public int nextInt() throws IOException {\\n       int ret = 0;\\n       byte c = read();\\n       while (c <= ' ')\\n           c = read();\\n        boolean neg = (c == '-');\\n       if (neg)\\n           c = read();\\n       do {\\n           ret = ret * 10 + c - '0';\\n       } while ((c = read()) >= '0' && c <= '9');\\n\\n       if (neg)\\n           return -ret;\\n       return ret;\\n   }\\n   \\n   public int[] nextIntArray( int n) throws IOException {\\n        int arr[] = new int[n];\\n       for(int i = 0; i < n; i++){\\n           arr[i] = nextInt();\\n       }\\n       return arr;\\n   }\\n\\n   public long nextLong() throws IOException {\\n       long ret = 0;\\n       byte c = read();\\n       while (c <= ' ')\\n           c = read();\\n        boolean neg = (c == '-');\\n       if (neg)\\n           c = read();\\n       do {\\n           ret = ret * 10 + c - '0';\\n       } while ((c = read()) >= '0' && c <= '9');\\n       if (neg)\\n           return -ret;\\n       return ret;\\n   }\\n   \\n   public long[] nextLongArray( int n) throws IOException {\\n        long arr[] = new long[n];\\n       for(int i = 0; i < n; i++){\\n           arr[i] = nextLong();\\n       }\\n       return arr;\\n   }\\n\\n   public char nextChar() throws IOException{\\n       byte c = read();\\n       while(Character.isWhitespace(c)){\\n           c = read();\\n       }\\n       return (char) c;\t\\n   }\\n   \\n   public double nextDouble() throws IOException {\\n       double ret = 0, div = 1;\\n       byte c = read();\\n       while (c <= ' ')\\n           c = read();\\n        boolean neg = (c == '-');\\n       if (neg)\\n           c = read();\\n\\n       do {\\n           ret = ret * 10 + c - '0';\\n       } while ((c = read()) >= '0' && c <= '9');\\n\\n       if (c == '.') {\\n           while ((c = read()) >= '0' && c <= '9') {\\n               ret += (c - '0') / (div *= 10);\\n           }\\n       }\\n\\n       if (neg)\\n           return -ret;\\n       return ret;\\n   }\\n   \\n   public double[] nextDoubleArray( int n) throws IOException {\\n        double arr[] = new double[n];\\n       for(int i = 0; i < n; i++){\\n           arr[i] = nextDouble();\\n       }\\n       return arr;\\n   }\\n\\n   private void fillBuffer() throws IOException {\\n       bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\\n       if (bytesRead == -1)\\n           buffer[0] = -1;\\n   }\\n\\n   private byte read() throws IOException {\\n       if (bufferPointer == bytesRead)\\n           fillBuffer();\\n       return buffer[bufferPointer++];\\n   }\\n\\n   public void close() throws IOException {\\n       if (din == null)\\n           return;\\n       din.close();\\n   }\\n\\n}\\n\\n", "target": "218", "substitutes": {"sc": ["pc", "scl", "esc", "sw", "rc", "cs", "ca", "cer", "sr", "cc", "ner", "sec", "enc", "system", "cr", "sq", "osc", "lc", "ec", "mp", "in", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "src", "Sc", "asc", "ct", "cv", "inc", " SC", "sch", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "sb", "SC"], "out": ["Out", "exec", "file", "list", "parent", "io", "w", "png", "err", "In", "bin", "string", "client", "name", "screen", "line", "output", "s", "write", "user", "log", "home", "r", "pass", "channel", "this", "system", "copy", "outs", "doc", "writer", "conf", "in", "ins", "input", "inner", "prefix", "error", "println", "cache", "obj", "scope", "outer", "conn", "engine", "process", "print", "source", "path", "OUT", "again", "console", "ex", "o", "up", "reader", "view", "IN"], "n": ["number", "w", "nb", "s", "m", "nt", "j", "r", "t", "ni", "z", "sn", "b", "N", "in", "count", "nn", "ns", "l", "u", "num", "fn", "conn", "x", "d", "v", "len", "nc", "f", "nl", "net", "k"], "ch": ["chan", "ech", "th", "ich", "arch", "cur", "cho", "char", "cor", "CH", "code", "ctx", "ach", "inch", "chi", "che", "enc", "channel", "b", "cha", "qu", "conf", "cle", "input", "tch", "data", "cht", "q", "fr", "cl", "l", "se", "zh", "ches", "cher", "conn", "ce", "text", "ph", "unch", "sch", "v", "cp", "f", "patch", "sh", "Ch", "pattern", "k"], "cnt": ["ucrt", "pnt", "Cnt", "acnt", "ecNT", "ctx", "cct", "Cnc", "cpt", " cnc", "acnc", "icnd", "ucount", " ctx", "uncnt", " cpt", "cnet", "ancct", "crt", "cNT", "ancnn", "ancnt", "ucnn", "cret", "Cnet", "ecnt", "scnet", "arcct", "ppt", " count", "count", "ecpt", "Cpt", "crit", "uncct", "ucnt", "scnt", "unctx", " cct", " crt", "lcnt", "scNT", " crit", "ecant", "lcret", "Ctx", "cno", "lcount", " cno", "icNT", "ucct", "ancrt", "acNT", "lcno", "cnc", "arctx", "pNT", "cnn", " cant", " cret", "lcnn", "sctx", "pant", "uncrit", "CNT", " cnd", "cnd", " cNT", "ucret", "acpt", "arcnt", "icnn", "lcnd", "uncNT", "lcNT", "arcrit", "icnt", "uncnet", "cant", " cnn", "ucno"], "p": ["pc", "ap", "parent", "w", "pos", "code", "string", "s", " e", " data", "m", "fp", "part", "r", "j", "t", "bp", "primary", "b", "pointer", "pat", "pe", "pa", "l", "point", "u", "password", "lp", "e", "tp", "type", "x", "h", "pi", "pr", "P", "y", "v", "press", "cp", "f", "patch", "o", "sp", "k", "jp"], "i": ["gi", "xi", "I", "is", "io", "si", "di", "oi", "m", "abi", "ii", "hi", "index", "j", "t", "ni", "z", "ini", "b", "ai", "phi", "multi", "ji", "li", "ci", "ti", "ri", "qi", "u", "bi", "l", "e", "init", "it", "pi", "fi", "next", "id", "ip", "uri", "y", "v", "ix", "key", "f", "ui", "o", "info"], "BUFFER_SIZE": ["BUFFERINGVERSION", "BUALL_SIZE", "BUERESSSIZE", "BUFFERINGUSE", "BUVER_Size", "BUFFER_size", "BUFFERESSSIZE", "BUFFERINGSize", "BUFFER_VERSION", "BUER_MODE", "BUERESSUSE", "BUER_SIZE", "BUERESSMODE", "BUER_USE", "BUFFER_LOC", "BUFFERINGSIZE", "BUFFER_MODE", "BUVER_VERSION", "BUERESSsize", "BUVER_size", "BUFFERESSsize", "BUFFER_STATE", "BUER_size", "BUFFERESSMODE", "BUFFER_USE", "BUFFER_Size", "BUALL_size", "BUFFERINGsize", "BUALL_STATE", "BUALL_LOC", "BUFFERESSUSE", "BUFFERINGMODE", "BUVER_SIZE"], "din": ["gi", "xi", "cdn", "pin", "pid", "bin", "di", "dy", "serv", "sth", "pd", "du", "cin", "ni", "ini", "thin", "ins", "ai", "in", "rin", "asi", "input", "kin", "data", "sin", "vin", "ri", "src", "cgi", "bis", "die", "lin", "tin", "zin", "d", "gin", "nin", "oin", "uid", "dat", "lu", " Din", "reader", "inn"], "buffer": ["timeout", "FFER", "window", "padding", "append", "transfer", "bin", "bb", "border", "header", "batch", "buff", "slave", "memory", "channel", "sync", "resource", "document", "pb", "queue", "image", "length", "uffer", "bc", "input", "reference", "data", "cache", "read", "position", "pool", "fb", "binary", "Buffer", "source", "scale", "ptr", "capacity", "offset", "slice", "console", "server", "ignore", "flush", "sequence"], "bufferPointer": ["bufferBoester", "bufferWrainters", "bufferLoister", "bufferPOester", "bufferPOument", "bufferWraeter", "bufferPointers", "bufferPoINTER", "bufferPaister", " bufferWrapointer", "bufferProminters", " bufferWraeter", "bufferWraINTER", " bufferPoument", "bufferLopointer", "bufferPromINTER", "bufferBoument", " bufferPoeter", " bufferPopointer", "bufferPoester", "bufferPrometer", "bufferPainters", "bufferPopointer", "bufferWraument", "bufferPapointer", "bufferPOinters", "bufferLointers", " bufferWraester", " bufferWrainter", " bufferPoester", " bufferWraument", " bufferWraister", "bufferWrainter", " bufferPointers", "bufferWrapointer", "bufferPeter", "bufferLointer", "bufferBointers", "bufferPOinter", "bufferProminter", "bufferPinter", "bufferPainter", " bufferPoINTER", "bufferPoeter", "bufferWraester", " bufferPoister", "bufferPoument", "bufferPinters", "bufferWraister", " bufferWrainters", "bufferBointer", "bufferPINTER", "bufferPoister", " bufferWraINTER"], "bytesRead": ["opsRead", "bytesWrite", "linesReader", "errorsRead", "bsREAD", "bsRead", "bitsWrite", "errorsREAD", "opsread", "bitsread", "bitsRead", "opsWrite", " bytesReader", "Bytesread", "bytesLoad", "bytesread", "bitsLoad", "BytesReader", "bsReader", "bsread", "BytesRead", "linesRead", "opsReader", "errorsReader", " bytesread", "bytesReader", " bytesWrite", " bytesLoad", "BytesWrite", "bytesREAD", "linesread", "errorsread", "linesREAD", "BytesLoad"], "file_name": ["filePathsize", "File_NAME", "filePathname", "file_size", "File_size", "fileLogNAME", "file_pointer", "fileLogpointer", "filePathpointer", "fileLogsize", "file_NAME", "File_pointer", "filePathNAME", "file_range", " file_path", " file_size", "file_path", " file_range", "fileLogname", "File_name"], "buf": ["br", "img", "bin", "uf", "char", "bb", "ctx", "nb", "bd", "batch", "buff", "bytes", "wb", "bp", "ab", "b", "pb", "que", "queue", "cf", "coll", "bc", "ba", "data", "cache", "pool", "fb", "binary", "Buff", "vec", "la", "cv", "bag", "bh", "box", "db", "ha", "bf", "uc", "f", "cb", "seq", "bl", "pad", "rb"], "c": ["cur", "err", "ca", "cc", "b", "coll", "ctrl", "arc", "character", "nc", "cp", "cu", "g", "chain", "pc", "fc", "rc", "char", "name", "ac", "vc", "ec", "lc", "cf", "count", "cache", "u", "conn", "h", "unc", "o", "col", "esc", "cs", "code", "ic", "m", "enc", "cr", "comment", "xc", "cm", "q", "cl", "l", "x", "dc", "mc", "anc", "C", "tc", "r", "t", "z", "end", "ci", "cus", "dec", "e", "ce", "ct", "content", "d", "y", "v", "uc", "f", "cy", "k"], "builder": ["adder", "string", "upper", "bb", "er", "board", "result", "loader", "worker", "creator", "letter", "bean", "r", "driver", "holder", "utils", "config", "later", "build", "atter", "builders", "b", "writer", "image", "bar", "manager", "bc", "url", "inner", "keeper", "row", "object", "instance", "iter", "ener", "l", "outer", "layer", "e", "wrapper", "other", "Builder", "oder", "caster", "ler", "block", "building", "db", "v", "message", "f", "runner", "ui", "sb", "info", "reader", "parser"], "ret": ["res", "re", "lic", "xt", "sec", "result", "Ret", "lit", "counter", "max", " num", "bc", "match", "total", "Num", " result", "Ct", "num", " counter", "cat", "id", "val", "back", "free", "active", "RET", "col"], "neg": ["get", "s", "r", "this", "_", "num", "str", "format"]}}
{"code": "import java.util.*;\\nclass Main{\\n  public static void main(String[] args){\\n       Scanner sc = new Scanner(System.in);\\n    int h = sc.nextInt();   \\n    int a = sc.nextInt();\\n    int t = 0;\\n    while(h > 0){\\n    h = h - a;\\n      t = t + 1;\\n      }\\n    System.out.println(t);\\n }\\n}", "target": "147", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "ca", "cer", "sr", "com", "cc", "sec", "tc", "acc", "enc", "cr", "osc", "sq", "ec", "lc", "bc", "sci", "ss", "cus", "cl", "scope", "se", "c", "Sc", "asc", "sche", "ct", "cv", " SC", "sch", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "h": ["th", "hs", "ht", "w", "n", "p", "m", "hi", "index", "r", "z", "hm", "b", "in", "length", "ah", "H", "ih", "total", "dh", "q", "l", "u", "c", "he", "hp", "x", "rh", "head", "ph", "id", "d", "bh", "y", "v", "hr", "ha", "hh", "f", "o", "sh", "i", "k"], "a": ["w", "at", "n", "ca", "au", "p", "alpha", "ac", "m", "wa", "A", "sa", "z", "an", "b", "ai", "ba", "pa", "da", "l", "aj", "u", "c", "e", "area", "x", "ta", "la", "d", "y", "va", "aa", "as", "o", "i", "ad"], "t": ["test", "w", "at", "n", "pt", "ot", "stop", "p", "T", "m", "j", "z", "dt", "b", "tt", "total", "tty", "l", "u", "c", "tp", "type", "x", "out", " T", "ts", "ta", "tu", "tick", "tm", "tail", "d", "qt", "y", "offset", "v", "tf", "f", "time", "o", "g", "temp", "i", "k"]}}
{"code": "\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    public static void main(String[] args)throws IOException {\\n        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st;\\n        StringBuilder print=new StringBuilder();\\n        int x=Integer.parseInt(br.readLine());\\n        x=1-x;\\n        System.out.println(x);\\n    }\\n}\\n", "target": "148", "substitutes": {"br": ["ch", "io", "err", "Br", "form", "bb", "tr", "sr", "buf", "yr", "bd", "BR", "r", "browser", "cr", "abs", "arr", "b", "dr", "gr", "ibr", "ocr", "bc", "ors", "mr", "fr", "B", "HR", "ori", "src", "bs", "bridge", "ber", "bt", "pr", "bro", "bh", "str", "hr", "cro", "bf", "div", "sp", "sb", "orb", "cb", "bl", "rb"], "st": [" St", " ste", " subst", "sts", "sc", "r", "t", " sts", "fe", " first", "ss", "Str", " rest", "se", " sc", "ct", "str", " split", " ft", "sb", "ST", "STR", "sp", " sl", "St"], "print": [" ex", "w", " pat", "string", "p", "hex", "s", "xt", "r", " ret", "t", "Print", " w", "Str", " writer", "l", " f", " std", "xx", "str", "v", " fmt", "ex", " hex", "f", "i", " line"], "x": ["xi", "wx", "number", "w", "pos", "xe", "ww", "n", "code", "step", "name", "p", "xt", "m", "fx", "index", "t", "z", "work", "b", "max", "xxxx", "xc", "rx", "lex", "ax", "l", "u", "num", "c", "e", "h", "xs", "X", "tx", "dx", "xx", "id", "d", "val", "y", "v", "ix", "xxx", "ex", "xp", "f", "i"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint n = Integer.parseInt(sc.next());\\n\t\t\\n\t\tint[] h = new int[n];\\n\t\t\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\th[i] = Integer.parseInt(sc.next());\\n\t\t}\\n\t\t\\n\t\tint res = 1;\\n\t\t\\n\t\tfor(int i = 1; i < n; i++) {\\n\t\t\tfor(int j = 0; j < i; j++) {\\n\t\t\t\tif(h[i] < h[j]){\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\tif(j == i-1) {\\n\t\t\t\t\tres++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(res);\\n\t}\\n}\\n", "target": "7", "substitutes": {"sc": ["pc", "esc", "scl", "sw", "rc", "ch", "cs", "cer", "sf", "cc", "ner", "soc", "loc", "system", "cr", "osc", "ec", "sl", "lc", "sk", "cont", " scr", "bc", "sci", "cle", "ss", "ci", "cus", "cl", "scope", "se", "l", "c", "src", "Sc", "asc", "out", "sche", "cv", " SC", "sch", "dc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC", "squ", "spec"], "n": ["a", "network", "w", "p", "nb", "s", "m", "nt", "ii", "ne", "ln", "t", "none", "z", "sync", "sn", "b", "N", "in", "nn", "no", "all", "ns", "l", "u", "en", "c", "num", "e", "conn", "x", "d", "y", "v", "len", "nc", "f", "o", "net", "k"], "h": ["uh", "th", "hist", "hs", "prev", "ht", "ch", "w", "p", "s", "m", "home", "hi", "r", "z", "hm", "b", "ah", "ih", "H", "dh", "q", "l", "u", "he", "c", "e", "rh", "x", "head", "ph", "id", "oh", "eh", "d", "bh", "y", "v", "hr", "ha", "hh", "f", "sh", "gh", "host", "o", "g", "k"], "i": ["xi", "gi", "a", "I", "ei", "is", "io", "si", "ie", "di", "p", "oi", "ii", "hi", "index", "ni", "z", "ini", "b", "ai", "in", "phi", "ji", "li", "ci", "zi", "ri", "qi", "u", "bi", "c", "l", "e", "init", "iu", "ori", "eni", "mi", "pi", "x", "fi", "it", "id", "ip", "uri", "y", "v", "ix", "vi", "f", "ui", "o", "jp"], "res": ["points", "results", "vals", "Res", "re", "is", "css", "ms", "blocks", "rs", "ress", "sol", "result", "nos", "breaks", "req", "rev", "os", "r", "js", "arr", "outs", "gr", "ins", "rel", "rus", "RES", "real", "reset", "ris", "init", "out", "resp", "id", "jobs", "right", "eps", "ps", "rest", "es", "rez", "ret", "resolution", "features", "details", "pres", "ries", "runs", "ras", "rows"], "j": ["a", "bj", "is", "job", "ja", "err", "si", "jc", "ie", "J", "p", "jo", "ii", "ij", "index", "ni", "z", "js", "jj", "b", "jl", "ind", "ji", "li", "ik", "q", "l", "qi", "aj", "oj", "bi", "u", "e", "c", "it", "x", "pr", "next", "uj", "y", "v", "jen", "key", "f", "o", "ui", "g", "k", "jp"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tint n,c;\\n\t\tString b;\\n\t\tScanner scan=new Scanner(System.in);\\n\t\tn=scan.nextInt();\\n\t\tint a[][]=new int[4][13];\\n\t\tfor(int i=0;i<n;i++)\\n\t\t{\\n\t\tb=scan.next();\\n\t\tc=scan.nextInt();\\n\t\tif(b.equals(\"S\"))a[0][c-1]=1;\\n\t\telse if(b.equals(\"H\"))a[1][c-1]=1;\\n\t\telse if(b.equals(\"C\"))a[2][c-1]=1;\\n\t\telse if(b.equals(\"D\"))a[3][c-1]=1;}\\n\t\tfor(int i=0;i<4;i++) {\\n\t\tfor(int j=0;j<13;j++){\\n\t\tif(a[i][j]==0 && i==0){\\n\t\tSystem.out.println(\"S \"+(j+1));}\\n\t\telse if(a[i][j]==0 && i==1){\\n\t\tSystem.out.println(\"H \"+(j+1));}\\n\t\telse if(a[i][j]==0 && i==2){\\n\t\tSystem.out.println(\"C \"+(j+1));}\\n\t\telse if(a[i][j]==0 && i==3){\\n\t\tSystem.out.println(\"D \"+(j+1));}\\n\t\t   }         \\n\t\t} \\n\t}\\n}", "target": "189", "substitutes": {"n": ["nu", "network", "nr", "is", "p", "nb", "s", "ner", "m", "nt", "nor", "na", "nan", "ne", "t", "ni", "z", "an", "sn", "ann", "N", "in", "rn", "nn", "no", "all", "ns", "l", "u", "en", "num", "e", "conn", "x", "d", "un", "y", "v", "nc", "f", "o", "net", "k"], "c": ["chain", "ch", "ca", "code", "p", "C", "s", "ac", "m", "cn", "sc", "vc", "t", "z", "cin", "ec", "lc", "coll", "count", "ci", "cache", "all", "q", "cl", "l", "u", "e", "ce", "x", "h", "cat", "ct", "con", "d", "y", "v", "dc", "cp", "f", "cu", "o", "cy", "g", "k", "col", "co"], "b": ["bas", "w", "xb", "bin", "base", "bb", "name", "p", "nb", "s", "lb", "m", "home", "app", "bg", "http", "r", "abb", "wb", "func", "ab", "ib", "pb", "bar", "lib", "bu", "url", "obj", "ob", "object", "bel", "B", "l", "u", "mb", "bi", "e", "fb", "binary", "bs", "x", "body", "bh", "y", "db", "api", "bf", "f", "abc", "o", "sb", "be", "orb", "cb", "g", "k", "rb"], "scan": ["run", "chan", "span", "re", "err", "ser", "gen", "search", "sr", "er", "connect", "query", "ner", "log", "sc", "na", "r", "skip", "sync", "an", "ann", "view", "fan", "in", "nn", "row", "all", "san", "read", "bug", "se", "l", "conn", "can", "out", " scanner", "cat", "look", "ry", "slice", "wan", "feed", "clean", "Scan", "walk", "watch", "g", "reader", "stat", "ignore", "parse", "con", "check"], "a": ["missing", "list", "access", "sta", "ar", "ga", "ca", "at", "p", "group", "aaa", "ac", "alpha", "s", "result", "m", "Array", "app", "na", "ia", "ada", "index", "A", "sa", "ea", "ana", "wa", "ma", "z", "an", "ab", "work", "action", "ai", "aux", "ae", "ya", "ba", "data", "ata", "u", "aw", "e", "area", "am", "h", "la", "asa", "d", "va", "y", "v", "aa", "f", "as", "o", "auto", "array", "ama", "ans", "active", "au"], "i": ["gi", "xi", "I", "is", "io", "si", "ie", "di", "code", "ami", "p", "oi", "cli", "ii", "hi", "ij", "index", "chi", "ni", "z", "mini", "ini", "ai", "in", "phi", "ji", "li", "ci", "ti", "ik", "q", "zi", "ri", "qi", "u", "bi", "l", "e", "init", "iu", "ori", "it", "mi", "pi", "yi", "x", "fi", "eni", "id", "ip", "uri", "d", "y", "ix", "v", "api", "key", "f", "ui", "o", "info"], "j": ["bj", "ch", "w", "br", "job", "ja", "si", "jc", "dj", "di", "ie", "J", "p", "er", "jin", "jo", "ii", "bot", "ij", "jet", "z", "js", "jj", "jl", "ind", "ah", "ji", "li", "ci", "obj", "jay", "ik", "q", "fr", "el", "l", "aj", "u", "oj", "qi", "e", "it", "h", "x", "zy", "next", "adj", "uj", "d", "je", "y", "jit", "ix", "v", "jen", "key", "json", "f", "jam", "o", "jon", "g", "jan", "k", "jp"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n \\n    public static void main(String[] args) {\\n        Scanner stdIn = new Scanner(System.in);\\n        int A = stdIn.nextInt();\\n        int B = stdIn.nextInt();\\n        stdIn.close();\\n\\n        int result = 0;\\n        for (int i = 13; i <= 1000; i++) {\\n            if (((int)Math.floor(i * 0.08) == A) && ((int)Math.floor(i * 0.1) == B)) {\\n                System.out.println(i);\\n                result = 1;\\n                break;\\n            }\\n        }   \\n        if (result == 0) {\\n            System.out.println(-1);\\n        }\\n    }\\n}", "target": "121", "substitutes": {"stdIn": ["adOut", "stdOut", "stReader", "adin", "STDin", "astIng", "astin", "stdIns", "standardin", "stIns", "gradReader", "adIn", " stdReader", "standardIN", "stin", "gradIn", "STDIN", " stdIng", "stIn", "astIN", " stdIN", "stdIN", "adIns", "stdin", "STDIn", "STDIng", " stdIns", "astIn", "gradin", "stdIng", "gradIN", "stdReader", "standardIns", "stIN", "standardIn", " stdin", " stdOut", "stOut"], "A": ["Alpha", "API", "a", "U", "E", "I", "HA", "AC", "AF", "AB", "AN", "GA", "C", "alpha", "AM", "Array", "AMI", "PA", "LA", "AA", "G", "KA", "N", "AAA", "IA", "D", "H", "AW", "NA", "L", "MA", "M", "Java", "SA", "Area", "The", "AR", "mA", "S", "P", "F", "AY", "AP", "FA", "CA"], "B": ["O", "U", "E", "I", "Bar", "Bi", "VB", "AB", "C", "T", "BF", "NB", "SB", "Base", "MB", "G", "b", "N", "W", "QB", "R", "BC", "GB", "D", "UB", "CB", "Y", "BU", "RB", "DB", "L", "M", "IB", "LB", "BA", "OB", "F", "P", "V", "EB", "BB", "BL", "BI", "WB"], "result": ["test", "number", "results", "direction", "err", "score", "search", "winner", "value", "diff", "grade", "folder", "feature", "default", "valid", "counter", "this", "report", "response", "length", "count", "order", "error", "data", "match", "total", "page", "range", "success", "Result", "function", "division", "uri", "front", "message", "successful", "card", "duration", "ret", "math", "runner", "future", "start"], "i": ["a", "gi", "xi", "I", "clip", "io", "si", "n", "ie", "di", "ami", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "isi", "mu", "ini", "b", "ai", "in", "phi", "multi", "ji", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "init", "ori", "iu", "type", "it", "e", "x", "h", "pi", "id", "ip", "uri", "y", "v", "api", "slice", "ix", "key", "f", "ui", "info", "start", "k"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n \tpublic static void main(String[] args){\\n    \tScanner sc = new Scanner(System.in);\\n\t\tint X = sc.nextInt();\\n\t\tint x = 0, y = 0;\\n\t\t\\n\t\tif(X>=500){\\n\t\t\tx = X/500;\\n\t\t\tX -= 500*x;\\n        }\\n\t\tif(X>=5){\\n\t\t\ty = X/5;\\n\t\t\tX -= 5*y;\\n        }\\n\\n\t\tSystem.out.println(1000*x+5*y);\\n\t}\\n}\\n", "target": "180", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "search", "ca", "sub", "cer", "ser", "com", "cc", "ner", "sec", "soc", "acc", "osc", "cr", "sq", "ec", "lc", "ocr", "bc", "sci", "ss", "ci", "scope", "se", "c", "src", "Sc", "asc", " SC", "sch", "scan", "nc", " Sc", "uc", "sh", "sp", "SC"], "X": ["YY", "K", "U", "E", "Value", "I", "PI", "WH", "AX", "CC", "HTTP", "C", "T", "J", "FF", "Length", "XL", "CL", "Int", "A", "Pixel", "Max", "W", "N", "Time", "Q", "XX", "DX", "Size", "XY", "PH", "Width", "XP", "H", "D", "Y", "XXX", "Z", "TX", "Location", "L", "CE", "MX", "M", "TH", "S", "F", "P", "IX", "ID", "V", "IP", "PE", "HY", "ZX"], "x": ["xi", "wx", "px", "w", "fill", "value", "code", "p", "m", "width", "fx", "index", "cross", "php", "z", "work", "b", "XX", "image", "in", "xy", "length", "rx", "lex", "Y", "pe", "ax", "l", "c", "e", "area", "h", "ph", "dx", "xx", "id", "ct", "d", "val", "v", "ix", "xxx", "shape", "ex", "sex", "f", "time", "i"], "y": ["iy", "height", "w", "ny", "n", "dy", "p", "ay", "m", "vy", "j", "gy", "t", "oy", "z", "yl", "yy", "xy", "ym", "phi", "ya", "year", "Y", "yo", "py", "c", "ey", "type", "yt", "area", "yi", "h", "zy", "lat", "xx", "ty", "tick", "ry", "ady", "sky", "f", "sy", "o", "cy", "i"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tint[] height = new int[N];\\n\t\tint con = 0;\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\theight[i]=sc.nextInt();\\n\t\t}\\n\t\tfor (int i : height) {\\n\t\t\tif (K<= i) {\\n\t\t\t\tcon++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(con);\\n\t}\\n\\n}", "target": "145", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "cs", "ser", "ca", "cer", "sf", "com", "cc", "ner", "tc", "soc", "enc", "sync", "system", "cr", "osc", "sq", "ec", "lc", "class", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "se", "c", "src", "Sc", "asc", "sche", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "server", "sp", "sb", "SC"], "N": ["O", "E", "I", "NR", "n", "Ns", "ND", "J", "C", "T", "Ni", "Len", "NT", "Ne", "NB", "CN", "NN", "Size", "Q", "R", "D", "H", "Y", "NA", "Z", "B", "Num", "L", "NI", "M", "NC", "X", "No", "NE", "S", "P", "F", "SIZE", "CNN", "V", "NS", "NL", "MN", "KN"], "K": ["O", "U", "E", "I", "KR", "J", "C", "Sk", "KI", "A", "G", "W", "Q", "R", "H", "D", "Y", "KK", "Z", "B", "L", "KE", "M", "PK", "KS", "X", "KC", "S", "P", "F", "V", "Height", "k"], "height": ["prev", "window", "levels", "w", "rank", "n", "version", "step", "density", "width", "flow", "index", "build", "definition", "hang", "length", "context", "input", "level", "center", "size", "data", "total", "row", "above", "position", "extra", "he", "head", "limit", "h", "x", "id", "depth", "capacity", "inc", "style", "pull", "grid", "y", "shape", "resolution", "dim", "han", "info", "Height", "wall", "k", "rows"], "con": ["pc", "bn", "fc", "rc", "Con", "core", "cons", "pos", "union", "cur", "n", "rank", "com", "cn", "rate", "width", "cross", "auc", "ln", "ran", "ocon", "cr", "max", "cf", "conf", "in", "count", "kin", "ban", "level", "row", "sin", "min", "common", "en", "c", "num", "conn", "plan", "can", "x", "lin", "cat", "inc", "len", "clean", "const", "uc", "f", "CON", "conv", "connect", "k"], "i": ["gi", "xi", "a", "I", "io", "si", "n", "di", "ie", "base", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "r", "ki", "ni", "z", "ini", "b", "ind", "ai", "in", "inner", "ji", "phi", "li", "ci", "ti", "level", "l", "qi", "u", "bi", "ri", "c", "e", "it", "eni", "mi", "x", "pi", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "slice", "key", "f", "o", "ui", "info", "k"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\tprivate static void solve(){\\n\t\t//Implement solution here.\\n\t\tlong N = ni();\\n\t\tlong D = ni();\\n\t\tint result = 0;\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tlong X = ni();\\n\t\t\tlong Y = ni();\\n\t\t\tresult += (X * X + Y * Y <= D * D) ? 1 : 0;\\n\t\t}\\n\t\tSystem.out.println(result);\\n\t}\\n\\n\\n\t//Switch input source (stdin/file)\\n\tprivate static BufferedReader br;\\n\tpublic static void main(String[] args){\\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString debugDataPath = System.getenv(\"DD_PATH\");        \\n\t\tif(debugDataPath != null){\\n\t\t\ttry{\\n\t\t\t\tbr = new BufferedReader(new InputStreamReader(new FileInputStream(new File(debugDataPath))));\\n\t\t\t}catch(Exception e){\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\tboolean hasNext = true;\\n\t\twhile(hasNext){\\n\t\t\tsolve();\t\\n\t\t\ttry{\\n\t\t\t\tbr.mark(1);\\n\t\t\t\tif(br.read() > 0){\\n\t\t\t\t\tbr.reset();\t\t\t\\n\t\t\t\t\tSystem.out.println(\"---\");\\n\t\t\t\t} else {\\n\t\t\t\t\thasNext = false;\\n\t\t\t\t}\\n\t\t\t}catch(Exception e){\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t} \\n\t\t}\\n\t}\\n\\n\t//Input read utility\\n\tprivate static StringTokenizer tokenizer = null;\\n\tpublic static String next() {\\n\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\ttokenizer = new StringTokenizer(br.readLine());\\n\t\t\t} catch (Exception e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn tokenizer.nextToken();\\n\t}\\n\t//Get next single int\\n\tprivate static int ni() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\t//Get next single long\\n\tprivate static long nl() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\t//Get next single double\\n\tprivate static double nd() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n\t//Get next int array from one line\\n\tprivate static int[] na(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = ni();\\n\t\treturn a;\\n\t}\\n\t//Get next char array from one line\\n\tprivate static char[] ns() {\\n\t\treturn next().toCharArray();\\n\t}\\n\t//Get next long array from one line\\n\tprivate static long[] nal(int n) {\\n\t\tlong[] a = new long[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = nl();\\n\t\treturn a;\\n\t}\\n}\\n", "target": "42", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\\n    public static void main(String args[])\\n    {\\n        Scanner sc=new Scanner(System.in);\\n        long a =sc.nextLong();\\n        String s=sc.next();\\n        long b=(s.charAt(0)-'0')*100+(s.charAt(2)-'0')*10+(s.charAt(3)-'0');\\n        long c=(a*b)/100;\\n        System.out.println(c);\\n\\n    }\\n}\\n", "target": "15", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "cer", "sf", "com", "cc", "ner", "tc", "sec", "acc", "enc", "sync", "cr", "sl", "osc", "sq", "ec", "lc", "class", "bc", "sci", "ss", "ci", "cl", "scope", "se", "Sc", "asc", "cv", " SC", "sch", "scan", "nc", "uc", "sh", "sp", "parse", "SC"], "a": ["fa", "ga", "ca", "bb", "p", "oa", "aaa", "alpha", "ac", "na", "ada", "A", "sa", "ea", "an", "ab", "ae", "ba", "pa", "da", "aj", "af", "area", "la", "d", "va", "y", "aa", "f", "as", "ama", "au", "ad"], "s": ["parts", "qs", "is", "si", "n", "string", "rs", "space", "ops", "p", "gs", "sv", "sl", "abs", "js", "ls", "tests", "ds", "ins", "in", "lines", "ss", "ws", "spec", "your", "its", "ns", "l", "u", "ses", "e", "su", "xs", "ts", "words", "S", "d", "ps", "es", "f", "services", "plus", "o", "us", "sb", "g", "ans", "features", "as", "strings", "rows"], "b": ["xb", "ca", "n", "bb", "p", "ac", "nb", "lb", "eb", "bot", "wb", "abb", "z", "ab", "ib", "pb", "bc", "ae", "ba", "ob", "B", "l", "u", "mb", "e", "fb", "h", "d", "y", "v", "beta", "aa", "f", "abc", "sb", "g", "cb", "ad", "rb"], "c": ["pc", "fc", "cs", "ca", "n", "code", "p", "C", "cc", "ac", "sec", "cr", "ec", "ab", "lc", "cf", "count", "bc", "xc", "end", "cas", "ci", "cm", "l", "u", "e", "ce", "unc", "ct", "d", "dc", "nc", "cp", "f", "uc", "abc", "cy", "cb"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tfinal static long limit = 1000000000000000000l;\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        long mul = 1l;\\n        boolean isOver = false;\\n        \\n        for(int i=0; i<N; i++) {\\n        \tlong a = sc.nextLong();\\n        \tif(a==0) {\\n        \t\tSystem.out.println(0);\\n        \t\treturn;\\n        \t}\\n        \tif (mul>limit/a) {\\n        \t\tisOver = true;\\n        \t}else {\\n            \tmul *= a;\\n        \t}\\n        }\\n        \\n        if(isOver) {\\n        \tSystem.out.println(-1);\\n        }else {\\n        \tSystem.out.println(mul);\\n        }\\n        \\n\t}\\n\\n}\\n", "target": "27", "substitutes": {"limit": ["number", " Limit", "pin", "lim", "base", "line", "unit", "maximum", "log", "limited", "b", "max", "length", "count", "level", "large", "size", "li", "total", "lock", "l", "position", "L", "plan", "Limit", "lin", "block", "left", "control", "offset", "limits", "len", "auto", "iter"], "sc": ["pc", "esc", "exec", "sw", "rc", "ch", "core", "cur", "cs", "ca", "cer", "sf", "com", "ctx", "cc", "ner", "tc", "sync", "cr", "sl", "osc", "ec", "sq", "lc", "cont", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "l", "se", "c", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "mc", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "sb", "SC"], "N": ["O", "K", "U", "I", "n", "Ns", "Len", "C", "T", "Ni", "NT", "Ne", "NB", "A", "Size", "Q", "R", "D", "H", "size", "Z", "B", "L", "NM", "NI", "M", "Limit", "X", "NE", "S", "P", "V", "NS", "NL", "MN", "RN", " n"], "mul": ["vul", "cmUL", "mulus", " mov", "umuli", "vull", "umul", "umUL", "modUL", " mUL", "Mulus", "cmuli", " mulus", "modul", "cmol", "mmul", "muli", "vil", "Mov", "lulus", "mUL", "mull", "MUL", " mol", "Mull", "mmUL", "moduli", " muli", "Mol", "mmull", "cmul", "vUL", "mov", "lul", "modulus", "lUL", "mmil", "Mul", "mil", "umulus", "Muli", "Mil", "lov", "mol"], "i": ["gi", "xi", "I", "io", "at", "n", "si", "di", "ie", "p", "oi", "m", "ii", "hi", "index", "j", "chi", "z", "ini", "mu", "b", "ai", "in", "multi", "li", "ti", "ci", "qi", "u", "bi", "c", "e", "iu", "it", "mi", "x", "pi", "id", "uri", "d", "y", "v", "ix", "f", "o", "ui", "start", "k"], "a": ["access", "ga", "ca", "n", "at", "au", "p", "ia", "alpha", "ac", "m", "wa", "A", "sa", "ea", "qa", "ana", "ma", "an", "ab", "b", "ai", "count", "length", "li", "ba", "data", "pa", "ava", "l", "da", "u", "en", "c", "aw", "e", "aj", "af", "area", "h", "x", "next", "la", "d", "va", "offset", "api", "ha", "len", "aa", "f", "as"], "isOver": ["infoOVER", "iOver", "areOver", "iLarge", "infoMax", "hasLarge", "isover", "areUnder", "isLarge", "isMax", " isLong", "isOVER", "isaOVER", " isLarge", " isOVER", "isLong", "iUnder", "areLong", "infoOver", " isMax", " isUnder", "hasLong", "hasOver", "isUnder", "areover", "iover", "isaMax", "hasover", " isover", "hasUnder", "isaOver"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\t/*??\u00b6?\u00b4???????????????????*/\\n\tpublic static void judge(int parse[]){\\n\t\t\tif(parse[0]<=0||parse[0]>100){\\n\t\t\t\tSystem.out.println(\"W?????\\?????????1~100??\\???????????\u00a7???.???????????????.\");\\n\t\t\t\tSystem.exit(0);\\n\t\t}\\n\t\t\telse if(parse[1]<=0||parse[1]>100){\\n\t\t\t\tSystem.out.println(\"H?????\\?????????1~100??\\???????????\u00a7???.???????????????.\");\\n\t\t\t\tSystem.exit(0);\\n\t    }\\n\t\t\telse if(parse[2]<-100||parse[2]>100){\\n\t\t\t\tSystem.out.println(\"x?????\\?????????-100~100??\\???????????\u00a7???.???????????????.\");\\n\t\t\t\tSystem.exit(0);\\n\t\t\t}\\n\t\t\telse if(parse[3]<-100||parse[3]>100){\\n\t\t\t\tSystem.out.println(\"y?????\\?????????-100~100??\\???????????\u00a7???.???????????????.\");\\n\t\t\t\tSystem.exit(0);\\n\t\t\t}\\n\t\t\telse if(parse[4]<=0||parse[4]>100){\\n\t\t\t\tSystem.out.println(\"r?????\\?????????1~100??\\???????????\u00a7???.???????????????.\");\\n\t\t\t\tSystem.exit(0);\\n\t\t\t}\\n\t}\\n\t public static void main(String[] args) throws IOException{\\n\t\tint W,H,x,y,r;\\n\t\tString str;\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tstr = br.readLine();\\n\\n\t\tString[] st = str.split(\" \");\\n\t\t/*for(int i=0;i<st.length;i++){\\n\t\t System.out.println(\"st[\"+i+\"]=\"+st[i]); //?????????????\u00b4??\u00a2????\\n\t\t }*/\\n\t\tint len=st.length; //?????????????\u00b4???\u00b0\\n\t\tint parse[] = new int[len]; //String???int????????\u00a8??????\\n\\n\t\tfor(int p=0;p<len;p++){\\n\t\t\tparse[p]=Integer.parseInt(st[p]); //String???int??????\\n\t\t}\\n\\n\t\tW=parse[0]; H=parse[1]; x=parse[2]; y=parse[3]; r=parse[4];\\n\\n\t\tjudge(parse); //??\u00b6?????????.????????????????????\u00b0????????????\\n\t\t/*??????????????\u00a7????????\u00a8?\u00b0???????????????\\????????????????????\\??????????????????????????????*/\\n\\n\t\t/*for(int i=0;i<st.length;i++){\\n\t\t System.out.println(\"st[\"+i+\"]=\"+st[i]); //?????????????\u00b4??\u00a2????\\n\t\t }*/\\n\\n\t\t/*????????\u00a8????????????*/\\n\\n\t\tif((x-r<0||x+r>W)||(y-r<0||y+r>H))\\n\t\t\tSystem.out.println(\"No\");\\n\t\telse if((x-r>=0&&x+r<=W)&&(y-r>=0&&y+r<=H))\\n\t\t\tSystem.out.println(\"Yes\");\\n\\n\t}\\n\\n}", "target": "171", "substitutes": {"parse": ["list", "file", "load", "plot", "is", "get", "params", "script", "live", "parser", "string", "p", "set", "query", "make", "http", "pass", "sync", "pair", "arr", "frame", "show", "send", "replace", "par", "start", "pie", "split", "play", "match", "data", "error", "pack", "use", "read", "bug", "se", "py", "pick", "series", "process", "print", "eval", "source", "id", "scale", "style", "slice", "shape", "seed", "scan", "draw", "add", "maybe", "patch", "as", "info", "view", "arse", "spec", "xml"], "W": ["O", "U", "E", "w", "MW", "Sw", "Word", "C", "EW", "Wh", "A", "G", " w", "N", "Q", "Weight", "Y", "VW", "B", "L", "TW", "M", "SW", "X", "We", "F", "V"], "H": ["WH", "U", "E", "His", "w", "C", "T", " h", "G", "Q", "Y", "Hi", "Z", "B", "L", "M", "h", "X", "HH", "F", "P", "OH", "V", "hh", "SH", "CH", "HI"], "x": ["w", "n", "p", "m", "t", "z", "in", "Y", "q", "l", "L", "u", "e", "h", "X", "xx", "d", "v", "f", "o", "i", "k"], "y": ["w", "err", "ny", "n", "dy", "p", "m", "vy", "t", "yy", "b", "Y", "q", "l", "py", "c", "e", "type", "h", "d", "v", "f", "o", "sy", "i", "ye"], "r": ["re", "w", "err", "n", "p", "sr", "er", "m", "t", "z", "b", "R", "rx", "mr", "range", "q", "c", "e", "rr", "rh", "pr", "d", "ry", "v", "f", "o"], "str": ["list", "w", "err", "char", "n", "string", "code", "name", "p", "tr", "line", "s", "strip", "part", "txt", "stri", "t", "z", "arr", "sl", "cr", "b", "dr", "doc", "in", "input", "obj", "Str", "data", "fr", "l", "c", "out", "text", "pr", "hr", "div", "f", "sp", "STR", "i", "start"], "br": ["io", "ch", "err", "Br", "ar", "img", "tr", "sr", "er", "buf", "yr", "ner", "BR", "browser", "cr", "arr", "b", "dr", "gr", "ocr", "bc", "her", "fr", " tr", "bridge", "out", "ber", "pr", "bro", "ler", "bh", "hr", "div", "sp", "orb", "wr", "rb"], "st": ["list", " St", "pt", "p", "struct", "ste", "sts", "sth", "pl", "inst", "sty", "est", "t", "cr", "sl", "ost", "ld", "dr", "std", "tt", "ss", "stack", "fr", "nd", "cl", "ist", "ast", "src", "stress", "ct", "d", "ps", "ust", "rest", "ST", "stage", "start", "rd", "bl", "St"], "len": ["list", "pos", "lim", "n", "elt", "Len", "line", "nt", "fin", "lit", "ln", "ind", "length", "count", "split", "li", "lt", "en", "lon", "fl", "lin", " Len", "val", "un", "hl", "lf", "mem", "bl"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner sc = new Scanner(System.in);\\n        String S = sc.next();\\n\\n        int ans = solve(S);\\n        System.out.println(ans);\\n\\n    }\\n\\n    private static int solve(String s) {\\n        char[] sn = s.toCharArray();\\n        int white = count(sn, '0', '1');\\n        int black = count(sn, '1', '0');\\n        return Math.min(white, black);\\n    }\\n\\n    private static int count(char[] sn, char match, char counterpart) {\\n        int cnt = 0;\\n        for (int i = 0; i < sn.length; i++) {\\n            if (i % 2 == 0 && sn[i] == counterpart) {\\n                cnt++;\\n            }\\n            if (i % 2 == 1 && sn[i] == match) {\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n}\\n", "target": "146", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "sf", "cc", "ner", "sec", "soc", "acc", "enc", "r", "sync", "system", "sl", "st", "cr", "osc", "lc", "ec", " scr", "bc", "sci", "ss", "cus", "scope", "se", "c", "src", "Sc", "asc", "str", " SC", "dc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "SC"], "S": ["SE", "Si", "IS", "I", "SU", "string", "CS", "C", "T", "SS", "RS", "SK", "SO", "SN", "A", "N", "TS", "R", "SF", "ss", "SAM", "SD", "SM", "L", "Sc", "SA", "SER", "SR", "SI", "SL", "WS", "DS", "P", "NS", "GS", "ST", "SH", "SC"], "ans": ["ks", "ANN", "ants", "cs", "AN", "lan", "anon", "annot", "amps", "na", "ents", "ANS", "aid", "anas", "ran", "ana", "an", "idents", "ann", "ars", "sk", "ls", "ins", "annels", "atan", "cas", "atten", "ns", "rors", "ases", "can", "ain", "eps", "aus", "ids", "ions", "aned", "ons", "les", "anc", "asts", " scans", "ays", "nas", "ras"], "s": ["a", "si", "n", "string", "sf", "p", "ings", "t", "south", "sv", "sl", "js", "sq", "ls", "b", "ss", "ns", "l", "c", "ses", "e", "src", "h", "su", "ssl", "ps", "v", "es", "f", "services", "sb", "g", "strings"], "sn": ["scl", "esc", "kn", "number", "sw", "span", "cs", "si", "n", "string", "wn", "sf", "name", "bin", "oss", "ic", "nb", "cn", "spell", "ii", "na", "loc", "chi", "SN", "stri", "sync", "sv", "sl", "news", "sk", "an", "ann", "ls", "coll", "lc", "ss", "nn", "size", "session", "ns", "syn", "num", "fn", "fl", "bi", "eni", "su", "dn", "sm", "source", "ski", "Sn", "names", "sky", "shell", "scan", "sh", "sb", "sd", "inn"], "white": ["flat", "pace", "w", "grey", "ffe", "border", "stone", "alpha", "width", "White", "zero", "wh", "none", "empty", "sk", "fe", "count", "six", "edge", "size", "normal", "all", "gray", "brown", "stack", "frac", "blank", "western", "scale", "left", "dust", "une", "green", "start"], "black": ["broad", "lan", "border", "alpha", "ac", "cross", "zero", "valid", "wh", "none", "shared", "tan", "great", "u", "num", "blank", "half", "blue", "square", "ady", "red", "Black", "ack", "corn", "han", "green", "mask", "check"], "match": ["test", "find", "fill", "fire", "member", "search", "target", "address", "code", "part", "guard", "cover", "Match", "mat", "replace", "start", "count", "use", "common", "cmp", "tag", "text", "field", "matched", "quote", "slice", "like", "key", "scan", "patch", "include", "atch", "info", "rule", "pattern", "parse", "mask", "card"], "counterpart": ["masterpart", "Counterpoint", "outerPart", "counterPart", "counterbase", "outerpart", "outerpoint", "CounterPart", " counterPart", "conceptpart", " counterpoint", "Counterpart", "conceptparts", " counterstart", " counterparts", "counterparts", "counterpoint", "masterbase", "conceptbase", "counterstart", "masterstart", " counterbase", "masterparts", "conceptstart"], "cnt": ["ecnt", "Cnt", "ecnc", "ncount", "lcnc", "lcct", "cpo", "dcnt", "lcrt", "encpo", "bcnt", "cct", "Cnc", "cpt", "ecount", "crrt", " cnc", "bcNT", "encnt", "crnt", "count", "crannot", "cnd", "ncnc", " cNT", "encrt", "bcrt", "crpt", " cannot", "dcnc", "encannot", "Cnd", "ncnt", "crpo", " cpt", "dcct", "cnc", "bcpt", " cct", "Count", " cpo", " crt", "crNT", "ncnd", "dcrt", "cannot", "crt", "cNT", "lcnt", "ecnd"], "i": ["xi", "gi", "I", "io", "si", "n", "di", "ie", "p", "oi", "abi", "ii", "hi", "index", "j", "chi", "uli", "ini", "mu", "b", "ai", "phi", "multi", "ji", "li", "ti", "ci", "data", "ri", "qi", "u", "bi", "c", "e", "iu", "it", "eni", "mi", "x", "pi", "fi", "id", "ip", "uri", "y", "v", "slice", "ix", "key", "anti", "f", "ui", "o", "info"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n      Scanner sc = new Scanner(System.in);\\n      String s = sc.next();\\n      int len = s.length();\\n      \\n      int start = 0;\\n      for(int i=0; i<len; i++){\\n        if(\"A\".equals(s.substring(i,i+1))){\\n            start = i;\\n            break;\\n        }\\n      }  \\n      int end = 0;\\n      for(int j=len-1; j>0; j--){\\n        if(\"Z\".equals(s.substring(j,j+1))){\\n            end = j;\\n            break;\\n        }\\n      }  \\n\\n      System.out.println(end-start+1);\\n    }  \\n}", "target": "109", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "desc", "cs", "sub", "cer", "cc", "ner", "enc", "system", "osc", "cr", "ec", "lc", "bc", "sci", "ss", "proc", "cus", "cl", "scope", "se", "l", "c", "src", "Sc", "asc", "text", "str", " SC", "sch", "dc", "scan", "nc", "uc", "sh", "sp", "g", "parser", "SC"], "s": ["a", "fs", "is", "si", "n", "string", "p", "m", "gs", "os", "t", "sv", "sl", "js", "abs", "ls", "b", "ds", "ins", "in", "your", "ss", "ws", "input", "ns", "l", "u", "c", "ses", "e", "series", "opens", "su", "ts", "bis", "words", "source", "S", "ssl", "d", "str", "es", "f", "plus", "o", "sb", "g", "ans", "strings"], "len": ["span", "list", "wl", "lim", "pos", "n", "base", "ie", "dy", "Len", "line", "nt", "part", "loc", "le", "ln", "index", "z", "lc", "ld", "length", "in", "count", "split", "li", "size", "all", "lock", "el", "l", "en", "num", "lon", "limit", "lin", "id", "depth", "ll", "ell", "lf", "f"], "start": ["a", "span", "find", "pos", "get", "started", "si", "ie", "base", "step", "stop", "name", "line", "p", "set", "grade", "Start", "part", "first", "index", "skip", "z", "st", "show", "ind", "max", "starting", "in", "length", "size", "use", "min", "range", "l", "se", "init", "e", "source", "id", "scale", "art", "style", "parse", "pre", "offset", "rest", "seed", "shift", "add", "time", "from", "sp", "info"], "i": ["a", "gi", "xi", "I", "is", "io", "si", "ie", "di", "n", "oi", "ii", "hi", "index", "chi", "ki", "ni", "z", "ini", "b", "ai", "in", "ji", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "l", "ori", "iu", "eni", "mi", "pi", "x", "yi", "fi", "id", "ip", "uri", "y", "v", "ix", "f", "ui"], "end": ["append", "enable", "address", "n", "stop", "p", "pend", "set", "event", "vert", "index", "ended", "est", "z", "b", "max", "send", "ind", "length", "End", "edge", "inner", "size", "use", "nd", "ends", "en", "close", "init", "ending", "h", "limit", "id", "open", "END", "art", "style", "offset", "rest", "off", "f", "change", "ad"], "j": ["jing", "bj", "ch", "job", "ja", "ot", "n", "jc", "ie", "dj", "dy", "J", "p", "m", "jo", "ii", "bot", "ij", "index", "r", "jet", "z", "js", "jj", "b", "jl", "ind", "length", "zip", "ji", "li", "obj", "q", "fr", "el", "syn", "l", "aj", "u", "oj", "c", "e", "h", "x", "next", "adj", "uj", "id", "d", "jit", "y", "v", "ix", "jen", "json", "f", "g", "jp", "jan", "k"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\tstatic FastReader f = new FastReader();\\n\tstatic PrintWriter out = new PrintWriter(System.out);\\n\\n\tpublic static void main(String[] args) {\\n\t\tlong n = f.nextInt(), x = f.nextInt(), t =  f.nextInt();\\n\t\tout.println(((n-1)/x+1)*t);\\n\t\tout.close();\\n\t}\\n\t\t\\n\\n\tstatic class FastReader {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tStringTokenizer st;\\n\\n\t\tString next() {\\n\t\t\twhile(st == null || !st.hasMoreElements()) {\\n\t\t\t\ttry {\\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch(IOException e) {\\n\t\t\t\t\te.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch(IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\t}\\n}", "target": "34", "substitutes": {"f": ["fs", "file", "io", "w", "fa", "i", "fork", "form", "sf", "uf", "p", "fm", "ft", "s", "fp", "m", "fast", "fold", "fx", "r", "b", "fe", "cf", "inf", "df", "in", "fen", "fr", "framework", "full", "l", "c", "fn", "e", "fb", "rf", "af", "h", "fi", "F", "d", "v", "feed", "bf", "tf", "fd", "g", "iter", "fw"], "out": ["Out", "a", "exec", "file", "list", "plain", "parent", "io", "w", "ch", "err", "bin", "string", "name", "p", "line", "output", "write", "m", "log", "user", "result", "flow", "r", "null", "outs", "b", "writer", "ins", "in", "input", "inner", "error", "obj", "cache", "page", "outer", "pool", "c", "e", "conn", "ext", "h", "print", "source", "OUT", "path", "v", "again", "buffer", "ex", "o", "up", "temp", "IN"], "n": ["nu", "number", "i", "w", "ny", "p", "nb", "s", "nt", "j", "z", "b", "N", "max", "in", "count", "nn", "no", "ns", "l", "u", "en", "c", "num", "e", "d", "y", "v", "len", "nc", "nl", "o", "net", "k"], "x": ["w", "pt", "p", "ft", "xt", "fx", "index", "j", "z", "b", "max", "in", "xy", "size", "q", "ax", "l", "u", "en", "c", "e", "h", "X", "dx", "xx", "id", "ty", "d", "y", "ix", "v", "ex", "i", "k"], "t": ["w", "pt", "p", "T", "s", "xt", "m", "nt", "j", "z", "dt", "b", "tt", "ti", "size", "l", "u", "c", "e", "tp", "ts", "h", "ta", "ct", "ty", "rt", "d", "y", "v", "time", "o", "i"], "br": ["per", "res", "ch", "io", "err", "Br", "tr", "p", "sr", "buf", "result", "BR", "pl", "r", "browser", "cr", "arr", "abs", "ab", "b", "dr", "bar", "bc", "obj", "mr", "fr", "boot", "ber", "lr", "pr", "bro", "body", "rt", "bh", "db", "ger", "hr", "cro", "sp", "cb", "bl", "rb"], "st": ["sta", "string", "pt", "step", "stop", "struct", "sr", "ste", "sts", "ft", "s", "store", "tr", "nt", "strip", " est", "sc", "sth", "r", "inst", "sa", "stri", "est", "cr", "sl", "sn", "ost", "ld", "fe", "std", "ss", "obj", "Str", "pe", "sign", "fr", "nd", "se", "ast", "ist", "e", "stress", "ts", "pr", "ct", "rt", "style", "rest", "sp", "ST", "be", "sb", "stage", "start", "rd", "bl", "St"], "str": ["sta", "cur", "err", "char", "string", "code", "pt", "tr", "p", "line", "name", "s", "ner", "result", "exp", "enc", "r", "inst", "stri", "cr", "sl", "arr", "b", "gr", "dr", "doc", "in", "url", "ss", "obj", "Str", "data", "fr", "cl", "e", "text", "pr", "id", "val", "v", "div", "sp", "STR", "temp", "iter", "strings", "bl"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t// ??\\???\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\tint l = scan.nextInt();\\n\t\t// ???????????\u00a3?\u00a8?\\n\t\tint A[][] = new int[n][m];\\n\t\tint B[][] = new int[m][l];\\n\t\t// ?????????????\u00b4?\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tfor(int i2=0; i2<m; i2++){\\n\t\t\t\tint x = scan.nextInt();\\n\t\t\t\tA[i][i2] = x;\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0; i<m; i++){\\n\t\t\tfor(int i2=0; i2<l; i2++){\\n\t\t\t\tint x = scan.nextInt();\\n\t\t\t\tB[i][i2] = x;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\t// \t???????\u00b1????????\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tint x = 0;\\n\t\t\tlong y = 0;\\n\t\t\tfor(int j=0; j<l; j++){\\n\t\t\t\tlong C = 0;\\n\t\t\t\tfor (int k=0; k<m; k++){\\n\t\t\t\t\ty = A[i][k]*B[k][j];\\n\t\t\t\t\tC = C + y;\\n\t\t\t\t\t// ??????\\n\t\t\t\t\tif(k == (m-1)){\\n\t\t\t\t\t\tSystem.out.print(C);\\n\t\t\t\t\t\tx++;\\n\t\t\t\t\t\tif(x == l) x = 0;\\n\t\t\t\t\t\telse System.out.print(\" \");\\n\t\t\t\t\t\t\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t\t\t\\n\t\t\\n\t}\\n\\n}", "target": "204", "substitutes": {}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int[] a = new int [2];\\n        int[] b = new int [2];\\n        for(int i = 0;i < 2;i++){\\n            a[i] = sc.nextInt();\\n        }\\n        for(int i = 0;i < 2;i++){\\n            b[i] = sc.nextInt();\\n        }\\n        int ans = Math.min(a[1],b[1]) - Math.max(a[0],b[0]);\\n        if(ans <= 0){\\n            System.out.println(0);\\n            return;\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "47", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "screen", "ctx", "s", "cc", "ner", "cam", "cli", "soc", "r", "system", "cr", "sq", "osc", "lc", "coll", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "sys", "c", "src", "Sc", "asc", "out", "sche", "sem", " SC", "sch", "scan", "nc", " Sc", "uc", "server", "sh", "sp", "reader", "SC", "gram", "squ"], "a": ["sta", "fa", "ga", "ca", "n", "p", "s", "aaa", "ac", "ia", "alpha", "A", "sa", "abb", "ma", "an", "ab", "ai", "ae", "ba", "aka", "pa", "da", "aj", "u", "aw", "c", "af", "area", "x", "am", "asa", "la", "id", "art", "va", "api", "aa", "as", "ama", "au", "ad"], "b": ["bas", "br", "bin", "n", "base", "bb", "p", "lb", "nb", "bd", "m", "eb", "s", "j", "abb", "wb", "bp", "ab", "ib", "in", "ba", "ob", "B", "l", "u", "bi", "c", "mb", "fb", "e", "other", "bs", "x", "bis", "out", "body", "d", "y", "db", "v", "emb", "f", "o", "sb", "cb", "rb"], "i": ["gi", "xi", "I", "is", "io", "w", "si", "n", "di", "ie", "p", "oi", "abi", "ii", "hi", "index", "r", "j", "chi", "iii", "t", "ni", "ini", "mu", "ai", "in", "multi", "ji", "li", "ci", "ti", "ik", "l", "qi", "u", "bi", "c", "ri", "e", "init", "iu", "it", "eni", "mi", "x", "h", "pi", "fi", "id", "uri", "ip", "d", "y", "v", "api", "ix", "vi", "key", "f", "o", "ui", "info", "k"], "ans": ["ks", "ants", "cons", "cs", "AN", "lan", "anon", "s", "annot", "amps", "offs", "na", "ents", "ANS", "nan", "os", "ana", "outs", "an", "sk", "ann", "ars", "aces", "ds", "ins", "cas", "actions", "ads", "ians", "ns", "anes", "ches", "ines", "acts", "can", " spans", "ats", "eps", "aus", "es", "ions", "aned", "ons", "anc", "as", "anks", " scans", "nas", "ras"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n//import java.math.*;\\nimport java.awt.Point;\\n \\npublic class Main {\\n\t//static final long MOD = 998244353L;\\n\t//static final long INF = -1000000000000000007L;\\n\tstatic final long MOD = 1000000007L;\\n\t//static final int INF = 1000000007;\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tPrintWriter pw = new PrintWriter(System.out);\\n\t\tString s = sc.next();\\n\t\tint L = s.length();\\n\t\tfor (int i = 0; i < L; i++)\\n\t\t\tpw.print('x');\\n\t\tpw.println();\\n\t\tpw.close();\\n\t}\\n\\n\t\\n\tpublic static long dist(long[] p1, long[] p2) {\\n\t\treturn (Math.abs(p2[0]-p1[0])+Math.abs(p2[1]-p1[1]));\\n\t}\\n\t\\n\t//Find the GCD of two numbers\\n\tpublic static long gcd(long a, long b) {\\n\t\tif (a < b) return gcd(b,a);\\n\t\tif (b == 0)\\n\t\t\treturn a;\\n\t\telse\\n\t\t\treturn gcd(b,a%b);\\n\t}\\n\t\\n\t//Fast exponentiation (x^y mod m)\\n\tpublic static long power(long x, long y, long m) { \\n\t\tif (y < 0) return 0L;\\n\t\tlong ans = 1;\\n\t\tx %= m;\\n\t\twhile (y > 0) { \\n\t\t\tif(y % 2 == 1) \\n\t\t\t\tans = (ans * x) % m; \\n\t\t\ty /= 2;  \\n\t\t\tx = (x * x) % m;\\n\t\t} \\n\t\treturn ans; \\n\t}\\n\t\\n\tpublic static int[][] shuffle(int[][] array) {\\n\t\tRandom rgen = new Random();\\n\t\tfor (int i = 0; i < array.length; i++) {\\n\t\t    int randomPosition = rgen.nextInt(array.length);\\n\t\t    int[] temp = array[i];\\n\t\t    array[i] = array[randomPosition];\\n\t\t    array[randomPosition] = temp;\\n\t\t}\\n\t\treturn array;\\n\t}\\n\t\\n    public static int[][] sort(int[][] array) {\\n    \t//Sort an array (immune to quicksort TLE)\\n \\n\t\tArrays.sort(array, new Comparator<int[]>() {\\n\t\t\t  @Override\\n        \t  public int compare(int[] arr1, int[] arr2) {\\n\t\t\t\t  return arr1[0]-arr2[0]; //ascending order\\n\t          }\\n\t\t});\\n\t\treturn array;\\n\t}\\n    \\n    public static long[][] sort(long[][] array) {\\n    \t//Sort an array (immune to quicksort TLE)\\n\t\tRandom rgen = new Random();\\n\t\tfor (int i = 0; i < array.length; i++) {\\n\t\t    int randomPosition = rgen.nextInt(array.length);\\n\t\t    long[] temp = array[i];\\n\t\t    array[i] = array[randomPosition];\\n\t\t    array[randomPosition] = temp;\\n\t\t}\\n\t\tArrays.sort(array, new Comparator<long[]>() {\\n\t\t\t  @Override\\n        \t  public int compare(long[] arr1, long[] arr2) {\\n\t\t\t\t  //return 0;\\n\t\t\t\t  if (arr1[0] < arr2[0]) {\\n\t\t\t\t\t  return -1;\\n\t\t\t\t  } else if (arr1[0] > arr2[0]) {\\n\t\t\t\t\t  return 1;\\n\t\t\t\t  } else {\\n\t\t\t\t\t  return 0;\\n\t\t\t\t  }\\n\t          }\\n\t\t});\\n\t\treturn array;\\n\t}\\n    \\n    static class FastScanner { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastScanner() { \\n            br = new BufferedReader(new InputStreamReader(System.in)); \\n        } \\n  \\n        String next() { \\n            while (st == null || !st.hasMoreElements()) { \\n                try { \\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException  e) { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int ni() { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nl() { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nd() { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() { \\n            String str = \"\"; \\n            try { \\n                str = br.readLine(); \\n            } catch (IOException e) {\\n                e.printStackTrace(); \\n            } \\n            return str;\\n        }\\n    }\\n}", "target": "122", "substitutes": {}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String args[]){\\n    Scanner sc=new Scanner(System.in);\\n    String str=sc.next();\\n    if(str.equals(\"Sunny\")){\\n      System.out.println(\"Cloudy\");\\n    }\\n    if(str.equals(\"Cloudy\")){\\n      System.out.println(\"Rainy\");\\n    }\\n    if(str.equals(\"Rainy\")){\\n      System.out.println(\"Sunny\");\\n    }\\n  }\\n}", "target": "60", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "ser", "ca", "cor", "cer", "set", "cc", "ner", "sec", "acc", "enc", "sync", "osc", "cr", "ec", "ocr", "bc", "sci", "ss", "ci", "cmp", "cl", "scope", "se", "c", "Sc", "asc", " SC", "mc", "scan", "nc", "uc", "anc", "sh", "sp", "SC"], "str": ["list", "kr", "ctr", "br", "err", "char", "n", "string", "feat", "step", "tr", "name", "sr", "line", "hex", "s", "ner", "strip", "exp", "part", "r", "txt", "stri", "t", "st", "sl", "dr", "gr", "coll", "ocr", "in", "url", "inner", "stable", "obj", "Str", "data", "mr", "fr", "c", "stress", "ext", "out", "x", "text", "pr", "next", "oct", "qt", "div", "f", "sp", "STR", "iter", "strings", "wr", "spec"]}}
{"code": "import java.util.*;\\n\\n\\nclass Main {\\n  private static long gcd(long m, long n) {\\n      if(m < n) return gcd(n, m);\\n      if(n == 0) return m;\\n      return gcd(n, m % n);\\n  }\\n\\n  private static long lcm(long m, long n) {\\n      return m * n / gcd(m, n);\\n  }\\n\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    System.out.println(lcm(a, b));\\n  }\\n}", "target": "67", "substitutes": {"m": ["pm", "w", "ms", "um", "p", "s", "me", "bm", "r", "j", "mn", "gm", "z", "an", "hm", "mu", "N", "nm", "dm", "ym", "size", "machine", "all", "im", "mr", "cm", "l", "u", "num", "c", "e", "M", "am", "h", "x", "mi", "dn", "sm", "body", "d", "y", "v", "mc", "om", "f", "o", "dim", "g", "md", "i", "mm", "k"], "n": ["nu", "network", "w", "p", "s", "nb", "na", "nan", "j", "ne", "ln", "t", "mn", "z", "an", "sn", "N", "in", "nm", "no", "nn", "ns", "l", "u", "en", "c", "num", "e", "M", "np", "x", "dn", "d", "un", "y", "v", "nin", "nc", "f", "o", "net", "g", "i", "k"], "sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "si", "sub", "cer", "sf", "screen", "s", "cc", "ner", "soc", "enc", "loc", "cr", "sv", "osc", "ec", "system", "lc", "cont", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "cv", " SC", "sch", "scan", " Sc", "uc", "sh", "sp", "SC"], "a": ["fa", "ga", "ca", "base", "p", "oa", "ia", "ac", "alpha", "na", "A", "sa", "ea", "qa", "ma", "ab", "ae", "ba", "aka", "pa", "da", "aj", "c", "area", "x", "la", "asa", "d", "va", "ha", "aa", "f", "as", "ama", "i"], "b": ["xb", "bin", "base", "bb", "p", "lb", "eb", "j", "r", "abb", "wb", "z", "ab", "ib", "pb", "bc", "url", "ba", "ob", "B", "l", "u", "mb", "c", "bi", "fb", "e", "bs", "h", "bis", "d", "y", "aa", "f", "o", "sb", "i", "rb"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String Str = sc.nextLine();\\n        String Ans = \"\";\\n        int l = Str.length();\\n        int i;\\n        char c1,c2;\\n        for(i=0;i<l;i++){\\n            c1 = Str.charAt(i);\\n            if(Character.isLowerCase(c1) == true) {\\n                c2 = Character.toUpperCase(c1);\\n            }else{\\n                c2 = Character.toLowerCase(c1);\\n            }\\n            Ans += c2;\\n        }\\n        System.out.println(Ans);\\n    }\\n}\\n\\n", "target": "192", "substitutes": {"sc": ["pc", "esc", "rc", "desc", "cs", "sub", "cer", "cc", "ner", "sec", "acc", "osc", "cr", "ec", "ocr", " scr", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", "str", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "g", " rc", " cur", "SC"], "Str": ["Line", " str", "In", "Br", "Read", "Name", "Dec", "Word", "s", "Source", "Int", "r", "Spec", "Path", "Cr", "Acc", "Msg", "Val", "c", "Tr", "Coll", "Enc", "Buffer", "Input", "Reader", "Char", "Prev", "Text", "Pr", "Wr", "str", "Split", "Stack", "Obj", "Format", "Code", "Sl", "Ch", "STR", "Start", "St"], "Ans": ["Inps", "Analysi", " Anns", "Anqs", "Inns", "Analys", "Inss", " Anqs", "ANps", "Ansi", "Ins", "Anps", " Angs", " Anps", "Incs", "Secondsi", "ANs", "Ants", "ANcs", "Ancs", "ANns", "Anns", "ANgs", "Antcs", "ANss", "Antss", "Secondqs", "Ings", "Analyqs", "Seconds", " Ansi", "Anss", "Angs"], "l": ["w", "n", "p", "s", "m", "loc", "ln", "t", "z", "sl", "b", "lc", "ls", "length", "lv", "li", "L", "lp", "fl", "c", "u", "e", "h", "kl", "lin", "dl", "ll", "d", "v", "ol", "len", "f", "nl", "k"], "i": ["a", "xi", "gi", "I", "io", "si", "ie", "di", "p", "line", "oi", "s", "m", "abi", "ii", "hi", "index", "j", "chi", "t", "ini", "mu", "b", "ai", "multi", "ji", "li", "ci", "zi", "qi", "u", "bi", "c", "ri", "e", "ori", "it", "eni", "x", "pi", "fi", "ip", "id", "uri", "d", "y", "v", "ix", "slice", "f", "o", "ui", "info", "k"], "c1": ["ct001", " c4", "rc1", "C0", "c4", "lcs", "cs", "rc0", "C7", "lc2", "cId", "c0", "ct7", "C001", " c001", " c0", "C4", "rc2", "lc4", "c7", "v81", "lc0", "c81", " cId", "lcId", "c001", "C1", "mcs", "v0", " c81", " c7", "C81", "ct2", "ct1", "C2", "lc1", "mc1", "v2", "v1", " cs", "mc2", "mcId"], "c2": ["rc1", "c4", "c22", "ecTwo", "lcTwo", "scb", " c62", "lc2", "CTwo", "c52", "rc5", "ec1", " c22", "c82", "C4", "rc2", "Cb", "sc22", "C22", "c5", "sc82", "sc62", "lc4", "lc52", " c5", "sc2", " c52", "C1", "sc5", "cTwo", "rc4", "rc82", " cb", " cTwo", "rc62", "C2", " c82", "lc1", "ec2", "rcTwo", "sc1", "c62", "cb", "ec52"]}}
{"code": "\\nimport java.util.Scanner;\\n\\n\\npublic class Main {\\n\\n    /**\\n     * @param args the command line arguments\\n     */\\n    public static void main(String[] args) {\\n        \\n        Scanner s = new Scanner(System.in);\\n        String str = s.next();\\n        \\n        int c = 0;\\n        int maxC = 0;\\n        \\n        for (int i = 0; i < str.length(); i ++) {\\n            if (str.charAt(i) == 'A' || str.charAt(i) == 'C' || str.charAt(i) == 'G' || str.charAt(i) == 'T') {\\n                c ++;\\n                if (c > maxC)\\n                    maxC = c;\\n            } else\\n                c = 0;\\n        }\\n        \\n        System.out.println(maxC);\\n        \\n    }\\n    \\n}\\n", "target": "100", "substitutes": {"s": ["fs", "qs", "ms", "obs", "si", "n", "ops", "p", "er", "m", "gs", "os", "r", "south", "sync", "sl", "js", "abs", "b", "tests", "ls", "ins", "in", "ss", "ws", "ns", "l", "se", "sys", "e", "ses", "opens", "bs", "out", "h", "bis", "xs", "ts", "S", "d", "ssl", "ps", "v", "f", "services", "sb", "g"], "str": ["prev", "exec", "tri", "br", "err", "char", "n", "string", "form", "tr", "p", "sr", "er", "line", "name", "word", "ner", "hex", "strip", "cli", "sec", "enc", "r", "txt", "pass", "stri", "st", "arr", "b", "dr", "lc", "coll", "in", "prefix", "input", "obj", "Str", "data", "iter", "fr", "cl", "dec", "u", "ext", "out", "oct", "text", "pr", "next", "hr", "div", "f", "sp", "STR", "start", "strings", "wr", "spec"], "c": ["a", "pc", "chain", "rc", "cur", "cs", "ca", "n", "code", "cycle", "p", "C", "ic", "ac", "cc", "sc", "enc", "loc", "r", "t", "cr", "ec", "b", "lc", "cf", "coll", "cont", "in", "count", "xc", "bc", "ci", "size", "cache", "cm", "arc", "cl", "l", "u", "e", "ce", "x", "h", "ct", "d", "v", "dc", "mc", "nc", "uc", "f", "cu", "cp", "o", "cy", "g", "k", "col"], "maxC": ["MaxT", " maxT", "maxCs", " maxCount", "MaxN", "MaxDC", "minC", " maxc", "MaxCount", "MaxC", "maxc", "MaxU", " maxU", "maxDC", "bestc", "bestN", " maxCs", "bestC", "minT", "bestCs", "maxU", "topN", "minN", "bestCount", "topC", "MaxCs", " maxDC", "topc", "maxCount", "maxT", "Maxc", "minc", "bestDC", "topU", "maxN", " maxN"], "i": ["a", "gi", "xi", "I", "ei", "is", "io", "idi", "si", "ie", "di", "p", "oi", "m", "ii", "index", "j", "chi", "t", "z", "ini", "isi", "b", "lc", "ai", "phi", "multi", "ji", "li", "ci", "zi", "ri", "qi", "u", "bi", "l", "e", "ori", "iu", "it", "eni", "pi", "h", "x", "id", "uri", "ip", "d", "y", "v", "ix", "f", "ui", "o", "info"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args)\\n\t{\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint dataSize = Integer.parseInt(sc.nextLine());\\n\t\tint[][] data = new int[dataSize][3];\\n\t\\n\t\tfor(int i = 0; i < dataSize; ++i)\\n\t\t{\\n\t\t\tString[] splitted = sc.nextLine().split(\"\\\\s+\");\\n\t\t\tdata[i][0] = Integer.parseInt(splitted[0]);\\n\t\t\tdata[i][1] = Integer.parseInt(splitted[1]);\\n\t\t\tdata[i][2] = Integer.parseInt(splitted[2]);\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0; i < dataSize; ++i)\\n\t\t{\\n\t\t\tif(IsRight(data[i][0],data[i][1],data[i][2]))\\n\t\t\t\tSystem.out.println(\"YES\");\\n\t\t\telse\\n\t\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\t\t\\n\t}\\n\t\\n\tpublic static boolean IsRight(int a, int b, int c)\\n\t{\\n\t\tif((a*a == b*b + c*c) || (b*b == a*a + c*c ) || (c*c == a*a + b*b))\\n\t\t\treturn true;\\n\t\telse \\n\t\t\treturn false;\t\\n\t}\\n\t\\n\t\\n\t\\n\t\\n\\n\t\\n}", "target": "65", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ser", "screen", "sr", "s", "cc", "ner", "enc", "sync", "system", "cr", "st", "osc", "ec", "lc", " scr", "bc", "sci", "ss", "cus", "cl", "scope", "se", "isc", "src", "Sc", "asc", "out", "cv", " SC", "sch", "dc", "mc", "scan", "nc", " Sc", "uc", "anc", "sh", "sp", "parser", "SC"], "dataSize": ["DataCount", "DataInfo", " dataCount", "inputLength", "DataSize", "channelsize", "channelLength", "dataLen", "datasize", "windowLen", "windowLength", "dataInfo", " dataLength", "channelSize", "channelInfo", "Datasize", "windowSize", "dataLength", "inputCount", "inputSize", "DataLen", " dataInfo", " datasize", "windowCount", "DataLength", " dataLen", "inputLen", "dataCount"], "data": ["results", "status", "di", "index", "entry", "values", "multi", "split", "map", "ata", "keys", "page", "join", "it", "id", "style", "json", "change", "ui", "array", "info", "zip", "view", "start", "missing", "window", "string", "raw", "name", "result", "memory", "one", "action", "config", "length", "actions", "error", "cache", "extra", "dat", "sequence", "parts", "number", "load", "params", "value", "code", "output", "alpha", "this", "response", "input", "size", "object", "state", "cat", "la", "body", "api", "current", "div", "as", "where", "list", "parent", "diff", "batch", "image", "series", "text", "content", "slice", "key", "shift", "parse"], "i": ["gi", "xi", "list", "I", "inline", "is", "io", "idi", "si", "ie", "di", "iv", "p", "oi", "cli", "s", "me", "abi", "ii", "index", "j", "iii", "uli", "ini", "mu", "isi", "lc", "ati", "ai", "edit", "phi", "multi", "ji", "li", "ti", "ci", "iri", "q", "zi", "l", "qi", "u", "bi", "ri", "e", "ori", "iu", "it", "eni", "mi", "pi", "x", "h", "yi", "init", "source", "id", "ip", "uri", "y", "v", "ix", "api", "slice", "uni", "f", "ui", "o", "info"], "splitted": ["splitter", " splitter", "fit", "plitting", "Splitt", "spitting", "spits", "splits", " splitt", "fitted", "Splited", " splited", "plitted", " splits", "plitt", "split", "Splitted", "splitting", "spitted", "fitter", " splitting", "Split", "fits", " split", "plit", "plited", "splited", "splitt", "plitter", "spitter", "spit"], "a": ["w", "ar", "ca", "n", "p", "C", "s", "ac", "alpha", "m", "ia", "r", "A", "sa", "t", "z", "an", "ab", "ai", "ae", "ah", "ba", "B", "da", "l", "aj", "u", "e", "area", "x", "am", "h", "d", "y", "v", "api", "aa", "f", "as", "o", "ad"], "b": ["w", "ca", "n", "bb", "p", "s", "ac", "m", "r", "A", "j", "t", "z", "ab", "ib", "an", "bc", "ae", "ba", "B", "l", "u", "bi", "e", "x", "h", "d", "y", "v", "aa", "f", "k", "o", "sb", "g", "be", "cb", "ad", "rb"], "c": ["fc", "ch", "w", "cs", "ca", "n", "p", "C", "s", "ac", "cc", "cd", "r", "t", "z", "ec", "an", "lc", "cf", "bc", "ci", "q", "l", "u", "e", "ce", "x", "h", "or", "d", "y", "v", "dc", "cp", "f", "cu", "o", "cy", "g", "cb", "k", "con", "co"]}}
{"code": "public class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\\n\t\tjava.util.Scanner scanner = new java.util.Scanner(System.in);\\n\t\tint a = scanner.nextInt();\\n\t\tint b = scanner.nextInt();\\n\t\t\\n\t\tint num = a;\\n\t\tint num2 = b;\\n\t\t\\n\t\tif(num > num2){\\n\t\t\tSystem.out.println(\"a\"+\" \"+\">\"+\" \" +\"b\");\\n\t\t}else if(num < num2){\\n\t\t\tSystem.out.println(\"a\"+\" \"+\"<\"+ \" \"+\"b\");\t\\n\t\t}else if(num == num2){\\n\t\t\tSystem.out.println(\"a\"+\" \"+ \"==\" +\" \" + \"b\");\\n\t\t}\\n\\n\t}\\n}", "target": "179", "substitutes": {"scanner": ["schening", "scaner", "scheker", "analyer", "analyner", "anner", "scheer", "Scanper", " scanper", "analyning", "anper", "Scaner", "Scanner", "anker", "scanker", "Scanker", " scanker", "Scanoder", "scanning", "scanper", "analyoder", "aner", " scanoder", "analyker", "scanoder", " scaner", "schener", "Scanning"], "a": ["ca", "n", "p", "oa", "ia", "alpha", "ac", "m", "na", "index", "A", "sa", "an", "ab", "ai", "ae", "ba", "da", "aj", "u", "c", "am", "x", "area", "d", "y", "va", "offset", "aa", "f", "as", "from", "ama", "i", "ad"], "b": ["number", "n", "bb", "p", "nb", "s", "lb", "eb", "index", "j", "r", "wb", "ab", "ib", "B", "l", "u", "c", "bi", "e", "fb", "mb", "bs", "x", "d", "y", "db", "v", "bf", "f", "sb", "be", "i", "k", "rb"], "num": ["nu", "span", "number", "comb", "lim", "NUM", "um", "bin", "n", "code", "form", "mult", "umi", "nb", "home", "mom", "na", "index", "loc", "ul", "umber", "du", "an", "mu", "coord", "max", "count", "rub", "nn", "Num", "u", "en", "c", "np", "out", "aug", "sum", "id", "con", "un", "uu", "uni", "len", "om", "nc", "uc", "div", "f", "dim", "i", "col", "norm"], "num2": ["number1", " numtwo", " num1", "numberTwo", "resultB", "num182", "umtwo", "number182", "dimb", " numTwo", "dimTwo", "numTwo", "dim2", "numberB", " numB", "dimB", "result1", "number2", "resulttwo", "numB", " num182", "numtwo", "umb", "numbase", " numb", " numbase", "num1", "umTwo", "result2", "numberb", "numb", "um2", "um182", "dimbase", "numbertwo", "umbase"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main (String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] counts = new int[8];\\n\t\tint over = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t    int x = sc.nextInt();\\n\t\t    int idx = x / 400;\\n\t\t    if (idx >= 8) {\\n\t\t        over++;\\n\t\t    } else {\\n\t\t        counts[idx]++;\\n\t\t    }\\n\t\t}\\n\t\tint types = 0;\\n\t\tfor (int i = 0; i < counts.length; i++) {\\n\t\t    if (counts[i] != 0) {\\n\t\t        types++;\\n\t\t    }\\n\t\t}\\n\t\tint max = types + over;\\n\t\tint min = Math.max(types, 1);\\n\t\tSystem.out.println(min + \" \" + max);\\n\t}\\n}\\n", "target": "94", "substitutes": {"sc": ["pc", "esc", "exec", "sw", "rc", "ch", "cur", "cs", "ser", "cor", "cer", "screen", "sr", "cc", "ner", "enc", "sync", "system", "cr", "osc", "sq", "lc", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "c", "src", "Sc", "asc", "out", "sche", "cv", " SC", "sch", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "sb", "SC"], "n": ["network", "number", "nr", "w", "p", "s", "nb", "m", "nor", "ne", "r", "t", "ni", "z", "sn", "b", "N", "in", "size", "nn", "no", "q", "ns", "l", "num", "c", "en", "d", "y", "v", "nc", "f", "o", "net", "k", "inn"], "counts": [" countes", "sumens", "ides", "inds", "countes", "cols", "indi", " countens", "countles", "lengthless", "counti", " countings", "Counti", "countments", "colns", "lengths", "indments", "sumns", "Countries", "Countless", "Countes", "lengthings", "countings", "colens", "countless", "Countings", "idries", " countries", "Countments", "idles", " countless", "countries", "Counts", "countns", "lengthries", "sums", "ids", " countles", " counti", "Countles", "countens", "colings", " countns", "sumings", " countments", "indes"], "over": ["per", "number", "very", "huge", "re", "hard", "upper", "base", "Over", "on", "feature", "ride", "after", "http", "hover", "cover", "always", "replace", "more", "order", "now", "multi", "error", "large", "under", "total", "range", "above", "layer", "inter", "outer", "type", "last", "out", "or", "allow", "pre", "OVER", "v", "off", "every", "shift", "f", "of", "up", "active", "array", "iter", "overs", "ver"], "i": ["xi", "gi", "I", "io", "si", "ie", "di", "p", "oi", "s", "abi", "ii", "hi", "index", "j", "ni", "z", "ini", "mu", "b", "ai", "in", "inner", "phi", "multi", "li", "ci", "ti", "l", "u", "bi", "c", "e", "init", "it", "iu", "type", "mi", "pi", "h", "fi", "id", "ip", "uri", "y", "v", "ix", "slice", "api", "f", "ui", "o", "info", "start"], "x": ["xi", "px", "w", "p", "ic", "hi", "cross", "index", "j", "z", "b", "in", "xc", "xy", "rx", "ax", "l", "num", "c", "e", "xs", "X", "xx", "id", "val", "y", "ix", "v", "xxx", "ex", "xp", "f", "k"], "idx": [" idz", "idi", "aidi", "aidx", "IdX", "Idx", "idX", "Idy", "idj", "Idz", "aidz", "idz", " idX", " idy", "Idxs", "midx", "midxs", "midy", "aidj", " idxs", "idy", "Idj", "aidX", "Idi", "idxs", "midX", "aidy", " idj", " idi"], "types": ["parts", "span", "points", "styles", "orders", "pos", "cs", "blocks", "base", "s", "classes", "stars", "ports", "packs", "t", "js", "Types", "tests", "ins", "length", "count", "cases", "ss", "lists", "checks", "size", "total", "stats", "radius", "py", "groups", "ypes", "type", "ts", "xs", "links", "posts", "states", "ty", "jobs", "shows", "ats", "eps", "y", "cats", "ids", "pes", "ints", "sections", "pages", "plus", "features", "times", "mins", "ans", "info", "rows"], "max": ["res", "pop", "height", "pos", "rank", "base", "step", "MAX", "diff", "maximum", "average", "first", "power", "r", "default", "ase", "est", "Max", "count", "rand", "mean", "end", "now", "size", "total", "ax", "range", "point", "Min", "type", "last", "out", "sum", "id", "depth", "mod", "scale", "d", "right", "division", "y", "rest", "shift", "div", "add", "plus", "act", "dot", "round", "start", "wrap", "rows", "ver"], "min": ["span", "MIN", "minimum", "pos", "cur", "base", "step", "diff", "part", "first", "default", "mini", "skip", "none", "partial", "in", "lower", "no", "size", "small", "range", "ax", "pri", "Min", "init", "type", "area", "last", "next", "major", "sum", "id", "little", "age", "pre", "len", "shift", "act", "from", "mins", "start", "mid", "spec"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner in = new Scanner(System.in);\\n        while(in.hasNext()){\\n        int H = in.nextInt();\\n        int W = in.nextInt();\\n        if(H==0&&W==0){\\n            break;\\n        }\\n        for(int i = 0; i<H ; i++){\\n            for(int j = 0; j<W ; j++){\\n                System.out.print(\"#\");\\n            }\\n            System.out.println();\\n        }\\n        System.out.println();\\n        }\\n        in.close();\\n    }\\n    }\\n", "target": "87", "substitutes": {"in": ["a", "exec", "din", "token", "is", "pin", "err", "In", "bin", "n", "parser", "s", "query", "socket", "diff", "log", "loader", "serv", "r", "ln", "this", "ini", "b", "doc", "ins", "lib", "inside", "input", "inner", "kin", "rin", "image", "data", "min", "l", "between", "c", "init", "binary", "conn", "out", "x", "lin", "source", "id", "inc", "con", "str", "again", "nin", "login", "isin", "buffer", "ex", "connection", "scan", "f", "arin", "as", "reader", "start", "IN", "inn"], "H": ["WH", "U", "I", "HA", "DH", "RH", "J", "T", "C", "GH", "CL", "NH", "HP", "HS", "HT", "Q", "HL", "Y", "Ha", "Z", "L", "HR", "TH", "h", "HK", "MH", "X", "HH", "OH", "HC", "F", "HD", "EH", "HY", "Ch", "HB", "SH", "CH", "HI"], "W": ["K", "U", "WH", "I", "WD", "w", "Sw", "DW", "J", "C", "T", "EW", "FF", "Wh", "CL", "A", "WE", "G", "N", "Q", "Width", "R", "WC", "WW", "D", "AW", "Y", "CW", "VW", "Z", "NW", "L", "TW", "SW", "GW", "X", "We", "RW", "Wa", "F", "P", "WS", "V", "BW", "FW", "WP", "WB", "SH"], "i": ["I", "si", "n", "p", "oi", "ii", "hi", "ij", "chi", "index", "ni", "z", "b", "ai", "phi", "ji", "li", "ci", "zi", "l", "u", "bi", "ori", "iu", "it", "h", "x", "pi", "id", "ip", "y", "v", "ix", "vi", "key", "f", "ui", "jp"], "j": ["xi", "bj", "ch", "ja", "si", "n", "jc", "pt", "ie", "J", "p", "jo", "ii", "ij", "index", "r", "z", "js", "jj", "jl", "b", "ji", "li", "obj", "l", "py", "u", "aj", "bi", "qi", "e", "it", "h", "x", "uj", "d", "str", "y", "v", "key", "f", "o", "g", "k", "jp"]}}
{"code": "import java.text.ParseException;\\nimport java.text.SimpleDateFormat;\\nimport java.util.Date;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString dateStr = sc.nextLine();\\n\t\tSimpleDateFormat sdFormat = new SimpleDateFormat(\"yyyy/MM/dd\");\\n\t\tDate inputDate = null;\\n\t\tDate lastHeisei = null;\\n\t\ttry {\\n\t\t\tinputDate = sdFormat.parse(dateStr);\\n\t\t\tlastHeisei = sdFormat.parse(\"2019/4/30\");\\n\t\t} catch (ParseException e) {\\n\\n\t\t}\\n\t\tif (inputDate.after(lastHeisei)) {\\n\t\t\tSystem.out.println(\"TBD\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"Heisei\");\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}", "target": "163", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "cms", "cc", "ner", "sec", "tc", "sa", "sync", "cr", "system", "osc", "sq", "lc", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "text", "sche", "sem", "cv", "sch", "scan", "nc", "uc", "sh", "sp", "sb", "parse", "SC"], "dateStr": [" dateString", "outputSpec", "dayFormat", "dailyStr", "outputString", "dailyString", "datestr", "outputStr", "dayString", "datstr", "dayStr", "dailyFormat", " dateSpec", "datSpec", "daySt", "dateSt", "datStr", " dateFormat", "outputstr", "dateString", "datString", "dateSpec", "dailySt", " datestr", " dateSt", "dateFormat"], "sdFormat": ["SDFactory", "sdFactory", "samFactory", "sdForm", "sdDate", " sdHandler", "ldFormat", "samFormat", "dlParser", " sdType", "hdDate", "samString", " sdParser", "dlHandler", "sdInfo", "SDPath", "sdPath", " sdPath", "samPath", " sdFactory", "sdType", "ldForm", " sdDate", " sdInfo", "SDFormat", "hdInfo", " sdForm", "hdFormat", "hdForm", "SDString", "ldHandler", "sdParser", "ldType", "ldParser", "dlType", "ldDate", "ldInfo", "sdHandler", "dlFormat", " sdString", "sdString"], "inputDate": [" inputdate", "initDate", " inputFile", "importDay", "inputMonth", "InputTime", "initdate", "initFile", "inputFile", "initMonth", "InputDay", "importMonth", "inputDay", " inputMonth", "requestTime", "Inputdate", "InputMonth", " inputDat", "importDate", "requestdate", "requestDate", "InputFile", "importTime", "InputDate", " inputDay", "requestDat", "inputDat", "inputTime", " inputTime", "inputdate", "InputDat"], "lastHeisei": ["lastHiseo", "lastHeisky", "lastHeiski", "lastHeissey", "lastHeisseit", "lastHeiske", "lastHaniski", "lastHeissi", "lastHiske", "lastHissit", "lastHeiseo", "lastHeisey", "lastHanisey", "lastHeidea", "lastHaniseo", "lastHeidei", "lastHissi", "lastHeiskit", "lastHeissit", "lastHeisko", "lastHeidey", "lastHanisky", "lastHaniska", "lastHeissea", "lastHeisse", "lastHeideo", "lastHisse", "lastHeiseit", "lastHeiska", "lastHanisea", "lastHisey", "lastHeidee", "lastHeisee", "lastHisko", "lastHeissee", "lastHeissei", "lastHiseit", "lastHanisko", "lastHisso", "lastHeisea", "lastHisky", "lastHiski", "lastHisei", "lastHeisseo", "lastHisee", "lastHeisso", "lastHanisei", "lastHeissy"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        sc.close();\\n        System.out.println(n * (n - 1) / 2 + m * (m - 1) / 2);\\n    }\\n}", "target": "49", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "ch", "cur", "cs", "ca", "cer", "sf", "sr", "com", "cc", "tc", "soc", "enc", "cd", "sync", "osc", "cr", "sl", "sq", "ec", "lc", "coll", "bc", "sci", "ss", "ci", "cus", "cm", "cl", "scope", "se", "c", "src", "Sc", "asc", "cv", " SC", "mc", "scan", "nc", "uc", "sh", "sp", "sb", "SC"], "n": ["nu", "network", "number", "w", "ny", "name", "p", "s", "cn", "nt", "na", "loc", "j", "ne", "mn", "z", "b", "N", "in", "count", "nn", "size", "ns", "l", "u", "en", "c", "num", "e", "fn", "conn", "x", "d", "ng", "y", "v", "nc", "f", "o", "net", "i", "k"], "m": ["a", "i", "w", "p", "s", "j", "r", "mn", "mini", "z", "gm", "mu", "b", "in", "ym", "mr", "cm", "q", "l", "u", "mx", "c", "M", "mi", "x", "h", "d", "y", "v", "mc", "f", "o", "md", "g", "mm", "k"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n      String C = sc.next();\\n      String alfa = \"abcdefghijklmnopqrstuvwxyz\";\\n      int A = alfa.indexOf(C);\\n      System.out.println(alfa.substring(A+1,A+2));\\n    }\\n}", "target": "150", "substitutes": {"sc": ["pc", "esc", "sw", "rc", "desc", "cs", "ca", "sub", "cc", "sec", "exp", "acc", "enc", "sync", "osc", "cr", "ec", "lc", "bc", "sci", "ss", "ci", "cl", "scope", "se", "c", "src", "Sc", "asc", "ct", " SC", "mc", "scan", "nc", " Sc", "uc", "sh", "sp", "g", "SC", "spec"], "C": ["O", "K", "U", "E", "CI", "AC", "FC", "CC", "CS", "Ca", "T", "EC", "CF", " c", "G", "CN", "N", "LC", "R", "D", "H", "DC", "B", "L", "c", "CE", "JC", "NC", "KC", "S", "P", "F", "CNN", "V", "CT", "GC", "SC", "CA"], "alfa": ["alfi", "farea", "efaa", "aaaaas", "alfai", " fleai", " flea", "afa", "fleas", "afA", "afaa", " afai", "fareaa", "efA", "alfaa", "fleea", "fareas", "elfa", "elfea", "flea", "afara", "elfara", "aaaai", "afas", " afi", " fleas", "elfas", "fleara", "fareA", " afas", "alfara", "alfA", " afa", "afea", "alfea", " flei", "efas", "efa", "aaaaai", "aaaaa", "alfas"], "A": ["O", "Alpha", "K", "U", "E", "I", "a", "API", "HA", "As", "Na", "AB", "Access", "Ca", "GA", "Array", "PA", "G", "AA", "LA", "W", "N", "SHA", "UA", "IA", "ANY", "H", "D", "Ha", "NA", "B", "L", "MA", "M", "SA", "Va", "EA", "Ma", "The", "mA", "Area", "BA", "S", "P", "F", "None", "Code", "Fa", "At", "FA", "CA"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\nclass Main {\\n\tpublic static void main(String args[]) throws IOException {\\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\t\tSolver solver = new Solver();\\n\t\tsolver.init();\\n\t\tsolver.readHead(in.readLine());\\n\t\tsolver.readA(in.readLine());\\n\t\tsolver.readB(in.readLine());\\n\t\tsolver.readC(in.readLine());\\n\t\t// for (; solver.hasNext();) {\\n\t\t// solver.readBody(in.readLine());\\n\t\t// }\\n\t\tsolver.solve();\\n\t}\\n}\\n\\nclass Solver {\\n\tint N;\\n\tint cnt;\\n\\n\tpublic void init() {\\n\t\tN = 0;\\n\t\tcnt = 0;\\n\t}\\n\\n\tpublic void readHead(String str) {\\n\t\tString[] strArr = str.split(\"\\\\s+\");\\n\t\tN = Integer.parseInt(strArr[0]);\\n\t\t// System.out.println(N);\\n\t\tA = new int[N + 1];\\n\t\tB = new int[N + 1];\\n\t\tC = new int[N + 1];\\n\t}\\n\\n\tpublic void readA(String str) {\\n\t\tString[] strArr = str.split(\"\\\\s+\");\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\tA[i + 1] = Integer.parseInt(strArr[i]);\\n\t}\\n\\n\tpublic void readB(String str) {\\n\t\tString[] strArr = str.split(\"\\\\s+\");\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\tB[i + 1] = Integer.parseInt(strArr[i]);\\n\t}\\n\\n\tpublic void readC(String str) {\\n\t\tString[] strArr = str.split(\"\\\\s+\");\\n\t\tfor (int i = 0; i < N - 1; i++)\\n\t\t\tC[i + 1] = Integer.parseInt(strArr[i]);\\n\t}\\n\\n\tint[] A;\\n\tint[] B;\\n\tint[] C;\\n\\n\tpublic boolean hasNext() {\\n\t\treturn cnt < N;\\n\t}\\n\\n\tpublic void readBody(String str) {\\n\t\t// System.out.println(str);\\n\t\tcnt++;\\n\t}\\n\\n\tpublic void solve() {\\n\t\tint ans = 0;\\n\t\tfor (int i = 1; i <= N; i++) {\\n\t\t\tans += B[A[i]];\\n\t\t\tif (i >= N)\\n\t\t\t\tcontinue;\\n\t\t\tif (A[i] + 1 == A[i + 1])\\n\t\t\t\tans += C[A[i]];\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "223", "substitutes": {"in": ["a", "din", "file", "fac", "re", "is", "err", "In", "bin", "arg", "version", "line", "ic", "s", "ac", "cli", "socket", "log", "on", "serv", "r", "txt", "with", "this", "cin", "ini", "thin", "b", "ins", "inside", "image", "input", "inner", "readable", "rec", "kin", "data", "session", "by", "win", "min", "l", "c", "stream", "init", "it", "out", "lin", "source", "id", "inc", "d", "gin", "again", "nin", "login", "isin", "ex", "connection", "f", "plus", "up", "from", "reader", "i", "IN", "con"], "solver": ["ssolve", "osolver", "ssolution", "osolve", "senser", "solution", " solution", "Solve", "insolve", "sol", "Sector", "resolve", "insector", " solve", "ssector", "soler", "Solution", "ssolar", "osenser", " soler", "osolution", "osolar", "ssolver", " senser", "Solver", "solar", "insolution", "ssol", "ssenser", "Sol", "osoler", "solve", "insolver", "resol", "Solar", "resolution", "ssoler", "sector", "resolver"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n\\n    Scanner scan = new Scanner(System.in);\\n\\n    String str = scan.next();\\n    int max = 0;\\n\\n    for (int i = 0; i < str.length();) {\\n      int cnt = 0;\\n      for (int j = i; j < str.length(); j++) {\\n        i = j + 1;\\n        if ((str.charAt(j) == 'A') || (str.charAt(j) == 'C') || (str.charAt(j) == 'G') || (str.charAt(j) == 'T')) {\\n          cnt++;\\n        } else {\\n          break;\\n        }\\n      }\\n      max = Math.max(max, cnt);\\n    }\\n\\n    System.out.println(max);\\n  }\\n\\n}", "target": "100", "substitutes": {"scan": ["chan", "run", "err", "search", "gen", "n", "er", "query", "ner", "sc", "serv", "r", "ln", "sync", "skip", "system", "an", "ann", "b", "start", "in", "nn", "iter", "all", "win", "sign", "read", "se", "sys", "l", "can", "out", "cat", "feed", "clean", "server", "Scan", "walk", "watch", "ignore", "reader", "stat", "parser", "parse", "con"], "str": ["prev", "br", "err", "char", "form", "string", "word", "tr", "name", "line", "sr", "er", "hex", "s", "cli", "ner", "result", "strip", "enc", "r", "txt", "pass", "stri", "st", "arr", "dr", "coll", "in", "input", "url", "Str", "data", "fr", "dec", "c", "broken", "out", "oct", "text", "pr", "next", "id", "parse", "style", "hr", "key", "div", "f", "sp", "STR", "iter", "start", "strings", "wr", "spec"], "max": ["best", "res", "cur", "rank", "step", "power", "index", "always", "rand", "total", "min", "frac", "last", "id", "scale", "info", "call", "start", "chain", "pop", "height", "pos", "name", "MAX", "largest", "count", "mean", "cache", "ax", "out", "add", "dist", "value", "maximum", "average", "Max", "std", "conf", "now", "size", "range", "unique", "c", "init", "x", "limit", "next", "depth", "mod", "div", "active", "wrap", "pad", "list", "parent", "diff", "default", "none", "end", "no", "great", "point", "sum", "right", "rest", "key", "auto", "parse"], "i": ["xi", "gi", "a", "I", "si", "n", "di", "ami", "p", "oi", "m", "ii", "hi", "index", "ni", "z", "ini", "b", "ai", "in", "ji", "li", "ci", "ik", "min", "zi", "l", "qi", "u", "bi", "ri", "c", "ori", "iu", "it", "x", "pi", "h", "id", "ip", "y", "v", "ix", "f", "ui", "o", "start", "k"], "cnt": ["pnt", "Cnt", "lcct", "dcNT", " cmax", "cner", "dcnt", "knn", "knt", "incner", "lcnn", "cct", "pct", "incnt", "cpt", " cner", " count", "CNT", "count", " cnd", "cnd", "cmax", "Cmax", " cNT", "dcount", "pnd", "lcnd", "pnn", "kpt", " cpt", "incpt", " cct", "Count", " cnn", "kner", "cNT", "lcnt", "dcmax", "cnn", "incnn"], "j": ["a", "bj", "ch", "io", "job", "ja", "si", "n", "jc", "ie", "dj", "J", "p", "jo", "ii", "ij", "index", "t", "ni", "z", "jj", "js", "b", "jl", "ji", "li", "obj", "q", "fr", "l", "qi", "u", "oj", "c", "bi", "e", "aj", "it", "x", "h", "pr", "kj", "uj", "d", "je", "y", "v", "jit", "json", "f", "ui", "o", "g", "jan", "k", "jp"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tlong h = sc.nextLong();\\n\t\th = calc(h);\\n\t\tSystem.out.println(h);\\n\t}\\n\tpublic static long calc(long h){\\n\t\tlong res = 1;\\n\t\tif(h > 1){\\n\t\t\tres = 1 + 2 * calc(h / 2);\\n\t\t}\\n\t\treturn res;\\n\t}\\n}", "target": "51", "substitutes": {"sc": ["pc", "esc", "exec", "rc", "ch", "cs", "ca", "sub", "cc", "sec", "soc", "acc", "enc", "osc", "cr", "sl", "sq", "ec", "bc", "sci", "ss", "ci", "cl", "scope", "se", "l", "c", "src", "Sc", "asc", " SC", "scan", "nc", " Sc", "uc", "sh", "sp", "cb", "SC", "spec"], "h": ["uh", "hs", "w", "n", "p", "history", "s", "m", "hi", "loc", "r", "j", "t", "z", "hm", "b", "max", "hash", "length", "count", "ah", "H", "ih", "error", "dh", "q", "l", "hours", "u", "num", "c", "zh", "e", "x", "rh", "ph", "id", "HH", "oh", "eh", "d", "bh", "y", "v", "hr", "ha", "hh", "f", "sh", "gh", "o", "i"], "res": ["prev", "results", "vals", "rc", "Res", "re", "err", "ms", "rs", "result", "exp", "req", "rev", "os", "r", "cr", "arr", "abs", "gr", "max", "rus", "Rs", "rx", "RES", "rec", "min", "q", "num", "x", "resp", "rep", "rh", "vec", "id", "ps", "val", "rez", "ret", "resolution", " Res", "pres", "resh", "ras", "rows"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        int n = s.length();\\n        for(int i = 1 ; i <= n ; i++ ){\\n            System.out.print(\"x\");\\n        }\\n        sc.close();\\n    }\\n}", "target": "122", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cur", "cs", "cer", "sf", "cc", "sec", "app", "enc", "sa", "sync", "cr", "sl", "osc", "sq", "lc", "class", "bc", "sci", "ss", "ci", "cl", "scope", "se", "l", "c", "src", "Sc", "str", " SC", "sch", "mc", "scan", "nc", "uc", "anc", "server", "sh", "sp", "sb", "g", "SC"], "s": ["fs", "a", "parts", "is", "si", "string", "sf", "rs", "p", "m", "gs", "os", "bytes", "sets", "sv", "sl", "js", "ls", "b", "ds", "ins", "sg", "ss", "ws", "ns", "l", "u", "c", "ses", "h", "su", "S", "ps", "es", "f", "services", "o", "sb", "seconds", "g", "strings"], "n": ["number", "w", "pos", "p", "nb", "m", "nt", "ne", "j", "t", "mn", "z", "sn", "b", "N", "length", "count", "nn", "size", "no", "ns", "l", "u", "num", "c", "en", "e", "conn", "x", "d", "y", "len", "nc", "f", "o", "net", "k"], "i": ["xi", "gi", "I", "si", "di", "p", "oi", "m", "ii", "hi", "chi", "j", "t", "ni", "z", "ini", "b", "ai", "phi", "ji", "multi", "li", "ci", "ti", "zi", "ri", "qi", "u", "bi", "e", "init", "x", "pi", "id", "ip", "d", "y", "v", "ix", "slice", "f", "o", "ui", "info", "k"]}}
{"code": "import java.util.Scanner;\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int k = sc.nextInt();\\n    int[] a = new int[n];\\n    for(int i = 0; i < n ; i++) {\\n      a[i] = sc.nextInt();\\n    }\\n    int c = 0;\\n    for(int i =0 ; i < n ; i++) {\\n      if(k <= a[i]) {\\n        c++;\\n      }\\n    }\\n    System.out.println(c);\\n  }\\n}\\n", "target": "145", "substitutes": {"sc": ["pc", "esc", "fc", "sw", "rc", "ch", "cs", "ser", "cor", "cer", "sf", "cc", "ner", "tc", "soc", "na", "enc", "sync", "system", "osc", "cr", "ec", "lc", "class", "cont", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "l", "src", "Sc", "asc", "sche", "sem", "cv", " SC", "sch", "scan", "nc", " Sc", "anc", "uc", "server", "sh", "sp", "sb", "SC"], "n": ["network", "kn", "w", "p", "nb", "s", "m", "nt", "ne", "j", "nan", "ln", "t", "z", "sn", "b", "N", "in", "count", "nn", "size", "no", "ns", "l", "u", "num", "e", "conn", "x", "d", "y", "v", "len", "nc", "f", "o", "net"], "k": ["K", "ks", "ch", "w", "ak", "p", "mk", "m", "j", "ki", "z", "sk", "b", "ik", "q", "l", "u", "e", "h", "x", "dk", "kw", "id", "d", "y", "v", "key", "ok", "f", "o", "g"], "a": ["tta", "ga", "ca", "p", "oa", "aaa", "ac", "alpha", "s", "na", "wa", "A", "sa", "ea", "qa", "ana", "ma", "z", "an", "ab", "b", "ae", "ba", "ata", "pa", "da", "l", "u", "e", "area", "am", "la", "va", "y", "aa", "f", "as", "o", "auto", "array", "au"], "i": ["xi", "gi", "I", "rc", "is", "io", "ch", "si", "ie", "di", "p", "oi", "abi", "ii", "hi", "index", "r", "j", "chi", "ni", "z", "ini", "mu", "b", "lc", "ai", "in", "multi", "ji", "li", "ci", "ti", "zi", "l", "qi", "u", "bi", "ri", "e", "init", "iu", "it", "eni", "mi", "pi", "x", "fi", "id", "ip", "uri", "y", "ix", "v", "api", "f", "ui", "o", "g"], "c": ["pc", "rc", "ch", "cur", "cs", "ca", "code", "p", "C", "ic", "ac", "cc", "m", "enc", "t", "z", "ec", "cr", "b", "lc", "cf", "coll", "count", "xc", "ci", "arc", "l", "dec", "u", "e", "ce", "h", "x", "ct", "inc", "d", "v", "dc", "cp", "uc", "f", "cu", "anc", "nc", "cy", "g", "col"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\twhile(true) {\\n\t\tint n;\\n\t\tn = sc.nextInt();\\n\t\tif(n==0) {\\n\t\t\tbreak;\\n\t\t}\\n\t\tdouble[] num;\\n\t\tdouble sum = 0;\\n\t\tnum = new double[n];\\n\t\tfor(int i = 0;i<n;i++) {\\n\t\t\tnum[i] = sc.nextInt();\\n\t\t\tsum += num[i];\\n\t\t}\\n\\n\t\tdouble ave = sum/n;\\n\t\tdouble sum_2 = 0;\\n\t\tfor(int i = 0;i<n;i++) {\\n\t\t\tsum_2 += (num[i]-ave)*(num[i]-ave);\\n\t\t}\\n\t\tdouble bunsan = sum_2/n;\\n\t\tdouble ans = Math.sqrt(bunsan);\\n\t\tSystem.out.printf(\"%f\\n\",ans);\\n\t}\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "203", "substitutes": {"sc": ["pc", "esc", "rc", "ch", "cur", "cs", "ca", "sub", "cer", "sf", "sr", "cc", "ner", "sec", "tc", "enc", "sync", "system", "sq", "osc", "cr", "sk", "lc", "bc", "sci", "ss", "ci", "cl", "scope", "se", "sys", "c", "src", "conn", "Sc", "sche", "sem", "cv", " SC", "sch", "mc", "scan", "nc", "uc", "anc", "sh", "sp", "sb", "SC", "con"], "n": ["nu", "network", "number", "w", "p", "nb", "s", "m", "nt", "nor", "na", "index", "j", "ne", "ln", "nan", "t", "ni", "z", "none", "mn", "sn", "b", "N", "an", "in", "nn", "no", "ns", "l", "u", "c", "en", "e", "init", "conn", "x", "dn", "nw", "d", "y", "v", "nit", "len", "nc", "f", "o", "net", "g", "k"], "num": ["nu", "number", "four", "NUM", "um", "bin", "form", "name", "p", "unit", "umi", "sort", "m", "result", "home", "man", "mom", "na", "index", "ul", "mn", "du", "umber", "one", "digit", "an", "mu", "mat", "mon", "nm", "mean", "data", "nn", "miss", "no", "Num", "node", "u", "fn", "norm", "init", "np", "am", "out", "text", "x", "tu", "nam", "nom", "block", "inc", "un", "ng", "om", "plus", "dim", "temp", "con", "cal"], "sum": ["missing", "sav", "weight", "um", "si", "unit", "s", "alpha", "average", "sort", "mom", "na", "ne", "pass", "ul", "sa", "index", "Sum", "mass", "max", "count", "mon", "av", "mean", "ss", "size", "total", "miss", "use", "sam", "min", "sign", "ass", "se", "u", "init", "am", "su", "scale", "un", "spread", "fat", "sim", "plus", "summary", "gram", "cal"], "i": ["gi", "xi", "adi", "a", "I", "is", "io", "si", "di", "ie", "iv", "p", "oi", "ii", "hi", "index", "j", "ni", "z", "ini", "b", "ind", "ai", "in", "end", "li", "ci", "ti", "ik", "q", "l", "qi", "u", "bi", "ri", "e", "init", "iu", "eni", "mi", "x", "pi", "h", "fi", "yi", "id", "ip", "uri", "d", "y", "ix", "v", "f", "ui", "o", "g", "info"], "ave": ["are", "adr", "sav", "ak", "asha", "anan", "ay", "ve", "average", "avan", "ac", "alpha", "aved", "slave", "anne", "sa", "ame", "ana", "aul", "aving", "ai", "save", "av", "mean", "aves", "wave", "aver", "ax", "aft", "stage", "aj", "aw", "af", "aim", "aug", "asa", "air", "ain", "alt", "age", "ake", "ale", "avi", "ack", "aa", "au", "ad", "saving"], "sum_2": ["sumJ22", "sum_4", "sum_22", "sumJ2", " sum_82", "sum_8", " sum_1", "sum21", "sum_two", " sum_4", "sumJ1", " sum_22", "sum222", "sum2162", " sum_8", "sum22", " sum_162", "sumJ162", "sum_82", " sum_two", "sum_1", "sum_162"], "bunsan": ["bunnan", "bUNsa", "runsan", "rensa", "binSan", "bUNnas", "binsan", "runsa", "benSan", "buninnan", "Bounnan", "buninsa", "Bounsa", "Bunsan", "bennas", "bunSan", "buninan", "bunnsan", "Bounan", "bunsa", "bounsan", "buninsan", "bUNsan", "bunan", "Bunsa", "bounsa", "bunnas", "Bunan", "bensa", "bounan", "bensan", "binsa", "bounnan", "bunnnan", "binnas", "runnas", "bunnsa", "Bounsan", "bUNSan", "rennas", "Bunnan", "runSan", "rensan", "renSan"], "ans": ["AN", "lan", "na", "ANS", "nan", "anas", "ana", "an", "ann", "ars", "fan", "ins", "atan", "cas", "san", "ns", "asa", "ain", "aus", "mas", "ions", "aned", "scan", "anc", "as", "An", "nas", "ras"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n       Scanner stdIn= new Scanner(System.in);\\n\\n        int x = stdIn.nextInt();\\n        int y = stdIn.nextInt();\\n        if(x<=y){\\n            System.out.println(\"unsafe\");\\n        }else{\\n            System.out.println(\"safe\");\\n        }\\n    }\\n}\\n", "target": "177", "substitutes": {"stdIn": ["adOut", "stdOut", " stdCo", "adin", "STDin", "standardCo", "stdIns", "standardin", "adIn", "stin", "STDIN", " stdIng", "stIn", "gdCo", " stdIN", "stdIN", "adIns", "stdin", "STDIn", "STDIng", " stdIns", "stdIng", "standardIns", "stIN", "gdIn", "standardIn", "stdCo", " stdin", "gdOut", " stdOut", "gdin", "standardOut", "stIng"], "x": ["xi", "wx", "px", "w", "code", "p", "xt", "hi", "fx", "index", "t", "z", "xy", "rx", "ax", "l", "c", "e", "h", "xs", "X", "tx", "dx", "xx", "id", "d", "v", "ix", "xxx", "ex", "xp", "f", "i", "k"], "y": ["w", "ny", "n", "dy", "p", "index", "vy", "j", "oy", "t", "z", "yy", "xy", "ya", "ky", "Y", "q", "l", "yo", "py", "ey", "e", "type", "h", "yi", "zy", "xx", "id", "d", "ry", "isy", "ix", "ady", "f", "sy", "o", "i"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.math.BigInteger;\\nimport java.util.Comparator;\\nimport java.util.StringTokenizer;\\n\\n/**\\n *\\n * @author dkcs\\n */\\nclass Main\\n{\\n    static class FastReader {\\n        \\n        BufferedReader br;\\n        StringTokenizer st;\\n        \\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n        \\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n        \\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n        \\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n        \\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n        \\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n    \\n    static class Node {\\n        \\n        long pp;\\n        long a, b;\\n        \\n        Node(long x, long y) {\\n            a = x;\\n            b = y;\\n            pp = a * b;\\n        }\\n    }\\n    \\n    static class Comp implements Comparator<Node> {\\n        \\n        public int compare(Node o1, Node o2) {\\n            if (o1.pp > o2.pp) {\\n                return 1;\\n            } else {\\n                return -1;\\n            }\\n        }\\n    }\\n\\n    public static void main(String[] args) \\n    {\\n        FastReader sc = new FastReader();\\n        String s[]=sc.nextLine().split(\" \");\\n        BigInteger a=new BigInteger(s[0]);\\n        BigInteger b=new BigInteger(s[1]);\\n        BigInteger c=new BigInteger(s[2]);\\n        BigInteger d=new BigInteger(s[3]);\\n        BigInteger g=c.gcd(d);\\n        BigInteger lcm=(c.multiply(d)).divide(g);\\n        \\n        BigInteger ca=(a.subtract(BigInteger.ONE)).divide(c);\\n        BigInteger cb=b.divide(c);\\n        \\n        BigInteger da=(a.subtract(BigInteger.ONE)).divide(d);\\n        BigInteger db=b.divide(d);\\n        \\n        BigInteger la=(a.subtract(BigInteger.ONE)).divide(lcm);\\n        BigInteger lb=b.divide(lcm);\\n        \\n        BigInteger ans1=(cb.subtract(ca));\\n        BigInteger ans2=(db.subtract(da));\\n        BigInteger ans3=(lb.subtract(la));\\n        \\n        BigInteger ans=ans1.add(ans2);\\n        ans=ans.subtract(ans3);\\n        \\n        BigInteger t=b.subtract(a.subtract(BigInteger.ONE));\\n        ans=t.subtract(ans);\\n        System.out.println(ans);\\n\\n\\n        \\n        \\n        \\n        \\n        \\n    }\\n    \\n    \\n}\\n", "target": "9", "substitutes": {"br": ["ver", "ch", "cur", "err", "Br", "img", "bb", "tr", "p", "sr", "buf", "vr", "yr", "BR", "pl", "r", "browser", "arr", "abs", "dr", "bar", "gr", "ocr", "bc", "obj", "ob", "mr", "fr", "src", "bs", "ber", "bridge", "bt", "pr", "bro", "lr", "ler", "ru", "body", "rt", "bh", "rest", "hr", "sp", "orb", "reader", "ur", "bl", "rb"], "st": ["sw", "sta", "is", "string", "pt", "step", "stop", "struct", "sr", "ste", "sts", "ft", "tr", "store", "nt", " est", "part", "sth", "r", "inst", "sa", "stri", "est", "cr", "sl", "sn", "ost", "ld", "fe", "std", "storage", "tt", "ss", "Str", "pe", "sign", "stack", "fr", "cl", "nd", "l", "se", "ast", "ist", "src", "pr", "STR", "ct", "rt", "style", "rest", "ut", "const", "sh", "sp", "ST", "sb", "stage", "rd", "bl", "St"], "str": ["kr", "pos", "err", "char", "n", "string", "code", "tr", "p", "line", "sr", "exp", "enc", "r", "j", "stri", "z", "sl", "arr", "cr", "dr", "doc", "url", "inner", "obj", "Str", "data", "fr", "cl", "l", "u", "text", "pr", "id", "style", "v", "hr", "div", "f", "sp", "STR", "iter", "strings"], "pp": ["gp", "dd", "pm", "ap", "PP", "ppo", "bb", "p", "po", "pps", "ppe", "app", "pl", "sup", "php", "bp", "ppa", "ab", "ep", "fe", "mp", "par", "kk", "obj", "nn", "pe", "pa", "opp", "lp", "ipp", "py", "fb", "dp", "ff", "pr", "ph", "xx", "ip", "pg", "ps", "yp", "upp", "amp", "hr", "mm", "push", "aa", "cp", "cap", "up", "cpp", "ad", "jp"], "a": ["w", "ga", "ar", "n", "at", "au", "p", "ia", "ac", "m", "alpha", "aaa", "r", "A", "sa", "ana", "z", "ma", "an", "ab", "cf", "ai", "ae", "ba", "pa", "l", "u", "e", "af", "am", "h", "va", "api", "aa", "f", "as", "o", "ama", "i", "ad"], "b": ["w", "xb", "n", "bb", "p", "m", "r", "wb", "abb", "ab", "ib", "pb", "bc", "ub", "ba", "ob", "B", "l", "u", "mb", "fb", "e", "bs", "h", "bh", "v", "beta", "bf", "f", "k", "o", "as", "sb", "i", "ad", "bl", "rb"], "x": ["xi", "w", "n", "code", "p", "m", "r", "z", "xy", "ax", "l", "u", "en", "e", "h", "xs", "X", "xx", "v", "xxx", "ex", "f", "o", "i", "k"], "y": ["w", "ny", "n", "dy", "p", "ay", "m", "j", "vy", "z", "yy", "xy", "ya", "Y", "l", "e", "ey", "h", "v", "f", "o", "i", "k"], "o1": [" o3", "po1", "o3", "eOne", "c1", "c2", "nOne", "e3", "po81", "po2", "o01", "e1", " o81", " o01", "c81", "oOne", "e2", "n2", "n3", " oOne", "o81", "po01", "c01", "n1"], "o2": [" ob", "po1", " oTwo", "i2", "i4", "n4", " o0", "so2", "o0", "i0", "po2", "i1", "oTwo", "n0", "sob", "pob", "poTwo", "ob", "o4", "soTwo", " o4", "so1", "n2", "n1"], "sc": ["pc", "esc", "sw", "rc", "ch", "desc", "cs", "gb", "rs", "C", "cc", "sec", "tc", "enc", "sync", "cr", "osc", "ec", "lc", " scr", "bc", "sci", "ss", "ci", "cus", "cl", "scope", "se", "src", "Sc", "asc", "cv", " SC", "dc", "mc", "scan", "nc", " Sc", "anc", "uc", "sh", "sp", "SC", "spec"], "s": ["comments", "parts", "is", "ks", "w", "ges", "params", "ms", "si", "n", "blocks", "rs", "string", "aws", "p", "ings", "ops", "days", "m", "gs", "os", "r", "sets", "sv", "sl", "abs", "js", "ls", "tests", "ds", "lines", "ss", "ws", "its", "ns", "l", "hours", "u", "e", "ses", "bs", "h", "words", "bes", "states", "S", "ps", "v", "es", "sites", "arms", "f", "services", "as", "o", "us", "seconds", "times", "features", "i", "strings"], "c": ["w", "n", "p", "C", "ac", "m", "cd", "r", "z", "ec", "cf", "bc", "cm", "q", "l", "u", "e", "h", "v", "dc", "f", "cu", "o", "i", "k", "con"], "d": ["dd", "w", "xd", "n", "dy", "p", "bd", "m", "cd", "r", "z", "dr", "ds", "df", "D", "dh", "q", "l", "u", "e", "h", "dn", "dc", "v", "f", "k", "o", "sd", "i", "ad", "gd"], "g": ["gi", "gp", "w", "ga", "n", "gb", "p", "group", "m", "gs", "gm", "mg", "z", "G", "ge", "go", "sg", "q", "l", "u", "e", "gam", "h", "gc", "pg", "v", "gu", "mc", "f", "gg", "rg", "o", "gh", "gn", "i"], "lcm": ["ggm", "pbm", "pcm", "hpm", "hbm", "gpm", "lpm", "lbm", "hgm", "lgm", "hcm", "pgm", "gbm", "gcm", "ppm"], "ca": ["acl", "fa", "cca", "aca", "ga", "cs", "Ca", "ia", "cc", "ac", "CA", "aaaa", "ada", "ea", "sa", "cr", "ab", "ae", "ba", "pa", "ce", "ta", "mA", "abc", "uca", "cal"], "cb": ["fc", "cca", "bb", "cc", "zb", "cd", "abb", "wb", "cr", "lc", " bc", "cod", "cf", "bc", "xc", "ctrl", "CB", "ob", "cmp", "fb", "BBC", "cv", "mc", "bf", "cp", "nc", "abc", "cpp", "rb"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Main2 cc = new Main2();\\n        cc.yesNo();\\n    }\\n}\\n\\nclass Main2{\\n    public void yesNo(){\\n        Scanner scan = new Scanner(System.in);\\n        int[] abc = new int[3];\\n        for(int i=0; i < 3; i++){\\n            abc[i] = scan.nextInt();\\n        }\\n        if(abc[0] < abc[1] && abc[1] < abc[2]){\\n            System.out.println(\"Yes\");\\n        }\\n        else{\\n            System.out.println(\"No\");\\n        }\\n    }\\n}\\n\\n", "target": "168", "substitutes": {"cc": ["pc", " gcc", "cca", "FC", "cs", "CC", "ca", "oc", "css", "ac", "cn", "PC", "tc", "acc", "cr", "ec", "lc", "cf", "ck", "coll", "xc", "BC", "bc", "cm", " CC", "cl", "ce", "bridge", "ct", "cv", "RC", "mc", "cci", "ack", "cp", "uc", "anc", "nc", "co"], "scan": ["chan", "run", "get", "search", "gen", "n", "connect", "query", "ner", "sc", "na", "serv", "r", "pass", "skip", "system", "an", "ann", "fan", "conf", "in", "nn", "all", "use", "sign", "read", "se", "l", "c", "can", "out", "cat", "ans", "look", "v", "feed", "clean", "Scan", "stat", "walk", "ignore", "reader", "view", "parse", "con"], "abc": ["pc", "fc", "exc", "rc", "acl", "fab", "big", "cca", "oc", "lambda", "ac", "acc", "auc", "loc", "abb", "icc", "abs", "ec", "ib", "ab", "lc", "abl", "lab", "aux", "coll", "conf", "org", "xc", "bc", "ba", "etc", "ob", "arc", "bug", "c", "fb", "af", "BBC", "asc", "inc", " ABC", "dc", "mc", "aa", "nc", "uc", "anc", "ignore", "ABC", "cb", "rb"], "i": ["a", "xi", "gi", "I", "io", "at", "n", "si", "di", "ie", "p", "oi", "abi", "ii", "hi", "index", "r", "j", "t", "z", "ini", "mu", "b", "ai", "phi", "multi", "li", "ci", "ti", "l", "qi", "u", "bi", "c", "e", "it", "iu", "mi", "x", "h", "pi", "fi", "id", "ip", "y", "v", "slice", "f", "o", "ui", "info", "start", "k"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.Comparator;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.StringTokenizer;\\nimport java.util.TreeSet;\\n\\nimport javax.swing.*;\\n\\nimport static java.util.Arrays.binarySearch;\\nimport static java.util.Arrays.copyOfRange;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n\\n        Task solver = new Task();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n}\\n\\nclass Task {\\n\\n    private static int mod = 1000000007;\\n\\n\\n    public void solve(int testNumber, InputReader in, PrintWriter out) {\\n        int n = in.nextInt();\\n        String s = in.next();\\n        for (int i = 0; i < s.length(); i++) {\\n            out.print((char)((s.charAt(i) - 'A' + n) % 26 + 'A'));\\n        }\\n        out.println();\\n    }\\n\\n\\n}\\n\\nclass InputReader {\\n\\n    private final BufferedReader reader;\\n    private StringTokenizer tokenizer;\\n\\n    public InputReader(InputStream stream) {\\n        reader = new BufferedReader(new InputStreamReader(stream));\\n        tokenizer = null;\\n    }\\n\\n    public String nextLine() {\\n        try {\\n            return reader.readLine();\\n        } catch (IOException e) {\\n            throw new RuntimeException(e);\\n        }\\n    }\\n\\n    public String next() {\\n        while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            tokenizer = new StringTokenizer(nextLine());\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public double nextDouble() {\\n        return Double.parseDouble(next());\\n    }\\n\\n}\\n", "target": "13", "substitutes": {"inputStream": ["inputStreamer", " inputThread", " inputSteam", "InputThread", "inputSteam", "addressSteam", " inputStreamer", "outputstream", "outputThread", "addressStreamer", "InputStream", "inputstream", "InputSteam", " inputstream", "InputStreamer", "inputThread", "Inputstream", "addressStream", "outputSteam"], "outputStream": ["inputStreamer", "OutputWriter", "outputFile", "outStream", "externalStream", "outputWriter", "outputStreamer", "inputSteam", "externalStreamer", "outFile", " outputSteam", "OutputStreamer", " outputFile", "OutputFile", "externalWriter", "inputWriter", "OutputSteam", "outSteam", " outputWriter", "externalSteam", "outWriter", "OutputStream", "outputSteam"], "in": ["exec", "din", "pin", "io", "is", "get", "err", "In", "gen", "bin", "arg", "request", "er", "ic", "socket", "diff", "user", "log", "r", "inn", "this", "resource", "ini", "work", "inside", "ins", "image", "inf", "inner", "input", "rin", "rec", "data", "sin", "win", "lock", "read", "min", "l", "init", "conn", "lin", "source", "id", "inc", "d", "path", "gin", "again", "nin", "login", "isin", "connection", "as", "info", "IN", "con"], "out": ["dump", "io", "err", "user", "sync", "outs", "copy", "b", "inner", "data", "session", "page", "lock", "outer", "pool", "global", "left", "OUT", "off", "buffer", "g", "remote", "view", "window", "w", "bin", "string", "raw", "name", "p", "line", "write", "log", "resource", "work", "error", "cache", "extra", "conn", "ex", "o", "at", "output", "pass", "this", "bar", "comment", "input", "init", "x", "inc", "to", "server", "Out", "exec", "list", "file", "parent", "timeout", "client", "group", "exp", "part", "serv", "writer", "prefix", "by", "obj", "point", "other", "again", "v", "key", "up", "net", "temp"], "solver": ["ssolve", "ssolution", "solution", " solution", "Solve", "resolved", "resolve", "Solved", " solve", "Sipper", " solutions", "Solution", "ssipper", "sipper", "ssolver", "Solver", "Solutions", "solved", "solve", " sipper", "resolutions", " solved", "solutions", "resolver"], "mod": ["ms", "mult", "mode", "fun", "loop", "sec", "m", "debug", "max", "port", "order", "min", "cm", "Num", "MOD", "asm", "num", "Mod", "M", "module", "id", "scale", "d", "sim", "seq", " m"], "testNumber": [" testnumber", "TestNumber", "testNum", "TestNumbers", " trialnumber", " trialNumber", " trialNumbers", "testnumber", " testNum", "Testnumber", " testNumbers", "TestNum", " trialNum", "testNumbers"], "n": ["a", "number", "w", "name", "p", "nb", "nt", "m", "j", "r", "ln", "ni", "z", "sn", "b", "N", "nn", "size", "ns", "l", "u", "en", "c", "num", "e", "x", "d", "ng", "len", "nc", "f", "o", "net", "k"], "s": ["comments", "fs", "parts", "qs", "is", "params", "si", "string", "rs", "p", "gets", "gs", "os", "r", "sets", "sv", "js", "abs", "ls", "b", "ds", "ins", "ws", "ss", "ns", "l", "u", "groups", "c", "ses", "e", "opens", "su", "ts", "xs", "states", "S", "ps", "v", "es", "f", "services", "as", "sb", "g", "strings"], "i": ["xi", "gi", "I", "io", "si", "di", "p", "oi", "ii", "hi", "part", "index", "j", "chi", "ni", "z", "mini", "ini", "b", "ai", "phi", "multi", "ji", "li", "ci", "q", "zi", "ri", "qi", "u", "bi", "c", "l", "e", "iu", "eni", "mi", "pi", "x", "yi", "fi", "id", "ip", "uri", "d", "y", "v", "ix", "key", "f", "ui", "o", "info", "start", "k"], "reader": ["per", " Reader", "io", "client", "builder", "handler", "parser", "er", "ner", "result", "loader", "worker", "service", "r", "driver", "null", "resource", "report", "writer", "reading", "manager", "pointer", "input", "inner", "readable", "rer", "row", "lock", "read", "ri", "ruby", "it", "h", "or", "rr", "oder", "source", "ler", "Reader", "rator", "ry", "enter", "buffer", "feed", "server", "auto", "iter"], "tokenizer": ["Tokenization", "Tokenize", "okenizer", "initialiser", "okeniter", "Tokenener", "initializer", "okenizable", " tokenener", "okenizing", "tokenizers", "optimiter", "initialize", " tokenizable", "Tokenizer", "Tokenizable", "tokenener", "okenener", "tokenizable", " tokenizers", " tokenizing", "tokenize", "initialization", " tokenize", "okenizers", "okenization", " tokeniter", "okeniser", "tokenization", "optimizer", "optimize", "Tokenizers", "Tokeniser", "tokeniser", " tokeniser", "Tokeniter", "okenize", "tokeniter", "Tokenizing", " tokenization", "optimization", "tokenizing"], "stream": ["file", "sw", "w", "Stream", "client", "form", "string", "raw", "output", "socket", "m", "loader", "r", "channel", "resource", "document", "response", "writer", "length", "port", "input", "readable", "context", "serial", "data", "row", "object", "lock", "trans", "ream", "pool", "e", "src", "source", "open", "body", "content", "v", "feed", "buffer", "console", "connection", "f", "server", "host", "temp", "view"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws Exception {\\n\\n//    \tFile file = new File(\"test.txt\");\\n//    \tScanner sc = new Scanner(file);\\n    \tScanner sc = new Scanner(System.in);\\n    \tString N = sc.next();\\n    \tsc.close();\\n    \tSystem.out.println(N.contains(\"7\")?\"Yes\":\"No\");\\n    }\\n}", "target": "99", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        int A = scanner.nextInt();\\n        int B = scanner.nextInt();\\n\\n        for (int i = 1 ; i <= 1000 ; i++) {\\n            int eight = (int) (i * 0.08);\\n            int ten = (int) (i * 0.1);\\n            if (eight == A && ten == B) {\\n                System.out.println(i);\\n                return;\\n            }\\n        }\\n\\n        System.out.println(-1);\\n    }\\n}\\n", "target": "121", "substitutes": {"scanner": ["schening", "scaner", "scanzer", " scaninner", "scheker", "nerker", "Scanator", "scheer", " scanzer", "schezer", "nerning", "canner", "Scaner", "Scanner", "nerer", "caninner", "caner", "scanker", "Scanker", " scanning", "canator", "scanning", "Scanzer", " scanator", "scanator", "nerner", "scaninner", " scaner", "Scaninner", "schener", "Scanning"], "A": ["a", "API", "O", "Alpha", "E", "I", "K", "II", "Na", "ONE", "C", "T", "Eight", "AMI", "LA", "AA", "AI", "N", "D", "H", "Y", "NA", "L", "Java", "M", "Az", "X", "The", "S", "P", "F", "Next"], "B": ["E", "I", "BS", "Bal", "Tab", "Bi", "AB", "C", "T", "BF", "Ub", "NB", "SB", "TB", "b", "N", "BC", "GB", "D", "UB", "Y", "DB", "L", "IB", "BA", "OB", "F", "P", "EB", "BB", "BL", "BI", "WB", "Ten", "BER"], "i": ["a", "gi", "xi", "I", "io", "si", "ie", "di", "ami", "p", "oi", "ii", "index", "j", "chi", "t", "ni", "mini", "z", "ini", "isi", "b", "ind", "ai", "in", "multi", "ji", "li", "ti", "ci", "zi", "ri", "qi", "u", "bi", "e", "init", "iu", "eni", "it", "mi", "x", "pi", "yi", "fi", "id", "ip", "uri", "y", "v", "ix", "ski", "f", "ui", "info", "start"], "eight": ["fif", "aunt", "east", "ie", "orient", "equ", "quart", "ffe", "two", "due", "seven", "inth", "equal", "ne", "zero", "Eight", "tie", "entry", "flower", "six", "ded", "fen", "teen", "qi", "invest", "nine", "oct", "element", "three", "odd", "knife", "zen", "cue", "five"], "ten": ["fif", "tri", "numbered", "ien", "feat", "ffe", "vert", "inth", "iron", "forth", "ties", "te", "tie", "een", "into", "den", "fen", "teen", "atten", "oni", "eni", "ele", "tin", "fifth", "ven", "nin", "rent", "tun", "fat", "const", "nir", "ter", "consider", "Ten", "bert", " Ten", "fort"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args)\\n\t{\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint count = scan.nextInt();\\n\t\tint min = 1000000;\\n\t\tint max = -1000000;\\n\t\tlong sum = 0;\\n\t\tint num = 0;\\n\t\tfor(int i = 0;i < count;i++)\\n\t\t{\\n\t\t\tnum = scan.nextInt();\\n\t\t\tsum = sum + num;\\n\t\t\tif(num < min)\\n\t\t\t{\\n\t\t\t\tmin = num;\\n\t\t\t}\\n\t\t\tif(num > max)\\n\t\t\t{\\n\t\t\t\tmax = num;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(min + \" \" + max + \" \" + sum);\\n\t}\\n}", "target": "21", "substitutes": {"scan": ["chan", "pan", "exec", "span", "run", "gen", "search", "n", "ser", "see", "connect", "query", "car", "ner", "log", "sc", "na", "serv", "ln", "sync", "skip", "an", "ann", "fan", "in", "nn", "all", "sin", "san", "sign", "se", "l", "conn", "can", "out", "cat", "feed", "clean", "server", "Scan", "util", "walk", "stat", "reader", "watch", "iter", "parse", "ignore", "gram", "con"], "count": ["number", "list", "ch", "n", "code", "base", "name", "batch", "part", "index", "coll", "conf", "length", "mean", "size", "total", "q", "c", "limit", "id", "cat", "depth", "call", "age", "inc", "Count", "len", "key", "patch", "start", "con"], "min": ["span", "MIN", "minimum", "pos", "lim", "n", "base", "value", "name", "unit", "sort", "amin", "low", "m", "diff", "first", "index", "zero", "mn", "mini", "in", "lower", "mean", "small", "size", "sign", "range", "sin", "date", "Min", "init", "area", "limit", "scale", "pre", "val", "len", "dim", "mins", "start", "mid"], "max": ["parent", "height", "ca", "n", "base", "star", "rank", "name", "cycle", "MAX", "step", "diff", "alpha", "first", "index", "default", "wh", "est", "Max", "work", "conf", "end", "size", "total", "cache", "no", "ax", "q", "c", "ad", "can", "last", "x", "limit", "head", "id", "scale", "right", "mod", "call", "dev", "rest", "act", "mad", "plus", "az", "patch", "from", "view", "start", "wrap", "pad", "ver"], "sum": ["cost", "cal", "pos", "cur", "lim", "um", "bin", "n", "si", "name", "unit", "sort", "alpha", "diff", "average", "help", "first", "index", "ul", "zero", "Sum", "skip", "doc", "conf", "comment", "mean", "cum", "size", "total", "miss", "sign", "use", "u", "init", "am", "su", "tu", "cat", "scale", "inc", "offset", "spread", "len", "fat", "sim", "vol", "up", "summary", "info", "mem", "start", "mask", "norm"], "num": ["nu", "missing", "span", "number", "comb", "nr", "parent", "NUM", "lim", "um", "gen", "n", "non", "name", "unit", "umi", "nb", "result", "home", "mom", "na", "dest", "index", "loc", "ul", "zero", "valid", "digit", "one", "mu", "coord", "mon", "prefix", "dom", "multi", "no", "im", "miss", "iter", "common", "total", "Num", "node", "u", "en", "init", "term", "x", "su", "tu", "id", "nom", "nam", "inc", "nil", "un", "uu", "offset", "uni", "len", "current", "sim", "div", "f", "dim", "net", "temp"], "i": ["gi", "xi", "I", "io", "si", "n", "di", "p", "oi", "ii", "hi", "index", "j", "chi", "ni", "ini", "mu", "ai", "in", "multi", "li", "ti", "ci", "zi", "qi", "u", "bi", "init", "iu", "x", "pi", "id", "ip", "uri", "y", "ix", "uni", "f", "ui", "o", "start"]}}
