{"code": "import java.util.PriorityQueue;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner std = new Scanner(System.in);\\n        int n = std.nextInt();\\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\\n        for (int i = 0; i < n; i++) {\\n            pq.add(std.nextInt());\\n        }\\n\\n        Integer first = pq.poll();\\n        double ans = first;\\n        while (!pq.isEmpty()) {\\n            Integer value = pq.poll();\\n            ans += value;\\n            ans /= 2.0;\\n        }\\n\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "232", "substitutes": {"std": ["pd", "println", " STD", "d", "sf", "through", "standard", "sb", "sg", "dd", "fd", "ser", "sys", "sh", "usr", "sv", "cr", "console", "rand", "sd", "nl", "ctl", "md", "STD", "St", "td", "sw", "hz", "inter", "wd", "ssl", "reader", "cd", "cmd", "sq", "news", "ss", "ast", "sk", "vt", "txt", "obj", "ng", "nd", "rx", "Standard", "ctx", "st"], "n": ["nu", "mn", "num", "d", "nn", "number", "l", "nr", "N", "gn", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "sn", "count", "z", "j", "no", "nb", "na", "nc", "np", "en", "nw", "nm", "ot", "t", "ng", "nd", "network", "ln", "net", "nt"], "pq": ["Pqs", "paqu", "PQ", "cpqu", "Pue", "mpqueue", "pqueue", "jpqs", "cpue", "paquery", "vpue", "pue", "pQ", "npqu", "jpque", "pqu", "paqueue", "vpQ", "mpq", " pquer", " pQ", "pque", " pqu", "cpqs", "paque", "npqs", "mpquery", "jpq", "npQ", " pquery", "pqs", " pque", " pqs", "vpq", "pquery", " pqueue", "Pq", "paq", "npq", "paqs", " pue", "mpquer", "jpqu", "cpQ", "cpq", "paquer", "pquer", "vpqu"], "i": ["q", "I", "ix", "ex", "phi", "gi", "hi", "iu", "ei", "ip", "li", "id", "v", "m", "ini", "err", "ai", "ms", "client", "im", "ind", "qi", "us", "init", "u", "io", "z", "j", "bi", "it", "ui", "is", "ie", "pi", "g", "ti", "ic", "ci", "sim", "my", "cli", "multi", "t", "p", "gu", "y", "ii", "si", "di", "x", "mi"], "first": ["st", "before", "master", "current", "pre", "total", "now", "ref", "latest", "summary", "stat", "top", "sum", "small", "mean", "self", "act", "start", "then", "index", "min", "count", "sort", "single", "init", "prev", "full", "primary", "only", "First", "quick", "cost", "max", "alpha", "ma", "average", "last", "second", "initial", "next"], "ans": ["gs", " means", "ents", "acs", "uns", "ons", "eps", "vals", "aus", "rs", "anks", "ums", "outs", "ores", "ns", "ads", "ks", "asks", "asts", "artifacts", "beans", "ands", "os", "can", "yes", "ms", "ids", "arts", "ANS", "amps", "ats", "ants", "ls", "an", "ows", "sts", "vs", "ams", " spans", "cs", "orts", "sets", "ines", "ages", "ins", "vers", "ds", "aps", "as", "s", "posts", "lets", "rans", "lan", "offs", "ars", "ann"], "value": ["result", "key", "current", "number", "feature", "entry", "total", "latest", "v", "word", "default", "pair", "family", "get", "val", "random", "hello", "index", "test", "field", "component", "bottom", "property", "ue", "child", "vector", "json", "record", "values", "widget", "step", "input", "sample", "VALUE", "Value", "last", "example", "rule", "second", "function", "see"]}}
{"code": "import java.util.*;\\n \\npublic class Main\\n{\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint a=sc.nextInt();\\n\t\tint b=sc.nextInt();\\n\t\tint c=sc.nextInt();\\n\t\t\\n\t\tint d=0,e=0,f=0;\\n\t\t\\n\t\td=Math.abs(a-b);\\n\t\te=Math.abs(c-b);\\n\t\tf=Math.abs(a-c);\\n\t\tint aa=Math.max(d,e);\\n\t\tSystem.out.println(Math.max(aa,f));\\n\t}\\n}", "target": "247", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "Sync", "sb", "sec", "cgi", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "inc", " scr", "dc", "ck", "ctl", "ko", "cle", "sch", "Desc", "sw", "se", "sync", "tc", "ctrl", "scan", "sq", "cs", "ss", "nc", "osc", "cmp", "Sc", "gc", "scl", "asc", "scope", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "st"], "a": ["ae", "va", "r", "ca", "ar", "oa", "o", "ta", "da", "app", "sa", "al", "ak", "ai", "act", "A", "at", "ia", "an", "la", "ao", "ab", "pa", "ea", "apa", "aria", "ba", "aj", "w", "ma", "as", "t", "p", "ac", "au", "ra", "am"], "b": ["r", "ob", "l", "o", "bc", "v", "n", "m", "db", "bs", "eb", "u", "fb", "z", "j", "bi", "ib", "ab", "i", "g", "ba", "t", "p", "bb", "cb", "be", "y", "rb", "ch", "B"], "c": ["r", "ca", "lc", "cc", "l", "chain", "cond", "o", "h", "bc", "n", "ce", "v", "m", "ec", "fc", "u", "tc", "z", "div", "ab", "C", "i", "cs", "g", "cm", "ci", "com", "t", "etc", "p", "ac", "s", "cb", "be", "ch"], "d": ["dh", "D", "r", "dm", "dec", "df", "l", "fd", "dd", "dos", "deb", "n", "m", "da", "ad", "dr", "dc", "dn", "md", "dig", "bd", "z", "dev", "dra", "cd", "days", "dx", "i", "div", "done", "ds", "diff", "t", "def", "p", "nd", "dis", "ld", "dt", "di", "del", "dp"], "e": ["ae", "oe", "ee", "E", "el", "ei", "o", "ep", "eg", "ce", "v", "ec", "ef", "eed", "east", "eb", "u", "ent", "ue", "ed", "ie", "ea", "est", "eu", "et", "en", "ell", "eff", "er", "em", "exc", "eeee"], "f": ["r", "alf", "ee", "sf", "df", "fi", "l", "fd", "uf", "rf", "ff", "h", "o", "v", "m", "n", "fo", "tf", "xf", "ef", "fe", "af", "fp", "fs", "fc", "u", "fb", "z", "j", "i", "fed", "fl", "fa", "fr", "t", "p", "lf", "fm"], "aa": ["ae", "AA", " va", "ava", "rr", "ca", "ee", "aaaa", "aq", "oa", "qa", "ta", "da", "sa", "ama", "Va", "ua", "adi", "ja", "ela", "af", "la", "ga", "xa", "pa", "ea", "area", "apa", "ba", "aaa", "na", "aka", "ral", "aj", "fa", "nda", "ds", "alpha", "ma", "ac", "ii", "va"]}}
{"code": "\\nimport java.util.*;\\nimport java.io.*;\\n\\n/**\\n * @author AnonymousP\\n * @__WHEN YOU FEEL LIKE QUITTING, THINK ABOUT WHY YOU STARTED__@\\n */\\n//COMBINATON = nCr = n*(n-1)/2\\npublic class Main{\\n\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        PrintWriter out = new PrintWriter(System.out);\\n        String s = sc.next();\\n        int ans = 0;\\n        /*\\n         i=======j\\n         0 ----> 1,2,3 (3-0)\\n         1 ----> 2,3   (3-1)\\n         2 ----> 3     (3-2)\\n         (s.length()-i)\\n        \\n         s.length()==4\\n         i<3(s.length()-1)\\n         j<s.length()-i\\n        \\n        \\n         */\\n        for (int i = 0; i < s.length() - 1; i++) {\\n            for (int j = 1; j < s.length() - i; j++) {\\n                //    System.out.println(i+\" \"+(j));\\n                //HAVE A LOOK HERE COMMMENT LINE//\\n                //    System.out.println(i+\" \"+(i+j));\\n\\n                if (s.charAt(i) == s.charAt(i + j)) {\\n                    ans++;\\n                }\\n            }\\n        }\\n        if (ans == 2) {\\n            out.println(\"Yes\");\\n            out.flush();\\n        } else {\\n            out.println(\"No\");\\n            out.flush();\\n        }\\n    }\\n\\n    //************************************************************************//\\n//CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_CLASS_//\\n//*******FAST IO*************FAST IO***************FAST IO****************//\\n    static class FastReader {\\n\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n   //*******FAST IO*************FAST IO***************FAST IO****************//\\n}\\n", "target": "33", "substitutes": {}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\\n    public static void main(String[] args){\\n\\n\tScanner sc = new Scanner(System.in);\\n\\n\tint N = sc.nextInt();\\n\\n\tint[] B = new int[N-1];\\n\\n\tfor(int i=0; i<N-1; i++){\\n\\n\tB[i] = sc.nextInt();\t\\n\\n  }\\n\\n\tint[] A = new int[N];\\n\\n\tfor(int i=0; i<N-2; i++){\\n\\n\tif(B[i]==B[i+1]){\t\\n\\n\tA[i+1] = B[i];\\n\\n  }\t\\n\\n\telse if(B[i]<B[i+1]){\\n\\n\tA[i+1] = B[i];\\n\\n  }  \\n\\n\telse if(B[i]>B[i+1]){\\n\\n\tA[i+1] = B[i+1];\\n\\n  }\\n\\n }\\n\\n\tA[0] = B[0];\\n\\n\tA[N-1] = B[N-2];\\n\\n\tint ans = 0;\\n\\n\tfor(int i=0; i<N; i++){\\n\\n\tans += A[i];\\n\\n   }\\n\\n\tSystem.out.println(ans);\\n\\n }\\n}", "target": "240", "substitutes": {"sc": ["usc", "sac", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "cr", "bc", "sv", "sp", "inc", "capt", "cle", "spec", "sch", "sw", "se", "sync", "tc", "scan", "si", "sq", " Sc", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "N": ["D", "I", "Z", "TN", "F", "FN", "ND", "NUM", "SIZE", "SN", "NP", "NE", "NB", "n", "NV", "Size", "EN", "O", "S", "Ni", "OUT", "P", "NG", "REM", "NO", "NL", "T", "R", "NS", "Q", "MAN", "NR", "V", "M", "NH", "None", "AN", "GN", "NC", "IT", "Sn", "C", "UN", "NN", "Num", "Y", "L", "NA", "J", "K", "NOR", "Net", "NOTE", "Name", "NAT", "NI", "NT", "KEY", "Ns"], "B": ["PB", "I", "WB", "BB", "LB", "TB", "BI", "BL", "RB", "BT", "Builder", "BM", "Buffer", "USB", "BG", "DB", "BW", "BU", "VB", "NB", "GB", "G", "Big", "T", "MB", "IB", "BR", "b", "BC", "BE", "V", "BY", "BS", "Boot", "H", "BO", "Block", "AB", "Be", "Y", "L", "Bar", "Beta", "Other", "EB", "BA", "OB", "Bern", "SB", "Base", "Bytes", "FB"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "go", "f", "ims", "is", "ic", "c", "e", "ami", "y", "oi", "di", "ri", "fi", "chain", "ip", "ji", "point", "id", "ij", "in", "client", "ori", "a", "io", "bi", "it", "um", "g", "ci", "sim", "cli", "ii", "phi", "hi", "php", "progress", "dr", "item", "this", "print", "ni", "ind", "list", "u", "\u0438", "status", "pi", "iso", "xi", "si", "mi", "I", "name", "key", "gi", "iy", "entry", "v", "m", "ini", "err", "by", "im", "qi", "b", "us", "init", "j", "ity", "umi", "ui", "ie", "uri", "ti", "multi", "iter", "info", "to"], "A": ["AA", "I", "Array", "MA", "App", "AU", "E", "Alpha", "CA", "Action", "AE", "AC", "HA", "Art", "The", "All", "Av", "At", "As", "SA", "G", "P", "Ar", "And", "IA", "a", "GA", "V", "JA", "M", "AH", "API", "This", "AN", "AV", "AL", "ACC", "H", "AP", "One", "AM", "C", "U", "AB", "An", "Ag", "NA", "AI", "Add", "Other", "AR", "L", "EA", "Answer", "Area", "BA", "AF", "ACT", "AT"], "ans": ["checks", "acs", "ents", "uns", "ros", "ons", "eps", "nets", "vals", "aus", "rs", "names", "ums", "reads", "outs", "anks", "eds", "ns", "ads", "ks", "ran", "ends", "can", "ms", "lines", "ids", "arts", "ANS", "ys", "amps", "ats", "ens", "ants", "ls", "an", "ows", "AN", "ann", "is", "cs", "ins", "aps", "ds", "as", "posts", "ots", "xs", "rans", "ars", " scans"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tACGT acgt = new ACGT(s);\\n\t\tint ans = acgt.calcACGT();\\n\t\tSystem.out.println(ans);\\n\t}\\n\t\\n}\\n\\nclass ACGT {\\n\tString s;\\n\tpublic ACGT(String s) {\\n\t\tthis.s = s;\\n\t}\\n\tint calcACGT() {\\n\t\tint length = 0;\\n\t\tint longest = 0;\\n\t\tfor (int i = 0; i < s.length(); i++) {\\n\t\t\tif (isACGT(s.charAt(i))) {\\n\t\t\t\tlength++;\\n\t\t\t} else {\\n\t\t\t\tlongest = Math.max(length, longest);\\n\t\t\t\tlength = 0;\\n\t\t\t}\\n\t\t}\\n\t\treturn Math.max(length, longest);\\n\t}\\n\tboolean isACGT(char c) {\\n\t\tswitch (c) {\\n\t\tcase 'A':\\n\t\tcase 'C':\\n\t\tcase 'G':\\n\t\tcase 'T':\\n\t\t\treturn true;\\n\t\t}\\n\t\treturn false;\\n\t}\\n}\\n", "target": "100", "substitutes": {"sc": ["uc", "lc", "cc", "esc", "rs", "sec", "cl", "sys", "bc", "sv", "cr", "sp", "ec", "nl", "cle", "sch", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "osc", "txt", "Sc", "gc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "s": ["gs", "r", "sf", "sb", "l", "rs", "abs", "sys", "h", "ns", "o", "sv", "sp", "n", "m", "v", "strings", "sd", "source", "in", "su", "bs", "ws", "S", "os", "ms", "its", "sn", "ys", "sw", "ats", "str", "less", "se", "b", "a", "sl", "fs", "ls", "es", "ies", "sing", "string", "sts", "is", "ts", "sq", "cs", "g", "ss", "ments", "js", "ins", "ds", "txt", "gets", "e", "sam", "t", "p", "ses", "qs", "y", "ps", "xs", "stats", "conv", "hs", "st"], "acgt": [" acGT", "ACgr", "acnt", "ACGT", "macgent", " acg", "accnt", "accgt", "acgr", "macg", " acgr", "accGT", "acGT", "ACg", "macgt", "ACgent", " acnt", "macGT", "ACnt", "acg", "acgent", "accgr", "ACgt", " acgent"], "ans": ["uns", "ons", "pan", "anas", "reads", "names", "anks", "oss", "eds", "ns", "ads", "ks", "asts", "ces", "can", "ms", "lines", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "aned", "an", "ols", "AN", "angs", "aos", "anes", " spans", "ations", "ins", "arms", "books", "ions", "annot", "as", "rans", "anned", "lan", "ars", "ann"], "length": ["loc", "d", "row", "shift", "number", "impl", "level", "shape", "collection", "history", "left", "trace", "data", "order", "padding", "all", "library", "term", "frequency", "maximum", "l", "len", "transform", "start", "count", "code", "match", "sequence", "full", "idth", "ength", "capacity", "Length", "rows", "result", "end", "phi", "version", "php", "value", "speed", "database", "lib", "ind", "list", "string", "json", "angle", "depth", "height", "ENGTH", "name", "character", "position", "total", "needed", "dimension", "distance", "width", "minimum", "bus", "index", "load", "buffer", "lower", "range", "component", "est", "text", "display", "max", "duration", "integer", "char", "size", "time"], "longest": ["lonest", " longested", " longests", "lonst", "lenEST", "fulgest", "shortEST", "shortested", " longEST", "lonested", "lenested", "lonen", " longer", "shortest", "longer", "lonth", "largegest", "fulen", "longEST", "longests", "highest", "largest", "largeth", "shorter", "longen", " longth", " longen", "lenest", "highEST", "shortests", "fulested", " longgest", "longst", "lener", "highests", "longth", " longst", "largeest", "highested", "fulest", "longested", "longgest"], "i": ["q", "I", "ix", "ex", "ri", "key", "phi", "gi", "hi", "iu", "zi", "ogi", "ei", "base", "ip", "ji", "li", "o", "id", "v", "m", "me", "ini", "print", "ai", "ki", "im", "ind", "qi", "ori", "us", "u", "\u0438", "j", "bi", "it", "ui", "is", "uri", "ie", "pi", "ti", "ci", "sim", "my", "cli", "multi", "y", "oi", "ii", "xi", "si", "di", "x", "mi"], "c": ["arc", "uc", "r", "lc", "ca", "cc", "col", "l", "h", "bc", "v", "m", "ce", "cp", "ch", "dc", "n", "unc", "cu", "a", "b", "f", "fc", "u", "tc", "z", "C", "vc", "g", "k", "abc", "ic", "ct", "e", "w", "t", "p", "ac", "pc", "x"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n    \tScanner sn = new Scanner(System.in);\\n        Long a = sn.nextLong();\\n      \tLong b = sn.nextLong();\\n      \tLong c = sn.nextLong();\\n      \tLong d = sn.nextLong();\\n        Long max1 = (Long) a * c; \\n      \tLong max2 = (Long) a * d;\\n      \tLong max3 = (Long) b * c;\\n      \tLong max4 = (Long) b * d;\\n      \tLong max11 = Math.max(max1, max2);\\n      \tLong max22 = Math.max(max3, max4);\\n      \tSystem.out.println(Math.max(max11, max22));\\n    }\\n}\\n", "target": "244", "substitutes": {"sn": [" si", " sv", "snap", "nn", "sb", " ss", "nr", "sol", "SN", "gn", "sys", "ns", "sv", "sp", "n", "soc", "sd", "sa", " SN", " sk", "cn", " sh", "wn", " sw", "nl", "bn", " Sn", "kn", "ksh", "sw", "hon", " sm", "sl", "ssl", "ann", " cs", "sq", "Sn", "rem", "wr", "fn", " sl", "rn", "syn", "sk", "tn", "js", "ng", "scl", "ny", "ln", "nex", "ctx", "oti", "nt", "sr", "jl"], "a": ["ae", "r", "ca", "ar", "l", "oa", "ta", "n", "aa", "da", "sa", "al", "ai", "isa", "le", "act", "at", "A", "f", "ia", "an", "la", "ga", "ao", "xa", "ab", "ea", "ba", "alpha", "ma", "t", "as", "ac", "au", "va", "am"], "b": ["r", "ob", "l", "h", "bc", "n", "v", "aa", "db", "m", "bl", "ub", "f", "u", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "e", "w", "t", "bb", "cb", "y", "be", "rb", "B"], "c": ["r", "ca", "lc", "col", "cc", "con", "l", "co", "cf", "bc", "cr", "n", "ce", "cp", "unc", "dc", "can", "cu", "f", "fc", "tc", "z", "cd", "sc", "C", "cs", "g", "cm", "ci", "com", "e", "ct", "ac", "cb", "rc", "ch"], "d": ["dat", "D", "dh", "r", "dec", "df", "l", "dd", "red", "o", "de", "n", "da", "ad", "dr", "db", "dc", "sd", "rd", "du", "ctl", "bd", "f", "z", "dev", "dra", "div", "g", "done", "ds", "e", "w", "t", "s", "dt", "di", "dp"], "max1": ["ext01", "core41", "extA", "map01", " max01", " max41", "ext1", " maxA", "scale1", "core1", "mapA", "map2", "map1", " max0", "max0", "core11", "scale41", "ext2", "core0", "max41", "maxA", "scale0", "max01", "scale11"], "max2": ["root2", "rootb", "ax2", "axTwo", "core2", "maxTwo", "expTwo", "core4", "root22", "coreb", " maxb", "root4", " maxTwo", "exp2", "core22", "ax3", "maxb", "exp3"], "max3": ["scale2", "maxd", "scaled", "view2", " max5", "scale3", "view3", "view11", "MAX03", "viewd", " maxd", " max03", "MAX3", "MAX5", "MAX4", "Max03", "max03", "Max3", "Max5", "scale11", "Max4", "max5"], "max4": ["range5", "right94", "resource94", "Maxfour", "right22", "resource22", "MAX94", "Max22", "maxfour", "range22", "resource4", "max12", "MAX12", "MAX22", "MAX4", "resource12", "right4", "rank5", "right12", "rankfour", "rangefour", "rank4", "max94", "Max5", "Max4", "max5", "rank22", "range4"], "max11": ["med11", "ax101", " max12", "view10", "med12", "ax1", "ax11", "max10", "view11", "ax18", "max12", " max101", "ax10", "view18", "ax12", "view71", "check11", "max71", "med101", "check10", "max18", "check18", "check71", "max101", "med1", "ax71"], "max22": ["max23", "max212", "cache222", "last22", "core23", "max222", "last23", "max82", "ax82", "dot22", "cache82", "dot23", "ax222", "ax23", "dot222", "core22", "cache23", "last212", "dot212", "core222", "ax22", "ax212", "last222", "core82", "cache22"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tFastReader sc = new FastReader();\\n\t\tint n = sc.nextInt();\\n\t\tint[] lengths = new int[n];\\n\t\tint maxLengths = 0;\\n\t\tint sumLengths = 0;\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint length = sc.nextInt();\\n\t\t\tmaxLengths = Math.max(maxLengths, length);\\n\t\t\tsumLengths += length;\\n\t\t}\\n\t\t\\n\t\tif ((sumLengths - maxLengths) > maxLengths) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n\t\\n\tstatic class FastReader { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() { \\n            br = new BufferedReader(new InputStreamReader(System.in)); \\n        } \\n  \\n        String next() { \\n            while (st == null || !st.hasMoreElements()) { \\n                try { \\n                    st = new StringTokenizer(br.readLine()); \\n                } catch (IOException  e) { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() { \\n            String str = \"\"; \\n            try{ \\n                str = br.readLine(); \\n            } catch (IOException e) { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n}\\n", "target": "25", "substitutes": {"sc": ["uc", "lc", "cc", "esc", "sec", "qu", "cl", "sys", "sh", "bc", "cr", "sv", "dc", "ctl", "ec", "ms", "sch", "sync", "fc", "tc", "ctrl", "cv", "sq", "cs", "ss", "nc", "c", "osc", "ct", "Sc", "gc", "icc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "ch", "desc"], "n": ["nu", "mn", "num", "r", "d", "ll", "nn", "l", "number", "nr", "len", "N", "o", "ns", "m", "v", "ne", "nan", "cn", "sn", "count", "z", "j", "no", "nb", "nc", "na", "k", "np", "c", "nw", "e", "ng", "t", "p", "s", "nd", "ln", "network", "y", "net", "size", "nt", "x"], "lengths": ["inputls", "lengthls", "Lengthls", "longls", "inputS", "lengthS", "longS", "longs", "inputs", "LengthS", "Lengths"], "maxLengths": ["sumLengthes", "maxLenes", "maxLevels", "maxWidthies", "maxLenls", "sumLengthers", " maxLens", " maxPaths", " maxPathls", "maxLenn", "maxLes", "axlengthls", "axLengthls", " maxLenn", "axLengths", "sumWidthls", "sumWidthers", "axlengths", " maxLengthls", "maxLens", "axlengthts", "sumWidths", "maxLengthn", "maxPaths", "maxForms", "sumlengthls", "sumlengths", "maxFormts", "maxWidthls", "sumWidthies", "maxWidths", "sumLengthies", "maxLengthies", "maxLengthls", "sumlengthes", " maxPathes", "axLengthers", " maxLenes", "maxlengthies", "maxLents", "axlengthers", "maxFormls", "maxLeveln", " maxLengthn", "maxLeveles", "maxLengthts", "maxlengths", "maxlengthts", "maxPathes", " maxLengthes", "sumLengthls", "maxlengthls", "maxFormers", "maxLs", "maxPathls", "maxLengthes", "maxWidthers", "maxlengthes", "maxLengthers", "maxLn", "axLengthts", "maxFormes", "maxLeners", "maxlengthers"], "sumLengths": ["sumWidthes", "sumLengthes", "cumLongls", "cumLongs", "sumlengthls", "sumlengths", "sumLengthls", "sumLenls", "sumCountjs", "sumCountls", "maxlengthls", "umLengths", "sumENGTHss", "umLenjs", "umLenss", "umLengthss", "sumlengthd", "sumLenes", "maxLengthes", "cumLengthls", "sumLengthd", "cumLengths", "sumENGTHs", "sumLengthss", "sumCountes", "sumCountd", "sumLongs", "maxlengthes", "sumWidthls", "maxLengthd", "sumPathd", "umLengthjs", "sumLenss", "cumLengthes", "sumPathes", "sumPaths", "maxLengthls", "sumCountss", "sumlengthes", "sumPathls", "sumLonges", "sumENGTHjs", "cumLonges", "umLens", "sumCounts", "sumLengthjs", "maxlengths", "sumLens", "sumLenjs", "maxlengthd", "sumLongls", "sumWidths"], "i": ["q", "I", "ix", "ex", "mill", "phi", "ip", "point", "li", "id", "m", "me", "batch", "ai", "ms", "im", "ind", "qi", "inter", "index", "us", "init", "io", "z", "j", "it", "ui", "is", "ie", "pi", "g", "ti", "ic", "ci", "sim", "my", "e", "multi", "t", "iter", "p", "er", "iq", "y", "ii", "di", "x", "mi"], "length": ["ENGTH", "block", "ment", "token", "character", "row", "maximum", "position", "number", "l", "len", "point", "total", "value", "stroke", "word", "distance", "required", "ade", "width", "start", "ind", "shape", "count", "index", "load", "type", "match", "sequence", "string", "full", "text", "rest", "ength", "duration", "style", "angle", "t", "integer", "p", "padding", "Length", "size", "time", "library", "height", "term"], "br": ["r", "ctr", "next", "bro", "shr", "bsp", "vr", "bc", "cr", "ber", "kr", "dr", "bh", "tr", "bridge", "Tr", "bre", "sp", "bl", "bs", "bn", "bp", "brace", "Br", "mr", "buf", "BR", "b", "bd", "lr", "ibr", "hr", "bm", "pr", "wr", "bt", "rel", "jp", "fr", "rb", "gr"], "st": ["pt", "l", "cl", "rt", "sh", "sv", "sp", "tmp", "tr", "stat", "bl", "ste", "lo", "nt", "St", "sn", "sw", "ut", "start", "se", "ist", "sm", "sl", " superst", "inst", "const", "z", "ost", "stack", "sts", "sty", "it", "pr", "est", "rest", "et", "ast", "bt", "std", "step", "mt", "ct", "e", "fr", "t", "nd", "p", "ft", "stable", "be", "th", "ust", "ST"], "str": ["r", "result", "ctr", "STR", "next", "cur", "shr", "del", "ns", "cr", "sp", "v", "dr", "tr", "msg", "raw", "seq", "print", "ret", "enc", "pse", "inst", "buffer", "arr", "sequence", "dist", "j", "ent", "string", "Str", "div", "cont", "text", "data", "rec", "vol", "txt", "e", "out", "fr", "exp", "t", "s", "char", "p", "res"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = Integer.parseInt(scanner.nextLine());\\n\\n        int tPrev = 0;\\n        int xPrev = 0;\\n        int yPrev = 0;\\n        for (int i = 0; i < n; i++) {\\n            String[] txy = scanner.nextLine().split(\" \", 3);\\n            int t = Integer.parseInt(txy[0]);\\n            int x = Integer.parseInt(txy[1]);\\n            int y = Integer.parseInt(txy[2]);\\n\\n            int tDiff = t - tPrev;\\n            int xDiff = Math.abs(x - xPrev);\\n            int yDiff = Math.abs(y - yPrev);\\n\\n            int remainingTime = tDiff - xDiff - yDiff;\\n            if (remainingTime < 0 || remainingTime % 2 != 0) {\\n                System.out.println(\"No\");\\n                return;\\n            }\\n\\n            tPrev = t;\\n            xPrev = x;\\n            yPrev = y;\\n        }\\n        System.out.println(\"Yes\");\\n    }\\n}\\n", "target": "221", "substitutes": {"scanner": ["canener", " scanener", " Scaner", " Scanner", " Scanener", "Scanter", "scanener", "Scanener", "Scaner", "scanter", " Scanter", "canter", " scanter", "Scanner", "canner", "scaner", " scaner", "caner"], "n": ["nu", "num", "mn", "name", "d", "nn", "l", "number", "N", "total", "o", "ns", "m", "ne", "nan", "nl", "ni", "sn", "on", "an", "j", "no", "nb", "na", "nc", "k", "np", "en", "c", "ng", "p", "network", "ln", "net", "nt"], "tPrev": ["htPtr", "ttPrev", "ttInit", " tBefore", "TRev", "yNav", " tNext", "tNext", "yPrevious", "tBefore", "TNext", "tHead", "htHead", "tInit", " tPrevious", " tPtr", "ttNav", " tRev", "xRev", " tInit", " tHead", "tNav", "xHead", "yInit", "tRev", "htPrev", "ttPrevious", "tPtr", "xNext", "TPrev", "htDiff", " tNav", "xBefore", "tPrevious", "xPtr", "TBefore"], "xPrev": ["xPre", "exRev", "xInit", "ixPtr", " xPtr", " xRev", "wxPrevious", " xPre", "wxPtr", "exPrev", "wxPrev", "ixPre", " xInit", "dxRev", "ixRev", "exPtr", "wxInit", "xRev", "xPrevious", "ixPrev", "dxPtr", "exPrevious", "dxPrev", "exInit", "dxPre", "ixPrevious", " xPrevious", "xPtr"], "yPrev": ["yVar", " yVar", "yNeg", "eyNext", "nyVar", "nyPrev", "nyPrevious", " yGov", "yPrevious", "xNeg", "xVar", "nyNeg", "xCur", "xGov", "eyPrevious", " yRev", " yPrevious", "yRev", "xRev", "nyNext", "eyPrev", "xPrevious", "yNext", "nyCur", "xNext", "yCur", " yCur", "yGov", " yNeg", "nyRev", " yNext", "eyGov"], "i": ["set", "q", "I", "ix", "sql", "phi", "zi", "iu", "ip", "li", "id", "m", "me", "ini", "batch", "ai", "im", "ind", "qi", "a", "index", " j", "us", "init", "u", "j", "bi", "it", "ui", "ie", "is", "pi", "g", "ti", "ic", "ci", "sim", "multi", "iq", "gu", "ii", "xi", "si", "di", "mi"], "txy": ["tXY", " tfy", "pfy", "tphoto", "Tfo", " tpy", "treebis", "treepy", "wtjson", "treexy", "otxy", "ozip", "pxy", "ttpy", "ophoto", " tjson", "twy", "wtxy", "ttbis", "wtXY", "ttfy", " ttry", "TXY", "treephoto", "ttry", " tzip", "ottry", "pbis", "tbis", "ttphoto", " tphoto", "otry", "ttxy", " tXY", " tfo", "tjson", "Tjson", "pwy", "tzip", "otphoto", " twy", "otzip", "wtfo", "ttwy", "oxy", "Txy", "tpy", "tfo", "tfy", " tbis"], "t": ["q", "r", "name", "pt", "d", "wt", "l", "o", "h", "ta", "rt", "v", "m", "tr", "tt", "T", "at", "b", "f", "type", "u", "tc", "z", "j", "ts", "g", "k", "qt", "typ", "c", "ct", "ot", "out", "w", "s", "p", "te", "dt", "ty", "tu"], "x": ["r", "ix", "ex", "wx", "l", "ox", "o", "m", "v", "ch", "xf", "lat", "xy", "tx", "xe", "xx", "f", "on", "px", "u", "xc", "z", "xa", "dx", "g", "xt", "mx", "en", "c", "w", "X", "p", "rx", "ux", "xs", "xi", "xp", "fx"], "y": ["ye", "sy", "ym", "iy", "l", "o", "h", "py", "m", "v", "ch", "ay", "ey", "uy", "cy", "xy", "ys", "ya", "b", "a", "ry", "yy", "ies", "z", "j", "yt", "vy", "oy", "axy", "sky", "c", "Y", "yi", "ot", "yr", "ny", "p", "ty", "yo"], "tDiff": ["yAdjust", "xAdjust", "lDifferent", "nDelta", "wtDiff", "nShift", "xShift", "yShift", "nDiff", " tShift", " tDelta", "wtAdjust", "lDiff", "tDelta", "nDifferent", "ydiff", "tShift", "tdiff", "lShift", "wtShift", "lDelta", "xdiff", "tAdjust", "tDifferent", " tDifferent", "wtdiff"], "xDiff": ["ixDiff", "rxDiff", "ixDev", "ixDef", " xBoth", "xDev", " xChange", "exDelta", " xDef", "xBoth", "exBoth", "rxDev", "ixDelta", "xChange", " xDelta", "exDiff", "exDef", "xDef", "ixChange", "rxBoth", "ixBoth", "xDelta", " xDev", "rxChange"], "yDiff": [" yDifferent", "yyLength", "zDifferent", "ynDiff", "zRel", "yySplit", "yDef", "nyDef", "ynSplit", "nyLength", "yyDiff", "yyRel", " yRel", "ySplit", "yDifferent", "zDiff", "nyDiff", "ynDef", "nySplit", "zDef", "yRel", " yDef", "yyDef", "yLength", "ynLength", "yyDifferent"], "remainingTime": ["remainingTim", "removalDuration", "remainingTimes", "renainedDuration", "remainTIME", "rainingTimeout", " remingTime", "remworkingTime", "remingTime", "renainingDuration", "removingTim", "renainedMemory", "remainedTime", "rainingTimes", "rainedTimeout", "remingTimes", "removalTim", "rainedTimes", "remainTimeout", "remainTime", "remainTimes", "remainedTim", "remainingDuration", "remainingTIME", "remappingTime", "renainingTim", "remworkingTimes", "remainingMemory", "removalTime", " remingTIME", "renainingMemory", " remainingTIME", "removingMemory", "remingTIME", "remainedMemory", "removalMemory", "remappingTimes", "renainedTim", "removingDuration", "remainedTimes", "removingTime", " remingTimes", "remappingTimeout", "rainingTime", "remworkingTIME", "remainedDuration", "renainingTime", "renainedTime", " remainingTimes", "remainedTimeout", "rainedTime", "remainingTimeout"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String arg[]) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint C = sc.nextInt();\\n\t\tint D = sc.nextInt();\t\\n\t\tsc.close();\\n\t\t\\n\t\tSystem.out.println(subAbs(A, B, C, D));\\n\t}\\n\t\\n\tpublic static int subAbs(int A, int B, int C, int D){\\n\t\tint sub = Math.min(B, D) - Math.max(A, C);\\n\t\tif( sub > 0) {\\n\t\t\treturn sub;\\n\t\t}else {\\n\t\t\treturn 0;\\n\t\t}\\n\t}\\n}", "target": "47", "substitutes": {"arg": [" test", "name", " cmd", "nil", " argument", "v", " targ", "GV", "str", "__", " prog", " rest", " Arg", " path", " Argument", "argument", "Args", "command", " ar", " command", " larg", "Arg"], "sc": ["usc", "arc", "uc", "lc", "acc", "cc", "anc", "esc", "hl", "sec", "cl", "sys", "sh", "bc", "sv", "sp", "cr", "inc", "dc", "ck", "nl", "ko", "ctl", "capt", "sch", "go", "cam", "sw", "fc", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "pb", "c", "syn", "osc", "cmp", "jp", "Sc", "gc", "ng", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch"], "A": ["AA", "Array", "App", "AU", "E", "Alpha", "CA", "AE", "AC", "HA", "Ax", "Av", "At", "As", "SA", "G", "S", "P", "Ar", "IA", "R", "a", "GA", "LA", "JA", "M", "AH", "This", "Ant", "AL", "AV", "H", "ACA", "AP", "ACC", "AB", "An", "AS", "L", "RA", "AR", "X", "Al", "AD", "BA", "mA", "AF", "AT"], "B": ["WB", "BB", "LB", "TB", "BI", "BL", "RB", "E", "BM", "BW", "BG", "DB", "N", "BU", "Ber", "VB", "NB", " b", "Reb", "GB", "G", "S", "Bi", "FB", "T", "IB", "BF", "R", "BR", "b", "BC", "BE", "V", "M", "BD", "CB", "BS", "Bitcoin", "BO", "AB", "Be", "Y", "L", "Bu", "EB", "BA", "OB", "Blue", "Bs"], "C": ["Con", "CS", "F", "CM", "E", "CE", "CA", "N", "AC", "CW", "FC", "CT", "KC", "CCC", "G", "S", "CF", "DC", "T", "R", "Cu", "BC", "V", "Co", "M", "Ch", "CG", "CBS", "CV", "CB", "CI", "CH", "U", "CD", "CC", "VC", "CR", "c", "Y", "L", "GC", "JC", "Cos", "Cs", "CN", "Car", "SC", "EC", "YC", "CNN"], "D": ["DIR", "Z", "DD", "F", "d", "Dr", "E", "Daniel", "DOS", "Red", "Body", "DB", "N", "PD", "Del", "LD", "DA", "DI", "O", "G", "Ds", "S", "DC", "P", "FD", "T", "DM", "R", "Q", "MD", "V", "Def", "M", " d", "W", "DF", "YD", "H", "DE", "U", "CD", "Y", "L", "DR", "DS", "AD", "Do", "Dir", "DP"], "sub": ["set", "num", "offset", "low", "sb", "un", "pre", "sec", "cond", "abs", "total", "deb", "admin", "bc", "imp", "tmp", "control", "sd", "su", "change", "special", "sum", "high", "section", "lib", "val", "SU", "ub", "b", "min", "job", "sing", "UB", "sup", "repl", "remove", " unsub", "sq", "div", "submit", "length", "mod", "fun", "rel", "sim", "Sub", "supp", "diff", "sam", "pred", "add", "second", "desc"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nclass Main {\\n\tpublic static void main(String[] args) throws IOException {\\n \\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringBuffer sb = new StringBuffer();\\n \\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\\n        char[] mojiList = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\\n        \\n        for(char key : mojiList) {\\n           map.put(key, 0);\\n        }\\n        \\n        String input;\\n        \\n        while((input = br.readLine()) != null) {\\n            char[] strList = input.toLowerCase().toCharArray();\\n            for(char moji : strList) {\\n                if(map.containsKey(moji)) {\\n                    map.put(moji, map.get(moji) + 1);\\n                }\\n            }\\n        }\\n \\n        for(char moji : mojiList) {\\n            System.out.println(moji + \" : \" + map.get(moji));\\n        }\\n    }\\n}", "target": "242", "substitutes": {"br": ["r", "ctr", "bro", "bc", "cr", "ber", "kr", "dr", "bf", "tr", "bh", "bl", "bs", "ocr", "bn", "bp", "Br", "mr", "buf", "str", "BR", "b", "lr", "io", "reader", "hr", "bi", "bm", "pr", "wr", "bt", "yr", "fr", "bb", "sr", "cb", "rb", "ch", "gr"], "sb": [" db", "BB", "sf", "sg", "mb", " eb", "bsp", " SB", "sh", "sp", "tmp", "bf", "db", "bh", "bs", "buff", "bp", "BP", "b", "bd", "sm", "bm", "bt", " kb", "bb", "cb", "SB", "bar", "B"], "map": ["set", "block", "mm", "save", "snap", "group", "mask", "bind", "mp", "pose", "master", "place", "parse", "create", "tree", "node", "m", "bridge", "default", "make", "stat", "batch", "cap", "process", "cast", "print", "mark", "state", "dict", "metadata", "cache", "scale", "shape", "index", "view", "list", "load", "match", "code", "mate", "mem", "maps", "sm", "find", "MAP", "age", "apper", "see", "data", "collect", "table", "manager", "store", "link", "ap", "hash", "use", "local", "pool", "handle", "man", "size", "bar", "policy"], "mojiList": ["moojiLibrary", "koijiSet", "pojiArray", "kojiLibrary", "mojiArray", "moiList", "mozySet", "mojiSet", "pojiList", "moujSet", "moowalist", "moojiArray", "mojiMap", "poijiSet", "moijiLIST", "moojiMap", "moijiArray", "poijiLIST", "mozylist", "moijiList", "koojiList", "moujMap", "kojiSet", "poijiArray", "koojilist", "koojiTree", "moojiLIST", "moowaTree", "moowaList", "kojiMap", "koojiSet", "moojiSet", "mojiTree", "koijiList", "kojiTree", "pojiSet", "mojiLIST", "moujLibrary", "mozyTree", "moijiMap", "moujList", "moijiLibrary", "moojiTree", "moiLIST", "moojiList", "moijiSet", "mojilist", "moiSet", "mozyList", "moowaSet", "moiArray", "koijiLibrary", "poijiList", "koijiMap", "moojilist", "kojilist", "pojiLIST", "mojiLibrary", "kojiList"], "key": ["sym", "ke", "name", "ico", "Key", "sy", "id", "value", "prefix", "py", "tip", "default", "by", "pair", "item", "cy", "tag", "client", "phrase", "note", "index", "match", "KEY", "pkg", "pot", "ie", "mk", "keys", "primary", "k", "json", "my", "ory", "link", "kee", "info", "char", "kind", "label", "y", "css", "title", "kid", "hash"], "input": ["q", "active", "empty", "cur", "background", "got", "feed", "current", "ip", "address", "point", "qa", "config", "focus", "word", "source", "in", "msg", "read", "raw", "doc", "lat", "state", "hello", "start", "str", "form", "qi", "view", "image", "buffer", "history", "pattern", "string", "comment", "null", "accept", "expression", "document", "text", "data", "html", " Input", " inputs", "human", "output", "txt", "request", "sample", "my", "char", "up", "add", "all", "Input", "query", "next"], "strList": ["charKnown", "arrSet", "arrList", "strSet", "arrKnown", "charLIST", " strL", "strLIST", "strlist", "strKnown", "stringLIST", "arrL", "charL", " strLIST", " strlist", " strKnown", "charList", " strSet", "stringList", "stringKnown", "stringlist", "charSet", "strL", "charlist"], "moji": ["boij", "kooji", "poowa", "doiji", " moowa", " moiji", "moja", "goja", "doja", "poiji", "boji", "meij", "poja", "mechio", "meji", " mochio", "pooji", "booji", "doji", "mooji", "koja", "meowa", "koji", "dooji", "meiji", "goiji", " mooji", "meja", "kochio", "mochio", "meoji", "moowa", "gooji", "goji", "moiji", "koij", " moja", "koiji", "boiji", "moij", "poji"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String args[]){\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint k = sc.nextInt();\\n\t\tint x = sc.nextInt();\\n\\n\t\tStringBuffer sb = new StringBuffer();\\n\t\tfor(int i = (x - k + 1);i <= (x + k - 1); i++) {\\n\t\t\tsb.append(i).append(\" \");\\n\t\t}\\n\t\tsb.setLength(sb.length()-1);\\n\\n\t\tSystem.out.println(sb.toString());\\n\t}\\n}\\n", "target": "207", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "sec", "cl", "sys", "ser", "sh", "cr", "bc", "sv", "sp", "inc", "tk", "ck", "nl", "capt", "ctl", "ko", "sch", "tc", "scan", "sq", "cs", "ss", "nc", "ok", "pb", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch"], "k": ["q", "ke", "wk", "ikk", "yk", "kl", "h", "ks", "kh", "n", "m", "kr", "dk", "km", "tk", "ck", "ko", "unk", "ak", "kok", "ki", "ik", "kk", "z", "j", "it", "gain", "mk", "g", "ok", "c", "ek", "sk", "ku", "K", "w", "alpha", "t", "kj", "ijk", "ka", "kw", "kid"], "x": ["ix", "ex", "wx", "ax", "ox", "h", "n", "v", "m", "xf", "xy", "width", "tx", "xe", "xx", "on", "px", "xc", "z", "xa", "j", "dx", "g", "mx", "xt", "xxx", "c", "xd", "max", "e", "w", "X", "t", "p", "rx", "y", "xi", "xs", "xp"], "sb": ["sbm", "xb", "sf", "wb", "ob", "sg", "rb", "orb", "bsp", "now", "sh", "sv", "sp", "zb", "lp", "gb", "bh", "bf", "stab", "sa", "obs", "bs", "buff", "bn", "lb", "bp", "ub", "sw", "gob", "bj", "b", "eb", "bd", "ssl", "fb", "ib", "nb", "sq", "ab", "pb", "bg", "bt", "bis", "rob", "kb", "obb", "bb", "cb", "SB", "si", "erb", "abb"], "i": ["I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "ji", "li", "o", "ij", "ini", "in", "ski", "ai", "ni", "ki", "client", "mu", "qi", "ori", "index", "ik", "u", "ims", "j", "bi", "it", "is", "ui", "pi", "ti", "ic", "ci", "sim", "yi", "cli", "multi", "integer", "iter", "iri", "ii", "xi", "si", "di", "mi", "ish"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        System.out.println(n == 1 ? 0 : 1);\\n    }\\n}\\n", "target": "148", "substitutes": {"sc": ["usc", "uc", "lc", "acc", "cc", "esc", "sec", "cl", "sys", "ser", "sh", "cr", "sv", "sp", "bc", "soc", "sa", "cle", "sel", "spec", "sch", "sm", "sync", "tc", "cv", "scan", "sq", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "n": ["num", "mn", "nu", "d", "nn", "number", "l", "N", "gn", "ns", "m", "v", "ne", "nan", "nl", "cn", "sn", "a", "b", "count", "f", "norm", "z", "j", "nb", "i", "g", "nc", "na", "k", "np", "c", "none", "ng", "t", "p", "s", "ln", "nt"]}}
{"code": "import java.io.*;\\nclass Main{\\n    public static void main(String[] args) throws NumberFormatException,IOException{\\n        BufferedReader r =\\n         new BufferedReader(new InputStreamReader(System.in), 1);\\n         \\n        String line = r.readLine();    \\n        String[] w = line.split(\" \",0); \\n        int a=Integer.parseInt(w[0]);\\n        int b=Integer.parseInt(w[1]);\\n        int c=Integer.parseInt(w[2]);\\n        System.out.println(a<b&&b<c?\"Yes\":\"No\");\\n        r.close();\\n    }\\n}", "target": "168", "substitutes": {"r": ["br", "rr", "rg", "cur", "rar", "ar", "l", "rs", "nr", "rf", "ur", "rt", "h", "usr", "cr", "dr", "rd", "ran", "read", "ro", "mr", "R", "right", "Reader", "rw", "reader", "hr", "pr", "rl", "rec", "rel", "fr", "er", "rx", "p", "sr", "re", "rc", "rb", "res"], "line": ["block", "Line", "lc", "result", "row", "l", "inline", "entry", "point", "log", "n", "word", "in", "pe", "nl", "detail", "raw", "file", "cell", "print", "le", "lines", "str", "lin", "se", "sl", "ls", "frame", "string", "LINE", "text", "output", "eline", "link", "sample", "liner", "out", "p", "ln", "command", "ine", "next"], "w": ["q", "wall", "wcs", "ex", "wx", "d", "work", "wl", "wt", "l", "temp", "wp", "h", "v", "ew", "n", "rew", "word", "aw", "m", "ws", "raw", "tw", "wa", "wal", "write", "sw", "f", "rw", "W", "hw", "z", "weights", "words", "g", "exp", "t", "wh", "we", "p", "fw", "y", "kw", "x", "window"], "a": ["ae", "ata", "ca", "ava", "ar", "aq", "oa", "ta", "da", "aa", "sta", "sa", "al", "ai", "act", "A", "f", "ia", "an", "la", "ga", "ao", "ab", "pa", "ea", "area", "aff", "ba", "na", "aaa", "ach", "aj", "fa", "alpha", "ma", "t", "ac", "era", "au", "ra", "am"], "b": ["d", "wb", "sb", "ob", "l", "mb", "bc", "n", "v", "gb", "db", "bl", "bs", "lb", "ub", "eb", "f", "u", "fb", "bu", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bt", "bis", "bo", "p", "bb", "cb", "be", "y", "rb", "B"], "c": ["uc", "lc", "cc", "d", "l", "cond", "co", "bc", "n", "m", "ce", "unc", "v", "dc", "ec", "fc", "f", "xc", "tc", "z", "cd", "sc", "div", "content", "C", "cs", "nc", "cm", "ci", "com", "ct", "e", "t", "etc", "x", "ac", "cb", "mc", "cf"]}}
{"code": "import java.util.*;\\n\\nimport static java.lang.Math.round;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int l = sc.nextInt();\\n        int r = sc.nextInt();\\n        int modl =   l% 2019;\\n        int modr = r%2019;\\n        long ans =2018;\\n\\n        if(modr<= r-l){\\n            System.out.println(0);\\n        }else{\\n            for(int p=modl; p < modr; p++){\\n                for(int q=p+1; q <= modr; q++){\\n                    ans = Math.min(ans, (p*q)%2019);\\n\\n                }\\n            }\\n            System.out.println(ans);\\n\\n        }\\n\\n\\n\\n\\n\\n\\n        }\\n    }", "target": "193", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "Scan", "cr", "sv", "sp", "bc", "nl", "ko", "ctl", "sch", "sw", "sync", "tc", "ctrl", "scan", "sq", " Sc", "cs", "nc", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "l": ["dl", "lc", "lt", "ll", "loc", "el", "len", "kl", "li", "pl", "h", "v", "m", "n", "ol", "lp", "nl", "lb", "lib", "le", "lin", "b", "f", "sl", "lr", "ls", "u", "ml", "z", "j", "i", "g", "length", "c", "L", "t", "s", "x", "ln", "line", "ly"], "r": ["rr", "ri", "d", "rar", "ar", "rs", "nr", "rt", "h", "o", "cr", "n", "m", "v", "rd", "tr", "err", "ro", "mr", "R", "res", "rm", "b", "lr", "u", "range", "z", "radius", "j", "pr", "i", "rl", "g", "rec", "c", "w", "fr", "er", "t", "re", "rc", "rb", "sr"], "modl": ["minll", "modm", "Modll", "mbl", "ModL", "mbL", "Modp", "minl", "mtL", "modulem", "Modm", "modulel", "Modl", "minL", "modulep", "modp", "modL", "mbp", "mbm", "mtll", "moduleL", "minr", "modll", "mtl", "Modr", "mtr"], "modr": ["addr", "meder", "addl", " modp", " mode", "mader", " modrr", "medl", "madl", "Modrt", "Modl", "addp", "madr", "moder", "Moder", "MODer", "modR", "modrr", "ModR", "modp", "madp", "MODrt", "MODe", " modR", "MODrr", " moder", "madrr", "mode", "Mode", "MODl", "addrr", "medr", "MODR", "MODr", "modrt", "medrt", "madR", "Modr"], "ans": ["gs", " means", " Ans", "acs", "ents", "uns", "eps", "ras", "nets", "vals", "pan", "aus", "rs", "anas", "anks", "outs", "eds", "anners", "asks", "ks", "ns", "n", " olds", "ends", "ians", "os", "ms", "ids", "ates", "arts", "ANS", "amps", "ats", "ens", "ants", "ags", "ls", "an", "ows", "AN", "angs", "mas", " spans", " scans", "cs", "orts", "ins", "aps", "olds", "vers", "ions", "cons", "posts", "xs", "lets", "rans", "ps", "lan", "offs", "ars", "ann"], "p": ["br", "post", "pt", "ping", "d", "pai", "pm", "ar", "from", "php", "pre", "part", "ip", "vp", "tp", "point", "h", "o", "perm", "pl", "sp", "cp", "m", "app", "lp", "pe", "pg", "per", "bp", "P", "pp", "pid", "art", "at", "a", "b", "f", "pos", "pro", "pu", "pat", "j", "pkg", "pers", "par", "press", "pr", "primary", "pa", "i", "g", "pi", "k", "np", "port", "jp", "ap", "exp", "t", "y", "up", "ps", "pc", "xp", "x"], "q": ["pt", "aq", "queue", "requ", "ip", "qu", "qa", "sh", "cf", "v", "ch", "eq", "ck", "qual", "ql", "cu", "Q", "qi", "quarter", "ry", "req", "z", "qq", "j", "que", "qv", "ib", "ue", "ve", "sq", "mk", "i", "g", "k", "qt", "quit", "quant", "quest", "ct", "ph", "iq", "qs", "dq", "query", "ox"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n    public static void main(String[] args){\\n\tScanner inp = new Scanner(System.in);\\n\tint x = inp.nextInt();\\n\t\\n\tSystem.out.println( x/3600 + \":\" + x/60%60 + \":\" + x%60);\\n    }\\n}", "target": "84", "substitutes": {"inp": ["inP", "servpb", " kinP", " kinp", "vinp", " injp", " kinpb", " kinpa", "inpb", "Inpb", "servpp", " ninP", "injp", "inpp", "inpa", "vinjp", " ninpa", "vinpp", "servjp", "InP", "Inpa", "servp", " ninp", " inpp", "vinpb", " ninpb", " inpb", "Inp"], "x": ["ix", "ex", "wx", "d", "xb", "ax", "ox", "v", "n", "xf", "xy", "tx", "inx", "xe", "xx", "index", "px", "xc", "z", "xa", "xes", "dx", "i", "mx", "xt", "xxx", "c", "xd", "max", " xx", "e", "X", "t", "w", "rx", "p", "ux", "exp", "xi", "xs", "xp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main\\n{\\n\tpublic static void main(String[] args)\\n\t{\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\twhile (true)\\n\t\t{\\n\t\t\tint n = sc.nextInt();\\n\t\t\tif (n == 0)\\n\t\t\t{\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tint[] scores = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t{\\n\t\t\t\tscores[i] = sc.nextInt();\\n\t\t\t}\\n\\n\t\t\tdouble sd = getStandardDeviation(scores);\\n\\n\t\t\tSystem.out.println(sd);\\n\t\t}\\n\t}\\n\\n\tstatic double getStandardDeviation(int[] data)\\n\t{\\n\t\tint sum = 0;\\n\t\tfor (int d :\\n\t\t\t\tdata)\\n\t\t{\\n\t\t\tsum += d;\\n\t\t}\\n\\n\t\tdouble ave = (double) sum / data.length;\\n\\n\t\tdouble sumSquareDeviation = 0.0;\\n\t\tfor (int d :\\n\t\t\t\tdata)\\n\t\t{\\n\t\t\tsumSquareDeviation += Math.pow(d - ave, 2);\\n\t\t}\\n\\n\t\tdouble variance = sumSquareDeviation / data.length;\\n\\n\t\tdouble standardDeviation = Math.sqrt(variance);\\n\\n\t\treturn standardDeviation;\\n\t}\\n}\\n\\n", "target": "203", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "pl", "sv", "sp", "bc", "cr", "ck", "ctl", "sel", "cam", "sw", "fc", "sync", "tc", "scan", "sq", "cs", "ner", "ss", "nc", "pb", "c", "syn", "osc", "cmp", "Sc", "gc", "ng", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch"], "n": ["nu", "mn", "num", "r", "ll", "nn", "nia", "number", "nr", "l", "len", "un", "N", "gn", "o", "ns", "v", "m", "ne", "nan", "nl", "cn", "sn", "note", "count", "z", "j", "no", "nb", "nc", "na", "np", "en", "c", "nw", "nm", "ng", "t", "p", "nor", "ln", "net", "nt", "names"], "scores": ["sores", "cors", " scodes", "Scendants", " scords", "chore", "sabilities", "Scores", "scors", "scales", " scounters", "chendants", "scendants", "sors", " scabilities", "scanabilities", "chales", "chores", "scanords", "scanores", "codes", "scabilities", "captendants", "captores", "Score", "cords", "scounters", "captales", "score", "Scales", "scords", "captore", "sords", "sodes", "scodes", "sounters", "scanounters", " scors", "cores"], "i": ["q", "I", "ix", "phi", "gi", "hi", "iu", "ei", "chain", "ip", "o", "li", "id", "m", "me", "ini", "err", "in", "batch", "ai", "ms", "client", "im", "ind", "qi", "us", "init", "io", "j", "bi", "it", "ui", "ie", "is", "uri", "pi", "inner", "ti", "ic", "ci", "sim", "my", "cli", "multi", "iter", "p", "gu", "y", "ii", "si", "di", "mi"], "sd": ["dl", "pd", "od", "sf", "sy", "sb", "df", "dd", "fd", "gd", "sh", "sv", "dk", "vd", "md", "td", "sch", "sn", "dt", "scale", "hd", "bd", "SD", "ard", "cd", "dds", "ud", "sky", "sq", "ss", "density", "std", "ds", "sam", "dis", "si", "di"], "data": ["dat", "result", "array", "details", "dates", "vals", "chain", "dd", "draw", "total", "device", "ns", "DATA", "reports", "value", "missing", "da", "batch", "this", "series", "family", "multiple", "users", "params", "cache", "map", "list", "index", "image", "mem", "assets", "sequence", "results", "items", "table", "done", "values", "ments", "ds", "sample", "steps", "times", "iter", "actions", "all", "apps", "size", "ata", "res", "time", "window", "images"], "sum": ["Sum", "num", "set", "sat", "av", "cal", "cos", "sun", "base", "temp", "ums", "total", "sys", "zero", "so", "amount", " SUM", "summary", "sa", "alph", "su", "mean", "scale", "se", "count", "us", "fac", "mem", "um", "si", "cum", "vol", "mix", "mod", "hum", " summed", "sim", "ul", "ass", "alpha", "out", "use", "sam", "ma", "average", "info", "up", "add", "size", "med", "all", "seed", "hash"], "d": ["dat", "D", "q", "dh", "pd", "od", "end", "name", "dm", "l", "dd", "draw", "red", "fd", "id", "and", "de", "v", "m", "ad", "dc", "dn", "md", "ade", "td", "or", "dt", "ind", "a", "f", "on", "z", "j", "cd", "ed", "dx", "ud", "done", "c", "e", "w", "t", "p", "date", "ld", "add", "did", "di", "ord"], "ave": ["ae", "ke", "giving", "av", "save", "aste", "oda", "rade", "ale", "ane", "stab", "aw", "give", "sa", "ay", "ade", "ome", "ice", "are", "ive", "vae", "ame", "mate", "gear", "have", "ue", "ve", "alias", "age", "aka", "ape", "aver", "slave", "shot", "ate", "aves", "au", "goal"], "sumSquareDeviation": ["sumSquareDeniate", "sumSquareDevocation", "sumSquDevocation", "sumSquareDeviations", "sumSquDecance", "sumSquareDeviment", "sumSquareDeciate", "sumSquareVariocation", "sumSquareDataiation", "sumSquareDecance", "sumSharpDenance", "sumSquareDiviation", "sumSharpDevance", "sumSharpDeniate", "sumSquareVariiation", "sumSquareDecocation", "sumSquareDevelopmentiment", "sumSquareDenance", "sumScaleDeniation", "sumSquDecocation", "sumSquareDevelopmentance", "sumSquareDiviate", "sumSharpDeniation", "sumScaleDenaration", "sumSquareDivaration", "sumSquareDivance", "sumSquDeviment", "sumScaleDevaration", "sumSquareDevelopmentocation", "sumSharpDeviate", "sumSquareDataaration", "sumScaleDeviation", "sumSquareDeciations", "sumSharpDeviation", "sumSquareDataance", "sumScaleDeviment", "sumSquDevance", "sumScaleDevance", "sumSquareDevance", "sumSquDeviation", "sumSquareDeciation", "sumSharpDeviations", "sumSharpDeniations", "sumSquareDeniation", "sumSquareDeciment", "sumSquareVariiment", "sumSquareVariance", "sumSquareDataiment", "sumSquareDevelopmentiation", "sumScaleDenance", "sumSquareDeniment", "sumSquareDenaration", "sumSquDeciment", "sumSquareDeniations", "sumSquareDiviment", "sumSquareDevaration", "sumSquareDeviate", "sumSquareDiviations", "sumScaleDeniment", "sumSquDeciation"], "variance": ["devatility", "volatility", "variANCE", "VariANCE", "designance", "variant", "designanced", "Varianced", "volance", "servance", "devANCE", "devant", "devity", "Variant", "devanced", "varianced", "devance", "servatility", "volant", "Variance", "volity", "servity", "designant", "variatility", "variity", "designANCE", "servant"], "standardDeviation": [" standardDeciate", "centralDevaration", "standardDEVribution", " standardDeciation", "standardDeniation", "standardDevribution", "standardDeviate", "standardDeniate", "standardDefiation", "standardDesignribution", "centralDeviations", "standardDefribution", "standardDiviations", "standardDEViations", "standardDevaration", "standardDiviation", "centralDefaration", "centralDefiations", " standardDecation", " standardDevation", "standardDeviations", "standardDeciations", "standardDiviate", "standardDeciate", "standardDecation", "centralDefribution", "standardDenation", "standardDivation", "standardDeniations", "standardDeciation", "standardDEVaration", "standardDesigniation", "centralDefiation", "centralDevribution", "standardDEViation", " standardDeviations", "centralDeviation", "standardDevation", "standardDefiations", "standardDesignaration", " standardDeciations", "standardDefaration", " standardDeviate", "standardDesigniations"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\\n\tpublic static void main (String[] args) {\\n\t   InputReader in = new InputReader(System.in);\\n\t   int a = in.readInt();\\n\t   int b = in.readInt();\\n\t   if(a >= 13) System.out.println(b);\\n\t   else if(a >= 6)System.out.println(b/2);\\n\t   else System.out.println(0); \\n\t}\\n}\\n\\nclass InputReader {\\n\\n\tprivate InputStream stream;\\n\tprivate byte[] buf = new byte[1024];\\n\tprivate int curChar;\\n\tprivate int numChars;\\n\tprivate SpaceCharFilter filter;\\n\\n\tpublic InputReader(InputStream stream) {\\n\t\tthis.stream = stream;\\n\t}\\n\\n\tpublic int read() {\\n\t\tif (numChars == -1)\\n\t\t\tthrow new InputMismatchException();\\n\t\tif (curChar >= numChars) {\\n\t\t\tcurChar = 0;\\n\t\t\ttry {\\n\t\t\t\tnumChars = stream.read(buf);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tif (numChars <= 0)\\n\t\t\t\treturn -1;\\n\t\t}\\n\t\treturn buf[curChar++];\\n\t}\\n\\n\tpublic int readInt() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tint res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9')\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\\n\tpublic String readString() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tStringBuilder res = new StringBuilder();\\n\t\tdo {\\n\t\t\tres.appendCodePoint(c);\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res.toString();\\n\t}\\n\\n\tpublic long readLong() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c)) {\\n\t\t\tc = read();\\n\t\t}\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tlong res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9') {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\t\\n\tpublic boolean isSpaceChar(int c) {\\n\t\tif (filter != null)\\n\t\t\treturn filter.isSpaceChar(c);\\n\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n\t}\\n\\n\tpublic String next() {\\n\t\treturn readString();\\n\t}\\n\\n\tpublic interface SpaceCharFilter {\\n\t\tpublic boolean isSpaceChar(int ch);\\n\t}\\n}", "target": "249", "substitutes": {"in": ["r", "mm", "gin", "bin", "from", "inf", "con", "l", " din", "log", "rt", "inc", "n", "ad", "ini", "err", "read", "by", "per", "raw", "inn", "file", "IN", "run", "ind", "at", "on", "us", "In", "init", "io", "reader", "it", "null", "din", "is", "i", "inner", "en", "ins", "input", "conf", "out", "as", "t", "cin", "info", "ac", "er", "add", "readable"], "a": ["ae", "ca", "d", "oa", "ta", "aa", "app", "sta", "sa", "ak", "isa", "act", "A", "ia", "an", "ao", "j", "ab", "div", "ea", "area", "i", "aff", "ba", "aaa", "ach", "aka", "na", "aj", "fa", "ada", "as", "t", "ma", "p", "ac", "era", "au", "aux", "ata", "am"], "b": ["br", "r", "d", "sb", "mb", "l", "bar", "bc", "v", "n", "m", "bs", "bp", "amb", "A", "eb", "bd", "f", "fb", "z", "j", "ib", "nb", "ab", "i", "g", "ba", "e", "t", "p", "bb", "cb", "y", "be", "rb", "x", "B"], "stream": ["wrapper", "driver", "REAM", "http", "engine", "console", "impl", "v", "context", "read", "source", "ream", "speed", "path", "host", "state", "client", "thread", "sw", "form", "cache", "view", "sync", "sl", "buffer", "ssl", "reader", "stack", "pipe", "loop", "sc", "message", "content", "cont", "data", "status", "inner", "window", "channel", "open", "table", "Stream", "input", "iterator", "output", "sample", "pool", "out", "socket", "port", "storage", "iter", "network", "handle", "proc", "util"], "buf": ["br", "result", "cur", "Buff", "wb", "bin", "Buffer", "queue", "temp", "mb", "uf", "bar", "vec", "tmp", "tr", "db", "cap", "alph", "batch", "bl", "buff", "seq", "bs", "msg", "bytes", "mu", "str", "img", "bag", "buffer", "mem", "arr", "cat", "cv", "pkg", "cmd", "nb", "data", "txt", "blocks", "cb", "box", "rb", "conv"], "curChar": ["currentChar", "ctrCharacter", "corChar", " curCh", "corCh", " curByte", "currentVar", "currentCh", "curVer", "CurPos", "currentPos", "CurChar", "currentByte", "CurVer", "curByte", " curVar", "CurCharacter", "CurCh", "ctrCh", "ctrChar", "CurByte", "CurUser", "curUser", " curCharacter", "ctrVer", "corVer", "curVar", "curPos", "ctrByte", "curCh", "CurVar", "corUser", "ctrUser", "curCharacter", " curPos"], "numChars": ["namChears", "namChARS", "numChales", " numchars", "numchARS", "numCheARS", " numcharters", "numcharters", "NumChARS", " numChins", "numHars", " numChrs", "numCrs", "namCheers", " numClARS", "numClers", "numHins", "numCHars", "numBuffins", "numchins", " numChers", "numCars", " numClars", "numCharats", "numChARS", "numCARS", "NumChales", "numCHales", "NumCARS", "NumCales", "numBuffars", "numchers", "numchales", "numCharars", "numChats", "numchcs", "numClars", "numBuffARS", "numCheers", "numHarters", "NumCars", "namCheARS", "numChins", " numClarts", " numCharters", "NumChars", "namChers", "numCHers", "numChears", "numChcs", "numCats", "numCarts", " numChats", "namChcs", "numCales", "numChrs", "numcharts", " numClers", "numClARS", "NumCarts", "numCers", "numchars", "numCharrs", "numCHarts", " numchins", "numChecs", "numCharers", "numChers", "numCharts", "numCharters", " numCharts", "numBuffers", "NumCharts", "numCHARS", "numClarts", "numBuffcs", " numChARS", "namChecs", "numBuffarters", "namChars"], "filter": ["set", "mask", "bin", "chain", "fil", "ref", "term", "Filter", "handler", "map", "list", "f", "fac", "match", "func", "test", "const", "pipe", "accept", "fn", "table", " filters", "pool", "check", "cb", "conv", "config", "hash"], "c": ["arc", "uc", "lc", "ca", "col", "cc", "d", "anc", "cur", "ar", "con", "cos", "l", "chain", "co", "cl", "h", "cf", "bc", "cr", "ce", "cp", "\u00e7", "unc", "n", "dc", "v", "cor", "err", "ec", "can", "cu", "enc", "cache", "fc", "f", "xc", "tc", "cd", "sc", "i", "cont", "C", "cs", "g", "vc", "nc", "cm", "abc", "ic", "ci", "com", "conf", "cmp", "ct", "e", "gc", "t", "etc", "p", "ac", "cb", "y", "mc", "rc", "pc", "conv"], "sgn": [" sgate", "tsbn", "csgn", "lsagn", "sGN", "sbn", "tsgn", "rsagn", "lsGN", "csGN", " sign", "lsbn", "rsbn", " sgt", "Sgil", "rsgn", "sagn", "sign", "gesgn", "sig", "csgt", "lsgn", "imsnd", "Sagn", "adsig", "Sgn", "dsGN", " sgil", "gsgn", "SGN", "adsGN", "csagn", "sgt", "gesgil", "adsagn", "csig", "gsgt", "gesig", "gsign", "tsGN", "dsnd", "dsign", "rsGN", "sgate", "imsgn", "tsagn", "imsGN", " sig", "csgate", "dsgn", "Sign", "gesign", "adsgn", "imsign", "csign", "Sig", "sgil", "snd", "gsgate"], "res": ["reg", "r", "result", "ons", "details", "vals", "rev", "rs", "cond", "red", "abs", "sys", "vec", "ress", "reset", "ns", "resource", "Res", "rand", "ber", "ref", "resp", "rep", "bs", "ro", "ms", "val", "cu", "ret", "cms", "us", "req", "resh", "arr", "rex", "results", "pers", " Res", "div", "mk", "ptr", "cs", "rest", "rss", "vol", "rel", "js", "obj", "max", "des", "RES", "out", "cons", "def", "s", "re", "ps", "pas", "resolution", "conv", "helps", "pres", "gr", "rem", "expr"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        char[] ch = sc.next().toCharArray();\\n        final int N = ch.length;\\n        int[] ar = new int['z' + 1]; // 'z' == 122\\n        String ans = \"Yes\";\\n        \\n        for (int i = 0; i < N; i++) {\\n            int ascii = ch[i];\\n            ar[ascii]++;\\n        }\\n        for (int i = 'a'; i <= 'z'; i++) { // 'a' == 97\\n           if (ar[i] % 2 != 0)  ans = \"No\";\\n        }\\n        \\n        out.println(ans);\\n        \\n        out.flush();\\n    }\\n}", "target": "103", "substitutes": {"sc": ["lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "ser", "bc", "sv", "sp", "cr", "sa", "capt", "cle", "sch", "tch", "sync", "tc", "scan", "sq", "cs", "sci", "nc", "screen", "c", "sk", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "sr", "sub"], "out": ["println", "r", " Out", "ex", " bout", " err", "writer", "error", "sys", "log", "o", "ser", "put", "n", "v", "err", "in", "msg", "print", "OUT", " cout", "os", "file", "write", "str", "at", "io", "Out", "screen", "output", "txt", " sys", "w", "x", "s", "info", " outs", "th", "nt", "res", "outs"], "ch": ["br", "q", "l", "qu", "cl", "h", "ich", "sh", "sp", "v", "cp", "gb", "ech", "sch", "ih", "b", "tch", "Ch", "cho", "j", "CH", "pr", "i", "cont", "cs", "unch", "cha", "ach", "cm", "channel", "c", "ph", "ct", "s", "char", "p", "wh", "y", "chan"], "N": ["Z", "I", "D", "F", "E", " n", "n", "O", "No", "S", "P", "T", "R", "NS", "A", "NR", "V", "M", "H", "C", "Y", "L", "K", "J", "Max", "NT", "B", "Ns"], "ar": ["arc", "dar", "rar", "var", "cr", "aer", "dr", "tr", "al", "ara", "ro", "ai", "Ar", "are", "art", "inter", "at", "arr", "ir", "ard", "par", "ap", "AR", "as", "er", "ma", "ra", "ars", "am"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        if(a == 2){\\n            System.out.println(a);\\n            return;\\n        }\\n        ArrayList<Integer> list = getPrime(a);\\n        while(true){\\n            if(check(a,list)){\\n                System.out.println(a);\\n                return;\\n            }\\n            a++;\\n        }\\n    }\\n    \\n    static ArrayList<Integer> getPrime(int x){\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        list.add(2);\\n        int max = (int)Math.pow(x*2,0.5);\\n        for(int i = 3; i < max; i+=2){\\n            boolean chk = true;\\n            for(int j : list){\\n               if(i % j == 0){\\n                   chk = false;\\n                   break;\\n               }\\n            }\\n            if(chk){\\n                list.add(i);\\n            }\\n        }\\n        return list;\\n    }\\n    \\n    static boolean check(int x, List<Integer> list) {\\n        for(int j : list){\\n           if(x % j == 0){\\n               return false;\\n           }\\n        }\\n        return true;\\n    }\\n}\\n\\n", "target": "183", "substitutes": {"sc": ["uc", "r", "acc", "cc", "anc", "esc", "Sync", "sec", "cl", "sys", "system", "Scan", "ser", "sv", "sp", "bc", "cr", " scr", "nl", "ec", "cle", "sel", "sch", "sw", "se", "sm", "sync", "scan", "sq", " Sc", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "a": ["ae", "ca", "name", "d", "ar", "oa", "o", "ta", "zero", "n", "aa", "da", "sta", "sa", "aw", "sha", "ai", "isa", "act", "A", "b", "at", "index", "ia", "an", "la", "ga", "ao", "ed", "ab", "ea", "area", "div", "apa", "ba", "aaa", "na", "aka", "c", "aj", "past", "alpha", "ma", "t", "as", "p", "ac", "eas", "s", "ami", "era", "au", "y", "all", "window", "am"], "list": ["set", "block", "lt", "coll", "group", "ll", "row", "array", "number", "li", "log", "n", "batch", "level", "LIST", "shape", "collection", "left", "pool", "layout", "def", "parent", "net", "all", "del", "st", "map", "true", "limit", "queue", "l", "chain", "pair", "form", "rm", "ist", "sequence", "inner", "table", "local", "copy", "result", "tree", "tmp", "item", "print", "spec", "dict", "write", "alt", "test", "menu", "cont", "length", "json", "out", "p", "add", "dl", "entry", "word", "default", "get", "lists", "index", "range", "stack", "loop", "null", "listed", "record", "obj", "iter"], "x": ["ix", "r", "ex", "wx", "ax", "l", "ox", "o", "v", "m", "n", "xf", "xy", "val", "tx", "act", "inx", "xe", "b", "xx", "f", "px", "xc", "z", "xa", "hex", "ext", "dx", "g", "k", "xt", "mx", "abc", "xxx", "ic", "c", "xd", "e", "w", "X", "t", "exp", "rx", "p", "ux", "ctx", "y", "xi", "xs", "xp", "expr"], "max": ["q", "end", "work", "ax", "maximum", "base", "ox", "total", "n", "m", "rand", "top", "ms", "right", "auto", "gt", "min", "us", "init", " Max", "range", "mad", "full", "huge", "rest", "k", "mx", "step", "conf", "ma", "exp", "Max", "last", "MAX", "size", "med", "res", "window"], "i": ["I", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "base", "ei", "l", "ip", "ji", "point", "li", "id", "n", "m", "ij", "me", "ini", "ai", "ki", "im", "ind", "qi", "b", "index", "us", "init", "bi", "it", "ui", "ie", "is", "pi", "g", "k", "ti", "ic", "ci", "sim", "my", "e", "multi", "t", "iq", "info", "ami", "y", "ii", "xi", "si", "di", "mi"], "j": ["br", "q", "meg", "ix", "key", "l", "jl", "ji", "jj", "o", "jo", "n", "ij", "v", "let", "ne", "ion", "ja", "im", "str", "bj", "b", "org", "oj", "u", "z", "Ja", "it", "uj", "g", "vol", "k", "json", "aj", "js", "obj", "jp", "J", "fr", "p", "kj", "y", "jc", "ijk", "ev", "dj"], "chk": ["chck", "Chck", "Chok", "cellik", "chka", "caseka", "echck", "cheok", "chok", "echk", "Chk", "chkw", " chok", "cheka", "chik", "Chka", "echkw", "echok", " chck", "cellkw", "Chik", "caseok", "echik", " chkw", "caseck", "chek", "check", "cellk", " chik", "cellck", "casek"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\t\tchar[] a = sc.next().toCharArray();\\n\t\tint ans=0;\\n\t\tfor (int i=0;i<3;i++){\\n\t\t\tif (a[i]=='1'){\\n            \tans+=1;\\n            }\\n        }\\n        System.out.print(ans);\\n    }\\n}", "target": "165", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "cr", "bc", "sv", "sp", "capt", "cle", "sel", "sch", "sw", "se", "sm", "sync", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "screen", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "ch", "desc", "sub"], "a": ["ae", "ata", "ca", "att", "oa", "o", "ta", "da", "aa", "aw", "sa", "sta", "wa", "isa", "at", "b", "A", "f", "ia", "la", "ga", "ao", "xa", "ab", "pa", "area", "ea", "ba", "na", "c", "fa", "alpha", "ap", "w", "ma", "as", "ac", "aux", "va", "am"], "ans": ["mn", " means", "acs", "ents", "uns", "ons", "eps", "ros", "nets", "aus", "rs", "anks", "eds", "ns", "ads", "ks", "ran", "irms", "ians", "ars", "can", "ms", "lines", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "ls", "an", "AN", "ann", "ts", "anes", "cs", "orts", "ups", "ins", "ds", "aps", "olds", "as", "cons", "posts", "cas", "ots", "rans", "lan", "outs", " scans"], "i": ["set", "q", "I", "ix", "ex", "key", "phi", "gi", "zi", "iu", "hi", "ei", "fi", "chain", "ip", "ji", "l", "li", "id", "m", "ini", "ai", "ms", "ki", "im", "ind", "qi", "ori", "index", "us", "init", "u", "\u0438", "j", "bi", "it", "ui", "is", "uri", "pi", "g", "ti", "ic", "ci", "sim", "my", "cli", "yi", "multi", "t", "gu", "oi", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "\\n\\nimport java.io.*;\\nimport java.math.BigInteger;\\nimport java.util.*;\\nimport java.util.Stack;\\n\\npublic class Main{\\n\tpublic static class FastReader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer root;\\n\t\t\\n \\n\t\tpublic FastReader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n \\n\t\tString next() {\\n\t\t\twhile (root == null || !root.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\troot = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (Exception r) {\\n\t\t\t\t\tr.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn root.nextToken();\\n\t\t}\\n \\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n \\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n \\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n \\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (Exception r) {\\n\t\t\t\tr.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t}\\n\t\\n\tpublic static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));\\n\tstatic int mod = (int) (1e9+7);\\n\tstatic long cf = 998244353;\\n    static final int MAX = (int) 1e6;\\n    public static List<Integer>[] edges;\\n    public static int[][] parent;\\n    public static int col = 20;\\n    public static long[] Bit;\\n    public static long[] fac,inv;\\n    public  static int[] prime; \\n    public static long[] dp;\\n\tpublic static FastReader sc = new FastReader();\\n\tpublic static void main(String[] args) {\\n\t//\tScanner sc = new Scanner(System.in);\\n \\n\t\tint a = sc.nextInt();\\n\t\tint L=a/100;\\n\t\tint R=a%100;\\n\t\tif(1<=L&&L<=12){\\n\t\tif(1<=R&&R<=12) out.printf(\"AMBIGUOUS\\n\");\\n\t\telse out.printf(\"MMYY\\n\");\\n\t\t}else{\\n\t\tif(1<=R&&R<=12)out.printf(\"YYMM\\n\");\\n\t\telse out.printf(\"NA\\n\");\\n\t\t}\\n\t\tout.close();\\n\t}\\n\t\\n\t\\n}", "target": "5", "substitutes": {"br": ["r", "ctr", "shr", "bro", "nr", "bsp", "vr", "bc", "cr", "ber", "kr", "dr", "bh", "tr", "bridge", "boot", "err", "bf", "bl", "ocr", "bs", "ro", "bp", "brace", "Br", "mr", "buf", "BR", "rys", "lr", "reader", "bern", "hr", "pr", "ptr", "wr", "bt", "rel", "browser", "rob", "jp", "yr", "fr", "rx", "bb", "rb", "res", "gr", "next"], "root": ["rator", "r", "result", "empty", "snap", "loc", "cur", "base", "ver", "chain", "rt", "sys", "tree", "prefix", "node", "zero", "n", "console", "cr", "usr", "tmp", "err", "ocr", "oots", "ro", "this", "peer", "mr", "gro", "or", "ger", "roid", "right", "buf", " roots", "b", "rus", "ree", " Root", "h", "reader", "dev", "null", "roots", "rap", "pr", "div", "parser", "child", "ptr", "ok", "oot", "table", "head", "c", "obj", "Root", "scope", "p", "box", "owner", "rc", "nt", "res", "first", "util"], "str": ["r", "result", "ctr", "STR", "coll", "key", "next", "cur", "shr", "sys", "ns", "cr", "sp", "n", "dr", "tr", "err", "msg", "print", "enc", "sw", "res", "list", "sl", "inst", "arr", "sequence", "ent", "string", "sts", "url", "Str", "pr", "div", "text", "cs", "rec", "obj", "txt", "fr", "exp", "t", "s", "char", "p", "del", "gr", "st"], "out": ["result", "ex", "writer", "error", "o", "log", "sys", "tmp", "n", "m", "conn", "err", "in", "msg", "file", "OUT", "os", "print", "write", "res", "on", "io", "j", "Out", "null", "no", "stream", "inner", "obj", "output", "std", "txt", "ins", "pool", "w", "t", "er", "p", "ch", "outs", "st"], "mod": ["ctr", "cal", "dec", "Mod", "base", "pre", "log", "perm", "ref", "tree", "module", "tr", "floor", "MOD", "val", "form", "scale", "min", "ctrl", "div", "comp", "fun", "cm", "tab", "exp", "add", "grow", "rc"], "cf": [" cr", "ctr", "cc", "sf", " cc", "cr", "cp", "ce", "bf", "tr", "dc", "xf", "CF", "ffe", "ef", " mc", "fc", "cv", " ce", "cd", "cs", "CC", "ct", "cb", "lf", "ld", "fm", " df"], "MAX": ["pop", "ax", "mask", "base", "Prime", "cl", " max", "default", "cap", "level", "power", "tax", "ef", "scale", "gen", "INC", "CR", "step", "conf", "max", "exp", "ffff", "Max", "grow", "rc", "height", "map"], "edges": [" edgest", "Edges", "edge", "Edgest", "adges", "Edge", "adgest", "edgest", "adge", " edge", "edgets", "Edgets", " edgets", "adgets"], "parent": ["block", "name", "snap", "master", "tree", "node", "tmp", "tip", "default", "path", "family", "prop", "Parent", "pid", "shape", "prev", "unit", "dist", "par", "child", "table", "pool", "parents", "depth", "grow", "seed", "peer"], "col": ["num", "block", "loc", "row", "con", "base", "var", "cond", "cp", "ol", "level", "Col", "seq", "pol", "val", "min", "pos", "COL", "child", "div", "lock", "rel", "pool", "ct", "dir", "rc", "column", "line"], "Bit": ["dat", "block", "lt", "nu", "offset", "row", "base", "ip", "Prime", "weight", "fd", "total", "log", "tree", "node", "tmp", "factor", "dc", "db", "bl", "prop", "scale", "norm", "prev", "data", "lock", "step", "ct", "ld", "au"], "fac": ["acc", "cur", "con", "frac", "sav", "uf", "gn", "perm", "tmp", "unc", "ran", "cap", "fact", "ctrl", "cv", "gam", "cum", "fun", "ul", "sim", "eff", "mult", "fam", "ac", "cas", "Fac", "aux", "prof", "fx"], "inv": ["av", "mag", "rev", "verse", "iv", "log", "v", "ij", "rand", "sin", " inverse", "vin", "mu", "Inv", "norm", "dev", "grad", "vs", "sq", "tri", "rel", "eff", "reverse", "iq", "iter", "dir", "ln", "conv"], "prime": ["beta", "poly", "pre", "Prime", "real", "perm", "tmp", "rand", "factor", "pe", "power", "profile", "pri", "random", "tie", "pse", "ite", "ve", "primary", "pr", "div", "ptr", "tri", "prim", "max", "prof", "plus", "map"], "dp": ["dh", "pd", "dl", "dm", "d", "df", "vp", "ip", "tp", "ep", "sp", "cp", "lp", "db", "dc", "pp", "fp", "pkg", "tap", "pa", "np", "jp", "p", "dep", "ps", "dq", "di", "DP", "gp"], "sc": ["uc", "esc", "mp", "ser", "cl", "sys", "sh", "cr", "sp", "bc", "sv", "dr", "ch", "dc", "ec", "sch", "sw", "tc", "ptr", "cs", "osc", "Sc", "gc", "asc", "SC", "pc", "rc", "sr"]}}
{"code": "import static java.lang.Double.parseDouble;\\n\\npublic class Main {\\n    public static void main (String[] args ) {\\n        int i ;\\n        String number = new java.util.Scanner ( System.in ).nextLine();\\n        i = (int) xclubic (parseDouble(number));\\n        System.out.println(i);\\n    }\\n    public static double xclubic (double x) {\\n        double y;\\n        y = 3;\\n        return Math.pow(x , y);\\n    }\\n}", "target": "36", "substitutes": {"i": ["I", "ix", "phi", "gi", "iu", "ip", "li", "id", "n", "v", "m", "ij", "in", "ai", "im", "qi", "index", "z", "j", "bi", "it", "is", "ui", "status", "pi", "ti", "ic", "ci", "sim", "cli", "e", "multi", "t", "integer", "p", "iter", "oi", "xi", "ii", "si", "di", "mi"], "number": ["numbered", "num", "result", "name", "key", "version", "NUM", " Number", "address", "total", "language", "value", "n", "source", "report", " numbers", "object", "buffer", "sequence", "string", "no", "expression", "document", "message", "directory", "Number", "information", "umber", "output", "counter", "integer", "serial", "argument", "command", "line", "function"], "x": ["ix", "ex", "wx", "l", "ox", "gal", "v", "m", "xf", " dx", "xy", "xe", "xx", "f", "px", "xc", "z", "dx", "xxxxxxxx", "xt", "c", "e", " xx", "w", "X", "t", "rx", "p", "xi", "xs", "xp", "fx"], "y": ["ye", "sy", "ym", "iy", "o", "py", "m", "gy", "v", "n", "hy", "ay", "ey", "uy", "cy", "xy", "ys", "ya", "yer", "b", "ry", "yy", "ies", "z", "dy", "j", "yt", "vy", "oy", "axy", " ya", "c", "Y", "yi", "my", "w", "t", "ny", "p", "ady", "yd", "ty", "ch", "yo"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static final int BIG_NUM = 2000000000;\\n\tpublic static final int MOD = 1000000007;\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\ttry {\\n\t\t\tString input_str[] = br.readLine().split(\"\\\\s+\");\\n\t\t\tint N = Integer.parseInt(input_str[0]);\\n\t\t\tint LIMIT = Integer.parseInt(input_str[1]);\\n\\n\t\t\tQueue Q = new Queue(N);\\n\\n\t\t\tfor(int loop = 0; loop < N; loop++){\\n\\n\t\t\t\tinput_str = br.readLine().split(\"\\\\s+\");\\n\t\t\t\tQ.push(new Process(input_str[0],Integer.parseInt(input_str[1])));\\n\t\t\t}\\n\\n\t\t\tint current = 0;\\n\\n\t\t\tStringBuilder ans = new StringBuilder();\\n\\n\t\t\twhile(!Q.isEmpty()){\\n\\n\t\t\t\tProcess tmp = Q.pop();\\n\\n\t\t\t\tif(tmp.getTIME() <= LIMIT){\\n\\n\t\t\t\t\tcurrent += tmp.getTIME();\\n\t\t\t\t\tans.append(tmp.getName()).append(\" \").append(Integer.toString(current)).append(\"\\n\");\\n\\n\t\t\t\t}else{\\n\\n\t\t\t\t\tcurrent += LIMIT;\\n\t\t\t\t\ttmp.setTIME(tmp.getTIME()-LIMIT);\\n\t\t\t\t\tQ.push(tmp);\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tSystem.out.print(ans.toString());\\n\\n\t\t} catch (IOException e) {\\n\t\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f catch \u30d6\u30ed\u30c3\u30af\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t}\\n}\\n\\n\\nclass Process{\\n\\n\tprivate String name;\\n\tprivate int TIME;\\n\\n\tProcess(String arg_name,int arg_TIME){\\n\t\tname = arg_name;\\n\t\tTIME = arg_TIME;\\n\t}\\n\\n\tpublic String getName() {\\n\t\treturn name;\\n\t}\\n\\n\tpublic int getTIME() {\\n\t\treturn TIME;\\n\t}\\n\\n\tpublic void setTIME(int arg_TIME) {\\n\t\tTIME = arg_TIME;\\n\t}\\n}\\n\\nclass Queue{\\n\\n\tprivate Process[] table;\\n\tprivate int head;\\n\tprivate int tail;\\n\tprivate int size;\\n\tprivate int num_data;\\n\\n\tQueue(int arg_size){\\n\\n\t\tsize = arg_size;\\n\t\ttable = new Process[arg_size];\\n\t\thead = 0;\\n\t\ttail = 0;\\n\t\tnum_data = 0;\\n\t}\\n\\n\tboolean isEmpty(){\\n\\n\t\treturn num_data == 0;\\n\t}\\n\\n\tvoid push(Process process){\\n\\n\t\ttable[tail] = process;\\n\t\ttail = (tail+1)%size;\\n\t\tnum_data++;\\n\t}\\n\\n\tpublic Process pop(){\\n\\n\t\thead = (head+1)%size;\\n\t\tnum_data--;\\n\t\treturn table[(head-1+size)%size];\\n\t}\\n}\\n", "target": "231", "substitutes": {"BIG_NUM": ["BIGLUID", "BIGINTNum", "BIIGNUMNUM", "BIG_UID", "BIGLNUM", "BIGINTID", "BIGNUMNum", "BIIGNUMNum", "BIIGNUMUID", "BIGLNum", "BIGNUMID", "BIGNUMUID", "BIIGNUMID", "BIG_ID", "BIGINTNUM", "BIIG_Num", "BIIG_UID", "BIIG_NUM", "BIGINTUID", "BIIG_ID", "BIGNUMNUM", "BIG_Num", "BIGLID"], "MOD": ["DIR", "Mod", "RED", "AMP", "MAG", "MODE", "IDENT", "REG", "REM", "RM", "FD", "RC", "RO", "MAC", "DEC", "EXP", "BY", "mod", "OK", "CC", "COM", "POS", "FF", "MIN", "TAG", "AD", "MAX", "VER"], "br": ["r", "ctr", "Dr", "bro", "shr", "vr", "cr", "bc", "ber", "kr", "dr", "bh", "tr", "bridge", "Tr", "err", "bl", "bs", "bn", "bp", "Br", "mr", "Fr", "buf", "str", "BR", "b", "bd", "eb", "lr", "reader", "hr", "bi", "pr", "div", "wr", "bg", "bt", "browser", "jp", "ov", "yr", "fr", "er", "bb", "rb", "ch", "gr", "HR"], "input_str": ["input_res", "input_string", "input32coll", "input32res", " input_res", "input2dr", "inputLres", "input32err", "input4str", "input_stream", "attribute_coll", " input_coll", "interfacematbytes", "interfacematdef", "interfacematusr", "attribute_stri", "input_gr", "input_bytes", "inputmatbytes", "input_err", "input_sent", "inputmatusr", "inputmatdef", "input_part", "char_part", "input2stri", "interface_usr", "inputMatdef", "inputMatstr", " input_dr", "input4gr", " input_string", "input32str", "inputMatbytes", "attribute_dr", "char_sent", "interface_str", "interface_bytes", " input_stream", "inputMatusr", "input_stri", " input_gr", " input_err", "char_gr", "inputLstr", "input4sent", "input_dr", "inputmatstr", "char_str", "input2str", "interfacematstr", "input_usr", "input_coll", "inputLcoll", "input_arr", "input4part", "input_def", "input2coll", "inputLerr", "attribute_str", "interface_def", " input_arr"], "N": ["D", "Node", "I", "TN", "NUM", "NM", "SIZE", "NE", "NB", "n", "Size", "S", "P", "T", "NO", "NL", "R", "Count", "NS", "NR", "V", "NAME", "M", "NH", "GN", "Total", "NC", "C", "NN", "NA", "Num", "L", "Y", "J", "K", "NI", "NT", "B"], "LIMIT": ["LIFITE", "FLIGIP", "LIGITED", "LINITION", " LIMITION", "LENITE", "LIMET", "LIGit", "LEXIT", "LITITION", "LINIL", "LEMITED", "FLIGITED", "FLIGit", "FLIFITE", " LEMITION", "LEXit", "LEMITION", "LIMIL", "LEMITS", "LIMITED", "LIMITION", "LITIL", "FLIMIP", " LEMITED", " LIMITED", "FLIMET", "LITit", "LEMit", "SLEMITS", "LITITT", "SLIMit", "FLIMit", "LINIT", "FLIFit", " LIMIL", "LIMIP", "SLIMIT", "LENit", "LIMITS", "LIGIT", "LIGIP", "LIMITT", "LEMIP", "SLEMITT", "LIFET", "LIMITE", "LITITS", "LEMITT", "FLIFIT", "LINIP", "SLIMITT", "LEXET", " LEMIT", "FLIGIT", "SLIMITS", "LEXITE", "FLIFET", "LITITED", " LEMIL", "SLEMit", "LENET", "LINit", "LINITED", "LIFITT", "SLEMIT", "LEMIT", "LIMit", "LIFit", "FLIMITED", "LEMIL", "LENIT", "LIFIT", "LIFITS", "LITIT", "FLIMITE", "FLIMIT"], "Q": ["q", "D", "PO", "Z", "I", "F", "TX", "queue", "Buffer", "All", "NB", "Group", "Pool", "Que", "These", "MQ", "Qu", "G", "S", "Bus", "P", "Question", "PS", "T", "R", "Cl", "UE", "V", "QU", "M", "Ch", "W", "CH", "Questions", "C", "U", " q", "Query", "Cache", "QB", "Y", "L", "Pen", "J", "IQ", "K", "X", "B", "Qual"], "loop": ["coll", "feed", "l", "pl", "zero", "bc", "Loop", "batch", "level", "lo", "fly", "run", "go", "thread", "plot", "back", "list", "search", "comb", "echo", "scroll", "oop", "ost", "hex", "poll", "way", "flash", "play", "LO", "quit", "mix", "mode", "hop", "step", "sim", "counter", "layout", "continue", "multi", "iter", "roll", "other", "los", "oper", "cycle", "repeat"], "current": ["set", "num", "active", "result", "reported", "cur", "created", "position", "temp", "number", "used", "draw", "progress", "total", "now", "latest", "create", "currently", "n", "default", "top", "remote", "this", "update", "random", "client", "unique", "count", "collection", "recent", "sequence", "Current", "complete", "i", "cont", "open", "c", "aj", "max", "old", "counter", "present", "integer", "multi", "continue", "we", "local", "handle", "parent", "copy", "all", "to", "URRENT", "time", "next"], "ans": ["gs", " means", "uns", "ents", "eps", "works", "ras", "ons", "anc", "nets", "aus", "san", "rs", "anks", "ano", "eds", "ns", "ads", "ks", "ces", "beans", "ames", "ands", "ates", "ean", "arts", "ANS", "amps", "ats", "ens", "ants", "ags", "ls", "an", "uploads", "ares", "AN", "angs", "ann", "vs", "aos", "ams", "leans", "anes", "cs", "ations", "ins", "vers", "ds", "arms", "cons", "as", "qs", "posts", "anon", "rans", "ars", "ros"], "tmp": ["elt", "mm", "wx", "mp", "temp", "task", "tp", "jj", "pty", "perm", "rt", "sp", "m", "cp", "meta", "tt", "tf", "resp", "msg", "buff", "md", "attr", "stuff", "lib", "td", "prop", "ret", "cache", "img", "pro", "req", "yy", "orig", "pkg", "sup", "repl", "cmd", "nb", "tm", "mk", "gm", "comp", "aaa", "np", "emp", "xxx", "obj", "cmp", "txt", "tab", "old", "out", "jp", "sam", "t", "etc", "ctx", "proc", "aux", "nt", "expr"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n\tint K = Integer.parseInt(sc.next());\\n\tint ans = 0;\\n\tfor(int i = 1; i<=K ;i++){\\n\t\tfor(int j = 1; j<=K ;j++){\\n\t\t\tfor(int l = 1; l<=K ;l++){\\n\t\t\t\tans +=gcd(gcd(i,j),l);\\n\t\t\t}\\n\t\t}\\n\t}\\n    System.out.print(ans);\\n    return;\\n  }\\n\\n  static int gcd(int a, int b){\\n    int max= Math.max(a,b);\\n    int min= Math.min(a,b);\\n    if(max%min==0){\\n      return min;\\n    }else{\\n      return gcd(max%min, min);\\n    }\\n  }  \\n  \\n}\\n\\n\\n", "target": "6", "substitutes": {"sc": ["usc", "uc", "cc", "anc", "esc", "cur", "Sync", "sec", "cl", "sys", "system", "Scan", "ser", "bc", "sv", "sp", "cr", "nl", "sel", "sch", "RC", "sw", "res", "se", "sync", "scan", "sq", " Sc", "cs", "ner", "ss", "nc", "ok", "c", "osc", "Sc", "gc", "out", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "K": ["Z", "I", "F", "Key", "KING", "Kind", "KE", "KA", "N", "KK", "Disk", "KS", "VK", "G", "S", "KI", "P", "Context", "T", "KB", "Q", "V", "M", "Mask", "H", "C", "k", "OK", "KR", "Y", "L", "J", "PK", "X", "UK", "NK", "FK", "SK", "KEY", "B"], "ans": [" means", "ents", "uns", "ons", "eps", "offs", "nets", "vals", "aus", "rs", "ums", "eds", "ns", "ads", "ks", "ces", "ians", "ars", "ids", "ms", "users", "arts", "ANS", "amps", "ats", "ens", "ants", "ls", "an", "AN", "ann", "vs", "scan", "ams", "mas", "anes", "cs", "sets", "orts", "ins", "aps", "ds", "vers", "olds", "posts", "xs", "lan", "x", "outs", " scans"], "i": ["I", "ix", "name", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "ji", "li", "asi", "ij", "m", "ini", "this", "ai", "ki", "im", "ori", "ik", "ia", "init", "u", "ir", "ims", "bi", "it", "ib", "ui", "ie", "pi", "ti", "ic", "ci", "sim", "multi", "info", "ami", "y", "xi", "ii", "si", "di", "x", "mi"], "j": ["br", "q", "pt", "el", "ji", "jj", "o", "jo", "sp", "v", "ij", "n", "son", "jump", "jas", "bs", "ja", "or", "im", "bj", "oj", "job", "yy", "z", "it", "pr", "ie", "uj", "g", "json", "k", "rel", "aj", "js", "obj", "jp", "J", "bo", "kj", "y", "jc", "dj", "to", "je", "jl"], "l": ["lt", "il", "dl", "lc", "ll", "el", "hl", "jl", "len", "kl", "li", "pl", "yl", "lp", "m", "level", "al", "nl", "lo", "lb", "ql", "le", "lit", "lin", "list", "lr", "sl", "ls", "ml", "la", "isl", "g", "lv", "fl", "ul", "L", "tl", "ln", "lf", "ld", "lan", " L", "ly", "lu"], "a": ["ae", "r", "d", "ar", "ra", "oa", "o", "m", "aa", "da", "app", "sta", "sa", "al", "ai", "act", "A", "at", "ia", "la", "z", "ao", "ity", "ab", "ea", "apa", "ba", "aaa", "na", "aka", "c", "aj", "alpha", "w", "ma", "as", "eas", "p", "ac", "y", "au", "era", "aux", "va", "x", "ova", "am"], "b": ["br", "d", "bin", "sb", "ob", "o", "bar", "bc", "v", "m", "n", "db", "by", "bs", "lib", "eb", "f", "u", "fb", "z", "bi", "ib", "nb", "ab", "g", "ba", "k", "c", "bis", "t", "bb", "cb", "y", "be", "rb", "to", "erb", "B"], "max": ["r", "ca", "end", "ax", "dot", "maximum", "base", "prime", "co", "total", "h", "v", "m", "rand", "n", "default", "rank", "cover", "ge", "call", "sum", "mean", "largest", "ms", "tx", "act", "right", "scale", "gt", "inter", "res", "view", "recent", "range", "z", "mad", "dev", "full", "huge", "rest", "length", "mod", "k", "mx", "conf", "w", "diff", "ma", "exp", "most", "upper", "Max", "last", "add", "MAX", "size", "med", "aux", "x", "first", "hash"], "min": ["lt", "shift", "sun", "mid", "n", "me", "left", "only", "conf", "med", "first", "mins", "mini", "temp", "un", "part", "best", "len", "Min", "minute", "sin", "in", "doc", "le", "start", "mel", "amin", "sort", "no", "partial", "inner", "lock", "rest", "mode", "none", "inv", "diff", "local", "span", "dim", "sol", "rand", "small", "mean", "val", "mu", "lem", "req", "func", "delay", "mod", "ma", "MIN", "average", "p", "minus", "mi", "mn", "mm", "low", "dec", "sign", "m", "update", "sum", "im", "minimum", "inter", "index", "init", "lower", "range", "dist", "hide", "month", "sub"]}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner scanner=new Scanner(System.in);\\n\t\tlong ans = 1;\\n\t\tint N = scanner.nextInt();\\n\\n\t\tfor(int i = 0 ; i < N ; i++) {\\n\t\t\tlong A = scanner.nextLong();\\n\t\t\tif(A == 0) {\\n\t\t\t\tans = 0;\\n\t\t\t} else {\\n\t\t\t\tif(ans <= ((long)Math.pow(10, 18) / A) && ans >= 0) {\\n\t\t\t\t\tans = ans * A;\\n\t\t\t\t}else {\\n\t\t\t\t\tans = -1;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(ans);\\n\\n\t\tscanner.close();\\n\\n\t}\\n\\n}\\n", "target": "27", "substitutes": {"scanner": ["canener", " scanener", "seekning", "seekner", "annter", "Scanter", "scanener", "annner", "annisher", "Scanener", "Scaner", "canning", "scanter", "canter", " scanter", "seekter", "canisher", "annning", "Scanner", "scanisher", "canner", "scanning", "scaner", " scaner", "caner", "seekisher"], "ans": [" orphans", "uns", "ons", "reads", "anks", "flags", "os", "can", "ms", "lines", "ANS", " scripts", "ats", "ens", "als", "AN", "ams", "ones", "ins", "aps", "as", "actions", "xs", "ports", " fans", "lan", "offs", "ars", "names", " scans", "vals", "marks", "ns", "ads", "ks", "asks", "orders", "ags", " chars", "scan", "anes", "cs", "cons", "posts", "nets", "aus", "eds", "ians", "amps", " opens", "ants", " lines", "ls", "an", "mas", "orts", " beans", "ds", "arms", "books", "places", "rans", "outs", "ann", "gs", " means", " Ans", "ents", " flags", "eps", "ums", " offsets", "ids", "arts", "es", "ows", "vs", " spans", "vers", "olds", "ions", "lets"], "N": ["D", "I", "Node", "TN", "ND", "NM", "SN", "NP", "NE", "NB", "n", "No", "O", "Ni", "NG", "NO", "NL", "NS", "NR", "V", "NH", "M", "GN", "NC", "Sn", "NN", "Num", "NA", "L", "K", "Net", "Ne", "NI", "NT", "Ns"], "i": ["q", "I", "ix", "phi", "gi", "hi", "iu", "ip", "li", "id", "n", "m", "v", "me", "ini", "ai", "ni", "ms", "ki", "ind", "qi", " j", "us", "init", "j", "bi", "it", "ui", "is", "ie", " I", "pi", "g", "ti", "ic", "ci", "sim", "cli", "e", "PI", "multi", "t", "iter", "p", "gu", "y", "ii", "si", "di", "x", "mi"], "A": ["AA", "I", "F", "AU", "Alpha", "CA", "AY", "AC", "HA", "The", "Ax", "Av", "As", "SA", "G", "S", "P", "IA", "ANS", "ATA", "a", "Q", "GA", "LA", "JA", "V", "M", "TA", "AN", "Ant", "AV", "AL", "ACC", "AP", "C", "AM", "AB", "An", "AS", "NA", "AI", "L", "AR", "Area", "mA", "AF", "ACT", "PA", "B", "AT"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\npublic static void main(String[] args) {\\n\t\t\tScanner sc = new Scanner(System.in);\\n\t\t\tint n = Integer.parseInt(sc.nextLine());\\n\\n\t\t\tList<Integer> list = new ArrayList<Integer>();\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\t\t\t\tint d = Integer.parseInt(sc.nextLine());\\n\t\t\t\tif (!list.contains(d)) {\\n\t\t\t\t\tlist.add(d);\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(list.size());\\n\\n\t\t\tsc.close();\\n\t\t}\\n}", "target": "105", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "sh", "cr", "bc", "sv", "sp", "ch", "dc", "nl", "capt", "ctl", "cle", "sel", "spec", "irc", "sch", "sw", "sync", "fc", "tc", "scan", "sq", "cs", "ss", "nc", "pb", "c", "syn", "osc", "sim", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "sci", "desc", "sub"], "n": ["nu", "mn", "num", "nn", "l", "number", "N", "total", "o", "ns", "v", "m", "ne", "nan", "nl", "cn", "Ni", "ni", "sn", "on", "no", "nb", " N", "na", "nc", "np", "en", "c", "nw", "t", "ng", "nd", "p", "network", "ln", "net", "nt"], "list": ["set", "group", "ll", "array", "l", "number", "pre", "temp", "total", "li", "now", "tree", "pl", "tmp", "source", "level", "top", "detail", "print", "show", "LIST", "lat", "filter", "dict", "form", "ist", "lists", "search", "load", "sort", "collection", "test", "left", "sequence", "stack", "no", "listed", "cont", "data", "length", "table", "old", "L", "out", "other", "check", "def", "parent", "add", "all", "size", "st", "map"], "i": ["q", "I", "ix", "mill", "phi", "gi", "hi", "iu", "ei", "base", "chain", "ip", "li", "o", "id", "m", "me", "ini", "err", "uu", "ai", "im", "ind", "qi", "a", "us", "init", "u", "z", "j", "bi", "it", "ui", "ie", "is", "pi", "ti", "ic", "ci", "sim", "my", "multi", "iq", "gu", "iter", "y", "ii", "si", "di", "x", "mi"], "d": ["dh", "D", "pd", "dm", "dim", "fd", "dd", "id", "de", "ad", "dr", "sd", "dn", "da", "du", "md", "td", "dt", "ind", "hd", "b", "z", "j", "cd", "dx", "ud", "g", "c", "ds", "t", "nd", "p", "dL", "ld", "add", "did", "di", "ord"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.*;\\n\\nclass Main{\\n  public static void main(String[] args) throws java.lang.NumberFormatException{\\n    Scanner scan=new Scanner(System.in);\\n    StringBuilder input=new StringBuilder();\\n    do{\\n      input.append(scan.nextLine());\\n    }while(scan.hasNext());\\n\\n    for(char i='a';i<='z';i++){\\n      int count=0;\\n      for(int j=0;j<input.length();j++){\\n        if(input.toString().charAt(j)==i || Character.toUpperCase(input.toString().charAt(j))==Character.toUpperCase(i)){\\n          count++;\\n        }\\n      }\\n      System.out.println(i+\" : \"+count);\\n    }\\n  }\\n}\\n", "target": "242", "substitutes": {"scan": ["seek", "spin", "sql", "skip", "row", "con", "sb", "parse", "gate", "reach", "san", " Scan", "sys", "Scan", "system", "connect", "sv", "sin", "read", "in", "stat", "show", "can", "get", "report", "run", "scale", "auto", "se", "pass", "sm", "clean", "sync", "send", "scroll", "an", "search", "range", "sc", "find", "ner", "build", "store", "out", "check", "info", "span", "query", "ch", "ann", "see"], "input": ["q", "active", "empty", "sql", "mask", "cur", "background", "parse", "feed", "current", "temp", "ip", "xml", "total", "qa", "focus", "control", "context", "source", "read", "in", "batch", "raw", "update", "print", "csv", "get", "report", "run", "hello", "initial", "start", "form", "hidden", "str", "select", "view", "act", "image", "load", "init", "buffer", "history", "sequence", "null", "struct", "accept", "document", "PUT", "submit", "media", "template", "inner", "human", "join", "output", "request", "format", "unsigned", "local", "info", "quiet", "all", "Input", "query", "archive"], "i": ["I", "ix", "name", "ri", "key", "phi", "hi", "iu", "ei", "l", "chain", "ip", "point", "o", "li", "id", "n", "m", "ij", "me", "ini", "II", "in", "ai", "ki", "im", "qi", "a", "index", "f", "ia", "init", "u", "ims", "bi", "it", "is", "ui", "ie", "pi", "abi", "k", "ti", "ic", "ci", "c", "yi", "multi", "t", "iq", "p", "integer", "ami", "y", "iri", "ii", "xi", "oi", "si", "di", "x", "mi"], "count": ["num", "contact", "ount", "result", "coll", "ctr", "frequency", "found", "number", "cond", "total", "amount", "n", "err", "tf", "cast", "stat", "call", "sum", "report", "state", "Count", "ind", "cache", "index", "hold", "list", "match", "force", "const", "comment", "find", "core", "trace", "child", "nb", "length", "score", "c", "body", "max", "counter", "continue", "check", "flag", "quiet", "size", "add", "th", "nt", "hash"], "j": ["br", "q", "ix", "r", "pt", "og", "key", "att", "l", "jl", "ji", "jj", "h", "o", "jo", "v", "ij", "m", "n", "err", "jump", "ion", "state", "ja", "im", "ind", "bj", "b", "note", "oj", "on", "job", "u", "z", "it", "pr", "zone", "uj", "g", "you", "json", "k", "js", "obj", "aj", "jp", "J", "ph", "fr", "other", "t", "s", "p", "kj", "y", "jc", "last", "je", "x", "dj"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n    \tScanner parameter = new Scanner(System.in);\\n\\n        Integer input1 = parameter.nextInt();\\n\\n        if (input1 < 10) {\\n\\n        \tSystem.out.println(input1);\\n        } else if (input1 >= 10 && input1 < 100) {\\n\\n        \tSystem.out.println(9);\\n        } else if (input1 >= 100 && input1 < 1000) {\\n\\n        \tSystem.out.println(input1 - 90);\\n        } else if (input1 >= 1000 && input1 < 10000) {\\n\\n        \tSystem.out.println(909);\\n        } else if (input1 >= 10000 && input1 < 100000) {\\n\\n        \tSystem.out.println(input1 - 9090);\\n        } else {\\n\\n        \tSystem.out.println(90909);\\n        }\\n    }\\n}\\n", "target": "135", "substitutes": {"parameter": ["constector", "aramotor", "constotor", "identParameter", "parametric", "arametric", "paramector", "paramotor", "consteter", "scanParameter", "scanument", "signetric", "meterParameter", "scanmeter", "paramParameter", "parammeter", "meterument", "aramector", "paramument", "identmeter", "identument", "metereter", "constetric", "metermeter", "signector", "identeter", "signotor", "scaneter", "signeter", "arameter"], "input1": ["xml001", "history1", "outputOne", "actaj", "index1", "img41", "input591", "argument1", "actOnce", "inputaj", "formaj", "focus001", "thinkOne", "act51", "form0", "xmlOne", " inputOne", " input001", "thinkpre", "interface001", "present01", "focus191", "input51", "hiddenOne", "present1", "think001", "interface51", "height1", "submit1", "inputVers", "activeONE", " input0", "imgOne", "argument001", "pollone", "thinkOnce", "img1", "interfaceOne", "valueaj", "act1", "inputpre", "hiddenOnce", "poll1", "output1", "client001", "history001", "interfaceone", "hello1", "value0", "argumentpre", " inputVers", "helloOne", "clientOne", "act0", "input0", "history191", "formOne", "form51", "poll001", "client1", "interface01", "think1", "submitOne", "active1", "selectVers", "index0", "historyOne", "pollOnce", "intOnce", "input01", "model1", "inputOnce", "helloone", "presentOne", "input191", "heightOne", "actOne", "form001", "intOne", "focusVers", " input01", "activeOne", "argumentOne", "select001", "interface1", "form1", "Input01", "formone", "historyVers", "xml1", "int1", " input591", "hiddenONE", "focus1", "actone", "imgVers", "inputOne", "interfaceOnce", "intONE", " input51", "submit001", "input41", " input41", "inputONE", "inputone", "select191", "thinkone", "input001", "history41", "value1", "modelOnce", "xml591", "height001", "index01", "height591", "select1", "hello51", "activeOnce", "formpre", "hidden1", "Input0", "Input1", "output001", "present51"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\nimport java.math.BigInteger;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\t// \u5165\u529b\\n\t\tint n = sc.nextInt();\\n\t\tint[] t = new int[n];\\n\t\tint[] x = new int[n];\\n\t\tint[] y = new int[n];\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t    t[i] = sc.nextInt();\\n\t\t    x[i] = sc.nextInt();\\n\t\t    y[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\t// \u8a08\u7b97\\n\t\tString result = \"Yes\";\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t    int dx = 0;\\n\t\t    int dy = 0;\\n\t\t    int dt = 0;\\n\t\t    \\n\t\t    if(i == 0){\\n\t\t        dx = x[i];\\n\t\t        dy = y[i];\\n\t\t        dt = t[i];\\n\t\t    }else{\\n\t\t        dx = x[i] - x[i-1];\\n\t\t        dy = y[i] - y[i-1];\\n\t\t        dt = t[i] - t[i-1];\\n\t\t    }\\n\t\t    \\n\t\t    int d = abs(dx) + abs(dy);\\n\t\t    if(d > dt || d%2 != dt%2) result = \"No\";\\n\t\t}\\n\t\t\\n\t\t\\n\t\t// \u51fa\u529b\\n\t\tSystem.out.println(result);\\n\t}\\n}\\n\\n", "target": "221", "substitutes": {"sc": [" ser", " sn", " unsc", "sb", " SC", " scorer", "ser", "sys", "Scan", "n", " scr", "sa", " sk", " sh", "sch", " cons", "scan", " Sc", "cs", "ss", " rc", "sk", "Sc", " enc", "SC", "rc", "ch", " sp"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n    public static void main(String[] a){\\n\t\tint num1[] = new int[1000];\\n\t\tint num2[] = new int[1000];\\n\t\tint num3[] = new int[1000];\\n\t\tint num,i = 0;\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tnum = Integer.parseInt(scanner.next());\\n\t\tfor(i=0; i<num; i++) {\\n\t\t\tnum1[i] = Integer.parseInt(scanner.next());\\n\t\t\tnum2[i] = Integer.parseInt(scanner.next());\\n\t\t\tnum3[i] = Integer.parseInt(scanner.next());\\n\t\t\tif((Math.pow(num1[i], 2) + Math.pow(num2[i], 2) == Math.pow(num3[i], 2))\\n\t\t\t\t\t|| (Math.pow(num1[i], 2) + Math.pow(num3[i], 2) == Math.pow(num2[i], 2))\\n\t\t\t\t\t|| (Math.pow(num2[i], 2) + Math.pow(num3[i], 2) == Math.pow(num1[i], 2))){\\n\t\t\t\tSystem.out.println(\"YES\");\\n\t\t\t} else{\\n\t\t\t\tSystem.out.println(\"NO\");\t\\n\t\t\t} \\n\t\t}\\n\t\tscanner.close();\\n    }\\n}\\n", "target": "65", "substitutes": {"a": ["another", "d", "l", "o", "n", "m", "v", "aa", "sa", "buf", "A", "b", "f", "u", "an", "j", "data", "area", "na", "c", "input", "e", "w", "t", "s", "p"], "num1": ["num0", " num10", "num10", "numone", "numberOne", "th3", "n0", "plot10", "alphone", "plot1", "thone", "plot81", "num9", "NUM9", "thOne", "alph2", " num0", "number0", "number01", "num01", "n1", "number10", "NUMOne", "number3", "number2", "NUM0", "plot2", "alph01", "number9", " numOne", "alph1", "NUM1", "alphOne", "number81", "num81", "th2", " num9", "n2", "th01", "none", "alph3", "number1", " num81", "numOne", "n3", "th1", "th0"], "num2": ["Num02", "Numb", "num02", "numbertwo", "alph02", "number02", "number4", "alph2", " num4", "mon1", "formtwo", " num02", "draw2", "n4", "drawb", "draw3", "n1", "number3", "number2", "nu102", "form5", "alphtwo", "numb", "num5", "Num3", "num4", "form2", "form3", "nu2", "alph4", "nu3", "mon2", "draw02", "num102", "n2", "alph3", "mon4", "mon3", "mon102", "number1", "number5", "alph5", "n3", "number102", "numtwo", " numb", "Num2", "nu4"], "num3": ["alphgr", "testThree", "nuThree", "num03", "th3", "num33", " num03", " num4", "zero2", "alph2", "numthree", "n03", "note3", "thThree", "alph33", "num7", " numgr", "date3", "n4", "um7", "alphThree", "nu03", "number3", "number2", "zeroThree", "testthree", " num7", "numThree", "th33", "dategr", "num4", "notethree", "um3", "zero3", "alph4", "um1", "nu3", "mon2", "th2", "test03", "n2", "number7", "noteThree", "note03", "zero33", "um2", "alph3", "number1", "numgr", "mon4", "mon3", "mon03", "n3", " numthree", "alphthree", "nuthree", "date4", "test3", "datethree"], "num": ["set", "nu", "valid", "result", "snap", "cal", "dim", "con", "number", "NUM", "un", "len", "total", "n", "m", "hom", "nom", "alph", "comm", "su", "sum", "coord", "mon", "count", "um", "no", "nb", "div", "cum", "na", "np", "en", "Num", "none", "nm", "mult", "multi", "t", "net", "non"], "i": ["I", "ix", "q", "iat", "ex", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "l", "chain", "ip", "ji", "o", "li", "id", "n", "m", "ij", "me", "ini", "v", "err", "in", "batch", "this", "ai", "ki", "im", "ind", "qi", "index", "io", "ims", "j", "bi", "it", "ui", "ie", "is", "uri", "status", "pi", "g", "k", "ti", "ic", "ci", "sim", "yi", "cli", "isi", "multi", "t", "iter", "p", "ios", "info", "er", "ami", "y", "oi", "ii", "xi", "si", "di", "x", "mi"], "scanner": ["canener", "banener", "banner", "reachter", " scanatter", " scanener", " Scaner", " scanler", "reachrunner", "canler", "baninner", " Scanner", "scer", "caninner", "Scanter", "scanener", "canatter", "canrunner", "Scanener", "Scaner", "reacher", "scner", "scaninner", "reachner", "canutor", "scanutor", "scatter", "scanler", "banutor", "Scanrunner", " scanrunner", "scanter", " Scanrunner", " Scanter", "canter", " scanter", "scener", "Scanner", " scaninner", "canner", " scanutor", "scaner", " scaner", "scanatter", "caner", "reachler", "scanrunner"]}}
{"code": "public class Main {\\n    private static java.util.Scanner scanner = new java.util.Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n        int n = scanner.nextInt();\\n        int ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            String str = Integer.toString(scanner.nextInt(), 2);\\n            ans += str.length() - str.lastIndexOf(\"1\") - 1;\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "39", "substitutes": {"scanner": ["canener", "Scanator", "syer", " scanener", "syter", "reachrunner", " scanber", "scanber", "Scanter", "scanener", "Scanener", "canrunner", "Scaner", "reacher", "canator", "reachner", "syner", "Scanrunner", "scanrunner", "reachener", "scanter", "scanator", " scanator", " scanter", "Scanner", "canner", "scaner", " scaner", "caner", "Scanber", "syber"], "n": ["nu", "mn", "num", "d", "nn", "number", "l", "N", "gn", "total", "ns", "o", "m", "v", "nan", "ne", "nl", "cn", "sn", "count", "z", "j", "no", "nb", "nc", "na", "k", "np", "en", "c", "ng", "t", "p", "network", "ln", "net", "nt"], "ans": ["gs", "acs", "ents", "uns", " means", "ons", "pan", "aus", "rs", "anks", "reads", "eds", "ns", "ads", "ks", "obs", "alls", "ians", "os", "ars", "can", "yes", "ms", "lines", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "caps", "ls", "an", "AN", "ams", "ts", "anes", "cs", "orts", "ups", "ages", "ins", "aps", "ions", "cons", "s", "posts", "ots", "lets", "ports", "rans", "offs", "outs", "ann"], "i": ["q", "I", "ix", "ex", "phi", "gi", "hi", "iu", "ip", "li", "id", "m", "me", "ini", "ai", "ms", "ki", "im", "qi", "us", "init", "u", "io", "j", "bi", "it", "ui", "is", "ie", "pi", "g", "ti", "ic", "ci", "sim", "my", "cli", "multi", "t", "iter", "gu", "y", "ii", "si", "di", "x", "mi"], "str": ["br", "r", "elt", "ctr", "STR", "pt", "coll", "ll", "dec", "cur", "prefix", "sp", "dr", "tr", "msg", "seq", "print", "spec", "its", "stri", "sw", "sl", "arr", "z", "hex", "string", "sts", "it", "Str", "div", "text", "g", "vol", "obj", "mt", "txt", "ct", "utt", "fr", "t", "s", "p", "char", "iter", "stable", "ust", "st"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tint Q = sc.nextInt();\\n\t\tint[] A =new int[Q];\\n\t\tfor(int i = 0;i < Q;i++) {\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\tsc.close();\\n\t\tint[] point = new int[N];\\n\t\tfor(int i = 0;i < N;i++) {\\n\t\t\tpoint[i] = K - Q;\\n\t\t}\\n\t\tfor(int i = 0;i < Q;i++) {\\n\t\t\tpoint[A[i]-1]++;\\n\t\t}\\n\t\tfor(int i = 0;i < N;i++) {\\n\t\t\tSystem.out.println(point[i] > 0 ? \"Yes\" : \"No\");\\n\t\t}\\n\t}\\n}", "target": "102", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", "sb", "sec", "co", "cl", "sys", "system", "ser", "sh", "sv", "sp", "bc", "cr", "inc", "Scan", "dc", "ck", "ctl", "capt", "ec", "sch", "sync", "fc", "tc", "ctrl", "scan", "sq", " Sc", "cont", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "ng", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "sub"], "N": ["Z", "I", "D", "Node", "ND", "NM", "NI", "SN", "NE", "NB", "n", "O", "G", "S", "Ni", "P", "OUT", "T", "NO", "NL", "R", "NS", "Na", "NR", "V", "M", "AN", "NC", "H", "C", "NA", "L", "J", "X", "NN", "NT", "B", "Ns"], "K": ["Z", "I", "D", "E", "KING", "KE", "KA", "KK", "KS", "G", "S", "P", "T", "R", "V", "M", "W", "H", "C", "U", "k", "Kat", "OK", "KR", "NA", "L", "PK", "J", "X", "UK", "SK", "B"], "Q": ["q", "Z", "I", "D", "F", "E", "NE", "NB", "Que", "O", "G", "Qu", "MQ", "S", "P", "T", "R", "UE", "V", "QU", "IF", "M", "W", "DF", "CH", "H", "C", "U", "Query", "Y", "L", "J", "IQ", "X", "QL", "Length", "Qual"], "A": ["I", "AA", "Array", "AU", "E", "Alpha", "CA", "Point", "AE", "AC", "The", "At", "As", "SA", "S", "P", "Ar", "T", "IA", "a", "V", "LA", "This", "AV", "AP", "C", "AM", "AB", "An", "NA", "L", "Bar", "AI", "AR", "EA", "X", "alpha", "ac", "BA", "AF", "B", "AT"], "i": ["set", "I", "ix", "ri", "phi", "gi", "hi", "iu", "zi", "ei", "iy", "base", "ip", "fi", "ji", "chain", "li", "id", "m", "ij", "ini", "wi", "batch", "this", "ski", "ai", "ni", "ki", "iti", "im", "ind", "qi", "ori", "us", "init", "\u0438", "fire", "io", "ims", "j", "bi", "it", "ity", "umi", "ui", "ie", "is", "uri", "pi", "inner", "et", "eu", "iso", "ti", "ic", "ci", "c", "sim", "MI", "yi", "cli", "multi", "info", "ios", "ami", "y", "oi", "xi", "ii", "si", "uni", "di", "mi"], "point": ["arc", "block", "q", "offset", "post", "pt", "result", "points", "pen", "row", "position", "number", "error", "Point", "draw", "entry", "o", "bit", "value", "stroke", "cp", "word", "ace", "pair", "process", "print", "P", "mark", "tag", "val", "art", "a", "shape", "index", "pointer", "object", "mate", "location", "sequence", "board", "trace", "comment", "message", "zone", "table", "pad", "step", "angle", "out", "local", "p", "command", "page", "line", "window"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String args[]){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int count = 0;\\n    int[] ary = new int[n];\\n    for(int c = 0;c<n;c++){\\n      ary[c] = sc.nextInt();\\n    }\\n    for(int c = 1;c<n-1;c++){\\n      if(ary[c]>ary[c-1]&&ary[c+1]>ary[c]){\\n        count++;\\n      }else if(ary[c+1]<ary[c]&&ary[c]<ary[c-1]){\\n        count++;\\n      }\\n    }\\n    System.out.println(count);\\n  } \\n}", "target": "96", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "bc", "cr", "sv", "sp", "inc", "dc", "nl", "ctl", "capt", "cle", "sch", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "pb", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "n": ["num", "mn", "r", "name", "nn", "nia", "number", "l", "un", "N", "o", "ns", "and", "m", "v", "ne", "nan", "nl", "cn", "inn", "sn", "a", "an", "z", "j", "no", "nb", "i", " N", "pi", "nc", "na", "k", "np", "fn", "en", "ct", "w", "ng", "t", "p", "s", "nor", "ln", "network", "net", "size", "nt", "x", "non", "names"], "count": ["num", "ount", "ctr", "coll", "acc", "result", "frequency", "found", "current", "number", "cond", "total", "now", "amount", "summary", "stat", "call", "sum", "cell", "report", "state", "thread", "Count", "cache", "ind", "index", "list", "code", "scroll", "test", "const", "must", "trace", "find", "nb", "cont", "C", "status", "length", "score", "ct", "counter", "gc", "check", "t", "other", "iter", "flag", "th", "add", "size", "nt"], "ary": ["wise", "tif", "ray", "basic", "ar", "ellow", "necessary", "secondary", "red", "along", "itary", "sys", "holy", "exclusive", "prefix", "ta", "iary", "stone", "tf", "ne", "maybe", "pair", "buff", "ay", "etry", "tar", "ical", "are", "ter", "arry", "inter", "phrase", "xx", "ario", "ARY", "ry", "aro", "also", "note", "hold", "aries", "must", "ard", "arie", "arity", "primary", "ared", "sky", "het", "ark", "arb", "ari", "etric", "erey", "phy", "bis", "ory", "wald", "er", "iq", "ny", "bare", "binary", "re", "bird", "aux", "ty", "ery"], "c": ["arc", "uc", "ca", "lc", "col", "cc", "anc", "coll", "cur", "oc", "from", "cos", "con", "l", "chain", "co", "category", "cr", "bc", "ce", "v", "cp", "unc", "\u00e7", "dc", "cor", "err", "ec", "call", "can", "cu", "cam", "cache", "at", "b", "fc", "f", "fac", "xc", "tc", "cat", "cv", "cd", "i", "C", "cont", "cs", "g", "vc", "nc", "content", "cm", "abc", "ic", "ci", "com", "conf", "ct", "gc", "ac", "mc", "pc", "rc", "conv", "cf"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int a[] = new int[5];\\n        int b[] = new int[5];\\n        int c[] = new int[5];\\n        int min = 0;\\n        int minsize = 9;\\n        int sum = 0;\\n\\n        for (int i = 0; i < 5; i++) {\\n            a[i] = scan.nextInt();\\n            b[i] = a[i] % 10;\\n            c[i] = a[i] / 10;\\n            if((b[i] <= minsize) && (b[i] != 0)){\\n                min = i;\\n                minsize = b[i];\\n            }\\n        }\\n\\n        for(int x = 0; x < min ; x++){\\n\\n            if(b[x] != 0 ){\\n                c[x] = c[x] + 1;\\n            }\\n            sum = c[x]*10 + sum;\\n        }\\n\\n        for(int y = (min + 1) ; y < 5 ; y++){\\n\\n            if(b[y] != 0 ){\\n                c[y] = c[y] + 1;\\n            }\\n            sum = c[y]*10 + sum;\\n        }\\n\\n        sum = sum + c[min]*10 + b[min];\\n        System.out.println(sum);\\n\\n    }\\n}", "target": "63", "substitutes": {"scan": ["set", "seek", "r", "spin", "skip", "row", "bin", "reach", "gate", "parse", "con", "san", " Scan", "ser", "sys", "Scan", "system", "v", "m", "n", "sin", "read", "in", "by", "stat", "ne", "can", "get", "run", "scale", "se", "sync", "scroll", "an", "range", "sc", "find", "ner", "g", "out", "check", "p", "re", "be", "proc", "query", "ch", "ann"], "a": ["ae", "va", "r", "ar", "l", "oa", "o", "ta", "n", "m", "aa", "v", "app", "sta", "sa", "ai", "A", "at", "ia", "an", "la", "ao", "ab", "ea", "area", "apa", "pa", "pi", "ba", "na", "ach", "aaa", "fa", "ap", "alpha", "as", "t", "s", "p", "ma", "ac", "eas", "au", "ata", "am"], "b": ["br", "r", "wb", "bin", "sb", "ob", "l", "mb", "o", "bc", "n", "v", "m", "bf", "bh", "gb", "ch", "db", "bl", "bs", "bp", "eb", "reb", "f", "fb", "z", "bi", "it", "ib", "nb", "is", "ab", "g", "ba", "bg", "bt", "bis", "bo", "p", "bb", "cb", "be", "rb", "B"], "c": ["r", "lc", "ca", "cc", "d", "cal", "cur", "ar", "con", "cos", "l", "chain", "co", "o", "cf", "cats", "bc", "cr", "n", "m", "v", "cp", "ce", "dc", "ec", "cn", "csv", "cu", "cz", "cache", "count", "fc", "f", "u", "tc", "z", "cat", "cv", "ctrl", "sc", "cd", "C", "cs", "g", "vc", "comp", "nc", "cm", "ci", "com", "conf", "ct", "e", "gc", "t", "etc", "p", "ac", "cb", "s", "mc", "rc", "comments", "ch"], "min": ["lt", "mn", "mins", "mini", "key", "minus", "dim", "sun", "un", "l", "sol", "len", "Min", "mid", "li", "id", "minute", "m", "n", "member", "side", "emin", "v", "in", "stat", "level", "lo", "sel", "section", "small", "im", "start", "mel", "minimum", "mon", "index", "pos", "amin", "init", "sort", "list", "lower", "delay", "j", "Mini", "mod", "mine", "hide", "max", "local", "MIN", "s", "size", "second", "span", "mi", "mit"], "minsize": ["msiz", "minsizer", "mersizer", "mspace", "minsized", "mersization", "mnpace", "minspace", "mnized", "msize", "mersiz", "merspace", "mnize", "minsiz", "mniz", "mysization", "mersize", " minsiz", " minspace", " minsized", "mysiz", " minsizer", " minsization", "mysizer", "minsization", "msizer", "mersized", "mysize"], "sum": ["set", "acc", "log", "n", "comment", "score", "cmp", "alpha", "med", "Sum", "num", "sat", "weight", "draw", "h", "now", "zero", "summary", "cast", "count", "match", "sort", "share", "cat", "um", "mass", "good", "sim", "diff", "sam", "s", "result", "su", "important", "mean", "val", "hist", "cache", "umm", "fac", "u", "mem", "cont", "status", "ul", "out", "other", "average", "add", "si", "hash", "mm", "cal", "cos", "total", "v", "m", "ash", "msg", "process", "report", "cu", "index", "stack", "cum", "vol", "mix", "hum", "max", "ass", "size"], "i": ["q", "I", "ix", "ri", "phi", "gi", "hi", "iu", "details", "zi", "ei", "iy", "chain", "ip", "ji", "li", "o", "id", "v", "m", "ij", "me", "ini", "series", "ai", "ki", "im", "ind", "ori", "qi", "list", "us", "init", "u", "\u0438", "io", "ims", "j", "bi", "it", "is", "ui", "ie", "uri", "status", "pi", "g", "iso", "ti", "ic", "ci", "sim", "my", "cli", "multi", "info", "iter", "ami", "iri", "xi", "ii", "oi", "si", "to", "di", "mi"], "x": ["q", "ix", "ex", "wx", "ax", "att", "el", "php", "pan", "ox", "l", "co", "xml", "gal", "pl", "ect", "ace", "batch", "xf", "cross", "cell", "lat", "xy", "tx", "act", "inx", "at", "xe", "xx", "px", "xc", "z", "left", "j", "xes", "ext", "dx", "lex", "crop", "g", "ick", "mx", "xt", "xxx", "ct", "ph", "w", "exp", "check", "X", "rx", "ux", "nex", "xi", "xp", "box", "fx", "time", "window"], "y": ["ye", "hey", "pt", "sy", "hot", "ym", "yet", "iy", "h", "yl", "height", "py", "ky", "gy", "ch", "yu", "zy", "hy", "ay", "ey", "uy", "cy", "lat", "xy", "fy", "any", "ya", "yer", "ry", "scroll", "yy", "z", "j", "yt", "vy", "oy", "sky", "axy", "xxx", "mobile", "Y", "my", "wy", "yr", "out", "ny", "ady", "ly", "yd", "yn", "kit", "ty", "ery", "yo"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main { \\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int N = in.nextInt();\\n        int count = 0;\\n        \\n        boolean primes[] = new boolean [100000000];\\n        for(int n = 2; n < primes.length; n++){\\n            if(primes[n]) continue;\\n            for(int m = 2 * n; m < primes.length; m += n){\\n                primes[m] = true;\\n            }\\n        }\\n               \\n        while (N != 0) {\\n            int num = in.nextInt();\\n            if (!primes[num]) count++;\\n            N--;\\n        }\\n        \\n        System.out.println(count);\\n    }\\n}", "target": "226", "substitutes": {"in": ["r", "mm", "gin", "bin", "inf", "l", "asin", " din", "isin", " out", "o", "rt", "id", "log", "inc", "h", "sin", "ini", "err", "source", "by", "doc", "per", "inn", "IN", "sum", "get", "run", "ind", "on", "In", "init", "world", "io", "reader", "it", "scan", "null", "din", "is", "i", "thin", "inner", "en", "ins", "input", "std", "conf", "out", "check", "cin", "info", "add", "net", "all", "readable", "line"], "N": ["D", "Z", "Node", "TN", "FN", "E", "NM", "NI", "SN", "NP", "NB", "Size", "NV", "No", "G", "S", "P", "NG", "OUT", "T", "R", "Count", "NS", "Q", "A", "NR", "V", "M", "MN", "NC", "H", "C", "Number", "Num", "Y", "L", "NA", "K", "J", "CN", "Length", "Index", "NN", "NT", "B"], "count": ["ount", "result", "ctr", "found", "current", "number", "NUM", "cond", "total", "amount", "call", "print", "sum", "report", "state", "thread", "Count", "cache", "ind", "list", "index", "match", "const", "trace", "find", "no", "nb", "C", "length", "quit", "score", "c", "max", "ct", "counter", "out", "check", "t", "continue", "flag", "add", "size", "quiet", "nt"], "primes": ["PRurities", "prurities", "piments", "prtimes", "prime", "thires", "Prime", "plimens", " prurities", " prime", "prices", "pimens", "priimes", " prriors", "Princes", "grtimes", "ptices", "pltimes", " prices", " prtimes", " prises", "trises", "primens", "thices", "priimens", " priments", "prims", "Prims", " primens", "ptires", "triments", "plimes", "trtimes", "priime", "PRimes", "princes", " prims", "prises", "priments", "prires", "thimes", "ptimes", "grimens", "Prtimes", " princes", "prriors", "grriors", "Prurities", "pises", "pritimes", "trimens", "thims", "plriors", "PRinces", "Primes", "trimes", "Priments", "ptims", " prires", "pimes", "PRims", "Primens", "grimes"], "n": ["q", "r", "ll", "number", "nan", "ne", "nl", "sn", "note", "f", "on", "na", "c", "e", "y", "net", "all", "x", "nu", "un", "l", "o", "h", "ns", "conn", "ren", "a", "z", "no", "g", "nc", "k", "w", "local", "ng", "s", "ln", "yn", "nn", "gn", "al", "remote", "ind", "an", "nb", "i", "pi", "nw", "out", "p", "nor", "mn", "name", "con", "node", "v", "dn", "cn", "b", "norm", "j", "np", "en", "obj", "normal", "t", "nt"], "m": ["mn", "mm", "dm", "pm", "mo", "ym", "met", "perm", "module", "om", "me", "km", "mun", "ms", "vm", "mr", "arm", "mu", "mut", "im", "esm", "lem", "sm", "M", "mem", "mate", "j", "um", "bm", "gm", "tm", "mk", "i", "g", "mx", "cm", "k", "mod", "mobile", "sim", "mt", "my", "ma", "wm", "p", "mac", "em", "y", "mc", "span", "mi", "am"], "num": ["valid", "nu", "pn", "result", "tim", "cal", "con", "dim", "number", "NUM", "temp", "ver", "total", "nom", "msg", "alph", "uu", "item", "sum", "mark", "cu", "mu", "mon", "index", "test", "unit", "um", "umi", "cum", "na", "umber", "np", "good", "Num", "cmp", "nm", "check", "info", "nam", "th", "mat", "non"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Comparator;\\nimport java.util.List;\\nimport java.util.Scanner;\\nimport java.util.stream.Collectors;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    private void run() {\\n        Scanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n        List<Integer> p = new ArrayList<>();\\n        for (int i = 0; i < N; i++) {\\n            p.add(i, scanner.nextInt());\\n        }\\n        List<Integer> q = p.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList());\\n        int count = 0;\\n        for (int i = 0; i < N; i++) {\\n            if(p.get(i) != q.get(i)){\\n                count++;\\n            }\\n        }\\n        if(count == 2 || count == 0) {\\n            System.out.println(\"YES\");\\n        }else{\\n            System.out.println(\"NO\");\\n        }\\n\\n    }\\n\\n}", "target": "82", "substitutes": {"scanner": ["canener", "Scanator", " scanatter", " scanener", " Scaner", "searchner", " Scanner", "caninner", "Scanter", "scanener", "canatter", "Scaninner", "Scanener", "Scaner", "searchter", "scaninner", "searchatter", " Scanator", "scanter", " Scanter", "searchener", "scanator", " scanator", " scanter", "canter", "Scanner", " scaninner", "canner", "scaner", " scaner", "scanatter", "caner"], "N": ["D", "Z", "I", "TN", "FN", "ND", "NM", "SN", "NP", "NE", "NB", "n", "No", "S", "Ni", "NG", "P", "T", "NL", "NO", "R", "NS", "Q", "Na", "NR", "V", "M", "NH", "H", "NC", "Sn", "C", "Number", "NN", "Num", "Y", "L", "NA", "K", "J", "NI", "NT", "Ns"], "p": ["pd", "pt", "ping", "pm", "mp", "php", "pre", "ip", "vp", "tp", "wp", "o", "pl", "perm", "sp", "n", "cp", "m", "lp", "plan", "rep", "pe", "pg", "per", "bp", "P", "pp", "fp", "pos", "pro", "pkg", "pers", "pr", "pa", "pi", "pb", "np", "c", "jp", "ap", "exp", "op", "ps", "pc"], "i": ["ix", "zi", "iu", "base", "ei", "li", "me", "ai", "ki", "f", "ik", "is", "eu", "ic", "c", "e", "parent", "y", "di", "x", "ri", "l", "chain", "ip", "point", "o", "id", "ij", "in", "client", "io", "z", "slice", "bi", "it", "inner", "g", "k", "ci", "sim", "cli", "iq", "ii", "phi", "php", "print", "ni", "ind", "u", "\u0438", "pi", "xi", "si", "mi", "I", "gi", "m", "ini", "err", "im", "qi", "index", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "info", "iter"], "q": ["ll", "aq", "queue", "requ", "qu", "h", "qa", "sh", "v", "n", "eq", "ck", "qual", "ql", "pp", "mu", "Q", "qi", "f", "z", "qq", "j", "pkg", "que", "qv", "ue", "gm", "sq", "g", "quit", "qt", "quant", "iq", "qs", "y", "dq", "query"], "count": ["num", "contact", "ount", "ctr", "result", "coll", "frequency", "found", "current", "number", "cond", "total", "amount", "n", "stat", "call", "sum", "cell", "report", "Count", "ind", "cache", "index", "list", "code", "match", "force", "scroll", "search", "z", "must", "trace", "find", "comment", "nb", "cont", "status", "length", "score", "c", "conf", "ct", "counter", "gc", "out", "t", "check", "continue", "flag", "add", "size", "all", "nt", "cf"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        int startA = 0;\\n        boolean isA = false;\\n        int endZ = 0;\\n        for (int i=0; i<s.length();i++) {\\n            if (!isA && \"A\".equals(s.substring(i,i+1))) {\\n                startA = i;\\n                isA = true;\\n            } else if (\"Z\".equals(s.substring(i,i+1))) {\\n                endZ = i;\\n            }\\n        }\\n        System.out.println(endZ - startA +1);\\n    }\\n}", "target": "109", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "sh", "ser", "cr", "bc", "sv", "sp", "ec", "capt", "cle", "sel", "sch", "sw", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "ng", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "s": ["gs", "r", "sql", "sb", "l", "rs", "abs", "sys", "h", "ns", "sv", "sp", "n", "m", "strings", "ws", "bs", "S", "os", "ms", "its", "less", "sw", "ats", "str", "b", "sl", "ls", "ims", "sts", "is", "ts", "sq", "g", "ss", "js", "gets", "t", "qs", "p", "ps", "xs", "conv"], "startA": ["endL", " startC", "startAs", "StartG", "StartB", "startS", "matchB", "startL", "startAn", "openG", "StartAs", "openA", "beginC", "matchAn", "endA", "openAs", "startB", "beginS", "beginB", "openB", "StartA", " startB", " startG", "endC", "endAn", " startL", "matchA", " startAs", " startAn", " startS", "beginA", "matchL", "endS", "endB", "startG", "startC"], "endZ": [" endT", "startz", "endZero", "startS", "enableZ", "endedQ", "endedS", "startQ", "endedZone", "endT", "enableZero", " endZI", "rightZI", "endedZX", " endZero", "endedZ", " endz", "enableZX", "endz", " endZone", "rightZ", "endZone", "endZI", "startZ", "rightZX", "startT", "stopS", "rightZero", "endedT", "endS", "stopZX", "stopQ", "startZX", " endZX", "endZX", "startZone", "endQ", "stopZ", "endedz", "enableZI"], "i": ["I", "ix", "ri", "sql", "phi", "gi", "hi", "iu", "zi", "ei", "iy", "ip", "ji", "li", "id", "n", "m", "ij", "me", "ini", "v", "in", "batch", "this", "ai", "ni", "ki", "go", "mu", "im", "ind", "qi", "a", "ori", "index", "init", "u", "io", "j", "bi", "it", "ui", "uri", "ie", "is", "status", "pi", "\u00ed", "eu", "ti", "ic", "ci", "sim", "yi", "cli", "my", "multi", "exp", "info", "gu", "y", "iri", "ii", "xi", "oi", "si", "di", "x", "mi"], "isA": ["IsP", "appA", "isAR", "issP", " isAn", "IsAn", " isAM", "indexB", "isaAlpha", "indexA", "isB", " isAlpha", "isAM", "appP", "issAR", "isaP", " isB", " isZ", "issA", "appAlpha", " isP", "isAn", "isP", "isaA", "indexAn", "indexAM", "appZ", "IsA", "isZ", " isAR", "IsAM", "IsAR", "isaZ", "isAlpha", "IsB"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int K = sc.nextInt();\\n    int S = sc.nextInt();\\n    int ans = 0;\\n    int sum = 0;\\n    \\n    for(int i=0; i<=K; i++){\\n      for(int j=0; j<=K; j++){\\n        sum = S-(i+j);\\n        if(0 <= sum && sum <= K){\\n          ans++;\\n        }\\n      }\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "29", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "cr", "bc", "sv", "sp", "inc", "dc", "ck", "ctl", "cle", "sch", "sw", "se", "sync", "tc", "ctrl", "scan", "sq", "cs", "ss", "nc", "c", "osc", "Sc", "out", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "st"], "K": ["Z", "I", "D", "F", "Key", "SI", "KING", "KE", "KA", "N", "KK", "KS", "KC", "VK", "G", "KI", "P", "T", "KB", "Q", "V", "M", "W", "AN", "KN", "H", "C", "k", "KR", "Y", "L", "J", "PK", "X", "UK", "FK", "SK", "KEY", "B"], "S": ["Z", "I", "D", "CS", "SI", "E", "TS", "N", "JS", "G", "SA", "SP", "P", "T", "SU", "R", "NS", "Q", "V", "M", "SL", "BS", "H", "C", "U", "L", "SS", "J", "X", "s", "SC", "SK", "B"], "ans": ["checks", "gs", "ents", "uns", "ons", "vals", "anks", "ums", "eds", "ns", "ks", "ians", "ars", "ms", "lines", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "us", "ls", "an", "ows", "ims", "AN", "ann", "vs", "results", "ams", "ts", "cs", "sets", "ss", "ations", "ins", "olds", "aps", "as", "cons", "s", "posts", "ots", "xs", "ps", "stats", "offs", "outs", "names"], "sum": ["Sum", "num", "set", "result", "acc", "cal", "SI", "cos", "ums", "total", "zero", " SUM", "sign", "n", "summary", "ash", "sa", "tail", "su", "square", "mean", "mu", "SU", "scale", "se", "count", "index", "fac", "match", "mem", "sup", "um", "si", "ss", "cum", "na", "vol", "score", "ul", "sim", "ass", "alpha", "out", "diff", "sam", "average", "s", "add", "size", "med", "cost", "hash"], "i": ["I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "ji", "li", "asi", "ij", "m", "ini", "ai", "ki", "im", "ind", "qi", "inter", "ik", "ia", "u", "ims", "bi", "it", "ui", "is", "ie", "uri", "pi", "ti", "ic", "ci", "sim", "yi", "multi", "iq", "info", "ami", "y", "ii", "xi", "si", "di", "x", "mi"], "j": ["br", "q", "jac", "jit", "el", "l", "ji", "jj", "jo", "v", "ij", "son", "err", "jump", "jas", "bs", "ge", "ja", "im", "bj", "b", "oj", "job", "yy", "z", "bi", "it", "ie", "pr", "uj", "g", "json", "k", "rel", "js", "aj", "obj", "jp", "J", "ph", "bo", "other", "kj", "y", "jc", "jack", "dj", "je", "jl"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\tStringBuilder sa = new StringBuilder(in.next());\\n\t\tStringBuilder sb = new StringBuilder(in.next());\\n\t\tStringBuilder sc = new StringBuilder(in.next());\\n\\n\t\tchar nextTurn = 'a';\\n\t\tint N = sa.length() + sb.length() + sc.length();\\n\t\twhile(true){\\n\t\t\tif (nextTurn == 'a') {\\n\t\t\t\tif (sa.length() == 0) {\\n\t\t\t\t\tSystem.out.println(\"A\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tnextTurn = sa.charAt(0);\\n\t\t\t\tsa.delete(0, 1);\\n\t\t\t} else if (nextTurn == 'b') {\\n\t\t\t\tif (sb.length() == 0) {\\n\t\t\t\t\tSystem.out.println(\"B\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tnextTurn = sb.charAt(0);\\n\t\t\t\tsb.delete(0, 1);\\n\t\t\t} else {\\n\t\t\t\tif (sc.length() == 0) {\\n\t\t\t\t\tSystem.out.println(\"C\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tnextTurn = sc.charAt(0);\\n\t\t\t\tsc.delete(0, 1);\\n\t\t\t}\\n\t\t}\\n\t\tin.close();\\n\t}\\n}", "target": "11", "substitutes": {"in": ["r", "mm", "gin", "d", "spin", "bin", "inf", "con", "from", "l", "asin", " din", "isin", "rt", "id", "inc", "and", "n", "m", "ad", "ini", "err", "source", "read", "doc", "vin", "inn", "rin", "IN", "file", "get", "run", "ind", "on", "In", "init", "io", "win", "reader", "it", "scan", "din", "is", "i", "thin", "stream", "inner", "pi", "ze", "ic", "en", "ins", "input", "std", "conf", "out", "as", "t", "cin", "info", "check", "iter", "ln", "copy", "all", "query", "line", "mi"], "sa": ["acs", "ca", "oa", "sea", "ta", "so", "da", "aa", "sta", "asa", "ama", "SA", "sha", "sama", "wa", "ua", "Sa", "ai", "ja", "asha", "a", "osa", "se", "ia", "la", "ga", "ao", "ampa", "mas", "sq", "pa", "apa", "ba", "aaa", "na", "aka", "asu", "fa", "ada", "sam", "ma", "as", "ha", "ka", "au", "si", "va"], "sb": ["gs", "sbm", "lbs", "sf", "wb", "shop", "sg", "ob", "rb", "sys", "sh", "bc", "sp", "zb", "obs", "gb", "bh", "stab", "db", "lp", "bf", "lab", "bs", "bp", "lb", "src", "ub", "bj", "gob", "b", "eb", "sl", "sm", "ls", "ssl", "fb", "ib", "nb", "sq", "bg", "pb", "usb", "bt", "bis", "rob", "kb", "sam", "s", "bb", "cb", "SB", "si", "erb", "B", "sub"], "sc": ["usc", "arc", "acs", "lc", "cc", "anc", "esc", "sec", "cgi", "qu", "cl", "sh", "so", "cr", "sp", "bc", "sv", "spe", "dc", "ec", "ctl", "sche", "cle", "cu", "sch", "enc", "sw", "tch", "fc", "ls", "tc", "cv", "sq", "cs", "sci", "ss", "nc", "pb", "ci", "c", "com", "osc", "cmp", "ct", "Sc", "gc", "cons", "scl", "asc", "etc", "isc", "cb", "SC", "mc", "pc", "rc", "css", "ch", "desc", "st"], "nextTurn": ["futureTry", "tenTry", "nextTry", "nextHash", "quotePain", "patternChip", " nextChip", "patternLoop", "wantTurn", "drawHash", "seeChip", " nextPol", "currentLoop", "quoteTurn", "wantScript", "nextPain", "drawForm", "entryChip", "tenHash", "futureForm", " nextLoop", "newLong", "futureHash", "nextLoop", "futureTurn", "seeView", " nextView", " nextLong", "patternturn", "nextChip", "futurePain", "entryTurn", "drawTry", "currentturn", "tenTurn", "nextForm", "currentLong", " nextScript", "currentTurn", "seePol", "drawTurn", "newTurn", "entryturn", "newLoop", "entryLoop", "nextPol", "nextturn", "tenForm", "nextScript", "patternTurn", " nextturn", "wantturn", "wantPol", "newPol", "newturn", "futureLoop", "seeTurn", "tenPol", "quoteLoop", " nextPain", "nextView", "tenChip", "tenView", "quoteturn", "newScript", "nextLong", "futureturn"], "N": ["Z", "I", "D", "F", "E", " n", "NB", "n", "O", "G", "S", "P", "T", "R", "NS", "Q", "A", "NR", "V", "M", "C", "L", "K", "J", "X", "NN", "B", "Ns"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        long a = sc.nextLong();\\n        long b = sc.nextLong();\\n        long c = sc.nextLong();\\n        long d = sc.nextLong();\\n        long ans = 0, l = 0, as = 0, bs = 0;\\n\\n        if (c > d) {\\n            long f = c;\\n            c = d;\\n            d = f;\\n        }\\n\\n        l = lcm(c, d);\\n        as = (a - 1) - (((a - 1) / c) + ((a - 1) / d) - ((a - 1) / l));\\n        bs = b - ((b / c) + (b / d) - (b / l));\\n        ans = bs - as;\\n        System.out.println(ans);\\n        sc.close();\\n    }\\n    \\n    public static long lcm(long m, long n) {\\n        return m * (n / gcd(m, n));\\n    }\\n    \\n    public static long gcd(long a, long b) {\\n        if (b == 0) {\\n            return a;\\n        }\\n        return gcd(b, a % b);\\n    }\\n}\\n", "target": "9", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cgi", "cl", "sys", "sh", "so", "bc", "sv", "sp", "cr", "inc", "ck", "ec", "ctl", "ko", "spec", "irc", "sch", "fc", "sync", "exec", "tc", "ctrl", "scan", "sq", " Sc", "cont", "cs", "ss", "nc", "pb", "ci", "syn", "osc", "sim", "jp", "Sc", "gc", "scl", "asc", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "ch", "desc"], "a": ["ae", "r", "ca", "att", "ar", "el", "oa", "o", "h", "aa", "ad", "app", "sta", "sa", "al", "ai", "act", "A", "at", "ia", "an", "la", "ga", "ao", "ity", "ab", "i", "pa", "area", "ea", "ba", "na", "ach", "aka", "aaa", "aj", "fa", "alpha", "e", "w", "ma", "p", "ac", "y", "au", "era", "all", "x", "am"], "b": ["r", "beta", "wb", "sb", "bin", "ob", "base", "o", "h", "bc", "v", "bh", "gb", "db", "bf", "by", "bl", "lb", "val", "back", "bd", "u", "fb", "z", "j", "bi", "it", "ib", "nb", "bm", "ab", "i", "g", "ba", "bg", "bt", "bis", "body", "e", "w", "t", "s", "p", "bb", "y", "be", "rb", "B"], "c": ["r", "lc", "ca", "col", "cc", "co", "cl", "h", "cf", "bc", "ce", "unc", "v", "dc", "ec", "cn", "cu", "fc", "u", "tc", "z", "cd", "i", "C", "cs", "g", "cm", "ci", "e", "ct", "t", "x", "p", "ac", "cb", "y", "rc", "ch"], "d": ["dat", "D", "pd", "r", "dl", "dec", "dm", "df", "dd", "fd", "h", "deb", "o", "de", "da", "v", "db", "sd", "dc", "ad", "rd", "td", "bd", "u", "z", "j", "dev", "i", "data", "g", "ds", "e", "w", "t", "s", "p", "nd", "def", "dis", "dir", "ld", "dt", "di", "del", "dp"], "ans": ["gs", "ons", "_", "rs", "aus", "outs", "eds", "ns", "ads", "ks", "alls", "els", "nl", "os", "ms", "lines", "les", "arts", "ANS", "amps", "ats", "ens", "ants", "ags", "es", "ls", "als", "an", "ols", "angs", "ann", "is", "cs", "ins", "aps", "ds", "ers", "ions", "s", "actions", "xs", "lan", "x", "ars", "names"], "l": ["dl", "il", "r", "lc", "ll", "len", "li", "o", "h", "lp", "v", "nl", "lo", "le", "sl", "ls", "u", "ml", "la", "z", "i", "g", "fl", "L", "e", "w", "t", "s", "p", "tl", "ln", "ld"], "as": ["acs", "r", "ase", "ras", "ar", "ias", "rs", "asm", "ais", "aus", "asi", "sa", "As", "al", "lb", "os", "ms", "les", "ats", "at", "ags", "us", "ls", "la", "las", "aos", "is", "ab", "pa", "cs", "AS", "ins", "s", "eas", "au", "ots", "ars", "am"], "bs": ["gs", "lbs", "bles", "ubs", "sb", "aus", "rs", "bes", "ns", "obs", "bc", "ks", "bh", "bos", "bl", "nl", "lb", "os", "its", "les", "ats", "us", "es", "ls", "ris", "bi", "aos", "BS", "bm", "is", "ab", "bits", "cs", "ins", "ds", "s", "blocks", "bb", "bys", "bps", "outs"], "f": ["r", "F", "df", "fi", "fd", "h", "o", "cf", "v", "bf", "fe", "fc", "u", "fb", "z", "j", "i", "g", "fl", "e", "t", "p", "lf", "ln", "x"], "m": ["mn", "r", "mm", "dm", "o", "h", "v", "md", "ms", "mr", "M", "u", "an", "j", "um", "bm", "gm", "i", "g", "cm", "mt", "ma", "t", "p", "man", "y", "em", "mc", "x", "mi", "am"], "n": ["num", "mn", "nu", "r", "ll", "nn", "un", "len", "N", "o", "gn", "ns", "v", "dn", "ne", "nan", "nl", "cn", "sn", "u", "an", "z", "j", "no", "nb", "i", "g", "na", "nc", "nv", "np", "nm", "w", "t", "p", "nor", "ln", "nt", "x"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner scanner = new Scanner(System.in);\\n    int n = scanner.nextInt();\\n    int m = n;\\n    \\n    int d = 1;\\n    while(m/10!=0){\\n      d++;\\n      m = m/10;\\n    }\\n    \\n    int count = 0;\\n    for(int i = 0; i < d - 1; i++){\\n      if(i%2==0){\\n        count += (int)Math.pow(10, (double)(i + 1)) - (int)Math.pow(10, (double)i);\\n      }\\n    }\\n    if(d%2==1){\\n      count += n - (int)Math.pow(10, (double)(d - 1)) + 1;\\n    }\\n    System.out.println(count);\\n  }\\n}\\n", "target": "135", "substitutes": {"scanner": ["canener", " scanener", "scer", "Scanter", "scanener", "Scanener", "Scaner", "scner", "scanter", "scter", "canter", " scanter", "scener", "Scanner", "canner", "scaner", " scaner", "caner"], "n": ["nu", "mn", "num", "r", "nn", "l", "nr", "number", "N", "o", "h", "ns", "v", "dn", "in", "nl", "cn", "ni", "sn", "a", "b", "M", "j", "nb", " N", "g", "na", "k", "nc", "np", "en", "c", "nm", "out", "w", "ng", "t", "p", "s", "y", "nt", "x"], "m": ["mn", "r", "mm", "dm", "mask", "pm", "l", "mind", "met", "o", "h", "v", "km", "md", "ms", "mr", "mut", "mu", "b", "f", "sm", "M", "z", "j", "bm", "gm", "tm", "g", "k", "cm", "mx", "mod", "c", "mt", "ma", "t", "p", "y", "em", "mc", "all", "mat", "x", "mi"], "d": ["dat", "D", "pd", "r", "q", "dm", "dim", "mind", "l", "dd", "draw", "fd", "dos", "o", "del", "h", "id", "de", "da", "v", "sd", "db", "dn", "dom", "dig", "ind", "dt", "b", "f", "z", "j", "days", "cd", "div", "data", "g", "done", "c", "ds", "debug", "e", "out", "w", "t", "nd", "p", "s", "ld", "den", "did", "all", "di", "x"], "count": ["set", "num", "contact", "ount", "result", "limit", "found", "number", "error", "entry", "cond", "part", "temp", "total", "log", "amount", "conn", "summary", "common", "sum", "report", "Count", "ind", "cache", "index", "list", "code", "type", "match", "search", "comment", "find", "cmd", "nb", "child", "C", "status", "length", "c", "debug", "ct", "counter", "continue", "check", "t", "diff", "flag", "reason", "size", "add", "more", "nt"], "i": ["q", "I", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "ei", "l", "ip", "o", "li", "id", "v", "ij", "ini", "in", "print", "ski", "ai", "ki", "im", "ind", "qi", "a", "b", "inter", "index", "ia", "init", "u", "\u0438", "io", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "e", "multi", "iter", "info", "y", "ii", "xi", "si", "di", "mi", "ish"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint N = sc.nextInt();\\n\t\tint[] X = new int[N];\\n\t\tint min =0;\\n\t\tint answer = Integer.MAX_VALUE;\\n      \\n\t\tfor(int i=0; i<N; i++) {\\n\t\t\tX[i] = sc.nextInt();\\n\t\t}\\n      \t//\u6765\u308b\u305f\u3073\u306bmin\u3092\u521d\u671f\u5316\u3059\u308b\\n      \t//\u5236\u7d04\u4ee5\u5185\u3067\u7e70\u308a\u8fd4\u3059\\n\t\tfor(int j=1;  j<=100; j++) {\\n\t\t\tmin = 0;\\n          //\u4f53\u529b\u6d88\u8cbb(Xi-P)\u306e2\u4e57\u3092\u8a08\u7b97\u3057min\u306b\u52a0\u7b97\\n\t\t\tfor(int i=0; i<N; i++) {\\n\t\t\tmin += (X[i]-j)*(X[i]-j);\\n\t\t\t}\\n          //answer\u306bmin\u3068MAX_VALUE\u3092\u6bd4\u3079\u6700\u5c0f\u5024\u3092\u5165\u308c\u308b\\n\t\t\tanswer = Math.min(min,answer);\\n\t\t}\\n\t\tSystem.out.println(answer);\\n\t}\t\t\\n}", "target": "17", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "cr", "bc", "sv", "sp", "inc", "dc", "ctl", "cle", "irc", "sch", "sw", "sync", "fc", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch"], "N": ["D", "I", "TN", "ND", "NM", "SN", "NP", "NE", "NB", "n", "O", "No", "S", "Ni", "P", "NG", "T", "NO", "NS", "Q", "NR", "V", "M", "NH", "AN", "Len", "GN", "KN", "NC", "C", "NN", "Num", "NA", "L", "K", "J", "Length", "NI", "NT", "Ns"], "X": ["Z", "I", "Screen", "F", "Array", "TX", "EX", "IX", "AC", "XY", "DX", "OX", "XXX", "JSON", "P", "UX", "T", "XM", "R", "Q", "V", "M", "W", "XX", "H", "C", "TY", "XT", "Y", "L", "J", "XP", "MX", "XL", "x"], "min": ["offset", "name", "key", "mask", "version", "base", "l", "Min", "v", "m", "n", "default", "err", "level", "lo", "start", "minimum", "index", "left", "space", "no", "core", "mode", "rel", "max", "MIN", "size", "initial"], "answer": ["stop", "result", "mask", "inf", "prime", "error", "best", " maj", "default", "jump", "cap", "sum", "high", "opt", "load", "const", " Max", "dev", "bound", "ext", "rest", "score", "aj", "step", "alpha", "ma", "capacity", "info", "med"], "i": ["I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "chain", "ip", "ji", "li", "o", "id", "m", "ij", "me", "ini", "err", "batch", "uu", "remote", "ai", "ms", "go", "client", "im", "qi", "ori", "us", "\u0438", "fire", "io", "ims", "sequence", "j", "bi", "it", "ui", "ie", "is", "uri", "pi", "g", "k", "ti", "ic", "ci", "sim", "my", "cli", "multi", "iq", "gu", "ii", "xi", "si", "span", "di", "x", "mi", "ish"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n    \ttry(Scanner sc = new Scanner(System.in)) {\\n\\n    \t\tint N = sc.nextInt();\\n    \t\tint T = sc.nextInt();\\n    \t\tint min = 10000000;\\n    \t\twhile(N-->0) {\\n    \t\t\tint c = sc.nextInt();\\n    \t\t\tint t = sc.nextInt();\\n    \t\t\tif(t<=T && c<min) {\\n    \t\t\t\tmin = c;\\n    \t\t\t}\\n    \t\t}\\n    \t\tSystem.out.println(min==10000000? \"TLE\" : min);\\n\\n    \t}\\n    }\\n}\\n", "target": "8", "substitutes": {"N": ["D", "I", "TN", "FN", "NM", "NI", "SN", "NB", "n", "NV", "No", "O", "S", "P", "R", "NS", "NR", "V", "M", "NC", "H", "C", "Number", "U", "NA", "Y", "L", "Num", "J", "K", "X", "CN", "Ne", "NN", "NT", "B", "Ns"], "T": ["Z", "I", "TT", "TN", "TG", "F", "TB", "E", "TS", "WT", "CT", "G", "S", "P", "Type", "R", "Q", "V", "M", "W", "TA", "GT", "TC", "H", "C", "U", "TH", "TY", "Y", "L", "TM", "J", "K", "TI", "B", "AT"], "min": ["lt", "mn", "mins", "mini", "limit", "mi", "next", "mask", "beta", "version", "margin", "temp", "sol", "Min", "value", "minute", "m", "v", "n", "sem", "emin", "tail", "in", "me", "level", "nan", "stat", "spec", "small", "mean", "val", "im", "start", "mon", "minimum", "amin", "init", "M", "test", "lower", "sort", "Minimum", "mint", "Mini", "lock", "mod", "mode", "mine", "max", "cmp", "sample", "txt", "diff", "ma", "MIN", " MIN", "local", "med", "second", "minus", "initial", "first", "just", "mit"], "c": ["lc", "ca", "col", "cc", "d", "cos", "l", "co", "cf", "cr", "bc", "n", "v", "m", "cp", "ce", "unc", "dc", "cu", "b", "count", "f", "u", "tc", "z", "cat", "sc", "cd", "i", "C", "cont", "cs", "nc", "k", "cm", "cod", "ci", "ct", "p", "ac", "cb", "pc", "rc", "ch"], "t": ["q", "l", "temp", "tp", "h", "o", "ta", "n", "m", "v", "tr", "tt", "at", "b", "f", "type", "tc", "z", "j", "it", "ts", "i", "g", "k", "ct", "ot", "out", "e", "s", "p", "ac", "ant", "y", "te", "dt", "st"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner s = new Scanner(System.in);\\n\t\t\\n\t\t\\n\t\tString ns = s.nextLine();\\n\t\tString str = s.nextLine();\\n\t\tint n = Integer.parseInt(ns);\\n//\t\tString str = \"2 3 1\";\\n\t\tint[] arr = new int[n+1]; \\n\t\tarr[0] = 0;\\n\t\tString sss[] = str.split(\"\\\\s\");\\n\t\tfor(int i=1;i<=n;i++) {\\n\\n\t\t\tarr[i] = Integer.parseInt(sss[i-1]);\\n\t\t\t\\n\t\t}\\n\t\t\\n\t\tint[] a = new int[n+1];\\n\t\t\\n\t\ta[0] = 0;\\n\t\t\\n\t\tfor(int i=1;i<=n;i++) {\\n\t\t\ta[(arr[i])] = i;\\n\t\t}\\n\t\tfor(int i=1;i<=n;i++) {\\n\t\t\tSystem.out.print(a[i]+\" \");\\n\t\t}\\n\t}\\n\\n}", "target": "227", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s=sc.nextLine();\\n\t\tchar c;\\n\t\tint i,length=s.length();\\n\t\tfor(i=0;i<length;i++){\\n\t\t\tc=s.charAt(i);\\n\t\t\tif(Character.isLowerCase(c))System.out.print(Character.toUpperCase(c));\\n\t\t\telse if(Character.isUpperCase(c))System.out.print(Character.toLowerCase(c));\\n\t\t\telse System.out.print(c);\\n\t\t}\\n\t\tSystem.out.print(\"\\n\");\\n\t}\\n}\\n\\n", "target": "192", "substitutes": {"sc": ["usc", "sac", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "bc", "cr", "sv", "sp", "ec", "cle", "sel", "sch", "se", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "s": ["gs", "sql", "sf", "sb", "l", "rs", "sol", "sys", "ns", "sv", "sp", "v", "m", "ws", "bs", "S", "ms", "its", "less", "sw", "ats", "str", "se", "f", "es", "ls", "sts", "is", "ts", "sq", "g", "ss", "js", "ins", "t", "qs", "p", "ps", "xs", "conv"], "c": ["arc", "q", "lc", "ca", "col", "cc", "d", "coll", "cur", "character", "cos", "l", "chain", "co", "cl", "h", "o", "cf", "cr", "bc", "ce", "cp", "v", "dc", "cap", "ec", "cu", "cache", "code", "f", "fc", "u", "tc", "z", "ctrl", "cat", "cd", "C", "cont", "cs", "g", "vc", "cum", "k", "cm", "nc", "cod", "ic", "comp", "com", "e", "ct", "w", "gc", "t", "x", "char", "ac", "etc", "mac", "y", "mc", "rc", "conv", "ch"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "ei", "chain", "ip", "ji", "point", "o", "li", "m", "ij", "me", "ini", "in", "batch", "ai", "im", "ind", "qi", "ori", "index", "us", "init", "u", "ims", "j", "bi", "it", "is", "uri", "ui", "ie", "pi", "g", "ti", "ic", "ci", "sim", "my", "multi", "t", "iter", "p", "gu", "y", "oi", "ii", "xi", "si", "conv", "di", "x", "mi"], "length": ["ENGTH", "end", "loc", "character", "specified", "position", "l", "number", "len", "total", "h", "sh", "distance", "path", "print", "family", "width", "start", "shape", "list", "count", "f", "load", "buffer", "collection", "test", "range", "sequence", "history", "space", "loop", "string", "full", "text", "data", "rest", "join", "duration", "ength", "angle", "capacity", "integer", "ln", "last", "padding", "Length", "size", "time", "library", "split", "height"]}}
{"code": "import java.util.*;\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    String t = sc.next();\\n    int length = s.length();\\n    String ans = \"No\";\\n    for (int i = 0; i < length - 1; i++) {\\n      if (s.equals(t)) {\\n        ans = \"Yes\";\\n        break;\\n      }\\n      String rotateS = s.substring(length - 1 - i, length) + s.substring(0, length - 1 - i);\\n      if (rotateS.equals(t)) {\\n        ans = \"Yes\";\\n        break;\\n      }\\n    }\\n    System.out.println(ans);\\n\\n  }\\n}", "target": "220", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "sh", "bc", "cr", "sv", "sp", "inc", "dc", "ctl", "capt", "ec", "ko", "cle", "sel", "sch", "sync", "fc", "tc", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "c", "osc", "Sc", "gc", "cons", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "s": ["q", "gs", "r", "sf", "sb", "l", "rs", "sol", "abs", "sys", "h", "ns", "sv", "sp", "n", "strings", "m", "v", "sd", "source", "sa", "bs", "S", "os", "ess", "ms", "its", "ats", "str", "se", "b", "f", "sl", "ls", "sort", "j", "string", "sts", "is", "ts", "sq", "cs", "g", "ss", "c", "js", "ins", "sam", "p", "qs", "ps", "stats", "hs", "st"], "t": ["r", "pt", "to", "wt", "l", "rt", "o", "ta", "tree", "tr", "tt", "in", "tw", "T", "ret", "or", "str", "gt", "at", "type", "test", "it", "tm", "ts", "template", "g", "that", "et", "k", "typ", "c", "mt", "txt", "ct", "ot", "p", "ant", "te", "th", "title", "st", "term"], "length": ["offset", "number", "sp", "n", "HH", "shape", "collection", "history", "left", "append", "space", "format", "padding", "th", "library", "term", "stop", "specified", "l", "len", "h", "now", "filename", "start", "form", "count", "code", "match", "sequence", "full", "rest", "ength", "capacity", "style", "Length", "ty", "result", "end", "phi", "value", "print", "type", "string", "available", "piece", "pi", "angle", "present", "p", "height", "ENGTH", "name", "position", "total", "distance", "width", "bus", "index", "sl", "buffer", "always", "text", "join", "L", "duration", "integer", "size", "time"], "ans": [" means", " Ans", "uns", "ents", "eps", "ons", "ras", "ros", "vals", "aus", "rs", "san", "ums", "anks", "oss", "eds", "ns", "ads", "ks", "helps", "uts", "orders", "ars", "yes", "ms", "arts", "ANS", "ys", "amps", "ats", "ens", "ants", "ags", "an", "uploads", "ols", "angs", "ays", "vs", "aos", "ams", "mas", "ts", "cs", "orts", "ups", "utters", "ins", "olds", "ds", "arms", "aps", "aints", "posts", "ots", "ps", "offs", "outs", "ann"], "i": ["meg", "q", "I", "ix", "ex", "phi", "gi", "zi", "iu", "ei", "ip", "li", "id", "n", "m", "ij", "me", "ini", "ski", "ai", "ms", "im", "ind", "qi", "a", "ik", "us", "init", "u", "\u0438", "j", "bi", "it", "ui", "is", "uri", "pi", "g", "ti", "ic", "ci", "c", "sim", "bis", "cli", "multi", "iq", "gu", "p", "info", "iter", "y", "oi", "xi", "ii", "si", "conv", "di", "x", "mi"], "rotateS": ["rotgateP", "rotateP", " rotateA", "rotgateN", "rotinateN", "rotateN", "rotationA", " rotationA", " rotationP", " rotationS", "rotinateR", " rotatorR", "rotgateA", "rotateA", "rotgateS", " rotatorN", "rotinateS", "rotationN", "rotatorR", " rotateR", " rotatorS", "rotatorS", "rotateR", " rotateP", " rotateN", "rotationP", "rotationS", " rotationN", "rotationR", "rotatorN"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Here your code !\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        long sum = 0;\\n        while(true) {\\n            sum = 0;\\n            String line = br.readLine();\\n            if(line.length()==1)\\n                if(Integer.parseInt(line)==0)break;\\n            for(int i=0;i<line.length();i++){\\n                sum += Integer.parseInt(String.valueOf(line.charAt(i)));\\n            }\\n            System.out.println(sum);\\n        }\\n    }\\n}", "target": "144", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\tint S = stdIn.nextInt();\\n\t\tint W = stdIn.nextInt();\\n\t\tif(S <= W){\\n\t\t\tSystem.out.println(\"unsafe\");\\n\t\t}\\n\t\telse{\\n\t\t\tSystem.out.println(\"safe\");\\n\t\t}\\n\t\tstdIn.close();\\n\t}\\n}", "target": "177", "substitutes": {"stdIn": ["stdIng", "standardIng", "consoleOut", "consoleIns", "rdin", "STDIn", " stdIng", "rdOut", "stdOut", "rdIng", "standardIns", "dIn", "standardIn", "STDOut", "standardOut", "consoleIn", "STDin", " stdin", " stdIns", "dInput", "rdIn", "consoleInput", "stdInput", "consolein", " stdInput", "dIns", "dOut", "STDIns", " stdOut", "stdIns", "stdin", "standardin"], "S": ["D", "I", "Z", "CS", "F", "SI", "E", "TS", "N", "JS", "SA", "G", "SE", "P", "T", "SU", "R", "A", "SF", "V", "M", "Si", "SR", "SL", "BS", "H", "C", "ISS", "L", "SS", "K", "SER", "X", "s", "DS", "SK", "B", "ESS"], "W": ["I", "F", "B", "BW", "Win", "WA", "N", "WC", "OW", "CW", "WT", "MW", "SW", "WH", "P", "WE", "EW", "Week", "Q", "VW", "V", "M", "WW", "WP", "NW", "Wh", "H", "U", "WS", "L", "We", "w", "Watch", "FW", "WAR", "WI", "WR", "DW"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        char[] arr = in.next().toCharArray();\\n        int x = 0;\\n        for (char c : arr) {\\n            if (c == '+') ++x;\\n            else --x;\\n        }\\n\\n        System.out.println(x);\\n    }\\n}", "target": "54", "substitutes": {"in": ["r", "gin", "bin", "from", "inf", "l", "asin", " din", "isin", "sys", "id", "inc", "n", "m", "sin", "ini", "err", "read", "doc", "inn", "file", "IN", "rin", "run", "user", "lines", "ind", "us", "In", "io", "reader", "scan", "din", "is", "i", "thin", "stream", "inner", "k", "en", "ins", "input", "std", "conf", "out", "cin", "info", "char", "ln", "all", "line"], "arr": ["dat", "br", "addr", "r", "coll", "ray", "ear", "ax", "array", "ar", "vals", "rs", "sys", "pl", "vec", "gb", "app", "alph", "batch", "bl", "seq", "parts", "Ar", "enc", "buf", "ble", "img", "list", "stack", "gr", "arp", "ab", "unch", "arb", "aaa", "vol", "has", "fr", "ARR", "blocks", "ply", "pres", "ch", "ars", "map"], "x": ["num", "ix", "ex", "wx", "d", "xb", "ax", "number", "yx", "v", "m", "n", "pe", "xf", "xy", "tx", "inx", "xe", "xx", "index", "px", "xc", "z", "xa", "xes", "dx", "i", "lex", "xxxx", "status", "g", "mx", "xt", "xxx", "xd", "max", "ct", "w", "X", "t", "rx", "p", "y", "xi", "xs", "xp", "ox", "checked"], "c": ["arc", "uc", "lc", "cc", "con", "l", "chain", "o", "cf", "bc", "cr", "v", "ce", "cp", "unc", "dc", "cap", "can", "cu", "a", "b", "code", "f", "xc", "tc", "sc", "cd", "C", "vc", "cs", "comp", "k", "cod", "ic", "com", "ct", "e", "char", "ac", "y", "pc", "conv", "ch"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.nextLine();\\n\t\tString[] sh = s.split(\" \");\\n\t\tint n = Integer.parseInt(sh[0]);\\n\t\tint x = Integer.parseInt(sh[1]);\\n\\n\t\tList<Integer> list = new ArrayList<Integer>();\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint m = Integer.parseInt(sc.next());\\n\t\t\tlist.add(m);\\n\t\t\tx -= m;\\n\t\t}\\n\t\tCollections.sort(list);\\n\\n\t\tSystem.out.println(n + (int) (x / list.get(0)));\\n\\n\t\tsc.close();\\n\t}\\n}", "target": "3", "substitutes": {"sc": ["uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "cr", "sv", "bc", "sp", "ec", "capt", "ctl", "cle", "src", "sch", "sw", "sync", "fc", "tc", "scan", "sq", "cs", "sci", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "psc", "ch", "desc", "sub"], "s": ["gs", "r", "sf", "sb", "l", "rs", "sol", "h", "sv", "v", "source", "S", "os", "src", "sw", "ats", "str", "se", "b", "sl", "ls", "space", "ts", "sq", "g", "ss", "c", "js", "w", "t", "qs", "p", "ps", "st"], "sh": ["shi", " Sh", "sy", "shift", "h", "sp", "she", "kh", "ash", "bh", "sd", "spe", "aw", "SH", "sha", "esh", " ssh", "show", "sch", "osh", "Sh", " SH", "sw", "igh", "zh", "ih", "shell", "sm", "sl", "resh", "hw", "sq", "ssh", "sk", "hash", "wh", "ish", "ps", "ch", "bash"], "n": ["num", "nu", "mn", "r", "name", "d", "nn", "number", "l", "N", "o", "total", "ns", "h", "node", "v", "nan", "ne", "nl", "cn", "sn", "a", "b", "on", "z", "j", "nb", "nc", "na", "k", "np", "en", "c", "nm", "e", "w", "t", "p", "network", "ln", "y", "net", "nt"], "x": ["num", "ix", "r", "ex", "ax", "l", "o", "h", "v", "xf", "xy", "tx", "xe", "xx", "a", "f", "on", "px", "xc", "z", "xa", "dx", "g", "mx", "xt", "xd", "e", "w", "X", "t", "p", "rx", "ux", "xff", "y", "xi", "xs", "xp", "to", "ox"], "list": ["set", "dl", "block", "valid", "result", "group", "ll", "queue", "l", "temp", "pre", "li", "now", "tree", "log", "and", "summary", "default", "batch", "level", "detail", "pair", "filter", "print", "show", "LIST", "spec", "lat", "dict", "write", "form", "back", "lists", "map", "index", "search", "sync", "ist", "collection", "test", "single", "left", "sequence", "sort", "listed", "cont", "status", "table", "L", "display", "check", "def", "parent", "add", "all", "count", "st", "see"], "i": ["q", "I", "ix", "phi", "gi", "zi", "iu", "chain", "ip", "li", "o", "id", "v", "me", "ini", "print", "ai", "ms", "im", "ind", "qi", "a", "f", "us", "init", "u", "io", "j", "bi", "it", "ui", "is", "ie", "pa", "pi", "ti", "ic", "ci", "sim", "multi", "iq", "iter", "info", "y", "ii", "si", "di", "mi"], "m": ["mn", "mm", "dm", "d", "l", "met", "perm", "v", "km", "md", "ms", "vm", "mr", "arm", "mu", "min", "sm", "M", "j", "um", "tm", "gm", "pi", "k", "cm", "mod", "mx", "c", "mt", "ma", "t", "p", "man", "mac", "y", "em", "mc", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner cin = new Scanner(System.in);\\n        String S = cin.next();\\n\\n        S = S.replaceAll(\"eraser\", \"0\");\\n        S = S.replaceAll(\"erase\", \"0\");\\n        S = S.replaceAll(\"dreamer\", \"0\");\\n        S = S.replaceAll(\"dream\", \"0\");\\n        S = S.replaceAll(\"0\", \"\");\\n\\n        if (S.isEmpty()) {\\n            System.out.println(\"YES\");\\n        } else {\\n            System.out.println(\"NO\");\\n        }\\n    }\\n}", "target": "50", "substitutes": {"cin": ["arin", "vine", "coin", "gin", "eye", "cos", "asin", " din", "cgi", "isin", "zar", "circ", "ce", "tan", "sin", "cia", "Nic", "vin", "rin", "cy", "tic", "cz", "zo", "Cu", "cation", "Sin", "cone", " cis", "quin", "kin", "Pan", "tin", "ic", "ci", " sin", "Sac", "pour", "zin", "cil", "cci", "nie", "mc", "cus"], "S": ["Screen", "Z", "I", "CS", "STR", "F", "CSS", "SI", "RAW", "SN", "N", "TS", "SM", "SH", "JS", "Ins", "SQL", "SA", "G", "SAM", "P", "URI", "SE", "PS", "T", "SU", "SO", "NS", "A", "SF", "V", "Sample", "Si", "FS", "M", "W", "SOURCE", "It", "US", "ASS", "BS", "SL", "RS", "IS", "SAN", "C", "ES", "H", " s", "SSL", "Socket", "AS", "L", "SS", "GS", "NEW", "SER", "J", "s", "DS", "VS", "Security", "SB", "LS", "B", "ESS"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.List;\\nimport java.util.StringTokenizer;\\nimport java.util.stream.Collectors;\\nimport java.util.stream.IntStream;\\n\\npublic class Main {\\n    public static void main(final String[] args) {\\n        final FastScanner scanner = new FastScanner(System.in);\\n        final int n = scanner.nextInt();\\n        final int[] array = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            array[i] = scanner.nextInt();\\n        }\\n\\n        long sum = 0;\\n        for (int i = 1; i < n; i++) {\\n            if (array[i] > array[i - 1]) {\\n                continue;\\n            }\\n\\n            sum += array[i - 1] - array[i];\\n            array[i] = array[i - 1];\\n        }\\n        System.out.println(sum);\\n    }\\n\\n    private static class FastScanner {\\n        private final BufferedReader reader;\\n        private StringTokenizer tokenizer;\\n\\n        FastScanner(final InputStream in) {\\n            reader = new BufferedReader(new InputStreamReader(in));\\n        }\\n\\n        String next() {\\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (final IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    return reader.readLine();\\n                } catch (final IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n\\n            return tokenizer.nextToken(\"\\n\");\\n        }\\n    }\\n}\\n", "target": "202", "substitutes": {"scanner": ["canener", "anter", " scanener", "statator", "statter", "statner", "caninner", "Scanter", "scanener", "Scaninner", "Scanener", "Scaner", "anener", "canator", "scaninner", "scanter", "scanator", "canter", " scanter", " scanator", "Scanner", "anner", " scaninner", "canner", "scaner", " scaner", "statener", "caner", "aner"], "n": ["num", "nu", "r", "name", "d", "nn", "number", "nr", "l", "len", "un", "N", "total", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "sn", "z", "j", "no", "nb", "g", " N", "na", "nc", "k", "np", "en", "c", "nw", "none", "nm", "out", "ng", "t", "p", "network", "ln", "net", "size", "all", "nt", "names", "window"], "array": ["stage", "av", "ray", "Array", "row", "ar", "view", "current", "number", "var", "chain", "element", "replace", "now", "sh", "amount", "value", "system", "v", "ash", "sort", "raw", "series", "section", "test", "form", "cache", "a", "list", "search", "index", "audio", "instance", "buffer", "collection", "arr", "share", "range", "object", "stack", "our", "component", "trace", "lower", "slice", "sequence", "message", "string", "vector", "area", "data", "order", "length", "table", "record", "sample", "angle", "hash", "alpha", "other", "storage", "library", "rays", "binary", "all", "size", "archive", "function", "window", "map"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "ims", "is", "ic", "parent", "ami", "y", "oi", "di", "x", "ri", "chain", "ip", "ji", "point", "o", "id", "ij", "source", "client", "io", "sequence", "bi", "it", "g", "ci", "sim", "cli", "iq", "ii", "phi", "this", "print", "ind", "u", "status", "pi", "my", "p", "xi", "si", "mi", "I", "mm", "gi", "v", "ini", "im", "qi", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "multi", "info", "to"], "sum": ["Sum", "num", "set", "result", "mm", "cal", "cos", "weight", "ums", "oss", "total", "zero", "summary", "tail", "alph", "su", "sa", "mean", "cu", "union", "scale", "count", "fac", "match", "sort", "mem", "share", "dev", "um", " sums", "success", "cum", "length", "ss", "vol", "head", "sim", "max", "out", "diff", "sam", "average", "add", "size", "si", "cost", "util", "hash"], "reader": ["loader", "rr", "wrapper", "r", "result", "driver", "row", "rar", "writer", "rs", "builder", "holder", "value", "resource", "dr", "finder", "context", "operator", "read", "source", "ro", "this", "file", "handler", "mr", "client", "or", "user", "Reader", "book", "runner", "buffer", "worker", "null", "parser", "document", "rer", "stream", "rl", "inner", "data", "ner", "timer", "lock", "iterator", "input", "body", "er", "iter", "handle", "rc", "via", "window"], "tokenizer": ["terminization", " tokenize", "terminformer", "okenener", "optimitter", " tokenner", "Tokenner", "tokener", "optimer", "operatorner", "recognizer", "tokenization", " tokenister", "okenifier", "tokenizable", " tokeninger", "Tokeninger", "terminifier", "okenization", "tokenener", "tokenize", "Tokeniser", "okenizable", "okenize", "Tokenizer", "terminizer", "okenisher", "characterizer", "operatorifier", "tagizer", "terminisher", "toolister", " tokenizers", "toolizer", "Tokenifier", "tagiser", " tokeniser", "terminizable", "tokenitter", "recognizable", " tokenization", "terminger", "characterization", "okenitter", "recognformer", "tokenformer", "tokenner", "operatorizer", "okenformer", "okener", "tager", "Tokenize", "toolization", "Tokenister", "okenizer", " tokenener", "terminizers", "recognisher", "toolinger", "okenger", "tagitter", "optimiser", "optimizer", "operatorize", " tokenifier", "tokenger", "Tokenener", "terminize", "tokeniser", "Tokenization", "characteriser", "tokenister", "tokenizers", "okenizers", "tokeninger", "tokenifier", " tokenger", "characterifier", "tokenisher", "okeniser"], "in": ["r", "mm", "gin", "bin", "con", "from", "l", "log", "o", "h", "m", "ini", "err", "source", "inn", "file", "IN", "user", "f", "In", "init", "world", "io", "it", "null", "din", "is", "cont", "stream", "data", "inner", "ic", "c", "ins", "input", "std", "conf", "txt", "e", "out", "t", "info", "p", "cin", "ac", "readable", "line"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t//List<String> list= new ArrayList<String>(Arrays.asList(s.split(\"\")));\\n\t\t//List<Integer> list=new ArrayList<Integer>();\\n\t\t//Integer[] array = new Integer[m];\\n        int n = sc.nextInt();\\n        int k = sc.nextInt();\\n        double answer=0;\\n        for(int i=1;n+1>i;i++) {\\n        \tint count=i;\\n        \tint j=0;\\n        \twhile(true) {\\n        \t\tif(count>=k)\\n        \t\t\tbreak;\\n        \t\tcount = count*2;\\n        \t\tj++;\\n        \t}\\n        \tanswer=answer+1/(double)n*Math.pow(0.5,j);\\n        \t//System.out.println(answer);\\n        }\\n        System.out.println(answer);\\n\t}\\n}", "target": "20", "substitutes": {"sc": [" SC", " ss", "sys", "system", "bc", "sp", "sv", "cr", " scr", "dc", "sa", " sk", "src", "sw", "scan", "sq", " Sc", "cs", "nc", "c", "sk", "Sc", "gc", "SC", "pc", "rc", "ch", " sp"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\npublic static void main(String[] args){\\nint a;\\nint b;\\nScanner sc=new Scanner(System.in);\\nwhile(sc.hasNextInt()){\\na=sc.nextInt();\\nb=sc.nextInt();\\nint d=(int)Math.log10(a+b)+1;\\nSystem.out.println(d);\\n}\\n}\\n}", "target": "176", "substitutes": {"a": ["ae", "ca", "ax", "ar", "el", "aq", "oa", "\u00e4", "aa", "da", "app", "sta", "sa", "al", "ak", "ai", "isa", "af", "act", "at", "A", "ia", "\u00e1", "an", "la", "ga", "ao", "ab", "ea", "apa", "aff", "ba", "aaa", "aka", "aj", "ap", "ma", "as", "eas", "ac", "era", "au", "va", "x", "am"], "b": ["br", "r", "beta", "sb", "ob", "mb", "base", "l", "abs", "o", "bar", "bc", "v", "gb", "bf", "db", "ne", "by", "bs", "bp", "or", "eb", "f", "fb", "j", "bi", "ib", "nb", "ed", "ab", "i", "ba", "c", "bis", "other", "bb", "cb", "be", "y", "rb", "erb", "B"], "sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "cr", "sv", "sp", "bc", "inc", "dc", "ctl", "capt", "cle", "irc", "sch", "conv", "fc", "tch", "sync", "tc", "ctrl", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "cons", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "scrib", "rc", "ch", "desc", "st", "sub"], "d": ["dh", "D", "dat", "pd", "dm", "dec", "dot", "dim", "fd", "dd", "red", "de", "id", "m", "da", "dr", "sd", "ad", "md", "dict", "td", "min", "bd", "z", "mad", "dra", "dx", "pad", "std", "ds", "debug", "des", "diff", "t", "dL", "ld", "di"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[]args) {\\n\t\tint higth[] = new int[10];\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tfor(int i=0; i<10 ; i++)higth[i]=sc.nextInt();//\u5165\u529b\u309210\u56de\u7e70\u308a\u8fd4\u3059\\n\t\tArrays.sort(higth);\\n\t\tSystem.out.println(higth[9]);\\n\t\tSystem.out.println(higth[8]);\\n\t\tSystem.out.println(higth[7]);\\n\\n\t}\\n\\n}\\n", "target": "164", "substitutes": {"higth": ["hth", "htmft", "htths", "hwth", "higft", "htmths", "hwh", "hwath", "high", "ighth", "htath", "htoth", "hwths", "ighths", "hft", "htth", "ighh", "htmth", "higoth", "hoth", "htft", "hths", "higath", "htmoth", "ighath", "higths"], "sc": ["usc", "uc", "lc", "acc", "cc", "esc", "sec", "cl", "sys", "bc", "sp", "cr", "soc", " scr", "dc", "ec", "capt", "cle", "sel", "spec", "sch", "conv", "sync", "tc", "scan", "cs", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "exp", "scl", "asc", "isc", "SC", "mc", "pc", "rc", " subsc", "ch", "desc"], "i": ["q", "I", "ix", "ex", "phi", "gi", "iu", "l", "chain", "ip", "li", "id", "n", "m", "wait", "ij", "ini", "v", "in", "batch", "uu", "ai", "ms", "ki", "client", "mu", "im", "ind", "qi", "us", "init", "u", "io", "ims", "z", "j", "bi", "it", "ui", "is", "pi", "ti", "ic", "ci", "sim", "my", "cli", "port", "multi", "t", "iter", "gu", "y", "oi", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int inputInt = scanner.nextInt();\\n        int oneMore = inputInt % 2;\\n        System.out.println(inputInt / 2 + oneMore);\\n    }\\n}\\n", "target": "233", "substitutes": {"scanner": ["canener", "canter", " scanter", "Scanter", "Scanner", "scanener", "Scanener", "canner", "scaner", " scaner", "Scaner", " scanener", "caner", "scanter"], "inputInt": ["integerInteger", "integerInter", "InputByte", "InputInteger", "inLong", "inputLong", "inputString", " inputLong", " inputInteger", "inInt", "InputString", "integerInt", "outputInt", "inInter", "InputLong", "InputStr", "InputInt", "inputInteger", "inByte", "integerLong", "outputLong", "integerByte", " inputStr", "inputByte", "inputInter", "outputString", "integerString", "inputStr", " inputByte", "InputInter", " inputString", "outputStr"], "oneMore": ["nineMORE", "Onemore", "ninemore", " oneAnother", "zeroMORE", "zeroMore", " onemore", "oneMORE", "zeroAnother", " oneMORE", "OneOther", "OneMore", "oneOther", "nineMore", "zeroOther", "onemore", "nineAnother", " oneOther", "OneAnother", "OneMORE", "oneAnother"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n        Scanner s = new Scanner(System.in);\\n        int k = s.nextInt(), a = s.nextInt(),b=s.nextInt();\\n        boolean flag= false;\\n        for(int i=a;i<=b;i++){\\n            if(i%k==0){\\n                flag = true;\\n                break;\\n            }\\n        }\\n        System.out.println(flag?\"OK\":\"NG\");\\n\\n\\n    }\\n\\n}\\n\\n\\n\\n\\nclass Scanner\\n{\\n    StringTokenizer st;\\n    BufferedReader br;\\n\\n    public Scanner(InputStream s){\tbr = new BufferedReader(new InputStreamReader(s));}\\n\\n    public String next() throws IOException\\n    {\\n        while (st == null || !st.hasMoreTokens())\\n            st = new StringTokenizer(br.readLine());\\n        return st.nextToken();\\n    }\\n\\n    public int nextInt() throws IOException {return Integer.parseInt(next());}\\n\\n    public long nextLong() throws IOException {return Long.parseLong(next());}\\n\\n    public String nextLine() throws IOException {return br.readLine();}\\n\\n    public double nextDouble() throws IOException\\n    {\\n        String x = next();\\n        StringBuilder sb = new StringBuilder(\"0\");\\n        double res = 0, f = 1;\\n        boolean dec = false, neg = false;\\n        int start = 0;\\n        if(x.charAt(0) == '-')\\n        {\\n            neg = true;\\n            start++;\\n        }\\n        for(int i = start; i < x.length(); i++)\\n            if(x.charAt(i) == '.')\\n            {\\n                res = Long.parseLong(sb.toString());\\n                sb = new StringBuilder(\"0\");\\n                dec = true;\\n            }\\n            else\\n            {\\n                sb.append(x.charAt(i));\\n                if(dec)\\n                    f *= 10;\\n            }\\n        res += Long.parseLong(sb.toString()) / f;\\n        return res * (neg?-1:1);\\n    }\\n\\n    public boolean ready() throws IOException {return br.ready();}\\n\\n\\n}", "target": "28", "substitutes": {"s": ["gs", "r", " streams", "aws", "l", "rs", "sol", "http", "sys", "h", "ns", "eds", "sv", "sa", "ws", "comm", "bs", "S", "os", "ms", "its", "self", "ys", "ats", "south", "scripts", "fs", "es", "ls", "sl", "ssl", "ies", "ims", "sts", "is", "ts", "sq", "cs", "g", "ss", "ings", " inputs", "js", "ins", "ds", "times", "ers", "sam", "t", "ses", "qs", "p", "xs", "ps", "stats", "conv", "fps"], "k": ["q", "ke", "kl", "ks", "n", "m", "dk", "km", "ck", "ko", "unk", "ak", "kn", "ki", " K", "ik", "kk", "ack", "z", "j", "mk", "g", "ok", "sk", "ku", "ek", "max", "K", "w", "kb", "t", "p", "kj", "ka", "kw", "kid"], "a": ["ae", "ca", "ax", "ar", "l", "oa", "ta", "n", "aa", "da", "sta", "sa", "ak", "ai", "auto", "A", "art", "at", "ia", "an", "ab", "ea", "area", "pa", "ba", "aka", "c", "aj", "ap", "alpha", "as", "ma", "ac", "au", "va", "am"], "b": ["ob", "l", "base", "bar", "bc", "n", "v", "db", "bl", "bs", "eb", "u", "fb", "j", "bi", "ib", "bound", "nb", "ab", "ba", "c", "bis", "e", "t", "p", "bb", "cb", "y", "be", "rb", "B"], "i": ["I", "ix", "ex", "phi", "gi", "hi", "iu", "zi", "ei", "iy", "ip", "ji", "point", "li", "o", "id", "v", "ij", "m", "me", "ini", "in", "batch", "ai", "ki", "client", "mu", "im", "ind", "qi", "index", "ori", "us", "init", "u", "\u0438", "io", "ims", "z", "j", "bi", "it", "ity", "ui", "is", "ie", "uri", "pi", "g", "iso", "ti", "ic", "ci", "sim", "cli", "e", "multi", "info", "p", "y", "ii", "xi", "si", "di", "mi"], "flag": ["set", " Flag", "valid", "again", "true", "ground", "kill", "group", "mask", "agged", "fail", "fd", "cond", "flags", "failed", "log", "bit", "leaf", "sign", "wait", "cloud", "msg", "nl", "png", "print", "tag", "ret", "lit", "lag", "bool", "sync", "land", "cmd", "age", "status", "bug", "lock", "lv", "Flag", "leg", "fl", "store", "mail", "good", "continue", "check", "command", "ld", "bird", "FLAG"], "st": ["lt", "r", "stop", "l", "sth", "rt", "sh", "usr", "sv", "sp", "so", "dr", "tr", "sta", "stat", "ste", "lo", "St", "sn", "stri", "sw", "str", "ut", "se", "ist", "sl", "inst", "const", "z", "ost", "stack", "sts", "sty", "est", "rest", "ss", "et", "irst", "bt", "std", "mt", "ct", "fr", "t", "nd", "ST", "ft", "ld", "th", "ust", "nt", "ch", "first"], "br": ["r", "next", "bro", "shr", "rs", "bsp", "vr", "ber", "sp", "cr", "kr", "dr", "bh", "tr", "bridge", "ch", "bre", "stat", "bl", "bs", "nl", "bp", "Br", "mr", "buf", "BR", "bj", "bd", "lr", "bern", "hr", "bi", "bm", "pr", "wr", "bt", "rel", "rob", "fr", "rb", "sr", "gr"], "x": ["r", "ix", "ex", "wx", "sql", "xb", "l", "ox", "xml", "h", "o", "v", "n", "xf", "lat", "xy", "tx", "act", "inx", "xe", "xx", "px", "xc", "z", "xa", "j", "xt", "mx", "xxx", "xd", "e", "w", "X", "t", "rx", "p", "ux", "check", "nex", "y", "xi", "xs", "xp", "fx"], "sb": ["sbm", "xb", "sf", "wb", "sg", "ob", "sth", " SB", "sh", "sv", "sp", "zb", "lp", "gb", "bh", "bf", "db", "sa", "stab", "soc", "bs", "lb", "bp", "ub", "bj", "eb", "rub", "bag", "ssl", "fb", "si", "ib", "nb", "sq", "arb", "bg", "pb", "bt", "kb", "sam", "bb", "cb", "SB", "bps", "rb", "erb", "split", "umb"], "res": ["r", "reg", "result", "d", "rat", "rev", "frac", "red", "ref", "ress", "reset", "ber", "Res", "rand", "resp", "rez", "rep", "os", "val", "ms", "ret", "pos", "req", "resh", "j", "results", " Res", "div", "reed", "rest", "rss", "vol", "rel", "js", "obj", "RES", "out", "cons", "def", "p", "fr", "re", "pres", "gr", "rem"], "f": ["q", "r", "F", "d", "sf", "df", "l", "fd", "rf", "len", "ff", "h", "cf", "v", "m", "n", "tf", "fe", "fp", "fs", "fc", "fac", "u", "g", "fun", "fed", "fort", "c", "conf", "fa", "e", "w", "fr", "t", "p", "fm", "conv", "fx", "fee"], "start": ["set", "stop", "offset", "r", "end", "next", "before", "row", "from", "shift", "base", "pre", "id", "sp", "n", "in", "Start", "top", "this", "get", "or", "art", "ind", "begin", "index", "pos", "init", "j", "it", "rest", "window", "head", "step", "starting", "check", "t", "p", "y", "size", "first"], "dec": ["reg", "deg", "loc", "Dec", "cos", "frac", "sec", " DEC", "deb", "eg", "de", "inc", "sign", "bc", "da", "oct", "unic", "rep", "ec", "pri", "negative", "dig", "pos", "DEC", "hex", "dev", "decl", "div", "disc", "rec", "ok", "des", "def", "digit", "dir", "dep", "den", "minus", "del", "desc"], "neg": ["deg", "coll", "foreign", "Dec", "agg", "bin", "cos", "rev", "und", "sec", "dest", "iv", "cats", "zero", "de", "bit", "sign", "orient", "oct", "ne", "Neg", "ko", "ec", "not", "negative", "neutral", "gen", "pos", "rot", "no", "decl", "div", "disc", "alloc", "rec", "ok", "mod", "off", "bot", "rel", "none", "inv", "bo", "nov", "reverse", "diff", "priv", " Neg", "trans", "den", "minus", "del"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\tchar[] s = br.readLine().toCharArray();\\n\t\tString p = br.readLine();\\n\t\tint point;\\n\t\tBoolean flag = false;\\n\\n\t\tfor(int i = 0; i < s.length; i++) {\\n\t\t\tpoint = i;\\n\t\t\tfor(int j = 0; j < p.length(); j++) {\\n\t\t\t\tif(point == s.length) {\\n\t\t\t\t\tpoint = 0;\\n\t\t\t\t}\\n\t\t\t\tsb.append(s[point]);\\n\t\t\t\tpoint++;\\n\t\t\t}\\n\\n\t\t\tif(sb.toString().equals(p)) {\\n\t\t\t\tflag = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tsb.setLength(0);\\n\t\t}\\n\\n\t\tif(flag) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "198", "substitutes": {"br": ["r", "bro", "shr", "vr", "bc", "cr", "ber", "kr", "dr", "bh", "bf", "tr", "gb", "bridge", "err", "bl", "bs", "bn", "bp", "Br", "mr", "buf", "BR", "b", "bd", "lr", "hr", "bi", "bm", "pr", "wr", "bg", "bt", "rel", "browser", "jp", "yr", "fr", "cb", "rb", "adr", "ch", "gr", "next"], "sb": ["sbm", "sf", "sg", "mb", "ob", "sth", "orb", "bsp", "sh", "sv", "sp", "zb", "lp", "gb", "bf", "bh", "stab", "sa", "bs", "buff", "bp", "lb", "ub", "bj", "b", "eb", "bag", "ssl", "sub", "si", "ib", "nb", "sq", "pb", "bg", "bt", "bis", "rob", "kb", "sam", "obb", "gc", "bb", "cb", "SB", "rb", "erb", "bash"], "s": ["gs", "l", "rs", "ns", "so", "obs", "sp", "sv", "n", "strings", "ws", "bs", "S", "os", "its", "ms", "ats", "str", "b", "fs", "ls", "sts", "vs", "is", "ts", "sq", "cs", "ss", "ings", "js", "ins", "ds", "gets", "services", "t", "ses", "ps", "xs", "si", "hs"], "p": ["pt", "ping", "mp", "php", "ip", "vp", "tp", "wp", "perm", "pl", "sp", "cp", "lp", "rep", "pe", "P", "pp", "fp", "b", "pro", "pat", "pattern", "pkg", "par", "pr", "pa", "pi", "pb", "np", "jp", "ap", "t", "op", "ps", "pc", "dp", "gp"], "point": ["set", "block", "offset", "post", "pt", "to", "key", "points", "col", "row", "position", "number", "chain", "Point", "draw", "part", "oint", "reset", "stroke", "po", "batch", "print", "mark", "tag", "state", "client", "go", "coord", "start", "art", "ind", "inter", "back", "index", "count", "pos", "pointer", "slice", "zone", "patch", "length", "k", "json", "table", "pad", "step", "port", "request", "pool", "ot", "out", "local", "check", "scope", "parent", "page", "pc", "size", "volume", "line", "peer", "window"], "i": ["I", "ix", "ri", "phi", "hi", "zi", "iu", "ip", "li", "o", "asi", "n", "ij", "m", "me", "ini", "v", "in", "ion", "this", "ai", "im", "ind", "start", "qi", "a", "inter", "index", "ia", "init", "io", "ims", "bi", "it", "ui", "ie", "is", "pi", "k", "iso", "ti", "ic", "ci", "sim", "e", "integer", "t", "iq", "info", "ami", "ii", "xi", "si", "di", "x", "mi"], "j": ["q", "block", "ix", "pt", "key", "l", "jl", "jj", "jo", "v", "ij", "m", "err", "jump", "ion", "ge", "ja", "im", "ind", "bj", "b", "oj", "job", "z", "it", "pr", "uj", "g", "json", "k", "js", "obj", "aj", "jp", "ph", "J", "other", "kj", "ort", "y", "kid", "dj"], "flag": ["valid", "set", "result", "stage", "save", "ground", "group", "compl", "mask", "found", "enable", "learn", "error", "enabled", "fd", "cond", "failed", "flags", "log", "light", "leaf", "and", "FLAG", "wait", "sign", "cloud", "msg", "level", "print", "tag", "lag", "bool", "neutral", "f", "sync", "hold", "func", "condition", "field", "flow", "cmd", "status", "success", "lock", "lv", "Flag", "event", "done", "mail", "store", "debug", "ld", "bird", "window"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int A = sc.nextInt();\\n    int B = sc.nextInt();\\n    int C = sc.nextInt();\\n    int D = sc.nextInt();\\n    int x = 0;\\n    int y = 0;\\n\\n    while(A > 0) {\\n      A = A - D;\\n      x++;\\n    }\\n    while(C > 0) {\\n      C = C - B;\\n      y++;\\n    }\\n    if (x >= y) {\\n      System.out.println(\"Yes\");\\n    } else {\\n      System.out.println(\"No\");\\n    }\\n  }\\n}", "target": "186", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cgi", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "inc", "dc", "sa", "ck", "ctl", "capt", "ko", "cle", "sch", "sw", "fc", "tc", "scan", "sq", "cs", "ss", "nc", "c", "osc", "cmp", "jp", "Sc", "out", "gc", "scl", "asc", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "st"], "A": ["AA", "I", "App", "AU", "Alpha", "CA", "AE", "AC", "HA", "Ax", "At", "As", "SA", "G", "ASC", "S", "P", "Ar", "R", "GA", "V", "LA", "API", "This", "AN", "AV", "AL", "ACC", "H", "AP", "U", "AB", "An", "AS", "NA", "Y", "L", "RA", "AI", "AR", "AST", "X", "Al", "AX", "AD", "BA", "AF", "AT"], "B": ["Z", "BB", "TB", "RB", "BL", "BI", "E", "BT", "DB", "N", "Ber", "VB", "NB", "GB", "G", "P", "Bi", "T", "IB", "R", "BR", "b", "BC", "BE", "V", "Back", "CB", "BS", "AB", "Y", "L", "J", "BA", "Ab", "Bs"], "C": ["Z", "CS", "UC", "F", "CM", "CON", "E", "LC", "CE", "CA", "N", "AC", "CW", "CT", "O", "G", "S", "CF", "DC", "T", "R", "Cu", "CU", "BC", "V", "Co", "M", "Ch", "CH", "CV", "CI", "CB", "MC", "CL", "CD", "CC", "VC", "CR", "c", "Y", "L", "GC", "JC", "X", "Cs", "CN", "SC", "EC", "YC", "CP"], "D": ["Z", "I", "DD", "F", "d", "E", "DB", "N", "DX", "DA", "DI", "G", "Ds", "S", "DC", "P", "T", "R", "Q", "V", "M", "W", "YD", "H", "DE", "U", "CD", "Y", "L", "X", "DS", "AD", "Dir"], "x": ["ix", "r", "ex", "wx", "d", "ax", "el", "l", "co", "red", "yx", "n", "v", "xf", "xy", "tx", "inx", "a", "xx", "index", "f", "px", "xc", "z", "xa", "j", "dx", "i", "mx", "xt", "c", "xd", "ct", "w", "X", "rx", "p", "xi", "xs", "xp", "fx", "ox"], "y": ["ye", "d", "sy", "iy", "o", "py", "n", "gy", "v", "m", "ch", "by", "ay", "ey", "uy", "cy", "xy", "a", "b", "xx", "yy", "ies", "dy", "z", "j", "year", "yt", "vy", "i", "axy", "c", "Y", "my", "yi", "out", "yr", "t", "s", "ny", "p", "ty"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner scan=new Scanner(System.in);\\n    int num=scan.nextInt();\\n    int max=0, maxnum=0;\\n    int max2=0;\\n    for(int x=0; x<num; x++){\\n      int in=scan.nextInt();\\n      if(max<=in && max2<=in && max!=in){\\n        max=in;\\n        maxnum=x;\\n      }else if(max>=in && max2<=in){\\n        max2=in;\\n      }\\n    }\\n    for(int x=0; x<num; x++){\\n      if(maxnum!=x){\\n        System.out.println(max);\\n      }else{\\n        System.out.println(max2);\\n      }\\n    }\\n  }\\n}", "target": "142", "substitutes": {"scan": ["seek", "r", "save", "skip", "sql", "row", "reach", "gate", "parse", "san", "ser", "sys", "Scan", "system", "connect", "n", "v", "m", "sin", "ch", "read", "by", "sum", "can", "get", "report", "run", "auto", "scale", "se", "gen", "sync", "send", "scroll", "an", "io", "sort", "range", "cat", "ann", "sc", "find", "ner", "g", "na", "k", "out", "black", "check", "sur", "re", "proc", "query", "util"], "num": ["set", "nu", "mn", "cal", "dim", "number", "un", "NUM", "total", "n", "m", "ne", "nom", "su", "sum", "im", "mon", "count", "um", "no", "nb", "cum", "na", "np", "en", "Num", "nm", "mult", "nam", "mis", "net", "den", "nt", "non"], "max": ["pop", "end", "ex", "star", "key", "ax", "limit", "maximum", "master", "cos", "temp", "ver", "prime", "best", "co", "global", "total", "v", "m", "rand", "n", "top", "rank", "sum", "high", "can", "mean", "tx", "act", "right", "auto", "gt", "min", "opt", " Max", "range", "mad", "dev", "null", "core", "huge", "rest", "pi", "mx", "k", "mod", "head", "conf", "out", "ma", "p", "parent", "upper", "Max", "last", "box", "MAX", "size", "med", "all", "grow", "ox", "window", "map"], "maxnum": ["highestnum", "MAXnumber", "highestNUM", "highest2", "MAXn", "lastnumber", "Maxn", "MAXnum", "axnum", "lastn", "max10", "lastnum", "MAX10", "maxmon", "highestnumber", " maxnumber", "ax10", "MAX2", "lastNum", " max10", "MAXNUM", "finalNum", "finaln", "finalnumber", "axn", "maxnumber", " maxNUM", " maxmon", "maxNUM", " maxn", "finalnum", "MAXmon", "Maxnumber", "maxNum", "axmon", "Maxnum", "maxn", "MaxNum"], "max2": ["mx02", " maxtwo", "max1", "ax2", "axTwo", "mxif", "x02", "maxTwo", "x2", "master3", "min2", "master02", "max02", "ax1", "master2", "minTwo", " max4", "maximumtwo", "sum02", "maximumTwo", "mintwo", " maxif", "ax02", "max4", "max3", " max02", " maxTwo", "maxtwo", " max1", "xtwo", "ax4", "axif", "masterTwo", "maximum2", "sumtwo", "sum2", "ax3", " max3", "maxif", "mx2", "Max4", "Max1", "Max2"], "x": ["q", "ix", "ex", "wx", "ax", "el", "php", "ox", "l", "number", "co", "yx", "pl", "\u00e7", "v", "n", "pe", "xf", "ey", "xy", "tx", "im", "inx", "ind", "act", "sw", "xx", "index", "on", "px", "xc", "z", "j", "xes", "null", "dx", "i", "lex", "ty", "est", "g", "ick", " cx", "mx", "xt", "k", "xxx", "xd", "ct", "w", "e", "X", "t", "check", "rx", "ux", "ctx", "y", "xi", "xs", "xp", "fx"], "in": ["r", "gin", "bin", "from", "bit", "n", "raw", "arg", "image", "din", "is", "ic", "ins", "conf", "old", "all", "query", "inf", "l", "isin", "id", "sin", "doc", "IN", "px", "io", "win", "reader", "it", "stream", "inner", "inside", "local", "s", "mac", "mc", "ex", "rt", "inc", "vin", "rin", "val", "serv", "ind", "In", "an", "nin", "i", "input", "out", "ma", "add", "readable", "line", "mi", "name", "mm", "con", "v", "ini", "err", "inn", "user", "any", "min", "index", "init", "std", "t", "info", "cin"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main (String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int[] Pz = new int[N];\\n        for (int i = 0; i < N; i++) {\\n            Pz[i] = sc.nextInt();\\n        }\\n        int minVal = 1000000000;\\n        int cnt = 0;\\n        for (int i = 0; i < N; i++){\\n            if (Pz[i] < minVal){\\n                minVal = Pz[i];\\n                cnt++;\\n            }\\n\\n        }\\n        System.out.println(cnt);\\n\\n    }\\n}", "target": "229", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "cr", "bc", "sv", "sp", "inc", "dc", "ck", "ctl", "capt", "cle", "sel", "sch", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "screen", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "N": ["Z", "D", "I", "Node", "TN", "F", "ND", "NM", "SN", "NP", "NE", "NB", "n", "Mon", "No", "S", "Ni", "NG", "P", "NO", "T", "R", "NS", "NR", "V", "ANY", "NH", "M", "None", "MN", "Len", "AN", "GN", "NC", "Sn", "C", "UN", "NN", "Num", "NA", "L", "K", "J", "Net", "NI", "NT", "Ns"], "Pz": ["PTzh", "NPzip", "NPnz", "TPzip", "Pze", " Pzh", "Pzo", " Pzo", "TPze", "Lzh", "pch", "Plnz", "Cze", "pzi", " Pzi", "Prozi", "pnz", "Pronz", "Pll", "Proz", "NPz", "PTll", " Pch", "Czi", "Plzo", " Pll", "Proch", "Lll", "TPzi", "Lz", "PTz", "Plzip", "pz", "Pch", "Pnz", " Pnz", "Lzi", "Plz", " Pzip", " Pze", "PTzi", "NPzo", "Cz", "Pzh", "Pzi", "TPz", "Czip", "Pzip"], "i": ["set", "q", "ix", "zi", "iu", "base", "ei", "li", "n", "me", "batch", "ai", "ki", "ik", "ims", "history", "is", "ic", "y", "oi", "di", "ri", "fi", "chain", "ip", "ji", "point", "id", "ij", "in", "client", "ori", "io", "bi", "it", "g", "inner", "ci", "sim", "cli", "ii", "phi", "hi", "php", "progress", "ind", "u", "\u0438", "pi", "iso", "my", "gu", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "err", "by", "im", "qi", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "multi", "info", "iter"], "minVal": ["MinVol", "minimumSel", "initData", "smallEl", "minVol", " minBu", "MINBu", " minData", "minAvg", "minValue", "MINValue", "smallVal", " minSel", "smallVAL", "minSel", "minimumVol", "initVal", "MINVal", "minimumValue", "initEl", "minEl", " minAvg", "minimumBu", "minData", " minVol", "MINAvg", "MinSel", "minVAL", "MinValue", " minValue", "minimumAvg", "smallData", "initVAL", "MinVal", "minimumVal", "minBu", " minVAL", " minEl"], "cnt": ["contn", " cannot", "Ccount", "CNT", "cachent", "cachect", "contct", "cNT", "rnt", " cNT", " count", "cn", "rount", "cachecount", "cct", "Cct", " cn", "contNT", "contnt", "Count", "count", "rNT", "cacheannot", "Cannot", "Cnt", "rcount", " ccount", "cannot", "ccount", "Cn", " cct"]}}
{"code": "import java.io.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]) throws IOException{\\n\t\tBufferedReader buf = new  BufferedReader(new InputStreamReader(System.in));\\n\t\tString[] str = buf.readLine().split(\" \");\\n\t\tint r = Integer.parseInt(str[0]);\\n\t\tint c = Integer.parseInt(str[1]);\\n\t\tint[][] array = new int[r+1][c+1];\\n\t\t\\n\t\tfor(int i=0; i<r; i++){\\n\t\t\tstr = buf.readLine().split(\" \");\\n\t\t\tfor(int j=0; j<c; j++){\\n\t\t\t\tarray[i][j] = Integer.parseInt(str[j]);\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0; i<r; i++){\\n\t\t\tfor(int j=0; j<c; j++){\\n\t\t\t\tarray[i][c] += array[i][j];\\n\t\t\t}\\n\t\t}\\n\t\tfor(int j=0; j<=c; j++){\\n\t\t\tfor(int i=0; i<r; i++){\\n\t\t\t\tarray[r][j] += array[i][j];\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i=0; i<r+1; i++){\\n\t\t\tfor(int j=0; j<c+1; j++){\\n\t\t\t\tSystem.out.print(array[i][j]);\\n\t\t\t\tif(j!=c)\\n\t\t\t\t\tSystem.out.print(\" \");\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\t\t\\n\t}\\n}", "target": "23", "substitutes": {"buf": ["br", "block", "loader", "Buff", "Buffer", "ob", "mb", "queue", "uf", "bar", "bc", "aer", "bf", "bh", "db", "bed", "msg", "bl", "bs", "buff", "pg", "bp", "b", "eb", "req", "bag", "buffer", "mem", "fb", "bu", "ered", "reader", "cv", "pkg", "cmd", "nb", "pb", "bg", "bt", "bo", "pool", "etc", "cb", "eng", "aux", "rb"], "str": ["br", "dat", "q", "ctr", "STR", "dec", "att", "ar", "parse", "rs", "chain", "len", "del", "ns", "cr", "sp", "n", "dr", "tr", "oct", "bl", "comm", "doc", "raw", "print", "spec", "enc", "stri", "sw", "res", "form", "list", "sl", "arr", "hex", "sts", "string", "url", "Str", "div", "text", "rest", "vol", "wr", "txt", "fr", "exp", "t", "s", "char", "ld", "ch", "gr", "desc", "st"], "r": ["br", "q", "rr", "ri", "d", "rg", "rar", "ar", "l", "rs", "nr", "rf", "ur", "rt", "h", "cr", "rid", "m", "v", "rd", "n", "dr", "err", "ro", "attr", "mr", "R", "res", "ru", "rm", "u", "ir", "range", "z", "arr", "hr", "it", "pr", "g", "rec", "rel", "w", "fr", "yr", "t", "er", "p", "x", "re", "rc", "rb", "sr"], "c": ["arc", "lc", "ca", "ctr", "col", "cc", "d", "cur", "con", "current", "l", "co", "cl", "h", "cf", "o", "cr", "n", "m", "cp", "v", "ce", "dc", "cor", "ec", "cu", "cache", "a", "b", "count", "f", "u", "tc", "z", "cat", "cv", "cd", "C", "cs", "nc", "k", "cm", "ic", "ci", "com", "conf", "max", "ct", "e", "gc", "t", "p", "ac", "cb", "mc", "rc", "ch"], "array": ["result", "av", "stage", "ray", "Array", "archive", "row", "ar", "equality", "number", "var", "element", "chain", "now", "system", "amount", "object", "value", "v", "ash", "app", "attribute", "batch", "pair", "database", "actor", "section", "form", "a", "list", "view", "audio", "instance", "buffer", "collection", "arr", "range", "sequence", "variable", "our", "stack", "component", "trace", "grid", "string", "vector", "data", "area", "json", "table", "record", "memory", "iterator", "answer", "angle", "other", "hash", "integer", "rays", "binary", "angular", "au", "library", "function", "window", "map"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "ar", "hi", "ei", "iy", "l", "ip", "ji", "li", "id", "v", "ij", "m", "n", "ini", "in", "ion", "al", "this", "ai", "ki", "im", "ind", "ori", "qi", "b", "a", "ik", "ia", "init", "\u0438", "u", "ir", "z", "bi", "it", "la", "ity", "ui", "ie", "is", "uri", "pi", "g", "ti", "ic", "ci", "sim", "iq", "info", "p", "iter", "ami", "y", "xi", "ii", "si", "to", "di", "x", "mi"], "j": ["br", "q", "ix", "ax", "bc", "cr", "n", "ne", "note", "on", "job", "pr", "you", "e", "ot", "ph", "kj", "y", "em", "di", "je", "x", "jl", "dj", "next", "jac", "res", "jit", "col", "og", "el", "l", "ji", "o", "adj", "ij", "bs", "ge", "ret", "ja", "yy", "io", "z", "bi", "it", "uj", "g", "k", "js", "J", "bo", "fr", "exp", "ng", "pt", "jj", "jo", "dr", "tr", "son", "jas", "ion", "bl", "xy", "ind", "ody", "u", "json", "rel", "jp", "other", "p", "jc", "add", "ch", "kid", "v", "m", "let", "jump", "ju", "bj", "b", "oj", "Ja", "ie", "off", "aj", "obj", "er", "ijk", "ev", "jen"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        B solver = new B();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class B {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            // \u5165\u529b\\n            int k = Integer.parseInt(in.next());\\n            int x = Integer.parseInt(in.next());\\n\\n            if (k == 1) {\\n                out.println(x);\\n                return;\\n            }\\n            for (int i = x - k + 1; i < x + k; i++) {\\n                out.printf(\"%d\", i);\\n                out.print(\" \");\\n            }\\n            out.println();\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "207", "substitutes": {"inputStream": ["outputFile", " inputSteam", "outputView", "inputSteam", "inputView", " inputView", "sourceSteam", "sourceStream", " inputstream", "inputstream", "importWindow", "sourcestream", "importSteam", "outputstream", " inputWindow", "importFile", "inputFile", "outputWindow", "sourceView", "inputWindow", "outputSteam", "importStream", " inputFile"], "outputStream": ["outputSet", "thisForm", "outputScreen", "inputSteam", "connectionStream", "connectionSet", " outputSteam", "topSet", " outputSet", "outputForm", " outputForm", "thisStream", "connectionSteam", "inputScreen", "inputForm", "topWriter", "outputWriter", "thisScreen", "thisSteam", "topStream", "outputSteam", "topSteam", " outputWriter", " outputScreen", "connectionWriter"], "in": ["r", "gin", "bin", "inf", "current", "l", "isin", "rt", "login", "id", "inc", "sin", "ini", "err", "pin", "source", "by", "al", "inn", "file", "rin", "IN", "this", "get", "run", "user", "or", "ind", "on", "In", "init", "io", "reader", "it", "null", "din", "is", "i", "thin", "kin", "inner", "ic", "en", "inside", "ins", "input", "output", "local", "t", "info", "cin", "s", "er", "add", "all", "st"], "out": ["r", "ou", "result", "name", "ex", "outer", "flush", "temp", "writer", "chain", "co", "log", "o", "sys", "n", "ch", "err", "msg", "OU", "this", "OUT", "os", "can", "report", "run", "write", "client", "res", "cache", "gt", "at", "b", "list", "io", "gr", "it", "aos", "Out", "null", "no", "inner", " OUT", "table", "good", "c", "ins", "output", "w", "gc", "t", "info", "check", "s", "p", "stable", "er", "crit", "net", "all", "to", "nt", "x", "outs"], "solver": ["solutions", "ssolver", "solved", "resolver", "ssolutions", "Solution", "ssolution", "solving", "unsolving", " solution", "Solve", " solve", "resolved", " solutions", "insolver", "insolved", "ssolve", "solve", "unsolution", "insolving", "solution", "unsolver", "Solutions", "unsolved", "Solver", "insolution", "resolution", "resolving"], "testNumber": ["testNumbers", "testNum", " solutionnumber", "testnumber", " testnumber", " attemptnumber", " attemptNum", " attemptNumber", " solutionNumbers", " solutionNum", " testNum", " solutionNumber", " testNumbers", " attemptNumbers"]}}
{"code": "import java.io.*;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) throws IOException {\\n       Scanner in = new Scanner(System.in);\\n       int a, b;\\n       int idx = 0;\\n       while(true) {\\n\t       a = in.nextInt();\\n\t       b = in.nextInt();\\n\t       if(a == 0 && a == b) return;\\n\t       if(a<b) System.out.printf(\"%d %d\\n\", a, b);\\n\t       else System.out.printf(\"%d %d\\n\", b, a);\\n       }\\n    }\\n}", "target": "72", "substitutes": {"in": ["r", "end", "gin", "d", "bin", "inf", "con", "from", "l", " din", "isin", "h", "rt", "id", "inc", "v", "m", "n", "ini", "err", "doc", "per", "inn", "raw", "IN", "sum", "user", "serv", "ind", "In", "init", "world", "io", "reader", "din", "is", "i", "thin", "stream", "ner", "inner", "en", "ins", "input", "std", "conf", "out", "check", "ma", "cin", "info", "add", "all", "readable", "line"], "a": ["ae", "ca", "d", "ar", "aq", "l", "oa", "qa", "ta", "aa", "da", "sta", "sa", "ace", "al", "ai", "isa", "act", "A", "ia", "an", "la", "ga", "ao", "ab", "pa", "ea", "apa", "area", "aff", "ba", "aaa", "na", "aka", "ast", "aj", "e", "alpha", "ma", "t", "s", "eas", "ac", "as", "era", "au", "va", "x", "am"], "b": ["br", "d", "beta", "sb", "ob", "mb", "base", "l", "o", "bar", "bc", "big", "v", "n", "m", "db", "by", "bs", "bp", "or", "back", "reb", "eb", "fb", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bis", "bo", "other", "blue", "p", "bb", "cb", "be", "y", "rb", "to", "B"], "idx": ["dxs", "IdX", "Idix", "dX", "idxs", "idix", "dix", "ridx", "Idxs", "dx", "ridix", "ridxs", "idX", "Idx", "ridX"]}}
{"code": "\\nimport java.util.*;\\nimport java.util.regex.Matcher;\\n\\n/**\\n * Created by Seiya on 2016/10/16.\\n */\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        long N = scanner.nextLong();\\n\\n        ArrayList<Long> list = new ArrayList<Long>();\\n        long i = 1;\\n        double last = Math.sqrt(N);\\n        while(true){\\n            if(N % i == 0){\\n                list.add(N / i);\\n            }\\n            if(i > last)break;\\n            i++;\\n        }\\n\\n        long ans = 99999999;\\n        for (int j = 0; j < list.size(); j++) {\\n            int temp = Math.max(log10(list.get(j)), log10(N / list.get(j)));\\n            ans = Math.min(ans, temp);\\n        }\\n        System.out.println(ans);\\n\\n\\n    } // mainMethod\\n\\n    public static int log10(long n){\\n        int ans = 0;\\n        while(n > 0){\\n            n /= 10;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n\\n\\n} // MainClass\\n", "target": "61", "substitutes": {"scanner": ["canener", "generener", "generner", "Scanator", " scanener", "scrollning", "scanener", "Scanener", "scroller", "Scaner", "canator", "generer", "generning", "scrollner", "scanator", " scanning", " scanator", "Scanner", "canner", "scanning", "scaner", " scaner", "scrollener", "caner"], "N": ["D", "I", "TN", "F", "ND", "NM", "NUM", "SN", "NP", "NB", "n", "Size", "O", "G", "S", "Ni", "NG", "P", "NO", "T", "NL", "R", "NS", "Na", "NR", "V", "M", "W", "NH", "AN", "GN", "H", "Sn", "C", "NN", "Num", "Y", "L", "NA", "J", "K", "CN", "CNN", "NI", "NT", "Ns"], "list": ["set", "block", "dl", "result", "group", "next", "array", "acl", "queue", "l", "number", "entry", "pre", "chain", "li", "log", "tree", "tmp", "n", "summary", "batch", "level", "detail", "filter", "print", "LIST", "lat", "state", "dict", "user", "ist", "shape", "index", "lists", "single", "collection", "left", "sequence", "stack", "history", "null", "listed", "menu", "status", "lv", "table", "record", "L", "old", "pool", "out", "local", "def", "parent", "add", "all", "rule", "st", "map"], "i": ["I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "l", "ip", "fi", "o", "li", "id", "n", "v", "m", "ini", "in", "ai", "ni", "ki", "im", "qi", "index", "f", "ims", "bi", "it", "ui", "is", " I", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "t", "iter", "oi", "y", "ii", "xi", "si", "di", "x", "mi"], "last": ["end", "next", "significant", "enable", "master", "current", "best", "total", "latest", "rand", "tail", "END", "show", "close", "largest", "unique", "start", "since", "count", "worst", " LAST", "recent", "prev", "las", " Last", "full", "est", "rest", "length", "ast", "old", "max", "reverse", "nd", "char", "stable", "Last", "size", "first", "st"], "ans": ["acs", " Ans", "uns", "ents", "ons", "eps", "anc", "nets", "vals", "anas", "aus", "oss", "ns", "ads", "ks", "beans", "nan", "ends", "ians", "os", "ars", "can", "ms", "ids", "mean", "arts", "ANS", "amps", "ats", "ens", "ants", "es", "ls", "an", "AN", "ann", "sts", "vs", "ts", " spans", "ins", "vers", "aps", "as", "posts", "xs", "rans", "ps", "anon", "lan", "offs", "outs", " scans"], "j": ["br", "q", "jac", "ix", "jit", "jar", "og", "key", "att", "from", "jl", "ji", "jj", "o", "jo", "v", "ij", "m", "jump", "ge", "ja", "ind", "bj", "b", "oj", "job", "req", "z", "it", "pr", "uj", "g", "json", "k", "bot", "c", "js", "aj", "obj", "jp", "J", "bo", "jet", "kj", "y", "jc", "jack", "je", "x", "dj", "jen"], "temp": ["pt", "deg", "acc", "mag", "perature", "current", "prime", "pre", "total", "perm", "adj", "tmp", "cap", "tem", "Temp", " Temp", "fac", "buffer", "test", "tc", "mem", "const", "unit", "Temperature", "mint", "tm", "template", "ptr", "cum", "mod", "emp", "hum", "max", "t", "fake", "em", "kw", "term"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = Integer.parseInt(sc.next());\\n\t\tboolean aa = false;\\n\t\t// \u5947\u6570\u306e\u307f\u306e\u3068\u304dtrue\\n\t\tboolean bb = true;\\n\t\tfor(int i=0; i<N; i++) {\\n\t\t\tint a = Integer.parseInt(sc.next());\\n\t\t\tif(a % 2 == 0) {\\n\t\t\t\tbb = false;\\n\t\t\t\tif(a % 3 == 0 || a% 5==0) {\\n\t\t\t\t\taa = true;\\n\t\t\t\t} else {\\n\t\t\t\t\taa = false;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(aa || bb ? \"APPROVED\": \"DENIED\");\\n\\n\t}\\n}\\n", "target": "113", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "cur", "dec", "sec", "cl", "sys", "ser", "sh", "cr", "bc", "sv", "sp", "tk", "ec", "sch", "cam", "sw", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "screen", "pb", "ok", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "sub"], "N": ["D", "I", "Z", "F", "E", "n", "O", "G", "S", "P", "T", "R", "NS", "Q", "NR", "V", "M", "ID", "H", "C", "L", "K", "J", "X", "NN", "NT", "B", "Ns"]}}
{"code": "import java.util.*;\\nimport java.util.HashSet;\\nimport java.util.Map;\\nimport java.util.HashMap;\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Arrays;\\nimport java.util.Scanner;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int s = sc.nextInt();\\n        int s_front = s / 100;\\n        int s_back = s % 100;\\n\\n        if (0 < s_front && s_front < 13) {\\n            if (0 < s_back && s_back < 13) {\\n                System.out.println(\"AMBIGUOUS\");\\n            } else {\\n                System.out.println(\"MMYY\");\\n            }\\n        } else {\\n            if (0 < s_back && s_back < 13) {\\n                System.out.println(\"YYMM\");\\n            } else {\\n                System.out.println(\"NA\");\\n            }\\n        }\\n    }\\n}\\n\\n\\n\\n\\n", "target": "5", "substitutes": {"sc": ["uc", "acc", "esc", "row", "sb", "sec", "cl", "sys", "system", "sv", "sp", "cr", "bc", "sa", "nl", "ec", "sel", "src", "spec", "sch", "sw", "sync", "tc", "scan", "sq", "cs", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "s": ["set", "sym", "gs", "d", "sql", "sb", "rs", "abs", "eds", "ns", "sv", "n", "stat", "S", "sum", "ess", "series", "ms", "ids", "state", "ys", "sw", "south", "se", "fs", "ls", "ims", "z", "space", "states", "sts", "is", "ts", "sq", "i", " ts", "status", "ss", "c", "js", "ds", "sample", "as", "t", "p", "xs", "ps", "stats", "span", "fps"], "s_front": [" s_top", "s___back", "s__start", "s___first", "s__back", "s_floor", " s_start", " s_fore", "s___floor", "s__top", "s_fore", "s_out", "s__front", "s_first", " s_out", "s_start", "s___front", "s_top"], "s_back": ["ims_backs", "ains_back", "s_ack", " s_next", "s_behind", "svalnext", "s_bottom", "ains_forward", "ains_Back", " s_group", "s___front", "s_forward", "s_next", "ims_ack", "s_callback", "ims_bottom", "svalback", "sptback", "s_Back", "svalfront", "s_group", "sptcallback", "s___back", "s_backs", "s___reverse", "s_out", "sptfront", " s_reverse", "sptbus", " s_behind", "svalreverse", "ains_out", "s_reverse", "s_bus", "ims_back", "s___next"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\tif (s.charAt(i) == '1') {\\n\t\t\t\tSystem.out.print('9');\\n\t\t\t} else {\\n\t\t\t\tSystem.out.print('1');\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "111", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "cr", "bc", "sv", "sp", "ko", "ec", "cle", "sel", "sch", "enc", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "ok", "c", "osc", "Sc", "gc", "asc", "isc", "SC", "mc", "pc", "conv", "ch", "desc", "sub"], "s": ["gs", "r", "sb", "rs", "sys", "h", "sv", "sp", "n", "m", "v", "strings", "source", "in", "ws", "bs", "S", "ms", "ats", "str", "b", "f", "ls", "sts", "string", "is", "ts", "sq", "g", "ss", "c", "js", "w", "out", "t", "qs", "p", "ps", "hs"], "i": ["set", "I", "ix", "ex", "ri", "key", "sql", "phi", "gi", "hi", "iu", "ogi", "ei", "l", "chain", "ji", "li", "id", "n", "m", "v", "missing", "ini", "me", "in", "batch", "ski", "ai", "ms", "ki", "im", "ind", "qi", "a", "ori", "index", "f", "us", "init", "u", "io", "j", "bi", "it", "ui", "is", "status", "pi", "ti", "ic", "ci", "c", "sim", "yi", "cli", "e", "multi", "iq", "gu", "y", "oi", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main{\\n\tpublic static void main(String args[]) throws IOException{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\toperateStack ost = new operateStack();\\n\t\tString[] str;\\n\t\tint len, top = 0;\\n\t\tlong op, cal;\\n\t\t\\n\t\tstr = br.readLine().split(\" \", 0);\\n\t\tlen = str.length;\\n\t\t\\n\t\tfor(int i = 0; i < len; i++){\\n\t\t\t\\n\t\t\tif(str[i].equals(\"+\")){\\n\t\t\t\tost.calc(1);\\n\t\t\t}\\n\t\t\telse if(str[i].equals(\"-\")){\\n\t\t\t\tost.calc(2);\\n\t\t\t}\\n\t\t\telse if(str[i].equals(\"*\")){\\n\t\t\t\tost.calc(3);\\n\t\t\t}\\n\t\t\telse{\\n\t\t\t\top = Long.parseLong(str[i]);\\n\t\t\t\tost.push(op);\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(ost.pop());\\n\t}\\n}\\n\\nclass operateStack{\\n\tlong[] stack = new long[100];\\n\tint top;\\n\t\\n\toperateStack(){\\n\t\tfor(int i = 0; i < 100; i++){\\n\t\t\tstack[i] = 0;\\n\t\t}\\n\t\ttop = 0;\\n\t}\\n\t\\n\tvoid push(long op){\\n\t\tstack[top] = op;\\n\t\ttop ++;\\n\t}\\n\t\\n\tlong pop(){\\n\t\tlong op = stack[top - 1];\\n\t\tstack[top - 1] = 0;\\n\t\ttop --;\\n\t\t\\n\t\treturn op;\\n\t}\\n\t\\n\tvoid calc(int flag){\\n\t\tlong op, op2;\\n\t\tlong cal;\\n\t\t\\n\t\top = pop();\\n\t\top2 = pop();\\n\t\t\\n\t\tswitch(flag){\\n\t\tcase 1:\\n\t\t\tcal = op2 + op;\\n\t\t\tbreak;\\n\t\tcase 2:\\n\t\t\tcal = op2 - op;\\n\t\t\tbreak;\\n\t\tdefault:\\n\t\t\tcal = op2 * op;\\n\t\t\tbreak;\\n\t\t}\\n\t\t\\n\t\tpush(cal);\\n\t}\\n}", "target": "114", "substitutes": {"br": ["r", "bro", "shr", "vr", "cr", "ber", "sp", "kr", "dr", "bh", "tr", "bf", "db", "err", "bl", "bn", "bp", "ro", "Br", "mr", "buf", "BR", "bd", "lr", "reader", "hr", "pr", "wr", "bt", "browser", "fr", "er", "be", "rb", "ch", "st"], "ost": ["rend", "post", "od", "ster", "oc", "ob", "oster", "ox", "oss", "sys", "rt", "oid", "rost", "obs", "om", "rd", "dr", "stone", "tt", "orest", "sta", "oad", "ocr", "soc", "host", "os", "rog", "roc", "osta", "ors", "gob", "ist", "org", "rol", "must", "ott", "sty", "yt", "OST", "ud", "ood", "ond", "est", "rss", "ast", "irst", "lov", " nost", "old", "rob", "ct", "ot", "htt", "storage", "bo", "etc", "boost", "ld", "ort", "ief", "otype", "ust", "nt", "vest", "st", "ord"], "str": ["dat", "r", "elt", "ctr", "STR", "pt", "dec", "cur", "att", "stick", "rs", "chain", "ns", "usr", "sp", "v", "n", "dr", "tr", "err", "sta", "bl", "comm", "seq", "raw", "print", "spec", "enc", "stri", "sw", "form", "pieces", "list", "sl", "pos", "ls", "inst", "req", "arr", "j", "string", "sts", "it", "ts", "Str", "div", "text", "data", "cs", "rest", "vol", "wr", "obj", "input", "js", "txt", "w", "fr", "s", "p", "char", "iter", "del", "gr", "desc", "st"], "len": ["dl", "il", "elt", "coll", "loc", "ll", "el", "l", "kl", "cl", "li", "fil", "del", "sp", "n", "els", "fin", "bl", "nl", "gl", "val", "le", "lit", "lim", "lon", "list", "gen", "pos", "sl", "ls", "mem", "win", "ml", "z", "Len", "length", "fun", "en", "ul", "fl", "syn", "L", "ell", "s", "p", "mil", "ln", "lf", "ld", "size", "all", "lan", "line"], "top": ["set", "lt", "round", "offset", "lift", "sp", "n", "tip", "tops", "level", "left", "bottom", "pool", "ot", "parent", "first", "next", "population", "num", "TOP", "current", "part", "best", "global", "wp", "soc", "tail", "tool", "push", "client", "start", "template", "success", "typ", "hop", "origin", "scope", "ps", "pop", "toc", "pt", "tips", "hot", "tp", "tmp", "tools", "slot", "alt", "list", "pos", "status", "jp", "most", "p", "depth", "height", "dot", "master", "Top", "total", "clip", "po", "msg", "high", "where", "at", "index", "j", "loop", "bot", "max", "ap", "t", "upper", "size", "to"], "op": ["loc", "log", "bit", "sp", "arg", "tx", "opt", "pr", "comp", "cod", "ic", "ops", "cmp", "ot", "ac", "x", "opa", "oe", "num", "og", "oc", "l", "ip", "co", "wp", "o", "operator", "push", "pp", "or", "ist", "ame", "cat", "it", "OP", "rec", "ok", "k", "hop", "exp", "ps", " Op", "expr", "opp", "pop", "il", "mp", "ob", "var", "inc", "tmp", "Op", "al", "xy", "val", "lit", "ind", "pos", "fac", "cmd", "rel", "jp", "p", "cop", "xp", "ep", "pl", "cp", "lp", "msg", "im", "oop", "j", "off", "np", "ap", "info", "oper", "ort", "up", "amp"], "cal": ["oe", "il", "num", "ca", "acc", "col", "coll", "loc", "ll", "oc", "con", "cos", "var", "co", "draw", "broad", "log", "circ", "inc", "bal", "stone", "make", "al", "doc", "call", "sum", "gl", "cell", "val", "wal", "coord", "act", "cache", "fc", "fac", "mem", "rol", "cat", "um", "carry", "sal", "cum", "vol", "fun", "pal", "c", "ul", "eff", "cmp", "Cal", "rel", "gc", "local", "cons", "roll", "ac", "all", "cost", "cf"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "f", "is", "eu", "ic", "e", "ami", "y", "oi", "di", "x", "ri", "fi", "ip", "ji", "o", "id", "ij", "series", "ori", "io", "bi", "it", " I", "g", "ci", "sim", "cli", "iq", "ii", "ex", "phi", "hi", "print", "ind", "major", "u", "\u0438", "fire", "pi", "json", "my", "p", "xi", "si", "mi", "I", "sql", "gi", "v", "m", "ini", "ski", "im", "qi", "us", "init", "j", "ui", "ie", "uri", "ti", "multi", "t", "info"], "stack": ["set", "pop", "stage", "save", "look", "track", "row", "array", "fail", "queue", "var", "zero", "sp", "v", "ace", "buff", "via", "print", "push", "where", "cache", "back", "list", "view", "sl", "ack", "ls", "buffer", "acks", "load", "pos", "history", "slice", "pull", "loop", "trace", "ts", "play", "window", "claim", "ops", "store", "ul", "body", "storage", "style", "bo", "exp", "roll", "scope", "ps", "pack", "size", "frames", "Stack", "names", "st", "map"], "flag": ["valid", " Flag", "set", "stage", "save", "cond", "flags", "bit", "leaf", "id", "cloud", "level", "tag", "lag", "af", "bool", "code", "fc", "count", "func", "type", "field", "cmd", "age", "bug", "status", "lv", "Flag", "fun", "store", "continue", "char", "dep", "ld", "command", "ag", "line"], "op2": ["ip22", "ap2", "ap1", "oper02", "op12", "Op0", "op1", "ip2", " op12", "op0", "hop2", " op0", "oper22", "opTwo", "jp22", " op02", "Op02", "ip1", "hoplet", "oper2", " oplet", "oper1", " opTwo", "ap12", "oplet", "jp2", "Op2", "exp1", "op02", "exp2", "hop0", "jp02", "Oplet", "hop02", "op22", "ip02", " op1", "ipTwo", "exp12", "apTwo", "jp1"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String input;\\n        int m;\\n\\n        while (!(input = sc.next()).equals(\"-\")) {\\n            m = sc.nextInt();\\n            int[] h = new int[m];\\n            char[] output = new char[input.length()];\\n            for (int i = 0; i < m; i++) {\\n                h[i] = sc.nextInt();\\n            }\\n            for (int i = 0; i < input.length(); i++) {\\n                output[i] = input.charAt(i);\\n            }\\n\\n            for (int i = 0; i < m; i++) {\\n                output = change(output, input.length(), h[i]);\\n            }\\n            for (char c : output) System.out.print(c);\\n            System.out.println();\\n        }\\n    }\\n\\n    public static char[] change(char[] input, int length, int n) {\\n        char[] output = new char[length];\\n\\n        for (int i = 0; i < length - n; i++) {\\n            output[i] = input[i+n];\\n        }\\n        for (int i = length - n; i < length; i++) {\\n            output[i] = input[i + n - length];\\n        }\\n\\n        return output;\\n    }\\n}\\n", "target": "216", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sb", "sec", "co", "cl", "sys", "sh", "bc", "sv", "sp", "cr", "inc", "nl", "ctl", "capt", "cle", "irc", "sch", "sw", "fc", "sync", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "pb", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "sub"], "input": ["q", "ll", "row", "from", "base", "prefix", "context", "raw", "unknown", "str", "image", "PUT", "data", "format", "rc", "all", "query", "subject", "parse", "current", "l", "ip", "source", "in", "read", "form", "view", "sequence", "pattern", "it", "expression", "partial", "inner", "table", "local", "config", "result", "att", "feed", "xml", "qa", "ref", "value", "focus", "item", "this", "hello", "act", "string", " inputs", "human", "request", "sample", "out", "p", "op", "active", "target", "background", "address", "internal", "total", "get", "hidden", "buffer", "null", "text", "unsigned", "integer", "check", "char", "command", "Input"], "m": ["q", "r", "mm", "d", "dm", "mo", "mask", "mp", "mb", "l", "o", "perm", "v", "me", "meta", "ms", "mean", "mr", "mut", "mu", "vm", "im", "b", "min", "sm", "M", "mem", "j", "um", "tm", "gm", "mk", "g", "k", "cm", "mod", "mt", "ma", "t", "p", "man", "em", "y", "mc", "all", "mat", "mi"], "h": ["dh", "he", "uh", "rh", "d", "hi", "hl", "l", "hp", "o", "sh", "kh", "bh", "oh", "v", "host", "hh", "ih", "im", "hidden", "shape", "b", "f", "hold", "history", "it", "H", "g", "html", "ph", "w", "p", "handle", "ha", "header", "hm", "hs", "ch", "ah", "hash"], "output": ["set", "block", "outer", "production", "put", "console", "batch", "entity", "object", "collection", "history", "complete", "data", "four", "format", "blue", "net", "all", "next", "response", "cur", "current", "l", "temp", "o", "change", "um", "document", "message", "child", "success", "table", "network", "ln", "binary", "header", "page", "config", "result", "cut", "value", "resource", "remote", "print", "section", "write", "cache", "list", "cmd", "content", "out", "other", "p", "column", "line", "see", "ou", "target", "category", "Output", "v", "export", "default", "process", "update", "csv", "ut", "hidden", "buffer", "component", "text", "display", "body", "command"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "ims", "is", "ic", "ios", "ami", "y", "oi", "di", "ri", "fi", "chain", "ip", "ji", "point", "o", "id", "ij", "ori", "io", "slice", "bi", "it", "um", "g", "ci", "sim", "cli", "ii", "phi", "php", "ion", "remote", "ni", "ind", "list", "ia", "ry", "\u0438", "pi", "iri", "xi", "si", "mi", "I", "ico", "gi", "iy", "ini", "err", "ice", "im", "qi", "us", "es", "init", "ies", "j", "ity", "umi", "ui", "ie", "uri", "ti", "PI", "multi", "info"], "c": ["r", "lc", "col", "cc", "d", "l", "co", "o", "cf", "v", "cp", "ch", "ce", "dc", "cu", "a", "b", "f", "tc", "z", " C", "C", "vc", "cs", "g", "nc", "k", "cm", "abc", "ic", "ci", "ct", "e", "out", "t", "p", "ac", "y", "x"], "length": ["q", "offset", "d", "ll", "number", "ence", "nl", "shape", "f", "history", "e", "padding", "th", "description", "frequency", "maximum", "l", "len", "o", "le", "start", "form", "count", "sequence", "full", "vector", "k", "idth", "style", "ength", "capacity", "w", "s", "Length", "ty", "split", "end", "version", "N", "value", "al", "database", "power", "print", "pieces", "list", "type", "string", "pi", "head", "angle", "p", "volume", "line", "height", "ENGTH", "name", "position", "total", "v", "distance", "width", "minimum", "index", "buffer", "range", "text", "join", "en", "L", "duration", "integer", "t", "size", "time"], "n": ["num", "r", "name", "d", "nn", "l", "number", "len", "N", "o", "ns", "node", "v", "dn", "ne", "nl", "ni", "sn", "note", "count", "index", "b", "u", "an", "z", "j", "no", "nb", "g", "fn", "k", "np", "na", "en", "body", "span", "out", "w", "t", "s", "p", "ln", "y", "size", "nt", "x"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tString s = scan.next();\\n\t\tString t = scan.next();\\n\\n\t\tint ans = 0;\\n\t\tint i;\\n\t\tint length = s.length();\\n\t\tfor(i = 0; i < length; i++) {\\n\t\t\tif(s.substring(i, i + 1).equals(t.substring(i, i + 1)))\\n\t\t\t\tans++;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "243", "substitutes": {"scan": ["set", "row", "nn", "reach", "parse", "gate", "san", "nav", "watch", "sys", "Scan", "system", "sv", "n", "m", "sin", "read", "in", "nl", "sche", "sum", "can", "run", "go", "scale", "auto", "se", "gen", "sm", "search", "sync", "sort", "scroll", "an", "clean", "sc", "find", "ner", "g", "store", "out", "gc", "check", "black", "sur", "re", "proc", "query", "ch", "ann"], "s": ["gs", "r", "sql", "sf", "sb", "l", "rs", "sys", "h", "so", "sv", "sp", "n", "in", "bs", "S", "os", "ms", "ys", "ats", "str", "a", "se", "b", "sl", "ls", "z", "string", "sts", "is", "ts", "sq", "g", "ss", "js", "ins", "qs", "p", "ps", "xs", "sr", "st"], "t": ["pt", "to", "wt", "total", "rt", "o", "ta", "tree", "n", "tr", "tt", "tk", "T", "or", "gt", "at", "type", "it", "tm", "ts", "ty", "template", "mt", "vt", "txt", "ct", "ot", "p", "te", "title", "nt", "st", "term"], "ans": ["ents", "uns", "ons", "nets", "vals", "anas", "anks", "names", "eds", "ns", "ads", "ks", "alls", "orders", "ians", "os", "can", "yes", "ms", "lines", "ids", "users", "ANS", "arts", "amps", "ats", "ens", "ants", "als", "ls", "an", "ows", "ims", "AN", "ann", "vs", "is", "anes", " spans", "cs", "ations", "has", "ins", "aps", "ions", "as", "xs", "ps", "rows", "lan", "offs", "outs", " scans"], "i": ["I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "l", "chain", "ip", "o", "li", "id", "v", "m", "n", "ini", "ai", "ni", "ki", "im", "ind", "qi", "index", "init", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "g", "ti", "ic", "ci", "sim", "my", "cli", "multi", "info", "p", "ami", "y", "oi", "ii", "xi", "size", "si", "span", "di", "mi"], "length": ["ENGTH", "end", "d", "character", "specified", "position", "php", "number", "l", "len", "total", "h", "height", "value", "n", "distance", "ngth", "family", "width", "start", "bus", "shape", "count", "f", "list", "load", "type", "range", "history", "sequence", "space", "append", "loop", "string", "no", "left", "full", "text", "L", "duration", "ength", "capacity", "integer", "format", "product", "present", "angle", "upper", "padding", "Length", "size", "library", "wind"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint n = sc.nextInt();\\n\t\tint[] array = new int[n];\\n\t\tfor(int i = 0; i < array.length; i++)\\n\t\t\tarray[i] = sc.nextInt();\\n\t\t\\n\t\tint count = 1;\\n\t\tfor(int i = 1; i < array.length; i++) {\\n\t\t\tboolean flag = true;\\n\t\t\tfor(int j = 0; j < i; j++)\\n\t\t\t\tif(array[j] > array[i])\\n\t\t\t\t\tflag = false;\\n\t\t\tcount += flag ? 1 : 0;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n", "target": "7", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "ck", "nl", "ctl", "capt", "cle", "sch", "cam", "sw", "sync", "tc", "cv", "scan", "sq", "cs", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "n": ["num", "d", "nn", "number", "l", "N", "total", "ns", "m", "v", "ne", "nan", "nl", "ni", "sn", "a", "z", "no", "nb", " N", "pi", "na", "k", "nc", "np", "g", "c", "conf", "out", "ng", "t", "p", "net", "nt", "x", "window"], "array": ["av", "row", "number", "allow", " Array", "amount", "attribute", "shape", "object", "collection", "field", "trace", "order", "angular", "all", "library", "archive", "function", "window", "map", "now", "app", "a", "view", "arr", "share", "sequence", "no", "message", "vector", "ape", "rays", "result", "Array", "ar", "var", "value", "tmp", "section", "auto", "list", "RAY", "audio", "type", "test", "our", "length", "my", "angle", "arrow", "hash", "stage", "save", "ray", "target", "v", "search", "instance", "buffer", "range", "grid", "stack", "component", "null", "area", "memory", "record", "max", "storage", "integer", "external"], "i": ["q", "ix", "zi", "iu", "li", "me", "ai", "f", "ims", "is", "ic", "c", "e", "ami", "oi", "y", "di", "x", "ri", "l", "ip", "ji", "point", "o", "id", "ij", "in", "a", "io", "z", "bi", "it", "k", "ci", "uci", "iq", "s", "ii", "phi", "hi", "ion", "print", "ind", "ia", "u", "ir", "status", "pi", "iso", "my", "gu", "p", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "im", "qi", "index", "us", "init", "ui", "ie", "ti", "multi", "t", "info", "iter", "integer"], "count": ["num", "ount", "ctr", "result", "cc", "found", "current", "number", "base", "weight", "cond", "total", "amount", "summary", "cast", "call", "sum", "report", "account", "Count", "ind", "list", "index", "code", "hold", "z", "comment", "find", "nb", "cont", "age", "C", "status", "length", "c", "conf", "ct", "counter", "out", "check", "t", "size", "nt", "ch", "hash"], "j": ["br", "q", "jac", "ix", "pt", "jl", "ji", "jj", "jo", "v", "ij", "m", "err", "jump", "jas", "ge", "ja", "im", "bj", "at", "b", "oj", "us", "job", "on", "z", "it", "pr", "g", "uj", "json", "k", "js", "obj", "aj", "jp", "ph", "J", "fr", "bo", "other", "kj", "y", "jc", "je", "dj"], "flag": ["set", "lead", "true", "ground", "group", "mask", "agged", "fail", "enable", "cond", "flags", "log", "bit", "light", "leaf", "member", "cloud", "msg", "level", "nl", "file", "sum", "print", "tag", "state", "lag", "bool", "list", "f", "match", "func", "field", "cmd", "age", "bug", "status", "lock", "lv", "Flag", "event", "store", "join", "continue", "check", "iter", "ld", "gz", "FLAG"]}}
{"code": "import java.awt.geom.Point2D;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collection;\\nimport java.util.Collections;\\nimport java.util.Comparator;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.NoSuchElementException;\\nimport java.util.Scanner;\\nimport java.util.Map.Entry;\\nimport java.util.function.BiFunction;\\nimport java.util.function.Function;\\nimport java.util.function.Supplier;\\n\\npublic class Main {\\n    Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    void run() {\\n        int inp_num = Integer.parseInt(sc.next());\\n        HashMap<String, Integer> m = new HashMap<String, Integer>();\\n        for (int i = 0; i < inp_num; i++) {\\n            String s = sc.next();\\n            if (m.containsKey(s)) {\\n                m.put(s, m.get(s) + 1);\\n            } else {\\n                m.put(s, 1);\\n            }\\n        }\\n        int ma = -1;\\n        ArrayList<String> candidates = new ArrayList<>();\\n        for (Entry<String, Integer> ent : m.entrySet()) {\\n            if(ma == ent.getValue()){\\n                candidates.add(ent.getKey());\\n            }else if(ma < ent.getValue()){\\n                candidates.clear();\\n                ma = ent.getValue();\\n                candidates.add(ent.getKey());\\n            }\\n      }\\n      Collections.sort(candidates);\\n      for(String can : candidates){\\n        System.out.println(can);\\n      }\\n  }\\n}", "target": "235", "substitutes": {"sc": ["usc", "arc", "sac", "lc", "cc", "anc", "esc", "dec", "mp", "sec", "cl", "sys", "system", "sh", "bc", "sv", "cr", "sp", "soc", "nl", "ctl", "irc", "sch", "sync", "fc", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "ic", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "psc", "sci", "desc"], "inp_num": ["inv2Num", "inp_mon", "inv_Num", "inp2NUM", "inp_Num", "inj_temp", "inp00Num", "inv2NUM", "inp_temp", "inv_NUM", "inp00num", "inj_mon", "inp2Num", "inp2mon", "inp_NUM", "inv_num", "inv_mon", "inp2num", "inv2num", "inp00temp", "inj_Num", "inj_num", "inp00mon", "inv2mon"], "m": ["mn", "mm", "dm", "pm", "mp", "mb", "l", "met", "h", "perm", "mos", "n", "om", "km", "md", "ms", "mean", "mr", "mu", "rm", "sm", "M", "mem", "am", "bm", "gm", "tm", "mx", "cm", "mod", "managed", "mt", "p", "wm", "man", "em", "hm", "mc", "fm", "mi", "map"], "i": ["q", "I", "ix", "ex", "sql", "phi", "gi", "zi", "ei", "cgi", "li", "o", "n", "v", "me", "ini", "in", "print", "ai", "ms", "ind", "qi", "us", "u", "z", "j", "bi", "it", "ui", "ie", "pi", "ti", "ic", "ci", "c", "sim", "cli", "multi", "p", "gu", "iq", "y", "ii", "xi", "si", "di", "x", "mi"], "s": ["gs", "r", "sql", "sb", "rs", "h", "sys", "ns", "sv", "n", "v", "source", "ws", "S", "os", "series", "csv", "ms", "its", "less", "ats", "str", "south", "a", "f", "fs", "us", "ls", "string", "sts", "vs", "is", "ts", "sq", "full", "cs", "ss", "c", "js", "ds", "w", "t", "qs", "ps", "xs", "hs"], "ma": ["Ma", "ca", "usa", "mm", "MA", "mo", "mal", "mp", "mb", "med", "qa", "ta", "ima", "me", "spe", "sta", "sa", "da", "asa", "EMA", "sha", "lia", "wa", "mean", "ms", "mu", "a", "ance", "ia", "la", "mad", "um", "mas", "mar", "pa", "ea", "mma", "media", "na", "fa", "mt", "alpha", "ha", "mac", "ka", "mc", "si", "mi", "ema"], "candidates": ["centonents", "foundournaments", "cmdeters", "candidate", "candsters", "certonents", "continsters", "Candonents", "Candidates", " Candates", "cmditions", "cmdumers", "certsters", "Canders", "candands", " candeters", "contidates", "caritions", "rendonents", "Candates", " canduers", "continidates", " candates", " candournaments", "centidate", "carumers", "Candournaments", "foundidates", " Canditions", "foundonents", " Candumers", "certidates", "centers", "rendates", "foundidate", "continates", " candonents", "centands", "canditions", " candidate", " Candidates", " Candidate", "continonents", "conters", "contidate", "centeters", "caridates", "cmdidates", "certates", "Canduers", "candeters", "contands", " Candeters", "centidates", "careters", "candates", "canduers", "Candands", "candumers", "Candidate", "candonents", "candournaments", "rendidates", " Canduers", "Candeters", "canders", "rendsters"], "ent": ["desc", "ents", "cent", "gent", "mot", "ocent", "elt", "att", "entry", "ect", "ce", "ew", "hend", "needed", "oct", "let", "comm", "ec", "md", "pet", "pent", "ENT", "td", "enc", "act", "ind", "art", "entity", "sent", "inst", "equ", "intent", "est", "et", "ient", "en", "obj", "Ent", "ped", "exp", "er", "nd", "det", "def", "ant", "kt", "net", "ust", "nt", "rent", "ord"], "can": [" cannot", "ca", "cal", "anc", " Can", "con", "pan", "co", "unc", "tk", "cover", "Can", "will", "any", "cam", "cand", "func", "CAN", "an", "tc", "stan", "cat", "cv", "AN", "must", "scan", "g", "c", "sk", " cant", "annot", "could", "man", "cas", "box", "mc", "all", "cus", "ann", "see"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        String text1 = sc.nextLine();\\n        String text2 = sc.nextLine();\\n\\n        int wordNum = text1.length();\\n        int diffCount=0;\\n\\n        for(int i=0;i<wordNum;i++){\\n            if(text1.charAt(i) != text2.charAt(i)){\\n                diffCount +=1;\\n            }\\n        }\\n        System.out.println(diffCount);\\n    }\\n}", "target": "40", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "inc", "ck", "nl", "capt", "cle", "sw", "sync", "exec", "tc", "scan", "sq", "cont", "cs", "ss", "nc", "ok", "c", "syn", "osc", "Sc", "gc", "ng", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "sub"], "text1": ["Text1", "TextOne", "textCar", "subject01", "wordFirst", "textFirst", "text0", "word0", " text0", "TEXTFirst", "wordOne", "textOne", "Text01", "word01", "text01", "subject2", "subjectCar", "wordCar", "Text2", "subjectOne", "subject1", "TEXT1", "word1", " textCar", "TEXT2", "TEXTOne", "word2", " text01", "TextFirst", "subject0"], "text2": ["thread3", "Text1", "word02", "command102", " text02", " text3", "wordtwo", "text02", "command7", "texttwo", " texttwo", "thread7", "command2", "text3", "Text02", "text102", "thread102", "thread2", " text7", "text7", "Text2", "word1", "Texttwo", " text102", "word2", "command3"], "wordNum": ["formnum", "WordMon", "tokenSum", " wordnum", "tokenNUM", "WordNUM", "formNo", "WordNum", "WordNo", " wordSum", " wordNo", "WordSum", "wordnum", "tokenMon", "formNum", "wordMon", "wordSum", "Wordnum", "tokenNum", "wordNo", " wordNUM", " wordMon", "formSum", "wordNUM"], "diffCount": ["diffCounter", " diffFlag", "DiffCounter", "editNum", "editCount", "diffFlag", " differenceChanged", " diffType", "DiffFlag", " diffChanged", "diffChanged", " diffDiff", "diffcount", " differenceCount", "DiffDiff", " diffCounter", "DiffAmount", "editCounter", "DiffNum", "iffFlag", "iffCount", "DiffChanged", " differenceCounter", "editAmount", "iffcount", "DiffType", "iffType", "Diffcount", "diffNum", "diffDiff", " differenceNum", " diffcount", "DiffCount", "diffType", " differenceDiff", " differenceAmount", "diffAmount"], "i": ["q", "I", "ix", "ri", "phi", "gi", "hi", "iu", "zi", "ei", "ip", "ji", "point", "li", "o", "n", "m", "v", "ini", "remote", "ski", "series", "ai", "ms", "ki", "im", "ind", "qi", "a", "ori", "ik", "us", "u", "\u0438", "io", "ims", "j", "bi", "it", "slice", "ui", "is", "uri", "ie", "pi", "g", "ti", "ic", "ci", "my", "cli", "yi", "multi", "t", "gu", "ami", "y", "oi", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.List;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tArrayList<Double> list = new ArrayList<>();\\n\t\twhile (true) {\\n\t\t\ttry {\\n\t\t\t\tInteger.valueOf(br.readLine());\\n\t\t\t\tString aaa = br.readLine();\\n\t\t\t\tString[] bbb = aaa.split(\" \");\\n\t\t\t\tList<String> tmp = Arrays.asList(bbb);\\n\t\t\t\tArrayList<String> tmp2 = new ArrayList<String>(tmp);\\n\t\t\t\tfor (String t : tmp2) {\\n\t\t\t\t\tlist.add(Double.parseDouble(t));\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\tCollections.sort(list);\\n\t\t\t\tCollections.reverse(list);\\n\t\t\t\tdouble newValue = 0;\\n\t\t\t\twhile (list.size() != 1) {\\n\t\t\t\t\tnewValue = list.get(list.size() - 1) + list.get(list.size() - 2);\\n\t\t\t\t\tnewValue = newValue / 2.00;\\n\t\t\t\t\tlist.set(list.size() - 2,newValue);\\n\t\t\t\t\tlist.remove(list.size() - 1);\\n\t\t\t\t\tCollections.sort(list);\\n\t\t\t\t\tCollections.reverse(list);\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(list.get(0));\\n\t\t\t\t\\n\t\t\t} catch (NumberFormatException | IOException e) {\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\\n\t}\\n\\n}\\n", "target": "232", "substitutes": {"br": ["r", "ctr", "driver", "bro", "shr", "pre", "bsp", "cr", "ber", "bc", "kr", "dr", "bf", "bh", "gb", "tr", "db", "bridge", "bl", "bs", "bp", "Br", "mr", "ger", "buf", "BR", "b", "bd", "lr", "obl", "hr", "pr", "wr", "bg", "bt", "browser", "js", "yr", "fr", "bb", "handle", "cb", "rb", "ch", "gr"], "list": ["set", "block", "lt", "group", "ll", "array", "number", "log", "li", "batch", "level", "detail", "LIST", "collection", "ssl", "left", "history", "comment", "elist", "old", "pool", "layout", "def", "parent", "all", "del", "st", "map", "valid", "queue", "l", "chain", "summary", "pair", "alist", "form", "ist", "code", "sort", "single", "sequence", "document", "table", "local", "config", "result", "acl", "pre", "tree", "and", "print", "spec", "dict", "ls", "type", "test", "lex", "cont", "status", "length", "ul", "out", "add", "see", "dl", "entry", "cl", "pl", "v", "word", "filter", "csv", "get", "report", "user", "back", "lists", "index", "search", "load", "stack", "loop", "null", "listed", "record", "obj", "L", "check", "info"], "aaa": ["ae", "AA", "rr", "usa", "acc", "ubuntu", "EEEE", "aaaa", "jj", "aa", "gb", "anza", "alph", "lease", "tta", "iana", "amba", "ooo", "zzy", "a", "xx", "foo", "afi", "yy", "arr", "xa", "rea", "ea", "area", "na", "arb", "aka", "AAA", "xxx", "AAAA", "abba", "bare", "ami", "arre", "eeee", "abb"], "bbb": ["bba", "BBba", "obbb", "bcb", "bbba", "BBb", "bccb", "bcbar", "inkba", "bbbar", "bbbg", "bbar", "inkrb", "obba", "bsb", "bbrb", "inka", "bcbg", "bbcb", "BBa", "obbba", "obbrb", "bsbg", "bbg", "bsbar", "inkb", "bscb", "BBrb", "bb"], "tmp": ["elt", "mm", "mp", "mb", "temp", "pre", "bsp", "rt", "perm", "sp", "cp", "tt", "tf", "batch", "parts", "buff", "stuff", "buf", "MP", "arr", "yy", "pkg", "tm", "nb", "mk", "np", "table", "emp", "bt", "xxx", "obj", "cmp", "txt", "tab", "multi", "etc", "cb", "nt"], "tmp2": ["extra1", "temp2", "mp1", "tempTwo", "temp1", "tmpTwo", "cmp1", "tmp4", "mp2", "cmp4", " tmp4", " tmp1", "extraTwo", "mp3", " tmp3", " tmpTwo", "tmp3", "cmp3", "extra2", "mp4", "cmp2", "tmp1"], "t": ["q", "pt", "wt", "l", "rt", "o", "h", "tree", "v", "m", "n", "tt", "tf", "td", "T", "f", "type", "tc", "z", "j", "tm", "ts", "k", "c", "txt", "ct", "ot", "p", "kt", "ant", "te", "dt", "title", "nt", "st", "term"], "newValue": [" newVal", " newSize", "uniqueVal", "diffValues", "NewAmount", "NEWConnection", "nextvalue", "diffvalue", "newSize", "NewVal", "NewValues", "NewValue", "singleSize", "Newvalue", "NewKey", "diffSize", "singleValue", "newConnection", "uniqueValues", "NEWValue", "diffValue", "nextValue", " newAmount", "newvalue", " newValues", "getvalue", "nextConnection", " newKey", "newKey", "singlevalue", "uniqueValue", "uniqueAmount", "newAmount", "NewSize", "newValues", " newConnection", " newvalue", "getValues", "NEWValues", "newVal", "getSize", "singleKey", "NEWvalue", "nextValues", "getValue"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\t\\n\tstatic long mod= (long) 1e9+7;\\n\t\\n\t\t\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t// TODO Auto-generated method stub\\n\t\tReader.init(System.in);\\n\t\tPrintWriter out=new PrintWriter(System.out);\\n\t\tlong a=Reader.nextInt();\\n\t\tout.println(a+a*a+a*a*a);\\n\t\t\\n\t\t\\n\t\tout.flush();\\n\t\t\\n\t}\\n\\n}\\n\\nclass Seg{\\n\t\\n\tint[] tree,arr;\\n\t\\n\tSeg(int n,int[] a){\\n\t\ttree=new int[4*n];arr=a;\\n\t}\\n\t\\n\tvoid build(int index, int left, int right) {\\n\t\tif(left==right) tree[index]=arr[left];\\n\t\telse {\\n\t\t\tint mid=(left+right)/2;\\n\t\t\tbuild(2*index+1,left,mid);\\n\t\t\tbuild(2*index+2,mid+1,right);\\n\t\t\ttree[index]=Math.max(tree[2*index+1],tree[2*index+2]);\\n\t\t}\\n\t}\\n\t\\n\tint query(int index, int ql, int qr, int left, int right) {\\n\t\tif(ql<=left && right<=qr) return tree[index];\\n\t\telse if(ql > right || qr<left) return 0;\\n\t\telse {\\n\t\t\tint mid=(left+right)/2;\\n\t\t\treturn Math.max(query(2*index+1,left,mid,ql,qr), query(2*index+2,mid+1,right,ql,qr));\\n\t\t}\\n\t}\\n\t\\n\tvoid update(int index, int left, int right, int pos, int val) {\\n\t\tif(left==right) {\\n\t\t\ttree[index]=val;\\n\t\t}\\n\t\telse {\\n\t\t\tint mid=(left+right)/2;\\n\t\t\tif(pos<=mid) {\\n\t\t\t\tupdate(2*index+1,left,mid,pos,val);\\n\t\t\t}\\n\t\t\telse update(2*index+2,mid+1,right,pos,val);\\n\t\t\ttree[index]=Math.max(tree[2*index+1],tree[2*index+2]);\\n\t\t}\\n\t}\\n}\\n\\n\\nclass Reader {\\n    static BufferedReader reader;\\n    static StringTokenizer tokenizer;\\n    /** call this method to initialize reader for InputStream */\\n    static void init() throws IOException {\\n        reader = new BufferedReader(\\n                new FileReader(\"C:\\\\Users\\\\samee\\\\Desktop\\\\GRE prep\\\\confusion.txt\"));\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n    static void init(InputStream input) {\\n        reader = new BufferedReader(\\n                new InputStreamReader(input) );\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n    /** get next word */\\n    static String nextLine() throws IOException{\\n        return reader.readLine();\\n    }\\n    static String next() throws IOException {\\n        while ( ! tokenizer.hasMoreTokens() ) {\\n            //TODO add check for eof if necessary\\n            tokenizer = new StringTokenizer(\\n                    reader.readLine() );\\n        }\\n        return tokenizer.nextToken();\\n    }\\n    static int nextInt() throws IOException {\\n        return Integer.parseInt( next() );\\n    }\\n    static long nextLong() throws IOException {\\n        return Long.parseLong( next() );\\n    }\\n    static double nextDouble() throws IOException {\\n        return Double.parseDouble( next() );\\n    }\\n}", "target": "162", "substitutes": {"mod": [" div", " reg", " lim", "dec", "Mod", " mult", "prime", " floor", "len", " base", "log", " Mod", " scale", "lo", " pow", " ver", " dig", " dec", "off", "max", "inv", " clen", " lo", "size", " num", " exp", "x"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tlong k=sc.nextLong();\\n\t\tint q=Integer.parseInt(sc.next());\\n\t\tsc.nextLine();\\n\t\tlong[] score=new long[n];\\n\t\twhile(sc.hasNextLine()) {\\n\t\t\tscore[Integer.parseInt(sc.nextLine())-1]++;\\n\t\t}\\n\t\tfor(long l:score) {\\n\t\t\tif(k-q+l>0) {\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t}else {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "102", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "co", "cgi", "cl", "sys", "system", "sh", "ser", "cr", "sv", "sp", "bc", "inc", "dc", "comm", "ctl", "ck", "capt", "cle", "sel", "irc", "sch", "go", "cu", "conv", "sync", "fc", "tc", "ctrl", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "screen", "pb", "c", "syn", "osc", "cmp", "Sc", "gc", "cons", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "scrib", "ch", "desc", "sub"], "n": ["num", "nu", "mn", "d", "nn", "nr", "N", "o", "ns", "m", "v", "nl", "sn", "a", "count", "on", "z", "j", "no", "nb", "i", "g", "na", "nc", "length", "en", "c", "nm", "w", "ng", "t", "ny", "p", "nt", "x"], "k": ["ke", "kl", "kan", "o", "ks", "kh", "kr", "m", "v", "km", "tk", "ck", "kn", "ak", "ki", "ik", "kk", "z", "j", "i", "g", "ok", "c", "sk", "ek", "ku", "K", "t", "p", "kj", "ka", "kw", "kid"], "q": ["aq", "qu", "h", "qa", "v", "m", "ck", "qual", "ql", "Q", "qi", "f", "u", "z", "qq", "j", "qv", "ue", "sq", "i", "g", "qt", "quant", "c", "ig", "w", "iq", "p", "qs", "y", "dq", "query"], "score": ["result", "priority", "key", "row", "weight", "log", "node", "value", "sd", "read", "distance", "vote", "rank", "sche", "show", "sum", "report", "scale", "se", "note", "count", "search", "match", "scroll", "test", "buffer", "sort", "sequence", "scoring", "mem", "scan", "core", "Score", "status", "order", "ss", "length", "store", "balance", "normal", "display", "sample", "style", "goal", "query", "grade", "next"], "parseInt": ["seInst", "parseLong", "seLong", "arseLong", "arseInt", "parseFloat", "arseINT", "parserDouble", "parseINT", " parseInst", "arseInst", " parseFloat", "parserINT", "seFloat", "parseDouble", "parserInt", " parseLong", " parseINT", "arseFloat", "parseInst", "parserLong", " parseDouble", "seInt", "arseDouble"], "nextLine": [" nextLINE", "nextLINE", " nextRow", "firstPage", "NextString", "randString", "randRow", "currentPage", "firstLong", " nextLong", "currentLINE", "firstLINE", "NextRow", "nextRow", "currentLong", "currentLine", "nextPage", " nextString", "nextString", "randLine", "NextLine", "NextLINE", " nextPage", "firstLine", "randLINE", "nextLong"], "l": ["dl", "lt", "lc", "ll", "el", "kl", "li", "h", "o", "v", "lp", "m", "nl", "ql", "val", "le", "lit", "a", "b", "f", "sl", "ls", "u", "z", "j", "i", "g", "lv", "c", "L", "t", "s", "p", "tl", "ln", "ld", "x", "ly"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\n/**\\n * Built using CHelper plug-in Actual solution is at the top\\n */\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tInputStream inputStream = System.in;\\n\t\tOutputStream outputStream = System.out;\\n\t\tInputReader in = new InputReader(inputStream);\\n\t\tPrintWriter out = new PrintWriter(outputStream);\\n\t\tTask solver = new Task();\\n\t\tsolver.solve(1, in, out);\\n\t\tout.close();\\n\t}\\n\\n\tstatic class Task {\\n\t\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\\n\t\t\tint N = in.nextInt();\\n\t\t\tint[] H = new int[N];\\n\t\t\tint max = 0;\\n\t\t\tint count = 0;\\n\t\t\tfor(int i = 0; i < N; i++) {\\n\t\t\t\tH[i] = in.nextInt();\\n\t\t\t\tif(max <= H[i]) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t\tmax = H[i];\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tout.println(count);\\n\t\t}\\n\t}\\n\\n\tstatic class InputReader {\\n\t\tpublic BufferedReader reader;\\n\t\tpublic StringTokenizer tokenizer;\t\\n\\n\t\tpublic InputReader(InputStream stream) {\\n\t\t\treader = new BufferedReader(new InputStreamReader(stream), 32768);\\n\t\t\ttokenizer = null;\\n\t\t}\\n\\n\t\tpublic String next() {\\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn tokenizer.nextToken();\\n\t\t}\\n\\n\t\tpublic char nextChar() {\\n\t\t\treturn next().charAt(0);\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\\n\t\tpublic double nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tpublic long nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\\n\t}\\n}\\n", "target": "7", "substitutes": {"inputStream": ["inputSocket", "outputFile", " inputSteam", "inputSteam", "sourceSteam", "sourceStream", "helloStream", " inputstream", "inputstream", "outputstream", " inputSocket", "sourceSocket", "helloSteam", "inputFile", "hellostream", "outputSocket", "sourceFile", "helloSocket", "outputSteam", " inputFile"], "outputStream": ["outFile", "outputFile", "OutputForm", "outStreamer", " outputFile", "outputStreamer", "OutputFile", "inputSteam", "OutputStream", "reportSteam", " outputSteam", "outStream", "outstream", "reportStreamer", "inputstream", "reportStream", "outputForm", " outputForm", "OutputSteam", "reportstream", "outSteam", "outputstream", "inputStreamer", "outForm", "outputSteam"], "in": ["r", "mm", "gin", "bin", "inf", "con", "from", "current", "l", "el", "log", "rt", "inc", "n", "sin", "ini", "context", "err", "source", "al", "doc", "raw", "inn", "file", "rin", "IN", "ro", "get", "per", "run", "ai", "or", "ind", "lin", "form", "on", "In", "init", "io", "it", "null", "din", "is", "inner", "ic", "en", "inside", "ins", "input", "output", "old", "conf", "local", "t", "cin", "iter", "env", "s", "er", "ac", "up", "add", "mc", "mi", "config"], "out": ["set", "ou", "name", "ex", "outer", "end", "flush", "group", "con", "timeout", "current", "l", "writer", "co", "log", "o", "rt", "sys", "server", "tmp", "n", "v", "console", "ch", "err", "this", "print", "OUT", "os", "OU", "report", "run", "write", "user", "client", "at", "list", "io", "gr", "it", "aos", "Out", "null", "cmd", "inner", "screen", "table", "c", "obj", "output", "txt", "w", "gc", "t", "check", "s", "p", "up", "net", "all", "to", "nt", "res", "outs", "window"], "solver": ["Sol", "isolution", " sol", "sol", "isolve", "resol", "resolver", "Solution", " solution", "Solve", " solve", "resolve", "Sorter", "resorter", "solve", "isorter", "solution", "sorter", "Solver", "isolver", "resolution"], "testNumber": ["testNum", "testnum", "testnumber", "runnumber", " testnumber", " attemptnumber", " attemptNum", " attemptNumber", " testnum", "runnum", " testNum", "runNum", " attemptnum", "runNumber"], "N": ["Z", "I", "D", "TN", "F", "ND", "NM", "SN", "NP", "NE", "NB", "n", "O", "S", "Ni", "P", "NO", "NL", "T", "Count", "R", "NS", "Q", "NR", "V", "NH", "M", "W", "GN", "NC", "Sn", "C", "NN", "NA", "Num", "L", "K", "J", "CN", "NI", "NT", "B", "Ns"], "H": ["D", "I", "HE", "HD", "F", "B", "MH", "HQ", "High", "h", "AC", "HA", "Hash", "SH", "HS", "P", "He", "T", "HT", "HH", "R", "Q", "V", "M", "NH", "W", "Help", "CH", "HI", "HK", "HC", "Cache", "TH", "Host", "Y", "Handler", "Header", "K", "His", "X", "Head", "HTTP", "Max", "History", "OH"], "max": ["set", "end", " MAX", "limit", "star", "ax", "maximum", "master", "base", "prime", "best", "total", "h", "n", "m", "top", "sum", "highest", "act", "right", "start", "gt", "cache", "res", "min", "view", "force", " Max", "range", "history", "core", "full", "rest", "length", "k", "mx", "mod", "head", "c", "conf", "old", "t", "upper", "Max", "last", "MAX", "size", "med", "all", "ox", "window", "hash"], "count": ["num", "ctr", "coll", "found", "current", "number", "temp", "cond", "draw", "total", "n", "cloud", "cast", "batch", "call", "common", "print", "sum", "cell", "report", "Count", "cache", "code", "list", "index", "fire", "history", "must", "find", "nb", "child", "cont", "C", "status", "length", "children", "c", "conf", "ct", "counter", "continue", "check", "iter", "info", "last", "add", "cycle", "size", "nt", "hash"], "i": ["I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "ei", "fi", "chain", "ip", "ji", "point", "o", "li", "id", "n", "m", "me", "ini", "batch", "ai", "ms", "im", "qi", "b", "list", "us", "u", "io", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "g", "ti", "ic", "ci", "sim", "cli", "PI", "multi", "info", "p", "s", "ami", "y", "xi", "ii", "si", "span", "di", "x", "mi"], "reader": ["loader", "rr", "wrapper", "r", "driver", "row", "rar", "writer", "rs", "builder", "cr", "resource", "dr", "read", "ro", "file", "handler", "mr", "user", "Reader", "runner", "rot", "buffer", "parser", "oder", "rer", "inner", "ner", "linger", "iterator", "keeper", "fr", "er", "iter", "rx", "re", "rc", "window"], "tokenizer": ["tokenener", "optimizer", " tokenize", "serialzer", "vectorener", " tokenization", "tokenize", "okenener", "wordener", " tokenifier", "okenize", " tokenzer", "Tokener", "Tokenizer", "terminize", "recognifier", "recognater", "terminizer", "wordifier", "okenater", "okenisher", "serialization", "okener", "tokenifer", "tokener", "optimifier", "wordize", " tokener", "optimer", " tokenator", " tokenifer", "Tokenzer", "serialifier", "terminifer", "okenizer", "recognizer", "tokenization", " tokenener", "vectorize", "terminener", "serializer", "vectorizer", "tokenifier", "Tokenifier", "okenifier", "Tokenater", "serialize", "optimator", "tokenator", "recognisher", "serialer", "tokenisher", "wordizer", "tokenater", "vectorifer", "Tokenisher", "okenization", "tokenzer", "okenator"], "stream": ["row", "upload", "v", "console", "context", "source", "level", "path", "file", "this", "user", "thread", "form", "view", "buffer", "io", "history", "stack", "pipe", "null", "media", "data", "inner", "length", "channel", "event", "Stream", "iterator", "input", "body", "sample", "output", "socket", "pool", "handle", "down", "peer", "window"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String reg = \"\\\\d+\";\\n\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        String s = sc.next();\\n        boolean atrue = true;\\n        boolean btrue = true;\\n        boolean hi = true;\\n\\n        for(int i=0; i<s.length(); i++){\\n            if(i < a && !Character.isDigit(s.charAt(i))){\\n                atrue = false;\\n            }\\n\\n            if (i == a && !(s.charAt(i) == '-')){\\n                hi = false;\\n            }\\n\\n            if(!Character.isDigit(s.charAt(i)) && i > a){\\n                btrue = false;\\n            }\\n        }\\n\\n        if(atrue && btrue && hi){\\n            System.out.println(\"Yes\");\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n    }\\n\\n    public static void printListOneLine(List list){\\n        for(int i=0; i<list.size(); i++){\\n            System.out.println(list.get(i));\\n        }\\n    }\\n\\n    public static void printList(List list){\\n        for(int i=0; i<list.size(); i++){\\n            if(i == list.size()){\\n                System.out.println(list.get(i));\\n            } else {\\n                System.out.print(String.format(\"%d \", list.get(i)));\\n            }\\n        }\\n    }\\n\\n    public static void printArray(int[] array){\\n        for(int i=0; i<array.length; i++){\\n            if(i == array.length){\\n                System.out.println(array[i]);\\n            } else {\\n                System.out.print(String.format(\"%d \", array[i]));\\n            }\\n        }\\n    }\\n\\n    public static int gcd(int a, int b){\\n        if (b == 0) return a;\\n        return gcd(b, a % b);\\n    }\\n\\n    public static int lcm(int a, int b){\\n        return a * b / gcd(a, b);\\n    }\\n}\\n", "target": "78", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "row", "sb", "sec", "cl", "sys", "system", "sh", "ser", "bc", "sv", "sp", "cr", "inc", "ec", "ko", "ctl", "cle", "src", "sw", "sync", "exec", "tc", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "scope", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "reg": [" ans", "r", " addr", " index", " na", " rand", " an", " base", " arg", " ra", " res", " foo", " h", " acc", " tag", " ret", " ab", "g", "k", " x", " rg", "re", " g", " m", " r", " num", " ref"], "a": ["ae", "r", "ca", "d", "ax", " na", "ar", "aq", "ra", "l", "oa", " ax", "o", "h", "ta", "n", "m", "aa", "da", "sta", "sa", "al", "ai", "A", "at", "f", "ia", "index", " fa", "ica", "an", "u", "ga", "ao", "xa", "j", "la", " A", "ab", "pa", "area", "ea", "pi", "g", "ba", "aaa", "na", "c", "aj", "fa", "ap", "alpha", "e", "ma", "t", "p", "as", "ac", "y", "au", "all", "va", "x", "am"], "b": ["r", "d", "beta", "wb", "sb", "ob", "l", "base", "mb", "o", "h", "bar", "bc", "value", "n", "v", "m", "gb", "db", "bs", "bp", "back", "eb", "f", "bd", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "g", "ba", "c", "bis", "e", "w", "t", "p", "bb", "cb", "y", "be", "rb", "x", "B"], "s": ["gs", "r", "sql", "sf", "sb", "l", "rs", "sys", "h", "ns", "so", "sv", "sp", "n", "m", "v", "strings", "source", "ws", "bs", "S", "os", "src", "ms", "its", "less", "sw", "ats", "str", "south", "se", "sl", "es", "ls", "sort", "fs", "sts", "string", "is", "ts", "sq", "cs", "ss", "c", "js", "ins", "ds", "gets", "t", "ses", "p", "qs", "scl", "ps", "stats", "conv"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "go", "f", "history", "is", "ic", "ami", "y", "oi", "di", "x", "ri", "chain", "ip", "ji", "point", "o", "h", "id", "ij", "in", "ori", "io", "bi", "it", "g", "inner", "ci", "sim", "cli", "exp", "iq", "ii", "ex", "phi", "php", "ion", "remote", "this", "ind", "u", "\u0438", "menu", "status", "pi", "my", "xi", "si", "mi", "I", "name", "sql", "key", "gi", "iy", "v", "m", "ini", "err", "ice", "user", "any", "im", "qi", "index", "init", "j", "ity", "ui", "uri", "ie", "ti", "multi", "er", "info", "to"], "atrue": ["ATrue", "true", "ATtrue", "montrue", " atrace", " atvale", "rtrace", "tue", "matru", " ature", "mattrue", " atue", "montue", "otue", "atrace", "ature", "rtvale", " atru", "ottrue", "rtrue", "montvale", "atue", "otrue", "matue", "montrace", "tru", "ATru", "rtru", "attrue", "matrue", "ture", "atru", "atvale", "otru", "rture", "ATue", "rtue"], "btrue": [" bfalse", "Bfalse", "bbTrue", "bbtrue", "bbresult", "bTrue", "bfalse", "sbtrue", "bbthere", "BTrue", "nbtrue", "sbresult", "nbenabled", "benabled", " bthere", "bbenabled", "Benabled", "Btrue", "bbfalse", " bresult", "bthere", "sbfalse", "sbthere", "nbfalse", "bresult", " bTrue"], "hi": ["ho", "he", "rh", "hu", "hin", "hirt", "ushi", "ri", "phi", "hl", "fi", "ji", "ati", "his", "http", "h", "li", "uti", "bh", "wi", "hy", "orth", "lo", "high", "ai", "cu", "hello", "hh", "ih", "mu", "ris", "war", "hex", "it", "hyp", "HI", "hid", "pi", "ti", "ci", "hea", "cli", "htt", "phil", "hei", "chi", "ha", "iri", "xi", "Hi"], "list": ["set", "dl", "card", "name", "coll", "ll", "details", "queue", "l", "chain", "xml", "log", "pl", "tree", "v", "summary", "batch", "detail", "print", "file", "alist", "LIST", "lat", "filter", "dict", "form", "act", "ist", "lists", "view", "collection", "test", "ml", "sequence", "history", "stack", "string", "null", "listed", "cont", "data", "status", "html", "json", "table", "old", "pool", "out", "layout", "format", "t", "def", "info", "all", "nt", "archive", "st", "map"], "array": ["result", "stage", "ray", "Array", "row", "number", "var", " Array", "now", "value", "v", "ash", "app", "attribute", "batch", "pair", "ace", "raw", "section", "dict", "random", "any", "unknown", "form", "map", "image", "RAY", "instance", "object", "collection", "arr", "range", "history", "sequence", "stack", "analysis", "our", "test", "trace", "vector", "area", "data", "length", "table", "record", "my", "air", "angle", "ary", "sample", "answer", "integer", "arrow", "archive", "window", "hash"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        char[] w = sc.next().toCharArray();\\n        int n = w.length;\\n        int s0 = 0;\\n        int s1 = 0;\\n        for(int i = 0; i < n; i++){\\n            if(i % 2 == 0 && w[i] == '1' || i % 2 != 0 && w[i] == '0'){\\n                s0++;\\n            }\\n        }\\n        for(int i = 0; i < n; i++){\\n            if(i % 2 != 0 && w[i] == '1' || i % 2 == 0 && w[i] == '0'){\\n                s1++;\\n            }\\n        }\\n        System.out.println(Math.min(s0,s1));\\n    }\\n}\\n", "target": "146", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "soc", "ec", "capt", "cle", "sel", "sch", "sw", "sync", "tch", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "screen", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "w": ["q", "wall", "r", "wcs", "wx", "d", "wo", "wl", "wb", "wt", "l", "wp", "h", "ew", "v", "ch", "word", "aw", "rew", "ws", "wat", "wa", "wn", "wal", "sw", "wine", "rw", "wd", "W", "mem", "win", "hw", "z", " W", "weights", "words", "won", "g", "wr", "c", "nw", "exp", "wh", "we", "p", "wm", "fw", "kw", "x", "window"], "n": ["nu", "num", "r", "d", "ll", "l", "un", "len", "N", "o", "gn", "ns", "m", "v", "ne", "nan", "nl", "sn", "on", "an", "z", "j", "no", "nb", " N", "na", "nc", "fn", "np", "en", "c", "nm", "ot", "t", "ng", "p", "network", "nor", "ln", "net", "all", "nt", "x"], "s0": ["stat2", "sts05", "is2", "S1", "sts0", "sts00", "s05", "Sarr", "s00", "ts0", "stat0", "is0", "S0", "is06", "S2", "s06", "stats1", "stats0", "S05", "statarr", "stats05", "sts06", "ts00", "is00", "sts1", "stat1", "s2", " sarr", "S00", " s2", "stats00", "ts06", "sarr", "sts2", "ts2"], "s1": ["ts01", "sOne", "s01", " sOne", " s01", "S1", "b2", "b1", " s9", "ts0", "SOne", "S0", "S2", "S01", "sv0", "sv9", "S9", "sv01", "s9", "s2", "bOne", "b0", " s2", "sv1", "ts2", "ts1"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "eric", "ai", "ki", "iii", "f", "ims", "is", "eu", "ic", "ami", "y", "oi", "di", "x", "ri", "fi", "chain", "ip", "ji", "point", "id", "ij", "ori", "a", "io", "bi", "it", "\u00ed", "g", "ci", "sim", "cli", "iq", "ii", "span", "phi", "hi", "php", "remote", "ni", "mu", "ind", "list", "u", "\u0438", "pi", "gu", "xi", "si", "mi", "I", "key", "sql", "gi", "iy", "m", "ini", "err", "ski", "im", "qi", "init", "j", "ui", "ie", "uri", "ti", "PI", "multi", "info", "iter", "to"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n \\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tfinal int N = scan.nextInt();\\n\t\tint allSum = 0;\\n\t\tList<Integer> list = new ArrayList<>();\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tint n = scan.nextInt();\\n\t\t\tlist.add(n);\\n\t\t\tallSum += n;\\n\t\t}\\n\t\t\\n\t\tint nowSum = 0;\\n\t\tint minSum = Integer.MAX_VALUE;\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tnowSum += list.get(i);\\n\t\t\tminSum = (int) Math.min(minSum, Math.abs(nowSum - (allSum - nowSum)));\\n\t\t}\\n\t\tSystem.out.println(minSum);\\n\t}\\n}", "target": "2", "substitutes": {"scan": ["seek", "r", "sql", "skip", "row", "nn", "reach", "gate", "parse", "san", "walk", " Scan", "ser", "sys", "Scan", "system", "connect", "sv", "sin", "read", "in", "by", "can", "get", "report", "auto", "se", "pass", "sync", "search", "send", "scroll", "an", "sc", "find", "is", "ner", "g", "store", "link", "out", "black", "check", "gc", "sur", " scanner", "proc", "conv", "query", "ch", "ann", "st", "see"], "N": ["D", "Z", "I", "TN", "F", "ND", "NM", "SN", "NP", "NE", "NB", "No", "S", "Ni", "P", "NO", "T", "NL", "R", "NS", "NR", "V", "ANY", "M", "NH", "AN", "H", "NC", "Sn", "C", "NN", "Num", "NA", "L", "K", "J", "Net", "Ne", "NI", "NT", "Ns"], "allSum": ["bothsum", "minsum", "minSim", "totalSim", "totalsum", "totalAss", " allTotal", " allSet", "ALLSet", "allsum", "allNum", "ALLNum", "bothSim", "AllNum", "AllSet", "bothSum", "allAss", "ALLTotal", " allsum", "bothSummary", "allTotal", " allSummary", " allNum", "totalNum", "AllTotal", "bothNum", "bothAss", "allSet", "allSim", "ALLSum", "minAss", "totalSummary", "totalSum", "allSummary", "AllSum"], "list": ["set", "block", "st", "ll", "array", "details", "l", "number", "temp", "entry", "chain", "li", "tree", "and", "v", "source", "level", "print", "alist", "LIST", "filter", "dict", "the", "form", "lists", "ist", "count", "ls", "collection", "single", "left", "sequence", "stack", "null", "cont", "order", "table", "L", "pool", "out", "local", "def", "info", "parent", "add", "all", "next", "see"], "i": ["set", "q", "I", "ix", "name", "ri", "phi", "gi", "hi", "iu", "ei", "base", "fi", "ip", "ji", "li", "id", "m", "ij", "me", "ini", "err", "by", "print", "ai", "ki", "client", "iti", "im", "ind", "qi", "ik", "init", "\u0438", "io", "z", "j", "bi", "it", "ity", "ui", "ie", "is", "uri", "pi", "g", "ti", "ic", "ci", "sim", "cli", "PI", "multi", "iq", "iter", "info", "ami", "y", "oi", "ii", "xi", "si", "di", "mi"], "n": ["num", "nu", "d", "nn", "number", "nr", "l", "o", "ns", "v", "m", "ne", "nan", "cn", "ni", "sn", "b", "count", "an", "z", "j", "nb", "na", "nv", "np", "c", "nw", "nm", "ng", "t", "p", "s", "ln", "y", "net", "size", "nt", "next"], "nowSum": ["NOWHash", "nowMem", "minHash", "NowSum", "owSum", "owMem", "NowSu", "NOWsum", "todayPos", "nowSu", "nowSim", "nowNum", "nowsum", "saveIndex", " nowsum", "nowIndex", "nowPos", " nowDiff", "NowPos", "todaySum", "nowHash", "saveSum", "saveSu", "minNum", "minAll", "NOWNum", "owsum", "awDiff", "NowSummary", "nowAll", "nowSummary", "NOWSum", "NowIndex", " nowSummary", "NOWAll", "NOWSim", "nowDiff", "awSum", "savePos", "todaySu", "NowDiff", "owSim", "NOWMem", " nowAll", " nowSim", " nowHash", "awSu", " nowMem", " nowSu", " nowNum", "todayIndex", "awSummary"], "minSum": ["MINSum", "MinNum", "minSet", "minSim", "maxSim", "MINum", "lowerNum", "mintSpec", "lowerSummary", "minum", "MinSim", "minCount", "MINSummary", "minSummary", " minSummary", " minCount", "minNum", " minSim", " minSet", "mintSet", " minNum", "maxSummary", "mintMatch", "minimumMatch", "MINCount", "MinSum", "minMatch", " minSpec", "minSpec", "mintSum", "minimumSum", "MinSummary", "maxSum", " minMatch", "MinCount", "minimumSpec", "maxNum", "Minum", " minum", "lowerSum", "minimumSet"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long N = sc.nextLong();\\n\\n        String result = \"\";\\n        System.out.println(calc(result, N, 1));\\n        sc.close();\\n\\n    }\\n\\n    static String calc(String result, long N, int count) {\\n        if (N < 26) {\\n            return moji((int) N) + result;\\n        } else if (N == 26) {\\n            return moji(0) + result;\\n        }\\n\\n        result = (moji((int) (N % 26))) + result;\\n        if (N % 26 != 0) {\\n            return calc(result, ((N - N % 26) / 26), count++);\\n        } else {\\n            return calc(result, ((N - 26) / 26), count++);\\n        }\\n    }\\n\\n    static String moji(int N) {\\n        String moji = \"\";\\n        switch (N) {\\n            case 1:\\n                moji = \"a\";\\n                break;\\n            case 2:\\n                moji = \"b\";\\n                break;\\n            case 3:\\n                moji = \"c\";\\n                break;\\n            case 4:\\n                moji = \"d\";\\n                break;\\n            case 5:\\n                moji = \"e\";\\n                break;\\n            case 6:\\n                moji = \"f\";\\n                break;\\n            case 7:\\n                moji = \"g\";\\n                break;\\n            case 8:\\n                moji = \"h\";\\n                break;\\n            case 9:\\n                moji = \"i\";\\n                break;\\n            case 10:\\n                moji = \"j\";\\n                break;\\n            case 11:\\n                moji = \"k\";\\n                break;\\n            case 12:\\n                moji = \"l\";\\n                break;\\n            case 13:\\n                moji = \"m\";\\n                break;\\n            case 14:\\n                moji = \"n\";\\n                break;\\n            case 15:\\n                moji = \"o\";\\n                break;\\n            case 16:\\n                moji = \"p\";\\n                break;\\n            case 17:\\n                moji = \"q\";\\n                break;\\n            case 18:\\n                moji = \"r\";\\n                break;\\n            case 19:\\n                moji = \"s\";\\n                break;\\n            case 20:\\n                moji = \"t\";\\n                break;\\n            case 21:\\n                moji = \"u\";\\n                break;\\n            case 22:\\n                moji = \"v\";\\n                break;\\n            case 23:\\n                moji = \"w\";\\n                break;\\n            case 24:\\n                moji = \"x\";\\n                break;\\n            case 25:\\n                moji = \"y\";\\n                break;\\n            case 0:\\n                moji = \"z\";\\n                break;\\n        }\\n        return moji;\\n    }\\n}\\n", "target": "191", "substitutes": {"sc": ["arc", "uc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "nl", "ec", "sel", "src", "sch", "RC", "sw", "fc", "tc", "scan", "sq", " Sc", "cs", "ner", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "sub"], "N": ["D", "Z", "I", "num", "TN", "F", "FN", "E", "ND", "NM", "NUM", "NI", "SN", "NP", "SIZE", "NE", "number", "NB", "n", "NV", "Size", "EN", "No", "G", "O", "S", "NG", "P", "OUT", "NO", "NL", "T", "Count", "R", "NS", "Q", "NR", "V", "NH", "M", "MN", "AN", "GN", "XX", "NC", "H", "Sn", "C", "Number", "NA", "Num", "L", "TON", "Y", "K", "NOR", "J", "NEW", "X", "NOTE", "CN", "Name", "CNN", "NN", "NT", "B"], "result": ["r", "number", "prefix", "n", "make", "root", "str", "currency", "comment", "complete", "data", "score", "answer", "def", "rc", "res", "function", "first", "next", "term", "valid", "response", "description", "true", "cur", "error", "draw", "Result", "summary", "ret", "match", "sequence", "message", "RESULTS", "success", "reason", "wrapper", "value", "folder", "relation", "this", "cache", "list", "func", "test", "mate", "results", "string", "status", "html", "json", "output", "out", "p", "date", "name", "total", "err", "rank", "report", "search", "buffer", "null", "text", "continue", "integer", "iter", "command", "successful"], "count": ["num", "name", "found", "nn", "current", "number", "l", "cond", "draw", "now", "amount", "NB", "n", "call", "OUNT", "P", "state", "report", "thread", "Count", "start", "code", "list", "index", "scroll", "z", "no", "find", "nb", "child", "C", "cont", "status", "length", "c", "ct", "counter", "s", "more", "add", "th", "cycle", "size", "depth", "second", "nt", "NT"], "moji": ["poje", "memju", "manija", "moicide", "cooji", "kooji", " moiji", "dojug", "moja", "goja", "boji", "poja", "nozy", "memiji", "mataji", "mezy", "coobi", "booji", "semoji", "mozilla", "moje", "omoiki", "boija", "meiji", " mooji", "noiji", "memji", "meija", "mozy", "manisy", "noicide", "moiji", " moja", "moobi", "maoji", "koiji", "semju", "goija", "noaji", "moija", "memoji", "matuj", "manji", "poiji", "meij", "poobi", "boobi", "mejug", "kozilla", "cozilla", "moaji", "boigue", "matiji", "meobi", "koja", "omeija", "koji", "noja", "dooji", "matju", "mazy", "noisy", "koobi", "koija", "omoigue", "boasi", "metaju", "mojit", "meoji", "goji", "koij", "bojug", "doasi", "boju", "omoija", "moigue", "doiji", "semja", "matji", "boicide", "poija", "boiki", "doja", "manoji", "mouj", "nozilla", "moisy", "meji", "mojug", "doji", "mezilla", "noija", "mooji", "metaoji", "kouj", "goiji", "nooji", "measi", "meja", "gouj", "manja", "semji", "noju", "boja", "doju", "omoasi", "bozilla", "moij", "omoisy", "omeiji", "noigue", "doij", "kojit", "noiki", "moju", "moasi", "kozy", "moiki", "bozy", "noasi", "nojit", "omooji", "pooji", "matoji", "koju", "metaiji", "meju", "maje", "omoji", "metaji", "cozy", "omeji", "pojit", " moju", "coji", "noji", "coje", "maji", "gooji", "pozy", "boaji", "noobi", "omoicide", "omeoji", "poji"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try (Scanner in = new Scanner(System.in)) {\\n            int N = in.nextInt();\\n            int[] a = new int[N];\\n            for (int i = 0; i < N; i++) {\\n                a[i] = in.nextInt() - 1;\\n            }\\n\\n            int current = 0;\\n            for (int i = 1; i <= N; i++) {\\n                current = a[current];\\n                if (current == 1) {\\n                    System.out.println(i);\\n                    return;\\n                }\\n            }\\n\\n            System.out.println(-1);\\n        }\\n    }\\n}\\n", "target": "175", "substitutes": {"N": ["D", "I", "Z", "Node", "TN", "F", "ND", "NM", "SN", "NP", "NE", "NB", "n", "Size", "No", "O", "G", "S", "Ni", "P", "NO", "T", "R", "NS", "A", "Na", "NR", "V", "ANY", "NH", "M", "AN", "Len", "GN", "NC", "Sn", "C", "Number", "NN", "Num", "Y", "L", "NA", "K", "J", "Length", "NI", "NT", "Ns"], "a": ["ca", "ava", "att", "oa", "o", "qa", "ta", "n", "v", "da", "aa", "sta", "sa", "wa", "A", "b", "ia", "u", "an", "la", "ga", "ao", "ab", "pa", "ea", "apa", "na", "ba", "aaa", "aka", "c", "fa", "alpha", "w", "ma", "as", "p", "ac", "au", "aux", "ata", "am"], "i": ["q", "ix", "zi", "iu", "base", "ei", "li", "n", "batch", "ai", "ki", "is", "ic", "c", "y", "oi", "di", "x", "ri", "l", "chain", "ip", "ji", "o", "id", "ij", "in", "client", "iti", "ori", "io", "sequence", "z", "bi", "it", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "php", "print", "ind", "u", "\u0438", "pi", "iso", "yi", "p", "iri", "xi", "si", "mi", "I", "key", "gi", "iy", "v", "m", "ini", "im", "qi", "index", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "integer", "iter"], "current": ["set", "valid", "active", "result", "name", "reported", "cur", "gi", "position", "temp", "pre", "used", "secondary", "progress", "total", "now", "latest", "currently", "n", "v", "missing", "default", "selected", "this", "client", "index", "count", "correct", "single", "collection", "recent", "Current", "j", "urrent", "complete", "cont", "status", "pi", "length", "open", "c", "my", "cli", "counter", "continue", "present", "multi", "integer", "p", "local", "critical", "URRENT", "initial", "next"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner s = new Scanner(System.in);\\n    System.out.println(s.nextLong()*Math.PI*2);\\n  }\\n}", "target": "167", "substitutes": {"s": ["gs", "sb", "rs", "h", "sys", "ns", "sv", "n", "m", "v", "ws", "S", "csv", "ms", "serv", "ats", "b", "fs", "es", "ls", "sts", "is", "ts", "sq", "cs", "g", "ss", " inputs", "c", "ds", "w", "as", "sam", "qs", "p", "y", "ps", "xs"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static String Y = \"Yes\";\\n\tpublic static String N = \"No\";\\n\tpublic static long MOD = (long) (Math.pow(10, 9) + 7);\\n\tpublic static Scanner sc = new Scanner(System.in);\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tint kai = 0;\\n\t\tint n = ni();\\n\t\tboolean flg = false;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tint na = ni();\\n\t\t\tint nb = ni();\\n\t\t\tif (na == nb) {\\n\t\t\t\tkai++;\\n\t\t\t\tif (kai == 3) {\\n\t\t\t\t\tflg = true;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t} else {\\n\t\t\t\tkai = 0;\\n\t\t\t}\\n\t\t}\\n\t\tif (flg) {\\n\t\t\tout(Y);\\n\t\t} else {\\n\t\t\tout(N);\\n\t\t}\\n\\n\t}\\n\\n\t/*\\n\t * \u4ee5\u4e0b\u30e1\u30bd\u30c3\u30c9\u96c6\\n\t */\\n\\n\tpublic static int[] kousokusoinnsuubunkaihairetsu(int a) {\\n\t\tint[] d = new int[a];\\n\t\tfor (int i = 0; i < a; i++) {\\n\t\t\td[i] = i;\\n\t\t}\\n\t\tfor (int i = 2; i * i < a; i++) {\\n\t\t\tfor (int j = i * i; j < a; j += i) {\\n\t\t\t\tif (d[j] == j)\\n\t\t\t\t\td[j] = i;\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\treturn d;\\n\t}\\n\\n\tpublic static void permutation(String q, String ans) {\\n\t\t// Base Case\\n\t\tif (q.length() <= 1) {\\n\t\t\tSystem.out.println(ans + q);\\n\t\t}\\n\t\t// General Case\\n\t\telse {\\n\t\t\tfor (int i = 0; i < q.length(); i++) {\\n\t\t\t\tpermutation(q.substring(0, i) + q.substring(i + 1),\\n\t\t\t\t\t\tans + q.charAt(i));\\n\t\t\t}\\n\t\t}\\n\t}\\n\\n\tstatic char[][] same(char[][] c, int h, int w) {\\n\\n\t\tchar[][] a = new char[h][w];\\n\t\tfor (int i = 0; i < h; i++) {\\n\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\ta[i][j] = c[i][j];\\n\t\t\t}\\n\t\t}\\n\t\treturn a;\\n\\n\t}\\n\\n\tstatic int countkuro(char[][] c) {\\n\\n\t\tint count = 0;\\n\t\tfor (char[] cc : c) {\\n\t\t\tfor (char ccc : cc) {\\n\t\t\t\tif ('#' == ccc) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\treturn count;\\n\t}\\n\\n\tstatic void debug() {\\n\\n\t\tout(\"---\");\\n\t}\\n\\n\tstatic void debug(Object a) {\\n\\n\t\tout(\"-------\");\\n\t\tout(a);\\n\t\tout(\"-------\");\\n\t}\\n\\n\tstatic int ketasuu(int n) {\\n\\n\t\tString str = \"\" + n;\\n\t\treturn str.length();\\n\t}\\n\\n\tstatic int account(String str) {\\n\\n\t\tString target = \"2\";\\n\t\tint count = 0;\\n\t\tint len = str.length();\\n\t\tfor (int i = 0; i < len; i++) {\\n\t\t\tif (target.equals(str.substring(i, i + target.length()))) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\treturn count;\\n\t}\\n\\n\tstatic int ni() {\\n\\n\t\treturn sc.nextInt();\\n\t}\\n\\n\tstatic long nl() {\\n\\n\t\treturn sc.nextLong();\\n\t}\\n\\n\tstatic double nd() {\\n\\n\t\treturn sc.nextDouble();\\n\t}\\n\\n\tstatic String n() {\\n\\n\t\treturn sc.next();\\n\t}\\n\\n\tstatic char[] nc() {\\n\\n\t\treturn sc.next().toCharArray();\\n\t}\\n\\n\tstatic int kaijo(int n) {\\n\\n\t\tif (n == 0 || n == 1) {\\n\t\t\treturn 1;\\n\t\t} else {\\n\t\t\treturn n * kaijo(n - 1);\\n\t\t}\\n\t}\\n\\n\tstatic long kaijo(long n) {\\n\\n\t\tdebug(n);\\n\\n\t\tif (n == 0l || n == 1l) {\\n\t\t\treturn 1l;\\n\t\t} else {\\n\t\t\treturn n * kaijo(n - 1l);\\n\t\t}\\n\t}\\n\\n\tstatic int fib(int n) {\\n\\n\t\treturn (n == 1 || n == 0) ? n : fib(n - 2) + fib(n - 1);\\n\t}\\n\\n\tstatic long lcm(long m, long n) {\\n\\n\t\treturn m * n / gcd(m, n);\\n\t}\\n\\n\tstatic int lcm(int m, int n) {\\n\\n\t\treturn m * n / gcd(m, n);\\n\t}\\n\\n\tstatic long gcd(long a, long b) {\\n\\n\t\treturn (b == 0) ? a : gcd(b, a % b);\\n\t}\\n\\n\tstatic int gcd(int a, int b) {\\n\\n\t\treturn (b == 0) ? a : gcd(b, a % b);\\n\t}\\n\\n\tstatic void out(Object obj) {\\n\t\tSystem.out.println(obj);\\n\t}\\n\\n\tstatic void outn(Object obj) {\\n\t\tSystem.out.print(obj);\\n\t}\\n\\n\tstatic double max(double d, double e) {\\n\\n\t\treturn Math.max(d, e);\\n\t}\\n\\n\tstatic long max(long a, long b) {\\n\\n\t\treturn Math.max(a, b);\\n\t}\\n\\n\tstatic long min(long d, long e) {\\n\\n\t\treturn Math.min(d, e);\\n\t}\\n\\n\tstatic int min(int a, int b) {\\n\\n\t\treturn Math.min(a, b);\\n\t}\\n}\\n\\nclass XY {\\n\\n\tint h;\\n\tint w;\\n\tint d;\\n\\n\tXY(int h, int w, int d) {\\n\t\tthis.h = h;\\n\t\tthis.w = w;\\n\t\tthis.d = d;\\n\t}\\n}\\n", "target": "215", "substitutes": {"Y": ["Z", "I", "YA", "YE", "E", "AY", "FY", "Yo", "O", "G", "SY", "S", "RY", "T", "IA", "YN", "YY", "YS", "Q", "A", "V", "YP", "Year", "GY", "BY", "H", "MY", "Cy", "Sy", "TY", "Py", "J", "X", "Ty", "y", "YC", "B", "YES"], "N": ["I", "TN", "FN", "NM", "SN", "NPR", "NB", "No", "G", "S", "ON", "Ni", "IN", "NG", "NO", "NL", "T", "NS", "Q", "NR", "V", "M", "NH", "AN", "MN", "NC", "NN", "NA", "L", "J", "NOR", "X", "CN", "CNN", "NI", "NT", "NY", "Ns"], "MOD": [" MAX", " AI", " B", "NUM", " HA", " U", "m", " Mod", " JD", " Omega", "Mu", " IA", "mu", " P", "M", " Xi", "mod", " MA", " omega", "AI", " mod", "ZA", " mu", " gamma", " iii", " NUM", "mA", " BA"], "sc": ["ou", "mp", "sb", "cl", "sys", "cr", "sp", "sv", "sa", "ec", "sel", "sch", "sw", "scan", "sq", " Sc", "cs", "ss", "nc", "c", "Sc", "gc", "ng", "SC", "mc", "rc", "si", "ch"], "kai": ["ke", "hey", "ava", "eme", "pai", "ogi", "pee", "kay", "KA", "kies", "qua", "hua", "\u03ba", "uti", "nine", "arde", "cia", "Ka", "rama", "ko", "uko", "bite", "ai", "kok", "cu", "hello", "aska", "yah", "colo", "ya", "asha", "ugi", "gae", "rica", "hao", "wang", "kun", "uma", "coe", "unta", "anus", "uno", "young", "ardy", "aka", "ci", "ku", "kee", "pei", "uci", "olulu", "kie", "umo", "ka", "lah", "bee", "awi", "nai"], "n": ["nu", "mn", "nn", "nia", "l", "nr", "ns", "m", "ne", "nan", "nl", "cn", "Ni", "ni", "sn", "b", "z", "no", "g", "nc", "fn", "np", "en", "nw", "nm", "ng", "nd", "ny", "nor", "ln", "y", "net", "nt"], "i": ["ix", "zi", "iu", "ei", "li", "ai", "iii", "go", "f", "ims", "is", "ic", "e", "ami", "y", "oi", "di", "x", "ri", "fi", "l", "ip", "ji", "o", "h", "id", "asi", "ij", "in", "iti", "io", "z", "slice", "bi", "it", "g", "k", "ci", "sim", "cli", "s", "ii", "ex", "phi", "hi", "progress", "this", "print", "ind", "ia", "u", "\u0438", "status", "pi", "iso", "my", "p", "xi", "si", "mi", "I", "key", "gi", "iy", "v", "m", "ini", "any", "im", "qi", "index", "init", "ui", "uri", "ie", "ti", "PI", "multi", "iter", "info"], "na": ["nu", "una", "mn", "nn", "nah", "nia", "qa", "ta", "ns", "tha", "da", "nas", "ne", "sa", "nan", "nl", "ni", "nat", "ja", "Na", "ia", " sa", "pa", "ba", "aka", "NA", "ma", "ng", "ny", "nex", "ka", "nam", "nt", "nai"], "nb": ["nu", "nn", "wb", "sb", "nr", "ns", "NB", "zb", "gb", "bf", "db", "ne", "nl", "cn", "bn", "nz", "ni", "bj", "b", "bd", "eb", "bi", "bm", "nit", "bg", "pb", "np", "nv", "fn", "kb", "nd", "ny", "bb", "ln", "nie", "cb", "rb"], "flg": ["slgt", "Flgg", "folg", "flgg", "lgg", " flmsg", "boolg", "plbg", "folgc", "folbg", "boolgt", "boolgs", "flgt", "Flgc", "slg", "flang", "flbg", "plgc", "lbg", "Flbg", "lgc", "slang", " flang", " flgg", "plmsg", "flmsg", "boolang", "flgc", " flbg", "slgs", " flgt", "Flg", "folmsg", " flgs", " flgc", "plg", "lg", "flgs"], "a": ["ae", "r", "ca", "l", "oa", "o", "ta", "m", "aa", "da", "sta", "sa", "ace", "at", "A", "b", "index", "ack", "f", "ia", "u", "an", "la", "z", "ao", "ity", "ab", "pa", "area", "apa", "pi", "aff", "ba", "aaa", "off", "ea", "c", "e", "w", "alpha", "ma", "t", "as", "p", "ac", "s", "eas", "all", "to", "va", "am"], "d": ["dat", "D", "dh", "r", "pd", "dl", "result", "df", "l", "dd", "fd", "o", "del", "de", "m", "da", "v", "sd", "dr", "ad", "db", "dn", "du", "md", "dict", "td", "b", "list", "bd", "f", "u", "arr", "z", "cd", "data", "done", "c", "ds", "debug", "e", "w", "t", "s", "p", "nd", "ld", "dt", "di", "x"], "j": ["br", "ix", "jit", "pt", "att", "fi", "l", "jl", "ji", "jj", "o", "li", "jo", "adj", "v", "ij", "tr", "jump", "jas", "ju", "ja", "bj", "oj", "on", "job", "u", "z", "bi", "it", "uj", "g", "you", "k", "json", "js", "aj", "obj", "jp", "J", "ph", "fr", "other", "je", "s", "kj", "y", "jc", "si", "di", "x", "dj", "next"], "q": ["r", "ou", " u", "qu", " Q", "ur", "v", "m", "ql", "Q", "f", " query", "z", "cat", "qq", "ue", "ie", "sq", "g", "k", "Query", "w", "iq", "qs", "p", "dq", "quote", "query"], "ans": [" sv", " o", " e", " l", " ss", " u", "o", "m", " res", " ni", "su", " tu", "V", " sans", "es", "an", "vs", " cs", " s", " x", " t", "s", " m", " g", "res"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args){\\n\\n        Scanner sc = new Scanner(System.in);\\n        int n=sc.nextInt(),x=sc.nextInt();\\n        int[] l = new int[n+1];\\n        int[] d = new int[n+2];\\n        for(int i=1;i<n+1;i++)l[i]=sc.nextInt();\\n\\n        d[1]=0;\\n        int i;\\n        for(i=2;i<n+2;i++){\\n            d[i]=d[i-1]+l[i-1];\\n            //System.out.println(d[i]);\\n            if(d[i]>x){\\n                System.out.println((i-1));\\n                return;\\n            }\\n        }\\n        System.out.println((n+1));\\n\\n\\n    }\\n\\n}\\n", "target": "130", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cgi", "cl", "sys", "sh", "bc", "sv", "sp", "cr", "inc", " scr", "sem", "ec", "ctl", "capt", "cle", "sel", "irc", "sch", "sw", "sync", "tc", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "si", "rc", "ch", "desc"], "n": ["nu", "num", "name", "nn", "un", "len", "N", "o", "ns", "and", "m", "dn", "ne", "nan", "nl", "cn", "sn", "at", "on", "norm", "j", "no", "nb", "na", "fn", "nc", "np", "en", "c", "nw", "none", "nm", "out", "ng", "t", "network", "ln", "net", "all", "nt", "names"], "x": ["ix", "ex", "wx", "ax", "ox", "v", "xf", "xy", "tx", "xe", "xx", "px", "xc", "z", "j", "dx", "mx", "xt", "c", "e", "w", "X", "rx", "ux", "y", "xs", "xi", "xp"], "l": ["dl", "lis", "lt", "lc", "ll", "loc", "el", "hl", "li", "pl", "log", "o", "lp", "ol", "m", "al", "nl", "lo", "le", "sl", "ls", "ml", "la", "j", "isl", "rl", "g", "lock", "lv", "fl", "c", "L", "p", "tl", "ln", "lf", "ld", "lu"], "d": ["dat", "D", "dl", "r", "dh", "pd", "dm", "dim", "df", "dd", "fd", "red", "o", "de", "m", "da", "v", "dr", "db", "sd", "dn", "du", "dict", "td", "b", "bd", "f", "z", "j", "div", "data", "c", "ds", "e", "w", "t", "nd", "p", "s", "dL", "ld", "dt", "di", "dp"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "go", " j", "ims", "is", "ic", "ami", "y", "oi", "di", "ish", "ri", "fi", "chain", "ip", "ji", "id", "asi", "ij", "client", "ori", "io", "bi", "it", "inner", "g", "ci", "sim", "cli", "ii", "span", "phi", "hi", "print", "ind", "ia", " ii", "u", "\u0438", "pi", "jp", "gu", "xi", "si", "mi", "I", "gi", "m", "ini", "err", "im", "qi", " ti", "index", "us", "init", "j", "ui", "ie", "uri", "ti", "multi", "iter", "info", "to"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\n\\nclass Main {\\n\t/**\\n\t * ??\\?????????????????? / ????????????????????????\\n\t */\\n\tpublic static void main(String[] args) throws Exception {\\n\\n\t\t// ??\\???????????????\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tint verticalLineCount = Integer.parseInt(br.readLine());\\n\t\t// ???????????????????\u00a3??????\u00b0 ???????????????\\n\t\tString[] verticalLine = new String[verticalLineCount];\\n\t\tList<String> goalNumberList = Arrays.asList(verticalLine);\\n\\n\t\tList<List<String>> allSideLine = processAllSideLine(br);\\n\\n\t\tgoalNumberList = processGoalNumberList(goalNumberList, allSideLine);\\n\\n\t\t// ???????????????\\n\t\tfor (String string : goalNumberList) {\\n\\n\t\t\tSystem.out.println(string);\\n\t\t}\\n\t}\\n\\n\t/**\\n\t * ??\u00a8???????\u00a8??\u00a3?????????\u00a8??????????\u00b4??????????????\u00ac?????????????????????????\\n\t */\\n\tpublic static List<List<String>> processAllSideLine(BufferedReader br) throws IOException {\\n\\n\t\tint sideLineCount = Integer.parseInt(br.readLine());\\n\t\tList<List<String>> allSideLine = new ArrayList<>();\\n\\n\t\tfor (int i = 0; i < sideLineCount; i++) {\\n\\n\t\t\tString[] sideLine = br.readLine().split(\",\");\\n\t\t\tList<String> sideLineToList = Arrays.asList(sideLine);\\n\t\t\tallSideLine.add(sideLineToList);\\n\t\t}\\n\\n\t\treturn allSideLine;\\n\t}\\n\\n\t/**\\n\t * ????????????????????????????????????????????????????????\u00a7?????????????????????????????????????????\u00a7????????????\\n\t */\\n\tpublic static List<String> processGoalNumberList(List<String> goalNumberList, List<List<String>> allSideLine) {\\n\\n\t\tfor (int startNumber = 0; startNumber < goalNumberList.size(); startNumber++) {\\n\\n\t\t\tString goalNumber = String.valueOf(startNumber + 1);\\n\\n\t\t\tfor (int j = 0; j < allSideLine.size(); j++) {\\n\\n\t\t\t\tString sideNode_1 = allSideLine.get(j).get(0);\\n\t\t\t\tString sideNode_2 = allSideLine.get(j).get(1);\\n\\n\t\t\t\tif (sideNode_1.equals(goalNumber)) {\\n\\n\t\t\t\t\tgoalNumber = sideNode_2;\\n\t\t\t\t} else if (sideNode_2.equals(goalNumber)) {\\n\\n\t\t\t\t\tgoalNumber = sideNode_1;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tgoalNumberList.set(Integer.parseInt(goalNumber) - 1, String.valueOf(startNumber + 1));\\n\t\t}\\n\\n\t\treturn goalNumberList;\\n\t}\\n}", "target": "156", "substitutes": {}}
{"code": "import java.util.*;\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner scn = new Scanner(System.in);\\n        //\u7bb1A,B,C\u306b\u5165\u308b\u6574\u6570\\n        int boxA = scn.nextInt();\\n        int boxB = scn.nextInt();\\n        int boxC = scn.nextInt();\\n        int boxCopy = boxA;\\n        boxA = boxB;\\n        boxB = boxCopy;\\n        boxCopy = boxA;\\n        boxA = boxC;\\n        boxC = boxCopy;\\n        System.out.println(boxA +\" \" + boxB + \" \" + boxC);\\n    }\\n}", "target": "149", "substitutes": {"scn": ["scr", " SCr", " scr", "Scn", " scN", " scl", "scl", " SCl", " SCn", "scN", " SCN", "ScN", "Scr", "Scl"]}}
{"code": "//package atcoder.beginner_172;\\n\\nimport java.io.*;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n    public static void main (String[] args) throws Exception {\\n\\n        String s = \"2\";\\n\\n//        br = new BufferedReader(new StringReader(s));\\n        br = new BufferedReader(new InputStreamReader(System.in));\\n        bw = new BufferedWriter(new OutputStreamWriter(System.out));\\n\\n        rl(); int a=nin();\\n\\n\\n        bw.write(Integer.toString(a+a*a+a*a*a));\\n        bw.newLine();\\n        bw.flush();\\n\\n    }\\n\\n    static BufferedReader br;\\n    static BufferedWriter bw;\\n    static StringTokenizer st;\\n    static void rl() throws Exception{\\n        st = new StringTokenizer(br.readLine());\\n    }\\n    static long nlo(){\\n        return Long.parseLong(st.nextToken());\\n    }\\n    static int nin(){\\n        return Integer.parseInt(st.nextToken());\\n    }\\n    /*private static void te(){\\n      }*/\\n    static double ndo(){\\n        return Double.parseDouble(st.nextToken());\\n    }\\n    static char[] nca(){\\n        return st.nextToken().toCharArray();\\n    }\\n    static String nstr(){\\n        return st.nextToken();\\n    }\\n}", "target": "162", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString W = sc.nextLine();\\n\t\tW = W.toLowerCase();\\n\t\tint num = 0;\\n\t\tfor(;;){\\n\t\t\tString T = sc.next();\\n\t\t\tif(T.equals(\"END_OF_TEXT\"))break;\\n\t\t\tT = T.toLowerCase();\\n\t\t\tif(W.equals(T))num++;\\n\t\t}\\n\t\tSystem.out.println(num);\\n\t}\t\\n}", "target": "46", "substitutes": {}}
{"code": "import java.util.Scanner;\\nclass Main\\n{\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner sc=new Scanner(System.in);\\n        int h=sc.nextInt();\\n        int n=sc.nextInt();\\n        int a[]=new int[n];\\n\t\tfor(int i=0; i<n; i++){\\n            a[i]=sc.nextInt();\\n        }\\n        int sum=0;\\n        for(int j=0; j<n; j++){\\n            sum+=a[j];\\n        }\\n        if(h-sum<=0){\\n            System.out.println(\"Yes\");\\n        }\\n        else{\\n            System.out.println(\"No\");\\n        }\\n        sc.close();\\n    }\\n}", "target": "95", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "co", "cgi", "cl", "sys", "system", "sh", "sv", "sp", "bc", "cr", "inc", "dc", "ck", "ctl", "capt", "ec", "cle", "irc", "sch", "sync", "fc", "tc", "ctrl", "scan", "sq", "cs", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "ng", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "sub"], "h": ["he", "ho", "q", "uh", "r", "d", "hi", "hl", "l", "sh", "kh", "m", "bh", "oh", "v", "high", "hh", "ih", "hd", "b", "f", "ht", "history", "z", "hex", "hr", "H", "g", "k", "head", "c", "ph", "w", "alpha", "x", "t", "p", "hs", "ch", "height", "ah", "hash"], "n": ["nu", "num", "mn", "d", "ll", "nn", "l", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "ni", "sn", "on", "z", "no", "nb", "g", "na", "k", "length", "nc", "np", "en", "c", "nw", "nm", "w", "t", "p", "nor", "ln", "net", "size", "nt", "x"], "a": ["ae", "ata", "ca", "att", "oa", "ta", "m", "aa", "da", "sta", "sa", "ai", "A", "b", "ia", "u", "an", "la", "ga", "ao", "xa", "ity", "ab", "ea", "apa", "area", "ba", "aaa", "na", "c", "fa", "alpha", "ma", "t", "as", "p", "ac", "era", "au", "va", "am"], "i": ["I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "from", "ei", "chain", "ip", "point", "li", "ini", "in", "print", "ki", "im", "ind", "qi", "ist", "ori", "us", "init", "u", "\u0438", "ir", "io", "bi", "it", "ui", "ie", "is", "uri", "pi", "inner", "ti", "ic", "ci", "sim", "ins", "uci", "multi", "iter", "y", "xi", "ii", "si", "di", "mi"], "sum": ["Sum", "num", "ho", "sat", "set", "cal", "base", "temp", "med", "total", "zero", "sh", "summary", "ash", "sa", "alph", "su", "tail", "square", "mean", "hist", "cache", "scale", "count", "fac", "mem", "um", "cum", "vol", "mass", "hum", "sim", "ass", "max", "alpha", "out", "black", "sam", "average", "hess", "add", "size", "si", "hash"], "j": ["br", "q", "jac", "pt", "key", "att", "ji", "jj", "jo", "ij", "son", "jump", "jas", "ja", "im", "ind", "bj", "b", "note", "oj", "us", "job", "z", "it", "pr", "uj", "g", "json", "k", "bot", "js", "obj", "aj", "jp", "J", "ph", "fr", "bo", "other", "jet", "kj", "y", "jc", "dj", "je", "jl", "next"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] argst)throws IOException{\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        \\n        String str = br.readLine();\\n        \\n        while(str != null){\\n            String[] line = str.split(\"\\\\s\");\\n            int H = Integer.parseInt(line[0]);\\n            int W = Integer.parseInt(line[1]);\\n            //System.out.println(H);\\n            //System.out.println(W);\\n\\n            if(H !=0 && W != 0){\\n            String yoko = Wwrite(W);\\n            Hwrite(H,yoko);\\n            System.out.println(\"\");\\n            str = br.readLine();\\n            }else{\\n                break;\\n            }\\n        }\\n    }\\n\\n    public static String Wwrite(int W){\\n        StringBuilder buff = new StringBuilder();\\n        for(int i=0;i<W;i++){\\n            buff.append(\"#\");\\n        }\\n        return buff.toString();\\n    }\\n\\n    public static void Hwrite(int H,String yoko){\\n        for(int i=0;i<H;i++){\\n            System.out.println(yoko);\\n        }\\n    }\\n}", "target": "87", "substitutes": {"argst": ["argstr", "argv", " argstr", "arguments", "Argst", "Argstr", " arguments", " argv", "argsuments", "argsst", "argsstr", "Arguments", "Argv", "argsv"], "br": ["ctr", "bro", "shr", "bsp", "vr", "cr", "bc", "ber", "kr", "dr", "bh", "tr", "bf", "bridge", "bl", "bs", "bn", "bp", "Br", "mr", "buf", "BR", "b", "bd", "hr", "bi", "bm", "pr", "wr", "bt", "fr", "er", "bb", "sr", "be", "rb", "ch", "gr"], "str": ["dat", "r", "result", "elt", "STR", "pt", "cur", "row", "cr", "sp", "n", "dr", "tr", "ch", "msg", "bl", "comm", "raw", "print", "res", "form", "sl", "req", "arr", "ent", "j", "string", "it", "Str", "div", "pr", "cont", "text", "piece", "vol", "wr", "comp", "txt", "fr", "exp", "t", "s", "char", "iter", "gr", "st"], "line": ["block", "Line", "edge", "pixel", "look", "row", "inline", "ip", "entry", "ide", "point", "part", "log", "node", "stroke", "word", "day", "pair", "detail", "item", "lo", "file", "cle", "profile", "cell", "section", "tile", "le", "lane", "shell", "range", "frame", "comment", "trace", "no", "LINE", "zone", "piece", "step", "eline", "link", "sample", "tab", "liner", "style", "iter", "page", "cycle", "rule", "ine"], "H": ["Z", "I", "D", "F", "E", "HL", "N", "h", "O", "G", "S", " h", "P", "T", "HT", "R", "Q", "V", "M", "HI", "U", "TH", "L", "J", "K", "X", "OH", "B"], "W": ["Z", "F", "E", "N", "WC", "OW", "CW", "MW", "G", "SW", "S", "P", "T", "EW", "R", "Q", "V", "M", "WP", "NW", "L", "We", "J", "w", "X", "Width", "Sw", "B"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint p[]=new int[n];\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\tp[i]=scan.nextInt();\\n\t\t}\\n\t\tscan.close();\\n\t\tint cnt=0;\\n\t\tint check=-1;\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\tif(i+1!=p[i]) {\\n\t\t\t\tcnt++;\\n\t\t\t\tif(check==-1)check=p[i];\\n\t\t\t\telse {\\n\t\t\t\t\tp[i]=check;\\n\t\t\t\t}\\n\t\t\t\tif(cnt>2)break;\\n\t\t\t}\\n\t\t}\\n\t\tif(cnt==0||cnt==2)System.out.println(\"YES\");\\n\t\telse System.out.println(\"NO\");\\n\t}\\n}", "target": "82", "substitutes": {"scan": ["set", "r", "skip", "row", "reach", "gate", "parse", "con", "san", " Scan", "ser", "sys", "Scan", "system", "connect", "sv", "m", "sin", "ran", "read", "in", "stat", "by", "source", "sche", "can", "get", "report", "run", "start", "scale", "se", "gen", "sync", "search", "pass", "send", "scroll", "an", "match", "range", "cat", "clean", "sc", "find", "ner", "g", "na", "store", "out", "gc", "sur", "re", "trans", "proc", "query", "ch", "ann"], "n": ["num", "mn", "nu", "name", "nn", "number", "l", "len", "N", "o", "ns", "m", "v", "nan", "ne", "in", "nl", "sn", "count", "z", "j", "no", "nb", " N", "g", "na", "nc", "k", "np", "fn", "en", "c", "nm", "out", "ng", "t", "network", "ln", "net", "size", "all", "nt", "names"], "p": ["q", "pn", "pt", "ping", "pm", "parse", "l", "vp", "ip", "tp", "point", "o", "perm", "h", "sp", "cp", "m", "v", "lp", "rep", "pe", "P", "pp", "pid", "f", "pro", "u", "j", "pers", "par", "press", "pr", "pa", "pi", "g", "pb", "np", "c", "port", "jp", "ap", "t", "y", "ps", "pc", "x"], "i": ["set", "ix", "zi", "iu", "base", "ei", "li", "me", "batch", "ai", "ki", "go", "f", "ims", "is", "ic", "e", "ami", "y", "oi", "di", "x", "ri", "l", "chain", "ip", "ji", "point", "o", "id", "ij", "in", "client", "iti", "ori", "io", "slice", "bi", "it", " I", "g", "inner", "ci", "sim", "cli", "ii", "phi", "hi", "php", "progress", "print", "ind", "u", "\u0438", "status", "pi", "iso", "gu", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "err", "im", "qi", "index", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "multi", "info", "iter", "to"], "cnt": [" Cnt", "acnt", "Ccount", "Cnc", " cust", " cnc", "lcount", "CNT", " cbt", " Catt", " Count", "gcount", " CNT", "cNT", "lcaught", "acNT", "cnc", "gcnt", " cNT", " count", "lcNT", "acatt", "acnc", "lcnt", "ctnt", "cct", "Cct", "Caught", "Count", "catt", " caught", "count", "Cust", "gccount", "ctct", "ctNT", "ctust", "cust", "Cnt", "cbt", " catt", "gcbt", "ccount", "acount", " ccount", "Cbt", "caught", " cct"], "check": ["set", "block", "checks", "stop", "end", "key", "fail", "error", "miss", "cp", "control", "read", "ck", "change", "call", "update", "print", "clear", "show", "start", "warn", "view", "index", "ack", "load", "match", "send", "test", "type", "CHECK", "find", "null", "remove", "cmd", "status", "lock", "ok", "k", "score", "guard", "c", "link", "old", "max", "black", "def", "char", "Check", "info", "add", "delete", "del", "checked"]}}
{"code": "import java.io.*;\\n\\npublic class Main{\\n\tpublic static void main (String[] args) {\\n\t    //long x;\\n\t    long x1 = 1;\\n\t    try{\\n\t\t//System.out.println(\"input number 1<x<100\");\\n\t\tInputStreamReader isr = new InputStreamReader(System.in);\\n\t\tBufferedReader br = new BufferedReader(isr);\\n\t\tlong x = Long.parseLong(br.readLine());\\n\t\tif(x <= 100 && 1 <= x){\\n\t\tfor(int i=0; i<3; i++){\\n\t\tx1 = (long)x1 * x;\\n\t\t}\\n\t\tSystem.out.println(x1);\\n\t\t}else{\\n\t\t//System.out.println(\"Input Error\");\\n\t\t}\\n\t    }catch(IOException e){\\n\t    //System.out.println(\"KUSO key bord\");\\n\t    }\\n\\n\t}\\n}", "target": "36", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner kb = new Scanner(System.in);\\n\t\tint x1 = kb.nextInt();\\n\t\tint x2 = kb.nextInt();\\n\t\tint x3 = kb.nextInt();\\n\t\tint x4 = kb.nextInt();\\n\t\tint x5 = kb.nextInt();\\n\t\tif (x1 == 0) {\\n\t\t\tSystem.out.println(1);\\n\t\t} else if (x2 == 0) {\\n\t\t\tSystem.out.println(2);\\n\t\t} else if (x3 == 0) {\\n\t\t\tSystem.out.println(3);\\n\t\t} else if (x4 == 0) {\\n\t\t\tSystem.out.println(4);\\n\t\t} else if (x5 == 0) {\\n\t\t\tSystem.out.println(5);\\n\t\t}\\n\t\tkb.close();\\n\t}\\n\\n}\\n", "target": "222", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String[] args){\\n        Scanner scan = new Scanner(System.in);\\n\\n        // input\\n        int woods = scan.nextInt();\\n        int peoples = scan.nextInt();\\n\\n        // answer\\n        System.out.println((int)Math.ceil((double)woods / (peoples * 2.0 + 1.0)));\\n\\n    }\\n}", "target": "238", "substitutes": {"scan": ["result", "nn", "parse", "sys", "Scan", "system", "anners", "sv", " parse", " kin", " auto", "ans", "can", "runner", "sync", "an", "test", "sc", " annot", "parser", "k", " span", "out", "check", " check", "proc", "ann", "map"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] A = new int[N];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tif (A[i] % 2 == 0) {\\n\t\t\t\tif (!(A[i] % 3 == 0 || A[i] % 5 == 0)) {\\n\t\t\t\t\tSystem.out.println(\"DENIED\");\\n\t\t\t\t\treturn;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(\"APPROVED\");\\n\t}\\n}", "target": "113", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "cr", "bc", "sv", "sp", "dc", "ck", "nl", "capt", "ctl", "cle", "sel", "sch", "sw", "sync", "fc", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "pb", "screen", "c", "osc", "Sc", "gc", "ng", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "N": ["D", "I", "Z", "Node", "TN", "F", "ND", "NM", "SN", "NP", "NE", "NB", "n", "No", "G", "S", "Ni", "NG", "P", "NO", "T", "R", "NS", "Q", "Na", "NR", "V", "ANY", "NH", "M", "AN", "GN", "NC", "H", "Sn", "C", "NN", "Num", "NA", "L", "K", "J", "Net", "NI", "NT", "B", "Ns"], "A": ["I", "AA", "RAM", "Array", "MA", "AU", "Alpha", "CA", "AY", "ARC", "WA", "AE", "UA", "AC", "HA", "The", "All", "Av", "As", "SA", "S", "P", "IA", "ATA", "a", "Address", "GA", "V", "LA", "JA", "TA", "API", "AN", "What", "AV", "H", "AP", "C", "AM", "AB", "An", "NA", "AR", "EA", "Answer", "BA", "mA", "AF", "ACT", "B", "AT"], "i": ["ix", "zi", "iu", "ei", "base", "li", "me", "batch", "ai", "ki", "is", "ic", "e", "y", "oi", "di", "x", "ri", "fi", "chain", "ip", "ji", "point", "id", "ij", "in", "client", "a", "io", "z", "bi", "it", "ci", "sim", "cli", "ii", "span", "ex", "phi", "hi", "progress", "print", "ind", "list", "u", "\u0438", "pi", "my", "gu", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "err", "im", "qi", "us", "init", "j", "loop", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "iter", "info", "to"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.util.regex.*;\\n\\n\\npublic class Main {\\n\\n\tfinal static long MOD = 1000000007;\\n\tpublic static String[] Ws = null;\\n\tpublic static int wsIndx = 0;\\n\tpublic static BufferedReader in = null;\\n\tpublic static long cnt=0;\\n\tpublic static PrintWriter pw = new PrintWriter(System.out);\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tsolutionA(args);\\n\t\tif(in!=null){\\n\t\t\tin.close();\\n\t\t}\\n\t\tpw.flush();\\n\t\tpw.close();\\n\t}\\n\\n\tpublic static void solutionA(String[] args) throws Exception{\\n\\n\t\tint N = nextInt();\\n\t\tint[] a = nextInts();\\n\\n\t\tint[] color = new int[9];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tif(a[i]>3199) {\\n\t\t\t\tcolor[8]++;\\n\t\t\t}else {\\n\t\t\t\tcolor[a[i]/400]++;\\n\t\t\t}\\n\t\t}\\n\t\tint min = 0;\\n\t\tfor(int i=0;i<8;i++) {\\n\t\t\tif(color[i]!=0) {\\n\t\t\t\tmin++;\\n\t\t\t}\\n\t\t}\\n\t\tint max;\\n\t\tif(color[8]==N) {\\n\t\t\tmin=1;\\n\t\t\tmax=N;\\n\t\t}else {\\n\t\t\tmax = min+color[8];\\n\t\t}\\n\t\tpw.println(min+\" \"+max);\\n\t}\\n\\n\tpublic static void check() throws Exception{\\n\t\tif(in == null){\\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tif(Ws==null || Ws.length<=wsIndx){\\n\t\t\tWs = in.readLine().split(\" \");\\n\t\t\twsIndx=0;\\n\t\t}\\n\t}\\n\tpublic static int nextInt()throws Exception{\\n\t\tcheck();\\n\t\treturn Integer.parseInt(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static long nextLong()throws Exception{\\n\t\tcheck();\\n\t\treturn Long.parseLong(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static String nextString()throws Exception{\\n\t\tcheck();\\n\t\treturn Ws[wsIndx++];\\n\t}\\n\\n\tpublic static int[] nextInts()throws Exception{\\n\t\tcheck();\\n\t\tint[] tmp = new int[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Integer.parseInt(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static long[] nextLongs()throws Exception{\\n\t\tcheck();\\n\t\tlong[] tmp = new long[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Long.parseLong(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static String[] nextStrings()throws Exception{\\n\t\tcheck();\\n\t\twsIndx=Ws.length;\\n\t\treturn Ws;\\n\t}\\n\\n}\\n\\n", "target": "94", "substitutes": {"MOD": [" val", " MAX", " reg", "Mod", "base", "NUM", "ref", "rid", "rand", "DX", "REM", " stamp", "M", " Max", "mod", "OK", "VAL", " mod", "RES", " xx", "MIN", " MIN", "VALUE", "AD", "MAX", "UID"], "Ws": ["Ring", "Wo", "Wr", "WB", "Words", "Has", " Webs", "Tips", "Win", "Parts", "WC", "Lens", "ns", "Wa", "CW", "Hundreds", "Witness", "Vs", "ws", "Es", "Pages", "Ms", "Ds", "Wed", "Wire", "Windows", "Dest", "NS", "Sec", "Fs", "Vers", "W", "In", "FS", "Sax", "Js", "Rs", "Ts", "Us", "Str", "Wh", "Works", "Posts", "RW", " WS", "WS", "Tx", "Socket", "Cons", "We", "GS", "Its", "Args", "qs", "Cs", "fts", "xs", "Bytes", "Wars", "LS", "Bs", "Ns"], "wsIndx": ["winINDy", "wsIndix", "wsIndX", "imsPredv", "wsindxt", "wsPredic", "hsIndic", "wsINDxt", "winIndix", "nsIdy", "wsVerty", "hsIndy", "wsIndic", "wsIndex", "hsINDux", "wsindy", "wsindix", "wsindx", "wsVertux", "wsIndxt", "WsIndy", "winINDix", "nsIdex", "imsIndx", "nsIndix", "imsPredx", "wsPtry", "wsINDx", "wsIdx", "Wsindxt", "hsIndux", "wsVertx", "winIndx", "imsIndX", "nsIdx", "hsINDx", "winINDX", "wsIndy", "nsIndx", "wsIndexux", "wsPtrix", "Wsindx", "wsIndv", "imsPredic", "WsIndex", "wsPtrex", "wsIdex", "nsIndy", "winINDx", "hsIndx", "wsPredv", "wsDevv", "wsIndexx", "wsINDix", "wsINDic", "wsINDux", "hsINDic", "hsINDy", "imsPredX", "wsIndexy", "wsDevx", "wsIndexic", "wsPredX", "WsIndx", "wsPtrx", "wsVertic", "winIndX", "wsIdy", "nsIndex", "Wsindy", "wsIndexex", "imsIndv", "wsIndexix", "wsDevic", "wsINDy", "wsIndux", "wsindex", "wsINDX", "wsPtrX", "WsIndix", "WsIndxt", "wsDevX", "imsIndic", "wsIdix", "wsINDv", "wsindX", "Wsindix", "wsPredx", "wsIdxt", "nsIdix", "Wsindex", "winIndy"], "in": ["r", "mm", "gin", "bin", "from", "inf", "con", "l", "include", "isin", "o", "h", " out", "log", "inc", "n", "m", "sin", "ini", "err", "source", "read", "ws", "me", "lo", "inn", "rin", "IN", "can", "or", "ind", "ill", "f", "on", "In", "init", "world", "win", "reader", "it", "null", "din", "is", "stream", "inner", "pi", "ic", "en", "c", "ins", "input", "inside", "txt", "inv", "out", "w", "conf", "t", "cin", "p", "iter", "s", "ln", "info", "ma", "er", "mc", "to", "mi", "st"], "cnt": ["count", " Cnt", " cCount", " cNT", " count", "Count", "CNT", " CCount", " Count", " CNT", "cCount", "Cnt", "CCount", "cNT"], "pw": ["Pw", "rh", "rws", "ppwh", "lpwd", "spwb", "spwh", "pwt", "ppwa", "pws", "spw", " pwt", "lpw", "PW", " pwh", "lpwa", "cpw", "prew", "ppwb", " pwb", "ppw", "cpwd", "lpW", "ppwd", "spwd", "rw", "tpwt", " pr", "Pwd", "pwb", "prewa", "pr", "prer", "prewd", "pwh", "ppr", "pwa", "tph", " pwa", "ph", "pwd", "cpW", " ph", "cpwa", " pwd", "tpw", " pws", "Pwa", "pW", "rwt", "tpws"], "N": ["D", "I", "Z", "F", "NM", "NI", "SN", "NP", "NE", "NB", "n", "Size", "No", "O", "G", "S", "Ni", "NG", "P", "NO", "T", "NL", "R", "NS", "Q", "A", "NR", "V", "M", "None", "AN", "ONE", "GN", "NC", "H", "Sn", "C", "Num", "NA", "L", "Y", "K", "J", "X", "Max", "MAX", "NN", "NT", "Ns"], "a": ["ca", "att", "array", "ar", "oa", "ta", "zero", "aa", "sta", "sa", "sha", "go", "auto", "A", "b", "ia", "ack", "an", "la", "ao", "xa", "ea", "area", "pi", "ba", "aaa", "c", "fa", "alpha", "ma", "as", "ac", "ana", "au", "aux", "va", "am"], "color": ["colored", "coll", "white", "pixel", "col", "olor", "COLOR", "cal", "background", "loc", "feature", "number", "co", "red", "draw", "light", "stroke", "gb", "option", "pair", "cell", "state", "or", "scale", "code", "fc", "index", "count", "type", "cho", "cat", "hex", "our", "comment", "frame", "bug", "status", "green", "pal", "c", "normal", "format", "style", "black", "alpha", "blue", "char", "role", "theme", "font", "cycle", "size", "Color", "gray", "colour", "term"], "i": ["set", "q", "I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "iy", "chain", "ip", "ji", "base", "li", "o", "v", "m", "me", "ini", "batch", "this", "print", "ai", "ki", "client", "im", "qi", "f", "load", "init", "\u0438", "u", "io", "ims", "j", "bi", "it", "ity", "ui", "uri", "status", "pi", "g", "eu", "ti", "ic", "ci", "sim", "my", "cli", "e", "multi", "info", "ios", "ami", "y", "oi", "xi", "ii", "si", "to", "di", "x", "mi"], "min": ["lt", "mins", "mini", "dim", "shift", "margin", "l", "pre", "temp", "part", "Min", "mid", "admin", "value", "minute", "n", "m", "rand", "default", "ne", "stat", "sum", "small", "start", "minimum", "begin", "index", "amin", "init", "sort", "lower", "left", "range", "Mini", "div", "area", "rest", "mod", "mine", "none", "my", "span", "diff", "local", "MIN", "blue", "minus", "initial", "first", "just", "border", "sub"], "max": ["end", "limit", "work", "ax", "next", "maximum", "prime", "total", "v", "m", "n", "line", "rand", "cast", "call", "show", "sum", "can", "act", "right", "res", "gt", "view", "load", "recent", "range", "z", "full", "rest", "wrap", "mx", "mod", "step", "aj", "conf", "ma", "t", "exp", "Max", "last", "add", "MAX", "grow", "size", "to", "box", "x", "window"], "tmp": ["acc", "cur", "mp", "temp", "tp", "perm", "cp", "tt", "nom", "uv", "buff", "Temp", "xy", "params", "yy", "cv", "nb", "mk", "aaa", "np", "emp", "obj", "tn", "cmp", "etc", "cb", "ctx", "conv"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tstatic class Task {\\n        public void solve(InputReader in, PrintWriter out) {\\n        \tint n = in.nextInt();\\n        \tif(n==1) {\\n        \t\tout.println(in.nextInt());\\n        \t\treturn;\\n        \t}\\n        \tint ans = 0;\\n        \tint prev = in.nextInt();\\n        \tfor(int i=1; i<n; i++) {\\n        \t\tint curr = in.nextInt();\\n        \t\tif(prev > curr)\\n        \t\t\tans+=prev-curr;\\n        \t\tif(i==n-1)\\n        \t\t\tans+=curr;\\n        \t\tprev = curr;\\n        \t}\\n        \tout.println(ans);\\n        }\\n        \\n        public void solve_again(InputReader in, PrintWriter out) {\\n        \tint n = in.nextInt();\\n        \tint curr = in.nextInt();\\n        \tint ans = curr;\\n        \tfor(int i=1; i<n; i++) {\\n        \t\tint next = in.nextInt();\\n        \t\tif(next > curr)\\n        \t\t\tans+=next-curr;\\n        \t\tcurr = next;\\n        \t}\\n        \tout.println(ans);\\n        }\\n        \\n    }\\n\t\\n    public static void main(String argds[]) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        Task solver = new Task();\\n        solver.solve(in, out);\\n        out.close();\\n    }\\n\\n\tstatic class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n        \\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n \\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n \\n        public long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n    }\t\\n}", "target": "77", "substitutes": {"in": ["r", "gin", "bin", "from", "raw", "ai", "on", "din", "is", "cm", "ic", "ins", "conf", "as", "ac", "net", "del", "st", "ri", "inf", "el", "current", "l", "isin", "id", "sin", "source", "doc", "IN", "run", "or", "form", "io", "win", "it", "inner", "inside", "local", "mc", "ex", "inc", "ran", "this", "rin", "file", "serv", "act", "ind", "lin", "ry", "In", "nin", "cmd", "input", "re", "add", "mi", "mm", "name", "con", "v", "ini", "err", "by", "md", "inn", "ro", "get", "the", "at", "init", "null", "er", "cin", "iter", "info", "t"], "out": ["set", "r", "outer", "group", "log", "os", "can", "Out", "c", "conf", "pool", "pretty", "net", "all", "over", "res", "st", "current", "l", "chain", "co", "sys", "o", "conn", "OU", "client", "code", "io", "it", "inner", "table", "txt", "w", "conv", "ex", "writer", "system", "this", "print", "OUT", "file", "write", "cache", "list", "cmd", "screen", "output", "p", "stable", "ch", "line", "outs", "ou", "name", "con", "v", "err", "by", "cn", "sum", "report", "at", "b", "init", "aos", "null", "gc", "check", "t", "to", "nt", "gr"], "n": ["nu", "mn", "num", "r", "name", "d", "nn", "un", "number", "l", "len", "nr", "N", "total", "o", "ns", "m", "v", "nan", "ne", "nl", "cn", "ren", "sn", "count", "on", "norm", "z", "j", "no", "nb", "g", " N", "nc", "na", "fn", "np", "en", "c", "nw", "max", "span", "w", "t", "s", "p", "network", "nor", "ln", "net", "all", "nt", "names"], "ans": [" orphans", "gs", "acs", "ents", "uns", "ints", "ons", "ros", "vals", "pan", "anas", "aus", "names", "anks", "rs", "oss", "ns", "ads", "ks", "asks", "asms", "beans", "nan", "ians", "ars", "os", "can", "errors", "ms", "ids", "lines", "arts", "ANS", "ates", "amps", "ats", "ens", "ants", "res", "us", "ls", "an", "ies", "AN", "angs", "vs", "ams", "aos", "anes", " spans", "cs", "ones", "orts", "ings", "ins", "aps", "ds", "arms", "cons", "as", "s", "terms", "actions", "cas", "xs", "rans", "rors", "offs", "outs", "ann"], "prev": ["br", "Previous", "ctr", "vious", "before", "cur", "Prev", "rev", "current", "pre", "nav", "var", "ip", "ref", "prefix", "adj", "tmp", " previous", "sp", "jump", "ne", "rep", "top", "bp", "pri", "via", "ren", "pp", "initial", "inter", "init", "orig", "history", "pkg", "vs", "par", "sup", "ptr", "nv", "rel", "cmp", "inv", "jp", "ap", "reverse", "p", "op", "upper", "last", "pred", "conv", "pres", "res", "first", "rem"], "i": ["set", "q", "I", "ix", "r", "ex", "phi", "gi", "zi", "iu", "hi", "l", "chain", "ip", "ji", "point", "li", "o", "id", "v", "m", "me", "ini", "this", "ai", "ni", "ms", "ki", "im", "inx", "ind", "qi", "index", "f", "us", "init", "\u0438", "fire", "io", "ims", "j", "bi", "it", "ui", "ie", "uri", "pi", "you", "ti", "MI", "ci", "c", "sim", "my", "cli", "PI", "multi", "info", "iq", "y", "oi", "xi", "ii", "si", "di", "mi"], "curr": ["derp", "contrc", "grner", " curner", " curl", "charr", "currt", " currt", "priner", "currs", "curror", "currc", "curren", "cmpr", "trrs", "cmprat", "currar", "curler", "contrs", "corren", "prirer", "Currer", "derror", "ctrp", "corr", "prirt", "contr", "cmpror", "ctrrar", "charrt", "surl", "grrt", "correr", "charrr", "pril", "cerrer", "acrt", "derrat", "perrc", "cmpp", " currat", "currat", "CurR", "curl", "perren", "derler", "surr", "contrer", "cerner", "corR", "surner", "corrc", " curren", "acner", "prirr", "curp", "currr", "curner", "contrar", "ctrrer", "cerr", " curler", "derrar", "prir", "rcr", "ctrR", "rcrs", "perr", "charl", " currr", "rcrar", "ctrler", "acr", "curR", "trrer", "ctrr", " curp", " curR", " currc", " currs", "surrer", "Curp", "derr", "perrer", "trrc", " curror", "grrer", "acrer", "Curr", "rcrc", "grr", "currer", "corp", " currar", "cerl", "trr", " currer"], "next": ["br", "secondary", "me", "ne", "nl", "gt", "append", "sen", "patch", "data", "e", "def", "last", "net", "more", "first", "valid", "cur", "current", "chain", "nr", "draw", "adj", "read", "forward", "start", "then", "gen", "code", "match", "z", "sequence", "bi", "pkg", " Next", "success", "inner", "link", "txt", "fr", "ng", "nd", "network", "result", "end", "nn", "version", "after", "choice", "value", "big", "nz", "frame", "ptr", "ner", "rel", "nw", "input", "nm", "head", "jp", "never", "non", "see", "pn", "future", "key", "position", "entry", "nil", "latest", "node", "v", " NEXT", "Next", "get", "any", "unique", "inter", "j", "gov", "text", "np", "obj", "iterator", "body", "max", "continue", "info", "nt"], "argds": ["prod", "wd", "prors", "wds", "argsda", "argsrs", "prods", "wda", "wrs", "argsds", "argd", "proda", "argda", "argrs", "argsd"], "inputStream": ["instream", "inStream", "InputSource", " inputSteam", "outputView", "outputSource", "InputPath", "inputSteam", "inputPath", "inputView", "sourceSteam", "InputStream", "sourceStream", "inSteam", "inView", "inputstream", " inputSource", " inputPath", "sourcestream", "outputstream", "sourceView", "inputSource", "outputPath", "outputSteam", "InputSteam"], "outputStream": ["OutputForm", "outputScreen", "OutputNow", "inputSteam", "outputNow", "OutputStream", " outputSteam", "inputNow", "outputForm", " outputForm", "OutputSteam", "inputScreen", "inputForm", "OutputScreen", " outputNow", "outputSteam", " outputScreen"], "solver": ["psolution", "solved", "psolved", "resolver", " solution", "soln", " solve", "resolve", "tsolver", "tsolution", "resolved", "psorter", "tsorter", "resorter", " soln", "solve", "resoln", "psolver", "solution", "sorter", "tsolved", "resolution"], "reader": ["loader", "rr", "wrapper", "r", "driver", "row", "rar", "master", "writer", "builder", "dr", "finder", "read", "ro", "file", "handler", "mr", "Reader", "runner", "rot", "buffer", "worker", "parser", "oder", "rer", "rl", "inner", "ner", "timer", "linger", "iterator", "input", "socket", "er", "iter", "rx", "rc", "window", "term"], "tokenizer": ["terminization", " tokenize", "tokenber", " tokenization", "tokenize", "toolize", " tokenifier", "tokenizing", "okenize", " tokenzer", "worditer", "toolerer", "Tokenizer", "terminize", "tooler", "terminizer", "terminber", " tokenner", "tokenner", "Tokenner", "okener", "tokener", "wordize", "Tokenizers", " tokeniter", "Tokenzer", " tokenator", " tokenizing", "serialifier", "serialerer", "tagber", "tokenizers", "okenizer", "okenizers", "tokenerer", "tokenization", "wordization", "serializer", " tokenizers", "toolizer", "Tokenifier", "tokenifier", "terminizing", "okenifier", " tokenber", "serialize", "terminiter", "tagize", "tokenator", "tagizing", "serialer", "okenner", "wordizer", "tokeniter", "tagizer", "serialator", "okenzer", "okenerer", "tokenzer", "okenator"], "stream": ["wrapper", "driver", "row", "dd", "system", "upload", "console", "context", "read", "ream", "path", "file", "host", "this", "thread", "form", "phrase", "instance", "buffer", "test", "io", "history", "stack", "pipe", "poll", "message", "content", "data", "length", "channel", "Stream", "iterator", "input", "sample", "pool", "socket", "handle", "time", "window"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        try {\\n            // \u6a19\u6e96\u5165\u529b\\n            InputStreamReader isr = new InputStreamReader(System.in);\\n            BufferedReader br = new BufferedReader(isr);\\n            String a = br.readLine();\\n            int aCount = 0;\\n            String b = br.readLine();\\n            int bCount = 0;\\n            String c = br.readLine();\\n            int cCount = 0;;\\n            String now = \"a\";\\n            while (true) {\\n                if (\"a\".equals(now)) {\\n                    if (aCount >= a.length()) {\\n                        System.out.println(\"A\");\\n                        break;\\n                    }\\n                    now = a.substring(aCount, aCount + 1);\\n                    aCount++;\\n                } else if (\"b\".equals(now)) {\\n                    if (bCount >= b.length()) {\\n                        System.out.println(\"B\");\\n                        break;\\n                    }\\n                    now = b.substring(bCount, bCount + 1);\\n                    bCount++;\\n                } else if (\"c\".equals(now)) {\\n                    if (cCount >= c.length()) {\\n                        System.out.println(\"C\");\\n                        break;\\n                    }\\n                    now = c.substring(cCount, cCount + 1);\\n                    cCount++;\\n                }\\n            }\\n       } catch (IOException e) {\\n            e.printStackTrace();\\n       }\\n    }\\n}\\n", "target": "11", "substitutes": {}}
{"code": "import java.util.*;\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        String t = sc.next();\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        String u = sc.next();\\n        if(s.equals(u)){\\n            a += -1;\\n            String as = String.valueOf(a);\\n            String bs = String.valueOf(b);\\n            System.out.println(as+\" \"+bs);\\n        } else {\\n            b += -1;\\n            String as = String.valueOf(a);\\n            String bs = String.valueOf(b);\\n            System.out.println(as+\" \"+bs);\\n        }\\n    }\\n}", "target": "155", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "sh", "bc", "sv", "sp", "cr", "inc", "dc", "ck", "ec", "ctl", "ko", "cle", "irc", "sch", "sw", "fc", "sync", "exec", "tc", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "cons", "asc", "scl", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "s": ["gs", "r", "sb", "l", "o", "h", "sp", "n", "v", "sd", "sa", "S", "ats", "str", "f", "ls", "j", "string", "ts", "i", "g", "ss", "c", "js", "e", "p", "ps", "si", "x", "st"], "t": ["r", "l", "tg", "ta", "n", "v", "tr", "tt", "T", "at", "f", "type", "tc", "z", "j", "it", "ts", "g", "et", "bt", "tn", "txt", "e", "w", "ot", "p", "y", "st"], "a": ["ae", "r", "ar", "l", "oa", "o", "ta", "n", "m", "aa", "sta", "sa", "al", "this", "ai", "A", "at", "f", "ia", "an", "la", "ao", "j", "ab", "pa", "i", "ea", "area", "ba", "na", "aj", "alpha", "e", "ma", "p", "ac", "au", "va", "am"], "b": ["r", "d", "wb", "beta", "sb", "ob", "l", "base", "o", "bc", "v", "n", "gb", "db", "m", "back", "ble", "eb", "f", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "pb", "bt", "c", "bis", "e", "p", "bb", "y", "be", "rb", "to", "B"], "u": ["ou", "fu", "iu", "un", "uf", "o", "unt", "v", "n", "uv", "uu", "su", "ua", "cu", "mu", "ut", "f", "us", "uid", "bu", "um", "ue", "ui", "ud", "i", "U", "eu", "ul", "c", "lu", "p", "up", "au", "x", "tu"], "as": ["acs", "ras", "ase", "ar", "ias", "aus", "rs", "ais", "asm", "nos", "phas", "oss", "ks", "asi", "sa", "jas", "asa", "As", "ans", "ua", "os", "vas", "isa", "ms", "ats", "ags", "us", "es", "ls", "la", "las", "aos", "mas", "is", "has", "ast", "ins", "ass", "eas", "ac", "au", "ps", "pas", "ars"], "bs": ["gs", "lbs", "bles", "banks", "ubs", "sb", "nos", "aus", "rs", "bes", "ashes", "abs", "eds", "ns", "uts", "ks", "obs", "bars", "els", "bos", "irms", "ubis", "its", "bats", "ats", "cks", "ags", "fs", "us", "ls", "es", "ows", "als", "vs", "uses", "BS", "aos", "ts", "bits", "js", "bis", "ds", "qs", "blocks", "aks", "bys", "fts", "ps", "bps", "css", "tes", "outs"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\\n        Scanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n        int[] dArr = new int[N];\\n\\n        for (int i=0; i< N; i++) {\\n            dArr[i] = scanner.nextInt();\\n        }\\n\\n        int sum = 0;\\n        for (int i=0; i< N; i++) {\\n            for (int k=i+1; k< N; k++) {\\n                sum += dArr[i] * dArr[k];\\n            }\\n        }\\n        System.out.println(sum);\\n    }\\n}", "target": "126", "substitutes": {"scanner": ["canener", " scanener", "caninner", "Scanter", "scanener", "Scaninner", "Scanener", "Scaner", "scaninner", "scanter", "canter", " scanter", "Scanner", " scaninner", "canner", "scaner", " scaner", "caner"], "N": ["D", "Z", "I", "Node", "TN", "F", "FN", "ND", "NM", "SN", "ALL", "NE", "NP", "NB", "n", "S", "Ni", "NG", "P", "NO", "T", "NL", "R", "NS", "NR", "V", "ANY", "NH", "M", "None", "AN", "GN", "NC", "Sn", "C", "Number", "NN", "Num", "NA", "L", "K", "J", "Net", "Length", "NI", "NT", "Ns"], "dArr": ["dPharr", "dAvrb", "dArd", " dArrt", "dVerr", "dPhr", "dArrb", "dAvn", "dStrrt", "dArrayl", "dAvr", "dStrrs", "dErrb", "dErrs", "dAmr", "dAml", " dOrr", " dVerarr", "dAmd", "dOrrs", "dArrayr", " dVercr", "dArrs", "dArrayd", "dStrn", " dArarr", "dErrt", "dOrrb", " dArrs", "dCorl", " dOrrb", " dArd", "dVercr", " dArrayl", " dOrrs", " dArri", "dArrt", " dVerrt", "dAvrs", "dArarr", "dCorri", " dArrb", " dStrrt", "dPhcr", "dArrayn", "dArrayri", "dCord", "dElcr", "dOrr", "dElr", "dPhrt", "dErn", "dArl", "dElarr", "dArri", " dArcr", "dOrn", "dArcr", " dArl", " dArrayd", "dElrt", "dArrayrt", " dOrn", "dVerarr", "dArrayrs", " dStrrs", " dArrayri", " dStrn", " dVerr", "dErr", "dAmri", "dCorr", "dVerrt", "dStrr", " dArn", "dArn", " dStrr", " dArrayr"], "i": ["q", "ix", "zi", "iu", "ei", "li", "batch", "ai", "ki", "ik", "ims", "is", " Xi", "ic", "ami", "y", "oi", "di", "ri", "chain", "ip", "ji", "id", "asi", "ij", "in", "client", "iti", "ori", "io", "bi", "it", "inner", "ci", "sim", "cli", "s", "ii", "phi", "hi", "progress", "this", "print", "ind", "ia", " ii", "u", "ir", "pi", "et", "iso", "iri", "xi", "si", "mi", "I", "gi", "v", "ini", "im", "qi", "index", "us", "load", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "iter", "info", "to"], "sum": ["Sum", "num", "loss", "result", "cal", "temp", "total", "zero", " SUM", "tmp", "v", "summary", "n", "sa", "su", "alph", "mean", "cu", "commit", "report", "union", "count", "fac", "match", "mem", "stack", "sup", "um", "comment", "cum", "vol", "score", "mass", " summed", "hum", "sim", "max", "alpha", "out", "black", "sam", "diff", "average", "other", "add", "size", "cost", "hash"], "k": ["ke", "key", "wk", "ikk", "kl", "ks", "kh", "kr", "dk", "km", "tk", "ck", "ko", "unk", "ak", "kn", "ki", "ik", "kk", "uk", "tc", "kat", "sc", "mk", "ok", "ek", "ku", "sk", "K", "ph", "ac", "kt", "kj", "ka", "ijk", "kw", "kid", "kg"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tstatic Scanner scanner;\\n\tpublic static void main(String[] args) {\\n\t    scanner = new Scanner(System.in);\\n\\n        int h=gi();\\n        int a=gi();\\n        \\n\t    \\n\t    \\n        System.out.println((int)Math.ceil((double)h/(double)a));\\n//        if (xo>w || yo>h) {\\n//        \tSystem.out.print(0);\\n//        }else {\\n//        \tSystem.out.print((h-yo)*(w-xo));\\n//        }\\n\\n\\n\t}\\n\\n\t// \u6587\u5b57\u5217\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static String gs() {\\n\t\treturn scanner.next();\\n\t}\\n\\n\t// int\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static int gi() {\\n\t\treturn Integer.parseInt(scanner.next());\\n\t}\\n\\n\t// long\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static long gl() {\\n\t\treturn Long.parseLong(scanner.next());\\n\t}\\n\t\\n\t// double\u3068\u3057\u3066\u5165\u529b\u3092\u53d6\u5f97\\n\tpublic static double gd() {\\n\t\treturn Double.parseDouble(scanner.next());\\n\t}\\n}", "target": "147", "substitutes": {"scanner": ["canener", "catator", "Scanator", " scanener", "scheter", "Scanter", "scanener", "scheifier", "Scanener", "Scaner", "scanifier", "scheator", "Scanifier", "schener", "catner", "scanter", "scanator", "catter", "canter", " scanter", "Scanner", "canner", "scaner", " scaner", "caner", "catifier"], "h": ["ho", "uh", "rh", "he", "hi", "hl", "hed", "l", "hp", "his", "sh", "kh", "bh", "oh", "high", "hh", "ih", "HH", "zh", "hz", "hd", "b", "hw", "history", "hr", "H", "has", "gh", "ph", "ish", "ha", "hal", "hs", "x", " H", "ah", "hash"], "a": ["ae", "ca", "oa", "o", "ta", "n", "aa", "sta", "sa", "sha", "wa", "ai", "isa", "af", "A", "b", "f", "ia", "an", "la", "z", "ao", "ga", "xa", "pa", "ea", "area", "apa", "i", "ba", "aaa", "na", "aj", "alpha", "as", "ma", "p", "au", "va"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        ArrayList<Integer> list=new ArrayList<>();\\n        for(int i=0;i<5;i++){\\n            list.add(sc.nextInt());\\n        }\\n        System.out.println(list.indexOf(0)+1);\\n    }\\n}", "target": "222", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "sh", "cr", "sv", "sp", "bc", "tk", "nl", "capt", "cle", "sel", "sch", "enc", "sw", "sm", "sync", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "pc", "rc", "conv", "ch", "desc"], "list": ["set", "dl", "array", "php", "queue", "l", "number", "entry", "total", "li", "now", "log", "tree", "level", "batch", "top", "detail", "item", "show", "print", "LIST", "lat", "dict", "the", "ist", "shape", "index", "map", "lists", "type", "collection", "test", "sequence", "left", "sort", "range", "string", "listed", "length", "table", "old", "out", "parent", "add", "all", "size", "st", "see"], "i": ["q", "I", "ix", "ex", "phi", "gi", "hi", "iu", "chain", "ip", "li", "id", "n", "m", "v", "ini", "in", "batch", "ai", "client", "mu", "im", "ind", "qi", "b", "us", "init", "u", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "c", "sim", "my", "cli", "e", "multi", "iter", "p", "gu", "y", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\ttry(Scanner sc = new Scanner(System.in)) {\\n\t\t\\n\t\t\tint[] ans = new int[3];\\n\t\t\t\\n\t\t\tans[sc.nextInt() - 1 ]  = 1;\\n\t\t\tans[sc.nextInt() - 1 ] = 1;\\n\t\t\t\\n\t\t\tfor(int i = 0 ; i < 3 ; i++ ) {\\n\t\t\t\tif ( ans[i] == 0 ) {\\n\t\t\t\t\tSystem.out.println(i+1);\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t}\\n\t}\\n\\n}", "target": "236", "substitutes": {"ans": ["gs", "acs", "uns", "ints", "ents", "ons", "ras", "nets", "vals", "aus", "urs", "anas", "ums", "outs", "oss", "sys", "ns", "helps", "ks", "ads", "asks", "nes", "orders", "ians", "atts", "ms", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "ls", "an", "uploads", "abilities", "angs", "sts", "vs", "ams", "umes", "mas", "anes", "cs", "orts", "ins", "aps", "ds", "vers", "books", "cons", "as", "aints", "posts", "actions", "ps", "pres", "offs", "ars", "ann"], "sc": ["usc", "set", "uc", "lc", "cc", "anc", "sec", "ser", "sys", "system", "cl", "sv", "sp", "bc", "cr", "inc", "ck", "ec", "sum", "sch", "sw", "fc", "tc", "ctrl", "scan", "sq", "cs", "sci", "nc", "ic", "c", "syn", "osc", "cmp", "txt", "Sc", "out", "gc", "isc", "ctx", "SC", "mc", "pc", "si", "rc", "scrib", "ch", "desc", "st", "sub"], "nextInt": ["getChar", "genInt", "getInt", "newint", " nextChar", "getFloat", "genLong", "randFloat", "nextFloat", "getLong", "newLong", " nextFloat", " nextLong", "randInt", "randLong", "nextint", "newINT", " nextINT", "genint", "nextINT", "genINT", " nextint", "newInt", "nextChar", "randChar", "nextLong"], "i": ["I", "ix", "ex", "phi", "gi", "hi", "iu", "zi", "ei", "fi", "chain", "ip", "ji", "l", "li", "o", "id", "v", "n", "m", "ij", "ini", "me", "in", "batch", "print", "ai", "ms", "ki", "client", "ind", "qi", "index", "f", "us", "init", "u", "sequence", "j", "bi", "it", "loop", "ui", "is", "ie", "uri", "status", "pi", "ti", "ic", "ci", "sim", "my", "cli", "yi", "multi", "iq", "iter", "gu", "y", "uni", "ii", "si", "conv", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        double r = scanner.nextDouble();\\n        System.out.println(r * 2 * 3.14);\\n    }\\n}\\n", "target": "167", "substitutes": {"scanner": ["canener", " scanener", "scer", "Scanter", "scanener", "Scanener", "Scaner", "scner", "scanter", "scter", "canter", " scanter", "scener", "Scanner", "canner", "scaner", " scaner", "caner"], "r": ["q", "d", "rat", "ar", "l", "rs", "nr", "rf", "rt", "v", "n", "m", "rd", "dr", "rank", "attr", "mr", "R", "res", "ru", "b", "f", "lr", "u", "z", "radius", "j", "i", "rec", "k", "c", "w", "out", "t", "s", "p", "re", "rc", "rb", "sr"]}}
{"code": "import java.util.*;\\nimport java.util.Collections;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Your code here!\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int K = sc.nextInt();\\n        int bigger = 0;\\n        \\n        ArrayList<Integer> list = new ArrayList<>();\\n        \\n        if(A < B){\\n            bigger = B;\\n        }else{\\n            bigger = A;\\n        }\\n        for(int i = 1;i <= bigger;i++){\\n            if(A % i == 0 && B % i == 0){\\n                list.add(i);\\n            }\\n        }\\n        Collections.sort(list,Collections.reverseOrder());\\n        System.out.println(list.get(K-1));\\n    }\\n}\\n", "target": "134", "substitutes": {}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint[] m=new int[4];\\n\t\tm[0]=sc.nextInt();\\n\t\tm[1]=sc.nextInt();\\n\t\tm[2]=sc.nextInt();\\n\t\tint work,a;\\n\t\tfor(int j=1;j<=2;j++){\\n\t\t\tfor(int i=j;i>0;i--){\\n\t\t\t\tif(m[i-1]<m[i]){\\n\t\t\t\t\tm[3]=m[i-1];\\n\t\t\t\t\tm[i-1]=m[i];\\n\t\t\t\t\tm[i]=m[3];\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\ta=3;\\n\t\twhile(a<10){\\n\t\t\tint i=2;\\n\t\t\twork=sc.nextInt();\\n\t\t\ta++;\\n\t\t\twhile(((i>=0) && work>m[i])){\\n\t\t\t\t\tm[i+1]=m[i];\\n\t\t\t\t\ti--;\\n\t\t\t}\\n\t\t\tif(i!=2){\\n\t\t\t\tm[i+1]=work;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\t\tSystem.out.println(m[0]+\"\\n\"+m[1] + \"\\n\"+m[2]);\\n\t\t\\n\\n\t}\\n\\n}", "target": "164", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "mp", "sec", "cl", "sys", "system", "sv", "sp", "bc", "cr", "inc", "nl", "ctl", "cle", "sel", "spec", "irc", "sch", "enc", "fc", "sync", "exec", "tc", "ctrl", "scan", "sq", " Sc", "cont", "cs", "g", "ss", "nc", "ok", "sci", "pb", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "m": ["dm", "mask", "mb", "n", "om", "me", "ms", "esm", "f", "mint", "mx", "cm", "c", "wm", "em", "mat", "map", "am", "pm", "l", "met", "app", "mun", "mr", "rm", "tm", "bm", "message", "g", "s", "man", "mac", "mis", "mc", "rem", "mp", "pre", "mos", "km", "item", "mean", "arm", "mut", "mu", "cache", "lem", "sm", "mem", "mate", "mod", "nm", "ma", "p", "re", "mi", "mm", "perm", "v", "msg", "md", "vm", "metadata", "im", "b", "min", "M", "gm", "managed", "mt", "t", "hm", "fm"], "work": ["r", "result", "what", "works", "shift", "gate", "working", "weight", "task", "draw", "align", "ork", "wait", "ch", "word", "rank", "power", "process", "run", "worked", "tx", "act", "pay", "Work", "b", "f", "ack", "job", "hold", "wd", "test", "kick", "flow", "worker", "way", "mk", "age", "k", "help", "join", "max", "link", "w", "WORK", "check", "fr", "p", "handle", "workers", "y", "add", "week", "x", "util"], "a": ["ae", "r", "ca", "d", "next", "ax", "o", "qa", "ta", "n", "aa", "da", "aw", "sa", "ace", "change", "power", "wa", "ak", "ai", "le", "go", "act", "art", "A", "b", "at", "index", "ia", "ack", "count", "an", "la", "ao", "ab", "pa", "area", "g", "ach", "action", "c", "aj", "alpha", "w", "as", "t", "ma", "p", "ac", "y", "au", "ka", "add", "all", "span", "x", "window", "am"], "j": ["q", "jit", "r", "l", "ji", "jj", "o", "jo", "adj", "n", "ij", "v", "jump", "ne", "bs", "ge", " jump", "ja", "im", "ind", "start", "bj", "b", "at", "oj", "job", "z", "bi", "it", "pr", "ie", "uj", "g", "k", "json", "c", "js", "aj", "obj", "jp", "J", "fr", "t", "s", "p", "kj", "y", "jc", " J", "dj", "x", "jl", "next"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "ims", "is", "ic", "e", "ami", "y", "di", "x", "ri", "fi", "l", "chain", "ip", "ji", "o", "id", "ij", "in", "ori", "io", "z", "bi", "it", "inner", "ci", "cli", "ii", "phi", "hi", "jo", "this", "ind", "list", "ia", "status", "pi", "p", "xi", "si", "mi", "I", "gi", "v", "ini", "im", "qi", "index", "ity", "ui", "ie", "uri", "ti", "port", "multi", "t", "info", "iter"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args){\\n    \\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int T = sc.nextInt();\\n    int[]c = new int[n];\\n    int[]t = new int[n];\\n    ArrayList<Integer>ans  = new ArrayList<>();\\n    \\n    for(int i=0; i<n; i++){\\n        c[i] = sc.nextInt();\\n        t[i] = sc.nextInt();\\n}\\n    int cou = 0;\\n    for(int i=0; i<n; i++){\\n    \tif(t[i] <= T) {\\n    \t\tans.add(c[i]);\\n    \t\t\tcou++;\\n    \t}else if(cou == 0) {\\n    \t\tans.add(1001);\\n    \t}\\n    \t}\\n    Collections.sort(ans);\\n    if(cou != 0) {\\n    \tSystem.out.println(ans.get(0));\\n    }else {\\n    \tSystem.out.println(\"TLE\");\\n    }\\n}\\n}", "target": "8", "substitutes": {"sc": ["usc", "lc", "cc", "dec", "esc", "sb", "sec", "co", "cl", "sys", "system", "sh", "ser", "bc", "sv", "sp", "cr", "inc", "sem", "dc", "ck", "ctl", "src", "irc", "sch", "se", "sync", "fc", "tc", "ctrl", "scan", "sq", " Sc", "cs", "sci", "nc", "pb", "syn", "osc", "Sc", "gc", "exp", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "n": ["nu", "num", "r", "name", "NT", "d", "ll", "nn", "l", "number", "len", "N", "o", "ns", "m", "v", "dn", "nan", "ne", "nl", "cn", "ren", "sn", "an", "z", "j", "no", "nb", " N", "pi", "nc", "na", "g", "np", "k", "en", "nm", "e", "w", "ng", "p", "network", "s", "ln", "net", "nt", "x", "names"], "T": ["Z", "I", "TT", "TN", "TG", "F", "E", "TS", "N", "VT", "WT", "CT", "O", "S", "P", "Type", "Q", "V", "M", "W", "TA", "GT", "PT", "TC", "H", "C", "TY", "TH", "Y", "TM", "L", "J", "K", "X", "NT", "B"], "c": ["lc", "cc", "con", "l", "co", "cl", "cr", "bc", "cp", "ce", "ch", "dc", "cn", "cu", "enc", "cache", "fc", "u", "xc", "tc", "ctrl", "cat", "cv", "cd", "C", "cont", "cs", "nc", "cm", "ci", "com", "ct", "p", "ac", "cb", "mc", "pc", "conv", "cf", "config"], "t": ["tif", "pt", "att", "l", "tp", "total", "rt", "o", "ta", "tree", "v", "m", "tr", "tt", "tf", "td", "at", "type", "tc", "j", "it", "tm", "ts", "template", "table", "typ", "txt", "ct", "ot", "p", "te", "dt", "to", "ty", "tu"], "ans": ["acs", "uns", "ents", "ints", "ons", "works", "eps", "ras", "nets", "aus", "aces", "anks", "ums", "anas", "outs", "eds", "ns", "ads", "mos", "ces", "orders", "ians", "ands", "ms", "ates", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "ags", "an", "angs", "ams", "aos", "idents", "ts", "anes", "leans", "lands", "cs", "ations", "orts", "ups", "aps", "vers", "olds", "arms", "ins", "ions", "cons", "aints", "eas", "xs", "rans", "offs", "ars", "ann"], "i": ["set", "q", "ix", "zi", "iu", "base", "ei", "li", "me", "batch", "ai", "ki", "go", "ik", "history", "is", "ic", "y", "oi", "di", "ri", "fi", "chain", "ip", "ji", "point", "o", "id", "ij", "client", "iti", "ori", "io", "sequence", "bi", "it", "g", "ci", "sim", "cli", "iq", "ii", "ex", "phi", "hi", "this", "print", "ni", "ind", "list", "u", "fire", "\u0438", "status", "pi", "my", "xi", "si", "mi", "I", "name", "gi", "ini", "err", "im", "qi", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "iter", "info"], "cou": ["cdon", " cocy", "cmoud", "cov", "acoul", "cmou", "ccu", "coou", "coul", "cooul", " cao", "Coul", "coao", "acou", "acov", "Coud", "Cum", " cum", "clOU", "cloul", "COU", "cmoul", "gcoul", "Cou", "gcocy", "cao", " cOU", "Ccu", "gcou", "cmdon", " coul", "coud", "cocy", "Cao", "clou", " cdon", "cum", " cov", " ccu", "clum", "cOU", "cocu", "gcov", " coud", "Cdon", "acocy"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main {\\n\tpublic static void main (String[] args){\\n\t\tScanner sc =  new Scanner(System.in);\\n\t\tfloat N = sc.nextInt();\\n\t\tint R = (int)Math.ceil(N/2);\\n\t\tSystem.out.println(R);\\n\t}\\n}", "target": "233", "substitutes": {"sc": ["uc", "r", "lc", "acc", "cc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "ser", "cr", "bc", "sv", "sp", "n", "ch", "dc", "sel", "spec", "sch", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "sr", "desc"], "N": ["New", "D", "RN", "TN", "FN", "ND", "NM", "NI", "SN", " n", "NPR", "NP", "NB", "n", "NV", "Ren", "S", "Ni", "NG", "NO", "NS", "NR", "V", "NH", "M", "AN", "GN", "NC", "NA", "Num", "L", "J", "NOR", "CNN", "NN", "NT", "Ns"], "R": ["D", "I", "r", "RAM", "MR", "RE", "RT", "Res", "RI", "Rank", "ROR", "P", "RF", "RM", "T", "RO", "BR", "NR", "M", "SR", "RH", "RS", "RGB", "C", "RR", "RG", "RL", "DR", "RA", "AR", "RES", "GR", "Right", "Range", "K", "ARA", "JR", "COR", "B"]}}
{"code": "public class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO ?????????????????????????????????????????????\\n\t\tjava.util.Scanner sc = new java.util.Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\twhile (true) {\\n\\n\t\t\tchar[] cdata = sc.nextLine().toCharArray();\\n\t\t\tif ( cdata.length==1 && cdata[0]=='0' ) break;\\n\\n\t\t\tint sum =0;\\n\\n\t\t\tint[] idata = new int[cdata.length];\\n\t\t\tfor (int i=0; i < cdata.length; i++) {\\n\t\t\t\tidata[i] = Character.getNumericValue( cdata[i] );\\n\t\t\t\tsum += idata[i];\\n\t\t\t}\\n\\n\t\t\tsb.append(sum + \"\\n\");\\n\\n\t\t}\\n\\n\t\tSystem.out.print(sb);\\n\\n\t}\\n\\n}", "target": "144", "substitutes": {}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.NoSuchElementException;\\npublic class Main {\\n\tpublic static void main(String[] args)throws Exception{\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\t\tString S=next();\\n\t\tint N=S.length();\\n\t\tint one=0,two=0;\\n\t\tfor(int i=0;i<N;i+=2){\\n\t\t\tif(S.charAt(i)=='1')\\n\t\t\t\tone++;\\n\t\t\tif(i+1<N&&S.charAt(i+1)=='0')\\n\t\t\t\tone++;\\n\t\t}\\n\t\tfor(int i=0;i<N;i+=2){\\n\t\t\tif(S.charAt(i)=='0')\\n\t\t\t\ttwo++;\\n\t\t\tif(i+1<N&&S.charAt(i+1)=='1')\\n\t\t\t\ttwo++;\\n\t\t}\\n\t\tSystem.out.println(Math.min(two,one));\\n\t}\\n\tstatic boolean isOK(int index,String key,String[]a){\\n\t\tif (a[index].compareTo(key)>=0) return true;\\n\t    else return false;\\n\t}\\n\tstatic int binary_search(String key,String[] a) {\\n\t    int ng = -1; //\u300cindex = 0\u300d\u304c\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u521d\u671f\u5024\u306f -1\\n\t    int ok = (int)a.length; // \u300cindex = a.size()-1\u300d\u304c\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u521d\u671f\u5024\u306f a.size()\\n\t    while (Math.abs(ok - ng) > 1) {\\n\t        int mid = (ok + ng) / 2;\\n\t        if (isOK(mid,key,a)) ok = mid;\\n\t        else ng = mid;\\n\t    }\\n\t    return ok;\\n\t}\\n\t//FastScanner\\n\tstatic InputStream in = System.in;\\n\tstatic  byte[] buffer = new byte[1024];\\n\tstatic int length = 0, p = 0;\\n\tpublic static boolean hasNextByte () {\\n\t\tif (p < length) return true;\\n\t\telse {\\n\t\t\tp = 0;\\n\t\t\ttry {length = in.read(buffer);}\\n\t\t\tcatch (Exception e) {e.printStackTrace();}\\n\t\t\tif (length == 0) return false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n\tpublic static int readByte () {\\n\t\tif (hasNextByte() == true) return buffer[p++];\\n\t\treturn -1;\\n\t}\\n\tpublic static boolean isPrintable (int n) {return 33<=n&&n<=126;}\\n\tpublic static void skip () {\\n\t\twhile (hasNextByte() && !isPrintable(buffer[p])) p++;\\n\t}\\n\tpublic static boolean hasNext () {skip(); return hasNextByte();}\\n\tpublic static String next () {\\n\t\tif (!hasNext()) throw new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint temp = readByte();\\n\t\twhile (isPrintable(temp)) {\\n\t\t\tsb.appendCodePoint(temp);\\n\t\t\ttemp = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\tpublic static int nextInt () {return Math.toIntExact(nextLong());}\\n\tpublic static int[] nextInts (int n) {\\n\t\tint[] ar = new int[n];\\n\t\tfor (int i=0; i<n; i++) ar[i] = nextInt();\\n\t\treturn ar;\\n\t}\\n\tpublic static long nextLong () {\\n\t\tif (!hasNext()) throw new NoSuchElementException();\\n\t\tboolean minus = false;\\n\t\tint temp = readByte();\\n\t\tif (temp == '-') {\\n\t\t\tminus = true;\\n\t\t\ttemp = readByte();\\n\t\t}\\n\t\tif (temp<'0' || '9'<temp) throw new NumberFormatException();\\n\t\tlong n = 0;\\n\t\twhile (isPrintable(temp)) {\\n\t\t\tif ('0'<=temp && temp<='9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += temp - '0';\\n\t\t\t}\\n\t\t\ttemp = readByte();\\n\t\t}\\n\t\treturn minus? -n : n;\\n\t}\\n}\\n\\n", "target": "146", "substitutes": {"out": ["println", "r", "result", " Out", "outer", "writer", "error", "o", "sys", "system", "log", "tmp", "n", "m", "v", "err", "in", "print", "OUT", "os", "file", "report", "res", "str", "at", "list", "io", "j", "aos", "Out", "null", "status", "inner", "screen", "obj", "output", "display", "txt", "conf", "ins", "w", "t", "s", "er", "info", "ln", "cfg", "nt", "ch", "outs"], "S": ["Screen", "I", "CS", "STR", "CSS", "SI", "RAW", "SN", "TS", "SM", "SH", "JS", "SQL", "G", "SA", "SP", "P", "SE", "SAM", "SEC", "LESS", "T", "JSON", "PS", "SU", "R", "SO", "NS", "Q", "SF", "V", "M", "Si", "SOURCE", "SR", "SL", "RS", "BS", "NRS", "H", "C", "Source", "SSL", "Y", "L", "SS", "GS", "J", "SER", "s", "DS", "VS", "SB", "ST", "B"], "N": ["D", "I", "Z", "TN", "F", "FN", "ND", "NM", "SN", "ALL", "NP", "NB", "n", "O", "WH", "P", "NG", "T", "NL", "NO", "R", "NS", "NF", "NR", "V", "INT", "ANY", "M", "NH", "W", "AN", "GN", "H", "NC", "C", "Sn", "Number", "UN", "NN", "VAL", "NA", "L", "J", "K", "NOTE", "NI", "NT", "Ns"], "one": ["unity", "ison", "wo", "version", "number", "some", "zero", "so", "ven", "n", "nine", "ce", "me", "phone", "son", "three", " nine", "pe", "many", " single", " zero", "ge", "sense", "ome", " once", "any", "less", "hello", "back", "rise", "single", " One", "five", "ONE", "ware", "core", "uno", "alone", "only", "One", "ones", "you", "quick", "four", "once", " none", " three", "none", "often", "other", "multi", "seven", "few", "given", "ide", "plus", "ox", "first"], "two": ["another", "foundation", "there", "generic", "to", "beta", "secondary", "zero", "billion", "nine", "Two", "many", "common", "lo", "floor", "division", "multiple", "ffe", "tie", "less", "even", "minimum", "note", "second", "se", "money", "five", "cue", "email", "cone", "alone", "they", "zone", "four", "both", "sex", "none", "ten", "danger", "other", "diff", "multi", "binary", "be", "te", "goal", "net", "seven", "eight", "six", "video", "non"], "i": ["q", "I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "iy", "chain", "ip", "ji", "li", "o", "id", "m", "me", "ini", "err", "batch", "ski", "ai", "ki", "iii", "im", "qi", "ori", "us", "ia", "init", "\u0438", "io", "j", "bi", "it", "slice", "ity", "ui", "ie", "uri", "is", "pi", "g", "eu", "ti", "ic", "ci", "c", "sim", "cli", "PI", "multi", "iter", "p", "ami", "y", "oi", "xi", "ii", "si", "di", "x", "mi"], "index": ["set", "num", "seek", "ix", "name", "loc", "row", "position", "number", "address", "total", "zero", "id", "prefix", "exit", "context", "level", "ind", "axis", "count", "code", "list", "match", "condition", "range", "slice", "j", "loop", "si", "find", "status", "length", "open", "max", "info", "iter", "size", "Index", "initial", "x"], "key": ["set", "q", "name", "Key", "base", "entry", "o", "prefix", "value", "id", "v", "m", "sa", "item", "ey", "sum", "val", "str", "code", "list", "f", "type", "match", "test", "j", "string", "primary", "keys", "data", "k", "obj", "my", "link", "ary", "e", "info", "char", "p", "y", "x", "KEY", "hash"], "a": ["ata", "ca", "att", "array", "abs", "oa", "h", "o", "ta", "n", "m", "aa", "da", "v", "sa", "parts", "wa", "ya", "buf", "A", "b", "an", "la", "ga", "ao", "j", "aos", "area", "ba", "aaa", "na", "c", "fa", "e", "w", "ma", "t", "as", "changes", "p", "ac", "s", "y", "all", "va", "x", "am"], "ng": ["set", "ex", "ong", "prime", "ns", "rand", "rew", "read", "ne", "NG", "le", "gt", "resh", " indexes", "ring", " seed", "rest", "lock", "mix", "link", "nd", " resp", "stable", "eng", "more", "amp", "map"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner scan = new Scanner(System.in);\\n        String s = scan.next();\\n        int n = s.length();\\n        System.out.println(isPal(s) && isPal(s.substring(0, (n - 1) / 2)) && isPal(s.substring((n + 3) / 2 - 1)) ? \"Yes\" : \"No\");\\n        scan.close();\\n    }\\n    \\n    public static boolean isPal(String s){\\n        for(int i = 0; i < s.length(); i++){\\n            if(s.charAt(i) != s.charAt(s.length() - i - 1)) return false;\\n        }\\n        return true;\\n    }\\n}\\n", "target": "123", "substitutes": {"scan": ["set", "seek", "spin", "skip", "sql", "row", "reach", "parse", "gate", "san", "watch", "ser", "sys", "Scan", "system", " Scan", "sv", "sp", "m", "sin", "read", "in", "vis", "stat", "nl", "sum", "can", "get", "report", "run", "scale", "se", "pass", "sync", "clean", "search", "match", "scroll", "an", "sc", "find", "sky", "ner", "screen", "syn", "out", "check", "p", "proc", "query", "ann"], "s": ["gs", "r", "sql", "sf", "sb", "sg", "l", "rs", "sol", "abs", "h", "sys", "ns", "sv", "sp", "strings", "simple", "source", "ws", "bs", "parts", "S", "os", "its", "ms", "state", "less", "sw", "ats", "str", "south", "se", "b", "sl", "ls", "sort", "ims", "z", "j", "string", "sts", "is", "ts", "sq", "cs", "g", "ss", "c", "js", "ds", "gets", "out", "sam", "t", "p", "say", "qs", "y", "ps", "xs", "stats", "conv", "hs", "st"], "n": ["num", "nu", "d", "ll", "nn", "l", "number", "un", "len", "N", "h", "gn", "ns", "o", "m", "v", "dn", "ne", "nl", "cn", "sn", "b", "on", "z", "j", "no", "nb", "g", "nc", "na", "np", "en", "c", "nm", "ot", "out", "t", "ng", "p", "ln", "net", "all", "nt"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ogi", "ei", "chain", "ji", "li", "m", "me", "ini", "err", "uu", "ai", "ni", "ki", "im", "qi", "ori", "us", "init", "u", "\u0438", "io", "ims", "z", "j", "bi", "it", "ui", "is", "uri", "pi", "k", "ti", "ic", "ci", "c", "cli", "multi", "p", "gu", "ami", "y", "xi", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t    Scanner sc = new Scanner(System.in);\\n\t\tString[] x = sc.nextLine().split(\" \");\\n\t\tint s,g,d;\\n\t\tint answer = 0;\\n\t\td = Integer.parseInt(x[1]);\\n\t\tfor (int i =0;i < Integer.parseInt(x[0]);i++) {\\n\t\t\tString[] y = sc.nextLine().split(\" \");\\n\t\t\ts = Integer.parseInt(y[0]);\\n\t\t\tg = Integer.parseInt(y[1]);\\n\t\t\tif (Math.sqrt(Math.pow(s,2) + Math.pow(g,2)) <= d) {\\n\t\t\t\tanswer += 1;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.print(answer);\\n\t}\\n\\n}", "target": "42", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "sv", "sp", "bc", "cr", "inc", "dc", "ck", "ctl", "capt", "sel", "irc", "sch", "sw", "sync", "fc", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "screen", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "x": ["ix", "ex", "wx", "ax", "att", "pan", "l", "xml", "pe", "xf", "lat", "xy", "tx", "xe", "xx", "px", "xc", "ml", "hex", "xes", "dx", "lex", "xxxx", "mx", "xt", "X", "rx", "check", "ux", "nex", "re", "xs", "xi", "xp", "fx", "ox"], "s": ["gs", "sf", "sb", "l", "rs", "ns", "so", "sv", "sh", "sp", "sd", "sa", "su", "ans", "S", "os", "ms", "its", "ids", "sn", "ys", "sw", "ats", "se", "sl", "fs", "ls", "us", "es", "ims", "sts", "is", "ts", "cs", "ss", "js", "ins", "ds", "sim", "sam", "xs", "ps", "si", "sr", "ars", "st"], "g": ["gs", "ug", "reg", "rg", "group", "gi", "erg", "gd", "tg", "eg", "gy", "gb", "msg", "fg", "mg", "G", "pg", "gl", "gg", "go", "ger", "gt", "org", "gen", "ga", "gam", "gm", "bg", "yg", "ig", "gc", "gu", "gr", "gp"], "d": ["dat", "D", "pd", "dh", "q", "dim", "df", "l", "dd", "fd", "red", "dos", "gd", "h", "del", "draw", "n", "m", "da", "dr", "sd", "dk", "db", "v", "dn", "du", "dig", "b", "f", "z", "j", "dev", "dra", "days", "div", "data", "c", "ds", "debug", "e", "t", "p", "nd", "dir", "dL", "dt", "di"], "answer": ["valid", "response", "onse", "again", "ask", "result", "review", "array", "version", "swers", "aq", "error", "entry", "draw", "imate", "value", "exit", "uration", "option", "distance", "energy", "vote", "yes", "interpret", "wer", " answered", "search", "echo", "install", "offer", "sequence", "delay", "poll", "equ", "accept", "ve", "take", "answered", "status", "approximately", "remember", "open", "record", "reply", "question", "request", "advert", "eni", "Answer", "blank", "say", "flag", "notice", "query", "archive", "window", "support"], "i": ["q", "I", "ix", "phi", "hi", "zi", "iu", "ip", "li", "id", "asi", "n", "m", "ini", "ai", "ki", "im", "ind", "ori", "index", "us", "init", "\u0438", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "multi", "t", "iq", "p", "ii", "xi", "si", "di", "mi"], "y": ["ye", "pt", "sy", "ym", "iy", "sys", "yu", "py", "ky", "gy", "zy", "hy", "by", "ay", "ey", "uy", "cy", "fy", "xy", "ys", "ya", "yer", "ry", "yy", "ies", "yt", "vy", "sky", "axy", "oy", "et", "my", "yi", "yr", "er", "ny", "yd", "yn", "ty", "ery", "yo"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint D = scanner.nextInt();\\n\t\tint N = scanner.nextInt();\\n\t\tint x = N + 1;\\n\\n\t\t//N\u304c100\u306e\u3068\u304d\u3068\u305d\u308c\u4ee5\u5916\u3067\u5834\u5408\u5206\u3051\\n\t\tif (N != 100) {\\n\t\t\tSystem.out.println(N * determine(D));\\n\t\t} else {\\n\t\t\tSystem.out.println(x * determine(D));\\n\t\t}\\n\t}\\n\\n\t//D\u306e\u5024\u306b\u3088\u3063\u3066\u5834\u5408\u5206\u3051\\n\tpublic static int determine(int d) {\\n\t\tint result;\\n\t\tif (d == 0) {\\n\t\t\tresult = 1;\\n\t\t} else if (d == 1) {\\n\t\t\tresult = 100;\\n\t\t} else {\\n\t\t\tresult = 100 * 100;\\n\t\t}\\n\t\treturn result;\\n\t}\\n}", "target": "245", "substitutes": {"scanner": ["canener", " scanener", "caninner", "Scanter", "scanener", "Scaninner", "Scanener", "Scaner", "scaninner", "scanter", "canter", " scanter", "Scanner", " scaninner", "canner", "scaner", " scaner", "caner"], "D": ["Z", "I", "DD", "F", "d", "E", "DB", "DI", "O", "G", "S", "DC", "P", "FD", "T", "DM", "R", "Q", "V", "M", "C", "L", "K", "X", "DS", "B", "DP"], "N": ["Z", "I", "Node", "F", "FN", "E", "ND", "NM", "NI", "NP", "NE", "NB", "n", "O", "G", "S", "Ni", "P", "T", "R", "NS", "Q", "NR", "V", "M", "NH", "H", "NC", "C", "NA", "Num", "L", "K", "J", "X", "NN", "NT", "Ns"], "x": ["num", "ex", "name", "d", "l", "h", "id", "v", "n", "m", "a", "b", "index", "f", "z", "j", "XX", "i", "c", "step", "max", "e", "w", "X", "t", "p", "y", "xs"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n\\n        final int N = Integer.parseInt(sc.next());\\n        String[] ss = new String[N];\\n        for (int i = 0; i < N; i++) {\\n            ss[i] = sc.next();\\n        }\\n        String ans = \"Yes\";\\n        \\n        for (int i = 0; i < N; i++) {\\n            for (int j = i + 1; j < N; j++) {\\n                if (ss[i].equals(ss[j])) {\\n                    ans = \"No\";\\n                    break;\\n                }    \\n            }\\n        }\\n        for (int i = 0; i < N - 1; i++) {\\n            char last = ss[i].charAt(ss[i].length() - 1);\\n            char first = ss[i+1].charAt(0);\\n            if (last != first) {\\n                ans = \"No\";\\n                break;\\n            } \\n        }\\n        \\n        out.println(ans);\\n        \\n        out.flush();\\n    }\\n}", "target": "70", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "cr", "bc", "sv", "sp", "dc", "ctl", "cle", "irc", "sch", "sw", "sync", "fc", "tc", "ctrl", "scan", "sq", " Sc", "cs", "sci", "nc", "pb", "c", "osc", "Sc", "gc", "cons", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "out": ["ou", "r", "ex", "outer", "flush", "con", "writer", "error", "ver", "co", "o", "sys", "log", "put", "n", "v", "exit", "ch", "err", "in", "print", "os", "OUT", "sum", "file", "write", "client", "or", "gt", "at", "conv", "list", "io", "it", "aos", "Out", "cmd", "g", "screen", "en", "c", "output", "w", "ot", "t", "info", "x", "crit", "up", "net", "to", "nt", "res", "outs"], "N": ["D", "I", "Z", "Node", "TN", "F", "FN", "ND", "NM", "SN", "ALL", "NE", "NP", "NB", "n", "Size", "O", "S", "NG", "P", "REM", "T", "NO", "NL", "R", "NS", "NR", "V", "INT", "M", "NH", "NOW", "AN", "Len", "GN", "H", "NC", "Sn", "C", "Number", "UN", "NN", "Num", "NA", "L", "K", "J", "NOR", "Net", "Length", "NI", "NT", "Ns"], "ss": ["ase", "ests", "rs", "sol", "oss", "sys", "ns", "ress", "sv", "mos", "styles", "sd", "ws", "bs", "atts", "ess", "sels", "mes", "ms", "pps", "sn", "ys", "pse", "ats", "ems", "sw", "se", "less", "tis", "xx", "fs", "amps", "ls", "ssl", "\u00df", "ims", "sts", "vs", "iss", "ts", "sq", "news", "est", "cs", "rss", "sis", "ssh", "js", "ass", "SS", "sex", "services", "s", "ses", "ites", "hess", "ps", "css", "si", "pres"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "iii", "ik", "ims", "is", "you", "eu", "ic", "ami", "y", "di", "ri", "l", "chain", "ip", "ji", "point", "id", "ij", "source", "in", "ret", "client", "iti", "ori", "ist", "io", "bi", "it", "g", "inner", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "ion", "this", "print", "ind", "ia", "\u0438", "fire", "status", "pi", "my", "iri", "xi", "si", "mi", "I", "gi", "entry", "m", "ini", "err", "ski", "im", "qi", "init", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "info", "iter", "to"], "ans": [" orphans", " means", " Ans", "uns", "ents", "eps", "ons", "ras", "aus", "rs", "anks", "urs", "ucks", "oss", "eds", "ns", "ads", "ks", "els", "ends", "orders", "forms", "os", "ms", "arts", "ANS", "amps", "ats", "ens", "ants", "ems", "an", "ows", "ols", "angs", "ann", "ays", "aos", "mas", "ams", "ts", "leans", " scans", "cs", "orts", "utters", " beans", "ins", "aps", "arms", "vers", "olds", "s", "posts", "ots", "lets", "rans", "ports", "offs", "ars", "ros"], "j": ["br", "q", "jac", "ix", "pt", "key", "el", "ev", "l", "ji", "jj", "h", "jo", "n", "ij", "v", "m", "jump", "ja", "bj", "at", "b", "note", "oj", "job", "f", "on", "z", "bi", "it", "pr", "uj", "g", "json", "k", "js", "aj", "obj", "jp", "ph", "J", "fr", "t", "nd", "other", "kj", "y", "jc", "dj", "je", "x", "jl"], "last": ["stop", "end", "empty", "flush", "st", "master", "after", "best", "latest", "tail", "cast", "show", "close", "same", "any", "worst", "prev", "las", "left", "bottom", "full", "est", "ast", "good", "old", "max", "slave", "reverse", "nd", "stable", "parent", "Last", "all", "second", "closure", "next"], "first": ["empty", "star", "next", "before", "master", "current", "part", "visible", "latest", "prefix", "default", "top", "front", "same", "small", "any", "start", "art", "back", "str", "index", "then", "force", "left", "prev", "must", "full", "primary", "only", "First", "head", "local", "middle", "char", "stable", "second", "initial", "st"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint[] abc= {sc.nextInt(),sc.nextInt(),sc.nextInt()};\\n\t\tint k=sc.nextInt();\\n\t\tArrays.sort(abc);\\n\t\tfor(int i=0; i<k;i++) abc[2] *= 2;\\n\t\tSystem.out.println(abc[0]+abc[1]+abc[2]);\\n\t}\\n}\\n", "target": "201", "substitutes": {"sc": ["usc", "uc", "lc", "acc", "cc", "cer", "anc", "esc", "sb", "sec", "qu", "cl", "sys", "sh", "cr", "bc", "sp", "dc", "ec", "ctl", "cu", "sch", "enc", "sync", "tch", "fc", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "c", "osc", "cmp", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch"], "abc": ["arc", "toc", "acs", "acc", "anc", "oc", "ob", "frac", "abs", "adj", "obs", "ABC", "lab", "gb", "app", "unc", "dc", "lam", "hab", "alph", "stab", "bs", "ec", "roc", "nz", "xy", "amps", "cache", "cca", "hz", "rox", "fc", "eb", "xc", "fb", "ctrl", "ib", "chest", "ab", " ab", "auc", "apa", "news", "abi", "nc", "pb", "aaa", "aka", "ops", "abin", "good", "conf", "tab", "alpha", "icc", "obb", "etc", "abet", "ac", "cb", "au", "exc", "expr", "aux", "rb", "rc", "fee", "ox", "abb"], "k": ["q", "ke", "ikk", "kl", "ks", "kh", "n", "kr", "m", "dk", "km", "tk", "ck", "ko", "kn", "unk", "ak", "kok", "ki", "ik", "kk", "uk", "kick", "mk", "ok", "aka", "ek", "ku", "sk", "K", "kj", "ka", "kw", "kid"], "i": ["I", "ix", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "li", "asi", "n", "m", "ini", "in", "ai", "ms", "ki", "ind", "qi", "a", "us", "init", "u", "io", "j", "bi", "it", "ui", "is", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "iter", "gu", "y", "ii", "xi", "si", "span", "di", "x", "mi"]}}
{"code": "/*\\n * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_3_A&lang=jp\\n */\\nimport java.util.*;\\n\\npublic class Main {\\n\tvoid run() {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint[] stack = new int[200];\\n\t\tint sp = 0;\\n\t\twhile (scan.hasNext()) {\\n\t\t\tString tok = scan.next();\\n\t\t\tif (tok.equals(\"+\")) {\\n\t\t\t\tint b = stack[--sp];\\n\t\t\t\tint a = stack[--sp];\\n\t\t\t\tstack[sp++] = a + b;\\n\t\t\t} else if (tok.equals(\"-\")) {\\n\t\t\t\tint b = stack[--sp];\\n\t\t\t\tint a = stack[--sp];\\n\t\t\t\tstack[sp++] = a - b;\\n\t\t\t} else if (tok.equals(\"*\")) {\\n\t\t\t\tint b = stack[--sp];\\n\t\t\t\tint a = stack[--sp];\\n\t\t\t\tstack[sp++] = a * b;\\n\t\t\t} else {\\n\t\t\t\tint x = Integer.parseInt(tok);\\n\t\t\t\tstack[sp++] = x;\\n\t\t\t}\\n\t\t\t//System.out.println(sp);\\n\t\t}\\n\t\tSystem.out.println(stack[0]);\\n\t}\\n\tpublic static void main(String[] args) {\\n\t\tnew Main().run();\\n\t}\\n}\\n\\n", "target": "114", "substitutes": {"scan": ["set", "seek", "r", "sql", "skip", "nn", "reach", "parse", "gate", "san", "watch", "ser", "sys", "Scan", "system", "connect", "sv", "v", "n", "sin", "read", "in", "show", "can", "report", "run", "scale", "auto", "se", "gen", "sync", "clean", "search", "send", "scroll", "an", "io", "range", "pass", "sc", "find", "ner", "ok", "syn", "check", "info", "sur", "re", "query", "ann"], "stack": ["pop", "addr", "stage", "st", "runtime", "track", "fail", "array", "row", "parse", "stick", "queue", "reported", "chain", "var", "frac", "layer", "tree", "zero", "console", "app", "batch", "pins", "top", "level", "via", "push", "print", "where", "dict", "thread", "cache", "scale", "back", "alt", "view", "list", "ack", "load", "index", "buffer", "acks", "collection", "history", "slice", "frame", "space", "trace", "loop", "stream", "ops", "store", "rel", "storage", "pool", "exp", "local", "check", "scope", "we", "mount", "handle", "upper", "pack", "proc", "frames", "depth", "Stack", "window"], "sp": ["br", "block", "set", "ix", "snap", "loc", "sil", "bsp", "tip", "cap", "nl", "nick", "sw", "spl", "space", "prov", "osp", "store", "syn", "sk", "pool", "y", "em", "net", "pc", "st", "point", "now", "sh", "ipp", "conn", "SP", "ret", "pp", "start", "sam", "ng", "exp", "scope", "ps", "rem", "expr", "pt", "strong", "tp", "tmp", "rep", "serv", "ind", "sm", "req", "sent", "esp", "pers", "sc", "ptr", "status", "rel", "jp", "p", "dep", "si", "policy", "gp", "pl", "ep", "lp", "jump", "Sp", "msg", "pol", "bp", "im", "index", "isp", "j", "par", "yp", "vol", "np", "obj", "ap", "env"], "tok": ["latok", "toc", "stop", "tot", " toz", "stot", "attak", "qtapp", " toko", "treat", "wtok", "intreat", " tod", "intapp", "Toc", "tenok", "stok", "attoz", " tori", " tk", "tk", "tapp", "latori", "tak", "top", "tilde", " took", "ptok", "ptop", "wtoko", "attilde", " treat", " tak", "latoko", "wtook", "ptot", " tilde", " top", "toko", "tenoz", "intod", "Tod", "Took", "qtook", " toc", "tenak", "ptk", "latook", " tapp", "intok", "attok", "qtok", "intook", " tot", "wtori", "intoc", "toz", "took", "tori", "tod", "stk", "tenilde", "Tok", "qtreat"], "b": ["br", "r", "d", "xb", "wb", "sb", "ob", "l", "mb", "base", " eb", "h", "bar", "bc", "v", "gb", "bh", "db", "m", "n", "able", "by", "bl", "lib", "or", "back", "eb", "f", "fb", "z", "j", "bi", "ib", "bound", "nb", "url", "ab", "i", "g", "ba", "bt", "c", "obj", "body", "e", "w", "t", "p", "bb", "cb", "be", "y", "rb", "ch", "B"], "a": ["ae", "ata", "r", "ca", "acc", "ee", "ar", "oa", "o", "h", "ta", "v", "aa", "da", "app", "sta", "sa", "ama", "wa", "ua", "ai", "isa", "A", "f", "ia", "an", "la", "ga", "ao", "xa", "z", "ed", "ab", "pa", "ea", "apa", "area", "i", "cha", "ba", "aaa", "na", "aka", "c", "aj", "fa", "ada", "e", "alpha", "ma", "t", "as", "p", "ac", "parent", "ana", "au", "aux", "to", "va", "am"], "x": ["ex", "wx", "xb", "ax", "ox", "v", "change", "pair", "xf", "ai", "xy", "tx", "inx", "xe", "xx", "px", "xc", "an", "z", "xa", "ext", "dx", "i", " cx", "mx", "xt", "ci", "xxx", "xd", "w", " xx", "X", "check", "exp", "rx", "ux", "y", "xi", "xs", "xp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint A[] = new int[N];\\n\t\tfor(int i=0;i<N;i++){\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\tselectionSort(A,N);\\n\t}\\n\tpublic static void selectionSort(int[] A,int N){\\n\t\tint count=0;\\n\t\tfor(int i=0;i<N;i++){\\n\t\t\tint minj=i;\\n\t\t\tfor(int j=i;j<N;j++){\\n\t\t\t\tif(A[j]<A[minj])minj=j;\\n\t\t\t}\\n\t\t\tif(i!=minj){\\n\t\t\t\tint c = A[i];\\n\t\t\t\tA[i] = A[minj];\\n\t\t\t\tA[minj] = c;\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor(int i=0;i<N;i++){\\n\t\t\tSystem.out.print(A[i]);\\n\t\t\tif(i!=N-1)System.out.print(\" \");\\n\t\t}\\n\t\tSystem.out.printf(\"\\n%d\\n\",count);\\n\t}\\n}\\n", "target": "199", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "bc", "sv", "sp", "nl", "ctl", "sel", "sch", "se", "sync", "fc", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "pb", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch"], "N": ["D", "I", "Z", "TN", "FN", "ND", "NM", "SN", "NP", "ALL", "NE", "NB", "n", "NV", "Size", "No", "G", "S", "Ni", "NG", "P", "OUT", "NO", "NL", "T", "R", "Count", "NS", "Q", "NR", "V", "ANY", "NH", "M", "AN", "Len", "GN", "NC", "C", "Sn", "Number", "UN", "NN", "Num", "NA", "L", "J", "K", "NOR", "Net", "NOTE", "CN", "Length", "NAT", "NI", "NT", "B", "Ns"], "A": ["D", "AA", "I", "RAM", "Array", "App", "MA", "AU", "E", "Alpha", "CA", "ARC", "Action", "WA", "AE", "AC", "HA", "The", "All", "Av", "At", "As", "SA", "G", "S", "P", "Ar", "And", "T", "IA", "ATA", "a", "Address", "GA", "LA", "JA", "V", "M", "API", "What", "AV", "ACC", "AL", "H", "AP", "C", "AM", "U", "AB", "An", "Cache", "NA", "Y", "L", "AR", "K", "EA", "Answer", "X", "BA", "mA", "AF", "ACT", "B", "AT"], "i": ["q", "ix", "zi", "iu", "ei", "li", "n", "me", "batch", "ai", "ki", "iii", "f", "ims", "is", "ic", "e", "ami", "y", "di", "x", "ri", "fi", "l", "chain", "ip", "ji", "point", "o", "id", "ij", "in", "client", "iti", "ori", "io", "bi", "it", "um", "g", "inner", "ci", "sim", "cli", "s", "iq", "ii", "phi", "hi", "php", "progress", "dr", "this", "ind", "ia", "u", "\u0438", "ir", "status", "pi", "p", "iri", "xi", "si", "mi", "I", "name", "gi", "iy", "entry", "v", "m", "ini", "im", "qi", "index", "us", "init", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "t", "info", "iter"], "count": ["set", "num", "ount", "ctr", "result", "coll", "frequency", "found", "number", "cond", "total", "n", "call", "sum", "report", "state", "Count", "cache", "index", "list", "test", "z", "trace", "find", "core", "nb", "cd", "cont", "length", "ct", "counter", "check", "t", "add", "flag", "size", "nt"], "minj": ["minsj", "onlyj", "sumja", "sumj", "minimumjs", "mini", "Minaj", "minej", "smallv", "mineJ", "smalljj", "minimumi", "sumi", "minsji", "lowerjs", "minejj", "relja", "tenj", " minaj", "relj", "munJ", "tenja", "smalljs", "loweri", "onlyji", "minv", "munji", "smalli", "lowerj", "minJ", "MinJ", "minjj", "minji", "munj", "smallerr", "minaj", "minerr", "minimumji", "Minj", "onlyja", "munv", "smallJ", "Mini", "minimumaj", "tenji", " minjj", "relji", " minerr", "teni", "smallj", "minsjs", " mini", "minjs", " minv", "minimumj", "minsja", " minji", "mineerr", "reljs", " minJ", "minja", "smallji", "minimumja", "lowerji", "onlyjs", "sumji", "minimumJ"], "j": ["br", "q", "ix", "jit", "pt", "ax", "l", "ji", "jj", "o", "jo", "v", "ij", "m", "tr", "err", "jump", "by", "ion", "ju", "ja", "ind", "bj", "b", "oj", "job", "f", "z", "it", "zone", "uj", "g", "k", "json", "obj", "aj", "js", "jp", "ph", "J", "fr", "e", "other", "s", "nd", "kj", "parent", "y", "jc", "dj", "je", "x", "jl"], "c": ["uc", "lc", "ca", "cc", "con", "l", "category", "cr", "ce", "m", "cp", "unc", "v", "dc", "cn", "cu", "cache", "b", "fc", "f", "tc", "cat", "cd", "C", "cs", "g", "k", "cm", "ci", "ct", "gc", "t", "x", "s", "ac", "cb", "mc", "cf"]}}
{"code": "/**\\n\\n\u592a\u90ce\u304c\u82b1\u5b50\u3068\u4e00\u7dd2\u306b\u30c8\u30e9\u30f3\u30d7\u904a\u3073\u3092\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u3053\u308d\u300152\u679a\u3042\u308b\u306f\u305a\u306e\u30ab\u30fc\u30c9\u304c n \u679a\u306e\u30ab\u30fc\u30c9\u3057\u304b\u624b\u5143\u306b\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u3089\u306e n \u679a\u306e\u30ab\u30fc\u30c9\u3092\u5165\u529b\u3068\u3057\u3066\u3001\u8db3\u308a\u306a\u3044\u30ab\u30fc\u30c9\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u4e0b\u3055\u3044\u3002\\n\\n\u592a\u90ce\u304c\u6700\u521d\u306b\u6301\u3063\u3066\u3044\u305f\u30c8\u30e9\u30f3\u30d7\u306f\u30b8\u30e7\u30fc\u30ab\u30fc\u3092\u9664\u304f52\u679a\u306e\u30ab\u30fc\u30c9\u3067\u3059\u3002\\n\\n52\u679a\u306e\u30ab\u30fc\u30c9\u306f\u3001\u30b9\u30da\u30fc\u30c9\u3001\u30cf\u30fc\u30c8\u3001\u30af\u30e9\u30d6\u3001\u30c0\u30a4\u30e4\u306e\uff14\u3064\u306e\u7d75\u67c4\u306b\u5206\u304b\u308c\u3066\u304a\u308a\u3001\u5404\u7d75\u67c4\u306b\u306f13\u306e\u30e9\u30f3\u30af\u304c\u3042\u308a\u307e\u3059\u3002\\n\\n  */\\n//S,\u30b9\u30da\u30fc\u30c9\u3001H,\u30cf\u30fc\u30c8\u3001C,\u30af\u30e9\u30d6\u3001D,\u30c0\u30a4\u30e4\\n/*sucanner\u30af\u30e9\u30b9\u4f7f\u3046\u305f\u3081\u306b\u30a4\u30f3\u30dd\u30fc\u30c8*/\\nimport java.util.Scanner;\\n\\nclass Main {\\n\t// \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\\n\tpublic static void main(String[] args) {\\n\t\t// \u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u751f\u6210\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u73fe\u5728\u624b\u5143\u306b\u3042\u308b\u679a\u6570\u3092\u53d7\u3051\u53d6\u308b\\n\t\tint intKazu = sc.nextInt();\\n\t\t// \u30ab\u30fc\u30c9\u5168\uff15\uff12\u679a\u306e\u914d\u5217\u3092\u3064\u304f\u308b\\n\t\tint card[][] = new int[4][13];\\n\t\t// \u30ab\u30fc\u30c9\u306e\u7d75\u9762\u3068\u6570\u5b57\u3092\u53d7\u3051\u53d6\u308b\u5909\u6570\u3092\u5ba3\u8a00\\n\t\tString strEzura = \"\";\\n\t\tint intSuuji = 0;\\n\\n\t\t// \u624b\u5143\u306b\u3042\u308b\u679a\u6570\u306e\u6570\u3060\u3051\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\\n\t\tfor (int i = 0; i < intKazu; i++) {\\n\t\t\t// \u7d75\u9762\u3001\u6570\u5b57\u3092\u3046\u3051\u3068\u308b\\n\t\t\tstrEzura = sc.next();\\n\t\t\tintSuuji = sc.nextInt();\\n\t\t\t// \u53d7\u3051\u53d6\u3063\u305f\u7d75\u9762\u3001\u6570\u5b57\u306e\u914d\u5217\u306b\uff11\u3092\u5165\u529b\u3059\u308b\u3002\\n\t\t\t// equals : 2\u3064\u306e\u5909\u6570\u304c\u6301\u3063\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u540c\u4e00\u304b\u5224\u65ad\u3059\u308b\u30e1\u30bd\u30c3\u30c9\\n\t\t\tif (strEzura.equals(\"S\")) {\\n\t\t\t\tcard[0][intSuuji - 1] = 1;\\n\t\t\t} else if (strEzura.equals(\"H\")) {\\n\t\t\t\tcard[1][intSuuji - 1] = 1;\\n\t\t\t} else if (strEzura.equals(\"C\")) {\\n\t\t\t\tcard[2][intSuuji - 1] = 1;\\n\t\t\t} else if (strEzura.equals(\"D\")) {\\n\t\t\t\tcard[3][intSuuji - 1] = 1;\\n\t\t\t}\\n\t\t}\\n\\n\t\t//\u51e6\u7406\u3092\u7d75\u9762\u306e\u6570\uff14\u3001\u30ab\u30fc\u30c9\u306e\u6570\u5b57\uff11\uff13\u56de\u7e70\u308a\u8fd4\u3059\\n\t\tfor (int i = 0; i < 4; i++) {\\n\t\t\tfor (int j = 0; j < 13; j++) {\\n\t\t\t\t//\u914d\u5217\u306b\u5024\u304c\u5165\u3063\u3066\u306a\u3044\u5834\u5408\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\\n\t\t\t\tif (card[i][j] == 0){\\n\t\t\t\t\t//\u7d75\u9762\u306e\u6570\u5b57\u304c0,1,2,3\u3044\u305a\u308c\u304b\u306e\u3068\u304d\u306b\u8868\u793a\u3059\u308b\\n\t\t\t\t\t//\u6570\u5b57\u306e\u305a\u308c\u3092\u8abf\u6574\u3059\u308b\u305f\u3081\uff4a\u306b\uff0b\uff11\u3057\u3066\u8868\u793a\\n\t\t\t\t\tif(i == 0){\\n\t\t\t\t\t\tSystem.out.println(\"S \" + (j + 1));\\n\t\t\t\t\t}else if ( i == 1){\\n\t\t\t\t\t\tSystem.out.println(\"H \" + (j + 1 ));\\n\t\t\t\t\t}else if ( i == 2) {\\n\t\t\t\t\t\tSystem.out.println(\"C \" + (j + 1 ));\\n\t\t\t\t\t}else if ( i == 3) {\\n\t\t\t\t\t\tSystem.out.println(\"D \" + (j + 1 ));\\n\t\t\t\t\t}\\n\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "189", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n    static class FastReader\\n    {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader()\\n        {\\n            br = new BufferedReader(new\\n                    InputStreamReader(System.in));\\n        }\\n\\n        String next()\\n        {\\n            while (st == null || !st.hasMoreElements())\\n            {\\n                try\\n                {\\n                    st = new StringTokenizer(br.readLine());\\n                }\\n                catch (IOException e)\\n                {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt()\\n        {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong()\\n        {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble()\\n        {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine()\\n        {\\n            String str = \"\";\\n            try\\n            {\\n                str = br.readLine();\\n            }\\n            catch (IOException e)\\n            {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        int n = sc.nextInt();\\n        double res = 0;\\n        for(int i = 0 ;i<n;i++)\\n        {\\n            res += 1/ (double)sc.nextInt();\\n        }\\n        System.out.println(1/res);\\n\\n    }\\n}", "target": "120", "substitutes": {"br": ["r", "ctr", "next", "sb", "bro", "shr", "abl", "vr", "bsp", "bc", "cr", "ber", "kr", "dr", "bh", "tr", "bridge", "Tr", "bre", "bf", "bl", "bs", "bn", "bp", "brace", "Br", "mr", "buf", "BR", "b", "lr", "hr", "bm", "pr", "ptr", "wr", "bt", "rel", "browser", "rob", "jp", "fr", "bb", "rb", "sr", "gr"], "st": ["stage", "pt", "sy", "sb", "l", "rt", "usr", "so", "cr", "sv", "sp", "tmp", "sh", "tr", "sta", "stat", "ste", "lo", "nt", "St", "sn", "stri", "sw", "ut", "start", "se", "ist", "sm", "sl", "inst", "const", "z", "ost", "stack", "sts", "sty", "ts", "est", "rest", "ss", "et", "bt", "std", "mt", "ct", "t", "nd", "s", "p", "ft", "stable", "be", "th", "ust", "ST", "first"], "str": ["r", "result", "ctr", "STR", "coll", "name", "next", "cur", "shr", "sys", "cr", "sp", "dr", "tr", "msg", "ocr", "raw", "print", "spec", "ret", "enc", "buf", "list", "sl", "inst", "arr", "ent", "hex", "string", "Str", "pr", "div", "cont", "text", "data", "g", "txt", "fr", "exp", "t", "s", "char", "p", "stable", "del", "gr"], "sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sb", "co", "cl", "sys", "sh", "bc", "cr", "sv", "sp", "inc", "sd", "dc", "ctl", "ec", "cle", "cu", "sch", "fc", "tch", "sl", "ssl", "tc", "cv", "si", "sq", "disc", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc"], "n": ["nu", "mn", "num", "r", "ll", "nn", "un", "nr", "l", "N", "ns", "m", "ne", "nan", "nl", "cn", "Ni", "nz", "nat", "ni", "sn", "count", "norm", "z", "no", "nb", "g", " N", "nc", "na", "np", "nw", "nm", "ng", "t", "nd", "p", "ln", "net", "nt"], "res": ["r", "result", "frac", "sol", "cond", "red", "rt", "ref", "vec", "reset", "ress", "resource", "Res", "rand", "err", "resp", "stock", "sum", "resolution", "val", "ret", "req", "resh", "grid", "dev", "pr", "rest", "rss", "vol", "rel", "obj", "RES", "out", "def", "p", "re", "ps", "rc", "prof", "nt", "pres", "gr", "rem"], "i": ["q", "I", "ix", "ex", "gi", "hi", "iu", "ei", "ip", "o", "li", "id", "v", "m", "me", "ini", "wi", "uu", "ai", "ms", "ki", "im", "qi", "a", "us", "init", "u", "io", "j", "bi", "it", "ui", "uri", "pi", "eu", "ti", "ic", "ci", "MI", "sim", "cli", "multi", "iq", "gu", "iter", "ami", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        int n1 = in.nextInt();\\n        int n2 = in.nextInt();\\n        int sum = 0;\\n        while (n1 <= n2){\\n            if(isPalindrome(n1)){\\n                sum++;\\n            }\\n            n1++;\\n        }\\n        System.out.println(sum);\\n    }\\n\\n    private static boolean isPalindrome(int n1) {\\n        String str = Integer.toString(n1);\\n        StringBuilder sb = new StringBuilder();\\n        sb.append(str);\\n        return sb.reverse().toString().equals(str);\\n    }\\n}", "target": "104", "substitutes": {"in": ["r", "mm", "end", "d", "bin", "inf", "from", "con", "l", " din", "isin", " out", "log", "inc", "n", "ini", "err", "default", "by", "per", "doc", "inn", "file", "IN", "can", "rin", "get", "user", "serv", "ind", "f", "In", "init", "world", "reader", "scan", "din", "is", "i", "thin", "stream", "inner", "en", "ins", "input", "std", "conf", "out", "check", "ma", "cin", "info", "char", "ac", "add", "all", "readable", "st"], "n1": [" n3", "i1", "i2", "n0", "N3", " n001", "namesone", "en1", "nc8", "nc2", " n71", "pn8", "ln91", "en0", "n30", "n71", "N1", "N2", "N8", "ne1", " n91", "nan91", "pn2", "on1", "ln1", "nan1", "ne2", "ne0", "on2", "ln2", "names2", "n91", "ln001", " nOnce", "pn30", "nc30", "nOne", "iOne", "names1", "n001", "enOnce", "on71", "names71", " none", "nan2", "NOnce", " nOne", "none", "nan001", "ne3", "N0", " n0", "n3", "nOnce", "n8", "i0", "N30", "en2", "pn1", "NOne", "onone", "nc1"], "n2": ["intB", "n02", "NB", "N1", "N2", "NSecond", " N2", " nSecond", "int02", " N02", " NSecond", "N02", " n02", " nB", "nB", " N1", "nSecond", "int2", "int1"], "sum": ["Sum", "num", "subject", "sat", "mm", "acc", "cal", "tu", "dim", "met", "ums", "total", "zero", " SUM", "n", "summary", "rand", "sta", "su", "mean", "mut", "union", "count", "index", "umm", "match", "fac", "sort", "mem", "unit", "must", "um", " sums", "cum", "vol", "mod", "score", "mass", " summed", "hum", "sim", "body", "ass", "max", "out", "diff", "sam", "prof", "average", "add", "size", "med", "hash"], "str": ["br", "set", "r", "STR", "cur", "temp", "rs", "sol", "cr", "sp", "n", "dr", "tr", "err", "msg", "raw", "print", "sw", "res", "bool", "list", "sl", "arr", "hex", "string", "it", "Str", "div", "cont", "text", "vol", "comp", "obj", "mt", "txt", "fr", "exp", "t", "s", "char", "p", "recomm", "del", "gr", "st"], "sb": ["BB", "xb", "sf", "mb", "sg", "ob", "sh", "zb", "lp", "gb", "bh", "sd", "db", "sa", "bf", "bs", "buff", "lb", "bp", "ub", "bj", "b", "eb", "sl", "bd", "fb", "ib", "nb", "ab", "sq", "pb", "bg", "bt", "rob", "kb", "sam", "bb", "cb", "SB", "rb", "erb", "abb"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tlong n = sc.nextLong();\\n\t\tlong a = sc.nextLong();\\n\t\tlong b = sc.nextLong();\\n\t\tlong count = n/(a+b);\\n\t\tlong rest = n%(a+b);\\n\t\tlong blue = 0;\\n\t\tif(rest < a){\\n\t\t\tblue = (a * count) + rest;\\n\t\t}else {\\n\t\t\tblue = a * (count + 1);\\n\t\t}\\n\t\tSystem.out.println(blue);\\n\t}\\n}", "target": "217", "substitutes": {"sc": ["usc", "lc", "cc", "dec", "esc", "sb", "sec", "cl", "sys", "bc", "sv", "sp", "cr", "inc", "dc", "ck", "nl", "ko", "ctl", "irc", "sch", "fc", "sync", "tc", "ctrl", "scan", "sq", "cont", "cs", "g", "ss", "nc", "c", "osc", "Sc", "out", "gc", "ng", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "n": ["nu", "num", "r", "d", "nn", "l", "N", "o", "h", "ns", "m", "v", "ne", "nl", "cn", "sn", "an", "j", "no", "nb", "i", "g", "na", "nc", "np", "en", "c", "t", "ng", "p", "ln", "nt", "x"], "a": ["ae", "ca", "name", "ax", "att", "ar", "l", "len", "oa", "o", "ta", "admin", "m", "aa", "app", "sta", "sa", "power", "ak", "ai", "val", "act", "A", "f", "ia", "ack", "index", "an", "la", "ga", "ao", "j", "ab", "i", "ea", "area", "apa", "aff", "ba", "aaa", "na", "aka", "ok", "length", "c", "aj", "alpha", "w", "out", "ma", "as", "integer", "p", "ac", "t", "era", "au", "all", "to", "va", "x", "window", "am"], "b": ["br", "r", "d", "beta", "sb", "ob", "l", "h", "bc", "v", "m", "db", "by", "bl", "bs", "ub", "f", "eb", "fb", "z", "j", "bi", "ib", "ab", "i", "g", "ba", "k", "c", "bis", "e", "w", "t", "p", "bb", "y", "be", "rb", "erb", "B"], "count": ["num", "ctr", "key", "found", "base", "current", "number", "cond", "red", "len", "total", "now", "ref", "amount", "id", "reset", "rand", "cast", "common", "sum", "Count", "ind", "start", "index", "code", "match", "scroll", "z", "cmd", "nb", "i", "cont", "length", "c", "max", "ct", "counter", "continue", "th", "more", "nt", "ch", "next"], "rest": ["just", "rend", "r", "reg", "round", "stop", "end", "row", "base", "part", "red", "some", "ref", "value", "rand", "rew", "rep", "rank", "ret", "start", "art", "right", "str", "min", "Rest", "range", "dist", "repl", "patch", "length", "rel", "max", "old", "fr", "p", "re", "be", "res", "rem", "st"], "blue": ["colored", "grey", "mini", "beta", "lux", "ox", "red", " Blue", "broad", "oom", "zero", "silver", "melon", "bold", "secret", "yellow", "gb", "fine", "console", "pin", "bl", "cloth", "finger", "cy", "lime", "rint", "mon", "bone", "gold", "butt", "immer", "money", "goo", "fire", "email", "mint", "blood", "brown", "thin", "bug", "grain", "green", "orange", "bg", "normal", "blind", "shine", "bo", "out", "black", "pretty", "lu", "bird", "Blue", "gray", "fish"]}}
{"code": "import java.util.*;\\npublic class Main {    \\n    public static void main(String[] args) {\\n        Scanner sc=new Scanner(System.in);\\n        int n=sc.nextInt();\\n        int[] nums=new int[n];\\n        for(int i=0;i<n;i++){\\n            nums[i]=sc.nextInt();\\n        \\n            \\n        }\\n        int output=0;\\n        flag2:while(true){\\n            for(int i=0;i<n;i++){\\n                if(nums[i]>0){\\n                    output++;\\n                    for(int j=0;j<n-i;j++){\\n                        if(nums[i+j]==0){\\n                            \\n                            continue flag2;\\n                        }\\n                        nums[i+j]-=1;\\n                        }\\n                    continue flag2;\\n                        \\n                        \\n                    }\\n                \\n            }\\n            break flag2;\\n            \\n            }\\n        System.out.println(output);\\n        }\\n    \\n            \\n            \\n        \\n        \\n        \\n\\n    }", "target": "77", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "ck", "nl", "ctl", "cle", "sel", "sch", "sw", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "screen", "pb", "c", "osc", "Sc", "gc", "ng", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch"], "n": ["num", "nu", "name", "d", "nn", "number", "l", "un", "len", "nr", "N", "o", "ns", "m", "v", "nan", "ne", "nl", "cn", "ren", "sn", "count", "norm", "z", "no", "nb", " N", "g", "nc", "na", "k", "np", "en", "c", "none", "ct", "out", "w", "ng", "t", "p", "network", "nor", "ln", "s", "net", "size", "all", "nt", "x", "names"], "nums": ["nsumbers", "anoms", "num", " nues", "cumers", "Nues", "nomes", "Naps", "nsues", " nents", "cums", "newumbers", "naps", "nims", "Numbers", " noms", "numers", "anumbers", " nomes", "Numers", "Nents", "newums", " numbers", " nims", " numps", "noms", "anomes", "nsaps", "anums", "newims", "newents", "nsums", "Nums", "nents", "nues", "nsamps", "cum", "namps", "numbers", "Nims", "nsumps", "cumbers", "Num", " numers", "Numps", "Namps", " naps", "Nomes", "numps", " num", "Noms", " namps"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "iii", "ik", "f", "ims", "is", " Xi", "eu", "ic", "e", "ami", "y", "oi", "di", "x", "ri", "l", "chain", "ip", "o", "h", "id", "asi", "ij", "in", "client", "iti", "ori", "ist", "io", "bi", "it", "inner", "k", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "php", "jo", "this", "print", "ni", "ind", "ia", "u", "\u0438", "ir", "pi", "iso", "my", "yi", "p", "iri", "xi", "si", "mi", "I", "gi", "entry", "v", "m", "ini", "im", "qi", "us", "init", "ity", "ui", "ie", "uri", "ti", "multi", "t", "iter", "info"], "output": ["response", "ou", "offset", "result", "cut", "next", "production", "margin", "position", "current", "number", "internal", "put", "language", "Output", "value", "console", "exit", "generated", "control", "batch", "update", "print", "section", "report", "write", "plot", "hidden", "auto", "ut", "code", "echo", "buffer", "component", "document", "PUT", "message", "text", "status", "success", "connection", "human", "input", "display", "debug", "format", "out", "network", "command", "written", "net", "column", "config"], "j": ["br", "q", "jit", "pt", "key", "l", "jl", "ji", "jj", "jo", "v", "ij", "m", "jump", "jas", "ju", "ja", "ind", "str", "bj", "b", "note", "oj", "job", "z", "bi", "it", "pr", "uj", "g", "json", "k", "js", "aj", "obj", "jp", "ph", "J", "fr", "other", "er", "s", "exp", "kj", "y", "jc", "jack", "je", "kid", "dj"]}}
{"code": "import java.util.*;\\nimport java.math.BigDecimal;\\nimport java.math.MathContext;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc=new Scanner(System.in);\\n    int n=sc.nextInt();\\n    int d=sc.nextInt();\\n    int[][] x=new int[n][d];\\n    int ans=0;\\n    BigDecimal z=BigDecimal.valueOf(0);\\n    for(int i=0;i<n;i++){\\n      for(int k=0;k<d;k++){\\n        x[i][k]=sc.nextInt();\\n      }\\n      for(int j=0;j<i;j++){\\n        long a=0;\\n        for(int k=0;k<d;k++){\\n          a=a+(x[i][k]-x[j][k])*(x[i][k]-x[j][k]);\\n        }\\n        BigDecimal aa=BigDecimal.valueOf(a);\\n        aa=sqrt(aa,5);\\n        BigDecimal b=aa.setScale(0,BigDecimal.ROUND_DOWN);\\n        b=aa.subtract(b);\\n        if(b.compareTo(z)==0){\\n          ans++;\\n        }\\n      }\\n    }\\n    System.out.println(ans);\\n  }\\n\\n  public static BigDecimal sqrt(BigDecimal a, int scale){\\n    BigDecimal x = new BigDecimal(Math.sqrt(a.doubleValue()), MathContext.DECIMAL64);\\n    if(scale < 17) return x;\\n    BigDecimal b2 = new BigDecimal(2);\\n    for(int tempScale = 16; tempScale < scale; tempScale *= 2){\\n      x = x.subtract(x.multiply(x).subtract(a).divide(x.multiply(b2), scale, BigDecimal.ROUND_HALF_EVEN));\\n    }\\n    return x;\\n  }\\n}", "target": "59", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sb", "sec", "co", "cl", "sys", "ser", "bc", "cr", "sv", "sp", "ctl", "sch", "sw", "se", "sm", "sync", "fc", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "c", "osc", "cmp", "Sc", "gc", "asc", "scl", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "n": ["nu", "num", "r", "q", "mn", "name", "nn", "l", "N", "o", "ns", "m", "v", "dn", "ne", "nl", "ni", "sn", "on", "u", "an", "no", "nb", "pi", "na", "nc", "np", "en", "c", "ng", "t", "p", "s", "nd", "y", "net", "nt"], "d": ["dat", "D", "q", "r", "pd", "dec", "dm", "dim", "l", "dd", "draw", "del", "de", "m", "da", "sd", "dc", "db", "dn", "str", "f", "dist", "dev", "cd", "data", "g", "length", "done", "c", "ds", "debug", "des", "e", "w", "t", "s", "p", "date", "dir", "def", "nd", "all", "dt", "di", "dp"], "x": ["q", "ix", "ex", "wx", "xb", "ax", "php", "ox", "l", "xml", "o", "h", "v", "m", "xf", "ai", "xy", "tx", "at", "xe", "xx", "code", "f", "px", "index", "u", "xc", "xa", "hex", "xes", "dx", "lex", "xxxx", "g", "na", "mx", "xt", "xxx", "c", "obj", "xd", "e", "ct", "w", "X", "t", "rx", "p", "ux", "ac", "ctx", "y", "au", "xs", "xi", "xp", "to", "fx", "config"], "ans": ["gs", "ents", "uns", "vals", "aus", "rs", "oa", "eds", "ns", "ks", "orders", "ians", "ars", "nz", "ms", "arts", "ANS", "amps", "ats", "ens", "ants", "ags", "es", "ls", "an", "ows", "vs", "ts", "cs", "orts", "ss", "ations", "ins", "aps", "ds", "as", "cons", "s", "posts", "ots", "xs", "ps", "rows", "offs", "outs", "ann"], "z": ["Z", "zz", "wx", "zen", "zi", "zer", " Z", "l", "tz", "o", "v", "oz", "nz", "cz", "zo", "zh", "hz", "code", "f", "u", "zip", "zu", "is", "az", "zone", "g", "iz", "ze", "c", "e", "out", "s", "p", "ez", "y", "window"], "i": ["q", "I", "ix", "name", "ri", "phi", "gi", "zi", "iu", "ei", "l", "ip", "ji", "li", "o", "id", "asi", "ij", "m", "me", "ini", "v", "in", "by", "this", "ai", "ki", "ret", "iti", "im", "ind", "qi", "index", "f", "us", "ia", "init", "u", "ik", "ir", "io", "bi", "it", "is", "ie", "ui", "pi", "inner", "g", "ti", "ic", "ci", "sim", "t", "iq", "info", "p", "ami", "y", "ii", "xi", "si", "di", "mi"], "k": ["q", "ke", "ask", "key", "wk", "ikk", "yk", "kl", "kan", "ks", "kh", "kr", "dk", "km", "tk", "ck", "ko", "unk", "ak", "kn", "spec", "ki", "kar", "ik", "uk", "kk", "ack", "kick", "kat", "mk", "ark", "kin", "ok", "kg", "ek", "ku", "sk", "isk", "K", "ph", "kind", "kt", "kj", "ijk", "ka", "kit", "kw", "kid", "tek"], "j": ["br", "q", "jac", "pt", "ri", "og", "key", "l", "jl", "ji", "jj", "o", "jo", "v", "ij", "tr", "jump", "ion", "ge", "ja", "res", "bj", "note", "oj", "job", "it", "pr", "g", "uj", "json", "bot", "rel", "obj", "js", "aj", "jp", "J", "bo", "fr", "other", "er", "p", "kj", "y", "jc", "kid", "dj"], "a": ["ae", "r", "ca", "ar", "aq", "l", "oa", "o", "ta", "sta", "sa", "al", "tta", "ai", "A", "at", "ia", " fa", "ack", "u", "an", "ga", "ao", "xa", " sa", "aos", "ab", "pa", "ea", "apa", "area", "ba", "aaa", "na", "c", "aj", "fa", "alpha", "e", "ma", "as", "eas", "p", "ac", "t", "y", "au", "all", "am"], "aa": ["ae", "AA", "rr", "ava", "acc", "av", "aaaa", "aq", "eta", "qa", "ta", "unc", "sa", "alph", "ua", "aha", "ai", "isa", "amba", "ja", "ya", "arr", "la", "ga", "ao", "xa", "aos", "pa", "ea", "apa", "area", "na", "ba", "aaa", "aka", "abc", "arb", "pha", "aj", "fa", "nda", "alpha", "ma", "afa", "bb", "ac", "ha", "au", "va", "ah"], "b": ["br", "beta", "sb", "ob", "mb", "o", "bc", "gb", "bh", "bf", "db", "bl", "bs", "lb", "bp", "amb", "bd", "eb", "ble", "u", "fb", "bu", "bi", "ib", "nb", "ab", "ba", "bg", "aaa", "c", "bo", "p", "bb", "cb", "be", "y", "rb", "B", "abb"], "scale": ["r", "ca", "acc", "save", "ase", "ax", "shift", "base", "error", "draw", "ser", "Scale", "total", "zero", "sign", "ale", "level", "pe", "square", "ro", "cale", "le", "ize", "ales", "axis", "se", "code", " Scale", "tc", "radius", "sup", "scan", "is", "ALE", "age", "data", "pi", "order", "c", "step", "max", "alpha", "exp", "scope", "rate", "ate", "te", "size", "si", "all", "mega", "fee", "grow"], "b2": ["fb1", " bTwo", " b3", "a1", "bb0", "bTwo", "a0", "b1", "fb2", "aTwo", "w2", "wTwo", " b1", "w1", "a3", "b0", "b3", "bb2", "a2", "bb1", "fb0", "w3"], "tempScale": ["waterSize", " tempSize", "TempSc", "empMask", "waterSquare", "newscale", "tmpMask", "tempMask", "newSize", "currentSize", "TempSize", "empscale", "currentScale", "waterSc", " tempscale", " tempMask", "TempScale", "tempSize", " tempSquare", "newScale", "tempSquare", "tmpscale", "newSc", " tempSc", "currentscale", "tmpSc", "tempSc", "empScale", "empSc", "TempSquare", "waterScale", "tempscale", "currentSc", "tmpScale"]}}
{"code": "import java.util.*;\\nimport java.io.BufferedReader; \\nimport java.io.IOException; \\nimport java.io.InputStreamReader; \\n\\npublic class Main{\\n\\n    static int comb(int m,int n)\\n    {\\n        int res=1;\\n\\n        if(n>m-n)\\n            n=m-n;\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            res*=(m-i);\\n            res/=(i+1);\\n        }\\n        return res;\\n    }\\n    public static void main(String[] args) {\\n        \\n        Scanner in = new Scanner(System.in);\\n\\n        int m= in.nextInt();\\n        int n = in.nextInt();\\n\\n        int total_ways=0;\\n\\n        if(m>=2)\\n            total_ways+=comb(m,2);\\n\\n        if(n>=2)\\n            total_ways+=comb(n,2);\\n\\n        System.out.println(total_ways);\\n    }\\n}\\n", "target": "49", "substitutes": {"m": ["mn", "r", "mm", "dm", "d", "mo", "mb", "l", "h", "perm", "o", "v", "me", "om", "km", "mun", "md", "ms", "mean", "mr", "mu", "im", "rm", "b", "a", "sm", "f", "M", "mem", "ims", "z", "j", "bm", "gm", "tm", "g", "mod", "cm", "mx", "mode", "c", "mt", "nm", "ma", "t", "s", "p", "man", "em", "y", "mc", "fm", "re", "x", "mi", "rem", "am"], "n": ["num", "mn", "r", "nu", "q", "d", "ll", "nn", "l", "un", "number", "len", "N", "o", "h", "ns", "v", "ne", "nan", "nl", "cn", "ren", "ni", "sn", "on", "u", "an", "z", "j", "it", "no", "nb", "g", "na", "nc", "fn", "np", "en", "c", "nw", "nm", "w", "out", "ng", "t", "p", "network", "nor", "ln", "s", "y", "net", "nt", "names"], "res": ["r", "reg", "result", "vals", "cos", "rs", "cond", "red", "vec", "ress", "reset", "zero", "Res", "rand", "respons", "resp", "sum", "ms", "val", "ret", "req", "fac", "resh", "mem", "results", " Res", "div", "cs", "rest", "rss", "has", "quant", "obj", "js", "sim", "mult", "max", "RES", "out", "cons", "def", "exp", "p", "re", "ps", "rc", "resolution", "pas", "nt", "pres", "gr", "rem"], "i": ["I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "l", "ip", "ji", "point", "li", "o", "ij", "v", "ini", "ai", "ms", "ki", "client", "im", "ind", "qi", "index", "init", "u", "io", "j", "bi", "it", "ui", "is", "ie", "pi", "iso", "ti", "ic", "ci", "sim", "my", "cli", "multi", "iter", "p", "y", "oi", "ii", "si", "di", "mi"], "in": ["r", "gin", "sql", "bin", "inf", "from", "con", "l", " din", "isin", "log", "rt", "inc", "sin", "ini", "err", "by", "raw", "doc", "inn", "rin", "sum", "IN", "get", "state", "user", "ind", "In", "world", "nin", "dev", "scan", "null", "din", "is", "it", "thin", "stream", "inner", "en", "ins", "input", "std", "conf", "out", "check", "t", "cin", "info", "local", "add", "net", "all"], "total_ways": ["total_roads", " total_changes", "total_cards", "totaldevways", " total_cards", " total_times", "total1cards", "total_shows", "totaldevcards", "total_users", "total1changes", "totaldways", "totaldmails", " total_shows", "total42times", " total2times", " total2lights", " total_roads", "total_times", "total_way", " total2way", "total42way", "total2lights", "total_changes", " total_users", "total1shows", "totaldevchanges", " total_lights", "total_mails", "total2ways", " total_mails", "totaldcards", "totaldusers", "total2times", " total2ways", "total1ways", "total42ways", "totaldevshows", "total42lights", "total_lights", "total2way", " total_way"]}}
{"code": "\\n\\nimport java.io.IOException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t// TODO Auto-generated method stub\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\\n\t\tint sumsum = 0;\\n\t\tfor(int i = 1; i <= n; i++){\\n\t\t\tString num = Integer.toString(i);\\n\\n\t\t\tint sum = 0;\\n\t\t\tfor(int j = 0; j < num.length(); j++){\\n\t\t\t\tsum += num.charAt(j) - '0';\\n\t\t\t}\\n\\n\t\t\tif(sum >= a && sum <= b){\\n\t\t\t\tsumsum += i;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sumsum);\\n\\n\t}\\n}\\n", "target": "212", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint a[] = new int[n];\\n\t\tfor(int j = 0; j < n; j++){\\n\t\t\ta[j] = scan.nextInt();\\n\t\t}\\n\t\tscan.close();\\n\t\tInsertionSort(a, n);\\n\t}\\n\\n\tstatic void InsertionSort(int A[], int N){\\n\t\tprint(A);\\n\t\tfor(int i = 1; i <= N - 1; i++){\\n\t\t\tint v = A[i];\\n\t\t\tint j = i - 1;\\n\t\t\twhile(j >= 0 && A[j] > v){\\n\t\t\t\tA[j + 1] = A[j];\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\tA[j + 1] = v;\\n\t\t\tprint(A);\\n\t\t}\\n\t}\\n\\n\tstatic void print(int A[]){\\n\t\tfor(int k = 0; k < A.length; k++){\\n\t\t\tif(k == A.length - 1){\\n\t\t\t\tSystem.out.println(A[k]);\\n\t\t\t}else{\\n\t\t\t\tSystem.out.print(A[k] + \" \");\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "69", "substitutes": {"scan": ["seek", "r", "skip", "row", "nn", "reach", "gate", "parse", "san", " Scan", "ser", "sys", "Scan", "system", "connect", "m", "sin", "ran", "util", "read", "in", "stat", "sche", "can", "report", "run", "se", "pass", "sync", "clean", "search", "send", "scroll", "an", "sc", "find", "ner", "g", "na", "store", "conf", "link", "out", "gc", "check", "info", "p", "sur", " scanner", "trans", "proc", "query", "ch", "ann"], "n": ["num", "mn", "nu", "nn", "number", "l", "len", "o", "ns", "m", "nan", "ne", "in", "nl", "cn", "sn", "count", "index", "z", "no", "nb", "g", "na", "nc", "np", "en", "c", "nm", "out", "ng", "t", "p", "ln", "net", "size", "nt", "x"], "a": ["ae", "ca", "att", "array", "ar", "oa", "o", "qa", "aa", "sa", "act", "foo", "b", "at", "ack", "ia", "u", "an", "la", "ga", "ao", "ab", "area", "ba", "aaa", "aj", "alpha", "ap", "ma", "as", "t", "p", "ac", "eas", "au", "all", "bar", "ata", "x", "am"], "j": ["br", "q", "block", "ix", "li", "sp", "batch", "str", "note", "f", "job", "pr", "ph", "kj", "y", "je", "res", "x", "jl", "dj", "jac", "jit", "col", "og", "l", "ji", "o", "h", "ij", "ja", "z", "bi", "it", "uj", "g", "js", "bo", "J", "fr", "pt", "jj", "jo", "tr", "xy", "ind", "ody", "json", "jp", "other", "p", "jc", " J", "si", "kid", "server", "err", "jump", "msg", "ju", "bj", "at", "b", "oj", "Ja", "ie", "off", "obj", "aj"], "A": ["RAM", "VA", "Action", "The", "EMA", "SA", "Ar", "ATA", "V", "LA", "JA", "AV", "H", "One", "AR", "AF", "PA", "D", "App", "E", "CA", "HA", "O", "G", "R", "Q", "This", "AP", "An", "Cache", "AST", "J", "mA", "B", "Alice", "F", "Array", "MA", "WA", "AE", "AC", "All", "At", "As", "IA", "Address", "GA", "What", "ACC", "U", "NA", "Answer", "ACT", "AA", "I", "AU", "Alpha", "UA", "ABC", "S", "P", "T", "M", "API", "C", "AM", "AB", "AAA", "L", "K", "EA", "X", "Area", "BA", "AT"], "N": ["Z", "I", "D", "TN", "NM", "SN", "NP", "NB", "Size", "NV", "No", "S", "Ni", "P", "NO", "NL", "T", "R", "Count", "NS", "NR", "V", "M", "NH", "C", "NN", "Num", "NA", "L", "J", "K", "Ne", "Length", "NI", "NT", "Ns"], "i": ["I", "ix", "ri", "key", "phi", "hi", "zi", "iu", "gi", "l", "ip", "ji", "li", "o", "id", "ij", "me", "ini", "m", "by", "ai", "ki", "im", "ind", "qi", "ori", "f", "init", "io", "z", "bi", "it", "slice", "ui", "ie", "is", "pi", "ti", "ic", "ci", "sim", "PI", "multi", "t", "iq", "info", "p", "ami", "y", "xi", "ii", "si", "di", "x", "mi"], "v": ["q", "av", "tv", "l", "ver", "vp", "vr", "h", "value", "sv", "m", "uv", "vd", "val", "vm", "b", "V", "f", "u", "z", "cv", "qv", "vs", "it", "ve", "vc", "lv", "nv", "vt", "inv", "ov", "t", "vi", "p", "y", "conv", "va", "ev", "x"], "k": ["q", "ask", "key", "d", "wk", "work", "kl", "jj", "ks", "kh", "m", "kr", "dk", "km", "tk", "ck", "ko", "kn", "ak", "unk", "kar", "ki", "b", "ik", "kk", "uk", "u", "kick", "it", "mk", "ark", "g", "ick", "ok", "ic", "sk", "ek", "isk", "ku", "K", "t", "kind", "kt", "kj", "tek", "ka", "y", "ijk", "alk", "kw", "kid", "kg"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    final Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    private void run() {\\n        long n = sc.nextLong();\\n\\n        long ans = Long.MAX_VALUE;\\n        for (long i = 1; i*i <= n; i++) {\\n            if (n % i == 0) {\\n                ans = Math.min(i-1 + n/i-1, ans);\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n\\n", "target": "157", "substitutes": {"sc": ["uc", "lc", "cc", "sb", "rs", "cl", "sys", "system", "Scan", "bc", "sv", "sp", "sa", "nl", "ec", "src", "sch", "sw", "sm", "tc", "ctrl", "scan", "cs", "ss", "nc", "pb", "c", "syn", "sk", "osc", "Sc", "gc", "exp", "ng", "sr", "SC", "mc", "pc", "si", "rc", "ch", "st"], "n": ["nu", "mn", "num", "name", "d", "ll", "nn", "number", "l", "len", "N", "gn", "total", "ns", "h", "m", "v", "dn", "ne", "nan", "nl", "cn", "ni", "sn", "norm", "an", "j", "it", "nb", "na", "nc", "fn", "np", "en", "c", "nw", "max", "ot", "w", "ng", "t", "p", "nor", "ln", "net", "nt", "names"], "ans": [" means", " Ans", "ents", "acs", "ons", "pn", "uns", "ros", "offs", "eps", "nn", "nets", "aus", "rs", "names", "anks", "outs", "flags", "eds", "ns", "ads", "ks", "sv", "ces", "nan", "ends", "nl", "ians", "os", "can", "ids", "ms", "arts", "ANS", "amps", "ats", "ens", "ants", "es", "ls", "an", "ows", "AN", "ann", "vs", "mas", "is", "ts", "anes", "cs", "ins", "aps", "olds", "ions", "annot", "as", "cons", "posts", "ln", "xs", "lets", "lan", "wan", "ars", " scans"], "i": ["q", "I", "ix", "ri", "d", "phi", "hi", "zi", "iu", "gi", "ei", "l", "fi", "ip", "li", "o", "id", "m", "v", "ini", "batch", "ai", "ki", "im", "qi", "index", "ik", "f", "u", "\u0438", "io", "z", "j", "bi", "it", "ui", "is", "pi", "ti", "ic", "ci", "c", "sim", "yi", "cli", "isi", "multi", "t", "p", "ami", "y", "oi", "xi", "ii", "si", "di", "x", "mi"]}}
{"code": "/*\\n\tsubmission # - User: herp_sy\\n\thttps://atcoder.jp/contests/\\n*/\\n\\nimport java.util.*;\\nimport java.util.Collections; // sorting use\\nimport java.io.*;\\nimport static java.lang.System.*;\\n\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tint a,b;\\n\t\tint k;\\n\t\tScanner sc = new Scanner(System.in);\\n\t\ta = sc.nextInt();\\n\t\tb = sc.nextInt();\\n\t\tk = (a + b) / 2;\\n\\n\t\tif(Math.abs(k - a) == Math.abs(k - b))\tout.println(k);\\n\t\telse out.println(\"IMPOSSIBLE\");\\n\t}\\n}\\n", "target": "31", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s;\\n        s = sc.next();\\n        char str[] = s.toCharArray();\\n        str[3] = '8';\\n        System.out.println(str);\\n        sc.close();\\n    }\\n}\\n", "target": "18", "substitutes": {"sc": ["arc", "sac", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "ser", "sh", "cr", "sv", "sp", "bc", "inc", "ck", "ko", "cle", "sch", "sw", "sm", "sync", "fc", "tc", "scan", "sq", "cs", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "s": [" ls", "r", "gs", " sv", " sim", "sf", "sb", " ss", "rs", " sr", "ser", "sys", "so", "sv", "sp", " S", "n", " scr", " rs", "bs", " sk", "S", "serv", "less", "sw", "ats", "se", "sl", "fs", "ls", "es", " st", "sing", "space", " sa", "sts", " cs", "string", "is", "ts", "sq", " ts", "g", "ss", " sl", "syn", "sample", "gets", "sam", "ps", "hs", " som", " sp", "st"], "str": ["r", "ctr", "STR", "dec", "ar", "rs", "sol", "uts", "bc", "cr", "n", "dr", "tr", "oct", "sta", "cast", "rep", "ocr", "seq", "print", "stri", "buf", "b", "list", "arr", "cat", "string", "it", "Str", "div", "cont", "data", "text", "cs", "unch", "vol", "c", "output", "txt", "out", "fr", "exp", "t", "char", "ust", "nt", "ch", "gr", "st"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main{\\n\\n\\n    public static void main(String[] args) {\\n        FastReader in = new FastReader();\\n\\n        String s = in.nextLine();\\n        int cnt[] = new int[2];\\n        for (int l = 0; l < s.length(); ++l){\\n            cnt[(int)s.charAt(l) - (int)'0'] ++;\\n        }\\n        System.out.println(Math.min(cnt[0], cnt[1])*2);\\n\\n\\n\\n\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n}", "target": "14", "substitutes": {"in": ["r", "mm", "ri", "gin", "bin", "inf", "con", "ar", " din", "log", "rt", "inc", "n", "m", "ini", "err", "al", "doc", "inn", "rin", "IN", "mr", "user", "ind", "ill", "b", "f", "on", "fs", "In", "init", "world", "reader", "it", "din", "is", "i", "thin", "stream", "inner", "ze", "ic", "ins", "input", "conf", "out", "er", "cin", "t", "info"], "s": ["gs", "r", "sql", "sb", "rs", "sys", "h", "ns", "sv", "strings", "n", "m", "v", "source", "ws", "bs", "parts", "S", "os", "series", "bytes", "its", "ms", "less", "sw", "ats", "south", "b", "fs", "es", "ls", "ims", "sts", "is", "ts", "sq", "g", "ss", "ings", "js", "ins", "gets", "t", "p", "ps", "stats", "hs"], "cnt": ["ctcount", "ctr", "Ccount", "Cnc", " cnc", "CNT", "nnc", "ctnc", "cNT", "cnc", " cNT", "ctnt", "cpt", "Ctr", "nnt", "conNT", "ctNT", "connt", "Cnt", "npt", " cpt", "connc", " ctr", "Cpt", "contr", " ccount", "ccount", "nNT"], "l": ["dl", "q", "lc", "ll", "d", "loc", "el", "hl", "jl", "len", "kl", "li", "pl", "log", "n", "m", "v", "ol", "lp", "al", "nl", "lo", "lb", "le", "lit", "b", "sl", "load", "ls", "la", "ml", "z", "j", "i", "g", "lv", "k", "length", "fl", "c", "ell", "L", "t", "tl", "ln", "lf", "ld", "line", "ly", "lu"], "charAt": ["letterAfter", "characterAt", "letterAs", "byteFor", "charAs", "characterFor", "charFor", "characterAfter", "letterFor", "byteAt", "characterAs", "charAfter", "byteAfter", "letterAt", "byteAs"], "br": ["r", "next", "bro", "shr", "bsp", "vr", "cr", "ber", "bc", "kr", "dr", "bh", "tr", "bal", "bridge", "bre", "sp", "bl", "bs", "bn", "bp", "Br", "mr", "ger", "buf", "BR", "b", "lr", "hr", "bm", "pr", "ptr", "wr", "bra", "bt", "rel", "browser", "fr", "er", "p", "be", "rb", "gr"], "st": ["set", "lt", "r", "stage", "pt", "sb", "wt", "cl", "rt", "sh", "sv", "sp", "tmp", "dr", "tr", "stat", "bl", "ste", "St", "sn", "stri", "sw", "ut", "start", "se", "ist", "sm", "sl", "inst", "const", "z", "ost", "stack", "sts", "sty", "est", "rest", "et", "bt", "std", "mt", "ct", "fr", "t", "nd", "ST", "p", "ft", "stable", "be", "th", "ust", "nt", "first"], "str": ["r", "cert", "result", "ctr", "STR", "next", "cur", "temp", "shr", "del", "ns", "usr", "cr", "sp", "v", "dr", "tr", "msg", "ocr", "raw", "print", "ret", "pse", "inst", "arr", "sequence", "ent", "string", "Str", "cont", "text", "txt", "e", "fr", "exp", "t", "char", "p", "stable", "re", "res", "gr"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        AChangingACharacter solver = new AChangingACharacter();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class AChangingACharacter {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int n = in.nextInt();\\n            int k = in.nextInt();\\n            String s = in.next();\\n\\n            String temp = \"\";\\n\\n            String a, b, c;\\n            if (k - 1 >= 1)\\n                a = s.substring(0, k - 1);\\n            else\\n                a = temp;\\n\\n            if (k + 1 <= n)\\n                b = s.substring(k, n);\\n            else\\n                b = temp;\\n\\n            c = s.substring(k - 1, k);\\n\\n            out.println(a + c.toLowerCase() + b);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public String nextString() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                if (Character.isValidCodePoint(c)) {\\n                    res.appendCodePoint(c);\\n                }\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public String next() {\\n            return nextString();\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void print(Object... objects) {\\n            for (int i = 0; i < objects.length; i++) {\\n                if (i != 0) {\\n                    writer.print(' ');\\n                }\\n                writer.print(objects[i]);\\n            }\\n        }\\n\\n        public void println(Object... objects) {\\n            print(objects);\\n            writer.println();\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n    }\\n}\\n\\n", "target": "71", "substitutes": {"inputStream": ["instream", "openReader", "inStream", "outputFile", " inputSteam", "outputStreamer", "inputSteam", "inStreamer", "sourceSteam", "sourceStream", "inSteam", "inputstream", "outputReader", "sourcestream", "openFile", "openSteam", "openStream", " inputReader", "outputstream", "inputStreamer", "sourceStreamer", "inputFile", "inputReader", "outputSteam", " inputFile"], "outputStream": ["outputStreamer", "inputSteam", "outputNow", "connectionStream", "responseSteam", "responseStream", "outNow", " outputSteam", "outStream", "positionWriter", "connectionStreamer", "outputForm", "positionSteam", "outSteam", "connectionSteam", "inputForm", "inputStreamer", "outWriter", "responseStreamer", "positionNow", "outputWriter", "positionStream", " outputNow", "outputSteam", "connectionForm", " outputWriter", "responseForm"], "in": ["r", "mm", "gin", "bin", "inf", "el", "con", "from", "l", "isin", "log", "rt", "o", "inc", "id", "m", "sin", "ini", "context", "err", "source", "al", "lo", "inn", "file", "rin", "IN", "ai", "get", "run", "serv", "or", "ind", "form", "on", "In", "init", "ssl", "io", "reader", "it", "null", "din", "is", "thin", "kin", "inner", "ic", "en", "ins", "input", "conf", "old", "w", "local", "t", "cin", "iter", "er", "info", "as", "up", "add", "net", "mi"], "out": ["set", "ou", "ex", "end", "outer", "flush", "con", "l", "co", "log", "o", "sys", "tmp", "v", "conn", "err", "this", "print", "OUT", "os", "sum", "report", "OU", "write", "client", "user", "or", "cache", "at", "list", "io", "j", "it", "aos", "Out", "null", "inner", "screen", "table", "output", "pool", "w", "gc", "t", "p", "e", "y", "up", "net", "all", "to", "nt", "outs"], "solver": ["ssolves", "resolar", "unsolar", "jsolver", "ssolver", "jsolves", "solar", "solves", "resolver", "Solution", "ssolution", " solution", "Solve", " sorter", "jsolve", "ssolve", "resorter", "unsorter", "solve", "unsolution", " solar", "solution", "jsolution", "Solves", "sorter", "unsolver", "Solver", "resolution"], "testNumber": [" testNo", " scenarioData", " scenarioCode", "testCode", " suiteNo", " testCode", " scenarioNumber", " suiteNumber", "testNo", " suiteData", "testData", " scenarioNo", " suiteCode", " testData"], "n": ["num", "mn", "nu", "d", "nn", "l", "nr", "N", "o", "ns", "m", "v", "nan", "nl", "cn", "sn", "on", "u", "an", "j", "no", "nb", " N", "g", "nc", "na", "np", "nw", "nm", "w", "t", "ng", "p", "ln", "y", "net", "nt", "x"], "k": ["q", "num", "r", "ke", "ask", "key", "kl", "o", "ks", "m", "v", "kh", "dk", "km", "kr", "tk", "ck", "ko", "kn", "ak", "unk", "ki", "ik", "kk", "u", "kick", "z", "j", "mk", "g", "ok", "ek", "sk", "conf", "ku", "K", "w", "t", "p", "kind", "kj", "kt", "ctx", "ka", "y", "kw", "x", "kid"], "s": ["gs", "r", "sql", "sb", "l", "rs", "xml", "abs", "http", "h", "ns", "sv", "strings", "source", "ws", "bs", "S", "csv", "series", "spec", "its", "ms", "less", "ats", "str", "south", "fs", "ls", "ims", "j", "sts", "string", "is", "ts", "sq", "g", "ss", "js", "ins", "sam", "t", "p", "qs", "scl", "ps", "stats"], "temp": ["empty", "key", "mp", "base", "current", "ta", "prefix", "tmp", "v", "m", "sp", "tr", "tt", "tem", "Temp", "tty", "str", "buffer", "test", "tc", "sequence", "j", "null", "tm", "partial", "template", "mod", "emp", "output", "TM", "txt", "w", "local", "t", "pretty", "p", "stable", "fake", "term"], "a": ["ae", "ata", "ca", "acc", "ar", "aq", "oa", "\u00e4", "aa", "da", "sta", "sa", "wa", "ya", "A", "at", "ia", "an", "la", "ga", "ao", "xa", "ab", "pa", "ea", "apa", "area", "aff", "ba", "aaa", "na", "aj", "fa", "e", "alpha", "ap", "as", "t", "ma", "ac", "au", "va", "ova", "am"], "b": ["br", "bas", "wb", "beta", "sb", "bin", "mb", "l", "bar", "bc", "gb", "bf", "db", "v", "bl", "bs", "bool", "back", "bd", "eb", "ble", "u", "fb", "bu", "j", "bi", "ib", "nb", "ab", "ba", "bis", "bo", "e", "t", "p", "bb", "cb", "be", "y", "rb", "to", "erb", "B"], "c": ["arc", "uc", "r", "lc", "ca", "cut", "cc", "d", "col", "con", "cos", "l", "chain", "co", "cf", "bc", "cr", "cp", "ce", "v", "m", "dc", "unc", "ec", "cu", "cache", "count", "fc", "f", "u", "xc", "tc", "z", "ctrl", "cd", "cmd", " C", "C", "cs", "nc", "cm", "cod", "ci", "e", "ct", "gc", "w", "t", "p", "ac", "x", "cb", "rc"], "stream": ["wrapper", "pod", "driver", "row", "REAM", "from", "feed", "chain", "hook", "dd", "http", "log", "upload", "engine", "console", "context", "speed", "ream", "steam", "transform", "host", "file", "path", "handler", " upstream", "or", "thread", "sw", "form", "Steam", "inter", "view", "service", "sync", "secure", "buffer", "ssl", "reader", "stack", "pipe", "loop", "zip", "message", "parser", "each", "channel", "event", "table", "Stream", "input", "iterator", "port", "sample", "output", "socket", "present", "pool", "iter", "storage", "network", "proc", "proof", "util", "window"], "buf": ["br", "emb", "Buff", "cur", "wb", "bin", "Buffer", "queue", "var", "uf", "mb", "bar", "vec", "tmp", "bed", "db", "cap", "batch", "buff", "seq", "bytes", "mu", "img", "bag", "buffer", "mem", "init", "fb", "cv", "pkg", "cmd", "ptr", "pb", "txt", "tab", "pool", "iter", "cb", "ctx", "box", "proc", "rb", "conv"], "curChar": [" curchar", "currentChar", "rcCh", " curCh", " curByte", "currentVar", "currentCh", "contCharacter", "rcVar", " CurCounter", " CurByte", "currentCharacter", "curCounter", " CurCh", "CurChar", "contByte", "curByte", " CurVar", "CurCharacter", "rcCharacter", "contChar", "Curchar", " curVar", "CurCh", "ctrCh", "contchar", "tmpVar", "ctrChar", "CurByte", "tmpCh", "rcChar", " Curchar", "tmpChar", " curCharacter", "curchar", "ctrchar", "curVar", "ctrCounter", "curCh", "tmpCharacter", "CurVar", " CurChar", "CurCounter", "curCharacter"], "numChars": ["numChales", "NUMChrs", " numchars", "numchARS", "NumChARS", "numchrs", " numchrs", "NumCHars", " numChrs", "numTrags", "numCrs", "NUMCHales", "numCHars", "numTrARS", "numColats", " numChers", "numCars", "numChARS", "NUMCHars", "numTrarts", "numCARS", "NUMChARS", "numTrcs", "numCHales", "numchats", "numchers", "numColars", "numColarts", "numchales", "numChats", "NumCHrs", "numCHrs", "numColARS", "numchcs", "numClars", "NumChags", "NumChars", "numCHers", "numChcs", "NUMTrars", "NUMChars", "numCHats", "numChrs", "NUMChcs", "numColrs", "numcharts", "numClARS", "NUMTrARS", "NumCHats", "numCers", "numchars", "numCHarts", "numChers", "numCharts", "NumChrs", "NUMTrcs", "NumChats", " numchers", "NumCharts", "NUMCHrs", "NUMCHARS", " numchARS", "numCHARS", "NUMChales", "NumCHarts", "numClcs", "numChags", "numColales", "numTrars", "numchags", " numChARS"], "filter": ["result", "name", "fil", "filename", "processor", "source", "file", "function", "Filter", "handler", "spec", "map", "f", "fac", "match", "test", " filtered", " Filter", "accept", "only", "channel", " filters", "check", "conv", "policy", " filtering", "config", "term"], "next": ["name", "shift", "current", "inc", "rand", "top", "seq", "front", "series", "Next", "get", "unique", "inter", "se", "prev", "sequence", "space", "pattern", "accept", "pr", "xt", "txt", "nd", "last", "query", "first", "desc"]}}
{"code": "\\nimport java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[]args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tchar []ch = scan.next().toCharArray();\\n\t\tint count = 0 ;\\n\t\tfor(int i = 1 ; i<ch.length ; i++) {\\n\t\t\tif(ch[i]==ch[i-1]) {\\n\t\t\t\tcount++;\\n\t\t\t\tif(ch[i-1] == '0')\\n\t\t\t\t\tch[i] = '1';\\n\t\t\t\telse\\n\t\t\t\t\tch[i] = '0' ;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n", "target": "146", "substitutes": {"scan": ["set", "seek", "r", "skip", "reach", "gate", "parse", "con", "san", "nav", " Scan", "ser", "sys", "system", "Scan", "connect", "sv", "n", "m", "sin", "read", "in", "stat", "nl", "can", "get", "run", "auto", "se", "gen", "sm", "sync", "scroll", "an", "sc", "find", "is", "ner", "g", "out", "check", "re", "proc", "query", "ann"], "ch": ["br", "q", "he", "cht", "cur", "att", "arch", "con", "qu", "cl", "h", "ich", "sh", "sv", "sp", "ech", "cp", "v", "gb", "ce", "msg", "buff", "pol", "och", "sch", "ut", "zh", "form", "b", "che", "tch", "Ch", "cho", "history", "CH", "sc", "cd", "pr", "child", "cs", "unch", "cha", "vc", "ach", "channel", "cod", "c", "ct", "ot", "ph", "chu", "x", "char", "s", "wh", "y", "th", "chan", "gr"], "count": ["num", "ount", "ctr", "coll", "result", "found", "current", "number", "cond", "total", "amount", "value", "reset", "n", "err", "cast", "stat", "call", "print", "sum", "report", "state", "Count", "cache", "ind", "index", "hold", "code", "match", "list", "const", "test", "must", "trace", "find", "core", "comment", "child", "cont", "status", "success", "length", "score", "c", "conf", "counter", "continue", "check", "info", "add", "size", "nt"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "used", "ei", "base", "chain", "ip", "ji", "fi", "point", "li", "o", "id", "m", "ij", "me", "ini", "err", "print", "ai", "im", "ind", "qi", "a", "index", "list", " j", "us", "init", "u", "\u0438", "io", "sequence", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "g", "rest", "ti", "ic", "ci", "my", "cli", "port", "multi", "info", "ami", "y", "oi", "xi", "ii", "si", "to", "di", "x", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String args[]){\\n    \tScanner scanner = new Scanner(System.in);\\n        int N = scanner.nextInt();\\n      \\n        int[] A = new int[N];\\n        for(int i = 0; i < N; i++){\\n            A[i] = scanner.nextInt();\\n        }\\n\t\t\\n        int max_first = 0;\\n        int max_second = 0;\\n        int count_max_first = 0;\\n      \\n        for(int i = 0; i < N; i++){\\n            if(A[i] > max_first){\\n                max_first = A[i];\\n            }\\n        } \\n      \\n        for(int i = 0; i < N; i++){\\n            if(A[i] > max_second && A[i] != max_first){\\n                max_second = A[i];\\n            } else if(A[i] == max_first) {\\n                count_max_first++;\\n            }\\n        } \\n      \\n        if(count_max_first > 1){\\n            max_second = max_first;\\n        }\\n      \\n        for(int i = 0; i < N; i++){\\n            if(A[i] == max_first){\\n                System.out.println(max_second);\\n            } else {\\n                System.out.println(max_first);\\n            }\\n        } \\n    }\\n}", "target": "142", "substitutes": {"scanner": ["canener", "lookning", " scanener", "scer", "looker", "Scanter", "scanener", "Scanener", "Scaner", "scner", "Scanning", "canning", "scanter", "scter", "canter", " scanter", "scener", "Scanner", "canner", "scanning", "scaner", " scaner", "caner", "lookner", "lookener"], "N": ["D", "I", "Z", "Node", "TN", "F", "FN", "ND", "NM", "SN", "ALL", "NE", "NP", "NB", "n", "Size", "EN", "S", "Ni", "NG", "P", "OUT", "NO", "NL", "T", "R", "NS", "NR", "V", "ANY", "NH", "M", "AN", "GN", "NC", "Sn", "C", "Number", "UN", "NN", "Num", "Y", "L", "NA", "K", "J", "NOTE", "NI", "NT", "B", "Ns"], "A": ["New", "AA", "I", "RAM", "F", "Array", "MA", "App", "AU", "Alpha", "CA", "Action", "WA", "Active", "AC", "All", "HA", "The", "At", "As", "SA", "ASC", "O", "Abs", "P", "Ar", "IA", "ATA", "a", "GA", "LA", "JA", "Some", "API", "This", "What", "AV", "ACC", "AP", "Attributes", "AM", "U", "AB", "An", "NA", "AI", "Bar", "RA", "AR", "AST", "EA", "Answer", "L", "Args", "Entry", "BA", "AF", "ACT", "PA", "B", "AT"], "i": ["set", "q", "ix", "zi", "iu", "base", "ei", "li", "n", "me", "batch", "eric", "ai", "ki", "iii", "ik", "f", "ims", "is", "ic", "e", "ios", "ami", "y", "oi", "di", "ri", "fi", "chain", "ip", "ji", "point", "o", "id", "ij", "client", "ori", "io", "bi", "it", "g", "ci", "sim", "cli", "ii", "span", "phi", "hi", "php", "progress", "dr", "ion", "this", "ind", "ia", "u", "\u0438", "menu", "pi", "et", "json", "my", "gu", "xi", "si", "mi", "I", "name", "key", "sql", "gi", "iy", "entry", "m", "ini", "err", "ski", "im", "qi", "us", "init", "ies", "j", "ity", "ui", "ie", "uri", "ti", "multi", "info", "iter", "to"], "max_first": ["max_root", "maximum_second", "windowistminute", "max_before", "ax_First", "maxensecond", "window_root", "max_part", "ax_next", " max_next", " max_part", "windowistfirst", "max_lower", "maximum_start", "ax_before", "maxtlower", "maxistroot", " max_start", "maximumenstart", "window_first", "maximum_first", "windowistroot", "maxistminute", "maxtfirst", "max_current", "maxtstart", " max_lower", "ax_second", " max_sort", "max_sort", "maximumenfirst", "ax_part", "maxenfirst", "max_last", "window_minute", "max_next", "max_First", "maxistfirst", "ax_last", "maximumensecond", "maxtsecond", "max_start", "maxenstart", "ax_first", " max_current", "max_minute"], "max_second": ["max_third", "max1first", "max_other", "max2third", "max10Second", " max_secondary", "max64third", "max2second", "max64second", " max_third", "tmp_Second", " max_next", "tmpfulsecond", "max_tail", "max10other", "max2secondary", "final_secondary", "max_fourth", "max_two", "max10second", " max_tail", "max64tail", "final_second", "max1two", "tmpfulother", "max_Second", "tmp_second", "final_seconds", " max_two", "ax_second", "maxfulother", "max_minimum", "ax_fourth", "tmp_third", "max1next", "maxfulSecond", "tmp_other", "max2seconds", "max10third", "max_next", "max_seconds", "tmpfulSecond", "ax_minimum", "maxfulsecond", "max_secondary", "max64secondary", "maxfulthird", "tmpfulthird", "final_third", "max1second"], "count_max_first": ["count_max_top", "count_ax_last", "count_ax_new", "count_max_new", "count_max_second", "count_ax_top", "count_maxillast", "count_maxilfirst", "count_ax_first", "count_maxptsecond", "count_maxptfirst", "count_maxptmust", "count_maxilnew", "count_max_must", "count_maxilsecond", "count_max_last", "count_maxptlast", "count_ax_must", "count_ax_second"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int L = sc.nextInt();\\n        int[] tastes = new int[N];\\n        int min = Integer.MAX_VALUE;\\n        int total = 0;\\n        int index = 0;\\n        for (int i = 0; i < N; i++) {\\n            int taste = L+i;\\n            total += taste;\\n            tastes[i] = taste;\\n            int moo = Math.min(min, Math.abs(taste));\\n            if (moo < min) {\\n                min = moo;\\n                index = i;\\n            }\\n        }\\n        System.out.println(total-tastes[index]);\\n    }\\n}", "target": "91", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "Sync", "sec", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "ck", "nl", "ctl", "sch", "sw", "se", "sync", "reader", "scan", "sq", " Sc", "cs", "ner", "ss", "nc", "c", "osc", "cmp", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch"], "N": ["D", "I", "TN", "F", "ND", "NM", "SN", "NE", "NB", "n", "EN", "O", "No", "S", "Ni", "P", "NG", "T", "NL", "R", "NS", "A", "NR", "V", "M", "NH", "Len", "Total", "GN", "NC", "C", "NN", "Num", "Y", "NA", "K", "J", "X", "Net", "Length", "NI", "NT", "Ns"], "L": ["Z", "I", "D", "LT", "F", "LB", "LIN", "E", "LC", "l", "TL", "LE", "G", "S", "P", "LI", "T", "NL", "LL", "R", "V", "LA", "M", "H", "C", "LP", "IL", "U", "J", "K", "DL", "dL", "Length", "LS", "B"], "tastes": ["tasteries", "tasies", "stasies", "tastees", "tastions", "tasterees", "tostes", "stasES", "tainions", "taines", "toastss", "tainedes", "treate", "tasES", "toastions", "tastedions", "ptasteries", "tastES", "tastses", "stase", "toastses", "stastes", "testes", "testES", "stases", "ptastes", "stastES", "tostES", "toastsions", "tostees", "ptastES", "tase", "tasteies", "toastes", "ptastees", "tosties", "treatES", "ptasteres", "tastededes", "testies", "toasts", "tastsedes", "ptasterES", "tains", "treaties", "tasterES", "tastedes", "tastsions", "toastedes", "tastss", "stasties", "ptasterees", "tasteees", "staste", "tasties", "tasteres", "teste", "tasts", "toastsedes", "treates", "tasteds", "ptasties", "tasteES", "tases"], "min": ["lt", "mn", "mins", "mini", "dot", "margin", "shift", "abs", "Min", "minute", "m", "sin", "default", "emin", "tail", "stat", "in", "sum", "mean", "small", "state", "ms", "im", "start", "scale", "minimum", "ind", "search", "amin", "sort", "init", "test", "lower", "Minimum", "mint", "div", "Mini", "rest", "lock", "mod", "mine", "rel", "none", "max", "cmp", "step", "sample", "diff", "ma", "MIN", "local", " MIN", "add", "med", "second", "minus", "initial", "just", "mit", "sub"], "total": ["offset", "result", "basic", "translation", "created", "eta", "otal", "base", "current", "number", " Total", "system", "latest", "ta", "zero", "n", "summary", "free", "meta", "this", "equal", "sum", "mean", "less", "expected", "unique", "note", "count", "buffer", "sequence", "trace", "Total", "OTAL", "complete", "full", "length", "human", "ful", "done", "normal", "max", "out", "t", "average", "stable", "last", "net", "all", "size", "title", "ty", "checked"], "index": ["set", "num", "ix", "offset", "ex", "limit", "key", "loc", "row", "position", "number", "error", "address", "point", "zero", "id", "exit", "suggest", "level", "update", "close", "start", "ind", "axis", "count", "pos", "list", "instance", "test", "location", "trace", "find", "alias", "status", "lock", "length", "open", "max", "out", "socket", "local", "iter", "info", "label", "size", "Index", "second", "seed", "x"], "i": ["q", "I", "ix", "ri", "key", "phi", "gi", "zi", "iu", "ei", "l", "chain", "ip", "ji", "point", "o", "li", "id", "v", "m", "ij", "n", "ini", "batch", "ai", "go", "im", "ind", "qi", "inter", "ori", "f", "us", "conv", "init", "u", "instance", "io", "ims", "z", "j", "bi", "it", "ui", "ie", "is", "uri", "pi", "g", "ti", "ic", "ci", "sim", "yi", "multi", "t", "iq", "iter", "p", "s", "y", "iri", "ii", "xi", "si", "to", "di", "x", "mi"], "taste": ["tipe", "tolete", "anthate", "antaste", "ktaste", "masty", "antast", "fortast", "rtarte", " twine", "ktipe", "tast", "tasty", "maste", " tast", "fortipe", "mwine", "rtaste", " trite", "ttaste", "fortaste", " tarte", "rtipe", "ktoe", "mast", " tasty", " thate", "thate", "tlete", "mhate", "antrite", "mrite", " toe", "tarte", "toe", "towine", "rtoe", "trite", " tipe", "toasty", "toaste", "ttipe", "twine", "ktarte", " tlete", "ttast", "mlete"], "moo": ["smooo", " moooo", "tmoooo", "tmoodle", " moodle", "mtoda", "moooo", "tmoo", "Mooo", "mutau", "Moe", "tmooo", "Moodle", "Moo", "moe", "smoo", "Moooo", "mutao", "mutoda", "mau", "moda", "mooo", "smoodle", "mtao", " mooo", " moe", "smoe", "manoda", "mtau", "mutoo", "mtoo", "mao", "moodle", "manau", "manoo", "manao"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nimport java.lang.*;\\n\\nclass Main {\\n    public static void main(String [] args){\\n        Scanner scan = new Scanner(System.in);\\n        \\n        while(true){\\n            String s = scan.next();\\n            \\n            if(s.equals(\"-\")){\\n                break;\\n            }\\n            \\n            int m = scan.nextInt();\\n            \\n            for(int i = 0; i < m; ++i){\\n                int h    = scan.nextInt();\\n                String t = s.substring(0, h);\\n                String b = s.substring(h);\\n                \\n                s = b + t;\\n            }\\n            \\n            System.out.println(s);\\n        }\\n    }\\n}\\n", "target": "216", "substitutes": {"scan": ["seek", "save", "spin", "sql", "skip", "row", "nn", "con", "gate", "reach", "pan", "parse", "san", "ser", "sys", "system", "Scan", "connect", "sv", "n", "v", "sin", "read", "in", "ne", "stat", "nl", "can", "get", "report", "go", "scale", "se", "sm", "sync", "search", "send", "scroll", "an", "sc", "find", "ner", "g", "screen", "store", "out", "black", "check", "info", "sur", "query", "ann"], "s": ["set", "q", "gs", "r", "save", "https", "sql", "sf", "sb", "place", "sg", "l", "rs", "sol", "abs", "ns", "sv", "sp", "v", "simple", "source", "stat", "ws", "bs", "raw", "S", "os", "state", "sw", "str", "se", "search", "sl", "es", "ls", "sort", "f", "space", "sts", "string", "is", "ts", "sq", "g", "ss", "js", "sample", "gets", "w", "sam", "qs", "p", "ps", "stats", "st"], "m": ["mn", "mm", "dm", "d", "mo", "l", "perm", "n", "v", "me", "km", "ms", "mu", "esm", "sm", "M", "mas", "bm", "gm", "mk", "tm", "mx", "cm", "k", "c", "mt", "ma", "wm", "p", "man", "mis", "mc", "med", "mi"], "i": ["q", "I", "ix", "phi", "gi", "zi", "iu", "hi", "ip", "li", "id", "n", "v", "ini", "ai", "ind", "a", "us", "init", "u", "j", "bi", "it", "ui", "is", "ie", "pi", "ic", "ci", "sim", "cli", "multi", "iter", "gu", "info", "y", "ii", "xi", "si", "di", "x", "mi", "ish"], "h": ["ho", "he", "rh", "phi", "hi", "hl", "l", "hp", "o", "sh", "kh", "n", "bh", "oh", "dr", "hh", "ih", "hz", "hd", "ht", "z", "hex", "j", "hr", "H", "html", "head", "ph", "w", "p", "ha", "th", "hm", "hs", "ah", "ish"], "t": ["pt", "wt", "l", "temp", "rt", "tg", "ta", "n", "tip", "tr", "tt", "tf", "td", "T", "tty", "a", "tc", "j", "it", "ts", "c", "vt", "txt", "ct", "ot", "out", "p", "y", "te", "ty", "term"], "b": ["br", "xb", "beta", "wb", "sb", "mb", "ob", "bc", "gb", "bf", "db", "bs", "bp", "a", "eb", "f", "fb", "j", "bi", "ib", "bound", "ab", "ba", "bg", "pb", "bt", "bis", "bo", "p", "bb", "cb", "be", "y", "rb", "B"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] P = new int[N];\\n\t\tint[] Q = new int[N];\\n\t\tint a;\\n\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tP[i] = sc.nextInt();\\n\t\t\ta = P[i];\\n\t\t\tQ[i] = a;\\n\t\t}\\n\\n\t\tint count = 0;\\n\t\tfor (int i = 0; i < N - 1; i++) {\\n\t\t\tfor (int j = N - 1; j > i; j--) {\\n\t\t\t\tif (P[j - 1] > P[j]) {\\n\t\t\t\t\tint tmpNum = P[j - 1];\\n\t\t\t\t\tP[j - 1] = P[j];\\n\t\t\t\t\tP[j] = tmpNum;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tif (Q[i] - P[i] != 0) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}\\n\t\tif(count <= 2) {\\n\t\t\tSystem.out.println(\"YES\");\\n\t\t}\\n\t\telse {\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\\n\t}\\n\\n}", "target": "82", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n\tpublic static void main(String args[]){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\\n\t\tboolean flag = true;\\n\t\twhile(flag){\\n\t\t\tString[] input=sc.nextLine().split(\" \");\\n\t\t\tint[] num= new int[input.length];\\n\t\t\tfor(int i=0;i<input.length;i++){\\n\t\t\t\tnum[i]=Integer.parseInt(input[i]);\\n\t\t\t}\\n\t\t\tif(num[0]==0 && num[1]==0){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tfor(int H=0;H<num[0];H++){\\n\t\t\t\tfor(int W=0;W<num[1];W++){\\n\t\t\t\t\tSystem.out.print(\"#\");\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println();\t\t\t\t\\n\t\t\t}\\n\t\t\tSystem.out.println();\t\t\t\t\\n\t\t}\\n\t}\\n}", "target": "87", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sb", "sec", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "nl", "capt", "ec", "cle", "sch", "sw", "se", "sync", "scan", "sq", "cs", "sci", "ss", "nc", "screen", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "ch", "desc", "sub"], "flag": ["set", " Flag", "valid", "again", "stage", "group", "kill", "fail", "enable", "error", "cond", "failed", "flags", "leaf", "id", "wait", "free", "cloud", "stay", "tag", "state", "run", "ret", "lag", "button", "bool", "sync", "load", "flow", "bug", "status", "lock", "lv", "Flag", "quit", "store", "continue", "check", "ld", "bar", "line", "first", "FLAG"], "input": ["q", "ix", "active", "empty", "att", "from", "parse", "feed", "current", "ip", "xml", "total", "qa", "prefix", "focus", "context", "attribute", "source", "in", "batch", "raw", "file", "sum", "print", "lat", "get", "hello", "unknown", "initial", "form", "str", "hidden", "select", "img", "view", "image", "index", "buffer", "history", "pattern", "cmd", "data", "text", "human", "output", "my", "request", "alpha", "out", "check", "char", "add", "Input", "query", "config"], "num": ["nu", "block", "pn", "save", "cal", "dec", "dim", "con", "number", "NUM", "temp", "draw", "len", "total", "zero", "node", "n", "nom", "alph", "important", "rank", "common", "sum", "coord", "im", "mon", "cache", "form", "note", "gen", "count", "img", "norm", "orig", "dev", "um", "no", "nb", "div", "na", "np", "quant", "good", "phy", "Num", "obj", "nm", "multi", "sam", "local", "digit", "nam", "add", "net", "conv", "tu"], "i": ["set", "q", "I", "ix", "ri", "phi", "gi", "iu", "ei", "chain", "ip", "ji", "point", "li", "o", "id", "n", "m", "v", "me", "ini", "in", "batch", "ai", "ms", "ki", "client", "im", "ind", "qi", "index", "us", "init", "u", "io", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "inner", "json", "ti", "ic", "ci", "c", "cli", "e", "PI", "multi", "iter", "info", "y", "ii", "xi", "si", "di", "x", "mi"], "H": ["Eh", "HE", "MH", "HQ", "High", "HL", "ANG", "N", "h", "EH", "HA", "SH", "G", "HS", "S", "WH", "P", "He", "T", "HH", "HT", "R", "FH", "V", "M", "NH", "CH", "HO", "Wh", "HI", "IL", "HC", "TH", "Y", "L", "Host", "His", "J", "K", "HTTP", "HTML", "OH", "Han", "B"], "W": ["Z", "Window", "Win", "BW", "WA", "N", "WC", "OW", "CW", "Weight", "MW", "Widget", "G", "S", "WH", "P", "SW", "T", "Writer", "EW", "WE", "R", "Week", "VW", "V", "M", "WP", "Word", "WW", "NW", "Wh", "TW", "WS", "Y", "L", "We", "J", "Watch", "w", "X", "FW", "Width", "WAR", "HTML", "DW", "WD", "WR", "B"]}}
{"code": "import java.util.*;import java.io.*;import java.math.*;\\npublic class Main\\n{\\n    public static void process()throws IOException\\n    {\\n        int n=ni();\\n        BigInteger prod=BigInteger.ONE;\\n        long[]A=nal(n);\\n        Arrays.sort(A);\\n        for(int i=0;i<n;i++)\\n        {\\n            String s=Long.toString(A[i]);\\n            prod=prod.multiply(new BigInteger(s));\\n            if(prod.compareTo(new BigInteger(Long.toString((long)1e18)))>0)\\n            {\\n                pn(\"-1\");\\n                return;\\n            }\\n        }\\n        pn(prod);\\n    }\\n\\n    static AnotherReader sc;\\n    static PrintWriter out;\\n    public static void main(String[]args)throws IOException\\n    {\\n        boolean oj =true;\\n        if(oj){sc=new AnotherReader();out=new PrintWriter(System.out);}\\n        else{sc=new AnotherReader(100);out=new PrintWriter(\"output.txt\");}\\n        int t=1;\\n        // t=ni();\\n        while(t-->0) {process();}\\n        out.flush();out.close();  \\n    }\\n\\n    static void pn(Object o){out.println(o);}\\n    static void p(Object o){out.print(o);}\\n    static void pni(Object o){out.println(o);out.flush();}\\n    static int ni()throws IOException{return sc.nextInt();}\\n    static long nl()throws IOException{return sc.nextLong();}\\n    static double nd()throws IOException{return sc.nextDouble();}\\n    static String nln()throws IOException{return sc.nextLine();}\\n    static int[] nai(int N)throws IOException{int[]A=new int[N];for(int i=0;i!=N;i++){A[i]=ni();}return A;}\\n    static long[] nal(int N)throws IOException{long[]A=new long[N];for(int i=0;i!=N;i++){A[i]=nl();}return A;}\\n    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}\\n    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}\\n    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}\\n\\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    static class AnotherReader{BufferedReader br; StringTokenizer st;\\n    AnotherReader()throws FileNotFoundException{\\n    br=new BufferedReader(new InputStreamReader(System.in));}\\n    AnotherReader(int a)throws FileNotFoundException{\\n    br = new BufferedReader(new FileReader(\"input.txt\"));}\\n    String next()throws IOException{\\n    while (st == null || !st.hasMoreElements()) {try{\\n    st = new StringTokenizer(br.readLine());}\\n    catch (IOException  e){ e.printStackTrace(); }}\\n    return st.nextToken(); } int nextInt() throws IOException{\\n    return Integer.parseInt(next());}\\n    long nextLong() throws IOException\\n    {return Long.parseLong(next());}\\n    double nextDouble()throws IOException { return Double.parseDouble(next()); }\\n    String nextLine() throws IOException{ String str = \"\"; try{\\n    str = br.readLine();} catch (IOException e){\\n    e.printStackTrace();} return str;}}\\n   \\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n}\\n", "target": "27", "substitutes": {"n": ["nu", "mn", "num", "r", "d", "nn", "nia", "l", "nr", "len", "N", "o", "ns", "m", "v", "nan", "ne", "nl", "cn", "ni", "sn", "f", "on", "j", "no", "nb", " N", "pi", "nc", "fn", "na", "np", "k", "en", "c", "nm", "w", "p", "ln", "size", "nt"], "prod": ["Prob", " proD", "prob", " Prop", "prg", " Prob", " prop", " prods", " proj", "Prods", "Prog", "prd", " ProD", "prj", " Prods", "Prosd", "ProD", " Proj", "prop", " Prod", "Prod", "prl", " prosd", " pron", "prosd", " prog", "prsd", "Prop", "prD", "proD", "prog", "prol", " prol", "prods", "Pron", " Prol", " prob", "pron", "Prol", "Proj", "proj", "prn", "prb"], "A": ["D", "AA", "I", "Array", "MA", "Alpha", "CA", "N", "AE", "AC", "All", "At", "As", "SA", "G", "S", "P", "Ar", "IA", "a", "GA", "V", "LA", "M", "API", "AN", "AL", "H", "C", "AP", "AM", "AB", "An", "AS", "NA", "Y", "AI", "L", "K", "AR", "EA", "X", "BA", "AF", "ACT", "B", "AT"], "i": ["set", "I", "ix", "ex", "ri", "spin", "key", "phi", "gi", "hi", "ip", "point", "o", "li", "id", "m", "ij", "ini", "in", "batch", "ski", "ai", "ms", "ki", "im", "ind", "qi", "a", "index", "f", "us", "init", "u", "\u0438", "j", "bi", "it", "ui", "is", "uri", "pi", "ti", "ci", "sim", "my", "cli", "PI", "multi", "p", "gu", "iter", "info", "y", "ii", "xi", "si", "span", "di", "x", "mi"], "s": ["set", "gs", "r", "sql", "sb", "l", "rs", "sol", "sys", "ns", "sv", "simple", "S", "os", "ms", "its", "less", "sw", "str", "a", "b", "fs", "ls", "single", "j", "string", "is", "ts", "sq", "ss", "c", "js", "ds", "p", "qs", "ps", "hs"], "sc": ["usc", "uc", "lc", " unsc", "cc", "anc", "esc", "ser", "cl", "sh", "cr", "bc", "sp", "soc", "unc", "ec", "capt", "cu", "sch", "sw", "tch", "tc", "cv", "sq", "cs", "nc", "c", "osc", "ct", "Sc", "gc", "icc", "asc", "isc", "SC", "mc", "pc", "rc", " subsc", "psc", "cus", "ch"], "out": ["br", "println", "ou", "r", "result", "ex", "end", "d", "con", "writer", "error", "co", "nr", "o", "log", "console", "conn", "po", "err", "in", "msg", "ne", "cn", "print", "OUT", "yout", "os", "can", "report", "file", "client", "or", "res", "gt", "at", "list", "io", "ent", "j", "it", "aos", "Out", "null", "display", "inner", "window", "screen", "c", "std", "output", "input", "txt", "inv", "pool", "w", "ot", "gc", "p", "ac", "check", "we", "up", "crit", "net", "all", "conv", "nt", "ch", "outs", "st"], "oj": ["og", " hey", " oval", " timber", "ob", "jl", "jing", "oa", "oos", "ooter", "o", "oly", " jo", "so", "ij", "fo", "oh", "bol", "son", "oz", "jpg", "och", "ooo", "ool", "bj", " terr", "obile", "uj", "artz", "iso", "aj", "js", "obj", "ov", "bo", " nihil", "ot", "oval", "ochem", " moot", "onet", "ooth", "ox", "oji", "tek"], "t": ["set", "q", "name", "l", "total", "o", "h", "ta", "v", "m", "T", "start", "a", "count", "u", "z", "j", "it", "ts", "g", "c", "step", "e", "w", "p", "y", "x"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String[] args){\\n        Scanner s = new Scanner(System.in);\\n        int n = s.nextInt();\\n\\n        int[] cardList = new int[n];\\n        int[] player = new int[2];\\n        for(int i=0;i<n;i++){\\n            cardList[i] = s.nextInt();\\n        }\\n\\n        Arrays.sort(cardList);\\n\\n        int switchPlayer = 0;\\n\\n        for(int i=n-1;i>=0;i--){\\n            if(switchPlayer == 0){\\n                player[0] += cardList[i];\\n                switchPlayer = 1;\\n            } else {\\n                player[1] += cardList[i];\\n                switchPlayer = 0;\\n            }\\n        }\\n\\n        System.out.println(player[0] - player[1]);\\n\\n\\n    }\\n\\n}", "target": "132", "substitutes": {"s": ["gs", "aws", "sb", " fs", "l", "rs", "sol", "abs", "http", "sys", "h", "ns", "so", "sv", "sa", "ws", "S", "os", "ms", "self", "less", "ys", "sw", "ats", "se", "b", "sm", "sl", "fs", "ls", "es", "ssl", "sts", "is", "ts", "sq", "ss", "js", "ds", "gets", "sam", "ses", "p", "xs", "ps", "conv", "hs"], "n": ["num", "mn", "r", "nu", "d", "ll", "nn", "number", "l", "un", "len", "N", "gn", "total", "ns", "o", "m", "v", "nan", "ne", "nl", "cn", "sn", "count", "z", "j", "no", "nb", "na", "nc", "k", "np", "length", "en", "c", "ot", "ng", "t", "p", "network", "ln", "net", "size", "nt"], "cardList": ["roleList", "controllerLIST", "ardList", "avList", "cardsArray", "cardSet", " cardString", "rollPool", "rollL", "rowLIST", "rowPool", "cardsList", "avLIST", " cardArray", "cardString", "decklist", "cardArray", "formTable", "cardL", "formList", "deckList", "Cardlist", "controllerString", "rowList", " cardPool", "roleLIST", " cardSet", "avlist", "cardsSet", "cardPool", "CardList", "rollLIST", "deckTable", "cardslist", " cardLIST", " cardL", "formlist", "formLIST", "rowL", " cardTable", "ardLIST", "rollList", "cardLIST", "ardlist", "cardTable", "roleString", "CardSet", "cardlist", "deckLIST", "CardArray", "controllerList", " cardlist"], "player": ["loader", "wrapper", "card", "game", "stage", "master", "position", "uner", "part", "point", "layer", "holder", "member", "players", "sector", "soc", "vote", "played", "level", "rank", "actor", "pair", "profile", "playing", "handler", "leader", "slot", "ler", "runner", "pro", "taker", "buffer", "field", "match", "pointer", "roller", "seller", "board", "worker", "ball", "league", "PLAY", "bet", "play", "winner", "timer", "hander", "table", "score", "pad", "battle", "ower", "er", "role", "controller", "shot", "header", "Player", "hero", "seed", "video", "peer"], "i": ["q", "ix", "zi", "iu", "used", "base", "ei", "li", "batch", "ai", "ms", "ki", "ims", "is", "eu", "ic", "y", "oi", "di", "x", "ri", "fi", "chain", "ip", "ji", "point", "o", "asi", "ij", "in", "client", "ori", "io", "sequence", "z", "bi", "it", "inner", "ci", "sim", "cli", "exp", "uni", "ii", "ex", "phi", "hi", "print", "ni", "ind", "\u0438", "u", "fire", "pi", "iso", "my", "gu", "p", "xi", "si", "mi", "I", "gi", "v", "m", "ini", "err", "im", "qi", "index", "us", "init", "j", "ui", "ie", "uri", "ti", "record", "uli", "multi", "iter", "info"], "switchPlayer": ["SwitchBet", "changeListener", "SwitchPlayer", " switchBet", "SwitchRole", "switchPart", "witchListener", "itcherRole", "switchListener", "switchRole", "itcherPart", "changePlayer", " switchListener", "itcherPlayer", "SwitchWinner", "switchBet", "SwitchComputer", "witchComputer", "itcherComputer", "voteBet", "switchWinner", " switchPart", "witchRole", "itcherWinner", "Switchplayer", "voteComputer", "witchplayer", " switchComputer", "voteplayer", "votePlayer", "switchComputer", "switchplayer", "witchWinner", "witchPart", "changeplayer", "itcherplayer", " switchplayer", "witchPlayer"]}}
{"code": "//make sure to make new file!\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n   \\n   public static void main(String[] args)throws IOException{\\n      BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\\n      PrintWriter out = new PrintWriter(System.out);\\n      \\n      StringTokenizer st = new StringTokenizer(f.readLine());\\n      \\n      int n = Integer.parseInt(st.nextToken());\\n      int a = Integer.parseInt(st.nextToken());\\n      int b = Integer.parseInt(st.nextToken());\\n      \\n      int answer = Math.min(n*a,b);\\n      out.println(answer);\\n\\n      \\n      \\n      \\n      \\n      out.close();\\n   }\\n   \\n      \\n}", "target": "213", "substitutes": {}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\tstatic PrintWriter out;\\n\tstatic StringBuilder sb;\\n\tstatic int mod = 1000000007;\\n\tstatic long inf = (long) 1e16;\\n\tstatic int[] l, r;\\n\tstatic int n, c, t;\\n\tstatic ArrayList<Integer>[] ad;\\n\tstatic long[][][] memo;\\n\tstatic boolean f;\\n\tstatic boolean[] vis[];\\n\tstatic int[][] mat, mat1;\\n\tstatic int[] ans, a;\\n\tstatic ArrayList<Integer> rr, bb, gg;\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tout = new PrintWriter(System.out);\\n        int ans=0;\\n        String s=sc.nextLine();\\n        if(s.contains(\"R\"))\\n        \tans++;\\n        if(s.contains(\"RR\"))\\n        \tans++;\\n        if(s.contains(\"RRR\"))\\n        \tans++;\\n        System.out.println(ans);\\n\t\tout.flush();\\n\t}\\n\\n\tstatic class Scanner {\\n\t\tStringTokenizer st;\\n\t\tBufferedReader br;\\n\\n\t\tpublic Scanner(InputStream system) {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(system));\\n\t\t}\\n\\n\t\tpublic Scanner(String file) throws Exception {\\n\t\t\tbr = new BufferedReader(new FileReader(file));\\n\t\t}\\n\\n\t\tpublic String next() throws IOException {\\n\t\t\twhile (st == null || !st.hasMoreTokens())\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\\n\t\tpublic String nextLine() throws IOException {\\n\t\t\treturn br.readLine();\\n\t\t}\\n\\n\t\tpublic int nextInt() throws IOException {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\\n\t\tpublic double nextDouble() throws IOException {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tpublic char nextChar() throws IOException {\\n\t\t\treturn next().charAt(0);\\n\t\t}\\n\\n\t\tpublic Long nextLong() throws IOException {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\\n\t\tpublic int[] nextArrInt(int n) throws IOException {\\n\t\t\tint[] a = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextInt();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic long[] nextArrLong(int n) throws IOException {\\n\t\t\tlong[] a = new long[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextLong();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic boolean ready() throws IOException {\\n\t\t\treturn br.ready();\\n\t\t}\\n\\n\t\tpublic void waitForInput() throws InterruptedException {\\n\t\t\tThread.sleep(3000);\\n\t\t}\\n\t}\\n}\\n", "target": "141", "substitutes": {"out": ["println", "ou", "ex", "outer", "flush", "writer", "error", "co", "sys", "o", "log", "rt", "conn", "ch", "err", "in", "bs", "OU", "print", "OUT", "os", "write", "tx", "str", "at", "b", "list", "io", "it", "aos", "Out", "null", "inner", "screen", "table", "obj", "output", "txt", "w", "ot", "p", "info", "ln", "net", "to", "nt", "res", "outs"], "sb": ["sf", "mb", "rb", "sv", "sp", "lp", "gb", "bh", "bf", "db", "sa", "bs", "bn", "bp", "src", "sn", "sw", "sm", "bd", "sq", "bg", "pb", "bt", "gc", "cb", "SB", "si", "erb"], "mod": ["od", "dec", "Mod", "base", "ver", "log", "ref", "id", " max", "m", " Mod", "ran", "tr", "lo", "MOD", "fac", " ver", "mem", " rad", "mode", "max", "ffff", "add", "rc"], "inf": [" lim", " ptr", " repl", " mag", " mant", "log", " def", " log", "Inf", "lo", " incl", " z", " sd", " pow", " fe", " pi", " large", " dig", " infinity", " rad", " delta", " ord", " rc", " pref", "ffff", " lo", " ref", " exp"], "l": ["lt", "lc", "ll", "d", "len", "cl", "li", "o", "h", "v", "m", "lo", "le", "b", "lr", "ls", "j", "g", "L", "e", "p", "ln"], "r": ["q", "rar", "ar", "rs", "rt", "cr", "m", "dr", "rd", "tr", "err", "ro", "R", "ru", "lr", "rl", "rec", "rn", "er", "p", "re", "rc", "rb", "ra", "sr"], "n": ["num", "nu", "println", "d", "nn", "_", "N", "o", "h", "ns", "m", "v", "in", "ne", "bl", "nl", "cn", "sn", "b", "on", "u", "an", "z", "j", "nb", "g", "na", "k", "np", "nm", "e", "w", "p", "nd", "ln", "def", "y", "char", "nt", "x"], "c": ["lc", "ca", "col", "cc", "co", "cf", "bc", "cr", "v", "m", "cp", "b", "tc", "cat", "cd", "cs", "g", "cm", "ci", "ct", "e", "x", "p", "cb", "rc", "ch"], "t": ["pt", "rt", "tg", "ta", "o", "v", "m", "tr", "tt", "tf", "tw", "T", "type", "tc", "tm", "ts", "ti", "txt", "p", "tl", "y", "te", "dt", "ty", "tu"], "ad": ["dat", "ae", "od", "acc", "ax", "att", "dd", "quad", "ads", "adj", "id", "da", "db", "dc", "al", "ade", "ind", "edd", "mad", "ard", "lad", "pad", "ada", "ac", "ld", "add", "ag", "adr", "am"], "memo": ["smoa", "regoa", "rego", "regl", "raml", "memy", "smo", "smy", "memoa", "ramo", "ramoa", "sml", "ramy", "regy", "meml"], "f": ["F", "d", "fi", "fd", "ff", "h", "v", "m", "fo", "free", "bf", "fe", "fp", "fc", "fs", "u", "fb", "g", "fl", "fa", "e", "w", "fr", "p", "fw", "fm", "cf"], "vis": ["av", "cal", "skip", "eye", "rev", "var", "visible", "cl", "miss", "circ", "ref", "v", "dc", "pos", "fs", "const", "ir", "cv", "vert", "vid", "vt", "inv", "reverse", "exc", "flag", "di", "map"], "mat": ["dat", "mm", "rat", "att", "ar", "dim", "mp", "wt", "rt", "hat", "feat", "m", "tt", "mr", "mut", "act", "mon", "at", "mem", "pat", "cat", "mas", "bm", "tm", "mt", "mult", "cas", "mc", "mi"], "mat1": ["match3", "Mat1", "Mat3", "mat2", "Mat2", "match1", "mat3", " mat2", " mat3", "match2"], "ans": ["gs", " means", "uns", "ents", "ints", "acs", "izes", "vals", "aus", "rs", "anas", "ums", "flags", "eds", "ns", "ads", "ks", "ran", "ces", "beans", "orders", "ars", "os", "can", "ms", "ids", "arts", "ANS", "ys", "amps", "ats", " opens", "ants", "ens", "ags", "als", "ls", "an", "ows", "uploads", "angs", "ann", "aos", "vs", "mas", "ays", "ts", " spans", "ams", " scans", "sts", "ones", "orts", "cs", "ops", "ins", "aps", "olds", "ds", "books", "as", "cons", "posts", "ots", "xs", "lets", "lan", "offs", "outs", "ros"], "a": ["ae", "ca", "acc", "d", "att", "ar", "o", "ta", "m", "aa", "sa", "al", "ai", "A", "b", "at", "u", "an", "ga", "ao", "j", "ab", "pa", "area", "ba", "na", "alpha", "ap", "w", "as", "e", "p", "ac", "all", "am"], "rr": ["raf", "rg", "rar", "rs", "nr", "rf", "rt", "vr", "cr", "rid", "dr", "rd", "err", "rog", "mr", "rm", "lr", "ir", "rig", "RR", "rl", "rn", "rx", "re", "rc", "rb", "ra", "gr"], "bb": ["xb", "mb", "ob", "bc", "gb", "bf", "db", "bre", "bs", "bn", "bp", "bj", "b", "ble", "eb", "bd", "fb", "bi", "bm", "nb", "arb", "ba", "bg", "bt", "cb", "rb", "abb"], "gg": ["gs", "og", "rg", "gio", "gi", "GG", "gd", "tg", "eg", "gb", "gy", "pg", "mg", "ge", "rog", "go", "gt", "ga", "gm", "g", "bg", "gc", "gu", "ogg", "gre", "gz", "gr", "gp"], "sc": ["lc", "cc", "esc", "sec", "ser", "sys", "cl", "bc", "sv", "sp", "cr", "ec", "cle", "sch", "sync", "tc", "sq", "cs", "ss", "nc", "sk", "osc", "Sc", "gc", "scl", "asc", "isc", "scope", "ctx", "SC", "pc", "rc", "ch"], "s": [" ls", "gs", "eps", "sql", "details", " ss", "rs", "h", "ns", "sv", "ks", "strings", "m", "styles", "ws", "parts", "S", "os", "csv", "its", "ids", "ms", "ats", "str", "south", "b", "fs", "sl", "ls", "ims", "space", "sts", " cs", "vs", "uses", "ts", "sq", "cs", "g", "ss", "tests", "js", "ins", "ds", "gets", "ses", "qs", "changes", "ps", "xs", "stats", "hs", "names"], "st": ["set", "lt", " St", "sth", "cl", "rt", "sh", "usr", "sv", "sp", "tmp", "cr", "so", "ch", "tr", "sta", "sa", "stat", "ste", "St", "stri", "sn", "sw", "ut", "str", "start", "se", "ist", "sm", "sl", "inst", "const", "ost", "must", "sts", "sty", "est", " ST", "rest", "stream", "et", "irst", "bt", "std", "step", "mt", "ct", "fr", "nd", "ft", "stable", "th", "ust", "ST", "x", "first"], "br": ["ctr", "bro", "shr", "nr", "bsp", "vr", "bc", "ber", "cr", "sp", "dr", "bh", "tr", "bridge", "err", "bre", "stat", "bl", "bs", "bn", "bp", "Br", "mr", "buf", "str", "BR", "b", "bd", "lr", "kr", "bern", "hr", "bm", "pr", "ba", "wr", "pb", "bt", "browser", "fr", "rb", "sr", "gr"], "system": ["sy", "from", "sys", "server", "config", "in", "this", "os", "host", "user", "str", "shell", "ystem", "fs", "object", "buffer", "reader", "string", "null", "media", "problem", "stream", "directory", "status", "iso", "sim", "input", "storage", "local", "localhost", "STEM", "net", "si", "proc"], "file": ["set", "name", "File", "base", "tree", "filename", "resource", "db", "source", "remote", "path", "report", "FILE", "str", "fp", "image", "ile", "range", "string", "document", "message", "model", "text", "stream", "template", "data", "lock", "table", "mail", "input", "link", "style", "local", "library", "p", "dir", "title", "line"], "i": ["q", "I", "phi", "gi", "zi", "ei", "ip", "li", "v", "m", "me", "ini", "ai", "mu", "im", "qi", "u", "j", "bi", "ui", "pi", "ci", "sim", "cli", "multi", "y", "xi", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.*;\\npublic class Main{\\npublic static void main(String[] args){\\nScanner sc = new Scanner(System.in);\\n  int[] a = {1,4,8,16,32,64,128,256,512,9,27,81,243,729,25,125,625,49,343,121,169,289,361,529,841,961,36,216,100,1000,144,196,225,256,324,400,441,484,576,676,784,900};\\n  int x = sc.nextInt();\\n  Arrays.sort(a);\\n  for(int i = a.length-1;i >= 0;i--){\\n    if(a[i] <= x){\\n      System.out.println(a[i]);\\n      break;\\n    }\\n  }\\n}}\\n", "target": "143", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "dec", "esc", "sec", "co", "cl", "sys", "system", "Scan", "sv", "sp", "bc", "cr", "inc", "cle", "sel", "spec", "src", "sch", "sw", "sm", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "conv", "ch", "desc", "sub"], "a": ["set", "ae", "ca", "ar", "array", "oa", "h", "ta", "v", "m", "aa", "da", "aw", "sa", "sta", "parts", "sha", "wa", "ai", "go", "A", "b", "at", "f", "ack", "index", "an", "la", "ga", "ao", "j", "xa", "aos", "ab", "ea", "apa", "g", "na", "aaa", "ba", "aka", "c", "fa", "ap", "w", "ma", "as", "eas", "p", "ac", "t", "exp", "changes", "up", "au", "all", "aux", "ata", "am"], "x": ["ix", "ex", "wx", "xb", "ax", "ox", "h", "v", "n", "tt", "pe", "xf", "xy", "tx", "inx", "xe", "xx", "index", "px", "xc", "z", "xa", "dx", "lex", "mx", "xt", "xxx", "xd", "max", "X", "check", "rx", "p", "ux", "ctx", "y", "xs", "xi", "xp"], "i": ["q", "I", "ix", "ri", "phi", "gi", "hi", "iu", "ei", "l", "chain", "ip", "ji", "li", "n", "v", "m", "me", "ini", "in", "ai", "ni", "ki", "ind", "qi", "index", "us", " ii", "init", "\u0438", "io", "j", "bi", "it", "ui", "is", "pi", "ti", "ic", "ci", "sim", "cli", "uli", "multi", "iq", "gu", "ami", "y", "xi", "ii", "si", "span", "di", "mi"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = Integer.parseInt(sc.next());\\n\t\tint[] L = new int [n];\\n\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\tL[i] = Integer.parseInt(sc.next());\\n\t\t}\\n\t\tsc.close();\\n\t\tArrays.sort(L);\\n\t\tint max = L[n-1];\\n\t\tint sum = 0;\\n\t\tfor(int i=0;i<n-1;i++) {\\n\t\t\tsum += L[i];\\n\t\t}\\n\t\tif(max < sum) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n\\n}\\n", "target": "25", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "cer", "anc", "esc", "sec", "cl", "sys", "Scan", "sh", "ser", "cr", "bc", "sv", "sp", "dc", "nl", "capt", "ec", "cle", "sel", "irc", "sch", "sync", "fc", "func", "tc", "scan", "sq", " Sc", "cs", "sci", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "st", "sub"], "n": ["num", "mn", "nu", "q", "name", "d", "ll", "nn", "l", "number", "un", "len", "N", "o", "gn", "ns", "m", "v", "ne", "nan", "nl", "cn", "sn", "f", "on", "norm", "z", "j", "no", "nb", " N", "pi", "na", "nc", "k", "np", "g", "en", "c", "ng", "t", "p", "ln", "net", "size", "all", "nt", "x", "names"], "L": ["Z", "I", "Lu", "LT", "F", "LB", "BL", "LC", "l", "N", "Li", "TL", "LD", "LE", "O", "S", "P", "LI", "T", "LL", "NL", "R", "Q", "V", "M", "SL", "AL", "FL", "H", "C", "LP", "CL", "IL", "LM", "PL", "LG", "J", "K", "X", "DL", "ML", "LV", "XL", "EL", "LU", "LR", "LS", "B"], "i": ["q", "I", "ix", "ri", "phi", "gi", "hi", "iu", "zi", "php", "base", "iy", "l", "ip", "ei", "chain", "ji", "fi", "li", "point", "id", "ij", "me", "ini", "err", "batch", "ai", "ki", "client", "im", "qi", "ori", "us", "init", "\u0438", "fire", "io", "ims", "j", "bi", "it", "ity", "ui", "ie", "is", "uri", "pi", "inner", "et", "g", "iso", "json", "ti", "ic", "ci", "c", "sim", "cli", "multi", "iter", "info", "ami", "y", "oi", "ii", "xi", "si", "di", "mi"], "max": ["num", "end", "name", "ax", "maximum", "best", "total", "h", "m", "top", "mean", "ms", "right", "auto", "res", "scale", "min", "range", "mad", "full", "huge", "rest", "k", "mx", "head", "out", "ma", "Max", "last", "MAX", "size", "med", "all", "x", "window", "hash"], "sum": ["Sum", "mess", "num", "sat", "result", "dot", "cos", "temp", "weight", "ums", "total", "latest", "zero", " SUM", "tmp", "summary", "ash", "tail", "by", "important", "mean", "mu", "cache", "scale", "count", "min", "us", "index", "match", "mem", "must", "sup", "um", "si", "success", "cum", "vol", "mod", "good", "sim", "cmp", "alpha", "sam", "ma", "average", "add", "size", "med", "cost", "hash"]}}
{"code": "/*\\n *  author : Atul Anand   \\n *  created on : Wed Apr 01 2020\\n */\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) throws IOException {\\n        String S = in.next();\\n        String T = in.next();\\n        int a = in.nextInt();\\n        int b = in.nextInt();\\n        String U = in.next();\\n        if(S.equals(U)){\\n            println((a-1) +\" \"+ b);\\n        }\\n        else{\\n            println(a +\" \" + (b-1));\\n        }\\n        \\n        in.close();\\n        out.close();\\n    }\\n\\n    static int MIN = Integer.MIN_VALUE;\\n    static int MAX = Integer.MAX_VALUE;\\n    static Reader in = new Reader();\\n    static PrintWriter out = new PrintWriter(System.out);\\n\\n    static void read(int arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextInt(); \\n    \t} \\n    }\\n    \\n    static void read(long arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextLong(); \\n    \t} \\n    }\\n    \\n    static void read(String arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.next(); \\n    \t} \\n    }\\n    \\n    static void print(Object O) {  \\n    \tout.print(O); \\n    }\\n    \\n    static void println(Object O) { \\n    \tout.println(O); \\n    }\\n    \\n    static void println(int arr[]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprint(arr[i]+\" \"); \\n    \t} \\n    \tprintln(\"\"); \\n    }\\n\\n    static void println(int arr[][]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprintln(arr[i]); \\n    \t}\\n    }\\n    \\n    static void debug(Object O) { \\n    \tSystem.out.println(O); \\n    }\\n}\\n\\nclass Reader {\\n    BufferedReader reader;\\n    StringTokenizer tokenizer;\\n\\n    Reader() {\\n        reader = new BufferedReader(new InputStreamReader(System.in));\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n\\n    String next() throws IOException {\\n        while (!tokenizer.hasMoreTokens() ) { \\n            tokenizer = new StringTokenizer(reader.readLine()); \\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    int nextInt() throws IOException { \\n        return Integer.parseInt(next()); \\n    }\\n    \\n    double nextDouble() throws IOException { \\n        return Double.parseDouble(next());\\n    }\\n    \\n    long nextLong() throws IOException { \\n        return Long.parseLong(next()); \\n    }\\n    \\n    String nextLine() throws IOException { \\n        return reader.readLine(); \\n    }\\n    \\n    void close() throws IOException { \\n        reader.close(); \\n    }\\n}", "target": "155", "substitutes": {"S": ["D", "I", "Z", "STR", "F", "SI", "E", "TS", "G", "SP", "P", "SU", "R", "A", "Q", "V", "M", "H", "C", "Y", "L", "SS", "J", "X", "s", "SB", "ST", "B"], "T": ["Z", "TT", "F", "TB", "E", "TS", "WT", "TR", "G", "P", "Type", "Q", "V", "M", "W", "TA", "GT", "C", "TY", " t", "Y", "L", "XT", "J", "t", "ST", "B", "TO"], "a": ["ae", "ca", "d", "ar", "ra", "l", "oa", "o", "ta", "n", "aa", "sa", "ak", "ai", "A", "at", "f", "ia", "u", "an", "z", "ao", "j", "ab", "pa", "ea", "ba", "aaa", "c", "aj", "e", "as", "t", "ma", "p", "s", "ac", "au", "to", "va", "x", "am"], "b": ["r", "d", "sb", "base", "l", "bc", "n", "v", "db", "by", "bs", "bp", "ub", "eb", "u", "fb", "buffer", "z", "j", "bi", "ib", "nb", "ab", "ba", "bt", "c", "e", "t", "s", "p", "bb", "binary", "y", "be", "rb", "x", "B"], "U": ["D", "I", "UC", "F", "E", " u", "UV", "BU", "G", "OU", "P", "EU", "SU", "R", "UF", "Q", "A", "UE", "V", "UU", "M", "u", "US", "UP", "UD", "MU", "Y", "L", "UI", "UL", "UT", "UID", "UM", "B"], "MIN": ["VERSION", "MO", "BL", "NUM", "SIZE", "MODE", "Min", "LE", "IN", "NO", "FAULT", "STAT", "min", "NR", "MED", "M", "Minimum", "ID", "BY", "TYPE", "Mini", "VAL", "VALUE", "VER", "NI", "KEY", "B"], "MAX": ["VERSION", "GEN", "DD", "MA", "NUM", "SIZE", "ALL", " max", "IN", "MOD", "FAULT", "MED", "M", "EST", "MAP", "VAL", "CR", "FFFF", "max", "ION", "X", "MX", "VALUE", "AX", "Max", "Maximum"], "in": ["q", "r", "gin", "d", "bin", "from", "n", "raw", "per", "f", "on", "ssl", "din", "is", "data", "cm", "ic", "ins", "conf", "net", "all", "ri", "inf", "l", "h", "o", "read", "doc", "IN", "or", "form", "io", "it", "scan", "stream", "inner", "local", "s", "end", "ex", "inc", "file", "rin", "serv", "ind", "lin", "In", "nin", "input", "ma", "p", "re", "add", "mm", "con", "reset", "m", "ini", "inn", "get", "im", "at", "init", "buffer", "en", "er", "cin", "iter", "info", "t", "up"], "out": ["ou", "r", "name", "end", "outer", "writer", "error", "co", "o", "sys", "log", "put", "Output", "server", "n", "v", "conn", "console", "exit", "err", "OU", "file", "OUT", "os", "print", "report", "write", "client", "cache", "auto", "at", "str", "list", "on", "u", "io", "it", "aos", "Out", "null", "inner", "screen", "table", "c", "obj", "output", "input", "txt", "pool", "w", "format", "t", "pretty", "p", "net", "all", "to", "nt", "outs", "st"], "arr": ["br", "r", "av", "coll", "emb", "ll", "row", "array", "n", " str", "batch", "Ar", "str", "inst", "pr", "data", "def", "ARR", "all", "x", "ars", "res", "map", "rr", "vals", "rs", "vec", "aa", "app", "db", "resp", "alph", "attr", "lay", "ang", "z", "ext", "rest", "arb", "js", "fr", "exp", "iq", "ag", "expr", "dat", "Array", "att", "ar", "frac", "var", "ref", "tmp", "dr", "tr", "stock", "rep", "bl", "val", "dict", "act", "list", "req", "ptr", "rel", "addr", "save", "ray", "pl", "v", "err", "enc", "buf", "warn", "img", "j", "repl", "vs", "par", "ab", "vol", "aaa", "aj", "obj", "nt", "ev", "gr"], "N": ["New", "I", "Node", "Z", "TN", "D", "F", "Body", "NM", "ND", "NUM", "SN", "NP", "NE", "NB", "n", "No", "G", "P", "NG", "OUT", "NO", "NL", "R", "NS", "NR", "V", "ANY", "M", "NH", "None", "GN", "NC", "H", "C", "Number", "NN", "Num", "NA", "L", "NEW", "Y", "J", "K", "NOTE", "Length", "NI", "NT", "B", "Ns"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "f", "ims", "is", "you", "ic", "c", "e", "ios", "ami", "y", "oi", "di", "ri", "fi", "ip", "ji", "o", "id", "ij", "io", "bi", "it", "ci", "sim", "cli", "ii", "ex", "phi", "hi", "php", "dr", "remote", "this", "ni", "ind", "ia", "u", "fire", "\u0438", "status", "pi", "et", "my", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "err", "ski", "im", "qi", "us", "init", "ies", "j", "ity", "ui", "ie", "uri", "ti", "multi", "info", "to"], "O": ["I", "PO", "MO", "F", "OO", "OC", "E", "o", "OD", "GO", "OX", "IO", "OU", "OS", "OUT", "P", "DO", "R", "SO", "RO", "V", "M", "OL", "VO", "Obj", "Out", "OT", "OTO", "Os", "H", "C", "BO", "OG", "Y", "L", "J", "OB", "OR", "OH", "TO"], "reader": ["loader", "rr", "wrapper", "r", "driver", "rar", "row", "writer", "builder", "holder", "read", "ro", "handler", "mr", "tty", "Reader", " read", "runner", "buffer", "board", "parser", "oder", "data", "rl", "inner", "ner", "lock", "stream", "linger", "redo", "iterator", "input", "er", "iter", "rx", "rc"], "tokenizer": [" tokenize", " tokenization", "tokenize", " tokenifier", "Tokenizer", "recognifier", "Tokenization", "serialization", "Tokenizers", "recognize", "serialifier", "tokenizers", "recognizer", "tokenization", "serializer", " tokenizers", "Tokenifier", "tokenifier", "serialize", "recognizers", "recognization"]}}
{"code": "//package atcoder.ABC;\\nimport java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner input = new java.util.Scanner(System.in);\\n\t\t\\n\t\tString a = input.next();\\n\t\tString b = input.next();\\n\t\tString c = input.next();\\n\t\t\\n\t\tSystem.out.println(c+\" \"+a+\" \"+b);\\n\t\t\\n\t}\\n\\n}\\n", "target": "149", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static int dp[];\\n  public static int func(int a[],int i)\\n  {\\n    if(i>=a.length)\\n    return 10000000;\\n    if(i==a.length-1)\\n    return 0;\\n    if(dp[i]!=-1)\\n    return dp[i];\\n    if(i<a.length-2)\\n    {\\n      dp[i]=Math.min(Math.abs(a[i]-a[i+2])+\\n            func(a,i+2),\\n            Math.abs(a[i]-a[i+1])+\\n            func(a,i+1));\\n    }\\n    else\\n    {\\n      dp[i]=Math.abs(a[i]-a[i+1])+func(a,i+1);\\n    }\\n    return dp[i];\\n  }\\n  public static void main(String[] args)\\n  {\\n    Scanner sc=new Scanner(System.in);\\n    int n=sc.nextInt();\\n    int a[]=new int[n];\\n    dp=new int[n+1];\\n    for(int i=0;i<n;i++)\\n    a[i]=sc.nextInt();\\n    for(int i=0;i<=n;i++)\\n    dp[i]=-1;\\n    System.out.println(func(a,0));\\n  }\\n}", "target": "1", "substitutes": {"dp": ["dh", "pd", "dl", "dro", "dm", "d", "deep", "pm", "df", "dim", "dd", "vp", "tp", "wp", "hp", "bsp", "deb", "ip", "ep", "imp", "lp", "cp", "dr", "dk", "dc", "resp", "drop", "db", "du", "bp", "xy", "dial", "pp", "dt", "fp", "gt", "wd", "delay", "pkg", "grad", "cd", "cmd", "dx", "pa", "pi", "pb", "np", "ds", "jp", "multi", "def", "p", "dep", "ps", "dq", "dj", " df", "adr", "di", "DP", "gp"], "a": ["r", "d", "array", "ta", "parts", "ai", "go", "f", "ga", "ao", "history", "data", "c", "e", "alpha", "as", "eas", "ac", "era", "y", "all", "ata", "x", "am", "ip", "h", "now", "o", "aa", "app", "sta", "ace", "form", "arr", "z", "xa", "pa", "ea", "apa", "g", "ba", "w", "exp", "s", "au", "ae", "att", "ar", "al", "this", "val", "act", "ia", "u", "an", "la", "ma", "p", "ca", "oa", "v", "m", "da", "sa", "at", "A", "b", "es", "j", "ed", "ab", "div", "area", "aaa", "obj", "fa", "ada", "ap", "t", "er", "aux"], "i": ["ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "f", "ims", "is", "eu", "ic", "MI", "ami", "y", "oi", "di", "x", "iat", "ri", "col", "fi", "esi", "chain", "ip", "ji", "o", "id", "ij", "io", "bi", "it", "g", "ci", "sim", "cli", "ii", "mc", "phi", "hi", "ion", "remote", "this", "ni", "list", "ia", "u", "\u0438", "ib", "status", "pi", "p", "gu", "xi", "si", "mi", "I", "name", "gi", "v", "ini", "err", "by", "im", "qi", "index", "us", "j", "ity", "umi", "ui", "uri", "ie", "ti", "multi", "iter", "info"], "sc": ["usc", "uc", "lc", "cc", "esc", "sec", "cl", "sys", "sh", "bc", "sv", "sp", "cr", "ck", "ec", "ctl", "cle", "sch", "fc", "tch", "ssl", "tc", "cv", "sq", " Sc", "disc", "cs", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "psc", "ch", "desc", "st"], "n": ["nu", "mn", "num", "name", "d", "nn", "number", "l", "un", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ni", "nat", "sn", "count", "f", "on", "norm", "an", "u", "z", "j", "no", "nb", "pi", "g", "nc", "na", "k", "np", "c", "nw", "ul", "nm", "w", "ng", "t", "p", "network", "nd", "ln", "net", "all", "nt", "names"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner itr = new Scanner(System.in);\\n        int K = itr.nextInt();\\n        int N = itr.nextInt();\\n        int[] place = new int[N];\\n\\n        for (int i = 0; i < N; i++) {\\n            place[i] = itr.nextInt();\\n        }\\n        Arrays.sort(place);\\n        int max = K - place[N - 1] + place[0];\\n        for (int i = 1; i < N; i++) {\\n            max = Math.max(max, place[i] - place[i - 1]);\\n        }\\n\\n        System.out.println(K - max);\\n    }\\n}", "target": "10", "substitutes": {"itr": [" itrb", "ITrs", "intr", "itrb", " itar", "gitr", "intrb", " itrer", "ietrt", "intrs", "itrs", "gitrb", "intcr", "ITr", "itrt", "ietrs", "iterrator", "iterar", "opar", " itrs", "iterrs", "intrt", "itrer", "ietrer", "oprb", "iterrt", "intrer", "intR", "ITcr", "itar", "itrator", "intrator", "iterr", "itcr", "gitrs", "iterrb", "gitrator", "itR", "oprt", " itrt", "ietr", "ITR", " itcr", "opr", " itR"], "K": ["Z", "Key", "MK", "KE", "KA", "KK", "Ka", "KS", "VK", "G", "S", "P", "T", "R", "KB", "Q", "V", "M", "Mask", "KN", "H", "C", "k", "OK", "KR", "Y", "L", "J", "PK", "X", "UK", "Max", "FK", "SK", "KEY", "B", "CP"], "N": ["D", "I", "Z", "Node", "TN", "F", "ND", "NM", "SN", "NP", "NE", "NB", "n", "O", "G", "No", "S", "Ni", "P", "NG", "T", "NL", "NO", "R", "NS", "Q", "NR", "V", "M", "W", "NH", "AN", "MN", "GN", "NC", "C", "UN", "NN", "NA", "Num", "L", "Y", "J", "X", "CN", "NI", "NT", "Ns"], "place": ["set", "block", "group", "array", "pose", "parse", "position", "pre", "allow", "move", "replace", "point", "prime", "pl", "zero", "holder", "sp", "ale", "enter", "let", "ace", "pair", "process", "change", "ge", "print", "mark", "where", "le", "lay", "form", "are", "back", "list", "view", "hold", "force", "space", "frame", "placed", "trace", "way", "ve", "zone", "piece", "play", "Place", "ape", "join", "store", "places", "ride", "angle", "layout", "use", "late", "be", "plane", "leave", "line", "map"], "i": ["set", "q", "ix", "r", "zi", "iu", "base", "ei", "li", "n", "me", "batch", "ai", "ki", "ims", "is", "ic", "c", "y", "oi", "di", "x", "ri", "l", "chain", "ip", "ji", "point", "o", "id", "ij", "in", "client", "io", "bi", "it", "inner", "g", "ci", "sim", "cli", "ii", "ex", "phi", "hi", "ni", "ger", "ind", "\u0438", "status", "pi", "gu", "p", "xi", "si", "mi", "I", "gi", "iy", "v", "ini", "err", "im", "qi", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "info"], "max": ["pop", "end", "ex", "cut", "ax", "mask", "dot", "con", "maximum", "master", "current", "prime", "temp", "best", "total", "h", "cl", "value", "n", "m", "v", "cp", "default", "rand", "top", "rank", "ge", "sum", "plus", "mean", "or", "root", "right", "auto", "gt", "inter", "scale", "min", "range", "mad", "dev", "full", "ext", "huge", "est", "rest", "lock", "k", "mx", "mod", "mix", "cost", "head", "conf", "out", "check", "exp", "p", "Max", "last", "add", "MAX", "size", "med", "all", "grow", "x", "window", "map"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int l = sc.nextInt();\\n        int r = sc.nextInt();\\n\\n        long ans = solve(l, r);\\n        System.out.println(ans);\\n    }\\n\\n    private static long solve(int l, int r) {\\n        long R = Math.min(l + 2019, r);\\n        long ans = 2018;\\n        for (long i = l; i <= R; i++) {\\n            for (long j = i + 1; j <= R; j++) {\\n                long x = i * j % 2019;\\n                ans = Math.min(ans, x);\\n                if (ans == 0) {\\n                    return 0;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n", "target": "193", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "sv", "sp", "bc", "cr", "nl", "ctl", "ko", "sch", "tc", "reader", "cv", "scan", "sq", " Sc", "cs", "ner", "ss", "nc", "c", "syn", "osc", "txt", "Sc", "gc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch"], "l": ["dl", "lc", "ll", "d", "el", "jl", "len", "kl", "li", "pl", "o", "h", "n", "m", "ol", "v", "line", "lp", "al", "nl", "lo", "le", "lit", "or", "b", "list", "lr", "sl", "ls", "u", "ml", "z", "left", "rl", "g", "ell", "c", "ul", "L", "vl", "t", "s", "p", "tl", "ln", "y", "ly"], "r": ["rr", "q", "ri", "d", "rg", "rar", "ar", "rs", "nr", "rf", "rt", "o", "h", "cr", "n", "m", "v", "rd", "ran", "rid", "ro", "mr", "res", "b", "lr", "ry", "u", "z", "pr", "rl", "g", "c", "rel", "fr", "er", "t", "p", "re", "y", "rc", "rb", "ra", "sr"], "ans": ["uns", "ons", "reads", "flags", "n", "nan", "nl", "os", "can", "ms", "lines", "ANS", "ats", "ens", "als", "runs", "ols", "AN", "ops", "ins", "aps", "ers", "actions", "xs", "lan", "offs", "res", "ros", "names", " scans", "ars", "vals", "anas", "rs", "ns", "ks", "ags", "angs", "anes", "cs", "cons", "s", "ps", "rows", "nets", "aus", "eds", "ians", "nz", "amps", "ants", "ls", "an", "results", "orts", "ds", "rans", "stats", "outs", "ann", "gs", " means", "ents", "eps", "_", "ids", "arts", "es", "vs", " spans", "sets", "ings", "olds", "times", "ions"], "R": ["D", "I", "HR", "MR", "RE", "N", "RT", "G", "S", "P", "RF", "RM", "T", "RO", "BR", "Q", "NR", "V", "W", "M", "SR", "Rs", "RS", "C", "RR", "CR", "RG", "RL", "L", "RA", "DR", "J", "Right", "K", "X", "GR", "Max", "LR", "B"], "i": ["I", "ix", "ri", "phi", "hi", "gi", "iu", "zi", "ei", "ip", "ji", "li", "o", "asi", "v", "ij", "m", "ini", "ai", "ki", "iii", "im", "ind", "ik", "ia", "f", "u", "z", "bi", "it", "ui", "ie", "is", " Xi", "pi", "ti", "ic", "ci", "yi", "multi", "iq", "iri", "xi", "ii", "si", "di", "mi"], "j": ["br", "q", "jac", "ix", "jit", "pt", "key", "ji", "jj", "o", "jo", "bc", "v", "ij", "m", "jump", "jas", "ne", "bs", "ge", "ja", "im", "bj", "oj", "on", "f", "job", "z", "bi", "it", "pr", "ie", "uj", "json", "k", "rel", "js", "aj", "obj", "jp", "J", "ct", "fr", "other", "kj", "y", "jc", "dj", "di", "jl"], "x": ["ix", "ex", "wx", "xb", "ox", "o", "v", "m", "xf", "xy", "tx", "xe", "xx", "px", "xc", "an", "z", "xa", "hex", "xes", "dx", "xxxx", "mx", "xt", "xxx", "xd", " xx", "X", "t", "rx", "ux", "y", "xi", "xs", "xp"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tStringBuilder sb=new StringBuilder(\"\");\\n\t\tScanner n=new Scanner(System.in);\\n\t\tint a=n.nextInt();\\n\t\tint b=n.nextInt();\\n\t\twhile (a!=0 || b!=0){\\n\t\t\tfor (int c=0;c<b;c++){\\n\t\t\t\t\tsb.append(\"#\");\\n\t\t\t}\\n\t\t\tSystem.out.println(sb);\\n\t\t\tsb.append(\"\\n\");//\u6539\u884c\\n\t\t\tsb=new StringBuilder(\"#\");\\n\t\t\tfor (int d=2;d<a;d++){\\n\t\t\t\tfor (int e=2;e<b;e++){\\n\t\t\t\t\tsb.append(\".\");\\n\t\t\t\t}\\n\t\t\t\tsb.append(\"#\");\\n\t\t\t\tSystem.out.println(sb);\\n\t\t\t\tsb.append(\"\\n\");//\u6539\u884c\\n\t\t\t\tsb=new StringBuilder(\"#\");\\n\t\t\t}\\n\t\t\tfor (int c=1;c<b;c++){\\n\t\t\t\tsb.append(\"#\");\\n\t\t\t}\\n\t\tsb.append(\"\\n\");//\u6539\u884c\\n\t\tSystem.out.println(sb);\\n\t\ta=n.nextInt();b=n.nextInt();\\n\t\tsb=new StringBuilder(\"\");\\n\t\t}\\n\t}\\n}", "target": "19", "substitutes": {"sb": ["dl", "sbm", "sql", "xb", "sf", "wb", "ob", "mb", "sg", "sth", "bsp", "now", "sh", "sp", "zb", "lp", "gb", "bh", "db", "stab", "sa", "bf", "bs", "buff", "bn", "lb", "sn", "ub", "gob", "bj", "eb", "sync", "sm", "bag", "ssl", "fb", "ib", "nb", "sq", "pb", "bg", "bt", "sk", "bis", "rob", "gc", "kb", "bb", "cb", "SB", "rb", "erb", "bash"], "n": ["nu", "nn", "l", "nr", "nav", "writer", "N", "o", "ns", "conn", "dn", "ne", "nan", "nl", "cn", "ren", "sn", "norm", "an", "j", "scan", "nb", "ner", "na", "fn", "nc", "rn", "np", "nv", "nw", "tn", "ng", "ny", "nor", "ln", "nt", "ann"], "a": ["ae", "r", "ca", "ax", "ar", "ta", "aa", "app", "sa", "isa", "A", "at", "ia", "la", "access", "ga", "ao", "j", "ab", "pa", "ea", "area", "aff", "ba", "na", "ach", "aaa", "aj", "fa", "ada", "alpha", "ma", "as", "ac", "era", "au", "ata", "am"], "b": ["br", "r", "d", "wb", "ob", "l", "mb", "base", "number", "bc", "NB", "v", "bh", "db", "by", "bs", "bp", "back", "ble", "eb", "A", "buffer", "fb", "z", "j", "bi", "it", "ib", "bound", "nb", "ab", "i", "ba", "length", "bis", "body", "bb", "cb", "be", "y", "BA", "rb", "B"], "c": ["uc", "ca", "lc", "acc", "coll", "cc", "d", "anc", "col", "con", "cos", "chain", "bc", "cr", "v", "ce", "\u00e7", "unc", "dc", "ec", "cu", "cache", "count", "f", "fc", "u", "xc", "tc", "z", "cv", "sc", "cd", "C", "cont", "cs", "g", "vc", "nc", "k", "abc", "ic", "ci", "ct", "t", "ac", "cb", "mc", "pc", "rc", "cf"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint d = sc.nextInt();\\n\t\tint n = sc.nextInt();\\n\t\tif (n == 100) {\\n\t\t\tSystem.out.println((long)(Math.pow(100, d)) * 101);\\n\t\t}\\n\t\telse {\\n\t\t\tSystem.out.println((long)(Math.pow(100, d)) * n);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "245", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "sh", "cr", "sv", "sp", "bc", "inc", "ck", "nl", "ctl", "ko", "sch", "cam", "sync", "tch", "tc", "ctrl", "scan", "sq", "cont", "cs", "nc", "pb", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "scrib", "psc", "ch", "desc"], "d": ["dh", "D", "pd", "dat", "r", "dm", "df", "l", "dd", "fd", "draw", "h", "de", "m", "da", "ad", "sd", "dn", "dc", "dom", "md", "z", "dist", "cd", "dx", "div", "i", "g", "c", "ds", "out", "t", "nd", "p", "dL", "ld", "den", "dt", "di", "x", "dp"], "n": ["nu", "num", "mn", "r", "nn", "l", "number", "len", "N", "h", "o", "ns", "m", "v", "dn", "ne", "nan", "nl", "cn", "ni", "sn", "a", "b", "on", "norm", "u", "z", "j", "nb", "i", "g", "nc", "k", "na", "np", "en", "c", "nm", "e", "w", "t", "nd", "p", "s", "nor", "nt", "x"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString input = sc.nextLine();\\n\t\tchar[] arr = input.toCharArray();\\n\t\tfor(int i = 0;i<input.length();i++) {\\n\t\t\tif(i%2==0&&arr[i]!='R'&&arr[i]!='U'&&arr[i]!='D') {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\treturn;\\n\t\t\t}else if(i%2!=0&&arr[i]!='L'&&arr[i]!='U'&&arr[i]!='D') {\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(\"Yes\");\\n\\n\t}\\n\\n}\\n", "target": "205", "substitutes": {"sc": ["usc", "sac", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "ser", "sh", "bc", "cr", "sv", "sp", "soc", "inc", "nl", "ec", "cle", "sel", "sch", "RC", "sync", "scan", "sq", "cs", "nc", "screen", "c", "syn", "osc", "Sc", "gc", "out", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "input": ["q", "result", "active", "empty", "sql", "cur", "current", "base", "task", "xml", "qa", "now", "prefix", "focus", "source", "in", "read", "raw", "sum", "lat", "get", "script", "start", "act", "form", "str", "select", "index", "img", "init", "buffer", "history", "pattern", "string", "cmd", "data", "text", " Input", "json", "output", "txt", "conf", "request", "out", "char", "command", "upper", "up", "Input", "query", "config"], "arr": ["br", "dat", "addr", "r", "elt", "acc", "coll", "emb", "compl", "att", "array", "arch", "ar", "stock", "frac", "mb", "var", "pl", "vec", "dr", "gb", "db", "err", "aa", "app", "alph", "bl", "buff", "rep", "parts", "resp", "attr", "dict", "enc", "buf", "str", "ang", "map", "img", "list", "req", "j", "gr", "stack", "repl", "unch", "vol", "aaa", "arb", "rel", "obj", "hash", "fr", "exp", "iq", "conv", "ars", "expr"], "i": ["set", "q", "I", "ix", "ex", "ri", "sql", "phi", "gi", "zi", "iu", "hi", "ei", "fi", "chain", "ip", "ji", "li", "n", "m", "v", "me", "ini", "ij", "batch", "series", "ai", "ki", "iii", "go", "im", "ind", "qi", "ori", "index", "us", "init", "u", "\u0438", "io", "z", "j", "bi", "it", "history", "ui", "is", "uri", "menu", "status", "pi", "g", "json", "ti", "ic", "ci", "c", "sim", "cli", "multi", "t", "info", "gu", "ami", "y", "oi", "xi", "ii", "si", "span", "di", "x", "mi"]}}
{"code": "import java.util.*;\\npublic class Main{\\npublic static void main(String[] args){\\nScanner sc = new Scanner(System.in);\\n  String w = sc.next();\\n  char[] alp = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\\n  boolean b = true;\\n  for(int i = 0;i < 26;i++){\\n    int counter = 0;\\n    for(int j = 0;j < w.length();j++){\\n      if(w.charAt(j) == alp[i]){\\n        counter++;\\n      }\\n    }\\n    if(counter%2 == 1){\\n      b = false;\\n      System.out.println(\"No\");\\n      break;\\n    }\\n  }\\n    if(b)System.out.println(\"Yes\");\\n}}", "target": "103", "substitutes": {"sc": ["usc", "sac", "uc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "ser", "Scan", "sv", "sp", "cr", "bc", "soc", "inc", "ec", "cle", "sel", "sch", "sw", "sync", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "screen", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "ch", "desc", "sub"], "w": ["q", "wall", "r", "wx", "d", "wl", "wb", "wt", "l", "temp", "wp", "h", "now", "v", "n", "m", "rew", "word", "aw", "ew", "ws", "raw", "wa", "a", "f", "rw", "wd", "W", "u", "z", "g", "wr", "c", "out", "exp", "t", "wh", "p", "s", "y", "x", "window"], "alp": ["elpa", "alop", "salps", "elpr", "alps", "elp", "salpr", "salp", " alpa", "alpr", " alps", " alpr", " alpect", "alpa", "salpect", "dalp", "alpect", " alop", "balps", "elop", "balpr", "balp", "balpect", "dalop", "dalpr", "dalpa"], "i": ["I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "ei", "chain", "ip", "li", "o", "id", "asi", "n", "ij", "v", "me", "ini", "by", "ai", "ki", "im", "ind", "qi", "a", "ori", "ik", "us", "f", "init", "io", "it", "ui", "is", "ie", "pi", "k", "ti", "ic", "ci", "c", "sim", "multi", "iq", "p", "ami", "y", "xi", "ii", "si", "conv", "di", "x", "mi"], "counter": ["stop", "result", "ctr", "card", "outer", "frequency", "number", "nr", "entry", "total", "system", "zero", "amount", "ounter", "n", "console", "finder", "creator", "factor", "processor", "sum", "random", "cause", "ter", "inter", "phrase", "book", "count", "currency", "TER", "pointer", "buffer", "const", "collection", "sequence", "walker", "loop", "vector", "order", "inner", "Counter", "timer", "record", "c", "continue", "check", "gc", "circle", "controller", "clock", "page", "second", "over", "term"], "j": ["br", "q", "jac", "jit", "pt", "og", "key", "l", "jl", "ji", "jj", "o", "jo", "adj", "n", "ij", "v", "kh", "m", "tr", "jump", "ne", "ion", "user", "ja", "bj", "note", "oj", "job", "ody", "z", "it", "pr", "uj", "g", "off", "json", "k", "js", "aj", "obj", "jp", "J", "ph", "exp", "p", "kj", "jc", "to", "je", "kid", "dj"], "b": ["r", "d", "wb", "beta", "sb", "mb", "l", "ob", "h", "bc", "v", "n", "bh", "bf", "gb", "db", "bol", "m", "bs", "business", "bool", "a", "f", "bd", "eb", "u", "fb", "bound", "nb", "g", "c", "bis", "e", "bo", "t", "p", "bb", "y", "be", "rb", "B"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.*;\\nimport java.math.BigInteger;\\npublic class Main {\\n\tpublic static void main(String[] args)throws IOException {\\n\t\tFastReader sc = new FastReader();\\n\t\tPrintWriter pw = new PrintWriter(System.out);\\n\t\tint n = sc.nextInt();\\n\t\tlong arr[] = new long[n];\\n\t\tint zero = 0;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tarr[i] = sc.nextLong();\\n\t\t\tif (arr[i] == 0)\\n\t\t\t\tzero++;\\n\t\t}\\n\t\tif (zero > 0) {\\n\t\t\tSystem.out.println(0);\\n\t\t\treturn;\\n\t\t}\\n\t\tlong prod = 1;\\n\t\tboolean flag = false;\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tif (arr[i] <= ((long)Math.pow(10, 18)) / prod) {\\n\t\t\t\tprod = prod * arr[i];\\n\t\t\t} else {\\n\t\t\t\tSystem.out.println(-1);\\n\t\t\t\tflag = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif (!flag) {\\n\t\t\tSystem.out.println(prod);\\n\t\t}\\n\\n\\n\\n\t}\\n}\\n\\n\\n\\n\\n\\nclass FastReader {\\n\tBufferedReader br;\\n\tStringTokenizer st;\\n\\n\tpublic FastReader() {\\n\t\tbr = new BufferedReader(new\\n\t\t                        InputStreamReader(System.in));\\n\t}\\n\\n\tString next() {\\n\t\twhile (st == null || !st.hasMoreElements()) {\\n\t\t\ttry {\\n\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t} catch (IOException  e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t}\\n\t\treturn st.nextToken();\\n\t}\\n\\n\tint nextInt() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\\n\tlong nextLong() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\\n\tdouble nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n\\n\tString nextLine() {\\n\t\tString str = \"\";\\n\t\ttry {\\n\t\t\tstr = br.readLine();\\n\t\t} catch (IOException e) {\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t\treturn str;\\n\t}\\n}", "target": "27", "substitutes": {"sc": ["sac", "lc", "cc", "esc", "mp", "rs", "sec", "cl", "sys", "sh", "cr", "sv", "bc", "sp", "inc", "ch", "dc", "ec", "ctl", "sch", "fc", "sync", "ssl", "tc", "sq", "cs", "sci", "ss", "nc", "pb", "c", "sim", "osc", "Sc", "gc", "icc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "sr", "desc"], "pw": ["Pw", "ppW", "Psw", "ppws", "ppsw", " psw", "ppw", " pws", "pW", "Pws", "pws", "PW", " pW", "psw"], "n": ["nu", "num", "r", "q", "name", "d", "nn", "number", "l", "un", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "nz", "sn", "count", "z", "j", "no", "nb", "g", "nc", "na", "k", "np", "length", "en", "c", "nw", "none", "span", "out", "w", "ng", "t", "p", "s", "network", "nor", "ln", "y", "net", "size", "all", "nt", "names"], "arr": ["dat", "r", "ix", "elt", "av", "emb", "ray", "coll", "Array", "ll", "att", "ear", "array", "ar", "mb", "var", "pl", "vec", "adj", "aa", "app", "stock", "err", "db", "alph", "bl", "buff", " narr", "ars", "attr", "Ar", "dict", "enc", "ang", "ble", "img", "j", "arp", "repl", "acc", "ab", "arb", "aaa", "vol", "obj", "js", "fr", "ARR", "iq", "au", "ag", "ev", "save", "gr"], "zero": ["valid", "set", "empty", "wo", "zer", "prime", "number", "error", "total", "oom", "system", "exclusive", "reset", " Zero", "free", "central", "level", "lo", "eros", "positive", "division", "negative", "close", "fe", "scale", "second", "index", "sequence", "z", "frame", "loop", "null", "no", "Zero", "eight", "two", "zone", "na", "good", "one", "none", "integer", "scope", "flake", "delete", "minus", "initial", "ero", "window"], "i": ["set", "q", "I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "base", "ei", "fi", "ip", "ji", "chain", "point", "progress", "o", "li", "id", "m", "ij", "me", "ini", "in", "batch", "this", "ai", "ki", "im", "ind", "qi", "ori", "f", "ik", "init", "\u0438", "io", "history", "j", "bi", "it", "slice", "ity", "ui", "ie", "uri", "is", "status", "pi", "g", "ti", "ic", "ci", "sim", "my", "cli", "PI", "multi", "info", "iq", "y", "oi", "ii", "xi", "all", "si", "span", "di", "mi"], "prod": ["profdx", "persd", " Prop", " prop", "pern", " Prosd", " prox", "Prods", "prd", "prx", "Prosd", "prox", "perdx", "Prof", "prop", " Prod", "Prod", " prosd", "prl", "Prodx", " pron", "profd", "Prox", "prosd", "prsd", "perx", "prodx", "Prop", "prf", "propd", "profsd", "profds", "Pron", "prol", " prol", "prods", "propdx", "propsd", "prdx", "pron", "Prol", "prn", "propds", "perf", " Pron", "perd", "prof"], "flag": ["set", " Flag", "stage", "true", "card", "ground", "group", "compl", "mask", "fail", "agged", "agg", "error", "fd", "cond", "flags", "failed", "bit", "leaf", "and", "wait", "cloud", "important", "nl", "stay", "tag", "ret", "lag", "bool", "count", "sync", "list", "match", "func", "field", "cmd", "bug", "status", "lv", "Flag", "store", "debug", "continue", "char", "command", "ld", "bird", "cf", "FLAG"], "br": ["r", "pt", "sb", "bro", "shr", " bro", "bsp", "vr", " Br", "bc", "cr", "ber", "kr", "dr", "bh", "tr", "bridge", "sp", "bre", "Tr", "bl", "bs", "err", "bn", "bp", "Br", " tr", "mr", "Fr", "buf", "BR", "b", "bd", "lr", " bre", "bern", "hr", "itter", "bm", "pr", "ptr", "wr", "bra", "bt", "browser", "fr", "rb", "ch", "gr"], "st": ["lt", "stage", "pt", "sb", "wt", "cl", "rt", "sh", "sv", "sp", "tmp", "cr", "dr", "tr", "stat", "bl", "ste", "lo", "St", "stri", "sn", "sw", "ut", "start", "se", "ist", "sm", "sl", "inst", "const", "z", "ost", "stack", "sts", "sty", "it", "pr", "ts", "est", "rest", "et", "xt", "irst", "bt", "std", "step", "mt", "ct", "fr", "t", "nd", "ST", "ft", "stable", "be", "th", "ust", "nt"], "str": ["r", "ctr", "STR", "coll", "next", "ar", "chain", "ns", "cr", "sp", "v", "dr", "tr", "msg", "rep", "ocr", "bl", "raw", "print", "ret", "pse", "res", "inst", "string", "Str", "cont", "text", "rec", "vol", "rel", "obj", "mt", "txt", "e", "fr", "exp", "t", "s", "char", "p", "stable", "del"]}}
{"code": "import java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String S = sc.next();\\n        List<String> strListOdd = Arrays.asList(\"R\", \"U\", \"D\");\\n        List<String> strListEven = Arrays.asList(\"L\", \"U\", \"D\");\\n        for (int i = 0; i < S.length(); i++) {\\n            String c = String.valueOf(S.charAt(i));\\n            if ((i % 2 == 0) && !strListOdd.contains(c) || (i % 2 == 1) && !strListEven.contains(c)) {\\n                System.out.println(\"No\");\\n                return;\\n            }\\n        }\\n\\n        System.out.println(\"Yes\");\\n    }\\n}", "target": "205", "substitutes": {"sc": ["arc", "sac", "uc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "sv", "sp", "cr", "bc", "soc", "nl", "ec", "cle", "sch", "RC", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "pb", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "S": ["CS", "STR", "F", "CSS", "SI", "RAW", "SN", "N", "TS", "SM", "SH", "SQL", "SA", "SP", "SAM", "P", "SE", "G", "T", "SU", "R", "Serial", "NS", "A", "SF", "V", "M", "SOURCE", "ASS", "RS", "SL", "Str", "IS", "H", "C", "BS", "Source", "U", "L", "SS", "GS", "SER", "s", "DS", "SB", "B"], "strListOdd": ["strlistEld", "strListOsmd", "strListOsmm", "strListUld", "strListOverdds", "strlistOld", "strListUmm", "strListOdden", "strListEdds", "strlistEdd", "strListUdd", "strlistOmm", "strListUmd", "strListOverdden", "strListOdds", "strlistEmm", "strlistOdd", "strListOld", "strListEdden", "strListOverld", "strListOmm", "strListEmd", "strListEmm", "strListOsld", "strListEld", "strListEdd", "strListOverdd", "strlistEmd", "strListOmd", "strListOsdd", "strlistOmd"], "strListEven": ["arrListEven", "strBlockEN", "strMenueven", "arrListEN", "strMapEven", "strMenuEN", " strListE", "strBlockeven", " strMapEven", "strMapeven", "strSetGrey", "strSetEN", "strMapGrey", "strMenuEven", "arrSetEven", "arrListEnd", "strBlockEven", "strStringEven", " strListGrey", " strMapeven", "strSetEnd", " strMapE", "strBlockEnd", "strListEN", "strSetEven", "strStringGrey", " strListeven", "strSetE", "strListeven", "arrListeven", "strMenuEnd", "strStringeven", "strMapE", "arrSetEnd", "arrSetEN", "strListEnd", "strListE", "strSeteven", "arrSeteven", "strStringE", "strListGrey", " strMapGrey"], "i": ["I", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "ogi", "ei", "chain", "ip", "ji", "point", "li", "o", "n", "m", "v", "ij", "ini", "me", "in", "remote", "ai", "ki", "ind", "qi", "a", "index", "us", "init", "u", "j", "bi", "it", "ui", "is", "uri", "status", "pi", "json", "ti", "ic", "ci", "sim", "my", "cli", "multi", "info", "gu", "y", "oi", "xi", "ii", "si", "di", "x", "mi"], "c": ["arc", "uc", "r", "lc", "col", "cc", "d", "cur", "l", "chain", "co", "cl", "cf", "bc", "cr", "v", "n", "m", "unc", "cp", "dc", "ce", "cu", "cache", "str", "a", "b", "f", "u", "tc", "cat", "C", "cont", "cs", "vc", "nc", "k", "cm", "abc", "cod", "t", "x", "p", "ac", "cin", "etc", "y", "mc", "rc", "ch"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner scan = new Scanner(System.in);\\n        int N = scan.nextInt();\\n        String[] words = new String[N];\\n        for(int i=0; i<N; i++){\\n            words[i] = scan.next();\\n        }\\n        scan.close();\\n\\n        int ac_cnt=0;\\n        int wa_cnt=0;\\n        int tle_cnt=0;\\n        int re_cnt=0;\\n\\n        for(int i=0; i<N; i++){\\n            switch(words[i]){\\n                case \"AC\":\\n                    ac_cnt++;\\n                    break;\\n                case \"WA\":\\n                    wa_cnt++;\\n                    break;\\n                case \"TLE\":\\n                    tle_cnt++;\\n                    break;\\n                case \"RE\":\\n                    re_cnt++;\\n                    break;\\n            }\\n        }\\n        System.out.println(\"AC x \" + ac_cnt);\\n        System.out.println(\"WA x \" + wa_cnt);\\n        System.out.println(\"TLE x \" + tle_cnt);\\n        System.out.println(\"RE x \" + re_cnt);\\n    }\\n}", "target": "160", "substitutes": {"scan": ["set", "r", "sql", "skip", "row", "nn", "con", "parse", "reach", "gate", "san", " Scan", "ser", "sys", "Scan", "system", "connect", "sv", "n", "sin", "ran", "read", "in", "stat", "source", "can", "get", "report", "run", "scale", "auto", "se", "gen", "sm", "sync", "clean", "send", "scroll", "an", "match", "search", "sc", "find", "ner", "na", "open", "store", "conf", "link", "out", "gc", "check", "sur", "re", "proc", "query", "ch", "ann"], "N": ["D", "Z", "I", "Node", "TN", "ND", "NM", "SN", "NP", "NE", "NB", "n", "Size", "O", "S", "Ni", "P", "IN", "OUT", "NO", "T", "NL", "NS", "NR", "V", "ANY", "M", "W", "AN", "Len", "GN", "NC", "C", "Number", "NN", "Num", "Y", "L", "NA", "K", "J", "Net", "NOTE", "Length", "NI", "NT", "Ns"], "words": ["Words", "works", "points", "games", "english", "hops", "ks", "strings", "spe", "papers", "word", "windows", "ws", "forms", "months", "bytes", "docs", "ms", "tools", "users", "wal", "lines", "caps", "ants", "pages", "wd", "maps", "vs", "days", "items", "rules", "weights", "keys", "letters", "news", "tags", "features", "bits", "aps", "books", "w", "blocks", "terms", "we", "posts", "frames", "names"], "i": ["set", "q", "ix", "iu", "base", "ei", "li", "n", "me", "batch", "ai", "ki", "f", "ik", "history", "is", "ic", "y", "oi", "di", "x", "ri", "fi", "chain", "ip", "ji", "point", "id", "ij", "client", "start", "io", "bi", "it", "g", "inner", "ci", "sim", "cli", "ii", "conv", "span", "ex", "phi", "hi", "php", "print", "ind", "u", "fire", "\u0438", "pi", "my", "gu", "xi", "si", "mi", "I", "name", "gi", "iy", "m", "ini", "err", "im", "qi", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "iter", "info"], "ac_cnt": ["ac_cn", "ac_ctn", "acXcnt", "ac_acnc", "ac_ctld", "ac_curn", "ac_lcnt", "ac_ctnt", "acXcont", "ac_convont", "acXconvct", "ac_acpt", "ac_cnc", "ac_collld", "ac_convct", "ac_acct", "ac_lcgt", "ac_curpt", "ac_lcnc", "ac_collct", "ac_cct", "acXcld", "ac_cgt", "ac_acld", "ac_collnt", "acXconvont", "acXconvld", "ac_acn", "ac_lcct", "ac_acgt", "acXcct", "ac_curnt", "ac_convnt", "ac_collont", "ac_cont", "ac_cpt", "ac_curld", "ac_acnt", "acXconvnt", "ac_cld", "ac_convld", "ac_ctpt"], "wa_cnt": ["wa_cnot", "wa_rcth", "wa_crt", "wa_acnot", "wa_rcnd", "wa_cond", "wa_acnc", "wa_acnt", "wa_acnz", "wa_lcnc", "wa_CNT", "wa_rcnt", "wa_cont", "wa_cachent", "wa_cachenot", "wa_coount", "wa_count", "wa_rcrt", "wa_cnz", "wa_scnd", "wa_cunt", "wa_Cnt", "wa_scnt", "wa_cuount", "wa_lcnt", "wa_scrt", "wa_cnc", "wa_Count", "wa_cnd", "wa_cachenz", "wa_cth", "wa_cort", "wa_cuNT", "wa_scth", "wa_cachenc", "wa_lcnot", "wa_coNT", "wa_coth", "wa_cNT", "wa_lcnz"], "tle_cnt": ["tle__collnt", "tle_Cctr", "tle_cort", "tle__cnc", "tle__collpt", "tle_collnt", "tle__collnc", "tle_Cov", "tle_ncov", "tle_renc", "tle_lcrt", "tle_ncctr", "tle_crnt", "tle_cont", "tle_Cnt", "tle_curnc", "tle_collpt", "tle__lcnt", "tle_cov", "tle_ncpt", "tle_curnt", "tle_crpt", "tle_conc", "tle_rept", "tle_cachectr", "tle_rent", "tle__cnt", "tle__lcpt", "tle_cachent", "tle__lcnc", "tle_ncnt", "tle_lcnc", "tle__crt", "tle_curpt", "tle_cacheov", "tle_crnc", "tle__lcrt", "tle_copt", "tle__cpt", "tle_lcnt", "tle_cnc", "tle_cctr", "tle_crrt", "tle_lcpt", "tle_cpt", "tle_collnc", "tle_crt", "tle_Cpt", "tle_cachept"], "re_cnt": ["re_curnt", "re_crct", "re_crrt", "re_pct", "re_acnc", "re_discx", "re_recnt", "re_ppt", "re_recNT", "re_discNT", "re_pnt", "re_acnz", "re_curpt", "re_acrt", "re_CNT", "re_cpt", "re_Cont", "re_Cnz", "re_Cx", "re_discont", "re_curnc", "re_cnc", "re_Cnt", "re_Cnc", "re_cNT", "re_discnt", "re_acct", "re_Cpt", "re_prt", "re_acpt", "re_crt", "re_crpt", "re_crnt", "re_cont", "re_cx", "re_cnz", "re_curnz", "re_recx", "re_cct", "re_recont", "re_acnt"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc=new Scanner(System.in);\\n    int m=sc.nextInt();\\n    int a=sc.nextInt();\\n    int b=sc.nextInt();\\n    if(a<=b){\\n      for(int s=a;s<=b;s++){\\n        if(s%m==0){\\n          System.out.println(\"OK\");\\n          break;\\n        }\\n        if((s==b)&&!(b%m==0)){\\n          System.out.println(\"NG\");\\n        }\\n      }\\n    }\\n  }\\n}\\n", "target": "28", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "sh", "bc", "cr", "sv", "sp", "inc", "dc", "ck", "nl", "ctl", "ko", "cle", "sch", "sw", "fc", "tc", "scan", "sq", "cont", "cs", "g", "ss", "nc", "c", "osc", "Sc", "out", "gc", "ng", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "m": ["r", "mm", "dm", "d", "mask", "l", "h", "perm", "n", "v", "me", "om", "km", "md", "ms", "vm", "mr", "mut", "im", "rm", "sm", "M", "um", "tm", "gm", "bm", "i", "g", "mx", "cm", "mod", "mode", "c", "mt", "nm", "ma", "t", "p", "wm", "man", "mc", "fm", "month", "mi"], "a": ["ae", "r", "ca", "ax", "ar", "oa", "abs", "o", "ta", "n", "aa", "sta", "sa", "al", "ai", "A", "at", "ia", "an", "la", "ao", "ab", "i", "ea", "apa", "pa", "area", "ba", "aaa", "ach", "aka", "aj", "ada", "alpha", "ap", "ma", "as", "p", "ac", "au", "va", "am"], "b": ["r", "d", "wb", "sb", "ob", "l", "h", "bc", "n", "v", "bf", "db", "gb", "bs", "back", "ble", "eb", "f", "u", "fb", "z", "j", "bi", "ib", "nb", "bm", "ab", "i", "g", "ba", "pb", "bt", "c", "bis", "e", "out", "t", "p", "bb", "cb", "be", "y", "rb", "B"], "s": ["set", "sym", "gs", "ix", "uns", "sb", "l", "rs", "sol", "eds", "ns", "ta", "sv", "stats", "n", "sp", "sd", "sta", "sa", "su", "bs", "ans", "S", "ms", "its", "self", "less", "ys", "ors", "ats", "sw", "south", "se", "ags", "us", "fs", "ls", "als", "ows", "es", "ims", "sm", "ares", "j", "sts", "is", "ts", "sq", "i", "cs", "ss", "js", "olds", "ds", "bis", "ins", "gets", "span", "e", "sam", "as", "p", "xs", "ps", "si", "hs", "st"]}}
{"code": "import java.awt.*;\\nimport java.awt.geom.*;\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n  public static void main(String args[]) {\\n    Scanner in = new Scanner(System.in);\\n    String str;\\n    int num[] = new int[26];\\n    while(in.hasNextLine()){\\n      str = in.nextLine();\\n      char [] cin = str.toCharArray();\\n      for(int i=0;i<cin.length;++i){\\n        cin[i]=Character.toLowerCase(cin[i]);\\n        for(int j = 0; j < 27; j++){\\n          if(cin[i] == j+97){\\n            num[j]++;\\n          }\\n        }\\n      }\\n    }\\n    for(int k = 0; k < 26; k++){\\n      char c = (char)(k + 97);\\n      System.out.println(c + \" \" + \":\" + \" \" +num[k]);\\n    }\\n  }\\n}\\n\\n", "target": "242", "substitutes": {"in": ["again", "r", "sql", "bin", "from", "inf", "con", "l", " din", "isin", "sys", "log", "id", "inc", "n", "sin", "ini", "err", "read", "line", "by", "al", "doc", "source", "inn", "file", "rin", "IN", "get", "run", "user", "lines", "serv", "ind", "at", "on", "In", "init", "world", "io", "reader", "it", "null", "din", "is", "thin", "ner", "inner", "en", "inside", "ins", "input", "std", "conf", "out", "info", "ln", "add", "all", "ch"], "str": ["br", "dat", "r", "name", "STR", "ctr", "cur", "parse", "cr", "sp", "n", "dr", "tr", "err", "ch", "print", " tr", "serv", "form", " st", "arr", "ent", "cat", "string", "it", "Str", "pr", "cont", "text", "cs", "rec", "inner", "vol", "obj", "input", "txt", "fr", "t", "s", "char", "p", "re", "res", "gr", "st"], "num": ["nu", "mn", "pn", "tim", "cal", "monitor", "dim", "con", "number", "NUM", "total", "zero", "missing", "n", "nine", "nom", "alph", "mun", "sum", "val", "cu", "mu", "mon", "count", "rub", "nut", "index", "norm", "um", "no", "cum", "na", "four", "np", "fun", "Num", "nm", "prim", "digit", "nam", "crit", "conv", "mat", "tu"], "cin": ["hn", "ca", "arin", "vine", "coin", "bin", "cos", "nec", "chain", "asin", "co", "cgi", "isin", "circ", "car", "ce", "sin", "reci", "ini", "ace", "vin", "cn", "eric", "rin", "cy", "sum", "can", "yes", "csv", "cu", "stri", "tar", "zo", "chin", "cho", "colm", "cat", "din", "cone", " cis", "cont", "sky", "cs", "vc", "tin", "ic", "ci", "ins", "pal", "ct", "cit", "cil", "char", "ac", "cci", "chu", "aco", "mc", "cus", "cf"], "i": ["I", "ix", "ri", "key", "phi", "gi", "zi", "iu", "used", "base", "fi", "chain", "ip", "ei", "ji", "l", "li", "o", "id", "ij", "m", "me", "ini", "this", "ai", "any", "im", "ind", "qi", "ori", "index", "f", "us", "ia", "init", "io", "ims", "bi", "it", "ui", "ie", "is", "uri", "pi", "inner", "ti", "ic", "ci", "sim", "my", "multi", "er", "info", "iq", "iter", "s", "ami", "y", "iri", "ii", "xi", "si", "di", "x", "mi"], "j": ["br", "q", "jit", "ev", "ji", "jj", "jo", "ij", "tr", "err", "jump", "jas", "by", "msg", "son", "ion", "ju", "state", "ja", "serv", "im", "ind", "bj", "b", "note", "oj", "job", "Ja", "z", "no", "pr", "uj", "g", "off", "json", "js", "aj", "obj", "Java", "jp", "ph", "out", "fr", "bo", "other", "J", "jet", "kj", "y", "jc", "dj", "je", "kid", "jl", "expr"], "k": ["q", "ke", "ask", "acc", "key", "wk", "ikk", "kl", "jj", "ks", "kh", "m", "kr", "km", "tk", "ck", "ko", "unk", "ak", "kn", "kar", "ik", "kk", "ack", "uk", "kick", "kat", "mk", "ark", "g", "ick", "ok", "ek", "ku", "sk", "isk", "K", "out", "jp", "ac", "kt", "kj", "kind", "ka", "add", "ijk", "kw", "kid"], "c": ["arc", "r", "lc", "ca", "cc", "d", "cur", "l", "chain", "h", "cf", "cr", "n", "v", "m", "unc", "dc", "cn", "cu", "cache", "b", "f", "u", "tc", "cat", "sc", "C", "g", "ci", "ct", "e", "gc", "t", "char", "p", "ch"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\t\t// define variables & initialize\\n\tprivate static int cnt = 0;\t// how many bubbleSort is used\\n\t\\n\t// sort method :: sort given array using insertion Sort\\n\tpublic static void sort(int[] _A, int _n) {\\n\t\tfor (int i = 0; i <= _n - 1; ++i) {\\n\t\t\tint p_min = i;\\n\t\t\tfor (int j = i; j <= _n - 1; ++j) {\\n\t\t\t\tif (_A[j] < _A[p_min])\\n\t\t\t\t\tp_min = j;\\n\t\t\t}\\n\t\t\tif (i != p_min) {\\n\t\t\t\t_A[i] = _A[i] ^ _A[p_min];\\n\t\t\t\t_A[p_min] = _A[i] ^ _A[p_min];\\n\t\t\t\t_A[i] = _A[i] ^ _A[p_min];\\n\t\t\t\t++cnt;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t}\\n\t\\n\t// print method :: print array\\n\tpublic static void print(int[] _A) {\\n\t\tfor (int i = 0; i < _A.length; ++i) {\\n\t\t\tSystem.out.print(_A[i]);\\n\t\t\tif (i != _A.length - 1)\\n\t\t\t\tSystem.out.print(\" \");\\n\t\t}\\n\t\tSystem.out.println();\\n\t}\\n\t\\n\t// get method :: get cnt (how many bubbleSort was used)\\n\tpublic static int get() {\\n\t\treturn cnt;\\n\t}\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t////////////////////////////////////\\n\t\tint n = 0;\\n\t\tint[] A;\\n\t\t\\n\t\tn = sc.nextInt();\\n\t\tA = new int[n];\\n\t\t\\n\t\tfor (int i = 0; i < n; ++i) {\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\t\\n\t\tsort(A, n);\\n\t\tprint(A);\\n\t\tSystem.out.println(get());\\n\t\t\\n\t\t////////////////////////////////////\\n\t\tsc.close();\\n\t}\\n\t\\n}", "target": "199", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner in = new Scanner(System.in);\\n        int A, B, T;\\n        A = in.nextInt(); B = in.nextInt(); T = in.nextInt();\\n\\n        System.out.println(T / A * B);\\n    }\\n}\\n", "target": "4", "substitutes": {"in": ["r", "mm", "gin", "bin", "inf", "con", "from", "l", " din", "xml", "isin", "log", "inc", "n", "sin", "ini", "err", "by", "raw", "per", "doc", "inn", "file", "IN", " IN", "rin", "state", "run", "user", "serv", "pid", "sum", "or", "ind", "get", "client", "In", "init", "world", "io", "reader", "it", "scan", "null", "din", "is", "i", "thin", "inner", "cm", "en", "ins", "input", "std", "out", "check", "as", "cin", "info", "add", "all", " In", "line"], "A": ["D", "AA", "Array", " a", "AU", "Alpha", "AY", "CA", "ALL", "AC", "HA", "The", "Ax", "Av", "As", "SA", "P", "ACE", "IA", "R", "a", "GA", "V", "LA", "M", "AZ", "TA", "This", "AN", "AV", "AL", "ACC", "H", "AP", "C", "AM", "AB", "An", "AS", "L", "RA", "AR", "AST", "X", "BA", "mA", "AF", "ACT", "AT"], "B": ["D", "I", "WB", "BB", "Brian", "LB", "TB", "RB", "BL", "BI", "BT", "Builder", "DB", "N", "BU", "VB", "NB", "GO", "GB", "MB", "BER", "IB", "BR", "b", "BC", "BE", "Bs", "V", "Rob", "BY", "Bob", "BS", "BO", "JB", "BUS", "AB", "Bu", "Y", "Bar", "L", "J", "EB", "Bill", "BA", "Bern", "OB", "SB", "Blue", "FB"], "T": ["D", "I", "TT", "TN", "TG", "F", "TO", "ET", "TB", "TS", "VT", "N", "The", "TV", "WT", "TR", "S", "P", "R", "V", "TER", "M", "TA", "It", "GT", "PT", "TC", "TF", "IT", "H", "C", "TH", "CONT", "Y", "TM", "L", "TY", "J", "t", "UT", "TI", "NOTE", "ST", "AT"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int num = in.nextInt();\\n        int dis = in.nextInt();\\n        in.close();\\n        dis += dis + 1;\\n        int ans = num / dis;\\n        if (num % dis != 0) {\\n            ans++;\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "238", "substitutes": {"in": ["r", "mm", "gin", "bin", "inf", "con", "from", "l", "asin", " din", "isin", " out", "log", "sys", "id", "inc", "n", "sin", "ini", "err", "read", "by", "raw", "doc", "per", "inn", "file", "rin", "IN", "sum", "lib", "user", "client", "ind", "on", "In", "init", "world", "io", "reader", "it", "scan", "null", "din", "is", "i", "thin", "stream", "inner", "en", "ins", "input", "std", "conf", "out", "ma", "cin", "info", "add", "all"], "num": ["mn", "nu", "tim", "cal", "nn", "con", "mat", "number", "NUM", "un", "len", "total", "ns", "zero", "n", "m", "rum", "hom", "nom", "alph", "su", "bn", "sum", "mon", "index", "pos", "um", "nb", "won", "umer", "cum", "na", "np", "en", "Num", "nm", "max", "mult", "nam", "mis", "den", "nt", "rem", "tu"], "dis": [" Dis", "dl", "lis", "ex", "deg", "coll", "details", "dim", "el", "san", "sol", "cond", "len", "chain", "de", "sp", "sd", "by", "Dis", "nl", "lo", "sum", "lib", "pos", "pro", "es", "ris", "rex", "dist", "how", "dev", "par", "phys", "no", "is", "div", "disc", "mas", "rem", "vol", "rel", "display", "dem", "ds", "DIS", "des", "diff", "def", "mil", "det", "dir", "stable", "mis", "den", "si", "di", "del", "ly"], "ans": ["acs", "uns", "ents", "ons", "nets", "vals", "pan", "aus", "san", "ums", "eds", "ns", "ads", "ks", "ran", "ians", "os", "can", "ms", "lines", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "ls", "an", "ims", "ann", "ams", "aos", "mas", "anes", "ones", "ips", "ins", "aps", "ions", "as", "xs", "rans", "lan", "offs", "ars", "names"]}}
{"code": "\\nimport java.io.BufferedReader;\\nimport java.io.File;\\nimport java.io.FileInputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n   private static final String INPUT_FILE_PATH = \"\";\\n\\n   static void solve(InputReader in, PrintWriter out) {\\n      int x = in.nextInt();\\n      int y = in.nextInt();\\n\\n      for (int i = 0; i <= x; i++) {\\n         if ((i * 2) + ((x - i) * 4) == y) {\\n            out.println(\"Yes\");\\n            return;\\n         }\\n      }\\n      out.println(\"No\");\\n   }\\n\\n   private static class InputReader {\\n      private BufferedReader br;\\n      private StringTokenizer st;\\n\\n      public InputReader(InputStream inputStream) {\\n         this.br = new BufferedReader(new InputStreamReader(inputStream), 32768);\\n         this.st = null;\\n      }\\n\\n      public String nextToken() {\\n         while (st == null || !st.hasMoreTokens()) {\\n            try {\\n               st = new StringTokenizer(br.readLine());\\n            } catch (IOException e) {\\n               throw new RuntimeException(e);\\n            }\\n         }\\n         return st.nextToken();\\n      }\\n\\n      public int nextInt() {\\n         return Integer.parseInt(nextToken());\\n      }\\n\\n      public long nextLong() {\\n         return Long.parseLong(nextToken());\\n      }\\n\\n      public double nextDouble() {\\n         return Double.parseDouble(nextToken());\\n      }\\n   }\\n\\n   public static void main(String[] args) throws Exception {\\n      InputStream inputStream = INPUT_FILE_PATH.isEmpty()\\n         ? System.in\\n         : new FileInputStream(new File(INPUT_FILE_PATH));\\n      OutputStream outputStream = System.out;\\n\\n      InputReader inputReader = new InputReader(inputStream);\\n      PrintWriter printWriter = new PrintWriter(outputStream);\\n\\n      solve(inputReader, printWriter);\\n\\n      printWriter.close();\\n   }\\n\\n}\\n", "target": "62", "substitutes": {"INPUT_FILE_PATH": ["INPUT_DIR_TEXT", "INPUT_FILE_NAME", "INPUT_FILE__SET", "INPUT_FILEREFSET", "INPUT_FILEURLTEXT", "INPUT_FILE_FILE", "INPUT_DIRURLTEXT", "INPUT_FILE__FILE", "INPUT_FILEREFPATH", "INPUT_DIRURLSET", "INPUT_FILE__TEXT", "INPUT_DIRURLDIR", "INPUT_DIR_SET", "INPUT_FILEURLPATH", "INPUT_DIR_PATH", "INPUT_DIR_DIR", "INPUT_FILEREFDIR", "INPUT_FILE__DIR", "INPUT_FILE_TEXT", "INPUT_FILEREFTEXT", "INPUT_FILEURLSET", "INPUT_DIRURLPATH", "INPUT_FILE__Path", "INPUT_FILE__PATH", "INPUT_FILEURLDIR", "INPUT_FILE_DIR", "INPUT_FILE_SET", "INPUT_FILE_Path"], "in": ["mm", "gin", "d", "edIn", "bin", "inf", "con", "l", "o", "inc", "n", "ini", "err", "by", "al", "raw", "doc", "inn", "rin", "IN", "ai", " IN", "im", "ind", "form", "at", "lin", "In", "init", "nin", "reader", "running", "din", "is", "inner", "cm", "ic", "ins", "input", "conf", "as", "local", "cin", "info", "ac", "re", "add", "up", "mc", "ain", " In", "net"], "out": ["ou", "ex", "outer", "flush", "l", "writer", "error", "co", "o", "sys", "log", "n", "v", "conn", "err", "OU", "print", "OUT", "csv", "os", "report", "write", "client", "user", "cache", "at", "gt", "b", "conv", "list", "io", "it", "aos", "Out", "null", "inner", "screen", "c", "obj", "output", "ins", "format", "w", "t", "pretty", "p", "net", "all", "to", "nt", "over", "res", "outs"], "x": ["ix", "ex", "wx", "d", "ax", "row", "ox", "l", "h", "n", "v", "m", "xf", "lat", "xy", "width", "tx", "inx", "xx", "index", "f", "px", "xc", "z", "xa", "j", "dx", " cx", "mx", "xd", "e", "w", "X", "rx", "p", "ux", "xi", "xs", "xp"], "y": ["key", "sy", "hot", "iy", "ip", "h", "py", "n", "gy", "v", "ch", "by", "ey", "uy", "cy", "xy", "yes", "ys", "b", "ry", "yy", "z", "j", "no", "vy", "oy", "sky", "Y", "yi", "my", "yr", "t", "ny", "p", "ty", "ly"], "i": ["I", "ix", "phi", "hi", "gi", "iu", "zi", "ei", "ip", "ji", "point", "o", "li", "id", "v", "m", "n", "ij", "ini", "batch", "ski", "ai", "ms", "ki", "client", "im", "ind", "qi", "index", "us", "init", "u", "io", "j", "it", "ui", "is", "ie", "uri", "pi", "ti", "ic", "ci", "sim", "port", "cli", "multi", "iq", "p", "info", "ii", "xi", "si", "di", "mi"], "br": ["r", "ctr", "pt", "sb", "bro", "shr", "bsp", "vr", "cr", "ber", "bc", "kr", "dr", "bh", "tr", "bf", "bridge", "bre", "bal", "bl", "bs", "bn", "bp", "brace", "Br", "mr", "buf", "str", "BR", "b", "lr", "bd", "hr", "bi", "bm", "pr", "wr", "ba", "bt", "rel", "bo", "yr", "fr", "rb", "sr", "gr"], "st": ["stage", "pt", "sb", "l", "sth", "cl", "rt", "sh", "usr", "sv", "sp", "tmp", "dr", "rd", "tr", "tt", "stat", "bl", "ste", "nt", "St", "stri", "sw", "ut", "str", "start", "se", "ist", "stan", "inst", "const", "z", "ost", "stack", "sts", "sty", "null", "est", "rest", "et", "ast", "bt", "std", "mt", "ct", "fr", "t", "nd", "p", "stable", "ld", "be", "th", "net", "ust", "ST"], "inputStream": ["instream", "thisView", "inStream", "mediaStreamer", " inputSteam", "InputReader", "contextStream", "contextSteam", "inputSteam", "contextFile", "inStreamer", "inputView", " inputView", "InputView", "InputSteam", "tmpstream", "InputStream", "inSteam", "inView", " inputstream", "inFile", "inputstream", "mediaStream", "thisStream", "inReader", "inputStreamer", "mediaSteam", "inputFrame", "tmpStreamer", "inputFile", "contextFrame", "inFrame", "tmpStream", "tmpSteam", "thisstream", "thisSteam", " inputFrame", "mediastream", " inputFile"], "outputStream": [" outputStreamer", "outStreamer", "outputStreamer", "outputView", "outView", "inputSteam", "inputView", "OutputStream", "OutputView", " outputSteam", "outStream", "OutputStreamer", "OutputSteam", "outSteam", "inputStreamer", "outputSteam", " outputView"], "inputReader": ["inputWriter", "InputReader", " inputRunner", "InputRunner", "inputParser", "inRunner", " inputWriter", "inWriter", "inputLoader", "inputRunner", "outputReader", "inReader", "outputParser", " inputParser", " inputLoader", "InputWriter", "outputWriter", "inLoader", "InputLoader", "InputParser"], "printWriter": ["printlnWriter", "writeWriter", "writeReader", "printlnReader", "printWrite", " printW", "checkwriter", "PrintW", " printBuilder", "checkReader", "reportW", "printlnwriter", " printwriter", "reportReader", "writeWrite", "checkWriter", "Printwriter", " printWrite", "PrintReader", "checkWrite", "PrintBuilder", "writewriter", " printReader", "printBuilder", "PrintWriter", "printlnBuilder", "reportWrite", "printReader", "PrintWrite", "printwriter", "printW", "reportWriter"]}}
{"code": "import java.util.Scanner;\\n \\nclass Main{\\n  public static void main(String[] arg){\\n    int n;\\n    int [][] card = new int[4][13];\\n\\n    for(int i=0; i<4; i++)\\n        for(int j=0; j<13; j++)\\n            card[i][j] = 0;\\n\\n    Scanner in = new Scanner(System.in);\\n\\n    n = in.nextInt();\\n\\n    String mark;\\n    int su;\\n\\n    for(int i=0; i<n; i++){\\n        in.nextLine();\\n        mark = in.next();\\n        su = in.nextInt();\\n\\n        if(mark.equals(\"S\"))\\n            card[0][su-1] = 1;\\n        else if(mark.equals(\"H\"))\\n            card[1][su-1] = 1;\\n        else if(mark.equals(\"C\"))\\n            card[2][su-1] = 1;\\n        else\\n            card[3][su-1] = 1;\\n    }\\n\\n    for(int i=0; i<4; i++)\\n        for(int j=0; j<13; j++)\\n            if(card[i][j] == 0){\\n                if(i == 0)\\n                    System.out.println(\"S \" + (j+1));\\n                else if(i == 1)\\n                    System.out.println(\"H \" + (j+1));\\n                else if(i == 2)\\n                    System.out.println(\"C \" + (j+1));\\n                else\\n                    System.out.println(\"D \" + (j+1));\\n            }\\n  }\\n}", "target": "189", "substitutes": {"arg": ["ray", "star", "parse", " argument", "word", "doc", "spec", "user", "param", "match", " Arg", "arp", "cmd", "ark", "rest", "event", "Args", "argument", "char", "command", "re", "flag", "pack", " larg", "config", "Arg"], "n": ["nu", "num", "r", "mn", "name", "d", "nn", "l", "nr", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "z", "no", "nb", " N", "na", "nc", "fn", "np", "en", "c", "nm", "ng", "s", "p", "ln", "net", "size", "nt"], "card": ["arc", "star", "cal", "archive", "rar", "array", "Card", "mask", "ar", "dim", "chain", "entry", "draw", "deck", "red", "bit", "car", "cp", "dr", "word", "cap", "cast", "cell", "sum", "tag", "scale", "note", "list", "book", "view", "index", "condition", "field", "hand", "component", "ard", "carry", "way", "cards", "ARD", "cont", "play", "lv", "record", "guard", "ul", "pad", "gc", "check", "def", "roll", "controller", "man", "crit", "flag", "box", "copy", "pack", "bar", "cf", "map"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "iii", "f", "ik", "ims", "is", "eu", "ic", "e", "ami", "y", "oi", "di", "x", "ish", "ri", "fi", "chain", "ip", "o", "id", "ij", "ret", "iti", "ori", "io", "bi", "it", "g", "ci", "sim", "cli", "iq", "ii", "ex", "pai", "phi", "hi", "progress", "ion", "this", "print", "ind", "ia", "u", "ir", "la", "pi", "xi", "si", "mi", "I", "name", "gi", "iy", "ini", "by", "im", "at", "qi", "index", "init", "ity", "ui", "ie", "ed", "ti", "PI", "multi", "iter", "info", "up"], "j": ["br", "q", "ix", "jit", "r", "pt", "og", "ax", "att", "el", "ev", "l", "ji", "jj", "jo", "adj", "tree", "v", "ij", "jump", "ne", "jas", "ion", "ju", "ge", "xy", "ja", "im", "ind", "bj", "hd", "b", "note", "oj", "on", "job", "yy", "z", "Ja", "it", "ie", "pr", "uj", "g", "off", "json", "k", "aj", "js", "obj", "jp", "ph", "out", "other", "J", "ng", "fr", "bo", "ot", "kj", "y", "jc", "jack", "dj", "ijk", "to", "je", "kid", "jl", "jen"], "in": ["r", "end", "ex", "sql", "bin", "from", "inf", "ar", "con", "l", "asin", " din", "isin", "log", "inc", "m", "sin", "ini", "err", "read", "source", "make", "doc", "vin", "inn", "rin", "sum", "IN", "file", "get", "run", "serv", "ind", "lin", "at", "on", "pos", "In", "init", "io", "reader", "it", "scan", "din", "is", "thin", "stream", "inner", "en", "ins", "input", "std", "conf", "out", "check", "as", "cin", "info", "add", "all", "ain", "readable", "line"], "mark": ["set", "block", "market", "pop", "ask", "name", "mm", "key", "Mark", "white", "mask", "loc", "parse", "ank", "place", "gate", "met", "allow", "move", "marks", "draw", "reset", "sign", "m", "word", "make", "rank", "marked", "md", "follow", "ak", "sche", "tag", "call", "push", "fill", "ind", "form", "are", "shape", "note", "clean", "hold", "match", "mate", "ark", " MARK", "emark", "link", "style", "ma", "def", "ARK", "char", "mary", "p", "label", " Mark", "pres", "line", "map"], "su": ["nu", " suit", "suit", "fu", "sb", "cos", "aus", "san", "rue", "sil", "edu", "Su", "sv", "so", "sa", "uu", "du", "sche", "wa", "sum", "cu", "sn", "SU", "stri", "ru", "se", "sl", "us", "u", "pu", "sing", "bu", "zip", "dev", "etsu", "sen", " Su", "seat", "eu", "asu", "com", "sex", "ass", "sim", "sam", "lu", "prof", "sur", "gu", "uni", "cas", "den", "si", "sr", "util", "tu"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc =new Scanner(System.in);\\n    long a =sc.nextLong();\\n    long b =sc.nextLong();\\n    long c =sc.nextLong();\\n    long d =sc.nextLong();\\n    long e =a*c;\\n    long f =b*d;\\n    long g =a*d;\\n    long h =b*c;\\n    long ans =Math.max(e,f);\\n    ans =Math.max(ans,g);\\n    ans =Math.max(ans,h);\\n    System.out.println(ans);\\n  }\\n}", "target": "244", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "sb", "sec", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "dc", "sa", "ck", "ec", "ctl", "ko", "sch", "sw", "sync", "tc", "ctrl", "scan", "sq", "cont", "cs", "nc", "osc", "cmp", "Sc", "gc", "s", "ng", "scl", "isc", "asc", "scope", "ctx", "SC", "mc", "pc", "rc", "ch", "desc"], "a": ["ae", "r", "ca", "ar", "l", "oa", "o", "n", "m", "aa", "v", "sa", "al", "af", "A", "at", "ia", "an", "ao", "ab", "i", "ea", "ba", "ach", "alpha", "w", "ma", "as", "s", "p", "ac", "au", "am"], "b": ["r", "wb", "l", "o", "bc", "v", "n", "bf", "db", "m", "bl", "u", "fb", "an", "z", "j", "bi", "ib", "nb", "ab", "i", "ba", "w", "s", "p", "bb", "y", "be", "rb", "B"], "c": ["r", "ca", "lc", "col", "cc", "cal", "cur", "ar", "con", "cos", "l", "co", "cf", "bc", "cr", "n", "m", "ce", "unc", "cp", "dc", "cu", "fc", "u", "tc", "z", "cat", "cd", "C", "cs", "cm", "ci", "com", "ct", "etc", "p", "ac", "cb", "rc", "ch"], "d": ["dh", "D", "r", "df", "l", "dd", "o", "de", "n", "m", "da", "ad", "db", "dc", "ce", "sd", "ctl", "bd", "u", "z", "cd", "i", "ds", "w", "ct", "t", "p", "ld", "dt", "di"], "e": ["ae", "oe", "r", "ex", "ee", "ar", "E", "el", "ei", "l", "o", "de", "n", "ec", "le", "at", "eb", "es", "u", "an", "ed", "ie", "i", "ea", "t", "s", "p", "er", "y", "em", "be"], "f": ["r", "F", "sf", "fi", "l", "fd", "uf", "ff", "o", "v", "bf", "unc", "tf", "fg", "fe", "ef", "fc", "u", "fb", "z", "ed", "i", "fa", "fr", "t", "p", "ft", "y", "fx", "cf"], "g": ["gs", "r", "gi", "l", "gd", "gn", "eg", "tg", "v", "m", "n", "gb", "msg", "fg", "mg", "G", "ge", "gg", "u", "z", "ga", "j", "gm", "i", "bg", "gh", "ig", "gc", "y", "gr", "gp"], "h": ["dh", "he", "ho", "rh", "hi", "hl", "l", "o", "sh", "kh", "v", "dr", "bh", "oh", "eh", "pp", "hh", "ih", "sw", "hz", "hd", "z", "hr", "H", "help", "gh", "ph", "w", "ha", "ld", "th", "hs", "ch", "ah", "ish"], "ans": ["nings", "gs", " means", "uns", "ents", "ons", "eps", "nets", "vals", "aus", "rs", "enes", "anas", "ums", "outs", "ades", "anks", "eds", "ns", "ads", "ks", "helps", "ces", "asms", "atts", "ands", "os", "ms", "lines", "ates", "arts", "ANS", "ids", "amps", "ats", "ens", "ants", "inks", "ags", "es", "ls", "als", "an", "ies", "uploads", "ows", "angs", "vs", "ams", "rates", "is", "ts", "anes", "leans", "orts", "ines", "ops", "en", "ins", "aps", "olds", "ds", "ers", "as", "cons", "s", "posts", "ps", "xs", "offs", "ars", "ann"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\\n    /**\\n     * @param args the command line arguments\\n     */\\n    public static void main(String[] args) {\\n        // TODO code application logic here\\n        Scanner stdIn = new Scanner(System.in);\\n        \\n        for(int i = 1;i <= 10000;i++){\\n            int x = stdIn.nextInt();\\n            System.out.println(\"Case \"+i+\": \"+x);\\n        }\\n    \\n}\\n}", "target": "97", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        // TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n\\n        if(a + b == 3) {\\n            System.out.println(3);\\n        }\\n        else if(a + b == 4) {\\n            System.out.println(2);\\n        }\\n        else {\\n            System.out.println(1);\\n        }\\n        sc.close();\\n\\n    }\\n\\n}\\n", "target": "236", "substitutes": {}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.io.DataInputStream;\\nimport java.io.IOException;\\nimport java.io.FileInputStream;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in Actual solution is at the top\\n *\\n * @author MaxHeap\\n */\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    InputStream inputStream = System.in;\\n    OutputStream outputStream = System.out;\\n    InputReader in = new InputReader(inputStream);\\n    PrintWriter out = new PrintWriter(outputStream);\\n    CSlimes solver = new CSlimes();\\n    solver.solve(1, in, out);\\n    out.close();\\n  }\\n\\n  static class CSlimes {\\n\\n    public void solve(int testNumber, InputReader in, PrintWriter out) {\\n      int n = in.nextInt();\\n      char[] s = in.next().toCharArray();\\n      int ans = 0;\\n      char last = '0';\\n      for (int i = 0; i < n; ++i) {\\n        if (s[i] != last) {\\n          ++ans;\\n        }\\n        last = s[i];\\n      }\\n      out.println(ans);\\n    }\\n\\n  }\\n\\n  static interface FastInput {\\n\\n  }\\n\\n  static class InputReader implements FastInput {\\n\\n    final private int BUFFER_SIZE = 1 << 16;\\n    private DataInputStream din;\\n    private byte[] buffer;\\n    private int bufferPointer;\\n    private int bytesRead;\\n\\n    public InputReader(InputStream is) {\\n      din = new DataInputStream(is);\\n      buffer = new byte[BUFFER_SIZE];\\n      bufferPointer = bytesRead = 0;\\n    }\\n\\n    public InputReader(String file_name) throws IOException {\\n      din = new DataInputStream(new FileInputStream(file_name));\\n      buffer = new byte[BUFFER_SIZE];\\n      bufferPointer = bytesRead = 0;\\n    }\\n\\n    public String next() {\\n      StringBuilder sb = new StringBuilder();\\n      byte c = read();\\n      while (c <= ' ') {\\n        c = read();\\n      }\\n      while (isEmptySpace(c)) {\\n        sb.append((char) c);\\n        c = read();\\n      }\\n      return sb.toString();\\n    }\\n\\n    private boolean isEmptySpace(byte c) {\\n      return c != ' ' && c != '\\n' && c != '\\t' && c != '\\r';\\n    }\\n\\n    public int nextInt() {\\n      int ret = 0;\\n      byte c = read();\\n      while (c <= ' ') {\\n        c = read();\\n      }\\n      boolean neg = (c == '-');\\n      if (neg) {\\n        c = read();\\n      }\\n      do {\\n        ret = ret * 10 + c - '0';\\n      } while ((c = read()) >= '0' && c <= '9');\\n\\n      if (neg) {\\n        return -ret;\\n      }\\n      return ret;\\n    }\\n\\n    private void fillBuffer() {\\n      try {\\n        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\\n      } catch (IOException e) {\\n        throw new RuntimeException(\"trying to read from null input, verify constraints \");\\n      }\\n      if (bytesRead == -1) {\\n        buffer[0] = -1;\\n      }\\n    }\\n\\n    private byte read() {\\n      if (bufferPointer == bytesRead) {\\n        fillBuffer();\\n      }\\n      return buffer[bufferPointer++];\\n    }\\n\\n  }\\n}\\n\\n", "target": "218", "substitutes": {"inputStream": ["inputSocket", "outputFile", " inputSteam", "outputStreamer", "samplestream", "inputSteam", "sourceSteam", "sampleSteam", "sourceStream", "helloStream", "sampleStreamer", "inputstream", "sampleStream", "outputstream", "inputStreamer", " inputSocket", "sourceSocket", "helloSteam", "inputFile", "hellostream", "helloStreamer", "outputSocket", "sourceFile", "outputSteam", " inputFile"], "outputStream": ["fileStream", "outputPort", "outputStreamer", "inputSteam", " outputPort", "filePort", "connectionStream", "outGate", "fileGate", " outputSteam", "outStream", "putForm", "putStream", "connectionStreamer", "outputForm", "outSteam", "outPort", "connectionSteam", "inputForm", "inputStreamer", " outputGate", "putSteam", "putStreamer", "outputSteam", "connectionForm", "fileSteam", "outputGate"], "in": ["r", "name", "ri", "gin", "mm", "bin", "inf", "con", "from", "current", "l", "isin", "rt", "h", "inc", "ini", "context", "err", "source", "by", "al", "raw", "inn", "file", "rin", "IN", " IN", "get", "ai", "run", "or", "ind", "on", "In", "init", "io", "win", "nin", "reader", "it", "null", "thin", "stream", "inner", "en", "ins", "input", "output", "inside", "conf", "w", "local", "t", "info", "cin", "iter", "er", "ac", "as", "add", "mc", "all", "mi", "st"], "out": ["set", "ou", "name", "ex", "end", "outer", " Out", "flush", "timeout", "temp", "writer", "l", "co", "log", "o", "rt", "sys", "tmp", "v", "ch", "err", "this", "print", "OUT", "os", "sum", "report", "OU", "write", "user", "client", "cache", "at", "list", "io", "it", "aos", "Out", "null", "inner", " OUT", "screen", "table", "obj", "output", "pool", "w", "gc", "t", "p", "up", "net", "all", "copy", "to", "nt", "res", "outs"], "solver": ["ssol", "Sol", "ssolver", " sol", "sol", "resolver", "Solution", "ssolution", " solution", "Solve", " solve", "resolve", "ssolve", "Sorter", "resorter", "solve", "solution", "sorter", "Solver", "resolution"], "testNumber": [" testNo", " testCounter", " scenarioCounter", "testCounter", "testnumber", " simNumber", " simNo", " scenarioNumber", " testnumber", "testNo", " scenarionumber", " scenarioNo", " simCounter", " simnumber"], "n": ["nu", "mn", "num", "d", "ll", "nn", "un", "nr", "l", "len", "N", "gn", "o", "ns", "m", "nan", "ne", "nl", "cn", "ni", "sn", "norm", "an", "j", "no", "nb", " N", "na", "nc", "k", "np", "en", "nw", "ng", "t", "p", "ln", "nt", "non"], "s": ["gs", "rs", "ashes", "ns", "sv", "strings", "v", "spe", "ws", "bs", "parts", "S", "os", "ms", "its", "less", "ats", "a", "scripts", "fs", "ls", "ims", "ares", "sts", "vs", "ts", "sq", "cs", "ss", "js", "ins", "gets", "services", "ses", "p", "qs", "ps", "tes", "xs", "hs"], "ans": [" means", "ents", "ros", "acs", "ons", "uns", "faces", "aus", "aces", "anks", "oss", "ns", "ks", "orders", "ians", "ars", "ids", "ms", "lines", "arts", "ANS", "amps", "ats", "ens", "ants", "ls", "an", "ols", "AN", "aos", "mas", "scan", "anes", " spans", "leans", "acts", "cs", "ations", "ins", "olds", "aps", "books", "ions", "as", "cons", "cas", "ots", "xs", "lets", "ports", "rors", "lan", "offs", "outs", "ann"], "last": ["end", "empty", "flush", "next", "cur", "based", "before", "base", "l", "after", "best", "global", "total", "latest", "zero", "show", "close", "worst", "prev", "las", "left", " Last", "no", "shadow", "full", "est", "ast", "std", "old", "max", "never", "reverse", "slave", "t", "nd", "char", "stable", "Last", "nt", "first", "st"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "ei", "chain", "ip", "ji", "point", "o", "li", "v", "m", "me", "ini", "remote", "ai", "ind", "qi", "list", "u", "io", "j", "bi", "it", "ui", "ie", "uri", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "info", "p", "parent", "ami", "y", "mac", "xi", "ii", "si", "di", "x", "mi"], "BUFFER_SIZE": ["BUFFER_VERSION", "BUFFER_DIR", "BUFILE_SOURCE", "BUFFER2NAME", "BUFFERIDDIR", "BUFFERIDVERSION", "BUFFER_ERROR", "BUFILE_ERROR", "BUFFER_RESULTS", "BUDR_Size", "BUFFER_Size", "BUFFER2SIZE", "BUASE_NAME", "BUFFER2DIR", "BUFILE_SIZE", "BUASE_SIZE", "BUFFER_SOURCE", "BUFFER_NAME", "BUDR_RESULTS", "BUFFER2VERSION", "BUDR_SOURCE", "BUASE_DIR", "BUASE_VERSION", "BUFILE_Size", "BUDR_SIZE", "BUFFERIDSIZE", "BUFFERIDNAME"], "din": ["dat", "don", "mn", "pd", "dh", "ri", "gin", "d", "bin", "dim", "rison", "sol", "irin", "dd", "isin", "conn", " inh", "sin", "rd", "pin", "dn", "bridge", "da", "rin", "dig", "wine", "lin", "docker", "elin", "rain", "amin", "ssl", "reader", "pipe", "thin", "rn", " sin", "input", "ds", "socket", "cin", "die", "dq", "pas", "dt", "oin", "di", "login"], "buffer": ["block", "limit", "mask", "row", "timeout", "password", "queue", "base", "temp", "Buffer", "uf", "device", "resource", "uffer", "bridge", "batch", "buff", "database", "filter", "profile", "buf", "cache", "bone", "b", "variable", "match", "scroll", "mem", "send", "history", "sequence", "callback", "stack", "message", "document", "data", "directory", "length", "channel", "table", "memory", "output", "iter", "char", "binary", "header", "command", "page", "size", "library", "window", "map"], "bufferPointer": ["bufferPOINTER", "BufferPOinters", "bufferPopointer", "bufferWraINTER", "bufferPOiter", "bufferPpper", " bufferRopointer", " bufferRointers", "bufferPinters", "BufferPointer", "bufferPointers", "bufferRointer", "bufferPoiper", "BufferPopper", " bufferPointers", "BufferPOpper", "memoryPoistor", "bufferPoINTER", " bufferRointer", "bufferPopper", "bufferPoistor", "bufferRopointer", "memoryPointer", "bufferPtristor", "bufferRointers", "BufferPointers", " bufferRoiper", "bufferPtriter", "bufferPinter", " bufferPoiper", "bufferPtrpointer", "BufferPoINTER", "memoryPopointer", "bufferPoiter", "bufferPOistor", "memoryPoiter", "bufferPtrinter", "bufferPINTER", "bufferPOinter", "bufferPOpper", "bufferRoiper", "bufferWrainter", " bufferPopointer", "BufferPOinter", "BufferPOINTER", "bufferPOiper", "bufferWrapper", "bufferPOinters", "bufferWrainters", "bufferPOpointer"], "bytesRead": ["BytesWrite", "secondsread", "bytesread", "BytesReader", "bitsread", "bitsWrite", "readsWrite", "linesRead", "devicesWrite", "bytesWrite", "bytesLoad", "timesWritten", "readsLoad", "timesReader", "bitsFound", "bitsWritten", "bytesWritten", "devicesLoad", "BytesRead", "bytesFound", "bytesReader", "linesHave", "bitsRead", "timesFound", "timesRead", "BytesWritten", "BytesFound", "linesWrite", "secondsWritten", "devicesRead", "secondsRead", "bitsReader", "readsHave", "linesLoad", "readsRead", "devicesHave", "bytesHave", "Bytesread", "secondsWrite"], "is": ["lis", "ri", "ists", "ais", "isin", "sys", "nis", "bs", "os", "Is", "isa", "its", "ois", "tis", "ys", "sit", "iris", "ris", "IS", "iss", "isl", "cs", "iso", "sis", "has", "ic", "ins", "bis", "isi", "isf", "ains", "ios", "isc", "mis", "ps", "si"], "file_name": ["file_names", " file_names", "file_file", " file_path", "file_path", "file_Name", " file_file", " file_Name"], "sb": ["sf", "wb", "sg", "ob", "sth", "bsp", " SB", "sv", "sp", "zb", "lp", "gb", "bh", "sa", "bs", "buff", "lb", "bp", "ub", "gob", "bj", "b", "bd", "eb", "si", "ib", "nb", "sq", "pb", "bg", "bt", "bis", "rob", "kb", "bb", "cb", "SB", "bps", "rb", "erb"], "c": ["arc", "uc", "r", "lc", "col", "cc", "d", "cur", "con", "cos", "l", "co", "h", "bc", "\u00e7", "ce", "v", "cp", "unc", "ch", "dc", "cr", "m", "ec", "can", "cu", "enc", "cache", "a", "b", "count", "fc", "code", "f", "u", "xc", "tc", "const", "cat", "cd", "C", "cont", "cs", "vc", "g", "nc", "abc", "cm", "ci", "cmp", "ct", "w", "gc", "t", "etc", "char", "ac", "p", "cb", "mc", "pc", "rc", "cf"], "read": ["seek", "end", "skip", "row", "parse", "feed", "current", "wait", "rand", "print", "close", "get", "write", "str", "select", "count", "load", "req", "test", "reader", "scan", "find", "text", "stream", "play", "length", "READ", "build", "ok", "reverse", "check", "iter", "Read", "handle", "cycle", "readable", "query", "first", "next"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tString string = sc.nextLine();\\n\t\tMain main = new Main();\\n\\n\t\tif (main.chkPalindrome(string) && main.chkPalindrome(string.substring(0, (string.length() - 1)/2)) && main.chkPalindrome(string.substring((string.length() + 2)/2,string.length()))) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n\\n\tpublic boolean chkPalindrome(String string) {\\n\t\tint len = string.length();\\n\t\tint right = len - 1;\\n\t\tint left = 0;\\n\t\twhile (true) {\\n\t\t\tif (len % 2 == 0 && right < left) {\\n\t\t\t\tbreak;\\n\t\t\t}else if(len % 2 == 1 && right == left){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tif (string.charAt(left) != string.charAt(right)) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t\tleft++;\\n\t\t\tright--;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}", "target": "123", "substitutes": {"sc": ["sac", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "inc", "nl", "ec", "cle", "sel", "spec", "sw", "se", "sync", "scan", "sq", "cs", "ner", "ss", "nc", "c", "syn", "osc", "Sc", "out", "gc", "s", "ng", "asc", "isc", "scl", "SC", "mc", "pc", "conv", "ch", "desc", "sub"], "string": ["set", "group", "array", "password", "number", "san", "prefix", "strings", "str", "object", "space", "comment", "data", "format", "query", "library", "function", "subject", "description", "parse", "chain", "filename", "source", "pair", "series", "state", "form", "phrase", "site", "secure", "sequence", "ring", "message", "full", "title", "s", "sword", "reason", "result", "STR", "version", "escape", "element", "system", "value", "resource", "this", "file", "section", "spec", "list", "service", "test", "url", "status", "length", "input", "sample", "p", "line", "ident", "name", "sql", "module", "word", "instance", "buffer", "lower", "component", "null", "text", "integer", "char", "sound"], "len": ["num", "dl", "lis", "elt", "coll", "loc", "ll", "dec", "compl", "el", "dim", "l", "total", "cl", "pl", "vec", "perm", "gn", "n", "lp", "fin", "nl", "gl", "ren", "lib", "val", "lit", "lim", "str", "lon", "wid", "list", "gen", "sl", "rot", "ls", "init", "mem", "norm", "lif", "z", "ellen", "Len", "repl", "full", "length", "fun", "lvl", "en", "ell", "syn", "fl", "cmp", "lang", "ln", "lf", "size", "den", "nt", "lan"], "right": ["valid", "block", "r", "rh", "result", "end", "outer", "row", "ight", "after", "part", "red", "mid", "rt", "id", "and", "value", "n", "rew", "ran", "tr", "remote", "top", "ro", "third", "self", "random", "back", "then", "correct", "rw", "instance", "recent", "range", "radius", "full", "rest", "inner", "length", "wrong", "head", "rel", "rights", "max", "Right", "out", "w", "reverse", "rx", "role", "upper", "res", "rem"], "left": ["lt", "offset", "end", "low", "loc", "before", "row", "from", "shift", "el", "current", "l", "internal", "value", "level", "top", "nl", "lo", "cell", "le", "start", "back", "ind", "min", "list", "index", "field", "lower", "bottom", "no", "url", "full", "inner", "lock", "off", "length", "wrong", "open", "rel", "both", "old", "L", "out", "local", "Left", "label", "last", "size", "to", "x"]}}
{"code": "import java.util.Scanner;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt(); //\u5076\u6570\u7403\\n        int m = sc.nextInt(); //\u5947\u6570\u7403\\n        System.out.println(choose(n, 2) + choose(m, 2));\\n\\n    }\\n\\n    static int choose (int n, int k){\\n        int ret = 1;\\n        if(n == k) {\\n            return 1;\\n        }else {\\n            for(int i = 0; i < k; i++){\\n                ret = ret * (n-i) / (i + 1);\\n            }\\n        return ret;}\\n    }\\n}", "target": "49", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "esc", "row", "sec", "ser", "cl", "sys", "system", "cr", "bc", "sv", "sp", "inc", "tk", "ec", "capt", "cle", "sch", "cam", "sw", "scan", "sq", "cs", "ss", "nc", "ok", "c", "osc", "Sc", "gc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "sub"], "n": ["nu", "d", "nn", "pan", "l", "nr", "N", "h", "ns", "m", "ne", "sn", "count", "on", "z", "ern", "nb", " N", "ner", "rn", "en", "c", "conf", "nm", "t", "s", "p", "nt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int count = 1;\\n    char[] ca = sc.next().toCharArray();\\n    for (int i = 0; i < n - 1; i++)\\n      if (ca[i] != ca[i + 1])\\n        count++;\\n    System.out.println(count);\\n  }\\n}\\n", "target": "218", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sb", "sec", "cl", "sys", "sh", "cr", "bc", "sv", "sp", "inc", "sa", "ctl", "capt", "ec", "cle", "sel", "cu", "sch", "sync", "tc", "scan", "sq", "cs", "sci", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "sub"], "n": ["nu", "mn", "num", "name", "d", "nn", "l", "un", "N", "gn", "ns", "conn", "m", "nan", "ne", "nl", "cn", "sn", "norm", "an", "no", "nb", " N", "na", "nc", "np", "en", "c", "nw", "ng", "t", "network", "nor", "ln", "net", "nt", "x", "non", "names"], "count": ["num", "offset", "ount", "ctr", "coll", "result", "acc", "d", "found", "current", "number", "draw", "total", "now", "amount", "missing", "cast", "process", "print", "sum", "report", "state", "Count", "ind", "index", "f", "code", "const", "z", "must", "trace", "find", "nb", "length", "c", "debug", "counter", "out", "continue", "t", "iter", "flag", "quiet", "size", "th", "nt"], "ca": ["ae", "cc", "Ca", "CA", "co", "aca", "ta", "bc", "car", "ce", "ale", "dc", "sa", "ace", "sha", "ua", "can", "cu", "cca", "a", "ia", "ga", "coe", "cd", " Ca", "ue", "pa", "ea", "ba", "na", "cm", "ci", "c", "ape", "pha", "fa", "ada", "ma", "ac", "ha", "cb", "cas", "ka", "cf"], "i": ["q", "I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "hi", "base", "ei", "l", "ip", "ji", "point", "li", "id", "m", "ini", "err", "in", "print", "ai", "ms", "ki", "im", "ind", "qi", "index", "us", "init", "u", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "ti", "ic", "ci", "sim", "my", "cli", "multi", "iter", "gu", "xi", "ii", "si", "di", "x", "mi", "ish"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\twhile(true) {\\n\t\t\t\\n\t\t\tint n = sc.nextInt();\\n\t\t\tint x = sc.nextInt();\\n\t\t\tint cnt = 0;\\n\t\t\t\\n\t\t\tif (n==0 && x==0) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\t\\n\t\t\tfor (int a=1 ; a<=n-2 ; a++) {\\n\t\t\t\tfor (int b=a+1 ; b<=n-1 ; b++) {\\n\t\t\t\t\tfor (int c=b+1 ; c<=n ; c++) {\\n\t\t\t\t\t\tif(a+b+c == x) {\\n\t\t\t\t\t\t\tcnt++;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println(cnt+\"\");\\n\t\t}\\n\t}\\n\\n}\\n", "target": "116", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "ck", "nl", "ctl", "cle", "sch", "sw", "sync", "tch", "exec", "tc", "scan", "sq", "cs", "ss", "nc", "screen", "osc", "Sc", "gc", "ng", "scl", "asc", "isc", "scope", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "n": ["nu", "num", "mn", "nn", "number", "l", "un", "len", "N", "gn", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ren", "sn", "an", "z", "j", "no", "nb", "i", "na", "nc", "np", "en", "nw", "nm", "e", "ot", "w", "ng", "t", "s", "p", "nor", "ln", "y", "net", "nt", "non"], "x": ["ix", "r", "ex", "ax", "l", "h", "o", "v", "xf", "xy", "tx", "inx", "xe", "xx", "index", "f", "u", "xc", "z", "xa", "dx", "i", "xt", "xxx", "e", "w", "X", "t", "p", "rx", "y", "xi", "xs", "ox"], "cnt": [" Cnt", "cret", "acnt", "nct", "Ccount", "nnd", "CNT", " Count", " CNT", "cNT", "Cret", "cnd", "acNT", " cNT", " count", " Cret", "cct", "Cct", "account", "Count", "nnt", "count", " cnd", "Cnd", " cret", "Cnt", "ccount", "nNT", " ccount", "acount", " cct"], "a": ["ae", "ata", "ca", "acc", "att", "ar", "aq", "from", "oa", "\u00e4", "ta", "m", "aa", "da", "sta", "sa", "al", "ai", "isa", "act", "at", " ta", "A", "ia", "u", "an", "la", "ga", "xa", "j", "ao", "ab", "pa", "ea", "area", "ba", "na", "aaa", "ach", "aj", "fa", "alpha", "ap", "ma", "t", "eas", "as", "ac", "ana", "era", "au", "add", "va", "am"], "b": ["br", "bid", "BB", "bin", "beta", "sb", "wb", "base", "mb", "ob", "l", "rb", "bc", "gb", "bh", "db", "bf", "v", "by", "bl", "bs", "lb", "ub", "back", "bur", "ble", "eb", "fb", "bu", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bg", "bt", "bis", "body", "bo", "bb", "binary", "cb", "be", "y", "bar", "to", "B"], "c": ["uc", "ca", "lc", "acc", "coll", "cc", "anc", "oc", "con", "l", "co", "cr", "bc", "ce", "cp", "unc", "dc", "err", "cor", "ec", "cn", "cu", "fc", "f", "xc", "tc", "z", "cat", "cv", "cd", "cs", "vc", "g", "k", "cm", "ic", "com", "ct", "etc", "ac", "cb", "mc", "rc", "cf"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n,x,count;\\n    while((n = sc.nextInt()) != 0 | (x = sc.nextInt()) != 0){\\n      count=0;\\n      for(int i=1;i <= n-2;i++){\\n        for(int j=i+1;j <= n-1;j++){\\n          for(int k=j+1;k <= n;k++){\\n            if(i+j+k == x)count++;\\n          }\\n        }\\n      }\\n      System.out.println(count);\\n    }\\n    sc.close();\\n  }\\n}\\n\\n", "target": "116", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "cr", "bc", "sv", "sp", "inc", "dc", "ck", "ctl", "capt", "cle", "cu", "sch", "sw", "sync", "fc", "tc", "scan", "sq", "cs", "ss", "nc", "screen", "pb", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "scrib", "ch", "desc", "sub"], "n": ["nu", "mn", "num", "name", "d", "nn", "l", "len", "N", "gn", "o", "ns", "m", "v", "nan", "ne", "nl", "cn", "ni", "sn", "on", "an", "z", "it", "no", "nb", "g", "na", "nc", "np", "en", "c", "nm", "ot", "w", "ng", "t", "p", "network", "ln", "y", "net", "nt"], "x": ["q", "ix", "ex", "wx", "ax", "ox", "l", "o", "h", "v", "xf", "xy", "tx", "inx", "xe", "xx", "f", "xc", "z", "xa", "dx", "g", "xt", "mx", "c", "e", "w", "X", "t", "rx", "p", "ux", "y", "xi", "xs", "xp"], "count": ["num", "ount", "ctr", "result", "coll", "d", "found", "number", "draw", "cond", "total", "h", "now", "amount", "value", "v", "summary", "cast", "stat", "follow", "call", "print", "sum", "report", "state", "Count", "ind", "cache", "index", "list", "code", "trust", "scroll", "hold", "match", "test", "z", "comment", "find", "cd", "core", "trace", "nb", "cont", "status", "length", "score", "c", "max", "debug", "ct", "counter", "check", "info", "flag", "cycle", "size", "quiet", "nt", "ch"], "i": ["I", "ix", "iat", "ri", "phi", "hi", "zi", "iu", "ei", "ip", "ji", "li", "asi", "ij", "v", "m", "ini", "ai", "ni", "ki", "im", "ind", "qi", "ori", "at", "ia", "init", "u", "ir", "ims", "io", "bi", "it", "ui", "is", "ie", "pi", "g", "inner", "iso", "ti", "ic", "ci", "sim", "yi", "e", "iq", "ami", "y", "ii", "xi", "si", "di", "mi"], "j": ["br", "q", "jit", "ke", "pt", "l", "jl", "ji", "jj", "jo", "ij", "v", "son", "jump", "ne", "jas", "bs", "ge", "ja", "im", "ind", "str", "bj", "b", "oj", "job", "z", "Ja", "bi", "it", "ib", "pr", "ie", "uj", "json", "js", "aj", "obj", "jp", "J", "bo", "fr", "kj", "y", "be", "jc", "jack", "je", "dj"], "k": ["q", "ke", "wk", "kl", "ks", "kh", "kr", "dk", "km", "tk", "ck", "ko", "ket", "kn", "ak", "unk", "kar", "ki", "ik", "uk", "kk", "mk", "ark", "kin", "g", "ok", "ek", "sk", "ku", "isk", "kt", "kj", "ka", "ijk", "kw", "kid", "kg"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint[] a = new int[4];\\n\t\tchar[] c = sc.next().toCharArray();\\n\t\tfor (int i = 0; i < 4; i++) {\\n\t\t\ta[i] =Character.getNumericValue(c[i]);\\n\t\t}\\n\t\tint[][] op = { { 1, 1, 1 }, { 1, 1, -1 }, { 1, -1, 1 }, { -1, 1, 1 }, { 1, -1, -1 }, { -1, 1, -1 },\\n\t\t\t\t{ -1, -1, 1 },\\n\t\t\t\t{ -1, -1, -1 } };\\n\t\tString str = \"\";\\n\t\tfor (int i = 0; i < 8; i++) {\\n\t\t\tif (a[0] + a[1] * op[i][0] + a[2] * op[i][1] + a[3] * op[i][2] == 7) {\\n\t\t\t\tstr += a[0];\\n\t\t\t\tfor (int j = 0; j < 3; j++) {\\n\t\t\t\t\tif (op[i][j] == 1) {\\n\t\t\t\t\t\tstr += \"+\" + a[j + 1];\\n\t\t\t\t\t} else {\\n\t\t\t\t\t\tstr += \"-\" + a[j + 1];\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\tstr += \"=7\";\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(str);\\n\t}\\n}\\n", "target": "152", "substitutes": {"sc": ["r", "cc", "anc", "esc", "sec", "cl", "sys", "system", "ser", "Scan", "bc", "sv", "cr", "sp", "ec", "sel", "spec", "sch", "se", "sync", "scan", "sq", " Sc", "cs", "ner", "ss", "nc", "sci", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "sub"], "sb": [" db", "gs", "sf", "sg", " ss", " SB", "sh", "sv", "sp", "db", "sa", "su", "bs", "bp", "sw", "se", "b", "Bs", "sm", " sm", "sq", "g", "bt", "bb", "cb", "SB", "si", "B", "st"], "a": ["ae", "r", "ca", "att", "array", "ar", "oa", "o", "ta", "zero", "n", "m", "aa", "app", "da", "aw", "sa", "sta", "v", "ai", "ya", "A", "b", "at", "f", "ack", "ia", "es", "an", "la", "ga", "ao", "xa", "ed", "ab", "apa", "area", "aff", "data", "ba", "aaa", "ast", "ap", "alpha", "ma", "as", "eas", "p", "ac", "s", "au", "all", "ata", "am"], "c": ["r", "lc", "ca", "cc", "d", "ar", "con", "co", "n", "v", "ce", "cp", "dc", "csv", "can", "cu", "b", "fc", "u", "xc", "cat", "C", "cs", "g", "vc", "ic", "com", "ct", "x", "s", "char", "p", "ac", "cin", "pc", "rc", "ch"], "i": ["ix", "zi", "iu", "ei", "li", "me", "ai", "ms", "ki", "ik", "f", "ims", "is", "ic", "e", "ami", "y", "oi", "di", "x", "ri", "l", "chain", "ip", "ji", "id", "ij", "in", "client", "ori", "io", "bi", "it", "um", "ci", "sim", "origin", "cli", "iq", "s", "ii", "ex", "phi", "hi", "this", "print", "ind", "list", "ia", "u", "status", "pi", "my", "p", "xi", "si", "mi", "I", "name", "gi", "v", "m", "ini", "by", "im", "qi", "index", "us", "init", "ity", "ui", "ie", "uri", "ti", "multi", "info", "iter"], "op": ["opp", "pop", "post", "rop", "ip", "co", "o", "bit", "perm", "pl", "sp", "cp", "tip", "operator", "Op", "rep", "per", "update", "push", "arg", "operation", "pp", "ang", " Op", "opt", "rot", "type", "oop", "math", "it", "rip", "par", "vert", "mop", "pr", "cmd", "OP", "comp", "k", "mod", "ops", "typ", "hop", "step", "cmp", "jp", "ap", "ot", "exp", "info", "p", "oper", "cop", "up", "ps", "x", "map"], "str": ["dat", "r", "cert", "result", "name", "STR", "ctr", "elt", "coll", "cur", "ar", "temp", "chain", "sys", "del", "ns", "tree", "usr", "sp", "n", "conn", "dr", "tr", "err", "oct", "cr", "msg", "ocr", "raw", "doc", "print", "spec", "ret", "enc", "art", "warn", "list", "buffer", "inst", "arr", "ent", "hex", "string", "it", "url", "Str", "div", "pr", "cont", "text", "rest", "vol", "obj", "output", "txt", "format", "out", "fr", "exp", "t", "s", "char", "p", "iter", "res", "gr", "st", "expr"], "j": ["br", "q", "jit", "pt", "key", "ev", "ji", "jj", "h", "jo", "tree", "v", "ij", "m", "err", "jump", "ne", "msg", "ge", "ja", "bj", "at", "b", "oj", "job", "on", "u", "z", "it", "pr", "g", "uj", "off", "k", "json", "js", "obj", "aj", "jp", "ph", "out", "fr", "other", "ng", "t", "J", "exp", "kj", "y", "jc", "jack", "dj", "je", "jl", "next"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\t\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tInputReader in = new InputReader(System.in);\\n\t\tint n = in.readInt();\\n\t\tint gems[] = new int[n]; \\n\t\tint cost[] = new int[n]; \\n\t\t\\n\t\tint ans = 0; \\n\t\tfor(int i = 0; i<n; i++) gems[i] = in.readInt();\\n\t\tfor(int i = 0; i<n; i++) cost[i] = in.readInt(); \\n\t\tfor(int i = 0; i<n; i++) {\\n\t\t\tif(gems[i] > cost[i]) ans += gems[i] - cost[i]; \\n\t\t}\\n\t\tSystem.out.println(ans); \\n\t}\\n}\\nclass InputReader {\\n\\n\tprivate InputStream stream;\\n\tprivate byte[] buf = new byte[1024];\\n\tprivate int curChar;\\n\tprivate int numChars;\\n\tprivate SpaceCharFilter filter;\\n\\n\tpublic InputReader(InputStream stream) {\\n\t\tthis.stream = stream;\\n\t}\\n\\n\tpublic int read() {\\n\t\tif (numChars == -1)\\n\t\t\tthrow new InputMismatchException();\\n\t\tif (curChar >= numChars) {\\n\t\t\tcurChar = 0;\\n\t\t\ttry {\\n\t\t\t\tnumChars = stream.read(buf);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tif (numChars <= 0)\\n\t\t\t\treturn -1;\\n\t\t}\\n\t\treturn buf[curChar++];\\n\t}\\n\\n\tpublic int readInt() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tint res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9')\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\\n\tpublic String readString() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tStringBuilder res = new StringBuilder();\\n\t\tdo {\\n\t\t\tres.appendCodePoint(c);\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res.toString();\\n\t}\\n\\n\tpublic long readLong() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c)) {\\n\t\t\tc = read();\\n\t\t}\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tlong res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9') {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\t\\n\tpublic boolean isSpaceChar(int c) {\\n\t\tif (filter != null)\\n\t\t\treturn filter.isSpaceChar(c);\\n\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n\t}\\n\\n\tpublic String next() {\\n\t\treturn readString();\\n\t}\\n\\n\tpublic interface SpaceCharFilter {\\n\t\tpublic boolean isSpaceChar(int ch);\\n\t}\\n}\\n", "target": "26", "substitutes": {"in": ["r", "mm", "ex", "gin", "end", "bin", "from", "inf", "con", "l", " din", "log", "rt", "inc", "ini", "err", "read", "by", "al", "per", "inn", "file", "IN", "run", "user", "ind", "form", "at", "on", "In", "init", "io", "win", "reader", "it", "din", "is", "inner", "en", "ins", "input", "conf", "std", "out", "as", "er", "cin", "info", "up", "add", "net", "all", "readable"], "n": ["num", "nu", "name", "d", "ll", "nn", "number", "un", "l", "len", "N", "o", "h", "ns", "m", "v", "nan", "ne", "nl", "sn", "count", "pos", "on", "init", "an", "z", "j", "no", "nb", " N", "g", "na", "length", "pi", "np", "nc", "fn", "en", "none", "nm", "out", "ng", "t", "p", "network", "ln", "y", "net", "size", "nt", "names"], "gems": ["gmems", "gealls", "genears", "geens", "gmears", "genems", "geves", "genves", "gves", "gens", " gens", "mears", "rgroups", "regets", "guens", "rgems", "geems", "rgears", "rgens", "genets", "geales", "googs", "guems", "gmens", "guears", "guogs", "regems", "mems", "gmogs", "Gens", "galls", "goears", "goems", "Galls", "geets", " galls", "geroups", "Gales", "gears", "Gems", "mens", "gogs", "geears", "regears", " gales", "mroups", "groups", "gets", "gales", "regves", "goens"], "cost": ["loss", "ctr", "color", "loc", "cal", "st", "con", "cos", "var", "weight", "co", "oss", "total", "amount", "cp", "race", "stone", "control", "needed", "tt", "distance", "required", "power", "path", "sum", "need", "width", "charge", "right", "scale", "rice", "count", "match", "mem", "const", "dist", "pattern", " costs", "data", "risk", "length", "comp", "score", "step", "style", "use", "cons", "check", "info", "roll", "Cost", "jack", "cycle", "size", "stats", "goal", "fee", "cf", "config"], "ans": ["gs", " means", "uns", "ents", "grades", "ons", "works", "offs", "nets", "anas", "rs", "oss", "eds", "ns", "ads", "ks", "asks", "nan", "orders", "ands", "ars", "errors", "yes", "ms", "arts", "ANS", "amps", "ats", "ens", "ants", "ags", "es", "an", "angs", "ann", "aos", "vs", "anes", "acts", "cs", "ones", "ins", "aps", "cons", "s", "terms", "posts", "actions", "lets", "rans", "rors", "outs", "ros"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "is", "ic", "ios", "y", "oi", "di", "ri", "fi", "chain", "ip", "ji", "point", "o", "id", "ij", "client", "io", "bi", "it", "ci", "sim", "cli", "exp", "mac", "ii", "ex", "phi", "hi", "ion", "item", "print", "ind", "list", "ia", "pi", "json", "my", "p", "xi", "si", "mi", "I", "name", "ico", "key", "gi", "iy", "m", "ini", "err", "im", "qi", "init", "ies", "j", "ity", "ui", "ie", "uri", "ti", "port", "PI", "multi", "iter", "info"], "stream": ["wrapper", "st", "chain", "http", "h", "system", "log", "engine", "console", "m", "impl", "context", "util", "source", "steam", "ream", "speed", "transform", "read", "path", "host", "state", "or", "sw", "form", "view", "sync", "sl", "buffer", "ssl", "io", "reader", "stack", "pipe", "loop", "sc", "message", "cont", "data", "status", "each", "channel", "open", "table", "Stream", "input", "iterator", "output", "sample", "pool", "out", "socket", "port", "local", "network", "handle", "parent", "proc", "time", "peer", "window"], "buf": ["br", "cur", "Buff", "wb", "bin", "queue", "Buffer", "temp", "uf", "bar", "vec", "ref", "tmp", "db", "tr", "cap", "msg", "bl", "batch", "buff", "bs", "seq", "bn", "bytes", "mu", "str", "b", "bag", "buffer", "mem", "arr", "fb", "cv", "cmd", "data", "txt", "pool", "out", "cb", "box", "rb", "conv"], "curChar": [" curchar", "currentChar", "corChar", "corByte", " curCh", "corCh", " curByte", "currentCh", "CurGr", "CurChar", "currentByte", "crChar", "curByte", " curCol", "curCol", "Curchar", "CurCh", "ctrCh", "ctrChar", "CurByte", "CurCol", "corGr", "currentGr", "curchar", "curGr", "ctrchar", "currentCol", "ctrByte", "curCh", "crByte", "crCol", "crCh"], "numChars": [" numchars", "numchARS", " numChans", "numThards", "NumChARS", "numErarts", "NumChards", "NumChords", " numChins", "numTrys", "numCrs", "numchans", " numchys", "numTrARS", "numStrARS", "numchins", "NUMTrarts", "numCars", "numErras", "NUMCharts", "numTharts", "numChARS", "numThars", "numErars", "numTrarts", "NUMChARS", "numCARS", "numClrs", " numChys", "numChans", "NUMChras", "numClars", "NumCars", "numChins", "NUMTrras", "numCards", "NumChars", "numChys", "numErARS", "numCarts", "numCords", "NumCards", "numCys", "NUMChars", "NUMTrars", "numChrs", "numChards", "numcharts", "numClARS", "numchys", "NUMTrARS", "NumCarts", "numchars", " numchins", "numTrras", "numCharts", "NumChrs", "numCins", "NumCharts", "numChords", "numClords", "numchras", "numTrins", "numChras", "numStrans", "numTrars", "numchards", "numStrars", " numChARS"], "filter": ["set", "mask", "bin", "fil", "ref", "batch", "update", "term", "file", "Filter", "handler", "map", "list", "f", "match", "func", "test", "const", "accept", "window", "fn", "table", " filters", "pool", "check", "conv", "config", "hash"], "c": ["arc", "uc", "r", "lc", "ca", "vc", "col", "cc", "d", "cur", "con", "l", "chain", "co", "cl", "h", "cf", "bc", "cr", "ce", "cp", "v", "unc", "dc", "cor", "comm", "ec", "can", "cu", "enc", "cache", "b", "count", "fc", "f", "xc", "tc", "cat", "cd", "sc", "content", "cont", "C", "cs", "g", "nc", "k", "cm", "abc", "cod", "ic", "ci", "com", "conf", "cmp", "ct", "e", "gc", "t", "etc", "p", "ac", "cb", "mc", "rc", "pc", "conv"], "sgn": ["sbn", " sign", "rsgn", "ainsgn", "ainsbn", "sign", "sig", "sgen", "sz", "Sgn", "ainsign", "ssgain", "ssgn", " sz", "sgain", "dsig", "rsign", "rsig", "dsign", "dsgain", " sbn", "ainsgen", " sgen", "rsgain", "Sz", "ssig", " sig", "dsgn", "Sign", "Sig", "ssign"], "res": ["reg", "r", "result", "ons", "col", "vals", "rs", "cond", "red", "abs", "sys", "rt", "ress", "vec", "usr", "reset", "Res", "rand", "respons", "stock", "resp", "err", "rep", "bs", "ro", "os", "yes", "ms", "val", "ret", "str", "us", "req", "resh", "rex", "results", " Res", "pr", "div", "mk", "cs", "rest", "rss", "vol", "rel", "js", "ins", "obj", "des", "RES", "out", "cons", "def", "re", "ps", "rc", "resolution", "nt", "pres", "gr", "rem"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.io.BufferedWriter;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        CTypicalStairs solver = new CTypicalStairs();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CTypicalStairs {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int n = in.readInt();\\n            int m = in.readInt();\\n            int[] a = in.readIntArray(m);\\n\\n            long[] dp = new long[n + 1];\\n            Arrays.fill(dp, 1);\\n            for (int i = 0; i < m; i++) {\\n                dp[a[i]] = 0;\\n            }\\n            for (int i = 2; i <= n; i++) {\\n                if (dp[i] == 0) continue;\\n                dp[i] = (dp[i - 1] + dp[i - 2]) % MiscUtils.MOD7;\\n            }\\n\\n            out.printLine(dp[n]);\\n        }\\n\\n    }\\n\\n    static class MiscUtils {\\n        public static final int MOD7 = (int) (1e9 + 7);\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int[] readIntArray(int size) {\\n            int[] array = new int[size];\\n            for (int i = 0; i < size; i++) {\\n                array[i] = readInt();\\n            }\\n            return array;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int readInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n        public void printLine(long i) {\\n            writer.println(i);\\n        }\\n\\n    }\\n}\\n\\n", "target": "174", "substitutes": {"inputStream": ["inputSocket", "outputPort", " inputSteam", "outputStreamer", "sourceScript", "singleSocket", "inputSteam", "sourceSteam", "singleStream", "helloPort", "singleSteam", "sourceStream", "inputPort", "helloStream", "singleScript", "inputScript", "inputStreamer", "sourceStreamer", " inputSocket", "sourceSocket", "sourcePort", "helloSteam", "helloStreamer", "outputSteam", " inputScript"], "outputStream": ["outPoint", "OutputForm", "outputStreamer", "OutputPoint", "inputSteam", "OutputStream", "connectionStream", " outputSteam", "outStream", "OutputStreamer", "connectionStreamer", "outputForm", " outputForm", "OutputSteam", "outSteam", "connectionSteam", "inputForm", "inputStreamer", "outForm", " outputPoint", "outputSteam", "connectionForm", "outputPoint"], "in": ["r", "mm", "ri", "gin", "sql", "end", "bin", "con", "inf", "from", "el", "l", "co", "log", "o", "inc", "ini", "context", "source", "raw", "al", "per", "lo", "inn", "file", "rin", "IN", "doc", "get", "run", "serv", "or", "act", "ind", "form", "on", "In", "init", "io", "nin", "reader", "it", "null", "din", "is", "kin", "inner", "ic", "en", "ins", "input", "old", "conf", "local", "er", "info", "cin", "iter", "ac", "check", "up", "add", "net", "ain"], "out": ["ou", "result", "ex", "end", "outer", "cos", "ver", "co", "log", "o", "sys", "server", "tmp", "v", "conn", "err", "this", "print", "OUT", "os", "OU", "report", "can", "write", "client", "user", "or", "cache", "at", "list", "gen", "io", "j", "gr", "it", "aos", "Out", "null", "inner", "screen", "table", "obj", "output", "pool", "w", "gc", "t", "info", "er", "s", "p", "up", "net", "all", "to", "nt", "outs", "window"], "solver": ["esolve", "esoln", "esolver", "researcher", "resolver", "Solution", " solution", "soln", " searcher", "Solve", " sorter", " solve", "esorter", "esearcher", "resorter", " soln", "esolution", "solve", "searcher", "solution", "Soln", "sorter", "Solver", "resolution"], "testNumber": [" testNo", " scenarioRange", " testNR", "caseNumber", " scenarioNumber", "caseNo", "caseRange", "testNo", " testRange", "caseNR", " scenarioNR", "testNR", " scenarioNo", "testRange"], "n": ["nu", "mn", "num", "name", "d", "nn", "l", "nr", "un", "N", "o", "h", "ns", "v", "ne", "nan", "nl", "cn", "ni", "sn", "f", "on", "M", "u", "an", "norm", "z", "j", "no", "nb", "g", "na", "k", "np", "en", "nw", "nm", "w", "t", "p", "net", "all", "nt"], "m": ["mn", "r", "mm", "dm", "d", "mo", "l", "o", "h", "v", "me", "mun", "ms", "mu", "im", "b", "sm", "M", "u", "an", "mem", "z", "j", "mas", "bm", "tm", "gm", "mx", "cm", "k", "mt", "nm", "w", "ma", "t", "p", "y", "mc", "mat", "mi"], "a": ["ava", "ca", "av", "d", "att", "l", "oa", "o", "ta", "aa", "sa", "ai", "A", "b", "ia", "an", "la", "ga", "xa", "ao", "j", "ea", "apa", "pa", "aff", "pi", "ba", "aaa", "na", "fa", "alpha", "e", "ap", "ma", "as", "s", "p", "ac", "ata", "am"], "dp": ["dh", "pd", "dl", "dm", "deep", "pm", "df", "password", "vp", "dd", "tp", "hp", "wp", "bsp", "deb", "ip", "imp", "cp", "lp", "dr", "aa", "dk", "dc", "drop", "db", "da", "bp", "dial", "pp", "pause", "wd", "px", "isp", "ppa", "delay", "pipe", "arp", "pkg", "pa", "pb", "np", "ds", "jp", "ph", "def", "p", "dep", "ps", "dq", "bps", "dt", "adr", "xp", "di", "DP", "gp"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "ms", "ims", "is", "ic", "ami", "y", "oi", "di", "x", "ri", "fi", "chain", "ip", "ji", "o", "id", "ij", "io", "bi", "it", "k", "ci", "sim", "cli", "s", "iq", "ii", "ex", "phi", "hi", "ion", "\u0438", "u", "fire", "status", "pi", "p", "xi", "si", "mi", "I", "gi", "iy", "v", "ini", "by", "im", "qi", "index", "us", "init", "j", "ui", "uri", "ie", "ti", "multi", "info", "iter"], "MOD7": ["MOD11", "MOD6", "mod7", "mod6", "MOD13", "MOD07", " MOD11", " MOD07", "Mod13", "Mod07", "Mod17", " MOD6", "mod11", "mod13", "MOD17", "Mod7", "Mod11", "MIN7", "MIN13", "mod07", "Mod6", "MIN17", "mod17"], "stream": ["wrapper", "row", "REAM", "chain", "engine", "console", "context", "read", "speed", "ream", "path", "file", "host", "handler", " upstream", "serv", "thread", "sw", "form", "inter", "view", "secure", "buffer", "reader", "stack", "pipe", "loop", "message", "cont", "data", "each", "channel", "event", "table", "Stream", "input", "iterator", "port", "sample", "pool", "socket", "sam", "iter", "output", "handle", "down", "proc", "line", "window"], "buf": ["br", "cur", "bin", "Buffer", "queue", "var", "uf", "vec", "tmp", "err", "cap", "msg", "bl", "buff", "seq", "buffer", "mem", "arr", "orig", "cv", "pkg", "cmd", "alloc", "cb", "rc", "rb", "conv", "proc"], "curChar": ["CurByte", " curchar", "CurStr", "CurChar", "currentChar", "currentByte", " curByte", "curByte", "currentStr", " curStr", "curStr", "Curchar", "currentchar", "curchar"], "numChars": ["numCharats", "maxchats", "numCharar", "maxChars", "maxchar", "numColar", "numchats", "numchrs", "numChar", "maxchars", "numChrs", "maxChar", "numColars", "numColrs", "maxChats", "numCharars", "numColats", "maxChrs", "numChats", "numchars", "maxchrs", "numCharrs", "numchar"], "filter": ["set", "result", "name", "mask", "bin", "fil", "ref", "filename", "processor", "source", "file", "Filter", "handler", "code", "match", "buffer", "test", "callback", "accept", "channel", "table", "cmp", " filters", "format", "check", "conv", "config", "term"], "size": ["set", "num", "offset", "name", "empty", "row", "number", "SIZE", "len", "id", "Size", "dimension", "speed", "level", "equal", "sum", "small", "ize", "sn", "start", "scale", "se", "shape", "count", "index", "code", "send", "type", "space", "message", "area", "zone", "status", "length", "ze", "store", "max", "sample", "storage", "style", "capacity", "use", "scope", "si", "height"], "array": ["result", "empty", "ray", "Array", "row", "var", "element", "global", "now", "sh", "amount", "value", "tmp", "export", "batch", "database", "item", "section", "list", "index", "audio", "instance", "object", "collection", "arr", "range", "sequence", "buffer", "our", "string", "trace", "message", "vector", "flash", "area", "data", "length", "table", "record", "my", "air", "ary", "angle", "integer", "binary", "all", "bar", "window", "map"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Set;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u5730\u70b9\u6570\u306e\u5165\u529b\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\\n\t\tint result = c - (a - b);\\n\t\t\\n\t\tif (result < 0) result = 0;\\n\t\t\\n\t\tSystem.out.println(result);\\n\\n\\n\t}}", "target": "45", "substitutes": {"sc": ["set", " scorer", "sys", "system", "sv", "sp", "cr", " scr", "sa", "tk", "nl", " sk", "se", "scan", "sq", " Sc", "cs", "ss", "nc", " rc", "c", "sk", "Sc", "gc", "SC", "rc", "ch", " sp"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Sparsh Sanchorawala\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        CWelcomeToAtCoder solver = new CWelcomeToAtCoder();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CWelcomeToAtCoder {\\n        public void solve(int testNumber, InputReader s, PrintWriter w) {\\n            int n = s.nextInt(), m = s.nextInt();\\n            int corr = 0, pen = 0;\\n            int[] check = new int[n];\\n            int[] penal = new int[n];\\n            for (int i = 0; i < m; i++) {\\n                int p = s.nextInt() - 1;\\n                String str = s.next();\\n                if (check[p] == 1)\\n                    continue;\\n                if (str.equals(\"AC\"))\\n                    check[p] = 1;\\n                else\\n                    penal[p]++;\\n            }\\n            for (int i = 0; i < n; i++) {\\n                if (check[i] == 1) {\\n                    corr++;\\n                    pen += penal[i];\\n                }\\n            }\\n            w.println(corr + \" \" + pen);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public String nextString() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                if (Character.isValidCodePoint(c)) {\\n                    res.appendCodePoint(c);\\n                }\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public String next() {\\n            return nextString();\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "48", "substitutes": {"inputStream": ["inputSocket", "instream", "inStream", "outputFile", " inputSteam", "outputStreamer", "myStreamer", "thisSocket", "mystream", "inputSteam", "inStreamer", "mySteam", "inSteam", "inputstream", "thisStream", "outputstream", "inputStreamer", " inputSocket", "inputFile", "thisFile", "outputSocket", "myStream", "thisSteam", "outputSteam", " inputFile"], "outputStream": ["inputWriter", "outputPort", "saveWriter", "displayPort", "webSteam", " outputPort", " outputSteam", "outStream", "outstream", "inputstream", "outputForm", "saveForm", "webPort", "displayStream", "webStream", "outputstream", "displaySteam", "inputForm", "outWriter", "outForm", "outputWriter", "displayWriter", "webWriter", "outputSteam", "saveStream", "savestream", " outputWriter"], "in": ["r", "gin", "bin", "inf", "con", "from", "current", "l", " din", "isin", "rt", "log", "o", "sin", "ini", "err", "context", "source", "inn", "file", "rin", "IN", "get", "run", "ind", "on", "In", "init", "io", "reader", "it", "null", "din", "is", "inner", "ic", "en", "ins", "input", "output", "inside", "t", "cin", "iter", "up", "net", "st"], "out": ["ou", "name", "ex", "end", "outer", "temp", "writer", "l", "co", "log", "o", "sys", "v", "err", "ws", "raw", "this", "print", "OUT", "os", "OU", "write", "client", "sw", "at", "b", "conv", "exec", "io", "it", "aos", "Out", "null", "cmd", "output", "txt", "t", "env", "up", "net", "all", "to", "nt", "outs"], "solver": ["esoln", "ssolver", "ssolved", "solved", "esolver", "resolver", "Solution", "ssoln", "ssolution", " solution", "soln", "Solve", " solve", "resolved", "esolved", "ssolve", " soln", "esolution", "solve", "resoln", "solution", "Soln", "Solver", "resolution"], "testNumber": [" testNo", "testCode", " suiteNo", " testCode", " attemptNo", "testnum", " suiteNumber", "testNo", " testnum", " suitenum", " attemptNumber", " suiteCode", " attemptnum", " attemptCode"], "s": ["q", "gs", "r", "sb", "rs", "abs", "http", "sys", "eds", "ns", "h", "sv", "sa", "ws", "S", "os", "src", "ms", "its", "less", "ys", "sw", "ats", "b", "a", "ags", "fs", "es", "ls", "ims", "sts", "is", "ts", "sq", "cs", "ss", "js", "ins", "ds", "times", "ers", "gets", "socket", "as", "ses", "qs", "ps", "xs", "stats", "conv"], "w": ["r", "wx", "d", "wb", "wt", "l", "writer", "wp", "h", "o", "ew", "v", "word", "aw", "web", "ws", "iw", "wa", "write", "b", "rw", "wd", "W", "hw", "g", "wr", "nw", "e", "t", "wh", "we", "y", "kw", "x", "window"], "n": ["nu", "mn", "num", "r", "mm", "d", "nn", "l", "un", "N", "o", "ns", "v", "dn", "ne", "nan", "nl", "cn", "sn", "M", "norm", "an", "z", "j", "no", "nb", "pi", "g", "nc", "na", "k", "np", "en", "nm", "t", "ng", "network", "nor", "net", "nt", "names"], "m": ["mn", "r", "mm", "dm", "mo", "l", "met", "h", "v", "me", "km", "mun", "ms", "mean", "mr", "M", "an", "mem", "mas", "bm", "gm", "tm", "mx", "cm", "mod", "mt", "nm", "ma", "man", "mis", "em", "mc", "med", "mat", "mi", "rem"], "corr": ["corrr", "Corrb", " CorR", "corres", "Corr", "CORro", "CORR", "derrr", "curerr", "CORrb", "CORrr", "CorR", "derro", "curres", "grr", "curr", "grrr", "Corrr", "Corerr", " Corerr", "grres", "CORr", " Corrb", "corR", "grerr", "corerr", "corrb", " Corr", "corro", "derR", "derr", "Corro", "Corres", "currr", "CORerr"], "pen": ["don", "pn", "ping", "mer", "water", "pan", "ver", "paren", "fen", "feat", "enny", "pin", "spe", "pe", "per", "pol", "pri", "mark", "ren", "pid", "par", "pr", "pa", "ptr", "pain", "lock", "bra", "pad", "en", "rel", " penalty", "Pen", "port", "syn", "prim", "ped", "sten", "gre", "pas", "den", "pres", "policy"], "check": ["set", "checks", "block", "look", "key", "fail", "cond", "cp", "wait", "control", "read", "ck", "rank", "call", "print", "clear", "close", "run", "warn", "note", "search", "ack", "load", "match", "force", "test", "req", "CHECK", "loop", "scan", "find", "comment", "only", "status", "lock", "ok", "help", "score", "good", "head", "link", "black", "info", "Check", "flag", "add", "pack", "query", "checked", "see"], "penal": [" penAL", "portalid", "portel", "PenAL", "Penal", "pinial", "penalid", "pinals", "portial", "penel", "Penial", "pinalid", "portals", "penalty", "panalty", "Penalid", "Penel", "portal", "Penalty", "panals", "Penals", "panal", "pinal", "penial", " penals", "penals", "pinAL", "penAL", " penalid", "portalty", "panel"], "i": ["I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "hi", "chain", "ip", "ji", "li", "o", "id", "dr", "me", "ini", "ai", "ki", "im", "ind", "qi", "index", "init", "\u0438", "io", "z", "j", "bi", "it", "ui", "is", "ie", "status", "pi", "g", "ti", "ic", "ci", "sim", "cli", "multi", "info", "iter", "y", "ii", "xi", "si", "di", "x", "mi"], "p": ["q", "pn", "pt", "ping", "pai", "pre", "part", "ip", "tp", "vp", "point", "pl", "perm", "sp", "cp", "lp", "pe", "bp", "P", "pp", "pid", "pos", "pat", "pkg", "it", "par", "pr", "pa", "pi", "g", "k", "np", "pad", "port", "jp", "ap", "ps", "pc", "span", "peer"], "str": ["q", "r", "name", "STR", "key", "l", "chain", "sp", "tr", "seq", "print", "spec", "list", "f", "z", "j", "string", "pkg", "Str", "vol", "obj", "txt", "jp", "fr", "t", "char", "re", "st"], "stream": ["wrapper", "pod", "row", "REAM", "chain", "http", "engine", "console", "context", "read", "steam", "ream", "pair", "speed", "host", "path", "file", "handler", " upstream", "user", "or", "sw", "form", "inter", "view", "sync", "secure", "buffer", "reader", "stack", "pipe", "loop", "zip", "message", "data", "each", "channel", "event", "open", "table", "Stream", "input", "iterator", "output", "sample", "pool", "socket", "port", "iter", "network", "handle", "proc", "util", "window"], "buf": ["br", "block", "Buff", "cur", "bin", "wb", "sb", "Buffer", "queue", "temp", "uf", "vec", "tr", "db", "cap", "alph", "msg", "batch", "buff", "doc", "seq", "bytes", "b", "img", "bag", "buffer", "mem", "arr", "init", "cv", "pkg", "txt", "mates", "cb", "box", "rb", "conv"], "curChar": ["ctrCharacter", "rcCh", " curCh", " curByte", "rcVar", "ctrlByte", "CurChar", "curByte", " curVar", "CurCharacter", "CurCh", "ctrCh", "ctrlRow", "ctrChar", "CurByte", "rcChar", "rcByte", " curRow", " curCharacter", "CurRow", "curVar", "curRow", "ctrByte", "CurVar", "curCh", "ctrlChar", "curCharacter", "ctrlCh"], "numChars": [" numchars", "numchARS", "numCheARS", "numchrs", "NumChords", "numberClars", " numChrs", "numCHars", "numColats", "numClards", "sumchards", "numChARS", "sumchrs", "numClrs", "numberChats", "sumChards", " numColARS", "sumchARS", " numColarts", "numberChars", "numberCharts", " numchases", "numColars", "numColarts", "numberClats", "numCharars", "numChases", "numChats", "numCHases", "numCharARS", "numCHrs", "numColARS", "numClats", "numClars", " numChases", "sumChARS", "sumChrs", "NumChars", "numCHords", "numChears", " numColars", "numCHats", "numChrs", "numChards", "numColrs", "numcharts", "numClARS", "sumChars", "numchars", "numberClrs", "numCHarts", "numCharts", "numChers", " numCharts", "numchords", "numCheards", "NumCharts", " numchARS", "numChords", "numCHARS", "numClarts", "numchases", "numCharases", " numColrs", "numberChrs", "numchards", "numberClarts", "sumchars", " numChARS"], "filter": ["block", "name", "mask", "fil", "filename", "processor", "source", "batch", "function", "Filter", "handler", "map", "f", "fac", "match", "buffer", "test", "callback", " filtered", " Filter", "accept", "channel", " filters", "conv", "policy", " filtering", "config", "term"], "next": ["subject", "current", "sec", "draw", "inc", "rand", "read", "seq", "front", "md", "Next", "get", "ind", "send", "prev", "append", "accept", "ext", "sen", "ner", "link", "ma", "ng", "nd", "last", "pred", "first"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n\\n        int n = scan.nextInt();\\n        int max = 0, min = 100;\\n        int x[] = new int[n];\\n        for (int i=0; i < n;i ++) {\\n            x[i] = scan.nextInt();\\n            if (x[i] > max) {\\n                max = x[i];\\n            }\\n\\n            if (x[i] < min) {\\n                min = x[i];\\n            }\\n        }\\n\\n        int minTotal = 99999999;\\n        for (int i = min; i <= max; i++) {\\n            int total = 0;\\n            for (int k = 0; k < n; k++) {\\n                total += Math.pow((x[k] - i), 2);\\n            }\\n\\n            if (total < minTotal) {\\n                minTotal = total;\\n            }\\n        }\\n        System.out.println(minTotal);\\n    }\\n}", "target": "17", "substitutes": {"scan": ["r", "save", "skip", "sql", "row", "reach", "gate", "parse", "san", "watch", "ser", "sys", "system", "Scan", "connect", "sv", "v", "m", "sin", "read", "in", "sum", "can", "get", "report", "auto", "se", "sync", "search", "send", "scroll", "an", "io", "range", "cat", "ann", "sc", "find", "ner", "g", "na", "store", "sim", "link", "out", "gc", "check", "black", "info", "p", "sur", "re", "proc", "query", "ch", "util"], "n": ["nu", "mn", "num", "name", "nn", "number", "l", "un", "nr", "len", "N", "o", "ns", "m", "v", "nan", "in", "ne", "nl", "cn", "ni", "sn", "count", "on", "j", "no", "nb", " N", "g", "na", "nc", "np", "en", "c", "nm", "ng", "t", "p", "network", "ln", "net", "size", "nt"], "max": ["end", "ex", "work", "ax", "con", "maximum", "master", "prime", "ox", "chain", "co", "h", "now", "m", "v", "ro", "show", "high", "sum", "can", "root", "right", "start", "cache", "gt", "res", "act", "load", "range", "full", "mk", "huge", "rest", "na", "mx", "mod", "head", "out", "ma", "upper", "Max", "last", "up", "MAX", "size", "med", "to", "grow", "over", "net", "window"], "min": ["lt", "mn", "offset", "mins", "mm", "low", "mini", "st", "l", "temp", "part", "pre", "Min", "mid", "minute", "m", "default", "tail", "in", "fin", "lo", "sum", "small", "mean", "im", "start", "mel", "minimum", "begin", "south", "search", "index", "amin", "init", "lower", "range", "left", "j", "first", "partial", "inner", "mod", "rel", "step", "none", "diff", "ma", "MIN", "size", "mi", "mit"], "x": ["ix", "ex", "wx", "ax", "php", "l", "xml", "v", "tt", "xf", "lat", "xy", "tx", "act", "xe", "xx", "list", "f", "code", "px", "xc", "z", "history", "xa", "hex", "xes", "ext", "lex", "news", "mx", "xt", "json", "xxx", "c", "xd", "ct", "e", "X", "exp", "rx", "check", "ux", "ctx", "y", "xs", "xi", "xp", "fx", "ox", "config"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "f", "ims", "is", "ic", "e", "ami", "y", "oi", "di", "ri", "l", "ip", "ji", "point", "o", "id", "ij", "iti", "ori", "io", "z", "bi", "it", "g", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "print", "ni", "ind", "u", "fire", "\u0438", "status", "pi", "iso", "yi", "p", "iri", "xi", "si", "mi", "I", "gi", "v", "m", "ini", "im", "qi", "index", "us", "M", "init", "j", "ity", "ui", "ie", "uri", "ti", "multi", "t", "info", "iter", "to"], "minTotal": [" mintotal", "smallSum", "MinAvailable", "MinLength", "minAvailable", "MinTotal", "gemKnown", "MINLength", "minType", "gemAvailable", "minByte", " minKnown", "aminType", "minMax", "MINMax", "gemtotal", "MINAvailable", "smallTotal", "maxByte", "gemTotal", " minAvailable", "smallByte", "MINTotal", "aminTotal", "aminLength", "aminMax", "minimumtotal", "maxTotal", "Mintotal", "maxtotal", "minimumTotal", "MINKnown", " minByte", " minSum", "MinMax", "MINtotal", "minKnown", "MINType", "maxSum", "minLength", "smalltotal", "MinType", "minSum", "mintotal", "minimumAvailable"], "total": ["set", "valid", "result", "basic", "translation", "created", "eta", "otal", "base", "number", "current", " Total", "temp", "payment", "oat", "global", "met", "zero", "ta", "value", "summary", "meta", "raw", "database", "tax", "equal", "sum", "unknown", "expected", "note", "shared", "trace", "null", "OTAL", "Total", "full", "menu", "complete", "no", "template", "json", "human", "quant", "good", "general", "balance", "alpha", "other", "black", "multi", "t", "info", "stable", "net", "goal", "all", "hash"], "k": ["q", "ke", "ask", "key", "wk", "ikk", "kl", "ks", "kh", "kr", "dk", "km", "tk", "ck", "ko", "unk", "kn", "ak", "ki", "ik", "uk", "kk", "kat", "j", "mk", "ark", "g", "sk", "ku", "ek", "ph", "K", "kt", "kj", "ka", "ijk", "kw", "kid", "kg"]}}
{"code": "import java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tInputStream in = System.in;\\n\tPrintStream out = System.out;\\n\\n\tint next(int[] h, int idx) {\\n\t\tfor (int i = idx; i < h.length; i++) {\\n\t\t\tif (h[i] != 0) {\\n\t\t\t\treturn i;\\n\t\t\t}\\n\t\t}\\n\t\treturn -1;\\n\t}\\n\\n\tpublic void _main(String[] args) {\\n\t\tScanner sc = new Scanner(in);\\n\\n\t\tint n = sc.nextInt();\\n\t\tint[] h = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\th[i] = sc.nextInt();\\n\t\t}\\n\\n\t\tint ans = 0;\\n\t\tint idx = 0;\\n\t\twhile (true) {\\n\t\t\tidx = next(h, idx);\\n\t\t\tif (idx == -1) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\\n\t\t\twhile (h[idx] > 0) {\\n\t\t\t\tans++;\\n\t\t\t\tfor (int i = idx; i < n && h[i] > 0; i++) {\\n\t\t\t\t\th[i]--;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tout.println(ans);\\n\\n\t\tsc.close();\\n\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tnew Main()._main(args);\\n\t}\\n\\n}\\n", "target": "77", "substitutes": {"in": ["r", "gin", "bin", "inf", "con", "ar", "l", "rs", "o", "id", "m", "db", "ini", "source", "read", "err", "doc", "inn", "rin", "file", "IN", "run", "ind", "lin", "f", "on", "In", "init", "io", "reader", "it", "din", "is", "stream", "inner", "c", "ins", "input", "std", "ds", "w", "t", "cin", "info", "s", "p", "up", "all", "ch", "st"], "out": ["r", "ou", "ex", "end", "outer", "writer", "error", "dest", "o", "sys", "log", "put", "rt", "v", "exit", "err", "msg", "by", "OU", "print", "OUT", "file", "sum", "os", "report", "write", "res", "gt", "at", "io", "aos", "Out", "screen", "obj", "output", "ins", "w", "t", "s", "p", "up", "net", "to", "ch", "outs", "st"], "h": ["dh", "he", "q", "rh", "uh", "ho", "heads", "hi", "shift", "hl", "l", "hp", "his", "sh", "v", "m", "bh", "oh", "eh", "host", "where", "pp", "hh", "ih", "here", "cache", "hz", "hd", "index", "f", "ht", "hw", "history", "hex", "hr", "j", "it", "pr", "H", "help", "has", "c", "head", "ph", "w", "exp", "t", "p", "ha", "hm", "th", "hs", "x", "ah", "hash"], "idx": [" idix", "uidz", "midxc", "mitX", "Idx", " idxc", "pidx", "IDex", "midxy", "idxc", "uidrx", "mitx", "hdxe", "indX", "midx", "uidxf", " idX", "midz", " idpx", "hdxf", "miti", "identxs", "Idrx", "IDi", "ridxs", " idxf", "pidrx", "ridn", "uidx", " idi", "indix", " idxe", " idxy", " idz", "idpx", "ridx", "indp", "ridp", "oidpx", "mitpx", " idxs", "identex", "midi", "idxe", "idz", "oidx", "indx", "idi", "idrx", "idX", "ridz", "hdpx", "idex", "idn", " idp", "ridxc", "idp", "indz", "midex", "idix", "oidxe", " idex", "ridix", "Idz", "indxc", "hdx", "ridex", "indn", "Idxf", "identx", "pidz", "pidxf", " idn", "IDx", "index", "IDxy", "idxs", "identix", "idxf", "idxy", "indpx", "indi", "oidxf"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "eric", "ai", "ki", "f", "ims", "is", "ic", "c", "ami", "y", "oi", "di", "x", "ri", "fi", "l", "chain", "ip", "ji", "o", "id", "ij", "client", "iti", "start", "ori", "io", "bi", "it", "inner", "g", "k", "ci", "sim", "cli", "ii", "phi", "hi", "remote", "this", "ni", "mu", "ind", "list", "\u0438", "pi", "iso", "yi", "p", "xi", "si", "mi", "I", "key", "gi", "entry", "v", "m", "ini", "im", "qi", "index", "init", "j", "ity", "ui", "ie", "uri", "ti", "record", "port", "PI", "multi", "t", "info"], "sc": ["arc", "uc", "lc", "cc", "esc", "mp", "sec", "cl", "sys", "sh", "so", "cr", "sv", "bc", "sp", "sd", "dc", "nl", "ec", "capt", "ctl", "cle", "spec", "sch", "sw", "sync", "fc", "tc", "scan", "si", "sq", "disc", "cs", "sci", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "n": ["nu", "mn", "num", "name", "nn", "number", "l", "un", "len", "N", "o", "ns", "m", "v", "nan", "ne", "nl", "ni", "sn", "a", "count", "on", "an", "z", "j", "no", "nb", "pi", "na", "nc", "k", "np", "fn", "en", "c", "nw", "none", "nm", "ng", "t", "p", "net", "all", "nt", "x", "non", "names"], "ans": ["gs", "ents", "ints", "uns", "ons", "nets", "vals", "pan", "rs", "names", "anks", "eds", "ns", "ads", "ks", "ends", "ars", "can", "ms", "ids", "lines", "arts", "ANS", "ors", "amps", "ats", "ens", "ants", "ls", "an", "ows", "users", "AN", "ann", "vs", "is", "cs", "ations", "ins", "vers", "ds", "aps", "ions", "s", "posts", "ps", "xs", "lets", "stats", "lan", "offs", "outs", " scans"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int[] seq = new int[n];\\n    int total = 0;\\n    if(n ==2){\\n      total = 2* sc.nextInt();\\n    }else{\\n      for(int i = 0; i < n - 1; i++){\\n   seq[i] = sc.nextInt();\\n     if(i == 0){\\n     total += seq[i];\\n     }else if(i == n-2){\\n     total += seq[i];\\n       total += Math.min(seq[i],seq[i-1]);\\n     }else{\\n     total += Math.min(seq[i],seq[i-1]);\\n     }\\n   }  \\n    }\\n    System.out.println(total);\\n  }\\n\\n}", "target": "240", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "sv", "sp", "bc", "cr", "ck", "nl", "ctl", "capt", "cle", "irc", "sch", "cam", "ys", "se", "sync", "fc", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "ng", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "psc", "ch", "desc"], "n": ["num", "mn", "r", "nu", "name", "d", "ll", "nn", "con", "number", "l", "un", "len", "N", "o", "ns", "and", "m", "v", "ne", "nan", "comm", "nl", "cn", "sn", "note", "count", "on", "norm", "z", "j", "no", "nb", " N", "g", "na", "nc", "k", "np", "en", "c", "nm", "ct", "w", "ng", "t", "p", "network", "nor", "ln", "net", "size", "nt", "non", "names"], "seq": ["q", "jobs", "elt", "col", "cur", "mp", "vals", "nos", "queue", "sec", "chain", "len", "vec", "ref", "id", "tmp", "feat", "eq", "resp", "msg", "batch", "buff", "sel", "spec", "val", "pse", "sequ", "buf", "str", "lim", "gen", "count", "req", "test", "sequence", "slice", "ctrl", "zip", "sup", "pkg", "phys", "cmd", "sq", "lex", "na", "np", "quant", "sim", "tab", "exp", "iq", "iter", "ctx", "expr", "ps", "aux", "nt", "desc", "next", "sub"], "total": ["token", "otal", "base", "number", "used", "ta", " totals", "scale", "note", "shared", "trace", "complete", "open", " summed", " tot", "ot", "parent", "net", "all", "next", "valid", "num", "basic", "translation", "eta", "current", "global", "zero", "summary", "equal", "count", "sequence", "no", "full", "partial", "template", "table", "done", "good", "ful", "result", "created", "broad", "tree", "value", "database", "this", "available", "status", "length", "human", "quant", "average", "stable", "stats", "checked", "empty", "meta", "sum", "expected", "Total", "null", " all", "general", "normal", "max", "t", "serial", "size", "to", "confirmed", " TOTAL"], "i": ["set", "q", "I", "ix", "ri", "phi", "hi", "gi", "iu", "details", "zi", "base", "l", "chain", "ip", "ji", "ei", "point", "li", "id", "m", "ij", "v", "ini", "err", "me", "batch", "print", "ai", "im", "ind", "qi", "ori", "b", "index", "f", "us", "list", "init", "u", "io", "z", "j", "bi", "it", "slice", "ui", "is", "ie", "uri", "status", "pi", "g", "eu", "ti", "ic", "ci", "sim", "cli", "multi", "exp", "iter", "info", "parent", "y", "ii", "xi", "si", "to", "di", "x", "mi"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tFastScanner sc = new FastScanner();\\n\t\tString S = sc.next();\\n\\n\t\tint A = S.charAt(0) - '0';\\n\t\tint B = S.charAt(1) - '0';\\n\t\tint C = S.charAt(2) - '0';\\n\t\tint D = S.charAt(3) - '0';\\n\\n\t\tString op1;\\n\t\tString op2;\\n\t\tString op3;\\n\t\tfor (int i = 0; i < (1 << 3); i++) {\\n\t\t\tint sum = A;\\n\t\t\tif (((i >> 0) & 1) == 0) {\\n\t\t\t\top1 = \"+\";\\n\t\t\t\tsum += B;\\n\t\t\t} else {\\n\t\t\t\top1 = \"-\";\\n\t\t\t\tsum -= B;\\n\t\t\t}\\n\\n\t\t\tif (((i >> 1) & 1) == 0) {\\n\t\t\t\top2 = \"+\";\\n\t\t\t\tsum += C;\\n\t\t\t} else {\\n\t\t\t\top2 = \"-\";\\n\t\t\t\tsum -= C;\\n\t\t\t}\\n\\n\t\t\tif (((i >> 2) & 1) == 0) {\\n\t\t\t\top3 = \"+\";\\n\t\t\t\tsum += D;\\n\t\t\t} else {\\n\t\t\t\top3 = \"-\";\\n\t\t\t\tsum -= D;\\n\t\t\t}\\n\\n\t\t\tif (sum == 7) {\\n\t\t\t\tSystem.out.println(A + op1 + B + op2 + C + op3 + D + \"=7\");\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\\n\t}\\n}\\n\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "152", "substitutes": {"sc": ["sac", "lc", "cc", "esc", " SC", "sec", "cl", "sys", "ser", "sh", "bc", "sv", "sp", "cr", "ch", "ec", "sch", "sw", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "sr"], "S": ["I", "CS", "STR", "SI", "RAW", "SN", "N", "TS", "SM", "SH", "SQL", "ASC", "G", "SA", "SAM", "SE", "P", "SP", "SEC", "T", "SU", "R", "SO", "NS", "SF", "V", "M", "Si", "SR", "US", "SL", "BS", "IS", "RS", "Source", "ss", " s", "SSL", "L", "SS", "GS", "SER", "s", "DS", "SC", "SB"], "A": ["AA", "I", "Array", "AU", "E", "CA", "N", "AE", "AC", "At", "As", "SA", "G", "O", "P", "IA", "a", "V", "AH", "This", "AN", "ACC", "AL", "H", "AP", "AM", "U", "AB", "An", "AS", "AI", "L", "Y", "AR", "K", "AD", "BA", "AF", "AT"], "B": ["PB", "I", "Z", "WB", "BB", "LB", "TB", "BI", "BL", "E", "RB", "BT", "Ob", "BM", "BG", "DB", "N", "BU", "Ber", "VB", "NB", "GB", "G", "P", "Bi", "T", "BER", "IB", "R", "BF", "BC", "V", "BR", "BE", "CB", "BY", "BS", "JB", "AB", "Y", "L", "Bar", "J", "BA", "OB", "SB", "Bern", "Bs"], "C": ["I", "Con", "CS", "CM", "E", "Ca", "CA", "N", "CW", "CAR", "CT", "O", "G", "CF", "DC", "P", "T", "R", "Cl", "Cu", "BC", "V", "CU", "Co", "M", "Ch", "CH", "CG", "CV", "CB", "CL", "CO", "CD", "CC", "VC", "COM", "GC", "L", "JC", "Cr", "Cs", "CN", "SC", "Car", "YC", "EC", "CNN", "CP"], "D": ["Z", "I", "DD", "d", "Dec", "E", "DH", "DB", "TD", "PD", "Del", "DX", "DA", "DI", "O", "G", "Ds", "DC", "P", "T", "DM", "DO", "R", "Q", "V", "M", " d", "DN", "H", "DE", "U", "Y", "DR", "L", "DS", "Dir", "DP"], "op1": [" op11", " opFirst", "operator3", "opt91", "oppA", "Op0", "operator2", "pp91", "optA", "op0", "Op3", " op0", "opt1", "pol1", "OP2", "hop11", "hop1", "opFirst", "Op1", "OP1", "copFirst", "cop81", "pp1", "pol0", "op001", "op81", "oppasso", "operator0", "op91", "pol001", "Op2", "opA", "hopFirst", "OP0", "opp1", "hop81", "ppA", "operator1", "op11", "OP001", " op001", " op81", "cop11", "cop1", "opp91", "opasso", "optasso", "pol2", "ppasso"], "op2": ["opb", "tiptwo", "op60", "optwo", " opb", "opp48", "optTwo", "tip32", "hop2", "option2", "opsecond", "opTwo", "opt2", "opt002", "optionTwo", "hop60", "opttwo", "option3", "optionsecond", "topsecond", "op002", "operation48", " opTwo", "optb", " op002", "ep2", "cmdtwo", "cmd32", "opp60", "opt32", "operationTwo", "epb", "operation2", "ep002", "op48", "oppTwo", "opp2", "hopTwo", "operation60", "cmd2", "topTwo", " opsecond", "top2", "epTwo", "top3", "hop48", "op32", "tip2"], "op3": [" op03", "opt11", "opt03", "ot6", "cop80", "mop80", "copthree", "cop6", "copthird", "mopthree", "mop03", "op03", "ostD", "cop15", "op6", "opthird", "mopThree", "optthird", "ost03", "ip15", "popD", "ot11", "pop3", "pop2", "mop3", "opThree", "opt3", " opD", "ot3", "ip80", "op80", "pop03", "ip3", "op15", " opThree", "ost3", "opthree", "otthird", "ost2", "mop15", "cop3", "opD", "optThree", "op11", "ipthree", "cop11", "opt6"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "ei", "ip", "ji", "o", "li", "v", "m", "me", "ini", "ai", "ki", "go", "im", "ind", "qi", "index", "f", "ia", "u", "z", "j", "bi", "it", "ui", "is", "ie", "status", "pi", "ti", "ic", "ci", "sim", "cli", "e", "multi", "t", "info", "p", "gu", "ami", "y", "oi", "ii", "xi", "si", "span", "di", "x", "mi"], "sum": ["Sum", "num", "set", "result", "acc", "mm", "cal", "dim", "stick", "temp", "weight", "total", "zero", " SUM", "sp", "missing", "summary", "sa", "stat", "su", "doc", "process", "term", "state", "mean", "mu", "cache", "scale", "count", "sm", "us", "fac", "index", "match", "mem", "must", "dev", "um", "comment", "status", "see", "cum", "vol", "mod", "na", "mix", "mass", " summed", "hum", "sim", "ass", "hash", "ot", "out", "sam", "ma", "info", "average", "ac", "multi", "alpha", "em", "add", "size", "si", "volume", "span", "di", "tu"], "in": ["r", "mm", "gin", "bin", "from", "inf", "ar", "con", "l", "isin", "h", "log", "inc", "m", "ini", "err", "read", "inn", "rin", "file", "IN", "get", "run", "or", "ind", "lin", "on", "us", "In", "init", "io", "nin", "reader", "it", "din", "is", "inner", "ic", "en", "ins", "input", "std", "out", "as", "t", "cin", "p", "info", "s", "up", "to", "line"], "buffer": ["block", "face", "result", "paste", "limit", "next", "row", "password", "Buffer", "queue", "temp", "base", "address", "device", "resource", "read", "source", "batch", "buff", "database", "program", "file", "bytes", "cache", "buf", "phrase", "code", "index", "variable", "scroll", "mem", "sequence", "history", "stack", "string", "available", "complete", "document", "message", "stream", "template", "data", "length", "table", "memory", "output", "sample", "iter", "binary", "header", "bar", "initial", "library", "window"], "ptr": ["br", "pod", "addr", "seek", "offset", "ix", "ctr", "pt", "post", "loc", "prime", "address", "tp", "point", "perm", "ref", "sp", "tip", "dr", "tr", "Ptr", "pend", "bp", "cell", "push", "td", "inters", "ind", "inter", "index", "pos", "req", "pointer", "pat", "pers", "pr", "vector", "pi", "np", "pad", "head", "rel", "rob", "jp", "iter", "p", "dep", "ctx", "pc", "depth", "adr", "proc", "pointers", "pert", "peer", "next", " pointer"], "buflen": ["buglag", "bullength", " bullen", "buglens", "bublower", "boflens", "buvlim", "boflen", " buflower", "bullEN", "bufilen", "buFlim", "bufrens", " bufren", "buflag", " buflayer", "buflig", "boglen", " bufrens", "bullang", " buflim", "buFlength", "buflower", " buflens", "bufrayer", " buflig", " bullength", " buflength", "buplength", "buflayer", "bufilEN", "buplen", "bublen", " buflang", " buplength", "buvlength", " bullang", "boglEN", "buglen", " bufrower", "buFlEN", " buplEN", "bufolength", "buFlen", "buflEN", "buvlen", "bullens", "bufrower", "buklens", "boflag", "buplim", "boglens", " bullig", "buklen", "bufolang", "buglEN", "buplEN", "bullag", " bufrayer", "bufilag", "boglag", " buplen", " buflEN", "bufolen", "bufilens", "bufren", "bullen", "bullig", "buklayer", "bufolig", "buklower", "buflang", "buflim", " buplim", "buvlEN", "bublayer", "buflength", "boflEN", "buflens", "bublens"], "c": ["arc", "uc", "lc", "ca", "cc", "d", "cur", "con", "cf", "bc", "v", "ce", "m", "unc", "dc", "cp", "ec", "cu", "enc", "code", "fc", "f", "u", "const", "tc", "z", "cont", "cs", "vc", "k", "abc", "cod", "ci", "ct", "e", "gc", "t", "s", "char", "ac", "p", "x", "cb", "rc", "pc", "conv", "ch"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args)  {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString[] str = new String[3];\\n\t\tstr[0] = sc.nextLine();\\n\t\tstr[1] = sc.nextLine();\\n\t\tstr[2] = sc.nextLine();\\n\t\tboolean f = true;\\n\t\tint i = 0;\\n\t\twhile(f) {\\n\t\t\tif(str[i].substring(0,1).equals(\"a\")){\\n\t\t\t\tstr[i] = str[i].substring(1,str[i].length());\\n\t\t\t\ti = 0;\\n\t\t\t}else if(str[i].substring(0,1).equals(\"b\")){\\n\t\t\t\tstr[i] = str[i].substring(1,str[i].length());\\n\t\t\t\ti = 1;\\n\t\t\t}else if(str[i].substring(0,1).equals(\"c\")){\\n\t\t\t\tstr[i] = str[i].substring(1,str[i].length());\\n\t\t\t\ti = 2;\\n\t\t\t}\\n\t\t\tif(str[i].equals(\"\")){\\n\t\t\t\tif(i == 0) {\\n\t\t\t\t\tSystem.out.println(\"A\");\\n\t\t\t\t\treturn;\\n\t\t\t\t}else if(i == 1) {\\n\t\t\t\t\tSystem.out.println(\"B\");\\n\t\t\t\t\treturn;\\n\t\t\t\t}else if(i == 2) {\\n\t\t\t\t\tSystem.out.println(\"C\");\\n\t\t\t\t\treturn;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "11", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "ser", "sv", "sp", "bc", "cr", "inc", "ctl", "cle", "sel", "irc", "se", "sync", "exec", "tc", "scan", "sq", " Sc", "cont", "cs", "ner", "ss", "nc", "g", "sci", "ok", "c", "syn", "osc", "txt", "Sc", "gc", "asc", "isc", "ctx", "SC", "mc", "pc", "conv", "ch", "desc", "st", "sub"], "str": ["br", "r", "ll", "put", "usr", "cr", "sp", "raw", "note", "exec", "inst", "ts", "pr", "comp", "def", "proc", "del", "st", "rs", "chain", "ns", "read", "comm", "form", "ist", "sync", "arr", "ent", "hex", "it", "rest", "rec", "wr", "txt", "fr", "exp", "s", "expr", "dat", "elt", "STR", "att", "progress", "tree", "dr", "tr", "oct", "rep", "bl", "seq", "print", "spec", "dict", "cache", "req", "test", "sts", "string", "url", "Str", "add", "ch", "v", "err", "msg", "enc", "stri", "sl", "j", "stack", "div", "vol", "utt", "check", "t", "iter", "nt", "ev", "gr", "desc"], "i": ["I", "ix", "ri", "ici", "phi", "gi", "zi", "iu", "hi", "ei", "fi", "chain", "ip", "ji", "li", "v", "m", "ij", "wait", "ini", "err", "in", "batch", "this", "gl", "ai", "ki", "im", "ind", "ori", "a", "qi", "index", "init", "io", "ir", "j", "bi", "it", "is", "ui", "uri", "pi", "rest", "eu", "ti", "ic", "ci", "c", "sim", "cli", "multi", "t", "iter", "p", "info", "gu", "exp", "oi", "y", "ii", "xi", "si", "conv", "iri", "di", "x", "mi"], "f": ["valid", "r", "F", "d", "sf", "fi", "l", "h", "v", "m", "n", "bf", "tf", "xf", "fe", "fp", "fc", "u", "fast", "flow", "j", "full", "only", "g", "ful", "c", "conf", "e", "w", "check", "t", "x", "p", "iter", "fw", "y", "flag", "fm", "cf"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int w = scanner.nextInt();\\n        int h = scanner.nextInt();\\n        int x = scanner.nextInt();\\n        int y = scanner.nextInt();\\n\\n        System.out.println((double) w * h / 2);\\n        if((x ==  (double) w / 2) && (y == (double) h / 2)){\\n            System.out.println(1);\\n        } else {\\n            System.out.println(0);\\n        }\\n    }\\n}\\n", "target": "182", "substitutes": {"scanner": ["canener", "Scannel", "generener", "generner", "canrator", "cleanner", "Scanpenter", "generlier", "reachter", " scanener", " Scaner", "cleannel", "gateener", "gatener", " Scanner", "gaterator", "reachrator", " Scanener", "Scanter", "scanener", "Scanener", "Scaner", "reachner", "reachpenter", "canpenter", "cleanter", "scannel", "Scanlier", "scanpenter", "cleanener", "reachener", "cannel", "scanlier", "scanter", "generter", " Scanter", "canter", " scanter", "gatelier", "reachlier", "Scanner", "canner", "canlier", "scaner", " scaner", "scanrator"], "w": ["wall", "ex", "wx", "wo", "d", "wl", "wb", "wt", "l", "weight", "wp", "n", "m", "ew", "word", "aw", "wi", "ws", "iw", "wa", "width", "wal", "sw", "wid", "rw", "wd", "W", "win", "hw", "z", "html", "wr", "ww", "nw", "wh", "p", "week", "we", "fw", "kw", "window"], "h": ["ho", "he", "rh", "hi", "her", "hl", "hp", "sh", "kh", "n", "m", "v", "oh", "bh", "high", "hel", "hh", "HH", "ih", "zh", "hz", "hd", "b", "ht", "hw", "z", "history", "hr", "H", "html", "help", "c", "ph", "wh", "p", "hei", "ish", "ha", "hal", "th", "him", "ch", "height", "ah", "hash"], "x": ["ix", "r", "ex", "wx", "ax", "l", "ect", "n", "xf", "lat", "xy", "width", "tx", "inx", "xx", "index", "on", "px", "xc", "z", "left", "xa", "dx", "i", "xt", "mx", "xd", "X", "rx", "p", "xi", "xs", "xp", "fx", "ox"], "y": ["ye", "sy", "ym", "yet", "iy", "o", "yl", "v", "py", "gy", "n", "by", "ay", "ey", "uy", "cy", "xy", "fy", "ya", "yer", "b", "ry", "yy", "ies", "z", "j", "yt", "i", "oy", "axy", "sky", "Y", "my", "yr", "ny", "p", "iley", "ty", "ch", "ery"]}}
{"code": "import java.io.ByteArrayInputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\t\\n\tString INPUT = \"\";\\n\t\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tnew Main().run();\\n\t}\\n\t\\n\tvoid run() {\\n\t\tScanner sc = INPUT.isEmpty() ? new Scanner(System.in) : new Scanner(new ByteArrayInputStream(INPUT.getBytes()));\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\t\t\\n\t\tsolve(sc, out);\\n\t\tout.flush();\\n\t}\\n\t\\n\tvoid solve(Scanner sc, PrintWriter out) {\\n\t\tint flg[][] = new int[4][13];\\n\t\t\\n\t\tfor (int i = 0; i < 4; i++) {\\n\t\t\tfor (int j = 0; j < 13; j++) {\\n\t\t\t\tflg[i][j] = 1;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tint n = sc.nextInt();\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tString S = sc.next();\\n\t\t\tint a = sc.nextInt();\\n\t\t\tif (S.equals(\"S\")) flg[0][a-1]=0;\\n\t\t\tif (S.equals(\"H\")) flg[1][a-1]=0;\\n\t\t\tif (S.equals(\"C\")) flg[2][a-1]=0;\\n\t\t\tif (S.equals(\"D\")) flg[3][a-1]=0;\\n\t\t}\\n\t\t\\n\t\tfor (int i = 0; i < 4; i++) {\\n\t\t\tfor (int j = 0; j < 13; j++) {\\n\t\t\t\tif (flg[i][j] == 1) {\\n\t\t\t\t\tif (i == 0) System.out.print(\"S \");\\n\t\t\t\t\tif (i == 1) System.out.print(\"H \");\\n\t\t\t\t\tif (i == 2) System.out.print(\"C \");\\n\t\t\t\t\tif (i == 3) System.out.print(\"D \");\\n\t\t\t\t\tSystem.out.println(j+1);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n}\\n\\n", "target": "189", "substitutes": {"INPUT": [" INInput", "INGET", "inBOX", "inFILE", "InFILE", "inMIT", "InJECT", "InPUT", "EXPUT", "INJECT", "InMIT", " INBOX", " OUTFILE", " INGET", "INBOX", " OUTPUT", " INJECT", "INFILE", "inPUT", "INST", "inJECT", "PINInput", "EXST", "PINGET", "EXMIT", " OUTGET", "InBOX", "InST", "PINFILE", "inST", "INVO", "InVO", "EXVO", "INInput", "INMIT", " INFILE", " OUTInput", "inVO", "PINPUT"], "sc": ["arc", "usc", "uc", "lc", "cc", "anc", "esc", "sb", "sec", "cgi", "cl", "sys", "system", "so", "bc", "sv", "cr", "sp", "cor", "dc", "ko", "ctl", "ec", "cu", "sch", "irc", "fc", "sync", "exec", "tc", "ctrl", "scan", "sq", " Sc", "cont", "cs", "ner", "ss", "nc", "g", "sci", "pb", "c", "syn", "osc", "txt", "Sc", "gc", "s", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "out": ["set", "r", "outer", "timeout", "log", "os", "str", "Out", "store", "c", "ins", "conf", "pool", "format", "handle", "last", "down", "net", "all", "res", "window", "next", "l", "error", "co", "o", "sys", "conn", "in", "client", "code", "io", "it", "g", "inner", "txt", "inv", "w", "conv", "result", "ex", "end", "flush", "writer", "print", "OUT", "write", "cache", "list", "cmd", "status", "screen", "json", "output", "input", "p", "dis", "ch", "outs", "ou", "con", "v", "err", "msg", "cn", "sum", "report", "user", "at", "b", "us", "aos", "null", "obj", "display", "gc", "t", "up", "to", "nt", "gr"], "flg": [" FLfac", " FLl", "Flgs", "Fll", " FLpg", "plgs", "vlg", "plG", " FLgu", "flfac", "flG", "folg", "vll", "foll", " flmsg", "FLmsg", " FLmsg", " Flgs", "fnv", "fnfac", "FLG", " flig", "flgu", " fll", "flig", "folgs", " flog", " flgm", " FLgm", "fll", "Flog", "FLgs", "flv", "vlgm", "flpg", " flpg", "folog", " flv", "plog", "vlpg", " flfac", "flog", "FLg", " Flg", " flh", "FLig", "FlG", " FLg", "flgm", "folG", "flmsg", " flG", "FLh", "FLl", " Fll", "fngu", "flh", "Flg", " flgs", "plg", "fng", " FLv", " flgu", " Flh", "plig", "flgs"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "f", "ims", "is", "ic", "e", "parent", "ami", "y", "di", "x", "ri", "chain", "ip", "ji", "o", "id", "ij", "in", "iti", "io", "bi", "it", "ci", "sim", "cli", "iq", "ii", "ex", "phi", "hi", "ion", "this", "ind", "ia", "u", "\u0438", "ir", "la", "status", "pi", "p", "xi", "si", "mi", "I", "name", "gi", "iy", "v", "ini", "by", "im", "at", "qi", "init", "ity", "ui", "ie", "ti", "PI", "multi", "er", "info"], "j": ["br", "q", "jac", "r", "ix", "jit", "pt", "og", "row", "ev", "l", "jl", "ji", "jj", "o", "li", "jo", "h", "ij", "m", "v", "jump", "jas", "ion", "ju", "xy", "state", "ja", "str", "bj", "at", "b", "note", "oj", "on", "job", "f", "io", "z", "Ja", "it", "pr", "ie", "uj", "g", "off", "json", "k", "js", "aj", "obj", "jp", "e", "ot", "J", "other", "fr", "w", "p", "kj", "t", "y", "jc", "to", "je", "kid", "dj"], "n": ["nu", "num", "mn", "r", "name", "nn", "l", "nr", "un", "N", "o", "ns", "m", "ne", "nl", "ni", "sn", "z", "no", "nb", " N", "g", "na", "k", "nc", "np", "en", "c", "nw", "nm", "t", "p", "ln", "net", "nt"], "S": ["D", "Z", "I", "CS", "CSS", "SI", "SN", "N", "TS", "SM", "SH", "JS", "SQL", "SA", "G", "SE", "Series", "P", "SEC", "SP", "OS", "PS", "T", "SU", "R", "SO", "NS", "A", "SF", "V", "Si", "M", "Spec", "US", "SL", "BS", "IS", "RS", "H", "C", "Source", "SSL", "L", "SS", "GS", "J", "s", "DS", "LESS"], "a": ["ae", "ca", "oa", "qa", "ta", "aa", "da", "sta", "sa", "sha", "wa", "ai", "ja", "A", "ia", "an", "la", "ga", "xa", "ao", "pa", "ea", "apa", "area", "g", "data", "ba", "na", "aaa", "aj", "fa", "alpha", "ma", "as", "ac", "za", "ka", "au", "era", "all", "si", "va", "am"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString S = sc.next();\\n\\n\t\tboolean startsFromA = (S.charAt(0) == 'A');\\n\t\tString seekC = S.substring(2, S.length() - 1);\\n\t\tint indexOfC = seekC.indexOf('C');\\n\t\tboolean containsSingleC = (indexOfC != -1 && seekC.indexOf('C', indexOfC + 1) == -1);\\n\t\tboolean lowersOtherThanAC = isLowersOtherThanAC(S, indexOfC + 2);\\n\t\tSystem.out.println((startsFromA && containsSingleC && lowersOtherThanAC) ? \"AC\" : \"WA\");\\n\t}\\n\\n\tprivate static boolean isLowersOtherThanAC(String S, int indexOfC) {\\n\t\tchar[] array = S.toCharArray();\\n\t\tint length = array.length;\\n\t\tfor (int i = 1; i < length; i++) {\\n\t\t\tif (i != indexOfC && Character.isUpperCase(array[i])) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n}", "target": "209", "substitutes": {"sc": ["sac", "uc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "soc", "ko", "ec", "cle", "sel", "sch", "RC", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "s", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "sub"], "S": ["I", "CS", "STR", "SI", "E", "RAW", "SN", "N", "TS", "SM", "SH", "JS", "SQL", "ASC", "SA", "SP", "SAM", "P", "SE", "G", "T", "SU", "R", "SO", "NS", "A", "V", "M", "Si", "SOURCE", "string", "SL", "IS", "BS", "RS", "H", "SAN", "C", "Source", "U", "WS", " s", "SSL", "AS", "L", "SS", "GS", "SER", "s", "DS", "SC", "SB", "B"], "startsFromA": ["stootsStartACT", "startsStartY", "startsFromAV", "stootsStartB", "statesfromY", "stootsFromB", "startsfromACT", "startsStartA", "startsfromAR", "startsFromACT", "startsWithA", "startsStartB", "startsWithACT", "startsfromB", "statesfromAV", "startsfromAV", "statesFromY", "stootsFromA", "startsFromAS", "startsWithB", "stootsFromACT", "stootsStartA", "startsfromY", "startsfromAS", "statesfromA", "stootsStartAR", "startsStartACT", "startsfromA", "statesFromAS", "startsWithAR", "startsFromAR", "startsStartAR", "startsFromB", "statesfromAS", "startsStartAV", "startsFromY", "stootsFromAR", "statesFromA", "statesFromAV", "startsStartAS"], "seekC": [" seekCA", " seekR", "ekerP", "seedC", "ekN", " seekCC", "checkS", "seekR", "ekA", "seekingS", "seedCA", "checkCC", "seekingN", "ekC", "ekS", "checkCA", "seekA", " seekN", "seekCC", "seekN", "seekCA", " seekP", " seekS", "seekingA", "seekingR", "ekerR", "seekS", "seekP", "seedCC", "ekerC", "seekingC", "seekingP", "ekerS", "checkC", "seedS", " seekA"], "indexOfC": ["indexOFR", "sliceOfAC", "IndexofIC", "indexOFC", " indexOfT", "indFromC", "indexOFAC", "IndexOfS", "indexWithinC", "indexOfR", "Indexofc", "indexOfT", "indexInc", "IndexOfc", "IndexOfA", "sliceOFT", " indexOfR", "indexOnc", "IndexOfR", "indexOffN", "indexOnC", " indexofN", "indexInS", "indexOfc", "indexFromL", "indexofAC", "indexOnA", "IndexofN", "indexofT", "indOfc", "sliceOFAC", "indexOFT", "indexFromC", "indexOnS", "indexOFN", "indexOfL", "indexofC", "indexofL", "indexOfS", "indexWithinN", "IndexOfIC", " indexofR", "indexOnT", "indexofN", "indexInA", "indexOfA", "sliceOFC", "indexOffIC", "IndexofC", "indexOfN", "indexOffC", "indexWithinIC", "sliceOFN", "indexOnN", "indexofS", "indexFromc", "IndexOfC", "indFromL", "IndexofA", "indFromc", "indexofR", "indexofc", "IndexofS", "sliceOfC", "indexOfAC", "indexofA", "IndexofR", " indexofT", "sliceOfN", "indexOfIC", "indexOnAC", "indOfL", " indexOfN", "indexofIC", "indexInC", "IndexOfN", " indexofC", "indOfC", "sliceOfT", "indexWithinA", "indexOffA"], "containsSingleC": ["containsSingleB", "containersSingleC", "containsOneCC", "containsSingleBC", "containsOneBC", "containsOneB", "contentsSingleB", "contentssingleB", "containsOneAC", "contentssingleE", "containsOneC", "containsSingAC", "containersSingleBC", "containsSingC", "containssingleB", "containssingleC", "contentsSingleE", "contentssingleCC", "containsSingleE", "containsSingCC", "contentssingleC", "containsSingleCC", "contentsSingleC", "containersSingleAC", "containssingleCC", "containersSingleCC", "containssingleE", "containsSingBC", "containsSingleAC", "containsOneE", "contentsSingleCC"], "lowersOtherThanAC": ["lowersOtherTranAC", "lowersOtherThonCC", "lowersOtherThanCC", "lowersOtherThenANCC", "lowersOtherThANBC", "lowersOtherThhanCC", "lowersOtherThANEC", "lowersOtherThANAC", "lowersOtherTransEC", "lowersOtherTranEC", "lowersOtherThenanBC", "lowersOtherThonAC", "lowersOtherTransBC", "lowersOtherThhanBC", "lowersOtherThanBC", "lowersOtherThANCC", "lowersOtherThhanAC", "lowersOtherThansCC", "lowersOtherTranBC", "lowersOtherThenANAC", "lowersOtherThanEC", "lowersOtherThenanAC", "lowersOtherThansBC", "lowersOtherThenANBC", "lowersOtherThonBC", "lowersOtherTranCC", "lowersOtherTransAC", "lowersOtherThonEC", "lowersOtherThansAC", "lowersOtherThansEC", "lowersOtherThenanCC", "lowersOtherTransCC"], "array": ["save", "ray", "Array", "archive", "row", "number", "var", " Array", "system", "sh", "now", "bow", "ash", "export", "batch", "pair", "raw", "dirty", "random", "shape", "list", "RAY", "audio", "instance", "object", "collection", "arr", "range", "history", "sequence", "our", "trace", "vector", "area", "table", "record", "my", "angle", "hash", "integer", "arrow", "rays", "upper", "angular", "external", "library", "map"], "length": ["ENGTH", "offset", "end", "result", "name", "specified", "maximum", "position", "php", "number", "len", "total", "h", "amount", "value", "class", "read", "distance", "level", "ngth", "family", "width", "start", "bus", "shape", "count", "list", "type", "buffer", "collection", "sequence", "history", "range", "string", "available", "no", "text", "data", "pad", "max", "L", "duration", "ength", "capacity", "integer", "present", "angle", "last", "padding", "Length", "size", "volume", "span", "library", "split", "height"], "i": ["q", "I", "ix", "key", "phi", "gi", "zi", "hi", "ogi", "ei", "chain", "ip", "ji", "point", "li", "id", "v", "m", "ij", "me", "ini", "err", "in", "print", "ai", "ki", "qi", "a", "f", "init", "u", "\u0438", "j", "bi", "it", "ui", "is", "uri", "pi", "ti", "ic", "ci", "MI", "sim", "my", "cli", "PI", "multi", "exp", "iq", "ami", "y", "oi", "xi", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint a = scan.nextInt();\\n\t\tint b = scan.nextInt();\\n\t\t\\n\t\tif(a<=5) System.out.println(0);\\n\t\telse if(a<=12)System.out.println(b/2);\\n\t\telse System.out.println(b);\\n\t\t\\n\t}\\n}", "target": "249", "substitutes": {"scan": ["set", "r", "save", "skip", "row", "nn", "reach", "sb", "gate", "parse", "san", "cgi", "ser", "sys", "Scan", "system", "connect", "sv", "n", "util", "read", "in", "sum", "can", "get", "report", "auto", "se", "gen", "sync", "search", "send", "scroll", "an", "io", "sc", "find", "ner", "g", "na", "store", "sim", "out", "black", "check", "sur", "char", " scanner", "re", "proc", "conv", "query", "ch", "ann"], "a": ["ae", "r", "ca", "acc", "ax", "el", "oa", "ta", "n", "aa", "app", "da", "sta", "sa", "sha", "power", "ai", "isa", "val", "act", "A", "at", "\u00e1", "ia", "an", "la", "ga", "ao", "j", "ity", "div", "ea", "area", "aff", "ba", "aaa", "ach", "aka", "c", "aj", "alpha", "ma", "as", "ac", "era", "au", "all", "aux"], "b": ["bid", "r", "d", "sb", "ob", "base", "l", "bc", "v", "n", "m", "db", "gb", "bs", "bp", "back", "eb", "bd", "f", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "c", "bis", "e", "out", "t", "blue", "p", "bb", "be", "rb", "to", "B"]}}
{"code": "import java.util.Scanner;\\n/**\\n * \u89e3\u9898\u65b9\u6cd5 26 \u8fdb\u5236\\n * k \u8fdb\u5236\u6bcf\u4e00\u4f4d\u6700\u5927\u53ea\u6709 k - 1\uff0c\u4f46\u662f\u6b64\u9053\u9898\u76ee\u6700\u5927\u53ef\u4ee5\u662f 26\uff0c\u6240\u4ee5\u6bcf\u6b21\u5904\u7406 N - 1\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n\\n        long N = scanner.nextLong();\\n        String ans = \"\";\\n        while (N > 0) {\\n            N--;\\n            ans = (char)(N % 26 + 97) + ans;\\n            N /= 26;\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "191", "substitutes": {"scanner": ["Scanator", "serner", "serter", "Scanter", "Scaner", "canator", "Scanning", "scanter", "serning", "scanator", " scanning", "canter", " scanter", " scanator", "Scanner", "canner", "serer", "scaner", " scaner", "scanning", "caner"], "N": ["D", "I", "TN", "FN", "ND", "NM", "NUM", "NI", "SN", " n", "NP", "NE", "SIZE", "NB", "n", "NV", "Size", "EN", "O", "G", "S", "NG", "REM", "NO", "NL", "R", "Count", "NS", "NF", "NR", "V", "ANY", "NH", "M", "BN", "AN", "PN", "MN", "GN", "NC", "H", "C", "Number", "Num", "NA", "L", "K", "J", "NOR", "CN", "CNN", "NN", "NT", "B", "Ns"], "ans": [" means", "ents", "ros", "acs", "ons", "ras", "anc", "vals", "pan", "aus", "aces", "names", "rs", "anks", "oss", "eds", "ns", "anners", "ks", "ads", "n", "ran", "beans", "ians", "cn", "os", "can", "ms", "lines", "arts", "ANS", "amps", "ats", "ens", "ants", " sans", "ls", "an", "ols", "AN", "angs", "ann", "ams", "aos", "mas", "scan", " spans", " scans", "cs", "ones", " beans", "ins", "olds", "arms", "aps", "s", "was", "posts", "lets", "rans", "anned", "wan", "ars", " plans", " pan"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tStringBuilder stb = new StringBuilder();\\n\t\tstb.append(sc.next());\\n\t\tstb.append(stb);\\n\t\tString str= stb.toString();\\n\t\tString x = sc.next();\\n\t\tSystem.out.println(str.contains(x) ? \"Yes\" : \"No\");\\n\t\tsc.close();\\n\t}\\n\t\\n}\\n\\n", "target": "198", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "sh", "sv", "bc", "cr", "sp", "ck", "ec", "nl", "capt", "cle", "irc", "sch", "cam", "fc", "tc", "ctrl", "scan", "sq", "cs", "sci", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "scrib", "psc", "ch"], "stb": ["stfb", "ldbe", "stebb", "listbb", " strb", "stbe", "ustbb", "estrb", "estb", "STfb", " stob", "stbb", "STB", "styfb", "ldb", "ndbe", "ustob", "stab", "strob", "sta", "strd", "strbe", "listbe", "ctrb", "ldbb", " sta", "STb", "stebe", "ctb", "steb", "stob", "stra", "ctsb", "ldab", " stab", "ustb", "estob", " stB", "usta", "estsb", "styB", "ndab", "stB", "strb", "strbb", "stsb", "std", "ndb", "sted", " stbe", " stfb", " stbb", "ndbb", "listd", " stsb", "ctob", "listb", "styb"], "str": ["br", "r", "name", "STR", "ll", "sol", "h", "cr", "sp", "n", "dr", "tr", "msg", "print", "sl", "arr", "z", "j", "hex", "string", "it", "Str", "text", "data", "g", "ss", "vol", "obj", "mt", "txt", "out", "fr", "utt", "t", "s", "p", "w", "stable", "y", "gr", "st"], "x": ["q", "ex", "wx", "xb", "ox", "n", "v", "xf", "xy", "yes", "tx", "xe", "xx", "f", "xc", "rex", "z", "xa", "zx", "XX", "i", "xxxxxxxx", "mx", "xt", "k", "xxx", "ct", " xx", "w", "X", "rx", "ux", "y", "xi", "xs", "xp", "fx", "st"]}}
{"code": "import java.math.BigDecimal;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        BigDecimal X = in.nextBigDecimal();\\n        BigDecimal yen = new BigDecimal(\"100\");\\n        BigDecimal rate = new BigDecimal(\"1.01\");\\n        int count = 0;\\n        while (yen.compareTo(X)<0){\\n            yen = new BigDecimal(yen.multiply(rate).toString().split(\"\\\\.\")[0]);\\n            count++;\\n        }\\n        System.out.print(count);\\n    }\\n}", "target": "107", "substitutes": {"in": ["r", "gin", "spin", "bin", "inf", "from", "con", "l", "asin", " din", "isin", " out", "log", "rt", "inc", "n", "sin", "ini", "err", "by", "inn", "file", "sum", "IN", "can", "get", "run", "user", "client", "ind", "us", "In", "world", "io", "ssl", "reader", "scan", "din", "is", "i", "thin", "stream", "inner", "en", "ins", "input", "std", "out", "local", "cin", "info", "char", "ln", "add", "net", "all", "line"], "X": ["Z", "I", "Rex", "TX", "E", "EX", "FX", "IX", "N", "DX", "OX", "XXX", "P", "UX", "R", "Q", "V", "XX", "H", "C", "Phoenix", "XT", "Y", "L", "XP", "Ex", "MX", "Xi", "CPU", "AX", "XL", "Value", "HTTP", "x"], "yen": ["eyener", " yens", "yaen", "eyens", "ryoen", "yaden", "nyoen", "yyeng", "ryen", "cyen", "nyer", "eyden", "Yoen", "nyeng", " yoen", "nyener", "nyens", " yden", "Yeng", "yaener", "yer", "Yer", "ryEn", "cyener", " yEn", "yaens", "yden", "yoen", "nyEn", "Yen", "yEn", " yener", " yeng", "nyen", "cyoen", "yeng", "yener", "cyeng", "eyen", "yyener", " yer", "ryens", "yyen", "yens", "yyoen"], "rate": ["rator", "r", "rake", "rat", "base", "price", "pee", "prime", "zero", "race", "fine", "rand", "factor", "erate", "per", "power", "trade", "scale", "rice", "code", "currency", "rise", "mate", "range", "rage", "delay", "radius", "rates", "rated", "age", "counter", "use", "late", "Rate", "ate", "cycle", "rating", "rule", "time", "x", "grade"], "count": ["num", "ount", "ctr", "coll", "result", "att", "found", "current", "number", "error", "total", "amount", "n", "err", "cast", "sum", "report", "state", "Count", "ind", "cache", "index", "code", "hold", "list", "force", "test", "const", "must", "trace", "find", "comment", "nb", "child", "message", "status", "success", "length", "c", "max", "counter", "check", "iter", "info", "flag", "add", "size", "cycle", "nt"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int i=0;\\n        int num = 1;\\n        while(num <= N){\\n            i++;\\n            num*=2;\\n        }\\n        i--;\\n        System.out.println((1<<i));\\n    }\\n}\\n", "target": "225", "substitutes": {"sc": ["lc", "cc", "esc", "sb", "sec", "cl", "sys", "system", "Scan", "ser", "cr", "bc", "sv", "sp", "cle", "sel", "sch", "sw", "se", "conv", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "out", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "proc", "ch", "desc"], "N": ["D", "I", "TN", "NUM", "NM", "NI", "SN", "NB", "n", "Size", "No", "S", "Ni", "P", "NG", "T", "Count", "R", "NS", "Q", "NR", "V", "M", "NH", "Len", "GN", "C", "Number", "Num", "L", "NA", "K", "J", "Ne", "NN", "NT", "Ns"], "i": ["I", "ix", "d", "phi", "gi", "zi", "iu", "number", "l", "ip", "li", "o", "id", "n", "m", "v", "ini", "in", "ai", "ki", "im", "ind", "b", "index", "f", "ik", "u", "j", "ism", "bi", "is", "ui", "pi", "ti", "ci", "c", "sim", "yi", "cli", "multi", "info", "p", "oi", "y", "ii", "xi", "si", "di", "x", "mi"], "num": ["nu", "result", "phi", "nn", "con", "number", "NUM", "uf", "total", "zero", "n", "m", "nom", "alph", "uu", "common", "sum", "cu", "coord", "mon", "b", "index", "count", "test", "um", "no", "umi", "nb", "Number", "cum", "na", "np", "Num", "nm", "mult", "bo", "multi", "t", "uni", "si", "conv", "x", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner =new Scanner(System.in);\\n\t\tString line1 = scanner.nextLine();\\n\t\tString line2 = scanner.nextLine();\\n\t\tscanner.close();\\n\t\tString diff = line2.substring(0, line2.length() - 1);\\n\t\tif (line1.equals(diff)) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}\\n", "target": "137", "substitutes": {"scanner": [" scanNER", "reachter", "canNER", " scanener", "ScanNER", "planner", "scer", " scanrator", "reachrator", "Scanter", "scanener", "Scanener", "Scaner", "scner", "reachner", "planer", "scanNER", "Scanning", "reachener", "planning", "planter", "scanter", "Scanrator", "scter", " scanning", "canter", " scanter", "scener", "Scanner", "canner", "scanning", "scaner", " scaner", "scanrator", "caner"], "line1": ["case0", "row2", "caseOne", "LINEOnce", "Line0", " lineOne", "row1", "Line2", "Line1", " line0", "LINEOne", "line0", "caseOnce", "case1", "row0", " lineOnce", "LineOne", "lineOnce", "LINE1", "LINE0", "lineOne", "rowOne", "LINE2"], "line2": [" line7", "linerB", "LINE102", "LINE3", "linertwo", " lineTwo", "liner2", "rule2", " linetwo", "Line2", "Line1", "ine2", "LINE02", " line102", "line02", "LINETwo", "rule1", "ruleB", " line02", "line3", "Line02", "line7", "lineB", "ineTwo", "Line7", "ine102", "liner1", "ruletwo", "lineTwo", "line102", "LINE1", "linetwo", " line3", " lineB", "LINE2", "LINE7", "ine3"], "diff": ["dl", "result", "error", "Delta", "dd", "different", "deb", "iff", "prefix", "missing", "default", "change", "detail", "update", "added", "equal", "Diff", "test", "range", "no", "fix", "partial", "patch", "bug", "comp", "changed", "wrong", "help", "good", "rel", "conf", "cmp", "none", "edit", "def", "changes", "info", " difference", "exc", "add", "config"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str;\\n\t\tstr = br.readLine();\\n\t\tint w = Integer.parseInt(str);\\n\t\tstr = br.readLine();\\n\t\tint n = Integer.parseInt(str);\\n\\n\t\tint array[] = new int[w];\\n\\n\t\tfor(int i=0; i<w; i++){\\n\t\t\tarray[i] = i+1;\\n\t\t}\\n\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tstr = br.readLine();\\n\t\t\tint a = Integer.parseInt(str.substring(0, str.indexOf(\",\")));\\n\t\t\tint b = Integer.parseInt(str.substring(str.indexOf(\",\")+1, str.length()));\\n\\n\t\t\tswap(array,a-1,b-1);\\n\\n\t\t}\\n\\n\t\tfor(int i=0; i<array.length; i++){\\n\t\t\tSystem.out.println(array[i]);\\n\t\t}\\n\\n\t}\\n\\n\\n\tstatic int[] swap(int[] list,int a, int b){\\n\t\tint temp = list[a];\\n\t\tlist[a] = list[b];\\n\t\tlist[b] = temp;\\n\\n\t\treturn list;\\n\t}\\n\\n}", "target": "156", "substitutes": {"br": ["r", "ctr", "driver", "bro", "nr", "shr", "pre", "vr", "cr", "bc", "ber", "kr", "dr", "bf", "tr", "bh", "bridge", "db", "err", "bl", "bs", "bn", "bp", "Br", "mr", "ger", "Fr", "buf", "BR", "rys", "bd", "lr", "arr", "j", "hr", "repl", "bm", "pr", "div", "wr", "bt", "rel", "browser", "jp", "yr", "fr", "bb", "handle", "be", "rb", "adr", "ch", "gr", "rem"], "str": ["r", "ll", "cr", "sp", "raw", "inst", "pr", "data", "def", "del", "res", "st", "ctr", "cur", "parse", "l", "chain", "source", "comm", "ret", "form", "arr", "hex", "cs", "g", "rest", "txt", "inv", "fr", "exp", "s", "rem", "expr", "dat", "elt", "pt", "STR", "dr", "tr", "print", "spec", "string", "sts", "url", "Str", "cont", "status", "input", "p", "cfg", "ld", "re", "name", "dec", "cl", "err", "msg", "ocr", "enc", "stri", "sl", "j", "div", "text", "vol", "obj", "t", "er", "char", "gr", "desc"], "w": ["r", "wx", "wo", "d", "wl", "wb", "wt", "l", "weight", "len", "wp", "h", "ew", "v", "m", "aw", "wi", "ws", "iw", "wa", "width", "wal", "ow", "sw", "rw", "wd", "W", "win", "hw", "z", "wr", "c", "nw", "t", "wh", "we", "p", "s", "kw", "x", "wind", "window"], "n": ["nu", "r", "d", "nn", "l", "un", "len", "N", "o", "h", "ns", "m", "ne", "nan", "nl", "ni", "an", "z", "j", "no", "na", "nc", "np", "en", "c", "nw", "nm", "t", "p", "nor", "y", "net", "nt", "x"], "array": ["set", "result", "stage", "ray", "Array", "row", "ar", "number", "var", " Array", "system", "amount", "value", "v", "ash", "export", "ion", "pair", "database", "batch", "show", "section", "auto", "map", "index", "RAY", "shape", "instance", "object", "collection", "arr", "range", "buffer", "sequence", "our", "grid", "stack", "share", "message", "vector", "age", "area", "data", "length", "variable", "table", "record", "my", "ary", "angle", "air", "storage", "audio", "library", "binary", "all", "archive", "function", "window", "hash"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "go", "f", "ims", "is", "ic", "ami", "y", "oi", "di", "ri", "fi", "l", "chain", "ip", "ji", "point", "o", "id", "ij", "in", "client", "ori", "io", "bi", "it", "inner", "g", "ci", "sim", "cli", "iq", "s", "ii", "span", "phi", "hi", "ion", "this", "print", "ind", "ia", "u", "status", "pi", "p", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "err", "im", "qi", "index", "us", "init", "ies", "j", "ity", "umi", "ui", "ie", "uri", "ti", "multi", "info"], "a": ["ae", "ata", "r", "ca", "ra", "el", "ar", "l", "oa", "o", "ta", "admin", "m", "aa", "da", "sa", "al", "ua", "ai", "isa", "act", "A", "at", "f", "ia", "an", "la", "ga", "ao", "xa", "j", "ab", "ea", "pa", "area", "na", "aaa", "ba", "c", "aj", "fa", "ap", "alpha", "ma", "as", "eas", "p", "ac", "au", "aux", "va", "am"], "b": ["r", "d", "beta", "wb", "bin", "sb", "ob", "l", "o", "bar", "h", "bc", "v", "gb", "db", "bs", "lb", "bp", "eb", "f", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "g", "ba", "bot", "c", "bis", "body", "bo", "e", "t", "p", "bb", "cb", "be", "y", "rb", "to", "x", "B"], "list": ["set", "result", "save", "queue", "l", "chain", "part", "entry", "log", "tree", "tmp", "v", "batch", "pair", "print", "LIST", "val", "dict", "form", "lists", "ist", "view", "count", "index", "sort", "collection", "arr", "range", "test", "sequence", "stack", "type", "pkg", "trace", "null", "listed", "vector", "length", "table", "record", "obj", "old", "pool", "out", "t", "def", "iter", "info", "parent", "add", "all", "del", "map"], "temp": ["dat", "result", "mm", "deg", "mp", "current", "pre", "total", "perm", "unt", "tmp", "EMP", " tmp", "tt", "nom", "tem", "Temp", "attr", "thread", "buffer", "test", "tc", "mem", "orig", "loop", "null", "mint", "tm", "partial", "template", "cum", "emp", "txt", "pdf", "multi", "t", "local", "porary", "fake", "mi", "config", "term"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String args[]) throws IOException {\\n\\n\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\tlong n = Long.parseLong(br.readLine());\\n\tString array[] = br.readLine().split(\" \");\\n\tlong ans = 1;\\n\tfor (int i = 0; i < n; i++) {\\n\t    long a = Long.parseLong(array[i]);\\n\t    if (a == 0) {\\n\t\tans = 0;\\n\t    } else {\\n\t\tif (ans <= (long) Math.pow(10, 18) / a) {\\n\t\t    if (ans >= 0)\\n\t\t\tans *= a;\\n\t\t} else {\\n\t\t    ans = -1;\\n\t\t}\\n\t    }\\n\\n\t}\\n\tSystem.out.println(ans);\\n    }\\n}\\n", "target": "27", "substitutes": {"br": ["r", "ctr", "bro", "shr", "nr", "vr", "bc", "cr", "ber", "kr", "dr", "bf", "tr", "bh", "gb", "bridge", "db", "bl", "bs", "bn", "bp", "Br", "mr", "ger", "buf", "BR", "bj", "b", "rys", "bd", "lr", "hr", "bm", "pr", "wr", "bt", "rel", "browser", "jp", "yr", "fr", "rb", "ch", "gr", "rem"], "n": ["nu", "mn", "num", "name", "d", "unn", "nn", "l", "number", "nr", "len", "un", "N", "gn", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "sn", "on", "an", "z", "no", "nb", " N", "na", "nc", "np", "en", "nw", "t", "nor", "ln", "net", "size", "nt"], "array": ["stage", "save", "ray", "Array", "ar", " Array", "address", "system", "now", "ash", "aw", "attribute", "batch", "database", "csv", "section", "auto", "list", "audio", "analysis", "instance", "collection", "arr", "range", "sequence", "share", "vector", "age", "area", "among", "my", "answer", "storage", "angle", "say", "arrow", "rays", "archive", "function", "window", "hash"], "ans": ["gs", " means", " Ans", "ents", "acs", "ons", "uns", "vals", "aus", "anas", "anks", "ums", "names", "outs", "reads", "rs", "eds", "ns", "ads", "ks", "asks", "flags", " es", "beans", "nan", "ians", "os", "can", "yes", "ms", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "aned", "us", "als", "ls", "es", "an", "ows", "AN", "vs", "ams", "mas", "aos", "anes", " spans", "cs", "ations", "ones", "oa", "ins", "aps", "vers", "olds", "ds", "ions", "as", "terms", "posts", "xs", "lets", "stats", "lan", "offs", "ars", "ann"], "i": ["q", "I", "ix", "ri", "key", "phi", "gi", "zi", "iu", "hi", "ei", "chain", "ip", "ji", "point", "li", "o", "id", "asi", "v", "m", "ij", "me", "ini", "in", "this", "ski", "ai", "ki", "im", "ind", "qi", "index", "ik", "init", "u", "\u0438", "j", "bi", "it", "is", "ui", "ie", "uri", "pi", "ti", "ic", "ci", "c", "sim", "yi", "cli", "multi", "t", "p", "y", "ii", "si", "di", "x", "mi"], "a": ["ae", "ata", " af", "ca", "l", "oa", "o", "ta", "m", "aa", "aw", "sa", "sta", "sha", "ai", "val", "A", "at", "b", "index", "ia", "f", "an", "la", "ows", "z", "ao", "xa", "j", "pa", "ea", "area", "apa", "ba", "na", "aaa", "aka", "c", "aj", "fa", "max", "alpha", "ma", "as", "sam", "t", "ac", "p", "ana", "s", "au", "va", "x", "am"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t//String s= sc.next();\\n\t\tString buff= \"\";\\n\t\t//double n = sc.nextInt()/1000.0;\\n\t\tint m = sc.nextInt();\\n\t\t//int k = sc.nextInt();\\n\t\t//String s=sc.next();\\n\t\tint count=0,flag=0;\\n\t\tdouble count1=0,count2=0;\\n\t\tint count3=0;\\n\t\t//int[][] array1 = new int[m][k];\\n\t\t/*array[0]=n-m;\\n\t\tarray[1]=n*m;\\n\t\tarray[2]=n+m;*/\\n\t\t//Arrays.sort(array);\\n\\n\t\tfor(int j=105;j<=m;j++) {\\n\t\t\tfor(int i=1;i<=j;i+=2) {\\n\t\t\t\tif(j%i==0) {\\n\t\t\t\t\tcount3++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\t//System.out.println(count3);\\n\t\t\tif(j%2!=0 && count3==8) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t\tcount3=0;\\n\t\t}\\n\\n\t\t/*if(count==0) {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}*/\\n\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n\\n\\n", "target": "85", "substitutes": {"sc": [" SC", " ss", "sys", "system", "bc", "sp", "sv", "cr", " scr", "dc", "sa", " sk", "src", "sw", "scan", "sq", " Sc", "cs", "nc", "c", "sk", "Sc", "gc", "SC", "pc", "rc", "ch", " sp"]}}
{"code": "import java.util.*;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        char[] s = sc.next().toCharArray();\\n        char[] t = sc.next().toCharArray();\\n        int unmatch = 0;\\n        int unmatch_min = 1000;\\n        int cyc_max=s.length-t.length;\\n        for (int i=0; i<=cyc_max; i++){\\n            unmatch=0;\\n            for (int j=0; j<t.length; j++){\\n                if (!(s[i+j]==t[j])) unmatch++;\\n              \tif (unmatch>=unmatch_min) break;\\n            }\\n            if (unmatch<unmatch_min) unmatch_min=unmatch;\\n        }\\n\\n        System.out.println(unmatch_min);\\n    }\\n}", "target": "158", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "sv", "bc", "sp", "cr", "inc", "dc", "ctl", "ko", "cle", "sel", "sch", "sw", "sync", "fc", "tch", "tc", "scan", "sq", " Sc", "cont", "cs", "nc", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch"], "s": ["gs", "r", "sb", "l", "rs", "sys", "h", "sh", "ns", "sv", "so", "n", "v", "m", "strings", "source", "in", "ws", "bs", "S", "ms", "its", "ats", "str", "b", "sl", "es", "ls", "sts", "is", "ts", "sq", "cs", "ss", "c", "js", "ins", "ds", "p", "qs", "ps", "hs", "x", "st"], "t": ["q", "r", "pt", "mat", "wt", "temp", "tp", "rt", "o", "ta", "tree", "n", "v", "m", "tr", "tt", "tk", "nt", "T", "at", "b", "f", "test", "tc", "ent", "it", "tm", "ts", "template", "g", "table", "c", "mt", "txt", "ct", "out", "ot", "p", "y", "te", "to", "ty", "st", "tu"], "unmatch": ["Unmat", "uncresult", "unamatched", "unadiff", "diffMatch", "uncnot", "utmat", "unamatch", "unctest", "unccache", "conmut", " Unmat", " unfield", "tunmut", "ungcache", "untest", "unbug", "diffdiff", "gunbug", "unmatched", "uncbug", "unacache", "undiff", "unaresult", "Unfield", "unroute", "uncache", "ungmatch", "tunmat", "gunmatch", "diffmatch", "tunmatch", "utfield", "uncroute", " Unmatch", "utMatch", "ungnot", "uncmatch", "unnot", "unaMatch", "guntest", "conmatch", " unmut", "tunfield", "unaroute", " UnMatch", "unfield", "conmat", "unmut", "unanot", "diffmatched", "unatest", "ungroute", "unresult", "confield", "unabug", " unmat", "unMatch", "unmat", "gunresult", " undiff", "utmatch", "Unmatch", "UnMatch", " unMatch", " unmatched"], "unmatch_min": ["uncache_mins", "unsearch_MIN", "unsync_lower", "unmatch_sort", "uncache_min", "unmatch5minus", "uncheck_min", "unsync5sort", "unmatch2MIN", "unsearch_min", "unsync5min", "uncache_max", "unmatch_Min", "unmatch___mid", "uncache_low", "unmatch_minus", "unmatch___mins", "unmatch___min", "unmatch5sort", "unmatch_max", "unmatch___lower", "unmatch___minimum", "unmatch_mid", "unmatch_minimum", "unsearch_lower", "unmatch_low", "unsync_min", "unsync5lower", "uncheck_Min", "unmatch2Min", "uncheck_mid", "unmatch5lower", "unmatch_mins", "uncheck_mins", "unsync_sort", "uncache_Min", "uncache_MIN", "unmatch2min", "unmatch___MIN", "unmatch___Min", "unsync_minus", "unmatch_lower", "unsearch_minimum", "unmatch2max", "unsync5minus", "unmatch5min", "unmatch_MIN"], "cyc_max": ["cyc_view", "cycmp_view", "cyc67max", "cyf_last", "cycmp67view", "cyc_ax", "cyf_max", "cyc_co", "cyc_last", "cyf_ax", "cyf_tmp", "cyc_tmp", "cyc67view", "cycmp_max", "cycmp_co", "cycmp_med", "cyc67med", "cyc_med", "cyc67co", "cycmp67med", "cycmp67max", "cycmp67co"], "i": ["I", "ix", "ri", "phi", "hi", "zi", "iu", "ei", "iy", "chain", "ip", "li", "id", "asi", "ij", "ini", "in", "ai", "ni", "ki", "im", "ind", "qi", "ia", "init", "u", "ims", "bi", "it", "aci", "ib", "ui", "ie", "is", "uri", " Xi", "pi", "ti", "ic", "ci", "sim", "yi", "multi", "iq", "ami", "ii", "xi", "si", "di", "mi"], "j": ["br", "q", "jac", "ix", "pt", "key", "att", "l", "jl", "ji", "jj", "jo", "v", "ij", "n", "m", "err", "jump", "ne", "by", "ion", "jas", "ja", "im", "ind", "bj", "b", "note", "oj", "on", "f", "job", "req", "kat", "z", "it", "pr", "uj", "g", "json", "k", "bot", "js", "obj", "aj", "jp", "J", "other", "fr", "ph", "kj", "y", "jc", "jack", "je", "kid", "dj"]}}
{"code": "\\nimport java.util.Scanner;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n    \\n    public static void main(String[] args) {\\n        \\n        Scanner entrada=new Scanner(System.in);\\n        \\n      \\n        int x[]=new int[3];\\n        int x2[]=new int[3];\\n        for (int i = 0; i < 3; i++) {\\n            x[i]=entrada.nextInt();\\n        }\\n        \\n        for (int i = 0; i < 2; i++) {\\n            x2[i]=x[i]+x[i+1];\\n        }\\n        x2[2]=x[0]+x[2];\\n        Arrays.sort(x2);\\n        System.out.println(x2[0]);\\n    }\\n    \\n}", "target": "89", "substitutes": {"entrada": ["entresada", "entrida", "entranca", "entrADA", "enttrata", "entmraton", "ENTrida", "entrade", "ENTmrada", "entarade", "entrbata", "ENTmrADA", "ultrade", "ulttrade", "entarata", "ENTmrida", "entrtada", "enttrada", "ENTraton", "entrtida", "entmrADA", "ultranca", "entrtADA", "enttranca", "entresida", "enttrade", "ultrada", "entrbanca", "entresADA", "entresaton", "entmrida", "entaranca", "entarada", "entrata", "entmrada", "ulttranca", "entrtaton", "entrbada", "ENTrada", "entrbade", "ENTmraton", "ulttrata", "ENTrADA", "ultrata", "ulttrada", "entraton"], "x": ["q", "ix", "ex", "wx", "ax", "php", "ox", "l", "xml", "h", "n", "v", "m", "xf", "tx", "xe", "xx", "b", "index", "f", "px", "code", "u", "xc", "list", "z", "history", "hex", "test", "xes", "lex", "xxxx", "g", "xt", "mx", "mix", "ic", "c", "xd", "e", "ct", "w", "X", "t", "edit", "p", "rx", "ux", "ctx", "y", "xs", "xi", "xp", "fx"], "x2": ["ix1", "ix3", "ex1", " x7", "x02", "x0", "x1", "ox16", "ox7", "tx02", "wx1", "rx0", "ix2", "ox2", "x16", "X0", " x16", " x1", "x3", "rx16", "X7", "x7", "rx1", "ex3", "rx7", "ex2", " x0", "rx02", "wx02", "X2", " x3", "ex02", "rx2", "tx1", " x02", "wx2", "tx2"], "i": ["q", "I", "ix", "name", "ri", "key", "phi", "gi", "hi", "iu", "zi", "base", "iy", "chain", "ip", "ji", "point", "li", "o", "id", "v", "m", "ij", "me", "ini", "err", "in", "batch", "this", "print", "ai", "client", "mu", "im", "ind", "qi", "ori", "us", "init", "u", "\u0438", "io", "j", "bi", "it", "ity", "ui", "is", "ie", "uri", "status", "pi", "inner", "ti", "ic", "ci", "sim", "cli", "multi", "iter", "gu", "info", "y", "ii", "xi", "si", "di", "mi"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\n\\n\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tFastScanner fs = new FastScanner();\\n\t\tString s = fs.next();\\n\t\tif(s.equals(\"AAA\") || s.equals(\"BBB\") || s.equals(\"CCC\")) {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}\\n\t}\\n\\n}\\n\\nclass FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        }else{\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\\n    public boolean hasNext() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\\n    public String next() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while(isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n    public long nextLong() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while(true){\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            }else if(b == -1 || !isPrintableChar(b)){\\n                return minus ? -n : n;\\n            }else{\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n    public int nextInt() {\\n        long nl = nextLong();\\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\\n        return (int) nl;\\n    }\\n    public double nextDouble() { return Double.parseDouble(next());}\\n}", "target": "76", "substitutes": {}}
{"code": "import java.util.Scanner;\\nimport java.util.Arrays;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        new Main().solve();\\n    }\\n\\n    void solve() {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int X = sc.nextInt();\\n        int sum = 0;\\n        int[] m = new int[N];\\n        for (int i = 0; i < N; i++) {\\n            m[i] = sc.nextInt();\\n            sum += m[i];\\n        }\\n        Arrays.sort(m);\\n        X = X - sum;\\n        System.out.println(N + X / m[0]);\\n    }\\n}\\n", "target": "3", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "sh", "cr", "bc", "sv", "sp", "inc", "dc", "nl", "ctl", "sch", "se", "sync", "fc", "exec", "tc", "ctrl", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "cons", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "N": ["Sum", "Z", "I", "D", "Node", "TN", "F", "ND", "NM", "SN", "NP", "NE", "NB", "n", "NV", "O", "S", "Ni", "P", "NO", "NL", "T", "R", "NS", "A", "NR", "V", "M", "NH", "GN", "NC", "H", "C", "U", "NN", "Num", "Y", "L", "NA", "K", "J", "NI", "NT", "Ns"], "X": ["Z", "I", "D", "F", "ax", "E", "TX", "EX", "IX", "DX", "OX", "G", "XXX", "S", "P", "UX", "T", "R", "Q", "A", "V", "M", "W", "CH", "XX", "H", "C", "U", "TY", "Y", "L", "K", "J", "XP", "MX", "XL", "x", "B"], "sum": ["Sum", "num", "cal", "SI", "cos", "number", "NUM", "weight", "ums", "med", "total", "zero", " SUM", "sign", "n", "summary", "missing", "tail", "su", "square", "mean", "SU", "hist", "scale", "index", "count", "us", "mem", "stack", "US", "sup", "um", "cum", "vol", "mod", "mass", " summed", "sim", "max", "alpha", "diff", "sam", "average", "add", "size", "si", "UM", "hash"], "m": ["num", "mm", "dm", "d", "mo", "pm", "mp", "l", "met", "o", "perm", "n", "v", "me", "md", "ms", "vm", "mr", "mu", "im", "rm", "sm", "M", "mem", "j", "um", "bm", "gm", "tm", "mx", "cm", "mod", "c", "mt", "nm", "ma", "s", "p", "wm", "man", "em", "hm", "mc", "x", "mi", "rem", "am"], "i": ["set", "q", "I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "ei", "chain", "ip", "ji", "li", "o", "id", "v", "ini", "batch", "ai", "ms", "im", "ind", "qi", "us", "init", "u", "\u0438", "io", "j", "bi", "it", "is", "ui", "uri", "ie", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "t", "iter", "y", "ii", "xi", "si", "span", "di", "x", "mi"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner hoge = new Scanner(System.in);\\n\t\tint d = hoge.nextInt();\\n\t\tSystem.out.println(d*d*d);\\n\t\t\\n\t\\n\t}\\n\\n\\n}", "target": "36", "substitutes": {"hoge": ["hog", "woje", " hone", "Hoje", "Hoesh", "heroge", "heroesh", "wone", " joGe", "Hoge", "woge", "heroje", "hone", " jone", "herone", "HoGe", " hoGe", "woesh", "hoesh", " joge", " jog", "hoje", "hoGe", "Hone", "Hog", " hog"], "d": ["dh", "D", "pd", "dat", "r", "q", "dm", "dot", "dim", "df", "l", "dd", "fd", "gd", "h", "did", "n", "m", "da", "v", "sd", "db", "dc", "dr", "dom", "du", "md", "td", "dig", "ind", "b", "f", "dist", "j", "dra", "cd", "dx", "div", "g", "c", "std", "ds", "debug", "des", "w", "out", "t", "nd", "p", "s", "ld", "dt", "di", "x", "dp"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.HashMap;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tint n = Integer.parseInt(br.readLine());\\n\\n\t\tString str[] = br.readLine().split(\" \");\\n\\n\t\tint value[] = new int[n];\\n\\n\t\tfor (int i = 0; i < n - 1; i++) {\\n\t\t\tint a = Integer.parseInt(str[i]);\\n\\n\t\t\tvalue[a - 1]++;\\n\t\t}\\n\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tSystem.out.println(value[i]);\\n\t\t}\\n\t}\\n}", "target": "12", "substitutes": {"br": ["r", "ctr", "sb", "bro", "shr", "nr", "vr", "cr", "bc", "ber", "kr", "dr", "bh", "tr", "bf", "bridge", "db", "bl", "bs", "bn", "bp", "Br", "mr", "ger", "buf", "BR", "bj", "b", "lr", "bd", "hr", "bi", "bm", "pr", "div", "wr", "bt", "rel", "browser", "yr", "fr", "bb", "rb", "ch", "gr", "rem", "next"], "n": ["nu", "mn", "num", "q", "r", "name", "d", "nn", "l", "number", "un", "len", "N", "o", "h", "ns", "m", "v", "ne", "nan", "nl", "cn", "sn", "count", "f", "on", "norm", "z", "j", "no", "nb", "pi", " N", "na", "nc", "k", "np", "length", "en", "c", "nw", "t", "p", "network", "ln", "net", "nt"], "str": ["dat", "r", "ctr", "STR", "name", "att", "rs", "sec", "so", "strings", "sp", "dr", "tr", "oct", "raw", "path", "print", "spec", "enc", "stri", "list", "sl", "inst", "arr", "gr", "string", "sts", "Str", "div", "data", "vol", "txt", "out", "fr", "s", "char", "si", "res", "split", "st", "rip"], "value": ["result", "key", "array", "version", "feature", "number", "current", "entry", "total", "tree", "node", "v", "default", "attribute", "database", "item", "this", "print", "val", "report", "state", "hello", "scale", "auto", "index", "list", "image", "variable", "buffer", "field", "object", "sequence", "unit", "ue", "message", "data", "text", "json", "action", "values", "w", "we", "VALUE", "Value", "rule", "function", "see"], "i": ["I", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "ei", "iy", "chain", "ip", "ji", "point", "li", "o", "jo", "id", "ij", "me", "ini", "err", "wi", "this", "ski", "ai", "ni", "ki", "im", "ind", "qi", "index", "us", "init", "\u0438", "u", "io", "ims", "history", "j", "bi", "it", "slice", "ity", "umi", "ui", "is", "uri", "ie", "pi", "eu", "k", "ti", "ic", "ci", "MI", "sim", "cli", "multi", "info", "iq", "gu", "ami", "y", "oi", "xi", "ii", "si", "to", "di", "mi"], "a": ["ca", "ava", "ax", " na", "qa", "ta", "aa", "sta", "sa", "sha", "wa", "isa", "ja", "A", "b", " fa", "an", "la", " A", "z", "ao", "xa", "ea", "area", "aria", "na", "ba", "ach", "aaa", "aj", "fa", "ap", "alpha", "as", "ma", "ac", "ana", "ka", "au", "aux", "va", "am"]}}
{"code": "import java.awt.Point;\\nimport java.util.ArrayDeque;\\nimport java.util.Scanner;\\nimport java.util.*;\\nimport java.util.Arrays;\\nimport java.util.ArrayList;\\nimport java.util.Set;\\nimport java.util.HashSet;\\nimport java.util.Collection;\\n\\n\\n \\npublic class Main{\\n\t\\n        static final Scanner sc=new Scanner(System.in);\\n        \\n        \\n        \\n        \\n        \\n        \\n        public static void main(String[]args){\\n                int N=sc.nextInt();\\n                if(N>=195){\\n                        System.out.println(5);\\n                }else if(N>=189){\\n                        System.out.println(4);\\n                }\\n                else if(N>=165){\\n                        System.out.println(3);\\n                }\\n                else if(N>=135){\\n                        System.out.println(2);\\n                }else if(N>=105){\\n                        System.out.println(1);\\n                }else{\\n                        System.out.println(0);\\n                }\\n                \\n                \\n\\n\\n                \\n        }\\n        \\n        \\n        \\n\\n\t\t\\n\t\\n}\\n", "target": "85", "substitutes": {"sc": ["lc", "cc", "row", "sb", "cl", "sys", "system", "sh", "sv", "sp", "bc", "inc", "dc", "sa", "tk", "nl", "ec", "sch", "sw", "res", "tc", "scan", "sq", "cs", "nc", "ok", "c", "syn", "sk", "osc", "Sc", "gc", "scl", "scope", "SC", "mc", "pc", "rc", "ch"], "N": ["D", "Z", "TN", "GEN", "FN", "ND", "NM", "NUM", "NI", "SN", "NP", "NE", "NPR", "NB", "n", "NV", "NER", "Ni", "NG", "NO", "NL", "R", "NS", "NR", "V", "NAME", "ANY", "NH", "M", "None", "MN", "NW", "AN", "US", "GN", "NC", "Number", "UN", "NA", "Num", "NEW", "K", "NOR", "NOT", "NOTE", "CN", "Name", "CNN", "NN", "NT"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tString word[] = new String[N]; \\n\t\t\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tword[i] = sc.next();\\n\t\t}\\n\t\t\\n\t\tboolean isRule = true;\\n\t\tfor(int i = 1; i < N; i++) {\\n\t\t\tif(word[i-1].charAt(word[i-1].length()-1) == word[i].charAt(0)) {\\n\t\t\t\tisRule = true;\\n\t\t\t}else {\\n\t\t\t\tisRule = false;\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tfor(int j = i+1; j < N; j++){\\n\t\t\t\tif(word[i].equals(word[j])) {\\n\t\t\t\t\tisRule = false;\\n\t\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tif(isRule == true) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}\\n\t\t\\n\t}\\n}\\n", "target": "70", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "ctl", "cle", "sel", "src", "sch", "sw", "fc", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "ng", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "st", "sub"], "N": ["D", "I", "Z", "Node", "TN", "F", "FN", "ND", "NM", "SN", "ALL", "NE", "NB", "n", "O", "G", "S", "NG", "P", "NO", "T", "R", "NS", "Q", "MAN", "NR", "V", "INT", "NH", "M", "AN", "GN", "NC", "H", "Sn", "C", "NN", "Num", "NA", "L", "K", "J", "Net", "NOTE", "NAT", "NI", "NT", "B", "Ns"], "word": ["block", "name", "token", "key", "white", "work", "wo", "policy", "password", "feature", "number", "chain", "weight", "part", "position", "point", "ver", "bit", "prefix", "attribute", "pair", "tag", "dict", "user", "form", "phrase", "letter", "list", "test", "lower", "Word", "space", "string", "comment", "message", "document", "fix", "words", "piece", "text", "record", "hop", "one", "link", "question", "answer", "w", "sword", "char", "role", "label", "command", "wh", "page", "cycle", "rule", "query", "line", "function", "window", "term"], "i": ["q", "ix", "zi", "iu", "ei", "base", "li", "n", "me", "batch", "lo", "ai", "ki", "f", "ik", "ims", "is", "eu", "ic", "e", "ami", "y", "oi", "di", "ani", "ri", "chain", "ip", "ji", "point", "id", "ij", "iti", "ori", "io", "bi", "it", "um", "g", "inner", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "jj", "this", "print", "ind", "list", "ia", "u", "\u0438", "pi", "my", "iri", "xi", "si", "mi", "I", "gi", "entry", "m", "ini", "im", "qi", "index", "us", "init", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "info", "iter", "to"], "j": ["br", "q", "mn", "jit", "jac", "pt", "d", "key", "ev", "l", "ji", "jj", "h", "adj", "n", "ij", "m", "v", "jump", "jas", "ne", "ja", "str", "bj", "b", "note", "oj", "job", "z", "bi", "it", "pr", "zone", "g", "uj", "k", "json", "js", "obj", "aj", "jp", "J", "other", "fr", "ng", "nd", "kj", "y", "jc", "dj", "je", "jl"], "isRule": ["isValid", "asRules", "bisrule", "ISValid", "IsChain", "irule", "asrule", "wasrule", "issService", "bisRole", "checkrule", "bisRule", "asRule", " isGrant", " isPolicy", "wasRules", "IsValid", "checkPolicy", "IsRule", "Isrule", "issProduction", "isrule", "checkValid", "ISRule", "ISChain", "wasRule", "iPolicy", " isValid", "bisProduction", " isChain", "isGrant", "iValid", "asValid", "asService", "isRole", "bisValid", "isChain", "asProduction", "issRule", " isrule", "iRule", "asRole", "issRole", "checkRule", "IsGrant", "ISrule", "isPolicy", "isProduction", " isRules", "bisService", "isService", "wasValid", "isRules", "bisGrant"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\n\\npublic class Main {\\n  public static void main(String[] args) throws IOException {\\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n    String str = in.readLine();\\n    int n = Integer.parseInt(str);\\n    int sn = 0;\\n    for(int i = 0; i < str.length(); i++) {\\n      sn += Integer.parseInt(str.substring(i,i+1));\\n    }\\n    System.out.println(n%sn==0?\"Yes\":\"No\");\\n  }\\n}", "target": "195", "substitutes": {"in": ["r", "d", "bin", "from", "inf", "con", "isin", "log", "inc", "ad", "ini", "err", "read", "doc", "inn", "rin", "OUT", "IN", "file", "get", "this", "user", "ind", "ill", "b", "In", "init", "world", "io", "nin", "reader", "it", "null", "din", "is", "thin", "stream", "inner", "en", "ins", "input", "std", "conf", "out", "check", "cin", "info", "add", "all"], "str": ["dat", "br", "r", "result", "ctr", "STR", "pt", "dec", "cur", "chain", "sol", "cl", "del", "tree", "cr", "sp", "dr", "tr", "oct", "rep", "ocr", "raw", "comm", "print", "spec", "enc", "stri", "form", "list", "sl", "arr", "hex", "string", "it", "Str", "div", "pr", "text", "data", "g", "vol", "wr", "obj", "mt", "txt", "out", "fr", "exp", "t", "s", "char", "p", "res", "gr", "st"], "n": ["nu", "num", "d", "nn", "l", "number", "nr", "N", "h", "ns", "v", "dn", "nl", "cn", "ni", "nat", "f", "j", "no", "nb", "Sn", "g", "nc", "fn", "na", "en", "c", "tn", "nm", "t", "p", "nor", "ln", "net", "nt", "x"], "sn": ["nu", "num", "pn", "sf", "nn", "sb", "number", "nr", "SN", "N", "gn", "ns", "so", "sv", "sp", "sh", "sd", "dn", "tt", "su", "nl", "cn", "wn", " sw", "sw", "sync", "sl", "sc", "no", "nb", "sq", "Sn", "cs", "ss", "nc", "fn", "np", "fl", "syn", "sk", "tn", "span", "sam", "ness", "ln", " su", "si", "nt", "sr", "st"], "i": ["q", "I", "ix", "ri", "ico", "phi", "hi", "gi", "iu", "zi", "ei", "l", "ip", "ji", "li", "o", "m", "me", "ini", "ai", "ms", "im", "ind", "qi", "ori", "index", "us", "init", "u", "\u0438", "io", "ims", "z", "j", "bi", "it", "ui", "is", "uri", "ie", "pi", "ti", "ic", "ci", "yi", "cli", "multi", "gu", "p", "oi", "y", "xi", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc=new Scanner(System.in);\\n        int i,j,k,l,n,x,count=0;\\n        for(i=0;;i++){\\n            n=sc.nextInt();\\n            x=sc.nextInt();\\n            if((n==0)&&(x==0)){\\n                break;\\n            }else{\\n                for(j=1;j<=n-2;j++){\\n                    for(k=j+1;k<=n-1;k++){\\n                        for(l=k+1;l<=n;l++){\\n                            if(j+k+l==x){\\n                                count += 1;\\n                            }\\n                        }\\n                    }\\n                }\\n                System.out.println(count);\\n                count=0;\\n            } \\n        }\\n    }\\n}\\n", "target": "116", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "sv", "sp", "cr", "bc", "inc", "dc", "ck", "nl", "ctl", "sw", "fc", "sync", "tch", "tc", "scan", "sq", "cs", "nc", "pb", "ic", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "i": ["I", "r", "ix", "phi", "iu", "ar", "o", "li", "id", "ij", "v", "m", "ini", "stat", "print", "ai", "ret", "im", "ind", "at", "inter", "index", " ii", "bi", "it", "is", "ui", "ie", "pi", "lock", "g", "ti", "ic", "ci", "c", "sim", "e", "multi", "p", "y", "ii", "xi", "si", "di", "mi", "ish"], "j": ["br", "q", "r", "jit", "pt", "att", "jl", "ji", "jj", "jo", "ij", "v", "m", "boot", "tr", "jump", "ne", "jas", "ju", "bs", "ret", "ja", "im", "ind", "art", "bj", "at", "b", "oj", "job", "z", "it", "pr", "ie", "g", "uj", "json", "ek", "js", "aj", "sim", "jp", "J", "ot", "obj", "fr", "t", "s", "p", "bo", "kj", "y", "jc", "ijk", "kid", "dj"], "k": ["q", "ke", "key", "wk", "ikk", "kl", "ks", "kh", "kr", "dk", "km", "tk", "ck", "ko", "unk", "ak", "kn", "kar", "ki", "ik", "kk", "uk", "z", "mk", "ark", "sk", "ek", "ku", "isk", "K", "kind", "kt", "ac", "kj", "ka", "ijk", "th", "kw", "kid", "kg"], "l": ["lt", "il", "dl", "lc", "ll", "loc", "el", "hl", "len", "kl", "li", "pl", "log", "lp", "v", "al", "nl", "lo", "lb", "gl", "ql", "le", "lit", "lay", "lin", "list", "lr", "sl", "ls", "ml", "la", "z", "lock", "lv", "fl", "ell", "ul", "L", "tl", "ln", "ld", "jl", "lu"], "n": ["nu", "num", "mn", "name", "ll", "nn", "un", "len", "N", "gn", "o", "ns", "m", "v", "nan", "ne", "nl", "cn", "ni", "ren", "sn", "on", "z", "no", "nb", " N", "g", "na", "nv", "np", "nc", "fn", "en", "c", "nw", "nm", "none", "w", "ng", "t", "p", "nor", "ln", "y", "net", "all", "nt", "non", "names"], "x": ["ix", "ex", "wx", "ax", "ox", "xml", "o", "h", "v", "xf", "xy", "tx", "inx", "xe", "xx", "index", "f", "on", "px", "u", "xc", "z", "xa", "xes", "dx", "xt", "mx", "xxx", "c", "e", "w", "X", "t", "rx", "p", "y", "xi", "xs", "xp", "fx"], "count": ["num", "ount", "result", "empty", "coll", "reported", "found", "base", "number", "cond", "total", "now", "zero", "amount", "summary", "cast", "batch", "stat", "process", "important", "print", "sum", "report", "Count", "cache", "ind", "search", "hold", "list", "index", "code", "test", "const", "match", "dist", "force", "comment", "find", "core", "cd", "child", "trace", "status", "success", "length", "score", "c", "conf", "max", "counter", "diff", "check", "continue", "info", "command", "cycle", "size", "nt", "ch", "checked"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args)throws IOException {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\twhile(true){\\n\t\t\t\\n\t\t\tint a = sc.nextInt();\\n\t\t\tString op = sc.next();\\n\t\t\tchar o = op.charAt(0);\\n\t\t\tint b = sc.nextInt();\\n\\n\t\tif(o == '?'){\\n\t\t\tbreak;\\n\t\t}\\n\t\telse if(o == '-'){\\n\t\t\tSystem.out.println(a - b);\\n\t\t}\\n\t\telse if(o == '*'){\\n\t\t\tSystem.out.println(a * b);\\n\t\t}\\n\t\telse if(o == '/'){\\n\t\t\tSystem.out.println(a / b);\\n\t\t}\\n\t\telse if(o == '+'){\\n\t\t\tSystem.out.println(a + b);\\n\t\t}\\n\t\t\\n\t\t}sc.close();\\n\t}\\n}", "target": "139", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "cgi", "cl", "sys", "system", "sh", "so", "cr", "sv", "sp", "bc", "inc", "dc", "ck", "ctl", "ec", "capt", "cle", "irc", "sch", "sync", "fc", "tc", "ctrl", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "cons", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "scrib", "ch", "desc", "sub"], "a": ["ae", "ca", "eta", "aq", "ar", "oa", "ta", "v", "aa", "da", "sta", "sa", "ai", "A", "ia", "an", "la", "ga", "ao", "xa", "j", "aos", "ab", "pa", "ea", "area", "i", "apa", "g", "ba", "aaa", "na", "aka", "aj", "fa", "w", "out", "ma", "t", "as", "p", "ac", "era", "au", "va", "x", "am"], "op": ["pop", "oc", "mp", "ob", "ip", "co", "vp", "bit", "sp", "cp", "m", "om", "operator", "Op", "top", "spec", "operation", "pp", "or", "opt", "j", "it", "OP", "g", "comp", "k", "omp", "np", "ops", "hop", "iop", "jp", "ap", "ot", "exp", "info", "p", "oper"], "o": ["r", "to", "mo", "ob", "l", "co", "oa", "oo", "h", "so", "v", "n", "om", "m", "po", "fo", "ol", "oct", "err", "ion", "O", "lo", "ro", "os", "go", "f", "oj", "type", "u", "io", "cho", "no", "i", "off", "k", "iso", "ok", "one", "none", "normal", "e", "ot", "bo", "out", "t", "ov", "p", "er", "y", "oin"], "b": ["br", "r", "d", "xb", "wb", "sb", "ob", "base", "l", "mb", "h", "bar", "bc", "v", "m", "n", "bf", "db", "bs", "bp", "bool", "eb", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "pb", "c", "bis", "e", "w", "t", "p", "bb", "cb", "be", "rb", "B"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint mod = 1_000_000_007;\\n\t\tint N = sc.nextInt();\\n\t\tint M = sc.nextInt();\\n\t\tint[] a = new int[M];\\n\t\tint[] flag = new int[2];\\n\t\tHashSet<Integer> set = new HashSet<Integer>();\\n\t\tfor (int i=0;i<M;i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t\tset.add(a[i]);\\n\t\t\tif (a[i]==1) {\\n\t\t\t\tflag[0]=1;\\n\t\t\t} else if(a[i]==2) {\\n\t\t\t\tflag[1]=1;\\n\t\t\t}\\n\t\t}\\n\t\tif (N==1) {\\n\t\t\tSystem.out.println(1);\\n\t\t} else {\\n\t\t\tint[] ans = new int[N+1];\\n\t\t\tif (flag[0]==0) {\\n\t\t\t\tans[1]=1;\\n\t\t\t}\\n\t\t\tif (flag[1]==0) {\\n\t\t\t\tans[2]=1;\\n\t\t\t}\\n\t\t\tfor (int i=0;i<N;i++) {\\n\t\t\t\tif (i!=N-1) {\\n\t\t\t\t\tif (!set.contains(i+2)) {\\n\t\t\t\t\t\tans[i+2]=(ans[i+2]+ans[i])%mod;\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\tif (!set.contains(i+1)) {\\n\t\t\t\t\tans[i+1]=(ans[i+1]+ans[i])%mod;\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\tSystem.out.println(ans[N]);\\n\t\t}\\n\t}\\n}", "target": "174", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "sb", "sec", "cl", "sys", "system", "sv", "sp", "bc", "cr", "inc", "dc", "ck", "nl", "ctl", "capt", "cle", "sw", "se", "sync", "fc", "exec", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "mod": ["reg", "ix", "post", "od", "deg", "dec", "Mod", "mask", "mag", "row", "modified", "base", "temp", "ver", "prime", "len", "log", "perm", "sign", "m", " Mod", "change", "tag", "lib", "MOD", "ms", "dig", "scale", "min", "rot", "pos", "div", "lex", " MOD", "fun", "mode", "pad", "step", "debug", "max", "mult", "dir", "trans", "add", "del", "sub"], "N": ["D", "I", "Node", "TN", "F", "ND", "NM", "NUM", "SN", "NP", "NE", "NB", "n", "Size", "O", "S", "Ni", "P", "T", "NL", "NO", "R", "NS", "A", "MAN", "NR", "V", "NH", "AN", "MN", "Len", "GN", "NC", "H", "C", "U", "NN", "Num", "Y", "L", "NA", "K", "J", "X", "NI", "NT"], "M": ["D", "I", "MO", "F", "CM", "E", "NM", "m", "MS", "Size", "DI", "O", "G", "MM", "S", "P", "T", "DM", "R", "MAN", "V", "MP", "MN", "H", "MC", "C", "U", "LM", "MI", "IM", "Y", "L", "TM", "K", "J", "MON", "MX", "MT", "B"], "a": ["va", "ca", "av", "att", "ar", "array", "l", "oa", "ta", "n", "m", "aa", "da", "app", "aw", "sa", "sta", "ace", "sha", "ai", "isa", "act", "art", "A", "b", "ia", "an", "ga", "ao", "ab", "ea", "area", "apa", "ba", "aaa", "na", "ast", "fa", "ap", "alpha", "as", "t", "eas", "s", "ac", "p", "ma", "era", "au", "aux", "ata", "am"], "flag": ["valid", "ment", "offset", "stage", "save", "group", "star", "mask", "fail", "feature", "l", "cond", "flags", "log", "bit", "id", "and", "option", "al", "print", "filter", "tag", "state", "arg", "prop", "user", "lag", "af", "button", "bool", "count", "f", "list", "sync", "type", "force", "fire", "test", "field", "condition", "cmd", "age", "data", "status", "bug", "lock", "lv", "Flag", "action", "store", "old", "link", "bo", "style", "use", "check", "def", "command", "lean", "ld", "ag", "st", "ord"], "set": ["disable", "stop", "offset", "save", "end", "group", "enable", "used", "san", "draw", "sh", "so", "reset", "sp", "n", "tmp", "export", "read", "sche", "sum", "clear", "mark", "get", "start", "se", "list", "sync", "site", "secure", "sm", "SET", "null", "sets", "see", "et", "open", "seen", "store", "en", "done", "bo", "use", "check", "handle", "add", "size", "ch", "st", "map"], "i": ["q", "ix", "zi", "iu", "details", "ei", "li", "n", "me", "batch", "ai", "ki", "f", "is", "eu", "ic", "e", "ami", "y", "oi", "di", "x", "ri", "l", "chain", "ip", "ji", "point", "o", "id", "ij", "source", "in", "io", "bi", "it", "g", "ci", "sim", "cli", "s", "ii", "phi", "hi", "this", "print", "ind", "u", "\u0438", "pi", "p", "iri", "xi", "si", "mi", "I", "mm", "gi", "v", "m", "ini", "err", "im", "qi", "index", "us", "init", "j", "ui", "ie", "uri", "ti", "multi", "iter", "info", "to"], "ans": ["acs", "uns", "ents", "ints", "ons", "eps", "ras", "nets", "vals", "anas", "rs", "aus", "aces", "ums", "outs", "flags", "eds", "ns", "ads", "ks", "bs", "ians", "ands", "atts", "os", "ms", "lines", "ids", "ates", "ANS", "arts", "amps", "ats", "ens", "ants", "ems", "aned", "ags", "us", "es", "ls", "als", "an", "angs", "AN", "vs", "mas", "aos", "is", "ts", "ams", "anes", "cs", "ones", "ins", "aps", "arms", "uls", "ions", "cons", "aints", "s", "as", "posts", "cas", "ots", "xs", "lets", "aves", "lan", "offs", "ars", "ann"]}}
{"code": "// Working program with FastReader \\nimport java.io.*; \\n\\nimport java.util.*; \\n \\n\\npublic class Main \\n{ \\n\tstatic class FastReader \\n\t{ \\n\t\tBufferedReader br; \\n\t\tStringTokenizer st; \\n\\n\t\tpublic FastReader() \\n\t\t{ \\n\t\t\tbr = new BufferedReader(new\\n\t\t\t\t\tInputStreamReader(System.in)); \\n\t\t} \\n\\n\t\tString next() \\n\t\t{ \\n\t\t\twhile (st == null || !st.hasMoreElements()) \\n\t\t\t{ \\n\t\t\t\ttry\\n\t\t\t\t{ \\n\t\t\t\t\tst = new StringTokenizer(br.readLine()); \\n\t\t\t\t} \\n\t\t\t\tcatch (IOException e) \\n\t\t\t\t{ \\n\t\t\t\t\te.printStackTrace(); \\n\t\t\t\t} \\n\t\t\t} \\n\t\t\treturn st.nextToken(); \\n\t\t} \\n\\n\t\tint nextInt() \\n\t\t{ \\n\t\t\treturn Integer.parseInt(next()); \\n\t\t} \\n\\n\t\tlong nextLong() \\n\t\t{ \\n\t\t\treturn Long.parseLong(next()); \\n\t\t} \\n\\n\t\tdouble nextDouble() \\n\t\t{ \\n\t\t\treturn Double.parseDouble(next()); \\n\t\t} \\n\\n\t\tString nextLine() \\n\t\t{ \\n\t\t\tString str = \"\"; \\n\t\t\ttry\\n\t\t\t{ \\n\t\t\t\tstr = br.readLine(); \\n\t\t\t} \\n\t\t\tcatch (IOException e) \\n\t\t\t{ \\n\t\t\t\te.printStackTrace(); \\n\t\t\t} \\n\t\t\treturn str; \\n\t\t} \\n\t} \\n\\n\tpublic static void main(String[] args) \\n\t{ \\n\t\tFastReader sc=new FastReader(); \\n\t\tint d = sc.nextInt(); \\n\t\tint t= sc.nextInt();\\n\t\tint s=sc.nextInt();\\n\t\tlong dist=t*s;\\n\t\tif(dist>=d)\\n\t\tSystem.out.println(\"Yes\");\\n\t\telse\\n\t\tSystem.out.println(\"No\");\\n\t} \\n} \\n", "target": "246", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint X = sc.nextInt();\\n\t\tint temp;\\n\t\tint ans = 1;\\n\t\tfor (int i = 2; i * i <= X; i++) {\\n\t\t\ttemp = i;\\n\t\t\twhile (temp * i <= X) {\\n\t\t\t\ttemp *= i;\\n\t\t\t}\\n\t\t\tif (temp > ans) {\\n\t\t\t\tans = temp;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "143", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sb", "cl", "sys", "system", "Scan", "ser", "cr", "sv", "sp", "bc", "nl", "ec", "src", "sch", "RC", "sw", "res", "se", "tc", "scan", "sq", "cs", "ss", "nc", "ok", "c", "syn", "osc", "Sc", "gc", "asc", "isc", "SC", "mc", "pc", "rc", "ch"], "X": ["Z", "I", "F", "ax", "TX", "EX", "IX", "N", "DX", "OX", "S", "P", "UX", "T", "R", "Q", "V", "M", "IP", "XX", "H", "C", "U", "Tx", "XT", "Y", "L", "XP", "K", "J", "Ex", "MX", "Xi", "AX", "XL", "MAX", "x"], "temp": ["pt", "tim", "mini", "cur", "perature", "mp", "base", "pre", "prime", "total", "perm", "ta", "unt", "tmp", "v", "EMP", "wait", "unc", "tr", "po", "tt", "make", "cp", "tem", "Temp", "sum", "ms", "cu", "trade", "res", "alt", "min", "index", "fac", "test", "tc", "orig", "unit", "Temperature", "mint", "ts", "div", "ptr", "pi", "cum", "mod", "emp", "sim", "max", "txt", "multi", "t", "vi", "porary", "fake", "em", "ps", "Tem", "copy", "mi", "rem", "term"], "ans": ["uns", "ents", "ons", "eps", "faces", "offs", "vals", "pan", "aus", "rs", "names", "ATS", "reads", "ums", "oos", "eds", "ns", "cats", "ks", "asks", "ads", "ran", "ces", "ians", "ars", "os", "can", "ms", "lines", "types", "arts", "ANS", "ids", "amps", "ats", "ens", "ants", "ates", "ls", "an", "ims", "AN", "ann", "vs", "mas", "scan", "is", "ts", " spans", "cs", "ones", "ins", "aps", "times", "as", "posts", "xs", "ps", "span", "x", "outs", " scans"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "hi", "iu", "fi", "l", "ip", "ei", "ati", "li", "id", "v", "m", "n", "ij", "ini", "in", "ai", "ki", "im", "ind", "index", "f", "list", "ik", "\u0438", "sequence", "j", "bi", "it", "slice", "ui", "is", "pi", "ti", "ic", "ci", "sim", "yi", "cli", "multi", "t", "iter", "p", "info", "y", "xi", "ii", "si", "to", "di", "x", "mi"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.InputMismatchException;\\nimport java.util.Map;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tstatic PrintWriter out;\\n\tstatic InputReader ir;\\n\\n\tstatic void solve() {\\n\t\tint n = ir.nextInt();\\n\t\tHashMap<String, Long> map = new HashMap<>();\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tchar[] s = ir.next().toCharArray();\\n\t\t\tArrays.sort(s);\\n\t\t\tString t = String.valueOf(s);\\n\t\t\tif (!map.containsKey(t)) {\\n\t\t\t\tmap.put(t, 1L);\\n\t\t\t} else {\\n\t\t\t\tmap.put(t, map.get(t) + 1);\\n\t\t\t}\\n\t\t}\\n\t\tlong res = 0;\\n\t\tfor (Map.Entry<String, Long> e : map.entrySet()) {\\n\t\t\tres += e.getValue() * (e.getValue() - 1) / 2;\\n\t\t}\\n\t\tout.println(res);\\n\t}\\n\\n\tpublic static void main(String[] args) {\\n\t\tir = new InputReader(System.in);\\n\t\tout = new PrintWriter(System.out);\\n\t\tsolve();\\n\t\tout.flush();\\n\t}\\n\\n\tstatic class InputReader {\\n\\n\t\tprivate InputStream in;\\n\t\tprivate byte[] buffer = new byte[1024];\\n\t\tprivate int curbuf;\\n\t\tprivate int lenbuf;\\n\\n\t\tpublic InputReader(InputStream in) {\\n\t\t\tthis.in = in;\\n\t\t\tthis.curbuf = this.lenbuf = 0;\\n\t\t}\\n\\n\t\tpublic boolean hasNextByte() {\\n\t\t\tif (curbuf >= lenbuf) {\\n\t\t\t\tcurbuf = 0;\\n\t\t\t\ttry {\\n\t\t\t\t\tlenbuf = in.read(buffer);\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\t}\\n\t\t\t\tif (lenbuf <= 0)\\n\t\t\t\t\treturn false;\\n\t\t\t}\\n\t\t\treturn true;\\n\t\t}\\n\\n\t\tprivate int readByte() {\\n\t\t\tif (hasNextByte())\\n\t\t\t\treturn buffer[curbuf++];\\n\t\t\telse\\n\t\t\t\treturn -1;\\n\t\t}\\n\\n\t\tprivate boolean isSpaceChar(int c) {\\n\t\t\treturn !(c >= 33 && c <= 126);\\n\t\t}\\n\\n\t\tprivate void skip() {\\n\t\t\twhile (hasNextByte() && isSpaceChar(buffer[curbuf]))\\n\t\t\t\tcurbuf++;\\n\t\t}\\n\\n\t\tpublic boolean hasNext() {\\n\t\t\tskip();\\n\t\t\treturn hasNextByte();\\n\t\t}\\n\\n\t\tpublic String next() {\\n\t\t\tif (!hasNext())\\n\t\t\t\tthrow new NoSuchElementException();\\n\t\t\tStringBuilder sb = new StringBuilder();\\n\t\t\tint b = readByte();\\n\t\t\twhile (!isSpaceChar(b)) {\\n\t\t\t\tsb.appendCodePoint(b);\\n\t\t\t\tb = readByte();\\n\t\t\t}\\n\t\t\treturn sb.toString();\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\tif (!hasNext())\\n\t\t\t\tthrow new NoSuchElementException();\\n\t\t\tint c = readByte();\\n\t\t\twhile (isSpaceChar(c))\\n\t\t\t\tc = readByte();\\n\t\t\tboolean minus = false;\\n\t\t\tif (c == '-') {\\n\t\t\t\tminus = true;\\n\t\t\t\tc = readByte();\\n\t\t\t}\\n\t\t\tint res = 0;\\n\t\t\tdo {\\n\t\t\t\tif (c < '0' || c > '9')\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\tres = res * 10 + c - '0';\\n\t\t\t\tc = readByte();\\n\t\t\t} while (!isSpaceChar(c));\\n\t\t\treturn (minus) ? -res : res;\\n\t\t}\\n\\n\t\tpublic long nextLong() {\\n\t\t\tif (!hasNext())\\n\t\t\t\tthrow new NoSuchElementException();\\n\t\t\tint c = readByte();\\n\t\t\twhile (isSpaceChar(c))\\n\t\t\t\tc = readByte();\\n\t\t\tboolean minus = false;\\n\t\t\tif (c == '-') {\\n\t\t\t\tminus = true;\\n\t\t\t\tc = readByte();\\n\t\t\t}\\n\t\t\tlong res = 0;\\n\t\t\tdo {\\n\t\t\t\tif (c < '0' || c > '9')\\n\t\t\t\t\tthrow new InputMismatchException();\\n\t\t\t\tres = res * 10 + c - '0';\\n\t\t\t\tc = readByte();\\n\t\t\t} while (!isSpaceChar(c));\\n\t\t\treturn (minus) ? -res : res;\\n\t\t}\\n\\n\t\tpublic double nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tpublic int[] nextIntArray(int n) {\\n\t\t\tint[] a = new int[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextInt();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic long[] nextLongArray(int n) {\\n\t\t\tlong[] a = new long[n];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\ta[i] = nextLong();\\n\t\t\treturn a;\\n\t\t}\\n\\n\t\tpublic char[][] nextCharMap(int n, int m) {\\n\t\t\tchar[][] map = new char[n][m];\\n\t\t\tfor (int i = 0; i < n; i++)\\n\t\t\t\tmap[i] = next().toCharArray();\\n\t\t\treturn map;\\n\t\t}\\n\t}\\n\\n\tstatic void tr(Object... o) {\\n\t\tout.println(Arrays.deepToString(o));\\n\t}\\n}", "target": "32", "substitutes": {"out": ["ou", "r", "result", "ex", "outer", "flush", "con", "writer", "error", "co", "oss", "sys", "log", "v", "console", "ch", "exit", "err", "conn", "msg", "OU", "print", "os", "OUT", "write", "client", "auto", "gt", "at", "str", "list", "u", "io", "it", "aos", "Out", "null", "cmd", "news", "screen", "obj", "output", "inv", "ot", "w", "p", "info", "net", "to", "nt", "outs"], "ir": ["rr", "il", "r", "ri", "Ir", "ar", "rect", "mir", "iv", "vr", "imp", "ire", "ier", "ij", "dr", "err", "IR", "iro", "rir", "rin", "irl", "ai", "irc", "mr", "ih", "art", "inter", "fp", "ibr", "lr", "ris", "pir", "io", "irm", "reader", "hr", "it", "pr", "rer", "rl", "ner", "ira", "ior", "rel", "ird", "input", "irs", "yr", "fr", "er", "iter", "rx", "dir", "iri", "rc", "adr"], "n": ["nu", "mn", "num", "name", "d", "unn", "nn", "number", "nr", "l", "N", "gn", "ns", "ne", "nan", "nl", "cn", "sn", "norm", "no", "nb", " N", "na", "k", "nc", "np", "en", "nw", "nm", "ng", "p", "network", "nor", "ln", "net", "nt"], "map": ["set", "block", "addr", "mm", "save", "group", "mask", "pm", "mp", "master", "place", "mb", "parse", "pre", "tree", "module", "app", "cp", "make", "cap", "mg", "process", "per", "where", "dict", "ms", "cache", "scale", "form", "shape", "view", "sm", "load", "match", "mem", "maps", "MAP", "apper", "see", "collect", "mod", "table", "open", "store", "mt", "link", "tab", "ap", "cmp", "use", "man", "add", "pack", "gr", "hash"], "i": ["q", "I", "ix", "ex", "mill", "sql", "phi", "iu", "chain", "ip", "li", "id", "me", "ini", "batch", "ai", "im", "ind", "qi", "us", "u", "io", "j", "it", "ui", "is", "ie", "pi", "g", "ti", "ic", "ci", "sim", "my", "multi", "p", "iq", "y", "ii", "si", "di", "x", "mi"], "s": ["set", "gs", "sql", "l", "rs", "ns", "sv", "strings", "v", "S", "os", "ms", "less", "sw", "ats", "str", "fs", "ls", "sts", "is", "ts", "sq", "cs", "g", "ss", "js", "ins", "ds", "txt", "qs", "p", "ps", "xs", "tes"], "t": ["lt", "r", "pt", "token", "wt", "l", "temp", "tp", "rt", "tree", "v", "tr", "tt", "tf", "tk", "T", "str", "at", "f", "ht", "type", "test", "tc", "it", "tm", "ts", "template", "k", "typ", "mt", "txt", "tab", "ot", "ct", "p", "kt", "y", "te", "th", "dt", "title", "st", "term"], "res": ["r", "reg", "result", "frac", "rev", "sol", "cond", "red", "real", "ref", "ress", "reset", "vec", "Res", "rand", "err", "resp", "sum", "os", "val", "ms", "ret", "req", "init", "mem", "arr", "rex", "results", "rest", "rss", "vol", "comp", "rel", "obj", "des", "RES", "cons", "def", "re", "ps", "pas", "resolution", "pres", "gr", "rem"], "e": ["oe", "ae", "r", "ex", "ee", "d", "el", "E", "ei", "ele", "l", "entry", "element", "error", "h", "eg", "de", "ce", "v", "me", "err", "ne", "pe", "ec", "ge", "le", "fe", "se", "f", "es", "ent", "ue", "eur", "ie", "ve", "ed", "ea", "g", "et", "eu", "w", "er", "p", "re", "te", "ev", "x", "eeee"], "in": ["r", "mm", "ex", "gin", "bin", "inf", "from", "con", "l", "asin", "isin", "rt", "log", "h", "inc", "conn", "ini", "err", "pin", "al", "doc", "inn", "rin", "IN", "file", "arg", "run", "serv", "or", "form", "ind", "In", "init", "exec", "io", "nin", "reader", "it", "null", "din", "is", "stream", "inner", "table", "ic", "ins", "input", "conf", "local", "info", "cin", "er", "p", "iter", "ac", "up", "ain", "query", "mi"], "buffer": ["block", "seek", "result", "paste", "limit", "next", "row", "Buffer", "queue", "temp", "base", "address", "device", "line", "word", "read", "batch", "buff", "database", "bytes", "cache", "buf", "button", "phrase", "index", "variable", "type", "mem", "sequence", "frame", "append", "available", "document", "message", "stream", "template", "text", "data", "length", "table", "memory", "output", "input", "pool", "iter", "char", "binary", "header", "page", "library", "window"], "curbuf": ["curbust", "cauruc", "crobul", "sculpue", "cibruf", "cruffuf", "curbul", "uncrobuf", "cubul", "cuberfg", "cibrus", "curgbuf", " curbuc", "curbbuf", "criburg", "Curbust", "cubuf", "curguf", "ccurbus", "ccuberuf", "uncurbuf", "culpuff", " cruffff", "crobbuf", "coubuf", "curbff", "coubub", "uncurbub", "ccuberurg", " cruffuc", "cruffff", "ccuberfg", "cibruc", "uncrobul", "crufffg", "crobue", "ccurburg", "cribust", "curbus", "coubul", "crobuff", "Cribbuf", "cubue", "cribbuf", "curbub", "Cribue", "cuberurg", " curbus", "coubbuf", " curbff", "curbuc", "uncrobub", "culpuf", "crobuf", "cruffurg", "cribfg", "cibrff", "uncrobbuf", "uncurbul", "curbfg", "Cribust", "caurff", "caurus", "sculpul", "Curbbuf", "curtuff", "crobub", "scurbul", "ccurbfg", "cuberus", "cubust", "cruffus", "Curbuf", "cribue", "curgust", "cruffuc", "cauruf", "curburg", "curtuf", "ccuberus", "cubbuf", "curtue", " cruffuf", "curbuff", "sculpuf", "ccurbuf", "cuberuf", "curtul", "curgue", "cribus", "sculpuff", "Curbue", "scurbuff", "culpue", "uncurbbuf", "scurbue", "cubub", "cribuf", "Cribuf", "curbue", "scurbuf", "culpul", " cruffus"], "lenbuf": ["lnvec", "delbuf", " lenbuffer", "lengthbuf", "lenbr", "lnbuf", "lenbar", "lnuf", " lenbr", "lencb", "lenbuffer", "flbuff", "llvec", "lenqueue", "fluf", "Lencb", "lengthbr", "lenuf", "lnbuffer", "lnqueue", "lenmu", "lengthvec", "lnmu", "delbuff", "llbuff", "llbuf", "llbuffer", "Lenbuf", "deluf", "llbar", "lnbuff", "llcb", "lengthmu", "lenvec", " lenbuff", "lengthbuff", "delbuffer", " lenqueue", "lenbuff", " lenmu", "lengthqueue", " lenbar", "flbuffer", "flbuf", " lencb", "Lenbar", "lengthbuffer", "Lenbuffer", "lnbr"], "c": ["arc", "uc", "lc", "col", "cc", "d", "dec", "con", "cf", "\u00e7", "bc", "v", "cp", "unc", "ce", "dc", "inc", "cr", "cu", "count", "fc", "f", "u", "xc", "tc", "const", "cd", "content", "C", "cont", "cs", "vc", "nc", "k", "abc", "cod", "ci", "ct", "gc", "x", "char", "p", "ac", "pc", "rc", "conv", "ch"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main { \\n    public static void main(String[] args) {\\n    \tScanner sc = new Scanner(System.in);\\n    \tString[] humansAndHeight = sc.nextLine().split(\" \");\\n    \tint humans = Integer.parseInt(humansAndHeight[0]);\\n    \tint height = Integer.parseInt(humansAndHeight[1]);\\n    \tString[] heights = sc.nextLine().split(\" \");\\n    \t\\n    \tint count =0;\\n    \tfor(int i = 0;i<humans;i++) {\\n    \t\tint tmp = Integer.parseInt(heights[i]);\\n    \t\tif(tmp >= height) {\\n    \t\t\tcount++;\\n    \t\t\t\\n    \t\t}\\n    \t}\\n \\n    \tSystem.out.println(count);\\n    \t\\n    \t\\n    }\\n}", "target": "145", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "inc", "dc", "ck", "nl", "ctl", "cle", "sel", "irc", "sch", "sw", "sync", "fc", "tc", "scan", "sq", "cont", "cs", "sci", "nc", "screen", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "humansAndHeight": ["humansandLength", "humanAndBull", "stormsBecauseHe", "akensAndLength", "humansandheight", "humansandreAlpha", "humansAndAlpha", "humansandreHe", "humansBecauseDim", "humanAndheight", "stormsAndAlpha", "humansANDBull", "humanAndLength", "humanandHeight", "humanandLength", "humansAndBull", "humansBecauseAlpha", "humansandreDim", "stormsAndDim", "humanAndHeight", "akensAndHeight", "humansAndLength", "stormsBecauseDim", "akensAndheight", "humansandBull", "humansANDHeight", "stormsAndHe", "humansApartHeight", "humansandHeight", "akensAndInt", "humansAndDim", "humansBecauseHe", "humansANDheight", "humansANDLength", "humansAndInt", "humanandheight", "stormsBecauseHeight", "stormsBecauseAlpha", "humansAndHe", "humansBecauseHeight", "humanandBull", "stormsAndHeight", "humansandreHeight", "humansApartheight", "humansApartInt", "humansAndheight", "humansApartLength"], "humans": ["ruits", "mits", "forums", "pes", "dates", "stories", "mons", "his", " humanity", "cats", "ven", "ittens", "versions", "missions", " Humans", "opens", "users", "people", "doms", "cuts", "units", "ats", "ens", "Americans", "tones", "born", "uploads", "ims", "birds", "thanks", "reddits", "organisms", "nuts", "men", "citizens", "human", "vers", "His", "thumbnails", "inces", "phones", "seven", "yout"], "height": ["num", "tv", "row", "number", "bull", "above", "total", "h", "sh", "top", "rank", "gravity", "width", "hello", "zh", "then", "hold", "view", "buffer", "ows", "history", "bottom", "huge", "html", "length", "density", "Height", "max", "alpha", "y", "size", "volume", "depth", "ty", "window", "hash"], "heights": ["HEights", "Heights", "weubes", "hubes", "leubes", "hights", "HEths", "werics", "leows", "hows", "hrics", "heows", "weows", "heats", "herics", "Heths", "heists", "Heists", "leights", "HEists", "weights", "hists", "heubes", "Heats", "lerics", "HEats", "heths", "hats", "hths"], "count": ["num", "ount", "ctr", "coll", "result", "found", "number", "cond", "total", "amount", "n", "cloud", "cast", "call", "sum", "report", "Count", "ind", "consider", "cache", "list", "index", "hold", "code", "test", "const", "cat", "must", "trace", "find", "nb", "cont", "status", "success", "length", "score", "c", "ct", "counter", "check", "flag", "add", "size", "quiet", "nt"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "ei", "ip", "ji", "li", "asi", "ij", "ini", "batch", "uu", "ski", "ai", "ki", "client", "im", "ind", "qi", "index", "f", "init", "u", "\u0438", "ims", "j", "bi", "it", "slice", "ui", "is", "uri", "ie", "pi", "json", "ti", "ic", "ci", "sim", "my", "e", "multi", "iq", "gu", "info", "oi", "xi", "ii", "si", "di", "x", "mi"], "tmp": ["tv", "mp", "timeout", "temp", "prime", "tp", "total", "perm", "needed", "tt", "nom", "buff", "important", "prop", "cache", "test", "tc", "yy", "prev", "sup", "mint", "nb", "mk", "dust", "np", "emp", "obj", "cmp", "txt", "alpha", "out", "etc", "ctx", "proc", "nt", "checked", "term"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int A = Integer.parseInt(sc.next());\\n        int B = Integer.parseInt(sc.next());\\n        int count = 0;\\n        for(int i=A; i<=B; i++) {\\n            int num = i;\\n            int a = num % 10;\\n            num /= 10;\\n            int b = num % 10;\\n            num /= 10;\\n            int c = num % 10;\\n            num /= 10;\\n            int d = num % 10;\\n            num /= 10;\\n            int e = num;\\n            if(a == e && b == d) count++;\\n        }\\n        System.out.println(count);\\n    } \\n}", "target": "104", "substitutes": {"sc": ["usc", "uc", "lc", "acc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "sv", "bc", "sp", "cr", "inc", "ctl", "cle", "sel", "sch", "sw", "se", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "st"], "A": ["D", "AA", "I", "AU", "E", "CA", "N", "AC", "The", "Ax", "As", "G", "SA", "S", "P", "T", "IA", "By", "R", "V", "M", "This", "AL", "H", "C", "AP", "U", "AB", "An", "AS", "AI", "L", "AR", "K", "X", "AD", "AF", "AT"], "B": ["D", "I", "WB", "BB", "LB", "BI", "BL", "E", "USB", "DB", "N", "VB", "NB", "GB", "G", "T", "MB", "IB", "R", "BR", "BC", "V", "BE", "M", "BY", "BS", "C", "BO", "AB", "Y", "L", "J", "EB", "BA", "FB"], "count": ["ount", "ctr", "coll", "result", "acc", "found", "number", "cond", "total", "n", "summary", "cast", "call", "sum", "report", "val", "Count", "cache", "ind", "list", "index", "code", "match", "test", "trace", "find", "no", "nb", "cont", "status", "success", "length", "done", "max", "ct", "counter", "check", "t", "last", "add", "flag", "size", "nt"], "i": ["I", "ix", "phi", "gi", "hi", "iu", "number", "l", "ip", "li", "o", "id", "n", "v", "m", "ij", "ini", "ai", "ki", "mu", "im", "ind", "qi", "index", "u", "z", "j", "bi", "it", "no", "is", "ui", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "t", "integer", "p", "y", "xi", "ii", "si", "span", "di", "x", "mi"], "num": ["snap", "number", "NUM", "n", "nom", "du", "str", "f", "on", "na", "cmp", "ot", "th", "proc", "x", "next", "nu", "temp", "o", "zero", "id", "alph", "comm", "form", "um", "no", "rest", "Num", "txt", "bo", "uni", "reason", "conv", "rem", "result", "inc", "value", "val", "cache", "nb", "nm", "out", "p", "den", "name", "mm", "tim", "cal", "dec", "total", "m", "msg", "sum", "cu", "enc", "mon", "index", "orig", "div", "cum", "np", "en", "mult", "multi", "t", "nam", "nt"], "a": ["ae", "r", "ca", "ar", "l", "oa", "o", "n", "m", "v", "aa", "da", "sa", "al", "ai", "at", "f", "ia", "u", "an", "ga", "ao", "ab", "ea", "ba", "na", "ma", "t", "er", "p", "ac", "ana", "au", "va", "am"], "b": ["r", "sb", "ob", "l", "o", "h", "bc", "n", "v", "db", "bs", "bp", "or", "f", "eb", "fb", "z", "j", "bi", "ib", "nb", "ab", "g", "ba", "p", "bb", "cb", "be", "y", "rb"], "c": ["ae", "r", "ca", "cc", "ee", "l", "bc", "v", "n", "ad", "dc", "ec", "f", "u", "z", "cd", "C", "g", "cm", "ci", "ct", "p", "ac", "cf"], "d": ["dat", "D", "r", "dm", "l", "dd", "de", "id", "v", "m", "ad", "da", "db", "dc", "n", "f", "u", "z", "j", "ed", "g", "ds", "w", "t", "nd", "p", "s", "digit", "di", "x"], "e": ["ae", "r", "end", "ee", "E", "l", "o", "de", "n", "v", "m", "me", "pe", "ec", "le", "ef", "se", "f", "es", "u", "an", "z", "ed", "ie", "ea", "g", "et", "en", "t", "er", "p", "y", "be", "ev", "x"]}}
{"code": "import java.util.*;\\nimport java.text.*;\\n/*\\nMain class for AOJ where there is no input.\\n*/\\npublic class Main{\\n   public static void main(String[] args){\\n      Scanner sc = new Scanner(System.in);\\n      String str;\\n      String[] arr;\\n      \\n      int row;\\n      int column;\\n      \\n      int[][] a;\\n      int[] sum_r;\\n      int[] sum_c;\\n      int grandTotal = 0;\\n      \\n      //read column and row\\n      str = sc.nextLine();\\n      arr = str.split(\" \");\\n      \\n      row = Integer.parseInt(arr[0]);\\n      column = Integer.parseInt(arr[1]);\\n      \\n      a = new int[row][column];\\n      sum_r = new int[row];\\n      sum_c = new int[column];\\n      \\n      //read the table\\n      for(int i = 0; i < row; i ++){\\n         str = sc.nextLine();\\n         arr = str.split(\" \");\\n         for(int j = 0; j < column; j ++){\\n            a[i][j] = Integer.parseInt(arr[j]);\\n            sum_r[i] += a[i][j];\\n            sum_c[j] += a[i][j];\\n            grandTotal += a[i][j];\\n            \\n         }\\n      }\\n      \\n      //check\\n      for(int i = 0; i < row; i ++){\\n         for(int j = 0; j < column; j ++){\\n            System.out.print(a[i][j] + \" \");\\n         }\\n         System.out.print(sum_r[i]);\\n         System.out.println();\\n      }\\n      \\n      for(int i = 0; i < column; i++){\\n         System.out.print(sum_c[i] + \" \");\\n      }\\n      System.out.println(grandTotal);\\n      \\n      \\n      \\n   }//main\\n}//class", "target": "23", "substitutes": {"sc": ["Sys", "sb", " SC", "ser", "sys", "Scan", "sv", "sp", " scr", " sk", "sel", "sw", "res", "scan", "sq", " Sc", "cs", "ss", "c", "txt", "Sc", "SC", "rc", "si", "ch", " sp"], "str": ["br", "set", "r", "name", "STR", " wr", "ar", "sys", "sp", "tr", " scr", " gr", " tr", "St", " cur", " st", "j", "Str", "obj", " Str", "txt", "char", "ch", " sp", "st"], "arr": ["br", "dat", "coll", "ray", "cur", "ar", "array", "vals", "sys", "dr", "tr", "err", "bl", "seq", "attr", "ars", "buf", "list", "par", "aaa", "obj", "txt", "fr", "bar", "res", "gr", "map"], "row": ["block", "num", "r", "col", "group", "key", "loc", "entry", "rid", "tr", "rank", "item", "cell", "family", "ow", "index", "ry", "ows", "frame", "order", "record", "page", "Row", "rc", "rows", "month", "line"], "column": ["offset", "col", "group", "character", "margin", "number", "value", "Column", "item", "cell", "width", "pointer", "scroll", "field", "condition", "pattern", "property", "channel", "c", "output", "char", "command", "page", "cycle", "size", "span", "line", "window"], "a": ["r", "ca", "d", "ax", "n", "m", "aa", "sa", "A", "b", "at", "an", "ao", "i", "area", "ba", "aaa", "c", "alpha", "e", "as", "t", "s", "p", "y", "all", "x", "am"], "sum_r": ["sum_p", "um_r", "um_p", "um_e", "sum_e", "sum_R", "um_R"], "sum_c": ["sum_b", "sum_n", " sum_x", " sum_b", "sum_x", " sum_n"], "grandTotal": ["grandtotal", " grandtotal", " grandDone", " totalTotal", " totaltotal", " totalAll", "totalAll", " totalDone", "grandAll", " grandAll", "totalDone", "totaltotal", "totalTotal", "grandDone"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.io.IOException;\\nimport java.util.NoSuchElementException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        CSumOfGcdOfTuplesEasy solver = new CSumOfGcdOfTuplesEasy();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CSumOfGcdOfTuplesEasy {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            int n = in.nextInt();\\n            int total = 0;\\n            for (int i = 1; i <= n; i++) {\\n                for (int j = 1; j <= n; j++) {\\n                    for (int k = 1; k <= n; k++) {\\n                        int[] array = {i, j, k};\\n                        total += gcd(array);\\n                    }\\n\\n                }\\n\\n            }\\n\\n            out.println(total);\\n        }\\n\\n        static int gcd(int a, int b) {\\n            if (a == 0)\\n                return b;\\n            return gcd(b % a, a);\\n        }\\n\\n        static int gcd(int[] array) {\\n            int result = array[0];\\n            for (int i = 1; i < 3; i++)\\n                result = gcd(array[i], result);\\n\\n            return result;\\n        }\\n\\n    }\\n\\n    static class Scanner {\\n        private final InputStream in;\\n        private final byte[] buffer;\\n        private int ptr;\\n        private int buflen;\\n\\n        public Scanner(InputStream in) {\\n            this.in = in;\\n            this.buffer = new byte[1024];\\n            this.ptr = 0;\\n            this.buflen = 0;\\n        }\\n\\n        private boolean hasNextByte() {\\n            if (ptr < buflen) return true;\\n            else {\\n                ptr = 0;\\n                try {\\n                    buflen = in.read(buffer);\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n                if (buflen <= 0) return false;\\n            }\\n            return true;\\n        }\\n\\n        private byte readByte() {\\n            if (hasNextByte()) return buffer[ptr++];\\n            return -1;\\n        }\\n\\n        private boolean isPrintableChar(byte c) {\\n            return '!' <= c && c <= '~';\\n        }\\n\\n        private void skipUnprintable() {\\n            while (hasNextByte() && !isPrintableChar(buffer[ptr])) {\\n                ptr++;\\n            }\\n        }\\n\\n        public boolean hasNext() {\\n            skipUnprintable();\\n            return hasNextByte();\\n        }\\n\\n        public int nextInt() {\\n            if (!hasNext()) throw new NoSuchElementException();\\n            int n = 0;\\n            boolean minus = false;\\n            byte b = readByte();\\n            if (b == '-') {\\n                minus = true;\\n                b = readByte();\\n            }\\n            if (b < '0' || '9' < b) throw new NumberFormatException();\\n            while (true) {\\n                if ('0' <= b && b <= '9') {\\n                    n *= 10;\\n                    n += b - '0';\\n                } else if (b == -1 || !isPrintableChar(b)) {\\n                    return minus ? -n : n;\\n                } else {\\n                    throw new NumberFormatException();\\n                }\\n                b = readByte();\\n            }\\n        }\\n\\n    }\\n}\\n\\n", "target": "6", "substitutes": {"inputStream": ["inputSocket", "instream", "inStream", "helloChain", "outputFile", " inputSteam", "inChain", "outputChain", "inputSteam", "sourceSteam", "inputChain", "sourceStream", "inSteam", "helloStream", "inputstream", "outputstream", " inputSocket", "sourceSocket", "helloSteam", "inputFile", "hellostream", "outputSocket", "sourceFile", "outputSteam", " inputFile"], "outputStream": ["inputWriter", "outputPort", "OutputForm", "inputSteam", "OutputStream", "putPort", "responseSteam", "responseStream", " outputSteam", "outStream", "inputPort", "putStream", "outputForm", " outputForm", "OutputWriter", "OutputSteam", "outSteam", "responseWriter", "outPort", "putWriter", "outWriter", "putSteam", "outputWriter", "outputSteam", " outputWriter", "responseForm"], "in": ["r", "gin", "bin", "from", "context", "os", "can", "on", "exec", "ssl", "din", "is", "thin", "ic", "ins", "conf", "old", "e", "as", "ac", "query", "window", "inf", "current", "l", "isin", "o", "h", "id", "conn", "source", "read", "doc", "IN", " IN", "state", "run", "client", "or", "io", "win", "reader", "it", "scan", "stream", "inner", "inside", "w", "local", "mc", "ex", "end", "rt", "inc", "this", "file", "rin", "serv", "ind", "lin", "In", "ner", "input", "ma", "p", "add", "mi", "mm", "con", "m", "ini", "err", "pin", "inn", "get", "at", "init", "null", "ing", "en", "er", "info", "cin", "iter", "t", "up"], "out": ["set", "ou", "name", "ex", "outer", " Out", "flush", "end", "writer", "co", "oss", "log", "o", "rt", "sys", "server", "tmp", "conn", "v", "ch", "err", "this", "print", "OUT", "os", "sum", "report", "OU", "write", "user", "client", "cache", "at", "io", "it", "aos", "Out", "null", "inner", "json", "screen", "table", "obj", "output", "txt", "pool", "w", "gc", "t", "s", "p", "up", "net", "all", "to", "nt", "res", "outs"], "solver": ["resver", "esolver", "resolver", "Solution", " solution", " sver", "soln", "Solve", " sorter", " solve", "resolve", "esorter", "resorter", " soln", "esolution", "solve", "resoln", "solution", "Soln", "sorter", "sver", "esver", "Solver", "resolution"], "testNumber": [" testNo", "testNumbers", "TestNumber", "caseNumber", "testNum", "TestNumbers", "caseNo", "TestNo", "caseNum", "testNo", "caseNumbers", " testNum", " testNumbers", "TestNum"], "n": ["nu", "mn", "name", "d", "nn", "l", "nr", "len", "N", "o", "ns", "m", "v", "nan", "ne", "cn", "yes", "sn", "on", "an", "None", "z", "no", "nb", "na", "np", "nw", "none", "w", "ng", "t", "p", "network", "y", "net", "nt", "non", "names"], "total": ["valid", "empty", "translation", "created", "eta", "otal", "base", "number", "error", "used", "current", "real", "system", "zero", "amount", "summary", "database", "sum", "unknown", "expected", "unique", "scale", "note", "count", "sequence", "shared", "Total", "complete", "no", "full", "available", "seen", "done", "good", "general", "human", "normal", "table", "relative", "t", "average", "serial", "stable", "goal", "net", "all", "checked", "hash"], "i": ["I", "ix", "name", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "ji", "li", "o", "id", "ij", "m", "me", "ini", "v", "ai", "ki", "im", "ind", "qi", "index", "ik", "us", "u", "\u0438", "ims", "bi", "it", "is", "ie", "ui", "pi", "ti", "ic", "ci", "MI", "sim", "cli", "PI", "multi", "iq", "info", "p", "ami", "y", "xi", "ii", "si", "di", "x", "mi"], "j": ["br", "q", "el", "jl", "ji", "jj", "o", "jo", "sp", "ij", "v", "jump", "jas", "by", "ion", "bs", "ne", "ja", "bj", "oj", "job", "u", "z", "it", "pr", "uj", "json", "rel", "js", "aj", "obj", "jp", "J", "bo", "fr", "s", "p", "kj", "y", "jc", "jack", "je", "x", "dj"], "k": ["ke", "work", "wk", "kl", "kan", "ks", "kh", "kr", "dk", "km", "tk", "ck", "ko", "unk", "ak", "kn", "ki", "sch", "ik", "kk", "uk", "ack", "kick", "mk", "ark", "ek", "ku", "sk", "isk", "ph", "K", "kind", "kt", "kj", "ka", "ijk", "kw", "kid", "kg"], "array": ["set", "response", "stage", "ray", "Array", "row", "ar", "chain", "now", "amount", "value", "node", "v", "batch", "pair", "database", "actor", "raw", "this", "section", "band", "form", "shape", "list", "audio", "instance", "variable", "collection", "arr", "range", "sequence", "field", "stack", "object", "share", "test", "grid", "message", "expression", "vector", "area", "data", "order", "table", "record", "answer", "hash", "other", "angle", "air", "ary", "arrow", "binary", "angular", "all", "bar", "archive", "function", "window", "map"], "a": ["another", "ae", "r", "ca", "d", "ar", "l", "o", "ta", "m", "aa", "da", "sa", "al", "A", "at", "f", "ia", "ack", "u", "an", "la", "z", "ao", "ab", "area", "g", "aff", "ba", "na", "aaa", "fa", "e", "alpha", "as", "t", "ma", "p", "ac", "s", "au", "bar", "va", "x", "am"], "b": ["br", "r", "end", "d", "bin", "sb", "l", "number", "h", "bar", "bc", "value", "v", "m", "bf", "bs", "val", "bool", "f", "bd", "u", "fb", "z", "bi", "nb", "ab", "g", "ba", "bis", "e", "w", "t", "p", "bb", "cb", "y", "be", "rb", "B"], "result": ["valid", "response", "r", "description", "true", "mask", "master", "feature", "current", "number", "different", "Result", "real", "zero", "value", "tmp", "v", "relation", "profile", "report", "ret", "correct", "currency", "f", "match", "results", "complete", "trace", "message", "vector", "status", "success", "length", "score", "table", "output", "continue", "integer", "def", "diff", "product", "p", "char", "goal", "res", "function", "term"], "buffer": ["block", "paste", "limit", "row", "bin", "Buffer", "queue", "temp", "base", "address", "device", "value", "context", "read", "batch", "buff", "initial", "cache", "buf", "phrase", "shape", "index", "pointer", "scroll", "mem", "type", "sequence", "stack", "message", "document", "vector", "data", "template", "stream", "length", "screen", "table", "memory", "pool", "iter", "p", "binary", "font", "command", "column", "line", "window"], "ptr": ["br", "addr", "seek", "offset", "pt", "ctr", "address", "tp", "progress", "point", "perm", "ref", "sp", "tmp", "dr", "tr", "Ptr", "pend", "rep", "bp", "inters", "ind", "buf", "inter", "fp", "pos", "pointer", "arr", "prev", "pers", "pr", "ts", "pi", "pad", "rel", "head", "jp", "fr", "iter", "p", "dep", "ctx", "th", "ps", "pc", "depth", "prot", "proc", "pointers", "pert", " pointer"], "buflen": ["buselend", "bucilenum", "bullength", "bucilower", "BuFlen", "buglens", "BUllength", "BuFline", "buFLength", "bublenn", "buslens", "buplower", "bufallenum", "buflenum", " buplun", " buflower", "buseline", "buslen", "bullEN", "buFLen", " buplens", "buflist", " buplower", "buvlist", "bublenum", "BuFlist", " buflens", "buflower", "buselen", "buvlenn", "buplength", " buflength", "uuflenn", "buflun", "Buflist", "buselist", "buplenum", " buflun", "buplen", "buslength", "buvlenum", "bublen", " buplength", "bullun", "buFlend", "Buflen", "bucilen", "buvline", "Bufline", "buglen", " buplenum", "buFlist", "uuflenum", "uuvlen", "buFlen", "buflEN", "uuflen", "bullens", "buvlen", "Buflend", "bublEN", "buglun", "BUflen", "uuvlenum", "bucilength", "bufallen", "BUllen", "buplEN", "BUflength", "uuflEN", "bufline", " buplen", "buflenn", "buFLenum", "buplun", "buslEN", "BUflEN", "bullen", "buflend", "uuvlenn", "bufallenn", "buFline", "buglength", "buvlEN", "BUllens", "buFLower", "BuFlend", "bufallEN", "buvlend", "buplens", "buflength", " buflenum", "uuvlEN", "buflens", "BUflens", "BUllEN"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        int sum = 0;\\n        int temp = 0;\\n        int i = 0;\\n        int e = 0;\\n        //\u4f59\u308a\u304c\u4e00\u756a\u5c0f\u3055\u3044\u3082\u306e\u3092\u6700\u5f8c\u306b\u6ce8\u6587\u3059\u308b\u3002\\n        int r[] = new int[5];\\n        int s = 11;\\n        int t = 11;\\n        for(int k = 0; k<5; k++){\\n          r[k] = sc.nextInt();\\n        }\\n\\n        for(i = 0; i < 5; i++){\\n          s = Math.min(t,r[i]%10);\\n          if(t != s && r[i]%10 !=0){\\n          e = i;\\n          t = s; \\n          }\\n        }\\n        temp = r[4];\\n        r[4] = r[e];\\n        r[e] = temp;\\n\\n        for(int j = 0; j < 4; j++){\\n          if(r[j] % 10 != 0){\\n            sum = 10 - (r[j] % 10) + r[j] +sum;\\n          }else{\\n            sum += r[j];\\n          }\\n        }\\n        sum += r[4];\\n        System.out.println(sum);\\n    }\\n}\\n", "target": "63", "substitutes": {"sc": [" unsc", "mp", "sb", " SC", " ss", "ser", "sys", "sv", "sp", " scr", "sa", " sk", "src", "sw", "res", " sa", "scan", " Sc", "cs", "c", "Sc", "gc", "SC", "rc", "si", "proc", "ch", " sp"], "sum": ["Sum", "num", "acc", "cal", "cur", "un", "ums", "total", "sa", "su", "cap", "md", "mean", "count", "us", "mem", "dev", "um", "cum", "mod", "sim", "max", "diff", "sam", "add", "size", "hash"], "temp": ["acc", "ex", "current", "real", "total", "put", "tmp", "race", "db", "dc", "err", "cap", "level", "cache", "count", "ree", "load", "const", "mem", "est", "mod", "aj", "diff", "ac", "add", "ps", "st"], "i": ["I", "iu", "l", "ip", "o", "li", "v", "m", "ij", "ini", "im", "f", "ia", "u", "io", "z", "j", "it", "is", "pi", "info", "p", "ii", "si", "di", "mi"], "e": ["oe", "ae", "r", "ee", "E", "ei", "ele", "ep", "eg", "m", "me", "pe", "ec", "le", "ef", "se", "f", "eb", "es", "ie", "ea", "c", "er", "t", "ate", "te", "ev", "term"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\t\\n\tpublic static void main(String[] args) throws IOException {\\n\t\tInputReader in = new InputReader(System.in);\\n\t    int a = in.readInt();\\n\t    int b = in.readInt(); \\n\t    int c = in.readInt();\\n\t    int x = in.readInt();\\n\t    \\n\t    System.out.println(a+b+c+Math.max(Math.max(a, b), c) * ((1<<x) -1));\\n\t}\\n}\\nclass InputReader {\\n\\n\tprivate InputStream stream;\\n\tprivate byte[] buf = new byte[1024];\\n\tprivate int curChar;\\n\tprivate int numChars;\\n\tprivate SpaceCharFilter filter;\\n\\n\tpublic InputReader(InputStream stream) {\\n\t\tthis.stream = stream;\\n\t}\\n\\n\tpublic int read() {\\n\t\tif (numChars == -1)\\n\t\t\tthrow new InputMismatchException();\\n\t\tif (curChar >= numChars) {\\n\t\t\tcurChar = 0;\\n\t\t\ttry {\\n\t\t\t\tnumChars = stream.read(buf);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tif (numChars <= 0)\\n\t\t\t\treturn -1;\\n\t\t}\\n\t\treturn buf[curChar++];\\n\t}\\n\\n\tpublic int readInt() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tint res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9')\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\\n\tpublic String readString() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c))\\n\t\t\tc = read();\\n\t\tStringBuilder res = new StringBuilder();\\n\t\tdo {\\n\t\t\tres.appendCodePoint(c);\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res.toString();\\n\t}\\n\\n\tpublic long readLong() {\\n\t\tint c = read();\\n\t\twhile (isSpaceChar(c)) {\\n\t\t\tc = read();\\n\t\t}\\n\t\tint sgn = 1;\\n\t\tif (c == '-') {\\n\t\t\tsgn = -1;\\n\t\t\tc = read();\\n\t\t}\\n\t\tlong res = 0;\\n\t\tdo {\\n\t\t\tif (c < '0' || c > '9') {\\n\t\t\t\tthrow new InputMismatchException();\\n\t\t\t}\\n\t\t\tres *= 10;\\n\t\t\tres += c - '0';\\n\t\t\tc = read();\\n\t\t} while (!isSpaceChar(c));\\n\t\treturn res * sgn;\\n\t}\\n\t\\n\tpublic boolean isSpaceChar(int c) {\\n\t\tif (filter != null)\\n\t\t\treturn filter.isSpaceChar(c);\\n\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n\t}\\n\\n\tpublic String next() {\\n\t\treturn readString();\\n\t}\\n\\n\tpublic interface SpaceCharFilter {\\n\t\tpublic boolean isSpaceChar(int ch);\\n\t}\\n}\\n", "target": "201", "substitutes": {"in": ["r", "mm", "ex", "bin", "inf", "from", "con", "l", " din", "log", "inc", "n", "ini", "err", "read", "raw", "doc", "inn", "file", "IN", "get", "state", "run", "serv", "ind", "form", "at", "f", "on", "In", "init", "ssl", "io", "reader", "it", "scan", "null", "din", "is", "i", "inner", "cm", "ic", "en", "ins", "input", "conf", "out", "as", "er", "cin", "info", "ac", "add", "all", "readable"], "a": ["ae", "va", "r", "ca", "ava", "d", "ar", "aq", "oa", "ta", "aa", "sta", "sa", "al", "ai", "A", "at", "ia", "an", "la", "ga", "ao", "ab", "i", "ea", "area", "ba", "aaa", "aj", "e", "ma", "t", "as", "p", "ac", "au", "bar", "ata", "am"], "b": ["r", "d", "wb", "sb", "ob", "l", "bc", "n", "v", "gb", "db", "bl", "bs", "ub", "f", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bg", "bis", "e", "bb", "cb", "y", "be", "rb", "B"], "c": ["arc", "uc", "r", "d", "cr", "bc", "n", "cor", "cap", "cy", "can", "f", "cm", "cod", "ic", "com", "conf", "cmp", "e", "ac", "y", "rc", "pc", "cf", "col", "cc", "cur", "l", "chain", "co", "h", "ce", "unc", "count", "z", "cs", "g", "nc", "k", "ci", "cb", "mc", "conv", "lc", "cut", "anc", "ar", "cache", "u", "cd", "sc", "i", "cont", "abc", "ct", "etc", "p", "ca", "dec", "con", "cos", "cl", "v", "cp", "m", "dc", "ec", "cu", "enc", "fc", "xc", "tc", "C", "vc", "gc", "t", "cin"], "x": ["ix", "ex", "wx", "xb", "ax", "ox", "v", "n", "xf", "xy", "tx", "xe", "xx", "px", "xc", "z", "xa", "j", "xes", "dx", "i", "mx", "max", "ct", "w", "X", "t", "rx", "ux", "ctx", "y", "xi", "xs", "xp", "fx"], "stream": ["wrapper", "st", "row", "chain", "http", "h", "system", "engine", "console", "resource", "context", "read", "speed", "ream", "source", "path", "handler", "state", "spec", "src", "client", "or", "sw", "form", "cache", "view", "sync", "sl", "instance", "buffer", "ssl", "reader", "stack", "pipe", "loop", "sc", "content", "cont", "data", "each", "screen", "channel", "mode", "table", "open", "Stream", "input", "iterator", "port", "sample", "pool", "out", "socket", "iter", "network", "handle", "line", "window"], "buf": ["br", "block", "Buff", "cur", "wb", "bin", "Buffer", "queue", "temp", "var", "uf", "mb", "bar", "vec", "tmp", "bh", "db", "err", "cap", "alph", "batch", "bl", "buff", "seq", "bs", "msg", "bytes", "mu", "img", "bag", "buffer", "norm", "mem", "arr", "cat", "cv", "pkg", "data", "txt", "mates", "cb", "box", "rb"], "curChar": ["surChar", "contCh", "ctrCharacter", "conChar", " curCh", " curByte", "CurPos", "contCol", "conCharacter", "CurChar", "contByte", "curByte", "crChar", " curCol", "curCol", "CurCharacter", "contChar", "Curchar", "surByte", "CurCh", "conchar", "ctrChar", "CurByte", "surCharacter", "CurCol", "conByte", " curCharacter", "curchar", "ctrchar", "surCh", "curPos", "ctrByte", "curCh", "crByte", "crCol", "curCharacter", " curPos", "crPos"], "numChars": ["numChannels", "numChaps", "numMessats", "numMessars", "nChars", " numCars", " numchars", "numCHards", "numchARS", "nChannels", "numChores", "numchrs", " numchrs", "numVARS", " numChrs", "numCaps", "numChoats", "numCHars", "numCars", "numChARS", "numCHcs", "numCARS", "nchars", "NUMChoats", "numMessarters", "numBuffars", "nChrs", "numVars", "nchannels", "numchers", "numColars", "numColarts", "NUMChras", "NUMChoras", "NUMChats", "numChoras", "numCharars", "numChats", "numEnters", "numchcs", "nchrs", "numClats", "numClars", "numChoarters", "nChers", "numMessras", "NUMCharters", " numChores", "numChararts", "numCards", " numCARS", "numClras", "numchannels", "numChcs", " numChaps", "numEntannels", "NUMChars", "numChrs", "numChards", "numColrs", "numcharts", " numChards", "NUMChoarters", "numchars", "numCharrs", "numCharts", "numChers", "numCcs", "numCharters", " numCharts", "numBuffers", " numChcs", " numCcs", "NUMChoars", "numVores", "numClarters", "numCHARS", "numVaps", "numChoars", "numBuffannels", "numChras", "numBuffrs", " numcharts", "numCores", "numEntrs", " numCards", "numchards", " numChARS", "numEntars", "nchers"], "filter": ["mask", "bin", "chain", "fil", "ref", "update", "Filter", "handler", "map", "list", "f", "fac", "match", "func", "test", "accept", "fn", "channel", "table", " filters", "hash", "pool", "check", "cb", "conv", "cf", "config", "term"], "sgn": ["tsgn", " sign", "sg", "psign", " sigma", "gsg", "sagn", "sig", "sign", "nsign", "nsigma", " sg", "gsgn", "nsig", "psig", "gsign", "sng", "psigma", " sagn", "sigma", "psgn", "tsig", "tsng", "tsign", " sng", " sig", "gsagn", "nsgn"], "res": ["r", "reg", "result", "col", "rat", "details", "vals", "rev", "rs", "cond", "red", "sys", "vec", "ress", "reset", "usr", "resource", "Res", "rand", "ber", "ref", "rez", "resp", "ro", "ms", "val", "ret", "right", "us", "req", "resh", "arr", "rex", "j", "results", "pers", " Res", "div", "mk", "rest", "rss", "vol", "rel", "js", "obj", "des", "RES", "out", "cons", "def", "exp", "re", "ps", "pas", "resolution", "conv", "pres", "gr", "rem", "expr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n, d, x, y, num = 0;\\n        n = sc.nextInt();\\n        d = sc.nextInt();\\n        for (int i = 0; i < n; i++) {\\n            x = sc.nextInt();\\n            y = sc.nextInt();\\n            double dist = Math.sqrt(Math.pow(x, 2)+Math.pow(y, 2));\\n            if(dist <= d) ++num;\\n        }\\n        System.out.println(num);\\n        sc.close();\\n    }\\n}\\n", "target": "42", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", "sec", "cgi", "cl", "sys", "system", "sv", "sp", "bc", "cr", "inc", "ck", "nl", "ctl", "ko", "capt", "irc", "sch", "cu", "sw", "sync", "fc", "tc", "ctrl", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "syn", "osc", "cmp", "Sc", "gc", "ng", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "st"], "n": ["nu", "mn", "nn", "l", "un", "nr", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ren", "sn", "on", "j", "no", "nb", "na", "fn", "nc", "np", "en", "c", "nm", "local", "ng", "t", "p", "ln", "net", "nt"], "d": ["dat", "D", "pd", "dim", "df", "mind", "l", "dd", "fd", "dos", "did", "de", "m", "da", "dr", "sd", "dn", "distance", "dom", "du", "md", "dict", "dig", "f", "dy", "j", "dra", "cd", "div", "data", "c", "ds", "debug", "des", "t", "nd", "p", "digit", "dir", "dis", "den", "dt", "di", "del"], "x": ["ix", "ex", "wx", "ax", "ox", "l", "ip", "xml", "yx", "xf", "cel", "lat", "xy", "tx", "act", "im", "xe", "xx", "index", "f", "image", "px", "on", "xc", "xa", "hex", "xes", "dx", "xxxx", "xt", "mx", "xxx", "e", "X", "rx", "ux", "xi", "xs", "xp", "fx"], "y": ["ye", "hey", "sy", "story", "ym", "iy", "sys", "py", "gy", "ay", "ey", "uy", "cy", "fy", "xy", "ys", "ya", "yer", "b", "ry", "yy", "ies", "z", "j", "yt", "oy", "axy", "sky", "Y", "yi", "my", "yr", "ny", "iley", "ty", "ery", "yo"], "num": ["valid", "result", "snap", "cal", "tim", "row", "nn", "con", "mind", "number", "un", "NUM", "draw", "temp", "total", "zero", "generated", "nom", "msg", "alph", "common", "sum", "mark", "mon", "index", "count", "recent", "gener", "um", "scan", "no", "nb", "success", "cum", "np", "good", "Num", "sim", "nm", "max", "multi", "local", "iq", "check", "iter", "die", "add", "th", "den"], "i": ["set", "q", "I", "ix", "ex", "sql", "phi", "gi", "hi", "ip", "li", "id", "v", "m", "me", "ini", "batch", "uu", "print", "ai", "ms", "im", "ind", "qi", "b", "us", "init", "io", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "sim", "my", "e", "multi", "t", "iq", "info", "ii", "xi", "si", "di", "mi"], "dist": ["deg", "driver", "dot", "df", "shift", "l", "dd", "dest", "err", "dc", "distance", "md", "sum", "ind", "ist", "near", "radius", "delay", "dev", "div", "sq", "Dist", "density", "rel", "ds", "des", "pdf", "diff", "exp", "det", "p", "dir", "dis", "nt", "di", "del", "desc", "Distance"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.FileNotFoundException;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\n/*\\n public class abc084b {\\n\\n }\\n\\n */\\npublic class Main {\\n  public void solve() throws FileNotFoundException {\\n    InputStream inputStream = System.in;\\n\\n    InputHelper in = new InputHelper(inputStream);\\n\\n    // actual solution\\n    int a = in.readInteger();\\n    int b = in.readInteger();\\n\\n    String s = in.read();\\n\\n    if (s.charAt(a) != '-') {\\n      System.out.println(\"No\");\\n      return;\\n    }\\n\\n    for (int i = 0; i < a; i++) {\\n      if (!Character.isDigit(s.charAt(i))) {\\n        System.out.println(\"No\");\\n        return;\\n      }\\n    }\\n\\n    for (int i = a + 1; i < a + b + 1; i++) {\\n      if (!Character.isDigit(s.charAt(i))) {\\n        System.out.println(\"No\");\\n        return;\\n      }\\n    }\\n\\n    System.out.println(\"Yes\");\\n    // end here\\n  }\\n\\n  public static void main(String[] args) throws FileNotFoundException {\\n    (new Main()).solve();\\n  }\\n\\n  class InputHelper {\\n    StringTokenizer tokenizer = null;\\n    private BufferedReader bufferedReader;\\n\\n    public InputHelper(InputStream inputStream) {\\n      InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\\n      bufferedReader = new BufferedReader(inputStreamReader, 16384);\\n    }\\n\\n    public String read() {\\n      while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n        try {\\n          String line = bufferedReader.readLine();\\n          if (line == null) {\\n            return null;\\n          }\\n          tokenizer = new StringTokenizer(line);\\n        } catch (IOException e) {\\n          e.printStackTrace();\\n        }\\n      }\\n\\n      return tokenizer.nextToken();\\n    }\\n\\n    public Integer readInteger() {\\n      return Integer.parseInt(read());\\n    }\\n\\n    public Long readLong() {\\n      return Long.parseLong(read());\\n    }\\n  }\\n}\\n", "target": "78", "substitutes": {"inputStream": ["outputStream", " inputSteam", "helloThread", "outputStreamer", "documentFile", "inputSteam", "documentSteam", " inputFile", " inputStreamer", "helloStream", "documentStream", " InputSteam", "outputThread", "inputThread", "inputScreen", "inputStreamer", "helloSteam", "inputFile", "helloStreamer", " inputScreen", "outputSteam", "documentScreen", " InputFile", " InputStream", " inputThread", " InputScreen"], "in": ["gin", "bin", "inf", "con", "temp", " din", "include", "isin", "log", "inc", "n", "m", "ini", "err", "read", "per", "rin", "IN", " IN", "user", "pid", "In", "nin", "io", "reader", "it", "din", "is", "i", "thin", "stream", "inner", "k", "c", "ins", "input", "std", "out", "as", "info", "cin", "p", "inas", " In", "readable"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String [] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int a = scanner.nextInt();\\n        int b = scanner.nextInt();\\n        int c = scanner.nextInt();\\n \\n        final boolean poor = (a == b && a != c) ||\\n                (a == c && a != b) || (b == c && b != a);\\n        if (poor) {\\n            System.out.println(\"Yes\");\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n    }\\n}", "target": "117", "substitutes": {"scanner": ["canener", "Scanator", " scanener", "Scanter", "scanener", "Scanener", "Scaner", "canator", "scanter", "scanator", "canter", " scanter", " scanator", "Scanner", "canner", "scaner", " scaner", "caner"], "a": ["ae", "r", "ca", "acc", "ar", "aq", "l", "oa", "abs", "h", "o", "ta", "admin", "m", "aa", "da", "app", "sa", "al", "ai", "isa", "act", "A", "at", "f", "ia", "an", "la", "ga", "ao", "j", "ab", "i", "ea", "area", "apa", "aff", "g", "ba", "aaa", "ach", "na", "aj", "obj", "alpha", "e", "ma", "as", "t", "p", "ac", "era", "au", "aux", "ra", "am"], "b": ["br", "r", "wb", "sb", "ob", "l", "h", "o", "bc", "v", "n", "m", "db", "bl", "bs", "bp", "ub", "back", "eb", "f", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bg", "bt", "bis", "e", "t", "p", "bb", "cb", "be", "y", "rb", "B"], "c": ["q", "r", "ca", "lc", "cc", "d", "l", "co", "h", "o", "cf", "bc", "cr", "n", "v", "ce", "m", "cp", "dc", "cu", "f", "fc", "u", "tc", "z", "cv", "cd", "sc", "C", "cs", "g", "cm", "ci", "e", "ct", "gc", "t", "p", "ac", "cb", "y", "be", "rc", "ch"], "poor": ["nice", "happy", "low", " worse", " deficient", "little", "better", "bad", " excellent", " flawed", " perfect", "fine", "important", "broken", " hungry", " poorly", " reasonable", "well", " boring", " bad", "dirty", "cold", "negative", " horrible", " better", "rice", "Poor", " filthy", "worst", " disappointing", "cellent", " dismal", " faulty", "sufficient", "ardy", "brown", " poorer", "wrong", "good", " degraded", " evils", " poorest", "weak", " Poor", " good", "perfect", "healthy", "tight", "fresh", "easy"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    StringBuilder output = new StringBuilder();\\n    String crlf = System.getProperty(\"line.separator\");\\n    int row, col, input;\\n    int sumRow, sumMat;\\n    int[] sumCol;\\n    \\n    row = in.nextInt();\\n    col = in.nextInt();\\n    sumCol = new int[col];\\n    sumMat = 0;\\n    \\n    for (int i = 0; i < row; i++) {\\n      sumRow = 0;\\n      for (int j = 0; j < col; j++) {\\n        input =in.nextInt();\\n        sumRow += input;\\n        sumCol[j] += input;\\n        output.append(input).append(\" \");\\n      }\\n      output.append(sumRow).append(crlf);\\n    }\\n    for (int k = 0; k < col; k++) {\\n      output.append(sumCol[k]).append(\" \");\\n      sumMat += sumCol[k];\\n    }\\n    output.append(sumMat);\\n    System.out.println(output.toString());\\n  }\\n}", "target": "23", "substitutes": {"in": ["q", "r", "mm", "bin", "inf", "from", "con", "ar", "l", "per", " din", "isin", "log", "rt", "inc", "n", "ini", "err", "source", "by", "doc", "vin", "inn", "file", "IN", "ai", "get", "raw", "run", "user", "ind", "at", "a", "In", "init", "io", "reader", "it", "scan", "din", "is", "thin", "inner", "en", "ins", "std", "conf", "out", "as", "cin", "info", "iter", "ln", "all", "Input", "line"], "output": ["response", "ou", "result", "outer", "ilo", "production", "position", "current", "put", "layer", "o", "Output", "config", "console", "exit", "generated", "export", "summary", "web", "batch", "update", "print", "get", "operation", "write", "client", "hidden", "auto", "entity", "echo", "sort", "buffer", "collection", "component", "message", "PUT", "document", "success", "connection", "four", "table", "display", "format", "out", "pretty", "blue", "network", "command", "region", "quiet", "all", "second", "column", "next"], "crlf": ["crylv", "cmdl", "cryld", "crlv", " crld", "Crdl", "crdl", "Crld", "crfol", "cmlc", " crlc", "cryfol", " crfol", "Crlc", "Crfol", " crdl", "crylf", "crld", "crlc", "Crlf", " crlv", "cmlf", "Crlv", "cmld"], "row": ["round", "r", "post", "mm", "ri", "rect", "ob", "mb", "nr", "rs", "co", "rid", "dr", "tr", "by", "batch", "rank", "raw", "ro", "cell", "hour", "run", "ow", "root", "form", "ru", "ry", "rot", "ows", "range", "frame", "our", "um", "no", "order", "length", "mod", "record", "max", "bo", "w", "out", "roll", "mount", "re", "Row", "rc", "rows", "month", "week", "x"], "col": ["br", "num", "il", "block", "chrom", "pt", "coll", "cal", "cut", "ctr", "fat", "con", "dim", "co", "cond", "len", "cl", "draw", "cp", "cor", "city", "day", "Col", "cell", "val", "prop", "serv", "act", "mon", "form", "count", "fc", "rot", "pos", "cul", "win", "COL", "cat", "cmd", "div", "cs", "length", "cm", "table", "c", "obj", "port", "max", "ct", "out", "char", "dir", "ctx", "crit", "box", "pc", "size", "nt", "column", "ch", "rem"], "input": ["q", "ix", "query", "through", "parse", "feed", "error", "ip", "xml", "entry", "element", "inc", "minute", "focus", "context", "source", "read", "raw", "lat", "get", "hello", "unknown", "act", "hidden", "form", "ind", "select", "img", "index", "image", "str", "init", "buffer", "field", "view", "history", "it", "cmd", "expression", "partial", "text", "data", "inner", "json", "list", "join", "unsigned", "local", "integer", "char", "kind", "add", "Input", "initial"], "sumRow": ["umRes", "alphaRow", "SumR", "numRow", " sumCor", "meanMat", "simMat", "alphaCol", "meanrow", "simrow", "SumRes", "sumRoll", " sumFrame", "numRoll", "totalrow", "satrow", "sumSet", "meanRow", "totalCol", "umR", " sumRoll", " sumRes", "umRow", " sumR", "sumFrame", "sumRes", "alphaMat", "alpharow", "sumrow", "numrow", "umCor", "meanFrame", "simFrame", "simRow", " sumSet", "totalMat", "satRow", " sumrow", "sumR", "satRoll", "satSet", "totalRow", "SumCor", "numSet", "sumCor", "SumRow"], "sumMat": ["totalmat", "ummat", " summat", " sumMut", "SumRow", "totalMet", "cosRow", "zeroMut", "zeroRow", "sumMult", "SumMult", "summat", "cosMut", " sumRat", "cosmat", "sumMet", "umCol", "zeroMat", "SumCol", "umRat", "umMat", "cosMat", "totalCol", "zeromat", "SumMat", "umRow", " sumMet", "umMult", "totalMat", " sumMult", "sumRat", "totalRat", "umMet", "sumMut"], "sumCol": ["umRes", " sumcol", "numRow", " sumColumn", " sumCor", "seecol", "sumColumn", "Sumcol", "SumRes", "numAct", "umCol", "numCol", "SumCol", "umMat", "numcol", "sumCor", "sumcol", "samMat", "SumMat", " sumRes", "umAct", "sumRes", " sumAct", "numCor", "umCor", "samCol", "numColumn", "samRow", "seeColumn", "samcol", "sumAct", "seeMat", "seeCol", "umcol", "numMat"], "i": ["q", "I", "ix", "ri", "phi", "zi", "iu", "ar", "ip", "li", "id", "v", "ij", "ini", "this", "ai", "ki", "ret", "im", "ind", "art", "qi", "at", "ia", "us", "init", "ims", "bi", "it", "aci", "ui", "ie", "pi", "g", "ti", "ci", "sim", "multi", "info", "iq", "y", "ii", "xi", "si", "di", "x", "mi"], "j": ["br", "q", "jac", "pt", "key", "att", "el", "jl", "ji", "jj", "jo", "sp", "v", "ij", "err", "jump", "jas", "by", "ja", "im", "bj", "b", "oj", "us", "job", "z", "it", "pr", "uj", "g", "json", "js", "obj", "aj", "jp", "ph", "J", "fr", "other", "kj", "y", "jc", "dj"], "k": ["q", "ke", "ask", "key", "wk", "ikk", "kl", "kan", "ks", "kh", "kr", "dk", "km", "tk", "ck", "ko", "unk", "ak", "kn", "ik", "uk", "kk", "kat", "mk", "ark", "g", "ok", "ek", "sk", "ku", "isk", "ph", "K", "kind", "kt", "kj", "ijk", "ka", "kit", "kw", "kid", "kg"]}}
{"code": "import java.util.*;\\nimport java.math.*;\\nimport java.io.*;\\n\\n\\npublic class Main {\\n    static Scanner sc = new Scanner(System.in);\\n    public static void main(String args[]) {\\n        int n = sc.nextInt();\\n        int[] p = new int[n];\\n        for(int i = 0; i < n; i++) p[i] = sc.nextInt();\\n        boolean ans = false;\\n        boolean ok = true;\\n        for(int i = 0; i < n; i++) {\\n            for(int j = 0; j < n; j++) {\\n                int tmp = p[i];\\n                p[i] = p[j];\\n                p[j] = tmp;\\n                ok = true;\\n\\n\\n                for(int k = 0; k < n - 1; k++) {\\n                    if(p[k] >= p[k + 1]) {\\n                        ok = false;\\n                        break;\\n                    }\\n                }\\n                ans |= ok;\\n                p[j] = p[i];\\n                p[i] = tmp;\\n            }\\n        }\\n\\n        System.out.println(ans?\"YES\":\"NO\");\\n\\n    } \\n}", "target": "82", "substitutes": {"sc": ["usc", "sac", "lc", " unsc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "sh", "bc", "sv", "sp", "cr", " scr", "nl", "ec", "ctl", "capt", "sel", "sch", "conv", "sync", "fc", "tc", "sq", " Sc", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "sic", "SC", "mc", "pc", "si", "rc", "ch", " sp", "desc"], "n": ["nu", "mn", "num", "r", "name", "d", "ll", "nn", "number", "l", "un", "len", "N", "gn", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "inn", "ren", "sn", "norm", "z", "no", "nb", " N", "g", "nc", "na", "np", "fn", "en", "c", "none", "nm", "ng", "t", "network", "ln", "net", "all", "nt", "names"], "p": ["r", "pn", "post", "pt", "ping", "d", "pm", "mp", "parse", "php", "l", "ip", "vp", "tp", "wp", "point", "o", "pl", "perm", "cp", "m", "lp", "v", "rep", "pe", "bp", "P", "params", "pp", "pid", "cache", "f", "pro", "pkg", "pers", "par", "pr", "pa", "patch", "pi", "g", "pb", "np", "c", "port", "jp", "ap", "exp", "t", "y", "ps", "ports", "pc", "proc", "policy", "dp"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "f", "ims", "is", "ic", "ami", "y", "em", "di", "x", "ri", "ip", "ji", "o", "id", "asi", "ij", "in", "ret", "iti", "ori", "bi", "it", " I", "inner", "g", "ci", "sim", "iq", "ii", "ex", "phi", "hi", "ion", "this", "ni", "ind", "ia", "u", "ir", "pi", "iso", "my", "iri", "xi", "si", "mi", "I", "name", "gi", "m", "ini", "by", "im", "us", "init", "ity", "ui", "ie", "ti", "multi", "er", "iter", "info"], "j": ["br", "q", "jit", "pt", "key", "ji", "jj", "o", "li", "jo", "sp", "v", "ij", "m", "son", "jump", "ne", "bs", "ge", "ja", "im", "str", "bj", "b", "oj", "z", "bi", "it", "pr", "uj", "g", "json", "rel", "js", "aj", "obj", "jp", "J", "out", "fr", "er", "s", "kj", "y", "jc", "dj", "em", "si", "to", "di", "jl", "next"], "tmp": ["offset", "mm", "tv", "before", "mp", "mb", "temp", "pre", "clip", "rt", "perm", "v", "cp", "sp", "tt", "tf", "tk", "top", "buff", "attr", "src", "td", "ret", "tty", "auto", "test", "yy", "orig", "MP", "it", "pkg", "tm", "nb", "mk", "comp", "np", "emp", "obj", "my", "txt", "cmp", "jp", "original", "t", "etc", "ctx", "copy", "proc", "rb", "amp", "st"], "k": ["q", "ke", "ask", "key", "wk", "kl", "ks", "kh", "kr", "m", "v", "dk", "km", "tk", "ck", "ko", "unk", "ak", "kn", "kar", "ki", "ik", "uk", "kk", "z", "mk", "ark", "kin", "g", "ek", "ku", "sk", "isk", "K", "t", "kt", "kj", "tek", "y", "ijk", "ka", "kw", "kid", "kg"], "ans": ["checks", " means", "uns", "ons", " stats", "vals", "rs", "outs", "eds", "ks", "stats", " ops", "os", "yes", " pars", "ids", "ms", "arts", "ANS", "amps", "ats", "ens", "ants", "caps", "es", "ls", "an", "ows", "ols", "AN", "ann", "scan", "vs", "is", "ed", "cs", "ups", "ops", "ins", "sk", "ds", "aps", "as", "s", "ps", "xs", "apps", "ars", " scans"], "ok": ["valid", "oc", "mp", "ob", "rs", "allow", "red", "o", "ks", "bc", "conn", "obs", "app", "ch", "boot", "err", "ol", "allowed", "msg", "ck", "ko", "ocr", "ro", "ak", "os", "yes", "ms", "kok", "bool", "oks", "ik", "kk", "ack", "sync", "Ok", "ready", "arr", "it", "null", "mk", "cs", "status", "success", "OK", "ops", "ins", "sk", "ku", "syn", "obj", "bo", "ot", "ov", "check", " OK", "op", "y", "ps", "rc", "nt", "res"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tScanner sc = new Scanner(System.in);\\n\tint N;\\n\tint[] A;\\n\tint count=0;\\n\tint flag;\\n\tint key;\\n\t\\n\tpublic void input(){\\n\t\tN=sc.nextInt();\\n\t\tA = new int[N];\\n\t\tfor(int i=0; i<N; i++){\\n\t\t\tA[i]=sc.nextInt();\\n\t\t}\\n\t}\\n\t\\n\tpublic void bubblesort(){\\n\t\tflag=1;\\n\t\twhile(flag==1){\\n\t\t\tflag=0;\\n\t\t\tfor(int j=N-1; j>=1; j--){\\n\t\t\t\tif(A[j] < A[j-1]){\\n\t\t\t\t\tkey = A[j];\\n\t\t\t\t\tA[j] = A[j-1];\\n\t\t\t\t\tA[j-1] = key;\\n\t\t\t\t\tflag=1;\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n\t\\n\tpublic void output(){\\n\t\tSystem.out.print(A[0]);\\n\t\tfor(int i=1; i<N; i++){\\n\t\t\tSystem.out.print(\" \"+A[i]);\\n\t\t}\\n\t\tSystem.out.println(\"\\n\"+count);\\n\t}\\n\t\\n\tpublic static void main(String[] args){\\n\t\tMain obj = new Main();\\n\t\tobj.input();\\n\t\tobj.bubblesort();\\n\t\tobj.output();\\n\t}\\n}\\n", "target": "170", "substitutes": {"sc": ["usc", "arc", "r", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "ser", "sh", "bc", "sv", "sp", "ctl", "capt", "sel", "sch", "sw", "se", "sm", "sync", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "ch"], "N": ["D", "I", "TN", "F", "FN", "ND", "NM", "SIZE", "SN", "ALL", "NE", "NP", "NB", "n", "Size", "O", "G", "S", "Ni", "NG", "P", "OUT", "T", "NO", "NL", "Count", "R", "NS", "Q", "NR", "V", "M", "NH", "AN", "Len", "Total", "GN", "H", "NC", "C", "Now", "NN", "NA", "Y", "L", "Num", "J", "K", "X", "CN", "Length", "NI", "NT", "B", "Ns"], "A": ["D", "AA", "I", "RAM", "F", "Array", "MA", "AU", "E", "Alpha", "CA", "WA", "AE", "ALL", "AC", "HA", "All", "The", "At", "As", "SA", "G", "You", "S", "P", "Ar", "IA", "ATA", "a", "GA", "V", "LA", "JA", "M", "API", "This", "What", "Part", "AV", "ACC", "H", "C", "AP", "AM", "AB", "An", "NA", "AI", "Bar", "L", "K", "AR", "EA", "X", "Answer", "Args", "Ass", "Area", "BA", "mA", "AF", "ACT", "PA", "B", "AT"], "count": ["num", "offset", "ount", "limit", "found", "number", "cond", "total", "n", "v", "batch", "call", "sum", "state", "report", "Count", "ind", "cache", "index", "list", "code", "force", "sequence", "z", "cd", "cmd", "nb", "child", "cont", "status", "length", "c", "debug", "ct", "counter", "t", "th", "size", "nt"], "flag": ["set", "ment", "offset", "stage", "group", "ground", "mask", "fail", "weight", "cond", "fd", "flags", "log", "bit", "id", "sign", "option", "level", "nl", "file", "tag", "state", "arg", "ret", "lag", "f", "start", "bool", "button", "code", "sync", "list", "sort", "type", "fire", "condition", "field", "force", "cmd", "age", "status", "bug", "lock", "lv", "Flag", "success", "event", "action", "store", "continue", "char", "kind", "command", "ld", "line", "FLAG"], "key": ["q", "offset", "name", "col", "token", "Key", "prime", "entry", "ip", "id", "value", "n", "v", "source", "item", "path", "print", "ey", "tag", "val", "a", "map", "index", "code", "type", "prev", "string", "lock", "et", "k", "ek", "link", "max", "alpha", "info", "char", "kind", "p", "y", "kw", "x", "KEY", "next", "hash"], "i": ["q", "I", "ix", "ex", "ri", "phi", "hi", "gi", "iu", "zi", "ei", "ip", "ji", "point", "li", "o", "n", "m", "v", "me", "ini", "err", "ij", "in", "batch", "ai", "ki", "client", "im", "ind", "qi", "at", "index", "us", "init", "\u0438", "fire", "io", "bi", "it", "um", "ui", "ie", "is", "pi", "inner", "iso", "ti", "ic", "ci", "MI", "sim", "my", "cli", "e", "PI", "multi", "iter", "info", "iq", "ami", "y", "ii", "xi", "si", "di", "x", "mi"], "j": ["br", "q", "block", "jac", "jit", "pt", "l", "prime", "jl", "ji", "jj", "h", "jo", "server", "n", "ij", "v", "m", "jump", "pg", "bs", "ja", "ind", "str", "bj", "b", "oj", "job", "note", "org", "z", "left", "it", "pr", "uj", "g", "k", "json", "js", "aj", "jp", "J", "other", "fr", "er", "s", "p", "kj", "y", "jc", "je", "x", "kid", "dj"], "obj": ["opp", "utils", "ob", "entry", "task", "o", "so", "tmp", "n", "impl", "db", "cmp", "resp", "ck", "self", "act", "res", "art", "bj", "alt", "str", "inter", "func", "object", "inst", "init", "arr", "ctrl", "pkg", "Obj", "cmd", "nb", "ab", "wr", "np", "js", "eff", " Obj", "inv", "bo", "ot", "out", "ct", "txt", "def", "det", "info", "ctx", "rb", "aux", "nt", "x"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException, NumberFormatException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString line = br.readLine();\\n\t\tif( line != null ){\\n\t\t\tString[] parts = line.split(\" \");\\n\t\t\tint lon = Integer.parseInt(parts[0]);\\n\t\t\tint sid = Integer.parseInt(parts[1]);\\n\t\t\tSystem.out.println((lon * sid) + \" \" + (lon * 2 + sid * 2));\\n\t\t}\\n\t}\\n\\n}", "target": "92", "substitutes": {"br": ["bro", "bsp", "vr", "bc", "cr", "sp", "kr", "dr", "bh", "tr", "bridge", "ber", "bl", "bn", "bp", "brace", "Br", "mr", "Fr", "buf", "str", "BR", "b", "bd", "lr", "hr", "bm", "pr", "div", "wr", "bt", "rel", "browser", "yr", "fr", "er", "sr", "be", "rb", "ch", "gr"], "line": ["block", "Line", "result", "row", "l", "inline", "entry", "part", "point", "log", "word", "side", "ne", "nl", "detail", "raw", "lo", "cell", "le", "lines", "str", "lin", "se", "note", "list", "frame", "string", "comment", "message", "LINE", "text", "piece", "data", "record", "mail", "online", "output", "body", "eline", "sample", "liner", "out", "link", "char", "handle", "ln", "ine", "next"], "parts": ["onents", "works", "points", "faces", "plays", "details", "dates", "rs", "part", "fixes", "Parts", "ads", "reports", "styles", "pins", "ians", "forms", "months", "its", "lines", "tools", "arts", "cells", "rots", "caps", "pieces", "lists", "atters", "ls", "maps", "finals", "sts", "vs", "links", "ts", "acts", "bits", "words", "js", "places", "sections", "groups", "terms", "lights", "ps", "ports", "comments", "split"], "lon": ["lt", "lbs", "deg", "zen", "loc", "ll", "phi", "alon", "hi", "von", "aea", "l", "www", "sol", "gal", "oa", "oton", "regon", "elong", "lam", "lat", "xy", "coord", "ja", "east", "photo", "south", "on", "pos", "px", "lif", "las", "land", "area", "west", "rel", "zon", "pole", "layout", "aily", "los", "lf", "ln", "ld", "canon", "lan"], "sid": ["sym", "session", "zi", "sy", "sb", "esi", "sec", "fd", "len", "sil", "sys", "seed", "id", "sv", "sp", "rid", "soc", "sin", "sd", "sta", "sett", "side", "pres", "su", "fin", "seq", "sha", "sie", "lat", "sn", "pid", "sit", "pse", "wid", "sl", "secure", "uid", "sort", "ssl", "stan", "century", " Sid", "sal", "sq", "ss", "vid", "ti", "ds", "des", "sam", "s", "iq", "si", "lan", "sr", "kid", "ord"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int S = sc.nextInt();\\n        int[] memo = new int[1000000];\\n        calc(S, 1, memo);\\n    }\\n\\n    public static void calc(int s, int index, int[] memo) {\\n        \\n          if (s == 4 || s==2 || s==1) {\\n                System.out.println(index+3);\\n                return;\\n            }\\n       \\n\t\tint result = 0;\\n        if (s % 2 == 0){\\n            result = s/2;\\n        }        \\n        else {\\n            result = s*3 + 1;\\n        }\\n        calc(result, index+1, memo);\\n    }\\n}", "target": "166", "substitutes": {"sc": ["lc", "cc", "esc", "rs", "sec", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "ec", "sel", "sch", "sw", "se", "sm", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "ch", "desc"], "S": ["Z", "I", "D", "CS", "SI", "SN", "N", "TS", "SH", "JS", "SA", "G", "SAM", "P", "T", "SU", "R", "NS", "A", "V", "INT", "M", "Si", "ID", "H", "C", "Y", "L", "SS", "GS", "J", "X", "SC", "B"], "memo": ["histos", " mempo", " meme", "histpo", "Memos", "mempo", "Memo", " memos", "Membo", "Mempo", " memogram", "memoryn", "Memogram", " membo", "memoryos", "memorypo", "histe", "memos", "memoryo", "membo", "ramogram", "histo", "memogram", " memn", "histbo", "memorybo", "ramos", "ramo", "Memn", "memn", "meme", "rampo", "Meme"], "s": ["sp", "n", "parts", "os", "ms", "its", "ys", "sw", "fs", "sing", "space", "is", "ts", "c", "ses", "terms", "changes", "xs", "x", "sid", "sb", "rs", "h", "sys", "ns", "sv", "summary", "series", "sort", "z", "sq", "bits", "g", "sites", "js", "services", "ps", "second", "span", "sf", "sol", "sd", "stat", "spec", "types", "south", "se", "ls", "string", "i", "status", "ss", "ds", "p", "stats", "si", "sym", "gs", "sql", "sec", "ashes", "abs", "m", "sum", "ids", "less", "search", "j", "times", "t", "seconds"], "index": ["set", "num", "ix", "offset", "loc", "row", "EX", "position", "number", "insert", "address", "point", "seed", "zero", "id", "n", "exit", "context", "state", "thread", "initial", "start", "ind", "axis", "count", "search", "pos", "list", "scroll", "location", "slice", "j", "scan", "no", "document", "alias", "i", "status", "length", "screen", "open", "Index", "date", "ctx", "add", "size", "si", "second", "column", "x", "height", "next"], "result": ["valid", "response", "num", "r", "true", "ult", "card", "feature", "current", "red", "Result", "different", "zero", "value", " resulted", "folder", "su", "relation", "power", "pair", "cup", "profile", "report", "ret", "correct", "search", "currency", "match", "count", "test", "mate", "sequence", "results", "complete", "data", "RESULTS", "success", "length", "score", "ful", "ULT", "output", "continue", "diff", "product", "date", " resulting", "successful", "goal", "res", "function", "next", "term"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        int[] array = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            array[i] = sc.nextInt();\\n        }\\n\\n        boolean[] visit = new boolean[n];\\n\\n        int current = 0;\\n        int count = 0;\\n\\n        visit[1] = true;\\n\\n        //\u30dc\u30bf\u30f3\u3092\u62bc\u3059\\n        while (true) {\\n            current = array[current] - 1;\\n            count++;\\n            if (current == 1) {\\n                System.out.println(count);\\n                return;\\n            }\\n            if (visit[current]) {\\n                System.out.println(\"-1\");\\n                return;\\n            }\\n            visit[current] = true;\\n        }\\n    }\\n\\n}", "target": "175", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sh", "cr", "bc", "sv", "sp", "inc", " scr", "ck", "ctl", "capt", "cle", "sel", "irc", "sch", "sw", "sync", "fc", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch"], "n": ["num", "nu", "r", "mn", "d", "nn", "number", "l", "un", "len", "nr", "N", "total", "o", "ns", "node", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "a", "f", "norm", "z", "j", "no", "nb", " N", "g", "na", "nc", "k", "np", "en", "c", "ct", "ot", "ng", "t", "p", "network", "nor", "ln", "net", "size", "nt"], "array": ["ray", "Array", "ar", "number", "var", "now", "sh", "aw", "attribute", "file", "auto", "shape", "list", "view", "map", "audio", "instance", "object", "collection", "arr", "range", "sequence", "buffer", "our", "variable", "null", "order", "length", "table", "max", "angle", "integer", "ami", "bar", "archive", "window", "hash"], "i": ["q", "I", "ix", "ri", "phi", "gi", "hi", "iu", "ei", "fi", "chain", "ip", "ji", "li", "id", "m", "me", "ini", "err", "batch", "ai", "ms", "ki", "client", "im", "qi", "ori", "us", "init", "u", "\u0438", "io", "j", "bi", "ui", "is", "uri", "ie", "pi", "g", "ti", "ic", "ci", "sim", "my", "cli", "multi", "t", "iter", "gu", "y", "oi", "ii", "si", "di", "mi"], "visit": ["imitable", "imitor", "visited", "Visitable", "Visiter", "imiting", "visitor", "seeiting", "transit", "visitable", "transiter", "seeitor", "seeitable", "visiter", "imit", "Visit", "transited", "seeiter", "Visited", "Visitor", "seeit", "Visiting", "transitor", "seeited", "visiting"], "current": ["set", "active", "ctr", "result", "name", "covered", "reported", "cur", "total", "now", "currently", "selected", "read", "path", "pointer", "const", "Current", "loop", "ptr", "length", "c", "counter", "present", "p", "last", "first"], "count": ["num", "ctr", "skip", "cur", "number", "total", "sum", "Count", "cache", "start", "index", "list", "code", "pointer", "type", "cat", "ptr", "length", "c", "max", "counter", "continue", "last", "flag", "depth", "size", "first"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint road = sc.nextInt();\\n\t\tint[] floor = new int[road];\\n\t\tint[] second = new int[road];\\n\t\tfor(int i = 0; i<road; i++) {\\n\t\t\tfloor[i] = sc.nextInt();\\n\t\t\tsecond[i] = floor[i];\\n\t\t}\\n\t\tArrays.sort(floor);\\n\t\t//max\u5024\u3092\u53d6\u308a\u51fa\u3059\u3002\\n\t\tfor(int i = 0; i<floor.length; i++) {\\n\t\t\tif(second[i] == floor[road-1]) {\\n\t\t\t\t\tSystem.out.println(floor[road-2]);\\n\t\t\t}else {\\n\t\t\t\tSystem.out.println(floor[road-1]);\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "142", "substitutes": {"sc": ["usc", "sac", "uc", "arc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "sh", "cr", "bc", "sv", "sp", "dc", "cle", "src", "irc", "sch", "enc", "sync", "fc", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "c", "osc", "cmp", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "psc", "ch", "desc"], "road": ["arc", "addr", "round", "r", "adr", "deg", "to", "frog", "resy", "street", "station", "row", "north", "nr", "rom", "walk", "chain", "broad", "total", "rad", "height", "node", "zero", "rid", "ref", "rand", "rave", "cast", "har", "level", "iro", "ro", "gro", "roid", "right", "tech", "Road", "occupied", "hold", "rod", "bott", "range", "arr", "ost", "way", "ood", "ptr", "night", "eth", "length", "hop", "good", "rel", "ory", "roads", "ether", "net", "rows", "wind"], "floor": ["flo", "round", "offset", "unity", "foundation", "low", "frog", "ilo", "position", "prime", "below", "oo", "total", "forth", "zero", "oor", "free", "sector", "factor", " Floor", "fold", "lo", "front", "division", "even", "freedom", "foo", "min", " floors", "lower", "range", "left", "frame", "bottom", "surface", "door", "two", "onto", "area", "seat", "fore", "score", "ten", "both", "normal", "bo", "fr", "integer", "average", "los", "be", "down", "goal", "last", "first", "next"], "second": ["fifth", "foreign", "next", "secondary", "sec", "seconds", "system", "server", "billion", "Second", "minute", "secret", "summary", "sector", "relation", "function", "division", "third", "small", "security", "sound", "consider", "south", "minimum", "lower", "year", "two", "zone", "ond", "seat", "rational", "bis", "fr", "fourth", "last", "video", "first"], "i": ["q", "I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "hi", "details", "ei", "fi", "chain", "ip", "ji", "li", "id", "n", "v", "m", "me", "ini", "ij", "ai", "ni", "ms", "im", "qi", "ori", " j", "us", "init", "u", "\u0438", "io", "ims", "sequence", "j", "bi", "it", "ui", "is", "uri", "ie", "pi", "ti", "ic", "ci", "sim", "my", "cli", "multi", "iter", "gu", "y", "xi", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n\t\tString first = new Scanner(System.in).nextLine();\\n\t\tString Array[] = first.split(\" \");\\n\t\tint Num0 = Integer.parseInt(Array[0]);\\n\t\tint Num1 = Integer.parseInt(Array[1]);\\n\t\tSystem.out.println(Num0 * Num1);\\n\t\t\\n    }\\n}", "target": "35", "substitutes": {"first": [" First", "st", "before", "row", "current", "part", "real", "now", "top", "front", "this", "show", "sum", "self", "user", "start", "auto", "foo", "then", "list", "f", "test", "space", "string", "full", "primary", "First", "head", "input", "format", "upper", "last", " FIRST", "second", "initial", "line", "next"], "Array": ["AA", "array", " Vector", " Number", " array", "Action", "Matrix", "Raw", "All", "Hash", "Group", "Assembly", "Amount", " File", "Ray", " Var", "At", "As", "Ar", " Any", " Area", "A", " Index", "RAY", "Document", " A", " Ar", "Vector", " Table", "Bank", " Row", "Now", "Number", "Query", "Style", "Adapter", "Stream", "Stage", "Answer", "Range", " Base", "Root", " AA", "rays", "Value", "Area", " Pair", "Have", "Row", " arra", "Asset", "Length"], "Num0": ["num0", "Sum0", "num8", "numZero", "NUM8", "Sum8", " NumZero", "NUMZero", "NUMMac", "num1", "NUM0", "NUMEm", "NUM1", "NumZero", "NumEm", " NumMac", "Sum1", "Num8", "SumZero", "ThuEm", "ThuMac", "NumMac", "ThuZero", "Thu0", " NumEm"], "Num1": ["numMap", "num0", "NumN", "Num001", "NumberOne", "Number001", "NumMap", "num1", "NUMOne", "Number1", "NUM0", "Number0", "NUM1", "num001", "NUM001", "numN", "NumOne", " NumMap", " NumOne", "numOne", "NUMMap", " NumN", "NUMN"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void sort(int[] a,int i){\\n\t\tint key=a[i];\\n\t\tint j=i-1;\\n\t\twhile(j>=0 && a[j]>key){\\n\t\t\ta[j+1]=a[j];\\n\t\t\tj--;\\n\t\t}\\n\t\ta[j+1]=key;\\n\t}\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tint[] a=new int[n];\\n\t\tfor (int i=0;i<n;i++){\\n\t\t\ta[i]=sc.nextInt();\\n\t\t}\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\tsort(a,i);\\n\t\t\tfor(int k=0;k<n-1;k++){\\n\t\t\t\tSystem.out.print(a[k]+\" \");\\n\t\t\t}\\n\t\t\tSystem.out.println(a[n-1]);;\\n\t\t}\\n\t}\\n}", "target": "69", "substitutes": {"a": ["r", "d", "array", "esa", "parts", "go", "f", "ga", "ao", "trace", "na", "c", "e", "alpha", "as", "eas", "changes", "ac", "y", "era", "all", "ata", "window", "am", "l", "h", "o", "aa", "app", "aw", "sta", "ace", "ack", "arr", "z", "ea", "ba", "aka", "w", "s", "au", "ae", "result", "att", "ar", "al", "val", "act", "ia", "u", "an", "la", "ma", "p", "ca", "ava", "oa", "v", "m", "da", "sa", "ya", "at", "A", "b", "aos", "ab", "area", "off", "aaa", "fa", "ap", "t", "aux"], "i": ["q", "ix", "r", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "iii", "f", "ik", "is", "ic", "ami", "y", "di", "x", "ish", "iat", "ri", "fi", "l", "ip", "ji", "point", "o", "id", "ij", "in", "iti", "start", "ori", "io", "bi", "it", "inner", "ci", "cli", "iq", "ii", "phi", "hi", "ion", "this", "ni", "ind", "ia", "\u0438", "status", "pi", "p", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "im", "qi", "index", "init", "ity", "ui", "ie", "uri", "ti", "multi", "t", "info", "iter"], "key": ["set", "ke", "name", "priority", "Key", "row", "base", "zero", "id", "value", "v", "ij", "rand", "by", "important", "item", "sum", "pri", "val", "here", "start", "index", "min", "ry", "mk", "keys", "primary", "lock", "obj", "ek", "my", "max", "alpha", "check", "char", "parent", "y", "size", "x", "KEY", "next"], "j": ["br", "q", "jit", "pt", "row", "prime", "l", "jl", "ji", "jj", "h", "o", "ij", "v", "jump", "ju", "ret", "ja", "b", "oj", "job", "z", " dj", "it", "gov", "pr", "uj", "g", "lock", "json", "off", "c", "js", "aj", "obj", "jp", "J", "other", "fr", "t", "kj", "y", "jc", " J", "jack", "x", "dj", "window"], "sc": ["usc", "uc", "lc", "cc", "esc", "sb", "sec", "co", "cl", "sys", "sh", "sv", "sp", "cr", "bc", "inc", "sd", "dc", "nl", "capt", "ctl", "cle", "sch", "sync", "fc", "tc", "scan", "sq", "disc", "cs", "sci", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "n": ["nu", "mn", "num", "name", "ll", "nn", "number", "l", "un", "len", "N", "o", "ns", "m", "v", "dn", "ne", "nan", "nl", "cn", "ni", "sn", "note", "init", "norm", "z", "no", "nb", "g", " N", "na", "nc", "np", "en", "c", "nw", "normal", "nm", "out", "ot", "ng", "t", "p", "network", "ln", "net", "all", "size", "nt", "names"], "k": ["q", "ke", "wk", "kl", "ks", "kh", "kr", "m", "dk", "km", "tk", "ck", "ko", "kn", "ak", "unk", "kar", "ki", "ik", "kk", "uk", "z", "mk", "g", "ok", "sk", "ek", "ku", "K", "ph", "kind", "kt", "kj", "ka", "ijk", "kw", "kid", "kg"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint a = getInt(sc);\\n\t\tint b = getInt(sc);\\n\\n\t\tString[] strs = { \"\", \"\" };\\n\\n\t\tfor (int i = 0; i < a; i++) {\\n\t\t\tstrs[0] += b;\\n\t\t}\\n\\n\t\tfor (int i = 0; i < b; i++) {\\n\t\t\tstrs[1] += a;\\n\t\t}\\n\\n\t\tArrays.sort(strs);\\n\t\tSystem.out.println(strs[0]);\\n\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9<br>\\n\t * \u5165\u529b\u3057\u305f\u914d\u5217\u306b\u5bfe\u3059\u308b\u9806\u5217\u3092\u53d6\u5f97\\n\t *\\n\t * @param numArray\\n\t * @return\\n\t */\\n\tprivate static List<Integer[]> getPermutation(int[] numArray) {\\n\t\tList<Integer[]> permutation = new ArrayList<>();\\n\t\tInteger[] ans = new Integer[numArray.length];\\n\t\tboolean[] used = new boolean[numArray.length];\\n\\n\t\treturn buildPermutaion(permutation, numArray, ans, used, 0);\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9(\u5185\u90e8)<br>\\n\t * \u5165\u529b\u3057\u305f\u914d\u5217\u306b\u5bfe\u3059\u308b\u9806\u5217\u3092\u4f5c\u6210\\n\t *\\n\t * @param list\\n\t * @param numArray\\n\t * @param ans\\n\t * @param used\\n\t * @param depth\\n\t * @return\\n\t */\\n\tprivate static List<Integer[]> buildPermutaion(List<Integer[]> list, int[] numArray, Integer[] ans, boolean[] used,\\n\t\t\tint depth) {\\n\\n\t\t// \u5168\u90e8\u4f7f\u3044\u5207\u3063\u305f\u6642=>\u3067\u304d\u305f\u9806\u5217\u3092\u8fd4\u3059\\n\t\tif (depth == numArray.length) {\\n\t\t\tlist.add(ans.clone());\\n\t\t\treturn list;\\n\t\t}\\n\t\t// \u4f7f\u3044\u5207\u3063\u3066\u3044\u306a\u3044\u5834\u5408\\n\\n\t\tfor (int i = 0; i < numArray.length; i++) {\\n\t\t\tif (used[i]) {\\n\t\t\t\tcontinue;\\n\t\t\t}\\n\t\t\tans[depth] = numArray[i];\\n\t\t\tused[i] = true;\\n\t\t\tlist = buildPermutaion(list, numArray, ans, used, depth + 1);\\n\\n\t\t\tused[i] = false;\\n\t\t}\\n\\n\t\treturn list;\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9 <br>\\n\t * \u30b9\u30ad\u30e3\u30ca\u30fc\u304b\u3089\u306e\u5165\u529b\u5024\u3092long\u3067\u8fd4\u5374\\n\t *\\n\t * @return\\n\t */\\n\tpublic static long getLong(Scanner sc) {\\n\\n\t\treturn Long.parseLong(sc.next());\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9 <br>\\n\t * \u30b9\u30ad\u30e3\u30ca\u30fc\u304b\u3089\u306e\u5165\u529b\u5024\u3092int\u3067\u8fd4\u5374\\n\t *\\n\t * @return\\n\t */\\n\tpublic static int getInt(Scanner sc) {\\n\\n\t\treturn Integer.parseInt(sc.next());\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9 <br>\\n\t * \u30b9\u30ad\u30e3\u30ca\u30fc\u304b\u3089\u306e\u5165\u529b\u5024\u3092String\u3067\u8fd4\u5374\\n\t *\\n\t * @return\\n\t */\\n\tpublic static String getString(Scanner sc) {\\n\\n\t\treturn sc.next();\\n\t}\\n\\n\t/**\\n\t * *\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9 <br>\\n\t * \u30b9\u30ad\u30e3\u30ca\u30fc\u304b\u3089\u306e\u5165\u529b\u5024\u3092int\u914d\u5217\u3067\u8fd4\u5374\\n\t *\\n\t * @return\\n\t */\\n\tpublic static int[] getIntArray(Scanner sc) {\\n\t\tString line = \"\";\\n\t\t// \u76f4\u524d\u306bnext()\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u3068\u6539\u884c\u30b3\u30fc\u30c9\u3060\u3051\u53d6\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u305d\u306e\u5bfe\u7b56\\n\t\twhile (line.equals(\"\")) {\\n\t\t\tline = sc.nextLine();\\n\t\t}\\n\\n\t\tString[] strArray = line.split(\" \");\\n\t\tint[] intArray = new int[strArray.length];\\n\t\tfor (int i = 0; i < strArray.length; i++) {\\n\t\t\tintArray[i] = Integer.parseInt(strArray[i]);\\n\t\t}\\n\t\treturn intArray;\\n\t}\\n\\n}\\n\\nclass Status {\\n\tlong x;\\n\tlong tmpCoins;\\n\\n\tpublic Status(long x, long tmpCoins) {\\n\t\tthis.x = x;\\n\t\tthis.tmpCoins = tmpCoins;\\n\t}\\n}\\n", "target": "24", "substitutes": {"sc": ["r", "lc", "cc", "esc", "mp", "sec", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "inc", "ck", "src", "sch", "sw", "res", "str", "se", "scan", "null", "sq", " Sc", "cs", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "out", "s", "asc", "scl", "isc", "ctx", "SC", "pc", "rc", "proc", "ch", "desc", "st"], "a": ["ae", "r", "ca", "ax", "ar", "l", "oa", "o", "ta", "n", "aa", "da", "sta", "sa", "ai", "act", "A", "at", "an", "la", "ao", "ab", "ea", "area", "apa", "pa", "aff", "ba", "aaa", "ach", "na", "c", "ada", "alpha", "ma", "t", "s", "p", "ac", "as", "au", "va", "am"], "b": ["br", "r", "d", "beta", "sb", "base", "l", "ob", "mb", "h", "bar", "bc", "n", "v", "m", "db", "gb", "bs", "eb", "f", "buffer", "fb", "z", "j", "bi", "ib", "nb", "bm", "ab", "g", "ba", "pb", "c", "bis", "e", "t", "s", "p", "bb", "cb", "y", "be", "rb", "B"], "strs": ["brings", " strses", "Strb", "structses", "arrs", "dictses", " strb", "structs", "strats", "stringts", "stringings", "stringsol", "arrps", "STRps", "strts", "structats", "Strs", "drawsol", "drawats", "strings", "stris", "structis", " stris", "grts", "strsol", "trings", "brs", " strats", "grs", "trrs", "STRs", "arrls", " strts", "grb", "brrs", "trts", "strrs", "brts", "strps", "STRls", " strsol", "strb", "Strls", "strses", "dictis", "Strps", "Strts", "trs", "dicts", "dictats", "draws", "stringrs", "strls", "stringats"], "i": ["q", "ix", "phi", "gi", "zi", "iu", "hi", "ei", "iy", "chain", "ip", "fi", "point", "li", "o", "id", "me", "ini", "err", "in", "batch", "print", "ai", "ki", "client", "pp", "im", "ind", "qi", "ori", "init", "\u0438", "ims", "j", "it", "ity", "ui", "ie", "uri", "is", "pi", "ti", "ci", "sim", "cli", "multi", "t", "p", "gu", "y", "oi", "xi", "ii", "si", "di", "x", "mi"], "numArray": ["alphList", "nuArea", "namAr", "alphArray", "nuFrame", "NumStream", "NumAr", "nuList", "numInstance", "nmStream", "nuInstance", "monArray", " numFrame", "NumFrame", "nmArray", "nuAr", " numList", "numberArray", "numberList", "numberAr", "monInstance", "numHash", " numArea", "NumArray", " numStream", " numAr", "numberInstance", "numArea", "alphHash", "namInstance", " numHash", "numList", "nuArray", "alphArea", "numAr", "numStream", "nuHash", " numInstance", "nmInstance", "monAr", "monList", "nmAr", "NumHash", "NumInstance", "namArea", "numFrame", "namArray"], "permutation": ["permociation", "pronation", "permute", "formociation", "perutation", "permution", "pronutation", "facution", "pronutable", "permutable", "facociation", "perutable", "facuration", "pronute", " permutable", "perute", "permuration", "facutation", "polociation", "peration", "polution", " permute", "formuration", "polutation", "formutation", "poluration", "formution", " permation", "permation"], "ans": [" means", "uns", "ents", "ons", "ras", "banks", "nets", "anas", "aus", "urs", "anks", "ums", "outs", "rs", "ns", "ks", "ces", "ran", "nas", "ians", "nz", "ms", "ids", "ates", "ANS", "amps", "ats", "ens", "ants", "aned", "us", "ls", "an", "uploads", "aos", "ams", "umes", "anes", "sets", "orts", "ins", "vers", "aps", "ds", "s", "anon", "anned", "offs", "ars", "ann"], "used": ["based", "created", "linked", "necessary", "installed", "supported", " reused", "needed", "free", "released", " unused", "forced", "usable", "ended", "limited", "added", "user", "using", "associated", "bus", "occupied", "us", " utilized", "loaded", "available", "uses", "ed", "initialized", "reed", "usage", "vol", "seen", "done", "good", "Used", "activated", "use", "locked", "backed", "checked"], "list": ["set", "dl", "result", "array", "l", "cl", "batch", "pair", "alist", "LIST", "spec", "dict", "lists", "index", "type", "single", "range", "sequence", "stack", "listed", "table", "ul", "pool", "out", "all", "st", "map"], "depth": ["name", "end", "d", "deep", "dim", "DEP", "len", "total", "tree", "db", "default", "level", "rank", "root", "count", "ree", "Depth", "ptr", "order", "length", "max", "dir", "dep", "parent", "stable", "proc", "size"]}}
{"code": "\\nimport java.io.BufferedOutputStream;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.math.BigInteger;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\t\\n\tpublic static class FastReader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer st;\\n\t\\n\\n\t\tpublic FastReader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\\n\t\tString next() {\\n\t\t\twhile (st == null || !st.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (Exception r) {\\n\t\t\t\t\tr.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());//converts string to integer\\n\t\t}\\n\\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (Exception r) {\\n\t\t\t\tr.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t}\\n\t\\n\tpublic static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));\\n    public static long mod = (long) (1e9+7);\\n    public final static int MAX = (int) 90000000;\\n  // static Scanner sc = new Scanner(System.in);\\n\tpublic static void main(String[] args) {\\n\t   \\n\t FastReader sc = new FastReader();\\n\t int n = sc.nextInt();\\n\t Map<String,Integer> map = new HashMap<>();\\n\t for(int i=0;i<n;++i) {\\n\t\t char[] s = sc.next().toCharArray();\\n\t\t Arrays.sort(s);\\n\t\t String str = new String(s);\\n\t\t if(map.containsKey(str)) {\\n\t\t\t map.put(str,map.get(str)+1);\\n\t\t }else map.put(str, 1);\\n\t }\\n\t long ans = 0;\\n\t for(String s : map.keySet()) {\\n\t\t long x = map.get(s);\\n\t\t ans+=(x*(x-1))/2;\\n\t }\\n\tout.print(ans);\\n\t out.close();\\n\t\t\\n\t}\\n\t\\n}", "target": "32", "substitutes": {"br": ["r", "ctr", "bro", "shr", "nr", "abl", "vr", "bsp", "cr", "bc", "ber", "kr", "dr", "bh", "tr", "bridge", "bf", "bre", "bl", "bs", "bn", "bp", "brace", "Br", "mr", "buf", "BR", "b", "lr", "bern", "hr", "pr", "ab", "wr", "bt", "rel", "rob", "jp", "fr", "bb", "rb", "sr", "gr"], "st": ["set", "lt", "r", "stage", "pt", "sb", "l", "sth", "cl", "rt", "sh", "so", "cr", "sp", "tmp", "sv", "tr", "stat", "ste", "St", "sn", "sw", "start", "str", "se", "ist", "sm", "sl", " superst", "stan", "inst", "const", "z", "ost", "stack", "sts", "sty", "ts", "est", "rest", "ss", "bt", "std", "step", "mt", "ct", "storage", "ped", "t", "nd", "ST", "p", "s", "stable", "th", "ust", "nt"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\t\\n\tpublic static int max(int A, int B) {\\n\t\tint ans = A;\\n\\n\t\tif (B > ans) {\\n\t\t\tans = B;\\n\t\t\tB--;\\n\t\t} else {\\n\t\t\tA--;\\n\t\t}\\n\\n\t\tif (A >= B) {\\n\t\t\tans += A;\\n\t\t} else {\\n\t\t\tans += B;\\n\t\t}\\n\t\treturn ans;\\n\t}\\n\t\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint A = scanner.nextInt();\\n\t\tint B = scanner.nextInt();\\n\t\tint ans = max(A, B);\\n\t\tSystem.out.println(ans);\\n\t\tscanner.close();\\n\t}\\n}\\n", "target": "75", "substitutes": {"A": ["D", "AA", "I", "AU", "E", "CA", "AY", "N", "AE", "AC", "HA", "Ax", "Av", "At", "As", "SA", "G", "O", "S", "ASC", "P", "Ar", "T", "IA", "R", "a", "Q", "GA", "LA", "V", "M", "AH", "API", "This", "AN", "ACC", "AL", "AV", "H", "AP", "One", "C", "AM", "U", "AB", "An", "AS", "NA", "L", "RA", "AI", "AR", "EA", "X", "AD", "BA", "AF", "AT"], "B": ["D", "PB", "Z", "I", "BB", "LB", "TB", "BI", "BL", "RB", "BT", "BM", "E", "USB", "DB", "N", "BU", "VB", "NB", "GB", "G", "S", "P", "FB", "T", "BER", "MB", "IB", "BF", "BR", "b", "BC", "V", "BE", "Q", "M", "CB", "BY", "BS", "C", "BO", "JB", "AB", "Y", "L", "J", "EB", "AR", "BA", "OB", "SB", "Blue", "Bs"], "ans": ["uns", "ons", "flags", "os", "can", "ms", "lines", "ANS", "sw", "ats", "ens", "AN", "is", "ins", "aps", "as", "terms", "actions", "xs", "ports", "offs", "x", "names", " scans", "ars", " pan", "acs", "ints", "vals", "ns", "asks", "ks", "ads", "ces", "orders", "CAN", "angs", "scan", "rates", "anes", "cs", "utters", "An", "s", "was", "posts", "unes", "nets", "aus", "eds", "AC", "amps", "ants", "ls", "an", "mas", "orts", "books", "annot", "trans", "ots", "SB", "rans", "stats", "anned", "outs", "ann", "gs", " means", "I", "ents", "eps", "ums", "helps", "ANN", "asms", "S", "ids", "arts", "caps", "es", "uploads", "vs", "aos", " spans", "ab", "sets", "ations", "AB", "vers", "max", "olds", "times", "BA"], "scanner": ["canener", "Scanator", " scanener", " Scaner", " Scanner", "caninner", "Scanter", "scanener", "Scaninner", "Scanener", "Scaner", "canator", "scaninner", "signter", " scanrar", "signner", "canrar", " Scanator", "scanter", " Scanter", "scanator", " scanator", " scanter", "canter", "signrar", "Scanner", " scaninner", "scanrar", "canner", "scaner", " scaner", "caner", "signener"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\nimport java.util.Scanner;\\nimport java.lang.*;\\nimport java.io.*;\\nimport java.util.*;\\nimport java.lang.Integer;\\nimport java.util.HashMap;\\n\\nclass Main\\n{\\n    // driver function to test the above functions\\n    public static void main(String args[]) throws IOException\\n    {\\n        Reader.init(System.in);\\n        String s = Reader.next();\\n        char[] arr = s.toCharArray();\\n        int ans_b=0;\\n        for (int i=0; i<3; i++){\\n            char val= arr[i];\\n            if (val=='B'){\\n                ans_b++;\\n            }\\n        }\\n\\n        if (ans_b==1 || ans_b==2){\\n            System.out.println(\"Yes\");\\n        }\\n\\n        else{\\n            System.out.println(\"No\");\\n        }\\n\\n    }\\n\\n}\\n\\nclass solu{\\n\\n}\\n\\n/** Class for buffered reading int and double values */\\nclass Reader {\\n    static BufferedReader reader;\\n    static StringTokenizer tokenizer;\\n\\n    /** call this method to initialize reader for InputStream */\\n    static void init(InputStream input) {\\n        reader = new BufferedReader(\\n                new InputStreamReader(input) );\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n\\n    /** get next word */\\n    static String next() throws IOException {\\n        while ( ! tokenizer.hasMoreTokens() ) {\\n            //TODO add check for eof if necessary\\n            tokenizer = new StringTokenizer(\\n                    reader.readLine() );\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    static int nextInt() throws IOException {\\n        return Integer.parseInt( next() );\\n    }\\n\\n    static double nextDouble() throws IOException {\\n        return Double.parseDouble( next() );\\n    }\\n}", "target": "76", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n  public static void main(String args[]){\\n    Scanner scan = new Scanner(System.in);\\n    int N = scan.nextInt();\\n    int P[] = new int[N];\\n    int countI = 1;\\n    for(int i=0; i<N; i++) {\\n    int b = scan.nextInt();\\n    P[i] = b;\\n    }\\n    int j = 1;\\n    int Min = P[0];\\n    while(j<N) {\\n    \tif(P[j]<Min) {\\n    \t\tMin = P[j];\\n    \t\tcountI++;\\n    \t}\\n    \tj++;\\n    }\\n    System.out.println(countI);\\n  }\\n}", "target": "229", "substitutes": {"scan": ["set", "seek", "r", "save", "skip", "sql", "row", "nn", "reach", "gate", "parse", "san", " Scan", "sys", "Scan", "system", "connect", "n", "m", "v", "sin", "read", "in", "can", "report", "run", "start", "auto", "se", "sync", "search", "send", "scroll", "an", "ann", "sc", "find", "is", "ner", "g", "na", "store", "c", "out", "gc", "check", "info", "p", "sur", "re", "proc", "query", "ch", "util"], "N": ["D", "I", "Node", "TN", "F", "ND", "NM", "SN", "NP", "NE", "NB", "n", "Size", "O", "No", "S", "Ni", "NO", "T", "R", "NS", "A", "Na", "Q", "NR", "V", "M", "NH", "AN", "Len", "GN", "NC", "Sn", "C", "NN", "Num", "NA", "L", "J", "K", "Net", "NI", "NT", "B", "Ns"], "P": ["I", "PO", "F", "FP", "PP", "NP", "JP", "PD", "S", "PE", "PS", "T", "SCP", "BP", "R", "A", "Q", "V", "M", "TP", "MP", "Patch", "IP", "Part", "PT", "PUT", "PM", "AP", "C", "Power", "Ps", "Y", "L", "Policy", "J", "PI", "PK", "X", "vP", "PR", "p", "PF", "PIN", "DP", "PA", "B", "CP"], "countI": ["totalJ", "numJ", "countN", "indexI", "sumi", "counti", "sumIJ", "numIM", " countJ", "numIJ", "countIJ", " countN", "sumIM", "totalI", "counterIJ", "totalM", "totalIJ", "countIM", "counterI", "indexM", "counterJ", "counterIM", "sumI", "indexJ", "Counti", "countM", "countJ", " countM", "numI", " countIJ", "CountJ", "sumN", " counti", "CountI", "indexIJ", "CountN", "sumJ"], "i": ["q", "I", "ix", "ri", "phi", "hi", "gi", "iu", "ip", "point", "li", "o", "id", "n", "v", "m", "me", "ini", "print", "ai", "client", "im", "ind", "ori", "a", "us", "u", "io", "bi", "it", "is", "ui", "ie", "uri", "pi", "inner", "ti", "ic", "ci", "sim", "my", "cli", "multi", "iter", "p", "info", "y", "ii", "si", "di", "x", "mi"], "b": ["br", "BI", "bin", "wb", "sb", "mb", "base", "ob", "bar", "bit", "bc", "v", "bf", "bh", "db", "by", "bs", "lb", "bp", "ble", "eb", "buffer", "bi", "ib", "bound", "nb", "ab", "g", "bg", "bis", "t", "bb", "cb", "binary", "be", "rb", "B"], "j": ["br", "num", "q", "ix", "jac", "jit", "pt", "current", "l", "jl", "ji", "jj", "h", "n", "ij", "m", "v", "jump", "msg", "ja", "ind", "bj", "note", "min", "index", "job", "z", "it", "pr", "uj", "g", "json", "k", "js", "aj", "obj", "jp", "J", "out", "fr", "exp", "t", "other", "p", "kj", "y", "jc", "x", "dj"], "Min": ["Sum", "Begin", "Init", "Mod", "Before", "Limit", "Initial", "Body", "Small", "Less", "Mid", "Val", "Rand", "Default", "Start", "Minor", "Temp", "Next", "Filter", "Master", "Low", "Count", "min", "Lower", "M", "Current", "Minimum", "Stat", "Main", "Part", "Len", "Mini", "PM", "First", "L", "Format", "Best", " min", "MIN", "Left", "Value", "Max", "Dir", "Pref", "Sec"]}}
{"code": "import java.nio.file.*;\\nimport java.nio.charset.*;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        int m = Integer.parseInt(s.substring(5, 7));\\n        if(m<=4){\\n            System.out.println(\"Heisei\");\\n        }else{\\n            System.out.println(\"TBD\");\\n        }\\n    }\\n}\\n", "target": "163", "substitutes": {"sc": ["sac", "uc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "ser", "cr", "sv", "sp", "bc", "ec", "cle", "sel", "sch", "sw", "sm", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "c", "syn", "sk", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "s": ["q", "gs", "sql", "aws", "sb", "rs", "sys", "h", "ns", "sv", "n", "v", "source", "ws", "S", "src", "ats", "str", "b", "f", "ls", "space", "sts", "string", "is", "ts", "sq", "i", "g", "ss", "c", "sample", "gets", "w", "t", "say", "p", "ps", "hs"], "m": ["mn", "mm", "d", "dm", "l", "met", "h", "n", "v", "ms", "mean", "mr", "mu", "b", "f", "M", "j", "mint", "bm", "gm", "tm", "i", "g", "k", "cm", "mod", "mx", "c", "mt", "t", "wm", "p", "mis", "mc", "fm", "mi"]}}
{"code": "// package app;\\n\\nimport java.math.BigDecimal;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport java.util.Scanner;\\nimport java.util.stream.Stream;\\n\\npublic class Main {\\n\\n    public static void main(final String[] args) throws Exception {\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        long N = sc.nextLong();\\n        long K = sc.nextLong();\\n\\n        int result = 0;\\n        for (int i = 0; i < N; i++) {\\n            long height = sc.nextLong();\\n            result += height >= K ? 1 : 0;\\n        }\\n\\n        System.out.println(result);\\n    }\\n}", "target": "145", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n    public static void main(String []args){\\n        Scanner sc = new Scanner(System.in);\\n        int a=0;\\n        int b=0;\\n        int c=0;\\n        int d=0;\\n        int score=0;\\n        a=sc.nextInt();\\n        b=sc.nextInt();\\n        c=sc.nextInt();\\n        d=sc.nextInt();\\n\\n        if(d-a-b<=0){\\n            if(a>=d){\\n                score=d;\\n            }else {\\n                score = a*1+b*0;\\n            }\\n        }else{\\n            int temp=d;\\n            int tscore=a*1+b*0;\\n             temp=d-a-b;\\n            score=tscore+temp*-1;\\n\\n\\n\\n\\n\\n\\n\\n\\n        }\\n\\n\\n\\n\\n        System.out.print(score);\\n\\n\\n\\n    }\\n\\n}\\n", "target": "56", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "hl", "sec", "cl", "sys", "system", "sh", "sv", "sp", "bc", "cr", "ch", "ck", "ctl", "ko", "sch", "se", "sync", "fc", "tc", "ctrl", "scan", "sq", "cs", "ner", "ss", "nc", "g", "pb", "osc", "jp", "Sc", "gc", "ng", "scl", "asc", "isc", "scope", "ctx", "SC", "mc", "pc", "rc", "conv", "sci", "desc", "sub"], "a": ["ae", "r", "ca", "elt", "att", "ar", "el", "aq", "l", "oa", "ta", "n", "m", "da", "aa", "app", "ad", "sa", "al", "this", "ai", "af", "act", "A", "at", "f", "ia", "u", "an", "la", "ga", "ao", "ab", "i", "ea", "apa", "pa", "g", "ba", "na", "ach", "aaa", "ast", "aj", "e", "ap", "alpha", "ma", "t", "as", "p", "ac", "era", "au", "aux", "ata", "x", "am"], "b": ["br", "bas", "r", "sb", "ob", "l", "base", "bc", "v", "n", "bf", "db", "by", "bl", "bs", "or", "ub", "back", "f", "eb", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bg", "bis", "e", "t", "s", "p", "bb", "cb", "y", "be", "rb", "B"], "c": ["uc", "r", "ca", "lc", "cc", "l", "cr", "n", "v", "m", "ce", "cp", "dc", "ec", "cn", "can", "f", "u", "tc", "z", "cd", "C", "cs", "g", "cm", "ci", "e", "ct", "t", "p", "ac", "mc"], "d": ["dat", "D", "pd", "r", "dh", "od", "end", "l", "dd", "draw", "fd", "h", "de", "n", "m", "da", "ad", "db", "dc", "dr", "sd", "v", "md", "dict", "td", "ind", "back", "bd", "f", "z", "j", "dev", "dra", "cd", "it", "ed", "i", "data", "g", "done", "ds", "des", "e", "out", "t", "s", "p", "nd", "dir", "dis", "y", "ld", "dt", "di", "del"], "score": ["set", "num", "loss", "result", "acc", "base", "weight", "log", "value", "summary", "fine", "sd", "err", "speed", "level", "distance", "rank", "program", "confidence", "sum", "print", "cpu", "report", "td", "or", "script", "scale", "execute", "note", "count", "index", "search", "type", "scroll", "test", "mem", "send", "match", "sequence", "scoring", "scan", "core", "Score", "find", "message", "vector", "est", "status", "success", "winner", "evaluate", "balance", "sim", "style", "check", "label", "rate", "ate", "strength", "pred", "goal", "size", "grade", "term"], "temp": ["dat", "set", "deg", "tim", "perature", "current", "pre", "fd", "cond", "adj", "unt", "tmp", "v", "texture", "tr", "cap", "nom", "level", "tem", "Temp", "cel", "term", "sum", "cell", "cold", "cu", "index", "fac", "mem", "tc", "test", "j", "Temperature", "tm", "div", "i", "ptr", "template", "cum", "mod", "timer", "emp", "t", "p", "porary", "strength", "fake", "em", "copy", "mi", "stem"], "tscore": ["tisscore", "tsourse", "TSrace", "tsrace", "tspace", "tiscore", "tische", "tespace", "tescore", " tsrace", "tisourse", "tesscore", "intscore", "tsscore", "tsche", " tspace", "atsourse", "atsscore", "intsscore", "TSscore", "TSpace", "atscore", "tesrace", "atsche", "TScore", "intsourse", " tsscore", "intsche"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n \\npublic class Main{\\n  public static void main(String[] args) throws Exception{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tint second = Integer.parseInt(br.readLine());\\n\t\tint h = second / (60 * 60);\\n                int m = second % (60 * 60) / 60;\\n                int s = second % (60 * 60) % 60;\\n                System.out.println(h + \":\" + m + \":\" + s);\\n\t}\\n}", "target": "84", "substitutes": {"br": ["r", "sb", "shr", "bro", "vr", "pl", "cr", "bc", "sp", "ber", "dr", "bh", "tr", "bf", "ch", "bridge", "kr", "bl", "bp", "Br", "mr", "ger", "buf", "str", "BR", "b", "bd", "lr", "hr", "bm", "pr", "div", "bt", "browser", "jp", "fr", "bb", "be", "rb", "sr", "gr", "rem"], "second": ["set", "description", "result", " Second", "low", "pixel", "next", "timeout", "position", "number", "sec", "secondary", "sb", "system", "server", "now", "Second", "billion", "minute", "secret", " seconds", "process", "third", "section", "small", "security", "consider", "minimum", "se", "service", "lower", "unit", "component", "two", "ond", "screen", "video", "sample", "integer", "fourth", "last", "size", "seconds", "first"], "h": ["dh", "he", "rh", "r", "d", "hi", "hl", "l", "o", "sh", "kh", "v", "bh", "oh", "high", "hour", "hh", "ih", "HH", "zh", "hz", "hd", "b", "hours", "f", "hw", "history", "hr", "H", "g", "html", "human", "hum", "ph", "t", "p", "ha", "hm", "th", "hs", "ch"], "m": ["r", "mm", "dm", "d", "mo", "mp", "l", "met", "o", "v", "n", "om", "md", "mun", "ms", "vm", "mu", "im", "b", "min", "f", "sm", "M", "um", "tm", "gm", "i", "mx", "c", "mt", "t", "p", "man", "em", "mc", "fm", "mi", "am"], "s": ["q", "gs", "d", "l", "sol", "o", "eds", "ns", "sv", "v", "n", "S", "os", "ms", "les", "ids", "ats", "a", "b", "f", "us", "fs", "ls", "u", "es", "ols", "j", "is", "ts", "sq", "i", "ss", "c", "js", "ins", "des", "t", "p", "y", "ps", "tes"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\nimport java.io.*;\\n\\n/* Name of the class has to be \"Main\" only if the class is public. */\\npublic class Main\\n//class Ideone\\n{\\n\tpublic static void main (String[] args) throws java.lang.Exception\\n\t{\\n\t\t// your code goes here\\n\t\tBufferedReader stdReader =\\n            new BufferedReader(new InputStreamReader(System.in));\\n        String[] nums = stdReader.readLine().split(\" \");\\n        \\n        int a = Integer.parseInt(nums[0]);\\n        int b = Integer.parseInt(nums[1]);\\n        \\n        System.out.println(a*b + \" \" + 2*(a+b) );\\n\t}\\n}", "target": "92", "substitutes": {}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.io.BufferedWriter;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.UncheckedIOException;\\nimport java.nio.charset.Charset;\\nimport java.util.StringTokenizer;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.io.BufferedReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author mikit\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        LightScanner in = new LightScanner(inputStream);\\n        LightWriter out = new LightWriter(outputStream);\\n        CRectangleCutting solver = new CRectangleCutting();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class CRectangleCutting {\\n        public void solve(int testNumber, LightScanner in, LightWriter out) {\\n            // out.setBoolLabel(LightWriter.BoolLabel.YES_NO_FIRST_UP);\\n            long w = in.longs(), h = in.longs(), x = in.longs(), y = in.longs();\\n            out.ans(w * h * 0.5, 6).ans(2 * x == w && 2 * y == h ? 1 : 0).ln();\\n        }\\n\\n    }\\n\\n    static class LightScanner {\\n        private BufferedReader reader = null;\\n        private StringTokenizer tokenizer = null;\\n\\n        public LightScanner(InputStream in) {\\n            reader = new BufferedReader(new InputStreamReader(in));\\n        }\\n\\n        public String string() {\\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new UncheckedIOException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public long longs() {\\n            return Long.parseLong(string());\\n        }\\n\\n    }\\n\\n    static class LightWriter implements AutoCloseable {\\n        private final Writer out;\\n        private boolean autoflush = false;\\n        private boolean breaked = true;\\n\\n        public LightWriter(Writer out) {\\n            this.out = out;\\n        }\\n\\n        public LightWriter(OutputStream out) {\\n            this(new BufferedWriter(new OutputStreamWriter(out, Charset.defaultCharset())));\\n        }\\n\\n        public LightWriter print(char c) {\\n            try {\\n                out.write(c);\\n                breaked = false;\\n            } catch (IOException ex) {\\n                throw new UncheckedIOException(ex);\\n            }\\n            return this;\\n        }\\n\\n        public LightWriter print(String s) {\\n            try {\\n                out.write(s, 0, s.length());\\n                breaked = false;\\n            } catch (IOException ex) {\\n                throw new UncheckedIOException(ex);\\n            }\\n            return this;\\n        }\\n\\n        public LightWriter ans(String s) {\\n            if (!breaked) {\\n                print(' ');\\n            }\\n            return print(s);\\n        }\\n\\n        public LightWriter ans(double x, int n) {\\n            if (!breaked) {\\n                print(' ');\\n            }\\n            if (x < 0) {\\n                print('-');\\n                x = -x;\\n            }\\n            x += Math.pow(10, -n) / 2;\\n            print(Long.toString((long) x)).print('.');\\n            x -= (long) x;\\n            for (int i = 0; i < n; i++) {\\n                x *= 10;\\n                print((char) ('0' + ((int) x)));\\n                x -= (int) x;\\n            }\\n            return this;\\n        }\\n\\n        public LightWriter ans(int i) {\\n            return ans(Integer.toString(i));\\n        }\\n\\n        public LightWriter ln() {\\n            print(System.lineSeparator());\\n            breaked = true;\\n            if (autoflush) {\\n                try {\\n                    out.flush();\\n                } catch (IOException ex) {\\n                    throw new UncheckedIOException(ex);\\n                }\\n            }\\n            return this;\\n        }\\n\\n        public void close() {\\n            try {\\n                out.close();\\n            } catch (IOException ex) {\\n                throw new UncheckedIOException(ex);\\n            }\\n        }\\n\\n    }\\n}\\n\\n", "target": "182", "substitutes": {"inputStream": ["addressSteam", "outputFile", " inputSteam", "outputStreamer", "inputSteam", "addressFile", " inputStreamer", "addressWindow", "errorstream", "helloStream", " inputstream", "inputstream", "errorStream", "helloWindow", "outputstream", "inputStreamer", "errorStreamer", "helloSteam", "inputFile", "errorSteam", "outputWindow", "addressStream", "inputWindow", "outputSteam", "helloFile"], "outputStream": ["exitSteam", "resultStream", "resultSteam", "outStreamer", "outputStreamer", "exitWindow", "inputSteam", "networkStreamer", "displayDisk", "exitDisk", "outStream", "exitStream", "resultWindow", "outputForm", "networkSteam", "networkForm", "displayWindow", "displayStream", "outSteam", "networkStream", "displaySteam", "inputForm", "inputStreamer", "outForm", "outputWindow", "outputSteam", "outputDisk", "resultDisk"], "in": ["r", "gin", "bin", "from", "el", "inf", "internal", "isin", "log", "rt", "login", "id", "config", "n", "sin", "ini", "err", "source", "by", "al", "inn", "file", "rin", "IN", " IN", "this", "run", "user", "or", "ind", "str", "index", "In", "init", "io", "it", "null", "din", "is", "i", "stream", "kin", "inner", "ic", "inside", "ins", "input", "body", "local", "er", "info", "cin", "env", "iter", "up", "add", "net", "query", "window"], "out": ["set", "r", "ou", "result", "ex", "end", "outer", "current", "l", "writer", "chain", "log", "o", "rt", "sys", "server", "tmp", "n", "v", "exit", "ch", "err", "by", "ion", "update", "print", "OUT", "sum", "can", "this", "report", "write", "client", "user", "or", "cache", "gt", "at", "list", "conv", "io", "gr", "it", "aos", "Out", "null", "cmd", "stream", "inner", "OU", "table", "ins", "output", "obj", "w", "t", "er", "p", "external", "up", "net", "all", "to", "nt", "res", "outs", "window"], "solver": ["sqolver", "ssolver", "ssolved", "solved", " solving", " solved", "rsolver", "ssolution", "solving", " solution", " sorter", " solve", "ssolving", "rsolved", "sqolving", "ssolve", "sqolve", "solve", "sqorter", "rsorter", "solution", "sorter", "rsolution", "ssorter"], "testNumber": [" testNo", " trialnumber", " iterationnumber", " iterationNumber", " solutionnumber", " trialNumbers", " testnumber", " iterationNo", " solutionNumbers", " trialNo", " solutionNo", " trialNumber", " testNumbers", " iterationNumbers", " solutionNumber"]}}
{"code": "\\n\\nimport java.io.BufferedReader;\\nimport java.io.BufferedWriter;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStreamWriter;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    StringTokenizer tokenizer = null;\\n    int totalCases, testNum;\\n\\n    PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\\n\\n    void solve() throws IOException {\\n\\n    }\\n\\n    void execute() throws IOException {\\n        int n = ni();\\n        int k = ni();\\n        int[] arr = new int[n];\\n        for(int i = 0; i < n; i++) {\\n            arr[i] = ni();\\n        }\\n        Arrays.sort(arr);\\n        int res = 0;\\n        for (int i = 0; i < k; i++) {\\n            res += arr[i];\\n        }\\n        out.println(res);\\n        out.close();\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        new Main().execute();\\n    }\\n\\n    void debug(Object... os) {\\n        System.out.println(Arrays.deepToString(os));\\n    }\\n\\n    int ni() throws IOException {\\n        return Integer.parseInt(ns());\\n    }\\n\\n    long nl() throws IOException {\\n        return Long.parseLong(ns());\\n    }\\n\\n    double nd() throws IOException {\\n        return Double.parseDouble(ns());\\n    }\\n\\n    String ns() throws IOException {\\n        while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            tokenizer = new StringTokenizer(br.readLine());\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    String nline() throws IOException {\\n        tokenizer = null;\\n        return br.readLine();\\n    }\\n\\n    boolean input() throws IOException {\\n        return true;\\n    }\\n\\n}\\n", "target": "41", "substitutes": {"br": ["r", "loc", "bro", "shr", "cr", "ber", "kr", "dr", "bh", "tr", "bridge", "boot", "err", "sp", "bl", "ran", "bs", "bn", "bp", "Br", "mr", "buf", "str", "BR", "b", "lr", "rain", "hr", "bi", "repl", "pr", "bc", "wr", "bt", "rel", "obj", "browser", "fr", "yr", "p", "rb", "gr"], "tokenizer": ["tokenener", "tokenressor", "normalizer", "tagzer", " tokenization", "zeroizer", "okenener", "wordener", " tokenifier", " tokenzer", "serialener", "Tokenizer", "tokenger", "tokenpler", " tokenner", "tokenner", "Tokenger", "tokenifer", "tagifier", "tagizer", "Tokenifer", "Tokenzer", " tokenator", " tokenifer", "serialifier", "Tokenpler", "okenizer", "tokenization", " tokenener", "okenator", "okenpler", "wordization", "serializer", "normalener", "zeroressor", "Tokenifier", "tokenifier", "tagger", "tagifer", "serialner", "okenifier", " tokenger", "okenressor", "tagpler", "tokenator", "okenner", "wordizer", "normalization", "okenger", "wordator", "normalressor", "okenzer", "okenization", "zeroener", "tokenzer", "zeroization"], "totalCases": ["totalcodes", "totalBatches", " totalcatches", "totalBase", " totalCatches", "totalcases", "totalCase", " totalcases", "totalCoases", "totalCoatches", "totalCoase", "totalBases", "totalcatches", "totalcase", "totalCoodes", "totalBodes", " totalcodes", "totalCodes", " totalCase", " totalcase", "totalCatches", " totalCodes"], "testNum": [" testNo", "TestLen", "testnum", "checkNo", "checkNum", "checkLen", "TestNo", "testNo", "Testnum", " testnum", "checknum", " testLen", "testLen", "TestNum"], "out": ["println", "r", "ou", "result", "ex", "name", "writer", "error", "co", "o", "sys", "log", "put", "rt", "tmp", "m", "v", "console", "system", "err", "in", "by", "ro", "file", "OUT", "print", "report", "ret", "write", "str", "at", "b", "list", "exec", "io", "it", "aos", "Out", "null", "pr", "status", "screen", "table", "obj", "output", "txt", "pool", "w", "t", "p", "ln", "up", "net", "to", "nt", "over", "ch", "outs", "st"], "n": ["nu", "mn", "r", "num", "name", "d", "nn", "l", "un", "len", "N", "o", "h", "ns", "m", "v", "ne", "nan", "nl", "sn", "a", "on", "u", "an", "z", "j", "no", "nb", " N", "na", "nc", "np", "en", "c", "nm", "w", "t", "p", "ln", "y", "net", "all", "nt", "x", "names"], "k": ["q", "num", "r", "ke", "l", "kl", "o", "ks", "m", "v", "kh", "dk", "kr", "km", "ck", "ko", "kn", "ak", "ki", "b", "ik", "kk", "ack", "z", "j", "mk", "g", "ok", "c", "sk", "ku", "max", "ek", "K", "w", "t", "p", "kt", "kj", "ka", "kw"], "arr": ["addr", "r", "coll", "ray", "Array", "ax", "att", "ar", "array", "vals", "agg", "rs", "var", "align", "sys", "pl", "vec", "adj", "app", "aa", "db", "tr", "alph", "bl", "batch", "attr", "ars", "Ar", "val", "dict", "buf", "art", "ang", "ind", "img", "j", "our", "repl", "par", "pr", "ab", "arb", "aaa", "vol", "rel", "obj", "fr", "au", "nt", "gr", "map"], "i": ["q", "I", "ix", "r", "phi", "gi", "zi", "ogi", "iu", "used", "ei", "base", "fi", "ip", "chain", "iy", "ji", "point", "li", "o", "asi", "ij", "me", "ini", "err", "in", "batch", "ai", "ki", "client", "iti", "im", "qi", "ori", "us", "init", "\u0438", "u", "io", "ims", "bi", "it", "ity", "ui", "uri", "ie", "is", "pi", "ti", "MI", "ci", "cli", "uli", "PI", "multi", "info", "p", "parent", "ami", "y", "oi", "xi", "ii", "si", "di", "x", "mi"], "res": ["r", "reg", "result", "vals", "rev", "red", "abs", "vec", "ress", "reset", "zero", "Res", "rand", "respons", "err", "resp", "sum", "ms", "ret", "tx", "req", "resh", "results", " Res", "clus", "rest", "rss", "vol", "rel", "js", "obj", "des", "RES", "cons", "def", "re", "ps", "pas", "resolution", "pres", "gr", "rem"], "os": ["mot", "nos", "rs", "oos", "oss", "sys", "o", "ns", "dos", "obs", "mos", "osi", "bos", "bs", "OS", "ms", "oids", "ys", "ls", "ols", "aos", "Os", "ts", "cs", "ops", "js", "obj", "ds", "des", "ios", "los", "ps", "oes", "ros"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n        int A;\\n        for(int i=0;i<5;i++){\\n            A=sc.nextInt();\\n            if(A==0){\\n                System.out.println(i+1);\\n                return;\\n            }\\n        }\\n        \\n        \\n\t}\\n}", "target": "222", "substitutes": {"sc": ["usc", "set", "lc", "acc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "cr", "bc", "sv", "sp", "capt", "cle", "sel", "sch", "sw", "sm", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "screen", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "pc", "rc", "ch", "desc"], "A": ["D", "I", "AA", "VA", "MA", "E", "Alpha", "AY", "CA", "KA", "N", "AC", "HA", "The", "Ax", "As", "G", "SA", "Va", "S", "P", "T", "IA", "a", "GA", "V", "LA", "JA", "M", "Some", "This", "AN", "What", "AV", "ACC", "H", "C", "One", "AP", "An", "NA", "Y", "L", "RA", "K", "ZA", "Java", "X", "Bar", "EA", "BA", "AF", "ACT", "PA", "B", "ESS"], "i": ["I", "ix", "ex", "sql", "phi", "gi", "hi", "iu", "zi", "ei", "chain", "li", " init", "o", "id", "n", "v", "m", "ij", "ini", "in", "batch", "ai", "ki", "client", "im", "ind", "qi", "a", "index", "f", "us", "init", "u", " ii", "sequence", "j", "bi", "it", "ui", "is", "pi", "k", "ti", "ic", "ci", "sim", "my", "cli", "multi", "iq", "gu", "iter", "ii", "si", " my", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n\\n    char[] tap = sc.next().toCharArray();\\n\\n    // \u8e0f\u307f\u306b\u304f\u3044\\n    char gu = 'R';\\n    char ki = 'L';\\n    for(int i = 0; i < tap.length;i++){\\n      if((i + 1) % 2 == 0){\\n        if(tap[i] == gu){\\n          System.out.println(\"No\");\\n          return;\\n        }\\n      } else {\\n        if(tap[i] == ki){\\n          System.out.println(\"No\");\\n          return;\\n        }\\n      }\\n    }\\n    System.out.println(\"Yes\");\\n  }\\n}\\n", "target": "205", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "ser", "cr", "bc", "sv", "sp", "soc", "tk", "ec", "capt", "sche", "cle", "sch", "cam", "sw", "sync", "scan", "sq", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "tap": [" rep", "acc", " tokens", "att", " buff", "tmp", "aa", "cap", "tk", "buff", "raw", "attr", " buf", " input", " rest", " ch", "cat", " src", "aaa", "aps", "tn", "txt", "ap", "iter", " buffer", " text", "ars", "map"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tfor (int i = 1; i > 0; i++){\\n\t\tint x = scan.nextInt(); //????????\u00a7???????????\\???\\n\t\tint y = scan.nextInt(); //????????\u00a7???????????\\???\\n\t\tif(x == 0 && y == 0){\\n\t\t\tbreak;\\n\t\t}\\n\t\tif(x > y){\\n\t\t\tSystem.out.println(y + \" \" + x);\\n\t\t} else{\\n\t\t\tSystem.out.println(x + \" \" + y);\\n\t\t}\\n\t\t}\\n\t}\\n}", "target": "72", "substitutes": {"scan": ["set", "seek", "save", "skip", "look", "row", "nn", "con", "reach", "gate", "parse", "pan", "san", "watch", "sys", "Scan", "system", "connect", "sv", "n", "sin", "read", "in", "by", "stat", "can", "get", "scale", "auto", "se", "an", "sc", "find", "ner", "en", "store", "black", "check", "re", "trans", "query", "ann", "see"], "i": ["I", "ix", "ex", "sql", "phi", "gi", "zi", "iu", "hi", "chain", "li", "n", "m", "v", "ini", "in", " di", "ai", "go", "im", "ind", " ii", "j", "bi", "it", "is", "ui", "status", "pi", "g", "ic", "ci", "sim", "cli", "multi", "iq", "gu", "y", "xi", "ii", "si", "di", "mi"], "x": ["ix", "ex", "wx", "v", "xf", "xy", "val", "tx", "inx", "xe", "xx", "ry", "xc", "z", "xa", "dx", "mx", "xt", "w", " xx", "X", "rx", "p", "y", "xs", "xi", "xp", "conv"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int h = sc.nextInt();\\n        int m = sc.nextInt();\\n        int time = h*60+m;\\n        double hd = 0.5*time;\\n        double md = 6.0*m;\\n\\n        double hx = Math.sin(Math.toRadians(hd)) * a;\\n        double hy = Math.cos(Math.toRadians(hd)) * a;\\n        double mx = Math.sin(Math.toRadians(md)) * b;\\n        double my = Math.cos(Math.toRadians(md)) * b;\\n\\n        double x = (hx - mx);\\n        if (x<0) {\\n            x *= -1;\\n        }\\n        double y = (hy - my);\\n        if (y<0) {\\n            y *= -1;\\n        }\\n        double ans = x*x + y*y;\\n        System.out.println(Math.sqrt(ans));\\n    }\\n}\\n", "target": "86", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "mp", "cgi", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "dc", "ck", "ctl", "ko", "sch", "sync", "tc", "ctrl", "scan", "sq", " Sc", "cont", "cs", "g", "ss", "nc", "ner", "c", "osc", "cmp", "txt", "jp", "Sc", "gc", "asc", "scl", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "a": ["ae", "r", "ca", "d", "ax", "ar", "l", "oa", "o", "n", "v", "aa", "da", "sta", "sa", "app", "ad", "al", "ak", "ai", "act", "at", "A", "ia", "an", " A", "ao", "ab", "i", "ea", "apa", "ba", "ach", "c", "alpha", "e", "ma", "er", "t", "p", "ac", "as", "au", "span", "am"], "b": ["r", "d", "ob", "l", "o", "bc", "v", "n", "db", "f", "u", "an", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "c", "bis", "e", "w", "t", "p", "bb", "be", "B"], "h": ["dh", "he", "r", "hi", "hl", "l", "sh", "v", "n", "oh", "hour", "hh", "ih", "HH", "hours", "ime", "ht", "f", "z", "hs", "j", "hr", "H", "i", "g", "c", "w", "t", "p", "ha", "hm", "ch", "height", "ah"], "m": ["r", "mm", "dm", "d", "pm", "mo", "l", "o", "v", "n", "minute", "ms", "vm", "rm", "sm", "ime", "f", "M", "mmm", "mem", "century", "z", "tm", "message", "i", "g", "cm", "c", "mt", "e", "t", "s", "p", "month", "em", "mi", "am"], "time": ["set", "mm", "tim", "Time", "runtime", "pm", "etime", "timeout", "sec", "now", "v", "minute", "day", "tt", "speed", "ay", "hour", "ms", "min", "ime", "type", "mem", "tc", "TIME", "z", "century", "year", "tm", "message", "age", "ty", "c", "mt", "max", "times", "e", "w", "duration", "t", "s", "date", "rate", "size", "second"], "hd": ["dh", "pd", "dl", "rh", "hn", "addr", "HD", "haw", "d", "dm", "att", "hl", "dd", "shed", "and", "dr", "sd", "eddy", "vd", "amd", "hard", "hz", "bd", "ht", "wd", "rod", "hhhh", "pard", "ard", "cmd", "ud", "hid", "html", "asured", "std", "xd", "isd", "kb", "ded", "ha", "ld", "dt", "hs", "wind"], "md": ["dh", "pd", "mn", "mm", "od", "dm", "d", "pm", "mo", "df", "mp", "mb", "mind", "dd", "med", "mid", "de", "rand", "mand", "sd", "rpm", "ms", "td", "metadata", "amd", "vm", "rm", "MD", "bd", "sm", "mem", "cmd", "gm", "mk", "mod", "cm", "mode", "dem", "mt", "ma", "def", "nd", "mc", "dt", "mond", "mi", "desc"], "hx": ["hpx", " hpx", "handlex", "ohx", "hix", "lxy", " hix", " hrx", "hrx", "ohxy", "hxi", "handlexi", "xpx", "handlepx", "handleix", "xx", "ohxi", "lx", "lrx", "xix", " hxy", "lxi", "ohrx", "xxi", " hxi", "hxy"], "hy": ["he", "hya", "phi", "hi", "ym", "iy", "py", "ky", "gy", "ay", "uy", "mph", "ham", "xy", "fy", "hz", "px", "bi", "lly", "vy", "axy", "phy", "yan", "wy", "Hy", "hei", "ha", "hm", "HY", "him", "mi", "ly"], "mx": ["mn", "mm", "wx", "mo", "mp", "ym", "mb", "yx", "mie", "mph", "nz", "xy", "ms", "vm", "mr", "mite", "hz", "xx", "mmm", "px", "ml", "bm", "mk", "mmmm", "yz", "mt", "MX", "wm", "rx", "ux", "mac", "xi", "xs", "mc", "hs", "ox", "mi"], "my": ["sym", "mn", "mm", "My", "mp", "ym", "mic", "mos", "ky", "gy", "mie", "mor", "ms", "vm", "mr", "ys", "ry", "mmm", "mem", "ml", "ies", "mop", "mk", "mmmm", "MY", "rey", "mt", "ury", "ny", "mis", "mc", "ty", "ox", "mi", "ly", "mys", "yo"], "x": ["ix", "ex", "wx", "ax", "el", "php", "pan", "ox", "xml", "co", "yx", "ce", "ace", "xf", "path", "cel", "lat", "xy", "tx", "xe", "xx", "index", "px", "ls", "xc", "ml", "z", "xa", "xes", "zx", "dx", "lex", "i", "est", "xxxx", "xt", "xxx", "one", "xd", "ct", "w", "X", "edit", "rx", "ux", "xi", "xs", "xp", "fx"], "y": ["ye", "sy", "ym", "iy", "yx", "sys", "yl", "py", "gy", "v", "ay", "ey", "uy", "cy", "xy", "fy", "icy", "ys", "ya", "xx", "ry", "yy", "ies", "z", "dy", "j", "yt", "vy", "i", "sky", "axy", "oy", "Y", "yi", "wy", "yan", "yr", "out", "t", "ny", "ly", "yd", "yn", "ty", "ery"], "ans": ["rets", " means", "ros", "ons", "vals", "aus", "anas", "anks", "ums", "ades", "eds", "ns", "ks", "ces", "asms", "irms", "ms", "ates", "arts", "ANS", "amps", "ats", "ens", "ants", "aned", "ags", "ados", "ls", "an", "uploads", "sts", "vs", "mas", "rates", "anes", "cs", "ins", "ds", "as", "rans", "rors", "lan", "ars", "ann"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    byte i1 = sc.nextByte();\\n    byte i2 = sc.nextByte();\\n    byte i3 = sc.nextByte();\\n    if(i1 + i2 + i3 > 21){\\n      System.out.println(\"bust\");\\n    }else{\\n      System.out.println(\"win\");\\n    }\\n  }\\n}", "target": "129", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "inc", "dc", "ck", "ctl", "ko", "sch", "sw", "sync", "fc", "tc", "ctrl", "scan", "sq", "cs", "g", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "i1": ["pi2", "li0", "li81", "i81", " i81", "ei0", "ei1", "li3", "xi3", "pi71", "pi1", "i71", "pi0", "ei2", "xi0", " i71", "li1", "ei71", "i0", " i0", "xi81", "xi1"], "i2": [" i20", "oi2", " i02", "ip2", "i20", "xi2", "ip0", "i012", "xi20", "oi012", "ip20", "xi02", "oi20", "ai012", "ai2", "xi0", " i012", "ip02", "ai20", "i0", " i0", "i02"], "i3": ["ui343", "ui3", " i343", " i303", " i5", "phi3", "iri5", " i4", "i512", "ui4", "i5", " i512", "i303", "ii5", "phi303", "iri3", "iri512", " i03", "phi4", "ui303", "ii03", "phi343", "ii3", "i4", "iri03", "ii512", "i343", "i03"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner scanner = new Scanner(System.in);\\n\\n    int N = scanner.nextInt();\\n    int K = scanner.nextInt();\\n    int Q = scanner.nextInt();\\n    int[] win = new int[N];\\n    for (int i = 0; i < Q; i++) win[scanner.nextInt() - 1]++;\\n    for (int i = 0; i < N; i++) {\\n      if (K - Q + win[i] > 0) System.out.println(\"Yes\");\\n      else System.out.println(\"No\");\\n    }\\n  }\\n}\\n", "target": "102", "substitutes": {"scanner": ["canener", "canNER", " scanener", "gateNER", "ScanNER", "gatener", "Scanter", "scanener", "Scanener", "Scaner", "scanNER", "gateer", "gateter", "scanter", "canter", " scanter", "Scanner", "canner", "scaner", " scaner", "caner"], "N": ["Z", "I", "D", "TN", "F", "E", "ND", "NI", "NE", "NB", "n", "O", "No", "S", "P", "T", "NL", "NO", "R", "NS", "NR", "V", "M", "AN", "H", "NC", "C", "NA", "Y", "L", "J", "X", "NN", "NT", "Ns"], "K": ["Z", "I", "D", "F", "MK", "E", "KING", "KE", "KA", "KK", "Ku", "KS", "VK", "G", "S", "KI", "P", "T", "R", "V", "W", "M", "KN", "H", "C", "U", "k", "OK", "KR", "Y", "J", "PK", "X", "UK", "SK", "B"], "Q": ["Z", "I", "q", "D", "F", "E", "HQ", "KE", "NE", "O", "G", "Qu", "MQ", "S", "P", "T", "R", "UE", "V", "QU", "W", "M", "CH", "H", "C", "CL", "U", "Query", "Y", "L", "Should", "J", "IQ", "X", "FF", "QL", "UK", "B", "Qual"], "win": ["wall", " Win", "wx", "cal", "wk", "ax", "bin", "wt", "Win", "draw", "weight", "oss", "wit", "wp", "gui", "conn", "windows", "ws", "wa", "wn", "inn", "lib", "ms", "wal", "get", "val", "wine", "wid", "WIN", "wd", "world", "zip", "words", "won", "lock", "screen", "widget", "port", "des", "w", "local", "man", "box", "pack", "week", "window"], "i": ["I", "ix", "name", "ri", "key", "phi", "hi", "zi", "gi", "iu", "ei", "iy", "base", "ip", "chain", "ji", "li", "id", "v", "m", "ij", "n", "ini", "err", "in", "print", "ai", "ni", "ki", "client", "mu", "im", "ind", "qi", "f", "init", "io", "ims", "z", "j", "bi", "it", "ity", "ui", "is", "ie", "uri", "pi", "g", "ti", "ic", "ci", "c", "sim", "yi", "cli", "PI", "multi", "iter", "gu", "s", "y", "oi", "xi", "ii", "si", "span", "di", "mi"], "nextInt": ["NextInteger", "Nextint", "randFloat", "nextFloat", "nextInteger", "newLong", "randShort", "NextLong", "nextShort", "randInteger", " nextLong", " nextFloat", "newExt", "randInt", "randLong", " nextExt", "invInt", " nextINT", "nextint", "nextINT", "invLong", "NextShort", " nextShort", "nextExt", "invINT", "newInteger", "NextInt", " nextint", "newInt", " nextInteger", "NextFloat", "NextINT", "randint", "NextExt", "invInteger", "nextLong"]}}
{"code": "import java.util.*;\\nclass Main\\n{\\n  static int gcd(int a, int b) \\n    { \\n        if (a == 0) \\n            return b; \\n        return gcd(b % a, a); \\n    } \\n    static int findGCD(int arr[], int n) \\n    { \\n        int result = arr[0]; \\n        for (int i = 1; i < n; i++) \\n            result = gcd(arr[i], result); \\n  \\n        return result; \\n    } \\n  public static void main(String args[])\\n  {\\n    long sum=0;\\n    int a[]=new int [3];\\n    Scanner sc=new Scanner(System.in);\\n    int k=sc.nextInt();\\n    for(int i=1;i<=k;i++)\\n    {\\n      for(int j=1;j<=k;j++)\\n      {\\n        for(int x=1;x<=k;x++)\\n        {\\n            a[0]=i;\\n          \ta[1]=j;\\n          \ta[2]=x;\\n        \tsum+=findGCD(a,3);\\n        }\\n      }\\n    }\\n    System.out.println(sum);        \\n  }\\n}", "target": "6", "substitutes": {"a": ["set", "r", "d", "ta", "parts", "f", "ga", "ao", "trace", "na", "c", "alpha", "e", "as", "ac", "all", "ata", "window", "am", "l", "o", "aa", "app", "sta", "ace", "sha", "z", "xa", "it", "anta", "pa", "ea", "apa", "g", "ba", "w", "exp", "au", "span", "ae", "att", "ar", "al", "val", "act", "ia", "an", "la", "ach", "ma", "p", "ana", "add", "ca", "aq", "oa", "m", "da", "sa", "at", "A", "ab", "div", "area", "aff", "aaa", "action", "aj", "fa", "t", "ache"], "b": ["r", "d", "sb", "base", "ob", "h", "bar", "bc", "value", "v", "m", "bf", "bs", "val", "f", "eb", "fb", "z", "bi", "ib", "nb", "ab", "g", "ba", "bg", "c", "bis", "e", "t", "p", "bb", "ac", "cb", "y", "be", "rb", "B"], "arr": ["dat", "br", "arc", "r", "ix", "coll", "ray", "Array", "ar", "array", "frac", "l", "nr", "rs", "sys", "pl", "ref", "v", "gb", "resp", "bl", "attr", "ars", "Ar", "val", "dict", "arg", "enc", "buf", "res", "list", "ack", "z", "arp", "ab", "arb", "aaa", "np", "rel", "obj", "js", "ins", "ary", "fr", "all", "nt", "ch", "gr"], "n": ["num", "r", "name", "nn", "l", "nr", "len", "N", "h", "o", "ns", "m", "v", "nan", "ne", "nl", "ni", "count", "z", "no", "nb", "g", "na", "fn", "np", "nc", "c", "nm", "w", "t", "p", "net", "nt"], "result": ["set", "r", "true", "cur", "master", "current", "number", "real", "Result", "total", "value", "tmp", "v", "cor", "pair", "mark", "same", "ret", "the", "correct", "currency", "f", "fac", "match", "buffer", "test", "mate", "list", "sequence", "results", "comment", "complete", "vector", "status", "success", "g", "length", "table", "ful", "join", "score", "output", "out", "continue", "integer", "def", "diff", "product", "p", "date", "goal", "rc", "false", "res", "function", "term"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "iii", "on", "ims", "is", "MI", "ic", "ins", "e", "ami", "y", "di", "ri", "l", "ip", "ji", "o", "id", "ij", "in", "client", "iti", "io", "bi", "it", "\u00ed", "inner", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "this", "ind", "ia", "u", "\u0438", "ir", "It", "pi", "xi", "si", "mi", "I", "gi", "v", "ini", "by", "im", "qi", "inter", "index", "us", "init", "ity", "ui", "ie", "ti", "PI", "multi", "iter", "info", "to"], "sum": ["Sum", "num", "sat", "loss", "post", "save", "acc", "cal", "tu", "temp", "total", "zero", " SUM", "sign", "summary", "sa", "su", "square", "mean", "report", "union", "count", "fac", "sort", "mem", "share", "um", "si", "cum", "vol", "score", "mass", "hum", "sim", "max", "out", "black", "sam", "diff", "average", "size", "med", "cost", "hash"], "sc": ["uc", "lc", "acc", "cc", "esc", "sec", "cl", "sys", "system", "sh", "ser", "sv", "sp", "bc", "cr", "cle", "sel", "src", "spec", "sch", "sw", "se", "sync", "tc", "scan", "si", "sq", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "k": ["q", "ke", "key", "kl", "kan", "zero", "ks", "kh", "kr", "m", "dk", "km", "tk", "v", "ck", "ko", "kn", "unk", "ak", "kok", "ki", "spec", "ik", "kk", "ack", "kick", "mk", "g", "ok", "c", "ek", "ku", "sk", "K", "kb", "kind", "ka", "th", "kw", "kid"], "j": ["br", "q", "pt", "ji", "jj", "o", "jo", "v", "ij", "son", "jump", "ne", "jas", "bs", "ge", "ja", "or", "im", "bj", "oj", "job", "u", "z", "bi", "it", "pr", "gov", "uj", "json", "rel", "aj", "js", "obj", "jp", "J", "bo", "fr", "other", "p", "kj", "y", "jc", "dj", "to", "je", "jl"], "x": ["ix", "ex", "wx", "ax", "cox", "l", "co", "yx", "o", "v", "m", "pe", "xf", "xy", "tx", "act", "inx", "xe", "xx", "on", "px", "xc", "z", "xa", "zx", "ext", "dx", "lex", "g", "mx", "xt", "xxx", "c", "xd", "ct", "ph", "w", "X", "e", "rx", "t", "ux", "y", "xi", "xs", "xp", "fx", "ox"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        long sum = sc.nextInt();\\n        int min = (int)sum,max = (int)sum;\\n        for(int i = 1;i < n;++i){\\n            int a = sc.nextInt();\\n            if(max < a) max = a;\\n            else if(a < min) min = a;\\n            sum += a;\\n        }\\n        System.out.printf(\"%d %d %d\\n\",min,max,sum);\\n    }\\n\\n}", "target": "21", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "pl", "bc", "sv", "sp", "cr", "inc", "dc", "ck", "ctl", "ko", "sel", "sch", "sw", "se", "sync", "fc", "tc", "ctrl", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "ng", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch"], "n": ["nu", "num", "mn", "d", "nn", "l", "N", "ns", "m", "conn", "ne", "nan", "nl", "cn", "ni", "sn", "norm", "j", "no", "nb", "na", "nc", "np", "en", "c", "nw", "nm", "ng", "t", "nd", "network", "nor", "ln", "net", "nt", "x"], "sum": ["Sum", "num", "mess", "acc", "mm", "d", "tu", "frac", "temp", "ums", "len", "total", "zero", "sign", "summary", "m", "v", "sa", "su", "mean", "ms", "mu", "scale", "count", "index", "us", "u", "mem", "dev", "um", "si", "full", "cum", "vol", "mod", "length", "na", "hum", "sim", "ass", "alpha", "diff", "sam", "ma", "average", "uint", "mary", "add", "size", "med", "nt", "hash"], "min": ["lt", "offset", "mins", "mm", "cut", "mi", "low", "mini", "beta", "l", "pre", "temp", "part", "Min", "mid", "latest", "m", "minute", "in", "mean", "le", "small", "im", "ind", "start", "minimum", "begin", "index", "amin", "lower", "left", "mit", "inner", "mod", "rel", "hide", "my", "ma", "MIN", "p", "sam", "local", "middle", "man", "first", "just", "st"], "max": ["num", "r", "end", "ex", "ax", "maximum", "prime", "co", "total", "v", "m", "can", "ms", "act", "right", "res", "gt", "view", "range", "mad", "full", "huge", "rest", "na", "mx", "mod", "length", "inv", "ma", "p", "upper", "Max", "up", "last", "MAX", "size", "med", "to", "all", "x"], "i": ["q", "I", "ix", "phi", "gi", "zi", "iu", "ip", "li", "o", "id", "asi", "v", "m", "me", "ini", "ai", "ms", "ind", "index", " j", "us", "init", "io", "j", "bi", "it", "ui", "ie", "pi", "ti", "ic", "ci", "sim", "multi", "info", "y", "ii", "xi", "si", "span", "di", "x", "mi"], "a": ["ae", "ata", "ca", "acc", "eta", "l", "element", "part", "oa", "o", "ta", "v", "aa", "sta", "sa", "aw", "sha", "val", "le", "ya", "A", "b", "at", "f", "ia", "an", "la", "ga", "ao", "j", "xa", "pa", "ea", "area", "apa", "ba", "aaa", "na", "fa", "span", "alpha", "e", "ma", "t", "as", "s", "ac", "p", "ha", "ka", "au", "era", "all", "va", "am"]}}
{"code": "import java.util.Scanner;\\nimport java.util.ArrayList;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString n;\\n\t\tint m, h;\\n\t\tint sum = 0;\\n\t\tint wordLength = 0;\\n\t\tint count = 0;\\n\t\tArrayList<String> wordsList = new ArrayList<String>();\\n\t\tArrayList<Integer> shufflesList = new ArrayList<Integer>();\\n\t\twhile (true) {\\n\t\t\tn = sc.next();\\n\t\t\tif (n.equals(\"-\")) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\twordsList.add(n);\\n\t\t\tm = sc.nextInt();\\n\t\t\tfor (int i = 0; i < m; i++) {\\n\t\t\t\th = sc.nextInt();\\n\t\t\t\tsum += h;\\n\t\t\t}\\n\t\t\twordLength = sum % n.length();\\n\t\t\tshufflesList.add(wordLength);\\n\t\t\tsum = 0;\\n\t\t\tcount++;\\n\t\t}\\n\t\tfor (int i = 0; i < count; i++) {\\n\t\t\tchar[] array = wordsList.get(i).toCharArray();\\n\t\t\tint shuffle = shufflesList.get(i);\\n\t\t\tfor (int j = shuffle; j < array.length; j++) {\\n\t\t\t\tSystem.out.print(array[j]);\\n\t\t\t}\\n\t\t\tfor (int j = 0; j < shuffle; j++) {\\n\t\t\t\tSystem.out.print(array[j]);\\n\t\t\t}\\n\t\t\tSystem.out.println();\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "216", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "mp", "sec", "co", "cl", "sys", "system", "sh", "so", "sv", "sp", "cr", "bc", "inc", "dc", "ctl", "capt", "cle", "spec", "irc", "sch", "sync", "fc", "tc", "ctrl", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "syn", "osc", "jp", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch"], "n": ["nu", "r", "pn", "name", "nn", "l", "nr", "N", "o", "gn", "ns", "node", "v", "dn", "ne", "nan", "nl", "cn", "wn", "ren", "sn", "a", "note", "f", "on", "norm", "an", "u", "nb", "sen", "g", "ner", "na", "fn", "np", "c", "nw", "conf", "nm", "none", "e", "normal", "w", "t", "ng", "p", "network", "s", "ln", "nor", "y", "Name", "nt", "x", " nu"], "m": ["mn", "r", "mm", "dm", "d", "mo", "mask", "mat", "mb", "l", "met", "perm", "me", "meta", "md", "ms", "mean", "mut", "mu", "im", "sm", "f", "M", "mem", "mas", "tm", "gm", "mk", "g", "mod", "cm", "mt", "ma", "middle", "man", "em", "y", "mc", "med", "month", "mi", "am"], "h": ["he", "ho", "r", "rh", "hu", "q", "d", "phi", "hi", "hl", "o", "sh", "kh", "bh", "oh", "hh", "ih", "hz", "hd", "ht", "z", "history", "hex", "hr", "H", "html", "k", "hum", "ph", "w", "p", "ha", "hm", "th", "hs", "ch", "height", "ah", "hash"], "sum": ["Sum", "num", "sat", "result", "acc", "mm", "temp", "weight", "total", "sh", "amount", "zero", "summary", "v", "doc", "mean", "mu", "cache", "index", "us", "mem", "share", "history", "um", "comment", "si", "cum", "vol", "mix", "cm", "length", "mod", "mass", " summed", "sim", "ass", "max", "alpha", "out", "diff", "sam", "average", "info", "add", "size", "med", "hash"], "wordLength": ["wordsDistance", " wordSize", "tokenLength", "wordWidth", "charLen", "wordLen", " wordlength", "WordSize", "charLength", "phraselength", "wordsWidth", "wordDistance", "bytelength", "tokenLen", "phraseWidth", "byteNumber", "WordWidth", "charDistance", "tokenDistance", "wordsLen", "wordSize", "byteLength", "phraseSize", "byteSize", "WordNumber", "wordNumber", "tokenWidth", "phraseLength", "charWidth", " wordWidth", "wordlength", " wordNumber", "WordLength", "wordsLength", "Wordlength"], "count": ["set", "num", "ount", "result", "coll", "found", "current", "number", "total", "now", "amount", "v", "process", "call", "report", "state", "Count", "cache", "ind", "index", "hold", "list", "match", "code", "const", "history", "z", "trace", "find", "nb", "cont", "C", "success", "order", "length", "c", "conf", "max", "ct", "counter", "check", "mount", "cycle", "size", "depth", "nt"], "wordsList": ["wordsSet", "wordsTable", "lettersLock", "phonesL", "wordsL", " wordsSet", "lettersL", "WordsList", "phonesList", "worksTable", "worksList", "wordList", "worksSet", "WordsSet", "phonesLayout", "lettersList", "wordL", "wordTable", " wordsL", "WordsL", "wordLock", "wordsLayout", "phonesSet", "wordsLock", "WordsLayout", " wordsLock", "wordSet", "worksL", " wordsTable", "wordLayout"], "shufflesList": ["shuffeesList", "shufflingStatus", "shippletsList", "shufflersL", "shufflesArray", "shoodleslist", "shipplesStatus", "shufflesL", "shuffersL", "shuffletsList", "shuffersArray", "shuffleL", "shuffledL", "shUFFlesList", "shuffledCollection", "shoodeesList", "shufflingArray", "shuffeesL", "shuffletsStatus", "shufflersCollection", "shoodlesList", "shufflelist", "shufflingL", "shUFFledSet", "shippletsArray", "shuffersList", "shufflesCollection", "shippletsL", "shufflingsList", "shufflerslist", "shipplesList", "shUFFlesSet", "shuffleslist", "shUFFledList", "shufflesLock", "shuffletsArray", "shUFFledCollection", "shufflersLock", "shoodeesLock", "shuffletsL", "shufflingsL", "shufflingsCollection", "shufflesStatus", "shUFFlesCollection", "shipplesL", "shuffledSet", "shUFFlesL", "shufflersSet", "shufflesSet", "shoodeesL", "shipplesArray", "shuffleList", "shuffeesLock", "shuffleLock", "shuffersStatus", "shUFFledL", "shufflersList", "shoodlesL", "shoodeeslist", "shuffeeslist", "shufflingList", "shippletsStatus", "shufflingsSet", "shuffledList", "shoodlesLock"], "i": ["q", "I", "ix", "ex", "ri", "phi", "hi", "zi", "iu", "gi", "fi", "ei", "base", "ip", "chain", "ji", "point", "li", "id", "ij", "me", "ini", "ion", "batch", "this", "series", "ai", "ki", "iii", "or", "iti", "im", "ind", "inx", "ori", "qi", "ia", "init", "\u0438", "io", "bi", "it", "slice", "ui", "ie", "is", "uri", " I", "pi", "g", "status", "ti", "ic", "ci", "sim", "e", "PI", "multi", "info", "iq", "ami", "y", "xi", "ii", "si", "di", "mi", "ish"], "array": ["axe", "result", "ray", "Array", "row", "number", "var", "sh", "value", "tmp", "v", "ash", "word", "attribute", "batch", "pair", "random", "form", "shape", "list", "RAY", "audio", "instance", "buffer", "collection", "arr", "range", "sequence", "object", "stack", "variable", "component", "string", "expression", "vector", "flash", "area", "length", "table", "record", "memory", "my", "answer", "angle", "hash", "air", "integer", "storage", "arrow", "binary", "archive", "function", "window", "map"], "shuffle": ["shickle", "hiny", "swruff", "shift", "Shale", "Shallow", "shuff", "huff", " shruff", "swale", " shale", "Shruff", "sift", " shickle", "shallow", "swuffle", "suffle", "shiny", "shruff", "reshift", "sallow", "huffle", "Shift", "sruff", "reshuffle", "reshruff", "eshiny", "eshuffle", " shuff", " shiny", "shale", "Shickle", "eshuff", "reshallow", "swickle", "Shuffle"], "j": ["br", "q", "ix", "r", "jit", "pt", "og", "key", "att", "l", "jl", "ji", "jj", "jo", "adj", "v", "ij", "jump", "jas", "msg", "ju", "ion", "xy", "ja", "bj", "oj", "__", "job", "z", "Ja", "it", "uj", "g", "k", "json", "js", "aj", "obj", "jp", "ph", "J", "ng", "kj", "jc", "y", "ijk", "je", "dj"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint count = Integer.parseInt(sc.next());\\n\t\tArrayList<Integer> integers = new ArrayList<Integer>(count);\\n\t\tfor (int i = 0; i < count; i++) {\\n\t\t\tintegers.add(Integer.parseInt(sc.next()));\\n\t\t}\\n\t\tint left = 0;\\n\t\tint right = 0;\\n\t\tfor (int i = 0; i < count; i++) {\\n\t\t\tif (right <= left) {\\n\t\t\t\tint size = integers.size() - 1;\\n\t\t\t\tright += integers.get(size);\\n\t\t\t\tintegers.remove(size);\\n\t\t\t} else {\\n\t\t\t\tleft += integers.get(0);\\n\t\t\t\tintegers.remove(0);\\n\t\t\t}\\n\t\t}\\n\\n\t\tif(right>=left) {\\n\t\t\tSystem.out.println(right-left);\\n\t\t}else {\\n\t\t\tSystem.out.println(left-right);\\n\t\t}\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "2", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", "mp", "sec", "cl", "sys", "Scan", "sh", "bc", "sv", "sp", "cr", "dc", "ck", "nl", "ctl", "cle", "irc", "sch", "se", "sync", "fc", "tc", "scan", "sq", "cs", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "count": ["num", "ount", "ctr", "result", "found", "current", "number", "len", "cond", "total", "now", "amount", "n", "context", "err", "currency", "batch", "important", "process", "sum", "Count", "cache", "start", "consider", "index", "list", "code", "type", "force", "const", "hold", "range", "history", "z", "find", "core", "nb", "complete", "cont", "order", "length", "CC", "c", "conf", "max", "span", "ct", "counter", "check", "mount", "ctx", "cycle", "depth", "all", "nt", "ch"], "integers": ["integors", "countors", "intors", "Integors", "Integers", "integered", "Integriers", "centeners", "intERS", " integrators", " integriers", "Integeners", "Integered", "intters", "integurers", "Integters", " integomers", "integerers", "intomers", "Integrators", "centers", "integERS", "intered", "inters", "inturers", "interers", "inteners", "integomers", "intrics", "centERS", "integeners", "intrators", "Integerers", "counters", " integrics", " integerers", "countters", "Integrics", "Integomers", " Integors", " integurers", "integters", " Integered", " Integers", " integters", "integriers", "integrators", "countERS", " Integters", "intriers", "integrics", "Integurers", "IntegERS", "centters"], "i": ["q", "ix", "ex", "phi", "gi", "hi", "iu", "zi", "ei", "iy", "chain", "ip", "ji", "progress", "li", "id", "v", "m", "me", "ini", "err", "print", "ai", "ki", "client", "go", "im", "inx", "ind", "qi", "f", "init", "u", "io", "ims", "z", "j", "bi", "it", "ity", "ui", "ie", "pi", "g", "ti", "ic", "ci", "c", "sim", "my", "cli", "multi", "iq", "iter", "info", "y", "xi", "ii", "si", "di", "mi"], "left": ["lt", "offset", "end", "low", "loc", "limit", "before", "found", "shift", "used", "current", "l", "len", "missing", "free", "let", "level", "top", "nl", "front", "lo", "center", "small", "le", "any", "start", "back", "minimum", "shell", "min", "list", "lower", "bottom", "url", "full", "only", "partial", "data", "inner", "lock", "length", "rest", "wrong", "open", "join", "rel", "none", "old", "body", "L", "out", "local", "middle", "Left", "last", "add", "net", "down", "x", "first", "st"], "right": ["block", "r", "rh", "result", "end", "ax", "before", "row", "after", "red", "total", "and", "rew", "remote", "top", "front", "ro", "cross", "third", "self", "random", "R", "start", "back", "res", "root", "correct", "then", "recent", "range", "radius", "history", "bottom", "chest", "full", "with", "only", "rest", "inner", "length", "wrong", "west", "relative", "head", "rel", "rights", "max", "Right", "out", "reverse", "local", "middle", "role", "Left", "upper", "last", "up", "re", "over", "x", "first", "just"], "size": ["set", "offset", "empty", "key", "shift", "izes", "position", "number", "SIZE", "global", "zero", "needed", "export", "sd", "Size", "source", "ini", "dimension", " sizes", "power", "sum", "get", "small", "ize", "sized", "sn", "any", "start", "scale", "shape", "index", "range", "z", "slice", "space", "string", "year", "no", "full", "zone", "area", "iz", "ss", "length", "ze", "mode", "score", "values", "large", "iterator", "body", "max", "sample", "storage", "style", "capacity", "old", "scope", "parent", "last", "second", "next"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner stdIn = new Scanner(System.in);\\n    int n = stdIn.nextInt();\\n    int max = -2000000000;\\n    int min = stdIn.nextInt();\\n    for (int i = 1; i < n; i++) {\\n      int now = stdIn.nextInt();\\n      if (now - min > max) \\n        max = now - min;\\n      if (now < min)\\n        min = now;\\n    }\\n    System.out.println(max);\\n  }\\n}", "target": "208", "substitutes": {"stdIn": ["STDIn", "stOut", "rdin", "randIns", "standardInput", "stdOut", "stIn", "dIn", "standardIn", "STDOut", "rdIN", " stdIN", "standardOut", "randIn", "rdIns", "STDin", "randin", " stdin", " stdIns", "ndIns", "stdIN", "rdIn", "stdInput", "din", " stdInput", "stin", "dIns", "stInput", "dOut", "STDIns", "ndin", "ndIN", "stdin", "stdIns", " stdOut", "standardin", "ndIn", "randIN"], "n": ["nu", "num", "name", "d", "nn", "l", "number", "N", "h", "ns", "m", "ne", "nan", "nl", "sn", "count", "f", "on", "norm", "j", "no", "nb", " N", "na", "nc", "np", "c", "nw", "t", "p", "network", "ln", "net", "nt", "x"], "max": ["r", "end", "ex", " MAX", "ax", "mask", "maximum", "ox", "prime", "number", "ver", "total", "h", "bar", "id", "value", "m", "v", "default", "tr", "high", "sum", "act", "right", "res", "gt", "scale", "view", "count", "force", " Max", "range", "recent", "dev", "full", "ext", "huge", "rest", "length", "mx", "k", "mod", "head", "conf", "inv", "out", "ma", "t", "Max", "up", "box", "MAX", "size", "med", "all", "last", "x", "window", "hash"], "min": ["lt", "mn", "mins", "mm", "low", "mini", "mask", "un", "pre", "sol", "temp", "Min", "mid", "pl", "minute", "m", "member", "me", "default", "emin", "in", "small", "le", "mr", "im", "start", "mel", "minimum", "south", "begin", "lem", "amin", "sort", "init", "lower", "left", "first", "Mini", "only", "partial", "inner", "lock", "mod", "rel", "none", "hide", "cmp", "nm", "local", "MIN", "ma", "last", "net", "med", "span", "mi", "just", "mit"], "i": ["q", "I", "ix", "ex", "mill", "sql", "phi", "gi", "zi", "chain", "ip", "li", "id", "asi", "m", "me", "ini", "in", "batch", "ai", "ms", "ind", "qi", "us", "sequence", "j", "bi", "it", "ui", "ie", "is", "pi", "ti", "ic", "ci", "sim", "my", "cli", "counter", "multi", "iter", "iq", "y", "xi", "ii", "si", "di", "x", "mi"], "now": ["touch", "save", "post", "wx", "sf", "when", "aaaa", "current", "after", "known", "currently", "and", "wait", "sp", "node", "tmp", "aw", "maybe", "msg", "pair", "raw", "stuff", "get", "where", "small", "ow", "less", "here", "sw", "since", "then", "sm", "on", "gen", "func", "NOW", "force", "ready", "amp", "norm", "always", "full", "Now", "age", "aaa", "asp", "today", "onew", "store", "aj", "obj", "old", "my", "still", "ph", "present", "def", "we", "handle", "down", "time", " NOW", "function", "next", "ord"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint w = sc.nextInt();\\n\t\tint n = sc.nextInt();\\n\t\tint lot[] = new int[w];\\n\\n\t\tString bar;\\n\t\tString s[];\\n\t\tint a;\\n\t\tint b;\\n\t\tint save;\\n\\n\t\tfor (int i = 0; i < w; i++){\\n\t\t\tlot[i] = i + 1;\\n\t\t}\\n\\n\t\tfor (int i = 0; i < n; i++){\\n\t\t\tbar = sc.next();\\n\t\t\ts = bar.split(\",\");\\n\t\t\ta = Integer.parseInt(s[0]);\\n\t\t\tb = Integer.parseInt(s[1]);\\n\\n\t\t\tsave = lot[b-1];\\n\t\t\tlot[b-1] = lot[a-1];\\n\t\t\tlot[a-1] = save;\\n\t\t}\\n\\n\t\tfor (int i = 0; i < w; i++){\\n\t\tSystem.out.println(\"\" + lot[i]);\\n\t\t}\\n\\n\t}\\n}", "target": "156", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sb", "sec", "cgi", "cl", "sys", "sh", "bc", "sv", "sp", "cr", "inc", "ck", "ec", "ctl", "ko", "capt", "cle", "sch", "sync", "fc", "tc", "ctrl", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "screen", "c", "osc", "Sc", "gc", "ng", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "sub"], "w": ["q", "wall", "r", "wx", "d", "wl", "wb", "wt", "l", "wp", "h", "m", "v", "ew", "aw", "wi", "ws", "iw", "wa", "wn", "width", "wal", "sw", "wid", "rw", "wd", "W", "win", "hw", "z", "g", "wr", "k", "ww", "c", "nw", "t", "wh", "p", "wed", "we", "kw", "x", "wind", "window"], "n": ["nu", "r", "d", "nn", "l", "un", "N", "h", "o", "ns", "m", "v", "ne", "nan", "nl", "ni", "an", "z", "j", "no", "na", "k", "fn", "nc", "np", "en", "c", "nm", "t", "p", "nor", "ln", "y", "net", "nt", "x", "non"], "lot": ["loc", "thing", "iot", "log", "bit", "bite", "pid", "plot", "gt", "job", "bott", "yt", "patch", "ot", "last", "net", "archive", "pots", "col", "got", "queue", "l", "like", "little", "hol", "not", "le", "client", "Lot", "pat", "Slot", "it", "year", "league", "child", "project", "holiday", "table", "nothing", "good", "mot", "elt", "nice", "otted", "phi", "hot", "led", "bad", "trial", "boot", "stat", "lib", "val", "lit", "slot", "pot", "zone", "won", "pocket", "keeper", "etc", "shot", "pie", "future", "journal", "entry", "let", "msg", "get", "tick", "rot", "bag", "init", "bug", "bot", "serial", "jet", "pet", "just"], "bar": ["ca", "pie", "star", " bars", "ar", "row", "shift", "base", "watch", "ser", "bart", "log", "hat", "car", "sp", "lab", "tip", "bars", "bed", "cor", "tr", "bridge", "percent", "batch", " BAR", "ski", " barg", "hello", " sidebar", "tick", "str", "cart", "foo", "pause", "begin", "job", "bench", "war", "is", "az", "ab", "pa", "pad", "bot", "browser", "store", "hide", "Bar", "tab", "txt", "my", "char", "era", "ka", "obar", " toolbar", " Bar"], "s": ["gs", "sql", "sf", "aws", "sb", "details", "rs", "ns", "sv", "strings", "m", "sp", "els", "ws", "bs", "parts", "S", "its", "less", "ys", "ats", "se", "sl", "fs", "ls", "ims", "sts", "is", "ts", "sq", "cs", "ss", "js", "ins", "des", "services", "t", "ses", "p", "qs", "ps", "tes", "xs", "ars"], "a": ["ae", "ca", "ar", "ias", "l", "oa", "o", "ta", "m", "aa", "da", "sta", "sa", "ama", "isa", "at", "A", "ia", "u", "an", "la", "ga", "ao", "j", "it", "ab", "ea", "pa", "ba", "na", "c", "aj", "alpha", "ap", "e", "ma", "as", "p", "ac", "au", "va", "am"], "b": ["br", "bas", "d", "wb", "beta", "sb", "l", "rb", "bc", "v", "m", "db", "ad", "aa", "gb", "by", "bs", "lb", "bp", "eb", "f", "u", "fb", "ga", "j", "bi", "ib", "nb", "ab", "g", "ba", "c", "bis", "e", "bo", "t", "p", "bb", "cb", "y", "be", "B"], "save": ["set", "session", "stop", "snap", "end", "skip", "before", "mp", "parse", "Save", "sb", "sav", "sv", "sp", "sign", "wait", "ad", "aa", "db", "sa", "cap", "msg", "su", "update", "close", "isa", "write", "go", "saving", "scale", "start", "ave", "pass", "hold", "load", "send", "sort", "share", "par", "ab", "status", "na", "keep", "apply", "store", "aver", "use", "gc", "cas", "si"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "go", "f", "ims", "is", "you", "eu", "ic", "ami", "oi", "y", "di", "x", "ri", "fi", "l", "ip", "ji", "point", "o", "id", "ij", "in", "ret", "client", "iti", "ori", "bi", "it", "g", "ci", "sim", "cli", "iq", "ii", "span", "phi", "hi", "cgi", "ion", "this", "print", "ind", "u", "pi", "yi", "p", "gu", "xi", "si", "mi", "I", "gi", "iy", "m", "ini", "err", "wi", "im", "inx", "qi", "index", "init", "j", "ity", "ui", "ie", "ti", "multi", "info", "iter"]}}
{"code": "import java.util.Scanner;\\nimport static java.lang.System.out;\\n\\nclass Range {\\n    public void run() {\\n        Scanner scan = new Scanner( System.in);\\n        int a = scan.nextInt();\\n        int b = scan.nextInt();\\n        int c = scan.nextInt();\\n        out.println( ( a < b) ? ( ( b < c) ? \"Yes\" : \"No\") : \"No\");\\n\\n    }\\n}\\n\\npublic class Main {\\n    public static void main( String... args) {\\n        Range test = new Range();\\n        test.run();\\n    }\\n}", "target": "168", "substitutes": {"scan": ["r", "save", "acc", "sql", "row", "bin", "reach", "con", "gate", "pan", "nn", "san", "parse", "ser", "sys", "Scan", "sv", "n", "sin", "util", "read", "in", "stat", "sum", "can", "report", "run", "scale", "se", "warn", "list", "sync", "clean", "search", "send", "scroll", "an", "sc", "find", "is", "ner", "store", "sim", "out", "gc", "check", "black", "info", "sur", "char", " scanner", "re", "conv", "query", "ch", "ann", "see"], "a": ["ae", "va", "ca", "aq", "oa", "ta", "aa", "app", "sta", "sa", "ama", "al", "ak", "ai", "af", "A", "la", "ga", "ao", "j", "ab", "ea", "area", "aff", "ba", "aaa", "ach", "aka", "aj", "alpha", "ma", "as", "ac", "era", "au", "ata", "am"], "b": ["r", "d", "wb", "sb", "ob", "l", "h", "bc", "v", "n", "gb", "db", "bl", "bs", "bp", "ub", "back", "eb", "f", "u", "fb", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bb", "cb", "y", "be", "rb", "B"], "c": ["q", "r", "lc", "ca", "cc", "l", "chain", "cond", "co", "h", "bc", "cr", "ce", "n", "v", "unc", "ch", "dc", "m", "cache", "fc", "f", "u", "tc", "z", "cd", "div", "C", "cs", "g", "nc", "cm", "ci", "ct", "e", "gc", "t", "etc", "x", "ac", "cf"], "test": ["valid", "result", "true", "Test", "feature", "ver", "real", " tested", "server", "v", "py", "train", "batch", "filter", "show", "lib", "val", "run", "spec", "report", "runner", "match", "tc", "range", "unit", "dev", "est", "tests", "rel", "sample", "check", "iter", "fake", " Test", "testing", "tested"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = sc.nextInt();\\n        int[] P = new int[N];\\n        for (int i = 0; i < N; i++) {\\n            P[i] = sc.nextInt();\\n        }\\n        sc.close();\\n\\n        System.out.println(OrdinaryNumber(N, P, 1));\\n    }\\n    public static int OrdinaryNumber(int N, int[] P, int index) {\\n        if (N - 1 <= index) {\\n            return 0;\\n        }\\n        if ((P[index - 1] < P[index] && P[index] < P[index + 1]) ||\\n            (P[index + 1] < P[index] && P[index] < P[index - 1])) {\\n            return 1 + OrdinaryNumber(N, P, index + 1);\\n        }\\n        return OrdinaryNumber(N, P, index + 1);\\n    }\\n}\\n", "target": "96", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sh", "cr", "bc", "sv", "sp", "ck", "ko", "capt", "ctl", "ec", "cle", "sel", "sch", "sw", "sync", "fc", "tc", "ctrl", "scan", "sq", " Sc", "cs", "ss", "nc", "screen", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "st", "sub"], "N": ["D", "I", "Node", "Z", "TN", "F", "FN", "ND", "NM", "SN", "NP", "NE", " n", "NB", "n", "Size", "O", "G", "S", "Ni", "NG", "OUT", "NO", "T", "R", "NS", "Q", "NR", "V", "NH", "M", "AN", "MN", "GN", "NC", "H", "Sn", "C", "Number", "UN", "NN", "Num", "NA", "L", "K", "J", "CN", "Note", "Length", "Index", "CNN", "NI", "NT", "B", "Ns"], "P": ["New", "D", "PO", "I", "HP", "F", "AMP", "E", "PC", "PP", "NP", "JP", "PD", "GP", "At", "SP", "G", "O", "S", "PE", "PRE", "PS", "T", "PU", "BP", "R", "Q", "A", "V", "Pro", "M", "W", "TP", "MP", "IP", "API", "WP", "Part", "PT", "Path", "H", "PM", "AP", "C", "PUT", "LP", "U", "L", "Y", "Policy", "XP", "PK", "PI", "ARP", "J", "PR", "p", "vP", "AR", "K", "PF", "PIN", "HTTP", "DP", "PA", "B", "CP"], "i": ["q", "I", "ix", "ex", "phi", "gi", "hi", "iu", "chain", "ip", "li", "o", "n", "m", "v", "me", "ini", "in", "batch", "ai", "ms", "client", "mu", "im", "qi", "us", "init", "u", "io", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "g", "ti", "ic", "ci", "sim", "my", "cli", "e", "multi", "iter", "p", "mac", "y", "ii", "si", "di", "x", "mi"], "index": ["ix", "offset", "loc", "row", "timeout", "number", "prefix", "n", "exit", "context", "ne", "level", "note", "connection", "open", "parent", "all", "x", "num", "error", "point", "zero", "id", "option", "state", "start", "count", "slice", "degree", "find", "document", "vector", "each", "success", "table", "link", "capacity", "local", "exp", "scope", "label", "page", "example", "second", "seed", "version", "ion", "slot", "ind", "select", "list", "pos", "location", "unit", "status", "head", "request", "other", "p", "date", "localhost", "role", "Index", "column", "height", "active", "empty", "key", "position", "address", "server", "node", "author", "module", "dimension", "path", "update", "negative", "axis", "search", "instance", "loop", "alias", "primary", "IND", "info", "iter", "size"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        long h = sc.nextLong();\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        for(int i = 0 ; i < n ; i++ ){\\n            a[i] = sc.nextInt();\\n            h -= a[i];\\n        }\\n        if(h <= 0){\\n            System.out.println(\"Yes\");\\n        }else{\\n            System.out.println(\"No\");\\n        }\\n        sc.close();\\n    }\\n}", "target": "95", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "esc", "sec", "co", "qu", "cl", "sys", "system", "sh", "pl", "cr", "sv", "sp", "bc", "dc", "ck", "nl", "ctl", "capt", "cle", "cu", "sch", "sync", "fc", "tc", "ctrl", "scan", "sq", "cs", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "scrib", "ch", "desc", "sub"], "h": ["he", "ho", "uh", "r", "rh", "d", "hi", "hl", "l", "hp", "o", "sh", "kh", "m", "v", "bh", "oh", "eh", "high", "hh", "ih", "hz", "hd", "f", "hold", "history", "hex", "j", "hr", "H", "k", "c", "ph", "w", "t", "p", "ha", "hal", "hs", "ah", "hash"], "n": ["num", "mn", "nu", "ll", "nn", "number", "l", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "sn", "count", "j", "no", "nb", " N", "na", "nc", "length", "np", "k", "en", "c", "nw", "nm", "ct", "ot", "w", "ng", "t", "p", "nd", "nor", "ln", "net", "nt"], "a": ["va", "ae", "ca", "att", "l", "oa", "o", "ta", "aa", "da", "sta", "sa", "wa", "at", "b", "A", "ia", "an", "la", "ga", "ao", "ab", "pa", "ea", "apa", "na", "ba", "aaa", "aka", "c", "fa", "alpha", "ma", "as", "p", "ac", "ha", "au", "ata", "am"], "i": ["set", "I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "base", "ei", "chain", "ip", "ji", "fi", "point", "li", "v", "m", "ini", "err", "batch", "ai", "ms", "client", "im", "ind", "qi", "us", "init", "u", "\u0438", "io", "sequence", "j", "bi", "it", "slice", "ui", "is", "ie", "uri", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "iter", "gu", "y", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\nimport java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\twhile(true) {\\n\t\t\tString first = scanner.next();\\n\t\t\tif(first.equals(\"-\")) {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\tint m = scanner.nextInt();\\n\t\t\tfor(int i = 0; i < m; i++) {\\n\t\t\t\tint h = scanner.nextInt();\\n\t\t\t\tfirst = first.substring(h, first.length()) + first.substring(0, h);\\n\t\t\t}\\n\t\t\tSystem.out.println(first);\\n\t\t}\\n\t}\\n}\\n", "target": "216", "substitutes": {"scanner": ["canener", "garners", "corner", " scanatter", " scanener", "garener", "garner", "sanator", "caninner", "Scanter", "scanener", "Scaninner", "Scanener", "corning", "Scaner", "scner", "canator", "scaninner", "scatter", "Scanning", "canning", "canners", "Scanners", "scanners", "Scanatter", "scanter", "corer", " scanning", "scter", "canter", "corener", " scanter", "scanator", "santer", "scener", "Scanner", " scanator", "garinner", "sanning", "canner", "scanning", "scaner", " scaner", "scanatter", "sanner"], "first": ["starter", "lead", "valid", "result", "true", "basic", " First", "st", "before", "current", "pre", "entry", "part", "now", "latest", "prefix", "summary", "top", "transform", "front", "this", "friendly", "print", "raw", "self", "client", "leading", "start", "right", "form", "then", "second", "f", "sort", "force", "test", "fast", "lower", "prev", "must", "frame", "string", "full", "primary", "only", "First", "success", "quick", "head", "alpha", "fr", "pretty", "info", "p", "upper", "last", "header", "all", "title", "initial", "next"], "m": ["mn", "mm", "dm", "d", "mo", "mb", "l", "met", "perm", "n", "v", "om", "ms", "mu", "esm", "sm", "f", "M", "mas", "bm", "gm", "tm", "mx", "cm", "k", "c", "mt", "ma", "wm", "p", "man", "mc", "med", "mi"], "i": ["q", "I", "ix", "ex", "phi", "hi", "zi", "iu", "gi", "ip", "li", "id", "n", "ini", "ai", "qi", "a", "us", "init", "u", "\u0438", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "sim", "cli", "PI", "multi", "iter", "gu", "y", "ii", "xi", "si", "di", "x", "mi"], "h": ["ho", "he", "r", "end", "d", "phi", "hi", "hl", "l", "hp", "o", "sh", "kh", "n", "bh", "oh", "v", "hh", "ih", "zh", "hz", "hd", "index", "f", "u", "z", "hex", "j", "it", "H", "html", "help", "k", "length", "c", "head", "ph", "w", "e", "x", "t", "p", "s", "ha", "y", "hs", "ch", "height"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint d = sc.nextInt();\\n\t\tint n = sc.nextInt();\\n\t\t\\n\t\tif (d == 0) {\\n\t\t\t\\n\t\t\tSystem.out.println((n == 100) ? 101 : n);\\n\t\t\t\\n\t\t} else if (d == 1) {\\n\t\t\t\\n\t\t\tSystem.out.println((n == 100) ? 101 * 100 : n * 100);\\n\t\t\t\\n\t\t} else {\\n\t\t\t\\n\t\t\tSystem.out.println((n == 100) ? 101 * 10000 : n * 10000);\\n\t\t\t\\n\t\t}\\n\t\t\\n\t}\\n\\n}\\n", "target": "245", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "sh", "cr", "bc", "sv", "sp", "inc", "ck", "nl", "ctl", "sel", "cle", "sch", "se", "tch", "tc", "ctrl", "scan", "sq", " Sc", "cont", "cs", "nc", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "scrib", "ch", "desc"], "d": ["dh", "D", "pd", "dat", "dm", "dec", "df", "dim", "l", "dd", "draw", "fd", "did", "de", "da", "dr", "sd", "dc", "dn", "dom", "du", "dig", "dist", "dra", "cd", "days", "dx", "div", "data", "g", "dimensional", "ds", "debug", "diff", "def", "nd", "t", "p", "ld", "dt", "di", "ord"], "n": ["nu", "mn", "num", "pn", "name", "ll", "nn", "l", "un", "nr", "number", "len", "N", "h", "o", "ns", "v", "m", "nan", "ne", "nl", "cn", "not", "ni", "ren", "sn", "a", "b", "note", "f", "on", "norm", "an", "z", "j", "nb", "i", "g", "nc", "fn", "na", "np", "k", "nv", "en", "c", "nw", "tn", "nm", "out", "t", "s", "p", "nor", "ln", "net", "all", "nt", "x", "non"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner scanner = new Scanner(System.in);\\n\\n        int n, m, l;\\n\\n        n = scanner.nextInt();\\n        m = scanner.nextInt();\\n        l = scanner.nextInt();\\n\\n        int[][] a = new int[n][m];\\n        int[][] b = new int[m][l];\\n        long[][] c = new long[n][l];\\n\\n        //create A matrix\\n        for(int arow = 0; arow < n; arow++){\\n            for(int acol = 0; acol < m; acol++){\\n                a[arow][acol] = scanner.nextInt();\\n            }\\n        }\\n\\n        //create B matrix\\n        for(int brow = 0; brow < m; brow++){\\n            for(int bcol = 0; bcol < l; bcol++){\\n                b[brow][bcol] = scanner.nextInt();\\n            }\\n        }\\n\\n        for(int ccol = 0; ccol < l; ccol++){\\n            for(int arow = 0; arow < n; arow++){\\n\\n                for(int acol = 0; acol < m; acol++){\\n                    c[arow][ccol] += (long)a[arow][acol] * (long)b[acol][ccol];\\n                }\\n            }\\n        }\\n\\n\\n        for(int row = 0; row < n; row++){\\n            for(int col = 0; col < l-1; col++){\\n                System.out.print(c[row][col] + \" \");\\n            }\\n            System.out.println(c[row][l-1]);\\n        }\\n\\n        scanner.close();\\n    }\\n}\\n\\n", "target": "204", "substitutes": {"scanner": ["canener", "reachn", "scann", "reachaker", "Scanator", "gaten", " scanener", "canaker", " Scaner", "gateener", "gatener", " Scanner", "Scann", "speter", "cann", " Scanener", "Scanter", "scanener", "Scanener", "Scaner", "canator", "reachner", "reachener", "scanaker", "scanter", "spen", "spener", " Scanter", "scanator", "canter", " scanter", " scanator", "Scanner", "canner", "scaner", " scaner", "gateaker", "speener"], "n": ["nu", "mn", "r", "d", "pm", "nn", "un", "N", "h", "o", "ns", "gn", "conn", "v", "dn", "ne", "nl", "cn", "wn", "ren", "sn", "on", "an", "z", "j", "nb", "i", "g", "na", "fn", "nc", "np", "rn", "en", "nm", "ot", "t", "ng", "nd", "p", "ln", "net", "nt", "x", "am"], "m": ["mn", "r", "mm", "dm", "d", "mo", "met", "o", "perm", "h", "om", "v", "md", "ms", "arm", "mr", "vm", "mu", "im", "rm", "min", "sm", "f", "M", "u", "an", "j", "um", "tm", "gm", "mk", "i", "g", "pi", "mod", "cm", "k", "mt", "ma", "t", "s", "p", "man", "em", "y", "mc", "fm", "mat", "mi", "am"], "l": ["lt", "dl", "il", "lc", "r", "ll", "d", "el", "hl", "len", "kl", "li", "pl", "o", "lp", "v", "al", "nl", "lib", "le", "lit", "lay", "lin", "shell", "sl", "ls", "ml", "z", "i", "g", "lv", "fl", "ell", "ul", "L", "t", "p", "los", "ln", "tl", "ld", "ly", "lu"], "a": ["ae", "ca", "ar", "o", "h", "ta", "aa", "sa", "ai", "f", "an", "la", "ao", "ab", "ea", "ba", "na", "e", "ma", "t", "s", "p", "ac", "x"], "b": ["br", "r", "beta", "ob", "h", "bc", "v", "bf", "bl", "bs", "f", "fb", "j", "bi", "ab", "g", "ba", "bg", "e", "bb", "cb", "y", "be", "rb", "B"], "c": ["r", "lc", "ca", "d", "o", "h", "cf", "cr", "v", "ce", "cn", "f", "u", "z", "cs", "g", "cm", "e", "ct", "t", "s", "p", "y", "x"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static final int MOD = 1_000_000_007;\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int N = sc.nextInt();\\n        int M = sc.nextInt();\\n        int[] a = new int[M];\\n        for (int i = 0; i < M; i++) {\\n            a[i] = sc.nextInt();\\n        }\\n\\n        System.out.println(solve(N, M, a));\\n    }\\n\\n    public static int solve(int N, int M, int[] a) {\\n        if (N == 1) return 1;\\n\\n        int[] nlist = new int[N + 1];\\n        int aidx = 0;\\n\\n        nlist[0] = 1;\\n        if (M != 0 && a[0] == 1) {\\n            nlist[1] = 0;\\n            aidx = 1;\\n        } else {\\n            nlist[1] = 1;\\n        }\\n\\n        for (int i = 2; i <= N; i++) {\\n            if (aidx < M && a[aidx] == i) {\\n                nlist[i] = 0;\\n                aidx++;\\n            } else {\\n                nlist[i] = (nlist[i - 1] + nlist[i - 2]) % MOD;\\n            }\\n        }\\n\\n        return nlist[N];\\n    }\\n}", "target": "174", "substitutes": {"MOD": ["DIR", "POL", "Mod", "METHOD", "MR", "NUM", "SIZE", "MODE", "PER", "OD", "IDENT", "MS", "MW", "REM", "RM", "ADD", "DEV", "NO", "FD", "RO", "MAN", "MD", "DEC", "MED", "AN", "ASH", "AND", "ID", "MAP", "MU", "mod", "VAL", "IND", "MIN", "AD", "LOD", "OR", "MAX", "MT"], "sc": ["usc", "sac", "arc", "uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "ser", "sv", "sp", "cr", "bc", "inc", "ck", "nl", "ctl", "capt", "sel", "cle", "sch", "sync", "fc", "tc", "ctrl", "scan", "sq", " Sc", "cs", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "ng", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "N": ["D", "I", "Node", "TN", "FN", "ND", "NM", "NUM", "SN", "NE", "NB", "n", "Mon", "NV", "EN", "O", "G", "S", "ON", "Ni", "NG", "P", "NO", "T", "NL", "R", "NS", "A", "MAN", "NR", "V", "NH", "AN", "MN", "GN", "NC", "C", "NN", "NA", "Y", "L", "Num", "K", "J", "X", "CN", "CNN", "NI", "NT", "Ns"], "M": ["D", "I", "MO", "F", "MA", "CM", "MH", "MR", "E", "NM", "MODE", "m", "MS", "EM", "O", "G", "MM", "S", "JM", "P", "RM", "T", "MB", "R", "MAC", "MAN", "MD", "V", "ME", "MED", "MP", "MN", "Mi", "PM", "MC", "C", "MU", "U", "Man", "LM", "MI", "IM", "L", "TM", "Memory", "K", "J", "MX", "MT", "B", "OM"], "a": ["ae", "ca", "att", "array", "ar", "oa", "o", "ta", "v", "m", "da", "aa", "app", "sta", "sa", "wa", "ai", "A", "b", "list", "at", "ia", "f", "u", "an", "ga", "ao", "ed", "ab", "ea", "data", "apa", "area", "ba", "aaa", "na", "c", "fa", "alpha", "ap", "w", "ma", "as", "t", "p", "ac", "e", "s", "ana", "au", "aux", "all", "ata", "x", "am"], "i": ["set", "q", "ix", "zi", "iu", "used", "ei", "li", "n", "me", "batch", "lo", "ai", "ki", "f", "ims", "is", "ic", "c", "ami", "y", "oi", "di", "x", "ri", "fi", "l", "chain", "ip", "ji", "o", "id", "ij", "in", "client", "ori", "io", "slice", "bi", "it", "inner", "k", "ci", "sim", "cli", "uni", "ii", "ex", "phi", "hi", "print", "ind", "u", "\u0438", "pi", "p", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "err", "im", "qi", "index", "us", "init", "j", "ui", "ie", "uri", "ti", "PI", "multi", "t", "info"], "nlist": [" nList", "nlink", "Nlist", "andetail", "nabody", "nline", "ynist", "enpair", " nconfig", "cnentry", "nList", "ynline", "nist", "NList", "onlist", "naload", "ndict", "cnlisted", "ntmp", "nlisted", "anload", "nentry", "cnset", "newstack", "newlist", "lrule", "nset", "Nconfig", "lList", "ynbody", "ynList", "newfilter", "antmp", " nnumber", "nnumber", " nentry", "ndetail", "enlist", "enLIST", "ntlink", "npair", "pnlisted", "ynlist", "yntmp", "ntfilter", "anpair", "anbody", "natmp", "nfilter", "onpair", "ntlisted", "netList", " nrule", " nist", "ntList", " nline", "ondetail", "list", "nbody", "anlist", "cnlink", "ynload", "ynnumber", "cnList", "newlisted", "ntstack", "onLIST", "pnstack", "pnentry", "netnumber", "Nlink", "nstack", "nLIST", "cnlist", "pnfilter", "llist", "pnlist", "nconfig", "Nset", "ntlist", "nalist", "ynrule", " ndict", "nrule", "ntset", "ntconfig", "netlist", "endetail", "anLIST", " nlisted", "netline", "ntdict", "nload", "Ndict"], "aidx": ["adxe", "adix", "hdx", "ladx", "aidxe", "aedby", "Aidxe", "Aidrx", "iasx", "adxs", "aidxs", "aidix", "aedx", "ladxs", "iaxes", "hdi", "aidxx", "eddxs", "Aidxs", "modifiedix", "eddwx", "aidX", " aidi", "modifiedi", "aedi", "iawx", "adi", "aidxes", "aidrx", " aidix", "modifiedx", "eddx", "adrx", "aedlex", "aidlex", "aedX", "adX", "modifiedxx", "eddrx", "adx", "aidi", "iasX", "Aidx", "iax", "hdix", "ladwx", "aidby", " aidX", " aidxx", "hdxx", " aidlex", "aedix", "ladxes", "iasby", "eddxe", "iaslex", "aidwx", " aidby", "iaxs", "eddxes"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    final Scanner sc = new Scanner(System.in);\\n\\n    public static void main(String[] args) {\\n        new Main().run();\\n    }\\n\\n    private void run() {\\n        long a = sc.nextLong();\\n        long b = sc.nextLong();\\n\\n        System.out.println(a * b / gcd(a, b));\\n    }\\n\\n    private long gcd(long m, long n) {\\n        long r;\\n        while (n > 0) {\\n            r = m % n;\\n            m = n;\\n            n = r;\\n        }\\n        return m;\\n    }\\n}\\n\\n", "target": "67", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "mp", "sb", "sec", "cl", "sys", "sh", "bc", "sv", "sp", "cr", " scr", "sa", "ctl", "sch", "sm", "sync", "tc", "ctrl", "cv", "scan", "sq", "cs", "g", "sci", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "p", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "psc", "ch", "desc"], "a": ["ae", "ca", "d", "ar", "aq", "l", "oa", "ta", "aa", "da", "aw", "sa", "al", "ai", "af", "A", "at", "f", "ia", "an", "la", "ao", "ab", "pa", "ea", "i", "ba", "na", "aaa", "aka", "c", "aj", "e", "ma", "as", "s", "p", "ac", "au", "va", "x", "am"], "b": ["d", "wb", "sb", "l", "h", "bc", "v", "db", "bf", "bs", "eb", "f", "u", "fb", "bu", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "c", "e", "s", "p", "bb", "y", "be", "rb", "B"], "m": ["num", "mn", "result", "mm", "name", "dm", "d", "pm", "mp", "mb", "l", "o", "h", "perm", "id", "v", "me", "km", "md", "ms", "mr", "rm", "f", "sm", "M", "u", "mem", "um", "bm", "tm", "gm", "i", "g", "k", "cm", "c", "mt", "nm", "t", "p", "man", "y", "mc", "fm", "x", "mi"], "n": ["num", "mn", "nu", "d", "nn", "l", "nr", "number", "len", "N", "o", "h", "ns", "v", "dn", "ne", "nan", "nl", "cn", "ni", "mr", "sn", "an", "j", "no", "nb", "i", "g", "na", "nc", "np", "rn", "en", "c", "nw", "nm", "w", "t", "s", "p", "nd", "nor", "ln", "ng", "nt"], "r": ["rr", "q", "d", "rg", "rar", "l", "nr", "rs", "rf", "h", "o", "rt", "cr", "v", "rd", "dr", "err", "kr", "attr", "mr", "R", "rm", "lr", "f", "rw", "u", "z", "j", "i", "g", "k", "rn", "c", "e", "w", "fr", "t", "x", "p", "er", "rate", "re", "rc", "rb", "sr", "rem"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\\n\t\tdouble debt = 100000;\\n\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\tdebt *= 1.05;\\n\t\t\t// ?????????????????\u00a7????????\u00b4??????????????????\\n\t\t\tif((long)debt % 1000 != 0) {\\n\t\t\t\tdebt /= 1000;\\n\t\t\t\tdebt = Math.ceil(debt);\\n\t\t\t\tdebt *= 1000;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println((long)debt);\\n\t}\\n}", "target": "173", "substitutes": {"sc": ["set", "uc", "lc", "cc", "esc", "cur", "sb", "sec", "cl", "sys", "system", "ser", "sh", "bc", "sv", "sp", "cr", "Scan", "dc", "tk", "nl", "ec", "sel", "sch", "ctrl", "scan", "sq", "cs", "ss", "nc", "ok", "c", "osc", "Sc", "gc", "isc", "SC", "mc", "pc", "rc", "ch"], "n": ["nu", "mn", "num", "d", "ll", "nn", "number", "l", "N", "gn", "ns", "m", "ne", "nan", "nl", "ni", "sn", "count", "norm", "j", "nb", "na", "nc", "k", "np", "en", "c", "nw", "ng", "nd", "t", "network", "p", "ln", "net", "nt"], "debt": ["burt", "debl", "debT", "debtt", "burl", "Debl", " debl", "DebT", "burot", "debot", " debT", " DebT", " Debt", "Debtt", "Debot", "burtt", "Debt", " debot", " debtt", " Debtt", " Debl"], "i": ["q", "I", "ix", "ex", "phi", "gi", "hi", "iu", "ip", "li", "id", "m", "me", "ini", "uu", "ai", "ms", "ki", "mu", "im", "ind", "qi", "b", "us", "init", "u", "io", "sequence", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "iq", "gu", "iter", "ii", "si", "di", "x", "mi"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner in = new Scanner(System.in);\\n\t\tStringBuilder sb = new StringBuilder(in.next());\\n\t\tint ans = 0;\\n\t\tfor (int i = 0; i < sb.length() - 1; i++) {\\n\t\t\tif (sb.charAt(i) == sb.charAt(i + 1)) {\\n\t\t\t\tsb.replace(i + 1, i + 2, sb.charAt(i) == '0' ? \"1\" : \"0\");\\n\t\t\t\tans++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t\tin.close();\\n\t}\\n}", "target": "146", "substitutes": {"in": ["r", "mm", "ri", "gin", "bin", "inf", "con", "from", "l", " din", "isin", "log", "inc", "n", "sin", "ini", "err", "source", "by", "read", "doc", "inn", "file", "sum", "IN", "rin", "get", "ai", "run", "user", "lines", "serv", "ind", "on", "In", "init", "world", "io", "ssl", "reader", "it", "scan", "din", "is", "thin", "inner", "en", "ins", "input", "std", "conf", "out", "cin", "info", "iter", "ln", "all", "line", "sub"], "sb": ["sbm", "sql", "sf", "sg", "ob", "mb", "rb", "orb", "bsp", "now", "sh", "sv", "sp", "zb", "lp", "gb", "bh", "sd", "bf", "sa", "db", "stab", "bs", "buff", "lb", "bp", "sit", "bj", "b", "shell", "eb", "sl", "sm", "ls", "buffer", "ssl", "fb", "sc", "ib", "nb", "sq", "bg", "pb", "bt", "bis", "rob", "kb", "sam", "gc", "bb", "cb", "SB", "bps", "si", "erb", "bash"], "ans": [" means", "ents", "uns", "ros", "offs", "vals", "anas", "anks", "ns", "ads", "ks", "ran", "ends", "ians", "os", "ars", "can", "yes", "ms", "ids", "arts", "ANS", "ys", "sw", "ats", "ens", "ants", "amps", "es", "ls", "an", "ows", "AN", "ann", "vs", "results", "ts", "anes", "cs", "orts", "ups", "has", "ins", "aps", "ds", "as", "s", "ots", "rans", "rows", "span", "lan", "x", "outs", " scans"], "i": ["q", "I", "ix", "ri", "key", "phi", "gi", "zi", "iu", "hi", "ei", "fi", "ip", "ji", "li", "id", "m", "ij", "ini", "ai", "ki", "im", "ind", "qi", "ori", "index", "init", "u", "\u0438", "io", "z", "j", "bi", "it", "slice", "ui", "is", "ie", "uri", "status", "pi", "g", "ti", "ic", "ci", "c", "yi", "my", "cli", "multi", "info", "ami", "y", "oi", "xi", "ii", "iri", "si", "di", "x", "mi"]}}
{"code": "\\nimport java.util.Scanner;\\npublic class Main {\\n   \\n    public static void main(String[] args) { \\n\t\tScanner sc = new Scanner(System.in);\\nint X=sc.nextInt();\\nint Y=sc.nextInt();\\nint Z=sc.nextInt();\\n        System.out.printf(\"%d %d %d\",Z,X,Y);\\n\\n    } \\n}", "target": "149", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sec", "cgi", "cl", "sys", "system", "sh", "cr", "bc", "sv", "sp", "inc", "dc", "tk", "ck", "ctl", "ko", "sch", "cam", "se", "fc", "tc", "ctrl", "scan", "sq", "cont", "cs", "ss", "nc", "pb", "c", "syn", "osc", "jp", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch"], "X": ["I", "Time", "TX", "EX", "CE", "AY", "Win", "RE", "IX", "XY", "DX", "OX", "XXX", "UX", "RY", "R", "A", "W", "ITY", "CH", "XX", "H", "U", "Tx", "TY", "XT", "L", "TH", "XP", "K", "Ex", "MX", "Width", "UT", "XL", "EL", "x"], "Y": ["I", "YA", "My", "Key", "Board", "E", "AY", "Client", "Top", "N", "Gy", "XY", "EY", "Ray", "G", "IO", "RY", "T", "YY", "SO", "V", "Co", "Mouse", "Year", "YD", "IP", "CH", "BY", " y", "MY", "TY", "Py", "J", "y", "HTTP", "YC", "IE", "HY", "B", "TO"], "Z": ["Zone", "D", "I", "BOX", "GREEN", "ZX", "SIZE", "N", "JS", "ZI", "G", "S", "P", "T", "R", "Q", "V", "AZ", "M", "W", "z", "ID", "XX", "H", "C", "U", "TY", "TH", "L", "TON", "SS", "K", "Az", "ZZ", "SC", "B"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        Integer[] L = new Integer[n];\\n\\n        for (int i = 0; i < L.length; i++) {\\n            L[i] = sc.nextInt();\\n        }\\n        Arrays.sort(L, Collections.reverseOrder());\\n\\n        int sum = 0;\\n        for (int i = 1; i < L.length; i++) {\\n            sum += L[i];\\n        }\\n        if(L[0] < sum)  System.out.println(\"Yes\");\\n        else System.out.println(\"No\");\\n        \\n    }\\n}", "target": "25", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "cr", "sv", "sp", "bc", "inc", "dc", "nl", "capt", "ctl", "cle", "sch", "sw", "se", "sync", "tc", "scan", "sq", "cs", "sci", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "sub"], "n": ["num", "mn", "d", "nn", "number", "l", "N", "total", "ns", "m", "v", "ne", "nl", "sn", "a", "count", "z", "j", "no", "nb", " N", "g", "na", "nc", "k", "np", "en", "c", "nm", "out", "ng", "t", "p", "net", "size", "nt", "x"], "L": ["Z", "I", "Lu", "LT", "LB", "BL", "LC", "l", "N", "Li", "TL", "ALL", "LD", "LE", "O", "S", "LI", "P", "LIST", "LL", "NL", "V", "LA", "M", "LOC", "SL", "FL", "AL", "IL", "LP", "CL", "C", "LM", "PL", "LG", "DL", "ML", "LV", "VL", "EL", "XL", "dL", "LU", "LR", "LS", "B"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "f", "is", "ic", "c", "e", "ami", "y", "oi", "di", "ri", "fi", "l", "chain", "ip", "ji", "current", "point", "id", "client", "ori", "io", "bi", "it", "g", "ci", "sim", "cli", "ii", "span", "phi", "hi", "php", "u", "\u0438", "pi", "json", "my", "gu", "xi", "si", "mi", "I", "key", "gi", "v", "m", "ini", "err", "im", "qi", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "info", "iter"], "sum": ["Sum", "num", "sat", "post", "tu", "cos", "base", "temp", "number", "total", "zero", " SUM", "tmp", "v", "summary", "missing", "sa", "tail", "su", "alph", "mean", "mu", "cache", "scale", "count", "index", "us", "fac", "min", "mem", "um", "comment", "scan", "cum", "na", "sim", "max", "ass", "alpha", "out", "sam", "t", "average", "ma", "s", "add", "size", "si", "hash"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String args[]) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n\\n        while(!isPrime(n)) {\\n        \tn++;\\n        }\\n        System.out.println(n);\\n    }\\n\\n    private static boolean isPrime(int n) {\\n    \tif(n <= 1) return false;\\n    \tfor(int i = 2; i * i <= n; i++) {\\n    \t\tif(n % i == 0)\\n    \t\t\treturn false;\\n    \t}\\n    \treturn true;\\n    }\\n}\\n", "target": "183", "substitutes": {"sc": ["usc", "uc", "lc", "acc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "sh", "bc", "cr", "sv", "sp", "cle", "sel", "sch", "enc", "sm", "sync", "tc", "cv", "scan", "sq", "cs", "ss", "nc", "screen", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "n": ["nu", "mn", "num", "q", "d", "nn", "number", "nr", "l", "len", "N", "gn", "total", "ns", "h", "node", "m", "v", "dn", "nan", "ne", "remote", "nl", "cn", "sn", "b", "count", "note", "on", "norm", "None", "z", "j", "no", "nb", "natural", "g", "nc", "na", "k", "np", "c", "nw", "nm", "max", "none", "w", "ng", "t", "p", "nor", "ln", "net", "size", "nt", "x", "non"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "base", "l", "fi", "chain", "li", "o", "v", "m", "dr", "ini", "print", "ai", "ni", "ki", "mu", "ind", "ori", "qi", "b", "ik", "u", "j", "bi", "ui", "is", "pi", "k", "ti", "ic", "ci", "c", "yi", "cli", "uli", "multi", "t", "p", "y", "xi", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        new Main();\\n    }\\n\\n    public Main() {\\n        Scanner sc = new Scanner(System.in);\\n        int aStart = Integer.parseInt(sc.next());\\n        int aEnd = Integer.parseInt(sc.next());\\n        int bStart = Integer.parseInt(sc.next());\\n        int bEnd = Integer.parseInt(sc.next());\\n        int start = Math.max(aStart, bStart);\\n        int end = Math.min(aEnd, bEnd);\\n        int intersection = Math.max(0, end - start);\\n        System.out.println(intersection);\\n    }\\n}\\n", "target": "47", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sec", "cgi", "cl", "sys", "bc", "sv", "sp", "cr", "inc", "dc", "tk", "comm", "ko", "ctl", "ck", "sel", "cle", "irc", "se", "sync", "tch", "fc", "tc", "ctrl", "scan", "sq", " Sc", "cs", "sci", "nc", "c", "syn", "osc", "cmp", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "conv", "psc", "ch", "desc"], "aStart": ["shaStart", "caPart", " aStarting", "shaEnd", " aLead", "aaBegin", "shaBegin", "aLead", " aPart", "aaInit", "alphaStarting", "staStart", "aBegin", "aPart", "caStart", "staBegin", "alphaLead", "alphaStart", "staEnd", "aaStart", "aStarting", "aInit", "caStarting", "caLead", "alphaPart", "aaEnd", "staInit", "shaInit"], "aEnd": ["aMax", "bStop", "aaEND", "aeEnd", "bBegin", "aeMax", "saEND", " aEND", "bMax", "saStop", "aaStop", "saStart", "aBegin", "aStop", "aeEND", "aEND", " aMax", "aaStart", "bEND", "aaEnd", " aBegin", "aeBegin", "saEnd"], "bStart": ["bbEnd", "bbStarting", "aName", "BEnd", "bStarting", "rbBegin", "bBegin", "BBegin", "aBegin", "bbStart", "bName", "rbStarting", " bBegin", "rbStart", " bName", "bbBegin", "BStart", "rbEnd", " bStarting", "BName"], "bEnd": ["rStart", "bbEnd", "iStart", "bbSend", "bbEND", "rEND", "rEnd", "bbStart", "iEND", "bOffset", "aEND", " bSend", "rOffset", "iOffset", "iEnd", "aSend", "bSend", "bbOffset", "bEND", " bEND"], "start": ["set", "stop", "offset", "next", "before", "row", "shift", "from", "part", "id", "in", "Start", "print", "get", "started", "arts", "root", "art", "begin", "a", "min", "index", "init", "left", "it", "i", "rest", "head", "step", "max", "starting", "e", "size", "time", "first", "st"], "end": ["End", "set", "rend", "stop", "offset", "name", "next", "fail", "row", "enable", " End", "ff", "id", "END", "ends", "ended", "close", "act", "begin", "min", "send", "range", "z", "ent", "bound", "vert", "ext", "est", "rest", "length", "en", "max", "e", "nd", "last", "ort", "eng", "all", "st", "ending"], "intersection": ["sectionsection", " intersect", " Intersect", "sectionaction", " interaction", "Intersect", " Intersection", "sectionsect", "intersect", "Intersection", " Interior", "Interior", " interior", "interaction", " interlap", "Interlap", "interlap", "interior", " Interlap", "Interaction"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        int n = sc.nextInt();\\n        int k = sc.nextInt();\\n        String s = sc.next();\\n        String[] str = new String[n];\\n        str = s.split(\"\");\\n        str[k - 1] = str[k - 1].toLowerCase();\\n        for (int i = 0; i < n; i++) {\\n            System.out.print(str[i]);\\n        }\\n    }\\n}", "target": "71", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "sh", "cr", "sv", "sp", "bc", "inc", "ec", "ctl", "ko", "cle", "sch", "sync", "fc", "tc", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "ok", "c", "osc", "cmp", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "sub"], "n": ["nu", "mn", "num", "name", "d", "nn", "l", "nr", "number", "len", "N", "o", "ns", "m", "v", "nl", "cn", "kn", "ni", "sn", "a", "an", "j", "no", "nb", " N", "nc", "na", "np", "length", "nv", "en", "c", "nw", "nm", "ng", "t", "p", "ln", "nt"], "k": ["q", "r", "ke", "d", "key", "l", "kl", "kan", "ks", "v", "m", "kh", "dk", "km", "kr", "tk", "ck", "ko", "kn", "ak", "unk", "spec", "b", "ik", "kk", "kat", "z", "j", "mk", "g", "ok", "ek", "sk", "ku", "K", "w", "t", "p", "kj", "kt", "ka", "kw", "ch", "kid"], "s": ["gs", "r", "sf", "sb", "l", "rs", "sys", "h", "sv", "sp", "v", "m", "strings", "bs", "S", "its", "less", "b", "f", "sl", "ls", "space", "string", "is", "ts", "sq", "g", "ss", "c", "js", "gets", "w", "t", "p", "ps", "st"], "str": ["br", "dat", "r", "result", "ctr", "coll", "STR", "star", "att", "cur", "stick", "rs", "sol", "ns", "tree", "sp", "v", "dr", "tr", "oct", "sta", "rep", "print", "stri", "sw", "res", "form", "list", "sl", "exec", "inst", "arr", "j", "sts", "string", "it", "sty", "url", "Str", "ts", "div", "text", "data", "pr", "vol", "wr", "comp", "obj", "txt", "fr", "exp", "t", "iter", "ust", "nt", "ch", "gr", "desc", "st", "expr"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "chain", "ip", "ji", "li", "m", "me", "ini", "batch", "ai", "ind", "qi", "a", "index", "us", "init", "u", "\u0438", "j", "bi", "it", "ui", "is", "uri", "pi", "ti", "ic", "ci", "sim", "yi", "cli", "multi", "iter", "y", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint count_t = 0;\\n\t\tint count_h = 0;\\n\t\t\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\tString str_t = scan.next();\\n\t\t\tString str_h = scan.next();\\n\t\t\t\\n\t\t\tif(str_t.compareTo(str_h) < 0) {\\n\t\t\t\tcount_h += 3;\\n\t\t\t}else if(str_t.compareTo(str_h) > 0) {\\n\t\t\t\tcount_t += 3;\\n\t\t\t}else {\\n\t\t\t\tcount_h++;\\n\t\t\t\tcount_t++;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(count_t + \" \" + count_h);\\n\t}\\n\\n}\\n\\n", "target": "206", "substitutes": {}}
{"code": "import java.util.HashSet;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String args[]) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = Integer.parseInt(sc.nextLine());\\n        HashSet<String> set = new HashSet<>();\\n        for (int i = 0; i < N; i ++) {\\n            set.add(sc.nextLine());\\n        }\\n\\n        System.out.println(set.size());\\n    }\\n}\\n", "target": "98", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "sh", "bc", "sv", "sp", "cr", "dc", "nl", "capt", "ctl", "cle", "irc", "sch", "sw", "sm", "sync", "fc", "scan", "decl", "sq", "cs", "sci", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "N": ["D", "I", "Z", "TN", "ND", "NM", "SN", "NP", "NE", "NB", "n", "S", "Ni", "NG", "NO", "NL", "NS", "NR", "V", "NH", "M", "GN", "H", "NC", "Sn", "C", "NN", "Num", "Y", "L", "NA", "K", "J", "Net", "NI", "NT", "Ns"], "set": ["subject", "save", "empty", "group", "dec", "parse", "draw", "total", "system", "sh", "reset", "sign", "n", "su", "change", "common", "sche", "equal", "sum", "clear", "get", "start", "se", "shape", "select", "sync", "map", "load", "match", "SET", "collection", "test", "sort", "sequence", "sub", "space", "it", "complete", "see", "et", "mod", "store", "use", "check", "add", "size", "split", "st", "hash"], "i": ["q", "I", "ix", "phi", "gi", "hi", "iu", "ei", "ip", "li", "id", "n", "m", "v", "ini", "in", "uu", "ai", "ki", "client", "mu", "qi", "a", "b", "us", "init", "u", "\u0438", "j", "bi", "it", "ui", "is", "uri", "ie", "pi", "ti", "ic", "ci", "sim", "my", "cli", "e", "multi", "t", "gu", "y", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint aliceStart = sc.nextInt();\\n\t\tint aliceEnd = sc.nextInt();\\n\t\tint bobStart = sc.nextInt();\\n\t\tint bobEnd = sc.nextInt();\\n\t\tint time = 0;\\n\\n\t\tif (aliceStart >= bobStart) {\\n\t\t\tif (aliceEnd >= bobEnd) {\\n\t\t\t\ttime = bobEnd - aliceStart > 0 ? bobEnd - aliceStart : 0;\\n\t\t\t} else {\\n\t\t\t\ttime = aliceEnd - aliceStart;\\n\t\t\t}\\n\t\t} else {\\n\t\t\tif (bobEnd >= aliceEnd) {\\n\t\t\t\ttime = aliceEnd - bobStart > 0 ? aliceEnd - bobStart : 0;\\n\t\t\t} else {\\n\t\t\t\ttime = bobEnd - bobStart;\\n\t\t\t}\\n\t\t}\\n\\n\t\tSystem.out.println(time);\\n\\n\t}\\n\\n}\\n", "target": "47", "substitutes": {"sc": ["usc", "uc", "lc", "acc", "cc", "anc", "esc", "dec", "cgi", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "comm", "ctl", "ko", "ck", "irc", "sch", "se", "sync", "fc", "tc", "ctrl", "scan", "sq", "cs", "sci", "g", "nc", "ss", "c", "osc", "cmp", "Sc", "out", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "st"], "aliceStart": ["aliceData", "aliceMid", "alicerHead", "alieId", "alikeId", "alicestart", "eliestart", "elICEHead", "alICEMid", "alicerBegin", "aluceBegin", "alikeEnd", "alouseStart", "aliceInfo", "elICEEnd", "alieStart", "aliePart", "alicerMid", "alucestart", "alikeFirst", "alicePart", "alriceHead", "eliceStarting", "aliceFirst", "elICEFirst", "alieStarting", "elicestart", "eliceFirst", "alICEId", "eliceEnd", "alICEStarting", "elICEId", "alikeStart", "alICEPart", "elICEMid", "eliceBegin", "elICEData", "aliceStarting", "alicerPart", "alicerEnd", "eliceHead", "eliceId", "elICEInfo", "aliceBegin", "elieEnd", "alicerstart", "elieStart", "alieInfo", "alriceFirst", "alricePart", "alICEEnd", "alicerStart", "aluceEnd", "eliceStart", "elicePart", "alicerStarting", "alouseData", "aliceHead", "alouseEnd", "alieEnd", "alicerData", "alICEStart", "aliestart", "alicerFirst", "elICEStarting", "elICEPart", "aliceId", "alicerInfo", "alICEInfo", "alieFirst", "alieBegin", "elICEStart", "aluceStart", "alICEHead", "elieBegin", "alouseMid", "eliceMid", "alICEFirst", "eliceInfo", "alriceStart", "alICEData", "eliceData"], "aliceEnd": ["eliceend", "elieEl", "alriceMax", "aliceEngine", "alicerEngine", "alenceAll", "alicerBegin", "lieBegin", "alieStop", "aliceMax", "alenceStop", "eluceEl", "aloiceEnd", "aliceEl", "salriceBegin", "alieStart", "aliceStop", "alieEND", "alieAll", "elriceEngine", "aliceEND", "saliceBegin", "eliceEl", "eliceEnd", "lieStop", "alriceEND", "eluceStart", "eliceEngine", "alicerEND", "alriceEngine", "alicerEnd", "alenceStart", "eliceAll", "salriceEND", "aliceBegin", "saliceEND", "elieEnd", "eluceend", "aliceAll", "elriceEnd", "liceStart", "eliceMax", "alenceend", "elieStart", "alieMax", "aloiceMax", "alICEEl", "elieAll", "lieEnd", "aloiceStart", "alenceEnd", "aluceend", "saliceStart", "alicerStart", "alICEEnd", "aluceEnd", "elriceStart", "eliceStart", "alICEend", "alieEnd", "alICEStart", "aliceend", "elriceMax", "alieend", "aluceEl", "alenceEl", "alicerStop", "alicerMax", "liceEnd", "aluceMax", "liceStop", "alriceBegin", "alriceEnd", "saliceEnd", "elieMax", "liceBegin", "alieEl", "alieBegin", "lieStart", "alicerEl", "alicerAll", "aluceStart", "elieend", "aloiceEngine", "alicerend", "salriceEnd", "alriceStart", "salriceStart", "alenceBegin", "eluceEnd"], "bobStart": ["pobStart", "BobbStart", "bobbEnd", "ebobStarting", "babEnd", "bobStarting", "babFirst", "bogFirst", "boreStarting", "babStarting", "pubFirst", "bomId", "pobEnd", "bubStop", "bebStart", "blobStart", "blomId", "boreStart", "BobbEnd", "bobFirst", "ebibstart", "bobsEnd", "boreName", "BobbFirst", "babId", "bobsFirst", "blobStarting", "pubStart", "blomFirst", "bubFirst", "bobbId", "bomEnd", "blobFirst", "bogStarting", "biabId", "biabStarting", "bomFirst", "BobStart", "ebibName", "bobbstart", "bobbName", "ebibStarting", "bomStart", "biobId", "bibstart", "bobId", "bobbStart", "pobStop", "biobStart", "borestart", "bobbFirst", "bubStart", "blomStarting", "bogStart", "biobStarting", "ebibStart", "bobsStop", "biobEnd", "BobId", "blobId", "blomStart", "ebobName", "bomStarting", "bibName", "bobsStart", "bogId", "biabEnd", "bobbStarting", "pobFirst", "biabStart", "bibStart", "BobEnd", "bebStop", "bebFirst", "bobStop", "pubEnd", "BobbId", "bobName", "BobFirst", "bebEnd", "bobstart", "ebobstart", "babStart", "bubEnd", "ebobStart", "bibStarting", "pubStop", "bobsId"], "bobEnd": ["bebMid", "bobbEnd", "babEnd", "bibLen", "bobEl", "bobEst", "babStop", "biibEnd", "sbiceDel", "brblEnd", "sbobEnd", "bowCut", "tabStop", "bbStream", "hobEl", "bomNet", "bbEl", "bobsEnd", "bobsClose", "bebEst", "fbaborEnd", "bblEnd", "bobsEND", "hobEnd", "brblEND", "bblClose", "hbCut", "biibNet", "bobDel", "sbobEst", "bomEnd", "brblClose", "bobClose", "biobend", "fbaborStart", "bblStart", "bobbEst", "sbiceEnd", "bowEnd", "bebDel", "tabLen", "fbobEND", "hbEnd", "tabStart", "bibStop", "baborEnd", "fbobStart", "baborEND", "bbCut", "bobStream", "bowStream", "baborStart", "bibNet", "bobbDel", "boxStart", "bomStart", "hbStream", "biceEnd", "babLen", "bouchEnd", "bibEnd", "tobEnd", "hobCut", "bbEnd", "biobStart", "biceEst", "buffCut", "boxStop", "hobStream", "sbiceMid", "boxLen", "bibEND", "bobLen", "bockStart", "buffStream", "bomend", "biobEnd", "brblStart", "bouchStart", "buffEnd", "sbiceEst", "fbobEnd", "brobEND", "bobend", "biibStart", "bobMid", "tobLen", "bobsStart", "brobStart", "bobCut", "bobEND", "tobStop", "biceMid", "buffEl", "biceDel", "bobbMid", "bibend", "biobNet", "sbobMid", "biibend", "bouchClose", "bibStart", "bblEND", "bowEl", "sbobDel", "brobEnd", "boxEnd", "tobStart", "bouchEND", "bobStop", "bockEND", "bockEnd", "hbEl", "fbaborEND", "bobNet", "tabEnd", "bebEnd", "brobClose", "bobsNet", "babStart", "bobsend"], "time": ["offset", "tim", "Time", "work", "runtime", "track", "etime", "shift", "timeout", "version", "price", "total", "now", "value", "context", "tt", "speed", "distance", "rank", "transform", "power", "process", "sum", "close", "metadata", "start", "inter", "count", "ime", "money", "type", "second", "TIME", "test", "mem", "history", "delay", "sequence", "dev", "trace", "no", "tm", "message", "length", "timer", "event", "memory", "step", "port", "times", "duration", "counter", "check", "t", "date", "clock", "rate", "size", "depth", "cost", "window", "hash"]}}
{"code": "import java.util.*;\\nclass Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        Set<Integer> list = new TreeSet<Integer>();\\n        int count =1;\\n        int min = sc.nextInt();\\n        for(int i = 1;i<n;i++){\\n            int tmp = sc.nextInt();\\n            if(tmp<=min){\\n                count ++;\\n                min = tmp;\\n            }\\n        }\\n        System.out.println(count);\\n    }\\n}\\n", "target": "229", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "sh", "cr", "bc", "sv", "sp", "inc", "dc", "ck", "nl", "ec", "ctl", "cle", "sel", "src", "sw", "se", "sync", "fc", "tc", "ctrl", "cv", "scan", "sq", "cs", "sci", "nc", "pb", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "psc", "ch", "desc"], "n": ["nu", "num", "d", "nn", "l", "nr", "len", "N", "o", "ns", "m", "v", "ne", "nl", "cn", "sn", "pos", "z", "j", "no", "nb", "nc", "na", "k", "np", "en", "c", "nw", "t", "p", "network", "ln", "net", "size", "nt", "x"], "list": ["set", "num", "result", "name", "l", "tree", "v", "m", "batch", "seq", "lists", "index", "type", "test", "sequence", "cont", "status", "table", "obj", "max", "pool", "out", "t", "p", "add", "all", "map"], "count": ["num", "q", "ount", "ctr", "coll", "result", "found", "current", "number", "cond", "total", "amount", "summary", "stat", "batch", "make", "process", "call", "common", "sum", "report", "state", "Count", "ind", "index", "code", "const", "test", "must", "trace", "find", "core", "nb", "child", "cont", "cs", "status", "length", "score", "c", "body", "max", "ct", "out", "counter", "t", "info", "flag", "size", "nt"], "min": ["lt", "mn", "mins", "mini", "mi", "next", "beta", "margin", "mp", "dim", "temp", "Min", "li", "latest", "minute", "m", "rand", "default", "emin", "tail", "in", "stat", "small", "mean", "start", "mel", "minimum", "amin", "init", "lower", "left", "must", "Minimum", "mint", "partial", "mod", "max", "sam", "MIN", "last", "second", "first", "mit", "sub"], "i": ["q", "I", "ix", "phi", "gi", "zi", "iu", "hi", "ip", "li", "id", "v", "m", "me", "ini", "ai", "ms", "ki", "im", "qi", "us", "init", "u", "\u0438", "z", "j", "bi", "it", "ui", "ie", "is", "pi", "ti", "ci", "sim", "my", "cli", "multi", "t", "iter", "y", "ii", "xi", "si", "di", "x", "mi"], "tmp": ["elt", "acc", "mp", "mb", "temp", "prime", "jj", "clip", "perm", "latest", "prefix", "cp", "m", "sp", "tt", "nom", "buff", "attr", "stuff", "same", "xy", "lib", "td", "mut", "inter", "img", "mmm", "yy", "tc", "orig", "prev", "slice", "qq", "sup", "pkg", "mint", "pot", "nb", "mk", "gm", "comp", "np", "emp", "obj", "my", "txt", "cmp", "old", "alpha", "t", "etc", "ctx", "nt", "term"]}}
{"code": "\\nimport java.io.*;\\nimport java.io.BufferedReader; \\nimport java.io.IOException; \\nimport java.io.InputStreamReader;\\nimport java.math.BigInteger;\\nimport java.util.*;\\n\\n\\n/**\\n * @author Utkarsh\\n *\\n */\\npublic  class Main \\n{\\n\\n\t   \\n\t   static class FastReader \\n\t    { \\n\t        BufferedReader br; \\n\t        StringTokenizer st; \\n\t       \\n\t  \\n\t        public FastReader() \\n\t        { \\n\t            br = new BufferedReader(new\\n\t                     InputStreamReader(System.in)); \\n\t        } \\n\t  \\n\t        String next() \\n\t        { \\n\t            while (st == null || !st.hasMoreTokens()) \\n\t            { \\n\t                try\\n\t                { \\n\t                    st = new StringTokenizer(br.readLine()); \\n\t                } \\n\t                catch (IOException  e) \\n\t                { \\n\t                    e.printStackTrace(); \\n\t                } \\n\t            } \\n\t            return st.nextToken();\\n\t            \\n\t        } \\n\t  \\n\t        int nextInt() \\n\t        { \\n\t            return Integer.parseInt(next()); \\n\t        } \\n\t  \\n\t        long nextLong() \\n\t        { \\n\t            return Long.parseLong(next()); \\n\t        } \\n\t  \\n\t        double nextDouble() \\n\t        { \\n\t            return Double.parseDouble(next()); \\n\t        } \\n\t  \\n\t        String nextLine() \\n\t        { \\n\t            String str = \"\"; \\n\t            try\\n\t            { \\n\t                str = br.readLine(); \\n\t            } \\n\t            catch (IOException e) \\n\t            { \\n\t                e.printStackTrace(); \\n\t            } \\n\t            return str; \\n\t        }\\n\\n\t\t\tpublic Character charAt(int i) {\\n\t\t\t\t// TODO Auto-generated method stub\\n\t\t\t\treturn null;\\n\t\t\t}\\n\\n\t\t\tpublic BigInteger nextBigInteger() {\\n\t\t\t\t// TODO Auto-generated method stub\\n\t\t\t\treturn null;\\n\t\t\t} \\n\t    } \\n\\n  \\n\\n\t  // Complete the hurdleRace function below.\\n//    public static void solve() {\\n//    \tFastReader s=new FastReader();\\n\t    int binarySearch(int arr[], int l, int r, int x) \\n\t    { \\n\t        if (r >= l) { \\n\t            int mid = l + (r - l) / 2; \\n\t  \\n\t            // If the element is present at the \\n\t            // middle itself \\n\t            if (arr[mid] == x) \\n\t                return mid; \\n\t  \\n\t            // If element is smaller than mid, then \\n\t            // it can only be present in left subarray \\n\t            if (arr[mid] > x) \\n\t                return binarySearch(arr, l, mid - 1, x); \\n\t  \\n\t            // Else the element can only be present \\n\t            // in right subarray \\n\t            return binarySearch(arr, mid + 1, r, x); \\n\t        } \\n\t  \\n\t        // We reach here when element is not present \\n\t        // in array \\n\t        return -1; \\n\t    } \\n\t  \\n\t    static // Driver method to test above \\n\\n\t// Java implementation of iterative Binary Search \\n\\n\t    // Returns index of x if it is present in arr[], \\n\t    // else return -1 \\n\t    int lowerBound(int[] a,int n,int key){\\n\t        int s =0,e=n-1;\\n\t        int ans = -1;\\n\\n\t        while(s<=e){\\n\t            int mid = (s+e)/2;\\n\\n\t            if(a[mid]==key){\\n\t                ans = mid;\\n\t                e = mid - 1;\\n\t            }\\n\t            else if(a[mid]>key){\\n\t                e = mid - 1;\\n\t            }\\n\t            else{\\n\t                s = mid + 1;\\n\t            }\\n\t        }\\n\\n\t        return ans;\\n\t    }\\n\t    static int count(String se,char c,int l,int r) {\\n\t\t\tif(l==r) {\\n\t\t\t\tif(se.charAt(l)==c)return 0;\\n\t\t\t\telse return 1;\\n\t\t\t}\\n\t\t\tint mid = (l+r)/2;\\n\t\t\tint c1=0,c2=0;\\n\t\t\tfor(int i=l;i<=mid;i++) {\\n\t\t\t\tif(se.charAt(i)!=c)c1++;\\n\t\t\t}\\n\t\t\tfor(int i=r;i>mid;i--) {\\n\t\t\t\tif(se.charAt(i)!=c)c2++;\\n\t\t\t}\\n\t\t\tint y = count(se,(char)((int)c+1),mid+1,r);\\n\t\t\tint x = count(se,(char)((int)c+1),l,mid);\\n\t    \treturn Math.min(c1+y, c2+x);\\n\t    \t\\n\t    }\\n\t    public static double log2(long N) \\n\t    { \\n\t  \\n\t        // calculate log2 N indirectly \\n\t        // using log() method \\n\t        double result = (double)(Math.log(N) / Math.log(2)); \\n\t  \\n\t        return result; \\n\t    }\\n\t    static boolean sign(long n) {\\n\t    \treturn n>0;\\n\t    }\\n\t    public static int solve(long[] ar,int n) {\\n\t    \tlong sum=0;\\n\t    \tfor(int i=0;i<n;i++) {\\n\t    \t\tsum+=ar[i];\\n\t    \t\tif(sum<=0)return 0;\\n\t\t\t}\\n\t    \tsum=0;\\n\t    \tfor(int i=n-1;i>=0;i--) {\\n\t    \t\tsum+=ar[i];\\n\t    \t\tif(sum<=0)return 0;\\n\t    \t}\\n\t\t\treturn 1;\\n\t    }\\n    public static void main(String[] args) throws IOException {\\n    \tFastReader s=new FastReader();\\n    \tint n = s.nextInt();\\n    \tint  count=0;\\n    \tfor(int i=1;i<=n;i++) {\\n    \t\tString se = String.valueOf(i);\\n    \t\tif(se.length()%2==1)count++;\\n    \t}\\n   \t\tSystem.out.println(count);\\n    }\t\\n}\\n//2999999997\\n\\n        \\n    \\n\\n      \\n", "target": "135", "substitutes": {"br": ["r", "next", "sb", "bro", "shr", "nr", "bsp", "vr", "cr", "bc", "sp", "kr", "dr", "bh", "tr", "ber", "bridge", "bre", "Tr", "bl", "bs", "bn", "bp", "brace", "Br", "mr", "ger", "buf", "BR", "b", "bd", "lr", "hr", "pr", "ptr", "wr", "bra", "bt", "rel", "browser", "rob", "jp", "fr", "bb", "rb", "gr"], "st": ["stage", "pt", "sb", "l", "sth", "cl", "rt", "sh", "so", "cr", "sp", "tmp", "sv", "tr", "sta", "stat", "bl", "ste", "nt", "St", "sn", "stri", "sw", "ut", "start", "se", "ist", "sm", "sl", " superst", "inst", "const", "z", "ost", "stack", "sts", "sty", "ts", "est", "rest", "ss", "et", "bt", "std", "step", "mt", "ct", "storage", "sam", "t", "nd", "p", "ft", "stable", "be", "th", "ust", "ST", "first"], "str": ["r", "result", "ctr", "STR", "next", "cur", "shr", "chain", "del", "ns", "cr", "sp", "n", "v", "dr", "tr", "source", "msg", "raw", "doc", "print", "stri", "pse", "buf", "buffer", "arr", "sequence", "ent", "string", "Str", "pr", "cont", "text", "data", "rec", "c", "output", "txt", "e", "fr", "t", "s", "char", "p", "ps", "res", "gr"], "i": ["I", "r", "d", "iu", "li", "o", "h", "v", "m", "n", "im", "a", "b", "f", " j", "z", "j", "it", "pi", "ci", "c", "e", "t", "p", "ii", "si", "x"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n/**\\n * @author Yuki\\n */\\npublic class Main {\\n\\n\t/*** \u5229\u5b50 */\\n\tprivate final static double INTEREST = 1.05;\\n\t/*** \u5207\u308a\u4e0a\u3052\u984d */\\n\tprivate final static double REVALUATION = 1000;\\n\t/*** \u501f\u91d1 */\\n\tprivate static int debt = 100000;\\n\t/*** \u6587\u5b57\u578b\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\uff08\u6a19\u6e96\u5165\u529b\uff09 */\\n\tprivate static BufferedReader br;\\n\t/*** \u9031 */\\n\tprivate static int weekNum;\\n\\n\t/*** \u521d\u671f\u5316 */\\n\tstatic {\\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t}\\n\\n\t/**\\n\t * \u30e1\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9<br>\\n\t * \u501f\u91d1\u306e\u6b8b\u9ad8\u3092\u51fa\u529b\u3059\u308b\\n\t *\\n\t */\\n\tpublic static void main(String[] args) throws IOException {\\n\\n\t\tweekNum = Integer.parseInt(br.readLine());\t// \u9031\u3092\u53d6\u5f97\\n\\n\t\tSystem.out.println(getTotalDept());\t// \u501f\u91d1\u306e\u6b8b\u9ad8\u306e\u51fa\u529b\\n\\n\t}\\n\\n\t/**\\n\t * \u501f\u91d1\u306e\u6b8b\u9ad8\u3092\u53d6\u5f97\u3059\u308b \u5229\u5b50\u3092\u304b\u3051\u305f\u9031\u306e\u5408\u8a08\u306e\u501f\u91d1\u3092\u8a08\u7b97\u3057\u3066\u8fd4\u3059\\n\t *\\n\t * @return \u501f\u91d1\u306e\u6b8b\u9ad8\\n\t */\\n\tprivate static int getTotalDept() {\\n\t\tdouble debtTemp = debt / REVALUATION;\\n\t\tfor (; weekNum > 0; weekNum--) {\\n\t\t\tdebtTemp = Math.ceil(debtTemp * INTEREST); // \u5207\u308a\u4e0a\u3052\\n\t\t}\\n\t\treturn (int) (debtTemp * REVALUATION);\\n\t}\\n\\n}", "target": "173", "substitutes": {"INTEREST": ["interVAL", "INTERENTION", "interITY", " INTERITY", "ALTVAL", "ALTITY", "INTERVAL", "ALTEST", " INTERENTION", "ALTENTION", "interENTION", "interEST", "INTERITY", " INTERVAL"], "REVALUATION": ["REVALUEITY", "REVALUEATION", "REVALUATE", "REVALUENCY", "REVUENCY", "REVUATION", "REVALULATION", "REVALUEATE", "REVUITY", "REVUATE", "REVURITY", "REVALUEENCY", "REVALURITY", "REVALURATE", "REVALURATION", "REVALULENCY", "REVURATION", "REVALUITY", "REVURENCY", "REVALURENCY", "REVURATE", "REVALULITY", "REVALULATE"], "debt": [" amtc", "Debt", "DebT", " amit", "burt", " amt", "burit", "debtc", "burtc", " amT", "debT", "Debit", "Debtc", "debit", "burT"], "br": ["gs", "r", "pt", "nah", "bro", "shr", "bsp", "cr", "ber", "bc", "kr", "dr", "bh", "tr", "gb", "bridge", "bl", "bs", "bn", "bp", "brace", "Br", "mr", "ger", "buf", "BR", "obo", "b", "lr", "bd", "arr", "bern", "hr", "repl", "bm", "pr", "ba", "bt", "yr", "fr", "er", "bb", "rb", "ch", "gr"], "weekNum": ["WeekNum", "dayOrd", "weeklyName", "weeklyNum", "weekName", " weekNumber", " weeknum", "hourNum", "hourNumber", "dayNumber", "weekNumber", "WeekNo", "dayMan", "weekMan", "weeklyOrd", "weeknum", "weeklyNo", "weekOrd", "dayNo", "daynum", "hournum", " weekMan", "dayName", "dayNum", "WeekOrd", "hourMan", "WeekName", "weekNo"]}}
{"code": "\\nimport java.util.*;import java.io.*;import java.math.*;\\n\\npublic class Main\\n{\\n\\n    public static void process()throws IOException\\n    {\\n        char arr[]=(\" \"+nln()).toCharArray();\\n        int n=arr.length-1;\\n\\n        int i=n/2,j=n/2+1+(n&1);\\n        int res=0;\\n        while(i>=1 && j<=n){\\n            if(arr[i]!=arr[j])\\n                res++;\\n            i--;\\n            j++;\\n        }\\n        pn(res);\\n    }\\n\\n\\n    static AnotherReader sc;\\n    static PrintWriter out;\\n    public static void main(String[]args)throws IOException\\n    {\\n        out = new PrintWriter(System.out);\\n        sc=new AnotherReader();\\n        boolean oj = true;\\n\\n        //oj = System.getProperty(\"ONLINE_JUDGE\") != null;\\n        if(!oj) sc=new AnotherReader(100);\\n\\n        long s = System.currentTimeMillis();\\n        int t=1;\\n        //t=ni();\\n        while(t-->0)\\n            process();\\n        out.flush();\\n        if(!oj)\\n            System.out.println(System.currentTimeMillis()-s+\"ms\");\\n        System.out.close();  \\n    }\\n    \\n    \\n    static void pn(Object o){out.println(o);}\\n    static void p(Object o){out.print(o);}\\n    static void pni(Object o){out.println(o);System.out.flush();}\\n    static int ni()throws IOException{return sc.nextInt();}\\n    static long nl()throws IOException{return sc.nextLong();}\\n    static double nd()throws IOException{return sc.nextDouble();}\\n    static String nln()throws IOException{return sc.nextLine();}\\n    static long gcd(long a, long b)throws IOException{return (b==0)?a:gcd(b,a%b);}\\n    static int gcd(int a, int b)throws IOException{return (b==0)?a:gcd(b,a%b);}\\n    static int bit(long n)throws IOException{return (n==0)?0:(1+bit(n&(n-1)));}\\n    static boolean multipleTC=false;\\n    static long mod=(long)1e9+7l;\\n\\n    static void r_sort(int arr[],int n){\\n        Random r = new Random(); \\n        for (int i = n-1; i > 0; i--){ \\n            int j = r.nextInt(i+1); \\n                  \\n            int temp = arr[i]; \\n            arr[i] = arr[j]; \\n            arr[j] = temp; \\n        } \\n        Arrays.sort(arr); \\n    }\\n\\n    static long mpow(long x, long n) {\\n        if(n == 0)\\n            return 1;\\n        if(n % 2 == 0) {\\n            long root = mpow(x, n / 2);\\n            return root * root % mod;\\n        }else {\\n            return x * mpow(x, n - 1) % mod;\\n        }\\n    }\\n    \\n    static long mcomb(long a, long b) {\\n        if(b > a - b)\\n            return mcomb(a, a - b);\\n        long m = 1;\\n        long d = 1;\\n        long i;\\n        for(i = 0; i < b; i++) {\\n            m *= (a - i);\\n            m %= mod;\\n            d *= (i + 1);\\n            d %= mod;\\n        }\\n        long ans = m * mpow(d, mod - 2) % mod;\\n        return ans;\\n    }\\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    static class AnotherReader{BufferedReader br; StringTokenizer st;\\n    AnotherReader()throws FileNotFoundException{\\n    br=new BufferedReader(new InputStreamReader(System.in));}\\n    AnotherReader(int a)throws FileNotFoundException{\\n    br = new BufferedReader(new FileReader(\"input.txt\"));}\\n    String next()throws IOException{\\n    while (st == null || !st.hasMoreElements()) {try{\\n    st = new StringTokenizer(br.readLine());}\\n    catch (IOException  e){ e.printStackTrace(); }}\\n    return st.nextToken(); } int nextInt() throws IOException{\\n    return Integer.parseInt(next());}\\n    long nextLong() throws IOException\\n    {return Long.parseLong(next());}\\n    double nextDouble()throws IOException { return Double.parseDouble(next()); }\\n    String nextLine() throws IOException{ String str = \"\"; try{\\n    str = br.readLine();} catch (IOException e){\\n    e.printStackTrace();} return str;}}\\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n}", "target": "115", "substitutes": {"arr": ["dat", "br", "arc", "r", "coll", "ray", "emb", "ll", "Array", "cur", "array", "ar", "mat", "pre", "pl", "vec", "tmp", "ij", "dr", " str", "db", "err", "aa", "gb", "alph", "bl", "rep", "buff", "seq", " narr", "attr", "Ar", "arg", "val", "enc", "pp", "hist", "buf", "str", "ang", "img", "arp", "par", "pr", "ab", " barr", "arb", "aaa", "vol", "np", "rel", "obj", "fr", "au", "expr", "nt", "ev", "gr", "hash"], "n": ["nu", "mn", "r", "q", "num", "name", "d", "ll", "nn", "l", "len", "N", "h", "o", "ns", "m", "v", "nan", "ne", "nl", "cn", "ni", "ren", "sn", "a", "norm", "z", "nb", "g", "nc", "k", "na", "np", "en", "c", "nm", "none", "w", "ng", "t", "p", "net", "all", "nt", "x", "names"], "i": ["I", "r", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "ei", "l", "fi", "ip", "o", "li", "h", "id", "ij", "v", "m", "ini", "in", "ai", "ni", "ki", "ori", "inter", "index", "ir", "bi", "it", "ui", "is", "pi", "ti", "ic", "ci", "sim", "multi", "p", "ami", "ii", "xi", "si", "di", "x", "mi"], "j": ["br", "q", "jac", "r", "pt", "l", "jl", "ji", "jj", "o", "jo", "v", "ij", "m", "jump", "ja", "ind", "bj", "b", "note", "f", "z", "bi", "it", "pr", "uj", "g", "k", "json", "bot", "js", "aj", "obj", "jp", "J", "fr", "p", "kj", "jc", "x", "dj"], "res": ["result", "mask", "row", "vals", "pre", "sol", "cond", "red", "nr", "ress", "zero", "reset", "conn", "Res", "rand", "resp", "sum", "os", "nz", "ms", "ret", "index", "us", "req", "pos", "resh", "results", "pers", " Res", "is", "cs", "rest", "vol", "rel", "js", "obj", "RES", "cons", "re", "ps", "resolution", "pres", "gr", "rem", "expr"], "sc": ["usc", "uc", "lc", "cc", "esc", "mp", "cl", "sys", "ser", "sh", "bc", "cr", "sp", "dc", "ec", "sch", "sw", "fc", "tc", "cv", "cs", "ss", "nc", "c", "syn", "osc", "ct", "Sc", "gc", "ac", "SC", "mc", "pc", "rc", " subsc", "ch", "st"], "out": ["println", "ou", "r", "result", "ex", "name", "writer", "error", "co", "o", "sys", "log", "v", "ch", "err", "in", "STDOUT", "print", "OUT", "os", "file", "report", "write", "client", "str", "b", "us", "io", "aos", "Out", "g", "off", "screen", "c", "output", "input", "display", "w", "ot", "t", "s", "p", "info", "dir", "net", "all", "nt", "outs"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        new Solver().run();\\n    }\\n}\\n\\nclass Solver {\\n\\n    public void run() {\\n        Scanner sc = new Scanner(System.in);\\n        char[] S = sc.next().toCharArray();\\n        long K = sc.nextLong();\\n\\n        int ans = 1;\\n        for (int i = 0; i < S.length; i++) {\\n            char ch = S[i];\\n            if (ch == '1') {\\n                if (K - 1 == i)  {\\n                    ans = 1;\\n                    break;\\n                }\\n            } else {\\n                ans = ch - '0';\\n                break;\\n            }\\n\\n        }\\n\\n        System.out.println(ans);\\n        return;\\n    }\\n\\n}", "target": "38", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "sh", "cr", "bc", "sv", "sp", "inc", "dc", "ec", "capt", "ctl", "cle", "src", "sch", "sw", "sync", "tc", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "desc"], "S": ["Screen", "I", "D", "CS", "SI", "TS", "N", "SN", "SM", "JS", "SQL", "ASC", "SA", "SP", "SE", "G", "P", "PS", "T", "SU", "R", "NS", "A", "SF", "V", "Si", "M", "ASS", "RS", "SL", "BS", "SAN", "C", "Source", "WS", "AS", "L", "SS", "GS", "SER", "s", "DS", "VS", "SB", "B"], "K": ["Z", "I", "F", "B", "KA", "N", "KK", "KS", "VK", "KC", "G", "KI", "P", "T", "KB", "Q", "V", "M", "DK", "KN", "H", "HK", "C", "k", "KR", "AK", "TH", "L", "J", "PK", "X", "UK", "FK", "SK", "KY"], "ans": [" means", " Ans", "uns", "ros", "ons", "eps", "ents", "offs", "vals", "pan", "anas", "rs", "anks", "reads", "aus", "oos", "outs", "eds", "ns", "asks", "ks", "ads", "asts", "ces", "beans", "ends", "ians", "os", "ms", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "ls", "an", "AN", "mas", "anes", " spans", " scans", "cs", "An", "ins", "ds", "olds", "aps", "arms", "vers", "as", "cons", "s", "posts", "actions", "xs", "rans", "lets", "lan", "wan", "ars", "ann"], "i": ["I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "l", "chain", "ip", "ji", "number", "point", "li", "id", "v", "m", "ij", "me", "ini", "in", "print", "ski", "ai", "ki", "im", "ind", "ori", "qi", "index", "us", "init", "u", "ims", "j", "bi", "it", "ui", "ie", "uri", "pi", "k", "ti", "ic", "ci", "c", "yi", "cli", "my", "multi", "p", "y", "oi", "ii", "xi", "si", "di", "x", "mi"], "ch": ["br", "q", "cht", "ctr", "cur", "l", "qu", "cl", "h", "ich", "sh", "sv", "ech", "v", "cp", "cor", "cap", "buff", "pol", "och", "sch", "form", "str", "zh", "tch", "che", "Ch", "cho", "z", "CH", "j", "bi", "vc", "cha", "ach", "cod", "c", "com", "ph", "ot", "wh", "char", "th", "chan", "x"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\t\\n\t\tint count = 0;\\n\t\tfor (int i = 1; i <= n - 1; i++) {\\n\t\t\tcount+= i;\\n\t\t}\\n\t\tfor (int i = 1; i <= m - 1; i++) {\\n\t\t\tcount+= i;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n\\n}\\n", "target": "49", "substitutes": {"scan": ["set", "seek", "r", "skip", "row", "nn", "bin", "reach", "gate", "parse", "san", "cgi", "sys", "Scan", "system", "connect", "sv", "sin", "util", "read", "in", "by", "sum", "can", "get", "report", "auto", "se", "sm", "search", "sync", "send", "scroll", "an", "sort", "range", "sc", "find", "ner", "g", "store", "out", "black", "check", "gc", "info", "sur", "char", "re", "trans", "proc", "query", "ch", "ann"], "n": ["nu", "num", "r", "name", "d", "nn", "nia", "l", "un", "N", "o", "ns", "v", "conn", "ne", "nl", "cn", "ni", "sn", "act", "on", "an", "no", "nb", "nc", "na", "np", "en", "c", "nw", "t", "p", "network", "y", "nt", "x"], "m": ["mn", "r", "mm", "d", "dm", "pm", "mp", "l", "h", "o", "v", "om", "ms", "mr", "rm", "b", "f", "sm", "M", "j", "bm", "gm", "tm", "g", "k", "cm", "mx", "c", "mt", "e", "ma", "t", "p", "y", "mc", "mi"], "count": ["num", "ount", "result", "limit", "reported", "found", "base", "number", "cond", "total", "log", "now", "amount", "conn", "summary", "stat", "cast", "batch", "process", "print", "sum", "report", "search", "Count", "ind", "cache", "list", "index", "hold", "match", "force", "test", "scroll", "code", "sequence", "history", "must", "find", "core", "nb", "C", "status", "length", "collect", "table", "c", "counter", "check", "t", "iter", "add", "th", "size", "quiet", "flag", "nt"], "i": ["I", "ix", "phi", "gi", "zi", "iu", "hi", "php", "ei", "iy", "chain", "ip", "ji", "entry", "l", "li", "id", "ij", "ini", "err", "ski", "ai", "ni", "ki", "itime", "iii", "client", "iti", "im", "ind", "inx", "qi", "ori", "index", "f", "init", "\u0438", "io", "z", "j", "bi", "it", "ity", "ui", "is", "ie", "uri", "pi", "inner", "ti", "ic", "ci", "sim", "cli", "multi", "integer", "iq", "info", "p", "y", "oi", "xi", "ii", "si", "di", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n    \\n    Scanner sc = new Scanner(System.in);\\n\t\tint K = sc.nextInt();\\n\t\tint X = sc.nextInt();\\n\\n    for(int i=-K+1; i<0; i++){\\n        System.out.print(X+i +\" \");\\n}\\n    for(int j=0; j<K; j++){    \\n\t\tSystem.out.print(X+j +\" \");\t    \\n\t}\\n}\\n}", "target": "207", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "cr", "bc", "sv", "sp", "inc", "dc", "ck", "ctl", "cle", "sch", "sw", "sync", "tc", "scan", "sq", "cs", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "sr", "isc", "SC", "mc", "pc", "rc", "ch"], "K": ["Z", "I", "D", "F", "Key", "KE", "Kind", "KA", "N", "KK", "KS", "VK", "KC", "G", "S", "KI", "P", "T", "R", "Q", "A", "V", "M", "KN", "H", "C", "U", "k", "Kent", "KR", "Y", "L", "J", "PK", "UK", "FK", "SK", "KEY"], "X": ["Z", "I", "F", "TX", "E", "EX", "ZX", "FX", "CE", "IX", "N", "FIX", "XY", "DX", "OX", "XXX", "P", "UX", "ACE", "Context", "T", "Q", "V", "ICE", "W", "ID", "XX", "H", "C", "XT", "Y", "L", "J", "XP", "MX", "XL", "HTTP", "x"], "i": ["ix", "ri", "phi", "gi", "zi", "iu", "hi", "ip", "ji", "li", "v", "ij", "ini", "wi", "ani", "ai", "ni", "ki", "iii", "iti", "im", "qi", "ori", "inter", "init", "u", "\u0438", "ir", "bi", "it", "aci", "ui", "is", "ie", "\u00ed", "pi", "k", "ti", "ci", "sim", "yi", "multi", "iq", "iter", "ami", "y", "iri", "xi", "ii", "si", "di", "x", "mi"], "j": ["br", "q", "jac", "pt", "key", "att", "jl", "ji", "jj", "jo", "n", "ij", "m", "v", "jump", "jas", "ne", "ge", "cell", "ja", "im", "ind", "art", "bj", "b", "oj", "us", "job", "yy", "z", "bi", "it", "pr", "g", "uj", "k", "json", "js", "obj", "aj", "old", "jp", "J", "other", "kj", "y", "jc", "ort", "je", "dj", "next"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        FastScanner scanner = new FastScanner();\\n        PrintWriter out = new PrintWriter(System.out,false);\\n        char[] str = scanner.next().toCharArray();\\n        for(int i = 0; i < str.length; i++) {\\n            if (i % 2 == 0) {\\n                if (str[i] == 'L') {\\n                    System.out.println(\"No\");\\n                    return;\\n                }\\n            }else {\\n                if (str[i] == 'R') {\\n                    System.out.println(\"No\");\\n                    return;\\n                }\\n            }\\n        }\\n        out.println(\"Yes\");\\n        out.flush();\\n    }\\n    \\n    public static class FastScanner {\\n        BufferedReader br;\\n        StringTokenizer st;\\n        \\n        public FastScanner(Reader in) {\\n            br = new BufferedReader(in);\\n        }\\n        \\n        public FastScanner() {\\n            this(new InputStreamReader(System.in));\\n        }\\n        \\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n        \\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n        \\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n        \\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n        \\n        String readNextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n}\\n", "target": "205", "substitutes": {"scanner": ["canener", " scanener", "scer", "Scanter", "scanener", "Scanener", "Scaner", "scner", "scanter", "scter", "canter", " scanter", "scener", "Scanner", "canner", "scaner", " scaner", "caner"], "out": ["r", "outer", "bin", "timeout", "log", "n", "console", "os", "Out", "conf", "pool", "parent", "net", "all", "res", "window", "error", "sys", "o", "conn", "OU", "client", "io", "it", "full", "inner", "txt", "inv", "ln", " Out", "ex", "flush", "writer", "tree", "boot", "this", "print", "OUT", "file", "write", "cache", "auto", "list", "cmd", "status", "screen", "json", "output", "input", "ch", "outs", "println", "ou", "name", "con", "err", "msg", "cn", "report", "user", "at", "buffer", "aos", "null", "obj", "t", "info", "to", "nt", "gr"], "str": ["r", "cr", "sp", "n", "raw", "pr", "data", "e", "del", "res", "next", "ctr", "cur", "rs", "chain", "ns", "read", "comm", "ret", "form", "arr", "ent", "hex", "cs", "g", "wr", "txt", "fr", "exp", "s", "expr", "dat", "elt", "result", "STR", "att", "dr", "tr", "seq", "print", "spec", "pse", "list", "req", "string", "sts", "Str", "rel", "input", "p", "stable", "ch", "name", "v", "err", "msg", "ocr", "enc", "buf", "buffer", "dist", "j", "div", "text", "vol", "obj", "t", "char", "desc"], "i": ["ix", "iu", "ei", "li", "n", "me", "batch", "ai", "ms", "ki", "is", "ic", "c", "ami", "y", "oi", "di", "x", "ip", "ji", "o", "id", "gravity", "ori", "a", "io", "slice", "bi", "it", "g", "ci", "sim", "cli", "exp", "ii", "span", "ex", "hi", "ind", "list", "u", "status", "pi", "json", "my", "xi", "si", "mi", "I", "key", "sql", "gi", "v", "m", "ini", "ski", "get", "any", "im", "qi", "b", "index", "us", "init", "j", "ui", "ie", "uri", "ti", "multi", "iter", "info"], "br": ["r", "ctr", "pt", "next", "bro", "shr", "bsp", "vr", "cr", "ber", "sp", "kr", "dr", "bh", "tr", "bridge", "err", "bre", "bl", "bs", "bn", "bp", "ro", "Br", "mr", "buf", "BR", "b", "lr", "rain", "hr", "bm", "pr", "ptr", "wr", "bt", "mt", "fr", "er", "rb", "sr", "gr"], "st": ["stage", "pt", "l", "cl", "rt", "sh", "so", "sv", "sp", "tmp", "dr", "tr", "tt", "stat", "stru", "ste", "lo", "St", "sw", "ut", "start", "se", "ist", "sm", "sl", "inst", "const", "z", "ost", "sts", "sty", "it", "pr", "est", " ST", "rest", "et", "bt", "std", "mt", "ct", "fr", "t", "nd", "ST", "p", "er", "ft", "stable", "be", "th", "ust", "nt", "first"], "in": ["r", "bin", "from", "ar", "con", "inf", "l", "log", "inc", "v", "m", "n", "ini", "err", "source", "doc", "inn", "file", "IN", "tx", "b", "on", "In", "init", "io", "reader", "it", "null", "din", "is", "stream", "data", "inner", "window", "ic", "ins", "input", "conf", "w", "er", "cin", "p", "iter", "t", "ch"]}}
{"code": "//TAKOYAKI\\nimport java.util.*;\\npublic class Main{\\n  public static void main(String[] args) {\\n    Scanner sc=new Scanner(System.in);\\n    int n=sc.nextInt();\\n    int power[]=new int[n];\\n    for (int i=0;i<n;i++) {\\n      power[i]=sc.nextInt();\\n    }\\n    int count=0;\\n    int temp;\\n    for (int i=0;i<n-1;i++) {\\n      for (int j=i+1;j<n;j++) {\\n        temp=power[i]*power[j];\\n        count=count+temp;\\n      }\\n    }\\n    System.out.println(count);\\n  }\\n}\\n", "target": "126", "substitutes": {}}
{"code": "//package Contest090;\\n\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String []args)\\n    {\\n        Scanner sc = new Scanner(System.in);\\n        PrintWriter out = new PrintWriter(System.out);\\n        int first = sc.nextInt(),last = sc.nextInt();\\n        int cnt =0;\\n        for(int i = first;i<=last;i++)\\n        {\\n            String str1 = String.valueOf(i);\\n            StringBuilder sb = new StringBuilder(str1);\\n            sb = sb.reverse();\\n            String temp = sb.toString();\\n            //out.println(str1+\" \"+temp);\\n            if(str1.equals(temp))\\n                cnt++;\\n\\n        }\\n        out.println(cnt);\\n\\n        out.flush();\\n    }\\n\\n}\\n", "target": "104", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String main[]){\\n        Scanner sc = new Scanner(System.in);\\n        char[] a = sc.next().toCharArray();\\n        char[] b = sc.next().toCharArray();\\n        int tor= 0;\\n        for(int i = 0;i< a.length ;i++){\\n           tor += (a[i]==b[i]?1:0);\\n        }\\n        System.out.println(tor);\\n    }\\n}", "target": "243", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sec", "co", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "ctl", "ko", "cle", "sel", "sch", "sync", "tch", "tc", "scan", "sq", " Sc", "cont", "cs", "sci", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "exp", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "scrib", "ch"], "a": ["ae", "va", "r", "ca", "acs", "aaaa", "ar", "array", "oa", "\u00e4", "aa", "da", "sta", "sa", "al", "sha", "ai", "isa", "ya", "A", "at", "ack", "an", "la", "ga", "ao", "ab", "ea", "apa", "area", "aff", "ba", "aaa", "aka", "c", "aj", "alpha", "ap", "as", "ma", "eas", "s", "ac", "era", "au", "ata", "am"], "b": ["br", "r", "emb", "d", "beta", "sb", "mb", "ob", "base", "bar", "bc", "v", "n", "gb", "db", "bs", "bp", "eb", "f", "fb", "j", "bi", "ib", "nb", "ab", "g", "ba", "c", "bis", "e", "blue", "bb", "cb", "be", "rb", "B"], "tor": ["ctr", "cer", "fat", "rect", "por", "prime", "ta", "oor", "soc", "sector", "orus", "cor", "tt", "tf", "nom", "creator", "mor", "processor", "tr", "ceptor", "tur", "floor", "oral", "tty", "or", "tar", "ter", "porter", "inter", "torn", "test", "tc", "nir", "Thor", "ctor", "itter", "eur", " TOR", "pr", " Tor", "itor", "ptr", "ector", "ctors", "Tor", "TOR", "bor", "t", "tle", "tom", "vor", "tu"], "i": ["sym", "I", "ix", "q", "ex", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "ji", "li", "id", "m", "me", "ini", "remote", "eric", "ski", "series", "ai", "ms", "ki", "mu", "im", "ind", "qi", "ori", "us", "init", "u", "\u0438", "ims", "j", "bi", "it", "ui", "is", "uri", "ie", "pi", "ti", "ic", "ci", "sim", "my", "cli", "multi", "iter", "gu", "ami", "ii", "xi", "si", "span", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint nlist[] = new int[n];\\n\t\tfor(int i = 1; i <= n; i++) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tnlist[a - 1] = i;\\n\t\t}\\n\t\tfor(int i=0 ; i < n ; i++) {\\n\t\t\tSystem.out.print(nlist[i] + \" \");\\n\t\t}\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "227", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "pl", "cr", "bc", "sv", "sp", "inc", "ck", "nl", "ko", "ctl", "ec", "capt", "cle", "sch", "sync", "fc", "tc", "scan", "sq", "cs", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "scrib", "ch", "sub"], "n": ["nu", "mn", "num", "name", "d", "nn", "number", "l", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "on", "an", "z", "j", "no", "nb", "g", "nc", "na", "k", "np", "en", "c", "nm", "out", "ng", "t", "p", "network", "ln", "net", "size", "nt", "x", "non"], "nlist": [" nList", "mtable", "gList", " Nlists", " Ntable", "mList", "Nlist", "glist", "numlist", " NList", "iprint", "itable", "mprint", "ndef", "Nlists", "mdef", " nlists", "gtable", "nList", "glists", "ilists", "NList", "nprint", "ilist", "ntable", "numlists", "numprint", " ndef", "nlists", " Nlist", "mlist", "Ndef", " ntable", "numtable", "mlists"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "iii", "go", "f", "is", "ic", "c", "y", "di", "x", "ri", "fi", "l", "chain", "ip", "ji", "point", "o", "id", "ij", "in", "client", "ori", "io", "bi", "it", "k", "ci", "sim", "cli", "s", "ii", "phi", "hi", "php", "ni", "mu", "ind", "u", "\u0438", "pi", "yi", "p", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "err", "im", "qi", "index", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "info"], "a": ["ca", "ax", "eta", "oa", "ta", "asi", "aa", "sa", "sha", "wa", "ai", "isa", "A", "b", "at", "pos", "ia", "ica", "la", "z", "ao", "xa", "ea", "area", "ba", "aaa", "ach", "aj", "fa", "alpha", "ap", "ma", "as", "ac", "ana", "ka", "au", "va", "ali", "am"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t// TODO ?????????????????????????????????????????????\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        \\n        int[] best = {0, 0, 0};\t\t// ??????????????????\\n        \\n        for(int i=0; i<10; i++){\\n            String line = br.readLine();\t\t\t// ????????????\\n            int height = Integer.parseInt(line);\t// ??\u00b0????????????\\n        \t\\n            if(height > best[0]){\t// ??\\????????????????????\u00b4???\\n            \tbest[2] = best[1];\\n            \tbest[1] = best[0];\\n            \tbest[0] = height;\\n            }\\n            else if(height > best[1]){\\n            \tbest[2] = best[1];\\n            \tbest[1] = height;\\n            }\\n            else if(height > best[2]){\\n            \tbest[2] = height;\\n            }\\n        }\\n        \\n        for(int h: best){\\n        \tSystem.out.println(h);\\n        }\\n\t}\\n\\n}", "target": "164", "substitutes": {}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n        public static void main(String[] args){\\n\\n                Scanner sc = new Scanner(System.in);\\n                String[] input = sc.nextLine().split(\" \");\\n                sc.close();\\n        int N,X,T;\\n        N = Integer.parseInt(input[0]);\\n        X = Integer.parseInt(input[1]);\\n        T = Integer.parseInt(input[2]);\\n\\n                int result= (N / X) * T ;\\n        if(N%X != 0){\\n            result += T;\\n        }\\n        System.out.println(result);\\n        }\\n}\\n", "target": "34", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "cr", "bc", "sv", "sp", "soc", "capt", "cle", "sel", "irc", "sch", "RC", "sw", "fc", "sync", "tc", "reader", "sq", "cs", "ss", "nc", "screen", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "sr", "SC", "mc", "pc", "rc", "ch", "sub"], "input": ["set", "q", "active", "att", "parse", "feed", "base", "ip", "point", "qa", "focus", "control", "attribute", "in", "raw", "this", "print", "sum", "lat", "get", "where", "hello", "script", "form", "start", "str", "select", "view", "list", "image", "init", "history", "pattern", "column", "cmd", "PUT", "submit", "text", "template", "json", "join", "output", "request", "sample", "format", "check", "command", "add", "Input", "query", "config"], "N": ["D", "I", "Z", "TN", "F", "FN", "NM", "SN", "ALL", "NB", "n", "O", "You", "S", "Ni", "NG", "IN", "P", "NO", "R", "NS", "Na", "NR", "V", "M", "NH", "AN", "MN", "NW", "GN", "H", "C", "UN", "NA", "Num", "L", "K", "NOR", "J", "Net", "CN", "CNN", "NN", "NT", "Ns"], "X": ["Z", "I", "F", "TX", "EX", "FX", "IX", "Ax", "XY", "DX", "OX", "G", "IO", "XXX", "S", "PE", "UX", "P", "XM", "R", "NS", "Q", "V", "ICE", "M", "IP", "XX", "H", "C", "U", "IM", "Tx", "Y", "L", "XP", "J", "K", "IC", "MX", "Ex", "ML", "Xi", "AX", "XL", "MAX", "x"], "T": ["D", "PO", "I", "Z", "TT", "TN", "TG", "TO", "F", "ET", "TB", "E", "TS", "VT", "TL", "The", "TV", "WT", "TR", "O", "G", "S", "P", "Type", "R", "Q", "A", "V", "M", "TA", "TP", "It", "OT", "GT", "PT", "TC", "TYPE", "PUT", "IT", "Target", "TION", "C", "H", "U", "TH", "TY", "Y", "TM", "TON", "L", "J", "t", "UT", "NT", "MT", "B", "AT"], "result": ["valid", "r", "description", "mask", "feature", "number", "Result", "total", "value", "n", "tr", "relation", "transform", "power", "this", "report", "params", "ret", "root", "correct", "currency", "search", "test", "results", "complete", "message", "data", "RESULTS", "success", "length", "table", "output", "ULT", "rendered", "other", "diff", "integer", "product", "date", "command", "successful", "reason", "goal", "res", "function", "term"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint i = sc.nextInt();\\n\t\tint a = i/100;\\n\t\tint b = i%100;\\n\t\tif (a<=12 && a>=1 && b<=12 && b>=1 ) {\\n\t\t\tSystem.out.println(\"AMBIGUOUS\");\\n\t\t} else if (a<=12 && a>=1) {\\n\t\t\tSystem.out.println(\"MMYY\");\\n\t\t} else if (b<=12 && b>=1) {\\n\t\t\tSystem.out.println(\"YYMM\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"NA\");\\n\t\t}\\n\t}\\n}", "target": "5", "substitutes": {"sc": ["usc", "set", "uc", "lc", "acc", "cc", "esc", "sb", "cl", "sys", "system", "ser", "Scan", "sv", "sp", "bc", "cr", "sa", "nl", "ec", "src", "spec", "sch", "sync", "tc", "scan", "sq", "cs", "ner", "ss", "nc", "c", "osc", "txt", "Sc", "gc", "out", "asc", "scl", "SC", "mc", "pc", "rc", "ch", "desc"], "i": ["I", "ri", "phi", "hi", "iu", "ip", "li", "o", "id", "v", "ij", "m", "n", "ini", "in", "ai", "ki", "ori", "ia", "io", "j", "bi", "it", "is", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "integer", "info", "p", "ami", "oi", "ii", "xi", "si", "di", "x", "mi"], "a": ["ae", "va", "r", "ca", "acc", "ar", "aq", "l", "oa", "o", "ta", "n", "aa", "app", "da", "sa", "al", "this", "ai", "isa", "act", "A", "at", "f", "ia", "an", "la", "ga", "ao", "ab", "ea", "apa", "aff", "ba", "aaa", "ach", "na", "aka", "aj", "alpha", "ap", "as", "t", "ma", "p", "ac", "era", "au", "ra", "x", "am"], "b": ["br", "r", "d", "beta", "wb", "sb", "ob", "l", "mb", "base", "h", "bar", "o", "bc", "v", "n", "m", "db", "gb", "app", "bf", "by", "zb", "bs", "lib", "f", "eb", "reb", "u", "fb", "z", "j", "bi", "it", "ib", "nb", "ab", "g", "ba", "k", "c", "bis", "out", "t", "p", "bb", "cb", "y", "be", "rb", "x", "B"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int z = gcd(sc.nextInt(), sc.nextInt());\\n        System.out.println(z);\\n        sc.close();\\n    }\\n\\n    private static int gcd(int x, int y) {\\n        if (x == 0) return y;\\n        return gcd(y % x, x);\\n    }\\n}\\n\\n", "target": "0", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "cer", "esc", "sb", "sec", "cl", "sys", "system", "sh", "ser", "cr", "sv", "sp", "bc", "ck", "nl", "ctl", "ko", "sch", "cam", "RC", "sw", "tc", "scan", "sq", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "sub"], "z": ["Z", "zz", "zen", "d", "uz", "zi", "zer", " Z", "tz", "zero", "n", "ij", "sd", "oz", "nz", "cz", "zo", "zh", "hz", "j", "zip", "yz", "az", "zone", "iz", "ze", "c", "t", "ez", "ld", "gz"], "x": ["ix", "r", "ex", "wx", "ax", "l", "yx", "h", "v", "n", "m", "xf", "xy", "width", "tx", "act", "inx", "a", "xx", "index", "f", "xe", "px", "xc", "dx", "i", "xxxx", "g", "ci", "xxx", "xd", "w", " xx", "X", "t", "rx", "p", "xi", "xs", "xp", "fx", "ox"], "y": ["ye", "sy", "ym", "iy", "o", "value", "py", "v", "gy", "m", "ch", "n", "ay", "ey", "uy", "cy", "xy", "val", "fy", "b", "xx", "index", "ry", "yy", "ies", "j", "vy", "i", "oy", "yz", "sky", "g", " Y", "Y", "yi", "my", "wy", "e", "t", "ny", "p", "iny", "ly", "ty", "ery"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        String s = sc.next();\\n\\n        System.out.println(solve(s));\\n\\n        sc.close();\\n    }\\n\\n    static int solve(String s) {\\n        return s.lastIndexOf('Z') - s.indexOf('A') + 1;\\n    }\\n}", "target": "109", "substitutes": {"sc": ["arc", "sac", "uc", "lc", "cc", "anc", "esc", "cur", "sec", "cl", "sh", "cr", "bc", "sv", "sp", "ck", "ko", "capt", "cle", "cu", "sch", "cam", "sm", "sync", "fc", "tc", "scan", "sq", "cs", "ss", "nc", "ok", "c", "syn", "osc", "Sc", "gc", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "sub"], "s": ["set", "gs", "r", "sql", "aws", "sb", "l", "rs", "abs", "sys", "h", "ns", "eds", "sv", "sp", "n", "strings", "su", "parts", "bs", "S", "os", "ms", "its", "ids", "lines", "ats", "str", "a", "b", "f", "sl", "fs", "ls", "es", "ags", "ims", "z", "states", "sts", "string", "results", "is", "ts", "sq", "i", "words", "g", "ss", "ings", "c", "js", "ins", "ds", "gets", "ers", "w", "t", "p", "qs", "ses", "y", "ps", "xs", "hs", "st"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Main main = new Main();\\n        main.solve();\\n    }\\n    public void solve() {\\n        Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        int N = scan.nextInt();\\n        Point[] list = new Point[N];\\n        for (int i = 0; i < N; i++) {\\n            Point p = new Point();\\n            p.t = scan.nextInt();\\n            p.x = scan.nextInt();\\n            p.y = scan.nextInt();\\n            list[i] = p;\\n        }\\n        Point prev = new Point();\\n        prev.t = 0;\\n        prev.x = 0;\\n        prev.y = 0;\\n        boolean answer = true;\\n        for (int i = 0; i < N; i++) {\\n            Point current = list[i];\\n            int time = current.t - prev.t;\\n            int distance = prev.distance(current);\\n\\n            if (time == distance) {\\n                prev = current;\\n                continue;\\n            }\\n            if (time < distance || ((time - distance) % 2 != 0)) {\\n                answer = false;\\n                break;\\n            }\\n            prev = current;\\n        }\\n        System.out.println(answer ? \"Yes\" : \"No\");\\n    }\\n    class Point {\\n        int t;\\n        int x;\\n        int y;\\n        int distance(Point t) {\\n            return Math.abs(this.x - t.x) + Math.abs(this.y - t.y);\\n        }\\n    }\\n}\\n", "target": "221", "substitutes": {"scan": ["seek", "r", "spin", "sql", "skip", "row", "con", "gate", "parse", "reach", "san", "chain", "ser", "sys", "Scan", "system", "sv", "sp", "n", "sin", "util", "read", "in", "stat", "sche", "can", "report", "run", "se", "gen", "sync", "pass", "send", "scroll", "an", "io", "cat", "sc", "find", "ner", "g", "c", "ram", "out", "gc", "check", "s", "char", "sur", "proc", "conv", "query", "ann", "see"], "N": ["D", "Node", "I", "TN", "ND", "NM", "NUM", "SN", "NP", "NE", "NB", "n", "Size", "O", "S", "Ni", "P", "NG", "T", "NO", "NL", "Count", "R", "NS", "NR", "V", "M", "NH", "None", "AN", "Len", "Total", "NC", "Sn", "C", "Number", "NN", "Num", "NA", "L", "K", "J", "NI", "NT", "Ns"], "list": ["set", "block", "dl", "array", "details", "queue", "l", "pre", "chain", "li", "tree", "tmp", "n", "v", "batch", "pair", "level", "path", "file", "print", "filter", "LIST", "dict", "form", "lists", "ist", "index", "collection", "arr", "sequence", "stack", "listed", "table", "mt", "L", "pool", "out", "def", "next", "map"], "i": ["set", "q", "ix", "zi", "iu", "ei", "base", "li", "n", "me", "batch", "ai", "f", "is", "ic", "e", "di", "ri", "l", "chain", "ip", "ji", "o", "id", "ij", "iti", "ori", "io", "z", "bi", "it", "g", "ci", "sim", "cli", "iq", "s", "ii", "ex", "phi", "this", "ind", "u", "\u0438", "pi", "my", "xi", "si", "mi", "I", "name", "key", "gi", "v", "m", "ini", "im", "qi", "index", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "info"], "p": ["pd", "post", "pt", "ping", "parse", "php", "l", "pre", "vp", "ip", "part", "point", "tp", "wp", "pl", "sp", "cp", "m", "v", "app", "lp", "pe", "pg", "per", "pair", "P", "pp", "pid", "client", "at", "a", "pro", "pkg", "par", "pic", "primary", "pa", "pi", "pb", "np", "port", "jp", "ap", "ph", "exp", "op", "ps", "pc"], "t": ["subject", "q", "r", "name", "pt", "tim", "d", "tu", "l", "tz", "task", "tp", "total", "o", "h", "tree", "ta", "tg", "tmp", "n", "m", "v", "tip", "tr", "tt", "tf", "this", "T", "td", "ret", "at", "a", "b", "index", "f", "type", "u", "test", "tc", "z", "j", "it", "trace", "tm", "ts", "template", " T", "g", "that", "k", "c", "obj", "txt", "e", "out", "ot", "w", "s", "tl", "det", "te", "dt", "title", "ty", "term"], "x": ["ix", "ex", "name", "wx", "key", "d", "l", "xml", "id", "n", "v", "m", "xf", "path", "lat", "width", "xy", "any", "tx", "lon", "xx", "index", "f", "on", "ry", "px", "xc", "rex", "left", "z", "xa", "dx", "lex", "g", "length", "xt", "mx", "c", "step", "e", "w", "X", "rx", "ux", "ross", "xs", "xi", "xp", "fx", "ox"], "y": ["ye", "hey", "key", "d", "sy", "story", "ym", "iy", "l", "h", "o", "yl", "value", "n", "v", "m", "gy", "ch", "py", "by", "top", "ay", "ey", "uy", "cy", "xy", "any", "ya", "a", "b", "index", "ry", "yy", "ies", "z", "j", "yt", "vy", "sky", "axy", "g", "c", "Y", "yi", "ory", "out", "ny", "yd", "size", "ty", "ly", "yo"], "prev": ["av", "loc", "prefix", "trip", "pri", "history", "pr", "old", "cmp", "original", "parent", "last", "res", "first", "window", "next", "map", "Previous", "before", "cur", "Prev", "rev", "temp", "nr", "nav", "wp", "zero", "adj", "ij", "top", "ren", "pkg", "rec", "inv", "initial", "rem", "vious", "mp", "pre", "var", "ref", "tmp", "rep", "self", "cache", "req", "ptr", "keep", "rel", "jp", "other", "op", "pred", "master", "holder", "jump", "msg", "PRE", "buf", "init", "orig", "par", "np", "obj", "ap", "reverse", "iter", "upper", "pres"], "current": ["set", "response", "active", "result", "name", "reported", "cur", "temp", "pre", "now", "latest", "currently", "v", "summary", "remote", "item", "this", "path", "get", "self", "client", "cache", "form", "at", "on", "variable", "instance", "single", "collection", "recent", "Current", "component", "complete", "child", "primary", "cont", "today", "record", "c", "old", "past", "request", "present", "local", "continue", "info", "controller", "handle", "first", "next"], "time": ["response", "name", "tim", "Time", "runtime", "frequency", "etime", "estamp", "timeout", "version", "weight", "task", "now", "tree", "value", "context", "speed", "transform", "trip", "ime", "money", "type", "TIME", "tc", "sequence", "delay", "history", "trace", "tm", "message", "age", "length", "timer", "step", "times", "duration", "request", "date", "clock", "command", "rate", "depth", "second", "height", "hash"], "distance": ["response", "wise", "description", "direction", "result", "istance", "driver", "frequency", "d", "version", "dim", "position", "address", "point", "tree", "height", "value", "stroke", "missing", "attribute", "dimension", "relation", "path", "erence", " Distance", "scale", "shape", "location", "near", "range", "dist", "delay", "radius", "history", "sequence", "component", "reference", "string", "message", "dose", "directory", "data", "text", "length", "connection", "density", "window", "timer", "relative", "duration", "similar", "diff", "local", "product", "date", "route", "command", "depth", "resolution", "delete", "definition", "imity", "Distance"], "answer": ["response", "onse", "don", "ask", "result", " response", "ee", "swers", "address", "know", " solution", "exit", "option", "vote", "energy", "yes", "interpret", " unanswered", " replied", "agree", "consider", "fill", "wer", " answered", "ave", "said", "echo", "offer", "equ", "comment", "accept", "message", "ve", " answering", "answered", "approximately", "remember", "apply", "reply", " explanation", "question", "oval", "Answer", "say", "leave", "archive", " answers", "see"]}}
{"code": "import java.util.HashSet;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n=sc.nextInt();\\n\t\tHashSet<Integer> a = new HashSet<>();\\n\t\tint k=0;\\n\t\t\\n\t\tfor(int i=0;i<n;i++) {\\n\t\t\tk=sc.nextInt();\\n\t\t\ta.add(k);\\n\t\t}\\n\t\t\\n\t\tif(a.size()==n) {\\n\t\t\tSystem.out.println(\"YES\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"NO\");\\n\t\t}\\n\t\t\\n\t\tsc.close();\\n\t}\\n}", "target": "44", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "co", "cl", "sys", "system", "sh", "pl", "cr", "sv", "sp", "bc", "inc", "dc", "ck", "nl", "ctl", "capt", "cle", "cu", "sch", "sm", "sync", "fc", "tc", "ctrl", "scan", "sq", "cs", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch"], "n": ["nu", "mn", "num", "r", "nn", "number", "l", "nr", "len", "N", "o", "h", "ns", "m", "v", "ne", "nan", "nl", "cn", "sn", "j", "nb", " N", "g", "na", "nc", "np", "en", "c", "nw", "w", "ng", "t", "p", "ln", "net", "size", "nt"], "a": ["gs", "ca", "att", "el", "oa", "abs", "o", "h", "ta", "aa", "aw", "sa", "wa", "A", "b", "at", "ack", "an", "la", "ga", "ao", "ed", "ab", "apa", "area", "na", "ba", "aaa", "c", "fa", "alpha", "w", "as", "ma", "eas", "p", "ac", "all", "aux", "to", "ata", "am"], "k": ["ke", "key", "ikk", "kl", "zero", "id", "ks", "kh", "m", "kr", "dk", "km", "tk", "make", "ck", "ko", "unk", "ak", "kn", "ki", "pp", "kk", "ik", "uk", "instance", "j", "mk", "with", "sk", "ku", "ek", "isk", "K", "max", "kind", "kj", "ka", "ijk", "kw", "kid"], "i": ["q", "I", "ix", "ex", "phi", "gi", "hi", "iu", "ip", "li", "id", "m", "ini", "ai", "ms", "ki", "im", "qi", "us", "init", "u", "\u0438", "io", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "t", "iter", "gu", "info", "y", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s=sc.next();\\n\t\t//String t= sc.next();\\n\t\t//int n = sc.nextInt();\\n\t\t//int m = sc.nextInt();\\n\t\t//int k = sc.nextInt();\\n\t\tlong count=0;\\n\t\tlong count1=0;\\n\t\tint[] array = new int[3];\\n\t\t/*array[0]=n-m;\\n\t\tarray[1]=n*m;\\n\t\tarray[2]=n+m;*/\\n\t\tArrays.sort(array);\\n\\n\t\t/*for(int i=0;i<3;i++) {\\n\t\t\tif(s.substring(i,i+1).equals(t.substring(i,i+1))) {\\n\t\t\t\tcount++;\\n\t\t\t}\\n\t\t}*/\\n\\n\t\tif(s.equals(\"Sunny\")) {\\n\t\t\tSystem.out.println(\"Cloudy\");\\n\t\t}else if(s.equals(\"Cloudy\")){\\n\t\t\tSystem.out.println(\"Rainy\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"Sunny\");\\n\t\t}\\n\\n\t\t//System.out.println(n*n*n);\\n\t}\\n}\\n\\n\\n", "target": "60", "substitutes": {"sc": ["usc", "sac", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "ser", "cr", "sv", "sp", "bc", "soc", "ec", "sche", "cle", "sch", "cam", "sw", "sm", "sl", "sync", "scan", "sq", "cs", "ss", "nc", "ok", "c", "osc", "Sc", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "s": ["r", "name", " ss", "rs", "ns", "sv", "strings", "v", "m", "n", "S", "src", "ids", "str", "a", "b", "fs", "es", "results", "string", "i", "ss", "c", "e", "p", "y", "res"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\tint[][] arrayA = new int[n][m];\\n\t\tint[] arrayB = new int[m];\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tfor(int j = 0; j < m; j++){\\n\t\t\t\tarrayA[i][j] = scan.nextInt();\\n\t\t\t}\\n\t\t}\\n\t\tfor(int i = 0; i< m; i++){\\n\t\t\tarrayB[i] = scan.nextInt();\\n\t\t}\\n\t\tint intCount = 0;\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tintCount = 0;\\n\t\t\tfor(int j = 0; j < m; j++){\\n\t\t\t\tintCount += arrayA[i][j] * arrayB[j];\\n\t\t\t}\\n\t\t\tSystem.out.println(intCount);\\n\t\t}\\n\t\tscan.close();\\n\t}\\n}", "target": "185", "substitutes": {"scan": ["set", "r", "save", "spin", "skip", "sql", "row", "nn", "reach", "gate", "parse", "san", "cgi", "sys", "Scan", "system", "connect", "sv", "sin", "plan", "read", "stat", "in", "by", "sche", "clear", "can", "get", "report", "run", "go", "scale", "auto", "se", "pass", "sync", "clean", "search", "send", "scroll", "an", "sort", "stan", "sc", "find", "ner", "g", "na", "sim", "syn", "link", "out", "gc", "check", "sur", "re", "trans", "proc", "query", "ann", "see"], "n": ["nu", "mn", "r", "num", "name", "nn", "l", "un", "nr", "N", "o", "ns", "v", "dn", "ne", "nan", "nl", "cn", "ni", "sn", "on", "an", "z", "no", "nb", "pi", " N", "na", "nc", "np", "en", "c", "nm", "ot", "ng", "t", "p", "network", "ln", "net", "nt", "x"], "m": ["q", "mn", "r", "mm", "dm", "d", "mo", "pm", "mb", "l", "h", "o", "perm", "v", "om", "me", "km", "mun", "ms", "mean", "mr", "mu", "im", "rm", "b", "M", "z", "um", "bm", "gm", "mk", "tm", "g", "pi", "k", "cm", "mod", "c", "mt", "span", "nm", "ma", "t", "p", "man", "mis", "em", "mc", "mat", "x", "mi", "rem"], "arrayA": ["arrayAB", "arrayAR", "subjectSA", " arrayAB", " arrayAA", "hashA", "subjectA", "recordAt", " arrayAt", " arrayArray", "arrayAt", "subjectAR", "recordB", "subjectAB", "raySA", "rayAR", "recordAA", " arraySA", "rayA", "arrB", "hashArray", "arrAt", "rayArray", "hashAB", "recordA", "arrayAA", "arrAA", " arrayAR", "arrA", "arrayArray", "arraySA", "hashAA", "rayAA", "rayAB"], "arrayB": ["arrayAB", " arrayT", " arrayAB", " arrayTwo", "collectionBB", "arrayBA", "rayBB", "formB", "rayAB", "listT", "listB", "formBA", "arrBB", " arrayBB", "formBB", "listBB", "arrB", "arrG", "rayG", "rayB", "arrAB", "rayBA", "arrayBB", "listTwo", "arrayNB", "arrNB", "arrBA", "rayNB", "formG", "arrayT", "collectionB", "collectionT", " arrayNB", "arrayTwo", "arrayG", "collectionTwo"], "i": ["q", "I", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "ei", "iy", "fi", "ip", "ji", "li", "id", "asi", "ij", "ini", "ion", "ai", "ni", "ki", "iii", "iti", "im", "ind", "qi", "ori", "list", "ik", "us", "ia", "init", "\u0438", "ir", "ims", "io", "bi", "it", "aci", "ity", "ui", "ie", "is", "uri", "pi", "iso", "ti", "ic", "ci", "rel", "sim", "info", "iq", "ami", "y", "ii", "xi", "si", "di", "mi", "ish"], "j": ["br", "q", "jac", "ix", "jit", "pt", "og", "att", "ev", "l", "ji", "jj", "o", "li", "jo", "v", "ij", "tr", "jump", "jas", "by", "ne", "ju", "ni", "ja", "ind", "art", "bj", "right", "b", "note", "oj", "us", "job", "f", "di", "str", "z", "Ja", "bi", "it", "pr", "ie", "uj", "g", "json", "k", "rel", "aj", "js", "obj", "jp", "J", "ot", "fr", "e", "ng", "s", "kj", "y", "jc", "dj", "si", "je", "jl"], "intCount": ["intCounter", "longTotal", "INTSum", "charLength", " intSum", "charCounter", "IntCounter", " intLength", "INTLength", "IntWidth", "ontCount", "intFound", "intSum", "floatFound", "charCount", "altCount", " intWidth", "interWidth", "floatCount", "intWidth", "interCount", " integerCount", "ontCounter", "IntSum", "interLength", "altTotal", " integerLength", "ontTotal", "intNumber", "intTotal", "intLength", "IntCount", "charSum", "INTCount", "altCounter", "floatLength", "IntFound", " integerFound", "altNumber", "IntLength", "INTCounter", "longCounter", "longCount", "ontNumber", " integerSum", "floatSum", "longNumber", "interFound", " intFound"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\t\\n\t\tlong sumStep = 0;\\n\t\tint maxA = sc.nextInt();\\n\t\tfor (int i = 1; i < n; i++) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tmaxA = Math.max(maxA, a);\\n\t\t\tsumStep += maxA - a;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(sumStep);\\n\t\t\\n\t\tsc.close();\\n\t}\\n}\\n\\n\\n", "target": "202", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "cgi", "cl", "sys", "system", "sh", "pl", "cr", "bc", "sv", "sp", "inc", "dc", "ck", "nl", "capt", "ctl", "ko", "comm", "cle", "cu", "sch", "sync", "tch", "fc", "tc", "ctrl", "cv", "scan", "sq", "disc", "cs", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "ng", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "scrib", "psc", "ch", "sub"], "n": ["nu", "mn", "num", "name", "d", "nn", "nia", "number", "l", "un", "N", "ns", "m", "ne", "nan", "nl", "cn", "ni", "sn", "count", "f", "norm", "j", "no", "nb", "na", "nc", "np", "en", "c", "nw", "ot", "ng", "t", "network", "ln", "net", "nt"], "sumStep": ["matchScale", "sumLength", "SumDelta", "totalStep", "sumTest", "sumDelta", "SumJump", " sumLength", "sumPath", "scaleDelta", "scaleStep", " sumScale", "matchSTEP", "SumStep", " sumstep", "scaleTest", "totalPath", "totalLength", "Sumstep", "matchDelta", " sumPath", " sumSTEP", "sumJump", "SumPath", "sumScale", " sumTest", "totalstep", "SumLength", "SumScale", "matchStep", "scaleJump", " sumJump", "sumSTEP", "SumSTEP", "sumstep", "SumTest", " sumDelta"], "maxA": ["longAB", "longA", "axAA", " maxSA", "MaxA", " maxB", " maxAA", "parentA", "maxN", " maxBar", "minB", "MAXN", "MaxAB", "MaxAlpha", "axBar", " maxN", "MAXA", "maxAB", "MaxAA", " maxAlpha", "maxAlpha", "maxB", "parentBar", "axN", "maxP", " maxAB", "maxBar", "MaxB", "maxSA", "axA", "minAA", "MAXSA", " maxP", "maxAA", "minA", "MaxP", "longB", "parentAA", "axSA", "minP", "longAlpha", "parentN", "MAXAA"], "i": ["q", "I", "ix", "mill", "phi", "gi", "zi", "iu", "hi", "ip", "li", "id", "v", "m", "me", "ini", "ai", "ms", "ki", "im", "ind", "qi", "index", "us", "init", "io", "z", "j", "bi", "it", "is", "ui", "ie", "pi", "ti", "ic", "ci", "sim", "multi", "iter", "y", "ii", "xi", "si", "di", "x", "mi"], "a": ["ca", "eta", "l", "oa", "o", "qa", "ta", "m", "aa", "sta", "sa", "sha", "ai", "isa", "ya", "A", "b", "at", "index", "ia", "u", "an", "la", "ga", "ao", "xa", "z", "pa", "ea", "area", "apa", "ba", "na", "c", "fa", "alpha", "e", "ma", "as", "t", "p", "ac", "ha", "add", "au", "to", "va", "x"]}}
{"code": "import java.util.*;\\nimport static java.lang.Math.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\t// a\u3001b\u306e\u5165\u529b\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\\n\t\t// \u7a4d\u3092\u8a08\u7b97\\n\t\tint c = a * b;\\n\\n\t\t// \u5076\u6570\u306a\u3089'Even'\u3001\u5947\u6570\u306a\u3089'Odd'\u3092\u51fa\u529b\\n\t\tif(isEven(c)){\\n\t\t\tSystem.out.println(\"Even\");\\n\t\t}else{\\n\t\t\tSystem.out.println(\"Odd\");\\n\t\t}\\n\t}\\n\\n\tstatic boolean isEven(int n){\\n\t\tif(n%2 == 0){\\n\t\t\treturn true;\\n\t\t}else{\\n\t\t\treturn false;\\n\t\t}\\n\t}\\n\\n}", "target": "112", "substitutes": {"sc": [" ser", " cr", " ec", "sb", " pc", " SC", " scorer", "sys", "sp", " scr", "sa", " sk", " sh", "scan", "sq", " Sc", "cs", "ss", "nc", "screen", "c", " rc", "sk", "Sc", "SC", "rc", "ch", " sp"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n    public static void main(String args[]){\\n        int count = 0;\\n        String ans[] = {\"No\",\"Yes\"};\\n        Scanner sc = new Scanner(System.in);\\n        String str = sc.next();\\n        char a[] = new char[str.length()];\\n        for(int i = 0;i < str.length();i++){\\n            a[i] = str.charAt(i);\\n        }\\n        if(a[0]==a[1]&&a[1]==a[2]&&a[2]==a[3]){\\n            \\n        }else if(a[0]==a[1]&&a[2]==a[3]){\\n            count++;\\n        }else if(a[0]==a[2]&&a[1]==a[3]){\\n            count++;\\n        }else if(a[0]==a[3]&&a[1]==a[2]){\\n            count++;\\n        }\\n        System.out.print(ans[count]);\\n    }\\n}", "target": "33", "substitutes": {"count": ["set", "num", "ount", "ctr", "coll", "acc", "empty", "found", "current", "number", "cond", "draw", "total", "now", "amount", "n", "soft", "tf", "cast", "stat", "batch", "process", "follow", "call", "sum", "report", "state", "thread", "Count", "ind", "start", "cache", "index", "list", "hold", "code", "force", "const", "test", "scroll", "must", "stack", "trace", "find", "cmd", "cont", "length", "c", "max", "ct", "counter", "other", "check", "t", "mount", "flag", "th", "size", "add", "quiet", "nt"], "ans": ["gs", "uns", "ons", "ras", "aus", "rs", "san", "anas", "eds", "ns", "ks", "ians", "os", "akens", "ms", " names", "arts", "ANS", "ys", "ats", "ens", "ants", " sans", "ls", "an", "ols", "AN", "angs", "ams", "vs", "cs", "An", "ins", "ds", "as", "s", "xs", "ann"], "sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "bc", "sv", "sp", "cr", "cle", "spec", "sch", "sync", "exec", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "screen", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "st", "sub"], "str": ["br", "r", "name", "STR", "ctr", "cur", "l", "o", "tree", "n", "v", "m", "tr", "in", "rep", "seq", "doc", "spec", "enc", "res", "form", "b", "f", "arr", "ent", "j", "string", "it", "Str", "pr", "div", "data", "text", "g", "cs", "vol", "wr", "status", "c", "obj", "input", "txt", "fr", "exp", "t", "s", "p", "char", "nt", "ch", "desc", "st"], "a": ["set", "ae", "acs", "ca", "att", "ar", "aq", "l", "oa", "o", "zero", "aa", "app", "da", "aw", "sa", "sta", "err", "al", "this", "w", "ai", "val", "go", "act", "A", "b", "at", "f", "ia", "es", "an", "la", "ga", "ao", "xa", "j", "ed", "ab", "pa", "apa", "area", "aff", "ea", "ba", "aaa", "ach", "na", "data", "g", "fa", "alpha", "ap", "out", "as", "ma", "eas", "er", "ac", "p", "e", "era", "au", "y", "aux", "all", "to", "ata", "x", "am"], "i": ["q", "I", "ix", "ex", "spin", "key", "phi", "gi", "zi", "iu", "hi", "ei", "l", "ip", "ji", "point", "o", "li", "id", "n", "m", "me", "ini", "ai", "ms", "client", "im", "qi", "b", "index", "ori", "us", "init", "u", "\u0438", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "k", "ti", "ic", "ci", "sim", "port", "multi", "check", "iter", "gu", "s", "info", "y", "ii", "si", "span", "di", "x", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n  public static void main(String[] args) {\\n    try {\\n      Scanner scn = new Scanner(System.in);\\n      int a, b;\\n\\n      a = Integer.parseInt(scn.next());\\n      b = Integer.parseInt(scn.next());\\n\\n      if(a*b%2 == 1){\\n       System.out.println(\"Odd\");\\n      }else if(a*b%2 == 0){\\n       System.out.println(\"Even\");\\n      }\\n\\n    }\\n    catch (Exception e) {\\n\\n    }\\n  }\\n}\\n", "target": "112", "substitutes": {"scn": ["scr", "iscl", "Scn", "sca", "irca", "usca", "scsn", "cnr", "ScN", "scout", " scout", "iscout", "cr", "scribsn", " scr", " scN", " scnr", "irccn", "cn", " scon", "iscon", "uscn", "scribn", "scriba", "Scr", "scnr", "scon", "ircsn", " scl", "scN", "sccn", "Scnr", "ircon", "uscsn", "scribcn", "ircn", "ircl", "cN", "scl", "ircout", "usccn", "iscn"], "a": ["ae", "ca", "d", "att", "ar", "aq", "abs", "oa", "ta", "admin", "aa", "da", "app", "sta", "sa", "ai", "act", "art", "A", "at", "ia", "an", "la", "access", "ga", "ao", "ity", "ab", "ea", "area", "aff", "ba", "aaa", "aka", "aj", "alpha", "ma", "t", "as", "eas", "ac", "y", "au", "add", "era", "va", "x", "am"], "b": ["br", "d", "bin", "beta", "sb", "wb", "ob", "l", "mb", "base", "bar", "bc", "n", "v", "m", "db", "gb", "bs", "bp", "business", "bool", "back", "eb", "reb", "f", "fb", "bu", "j", "bi", "ib", "nb", "ab", "i", "two", "ba", "bis", "e", "p", "bb", "cb", "be", "rb", "B"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\\n\\n\\n\tpublic static void main(String[] args) {\\n\\n\\n\t\tScanner sc = new Scanner(System.in);\t\t\t//\u6587\u5b57\u306e\u5165\u529b\\n\t\tint N = sc.nextInt();\\n\t\tint ans = 0;\\n\t\tint numans = 0;\\n\\n\t\tfor(int i = 1;i <= N;i++){\\n\t\t\tint sum = counttwo(i);\\n\t\t\tans = Math.max(ans, sum);\\n\t\t\tif(sum == ans){\\n\t\t\t\tnumans = i;\\n\t\t\t}\\n\\n\t\t}\\n\\n\t\tSystem.out.println(numans);\\n\\n\\n\t}\\n\\n\tstatic int counttwo(int num){\t\t\t\t\t//2\u3067\u5272\u308c\u308b\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\\n\t\tint count = 0;\\n\t\twhile(num % 2 == 0){\\n\t\t\tcount++;\\n\t\t\tnum /= 2;\\n\\n\t\t}\\n\t\treturn count;\\n\t}\\n\\n}\\n\\n\\n", "target": "225", "substitutes": {"sc": ["uc", " SC", " ss", "cl", "sys", "system", "bc", "sp", "cr", "sv", " scr", "dc", "sa", " sk", "sw", "scan", " Sc", "cs", "nc", "c", "sk", "Sc", "gc", "SC", "rc", "pc", "ch", " sp"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\\n\t\tint ans = 1;\\n\t\twhile (ans <= 1250) {\\n\t\t\tif ((int) (ans * 0.08) == A && (int) (ans * 0.1) == B) {\\n\t\t\t\tSystem.out.println(ans);\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t\tans++;\\n\t\t}\\n\t\tSystem.out.println(-1);\\n\t}\\n\\n\t//\u4ee5\u4e0b\u3001\u81ea\u4f5c\u30e9\u30a4\u30d6\u30e9\u30ea\\n\\n\t/*\\n\t\tint N = sc.nextInt();\\n\\n\t\tint[] a = new int[N];\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\ta[i] = sc.nextInt();\\n\\n\t\tString s = sc.next();\\n\\n\t\tString[] a = new String[N];\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\ta[i] = sc.next();\\n\\n\t\tint[][] a = new int[N][2];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ta[i][0] = sc.nextInt();\\n\t\t\ta[i][1] = sc.nextInt();\\n\t\t}\\n\t\tArrays.sort(a, (x, y) -> Integer.compare(x[0], y[0]));\\n\\n\t\tList<Integer> list = new ArrayList<>();\\n\\n\t\tSet<Integer> set = new HashSet<>();\\n\\n\t\tMap<Integer, Integer> map = new HashMap<>();\\n\\n\t\tnextLine\u306e\u3068\u304d\u306f\\n\t\tScanner sc = new Scanner(System.in);\\n\t */\\n\\n\t//\u7e70\u308a\u8fd4\u3057\u4e8c\u4e57\u6cd5\u306b\u3088\u308b,\u3079\u304d\u4e57\u8a08\u7b97\u3067\u5270\u4f59\u3092\u8fd4\u3059\\n\tpublic static long modPow(long x, long n, final long mod) {\\n\t\tlong sum = 1;\\n\t\twhile (n > 0) {\\n\t\t\tif ((n & 1) == 1) { //\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u305f\u3089\\n\t\t\t\tsum = (sum * x) % mod; //x^2^k1 * x^2^k2 * x^2^k3 * \u30fb\u30fb\u30fb\\n\t\t\t}\\n\t\t\tx = (x * x) % mod; //((x^2)^2)^2 \u30fb\u30fb\u30fb\\n\t\t\tn >>= 1;\\n\t\t}\\n\t\treturn sum;\\n\t}\\n\\n\t//\u7d44\u307f\u5408\u308f\u305b\u306e\u6570nCr\u3092\u8a08\u7b97\u3057\u5270\u4f59\u3092\u8fd4\u3059\\n\tpublic static long calcNumOfCombinationMod(long n, int r, final long mod) {\\n\t\tlong num = 1;\\n\t\tfor (int i = 0; i < r; i++) {\\n\t\t\tnum = (num * (n - i)) % mod;\\n\t\t\tnum = (num * modPow(i + 1, mod - 2, mod)) % mod;\\n\t\t}\\n\t\treturn num;\\n\\n\t}\\n\\n\t//\u7d44\u307f\u5408\u308f\u305b\u306e\u6570nCr\u3092\u8a08\u7b97\\n\tpublic static int calcNumOfCombination(int n, int r) {\\n\t\tint num = 1;\\n\t\tfor (int i = 1; i <= r; i++) {\\n\t\t\tnum = num * (n - i + 1) / i;\\n\t\t}\\n\t\treturn num;\\n\t}\\n\\n\t//\u968e\u4e57\\n\tpublic static int fact(int n) {\\n\t\tif (n == 1 || n == 0)\\n\t\t\treturn 1;\\n\t\telse\\n\t\t\treturn n * fact(n - 1);\\n\t}\\n\\n\t//\u6307\u5b9a\u3057\u305f\u5024\u4ee5\u4e0a\u306e\u8981\u7d20\u304c\u6700\u521d\u306b\u73fe\u308c\u308b\u4f4d\u7f6e\\n\t//\u8981\u7d20\u306e\u6570\u306f+1\uff08\u914d\u5217\u306e\u30ba\u30ec)\\n\tpublic static long lowerBound(int n, long[] x, long y) {\\n\t\tint left = 0;\\n\t\tint right = n;\\n\t\twhile (left < right) {\\n\t\t\tint mid = (left + right) / 2;\\n\t\t\tif (x[mid] < y) {\\n\t\t\t\tleft = mid + 1;\\n\t\t\t} else {\\n\t\t\t\tright = mid;\\n\t\t\t}\\n\t\t}\\n\t\treturn left;\\n\t}\\n\\n\t//\u6307\u5b9a\u3057\u305f\u5024\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u304c\u6700\u521d\u306b\u73fe\u308c\u308b\u4f4d\u7f6e\\n\t//\u8981\u7d20\u306e\u6570\u306f+1\uff08\u914d\u5217\u306e\u30ba\u30ec)\\n\tpublic static long upperBound(int n, long[] x, long y) {\\n\t\tint left = 0;\\n\t\tint right = n;\\n\t\twhile (left < right) {\\n\t\t\tint mid = (left + right) / 2;\\n\t\t\tif (x[mid] <= y) {\\n\t\t\t\tleft = mid + 1;\\n\t\t\t} else {\\n\t\t\t\tright = mid;\\n\t\t\t}\\n\t\t}\\n\t\treturn left;\\n\t}\\n\\n\t//\u6700\u5927\u516c\u7d04\u6570\\n\tpublic static long gcd(long a, long b) {\\n\t\tif (a < b)\\n\t\t\treturn gcd(b, a);\\n\t\tlong c = 0;\\n\t\tc = a % b;\\n\t\tif (c == 0)\\n\t\t\treturn b;\\n\t\treturn gcd(b, c);\\n\t}\\n\\n\t//\u6700\u5c0f\u516c\u500d\u6570\\n\tpublic static long lcm(long m, long n) {\\n\t\treturn m * n / gcd(m, n);\\n\t}\\n\\n\t//\u7d20\u6570\u5224\u5b9a\\n\tpublic static boolean isPrime(int n) {\\n\t\tif (n < 2)\\n\t\t\treturn false;\\n\t\tif (n == 2)\\n\t\t\treturn true;\\n\t\tif (n % 2 == 0)\\n\t\t\treturn false;\\n\\n\t\tfor (int i = 3; i * i <= n; i += 2) {\\n\t\t\tif (n % i == 0)\\n\t\t\t\treturn false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}\\n\\n//\u4ee5\u4e0b\u3001\u9ad8\u901f\u30b9\u30ad\u30e3\u30ca\u30fc\u30af\u30e9\u30b9\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "121", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "esc", " SC", "sec", "cl", "sys", "sh", "cr", "sp", "bc", "inc", " scr", "sa", "ck", "nl", "capt", "ctl", "cle", "sch", "sw", "sm", "sync", "tc", "ctrl", "sq", " Sc", "cs", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "ch", "desc", "st"], "A": ["AA", "Sure", "App", "AU", "CA", "AY", "UA", "AC", "Ax", "Av", "As", "SA", "G", "P", "Ar", "IA", "GA", "LA", "API", "This", "Ant", "AL", "AV", "ACC", "H", "AP", "Ast", "AGE", "AB", "An", "AS", "AI", "RA", "AR", "AST", "Act", "AD", "AF", "ACT", "ESS"], "B": ["WB", "BB", "Brian", "LB", "TB", "BI", "RB", "BL", "USB", "DB", "BU", "Ber", "VB", "NB", "GB", "MB", "IB", "BR", "b", "BC", "BE", "CB", "Bob", "H", "BO", "JB", "AB", "Y", "Bar", "L", "J", "EB", "BA", "OB", "Blue", "FB"], "ans": [" orphans", "uns", "ons", "reads", "anks", " olds", "ends", "ands", "os", "errors", "ms", "lines", "ANS", "ats", "ens", "als", "ts", "ops", "ins", "aps", "sk", "terms", "actions", "xs", " fans", "lan", "offs", "ars", " scans", "vals", "anas", "rs", "ns", "asks", "ks", "versions", "orders", "users", "anes", "cs", "ups", "ps", "rows", "checks", "nets", "aus", "eds", "beans", "ians", "amps", "ants", "ls", "an", "orts", "ds", "books", "rans", "stats", "outs", "ann", "locks", "ents", "irms", "ids", "ates", "arts", "ows", "uploads", "vs", "aos", " spans", "sets", "ips", "olds", "vers"]}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    long N = Long.parseLong(sc.next());\\n    long M = (int)Math.sqrt(N);\\n    long Re = N+1;\\n    for(int i = 0;i<M;i++){\\n      if(N%(M-i)==0&&Re>M-i+N/(M-i)){\\n        Re = M-i+N/(M-i);\\n      }\\n    }\\n    System.out.println(Re-2);\\n  }\\n}", "target": "157", "substitutes": {"sc": ["uc", "r", "lc", "cc", "anc", "esc", "cur", "dec", "sec", "cl", "sys", "ser", "bc", "sv", "sp", "cr", "ec", "capt", "cle", "sel", "src", "sch", "sw", "se", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "screen", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "N": ["D", "I", "Z", "TN", "F", "E", "ND", "NM", "NUM", "NI", "SN", "RE", "NE", "NB", "n", "Size", "NV", "Ren", "O", "G", "S", "Ni", "P", "NG", "NO", "NL", "T", "R", "NS", "Na", "NR", "V", "NH", "DN", "MN", "GN", "NC", "H", "C", "UN", "Num", "NA", "L", "J", "X", "CN", "Name", "NN", "NT", "Ns"], "M": ["D", "I", "MO", "F", "MA", "CM", "MH", "Mass", "NM", "RE", "MF", "MODE", "ALL", "SM", "m", "MS", "O", "G", "MM", "S", "P", "MAT", "RM", "T", "DM", "MB", "Multi", "R", "MAN", "MD", "V", "ME", "MED", "MP", "Mi", "MN", "H", "PM", "MC", "C", "FM", "LM", "MI", "IM", "L", "TM", "MAL", "J", "K", "MX", "NOTE", "MIT", "MT", "B"], "Re": ["Rep", "Rex", "Con", "Return", "E", "Ge", "RE", "Result", "Res", "Tr", "Se", "Reb", "Region", "Exp", "Rew", "Ren", "Ra", "Rem", "RM", "Me", "Fr", "R", "Repl", "Rel", "FE", "Le", "Co", "Ret", "De", "Rs", "Lim", "Reg", "Rec", "Reference", "Real", "Be", "Record", "Release", "We", "Ro", "Ex", "Resp", "Rate", "re", "Ne", "Fe", "Ref"], "i": ["q", "I", "ix", "ri", "gi", "zi", "iu", "hi", "ei", "l", "ip", "o", "li", "id", "n", "m", "v", "ij", "ini", "me", "item", "ai", "ki", "im", "ind", "qi", "a", "index", "ik", "us", "init", "u", "z", "j", "bi", "it", "ui", "ie", "ed", "is", "uri", "pi", "ti", "ic", "ci", "c", "cli", "jp", "e", "multi", "info", "gu", "iter", "y", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.nextLine();\\n\t\tlong sum = 0;\\n\t\tint j = Integer.valueOf(s);\\n\t\tfor (int i = 1; i <= j; i++) {\\n\t\t\tif((i % 3 != 0 && i % 5 != 0)) {\\n\t\t\t\tsum += i;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sum);\\n\t}\\n\\n}\\n", "target": "55", "substitutes": {"sc": ["usc", "sac", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "ser", "system", "cr", "bc", "sv", "sp", "soc", "ec", "cle", "sel", "sch", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "s": ["gs", "r", "sb", "rs", "sys", "h", "ns", "sv", "strings", "n", "m", "v", "source", "S", "ms", "less", "ats", "str", "a", "b", "f", "us", "ls", "string", "sts", "is", "ts", "sq", "bits", "g", "ss", "c", "js", "e", "w", "t", "qs", "p"], "sum": ["Sum", "num", "sat", "cal", "tu", "temp", "med", "total", "zero", "n", "summary", "lam", "sa", "su", "gram", "square", "mean", "mut", "hist", "count", "index", "us", "mem", "share", "must", "um", "cum", "vol", "mod", "score", "mass", " summed", "hum", "sim", "body", "ass", "max", "out", "black", "sam", "t", "average", "size", "si", "cost", "hash"], "j": ["br", "q", "ji", "jj", "adj", "n", "ij", "m", "v", "jump", "ne", "ju", "ja", "ut", "str", "bj", "org", "b", "oj", "Ja", "z", "uj", "g", "json", "k", "js", "aj", "obj", "jp", "J", "ot", "t", "kj", "y", "jc", " J", "si", "dj"], "i": ["I", "ix", "phi", "hi", "zi", "iu", "gi", "ei", "l", "chain", "ip", "ji", "li", "id", "m", "ij", "me", "ini", "ai", "ms", "ki", "mu", "im", "ind", "qi", "index", "f", "us", "init", "u", "io", "ims", "sequence", "bi", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "sim", "yi", "cli", "multi", "t", "iq", "iter", "info", "integer", "p", "oi", "ii", "xi", "si", "span", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s=sc.next();\\n\t\tint k=sc.nextInt();\\n\\n\t\tif(k==10) {\\n\t\t\tSystem.out.println(s.length());\\n\t\t}else {\\n\t\t\tlong n=0;\\n\t\t\twhile(Math.pow(k,n)<Long.valueOf(s)+1) {\\n\t\t\t\tn++;\\n\t\t\t}\\n\t\t\tSystem.out.println(n);\\n\t\t}\\n\t}\\n}\\n\\n", "target": "219", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "dec", "sb", "sec", "cl", "sys", "system", "sh", "cr", "sv", "sp", "bc", "inc", "dc", "ck", "nl", "capt", "ko", "ctl", "cle", "src", "sch", "se", "sync", "tc", "scan", "sq", "cs", "nc", "pb", "na", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "s": ["gs", "r", "ar", "sb", "l", "rs", "abs", "sys", "h", "ns", "o", "sv", "sp", "m", "v", "strings", "ws", "bs", "S", "os", "its", "ms", "ats", "str", "b", "ls", "z", "j", "sts", "string", "is", "ts", "sq", "i", "g", "ss", "length", "c", "js", "w", "t", "qs", "p", "ps"], "k": ["q", "num", "ke", "key", "ikk", "yk", "kl", "kan", "h", "ks", "kh", "m", "kr", "dk", "km", "ck", "ko", "unk", "kn", "ak", "kok", "kar", "ik", "kk", "kick", "j", "mk", "g", "ok", "c", "ek", "sk", "ku", "K", "kb", "t", "p", "kind", "kj", "ka", "kw", "kid"], "n": ["nu", "mn", "num", "r", "d", "nn", "number", "l", "un", "len", "N", "o", "ns", "m", "v", "nan", "ne", "remote", "nl", "cn", "inn", "ni", "sn", "count", "f", "on", "u", "an", "norm", "j", "no", "nb", "i", "na", "nc", "np", "human", "en", "max", "out", "w", "t", "p", "ng", "ln", "net", "nt", "x"]}}
{"code": "//package atcoder;\\n \\nimport java.io.BufferedWriter;\\nimport java.io.File;\\nimport java.io.FileWriter;\\nimport java.io.IOException;\\nimport java.io.PrintWriter;\\nimport java.util.*;\\n//import java.math.BigDecimal;\\n \\npublic class Main {\\n\tpublic static void main(String [] args) {\\n\t    int K,N;\\n\t    \\n\t\tScanner sc = new Scanner(System.in);\\n\t\tN = sc.nextInt();\\n\t\tK = sc.nextInt();\\n\t\tint p[] = new int [N];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tp[i] = sc.nextInt();\\n\t\t}\\n\t\tArrays.sort(p);\\n\t\t/*for(int k=0;k<N;k++) {\\n\t\t\tSystem.out.println(p[k]);\\n\t\t}*/\\n\t\tint goukei = 0;\\n\t\tfor(int j=0;j<K;j++) {\\n\t\t\tgoukei = goukei+p[j];\\n\t\t}\\n\t\tSystem.out.println(goukei);\\n\t\t\\n\t}\\n}", "target": "41", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    \\n    public static void main(String[] args) {\\n        Scanner scan=new Scanner(System.in);\\n        int a=0,b=0,ans=0,f=0;\\n        String op;\\n        while(f==0){\\n        \ta=scan.nextInt();\\n        \top=scan.next();\\n        \tb=scan.nextInt();\\n        \tswitch(op){\\n        \t\tcase\"+\":\\n        \t\t\tans=a+b;\\n        \t\t\tbreak;\\n        \t\tcase\"-\":\\n        \t\t\tans=a-b;\\n        \t\t\tbreak;\\n        \t\tcase\"*\":\\n        \t\t\tans=a*b;\\n        \t\t\tbreak;\\n        \t\tcase\"/\":\\n        \t\t\tans=a/b;\\n        \t\t\tbreak;\\n        \t\tcase\"?\":\\n        \t\t\tf=1;\\n        \t\t\tbreak;\\n        \t\tdefault:\\n        \t\t\tcontinue;\\n        \t}\\n        \tif(f==0){\\n        \t\tSystem.out.println(ans);\\n        \t}\\n        }\\n    }\\n}", "target": "139", "substitutes": {"scan": ["set", "seek", "r", "save", "skip", "sql", "row", "nn", "reach", "gate", "parse", "sb", "san", " Scan", "sys", "Scan", "system", "log", "sv", "n", "v", "sin", "read", "in", "sum", "can", "get", "report", "run", "se", "pass", "sync", "search", "gen", "send", "scroll", "an", "io", "ann", "sc", "find", "ner", "g", "na", "store", "syn", "out", "gc", "check", "x", "info", "p", "sur", " scanner", "re", "proc", "conv", "query", "ch", "util"], "a": ["ae", "ca", " at", "d", "ar", "aq", "oa", "ta", "aa", "da", "app", "sta", "sa", "al", "ai", "val", "af", "A", "at", "ia", "an", "la", "ga", "ao", "dev", "ab", "i", "ea", "apa", "area", "pa", "ba", "aaa", "na", "aka", "aj", "obj", " ba", "alpha", "ma", "t", "eas", "p", "ac", "as", "era", "au", "aux", "to", "va", "x", "am"], "b": ["br", "r", "d", "beta", "wb", "sb", "ob", "l", "base", "mb", "h", "bar", "bc", "n", "gb", "v", "bf", "db", "app", "bl", "bs", "bool", "eb", "fb", "z", "j", "bi", "it", "ib", "bound", "nb", "ed", "ab", "i", "g", "ba", "pb", "c", "bis", "bo", "e", "w", "t", "p", "bb", "cb", "be", "y", "rb", "B"], "ans": ["unes", "gs", "ents", "uns", "ons", "ras", "offs", "nets", "vals", "anas", "aus", "names", "uf", "anks", "outs", "flags", "oa", "eds", "ns", "ads", "ks", "asks", "n", "helps", "els", "artifacts", "beans", "ands", "os", "ms", "lines", "arts", "ANS", "af", "amps", "ats", "ens", "ants", "ls", "an", "ows", "uploads", "results", "vs", "aos", "mas", "ts", "acts", "cs", "ations", "orts", "sets", "ops", "ins", "olds", "ds", "vers", "books", "aps", "arms", "ions", "as", "s", "eas", "xs", "rans", "ps", "x", "ars", "ann"], "f": ["q", "alf", "F", "d", "sf", "found", "df", "fi", "l", "fd", "uf", "ff", "o", "h", "v", "m", "n", "err", "tf", "ef", "fe", "af", "fp", "fs", "fc", "fac", "index", "j", "it", "i", "g", "k", "fun", "fort", "fl", "c", "conf", "fa", "e", "fr", "exp", "t", "p", "fm", "x"], "op": ["opp", "pop", "name", "mp", "ob", "ver", "ip", "o", "bit", "ep", "vr", "sp", "lp", "cp", "om", "eq", "operator", "Op", "where", "operation", "prop", "pp", "str", "opt", "type", "oop", "it", "um", "cmd", "pr", "OP", "ok", "k", "comp", "ops", "typ", "hop", "cod", "cmp", "jp", "ap", "ot", "exp", "t", "info", "p", "oper", "cop", "up", "ps", "pred"]}}
{"code": "//package code;\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\n\\n/**\\n *\\n * @author Milo\\n */\\npublic class Main {\\n    \\n    static FastReader in = new FastReader();\\n    public static void main(String[] args) {\\n        int t = 1; //in.nextInt();\\n        while (t-- > 0)\\n            solve();\\n    }\\n \\n    public static void solve() {\\n        int k = in.nextInt();\\n        int a = in.nextInt();\\n        int b = in.nextInt();\\n        \\n        if(a % k == 0 || b % k == 0){\\n            System.out.println(\"OK\");\\n            return;\\n        }else{\\n            int st = (a / k) * k;\\n            while(st + k <= b){\\n                st += k;\\n                if(st >= a && st <= b){\\n                    System.out.println(\"OK\");\\n                    return;\\n                }\\n            }\\n        }\\n        System.out.println(\"NG\");\\n        \\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n \\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n \\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n \\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n \\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n \\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n \\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n \\n    public static int max(int a, int b) {\\n        return a > b ? a : b;\\n    }\\n \\n    public static int min(int a, int b) {\\n        return a < b ? a : b;\\n    }\\n \\n    public static int gcd(int a, int b) {\\n        return b == 0 ? a : gcd(b, (a % b));\\n    }\\n}\\n", "target": "28", "substitutes": {}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.Comparator;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\t/**\\n\t * ???????????\u00a2??\u00b0\\n\t * @param args ?????\u00b0\\n\t * @throws IOException \\n\t * @throws NumberFormatException \\n\t */\\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\\n\t\tBufferedReader in = null;\\n\t\ttry {\\n\t\t\t//???????????????????????????????????????\\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\tint n = Integer.parseInt(in.readLine());\\n\t\t\t\\n\t\t\t//?????\u00a8???????????????????????????\\n\t\t\tSystem.out.println(interest(100000, 5, n));\\n\t\t} finally {\\n\t\t\t//???????????????????????????\\n\t\t\tif(in != null) in.close();\\n\t\t\tin = null;\\n\t\t}\\n\t}\\n\t/**\\n\t * ?????\u00a8?????????????\u00a8?????????????\\n\t * @param debit ??????????????????\\n\t * @param rate ?????????(??????:%)\\n\t * @param n ?????\u00b0\\n\t * @return ?????\u00a8?????????\\n\t */\\n\tpublic static int interest(int debit, int rate, int n) {\\n\t\tint ret = debit;\\n\t\t\\n\t\t//??????????\u00a8??????????\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\t//??????????????????\\n\t\t\tret += ret * rate / 100;\\n\t\t\t//???3??????????????????\\n\t\t\tret = cutOut(ret, 3);\\n\t\t}\\n\t\t\\n\t\t//?????\u00a8?????????????????????\\n\t\treturn ret;\\n\t}\\n\\n\t/**\\n\t * ?????????????????\u00b0???????\u00a8?????????????\\n\t * @param num ????????????????????\u00b0???\\n\t * @param n ??????????????????n???\\n\t * @return ???n?????????????????????\\n\t */\\n\tpublic static int cutOut(int num, int n) {\\n\t\tint ret = num;\\n\t\t//???????????????????\u00b6??????\u00b0???????????????\\n\t\tString kiri = \"1\";\\n\t\tfor(int i = 0; i < n; i++) {\\n\t\t\tkiri = kiri + \"0\";\\n\t\t}\\n\t\t\\n\t\t//???n??????????????????\\n\t\tString str = String.valueOf(ret);\\n\t\tstr = str.substring(str.length()-n, str.length());\\n\t\tif(Integer.parseInt(str) > 0) {\\n\t\t\tret  = ret - Integer.parseInt(str) + Integer.parseInt(kiri);\\n\t\t}\\n\t\t\\n\t\t//?????????????????\u00b0????????????\\n\t\treturn ret;\\n\t}\\n}", "target": "173", "substitutes": {"in": [" val", " bout", " fr", " br", " bu", " err", " sr", " din", " bis", " out", " nin", " ra", " fin", "IN", " bo", " body", " from", "In", " pr", "reader", " intr", " inf", "din", " bar", " fn", "out", " ref", " bin"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        List<Integer> nums = new ArrayList<>();\\n        for(int i=0; i<n; ++i) {\\n            nums.add(sc.nextInt());\\n        }\\n\\n        int n_max = (int)Float.NEGATIVE_INFINITY; //??????????????\u00a7\\n        int n_min = nums.get(0);\\n        for(int i=1; i<n; ++i) {\\n            n_max = Math.max(nums.get(i) - n_min, n_max);\\n            n_min = Math.min(nums.get(i), n_min);\\n        }\\n\\n        System.out.println(n_max);\\n    }\\n}", "target": "208", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "sh", "cr", "bc", "sv", "sp", "inc", "dc", "ck", "ctl", "capt", "cle", "sel", "sch", "sw", "sync", "fc", "tc", "cv", "scan", "sq", "disc", "cs", "ss", "nc", "screen", "pb", "c", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch"], "n": ["nu", "mn", "num", "name", "d", "ll", "nn", "l", "nr", "N", "total", "ns", "m", "ne", "nan", "nl", "cn", "ni", "sn", "norm", "z", "j", "no", "nb", " N", "nc", "na", "k", "np", "en", "nw", "ct", "ng", "t", "network", "nor", "ln", "net", "nt"], "nums": ["nuers", "cums", "cxs", "tenuers", " nuers", "Numbers", " noms", "Nuers", "tenoms", " nxs", " numbers", "noms", "nxs", "coms", "Nxs", "Nums", "numbers", "cumbers", "tenums", "Noms", "tenumbers"], "i": ["q", "I", "ix", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "li", "id", "m", "ini", "err", "in", "ai", "ms", "im", "qi", "a", "index", "f", "us", "init", "u", "j", "bi", "it", "ui", "is", "ie", "pi", "iso", "ic", "ci", "sim", "my", "cli", "multi", "info", "gu", "y", "ii", "xi", "si", "di", "x", "mi"], "n_max": ["n__min", "n__sum", "n_min", "l_min", "n__max", "l_last", "l_sum", "l_max", "n_sum", "n_last", "n__last"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint differ = 0;//\u9593\u9055\u3044\u3092\u5165\u308c\u308b\\n\t\t\\n\t\tfor(int i=1; i<=N; i++) {\\n\t\t\tint P =sc.nextInt();\\n        //i\u3068P\u304c\u4e00\u81f4\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u9593\u9055\u3044\u3092+1\u3059\u308b\\n\t\tif(i!=P){\\n\t\t\t\tdiffer++;\\n\t\t\t}\\n\t\t}\\n        //\u9593\u9055\u3044\u304c2\u3064\u306a\u3089\u305d\u308c\u3092\u5165\u308c\u66ff\u3048\u3066\u6607\u9806\u306b\u3067\u304d\u308b\\n        //2\u3064\u4ee5\u5185\u306a\u3089Yes\\n\t\tSystem.out.println(differ<=2?\"YES\":\"NO\");\\n\t}\\n}", "target": "82", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "esc", "row", "sec", "ser", "sys", "system", "cl", "cr", "bc", "sv", "sp", "inc", "tk", "nl", "ec", "sel", "sch", "tc", "ctrl", "scan", "sq", "cs", "ss", "nc", "ok", "pb", "c", "osc", "Sc", "gc", "exp", "scl", "isc", "SC", "mc", "pc", "rc", "ch"], "N": ["D", "I", "Z", "F", "E", "n", "No", "G", "S", "P", "T", "R", "NS", "A", "NR", "V", "M", "C", "Number", "Counter", "Num", "L", "K", "J", "X", "NT", "B", "Ns"], "differ": ["seare", "compers", "Differs", "compr", "seers", "diffr", "differs", "comper", "Diffare", "seer", "Differ", "diffare", "ser", "Diffr", "compare"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    static int n;\\n    static int a[][];\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        n = sc.nextInt();\\n        a = new int[2][n];\\n\\n        for (int i = 0; i < 2; i++) {\\n            for (int j = 0; j < n; j++) {\\n                a[i][j] = sc.nextInt();\\n            }\\n        }\\n\\n        System.out.println(solve(0, 0));\\n    }\\n\\n    public static int solve(int i, int j) {\\n        int max = 0;\\n\\n        if (i == 1 && j == n - 1) {\\n            max = a[i][j];\\n        } else if (i < 1 && j < n - 1) {\\n            max = Math.max(a[i][j] + solve(i + 1, j), a[i][j] + solve(i, j + 1));\\n        } else if (i < 1) {\\n            max = a[i][j] + solve(i + 1, j);\\n        } else if (j < n - 1) {\\n            max = a[i][j] + solve(i, j + 1);\\n        }\\n        return max;\\n    }\\n}\\n", "target": "140", "substitutes": {"n": ["num", "q", "r", "nu", "mn", "name", "d", "nn", "l", "un", "nr", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "b", "u", "norm", "z", "no", "nb", "g", "na", "k", "nc", "np", "en", "c", "nm", "none", "w", "t", "s", "p", "ng", "nor", "ln", "network", "net", "size", "all", "to", "nt", "x", "names"], "a": ["ae", "va", "ca", "ava", "result", "d", "att", "array", "ar", "l", "abs", "o", "h", "ta", "v", "m", "aa", "app", "da", "sa", "val", "act", "cache", "A", "b", "at", "list", "ia", "u", "an", "arr", "ga", "ao", "history", "z", "ed", "ab", "area", "g", "ba", "aaa", "na", "c", "fa", "ap", "alpha", "e", "as", "ma", "s", "p", "ac", "t", "eas", "y", "au", "era", "all", "aux", "to", "ata", "x", "am"], "sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "ser", "sh", "bc", "sv", "sp", "cr", "ck", "nl", "ctl", "sch", "se", "sync", "fc", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "i": ["I", "ix", "ex", "ri", "phi", "hi", "zi", "iu", "gi", "ei", "fi", "l", "ip", "ji", "li", "id", "ij", "v", "me", "ini", "in", "ai", "ki", "im", "ind", "at", "ori", "ik", "ia", "us", "u", "io", "ims", "bi", "it", "ir", "ity", "ui", "is", "ie", "uri", "pi", "inner", "iso", "ti", "ic", "ci", "sim", "my", "cli", "multi", "info", "iter", "ami", "y", "xi", "ii", "si", "di", "x", "mi"], "j": ["br", "q", "r", "d", "ax", "str", "note", "opt", "f", "job", "pr", "c", "e", "ot", "kj", "y", "all", "x", "jl", "dj", "jac", "jit", "og", "l", "ji", "o", "adj", "ij", "ret", "ja", "io", "z", "bi", "it", "g", "uj", "k", "js", "J", "fr", "s", "dt", "pt", "jj", "jo", "son", "tr", "jas", "ion", "u", "test", "json", "rel", "my", "jp", "out", "other", "p", "jc", "si", "kid", "v", "m", "err", "jump", "ju", "im", "bj", "at", "b", "oj", "ie", "gov", "off", "aj", "obj", "port", "er", "ijk"], "max": ["r", "star", "d", "ax", "log", "gt", "force", "core", "pr", "mx", "c", "conf", "cmp", "last", "all", "med", "res", "x", "window", "map", "limit", "maximum", "best", "global", "id", "ge", "right", "view", "recent", " Max", "full", "rest", "lock", "k", "diff", "exp", "nd", "plus", "pop", "ex", " MAX", "after", "ver", "rand", "print", "mean", "act", "cache", "cd", "with", "mod", "head", "ma", "average", "p", "add", "ox", "hash", "key", "dot", "master", "prime", "total", "cp", "m", "v", "default", "rank", "sum", "inter", "min", "index", "range", "est", "check", "Max", "MAX", "aux", "size"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tlong n = sc.nextLong();\\n\t\tint ans = 100100;\\n\t\tfor(long i = 1 ; i * i <= n ; i++) {\\n\t\t\tif(n % i == 0) {\\n\t\t\t\tans = Math.min(ans, kouta(i, n / i));\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\\n\tpublic static int kouta(long i, long j) {\\n\t\tint ret = 0;\\n\t\tif(i >= j) {\\n\t\t\twhile(i > 0) {\\n\t\t\t\tret++;\\n\t\t\t\ti /= 10;\\n\t\t\t}\\n\t\t} else {\\n\t\t\twhile(j > 0) {\\n\t\t\t\tret++;\\n\t\t\t\tj /= 10;\\n\t\t\t}\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\\n}\\n", "target": "61", "substitutes": {"sc": ["uc", "r", "lc", "cc", "esc", "sb", "cl", "sys", "system", "Scan", "ser", "sv", "sp", "bc", "cr", "nl", "ec", "src", "sch", "RC", "se", "sync", "scan", "sq", " Sc", "cs", "ner", "ss", "nc", "pb", "c", "syn", "osc", "txt", "Sc", "gc", "ng", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "n": ["nu", "num", "mn", "d", "ll", "nn", "number", "l", "un", "len", "N", "gn", "o", "ns", "and", "m", "v", "nan", "ne", "nl", "cn", "ni", "sn", "an", "nb", " N", "g", "na", "nc", "fn", "np", "en", "c", "nw", "nm", "out", "ng", "t", "p", "s", "nor", "ln", "net", "size", "nt"], "ans": ["gs", " means", "acs", "ents", "ints", "ons", "ros", "nets", "aus", "names", "oss", "ns", "asks", "ks", "ads", "nan", "ends", "ians", "ars", "can", "ids", "ms", "ates", "arts", "ANS", "amps", "ats", "ens", "ants", "icons", "es", "ls", "an", "ows", "ols", "AN", "angs", "ams", "anes", " spans", " scans", "orts", "ins", "aps", "ds", "vers", "books", "ions", "as", "cons", "s", "posts", "actions", "ots", "fts", "lan", "offs", "outs", "ann", " pan"], "i": ["I", "ix", "ri", "d", "phi", "hi", "zi", "iu", "gi", "fi", "l", "ei", "ip", "ji", "o", "li", "h", "id", "m", "v", "me", "ini", "ij", "in", "ai", "ni", "ki", "im", "ind", "ori", "qi", "index", "f", "ia", "u", "io", "ir", "bi", "it", "ui", "is", "ie", "uri", "pi", "eu", "iso", "ti", "ic", "ci", "sim", "cli", "imi", "e", "multi", "info", "p", "s", "ami", "y", "xi", "ii", "si", "di", "x", "mi"], "j": ["q", "r", "d", "l", "jl", "ji", "jj", "h", "o", "li", "sys", "ij", "v", "m", "ne", "ja", "bj", "b", "job", "u", "z", "bi", "it", "uj", "g", "k", "json", "aj", "js", "obj", "jp", "J", "other", "fr", "t", "s", "p", "kj", "jc", "jack", "y", "si", "je", "x", "dj"], "ret": ["rets", "num", "r", "result", "elt", "fit", "att", "quad", "red", "len", "sys", "rt", "ref", "usr", "reset", "dr", "default", "pret", "nt", "print", "nz", "val", "gt", "alt", "rm", "count", "RET", "mem", "Ret", "cat", "our", "it", " Ret", "complete", "ext", "cont", "success", "off", "fun", "store", "std", "mt", "vt", "ert", "out", "continue", "t", "def", "iter", "ft", "re", "flag", "mat", "res", "bill", "rem"]}}
{"code": "import java.util.Scanner;\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int in = sc.nextInt();\\n        sc.close();\\n        int[] each_dig = new int[4];\\n        for(int i = 0; i < 4; i++){\\n            each_dig[i] = in % 10;\\n            in /= 10;\\n        }\\n        char[] oprs = new char[3];\\n        for(int i = 0; i < 8; i++){\\n            int sum = each_dig[3];\\n            for(int j = 0; j < 3; j++){\\n                if((i >> j & 1) == 1){\\n                    sum += each_dig[2 - j];\\n                }else{\\n                    sum -= each_dig[2 - j];\\n                }\\n            }\\n            if(sum == 7){\\n                for(int j = 0; j < 3; j++){\\n                    if((i >> j & 1) == 1){\\n                        oprs[j] = '+';\\n                    }else{\\n                        oprs[j] = '-';\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        System.out.println(\"\" + each_dig[3] + oprs[0] + each_dig[2] + oprs[1] + each_dig[1] + oprs[2] + each_dig[0] + \"=7\");\\n    }\\n}", "target": "152", "substitutes": {"sc": ["usc", "sac", "arc", "uc", "lc", "cc", "anc", "esc", "dec", "Sync", "sb", "sec", "cl", "sys", "system", "ser", "Scan", "sv", "sp", "bc", "cr", "ec", "sch", "RC", "sw", "sync", "fc", "tc", "reader", "scan", "sq", " Sc", "cs", "ss", "nc", "c", "osc", "Sc", "out", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch"], "in": ["r", "name", "mm", "gin", "row", "bin", "con", "inf", "from", "current", " din", " out", "isin", "bit", "id", "inc", "m", "ini", "err", "read", "doc", "inn", "rin", "IN", "ai", "run", "lines", "ind", "min", "index", "pos", "In", "init", "io", "win", "reader", "scan", "din", "is", "stream", "inner", "pi", "en", "c", "std", "input", "ins", "out", "t", "info", "cin", "x", "ln", "readable", "line", "mi"], "each_dig": ["keep_grad", "each_dash", " each_dat", "each___dig", "each____div", "each____dig", "each_gen", "each_round", "ach_dig", "most_rand", "these_deg", "children67dig", "each___dash", " each_dot", "most_dat", "most_fif", "each67gen", "each__fif", "children_gen", "children67gen", "each67grad", "each_dat", "most_dig", "each___fif", "these_Dig", "each__grad", "change_Dig", "each67dig", "keep_dig", "children_dig", "ach_digit", " each_div", "each__dig", "each_grad", "each_db", "keep_fif", "ach_del", "these_dig", "change_del", "change_dash", "each___Dig", "each___del", "each67cong", "each___db", "each_digit", "each_fif", "each__db", "each_div", " each_round", "each_dot", "each_cong", "each_desc", "change_dig", "each___grad", "each____dot", " each_Dig", "children67cong", "children67grad", "each_deg", "keep_db", "each_Dig", "children_grad", "each_del", "these_desc", "children_cong", "each_rand"], "i": ["q", "ix", "zi", "iu", "ei", "base", "li", "me", "ai", "ki", "f", "ims", "history", "is", "eu", "ic", "e", "ami", "y", "di", "x", "ri", "fi", "ip", "id", "ij", "ret", "iti", "io", "bi", "it", " I", "g", "ci", "sim", "cli", "iq", "ii", "ex", "phi", "hi", "ion", "this", "print", "ind", "ia", "ir", "status", "pi", "my", "jp", "xi", "si", "mi", "I", "gi", "iy", "m", "ini", "err", "im", "at", "qi", "index", "us", "init", "ity", "ui", "ie", "ti", "multi", "info", "iter"], "oprs": ["oppres", "opsps", " opributes", "roprs", "opresses", "opsris", "aprs", " opres", "oopRs", "mopris", "roprots", "apras", "opsributes", "opars", "opprs", " oprots", "optrs", "apRS", "apRs", " opars", "ooprs", "oparms", "oprots", "opsras", " oparms", "opributes", "optars", " opns", "apris", "oppRs", " opras", "opns", "aprots", "opRs", "opprys", " oprys", "ropras", "opsars", "oopresses", "opRS", "opsarms", "apds", "optributes", "optros", "mopps", "optns", "optarms", "opps", "opros", "opsns", "aprys", "opras", " opRs", "opsros", "oprys", "apresses", "ropres", "apres", " opros", "opds", "opsds", "opsrs", "opris", "mopds", "oopRS", "opres", "moprs", "optras", " opRS", " opresses", "apps"], "sum": ["Sum", "num", "result", "cal", "tu", "SI", "dim", "cos", "base", "temp", "weight", "med", "total", "zero", " SUM", "sh", "summary", "sa", "ne", "su", "mean", "cache", "scale", "count", "sm", "us", "fac", "mem", "share", "sup", "um", "null", "cum", "vol", "na", "mass", " summed", "hum", "sim", "body", "max", "ass", "out", "sam", "ma", "add", "size", "si", "all", "hash"], "j": ["br", "q", "block", "ix", "li", "sp", "n", "ne", "str", "note", "f", "job", "on", "left", "pr", "kj", "y", "di", "je", "res", "jl", "dj", "next", "jit", "col", "og", "el", "l", "ji", "adj", "ij", "ge", "ja", "z", "it", "uj", "g", "k", "js", "J", "bo", "fr", "exp", "ng", "pt", "att", "jj", "jo", "tr", "jas", "ion", "zone", "json", "jp", "other", "jc", "key", "v", "let", "jump", "err", "by", "ju", "user", "bj", "b", "oj", "gov", "bot", "aj", "obj", "jet", "ev"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        while(true) {\\n            String Cards = sc.next();\\n            int i, j;\\n            int l = Cards.length();\\n            char w[] = new char[l];\\n            char R[] = new char[l];\\n            for (i = 0; i < l; i++) {\\n                w[i] = Cards.charAt(i);\\n            }\\n            if(w[0] == '-') break;\\n            int m = sc.nextInt();\\n            for (i = 0; i < m; i++) {\\n                int h = sc.nextInt();\\n                for (j = 0; j < l; j++) {\\n                    if (j < h) {\\n                        R[j] = w[j];\\n                    } else {\\n                        w[j - h] = w[j];\\n                    }\\n                }\\n                for (j = 0; j < h; j++) {\\n                    w[l - h + j] = R[j];\\n                }\\n            }\\n            for (i = 0; i < l; i++) {\\n                System.out.printf(\"%c\", w[i]);\\n            }\\n            System.out.printf(\"\\n\");\\n        }\\n    }\\n}\\n\\n", "target": "216", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "inc", "ctl", "ec", "cle", "irc", "sch", "sw", "fc", "sync", "tc", "ctrl", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "c", "osc", "cmp", "Sc", "gc", "asc", "scl", "isc", "ctx", "sic", "SC", "mc", "pc", "rc", "ch", "desc"], "Cards": ["VCARDS", "card", "Cats", "Card", "Carters", "Cocards", " CARD", "cats", "VCard", "CARD", "JCards", "carters", " Cats", "cARD", "JCard", "CoARDS", "VCards", " Ccards", "ccards", "cards", "JCARD", "JCats", "Scarters", " Card", "Scard", "CARDS", "Ccards", " Carters", "cARDS", "Scards", "Sccards", "Coards", "Coard", "VCcards"], "i": ["q", "I", "r", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "ei", "fi", "ip", "ji", "point", "li", "v", "ij", "dr", "ini", "me", "in", "this", "ai", "ki", "im", "ind", "qi", "ori", "index", "f", "ia", "ik", "init", "u", "\u0438", "io", "bi", "it", "is", "ui", "ie", "pi", "inner", "ti", "ic", "ci", "c", "sim", "yi", "cli", "PI", "multi", "info", "p", "iter", "iq", "ami", "y", "oi", "ii", "xi", "si", "di", "x", "mi"], "j": ["br", "q", "jac", "jit", "r", "ix", "pt", "key", "ev", "jl", "ji", "jj", "o", "jo", "v", "ij", "n", "tr", "jump", "msg", "ion", "ju", "by", "yes", "ja", "ind", "bj", "at", "note", "oj", "job", "on", "z", "it", "ie", "pr", "uj", "g", "k", "json", "js", "aj", "obj", "jp", "J", "ot", "fr", "bo", "s", "jet", "kj", "jc", "y", "ijk", "to", "je", "ch", "dj"], "l": ["dl", "lt", "r", "lc", "il", "ll", "d", "loc", "el", "hl", "len", "kl", "li", "pl", "v", "n", "ol", "lp", "level", "nl", "lo", "le", "lit", "lim", " L", "lin", "list", "f", "sl", "ls", "u", "ml", "z", "left", "isl", "g", "length", "lv", "c", "ell", "ul", "L", "t", "s", "p", "ln", "all", "line", "ly"], "w": ["q", "r", "wx", "d", "wl", "wb", "wt", "writer", "wp", "WC", "v", "ew", "n", "word", "aw", "rew", "web", "ws", "wa", "wn", "ren", "wal", "sw", "res", "rw", "wd", "W", "u", "hw", "z", " W", "weights", "words", "g", "RW", "wr", "ww", "c", "nw", "t", "wh", "we", "p", "s", "fw", "kw", "x", "window"], "R": ["D", "I", "r", "RB", "Rot", "RE", "N", "Res", "Ren", "G", "S", "P", "RF", "RM", "T", "RO", "Q", "BR", "NR", "V", "W", "M", "SR", "RH", "Rs", "RS", "H", "C", "RR", "RW", "U", "RG", "RL", "L", "Y", "RA", "GR", "RP", "X", "Row", "B"], "m": ["r", "mm", "d", "dm", "mo", "o", "n", "v", "me", "ms", "mr", "mu", "im", "a", "b", "f", "sm", "M", "mem", "ml", "z", "tm", "gm", "g", "k", "cm", "c", "mt", "ma", "t", "p", "y", "em", "mc", "hm", "all", "mat", "mi"], "h": ["ho", "he", "q", "r", "mm", "hi", "hl", "o", "sh", "kh", "v", "bh", "oh", "n", "high", "hh", "ih", "hz", "hd", "b", "f", "ht", "u", "z", "history", "hex", "hr", "H", "g", "html", "k", "head", "ul", "ph", "t", "p", "ha", "y", "hm", "him", "hs", "ch", "height", "ah", "hash"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String s = sc.next();\\n        boolean bool = true;\\n        if(n % 2 != 0){\\n            System.out.println(\"No\");\\n            return;\\n        }\\n        for(int i = 0; i < n/2; i++){\\n            if(s.charAt(i) != s.charAt(n/2+i)){\\n                bool = false;\\n                break;\\n            }\\n        }\\n        if(bool){\\n            System.out.println(\"Yes\");\\n        }else{\\n            System.out.println(\"No\");\\n        }\\n        \\n    }\\n}\\n\\n", "target": "161", "substitutes": {"sc": ["usc", "sac", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "ser", "cr", "bc", "sv", "sp", "inc", "sa", "ec", "capt", "cle", "sel", "sch", "sync", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "n": ["nu", "mn", "num", "name", "d", "unn", "nn", "number", "l", "un", "len", "N", "gn", "ns", "m", "dn", "ne", "nan", "nl", "cn", "ren", "sn", "note", "on", "norm", "an", "z", "j", "no", "nb", "nc", "na", "np", "en", "c", "nw", "none", "nm", "ng", "t", "nor", "ln", "net", "size", "all", "nt", "names"], "s": ["gs", "r", "sb", "sg", "l", "rs", "sys", "h", "so", "sv", "sp", "m", "v", "ws", "bs", "S", "ms", "its", "sw", "str", "se", "b", "f", "sl", "ls", "j", "string", "sts", "is", "ts", "sq", "g", "ss", "c", "js", "out", "w", "t", "p", "hs", "st"], "i": ["q", "I", "ix", "ri", "key", "phi", "gi", "zi", "iu", "ei", "l", "ip", "ji", "point", "li", "o", "id", "m", "v", "me", "ini", "remote", "ai", "ki", "mu", "im", "ind", "qi", "a", "ori", "index", "f", "us", "init", "u", "\u0438", "j", "bi", "it", "slice", "ui", "is", "uri", "pi", "ti", "ic", "ci", "sim", "multi", "iter", "gu", "p", "y", "ii", "xi", "si", "span", "di", "mi"], "bool": ["valid", "dl", "true", "coll", "compl", "fail", "chain", "enabled", "cond", "sol", "broad", "possibly", "alse", "bc", "bel", "bil", "boot", "bol", "btn", "msg", "bl", "bs", "stay", "ool", "b", "conv", "note", "irm", "bm", "status", "olean", "bug", "vol", "lvl", "eval", "False", "arb", "rel", "obj", "bis", "bo", " boo", "flag", "false", "confirmed", "jl", "lu"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        Main m = new Main(sc);\\n        m.show(m.solve());\\n        sc.close();\\n    }\\n    \\n\t//\u30d5\u30a3\u30fc\u30eb\u30c9\\n    Scanner sc;\\n    String S;\\n    \\n    //\u5165\u529b\\n    Main(Scanner sc) {\\n        this.sc = sc;\\n        this.S = sc.next();\\n    }\\n    \\n    //\u89e3\u7b54\u51e6\u7406\\n    private int solve() {\\n        int red = 0;\\n        int blue = 0;\\n        \\n        for (int i=0; i<S.length(); i++) {\\n        \tif (S.charAt(i) == '0') {\\n        \t\tred++;\\n        \t} else {\\n        \t\tblue++;\\n        \t}\\n        }\\n        \\n        int count = 2 * (int)Math.min(red, blue);\\n        return count;\\n    }\\n    \\n    //\u51fa\u529b\\n    public void show(int answer) {\\n        System.out.println(answer);\\n    }\\n\\n}\\n", "target": "14", "substitutes": {"sc": ["usc", "uc", "lc", "ca", "cc", "anc", "esc", "mp", "sb", "sec", "co", "cl", "sys", "system", "sh", "sv", "cr", "bc", "sa", "ck", "nl", "ec", "cle", "can", "sch", "cam", "RC", "se", "sm", "fc", "tc", "scan", "sq", "cs", "ss", "c", "syn", "sk", "osc", "Sc", "gc", "asc", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "ch"], "m": ["mn", "mm", "dm", "d", "pm", "mp", "l", "o", "v", "om", "md", "ms", "vm", "mr", "mu", "im", "rm", "b", "esm", "sm", "on", "M", "mem", "j", "tm", "gm", "g", "mod", "cm", "manager", "c", "mt", "nm", "ma", "t", "s", "wm", "p", "man", "em", "hm", "mc", "mi", "am"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\\n\t\tint N = Integer.parseInt(sc.next());\\n\t\tint K = Integer.parseInt(sc.next());\\n\t\tString result = \"\";\\n\t\twhile (N > 0) {\\n\t\t\tresult = N % K + result;\\n\t\t\tN /= K;\\n\t\t}\\n\\n\t\tout.println(result.length());\\n\t\tout.flush();\\n\t}\\n}", "target": "219", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "esc", "sec", "cl", "sys", "cr", "bc", "sv", "sp", "ch", "dc", "ec", "ctl", "src", "sch", "sw", "tch", "tc", "scan", "sq", "cs", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "cons", "isc", "SC", "mc", "pc", "rc", "conv", "scrib", "sci", "desc", "st"], "out": ["ou", "r", "ex", "end", "outer", "flush", "con", "writer", "error", "co", "o", "sys", "log", "put", "n", "v", "exit", "ch", "err", "in", "nt", "print", "OUT", "os", "sum", "file", "can", "write", "client", "user", "gt", "at", "list", "io", "gr", "it", "aos", "Out", "cmd", "full", "screen", "en", "store", "output", "w", "gc", "t", "info", "crit", "up", "net", "all", "to", "yout", "res", "outs", "st"], "N": ["D", "I", "Node", "TN", "FN", "ND", "NM", "NUM", "NI", "SN", "NP", "NE", "NPR", "NB", "n", "NV", "S", "NG", "NO", "NL", "R", "NS", "NR", "V", "M", "NH", "DN", "MN", "GN", "NC", "H", "C", "Number", "NA", "Num", "L", "J", "X", "CN", "CNN", "NN", "NT", "Ns"], "K": ["Z", "I", "F", "Key", "B", "MK", "KING", "KE", "Kind", "KA", "KK", "KS", "VK", "KC", "O", "G", "S", "KI", "P", "T", "R", "KB", "Q", "KT", "V", "M", "W", "Mask", "KN", "H", "C", "k", "Kat", "OK", "KR", "TH", "L", "IND", "PK", "J", "UK", "Max", "FK", "SK", "KEY", "KY"], "result": ["response", "wrapper", "r", "description", "row", "number", "error", "Result", "total", "prefix", "value", "n", "relation", "print", "report", "ret", "cache", "ter", "str", "search", "buffer", "test", "sequence", "results", "comment", "null", "string", "message", "expression", "complete", "data", "RESULTS", "text", "success", "output", "ULT", "answer", "continue", "integer", "product", "char", "command", "successful", "reason", "rc", "query", "res", "function", "next", "term"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        s = s.replaceAll(\"eraser\", \"0\");\\n        s = s.replaceAll(\"erase\", \"0\");\\n        s = s.replaceAll(\"dreamer\", \"0\");\\n        s = s.replaceAll(\"dream\", \"0\");\\n        s = s.replaceAll(\"0\", \"\");\\n        if (s.length()== 0){\\n            System.out.println(\"YES\");\\n        } else {\\n            System.out.println(\"NO\");\\n        }\\n\\n    }\\n\\n}", "target": "50", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "sh", "ser", "cr", "bc", "sv", "sp", "inc", "ec", "ko", "cle", "sel", "sch", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "ok", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "s": ["set", "gs", "save", "https", "eps", "sql", "sb", "l", "rs", "abs", "h", "ns", "uts", "sv", "strings", "n", "m", "simple", "source", "su", "parts", "ws", "S", "csv", "ms", "its", "less", "ats", "str", "b", "list", "search", "sl", "fs", "ls", "es", "sync", "ims", "z", "space", "sts", "pers", "string", "is", "ts", "sq", "cs", "g", "ss", "c", "js", "ins", "ds", "w", "as", "t", "p", "qs", "ps", "tes", "xs", "stats", "conv", "hs", "res"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t// \u6574\u6570\u306e\u5165\u529b\\n\t\tString s = sc.next();\\n\t\tString split[] = s.split(\"\");\\n\t\tint i;\\n        int count = 0,ans = 0;\\n        \\n      \tfor(i = 0;i < s.length();i++){\\n          if(split[i].equals(\"A\") || split[i].equals(\"C\") || split[i].equals(\"G\") || split[i].equals(\"T\") ){\\n            count += 1;  \\n          }else{\\n            if(ans < count){\\n              ans = count;\\n            }\\n            count = 0;\\n          }\\n        }\\n        if(ans < count){\\n              ans = count;\\n        }\\n        System.out.println(ans);   \\n    }\\n}", "target": "100", "substitutes": {"sc": [" cr", "sb", " SC", " ss", " scorer", "sys", "system", "sv", "sp", "cr", " scr", "sa", " sk", " sh", " sw", " sa", "scan", "sq", " Sc", "cs", "ss", "c", "Sc", "SC", "rc", "proc", "ch", " sp"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int number, i, sum = 0, tmp = -1;\\n    number = Integer.parseInt(sc.next());\\n    int[] order = new int[number];\\n    int[] score = new int[number];\\n    int[] additional = new int[number-1];\\n    for(i = 0; i < number; i++) {\\n      order[i] = Integer.parseInt(sc.next());\\n    }\\n    for(i = 0; i < number; i++) {\\n      score[i] = Integer.parseInt(sc.next());\\n    }\\n    for(i = 0; i < number-1; i++) {\\n      additional[i] = Integer.parseInt(sc.next());\\n    }\\n    for(i = 0; i < number; i++) {\\n      sum += score[order[i] - 1];\\n      if(tmp + 1 == order[i]) sum += additional[tmp - 1];\\n      tmp = order[i];\\n    }\\n    System.out.println(sum);\\n  }\\n}\\n", "target": "223", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "bc", "cr", "sv", "sp", "inc", "ck", "ctl", "sel", "cle", "irc", "sch", "sync", "fc", "exec", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "comp", "c", "osc", "Sc", "gc", "cons", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "psc", "ch", "desc"], "number": ["block", "group", "work", "production", "row", "base", "NUM", "device", "language", "amount", "n", "phone", "ne", "batch", "lon", "note", "collection", "radius", "na", "padding", "net", "num", "nu", "frequency", "maximum", "current", "nr", "chain", "zero", "NB", "random", "book", "count", "no", "document", "table", "counter", "network", "span", "result", "nn", "version", "nine", "database", "square", "power", "list", "nb", "Number", "length", "umber", "other", "date", "volume", "non", "numbered", "position", "total", "node", "BER", "back", "null", "news", "directory", "record", "normal", "max", "duration", "reverse", "integer", "successful", "size", "to"], "i": ["q", "ix", "zi", "iu", "details", "ei", "li", "n", "me", "batch", "ai", "ki", "iii", "f", "ims", "is", "ic", "ami", "oi", "y", "di", "ri", "fi", "l", "chain", "ip", "ji", "point", "id", "ij", "source", "in", "ori", "io", "bi", "it", "g", "ci", "sim", "cli", "ii", "span", "ex", "phi", "hi", "jo", "this", "ni", "ind", "\u0438", "ir", "pi", "json", "my", "p", "iri", "xi", "si", "mi", "I", "mm", "gi", "v", "m", "ini", "ski", "im", "qi", "index", "us", "init", "j", "ui", "ie", "uri", "ti", "multi", "t", "info"], "sum": ["Sum", "num", "sym", "sat", "loss", "acc", "mm", "cal", "dot", "frac", "temp", "total", " SUM", "stats", "sign", "summary", "percent", "su", "process", "square", "mean", "report", "count", "us", "fac", "sort", "mem", "dev", "um", "comment", "si", "sup", "cum", "vol", "ss", "mix", "mass", " summed", "hum", "sim", "ass", "max", "cmp", "out", "black", "sam", "prof", "average", "dump", "add", "aux", "med", "all", "size", "hash"], "tmp": ["num", "offset", "snap", "mp", "timeout", "temp", "pre", "nr", "prime", "tp", "total", "perm", "zero", "prefix", "adj", "sp", "cp", "tt", "nom", "buff", "top", "this", "attr", "xy", "dirty", "td", "mut", "cache", "ind", "img", "pos", "qq", "j", "extra", "pkg", "nb", "mk", "ptr", "zone", "np", "emp", "obj", "cmp", "max", "jp", "alpha", "ot", "angle", "t", "etc", "p", "ctx", "proc", "nt", "amp"], "order": ["num", "offset", "direction", "priority", "end", "group", "name", "row", "version", "position", "error", "allow", "address", "Order", "chain", "price", "move", "id", "err", "level", "orders", "rank", "where", "ice", "user", "or", "se", "index", "search", "count", "sort", "type", "over", "match", "sequence", "core", "ordered", "area", "ptr", "length", "table", "mode", "store", "angle", "er", "iter", "date", "dir", "op", "size", "depth", "seed", "grade", "ord"], "score": ["set", "description", "details", "parse", "price", "draw", "value", "source", "speed", "distance", "rank", "sche", "report", "scale", "se", "count", "search", "match", "sort", "buffer", "test", "sequence", "scoring", "scan", "core", "Score", "sky", "success", "length", "evaluate", "store", "step", "balance", "style", "er", "strength", "rate", "goal", "size", "grade"], "additional": ["Additionally", "addsequent", "aditional", "conditional", "addeditional", "newitional", "addedended", "addended", "condended", "addeditionally", "additive", " addsequent", "Addended", "modsequent", "moditionally", "additionally", "moditive", "aditive", " additive", "conditions", "aditions", "Additional", " additions", "Additions", "conditionally", "newitions", "moditional", "conditive", "addeditions", "condsequent", "newitive", " additionally", "additions"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long n = sc.nextLong();\\n        sc.close();\\n\\n        String s = \"\";\\n\\n        while(n > 0) {\\n            n--;\\n            s = (char)('a' + n % 26) + s;\\n            n /= 26;\\n        }\\n        System.out.println(s);\\n    }\\n}\\n", "target": "191", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "sh", "cr", "sv", "sp", "bc", "inc", "ck", "nl", "capt", "ko", "ec", "cle", "sch", "RC", "sync", "fc", "tc", "scan", "sq", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "sub"], "n": ["nu", "mn", "num", "d", "ll", "nn", "l", "number", "len", "N", "gn", "h", "ns", "v", "m", "dn", "nan", "ne", "nl", "cn", "ren", "sn", "a", "note", "f", "norm", "z", "j", "nb", "i", "g", "na", "nc", "fn", "np", "rn", "en", "c", "nw", "ng", "t", "nor", "ln", "net", "all", "size", "nt", "non"], "s": ["set", "q", "gs", "r", "sql", "sb", "sg", "l", "rs", "abs", "h", "o", "ns", "sv", "sp", "m", "source", "ws", "bs", "raw", "S", "spec", "its", "ys", "sw", "ats", "str", "se", "b", "sl", "es", "ls", "sts", "string", "is", "ts", "sq", "i", "cs", "g", "ss", "c", "js", "ds", "ins", "gets", "des", "out", "w", "t", "p", "qs", "changes", "y", "ps", "tes", "stats", "conv", "hs"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n  \tScanner sc = new Scanner(System.in);\\n    int[] nums = new int[5];\\n    for(int i = 0;i < 5;i++){\\n      nums[i] = sc.nextInt();\\n    }\\n    int tail = Integer.MAX_VALUE;\\n    int min = 0;\\n    for(int j = 0;j < nums.length;j++){\\n      \tint temp = nums[j] % 10;\\n    \tif(temp != 0 && tail > temp){\\n        \ttail = temp;\\n          \tmin = j;\\n        }\\n    }\\n    int sum = 0;\\n    for(int j = 0;j < nums.length;j++){\\n    \tif(j != min){\\n          if(nums[j] % 10 == 0){\\n             sum += nums[j];\\n          }else{\\n            sum += (nums[j] / 10) *10 + 10;\\n          }\\n        }\\n    }\\n    System.out.println(sum + nums[min]);\\n  }\\n}", "target": "63", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "anc", "esc", "sb", "sec", "co", "cl", "sys", "system", "Scan", "ser", "sv", "sp", "bc", "cr", "ctl", "sel", "sch", "sw", "se", "sync", "scan", "sq", " Sc", "cs", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "nums": ["nuers", "cums", "nurus", "nests", "nims", " nems", "nogs", "nturus", "snumbers", " names", " numbers", "nsews", "noms", "anaves", "jumps", "anues", "Nums", "jumbers", "ensims", "namps", "nsum", "cumbers", "neames", "jums", "anumps", "Numps", " news", "naves", "anews", " namps", "names", "num", "anoms", " nues", "ensems", "nsues", "cogs", "onurus", "Numbers", " nogs", "ensumps", " nims", "nsogs", "onurs", "snums", "numps", "ntums", "Noms", "nsames", "nsaves", "anems", "snils", "anuers", " numbs", "ensums", " noms", "onums", "anumbers", "nurs", " nurs", "neumers", "anumbs", "anums", "nsums", "Nests", "nues", " nurus", "jests", " num", "nils", "nsumbers", "snoms", "nems", "neums", "nturs", "nsumbs", "nsoms", " nuers", "nsuers", "numers", " nils", "neum", " nests", "nsumers", " numps", "anims", "cuers", "numbs", "Nils", "news", "numbers", "ntamps", "onamps", " numers", " naves"], "i": ["q", "I", "ix", "ex", "phi", "hi", "iu", "ip", "li", "id", "v", "m", "me", "ini", "in", "ai", "im", "qi", "ori", "us", "init", "u", "io", "ims", "ir", "it", "ui", "is", "ie", "uri", " I", "pi", "iso", "ti", "ic", "ci", "sim", "my", "e", "multi", "t", "iq", "gu", "iter", "info", "ami", "y", "ii", "si", "di", "mi"], "tail": ["lt", "il", "offset", "end", "mini", "limit", "fat", "tails", "maximum", "timeout", "master", "prime", "secondary", "len", "nil", "ta", "zero", "unt", "tmp", "tree", "latest", "top", "lim", "root", "minimum", "lem", "index", "buffer", "left", "unit", "it", "mint", "lock", "length", "head", "ail", "max", "body", "t", "tailed", "foot", "size", "mi", "term"], "min": ["lt", "mins", "mini", "limit", "next", "dim", "mind", "sol", "part", "prime", "Min", "best", "li", "minute", "m", "member", "me", "emin", "stat", "in", "section", "small", "mean", "start", "minimum", "lem", "index", "amin", "sort", "init", "test", "lower", "left", "mint", "first", "partial", "only", "mod", "mine", "ail", "head", "max", "none", "local", "MIN", "man", "med", "mi", "mit"], "j": ["br", "q", "jac", "ix", "jit", "col", "og", "key", "att", "el", "l", "jl", "ji", "jj", "o", "jo", "adj", "sp", "n", "ij", "jump", "msg", "ion", "ju", "item", "ja", "im", "ind", "bj", "note", "b", "oj", "job", "req", "f", "z", "Ja", "it", "pr", "uj", "g", "json", "k", "bot", "aj", "js", "obj", "jp", "bo", "J", "fr", "other", "exp", "je", "jet", "kj", "y", "jc", "jack", "ev", "x", "kid", "dj"], "temp": ["pt", "deg", "mm", "created", "perature", "mp", "current", "pre", "prime", "perm", "ta", "unt", "tmp", "needed", " tmp", "tr", "tt", "cap", "tem", "Temp", "cell", " Temp", "termin", "test", "tc", "orig", "Temperature", "mint", "tm", "partial", "ptr", "template", "status", "cum", "mod", "emp", "txt", "volt", "diff", "t", "iter", "porary", "dep", "fake", "ty", "term"], "sum": ["Sum", "num", "sat", "result", "save", "cal", "frac", "weight", "total", "zero", " SUM", "summary", "ash", "sa", "cast", "su", "mean", "mu", "cache", "se", "count", "us", "umm", "fac", "norm", "mem", "view", "sort", "stack", "dev", "um", "si", "sup", "gam", "rup", "success", "cum", "vol", "na", "mod", "mix", "mass", " summed", "hum", "sim", "max", "ass", "out", "sam", "ma", "average", "add", "size", "med", "seed", "hash"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main\\n{\\n\tpublic static void main(String args[]) throws IOException\\n\t{\\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\\n\t\tint n=0;\\n\t\tn=Integer.parseInt(br.readLine());\\n\t\tString brr[]=br.readLine().split(\" \");\\n\t\tlong arr[]=new long[n];\\n\t\tfor(int i=0;i<n;i++)\\n\t\t{\\n\t\t\tarr[i]=Long.parseLong(brr[i]);\\n\t\t}\\n\t\tlong ans=0;\\n\t\tfor(int i=1;i<n;i++)\\n\t\t{\\n\t\t\tif(arr[i-1]>arr[i])\\n\t\t\t{\\n\t\t\t\tans+=Math.abs(arr[i]-arr[i-1]);\\n\t\t\t\tarr[i]+=Math.abs(arr[i]-arr[i-1]);\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "202", "substitutes": {"br": ["r", "ctr", "bro", "shr", "nr", "vr", "cr", "ber", "kr", "dr", "bh", "bf", "tr", "bridge", "db", "bl", "bs", "bn", "bp", "Br", "mr", "ger", "BR", "b", "lr", "bd", "eb", "hr", "bi", "bm", "pr", "wr", "bt", "browser", "rel", "yr", "fr", "bb", "be", "rb", "ch", "gr", "rem", "next"], "n": ["num", "nu", "r", "mn", "q", "name", "d", "ll", "nn", "l", "number", "un", "len", "N", "gn", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "index", "count", "an", "z", "j", "it", "no", "nb", " N", "g", "na", "k", "nc", "length", "pi", "fn", "en", "c", "np", "nm", "out", "t", "ng", "p", "network", "ln", "net", "size", "all", "nt", "names"], "brr": ["brn", "brrt", "brerr", "brert", "brl", "BRn", "hrl", "BRrr", "brrr", "brel", "brer", "hrrr", "bern", " brrt", "berr", " brl", "hrn", "BRl", "berrt", " brrr", "berrr", "BRr", "hrr", "berl"], "arr": ["arc", "r", "ix", "av", "emb", "coll", "ll", "array", "align", "me", " narr", "Ar", "plot", "art", "inst", "pr", "air", "ARR", "ars", "map", "rr", "cur", "vec", "adj", "aa", "app", "db", "resp", "alph", "attr", "are", "ang", "arb", "ell", "fr", "exp", "au", "expr", "dat", "elt", "Array", "att", "ar", "var", "dr", "rep", "bl", "val", "dict", "hist", "ble", "list", "req", "gr", "rel", "ann", "save", "ray", "compl", "agg", "pl", "err", "enc", "buf", "img", "repl", "par", "play", "vol", "aaa", "obj", "ev", "ali"], "i": ["set", "q", "ix", "zi", "iu", "base", "ei", "li", "me", "batch", "ai", "ms", "ki", "ik", "ims", "is", "ic", "ami", "y", "oi", "di", "ish", "ri", "chain", "ip", "ji", "point", "o", "asi", "ij", "client", "io", "bi", "it", "um", "inner", "g", "ci", "sim", "cli", "exp", "ii", "phi", "hi", "this", "print", "ni", "ind", "u", "\u0438", "status", "pi", "my", "ma", "xi", "si", "mi", "I", "name", "gi", "iy", "v", "m", "ini", "im", "qi", "index", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "multi", "iter", "info", "to"], "ans": ["gs", " means", " Ans", "uns", "acs", "eps", "ents", "ros", "vals", "aus", "rs", "anks", "oss", "eds", "ns", "ads", "ks", "ends", "ians", "os", "ars", "yes", "ms", "ean", "arts", "ANS", "ys", "amps", "ats", "ens", "ants", "es", "ls", "an", "ows", "AN", "vs", "aos", "ts", " scans", "cs", "ins", "aps", "ds", "as", "posts", "xs", "rans", "lan", "offs", "outs", "ann"]}}
{"code": "import java.util.*;\\npublic class Main\\n{\\n    public static void main(String []args)\\n    {\\n        Scanner sc=new Scanner(System.in);\\n        int a=sc.nextInt();\\n        int c1=0;\\n        int c2=0;\\n        int c3=0;\\n        int c4=0;\\n            for(int i=0;i<a;i++)\\n            {\\n                String s=sc.next();\\n                if(s.equals(\"AC\"))\\n                    c1++;\\n                if(s.equals(\"WA\"))\\n                    c2++;\\n                if(s.equals(\"TLE\"))\\n                    c3++;\\n                if(s.equals(\"RE\"))\\n                    c4++;\\n            }\\n            System.out.println(\"AC\"+\" \"+\"x\" +\" \"+ c1);\\n            System.out.println(\"WA\"+\" \"+\"x\" + \" \"+c2);\\n            System.out.println(\"TLE\"+\" \"+\"x\" +\" \" +c3);\\n            System.out.println(\"RE\"+\" \"+\"x\" + \" \" +c4);\\n    }\\n}\\n", "target": "160", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "ser", "sv", "sp", "cr", "bc", "inc", "dc", "sa", "ck", "ec", "cle", "src", "sch", "sw", "sync", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "c", "osc", "txt", "Sc", "gc", "scl", "asc", "sr", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "st", "sub"], "a": ["ae", "ca", "ax", "oa", "ta", "amount", "n", "aa", "sta", "sa", "ai", "A", "b", "ia", "an", "ga", "ao", "ity", "ab", "pa", "area", "apa", "ba", "na", "ach", "aka", "aj", "ada", "alpha", "ma", "as", "ac", "au", "all", "to", "va", "am"], "c1": ["C3", "cache2", "ct2", " c101", "cache1", "acOne", "chain1", "C1", "chain71", "cache71", "color101", "ac2", "c71", " cOne", "color1", "chain2", "color0", "cacheOne", "c101", " c0", "chain3", "c05", "ac1", "ct1", "cu05", "cu101", "ct3", "ac71", "cu1", "cu0", "ct71", "cOne", "C2", "C71", " c05", " c71", "color05", "c0"], "c2": ["const5", "ctwo", "cache2", "p2", "consttwo", "CTwo", "cache52", "pTwo", "rcTwo", "C4", "category5", "c5", "C1", " c52", "p1", "e52", "rc1", "category2", "p4", "const2", "const8", " ctwo", "cTwo", "e3", "rc2", "c8", "rc4", "cache4", " c5", "cache3", "C2", " c8", "c52", "categorytwo", "e4", "e2", "category8"], "c3": ["dc03", "ce1", "dc07", "rc3", "category3", "ac3", "c53", "rc6", "p7", "dc53", "p4", "cache03", "category03", "ac4", "p3", "c8", "cache53", "rc4", "cache07", "category07", "c6", "ac7", "ct1", "c07", "ct3", "rc7", "cache3", "dc3", "category53", "c03", "c7", "ce3", "ce4", "ce8", " c8", "ct8", "ac6", "p6", "ct4"], "c4": ["ac13", "chain4", "cv2", "cv4", "chain13", " c42", "ce04", "cu45", "cv40", "arc5", "const4", "c5", "c42", "ac3", " c04", "c40", "ce5", "const2", "arc4", "ac4", "ce42", "const40", "cu3", "cu4", " c5", "chain3", "c04", " c7", "arc04", "const7", "ac45", " c40", "c7", "chain45", "ce4", "c45", "cv7", "c13", "arc42", "cu13"], "i": ["set", "q", "I", "ix", "sql", "phi", "gi", "zi", "iu", "chain", "ip", "li", "o", "m", "me", "ini", "batch", "ai", "ms", "im", "ind", "qi", "us", "init", "io", "j", "bi", "it", "ui", "ie", "is", "pi", "ti", "ci", "c", "sim", "cli", "multi", "gu", "iter", "y", "ii", "xi", "si", "di", "x", "mi"], "s": ["set", "sym", "gs", "r", "sql", "sf", "sb", "l", "rs", "ns", "sh", "sv", "sp", "n", "m", "v", "sports", "ws", "S", "series", "spec", "its", "ms", "self", "less", "ats", "str", "south", "se", "b", "search", "sl", "ls", "ims", "z", "space", "sts", "vs", "string", "is", "ts", "sq", "g", "ss", "c", "js", "ds", "txt", "e", "t", "qs", "y", "ps", "hs"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\nclass Main{\\n\tstatic final long MOD = 1_000_000_007; // 10^9+7\\n    static final int MAX = 2_147_483_646; // intMax \\n    static final int INF = 1_000_000_000; // 10^9  \\n    public static void main(String[] args) throws Exception {\\n\t\thayami saori = new hayami();\\n\t\tint n = saori.saori_hayami();\\n\t\tString[] s = Integer.toString(n).split(\"\");\\n\t\tint num = 0;\\n\t\tfor(int i = 0;i < s.length;i++){\\n\t\t\tnum += Integer.parseInt(s[i]);\\n\t\t}\\n\t\tif(n%num == 0){\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t} else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t\tsaori.close();\\n    }\\n}\\n\\nclass hayami implements Closeable {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] hayami = new byte[1024];\\n\tprivate int Hayami = 0;\\n\tprivate int saori = 0;\\n\tprivate boolean HayamiSaori() {\\n\t\tif (Hayami < saori) {\\n\t\t\treturn true;\\n\t\t}else{\\n\t\t\tHayami = 0;\\n\t\t\ttry {\\n\t\t\t\tsaori = in.read(hayami);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (saori <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\tprivate int SaoriHayami() { \\n\t\tif (HayamiSaori()) {\\n            return hayami[Hayami++];\\n         }else{\\n             return -1;\\n         }\\n\t}\\n\tprivate static boolean hayami_saori(int hayami) { \\n\t\treturn 33 <= hayami && hayami <= 126;\\n\t}\\n\tpublic boolean hayamisaori() { \\n\t\twhile(HayamiSaori() && !hayami_saori(hayami[Hayami])) Hayami++; return HayamiSaori();\\n\t}\\n\tpublic String nextHayami() {\\n\t\tif (!hayamisaori()) throw new NoSuchElementException();\\n\t\tStringBuilder hayamin = new StringBuilder();\\n\t\tint saori = SaoriHayami();\\n\t\twhile(hayami_saori(saori)) {\\n\t\t\thayamin.appendCodePoint(saori);\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t\treturn hayamin.toString();\\n\t}\\n\tpublic long saorihayami() {//nextLong\\n\t\tif (!hayamisaori()) throw new NoSuchElementException();\\n\t\tlong hayami = 0;\\n\t\tboolean misao = false;\\n\t\tint saori = SaoriHayami();\\n\t\tif (saori == '-') {\\n\t\t\tmisao = true;\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t\tif (saori < '0' || '9' < saori) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile(true){\\n\t\t\tif ('0' <= saori && saori <= '9') {\\n\t\t\t\thayami *= 10;\\n\t\t\t\thayami += saori - '0';\\n\t\t\t}else if(saori == -1 || !hayami_saori(saori)){\\n\t\t\t\treturn misao ? -hayami : hayami;\\n\t\t\t}else{\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tsaori = SaoriHayami();\\n\t\t}\\n\t}\\n\tpublic int saori_hayami() {//nextInt\\n\t\tlong hayami = saorihayami();\\n\t\tif (hayami < Integer.MIN_VALUE || hayami > Integer.MAX_VALUE) throw new NumberFormatException();\\n\t\treturn (int) hayami;\\n\t}\\n\tpublic double Hayamin() { //nextDouble\\n\t\treturn Double.parseDouble(nextHayami());\\n\t}\\n\tpublic void close() {\\n\t\ttry {\\n\t\t\tin.close();\\n\t\t} catch (IOException e) {\\n\t\t}\\n    }\\n    \\n}", "target": "195", "substitutes": {"MOD": [" TP", " BASE", " MAX", " rev", " reg", " mult", " Z", " B", "NUM", " base", " mix", " tmp", " MAG", " serial", " msec", " LOG", " stamp", " P", " A", " CRC", " Y", " mod", " ro", " M", " BIG", " F", " FIRST", "UID"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.FileWriter;\\nimport java.io.PrintWriter;\\nimport java.nio.charset.StandardCharsets;\\nimport java.io.BufferedWriter;\\nimport java.io.FileReader;\\nimport java.io.File;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    public static StringBuilder output = new StringBuilder();\\n\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        String a = in.next().trim();\\n        String b = in.next().trim();\\n        String c = in.next().trim();\\n        Solver solver = new Solver();\\n        solver.solve(a, b, c);\\n        System.out.println(output);\\n    }\\n\\n}\\n\\nclass Solver {\\n    public void solve(String a, String b, String c) {\\n        String ans = \"\";\\n        char turn = 'a';\\n        int an = a.length();\\n        int bn = b.length();\\n        int cn = c.length();\\n        while (true) {\\n            if (turn == 'a') {\\n                if (an == 0) {\\n                    ans = \"A\";\\n                    break;\\n                }\\n                turn = a.charAt(a.length() - an);\\n                an--;\\n            }\\n\\n            if (turn == 'b') {\\n                if (bn == 0) {\\n                    ans = \"B\";\\n                    break;\\n                }\\n                turn = b.charAt(b.length() - bn);\\n                bn--;\\n            }\\n\\n            if (turn == 'c') {\\n                if (cn == 0) {\\n                    ans = \"C\";\\n                    break;\\n                }\\n\\n                turn = c.charAt(c.length() - cn);\\n                cn--;\\n            }\\n        }\\n        Main.output.append(ans);\\n    }\\n}", "target": "11", "substitutes": {"output": ["response", "println", "ou", "result", "current", "queue", "put", "o", "log", "Output", "config", "module", "console", "exit", "summary", "batch", "OU", "print", "this", "file", "get", "report", "run", "write", "client", "hidden", "list", "analysis", "buffer", "string", "Out", "cmd", "message", "content", "render", "text", "data", "you", "help", "status", "table", "input", "display", " Output", "out", "format", "ln", "net", "line", "next"], "in": ["r", "name", "mm", "gin", "bin", "inf", "from", "con", "l", " din", "isin", "inc", "n", "sin", "ini", "err", "source", "raw", "inn", "rin", "file", "IN", "arg", "run", "user", "lines", "or", "ind", "str", "on", "In", "init", "io", "nin", "reader", "it", "scan", "din", "is", "i", "thin", "stream", "inner", "pi", "en", "ins", "input", "std", "out", "ma", "t", "cin", "info", "iter", "ln", "add", "net", "all", "line", "mi"], "a": ["ae", "va", "r", "ca", "active", "name", "att", "ar", "aq", "l", "part", "address", "oa", "o", "admin", "aa", "da", "app", "attribute", "sa", "ace", "al", "act", "auto", "A", "at", "f", "ia", "es", "u", "la", "ga", "ao", "pkg", "ity", "ab", "i", "ea", "apa", "area", "aria", "ba", "aaa", "aka", "fa", "e", "alpha", "as", "ma", "s", "t", "ac", "eas", "ant", "era", "au", "ate", "aux", "ata", "x", "am"], "b": ["br", "r", "BB", "emb", "wb", "sb", "ob", "l", "mb", "base", "bar", "bc", "v", "gb", "bf", "db", "n", "by", "bl", "bs", "batch", "lb", "bp", "amb", "back", "eb", "f", "u", "fb", "z", "bi", "ib", "bound", "nb", "ab", "i", "g", "ba", "pb", "bg", "obj", "bis", "t", "p", "bb", "cb", "be", "y", "rb", "erb", "B"], "c": ["lc", "ca", "cc", "cur", "con", "cos", "chain", "co", "cf", "cr", "bc", "ce", "v", "cp", "dc", "city", "ec", "csv", "cu", "cache", "fc", "u", "tc", "cat", "ctrl", "cv", "sc", "cd", "C", "cs", "g", "nc", "cm", "abc", "ci", "com", "conf", "ct", "e", "gc", "t", "etc", "p", "ac", "cin", "cb", "ctx", "s", "css", "rc", "mc", "conv", "ch"], "solver": ["ssol", "Sol", "ssolver", " sol", "sol", "resol", "resolver", "Solution", "ssolution", " solution", "Solve", " solve", "resolve", "ssolve", "solve", "solution", "Solver", "resolution"], "ans": [" means", " Ans", "uns", "ents", "ons", "works", "eps", "grades", "ras", "anc", "vals", "pan", "aus", "san", "rs", "anks", "names", "eds", "ns", "ads", "ks", "strings", "asks", "els", "artifacts", "ends", "ians", "forms", "os", "can", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "ows", "AN", "angs", "vs", "ams", "aos", "mas", "prints", " spans", " scans", "cs", "orts", "utters", "An", "tun", "ins", "aps", "vers", "arms", "books", "olds", "annot", "as", "aints", "s", "ln", "lets", "rans", "offs", "ars", "ann"], "turn": ["round", "vel", "snap", "loc", "shift", "tell", "san", "connect", "ol", "tip", "make", "can", "dial", "will", "go", "cand", "trace", "vert", "pal", "ot", "think", "wh", "town", "th", "Turn", "mit", "what", "cur", "chain", "part", "draw", "nav", "sh", "soc", "cast", "change", "transform", "call", "lat", "run", "form", "then", "pull", "find", "rest", "hal", "cycle", "bring", " turns", "ver", "move", "focus", "act", "urn", "fac", "which", "fun", "trans", "craft", "nel", "ann", "gate", "ash", "tt", "turned", "sect", "rain", "until", "loop", "div", "vol", "mix", "tun", "ek", "roll"], "an": ["una", "uan", "enn", "zan", "anc", "wan", "nn", "con", "ar", "pan", "han", "san", "un", "aren", "ano", "n", "ran", "unc", "ane", "nan", "gan", "awan", "can", "ai", "mean", "ean", "van", "arn", "at", "on", "stan", "AN", "fan", "avan", "na", "ian", "An", "en", "bean", "atan", "ican", "ana", "anon", "ain", "span", "lan", "ani", "non", "ann"], "bn": ["hn", "br", "mn", "una", "pn", "nn", "bin", "bat", "sb", "ob", "gn", "ber", "bel", "bf", "db", "dn", "bre", "bl", "bs", "batch", "mun", "kn", "wn", "inn", "byn", "ibl", "ben", "sn", "bj", "bd", "BN", "bern", "bi", "ern", "bm", "nb", "ba", "fn", "bg", "nc", "np", "na", "en", "bon", "tn", "bo", "iban", "bean", "bb", "cb", "ln"], "cn": ["hn", "nu", "mn", "pn", "cc", "nn", "con", "gn", "ns", "bc", "n", "conn", "cp", "unc", "dn", "dc", "nan", "ne", "csv", "can", "ni", "cu", "sn", "arn", "xc", "ocon", "cat", "cv", "ern", "cs", "cum", "nc", "fn", "nic", "rn", "cm", "ct", "gc", "cin", "acon", "CN", "ln", "jc", "ctx", "css", "conv", "lan"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    boolean[] C = new boolean[N];\\n    int A = sc.nextInt();\\n    for (int i = 0; i < N - 1; i++)\\n      C[A - 1] = A + 1 == (A = sc.nextInt());\\n    int result = 0;\\n    for (int i = 0; i < N; i++)\\n      result += sc.nextInt();\\n    for (int i = 0; i < N - 1; i++)\\n      if (C[i])\\n        result += sc.nextInt();\\n      else\\n        sc.nextInt();\\n    System.out.println(result);\\n  }\\n}", "target": "223", "substitutes": {"sc": ["usc", "lc", "cc", "wx", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "inc", "dc", "ck", "ec", "ctl", "capt", "sel", "cle", "src", "irc", "sch", "go", "ys", "se", "sync", "fc", "ssl", "tc", "ctrl", "scan", "sq", "cs", "g", "ss", "nc", "pb", "sci", "c", "osc", "jp", "Sc", "gc", "ng", "scl", "asc", "isc", "scope", "SC", "mc", "pc", "rc", "th", "ch", "desc", "st"], "N": ["Z", "I", "TN", "F", "FN", "ND", "SN", "NP", "NB", "n", "Size", "NV", "O", "S", "Ni", "NG", "P", "OUT", "T", "NO", "NL", "R", "NS", "Q", "NR", "V", "M", "NH", "None", "AN", "NC", "H", "NN", "NA", "Y", "L", "J", "K", "X", "Length", "NI", "NT", "B", "Ns"], "C": ["D", "I", "CS", "F", "CM", "E", "LC", "CA", "WC", "AC", "NB", "CT", "O", "G", "DC", "P", "Can", "T", "R", "Q", "BC", "V", "M", "CV", "CI", "CB", "H", "U", "CD", "CC", "CR", "c", "Y", "L", "K", "JC", "Boo", "SC", "EC", "CNN", "B", "CP"], "A": ["D", "I", "AA", "Array", "MA", "Alpha", "CA", "AE", "AC", "HA", "At", "As", "G", "SA", "Va", "S", "P", "IA", "a", "GA", "V", "LA", "M", "TA", "API", "AV", "ACC", "ACA", "AP", "AM", "U", "AB", "An", "AS", "NA", "L", "AI", "RA", "K", "AR", "EA", "alpha", "AX", "BA", "AF", "PA", "B", "AT"], "i": ["q", "I", "ix", "ri", "phi", "hi", "gi", "iu", "zi", "ei", "iy", "base", "ip", "chain", "ji", "progress", "l", "li", "o", "id", "m", "ij", "me", "ini", "err", "ion", "this", "ai", "ni", "ki", "ice", "go", "iti", "im", "ind", "qi", "ik", "init", "\u0438", "ies", "io", "j", "bi", "it", "ity", "umi", "ui", "ie", "uri", "is", "pi", "g", "k", "ti", "ic", "ci", "c", "sim", "cli", "PI", "multi", "er", "iter", "info", "gu", "y", "ii", "xi", "si", "to", "di", "x", "mi"], "result": ["valid", "num", "response", "r", "description", "true", "direction", "d", "df", "feature", "number", "error", "Result", "total", "value", "summary", "folder", "default", "su", "relation", "report", "ret", "the", "successfully", "list", "currency", "search", "comb", "match", "test", "results", "comment", "complete", "data", "RESULTS", "success", "length", "done", "output", "ULT", "answer", "duration", "integer", "def", "product", "date", "command", "region", "successful", "reason", "goal", "res", "function", "term"]}}
{"code": "import java.util.Scanner;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int s = sc.nextInt();\\n        List<Integer> a = new ArrayList<>();\\n        a.add(s);\\n        int len = 1000000;\\n        for (int i = 1; i <= len; i++) {\\n            int f;\\n            if (a.get(i - 1) % 2 == 0) {\\n                f = a.get(i - 1) / 2;\\n            } else {\\n                f = 3 * a.get(i - 1) + 1;\\n            }\\n            a.add(f);\\n        }\\n        int ans = 0;\\n        for (int i = 0; i <= len; i++) {\\n            for (int j = i + 1; j <= len; j++) {\\n                if (a.get(i) == a.get(j)) {\\n                    // System.out.printf(\"i = %d,j = %d %n\", i, j);\\n                    // System.out.printf(\"a = %d,a = %d %n\", a.get(i), a.get(j));\\n                    ans = j + 1;\\n                    System.out.println(ans);\\n                    return;\\n                }\\n            }\\n        }\\n    }\\n}\\n", "target": "166", "substitutes": {"sc": ["uc", "r", "lc", "esc", "sb", "sec", "cl", "sys", "Scan", "ser", "sv", "sp", "cr", "bc", "inc", "ec", "src", "sch", "sw", "se", "sm", "scan", "sq", " Sc", "cs", "ner", "ss", "nc", "g", "ok", "pb", "c", "syn", "txt", "Sc", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "sub"], "s": [" samples", " ls", "gs", "l", "rs", "sys", "eds", "ns", "id", "n", "m", "sa", "S", "os", "ils", "its", "ids", "ys", "ats", "b", "fs", "es", "ls", "ies", "ims", "is", "ts", " ts", "cs", "ss", "g", "c", "js", "ds", "e", "as", "ains", "t", "p", "xs", "ps", "si"], "a": ["ae", "va", "ca", "ava", "el", "oa", "o", "qa", "h", "m", "aa", "app", "da", "aw", "sa", "sta", "wa", "this", "act", "A", "b", "at", "ack", "ia", "an", "la", "ga", "ao", "history", "xa", "aos", "ab", "ea", "apa", "area", "pa", "na", "aaa", "ba", "aka", "c", "fa", "alpha", "e", "as", "ma", "p", "ac", "eas", "changes", "ana", "au", "aux", "to", "ata", "am"], "len": ["dl", "lis", "elt", "coll", " l", "ll", "el", "base", "l", "kl", "cl", "del", "vec", "n", "m", "db", "sd", "fin", "nl", "seq", "lib", "val", "le", "ret", "lim", "str", "lon", "list", "sl", "pos", "ls", "mem", "ml", "z", "Len", "length", "en", "fl", "L", "t", "ln", "lf", "ld", "size", "nt", "lan", "line", "st"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "iii", "ims", "is", "eu", "ic", "ami", "y", "oi", "di", "x", "ri", "l", "chain", "ip", "ji", "o", "asi", "ij", "II", "in", "series", "iti", "ori", "bi", "it", " I", "ci", "sim", "cli", "iq", "ii", "pai", "phi", "hi", "ion", "this", "print", "ni", "ind", "ia", "u", "ir", "status", "pi", "my", "xi", "si", "mi", "I", "gi", "ini", "user", "im", "qi", "index", "us", "init", "ity", "ui", "ie", "uri", "ti", "multi", "info", "to"], "f": ["F", "d", "fu", "sf", "df", "inf", "fi", "l", "fd", "rf", "ff", "h", "o", "cf", "ref", "fen", "v", "m", "fo", "bf", "tf", "fe", "af", "fp", "b", "fc", "fac", "fs", "u", "fb", "full", "fort", "fl", "c", "fa", "e", "fr", "t", "p", "fw", "fm", "fee", "x"], "ans": ["ents", "uns", "pan", "un", "alls", "ran", "ends", "os", "ai", "ales", "arts", "af", "ens", "ags", "ia", "es", "ls", "an", "ies", "mem", "Len", "is", "sets", "syn", "ds", "ers", "rans", "span", "lan"], "j": ["br", "q", "jit", "pt", "d", "key", "ev", "ji", "jj", "h", "o", "adj", "v", "ij", "m", "n", "err", "jump", "ne", "bs", "ja", "bj", "at", "b", "oj", "us", "on", "job", "z", "bi", "ie", "g", "uj", "k", "json", "js", "obj", "aj", "jp", "J", "out", "fr", "other", "ng", "t", "p", "kj", "y", "jc", "jack", "dj", "je", "jl"]}}
{"code": "import java.util.*;\\n\\nclass Main {\\n    public static void main (String[] args){\\n        Scanner stdIn = new Scanner(System.in);\\n        int N = stdIn.nextInt();\\n\\n        String S = stdIn.next();\\n        String T = stdIn.next();\\n\\n        String B = \"\";\\n        String S_I;\\n        String T_I;\\n        for(int i=0; i<N; i++){\\n            S_I = String.valueOf(S.charAt(i));\\n            B=B.concat(S_I);\\n            T_I = String.valueOf(T.charAt(i));\\n            B=B.concat(T_I);\\n        }\\n        System.out.print(B);\\n        //List<String> A = new ArrayList<>();\\n\\n        \\n\\n\\n    }\\n}", "target": "200", "substitutes": {"stdIn": ["stdIng", "STDIn", "rdin", "stOut", "standardIN", " stdIng", "rdOut", "stdOut", "stIn", "stIng", "standardIn", "STDIN", "STDOut", " stdIN", "standardOut", "rdIN", "descin", " stdin", "stdIN", "rdIn", "ndOut", "descOut", "standardInt", "stdInt", "stin", "stIN", " stdInt", "STDInt", "descIng", "ndin", "ndIN", " stdOut", "stdin", "descIn", "ndIn"], "N": ["I", "TN", "ND", "NM", "NI", "SN", "NP", "NE", "NB", "n", "EN", "No", "Ni", "NO", "NL", "NS", "Na", "NR", "V", "M", "NH", "AN", "GN", "NC", "C", "NA", "L", "Net", "Ne", "NN", "NT", "Ns"], "S": ["I", "CS", "SI", "TS", "SM", "MS", "JS", "SQL", "SA", "G", "SE", "P", "SU", "R", "NS", "A", "SF", "V", "SOURCE", "SR", "US", "SL", "IS", "BS", "RS", "H", "C", "Source", "U", "L", "SS", "SER", "s", "DS", "VS", "SC", "SB", "ST", "LS", "ESS"], "T": ["I", "TT", "TG", "LT", "ET", "TB", "E", "TS", "VT", "TL", "WT", "CT", "TR", "G", "P", "R", "V", "M", "W", "TA", "GT", "PT", "TF", "IT", "H", "C", "TH", "TY", "Y", "L", "J", "t", "ST", "NT", "AT"], "B": ["PB", "I", "WB", "BB", "F", "TB", "BI", "BL", "RB", "BT", "BM", "Builder", "BW", "BG", "DB", "BU", "VB", "NB", "GB", "G", "P", "OUT", "BER", "IB", "R", "BR", "b", "BC", "BE", "V", "M", "CB", "BY", "BS", "H", "BO", "Block", "AB", "L", "Bar", "J", "EB", "BA", "OB", "SB", "Bern", "FB"], "S_I": ["SI_IS", "SI_L", "SI_i", " SONPI", "SONLI", "T_IO", "S_LI", "S_PI", "S_L", "S_IS", "S_IO", "S_i", "SONDI", " SONDI", " SONI", "SI_I", "SONPI", "S_DI", " SONLI", " S_LI", " S_PI", " S_DI", "T_i", "SONI"], "T_I": ["T_DI", "T_L", "TREIN", "TREDI", "T_LI", " T_L", " TREDI", "TRESi", "TO_CI", "T____I", "T_IE", " T_IN", " TREI", "T____IM", "T____L", " T_Si", "TREI", "TO_I", " T_DI", "T____V", "T_IM", " T_V", "TO_IE", "TO_LI", "T_IN", "T_Si", " TRESi", " T_IM", "T_CI", "T_V", " TREIN"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "ji", "point", "li", "id", "n", "m", "me", "ini", "batch", "remote", "series", "ai", "go", "mu", "any", "ind", "major", "qi", "a", "us", "init", "u", "io", "j", "bi", "it", "slice", "ui", "is", "ie", "uri", "pi", "ti", "ic", "ci", "sim", "my", "cli", "multi", "t", "iter", "gu", "exp", "info", "ami", "y", "xi", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc =new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\t\\n\t\tif (A >= 13) {\\n\t\t\tSystem.out.println(B);\\n\t\t}else if(A >= 6 && A <= 12){\\n\t\t\tSystem.out.println(B/2);\\n\t\t}else{\\n\t\t\tSystem.out.println(0);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "249", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "cr", "bc", "sv", "sp", "inc", " scr", "ck", "capt", "cle", "sel", "sch", "sw", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "out", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "ch", "desc", "sub"], "A": ["AA", "I", "AU", "AY", "CA", "ARC", "ANG", "AE", "AC", "HA", "GO", "As", "SA", "P", "IA", "R", "a", "GA", "LA", "M", "API", "AN", "ACC", "AL", "AV", "H", "C", "AP", "AM", "AGE", "AB", "An", "AS", "NA", "L", "RA", "AST", "AR", "EA", "AT", "Area", "BA", "AD", "AF", "ACT", "PA", "ESS"], "B": ["D", "I", "Z", "WB", "BB", "F", "LB", "TB", "BI", "E", "USB", "BW", "DB", "N", "VB", "NB", "Reb", "GB", "G", "S", "P", "T", "MB", "IB", "R", "b", "BC", "V", "BE", "M", "C", "Number", "AB", "Y", "L", "J", "EB", "BA", "SB", "Bs"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws IOException {\\n\t\t\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString info = br.readLine();\\n\t\tString[] fight = info.split(\" \");\\n\t\tint strikes = (int) Math.ceil((Double.parseDouble(fight[0])/Double.parseDouble(fight[1])));\\n\t\tSystem.out.println(strikes);\\n\t}\\n}", "target": "147", "substitutes": {"br": ["bro", "nr", "bsp", "vr", "cr", "bc", "ber", "kr", "dr", "bh", "tr", "gb", "bridge", "db", "sp", "bl", "bs", "bp", "Br", "mr", "brush", "Fr", "buf", "str", "BR", "bd", "lr", "hr", "bm", "pr", "ab", "wr", "ba", "bt", "rel", "browser", "yr", "fr", "be", "rb", "ch", "gr", "next"], "info": ["game", "work", "details", "inf", "intelligence", "admin", "innie", "race", "summary", "fo", "train", "stat", "show", "file", "report", "start", "f", "init", "type", "fire", "Info", "history", "about", "news", "data", "text", "thin", "status", "help", "json", "information", "conf", "def", "INFO", "fw", "stats", "title"], "fight": [" fights", "combat", "game", "kill", "rick", "hate", "rison", " battle", "fortune", "flight", "Fight", "shit", "feat", " Fight", "Battle", "fights", "fuck", " brawl", "attack", "threat", "enemy", "mate", "kick", "rage", "picture", "defense", "fighters", "fighting", "league", "fare", "violence", "ball", "won", "night", "play", "winner", "battle", "raid", "fighter", "football", "shot", "crime"], "strikes": ["steiffs", " starts", "stiffs", "steakes", " stiffs", "sterikes", "sharts", "steocks", "styicks", "strrikes", " sticks", "styrikes", "styuffs", "sticks", "styarts", "starts", "shrikes", "striffs", "strocks", "stakes", " stuffs", "stocks", " stocks", "strakes", "shicks", " stakes", "stuffs", "shuffs"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n \\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    final int k = sc.nextInt(), a = sc.nextInt(), b = sc.nextInt();\\n    if(a % k == 0 || b % k == 0){\\n      System.out.println(\"OK\");\\n    }else{\\n      if(b/k - a/k == 0){\\n        System.out.println(\"NG\");\\n      }else{\\n        System.out.println(\"OK\");\\n      }\\n    }\\n  }\\n}", "target": "28", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "esc", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "inc", "tk", "ck", "nl", "ko", "ctl", "cle", "sch", "fc", "exec", "tc", "ctrl", "scan", "sq", "cs", "g", "nc", "c", "osc", "Sc", "out", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "k": ["q", "num", "r", "ke", "key", "work", "d", "ikk", "l", "kl", "h", "o", "ta", "ks", "kh", "kr", "m", "v", "dk", "km", "n", "tk", "ck", "ko", "unk", "ak", "kok", "ki", "ik", "kk", "u", "z", "j", "mk", "i", "g", "ok", "kernel", "cm", "c", "ek", "sk", "ku", "max", "K", "w", "t", "x", "p", "kind", "kj", "ka", "kw", "kid"], "a": ["ae", "r", "ca", "av", "ax", "ar", "oa", "h", "n", "aa", "ad", "app", "sta", "sa", "al", "ak", "ai", "art", "A", "f", "ia", "u", "an", "la", "ga", "ao", "j", "ab", "i", "pa", "apa", "aff", "ba", "ach", "ast", "c", "aj", "ap", "alpha", "e", "as", "ma", "t", "p", "ac", "au", "x", "am"], "b": ["br", "r", "d", "sb", "ob", "l", "h", "bc", "n", "v", "m", "db", "bf", "bs", "back", "f", "eb", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bot", "c", "bis", "e", "t", "s", "p", "bb", "y", "be", "rb", "B"]}}
{"code": "import java.io.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args){\\n\t\ttry{\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\tString[] line = br.readLine().split(\" \");\\n\t\t\tint r = Integer.parseInt(line[0]);\\n\t\t\tint c = Integer.parseInt(line[1]);\\n\t\t\tint[][] r1 = new int[r][c];\\n\t\t\tint sum2;\\n\\n\t\t\tfor(int i = 0;i < r;i++){\\n\t\t\t\tString[] str = br.readLine().split(\" \");\\n\t\t\t\tfor(int j = 0;j < c;j++){\\n\t\t\t\t\tr1[i][j] = 0;\\n\t\t\t\t\tint a = Integer.parseInt(str[j]);\\n\t\t\t\t\tr1[i][j] += a;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tfor(int i = 0;i < r;i++){\\n\t\t\t\tint sum = 0;\\n\t\t\t\tfor(int j = 0;j < c;j++){\\n\t\t\t\t\tSystem.out.print(r1[i][j]+\" \");\\n\t\t\t\t\tsum += r1[i][j];\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(sum);\\n\t\t\t}\\n\t\t\t\\n\t\t\tsum2 = 0;\\n\t\t\tfor(int j = 0;j < c;j++){\\n\t\t\t\tint sum = 0;\\n\t\t\t\tfor(int i = 0;i < r;i++){\\n\t\t\t\t\tsum += r1[i][j];\\n\t\t\t\t}\\n\t\t\t\tsum2 += sum;\\n\t\t\t\tSystem.out.print(sum+\" \");\\n\t\t\t\tif(j == c-1){\\n\t\t\t\t\tSystem.out.print(sum2);\\n\t\t\t\t}\t\t\\n\t\t\t}\\n\t\tSystem.out.print(\"\\n\");\\n\t\t} catch (Exception e){\\n\t\t}\\n\t}\\n}", "target": "23", "substitutes": {"br": ["ctr", "driver", "bro", "shr", "pre", "vr", "cr", "ber", "bc", "kr", "dr", "tr", "bh", "bf", "bridge", "db", "bl", "bs", "err", "bp", "Br", "mr", "buf", "BR", "b", "lr", "bd", "hr", "bi", "pr", "div", "ptr", "wr", "bg", "bt", "rel", "browser", "yr", "fr", "er", "be", "rb", "ch", "gr"], "line": ["block", "Line", "row", "l", "chain", "inline", "dd", "len", "log", "train", "word", "ne", "nl", "detail", "lo", "le", "lines", "lin", "se", "shell", "list", "range", "frame", "string", "comment", "no", "cmd", "LINE", "lock", "store", "eline", "link", "mt", "liner", "iter", "char", "date", "ln", "page", "ide", "query", "ine"], "r": ["q", "rr", "d", "rg", "rar", "ar", "l", "nr", "rs", "rf", "ur", "rt", "h", "o", "cr", "rid", "m", "dr", "rd", "n", "v", "ro", "attr", "mr", "R", "ru", "rm", "type", "u", "ir", "range", "radius", "hr", "pr", "rec", "g", "rel", "w", "fr", "t", "p", "sr", "re", "rc", "rb", "res"], "c": ["lc", "ca", "col", "cc", "d", "cal", "cur", "con", "current", "l", "sec", "co", "cl", "h", "cf", "cr", "n", "m", "v", "cp", "ce", "dc", "cor", "ch", "ec", "cu", "cache", "b", "count", "f", "tc", "z", "cat", "cv", "cd", "sc", "C", "cs", "nc", "cm", "ci", "com", "ct", "gc", "t", "p", "ac", "cb", "mc", "rc", "x"], "r1": ["rOne", "R3", "Rone", "R10", "r11", "str001", "str100", " r3", "r2", "r100", "br1", "rc3", "rc10", "Ranta", "j10", "ranta", "j2", "r6", "R7", "rc1", "rc6", "str11", "R6", " rone", "r7", " r6", "rtone", "rt2", " r10", "r3", " ranta", "br001", "rcOne", "rc2", "j1", "rt11", "str1", "br11", "ROne", "r001", " r2", " rOne", "br100", " r7", "Rn", "rn", "rcn", "R2", "rt001", "r10", "R1", "rt1", " rn", "rt100", "rt7", "rone", "janta"], "sum2": ["um4", "sum1", " sum1", "diff2", "Sum2", " sum12", "sumTwo", "um3", "um1", "Sum4", " sum4", "umTwo", "sum12", "Sum1", "sum4", "um2", "Sum12", "um12", "diffTwo", " sumTwo", " sum3", "sum3", "Sum3"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "ar", "hi", "ei", "iy", "fi", "ip", "ji", "li", "id", "ij", "m", "me", "ini", "ion", "this", "ai", "ki", "ret", "im", "ind", "at", "ori", "qi", "f", "ia", "ik", "init", "fire", "ir", "ims", "io", "bi", "it", "la", "ity", "ui", "ie", "is", "status", "pi", "g", "ti", "ic", "ci", "rel", "sim", "multi", "info", "ami", "y", "xi", "ii", "si", "to", "di", "x", "mi"], "str": ["set", "name", "coll", "STR", "key", "att", "chain", "sec", "sol", "del", "ns", "cr", "sp", "n", "tr", "comm", "spec", "stri", "sw", "list", "sl", "arr", "stack", "sts", "string", "hex", "Str", "cont", "text", "vol", "wr", "txt", "out", "fr", "s", "char", "gr", "st"], "j": ["q", "ix", "ax", "li", "sp", "art", "note", "f", "job", "pr", "ot", "kj", "y", "em", "je", "jl", "dj", "next", "jac", "jit", "og", "el", "ji", "o", "adj", "ij", "ge", "ja", "right", "z", "bi", "it", "uj", "g", "k", "js", "bo", "J", "fr", "ng", "s", "pt", "jj", "jo", "dr", "tr", "jas", "ion", "bl", "xy", "ind", "json", "jp", "other", "jc", "add", "si", "key", "v", "m", "let", "jump", "ju", "user", "bj", "b", "index", "oj", "Ja", "off", "aj", "obj", "er", "ijk", "to", "ev"], "a": ["ata", "ca", "ava", "o", "ta", "n", "v", "aa", "sta", "sa", "sha", "A", "b", "f", "ia", "an", "la", "z", "xa", "ao", "div", "ea", "area", "na", "ba", "aj", "alpha", "ma", "as", "t", "p", "ac", "ana", "ka", "au", "add", "aux", "si", "va", "am"], "sum": ["set", "Sum", "num", "sat", "loss", "result", "save", "cal", "tu", "SI", "cos", "temp", "weight", "med", "total", "h", "zero", " SUM", "sp", "n", "summary", "v", "sa", "su", "process", "mean", "cu", "mu", "cache", "scale", "count", "index", "us", "fac", "match", "sort", "mem", "share", "must", "stack", "um", "comment", "null", " sums", "div", "success", "cum", "vol", "mod", "score", "hum", "sim", "ass", "cmp", "max", "pool", "alpha", "diff", "sam", "multi", "average", "out", "add", "size", "si", "volume", "util", "hash"], "e": ["d", "ee", "E", "error", "o", "h", "de", "v", "m", "n", "me", "err", "se", "f", "es", "ie", "ed", "w", "t", "er", "p", "re", "exc", "x"]}}
{"code": "import java.math.BigDecimal;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t\\n\t\tlong A = scan.nextLong();\\n\t\tdouble B = scan.nextDouble();\\n\t\t\\n\t\tBigDecimal a = new BigDecimal(String.valueOf(A));\\n\t\tBigDecimal b = new BigDecimal(String.valueOf(B));\\n\t\tBigDecimal multi =a.multiply(b);\\n\t\tBigDecimal multi1 = multi.setScale(0, BigDecimal.ROUND_DOWN);\\n\t\t\\n\t\tSystem.out.println(multi1);\\n\\n\t}\\n\\n}\\n", "target": "15", "substitutes": {"scan": ["set", "seek", "r", "save", "acc", "sql", "skip", "nn", "reach", "gate", "parse", "san", "walk", " Scan", "ser", "sys", "Scan", "system", "connect", "sv", "n", "sin", "util", "read", "in", "by", "can", "report", "scale", "auto", "se", "pass", "sm", "sync", "search", "send", "scroll", "an", "sc", "find", "ner", "link", "out", "black", "check", "info", "sur", " scanner", "trans", "proc", "query", "ch", "ann", "see"], "A": ["AA", "AU", " AI", "Alpha", "AY", "CA", "AE", "AC", "As", "SA", "IA", "GA", "LA", "TA", "ITY", "AN", "AV", "AL", "ACC", "PUT", "AP", "AGE", "AB", "An", "AS", "L", "AST", "AR", "AT", " LA", "AF", "ACT", "ESS"], "B": ["PB", "D", "WB", "BB", "LB", "TB", "BI", "BL", "RB", "USB", "BG", "DB", "LAB", "VB", "NB", "GB", "BER", "MB", "IB", "BR", "BC", "V", "BE", "CB", "BY", "BS", "BO", "AB", "L", "J", "EB", "Bill", "BA", "OB", "SB", "Bern", "Blue"], "a": ["ae", "r", "ca", "ar", "aq", "l", "oa", "m", "da", "aa", "app", "sta", "sa", "al", "ai", "auto", "at", "ia", "u", "an", "la", "ga", "ao", "ab", "area", "apa", "ba", "aaa", "c", "aj", "alpha", "ap", "ma", "ac", "era", "au", "am"], "b": ["br", "r", "sb", "mb", "ob", "l", "bar", "bc", "v", "gb", "bf", "db", "m", "bs", "bp", "lib", "back", "eb", "f", "fb", "j", "bi", "ib", "nb", "ab", "ba", "c", "bis", "body", "blue", "p", "bb", "cb", "binary", "be", "rb"], "multi": ["phi", "temp", "total", "li", "perm", "m", "fine", "maybe", "su", "batch", "sum", "multiple", "mean", "cu", "mu", "Multi", "auto", "sm", "multipl", "single", "omo", "uno", "i", "partial", "each", "pi", "gru", "cm", "done", "one", "sim", "managed", "cli", "mult", "late", "cci", "si", "di", "tu"], "multi1": [" multi2", "single0", "MultiOne", "Multi_", "multOne", "multi_", "single2", "multi2", " multi_", "multi0", "single1", "Multi0", " multiOne", "Multi2", " multi0", "mult2", "mult1", "mult_", "multiOne", "Multi1"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tStringBuilder sb = new StringBuilder();\\n\\n\t\tif(a >= b) {\\n\t\t\tfor(int i = 0; i < a; i++) sb.append(b);\\n\t\t} else {\\n\t\t\tfor(int i = 0; i < b; i++) sb.append(a);\\n\t\t}\\n\\n\t\tSystem.out.println(sb);\\n\t}\\n}", "target": "24", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "ser", "sh", "cr", "bc", "sv", "sp", "inc", "ck", "ctl", "ko", "sel", "sch", "tc", "ctrl", "scan", "sq", "cs", "ss", "nc", "pb", "ok", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch"], "a": ["ae", "ca", "acc", "ax", "ar", "oa", "o", "ta", "admin", "n", "aa", "app", "sta", "sa", "ai", "act", "A", "at", "ia", "ack", "an", "la", "ga", "ao", "ed", "ab", "ea", "apa", "pa", "area", "ba", "aaa", "ach", "aka", "na", "c", "aj", "alpha", "ma", "t", "as", "ac", "era", "au", "all", "va", "am"], "b": ["br", "r", "ca", "wb", "beta", "ob", "l", "mb", "base", "rb", "bc", "v", "n", "gb", "db", "by", "bs", "back", "eb", "fb", "j", "bi", "ib", "bound", "nb", "ab", "g", "ba", "pb", "bt", "c", "bis", "e", "t", "blue", "p", "bb", "cb", "be", "bar", "to", "B"], "sb": ["sbm", "xb", "sf", "wb", "abb", "sg", "ob", "sth", "orb", "bsp", "zb", "lp", "gb", "bh", "bf", "stab", "sa", "bs", "buff", "bn", "lb", "bp", "ub", "gob", "bj", "bd", "eb", "ssl", "fb", "ib", "nb", "sq", "bg", "pb", "bt", "rob", "kb", "gc", "scl", "bb", "cb", "SB", "bps", "rb", "erb", "umb", "bash"], "i": ["q", "ix", "phi", "hi", "zi", "iu", "gi", "ei", "ip", "li", "id", "asi", "ij", "m", "ini", "err", "batch", "ski", "ai", "ni", "ki", "client", "mu", "im", "inx", "ind", "qi", "ori", "us", "init", "\u0438", "ims", "j", "it", "umi", "ui", "is", "ie", "uri", "pi", "inner", "ti", "ic", "ci", "MI", "sim", "cli", "PI", "multi", "iter", "gu", "y", "oi", "xi", "ii", "si", "di", "mi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Main main = new Main();\\n        main.solve(args);\\n    }\\n\\n    public void solve(String[] args) {\\n        MyScanner scanner = new MyScanner();\\n\\n        String a = scanner.next();\\n        int ans = 0;\\n        if(a.equals(\"SUN\")) {\\n        \tans = 7;\\n        }else if(a.equals(\"MON\")) {\\n        \tans = 6;\\n        }else if(a.equals(\"TUE\")) {\\n        \tans = 5;\\n        }else if(a.equals(\"WED\")) {\\n        \tans = 4;\\n        }else if(a.equals(\"THU\")) {\\n        \tans = 3;\\n        }else if(a.equals(\"FRI\")) {\\n        \tans = 2;\\n        }else if(a.equals(\"SAT\")) {\\n        \tans = 1;\\n        }\\n        System.out.println(ans);\\n\\n    }\\n\\n    private static long gcd(long m, long n) {\\n        if(m < n) return gcd(n, m);\\n        if(n == 0) return m;\\n        return gcd(n, m % n);\\n    }\\n\\n    private static long lcm(long m, long n) {\\n        return m * n / gcd(m, n);\\n    }\\n\\n    private class MyScanner {\\n        String[] s;\\n        int i;\\n        BufferedReader br;\\n        String reg = \" \";\\n        MyScanner () {\\n            s = new String[0];\\n            i = 0;\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n        public String next() {\\n            try {\\n                if (i < s.length) return s[i++];\\n                String line = br.readLine();\\n                while (line.equals(\"\")) {line = br.readLine();}\\n                s = line.split(reg, 0);\\n                i = 0;return s[i++];\\n            } catch (Exception e) {e.printStackTrace();}\\n            return null;\\n        }\\n        public int nextInt() {\\n            try {return Integer.parseInt(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n        public double nextDouble() {\\n            try {return Double.parseDouble(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n        public long nextLong()  {\\n            try {return Long.parseLong(next());} catch (Exception e) {e.printStackTrace();}\\n            return -1;\\n        }\\n    }\\n}", "target": "136", "substitutes": {"scanner": ["canener", "Scanator", " scanNER", "canNER", " scanener", "ScanNER", "Scanter", "scanener", "Scanener", "Scaner", "canator", "scanNER", "scanter", "scanator", "canter", " scanter", " scanator", "Scanner", "canner", "scaner", " scaner", "caner"], "a": ["ae", "va", "ca", "att", "ar", "el", "oa", "o", "h", "ta", "aa", "app", "sta", "sa", "ai", "are", "act", "A", "b", "at", "ia", "an", "la", "ga", "ao", "pa", "ea", "apa", "area", "g", "na", "aaa", "aka", "aj", "e", "ma", "as", "t", "er", "ac", "eas", "ha", "era", "au", "aux", "ata", "am"], "ans": ["grades", "ons", "ends", "ms", "lines", "ANS", "ats", "ens", "ams", "ts", "ones", "ins", "aps", "powers", "terms", "actions", " fans", "lan", "offs", "ars", "ros", " scans", " pan", "faces", "vals", "ns", "ads", "ks", "asks", "ces", "orders", "anes", "cs", "ups", "utters", "posts", "fts", "nets", "aus", "eds", "beans", "amps", " opens", "ants", " lines", "ls", "an", "mas", " beans", "ds", "arms", "books", "rans", "outs", "ann", " means", " Ans", "ents", " flags", "helps", " es", "ates", "arts", "caps", "ows", "abilities", "uploads", "vs", " cs", "aos", " spans", "olds", "vers", "lets"], "m": ["num", "mn", "r", "mm", "d", "dm", "mo", "pm", "l", "o", "h", "perm", "v", "msg", "mg", "md", "ms", "mr", "mu", "b", "f", "sm", "M", "u", "mem", "ml", "an", "j", "um", "tm", "gm", "bm", "g", "mx", "cm", "mod", "c", "mt", "nm", "e", "ma", "t", "p", "man", "y", "em", "mc", "mi", "am"], "n": ["nu", "num", "r", "q", "mn", "name", "d", "ll", "pm", "nn", "l", "un", "len", "N", "o", "h", "ns", "v", "dn", "ne", "nan", "nl", "cn", "ms", "sn", "b", "f", "on", "M", "u", "an", "z", "j", "no", "nb", "g", "na", "nc", "cm", "np", "en", "c", "nm", "w", "out", "t", "p", "ln", "y", "net", "size", "nt", "x"], "s": ["gs", "details", "sb", "rs", "h", "eds", "ns", "ads", "sv", "strings", "ences", "v", "ws", "bs", "S", "forms", "sels", "ms", "lines", "its", "ats", "str", "b", "ches", "fs", "es", "ls", "ags", "ims", "sts", "vs", "prints", "ves", "is", "ts", "sq", "rates", "cs", "ss", "ments", "c", "js", "ins", "ds", "gets", "e", "w", "services", "p", "ses", "qs", "ps", "xs", "tes", "hs"], "i": ["I", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "ei", "chain", "ip", "li", "o", "id", "v", "ini", "in", "ai", "ki", "im", "qi", "ori", "index", "us", "u", "ims", "j", "bi", "it", "is", "ui", "uri", "status", "pi", "ti", "ci", "sim", "cli", "e", "multi", "t", "p", "info", "y", "oi", "ii", "xi", "si", "di", "x", "mi"], "br": ["r", "ctr", "bro", "shr", "vr", "cr", "bc", "ber", "kr", "dr", "bh", "tr", "bridge", "bed", "sp", "bl", "bs", "bn", "bp", "Br", "mr", "ger", "buf", "str", "BR", "b", "bd", "lr", "j", "hr", "bi", "bm", "pr", "ba", "bra", "wr", "bt", "rel", "browser", "yr", "fr", "er", "rb", "ch", "gr"], "reg": ["round", "col", "loc", "rg", "row", "sg", "RE", "cond", "eg", "REG", "pg", "rog", "tag", "gro", "enc", "form", "str", "rm", "mem", "grid", "repl", "register", "pr", "Reg", "greg", "disc", "g", "rec", "bg", "abc", "mod", "tab", "alg", "region", "re", "res", "gr", "rem", " Reg"], "line": ["block", "Line", "lc", "name", "row", "l", "inline", "entry", "chain", "part", "li", "word", "source", "ne", "nl", "detail", "lo", "cell", "le", "lines", "lay", "str", "lin", "se", "code", "phrase", "list", "range", "sequence", "frame", "string", "comment", "LINE", "data", "piece", "text", "record", "online", "eline", "link", "sample", "e", "liner", "style", "label", "ln", "lf", "page", "rule", "ine"]}}
{"code": "import java.util.*;\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    String[] w = {\"Sunny\",\"Cloudy\",\"Rainy\"};\\n    for(int i = 0;i<2;i++){\\n      if(s.compareTo(w[i])==0){\\n        System.out.println(w[i+1]);\\n      }\\n    }\\n    if(s.compareTo(w[2])==0){\\n      System.out.println(w[0]);\\n    }\\n  }\\n}\\n", "target": "60", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "dec", "rs", "sec", "cl", "sys", "system", "cr", "bc", "sv", "sp", "ec", "cle", "sel", "sch", "sw", "sm", "sync", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "conv", "ch", "desc", "sub"], "s": ["set", "gs", "r", "sql", "sf", "sb", "current", "rs", "sys", "h", "now", "so", "sv", "sp", "n", "v", "m", "simple", "sa", "ws", "S", "self", "less", "sw", "ats", "str", "south", "b", "sl", "ls", "j", "space", "string", "sts", "is", "ts", "sq", "ss", "c", "js", "sam", "t", "y", "ps", "st"], "w": ["wall", "r", "wx", "wo", "d", "wl", "wb", "wt", "l", "temp", "wp", "h", "now", "ew", "v", "n", "rew", "word", "aw", "wi", "ws", "iw", "wa", "wal", "write", "sw", "b", "rw", "W", "mem", "hw", "z", "weights", "words", "wr", "ww", "nw", "exp", "wh", "we", "p", "fw", "y", "all", "kw", "x"], "i": ["q", "I", "ix", "ex", "ri", "key", "phi", "gi", "hi", "iu", "zi", "ei", "chain", "ip", "li", "n", "m", "v", "me", "ini", "ij", "in", "batch", "this", "ai", "ms", "im", "ind", "qi", "a", "ori", "index", "us", "init", "u", "\u0438", "io", "j", "bi", "it", "ui", "is", "ie", "uri", "status", "pi", "ti", "ic", "ci", "sim", "my", "cli", "e", "multi", "gu", "iter", "y", "xi", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tstatic int A;\\n\tstatic int B;\\n\tstatic int C;\\n\tpublic static void main(String[]args) {\\n\t\tScanner sc=new Scanner(System.in);\\n\t\tA=sc.nextInt();\\n\t\tB=sc.nextInt();\\n\t\tC=A*B;\\n\t\tSystem.out.println(C);\\n\t\t}\\n\\n}", "target": "35", "substitutes": {"A": ["D", "AA", "AU", "Alpha", "CA", "N", "AE", "AC", "HA", "Ax", "Av", "As", "SA", "G", "S", "P", "Ar", "IA", "R", "a", "GA", "LA", "V", "M", "AH", "API", "AN", "AV", "AL", "ACC", "H", "AP", "One", "AM", "AB", "An", "AS", "L", "RA", "AR", "AST", "X", "Al", "BA", "mA", "AF", "ACT", "AT"], "B": ["D", "I", "WB", "BB", "LB", "TB", "BI", "BL", "RB", "USB", "DB", "N", "VB", "NB", "GB", "G", "Bi", "FB", "MB", "IB", "BF", "BR", "b", "BC", "BE", "V", "BY", "BS", "BO", "AB", "Y", "L", "Bar", "J", "EB", "Bill", "bb", "BA", "Bern", "SB", "OB", "Blue", "Bs"], "C": ["D", "I", "CS", "F", "CM", "CON", "E", "CE", "CA", "N", "CHAR", "AC", "CW", "FC", "CT", "KC", "CCC", "G", "S", "P", "DC", "Cow", "T", "R", "Count", "BC", "V", "Co", "M", "CV", "ISC", "CL", "CO", "CD", "CC", "c", "COM", "GC", "L", "K", "JC", "Cs", "SC", "YC", "CNN", "CP"], "sc": ["usc", "lc", "acc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "inc", "nl", "capt", "ko", "ctl", "cle", "sch", "se", "sync", "tc", "ctrl", "scan", "sq", " Sc", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "p", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner scan = new Scanner(System.in);\\n        int cards[]  = {1, 0, -1};\\n        int counts[] = new int[3], n, maxValue;\\n\\n        for(int i = 0; i < counts.length; i++) {\\n            counts[i] = scan.nextInt();\\n        }\\n        n = scan.nextInt();\\n\\n        maxValue = 0;\\n        for(int i = 0; i < counts.length; i++) {\\n            if(n >= counts[i]) {\\n                maxValue += cards[i] * counts[i];\\n                n -= counts[i];\\n            } else {\\n                maxValue += cards[i] * n;\\n                n = 0;\\n            }\\n        }\\n\\n        System.out.println(maxValue);\\n        scan.close();\\n        return;\\n    }\\n}", "target": "56", "substitutes": {"scan": ["set", "seek", "r", "spin", "sql", "skip", "row", "nn", "reach", "gate", "parse", "san", "watch", "sys", "Scan", "system", "connect", "sv", "sin", "plan", "read", "in", "stat", "can", "get", "report", "run", "spec", "go", "scale", "auto", "se", "pass", "sync", "search", "clean", "match", "scroll", "an", "send", "sc", "find", "ner", "g", "store", "link", "out", "gc", "check", "serial", "p", "sur", "re", "be", "trans", "proc", "pack", "query", "ann"], "cards": ["checks", "gs", "card", "rollers", "points", "games", "offs", "Card", "holders", "anks", "packs", "guards", "pins", "orders", "ands", "series", "allows", "ids", "params", "cuts", "ards", "caps", "lists", "codes", " carriers", "sticks", "ims", "ways", "hands", "vs", "days", "fields", "weights", "dds", "letters", "tags", "cases", "balls", "olds", "ds", "times", "services", " Cards", "boxes", "cas", "lights", "lets", "pointers", "cf", "outs"], "counts": ["countrics", "ountls", "ountes", "ounted", "Countrics", "countats", "counted", "Countls", " countes", "ountjs", "ountats", "ountries", "countrs", "Countrs", " countats", "ounts", "Countries", " countrs", " countries", "Countps", " countls", "countjs", " counted", " counters", "ounters", "Countles", "countries", "Counted", " countords", "countps", "Countords", "Countjs", "counters", "countls", "ountords", "countes", "Counters", "ountles", " countrics", "Countes", "countles", "ountrics", " countjs", "countords", " countles", "Counts", "ountrs", "Countats", "ountps", " countps"], "n": ["nu", "num", "r", "d", "ll", "nn", "l", "un", "N", "o", "gn", "ns", "h", "m", "v", "dn", "ne", "nan", "nl", "cn", "ni", "ren", "sn", "f", "on", "z", "j", "no", "nb", "g", "na", "nc", "fn", "np", "c", "max", "w", "out", "t", "s", "p", "nor", "ln", "y", "nt", "x", "non"], "maxValue": ["maximumVal", "MAXvalue", " maxTime", "maxTime", "MAXValue", " maxVal", "maximumvalue", "lastValue", "Maxvalue", "MaxValues", "maxSize", "lastVal", "maximumKey", "lastvalue", "MaxValue", "MAXValues", " maxValues", "MaxTime", " maxvalue", "maxKey", "MAXKey", "curValues", " maxKey", "MaxVal", "curvalue", "maxValues", "MAXVal", "MAXSize", " maxSize", "maxVal", "MAXTime", "lastValues", "maximumValue", "MaxSize", "curValue", "maxvalue"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "iii", "ims", "is", "ic", "e", "ami", "y", "oi", "di", "ri", "fi", "chain", "ip", "ji", "point", "id", "ij", "series", "client", "iti", "ori", "io", "slice", "bi", "it", "inner", "ci", "sim", "cli", "ii", "phi", "hi", "this", "print", "ind", "u", "fire", "\u0438", "pi", "json", "gu", "xi", "si", "mi", "I", "gi", "iy", "m", "ini", "err", "im", "qi", "index", "init", "j", "ity", "ui", "ie", "uri", "ti", "multi", "er", "info", "iter"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args)\\n\t{\\n\t\t Scanner sc=new Scanner(System.in);\\n\t\t int i=sc.nextInt();\\n\t\t int j=sc.nextInt();\\n\t\t int min=9999;\\n\t\t int arr[]=new int[j];\\n\t\t List<Integer> li1=new ArrayList<Integer>();\\n\t\t int flag=0;\\n\t\t if(j==0)\\n\t\t {\\n\t\t\t System.out.println(i);\\n\t\t\t return;\\n\t\t }\\n\t\t for(int k=0;k<j;k++)\\n\t\t {\\n\t\t\t arr[k]=sc.nextInt();\\n\t\t\t li1.add(arr[k]);\\n\t\t }\\n\t\t if(!li1.contains(i))\\n\t\t {\\n\t\t\t System.out.println(i);\\n\t\t\t return;\\n\t\t }\\n\t\t\\n\t\t for(int k=0;k<=j;k++)\\n\t\t {\\n\t\t\tif((li1.contains(i+k))&&(li1.contains(i-k)))\\n\t\t\t { \\n\t\t\t\t continue;\\n\t\t\t }\\n           \\n\t\t\t if(!li1.contains(i-k))\\n\t\t\t {\\n\t\t\t\t flag=1;\\n\t\t\t\t\\n\t\t\t\t System.out.println(i-k);\\n                 break;\\n\t\t\t\t \\n\t\t\t }\\n\t\t\t if(!li1.contains(i+k))\\n\t\t\t {\\n\t\t\t\t flag=1;\\n\t\t\t\t System.out.println(i+k);\\n                 break;\\n\t\t\t\t \\n\t\t\t }\\n\t\t\t \\n\t\t\t \\n\t\t\t \\n\t\t\t \\n\t\t\t \\n\t\t }\\n\t\t \\n\t\t \\n\t}\\n\\n}\\n", "target": "228", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "ser", "bc", "sv", "cr", "sp", "inc", "dc", "nl", "ec", "ctl", "cle", "sch", "sw", "sync", "fc", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "i": ["I", "ix", "iat", "ri", "phi", "hi", "gi", "iu", "ei", "ip", "li", "id", "v", "ij", "m", "ini", "in", "ai", "ki", "ori", "qi", "b", "index", "f", "u", "ir", "io", "bi", "it", "is", "ie", "ui", "uri", "status", "pi", "g", "ti", "ic", "ci", "cli", "multi", "info", "p", "iter", "ami", "y", "oi", "ii", "xi", "iri", "si", "di", "x", "mi"], "j": ["jac", "q", "num", "r", "l", "ji", "len", "jj", "o", "n", "ij", "v", "m", "ju", "ja", "b", "count", "f", "pos", "z", "it", "uj", "g", "length", "json", "pi", "js", "aj", "max", "obj", "jp", "J", "out", "t", "p", "kj", "y", "jc", "dj", "size", "si", "jl"], "min": ["offset", "name", "star", "key", "d", "mask", "dec", "version", "len", "Min", "m", "err", "level", "val", "act", "start", "list", "pos", "const", "no", "only", "lock", "step", "aj", "max", "conf", "diff", "map"], "arr": ["br", "dat", "r", "ix", "elt", "av", "coll", "acc", "Array", "ax", "att", "array", "ar", "frac", "shr", "var", "pl", "ij", "dr", "aa", "app", "alph", "bl", "attr", " narr", "Ar", "val", "le", "art", "ang", "str", "img", "list", "par", "pr", "ab", "data", "vol", "aaa", "arb", "rel", "js", "obj", "air", "fr", "ld", "au", "ev", "gr", "aug", "expr"], "li1": ["iione", "li0", "lis1", "lone", "lis0", "elt6", "Li1", " li2", "cli100", "liables", "LI100", "li100", "li10", "li3", "ii512", "i2", "lis8", "li01", "li120", "cli1", "lie2", "Li2", "li8", "list0", "Lione", "li6", "list5", "ii1", "lie5", "LI0", "l2", "l1", "li5", "elt10", " li0", "lis2", "list120", " li512", "LI3", "lie1", "LIables", "i1", "list1", "li2", "Li01", "list2", "LIone", " li01", "lis5", "LI5", "LI512", "cliables", "lione", " li120", " li5", " lione", "LI2", "cli0", "lie0", " li3", "elt1", "LI8", "lie8", "i6", " li100", "i10", "li512", " liables", "lie120", "LI1", "l01", "LI10", "LI6", "ii3", "elt2"], "flag": ["offset", "stage", "group", "limit", "mask", "enable", "sun", "error", "fd", "cond", "flags", "ff", "log", "bit", "id", "sp", "sign", "member", "cloud", "level", "nl", "tag", "arg", "ret", "coord", "lag", "button", "sync", "func", "condition", "field", "const", "cmd", "age", "bug", "status", "lock", "Flag", "event", "store", "debug", "continue", "char", "ld", "bird", "line", "FLAG"], "k": ["q", "ke", "ask", "key", "work", "wk", "d", "ikk", "l", "kl", "kan", "h", "o", "id", "kh", "kr", "m", "v", "dk", "km", "tk", "ck", "ko", "unk", "ak", "kn", "ki", "ik", "uk", "kk", "ack", "f", "an", "kick", "kat", "z", "it", "mk", "ark", "kin", "g", "ick", "ok", "c", "ek", "ku", "isk", "sk", "K", "alpha", "jp", "w", "UK", "kind", "kt", "kj", "tek", "ijk", "ka", "alk", "ac", "y", "th", "kw", "kid", "kg"]}}
{"code": "\\nimport java.math.BigDecimal;\\nimport java.util.*;\\nclass Main{\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        double N = sc.nextInt();\\n        System.out.println(BigDecimal.valueOf(N*N*N/27));\\n\\n    }\\n}", "target": "53", "substitutes": {"sc": ["usc", "sac", "uc", "lc", "acc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "cr", "sv", "sp", "bc", "soc", "sa", "capt", "cle", "sel", "spec", "sch", "sw", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "screen", "c", "syn", "osc", "Sc", "exp", "asc", "scl", "isc", "SC", "pc", "rc", "ch", "desc"], "N": ["D", "I", "Z", "TN", "F", "FN", "ND", "NM", "NUM", "NI", "SN", "NP", "NPR", "NE", "n", "NV", "Size", "G", "S", "NG", "P", "T", "R", "NS", "NR", "V", "M", "NH", "BN", "MN", "AN", "GN", "NC", "C", "Number", "NA", "Y", "L", "K", "J", "CN", "CNN", "NN", "NT", "B", "Ns"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t    Scanner sc = new Scanner(System.in);\\n        String str = sc.next();\\n        if(str.matches(\"A[a-z]+C[a-z]+\")) {\\n            System.out.println(\"AC\");\\n        } else {\\n            System.out.println(\"WA\");\\n        }\\n    }\\n}", "target": "209", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "ser", "sh", "cr", "sv", "sp", "bc", "ec", "cle", "sel", "sch", "sw", "sync", "tc", "scan", "sq", "cs", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "conv", "ch", "desc", "st", "sub"], "str": ["dat", "r", "result", "name", "STR", "key", "next", "cur", "sp", "n", "v", "dr", "tr", "comm", "seq", "print", "enc", "stri", "list", "req", "arr", "string", "url", "Str", "text", "data", "vol", "wr", "c", "obj", "input", "txt", "out", "fr", "exp", "t", "s", "p", "char", "iter", "res", "gr", "st", "expr"]}}
{"code": "import java.util.*;\\nimport static java.lang.System.*;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tB(sc);\\n\t}\\n\t\\n\tpublic static void A(Scanner sc) {\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tif((a*b)%2==1) out.println(\"Odd\");\\n\t\telse out.println(\"Even\");\\n\t}\\n\t\\n\tpublic static void B(Scanner sc) {\\n\t\tString s1 = sc.next();\\n\t\tString s2 = sc.next();\\n\t\tint x = Integer.parseInt(s1+s2);\\n\t\tfor(int i=0;Math.pow(i,2)<=x;i++) {\\n\t\t\tif(Math.pow(i, 2)==x) {\\n\t\t\t\tout.println(\"Yes\");\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tout.println(\"No\");\\n\t}\\n}", "target": "83", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "cer", "anc", "esc", "mp", "sb", "sec", "co", "cgi", "cl", "sys", "ser", "sh", "so", "sv", "sp", "bc", "cr", "ck", "ec", "ko", "ctl", "sel", "irc", "sch", "sw", "se", "conv", "sync", "fc", "ssl", "tc", "ctrl", "scan", "sq", "cs", "sci", "ss", "nc", "screen", "pb", "c", "syn", "osc", "Sc", "gc", "out", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "proc", "scrib", "ch", "desc"], "a": ["ae", "ca", "d", "ax", "ar", "l", "oa", "ta", "n", "aa", "sa", "ai", "A", "at", "ia", "an", "ao", "ab", "pa", "ea", "ba", "aka", "aj", "ma", "t", "s", "p", "ac", "era", "au", "va", "am"], "b": ["br", "d", "ob", "mb", "l", "bc", "n", "gb", "db", "bl", "bs", "back", "eb", "fb", "j", "bi", "ib", "nb", "ab", "ba", "c", "bis", "body", "bo", "s", "p", "bb", "cb", "y", "be", "rb", "B"], "s1": [" s3", "s3", "gsFirst", "s01", "sts9", "strFirst", "ss9", "sts01", " s01", " s9", "gs3", "str3", "s90", "str1", "sts1", "s9", "ss90", "ss01", " s90", "sts90", "ss1", "gs01", "gs1", "sFirst", "str01", " sFirst"], "s2": ["sb", "Sother", "js02", "jsb", " sother", "js2", " sb", "S1", "stsother", "sother", "js1", " s02", "S2", "sts1", "s02", "sts02", "sts2", "Sb", "S02"], "x": ["num", "ix", "ex", "wx", "ax", "ox", "number", "h", "n", "v", "m", "tt", "xf", "xy", "width", "tx", "inx", "xe", "xx", "index", "f", "px", "xc", "z", "xa", "dx", "mx", "k", "xd", "ct", "w", "e", "X", "t", "rx", "p", "y", "xi", "xs", "xp", "to"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "cgi", "li", "id", "m", "ini", "batch", "ai", "ki", "im", "ind", "qi", "init", "u", "\u0438", "io", "j", "bi", "it", "ui", "ie", "is", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "info", "iter", "oi", "ii", "xi", "si", "span", "di", "mi"]}}
{"code": "\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.ListIterator;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\t// \u914d\u5217\u3092\u6e96\u5099\\n\t\t// int[] array = new int[N];\\n\t\t// \u6700\u521d\u304b\u3089\u30ea\u30b9\u30c8\\n\t\tList<Integer> list = new ArrayList<>();\\n\t\t// for\u6587\u3067N\u56de\u7e70\u308a\u8fd4\u3057\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\tlist.add(sc.nextInt());\\n\t\t}\\n\t\tCollections.sort(list);\\n\t\t// Collections.reverse(list);\\n\t\t// \u672c\u5f53\u306b\u53cd\u5bfe\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\uff1f\\n\t\t// \u5927\u304d\u3044\u65b9\u304b\u3089\u5c0f\u3055\u3044\u65b9\u306b\uff1f \u5c0f\u3055\u3044\u65b9\u304b\u3089\u5927\u304d\u3044\u65b9\u306b\uff1f\u21d2\u5f8c\u3067\u3002\\n\\n\t\t// for(int i = 0; i < list.size();i++) {\\n\t\t// \u914d\u5217\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u3067\u3042\u3063\u3066\u3001Collections\u306b\u5408\u308f\u305b\u305f\u30eb\u30fc\u30d7\u304c\u3042\u308b\\n\t\tint result = 0;\\n\t\tListIterator<Integer> i = list.listIterator();\\n\t\twhile (i.hasNext()) {\\n\t\t\t// if (flag) {\\n\t\t\tif (i.nextIndex() % 2 == 0) {\\n\t\t\t\t// true \u306a\u306e\u3067 Alice\\n\t\t\t\t// \u8a72\u5f53\u30ab\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\\n\t\t\t\t// AliceMaxCount += i.next();\\n\t\t\t\tresult += i.next();\\n\t\t\t} else {\\n\t\t\t\t// Bob\\n\t\t\t\t// BobMaxCount += i.next();\\n\t\t\t\tresult -= i.next();\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(Math.abs(result));\\n\t\tsc.close();\\n\t}\\n}", "target": "132", "substitutes": {"sc": ["usc", "uc", "lc", "acc", "esc", "row", "sb", "sec", "ser", "sys", "cl", "sh", "bc", "sv", "sp", "cr", "dc", "tk", "nl", "ec", "sel", "sch", "tc", "scan", "sq", "cs", "ss", "nc", "c", "sk", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "sub"], "N": ["Z", "I", "D", "F", "nn", "E", "ND", " n", "n", "S", "P", "T", "R", "NS", "A", "NR", "V", "M", "ID", "H", "C", "L", "K", "J", "X", "nt", "NN", "B"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\\n  public static void main(String[] args) { \\n      Scanner sc = new Scanner(System.in);\\n      long n = sc.nextLong();\\n      long k = sc.nextLong();\\n\\n      System.out.println(Math.min(n % k, k - n % k));\\n  }\\n}", "target": "22", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "esc", "sb", "sec", "cl", "sys", "ser", "sh", "sv", "cr", "sp", "bc", "inc", "dc", "sa", "ctl", "capt", "sel", "sch", "sw", "tch", "sl", "sync", "tc", "ctrl", "scan", "sq", "cont", "cs", "ss", "nc", "c", "sk", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "sub"], "n": ["nu", "mn", "num", "d", "ll", "nn", "l", "number", "N", "o", "gn", "ns", "h", "m", "v", "dn", "ne", "in", "nl", "cn", "nz", "sn", "on", "u", "j", "nb", "i", "g", "na", "nc", "np", "en", "c", "nm", "w", "out", "t", "p", "ln", "nt"], "k": ["q", "ke", "d", "kl", "h", "ks", "kh", "kr", "m", "dk", "km", "v", "tk", "ck", "ko", "ket", "kn", "ak", "kok", "ki", " K", "b", "ik", "kk", "uk", "ack", "u", "kick", "z", "j", "mk", "i", "g", "ok", "c", "sk", "ek", "ku", "K", "w", "t", "p", "kind", "kj", "ka", "kw", "kid"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static Scanner scanner = new Scanner(System.in);\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tArrayList<String> list = new ArrayList<String>();\\n\\n\t\twhile (true) {\\n\\n\t\t\tStringBuilder sb = new StringBuilder();\\n\t\t\tString input = input();\\n\\n\t\t\tif (input.equals(\"-\")) {\\n\\n\t\t\t\tbreak;\\n\\n\t\t\t} else {\\n\\n\t\t\t\tsb.append(input);\\n\\n\t\t\t}\\n\\n\t\t\tint n = Integer.parseInt(input());\\n\\n\t\t\tfor (int i = 0; i < n; i++) {\\n\\n\t\t\t\tint h = Integer.parseInt(input());\\n\\n\t\t\t\tsb.append(sb.substring(0, h));\\n\t\t\t\tsb.delete(0, h);\\n\\n\t\t\t}\\n\\n\t\t\tlist.add(sb.toString());\\n\\n\t\t}\\n\\n\t\tfor (int j = 0; j < list.size(); j++) {\\n\\n\t\t\tSystem.out.println(list.get(j));\\n\\n\t\t}\\n\\n\t\tclose();\\n\\n\t}\\n\\n\tpublic static String input() {\\n\\n\t\treturn scanner.nextLine();\\n\\n\t}\\n\\n\tpublic static void close() {\\n\\n\t\tif (scanner != null) {\\n\\n\t\t\tscanner.close();\\n\\n\t\t}\\n\t}\\n}", "target": "216", "substitutes": {"scanner": ["canener", "Scanator", " scanNER", "statning", "canNER", " scanener", "ScanNER", "caninner", "statner", "scanener", "Scaninner", "Scanener", "Scaner", "canator", "scaninner", "scanNER", "Scanning", "statNER", "scanator", " scanning", " scanator", "Scanner", " scaninner", "canner", "scanning", "scaner", " scaner", "statener", "caner"], "list": ["set", "dl", "result", "group", "array", "acl", "php", "queue", "l", "pre", "log", "now", "tree", "li", "tmp", "summary", "control", "db", "msg", "batch", "level", "detail", "show", "print", "LIST", "get", "csv", "dict", "write", "the", "ist", "lists", "select", "ls", "collection", "single", "sort", "sequence", "left", "no", "listed", "see", "order", "lv", "table", "record", "L", "old", "out", "def", "info", "add", "all", "st", "map"], "sb": ["sbm", "xb", "sf", "wb", "sg", "ob", "mb", "builder", "rb", "orb", "bsp", "sv", "sp", "zb", "lp", "gb", "bh", "bf", "db", "sa", "stab", "bs", "buff", "lb", "bp", "sn", "ub", "sw", "bj", "esm", "b", "eb", "sl", "fb", "ssl", "ib", "nb", "sq", "bg", "pb", "bt", "ssh", "rob", "kb", "sam", "gc", "bb", "cb", "SB", "si", "erb"], "input": ["q", "mask", "shift", " accept", "prefix", "enter", "context", "raw", "unknown", "str", "image", "exec", "history", "accept", "data", "query", "first", "next", "cur", "parse", "current", "source", "read", "in", " indent", "lat", "start", "form", "view", "pattern", "sq", " Input", "label", "initial", "config", "feed", " receive", "qa", "value", "inc", "focus", "print", "hello", " lookup", "act", "select", "string", "cmd", " inputs", " ignore", "output", "request", "sample", "p", "add", "line", "println", "active", "name", "empty", "key", "entry", "wait", "sum", "get", "index", "init", "buffer", "submit", "text", "join", "step", "check", "char", "command", "Input"], "n": ["nu", "num", "mn", "name", "d", "nn", "l", "number", "un", "N", "ns", "v", "m", "ne", "nan", "nl", "cn", "ni", "sn", "no", "nb", " N", "na", "nc", "np", "en", "c", "nw", "nm", "ot", "network", "ln", "net", "nt", "x", "names"], "i": ["q", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ip", "li", "o", "v", "m", "me", "ini", "err", "print", "ai", "im", "ind", "qi", "init", "u", "io", "bi", "it", "ui", "ie", "pi", "ti", "ic", "ci", "sim", "multi", "info", "p", "iter", "y", "xi", "ii", "si", "di", "x", "mi"], "h": ["he", "q", "rh", "phi", "hi", "hl", "l", "o", "sh", "kh", "m", "bh", "oh", "dr", "v", "eh", "hh", "ih", "zh", "hz", "hd", "b", "ht", "u", "z", "hex", "hr", "it", "H", "html", "k", "ph", "w", "x", "t", "p", "ha", "y", "hs", "di", "ch", "ah"], "j": ["br", "q", "jac", "jit", "pt", "key", "att", "from", "ev", "jl", "ji", "jj", "jo", "adj", "v", "ij", "m", "kh", "err", "jump", "jas", "msg", "state", "ja", "bj", "b", "oj", "job", "yy", "z", "Ja", "it", "pr", "g", "uj", "json", "k", "bot", "js", "obj", "aj", "jp", "ct", "J", "fr", "kj", "y", "jc", "je", "dj"]}}
{"code": "import java.util.*;\\nimport java.util.Map.Entry;\\n \\nclass Main {\\n\t static int mod =  (int) (Math.pow(10,9)+7);\\n//\t static int mod = 998244353;\\n\t public static void main(String[] args) {\\n\t        Scanner sc = new Scanner(System.in);\\n\t        String S = sc.next();\\n\t        char[] c = S.toCharArray();\\n\t        int N=c.length;\\n\t        String subS1=S.substring(0,(N-1)/2);\\n\t        String subS2=S.substring((N+1)/2);\\n\t        char[] c1 = subS1.toCharArray();\\n\t        char[] c2 = subS2.toCharArray();\\n\t        int n1=c1.length;\\n\t        int n2=c2.length;\\n\t        boolean flg=false;\\n\t        for(int i=0;i<(N-1)/2;i++) {\\n\t        \tif(c[i]!=c[N-i-1])flg=true;\\n\t        }\\n\t        for(int i=0;i<n1/2;i++) {\\n\t        \tif(c1[i]!=c1[n1-1-i])flg=true;\\n\t        }\\n\t        for(int i=0;i<n2/2;i++) {\\n\t        \tif(c2[i]!=c2[n2-1-i])flg=true;\\n\t        }\\n\t        if(flg) {\\n\t\t        System.out.println(\"No\");\t        \t\\n\t        } else {\\n\t        \tSystem.out.println(\"Yes\");\t\\n\t        }\\n\t }\\n\t \\n\\n}", "target": "123", "substitutes": {"mod": ["reg", "dec", "Mod", "row", "base", "prime", "ver", "log", "module", "m", " Mod", "rid", "floor", "MOD", "start", "fac", "const", "z", "comp", "fun", "step", "debug", "inv", "tab", "mult", "max", "add", "size"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tPrintWriter out = new PrintWriter(System.out);\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint cnt = 0;\\n\t\tint left = -1, right = Integer.MAX_VALUE / 10;\\n\t\tfor(int i = 0; i < m; i++) {\\n\t\t\tint L = sc.nextInt();\\n\t\t\tint R = sc.nextInt();\\n\t\t\tif (L > left) left = L;\\n\t\t\tif (R < right) right = R;\\n\t\t}\\n\t\tint ans = right - left + 1;\\n\t\tif (ans < 0) ans = 0;\\n\t\t\\n\t\tout.println(ans);\\n\\n\t\tout.close();\\n\t}\\n\\nstatic class FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n    private boolean hasNextByte() {\\n        if (ptr < buflen) {\\n            return true;\\n        }else{\\n            ptr = 0;\\n            try {\\n                buflen = in.read(buffer);\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            if (buflen <= 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}\\n    private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}\\n    public boolean hasNext() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++; return hasNextByte();}\\n    public String next() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        StringBuilder sb = new StringBuilder();\\n        int b = readByte();\\n        while(isPrintableChar(b)) {\\n            sb.appendCodePoint(b);\\n            b = readByte();\\n        }\\n        return sb.toString();\\n    }\\n    public long nextLong() {\\n        if (!hasNext()) throw new NoSuchElementException();\\n        long n = 0;\\n        boolean minus = false;\\n        int b = readByte();\\n        if (b == '-') {\\n            minus = true;\\n            b = readByte();\\n        }\\n        if (b < '0' || '9' < b) {\\n            throw new NumberFormatException();\\n        }\\n        while(true){\\n            if ('0' <= b && b <= '9') {\\n                n *= 10;\\n                n += b - '0';\\n            }else if(b == -1 || !isPrintableChar(b)){\\n                return minus ? -n : n;\\n            }else{\\n                throw new NumberFormatException();\\n            }\\n            b = readByte();\\n        }\\n    }\\n    public int nextInt() {\\n        long nl = nextLong();\\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\\n        return (int) nl;\\n    }\\n    public double nextDouble() { return Double.parseDouble(next());}\\n}\\n}", "target": "124", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "sec", "cgi", "cl", "sys", "pl", "sh", "bc", "sv", "sp", "cr", "ck", "ec", "ctl", "irc", "sch", "sync", "fc", "tc", "ctrl", "scan", "sq", "cs", "sci", "ss", "nc", "osc", "cmp", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "ch", "desc", "st"], "out": ["println", "r", "ou", "result", "outer", "flush", "con", "writer", "error", "sys", "o", "log", "console", "conn", "v", "err", "print", "OUT", "os", "file", "write", "client", "res", "at", "list", "io", "it", "aos", "Out", "null", "scan", "screen", "fn", "obj", "output", "input", "txt", "w", "t", "s", "p", "info", "net", "all", "nt", "ch", "outs", "window"], "n": ["nu", "mn", "num", "name", "d", "nn", "l", "nr", "len", "N", "o", "ns", "ne", "nan", "cn", "sn", "count", "on", "an", "mem", "j", "nb", "g", "nc", "en", "nm", "e", "t", "s", "p", "ln", "nt", "x"], "m": ["num", "mn", "r", "q", "mm", "dm", "d", "l", "len", "N", "mid", "v", "ms", "count", "sm", "f", "M", "j", "bm", "gm", "tm", "mx", "cm", "k", "mt", "nm", "t", "p", "man", "mc", "mi"], "cnt": ["count", "acnd", "cnd", "acnt", "connd", "Cnd", "acount", "conount", "conct", "connt", "cct", "Cct", "Count", "Cnt", "acct"], "left": ["lt", "r", "offset", "low", "loc", "before", "position", "l", "len", "leaf", "level", "top", "lo", "small", "le", "start", "south", "minimum", "min", "list", "pos", "lower", "it", "full", "only", "inner", "lock", "length", "ins", "max", "old", "local", "t", "s", "Left", "p", "ln", "last", "x", "first", "st"], "right": ["r", "round", "rh", "end", "before", "row", "half", "shift", "after", "red", "rt", "rew", "tr", "ran", "remote", "top", "cross", " RIGHT", "ro", "ren", "third", "mr", "random", "root", "back", "start", "correct", "recent", "range", "radius", "full", "rest", "wrong", "west", "head", "one", "rights", "max", "Right", "reverse", "upper", "re", "rc", "over", "res", "first", "rem"], "i": ["q", "I", "ix", "ex", "phi", "zi", "iu", "l", "ip", "li", "o", "id", "ini", "ai", "ms", "im", "ind", "a", "index", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "sim", "MI", "cli", "e", "PI", "multi", "t", "info", "p", "y", "ii", "xi", "si", "di", "x", "mi"], "L": ["Z", "I", "Lu", "LT", "F", "LB", "BL", "LC", "l", "N", "Li", "TL", "LE", "S", "LI", "P", "LL", "NL", "V", "Le", "LA", "M", "LOC", "SL", "IL", "C", "CL", "LP", "LM", "RL", "LG", "Left", "DL", "ML", "LV", "XL", "EL", "LU", "GL", "LR", "LS", "B"], "R": ["Z", "I", "r", "RB", "MR", "E", "RE", "N", "RT", "Res", "RI", "TR", "G", "S", "P", "RF", "RM", "T", "RC", "RO", "BR", "NR", "V", "M", "SR", "RH", "Rs", "RS", "C", "RR", "CR", "Y", "RA", "RL", "Right", "GR", "J", "AR", "DR", "RES", "JR", "Row", "B"], "ans": ["ents", "ros", "ons", "offs", "nets", "rs", "names", "anks", "outs", "ns", "ads", "ks", "ran", "nan", "parts", "os", "errors", "ms", "lines", "types", "arts", "ANS", "any", "ids", "ats", "ens", "ants", "amps", "ates", "caps", "es", "ls", "an", "ols", "anes", "ries", "ones", "sets", "ins", "rights", "aps", "cons", "s", "terms", "actions", "trans", "cas", "xs", "rans", "stats", "rows", "lan", "res", "ars", "ann"], "in": ["r", "ex", "ri", "gin", "mm", "ar", "from", "inf", "con", "l", "log", "inc", "ini", "err", "read", "inn", "rin", "IN", "get", "run", "or", "ind", "lin", "on", "In", "init", "io", "nin", "reader", "it", "din", "is", "data", "stream", "inner", "ic", "en", "ins", "input", "t", "cin", "info", "all", "to"], "buffer": ["block", "result", "paste", "limit", "row", "password", "Buffer", "queue", "temp", "address", "device", "read", "source", "batch", "database", "buff", "cache", "buf", "bone", "phrase", "button", "view", "index", "match", "scroll", "mem", "sequence", "bank", "reference", "history", "stack", "append", "available", "document", "message", "data", "template", "length", "screen", "table", "memory", "store", "output", "display", "iter", "p", "binary", "command", "page", "bar", "library", "window"], "ptr": ["br", "addr", "seek", "offset", "ix", "pt", "ctr", "post", "loc", "heads", "prime", "address", "tp", "point", "pl", "ref", "ta", "sp", "dr", "tip", "tr", "Ptr", "pend", "rep", "pe", "bp", "td", "coord", "inters", "ind", "buf", "inter", "fp", "index", "pos", "req", "pointer", "mem", "pers", "trace", "pr", "ts", "pi", "pad", "rel", "rob", "jp", "ped", "iter", "p", "dep", "ctx", "ps", "pc", "depth", "adr", "proc", "pointers", "pert", "peer", "next", "expr"], "buflen": ["burflEN", " bullen", "buglens", "buFLength", "cufren", "buhlens", "buflur", "buplist", "bufilen", "buFLen", "burblend", "bufrens", "buflist", "bufleng", "buFlig", "cufrache", "bufrache", "buflig", "burblEN", "buglur", "bufrength", " buflur", " buflim", "burflend", " buflens", " buflist", "bullur", "buplength", " buflength", "cuflength", " bulleng", "burflig", "bublim", "buplen", "bublend", "bublen", " buplength", "burblen", "buFlend", "bublist", " bullens", "buglen", "buFLim", "buflache", "buFlEN", " bufleng", "buclEN", "buFlen", " bullur", "buflEN", "bullens", "bugleng", "bublEN", "cuflen", "buplim", "bufileng", "cuflache", "buhlen", "cuflens", "buclend", "bulleng", "buFList", " buplen", "buclig", "burflen", "buplache", "bufilens", "bufren", "bullen", "bufilur", "buflend", "buflim", " buplim", " buplist", "buhlength", "buclen", "bublength", "burblig", "buplens", "buflength", "buflens", "cufrength", "cufrens", "buhlache", "bublig"], "c": ["uc", "lc", "ca", "col", "cc", "d", "dec", "cur", "l", "category", "h", "bc", "v", "ce", "cp", "unc", "dc", "cu", "enc", "a", "count", "fc", "code", "f", "fac", "u", "cd", "C", "cont", "cs", "g", "vc", "k", "cm", "abc", "cod", "ic", "ci", "ct", "e", "t", "x", "p", "ac", "cb", "pc", "rc", "cf"], "sb": ["xb", "sf", "sg", "ob", "mb", "sth", "abs", "bsp", "sv", "sp", "zb", "lp", "gb", "bh", "bf", "sa", "bs", "buff", "lb", "bp", "ub", "bj", "gob", "bd", "eb", "ssl", "ib", "nb", "sq", "pb", "bg", "bt", "ssh", "rob", "kb", "bb", "cb", "SB", "rb", "erb"], "b": ["br", "emb", "d", "wb", "mb", "l", "base", "ob", "bar", "deb", "bit", "bc", "v", "gb", "bf", "db", "bl", "bs", "bp", "a", "reb", "bd", "eb", "f", "fb", "j", "bi", "ib", "bound", "nb", "ab", "ba", "bg", "bt", "bis", "e", "t", "s", "bb", "cb", "binary", "y", "be", "rb", "B"], "minus": [" trunc", "star", "dec", " sign", " negate", "some", "zero", " minor", "sign", "nan", " neg", " zero", "lo", "negative", "leading", "any", "pos", " negatives", "neg", " dec", " plus", "mod", " small", " nan", " boo", "add", " negative", "plus"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author Mehvix\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        ATherefore solver = new ATherefore();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class ATherefore {\\n        public void solve(int testNumber, Scanner fin, PrintWriter fout) {\\n            int ones = fin.nextInt() % 10;\\n            if (ones == 3) fout.println(\"bon\");\\n            else if (ones == 0 || ones == 1 || ones == 6 || ones == 8) fout.println(\"pon\");\\n            else fout.println(\"hon\");\\n        }\\n\\n    }\\n}\\n\\n", "target": "178", "substitutes": {"inputStream": ["instream", "inStream", "contextStream", "helloPage", "outputSource", "inForm", "contextSteam", "inputSteam", "inSource", "outputPage", "inputPage", "contextForm", "inSteam", "helloStream", "inputstream", "outputForm", "outputstream", "inputForm", "helloSource", "contextstream", "helloSteam", "inputSource", "outputSteam", "inPage"], "outputStream": ["resultStream", "resultSteam", "outputFile", "OutputForm", "outputStreamer", " outputFile", "writestream", "OutputFile", "OutputStream", " outputSteam", "inputstream", "webWindow", "outputForm", " outputForm", "OutputSteam", "writeStream", "webStream", "outputstream", "inputStreamer", "webstream", "webStreamer", "writeWindow", "resultFile", "outputWindow", "inputWindow", "outputSteam", "resultForm", "writeStreamer"], "in": ["r", "name", "gin", "bin", "inf", "from", "current", "sol", " din", "isin", "rt", "o", "n", "conn", "sin", "ini", "source", "inn", "file", "IN", "rin", " IN", "run", "ind", "on", "In", "init", "io", "reader", "it", "null", "din", "is", "i", "thin", "inner", "ner", "ic", "en", "ins", "input", "t", "info", "cin", "iter", "dir", "ln", "s", "up", "all", "st"], "out": ["ou", "ex", "name", "end", " Out", "flush", "con", "writer", "co", "log", "o", "sys", "n", "err", "OU", "print", "OUT", "os", "sum", "can", "this", "write", "client", "csv", "report", "res", "str", "gt", "b", "list", "on", "io", "gr", "it", "aos", "Out", "null", " OUT", "screen", "table", "ins", "output", "obj", "pool", "w", "gc", "t", "info", "s", "net", "all", "to", "nt", "ch", "outs", "window"], "solver": ["ssolver", "solved", "unsolve", "Solution", "ssoln", "ssolution", "soln", "Solve", "lsolver", "insolve", "lsoln", "insolver", "insolved", "ssolve", "solve", "Solved", "unsolution", "solution", "Soln", "unsolver", "lsolution", "unsolved", "Solver", "insolution", "lsolve"], "testNumber": [" testNo", " casenum", "trialnumber", "testnum", "testnumber", " caseNo", " testnumber", "testNo", " casenumber", "trialNumber", " testnum", "trialNo", "trialnum", " caseNumber"], "fin": ["raf", "skip", "fu", "fre", "bin", "fd", "len", "mid", "focus", "fine", "ran", "ini", "finder", "adv", "inn", "os", "van", "lin", "wid", "fc", "fs", "f", "init", "kin", "fn", "fun", "rn", "FIN", "redo", "fl", "syn", "fa", "fr", "iter", "Fin", "ln", "den", "res", "finished"], "fout": [" foutput", "cfwriter", "fcgen", "fdio", "fbwriter", "wout", "fcout", "fdin", "cfuser", "cfout", "fuser", "fgen", "fprint", " fuser", "cfin", "dfin", "fbuser", " fprint", "win", "wprint", "fdout", "fbin", "dfout", "fduser", "fwriter", "dfuser", " fwriter", "fcprint", "fcin", "fdprint", " fio", "woutput", "fio", "fbout", "foutput", "wgen", " fgen", "dfio", "fdoutput"], "ones": ["locks", "onents", "ents", "makers", "ons", "faces", "onds", "onen", "vals", "icks", "icas", "mons", "hops", "zero", "players", "tons", "rones", "amples", "tops", "odes", "boards", "ensions", "oning", "stones", "months", "eros", "ONES", "ples", "oids", "cells", "enos", "tones", "sticks", "ials", " zones", "uploads", "hands", "levels", "idents", "lands", "ods", "oms", "oned", "oys", "rooms", "tags", "one", "devices", "books", "ions", "agles", "phones", "ombies", "terms", "mods", "things", "ients", "mers", "tes", "frames", "pres", "offs"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.Scanner;\\nimport java.util.Arrays;\\n\\nclass Main{\\n\tpublic static void main(String[] args)throws Exception{\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\tint n = scanner.nextInt();\\n\t\tint[] numbers = new int[n];\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t    numbers[i] = scanner.nextInt();\\n\t\t}\\n\t\tint count = 0;\\n\t\tint temp = 0;\\n\t\tint flag = 1;\\n\\n\t\twhile(flag == 1){\\n\t\t\tflag = 0;\\n\t\t\tfor(int i = n-1; i > 0; i--){\\n\t\t\t\tif(numbers[i] < numbers[i-1]){\\n\t\t\t\t\ttemp = numbers[i];\\n\t\t\t\t\tnumbers[i] = numbers[i-1];\\n\t\t\t\t\tnumbers[i-1] = temp;\\n\t\t\t\t\tflag = 1;\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tif(i == n-1){\\n\t\t\t\tSystem.out.print(numbers[i]);\\n\t\t\t\tSystem.out.print(\"\\n\");\\n\t\t\t}else{\\n\t\t\t\tSystem.out.print(numbers[i] + \" \");\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "170", "substitutes": {"scanner": ["canener", " scanener", " Scaner", " Scanner", " Scanener", "Scanter", "scanener", "Scanener", "Scaner", "scanter", " Scanter", "canter", " scanter", "Scanner", "canner", "scaner", " scaner", "caner"], "n": ["num", "q", "r", "nu", "name", "d", "ll", "nn", "l", "un", "len", "N", "o", "ns", "and", "m", "v", "dn", "ne", "nan", "nl", "cn", "sn", "on", "norm", "z", "j", "no", "nb", " N", "g", "na", "nc", "k", "np", "en", "c", "nm", "out", "ng", "t", "p", "network", "ln", "y", "net", "all", "nt", "x", "names"], "numbers": ["nones", "snounters", "aneters", "cums", "mumbered", "onometers", "snumbers", "numeters", "nists", "tackers", "nals", "anefficients", " nums", "noms", "nounters", "snones", "anals", "neumbers", "Nums", "cumbers", "anumps", "anounters", "eneters", "snlements", "anurers", "nlements", "enumps", "durers", "numumps", "defficients", "nologies", "neumps", "Numbers", "neters", "onators", "nurers", " numer", "anackers", "mumbers", "lologies", "enumbers", "counters", "cists", "neones", " nones", "snologies", " numbered", "lums", "numer", "numoms", "snums", "numps", "tumbers", "onals", "nads", "nefficients", "dumer", "Nists", "lads", " nackers", " nologies", "numlements", "neators", " noms", "onums", "anumbers", " nurers", "nators", "meters", "numums", "lumbers", "Nounters", "oneters", "snumbered", "nometers", " nometers", " nefficients", " neters", "numumbers", "tounters", "mums", "numbered", "nelements", " nators", "onumbers", "neeters", "snists", "neums", " nads", "snumps", " nounters", "enals", "nackers", "neometers", "teters", "dumbers", "anumer", "nums", "onumps", "snads", "neoms", "neumbered"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "f", "ims", "is", "ic", "e", "ami", "y", "oi", "di", "ri", "fi", "chain", "ip", "ji", "point", "o", "id", "asi", "ij", "in", "client", "ori", "a", "io", "z", "bi", "it", "inner", "g", "ci", "sim", "cli", "exp", "iq", "s", "mac", "ii", "phi", "hi", "php", "this", "ni", "ind", "list", "\u0438", "fire", "u", "status", "pi", "iso", "my", "iri", "xi", "si", "mi", "I", "sql", "gi", "iy", "m", "ini", "err", "im", "qi", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "port", "multi", "iter", "info"], "count": ["num", "q", "ount", "result", "found", "current", "number", "cond", "flags", "total", "amount", "call", "print", "sum", "report", "state", "Count", "ind", "cache", "list", "index", "code", "match", "force", "const", "clean", "z", "comment", "find", "cont", "status", "success", "length", "score", "c", "max", "ct", "counter", "check", "t", "info", "add", "size", "all", "nt"], "temp": ["dat", "num", "offset", "result", "pt", "deg", "tim", "acc", "perature", "mp", "current", "pre", "len", "total", "ta", "tmp", "cp", "v", "tr", "cap", "nom", "buff", "tem", "Temp", "sum", "cu", "fac", "buffer", "orig", "tc", "mem", "unit", "partial", "ptr", "template", "cum", "length", "timer", "mod", "emp", "adjusted", "txt", "duration", "t", "iter", "p", "porary", "fake", "copy", "term"], "flag": ["set", "stage", "true", "group", "limit", "key", "mask", "fd", "cond", "weight", "flags", "log", "bit", "id", "sign", "wait", "option", "tail", "level", "nl", "file", "tag", "state", "lag", "band", "bool", "button", "list", "f", "type", "condition", "field", "fire", "match", "loop", "cmd", "status", "bug", "lock", "window", "Flag", "event", "store", "step", "style", "continue", "check", "char", "command", "ld", "line", "FLAG"]}}
{"code": "import java.util.*;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        int ci;\\n        \\n        int[][] aij = new int[n][m];\\n        int[] bj = new int[m];\\n        \\n        for(int i = 0; i < n; i++){\\n            for(int j = 0; j < m; j++){\\n                aij[i][j] = sc.nextInt();\\n            }\\n        }\\n        for(int j = 0; j < m; j++){\\n               bj[j] = sc.nextInt();\\n        }\\n        \\n        for(int i = 0; i < n; i++){\\n            ci = 0;\\n            for(int j = 0; j < m; j++){\\n               ci += aij[i][j]*bj[j];\\n            }\\n            System.out.println(ci);\\n        }\\n    }\\n}\\n", "target": "185", "substitutes": {"sc": ["usc", "lc", "cc", "dec", "esc", "anc", "sb", "sec", "co", "cgi", "cl", "sys", "sh", "bc", "sv", "sp", "cr", "dc", "ctl", "cle", "irc", "sch", "sw", "sync", "fc", "exec", "tc", "scan", "sq", " Sc", "cont", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "psc", "ch", "desc"], "n": ["nu", "mn", "num", "r", "q", "name", "nn", "l", "un", "nr", "N", "o", "ns", "v", "dn", "ne", "nan", "nl", "ni", "sn", "on", "an", "z", "no", "nb", "pi", " N", "na", "nc", "fn", "np", "en", "c", "nm", "span", "ng", "t", "p", "network", "ny", "net", "nt", "x"], "m": ["q", "mn", "r", "mm", "dm", "d", "pm", "mo", "l", "h", "o", "perm", "v", "om", "me", "km", "md", "mun", "ms", "mean", "mu", "im", "rm", "b", "f", "sm", "M", "z", "um", "bm", "gm", "tm", "g", "pi", "k", "cm", "mod", "mode", "c", "mt", "span", "ma", "t", "s", "p", "man", "em", "mc", "all", "med", "mat", "x", "mi", "rem"], "ci": ["jac", "acs", "lc", "ca", "ico", "cos", "fi", "co", "ati", "cgi", "li", "lic", "circ", "ce", "reci", "ini", "cia", "dc", "cor", "ace", " ca", "ai", "ki", "cu", "oci", "fc", "ia", " c", "coe", "aci", "CI", "cd", "cont", "pi", "cum", "cm", "nic", "cod", "ti", "c", "sim", "cli", "ct", "uci", "cit", "multi", "cin", "cci", "cas", "ii", "si", "di", "mi", "see"], "aij": ["ayi", "airj", "airja", "aii", "aiji", "aisjs", "aisi", "ausi", "auja", "aisja", "ayj", "ausjs", "ausja", "airji", "aisj", "cajs", "ausj", "ayjs", "airjs", "aisji", "auji", "caj", "ausjp", "ausji", "aijs", "ayjp", "aisjp", "caja", "aujs", "aija", "caji", "auj", "aijp"], "bj": ["jac", "br", "mn", "jit", "sbm", "wb", "mp", "jl", "ji", "jj", "jo", "zb", "ij", "bh", "bf", "bl", "bs", "bn", "bp", "ja", "b", "oj", "eb", "obl", "bi", "phys", "bm", "uj", "json", "pb", "qt", "bt", "js", "obj", "bis", "tn", "jp", "obb", "bb", "kj", "jet", "bps", "dj"], "i": ["q", "I", "ix", "ex", "ri", "phi", "hi", "zi", "iu", "ar", "gi", "ei", "fi", "ip", "ji", "li", "id", "asi", "ij", "ini", "ion", "al", "this", "ki", "iti", "im", "ind", "ori", "qi", "at", "f", "us", "ia", "init", "ik", "ir", "ims", "la", "bi", "it", "io", "ity", "ui", "ie", "is", "uri", "pi", "ti", "ic", "sim", "multi", "iq", "info", "ami", "xi", "ii", "si", "di", "mi", "ish"], "j": ["br", "q", "r", "ix", "James", "ax", "sp", "ne", "art", "note", "job", "on", "pr", "ph", "ot", "kj", "y", "je", "res", "dj", "jl", "jac", "jit", "og", "el", "ji", "o", "ij", "ja", "z", "bi", "it", "uj", "g", "js", "J", "bo", "fr", "ng", "pt", "att", "jj", "jo", "dr", "jas", "ion", "ind", "json", "rel", "jp", "other", "jc", "kid", "key", "so", "v", "py", "let", "jump", "by", "ju", "oj", "Ja", "ie", "off", "bot", "aj", "obj", "er", "ev"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintStream;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.io.BufferedWriter;\\nimport java.util.InputMismatchException;\\nimport java.io.IOException;\\nimport java.io.Writer;\\nimport java.io.OutputStreamWriter;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        OutputWriter out = new OutputWriter(outputStream);\\n        TaskA solver = new TaskA();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskA {\\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\\n            int N = in.readInt();\\n            int K = in.readInt();\\n            String S = in.readString();\\n            for (int i = 0; i < N; i++) {\\n                if (i == K - 1) {\\n                    System.out.print(Character.toLowerCase(S.charAt(i)));\\n                } else {\\n                    System.out.print(S.charAt(i));\\n                }\\n            }\\n            System.out.println();\\n\\n        }\\n\\n    }\\n\\n    static class OutputWriter {\\n        private final PrintWriter writer;\\n\\n        public OutputWriter(OutputStream outputStream) {\\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\\n        }\\n\\n        public OutputWriter(Writer writer) {\\n            this.writer = new PrintWriter(writer);\\n        }\\n\\n        public void close() {\\n            writer.close();\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        private InputStream stream;\\n        private byte[] buf = new byte[1024];\\n        private int curChar;\\n        private int numChars;\\n        private InputReader.SpaceCharFilter filter;\\n\\n        public InputReader(InputStream stream) {\\n            this.stream = stream;\\n        }\\n\\n        public int read() {\\n            if (numChars == -1) {\\n                throw new InputMismatchException();\\n            }\\n            if (curChar >= numChars) {\\n                curChar = 0;\\n                try {\\n                    numChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (numChars <= 0) {\\n                    return -1;\\n                }\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int readInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                if (c < '0' || c > '9') {\\n                    throw new InputMismatchException();\\n                }\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public String readString() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                if (Character.isValidCodePoint(c)) {\\n                    res.appendCodePoint(c);\\n                }\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            if (filter != null) {\\n                return filter.isSpaceChar(c);\\n            }\\n            return isWhitespace(c);\\n        }\\n\\n        public static boolean isWhitespace(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        public interface SpaceCharFilter {\\n            public boolean isSpaceChar(int ch);\\n\\n        }\\n\\n    }\\n}\\n\\n", "target": "71", "substitutes": {"inputStream": ["inputSocket", "InputSource", "connectionFile", "sourceSource", "outputFile", " inputSteam", "startStream", "startSource", "connectionSocket", "inputSteam", " inputFile", "connectionStream", "sourceSteam", "InputStream", "sourceStream", "connectionSteam", "inputStreamer", "startStreamer", " inputSocket", "sourceStreamer", "inputFile", "outputSocket", "startSteam", "outputSteam", "inputSource", "InputSteam", "InputStreamer"], "outputStream": [" outputScope", "resultStream", "outputPort", "inputWriter", "resultSteam", "outStreamer", "OutputForm", "displayPort", "outputStreamer", "networkWindow", "inputStyle", "inputSteam", " outputPort", "networkStreamer", "OutputStream", "outWindow", "outputStyle", "outputScope", " outputSteam", "outStream", "outScope", "inputPort", "outputForm", "networkSteam", " outputForm", "OutputSteam", "resultWriter", "resultStyle", "displayStream", "inputScope", "outSteam", "networkStream", "outPort", "displaySteam", "inputStreamer", "inputForm", " outputStyle", "outForm", "OutputPort", "outputWindow", "outputWriter", "displayForm", "inputWindow", "outputSteam", " outputWriter"], "in": ["r", "end", "ri", "gin", "bin", "inf", "con", "el", "from", "l", "co", "xml", "log", "inc", "n", "m", "ini", "context", "source", "err", "raw", "al", "doc", "per", "inn", "file", "rin", "IN", " IN", "lo", "get", "run", "serv", "or", "ind", "form", "on", "In", "init", "io", "reader", "it", "null", "din", "is", "kin", "inner", "ic", "ins", "input", "old", "conf", "local", "er", "cin", "info", "iter", "ac", "re", "add", "net", "mi"], "out": ["set", "outer", "log", "n", "os", "can", "str", "Out", "manager", "store", "ins", "pool", "net", "all", "l", "error", "co", "o", "sys", "conn", "db", "OU", "client", "io", "it", "inner", "w", "s", "result", "ex", "end", "flush", "ver", "oss", "system", "tree", "tmp", "this", "print", "OUT", "write", "cache", "auto", "list", "status", "screen", "json", "output", "p", "stable", "dis", "outs", "ou", "server", "v", "err", "msg", "report", "user", "at", "init", "j", "aos", "null", "obj", "t", "er", "up", "to", "nt"], "solver": ["ssol", "Sol", "ssolver", " sol", "sol", "resolver", "Solution", "csolver", "ssolution", "csorter", " solution", "Solve", "csolve", " solve", "resolve", "ssolve", "Sorter", "resorter", "solve", "solution", "sorter", "csolution", "Solver", "resolution"], "testNumber": [" testNo", " attemptNo", "TestNumber", " attemptLength", " tasknumber", " testLength", "Testnumber", " testnumber", "TestNo", " attemptnumber", " taskNumber", " attemptNumber", " taskNo", "TestLength", " taskLength"], "N": ["I", "TN", "ND", "NM", "NI", "SN", "NP", "NE", "NB", "n", "No", "Ni", "NG", "P", "NO", "NL", "R", "NS", "Na", "NR", "V", "NH", "M", "AN", "NC", "H", "Sn", "C", "UN", "NA", "Num", "L", "NOR", "NN", "NT", "Ns"], "K": ["Z", "I", "KE", "KA", "KK", "NP", "AC", "NB", "MS", "KS", "O", "G", "KI", "P", "T", "R", "NS", "Q", "V", "M", "W", "KN", "H", "C", "HK", "k", "KR", "L", "J", "PK", "X", "SK", "B"], "S": ["I", "CS", "STR", "SI", "RAW", "SN", "SM", "MS", "SH", "SQL", "SA", "SP", "SE", "P", "SEC", "T", "SU", "R", "SO", "NS", "A", "SF", "V", "M", "Si", "SOURCE", "SR", "SL", "SAN", "BS", "Str", "H", "C", "L", "SS", "SER", "X", "s", "Summary", "VS", "SB", "ST", "LS", "B"], "i": ["q", "I", "ix", "ri", "key", "phi", "gi", "zi", "hi", "iu", "ei", "chain", "ip", "ji", "point", "li", "o", "some", "id", "n", "m", "me", "ini", "ai", "ms", "ind", "major", "qi", "index", "us", "init", "u", "j", "bi", "it", "slice", "ui", "is", "uri", "status", "pi", "k", "ti", "ic", "ci", "sim", "cli", "multi", "iter", "info", "ami", "y", "xi", "ii", "si", "di", "mi"], "writer": ["loader", "wrapper", "save", "end", "outer", "driver", "maker", "row", "journal", "master", "riter", "builder", "wp", "zero", "tree", "node", "author", "ew", "console", "server", "creator", "word", "processor", "operator", "engine", "this", "director", "file", "handler", "Writer", "client", "write", "caster", "ter", "cache", "code", "runner", "buffer", "player", "reader", "walker", "worker", "comment", "core", "document", "message", "parser", "vector", "html", "timer", "wrote", "connection", "manager", "table", "widget", "output", "iterator", "storage", "w", "er", "network", "writing", "page", "owner", "wright", "window", "term"], "stream": ["subject", "wrapper", "stage", "row", "chain", "http", "log", "system", "engine", "console", "resource", "impl", "context", "read", "speed", "ream", "host", "file", "path", "handler", "user", "client", "thread", "serv", "sw", "form", "view", "sync", "buffer", "history", "reader", "stack", "pipe", "loop", "poll", "zip", "message", "parser", "content", "each", "channel", "event", "open", "Stream", "input", "iterator", "sample", "pool", "socket", "sam", "iter", "check", "parent", "down", "proc", "window"], "buf": ["br", "ctr", "Buff", "cur", "wb", "sb", "Buffer", "temp", "mb", "uf", "vec", "tmp", "cp", "db", "cap", "msg", "batch", "buff", "doc", "seq", "mu", "b", "img", "rw", "bag", "buffer", "mem", "arr", "init", "cv", "pkg", "cmd", "txt", "pool", "cb", "box", "proc", "rb", "conv"], "curChar": ["currentChar", "tmpByte", "ctrCharacter", " curCh", " curByte", "currentCh", "crCharacter", "currentCharacter", "CurChar", "currentByte", "crChar", "curByte", "CurCharacter", "CurCh", "ctrCh", "ctrChar", "CurByte", "tmpCh", "tmpChar", " curCharacter", "ctrByte", "curCh", "tmpCharacter", "crByte", "curCharacter", "crCh"], "numChars": ["descCharters", " numchars", "numbercharts", "numchARS", "descQuarts", "NumChARS", "numchrs", " numchrs", "numCompars", "numChaces", "numberchaces", " numChrs", "numberchars", "numberChaces", "numCHars", "numColats", "numClaces", "numChARS", "descQuarters", "numCHcs", "numchats", "numberChars", "numberCharts", "numColars", "numColarts", "numQucs", "numChats", "numQuarts", "numColARS", "numPhars", "numClars", " numchats", "descQuars", "numPharts", "numComparts", "NumChars", "numChcs", " numChats", "numChrs", "numColrs", "numcharts", "numQuarters", "numchars", "descCharts", "numCHarts", "numCharts", "NumChrs", "numCharters", " numCharts", "descChcs", "numComprs", "numClarts", "numQuars", "descChars", " numcharts", "numPhaces", "numchaces", "descQucs", "numCHarters", "numCompats"], "filter": ["name", "mask", "bin", " cutoff", "fil", "ref", "processor", "source", "file", "function", "Filter", "handler", "map", "match", "type", "test", "reader", " filtered", " Filter", "accept", "only", "channel", " filters", "black", "check", "policy", " filtering", "term"]}}
{"code": "import java.util.ArrayDeque;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.Queue;\\nimport java.util.Scanner;\\n \\n\\n//result = Math.pow(num1, num3)\\n//StringBuffer str = new StringBuffer(hoge1);\\n//String hoge2 = str.reverse().toString();\\n//map.containsKey(A)\\n\\n//Map<String, Integer> map = new HashMap<String, Integer>(n);\\n/*for ( \u30ad\u30fc\u306e\u30c7\u30fc\u30bf\u578b key : \u30de\u30c3\u30d7\u306e\u540d\u524d.keySet() ) {\\n\t\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u578b data = \u30de\u30c3\u30d7\u306e\u540d\u524d.get( key );\\n\t\\n\t// key\u3084data\u3092\u4f7f\u3063\u305f\u51e6\u7406;\\n}*/\\n//int i = Integer.parseInt(s);\\n//Queue<String> qq=new ArrayDeque<>(); //add,poll,peek\\n//Deque<String> qq=new ArrayDeque<>();//push,pop,peek\\n//ArrayList<String> cc = new ArrayList<>(n);\\n//Collections.sort(list);\\n//Array.sort(list);\\n//Arrays.asList(c).contains(\"a\")\\n//list.set(1,\"walk\");\\npublic class Main {\\n\tstatic int a1[]= {0,-1,0,1};\\n\tstatic int b1[]= {-1,0,1,0};\\n\tprivate static Scanner sc = new Scanner(System.in);\\n\tstatic void p(String ans) {System.out.println(ans);};\\n\tstatic void p(int ans) {System.out.println(ans);};\\n\tstatic void p(long ans) {System.out.println(ans);};\\n\tstatic void p(double ans) {System.out.println(ans);};\\n\tstatic int K;\\n\tpublic static void main(String[] args) {\\n\t\tint N=sc.nextInt();\\n\t\tint M=sc.nextInt();\\n\t\tint C=sc.nextInt();\\n\t\tint B[]=new int[M];\\n\t\tint ctn=0;\\n\t\tfor(int i=0;i<M;i++) {\\n\t\t\tB[i]=sc.nextInt();\\n\t\t}\\n\t\tint Ai[][]=new int[N][M];\\n\t\tfor(int a=0;a<N;a++) {\\n\t\t\tint ans=0;\\n\t\t\tfor(int b=0;b<M;b++) {\\n\t\t\t\tAi[a][b]=sc.nextInt();\\n\t\t\t\tans+=Ai[a][b]*B[b];\\n\t\t\t}\\n\t\t\tif(ans+C>0) {\\n\t\t\t\tctn++;\\n\t\t\t}\\n\t\t}\\n\t\tp(ctn);\\n\t}\\n}\\n", "target": "68", "substitutes": {}}
{"code": "import java.util.*;\\n\\nclass Main{\\n  public static void main(String[] args){\\n    Scanner sc=new Scanner(System.in);\\n    System.out.println((sc.nextInt()+110)/111*111);\\n  }\\n}", "target": "106", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "esc", "sb", "sec", "cl", "sys", "sh", "cr", "bc", "sv", "sp", "soc", "sa", "tk", "ec", "capt", "sel", "sch", "cam", "sm", "tch", "tc", "scan", "sq", "cs", "ss", "nc", "c", "osc", "txt", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"]}}
{"code": "import java.math.BigInteger;\\nimport java.util.Scanner;\\nclass  Main{\\n  public   static  void main(String[]args){\\nScanner in =new Scanner(System.in);\\nString s;\\ns=in.next();\\nif (s.equals(\"ABC\"))\\n  System.out.print(\"ARC\");\\nelse  System.out.print(\"ABC\");\\n\\n\\n\\n\\n\\n  }\\n}", "target": "153", "substitutes": {"in": ["r", "bin", "inf", "con", "l", "asin", " din", "isin", " out", "inc", "n", "sin", "ini", "err", "doc", "inn", "file", "IN", " IN", "rin", "lines", "user", "ind", "In", "world", "io", "reader", "it", "null", "din", "is", "i", "thin", "stream", "inner", "en", "c", "ins", "input", "std", "conf", "out", "cin", "info", "char", "up", "all", "line"], "s": [" ls", "r", "gs", "sql", "sb", " ss", "rs", "h", "ns", "sv", "sp", "n", " S", " es", " str", "simple", "v", " rs", "S", "os", "less", "ats", "str", "south", "f", "fs", "es", "ls", "space", "sts", " cs", "string", "is", "ts", "sq", "i", " ts", "g", "ss", " self", "c", "ins", "js", "gets", "w", "t", "p", "ps", "hs", " som"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = null;\\n\t\ttry{\\n\t\t\tscan = new Scanner(System.in);\\n\t\t\tString str;\\n\t\t\tString text = scan.next();\\n\t\t\tint counter = 0;\\n\t\t\twhile(!(str = scan.next()).equals(\"END_OF_TEXT\")){\\n\t\t\t\tif(text.equals(str.toLowerCase()))counter++;\\n\t\t\t}\\n\t\t\tSystem.out.println(counter);\\n\t\t}finally{\\n\t\t\tif(scan!=null)scan.close();\\n\t\t}\\n\t}\\n}", "target": "46", "substitutes": {"scan": ["set", "session", "seek", "save", "spin", "skip", "look", "row", "nn", "reach", "parse", "gate", "con", "san", "ver", "cgi", " Scan", "watch", "Scan", "system", "sys", "connect", "sign", "conn", "sp", "read", "stat", "in", "batch", "vis", "ban", "sche", "sum", "can", "get", "report", "run", "spec", "go", "scale", "auto", "se", "warn", "sync", "search", "clean", "send", "scroll", "exec", "an", "stan", "cat", "sc", "find", "null", "sky", "ner", "na", "screen", "build", "store", "syn", "link", "black", "check", "sur", " scanner", "chan", "query", "sr", "ann", "see"], "str": ["br", "dat", "r", "name", "STR", "coll", "key", "next", "pt", "cur", "del", "sp", "n", "v", "m", "tr", "read", "msg", "comm", "seq", "path", "print", "spec", "arr", "j", "string", "url", "Str", "div", "i", "cont", "data", "inner", "piece", "obj", "input", "sim", "txt", "fr", "t", "s", "char", "ev", "ch", "gr", "st"], "text": ["name", "end", "key", "current", "prefix", "value", "TEXT", "word", "context", "source", "tt", "read", "path", "print", "tx", "type", "test", "pattern", "string", "ext", "message", "content", "template", "data", "Text", "input", "output", "txt", "format", "ct", "out", "t", "quote", "char", "title", "term"], "counter": ["numbered", "num", "offset", "card", "ctr", "result", "frequency", "row", "created", "cookie", "current", "number", "nr", "entry", "total", "system", "zero", "amount", "ounter", "creator", "processor", "per", "cover", "cell", "cause", "user", "ounters", "thread", "ter", "count", "currency", "index", "taker", "buffer", "const", "pointer", "instance", "sequence", "loop", "trace", "vector", "inner", "Counter", "timer", "c", "continue", "scope", "controller", "clock", "window"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint k = scan.nextInt();\\n\t\tint x = scan.nextInt();\\n\\n\t\tint left;\\n\t\tint right;\\n\t\tif(x - k + 1 >= -1000000)\\n\t\t\tleft = x - k + 1;\\n\t\telse\\n\t\t\tleft = -1000000;\\n\\n\t\tif(1000000 >= x + k - 1)\\n\t\t\tright = x + k - 1;\\n\t\telse\\n\t\t\tright = 1000000;\\n\\n\t\tint i;\\n\t\tfor(i = left; i <= right; i++)\\n\t\t\tSystem.out.println(i);\\n\t}\\n}", "target": "207", "substitutes": {"scan": ["set", "seek", "r", "save", "skip", "sql", "row", "nn", "reach", "gate", "parse", "san", " Scan", "ser", "sys", "system", "Scan", "sv", "n", "v", "read", "in", "sum", "can", "report", "se", "pass", "search", "sync", "gen", "send", "scroll", "an", "ann", "sc", "find", "ner", "g", "en", "store", "out", "black", "check", "info", "sur", "char", "re", "proc", "conv", "query", "ch", "util", "see"], "k": ["q", "num", "ke", "key", "wk", "ikk", "kl", "kan", "id", "kh", "kr", "n", "dk", "km", "tk", "ck", "ko", "unk", "ak", "ki", "ik", "kk", "kick", "z", "j", "it", "mk", "g", "ok", "cm", "ek", "sk", "ku", "isk", "K", "alpha", "kb", "p", "kind", "kj", "ka", "ijk", "kw", "kid"], "x": ["ix", "ex", "wx", "key", "ax", "l", "xml", "co", "h", "o", "v", "n", "xf", "xy", "tx", "xe", "xx", "on", "px", "xc", "z", "history", "hex", "xa", "full", "lex", "xxxx", "xt", "mx", "xxx", "c", "ct", "w", "X", "t", "rx", "p", "exp", "check", "ctx", "y", "xi", "xs", "xp", "to", "fx", "ox", "window"], "left": ["lt", "offset", "low", "empty", " l", "ll", "loc", "before", "el", "half", "place", "l", "len", "li", "pl", "side", "bl", "level", "nl", "top", "lo", "front", "center", "small", "le", "lit", "start", "back", "ind", "shell", "min", "list", "minimum", "single", "lower", "ml", "j", "bottom", "full", "inner", "wrong", "ell", "both", "out", "local", "Left", "ln", "last", "net", "all", "initial", "first", "st"], "right": ["round", "r", "end", "ax", "before", "row", "ight", "after", "part", "different", "mid", "rt", "and", "rew", "tr", "remote", "top", "cross", "ro", "third", "random", "self", "mr", "root", "form", "back", "R", "correct", "then", "rw", "recent", "range", "radius", "history", "bottom", "it", "full", "success", "rest", "inner", "wrong", "west", "rel", "head", "rights", "max", "Right", "out", "reverse", "roll", "ward", "rx", "upper", "all", "med", "over", "just", "next"], "i": ["q", "I", "ix", "phi", "gi", "hi", "iu", "php", "ei", "l", "ip", "ji", "point", "li", "id", "v", "m", "ij", "me", "ini", "ai", "ms", "ki", "im", "ind", "qi", "index", "f", "us", "u", "io", "ims", "j", "bi", "it", "is", "ui", "pi", "ti", "ic", "ci", "sim", "yi", "cli", "multi", "t", "iter", "integer", "y", "oi", "ii", "xi", "iri", "si", "di", "mi"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Scanner;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        Scanner in = new Scanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        abc169_a solver = new abc169_a();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class abc169_a {\\n        public void solve(int testNumber, Scanner in, PrintWriter out) {\\n            out.print(in.nextInt() * in.nextInt());\\n        }\\n\\n    }\\n}\\n\\n", "target": "35", "substitutes": {"inputStream": ["InputSource", "InputFile", "outputFile", " inputSteam", "outputStreamer", "outputSource", "inputSteam", "iconStreamer", " inputFile", "iconstream", "InputStream", "iconStream", "helloStream", "inputstream", " inputSource", "outputstream", "iconSteam", "inputStreamer", "helloSteam", "inputFile", "hellostream", "helloStreamer", "inputSource", "outputSteam", "InputSteam"], "outputStream": ["outFile", "inputWriter", "connectionView", "printView", "outputFile", " outputFile", "outputView", "inputSteam", "positionFile", "inputView", "printStream", "connectionStream", " outputSteam", "outStream", "positionWriter", "printSteam", "positionSteam", "outSteam", "connectionSteam", "outWriter", "outputWriter", "positionStream", "outputSteam", "printWriter", " outputWriter", "connectionWriter"], "in": ["r", "mm", "gin", "bin", "inf", "con", "current", "l", "sol", " din", "internal", "isin", "h", "log", "inc", "n", "conn", "sin", "ini", "err", "source", "al", "vin", "doc", "inn", "file", "IN", "rin", "this", "run", "ind", "on", "In", "init", "ssl", "io", "win", "reader", "it", "scan", "null", "din", "is", "i", "thin", "stream", "kin", "inner", "ner", "ic", "en", "inside", "ins", "input", "output", "conf", "local", "t", "info", "cin", "iter", "s", "er", "up", "add", "mc", "all", "mi"], "out": ["ou", "update", "result", "name", "ex", "outer", "flush", "temp", "writer", "co", "log", "o", "sys", "n", "v", "exit", "conn", "db", "err", "by", "this", "print", "OUT", "os", "can", "OU", "run", "write", "client", "user", "report", "cache", "res", "at", "list", "io", "gr", "it", "aos", "Out", "null", "no", "cmd", "scan", "comment", "inner", " OUT", "help", "json", "screen", "table", "ins", "output", "pool", "w", "gc", "t", "check", "s", "p", "stable", "net", "to", "nt", "over", "ch", "outs", "window"], "solver": ["ssolver", "solved", " solving", "unsolve", "tsolving", "resolver", "Solution", "solving", "ssolution", " solution", "Solve", " solve", "resolve", "tsolver", "ssolving", "tsolution", "resolved", "tsolve", "ssolve", "solve", "Solved", "unsolution", "solution", "unsolver", "unsolved", "Solver", "resolution"], "testNumber": [" proofNumber", " solutionnumber", " attemptnumber", " testnumber", " testnum", " proofnum", " attemptNumber", " solutionNumbers", " solutionNumber", " proofNumbers", " attemptnum", " testNumbers", " solutionnum", " proofnumber", " attemptNumbers"]}}
{"code": "\\n\\nimport java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.Scanner;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n        int k= 1;\\n        HashMap<String,Integer> hashMap = new HashMap<>();\\n        hashMap.put(\"SUN\",7);\\n        hashMap.put(\"MON\",6);\\n        hashMap.put(\"TUE\",5);\\n        hashMap.put(\"WED\",4);\\n        hashMap.put(\"THU\",3);\\n        hashMap.put(\"FRI\",2);\\n        hashMap.put(\"SAT\",1);\\n        String s1;\\n        String s2;\\n        int a,b;\\n        double n;\\n        while(k-->0){\\n            a=0;\\n            s1=s.next();\\n            s2=s.next();\\n            for(int i=0;i<3;i++){\\n                if(s1.charAt(i)==s2.charAt(i))\\n                    a++;\\n            }\\n            System.out.println(a);\\n        }\\n    }\\n\\n    private static int binary_search(\\n            int arr[], int l,\\n            int h, int x)\\n    {\\n        while (l <= h) {\\n            int mid = (l + h) / 2;\\n            if (arr[mid] <= x)\\n                l = mid + 1;\\n            else\\n                h = mid - 1;\\n        }\\n        return h;\\n    }\\n    static int gcd(int a, int b)\\n    {\\n        if(b==0) {\\n            return a;\\n        }\\n        return gcd(b,a%b);\\n    }\\n    private static boolean isPrime(int n) {\\n        if (n == 2)\\n            return true;\\n        else if ((n % 2 == 0 && n > 2) || n < 2)\\n            return false;\\n        else {\\n            for (int i = 3; i <= (int) Math.sqrt(n); i += 2) {\\n                if (n % i == 0)\\n                    return false;\\n            }\\n            return true;\\n        }\\n\\n\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new\\n                    InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try {\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n\\n}", "target": "243", "substitutes": {"s": ["sym", "gs", "r", "sb", "rs", "sol", "abs", "sys", "ns", "sv", "m", "Ws", "S", "os", "csv", "src", "its", "less", "south", "se", "sl", "es", "fs", "ssl", "j", "sts", "ts", "sq", "cs", "ss", "sis", "c", "js", "bis", "gets", "w", "sers", "sam", "t", "ses", "p", "as", "xs", "stats", "conv", "hs", "fps"], "k": ["q", "ke", "d", "key", "learn", "kl", "ks", "m", "v", "dk", "km", "tk", "make", "ck", "ko", "unk", "ak", "kar", "kk", "kick", "j", "mk", "ark", "g", "ok", "keep", "c", "step", "sk", "max", "K", "w", "t", "p", "kind", "kj", "ka", "kw", "kid"], "hashMap": ["HashMaps", "cacheMap", "ashMap", "ashClass", "cacheMaps", "shiftMan", "ashmap", "hashmap", " hashMaps", "hashClass", "shiftMAP", "hzMAP", "ashName", "ashList", "HashList", "ashSet", "shiftMap", "hashApp", "cachemap", "hzApp", " hashSet", "hashTable", " hashName", "ashApp", "hzMaps", "cacheClass", " hashmap", "hashMaps", "hashSet", "hzMan", "shiftMaps", "hzMap", "HashApp", "ashMan", "hashName", "hashMAP", " hashMAP", "hashMan", " hashApp", "HashTable", " hashTable", "ashMaps", " hashList", "HashName", "hashList", " hashClass", "ashTable", " hashMan"], "s1": [" s3", "ts01", "S3", "s3", "ps0", "s01", " s01", "S1", "s0", "sts0", "ts0", "ps1", "S0", "S2", "sts1", "sts3", "ps3", " s0", "ts2", "ts1"], "s2": ["str2", " s3", "S3", "s3", " stwo", "ss0", "js2", "Stwo", "S1", "jstwo", "s0", "js1", "sstwo", "js0", " s02", "spl", "S2", "str1", "strtwo", "s02", "Spl", "ss1", " s0", "stwo", "S02", " spl", "ss2", "strpl"], "a": ["ae", "r", "ca", "acc", "d", "ra", "aq", "aaaa", "ar", "number", "oa", "o", "ta", "v", "aa", "da", "m", "sta", "sa", "al", "le", "A", "at", "f", "ia", "index", "u", "an", "la", " A", "ao", "j", "xa", "ab", "pa", "area", "ea", "g", "ba", "na", "aaa", "ach", "c", "aj", "span", "e", "w", "alpha", "as", "t", "ap", "p", "ac", "ma", "y", "add", "au", "ka", "va", "am"], "b": ["r", "d", "sb", "base", "o", "bc", "v", "m", "bh", "bf", "bs", "back", "f", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "g", "ba", "c", "e", "w", "t", "p", "bb", "y", "be", "rb", "B"], "n": ["nu", "num", "r", "name", "d", " na", "nn", "nr", "un", "len", "number", "N", "o", "ns", "m", "v", "dn", "nan", "ne", "nl", "cn", "ni", "sn", "note", "norm", "an", "z", "j", "no", "nb", "g", "nc", "na", "np", "c", "none", "nm", "w", "t", "p", "ng", "nor", "ln", "y", "net", "size", "nt"], "i": ["I", "ix", "r", "ri", "sql", "d", "gi", "zi", "iu", "ei", "chain", "ip", "ji", "point", "o", "li", "id", "asi", "m", "ij", "me", "ini", "v", "ai", "spec", "ki", "mu", "ind", "qi", "index", "init", "u", "\u0438", "io", "j", "bi", "it", "ui", "uri", "is", "ie", "status", "pi", "g", "ti", "ic", "ci", "cli", "multi", "t", "iq", "p", "info", "ami", "y", "oi", "xi", "ii", "si", "di", "mi"], "arr": ["addr", "r", "elt", "av", "emb", "ray", "Array", "ax", "ear", "row", "array", "ar", "vals", "ele", "pl", "ij", "app", "aa", "db", "err", "bl", "ars", "Ar", "arg", "val", "dict", "enc", "buf", "list", "j", "data", "aaa", "xxx", "obj", "js", "aj", "fr", "ARR", "mat", "res", "gr", "expr"], "l": ["dl", "r", "lc", "ll", "d", "hi", "el", "hl", "len", "kl", "li", "v", "m", "ol", "lp", "al", "nl", "lo", "le", " L", "lr", "sl", "f", "ls", "u", "ml", "la", "left", "z", "j", "g", "lv", "ul", "c", "L", "w", "t", "p", "ln", "y", "lu"], "h": ["he", "ho", "r", "d", "phi", "hi", "hl", "sh", "kh", "m", "ch", "oh", "bh", "v", "high", "hh", "ih", "hd", "ht", "u", "z", "j", "hr", "H", "g", "ul", "c", "ph", "w", "t", "hei", "p", "ha", "y", "th", "hm", "hs", "hash"], "x": ["ix", "r", "ex", "d", "ax", "el", "ox", "o", "v", "m", "ch", "xy", "tx", "xe", "xx", "f", "ry", "px", "xc", "z", "xa", "j", "dx", "xt", "mx", "xxx", "c", "e", "w", " xx", "X", "t", "p", "rx", "y", "xi", "xs"], "mid": ["lt", "mm", "mill", "mer", "mini", "hi", "mask", "half", "part", "len", "cond", "li", "Mid", "id", "rid", "m", "rand", "lo", "md", "ms", "le", "mr", "pid", "tx", "lim", "ind", "lay", "wid", "min", "medium", "px", "mad", "div", "partial", "tri", "inner", "my", "mt", "ph", "middle", "nd", "late", "hei", "man", "ld", "trans", "med", "line", "mi"], "br": ["r", "sb", "bro", "shr", " bro", "bsp", " Br", "ber", "bc", "cr", "kr", "dr", "bh", "tr", "bridge", "bf", "bre", "bl", "bs", "bn", "bp", "Br", "mr", "buf", "BR", "bd", "eb", "lr", "hr", "bi", "bm", "pr", "ba", "wr", "bt", "fr", "bb", "rb", " BR"], "st": ["sth", "rt", "tt", "ste", "St", "tx", "sw", " ste", "stra", "se", " superst", "ost", "sts", "sty", "est", " ST", "ss", "et", "std", "ct", " et", "nd", " est", "ft", "th", "ST", " ut"]}}
{"code": "import java.util.*;\\n \\nclass Main{\\n    public static void main(String[] args){\\n\t\t\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\tint l = scan.nextInt();\\n\\n\t\tlong[][] a = new long[n][m];\\n\t\tlong[][] b = new long[m][l];\\n\t\tlong[][] c = new long[n][l];\\n\t\tlong sum = 0;\\n\t\t//a???????????????\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tfor(int j=0; j<m; j++){\\n\t\t\t\ta[i][j] = scan.nextLong();\\n\t\t\t}\\n\t\t}\\n\t\t//b???????????????\\n\t\tfor(int i=0; i<m; i++){\\n\t\t\tfor(int j=0; j<l; j++){\\n\t\t\t\tb[i][j] = scan.nextLong();\\n\t\t\t}\\n\t\t}\\n\t\t//??????c?????????????\u00b4?\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tfor(int j=0; j<l; j++){\\n\t\t\t\tsum = 0;\\n\t\t\t\tfor(int k=0; k<m; k++){\\n\t\t\t\t\tsum += a[i][k] * b[k][j];\\n\t\t\t\t}\\n\t\t\t\tc[i][j] = sum;\\n\t\t\t}\\n\t\t}\\n\t\t//???????????????\\n\t\tfor(int i=0; i<n; i++){\\n\t\t\tfor(int j=0; j<l; j++){\\n\t\t\t\tSystem.out.print(c[i][j]);\\n\t\t\t\tif(j < l-1){\\n\t\t\t\tSystem.out.print(\" \");\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tSystem.out.println(\"\");\\n\t\t}\\n    }\\n}", "target": "204", "substitutes": {"scan": ["set", "r", "save", "acc", "skip", "row", "nn", "reach", "gate", "parse", "san", "nav", " Scan", "ser", "sys", "Scan", "system", "connect", "sv", "sin", "ran", "read", "in", "can", "get", "report", "scale", "se", "gen", "sm", "search", "clean", "send", "scroll", "an", "sort", "pass", "sync", "cat", "sc", "find", "ner", "store", "sim", "out", "black", "check", "sur", " scanner", "re", "trans", "query", "ch", "ann", "see"], "n": ["nu", "mn", "r", "d", "nn", "N", "o", "h", "ns", "v", "dn", "cn", "sn", "f", "on", "an", "z", "j", "nb", "i", "g", "nc", "fn", "k", "np", "na", "en", "w", "t", "p", "ln", "y", "nt", "x"], "m": ["num", "mn", "r", "mm", "d", "dm", "mp", "h", "o", "v", "md", "ms", "f", "sm", "M", "u", "an", "type", "z", "j", "gm", "i", "g", "k", "cm", "mt", "ma", "t", "er", "p", "y", "mc", "x", "mi"], "l": ["dl", "lt", "r", "lc", "ll", "d", "el", "len", "li", "h", "pl", "v", "lp", "nl", "le", "lit", "lay", "f", "sl", "ls", "u", "ml", "z", "j", "i", "g", "lv", "ell", "ul", "L", "t", "p", "tl", "ln", "ly"], "a": ["ae", "ca", "ar", "h", "aa", "da", "sa", "al", "ai", "an", "la", "arr", "ga", "ao", "ab", "ea", "na", "ba", "e", "ma", "s", "p", "au", "x", "am"], "b": ["br", "beta", "ob", "h", "bc", "v", "bf", "db", "bl", "bs", "eb", "fb", "j", "bi", "ab", "g", "ba", "bg", "e", "bb", "cb", "y", "be", "rb", "B"], "c": ["r", "lc", "ca", "cc", "d", "h", "o", "de", "cr", "bc", "v", "ce", "dc", "ec", "cn", "f", "u", "z", "cd", "cs", "g", "cm", "e", "ct", "t", "p", "y", "cf"], "sum": ["set", "Sum", "num", "mask", "total", "sp", "cap", "cache", "count", "list", "pos", "index", "const", "stack", "space", "um", "table", "store", "max", "cmp", "diff", "last", "add", "all", "size", "st", "hash"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    private static final int MOD = 1_000_000_007;\\n    private static final String YES = \"YES\";\\n    private static final String NO = \"NO\";\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n\\n        String S = sc.next();\\n\\n        System.out.println(solve(S));\\n    }\\n\\n    private static String solve(String S) {\\n        if (S.equals(\"Sunny\"))  return \"Cloudy\";\\n        if (S.equals(\"Cloudy\")) return \"Rainy\";\\n\\n        return \"Sunny\";\\n    }\\n}\\n", "target": "60", "substitutes": {"MOD": [" MAX", "Mod", "MAG", "NUM", "IX", "MODE", "OD", "MS", "FD", "RC", "IB", "RO", "MAC", "NR", "BY", "TYPE", "SPEC", "mod", "CC", " mod", "POS", "LOCK", "TAG", "VALUE", "AD", "MAX", "VER", "UID"], "YES": ["GREEN", "MODE", "NULL", "MS", "OS", "OUT", "yes", "SU", "SO", "NAME", "ANY", "CAN", " yes", "AN", "US", "BS", "IS", "XX", "TYPE", "SPEC", "OK", "Y", "OUS", "POS", "VER", "Yes"], "NO": ["MO", "OO", "N", "NE", "MS", "GO", "No", "O", "OU", "DO", "RO", "SO", "NS", "ME", "NR", "ANY", "VO", "ONE", "no", "BO", "LO", "OK", "NA", "TON", "POS", "NOT"], "sc": ["arc", "sac", "uc", "lc", "anc", "esc", "sec", "cl", "sys", "system", "bc", "sv", "sp", "cr", "dc", "nl", "ko", "ec", "cle", "sch", "cam", "sw", "se", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "s", "p", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "S": ["Z", "D", "CS", "STR", "F", "SI", "SN", "N", "TS", "SM", "SH", "SQL", "SA", "SP", "SAM", "SE", "P", "G", "IN", "T", "SU", "R", "NS", "A", "Q", "SF", "V", "Si", "M", "SD", "string", "SL", "SAN", "RS", "BS", "H", "C", "SSL", "Y", "L", "SS", "GS", "J", "SER", "s", "SB", "ST", "B"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String S = sc.next();\\n        String ans = \"Good\";\\n\\n        for(int i = 0; i < 3; i++){\\n            if(S.charAt(i) == S.charAt(i + 1)){\\n                ans = \"Bad\";\\n                break;\\n            }\\n        }\\n        System.out.print(ans);\\n    }\\n}", "target": "73", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "ser", "system", "bc", "cr", "sv", "sp", "ko", "ec", "cle", "sel", "sch", "RC", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "screen", "ok", "c", "syn", "osc", "Sc", "gc", "s", "scl", "asc", "isc", "SC", "mc", "pc", "conv", "ch", "desc", "sub"], "S": ["I", "CS", "STR", "F", "SI", "SN", "N", "TS", "SM", "SH", "JS", "MS", "SQL", "SA", "G", "SAM", "SP", "P", "SE", "T", "SU", "A", "Q", "SF", "V", "Si", "M", "SOURCE", "string", "SL", "RS", "BS", "IS", "H", "C", "AS", "L", "SS", "GS", "SER", "s", "DS", "SB", "ST", "B"], "ans": [" orphans", " means", " Ans", "ros", "uns", "ons", "acs", "ents", "grades", "anc", "aus", "san", "rs", "anks", "aces", "oss", "eds", "helps", "ads", "ks", "uts", "ces", "can", "ean", "arts", "ANS", "amps", "ats", "ens", "ants", " sans", "ls", "an", "AN", "ann", "aos", "mas", "leans", " spans", " scans", "utters", " beans", "ins", "ongs", "aps", "arms", "vers", "annot", "sam", "s", "posts", "ots", "rans", "ars", " plans", " pan"], "i": ["q", "I", "ix", "ex", "ri", "key", "phi", "gi", "hi", "iu", "ogi", "zi", "ei", "chain", "ji", "li", "id", "n", "m", "v", "missing", "ini", "in", "batch", "ski", "ai", "ki", "im", "ind", "qi", "a", "ori", "index", "init", "u", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "eu", "ti", "ic", "ci", "sim", "yi", "cli", "my", "e", "multi", "t", "iq", "gu", "ami", "y", "oi", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void debug(String str) {\\n        boolean debug = false;\\n        if (debug != false) {\\n            return;\\n        }\\n        System.out.println(str);\\n    }\\n\\n    public static void main(String[] args) {\\n\\n        int N;\\n        long[] H;\\n\\n        try (Scanner sc = new Scanner(System.in)) {\\n            N = sc.nextInt();\\n            H = new long[N];\\n            for (int i = 0; i < N; i++) {\\n                H[i] = sc.nextLong();\\n            }\\n        }\\n        long[] L = new long[N];\\n        for (int i = 0; i < N; i++) {\\n            L[i] = H[i] -1;\\n        }\\n\\n\\n\\n        if (H.length == 1) {\\n            System.out.println(\"Yes\");\\n            return;\\n        }\\n        if (H.length == 2 && H[0] - H[1] <= 1) {\\n            System.out.println(\"Yes\");\\n            return;\\n        }\\n\\n        long min = H[0];\\n        for (int i = 1; i < N; i++) {\\n            if(min >H[i]&& min >L[i]){\\n                System.out.println(\"No\");\\n                return;\\n            }else{\\n                if(min >H[i]){\\n                    min = L[i];\\n                    continue;\\n                }else if(min >L[i]){\\n                    min = H[i];\\n                    continue;\\n                }\\n                if(H[i] > L[i]){\\n                    min = L[i];\\n                }else{\\n                    min = H[i];\\n                }\\n            }\\n\\n        }\\n\\n        System.out.println(\"Yes\");\\n        return;\\n\\n    }\\n}\\n", "target": "74", "substitutes": {"str": ["br", "r", "name", "STR", "sys", "n", "m", "v", "console", "err", "msg", "comm", "print", "arr", "z", "j", "string", "cmd", "Str", "text", "data", "g", "vol", "c", "txt", "out", "w", "t", "s", "char", "p", "cfg", "st"], "debug": [" debugger", "d", " trace", "enable", "error", "var", "log", " deb", "deb", "sys", "module", "console", "export", "db", "doc", "print", "show", "close", "tag", "report", "write", " DEBUG", "google", "start", "cache", "hidden", "warn", "DEBUG", "bool", "init", "force", "test", "buffer", "Debug", "string", "trace", "comment", "dev", "develop", "status", " debugging", "bug", "help", "g", "mod", "open", " Debug", "store", "display", "output", "format", "info", "dump", "depth", "util", "config"], "N": ["D", "I", "TN", "FN", "ND", "NM", "NUM", "SN", "ALL", "NP", "NE", "NB", "n", "Size", "No", "O", "S", "Ni", "P", "NO", "NL", "T", "R", "NS", "NR", "V", "ANY", "M", "NH", "MN", "Len", "AN", "GN", "NC", "C", "Number", "NN", "NA", "Y", "Num", "J", "K", "X", "CN", "NI", "NT", "Ns"], "H": ["HP", "I", "HE", "Eh", "HD", "F", "HR", "MH", "HQ", "HL", "DH", "High", "Hi", "h", "AC", "HA", "Hash", "SH", "O", "G", "HS", "S", "WH", "P", "He", "T", "HH", "HT", "R", "V", "M", "NH", "AH", "Ch", "CH", "HO", "RH", "AV", "HI", "C", "IL", "HC", "HF", "MI", "TH", "Y", "HM", "Host", "J", "His", "K", "GH", "X", "HTTP", "HTML", "History", "OH", "HB"], "i": ["set", "q", "ix", "zi", "iu", "ei", "base", "li", "me", "batch", "ai", "ki", "f", "ims", "is", "you", "ic", "c", "e", "ios", "parent", "ami", "y", "oi", "di", "ri", "fi", "l", "chain", "ip", "ji", "point", "o", "id", "ij", "source", "in", "client", "ori", "io", "slice", "bi", "it", "inner", "ci", "sim", "cli", "exp", "ii", "phi", "cgi", "this", "print", "ni", "ger", "ind", "list", "\u0438", "u", "status", "pi", "et", "json", "xi", "si", "mi", "I", "key", "gi", "iy", "v", "m", "ini", "err", "im", "qi", "us", "init", "ies", "j", "ity", "ui", "ie", "uri", "ti", "multi", "iter", "info"], "L": ["Z", "I", "Lu", "LT", "LB", "LIN", "BL", "LC", "l", "Li", "TL", "LE", "S", "LI", "P", "T", "LL", "NL", "R", "V", "M", "W", "LOC", "SL", "FL", "AL", "IL", "LP", "CL", "C", "LM", "PL", "LG", "J", "DL", "ML", "LV", "dL", "XL", "ln", "VL", "LU", "EL", "GL", "LR", "LS", "B"], "min": ["lt", "li", "prefix", "n", "Minimum", " Min", "Mini", "only", "format", "first", "next", "mins", "mini", "skip", "l", "temp", "un", "part", "Min", "minute", "doc", "start", "amin", "sort", "partial", "rest", "lock", "sim", "none", "diff", "local", "s", " MIN", "initial", "dim", "pre", "sol", "member", "rand", "emin", "stat", "print", "spec", "small", "select", "req", "delay", "status", "mod", "rel", "sample", "MIN", "p", "mi", "mm", "low", "beta", "master", "latest", "v", "m", "meta", "default", "sum", "im", "minimum", "lower", "j", "mine", "max", "just", "aug"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString line;\\n\t\tString in[] = new String[2];\\n\t\tint a = 0, b = 0;\\n\t\ttry {\\n\t\t\tline = br.readLine();\\n\t\t\tin = line.split(\" \");\\n\t\t\ta = Integer.parseInt(in[0]);\\n\t\t\tb = Integer.parseInt(in[1]);\\n\t\t} catch (IOException e) {\\n\t\t\te.getStackTrace();\\n\t\t}\\n\t\t\\n\t\tint max = a + b;\\n\t\tint tmp;\\n\t\tif (max < (tmp = a - b)) {\\n\t\t\tmax = tmp;\\n\t\t}\\n\t\t\\n\t\tif (max < (tmp = a * b)) {\\n\t\t\tmax = tmp;\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(max);\\n\t}\\n\\n}", "target": "188", "substitutes": {"br": ["bro", "shr", "bsp", "vr", "cr", "bc", "ber", "kr", "dr", "bh", "tr", "db", "bridge", "bl", "bs", "bn", "bp", "brace", "Br", "mr", "Fr", "buf", "str", "BR", "bd", "lr", "hr", "bm", "pr", "wr", "bt", "yr", "fr", "er", "rb", "ch", "gr"], "line": ["block", "Line", "name", "row", "l", "inline", "entry", "co", "chain", "point", "log", "de", "word", "msg", "pe", "nl", "detail", "lo", "ge", "file", "cell", "print", "where", "lines", "le", "lin", "se", "phrase", "list", "range", "frame", "string", "comment", "no", "message", "LINE", "text", "zone", "lock", "online", " Line", "eline", "link", "e", "liner", "char", "ln", "re", "page", "ine"], "in": ["r", "gin", "bin", "con", "el", "from", "l", "part", " din", "isin", "rt", " out", "o", "id", "inc", "n", "m", "ini", "err", "source", "pin", "doc", "vin", "inn", "rin", "OUT", "IN", "raw", "lines", "user", " input", "pid", "form", "list", "pos", "on", "In", "init", "world", "mem", "nin", "reader", "it", "din", "is", "i", "stream", "inner", "pi", "en", "inside", "ins", "input", "std", "join", "out", "ma", "t", "info", "cin", "p", "late", "ln", "re", "add", "query", "login"], "a": ["ae", "ca", "mm", "ar", "l", "oa", "o", "ta", "m", "aa", "app", "da", "sta", "sa", "ama", "go", "af", "act", "A", "at", "ia", "an", "la", "ga", "ao", "j", "ity", "ed", "ab", "i", "ea", "area", "ba", "aaa", "na", "aka", "c", "aj", "alpha", "e", "ma", "t", "eas", "as", "ac", "p", "era", "au", "all", "va", "am"], "b": ["d", "wb", "beta", "sb", "ob", "l", "base", "o", "bc", "v", "gb", "n", "bf", "db", "m", "bs", "lib", "bool", "back", "eb", "f", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bg", "c", "bis", "e", "t", "blue", "p", "bb", "cb", "be", "rb", "B"], "max": ["set", "end", "limit", "ax", "cur", "dot", "mp", "maximum", "temp", "ver", "prime", "best", "global", "total", "now", "value", "n", "m", "v", "cp", "default", "rank", "print", "sum", "ms", "act", "right", "cache", "gt", "res", "map", "min", "shape", "count", "opt", "scale", "recent", "full", "huge", "mx", "mod", "head", "step", "conf", "cmp", "c", "out", "obj", "ma", "t", "exp", "p", "txt", "ctx", "Max", "MAX", "size", "med", "aux", "x", "window", "hash"], "tmp": ["offset", "mm", "acc", "tv", "cur", "mp", "timeout", "temp", "prime", "lambda", "tp", "total", "clip", "perm", "rt", "zero", "sp", "m", "cp", "v", "tt", "tf", "nom", "msg", "important", "attr", "xy", "td", "cache", "auto", "img", "mmm", "test", "tc", "amp", "cv", "qq", "pkg", "tm", "mk", "dust", "ptr", "crop", "partial", "mod", "mx", "np", "emp", "obj", "txt", "cmp", "jp", "ot", "t", "etc", "p", "ctx", "proc", "aux", "nt", "x", "checked", "term"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n      Scanner sc = new Scanner(System.in);\\n      int res = 0, current = 10;\\n      while(sc.hasNext()){\\n        int a = sc.nextInt();\\n        if(a%10 == 0){res-=10;}\\n        else if(a%10 < current){current = a%10;}\\n        \\n        res += (a/10+1)*10;\\n      }\\n      System.out.println(res - 10 + current);\\n    }\\n}", "target": "63", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "sh", "pl", "cr", "sv", "sp", "bc", "soc", "ch", "inc", "ec", "cle", "sel", "sch", "sw", "tch", "sync", "fc", "tc", "sq", "cs", "sci", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "scrib", "rc", "desc"], "res": ["r", "reg", "result", "rev", "rs", "pre", "red", "total", "zero", "ress", "reset", "prefix", "ref", "Res", "rand", "resource", "stock", "resp", "sum", "ms", "val", "ret", "right", "pos", "req", "init", "resh", "mem", "results", " Res", "i", "rest", "rel", "obj", "max", "des", "out", "RES", "cons", "def", "re", "ps", "rc", "resolution", "pres", "gr", "rem"], "current": ["set", "num", "active", "result", "cur", "reported", "con", "water", "temp", "number", "position", "pre", "total", "mont", "now", "zero", "prefix", "currently", "reset", "n", "focus", "default", "selected", "percent", "top", "update", "this", "pri", "random", "client", "min", "count", "index", "on", "recent", "Current", "complete", "i", "rest", "length", "keep", "today", "done", "c", "aj", "max", "counter", "other", "local", "integer", "continue", "p", "info", "size", "pres", "first", "next"], "a": ["ae", "name", "acc", "d", "ar", "oa", "ta", "zero", "aa", "app", "sta", "sa", "aw", "sha", "this", "val", "le", "A", "b", "at", "ia", "es", "an", "la", "z", "ao", "j", "ga", "ed", "i", "ea", "apa", "area", "ba", "aaa", "na", "aj", "fa", "span", "alpha", "ma", "t", "as", "exp", "ac", "p", "eas", "era", "au", "angular", "aux", "to", "va", "am"]}}
{"code": "import java.util.*; import java.io.*; import java.math.*;\\npublic class Main{\\n\t//Don't have to see. start------------------------------------------\\n\tstatic class InputIterator{\\n\t\tArrayList<String> inputLine = new ArrayList<String>(1024);\\n\t\tint index = 0; int max; String read;\\n\t\tInputIterator(){\\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\t\ttry{\\n\t\t\t\twhile((read = br.readLine()) != null){\\n\t\t\t\t\tinputLine.add(read);\\n\t\t\t\t}\\n\t\t\t}catch(IOException e){}\\n\t\t\tmax = inputLine.size();\\n\t\t}\\n\t\tboolean hasNext(){return (index < max);}\\n\t\tString next(){\\n\t\t\tif(hasNext()){\\n\t\t\t\treturn inputLine.get(index++);\\n\t\t\t}else{\\n\t\t\t\tthrow new IndexOutOfBoundsException(\"There is no more input\");\\n\t\t\t}\\n\t\t}\\n\t}\\n\tstatic HashMap<Integer, String> CONVSTR = new HashMap<Integer, String>();\\n\tstatic InputIterator ii = new InputIterator();//This class cannot be used in reactive problem.\\n\tstatic PrintWriter out = new PrintWriter(System.out);\\n\tstatic void flush(){out.flush();}\\n\tstatic void myout(Object t){out.println(t);}\\n\tstatic void myerr(Object t){System.err.print(\"debug:\");System.err.println(t);}\\n\tstatic String next(){return ii.next();}\\n\tstatic boolean hasNext(){return ii.hasNext();}\\n\tstatic int nextInt(){return Integer.parseInt(next());}\\n\tstatic long nextLong(){return Long.parseLong(next());}\\n\tstatic double nextDouble(){return Double.parseDouble(next());}\\n\tstatic ArrayList<String> nextStrArray(){return myconv(next(), 8);}\\n\tstatic ArrayList<String> nextCharArray(){return myconv(next(), 0);}\\n\tstatic ArrayList<Integer> nextIntArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Integer> ret = new ArrayList<Integer>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Integer.parseInt(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic ArrayList<Long> nextLongArray(){\\n\t\tArrayList<String> input = nextStrArray(); ArrayList<Long> ret = new ArrayList<Long>(input.size());\\n\t\tfor(int i = 0; i < input.size(); i++){\\n\t\t\tret.add(Long.parseLong(input.get(i)));\\n\t\t}\\n\t\treturn ret;\\n\t}\\n\tstatic String myconv(Object list, int no){//only join\\n\t\tString joinString = CONVSTR.get(no);\\n\t\tif(list instanceof String[]){\\n\t\t\treturn String.join(joinString, (String[])list);\\n\t\t}else if(list instanceof ArrayList){\\n\t\t\treturn String.join(joinString, (ArrayList)list);\\n\t\t}else{\\n\t\t\tthrow new ClassCastException(\"Don't join\");\\n\t\t}\\n\t}\\n\tstatic ArrayList<String> myconv(String str, int no){//only split\\n\t\tString splitString = CONVSTR.get(no);\\n\t\treturn new ArrayList<String>(Arrays.asList(str.split(splitString)));\\n\t}\\n\tpublic static void main(String[] args){\\n\t\tCONVSTR.put(8, \" \"); CONVSTR.put(9, \"\\n\"); CONVSTR.put(0, \"\");\\n\t\t\\n\t\tsolve();flush();\\n\t\t\\n\t}\\n\t//Don't have to see. end------------------------------------------\\n\tstatic void solve(){//Here is the main function\\n\t\tArrayList<Integer> one = nextIntArray();\\n\t\tint a = Math.min(one.get(0), one.get(1));\\n\t\tint b = Math.max(one.get(0), one.get(1));\\n\t\tString output = \"\";\\n\t\tfor(int i = 0; i < b; i++){\\n\t\t\toutput += String.valueOf(a);\\n\t\t}\\n\t\tmyout(output);\\n\t}\\n\t//Method addition frame start\\n\\n\\n\\n\t//Method addition frame end\\n}\\n", "target": "24", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String arg[]) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tsc.close();\\n\t\tint ans = 0;\\n\t\t\\n\t\tfor(int i = 1; i <= N; i++) {\\n\t\t\tif(splitN(i) >= A && splitN(i) <= B) {\\n\t\t\t\tans += i;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n\t\\n\tpublic static int splitN(int n) {\\n\t\tint sum = 0;\\n\t\tString str = Integer.toString(n);\\n\t\tString[] S = str.split(\"\");\\n\t\t\\n\t\tfor(int i = 0; i < S.length; i++) {\\n\t\t\tsum += Integer.parseInt(S[i]); \\n\t\t}\\n\t\treturn sum;\\n\t}\\n}", "target": "212", "substitutes": {"arg": ["gs", "name", " arguments", " v", " flag", " argument", "word", "GV", " param", "__", " rest", " Arg", "cmd", " line", "GS", " Argument", "argument", "Args", "char", "command", "flag", " command", "line", " larg", "Arg"], "sc": ["usc", "arc", "lc", "acc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "cr", "sv", "sp", "bc", "inc", "dc", "ck", "nl", "ko", "ctl", "sch", "go", "RC", "se", "sync", "fc", "tc", "ctrl", "cv", "scan", "sq", "cont", "cs", "ss", "nc", "ok", "c", "osc", "cmp", "Sc", "gc", "out", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "N": ["D", "I", "F", "ND", "NI", "NB", "G", "Ni", "P", "T", "R", "NS", "Na", "NR", "V", "M", "AN", "H", "NC", "C", "NA", "Num", "L", "Y", "K", "X", "NN", "NT", "Ns"], "A": ["AA", "AU", "CA", "AE", "AC", "HA", "Ax", "Av", "As", "SA", "P", "IA", "a", "GA", "LA", "API", "Ant", "AL", "ACC", "AV", "H", "AP", "AM", "AGE", "AB", "An", "Ag", "AS", "RA", "AR", "AST", "AD", "BA", "AF", "ACT", "AT"], "B": ["D", "I", "WB", "BB", "LB", "TB", "BL", "USB", "BG", "DB", "BU", "VB", "NB", "GB", "G", "P", "IB", "BF", "R", "BR", "Bs", "b", "BC", "V", "M", "BS", "C", "BO", "AB", "Y", "L", "J", "EB", "BA", "OB", "Blue", "FB"], "ans": ["acs", "uns", " means", "ents", "ons", "nets", "aus", "names", "ums", "anks", "eds", "ns", "ads", "ks", "ars", "can", "ms", "lines", "types", "arts", "ANS", "amps", "ats", "ens", "ants", "ls", "an", "AN", "angs", "vs", "ams", "mas", "aos", "anes", " spans", " scans", "cs", "ups", "ins", "aps", "as", "cons", "s", "posts", "cas", "lan", "offs", "outs", "ann"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ms", "ki", "ims", "is", "ic", "MI", "c", "ami", "y", "oi", "di", "ri", "l", "ip", "ji", "o", "id", "ij", "client", "ori", "a", "io", "bi", "it", "g", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "php", "remote", "ni", "mu", "ind", "u", "\u0438", "pi", "yi", "gu", "xi", "si", "mi", "I", "sql", "key", "gi", "m", "ini", "err", "ski", "im", "qi", "index", "us", "init", "j", "ity", "umi", "ui", "ie", "uri", "ti", "PI", "multi", "t", "info"], "n": ["nu", "num", "mn", "d", "nn", "l", "number", "nr", "gn", "ns", "m", "v", "dn", "ne", "nan", "nl", "cn", "sn", "z", "j", "nb", "g", "na", "nc", "np", "c", "tn", "nm", "w", "t", "s", "p", "nor", "net", "nt"], "sum": ["Sum", "num", "set", "sat", "result", "acc", "save", "cal", "star", "sun", "temp", "total", "zero", " SUM", "summary", "sa", "tail", "su", "mean", "cu", "ms", "val", "scale", "count", "index", "us", "umm", "match", "mem", "cat", "must", "sup", "um", "si", " Sum", "gam", " sums", "cum", "mod", " summed", "sim", "ass", "cmp", "out", "sam", "multi", "average", "add", "size", "med", "hash"], "str": ["br", "r", "ctr", "STR", "cur", "l", "temp", "usr", "cr", "sp", "v", "dr", "m", "tr", "ocr", "print", "spec", "enc", "sl", "arr", "z", "j", "string", "Str", "div", "pr", "text", "g", "vol", "obj", "txt", "out", "fr", "t", "s", "char", "stable", "gr", "st"], "S": ["I", "CS", "STR", "SI", "TS", "SM", "MS", "JS", "Series", "SA", "SAM", "SP", "G", "SE", "P", "T", "SU", "R", "NS", "V", "Si", "M", "SR", "US", "SL", "BS", "RS", "IS", "H", "WS", "Sl", "GS", "L", "SS", "s", "DS", "VS", "SB", "ST", "LS"]}}
{"code": "import java.io.*;\\n\\nclass Main{\\n\tpublic static void main(String args[]) throws IOException{\\n\t\tBufferedReader buf = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString s = buf.readLine();\\n\t\tString p = buf.readLine();\\n\t\tString str1;\\n\\n\t\tstr1 = s+s;\\n\\n\t\tif(str1.contains(p) == true)\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\telse\\n\t\t\tSystem.out.println(\"No\");\\n\t\t\\n\t}\\n}", "target": "198", "substitutes": {"buf": ["br", "block", "Buff", "cur", "Buffer", "queue", "writer", "uf", "vec", "bc", "aer", "bf", "bh", "db", "bed", "cap", "bl", "bs", "buff", "front", "bp", "mu", "b", "rot", "req", "bag", "buffer", "fb", "rw", "bu", "ered", "reader", "cv", "mem", "nb", "pb", "bg", "bt", "tab", "bo", "priv", "cb", "ctx", "eng", "aux", "rb", "conv"], "s": ["q", "gs", "r", "sb", "l", "rs", "h", "ns", "sv", "sp", "n", "m", "v", "strings", "S", "ess", "ms", "ys", "str", "a", "b", "f", "sl", "ls", "u", "ies", "j", "string", "is", "ts", "sq", "i", "g", "ss", "c", "js", "ins", "e", "w", "t", "ps", "st"], "p": ["q", "r", "pt", "ping", "pm", "mp", "vp", "tp", "h", "sp", "cp", "n", "m", "v", "lp", "per", "P", "pp", "b", "f", "pro", "j", "pkg", "par", "pr", "pa", "i", "pi", "g", "pb", "np", "c", "jp", "ap", "t", "ps", "pc"], "str1": ["Str2", "str2", "STR2", "st3", " str0", "sone", "strp", " strL", "STR0", "sp", "stone", "s0", "st1", "Str1", "str3", " strp", "st0", "STR3", "str0", " strone", "STR1", "sp2", " str2", "spone", "s1", "strone", "st2", "strL", "Strone", "stp", "sp1", " str3", "spL", "StrL"]}}
{"code": "import java.util.Scanner;\\n//import java.util.Arrays;\\npublic class Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tString s = sc.next();\\n\t\tString t = sc.next();\\n\t\tSystem.out.println(s.charAt(0) == t.charAt(0) && t.replaceFirst(s, \"\").length() == 1 ? \"Yes\" : \"No\");\\n\t}\\n}\\n", "target": "137", "substitutes": {}}
{"code": "import java.util.Scanner;\\nimport java.lang.*;\\npublic class Main\\n{\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner input = new Scanner(System.in);\\n\t\tint sum;\\n\t\tString s;\\n\t\twhile (true)\\n\t\t{\\n\t\t\ts = input.nextLine();\\n\t\t\tif(s.length() == 1 && s.charAt(0) == '0')\\n\t\t\t\tbreak;\\n\t\t\telse\\n\t\t\t{\\n\t\t\t\tsum = 0;\\n\t\t\t\tfor(int i = 0; i < s.length(); i++)\\n\t\t\t\t{\\n\t\t\t\t\tsum += (int)(s.charAt(i)-'0');\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(sum);\\n\t\t\t}\\n\t\t}\\n\t}\\n}", "target": "144", "substitutes": {"input": ["active", "cur", "inf", "parse", "feed", "current", "system", "inc", "focus", "sin", "context", "control", "source", "in", "get", "start", "select", "list", "service", "analysis", "buffer", "io", "reader", "pattern", "parser", "sq", "text", "inner", " inputs", " Input", "inside", "output", "conf", "cin", "Input", "initial", "util", "config"], "sum": ["Sum", "num", "set", "loss", "result", "mm", "acc", "cal", "tu", "cos", "frac", "temp", "weight", "ums", "med", "total", "system", "zero", " SUM", "tmp", "n", "summary", "sa", "su", " summ", "mean", "ms", "cu", "union", "count", "index", "umm", "fac", "mem", "must", "sup", "um", "cum", "vol", "score", "mass", " summed", "ul", "sim", "hum", "max", "good", "out", "diff", "sam", "multi", "average", "add", "size", "si", "cost", "hash"], "s": ["gs", "sql", "sb", "l", "rs", "abs", "h", "ns", "sv", "strings", "simple", "source", "ws", "bs", "raw", "S", "os", "csv", "spec", "its", "bytes", "ms", "less", "ys", "ats", "str", "se", "b", "search", "sl", "es", "ls", "ims", "sts", "string", "is", "ts", "sq", "bits", " ts", "g", "ss", "js", "ins", "txt", "gets", "sample", "t", "qs", "y", "ps", "tes", "stats", "conv", "hs"], "i": ["sym", "I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "chain", "ip", "ji", "li", "o", "n", "v", "m", "ini", "err", "in", "ai", "ni", "ki", "im", "ind", "qi", "us", "init", "u", "\u0438", "io", "j", "bi", "it", "ui", "is", "uri", "ie", "pi", "inner", "ti", "ic", "ci", "sim", "my", "cli", "PI", "multi", "iter", "ami", "y", "ii", "xi", "si", "span", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint k = sc.nextInt(); //\u7dcf\u8ddd\u96e2\\n\t\tint n = sc.nextInt(); //n\u8ed2\\n\t\t\\n      \tint[] d = new int[n]; //\u683c\u5bb6\u306e\u8ddd\u96e2\u4ee3\u5165\\n\t\tfor(int i = 0;i < n; i++) {\\n\t\t\td[i] = sc.nextInt();\\n\t\t}\\n      \\n      \tint maxs =0;  //\u4e00\u756a\u8ddd\u96e2\u304c\u96e2\u308c\u3066\u3044\u308b\u4e8c\u8ed2\u306e\u8ddd\u96e2\\n      \tfor( int i = 1 ; i < n ; i++){\\n\t\t\tint value = d[i] - d[i-1];\\n\t\t\tif( maxs <= value ){\\n\t\t\t\tmaxs = value;\\n\t\t\t\t}\\n        }\\n        \\n      \tint last = k - d[n-1] + d[0];\\n       \tif( maxs <= last ){\\n\t\t\t\tmaxs = last;\\n\t\t\t\t}\\n      \\n\t\tint ans = 0;//\u6700\u77ed\u79fb\u52d5\u8ddd\u96e2\\n      \tans = k - maxs ;\\n     \\n\t\tSystem.out.println(ans);\\n\\n\t\tsc.close();\\n\t}\\n}", "target": "10", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "esc", "row", "sec", "ser", "sys", "cl", "system", "cr", "sv", "sp", "bc", "tk", "ec", "capt", "ko", "cle", "sch", "cam", "sw", "scan", "sq", "cs", "ss", "nc", "ok", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "sub"], "k": ["set", "q", "key", "ks", "v", "kr", "m", "dk", "km", "tk", "ko", "ket", "kn", "ak", "b", "ik", "j", "it", "lock", "ok", "sk", "max", "K", "w", "p", "ka", "kw", "kid"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\t\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tdouble n = sc.nextDouble();\\n\t\tdouble k = sc.nextDouble();\\n\t\t\\n\t\tdouble E = 0;\\n\t\tdouble q;\\n\t\tfor(double p = 1; p <= n; p++) {\\n\t\t\tdouble Ep = 1/n;\\n\t\t\tq = p;\\n\t\t\tif(p >= k) {\\n\t\t\t\tE += Ep;\\n\t\t\t}\\n\t\t\tif(p < k) {\\n\t\t\t\tdo{\\n\t\t\t\t\tq = q * 2;\\n\t\t\t\t\tEp = Ep / 2;\\n\t\t\t\t}while(q < k);\\n\t\t\t\t\\n\t\t\t\tE += Ep;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(E);\\n\\n\t}\\n\\n}\\n", "target": "20", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "dc", "ec", "ctl", "sch", "se", "sync", "tc", "scan", "sq", " Sc", "cs", "g", "ss", "nc", "c", "osc", "Sc", "gc", "ng", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "ch"], "n": ["nu", "mn", "num", "pn", "d", "ll", "nn", "l", "N", "gn", "o", "ns", "m", "v", "ne", "nl", "cn", "sn", "an", "j", "nb", "i", " N", "g", "na", "nc", "np", "en", "c", "ng", "s", "t", "ln", "nt"], "k": ["ke", "wk", "kil", "kl", "ks", "kh", "kr", "v", "dk", "km", "tk", "ck", "ko", "kn", "ak", "unk", "kar", "ki", "sch", "ik", "kk", "uk", "j", "mk", "ok", "sk", "ku", "ek", "K", "kt", "kj", "ka", "th", "kw", "kid"], "E": ["D", "I", "HE", "F", "ET", "EEEE", "CE", "RE", "N", "AE", "EF", "EM", "END", "Es", "O", "G", "ED", "P", "PE", "T", "EU", "Energy", "GE", "R", "Q", "EP", "ME", "EV", "V", "UE", "Event", "M", "Est", "ES", "C", "OE", "DE", "EO", "Y", "We", "L", "e", "K", "EA", "EB", "EEE", "IE", "EC", "EE"], "q": ["pt", "aq", "queue", "l", "requ", "ip", "qu", "point", "ep", "qa", "sh", "v", "cp", "eq", "tt", "pe", "pg", "Qu", "qual", "ck", "ql", "P", "pp", "Q", "qi", "req", "z", "qq", "j", "it", "pkg", "ue", "ve", "sq", "i", "g", "lock", "qt", "quit", "Query", "quant", "e", "ph", "ap", "t", "iq", "qs", "dq", "query", "ch"], "p": ["pn", "pt", "ping", "ar", "l", "pre", "ip", "part", "tp", "wp", "point", "o", "ep", "pl", "sp", "cp", "app", "v", "lp", "m", "pg", "pe", "per", "pair", "bp", "P", "pp", "pid", " P", "at", "a", "b", "art", "f", "pro", "pos", "pu", "j", "pkg", "it", "pers", "pr", "i", "pa", "g", "pi", "pb", "np", "port", "jp", "ph", "ap", "e", "t", "op", "y", "ps", "pc", "x"], "Ep": ["End", "Ey", "eps", "Pixel", " ep", "Alpha", "Delta", "Percent", "ep", "Incre", "Rap", "Exp", "Se", "Ped", "Sp", "Ec", "Es", "Op", " Ek", "P", "Me", "Ap", "EP", "Cl", "Event", "Tok", "Eth", "Ok", "IP", "Est", "Eng", "Ph", "It", "Len", "Total", "One", "Inst", "Offset", "Syn", "Episode", "Ex", "Net", "Exec", "Mp", "Bytes", "DP", "Equ", "Esc", "Sep", "El"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint x = sc.nextInt();\\n\t\tint [] list = new int [n + 1];\\n\t\tlist[0] = 0;\\n\\n\t\tfor(int i = 1; i <= n; i++) {\\n\t\t\tlist[i] = sc.nextInt();\\n\t\t\tlist[i] += list[i-1];\\n\t\t}\\n\t\tint ans = 0;\\n\t\tfor(int i = 0; i <= n; i++) {\\n\t\t\tif( list[i] <= x) ans++;\\n\t\t\telse break;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "130", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "co", "cl", "sys", "sh", "sv", "sp", "bc", "cr", "inc", "ck", "nl", "ctl", "capt", "cle", "sel", "sch", "sync", "fc", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "ng", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "psc", "ch", "desc"], "n": ["nu", "mn", "num", "name", "d", "nn", "l", "number", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "sn", "on", "an", "j", "no", "nb", "g", "pi", "nc", "na", "k", "np", "en", "c", "out", "ng", "t", "p", "network", "ln", "y", "net", "nt"], "x": ["ix", "ex", "wx", "ax", "l", "h", "v", "xf", "xy", "tx", "inx", "xe", "xx", "f", "xc", "z", "xa", "xes", "dx", "xxxx", "mx", "k", "xt", "max", "w", "X", "t", "rx", "p", "ux", "y", "xi", "xs", "xp", "ox"], "list": ["set", "dl", "num", "next", "array", "l", "number", "chain", "pre", "li", "tree", "v", "batch", "pair", "level", "item", "print", "show", "LIST", "lat", "val", "dict", "filter", "form", "back", "lists", "ist", "index", "sync", "load", "ls", "count", "view", "sequence", "code", "stack", "range", "type", "scan", "null", "sort", "listed", "status", "table", "link", "old", "out", "t", "def", "p", "add", "all", "size", "nt", "line", "st", "map"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "batch", "ai", "ms", "ki", "f", "is", "ic", "y", "di", "ri", "fi", "l", "chain", "ip", "ji", "id", "ij", "in", "ori", "io", "bi", "it", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "php", "cgi", "ion", "ni", "mu", "ind", "u", "\u0438", "pi", "yi", "xi", "si", "mi", "I", "gi", "iy", "m", "ini", "err", "by", "im", "qi", "us", "init", "j", "ity", "umi", "ui", "ie", "uri", "ti", "PI", "multi", "iter", "info", "to"], "ans": ["checks", "ents", "ons", "vals", "pan", "names", "outs", "flags", "ns", "ks", "ran", "orders", "os", "can", "ids", "lines", "ms", "arts", "ANS", "ats", "ens", "ants", "ls", "an", "ows", "ann", "scan", "is", " spans", "cs", "ones", "ins", "times", "cons", "as", "s", "actions", "ots", "xs", "ps", "rows", "span", "lan", "ars", " scans"]}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.Arrays;\\nimport java.io.Closeable;\\nimport java.io.IOException;\\nimport java.util.NoSuchElementException;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n *\\n * @author HBonsai\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        FastScanner in = new FastScanner(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        BCardGameForTwo solver = new BCardGameForTwo();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class BCardGameForTwo {\\n        public void solve(int testNumber, FastScanner in, PrintWriter out) {\\n            int N = in.nextInt();\\n            int[] a = in.nextIntArray(N);\\n            Arrays.sort(a);\\n            int alice = 0;\\n            int bob = 0;\\n            for (int i = N - 1; i >= 0; i -= 2) {\\n                alice += a[i];\\n            }\\n            for (int i = N - 2; i >= 0; i -= 2) {\\n                bob += a[i];\\n            }\\n            out.println(alice - bob);\\n        }\\n\\n    }\\n\\n    static class FastScanner implements Closeable {\\n        private final InputStream in;\\n        private final byte[] buffer = new byte[1024];\\n        private int ptr = 0;\\n        private int buflen = 0;\\n\\n        public FastScanner(InputStream in) {\\n            this.in = in;\\n        }\\n\\n        private boolean hasNextByte() {\\n            if (ptr < buflen) {\\n                return true;\\n            } else {\\n                ptr = 0;\\n                try {\\n                    buflen = in.read(buffer);\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n                if (buflen <= 0) {\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n\\n        private int readByte() {\\n            if (hasNextByte()) return buffer[ptr++];\\n            else return -1;\\n        }\\n\\n        private static boolean isPrintableChar(int c) {\\n            return 33 <= c && c <= 126;\\n        }\\n\\n        public boolean hasNext() {\\n            while (hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;\\n            return hasNextByte();\\n        }\\n\\n        public long nextLong() {\\n            if (!hasNext()) throw new NoSuchElementException();\\n            long n = 0;\\n            boolean minus = false;\\n            int b = readByte();\\n            if (b == '-') {\\n                minus = true;\\n                b = readByte();\\n            }\\n            if (b < '0' || '9' < b) {\\n                throw new NumberFormatException();\\n            }\\n            while (true) {\\n                if ('0' <= b && b <= '9') {\\n                    n *= 10;\\n                    n += b - '0';\\n                } else if (b == -1 || !isPrintableChar(b)) {\\n                    return minus ? -n : n;\\n                } else {\\n                    throw new NumberFormatException();\\n                }\\n                b = readByte();\\n            }\\n        }\\n\\n        public int nextInt() {\\n            long nl = nextLong();\\n            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();\\n            return (int) nl;\\n        }\\n\\n        public int[] nextIntArray(final int n) {\\n            final int[] res = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                res[i] = nextInt();\\n            }\\n            return res;\\n        }\\n\\n        public void close() {\\n            try {\\n                in.close();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n        }\\n\\n    }\\n}\\n\\n", "target": "132", "substitutes": {"inputStream": ["inputSocket", "outputFile", " inputSteam", "outputStreamer", "thisSocket", "inputSteam", "sourceSteam", " inputStreamer", "sourceStream", " inputstream", "inputstream", "sourcestream", "thisStream", "outputstream", "inputStreamer", "sourceStreamer", "sourceSocket", "inputFile", "thisFile", "outputSocket", "sourceFile", "thisSteam", "outputSteam"], "outputStream": ["outputStreamer", "writestream", "webSteam", "webStyle", "responseSteam", "outputStyle", "responseStream", "currentSteam", "displayStyle", " outputSteam", "currentStreamer", "currentstream", "displayStream", "webStream", "outputstream", "writeStream", "displaySteam", " outputStyle", "responseStreamer", "responsestream", "outputWriter", "displayWriter", "webWriter", "outputSteam", "currentStream", " outputWriter", "writeStreamer", "writeSteam"], "in": ["q", "r", "gin", "edIn", "bin", "from", "log", "context", "raw", "show", "ai", "on", "ssl", "din", "is", "thin", "ic", "ins", "conf", "as", "query", "window", "st", "inf", "current", "l", " din", "isin", "h", "o", "sin", "source", "doc", "IN", "state", "run", "client", "or", "form", "io", "win", "reader", "it", "stream", "inner", "table", "inside", "w", "local", "mc", "ex", "sol", "rt", "inc", "al", "file", "rin", "serv", "ind", "lin", "In", "nin", "ner", "input", "ma", "p", "add", "ain", "mi", "mm", "con", "m", "ini", "err", "pin", "inn", "get", "init", "null", "en", "check", "er", "cin", "iter", "t", "info", "up"], "out": ["set", "ou", "ex", "end", "outer", " Out", "flush", "l", "writer", "chain", "co", "log", "o", "sys", "server", "tmp", "conn", "v", "err", "this", "print", "OUT", "os", "sum", "can", "report", "write", "client", "user", "or", "at", "list", "io", "it", "aos", "Out", "null", "inner", "screen", "OU", "table", "obj", "output", "txt", "pool", "w", "gc", "t", "s", "p", "up", "net", "all", "to", "nt", "ch", "outs"], "solver": ["solved", "unsolve", " solved", "resolver", " solution", "soln", "Solve", " sorter", " solve", "resasser", "insolver", "insorter", " sasser", "resorter", " soln", "solve", "Solved", "insasser", "sasser", "solution", "Soln", "unsolver", "sorter", "unsolved", "Solver", "unsoln", "insolution", "resolution"], "testNumber": [" testNo", "TestNumber", "testNum", "Testnumber", "testnumber", " scenarioNumber", " scenarioNum", " testnumber", "TestNo", "testNo", " testNum", " scenarioNo", " scenarionumber", "TestNum"], "N": ["D", "I", "Z", "TN", "NM", "NUM", "SN", "NP", "NE", "NB", "NV", "O", "S", "Ni", "NG", "P", "NO", "R", "NS", "A", "Q", "NR", "V", "NH", "M", "MN", "GN", "NC", "H", "C", "Number", "NN", "NA", "Num", "L", "Y", "K", "NOR", "NOTE", "Note", "CNN", "NI", "NT", "B", "Ns"], "a": ["ae", "ata", "ca", "ava", "oa", "abs", "o", "ta", "m", "aa", "app", "sta", "sa", "sha", "ya", "A", "at", "an", "la", "ga", "ao", "ab", "ea", "apa", "area", "ba", "aaa", "na", "aka", "fa", "alpha", "w", "e", "ma", "as", "s", "p", "ac", "ana", "au", "all", "va", "am"], "alice": ["elence", "elicer", "elrice", " alrice", "ALicer", "elICE", "malouse", "calrice", "dalrice", "malice", "calouse", "dalICE", "alouse", "salouse", "alicer", "ALice", "salie", "malrice", "alICE", "calice", "elice", "dalicer", "calicer", "ALouse", "alence", "ALie", "dalouse", "alie", "salice", "dalice", "salicer", " alICE", "elie", "elouse", " alence", "dalence", "alrice", "malicer"], "bob": ["brorb", " bobb", "blod", "blobe", "blib", "blobb", "biob", "biod", "lumb", "lobb", "biumb", "hib", "borb", "brobe", "lob", " bumb", "bureau", "birob", "biobb", "Bobb", "Borb", "bobb", "lureau", "biureau", "hrob", "Bobe", "bib", "Bob", "bobe", "brobb", "blob", "blorb", "blrob", "hod", "biib", "bumb", " bureau", "bod", "brob", "hob"], "i": ["I", "ix", "ri", "phi", "gi", "zi", "hi", "iu", "ei", "iy", "chain", "ip", "ji", "cgi", "fi", "li", "o", "id", "ij", "me", "ini", "ai", "ki", "qi", "ori", "\u0438", "io", "j", "it", "ui", "uri", "is", "pi", "ti", "ic", "ci", "cli", "e", "multi", "s", "info", "p", "mac", "y", "oi", "xi", "ii", "si", "di", "x", "mi"], "buffer": ["block", "face", "result", "paste", "limit", "next", "row", "password", "Buffer", "queue", "temp", "base", "address", "device", "texture", "resource", "line", "read", "batch", "database", "buff", "file", "cache", "buf", "bone", "phrase", "pointer", "mem", "scroll", "sequence", "history", "frame", "stack", "reference", "document", "message", "template", "length", "screen", "table", "memory", "output", "iter", "p", "command", "header", "binary", "page", "bar", "library", "window"], "ptr": ["br", "addr", "seek", "offset", "pt", "ctr", "loc", "shift", "prime", "address", "tp", "point", "perm", "ref", "far", "pl", "sp", "dr", "tip", "tr", "Ptr", "pend", "pe", "bp", "push", "inters", "ind", "inter", "index", "pos", "req", "pointer", "pers", "trace", "cmd", "pr", "pi", "pad", "head", "rel", "rob", "jp", "iter", "p", "dep", "ctx", "expr", "ps", "pc", "depth", "adr", "proc", "pointers", "pert", "peer", "next", " pointer"], "buflen": ["bullength", " bullen", "buflatten", "bufrenn", "bullatten", "bufflen", " bullatten", "cuvlen", "bufrens", "bufleng", " bullenn", "buvlaren", " buflatten", "bufrength", "bulfen", "bullenn", " buflens", "bufflength", " buflend", "buvlenn", " bullength", "buplength", " buflength", "bullim", "cuvlaren", " bulleng", "buflaren", "bublim", "buplen", "cuvlens", " buflenn", "bufllen", "bullend", "bublen", "bulfatten", "bufllens", "buFlend", "buFlatten", " bullens", "cuflenn", " bufleng", "bufllim", "buFlen", "buklaren", "buplenn", "bullens", "buvlen", "cuflen", "cuvlenn", "buklenn", "buklens", "buFleng", "buplim", "buklen", "bulfeng", "cuflens", "bulleng", " bullend", "buflenn", "bufflim", "bufren", "bullen", "buflend", "bulfend", "buflim", "buvlens", "cuflaren", "bufraren", "bublength", "buplens", "buflength", "bufflens", "bufllength", "buflens", "bublens"], "c": ["arc", "uc", "lc", "cc", "d", "h", "v", "m", "ce", "unc", "dc", "cp", "ec", "cu", "code", "fc", "f", "u", "xc", "tc", "cd", "C", "cs", "vc", "k", "cm", "abc", "cod", "ic", "ci", "ct", "w", "e", "t", "x", "char", "p", "ac", "pc", "rc", "ch"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main{\\n\tpublic static void main(String[] args) throws IOException {\\n\t\ttry (BufferedReader br = new BufferedReader(\\n\t\t\t\tnew InputStreamReader(System.in))) {\\n\\n\t\t\tString in = br.readLine();\\n\t\t\tString chr[] = in.split(\"\");\\n\t\t\tint ans = 0;\\n\t\t\tfor(String a: chr) {\\n\t\t\t\tans +=(a.equals(\"+\")?1:-1);\\n\\n\t\t\t}\\n\t\t\t System.out.println(ans);\\n\t\t}\\n\t}\\n}", "target": "54", "substitutes": {"in": ["mn", "r", "gin", "d", "bin", "inf", "con", " din", "isin", "n", "ini", "err", "read", "default", "source", "raw", "doc", "inn", "rin", "sum", "IN", "lines", "user", "ind", "str", "form", "pass", "In", "world", "nin", "reader", "it", "din", "is", "i", "stream", "inner", "ins", "input", "std", "conf", "body", "out", "old", "check", "info", "cin", "ln", "ain", "readable", "line"], "chr": ["chet", "cht", "cherg", "achsr", "achro", "chro", "CHt", "chrg", " chero", " chrs", " chesr", " chro", "achrs", "chers", "CHrs", "chsr", " chrg", " chers", " chsr", "cher", "CHr", "achr", "CHrg", " cht", "chrs", " cher"], "ans": [" means", "acs", "ents", "uns", "ons", "eps", "ras", "pan", "anas", "aus", "anks", "san", "oss", "eds", "ads", "ks", "ians", "can", "yes", "ms", "ean", "arts", "ANS", "amps", "aned", "ats", "ens", "ants", "es", "ls", "an", "ows", "AN", "ays", "vs", "ams", "mas", " scans", "cs", "ins", "olds", "aps", "vers", "as", "cons", "anon", "xs", "rans", "lan", "offs", "ars", "ann"], "a": ["ae", "ata", "ca", "att", "l", "oa", "o", "v", "n", "aa", "sta", "sa", "sha", "wa", "ya", "A", "b", "an", "ga", "xa", "j", "ao", "pa", "ea", "area", "apa", "na", "aaa", "aka", "c", "e", "alpha", "p", "ac", "ana", "ka", "era", "va", "am"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t//List<String> list=new ArrayList<String>(Arrays.asList(s.split(\"\")));\\n\t\tList<Integer> list=new ArrayList<Integer>();\\n\t\t//Long[] array = new Long[6];\\n\t\tint n = sc.nextInt();\\n\t\tfor(int i=0;n>i;i++) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tlist.add(a);\\n\t\t}\\n\t\tint count=0;\\n\t\tfor(int i=0;n>i;i++) {\\n\t\t\tint a = list.get(i);\\n\t\t\tif(a!=0) {\\n\t\t\t\tcount++;\\n\t\t\t\tfor(int j=i;n>j;j++) {\\n\t\t\t\t\tint b = list.get(j);\\n\t\t\t\t\tif(b==0)\\n\t\t\t\t\t\tbreak;\\n\t\t\t\t\telse {\\n\t\t\t\t\t\tlist.set(j, b-1);\\n\t\t\t\t\t}\\n\t\t\t\t}\\n\t\t\t\t//System.out.println(list);\\n\t\t\t\ti=-1;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}", "target": "77", "substitutes": {"sc": [" SC", " scorer", "cl", "sys", "system", "sv", "sp", "cr", " scr", "sa", "tk", "nl", " sk", "sel", "se", "scan", " Sc", "cs", "ss", "na", "c", " rc", "sk", "Sc", "SC", "rc", "ch", " sp"]}}
{"code": "import java.io.*;\\nimport java.math.BigDecimal;\\nimport java.math.BigInteger;\\nimport java.text.ParseException;\\nimport java.util.*;\\n\\n\\npublic class Main {\\n\\n    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n    static StringTokenizer st;\\n    static StringBuilder sb = new StringBuilder(\"\");\\n\\n    static int[] inputArray(int n) throws IOException {\\n        int[] a = new int[n];\\n        st = new StringTokenizer(br.readLine());\\n        for(int i = 0 ; i < n ; i++) {\\n            a[i] = Integer.parseInt(st.nextToken());\\n        }\\n        return a;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer st;\\n        StringBuilder sb = new StringBuilder(\"\");\\n        st = new StringTokenizer(br.readLine());\\n        long a = Long.parseLong(st.nextToken());\\n        long b = Long.parseLong(st.nextToken());\\n        long c = Long.parseLong(st.nextToken());\\n        long d = Long.parseLong(st.nextToken());\\n        System.out.println(Math.max(Math.max(a*d , a*c) , Math.max(b*c , b*d)));\\n    }\\n\\n    static int gcd(int a , int b) {\\n        if(a % b == 0) {\\n            return b;\\n        }\\n        return gcd(b , a % b);\\n    }\\n\\n    static void longestGcdSeq(int a[] , int n) {\\n        int coprimes[] = new int[n];\\n        for(int i = 0 ; i < n ; i++) {\\n            if(a[i] < a[(i+1)%n]) {\\n                if(gcd(a[(i+1)%n] , a[i]) != 1) {\\n                    coprimes[i] = 1;\\n                }\\n            }\\n            else {\\n                if(gcd(a[i] , a[(i+1)%n]) != 1) {\\n                    coprimes[i] = 1;\\n                }\\n            }\\n        }\\n        //System.out.println(Arrays.toString(coprimes));\\n        int maxLen = 0 , startLen = 0 , endLen = 0;\\n        int i = 0;\\n        while(i < n && coprimes[i] == 1) {\\n            startLen++;\\n            i++;\\n        }\\n        i = n -1;\\n        while(i >= 0 && coprimes[i] == 1) {\\n            endLen++;\\n            i--;\\n        }\\n        int start = 0;\\n        for(i = 0 ; i < n ; i++) {\\n            if(coprimes[i] == 0) {\\n                maxLen = Math.max(maxLen , i - start);\\n                start = i + 1;\\n            }\\n        }\\n        maxLen = Math.max(maxLen , i - start);\\n        start = i + 1;\\n        //System.out.println(startLen + \" \" + maxLen + \" \" + endLen);\\n        int contMax = startLen == n ? n : Math.max(startLen + endLen , maxLen) + 1;\\n        //System.out.println(contMax);\\n        for(int k = 2 ; k <= n ; k++) {\\n            System.out.print((contMax-1)/(k-1) + \" \");\\n        }\\n        System.out.println();\\n    }\\n\\n}\\n/*\\n\\nif(tree.size == 2) {\\n\\n}\\n\\n5 8\\n5 1 2 4 3\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5\\n1 1000000000\\n1 1\\n1 500000000\\n\\n\\n */", "target": "244", "substitutes": {"br": ["ctr", "bro", "shr", "nav", "bsp", "abl", "vr", " Br", "bc", "cr", "ber", "kr", "dr", "bh", "tr", "bf", "bridge", "bl", "bs", "bn", "bp", "Br", "mr", "bj", "BR", "bd", "lr", "hr", "pr", "ab", "wr", "bt", "browser", "rel", "yr", "fr", "rb", "adr", "ch", "gr"], "st": ["set", "desc", "pt", "sy", "sth", "rt", "sh", "so", "sv", "sp", "usr", "rand", "rd", "sta", "tt", "sa", "stat", "ste", "nt", "St", "td", "stri", "sn", "sw", "ut", "str", "start", "ist", "se", "sm", "sl", " superst", "inst", "const", "ost", "sts", "sty", "ts", "cont", "est", "rest", "ss", "et", "ast", "irst", "bt", "std", "obj", "mt", "ct", "fr", "sam", "t", "nd", " est", "stable", "ft", "ld", "th", "net", "ust", "ST", "ly"], "sb": ["sbm", "sf", "sg", "sv", "sp", "zb", "lp", "gb", "bf", "sd", "bh", "sa", "db", "bs", "bn", "lb", "bp", "sn", "bj", "bd", "sm", "ssl", "ib", "nb", "Sn", "ss", "bg", "pb", "bt", "s", "bb", "SB", "rb"], "n": ["num", "nu", "r", "q", "name", "nn", "current", "l", "number", "un", "len", "after", "N", "o", "h", "ns", "nil", "m", "v", "ne", "nan", "in", "nl", "cn", "sn", "Count", "count", "f", "on", "note", "norm", "an", "z", "j", "it", "no", "ity", "nb", "div", "g", " N", "na", "k", "nc", "np", "en", "nm", "span", "normal", "w", "t", "s", "p", "network", "ln", "y", "net", "size", "all", "nt", "x", "names"], "a": ["r", "acc", "array", "ta", "ai", "f", "ga", "ao", "history", "data", "na", "e", "alpha", "as", "eas", "ac", "era", "y", "all", "va", "ata", "x", "am", "eta", "l", "o", "aa", "app", "sta", "ace", "sha", "foo", "ack", "z", "xa", "pa", "ea", "apa", "g", "ba", "aka", "s", "au", "ae", "result", "att", "ar", "qa", "al", "wa", "act", "ia", "u", "an", "la", "ach", "ma", "p", "ca", "aq", "oa", "abs", "v", "m", "da", "ad", "sa", "ya", "A", "at", "ab", "area", "aff", "aaa", "aj", "fa", "ap", "t", "aux"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "f", "field", "ims", "history", "complete", "is", "eu", "ic", "parent", "ami", "y", "oi", "all", "di", "x", "term", "ri", "chain", "ip", "ji", "point", "o", "id", "ij", "in", "client", "ori", "io", "bi", "it", "ci", "sim", "cli", "iq", "ii", "span", "ex", "phi", "hi", "remote", "this", "ind", "list", "u", "\u0438", "pi", "my", "iri", "xi", "si", "mi", "I", "name", "key", "gi", "iy", "v", "m", "ini", "err", "im", "qi", "index", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "port", "multi", "iter", "info"], "b": ["r", "wb", "beta", "ob", "l", "base", "o", "h", "bar", "bc", "v", "zb", "db", "gb", "m", "bf", "by", "bl", "bs", "lb", "amb", "bp", "A", "bd", "f", "eb", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "g", "ba", "bg", "bis", "e", "bo", "w", "t", "p", "bb", "cb", "y", "be", "rb", "x", "B"], "c": ["uc", "r", "lc", "ca", "col", "cc", "cur", "con", "cos", "l", "co", "cf", "cr", "bc", "m", "cp", "ce", "dc", "cn", "cu", "enc", "f", "tc", "z", "cat", "cd", "C", "cs", "g", "cm", "ci", "e", "ct", "t", "etc", "p", "ac", "cb", "rc", "ch"], "d": ["dh", "D", "r", "dec", "df", "l", "dd", "fd", "h", "id", "de", "v", "m", "da", "ad", "dc", "sd", "dn", "db", "dr", "td", "f", "bd", "u", "z", "dev", "cd", "data", "g", "done", "ds", "e", "w", "out", "ct", "t", "p", "dt", "di", "x", "dp"], "coprimes": [" copranges", "copcrime", "copprunes", "Coprime", "copcrunes", "Coprunes", "Coprides", "coperrimes", "coprtices", "copprizes", "coprectides", "copcranges", "copcrises", "Coperrizes", "Coperrunes", "coprectunes", "coperrime", "Coperrises", "copprimes", " copcrices", "coperrizes", "coprunes", "coprbanges", "copcrizes", "copprides", "Coprimes", "Coperrides", "copprises", " coprunes", "coprime", "Coprizes", "coprtanges", "coprtunes", "coprbimes", "coprbices", "Coperrimes", " coprices", "copprime", "coprises", "coprectimes", "coprectime", "copcrimes", " copcrimes", "Coperrime", "coperrises", "coprbunes", "coperrunes", "Coprises", " copcrunes", "copcrices", "coprizes", "copranges", "coprices", "coperrides", "coprides", "coprtimes", " copcranges"]}}
{"code": "import java.util.*;\\npublic class Main\\n{\\n  public static void main(String args[])\\n  {\\n    Scanner Sc=new Scanner(System.in);\\n    int n=Sc.nextInt();\\n    int[] arr=new int[n];\\n    for(int i=0;i<n-1;i++)\\n      arr[Sc.nextInt()-1]++;\\n    for(int i=0;i<n;i++)\\n      System.out.println(arr[i]);\\n  }\\n}\\n", "target": "12", "substitutes": {"Sc": ["Cat", "Con", "Capt", "Sys", "Sm", "Buff", "Sync", "Iter", "Sche", "Cont", "Cle", "Scan", "Gy", "Scroll", "Se", "Sp", "Col", "Can", "St", "Sh", "Desc", "Cl", "So", "Ch", "Luc", "Cor", "Crit", "sc", "Sel", "Vis", "NC", "Sn", "C", "Sk", "Sch", "Sl", "An", "Syn", "Cons", "GC", "Kit", "Ga", " sc", "Cro", "Sw", "Ser", "Tu", "SC", "Enc", "Mc", "Sem", "Esc", "Sec"], "n": ["nu", "mn", "num", "r", "q", "name", "d", "ll", "nn", "number", "l", "un", "len", "N", "o", "ns", "and", "m", "v", "ne", "nan", "nl", "cn", "sn", "a", "count", "f", "z", "j", "no", "nb", " N", "g", "nc", "na", "k", "np", "en", "c", "ct", "out", "w", "ng", "t", "p", "net", "all", "nt", "x"], "arr": ["br", "dat", "r", "elt", "av", "coll", "ray", "emb", "cal", "ax", "ear", "att", "array", "ar", "cur", "wav", "Array", "agg", "var", "sys", "pl", "vec", "gb", "alph", "bl", "pol", "attr", "Ar", "val", "dict", "enc", "hist", "ang", "img", "ack", "rot", "resh", "our", "repl", "par", "pr", "ab", "vol", "aaa", "arb", "good", "rel", "inv", "fr", "iq", "au", "bird", "ev", "res", "gr"], "i": ["q", "I", "ix", "ri", "key", "phi", "gi", "zi", "iu", "hi", "ei", "iy", "ip", "ji", "point", "li", "id", "v", "m", "ij", "me", "ini", "err", "this", "print", "ai", "ni", "ki", "client", "ger", "im", "ind", "qi", "ori", "us", "init", "u", "ies", "io", "ims", "\u0438", "j", "bi", "it", "ity", "ui", "ie", "is", "uri", "pi", "g", "eu", "ti", "ic", "ci", "sim", "yi", "cli", "my", "multi", "gu", "y", "xi", "ii", "si", "span", "di", "x", "mi"], "nextInt": ["NextInteger", "genInt", "genInteger", "genDouble", "randFloat", "nextFloat", "nextInteger", "NextLong", "nextShort", "randInteger", " nextFloat", " nextLong", "randInt", "randLong", "genShort", "newDouble", "newShort", " nextShort", "nextDouble", "newInteger", "NextInt", "newInt", " nextInteger", "NextFloat", " nextDouble", "nextLong"]}}
{"code": "import java.io.*;\\n \\nclass Main {\\n    public static void main(String[] args) {\\n        BufferedReader kb = new BufferedReader( new InputStreamReader( System.in ) );\\n        try {\\n            int n = Integer.parseInt( kb.readLine() );\\n\t\t\t\\n\t\t\tint[] nums = new int[n];\\n            int num, maxprofit, min;\\n            int i, j;\\n            \\n            maxprofit = 1-1000000000;\\n            min = Integer.parseInt( kb.readLine() );\\n            for( i=1; i<n; i++ ) {\\n            \tnum = Integer.parseInt( kb.readLine() );\\n\t\t\t\tmaxprofit = Math.max( maxprofit, num-min );\\n\t\t\t\tmin = Math.min( min, num );\\n            }\\n            \\n            System.out.println( maxprofit  );\\n             \\n            kb.close();\\n        } catch( IOException e ) {\\n            System.err.println( e );\\n        }\\n    }\\n}", "target": "208", "substitutes": {"kb": ["dl", "pd", "ke", "wk", "sb", "disk", "mb", "kl", "wp", "ks", "lp", "kr", "gb", "bf", "zb", "km", "kh", "tk", "bh", "vd", "ck", "md", "bp", "lb", "KB", "bj", "hd", "hz", "bd", "wd", "ib", "cmd", "bm", "nb", "mk", "kB", "k", "bg", "pb", "qt", "bt", "sk", "gc", "bb", "kt", "cb", "lf", "ka", "hm", "rb", "kw", "hs", "ief", "kid", "kg"], "n": ["mn", "r", "nu", "q", "d", "nn", "number", "un", "l", "N", "o", "ns", "conn", "m", "v", "ne", "nl", "cn", "sn", "count", "f", "z", "nb", " N", "g", "na", "nc", "k", "np", "en", "c", "ct", "ng", "t", "p", "ness", "net", "size", "nt", "names"], "nums": ["cumbers", "Numbers", "numbers", "cums", "nomes", " nomes", "Nums", "Nomes", " numbers", "comes", " nodes", "nodes", "Nodes", "codes"], "num": ["nu", "mn", "pn", "tim", "cal", "mom", "nn", "dim", "number", "temp", "un", "NUM", "uf", "o", "zero", "node", "m", "om", "nom", "alph", "nt", "sum", "val", "im", "mon", "note", "orig", "unit", "um", "no", "phys", "nb", "na", "np", "en", "sim", "Num", "nm", "max", "mult", "other", "sam", "t", "multi", "ng", "p", "nam", "mat", "x", "non"], "maxprofit": ["maxprice", "maxbenef", "MAXbenef", "Maxprofits", "axprice", "Maxprice", " maxprice", "spreadbenef", "axprofits", "MAXpro", "axprofit", "maxfit", "Maxpro", "MAXbenefit", "MAXprofits", "axbenef", "axfit", "spreadfit", "maxbenefit", "totalprofit", "minprofit", "minbenef", " maxbenef", " maxbenefit", "Maxprofit", " maxpro", "totalbenef", "maxpro", "spreadprofit", "minprofits", "minprice", "minpro", "axpro", "totalprice", "MAXprice", "totalbenefit", "maxprofits", " maxprofits", "minfit", " maxfit", "spreadprofits", "MAXprofit"], "min": ["mn", "lt", "don", "mins", "low", "mini", "loc", "margin", "pre", "sol", "len", "Min", "pl", "minute", "m", "sin", "emin", "ne", "in", "stat", "floor", "small", "mean", "le", "val", "lim", "start", "str", "minimum", "begin", "mel", "pos", "amin", "init", "sort", "lower", "left", "mit", "div", "partial", "mod", "mine", "rel", "none", "max", "step", "cmp", "diff", "local", "MIN", "average", "sam", "recomm", "add", "down", "mis", "aug", "minus", "mi", "just", "st", "sub"], "i": ["I", "ix", "q", "phi", "gi", "zi", "iu", "ip", "li", "id", "asi", "v", "m", "ij", "ini", "me", "in", "ai", "im", "ind", "qi", "a", "b", "index", "f", "u", "z", "bi", "it", "ui", "is", "ie", "pi", "k", "ti", "ci", "sim", "my", "multi", "t", "iq", "p", "info", "y", "ii", "xi", "si", "di", "x", "mi"], "j": ["q", "jit", "l", "ji", "jj", "v", "ij", "m", "jump", "ja", "b", "f", "z", "bi", "g", "k", "json", "js", "aj", "obj", "jp", "J", "t", "p", "kj", "jc", "ii", "x"]}}
{"code": "import java.util.*;\\npublic class Main{\\n    public static void main(String args[]){\\n        Scanner scanner = new Scanner(System.in);\\n\\n        String S = scanner.nextLine();\\n        String A = new String(\"2018\");\\n\\n        A = A.concat(S.substring(4));\\n        System.out.println(A);\\n        }\\n}", "target": "18", "substitutes": {"scanner": ["canener", "Scanator", " scanener", "rowning", "scer", "rower", "scanener", "rowener", "Scanener", "Scaner", "rowner", "scator", "scner", "Scanning", "canning", "scanator", " scanator", "scener", "Scanner", "canner", "scanning", "scaner", " scaner", "caner"], "S": ["Z", "I", "Screen", "CS", "SN", "N", "TS", "SM", "JS", "SQL", "SA", "G", "SE", "P", "T", "SU", "V", "Si", "US", "SL", "IS", "H", "C", "Source", " s", "WS", "L", "SS", "GS", "SER", "s", "DS", "SB", "Input", "B"], "A": ["AA", "I", "Array", "MA", "AU", "Alpha", "CA", "AY", "AE", "AC", "HA", "Av", "As", "SA", "P", "IA", "a", "GA", "LA", "JA", "M", "AH", "TA", "This", "AN", "What", "Ant", "AL", "Ah", "H", "AV", "AP", "ACC", "AM", "C", "AGE", "AAA", "An", "AB", "NA", "J", "AD", "BA", "AF", "ESS", "ACT", "PA", "B", "AT"]}}
{"code": "import java.io.*;\\nimport java.math.*;\\nimport java.util.*;\\n\\n\\n\\n\\n\\npublic class Main {\\n\\n    static MyScanner in = new MyScanner();\\n    static   PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\\n    int N;\\n    static int max = 200001;\\n    static int [] dr = {1,-1,0,0};\\n    static int [] dc={0,0,-1,1};\\n    static boolean [][] grid;\\n    static int [] bishopr = {-1,1,-1,1};\\n    static int [] bishopc = {1,1,-1,-1};\\n    static long H,W,cnt;\\n    static HashMap<String,Integer> map = new HashMap<>();\\n    public static void main(String args[]) throws IOException {\\n        int N = in.nextInt();\\n        map.put(\"AC\", 0);\\n        map.put(\"WA\", 0);\\n        map.put(\"TLE\", 0);\\n        map.put(\"RE\", 0);\\n        while(N-->0){\\n            String n= in.next();\\n            if(map.containsKey(n))\\n                map.replace(n, map.get(n)+1);\\n            \\n        }\\n        out.println(\"AC x \"+map.get(\"AC\"));\\n        out.println(\"WA x \"+map.get(\"WA\"));\\n        out.println(\"TLE x \"+map.get(\"TLE\"));\\n        out.println(\"RE x \"+map.get(\"RE\"));\\n        out.flush();\\n        }\\n       static boolean isValid (int r, int c){\\n           if(r>=0&&r<H&&c>=0&&c<W){\\n               return true;\\n           }\\n           return false;\\n       }\\n        private static void dfs(int r, int c) {\\n            for(int i=0;i<4;i++){\\n                int nr = bishopr[i] +r;\\n                int nc = bishopc[i]+c;\\n                if(isValid(nr, nc)&&!grid[nr][nc]){\\n                    cnt++;\\n                    grid[nr][nc] = true;\\n                    dfs(nr, nc);\\n                }\\n            }\\n        }\\n\\n        static boolean isEven(long a) {\\n            return (a&1)==0;\\n        }\\n       static  void swap (int a, int b){\\n\\n        int temmp = b;\\n        b=a;\\n        a = temmp;\\n        }\\n    \\n\\n    public static class MyScanner {\\n        BufferedReader br;\\n        StringTokenizer st;\\n   \\n        public MyScanner() {\\n           br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n   \\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n   \\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n   \\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n   \\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n   \\n        String nextLine(){\\n            String str = \"\";\\n        try {\\n           str = br.readLine();\\n        } catch (IOException e) {\\n           e.printStackTrace();\\n        }\\n        return str;\\n        }\\n  \\n     }\\n}", "target": "160", "substitutes": {"in": ["mm", "gin", "bin", "inf", "ar", "con", "l", " din", "h", "inc", "m", "v", "ini", "doc", "inn", "file", "this", "IN", "get", "serv", "ind", "at", "f", "on", "In", "ssl", "reader", "it", "scan", "din", "is", "ner", "inner", "k", "ins", "input", "conf", "er", "cin", "p", "info", "iter", "line", "mi"], "out": ["set", "println", "ou", "result", "name", "ex", "d", "flush", "con", "error", "writer", "co", "o", "log", "sys", "v", "conn", "ch", "m", "err", "OU", "print", "OUT", "file", " os", "os", "sum", "write", "serv", "client", "user", "cache", "at", "ut", "list", "conv", "on", "io", "it", "aos", "Out", "cmd", "screen", "table", "en", "obj", "output", "input", "conf", "format", "w", "pool", "t", "info", "p", "pretty", "dir", "op", "re", "to", "over", "res", "outs", "window"], "N": ["D", "I", "Z", "Node", "F", "E", "NM", "NUM", "SN", "NP", "NB", "Size", "NV", "O", "G", "S", "P", "T", "NO", "NL", "R", "NS", "A", "Q", "NF", "NR", "V", "M", "NC", "C", "Number", "Num", "Y", "L", "NA", "K", "J", "X", "NN", "NT", "B", "Ns"], "max": [" MAX", "ax", "base", "prime", "total", "h", "ref", "start", "auto", "cache", "scale", "min", "count", "mem", " Max", "range", "mx", "k", "conf", "w", "Max", "MAX", "size", "res", "height", "window"], "dr": ["rr", "dl", "dd", "vr", "cr", "rid", "drm", "rd", "tr", "du", "mr", "lr", "wd", "ir", "hr", "rer", "DR", "ds", "fr", "der", "dir", "dq", "dj", "dt", "adr", "di", "dp"], "dc": ["dl", "ca", "lc", "cc", "d", "df", "dd", "de", "bc", "cr", "cp", "da", "dk", "ec", "fc", "bd", "tc", "cd", "disc", "cm", "ci", "ds", "gc", "mc", "pc", "dt", "di", "dp"], "grid": ["block", "addr", "card", "group", "work", "row", "chain", "bar", "prefix", "stock", "windows", "rank", "square", "cell", "clear", "lat", "tile", "coord", "client", "lay", "cache", "hold", "secure", "match", "sort", "ssl", "tc", "share", "pipe", "stack", "register", "gm", "status", "window", "Grid", "domain", "manager", "guard", "table", "raid", "gc", "box", "dq", "rule", "query", "gray", "split", "util", "border"], "bishopr": ["bishopn", "mondh", "rotn", "masterr", "bishopd", "adelnr", "bishopnr", "bolth", "houndnr", "masterd", "boltw", "mondd", "houndr", "rotnr", "boltr", "adelc", "adeln", "houndc", "masterw", "rotc", "boltd", "rotr", "mondw", "masterh", "bishopw", "bishoph", "adelr", "mondr", "houndn"], "bishopc": ["boltc", "bishopn", "ishopc", "ishopl", "castlec", "bishopl", "chardl", "ishopn", "ishopch", "chardc", "boltch", "motherl", "ishopb", "boltl", "motherc", "boltb", "chardb", "bishopb", "ishopr", "motherr", "castlel", "chardch", "castlen", "castler", "bishopch", "mothern"], "H": ["D", "HE", "HR", "MH", "E", "HL", "h", "AC", "HA", "SH", "G", "HS", "S", "WH", "P", "He", "T", "HH", "HT", "R", "A", "Q", "V", "M", "RH", "CH", "HO", "C", "HI", "U", "TH", "Y", "L", "K", "X", "OH", "HB"], "W": ["WB", "F", "WM", "BW", "Win", "WA", "WC", "Wa", "CW", "WT", "MW", "G", "SW", "WH", "T", "EW", "WE", "HT", "R", "VW", "V", "M", "WP", "WW", "Wh", "C", "TW", "WS", "L", "We", "w", "X", "WI", "WR", "DW"], "cnt": ["acnt", "lccount", "dcct", "CNT", "dcnt", "cNT", "acNT", "lcnn", " cNT", " cnn", "lcct", "lcnt", "cct", "Cct", " cCount", "CCount", "cnn", "acCount", "cCount", "Cnt", "dccount", "ccount", " ccount", "dcnn", "acct", " cct"], "map": ["set", "block", "group", "mask", "array", "make", "cap", "mg", "scale", "shape", "order", "open", "manager", "store", "pool", "window", "parse", "ip", "app", "cast", "form", "code", "view", "match", "apper", "lock", "event", "table", "ape", "one", "forge", "link", "use", "local", "copy", "place", "tree", "print", "dict", "cache", "list", "sm", "mem", "maps", "delay", "add", "pack", "hash", "addr", "mm", "master", "address", "node", "module", "m", "cp", "export", "process", "filter", "sum", "where", "load", "MAP", "en", "mt", "ap", "up", "rule", "policy"], "n": ["nu", "mn", "pn", "name", "key", "ll", "nn", "el", "l", "o", "gn", "ns", "node", "m", "v", "dn", "nan", "ne", "nl", "cn", "ren", "sn", "note", "an", "z", "j", "sen", "natural", "g", "na", "fn", "k", "en", "nw", "none", "nm", "local", "t", "s", "p", "nor", "ln", "y", "net", "nt", "x", "names", "next"], "r": ["rr", "q", "reg", "rh", "ri", "d", "rar", "ar", "l", "ur", "rt", "h", "usr", "cr", "m", "rd", "tr", "err", "v", "ro", "mr", "R", "res", "ru", "ry", "rw", "u", "hr", "pr", " R", "ner", "w", "fr", "er", "t", "p", "rx", "sr", "re", "rc", "rb", "ra", "x", "gr"], "c": ["lc", "ca", "col", "cc", "cut", "d", "coll", "ar", "con", "cos", "l", "sec", "co", "h", "o", "cf", "cr", "bc", "cp", "ce", "m", "v", "ec", "cell", "cu", "cache", "f", "fc", "u", "tc", "z", "cat", "sc", "C", "cs", "g", "cum", "ci", "com", "conf", "ct", "w", "gc", "t", "cin", "p", "x", "ac", "cb", "y", "mc", "rc", "pc", "ch"], "i": ["set", "I", "ix", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "ji", "li", "o", "m", "v", "me", "ini", "ij", "batch", "ai", "ki", "qi", "index", "us", "init", "\u0438", "j", "bi", "it", "slice", "ui", "is", "ie", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "exp", "iq", "info", "ami", "y", "oi", "ii", "xi", "si", "di", "x", "mi"], "nr": ["usc", "rr", "nu", "nn", "nar", "sys", "ns", "usr", "kr", "tr", "ne", " ni", "nl", "eric", "nz", "ni", "mr", "sn", "NR", "nir", "hr", "nb", "ner", "wr", "nv", "rn", "np", "aaa", "nw", "tn", "nm", "obj", "yr", "ng", "iter", "ny", "nor", "nie", "adr", "cus", "sr", "gr", "byter"], "nc": ["nu", "mn", "pn", "lc", "cc", "nn", "co", "ns", "bc", "inc", "unc", "ne", "nl", "cn", "nz", "ni", "cu", "sn", "fc", "xc", "tc", "cv", "nb", "NC", "nic", "rn", "nv", "np", "ci", "nw", "ct", "gc", "ng", "nd", "nor", "ln", "mc", "pc", "nt"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main {\\n  public static void main(String[] args) throws Exception {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    int M = sc.nextInt();\\n    int resultEven =0;\\n    int resultOdd=0;\\n    if(N>1){\\n      resultEven=nCr(N,2);\\n    }\\n    if(M>1){\\n      resultOdd=nCr(M,2);\\n    }\\n    \\n    int result=resultEven+resultOdd;\\n    \\n    \\n    System.out.println(result);\\n  }\\n  static int nCr(int n, int r) \\n{ \\n    return (n*(n-1))/2;\\n} \\n  \\n// Returns factorial of n \\n \\n}\\n", "target": "49", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "bc", "sv", "cr", "sp", "ck", "ctl", "capt", "cle", "spec", "sch", "sw", "sm", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "asc", "scl", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "N": ["D", "TN", "FN", "ND", "NM", "NUM", "SN", "ALL", "NPR", "NE", "NP", "NB", "EN", "O", "S", "ON", "NO", "NL", "R", "NS", "NR", "NAME", "ANY", "NH", "AN", "MN", "NW", "GN", "NC", "C", "UN", "NA", "L", "TON", "NOR", "CN", "CNN", "NN", "NT", "Ns"], "M": ["D", "F", "MA", "CM", "MK", "MH", "MR", "NM", "RE", "MF", "SM", "m", "MS", "EM", "O", "MM", "JM", "S", "P", "REM", "RM", "DM", "R", "MAC", "MAN", "ME", "V", "MD", "MP", "MN", "H", "PM", "MC", "C", "AM", "FM", "MU", "LM", "MI", "IM", "L", "TM", "J", "MX", "MT", "B", "OM"], "resultEven": ["reportEven", " resultEqu", "reporteven", "resultFair", " resultZen", "answerEven", "resultZen", "resultEqu", "returnEven", "replaceEven", " resulteven", "answereven", "answerZen", "currencyEqu", "currencyFair", "ResultEven", " resultFair", "replaceFair", "currencyEven", "returneven", "Resulteven", "returnZen", "replaceEqu", "resulteven"], "resultOdd": ["resultOEdds", "resultOEds", "resultEdds", "resultUdds", "ResultUDD", "resultUmm", "ResultOodd", "resultUdd", " resultUdds", "ResultOdd", "resultEDD", "resultIdds", " resultIdd", "resultUds", " resultOmm", " resultIdds", "resultNd", "resultIDD", "ResultOd", "resultOEdd", " resultOds", "resultImm", "resultNDD", "resultOodd", " resultIDD", "resultIdd", "resultNodd", "resultOEDD", "resultUd", " resultOdds", "resultOd", " resultUDD", "ResultUdd", " resultUdd", "resultODD", "resultOdds", "resultOds", " resultImm", "resultEmm", "resultNdd", "resultEdd", " resultUds", "resultOmm", "ResultUodd", " resultODD", "ResultUd", "ResultODD", "resultEds", "resultUodd", "resultUDD"], "result": ["valid", "response", "description", "name", "direction", "number", "draw", "red", "Result", "total", "value", "su", "relation", "transform", "power", "report", "ret", "count", "search", "comb", "currency", "correct", "test", "results", "complete", "div", "data", "success", "length", "table", "output", "answer", "diff", "integer", "def", "successful", "division", "res", "function"], "n": ["nu", "num", "mn", "d", "nn", "l", "nr", "number", "o", "h", "ns", "m", "v", "ne", "cn", "a", "b", "on", "z", "j", "nb", "i", "g", "na", "nc", "k", "rn", "np", "en", "c", "nm", "w", "out", "t", "p", "size", "nt", "x"], "r": ["br", "ri", "row", "ar", "rs", "nr", "cr", "m", "rand", "err", "mr", "or", "R", "ry", "ror", "range", "j", "i", "ptr", "rn", "c", "w", "er", "t", "p", "re", "rc", "res"]}}
{"code": "import java.io.*;\\npublic class Main {\\n\tpublic static void main (String[] args) throws IOException{\\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString line = reader.readLine();\\n\t\tString side[] = line.split(\" \");\\n\t\tint x = Integer.parseInt(side[0]);\\n\t\tint y = Integer.parseInt(side[1]);\t\\n\t\tint area = x * y;\\n\t\tint cir  = 2 * (x + y); \\n\t\tSystem.out.println(area + \" \" +cir);\\n\t}\\n}", "target": "92", "substitutes": {"reader": ["loader", "rr", "radio", "r", "hog", "cur", "row", "rar", "iper", "writer", "dd", "builder", "red", "http", "Larry", "reading", "console", "read", "ro", "handler", "mr", "client", "random", "Reader", "runner", "rot", "buffer", "io", "range", "parser", "stream", "rl", "inner", "ner", "anger", "iterator", "ipper", "older", "er", "rx", "upper", "rc"], "line": ["block", "Line", "edge", "row", "inline", "l", "entry", "point", "log", "stroke", "source", "in", "ne", "nl", "detail", "cell", "le", "lines", "lin", "se", "shell", "sequence", "frame", "string", "message", "LINE", "text", "record", "eline", "sample", "liner", "out", "ln", "header", "page", "ide", "ine"], "side": ["set", "shake", "offset", "sid", "row", "half", "dim", "part", "len", "around", "id", "day", "pair", "sided", " Side", "center", "section", "ade", "tie", "photo", "scale", "south", "axis", "shell", "Side", "radius", "space", "order", "length", "join", "store", "one", "sample", "des", "style", "reverse", "handle", "dir", "plane", "ide", "size", "span", "split", "time", "ord"], "x": ["ix", "fx", "ex", "wx", "ax", "l", "ox", "yx", "m", "xf", "lat", "xy", "width", "tx", "lon", "xx", "xe", "f", "on", "px", "xc", "z", "xa", "left", "dx", "i", "xt", "mx", "xd", "angle", "w", "X", "rx", "p", "xi", "xs", "xp", "ty"], "y": ["ye", "sy", "ym", "iy", "o", "yl", "py", "m", "gy", "ky", "asy", "ch", "hy", "top", "ay", "ey", "uy", "cy", "xy", "fy", "ys", "ya", "a", "b", "yer", "ry", "yy", "ies", "dy", "z", "yt", "vy", "i", "oy", "Y", "yi", "wy", "t", "ny", "p", "iny", "ly", "ty", "ery"], "area": ["va", "ova", "raction", "ra", "base", "oa", "total", "sea", " areas", "amount", "zero", "aa", "floor", "asma", "a", "la", "near", "asia", "radius", "space", "shadow", "ola", "alias", "rea", "auc", "apa", "aria", "zone", "aze", "ea", "aka", "ada", "angle", "ma", "average", "Area", "era", "au", "volume", "orage", "division", "ata", "ox", "ancy", "ema"], "cir": ["ciro", "vir", " circ", "cira", " cira", " ciral", "pcrir", "pciro", "Ciral", " crib", "circ", " ciro", "pcir", "Crir", "Ciro", " crir", "crir", "Cir", "vrib", "pciral", "carib", "caira", "ciral", "cairc", "virc", "crib", "vira", "cair"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        boolean hasNextInt = scanner.hasNextInt();\\n        int x = scanner.nextInt();\\n        if(hasNextInt) {\\n            while(x > 0) {\\n                if(x % 10 == 7) {\\n                    System.out.println(\"Yes\");\\n                    break;\\n                } else {\\n                    x /= 10;\\n                }\\n                if(x == 0) {\\n                    System.out.println(\"No\");\\n                }\\n            }\\n        }\\n        scanner.close();\\n    }\\n}", "target": "99", "substitutes": {"scanner": ["canener", "Scanator", " scanener", "Scanter", "scanener", "Scanener", "Scaner", "scanifier", "Scanifier", "canator", "scanter", "scanator", "canter", " scanter", " scanator", "canifier", "Scanner", "canner", "scaner", " scaner", "caner", " scanifier"], "hasNextInt": ["hasPreviousInt", "hasNewInteger", "hadNextExt", " hasPreviousFloat", "hasnextInt", "hasPrevExt", "hadPreviousExt", "hasPrevInt", "hasnextExt", "hasPrevint", "hadPreviousint", "hasnextString", "hasNewInt", "hasNewExt", "hasPreviousInst", "hasNextInst", "HasNextInt", "hasNextString", "hasLastInt", "hadNextInt", "hasPreviousExt", "hasNewString", " hasPreviousInt", "hasNextFloat", " hasPreviousInteger", "HasNextFloat", "HasnextExt", "hasPreviousString", "hasPreviousFloat", "hasPreviousInteger", " hasNextInst", "hasNextExt", "hasNewInst", "hadNextint", "hasnextFloat", "HasnextString", "hasPreviousint", "hadPreviousInt", "hasLastInteger", "hasnextint", "hasNextint", "hasLastFloat", " hasPreviousInst", "HasnextInt", "hasLastInst", " hasNextFloat", " hasNextInteger", "hasNewFloat", "HasnextFloat", "HasNextString", "hasNextInteger", "HasNextExt"], "x": ["ix", "ex", "wx", "xb", "ax", "ox", "l", "h", "\u00e7", "n", "v", "batch", "change", "xf", "lat", "xy", "any", "tx", "inx", "xe", "xx", "index", "f", "on", "px", "u", "xc", "z", "history", "hex", "xa", "j", "dx", "i", "lex", "xxxxxxxx", "g", "mx", "xt", "xxx", "xd", "ct", "w", "X", "t", "exp", "rx", "p", "ctx", "xi", "xs", "xp", "fx"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\tString str;\\n\t\tString[] arrStr;\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\ttry {\\n\\n\t\t\tfinal String sharp = \"#\";\\n\\n\t\t\twhile (true) {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t\tarrStr = str.split(\" \");\\n\\n\t\t\t\tint h = Integer.parseInt(arrStr[0]);\\n\t\t\t\tint w = Integer.parseInt(arrStr[1]);\\n\t\t\t\tif(h == 0 && w == 0){\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t\t\tfor (int i = 0; i<h; i++) {\\n\t\t\t\t\tfor (int j = 0; j < w; j++) {\\n\t\t\t\t\t\tsb.append(sharp);\\n\t\t\t\t\t}\\n\t\t\t\t\tsb.append(\"\\n\");\\n\t\t\t\t}\\n\t\t\t\tSystem.out.println(sb.toString());\\n\t\t\t\tsb.setLength(0);\\n\t\t\t}\\n\\n\t\t} catch (IOException e) {\\n\t\t\te.printStackTrace();\\n\t\t}\\n\t}\\n}", "target": "87", "substitutes": {"br": ["bro", "shr", "bsp", "vr", "cr", "bc", "ber", "kr", "dr", "bh", "tr", "db", "bridge", "bl", "bs", "bn", "bp", "Br", "mr", "buf", "BR", "b", "eb", "bd", "lr", "hr", "bi", "bm", "pr", "wr", "bt", "yr", "fr", "er", "bb", "cb", "rb", "gr"], "str": ["dat", "r", " cr", "ctr", "STR", "pt", " ptr", " fr", " wr", "parse", " err", " sr", " STR", "del", "cr", "sp", "dr", " scr", " res", "tr", "msg", " arr", "comm", " gr", "print", " tr", " cur", " ch", "inst", " st", "arr", " ostr", "gr", "string", "sts", "Str", "div", "pr", "cont", "text", "status", "vol", "wr", " s", " spr", " Str", "obj", " dr", "txt", "bo", "fr", "exp", "s", "char", "stable", "ev", "res", " sp", "st"], "arrStr": ["stockInt", "strRes", "arrayStr", "arraySt", "raySt", "raystr", "arrSt", "arrInt", "stockStr", "objInt", " arrObj", "arrRes", "strStr", "rayStr", " arrRel", "instObj", "stockObj", "arrayRes", "arrayRel", "arrstr", " arrRes", "stockSt", " arrInt", "objObj", "rayRel", " arrstr", "arrayObj", "objstr", "strSt", "strstr", "inststr", "instStr", "arrRel", " arrSt", "arraystr", "objStr", "arrObj", "arrayInt", "instInt"], "sb": ["sbm", "xb", "esc", "sf", "wb", "mb", "sg", "ob", "sth", "orb", "bsp", "sp", "zb", "lp", "gb", "bh", "bf", "soc", "sa", "stab", "db", "bs", "buff", "bp", "lb", "ibl", "sn", "ub", "sw", "gob", "bj", "b", "shell", "eb", "ssl", "fb", "ctrl", "sub", "si", "ib", "nb", "sq", "bg", "pb", "bt", "bis", "rob", "kb", "gc", "bb", "cb", "SB", "rb", "erb", "split", "abb"], "sharp": ["lead", "white", "pen", "pick", "shift", "sil", "ser", "light", "sh", "sv", "bold", "sensitive", "Sharp", "yellow", "ash", "spe", "png", "sie", "eric", "series", "spec", "stri", "tick", "strike", "smith", "pattern", "sc", "clus", "sq", "rist", "ssh", "chip", "style", "sword", "arrow", "strength", "shock", "ps", "si", "title", "res"], "h": ["dh", "he", "ho", "rh", "phi", "hi", "hl", "l", "hp", "his", "sh", "kh", "m", "bh", "oh", "high", "hh", "ih", "HH", "im", "zh", "hz", "hd", "b", "ht", "hw", "history", "hex", "hr", "H", "html", " H", "ph", "hei", "ha", "hm", "th", "hs", "height", "ah", "hash"], "w": ["wall", "wcs", "wx", "d", "wl", "wb", "wt", "l", "weight", "wp", "n", "v", "ew", "m", "word", "aw", "rew", "wi", "ws", "iw", "wa", "width", "wal", "ow", "sw", "wid", "b", "rw", "wd", "W", "win", "hw", "z", "words", "wr", "nw", "wh", "p", "we", "fw", "ln", "kw", "x", "window"], "i": ["q", "ix", "ri", "phi", "gi", "zi", "iu", "ip", "ji", "li", "o", "id", "ij", "me", "ini", "ni", "ki", "ret", "im", "ind", "ori", "inter", "init", "u", "bi", "it", "ui", "ie", "is", "pi", "inner", "ic", "ci", "multi", "info", "iq", "ami", "xi", "ii", "si", "di", "x", "mi"], "j": ["q", "jl", "ji", "jj", "jo", "py", "ij", "m", "son", "err", "jump", "jas", "ne", "ge", "ja", "bj", "b", "oj", "job", "z", "bi", "it", "no", "ie", "pr", "uj", "g", "json", "k", "js", "obj", "aj", "jp", "J", "out", "fr", "ph", "kj", "y", "jc", "je", "dj", "next"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String a[]){\t\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\twhile(scanner.hasNext()){\\n\t\t\tint b = scanner.nextInt();\\n\t\t\tint c = scanner.nextInt();\\n\t\t\tint s = b+c;\\n\t\t\tint d = 0;\\n\t\t\twhile(s!=0){\\n\t\t\t\ts = s/10;\\n\t\t\t\td++;\\n\t\t\t}\\n\t\t\tSystem.out.println(d);\\n\t\t}\\n\t\tscanner.close();\\n\t}\\n}\\n\\n", "target": "176", "substitutes": {"a": ["set", "l", "value", "n", "v", "m", "sa", "parts", "val", "types", "str", "A", " A", "string", "data", "area", "input", "e", "w", "t", "p", "y"], "scanner": ["canener", "corner", "canrator", "stanazer", "stanrator", "Scanator", "reachter", "corter", " scanener", "scanmaker", "canazer", "scanazer", "caninner", "reachrator", "Scanter", "scanener", "Scanener", "reachmaker", "corning", "Scaner", "canator", "scaninner", "reachner", "reachazer", "Scanning", "canning", "reachinner", "canmaker", "scanter", "scanator", "canter", " scanter", "corener", " scanator", "Scanner", " scaninner", "stanter", "stanner", "canner", "scanning", "scaner", " scaner", "scanrator", "caner", " scanmaker"], "b": ["br", "r", "wb", "sb", "ob", "mb", "h", "bc", "v", "n", "bf", "db", "gb", "by", "bs", "bp", "eb", "f", "u", "fb", "j", "bi", "ib", "nb", "ab", "i", "ba", "bis", "bb", "cb", "y", "be", "rb", "x", "B"], "c": ["r", "ca", "lc", "cc", "l", "co", "cf", "cr", "n", "m", "v", "unc", "ce", "dc", "cp", "ec", "cu", "f", "fc", "u", "tc", "z", "cat", "cd", "sc", "C", "cs", "cm", "cod", "ci", "e", "ct", "t", "ac", "cb", "ch"], "s": ["q", "gs", "sb", "rs", "sol", "abs", "h", "eds", "ns", "sh", "sv", "n", "m", "sd", "bs", "S", "ms", "ids", "its", "less", "ys", "ats", "str", "south", "se", "fs", "sl", "ls", "z", "sts", "string", "sc", "is", "ts", "sq", "i", "cs", "g", "ss", "js", "ds", "des", "t", "p", "ps", "xs", "si", "st"], "d": ["D", "pd", "r", "result", "dm", "dot", "dim", "dd", "draw", "fd", "gd", "de", "id", "n", "m", "dr", "da", "sd", "db", "ad", "md", "td", "dig", "ind", "bd", "dist", "j", "cd", "dx", "with", "div", "data", "ud", "i", "done", "pad", "std", "ds", "debug", "des", "w", "diff", "t", "nd", "p", "dL", "ld", "add", "did", "di", "del"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    new Main().run();\\n  }\\n\\n  private FastScanner sc;\\n  private Scanner scc;\\n\\n  private void run() {\\n    sc = new FastScanner();\\n    int N = sc.nextInt();\\n    int X = sc.nextInt();\\n\\n    int next = 0;\\n    int count = 0;\\n    for (int i = 0; i < N; i++) {\\n      int tmp = sc.nextInt();\\n      next += tmp;\\n      if (X < next) {\\n        break;\\n      }\\n      count++;\\n    }\\n\\n    System.out.println(count + 1);\\n  }\\n}\\n\\n\\nclass FastScanner {\\n  private final InputStream in = System.in;\\n  private final byte[] buffer = new byte[1024];\\n  private int ptr = 0;\\n  private int buflen = 0;\\n\\n  private boolean hasNextByte() {\\n    if (ptr < buflen) {\\n      return true;\\n    } else {\\n      ptr = 0;\\n      try {\\n        buflen = in.read(buffer);\\n      } catch (IOException e) {\\n        e.printStackTrace();\\n      }\\n      if (buflen <= 0) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  private int readByte() {\\n    if (hasNextByte())\\n      return buffer[ptr++];\\n    else\\n      return -1;\\n  }\\n\\n  private static boolean isPrintableChar(int c) {\\n    return 33 <= c && c <= 126;\\n  }\\n\\n  public boolean hasNext() {\\n    while (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n      ptr++;\\n    return hasNextByte();\\n  }\\n\\n  public String next() {\\n    if (!hasNext())\\n      throw new NoSuchElementException();\\n    StringBuilder sb = new StringBuilder();\\n    int b = readByte();\\n    while (isPrintableChar(b)) {\\n      sb.appendCodePoint(b);\\n      b = readByte();\\n    }\\n    return sb.toString();\\n  }\\n\\n  public long nextLong() {\\n    if (!hasNext())\\n      throw new NoSuchElementException();\\n    long n = 0;\\n    boolean minus = false;\\n    int b = readByte();\\n    if (b == '-') {\\n      minus = true;\\n      b = readByte();\\n    }\\n    if (b < '0' || '9' < b) {\\n      throw new NumberFormatException();\\n    }\\n    while (true) {\\n      if ('0' <= b && b <= '9') {\\n        n *= 10;\\n        n += b - '0';\\n      } else if (b == -1 || !isPrintableChar(b)) {\\n        return minus ? -n : n;\\n      } else {\\n        throw new NumberFormatException();\\n      }\\n      b = readByte();\\n    }\\n  }\\n\\n  public int nextInt() {\\n    long nl = nextLong();\\n    if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n      throw new NumberFormatException();\\n    return (int) nl;\\n  }\\n\\n  public double nextDouble() {\\n    return Double.parseDouble(next());\\n  }\\n}\\n", "target": "130", "substitutes": {"sc": ["usc", "uc", "lc", " cr", " unsc", "cc", "dec", "esc", " SC", " sr", " resc", "sec", "cl", "sys", "pl", "sh", "bc", "sp", "inc", " scr", "ec", "capt", "ctl", "sch", "sw", "sync", "fc", "func", "tc", "ctrl", " cs", "scan", "sq", " Sc", "cont", "cs", "sci", "ss", "nc", "pb", " rc", "osc", "sim", "Sc", " cle", "gc", "scl", "asc", "exp", "isc", "ctx", "SC", "mc", "rc", "pc", "proc", "ch", " sp", "desc", "st"], "scc": ["sscc", "sspc", "sCC", "scs", " spc", "ssCC", "spc", " Spc", " sCC", " Scs", " scs", " Scc", "sscs", " SCC"], "N": ["Z", "I", "D", "TN", "ND", "NM", "NI", "SN", "NP", "NE", "NB", "No", "S", "Ni", "NG", "NO", "NL", "R", "NS", "NR", "V", "M", "NH", "GN", "NC", "C", "Num", "Y", "L", "NA", "J", "NN", "NT", "NY", "Ns"], "X": ["Z", "I", "F", "ax", "TX", "EX", "IX", "DX", "XXX", "S", "P", "Next", "T", "XM", "R", "Count", "Q", "xx", "V", "M", "Int", "XX", "C", "CC", "XT", "Y", "L", "max", "XP", "K", "J", "XL", "xs", "x"], "next": ["set", "offset", "future", "end", "key", "parse", "position", "current", "number", "entry", "prefix", "value", "sp", "line", " NEXT", "ne", "seq", "top", "front", "forward", "Next", "get", "bytes", "td", "write", "close", "button", "start", "ind", "xx", "code", "index", "pointer", "z", "prev", "j", "sequence", "zip", "append", "nb", " Next", "data", "text", "np", "obj", "max", "txt", "continue", "nd", "p", "network", "binary", "last", "page", "size", "nt", "x", "first"], "count": ["num", "ount", "ctr", "coll", "cc", "result", "current", "number", "cond", "total", "id", "stat", "batch", "process", "sum", "state", "report", "Count", "ind", "cache", "start", "index", "code", "list", "z", "trace", "comment", "find", "nb", "cont", "status", "length", "max", "ct", "counter", "continue", "t", "cycle", "size", "second", "nt"], "i": ["q", "I", "ix", "phi", "iu", "ip", "li", "id", "m", "v", "me", "ini", "ai", "im", "ind", "qi", "inter", "index", "f", "us", "init", "io", "j", "bi", "it", "ui", "ie", "is", "pi", "ti", "ic", "ci", "sim", "my", "e", "multi", "info", "p", "y", "ii", "si", "di", "x", "mi"], "tmp": ["offset", "mp", "timeout", "temp", "prefix", "node", "cp", "m", "v", "sp", "tt", "xy", "td", "start", "ind", "inter", "xx", "index", "yy", "MP", "test", "prev", "nb", "mk", "sq", "xxxx", "np", "emp", "xxx", "obj", "cmp", "txt", "t", "ctx", "proc", "nt", "x"], "in": ["r", "mm", "gin", "bin", "from", "inf", "ar", "con", "l", "o", "log", "h", "inc", "m", "ini", "err", "inn", "rin", "IN", "get", "ind", "f", "on", "us", "In", "init", "io", "win", "nin", "reader", "it", "din", "is", "data", "inner", "ic", "en", "ins", "input", "out", "as", "t", "cin", "info", "up", "all", "to"], "buffer": ["block", "face", "result", "paste", "limit", "row", "password", "Buffer", "queue", "temp", "address", "device", "source", "read", "batch", "buff", "database", "cache", "bone", "buf", "phrase", "button", "view", "variable", "pointer", "scroll", "mem", "reference", "sequence", "stack", "available", "document", "message", "stream", "template", "data", "length", "screen", "table", "memory", "store", "output", "display", "iter", "p", "binary", "command", "page", "bar", "initial", "library", "window"], "ptr": ["br", "addr", "seek", "offset", "post", "pt", "ctr", "adr", "loc", "prime", "address", "tp", "point", "sp", "dr", "tip", "tr", "Ptr", "pend", "bp", "td", "inters", "buf", "ind", "inter", "index", "pos", "req", "pointer", "pers", "pr", "ts", "pi", "length", "np", "pad", "rel", "rob", "jp", "ped", "iter", "p", "dep", "ctx", "ps", "pc", "depth", "proc", "pointers", "pert", "peer", "expr"], "buflen": ["bupllen", "buluength", "buluen", "bufilength", "Buklen", "buplenc", " bupllen", "burfilens", "bulfens", "bufilen", "bufrens", "bufleng", " bufren", " bupleng", "bufilener", " bufrens", "bufrength", "buplener", "bulfen", " bufllen", "bufreng", " buflens", " buflend", "Buflength", "bulllen", "buplength", " buflength", " bufreng", "Buklength", "buplen", "buflener", " bufrend", "bufllen", "bullend", "bufillen", "buflenc", " buplength", "buclener", "Buflener", "Buflenc", "Buflen", " bufleng", "bullens", "bupleng", "burfilen", "buklen", "bufileng", "bulfeng", "burfilener", "bucllen", "buklener", "bulleng", " buplen", "buklength", "burflen", "bufilens", "bullener", "bufren", "bufrlen", "bullen", "burflener", "buflend", "buluenc", "burflens", "bulfend", "buclen", "buluener", "buclens", "Buklener", "Buklenc", "burfllen", "buflength", "burfillen", "bufrend", "buflens", "buklenc"], "c": ["lc", "ca", "ctr", "cc", "d", "dec", "cur", "con", "l", "category", "bc", "\u00e7", "v", "m", "cp", "unc", "ce", "dc", "ch", "cu", "enc", "a", "f", "fc", "fac", "u", "tc", "z", "cd", "C", "cont", "cs", "g", "k", "abc", "cm", "ci", "ct", "w", "e", "t", "x", "p", "ac", "char", "cb", "y", "pc", "rc", "cf"], "sb": ["xb", "sf", "sg", "ob", "mb", "sth", "builder", "abs", "orb", "bsp", "sv", "sp", "zb", "lp", "gb", "bh", "bf", "db", "sa", "bs", "lb", "bp", "ub", "bj", "gob", "bd", "eb", "sm", "ssl", "ib", "nb", "sq", "pb", "bg", "bt", "ssh", "rob", "kb", "bb", "cb", "SB", "rb", "erb", "umb"], "b": ["br", "emb", "d", "bin", "beta", "wb", "ob", "l", "base", "mb", "o", "bar", "h", "bc", "v", "bf", "db", "gb", "ch", "bs", "buff", "bp", "a", "reb", "bd", "f", "eb", "fb", "z", "j", "bi", "ib", "bound", "nb", "ab", "g", "bg", "pb", "bt", "bis", "e", "w", "t", "s", "p", "bb", "cb", "y", "be", "rb", "x", "B"], "n": ["nu", "d", "nn", "l", "nr", "len", "ns", "m", "ne", "cn", "sn", "z", "nb", "en", "e", "t", "p", "ln", "nt", "x"], "minus": ["star", "dec", " sign", "nos", "number", " negate", "some", "zero", "sign", "nan", " neg", "lo", "negative", "leading", "foo", "min", "neg", "left", " omitted", " dec", " plus", "mod", "digit", " boo", "add", " digits", " negative", "plus"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        double sumaFraccion = 0;\\n        int n = in.nextInt();\\n        for (int i = 0; i < n; i++) {\\n            double Ai= in.nextDouble();\\n            sumaFraccion+= 1.0/Ai;\\n            \\n        }\\n        double resutlado = 1/sumaFraccion;\\n        System.out.println(resutlado);\\n    }\\n}", "target": "120", "substitutes": {"in": ["r", "gin", "bin", "from", "con", "inf", "l", "sol", " din", "isin", "log", "rt", "id", "inc", "conn", "sin", "ini", "err", "source", "raw", "doc", "vin", "inn", "file", "IN", "rin", "sum", "per", "run", "user", "get", "ind", "In", "init", "world", "io", "ssl", "reader", "it", "scan", "din", "is", "thin", "stream", "inner", "en", "ins", "input", "std", "conf", "out", "cin", "info", "ln", "add", "all"], "sumaFraccion": ["sumaFraucision", "sumaBrucression", "sumaFragnision", "sumaFrancion", "sumaFraucison", "sumaFragnression", "sumaFrucression", "sumaFracison", "sumaFracision", "sumaFraucion", "sumaFragnison", "sumaFraccION", "sumaFraucuster", "sumaFrucion", "sumaFragnione", "sumaFraccione", "sumaFraccuster", "sumaBrucion", "sumaBrucION", "sumaFragnion", "sumaFrucision", "sumaFracION", "sumaFraccision", "sumaFracuster", "sumaFracione", "sumaFracression", "sumaBraccression", "sumaFrancione", "sumaFrancison", "sumaFragnuster", "sumaFracion", "sumaFrancision", "sumaBraccION", "sumaFrucION", "sumaFraccison", "sumaBraccion", "sumaBraccision", "sumaFraccression", "sumaBrucision", "sumaFragnION"], "n": ["nu", "mn", "num", "name", "d", "nn", "number", "nr", "l", "N", "gn", "ns", "m", "nan", "ne", "nl", "ni", "sn", "count", "j", "no", "nb", " N", "na", "k", "nc", "np", "c", "nw", "nm", "ng", "t", "nd", "network", "nor", "ln", "net", "nt"], "i": ["q", "I", "ix", "ex", "phi", "gi", "zi", "iu", "hi", "ip", "li", "id", "me", "ini", "ai", "ki", "client", "im", "ind", "qi", "a", "us", "init", "u", "io", "j", "bi", "it", "ui", "is", "uri", "ie", "pi", "g", "iso", "ti", "ic", "ci", "sim", "cli", "multi", "iter", "gu", "y", "ii", "xi", "si", "di", "mi"], "Ai": ["APpi", " An", "Alphapi", "AAini", "APi", "Api", "SAbi", "APn", " Api", " Abi", "SApi", "Alphaini", "Alphadi", "SAi", "APbi", "AAdi", " Adi", "SAn", "An", "Abi", " Aini", "Adi", "Alphai", "Aini", "AApi", "AAi"], "resutlado": ["resutlayado", "resumllado", "resumliada", "resutlayada", "resumlader", "resutliaban", "resutlsada", "resutlsader", "resutliado", "resumlada", "resutliader", "resutlayader", "resutlayaban", "resutllado", "resutlaban", "resumliado", "resutlader", "resumlados", "resutliados", "resutliada", "resutlitados", "resumllazo", "resumllados", "resumlaban", "resutliazo", "resutlitada", "resumliader", "resumlado", "resumllada", "resutlitado", "resutllazo", "resutlitazo", "resumlazo", "resutlada", "resutllados", "resutlsado", "resutllada", "resutlsaban", "resutlazo", "resumliaban", "resutlados"]}}
{"code": "import java.util.*;\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        String date = sc.next();\\n        String[] info = date.split(\"/\");\\n        int year = Integer.parseInt(info[0]),\\n        month = Integer.parseInt(info[1]);\\n        if(year < 2019 || year == 2019 && month < 5){\\n            System.out.println(\"Heisei\");\\n        } else {\\n            System.out.println(\"TBD\");\\n        }\\n    }\\n}", "target": "163", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "soc", "inc", "dc", "ec", "cle", "sel", "sch", "sw", "sm", "sync", "tc", "scan", "sq", "cs", "nc", "screen", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "date": ["dat", "Date", "cal", "when", "version", "dates", "number", "draw", "log", "now", "value", "day", "md", "file", "tag", "get", "trade", "start", "range", "string", "days", "message", "data", "template", "night", "json", "iso", "event", "today", "debug", "format", "diff", "ate", "dt", "week", "time", "config"], "info": ["group", "work", "details", "inf", "parse", "error", "ip", "entry", "part", "http", "id", "fo", "train", "app", "stat", "by", "follow", "ro", "sum", "os", "where", "list", "init", "Info", "recent", "about", "it", "isu", " Info", "success", "help", "json", "information", "iso", "join", "good", "step", "diff", "check", "iter", "INFO", "det", "pack", "query"], "year": ["name", "color", "early", "ear", "row", "sy", "john", "from", "number", "course", "address", "day", "city", "can", "state", "any", "or", "start", "quarter", "note", "soon", "code", "currency", "Year", "century", "range", "always", "no", "age", "years", "length", "score", "today", "country", "Y", "season", "y", "era", "cycle", "size", "volume", "week"], "month": ["may", "num", "mm", "mer", "mini", "period", "mp", "dim", "mat", "mb", "number", "part", "minute", "m", "module", "member", "day", "oct", "months", "tag", "hour", "mut", "mon", "major", "chapter", "quarter", "field", "century", "night", "Month", "mod", "tom", "char", "man", "method", "season", "week", "time"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        char[] cl = sc.next().toCharArray();\\n        char[] chk = {'A','T','C','G'};\\n        int ans = 0;\\n        int now = 0;\\n        for(int i = 0; i < cl.length; i++){\\n            boolean bool = false;\\n            for(char c: chk){\\n                if(cl[i] == c){\\n                    bool = true;\\n                    break;\\n                }\\n            }\\n            if(bool){\\n                now++;\\n            }else{\\n                ans = Math.max(ans,now);\\n                now = 0;\\n            }\\n        }\\n        System.out.println(Math.max(ans,now));\\n    }\\n}\\n", "target": "100", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "sys", "system", "Scan", "ser", "bc", "sv", "sp", "cr", "soc", "inc", "cle", "sch", "sw", "sync", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "screen", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "cl": ["q", "lc", "cc", "ll", "acl", "hl", "l", "len", "co", "cled", "kl", "pl", "lic", "cr", "ol", "spe", "bl", "ck", "cel", "cle", "gl", "cu", "Cl", "spl", "sl", "fc", "ls", "cd", "CL", "cs", "rl", "cm", "ic", "fl", "com", " pl", "L", "gc", "scl", "ln", "lf", "ld", "ch"], "chk": ["CHp", " chkg", "chck", "Chck", "clck", "Chks", "chg", "Chkg", " chks", " chp", "Chk", "Chp", "chks", "chp", "clk", "CHck", " chck", "chkg", "CHk", "clks", " chg", "clg", "CHkg", "Chg"], "ans": ["uns", "ents", "ons", "offs", "nets", "pan", "aus", "rs", "anks", "anas", "atches", "oos", "oss", "eds", "ns", "ks", "n", " olds", "ians", "os", "ars", "akens", "ms", "lines", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "ls", "an", "uploads", "ols", "ogs", "angs", "mas", "leans", "anes", "cs", "na", "ins", "olds", "aps", "vers", "ds", "ers", "ions", "as", "s", "posts", "aves", "xs", "rans", "x", "outs", "ann"], "now": ["post", "stage", "save", "before", "current", "after", "zero", "and", "sp", "wait", "tmp", "aw", "tt", "cast", "msg", "ws", "raw", "nt", "wa", "ess", "where", "ms", "ow", "here", "sw", "since", "at", "then", "hold", "wd", "NOW", "ready", "j", "gm", "gov", "Now", "age", "rest", "length", "window", "off", "store", "aj", "old", "span", "cmp", "other", "still", "we", "down", "time", " NOW", "next"], "i": ["q", "I", "ix", "phi", "gi", "zi", "iu", "ei", "ip", "ji", "li", "o", "id", "asi", "n", "m", "ij", "v", "ini", "ai", "ki", "go", "im", "ind", "ori", "qi", "index", "ik", "f", " ii", "init", "ims", "bi", "it", "ui", "is", "ie", "uri", "pi", "ti", "ic", "ci", "sim", "multi", "iq", "ami", "y", "xi", "ii", "si", "di", "x", "mi"], "c": ["arc", "q", "uc", "lc", "cc", "con", "l", "co", "h", "o", "cf", "cr", "v", "cp", "ce", "dc", "cap", "ec", "cell", "cu", "a", "b", "code", "f", "u", "tc", "z", "cat", "C", "cs", "g", "k", "cod", "ic", "com", "ct", "w", "t", "char", "ac", "p", "ch"], "bool": ["true", "coll", "driver", "compl", "fail", "sol", "cond", "broad", "possibly", "abl", "oo", "alse", "bel", "bc", "bil", "bold", "bal", "boot", "bol", "btn", "bl", "bs", "ool", "ind", "b", "ble", "conv", "fb", "arr", "irm", "unit", "bm", "olean", "status", "bug", "vol", "eval", "lvl", "arb", "rel", "bis", "bo", "bb", "be", "flag", "false", "confirmed", "jl", "lu"]}}
{"code": "/*\\n* @Author Silviase(@silviasetitech)\\n* For ProCon\\n*/\\n\\nimport java.util.*;\\nimport java.lang.*;\\nimport java.math.*;\\n\\nclass Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        \\n        String s = sc.next();\\n        String t = sc.next();\\n        boolean b = false;\\n        for (int i = 0; i < s.length(); i++) {\\n            if ((s.substring(i) + s.substring(0,i)).equals(t)){\\n                b = true;\\n            }\\n        }\\n        if (b) {\\n            System.out.println(\"Yes\");\\n        } else {\\n            System.out.println(\"No\");\\n        }\\n\\n        sc.close();\\n    }\\n\\n}", "target": "220", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "sh", "cr", "bc", "sv", "sp", "inc", "dc", "ck", "ctl", "capt", "ec", "cle", "irc", "sch", "cu", "sync", "tc", "ctrl", "cv", "scan", "sq", " Sc", "cs", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "exp", "scl", "asc", "isc", "scope", "ctx", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "s": ["gs", "r", "sb", "l", "rs", "abs", "sys", "h", "so", "sv", "sp", "n", "v", "m", "sd", "source", "sa", "bs", "S", "os", "ms", "its", "sw", "ats", "str", "se", "a", "f", "sl", "ls", "sts", "string", "is", "ts", "sq", "cs", "g", "ss", "c", "js", "p", "ps", "xs", "hs", "st"], "t": ["lt", "pt", "wt", "rt", "o", "ta", "n", "tr", "tt", "tk", "tf", "T", "at", "gt", "f", "type", "it", "tm", "ts", "template", "k", "typ", "c", "mt", "txt", "ct", "ot", "p", "y", "te", "th", "title", "st"], "i": ["q", "I", "ix", "ex", "ri", "phi", "gi", "hi", "iu", "zi", "ei", "l", "ip", "o", "li", "id", "n", "m", "v", "ij", "ini", "in", "ski", "ai", "ki", "im", "ind", "qi", "a", "ori", "index", "us", "init", "u", "io", "ims", "j", "bi", "it", "z", "ui", "is", "ie", "pi", "ti", "ic", "ci", "yi", "cli", "multi", "iter", "gu", "y", "oi", "ii", "xi", "si", "di", "x", "mi"], "b": ["br", "d", "wb", "sb", "ob", "mb", "l", "o", "bc", "n", "gb", "bf", "db", "bl", "bs", "bool", "a", "bd", "u", "fb", "j", "bound", "nb", "ab", "g", "bg", "bt", "c", "bis", "bo", "out", "blue", "bb", "p", "cb", "be", "y", "rb", "B"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int input = scan.nextInt();\\n        int A, B, C, D, a, b, c, d, e, f, g,h;\\n\\n        D = input % 10;\\n        input /= 10;\\n        C = input % 10;\\n        input /= 10;\\n        B = input % 10;\\n        input /= 10;\\n        A = input % 10;\\n        input /= 10;\\n\\n        a = A + B + C + D;\\n        b = A - B + C + D;\\n        c = A + B - C + D;\\n        d = A + B + C - D;\\n        e = A - B - C + D;\\n        f = A + B - C - D;\\n        g = A - B + C - D;\\n        h = A - B - C - D;\\n\\n        if (a == 7) {\\n            System.out.println(A + \"+\" + B + \"+\" + C + \"+\" + D +\"=7\");\\n        } else if (b == 7) {\\n            System.out.println(A + \"-\" + B + \"+\" + C + \"+\" + D +\"=7\");\\n        } else if (c == 7) {\\n            System.out.println(A + \"+\" + B + \"-\" + C + \"+\" + D+\"=7\");\\n        } else if (d == 7) {\\n            System.out.println(A + \"+\" + B + \"+\" + C + \"-\" + D+\"=7\");\\n        } else if (e == 7) {\\n            System.out.println(A + \"-\" + B + \"-\" + C + \"+\" + D+\"=7\");\\n        } else if (f == 7) {\\n            System.out.println(A + \"+\" + B + \"-\" + C + \"-\" + D+\"=7\");\\n        } else if (g == 7) {\\n            System.out.println(A + \"-\" + B + \"+\" + C + \"-\" + D+\"=7\");\\n        }else if (h == 7) {\\n            System.out.println(A + \"-\" + B + \"-\" + C + \"-\" + D+\"=7\");\\n        }\\n    }\\n}", "target": "152", "substitutes": {"scan": ["set", "seek", "r", "skip", "row", "nn", "con", "reach", "parse", "gate", "san", " Scan", "ser", "sys", "Scan", "system", "connect", "sin", "read", "in", "by", "stat", "can", "get", "report", "run", "start", "se", "search", "sync", "send", "scroll", "an", "io", "sc", "find", "ner", "k", "en", "out", "check", "info", "re", "proc", "query", "ch", "ann"], "input": ["q", "mask", "bit", "control", "raw", "image", "history", "PUT", "data", "conf", "alpha", "all", "x", "window", "col", "current", "l", "error", "len", "source", "in", "lat", "client", "start", "Q", "count", "view", "it", " Input", "diff", "initial", "config", "end", "xml", "progress", "value", "inc", "this", "file", "cache", "select", "list", "type", "i", "length", "output", "request", "out", "p", "add", "ch", "height", "active", "position", "entry", "address", "total", "m", "hidden", "index", "buffer", "text", "api", "step", "t", "command", "Input"], "A": ["ICA", "USA", "Action", "The", "Av", "EMA", "SA", "ATA", "V", "JA", "LA", "TA", "AN", "H", "AS", "AI", "AR", "AD", "IE", "PA", "App", "E", "CA", "AY", "HA", "Ax", "G", "R", "Q", "OA", "W", "This", "ONE", "ACA", "AP", "An", "Bar", "mA", "Array", "MA", "N", "ALL", "AE", "AC", "All", "At", "As", "IA", "GA", "ANY", "ACC", "U", "NA", "ACT", "URL", "AA", "I", "AU", "UA", "S", "P", "ACE", "T", "M", "AH", "API", "AL", "area", "AB", "AAA", "L", "EA", " AA", "Area", "BA", "AT"], "B": ["I", "PB", "WB", "BB", "F", "LB", "TB", "Box", "RB", "BL", "E", "BT", "BI", "BM", "Builder", "BG", "DB", "N", "BU", "Ber", "VB", "NB", "GB", "G", "ON", "Bi", "FB", "T", "BER", "IB", "R", "BF", "BR", "BC", "BE", "V", "UB", "BD", "CB", "BY", "BS", "H", "BO", "JB", "AB", "Be", "QB", "Y", "L", "Bar", "J", "EB", "K", "BA", "OB", "SB", "Bs"], "C": ["I", "Con", "CS", "ERC", "F", "CM", "CON", "E", "CE", "CA", "N", "WC", "AC", "CW", "CAR", "FC", "CT", "CCC", "G", "S", "CF", "DC", "P", "T", "R", "Control", "Cu", "CU", "BC", "V", "Cl", "Co", "M", "Ch", "Char", "Class", "CG", "CH", "CI", "CB", "CV", "TC", "H", "CL", "HC", "CD", "CC", "VC", "CR", "Cache", "Y", "L", "COM", "K", "JC", "IC", "Cr", "Cs", "CN", "SC", "Car", "EC", "YC", "Color", "CP"], "D": ["I", "Z", "Doc", "Date", "DIR", "DD", "F", "E", "Error", "Delta", "Update", "DH", "DB", "N", "ND", "TD", "The", "PD", "Del", "DA", "Default", "DI", "O", "G", "Deep", "Ds", "S", "DC", "P", "And", "T", "DM", "DO", "R", "Q", "MD", "V", "DVD", "Def", "DF", "M", "W", "YD", "It", "SD", "DT", "H", "Ind", "DE", "U", "CD", "Done", "Y", "L", "DR", "DER", "J", "X", "DL", "DS", "IV", "Do", "Dir", "WD", "Length", "Input", "DP"], "a": ["ae", "r", "ca", "ar", "l", "oa", "o", "n", "aa", "ad", "sa", "al", "at", "ia", "u", "an", "la", "ga", "ao", "j", "ab", "i", "area", "ba", "ach", "aj", "ap", "as", "t", "p", "ac", "up", "au", "ata", "x", "am"], "b": ["br", "r", "sb", "l", "o", "bc", "v", "n", "bf", "db", "by", "bl", "bs", "eb", "bd", "u", "fb", "j", "bi", "ib", "nb", "ab", "i", "ba", "t", "bb", "be", "y", "rb"], "c": ["lc", "ca", "cc", "cur", "ar", "l", "co", "o", "cr", "bc", "ce", "cp", "n", "v", "ch", "dc", "ec", "cn", "can", "cu", "fc", "u", "tc", "cat", "cd", "sc", "cs", "cm", "ct", "ac", "cb", "y", "rc", "rb", "cf"], "d": ["dh", "dat", "r", "l", "dd", "red", "o", "de", "n", "m", "da", "dr", "db", "dc", "ad", "v", "bd", "u", "j", "dra", "dx", "i", "data", "ds", "w", "out", "t", "p", "y", "dt", "di", "dp"], "e": ["oe", "ae", "r", "q", "ee", "E", "el", "ei", "l", "o", "ce", "n", "v", "pe", "ec", "ge", "ef", "eb", "u", "an", "j", "it", "ed", "ie", "i", "eu", "et", "en", "ek", "eff", "out", "w", "er", "p", "em", "exc", "be", "y", "ev", "x", "eeee"], "f": ["F", "fi", "l", "fd", "uf", "ff", "o", "v", "fo", "tf", "fy", "fe", "fp", "fc", "fac", "u", "fb", "it", "ed", "i", "fn", "fed", "fl", "fa", "w", "fr", "t", "er", "p", "be", "y", " F", "fm", "x"], "g": ["q", "gs", "r", "og", "gi", "l", "gd", "tg", "eg", "o", "n", "gy", "msg", "mg", "G", "ge", "gg", "go", "ger", "gt", "gen", "ga", "j", "it", "gm", "i", "gh", "ig", "gc", "out", "ng", "er", "gu", "t", " G", "y", "gr", "gp"], "h": ["he", "ho", "rh", "r", "hi", "hl", "l", "o", "sh", "kh", "n", "dr", "bh", "oh", "eh", "hh", "ih", "hs", "hr", "it", "H", "gh", "w", "ph", "t", "p", "y", "th", "hm", "uh", "ch", "ah", "ish"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tlong[] A = new long[N];\\n\t\tfor(int i=0;i<N;i++) {\\n\t\t\tA[i]=sc.nextInt();\\n\t\t}\\n\t\tlong check = 0;\\n\t\tfor(int i=1;i<N;i++) {\\n\t\t\tif(A[i-1]>A[i]) {\\n\t\t\t\tcheck += A[i-1]-A[i];\\n\t\t\t\tA[i] = A[i-1];\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(check);\\n\\n\t}\\n}\\n", "target": "202", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", " SC", "sec", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "dc", "nl", "capt", "ctl", "cle", "sel", "sch", "sync", "fc", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "pb", "c", "osc", "txt", "Sc", "gc", "ng", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "N": ["D", "I", "Z", "Node", "TN", "F", "ND", "NM", "SN", "NP", "NE", "NB", "n", "G", "S", "Ni", "P", "OUT", "NO", "NL", "T", "R", "NS", "NR", "V", "ANY", "NH", "M", "AN", "GN", "NC", "Sn", "C", "NN", "Num", "Y", "L", "NA", "K", "J", "Net", "NI", "NT", "B", "Ns"], "A": ["AA", "I", "RAM", "F", "Array", "App", "MA", "AU", "Alpha", "CA", "AY", "ARC", "WA", "AE", "AC", "All", "HA", "The", "At", "As", "SA", "G", "S", "P", "Ar", "ACE", "And", "He", "IA", "R", "ATA", "a", "GA", "V", "LA", "JA", "M", "API", "This", "What", "AV", "ACC", "H", "AP", "C", "AM", "U", "AB", "An", "NA", "Y", "L", "AR", "EA", "Check", "BA", "mA", "AF", "ACT", "PA", "B", "AT"], "i": ["set", "q", "ix", "zi", "iu", "base", "ei", "li", "me", "batch", "ai", "ki", "is", "ic", "ami", "y", "oi", "di", "ri", "fi", "l", "chain", "ip", "ji", "point", "o", "id", "in", "client", "a", "io", "sequence", "bi", "it", "inner", "g", "rest", "ci", "sim", "cli", "ii", "phi", "hi", "print", "ni", "ind", "list", "u", "status", "pi", "iso", "my", "xi", "si", "mi", "I", "name", "gi", "v", "m", "ini", "err", "by", "im", "qi", "index", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "multi", "iter", "info", "to"], "check": ["valid", "checks", "block", "set", "result", "cal", "fail", "error", "total", "log", "v", "wait", "n", "ck", "call", "update", "print", "sum", "report", "warn", "code", "search", "sync", "clean", "match", "test", "CHECK", "loop", "scan", "comment", "status", "lock", "ok", "help", "score", "good", "c", "max", "link", "cmp", "out", "diff", "black", "info", "Check", "add", "all", "cost", "x", "checked"]}}
{"code": "import java.util.*;\\npublic class Main{\\n\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.next());\\n        //t=\u592a\u90ce\u3001h=\u82b1\u5b50\\n        String t,h;\\n        int score_t=0;\\n        int score_h=0;\\n\\n        for(int i=0; i<n; i++){\\n            t = sc.next();\\n            h = sc.next();\\n            \\n            //\u540c\u5024\\n            if(t.compareTo(h) == 0){\\n                score_t += 1;\\n                score_h += 1;\\n            }\\n            //t>h\\n            else if(t.compareTo(h) > 0){\\n                score_t += 3;\\n            }\\n            //t<h\\n            else{\\n                score_h += 3;\\n            }\\n        }\\n        System.out.println(String.format(\"%d %d\",score_t,score_h));\\n\\n    }\\n\\n}\\n\\n", "target": "206", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "cr", "sv", "sp", "bc", "soc", "ch", "sa", "ec", "capt", "cle", "sch", "cam", "sm", "sl", "sync", "scan", "sq", "cs", "ss", "nc", "screen", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "sr", "desc", "sub"], "n": ["num", "r", "name", "d", "nn", "l", "N", "h", "ns", "v", "m", "sn", "a", "b", "f", "z", "no", "ern", "nb", "i", "ner", "en", "c", "nm", "e", "s", "p", "nt"]}}
{"code": "import java.util.Scanner;\\nimport java.io.IOException;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) throws IOException {\\n\\n        Scanner sc = new Scanner(System.in);\\n        int s = Integer.parseInt(sc.next());\\n        int w = Integer.parseInt(sc.next());\\n        sc.close();\\n        String result = \"safe\";\\n        if (w >= s) {\\n            result = \"unsafe\";\\n        }\\n        System.out.println(result);\\n    }\\n}\\n", "target": "177", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "acc", "cc", "anc", "esc", "dec", " SC", "sec", "cgi", "cl", "sys", "sh", "cr", "sp", "bc", "inc", "dc", "ck", "nl", "ko", "ctl", "cle", "irc", "sch", "sw", "fc", "tch", "tc", "scan", "sq", " Sc", "disc", "cs", "nc", "pb", "comp", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "s": ["gs", "r", "d", "l", "rs", "h", "ns", "sv", "n", "m", "v", "sa", "ws", "S", "os", "ms", "ys", "sw", "start", "a", "b", "count", "fs", "sl", "ls", "ows", "ies", "z", "is", "ts", "sq", "i", "cs", "ss", "c", "ins", "t", "p", "xs", "ps"], "w": ["q", "wcs", "r", "wx", "wl", "wb", "wt", "wp", "h", "n", "m", "v", "word", "aw", "wi", "ws", "wa", "width", "wal", "sw", "wid", "rw", "wd", "W", "win", "hw", "z", "words", "wr", "nw", "t", "wh", "wm", "p", "fw", "we", "kw", "window"], "result": ["valid", "response", "block", "r", "description", "true", "what", "feature", "error", "chain", "Result", "prefix", "value", "summary", "default", "relation", "transform", "report", "ret", "str", "code", "search", "match", "test", "sequence", "results", "string", "comment", "complete", "message", "expression", "text", "RESULTS", "success", "data", "join", "output", "answer", "request", "out", "continue", "black", "def", "command", "reason", "res", "gr", "term"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n\tpublic class Main {\\n\t\tpublic static void main(String[] args) {\\n\t\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\\n\\n\\n\t\t\t  try{\\n\\n\\n\t\t\t\t  String ab;\\n\t\t\t\t  String[] strAry;\\n\t\t\t\t  int a;\\n\t\t\t\t  int b;\\n\t\t\t\t  int c;\\n\t\t\t\t  int yaku;\\n\t\t\t\t  int count=0;\\n\\n\t\t\t\\n\t\t\t\t  ab = input.readLine();\\n\t\t\t      strAry = ab.split(\" \");\\n\t\t\t      a=Integer.parseInt(strAry[0]);\\n\t\t          b=Integer.parseInt(strAry[1]);\\n\t\t          c=Integer.parseInt(strAry[2]);\\n\\n\t\t\t\t  for(int i=a; i<=b; i++){\\n\t\t\t\t\t     yaku=c%i;\\n\t\t\t\t\t     \\n\t\t\t\t\t     if(yaku==0){\\n\t\t\t\t\t    \tcount++;\\n\t\t\t\t\t    \t\\n\t\t\t\t\t     }\\n\\n\\n\t\t\t\t   }\\n\t\t\t\t  System.out.println(count);\\n\\n\\n\t\t\t    }catch(IOException e) {   System.out.println(\"Exception : \" + e);\\n\t\t\t    }\\n\\n\t\t}\\n\t}", "target": "190", "substitutes": {"input": ["active", "from", "background", "feed", "current", "tmp", "context", "enter", "source", "in", "read", "raw", "this", "file", "sum", "get", "client", "start", "list", "service", "image", "buffer", "io", "reader", "pattern", "accept", "data", "hub", " Input", "api", "open", "table", "output", "out", "socket", "Input", "initial", "first", "next"], "ab": ["av", " AB", "emb", "xb", "sb", "ob", " eb", "rb", "abs", "abl", "rab", "ABC", "lab", "app", " tab", "gb", "ash", "lam", "hab", "abe", "lb", "af", "ub", "Tab", " bab", "eb", "bag", "fb", "abus", "ib", "abi", "fab", "pb", "abc", "AB", "ast", "abin", "obj", "tab", "ap", "bb", "ac", "Ab", "erb", "x", "abb"], "strAry": ["execValary", "strN3", "StrAry", "strNary", "strCary", "strArary", "arrBry", " strDri", "ptAoy", "strArble", "StrAble", "strDefry", "strAPri", "ptAPri", "strAnary", " strDry", "ptAPry", "arrAary", " strAri", " strD3", "arrArys", "ptAPoy", "strAnri", "arrAry", "strARY", "ptAPRY", "strA3", "arrBvy", "StrA3", "strAr3", "ptAry", "strAch", "strAnvy", "StrAary", "strAary", "strDefries", "strArRY", "strAroy", "strD3", "StrCary", "strValway", "strBary", "arrAvy", "StrCble", "strValry", "strAppary", "strDefway", "strDri", "strDry", "strAries", "strAoy", "StrC3", "strC3", "strAway", "strAPRY", " strAch", " strA3", "ptARY", "strAvy", "strAppvy", "strAPoy", "strAnry", "strArri", "strDefary", "strAri", "strAnrys", "strAn3", "strBrys", "execValry", "strApprys", "execAway", "strAble", "strArry", "strNry", "execAries", "ptAri", "execAry", "strValary", "strDch", "strAPry", "strArys", "arrBary", "arrBrys", "strCry", " strDch", "strAppry", "execAary", "strBvy", "strNble", "strAnch", "strValries", "StrCry", "strArch", "execValway", "strBry", "execValries", "strCble"], "a": ["ae", "ca", "d", "att", "ra", "from", "ar", "l", "oa", "abs", "ta", "aa", "app", "da", "sta", "sa", "al", "ai", "act", "art", "A", "at", "ia", "\u00e1", "an", "la", "access", "ao", "pa", "ea", "area", "apa", "ba", "aaa", "ach", "aj", "alpha", "ap", "ma", "t", "eas", "p", "ac", "as", "au", "add", "all", "to", "va", "am"], "b": ["br", "r", "beta", "wb", "sb", "ob", "mb", "base", "l", "bar", "bc", "gb", "bf", "db", "by", "bl", "bs", "ble", "eb", "f", "fb", "bi", "ib", "bound", "nb", "ba", "bis", "e", "p", "bb", "cb", "y", "be", "rb", "erb", "B"], "c": ["arc", "r", "lc", "ca", "cc", "d", "cos", "l", "o", "cf", "bc", "cr", "v", "n", "ce", "cp", "unc", "dc", "ec", "cy", "cu", "cache", "fc", "f", "u", "tc", "ctrl", "cd", "C", "cs", "cm", "ci", "com", "e", "ct", "gc", "t", "p", "ac", "cb", "crit", "ch"], "yaku": ["nyomi", "yypei", "nyaka", "yoji", "nyaku", "yyatsuki", "yyaku", "ayaku", "wyatsuki", "hotaku", "wyaka", "wyoji", " ypei", "aypei", "hotaka", "wyaku", " yatsuki", "hotoji", " yoji", "yyaka", "yomi", "ayaka", "hotatsuki", "nyoji", " yomi", "ypei", "goji", " yaka", "gaka", "ayatsuki", "gaku", "gomi", "yaka", "yatsuki"], "count": ["num", "ount", "ctr", "result", "found", "number", "draw", "total", "amount", "cast", "batch", "process", "call", "sum", "report", "state", "Count", "cache", "start", "ind", "index", "hold", "code", "list", "search", "test", "const", "force", "must", "trace", "find", "nb", "message", "usage", "status", "length", "conf", "ct", "counter", "check", "info", "command", "ctx", "add", "quiet", "size", "flag", "nt"], "i": ["q", "I", "ix", "ri", "d", "phi", "gi", "zi", "iu", "ei", "fi", "ip", "ji", "li", "v", "ij", "m", "ini", "ai", "ki", "mu", "im", "qi", "f", "u", "\u0438", "io", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ci", "sim", "cli", "multi", "t", "iq", "iter", "s", "p", "y", "xi", "ii", "si", "span", "di", "x", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner scan = new Scanner(System.in);\\n        System.out.println(scan.nextInt() > scan.nextInt() ? \"safe\" : \"unsafe\");\\n        scan.close();\\n    }\\n}", "target": "177", "substitutes": {"scan": ["set", "seek", "save", "skip", "sql", "row", "nn", "con", "parse", "fail", "pan", "gate", "san", "reach", "watch", "ser", "sys", "Scan", "system", "server", "sv", "n", "wait", "sin", "util", "read", "in", "stat", "can", "get", "report", "run", "auto", "se", "select", "pass", "gen", "search", "clean", "stan", "match", "scroll", "test", "an", "buffer", "cat", "sc", "find", "warn", "ner", "screen", "store", "syn", "out", "black", "check", "char", " scanner", "all", "query", "ann", "see"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        int[] k = new int[n];\\n        int[] mm = new int[m];\\n        for (int i = 0; i < n; i++) {\\n            int kk = sc.nextInt();\\n            for (int j = 0; j < kk; j++) {\\n                mm[sc.nextInt() - 1]++;\\n            }\\n        }\\n        int ans = 0;\\n        for (int i = 0; i < m; i++) {\\n            if (mm[i] == n)\\n                ans++;\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "169", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cgi", "cl", "sys", "system", "sh", "cr", "sv", "sp", "bc", "inc", " scr", "dc", "ctl", "capt", "cle", "irc", "sch", "cu", "sync", "tch", "exec", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "c", "sk", "osc", "Sc", "gc", "exp", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "n": ["nu", "mn", "r", "num", "name", "d", "nn", "l", "un", "nr", "number", "N", "o", "ns", "node", "v", "ne", "nan", "nl", "kn", "sn", "count", "index", "on", "an", "no", "nb", "pi", "g", "nc", "na", "np", "en", "c", "nm", "t", "ng", "p", "network", "s", "ln", "net", "nt", "x"], "m": ["mn", "r", "dm", "pm", "mo", "mp", "l", "h", "v", "ms", "vm", "mr", "im", "rm", "b", "sm", "f", "M", "tm", "gm", "mk", "bm", "pi", "cm", "c", "mt", "ma", "t", "p", "y", "mis", "mc", "em", "med", "mat", "mi"], "k": ["ke", "kl", "ks", "v", "kr", "kh", "dk", "km", "tk", "ck", "ket", "ko", "kn", "ak", "ki", "ik", "mk", "ok", "ek", "sk", "ku", "K", "p", "kj", "ka"], "mm": ["mn", "dm", "pm", "nn", "mp", "mb", "ks", "mos", "km", "md", "MM", "kn", "mph", "ms", "ki", "pp", "sm", "mmm", "ik", "mem", "ml", "tm", "bm", "mk", "mop", "mma", "mx", "cm", "sk", "mt", "ma", "wm", "kj", "ka", "mis", "mc", "mi"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "ji", "li", "asi", "ij", "me", "ini", "wi", "this", "ski", "ai", "ni", "ki", "ret", "iii", "or", "iti", "im", "ind", "qi", "inter", "ori", "init", "\u0438", "ims", "bi", "it", "ui", "ie", "is", "uri", " I", "pi", "ti", "MI", "ci", "sim", "cli", "PI", "multi", "iq", "iter", "info", "ami", "y", "xi", "ii", "si", "to", "di", "mi"], "kk": ["hn", "wk", "ikk", "nn", "yk", "kas", "tz", "kl", "KK", "ks", "kh", "ky", "kr", "dk", "km", "ck", "ko", "kn", "ak", "xx", "ik", "uk", "mk", "kB", "cki", "ek", "sk", "ku", "kj", "kt", "ijk", "ka", "kw", "kid"], "j": ["br", "q", "pt", "key", "ji", "jj", "jo", "ij", "son", "err", "jump", "jas", "ju", "ge", "ja", "str", "bj", "b", "oj", "job", "z", "it", "pr", "ie", "uj", "g", "json", "js", "obj", "aj", "jp", "J", "ph", "kj", "y", "ort", "jc", "dj", "je", "kid", "jl"], "nextInt": ["NextInteger", "Nextint", "randFloat", "nextFloat", "nextInteger", "NextLong", "randInteger", " nextFloat", " nextLong", "randInt", "randLong", "nextint", "NextInt", " nextint", " nextInteger", "NextFloat", "randint", "nextLong"], "ans": ["checks", "mn", "uns", "offs", "nn", "vals", "aus", "anks", "ums", "marks", "flags", "oss", "eds", "ns", "ks", "nan", "ars", "os", "can", "ms", "ids", "lines", "arts", "ANS", "amps", "ats", "ens", "ants", "unks", "us", "ls", "an", "ows", "ims", "ann", "scan", "mas", "is", "cs", "has", "ops", "ins", "aps", "ds", "as", "s", "ots", "xs", "rows", "lan", "x", "outs", " scans"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\tpublic static void main(String args[]) throws IOException {\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString str = br.readLine();\\n\t\tString[] a_b_c = str.split(\" \", 0);\\n\\n\t\tint a = Integer.parseInt(a_b_c[0]);\\n\t\tint b = Integer.parseInt(a_b_c[1]);\\n\t\tint c = Integer.parseInt(a_b_c[2]);\\n\\n\t\tint divisor = 0;\\n\\n\t\tfor (int i = a; i <= b; i++) {\\n\t\t\tif (c % i == 0) {\\n\t\t\t\tdivisor++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(divisor);\\n\t}\\n}", "target": "190", "substitutes": {"br": ["bro", "shr", "bsp", "vr", "bc", "cr", "ber", "kr", "dr", "bh", "tr", "db", "bridge", "bl", "bs", "bn", "bp", "Br", "mr", "buf", "BR", "bd", "lr", "hr", "bi", "bm", "pr", "wr", "bt", "rel", "browser", "yr", "fr", "er", "be", "rb", "ch", "gr"], "str": ["dat", "r", "result", "name", "STR", "coll", "cr", "n", "dr", "tr", "oct", "err", "comm", "print", "spec", "f", "arr", "string", "Str", "div", "pr", "text", "data", "g", "status", "vol", "obj", "input", "output", "txt", "out", "fr", "t", "s", "p", "char", "gr", "st"], "a_b_c": ["a_b_cache", "a_b___c", "a_bt_c", "a_b_l", "a_b3l", "a_b_ci", "a_bt3l", "a_b_p", "a_B_cu", "a_bs_c", "a_l_l", "a_B_c", "a_b_e", "a_b_cu", "a_b3b", "a_l_C", "a_bt_l", "a_b___ec", "a_bs_ci", "a_bt3c", "a_bt_b", "a_B_p", "a_b_ec", "a_l_e", "a_bt3i", "a_b_C", "a_b___ci", "a_bt3b", "a_bs_ec", "a_b_cs", "a_b3c", "a_bt_i", "a_b_b", "a_b3i", "a_l_c", "a_bs_cache", "a_b___cache", "a_B_cs", "a_b_i"], "a": ["ae", "r", "ca", "ar", "oa", "ta", "n", "aa", "da", "sta", "sa", "ai", "or", "A", "at", "ia", "an", "la", "ga", "ao", "ab", "ea", "pa", "ba", "aaa", "e", "alpha", "as", "t", "ma", "p", "ac", "au", "va", "x"], "b": ["r", "wb", "ob", "base", "l", "mb", "bar", "bc", "n", "v", "gb", "db", "bl", "bs", "or", "back", "ble", "eb", "f", "fb", "bi", "ib", "bound", "nb", "ab", "g", "ba", "bot", "body", "bb", "cb", "be", "rb", "B"], "c": ["arc", "uc", "r", "lc", "cc", "d", "con", "cos", "l", "chain", "category", "cond", "bc", "n", "v", "cp", "unc", "ce", "dc", "ec", "cu", "or", "cache", "count", "f", "code", "u", "tc", "C", "cs", "g", "cum", "cm", "conf", "cmp", "e", "gc", "t", "p", "ac", "crit", "mc", "cf"], "divisor": ["digissensor", "divizur", "divisionor", "divissor", "divideOR", "divistor", "Divistor", "decisor", "Divistator", "decISator", "decISulator", "divistator", "divideulator", "digisor", "divisensor", "divisOR", "digisensor", "digisors", "decisulator", "diviseensor", "diviseor", "digissors", "divimOR", "divimulator", "divission", "Divistors", "digission", "divisur", "divissensor", "divilur", "decisator", "decISOR", "divideator", "divistors", "divideor", "Divisors", "divISor", "divilor", "divisionors", "digision", "Divisur", "decISor", "decisOR", "digissor", "divilors", "diviseors", "diviseion", "divisator", "divisionion", "divizor", "divizator", "divilator", "divISulator", "Divisator", "divimator", "divizors", "divISator", "divistur", "Divistur", "divISOR", "divisors", "divimor", "divisionensor", "divisulator", "division", "divissors", "Divisor"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "ei", "fi", "ip", "li", "o", "asi", "n", "ij", "m", "v", "ini", "ai", "ki", "im", "qi", "ik", "us", "u", "ims", "z", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ci", "sim", "cli", "multi", "iter", "iq", "s", "y", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        final int A = scan.nextInt();\\n        final int B = scan.nextInt();\\n        scan.close();\\n\\n        if ((A + B) % 2 == 0) {\\n            System.out.println((A + B) / 2);\\n        } else {\\n            System.out.println(\"IMPOSSIBLE\");\\n        }\\n    }\\n}", "target": "31", "substitutes": {"scan": ["set", "seek", "r", "save", "skip", "row", "nn", "reach", "gate", "parse", "san", "cgi", "sys", "Scan", "system", "log", "sv", "n", "sin", "util", "read", "in", "stat", "sum", "can", "get", "run", "scale", "auto", "se", "gen", "sync", "clean", "search", "send", "scroll", "an", "sort", "pass", "cat", "sc", "find", "ner", "store", "conf", "out", "gc", "check", "black", "sur", "char", " scanner", "proc", "query", "ann", "see"], "A": ["AA", "AU", "AY", "CA", "ALL", "AE", "AC", "HA", "ASC", "SA", "S", "P", "IA", "R", "GA", "LA", "V", "JA", "AH", "API", "This", "AN", "ACC", "AL", "AV", "PUT", "AP", "AB", "An", "AS", "NA", "L", "RA", "AR", "AST", "EA", "X", "AX", "AD", "BA", "ACK", "mA", "AF", "ACT", "AT"], "B": ["D", "I", "Z", "BB", "LB", "TB", "RB", "BI", "E", "BL", "BM", "USB", "DB", "N", "BU", "VB", "NB", "GB", "G", "P", "T", "MB", "IB", "R", "BF", "BR", "b", "BC", "V", "BE", "Bs", "M", "CB", "BY", "BS", "C", "BO", "AB", "BUS", "Y", "L", "Bar", "J", "EB", "Bill", "BA", "OB", "SB", "FB"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int hp = scanner.nextInt();\\n        int kinds = scanner.nextInt();\\n        int[] a = new int[kinds];\\n        for(int i = 0; i < kinds; i++) {\\n            a[i] = scanner.nextInt();\\n        }\\n        scanner.close();\\n \\n        int sum = 0;\\n        for(int _a : a) {\\n            sum += _a;\\n        }\\n \\n        System.out.println(hp <= sum ? \"Yes\" : \"No\");\\n    }\\n}", "target": "95", "substitutes": {"scanner": ["canener", " scanener", "caninner", "Scanter", "scanener", "Scaninner", "Scanener", "Scaner", "scaninner", "scanter", "canter", " scanter", "Scanner", " scaninner", "canner", "scaner", " scaner", "caner"], "hp": ["HP", "ho", "rh", "hog", "ping", "happy", "phi", "hi", "hl", "tp", "hops", "h", "ich", "heat", "tip", "oh", "hy", "eh", "alph", "mph", "ih", "hz", "hd", "ht", "hw", "hap", "health", "hyp", "hid", "np", "phy", "hop", "hum", "ph", "htt", "phil", "hess", "xp", "aim", "gp"], "kinds": [" kindes", "likeis", "Kindeds", "likes", "costeds", "costs", " kindals", " kindves", "Kindps", " kindps", "costS", "kindes", "crafteds", "likeves", "Kindes", "kindves", "kindals", "Kinds", "Kindals", "Kindves", "kindS", "craftes", "kindeds", "Kindis", "KindS", "craftS", "crafts", "kindps", " kindis", "craftps", "likeals", "kindis"], "a": ["va", "ca", "att", "array", "oa", "o", "h", "n", "aa", "da", "aw", "sa", "sta", "parts", "at", "b", "A", "list", "ack", "ia", "an", "la", "ga", "ao", "z", "ab", "area", "apa", "na", "aaa", "ba", "aka", "fa", "alpha", "e", "out", "ma", "as", "s", "p", "ac", "eas", "au", "aux", "all", "ata", "am"], "i": ["q", "I", "ix", "ri", "gi", "zi", "iu", "hi", "ei", "ip", "li", "id", "v", "m", "n", "ini", "ai", "ms", "client", "im", "ind", "qi", "index", "f", "us", "init", "u", "\u0438", "io", "fire", "j", "bi", "it", "is", "ui", "pi", "inner", "ti", "ic", "ci", "sim", "cli", "PI", "multi", "t", "iter", "gu", "y", "oi", "ii", "si", "di", "x", "mi"], "sum": ["Sum", "num", "ho", "sat", "met", "total", "h", "zero", " SUM", "stats", "n", "summary", "ash", "v", "tt", "alph", "su", "sa", "doc", "nz", "mean", "mu", "hist", "hd", "count", "index", "match", "mem", "must", "sup", "um", "si", "cum", "ss", "hum", "ul", "sim", "good", "max", "cmp", "alpha", "out", "sam", "average", "hess", "add", "aux", "med", "size", "all", "hash"], "_a": ["___va", " _c", " _b", "___c", "_aa", "_ka", " _aa", "_c", "_va", "___a", "_o", " _o", " _ka", " _va", "___aa", "_b"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n        // \u6574\u6570\u306e\u5165\u529b\\n\t\tint a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int ans = 0;\\n        if (a + b == 3)\\n            ans = 3;\\n        else if (a + b == 4)\\n            ans = 2;\\n        else\\n            ans = 1;\\n\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "236", "substitutes": {"sc": [" cr", "sb", " SC", " ss", " scorer", "sys", "system", "sv", "sp", "cr", " scr", "sa", " sk", " sh", " sw", " sa", "scan", "sq", " Sc", "cs", "ss", "c", "Sc", "SC", "rc", "proc", "ch", " sp"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t//List<String> list= new ArrayList<String>(Arrays.asList(s.split(\"\")));\\n\t\tList<Integer> list=new ArrayList<Integer>();\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tInteger[][] array = new Integer[n][m];\\n\t\tfor(int i=0;m>i;i++) {\\n\t\t\tint a = sc.nextInt();\\n\t\t\tlist.add(a);\\n\t\t}\\n\t\tfor(int i=0;n>i;i++) {\\n\t\t\tfor(int j=0;m>j;j++) {\\n\t\t\t\tint a = sc.nextInt();\\n\t\t\t\tarray[i][j]=a;\\n\t\t\t}\\n\t\t}\\n\t\tint count=0;\\n\t\tfor(int i=0;n>i;i++) {\\n\t\t\tint keisan=0;\\n\t\t\tfor(int j=0;m>j;j++) {\\n\t\t\t\tkeisan=keisan+list.get(j)*array[i][j];\\n\t\t\t}\\n\t\t\tif(keisan+c>0)\\n\t\t\t\tcount++;\\n\t\t}\\n\t\tSystem.out.println(count);\\n\t}\\n}\\n\\n", "target": "68", "substitutes": {"sc": [" SC", " scorer", "cl", "sys", "system", "sv", "sp", "cr", " scr", "sa", "tk", "nl", " sk", "sel", "se", "scan", " Sc", "cs", "ss", "na", "c", " rc", "sk", "Sc", "SC", "rc", "ch", " sp"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int[] a = new int[3];\\n        int five = 0;\\n        int seven = 0;\\n\\n        for(int i = 0; i < a.length; i++){\\n            // System.out.println(i + \"\u6587\u5b57\u76ee\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\");\\n            a[i] = sc.nextInt();\\n        }\\n        for(int i = 0; i < a.length; i++){\\n            if(a[i] == 5){\\n                five++;\\n            } else if(a[i] == 7){\\n                seven++;\\n            }\\n        }\\n        if(five == 2 && seven == 1){\\n            System.out.println(\"YES\");\\n        }else{\\n            System.out.println(\"NO\");\\n        }\\n\\n    }\\n}", "target": "16", "substitutes": {"sc": [" unsc", "sb", " SC", " ss", "ser", "sys", "system", "Scan", "sv", "bc", "sp", " scr", " res", "src", "sw", " sa", "scan", " Sc", "cs", "ss", "c", "Sc", "SC", "rc", "si", "proc", "ch", " sp"], "a": ["another", "ae", "ata", "ca", "ava", "array", "oa", "o", "ta", "zero", "n", "aa", "sta", "sa", "wa", "A", "b", "an", "ga", "ao", "xa", "area", "apa", "ba", "na", "aaa", "aka", "c", "fa", "as", "ma", "t", "p", "ana", "au", "va", "am"], "five": ["hi", "ei", "prime", "red", "some", "zero", "big", "nine", "me", "hello", "less", "major", "z", "dx", "two", "One", "you", "four", "ten", "Five", "one", "e", "be", "eight", "six", "di"], "seven": ["another", "there", "save", " six", "zero", "nine", "Eight", "three", " nine", "many", "third", "even", "then", "hold", "life", "Seven", "two", "you", "four", "ten", "one", "figure", "rown", " eight", "eight", "six"], "i": ["I", "ix", "phi", "gi", "zi", "iu", "hi", "ip", "li", "v", "m", "ij", "n", "ini", "batch", "uu", "ai", "ki", "qi", "b", "u", "z", "j", "bi", "is", "ui", "pi", "k", "ci", "c", "sim", "my", "cli", "multi", "t", "p", "gu", "y", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n      String s = sc.next();\\n      int cnt1 = 0;\\n      int cnt2 = 0;\\n      for(int i = 0;i<s.length();i++){\\n         if(s.charAt(i)=='A'){\\n            cnt1++;\\n         }\\n         if(s.charAt(i)=='B'){\\n            cnt2++;\\n         }\\n      }\\n      if(cnt1>=1&&cnt2>=1){\\n          System.out.println(\"Yes\");\\n       }else{\\n           System.out.println(\"No\");\\n       }         \\n\t}\\n}\\n", "target": "76", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "ser", "bc", "sv", "sp", "cr", "ec", "cle", "sel", "sch", "sw", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "s": ["gs", "sql", "sf", "sb", "l", "rs", "abs", "sys", "h", "sv", "sp", "n", "m", "strings", "ws", "bs", "parts", "S", "os", "spec", "its", "ms", "less", "sw", "ats", "str", "b", "sl", "ls", "sts", "string", "is", "ts", "sq", "bits", "g", "ss", "c", "js", "ds", "gets", "t", "p", "qs", "ps", "xs", "stats", "conv"], "cnt1": ["cst1", " cst51", "nnt0", "crt0", "acnc2", "cnc1", "acnc4", "cncOne", "cctOne", "acntOne", "cstOne", " cst1", "cno4", "count1", "cnt4", "cnc2", "acncOne", "crt3", "nct1", "nct0", " cntOne", "cst0", "nnt1", "cct1", "acnt1", "cno1", "cct4", "nnt3", "cst51", "crandOne", "crt1", "cct3", "cnoOne", " cnt0", "cnc3", "nnt2", "crt2", "nct3", "acnc1", "count0", "cno2", " cnt51", "crand1", "count51", "cnt51", "countOne", "nct2", "cnt3", "cct2", " cst0", "cnt0", "crand0", "acnt4", "crand51", " cstOne", "cnc0", "cntOne", "cct0", "acnt2", "cnc4"], "cnt2": ["cst1", "ccount2", " cndTwo", "cwd1", "cnc02", "cnc1", "vounter1", "cst4", "counter3", "ccount4", "cwd2", " cnd02", "vnt1", "vnt2", "counter1", "cntTwo", "counterTwo", "cnt4", "cnc2", " cnt02", "cwd02", "ccountTwo", "Cnt02", "cnd02", "cct1", "vntTwo", " cnd1", "cct4", "cwdTwo", " cnd2", "vounterTwo", "Cct02", "cnt02", "vnt3", "cnc3", "vounter2", "ccount1", "Cnt4", "cncTwo", "vounter3", "cct02", "Cct4", "cst2", "Cct2", "cnt3", "cct2", "Cnt1", "cnd2", "counter2", "Cct1", "cst02", "cndTwo", " cntTwo", "ccount02", "ccount3", "cnd1", "Cnt2"], "i": ["I", "ix", "ri", "sql", "phi", "gi", "hi", "iu", "ei", "ip", "ji", "li", "id", "n", "m", "ini", "ai", "ni", "ki", "im", "ind", "qi", "a", "b", "ori", "conv", "us", "u", "\u0438", "io", "j", "bi", "it", "slice", "ui", "is", "uri", "pi", "ti", "ic", "ci", "cli", "multi", "t", "gu", "info", "y", "oi", "xi", "ii", "si", "to", "di", "x", "mi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\n// (1) true???????????\\?????????????????????\\n\t// (1.1) ???????????????????\u00b4????????????\u00b0sum???????????????\\n\t// (1.2) ??????????????????????????????\\n\t// (1.3) ?????????0???????????????????????\u00b4????????\\?????????????????????\\n\t\t// (1.3.1) ?????????????????????\\n\t// (1.4) ??????????????????????????????????????\u00b0?????????1??????????????\\?????????????????????\\n\t\t// (1.4.1) ????\u00b1???\u00a8??????1?????????char??????????????????\\n\t\t// (1.4.2) char?????????????????????????????\u00b0?????????????????????\\n\t\t// (1.4.3) ????\u00a8?????????\u00b0sum????????\u00b0???????\u00b6??????????????????????\\n\t// (1.5) sum?????\u00a8?????????\\n\\npublic class Main {\\n\tpublic static void main (String[] args) throws IOException{\\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\n\t\twhile(true){\\n\t\t\tint sum = 0;\\n\t\t\tString num = br.readLine();\\n\\n\t\t\tif (num.equals(\"0\")){\\n\t\t\t\tbreak;\\n\t\t\t}\\n\\n\t\t\tfor (int i = 0;i < num.length();i++){\\n\t\t\t\tchar number = num.charAt(i);\\n\t\t\t\tint numberCal = Character.getNumericValue(number);\\n\t\t\t\tsum += numberCal;\\n\t\t\t}\\n\t\t\tSystem.out.println(sum);\\n\t\t}\\n\t}\\n}", "target": "144", "substitutes": {}}
{"code": "import java.util.*;\\nclass Main{\\n  public static void main(String args[]){\\n    boolean flag = true;\\n    int tmp;\\n    int count = 0;\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int Array [] = new int[n];\\n    //input\\n    for(int i = 0; i<n; i++){\\n      Array[i] = sc.nextInt();\\n    }\\n    //bubblesort\\n    while(flag){\\n      flag = false;\\n      for(int j = n-1; j>0; j--){\\n        if(Array[j]<Array[j-1]){\\n          tmp = Array[j];\\n          Array[j] = Array[j-1];\\n          Array[j-1] = tmp;\\n          count++;\\n          flag = true;\\n        }\\n      }\\n    }\\n    for(int i = 0; i<n-1; i++)System.out.printf(\"%d \",Array[i]);\\n    System.out.println(Array[n-1]);\\n    System.out.println(count);\\n  }\\n}\\n", "target": "170", "substitutes": {"tmp": ["set", " ind", " ptr", "mp", "temp", "ref", "Temp", "ind", " saved", " old", "start", "code", " temp", "arr", "j", "ptr", " np", "obj", " p", "max", " t", "t", "p", " ignored", "x", "map"], "count": ["set", "num", "ount", "ctr", "found", "current", "number", "total", "amount", "v", "sum", "Count", "cache", "index", "code", "list", "pointer", "ptr", "length", "c", "max", "ct", "counter", "pool", "last", "flag", "size"], "sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "bc", "sv", "sp", "dc", "nl", "cle", "sel", "src", "sch", "sync", "tc", "cv", "scan", "sq", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "proc", "ch", "desc", "sub"], "n": ["num", "nu", "d", "nn", "number", "nr", "l", "len", "N", "ns", "m", "v", "dn", "ne", "nan", "nl", "cn", "ni", "sn", "j", "nb", "i", "nc", "na", "nv", "np", "c", "nm", "ng", "t", "nd", "p", "nor", "ln", "nt"], "Array": ["array", "Buffer", " array", "N", "Amount", "aw", "Ar", "Count", "arr", "Current", "Vector", "Number", "Impl", "Values", "Cache", "Memory", "rays", "Value", "Bytes", "uments"]}}
{"code": "import java.util.Scanner;\\nimport java.util.Scanner;\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        // write your code here\\n        Scanner scr = new Scanner(System.in);\\n        int s =scr.nextInt();\\n        int[] ip= new int[s];\\n        for(int i=0;i<s;i++){\\n            ip[i]= scr.nextInt();\\n        }\\n        int[] op= new int[s];\\n        for(int i=0;i<s;i++){\\n            op[ip[i]-1]=i+1;\\n        }\\n        for (int g: op\\n             ) {\\n            System.out.print(g+\" \");\\n        }\\n    }\\n}\\n", "target": "227", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n    public static void main(String[] args) throws Exception{\\n\\n        int num = 10000;\\n\\n        Scanner sc = new Scanner(System.in);\\n\\n        for (int i = 1; i <= num; i++) {\\n            int x = sc.nextInt();\\n            if(x == 0){\\n                break;\\n            }\\n            System.out.println(\"Case \"+ i + \": \" + x);\\n        }\\n\\n\\n    }\\n}", "target": "97", "substitutes": {"num": ["valid", "nu", "cal", "dim", "con", "number", "NUM", "total", "perm", "tmp", "n", "m", "nine", "nom", "alph", "top", "sum", "mon", "count", "index", "um", "no", "nb", "Number", "na", "np", "Num", "conf", "nm", "max", "mult", "multi", "nam", "anon", "size", "conv"], "sc": ["usc", "set", "lc", "acc", "anc", "esc", "cur", "dec", "sec", "cl", "sys", "sh", "cr", "sp", "bc", "tk", "cle", "sel", "spec", "sch", "enc", "sync", "tc", "scan", "sq", "cs", "sci", "nc", "pb", "c", "osc", "Sc", "gc", "exp", "asc", "scl", "isc", "SC", "mc", "pc", "conv", "ch", "desc"], "i": ["q", "I", "ix", "ri", "phi", "hi", "zi", "iu", "ip", "ji", "li", "id", "m", "ij", "me", "ini", "in", "batch", "ai", "ki", "mu", "im", "ind", "qi", "index", "ik", "init", "u", "ims", "j", "bi", "it", "ui", "is", "ie", "pi", "g", "ti", "ic", "ci", "sim", "yi", "multi", "iq", "iter", "oi", "xi", "ii", "si", "di", "mi"], "x": ["ix", "ex", "wx", "ax", "php", "ox", "v", "xf", "lat", "xy", "tx", "xe", "xx", "index", "f", "px", "xc", "z", "xa", "dx", "lex", "xxxx", "xxxxxxxx", "mx", "xt", "xxx", "xd", "my", "X", "exp", "t", "rx", "ux", "y", "xi", "xs", "xp", "fx"]}}
{"code": "import java.util.*;\\n//import java.util.Math.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n\\n    Scanner sc = new Scanner(System.in);\\n    int n = sc.nextInt();\\n    int A[] = new int[n];\\n    int i;\\n    int count = 0;\\n    \\n    for(i = 0; i < n; i++){\\n        A[i] = sc.nextInt();\\n//        System.out.println(isprime(A[i]));\\n        if(isprime(A[i]) == true){\\n            count++;\\n        }\\n    }\\n \\n    System.out.println(count);\\n    \\n    }\\n    \\n    public static boolean isprime(int x){\\n        int i = 0;\\n       // System.out.println(x);\\n        if(x == 2){\\n            return true;\\n        }else if((x % 2) == 0){\\n            return false;\\n        }else{\\n            i = 3;\\n            while(i <= Math.sqrt(x)){\\n                if((x % i) == 0){\\n                    return false;\\n                }\\n                i = i + 2;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\\n", "target": "226", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int w = sc.nextInt();\\n        int n = sc.nextInt();\\n        int array[] = new int[w];\\n        for (int i = 0; i < w; i++) array[i] = i+1;\\n        for (int i = 0; i < n; i++){\\n            String line = sc.next();\\n            String spl[] = line.split(\",\");\\n            int a = Integer.parseInt(spl[0]) - 1;\\n            int b = Integer.parseInt(spl[1]) - 1;\\n            int tmp = array[a];\\n            array[a] = array[b];\\n            array[b] = tmp;\\n        }\\n        for (int i = 0; i < w; i++){\\n            System.out.println(array[i]);\\n        }\\n    }\\n}", "target": "156", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "ser", "sh", "sv", "sp", "bc", "cr", "dc", "ctl", "sel", "irc", "sch", "sw", "sync", "fc", "tc", "ctrl", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "c", "osc", "cmp", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "st"], "w": ["q", "wall", "r", "wcs", "wx", "d", "work", "wl", "wo", "wb", "wt", "l", "wp", "h", "m", "v", "ew", "aw", "wi", "ws", "iw", "wa", "wn", "width", "wal", "sw", "wid", "rw", "wd", "W", "win", "hw", "z", "g", "wr", "k", "nw", "t", "wh", "p", "we", "y", "kw", "x", "wind", "window"], "n": ["nu", "r", "name", "d", "nn", "l", "un", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "ni", "sn", "z", "j", "no", "na", "k", "fn", "nc", "np", "en", "c", "nw", "nm", "t", "p", "network", "nor", "ln", "y", "net", "nt", "x", "non"], "array": ["save", "result", "ray", "Array", "archive", "row", "ar", "equality", "number", "var", " Array", "address", "replace", "now", "amount", "value", "v", "attribute", "aw", "option", "ion", "pair", "database", "actor", "section", "form", "auto", "cache", "map", "ance", "list", "RAY", "audio", "instance", "object", "collection", "arr", "range", "variable", "history", "our", "share", "string", "sequence", "component", "sort", "index", "message", "vector", "area", "data", "length", "table", "memory", "ape", "store", "record", "my", "air", "angle", "storage", "ary", "integer", "arrow", "rays", "angular", "view", "library", "function", "window", "hash"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "go", "ims", "is", "eu", "ic", "ami", "oi", "y", "di", "x", "l", "ip", "ji", "point", "o", "id", "ij", "in", "client", "iti", "io", "bi", "it", " I", "g", "ci", "sim", "cli", "s", "ii", "span", "phi", "hi", "cgi", "progress", "this", "print", "ind", "u", "pi", "p", "gu", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "wi", "im", "qi", "index", "init", "ies", "j", "ity", "ui", "ie", "ti", "multi", "to"], "line": ["block", "Line", "name", "pixel", "row", "l", "inline", "entry", "chain", "point", "log", "in", "pe", "nl", "ste", "detail", "file", "cell", "lines", "le", "lin", "str", "se", "shell", "sl", "range", "frame", "string", "comment", "LINE", "text", "online", "eline", "link", "liner", "char", "label", "ln", "lf", "page", "rule", "ine"], "spl": ["spot", "split", "snap", "sb", "expl", "sec", "sol", "kl", "cl", "pl", "sh", "ipp", "sv", "sp", "jo", "perm", "ch", "sd", "spe", " Spl", "nl", "pol", "SP", "unk", "sel", "ipl", "sch", "pp", "sw", "form", "se", "sl", "sing", "tap", "isl", "decl", "div", "sci", "pel", "Spl", "sk", "sam", "scl", "plug", "dis", " SPL", "pack", " sp"], "a": ["ae", "ca", "ar", "aq", "eta", "l", "oa", "qa", "ta", "m", "aa", "da", "sa", "al", "ak", "ai", "ja", "act", "A", "at", "ia", "an", "la", "ga", "ao", "ab", "ea", "pa", "ba", "na", "aaa", "c", "aj", "air", "alpha", "ap", "ma", "t", "as", "p", "ac", "au", "va", "am"], "b": ["br", "r", "d", "sb", "ob", "l", "h", "bar", "o", "bc", "v", "m", "bs", "lb", "f", "bd", "eb", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "g", "ba", "k", "c", "e", "t", "s", "p", "bb", "cb", "y", "be", "rb", "x", "B", "abb"], "tmp": ["mm", "tv", "mp", "timeout", "mb", "temp", "bow", "perm", "prefix", "sp", "cp", "tt", "tf", "buff", "attr", "same", "lib", "xy", "td", "ret", "img", "mmm", "ror", "yy", "tc", "MP", "test", "pkg", "nb", "aaa", "np", "emp", "xxx", "obj", "cmp", "txt", "vt", "t", "etc", "pretty", "ctx", "proc", "rb", "amp"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n\tfinal static long MOD = 1000000007;\\n\tpublic static String[] Ws = null;\\n\tpublic static int wsIndx = 0;\\n\tpublic static BufferedReader in = null;\\n\tpublic static void main(String[] args) throws Exception {\\n\\n\t\tint N=nextInt();\\n\t\tint K=nextInt();\\n\t\tint Q=nextInt();\\n\t\tint[] A = new int[Q];\\n\t\tint[] x = new int[N];\\n\t\tArrays.fill(x, 0);\\n\t\tfor(int i=0;i<Q;i++){\\n\t\t\tA[i] = nextInt();\\n\t\t\tx[A[i]-1]++;\\n\t\t}\\n\t\tfor(int i=0;i<x.length;i++){\\n\t\t\tif(K-Q+x[i]<=0){\\n\t\t\t\tSystem.out.println(\"No\");\\n\t\t\t}else{\\n\t\t\t\tSystem.out.println(\"Yes\");\\n\\n\t\t\t}\\n\\n\t\t}\\n\\n\t}\\n\\n\\n\tpublic static void check() throws Exception{\\n\t\tif(in == null){\\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tif(Ws==null || Ws.length<=wsIndx){\\n\t\t\tWs = in.readLine().split(\" \");\\n\t\t\twsIndx=0;\\n\t\t}\\n\t}\\n\tpublic static int nextInt()throws Exception{\\n\t\tcheck();\\n\t\treturn Integer.parseInt(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static long nextLong()throws Exception{\\n\t\tcheck();\\n\t\treturn Long.parseLong(Ws[wsIndx++]);\\n\t}\\n\\n\tpublic static String nextString()throws Exception{\\n\t\tcheck();\\n\t\treturn Ws[wsIndx++];\\n\t}\\n\\n\tpublic static int[] nextInts()throws Exception{\\n\t\tcheck();\\n\t\tint[] tmp = new int[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Integer.parseInt(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static long[] nextLongs()throws Exception{\\n\t\tcheck();\\n\t\tlong[] tmp = new long[Ws.length];\\n\t\tfor(int i=0;i<tmp.length;i++){\\n\t\t\ttmp[i]=Long.parseLong(Ws[i]);\\n\t\t}\\n\t\twsIndx=Ws.length;\\n\t\treturn tmp;\\n\t}\\n\\n\tpublic static String[] nextStrings()throws Exception{\\n\t\tcheck();\\n\t\twsIndx=Ws.length;\\n\t\treturn Ws;\\n\t}\\n\\n\\n}\\n", "target": "102", "substitutes": {"MOD": ["offset", " BASE", " MAX", "Mod", " PID", " U", " Mod", " MAG", " JD", "DX", " LOG", " stamp", " CAS", " Max", " CRC", " magic", "\u4f5c", " ID", "mod", "max", " clen", " mod", " mu", " M", "MAX", "UID"], "Ws": ["gs", "Ring", "Wo", "Wr", "WB", "Has", "Sys", "Words", "War", "wt", "Win", "Parts", "WC", "Lens", "ns", "Wa", "Hundreds", "Ins", "Witness", "WT", "Vs", "ws", "Es", "Wed", "Wire", "Inv", "Windows", "Dest", "NS", "ews", "Fs", "Bs", "Vers", "W", "In", "FS", "Msg", "Sax", "Js", "Rs", "Ts", "Us", "Str", "Wh", "Posts", "RW", " WS", "WS", "Tx", "Socket", "GS", "We", "Its", "Xi", "Args", "qs", "West", "xs", "Bytes", "Wars", "LS", "Works", "Ns"], "wsIndx": ["wsIndix", "WSPtrx", "wsIndX", "hsIndlex", "wsPtrxt", "wsindxi", "nsIndexix", "wsBindix", "wsIndex", "wsINDlex", "wsindy", "gsBindix", "wsindix", "gsBindxi", "wsInsx", "wsindx", "WSIndx", "WSPtrxt", "wsIndlex", "WSIndix", "wsIndxt", "wsIndexX", "wsPredex", "nsIndix", "wsBindex", "gsIndx", "wsPtry", "WSIndv", "wsINDx", "wsBindxi", "hsINDix", "gsIndxi", "wsIdx", "Wsindw", "WSPtry", "wsIndco", "WSIndy", "wsIntx", "wsINDxc", "WSIndX", "hsINDx", "gsBindx", "wsIndy", "wsIdw", "nsIndx", "wsIntco", "WSIdy", "nsIndxc", "wsPredxt", "gsIndex", "wsPtrix", "Wsindx", "wsIndv", "wsIndexlex", "hsINDX", "gsBindex", "hsIndix", "nsIndexx", "WsIndex", "WSIndco", "wsPtrex", "wsIdex", "nsIndy", "hsIndx", "wsIndexx", "wsIndxi", "wsINDix", "WSIdex", "wsIntex", "wsInsX", "hsINDlex", "WSPtrv", "wsIndexy", "hsIndX", "wsIndw", "WSIndex", "WSPtrco", "WSIdx", "WsIndx", "wsPtrx", "wsPredco", "wsIndxc", "wsIdy", "wsindw", "wsIndexix", "wsIdxi", "wsPtrv", "wsIntxt", "nsIndexy", "WSIdix", "wsINDy", "wsInslex", "nsIndexxc", "wsindex", "wsIndexv", "wsINDX", "WSPtrX", "wsPtrco", "wsPtrX", "WsIndix", "WsIndw", "wsIndexxc", "wsPtrxc", "wsIdix", "gsIndix", "wsINDv", "Wsindix", "wsPredx", "WSIndxt", "WSPtrex", "Wsindex", "wsBindx", "wsInsix"], "in": ["again", "r", "mm", "gin", "bin", "from", "con", "inf", "ar", "l", "isin", "o", "h", "log", " out", "inc", "n", "m", "ini", "err", "ws", "lo", "inn", "rin", "file", "IN", "mr", "serv", "or", "b", "on", "In", "init", "nin", "reader", "it", "null", "din", "is", "stream", "inner", "pi", "ic", "c", "ins", "input", "inside", "inv", "conf", "old", "out", "w", "t", "s", "p", "cin", "ln", "re", "mc", "net"], "N": ["Z", "I", "D", "F", "E", "ND", "NI", "NB", "n", "No", "G", "S", "P", "T", "NL", "NS", "Na", "NR", "V", "M", "NC", "H", "C", "NA", "Y", "L", "J", "X", "NN", "NT", "B", "Ns"], "K": ["Z", "I", "D", "F", "B", "KING", "KE", "KA", "KK", "Ku", "KS", "G", "S", "KI", "P", "T", "R", "V", "M", "W", "H", "C", "U", "k", "KR", "Y", "L", "J", "Ky", "X", "PK", "SK", "KY"], "Q": ["Z", "q", "I", "D", "F", "BL", "E", "NE", "Ku", "NB", "O", "G", "Qu", "MQ", "S", "P", "T", "R", "UE", "V", "QU", "W", "M", "CH", "H", "C", "U", "Query", "Y", "L", "J", "IQ", "X", "FF", "Length", "B", "Qual"], "A": ["Z", "AA", "I", "Array", "App", "Ac", "Am", "AU", "ax", "E", "Alpha", "CA", "AE", "AC", "All", "Ax", "At", "As", "SA", "S", "P", "Ar", "T", "R", "a", "V", "This", "H", "AP", "C", "AM", "U", "AB", "An", "Y", "L", "ap", "alpha", "X", "ac", "AX", "Area", "mA", "B", "AT"], "x": ["q", "ix", "ex", "wx", "ax", "ox", "l", "xml", "h", "v", "n", "xf", "xy", "tx", "a", "xx", "b", "f", "px", "xc", "z", "xa", "xes", "lex", "xt", "mx", "c", "e", "w", "out", "X", "t", "s", "p", "rx", "ux", "ctx", "y", "xs", "xi", "xp"], "i": ["set", "New", "ix", "zi", "iu", "base", "ei", "li", "impl", "free", "me", "batch", "ai", "ki", "f", "ims", "is", "ic", "MI", "c", "ios", "parent", "ami", "y", "oi", "Print", "di", "ri", "fi", "current", "chain", "ip", "ji", "point", "o", "id", "ij", "series", "client", "io", "slice", "bi", "it", "ci", "sim", "cli", "s", "ii", "span", "phi", "hi", "cgi", "jo", "remote", "this", "print", "ni", "ger", "list", "ia", "u", "\u0438", "fire", "pi", "json", "my", "xi", "si", "mi", "println", "I", "gi", "_", "iy", "m", "ini", "wi", "ice", "im", "qi", "us", "init", "ies", "j", "ity", "ui", "uri", "ie", "ti", "port", "PI", "multi", "info"], "tmp": ["timeout", "mb", "bsp", "prefix", "sp", "proxy", "MP", "qq", "mint", "bt", "cmp", "tab", "pretty", "xs", "proc", "st", "trap", "temp", "wp", "db", "resp", "src", "ret", "rm", "mmm", "yy", "pkg", "tm", "mk", "partial", "rup", "table", "tn", "txt", "sam", "dump", "appy", "result", "tif", "mp", "tp", "important", "Temp", "stuff", "xy", "amps", "cache", "auto", "test", "zip", "nb", "pot", "emp", "nm", "etc", "p", "mm", "empty", "abs", "perm", "cp", "tt", "tf", "buff", "td", "buf", "img", "aaa", "np", "obj", "storage", "t", "fake", "up", "aux", "nt", "amp"]}}
{"code": "\\nimport java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint x = sc.nextInt();\\n\t\t\\n\t\tint []d = new int [n+1];\\n\t\td[0] = 0;\\n\t\tint j;\\n\t\tint bound = 1;\\n\t\tfor( j = 1; j <= n ; j++) {\\n\t\t\tint l = sc.nextInt();\\n\t\t\td[j] = d[j - 1] + l;\\n\t\t\tif (d[j] <= x) \\n\t\t\t\tbound++;\\n\t\t\telse {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t\\n\t\t}\\n\t\tSystem.out.println(bound);\\n\\n\t}\\n\\n}\\n", "target": "130", "substitutes": {}}
{"code": "/*\\n *  author : Atul Anand   \\n *  created on : Fri Apr 03 2020\\n */\\n\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main{\\n\\n    public static void main(String[] args) throws IOException {\\n        int N = in.nextInt();\\n        int p[] = new int[N];\\n        int mismatch = 0;\\n        for(int i = 0; i < N; i++){\\n            p[i] = in.nextInt() - 1;\\n            if(p[i] != i){\\n                mismatch++;\\n            }\\n        }\\n        if(mismatch <= 2){\\n            println(\"YES\");\\n        }\\n        else{\\n            println(\"NO\");\\n        }\\n        in.close();\\n        out.close();\\n    }\\n\\n    static int MIN = Integer.MIN_VALUE;\\n    static int MAX = Integer.MAX_VALUE;\\n    static Reader in = new Reader();\\n    static PrintWriter out = new PrintWriter(System.out);\\n\\n    static void read(int arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextInt(); \\n    \t} \\n    }\\n    \\n    static void read(long arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.nextLong(); \\n    \t} \\n    }\\n    \\n    static void read(String arr[], int N) throws IOException { \\n    \tfor(int i = 0; i < N; i++){ \\n    \t\tarr[i] = in.next(); \\n    \t} \\n    }\\n    \\n    static void print(Object O) {  \\n    \tout.print(O); \\n    }\\n    \\n    static void println(Object O) { \\n    \tout.println(O); \\n    }\\n    \\n    static void println(int arr[]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprint(arr[i]+\" \"); \\n    \t} \\n    \tprintln(\"\"); \\n    }\\n\\n    static void println(int arr[][]) { \\n    \tfor(int i = 0; i < arr.length; i++){ \\n    \t\tprintln(arr[i]); \\n    \t}\\n    }\\n    \\n    static void debug(Object O) { \\n    \tSystem.out.println(O); \\n    }\\n}\\n\\nclass Reader {\\n    BufferedReader reader;\\n    StringTokenizer tokenizer;\\n\\n    Reader() {\\n        reader = new BufferedReader(new InputStreamReader(System.in));\\n        tokenizer = new StringTokenizer(\"\");\\n    }\\n\\n    String next() throws IOException {\\n        while (!tokenizer.hasMoreTokens() ) { \\n            tokenizer = new StringTokenizer(reader.readLine()); \\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    int nextInt() throws IOException { \\n        return Integer.parseInt(next()); \\n    }\\n    \\n    double nextDouble() throws IOException { \\n        return Double.parseDouble(next());\\n    }\\n    \\n    long nextLong() throws IOException { \\n        return Long.parseLong(next()); \\n    }\\n    \\n    String nextLine() throws IOException { \\n        return reader.readLine(); \\n    }\\n    \\n    void close() throws IOException { \\n        reader.close(); \\n    }\\n}", "target": "82", "substitutes": {"N": ["New", "D", "I", "Node", "TN", "Z", "F", "FN", "Body", "NM", "ND", "SN", "NP", "NE", "NB", "n", "No", "G", "S", "P", "IN", "NG", "T", "NO", "NL", "R", "Count", "NS", "Q", "A", "NR", "V", "NH", "M", "Log", "None", "AN", "Len", "GN", "H", "NC", "C", "Number", "NN", "NA", "Num", "L", "Y", "K", "J", "NOTE", "Max", "Length", "NI", "NT", "B", "Ns"], "p": ["q", "pn", "ping", "d", "mp", "l", "ip", "tp", "o", "sp", "n", "m", "v", "cp", "lp", "rep", "pe", "pg", "per", "bp", "P", "pp", "pid", " P", "pos", "j", "pers", "par", "pr", "pa", "pi", "pb", "np", "c", "jp", "ap", "t", "up", "ps", "x"], "mismatch": ["mirmism", "mISMatched", "missay", "mistmatch", "mirmiff", "Mismism", "dissay", "mirmay", "missmatch", "emistatch", "dismay", "dismism", "mmark", "mISMiff", "mmmatched", "mismism", "mismay", "mistism", "dissatch", "Mismatched", "emismism", "dismatch", "missark", "mirmmatch", "Mismmatch", "missatched", "mmatch", "emismmatch", "mmmism", "missism", "mismatched", "mirmatch", "emistiff", "mmism", "dismark", "mmay", "mISMatch", "mistiff", "missatch", "MISMatched", "MISMmatch", "mismiff", "MISMatch", "dissark", "emistmatch", "dissism", "mismmatch", "emistism", "mISMism", "Mismatch", "MISMism", "mISMmatch", "mistatch", "mirmark", "mismark", "emismiff", "mmmmatch", "emismatch", "mmmatch"], "i": ["set", "q", "ix", "zi", "iu", "ei", "base", "li", "n", "me", "batch", "ai", "ki", "f", "ims", "history", "is", "you", "ic", "c", "e", "ios", "parent", "ami", "y", "oi", "di", "x", "ri", "fi", "l", "chain", "ip", "ji", "point", "o", "id", "ij", "source", "client", "io", "bi", "it", "g", "k", "ful", "ci", "sim", "cli", "ii", "ex", "phi", "hi", "php", "dr", "remote", "this", "ni", "ind", "list", "ia", "u", "fire", "\u0438", "pi", "et", "my", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "err", "P", "ski", "ice", "im", "qi", "index", "us", "init", "ies", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "integer", "info", "t", "to"], "MIN": ["VERSION", "MO", "BL", "NUM", "Min", "NE", "NPR", "Default", "LE", "IN", "NO", "FAULT", "STAT", "ME", "min", "NR", "MED", "M", "Minimum", "BY", "Mini", "VAL", "VALUE", "VER", "NI", "KEY"], "MAX": ["VERSION", "GEN", "MA", "MH", "NUM", "SIZE", "ALL", " max", "WH", "MOD", "FAULT", "GE", "MED", "M", "CAN", "EST", "MAP", "GER", "FFFF", "max", "X", "MX", "AX", "VALUE", "Max", "Maximum", "KEY"], "in": ["q", "r", "mm", "ri", "gin", "d", "bin", "inf", "from", "con", "l", "o", "log", "h", "inc", "n", "m", "ini", "source", "read", "by", "doc", "inn", "file", "rin", "IN", "get", "serv", "client", "or", "im", "form", "ind", "at", "lin", "f", "on", "In", "init", "io", "win", "it", "din", "is", "stream", "inner", "ic", "en", "ins", "input", "conf", "old", "local", "t", "cin", "iter", "info", "re", "add", "net", "all", "window"], "out": ["ou", "r", "end", "ex", "outer", "bin", "con", "writer", "error", "co", "log", "o", "put", "sys", "server", "v", "n", "conn", "ch", "console", "err", "exit", "ro", "print", "OUT", "os", "file", "sum", "report", "write", "client", "user", "cache", "auto", "at", "list", "io", "it", "aos", "Out", "null", "lock", "screen", "OU", "table", "c", "obj", "output", "input", "txt", "pool", "ot", "w", "t", "pretty", "net", "all", "to", "nt", "line", "outs"], "arr": ["br", "r", "av", "coll", "emb", "ras", "ll", "row", "array", "mb", "n", " str", "batch", "Ar", "arg", "str", "inst", "pr", "data", "def", "ARR", "all", "res", "ars", "x", "map", "rr", "vals", "ele", "vec", "aa", "app", "db", "resp", "alph", "attr", "lay", "ang", "z", "rest", "arb", "fr", "exp", "iq", "ag", "conv", "dat", "Array", "att", "ar", "var", "dr", "tr", "stock", "rep", "bl", "val", "dict", "arm", "hist", "list", "ptr", "rel", "hash", "addr", "save", "ray", "pl", "v", "err", "enc", "buf", "img", "j", "repl", "par", "ab", "vol", "aaa", "obj", "aj", "nt", "ev", "gr"], "O": ["PO", "I", " o", "F", "OO", "OC", "E", "oo", "o", "OD", "GO", "OX", "IO", "OU", "OS", "P", "OUT", "T", "DO", "R", "SO", "V", "M", "W", "OL", "VO", "Obj", "Out", "OT", "OTO", "Os", "H", "C", "U", "OK", "OG", "Y", "L", "J", "OB", "OR", "OH", "B", "TO"], "reader": [" trainer", "loader", "rr", "r", "driver", "row", "rar", " readable", " scorer", "writer", "builder", " reading", "holder", " parser", "reading", "read", "handler", "mr", "Reader", "yer", " viewer", " read", "runner", "buffer", " writer", "board", "parser", "rer", " ruler", "rl", "ner", "inner", "stream", "anger", "linger", "iterator", "input", "er", "iter", "rx", " scanner", " waiter"], "tokenizer": [" tokenization", " tokenifier", "tokenizing", "Tokenizer", "Tokenizing", "wordifier", "Tokenization", "serialization", "Tokenizers", " tokenizing", "serialifier", "tokenizers", "recognizer", "tokenization", "wordizers", "wordization", "serializer", " tokenizers", "tokenifier", "recognizing", "recognizers", "wordizer", "recognization", "serializers"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\n\\npublic class Main {\\n\\n    /**\\n     * @param args\\n     * @throws IOException\\n     * @throws NumberFormatException\\n     */\\n    public static void main(String[] args) throws NumberFormatException,\\n            IOException {\\n\\n        BufferedReader reader = new BufferedReader(new InputStreamReader(\\n                System.in));\\n\\n        int len = Integer.parseInt(reader.readLine());\\n        int[] arr = new int[len];\\n\\n        String line;\\n\\n        for (int i = 0; i < len; i++) {\\n            line = reader.readLine();\\n            arr[i] = Integer.parseInt(line);\\n        }\\n        \\n        int resultCount = 0;\\n        for (int j = 0; j < arr.length; j++) {\\n            if (isPrime(arr[j])) {\\n                resultCount++;\\n            }\\n        }\\n\\n        System.out.println(resultCount);\\n\\n    }\\n\\n    \\n//  ??????function prime(n) {\\n//  ????????????if (n <= 3) return 0; ????????????if ((n % 2) == 0) return 0;\\n//  ????????????for(i=3; i<=Math.sqrt(n); i++) {\\n//  ??????????????????if ((n % i) == 0) return 0;\\n//  ????????????}\\n//  ????????????return 1;\\n//  ??????}\\n    private static boolean isPrime(int value) {\\n\\n        if(value == 2) return true;\\n        if(value ==  3) return true;\\n        if(value ==  5) return true;\\n        if(value ==  7) return true;\\n        \\n        if(value % 2 == 0) return false;\\n        if(value % 3 == 0) return false;\\n        if(value % 5 == 0) return false;\\n        if(value % 7 == 0) return false;\\n\\n        int max = (int) Math.sqrt(value);\\n        \\n        \\n        for (double i = 8; i <= max; i ++ ) {\\n//            System.out.println(\"value:\"+ value +\" i:\" + i +\" r \" + (value % i));\\n            if (value % i == 0) return false;\\n        }\\n        \\n        return true;\\n    }\\n\\n}", "target": "226", "substitutes": {"reader": ["loader", "rr", "r", "driver", "cur", "row", "rar", "writer", "dd", "entry", "reads", "http", "author", "reading", "dr", "rd", "bridge", "read", "per", "ro", "handler", "client", "Reader", "runner", "rot", "service", "req", "buffer", "io", "parser", "oder", "rl", "inner", "ner", "redo", "iterator", "older", "er", "iter", "rx", "upper", "rc", "query"], "len": ["num", "il", " length", "elt", "limit", "ll", "el", "hl", "l", "kl", "total", "li", "cl", "sp", "n", "lp", "nl", "seq", "bytes", "val", "le", "ret", "lim", "str", "lon", "count", "pos", "ls", "Len", "length", "lvl", "en", "ell", "fl", " clen", "L", "t", "ln", "lf", "ld", "size", "Length", "all", "nt", "lan", "del"], "arr": ["dat", "br", "rr", "r", "addr", "elt", "av", "coll", "ray", "Array", "att", "cur", "array", "arch", "ar", "vals", "rs", "var", "pl", "gb", "dr", "db", "tr", "stock", "alph", "bl", "parts", "attr", "ars", "Ar", "val", "dict", "buf", "art", "ang", "img", "list", "inst", "stack", "our", "repl", "par", "pr", "vol", "aaa", "arb", "ell", "rel", "angle", "fr", "ARR", "au", "expr", "all", "rb", "gr", "map"], "line": ["block", "Line", "key", "row", "base", "l", "error", "entry", "inline", "part", "chain", "stroke", "word", "err", "ne", "raw", "lo", "nl", "file", "cell", "print", "section", "le", "user", "str", "inter", "lane", "se", "code", "phrase", "list", "frame", "string", "comment", "no", "LINE", "zone", "piece", "display", "eline", "link", "liner", "label", "ln", "page", "rule", "query", "ine", "next"], "i": ["q", "I", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "ei", "chain", "ip", "point", "li", "o", "v", "m", "ij", "me", "ini", "in", "batch", "this", "print", "ai", "ms", "im", "ind", "ori", "qi", "index", "us", "init", "ims", "bi", "it", "ui", "is", "ie", "uri", "pi", "inner", "ti", "ci", "c", "sim", "my", "PI", "multi", "iq", "s", "iter", "ami", "y", "ii", "si", "di", "x", "mi"], "resultCount": ["resultcount", "resultRate", "resultContent", "totalCount", "ResultPtr", " resultNum", "rowContent", "totalPtr", "ResultContent", "runnerRate", " resultRate", "runnerMax", " resultCode", " resultcount", "resultNum", "ResultCounter", "resultCounter", "totalcount", "totalCode", "rowMax", " resultPtr", "rowRate", " resultCounter", "ResultNum", "ResultCode", "resultMax", "runnerCounter", "rowNum", " resultMax", "ResultCount", "rowCounter", "resultPtr", " resultContent", "runnerCount", "resultCode", "rowCount", "Resultcount"], "j": ["br", "q", "jac", "ix", "pt", "key", "ax", "att", "ev", "jl", "ji", "jj", "v", "ij", "m", "err", "jump", "msg", "state", "ja", "im", "ind", "bj", "b", "oj", "job", "z", "it", "pr", "uj", "g", "json", "k", "js", "obj", "aj", "jp", "J", "ph", "other", "fr", "jet", "kj", "y", "jc", "je", "kid", "dj"]}}
{"code": "import java.util.*;\\nclass Main {\\n    public static void main(String []args) {\\n        Scanner scn= new Scanner(System.in);\\n        int x= scn.nextInt();\\n        int n=scn.nextInt();\\n        int []arr= new int[n];\\n        HashSet<Integer> map= new HashSet<>();\\n        for(int i=0;i<n;i++){\\n            arr[i]=scn.nextInt();\\n            map.add(arr[i]);\\n        }\\n        int diff=0;\\n        while(true){\\n            int no=x-diff;\\n            if(!map.contains(no)){\\n                System.out.println(no);\\n                return;\\n            }\\n            no=x+diff;\\n            if(!map.contains(no)){\\n                System.out.println(no);\\n                return;\\n            }\\n            diff++;\\n        }\\n    }\\n}", "target": "228", "substitutes": {"scn": ["scr", "escr", "scne", " scnu", "Scn", "scann", "escn", "corner", "Scon", " scg", "Scne", "esccn", "uscne", " sccn", " scnw", "scnw", " scr", "corln", "scang", " scon", "cusn", "uscn", "scner", "Scr", " scne", "uscnu", "scon", "cornu", "scancn", " scner", "corne", "sccn", "escne", "escg", " scln", "escon", "corn", "cusnw", "scg", "scln", "cusnn", "cornw", "scnu", " scnn", "scanne", "uscner", "scnn", "cusln", "cornn"], "x": ["ix", "ex", "wx", "d", "ax", "co", "h", "o", "v", "m", "xf", "xy", "tx", "xe", "xx", "index", "f", "on", "px", "xc", "z", "xa", "dx", "mx", "xt", "max", "e", "w", " xx", "X", "t", "rx", "p", "y", "xi", "xs", "ox"], "n": ["nu", "num", "r", "mn", "name", "d", "nn", "l", "number", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ni", "nat", "sn", "f", "on", "z", "j", "g", "na", "nc", "k", "np", "en", "c", "w", "t", "ng", "p", "y", "net", "nt"], "arr": ["dat", "br", "addr", "r", "ix", "elt", "av", "coll", "ray", "ll", "Array", "ax", "att", "array", "ar", "agg", "rs", "var", "pl", "now", "app", "dr", "aa", "alph", "bl", "batch", "attr", "Ar", "val", "dict", "enc", "act", "ind", "art", "img", "ack", "inst", "stack", "our", "pr", "ab", "unch", "arb", "aaa", "ord", "rel", "obj", "air", "fr", "iq", "au", "gr", "expr"], "map": ["set", "block", "group", "key", "mask", "mp", "pose", "place", "mb", "master", "pl", "tree", "ref", "sp", "m", "app", "bridge", "cap", "make", "mg", "this", "print", "ms", "dict", "cache", "shape", "view", "list", "load", "match", "maps", "MAP", "lock", "collect", "help", "open", "table", "ape", "store", "mt", "cmp", "ap", "use", "check", "local", "window", "hash"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "details", "used", "ei", "fi", "chain", "ip", "ji", "li", "id", "m", "ini", "in", "batch", "ai", "ms", "client", "im", "ind", "qi", "ori", "us", "init", "u", "io", "sequence", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "ti", "ic", "ci", "sim", "my", "multi", "info", "gu", "ami", "y", "ii", "si", "di", "mi"], "diff": ["dl", "num", "ex", "d", "fail", "nn", "df", "shift", "row", "Delta", "fd", "dd", "different", "failed", "part", "draw", "error", "iff", "default", "distance", "change", "pair", "erence", "dirty", "Diff", "sect", " Diff", "inter", "index", "pos", "test", "range", "dist", "dev", "exist", "nb", "fix", "dx", "div", "dust", "patch", "help", "mix", "changed", "step", "debug", "cmp", "sample", "def", "nd", "dis", " difference", "add", "del", "split"], "no": [" NO", "ho", "nu", "num", "name", "wo", "mo", "nn", "nos", "nr", "error", "co", "ano", "oo", "o", "zero", "node", "fo", "po", "ne", "No", "ko", "sha", "lo", "ket", "ni", "yes", " No", "NO", "go", "orno", "index", "pos", "eno", "too", "news", "nob", "na", "none", "bo", "never", "ma", "nor", "stable", "net", "nt", " mo"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tOriginScanner os = new OriginScanner();\\n\t\tPrintWriter pw = new PrintWriter(System.out);\\n\t\t\\n\t\tint h = os.nextInt();\\n\t\tint i = os.nextInt();\\n\t\t\\n\t\tfor (int n = 0; n < i; n++) {\\n\t\t\tint a = os.nextInt();\\n\t\t\th -= a;\\n\t\t}\\n\t\tString result = h < 1 ? \"Yes\" : \"No\";\\n\t\tpw.println(result);\\n\t\tpw.close();\\n\t}\\n\t\\n\tstatic class OriginScanner {\\n\t\tprivate BufferedReader br;\\n\t\tprivate StringTokenizer st;\\n\t\t\\n\t\tpublic OriginScanner() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tString nextLine() {\\n\t\t\tString str = null;\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t}\\n\t\t\tcatch (IOException e) {\\n\t\t\t\tSystem.out.println(e);\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t\tString next() {\\n\t\t\tif (st == null || !st.hasMoreTokens()) {\\n\t\t\t\tst = new StringTokenizer(nextLine());\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\t}\\n}\\n", "target": "95", "substitutes": {"os": ["oses", "oS", "cos", "rs", "oos", "oss", "sys", "o", "ns", "so", "obs", "mos", "osi", "conn", "ol", "bos", "windows", "bs", "opens", "OS", "ms", "oids", "rots", "ys", "ants", "pos", "fs", "ls", "io", "ols", "aos", "is", "Os", "ts", "ss", "ops", "js", "linux", "ds", "ot", "out", "socket", "s", "ios", "los", "ps", "si", "ros"], "pw": ["Pw", "mwt", " pwr", "mW", "mw", "pwr", "pwt", "psws", "pws", " pwt", "PW", "psW", "ppws", "ppw", "pk", "psk", "ppwd", "psw", "mwr", "ppW", "Pwd", " pk", "Pws", "Pk", "pwd", "ppwr", "ppwt", " pwd", " pws", "pW", "Pwr", " pW"], "h": ["dh", "he", "ho", "r", "q", "uh", "rh", "d", "hi", "hl", "l", "hp", "his", "o", "sh", "zero", "m", "v", "bh", "oh", "kh", "eh", "high", "hh", "ih", "hz", "hd", "b", "count", "z", "history", "j", "hr", "hex", "H", "k", "c", "e", "w", "ph", "t", "p", "ha", "y", "hs", "x", "ah", "hash"], "i": ["I", "r", "ri", "phi", "hi", "iu", "l", "ati", "o", "li", "v", "m", "ini", "in", "ai", "ki", "b", "f", "u", "io", "z", "j", "is", "pi", "ic", "ci", "e", "t", "p", "y", "oi", "ii", "si", "di", "x", "mi"], "n": ["nu", "num", "mn", "q", "pn", "nn", "el", "con", "un", "N", "gn", "o", "ns", "and", "m", "ne", "nan", "in", "cn", "inn", "wn", "ren", "run", "ind", "f", "on", "an", "z", "j", "no", " N", "g", "na", "k", "nc", "rn", "en", "c", "nw", "span", "ng", "y", "yn", "net", "nt", "x", "non"], "a": ["ae", "ata", "ca", "oa", "o", "ta", "aa", "sta", "sa", "wa", "A", "b", "index", "ia", "an", "la", "z", "ao", "xa", "ea", "area", "apa", "ba", "na", "aj", "alpha", "ma", "as", "t", "p", "ac", "ana", "ka", "add", "va", "am"], "result": ["valid", "response", "r", "description", "true", "feature", "draw", "red", "Result", "summary", "default", "relation", "report", "ret", "correct", "search", "match", "test", "results", "comment", "message", "url", "data", "status", "success", "RESULTS", "ful", "join", "output", "answer", "continue", "def", "date", "command", "successful", "reason", "res", "function"], "br": ["r", "rier", "bro", "shr", "bsp", "vr", "cr", "bc", "ber", "kr", "dr", "bh", "tr", "bridge", "Tr", "bre", "bl", "bs", "bp", "Br", "mr", "buf", "BR", "b", "bd", "rain", "lr", "hr", "bm", "pr", "wr", "bt", "rel", "jp", "yr", "fr", "p", "rb", "sr", "gr"], "st": ["set", "pt", "sb", "l", "sth", "cl", "rt", "sh", "usr", "sv", "sp", "so", "dr", "tr", "tt", "stat", "ste", "St", "stri", "sn", "sw", "ut", "start", "se", "ist", "sl", "inst", "const", "z", "ost", "stack", "sts", "sty", "sc", "null", "ts", "est", "ss", "et", "bt", "std", "mt", "ct", "fr", "t", "nd", "ST", "s", "ft", "stable", "th", "ust", "nt"], "str": ["r", "STR", "cur", "temp", "sol", "del", "ns", "cr", "sp", "v", "console", "dr", "tr", "msg", "print", "spec", "ret", "enc", "buf", "arr", "ent", "j", "string", "Str", "pr", "div", "text", "cs", "data", "g", "mt", "txt", "out", "fr", "t", "s", "char", "stable", "re", "res", "gr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n\\n        boolean enable=false;\\n        Scanner sc=new Scanner(System.in);\\n        String s=sc.next();\\n        if(s.contains(\"7\")){\\n            System.out.println(\"Yes\");\\n        }\\n        else{\\n            System.out.println(\"No\");  \\n        }\\n        \\n    }\\n\\n}", "target": "99", "substitutes": {"sc": ["usc", "sac", "uc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "ser", "sh", "cr", "sv", "sp", "bc", "tk", "sche", "cle", "sel", "sch", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "ok", "c", "osc", "Sc", "gc", "exp", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "s": ["gs", "sql", "aws", "details", "sb", "rs", "sys", "ns", "sv", "strings", "v", "m", "n", "S", "csv", "src", "its", "ats", "str", "b", "f", "ls", "sts", "string", "ts", "sq", "i", "g", "ss", "has", "c", "js", "gets", "e", "w", "t", "qs", "p", "ps", "hs"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int a = in.nextInt();\\n        int b = in.nextInt();\\n        int c = in.nextInt();\\n        int x = in.nextInt();\\n        int y = in.nextInt();\\n\\n        int mx = Math.max(x, y);\\n        int mn = Math.min(x, y);\\n\\n        int ans = 0;\\n        if (2 * c < a + b) {\\n            ans += 2 * c * mn;\\n        } else {\\n            System.out.println(a * x + b * y);\\n            return;\\n        }\\n\\n        if (x > y) {\\n            if (a < 2 * c) {\\n                ans += (x - y) * a;\\n            } else {\\n                ans += (x - y) * 2 * c;\\n            }\\n        } else {\\n            if (b < 2 * c) {\\n                ans += (y - x) * b;\\n            } else {\\n                ans += (y - x) * 2 * c;\\n            }\\n        }\\n\\n        System.out.println(ans);\\n    }\\n}", "target": "125", "substitutes": {"in": ["q", "r", "mm", "gin", "bin", "inf", "from", "con", "l", " din", "cgi", "isin", "o", "log", "rt", "inc", "n", "m", "conn", "ini", "err", "by", "doc", "inn", "rin", "IN", "sum", "get", "serv", "client", "ind", "lin", "at", "gen", "In", "init", "world", "io", "reader", "it", "scan", "din", "is", "i", "thin", "stream", "inner", "pi", "en", "ins", "input", "out", "as", "t", "cin", "info", "er", "ma", "ac", "char", "add", "net", "all", "ch"], "a": ["ae", "r", "ca", "d", "ax", "ar", "aq", "l", "oa", "ta", "n", "m", "aa", "ad", "sa", "al", "ak", "ai", "af", "act", "A", "at", "f", "ia", "u", "an", "la", "z", "ao", "xa", "j", "ga", "ab", "i", "ea", "pa", "g", "ba", "aj", "fa", "e", "alpha", "as", "ma", "t", "p", "ac", "s", "au", "va", "am"], "b": ["br", "r", "d", "beta", "sb", "ob", "l", "o", "bc", "n", "v", "m", "bf", "db", "gb", "by", "bl", "bs", "ub", "f", "eb", "bd", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bg", "e", "p", "bb", "cb", "be", "rb", "B"], "c": ["r", "lc", "ca", "cc", "d", "cal", "con", "cos", "l", "co", "cl", "cf", "bc", "cr", "n", "v", "ce", "unc", "m", "dc", "cp", "cn", "cu", "cache", "f", "fc", "u", "tc", "z", "cat", "cv", "cd", "C", "cs", "g", "nc", "k", "cm", "cod", "ic", "ci", "com", "cmp", "ct", "e", "gc", "etc", "cin", "ac", "p", "t", "cb", "mc", "rc", "ch"], "x": ["ix", "r", "ex", "mm", "wx", "ax", "l", "xml", "co", "h", "yx", "o", "n", "m", "v", "item", "lat", "xy", "tx", "xe", "xx", "index", "on", "px", "f", "xc", "z", "xa", "hex", "j", "dx", "i", "lex", "g", "xt", "xxx", "e", "w", "X", "rx", "p", "ac", "ux", "ctx", "xi", "xs", "fx", "ox", "window"], "y": ["ye", "sy", "hot", "ym", "iy", "o", "sys", "h", "yl", "py", "n", "m", "v", "ch", "gy", "ay", "ey", "uy", "cy", "xy", "ys", "xx", "ry", "yy", "ies", "z", "j", "yt", "vy", "i", "oy", "sky", "axy", "ic", "Y", "my", "yi", "yr", "t", "ny", "p", "yd", "yn", "ty", "yo"], "mx": ["ca", "ex", "xb", "mb", "ns", "ta", "cp", "cn", "nz", "ai", "ms", "xy", "mr", "xx", "px", "xc", "ml", "xa", "bm", "mk", "yz", "ba", "na", "ram", "mt", "ma", "wm", "rx", "mc"], "mn": ["mins", "mm", "dm", "nn", "dim", "mb", "mind", "yx", "ns", "n", "m", "km", "mg", "mun", "cn", "ni", "nz", "ms", "mr", "mon", "min", "ml", "MN", "bm", "na", "nc", "np", "men", "cm", "nm", "mt", "my", "ng", "nd", "ny", "wm", "man", "ln", "yn", "mc"], "ans": [" means", " Ans", "uns", "ents", "ons", "eps", "vals", "aus", "san", "anks", "ums", "eds", "ns", "asks", "ks", "ads", "ces", "jas", "ends", "ians", "ars", "ms", "ates", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "ls", "an", "aos", "ams", "vs", "mas", "anes", "cs", "orts", "sets", "ops", "ins", "aps", "ds", "olds", "arms", "as", "s", "eas", "posts", "cas", "ps", "xs", "rans", "offs", "outs", "ann"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint k = sc.nextInt();\\n\t\tchar[] s = sc.next().toCharArray();\\n\t\ts[k-1] = Character.toLowerCase(s[k-1]);\\n\t\tfor (int i = 0; i<n; i++) {\\n\t\t\tSystem.out.print(s[i]);\\n\t\t}\\n\t}\\n}", "target": "71", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "sh", "cr", "sv", "sp", "bc", "inc", "ck", "ec", "ctl", "ko", "cle", "sch", "sync", "fc", "tc", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "pb", "ok", "c", "osc", "cmp", "Sc", "gc", "cons", "ng", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "scrib", "ch"], "n": ["nu", "num", "mn", "d", "nn", "l", "nr", "N", "ns", "m", "v", "ne", "nl", "cn", "kn", "ni", "sn", "an", "j", "nb", " N", "na", "nc", "np", "nv", "en", "c", "nm", "ng", "t", "network", "ln", "net", "nt", "x"], "k": ["q", "r", "ke", "ask", "d", "key", "l", "kl", "kan", "ks", "v", "m", "kh", "dk", "kr", "km", "tk", "ck", "ko", "unk", "ak", "kn", "b", "ik", "kk", "ack", "kick", "kat", "z", "j", "it", "mk", "g", "ok", "ek", "sk", "ku", "K", "w", "t", "p", "x", "kj", "kind", "kt", "ka", "ijk", "kw", "ch", "kid"], "s": ["gs", "sql", "details", "sb", "aws", "l", "rs", "ashes", "abs", "h", "ns", "sv", "strings", "v", "ws", "bs", "parts", "S", "csv", "os", "ms", "its", "ids", "ats", "b", "fs", "ls", "sort", "sts", "vs", "is", "ts", "sq", "cs", "ss", "c", "js", "ins", "ds", "des", "services", "qs", "p", "ps", "xs", "tes", "stats", "hs", "views"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "chain", "ip", "ji", "point", "li", "o", "m", "ij", "ini", "in", "batch", "ai", "ki", "im", "qi", "index", "us", "init", "u", "\u0438", "io", "ims", "j", "bi", "it", "ui", "is", "uri", "pi", "ti", "ic", "ci", "sim", "yi", "cli", "out", "multi", "iter", "gu", "iq", "y", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int N = sc.nextInt();\\n    String S = sc.next();\\n    int count = 0;\\n    String ABC;\\n    \\n    for (int i = 0; i < N-2 ;i++) {\\n      ABC = S.substring(i, i + 3);\\n      if (ABC.equals(\"ABC\")){\\n        count++;\\n      }\\n    }\\n    System.out.print(count);\\n  }\\n}", "target": "110", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "row", "sb", "sec", "cl", "sys", "system", "ser", "cr", "sv", "bc", "sp", "inc", "dc", "ctl", "capt", "ec", "cle", "sel", "sw", "sync", "tc", "ctrl", "scan", "sq", "cs", "sci", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "cons", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "st", "sub"], "N": ["D", "TN", "FN", "ND", "NM", "SN", "NP", "NE", "NB", "n", "NV", "EN", "Ni", "NG", "NO", "NL", "T", "R", "NS", "NF", "NR", "V", "NH", "M", "GN", "NC", "C", "NN", "Num", "NA", "L", "K", "NOR", "NI", "NT", "Ns"], "S": ["CS", "STR", "SI", "TS", "SN", "SM", "SH", "JS", "SQL", "SA", "SP", "SE", "SAM", "P", "G", "PS", "T", "SU", "SO", "NS", "V", "M", "SOURCE", "US", "ASS", "SL", "BS", "RS", "IS", "C", "GS", "SS", "SER", "s", "DS", "SB", "LS", "B", "ESS"], "count": ["num", "ount", "result", "ctr", "coll", "frequency", "found", "current", "number", "base", "total", "amount", "n", "summary", "sum", "state", "report", "client", "Count", "ind", "index", "code", "list", "type", "match", "const", "test", "sequence", "must", "trace", "find", "nb", "child", "message", "C", "status", "length", "score", "c", "max", "counter", "flag", "size", "nt", "next"], "ABC": ["PB", "AA", " BC", " CB", " AB", "WB", "BB", "CSS", " ANC", "ZX", "LC", "CA", "NZ", "USB", "LAB", " ABS", "AC", "NB", "BBC", "Ba", "REG", "OX", "ASC", "BTC", "DC", "LIST", "NBC", "RC", "MB", "NS", "RFC", " UC", "BC", "BN", "CAN", "UB", "CH", "REC", "CB", "BS", "ANC", "ACC", "NC", "AV", "C", "CL", "CO", "abc", "AB", "CC", "VAL", "CR", "QB", " EB", " AC", "EB", "PK", "MX", " ASC", "ACK", "BA", "ENC", "CBS", "B", "FB"], "i": ["q", "I", "ix", "ri", "phi", "gi", "hi", "iu", "from", "zi", "ei", "l", "ip", "li", "o", "id", "v", "m", "ini", "in", "ai", "ki", "go", "mu", "im", "ind", "qi", "index", "us", "init", "u", "io", "j", "bi", "it", "slice", "ui", "is", "uri", "ie", "pi", "k", "ti", "ic", "ci", "sim", "yi", "cli", "multi", "gu", "p", "y", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\nclass Main{\\n\tpublic static void main(String[] args)throws NumberFormatException, IOException{\\n//\t\tSystem.out.println(\" \");\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint times = scan.nextInt();\\n\t\tint num[] =new int[times];\\n\t\tint keisan = 0;\\n\t\tint sosu = 0;\\n\t\tboolean tf = true;\\n\t\tfor(int i=0;i<times;i++){\\n\t\t\tnum[i] = scan.nextInt();\\n\t\t}\\n\\n\t\tfor(int i=0;i<times;i++){\\n\t\t\ttf = true;\\n\t\t\tif(num[i] == 2 || num[i] % 2 == 0){\\n\t\t\t\ttf = false;\\n\t\t\t}\\n\t\t\tint ii=3;\\n\t\t\twhile (ii <= Math.sqrt(num[i])){\\n\t\t\t\tif(num[i] % ii == 0){\\n\t\t\t\t\ttf = false;\\n\t\t\t\t}\\n\t\t\t\tii += 2;\\n\t\t\t}\\n\t\t\tif (num[i] == 2){\\n\t\t\t\ttf = true;\\n\t\t\t}\\n\t\t\tif(tf == true){\\n\t\t\t\tsosu +=1;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(sosu);\\n\t}\\n}", "target": "226", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        Integer number = scanner.nextInt();\\n        String string = scanner.next();\\n\\n        int wordCount = string.length();\\n\\n        if (number < wordCount) {\\n            String cuttingWord = string.substring(0,number);\\n            cuttingWord += \"...\";\\n            System.out.println(cuttingWord);\\n        } else {\\n            System.out.println(string);\\n        }\\n    }\\n}\\n", "target": "248", "substitutes": {"scanner": ["canener", "Scanator", "statning", " scanener", "statter", "statner", "Scanter", "scanener", "Scaner", "canator", "canning", "scanter", "scanator", " scanning", "canter", " scanter", " scanator", "Scanner", "canner", "scanning", "scaner", " scaner", "statener", "caner"], "number": ["numbered", "num", "result", "token", "key", "maximum", "position", "current", "NUM", "total", "now", "zero", "amount", "value", "n", "word", "dimension", "al", "database", "negative", "operation", "hello", "start", "index", "count", "sequence", "no", "message", "document", "news", "directory", "Number", "length", "umber", "information", "record", "request", "counter", "duration", "integer", "network", "padding", "application", "volume", "to", "x"], "string": ["subject", "description", "result", "name", "sql", "character", "parse", "password", "current", "escape", "address", "chain", "system", "prefix", "value", "filename", "strings", "word", "source", "relation", "series", "spec", "section", "str", "phrase", "list", "service", "said", "instance", "buffer", "object", "single", "sequence", "space", "comment", "null", "component", "ring", "message", "expression", "text", "data", "title", "length", "join", "output", "past", "sample", "format", "answer", "request", "integer", "char", "dump", "sound", "function"], "wordCount": [" wordSize", "byteNow", "wigSize", "WordSize", "numberCounter", "WordCap", "byteCounter", "bytecount", "byteCount", "wordSize", "numbercount", "wigCap", " wordNow", "numberCount", " wordcount", " wordCounter", "wigcount", "wordcount", "Wordcount", "wigCount", "wordNow", "numberNow", "wordCounter", " wordCap", "wordCap", "WordCount"], "cuttingWord": ["cutW", "headingW", "cutTerm", " cuttingWords", "cutString", "headingWord", "cuttingW", "growingWord", "cuttingWords", "headingString", "cuttingString", " cuttingW", "headingword", "cutWord", "headingWater", "cuttingword", "growingword", "cutword", "cutWords", " cuttingString", "headingWords", "headingTerm", " cuttingword", " cuttingWater", "cuttingTerm", "growingWater", " cuttingTerm", "cuttingWater"]}}
{"code": "import java.math.BigDecimal;\\nimport java.math.MathContext;\\nimport java.math.RoundingMode;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int N = Integer.parseInt(sc.next());\\n        BigDecimal sum = BigDecimal.ZERO;\\n        for (int i = 0; i < N; i++) {\\n            BigDecimal n = new BigDecimal(sc.next());\\n            n = BigDecimal.ONE.divide(n, 7, RoundingMode.HALF_EVEN);\\n            sum = sum.add(n, MathContext.UNLIMITED);\\n        }\\n\\n        System.out.println(BigDecimal.ONE.divide(sum, 6, RoundingMode.HALF_EVEN).toPlainString());\\n        sc.close();\\n    }\\n}", "target": "120", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "sh", "cr", "sv", "sp", "bc", "inc", "ck", "ctl", "capt", "cle", "sel", "irc", "sch", "sw", "sync", "tch", "tc", "scan", "sq", " Sc", "disc", "cs", "sci", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "N": ["D", "I", "Node", "TN", "ND", "NM", "SN", "NP", "NE", "NB", "Size", "No", "S", "Ni", "NG", "NO", "T", "NS", "NR", "V", "M", "NH", "GN", "NC", "Sn", "C", "Number", "NN", "Num", "NA", "L", "K", "J", "Net", "NI", "NT", "Ns"], "sum": ["Sum", "num", "sat", "loss", "result", "mm", "empty", "post", "cal", "cos", "total", "system", "zero", " SUM", "amount", "so", "summary", "m", "sa", "tail", "su", "square", "mean", "cu", "mu", "scale", "count", "us", "match", "um", "comment", "success", "cum", "vol", "cost", "score", "mass", " summed", "head", "sim", "output", "ass", "alpha", "other", "black", "sam", "average", "up", "add", "size", "si", "plus", "volume", "all", "hash"], "i": ["q", "I", "ix", "ex", "phi", "gi", "zi", "iu", "ip", "li", "o", "asi", "sp", "m", "ini", "err", "ai", "ms", "ind", "qi", "a", "us", " ii", "u", "init", "io", "j", "it", "ui", "is", "ie", " I", "pi", "ti", "ic", "ci", " x", "sim", "my", "cli", "multi", "iq", "gu", "y", "ii", "si", "di", "x", "mi"], "n": ["nu", "num", "r", "mn", "name", "d", "ll", "nn", "l", "nr", "gn", "ns", "dn", "ne", "nan", "nl", "cn", "sn", "note", "on", "norm", "z", "j", "nb", "g", "na", "fn", "nc", "np", "rn", "nv", "c", "nw", "nm", "normal", "ng", "p", "nor", "ln", "net", "nt"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.math.BigDecimal;\\nimport java.nio.charset.StandardCharsets;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    //\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u5b9a\u7fa9\\n\\n    public static void main(String[] args) throws IOException {\\n        new Main().run();\\n    }\\n\\n    void run() {\\n        Scanner sc = new Scanner(System.in);\\n        char[] array = sc.next().toCharArray();\\n        char[] orgArray = sc.next().toCharArray();\\n        boolean check = false;\\n\\n        for(int i=0; i<array.length; i++){\\n            char[] newArray = new char[array.length];\\n\\n            for(int j=0; j<array.length; j++){\\n                newArray[j] = array[j];\\n            }\\n\\n            char last = newArray[array.length-1];\\n            for(int j=1; j<newArray.length; j++){\\n                array[j] = newArray[j-1];\\n            }\\n            array[0] = last;\\n\\n            check = arrayIsSame(orgArray, array);\\n            if(check){\\n                break;\\n            }\\n        }\\n\\n        if(check) System.out.println(\"Yes\");\\n        else System.out.println(\"No\");\\n    }\\n\\n    boolean arrayIsSame(char[] orgArray, char[] newArray){\\n        for(int i=0; i<orgArray.length; i++){\\n            if(orgArray[i] != newArray[i]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n", "target": "220", "substitutes": {}}
{"code": "import java.io.*;\\nimport java.util.*;\\nclass Program{\\n    int solve(int i, int size){\\n        int temp = i;\\n        for(int j=1;j<size;j++){\\n            temp=temp*10+i;\\n        }\\n        return temp;\\n    }\\n}\\nclass Main{\\n    public static void main(String[] args) {\\n        Program obj = new Program();\\n        Scanner in = new Scanner(System.in);\\n        int N = in.nextInt();\\n        for(int i=1;i<=9;i++){\\n            if(obj.solve(i,String.valueOf(N).length())>=N) {System.out.println(obj.solve(i,String.valueOf(N).length())); break;}\\n            //System.out.println(obj.solve(i,String.valueOf(N).length()));\\n        }\\n    }\\n}", "target": "106", "substitutes": {"i": ["q", "ix", "zi", "iu", "ei", "li", "n", "me", "batch", "ai", "ki", "iii", "f", "ims", "is", "ic", "c", "ami", "y", "di", "x", "ri", "l", "ip", "ji", "o", "id", "ij", "II", "start", "ori", "io", "bi", "it", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "print", "ind", "u", "\u0438", "pi", "yi", "p", "xi", "si", "mi", "I", "key", "gi", "v", "m", "ini", "im", "inter", "qi", "b", "index", "init", "ui", "ie", "ti", "integer", "t", "multi"], "size": ["set", "name", "shift", "izes", "number", "nr", "SIZE", "len", "now", "n", "needed", "Size", "ne", "power", "sum", "ms", "small", "ize", "sized", "sn", "start", "scale", "shape", "count", "code", "es", "send", "win", "space", "zone", "iz", "length", "ze", "mode", "en", "max", "body", "w", "capacity", "si", "seed", "see"], "temp": ["dat", "num", "result", "pt", "tim", "limit", "mp", "base", "prime", "current", "pre", "total", "ta", "unt", " temperature", "tmp", "n", "m", "ij", "v", "tr", " tmp", "make", "tem", "Temp", "sum", "this", " temporary", " Temp", "T", "ret", "index", "min", "variable", "buffer", "test", "tc", "mem", "const", "ptr", "template", "pi", "length", "mod", "emp", "c", "max", "t", "iter", "p", "porary", "fake", "mi", "term"], "j": ["br", "q", "jit", " l", "ax", "l", "ji", "jj", "jo", "v", "ij", "m", "err", "jump", "jas", "ge", "ja", "bj", "b", "oj", "job", " ii", "f", "z", " dj", "it", "pr", "ie", "g", "uj", "k", "json", "js", "aj", "jp", "ph", "J", "other", "kj", "y", "jc", " J", "dj", "kid", "jl"], "obj": ["opp", "utils", "pm", "aq", "ob", "Ob", "o", "sys", "adj", "so", "tmp", "cp", "impl", "db", "tk", "ck", "xy", "bj", "rm", "obo", "code", "ht", "object", "yy", "rex", "hw", "ctrl", "hex", "pkg", "Obj", "cmd", "nb", "bm", "objects", "np", "js", "eff", "txt", "jp", "ct", "ot", "out", "cmp", "det", "ctx", "y", "rb", "nt", "expr"], "in": ["r", "ex", "gin", "bin", "inf", "from", "con", "l", "asin", " din", "isin", "log", "id", "inc", "n", "sin", "ini", "err", "read", "by", "vin", "doc", "inn", "rin", "file", "IN", "sum", "get", "user", "ind", "str", "pos", "In", "ssl", "win", "reader", "scan", "din", "is", "thin", "stream", "data", "inner", "k", "en", "ins", "input", "std", "out", "cin", "info", "add", "net", "all", "readable", "line"], "N": ["D", "I", "Z", "TN", "F", "NM", "SN", "NP", "NE", "NB", "n", "NV", "Size", "O", "G", "S", "Ni", "P", "NG", "OUT", "T", "NL", "R", "NS", "Q", "Na", "NR", "V", "M", "NH", "MN", "GN", "NC", "H", "C", "NN", "NA", "Y", "L", "Num", "K", "J", "X", "CN", "Length", "CNN", "NI", "NT", "Ns"]}}
{"code": "import java.io.BufferedReader; \\nimport java.io.IOException; \\nimport java.io.InputStreamReader;\\nimport java.util.Arrays;\\nimport java.util.StringTokenizer; \\n  \\npublic class Main\\n{ \\n    static class FastReader \\n    { \\n        BufferedReader br; \\n        StringTokenizer st; \\n  \\n        public FastReader() \\n        { \\n            br = new BufferedReader(new\\n                     InputStreamReader(System.in)); \\n        } \\n  \\n        String next() \\n        { \\n            while (st == null || !st.hasMoreElements()) \\n            { \\n                try\\n                { \\n                    st = new StringTokenizer(br.readLine()); \\n                } \\n                catch (IOException  e) \\n                { \\n                    e.printStackTrace(); \\n                } \\n            } \\n            return st.nextToken(); \\n        } \\n  \\n        int nextInt() \\n        { \\n            return Integer.parseInt(next()); \\n        } \\n  \\n        long nextLong() \\n        { \\n            return Long.parseLong(next()); \\n        } \\n  \\n        double nextDouble() \\n        { \\n            return Double.parseDouble(next()); \\n        } \\n  \\n        String nextLine() \\n        { \\n            String str = \"\"; \\n            try\\n            { \\n                str = br.readLine(); \\n            } \\n            catch (IOException e) \\n            { \\n                e.printStackTrace(); \\n            } \\n            return str; \\n        } \\n    } \\n  \\n    public static void main(String[] args) \\n    { \\n        FastReader fr = new FastReader(); \\n        \\n        int N = fr.nextInt();\\n        \\n        int[] h = new int[N];\\n        int[] dp = new int[N];\\n        \\n        Arrays.fill(dp, (int)2e9);\\n        dp[0] = 0;\\n        \\n        for(int i = 0; i < N; i++) {\\n        \th[i] = fr.nextInt();\\n        }\\n        \\n        for (int i = 0; i < N; i++) {\\n        \tif (i+1 < N) {\\n        \t\tdp[i+1] = Math.min(dp[i+1], dp[i] + Math.abs(h[i] - h[i+1])); \\n        \t} if (i+2 < N) {\\n        \t\tdp[i+2] = Math.min(dp[i+2], dp[i] + Math.abs(h[i] - h[i+2]));\\n        \t}\\n        }\\n        \\n        System.out.println(dp[N-1]);\\n        \\n    }\\n\\n}", "target": "1", "substitutes": {"br": ["r", "ctr", "pt", "next", "sb", "bro", "shr", " bro", "abl", "vr", "bsp", " Br", "cr", "ber", "kr", "dr", "bh", "tr", "bridge", "Tr", "bre", "bf", "bl", "bs", "ch", "bn", "bp", "brace", "Br", "mr", "buf", "BR", "b", "lr", "hr", "bm", "pr", "wr", "bt", "browser", "jp", "er", "bb", "rb", "adr", "sr", "gr"], "st": ["lt", "r", "stage", "pt", "sy", "sb", "l", "sth", "rt", "usr", "sh", "cr", "sv", "sp", "tmp", "so", "stat", "ste", "lo", "nt", "St", "sn", "stri", "sw", "ut", "start", "se", "ist", "sl", " superst", "inst", "const", "z", "ost", "stack", "sts", "sty", "est", "rest", "et", "bt", "std", "step", "mt", "ct", "t", "nd", "p", "s", "ft", "stable", "be", "th", "ust", "ST", "first"], "str": ["r", "result", "name", "STR", "next", "cur", "shr", "ns", "cr", "sp", "n", "dr", "tr", "line", "msg", "ocr", "print", "spec", "ret", "enc", "res", "buf", "sl", "arr", "ent", "hex", "string", "Str", "pr", "cont", "text", "data", "rec", "obj", "txt", "e", "t", "s", "p", "char", "stable", "del", "gr"], "fr": ["rr", "r", "ll", "hl", "fi", "l", "her", "fd", "nr", "pre", "vr", "cr", "n", "kr", "dr", "bh", "tr", "bf", "tf", "Tr", "fin", "bl", "mr", "Fr", "lr", "f", "ry", "fs", "fb", "irm", "j", "hr", "bi", "pr", "ptr", "rl", "fn", "rn", "fl", "rel", "jp", "er", "be", "fm", "adr", "FR", "gr"], "N": ["D", "I", "Z", "Node", "TN", "F", "FN", "ND", "NM", "SN", "NP", "NE", "NB", "n", "NV", "II", "Size", "O", "S", "Ni", "P", "NG", "WH", "NO", "T", "NL", "R", "NS", "Q", "Na", "NF", "NR", "V", "ANY", "M", "NH", "AN", "MN", "GN", "H", "NC", "Sn", "C", "UN", "NN", "Num", "Y", "L", "NA", "K", "J", "NOTE", "NI", "NT", "B", "Ns"], "h": ["he", "q", "rh", "r", "ho", "hi", "hl", "l", "hp", "o", "sh", "n", "m", "v", "bh", "oh", "host", "pp", "hh", "ih", "hz", "hd", "b", "a", "f", "ht", "u", "hw", "history", "hs", "j", "hr", "hex", "it", "H", "html", "help", "c", "ph", "e", "exp", "t", "s", "p", "handle", "ha", "y", "hm", "th", "uh", "ch", "ah", "hash"], "dp": ["dh", "pd", "dl", "dat", "mm", "dm", "d", "deep", "pm", "df", "mp", "dim", "vp", "hp", "tp", "wp", "dd", "ip", "deb", "ep", "imp", "lp", "cp", "dr", "db", "dc", "drop", "dk", "dn", "resp", "bp", "csv", "DC", "params", "pp", "fp", "wd", "px", "delay", "pkg", "cd", "cmd", "tm", "pa", "pb", "aaa", "np", "ds", "jp", "htt", "def", "p", "dep", "ctx", "ps", "dq", "bps", "dt", "adr", "pas", "di", "dj", "DP", "gp"], "i": ["q", "I", "ix", "name", "ri", "phi", "gi", "hi", "iu", "zi", "ei", "l", "chain", "ip", "ji", "fi", "li", "o", "id", "n", "v", "ij", "me", "ini", "m", "in", "this", "print", "ai", "ki", "qi", "a", "index", "f", "ia", "init", "u", "\u0438", "io", "ims", "j", "bi", "it", "ity", "ui", "is", "ie", "uri", "status", "pi", "k", "ti", "ic", "ci", "sim", "cli", "multi", "info", "p", "iq", "parent", "ami", "y", "oi", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.util.*;class Main{public static void main(String[]g){for(Scanner S=new Scanner(System.in);S.hasNext();)System.out.println(1+(int)Math.log10(S.nextInt()+S.nextInt()));}}\\n", "target": "176", "substitutes": {"g": ["gs", "gin", "group", "sg", "l", "h", "tg", "n", "m", "gb", "v", "msg", "G", "str", "b", "f", "u", "j", "gm", "c", "groups", "e", "t", "gu", "p", " G", "cfg"], "S": ["I", "CS", "F", "SI", "SN", "N", "TS", "SM", "SH", "JS", "SA", "SP", "SE", "SAM", "P", "T", "SU", "R", "SO", "Q", "SF", "FS", "Si", "M", "SR", "US", "SD", "SL", "RS", "SAN", "BS", "H", "IS", "C", "SSL", "Socket", "AS", "GS", "SS", "L", "J", "SER", "s", "DS", "SB", "LS", "B", "ESS"]}}
{"code": "import java.util.*;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        if (s.replaceAll(\"eraser\", \"\").replaceAll(\"erase\", \"\").replaceAll(\"dreamer\", \"\").replaceAll(\"dream\", \"\")\\n                .equals(\"\")) {\\n            System.out.println(\"YES\");\\n        \\n        } \\n\\n        else {\\n            System.out.println(\"NO\");\\n        }\\n        \\n        sc.close();\\n    }\\n}", "target": "50", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "cr", "bc", "sv", "sp", "soc", "inc", "ec", "capt", "cle", "sch", "sync", "tc", "scan", "sq", "cs", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "s": ["gs", "r", "joined", "sql", "aws", "sb", "rs", "abs", "sys", "h", "sv", "strings", "v", "m", "n", "simple", "su", "ws", "S", "csv", "src", "self", "ats", "b", "f", "sl", "ls", "space", "sts", "is", "ts", "sq", "g", "ss", "c", "txt", "gets", "w", "p", "ps", "stats", "hs"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner s = new Scanner(System.in);\\n    int n = s.nextInt();\\n    int t = s.nextInt();\\n    int c = 10000;\\n    for(int i = 0; i < n; i++){\\n      int ci = s.nextInt();\\n      if(s.nextInt() <= t)\\n        c = c > ci ? ci : c;\\n    }\\n    if(c <= 1000)\\n      System.out.println(c);\\n    else\\n      System.out.println(\"TLE\");\\n  }\\n}", "target": "8", "substitutes": {"s": ["q", "gs", "utils", "aws", "sb", "l", "rs", "sol", "abs", "http", "sys", "ns", "so", "sv", "sa", "ws", "comm", "S", "ms", "self", "less", "ats", "south", "se", "sm", "sl", "search", "ls", "fs", "ssl", "sts", "is", "ts", "sq", "cs", "ss", "js", "ins", "ds", "bis", "gets", "sam", "ses", "qs", "p", "xs", "ps", "stats", "conv", "hs"], "n": ["nu", "num", "name", "NT", "d", "nn", "l", "nr", "N", "ns", "m", "v", "ne", "nan", "nl", "ni", "sn", "j", "no", "nb", " N", "na", "nc", "np", "en", "nw", "ng", "network", "ln", "net", "nt", "x"], "t": ["r", "pt", "wt", "l", "tp", "total", "h", "rt", "ta", "v", "m", "tr", "tt", "T", "td", "at", "f", "type", "tc", "j", "it", "tm", "ts", "g", "et", "k", "mt", "e", "ot", "ct", "p", "kt", "y", "te", "dt", "ty", "st", "tu"], "c": ["arc", "toc", "r", "lc", "ca", "cc", "d", "cur", "con", "l", "co", "h", "bc", "ce", "m", "cp", "v", "dc", "ch", "unc", "cy", "cu", "cache", "b", "code", "count", "fc", "f", "u", "xc", "tc", "sc", "cd", "C", "cont", "cs", "g", "cum", "nc", "k", "cm", "abc", "cod", "ic", "ct", "e", "gc", "x", "p", "ac", "mc", "pc", "rc", "cf"], "i": ["I", "ix", "phi", "gi", "zi", "iu", "hi", "ei", "ip", "o", "li", "id", "v", "m", "me", "ini", "in", "batch", "uu", "ai", "ki", "im", "ind", "qi", "index", "us", "init", "io", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "sim", "cli", "multi", "iter", "gu", "y", "ii", "xi", "si", "di", "x", "mi"], "ci": ["ix", "lc", "ca", "ico", "hi", "fi", "co", "ati", "li", "circ", "ce", "cia", "ini", "dc", "ai", "ni", "ki", "cu", "ice", "tc", "aci", "CI", "sc", "cs", "pi", "vc", "cm", "ti", "ic", "cli", "ct", "uci", "cin", "cci", "ii", "mc", "si", "di", "mi"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.util.StringTokenizer;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tFastScanner sc = new FastScanner(System.in);\\n\t\tint A = Integer.parseInt(sc.next());\\n\t\tint B = Integer.parseInt(sc.next());\\n\t\tif (A<B) {\\n\t\t\tint tmp = A;\\n\t\t\tA = B;\\n\t\t\tB = tmp;\\n\t\t}\\n\t\tSystem.out.println(Math.max(2*A-1, A+B));\\n\\n\t}\\n\\n}\\n\\nclass FastScanner {\\n    private BufferedReader reader = null;\\n    private StringTokenizer tokenizer = null;\\n\\n    public FastScanner(InputStream in) {\\n        reader = new BufferedReader(new InputStreamReader(in));\\n        tokenizer = null;\\n    }\\n\\n    public String next() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                tokenizer = new StringTokenizer(reader.readLine());\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n        return tokenizer.nextToken();\\n    }\\n\\n    public String nextLine() {\\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n            try {\\n                return reader.readLine();\\n            } catch (IOException e) {\\n                throw new RuntimeException(e);\\n            }\\n        }\\n\\n        return tokenizer.nextToken(\"\\n\");\\n    }\\n\\n    public long nextLong() {\\n        return Long.parseLong(next());\\n    }\\n\\n    public int nextInt() {\\n        return Integer.parseInt(next());\\n    }\\n\\n    public double nextDouble() {\\n         return Double.parseDouble(next());\\n     }\\n\\n    public int[] nextIntArray(int n) {\\n        int[] a = new int[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextInt();\\n        return a;\\n    }\\n\\n    public long[] nextLongArray(int n) {\\n        long[] a = new long[n];\\n        for (int i = 0; i < n; i++)\\n            a[i] = nextLong();\\n        return a;\\n    }\\n}", "target": "75", "substitutes": {"sc": ["arc", "usc", "uc", "lc", "cc", "esc", "mp", " SC", "sec", "cgi", "cl", "sys", "bc", "sv", "sp", "cr", "inc", "ctl", "ec", "src", "sch", "sync", "fc", "tc", "scan", "sq", " Sc", "cs", "nc", "pb", "ic", "c", "osc", "txt", "Sc", "gc", "asc", "isc", "SC", "mc", "pc", "rc", "ch"], "A": ["AA", "I", "Array", "App", "AU", "E", "Alpha", "CA", "N", "AE", "AC", "HA", "DATA", "Av", "ASC", "As", "SA", "G", "S", "P", "T", "IA", "R", "ATA", "GA", "LA", "V", "M", "TA", "AH", "API", "Ant", "AL", "AV", "ACC", "AP", "C", "AM", "U", "AB", "An", "AS", "NA", "L", "RA", "AI", "AR", "ART", "EA", "X", "AX", "Area", "BA", "mA", "AF", "ACT", "PA", "AT"], "B": ["D", "I", "Z", "WB", "BB", "LB", "TB", "BI", "BL", "E", "BT", "BM", "RB", "DB", "N", "BU", "VB", "NB", "GB", "G", "S", "P", "FB", "T", "BER", "IB", "R", "BR", "b", "BC", "V", "BE", "M", "BS", "C", "BO", "JB", "AB", "Y", "L", "J", "EB", "BA", "OB", "SB", "Bs"], "tmp": ["offset", "BB", "TB", "RB", "eta", "mp", "mb", "prime", "temp", "abs", "perm", "sp", "m", "NB", "PRE", "xy", "T", "b", "buffer", "MP", "extra", "nb", "comp", "np", "emp", "pad", "AB", "obj", "cmp", "max", "TM", "alpha", "t", "p", "bb", "ctx", "PA", "amp"], "reader": ["loader", "rr", "r", "result", "driver", " Reader", "row", "rar", "writer", "rs", "builder", "author", "resource", "dr", "context", "operator", "read", "source", "ro", "this", "file", "via", "handler", "mr", "user", "Reader", "runner", "lr", "buffer", "field", " writer", "walker", "roller", "worker", "null", " readers", "parser", "oder", "rer", "document", "stream", "rl", "ner", "inner", "data", "redo", "iterator", "input", "er", "iter", "rx", "upper", "rc", "query", "line"], "tokenizer": [" tokenize", "okenener", "tokenizing", "variableifer", "recognzer", "serialiser", "Tokeniter", "serialization", "tokener", "operatorator", "optimifier", "recognizer", "tokenization", "okenifier", "tokenator", "tokeniter", "recognization", "okenization", "toolner", "tokenener", "variableoser", "normalizer", "operatoroser", "tokenize", "wordener", "okenize", "Tokenizer", "normaler", "characterizer", "variableizing", "optimner", "variableizer", "serializer", "toolizer", "Tokenifier", "wordizer", "tokenimer", "okenzer", "characteroser", "tokenzer", " tokeniser", "serialzer", "toolifier", " tokenization", "normalger", "toolimer", "wordifier", "tokenner", "operatorizer", "okener", "okenifer", "toolization", " tokener", "Tokenzer", "normalifier", "okenizer", " tokenener", "operatorzer", "toolzer", "characterifer", "okenizing", "optimimer", "okenner", "recognator", "operatoriter", "okenger", "serialoser", "okenator", "optimizer", "operatorize", "operatorization", " tokenifier", "tokenoser", " tokenzer", "worditer", "tokenger", "Tokenener", "okenoser", "tokeniser", "Tokenization", "okenimer", "tokenifer", "operatorener", " tokeniter", "serialifier", "tokenifier", " tokenger", " tokenoser", "okeniter", "okeniser", "characterizing"], "in": ["r", "gin", "ar", "from", "con", "l", "log", "rt", "o", "id", "inc", "console", "m", "ini", "err", "source", "inn", "file", "IN", "lines", "self", "serv", "f", "In", "world", "io", "it", "null", "din", "is", "cont", "stream", "inner", "ic", "c", "ins", "input", "conf", "std", "out", "check", "t", "info", "cin", "p", "line"], "n": ["num", "nu", "mn", "name", "d", "nn", "nos", "l", "un", "N", "o", "log", "ns", "h", "m", "v", "ne", "nan", "nl", "cn", "ren", "ni", "nat", "le", "sn", "ut", "count", "on", "z", "j", "it", "no", "nb", "cont", "g", " N", "na", "nc", "np", "en", "c", "nw", "none", "nm", "e", "w", "out", "t", "p", "network", "ln", "y", "net", "all", "nt", "x", "names"], "a": ["ata", "ae", "ava", "ca", "el", "oa", "o", "qa", "ta", "da", "aa", "sta", "sa", "ua", "wa", "act", "ya", "b", "f", "ia", "an", "la", "ga", "ao", "j", "xa", "aos", "ab", "pa", "ea", "area", "apa", "data", "g", "na", "ba", "aaa", "aka", "c", "fa", "ada", "w", "ma", "as", "ac", "ha", "au", "aux", "to", "va", "am"], "i": ["set", "I", "ix", "phi", "gi", "iu", "php", "ei", "iy", "ip", "ji", "li", "id", "m", "ij", "me", "ini", "dr", "err", "batch", "ai", "ki", "ice", "itime", "ms", "im", "qi", "f", "us", "init", "u", "\u0438", "io", "ies", "ims", "j", "fire", "it", "ity", "ui", "is", "ie", " I", "pi", "eu", "ti", "ic", "ci", "ful", "sim", "MI", "my", "cli", "PI", "multi", "ami", "y", "oi", "xi", "ii", "em", "si", "di", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int X = sc.nextInt();\\n        int Y = sc.nextInt(); \\n        int Z = sc.nextInt();\\n        if(X + Y + Z >= 22) {\\n        \tSystem.out.println(\"bust\");\\n        }else {\\n        \tSystem.out.println(\"win\");\\n        }\\n    }\\n}", "target": "129", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "anc", "esc", "sb", "sec", "cgi", "cl", "sys", "system", "sh", "cr", "bc", "sv", "sp", "inc", " scr", "dc", "ck", "ctl", "ko", "sch", "sw", "fc", "tc", "ctrl", "scan", "sq", "cs", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "X": ["I", "D", "TX", "EX", "FX", "AY", "IX", "N", "XY", "DX", "OX", "XXX", "P", "UX", "WH", "RY", "GE", "A", "ATION", "M", "ITY", "CH", "XX", "H", "TH", "TY", "L", "XT", "XP", "MX", "Width", "EL", "XL", "OR", "x"], "Y": ["I", "YA", "YE", "My", "B", "Your", "OY", "AY", "FY", "XY", "EY", "G", "SY", "RY", "T", "KY", "YY", "Toy", "Year", "YD", "CH", "BY", "XX", "MY", "TY", "Py", "L", "J", "Ty", "MX", "y", "YC", "HY", "NY", "Yo"], "Z": ["Zone", "D", "Zip", "F", "ZX", "NZ", "N", "TD", "ZI", "G", "S", "UX", "T", "YY", "Q", "V", "W", "AZ", "M", "z", "SL", "UD", "FL", "Zero", "C", "OP", "U", "Az", "TY", "L", "TON", "SS", "ZA", "K", "Ze", "ZZ", "SC", "UID", "B"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    private static Scanner sc;\\n    static int w;\\n    static int h;\\n    static int x;\\n    static int y;\\n    static int r;\\n    \\n\\n\tpublic static void main(String[] args) {\\n    \tsc = new Scanner(System.in);\\n    \tw = sc.nextInt();\\n    \th = sc.nextInt();\\n    \tx = sc.nextInt();\\n    \ty = sc.nextInt();\\n    \tr = sc.nextInt();\\n    \tif (x-r<0||x+r>w ||y-r<0||y+r>h){\\n    \t\tSystem.out.println(\"No\");\\n    \t}else{\\n    \t\tSystem.out.println(\"Yes\");\\n    \t}\\n    }\\n}\\n", "target": "171", "substitutes": {"sc": ["usc", "uc", "lc", " unsc", " cr", "cc", "cer", "anc", "esc", " resc", " scorer", "sec", "qu", "cgi", "cl", "sys", "system", "cr", "sv", "bc", "sp", "inc", " scr", "dc", "comm", "ec", "capt", "ko", "ctl", "irc", "sch", "cu", "go", "sw", "conv", "sync", "sl", "fc", "func", "tc", " esc", " cs", "scan", "sq", "cs", "ss", "nc", "pb", "c", " rc", "osc", "Sc", " cle", "gc", "asc", "s", "scl", "sr", "isc", "SC", "mc", "rc", "pc", " subsc", "ch", "desc"], "w": ["ex", "wx", "wo", "work", "wl", "wb", "wt", "wp", "ew", "n", "aw", "wi", "ws", "iw", "wa", "width", "wal", "ow", "sw", "wid", "rw", "wd", "W", "win", "hw", "wr", "ww", "nw", "wy", "wh", "p", "we", "fw", "th", "kw", "window"], "h": ["he", "uh", "ho", "hi", "hl", "l", "sh", "kh", "m", "v", "n", "oh", "bh", "ch", "hang", "host", "high", "hh", "ih", "hz", "hd", "b", "ht", "hw", "history", "z", "hr", "H", "i", "html", "k", "ph", "wh", "p", "hei", "ac", "ha", "hm", "hs", "height", "ah"], "x": ["ix", "ex", "wx", "ax", "el", "l", "o", "n", "v", "m", "xf", "wa", "lat", "xy", "width", "tx", "sw", "at", "lon", "xx", "f", "on", "px", "wd", "xc", "z", "xa", "left", "j", "zx", "dx", "i", "g", "xt", "c", "e", "ct", "X", "t", "rx", "p", "s", "xs", "xi", "xp", "fx", "ox"], "y": ["ye", "sy", "hot", "ym", "yet", "iy", "o", "yl", "n", "py", "gy", "m", "v", "ch", "ay", "ey", "uy", "cy", "yout", "lat", "xy", "ys", "ya", "b", "ry", "yy", "ies", "z", "j", "yt", "vy", "i", "oy", "axy", "sky", "Y", "yi", "my", "wy", "yr", "ot", "t", "ny", "p", "ty", "yo"], "r": ["br", "rr", "q", "rh", "result", "d", "rg", "rar", "ar", "l", "rs", "nr", "rf", "rad", "ur", "rt", "vr", "cr", "v", "n", "dr", "m", "rd", "err", "tr", "kr", "attr", "mr", "or", "R", "res", "lr", "u", "ir", "it", "i", "g", "c", "e", "fr", "er", "t", "p", "rate", "re", "rc", "rb", "sr", "gr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint x = sc.nextInt();\\n\t\tint sum = 0;\\n\t\tint count = 0;\\n\t\t\\n\t\tfor (int i = 0; i <= a; i++) {\\n\t\t\t\\n\t\t\tfor (int j = 0; j <= b; j++) {\\n\t\t\t\t\\n\t\t\t\tfor (int j2 = 0; j2 <= c; j2++) {\\n\t\t\t\t\tsum = (500 * i) + (100 * j) + (50 * j2);\\n\t\t\t\t\t\\n\t\t\t\t\tif(x == sum) {\\n\t\t\t\t\t\tcount ++;\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t}\\n\t\t\t\\n\t\t}\\n\t\t\\n\t\tSystem.out.println(count);\\n\t}\\n\\n}", "target": "127", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cgi", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "dc", "ck", "ko", "ctl", "fc", "sync", "tc", "ctrl", "scan", "sq", "cs", "ner", "ss", "nc", "g", "pb", "osc", "cmp", "Sc", "out", "gc", "ng", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch"], "a": ["ae", "r", "ca", "ar", "oa", "ta", "da", "aa", "sta", "sa", "ai", "act", "A", "at", "ia", "an", "la", "ga", "ao", "ab", "ea", "apa", "area", "ba", "aaa", "ach", "aj", "alpha", "ma", "as", "ac", "au", "va", "am"], "b": ["br", "ca", "wb", "ob", "mb", "bc", "n", "gb", "bf", "db", "by", "bl", "bs", "eb", "ble", "fb", "bi", "ib", "nb", "ab", "ba", "body", "bb", "cb", "y", "be", "rb", "B"], "c": ["arc", "ca", "lc", "cc", "d", "con", "cos", "co", "cf", "bc", "n", "ce", "cp", "v", "dc", "city", "cor", "ec", "cu", "fc", "tc", "z", "C", "cs", "cm", "ci", "com", "ct", "gc", "etc", "ac", "cb", "ctx", "mc", "ch"], "x": ["ix", "r", "ex", "l", "ox", "xml", "h", "v", "n", "m", "xf", "xy", "mean", "tx", "act", "xx", "index", "f", "px", "match", "test", "z", "xa", "is", "dx", "xt", "mx", "max", "alpha", "w", "X", "t", "check", "p", "rx", "ctx", "y", "xi", "xs", "xp"], "sum": ["Sum", "num", "ount", "result", "acc", "mask", "number", "weight", "total", " SUM", "tmp", "n", "summary", "v", "ash", "percent", "sa", "alph", "doc", "mean", "ind", "index", "us", "match", "mem", "z", "zip", "um", "si", "ity", "spread", "cum", "length", "score", "hum", "sim", "max", "alpha", "out", "diff", "sam", "average", "add", "size", "med", "hash"], "count": ["num", "ount", "result", "coll", "acc", "limit", "found", "number", "draw", "total", "zero", "amount", "n", "summary", "stat", "process", "detail", "call", "report", "state", "Count", "cache", "index", "search", "list", "match", "code", "test", "const", "must", "um", "find", "trace", "child", "cont", "status", "length", "score", "max", "cmp", "ct", "counter", "pool", "diff", "flag", "size", "nt"], "i": ["ix", "ri", "phi", "hi", "zi", "iu", "ar", "ei", "ip", "ji", "li", "id", "asi", "v", "ij", "ini", "this", "ai", "ki", "im", "ori", "qi", "ik", "ia", "init", "ir", "io", "it", "ity", "ib", "ui", "ie", "is", "pi", "iso", "ti", "ic", "ci", "sim", "yi", "multi", "iq", "ami", "xi", "ii", "si", "di", "mi"], "j": ["br", "q", "jac", "pt", "el", "jl", "ji", "jj", "jo", "obs", "v", "ij", "let", "ne", "ion", "bs", "ge", "ja", "ind", "bj", "oj", "job", "z", "it", "pr", "uj", "g", "json", "k", "obj", "aj", "js", "jp", "J", "out", "fr", "bo", "other", "kj", "y", "jc", "ort", "je", "dj"], "j2": [" jtwo", "j5", "bj2", "dj8", " jTwo", " j8", "jc02", "jc1", "let5", "jtwo", "jaTwo", "jj", " j1", "bjTwo", "ja2", "let2", "letTwo", "let02", "jcj", " j02", "djtwo", "ja3", "jc2", " jj", " j3", "j02", "dj1", " j5", "j1", "jatwo", "jitwo", "jpj", "jp2", "jTwo", "jiTwo", "bj02", "j8", "jp02", "bj5", "dj2", "ja1", "ja8", "ji3", "ji2", "j3", "jp1"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.NoSuchElementException;\\n\\nclass Main {\\n\\n  static class Solver {\\n    final FastScanner sc;\\n    final PrintWriter writer;\\n\\n    Solver(final FastScanner sc, final PrintWriter writer) {\\n      this.sc = sc;\\n      this.writer = writer;\\n    }\\n\\n    void run() {\\n      String s = sc.next();\\n      StringBuilder sb = new StringBuilder();\\n      for (int i = 0; i < s.length(); i++) {\\n        sb.append(\"x\");\\n      }\\n      writer.println(sb.toString());\\n    }\\n  }\\n\\n  public static void main(final String[] args) {\\n    final FastScanner sc = new FastScanner();\\n    try (final PrintWriter w = new PrintWriter(System.out)) {\\n      new Solver(sc, w).run();\\n      w.flush();\\n    }\\n  }\\n\\n  // CRT stuff\\n  static class MOD {\\n    private static final int MOD = (int) 1e9 + 7;\\n\\n    static long plus(long x, long y) {\\n      x %= MOD;\\n      y %= MOD;\\n      return (x + y) % MOD;\\n    }\\n\\n    static long sub(long x, long y) {\\n      x %= MOD;\\n      y %= MOD;\\n      return (x - y + MOD) % MOD;\\n    }\\n\\n    static long multi(long x, long y) {\\n      x %= MOD;\\n      y %= MOD;\\n      return x * y % MOD;\\n    }\\n\\n    static long div(long x, long y) {\\n      x %= MOD;\\n      y %= MOD;\\n      return x * pow(y, MOD - 2) % MOD;\\n    }\\n\\n    static long pow(final long a, final long p) {\\n      if (p == 0)\\n        return 1;\\n      if (p % 2 == 0) {\\n        final long halfP = p / 2;\\n        final long root = pow(a, halfP);\\n        return root * root % MOD;\\n      } else\\n        return a * pow(a, p - 1) % MOD;\\n    }\\n  }\\n\\n  // FastScanner\\n  static class FastScanner {\\n    private final InputStream in = System.in;\\n    private final byte[] buffer = new byte[1024];\\n    private int ptr = 0;\\n    private int buflen = 0;\\n\\n    public FastScanner() {\\n    }\\n\\n    private boolean hasNextByte() {\\n      if (ptr < buflen) {\\n        return true;\\n      } else {\\n        ptr = 0;\\n        try {\\n          buflen = in.read(buffer);\\n        } catch (final IOException e) {\\n          e.printStackTrace();\\n        }\\n        if (buflen <= 0) {\\n          return false;\\n        }\\n      }\\n      return true;\\n    }\\n\\n    private int readByte() {\\n      if (hasNextByte())\\n        return buffer[ptr++];\\n      else\\n        return -1;\\n    }\\n\\n    private boolean isPrintableChar(final int c) {\\n      return 33 <= c && c <= 126;\\n    }\\n\\n    public boolean hasNext() {\\n      while (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n        ptr++;\\n      return hasNextByte();\\n    }\\n\\n    public String next() {\\n      if (!hasNext())\\n        throw new NoSuchElementException();\\n      final StringBuilder sb = new StringBuilder();\\n      int b = readByte();\\n      while (isPrintableChar(b)) {\\n        sb.appendCodePoint(b);\\n        b = readByte();\\n      }\\n      return sb.toString();\\n    }\\n\\n    public long nextLong() {\\n      if (!hasNext())\\n        throw new NoSuchElementException();\\n      long n = 0;\\n      boolean minus = false;\\n      int b = readByte();\\n      if (b == '-') {\\n        minus = true;\\n        b = readByte();\\n      }\\n      if (b < '0' || '9' < b) {\\n        throw new NumberFormatException();\\n      }\\n      while (true) {\\n        if ('0' <= b && b <= '9') {\\n          n *= 10;\\n          n += b - '0';\\n        } else if (b == -1 || !isPrintableChar(b)) {\\n          return minus ? -n : n;\\n        } else {\\n          throw new NumberFormatException();\\n        }\\n        b = readByte();\\n      }\\n    }\\n\\n    public int nextInt() {\\n      final long nl = nextLong();\\n      if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n        throw new NumberFormatException();\\n      return (int) nl;\\n    }\\n\\n    public double nextDouble() {\\n      return Double.parseDouble(next());\\n    }\\n\\n    public int[] nextIntArray(final int n) {\\n      final int[] a = new int[n];\\n      for (int i = 0; i < n; i++)\\n        a[i] = nextInt();\\n      return a;\\n    }\\n\\n    public long[] nextLongArray(final int n) {\\n      final long[] a = new long[n];\\n      for (int i = 0; i < n; i++)\\n        a[i] = nextLong();\\n      return a;\\n    }\\n  }\\n}", "target": "122", "substitutes": {"sc": ["arc", "usc", "uc", "lc", "ca", "cc", "cer", "anc", "esc", "cur", "mp", "sec", "co", "cl", "sys", "sh", "bc", "cr", "sv", "cp", "sp", "dc", "ocr", "ec", "capt", "ck", "comm", "sel", "cu", "sch", "sw", "se", "fc", "tc", "ctrl", "cv", "sq", "cs", "nc", "pb", "cm", "c", "sim", "osc", "ct", "Sc", "gc", "asc", "ac", "isc", "scl", "ctx", "SC", "scrib", "pc", "mc", "rc", "cus", "ch"], "writer": ["println", "r", "outer", "driver", "wk", "target", "nn", "wb", "wt", "riter", "builder", "wp", "server", "tree", "writ", "n", "console", "rew", "creator", "processor", "read", "this", "print", "wa", "width", "handler", "Writer", "write", "client", "tx", "sw", "cache", "caster", "rw", "buffer", "tc", "reader", "editor", "worker", "woman", "null", "document", "message", "stream", "ner", "wr", "fn", "window", "wrote", "manager", "table", "widget", "output", "storage", "w", "out", "format", "er", "gc", "writing", "ln", "written", "nt", "WR", "wright", "maker"], "s": ["set", "gs", "r", "sql", "sf", "rs", "ashes", "sys", "sv", "strings", "v", "n", "ws", "bs", "S", "ms", "ats", "str", "a", "b", "f", "ls", "string", "sts", "is", "ts", "sq", "ss", "c", "js", "w", "t", "qs", "p", "xs", "hs", "x"], "sb": ["sbm", "BB", "sf", "wb", "sg", "ob", "mb", "orb", "bsp", "sv", "zb", "lp", "gb", "bf", "bh", "stab", "sa", "bs", "lb", "bj", "gob", "b", "eb", "bd", "fb", "si", "ib", "nb", "bash", "sq", "bg", "pb", "bt", "rob", "kb", "sam", "obb", "bb", "cb", "SB", "rb", "erb", "abb"], "i": ["q", "I", "ix", "phi", "gi", "hi", "chain", "ip", "point", "li", "id", "n", "m", "me", "err", "in", "batch", "ai", "ms", "mu", "im", "ind", "qi", "us", "init", "u", "io", "j", "bi", "it", "ui", "is", "uri", "pi", "ti", "ic", "ci", "sim", "cli", "e", "PI", "multi", "t", "gu", "y", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) throws java.lang.Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String[] strArray = new String[n];\\n        for (int i = 0; i < n; i++) {\\n            char[] ca = sc.next().toCharArray();\\n            Arrays.sort(ca);\\n            strArray[i] = String.valueOf(ca);\\n        }\\n        sc.close();\\n        Arrays.sort(strArray);\\n\\n        long count = 1;\\n        long res = 0;\\n        String before = \"\";\\n        String current = \"\";\\n        for (String str : strArray) {\\n            before = current;\\n            current = str;\\n            if (before.equals(current)) {\\n                count++;\\n            } else {\\n                res += (count * (count - 1)) / 2;\\n                count = 1;\\n            }\\n        }\\n        res += (count * (count - 1)) / 2;\\n\\n        System.out.print(res);\\n    }\\n}\\n", "target": "32", "substitutes": {"sc": ["usc", "arc", "sac", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "ser", "Scan", "cr", "sv", "sp", "bc", "inc", "nl", "ec", "ctl", "cle", "src", "sch", "sw", "fc", "sync", "tc", "reader", "scan", "sq", "cs", "sci", "ss", "nc", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "sr", "ctx", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "n": ["num", "mn", "r", "nu", "d", "nn", "number", "l", "un", "len", "N", "gn", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "an", "j", "no", "nb", "nc", "na", "k", "np", "en", "c", "conf", "nm", "ng", "t", "p", "network", "nor", "ln", "net", "nt"], "strArray": [" strTable", "intArray", "strSet", "Strarray", "brAr", "charAvailable", " strAvailable", " strarray", "charAr", " strAnswer", " strList", "chararray", "stringArray", "STRAr", "STRList", "intAr", "charList", "STRArray", " strSet", "charAnswer", " strString", "strAr", "StrArray", "brString", "strAvailable", "StrList", "charSet", "stringarray", "strString", "brArray", "strAnswer", "stringAnswer", " strAr", "strList", "stringSet", "intList", "intTable", "strarray", "StrTable", "strTable", "StrAr", "brarray", "STRAvailable", "charArray", "StrString"], "i": ["q", "I", "ix", "ex", "ri", "phi", "gi", "hi", "iu", "ip", "ji", "point", "li", "id", "v", "m", "ij", "me", "in", "batch", "ai", "ms", "im", "ind", "qi", "ori", "index", "us", " ii", "u", "init", "io", "ims", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "ti", "ic", "ci", "c", "sim", "my", "e", "multi", "iter", "gu", "y", "ii", "xi", "si", "di", "x", "mi"], "ca": ["ae", "cc", "Ca", "CA", "co", "aca", "ta", "bc", "car", "ce", "cr", "da", "ane", "sa", "sha", "ara", "cy", "tar", "cca", "a", "ia", "ica", " Ca", "pa", "ea", "ba", "na", "cm", "ci", "c", "fa", "ada", "ma", "aco", "cci", "ac", "ha", "ka", "cas", "era", "cf"], "count": ["num", "ount", "ctr", "coll", "cc", "result", "col", "found", "con", "chain", "weight", "cond", "draw", "len", "total", "amount", "reset", "rand", "ch", "soft", "process", "call", "sum", "state", "report", "Count", "ind", "cache", "act", "index", "list", "code", "f", "type", "force", "scroll", "hold", "history", "currency", "comment", "find", "cmd", "nb", "child", "cont", "length", "cum", "country", "c", "conf", "max", "ct", "counter", "continue", "check", "t", "gc", "mount", "add", "size", "all", "nt", "hash"], "res": ["r", "reg", "result", "rev", "frac", "rs", "len", "ref", "ress", "reset", "prefix", "vec", "Res", "rand", "respons", "stock", "resp", "rep", "fin", "print", "sum", "val", "ms", "ret", "euro", "pos", "req", "mem", "arr", "resh", "rex", "results", "rest", "rss", "vol", "rel", "obj", "des", "out", "RES", "cons", "x", "we", "re", "ps", "pas", "resolution", "nt", "pres", "rem", "hash"], "before": ["set", "under", "save", "star", "Before", "from", "after", "pre", "like", "above", "now", "behind", "reset", "needed", "pres", "bf", "PRE", "self", "here", "are", "start", "back", "since", "then", "list", "ready", "prev", "string", "first", "head", "origin", "old", "request", "alpha", "other", "original", "local", "last", "initial", "just", "fore"], "current": ["set", "valid", "active", "result", "name", "reported", "cur", "temp", "after", "pre", "replace", "progress", "now", "latest", "prefix", "currently", "value", "wait", "tmp", "sv", "default", "tr", "remote", "this", "path", "update", "get", "client", "then", "recent", "Current", "cat", "string", "null", "complete", "primary", "content", "text", "cont", "keep", "today", "c", "old", "txt", "other", "continue", "local", "multi", "p", "parent", "last", "copy", "all", "initial", "first", "next", "java"], "str": ["br", "set", "r", "STR", "star", "cur", "l", "prefix", "cr", "sp", "m", "tr", "in", "print", "sw", "list", "arr", "z", "prev", "j", "string", "it", "Str", "full", "text", "g", "c", "obj", "txt", "w", "fr", "exp", "t", "s", "char", "st"]}}
{"code": "import java.util.Scanner;\\nclass Main {\\n\tint [][] cards = new int [5][15];\\n\tprivate  static String[] cards2 = {\"0\",\"S\",\"H\",\"C\",\"D\"};\\n\tint n,j,i,k,cards4,Nu;\\n\tString cards3;\\n\tpublic void ca() {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tfor(j = 1;j <= 4;j++) {\\n\t\t\tfor(i = 1 ; i <= 13; i++) {\\n\t\t\t\tk = i;\\n\t\t\t\tcards[j][i] = k;\\n\t\t\t}\\n\t\t}\\n\t\tn = sc.nextInt();\\n\t\tfor(k = 0 ; k < n ; k++) {\\n\t\t\tcards3 = sc.next();\\n\t\t\tcards4 = sc.nextInt();\\n\t\t\tif(cards3.equals( \"S\" )) {\\n\t\t\t\tNu = 1;\\n\t\t\t} else if(cards3.equals( \"H\" )) {\\n\t\t\t\tNu = 2;\\n\t\t\t} else if(cards3.equals( \"C\" )) {\\n\t\t\t\tNu = 3;\\n\t\t\t} else if(cards3.equals( \"D\" )) {\\n\t\t\t\tNu = 4;\\n\t\t\t}\\n\t\t\tswitch(Nu) {\\n\t\t\t\tcase 1:\\n\t\t\t\t\tfor(j = 1;j <= 13 ; j++) {\\n\t\t\t\t\t\tif(cards4 == cards[1][j]) {\\n\t\t\t\t\t\t\tcards[1][j] -= cards4;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase 2:\\n\t\t\t\t\tfor(j = 1;j <= 13 ; j++) {\\n\t\t\t\t\t\tif(cards4 == cards[2][j]) {\\n\t\t\t\t\t\t\tcards[2][j] -= cards4;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase 3:\\n\t\t\t\t\tfor(j = 1;j <= 13 ; j++) {\\n\t\t\t\t\t\tif(cards4 == cards[3][j]) {\\n\t\t\t\t\t\t\tcards[3][j] -= cards4;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tbreak;\\n\t\t\t\tcase 4:\\n\t\t\t\t\tfor(j = 1;j <= 13 ; j++) {\\n\t\t\t\t\t\tif(cards4 == cards[4][j]) {\\n\t\t\t\t\t\t\tcards[4][j] -= cards4;\\n\t\t\t\t\t\t}\\n\t\t\t\t\t}\\n\t\t\t\t\tbreak;\\n\t\t\t\tdefault:\\n\t\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tfor(j = 1;j <= 4;j++) {\\n\t\t\tfor(i = 1;i <= 13;i++) {\\n\t\t\t\tif(cards[j][i] != 0) {\\n\t\t\t\t\tSystem.out.printf(\"%S %d\\n\",cards2[j],cards[j][i]);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\t}\\n\tpublic static void main(String[] agrs) {\\n\t\tnew Main().ca();\\n\t}\\n}", "target": "189", "substitutes": {"cards": ["details", "flags", "guards", "bytes", "tracks", "units", "shape", "ims", "rules", "keys", "phones", "terms", "boxes", "changes", "mers", "names", "vals", "dates", "quarters", "modules", "photos", "versions", "members", "users", "docs", "cuts", "sequence", "ways", "days", "links", "objects", "words", "bits", "services", "cons", "posts", "images", "checks", "axe", "card", "banks", "styles", "laws", "types", "cells", "ards", "pieces", "hands", "results", "flows", "weights", "cont", "tags", "values", "balls", "groups", "resources", "comments", "points", "games", "holders", "windows", "pins", "ids", "caps", "lists", "codes", "hips", "fields", "lands", "letters", "sets", "times", "gc", "lights", "lets", "pointers"], "cards2": [" cards5", "codes4", "card5", "card4", "card1", "codes5", "cards1", " cards1", "codes1", "codes2", "cards5", "card2"], "n": ["nu", "num", "mn", "d", "nn", "l", "un", "len", "N", "h", "o", "ns", "v", "m", "ne", "nan", "nl", "cn", "ni", "sn", "u", "z", "no", "nb", " N", "na", "fn", "np", "nc", "en", "c", "t", "p", "ln", "y", "net", "size", "nt", "names"], "j": ["br", "q", "block", "r", "ix", "sp", "batch", "str", "note", "f", "job", "pr", "e", "kj", "y", "jack", "di", "x", "je", "jl", "dj", "jit", "og", "el", "l", "ji", "o", "adj", "ij", "bs", "state", "ret", "ja", "right", "z", "it", "uj", "g", "js", "J", "bo", "fr", "ng", "s", "pt", "jj", "jo", "dr", "tr", "jas", "ion", "this", "ind", "u", "json", "jp", "p", "jc", "ch", "v", "m", "err", "jump", "by", "ju", "bj", "b", "oj", "ie", "off", "aj", "obj", "t", "er", "be", "ijk", "to"], "i": ["I", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "fi", "ei", "ip", "ji", "li", "id", "ij", "m", "dr", "ini", "me", "in", "ai", "ki", "im", "ind", "ori", "at", "qi", "ik", "ia", "init", "u", "\u0438", "ir", "io", "bi", "it", "z", "ui", "ie", "is", "pi", "ti", "ic", "ci", "c", "sim", "multi", "er", "iter", "p", "s", "ami", "oi", "y", "ii", "xi", "si", "di", "mi"], "k": ["q", "ke", "key", "wk", "ikk", "kl", "ks", "kh", "kr", "dk", "km", "tk", "ck", "ko", "kn", "ak", "unk", "kar", "ki", "ind", "ik", "kk", "uk", "u", "z", "it", "mk", "ark", "g", "ok", "ek", "sk", "ku", "isk", "K", "w", "p", "kind", "kj", "ac", "kt", "ijk", "ka", "kw", "ch", "kid"], "cards4": ["casesFour", "groups32", "cardsIO", "ards4", "cardsFour", "pointers422", "cases5", "cards32", "cards42", "holdersFour", "listsfour", "gamesfour", "olds464", " cards5", "tags4", "boxes4", " cards1", "commentsfour", "pointers404", "imagesFour", "bitsfour", "ards04", "bits544", "lists04", " cardsFour", "casesfour", "groupsfour", "cardFour", "ards32", "pointersfour", "holders32", "fieldsfour", " cardsfour", "holders4", "postsFour", "ards42", "games4", "games404", "images5", "card4", "boxes422", "times4", "framesfour", "comments544", "cards422", "groups4", "fields404", "comments4", "cases4", "tags2", "boxes04", "pointers424", "fields424", "timesfour", "cards464", "bits4", " cards04", "posts4", "cards404", "ardsfour", "membersIO", "boxesfour", "lists4", "membersfour", "lists2", "cardsfour", "holdersfour", "pointers4", "ards2", "postsfour", "ards1", "groups42", "tags04", "games424", "pointers04", "holders42", "frames464", "fields4", "frames544", "timesFour", "imagesfour", "times04", "cards544", "bits464", "cards5", "cardfour", "tags1", "cards424", "frames4", "ards464", "members4", "pointersFour", "comments464", "members464", "oldsIO", "posts2", "card2", "holders04", "ards422", "oldsfour", "olds4", "cards04", "cards1", "images4", "ardsIO"], "Nu": ["nu", "SNu", "NNuu", "nU", "ANuf", "Niu", "Sui", " Nbu", "Nuid", "Ku", "BU", "NoLu", "Su", "Nus", "Nui", "NNeu", "Kuu", "NNU", "Nou", "Neeu", "Neu", "NewU", "Buu", "NNu", "ANiu", "Nuu", "Npu", "SNU", "neu", "Nnum", "SU", "Iu", "nuu", "NoU", "nbu", "GU", " Nuu", "SNuf", "Nuf", "NU", "Nouf", "SNLu", "Newu", "Neuu", "NeU", "Sus", " NU", " Niu", "ANu", "ANLu", "IU", "Kpu", "KU", "Bu", "Newui", "niu", "ANbu", "Bpu", "Newus", "Nepu", "Gus", "NNuid", "NNnum", "Gui", " Nnum", "Inum", "nuid", "NLu", "ANU", "Gu", "Nbu", "Iuu", "Neuid"], "cards3": ["ards23", "usersthree", "values3", "users3", "cardsThree", "card3", "checks3", "tags30", "tags03", "lines3", " cardsThree", "cardsdef", "casesThree", "forms3", "cards30", "checksdef", "usersThree", "ardsthree", "valuesThree", "stylesthree", "card4", "valuesthree", "cards03", "caps03", "ards03", "namesThree", "names03", "cards23", "ards3", "cases3", "cardsthree", "styles23", "tagsThree", "ards30", "flagsThree", "caps3", "card2", " cardsthree", "checksThree", "checks03", "capsthree", "formsthree", "forms03", "linesThree", "linesthree", "cases4", "caps30", "cardThree", "cases2", "flagsdef", "formsThree", "stylesThree", "capsThree", "names3", "lines23", "namesthree", "values4", "flags03", "flags3", "ardsThree", "tags3", "capsdef", "users4", "styles3"], "sc": ["usc", "lc", "ex", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "ctl", "capt", "cle", "src", "sch", "sw", "fc", "sync", "func", "exec", "tc", "scan", "sq", "cs", "ss", "nc", "pb", "ic", "c", "osc", "cmp", "Sc", "gc", "scl", "asc", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "ch", "desc"]}}
{"code": "import java.util.Arrays;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint n = scan.nextInt();\\n\t\tint m = scan.nextInt();\\n\t\tint[] a = new int[m];\\n\t\tint[] b = new int[m];\\n\t\tfor (int i = 0; i < m; i++) {\\n\t\t\ta[i] = scan.nextInt();\\n\t\t\tb[i] = scan.nextInt();\\n\t\t}\\n\t\tint[] r = new int[n+10];\\n\t\tArrays.fill(r, 0);\\n\t\tfor (int i = 0; i < m; i++) {\\n\t\t\tr[a[i]]++;\\n\t\t\tr[b[i]]++;\\n\t\t}\\n\t\tfor (int i = 1; i <= n; i++) {\t\t\t\\n\t\t\tSystem.out.println(r[i]);\\n\t\t}\\n\t}\\n}\\n", "target": "57", "substitutes": {"scan": ["save", "spin", "sql", "row", "nn", "reach", "gate", "parse", "sb", "san", "cgi", " Scan", "ser", "sys", "Scan", "system", "connect", "sv", "sp", "sign", "sin", "conn", "read", "in", "by", "stat", "can", "report", "sn", "scale", "auto", "se", "pass", "sm", "sync", "search", "send", "scroll", "an", "stan", "cat", "sc", "find", "ner", "g", "store", "sim", "link", "out", "black", "gc", "p", "sur", " scanner", "re", "proc", "query", "ch", "ann", "see"], "n": ["nu", "mn", "num", "d", "nn", "l", "N", "h", "o", "ns", "v", "ne", "nl", "ni", "sn", "on", "an", "j", "nb", "g", "pi", "na", "k", "nc", "np", "en", "c", "nm", "t", "p", "y", "net", "nt", "x"], "m": ["num", "mn", "q", "mm", "dm", "d", "mo", "mb", "l", "o", "h", "perm", "v", "module", "om", "md", "ms", "mr", "im", "sm", "f", "M", "z", "j", "bm", "tm", "g", "pi", "k", "cm", "c", "mt", "nm", "ma", "t", "s", "p", "man", "y", "mis", "mc", "mat", "x", "mi"], "a": ["ae", "va", "ca", "att", "ar", "oa", "\u00e4", "ta", "aa", "app", "sa", "ai", "act", "A", "at", "ia", "an", "la", "ga", "ao", "ab", "ea", "area", "ba", "aaa", "na", "eu", "aj", "ap", "as", "t", "s", "p", "ac", "ma", "au", "ata", "am"], "b": ["br", "emb", "d", "wb", "sb", "ob", "l", "rb", "h", "bc", "v", "bf", "db", "by", "bl", "bs", "lib", "back", "eb", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "g", "ba", "c", "bis", "bo", "t", "blue", "p", "bb", "cb", "be", "y", "bar", "B"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "ik", "ims", "is", "ic", "MI", "ami", "y", "oi", "di", "ri", "fi", "chain", "ip", "ji", "point", "id", "ij", "ori", "io", "bi", "it", "ci", "sim", "cli", "s", "iq", "ii", "phi", "hi", "cgi", "ni", "ind", "list", "u", "fire", "\u0438", "pi", "yi", "xi", "si", "mi", "I", "gi", "iy", "ini", "err", "wi", "im", "qi", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "multi", "info", "iter", "to"], "r": ["q", "rr", "rh", "result", "d", "rg", "row", "ar", "rect", "rar", "l", "rs", "nr", "rf", "red", "ur", "rt", "h", "o", "cr", "dr", "rd", "tr", "err", "rank", "ro", "mr", "ret", "or", "R", "res", "right", "rm", "f", "rw", "lr", "u", "range", "hr", "it", "pr", "rec", "c", "rel", "e", "w", "fr", "er", "t", "p", "rate", "re", "rc", "rb", "sr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String args[]) {\\n\\n\tScanner std = new Scanner(System.in);\\n\\n\\n\t//List<Integer> list = new ArrayList<>();\\n\tint N = std.nextInt();\\n\tint L = std.nextInt();\\n\tint Lsum = 0;\\n\tint Ltemp = L;\\n\t//String S = std.next();\\n\\n\tif(L <= 0 && Math.abs(L) < N) {\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tLsum = Lsum +L;\\n\t\t\tL++;\\n\t\t}\\n\t}\\n\\n\\n\telse if(L <= 0 && Math.abs(L) >= N) {\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tLsum = Lsum + L;\\n\t\t\tL++;\\n\t\t}\\n\t\tLsum = Lsum - L + 1;\\n\t}\\n\\n//-5,-4,-3=-12.\\n\telse {\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tLsum = Lsum + L;\\n\t\t\tL++;\\n\t\t}\\n\t\tLsum = Lsum - Ltemp;\\n\t}\\n\\n\tSystem.out.println(Lsum);\\n\\n\\n\t  }\\n\\n\\n\t}\\n\\n\\n", "target": "91", "substitutes": {"std": [" ans", " screen", " output", " sn", " inner", " spe", " scorer", " spider", " Scan", " out", "Scan", "anners", " banner", " res", " sensor", " annotation", "S", " input", " dst", " st", " ret", "scan", " src", " status", "ner", " state", " cat", " scanned", " ignored"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scan = new Scanner(System.in);\\n        int a = scan.nextInt();\\n        int b = scan.nextInt();\\n        int c = scan.nextInt();\\n        int d = scan.nextInt();\\n        while (a > 0 && c>0){\\n            c-=b;\\n            if(c > 0){\\n                a-=d;\\n            }else{\\n                System.out.println(\"Yes\");\\n                return;\\n            }\\n        }\\n        System.out.println(\"No\");\\n    }\\n}\\n", "target": "186", "substitutes": {"scan": ["set", "r", "save", "sql", "row", "nn", "reach", "gate", "parse", "bin", "san", "cgi", " Scan", "ser", "sys", "Scan", "system", "log", "sv", "n", "sin", "util", "read", "in", "stat", "can", "get", "report", "run", "auto", "se", "gen", "sync", "list", "send", "scroll", "an", "sort", "cat", "sc", "find", "ner", "g", "out", "black", "check", "gc", "info", "sur", "char", " scanner", "re", "proc", "query", "ch", "ann", "see"], "a": ["ae", "r", "ca", "ar", "l", "oa", "o", "h", "ta", "n", "da", "aa", "sta", "sa", "al", "ai", "isa", "act", "at", "A", "ia", "an", "la", "ao", "j", "ab", "pa", "ea", "area", "ba", "aaa", "ach", "na", "aj", "alpha", "ma", "t", "as", "p", "ac", "au", "ata", "x", "am"], "b": ["ca", "sb", "ob", "l", "abs", "bc", "n", "gb", "bf", "db", "aa", "by", "bs", "bp", "back", "eb", "bd", "f", "fb", "bi", "ib", "nb", "ab", "i", "g", "ba", "bb", "cb", "be", "y", "rb", "B"], "c": ["r", "lc", "cut", "cc", "con", "l", "co", "o", "cf", "h", "cr", "bc", "n", "ce", "v", "unc", "cp", "dc", "m", "can", "cu", "f", "fc", "u", "tc", "z", "sc", "cd", "i", "C", "cs", "g", "nc", "cm", "abc", "ci", "com", "conf", "ct", "e", "t", "ac", "cb", "rc", "ch"], "d": ["D", "pd", "r", "dec", "df", "l", "dd", "red", "de", "n", "v", "da", "dr", "sd", "db", "ad", "dk", "md", "bd", "f", "z", "j", "dra", "cd", "div", "dx", "g", "ds", "e", "ded", "t", "nd", "dt", "di", "del"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int k = sc.nextInt();\\n    int answer = 0;\\n    for (int a = 1; a <= k; a++) {\\n      for (int b = a; b <= k; b++) {\\n        for (int c = b; c <= k; c++) {\\n          int gcd = gcd(a, gcd(b, c));\\n          if (a == b && b == c) {\\n            answer += gcd;\\n          } else if (a == b || a == c || b == c) {\\n            answer += 3 * gcd;\\n          } else {\\n            answer += 6 * gcd;\\n          }\\n        }\\n      }\\n    }\\n    System.out.println(answer);\\n  }\\n\\n  static int gcd(int a, int b) {\\n    if (b == 0) {\\n      return a;\\n    }\\n    return gcd(b, a % b);\\n  }\\n}\\n", "target": "6", "substitutes": {"sc": ["usc", "set", "uc", "r", "lc", "cc", "esc", "sb", "sec", "cl", "sys", "system", "Scan", "ser", "bc", "sv", "sp", "cr", "nl", "ec", "sel", "sch", "se", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "ok", "osc", "txt", "Sc", "gc", "asc", "isc", "SC", "mc", "pc", "rc", "ch"], "k": ["q", "ke", "wk", "ikk", "l", "kl", "zero", "kh", "kr", "n", "m", "dk", "km", "context", "tk", "ck", "ko", "kn", "ak", "unk", "kok", "ki", "kar", "count", "ik", "kk", "ack", "kick", "j", "mk", "i", "ok", "aka", "ek", "ku", "sk", "K", "kb", "p", "kind", "kj", "ka", "kw", "kid"], "answer": ["response", "onse", "review", "ask", "result", "description", "support", "translation", "ee", "array", "aq", "swers", "asm", "error", "entry", "address", "turn", "know", "value", "exit", "option", "attribute", "energy", "su", "vote", "section", "val", "interpret", "form", "wer", "search", "echo", "install", "offer", "sequence", "our", "poll", "results", "equ", "core", "uno", "ve", "expression", "message", "qv", "answered", "see", "approximately", "ze", "remember", "record", "reply", "question", "eni", "Answer", "say", "network", "flag", "query", "archive", "window", "term"], "a": ["r", "from", "ta", "admin", "n", "ak", "ai", "go", "af", "art", "ga", "ao", "alpha", "e", "as", "eas", "ac", "era", "all", "va", "ata", "x", "am", "l", "o", "aa", "app", "count", "ack", "xa", "anta", "pa", "ea", "apa", "ba", "aka", "ast", "au", "ae", "att", "ar", "qa", "al", "val", "act", "ia", "u", "an", "la", "i", "ach", "ma", "p", "ca", "aq", "oa", "abs", "v", "da", "sa", "A", "back", "at", "index", "j", "ab", "area", "aff", "aaa", "aj", "fa", "ap", "t", "ant", "ate"], "b": ["br", "r", "d", "bin", "beta", "sb", "wb", "ob", "base", "mb", "l", "o", "bar", "h", "bc", "value", "v", "gb", "bh", "bf", "db", "n", "m", "by", "bl", "bs", "val", "ub", "bool", "back", "ble", "eb", "f", "u", "fb", "bu", "z", "j", "bi", "ib", "bound", "nb", "ab", "i", "g", "ba", "bg", "length", "bt", "obj", "body", "bo", "e", "w", "t", "s", "p", "bb", "cb", "binary", "be", "y", "rb", "to", "ch", "B"], "c": ["arc", "uc", "r", "ca", "lc", "acc", "col", "cc", "coll", "d", "oc", "con", "l", "co", "cond", "h", "cr", "bc", "ce", "cp", "v", "unc", "ch", "cor", "dc", "n", "m", "ec", "can", "cu", "fc", "f", "u", "xc", "tc", "z", "cat", "cd", "i", "C", "cs", "g", "vc", "nc", "cm", "ci", "com", "ct", "e", "t", "s", "p", "ac", "cb", "y", "mc", "rc", "pc", "cf"], "gcd": ["gcent", "Gcd", "Gmd", "gdef", "gmde", "tgcd", "gbcd", "Gcent", "vgcent", "gcdef", "gfind", "cfgcd", "vgdd", "ogcd", "gbd", "gmbd", " gfind", "cfgmd", "tgdd", "gmcd", "gccd", "vgmd", "gcloud", "gcnd", "Gdd", "gbmd", " gcloud", " gdc", "gbCD", "Gbd", "gde", "pgdd", "gCD", " gdd", "gdc", "gnd", " gCD", "gbdc", "Gnd", " gcent", "gcCD", "Gdc", " gtd", "Gde", "gmCD", "Gfind", " gnd", "gdd", "gmd", "cfgCD", "pgCD", "Gdef", "pgcd", "Gcloud", "tgmd", " gmd", "tgCD", "GCD", "vgcd", "Gtd", "tgde", "gtd", "cfgfind", "ogtd", " gdef", "ogcloud", "ogCD", "tgbd"]}}
{"code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tList<Integer> list = new ArrayList<Integer>();\\n\t\tfor (int i = 0; i < 3; i++) {\\n\t\t\tlist.add(sc.nextInt());\\n\t\t}\\n\\n\t\tfinal int k = sc.nextInt();\\n\\n\t\tfor (int j = 0; j < k; j++) {\\n\t\t\tfinal int max = Collections.max(list);\\n\t\t\tfinal int maxIndex = list.indexOf(max);\\n\t\t\tfinal int mul = max * 2;\\n\t\t\tlist.set(maxIndex, mul);\\n\t\t}\\n\\n\t\tint result = 0;\\n\t\tfor (final int item : list) {\\n\t\t\tresult = result + item;\\n\t\t}\\n\\n\t\tSystem.out.println(result);\\n\\n\t}\\n\\n}\\n", "target": "201", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "psc", "cl", "sys", "sh", "sv", "bc", "cr", "sp", "dc", "nl", "ctl", "sch", "sw", "fc", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "ic", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "scrib", "ch"], "list": ["set", "block", "row", "array", "number", "li", "log", "n", "level", "batch", "detail", "show", "LIST", "shape", "collection", "left", "old", "pool", "def", "parent", "all", "st", "map", "true", "queue", "l", "temp", "chain", "len", "now", "source", "read", "pair", "lat", "form", "ist", "sort", "single", "sequence", "table", "local", "copy", "pre", "tree", "tmp", "print", "dict", "test", "string", "cont", "length", "json", "out", "p", "re", "add", "see", "dl", "word", "get", "the", "lists", "index", "load", "range", "stack", "null", "obj", "display", "L", "check", "iter"], "i": ["q", "I", "ix", "ex", "phi", "hi", "zi", "iu", "ar", "l", "ip", "li", "id", "v", "m", "me", "ini", "in", "print", "ai", "ki", "im", "ind", "ori", "a", "qi", "inter", "us", "io", "ims", "bi", "it", "ui", "ie", "is", "pi", "iso", "ci", "sim", "my", "ins", "multi", "iq", "info", "y", "xi", "ii", "si", "di", "x", "mi"], "k": ["q", "ke", "key", "kl", "ks", "n", "kh", "m", "kr", "dk", "km", "tk", "ck", "ko", "kn", "ak", "kok", "ki", "ik", "kk", "uk", "z", "mk", "ok", "ek", "ku", "sk", "K", "kj", "ka", "kw", "kid"], "j": ["br", "q", "att", "jl", "ji", "kid", "jj", "jo", "adj", "n", "ij", "m", "err", "jump", "jas", "msg", "ge", "ja", "im", "bj", "at", "b", "oj", "job", "z", " dj", "pr", "uj", "g", "json", "js", "obj", "aj", "old", "jp", "J", "other", "bo", "kj", "y", "x", "gr", "dj"], "max": ["end", "col", "key", "work", "ax", "next", "maximum", "base", "prime", "ox", "total", "m", "rand", "top", "rank", "sum", "mean", "largest", "ms", "highest", "tx", "act", "right", "scale", "gt", "major", "res", "min", "mad", "null", "core", "full", "huge", "est", "rest", "wrap", "window", "mx", "mod", "cm", "conf", "old", "hash", "ma", "exp", "average", "ctx", "Max", "last", "re", "MAX", "box", "med", "size", "x", "first", "height", "st", "map"], "maxIndex": ["axIndex", "axindex", " maxOffset", " maxindex", "MaxPos", "MaxOffset", "maxPos", "maxOffset", "maxindex", "MaxInd", "randindex", "randIndex", "randOffset", "randInd", " maxInd", "axPos", "MaxIndex", "maxInd", "axInd", "Maxindex", " maxPos"], "mul": ["mmus", " mult", "mUL", "Mult", "Mil", " mUL", "Mus", "Muls", "mtus", "smul", "mmUL", "smult", "mtuls", "muls", "smUL", "smil", "MUL", "Mul", "mmuls", "mult", "mtUL", "mil", "mtul", " mil", "mmul", "mus"], "result": ["valid", "wrapper", "num", "r", "true", "mask", "found", "master", "current", "number", "feature", "different", "Result", "total", "zero", "tmp", "summary", "default", "folder", "make", "percent", "relation", "sum", "profile", "report", "ret", "neutral", "currency", "match", "test", "mate", "sequence", "results", "complete", "message", "success", "length", "score", "ful", "debug", "cmp", "mult", "duration", "other", "diff", "integer", "def", "continue", "product", "date", "successful", "goal", "res", "term"], "item": ["q", "ix", "name", "key", "row", "el", "entry", "ip", "element", "value", "Item", "m", "word", "msg", "ace", "cell", "val", "im", "index", "match", "instance", "ite", "test", "unit", "it", "mix", "event", "good", "step", "obj", "other", "exp", "iq", "char", "iter", "add", "bar", "x", "term"]}}
{"code": "import java.util.Scanner;\\npublic class Main{\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint[] a = new int[n+1];\\n\t\tfor(int i = 1; i <= n; i++) {\\n\t\t\ta[i] = sc.nextInt();\\n\t\t}\\n\t\tint count = 1;\\n\t\tint index = 1;\\n\t\twhile(count <= n) {\\n\t\t\tindex = a[index];\\n\t\t\tif(index==2) {\\n\t\t\t\tSystem.out.println(count);\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t\tcount++;\\n\t\t}\\n\t\tSystem.out.println(-1);\\n\t}\\n}", "target": "175", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "cr", "sv", "sp", "bc", "inc", "ck", "nl", "ctl", "capt", "cle", "sel", "sch", "sw", "sync", "fc", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch"], "n": ["num", "mn", "r", "d", "nn", "number", "l", "un", "len", "N", "o", "ns", "and", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "z", "j", "no", "nb", " N", "g", "na", "nc", "k", "np", "length", "en", "c", "nm", "ct", "out", "w", "ng", "t", "p", "ln", "net", "nt"], "a": ["ca", "att", "array", "oa", "ta", "v", "aa", "sta", "sa", "wa", "ai", "at", "b", "A", "ia", "ack", "an", "la", "ga", "ao", "ab", "ea", "apa", "area", "ba", "na", "aaa", "aka", "c", "fa", "alpha", "ap", "ma", "as", "s", "p", "ac", "au", "aux", "am"], "i": ["I", "ix", "ri", "phi", "hi", "gi", "iu", "ei", "chain", "ip", "li", "id", "v", "me", "ini", "ai", "ms", "client", "im", "qi", "ori", "us", "u", "io", "sequence", "j", "bi", "it", "ui", "ie", "is", "uri", "pi", "inner", "iso", "ti", "ic", "ci", "sim", "multi", "iter", "ami", "y", "oi", "ii", "xi", "si", "di", "x", "mi", "ish"], "count": ["num", "ount", "ctr", "result", "key", "empty", "frequency", "name", "found", "d", "coll", "current", "number", "cond", "draw", "total", "now", "amount", "err", "cast", "process", "call", "common", "sum", "report", "client", "Count", "ind", "cache", "list", "code", "scroll", "test", "const", "z", "find", "cd", "nb", "child", "core", "cmd", "cont", "cum", "length", "c", "conf", "old", "max", "debug", "ct", "out", "counter", "check", "t", "iter", "command", "ctx", "flag", "depth", "size", "nt", "x"], "index": ["set", "num", "ix", "offset", "ex", "key", "loc", "row", "nn", "timeout", "position", "gate", "number", "address", "point", "zero", "id", "connect", "value", "exit", "ne", "level", "update", "val", "act", "ind", "start", "search", "pos", "match", "instance", "condition", "list", "code", "slice", "loop", "find", "alias", "primary", "lock", "length", "open", "Index", "link", "IND", "display", "e", "port", "exp", "iter", "label", "page", "si", "second", "x", "next"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        \\n        Scanner sc = new Scanner(System.in);\\n        \\n        int n = sc.nextInt();\\n        int d = sc.nextInt();\\n        \\n        int[][] x = new int[n][d];\\n        for(int a = 0; a < n; a++){\\n            for(int b = 0; b < d; b++){\\n                x[a][b] = sc.nextInt();\\n            }\\n        }\\n        \\n        int ans = 0;\\n        for(int a = 0; a < n-1; a++){\\n            for(int c = 1; c < n-a; c++){\\n                double distance = 0;\\n                for(int b = 0; b < d; b++){\\n                    distance += (x[a][b] - x[a+c][b]) * (x[a][b] - x[a+c][b]);\\n                }\\n                distance = Math.sqrt(distance);\\n                if(distance == Math.floor(distance)){\\n                    ans++;\\n                }\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}", "target": "59", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "inc", "ck", "ctl", "cle", "sch", "sync", "fc", "exec", "tc", "scan", "sq", " Sc", "cont", "cs", "sci", "ss", "nc", "pb", "osc", "Sc", "gc", "ng", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "psc", "ch", "desc"], "n": ["num", "mn", "r", "nu", "name", "nn", "l", "number", "len", "N", "o", "ns", "m", "v", "dn", "ne", "nan", "nl", "sn", "note", "on", "an", "z", "j", "no", "nb", "i", "g", " N", "na", "nc", "k", "np", "en", "ng", "t", "p", "nd", "network", "ln", "s", "net", "size", "nt", "names"], "d": ["dat", "D", "num", "r", "pd", "dec", "dm", "dim", "l", "dd", "de", "m", "da", "db", "dc", "dn", "dimension", "sd", "dom", "td", "ind", "f", "z", "j", "dev", "cd", "days", "div", "i", "data", "g", "length", "k", "done", "ds", "w", "out", "t", "s", "p", "nd", "dir", "def", "dq", "den", "dt", "di", "del", "dp"], "x": ["q", "ix", "r", "ex", "wx", "ax", "php", "l", "xml", "o", "h", "v", "m", "tt", "xf", "xy", "tx", "xe", "xx", "index", "f", "px", "u", "xc", "z", "xa", "hex", "history", "xes", "i", "lex", "g", "mx", "xt", "xxx", "xd", "ct", "w", "e", "X", "t", "rx", "p", "ux", "check", "ctx", "y", "xs", "xi", "xp", "fx", "ox", "config"], "a": ["r", "from", "ta", "ai", "go", "art", "f", "ga", "ao", "alpha", "e", "as", "eas", "ac", "parent", "era", "ka", "va", "ata", "am", "ee", "eta", "el", "l", "o", "h", "aa", "app", "sta", "sha", "count", "z", "anta", "pa", "ea", "apa", "g", "ba", "k", "aka", "w", "s", "au", "span", "ae", "ar", "qa", "al", "this", "isa", "act", "ia", "u", "an", "la", "i", "ach", "ma", "p", "ca", "aq", "oa", "m", "da", "sa", "at", "A", "j", "ab", "area", "aff", "aaa", "aj", "fa", "ada", "ap", "t", "ant", "ah"], "b": ["br", "block", "bas", "r", "bin", "el", "sb", "wb", "base", "mb", "ob", "beta", "l", "rb", "bit", "bc", "big", "v", "gb", "bf", "db", "bh", "able", "by", "bl", "bs", "batch", "bp", "lb", "ben", "or", "ub", "back", "ble", "eb", "bd", "bur", "buffer", "fb", "f", "bu", "z", "j", "bi", "ib", "bound", "nb", "ab", "i", "ba", "bg", "bt", "obj", "bis", "body", "bo", "e", "t", "bb", "cb", "binary", "be", "y", "bar", "erb", "B"], "ans": ["gs", "ents", "uns", "ons", "offs", "nn", "vals", "rs", "outs", "eds", "ns", "ks", "alls", "nan", "ends", "ians", "os", "ms", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "us", "es", "ls", "an", "ows", "ann", "scan", "vs", "results", "is", "ts", "anes", "cs", "ations", "ips", "ups", "ins", "aps", "ds", "times", "ions", "as", "s", "posts", "ps", "rows", "lan", "ars", " scans"], "c": ["arc", "uc", "r", "ca", "lc", "acc", "col", "cc", "oc", "con", "ar", "cos", "l", "co", "o", "cf", "cr", "bc", "m", "v", "unc", "dc", "err", "ec", "cu", "fc", "f", "u", "tc", "z", "cat", "it", "cd", "div", "i", "C", "cs", "vc", "g", "nc", "k", "cm", "ic", "ci", "cmp", "ct", "e", "t", "s", "ac", "cb", "rc", "mc"], "distance": ["response", "ment", "description", "direction", "result", "translation", "istance", "driver", "frequency", "equality", "hattan", "position", "l", " distances", "weight", "address", "red", "point", "dd", "gradient", "tree", "height", "value", "device", "stroke", "efficiency", "dimension", "relation", "remote", "trip", "power", "erence", " Distance", "sum", "hello", "service", "location", "dist", "radius", "delay", "sequence", "cd", "document", "message", "partial", "directory", "length", "connection", "density", "approximately", "relative", "step", "duration", "angle", "diff", "product", "ward", "route", "command", "definition", "performance", "depth", "volume", "cost", "time", "function", "imity", "Distance"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n\\n        int a = n / 100;\\n        int b = (n - a * 100) / 10;\\n        int c = (n - a * 100 - b * 10);\\n\\n        if (a < b || a < c) {\\n            System.out.println((a + 1) * 100 + (a + 1) * 10 + (a + 1));\\n        } else {\\n            System.out.println(a * 100 + a * 10 + a);\\n        }\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n", "target": "106", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "anc", "esc", "sb", "cl", "sys", "system", "ser", "Scan", "sv", "sp", "bc", "cr", "nl", "ec", "sel", "sch", "se", "tc", "scan", "sq", "cs", "ss", "nc", "syn", "osc", "txt", "Sc", "out", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch"], "n": ["nu", "num", "d", "ll", "nn", "l", "nr", "number", "N", "o", "ns", "m", "v", "dn", "ne", "nan", "nl", "sn", "an", "z", "j", "no", "nb", "i", " N", "na", "nc", "nv", "np", "fn", "rn", "en", "nw", "nm", "ng", "t", "p", "nor", "ln", "net", "size", "nt", "non", "names"], "a": ["r", "ta", "ai", "go", "af", "f", "ga", "ao", "na", "alpha", "e", "as", "eas", "ac", "era", "all", "x", "window", "am", "el", "l", "part", "o", "now", "aa", "app", "z", "ea", "g", "ba", "exp", "s", "au", "ae", "att", "ar", "element", "al", "wa", "act", "ia", "an", "la", "i", "abc", "out", "ma", "p", "add", "ca", "aq", "oa", "da", "sa", "A", "at", "index", "j", "ed", "div", "ab", "area", "aff", "aaa", "aj", "t", "to"], "b": ["r", "d", "sb", "l", "o", "h", "bc", "v", "gb", "db", "bl", "bs", "ub", "f", "eb", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "e", "t", "bb", "cb", "be", "y", "rb", "B"], "c": ["r", "lc", "ca", "cc", "d", "con", "l", "cf", "bc", "ce", "v", "m", "dc", "cu", "f", "fc", "u", "tc", "z", "cd", "C", "cs", "g", "cm", "e", "ct", "gc", "t", "etc", "ac", "cb", "ch"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\tpublic static void main(String[] args)throws Exception {\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint money = scan.nextInt();\\n\t\tint yen500 = 0;\\n\t\tint yen5 = 0;\\n\\n\t\tfor(;;) {\\n\t\t\tif(money >= 500) {\\n\t\t\t\tmoney -= 500;\\n\t\t\t\tyen500 += 1;\\n\t\t\t}else {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tfor(;;) {\\n\t\t\tif(money >= 5) {\\n\t\t\t\tmoney -= 5;\\n\t\t\t\tyen5 += 1;\\n\t\t\t}else {\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(yen500 * 1000 + yen5 * 5);\\n\\n\t\tscan.close();\\n\t}\\n}", "target": "180", "substitutes": {"scan": ["set", "seek", "spin", "skip", "row", "con", "reach", "gate", "parse", "san", "ser", "sys", "Scan", "system", "log", "sv", "n", "sin", "plan", "read", "in", "stat", "ban", "can", "get", "report", "run", "start", "scale", "auto", "se", "gen", "sync", "clean", "send", "scroll", "an", "bank", "ann", "sc", "find", "ner", "k", "store", "syn", "out", "check", "y", "re", "proc", "query", "ch", "util"], "money": ["Money", "mini", "coin", "ONEY", "low", "margin", "machine", "price", "weight", "payment", "total", "zero", "amount", "value", "minute", "company", "fine", "energy", "easy", "where", "hello", "trade", "euro", "scale", "rice", "cash", "oshi", "currency", "entity", "world", "lower", "cho", "micro", "dollar", "transfer", "human", "balance", "angle", "iban", "other", "integer", "multi", "blue", "million", "oney", "volume", "mega", " amount", "fee", "bill"], "yen500": ["yener500", "eyen200", "yen50", "cyan500", "uyen350", "yenn350", "cyen500", "yener200", "cyan350", "ysten50", "ysten400", "yden500", "ygen50", "yan350", "yens50", "cyen50", "yenn500", "ygen200", "yens500", "eyen400", "yener50", "cyan50", "eyen50", "eyener200", "yenn600", "yens200", "ysten200", "yen350", "eyener400", "uyener350", "yen750", "yden600", "yener750", "yener600", "ysten500", "uyen750", "yen200", "cyan200", "ygen400", "eyener50", "yenn750", "yden750", "eyener500", "uyener750", "yens350", "yen600", "uyen600", "ygen500", "yan50", "uyener500", "uyener600", "yan200", "cyen200", "eyen500", "cyen350", "yen400", "uyen500", "yan500", "yden350", "yener350", "yener400"], "yen5": [" yen100", "yEN95", "yen50", " yener100", "yem95", "yean55", "yen100", " yens5000", " yem25", "yens0", " yens5", " yen25", "yen0", "yens25", "yEN5000", "yean100", " yener5", "yEN0", "yenn5", " yener50", "yener100", "yem5", "yened0", "yener55", "yener50", "yEN5", "yen5000", " yem65", "yjen95", "yean50", "yem25", " yen50", " yen95", "yjen25", "yened5000", "yjen5", "yens5000", "yjen65", " yem95", "yEN25", "yem65", "yEN65", " yem5", "yen95", " yens25", "yenn50", "yenn100", " yen65", "yened25", "yean5", "yen25", "yen65", " yens0", " yen55", "yener5", " yener55", "yenn55", "yen55", "yened5", " yen0", "yens5", " yen5000"]}}
{"code": "import java.io.File;\\nimport java.io.FileInputStream;\\nimport java.io.FileNotFoundException;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int s = sc.nextInt();\\n        int w = sc.nextInt();\\n\\n        if (w >= s) System.out.println(\"unsafe\");\\n        else System.out.println(\"safe\");\\n    }\\n}\\n", "target": "177", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "anc", "esc", "dec", " SC", "sec", "cl", "sys", "sh", "bc", "sv", "cr", "sp", "inc", "ck", "ctl", "cle", "sel", "irc", "sch", "sw", "sync", "tch", "tc", "ctrl", "sq", " Sc", "cont", "cs", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "s": ["gs", "r", "aws", "l", "rs", "h", "ns", "sh", "sv", "sp", "v", "m", "n", "sd", "sa", "ws", "S", "os", "ms", "ys", "sw", "start", "b", "fs", "sl", "ls", "ts", "sq", "i", "cs", "ss", "c", "ds", "t", "p", "xs", "ps", "si"], "w": ["q", "wcs", "wx", "wl", "wb", "wt", "weight", "wp", "h", "n", "m", "v", "word", "wi", "ws", "tw", "wa", "width", "wal", "sw", "b", "rw", "wd", "W", "hw", "z", "wr", "widget", "nw", "t", "wh", "we", "p", "fw", "kw", "window"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner scan = new Scanner(System.in);\\n\t\tint ans;\\n\t\tans = 0;\\n\t\tfor(;;){\\n\t\t\tint a = scan.nextInt();\\n\t\t\tString op = scan.next();\\n\t\t\tint b = scan.nextInt();\\n\t\t\tif(op.equals(\"?\"))\\n\t\t\t\tbreak;\\n\t\t\tif(op.equals(\"+\"))\\n\t\t\t\tans = a + b;\\n\t\t\telse if(op.equals(\"-\"))\\n\t\t\t\tans = a - b;\\n\t\t\telse if(op.equals(\"*\"))\\n\t\t\t\tans = a * b;\\n\t\t\telse if(op.equals(\"/\"))\\n\t\t\t\tans = a / b;\\n\t\tSystem.out.println(ans);\\n\t}\\n\t}\\n\t}", "target": "139", "substitutes": {"scan": ["set", "seek", "r", "save", "skip", "sql", "row", "nn", "reach", "parse", "gate", "sb", "san", "ser", "sys", "Scan", "system", "connect", "sv", "sp", "n", "conn", "db", "read", "in", "by", "nl", "sum", "can", "get", "report", "run", "go", "scale", "se", "pass", "sync", "search", "send", "scroll", "an", "range", "ann", "sc", "find", "ner", "g", "store", "out", "gc", "check", "info", "p", "sur", "re", "proc", "query", "ch", "util", "see"], "ans": ["uns", "ons", "izes", "reads", "anks", "aces", "flags", "ends", "os", "can", "ms", "lines", "ANS", "ats", "ens", "als", "AN", "ams", "ones", "ins", "aps", "actions", "xs", "lan", "offs", "ars", "names", " scans", "vals", "anas", "ns", "ads", "ks", "asks", "ces", "orders", "ags", "angs", "rates", "anes", "cs", "ups", "An", "s", "posts", "ps", "pan", "aus", "eds", "ians", "amps", "ants", "ls", "an", "results", "mas", "orts", "arms", "ds", "aints", "aks", "outs", "ann", " means", "ents", "eps", "ums", "helps", "missions", "ids", "arts", "es", "ows", "vs", "aos", " spans", "sets", "ations", "vers", "olds", "lets"], "a": ["ae", "ca", "ar", "aq", "oa", "h", "qa", "ta", "aa", "da", "app", "sta", "sa", "aw", "wa", "ai", "af", "A", "ia", "an", "la", "ga", "ao", "xa", "ab", "pa", "ea", "area", "apa", "aff", "ba", "aaa", "na", "aka", "aj", "fa", "alpha", "ma", "as", "eas", "ac", "era", "au", "aux", "va", "am"], "op": ["opp", "pop", "loc", "mp", "ob", "pre", "ip", "co", "ver", "o", "pl", "sp", "cp", "app", "om", "tip", "operator", "Op", "rep", "top", "orp", "operation", "pp", "tx", "opt", "type", "oop", "it", "cmd", "mop", "pr", "ype", "OP", "omp", "comp", "np", "ops", "typ", "hop", "iop", "cmp", "jp", "ap", "ot", "exp", "t", "p", "oper", "cop", "xp", "proc"], "b": ["br", "r", "d", "wb", "beta", "sb", "mb", "ob", "base", "l", "h", "bc", "v", "n", "m", "gb", "db", "bs", "bp", "back", "eb", "f", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "pb", "c", "bis", "t", "bb", "cb", "be", "y", "rb", "erb", "B"]}}
{"code": "import java.util.*;\\n\\npublic class Main \\n{\\n\t    public static void main(String[] args) \\n        {\\n        \tScanner scanner = new Scanner(System.in);\\n        \tString S = scanner.next();\\n        \tLong countA = 0L;\\n        \tLong countB = 0L;\\n        \tfor (int i = 0; i < S.length(); i++) \\n            {\\n            \tif(S.charAt(i) == '0')\\n                  \tcountA++;\\n            \tif(S.charAt(i) == '1') \\n                  \tcountB++;\\n        \t}\\n        \tcountA = Math.min(countA, countB) * 2;\\n        \tSystem.out.println(countA);\\n    \t}\\n}\\n", "target": "14", "substitutes": {"scanner": ["canener", "Scanator", " scanNER", "canNER", "ScanNER", "Scanter", "scanener", "Scanener", "Scaner", "scator", "canator", "scner", "scanNER", "scanter", "scanator", "scter", " scanator", "canter", "scener", "Scanner", "canner", "scaner", " scaner", "caner"], "S": ["CS", "STR", "CSS", "SI", "RAW", "SN", "N", "TS", "SM", "SH", "JS", "SQL", "SA", "SP", "SAM", "SE", "P", "G", "STDOUT", "T", "SU", "SO", "NS", "A", "SF", "V", "M", "SOURCE", "US", "SL", "ASS", "RS", "IS", "H", "BS", "C", "Source", "AS", "L", "SS", "GS", "SER", "s", "DS", "VS", "SB", "ST", "B"], "countA": ["statusAL", " countAN", "statusSA", " countAs", "reportC", " countAB", " countC", "attAR", " countAH", "reportB", "ountUSA", "statusA", "reportAB", "sumL", "reportA", "countAL", " countUSA", "sumAR", " countAR", "amountA", "attA", " countL", "countC", "intA", "amountL", "countAN", "countSA", "intSA", "amountAL", "amountSA", " countAL", "ountA", "intAN", "countUSA", "attL", "CountAB", "sumA", "ountB", "countAs", "countAB", "ountAH", "intAH", "CountA", "ountAN", "countL", "statusL", " countSA", "CountUSA", "CountC", "countAH", "countAR", "CountB", "attAs", "ountSA", "sumAs"], "countB": ["message2", "counterBL", "Count2", " countBC", "statusA", "ountBC", "ountBar", "messageA", "CountL", "counterB", "counterL", "countBL", "countBC", "foundBar", "foundA", " countL", "cacheBL", "cacheB", "status2", "counterA", "ountA", "cacheA", "messageB", "foundB", "count2", "statusB", "cacheL", "ountB", " countBar", "countBar", "messageL", "CountA", " countBL", "countL", "statusL", "foundBC", "CountB"], "i": ["I", "ix", "ri", "key", "phi", "gi", "hi", "iu", "zi", "ei", "ip", "ji", "li", "id", "n", "m", "me", "ini", "series", "ai", "ind", "qi", "a", "b", "ori", "us", "init", "u", "\u0438", "io", "j", "bi", "it", "slice", "ui", "is", "uri", "ie", "pi", "ti", "ic", "ci", "my", "cli", "e", "multi", "t", "info", "gu", "ami", "y", "oi", "ii", "xi", "si", "to", "span", "di", "x", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        String Sa = sc.next();\\n        int la = Sa.length();\\n        int a = 0;\\n        String Sb = sc.next();\\n        int lb = Sb.length();\\n        int b = 0;\\n        String Sc = sc.next();\\n        int c = 0;\\n        int lc = Sc.length();\\n        String x = \"A\";\\n        String y = \"abc\";\\n\\n        for(int i=0; i<la+lb+lc+3; i++){\\n            if(x.equals(\"A\")){\\n                if(a<la){\\n                    if(Sa.charAt(a)==y.charAt(0)){\\n                        x = \"A\";\\n                    }\\n                    else if(Sa.charAt(a)==y.charAt(1)){\\n                        x = \"B\";\\n                    }\\n                    else if(Sa.charAt(a)==y.charAt(2)){\\n                        x = \"C\";\\n                    }\\n                }\\n                a += 1;\\n                if(a==la+1){\\n                    x = \"\";\\n                }\\n            }\\n            else if(x.equals(\"B\")){\\n                if(b<lb){\\n                    if(Sb.charAt(b)==y.charAt(0)){\\n                        x = \"A\";\\n                    }\\n                    else if(Sb.charAt(b)==y.charAt(1)){\\n                        x = \"B\";\\n                    }\\n                    else if(Sb.charAt(b)==y.charAt(2)){\\n                        x = \"C\";\\n                    }\\n                }\\n                b += 1;\\n                if(b==lb+1){\\n                    x = \"\";\\n                }\\n            }\\n            else if(x.equals(\"C\")){\\n                if(c<lc){\\n                    if(Sc.charAt(c)==y.charAt(0)){\\n                        x = \"A\";\\n                    }\\n                    else if(Sc.charAt(c)==y.charAt(1)){\\n                        x = \"B\";\\n                    }\\n                    else if(Sc.charAt(c)==y.charAt(2)){\\n                        x = \"C\";\\n                    }\\n                }\\n                c += 1;\\n                if(c==lc+1){\\n                    x =\"\";\\n                }\\n            }\\n\\n            if(a==la+1){\\n                System.out.println(\"A\");\\n                break;\\n            }\\n            else if(b==lb+1){\\n                System.out.println(\"B\");\\n                break;\\n            }\\n            else if(c==lc+1){\\n                System.out.println(\"C\");\\n                break;\\n            }\\n        }\\n    }\\n}", "target": "11", "substitutes": {"sc": ["usc", "sac", "arc", "cc", "anc", "esc", "sec", "cl", "sys", "sh", "bc", "sv", "sp", "inc", "dc", "ctl", "ko", "sche", "src", "irc", "sch", "sw", "sync", "tc", "scan", "sq", "cont", "cs", "ss", "nc", "ic", "ci", "osc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "ch", "desc", "st"], "Sa": ["Ry", "Has", "Sys", "She", "South", "Sm", "Sam", "Ca", "Sah", "Dim", "Sche", "Rh", "Su", "Ta", "Sad", "Ws", "Se", "Sal", "sa", "Sim", "As", "SA", "Va", "sama", "S", "Ray", "St", "Sh", "Ram", "Sea", "So", "Si", "Sax", " sa", "Seg", "Sin", "Las", "Dar", "Sn", "Pa", "Sus", "Sup", "Sav", "Sl", "Salt", "La", "Ro", "Cass", "Tu", "Ha", "Isa", "San", "Yu", "Mac"], "la": ["lt", "li", "ta", "lo", "ai", "LA", "lr", "ao", "La", "Ex", "ha", "ka", "lan", "lbs", "l", "len", "\u00e7", "aa", "ale", "lam", "sha", "le", "ja", "ml", "que", "pa", "s", "lf", "ln", "au", "ar", "qa", "wa", "Cl", "list", "ia", "ls", "func", "ma", "ld", "_", "kl", "lab", "lp", "da", "sa", "ya", "las", "aria", "lv", "ra", "lu"], "a": ["ae", "r", "ca", "pai", "att", "ar", "aaaa", "aq", "ei", "l", "oa", "o", "li", "ta", "m", "aa", "app", "da", "sta", "sa", "al", "ai", "isa", "act", "A", "at", "ia", "u", "an", "access", "ga", "ao", "xa", "j", "ab", "pa", "ea", "data", "apa", "aria", "ba", "aaa", "na", "aka", "ast", "ach", "fa", "alpha", "ap", "e", "as", "ma", "t", "p", "ac", "eas", "ami", "au", "era", "aux", "va", "am"], "Sb": [" sn", "ShB", "snb", "Snb", "Saxb", "Yournb", "sy", "Seebs", "Samplenb", "sb", " sb", " SB", "Simplebj", "Storebs", "NB", "Isy", "Storeb", "Sbin", "Storey", "Nb", "Sampley", "Nsb", " Sbi", "Samplebj", " Sn", "Pnb", "Ny", "By", "Storebin", "Seeb", "Youry", " sB", "Sampleb", "Shy", "Ssb", "Issb", "Saxy", "Yourb", " sbi", "Isb", "Shb", "Sn", "Sbj", "Bnb", "Sbs", "Saxbin", "Sy", "Pb", "Shsb", "Simpley", "Sbi", "Simpleb", "Py", "Simplenb", "Seebin", "Bc", "Yourc", "Bb", "Seey", "IsB", "Saxbs", "SB", "Pbj"], "lb": ["dl", "lt", "lbs", "LB", "ll", "loc", "sb", "ob", "l", "len", "kl", "li", "lp", "lab", "gb", "lam", "bl", "nl", "lo", "bp", "lib", "le", "ub", "lin", "lr", "ls", "las", "que", "ib", "nb", "rl", "lv", "kb", "bb", "ln", "lf", "cb", "ld", "rb", "lu"], "b": ["br", "r", "emb", "d", "wb", "beta", "sb", "ob", "l", "base", "o", "li", "bar", "h", "bc", "v", "n", "gb", "bh", "db", "err", "by", "bl", "bs", "buff", "bp", "go", "back", "f", "eb", "u", "fb", "bu", "z", "j", "bi", "it", "ib", "bound", "nb", "ab", "g", "ba", "body", "bis", "e", "bo", "t", "p", "bb", "cb", "be", "rb", "to", "B"], "Sc": ["Cat", "Ry", "Capt", "Sys", "Sm", "Sync", "Ca", "Sche", "Cont", "Cle", "Scan", "Chan", "Sur", "Ta", "Scroll", "Gy", "Loc", "Res", "Se", "Spe", "Sp", "Sim", "Col", "S", "St", "Sh", "Desc", "Che", "Cl", "So", "Cu", "Si", "Ch", "Sax", "Cor", "Th", "Crit", "Er", "Sel", "Str", "C", "Sn", "Sk", "Reg", "Sch", "Sl", "Sy", "Syn", "Corp", "Ser", "Ty", "Sw", "Cro", "Cs", "SC", "Esc", "Mac"], "c": ["arc", "r", "col", "cc", "d", "loc", "ar", "con", "l", "chain", "co", "category", "o", "h", "cf", "bc", "cr", "n", "v", "m", "ch", "unc", "dc", "cp", "cor", "err", "ce", "ec", "cy", "cu", "cache", "count", "f", "fc", "u", "xc", "tc", "z", "cat", "C", "cont", "vc", "g", "cs", "abc", "ic", "ci", "com", "e", "ct", "exp", "t", "etc", "p", "ac", "cb", "crit", "mc", "rc"], "lc": ["arc", "dl", "uc", "lt", "lbs", "cc", "loc", "LC", "l", "len", "kl", "cl", "li", "lic", "bc", "lp", "lab", "unc", "dc", "lam", "ec", "ctl", "lo", "lib", "cu", "lin", "fc", "lr", "ls", "xc", "tc", "las", "cv", "que", "cs", "vc", "lv", "cm", "abc", "ci", "ul", "icc", "gc", "lf", "ln", "mc", "rc", "pc", "ly", "lu"], "x": ["r", "ix", "ax", "exclusive", "n", "tx", "xe", "f", "history", "xes", "mx", "xxx", "format", "e", "xs", "l", "o", "fixed", "fill", "foo", "sync", "px", "z", "xa", "hex", "message", "ext", "full", "w", "exp", "s", "rx", "ux", "fx", "ex", "wx", "xml", "yx", "pe", "print", "xy", "act", "xx", "u", "test", "dx", "content", "lex", "status", "xxxx", "ct", "p", "xi", "xp", "ox", "name", "internal", "v", "xf", "cross", "at", "index", "tex", "xc", "text", "xt", "mix", "sex", "X", "t", "check", "policy"], "y": ["ye", "ray", "sy", "story", "ym", "hot", "iy", "o", "sys", "yl", "py", "n", "gy", "ch", "ky", "by", "ay", "ey", "uy", "cy", "xy", "fy", "icy", "client", "ys", "ya", "yer", "xx", "fresh", "ry", "ht", "yy", "ies", "z", "yt", "ysc", "vy", "oy", "sky", "et", "ic", "phy", "Y", "yi", "my", "wy", "ory", "yan", "t", "ny", "p", "si", "ty", "ly", "yo"], "i": ["q", "I", "ix", "sql", "phi", "zi", "iu", "l", "li", "o", "id", "v", "m", "ij", "n", "ini", "by", "ai", "go", "im", "ind", "index", "ia", "u", "io", "j", "bi", "it", "is", "ui", "ie", "pi", "g", "ti", "ic", "ci", "sim", "multi", "t", "info", "p", "ii", "si", "di", "mi"]}}
{"code": "import java.util.*;\\nimport java.util.regex.Pattern;\\nimport java.util.regex.Matcher;\\n\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n      \t//\u6570\u5024\u306e\u5165\u529b\\n\t\tint a = sc.nextInt();\\n      \tint b = sc.nextInt();\\n      \t//\u30cf\u30a4\u30d5\u30f3\u5165\u308a\\n        String str = sc.next();\\n      \t//\u6b63\u898f\u8868\u73fe\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u4f5c\u6210\\n      \tPattern p = Pattern.compile(\"[0-9]{\"+a+\"}-[0-9]{\"+b+\"}\");\\n      \tMatcher m = p.matcher(str);\\n       if (m.find()) {\\n            System.out.println(\"Yes\");\\n        }\\n\t\telse{\\n\t\t\tSystem.out.println(\"No\");\\n    \t}\\n        }\\n}", "target": "78", "substitutes": {"sc": [" screen", " ser", " unsc", " cr", " SC", " scorer", "ser", "sys", "Scan", " scr", " res", "sa", " sk", " cons", "scan", " Sc", "cs", "ss", " rc", "sk", "Sc", " cle", " enc", "SC", "rc", " subsc", "ch", " sp"]}}
{"code": "import java.util.Scanner;\\n \\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int last = -1;\\n        int n = scanner.nextInt();\\n        int[] nums = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            nums[i] = scanner.nextInt();\\n        }\\n        long ans = 0;\\n        for (int i = 0; i < n; i++) {\\n            int cur = nums[i];\\n            if (cur < last) {\\n                ans += (last - cur);\\n            } else {\\n                last = cur;\\n            }\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "202", "substitutes": {"scanner": ["canener", "Scanator", " scanener", "Scanter", "scanener", "Scanener", "Scaner", "canator", "scanter", "scanator", "canter", " scanter", " scanator", "Scanner", "canner", "scaner", " scaner", "caner"], "last": ["end", "next", "before", "used", "base", "after", "current", "best", "total", "latest", "ends", "nl", "show", "close", "largest", "le", "highest", "expected", "start", "since", "se", "list", "index", "worst", "count", "sort", "recent", "left", "las", "prev", "no", "full", "huge", "est", "length", "cost", "ast", "seen", "good", "old", "max", "slave", "nd", "stable", "Last", "cas", "size", "checked", "nt", "first", "st"], "n": ["num", "mn", "r", "nu", "name", "d", "nn", "number", "l", "un", "len", "after", "N", "gn", "total", "ns", "o", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "count", "f", "on", "z", "j", "no", "nb", " N", "g", "nc", "na", "k", "np", "en", "c", "nm", "ng", "nd", "t", "p", "network", "ln", "net", "size", "all", "nt", "names"], "nums": ["Nups", "num", "nsumbers", "nales", "nems", "cums", "neums", "onims", "Nems", "neales", "neumer", "nims", " nems", "Numbers", " noms", "nups", "nsems", "onums", "onumer", " nales", " numbers", " nims", "noms", " numer", "neims", "coms", "nsums", "Nums", "onales", "cum", "numbers", "cumbers", "Num", " nups", "numer", " num", "Noms", "nsups"], "i": ["q", "I", "ix", "ri", "phi", "gi", "hi", "iu", "zi", "ei", "iy", "fi", "ip", "ji", "chain", "point", "li", "id", "v", "ij", "m", "me", "ini", "err", "in", "batch", "this", "ai", "ki", "client", "iti", "im", "ind", "qi", "ori", "ik", "us", "init", "u", "\u0438", "io", "ims", "fire", "j", "bi", "it", "ity", "ui", "ie", "uri", "is", "pi", "g", "json", "ti", "ic", "ci", "sim", "my", "cli", "e", "PI", "multi", "iter", "info", "y", "oi", "xi", "ii", "si", "di", "mi"], "ans": ["gs", "ents", "uns", "ons", "nets", "vals", "aus", "rs", "anks", "ums", "outs", "eds", "ns", "ads", "ks", "asts", "orders", "ians", "os", "ms", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "ags", "es", "ls", "an", "ows", "aos", "ts", "anes", "cs", "orts", "ss", "ones", "ins", "aps", "vers", "olds", "as", "s", "posts", "xs", "rans", "lets", "stats", "lan", "offs", "ars", "ann"], "cur": ["lc", "ctr", " Cur", "col", "dec", "con", "cos", "current", "ver", "co", "qu", "ur", "ser", "now", "cf", "sh", "cr", "tmp", "cp", "bc", "car", "ch", "tr", "dc", "cor", "ce", "pg", "pri", "rog", "cu", "coord", "const", "tc", "orig", "ctrl", "cat", "sc", "cd", "cmd", "div", "cont", "ptr", "cs", "cum", "nc", "c", "cmp", "ct", "ph", "sur", "char", "Cur", "mc", "rc", "sr", "gr"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int ans = 0;\\n        for(int i = a; i <= b; i++){\\n            char[] c = String.valueOf(i).toCharArray();\\n            if(c[0] == c[4] && c[1] == c[3]) ans++;\\n        }\\n        System.out.println(ans);\\n    }\\n}\\n", "target": "104", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "bc", "sv", "sp", "cr", "inc", "ck", "ctl", "cle", "sch", "sw", "sync", "tc", "ctrl", "scan", "sq", " Sc", "cs", "ss", "nc", "ok", "osc", "Sc", "gc", "asc", "scl", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "ch"], "a": ["ae", "r", "ca", "d", "ax", "ar", "aaaa", "oa", "ta", "n", "da", "aa", "sta", "sa", "ai", "at", "A", "ia", "an", "la", "ga", "ao", "ab", "ea", "area", "pa", "ba", "na", "ach", "aj", "ada", "e", "alpha", "ma", "as", "ac", "au", "va", "am"], "b": ["br", "r", "d", "beta", "base", "l", "mb", "rb", "n", "v", "bf", "db", "bl", "bs", "ble", "eb", "f", "fb", "bi", "ib", "bound", "nb", "ab", "ba", "bis", "body", "e", "t", "bb", "y", "be", "bar", "B"], "ans": ["checks", "uns", "ents", "eps", "vals", "aces", "anks", "names", "flags", "eds", "ns", "ads", "ks", "ends", "orders", "ians", "os", "ars", "can", "yes", "ms", "lines", "ids", "arts", "ANS", "amps", "ats", "ens", "ants", "ls", "an", "ows", "ims", "AN", "ann", "vs", " spans", "cs", "orts", "ones", "ins", "aps", "ds", "annot", "as", "cons", "s", "posts", "ots", "xs", "lets", "rows", "lan", "offs", "outs", " scans"], "i": ["q", "I", "ix", "ri", "phi", "gi", "hi", "iu", "ei", "ip", "li", "o", "v", "n", "m", "ij", "ini", "uu", "ai", "ms", "ki", "mu", "im", "ind", "qi", "index", "init", "u", "j", "bi", "it", "um", "is", "ui", "ie", "pi", "ti", "ic", "ci", "sim", "yi", "multi", "t", "iq", "iter", "integer", "char", "p", "y", "xi", "ii", "si", "to", "span", "di", "x", "mi", "ish"], "c": ["arc", "lc", "ca", "cc", "anc", "con", "l", "chain", "co", "cf", "bc", "cr", "cp", "v", "ce", "unc", "dc", "ec", "cu", "enc", "cache", "fc", "xc", "tc", "cat", "cv", "cd", "cont", "cs", "g", "vc", "nc", "cm", "abc", "cod", "ic", "ci", "ct", "gc", "check", "etc", "char", "ac", "cb", "mac", "mc", "rc", "pc", "conv", "ch"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\tpublic static void main(String args[]) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint n;\\n\t\tn = sc.nextInt();\\n\t\t\\n\t\tint a[][] = new int[2][n];\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[0][i] = sc.nextInt();\\n\t\t\ta[1][i] = i + 1;\\n\t\t}\\n\t\t\\n\t\t//\u30bd\u30fc\u30c8\u3059\u308b([0]\u306e\u5024\u3067\u30bd\u30fc\u30c8)\\n\t\t//sort(a, n);\\n\t\tquickSort(a, 0, n - 1);\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tSystem.out.print( a[1][i] + \" \" );\\n\t\t}\\n\t\t\\n\t\treturn;\\n\t}\\n\t\\n\tpublic static void sort(int array[][], int n) {\\n\t\\n\t\tif (array == null) {\\n\t\t\treturn;\\n\t\t}\\n\t\t\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\tfor (int j = n - 1; j > i; j--) {\\n\t\t\t\tif (array[0][j] < array[0][j-1]) {\\n\t\t\t\t\tint temp0 = array[0][j];\\n\t\t\t\t\tint temp1 = array[1][j];\\n\t\t\t\t\t\\n\t\t\t\t\tarray[0][j] = array[0][j-1];\\n\t\t\t\t\tarray[1][j] = array[1][j-1];\\n\t\t\t\t\t\\n\t\t\t\t\tarray[0][j-1] = temp0;\\n\t\t\t\t\tarray[1][j-1] = temp1;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\treturn;\\n\t}\\n\t\\n\t\\n\tpublic static void quickSort(int array[][], int left, int right) {\\n\t\\n\t\t\\n\t\tif ( left > right ) {\\n\t\t\treturn;\\n\t\t}\\n\t\t\\n\t\t\\n\t\tint pivotValue = array[0][(left + right) / 2];\\n\t\t\\n\t\tint i = left;\\n\t\tint j = right;\\n\t\t\\n\t\twhile ( i <= j ) {\\n\t\t\twhile (array[0][i] < pivotValue) {\\n\t\t\t\ti++;\\n\t\t\t}\\n\t\t\t\\n\t\t\twhile (array[0][j] > pivotValue) {\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t\t\\n\t\t\tif ( i <= j ) {\\n\t\t\t\tquickSortSwap(array, i, j);\\n\t\t\t\t\\n\t\t\t\ti++;\\n\t\t\t\tj--;\\n\t\t\t}\\n\t\t}\\n\t\t\\n\t\tquickSort(array, left, j);\\n\t\tquickSort(array, i, right);\\n\t}\\n\t\t\\n\t\\n\\n\t\t\\n\t\t\\n\tpublic static void quickSortSwap(int array[][], int i, int j) {\\n\t\tint temp0 = array[0][i];\\n\t\tint temp1 = array[1][i];\\n\t\t\\n\t\tarray[0][i] = array[0][j];\\n\t\tarray[1][i] = array[1][j];\\n\t\t\\n\t\tarray[0][j] = temp0;\\n\t\tarray[1][j] = temp1;\\n\t\t\\n\t\treturn;\\n\t}\\n\\n}", "target": "227", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "ser", "sh", "cr", "bc", "sv", "sp", "dc", "ck", "nl", "sel", "irc", "sch", "sync", "fc", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "pb", "ok", "c", "osc", "Sc", "gc", "ng", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "n": ["nu", "num", "mn", "d", "ll", "nn", "l", "un", "len", "N", "gn", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "min", "count", "z", "j", "no", "nb", " N", "na", "nc", "length", "np", "en", "c", "ot", "ng", "t", "p", "ln", "net", "size", "nt"], "a": ["set", "ca", "ava", "result", "att", "eta", "oa", "o", "ta", "aa", "app", "da", "sta", "sa", "act", "A", "b", "at", "an", "la", "ga", "ao", "xa", "trace", "ab", "area", "apa", "cha", "ba", "aaa", "window", "action", "c", "aj", "fa", "ada", "alpha", "out", "ma", "t", "as", "ac", "au", "aux", "all", "to", "next", "am"], "i": ["I", "ix", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "chain", "ip", "ji", "li", "o", "id", "v", "m", "ij", "ini", "print", "ai", "ms", "cu", "ki", "im", "qi", "index", "us", "init", "u", "io", "sequence", "j", "bi", "it", "z", "ui", "is", "pi", "iso", "ti", "ic", "ci", "sim", "cli", "multi", "iter", "gu", "y", "ii", "xi", "si", "di", "x", "mi"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tint n = 0, q = 0;\\n\t\tScanner scanner = new Scanner(System.in);\\n\t\ttry {\\n\t\t\tn = scanner.nextInt();\\n\t\t\tq = scanner.nextInt();\\n\t\t} catch (Exception e) {\\n\t\t}\\n\t\tArrayList<Queue> qu = new ArrayList<Queue>();\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ttry {\\n\t\t\t\tString name = scanner.next();\\n\t\t\t\tint time = scanner.nextInt();\\n\t\t\t\tqu.add(new Queue(name, time));\\n\t\t\t} catch (Exception e) {\\n\t\t\t}\\n\t\t}\\n\\n\t\tint i = 0, count = 0, alltime = 0;\\n\t\twhile (qu.size() > 0) {\\n\t\t\ti = i % qu.size();\\n\t\t\tint t = qu.get(i).time;\\n\t\t\tif (t <= q) {\\n\t\t\t\talltime += t;\\n\t\t\t\tSystem.out.println(qu.get(i).name + \" \" + alltime);\\n\t\t\t\tqu.remove(i);\\n\t\t\t\ti--;\\n\t\t\t} else {\\n\t\t\t\talltime += q;\\n\t\t\t\tqu.get(i).time -= q;\\n\t\t\t}\\n\t\t\ti++;\\n\t\t}\\n\\n\t}\\n}\\n\\n\\nclass Queue {\\n\tString name;\\n\tint time;\\n\\n\tpublic Queue(String n, int t) {\\n\t\tname = n;\\n\t\ttime = t;\\n\t}\\n}", "target": "231", "substitutes": {"n": ["nu", "num", "mn", "d", "nn", "un", "l", "nr", "number", "N", "o", "ns", "v", "m", "ne", "nan", "nl", "cn", "wn", "sn", "a", "u", "an", "z", "j", "no", "nb", " N", "g", "na", "nc", "np", "en", "c", "nw", "tn", "nm", "e", "out", "ng", "p", "network", "s", "ln", "y", "net", "size", "nt", "x"], "q": ["r", "d", "aq", "queue", "requ", "l", "h", "qa", "m", "v", "eq", "qual", "quer", "Q", "qi", "u", "z", "qq", "j", "que", "it", "ue", "quality", "ve", "sq", "g", "quit", "qt", "k", "quant", "c", "e", "iq", "p", "qs", "dq", "query", "ch"], "scanner": ["canener", "canter", " scanter", "Scanter", "Scanner", "scanener", "Scanener", "canner", "scaner", " scaner", "Scaner", " scanener", "caner", "scanter"], "qu": ["compl", "requ", "www", "quad", "cgi", "qua", "cl", "qa", "pl", "sh", "co", "eq", "cro", "comm", "Qu", "capt", "acqu", "iqu", "ql", "quer", "liv", "iw", "cu", "aqu", "lim", "QU", "quart", "cho", "hw", "qq", "que", "qv", "equ", "ques", "sq", "gall", "qus", "comp", "qt", "quant", "whe", "squ", "inqu", "exp", "etc", "qs", "iq", "dq", "conv", "query", "ch"], "i": ["ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "go", "ims", "is", "eu", "ic", "c", "e", "ami", "y", "di", "x", "ri", "current", "l", "chain", "ip", "point", "o", "h", "id", "ij", "in", "client", "or", "ori", "a", "io", "bi", "it", "g", "ci", "sim", "cli", "counter", "s", "ii", "ex", "phi", "hi", "print", "ind", "u", "pi", "my", "p", "xi", "si", "mi", "I", "gi", "v", "m", "ini", "by", "im", "qi", "b", "index", "init", "j", "ui", "ie", "uri", "ti", "multi"], "name": ["ment", "description", "key", "group", "version", "l", "part", "error", "address", "o", "id", "prefix", "value", "m", "filename", "member", "word", "class", "default", "summary", "common", "path", "file", "named", "family", "print", "cpu", "width", "hello", "start", "str", "a", "NAME", "search", "code", "type", "ame", "mem", "sequence", "string", "comment", "alias", "message", "zone", "data", "text", "status", "length", "c", "normal", "format", "ma", "info", "local", "def", "label", "command", "Name", "size", "title", "line", "names"], "time": ["set", "ment", "offset", "tim", "Time", "end", "frequency", "runtime", "etime", "when", "estamp", "timeout", "temp", "error", "weight", "task", "total", "now", "tree", "id", "value", "context", "tt", "speed", "power", "path", "thread", "cache", "dt", "ime", "type", "TIME", "tc", "mem", "sequence", "delay", "history", "test", "string", "trace", "year", "comment", "tm", "message", "ts", "ty", "text", "usage", "length", "timer", "step", "mt", "port", "times", "duration", "info", "date", "clock", "command", "rate", "size", "depth"], "count": ["num", "current", "total", "h", "id", "v", "err", "call", "cu", "Count", "ind", "start", "index", "f", "z", "nb", "cont", "g", "done", "c", "ct", "counter", "w", "iq", "add", "th", "nt", "ch"], "alltime": ["alltimeout", " allTime", " allt", "ALLTime", "lograte", "logtime", "logsize", "fullrate", "allime", " allsize", "fulldate", "fullsize", "ALLime", "allTime", "allt", " alldate", "allrate", "fullt", "ALLduration", "walltimer", "ALLdate", "bothtime", " allrate", "walltime", " alltimeout", "allsize", "fullTime", "bothtim", "bothtimer", "fullduration", "alltimer", "bothtimeout", "walltimeout", "allduration", "logt", "alldate", "fulltime", " alltimer", "walltim", " allime", " allduration", " alltim", "fullime", "ALLtime", "alltim"], "t": ["elt", "pt", "tim", "d", "wt", "l", "tz", "tp", "rt", "h", "ta", "o", "v", "m", "tt", "tf", "tw", "td", "T", "at", "a", "f", "type", "tc", "z", "j", "it", "trace", "tm", "ts", "ty", "text", "g", "qt", "fort", "ti", "c", "mt", "txt", "vt", "ct", "w", "ot", "e", "out", "p", "s", "kt", "y", "te", "dt", "st"], "get": ["set", "pop", "group", "got", "current", "entry", "draw", "put", "value", "v", "member", "export", "read", "give", "item", "filter", "run", "any", "go", "GET", "cache", "Get", "list", "pull", "select", "match", "it", "find", "remove", "data", "g", "et", " Get", "head", "port", "gets", "handle", "add", "size", "query", "del", "map"]}}
{"code": "import java.util.*;\\n\\npublic class Main{\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        int[] a = new int[n];\\n        for(int i = 0; i < n; i++){\\n            a[i] = sc.nextInt();\\n        }\\n        int[] copy = new int[n];\\n        for(int i = 0; i < n; i++){\\n            copy[i] = a[i];\\n        }\\n        int count = 0;\\n        int light = 1;\\n        int flag = 1;\\n        for(int i = 0; ; i++){\\n            if(light != 2 && copy[light-1] != 0){\\n                copy[light-1] = 0;\\n                light = a[light-1];\\n                count++;\\n            } else if(copy[light-1] == 0){\\n                flag = 0;\\n                break;\\n            } else if(light == 2){\\n                break;\\n            }\\n        }\\n        if(flag == 0){\\n            System.out.print(\"-1\");\\n        } else {\\n            System.out.print(count);\\n        }\\n    }\\n}", "target": "175", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "sv", "sp", "bc", "cr", "ch", "ck", "ctl", "capt", "cle", "sel", "sch", "sw", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "sr", "desc"], "n": ["num", "nu", "r", "name", "d", "ll", "nn", "number", "l", "un", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "sn", "on", "j", "no", "nb", " N", "na", "nc", "length", "np", "fn", "en", "c", "nw", "nm", "out", "ot", "ng", "t", "p", "network", "nor", "ln", "net", "all", "nt", "x"], "a": ["set", "ae", "ata", "ca", "att", "array", "ar", "l", "oa", "o", "aa", "sa", "ai", "act", "auto", "A", "cart", "b", "search", "ack", "ia", "at", "index", "an", "code", "map", "ga", "ab", "ea", "apa", "ba", "aaa", "na", "aka", "c", "link", "alpha", "ap", "out", "ma", "t", "as", "p", "ac", "e", "bare", "y", "au", "ka", "all", "to", "va", "am"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "me", "batch", "eric", "ai", "ki", "go", "ims", "is", "ic", "ios", "ami", "y", "oi", "di", "x", "ri", "fi", "l", "chain", "ip", "ji", "point", "o", "id", "gl", "client", "ori", "io", "bi", "it", "inner", "ci", "sim", "cli", "iq", "ii", "ex", "phi", "hi", "dr", "ind", "ia", "u", "\u0438", "fire", "pi", "iso", "my", "xi", "si", "mi", "I", "tim", "gi", "iy", "v", "m", "ini", "err", "im", "qi", "us", "init", "ies", "j", "ity", "ui", "ie", "uri", "ti", "port", "PI", "multi", "info", "iter", "to"], "copy": ["clone", "set", "save", "pixel", "star", "ll", "skip", "opy", "parse", "l", "ip", "clip", "o", "create", "zero", "node", "proxy", "cp", "ce", "line", "cap", "ro", "clear", "le", "write", "go", "cache", "auto", "note", "code", "sync", "Copy", "load", "force", "fire", "share", "buffer", "match", "slice", "cat", "comment", "core", "sky", "template", "score", "store", "c", "link", "e", "gc", "blue", "p", "late", "cop", "quote", "cycle", "delete", "repeat", "library", "map"], "count": ["num", "ount", "ctr", "color", "found", "number", "l", "cond", "len", "total", "id", "summary", "call", "print", "sum", "report", "state", "Count", "ind", "cache", "list", "index", "code", "force", "fire", "z", "trace", "find", "cd", "cont", "status", "length", "score", "c", "max", "ct", "counter", "out", "check", "t", "info", "add", "size", "cycle", "nt"], "light": ["set", "grey", " highlight", "low", "color", "star", "bright", "white", "ight", "shift", "hl", "feature", "l", "weight", "heavy", "red", "ff", "mid", "sh", "heat", "silver", "focus", "yellow", "soft", "stock", "speed", "level", "important", "power", "slow", "print", "high", "show", "sum", "lit", "lag", "ind", "list", "match", "lighting", "field", "fire", "ard", "shadow", "Light", "flash", "sky", "status", "night", "flat", "pal", "balance", "normal", "link", "idth", "style", "black", "check", "local", "iter", "kind", "reflect", "lights", "bird", "dark", "seed", "colour"], "flag": ["set", "lead", "offset", "stage", "card", "color", "group", "mask", "l", "weight", "cond", "fd", "flags", "log", "id", "level", "print", "sum", "tag", "state", "lag", "ind", "list", "sync", "type", "match", "field", "fire", "force", "cmd", "status", "bug", "lock", "lv", "Flag", "event", "store", "link", "debug", "style", "continue", "char", "command", "bird", "line"]}}
{"code": "import java.util.*;\\n\\n\\npublic class Main {\\n    public static void main(String[] args){\\n\\n        Scanner s = new Scanner(System.in);\\n        \\n        int yusha = s.nextInt();        // \u52c7\u8005\u306e\u6570\\n        long monsters[] = new long[yusha + 1];    //\u3000\u30e2\u30f3\u30b9\u30bf\u30fc\u306e\u6570\u3092\u683c\u7d0d\u3059\u308b\\n        long strength[] = new long[yusha];        // \u52c7\u8005\u306e\u5f37\u3055\u3092\u683c\u7d0d\u3059\u308b\\n\\n        // \u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u5012\u3057\u305f\u6570\\n        long count = 0;\\n\\n        for (int i = 0; i < yusha+1; i++) {\\n            monsters[i] = s.nextInt();\\n        }\\n\\n        for (int i = 0; i < yusha; i++) {\\n            strength[i] = s.nextInt();\\n        }\\n\\n        // \u52c7\u8005\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\\n        for (int i = 0; i < yusha; i++) {\\n            // 2\u3064\u306e\u8857\u3092\u5b88\u308d\u3046\u3068\u3059\u308b\\n            for (int j = 0; j < 2; j++) {\\n                // \u52c7\u8005\u3088\u308a\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u5f37\u3044\u5834\u5408\u5012\u305b\u308b\u9650\u308a\u5012\u3059\\n                if (monsters[i+j] >= strength[i]) {\\n                    count += strength[i];\\n                    monsters[i+j] = monsters[i+j] - strength[i];    // \u6b8b\u308a\u30e2\u30f3\u30b9\u30bf\u30fc\u6570\\n                    strength[i] = 0;                // \u52c7\u8005\u306e\u4f59\u529b\\n                } else {\\n                    count += monsters[j + i];   // \u4e00\u3064\u306e\u8857\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u3059\u3079\u3066\u5012\u3059\\n                    strength[i] = strength[i] - monsters[i+j];  // \u52c7\u8005\u306e\u4f59\u529b\\n                    monsters[i+j] = 0;    // \u6b8b\u308a\u30e2\u30f3\u30b9\u30bf\u30fc\u6570\\n                }\\n            }\\n        }\\n\\n        System.out.println(count);\\n    }\\n}", "target": "159", "substitutes": {"s": ["gs", "ubs", "aws", "sb", "rs", "sol", "sys", "eds", "ns", "h", "sv", "in", "ws", "S", "ms", "its", "serv", "ys", "ats", "b", "f", "fs", "es", "ls", "sts", "pers", "rates", "is", "ts", "sq", "cs", "ss", "bis", "ds", "qs", "ses", "p", "xs", "ps", "hs"], "yusha": ["rval", "eield", "type", "ymbol", "epe", "tyval", "yval", "rield", "rmbol", "tymbol", "ype", "tyield", "eval", "embol", "yield", "rpe"]}}
{"code": "import java.io.PrintStream;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\tstatic final PrintStream out = System.out;\\n\tstatic final Scanner sc = new Scanner(System.in);\\n\tstatic final long Mod = 1000_000_007L;\\n\tint a,b;\\n\\n\tpublic static void main(String[] args) {\\n\t\tMain main = new Main();\\n\t\tmain.solve();\\n\t\tSystem.exit(0);\\n\t}\\n\\n\tvoid solve() {\\n\t\ta = nextInt();\\n\t\tb = nextInt();\\n\\n\t\tlong res = 0;\\n\t\tif(a < b) {\\n\t\t\tfor(int i=0,multi = 1;i<b;i++,multi*=10) {\\n\t\t\t\tres += a * multi;\\n\t\t\t}\\n\t\t}else {\\n\t\t\tfor(int i=0,multi = 1;i<a;i++,multi*=10) {\\n\t\t\t\tres += b * multi;\\n\t\t\t}\\n\t\t}\\n\\n\t\tout.println(res);\\n\t}\\n\\n\tpublic int[] nextIntArray(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++)a[i] = nextInt();\\n\t\treturn a;\\n\t}\\n\tpublic long[] nextLongArray(int n) {\\n\t\tlong[] a = new long[n];\\n\t\tfor (int i = 0; i < n; i++)a[i] = nextLong();\\n\t\treturn a;\\n\t}\\n\tpublic int nextInt() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\tpublic long nextLong() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\tpublic String next() {\\n\t\treturn sc.next();\\n\t}\\n\\n\tlong gcd(long m,long n) {\\n\t\tif (m<n) return gcd(n,m);\\n\t\tif (n==0)return m;\\n\t\treturn gcd(n,m%n);\\n\t}\\n\\n\tlong lcm(long m, long n) {\\n\t        return m * n / gcd(m, n);\\n\t}\\n}", "target": "24", "substitutes": {"out": ["ou", "r", "result", "ex", "to", "outer", "st", "writer", "error", "sys", "o", "log", "exit", "v", "console", "err", "in", "OU", "print", "OUT", "os", "file", "write", "inter", "exec", "io", "ao", "Out", "cmd", "stream", "status", "screen", "table", "c", "obj", "output", "pool", "w", "t", "info", "p", "s", "up", "conv", "nt", "ch", "outs", "window"], "sc": ["uc", "lc", "cc", "mp", "sb", "ser", "sys", "so", "sv", "sp", "bc", "ch", "dc", "nl", "sch", "or", "sw", "tc", "scan", "si", "sq", " Sc", "cs", "ner", "nc", "pb", "c", "Sc", "gc", "ng", "s", "SC", "mc", "pc", "rc", "sci", "st"], "Mod": ["Lock", "base", "Prime", "Mult", "Val", "Conf", "MOD", " Mi", "scale", " Max", "Len", "Mask", "Lim", "off", "mod", "Num", "max", " mod", "K", " mu", "Base", "Max", "Ref"], "a": ["r", "array", "ta", "ai", "f", "ga", "ao", "data", "na", "c", "e", "alpha", "as", "ac", "y", "all", "ata", "va", "x", "am", "el", "l", "o", "aa", "app", "sta", "z", "xa", "anta", "ea", "apa", "ba", "aka", "w", "s", "au", "ae", "att", "ar", "qa", "al", "wa", "act", "list", "ia", "fac", "an", "la", "ma", "p", "ca", "aq", "oa", "da", "sa", "ya", "A", "at", "back", "j", "aos", "ab", "area", "aaa", "aj", "fa", "ada", "t", "be", "aux", "to"], "b": ["br", "r", "ca", "bin", "sb", "ob", "base", "l", "mb", "bc", "bf", "v", "db", "bl", "bs", "bp", "back", "eb", "f", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "ba", "pb", "bg", "bt", "c", "bis", "bo", "t", "p", "bb", "binary", "cb", "be", "BA", "y", "rb", "B"], "res": ["r", "reg", "result", "rev", "frac", "rs", "sol", "cond", "red", "zero", "ress", "reset", "vec", "resource", "Res", "rand", "respons", "stock", "resp", "conn", "sum", "nz", "yes", "val", "cu", "ret", "req", "resh", "arr", "results", " Res", "clus", "full", "cs", "rest", "rss", "vol", "success", "comp", "rel", "obj", "js", "des", "RES", "cons", "def", "terms", "re", "trans", "resolution", "pres", "gr", "rem", "expr"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "f", "ik", "ims", "is", "ic", "MI", "ios", "ami", "oi", "y", "di", "x", "ri", "fi", "ip", "ji", "o", "ij", "ori", "io", "bi", "it", "ci", "sim", "cli", "ii", "ex", "phi", "hi", "this", "ni", "\u0438", "u", "fire", "pi", "my", "p", "gu", "xi", "si", "mi", "I", "pie", "gi", "iy", "ini", "ice", "im", "qi", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "PI", "iter", "info"], "multi": ["mot", "coll", "phi", "poly", "dim", "secondary", "broad", "mid", "li", "perm", "mont", "complex", "global", "fine", "ini", "maybe", "wei", "by", "batch", "many", "multiple", "cu", "mu", "Multi", "unique", "flu", "multipl", "single", "shared", "ui", "menu", "partial", "pi", "tri", "mix", "MI", "ci", "sim", "my", "cli", "mult", "pool", "similar", "lu", "late", "ios", "uni", "gre", "si", "di", "mi", "tu"], "n": ["num", "nu", "r", "mn", "name", "d", "nn", "l", "un", "nr", "number", "len", "N", "o", "h", "ns", "node", "v", "dn", "ne", "nan", "nl", "cn", "le", "sn", "on", "M", "u", "an", "z", "j", "no", "nb", "g", "pi", "nc", "fn", "na", "np", " N", "en", "c", "nw", "nm", "none", "w", "ng", "t", "p", "network", "ln", "y", "net", "size", "nt", "x"], "m": ["mn", "r", "mm", "d", "dm", "pm", "mo", "mb", "l", "o", "h", "perm", "v", "md", "mun", "ms", "vm", "mr", "im", "rm", "f", "sm", "M", "u", "an", "mem", "j", "um", "bm", "gm", "tm", "mk", "g", "mx", "cm", "mod", "c", "mt", "nm", "e", "ma", "t", "er", "p", "man", "y", "em", "mc", "x", "mi", "am"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.InputStreamReader;\\nimport java.io.OutputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\n\\n/**\\n * Built using CHelper plug-in Actual solution is at the top\\n */\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tInputStream inputStream = System.in;\\n\t\tOutputStream outputStream = System.out;\\n\t\tInputReader in = new InputReader(inputStream);\\n\t\tPrintWriter out = new PrintWriter(outputStream);\\n\t\tTask solver = new Task();\\n\t\tsolver.solve(1, in, out);\\n\t\tout.close();\\n\t}\\n\\n\tstatic class Task {\\n\t\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\\n\t\t\tint A = in.nextInt();\\n\t\t\tint B = in.nextInt();\\n\t\t\tint count = 0;\\n\t\t\tfor(int i = A; i <= B; i++) {\\n\t\t\t\tif(String.valueOf(i).charAt(0) == String.valueOf(i).charAt(4) && String.valueOf(i).charAt(1) == String.valueOf(i).charAt(3)) {\\n\t\t\t\t\tcount++;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\tout.println(count);\\n\t\t}\\n\t}\\n\t\t\\n\tstatic class InputReader {\\n\t\tpublic BufferedReader reader;\\n\t\tpublic StringTokenizer tokenizer;\\n\\n\t\tpublic InputReader(InputStream stream) {\\n\t\t\treader = new BufferedReader(new InputStreamReader(stream), 32768);\\n\t\t\ttokenizer = null;\\n\t\t}\\n\\n\t\tpublic String next() {\\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\\n\t\t\t\t} catch (IOException e) {\\n\t\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn tokenizer.nextToken();\\n\t\t}\\n\\n\t\tpublic int nextInt() {\\n\t\t\treturn Integer.parseInt(next());\\n\t\t}\\n\t}\\n}", "target": "104", "substitutes": {"inputStream": ["inputSocket", "addressSteam", "infoSteam", " inputSteam", "outputStreamer", "inputSteam", "inputView", " inputView", "imageView", " inputStreamer", "imageSocket", "addressSocket", "imageStream", " inputstream", "inputstream", "imageSteam", "infoStreamer", "infostream", "outputstream", "inputStreamer", " inputSocket", "addressView", "infoStream", "addressStream", "outputSteam"], "outputStream": ["outStreamer", "updatestream", "updateStreamer", "outputStreamer", "inputSteam", "outputNow", "responseSteam", "responseStream", "outNow", " outputSteam", "outStream", "outstream", "updateSteam", "responseNow", "inputstream", "outSteam", "outputstream", "responseWriter", "inputStreamer", "outWriter", "updateStream", "outputWriter", " outputNow", "outputSteam", " outputWriter"], "in": ["r", "mm", "gin", "bin", "inf", "con", "el", "current", "l", "from", "per", "log", "rt", "h", "and", "inc", "conn", "ini", "context", "err", "source", "by", "al", "doc", "raw", "inn", "file", "rin", "IN", "ro", "get", "run", "serv", "ind", "form", "on", "In", "init", "io", "it", "null", "din", "is", "inner", "ing", "cm", "ic", "en", "inside", "ins", "input", "output", "old", "conf", "local", "t", "cin", "iter", "env", "s", "info", "ac", "add", "mc", "ch", "mi", "config"], "out": ["set", "ou", "name", "ex", "end", "outer", "flush", "timeout", "current", "temp", "writer", "l", "co", "log", "o", "rt", "sys", "n", "v", "console", "ch", "err", "this", "print", "OUT", "os", "OU", "report", "run", "write", "user", "client", "or", "at", "b", "list", "io", "gr", "it", "aos", "Out", "null", "cmd", "inner", "lock", "screen", "table", "obj", "output", "txt", "w", "gc", "t", "check", "p", "s", "up", "net", "all", "to", "nt", "res", "outs"], "solver": ["esolve", "esolver", "resolver", "csorter", "csolver", "Solution", " solution", "Solve", "csolve", " sorter", " solve", "resolve", "esorter", "Sorter", "resorter", "esolution", "solve", "solution", "sorter", "csolution", "Solver", "resolution"], "testNumber": [" testNo", " solutionnum", "testNumbers", "TestNumber", "testnum", "TestNumbers", "TestNo", "testNo", "Testnum", " testnum", " solutionNumbers", " testNumbers", " solutionNo", " solutionNumber"], "A": ["AA", "App", "AU", "E", "Before", "Alpha", "CA", "AY", "AE", "AC", "HA", "The", "Ax", "As", "SA", "G", "P", "Ar", "IA", "a", "LA", "TA", "This", "AV", "AL", "ACC", "H", "AP", "First", "AB", "An", "AS", "NA", "RA", "AR", "AST", "AT", "AD", "AF", "ACT", "ESS"], "B": ["I", "WB", "BB", "LB", "TB", "RB", "BI", "BL", "USB", "BG", "DB", "N", "BU", "NB", "GB", "P", "BER", "IB", "BR", "b", "BC", "V", "BE", "BY", "C", "BO", "AB", "Y", "L", "Bar", "J", "EB", "BA", "OB", "Blue", "FB"], "count": ["num", "ount", "result", "coll", "frequency", "found", "current", "number", "cond", "total", "now", "amount", "reset", "n", "batch", "call", "print", "sum", "cell", "report", "Count", "ind", "cache", "index", "code", "list", "type", "force", "test", "const", "z", "must", "find", "nb", "child", "status", "length", "c", "display", "max", "counter", "check", "continue", "add", "size", "all", "nt"], "i": ["set", "q", "I", "ix", "phi", "gi", "hi", "iu", "ei", "chain", "ip", "li", "h", "id", "v", "m", "n", "ini", "uu", "ai", "ms", "ki", "client", "im", "ind", "qi", "ori", "b", "list", "us", "u", "io", "z", "j", "bi", "it", "ui", "is", "uri", "status", "pi", "ti", "ic", "ci", "cli", "multi", "t", "iq", "p", "info", "s", "mac", "y", "oi", "xi", "ii", "si", "di", "x", "mi"], "reader": ["loader", "rr", "wrapper", "r", "driver", "row", "rar", "rier", "writer", "dd", "builder", " parser", "dr", "read", "ro", "file", "handler", "user", "Reader", " viewer", "runner", "buffer", " writer", "worker", "parser", "oder", "rer", " ruler", "inner", "rl", "ner", "timer", "linger", "iterator", "keeper", "input", "older", "er", "iter", "rx", "controller", " loader", "rc", "window"], "tokenizer": ["tokenoder", "tokenener", "normalizer", " tokenize", "operatorizable", "serialzer", "operatorize", " tokenization", "tokenize", "okenener", "localization", " tokenifier", "okenizable", "okenize", "Tokener", " tokenizable", "Tokenizer", "tokenger", "characterator", "okeniner", " tokenzer", "localifier", "tempizer", "operatorizer", "tokeniser", "serialization", "okener", "Tokenger", "tokener", "matiner", "tempiter", " tokener", "characterizer", "characteriser", " tokenator", "normalifier", "matifier", "serialifier", "okenizer", "tokenization", " tokenener", "okenator", "serializer", "matator", "characterener", "Tokenifier", "tokenifier", "localizer", "matizer", "okenifier", "tempifier", " tokenger", " tokenoder", "tokenizable", " tokeniner", "localzer", "tokenator", "tokeniner", "okeniter", "tokeniter", "operatoroder", "okeniser", "okenger", "normalization", "okenoder", "tempization", "normaliter", "okenization", "tokenzer", " tokeniser"], "stream": ["row", "chain", "progress", "v", "console", "resource", "context", "source", "ream", "path", "file", "this", "user", "thread", "form", "phrase", "view", "secure", "buffer", "test", "io", "history", "stack", "pipe", "null", "data", "inner", "length", "channel", "Stream", "input", "iterator", "body", "sample", "output", "pool", "handle", "down", "proc", "window"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        HashMap week = new HashMap<String, Integer>();\\n        week.put(\"SUN\", 7);\\n        week.put(\"MON\", 6);\\n        week.put(\"TUE\", 5);\\n        week.put(\"WED\", 4);\\n        week.put(\"THU\", 3);\\n        week.put(\"FRI\", 2);\\n        week.put(\"SAT\", 1);\\n        System.out.println(week.get(s));\\n    }\\n}\\n", "target": "136", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "cr", "sv", "sp", "bc", "soc", "ec", "cle", "sel", "sch", "sm", "sync", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "screen", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "s": ["r", "d", "aws", "sb", "rs", "abs", "sys", "ns", "sv", "strings", "n", "m", "v", "ws", "S", "ats", "str", "south", "b", "f", "fs", "ls", "j", "string", "sts", "ts", "sq", "i", "g", "ss", "c", "js", "ds", "gets", "w", "t", "ses", "p", "ps"], "week": ["wall", "low", "cal", "work", "row", "winter", "weight", "task", "draw", "total", "feat", "word", "day", "power", "item", "update", "hour", "wal", "ow", "start", "index", "list", "test", "tower", "access", "flow", "field", "worker", "year", "league", "full", "div", "url", "news", "night", "window", "event", "good", "step", "supp", "w", "diff", "we", "ward", "weekly", "fw", "season", "add", "all", "rule", "eight", "month", "Week", "colour"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = scanner.nextInt();\\n        int [] arr = new int[n+1];\\n        for(int i=0; i<n-1; i++){\\n            arr[scanner.nextInt()]+=1;\\n        }\\n        for(int i=1; i<=n; i++)\\n            System.out.println(arr[i]);\\n    }\\n}", "target": "12", "substitutes": {"scanner": ["canener", "Scanator", " scanener", "Scanter", "scanener", "Scanener", "Scaner", "canator", "scanter", "scanator", "canter", " scanter", " scanator", "Scanner", "canner", "scaner", " scaner", "caner"], "n": ["nu", "mn", "num", "name", "d", "nn", "number", "l", "un", "len", "N", "gn", "o", "ns", "and", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "count", "norm", "z", "j", "no", "nb", " N", "g", "nc", "na", "k", "np", "pi", "en", "c", "nm", "ct", "w", "ng", "nd", "p", "t", "nor", "ln", "net", "all", "nt", "names"], "arr": ["dat", "br", "r", "elt", "av", "coll", "ray", "Array", "ax", "att", "ar", "array", "agg", "frac", "var", "sys", "pl", "ref", "adj", "amount", "vec", "gb", "db", "stock", "pret", "alph", "bl", "attr", "Ar", "arg", "dict", "arm", "enc", "val", "hist", "buf", "arry", "ang", "map", "img", "list", "ack", "rot", "resh", "always", "par", "vol", "pad", "good", "rel", "obj", "fr", "ARR", "iq", "bar", "nt", "gr", "hash"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "hi", "iu", "ei", "base", "chain", "ip", "iy", "ji", "point", "li", "id", "ij", "me", "ini", "err", "in", "print", "ai", "ni", "ki", "client", "im", "ind", "qi", "ori", "index", "us", "init", "u", "io", "ims", "j", "bi", "it", "ity", "ui", "is", "ie", "uri", "pi", "ti", "ic", "ci", "sim", "yi", "cli", "multi", "iter", "gu", "y", "uni", "xi", "ii", "si", "span", "di", "mi"], "nextInt": ["randFloat", "nextFloat", "nextInteger", "newLong", "randShort", "nextShort", "randInteger", " nextFloat", " nextLong", "randInt", "randLong", "readInteger", "readLong", "readInt", "newShort", " nextShort", "newInteger", "newInt", "readFloat", " nextInteger", "nextLong"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.Arrays;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tFastScanner sc = new FastScanner();\\n\t\tint N = sc.nextInt();\\n\t\tString[] S = new String[N];\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\tS[i] = sc.next();\\n\\n\t\tArrays.sort(S);\\n\t\tint max = 0;\\n\t\tint count = 1;\\n\\n\t\tfor (int i = 1; i < N; i++) {\\n\t\t\tif (S[i].equals(S[i - 1]))\\n\t\t\t\tcount++;\\n\t\t\telse\\n\t\t\t\tcount = 1;\\n\\n\t\t\tmax = Math.max(max, count);\\n\t\t}\\n\\n\t\tcount = 1;\\n\\n\t\tif (max == 1) {\\n\t\t\tfor (int i = 0; i < N; i++) {\\n\t\t\t\tSystem.out.println(S[i]);\\n\t\t\t}\\n\t\t\treturn;\\n\t\t}\\n\\n\t\tfor (int i = 1; i < N; i++) {\\n\t\t\tif (S[i].equals(S[i - 1]))\\n\t\t\t\tcount++;\\n\t\t\telse\\n\t\t\t\tcount = 1;\\n\\n\t\t\tif (max == count)\\n\t\t\t\tSystem.out.println(S[i]);\\n\t\t}\\n\\n\t}\\n\\n\t//\u4ee5\u4e0b\u3001\u81ea\u4f5c\u30e9\u30a4\u30d6\u30e9\u30ea\\n\\n\t/*\\n\t\tint N = sc.nextInt();\\n\\n\t\tint[] a = new int[N];\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\ta[i] = sc.nextInt();\\n\\n\t\tString s = sc.next();\\n\\n\t\tString[] a = new String[N];\\n\t\tfor (int i = 0; i < N; i++)\\n\t\t\ta[i] = sc.next();\\n\\n\t\tint[][] a = new int[N][2];\\n\t\tfor (int i = 0; i < N; i++) {\\n\t\t\ta[i][0] = sc.nextInt();\\n\t\t\ta[i][1] = sc.nextInt();\\n\t\t}\\n\t\tArrays.sort(a, (x, y) -> Integer.compare(x[0], y[0]));\\n\\n\t\tList<Integer> list = new ArrayList<>();\\n\\n\t\tSet<Integer> set = new HashSet<>();\\n\\n\t\tMap<Integer, Integer> map = new HashMap<>();\\n\\n\t\tnextLine\u306e\u3068\u304d\u306f\\n\t\tScanner sc = new Scanner(System.in);\\n\t */\\n\\n\t//\u7d44\u307f\u5408\u308f\u305b\u306e\u6570nCr\u3092\u8a08\u7b97\\n\tpublic static int calcNumOfCombination(int n, int r) {\\n\t\tint num = 1;\\n\t\tfor (int i = 1; i <= r; i++) {\\n\t\t\tnum = num * (n - i + 1) / i;\\n\t\t}\\n\t\treturn num;\\n\t}\\n\\n\t//\u968e\u4e57\\n\tpublic static int fact(int n) {\\n\t\tif (n == 1 || n == 0)\\n\t\t\treturn 1;\\n\t\telse\\n\t\t\treturn n * fact(n - 1);\\n\t}\\n\\n\t//\u6307\u5b9a\u3057\u305f\u5024\u4ee5\u4e0a\u306e\u8981\u7d20\u304c\u6700\u521d\u306b\u73fe\u308c\u308b\u4f4d\u7f6e\\n\t//\u8981\u7d20\u306e\u6570\u306f+1\uff08\u914d\u5217\u306e\u30ba\u30ec)\\n\tpublic static long lowerBound(int n, long[] x, long y) {\\n\t\tint left = 0;\\n\t\tint right = n;\\n\t\twhile (left < right) {\\n\t\t\tint mid = (left + right) / 2;\\n\t\t\tif (x[mid] < y) {\\n\t\t\t\tleft = mid + 1;\\n\t\t\t} else {\\n\t\t\t\tright = mid;\\n\t\t\t}\\n\t\t}\\n\t\treturn left;\\n\t}\\n\\n\t//\u6307\u5b9a\u3057\u305f\u5024\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u304c\u6700\u521d\u306b\u73fe\u308c\u308b\u4f4d\u7f6e\\n\t//\u8981\u7d20\u306e\u6570\u306f+1\uff08\u914d\u5217\u306e\u30ba\u30ec)\\n\tpublic static long upperBound(int n, long[] x, long y) {\\n\t\tint left = 0;\\n\t\tint right = n;\\n\t\twhile (left < right) {\\n\t\t\tint mid = (left + right) / 2;\\n\t\t\tif (x[mid] <= y) {\\n\t\t\t\tleft = mid + 1;\\n\t\t\t} else {\\n\t\t\t\tright = mid;\\n\t\t\t}\\n\t\t}\\n\t\treturn left;\\n\t}\\n\\n\t//\u6700\u5927\u516c\u7d04\u6570\\n\tpublic static long gcd(long a, long b) {\\n\t\tif (a < b)\\n\t\t\treturn gcd(b, a);\\n\t\tlong c = 0;\\n\t\tc = a % b;\\n\t\tif (c == 0)\\n\t\t\treturn b;\\n\t\treturn gcd(b, c);\\n\t}\\n\\n\t//\u6700\u5c0f\u516c\u500d\u6570\\n\tpublic static long lcm(long m, long n) {\\n\t\treturn m * n / gcd(m, n);\\n\t}\\n\\n\t//\u7d20\u6570\u5224\u5b9a\\n\tpublic static boolean isPrime(int n) {\\n\t\tif (n < 2)\\n\t\t\treturn false;\\n\t\tif (n == 2)\\n\t\t\treturn true;\\n\t\tif (n % 2 == 0)\\n\t\t\treturn false;\\n\\n\t\tfor (int i = 3; i * i <= n; i += 2) {\\n\t\t\tif (n % i == 0)\\n\t\t\t\treturn false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}\\n\\n//\u4ee5\u4e0b\u3001\u9ad8\u901f\u30b9\u30ad\u30e3\u30ca\u30fc\u30af\u30e9\u30b9\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "235", "substitutes": {"sc": ["arc", "usc", "lc", "cc", "anc", "esc", " SC", "sec", "cl", "ser", "bc", "cr", "sp", "sv", "inc", "dc", "ctl", "capt", "ec", "cle", "sel", "sch", "sw", "fc", "sync", "tc", "ctrl", "scan", "sq", " Sc", "cs", "sci", "nc", "pb", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "sr", "SC", "mc", "pc", "rc", "ch", "desc"], "N": ["D", "I", "Z", "TN", "FN", "ND", "NM", "SN", "NP", "NE", "NB", "n", "Size", "No", "Ni", "NG", "P", "NO", "T", "NL", "R", "NS", "NR", "V", "NH", "M", "NOW", "AN", "GN", "NC", "Sn", "C", "UN", "NN", "Num", "NA", "L", "K", "J", "Net", "CN", "Length", "NAT", "NI", "NT", "Ns"], "S": ["Series", "I", "CS", "CSS", "SI", "ENS", "GES", "TS", "SM", "SH", "JS", "MS", "SQL", "SA", "SP", "SE", "SAM", "OS", "P", "PS", "JSON", "T", "SU", "R", "SO", "NS", "A", "V", "Sample", "FS", "M", "W", "US", "SL", "RS", "BS", "ES", "IS", "SAN", "C", "NRS", "U", "WS", "Y", "GS", "SS", "L", "J", "s", "DS", "VS", "INS", "SB", "ST", "LS", "B"], "i": ["set", "q", "ix", "zi", "iu", "ei", "base", "li", "me", "batch", "ai", "ki", "ik", "ims", "is", "ic", "c", "ios", "ami", "y", "oi", "di", "ri", "fi", "ip", "ji", "point", "o", "id", "ij", "in", "client", "ori", "io", "slice", "bi", "it", "g", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "php", "ion", "remote", "this", "ni", "mu", "ind", "\u0438", "u", "ir", "pi", "my", "jp", "iri", "xi", "si", "mi", "I", "name", "gi", "iy", "m", "ini", "wi", "by", "ski", "im", "qi", "at", "us", "init", "j", "ity", "umi", "ui", "ie", "uri", "ti", "PI", "multi", "iter", "info", "to"], "max": ["ax", "put", "n", "can", "scale", "gt", "core", "mx", "c", "conf", "last", "box", "all", "med", "x", "res", "st", "window", "map", "limit", "maximum", "current", "chain", "global", "h", "now", "id", "top", "call", "ge", "largest", "right", "start", "full", "rest", "k", "counter", "grow", "plus", "pop", "end", "after", "tmp", "rand", "mean", "act", "cache", "length", "mod", "head", "out", "ma", "average", "p", "add", "checked", "hash", "name", "total", "cl", "v", "m", "sum", "inter", "min", "est", "check", "t", "Max", "up", "MAX", "size"], "count": ["coll", "number", "n", "batch", "force", "comment", "core", "c", "last", "flag", "all", "false", "x", "first", "next", "num", "ctr", "cur", "current", "weight", "now", "id", "cast", "call", "start", "code", "match", "const", "z", "find", "child", "message", "rest", "counter", "iq", "result", "found", "cond", "stat", "print", "Count", "ind", "cache", "list", "test", "cd", "nb", "cont", "status", "length", "ct", "out", "add", "depth", "key", "total", "sum", "index", "hold", "must", "C", "gc", "multi", "t", "check", "ctx", "size", "nt"]}}
{"code": "\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint m = sc.nextInt();\\n\t\tint[] town = new int[n];\\n\t\tfor(int i = 0; i < m; i++) {\\n\t\t\ttown[sc.nextInt() - 1] ++;\\n\t\t\ttown[sc.nextInt() - 1] ++;\\n\t\t}\\n\t\tfor(int i : town) {\\n\t\t\tSystem.out.println(i);\\n\t\t}\\n\t}\\n\\n}\\n", "target": "57", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "sh", "pl", "cr", "bc", "sv", "sp", "inc", " scr", "dc", "ck", "ctl", "capt", "irc", "sch", "cam", "sync", "fc", "tch", "exec", "tc", "ctrl", "scan", "sq", "cs", "nc", "pb", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "psc", "scrib", "ch", "desc", "sub"], "n": ["num", "mn", "nu", "d", "nn", "number", "l", "N", "o", "ns", "v", "ne", "nl", "cn", "sn", "a", "b", "j", "no", "nb", "pi", "na", "k", "np", "en", "c", "nm", "w", "t", "ng", "p", "ln", "nt", "x"], "m": ["mn", "r", "mm", "d", "dm", "mb", "l", "h", "o", "v", "km", "ms", "mu", "b", "f", "sm", "M", "j", "bm", "gm", "tm", "g", "k", "cm", "c", "mt", "nm", "t", "p", "y", "mc", "mi"], "town": ["shield", "round", "mill", "minecraft", "frog", "woods", "cox", "production", "row", "story", "oo", "mont", "flight", "innie", "poor", "yellow", "phone", "city", "western", "mun", "wn", "rog", "ren", "byn", "cong", "tty", "gold", "hall", "smith", "money", "tower", "world", "rowd", "mint", "fighters", "zech", "won", "night", "ok", "four", "fort", "citizens", "nation", "wolf", "ten", "nuts", "ople", " towns", "weather", "bo", "ville", "blue", "ston", "rown", "folk", "Town", "craft", "down", "ox", "crew", "yo"], "i": ["q", "I", "ix", "ex", "ri", "phi", "gi", "zi", "iu", "hi", "ei", "l", "chain", "ip", "ji", "ati", "fi", "li", "id", "v", "ij", "ini", "ai", "ki", "im", "ind", "qi", "a", "ori", "index", "b", "init", "u", "io", "j", "bi", "it", "ui", "is", "ie", "status", "pi", "ti", "ic", "ci", "c", "sim", "yi", "cli", "multi", "info", "gu", "y", "oi", "xi", "ii", "iri", "si", "di", "x", "mi"], "nextInt": ["NextInteger", " nextStr", "Nextint", "randFloat", "nextFloat", "nextStr", "NextString", "randString", "nextInteger", "NextLong", "randInteger", " nextFloat", " nextLong", "randInt", "randLong", " nextString", "nextString", "currentFloat", "nextint", " nextINT", "currentStr", "nextINT", "currentInt", "currentINT", "NextInt", " nextint", " nextInteger", "NextFloat", "NextStr", "NextINT", "randint", "nextLong"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint N = sc.nextInt();\\n\t\tint K = sc.nextInt();\\n\t\tString S = sc.next();\\n\\n\t\tString[] resultArray = S.split(\"\");//[2]\\n\\n\t\tfor (int i = 0; i < K - 1; i++) {\\n\\n\t\t\tSystem.out.print(resultArray[i]);\\n\t\t}\\n\\n\t\tSystem.out.print(resultArray[K-1].toLowerCase());\\n\\n\t\tfor (int i = K ; i < N; i++) {\\n\\n\t\t\tSystem.out.print(resultArray[i]);\\n\t\t}\\n\\n\t\tsc.close();\\n\t}\\n\\n}", "target": "71", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "anc", "esc", "sec", "cl", "sh", "cr", "bc", "sv", "sp", "inc", "dc", "ctl", "cle", "sch", "sw", "fc", "sync", "tc", "ctrl", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "c", "osc", "cmp", "Sc", "gc", "ng", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "N": ["D", "I", "Z", "Node", "F", "E", "n", "O", "G", "P", "T", "NL", "R", "NS", "Q", "NR", "V", "M", "H", "C", "L", "J", "X", "NN", "NT", "B"], "K": ["Z", "I", "D", "F", "E", "Kind", "KA", "KS", "O", "G", "KI", "P", "T", "R", "Q", "V", "M", "H", "C", "k", "KR", "L", "J", "PK", "X", "B"], "S": ["I", "F", "SI", "E", "SN", "TS", "SM", "SA", "G", "SE", "P", "T", "SU", "R", "NS", "A", "V", "M", "Si", "W", "BS", "IS", "RS", "H", "C", "U", "L", "SS", "GS", "SER", "X", "s", "SB", "ST", "B"], "resultArray": ["ResultArray", "ResultList", " resultAt", "resultsArray", " resultList", "resultsList", "ResultAt", "resultList", "resultsAt", "resultAt"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tString[] W = new String[N];\\n\\n\t\tfor(int i=0; i<N; i++) {\\n\t\t\tW[i] = sc.next();\\n\t\t}\\n\\n\t\tint judge1 = 0;\\n\\n\t\tfor(int j=0; j<N-1; j++) {\\n\t\t\tchar c1 = W[j].charAt(W[j].length()-1);\\n\t\t\tchar c2 = W[j+1].charAt(0);\\n\\n\t\t\tif(c1 == c2) {\\n\t\t\t\tjudge1 += 1;\\n\t\t\t}\\n\t\t}\\n\\n\t\tint judge2 = 0;\\n\\n\t\tfor(int k=0; k<N-1; k++) {\\n\t\t\tfor(int l=1; l<N-k; l++) {\\n\t\t\t\tif(W[k].equals(W[k+l])) {\\n\t\t\t\t\tjudge2 += 1;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t}\\n\\n\t\tif(judge1 == N-1 && judge2 == 0) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\\n\t}\\n\\n}", "target": "70", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "inc", "nl", "ctl", "capt", "sel", "src", "sch", "sw", "sync", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "N": ["D", "I", "Z", "TN", "F", "FN", "ND", "NM", "SIZE", "SN", "ALL", "NE", "NP", "NB", "n", "NV", "G", "S", "Ni", "NG", "P", "IN", "REM", "NO", "T", "NL", "R", "NS", "MAN", "NR", "V", "NH", "M", "None", "AN", "MN", "GN", "NC", "C", "Sn", "NN", "Num", "NA", "L", "K", "J", "NOR", "Net", "NOTE", "UNE", "NI", "NT"], "W": ["WB", "F", "B", "WM", "Array", "BW", "WA", "WC", "OW", "CW", "Ws", "WT", "MW", "GV", "Widget", "G", "SW", "WH", "P", "S", "WE", "EW", "Writer", "Windows", "VW", "V", "M", "Web", "WP", "WW", "NW", "H", "Wh", "C", "AM", "RW", "WS", "Query", "L", "We", "w", "Watch", "WAR", "VS", "HTML", "WR", "DW"], "i": ["q", "I", "ix", "ri", "phi", "hi", "zi", "iu", "chain", "ip", "li", "n", "ini", "err", "batch", "print", "ai", "im", "qi", "ori", "us", "init", "io", "ir", "bi", "it", "um", "ui", "is", "ie", "uri", "pi", "inner", "ti", "ic", "ci", "sim", "PI", "multi", "iter", "info", "ami", "y", "iri", "xi", "ii", "si", "di", "mi"], "judge1": ["judage2", "judage0", "judage1", "judge01", "judage01", "judg2", "Judage001", "judage001", "judging0", "judgeOne", " judgerOne", "gearger01", "judger2", "Judage1", "judgedOne", "Judge2", "judice0", "judg001", "gearger1", "gearger2", "judging1", "judge10", "judged0", "Judge001", "gearge10", "judged1", "judger001", "judice2", "judgingOne", "Judage2", "judice001", "gearge1", "judging001", "judg1", "gearger10", " judger0", "judgerOne", " judgeOne", "judg0", " judger1", "Judge1", "gearge2", "judice1", "judice10", "judice01", "Judage0", " judge0", "judger10", "judger01", "gearge01", "judged001", "Judge0", "judger0", "judage10", "judge001", "judger1", "judge0", " judge001", " judger001"], "j": ["br", "q", "jac", "jit", "pt", "att", "jl", "ji", "jj", "jo", "adj", "n", "ij", "jump", "jas", "bs", "ret", "ja", "im", "ind", "str", "bj", "b", "note", "oj", "job", "z", "left", "it", "pr", "uj", "g", "off", "json", "js", "aj", "obj", "jp", "bo", "out", "J", "fr", "kj", "y", "jc", "jack", "je", "x", "dj"], "c1": ["lc0", "cuone", "charOne", "lc81", "gc1", "gc0", "c81", "c71", "char71", " cOne", "cone", "lcOne", "c3", "lc71", "char1", "char3", "cu81", "cu1", "cu0", "lc3", "gc81", "cOne", "lcone", " c71", "lc1", "gcone", "c0", " c3"], "c2": ["lc0", " cpl", "ctwo", "Ctwo", "cptwo", "cp2", "lc2", "C1", "lc02", "lc1", "cpl", "C02", " ctwo", " c02", "Cpl", " c0", "cp1", "C0", "C2", "c02", "c0", "cppl"], "judge2": ["judage2", "judage0", "judger02", "judgate2", "suitne1", "judage02", "badge12", "judge12", "suitne02", "judging0", "suitne2", "judging12", "judGETwo", "judne1", "judageTwo", "suitge02", "judger2", "judgate12", "badage12", "judgedTwo", "bragateTwo", "badge02", "judGE1", "bragate12", "bragate2", "badage2", "judgate42", "judger12", "judage12", "badge0", "suitgeTwo", "suitneTwo", "judged02", "judged1", "badge2", "badage02", "brage12", "judging2", "judage42", "suitge2", "bragate42", "suitge1", "judneTwo", "judne02", "judGE2", "judgateTwo", "brage2", "badage0", "judGE02", "brageTwo", "judne2", "judge42", "judgeTwo", "judging02", "judger0", "judged2", "judge0", "judger42", "brage42", "judge02", "judgerTwo"], "k": ["q", "ke", "ask", "key", "d", "wk", "ikk", "kl", "kh", "kr", "m", "n", "v", "dk", "tk", "km", "ck", "ko", "kn", "ak", "unk", "kar", "ki", "ik", "kk", "uk", "u", "kick", "z", "mk", "ark", "g", "ick", "ok", "ek", "ku", "sk", "isk", "K", "w", "t", "UK", "ac", "kt", "kj", "p", "ka", "ijk", "tek", "kit", "kw", "x", "kid", "kg"], "l": ["lt", "dl", "il", "lc", "ll", "el", "hl", "len", "kl", "li", "pl", "h", "yl", "lp", "m", "v", "err", "al", "nl", "lo", "ql", "lb", "le", "lit", "lay", "lin", "list", "sl", "ls", "la", "ml", "left", "z", "lv", "fl", "ul", "ell", "L", "tl", "ln", "dL", "ld", "lan", "jl", "lu"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    long a = sc.nextLong();\\n    long b = sc.nextLong();\\n    long c = sc.nextLong();\\n    long d = sc.nextLong();\\n    \\n    long ans = a * c > a * d ? a * c : a * d;\\n    ans = b * c > ans ? b * c : ans;\\n    ans = b * d > ans ? b * d : ans;\\n    \\n    System.out.println(ans);\\n  }\\n}", "target": "244", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "sv", "sp", "bc", "cr", "inc", "dc", "ck", "ec", "ko", "ctl", "sch", "sw", "fc", "sync", "tc", "ctrl", "scan", "sq", "cont", "cs", "sci", "nc", "osc", "Sc", "gc", "scl", "asc", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "ch"], "a": ["ae", "r", "ca", "ar", "oa", "ta", "aa", "app", "sa", "al", "ai", "act", "at", "A", "ia", "an", "la", "ga", "ao", "ab", "pa", "ea", "area", "aff", "ba", "aaa", "ach", "aj", "e", "alpha", "ap", "as", "ma", "p", "ac", "era", "au", "va", "am"], "b": ["br", "r", "xb", "wb", "beta", "sb", " B", "ob", "l", "mb", "o", "bar", "bc", "v", "n", "bf", "gb", "db", "by", "bl", "bp", "lib", "back", "f", "bd", "eb", "an", "fb", "z", "j", "bi", "it", "ib", "nb", "ab", "i", "g", "ba", "bis", "e", "s", "p", "bb", "cb", "y", "be", "rb", "erb", "B"], "c": ["uc", "r", "ca", "lc", "col", "cc", "anc", "dec", "cur", "ar", "con", "_", "l", "co", "cf", "bc", "cr", "n", "ce", "cp", "unc", "dc", "cap", "ec", "cn", "cu", "enc", "f", "fc", "tc", "z", "cat", "ctrl", "cd", "C", "cs", "cm", "ic", "ci", "com", "cmp", "e", "ct", "x", "s", "p", "ac", "cb", "rc", "ch"], "d": ["dh", "D", "dat", "r", "end", "dec", "dm", "dim", "df", "l", "dd", "dos", "o", "del", "did", "de", "id", "n", "m", "da", "ad", "db", "rd", "dc", "dn", "dk", "v", "dr", "du", "sd", "back", "f", "bd", "u", "z", "dist", "dx", "data", "g", "done", "ds", "e", "w", "diff", "t", "s", "p", "dir", "dis", "ld", "den", "dt", "di", "x", "dp"], "ans": ["uns", "ons", "ras", "izes", "reads", "anks", "flags", "anners", "ends", "ands", "os", "uds", "ms", "ANS", "ats", "ens", "ts", "aps", "ins", "as", "actions", "xs", "lan", "offs", "ars", " scans", "ints", "vals", "un", "rs", "anas", "marks", "ns", "ads", "asks", "ks", "ags", "angs", "anes", "ups", "cons", "posts", "cas", "ps", "nets", "aus", "oss", "eds", "beans", "ians", "amps", "ants", "inks", "ls", "an", "ays", "mas", "orts", "arms", "ds", "ots", "rans", "outs", "ann", "gs", " means", " Ans", "ents", "eps", "con", "helps", "missions", "yes", "ids", "arts", "any", "us", "es", "ows", "uploads", "vs", "aos", " spans", "olds", "ions", "ics", "lets"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tFastScanner sc = new FastScanner();\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n\t\tint d = sc.nextInt();\\n\t\tint e = sc.nextInt();\\n\t\tint k = sc.nextInt();\\n\t\tif (e-a > k)\\n\t\t\tSystem.out.println(\":(\");\\n\t\telse\\n\t\t\tSystem.out.println(\"Yay!\");\\n\\n\t}\\n\t//\u4ee5\u4e0b\u3001\u81ea\u4f5c\u30e9\u30a4\u30d6\u30e9\u30ea\\n\\n\t//\u6700\u5927\u516c\u7d04\u6570\\n\tpublic static long gcd(long a, long b) {\\n\t\tif (a < b)\\n\t\t\treturn gcd(b, a);\\n\t\tlong c = 0;\\n\t\tc = a % b;\\n\t\tif (c == 0)\\n\t\t\treturn b;\\n\t\treturn gcd(b, c);\\n\t}\\n\\n\t//\u6700\u5c0f\u516c\u500d\u6570\\n\tpublic static long lcm(long m, long n) {\\n\t\treturn m * n / gcd(m, n);\\n\t}\\n\\n\t//\u7d20\u6570\u5224\u5b9a\\n\tpublic static boolean isPrime(int n) {\\n\t\tif (n < 2)\\n\t\t\treturn false;\\n\t\tif (n == 2)\\n\t\t\treturn true;\\n\t\tif (n % 2 == 0)\\n\t\t\treturn false;\\n\\n\t\tfor (int i = 3; i * i <= n; i += 2) {\\n\t\t\tif (n % i == 0)\\n\t\t\t\treturn false;\\n\t\t}\\n\t\treturn true;\\n\t}\\n}\\n\\n//\u4ee5\u4e0b\u3001\u9ad8\u901f\u30b9\u30ad\u30e3\u30ca\u30fc\u30af\u30e9\u30b9\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "66", "substitutes": {"sc": ["usc", "lc", "cc", "esc", " SC", "sec", "co", "cgi", "cl", "sys", "sh", "sv", "cr", "sp", "bc", "inc", " scr", "dc", "comm", "ec", "ctl", "ck", "cle", "irc", "sch", "fc", "sync", "tc", "ctrl", "sq", " Sc", "cont", "cs", "nc", "pb", "osc", "cmp", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "psc", "ch", "desc"], "a": ["ae", "r", "ca", "ar", "oa", "o", "ta", "n", "m", "aa", "sta", "sa", "ak", "ai", "art", "A", "at", "f", "ia", "u", "an", "ao", "ab", "i", "ea", "pa", "g", "ba", "ada", "ma", "t", "as", "p", "ac", "s", "va", "x", "am"], "b": ["r", "l", "o", "bc", "v", "n", "aa", "db", "f", "eb", "j", "bi", "ab", "i", "g", "ba", "p", "bb", "cb", "y", "be", "rb", "x", "B"], "c": ["ae", "r", "ca", "col", "cc", "l", "bc", "v", "n", "cp", "ce", "dc", "ec", "f", "cd", "ab", "C", "cs", "cm", "ci", "ct", "p", "ac", "cb", "cf"], "d": ["D", "r", "l", "dd", "de", "id", "n", "m", "ad", "da", "db", "dc", "v", "f", "u", "cd", "dx", "data", "g", "ds", "w", "t", "p", "di"], "e": ["ae", "r", "elt", "end", "ee", "E", "el", "ei", "l", "h", "ep", "de", "v", "n", "m", "ce", "me", "pe", "ec", "le", "ef", "se", "f", "eb", "es", "ue", "ed", "i", "g", "eu", "en", "ek", "w", "t", "er", "p", "s", "te", "ev", "x", "eeee"], "k": ["q", "num", "r", "ke", "key", "kl", "o", "zero", "ks", "n", "m", "v", "kr", "dk", "ck", "kn", "ak", "ki", "ik", "kk", "f", "u", "z", "j", "mk", "i", "g", "ok", "ek", "max", "K", "p", "kj", "ka", "kw", "x"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String args[]) {\\n        Scanner sc = new Scanner(System.in);\\n        \\n\\n        int n = sc.nextInt();\\n        int[] A = new int[n];\\n        for(int i =0; i < n; i++){\\n            A[i] = sc.nextInt();\\n        }\\n         \\n\\n         int[] help = new int[n];\\n         help[0] = A[0];\\n         for(int i = 1; i < n; i++){\\n            if(A[i-1] >= A[i] )\\n               help[i] = help[i-1];\\n\\n            else if(A[i] > A[i-1] && A[i] > help[i-1])\\n               help[i] = A[i];\\n             else if(A[i] > A[i-1] && A[i] < help[i-1])\\n               help[i] = help[i-1];\\n         }\\n         long minH = 0L;\\n         for(int j = 0; j < n; j++){\\n             minH += Math.abs(A[j] - help[j]);\\n         }\\n         System.out.println(minH);\\n    }\\n}", "target": "202", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "cr", "bc", "sv", "sp", "nl", "capt", "ctl", "cle", "sel", "src", "sch", "Desc", "sw", "se", "sync", "tc", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "screen", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch"], "n": ["num", "nu", "r", "d", "ll", "nn", "number", "l", "un", "len", "nr", "N", "o", "ns", "and", "m", "v", "nan", "ne", "nl", "cn", "ni", "sn", "count", "an", "z", "no", "nb", " N", "g", "na", "nc", "fn", "np", "pi", "nv", "en", "c", "nw", "none", "nm", "ng", "t", "p", "network", "nor", "ln", "net", "size", "all", "nt", "x"], "A": ["I", "AA", "Helper", "RAM", "F", "Array", "App", "AU", "Alpha", "CA", "AY", "Action", "ANG", "N", "AE", "ALL", "WA", "UA", "AC", "All", "HA", "At", "As", "G", "SA", "ASC", "S", "P", "Ar", "ACE", "T", "IA", "R", "a", "Access", "GA", "V", "LA", "JA", "M", "Help", "API", "This", "What", "AV", "AL", "H", "C", "AP", "AM", "U", "AB", "An", "AAA", "Available", "L", "AR", "J", "EA", "X", "Answer", "Args", "Ass", "AD", "BA", "AF", "ACT", "Assistant", "B", "AT"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "ai", "ki", "f", "is", "ic", "parent", "ami", "y", "oi", "di", "x", "ri", "fi", "l", "chain", "ip", "ji", "point", "id", "asi", "ij", "in", "client", "ori", "io", "bi", "it", "um", "g", "ci", "sim", "cli", "ii", "ex", "phi", "hi", "print", "ni", "ind", "list", "u", "\u0438", "status", "pi", "my", "xi", "si", "mi", "I", "name", "key", "gi", "v", "m", "ini", "im", "qi", "index", "us", "load", "init", "ity", "ui", "ie", "uri", "ti", "multi", "t", "info", "iter", "to"], "help": ["ping", "work", "alert", "shift", "align", "admin", "tip", "show", "f", "Help", "history", "math", "comment", "H", "data", "handle", "all", "x", "util", "review", "description", "hl", "l", "error", "best", "h", "sh", "summary", "doc", "a", "view", "sort", "g", "success", "good", "use", "diff", "label", "reason", " HELP", "config", "health", "version", "tree", "value", "important", "print", "hel", "hard", "list", "type", "u", "mem", "how", "menu", "status", "html", "out", "p", "see", "support", "dl", "replace", "helps", " Help", "v", "wait", "msg", "update", "where", "index", "search", "about", "alias", "usage", "api", "display", "L", "check", "info", "warning", "command"], "minH": ["MINL", "miniNH", "MinH", "minB", "miniL", "maxL", "MINMH", "MinG", " minR", "minL", "minNH", "MINW", " minL", "miniG", "MINH", "miniH", "maxW", "minW", " minMH", "maxH", "minG", "MinR", " minG", " minNH", "MinNH", "MINR", "MinL", "MINB", "maxMH", " minB", " minW", "minR", "MinB", "minMH"], "j": ["br", "q", "jac", "ix", "jit", "pt", "og", "key", "att", "jl", "ji", "jj", "h", "jo", "kh", "ij", "v", "jump", "jas", "ne", "ja", "bj", "b", "oj", "job", "z", "it", "ie", "g", "uj", "json", "k", "js", "obj", "aj", "jp", "J", "ot", "fr", "ph", "ng", "exp", "kj", "y", "jc", "jack", "ijk", "x", "dj"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\npublic class Main\\n{\\n    public static void main(String []args) throws IOException {\\n    \tFastScanner in  = new FastScanner(System.in);\\n    \tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), false); \\n    \tsolve(in, out);\\n    \tin.close();\\n    \tout.close();\\n    }\\n    static long gcd(long a, long b){ return (b==0) ? a : gcd(b, a%b); }\\n    static int gcd(int a, int b){ return (b==0) ? a : gcd(b, a%b); }\\n    static class FastScanner{\\n\tBufferedReader reader;\\n\tStringTokenizer st;\\n\tFastScanner(InputStream stream){reader=new BufferedReader(new InputStreamReader(stream));st=null;}\t\\n\tString next(){while(st == null || !st.hasMoreTokens()){try{String line = reader.readLine();if(line == null){return null;}\t\t    \\n\t     st = new StringTokenizer(line);}catch (Exception e){throw new RuntimeException();}}return st.nextToken();}\\n\tString nextLine()  {String s=null;try{s=reader.readLine();}catch(IOException e){e.printStackTrace();}return s;}\t    \t  \t\\n\tint    nextInt()   {return Integer.parseInt(next());}\\n\tlong   nextLong()  {return Long.parseLong(next());}\t\t\\n\tdouble nextDouble(){return Double.parseDouble(next());}\\n\tchar   nextChar()  {return next().charAt(0);}\\n\tint[]  nextIntArray(int n)         {int[] arr= new int[n];   int i=0;while(i<n){arr[i++]=nextInt();}  return arr;}\\n\tlong[] nextLongArray(int n)        {long[]arr= new long[n];  int i=0;while(i<n){arr[i++]=nextLong();} return arr;}\t\\n\tint[]  nextIntArrayOneBased(int n) {int[] arr= new int[n+1]; int i=1;while(i<=n){arr[i++]=nextInt();} return arr;}\t    \t\\n\tlong[] nextLongArrayOneBased(int n){long[]arr= new long[n+1];int i=1;while(i<=n){arr[i++]=nextLong();}return arr;}\t    \t\\n\tvoid   close(){try{reader.close();}catch(IOException e){e.printStackTrace();}}\t\t\t\t\\n    }\\n    \\n    /********* SOLUTION STARTS HERE ************/\\n    \\n    private static void solve(FastScanner in, PrintWriter out){\\n        \\n        int T = 1;//in.nextInt();\\n        for(int t = 1; t <= T; t++)\\n        {\\n            int n = in.nextInt();\\n            String s = in.next().trim();\\n            String p = in.next().trim();\\n            char ch[] = new char[2*n];\\n            int pt = 0;\\n            for(int i=0;i<n;i++){\\n                ch[pt] = s.charAt(i);\\n                ch[pt+1] = p.charAt(i);\\n                pt+=2;\\n                // char ch = \\n                // out.write((char)s.charAt(i)+(char)p.charAt(i)+\"\");\\n            }\\n            out.write(new String(ch)+\"\\n\");\\n        }\\n    }\\n    \\n    /************* SOLUTION ENDS HERE **********/\\n}", "target": "200", "substitutes": {"in": ["r", "mm", "gin", "bin", "inf", "from", "con", "l", "sol", " din", "isin", "rt", "inc", "sin", "ini", "err", "source", "inn", "rin", "file", "IN", "print", "run", "ind", "lin", "on", "In", "init", "io", "it", "din", "is", "thin", "inner", "ner", "lock", "en", "ins", "input", "t", "cin", "info", "er", "iter", "ln", "p"], "out": ["ou", "ex", "name", "outer", "end", "con", "writer", "error", "co", "sys", "o", "put", "log", "console", "v", "ch", "err", "OU", "print", "OUT", "file", "os", "write", "client", "str", "at", "io", "it", "aos", "Out", "null", "cmd", "inner", "output", "w", "ot", "t", "p", "info", "net", "all", "to", "nt", "res", "outs", "window"], "a": ["ae", "r", "ca", "d", "ar", "aq", "l", "oa", "o", "ta", "m", "aa", "sa", "al", "val", "A", "index", "f", "ia", "u", "an", "la", "z", "ao", "ga", "xa", "ab", "ea", "area", "g", "ba", "aaa", "ach", "c", "aj", "e", "alpha", "ma", "t", "p", "ac", "bb", "y", "au", "va", "x", "am"], "b": ["br", "r", "d", "wb", "beta", "sb", "ob", "l", "base", "o", "h", "bc", "v", "m", "bf", "db", "ch", "gb", "bs", "lb", "bp", "back", "f", "bd", "eb", "reb", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "g", "ba", "length", "k", "bg", "bt", "c", "e", "w", "t", "p", "bb", "cb", "y", "be", "rb", "x", "B"], "reader": ["loader", "rr", "wrapper", "r", "ri", "driver", "rar", "row", "rier", "writer", "rs", "builder", "ser", "dr", "rd", "tr", "finder", "read", "context", "ro", "file", "handler", "mr", "client", "Reader", "runner", "ry", "rot", "lr", "buffer", "io", "parser", "rer", "rl", "inner", "ptr", "ner", "iterator", "txt", "e", "fr", "older", "er", "iter", "rx", "rc"], "st": ["set", "stop", "stage", "pt", "wt", "l", "sth", "rt", "sh", "usr", "sv", "sp", "tmp", "dr", "tr", "sta", "tt", "stat", "ste", "St", "stri", "sw", "ut", "str", "start", "se", "ist", "sl", "inst", "const", "ost", "stack", "sts", "sty", "sc", "struct", "ts", "est", "rest", "ss", "et", "ast", "irst", "bt", "std", "mt", "ct", "storage", "t", "nd", "ST", " est", "stable", "th", "net", "ust", "nt", "first"], "stream": ["next", "row", "v", "console", "context", "source", "read", "ream", "path", "file", "form", "str", "buffer", "test", "stack", "pipe", "string", "null", "message", "cont", "data", "inner", "window", "channel", "Stream", "input", "iterator", "output", "sample", "pool", "socket", "proc"], "line": ["valid", "block", "Line", "row", "l", "inline", "entry", "part", "chain", "point", "stroke", "train", "me", "word", "source", "nl", "detail", "file", "cell", "lines", "le", "str", "lin", "se", "phrase", "buffer", "sequence", "frame", "string", "comment", "message", "LINE", "text", "data", "piece", "record", "online", "eline", "body", "sample", "e", "liner", "link", "port", "ln", "page", "column", "ine", "next"], "s": ["set", "gs", "r", "sb", "l", "rs", "h", "ns", "uts", "ws", "bs", "S", "os", "csv", "its", "ms", "lines", "ys", "sw", "ats", "str", "se", "fs", "es", "ls", "j", "sts", "is", "ts", "sq", "cs", "ss", "js", "ds", "t", "p", "qs", "ps"], "n": ["num", "nu", "name", "d", "ll", "nn", "l", "number", "un", "len", "nr", "N", "nil", "ns", "node", "m", "v", "ne", "nan", "nl", "cn", "ni", "nat", "le", "sn", "count", "an", "z", "j", "it", "no", "nb", "g", "na", "nc", "fn", "np", "ic", "en", "c", "nw", "none", "nm", "w", "t", "ng", "p", "ln", "net", "all", "size", "nt", "x", "names"], "arr": ["br", "dat", "rr", "r", "ix", "elt", "acc", "coll", "ray", "Array", "ax", "att", "row", "array", "ar", "var", "ais", "task", "sys", "py", "dr", "app", "aa", "err", "db", "ait", "msg", "batch", "bl", "doc", "tr", "attr", "Ar", "arg", "dict", "enc", "act", "buf", "ang", "list", "load", "stack", "j", "par", "mk", "rest", "vol", "aaa", "arb", "good", "rel", "obj", "js", "my", "aj", "ig", "fr", "exp", "asc", "iq", "ARR", "au", "expr", "all", "bar", "ev", "gr", "aug", "map"], "i": ["I", "ix", "phi", "gi", "zi", "iu", "hi", "ei", "l", "base", "ip", "fi", "o", "li", "v", "ij", "me", "ini", "ni", "ai", "im", "ori", "qi", "index", "us", "u", "io", "j", "bi", "it", "ui", "ie", "is", "status", "pi", "ti", "ic", "ci", "sim", "cli", "e", "multi", "info", "ami", "y", "oi", "ii", "xi", "si", "di", "mi"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint[][] c = new int[3][3];\\n\t\tString ans = \"No\";\\n\t\t\\n\t\tfor(int i=0; i<3; i++){\\n\t\t    for(int j=0; j<3; j++){\\n\t\t        c[i][j] = sc.nextInt();\\n\t\t    }\\n\t\t}\\n\t\t\\n\t\tif(c[0][2]-c[0][1] == c[1][2]-c[1][1] && c[1][2]-c[1][1] == c[2][2]-c[2][1]){\\n\t\t    if(c[0][1]-c[0][0] == c[1][1]-c[1][0] && c[1][1]-c[1][0] == c[2][1]-c[2][0]){\\n\t\t        if(c[2][0]-c[1][0] == c[2][1]-c[1][1] && c[2][1]-c[1][1] == c[2][2]-c[1][2]){\\n\t\t            if(c[1][0]-c[0][0] == c[1][1]-c[0][1] && c[1][1]-c[0][1] == c[1][2]-c[0][2]){\\n\t\t                ans = \"Yes\";\\n\t\t            }\\n\t\t        }\\n\t\t    }\\n\t\t}\\n      \tSystem.out.println(ans);\\n    }\\n}", "target": "88", "substitutes": {"sc": ["usc", "uc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "ser", "bc", "sv", "sp", "cr", "inc", "nl", "ec", "sel", "sch", "sync", "tc", "scan", "si", "sq", " Sc", "cs", "sci", "ss", "nc", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "ch", "desc", "sub"], "c": ["uc", "r", "d", "cr", "bc", "n", "cand", "f", "comp", "cm", "cod", "ic", "com", "conf", "e", "ac", "y", "rc", "pc", "cf", "x", "col", "cc", "cur", "l", "chain", "co", "o", "ce", "comm", "cam", "cms", "count", "code", "cat", "cv", "cs", "g", "nc", "k", "ci", "cb", "mac", "mc", "config", "lc", "anc", "lib", "cache", "u", "cd", "cont", "ct", "etc", "p", "ch", "ca", "cal", "con", "cl", "v", "cp", "m", "dc", "ec", "csv", "cu", "enc", "b", "fc", "tc", "ed", "C", "vc", "gc", "t"], "ans": [" orphans", " means", " Ans", "uns", "ents", "ros", "aus", "rs", "urs", "anks", "eds", "ns", "helps", "ks", "ads", "uts", "asms", "irms", "ends", " rs", " warns", " os", "yes", "ms", "arts", "ANS", " nos", "ats", "ens", "ants", "amps", "ags", "ls", "an", "ols", "angs", "ays", "vs", "prints", "is", "ts", " spans", " scans", "cs", "utters", "ins", "aps", "ds", "arms", "des", "aints", "s", "posts", "xs", " says", "offs", "ars", "ann"], "i": ["I", "r", "ix", "ex", "name", "ri", "phi", "iu", "l", "ip", "li", "o", "id", "v", "m", "ij", "me", "ini", "in", "batch", "this", "print", "ai", "im", "ind", "inter", "us", " ii", "u", "init", "ims", "bi", "it", "ui", "is", "ie", "pi", "k", "ti", "ic", "ci", "sim", "yi", "my", "multi", "iq", "iter", "ami", "y", "xi", "ii", "si", "di", "x", "mi"], "j": ["br", "q", "pt", "key", "el", "ji", "jj", "h", "jo", "ij", "son", "jump", "jas", "batch", "ja", "im", "ind", "str", "bj", "b", "oj", "job", "on", "z", "it", "pr", "child", "g", "uj", "json", "k", "js", "aj", "obj", "jp", "J", "out", "fr", "other", "ng", "kj", "y", "jc", "dj", "x", "kid", "jl", "next"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String args[]){\\n        Scanner sc = new Scanner(System.in);\\n        char alphabet[] = new char[26];\\n\\n        char c = 'a';\\n\\n        for(int i = 0; i < 26; i++){\\n            alphabet[i] = c++;\\n        }\\n\\n        long n = sc.nextLong();\\n\\n        List<Integer> list = new ArrayList<>();\\n\\n        int k = 0;\\n        while(true){\\n            k++;\\n            long p = n % 26;\\n\\n            if(p == 0) {\\n                list.add(26);\\n                if((n / 26) - 1 == 0){\\n                    break;\\n                }\\n                n = (n / 26) - 1;\\n            }else{\\n                list.add((int)p);\\n                if(n / 26 == 0){\\n                     break;\\n                }\\n                n /= 26;\\n            }\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n\\n        for(int j = 0; j < k ; j++){\\n            sb.append(alphabet[list.get(j) - 1]);\\n        }\\n\\n        System.out.println(sb.reverse());\\n\\n    }\\n}\\n", "target": "191", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "Scan", "ser", "bc", "sv", "sp", "cr", "nl", "ec", "sel", "sch", "sw", "sync", "scan", "sq", "cs", "ss", "nc", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "alphabet": ["phabetic", "palphabet", "chet", "alphbet", "alphaton", "chphabet", "charator", "palaton", "alphet", "palabetic", "alphator", "alphabetic", "homabet", "alphaabet", "homabetic", "alphaphabet", "hombet", "alet", "alabet", "alphaaton", "albet", "alphaabetic", "palabet", "charphabet", "homphabet", "alaton", "chator", "phbet", "charet", "phabet", "alphphabet", "phphabet", "chabet", "alabetic", "alator", "charabet"], "c": ["arc", "uc", "r", "lc", "ca", "d", "con", "l", "h", "m", "v", "unc", "ce", "dc", "ec", "cu", "a", "b", "fc", "f", "u", "tc", "C", "cs", "g", "abc", "ic", "ci", "ct", "w", "gc", "t", "ac", "conv"], "i": ["I", "ix", "phi", "gi", "zi", "iu", "hi", "l", "ip", "li", "me", "ini", "ai", "ms", "ki", "im", "qi", "a", "us", "init", "io", "ims", "bi", "it", "ui", "is", "ie", "uri", " I", "pi", "you", "ti", "ic", "ci", "sim", "cli", "PI", "uci", "multi", "info", "gu", "iter", "y", "oi", "xi", "ii", "si", "di", "mi"], "n": ["num", "nu", "mn", "pn", "name", "d", "nn", "current", "l", "un", "number", "len", "N", "o", "gn", "ns", "node", "v", "m", "dn", "ne", "nan", "nl", "cn", "ren", "sn", "note", "on", "an", "z", "no", "nb", "g", "na", "fn", "nc", "np", "en", "nw", "none", "nm", "ng", "t", "network", "ln", "y", "net", "all", "nt", "names", "next"], "list": ["set", "block", "dl", "next", "ll", "array", "l", "number", "li", "log", "tree", "lp", "spe", "source", "stat", "batch", "level", "detail", "print", "LIST", "lat", "dict", "write", "lists", "shape", "index", "code", "note", "ist", "collection", "test", "view", "left", "sequence", "stack", "sort", "range", "null", "listed", "status", "see", "lv", "table", "L", "link", "out", "def", "info", "parent", "add", "net", "all", "st", "map"], "k": ["q", "ke", "ask", "key", "l", "kl", "o", "id", "ks", "m", "v", "kr", "dk", "km", "kh", "tk", "ck", "ko", "unk", "ak", "kn", "kar", "ki", "ik", "kk", "ack", "z", "mk", "ark", "ek", "sk", "K", "t", "x", "kind", "kj", "ka", "kw", "kid"], "p": ["q", "pn", "post", "ping", "d", "pm", "l", "ip", "part", "tp", "o", "h", "perm", "pl", "v", "lp", "m", "cp", "rep", "pe", "power", "bp", "P", "pp", " P", "fp", "b", "z", "par", "pr", "pa", "pi", "np", "pad", "jp", "ph", "ap", "t", "ps", "pc", "x"], "sb": ["BB", "xb", "sf", "wb", "sg", "mb", "ob", "sth", "bsp", "sh", "bc", "sp", "zb", "lp", "gb", "bh", "bf", "stab", "sa", "bs", "lb", "zeb", "ub", "gob", "bj", "b", "eb", "bd", "fb", "ib", "nb", "sq", "pb", "bg", "bt", "ssh", "rob", "kb", "obb", "bb", "cb", "SB", "rb", "erb", "umb", "abb"], "j": ["br", "q", "ix", "jit", "og", "key", "att", "ev", "jl", "ji", "jj", "h", "jo", "v", "ij", "m", "kh", "err", "jump", "jas", "msg", "ja", "ind", "bj", "b", "oj", "on", "job", "yy", "z", "Ja", "ie", "pr", "g", "uj", "json", "js", "obj", "aj", "jp", "J", "fr", "kj", "y", "jc", "je", "x", "dj", "next"]}}
{"code": "import java.util.*;\\nimport java.lang.*;\\n\\npublic class Main{\\n\\n    public static void solve(long s , long w){\\n        if(w >= s){\\n            System.out.println(\"unsafe\");\\n        }else{\\n            System.out.println(\"safe\");\\n        }\\n    }\\n\\n    public static void gora(){\\n        Scanner scn = new Scanner(System.in);\\n\\n        // long test = scn.nextLong();\\n\\n        long s = scn.nextLong();\\n\\n        long w = scn.nextLong();\\n\\n        // long arr[] = new long[n];\\n\\n        // for(int i = 0 ; i < arr.length ; i++){\\n        //     arr[i] = scn.nextLong();\\n        // }\\n\\n        solve(s, w);\\n    }\\n\\n    public static void main(String args[]){\\n        gora();\\n    }\\n}\\n\\n\\n", "target": "177", "substitutes": {"s": ["q", "gs", "aws", "l", "rs", "sol", "h", "ns", "sh", "sv", "n", "m", "v", "ws", "S", "its", "ms", "ys", "sw", "a", "b", "fs", "es", "ls", "u", "ies", "z", "sts", "is", "ts", "sq", "i", "g", "ss", "c", "js", "e", "t", "p", "y", "xs", "ps", "x"], "w": ["q", "wcs", "wx", "work", "wl", "wb", "wt", "weight", "wp", "h", "v", "n", "word", "wi", "ws", "wa", "width", "wal", "sw", "wid", "rw", "W", "win", "hw", "weights", "words", "g", "wr", "nw", "we", "p", "fw", "kw", "window"], "scn": ["scr", "SCr", " scr", "Scn", " scN", "SCN", "SCn", "SCnn", " scnn", "scN", "Scnn", "scnn", "ScN", "Scr"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) throws Exception {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint a[] = new int[n + 1];\\n\t\tint b[] = new int[n + 1];\\n\t\tint c[] = new int[n];\\n\t\tfor (int i = 1; i <= n; ++i)\\n\t\t\ta[i] = sc.nextInt();\\n\t\tfor (int i = 1; i <= n; ++i)\\n\t\t\tb[i] = sc.nextInt();\\n\t\tfor (int i = 1; i < n; ++i)\\n\t\t\tc[i] = sc.nextInt();\\n\t\tsc.close();\\n\t\tlong ans = 0;\\n\t\tint pre = -2, crt = 0;\\n\t\tfor(int i = 1; i <= n; ++i){\\n\t\t\tcrt = a[i];\\n\t\t\tans += b[crt];\\n\t\t\tif(crt == pre + 1)ans += c[pre];\\n\t\t\tpre = crt;\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "223", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "dec", "esc", "anc", "sec", "cl", "sys", "system", "sh", "cr", "sv", "sp", "bc", "inc", "ck", "nl", "ctl", "capt", "cle", "irc", "sch", "sync", "fc", "tc", "scan", "si", "sq", " Sc", "disc", "cs", "sci", "ss", "nc", "pb", "ci", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "scrib", "psc", "ch", "desc", "sub"], "n": ["num", "mn", "r", "nu", "name", "d", "ll", "nn", "nia", "number", "l", "un", "N", "o", "ns", "m", "conn", "v", "ne", "nan", "comm", "nl", "cn", "ni", "ren", "yes", "sn", "count", "on", "an", "None", "z", "j", "no", "nb", " N", "g", "na", "nc", "pi", "np", "k", "en", "none", "nm", "out", "ng", "t", "p", "network", "ln", "net", "all", "nt", "x", "non", "names"], "a": ["ae", "ata", "r", "acs", "att", "ar", "l", "oa", "o", "ta", "aa", "da", "sa", "ai", "A", "at", "f", "u", "an", "la", "ga", "ao", "ab", "ea", "area", "apa", "ba", "aaa", "aj", "alpha", "ap", "ma", "t", "as", "p", "ac", "eas", "s", "au", "va", "am"], "b": ["br", "r", "BB", "bin", "wb", "sb", "el", "ob", "l", "mb", "bc", "gb", "bf", "db", "zb", "bl", "bs", "lb", "bp", "back", "ble", "eb", "bd", "u", "fb", "j", "bi", "ib", "nb", "ab", "ba", "bg", "bt", "bis", "bo", "t", "p", "bb", "cb", "y", "be", "rb", "erb", "B"], "c": ["r", "ca", "lc", "cc", "d", "cos", "l", "co", "o", "cf", "bc", "cr", "ce", "cp", "dc", "ec", "cu", "fc", "u", "xc", "tc", "z", "cd", "C", "cs", "cm", "ic", "ci", "ct", "t", "etc", "p", "s", "cb", "mc", "rc", "ch"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "batch", "eric", "ai", "ki", "iii", "ik", "is", "eu", "ic", "ios", "ami", "oi", "y", "di", "x", "ri", "l", "chain", "ip", "ji", "id", "asi", "ij", "ori", "io", "bi", "it", "g", "ci", "sim", "cli", "ii", "phi", "hi", "through", "cgi", "dr", "ion", "ni", "ind", "ia", "\u0438", "ir", "pi", "gu", "iri", "xi", "si", "mi", "ine", "I", "ico", "gi", "iy", "v", "ini", "err", "wi", "ice", "any", "im", "qi", "us", "init", "ies", "j", "ity", "ui", "ie", "uri", "ti", "isi", "multi", "er", "iter"], "ans": ["ents", "uns", "ons", "eps", "offs", "vals", "pan", "anas", "rs", "anks", "ums", "aus", "aces", "ores", "names", "eds", "ns", "asks", "ks", "ads", "outs", "ces", "ians", "os", "ids", "ms", "lines", "users", "arts", "ANS", "inters", "amps", "ats", "ens", "ants", "ls", "authors", "an", "angs", "aos", "mas", "anes", "ones", "orts", "sets", "ips", "ins", "aps", "ds", "olds", "arms", "as", "posts", "actions", "xs", "rans", "pres", "x", "ars", "ann"], "pre": ["set", "post", "pt", "next", "pen", "before", "pan", "prime", "temp", "cond", "red", "un", "prefix", "reset", "sp", "tmp", "pres", "po", "db", "pret", "tr", "rep", "pe", "pri", "PRE", "cache", "ind", "inter", "ble", "min", "index", "pro", "prev", "j", "par", "pr", "pa", "ptr", "pi", "pad", "ci", "rel", "syn", "none", "jp", "p", "re", "ps", "pc", "to", "Pre", "prep"], "crt": ["CRd", "srp", " crtc", "prp", "rctr", "prdt", "Crf", "prd", "schete", "sratt", "crte", "srtc", "crc", "cratt", "crdt", "schetr", "cartt", "carte", " crtr", "Crc", "crtt", "CRdt", "rct", "rcc", "rcp", "Crtr", "cart", "crd", "schett", " crd", "srt", "prt", "Crt", " crc", "CRte", "prte", " crf", "cartr", "crtr", "schet", "crf", "crtc", " crp", "pratt", "prtt", " crte", " cratt", "prtr", "CRt", "rcf", "prtc", "CRp", "rcdt", "crp", "rcte"]}}
{"code": "import java.io.*;\\nimport java.util.*;\\npublic class Main {\\n    final static long mod = 1000000007;\\n\\n    static void debug(Object...args)\\n    {\\n        System.out.println(Arrays.deepToString(args));\\n    }\\n    public static void main(String[] args) {\\n    InputReader sc = new InputReader(System.in);\\n    PrintWriter pw = new PrintWriter(System.out);\\n    Random gen = new Random();\\n    int test = 1;//sc.nextInt();\\n    while(test-->0) {\\n\\n        int n = sc.nextInt();\\n        char[] ar = sc.nextLine().toCharArray();\\n        long c = 1;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(ar[i]!=ar[i-1])\\n                c++;\\n        }\\n        pw.println(c);\\n\\n    }\\n    pw.flush();\\n    pw.close();\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    static class Data implements Comparable<Data>{\\n        int x;\\n        int y;\\n\\n        public Data (int m, int n) {\\n            x = m;\\n            y = n;\\n        }\\n        @Override\\n        public int compareTo(Data o) {\\n            return y - o.y;\\n        }\\n    }\\n\\n    static class InputReader {\\n\\n        private final InputStream stream;\\n        private final byte[] buf = new byte[8192];\\n        private int curChar, snumChars;\\n\\n        public InputReader(InputStream st) {\\n            this.stream = st;\\n        }\\n\\n        public int read() {\\n            if (snumChars == -1)\\n                throw new InputMismatchException();\\n            if (curChar >= snumChars) {\\n                curChar = 0;\\n                try {\\n                    snumChars = stream.read(buf);\\n                } catch (IOException e) {\\n                    throw new InputMismatchException();\\n                }\\n                if (snumChars <= 0)\\n                    return -1;\\n            }\\n            return buf[curChar++];\\n        }\\n\\n        public int nextInt() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            int res = 0;\\n            do {\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public long nextLong() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            int sgn = 1;\\n            if (c == '-') {\\n                sgn = -1;\\n                c = read();\\n            }\\n            long res = 0;\\n            do {\\n                res *= 10;\\n                res += c - '0';\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res * sgn;\\n        }\\n\\n        public int[] nextIntArray(int n) {\\n            int [] a = new int[n];\\n            for (int i = 0; i < n; i++) {\\n                a[i] = nextInt();\\n            }\\n            return a;\\n        }\\n        public long[] nextLongArray(int n) {\\n            long [] a = new long[n];\\n            for (int i = 0; i < n; i++) {\\n                a[i] = nextLong();\\n            }\\n            return a;\\n        }\\n\\n        public static int[] shuffle(int[] a, Random gen)\\n        { for(int i = 0, n = a.length;i < n;i++)\\n        { int ind = gen.nextInt(n-i)+i;\\n            int d = a[i];\\n            a[i] = a[ind];\\n            a[ind] = d;\\n\\n        }\\n            return a;\\n        }\\n        public static char[] shuffle(char[] a, Random gen)\\n        { for(int i = 0, n = a.length;i < n;i++)\\n        { int ind = gen.nextInt(n-i)+i;\\n            char d = a[i];\\n            a[i] = a[ind];\\n            a[ind] = d;\\n\\n        }\\n            return a;\\n        }\\n\\n\\n        public String readString() {\\n            int c = read();\\n            while (isSpaceChar(c)) {\\n                c = read();\\n            }\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = read();\\n            } while (!isSpaceChar(c));\\n            return res.toString();\\n        }\\n\\n        public String nextLine() {\\n            int c = read();\\n            while (isSpaceChar(c))\\n                c = read();\\n            StringBuilder res = new StringBuilder();\\n            do {\\n                res.appendCodePoint(c);\\n                c = read();\\n            } while (!isEndOfLine(c));\\n            return res.toString();\\n        }\\n\\n        public boolean isSpaceChar(int c) {\\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\\n        }\\n\\n        private boolean isEndOfLine(int c) {\\n            return c == '\\n' || c == '\\r' || c == -1;\\n        }\\n\\n    }\\n\\n}\\n", "target": "218", "substitutes": {"mod": [" val", " reg", " sim", "Mod", " mult", "ver", " mods", " base", " max", "rid", " Mod", " lock", " tmp", " off", " seq", "MOD", " increment", " stamp", " ver", " magic", " dig", " tid", " comm", " ord", " mu", " num", " ref", " exp"], "sc": ["uc", "ri", "rs", "cl", "ser", "cr", "inc", " sir", "sin", "ch", "ocr", "ro", "ua", "cu", "ih", "ub", "is", "cs", "ic", "ci", "ul", "icc", "cin", "asc", "isc", "rc", "si", "sr"], "pw": ["Pw", " pwr", "Psw", " psw", "spws", "spsw", " pws", "pwr", "Pwr", "Pws", "pws", "spw", "spwr", "psw"], "gen": [" id", "GEN", " reg", " priv", "Gener", " gun", "id", " rat", " res", " seq", " gr", "NG", " fam", " randomly", "rot", "gener", "Gen", " src", " mem", "g", " ng", " sci", "ng", " sig", " iter", " num", "rc", " nu"], "test": [" val", "Test", " tests", " testing", "feature", "prime", "NUM", "ver", "var", "iv", " tested", "err", " count", "val", "T", " ver", "EST", "dev", " TEST", "par", "est", "rest", "tests", "cmp", " Test", "testing", " num"]}}
{"code": "\\n\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Scanner;\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tList<Integer> L = new ArrayList<Integer>();\\n\t\tfor(int i = 0; i < N;i++) {\\n\t\t\tint num = sc.nextInt();\\n\t\t\tL.add(num);\\n\t\t\t}\\n\t\tint max = L.get(0);\\n//\t\t\u30ea\u30b9\u30c8\u5185\u306e\u6700\u5927\u5024\u3092\u3068\u308b\\n\t\tfor (int i = 1; i <L.size(); i++) {\\n\t\t    int v = L.get(i);\\n\t\t    if (v > max) {\\n\t\t        max = v;\\n\t\t    }\\n\t\t}\\n\\n//\t\tSystem.out.println(max);\\n//\t\tSystem.out.println(sum);\\n\t\tint sum = 0;\\n\t\tfor(int i = 0; i < L.size();i++) {\\n\t\t\tsum = sum + L.get(i);\\n\t\t}\\n\t\tsum = sum - max;\\n\t\tif(sum > max) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n//\t\tSystem.out.println(sum);\\n//\t\tSystem.out.println(max);\\n//\t\tSystem.out.println(L);\\n//\t\tString A = sc.next();\\n//1 8 10 5 8 12 34 100 11 3\\n//\t\tdouble answer = T/X;\\n//\\n//\t\t String str = BigDecimal.valueOf(answer).toPlainString();\\n//\\n//\\n//\t\t System.out.println(answer);\\n\t}\\n}\\n", "target": "25", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "dc", "nl", "capt", "ctl", "cle", "sch", "sync", "fc", "ctrl", "scan", "sq", " Sc", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "asc", "scl", "isc", "SC", "mc", "pc", "rc", "conv", "ch"], "N": ["D", "I", "Z", "TN", "F", "ND", "NM", "SN", "NP", "NE", "NB", "n", "No", "S", "Ni", "P", "NG", "T", "NL", "R", "NS", "Q", "Na", "NR", "V", "M", "NH", "GN", "H", "NC", "C", "NN", "Num", "NA", "K", "J", "X", "NI", "NT", "B", "Ns"], "L": ["D", "I", "LT", "F", "LB", "BL", "l", "ALL", "TL", "LD", "LE", "S", "LI", "P", "LIST", "T", "NL", "LL", "R", "V", "M", "OL", "W", "SL", "FL", "AL", "LP", "CL", "LM", "PL", "RL", "LG", "DL", "ML", "EL", "XL", "LU", "LS", "B"], "i": ["I", "q", "ix", "phi", "gi", "zi", "iu", "hi", "ip", "li", "id", "n", "m", "ini", "uu", "ai", "mu", "im", "qi", "us", "init", "u", "z", "j", "bi", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "sim", "my", "cli", "multi", "iter", "gu", "info", "y", "ii", "si", "di", "x", "mi"], "num": ["nu", "result", "tim", "cal", "dim", "number", "NUM", "total", "id", "node", "m", "alph", "nom", "uu", "sum", "cu", "coord", "mu", "mon", "str", "index", "comb", "unit", "hex", "sup", "um", "nb", "comp", "np", "Num", "obj", "nm", "cmp", "multi", "def", "info", "iter", "nam", "net", "si", "conv", "ord"], "max": ["set", "lt", "pop", "name", "ax", "maximum", "best", "total", "m", "top", "right", "auto", "min", "count", "rest", "mx", "head", "conf", "most", "t", "Max", "last", "MAX", "Maximum", "size", "res", "map"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tint m = n;\\n\t\tboolean judge = false;\\n\t\tfor(int i = 0; m >= 4; i++) {\\n\t\t\tm = n - (4 * i);\\n\t\t\tif(m % 7 == 0) {\\n\t\t\t\tjudge = true;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\tif(judge) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "172", "substitutes": {"sc": ["usc", "set", "arc", "lc", "cc", "anc", "esc", "mp", "sb", "sec", "cl", "sys", "system", "cr", "bc", "sv", "sp", "ck", "nl", "capt", "ec", "cle", "sch", "cam", "tc", "reader", "scan", "sq", "cs", "nc", "screen", "ok", "pb", "c", "syn", "osc", "txt", "Sc", "gc", "asc", "scl", "sr", "isc", "SC", "mc", "pc", "rc", "scrib", "ch"], "n": ["nu", "mn", "num", "r", "q", "d", "nn", "l", "nr", "N", "o", "ns", "v", "in", "nl", "cn", "ms", "sn", "a", "on", "M", "z", "j", "nb", " N", "g", "nc", "fn", "na", "np", "k", "en", "c", "nm", "out", "w", "ng", "t", "p", "s", "size", "nt"], "m": ["num", "mn", "r", "mm", "d", "dm", "mo", "mask", "dim", "l", "met", "o", "perm", "v", "om", "km", "ms", "arm", "mr", "mut", "mu", "im", "rm", "b", "lem", "sm", "f", "M", "j", "bm", "gm", "tm", "g", "k", "cm", "mx", "mod", "c", "mt", "nm", "ma", "t", "p", "y", "mis", "mc", "mat", "x", "mi", "am"], "i": ["q", "I", "ix", "phi", "hi", "zi", "iu", "gi", "base", "fi", "l", "ip", "li", "o", "id", "v", "ini", "batch", "ai", "ki", "im", "ind", "qi", "init", "M", "sequence", "j", "bi", "it", "ui", "is", "pi", "ti", "ic", "ci", "c", "sim", "multi", "p", "ii", "xi", "si", "di", "mi"], "judge": ["badge", " judage", "badage", "auge", "vinele", " munge", " judger", " munger", "gearle", "sdgate", "gearg", "sdge", "judle", "jangy", "jangee", "judg", "judged", "judage", "Judgee", "augee", "judgy", "Judg", " judged", "judgee", " munged", " munage", "sdg", "vinege", "vinegate", "badged", "badger", "judgate", "Judgy", "judger", "sdle", "augy", "vineg", "jang", "Judge", "geargate", "gearge", "jange", "aug"]}}
{"code": "import java.util.*;\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int c = sc.nextInt();\\n        int d = sc.nextInt();\\n        if(a < c){\\n            a = c;\\n        }\\n        if(b > d){\\n            b = d;\\n        }\\n        if(b < a){\\n            System.out.println(0);\\n        }else{\\n            System.out.println(b - a);\\n        }\\n    }\\n}", "target": "47", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "sb", "sec", "cgi", "cl", "sys", "system", "sv", "sp", "bc", "cr", "inc", " scr", "dc", "ck", "ctl", "ko", "cle", "sch", "sw", "fc", "tc", "scan", "sq", "cs", "sci", "ss", "nc", "syn", "osc", "cmp", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "a": ["ae", "r", "ca", "ar", "aq", "l", "oa", "o", "h", "ta", "admin", "qa", "v", "m", "aa", "da", "ad", "sa", "al", "ak", "ai", "isa", "af", "act", "A", "at", "ia", "ack", "an", "la", "ao", "ab", "pa", "ea", "apa", "i", "aff", "ba", "aaa", "ach", "eu", "aj", "alpha", "ap", "e", "ma", "as", "eas", "p", "ac", "t", "s", "era", "au", "am"], "b": ["br", "r", "sb", "ob", "l", "mb", "o", "h", "bc", "v", "n", "gb", "db", "batch", "bs", "bl", "bp", "back", "f", "bd", "eb", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bis", "e", "bo", "t", "p", "bb", "cb", "be", "y", "rb", "B"], "c": ["uc", "r", "lc", "ca", "col", "cc", "ar", "con", "l", "co", "cf", "bc", "cr", "n", "ce", "v", "unc", "cp", "dc", "ec", "cn", "cu", "f", "fc", "tc", "z", "cd", "C", "cs", "cm", "ic", "ci", "e", "ct", "ac", "cb", "rc", "ch"], "d": ["D", "pd", "r", "dec", "df", "dim", "l", "dd", "fd", "h", "deb", "de", "n", "v", "da", "m", "db", "sd", "ad", "dc", "dr", "md", "td", "south", "f", "bd", "z", "j", "cd", "g", "ds", "e", "w", "ct", "t", "def", "p", "nd", "dt", "di", "del", "dp"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n    public static Scanner sc = new Scanner(System.in);\\n    public static void main(String[] args) throws Exception {\\n        int n = sc.nextInt();\\n        int m = sc.nextInt();\\n        int[][] mat = new int[n][m];\\n        int[] vec = new int[m];\\n        int[] res = new int[n];\\n        \\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < m; j++) {\\n                mat[i][j] = sc.nextInt();\\n            }\\n        }\\n        \\n        for (int i = 0; i < m; i++) {\\n            vec[i] = sc.nextInt();\\n        }\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < m; j++) {\\n                res[i] += mat[i][j] * vec[j];\\n            }\\n            System.out.println(res[i]);\\n        }\\n        \\n    }\\n}", "target": "185", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "sh", "bc", "sv", "sp", "inc", "dc", "comm", "ctl", "capt", "cle", "irc", "sch", "cam", "sync", "fc", "func", "exec", "tc", "scan", "sq", " Sc", "cs", "g", "ss", "nc", "sci", "c", "osc", "Sc", "gc", "ng", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "psc", "ch", "desc"], "n": ["nu", "mn", "num", "r", "q", "name", "ll", "nn", "number", "l", "un", "N", "o", "ns", "v", "dn", "nan", "ne", "in", "nl", "cn", "sn", "a", "on", "an", "z", "no", "nb", "pi", "g", "nc", "na", "fn", "np", "k", " N", "en", "c", "nm", "e", "out", "ng", "t", "p", "network", "ln", "y", "net", "nt", "x"], "m": ["q", "mn", "r", "mm", "dm", "mo", "mb", "l", "h", "o", "perm", "v", "me", "om", "km", "md", "mun", "ms", "mean", "mu", "im", "rm", "b", "f", "sm", "M", "mem", "z", "bm", "gm", "tm", "g", "k", "cm", "mod", "c", "mt", "span", "nm", "ma", "t", "s", "p", "man", "y", "em", "mc", "all", "med", "mi", "rem"], "mat": ["dat", "num", "mn", "mot", "mm", "rat", "att", "mp", "pose", "dim", "wt", "met", "rt", "hat", "feat", "lab", "stat", "mun", "lat", "nat", "xy", "mut", "mu", "act", "mon", "form", "at", "rot", "mem", "pat", "Mat", "unit", "cat", "grid", "kat", "mas", "vert", "flat", "mt", "format", "late", "man", "atten", "net", "mit", "map"], "vec": ["num", "col", "dim", "vre", "vals", "cos", "ele", "var", "ver", "len", "ser", "sv", "v", "ric", "uv", "seq", "nt", "sum", "xy", "val", "ret", "serv", "cam", "buf", "virt", "lem", "pos", "mem", "cat", "Vector", "vert", "ve", "vector", "data", "vc", "vid", "vol", "obj", "bis", "inv", "des", "def", "conv", "vet", "vor", "expr"], "res": ["r", "result", "vals", "rev", "frac", "rs", "cond", "red", "rt", "sys", "ref", "reset", "ress", "mont", "Res", "rand", "err", "resp", "rep", "bs", "os", "resolution", "ms", "ret", "pos", "req", "resh", "mem", "rex", "results", "rates", "weights", "rest", "rss", "rel", "js", "obj", "des", "out", "RES", "cons", "exp", "resources", "re", "ps", "rc", "pas", "nt", "pres", "rem"], "i": ["q", "ix", "zi", "iu", "ei", "li", "me", "ai", "ki", "iii", "ik", "ims", "is", "eu", "ic", "ami", "y", "di", "x", "ish", "ri", "fi", "ip", "ji", "point", "id", "asi", "ij", "iti", "ori", "ite", "io", "bi", "it", "ci", "sim", "cli", "iq", "ii", "phi", "hi", "ar", "ion", "this", "ni", "ind", "ia", "\u0438", "ir", "la", "status", "pi", "iri", "xi", "si", "mi", "I", "gi", "iy", "v", "ini", "im", "qi", "index", "us", "init", "ity", "ui", "ie", "uri", "ti", "multi", "iter", "info"], "j": ["br", "q", "jac", "ix", "jit", "pt", "og", "ax", "att", "el", "ev", "l", "ji", "jj", "o", "li", "jo", "sp", "v", "ij", "son", "jump", "jas", "by", "ju", "bl", "ne", "ion", "xy", "ja", "ind", "str", "bj", "right", "b", "note", "oj", "job", "di", "io", "z", "Ja", "bi", "it", "pr", "uj", "g", "off", "json", "js", "aj", "obj", "jp", "J", "out", "ot", "fr", "ng", "s", "other", "kj", "ort", "y", "jc", "dj", "ijk", "je", "jl"]}}
{"code": "import java.io.PrintWriter;\\nimport java.util.*;\\n\\npublic class Main {\\n\\n    static Scanner sc;\\n    static PrintWriter out;\\n\\n    public static void main(String[] args) {\\n        sc = new Scanner(System.in);\\n        out = new PrintWriter(System.out);\\n        new Main().solve();\\n        out.flush();\\n    }\\n\\n    public void solve() {\\n        long a = sc.nextInt();\\n        long b = sc.nextInt();\\n        long c = sc.nextInt();\\n        long d = sc.nextInt();\\n\\n\\n        long res = b * c;\\n        res = Math.max(res, b * d);\\n        res = Math.max(res, a * c);\\n        res = Math.max(res, a * d);\\n\\n        out.println(res);\\n    }\\n\\n\\n\\n}", "target": "244", "substitutes": {"sc": ["usc", "uc", "lc", " cr", "cc", "esc", " resc", " scorer", " SC", "sec", "co", "psc", "cl", "ser", "cgi", "sv", "bc", "cr", "sp", "ch", " scr", "dc", "sa", "ck", "ec", "ctl", "ko", "sche", "cu", "sch", "sw", "se", "conv", "sync", "fc", "ssl", "tc", "ctrl", " cs", "si", "sq", "cs", "sci", "ss", "nc", "pb", "osc", "jp", "Sc", " cle", "s", "gc", "scl", "isc", "asc", "ctx", "scope", "sic", "SC", "mc", "pc", "rc", " subsc", "sharp", "sr", " sp", "desc", "st"], "out": ["ou", "r", "ex", "end", "name", "outer", "flush", "l", "writer", "error", "oss", "sys", "o", "log", "put", "n", "v", "exit", "ch", "err", "in", "by", "print", "OUT", "os", "write", "serv", "or", "str", "at", "us", "io", "ent", "gr", "it", "aos", "Out", "cmd", "i", "off", "screen", "store", "output", "pool", "w", "ot", "t", "s", "p", "we", "info", "x", "up", "net", "to", "nt", "outs", "window"], "a": ["ae", "r", "ca", "ar", "l", "oa", "h", "o", "ta", "n", "m", "aa", "da", "v", "sa", "al", "ak", "ai", "A", "at", "f", "ia", "an", "ga", "ao", "ab", "i", "ea", "ba", "aj", "e", "w", "alpha", "ma", "t", "s", "p", "ac", "re", "be", "am"], "b": ["r", "wb", "sb", "ob", "l", "h", "o", "bc", "n", "v", "bf", "gb", "m", "db", "by", "bl", "bs", "f", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "e", "p", "bb", "cb", "be", "y", "rb", "B"], "c": ["r", "lc", "ca", "cc", "con", "l", "co", "cf", "bc", "cr", "n", "cp", "m", "unc", "dc", "ec", "cu", "enc", "f", "fc", "u", "tc", "z", "cat", "cd", "C", "cs", "g", "cm", "ci", "com", "e", "ct", "gc", "t", "ac", "cb", "rc", "ch"], "d": ["dh", "D", "r", "df", "l", "dd", "o", "h", "de", "n", "m", "da", "ad", "sd", "db", "dc", "rd", "dr", "v", "du", "md", "td", "bd", "f", "z", "j", "dev", "dra", "cd", "g", "ds", "des", "e", "w", "t", "nd", "p", "dt", "di", "del", "dp"], "res": ["r", "reg", "result", "rev", "rs", "sol", "red", "rt", "ref", "ress", "reset", "vec", "resource", "Res", "rand", "dr", "err", "resp", "rep", "msg", "raw", "os", "ms", "val", "ret", "mr", "act", "then", "f", "req", "resh", "mem", "grid", "j", "results", "pr", "div", "i", "rss", "vol", "comp", "rel", "js", "max", "inv", "des", "RES", "fr", "def", "cons", "p", "der", "exp", "re", "ps", "rc", "resolution", "nt", "pres", "gr", "rem", "expr"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        Scanner sc = new Scanner(System.in);\\n        \\n        int[] base = {1,11,111,1111,11111,111111,1111111,11111111,111111111};\\n        \\n        int a = Integer.parseInt(sc.next());\\n        int b = Integer.parseInt(sc.next());\\n        \\n        String x = Integer.toString(a*base[b-1]);\\n        String y = Integer.toString(b*base[a-1]);\\n        \\n        System.out.println(x.compareTo(y)>0?y:x);\\n    }\\n}", "target": "24", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "mp", "sb", "mic", "sec", "cgi", "cl", "sys", "system", "sh", "bc", "sv", "sp", "cr", "dc", "nl", "ctl", "sel", "cle", "irc", "sw", "sync", "fc", "tch", "func", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "ch", "desc"], "base": ["set", "bas", "basic", "ase", "key", "mask", "based", "enable", "prime", "total", "create", "tree", "prefix", "reset", "zero", "id", "da", "db", "sche", "file", "root", "scale", "back", "se", "buffer", "force", "range", "unit", "radius", "space", "no", "area", "template", "iso", "domain", "normal", "max", "link", "alpha", "reverse", "ma", "check", "scope", "char", "Base", "re", "size", "rule", "quote", "map"], "a": ["ae", "r", "ca", "ee", "ar", "aq", "el", "l", "oa", "o", "ta", "n", "aa", "sta", "sa", "ai", "isa", "act", "A", "at", "f", "ia", "an", "la", "ga", "ao", "ab", "i", "ea", "pa", "apa", "ba", "aaa", "na", "aj", " ba", "alpha", "e", "ma", "t", "as", "ac", "au", "va", "am"], "b": ["br", "r", "end", "d", "beta", "sb", "l", "o", "bc", "n", "v", "m", "db", "bh", "gb", "by", "bs", "bp", "bd", "eb", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "c", "bis", "e", "s", "p", "bb", "cb", "be", "rb", "B"], "x": ["r", "ix", "ex", "wx", "xb", "ax", "ox", "l", "yx", "xf", "xy", "tx", "xe", "xx", "f", "px", "xc", "z", "xa", "dx", "i", "xxxxxxxx", "mx", "xt", "xxx", "xd", "w", " xx", "X", "t", "rx", "p", "ux", "xi", "xs", "xp", "fx"], "y": ["ye", "sy", "ym", "iy", "o", "yx", "yl", "yu", "py", "gy", "ey", "uy", "cy", "xy", "fy", "ys", "xx", "ry", "yy", "ies", "z", "j", "yt", "vy", "i", "oy", "sky", "Y", "my", "yi", "wy", "yr", "ot", "ny", "yn", "ty", "ery", "yo"]}}
{"code": "import java.util.*;\\n \\npublic class Main{\\n  public static void main(String[] args){\\n    Scanner sc = new Scanner(System.in);\\n    String s = sc.next();\\n    String m[] = s.split(\"\");\\n    int ans = 0;\\n    for (int i = 0; i < s.length(); i++){\\n      if (m[i].equals(\"+\")){\\n        ans++;\\n      }else{\\n        ans--;\\n      }\\n    }\\n    System.out.println(ans);\\n  }\\n}", "target": "54", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "dec", "sec", "cl", "sys", "system", "ser", "cr", "bc", "sv", "sp", "ec", "cle", "sel", "sch", "RC", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "screen", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "sub"], "s": ["gs", "sql", "sf", "sb", "l", "rs", "sol", "abs", "sys", "ns", "sv", "sp", "n", "strings", "simple", "su", "ws", "S", "ms", "sw", "ats", "str", "sit", "se", "b", "sl", "ls", "sort", "sts", "string", "is", "ts", "sq", "g", "ss", "js", "ins", "ds", "txt", "w", "t", "p", "qs", "ps", "xs", "hs", "st"], "m": ["mn", "mm", "dm", "pm", "mp", "mb", "met", "perm", "v", "n", "md", "ms", "vm", "mr", "mu", "rm", "esm", "sm", "b", "M", "mem", "bm", "gm", "tm", "g", "cm", "mt", "nm", "ma", "wm", "p", "mac", "em", "hm", "mc", "mi", "am"], "ans": ["checks", "acs", "uns", "ents", "ros", "ons", "nets", "vals", "anas", "rs", "anks", "ums", "oos", "eds", "ns", "asks", "ks", "ads", "orders", "ians", "ands", "ars", "can", "yes", "ms", "lines", "ids", "arts", "ANS", "ates", "amps", "ats", "ens", "ants", "ls", "an", "ows", "ols", "AN", "ann", "vs", "mas", "aos", "is", "anes", "results", " spans", "scan", "cs", "ips", "has", "ins", "aps", "ds", "olds", "books", "ions", "arms", "as", "posts", "ots", "xs", "lan", "offs", "outs", " scans"], "i": ["q", "I", "ix", "ri", "key", "phi", "gi", "zi", "iu", "hi", "ei", "l", "ip", "ji", "point", "li", "id", "n", "ini", "in", "uu", "gravity", "ski", "ai", "ki", "mu", "im", "qi", "ori", "docker", "index", "us", "init", "\u0438", "j", "bi", "it", "ui", "uri", "pi", "g", "ti", "ic", "ci", "c", "sim", "my", "cli", "PI", "multi", "gu", "y", "xi", "ii", "si", "di", "x", "mi"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\t\\n\\n\tprivate static void solve(){\\n\t\t//Implement solution here.\\n\t\tlong N = nl();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\twhile(N > 0) {\\n//\t\t\tSystem.out.println(N);\\n\t\t\tlong rem = -1;\\n\t\t\tif(N % 26 == 0) {\\n\t\t\t\trem = 26;\\n\t\t\t\tif(N == 26) {\\n\t\t\t\t\tN = 0;\\n\t\t\t\t} else {\\n\t\t\t\t\tN /= 26L;\\n\t\t\t\t\tN--;\\n\t\t\t\t}\\n\t\t\t} else {\\n\t\t\t\trem = N % 26L;\\n\t\t\t\tN /= 26L;\\n\t\t\t}\t\\n\t\t\tsb.insert(0,(char)(rem + 96L));\\n\t\t\t\\n\t\t\t\\n\t\t}\\n\t\tSystem.out.println(sb.toString());\\n\t}\\n\\n\t//Switch input source (stdin/file)\\n\tprivate static BufferedReader br;\\n\tpublic static void main(String[] args){\\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\tString debugDataPath = System.getenv(\"DD_PATH\");        \\n\t\tif(debugDataPath != null){\\n\t\t\ttry{\\n\t\t\t\tbr = new BufferedReader(new InputStreamReader(new FileInputStream(new File(debugDataPath))));\\n\t\t\t}catch(Exception e){\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\tboolean hasNext = true;\\n\t\twhile(hasNext){\\n\t\t\tsolve();\t\\n\t\t\ttry{\\n\t\t\t\tbr.mark(1);\\n\t\t\t\tif(br.read() > 0){\\n\t\t\t\t\tbr.reset();\t\t\t\\n\t\t\t\t\tSystem.out.println(\"---\");\\n\t\t\t\t} else {\\n\t\t\t\t\thasNext = false;\\n\t\t\t\t}\\n\t\t\t}catch(Exception e){\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t} \\n\t\t}\\n\t}\\n\\n\t//Input read utility\\n\tprivate static StringTokenizer tokenizer = null;\\n\tpublic static String next() {\\n\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n\t\t\ttry {\\n\t\t\t\ttokenizer = new StringTokenizer(br.readLine());\\n\t\t\t} catch (Exception e) {\\n\t\t\t\tthrow new RuntimeException(e);\\n\t\t\t}\\n\t\t}\\n\t\treturn tokenizer.nextToken();\\n\t}\\n\t//Get next single int\\n\tprivate static int ni() {\\n\t\treturn Integer.parseInt(next());\\n\t}\\n\t//Get next single long\\n\tprivate static long nl() {\\n\t\treturn Long.parseLong(next());\\n\t}\\n\t//Get next single double\\n\tprivate static double nd() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n\t//Get next int array from one line\\n\tprivate static int[] na(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = ni();\\n\t\treturn a;\\n\t}\\n\t//Get next char array from one line\\n\tprivate static char[] ns() {\\n\t\treturn next().toCharArray();\\n\t}\\n\t//Get next long array from one line\\n\tprivate static long[] nal(int n) {\\n\t\tlong[] a = new long[n];\\n\t\tfor (int i = 0; i < n; i++)\\n\t\t\ta[i] = nl();\\n\t\treturn a;\\n\t}\\n}\\n", "target": "191", "substitutes": {}}
{"code": "import java.io.OutputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.util.StringTokenizer;\\nimport java.io.IOException;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.InputStream;\\n\\n/**\\n * Built using CHelper plug-in\\n * Actual solution is at the top\\n */\\npublic class Main {\\n    public static void main(String[] args) {\\n        InputStream inputStream = System.in;\\n        OutputStream outputStream = System.out;\\n        InputReader in = new InputReader(inputStream);\\n        PrintWriter out = new PrintWriter(outputStream);\\n        TaskB solver = new TaskB();\\n        solver.solve(1, in, out);\\n        out.close();\\n    }\\n\\n    static class TaskB {\\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\\n            int n = in.nextInt();\\n            int x = in.nextInt();\\n            int[] l = new int[n];\\n            for (int i = 0; i < n; i++)\\n                l[i] = in.nextInt();\\n            int ans = 1;\\n            int lastCoordinate = 0;\\n            for (int i = 1; i <= n; i++) {\\n                int curCoordinate = lastCoordinate + l[i - 1];\\n                lastCoordinate = curCoordinate;\\n                if (curCoordinate <= x)\\n                    ans++;\\n            }\\n            out.println(ans);\\n        }\\n\\n    }\\n\\n    static class InputReader {\\n        public BufferedReader reader;\\n        public StringTokenizer tokenizer;\\n\\n        public InputReader(InputStream stream) {\\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\\n            tokenizer = null;\\n        }\\n\\n        public String next() {\\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\\n                try {\\n                    tokenizer = new StringTokenizer(reader.readLine());\\n                } catch (IOException e) {\\n                    throw new RuntimeException(e);\\n                }\\n            }\\n            return tokenizer.nextToken();\\n        }\\n\\n        public int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n    }\\n}\\n\\n", "target": "130", "substitutes": {"inputStream": ["inputSocket", "instream", "inStream", "primaryStream", " inputSteam", "outputStreamer", " inputWire", "inputSteam", "inStreamer", "helloWire", "primarySteam", " inputStreamer", "inSteam", "helloStream", " inputstream", "inputstream", "outputstream", "inputStreamer", " inputSocket", "helloSteam", "helloSocket", "outputSteam", "primarySocket", "inputWire", "primaryWire"], "outputStream": ["writeForm", "resultStream", "resultSteam", "outputStreamer", "inputSteam", "printStream", "outputNow", "resultNow", " outputSteam", "printStreamer", "outputForm", "printSteam", "resultWriter", "writeStream", "generationNow", "inputForm", "inputStreamer", "generationWriter", "outputWriter", " outputNow", "printForm", "outputSteam", "writeSteam", "generationSteam", " outputWriter", "writeStreamer", "generationStream"], "in": ["r", "gin", "bin", "from", "log", "context", "per", "lo", "on", "din", "is", "kin", "ic", "ins", "conf", "old", "ac", "inf", "current", " din", "isin", "o", "h", "sin", "read", "source", "doc", "IN", "run", "or", "form", "io", "it", "inner", "inside", "local", "s", "ex", "rt", "and", "inc", "al", "vin", "file", "rin", "serv", "ind", "lin", "In", "input", "output", "ma", "add", "mi", "mm", "sql", "con", "ini", "err", "by", "inn", "get", "init", "null", "en", "er", "cin", "iter", "up"], "out": ["set", "r", "ou", "result", "ex", "name", "outer", " Out", "flush", "end", "writer", "co", "log", "o", "sys", "server", "v", "ch", "err", "this", "print", "OUT", "os", "can", "OU", "report", "write", "client", "or", "res", "cache", "at", "b", "list", "io", "gr", "it", "aos", "Out", "null", "cmd", "inner", "lock", "screen", "table", "c", "obj", "output", "txt", "w", "gc", "t", "s", "er", "p", "last", "up", "net", "all", "to", "nt", "outs"], "solver": ["solved", " solved", "resolver", "Solution", "csolver", "csorter", " solution", "Solve", "csolve", " solve", "resolve", "tsolver", "tsolution", "tsolve", "Sorter", "resorter", "solve", "Solved", "solution", "tsolved", "sorter", "csolution", "Solver", "resolution"], "testNumber": [" testNo", "TestCount", " testType", "trialCount", " testCount", "TestNumber", "TestType", "trialType", "trialNumber", "testCount", "TestNo", "testNo", "trialNo", "testType"], "n": ["nu", "mn", "num", "q", "name", "d", "nn", "nr", "un", "len", "N", "o", "ns", "m", "v", "ne", "nan", "nl", "cn", "ni", "sn", "on", "u", "an", "z", "j", "no", "nb", "pi", "g", "na", "nc", "k", "np", "en", "c", "nw", "none", "ng", "t", "p", "network", "ln", "y", "net", "all", "nt", "names"], "x": ["r", "ix", "ex", "wx", "ax", "o", "h", "v", "m", "xy", "tx", "xe", "xx", "f", "on", "px", "u", "xc", "z", "xa", "xt", "w", "X", "t", "p", "rx", "ctx", "y", "xi", "xs", "xp", "ox"], "l": ["dl", "lt", "r", "lc", "ll", "el", "hl", "li", "pl", "o", "lp", "ol", "m", "els", "nl", "lo", "lb", "lib", "le", "b", "lr", "sl", "ls", "ml", "z", "rl", "lv", "fl", "c", "L", "p", "tl", "ln", "lf", "ld"], "i": ["q", "I", "ix", "ri", "phi", "hi", "zi", "iu", "gi", "base", "ei", "ip", "iy", "chain", "progress", "ji", "li", "o", "id", "asi", "ij", "m", "me", "ini", "by", "batch", "ion", "print", "ai", "ki", "im", "ind", "qi", "index", "f", "init", "\u0438", "fire", "io", "ims", "j", "bi", "it", "u", "ity", "ui", "ie", "is", "uri", "pi", "ti", "ci", "ic", "sim", "my", "cli", "PI", "multi", "iq", "p", "info", "y", "ii", "xi", "si", "di", "mi"], "ans": ["acs", "ents", "ros", "pan", "aces", "names", "anks", "flags", "eds", "ns", "asks", "ks", "ads", "ians", "os", "errors", "ars", "ids", "lines", "ms", "arts", "ANS", "amps", "ats", "ants", "ls", "an", "AN", "is", "anes", " spans", "acts", "cs", "orts", "ones", "rows", "ins", "aps", "as", "cons", "s", "posts", "actions", "cas", "xs", "rors", "span", "lan", "offs", "outs", "ann"], "lastCoordinate": ["LastCoordinate", "lastCoord", "lastCOordinate", " lastControlale", "lastCOposition", "lastControlinate", " lastcoord", " lastControlinate", "lastcoposition", "lastControlale", "lastControlordinate", " lastcoinate", "lastCOinate", " lastCoinate", "LastCoord", " lastcoue", "LastCoposition", " lastCoord", " lastcoordinate", "lastCoue", " lastControlordinate", "Lastcoposition", "lastcoinate", "lastcoord", "lastCoale", "lastcoale", " lastCoue", "lastCoinate", "LastCoinate", "lastcoue", "lastControlord", "lastCOord", "lastCoposition", "Lastcoordinate", "Lastcoord", "Lastcoinate", "lastCOue", " lastControlord", " lastCoale", "lastcoordinate"], "curCoordinate": ["CurCoension", "curConord", "curCoination", "curConsord", " curCord", "CurCinate", "CurCale", "curCale", "CurCoale", "curCoposition", "curConordinate", "curCOension", "curCoinate", "curCOordinate", "curConsinate", "CurCoordinate", "curConposition", "curCOinate", " curCinate", "curcoordinate", "curConinate", "curConsordinate", "curCoension", "curcoension", "curcoination", " curCoinate", "curCOination", " curCordinate", "CurCoination", "curCordinate", "CurCoinate", "curCinate", " curCoposition", "curConsale", " curCposition", "curCord", "CurCoord", "curCoale", "curcoinate", "CurCordinate", "curCoord", "CurCord", " curCoord", "curCposition"], "reader": ["loader", "rr", "wrapper", "r", "driver", "row", "rar", "writer", "rs", "builder", " parser", "dr", "context", "read", "ro", "file", "handler", "mr", "user", "Reader", " viewer", "runner", "buffer", " writer", "worker", "parser", "oder", "rer", "document", " ruler", "ner", "inner", "timer", "linger", "redo", "iterator", "keeper", "input", "liner", "older", "er", "iter", "rx", "upper", " waiter", "window"], "tokenizer": ["tooliser", "tokenener", "normalizer", "optimizer", " tokenize", "singleize", " tokenization", "okenitor", "tokenize", "toolize", " tokenifier", "Tokener", " tokenzer", "okenize", "Tokenizer", "tokenger", "Tokenener", "normaler", "tokenitor", "okenisher", "tokeniser", "singleiser", "Tokenization", "okener", "Tokenize", "tokener", "optimifier", "wordize", " tokener", "optimitor", "Tokenzer", "normalifier", "wordzer", "serialifier", " tokenator", "okenizer", "tokenization", " tokenener", "serializer", "serialitor", "normalener", "toolizer", "Tokenifier", "tokenifier", "okenifier", "optimisher", "serialisher", "singleger", "tokenator", "Tokenator", "tokenisher", "wordizer", "okeniser", "toolger", "okenger", "wordator", "singleizer", "okenzer", "okenization", "tokenzer"], "stream": ["driver", "row", "log", "v", "console", "resource", "context", "source", "level", "ream", "path", "file", "this", "form", "phrase", "view", "instance", "buffer", "test", "io", "history", "pipe", "stack", "zip", "message", "data", "inner", "length", "channel", "event", "open", "Stream", "input", "iterator", "output", "sample", "e", "check", "pool", "body", "handle", "down", "window"]}}
{"code": "import java.util.Scanner;\\n\\nclass Main{\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint n = sc.nextInt();\\n\t\tString line = sc.next();\\n\t\tchar[] s = line.toCharArray();\\n\t\tline = sc.next();\\n\t\tchar[] t = line.toCharArray();\\n\t\tString ans = \"\";\\n\t\tfor(int i = 0; i < n; i++){\\n\t\t\tans += s[i];\\n\t\t\tans += t[i];\\n\t\t}\\n\t\tSystem.out.println(ans);\\n\t}\\n}", "target": "200", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sec", "co", "cl", "sys", "sh", "bc", "cr", "sv", "sp", "console", "dc", "ck", "ec", "nl", "ctl", "ko", "cle", "sw", "sync", "tc", "ctrl", "scan", "sq", "cont", "cs", "sci", "ss", "nc", "ok", "c", "osc", "Sc", "gc", "cons", "ng", "scl", "asc", "isc", "sr", "SC", "mc", "pc", "rc", "conv", "ch"], "n": ["nu", "mn", "num", "d", "nn", "l", "len", "N", "gn", "ns", "m", "ne", "nan", "nl", "cn", "ni", "sn", "count", "j", "no", "nb", " N", "na", "nc", "fn", "np", "en", "c", "nw", "nm", "ng", "network", "nor", "ln", "net", "nt"], "line": ["set", "block", "Line", "row", "l", "number", "chain", "inline", "point", "log", "de", "word", "source", "ne", "in", "nl", "ste", "lo", "path", "file", "cell", "cle", "where", "lines", "le", "lin", "str", "se", "phrase", "list", "code", "sl", "on", "pos", "buffer", "range", "sequence", "frame", "string", "no", "ie", "LINE", "text", "lock", "store", "online", " Line", "link", "eline", "liner", "iter", "char", "handle", "ln", "lf", "page", "ine"], "s": ["gs", "sb", "l", "rs", "ns", "sv", "sp", "ws", "bs", "S", "os", "les", "ms", "ys", "ats", "a", "sl", "es", "ls", "als", "ies", "sts", "is", "ts", "sq", "cs", "ss", "js", "ins", "ds", "ses", "ps", "xs", "si", "hs", "st"], "t": ["r", "pt", "wt", "l", "tp", "o", "rt", "ta", "v", "tr", "tt", "tf", "tw", "T", "td", "b", "tc", "j", "it", "tm", "ts", "template", "g", "c", "vt", "txt", "mt", "ct", "ot", "out", "tab", "p", "te", "dt", "ty", "st"], "ans": ["gs", " means", "uns", "acs", "ents", "ons", "eps", "anc", "vals", "aus", "rs", "san", "ums", "anks", "eds", "ns", "ads", "ks", "helps", "ces", "ians", "atts", "os", "can", "yes", "ms", "lines", "ates", "arts", "ANS", "ids", "amps", "ats", "ens", "ants", "ags", "ls", "an", "ows", "ann", "vs", "mas", "umes", "ts", " spans", "cs", "orts", "ines", "utters", "ins", "aps", "ds", "olds", "annot", "as", "posts", "cas", "ports", "rans", "wan", "ars", " scans"], "i": ["q", "I", "ix", "sym", "ri", "phi", "gi", "zi", "iu", "ei", "chain", "ip", "ji", "point", "li", "m", "ij", "me", "ini", "err", "batch", "ai", "client", "im", "ind", "qi", "ori", "index", "init", "u", "\u0438", "io", "ims", "z", "j", "bi", "it", "ui", "is", "ie", "uri", "pi", "ti", "ic", "ci", "sim", "cli", "multi", "iter", "iq", "gu", "y", "ii", "si", "di", "mi"]}}
{"code": "import java.io.IOException;\\nimport java.util.Scanner;\\nclass Main{\\n\tpublic static void main(String[] args)throws NumberFormatException, IOException{\\n\t\tScanner scan = new Scanner(System.in);\\n\t\t\\n\t\tString ringText =scan.nextLine();\\n\t\tint ringLength = ringText.length();\\n\t\tchar[] ringChar = ringText.toCharArray();\\n\t\t\\n\t\tString target =scan.nextLine();\\n\t\tint targetLength = target.length();\\n\t\t\\n\t\tString hikaku = \"\";\\n\t\t\\n\t\tboolean kai = false;\\n\t\t\\n\t\tfor(int i=0; i<ringLength; i++){\\n\t\t\t\thikaku = \"\";\\n\t\t\t\tkai = false;\\n\t\t\t\t\\n\t\t\t\tfor(int j=0; j<targetLength; j++){\\n\t\t\t\t\tint i2 = j;\\n\t\t\t\t\tif(i + i2 >= ringLength){\\n\t\t\t\t\t\ti2 -= ringLength;\\n\t\t\t\t\t}\\n\t\t\t\t\thikaku = hikaku + ringChar[i+i2];\\n\t\t\t\t}\\n\t\t\t\tif(target.equals(hikaku)){\\n\t\t\t\t\tSystem.out.println(\"Yes\");\\n\t\t\t\t\tkai = true;\\n\t\t\t\t\tbreak;\\n\t\t\t\t}\\n\t\t}\\n\t\t\\n\t\tif(kai == false){\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t}\\n}", "target": "198", "substitutes": {"scan": ["seek", "r", "skip", "sql", "row", "nn", "bin", "parse", "con", "reach", "gate", "san", " Scan", "ser", "sys", "Scan", "system", "connect", "sv", "n", "sin", "spe", "util", "read", "in", "stat", "gram", "sum", "can", "report", "run", "user", "se", "gen", "sync", "send", "an", "cat", "sc", "find", "thin", "ner", "build", "out", "check", "info", " scanner", "proc", "query", "ch", "ann", "see"], "ringText": ["stringtext", "prefixRead", "stringRead", "ngTEXT", "jingMessage", "ngText", "RingTEXT", "ringRead", "chainTEXT", "chainText", "ringtext", " ringBytes", "prefixString", "chainChar", "rangingChar", "jingBytes", " ringMessage", "rangingString", "ringMessage", "jingText", "ringBytes", " ringRead", "ringTEXT", "RingChar", "prefixText", "rangingText", "prefixtext", "stringText", "stringString", "chainString", "RingText", "rangingTEXT", "jingTEXT", "ringString", "RingString", " ringTEXT", "ngBytes", "ngMessage", " ringString", " ringtext"], "ringLength": [" ringNumber", "ringENGTH", "ringWidth", "ringNumber", "rigENGTH", "ringFontSize", "bindingDuration", "ringDuration", "bindinglength", " ringPosition", "rigStrength", "targetStrength", "ringStrength", "stringFontSize", "regionENGTH", "targetWidth", "packingWidth", "stringLength", "RingLength", "RingNumber", "targetText", "regionStrength", "regionLength", "bindingWidth", "stringlength", "ringPosition", "targetDuration", "bindingLength", "stringPosition", "packingFontSize", "packinglength", "Ringlength", "stringWidth", "rigLength", "targetENGTH", "packingLength", "targetFontSize", "stringDuration", "ringlength", "stringNumber", " ringlength", "rigText", "regionText", "targetlength", "RingPosition"], "ringChar": ["RingPar", "RingLetter", "rigPar", "ringchar", "ringCharacter", "stringchar", "ringLetter", "jingchar", "jingCharacter", "stringCharacter", "stringChar", "stringLetter", "ringChan", "RingChar", "rigChan", "RingCh", "ringPar", "ringCh", "stringCh", "stringChan", "stringPar", "RingChan", "rigCh", "jingChar", "jingLetter", "rigChar", "RingCharacter", "Ringchar"], "target": ["set", "wrapper", "result", "name", "token", "next", "base", "necessary", "task", "arget", "hat", "default", "source", "top", "this", "path", "arg", "prop", "root", "gt", "pointer", "buffer", "home", "test", "range", "field", "prototype", "pattern", "string", "trace", "Target", "alias", "text", "template", "that", "length", "table", "origin", "output", "link", "local", "t", "char", "padding", "goal", "to", "ARGET", "window"], "targetLength": ["argetWidth", "TargetWidth", "sourceWidth", "targetWidth", " targetNumber", "targetNumber", "argetlength", "TargetReading", "targetLen", "tileWidth", "targetReading", "TargetLength", "tileLen", " targetlength", "argetNumber", "tileReading", "argetLen", "argetLength", "sourceNumber", "tileLength", "TargetLen", "argetReading", "sourceLength", "sourcelength", " targetWidth", "targetlength"], "hikaku": ["hikkaku", " hijkuru", "hickasaki", "hikkasaki", "khickingu", "khikaki", "hiskamoto", " hijkoji", "hangaku", " hikkasaki", "khikingu", "hikasaki", "hikaki", "hijkoji", "hangoji", "hikoji", "hikingu", "hangamoto", "hijkingu", " hikuru", "Hikasaki", "hikamoto", " hikoji", "hijkaku", " hijkaku", " hijkingu", "Hikkamoto", "Hikaka", " hikkaku", "khickaku", "hiskatsuki", "hikkaki", "hangasaki", "hiskoji", "Hikkaka", "hikatsuki", "hikuingu", "Hikoji", "khickaki", "Hikkaku", "hikkamoto", "khikasaki", " hikatsuki", "hikuoji", "hangatsuki", "khickasaki", "hijkuru", "hikuaka", "hikkaka", "Hikatsuki", "hikaka", "hikuaki", "hickingu", "hanguru", "hijkasaki", "hikkoji", "hangingu", "Hikkasaki", "hikkuru", "hikuru", " hikkoji", " hikingu", "hikuaku", "hiskaku", "hijkaka", " hikkatsuki", "hickaki", "hikuasaki", "hikkatsuki", "Hikkoji", "hikkingu", "Hikamoto", "hikuatsuki", "hijkatsuki", "khikaku", " hikasaki", "Hikkatsuki", "hickaku", "Hikaku", "hiskasaki"], "i": ["q", "I", "ix", "iat", "ri", "phi", "gi", "zi", "iu", "ar", "ei", "ip", "li", "id", "ij", "me", "ini", "this", "ai", "iti", "im", "ind", "or", "qi", "at", "ori", "index", "f", "us", "ia", "init", "io", "ims", "bi", "it", "ui", "ie", "is", "pi", "g", "ti", "ic", "ci", "sim", "cli", "multi", "iq", "iter", "info", "ami", "ii", "xi", "si", "di", "mi"], "j": ["br", "q", "col", "d", "key", "l", "jl", "ji", "jj", "jo", "sp", "n", "ij", "v", "m", "tr", "err", "jump", "ge", "ja", "im", "str", "bj", "b", "index", "oj", "job", "f", "z", "bi", "it", "pr", "g", "uj", "json", "k", "js", "obj", "aj", "jp", "J", "other", "fr", "s", "p", "kj", "y", "jc", "false", "dj", "next"], "i2": ["si2", "i3", "si02", "iniTwo", " i02", "si3", "iTwo", "int4", "ii02", "ini02", "ip2", "inttwo", "gi62", " i4", "siTwo", " i62", "iitwo", "ini62", "ii2", "ini2", "int02", "gi2", " i6", "itwo", "i6", "ip3", "di02", "giTwo", " iTwo", "di2", " i3", "di6", "i62", " itwo", "gi02", "ii4", "int2", "ipTwo", "si6", "i02", "i4"], "kai": ["atsuki", "ye", "pai", "maker", "rison", "kas", "kay", "KO", "pee", "qua", "kan", "hua", "melon", "uti", "attle", "Ka", "wei", "ko", "uko", "bite", "sama", "oko", "ai", "kok", "aska", "gae", "colo", "hai", "qi", "rica", "hao", "taker", "\u5b50", "uma", "coe", "loo", "anus", "umi", "Phoenix", "aka", "pour", "ku", "pei", "aco", "Yan", "kie", "anti", " boo", "umo", "ka", "rera", "yout", "nai", "yo"]}}
{"code": "import java.util.*;\\n\\npublic class Main\\n{\\n  public static void main(String[] args)\\n  {\\n    Scanner sc = new Scanner(System.in);\\n    long l, r;\\n\t\\n    l = sc.nextLong();\\n    r = sc.nextLong();\\n\\n    long min = (l*r)%2019;\\n\\n    if(min == 0)\\n    {\\n        System.out.println(0);\\n        System.exit(0);\\n    }\\n\\n    long tmp;\\n    /*\\n    if(l >= 2019){\\n        for(int i = 1; i<r-l+1; i++)\\n        {  \\n            tmp = (l+i)%2019;\\n            if(tmp==0){\\n                System.out.println(0);\\n                System.exit(0);\\n            }\\n            else if(min > tmp){\\n                min = tmp;\\n            }\\n        }\\n    }\\n    else{\\n    */\\n        for(int i = 0; i<r-l; i++){\\n            for(int j = 1; j < r-l+1; j++){\\n                tmp = ((l+i)*(l+j))%2019;\\n                if(tmp==0){\\n                    System.out.println(0);\\n                    System.exit(0);\\n\\n                }\\n                else if(min > tmp){\\n                    min = tmp;\\n                }\\n            }\\n        }\\n    //}\\n    System.out.println(min);\\n  }\\n}", "target": "193", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "sb", "sec", "cl", "sys", "system", "sv", "sp", "cr", "bc", "inc", "ch", "ctl", "cle", "sel", "sch", "sw", "tc", "ctrl", "scan", "sq", " Sc", "cs", "ss", "nc", "c", "osc", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "sr"], "l": ["lt", "dl", "lc", "q", "ll", "d", "loc", "el", "hl", "len", "kl", "h", "o", "pl", "li", "log", "n", "lp", "m", "v", "al", "nl", "lo", "le", "lit", "lin", "b", "lr", "sl", "f", "ls", "u", "ml", "z", "left", "la", "g", "lock", "lv", "length", "c", "ul", "L", "e", "w", "t", "x", "p", "ln", "lf", "ld", "all", " L", "ly"], "r": ["br", "rr", "q", "rh", "end", "ri", "d", "rar", "ar", "rs", "nr", "rf", "rt", "vr", "cr", "n", "m", "dr", "rd", "v", "err", "ro", "mr", "or", "R", "res", "right", "b", "lr", "rw", "z", "radius", "rest", "rec", "c", "rel", "e", "fr", "t", "er", "rx", "p", "re", "rc", "rb", "sr"], "min": ["lt", "mins", "low", "mini", "key", "dec", "beta", "mp", "version", "temp", "sol", "part", "best", "Min", "latest", "prefix", "value", "sign", "minute", "m", "member", "default", "sem", "stat", "common", "sum", "small", "mean", "param", "start", "scale", "minimum", "rm", "index", "amin", "sort", "lower", "mint", "only", "lock", "mod", "cm", "mode", "mine", "step", "dem", "max", "conf", "aj", "sim", "sample", "sam", "MIN", "aug", "second", "initial", "first", "just", "next", "sub"], "tmp": ["meg", "elt", "mm", "snap", "acc", "trap", "cur", "beta", "mp", "timeout", "mb", "temp", "tz", "secondary", "prime", "total", "rt", "perm", "latest", "prefix", "sp", "m", "cp", "needed", "tt", "tf", "nom", "msg", "Temp", "attr", "ret", "mut", "pkg", "rm", "mmm", "yy", "tc", " temp", " prev", "orig", "sup", "repl", "mint", "tm", "mk", "gm", " tv", "rup", "partial", "comp", "aaa", "mod", "np", "emp", " t", "obj", "max", "txt", "cmp", "vt", "diff", "t", "pretty", "etc", " mp", "nt", "term"], "i": ["I", "ix", "ri", "phi", "hi", "zi", "iu", "ei", "ip", "ji", "li", "asi", "ij", "ini", "this", "ai", "ni", "ki", "im", "ind", "ori", "qi", "ik", "ia", "us", "u", "ims", "bi", "it", "ui", "ie", "is", " Xi", "pi", "ti", "ic", "ci", "iq", "y", "xi", "ii", "si", "di", "x", "mi"], "j": ["br", "q", "key", "jl", "ji", "jj", "o", "h", "jo", "n", "ij", "v", "err", "jump", "jas", "ne", "ion", "bs", "ge", "ja", "im", "ind", "bj", "b", "oj", "z", "bi", "it", "no", "ie", "pr", "uj", "g", "k", "json", "obj", "aj", "js", "jp", "J", "other", "fr", "kj", "y", "ort", "jc", "jack", "je", "dj"]}}
{"code": "import java.lang.reflect.Array;\\nimport java.util.*;\\nimport java.io.*;\\nimport java.lang.*;\\n\\npublic class Main {\\n    public static void main(String[] args){\\n        Scanner sc = new Scanner(System.in);\\n\\n        String s = sc.next();\\n\\n        if (s.charAt(2) == s.charAt(3) && s.charAt(4) == s.charAt(5))\\n            System.out.println(\"Yes\");\\n        else\\n            System.out.println(\"No\");\\n    }\\n}\\n", "target": "30", "substitutes": {"sc": ["uc", "lc", "cc", "anc", "esc", "sec", "cl", "sys", "system", "ser", "cr", "sv", "sp", "bc", "ec", "capt", "cle", "sch", "sw", "sync", "tc", "scan", "sq", "cs", "ss", "nc", "c", "sk", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "ch", "desc"], "s": ["gs", "sql", "sf", "aws", "sb", "l", "rs", "abs", "sys", "h", "ns", "sv", "sp", "v", "m", "in", "msg", "su", "comm", "bs", "ws", "S", "its", "ms", "less", "ys", "sw", "ats", "str", "se", "sl", "ls", "space", "sts", "string", "is", "ts", "sq", "cs", "g", "ss", "c", "syn", "js", "ds", "sample", "gets", "w", "t", "qs", "say", "ps", "tes", "conv", "hs", "res", "st"]}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.PrintWriter;\\nimport java.net.ConnectException;\\nimport java.rmi.dgc.Lease;\\nimport java.util.ArrayDeque;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.Collections;\\nimport java.util.Deque;\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.NoSuchElementException;\\nimport java.util.Objects;\\nimport java.util.Set;\\nimport java.util.Stack;\\nimport java.util.TreeMap;\\nimport java.util.TreeSet;\\n\\nimport static java.util.Comparator.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tMain main = new Main();\\n\t\tmain.solve();\\n\t\tmain.out.close();\\n\t}\\n\\n\t// ======================================================================\\n\tboolean check(char[] C, int start, int len) {\\n\t\tboolean ans = true;\\n\t\tfor (int i = start; i < start + len / 2; i++) {\\n\t\t\tif(C[i] != C[start + len - i - 1]) {\\n\t\t\t\tans = false;\\n\t\t\t\tbreak;\\n\t\t\t}\\n\t\t}\\n\t\treturn ans;\\n\t}\\n\tpublic void solve() {\\n\t\tchar[] C = ns().toCharArray();\\n\t\tboolean ans = true;\\n\t\tif(!check(C, 0, C.length)) {\\n\t\t\tans = false;\\n\t\t} else {\\n\t\t\tif(!check(C, 0, C.length/2)) {\\n\t\t\t\tans = false;\\n\t\t\t} else if(!check(C, C.length - C.length/2, C.length/2)) {\\n\t\t\t\tans = false;\\n\t\t\t}\\n\t\t}\\n\t\tif(ans)\t\tout.println(\"Yes\");\\n\t\telse\t\tout.println(\"No\");\\n\t}\\n\\n\t// ------------------------------------------\\n\t// \u30e9\u30a4\u30d6\u30e9\u30ea\\n\t// ------------------------------------------\\n\t// Print\\n\tprivate PrintWriter out = new PrintWriter(System.out);\\n\\n\t// Scanner\\n\tprivate FastScanner scan = new FastScanner();\\n\\n\tint ni() {\\n\t\treturn scan.nextInt();\\n\t}\\n\\n\tint[] ni(int n) {\\n\t\tint[] a = new int[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[i] = ni();\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tint[][] ni(int y, int x) {\\n\t\tint[][] a = new int[y][x];\\n\t\tfor (int i = 0; i < y; i++) {\\n\t\t\tfor (int j = 0; j < x; j++) {\\n\t\t\t\ta[i][j] = ni();\\n\t\t\t}\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tlong nl() {\\n\t\treturn scan.nextLong();\\n\t}\\n\\n\tlong[] nl(int n) {\\n\t\tlong[] a = new long[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[i] = nl();\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tlong[][] nl(int y, int x) {\\n\t\tlong[][] a = new long[y][x];\\n\t\tfor (int i = 0; i < y; i++) {\\n\t\t\tfor (int j = 0; j < x; j++) {\\n\t\t\t\ta[i][j] = nl();\\n\t\t\t}\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tString ns() {\\n\t\treturn scan.next();\\n\t}\\n\\n\tString[] ns(int n) {\\n\t\tString[] a = new String[n];\\n\t\tfor (int i = 0; i < n; i++) {\\n\t\t\ta[i] = ns();\\n\t\t}\\n\t\treturn a;\\n\t}\\n\\n\tString[][] ns(int y, int x) {\\n\t\tString[][] a = new String[y][x];\\n\t\tfor (int i = 0; i < y; i++) {\\n\t\t\tfor (int j = 0; j < x; j++) {\\n\t\t\t\ta[i][j] = ns();\\n\t\t\t}\\n\t\t}\\n\t\treturn a;\\n\t}\\n}\\n\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "123", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(final String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tsc.close();\\n\t\tprtln(A * B);\\n\t}\\n\\n\tpublic static <T> void prtln(T t) { System.out.println(t); }\\n}", "target": "35", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "sh", "cr", "bc", "sv", "sp", "inc", "ck", "nl", "ko", "ctl", "capt", "ec", "cle", "sch", "cam", "tc", "ctrl", "scan", "sq", "cs", "ss", "nc", "c", "syn", "osc", "jp", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "sub"], "A": ["D", "AA", "F", "AU", "CA", "N", "AC", "HA", "Ax", "As", "SA", "G", "S", "P", "T", "IA", "R", "a", "GA", "V", "LA", "M", "AN", "AV", "AL", "H", "C", "AP", "AB", "An", "L", "RA", "AR", "AST", "EA", "X", "BA", "mA", "AF"], "B": ["D", "I", "Z", "WB", "BB", "LB", "TB", "BI", "E", "DB", "N", "BU", "VB", "G", "S", "P", "FB", "T", "IB", "R", "BF", "BR", "b", "BC", "V", "BE", "Q", "M", "C", "BO", "AB", "Y", "L", "J", "EB", "BA", "OB", "Bs"], "t": ["q", "r", "pt", "wt", "l", "h", "rt", "ta", "o", "n", "m", "tip", "v", "tr", "tt", "T", "at", "a", "gt", "f", "type", "it", "ts", "g", "qt", "bt", "c", "txt", "ct", "w", "e", "s", "p", "kt", "y", "dt", "x", "term"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main{\\n\\n\tpublic static void main(String[] args) {\\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\\n\\n\t\tScanner sc = new Scanner(System.in);\\n\\n\t\tint S = sc.nextInt();\\n\t\tint W = sc.nextInt();\\n\\n\\n\\n\t\tif(S == W || S < W) {\\n\t\t\tSystem.out.println(\"unsafe\");\\n\t\t}\\n\\n\t\telse {\\n\t\t\tSystem.out.println(\"safe\");\\n\t\t}\\n\\n\t\tsc.close();\\n\t}\\n\\n}\\n", "target": "177", "substitutes": {}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n\\n        Scanner in = new Scanner(System.in);\\n        String[] params = in.nextLine().split(\" \");\\n        int a = Integer.parseInt(params[0]);\\n        int b = Integer.parseInt(params[1]);\\n\\n        System.out.println( a <= 5 ? 0 : a <= 12 ? b / 2 : b );\\n\\n    }\\n\\n}\\n", "target": "249", "substitutes": {"in": ["r", "gin", "d", "bin", "inf", "from", "con", "l", " din", "isin", "log", "id", "inc", "n", "m", "sin", "ini", "err", "source", "read", "doc", "inn", "file", "IN", "show", "rin", "get", "run", "user", "lines", "f", "In", "world", "io", "reader", "scan", "din", "is", "thin", "kin", "inner", "en", "ins", "input", "std", "conf", "old", "out", "check", "cin", "info", "char", "ln", "all", " In", "line"], "params": ["mm", "points", "sql", "details", "parse", "rs", "stats", "styles", "settings", "pins", "parts", "units", "tools", "pps", "ms", "param", "Par", "cms", "search", "pos", "radius", "ams", "vs", "phys", "words", "pi", "Parameters", "json", "conf", "steps", "times", "services", "pretty", "changes", "terms", "AMS", "actions", "padding", "ps", "pas", "requires", "conv", "aux", "pres", "properties", "fps", "apps", "config", "options"], "a": ["ae", "r", "ca", "ava", "d", "oa", "ta", "n", "da", "aa", "sta", "sa", "sha", "power", "ua", "ai", "isa", "act", "A", "f", "ia", "u", "an", "la", "ga", "ao", "xa", "div", "i", "ea", "area", "ab", "aff", "pa", "ba", "aaa", "na", "aka", "c", "aj", "fa", "ada", "alpha", "ma", "t", "as", "p", "ac", "era", "au", "va", "x"], "b": ["r", "d", "xb", "wb", "sb", "mb", "l", "h", "bc", "v", "n", "m", "bf", "aa", "bs", "bp", "bd", "f", "u", "fb", "z", "bi", "ib", "nb", "ab", "i", "g", "ba", "c", "e", "out", "t", "s", "p", "bb", "cb", "y", "be", "rb", "x", "B"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.math.BigDecimal;\\nimport java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\\n        BigDecimal A = sc.nextBigDecimal();\\n        BigDecimal B = sc.nextBigDecimal();\\n        sc.close();\\n        System.out.println(A.multiply(B).toBigInteger());\\n    }\\n}\\n", "target": "15", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "acc", "cc", "anc", "esc", "sec", "co", "cl", "sys", "sh", "bc", "cr", "sp", "sv", "tk", "ck", "nl", "capt", "ko", "ec", "cle", "sel", "spec", "cu", "sch", "cam", "sw", "sync", "tc", "cv", "scan", "sq", "cs", "ss", "nc", "c", "syn", "osc", "cmp", "Sc", "gc", "exp", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "psc", "ch", "desc"], "A": ["AA", "I", "AU", "Alpha", "AY", "CA", "AE", "AC", "HA", "Ax", "Av", "SA", "IA", "GA", "LA", "AH", "AN", "Ant", "AV", "Ah", "AL", "ACC", "AP", "AB", "An", "NA", "RA", "AR", "X", "ACK", "BA", "mA", "AF", "ACT", "AT"], "B": ["WB", "BB", "LB", "TB", "RB", "BL", "BM", "Builder", "USB", "DB", "VB", "NB", "GB", "IB", "BR", "b", "BC", "V", "M", "CB", "Bob", "BS", "BY", "C", "BO", "JB", "AB", "L", "Other", "J", "EB", "Bill", "BA", "OB", "Bern", "Blue", "Bs"]}}
{"code": "import java.util.*;\\nclass Main\\n{\\n    public static void main (String[] args)\\n    {\\n        Scanner sc = new Scanner(System.in);\\n        int a = sc.nextInt();\\n        int b = sc.nextInt();\\n        int x;\\n        if(b >= 100) x = 1000 * a + b;\\n        else if(b >= 10) x = 100 * a + b; \\n        else x = 10 * a + b;\\n        String ans = \"No\";\\n        for(int i = 1; i < 1000; i++)\\n            if(i * i == x)  ans = \"Yes\";\\n        System.out.println(ans);\\n    }\\n}", "target": "83", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "sh", "sv", "sp", "bc", "cr", "inc", "ck", "cle", "sch", "Desc", "sw", "sync", "exec", "tc", "scan", "sq", "cs", "ss", "nc", "c", "osc", "Sc", "out", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc", "sub"], "a": ["ae", "ca", "acc", "d", "ax", "ar", "aq", "oa", "ta", "aa", "app", "da", "sta", "sa", "al", "this", "ak", "ai", "act", "A", "f", "ia", "an", "la", "ga", "ao", "ab", "ea", "area", "apa", "aff", "ba", "aaa", "ach", "c", "aj", "eff", "alpha", "ma", "as", "eas", "p", "ac", "au", "add", "to", "am"], "b": ["br", "r", "d", "beta", "sb", "base", "l", "ob", "o", "h", "bc", "big", "v", "n", "m", "db", "gb", "bh", "bf", "ch", "batch", "bs", "bp", "ben", "bool", "back", "reb", "f", "eb", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "g", "ba", "bg", "c", "bis", "e", "bo", "t", "p", "bb", "cb", "y", "be", "rb", "erb", "B"], "x": ["ix", "ex", "wx", "work", "ax", "n", "v", "xf", "xy", "width", "tx", "at", "xe", "xx", "index", "f", "px", "an", "xc", "z", "xa", "hex", "full", "dx", "lex", "ext", "status", "mx", "xt", "max", "ct", "w", "X", "t", "rx", "check", "exp", "out", "p", "y", "xi", "xs", "xp", "to", "ox"], "ans": [" means", "uns", "ros", "ents", "ons", "eps", "ras", "aus", "san", "rs", "anks", "oss", "eds", "ns", "ads", "ks", "ends", "ands", "os", "ars", "can", "yes", "ms", "ids", "arts", "ANS", "ys", "amps", "ats", "ens", "ants", "inks", "an", "ols", "angs", "aos", "mas", "is", "ins", "ongs", "ds", "aps", "arms", "as", "s", "posts", "fts", "xs", "rans", "outs", "ann"], "i": ["q", "I", "ix", "ri", "phi", "gi", "zi", "hi", "iu", "ei", "l", "chain", "ip", "li", "o", "id", "asi", "n", "m", "v", "me", "ini", "ai", "ki", "im", "ind", "qi", "us", "f", "init", "ik", "z", "j", "bi", "it", "ui", "ie", "pi", "k", "ti", "ic", "ci", "sim", "my", "cli", "out", "multi", "iq", "iter", "info", "y", "xi", "ii", "si", "di", "mi"]}}
{"code": "import java.util.Scanner;\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\t\tScanner stdIn = new Scanner(System.in);\\n\t\t\\n\t\tString a = stdIn.next();\\n\t\tString b = stdIn.next();\\n\t\tString c = new String(a+b);\\n\t\tint ab = Integer.parseInt(c);\\n\t\t\\n\t\tif(Math.sqrt(ab) == (int)Math.sqrt(ab)) {\\n\t\t\tSystem.out.println(\"Yes\");\\n\t\t}else {\\n\t\t\tSystem.out.println(\"No\");\\n\t\t}\\n\t\t\\n\t}\\n\\n}\\n", "target": "83", "substitutes": {"stdIn": ["mdIns", "mdInput", "STDIn", "cmdin", "mdOut", "stdOut", "mdIn", "cmdIns", "STDOut", " stdIN", "cmdIn", "randIn", "randin", " stdin", " stdIns", "ndIns", "stdIN", "ndOut", "stdInput", " stdInput", "STDInput", "STDIns", "ndin", "cmdOut", "ndIN", " stdOut", "stdIns", "stdin", "randOut", "ndIn", "randIN"], "a": ["ae", "ca", "ax", "ar", "l", "oa", "aa", "app", "aw", "sa", "al", "ak", "ai", "art", "A", "at", "ia", "an", "la", "ao", "ea", "apa", "area", "aria", "ba", "aaa", "aka", "aj", "ap", "ma", "as", "ac", "au", "ata", "am"], "b": ["br", "d", "beta", "sb", "ob", "mb", "bc", "gb", "bf", "db", "by", "bs", "lib", "ub", "eb", "f", "fb", "j", "bi", "ib", "nb", "g", "ba", "bis", "body", "blue", "bb", "cb", "be", "rb", "erb", "B"], "c": ["r", "lc", "ca", "cc", "d", "l", "co", "cr", "n", "cp", "v", "m", "dc", "ec", "cy", "cu", "f", "fc", "xc", "tc", "ctrl", "sc", "C", "cont", "cs", "cm", "abc", "ci", "ct", "e", "gc", "t", "etc", "p", "ac", "char", "cb", "crit", "cf"], "ab": ["num", "ca", "av", "ex", "xb", "sb", "ob", "mb", "abs", "rb", "abl", "rab", "bar", "bc", "lab", "ij", "db", "hab", "abe", "abis", "abulary", "af", "ub", "eb", "fb", "ib", "null", "nb", "cd", "area", "abi", "fab", "pb", "abc", "AB", "aka", "tab", "ada", "ac", "bb", "au", "Ab", "abb"]}}
{"code": "import java.util.*;\\nimport java.io.*;\\nimport java.math.*;\\nclass Main{\\n\tstatic int mod1 = (int)1e9+7;\\n\tpublic static PrintWriter out = new PrintWriter (new BufferedOutputStream(System.out));\\n\tpublic static void main(String sp[])throws IOException{\\n\t\tFastReader sc = new FastReader();\t\\n\t\tlong n = sc.nextLong();\\n\t\tlong count=1;\\n\t\tlong g=0;\\n\t\tfor(int i=0;i<n;i++){\\n\t\t\tlong val = sc.nextLong();\\n\t\t\tif(val==count){\\n\t\t\t\tcount++;\\n\t\t\t\tg++;\\n\t\t\t}\\n\t\t}\\n\t\tif(g==0)\\n\t\tSystem.out.println(\"-1\");\\n\t\telse System.out.println(n-g);\\n    }\\n\t\\n\t\\n\tpublic static long gcd(long a, long b){\\n\t\tif(a==0)\\n\t\t\treturn b;\\n\t\t\\n\t\treturn gcd(b%a,a);\\n\t}\\n\tpublic static class FastReader {\\n\t\tBufferedReader br;\\n\t\tStringTokenizer st;\\n\t\tpublic FastReader() {\\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\\n\t\t}\\n\t\tString next() {\\n\t\t\twhile (st == null || !st.hasMoreTokens()) {\\n\t\t\t\ttry {\\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\\n\t\t\t\t} catch (Exception r) {\\n\t\t\t\t\tr.printStackTrace();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t\treturn st.nextToken();\\n\t\t}\\n\t\tint nextInt() {\\n\t\t\treturn Integer.parseInt(next());//converts string to integer\\n\t\t}\\n\t\tdouble nextDouble() {\\n\t\t\treturn Double.parseDouble(next());\\n\t\t}\\n\t\tlong nextLong() {\\n\t\t\treturn Long.parseLong(next());\\n\t\t}\\n\t\tString nextLine() {\\n\t\t\tString str = \"\";\\n\t\t\ttry {\\n\t\t\t\tstr = br.readLine();\\n\t\t\t} catch (Exception r) {\\n\t\t\t\tr.printStackTrace();\\n\t\t\t}\\n\t\t\treturn str;\\n\t\t}\\n\t}\\n}", "target": "234", "substitutes": {"mod1": ["Mod1", "mod2", "mod0", " mod7", " mod2", "MOD7", "mod7", "MOD0", "MOD1", "Mod0", "Mod2", "MOD2", " mod0", "Mod7"], "out": ["println", "r", " Out", "ex", "outer", "bin", " err", "writer", "error", "sys", "o", "log", "console", "m", "conn", "err", "in", "msg", "print", "OUT", "os", "file", "report", "write", "user", "sw", "res", "str", "at", "list", "io", "aos", "Out", "null", "status", "inner", "screen", "ins", "output", "input", "txt", "obj", "std", "w", "inv", "er", "s", "dir", "dis", "net", "conv", "nt", "ch", "outs", "desc"], "sp": [" sv", " Sp", " ss", "bsp", "sh", "sv", "spe", "Sp", "SP", "pp", "sw", " ap", "se", " SP", "esp", " sap", "space", "ss", "html", "txt", "ap", "p", "op", "up", "ps", "span", "ch"], "sc": ["usc", "sac", "uc", "lc", "cc", "esc", "sb", "sec", "qu", "cl", "sys", "sv", "bc", "cr", "ec", "sch", "fc", "sync", "ssl", "tc", "ctrl", "sq", "cs", "nc", "pb", "c", "osc", "ct", "Sc", "gc", "scl", "asc", "isc", "ctx", "SC", "mc", "pc", "rc", "ch", "desc"], "n": ["nu", "num", "r", "nn", "l", "number", "un", "len", "nr", "N", "o", "gn", "ns", "m", "v", "ne", "nan", "nl", "cn", "sn", "z", "j", "no", "nb", " N", "nc", "na", "np", "en", "c", "w", "gc", "t", "s", "p", "ln", "net", "size", "nt", "x"], "count": ["num", "q", "ount", "ctr", "coll", "d", "key", "current", "number", "l", "cond", "len", "N", "total", "id", "value", "cr", "v", "sum", "gl", "cu", "Count", "ind", "index", "code", "f", "test", "z", "cd", "nb", "cont", "cs", "length", "k", "nc", "c", "max", "ct", "gc", "counter", "t", "p", "ctx", "last", "size", "nt"], "g": ["q", "gs", "reg", "d", "group", "gi", "gate", "l", "gd", "gn", "tg", "eg", "v", "m", "gy", "gb", "msg", "mg", "G", "pg", "ge", "gl", "gg", "go", "gt", "f", "gen", "z", "ga", "j", "it", "gain", "gm", "green", "bg", "k", "c", "ig", "w", "gc", "t", "ng", "p", "gu", "s", "y", "gz", "gr", "gp"], "i": ["q", "I", "r", "ix", "phi", "iu", "ip", "point", "o", "li", "id", "m", "me", "ini", "in", "batch", "ai", "ms", "im", "ind", "qi", "inter", "index", "f", "us", "init", "u", "j", "it", "ui", "is", "ie", "pi", "ti", "ic", "ci", "c", "sim", "my", "e", "multi", "p", "y", "ii", "si", "di", "x", "mi", "ish"], "val": ["valid", "il", "reg", "acc", "ee", "cal", "key", "el", "vals", "var", "ver", "li", "pl", "value", "Val", "v", "bal", "al", "aval", "item", "sel", "sum", "le", "ret", "ind", "gold", "als", "test", "rol", "dev", "vol", "eval", "VAL", "pal", "def", "ctx", "all", "ty"], "a": ["ae", "ca", "ar", "l", "oa", "o", "v", "aa", "da", "m", "sta", "sa", "al", "ak", "le", "A", "at", "f", "ia", "an", "la", "z", "ao", "j", "ab", "pa", "ea", "area", "div", "ba", "aaa", "c", "aj", "alpha", "e", "ma", "as", "s", "p", "ac", "t", "y", "au", "va", "x", "am"], "b": ["r", "d", "wb", "sb", "base", "l", "ob", "h", "bc", "v", "m", "gb", "bf", "bs", "back", "f", "bd", "u", "fb", "z", "j", "bi", "ib", "nb", "ab", "ba", "c", "e", "w", "t", "p", "bb", "cb", "y", "be", "rb", "to", "x", "B"], "br": ["r", "ctr", "pt", "sb", "bro", "shr", "nr", "bsp", "vr", "abl", "bc", "cr", "ber", "kr", "dr", "bh", "tr", "bridge", "Tr", "bre", "bl", "bs", "bn", "bp", "Br", "mr", "BR", "lr", "hr", "bm", "pr", "wr", "bt", "rel", "browser", "rob", "yr", "fr", "rb", "sr", "gr"], "st": ["set", "r", "stage", "pt", "l", "sth", "cl", "rt", "sh", "usr", "sv", "tmp", "dr", "rand", "tr", "stat", "ste", "nt", "St", "stri", "sn", "sw", "ut", "str", "start", "se", "ist", "sm", "sl", "inst", "const", "ost", "stack", "sts", "sty", "null", "pr", "est", "rest", "et", "xt", "ast", "bt", "std", "step", "mt", "ct", "fr", "t", "nd", "p", "s", "ft", "stable", "th", "ust", "ST"]}}
{"code": "\\n\\nimport java.util.Scanner;\\n\\npublic class Main {\\n\t   static long gcd(long a, long b) \\n\t    { \\n\t    if (a == 0) \\n\t        return b;  \\n\t    return gcd(b % a, a);  \\n\t    } \\n\t      \\n\t    // method to return LCM of two numbers \\n\t    static long lcm(long a, long b) \\n\t    { \\n\t        return (a*b)/gcd(a, b); \\n\t    } \\n\tstatic long find(long x,long c,long d)\\n\t{\\n\t\tlong ans=0;\\n\t\tans=x/d;\\n\t\tans+=x/c;\\n\t\tans-=x/lcm(c,d);\\n\t\treturn ans;\\n\t}\\n\tpublic static void main(String args[])\\n\t{\\n\t\tScanner scan=new Scanner(System.in);\\n\t\tlong a=scan.nextLong();\\n\t\tlong b=scan.nextLong();\\n\t\tlong c=scan.nextLong();\\n\t\tlong d=scan.nextLong();\\n\t\t\\n\t\tlong ans=(b-find(b,c,d))-((a-1)-find(a-1,c,d));\\n\t\tSystem.out.println(ans);\\n\t}\\n}\\n", "target": "9", "substitutes": {"a": ["ae", "ca", "ar", "l", "oa", "o", "h", "ta", "n", "m", "da", "aa", "sta", "sa", "al", "sha", "ak", "ai", "isa", "le", "any", "at", "A", "index", "ia", "ack", "f", "count", "an", "la", "z", "xa", "ao", "ity", "ab", "i", "ea", "area", "div", "pa", "g", "na", "ba", "aaa", "aka", "c", "aj", "alpha", "ma", "as", "t", "ac", "era", "au", "x", "am"], "b": ["br", "r", "d", "wb", "beta", "sb", "base", "l", "ob", "mb", "bc", "value", "v", "n", "m", "by", "bs", "bd", "eb", "f", "fb", "z", "bi", "ib", "nb", "ab", "i", "two", "g", "ba", "c", "bis", "e", "t", "p", "bb", "cb", "y", "be", "rb", "B"]}}
{"code": "\\nimport java.util.*;\\nimport java.lang.*;\\n\\nclass Main {\\n\tpublic static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int A = sc.nextInt();\\n        int B = sc.nextInt();\\n        int tapNumber = 0;\\n        int mouseNumber = 1;\\n        int min = 0;\\n\\n        while(true){\\n            mouseNumber = tapNumber * (A - 1) + 1;\\n            if(mouseNumber >= B){\\n                min = tapNumber;\\n                break;\\n            }\\n            tapNumber ++;\\n        }\\n\\n\\n        System.out.println(min);\\n\\n    }\\n}\\n\\n\\n\\n", "target": "101", "substitutes": {"sc": ["usc", "lc", "cc", "anc", "esc", "sb", "sec", "cl", "sys", "system", "cr", "bc", "sv", "sp", "inc", " scr", "ck", "capt", "cle", "sch", "sw", "sync", "tc", "scan", "sq", " Sc", "cs", "ss", "nc", "c", "syn", "osc", "Sc", "out", "gc", "scl", "asc", "scope", "isc", "ctx", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "A": ["AA", "Array", "AU", "AY", "CA", "N", "UA", "AC", "HA", "Ax", "As", "SA", "P", "IA", "R", "a", "GA", "LA", "V", "M", "API", "What", "ACC", "AV", "H", "C", "One", "area", "AGE", "AB", "An", "AS", "L", "RA", "AR", "AST", "EA", "X", "Area", "BA", "mA", "AF", "ACT", "PA"], "B": ["D", "I", "WB", "BB", "F", "LB", "TB", "BI", "BL", "USB", "DB", "N", "BU", "VB", "NB", "GB", "G", "S", "P", "IB", "R", "BR", "b", "BC", "V", "M", "CB", "BS", "BO", "Number", "AB", "L", "Y", "J", "EB", "X", "BA", "OB", "Blue", "Bs"], "tapNumber": ["TapNumber", "tapDocument", "apNumber", " tapnumber", "tapnumber", "tapLength", "apNumbers", "batchNumber", "mouseLength", " tapNo", "apnumber", "pingLength", "batchnumber", " tapNumbers", " tapCount", "pingNumber", "tapNum", " tapCounter", "TapCounter", "TapCount", "tapCount", "mouseCount", "apDocument", "tapNumbers", " tapLength", "TapNum", "tapNo", "batchDocument", "tapCounter", "batchNumbers", "mouseCounter", "pingNum", "mouseNo", " tapDocument", "mouseNum", "TapNo", "pingCounter", " tapNum"], "mouseNumber": ["queryNum", "mouseNUM", " mouseCounter", " mouseNo", " mouseNUM", "pointerNum", "MouseCounter", " mousenumber", "hoverNumber", "hoverNo", "queryNo", "pointernumber", "MouseNum", "MouseNumber", "hoverCount", "hoverCounter", "queryNumber", "mouseCount", " mouseNum", "hoverNUM", "Mousenumber", " mouseCount", "mousenumber", "pointerCount", "MouseCount", "mouseCounter", "hoverNum", "mouseNo", "mouseNum", "queryNUM", "pointerNumber"], "min": ["lt", "mn", "num", "mins", "mini", "dec", "version", "margin", "temp", "sol", "part", "Min", "mid", "minute", "m", "emin", "stat", "nom", "small", "state", "mon", "start", "minimum", "pos", "amin", "init", "sort", "mouse", "lower", "mint", "Mini", "only", "mod", "mine", "rel", "max", "dem", "step", "diff", "local", "MIN", "size", "aug", "second", "span", "initial", "first", "mit", "sub"]}}
{"code": "import java.util.*;\\npublic class Main {\\n\tpublic static void main(String[] args){\\n\t\tScanner sc = new Scanner(System.in);\\n\t\t\\n\t\tint a = sc.nextInt();\\n\t\tint b = sc.nextInt();\\n\t\tint c = sc.nextInt();\\n      \tboolean d;\\n      \\n      \tif((a+b+c) < 22) d = true;\\n\t\telse d = false;\\n\\n\t\tif(d) System.out.println(\"win\");\\n      \telse System.out.println(\"bust\");\\n\t}\\n}", "target": "129", "substitutes": {"sc": ["usc", "lc", "acc", "cc", "esc", "row", "sb", "sec", "cl", "sys", "system", "sh", "cr", "bc", "sv", "sp", "inc", " scr", "dc", "ck", "ec", "ctl", "ko", "cle", "sch", "sw", "tc", "ctrl", "scan", "sq", "cs", "ss", "nc", "osc", "Sc", "gc", "scl", "asc", "scope", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "desc"], "a": ["ae", "r", "ca", "ax", "aq", "oa", "ta", "da", "aa", "sta", "sa", "ama", "ai", "af", "A", "ia", "an", "la", "ga", "ao", "ab", "ea", "area", "apa", "aria", "aff", "ba", "aaa", "ach", "aka", "aj", "alpha", "ma", "eas", "ac", "era", "au", "va", "am"], "b": ["br", "bas", "r", "beta", "sb", "ob", "l", "mb", "bc", "v", "n", "bf", "db", "gb", "bs", "ub", "f", "eb", "u", "fb", "beck", "j", "bi", "ib", "nb", "ab", "i", "g", "ba", "bis", "e", "bb", "cb", "y", "be", "rb", "B"], "c": ["uc", "lc", "ca", "cc", "l", "cf", "bc", "cr", "n", "ce", "m", "unc", "v", "dc", "cp", "ec", "cu", "fc", "f", "u", "tc", "z", "cv", "cd", "C", "cs", "g", "cm", "ci", "e", "ct", "t", "etc", "ac", "cb", "ch"], "d": ["dh", "D", "pd", "r", "dat", "dl", "true", "created", "l", "dd", "fd", "h", "de", "n", "m", "ad", "rd", "db", "sd", "da", "md", "dict", "td", "ind", "bd", "f", "send", "di", "z", "cd", "ed", "g", "ok", "ds", "debug", "w", "ded", "t", "nd", "p", "ld", "y", "did", "del", "st"]}}
{"code": "import java.util.*;\\n\\npublic class Main {\\n\tpublic static void main(String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint N = sc.nextInt();\\n\t\tint[] p = new int[N];\\n\t\tfor(int i=0; i<N; i++)\\n\t\t\tp[i] = sc.nextInt();\\n\t\t\\n\t\tint cnt = 0;\\n\t\tfor(int i=0; i<N; i++) {\\n\t\t\tif(p[i]!=i+1) {\\n\t\t\t\tcnt++;\\n\t\t\t}\\n\t\t}\\n\t\tSystem.out.println(cnt==0 || cnt==2 ? \"YES\" : \"NO\");\\n\t\tsc.close();\\n\t}\\n}\\n", "target": "82", "substitutes": {"sc": ["usc", "arc", "lc", "cc", "anc", "esc", "sb", "sec", "co", "cl", "sys", "system", "sh", "bc", "cr", "sv", "sp", "ck", "ec", "capt", "ctl", "cle", "sel", "irc", "sch", "RC", "sw", "fc", "sl", "sync", "tc", "scan", "sq", "cs", "nc", "pb", "c", "syn", "osc", "Sc", "gc", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "psc", "ch", "desc"], "N": ["D", "I", "Z", "Node", "TN", "F", "FN", "ND", "NM", "SN", "NP", "NE", "NB", "n", "O", "G", "S", "Ni", "P", "NG", "T", "NO", "R", "NS", "Na", "NR", "V", "ANY", "M", "NH", "Len", "GN", "NC", "Sn", "C", "NN", "Num", "Y", "L", "NA", "K", "J", "Net", "Ne", "NI", "NT", "Ns"], "p": ["q", "pn", "post", "pt", "ping", "pen", "mp", "ip", "vp", "tp", "point", "pl", "sp", "n", "cp", "lp", "rep", "pe", "per", "bp", "P", "where", "pp", "at", "pro", "pos", "pkg", "pers", "it", "press", "pr", "pa", "pi", "pb", "np", "c", "jp", "ap", "exp", "up", "ps", "pc", "pres"], "i": ["set", "q", "ix", "zi", "iu", "ei", "li", "n", "ai", "ki", "str", "f", "is", "ic", "c", "y", "oi", "di", "x", "ri", "fi", "l", "chain", "ip", "ji", "point", "o", "id", "ij", "in", "client", "io", "bi", "it", "inner", "ci", "sim", "cli", "ii", "span", "ex", "phi", "hi", "progress", "ind", "u", "ir", "status", "pi", "iso", "my", "gu", "iri", "xi", "si", "mi", "I", "gi", "iy", "v", "m", "ini", "err", "im", "qi", "index", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "multi", "iter", "info", "to"], "cnt": [" Cnt", "nct", "pcnt", "Cnc", " cnc", "CNT", " Cnton", "lcnc", "nnc", " Cct", "ncct", "cNT", "pcnd", "cnd", "cnc", "lcnn", " cred", "lcred", " cnn", " cNT", "lcNT", "Cnn", "cred", "lcnt", "cct", "Cct", "cdist", "cnn", "ncdist", "nnt", "cnton", " cnd", "ncnd", "Cnt", " cnton", "pcct", "ncnt", "lcnton", " cdist", "nNT", "pcdist", " Cred", "lcct", " cct"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\t@SuppressWarnings(\"resource\")\\n\tpublic static void main(String[] args){\\n\t\tScanner in = new Scanner(System.in);\\n\t\tint a = in.nextInt();\\n\t\tint b = in.nextInt();\\n\t\tSystem.out.println(a*b+\" \"+(2*a+2*b));\\n\t}\\n}", "target": "92", "substitutes": {"in": ["r", "end", "gin", "bin", "inf", "con", " din", "isin", "log", "id", "inc", "n", "sin", "ini", "err", "doc", "per", "inn", "file", "IN", " IN", "sum", "state", "rin", "user", "client", "pid", "serv", "get", "ind", "In", "world", "io", "reader", "scan", "din", "is", "i", "thin", "inner", "json", "en", "ins", "input", "std", "conf", "out", "as", "er", "cin", "info", "check", "ma", "add", "net", "all", "readable"], "a": ["ae", "ca", "ax", "aq", "l", "oa", "qa", "ta", "deb", "n", "m", "da", "aa", "sta", "sa", "ama", "ai", "val", "act", "A", "at", "ia", "u", "an", "la", "ga", "ao", "z", "xa", "ab", "i", "ea", "area", "apa", "aff", "ba", "na", "aaa", "aka", "c", "aj", "alpha", "e", "ma", "t", "as", "p", "ac", "s", "au", "add", "aux", "am"], "b": ["br", "another", "d", "wb", "beta", "sb", "ob", "l", "base", "bc", "n", "gb", "v", "db", "m", "bs", "bool", "back", "eb", "fb", "z", "j", "bi", "ib", "nb", "ab", "i", "two", "g", "ba", "bt", "c", "bis", "t", "bb", "cb", "be", "rb", "B"]}}
{"code": "import java.util.Scanner;\\n\\npublic class Main {\\n\\n\tpublic static void main(final String[] args) {\\n\t\tScanner sc = new Scanner(System.in);\\n\t\tint K = sc.nextInt();\\n\t\tint N = sc.nextInt();\\n\t\tint[] A = new int[N];\\n\t\tfor(int i = 0; i < N; i++) {\\n\t\t\tA[i] = sc.nextInt();\\n\t\t}\\n\t\tsc.close();\\n\t\tint max = 0;;\\n\t\tfor(int i = 0; i < N - 1; i++) {\\n\t\t\tmax = Math.max(max, A[i + 1] - A[i]);\\n\t\t}\\n\t\tmax = Math.max(max, K - A[N - 1] + A[0]);\\n\t\tSystem.out.println(K - max);\\n\t}\\n}", "target": "10", "substitutes": {"sc": ["usc", "arc", "uc", "lc", "cc", "anc", "esc", " SC", "sec", "cl", "sys", "system", "sh", "Scan", "bc", "sv", "sp", "cr", "inc", "dc", "ck", "ctl", "capt", "ec", "cle", "sch", "se", "sync", "fc", "tc", "ctrl", "scan", "sq", " Sc", "cont", "cs", "sci", "ss", "nc", "pb", "c", "osc", "Sc", "gc", "ng", "scl", "asc", "isc", "SC", "mc", "pc", "rc", "conv", "ch", "sub"], "K": ["Z", "D", "I", "F", "MK", "KING", "KE", "KA", "KK", "Ka", "KS", "VK", "ck", "G", "S", "P", "T", "R", "Q", "V", "M", "KN", "H", "C", "U", "k", "OK", "KR", "Y", "L", "J", "PK", "X", "Max", "SK", "B"], "N": ["D", "I", "Z", "Node", "TN", "FN", "E", "ND", "NM", "SN", "NP", "NE", "NB", "n", "Size", "O", "G", "No", "S", "Ni", "P", "T", "NL", "NO", "R", "NS", "Q", "NR", "V", "M", "NH", "AN", "Len", "GN", "NC", "C", "Sn", "NN", "NA", "Num", "L", "Y", "J", "NOR", "X", "NI", "NT", "B", "Ns"], "A": ["AA", "I", "Array", "App", "MA", "AU", "E", "Alpha", "CA", "AY", "AE", "AC", "HA", "The", "All", "Av", "At", "As", "SA", "P", "Ar", "IA", "ATA", "a", "GA", "V", "LA", "JA", "M", "TA", "API", "AV", "ACC", "AP", "AM", "AB", "An", "NA", "AR", "EA", "Answer", "BA", "mA", "AF", "ACT", "PA", "B", "AT"], "i": ["set", "q", "ix", "zi", "iu", "base", "ei", "li", "me", "batch", "ai", "ki", "ims", "is", "ic", "c", "y", "oi", "di", "x", "ri", "fi", "chain", "ip", "ji", "point", "id", "ij", "in", "client", "a", "io", "slice", "bi", "it", "inner", "g", "ci", "sim", "cli", "ii", "phi", "hi", "this", "print", "list", "u", "pi", "iso", "my", "xi", "si", "mi", "I", "key", "gi", "iy", "v", "m", "ini", "err", "im", "qi", "us", "init", "j", "ity", "ui", "ie", "uri", "ti", "multi", "info", "to"], "max": ["set", "ax", "mask", "shift", "n", "cover", "can", "scale", "gt", "patch", "mx", "cm", "cmp", "last", "box", "all", "med", "cost", "x", "res", "next", "window", "map", "st", "maximum", "current", "chain", "best", "global", "zero", "top", "call", "ge", "largest", "highest", "or", "right", "view", " Max", "full", "rest", "lock", "k", "exp", "grow", "pop", "end", "ex", " MAX", "after", "print", "mean", "act", "auto", "wrap", "length", "mod", "head", "ma", "average", "p", "add", "height", "key", "dot", "master", "prime", "total", "cl", "v", "m", "cp", "default", "rank", "sum", "inter", "min", "range", "mad", "mix", "step", "check", "t", "Max", "MAX", "size"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.IOException;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\n\\npublic class Main {\\n    private static final int MOD = (int) Math.pow(10, 9);\\n\\n    public static void main(String[] args) {\\n        FastReader sc = new FastReader();\\n        int n = sc.nextInt();\\n        String str = sc.next();\\n        LinkedList<Character> stack = new LinkedList<>();\\n\\n        for (int i = 0; i < str.length(); i++) {\\n            char c = str.charAt(i);\\n\\n\\n                while (!stack.isEmpty() && stack.peek() == c) {\\n                    stack.pop();\\n                }\\n                stack.push(c);\\n\\n        }\\n        System.out.println(stack.size());\\n\\n\\n        System.exit(0);\\n    }\\n\\n    static class FastReader {\\n        BufferedReader br;\\n        StringTokenizer st;\\n\\n        public FastReader() {\\n            br = new BufferedReader(new InputStreamReader(System.in));\\n        }\\n\\n        String next() {\\n            while (st == null || !st.hasMoreElements()) {\\n                try {\\n                    st = new StringTokenizer(br.readLine());\\n                } catch (IOException  e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            return st.nextToken();\\n        }\\n\\n        int nextInt() {\\n            return Integer.parseInt(next());\\n        }\\n\\n        long nextLong() {\\n            return Long.parseLong(next());\\n        }\\n\\n        double nextDouble() {\\n            return Double.parseDouble(next());\\n        }\\n\\n        String nextLine() {\\n            String str = \"\";\\n            try{\\n                str = br.readLine();\\n            } catch (IOException e) {\\n                e.printStackTrace();\\n            }\\n            return str;\\n        }\\n    }\\n}\\n", "target": "218", "substitutes": {"MOD": ["VERSION", " power", " MAX", " alpha", "version", " B", "prime", "Prime", " max", "m", "power", " X", "P", "T", "R", " order", "count", "M", "ID", " seed", " R", "pi", "max", "L", "t", " M", "MAX", "seed", " nu"], "sc": ["arc", "sac", "uc", "usc", "lc", "cc", "anc", "esc", "rs", "sec", "cl", "sys", "bc", "cr", "sp", "ec", "cle", "src", "cu", "sch", "cam", "sw", "BC", "fc", "sync", "tc", "ctrl", "sq", "cs", "nc", "ic", "osc", "Sc", "gc", "icc", "asc", "scl", "isc", "sr", "ctx", "SC", "mc", "pc", "rc", "ch", "desc"], "n": ["nu", "d", "nn", "l", "nr", "N", "h", "ns", "m", "ne", "nl", "cn", "ni", "sn", "b", "count", "z", "j", "nb", " N", "nm", "t", "p", "ln", "nt", "x"], "str": ["set", "r", "name", "STR", "ctr", "coll", "next", "cur", "l", "shr", "del", "ns", "cr", "sp", "strings", "dr", "tr", "err", "msg", "rep", "ocr", "print", "enc", "pse", "b", "list", "sl", "inst", "buffer", "arr", "z", "ent", "j", "hex", "string", "it", "sequence", "url", "Str", "pr", "ts", "dist", "data", "text", "div", "vol", "obj", "output", "mt", "txt", "e", "out", "fr", "exp", "t", "s", "p", "char", "stable", "res"], "stack": ["pop", "empty", "white", "track", "reported", "array", "queue", "chain", "closure", "sp", "v", "console", "context", "pins", "level", "top", "buff", "push", "where", "cache", "scale", "shape", "list", "sl", "ack", "func", "buffer", "acks", "collection", "history", "sequence", "space", "loop", "trace", "null", "struct", "frame", "stream", "comp", "store", "storage", "style", "counter", "exp", "check", "scope", "mount", "upper", "pack", "proc", "frames", "pres", "Stack", "function", "names", "window"], "i": ["I", "ix", "phi", "gi", "zi", "iu", "ei", "ip", "ji", "point", "o", "li", "id", "m", "ij", "me", "ini", "in", "batch", "ai", "ki", "im", "ind", "qi", "a", "ori", "index", "us", "u", "\u0438", "ims", "j", "bi", "it", "ui", "is", "uri", "pi", "json", "ti", "ic", "ci", "sim", "my", "multi", "exp", "iter", "info", "y", "ii", "xi", "si", "di", "x", "mi"], "c": ["arc", "uc", "r", "lc", "ca", "col", "cc", "cur", "character", "con", "l", "co", "cf", "cr", "bc", "v", "cp", "ce", "dc", "cap", "ec", "cu", "b", "fc", "u", "tc", "cat", "cd", "C", "cs", "vc", "k", "cm", "ic", "ci", "com", "ct", "gc", "t", "char", "ac", "cb", "mc", "rc", "ch"], "br": ["r", "ctr", "next", "rier", "bro", "shr", "bsp", "vr", "bc", "cr", "ber", "kr", "dr", "bh", "tr", "bridge", "sp", "bre", "err", "bl", "spr", "bs", "bn", "bp", "Br", "mr", "Fr", "buf", "BR", "b", "lr", "bd", "ibr", "j", "hr", "bm", "pr", "ab", "ptr", "wr", "bt", "rel", "obj", "fr", "rx", "rb", "ch", "gr"], "st": ["set", "stage", "pt", "l", "cl", "sh", "usr", "cr", "sp", "tmp", "sv", "dr", "tr", "stat", "bl", "ste", "nt", "lo", "St", "sw", "ut", "start", "se", "ist", "sm", "sl", "inst", "const", "z", "ost", "sts", "sty", "null", "it", "pr", "cont", "est", "rest", "et", "ast", "bt", "std", "mt", "ct", "fr", "t", "nd", "p", "ft", "stable", "be", "th", "ust", "ST", "ch"]}}
{"code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.util.*;\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        // Here your code !\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String line = br.readLine();\\n        String[] line2 = line.split(\" \");\\n        int row = Integer.parseInt(line2[0]);\\n        int column = Integer.parseInt(line2[1]);\\n        int[][] vec1= new int[row][column];\\n        int[] vec2 = new int[column];\\n        for(int j=0;j<row;j++) {\\n            String v = br.readLine();\\n            String[] v_ary = v.split(\" \");\\n            for(int i=0;i<column;i++) {\\n                vec1[j][i] = Integer.parseInt(v_ary[i]);\\n            }        \\n        }\\n        for(int i=0;i<column;i++) {\\n            String v = br.readLine();\\n            vec2[i] = Integer.parseInt(v);\\n        }\\n        List<Integer> result = vecMul(vec1,vec2);\\n        print(result,column);\\n    }\\n    static void print(List<Integer> res,int column) {\\n        for(int i=0;i<res.size();i++) {\\n            System.out.println(res.get(i));\\n        }    \\n    }\\n    static List<Integer> vecMul(int[][] vec1,int[] vec2) {\\n        List<Integer> res = new ArrayList<Integer>();\\n        for(int j=0;j<vec1.length;j++){\\n            int sum = 0;\\n            for(int i=0;i<vec2.length;i++) {\\n                sum += vec1[j][i] * vec2[i];\\n            }\\n            res.add(new Integer(sum));\\n        }\\n        return res;\\n    }\\n}", "target": "185", "substitutes": {}}
{"code": "import java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.NoSuchElementException;\\n\\npublic class Main {\\n\\n\tpublic static void main(String[] args) {\\n\\n\t\tFastScanner sc = new FastScanner();\\n\t\tint A = sc.nextInt();\\n\t\tint B = sc.nextInt();\\n\t\tint ans = 0;\\n\t\tans = Math.max(ans, 2 * A - 1);\\n\t\tans = Math.max(ans, A + B);\\n\t\tans = Math.max(ans, 2 * B - 1);\\n\t\tSystem.out.println(ans);\\n\\n\t}\\n}\\n\\nclass FastScanner {\\n\tprivate final InputStream in = System.in;\\n\tprivate final byte[] buffer = new byte[1024];\\n\tprivate int ptr = 0;\\n\tprivate int buflen = 0;\\n\\n\tprivate boolean hasNextByte() {\\n\t\tif (ptr < buflen) {\\n\t\t\treturn true;\\n\t\t} else {\\n\t\t\tptr = 0;\\n\t\t\ttry {\\n\t\t\t\tbuflen = in.read(buffer);\\n\t\t\t} catch (IOException e) {\\n\t\t\t\te.printStackTrace();\\n\t\t\t}\\n\t\t\tif (buflen <= 0) {\\n\t\t\t\treturn false;\\n\t\t\t}\\n\t\t}\\n\t\treturn true;\\n\t}\\n\\n\tprivate int readByte() {\\n\t\tif (hasNextByte())\\n\t\t\treturn buffer[ptr++];\\n\t\telse\\n\t\t\treturn -1;\\n\t}\\n\\n\tprivate static boolean isPrintableChar(int c) {\\n\t\treturn 33 <= c && c <= 126;\\n\t}\\n\\n\tpublic boolean hasNext() {\\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\\n\t\t\tptr++;\\n\t\treturn hasNextByte();\\n\t}\\n\\n\tpublic String next() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tStringBuilder sb = new StringBuilder();\\n\t\tint b = readByte();\\n\t\twhile (isPrintableChar(b)) {\\n\t\t\tsb.appendCodePoint(b);\\n\t\t\tb = readByte();\\n\t\t}\\n\t\treturn sb.toString();\\n\t}\\n\\n\tpublic long nextLong() {\\n\t\tif (!hasNext())\\n\t\t\tthrow new NoSuchElementException();\\n\t\tlong n = 0;\\n\t\tboolean minus = false;\\n\t\tint b = readByte();\\n\t\tif (b == '-') {\\n\t\t\tminus = true;\\n\t\t\tb = readByte();\\n\t\t}\\n\t\tif (b < '0' || '9' < b) {\\n\t\t\tthrow new NumberFormatException();\\n\t\t}\\n\t\twhile (true) {\\n\t\t\tif ('0' <= b && b <= '9') {\\n\t\t\t\tn *= 10;\\n\t\t\t\tn += b - '0';\\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\\n\t\t\t\treturn minus ? -n : n;\\n\t\t\t} else {\\n\t\t\t\tthrow new NumberFormatException();\\n\t\t\t}\\n\t\t\tb = readByte();\\n\t\t}\\n\t}\\n\\n\tpublic int nextInt() {\\n\t\tlong nl = nextLong();\\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\\n\t\t\tthrow new NumberFormatException();\\n\t\treturn (int) nl;\\n\t}\\n\\n\tpublic double nextDouble() {\\n\t\treturn Double.parseDouble(next());\\n\t}\\n}\\n", "target": "75", "substitutes": {"sc": ["usc", "lc", "cc", "esc", "mp", "sec", "cl", "sys", "sh", "bc", "sv", "sp", "cr", "ec", "ctl", "sch", "sync", "tc", "ctrl", "scan", "sq", " Sc", "cs", "ss", "nc", "syn", "osc", "Sc", "gc", "asc", "scl", "isc", "ctx", "SC", "mc", "pc", "rc", "ch", "desc"], "A": ["AA", "AU", "E", "CA", "AY", "N", "AE", "AC", "Ax", "At", "As", "G", "SA", "ASC", "S", "P", "Ar", "IA", "ANS", "R", "a", "V", "M", "AN", "AV", "AL", "ACC", "C", "AP", "AM", "U", "AB", "An", "AS", "L", "RA", "AI", "AR", "AX", "AD", "BA", "AF", "PA", "AT"], "B": ["D", "I", "Z", "BB", "LB", "TB", "BI", "E", "BT", "DB", "N", "VB", "NB", "GB", "G", "S", "P", "T", "IB", "R", "BR", "BC", "V", "Q", "BE", "M", "BS", "C", "BO", "JB", "AB", "Y", "L", "J", "EB", "X", "BA", "SB", "Blue"], "ans": ["gs", "uns", "ints", "ents", "ons", "faces", "ras", "nets", "vals", "pan", "aus", "rs", "names", "anas", "outs", "ns", "ads", "asks", "anners", "asts", "can", "ms", "lines", "ates", "arts", "ANS", "amps", "ats", "ens", "ants", "caps", "ags", "es", "ls", "an", "ols", "AN", "angs", "vs", "ams", "aos", "rates", "anes", "ts", " spans", " scans", "cs", "orts", "ations", "ups", "An", "ins", "aps", "ds", "vers", "ions", "as", "cons", "s", "posts", "actions", "fts", "ps", "xs", "rans", "ports", "lan", "offs", "ars", "ann"], "in": ["r", "mm", "bin", "from", "inf", "con", "ar", "l", "isin", "log", "h", "inc", "m", "ini", "err", "inn", "rin", "IN", "get", "run", "or", "im", "ind", "lin", "f", "on", "us", "In", "io", "nin", "win", "it", "din", "is", "i", "inner", "ic", "en", "ins", "input", "conf", "out", "as", "t", "cin", "info", "s", "add", "to", "ch", "mi"], "buffer": ["face", "result", "limit", "row", "password", "Buffer", "queue", "temp", "base", "address", "db", "source", "read", "batch", "buff", "database", "cache", "bone", "buf", "phrase", "se", "index", "list", "button", "view", "scroll", "mem", "sequence", "bank", "reference", "history", "stack", "available", "null", "document", "message", "stream", "template", "length", "screen", "table", "memory", "store", "display", "output", "iter", "p", "binary", "command", "page", "size", "bar", "library", "window"], "ptr": ["br", "addr", "seek", "offset", "heads", "pt", "ctr", "loc", "prime", "sec", "address", "tp", "pl", "ref", "sp", "tmp", "dr", "tip", "tr", "Ptr", "pend", "pe", "bp", "print", "push", "src", "td", "inters", "ind", "inter", "fp", "index", "pos", "req", "pointer", "esp", "pers", "pr", "ts", "pi", "np", "pad", "rel", "rob", "jp", "ped", "exp", "iter", "p", "dep", "ctx", "ld", "th", "pc", "ps", "adr", "proc", "pointers", "pert", "next", "expr"], "buflen": ["bupllen", "builen", "bullength", " bullen", "uuflens", "beanfolun", "bucollength", "uucollener", "buFllen", "bufleng", "burFlen", "beanfline", "buplener", "uucollen", "uuflength", "buFlength", "burFlength", " buflens", "uuflener", "bulllen", "beanfoline", " bullength", "buplength", " buflength", "buflun", " bulleng", "bufoline", "burFlens", "beanfolen", "buplen", "bugline", "buflener", "bufllen", "bucollens", "beanflang", " bullens", "burflength", "buglen", " bufleng", "builens", "bufrine", "buFlen", "builength", "uuflen", "buFlens", "bullens", "bucollener", "bupleng", "buileng", "buglun", "bufrun", "bufolang", "beanflun", "beanfolang", "bulleng", "bufline", "beanflen", "burflen", "bufolen", "bufolun", "bullener", "bufren", "bullen", "bucollen", "buglang", "uucollength", "burflens", "bufrang", "buflang", "uucollens", "burFllen", "buplens", "burfllen", "buflength", "buflens"], "c": ["uc", "r", "lc", "ca", "ctr", "cc", "d", "dec", "cur", "con", "l", "category", "h", "bc", "\u00e7", "v", "m", "ce", "cp", "dc", "cu", "enc", "count", "fc", "f", "code", "fac", "u", "cd", "C", "cont", "cs", "k", "abc", "cm", "cod", "ci", "ct", "w", "e", "t", "x", "p", "ac", "char", "cb", "rc", "cf"], "sb": ["sbm", "xb", "sf", "wb", "ob", "sg", "abs", "bsp", "sv", "zb", "lp", "gb", "bh", "bf", "db", "sa", "bs", "buff", "lb", "bp", "ub", "bj", "gob", "eb", "bd", "ssl", "ib", "nb", "sq", "bg", "pb", "bt", "ssh", "rob", "kb", "bb", "cb", "SB", "rb", "erb", "abb"], "b": ["br", "emb", "d", "wb", "bin", "ob", "base", "mb", "l", "h", "bar", "o", "bc", "gb", "bf", "db", "v", "bl", "bs", "buff", "bp", "val", "ub", "back", "a", "reb", "bd", "eb", "f", "fb", "bu", "z", "j", "bi", "ib", "bound", "nb", "ab", "i", "pb", "bg", "bt", "obj", "bis", "body", "e", "bo", "t", "x", "p", "bb", "cb", "binary", "y", "be", "rb", "ch"], "n": ["nu", "r", "d", "nn", "l", "nr", "N", "ns", "m", "ne", "nan", "ni", "sn", "f", "z", "j", "no", "nb", "i", " N", "g", "w", "t", "p", "ln", "nt", "x"], "minus": ["mini", "dec", "dot", "beta", "cos", "nos", "prime", "cond", "little", "some", "bad", "zero", "big", "sign", "Neg", "nom", "nan", "plus", "negative", "small", "leading", "mon", "axis", "min", "butt", "neg", "extra", "no", "pot", "odd", "div", "doesn", "bot", "mobile", "none", "danger", "digit", " negative", "second"]}}
